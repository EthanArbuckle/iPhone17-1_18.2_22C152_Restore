uint64_t sub_1002B7BDC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  Class isa;
  unsigned __int8 v20;
  id v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  int EnumCaseMultiPayload;
  uint64_t v28;
  unint64_t v29;
  uint64_t vars8;

  v29 = a3;
  type metadata accessor for NANPeer.Service.AuthenticationStatus.State(0);
  __chkstk_darwin();
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for NANPeer.Service.AuthenticationStatus(0);
  v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_1004862F0);
  __chkstk_darwin();
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = NANGenericServiceProtocol.blob.getter(a1);
  if (v14 >> 60 != 15)
  {
    v15 = v14;
    v16 = result;
    switch(v14 >> 62)
    {
      case 1uLL:
        if ((int)result != result >> 32) {
          goto LABEL_4;
        }
        goto LABEL_10;
      case 2uLL:
        if (*(void *)(result + 16) == *(void *)(result + 24)) {
          goto LABEL_10;
        }
        goto LABEL_4;
      case 3uLL:
        goto LABEL_10;
      default:
        if ((v14 & 0xFF000000000000) != 0)
        {
LABEL_4:
          v17 = a2 + qword_1004887E8;
          swift_beginAccess();
          if (*(unsigned char *)(v17 + *(int *)(type metadata accessor for NANPublish.Configuration() + 96))) {
            goto LABEL_5;
          }
          v22 = (uint64_t *)(a2 + qword_100488800);
          swift_beginAccess();
          v23 = *v22;
          if (*(void *)(v23 + 16) && (v24 = sub_100031130(v29 & 0xFFFFFFFFFFFFFFLL), (v25 & 1) != 0))
          {
            sub_1002B9098(*(void *)(v23 + 56) + *(void *)(v8 + 72) * v24, (uint64_t)v12, type metadata accessor for NANPeer.Service.AuthenticationStatus);
            v26 = 0;
          }
          else
          {
            v26 = 1;
          }
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v12, v26, 1, v7);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
          {
            sub_1000380B4((uint64_t)v12, (uint64_t *)&unk_1004862F0);
            swift_endAccess();
          }
          else
          {
            sub_1002B9098((uint64_t)v12, (uint64_t)v10, type metadata accessor for NANPeer.Service.AuthenticationStatus);
            sub_1000380B4((uint64_t)v12, (uint64_t *)&unk_1004862F0);
            swift_endAccess();
            sub_1002B9098((uint64_t)v10, (uint64_t)v6, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
            EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
            sub_1002B910C((uint64_t)v6, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
            sub_1002B910C((uint64_t)v10, type metadata accessor for NANPeer.Service.AuthenticationStatus);
            if (EnumCaseMultiPayload == 2)
            {
LABEL_5:
              v18 = *(void **)(a2 + qword_1004850E8);
              if (v18)
              {
                swift_unknownObjectRetain();
                isa = Data._bridgeToObjectiveC()().super.isa;
                v20 = v29;
                v21 = WiFiAddress.apiAddress.getter((v29 >> 8) & 0xFFFFFFFFFFFFLL);
                [v18 publishReceivedMessage:isa fromSubscriberID:v20 subscriberAddress:v21];
                sub_10000C95C(v16, v15);

                return swift_unknownObjectRelease();
              }
            }
          }
          return sub_10000C95C(v16, v15);
        }
LABEL_10:
        result = sub_10000C95C(result, v14);
        break;
    }
  }
  return result;
}

void sub_1002B8010(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  swift_beginAccess();
  Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    v11 = Strong;
    uint64_t v22 = a3;
    id v12 = Strong;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    v13 = (char *)v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v21 = a5;
      uint64_t v16 = swift_slowAlloc();
      v20 = (void *)swift_slowAlloc();
      v27[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 138413058;
      v17 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v20 = v11;

      *(_WORD *)(v16 + 12) = 2080;
      swift_bridgeObjectRetain();
      sub_100010680(v22, a4, v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v16 + 22) = 2080;
      swift_bridgeObjectRetain();
      sub_100010680(v21, a6, v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v16 + 32) = 2112;
      swift_errorRetain();
      uint64_t v23 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v20[1] = v23;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%@ internet sharing from %s to %s failed because %@", (uint8_t *)v16, 0x2Au);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

      swift_errorRelease();
      swift_errorRelease();
    }
    v18 = &v13[qword_100488808];
    swift_beginAccess();
    uint64_t v19 = *(void *)v18;
    _s17ResponderInstanceCMa();
    sub_1001B8154();
    uint64_t v24 = NANBitmap.Channel.operatingClass.getter(v19);
    __chkstk_darwin();
    type metadata accessor for Dictionary.Values();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    Sequence.forEach(_:)();
    swift_bridgeObjectRelease();
    swift_errorRetain();
    sub_100010BCC((uint64_t *)&unk_1004843F0);
    if (swift_dynamicCast())
    {
      if (v26 == 1)
      {
        if (v24 == 7) {
          sub_1002B3214();
        }
      }
      else
      {
        sub_100012AA4(v24, v25, v26);
      }
    }
  }
}

uint64_t sub_1002B84CC()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

void sub_1002B8514(uint64_t a1)
{
  sub_1002B8010(a1, *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64));
}

uint64_t sub_1002B8528(__int16 a1)
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    v3 = (void *)result;
    uint64_t v4 = *(void *)(result + qword_1004850D0);
    swift_unownedRetainStrong();
    int v5 = NANInternetSharingStatistics.init(provider:)(a1 & 0x101);
    uint64_t v7 = v6;
    char v9 = v8;

    uint64_t v10 = v5 & 0x101FF;
    uint64_t v11 = v4 + *(void *)(*(void *)v4 + 680);
    swift_beginAccess();
    *(void *)uint64_t v11 = v10;
    *(void *)(v11 + 8) = v7;
    *(unsigned char *)(v11 + 16) = v9 & 1;
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1002B860C()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1002B8644(__int16 a1)
{
  return sub_1002B8528(a1 & 0x101);
}

uint64_t sub_1002B8658(uint64_t a1)
{
  uint64_t v2 = a1;
  char v3 = *(unsigned char *)(a1 + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if (v3 & 0x3Fu) <= 0xD || (swift_stdlib_isStackAllocationSafe())
  {
    __chkstk_darwin();
    bzero((char *)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    uint64_t v6 = sub_1002B87B0((unint64_t *)((char *)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v2);
    if (v1) {
      swift_willThrow();
    }
    else {
      return v6;
    }
  }
  else
  {
    uint64_t v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    uint64_t v2 = sub_1002B87B0((unint64_t *)v7, v4, v2);
    swift_slowDealloc();
  }
  return v2;
}

uint64_t sub_1002B87B0(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  v52[0] = a2;
  v53 = a1;
  uint64_t v65 = type metadata accessor for DispatchTime();
  uint64_t v4 = *(void *)(v65 - 8);
  __chkstk_darwin();
  v64 = (char *)v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for DispatchTimeInterval();
  uint64_t v6 = *(void *)(v63 - 8);
  __chkstk_darwin();
  v62 = (char *)v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v61 = (char *)v52 - v8;
  uint64_t v69 = type metadata accessor for NANPeer.Service.AuthenticationStatus.State(0);
  __chkstk_darwin();
  uint64_t v72 = (uint64_t)v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = sub_100010BCC(&qword_1004852C8);
  __chkstk_darwin();
  v67 = (char *)v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v78 = (char *)v52 - v11;
  uint64_t v60 = type metadata accessor for NANPeer.Service.AuthenticationStatus(0);
  uint64_t v66 = *(void *)(v60 - 8);
  __chkstk_darwin();
  uint64_t v77 = (uint64_t)v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = 0;
  int64_t v13 = 0;
  v70 = (void *)a3;
  uint64_t v14 = *(void *)(a3 + 64);
  uint64_t v55 = a3 + 64;
  uint64_t v15 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & v14;
  int64_t v56 = (unint64_t)(v15 + 63) >> 6;
  v58 = (void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v59 = (void (**)(char *, uint64_t))(v4 + 8);
  v57 = (void (**)(char *, uint64_t))(v6 + 8);
  while (2)
  {
    if (v17)
    {
      uint64_t v75 = (v17 - 1) & v17;
      int64_t v76 = v13;
      unint64_t v25 = __clz(__rbit64(v17)) | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v26 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v26 >= v56) {
      return sub_100368D90(v53, v52[0], v54, v70);
    }
    unint64_t v27 = *(void *)(v55 + 8 * v26);
    int64_t v28 = v13 + 1;
    if (v27) {
      goto LABEL_21;
    }
    int64_t v28 = v13 + 2;
    if (v13 + 2 >= v56) {
      return sub_100368D90(v53, v52[0], v54, v70);
    }
    unint64_t v27 = *(void *)(v55 + 8 * v28);
    if (v27) {
      goto LABEL_21;
    }
    int64_t v28 = v13 + 3;
    if (v13 + 3 >= v56) {
      return sub_100368D90(v53, v52[0], v54, v70);
    }
    unint64_t v27 = *(void *)(v55 + 8 * v28);
    if (v27) {
      goto LABEL_21;
    }
    uint64_t v29 = v13 + 4;
    if (v13 + 4 >= v56) {
      return sub_100368D90(v53, v52[0], v54, v70);
    }
    unint64_t v27 = *(void *)(v55 + 8 * v29);
    if (!v27)
    {
      while (1)
      {
        int64_t v28 = v29 + 1;
        if (__OFADD__(v29, 1)) {
          break;
        }
        if (v28 >= v56) {
          return sub_100368D90(v53, v52[0], v54, v70);
        }
        unint64_t v27 = *(void *)(v55 + 8 * v28);
        ++v29;
        if (v27) {
          goto LABEL_21;
        }
      }
LABEL_31:
      __break(1u);
      JUMPOUT(0x1002B8EF4);
    }
    int64_t v28 = v13 + 4;
LABEL_21:
    uint64_t v75 = (v27 - 1) & v27;
    int64_t v76 = v28;
    unint64_t v25 = __clz(__rbit64(v27)) + (v28 << 6);
LABEL_22:
    uint64_t v30 = v70[7];
    v31 = (char *)(v70[6] - v25 + 8 * v25);
    char v32 = *v31;
    char v33 = v31[1];
    char v34 = v31[2];
    char v35 = v31[3];
    char v36 = v31[4];
    unsigned __int8 v37 = v31[5];
    int v74 = v37;
    char v38 = v31[6];
    uint64_t v39 = *(void *)(v66 + 72);
    unint64_t v71 = v25;
    v73 = type metadata accessor for NANPeer.Service.AuthenticationStatus;
    uint64_t v40 = v77;
    sub_1002B9098(v30 + v39 * v25, v77, type metadata accessor for NANPeer.Service.AuthenticationStatus);
    uint64_t v41 = v68;
    uint64_t v42 = *(int *)(v68 + 48);
    v43 = v78;
    uint64_t v44 = (uint64_t)&v78[v42];
    unsigned char *v78 = v32;
    v43[1] = v33;
    v43[2] = v34;
    v43[3] = v35;
    v43[4] = v36;
    v43[5] = v37;
    v43[6] = v38;
    uint64_t v45 = v40;
    uint64_t v46 = (uint64_t)&v43[v42];
    v47 = v73;
    sub_1002B9098(v45, v44, v73);
    v48 = v67;
    uint64_t v49 = (uint64_t)&v67[*(int *)(v41 + 48)];
    unsigned char *v67 = v32;
    v48[1] = v33;
    v48[2] = v34;
    v48[3] = v35;
    v48[4] = v36;
    v48[5] = v74;
    v48[6] = v38;
    sub_1002B9098(v46, v49, v47);
    sub_1002B9098(v49, v72, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        swift_bridgeObjectRelease();
        goto LABEL_5;
      case 2u:
        sub_10000C970(*(void *)v72, *(void *)(v72 + 8));
        goto LABEL_25;
      case 3u:
LABEL_25:
        sub_1000380B4((uint64_t)v78, &qword_1004852C8);
        sub_1002B910C(v49, type metadata accessor for NANPeer.Service.AuthenticationStatus);
        sub_1002B910C(v77, type metadata accessor for NANPeer.Service.AuthenticationStatus);
        unint64_t v17 = v75;
        int64_t v13 = v76;
        goto LABEL_26;
      case 4u:
        goto LABEL_5;
      default:
        sub_1002B910C(v72, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
LABEL_5:
        type metadata accessor for P2PTimer();
        v18 = v64;
        variable initialization expression of AWDLPeer.lastUpdated();
        uint64_t v19 = v61;
        DispatchTime.distance(to:)();
        (*v59)(v18, v65);
        uint64_t v20 = NANConstants.authenticationRequestTimeout.unsafeMutableAddressor();
        uint64_t v22 = v62;
        uint64_t v21 = v63;
        (*v58)(v62, v20, v63);
        BOOL v23 = static DispatchTimeInterval.< infix(_:_:)();
        uint64_t v24 = *v57;
        (*v57)(v22, v21);
        v24(v19, v21);
        sub_1000380B4((uint64_t)v78, &qword_1004852C8);
        sub_1002B910C(v49, type metadata accessor for NANPeer.Service.AuthenticationStatus);
        sub_1002B910C(v77, type metadata accessor for NANPeer.Service.AuthenticationStatus);
        unint64_t v17 = v75;
        int64_t v13 = v76;
        if (v23) {
          continue;
        }
LABEL_26:
        *(unint64_t *)((char *)v53 + ((v71 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v71;
        if (!__OFADD__(v54++, 1)) {
          continue;
        }
        __break(1u);
        break;
    }
    return sub_100368D90(v53, v52[0], v54, v70);
  }
}

void sub_1002B8F08()
{
}

void *sub_1002B8F34()
{
  return sub_1002B3964();
}

uint64_t sub_1002B8F40(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002B8FA8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

void sub_1002B9010()
{
}

uint64_t sub_1002B901C()
{
  uint64_t v1 = *(void *)(v0 + 16) + qword_1004887E8;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 72) = 1;
  return result;
}

uint64_t sub_1002B907C()
{
  return sub_1002B47C0(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1002B9098(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_1002B9100()
{
}

uint64_t sub_1002B910C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_1002B916C()
{
}

uint64_t sub_1002B919C()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002B91D4(uint64_t a1, uint64_t a2)
{
  return sub_1002C95F0(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1002B91DC()
{
  swift_release();

  return _swift_deallocObject(v0, 46, 7);
}

void sub_1002B9214(uint64_t a1)
{
  sub_1002B5BDC(a1, *(void *)(v1 + 32), *(unsigned __int16 *)(v1 + 40) | ((unint64_t)*(unsigned int *)(v1 + 42) << 16));
}

uint64_t sub_1002B922C()
{
  return sub_1002B44E0(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

unsigned __int8 *sub_1002B9248(unsigned __int8 *a1)
{
  return sub_1002ADF04(a1, *(void *)(v1 + 16));
}

uint64_t sub_1002B9280(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler);
  uint64_t v4 = *(void *)(v2 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler);
  void *v3 = a1;
  v3[1] = a2;
  return sub_100011E30(v4);
}

id sub_1002B92A0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = &v3[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_requestHandler];
  *(void *)uint64_t v11 = NANBitmap.Channel.operatingClass.getter;
  *((void *)v11 + 1) = 0;
  uint64_t v12 = &v3[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler];
  *(void *)uint64_t v12 = 0;
  *((void *)v12 + 1) = 0;
  *(void *)&v3[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_voucher] = 0;
  int64_t v13 = v3;
  UUID.init()();
  id v14 = [objc_allocWithZone((Class)NSXPCConnection) init];
  *(void *)&v13[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection] = v14;
  *(void *)&v13[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_queue] = a3;
  id v15 = a3;
  Logger.init(subsystem:category:)();
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v13[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_logger], v10, v7);
  uint64_t v28 = 0x6470327069666977;
  unint64_t v29 = 0xE90000000000002ELL;
  v16._countAndFlagsBits = a1;
  v16._object = a2;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  unint64_t v17 = v29;
  v18 = (uint64_t *)&v13[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_processName];
  uint64_t *v18 = v28;
  v18[1] = v17;

  uint64_t v19 = (objc_class *)type metadata accessor for XPCSession(0);
  v27.receiver = v13;
  v27.super_class = v19;
  id v20 = [super init];
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    BOOL v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = (void *)swift_slowAlloc();
    *(_DWORD *)BOOL v23 = 138412290;
    uint64_t v28 = (uint64_t)v20;
    id v25 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v24 = v20;

    _os_log_impl((void *)&_mh_execute_header, v21, v22, "%@ was created", v23, 0xCu);
    sub_100010BCC(&qword_10047CC30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    id v15 = v20;
  }

  return v20;
}

id sub_1002B95D0()
{
  uint64_t v1 = v0;
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    uint64_t v6 = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v1;

    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%@ was destroyed", v4, 0xCu);
    sub_100010BCC(&qword_10047CC30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  [*(id *)&v1[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection] invalidate];
  v8.receiver = v1;
  v8.super_class = (Class)type metadata accessor for XPCSession(0);
  return [super dealloc];
}

uint64_t sub_1002B98AC()
{
  return type metadata accessor for XPCSession(0);
}

void sub_1002B98B4()
{
  uint64_t v0 = type metadata accessor for DispatchPredicate();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  os_log_type_t v3 = (void *)((char *)v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = (void *)Strong;
    uint64_t v6 = *(void (**)(void))(Strong + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler);
    if (v6)
    {
      uint64_t v7 = *(void *)(Strong + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler + 8);
      objc_super v8 = *(void **)(Strong + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_queue);
      void *v3 = v8;
      (*(void (**)(void *, void, uint64_t))(v1 + 104))(v3, enum case for DispatchPredicate.onQueue(_:), v0);
      sub_100037FF4((uint64_t)v6);
      id v9 = v8;
      LOBYTE(v8) = _dispatchPreconditionTest(_:)();
      (*(void (**)(void *, uint64_t))(v1 + 8))(v3, v0);
      if ((v8 & 1) == 0)
      {
        __break(1u);
        return;
      }
      id v10 = v5;
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v11, v12))
      {
        int64_t v13 = (uint8_t *)swift_slowAlloc();
        uint64_t v14 = swift_slowAlloc();
        v17[1] = v7;
        v17[2] = v10;
        id v15 = (void *)v14;
        *(_DWORD *)int64_t v13 = 138412290;
        id v16 = v10;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v15 = v5;

        _os_log_impl((void *)&_mh_execute_header, v11, v12, "%@ was invalidated", v13, 0xCu);
        sub_100010BCC(&qword_10047CC30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      v6();
      sub_100011E30((uint64_t)v6);
    }
  }
}

uint64_t sub_1002B9B5C(uint64_t a1)
{
  os_log_type_t v3 = *(void **)(v1 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection);
  sub_1000A6A90(a1, (uint64_t)v10);
  uint64_t v4 = v11;
  if (v11)
  {
    sub_1000369C4(v10, v11);
    uint64_t v5 = *(void *)(v4 - 8);
    __chkstk_darwin();
    uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v5 + 16))(v7);
    uint64_t v8 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    sub_100010754((uint64_t)v10);
  }
  else
  {
    uint64_t v8 = 0;
  }
  [v3 setExportedObject:v8];
  swift_unknownObjectRelease();
  return sub_1000D4FD4(a1);
}

uint64_t sub_1002B9CB4()
{
  id v1 = [*(id *)(v0 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection) remoteObjectProxy];
  _bridgeAnyObjectToAny(_:)();

  return swift_unknownObjectRelease();
}

uint64_t sub_1002B9D48()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for UUID();
    if (v2 <= 0x3F) {
      return swift_updateClassMetadata2();
    }
  }
  return result;
}

uint64_t sub_1002B9E44()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100480650);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v12 = *v0;
  uint64_t v7 = v12;
  uint64_t v11 = _swiftEmptyArrayStorage;
  uint64_t v8 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v6, 1, 1, v8);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for Mirror.AncestorRepresentation.generated(_:), v1);
  type metadata accessor for XPCSession(0);
  id v9 = v7;
  sub_100010BCC(&qword_10047DC10);
  sub_100074578();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t sub_1002BA004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin();
  v11[0] = a1;
  v11[1] = a2;
  v11[3] = 0;
  v11[4] = 0;
  v11[2] = a3;
  char v12 = 0;
  static DispatchWorkItemFlags.assignCurrentContext.getter();
  aBlock[4] = NANBitmap.Channel.operatingClass.getter;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E5D0;
  aBlock[3] = &unk_1004697F8;
  _Block_copy(aBlock);
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  *(void *)(v4 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_voucher) = DispatchWorkItem.init(flags:block:)();
  swift_release();
  uint64_t v8 = *(void (**)(void *, uint64_t))(v4 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_requestHandler);
  swift_retain();
  v8(v11, v4);
  return swift_release();
}

uint64_t sub_1002BA1D8(void *a1, int a2, void *a3, void *aBlock, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  int64_t v13 = _Block_copy(aBlock);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v13;
  id v15 = a3;
  id v16 = a1;
  sub_1002BAE4C((uint64_t)v15, a6, v14, a7, a8);

  return swift_release();
}

uint64_t sub_1002BA2E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin();
  v10[0] = a1;
  v10[1] = a2;
  void v10[3] = 0;
  v10[4] = 0;
  v10[2] = a3;
  char v11 = 4;
  if ((a1 | 4) != 4)
  {
    static DispatchWorkItemFlags.assignCurrentContext.getter();
    aBlock[4] = NANBitmap.Channel.operatingClass.getter;
    aBlock[5] = 0;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10000E5D0;
    aBlock[3] = &unk_1004696B8;
    _Block_copy(aBlock);
    type metadata accessor for DispatchWorkItem();
    swift_allocObject();
    *(void *)(v3 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_voucher) = DispatchWorkItem.init(flags:block:)();
    swift_release();
  }
  uint64_t v7 = *(void (**)(void *, uint64_t))(v3 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_requestHandler);
  swift_retain();
  v7(v10, v3);
  return swift_release();
}

uint64_t sub_1002BA614(void *a1, int a2, void *aBlock, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  char v11 = _Block_copy(aBlock);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  id v13 = a1;
  sub_1002BB020(a5, v12, a6, a7);

  return swift_release();
}

uint64_t sub_1002BA6B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin();
  v9[0] = WiFiMACAddress.wifiAddress.getter() & 0xFFFFFFFFFFFFLL;
  v9[1] = a2;
  v9[3] = 0;
  v9[4] = 0;
  v9[2] = a3;
  char v10 = 7;
  static DispatchWorkItemFlags.assignCurrentContext.getter();
  aBlock[4] = NANBitmap.Channel.operatingClass.getter;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E5D0;
  aBlock[3] = &unk_1004695F0;
  _Block_copy(aBlock);
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  *(void *)(v3 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_voucher) = DispatchWorkItem.init(flags:block:)();
  swift_release();
  uint64_t v6 = *(void (**)(void *, uint64_t))(v3 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_requestHandler);
  swift_retain();
  v6(v9, v3);
  return swift_release();
}

uint64_t sub_1002BA864(void *a1, int a2, void *a3, void *aBlock, uint64_t a5, uint64_t a6, void (*a7)(id, uint64_t, uint64_t))
{
  char v11 = _Block_copy(aBlock);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  id v13 = a3;
  id v14 = a1;
  a7(v13, a6, v12);

  return swift_release();
}

void sub_1002BA938(uint64_t a1, uint64_t a2)
{
  sub_100010BCC((uint64_t *)&unk_1004853E0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, objc_class *))(a2 + 16))(a2, isa);
}

uint64_t sub_1002BAA00(unint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin();
  if (!(a1 >> 62))
  {
    uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v7) {
      goto LABEL_3;
    }
LABEL_23:
    swift_bridgeObjectRelease();
    char v10 = _swiftEmptyArrayStorage;
LABEL_24:
    v27[0] = v10;
    v27[1] = a2;
    uint64_t v27[3] = 0;
    v27[4] = 0;
    v27[2] = a3;
    char v28 = 14;
    swift_retain();
    static DispatchWorkItemFlags.assignCurrentContext.getter();
    aBlock[4] = NANBitmap.Channel.operatingClass.getter;
    aBlock[5] = 0;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10000E5D0;
    aBlock[3] = &unk_1004694B0;
    _Block_copy(aBlock);
    type metadata accessor for DispatchWorkItem();
    swift_allocObject();
    *(void *)(v3 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_voucher) = DispatchWorkItem.init(flags:block:)();
    swift_release();
    BOOL v23 = *(void (**)(void *, uint64_t))(v3 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_requestHandler);
    swift_retain();
    v23(v27, v3);
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v7 = result;
  if (!result) {
    goto LABEL_23;
  }
LABEL_3:
  if (v7 >= 1)
  {
    uint64_t v24 = a2;
    uint64_t v25 = a3;
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v9 = 0;
      char v10 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v12 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        unint64_t v13 = Channel.init(apiChannel:)(v12);
        if ((v13 & 0xFF00000000) != 0x300000000)
        {
          unint64_t v14 = v13;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            char v10 = sub_1000C5C4C(0, v10[2] + 1, 1, v10);
          }
          unint64_t v16 = v10[2];
          unint64_t v15 = v10[3];
          if (v16 >= v15 >> 1) {
            char v10 = sub_1000C5C4C((void *)(v15 > 1), v16 + 1, 1, v10);
          }
          v10[2] = v16 + 1;
          char v11 = &v10[v16];
          *((_DWORD *)v11 + 8) = v14;
          *((unsigned char *)v11 + 36) = BYTE4(v14);
          *((unsigned char *)v11 + 37) = BYTE5(v14);
        }
        ++v9;
      }
      while (v7 != v9);
    }
    else
    {
      uint64_t v17 = 0;
      char v10 = _swiftEmptyArrayStorage;
      do
      {
        unint64_t v19 = Channel.init(apiChannel:)(*(id *)(a1 + 8 * v17 + 32));
        if ((v19 & 0xFF00000000) != 0x300000000)
        {
          unint64_t v20 = v19;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            char v10 = sub_1000C5C4C(0, v10[2] + 1, 1, v10);
          }
          unint64_t v22 = v10[2];
          unint64_t v21 = v10[3];
          if (v22 >= v21 >> 1) {
            char v10 = sub_1000C5C4C((void *)(v21 > 1), v22 + 1, 1, v10);
          }
          v10[2] = v22 + 1;
          v18 = &v10[v22];
          *((_DWORD *)v18 + 8) = v20;
          *((unsigned char *)v18 + 36) = BYTE4(v20);
          *((unsigned char *)v18 + 37) = BYTE5(v20);
        }
        ++v17;
      }
      while (v7 != v17);
    }
    swift_bridgeObjectRelease();
    a2 = v24;
    a3 = v25;
    goto LABEL_24;
  }
  __break(1u);
  return result;
}

uint64_t sub_1002BAE4C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v8 = v5;
  type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin();
  v15[0] = a1;
  v15[1] = a2;
  v15[3] = 0;
  v15[4] = 0;
  v15[2] = a3;
  char v16 = a4;
  static DispatchWorkItemFlags.assignCurrentContext.getter();
  aBlock[4] = NANBitmap.Channel.operatingClass.getter;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E5D0;
  aBlock[3] = a5;
  _Block_copy(aBlock);
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  *(void *)(v8 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_voucher) = DispatchWorkItem.init(flags:block:)();
  swift_release();
  uint64_t v12 = *(void (**)(void *, uint64_t))(v8 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_requestHandler);
  swift_retain();
  v12(v15, v8);
  return swift_release();
}

uint64_t sub_1002BB020(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v7 = v4;
  type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin();
  v13[0] = a1;
  v13[1] = a2;
  memset(&v13[2], 0, 24);
  char v14 = a3;
  static DispatchWorkItemFlags.assignCurrentContext.getter();
  aBlock[4] = NANBitmap.Channel.operatingClass.getter;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E5D0;
  aBlock[3] = a4;
  _Block_copy(aBlock);
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  *(void *)(v7 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_voucher) = DispatchWorkItem.init(flags:block:)();
  swift_release();
  char v10 = *(void (**)(void *, uint64_t))(v7 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_requestHandler);
  swift_retain();
  v10(v13, v7);
  return swift_release();
}

void sub_1002BB1BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  sub_10006F314(0, (unint64_t *)&unk_1004853D0);
  uint64_t v5 = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class, objc_class *))(a3 + 16))(a3, isa, v5);
}

uint64_t sub_1002BB258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin();
  v15[0] = a1;
  v15[1] = a2;
  v15[2] = a3;
  v15[3] = a4;
  v15[4] = a5;
  char v16 = 15;
  static DispatchWorkItemFlags.assignCurrentContext.getter();
  aBlock[4] = NANBitmap.Channel.operatingClass.getter;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E5D0;
  aBlock[3] = &unk_100469370;
  _Block_copy(aBlock);
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  *(void *)(v6 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_voucher) = DispatchWorkItem.init(flags:block:)();
  swift_release();
  uint64_t v12 = *(void (**)(void *, uint64_t))(v6 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_requestHandler);
  swift_retain();
  v12(v15, v6);
  return swift_release();
}

uint64_t sub_1002BB4B4(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(*(void *)(a1 + OBJC_IVAR____TtC12wifip2pdCore12XPCResponder_session)
                 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler);
  uint64_t v2 = *v1;
  *uint64_t v1 = 0;
  v1[1] = 0;
  sub_100011E30(v2);
  memset(v4, 0, sizeof(v4));
  return sub_1002B9B5C((uint64_t)v4);
}

id sub_1002BB53C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for XPCResponder(0);
  return [super dealloc];
}

uint64_t sub_1002BB5F4()
{
  return type metadata accessor for XPCResponder(0);
}

uint64_t type metadata accessor for XPCResponder(uint64_t a1)
{
  return sub_10000A7D0(a1, (uint64_t *)&unk_1004853C0);
}

uint64_t sub_1002BB61C()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void *sub_1002BB6B8(void *result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  switch(a6)
  {
    case 0:
    case 1:
    case 2:
    case 5:
    case 11:
      id v8 = result;
      goto LABEL_3;
    case 3:
    case 4:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 12:
    case 13:
      goto LABEL_3;
    case 14:
      swift_bridgeObjectRetain();
      goto LABEL_3;
    case 15:
      swift_bridgeObjectRetain();
      id v9 = a2;
LABEL_3:
      uint64_t result = (void *)swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

void *destroy for XPCSession.Request(uint64_t a1)
{
  return sub_1002BB7AC(*(void **)a1, *(void **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
}

void *sub_1002BB7AC(void *result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  switch(a6)
  {
    case 0:
    case 1:
    case 2:
    case 5:
    case 11:

      goto LABEL_3;
    case 3:
    case 4:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 12:
    case 13:
      goto LABEL_3;
    case 14:
      swift_bridgeObjectRelease();
      goto LABEL_3;
    case 15:
      swift_bridgeObjectRelease();

LABEL_3:
      uint64_t result = (void *)swift_release();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t initializeWithCopy for XPCSession.Request(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 40);
  sub_1002BB6B8(*(void **)a2, v4, v5, v6, v7, v8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = v8;
  return a1;
}

uint64_t assignWithCopy for XPCSession.Request(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 40);
  sub_1002BB6B8(*(void **)a2, v4, v5, v6, v7, v8);
  id v9 = *(void **)a1;
  char v10 = *(void **)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = *(void *)(a1 + 32);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  char v14 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v8;
  sub_1002BB7AC(v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for XPCSession.Request(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  char v4 = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *(void **)a1;
  uint64_t v7 = *(void **)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(void *)(a1 + 32) = v3;
  char v11 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v4;
  sub_1002BB7AC(v5, v7, v6, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCSession.Request(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF1 && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 241);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 0xF) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCSession.Request(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)uint64_t result = a2 - 241;
    if (a3 >= 0xF1) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF1) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1002BBA78(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t sub_1002BBA80(uint64_t result, char a2)
{
  *(unsigned char *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for XPCSession.Request()
{
  return &type metadata for XPCSession.Request;
}

uint64_t sub_1002BBA9C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC12wifip2pdCore12XPCResponder_logger;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

char *sub_1002BBB14(void *a1, uint64_t a2, uint64_t a3)
{
  *(void *)&v3[OBJC_IVAR____TtC12wifip2pdCore12XPCResponder_session] = a1;
  uint64_t v7 = &v3[OBJC_IVAR____TtC12wifip2pdCore12XPCResponder_logger];
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v7, a2, v8);
  long long v10 = (objc_class *)type metadata accessor for XPCResponder(0);
  v27.receiver = v3;
  v27.super_class = v10;
  id v11 = a1;
  uint64_t v12 = (char *)[super init];
  uint64_t v13 = OBJC_IVAR____TtC12wifip2pdCore12XPCResponder_session;
  char v14 = *(void **)&v12[OBJC_IVAR____TtC12wifip2pdCore12XPCResponder_session];
  unint64_t v15 = self;
  char v16 = v12;
  uint64_t v17 = v14;
  id v18 = [v15 interfaceWithProtocol:a3];
  [*(id *)&v17[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection] setExportedInterface:v18];

  uint64_t v19 = *(void *)&v12[v13];
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v16;
  unint64_t v21 = (uint64_t (**)())(v19 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler);
  uint64_t v22 = *(void *)(v19 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler);
  *unint64_t v21 = sub_1002BC264;
  v21[1] = (uint64_t (*)())v20;
  BOOL v23 = v16;
  sub_100011E30(v22);
  v26[3] = v10;
  v26[0] = v23;
  uint64_t v24 = v23;
  sub_1002B9B5C((uint64_t)v26);

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a2, v8);
  return v24;
}

char *sub_1002BBCFC(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v11 = &v5[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_requestHandler];
  *(void *)id v11 = NANBitmap.Channel.operatingClass.getter;
  *((void *)v11 + 1) = 0;
  uint64_t v12 = &v5[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler];
  *(void *)uint64_t v12 = 0;
  *((void *)v12 + 1) = 0;
  *(void *)&v5[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_voucher] = 0;
  uint64_t v13 = v5;
  UUID.init()();
  char v14 = &unk_100485000;
  *(void *)&v13[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection] = a1;
  *(void *)&v13[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_queue] = a2;
  unint64_t v15 = &v13[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_logger];
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = *(void *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v15, a3, v16);
  id v18 = &v13[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_processName];
  *(void *)id v18 = a4;
  *((void *)v18 + 1) = a5;
  id v19 = a1;
  id v20 = a2;

  v38.receiver = v13;
  v38.super_class = (Class)type metadata accessor for XPCSession(0);
  unint64_t v21 = (char *)[super init];
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v36 = a3;
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    char v35 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 138412290;
    aBlock[0] = v21;
    uint64_t v25 = v21;
    char v14 = (void *)&unk_100485000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *char v35 = v21;

    a3 = v36;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "%@ was created", v24, 0xCu);
    sub_100010BCC(&qword_10047CC30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v26 = v14[93];
  objc_super v27 = *(void **)&v21[v26];
  char v28 = self;
  id v29 = v27;
  id v30 = [v28 wifip2pRemoteXPCInterface];
  [v29 setExportedInterface:v30];

  v31 = *(void **)&v21[v26];
  [v31 setExportedObject:v21];
  uint64_t v32 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = sub_1002BC104;
  aBlock[5] = v32;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E5D0;
  aBlock[3] = &unk_100469320;
  char v33 = _Block_copy(aBlock);
  swift_release();
  [v31 setInvalidationHandler:v33];

  _Block_release(v33);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a3, v16);
  return v21;
}

uint64_t sub_1002BC0CC()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1002BC104()
{
}

void sub_1002BC10C(uint64_t a1, uint64_t a2)
{
  sub_1002BB1BC(a1, a2, *(void *)(v2 + 16));
}

void sub_1002BC114()
{
  uint64_t v1 = *(void *)(v0 + 16);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, objc_class *))(v1 + 16))(v1, isa);
}

void sub_1002BC178()
{
  uint64_t v1 = *(void *)(v0 + 16);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, objc_class *))(v1 + 16))(v1, isa);
}

void sub_1002BC1EC(uint64_t a1)
{
  sub_1002BA938(a1, *(void *)(v1 + 16));
}

uint64_t sub_1002BC1F4()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002BC22C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002BC264()
{
  return sub_1002BB4B4(*(void *)(v0 + 16));
}

uint64_t sub_1002BC324()
{
  return swift_initClassMetadata2();
}

uint64_t (*sub_1002BC37C())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1002BC3D8()
{
  swift_weakDestroy();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

id sub_1002BC468()
{
  ObjectType = (objc_class *)swift_getObjectType();
  swift_getWitnessTable();
  BonjourOffload.stopAllServices()();
  v3.receiver = v0;
  v3.super_class = ObjectType;
  return [super dealloc];
}

id sub_1002BC4D4(void *a1)
{
  id v1 = a1;
  return sub_1002BC468();
}

uint64_t sub_1002BC4FC()
{
  swift_weakDestroy();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

id sub_1002BC590(void *a1, uint64_t a2)
{
  return sub_1002BD1C4(a1, a2, (void (*)(void))sub_1002C0FB8);
}

void sub_1002BC5A8(void *a1, int a2, void *a3, void *a4)
{
}

uint64_t sub_1002BC5FC(void *a1, uint64_t (*a2)(void), uint64_t a3, void (*a4)(unsigned char *, uint64_t, uint64_t), void (*a5)(unsigned char *, uint64_t, uint64_t), void (*a6)(unsigned char *, uint64_t, uint64_t))
{
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v13 = (uint64_t *)((char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  char v14 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  unint64_t v15 = (void *)*v14;
  uint64_t *v13 = *v14;
  (*(void (**)(uint64_t *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  id v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v11 + 8))(v13, v10);
  if (v15)
  {
    uint64_t WitnessTable = swift_getWitnessTable();
    BonjourOffload.record(from:)(a1, (uint64_t *)&v26);
    if (v27)
    {
      sub_10006EF50(&v26, (uint64_t)v28);
      id v19 = [a1 serviceValue];
      if (v19)
      {
        id v20 = v19;
        uint64_t v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v23 = v22;

        sub_10000C970(v21, v23);
        if ([a1 isResolve]) {
          v24(v28, ObjectType, WitnessTable);
        }
        else {
          v25(v28, ObjectType, WitnessTable);
        }
      }
      else
      {
        a4(v28, ObjectType, WitnessTable);
      }
      sub_100010754((uint64_t)v28);
    }
    else
    {
      sub_1000380B4((uint64_t)&v26, &qword_1004813C8);
    }
    return a2(0);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1002BC84C(void *a1, int a2, void *a3, void *a4)
{
}

void sub_1002BC8A0(void *a1, int a2, void *a3, void *aBlock, uint64_t (*a5)(void), void (*a6)(unsigned char *, uint64_t, uint64_t), void (*a7)(unsigned char *, uint64_t, uint64_t), void (*a8)(unsigned char *, uint64_t, uint64_t))
{
  char v14 = _Block_copy(aBlock);
  v17[2] = v14;
  id v15 = a3;
  id v16 = a1;
  sub_1002BC5FC(v15, a5, (uint64_t)v17, a6, a7, a8);
  _Block_release(v14);
}

uint64_t type metadata accessor for WiFiAwareBonjourOffload()
{
  return sub_100038354();
}

uint64_t sub_1002BC95C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1002BCA0C()
{
  sub_1002C0BEC();

  return swift_unknownObjectRetain();
}

uint64_t sub_1002BCA34()
{
  return sub_1002BCB3C(&qword_100488840);
}

uint64_t sub_1002BCA54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1002BF000(a1, a2, a3, a4, a5, a6, &qword_100488840);
}

uint64_t (*sub_1002BCA60(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_1002BC37C();
  return sub_1002BCAB8;
}

uint64_t sub_1002BCABC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1002BCC18((uint64_t)&qword_100488830, sub_100354870);
  *a1 = result;
  return result;
}

unint64_t sub_1002BCB00()
{
  swift_getObjectType();

  return BonjourOffload.peersToInvalidate()();
}

uint64_t sub_1002BCB3C(void *a1)
{
  uint64_t v2 = (uint64_t *)(v1 + *a1);
  swift_beginAccess();
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t (*sub_1002BCBBC())()
{
  return j__swift_endAccess;
}

uint64_t sub_1002BCC18(uint64_t a1, uint64_t (*a2)(void))
{
  if (!swift_weakLoadStrong()) {
    return 0;
  }
  uint64_t v3 = a2();
  swift_release();
  return v3;
}

uint64_t sub_1002BCC6C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = os_transaction_create();
  *a1 = result;
  return result;
}

uint64_t sub_1002BCC9C(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v40[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AWDLPeer(0);
  uint64_t v9 = (unsigned __int8 *)(a1 + *(int *)(v8 + 20));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  unint64_t v12 = (unint64_t)*(unsigned int *)(v9 + 2) << 16;
  uint64_t v13 = a1 + *(int *)(v8 + 52);
  if (*(void *)(v13 + 16))
  {
    uint64_t v14 = *(void *)(v13 + 8);
    uint64_t v15 = *(void *)(v13 + 16);
  }
  else
  {
    UUID.init()();
    uint64_t v14 = UUID.uuidString.getter();
    uint64_t v15 = v16;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v17 = WiFiAddress.ipv6LinkLocalAddress.getter(v10 | (v11 << 8) | v12);
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v41 = &type metadata for DNSRecords.AAAA;
  uint64_t v42 = &protocol witness table for DNSRecords.AAAA;
  uint64_t v24 = swift_allocObject();
  v40[0] = v24;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v24 + 16) = 27;
  *(void *)(v24 + 24) = v14;
  *(void *)(v24 + 32) = v15;
  *(unsigned char *)(v24 + 40) = 1;
  *(void *)(v24 + 48) = v17;
  *(void *)(v24 + 56) = v19;
  *(void *)(v24 + 64) = v21;
  *(void *)(v24 + 72) = v23;
  if (a2)
  {
    uint64_t v25 = v41;
    long long v26 = v42;
    sub_1000369C4(v40, (uint64_t)v41);
    uint64_t v27 = ((uint64_t (*)(ValueMetadata *, _UNKNOWN **))v26[1])(v25, v26);
    unint64_t v29 = v28;
    v30.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10000C970(v27, v29);
    v31 = v41;
    uint64_t v32 = v42;
    sub_1000369C4(v40, (uint64_t)v41);
    uint64_t v33 = ((uint64_t (*)(ValueMetadata *, _UNKNOWN **))v32[2])(v31, v32);
    if (v34 >> 60 == 15)
    {
      Class isa = 0;
    }
    else
    {
      uint64_t v36 = v33;
      unint64_t v37 = v34;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10000C95C(v36, v37);
    }
    [a2 handleEventType:3 keyData:v30.super.isa valueData:isa];
  }
  return sub_100010754((uint64_t)v40);
}

uint64_t sub_1002BCF2C()
{
  swift_weakDestroy();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + qword_100488860;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_unknownObjectRelease();
}

id sub_1002BD000()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  if (swift_weakLoadStrong())
  {
    sub_100375570((uint64_t)v0 + qword_100488860);
    swift_release();
  }
  swift_getWitnessTable();
  BonjourOffload.stopAllServices()();
  v3.receiver = v0;
  v3.super_class = ObjectType;
  [super dealloc];
}

id sub_1002BD0AC(void *a1)
{
  id v1 = a1;
  return sub_1002BD000();
}

uint64_t sub_1002BD0D4(uint64_t a1)
{
  swift_weakDestroy();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = a1 + qword_100488860;
  uint64_t v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);

  return swift_unknownObjectRelease();
}

id sub_1002BD1AC(void *a1, uint64_t a2)
{
  return sub_1002BD1C4(a1, a2, (void (*)(void))sub_1002BD234);
}

id sub_1002BD1C4(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4 = a1;
  a3();

  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();

  return v5;
}

uint64_t sub_1002BD234()
{
  swift_getObjectType();

  return _typeName(_:qualified:)();
}

uint64_t sub_1002BD264(void *a1, uint64_t (*a2)(void), uint64_t a3)
{
  id v4 = v3;
  uint64_t v139 = a3;
  v140 = a2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v136 = swift_isaMask & *v3;
  sub_100010BCC((uint64_t *)&unk_100485640);
  __chkstk_darwin();
  v138 = (unsigned __int8 *)v121 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100010BCC(&qword_1004855F0);
  uint64_t v137 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)v121 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v134 = (uint64_t)v121 - v11;
  __chkstk_darwin();
  v135 = (unsigned __int8 *)v121 - v12;
  __chkstk_darwin();
  v133 = (char *)v121 - v13;
  __chkstk_darwin();
  uint64_t v15 = (char *)v121 - v14;
  uint64_t v16 = type metadata accessor for DispatchPredicate();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin();
  uint64_t v19 = (void *)((char *)v121 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = OS_dispatch_queue.awdl.unsafeMutableAddressor();
  uint64_t v21 = (void *)*v20;
  *uint64_t v19 = *v20;
  (*(void (**)(uint64_t *, void, uint64_t))(v17 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v16);
  id v22 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v17 + 8))(v19, v16);
  if (v21)
  {
    uint64_t WitnessTable = swift_getWitnessTable();
    BonjourOffload.record(from:)(a1, (uint64_t *)&v149);
    if (!v151)
    {
      sub_1000380B4((uint64_t)&v149, &qword_1004813C8);
      return v140(0);
    }
    v132 = v10;
    sub_10006EF50(&v149, (uint64_t)v146);
    uint64_t v25 = v147;
    uint64_t v26 = v148;
    sub_1000369C4(v146, v147);
    uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 40))(v25, v26);
    if (v28)
    {
      uint64_t v30 = v27;
      uint64_t v31 = v28;
      int v32 = v29;
      uint64_t v33 = v8;
      unint64_t v34 = v15;
      uint64_t v35 = *DNSRecords.Identifier.deniedList.unsafeMutableAddressor();
      swift_bridgeObjectRetain();
      LODWORD(v131) = v32 & 0xFFFFFF01;
      LOBYTE(v32) = sub_100374DA4(v30, v31, v32 & 0xFF01, v35);
      swift_bridgeObjectRelease();
      if (v32)
      {
        swift_bridgeObjectRetain();
        uint64_t v36 = Logger.logObject.getter();
        os_log_type_t v37 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v36, v37))
        {
          objc_super v38 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long v149 = swift_slowAlloc();
          *(_DWORD *)objc_super v38 = 136315138;
          swift_bridgeObjectRetain();
          DNSRecords.Identifier.description.getter(v30, v31, v131);
          uint64_t v39 = v30;
          unint64_t v41 = v40;
          swift_bridgeObjectRelease();
          uint64_t v142 = sub_100010680(v39, v41, (uint64_t *)&v149);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v36, v37, "Denied service: %s, not starting discovery over AWDL", v38, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

        goto LABEL_20;
      }
      swift_bridgeObjectRelease();
      uint64_t v15 = v34;
      uint64_t v8 = v33;
    }
    id v42 = [a1 serviceValue];
    if (v42)
    {
      v43 = v42;
      uint64_t v44 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v46 = v45;

      sub_10000C970(v44, v46);
      if ([a1 isResolve]) {
        BonjourOffload.startResolving(record:)((uint64_t)v146, ObjectType, WitnessTable);
      }
      else {
        BonjourOffload.startAdvertising(record:)((unint64_t)v146, ObjectType, WitnessTable);
      }
    }
    else
    {
      BonjourOffload.startBrowsing(record:)((void (*)(uint64_t *, uint64_t))v146, ObjectType, WitnessTable);
      sub_100035FD4((uint64_t)v146, (uint64_t)&v149);
      sub_100010BCC(&qword_10047CC08);
      if (swift_dynamicCast())
      {
        unint64_t v131 = v144;
        if (v142 != 27) {
          goto LABEL_16;
        }
        uint64_t v47 = v143;
        int v130 = v145;
        uint64_t v48 = sub_1002BCC18((uint64_t)&qword_100488848, sub_100375308);
        uint64_t v129 = v47;
        if (!v48) {
          goto LABEL_22;
        }
        uint64_t v49 = (uint64_t *)(v48 + qword_100488930);
        swift_beginAccess();
        uint64_t v50 = *v49;
        swift_bridgeObjectRetain();
        swift_release();
        *(void *)&long long v149 = v50;
        __chkstk_darwin();
        uint64_t v51 = *(void *)(v136 + 112);
        v121[-6] = *(void *)(v136 + 104);
        v121[-5] = v51;
        LOBYTE(v121[-4]) = 27;
        unint64_t v52 = v131;
        v121[-3] = v47;
        v121[-2] = v52;
        LOBYTE(v121[-1]) = v130;
        type metadata accessor for AWDLDiscoveryEngine.DatapathInitiator();
        sub_100017210();
        type metadata accessor for Dictionary();
        swift_getWitnessTable();
        char v53 = Sequence.contains(where:)();
        swift_bridgeObjectRelease();
        if (v53)
        {
LABEL_16:
          swift_bridgeObjectRelease();
        }
        else
        {
LABEL_22:
          uint64_t Strong = swift_weakLoadStrong();
          if (Strong)
          {
            uint64_t v55 = (uint64_t *)(Strong + *(void *)(*(void *)Strong + 424));
            swift_beginAccess();
            uint64_t v56 = *v55;
            swift_bridgeObjectRetain();
            swift_release();
            uint64_t v57 = v131;
            swift_bridgeObjectRetain();
            v58 = v138;
            sub_1002BE168(v56, v129, v57, (uint64_t)v138);
            swift_bridgeObjectRelease();
            if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v137 + 48))(v58, 1, v8) != 1)
            {
              uint64_t v59 = *(int *)(v8 + 48);
              uint64_t v60 = (uint64_t)&v58[v59];
              uint64_t v137 = *v58;
              uint64_t v61 = v58[1];
              uint64_t v62 = v58[2];
              uint64_t v63 = v58[3];
              uint64_t v64 = v58[4];
              uint64_t v65 = v58[5];
              *uint64_t v15 = v137;
              v15[1] = v61;
              v15[2] = v62;
              v15[3] = v63;
              v15[4] = v64;
              void v15[5] = v65;
              uint64_t v66 = (uint64_t)&v15[v59];
              sub_1002C0DF4(v60, (uint64_t)&v15[v59]);
              uint64_t v124 = (uint64_t)v4 + OBJC_IVAR____TtC12wifip2pdCore12XPCResponder_logger;
              v67 = v133;
              uint64_t v68 = (uint64_t)&v133[*(int *)(v8 + 48)];
              unsigned char *v133 = v137;
              uint64_t v136 = v61;
              v67[1] = v61;
              uint64_t v128 = v62;
              v67[2] = v62;
              uint64_t v69 = v134;
              uint64_t v127 = v63;
              v67[3] = v63;
              uint64_t v126 = v64;
              v67[4] = v64;
              uint64_t v125 = v65;
              v67[5] = v65;
              v138 = (unsigned __int8 *)v66;
              sub_1002C0BFC(v66, v68);
              v70 = v135;
              sub_1002C0E58((uint64_t)v67, (uint64_t)v135);
              sub_1002C0C60((uint64_t)v67, v69);
              swift_bridgeObjectRetain_n();
              unint64_t v71 = Logger.logObject.getter();
              os_log_type_t v72 = static os_log_type_t.default.getter();
              int v73 = v72;
              if (os_log_type_enabled(v71, v72))
              {
                uint64_t v74 = swift_slowAlloc();
                int v123 = v73;
                uint64_t v75 = v74;
                uint64_t v124 = swift_slowAlloc();
                *(void *)&long long v149 = v124;
                *(_DWORD *)uint64_t v75 = 136315394;
                v121[1] = v75 + 4;
                uint64_t v76 = *(int *)(v8 + 48);
                uint64_t v77 = (uint64_t)&v132[v76];
                uint64_t v78 = (uint64_t)&v70[v76];
                uint64_t v79 = *v70;
                uint64_t v80 = v70[1];
                uint64_t v81 = v70[2];
                v133 = v15;
                uint64_t v82 = v70[3];
                uint64_t v122 = v8;
                uint64_t v83 = v70[4];
                uint64_t v84 = v70[5];
                unsigned char *v132 = v79;
                v132[1] = v80;
                v132[2] = v81;
                v132[3] = v82;
                v132[4] = v83;
                v132[5] = v84;
                sub_1002C0BFC(v78, v77);
                unint64_t v85 = WiFiAddress.ipv6LinkLocalAddress.getter(v79 | (v80 << 8) | (v81 << 16) | (v82 << 24) | (v83 << 32) | (v84 << 40));
                unint64_t v87 = v86;
                uint64_t v89 = v88;
                v91 = v90;
                sub_1002C0CC8(v77);
                uint64_t v92 = v85;
                v93 = v132;
                unint64_t v94 = v87;
                uint64_t v15 = v133;
                uint64_t v95 = IPv6Address.description.getter(v92, v94, v89, v91);
                unint64_t v97 = v96;
                swift_bridgeObjectRelease();
                uint64_t v141 = sub_100010680(v95, v97, (uint64_t *)&v149);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                unint64_t v98 = v131;
                swift_bridgeObjectRelease();
                sub_1000380B4(v134, &qword_1004855F0);
                sub_1000380B4((uint64_t)v135, &qword_1004855F0);
                *(_WORD *)(v75 + 12) = 2080;
                swift_bridgeObjectRetain();
                uint64_t v141 = sub_100010680(v129, v98, (uint64_t *)&v149);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                _os_log_impl((void *)&_mh_execute_header, v71, (os_log_type_t)v123, "Recovered by providing ad-hoc AAAA record to %s for %s", (uint8_t *)v75, 0x16u);
                swift_arrayDestroy();
                swift_slowDealloc();
                uint64_t v99 = v122;
                swift_slowDealloc();
              }
              else
              {

                uint64_t v99 = v8;
                sub_1000380B4(v69, &qword_1004855F0);
                sub_1000380B4((uint64_t)v70, &qword_1004855F0);
                swift_bridgeObjectRelease_n();
                v93 = v132;
              }
              uint64_t v100 = (uint64_t)&v93[*(int *)(v99 + 48)];
              uint64_t v101 = v137;
              unsigned char *v93 = v137;
              uint64_t v102 = v136;
              v93[1] = v136;
              uint64_t v103 = v128;
              v93[2] = v128;
              uint64_t v104 = v127;
              v93[3] = v127;
              uint64_t v105 = v126;
              v93[4] = v126;
              uint64_t v106 = v125;
              v93[5] = v125;
              sub_1002C0BFC((uint64_t)v138, v100);
              unint64_t v107 = WiFiAddress.ipv6LinkLocalAddress.getter(v101 | (v102 << 8) | (v103 << 16) | (v104 << 24) | (v105 << 32) | (v106 << 40));
              LOBYTE(v149) = 27;
              unint64_t v108 = v129;
              *((void *)&v149 + 1) = v129;
              unint64_t v150 = v131;
              LOBYTE(v151) = v130;
              unint64_t v152 = v107;
              uint64_t v153 = v109;
              uint64_t v154 = v110;
              uint64_t v155 = v111;
              sub_1002C0CC8(v100);
              v112 = *(void **)((char *)v4 + qword_100488850);
              if (v112)
              {
                swift_unknownObjectRetain();
                uint64_t v113 = DNSRecords.BrowseHost.keyData.getter(27, v108, v131, v130);
                unint64_t v115 = v114;
                v116.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
                sub_10000C970(v113, v115);
                uint64_t v117 = DNSRecords.AAAA.valueData.getter();
                unint64_t v119 = v118;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (v119 >> 60 == 15)
                {
                  Class isa = 0;
                }
                else
                {
                  Class isa = Data._bridgeToObjectiveC()().super.isa;
                  sub_10000C95C(v117, v119);
                }
                [v112 handleEventType:0 keyData:v116.super.isa valueData:isa];
                swift_unknownObjectRelease();
              }
              else
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              sub_1000380B4((uint64_t)v15, &qword_1004855F0);
              goto LABEL_20;
            }
          }
          else
          {
            v58 = v138;
            (*(void (**)(unsigned __int8 *, uint64_t, uint64_t, uint64_t))(v137 + 56))(v138, 1, 1, v8);
          }
          swift_bridgeObjectRelease();
          sub_1000380B4((uint64_t)v58, (uint64_t *)&unk_100485640);
        }
      }
    }
LABEL_20:
    sub_100010754((uint64_t)v146);
    return v140(0);
  }
  __break(1u);
  return result;
}

uint64_t sub_1002BE0C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 40) + qword_100488958;
  swift_beginAccess();
  uint64_t v7 = (void *)(v6 + *(int *)(type metadata accessor for DNSRecords.SRV() + 24));
  if (*v7 == a3 && v7[1] == a4) {
    char v9 = 1;
  }
  else {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  return v9 & 1;
}

uint64_t sub_1002BE168@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v40 = a4;
  uint64_t v44 = a3;
  uint64_t v42 = a2;
  uint64_t v47 = sub_100010BCC(&qword_1004855F0);
  uint64_t v39 = *(void *)(v47 - 8);
  __chkstk_darwin();
  unint64_t v45 = (_DWORD *)((char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  uint64_t v7 = (char *)&v38 - v6;
  __chkstk_darwin();
  char v9 = (char *)&v38 - v8;
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v41 = a1 + 64;
  uint64_t v11 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & v10;
  int64_t v43 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v46 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v15 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v16 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v17 = v16 | (v15 << 6);
      goto LABEL_22;
    }
    int64_t v18 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v18 >= v43) {
      goto LABEL_29;
    }
    unint64_t v19 = *(void *)(v41 + 8 * v18);
    ++v15;
    if (!v19)
    {
      int64_t v15 = v18 + 1;
      if (v18 + 1 >= v43) {
        goto LABEL_29;
      }
      unint64_t v19 = *(void *)(v41 + 8 * v15);
      if (!v19)
      {
        int64_t v15 = v18 + 2;
        if (v18 + 2 >= v43) {
          goto LABEL_29;
        }
        unint64_t v19 = *(void *)(v41 + 8 * v15);
        if (!v19)
        {
          int64_t v15 = v18 + 3;
          if (v18 + 3 >= v43) {
            goto LABEL_29;
          }
          unint64_t v19 = *(void *)(v41 + 8 * v15);
          if (!v19)
          {
            int64_t v20 = v18 + 4;
            if (v20 >= v43)
            {
LABEL_29:
              swift_release();
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 56))(v40, 1, 1, v47);
              return swift_bridgeObjectRelease();
            }
            unint64_t v19 = *(void *)(v41 + 8 * v20);
            int64_t v15 = v20;
            if (!v19) {
              break;
            }
          }
        }
      }
    }
LABEL_21:
    unint64_t v13 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v15 << 6);
LABEL_22:
    uint64_t v21 = *(void *)(v46 + 56);
    uint64_t v22 = *(void *)(v46 + 48) + 6 * v17;
    __int16 v23 = *(_WORD *)(v22 + 4);
    uint64_t v24 = (int *)(type metadata accessor for AWDLPeer(0) - 8);
    uint64_t v25 = v21 + *(void *)(*(void *)v24 + 72) * v17;
    uint64_t v26 = v47;
    int v27 = *(_DWORD *)v22;
    sub_1002C0BFC(v25, (uint64_t)&v9[*(int *)(v47 + 48)]);
    *(_DWORD *)char v9 = v27;
    *((_WORD *)v9 + 2) = v23;
    sub_1002C0C60((uint64_t)v9, (uint64_t)v7);
    uint64_t v28 = *(int *)(v26 + 48);
    int v29 = v45;
    uint64_t v30 = (uint64_t)v45 + v28;
    uint64_t v31 = (uint64_t)&v7[v28];
    LOWORD(v28) = *((_WORD *)v7 + 2);
    *unint64_t v45 = *(_DWORD *)v7;
    *((_WORD *)v29 + 2) = v28;
    sub_1002C0BFC(v31, v30);
    uint64_t v32 = v30 + v24[15];
    uint64_t v34 = *(void *)(v32 + 8);
    uint64_t v33 = *(void *)(v32 + 16);
    swift_bridgeObjectRetain();
    sub_1002C0CC8(v30);
    if (v33)
    {
      if (v34 == v42 && v33 == v44)
      {
        swift_release();
        swift_bridgeObjectRelease();
LABEL_31:
        uint64_t v37 = v40;
        sub_1002C0C60((uint64_t)v7, v40);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v37, 0, 1, v47);
        return swift_bridgeObjectRelease();
      }
      char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v36)
      {
        swift_release();
        goto LABEL_31;
      }
    }
    uint64_t result = sub_1000380B4((uint64_t)v7, &qword_1004855F0);
  }
  while (1)
  {
    int64_t v15 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v15 >= v43) {
      goto LABEL_29;
    }
    unint64_t v19 = *(void *)(v41 + 8 * v15);
    ++v20;
    if (v19) {
      goto LABEL_21;
    }
  }
LABEL_34:
  __break(1u);
  return result;
}

void sub_1002BE538(void *a1, int a2, void *a3, void *a4)
{
}

uint64_t sub_1002BE564(void *a1, uint64_t (*a2)(void))
{
  unint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (uint64_t *)((char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  char v9 = OS_dispatch_queue.awdl.unsafeMutableAddressor();
  uint64_t v10 = (void *)*v9;
  *uint64_t v8 = *v9;
  (*(void (**)(uint64_t *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v6 + 8))(v8, v5);
  if (v10)
  {
    uint64_t WitnessTable = (char *)swift_getWitnessTable();
    BonjourOffload.record(from:)(a1, (uint64_t *)&v28);
    if (v29)
    {
      sub_10006EF50(&v28, (uint64_t)v30);
      uint64_t v14 = v31;
      uint64_t v15 = v32;
      sub_1000369C4(v30, v31);
      uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 40))(v14, v15);
      if (!v17) {
        goto LABEL_5;
      }
      uint64_t v19 = v16;
      uint64_t v20 = v17;
      __int16 v21 = v18;
      uint64_t v22 = *DNSRecords.Identifier.deniedList.unsafeMutableAddressor();
      swift_bridgeObjectRetain();
      LOBYTE(v19) = sub_100374DA4(v19, v20, v21 & 0xFF01, v22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v19 & 1) == 0)
      {
LABEL_5:
        id v23 = [a1 serviceValue];
        if (v23)
        {
          uint64_t v24 = v23;
          uint64_t v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v27 = v26;

          sub_10000C970(v25, v27);
          if ([a1 isResolve]) {
            BonjourOffload.stopResolving(record:)((uint64_t)v30, ObjectType, WitnessTable);
          }
          else {
            BonjourOffload.stopAdvertising(record:)((uint64_t (*)(void, void, void))v30, ObjectType, (unint64_t)WitnessTable);
          }
        }
        else
        {
          BonjourOffload.stopBrowsing(record:)((void (*)(void, void))v30, ObjectType, (unint64_t)WitnessTable);
        }
      }
      sub_100010754((uint64_t)v30);
    }
    else
    {
      sub_1000380B4((uint64_t)&v28, &qword_1004813C8);
    }
    return a2(0);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1002BE82C(void *a1, int a2, void *a3, void *a4)
{
}

void sub_1002BE858(void *a1, int a2, void *a3, void *aBlock, uint64_t a5, void (*a6)(id, uint64_t, void *))
{
  uint64_t v10 = _Block_copy(aBlock);
  v13[2] = v10;
  id v11 = a3;
  id v12 = a1;
  a6(v11, a5, v13);
  _Block_release(v10);
}

uint64_t type metadata accessor for AWDLBonjourOffload()
{
  return sub_100038354();
}

uint64_t sub_1002BE8FC()
{
  uint64_t v75 = type metadata accessor for UUID();
  uint64_t v0 = *(void *)(v75 - 8);
  __chkstk_darwin();
  uint64_t v74 = (char *)&v71 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = sub_100010BCC(&qword_1004855F0);
  __chkstk_darwin();
  uint64_t v83 = (char *)&v71 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v82 = (char *)&v71 - v3;
  __chkstk_darwin();
  v91 = (char *)&v71 - v4;
  __chkstk_darwin();
  uint64_t v81 = (char *)&v71 - v5;
  __chkstk_darwin();
  uint64_t v80 = (char *)&v71 - v6;
  uint64_t Strong = swift_weakLoadStrong();
  uint64_t v8 = _swiftEmptyArrayStorage;
  if (!Strong)
  {
LABEL_33:
    if (v8[2])
    {
      sub_100010BCC((uint64_t *)&unk_10047CFA0);
      uint64_t v68 = (void *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      uint64_t v68 = _swiftEmptyDictionarySingleton;
    }
    v93 = v68;
    uint64_t v69 = swift_bridgeObjectRetain();
    sub_1002BFE8C(v69, 1, &v93);
    swift_bridgeObjectRelease();
    return (uint64_t)v93;
  }
  char v9 = (uint64_t *)(Strong + *(void *)(*(void *)Strong + 424));
  swift_beginAccess();
  uint64_t v10 = *v9;
  swift_bridgeObjectRetain();
  swift_release();
  int64_t v11 = *(void *)(v10 + 16);
  if (!v11)
  {
LABEL_32:
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }
  v93 = _swiftEmptyArrayStorage;
  sub_1002BF384(0, v11, 0);
  unint64_t v12 = sub_100374AE8(v10);
  if ((v12 & 0x8000000000000000) == 0 && (uint64_t)v12 < 1 << *(unsigned char *)(v10 + 32))
  {
    uint64_t v14 = 0;
    uint64_t v15 = v10 + 64;
    int v73 = (void (**)(char *, uint64_t))(v0 + 8);
    uint64_t v72 = v10 + 88;
    uint64_t v79 = v10;
    int64_t v76 = v11;
    uint64_t v77 = v13;
    uint64_t v78 = v10 + 64;
    do
    {
      if ((*(void *)(v15 + 8 * (v12 >> 6)) & (1 << v12)) == 0) {
        goto LABEL_38;
      }
      if (*(_DWORD *)(v10 + 36) != v13) {
        goto LABEL_39;
      }
      uint64_t v85 = 1 << v12;
      unint64_t v86 = v12 >> 6;
      uint64_t v84 = v14;
      uint64_t v16 = v80;
      uint64_t v17 = (uint64_t)&v80[*(int *)(v92 + 48)];
      uint64_t v18 = *(void *)(v10 + 48);
      uint64_t v19 = *(void *)(v10 + 56);
      uint64_t v20 = (char *)(v18 + 6 * v12);
      unint64_t v21 = v12;
      char v22 = *v20;
      char v23 = v20[1];
      char v24 = v20[2];
      char v25 = v20[3];
      char v26 = v20[4];
      char v27 = v20[5];
      uint64_t v28 = type metadata accessor for AWDLPeer(0);
      uint64_t v29 = *(void *)(v28 - 8);
      uint64_t v87 = v28 - 8;
      uint64_t v30 = *(void *)(v29 + 72);
      uint64_t v90 = v21;
      sub_1002C0BFC(v19 + v30 * v21, v17);
      *uint64_t v16 = v22;
      v16[1] = v23;
      v16[2] = v24;
      v16[3] = v25;
      v16[4] = v26;
      v16[5] = v27;
      uint64_t v31 = v81;
      *uint64_t v81 = v22;
      v31[1] = v23;
      v31[2] = v24;
      v31[3] = v25;
      v31[4] = v26;
      uint64_t v32 = v92;
      uint64_t v33 = (uint64_t)&v31[*(int *)(v92 + 48)];
      v31[5] = v27;
      sub_1002C0BFC(v17, v33);
      uint64_t v34 = (uint64_t)v31;
      uint64_t v35 = v91;
      sub_1002C0C60(v34, (uint64_t)v91);
      sub_1000380B4((uint64_t)v16, &qword_1004855F0);
      uint64_t v36 = *(int *)(v32 + 48);
      uint64_t v37 = v82;
      uint64_t v38 = (uint64_t)&v82[v36];
      uint64_t v39 = (uint64_t)&v35[v36];
      char v40 = *v35;
      char v41 = v35[1];
      char v42 = v35[2];
      char v43 = v35[3];
      char v44 = v35[4];
      int v45 = v35[5];
      *uint64_t v82 = *v35;
      v37[1] = v41;
      v37[2] = v42;
      v37[3] = v43;
      v37[4] = v44;
      v37[5] = v45;
      uint64_t v88 = &v37[v36];
      sub_1002C0BFC((uint64_t)&v35[v36], v38);
      uint64_t v46 = *(int *)(v32 + 48);
      uint64_t v47 = v83;
      uint64_t v48 = (uint64_t)&v83[v46];
      *uint64_t v83 = v40;
      v47[1] = v41;
      v47[2] = v42;
      v47[3] = v43;
      v47[4] = v44;
      int v89 = v45;
      v47[5] = v45;
      sub_1002C0BFC(v39, (uint64_t)&v47[v46]);
      uint64_t v49 = v48 + *(int *)(v87 + 60);
      uint64_t v50 = *(void *)(v49 + 8);
      uint64_t v51 = *(void *)(v49 + 16);
      swift_bridgeObjectRetain();
      sub_1002C0CC8(v48);
      if (!v51)
      {
        unint64_t v52 = v74;
        UUID.init()();
        uint64_t v53 = UUID.uuidString.getter();
        uint64_t v51 = v54;
        uint64_t v55 = v52;
        uint64_t v50 = v53;
        (*v73)(v55, v75);
      }
      sub_1002C0CC8((uint64_t)v88);
      sub_1000380B4((uint64_t)v91, &qword_1004855F0);
      uint64_t v8 = v93;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1002BF384(0, v8[2] + 1, 1);
        uint64_t v8 = v93;
      }
      unint64_t v57 = v8[2];
      unint64_t v56 = v8[3];
      if (v57 >= v56 >> 1)
      {
        sub_1002BF384(v56 > 1, v57 + 1, 1);
        uint64_t v8 = v93;
      }
      v8[2] = v57 + 1;
      v58 = &v8[3 * v57];
      *((unsigned char *)v58 + 32) = v40;
      *((unsigned char *)v58 + 33) = v41;
      *((unsigned char *)v58 + 34) = v42;
      *((unsigned char *)v58 + 35) = v43;
      *((unsigned char *)v58 + 36) = v44;
      *((unsigned char *)v58 + 37) = v89;
      v58[5] = v50;
      v58[6] = v51;
      uint64_t v10 = v79;
      uint64_t v59 = 1 << *(unsigned char *)(v79 + 32);
      if (v90 >= v59) {
        goto LABEL_40;
      }
      uint64_t v15 = v78;
      unint64_t v60 = v86;
      uint64_t v61 = *(void *)(v78 + 8 * v86);
      if ((v61 & v85) == 0) {
        goto LABEL_41;
      }
      LODWORD(v13) = v77;
      if (*(_DWORD *)(v79 + 36) != v77) {
        goto LABEL_42;
      }
      unint64_t v62 = v61 & (-2 << (v90 & 0x3F));
      if (v62)
      {
        unint64_t v12 = __clz(__rbit64(v62)) | v90 & 0xFFFFFFFFFFFFFFC0;
        int64_t v63 = v76;
        uint64_t v64 = v84;
      }
      else
      {
        unint64_t v65 = v86 + 1;
        unint64_t v66 = (unint64_t)(v59 + 63) >> 6;
        int64_t v63 = v76;
        uint64_t v64 = v84;
        if (v86 + 1 >= v66) {
          goto LABEL_27;
        }
        unint64_t v67 = *(void *)(v78 + 8 * v65);
        if (!v67)
        {
          unint64_t v65 = v86 + 2;
          if (v86 + 2 >= v66) {
            goto LABEL_27;
          }
          unint64_t v67 = *(void *)(v78 + 8 * v65);
          if (!v67)
          {
            while (v66 - 3 != v60)
            {
              unint64_t v67 = *(void *)(v72 + 8 * v60++);
              if (v67)
              {
                unint64_t v65 = v60 + 2;
                goto LABEL_21;
              }
            }
LABEL_27:
            unint64_t v12 = 1 << *(unsigned char *)(v79 + 32);
            goto LABEL_28;
          }
        }
LABEL_21:
        unint64_t v12 = __clz(__rbit64(v67)) + (v65 << 6);
      }
LABEL_28:
      uint64_t v14 = v64 + 1;
      if (v14 == v63) {
        goto LABEL_32;
      }
    }
    while ((v12 & 0x8000000000000000) == 0 && (uint64_t)v12 < v59);
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_1002BEFAC()
{
  sub_1002C0D24();

  return swift_unknownObjectRetain();
}

uint64_t sub_1002BEFD4()
{
  return sub_1002BCB3C(&qword_100488858);
}

uint64_t sub_1002BEFF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1002BF000(a1, a2, a3, a4, a5, a6, &qword_100488858);
}

uint64_t sub_1002BF000(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  sub_1002C0D34(a1, a2, a3, a4, a7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1002BF070(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_1002BCBBC();
  return sub_1002BCAB8;
}

void sub_1002BF0C8(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t sub_1002BF110@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1002BCC18((uint64_t)&qword_100488848, sub_100375308);
  *a1 = result;
  return result;
}

uint64_t sub_1002BF1EC()
{
  return swift_unknownObjectRelease();
}

id sub_1002BF1FC()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return [super dealloc];
}

uint64_t sub_1002BF244()
{
  return type metadata accessor for EmptyBonjourOffload();
}

uint64_t type metadata accessor for EmptyBonjourOffload()
{
  uint64_t result = qword_100485540;
  if (!qword_100485540) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1002BF298()
{
  return swift_updateClassMetadata2();
}

_UNKNOWN **sub_1002BF2DC()
{
  return &off_100486AB8;
}

_UNKNOWN **sub_1002BF2E8()
{
  return &off_100486198;
}

uint64_t sub_1002BF2F4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100084BF8(a1, a2, a3, *v3, &qword_100487080);
  void *v3 = (char *)result;
  return result;
}

uint64_t sub_1002BF31C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002BF410(a1, a2, a3, *v3);
  void *v3 = (char *)result;
  return result;
}

uint64_t sub_1002BF33C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002BF59C(a1, a2, a3, *v3);
  void *v3 = (char *)result;
  return result;
}

uint64_t sub_1002BF35C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100084BF8(a1, a2, a3, *v3, &qword_100485618);
  void *v3 = (char *)result;
  return result;
}

uint64_t sub_1002BF384(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002BF708(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1002BF3A4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002BF8B0(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1002BF3C4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002BFA3C(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1002BF3E4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002BFBC4(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1002BF404(char a1, int64_t a2, char a3, char *a4)
{
  return sub_100084BF8(a1, a2, a3, a4, &qword_100487080);
}

uint64_t sub_1002BF410(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100010BCC(&qword_100485608);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8]) {
      memmove(v12, v13, 56 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[56 * v8] || v12 >= &v13[56 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002BF59C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100010BCC(&qword_100485610);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002BF708(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100010BCC(&qword_1004855F8);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    void v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    sub_100010BCC(&qword_100485600);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002BF8B0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100010BCC((uint64_t *)&unk_100485630);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8]) {
      memmove(v12, v13, 56 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[56 * v8] || v12 >= &v13[56 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002BFA3C(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100010BCC(&qword_100485670);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    v10[2] = v8;
    void v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    type metadata accessor for AWDLTrafficRegistrationService(0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002BFBC4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100010BCC(&qword_10047E958);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 6);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[6 * v8]) {
      memmove(v12, v13, 6 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[6 * v8] || v12 >= &v13[6 * v8])
  {
    memcpy(v12, v13, 6 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002BFD3C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100010BCC(&qword_100485628);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002BFE8C(uint64_t a1, char a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v37 = v4;
  if (!v4) {
    return swift_bridgeObjectRelease_n();
  }
  unint64_t v5 = 0;
  for (i = (unsigned __int8 *)(a1 + 32); ; i += 24)
  {
    if (v5 >= *(void *)(a1 + 16))
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_24;
    }
    uint64_t v7 = *i;
    uint64_t v8 = i[1];
    uint64_t v9 = i[2];
    uint64_t v10 = i[3];
    uint64_t v11 = i[4];
    uint64_t v12 = i[5];
    uint64_t v13 = *((void *)i + 1);
    uint64_t v14 = swift_bridgeObjectRetain();
    if (!v14) {
      return swift_bridgeObjectRelease_n();
    }
    uint64_t v15 = v10;
    char v16 = a2;
    uint64_t v41 = v13;
    uint64_t v42 = v14;
    unint64_t v17 = (v12 << 40) | (v11 << 32) | v7 | (v8 << 8) | (v9 << 16) | (v15 << 24);
    char v40 = v7;
    char v18 = v15;
    unint64_t v39 = v5;
    uint64_t v19 = (void *)*a3;
    unint64_t v21 = sub_100031214(v17);
    uint64_t v22 = v19[2];
    BOOL v23 = (v20 & 1) == 0;
    uint64_t v24 = v22 + v23;
    if (__OFADD__(v22, v23)) {
      goto LABEL_21;
    }
    char v25 = v20;
    if (v19[3] < v24) {
      break;
    }
    if (v16)
    {
      if (v20) {
        goto LABEL_16;
      }
    }
    else
    {
      sub_1003A3708();
      if (v25) {
        goto LABEL_16;
      }
    }
LABEL_12:
    uint64_t v28 = (void *)*a3;
    *(void *)(*a3 + 8 * (v21 >> 6) + 64) |= 1 << v21;
    uint64_t v29 = (unsigned char *)(v28[6] + 6 * v21);
    *uint64_t v29 = v40;
    v29[1] = v8;
    v29[2] = v9;
    v29[3] = v18;
    v29[4] = BYTE4(v17);
    v29[5] = BYTE5(v17);
    uint64_t v30 = (void *)(v28[7] + 16 * v21);
    *uint64_t v30 = v41;
    v30[1] = v42;
    uint64_t v31 = v28[2];
    BOOL v32 = __OFADD__(v31, 1);
    uint64_t v33 = v31 + 1;
    if (v32) {
      goto LABEL_22;
    }
    unint64_t v5 = v39 + 1;
    v28[2] = v33;
    a2 = 1;
    if (v37 == v39 + 1) {
      return swift_bridgeObjectRelease_n();
    }
  }
  sub_10029297C(v24, v16 & 1);
  unint64_t v26 = sub_100031214(v17);
  if ((v25 & 1) != (v27 & 1)) {
    goto LABEL_23;
  }
  unint64_t v21 = v26;
  if ((v25 & 1) == 0) {
    goto LABEL_12;
  }
LABEL_16:
  swift_allocError();
  swift_willThrow();
  swift_errorRetain();
  sub_100010BCC((uint64_t *)&unk_1004843F0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    return swift_errorRelease();
  }
LABEL_24:
  _StringGuts.grow(_:)(30);
  v35._object = (void *)0x80000001003DE290;
  v35._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v35);
  _print_unlocked<A, B>(_:_:)();
  v36._countAndFlagsBits = 39;
  v36._object = (void *)0xE100000000000000;
  String.append(_:)(v36);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1002C01EC(uint64_t a1, char *a2)
{
  type metadata accessor for Logger();
  __chkstk_darwin();
  unint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_weakInit();
  uint64_t v6 = qword_100488838;
  *(void *)&v2[qword_100488838] = 0;
  uint64_t v7 = (uint64_t *)&v2[qword_100488840];
  uint64_t v8 = v2;
  *uint64_t v7 = OffloadedServices.init()();
  v7[1] = v9;
  v7[2] = v10;
  v7[3] = v11;
  if (((unint64_t)"re19EmptyBonjourOffload" & 0x1000000000000000) != 0)
  {
    sub_100010BCC((uint64_t *)&unk_100487D10);
    _StringGuts._slowWithCString<A>(_:)();
    uint64_t v12 = v22;
  }
  else
  {
    __chkstk_darwin();
    *(&v21 - 2) = (uint64_t)sub_1002C0FA0;
    *(&v21 - 1) = 0;
    if (((unint64_t)"re19EmptyBonjourOffload" & 0x2000000000000000) != 0)
    {
      unint64_t v22 = 0xD00000000000001ELL;
      unint64_t v23 = (unint64_t)"re19EmptyBonjourOffload" & 0xFFFFFFFFFFFFFFLL;
      uint64_t v12 = os_transaction_create();
    }
    else
    {
      uint64_t v12 = sub_100068878(((unint64_t)"re19EmptyBonjourOffload" & 0xFFFFFFFFFFFFFFFLL) + 32, 30, (uint64_t (*)(void))sub_1002C0EEC);
    }
  }
  *(void *)&v8[qword_100485400] = v12;
  swift_weakAssign();
  id v13 = [self interfaceWithProtocol:&OBJC_PROTOCOL___WiFiP2PDNSServiceDiscoveryXPCDelegate];
  uint64_t v14 = *(void **)&a2[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection];
  [v14 setRemoteObjectInterface:v13];

  id v15 = [v14 remoteObjectProxy];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_100010BCC((uint64_t *)&unk_100485660);
  int v16 = swift_dynamicCast();
  uint64_t v17 = v21;
  if (!v16) {
    uint64_t v17 = 0;
  }
  *(void *)&v2[v6] = v17;

  swift_unknownObjectRelease();
  Logger.init(subsystem:category:)();
  char v18 = &OBJC_PROTOCOL___WiFiP2PDNSServiceDiscoveryXPC;
  uint64_t v19 = sub_1002BBB14(a2, (uint64_t)v5, (uint64_t)v18);

  return v19;
}

char *sub_1002C04F8(uint64_t a1, char *a2)
{
  id v5 = objc_allocWithZone(v2);
  return sub_1002C01EC(a1, a2);
}

char *sub_1002C053C(char *a1)
{
  type metadata accessor for Logger();
  __chkstk_darwin();
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (((unint64_t)"com.apple.wifip2pd.awdl_bonjour" & 0x1000000000000000) != 0)
  {
    uint64_t v12 = v1;
    sub_100010BCC((uint64_t *)&unk_100487D10);
    _StringGuts._slowWithCString<A>(_:)();
    uint64_t v6 = v14;
  }
  else
  {
    __chkstk_darwin();
    *(&v13 - 2) = (uint64_t)sub_1002C0FA0;
    *(&v13 - 1) = 0;
    if (((unint64_t)"com.apple.wifip2pd.awdl_bonjour" & 0x2000000000000000) != 0)
    {
      unint64_t v14 = 0xD00000000000001ALL;
      unint64_t v15 = (unint64_t)"com.apple.wifip2pd.awdl_bonjour" & 0xFFFFFFFFFFFFFFLL;
      uint64_t v7 = v1;
      uint64_t v6 = os_transaction_create();
    }
    else
    {
      id v5 = v1;
      uint64_t v6 = sub_100068878(((unint64_t)"com.apple.wifip2pd.awdl_bonjour" & 0xFFFFFFFFFFFFFFFLL) + 32, 26, (uint64_t (*)(void))sub_1002C0F88);
    }
  }
  *(void *)&v1[OBJC_IVAR____TtC12wifip2pdCore19EmptyBonjourOffload_transaction] = v6;

  id v8 = [self interfaceWithProtocol:&OBJC_PROTOCOL___WiFiP2PDNSServiceDiscoveryXPCDelegate];
  [*(id *)&a1[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection] setRemoteObjectInterface:v8];

  Logger.init(subsystem:category:)();
  uint64_t v9 = &OBJC_PROTOCOL___WiFiP2PDNSServiceDiscoveryXPC;
  uint64_t v10 = sub_1002BBB14(a1, (uint64_t)v4, (uint64_t)v9);

  return v10;
}

char *sub_1002C0764(uint64_t a1, char *a2)
{
  type metadata accessor for Logger();
  __chkstk_darwin();
  id v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v28 = (uint64_t)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_weakInit();
  uint64_t v9 = qword_100488850;
  *(void *)&v2[qword_100488850] = 0;
  uint64_t v10 = (uint64_t *)&v2[qword_100488858];
  uint64_t v11 = v2;
  *uint64_t v10 = OffloadedServices.init()();
  v10[1] = v12;
  v10[2] = v13;
  void v10[3] = v14;
  if (((unint64_t)"com.apple.wifip2pd.nan_bonjour" & 0x1000000000000000) != 0)
  {
    sub_100010BCC((uint64_t *)&unk_100487D10);
    _StringGuts._slowWithCString<A>(_:)();
    uint64_t v15 = v30;
  }
  else
  {
    uint64_t v27 = v9;
    __chkstk_darwin();
    *(&v27 - 2) = (uint64_t)sub_1002BCC6C;
    *(&v27 - 1) = 0;
    if (((unint64_t)"com.apple.wifip2pd.nan_bonjour" & 0x2000000000000000) != 0)
    {
      unint64_t v30 = 0xD00000000000001FLL;
      unint64_t v31 = (unint64_t)"com.apple.wifip2pd.nan_bonjour" & 0xFFFFFFFFFFFFFFLL;
      uint64_t v15 = os_transaction_create();
    }
    else
    {
      uint64_t v15 = sub_100068878(((unint64_t)"com.apple.wifip2pd.nan_bonjour" & 0xFFFFFFFFFFFFFFFLL) + 32, 31, (uint64_t (*)(void))sub_1002C0F88);
    }
    uint64_t v9 = v27;
  }
  *(void *)&v11[qword_100485488] = v15;
  swift_weakAssign();
  id v16 = [self interfaceWithProtocol:&OBJC_PROTOCOL___WiFiP2PDNSServiceDiscoveryXPCDelegate];
  uint64_t v17 = *(void **)&a2[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection];
  [v17 setRemoteObjectInterface:v16];

  id v18 = [v17 remoteObjectProxy];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_100010BCC((uint64_t *)&unk_100485660);
  int v19 = swift_dynamicCast();
  uint64_t v20 = v29;
  if (!v19) {
    uint64_t v20 = 0;
  }
  *(void *)&v2[v9] = v20;
  swift_unknownObjectRelease();
  uint64_t v21 = *(void *)&v2[v9];
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v21;
  swift_unknownObjectRetain_n();
  uint64_t v23 = v28;
  sub_1003753C8((uint64_t)sub_1002C0F40, v22, v28);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(&v11[qword_100488860], v23, v6);

  Logger.init(subsystem:category:)();
  uint64_t v24 = &OBJC_PROTOCOL___WiFiP2PDNSServiceDiscoveryXPC;
  char v25 = sub_1002BBB14(a2, (uint64_t)v5, (uint64_t)v24);

  return v25;
}

char *sub_1002C0BA8(uint64_t a1, char *a2)
{
  id v5 = objc_allocWithZone(v2);
  return sub_1002C0764(a1, a2);
}

uint64_t sub_1002C0BEC()
{
  return *(void *)(v0 + qword_100488838);
}

uint64_t sub_1002C0BFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AWDLPeer(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002C0C60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010BCC(&qword_1004855F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002C0CC8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AWDLPeer(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1002C0D24()
{
  return *(void *)(v0 + qword_100488850);
}

uint64_t sub_1002C0D34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10 = (void *)(v5 + *a5);
  swift_beginAccess();
  *uint64_t v10 = a1;
  v10[1] = a2;
  v10[2] = a3;
  void v10[3] = a4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002C0DF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AWDLPeer(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002C0E58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010BCC(&qword_1004855F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002C0EC0(uint64_t a1)
{
  return sub_1002BE0C8(a1, *(unsigned __int8 *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48)) & 1;
}

void *sub_1002C0EEC@<X0>(void *a1@<X8>)
{
  return sub_1003A963C(*(void *(**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

uint64_t sub_1002C0F08()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002C0F40(uint64_t a1)
{
  return sub_1002BCC9C(a1, *(void **)(v1 + 16));
}

uint64_t sub_1002C0F48()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 80, 7);
}

void *sub_1002C0F88@<X0>(void *a1@<X8>)
{
  return sub_1002C0EEC(a1);
}

uint64_t sub_1002C0FA0@<X0>(uint64_t *a1@<X8>)
{
  return sub_1002BCC6C(a1);
}

uint64_t sub_1002C0FBC(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = a2;
  uint64_t v3 = sub_100010BCC(&qword_100485888);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v26 - v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v27 = a1 + 64;
  uint64_t v10 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & v9;
  int64_t v28 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v30 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v14 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v16 = v15 | (v14 << 6);
      goto LABEL_5;
    }
    int64_t v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v23 >= v28) {
      return swift_release();
    }
    unint64_t v24 = *(void *)(v27 + 8 * v23);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v23 + 1;
      if (v23 + 1 >= v28) {
        return swift_release();
      }
      unint64_t v24 = *(void *)(v27 + 8 * v14);
      if (!v24)
      {
        int64_t v14 = v23 + 2;
        if (v23 + 2 >= v28) {
          return swift_release();
        }
        unint64_t v24 = *(void *)(v27 + 8 * v14);
        if (!v24)
        {
          int64_t v14 = v23 + 3;
          if (v23 + 3 >= v28) {
            return swift_release();
          }
          unint64_t v24 = *(void *)(v27 + 8 * v14);
          if (!v24) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_5:
    uint64_t v17 = v30;
    uint64_t v18 = *(void *)(v30 + 48);
    uint64_t v19 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v8, v18 + *(void *)(*(void *)(v19 - 8) + 72) * v16, v19);
    sub_100035FD4(*(void *)(v17 + 56) + 40 * v16, (uint64_t)&v8[*(int *)(v3 + 48)]);
    sub_10006EC68((uint64_t)v8, (uint64_t)v6, &qword_100485888);
    uint64_t v20 = &v6[*(int *)(v3 + 48)];
    uint64_t v22 = *((void *)v20 + 3);
    uint64_t v21 = *((void *)v20 + 4);
    sub_1000369C4(v20, v22);
    (*(void (**)(uint64_t, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v21 + 8))(v29, &type metadata for RadioResourceSchedule, &off_100485830, v22, v21);
    uint64_t result = sub_1000380B4((uint64_t)v6, &qword_100485888);
  }
  int64_t v25 = v23 + 4;
  if (v25 >= v28) {
    return swift_release();
  }
  unint64_t v24 = *(void *)(v27 + 8 * v25);
  if (v24)
  {
    int64_t v14 = v25;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v14 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v14 >= v28) {
      return swift_release();
    }
    unint64_t v24 = *(void *)(v27 + 8 * v14);
    ++v25;
    if (v24) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1002C1298(uint64_t a1, uint64_t (*a2)(uint64_t), void (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = swift_bridgeObjectRetain();
  uint64_t v7 = *(void *)a2(v6);
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    uint64_t v9 = (uint64_t *)(a1 + 64);
    do
    {
      uint64_t v10 = *(v9 - 2);
      uint64_t v11 = *(v9 - 1);
      uint64_t v12 = *v9;
      v9 += 5;
      a3(v10, v11, v12);
      --v8;
    }
    while (v8);
  }
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_1002C1340(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, char a5, unsigned __int8 a6)
{
  uint64_t v7 = v6;
  unsigned int v50 = a6;
  unint64_t v8 = a3 >> 8;
  unint64_t v9 = a3 >> 16;
  uint64_t v10 = (unsigned __int8 *)(a3 >> 24);
  unint64_t v11 = HIDWORD(a3);
  unint64_t v12 = a3 >> 40;
  uint64_t v13 = HIWORD(a3);
  unint64_t v14 = HIBYTE(a3);
  uint64_t v59 = a1;
  uint64_t v15 = *(void *)(*v7 + 16);
  uint64_t v42 = v7;
  if (v15)
  {
    uint64_t v45 = 0;
    unint64_t v46 = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    uint64_t v10 = (unsigned __int8 *)(swift_bridgeObjectRetain() + 71);
    uint64_t v55 = _swiftEmptyArrayStorage;
    __int16 v47 = 255;
    while (1)
    {
      unint64_t v16 = *(void *)(v10 - 39);
      LOWORD(v12) = *(v10 - 31);
      unsigned int v17 = *(v10 - 30);
      uint64_t v18 = *(void *)(v10 - 23);
      uint64_t v13 = *(void *)(v10 - 15);
      uint64_t v58 = *(v10 - 7);
      unint64_t v9 = *(v10 - 6);
      uint64_t v57 = *(v10 - 5);
      uint64_t v19 = *(v10 - 4);
      uint64_t v56 = *(v10 - 3);
      unint64_t v11 = *(v10 - 2);
      unint64_t v14 = *(v10 - 1);
      uint64_t v59 = *v10;
      if (v17 > v50) {
        break;
      }
      if (v17 == v50
        && (uint64_t v53 = *(v10 - 2),
            unint64_t v11 = *(v10 - 1),
            uint64_t v20 = *(void *)(v10 - 23),
            BOOL v21 = static RadioResources.SymbolicChannel.__derived_enum_equals(_:_:)(v16, v12, a4, a5),
            uint64_t v18 = v20,
            unint64_t v14 = v11,
            LOBYTE(v11) = v53,
            v21))
      {
        __int16 v47 = v12 | ((_WORD)v17 << 8);
        uint64_t v45 = v58 | (v9 << 8) | (v57 << 16) | (v19 << 24) | (v56 << 32) | (v53 << 40) | (v14 << 48) | (v59 << 56);
        unint64_t v46 = v16;
        uint64_t v43 = v13;
        uint64_t v44 = v18;
      }
      else
      {
        unint64_t v54 = v16;
        if (v17 >= v50)
        {
          uint64_t v51 = v18;
          uint64_t v52 = v13;
          uint64_t v60 = v18;
          LOBYTE(v62) = v58;
          BYTE1(v62) = v9;
          BYTE2(v62) = v57;
          BYTE3(v62) = v19;
          BYTE4(v62) = v56;
          BYTE5(v62) = v11;
          BYTE6(v62) = v14;
          HIBYTE(v62) = v59;
          TimeBitmap.SlotsView.formIntersection(_:)(a1, a2, a3);
          LOBYTE(v8) = v60;
          int64_t v23 = (uint64_t *)TimeBitmap.zero.unsafeMutableAddressor();
          if (!static TimeBitmap.SlotsView.== infix(_:_:)(v60, v13, v62, *v23, v23[1], v23[2]))
          {
            __break(1u);
            goto LABEL_35;
          }
          goto LABEL_13;
        }
        uint64_t v61 = v18;
        TimeBitmap.SlotsView.subtract(_:)(a1, a2, a3);
        uint64_t v22 = (uint64_t *)TimeBitmap.zero.unsafeMutableAddressor();
        uint64_t v51 = v61;
        uint64_t v52 = v13;
        if (!static TimeBitmap.SlotsView.== infix(_:_:)(v61, v13, v58 | ((unint64_t)v9 << 8) | ((unint64_t)v57 << 16) | ((unint64_t)v19 << 24) | ((unint64_t)v56 << 32) | ((unint64_t)v11 << 40) | ((unint64_t)v14 << 48) | ((unint64_t)v59 << 56), *v22, v22[1], v22[2]))goto LABEL_13; {
      }
        }
LABEL_4:
      v10 += 40;
      if (!--v15)
      {
        swift_bridgeObjectRelease_n();
        *uint64_t v42 = v55;
        uint64_t v15 = a2;
        uint64_t v59 = a1;
        if ((_BYTE)v47 == 0xFF)
        {
          LOBYTE(v8) = BYTE1(a3);
          LOBYTE(v9) = BYTE2(a3);
          LOBYTE(v10) = BYTE3(a3);
          LOBYTE(v11) = BYTE4(a3);
          LOBYTE(v12) = BYTE5(a3);
          LOBYTE(v13) = BYTE6(a3);
          unint64_t v14 = HIBYTE(a3);
          goto LABEL_21;
        }
        TimeBitmap.SlotsView.formUnion(_:)(a1, a2, a3);
        uint64_t v38 = (uint64_t *)TimeBitmap.zero.unsafeMutableAddressor();
        uint64_t result = static TimeBitmap.SlotsView.== infix(_:_:)(v44, v43, v45 | ((unint64_t)BYTE1(v45) << 8) | ((unint64_t)BYTE2(v45) << 16) | ((unint64_t)BYTE3(v45) << 24) | ((unint64_t)BYTE4(v45) << 32) | ((unint64_t)BYTE5(v45) << 40) | ((unint64_t)BYTE6(v45) << 48) | ((unint64_t)HIBYTE(v45) << 56), *v38, v38[1], v38[2]);
        if ((result & 1) == 0)
        {
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)sub_100330870(0, v55[2] + 1, 1, v55);
            uint64_t v55 = (void *)result;
          }
          unint64_t v40 = v55[2];
          unint64_t v39 = v55[3];
          if (v40 >= v39 >> 1)
          {
            uint64_t result = (uint64_t)sub_100330870((void *)(v39 > 1), v40 + 1, 1, v55);
            uint64_t v55 = (void *)result;
          }
          Swift::String v36 = v55;
          v55[2] = v40 + 1;
          uint64_t v41 = &v55[5 * v40];
          v41[4] = v46;
          *((_WORD *)v41 + 20) = v47;
          v41[6] = v44;
          v41[7] = v43;
          v41[8] = v45;
          goto LABEL_32;
        }
        return result;
      }
    }
    unint64_t v54 = *(void *)(v10 - 39);
    uint64_t v51 = *(void *)(v10 - 23);
    uint64_t v52 = *(void *)(v10 - 15);
    TimeBitmap.SlotsView.subtract(_:)(v18, v13, v58 | (v9 << 8) | (v57 << 16) | (v19 << 24) | (v56 << 32) | (v11 << 40) | (v14 << 48) | (v59 << 56));
LABEL_13:
    char v24 = v12;
    char v25 = v14;
    char v26 = v19;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v55 = sub_100330870(0, v55[2] + 1, 1, v55);
    }
    unint64_t v28 = v55[2];
    unint64_t v27 = v55[3];
    if (v28 >= v27 >> 1) {
      uint64_t v55 = sub_100330870((void *)(v27 > 1), v28 + 1, 1, v55);
    }
    v55[2] = v28 + 1;
    uint64_t v29 = &v55[5 * v28];
    v29[4] = v54;
    *((unsigned char *)v29 + 40) = v24;
    *((unsigned char *)v29 + 41) = v17;
    v29[6] = v51;
    v29[7] = v52;
    *((unsigned char *)v29 + 64) = v58;
    *((unsigned char *)v29 + 65) = v9;
    *((unsigned char *)v29 + 66) = v57;
    *((unsigned char *)v29 + 67) = v26;
    *((unsigned char *)v29 + 68) = v56;
    *((unsigned char *)v29 + 69) = v11;
    *((unsigned char *)v29 + 70) = v25;
    *((unsigned char *)v29 + 71) = v59;
    goto LABEL_4;
  }
  swift_bridgeObjectRelease();
  uint64_t v55 = _swiftEmptyArrayStorage;
  *uint64_t v7 = _swiftEmptyArrayStorage;
  uint64_t v15 = a2;
LABEL_21:
  LOBYTE(v17) = a3;
  unint64_t v31 = (uint64_t *)TimeBitmap.zero.unsafeMutableAddressor();
  uint64_t result = static TimeBitmap.SlotsView.== infix(_:_:)(v59, v15, a3 | (unint64_t)(unsigned __int16)(v8 << 8) | ((unint64_t)v9 << 16) & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)v10 << 24) | ((unint64_t)v11 << 32) | ((unint64_t)v12 << 40) | ((unint64_t)v13 << 48) | (v14 << 56), *v31, v31[1], v31[2]);
  if ((result & 1) == 0)
  {
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
LABEL_35:
      uint64_t result = (uint64_t)sub_100330870(0, v55[2] + 1, 1, v55);
      uint64_t v55 = (void *)result;
    }
    unint64_t v34 = v55[2];
    unint64_t v33 = v55[3];
    unint64_t v35 = v34 + 1;
    if (v34 >= v33 >> 1)
    {
      uint64_t result = (uint64_t)sub_100330870((void *)(v33 > 1), v34 + 1, 1, v55);
      unint64_t v35 = v34 + 1;
      uint64_t v55 = (void *)result;
    }
    Swift::String v36 = v55;
    v55[2] = v35;
    uint64_t v37 = &v55[5 * v34];
    v37[4] = a4;
    *((unsigned char *)v37 + 40) = a5;
    *((unsigned char *)v37 + 41) = v50;
    v37[6] = v59;
    v37[7] = v15;
    *((unsigned char *)v37 + 64) = v17;
    *((unsigned char *)v37 + 65) = v8;
    *((unsigned char *)v37 + 66) = v9;
    *((unsigned char *)v37 + 67) = (_BYTE)v10;
    *((unsigned char *)v37 + 68) = v11;
    *((unsigned char *)v37 + 69) = v12;
    *((unsigned char *)v37 + 70) = v13;
    *((unsigned char *)v37 + 71) = v14;
LABEL_32:
    *uint64_t v42 = v36;
  }
  return result;
}

uint64_t sub_1002C1AC4()
{
  return sub_1002C1298(*v0, (uint64_t (*)(uint64_t))TimeBitmap.zero.unsafeMutableAddressor, (void (*)(uint64_t, uint64_t, uint64_t))TimeBitmap.SlotsView.formUnion(_:));
}

uint64_t sub_1002C1B08()
{
  return sub_1002C1298(*v0, (uint64_t (*)(uint64_t))TimeBitmap.all.unsafeMutableAddressor, (void (*)(uint64_t, uint64_t, uint64_t))TimeBitmap.SlotsView.subtract(_:));
}

uint64_t sub_1002C1B4C(uint64_t a1, uint64_t a2, unint64_t a3, unsigned __int8 a4)
{
  return sub_1002C1340(a1, a2, a3, 3uLL, 2, a4);
}

uint64_t sub_1002C1B60()
{
  if ((*(unsigned char *)(v0 + 8) & 1) != 0
    && (long long v1 = *(_OWORD *)(v0 + 32),
        v9[0] = *(_OWORD *)(v0 + 16),
        v9[1] = v1,
        sub_10006EC68((uint64_t)v9 + 8, (uint64_t)v10, (uint64_t *)&unk_100487B90),
        sub_10006EC68((uint64_t)v10, (uint64_t)v11, (uint64_t *)&unk_100487B90),
        (unint64_t)v11[4] << 32 != 0x300000000))
  {
    uint64_t v2 = &off_100466F90;
  }
  else
  {
    uint64_t v2 = &off_100466FB8;
  }
  BOOL v3 = sub_100375864(1, (uint64_t)v2);
  swift_bridgeObjectRelease();
  if (!v3)
  {
    sub_100010BCC(&qword_100485880);
    goto LABEL_9;
  }
  char v4 = *(unsigned char *)(v0 + 9);
  sub_100010BCC(&qword_100485880);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_1003B2450;
    uint64_t v6 = (unsigned char *)(v5 + 32);
    uint64_t v7 = NANMapID.primary.unsafeMutableAddressor();
    goto LABEL_10;
  }
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1003B4420;
  *(unsigned char *)(v5 + 32) = *(unsigned char *)NANMapID.primary.unsafeMutableAddressor();
  uint64_t v6 = (unsigned char *)(v5 + 33);
  uint64_t v7 = NANMapID.secondary.unsafeMutableAddressor();
LABEL_10:
  *uint64_t v6 = *v7;
  return v5;
}

_UNKNOWN **sub_1002C1C8C(unint64_t a1)
{
  if ((*(unsigned char *)(v1 + 8) & 1) != 0
    && (long long v3 = *(_OWORD *)(v1 + 32),
        v12[0] = *(_OWORD *)(v1 + 16),
        v12[1] = v3,
        sub_10006EC68((uint64_t)v12 + 8, (uint64_t)v13, (uint64_t *)&unk_100487B90),
        sub_10006EC68((uint64_t)v13, (uint64_t)v14, (uint64_t *)&unk_100487B90),
        (unint64_t)v14[4] << 32 != 0x300000000))
  {
    uint64_t result = &off_100466F40;
    uint64_t v5 = 2;
  }
  else
  {
    uint64_t result = &off_100466F68;
    uint64_t v5 = 1;
  }
  unsigned int v6 = (0x801004u >> ((a1 >> 29) & 0xF8)) & 0xFFC;
  if (((0x801004u >> (8 * *((unsigned char *)result + 32))) & 0xFFC) == v6)
  {
LABEL_6:
    swift_bridgeObjectRelease();
    if (v6 == 16)
    {
      if (*(unsigned char *)(v1 + 9))
      {
        unint64_t v11 = (unsigned __int8 *)NANMapID.secondary.unsafeMutableAddressor();
        goto LABEL_19;
      }
    }
    else if (v6 != 4)
    {
      goto LABEL_15;
    }
    unint64_t v11 = (unsigned __int8 *)NANMapID.primary.unsafeMutableAddressor();
LABEL_19:
    int v10 = 0;
    int v9 = *v11;
    return (_UNKNOWN **)(v9 | (v10 << 8));
  }
  if (v5 == 1)
  {
LABEL_14:
    swift_bridgeObjectRelease();
LABEL_15:
    int v9 = 0;
    int v10 = 1;
    return (_UNKNOWN **)(v9 | (v10 << 8));
  }
  uint64_t v7 = 33;
  while (1)
  {
    uint64_t v8 = v7 - 31;
    if (__OFADD__(v7 - 32, 1)) {
      break;
    }
    if (v6 == (0x801004u >> (8 * *((unsigned char *)result + v7)))) {
      goto LABEL_6;
    }
    ++v7;
    if (v8 == v5) {
      goto LABEL_14;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1002C1DE0(unint64_t a1, char a2, void (*a3)(unint64_t))
{
  if (!a2)
  {
    __break(1u);
    goto LABEL_35;
  }
  char v4 = v3;
  LOBYTE(v5) = a2;
  uint64_t v7 = *((unsigned int *)v3 + 4);
  uint64_t v8 = *((unsigned __int8 *)v3 + 20);
  uint64_t v9 = *((unsigned __int8 *)v3 + 21);
  unint64_t v10 = *((unsigned int *)v3 + 6) | ((unint64_t)*((unsigned __int16 *)v3 + 14) << 32);
  unint64_t v11 = *((unsigned int *)v4 + 8) | ((unint64_t)*((unsigned __int16 *)v4 + 18) << 32);
  unint64_t v12 = (void *)v4[5];
  char v13 = *((unsigned char *)v4 + 9);
  swift_bridgeObjectRetain();
  unint64_t v14 = (unsigned __int8 *)NANMapID.primary.unsafeMutableAddressor();
  uint64_t v15 = RadioResources.SymbolicChannel.Resolver.channel(for:supportsSimulatenousDualBand:on:)(a1, v5, v13, *v14, v7 | (v8 << 32) | (v9 << 40), v10, v11, v12);
  uint64_t result = swift_bridgeObjectRelease();
  if ((v15 & 0xFF00000000) == 0x300000000) {
    goto LABEL_9;
  }
  long long v17 = *((_OWORD *)v4 + 1);
  v50[0] = *(_OWORD *)v4;
  v50[1] = v17;
  v50[2] = *((_OWORD *)v4 + 2);
  uint64_t v51 = v4[6];
  sub_1002C871C((uint64_t)v50);
  LOWORD(v18) = (unsigned __int16)sub_1002C1C8C(v15 & 0xFFFFFFFFFFFFLL);
  uint64_t result = sub_1002C86D4((uint64_t)v50);
  if ((v18 & 0x100) != 0)
  {
LABEL_9:
    if (v5 == 2 && a1 < 2) {
      return result;
    }
    long long v28 = *((_OWORD *)v4 + 1);
    v48[0] = *(_OWORD *)v4;
    v48[1] = v28;
    v48[2] = *((_OWORD *)v4 + 2);
    uint64_t v49 = v4[6];
    sub_1002C871C((uint64_t)v48);
    uint64_t v18 = sub_1002C1B60();
    sub_1002C86D4((uint64_t)v48);
    uint64_t v29 = *(void *)(v18 + 16);
    if (!v29) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
    uint64_t v30 = 0;
    while (1)
    {
      unint64_t v22 = *(unsigned __int8 *)(v18 + v30 + 32);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v32 = *v4;
      uint64_t v47 = *v4;
      *char v4 = 0x8000000000000000;
      unint64_t v5 = sub_10039F748(v22);
      uint64_t v34 = *(void *)(v32 + 16);
      BOOL v35 = (v33 & 1) == 0;
      uint64_t v36 = v34 + v35;
      if (__OFADD__(v34, v35)) {
        break;
      }
      char v37 = v33;
      if (*(void *)(v32 + 24) >= v36)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1003A3A84();
          uint64_t v32 = v47;
        }
      }
      else
      {
        sub_100292FDC(v36, isUniquelyReferenced_nonNull_native);
        uint64_t v32 = v47;
        unint64_t v38 = sub_10039F748(v22);
        if ((v37 & 1) != (v39 & 1)) {
          goto LABEL_35;
        }
        unint64_t v5 = v38;
      }
      *char v4 = v32;
      swift_bridgeObjectRelease();
      unint64_t v40 = (void *)*v4;
      if ((v37 & 1) == 0)
      {
        v40[(v5 >> 6) + 8] |= 1 << v5;
        *(unsigned char *)(v40[6] + v5) = v22;
        *(void *)(v40[7] + 8 * v5) = _swiftEmptyArrayStorage;
        uint64_t v41 = v40[2];
        BOOL v42 = __OFADD__(v41, 1);
        uint64_t v43 = v41 + 1;
        if (v42) {
          goto LABEL_31;
        }
        v40[2] = v43;
      }
      ++v30;
      a3(v40[7] + 8 * v5);
      if (v29 == v30) {
        return swift_bridgeObjectRelease_n();
      }
    }
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  char v19 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v48[0] = *v4;
  uint64_t v20 = *(void *)&v48[0];
  *char v4 = 0x8000000000000000;
  unint64_t v22 = sub_10039F748(v18);
  uint64_t v23 = *(void *)(v20 + 16);
  BOOL v24 = (v21 & 1) == 0;
  uint64_t v25 = v23 + v24;
  if (__OFADD__(v23, v24))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  LOBYTE(v5) = v21;
  if (*(void *)(v20 + 24) >= v25)
  {
    if (v19) {
      goto LABEL_26;
    }
LABEL_33:
    sub_1003A3A84();
    uint64_t v20 = *(void *)&v48[0];
    goto LABEL_26;
  }
  sub_100292FDC(v25, v19);
  uint64_t v20 = *(void *)&v48[0];
  unint64_t v26 = sub_10039F748(v18);
  if ((v5 & 1) != (v27 & 1))
  {
LABEL_35:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v22 = v26;
LABEL_26:
  *char v4 = v20;
  swift_bridgeObjectRelease();
  uint64_t v44 = (void *)*v4;
  swift_bridgeObjectRetain();
  if ((v5 & 1) == 0) {
    sub_100295E98(v22, v18, (uint64_t)_swiftEmptyArrayStorage, v44);
  }
  uint64_t v45 = v44[7];
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(unint64_t))a3)(v45 + 8 * v22);
}

__int16 sub_1002C2184@<W0>(unint64_t a1@<X0>, char *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *(void *)a2;
  if (!*(void *)(*(void *)a2 + 16)) {
    goto LABEL_28;
  }
  unsigned __int8 v7 = *(unsigned char *)a1;
  a1 = sub_10039F748(*(unsigned char *)a1);
  if ((v8 & 1) == 0) {
    goto LABEL_28;
  }
  uint64_t v45 = v3;
  uint64_t v9 = *(void *)(*(void *)(v5 + 56) + 8 * a1);
  uint64_t v10 = *(void *)(v9 + 16);
  if (v10)
  {
    uint64_t v44 = a3;
    unint64_t v11 = (void *)*((void *)a2 + 5);
    char v12 = a2[9];
    unint64_t v51 = *((unsigned int *)a2 + 6) | ((unint64_t)*((unsigned __int16 *)a2 + 14) << 32);
    unint64_t v52 = *((unsigned int *)a2 + 8) | ((unint64_t)*((unsigned __int16 *)a2 + 18) << 32);
    uint64_t v13 = a2[21];
    uint64_t v14 = a2[20];
    uint64_t v15 = *((unsigned int *)a2 + 4);
    uint64_t v16 = v14 << 32;
    uint64_t v50 = v13 << 40;
    swift_bridgeObjectRetain_n();
    char v19 = (unint64_t *)(v9 + 64);
    uint64_t v20 = &_swiftEmptyDictionarySingleton;
    uint64_t v21 = v15 | v16;
    unint64_t v22 = (unint64_t)&unk_1003D5000;
    unsigned __int8 v49 = v7;
    uint64_t v48 = v11;
    char v47 = v12;
    uint64_t v46 = v21;
    while (1)
    {
      uint64_t v55 = *(v19 - 2);
      uint64_t v54 = *(v19 - 1);
      unint64_t v53 = *v19;
      unint64_t v57 = v17 & 0xFFFF000000000000 | v51;
      unint64_t v58 = v22 & 0xFFFF000000000000 | v21 | v50;
      unint64_t v56 = v18 & 0xFFFF000000000000 | v52;
      uint64_t v23 = RadioResources.SymbolicChannel.Resolver.channel(for:supportsSimulatenousDualBand:on:)(*(v19 - 4), *((unsigned char *)v19 - 24), v12, v7, v58, v57, v56, v11);
      if ((v23 & 0xFF00000000) != 0x300000000)
      {
        uint64_t v24 = v23;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v59 = v20;
        unint64_t v27 = sub_10039F82C(v24 & 0xFFFFFFFFFFFFLL);
        uint64_t v28 = v20[2];
        BOOL v29 = (v26 & 1) == 0;
        uint64_t v30 = v28 + v29;
        if (__OFADD__(v28, v29))
        {
          __break(1u);
LABEL_31:
          __break(1u);
LABEL_32:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
LABEL_33:
          LOWORD(a1) = swift_release();
          __break(1u);
          return a1;
        }
        char v31 = v26;
        if (v20[3] >= v30)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_1003A38CC();
            uint64_t v20 = v59;
          }
        }
        else
        {
          sub_100292CC8(v30, isUniquelyReferenced_nonNull_native);
          uint64_t v20 = v59;
          uint64_t v32 = sub_10039F82C(v24 & 0xFFFFFFFFFFFFLL);
          if ((v31 & 1) != (v33 & 1)) {
            goto LABEL_32;
          }
          unint64_t v27 = v32;
        }
        swift_bridgeObjectRelease();
        if (v31)
        {
          swift_bridgeObjectRetain();
        }
        else
        {
          v20[(v27 >> 6) + 8] |= 1 << v27;
          uint64_t v34 = v20[6] + 8 * v27;
          *(_DWORD *)uint64_t v34 = v24;
          *(unsigned char *)(v34 + 4) = BYTE4(v24);
          *(unsigned char *)(v34 + 5) = BYTE5(v24);
          uint64_t v35 = v20[7] + 24 * v27;
          *(_OWORD *)uint64_t v35 = xmmword_1003D5B20;
          *(void *)(v35 + 16) = 0;
          uint64_t v36 = v20[2];
          uint64_t v37 = v36 + 1;
          BOOL v38 = __OFADD__(v36, 1);
          swift_bridgeObjectRetain();
          if (v38) {
            goto LABEL_31;
          }
          v20[2] = v37;
        }
        swift_bridgeObjectRelease();
        TimeBitmap.SlotsView.formUnion(_:)(v55, v54, v53);
        unsigned __int8 v7 = v49;
        unint64_t v11 = v48;
        char v12 = v47;
        uint64_t v21 = v46;
      }
      v19 += 5;
      --v10;
      unint64_t v17 = v57;
      unint64_t v22 = v58;
      unint64_t v18 = v56;
      if (!v10)
      {
        swift_bridgeObjectRelease();
        a3 = v44;
        goto LABEL_23;
      }
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v20 = &_swiftEmptyDictionarySingleton;
LABEL_23:
  swift_bridgeObjectRelease();
  if (!v20[2])
  {
    LOWORD(a1) = swift_bridgeObjectRelease();
LABEL_28:
    *a3 = 0;
    a3[1] = 0;
    return a1;
  }
  swift_bridgeObjectRetain_n();
  char v39 = sub_1002C5560((uint64_t)v20);
  swift_bridgeObjectRelease();
  uint64_t v59 = v39;
  sub_1002C5720((uint64_t *)&v59);
  if (v45) {
    goto LABEL_33;
  }
  swift_bridgeObjectRelease();
  uint64_t v40 = (uint64_t)v59;
  swift_bridgeObjectRetain();
  uint64_t v41 = sub_1002C8488(v40, (uint64_t)v20);
  swift_release();
  swift_bridgeObjectRelease_n();
  if (v41[2])
  {
    BOOL v42 = (CoreP2P::NANAttribute::Availability::Control *)NANAttribute.Availability.Control.committedChange.unsafeMutableAddressor();
    LOWORD(a1) = NANAttribute.Availability.Control.init(mapID:with:)((CoreP2P::NANMapID)v7, (CoreP2P::NANAttribute::Availability::Control)v42->rawValue);
    *a3 = (unint64_t)(unsigned __int16)a1 << 16;
    a3[1] = v41;
  }
  else
  {
    LOWORD(a1) = swift_bridgeObjectRelease();
    *a3 = 0;
    a3[1] = 0;
  }
  return a1;
}

uint64_t sub_1002C2578(uint64_t result)
{
  if (*(unsigned char *)(v1 + 9)) {
    return result;
  }
  else {
    return 11;
  }
}

uint64_t sub_1002C258C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1002C25BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(a2 + 24) + 8))(a1, a3, a4, *(void *)(a2 + 16));
}

uint64_t sub_1002C2604(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = __chkstk_darwin();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v1 + *(int *)(v3 + 36), v2);
  return String.init<A>(describing:)();
}

uint64_t sub_1002C26C8(uint64_t a1)
{
  uint64_t v2 = v1 + *(int *)(a1 + 36);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v3 = v7;
  uint64_t v4 = sub_1000382F0(v6);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(v4, v2, v3);
  return Mirror.init(reflecting:)();
}

uint64_t sub_1002C274C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1002C25BC(a1, a4, a2, a3);
}

uint64_t sub_1002C276C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v18[1] = a5;
  uint64_t v7 = type metadata accessor for RadioConstraint();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  char v12 = (char *)v18 - v11;
  char v13 = static UUID.== infix(_:_:)();
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v14(v12, a1, v7);
  v14(v10, a2, v7);
  if (v13) {
    char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else {
    char v15 = 0;
  }
  uint64_t v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v10, v7);
  v16(v12, v7);
  return v15 & 1;
}

uint64_t sub_1002C2900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1002C276C(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a4 - 8));
}

uint64_t sub_1002C2910()
{
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int sub_1002C29B0()
{
  return Hasher._finalize()();
}

Swift::Int sub_1002C2A08()
{
  return sub_1002C29B0();
}

uint64_t sub_1002C2A10()
{
  return sub_1002C2910();
}

Swift::Int sub_1002C2A18()
{
  return Hasher._finalize()();
}

uint64_t sub_1002C2A6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = (int *)type metadata accessor for PriorityRadioConstraint();
  return RadioSchedule.set(_:to:with:)(*(void *)(v3 + v6[7]), *(void *)(v3 + v6[7] + 8), *(void *)(v3 + v6[7] + 16), *(void *)(v3 + v6[6]), *(unsigned __int8 *)(v3 + v6[6] + 8), *(unsigned char *)(v3 + v6[5]), a2, a3);
}

void sub_1002C2ADC(uint64_t a1)
{
  type metadata accessor for UUID();
  sub_1002C83F8(&qword_100487710, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v3 = (int *)type metadata accessor for PriorityRadioConstraint();
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + v3[5]));
  RadioResources.SymbolicChannel.hash(into:)(a1, *(void *)(v1 + v3[6]), *(unsigned char *)(v1 + v3[6] + 8));
  uint64_t v4 = (Swift::UInt8 *)(v1 + v3[7]);
  Swift::UInt8 v5 = v4[17];
  LOBYTE(v3) = v4[18];
  Swift::UInt8 v6 = v4[19];
  Swift::UInt8 v7 = v4[20];
  Swift::UInt8 v8 = v4[21];
  Swift::UInt8 v9 = v4[22];
  Swift::UInt8 v10 = v4[23];
  Hasher._combine(_:)(v4[16]);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)((Swift::UInt8)v3);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
}

uint64_t sub_1002C2C0C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

Swift::Int sub_1002C2C74()
{
  Hasher.init(_seed:)();
  sub_1002C2ADC((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_1002C2CB8()
{
  Hasher.init(_seed:)();
  sub_1002C2ADC((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_1002C2CF8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = sub_100010BCC(qword_100486430);
  __chkstk_darwin();
  Swift::UInt8 v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v29 = v3;
    sub_1002C3738((uint64_t)&v37);
    uint64_t v30 = v37;
    int v33 = v39;
    int v34 = v38;
    int v32 = v40;
    unint64_t v31 = v41 | ((unint64_t)v42 << 32);
    long long v35 = v43;
    Swift::UInt8 v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 176);
    uint64_t v9 = swift_retain();
    uint64_t v10 = v8(v9);
    swift_release();
    uint64_t v11 = *WiFiDriverCapabilities.supportsDualBand.unsafeMutableAddressor();
    v36[0] = v10;
    uint64_t v44 = v11;
    unint64_t v12 = sub_1002C8868();
    swift_bridgeObjectRetain_n();
    ExtendableOptionSet.formIntersection(_:)((uint64_t)v36, (uint64_t)&type metadata for WiFiDriverCapabilities, v12);
    char v13 = sub_1000956AC(v44, v11);
    uint64_t v28 = v5;
    uint64_t v14 = v2;
    char v15 = v13;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v16 = v15 & 1;
    uint64_t v17 = swift_retain();
    uint64_t v18 = v8(v17);
    swift_release();
    uint64_t v19 = *WiFiDriverCapabilities.supportsSimultaneousDualBand.unsafeMutableAddressor();
    v36[0] = v18;
    uint64_t v44 = v19;
    swift_bridgeObjectRetain_n();
    ExtendableOptionSet.formIntersection(_:)((uint64_t)v36, (uint64_t)&type metadata for WiFiDriverCapabilities, v12);
    LOBYTE(v12) = sub_1000956AC(v44, v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v20 = v12 & 1;
    uint64_t v21 = (uint64_t)v28;
    sub_100336858((uint64_t)v28);
    unint64_t v22 = (void *)*OS_dispatch_queue.nan.unsafeMutableAddressor();
    uint64_t v23 = swift_allocObject();
    swift_weakInit();
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = *(void *)(v14 + 80);
    *(_OWORD *)(v24 + 24) = *(_OWORD *)(v14 + 88);
    *(void *)(v24 + 40) = *(void *)(v14 + 104);
    *(void *)(v24 + 48) = v23;
    uint64_t v25 = (void *)((char *)v1 + qword_100485678);
    swift_beginAccess();
    id v26 = v22;
    ObservableWiFiProperty.registerForChanges(on:using:valueUpdateHandler:)(v26, v25, (uint64_t)sub_1002C88F4, v24, v29, (uint64_t)&v44);
    sub_1000380B4(v21, qword_100486430);
    swift_endAccess();

    swift_release();
    if (v45)
    {
      unint64_t v27 = v49 | ((unint64_t)v50 << 32);
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v27 = 0x300000000;
    }
    uint64_t v44 = v30;
    LOBYTE(v45) = v16;
    BYTE1(v45) = v20;
    int v46 = v34;
    char v47 = v33;
    char v48 = v32;
    unsigned int v49 = v31;
    unsigned __int16 v50 = WORD2(v31);
    int v51 = v27;
    __int16 v52 = WORD2(v27);
    long long v53 = v35;
    sub_1002C38E4(&v44);
    return swift_release();
  }
  return result;
}

uint64_t sub_1002C30D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = *(unsigned __int16 *)(a2 + 28);
  uint64_t v4 = *(unsigned int *)(a2 + 24);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (v2) {
      uint64_t v6 = v4 | (v3 << 32);
    }
    else {
      uint64_t v6 = 0x300000000;
    }
    sub_1002C3738((uint64_t)&v7);
    uint64_t v15 = v7;
    char v16 = v8;
    char v17 = v9;
    int v18 = v10;
    __int16 v19 = v11;
    __int16 v21 = v13;
    int v20 = v12;
    int v22 = v6;
    __int16 v23 = WORD2(v6);
    long long v24 = v14;
    sub_1002C38E4(&v15);
    return swift_release();
  }
  return result;
}

uint64_t sub_1002C31B0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = sub_100010BCC((uint64_t *)&unk_100487A80);
  __chkstk_darwin(v3);
  Swift::UInt8 v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v7 = result;
    sub_1003564D0((uint64_t)v5);
    char v8 = (void *)*OS_dispatch_queue.nan.unsafeMutableAddressor();
    uint64_t v9 = swift_allocObject();
    swift_weakInit();
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = *(void *)(v2 + 80);
    *(_OWORD *)(v10 + 24) = *(_OWORD *)(v2 + 88);
    *(void *)(v10 + 40) = *(void *)(v2 + 104);
    *(void *)(v10 + 48) = v9;
    __int16 v11 = (void *)((char *)v1 + qword_100485680);
    swift_beginAccess();
    id v12 = v8;
    ObservableWiFiProperty.registerForChanges(on:using:valueUpdateHandler:)(v12, v11, (uint64_t)sub_1002C86C4, v10, v3, (uint64_t)&v29);
    sub_1000380B4((uint64_t)v5, (uint64_t *)&unk_100487A80);
    swift_endAccess();

    swift_release();
    v13._int rawValue = v29;
    sub_1002C3738((uint64_t)v25);
    long long v22 = v26;
    uint64_t v14 = v28;
    uint64_t v23 = v27;
    swift_bridgeObjectRetain();
    sub_1002C86D4((uint64_t)v25);
    uint64_t v24 = v14;
    v21[1] = v7;
    unint64_t v15 = sub_100356538();
    RadioResources.SymbolicChannel.Resolver.primaryChannel.setter(v15 & 0xFFFFFFFFFFFFLL);
    unint64_t v16 = sub_100356594();
    RadioResources.SymbolicChannel.Resolver.secondaryChannel.setter(v16 & 0xFFFFFFFFFFFFLL);
    RadioResources.SymbolicChannel.Resolver.update(preferredChannels:)(v13);
    swift_bridgeObjectRelease();
    LODWORD(v13._rawValue) = v22;
    __int16 v17 = WORD2(v22);
    v21[0] = DWORD2(v22);
    LOWORD(v10) = WORD6(v22);
    LODWORD(v8) = v23;
    __int16 v18 = WORD2(v23);
    uint64_t v19 = v24;
    sub_1002C3738((uint64_t)&v29);
    LOBYTE(v14) = v31;
    LOBYTE(v7) = v30;
    uint64_t v20 = (uint64_t)v29;
    v35[0] = v32;
    v35[1] = v33;
    sub_10012740C((uint64_t)v35);
    uint64_t v36 = v20;
    char v37 = v7;
    char v38 = v14;
    int rawValue = (int)v13._rawValue;
    __int16 v40 = v17;
    __int16 v42 = v10;
    int v41 = v21[0];
    __int16 v44 = v18;
    int v43 = (int)v8;
    uint64_t v45 = v19;
    uint64_t v46 = v34;
    sub_1002C38E4(&v36);
    return swift_release();
  }
  return result;
}

uint64_t sub_1002C34A4(uint64_t a1, void **a2)
{
  v2._int rawValue = *a2;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1002C3738((uint64_t)v4);
    RadioResources.SymbolicChannel.Resolver.update(preferredChannels:)(v2);
    sub_1002C38E4(v4);
    return swift_release();
  }
  return result;
}

uint64_t sub_1002C352C()
{
  return swift_weakLoadStrong();
}

uint64_t sub_1002C353C(uint64_t a1)
{
  sub_1002C3738((uint64_t)v9);
  long long v20 = v10;
  long long v21 = v11;
  sub_10006EC68((uint64_t)&v21, (uint64_t)v22, (uint64_t *)&unk_100487B90);
  uint64_t v2 = WORD2(v11);
  uint64_t v3 = v11;
  sub_10006EC68((uint64_t)v22, (uint64_t)v23, (uint64_t *)&unk_100487B90);
  if ((unint64_t)v23[4] << 32 == 0x300000000)
  {
    sub_1002C86D4((uint64_t)v9);
    int v4 = 3;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int v4 = ((v3 | (unint64_t)(v2 << 32)) >> 32);
  }
  long long v5 = *(_OWORD *)(a1 + 32);
  long long v17 = *(_OWORD *)(a1 + 16);
  long long v18 = v5;
  sub_10006EC68((uint64_t)&v18, (uint64_t)v19, (uint64_t *)&unk_100487B90);
  sub_10006EC68((uint64_t)v19, (uint64_t)v24, (uint64_t *)&unk_100487B90);
  char v6 = v25;
  if ((unint64_t)v25 << 32 == 0x300000000) {
    char v6 = 3;
  }
  if (v4 == 3)
  {
    if (v6 != 3) {
      return sub_1002C3EF0();
    }
  }
  else if (v6 == 3 || ((0x801004u >> (8 * v4)) & 0xFFC) != ((0x801004u >> (8 * v6)) & 0xFFC))
  {
    return sub_1002C3EF0();
  }
  sub_1002C3738((uint64_t)v12);
  sub_1002C86D4((uint64_t)v12);
  if (((unint64_t)v12[28] << 32 != 0x300000000) != ((unint64_t)BYTE12(v17) << 32 == 0x300000000))
  {
    sub_1002C3738((uint64_t)v13);
    v16[0] = v14;
    v16[1] = v15;
    uint64_t v7 = *((void *)&v15 + 1);
    swift_bridgeObjectRetain();
    sub_1002C86D4((uint64_t)v13);
    LOBYTE(v7) = sub_10039F4A8(v7, *((uint64_t *)&v18 + 1));
    sub_10012740C((uint64_t)v16);
    if (v7) {
      return sub_1002C403C();
    }
  }
  return sub_1002C3EF0();
}

uint64_t sub_1002C3738@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + qword_100485688;
  uint64_t v4 = *(void *)(v1 + qword_100485688);
  unint64_t v5 = *(void *)(v1 + qword_100485688 + 8);
  unint64_t v6 = *(void *)(v1 + qword_100485688 + 16);
  uint64_t v7 = *(void **)(v1 + qword_100485688 + 40);
  char v8 = *(void **)(v1 + qword_100485688 + 48);
  if (v4)
  {
    char v19 = v5 & 1;
    uint64_t v9 = (v5 >> 8) & 1;
    unint64_t v10 = HIDWORD(v6);
    long long v11 = *(void **)(v1 + qword_100485688);
    unint64_t v12 = v6 >> 40;
    uint64_t v21 = *(void *)(v1 + qword_100485688 + 16);
    uint64_t v13 = *(void *)(v1 + qword_100485688 + 24);
    uint64_t v14 = *(void *)(v1 + qword_100485688 + 32);
    long long v15 = v7;
    unint64_t v16 = v8;
  }
  else
  {
    long long v17 = Channel.nanPrimary.unsafeMutableAddressor();
    unint64_t v10 = *((unsigned __int8 *)v17 + 4);
    unint64_t v12 = *((unsigned __int8 *)v17 + 5);
    uint64_t v21 = *v17;
    uint64_t v20 = *(void *)v3;
    long long v11 = &_swiftEmptyDictionarySingleton;
    *(void *)uint64_t v3 = &_swiftEmptyDictionarySingleton;
    *(void *)(v3 + 8) = 0;
    uint64_t v13 = 0x300000000;
    *(void *)(v3 + 16) = v21 | (v10 << 32) | (v12 << 40);
    *(int64x2_t *)(v3 + 24) = vdupq_n_s64(0x300000000uLL);
    long long v15 = _swiftEmptyArrayStorage;
    *(void *)(v3 + 40) = _swiftEmptyArrayStorage;
    *(void *)(v3 + 48) = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    sub_1002C8764(v20);
    uint64_t v4 = 0;
    char v19 = 0;
    LOBYTE(v9) = 0;
    uint64_t v14 = 0x300000000;
    unint64_t v16 = _swiftEmptyArrayStorage;
  }
  uint64_t result = sub_1002C87B0(v4);
  *(void *)a1 = v11;
  *(unsigned char *)(a1 + 8) = v19;
  *(unsigned char *)(a1 + 9) = v9;
  *(_DWORD *)(a1 + 16) = v21;
  *(unsigned char *)(a1 + 20) = v10;
  *(unsigned char *)(a1 + 21) = v12;
  *(_DWORD *)(a1 + 24) = v13;
  *(_WORD *)(a1 + 28) = WORD2(v13);
  *(_DWORD *)(a1 + 32) = v14;
  *(_WORD *)(a1 + 36) = WORD2(v14);
  *(void *)(a1 + 40) = v15;
  *(void *)(a1 + 48) = v16;
  return result;
}

uint64_t sub_1002C38E4(uint64_t *a1)
{
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 9);
  uint64_t v5 = *((unsigned int *)a1 + 4);
  uint64_t v6 = *((unsigned __int8 *)a1 + 20);
  uint64_t v7 = *((unsigned __int8 *)a1 + 21);
  unint64_t v8 = *((unsigned int *)a1 + 6) | ((unint64_t)*((unsigned __int16 *)a1 + 14) << 32);
  unint64_t v9 = *((unsigned int *)a1 + 8) | ((unint64_t)*((unsigned __int16 *)a1 + 18) << 32);
  uint64_t v10 = a1[1] & 1;
  sub_1002C3738((uint64_t)v14);
  uint64_t v11 = v1 + qword_100485688;
  uint64_t v12 = *(void *)(v1 + qword_100485688);
  *(void *)uint64_t v11 = v3;
  *(void *)(v11 + 8) = v10 & 0xFFFFFFFFFFFFFEFFLL | ((unint64_t)(v4 & 1) << 8);
  *(void *)(v11 + 16) = v5 | (v6 << 32) | (v7 << 40);
  *(void *)(v11 + 24) = v8;
  *(void *)(v11 + 32) = v9;
  *(_OWORD *)(v11 + 40) = *(_OWORD *)(a1 + 5);
  sub_1002C8764(v12);
  sub_1002C353C((uint64_t)v14);
  return sub_1002C86D4((uint64_t)v14);
}

uint64_t sub_1002C39B8()
{
  uint64_t v0 = swift_allocObject();
  sub_1002C39F0();
  return v0;
}

uint64_t sub_1002C39F0()
{
  Logger.init(subsystem:category:)();
  *(void *)(v0 + qword_100485678) = 0;
  swift_weakInit();
  *(void *)(v0 + qword_100485680) = 0;
  swift_weakInit();
  swift_weakInit();
  uint64_t v1 = v0 + qword_100485688;
  *(_OWORD *)uint64_t v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(void *)(v1 + 48) = 0;
  *(void *)(v0 + qword_100485690) = _swiftEmptyDictionarySingleton;
  return v0;
}

uint64_t sub_1002C3AD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for UUID();
  __chkstk_darwin();
  uint64_t v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (uint64_t *)&v17[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v13 = (void *)*v12;
  uint64_t *v11 = *v12;
  (*(void (**)(uint64_t *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v9 + 8))(v11, v8);
  if (v13)
  {
    dispatch thunk of Identifiable.id.getter();
    v18[3] = a2;
    v18[4] = a3;
    unint64_t v16 = sub_1000382F0(v18);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(v16, a1, a2);
    swift_beginAccess();
    sub_100354F90((uint64_t)v18, (uint64_t)v7);
    swift_endAccess();
    return sub_1002C3EF0();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002C3CD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v17[1] = a4;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (void *)((char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v13 = (void *)*v12;
  uint64_t *v11 = *v12;
  (*(void (**)(uint64_t *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v9 + 8))(v11, v8);
  if (v13)
  {
    dispatch thunk of Identifiable.id.getter();
    swift_beginAccess();
    double v16 = sub_1003676E4((uint64_t)v7, (uint64_t)v18);
    (*(void (**)(char *, uint64_t, double))(v5 + 8))(v7, v4, v16);
    sub_1000380B4((uint64_t)v18, (uint64_t *)&unk_100485890);
    swift_endAccess();
    return sub_1002C3EF0();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002C3EF0()
{
  sub_1002C3738((uint64_t)v14);
  int v0 = v15;
  __int16 v1 = v16;
  int v2 = v17;
  __int16 v3 = v18;
  int v4 = v19;
  __int16 v5 = v20;
  uint64_t v6 = v21;
  swift_bridgeObjectRetain();
  sub_1002C86D4((uint64_t)v14);
  sub_1002C3738((uint64_t)v22);
  sub_1002C86D4((uint64_t)v22);
  char v7 = v22[8];
  sub_1002C3738((uint64_t)v23);
  sub_1002C86D4((uint64_t)v23);
  *(void *)&long long v10 = &_swiftEmptyDictionarySingleton;
  BYTE8(v10) = v7;
  BYTE9(v10) = v23[9];
  LODWORD(v11) = v0;
  WORD2(v11) = v1;
  WORD6(v11) = v3;
  DWORD2(v11) = v2;
  WORD2(v12) = v5;
  LODWORD(v12) = v4;
  *((void *)&v12 + 1) = v6;
  uint64_t v13 = _swiftEmptyArrayStorage;
  swift_beginAccess();
  uint64_t v8 = swift_bridgeObjectRetain();
  sub_1002C0FBC(v8, (uint64_t)&v10);
  swift_bridgeObjectRelease();
  v24[0] = v10;
  v24[1] = v11;
  v24[2] = v12;
  __int16 v25 = v13;
  sub_1002C871C((uint64_t)v24);
  sub_1002C38E4(v24);
  return sub_1002C86D4((uint64_t)v24);
}

uint64_t sub_1002C403C()
{
  sub_1002C3738((uint64_t)v4);
  uint64_t v0 = sub_1002C1B60();
  sub_1002C871C((uint64_t)v4);
  __int16 v1 = (objc_class *)sub_10036AB6C(v0, v4);
  sub_1002C86D4((uint64_t)v4);
  swift_bridgeObjectRelease();
  sub_1002C86D4((uint64_t)v4);
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    if (*(unsigned char *)(Strong + *(void *)(*(void *)Strong + 664)))
    {
      sub_1003565E8(v1);
      return swift_release();
    }
    swift_release();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002C410C()
{
  uint64_t v1 = v0 + qword_100488868;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_weakDestroy();
  swift_release();
  swift_weakDestroy();
  swift_weakDestroy();
  sub_1002C8764(*(void *)(v0 + qword_100485688));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1002C41F0()
{
  sub_1002C410C();

  return swift_deallocClassInstance();
}

uint64_t sub_1002C4248(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002C3AD4(a1, a2, a3);
}

uint64_t sub_1002C426C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1002C3CD4(a1, a2, a3, a4);
}

uint64_t sub_1002C4290(uint64_t result, uint64_t a2, uint64_t a3, char a4, char a5)
{
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6 == 2)
  {
    if (a4) {
      return result;
    }
    uint64_t v27 = (char *)TimeBitmap.Slot.FF.unsafeMutableAddressor();
    char v28 = *v27;
    uint64_t v29 = (char *)TimeBitmap.Slot.OO.unsafeMutableAddressor();
    uint64_t v30 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(v28, *v29, *v29, *v29);
    uint64_t v61 = v31;
    uint64_t v62 = v30;
    uint64_t v33 = v32;
    uint64_t v34 = a3;
    swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v23 = *(void (**)(void))(AssociatedConformanceWitness + 32);
    uint64_t v36 = swift_checkMetadataState();
    ((void (*)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))v23)(v62, v61, v33, 0, 2, v34, v36, AssociatedConformanceWitness);
    uint64_t v37 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(*v29, *v27, *v29, *v29);
    v23(v37);
    uint64_t v38 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(*v29, *v29, *v27, *v29);
    v23(v38);
    uint64_t v26 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(*v29, *v29, *v29, *v27);
    return ((uint64_t (*)(uint64_t))v23)(v26);
  }
  if (v6 == 1)
  {
    if (a4 & 1) != 0 || (a5)
    {
      __int16 v52 = TimeBitmap.secondaryDiscoveryWindow.unsafeMutableAddressor();
      unint64_t v53 = *v52;
      uint64_t v54 = v52[1];
      uint64_t v55 = v52[2];
      swift_getAssociatedTypeWitness();
      uint64_t v56 = swift_getAssociatedConformanceWitness();
      unint64_t v57 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v56 + 32);
      uint64_t v58 = swift_checkMetadataState();
      v57(v53, v54, v55, 1, 2, a3, v58, v56);
      unint64_t v59 = TimeBitmap.inverted()(*v52, v52[1], v52[2]);
      return ((uint64_t (*)(unint64_t))v57)(v59);
    }
    int v15 = (char *)TimeBitmap.Slot.FF.unsafeMutableAddressor();
    char v16 = *v15;
    int v17 = (char *)TimeBitmap.Slot.OO.unsafeMutableAddressor();
    uint64_t v60 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(v16, *v17, *v17, *v17);
    uint64_t v19 = v18;
    uint64_t v21 = v20;
    swift_getAssociatedTypeWitness();
    uint64_t v22 = swift_getAssociatedConformanceWitness();
    uint64_t v23 = *(void (**)(void))(v22 + 32);
    uint64_t v24 = swift_checkMetadataState();
    ((void (*)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))v23)(v60, v19, v21, 0, 2, a3, v24, v22);
    uint64_t v25 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(*v17, *v15, *v17, *v17);
    v23(v25);
    uint64_t v26 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(*v17, *v17, *v15, *v15);
    return ((uint64_t (*)(uint64_t))v23)(v26);
  }
  if (v6)
  {
    unsigned __int8 v39 = (char *)TimeBitmap.Slot.FF.unsafeMutableAddressor();
    char v40 = *v39;
    int v41 = (char *)TimeBitmap.Slot.OO.unsafeMutableAddressor();
    uint64_t v42 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(v40, *v41, *v41, *v41);
    uint64_t v44 = v43;
    uint64_t v46 = v45;
    uint64_t v47 = a3;
    swift_getAssociatedTypeWitness();
    uint64_t v48 = swift_getAssociatedConformanceWitness();
    unsigned int v49 = *(uint64_t (**)(void))(v48 + 32);
    uint64_t v50 = swift_checkMetadataState();
    ((void (*)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))v49)(v42, v44, v46, 0, 2, v47, v50, v48);
    uint64_t v51 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(*v41, *v39, *v41, *v41);
    return v49(v51);
  }
  else
  {
    char v7 = (uint64_t *)TimeBitmap.all.unsafeMutableAddressor();
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    uint64_t v10 = v7[2];
    swift_getAssociatedTypeWitness();
    uint64_t v11 = swift_getAssociatedConformanceWitness();
    long long v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 32);
    uint64_t v13 = swift_checkMetadataState();
    return v12(v8, v9, v10, 1, 2, a3, v13, v11);
  }
}

uint64_t sub_1002C47F4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, char a6, char a7, unint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v18 = *(void *)(a2 + 16);
  uint64_t v22 = a13;
  unint64_t v24 = a11;
  uint64_t v23 = a12;
  switch(v18)
  {
    case 0:
      uint64_t v25 = (uint64_t *)TimeBitmap.all.unsafeMutableAddressor();
      uint64_t v26 = *v25;
      uint64_t v27 = v25[1];
      uint64_t v28 = v25[2];
      swift_getAssociatedTypeWitness();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 32);
      uint64_t v31 = swift_checkMetadataState();
      return v30(v26, v27, v28, a3, a4, a5, v31, AssociatedConformanceWitness);
    case 1:
      if ((a6 & 1) != 0
        || a7 == 1
        && (int v68 = *(_DWORD *)(a2 + 32),
            swift_bridgeObjectRetain(),
            LOBYTE(v68) = Channel.isDFS.getter(v68),
            swift_bridgeObjectRelease(),
            unint64_t v24 = a11,
            uint64_t v23 = a12,
            uint64_t v22 = a13,
            (v68 & 1) != 0))
      {
        swift_getAssociatedTypeWitness();
        uint64_t v34 = swift_getAssociatedConformanceWitness();
        long long v35 = *(uint64_t (**)(void))(v34 + 32);
        uint64_t v36 = swift_checkMetadataState();
        ((void (*)(unint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))v35)(a8, a9, a10, a3, a4, a5, v36, v34);
        unint64_t v37 = TimeBitmap.inverted()(a8, a9, a10);
        return v35(v37);
      }
      else
      {
        unint64_t v69 = v24;
        uint64_t v70 = v23;
        uint64_t v71 = v22;
        swift_getAssociatedTypeWitness();
        uint64_t v72 = swift_getAssociatedConformanceWitness();
        int v73 = *(uint64_t (**)(void))(v72 + 32);
        uint64_t v74 = swift_checkMetadataState();
        ((void (*)(unint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))v73)(v69, v70, v71, a3, a4, a5, v74, v72);
        unint64_t v75 = TimeBitmap.inverted()(v69, v70, v71);
        return v73(v75);
      }
    case 2:
      int v38 = *(_DWORD *)(a2 + 32);
      swift_bridgeObjectRetain();
      if (Channel.isDFS.getter(v38) || Channel.isDFS.getter(*(_DWORD *)(a2 + 40))) {
        goto LABEL_13;
      }
      swift_bridgeObjectRelease();
      if (a6)
      {
        if (*(unsigned char *)(a2 + 38) == 1)
        {
LABEL_9:
          uint64_t v39 = 1;
LABEL_40:
          swift_getAssociatedTypeWitness();
          uint64_t v89 = swift_getAssociatedConformanceWitness();
          int64_t v63 = *(uint64_t (**)(void))(v89 + 32);
          uint64_t v90 = swift_checkMetadataState();
          ((void (*)(unint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))v63)(a11, a12, a13, a3, a4, a5, v90, v89);
          ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))v63)(a14, a15, a16, v39, 0, a5, v90, v89);
          char v91 = *(unsigned char *)TimeBitmap.Slot.OO.unsafeMutableAddressor();
          uint64_t v92 = (char *)TimeBitmap.Slot.FF.unsafeMutableAddressor();
          uint64_t v67 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(v91, v91, *v92, *v92);
          return v63(v67);
        }
        if (*(unsigned char *)(a2 + 46) == 1)
        {
LABEL_39:
          uint64_t v39 = 0;
          goto LABEL_40;
        }
      }
      else if (a7 == 1)
      {
        uint64_t v76 = swift_bridgeObjectRetain();
        uint64_t v77 = sub_1002C8954(v76);
        swift_bridgeObjectRelease();
        uint64_t v78 = *(void *)(v77 + 16);
        swift_bridgeObjectRelease();
        if (v78 == 1)
        {
          if (Channel.isDFS.getter(*(_DWORD *)(a2 + 32))) {
            goto LABEL_9;
          }
          if (Channel.isDFS.getter(*(_DWORD *)(a2 + 40))) {
            goto LABEL_39;
          }
        }
      }
      uint64_t v102 = (char *)TimeBitmap.Slot.FF.unsafeMutableAddressor();
      char v79 = *v102;
      uint64_t v100 = (char *)TimeBitmap.Slot.OO.unsafeMutableAddressor();
      uint64_t v80 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(v79, v79, *v100, *v100);
      uint64_t v104 = v81;
      uint64_t v83 = v82;
      swift_getAssociatedTypeWitness();
      uint64_t v84 = swift_getAssociatedConformanceWitness();
      uint64_t v85 = *(void (**)(void))(v84 + 32);
      uint64_t v86 = swift_checkMetadataState();
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))v85)(v80, v104, v83, a3, a4, a5, v86, v84);
      if ((*(unsigned char *)(a2 + 39) & 1) == 0)
      {
        if ((*(unsigned char *)(a2 + 47) & 1) == 0)
        {
          uint64_t v88 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(*v100, *v100, *v102, *v100);
          v85(v88);
          uint64_t v87 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(*v100, *v100, *v100, *v102);
          return ((uint64_t (*)(uint64_t))v85)(v87);
        }
LABEL_46:
        __break(1u);
        JUMPOUT(0x1002C5358);
      }
      if ((*(unsigned char *)(a2 + 47) & 1) == 0)
      {
        uint64_t v87 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(*v100, *v100, *v100, *v102);
        return ((uint64_t (*)(uint64_t))v85)(v87);
      }
      goto LABEL_45;
    case 3:
      swift_bridgeObjectRetain();
      if (Channel.isDFS.getter(*(_DWORD *)(a2 + 32))
        || Channel.isDFS.getter(*(_DWORD *)(a2 + 40))
        || Channel.isDFS.getter(*(_DWORD *)(a2 + 48)))
      {
        goto LABEL_13;
      }
      swift_bridgeObjectRelease();
      swift_getAssociatedTypeWitness();
      uint64_t v93 = swift_getAssociatedConformanceWitness();
      uint64_t v85 = *(void (**)(void))(v93 + 32);
      uint64_t v94 = swift_checkMetadataState();
      ((void (*)(unint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))v85)(a11, a12, a13, a3, a4, a5, v94, v93);
      ((void (*)(uint64_t, uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t))v85)(a14, a15, a16, 0, 0, a5, v94, v93);
      uint64_t v95 = (char *)TimeBitmap.Slot.OO.unsafeMutableAddressor();
      char v96 = *v95;
      unint64_t v97 = (char *)TimeBitmap.Slot.FF.unsafeMutableAddressor();
      uint64_t v98 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(v96, v96, *v97, *v95);
      v85(v98);
      uint64_t v87 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(*v95, *v95, *v95, *v97);
      return ((uint64_t (*)(void))v85)(v87);
    case 4:
      uint64_t v40 = 0;
      uint64_t v41 = 39;
      do
      {
        uint64_t v42 = v40 + 1;
        if (__OFADD__(v40, 1))
        {
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          goto LABEL_46;
        }
        if (*(unsigned char *)(a2 + v41))
        {
          swift_bridgeObjectRetain();
          uint64_t v53 = 0;
          uint64_t v54 = a2 + 37;
          do
          {
            uint64_t v55 = v53 + 1;
            if (__OFADD__(v53, 1)) {
              goto LABEL_44;
            }
            if (Channel.isDFS.getter(*(_DWORD *)(v54 - 5)))
            {
LABEL_13:
              swift_bridgeObjectRelease();
              goto LABEL_18;
            }
            ++v53;
            v54 += 8;
          }
          while (v55 != v18);
          swift_bridgeObjectRelease();
          uint64_t v56 = (char *)TimeBitmap.Slot.FF.unsafeMutableAddressor();
          char v57 = *v56;
          uint64_t v58 = (char *)TimeBitmap.Slot.OO.unsafeMutableAddressor();
          uint64_t v59 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(v57, *v58, *v58, *v58);
          uint64_t v101 = v60;
          uint64_t v103 = v59;
          uint64_t v99 = v61;
          swift_getAssociatedTypeWitness();
          uint64_t v62 = swift_getAssociatedConformanceWitness();
          int64_t v63 = *(uint64_t (**)(void))(v62 + 32);
          uint64_t v64 = swift_checkMetadataState();
          ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))v63)(v103, v101, v99, a3, a4, a5, v64, v62);
          uint64_t v65 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(*v58, *v56, *v58, *v58);
          v63(v65);
          uint64_t v66 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(*v58, *v58, *v56, *v58);
          v63(v66);
          uint64_t v67 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(*v58, *v58, *v58, *v56);
          return v63(v67);
        }
        v41 += 8;
        ++v40;
      }
      while (v42 != v18);
LABEL_18:
      char v43 = *(unsigned char *)TimeBitmap.Slot.FF.unsafeMutableAddressor();
      uint64_t v44 = (char *)TimeBitmap.Slot.OO.unsafeMutableAddressor();
      uint64_t v45 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(v43, v43, *v44, *v44);
      uint64_t v47 = v46;
      uint64_t v49 = v48;
      swift_getAssociatedTypeWitness();
      uint64_t v50 = swift_getAssociatedConformanceWitness();
      uint64_t v51 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))(v50 + 32);
      uint64_t v52 = swift_checkMetadataState();
      return v51(v45, v47, v49, a3, a4, a5, v52, v50);
    default:
      goto LABEL_18;
  }
}

uint64_t NANQualityOfService.update<A>(schedule:)(uint64_t result, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = result;
  if (a2 == 5)
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4))
    {
      uint64_t v7 = v6;
      int v8 = 6;
      goto LABEL_7;
    }
    uint64_t v9 = v6;
    uint64_t v10 = 6;
  }
  else
  {
    if (a2 != 4) {
      return result;
    }
    if ((*(uint64_t (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4))
    {
      uint64_t v7 = v6;
      int v8 = 0;
LABEL_7:
      return sub_1002C653C(v7, v8, a3, a4);
    }
    uint64_t v9 = v6;
    uint64_t v10 = 0;
  }

  return sub_1002C6BCC(v9, v10, a3, a4);
}

uint64_t sub_1002C5468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NANQualityOfService.update<A>(schedule:)(a1, *v3, a2, a3);
}

void *sub_1002C5478(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100010BCC((uint64_t *)&unk_100484BA0);
  __int16 v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = sub_1002C5F24((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_10006D44C();
  if (v6 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

void *sub_1002C5560(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100010BCC(&qword_100487080);
  __int16 v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 25;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 3);
  uint64_t v6 = sub_1002C6124(&v8, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  sub_10006D44C();
  if (v6 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

void *sub_1002C5648(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100010BCC(&qword_100485628);
  uint64_t v3 = swift_allocObject();
  size_t v4 = j__malloc_size((const void *)v3);
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = 2 * v4 - 64;
  uint64_t v5 = sub_1002C62C8(&v7, (unsigned char *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  sub_10006D44C();
  if (v5 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return (void *)v3;
}

Swift::Int sub_1002C5720(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1002C645C(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_1002C578C(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_1002C578C(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_141;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v84 = *a1;
      uint64_t v85 = *a1 + 8;
      uint64_t v86 = -1;
      for (uint64_t i = 1; i != v3; ++i)
      {
        uint64_t v88 = v85;
        uint64_t v89 = v86;
        do
        {
          int v90 = *(_DWORD *)v88;
          if (*(_DWORD *)v88 >= *(_DWORD *)(v88 - 8)) {
            break;
          }
          if (!v84) {
            goto LABEL_145;
          }
          __int16 v91 = *(_WORD *)(v88 + 4);
          *(void *)uint64_t v88 = *(void *)(v88 - 8);
          *(_DWORD *)(v88 - 8) = v90;
          *(_WORD *)(v88 - 4) = v91;
          v88 -= 8;
        }
        while (!__CFADD__(v89++, 1));
        --v86;
        v85 += 8;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_150;
  }
  Swift::Int v6 = result;
  uint64_t v101 = a1;
  if (v3 < 2)
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v13 = _swiftEmptyArrayStorage[2];
      long long v12 = (char *)_swiftEmptyArrayStorage;
LABEL_107:
      uint64_t v93 = v12;
      uint64_t v103 = v9;
      if (v13 >= 2)
      {
        uint64_t v94 = *v101;
        do
        {
          unint64_t v95 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_136;
          }
          if (!v94) {
            goto LABEL_149;
          }
          char v96 = v93;
          uint64_t v97 = *(void *)&v93[16 * v95 + 32];
          uint64_t v98 = *(void *)&v93[16 * v13 + 24];
          sub_10009E138((char *)(v94 + 8 * v97), (char *)(v94 + 8 * *(void *)&v93[16 * v13 + 16]), v94 + 8 * v98, __dst);
          if (v1) {
            break;
          }
          if (v98 < v97) {
            goto LABEL_137;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            char v96 = sub_100114E40((uint64_t)v96);
          }
          if (v95 >= *((void *)v96 + 2)) {
            goto LABEL_138;
          }
          uint64_t v99 = &v96[16 * v95 + 32];
          *(void *)uint64_t v99 = v97;
          *((void *)v99 + 1) = v98;
          unint64_t v100 = *((void *)v96 + 2);
          if (v13 > v100) {
            goto LABEL_139;
          }
          memmove(&v96[16 * v13 + 16], &v96[16 * v13 + 32], 16 * (v100 - v13));
          uint64_t v93 = v96;
          *((void *)v96 + 2) = v100 - 1;
          unint64_t v13 = v100 - 1;
        }
        while (v100 > 2);
      }
LABEL_97:
      swift_bridgeObjectRelease();
      v103[2] = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v103 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    uint64_t v103 = (void *)v8;
    __dst = (char *)(v8 + 32);
  }
  Swift::Int v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v102 = *a1 + 16;
  long long v12 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v104 = v6;
  Swift::Int v105 = v3;
  uint64_t v106 = v11;
  while (1)
  {
    Swift::Int v14 = v10++;
    if (v10 < v3)
    {
      unsigned int v15 = *(_DWORD *)(v11 + 8 * v10);
      uint64_t v16 = 8 * v14;
      unsigned int v17 = *(_DWORD *)(v11 + 8 * v14);
      Swift::Int v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        uint64_t v18 = (_DWORD *)(v102 + 8 * v14);
        while (v15 < v17 != *v18 >= *(v18 - 2))
        {
          v18 += 2;
          if (v3 == ++v10)
          {
            Swift::Int v10 = v3;
            break;
          }
        }
      }
      if (v15 < v17)
      {
        if (v10 < v14) {
          goto LABEL_142;
        }
        if (v14 < v10)
        {
          uint64_t v19 = 8 * v10 - 8;
          Swift::Int v20 = v10;
          Swift::Int v21 = v14;
          do
          {
            if (v21 != --v20)
            {
              if (!v11) {
                goto LABEL_148;
              }
              uint64_t v23 = (void *)(v11 + v16);
              int v24 = *(_DWORD *)(v11 + v16);
              char v25 = *(unsigned char *)(v11 + v16 + 4);
              char v26 = *(unsigned char *)(v11 + v16 + 5);
              if (v16 != v19 || (unint64_t)v23 >= v11 + v19 + 8) {
                *uint64_t v23 = *(void *)(v11 + v19);
              }
              uint64_t v22 = v11 + v19;
              *(_DWORD *)uint64_t v22 = v24;
              *(unsigned char *)(v22 + 4) = v25;
              *(unsigned char *)(v22 + 5) = v26;
            }
            ++v21;
            v19 -= 8;
            v16 += 8;
          }
          while (v21 < v20);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_50;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_140;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_50;
    }
    Swift::Int v27 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_143;
    }
    if (v27 >= v3) {
      Swift::Int v27 = v3;
    }
    if (v27 < v14) {
      break;
    }
    if (v10 != v27)
    {
      uint64_t v28 = (int *)(v11 + 8 * v10);
      do
      {
        uint64_t v29 = v28;
        Swift::Int v30 = v14;
        do
        {
          int v31 = *v29;
          if (*v29 >= *(v29 - 2)) {
            break;
          }
          if (!v11) {
            goto LABEL_146;
          }
          __int16 v32 = *((_WORD *)v29 + 2);
          *(void *)uint64_t v29 = *((void *)v29 - 1);
          *(v29 - 2) = v31;
          *((_WORD *)v29 - 2) = v32;
          ++v30;
          v29 -= 2;
        }
        while (v10 != v30);
        ++v10;
        v28 += 2;
      }
      while (v10 != v27);
      Swift::Int v10 = v27;
    }
LABEL_50:
    if (v10 < v14) {
      goto LABEL_135;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      long long v12 = sub_100114B14(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v34 = *((void *)v12 + 2);
    unint64_t v33 = *((void *)v12 + 3);
    unint64_t v13 = v34 + 1;
    uint64_t v11 = v106;
    if (v34 >= v33 >> 1)
    {
      uint64_t v83 = sub_100114B14((char *)(v33 > 1), v34 + 1, 1, v12);
      uint64_t v11 = v106;
      long long v12 = v83;
    }
    *((void *)v12 + 2) = v13;
    long long v35 = v12 + 32;
    uint64_t v36 = &v12[16 * v34 + 32];
    *(void *)uint64_t v36 = v14;
    *((void *)v36 + 1) = v10;
    if (v34)
    {
      while (1)
      {
        unint64_t v37 = v13 - 1;
        if (v13 >= 4)
        {
          uint64_t v42 = &v35[16 * v13];
          uint64_t v43 = *((void *)v42 - 8);
          uint64_t v44 = *((void *)v42 - 7);
          BOOL v48 = __OFSUB__(v44, v43);
          uint64_t v45 = v44 - v43;
          if (v48) {
            goto LABEL_124;
          }
          uint64_t v47 = *((void *)v42 - 6);
          uint64_t v46 = *((void *)v42 - 5);
          BOOL v48 = __OFSUB__(v46, v47);
          uint64_t v40 = v46 - v47;
          char v41 = v48;
          if (v48) {
            goto LABEL_125;
          }
          unint64_t v49 = v13 - 2;
          uint64_t v50 = &v35[16 * v13 - 32];
          uint64_t v52 = *(void *)v50;
          uint64_t v51 = *((void *)v50 + 1);
          BOOL v48 = __OFSUB__(v51, v52);
          uint64_t v53 = v51 - v52;
          if (v48) {
            goto LABEL_127;
          }
          BOOL v48 = __OFADD__(v40, v53);
          uint64_t v54 = v40 + v53;
          if (v48) {
            goto LABEL_130;
          }
          if (v54 >= v45)
          {
            uint64_t v72 = &v35[16 * v37];
            uint64_t v74 = *(void *)v72;
            uint64_t v73 = *((void *)v72 + 1);
            BOOL v48 = __OFSUB__(v73, v74);
            uint64_t v75 = v73 - v74;
            if (v48) {
              goto LABEL_134;
            }
            BOOL v65 = v40 < v75;
            goto LABEL_87;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v66 = *((void *)v12 + 4);
            uint64_t v67 = *((void *)v12 + 5);
            BOOL v48 = __OFSUB__(v67, v66);
            uint64_t v59 = v67 - v66;
            char v60 = v48;
            goto LABEL_81;
          }
          uint64_t v39 = *((void *)v12 + 4);
          uint64_t v38 = *((void *)v12 + 5);
          BOOL v48 = __OFSUB__(v38, v39);
          uint64_t v40 = v38 - v39;
          char v41 = v48;
        }
        if (v41) {
          goto LABEL_126;
        }
        unint64_t v49 = v13 - 2;
        uint64_t v55 = &v35[16 * v13 - 32];
        uint64_t v57 = *(void *)v55;
        uint64_t v56 = *((void *)v55 + 1);
        BOOL v58 = __OFSUB__(v56, v57);
        uint64_t v59 = v56 - v57;
        char v60 = v58;
        if (v58) {
          goto LABEL_129;
        }
        uint64_t v61 = &v35[16 * v37];
        uint64_t v63 = *(void *)v61;
        uint64_t v62 = *((void *)v61 + 1);
        BOOL v48 = __OFSUB__(v62, v63);
        uint64_t v64 = v62 - v63;
        if (v48) {
          goto LABEL_132;
        }
        if (__OFADD__(v59, v64)) {
          goto LABEL_133;
        }
        if (v59 + v64 >= v40)
        {
          BOOL v65 = v40 < v64;
LABEL_87:
          if (v65) {
            unint64_t v37 = v49;
          }
          goto LABEL_89;
        }
LABEL_81:
        if (v60) {
          goto LABEL_128;
        }
        int v68 = &v35[16 * v37];
        uint64_t v70 = *(void *)v68;
        uint64_t v69 = *((void *)v68 + 1);
        BOOL v48 = __OFSUB__(v69, v70);
        uint64_t v71 = v69 - v70;
        if (v48) {
          goto LABEL_131;
        }
        if (v71 < v59) {
          goto LABEL_15;
        }
LABEL_89:
        unint64_t v76 = v37 - 1;
        if (v37 - 1 >= v13)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }
        if (!v11) {
          goto LABEL_147;
        }
        uint64_t v77 = v12;
        uint64_t v78 = &v35[16 * v76];
        uint64_t v79 = *(void *)v78;
        uint64_t v80 = &v35[16 * v37];
        uint64_t v81 = *((void *)v80 + 1);
        sub_10009E138((char *)(v11 + 8 * *(void *)v78), (char *)(v11 + 8 * *(void *)v80), v11 + 8 * v81, __dst);
        if (v1) {
          goto LABEL_97;
        }
        if (v81 < v79) {
          goto LABEL_121;
        }
        if (v37 > *((void *)v77 + 2)) {
          goto LABEL_122;
        }
        *(void *)uint64_t v78 = v79;
        *(void *)&v35[16 * v76 + 8] = v81;
        unint64_t v82 = *((void *)v77 + 2);
        if (v37 >= v82) {
          goto LABEL_123;
        }
        long long v12 = v77;
        unint64_t v13 = v82 - 1;
        memmove(&v35[16 * v37], v80 + 16, 16 * (v82 - 1 - v37));
        *((void *)v77 + 2) = v82 - 1;
        uint64_t v11 = v106;
        if (v82 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_15:
    Swift::Int v6 = v104;
    Swift::Int v3 = v105;
    if (v10 >= v105)
    {
      uint64_t v9 = v103;
      goto LABEL_107;
    }
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1002C5E80(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  int64_t v4 = *a3 - (void)v3;
  if (v4 < 0)
  {
    Swift::Int result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    Swift::Int result = (char *)*a1;
    if (result != v3 || result >= &v3[v4])
    {
      return (char *)memmove(result, v3, v4);
    }
  }
  return result;
}

uint64_t sub_1002C5F24(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    uint64_t v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    Swift::Int v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    void *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    Swift::Int result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void *sub_1002C6124(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 64;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_35:
    *Swift::Int result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    uint64_t v13 = *(void *)(a4 + 48) + 8 * v12;
    int v14 = *(_DWORD *)v13;
    LOWORD(v13) = *(_WORD *)(v13 + 4);
    *(_DWORD *)a2 = v14;
    *(_WORD *)(a2 + 4) = v13;
    a2 += 8;
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  int64_t v15 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v15 >= v10) {
    goto LABEL_30;
  }
  unint64_t v16 = *(void *)(v4 + 8 * v15);
  if (v16) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v15 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v15;
    goto LABEL_34;
  }
  unint64_t v16 = *(void *)(v4 + 8 * v8);
  if (v16)
  {
LABEL_15:
    int64_t v15 = v8;
LABEL_19:
    unint64_t v18 = __clz(__rbit64(v16));
    unint64_t v7 = (v16 - 1) & v16;
    unint64_t v12 = v18 + (v15 << 6);
    int64_t v8 = v15;
    goto LABEL_8;
  }
  int64_t v17 = v15 + 2;
  if (v15 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v16 = *(void *)(v4 + 8 * v17);
  if (v16)
  {
LABEL_18:
    int64_t v15 = v17;
    goto LABEL_19;
  }
  int64_t v8 = v15 + 3;
  if (v15 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v15 + 2;
    goto LABEL_34;
  }
  unint64_t v16 = *(void *)(v4 + 8 * v8);
  if (v16) {
    goto LABEL_15;
  }
  int64_t v17 = v15 + 4;
  if (v15 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v4 + 8 * v17);
  if (v16) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v15 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v15 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    unint64_t v16 = *(void *)(v4 + 8 * v15);
    ++v17;
    if (v16) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

void *sub_1002C62C8(void *result, unsigned char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 64;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_35:
    *Swift::Int result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(unsigned char *)(*(void *)(a4 + 48) + v12);
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    int64_t v13 = v8;
LABEL_19:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_8;
  }
  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    int64_t v13 = v15;
    goto LABEL_19;
  }
  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13 + 2;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1002C645C(uint64_t a1)
{
  return sub_1002BF404(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1002C6470(uint64_t a1)
{
  return sub_1002BFD3C(0, *(void *)(a1 + 16), 0, (char *)a1);
}

BOOL sub_1002C6484(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = type metadata accessor for PriorityRadioConstraint();
  if (*(unsigned __int8 *)(a1 + *(int *)(v4 + 20)) != *(unsigned __int8 *)(a2 + *(int *)(v4 + 20))) {
    return 0;
  }
  uint64_t v5 = v4;
  if (!static RadioResources.SymbolicChannel.__derived_enum_equals(_:_:)(*(void *)(a1 + *(int *)(v4 + 24)), *(unsigned char *)(a1 + *(int *)(v4 + 24) + 8), *(void *)(a2 + *(int *)(v4 + 24)), *(unsigned char *)(a2 + *(int *)(v4 + 24) + 8)))return 0; {
  uint64_t v6 = *(int *)(v5 + 28);
  }
  uint64_t v7 = *(void *)(a1 + v6);
  uint64_t v8 = *(void *)(a1 + v6 + 8);
  uint64_t v9 = *(void *)(a1 + v6 + 16);
  int64_t v10 = (uint64_t *)(a2 + v6);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = v10[2];

  return static TimeBitmap.SlotsView.== infix(_:_:)(v7, v8, v9, v11, v12, v13);
}

uint64_t sub_1002C653C(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  int v58 = a2;
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 64);
  uint64_t v57 = a4 + 64;
  uint64_t v56 = v7;
  uint64_t v8 = v7(a3, a4);
  uint64_t v9 = sub_1002C6A9C(v8);
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(v9 + 16);
  swift_bridgeObjectRelease();
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 40);
  uint64_t v80 = a3;
  uint64_t result = v11(a3, v4);
  uint64_t v60 = *(void *)(result + 16);
  if (v60)
  {
    unint64_t v13 = 0;
    BOOL v52 = v10 == 1;
    uint64_t v59 = result + 32;
    uint64_t v51 = v4 + 24;
    uint64_t v54 = a1;
    uint64_t v53 = result;
    uint64_t v55 = v4;
    while (1)
    {
      if (v13 >= *(void *)(result + 16))
      {
        __break(1u);
        return result;
      }
      int v14 = *(unsigned __int8 *)(v59 + v13);
      if (!*(unsigned char *)(v59 + v13)) {
        break;
      }
      if (v14 == 1)
      {
        unint64_t v79 = v13;
        int64_t v15 = TimeBitmap.secondaryDiscoveryWindow.unsafeMutableAddressor();
        uint64_t v16 = *v15;
        uint64_t v76 = v15[1];
        uint64_t v77 = v16;
        int64_t v17 = (char *)TimeBitmap.Slot.OO.unsafeMutableAddressor();
        char v18 = *v17;
        int64_t v19 = (char *)TimeBitmap.Slot.FF.unsafeMutableAddressor();
        uint64_t v20 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(v18, *v19, *v17, *v17);
        uint64_t v74 = v21;
        uint64_t v75 = v20;
        uint64_t v73 = v22;
        uint64_t v23 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(*v19, *v17, *v17, *v17);
        uint64_t v71 = v24;
        uint64_t v72 = v23;
        uint64_t v69 = 1;
        unint64_t v70 = v25;
LABEL_10:
        uint64_t v37 = v56(v80, v4);
        uint64_t v38 = *(void *)(v37 + 16);
        int v78 = v14;
        uint64_t v68 = v37;
        if (v38)
        {
          if (v14) {
            int v39 = 16;
          }
          else {
            int v39 = 4;
          }
          uint64_t v40 = (char *)(v37 + 39);
          char v41 = _swiftEmptyArrayStorage;
          LODWORD(v81) = v39;
          do
          {
            int v45 = *(_DWORD *)(v40 - 7);
            int v46 = *(v40 - 3);
            char v47 = *(v40 - 2);
            char v48 = *(v40 - 1);
            char v49 = *v40;
            if (*(v40 - 3))
            {
              if (v46 == 1 && v39 == 16)
              {
LABEL_24:
                char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                unint64_t v82 = v41;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                {
                  sub_1000836E4(0, v41[2] + 1, 1);
                  char v41 = v82;
                }
                unint64_t v43 = v41[2];
                unint64_t v42 = v41[3];
                if (v43 >= v42 >> 1)
                {
                  sub_1000836E4(v42 > 1, v43 + 1, 1);
                  char v41 = v82;
                }
                v41[2] = v43 + 1;
                uint64_t v44 = &v41[v43];
                *((_DWORD *)v44 + 8) = v45;
                *((unsigned char *)v44 + 36) = v46;
                *((unsigned char *)v44 + 37) = v47;
                *((unsigned char *)v44 + 38) = v48;
                *((unsigned char *)v44 + 39) = v49;
                int v39 = (int)v81;
              }
            }
            else if (v39 == 4)
            {
              goto LABEL_24;
            }
            v40 += 8;
            --v38;
          }
          while (v38);
        }
        unint64_t v61 = v70 >> 8;
        unint64_t v62 = v70 >> 16;
        unint64_t v63 = v70 >> 24;
        unint64_t v64 = HIDWORD(v70);
        unint64_t v65 = v70 >> 40;
        unint64_t v66 = HIWORD(v70);
        unint64_t v67 = HIBYTE(v70);
        swift_bridgeObjectRelease();
        uint64_t v81 = &v51;
        __chkstk_darwin();
        uint64_t v4 = v55;
        (*(void (**)(void))(v55 + 24))();
        swift_release();
        uint64_t result = v53;
        unint64_t v13 = v79;
      }
      if (++v13 == v60) {
        return swift_bridgeObjectRelease();
      }
    }
    unint64_t v79 = v13;
    char v26 = TimeBitmap.primaryDiscoveryWindow.unsafeMutableAddressor();
    uint64_t v27 = *v26;
    uint64_t v76 = v26[1];
    uint64_t v77 = v27;
    uint64_t v28 = (char *)TimeBitmap.Slot.FF.unsafeMutableAddressor();
    char v29 = *v28;
    Swift::Int v30 = (char *)TimeBitmap.Slot.OO.unsafeMutableAddressor();
    uint64_t v31 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(v29, *v30, *v30, *v30);
    uint64_t v74 = v32;
    uint64_t v75 = v31;
    uint64_t v73 = v33;
    uint64_t v34 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(*v30, *v28, *v30, *v30);
    uint64_t v71 = v35;
    uint64_t v72 = v34;
    uint64_t v69 = 0;
    unint64_t v70 = v36;
    goto LABEL_10;
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_1002C6A9C(uint64_t result)
{
  unint64_t v1 = 0;
  unint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = result + 24;
LABEL_2:
  if (v1 <= v2) {
    unint64_t v4 = v2;
  }
  else {
    unint64_t v4 = v1;
  }
  uint64_t v5 = v3 + 8 * v1;
  unint64_t v6 = v4 + 1;
  while (1)
  {
    if (v2 == v1) {
      return (uint64_t)_swiftEmptyArrayStorage;
    }
    if (v6 == ++v1) {
      break;
    }
    uint64_t v7 = (int *)(v5 + 8);
    int v8 = *(unsigned __int8 *)(v5 + 14);
    v5 += 8;
    if (v8 == 1)
    {
      uint64_t v16 = v3;
      int v9 = *v7;
      char v10 = *((unsigned char *)v7 + 4);
      char v11 = *((unsigned char *)v7 + 5);
      char v12 = *((unsigned char *)v7 + 7);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0) {
        uint64_t result = sub_1000836E4(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v14 = _swiftEmptyArrayStorage[2];
      unint64_t v13 = _swiftEmptyArrayStorage[3];
      if (v14 >= v13 >> 1) {
        uint64_t result = sub_1000836E4(v13 > 1, v14 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v14 + 1;
      int64_t v15 = &_swiftEmptyArrayStorage[v14];
      *((_DWORD *)v15 + 8) = v9;
      *((unsigned char *)v15 + 36) = v10;
      *((unsigned char *)v15 + 37) = v11;
      *((unsigned char *)v15 + 38) = 1;
      *((unsigned char *)v15 + 39) = v12;
      uint64_t v3 = v16;
      goto LABEL_2;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1002C6BCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 64);
  uint64_t v7 = v6(a3, a4);
  int64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    uint64_t v21 = v6;
    uint64_t v22 = v5;
    uint64_t v23 = v4;
    sub_1002BF2F4(0, v8, 0);
    unint64_t v9 = 0;
    unint64_t v10 = _swiftEmptyArrayStorage[2];
    unint64_t v11 = v10;
    do
    {
      int v12 = *(_DWORD *)(v7 + v9 + 32);
      char v13 = *(unsigned char *)(v7 + v9 + 36);
      char v14 = *(unsigned char *)(v7 + v9 + 37);
      unint64_t v15 = _swiftEmptyArrayStorage[3];
      unint64_t v16 = v10 + 1;
      if (v10 >= v15 >> 1) {
        sub_1002BF2F4(v15 > 1, v10 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v16;
      int64_t v17 = &_swiftEmptyArrayStorage[v11 + v9 / 8];
      *((_DWORD *)v17 + 8) = v12;
      *((unsigned char *)v17 + 36) = v13;
      *((unsigned char *)v17 + 37) = v14;
      v9 += 8;
      unint64_t v10 = v16;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
    uint64_t v5 = v22;
    uint64_t v4 = v23;
    unint64_t v6 = v21;
    uint64_t v18 = v21(v22, v23);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v18 = v6(v5, v4);
  }
  sub_1002C8954(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v19 = v6(v5, v4);
  sub_1002C6A9C(v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __chkstk_darwin();
  (*(void (**)(void, uint64_t, uint64_t (*)(uint64_t)))(v4 + 24))(0, 2, sub_1002C8AA0);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002C6E14()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for RadioResourceManager()
{
  return swift_getGenericMetadata();
}

void *sub_1002C6EEC(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    unint64_t v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    *(void *)unint64_t v9 = *(void *)v10;
    v9[8] = v10[8];
    uint64_t v11 = a3[7];
    int v12 = (char *)a1 + v11;
    char v13 = (char *)a2 + v11;
    *(_OWORD *)int v12 = *(_OWORD *)v13;
    *((void *)v12 + 2) = *((void *)v13 + 2);
  }
  return a1;
}

uint64_t sub_1002C6FEC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_1002C7050(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  uint64_t v10 = a3[7];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  *(void *)(v11 + 16) = *(void *)(v12 + 16);
  return a1;
}

uint64_t sub_1002C7100(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = v10;
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  *(void *)uint64_t v12 = *(void *)v13;
  *(void *)(v12 + 8) = *(void *)(v13 + 8);
  *(unsigned char *)(v12 + 16) = *(unsigned char *)(v13 + 16);
  *(unsigned char *)(v12 + 17) = *(unsigned char *)(v13 + 17);
  *(unsigned char *)(v12 + 18) = *(unsigned char *)(v13 + 18);
  *(unsigned char *)(v12 + 19) = *(unsigned char *)(v13 + 19);
  *(unsigned char *)(v12 + 20) = *(unsigned char *)(v13 + 20);
  *(unsigned char *)(v12 + 21) = *(unsigned char *)(v13 + 21);
  *(unsigned char *)(v12 + 22) = *(unsigned char *)(v13 + 22);
  *(unsigned char *)(v12 + 23) = *(unsigned char *)(v13 + 23);
  return a1;
}

uint64_t sub_1002C71F4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  uint64_t v10 = a3[7];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  *(void *)(v11 + 16) = *(void *)(v12 + 16);
  return a1;
}

uint64_t sub_1002C72A4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  uint64_t v10 = a3[7];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  *(void *)(v11 + 16) = *(void *)(v12 + 16);
  return a1;
}

uint64_t sub_1002C7354(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002C7368);
}

uint64_t sub_1002C7368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24) + 8);
    if (v10 > 2) {
      return (v10 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_1002C7428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002C743C);
}

uint64_t sub_1002C743C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 24) + 8) = -(char)a2;
  }
  return result;
}

uint64_t type metadata accessor for PriorityRadioConstraint()
{
  uint64_t result = qword_100485770;
  if (!qword_100485770) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1002C7548()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1002C75F0()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1002C76BC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(_DWORD *)(v10 + 80);
  uint64_t v12 = v8 + v11;
  unint64_t v13 = ((v8 + v11) & ~v11) + *(void *)(v10 + 64);
  uint64_t v14 = (*(unsigned char *)(v7 + 80) | *(unsigned char *)(v10 + 80));
  if (v14 > 7 || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v10 + 80)) & 0x100000) != 0 || v13 > 0x18)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v14 + 16) & ~v14));
    swift_retain();
  }
  else
  {
    uint64_t v18 = ~v11;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))(((unint64_t)a1 + v12) & v18, ((unint64_t)a2 + v12) & v18, v9);
  }
  return a1;
}

uint64_t sub_1002C7820(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8) + 8;
  (*(void (**)(uint64_t, uint64_t))v5)(a1, v4);
  uint64_t v6 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v7 = *(uint64_t (**)(unint64_t))(v6 + 8);
  unint64_t v8 = (*(void *)(v5 + 56) + a1 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);

  return v7(v8);
}

uint64_t sub_1002C78D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, v6);
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 16))((*(void *)(v7 + 48) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(void *)(v7 + 48) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t sub_1002C7988(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, v6);
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))((*(void *)(v7 + 40) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(void *)(v7 + 40) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t sub_1002C7A40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, v6);
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 32))((*(void *)(v7 + 32) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(void *)(v7 + 32) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t sub_1002C7AF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, v6);
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 40))((*(void *)(v7 + 24) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(void *)(v7 + 24) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t sub_1002C7BB0(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v8) {
    unsigned int v12 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v13 = *(void *)(*(void *)(v6 - 8) + 64) + v11;
  if (a2 <= v12) {
    goto LABEL_24;
  }
  uint64_t v14 = (v13 & ~v11) + *(void *)(v9 + 64);
  char v15 = 8 * v14;
  if (v14 <= 3)
  {
    unsigned int v17 = ((a2 - v12 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v17))
    {
      int v16 = *(_DWORD *)((char *)a1 + v14);
      if (!v16) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v17 > 0xFF)
    {
      int v16 = *(unsigned __int16 *)((char *)a1 + v14);
      if (!*(unsigned __int16 *)((char *)a1 + v14)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v17 < 2)
    {
LABEL_24:
      if (v12)
      {
        if (v8 >= v10)
        {
          uint64_t v23 = *(uint64_t (**)(unsigned __int16 *))(v7 + 48);
          return v23(a1);
        }
        else
        {
          uint64_t v21 = *(uint64_t (**)(unint64_t, uint64_t))(v9 + 48);
          return v21(((unint64_t)a1 + v13) & ~v11, v10);
        }
      }
      return 0;
    }
  }
  int v16 = *((unsigned __int8 *)a1 + v14);
  if (!*((unsigned char *)a1 + v14)) {
    goto LABEL_24;
  }
LABEL_14:
  int v18 = (v16 - 1) << v15;
  if (v14 > 3) {
    int v18 = 0;
  }
  if (v14)
  {
    if (v14 <= 3) {
      int v19 = (v13 & ~v11) + *(_DWORD *)(v9 + 64);
    }
    else {
      int v19 = 4;
    }
    switch(v19)
    {
      case 2:
        int v20 = *a1;
        break;
      case 3:
        int v20 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v20 = *(_DWORD *)a1;
        break;
      default:
        int v20 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v20 = 0;
  }
  return v12 + (v20 | v18) + 1;
}

void sub_1002C7E10(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v12 = *(unsigned int *)(v11 + 84);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  if (v12 <= v10) {
    unsigned int v14 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v14 = *(_DWORD *)(v11 + 84);
  }
  uint64_t v15 = *(void *)(*(void *)(v8 - 8) + 64) + v13;
  size_t v16 = (v15 & ~v13) + *(void *)(v11 + 64);
  if (a3 <= v14)
  {
    int v17 = 0;
  }
  else if (v16 <= 3)
  {
    unsigned int v20 = ((a3 - v14 + ~(-1 << (8 * v16))) >> (8 * v16)) + 1;
    if (HIWORD(v20))
    {
      int v17 = 4;
    }
    else if (v20 >= 0x100)
    {
      int v17 = 2;
    }
    else
    {
      int v17 = v20 > 1;
    }
  }
  else
  {
    int v17 = 1;
  }
  if (v14 < a2)
  {
    unsigned int v18 = ~v14 + a2;
    if (v16 < 4)
    {
      int v19 = (v18 >> (8 * v16)) + 1;
      if (v16)
      {
        int v21 = v18 & ~(-1 << (8 * v16));
        bzero(a1, v16);
        if (v16 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v16 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v16);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v16] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v16] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v16] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x1002C80F0);
    case 4:
      *(_DWORD *)&a1[v16] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v10 >= v12)
        {
          uint64_t v23 = *(void (**)(unsigned char *, uint64_t))(v9 + 56);
          v23(a1, a2);
        }
        else
        {
          uint64_t v22 = *(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 56);
          v22((unint64_t)&a1[v15] & ~v13, a2, v12);
        }
      }
      return;
  }
}

uint64_t type metadata accessor for RadioConstraint()
{
  return sub_100038354();
}

uint64_t destroy for RadioResourceSchedule()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for RadioResourceSchedule(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_WORD *)(a1 + 28) = *(_WORD *)(a2 + 28);
  *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RadioResourceSchedule(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(unsigned char *)(a1 + 21) = *(unsigned char *)(a2 + 21);
  int v4 = *(_DWORD *)(a2 + 24);
  *(_WORD *)(a1 + 28) = *(_WORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = v4;
  int v5 = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for RadioResourceSchedule(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_WORD *)(a1 + 28) = *(_WORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 36);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for RadioResourceSchedule()
{
  return &type metadata for RadioResourceSchedule;
}

_UNKNOWN **sub_1002C835C()
{
  return &off_100469BD8;
}

uint64_t sub_1002C8368()
{
  return sub_1002C83F8(&qword_100487710, (void (*)(uint64_t))&type metadata accessor for UUID);
}

uint64_t sub_1002C83B0()
{
  return sub_1002C83F8(&qword_100485878, (void (*)(uint64_t))type metadata accessor for PriorityRadioConstraint);
}

uint64_t sub_1002C83F8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002C8440()
{
  return swift_getWitnessTable();
}

void *sub_1002C8488(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  int v4 = (unsigned __int8 *)(swift_bridgeObjectRetain() + 37);
  int v5 = _swiftEmptyArrayStorage;
  do
  {
    unint64_t v10 = ((unint64_t)*v4 << 40) | ((unint64_t)*(v4 - 1) << 32) | *(unsigned int *)(v4 - 5);
    unint64_t v11 = NANBitmap.Channel.init(channel:)(v10);
    if ((v12 & 0x100) == 0)
    {
      if (*(void *)(a2 + 16))
      {
        unint64_t v13 = v11;
        char v14 = v12;
        uint64_t v15 = sub_10039F82C(v10);
        if (v16)
        {
          int v17 = (unint64_t *)(*(void *)(a2 + 56) + 24 * v15);
          unint64_t v18 = *v17;
          unint64_t v19 = v17[1];
          unint64_t v20 = v17[2];
          int v21 = (uint64_t *)TimeBitmap.zero.unsafeMutableAddressor();
          if (!static TimeBitmap.SlotsView.== infix(_:_:)(v18, v19, v20, *v21, v21[1], v21[2]))
          {
            unsigned __int16 v22 = TimeBitmap.nanBitmap.getter(v18, v19, v20);
            uint64_t v24 = v23;
            unint64_t v26 = v25;
            unint64_t v27 = v13 & 0xFFFF00FFFFFF00FFLL | v31 & 0xFF000000FF00;
            static NANAvailabilityEntry.committedEntry(on:for:)(v27, v14 & 1, v22, v23, v25, (uint64_t)v32);
            sub_10000C970(v24, v26);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              int v5 = sub_1000C67EC(0, v5[2] + 1, 1, v5);
            }
            unint64_t v29 = v5[2];
            unint64_t v28 = v5[3];
            unint64_t v31 = v27;
            if (v29 >= v28 >> 1) {
              int v5 = sub_1000C67EC((void *)(v28 > 1), v29 + 1, 1, v5);
            }
            uint64_t v5[2] = v29 + 1;
            uint64_t v6 = &v5[7 * v29];
            long long v7 = v32[0];
            long long v8 = v32[1];
            long long v9 = v32[2];
            *((unsigned char *)v6 + 80) = v33;
            *((_OWORD *)v6 + 3) = v8;
            *((_OWORD *)v6 + 4) = v9;
            *((_OWORD *)v6 + 2) = v7;
          }
        }
      }
    }
    v4 += 8;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1002C866C(uint64_t a1)
{
  return sub_1002C881C(a1, (uint64_t)&qword_100488878, sub_1002C31B0);
}

uint64_t sub_1002C868C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002C86C4(uint64_t a1, void **a2)
{
  return sub_1002C34A4(a1, a2);
}

uint64_t sub_1002C86D4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002C871C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002C8764(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1002C87B0(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1002C87FC(uint64_t a1)
{
  return sub_1002C881C(a1, (uint64_t)&qword_100488870, sub_1002C2CF8);
}

uint64_t sub_1002C881C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  swift_weakAssign();

  return a3();
}

unint64_t sub_1002C8868()
{
  unint64_t result = qword_100486230;
  if (!qword_100486230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100486230);
  }
  return result;
}

uint64_t sub_1002C88BC()
{
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1002C88F4(uint64_t a1, uint64_t a2)
{
  return sub_1002C30D4(a1, a2);
}

uint64_t sub_1002C8904(uint64_t a1)
{
  return sub_1002C47F4(a1, *(void *)(v1 + 32), *(void *)(v1 + 40), *(unsigned __int8 *)(v1 + 48), *(unsigned __int8 *)(v1 + 49), *(unsigned char *)(v1 + 50), *(unsigned char *)(v1 + 51), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 80), *(void *)(v1 + 88), *(void *)(v1 + 96), *(void *)(v1 + 104), *(void *)(v1 + 112), *(void *)(v1 + 120));
}

uint64_t sub_1002C8954(uint64_t result)
{
  unint64_t v1 = 0;
  unint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = result + 39;
  unint64_t v19 = _swiftEmptyArrayStorage;
  uint64_t v18 = result + 39;
LABEL_2:
  if (v1 <= v2) {
    unint64_t v4 = v2;
  }
  else {
    unint64_t v4 = v1;
  }
  unint64_t v5 = v4 + 1;
  uint64_t v6 = (char *)(v3 + 8 * v1);
  while (1)
  {
    if (v2 == v1) {
      return (uint64_t)v19;
    }
    if (v5 == ++v1) {
      break;
    }
    long long v7 = v6 + 8;
    int v8 = *(_DWORD *)(v6 - 7);
    char v9 = *(v6 - 3);
    char v10 = *(v6 - 2);
    char v11 = *(v6 - 1);
    char v12 = *v6;
    unint64_t result = Channel.isDFS.getter(v8);
    uint64_t v6 = v7;
    if (result)
    {
      unint64_t v13 = v19;
      unint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        unint64_t result = sub_1000836E4(0, v19[2] + 1, 1);
        unint64_t v13 = v19;
      }
      unint64_t v15 = v13[2];
      unint64_t v14 = v13[3];
      unint64_t v16 = v15 + 1;
      if (v15 >= v14 >> 1)
      {
        unint64_t result = sub_1000836E4(v14 > 1, v15 + 1, 1);
        unint64_t v16 = v15 + 1;
        unint64_t v13 = v19;
      }
      v13[2] = v16;
      unint64_t v19 = v13;
      int v17 = &v13[v15];
      *((_DWORD *)v17 + 8) = v8;
      *((unsigned char *)v17 + 36) = v9;
      *((unsigned char *)v17 + 37) = v10;
      *((unsigned char *)v17 + 38) = v11;
      *((unsigned char *)v17 + 39) = v12;
      uint64_t v3 = v18;
      goto LABEL_2;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1002C8AA0(uint64_t a1)
{
  return sub_1002C4290(a1, *(void *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(unsigned char *)(v1 + 41), *(unsigned char *)(v1 + 42));
}

uint64_t getEnumTagSinglePayload for RadioResourceSchedule.RadioResourceMap.Constraint(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RadioResourceSchedule.RadioResourceMap.Constraint(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RadioResourceSchedule.RadioResourceMap.Constraint()
{
  return &type metadata for RadioResourceSchedule.RadioResourceMap.Constraint;
}

ValueMetadata *type metadata accessor for RadioResourceSchedule.RadioResourceMap()
{
  return &type metadata for RadioResourceSchedule.RadioResourceMap;
}

void sub_1002C8B70()
{
  type metadata accessor for Logger();
  if (v0 <= 0x3F)
  {
    type metadata accessor for DispatchTime();
    if (v1 <= 0x3F)
    {
      sub_1002D5E4C(319, (unint64_t *)&qword_10047DA60, (void (*)(uint64_t))&type metadata accessor for DispatchTime);
      if (v2 <= 0x3F)
      {
        sub_1002D5E4C(319, qword_100485A00, (void (*)(uint64_t))type metadata accessor for NANInternetSharingStatistics.Requester);
        if (v3 <= 0x3F) {
          swift_initClassMetadata2();
        }
      }
    }
  }
}

uint64_t sub_1002C8D7C(uint64_t a1)
{
  unint64_t v2 = 0xED000066664F2079;
  unint64_t v3 = 0x63696C6F50205249;
  switch(a1)
  {
    case 0:
      goto LABEL_8;
    case 1:
      unint64_t v3 = 0xD000000000000014;
      int v4 = "IR Policy For 2.4GHz";
      goto LABEL_7;
    case 2:
      unint64_t v5 = "IR Policy for DFS";
      goto LABEL_5;
    case 3:
      unint64_t v3 = 0xD00000000000001BLL;
      int v4 = "IR Policy for Multiple 5GHz";
LABEL_7:
      unint64_t v2 = (unint64_t)(v4 - 32) | 0x8000000000000000;
      goto LABEL_8;
    default:
      unint64_t v5 = "Unknown IR Policy";
LABEL_5:
      unint64_t v2 = (unint64_t)(v5 - 32) | 0x8000000000000000;
      unint64_t v3 = 0xD000000000000011;
LABEL_8:
      unint64_t v6 = v2;
      String.append(_:)(*(Swift::String *)&v3);
      return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1002C8E70(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100010BCC((uint64_t *)&unk_100485B90);
    unint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    unint64_t v2 = _swiftEmptyDictionarySingleton;
  }
  uint64_t v27 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(63 - v3) >> 6;
  unint64_t v6 = v2 + 8;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v26) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v27 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v26) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v27 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v26) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v27 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    int v17 = (void *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v18 = v17[1];
    *(void *)&v36[0] = *v17;
    *((void *)&v36[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_100010BCC((uint64_t *)&unk_100488360);
    swift_dynamicCast();
    long long v32 = v28;
    long long v33 = v29;
    uint64_t v34 = v30;
    sub_10003803C(&v31, v35);
    long long v28 = v32;
    long long v29 = v33;
    uint64_t v30 = v34;
    sub_10003803C(v35, v36);
    sub_10003803C(v36, &v32);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v19 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~v6[v20 >> 6]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v20) & ~v6[v20 >> 6])) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = v6[v21];
      }
      while (v25 == -1);
      unint64_t v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)((char *)v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v28;
    *(_OWORD *)(v10 + 16) = v29;
    *(void *)(v10 + 32) = v30;
    uint64_t result = (uint64_t)sub_10003803C(&v32, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    sub_10006D44C();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v27 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1002C9228(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100010BCC((uint64_t *)&unk_100485B90);
    unint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    unint64_t v2 = _swiftEmptyDictionarySingleton;
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  unint64_t v6 = v2 + 8;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v27) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v28 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v27) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v28 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v27) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v28 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    int v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    sub_1000107A4(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v40);
    *(void *)&long long v39 = v19;
    *((void *)&v39 + 1) = v18;
    v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    *(void *)&v37[0] = v19;
    *((void *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_10003803C(v38, v32);
    long long v33 = v29;
    long long v34 = v30;
    uint64_t v35 = v31;
    sub_10003803C(v32, v36);
    long long v29 = v33;
    long long v30 = v34;
    uint64_t v31 = v35;
    sub_10003803C(v36, v37);
    sub_10003803C(v37, &v33);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v20 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~v6[v21 >> 6]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v21) & ~v6[v21 >> 6])) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = v6[v22];
      }
      while (v26 == -1);
      unint64_t v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)((char *)v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(void *)(v10 + 32) = v31;
    uint64_t result = (uint64_t)sub_10003803C(&v33, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    sub_10006D44C();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v28 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1002C95F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, a1, a2);
}

uint64_t sub_1002C960C()
{
  return swift_unownedRetainStrong();
}

uint64_t sub_1002C961C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + qword_1004858A8;
  swift_beginAccess();
  return sub_1002D74FC(v3, a1);
}

uint64_t sub_1002C9670@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + qword_1004858B0);
  if (v3)
  {
    *(void *)(a1 + 24) = swift_getObjectType();
    *(void *)a1 = v3;
  }
  else
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }

  return swift_unknownObjectRetain();
}

uint64_t sub_1002C96D8(uint64_t a1)
{
  if (!*(void *)(a1 + 24))
  {
    sub_1000380B4(a1, &qword_10047D0D0);
    goto LABEL_5;
  }
  sub_100010BCC(&qword_1004862E0);
  if (!swift_dynamicCast())
  {
LABEL_5:
    uint64_t v2 = 0;
    goto LABEL_6;
  }
  uint64_t v2 = v4;
LABEL_6:
  *(void *)(v1 + qword_1004858B0) = v2;
  return swift_unknownObjectRelease();
}

uint64_t sub_1002C9768@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + qword_100488888;
  uint64_t v4 = type metadata accessor for Logger();
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

unint64_t sub_1002C97DC(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t result = 0x696C616974696E49;
  switch(a3)
  {
    case 1:
      unint64_t result = 0x6574736575716552;
      break;
    case 2:
      unint64_t result = 0x696D7269666E6F43;
      break;
    case 3:
      unint64_t result = 0x73696C6261747345;
      break;
    case 4:
      if (a1 ^ 1 | a2) {
        uint64_t v5 = 0x74616E696D726554;
      }
      else {
        uint64_t v5 = 0x65736E6F70736552;
      }
      if (a1 | a2) {
        unint64_t result = v5;
      }
      else {
        unint64_t result = 0xD000000000000012;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1002C9914@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  v15[1] = a4;
  uint64_t v7 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100480650);
  __chkstk_darwin();
  unint64_t v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[3] = a1;
  v15[4] = a2;
  char v16 = a3;
  v15[2] = _swiftEmptyArrayStorage;
  uint64_t v13 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  _s17InitiatorInstanceC5StateOMa();
  sub_100010BCC(&qword_10047DC10);
  sub_100074578();
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for Mirror.AncestorRepresentation.generated(_:), v7);
  sub_1002D5EA4(a1, a2, a3);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

unint64_t sub_1002C9B08()
{
  return sub_1002C97DC(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

uint64_t sub_1002C9B1C@<X0>(uint64_t a1@<X8>)
{
  return sub_1002C9914(*(void **)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16), a1);
}

uint64_t sub_1002C9B30()
{
  uint64_t v1 = type metadata accessor for DispatchTime();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for P2PTimer();
  variable initialization expression of AWDLPeer.lastUpdated();
  uint64_t v5 = v0 + qword_1004858E0;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v2 + 40))(v5, v4, v1);
  return swift_endAccess();
}

unint64_t sub_1002C9C38()
{
  uint64_t v1 = v0 + qword_1004858A8;
  swift_beginAccess();
  return *(unsigned __int16 *)(v1 + 25) | ((unint64_t)*(unsigned int *)(v1 + 27) << 16);
}

BOOL sub_1002C9C88()
{
  int v1 = *(unsigned __int8 *)(v0 + qword_1004858E8 + 16);
  if ((v1 - 1) < 2) {
    return 1;
  }
  if (v1 == 4) {
    return __PAIR128__((unint64_t)(*(void *)(v0 + qword_1004858E8) != 0) + *(void *)(v0 + qword_1004858E8 + 8) - 1, *(void *)(v0 + qword_1004858E8) - 1) < 2;
  }
  return 0;
}

uint64_t sub_1002C9CDC()
{
  if (*(unsigned char *)(v0 + qword_1004858E8 + 16) == 3) {
    return swift_retain();
  }
  else {
    return 0;
  }
}

uint64_t sub_1002C9D1C(uint64_t a1)
{
  sub_100010BCC(&qword_10047DB90);
  __chkstk_darwin();
  uint64_t v4 = &v12[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  unint64_t v6 = &v12[-v5];
  uint64_t v7 = v1 + qword_1004888A8;
  swift_beginAccess();
  sub_1000136F4(v7, (uint64_t)v6, &qword_10047DB90);
  uint64_t v8 = type metadata accessor for DispatchTime();
  uint64_t v9 = *(void *)(v8 - 8);
  int v10 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8);
  uint64_t result = sub_1000380B4((uint64_t)v6, &qword_10047DB90);
  if (v10 == 1 || *(void *)(v1 + qword_1004888A0) != a1)
  {
    type metadata accessor for P2PTimer();
    variable initialization expression of AWDLPeer.lastUpdated();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v9 + 56))(v4, 0, 1, v8);
    swift_beginAccess();
    sub_10006D1A4((uint64_t)v4, v7, &qword_10047DB90);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_1002C9EE8()
{
  return *(void *)(v0 + qword_1004888A0);
}

uint64_t sub_1002C9EF8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + qword_1004888A8;
  swift_beginAccess();
  return sub_1000136F4(v3, a1, &qword_10047DB90);
}

id sub_1002C9F54()
{
  uint64_t v1 = v0;
  unint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  unint64_t v6 = (char *)&v28 - v5;
  uint64_t v7 = (int *)&v0[qword_100485900];
  swift_beginAccess();
  if (notify_is_valid_token(*v7))
  {
    uint32_t v8 = notify_cancel(*v7);
    *uint64_t v7 = -1;
    if (v8)
    {
      int v9 = v8;
      int v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = swift_slowAlloc();
        os_log_t v29 = v10;
        uint64_t v13 = (uint8_t *)v12;
        uint64_t v30 = swift_slowAlloc();
        v33[0] = v30;
        uint64_t v31 = ObjectType;
        *(_DWORD *)uint64_t v13 = 136315138;
        uint64_t v28 = v13 + 4;
        unint64_t v14 = static WiFiError.notifyErrorMessage(from:)(v9);
        uint64_t v32 = sub_100010680(v14, v15, v33);
        unint64_t ObjectType = v31;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        os_log_t v16 = v29;
        _os_log_impl((void *)&_mh_execute_header, v29, v11, "Failed to cancel monitoring statistic reset events with error: %s", v13, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
    }
  }
  int v17 = (uint64_t *)&v1[qword_1004858E8];
  if (v1[qword_1004858E8 + 16] - 1 >= 3)
  {
    if (!v1[qword_1004858E8 + 16]) {
      goto LABEL_12;
    }
    uint64_t v26 = *v17;
    uint64_t v25 = v17[1];
    if (!(v26 | v25)) {
      goto LABEL_12;
    }
    if (v26 ^ 1 | v25) {
      goto LABEL_13;
    }
  }
  uint64_t v18 = ObjectType;
  uint64_t v19 = *(void *)&v1[qword_1004858A0];
  swift_unownedRetainStrong();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v19 + *(void *)(*(void *)v19 + 96), AssociatedTypeWitness);
  swift_release();
  uint64_t v20 = &v1[qword_1004858A8];
  swift_beginAccess();
  uint64_t v21 = *(unsigned int *)(v20 + 3);
  uint64_t v22 = *(unsigned __int16 *)(v20 + 1);
  uint64_t v23 = *v20;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 224))(v23, v22 | (v21 << 16), AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, AssociatedTypeWitness);
  unint64_t ObjectType = v18;
LABEL_12:
  sub_1002CA4C4(-1, 0x64657361656C6572, 0xE800000000000000);
LABEL_13:
  sub_1002CA344(v1);
  v34.receiver = v1;
  v34.super_class = ObjectType;
  return [super dealloc];
}

void sub_1002CA344(void *a1)
{
  id v1 = a1;
  oslog = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    id v5 = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v1;

    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "Destroyed %@", v3, 0xCu);
    sub_100010BCC(&qword_10047CC30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

uint64_t sub_1002CA4C4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  id v8 = v3;
  swift_bridgeObjectRetain_n();
  int v9 = (char *)v8;
  int v10 = Logger.logObject.getter();
  if (a1 == 2)
  {
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      unint64_t v64 = (void *)swift_slowAlloc();
      *(void *)&v75[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 138412546;
      logb = v10;
      uint64_t v13 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v64 = v4;

      *(_WORD *)(v12 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)&long long v73 = sub_100010680(a2, a3, (uint64_t *)v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, logb, v11, "%@ was terminated because %s", (uint8_t *)v12, 0x16u);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      goto LABEL_8;
    }
    goto LABEL_6;
  }
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v10, v14))
  {
LABEL_6:
    swift_bridgeObjectRelease_n();

    goto LABEL_7;
  }
  uint64_t v15 = swift_slowAlloc();
  unint64_t v64 = (void *)swift_slowAlloc();
  *(void *)&v75[0] = swift_slowAlloc();
  *(_DWORD *)uint64_t v15 = 138412546;
  uint64_t v65 = a2;
  os_log_t v16 = v9;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  void *v64 = v4;

  *(_WORD *)(v15 + 12) = 2080;
  swift_bridgeObjectRetain();
  *(void *)&long long v73 = sub_100010680(v65, a3, (uint64_t *)v75);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  _os_log_impl((void *)&_mh_execute_header, v10, v14, "%@ was terminated because %s", (uint8_t *)v15, 0x16u);
  sub_100010BCC(&qword_10047CC30);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();
LABEL_7:

LABEL_8:
  if ((v9[qword_100488890 + 6] & 1) == 0 && v9[qword_1004858F0] == 1)
  {
    unint64_t v17 = *(unsigned int *)&v9[qword_100488890] | ((unint64_t)*(unsigned __int16 *)&v9[qword_100488890 + 4] << 32);
    uint64_t v18 = sub_1002CB6FC();
    uint64_t v19 = (uint64_t *)&v9[qword_1004858D8];
    unint64_t v20 = *(void *)&v9[qword_1004858D8 + 8];
    os_log_t log = (os_log_t)&v9[qword_1004858D8];
    if (v20 >> 60 == 15)
    {
      unint64_t v21 = v17 & 0xFFFFFFFFFFFFLL;
      uint64_t v22 = WiFiAddress.ipv6LinkLocalAddress.getter(v21);
      uint64_t v24 = v23;
      uint64_t v26 = v25;
      uint64_t v28 = v27;
    }
    else
    {
      uint64_t v29 = *v19;
      sub_100013D44(*v19, v20);
      uint64_t v22 = InterfaceIdentifier.ipv6Address.getter(v29, v20);
      uint64_t v24 = v30;
      uint64_t v26 = v31;
      uint64_t v28 = v32;
      sub_10000C95C(v29, v20);
      unint64_t v21 = v17 & 0xFFFFFFFFFFFFLL;
    }
    long long v33 = (void (*)(long long *, void))(*(uint64_t (**)(long long *))(*v18 + 392))(v75);
    uint64_t v34 = type metadata accessor for WiFiInterface.NeighborDiscoveryTable();
    unint64_t v69 = v21;
    uint64_t v35 = v21;
    uint64_t v36 = v34;
    WiFiInterface.NeighborDiscoveryTable.postPeerAbsence(macAddress:ipv6Address:)(v35, v22, v24, v26, v28, v34);
    v33(v75, 0);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v37 = sub_1002CB6FC();
    uint64_t v38 = *(void *)&v9[qword_1004858A0];
    swift_unownedRetainStrong();
    long long v39 = *(void **)(v38 + *(void *)(*(void *)v38 + 448));
    swift_retain();
    swift_release();
    swift_release();
    if (v39)
    {
      swift_release();
      if (v37 == v39)
      {
        swift_unownedRetainStrong();
        unint64_t isa = (unint64_t)log[1].isa;
        if (isa >> 60 == 15)
        {
          uint64_t v41 = v69;
          os_log_t loga = (os_log_t)WiFiAddress.ipv6LinkLocalAddress.getter(v69);
          uint64_t v43 = v42;
          uint64_t v45 = v44;
          uint64_t v47 = v46;
        }
        else
        {
          uint64_t v56 = (uint64_t)log->isa;
          sub_100013D44((uint64_t)log->isa, (unint64_t)log[1].isa);
          os_log_t loga = (os_log_t)InterfaceIdentifier.ipv6Address.getter(v56, isa);
          uint64_t v43 = v57;
          uint64_t v45 = v58;
          uint64_t v47 = v59;
          sub_10000C95C(v56, isa);
          uint64_t v41 = v69;
        }
        swift_beginAccess();
        WiFiInterface.NeighborDiscoveryTable.postPeerAbsence(macAddress:ipv6Address:)(v41, (uint64_t)loga, v43, v45, v47, v36);
        swift_endAccess();
        swift_release();
        swift_bridgeObjectRelease();
      }
    }
  }
  sub_1002D7498((void *)2, 0, 4);
  uint64_t v48 = qword_1004858B0;
  char v49 = *(void **)&v9[qword_1004858B0];
  if (v49) {
    [v49 datapathTerminatedWithReason:a1];
  }
  uint64_t v50 = &v9[qword_1004858B8];
  swift_beginAccess();
  uint64_t v51 = *(void *)v50;
  if (*(void *)v50 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v52 = result;
    if (!result) {
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v52 = *(void *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain_n();
    if (!v52) {
      goto LABEL_30;
    }
  }
  if (v52 < 1)
  {
    __break(1u);
    return result;
  }
  for (uint64_t i = 0; i != v52; ++i)
  {
    if ((v51 & 0xC000000000000001) != 0)
    {
      uint64_t v55 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v55 = *(void **)(v51 + 8 * i + 32);
      swift_unknownObjectRetain();
    }
    [v55 datapathTerminatedWithReason:a1, v64];
    swift_unknownObjectRelease();
  }
LABEL_30:
  swift_bridgeObjectRelease_n();
  *(void *)&v9[v48] = 0;
  swift_unknownObjectRelease();
  *(void *)uint64_t v50 = _swiftEmptyArrayStorage;
  uint64_t result = swift_bridgeObjectRelease();
  if (a1 != -1)
  {
    swift_unownedRetainStrong();
    sub_100354870();
    swift_release();
    sub_1002DA2D8((uint64_t)v9);
    uint64_t result = swift_release();
  }
  uint64_t v60 = qword_1004858F8;
  if (v9[qword_1004858F8] == 1)
  {
    unint64_t v61 = &v9[qword_1004858A8];
    swift_beginAccess();
    sub_1000136F4((uint64_t)(v61 + 104), (uint64_t)&v73, (uint64_t *)&unk_100485B50);
    if (v74 == 1)
    {
      return sub_1000380B4((uint64_t)&v73, (uint64_t *)&unk_100485B50);
    }
    else
    {
      sub_10006EF50(&v73, (uint64_t)v75);
      sub_1001B7B7C(v75, (uint64_t)&v73);
      if (v74)
      {
        sub_10006EF50(&v73, (uint64_t)v70);
        uint64_t v62 = v71;
        uint64_t v63 = v72;
        sub_1000369C4(v70, v71);
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v63 + 16))(*(unsigned __int16 *)(v61 + 25) | ((unint64_t)*(unsigned int *)(v61 + 27) << 16), v62, v63);
        sub_1001B7BFC((uint64_t)v75);
        uint64_t result = sub_100010754((uint64_t)v70);
      }
      else
      {
        sub_1002D0718();
        uint64_t result = sub_1001B7BFC((uint64_t)v75);
      }
      v9[v60] = 0;
    }
  }
  return result;
}

id sub_1002CAFA4(void *a1)
{
  id v1 = a1;
  return sub_1002C9F54();
}

uint64_t sub_1002CAFCC(uint64_t a1)
{
  swift_unownedRelease();
  sub_1002D7558(a1 + qword_1004858A8);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v2 = a1 + qword_100488888;
  uint64_t v3 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  sub_1001331AC(*(void *)(a1 + qword_1004858D0), *(void *)(a1 + qword_1004858D0 + 8), *(void *)(a1 + qword_1004858D0 + 16));
  sub_10000C95C(*(void *)(a1 + qword_1004858D8), *(void *)(a1 + qword_1004858D8 + 8));
  swift_unknownObjectWeakDestroy();
  uint64_t v4 = a1 + qword_1004858E0;
  uint64_t v5 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  sub_1002D5EFC(*(void **)(a1 + qword_1004858E8), *(void *)(a1 + qword_1004858E8 + 8), *(unsigned char *)(a1 + qword_1004858E8 + 16));
  sub_1000380B4(a1 + qword_1004888A8, &qword_10047DB90);
  return sub_1000380B4(a1 + qword_100485910, (uint64_t *)&unk_100485B60);
}

void sub_1002CB148()
{
  uint64_t v2 = v0;
  uint64_t AssociatedTypeWitness = (void *)swift_getAssociatedTypeWitness();
  uint64_t v32 = *(AssociatedTypeWitness - 1);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v28 - v3;
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  id v8 = (uint64_t *)((char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  int v9 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  int v10 = (void *)*v9;
  *id v8 = *v9;
  (*(void (**)(uint64_t *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v8, v5);
  if (v10)
  {
    if (!v2[qword_1004858E8 + 16] && (v2[qword_1004858E8] & 1) != 0)
    {
      uint64_t v12 = *(void *)&v2[qword_1004858A0];
      swift_unownedRetainStrong();
      sub_100354870();
      swift_release();
      uint64_t v13 = (uint64_t)&v2[qword_1004858A8];
      swift_beginAccess();
      char v14 = sub_1002DA158();
      swift_release();
      if ((v14 & 1) == 0)
      {
        swift_unownedRetainStrong();
        sub_1003546AC();
        swift_release();
        if (!v1)
        {
          uint64_t v15 = sub_1002CB6FC();
          (*(void (**)(uint64_t))(*v15 + 192))(1);
          swift_release();
          swift_unownedRetainStrong();
          os_log_t v16 = AssociatedTypeWitness;
          ((void (*)(char *, uint64_t, void *))v32[2].isa)(v4, v12 + *(void *)(*(void *)v12 + 96), AssociatedTypeWitness);
          swift_release();
          sub_1002D74FC(v13, (uint64_t)v31);
          uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
          (*(void (**)(void *, void *, uint64_t))(AssociatedConformanceWitness + 200))(v31, v16, AssociatedConformanceWitness);
          uint64_t v29 = (unsigned __int8 *)v13;
          sub_1002D7558((uint64_t)v31);
          ((void (*)(char *, void *))v32[1].isa)(v4, v16);
          sub_1002D7498(0, 0, 1);
          uint64_t v18 = v2;
          uint64_t v19 = Logger.logObject.getter();
          os_log_type_t v20 = static os_log_type_t.default.getter();
          uint64_t v32 = v19;
          if (os_log_type_enabled(v19, v20))
          {
            unint64_t v21 = (uint8_t *)swift_slowAlloc();
            uint64_t AssociatedTypeWitness = (void *)swift_slowAlloc();
            *(_DWORD *)unint64_t v21 = 138412290;
            v31[0] = v18;
            uint64_t v22 = v18;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *uint64_t AssociatedTypeWitness = v2;

            _os_log_impl((void *)&_mh_execute_header, v32, v20, "%@ was started", v21, 0xCu);
            sub_100010BCC(&qword_10047CC30);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
          }
          uint64_t v23 = *(void **)&v18[qword_1004858B0];
          if (v23)
          {
            uint64_t v24 = *v29;
            unint64_t v25 = *(unsigned __int16 *)(v29 + 1) | ((unint64_t)*(unsigned int *)(v29 + 3) << 16);
            swift_unknownObjectRetain();
            id v26 = WiFiAddress.apiAddress.getter(v25);
            sub_1002CB6FC();
            uint64_t v27 = WiFiInterface.interfaceIndex.getter();
            swift_release();
            [v23 datapathStartedWithInstanceID:v24 initiatorDataAddress:v26 localInterfaceIndex:v27];

            swift_unknownObjectRelease();
          }
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void *sub_1002CB6FC()
{
  uint64_t v1 = v0 + qword_1004858A8;
  swift_beginAccess();
  sub_1000136F4(v1 + 104, (uint64_t)v7, (uint64_t *)&unk_100485B50);
  if (v8)
  {
    if (v8 == 1) {
      sub_1000380B4((uint64_t)v7, (uint64_t *)&unk_100485B50);
    }
    else {
      sub_1001B7BFC((uint64_t)v7);
    }
    int v4 = *(unsigned __int8 *)(v1 + 32);
    uint64_t v2 = *(void **)(v0 + qword_1004858A0);
    swift_unownedRetainStrong();
    if (v4 != 2) {
      return v2;
    }
    uint64_t v3 = 56;
  }
  else
  {
    sub_1001B7BFC((uint64_t)v7);
    uint64_t v2 = *(void **)(v0 + qword_1004858A0);
    swift_unownedRetainStrong();
    uint64_t v3 = 57;
  }
  uint64_t v5 = *(void *)((char *)v2 + *(void *)(*v2 + 8 * v3));
  swift_retain();
  swift_release();
  if (!v5)
  {
    swift_unownedRetainStrong();
    return v2;
  }
  return (void *)v5;
}

void sub_1002CB820()
{
  uint64_t v1 = v0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v19[-1] - v4;
  uint64_t v6 = (uint64_t *)&v0[qword_1004858E8];
  if (v0[qword_1004858E8 + 16] == 1)
  {
    uint64_t v7 = *v6;
    if (*v6 > 2)
    {
      uint64_t v12 = v0;
      uint64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = (uint8_t *)swift_slowAlloc();
        os_log_t v16 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v15 = 138412290;
        v19[0] = v12;
        unint64_t v17 = v12;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *os_log_t v16 = v1;

        _os_log_impl((void *)&_mh_execute_header, v13, v14, "%@ is being terminated because request retries exceeded", v15, 0xCu);
        sub_100010BCC(&qword_10047CC30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      sub_1002CBCAC();
    }
    else
    {
      uint64_t v8 = *(void *)&v0[qword_1004858A0];
      swift_unownedRetainStrong();
      sub_1003546AC();
      swift_release();
      int v9 = sub_1002CB6FC();
      (*(void (**)(uint64_t))(*v9 + 192))(1);
      swift_release();
      swift_unownedRetainStrong();
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v8 + *(void *)(*(void *)v8 + 96), AssociatedTypeWitness);
      swift_release();
      uint64_t v10 = (uint64_t)&v0[qword_1004858A8];
      swift_beginAccess();
      sub_1002D74FC(v10, (uint64_t)v19);
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      (*(void (**)(void *, uint64_t, uint64_t))(AssociatedConformanceWitness + 200))(v19, AssociatedTypeWitness, AssociatedConformanceWitness);
      sub_1002D7558((uint64_t)v19);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, AssociatedTypeWitness);
      sub_1002D7498((void *)(v7 + 1), 0, 1);
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1002CBCAC()
{
  uint64_t v1 = v0;
  uint64_t v2 = swift_isaMask & *v0;
  uint64_t v40 = *(void *)(v2 + 0x58);
  uint64_t v39 = *(void *)(v2 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v36 - v5;
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (uint64_t *)((char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v11 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v12 = (void *)*v11;
  *uint64_t v10 = *v11;
  (*(void (**)(uint64_t *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  id v13 = v12;
  char v14 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v8 + 8))(v10, v7);
  if (v14)
  {
    uint64_t v15 = (uint64_t *)&v1[qword_1004858E8];
    if (v1[qword_1004858E8 + 16] - 1 < 3) {
      goto LABEL_3;
    }
    if (!v1[qword_1004858E8 + 16] || (v23 = *v15, uint64_t v22 = v15[1], !(v23 | v22)))
    {
      sub_1002CA4C4(2, 0x7165722072657375, 0xEC00000074736575);
      return;
    }
    if (v23 ^ 1 | v22)
    {
      uint64_t v24 = v1;
      unint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = (uint8_t *)swift_slowAlloc();
        uint64_t v28 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v27 = 138412290;
        uint64_t v41 = v24;
        uint64_t v29 = v24;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v28 = v1;

        _os_log_impl((void *)&_mh_execute_header, v25, v26, "%@ was already in process of termination, ignoring request to terminate", v27, 0xCu);
        sub_100010BCC(&qword_10047CC30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
    }
    else
    {
LABEL_3:
      os_log_t v16 = v1;
      unint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = swift_slowAlloc();
        uint64_t v38 = AssociatedTypeWitness;
        os_log_type_t v20 = (uint8_t *)v19;
        uint64_t v36 = (void *)swift_slowAlloc();
        uint64_t v37 = v6;
        *(_DWORD *)os_log_type_t v20 = 138412290;
        uint64_t v41 = v16;
        unint64_t v21 = v16;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v36 = v1;

        _os_log_impl((void *)&_mh_execute_header, v17, v18, "%@ will attempt to stop", v20, 0xCu);
        sub_100010BCC(&qword_10047CC30);
        swift_arrayDestroy();
        uint64_t v6 = v37;
        swift_slowDealloc();
        uint64_t AssociatedTypeWitness = v38;
        swift_slowDealloc();
      }
      else
      {
      }
      sub_1002D7498((void *)2, 0, 4);
      uint64_t v30 = *(void *)&v16[qword_1004858A0];
      swift_unownedRetainStrong();
      sub_1003546AC();
      swift_release();
      swift_unownedRetainStrong();
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v30 + *(void *)(*(void *)v30 + 96), AssociatedTypeWitness);
      swift_release();
      uint64_t v31 = &v16[qword_1004858A8];
      swift_beginAccess();
      uint64_t v32 = *(unsigned int *)(v31 + 3);
      uint64_t v33 = *(unsigned __int16 *)(v31 + 1);
      uint64_t v34 = *v31;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 224))(v34, v33 | (v32 << 16), AssociatedTypeWitness, AssociatedConformanceWitness);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, AssociatedTypeWitness);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1002CC2FC()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = __chkstk_darwin();
  uint64_t v5 = (char *)&v11 - v4;
  uint64_t v6 = v0 + qword_1004858E8;
  if (*(unsigned char *)(v0 + qword_1004858E8 + 16) == 2)
  {
    uint64_t v7 = *(void *)(v6 + 8);
    if (v7 > 2)
    {
      return sub_1002CA4C4(1, 0xD00000000000001DLL, 0x80000001003DFF70);
    }
    else
    {
      uint64_t v8 = *(void **)v6;
      uint64_t v9 = *(void *)(v0 + qword_1004858A0);
      swift_unownedRetainStrong();
      sub_1003546AC();
      swift_release();
      swift_unownedRetainStrong();
      (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, v9 + *(void *)(*(void *)v9 + 96), AssociatedTypeWitness);
      swift_release();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      (*(void (**)(void *, uint64_t, uint64_t))(AssociatedConformanceWitness + 272))(v8, AssociatedTypeWitness, AssociatedConformanceWitness);
      (*(void (**)(char *, uint64_t))(v2 + 8))(v5, AssociatedTypeWitness);
      return sub_1002D7498(v8, v7 + 1, 2);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002CC610(uint64_t a1)
{
  uint64_t v2 = v1;
  v363 = (char *)a1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = swift_isaMask & (uint64_t)v1->isa;
  sub_100010BCC(&qword_100485280);
  __chkstk_darwin();
  uint64_t v353 = (uint64_t)&v348 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v357 = (uint64_t)&v348 - v5;
  os_log_t v359 = *(os_log_t *)(v3 + 88);
  v364 = v2;
  v358 = *(char **)(v3 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  os_log_t v355 = *(os_log_t *)(AssociatedTypeWitness - 8);
  uint64_t v356 = AssociatedTypeWitness;
  __chkstk_darwin();
  v354 = (char *)&v348 - v7;
  uint64_t v8 = type metadata accessor for DispatchTimeInterval();
  uint64_t v351 = *(void *)(v8 - 8);
  uint64_t v352 = v8;
  __chkstk_darwin();
  v350 = (os_log_t *)((char *)&v348 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for DriverEvent(0);
  __chkstk_darwin();
  uint64_t v361 = (uint64_t)&v348 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v362 = (uint64_t)&v348 - v12;
  __chkstk_darwin();
  char v14 = (char *)&v348 - v13;
  __chkstk_darwin();
  unint64_t v16 = (unint64_t)&v348 - v15;
  __chkstk_darwin();
  os_log_type_t v18 = (char *)&v348 - v17;
  __chkstk_darwin();
  os_log_type_t v20 = (char *)&v348 - v19;
  uint64_t v21 = type metadata accessor for DispatchPredicate();
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin();
  uint64_t v24 = (uint64_t *)((char *)&v348 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v349 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  unint64_t v25 = (void *)*v349;
  *uint64_t v24 = *v349;
  (*(void (**)(uint64_t *, void, uint64_t))(v22 + 104))(v24, enum case for DispatchPredicate.onQueue(_:), v21);
  id v26 = v25;
  LOBYTE(v25) = _dispatchPreconditionTest(_:)();
  uint64_t v28 = *(void (**)(uint64_t *, uint64_t))(v22 + 8);
  p_type = (char **)(v22 + 8);
  v28(v24, v21);
  if ((v25 & 1) == 0)
  {
    __break(1u);
    goto LABEL_173;
  }
  uint64_t v29 = (uint64_t)v363;
  sub_100004130((uint64_t)v363, (uint64_t)v20);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v31 = (uint64_t)v20;
  if (EnumCaseMultiPayload == 4)
  {
    sub_100004130((uint64_t)v20, v16);
    if (*(unsigned char *)v16 == 1)
    {
      uint64_t v47 = (Class *)((char *)&v364->isa + qword_1004858E8);
      if (*((unsigned char *)&v364[2].isa + qword_1004858E8) == 4 && !v47[1] && *v47 == 2)
      {
        uint64_t v48 = 0xD00000000000002ALL;
        unint64_t v49 = 0x80000001003DF250;
        uint64_t v50 = 2;
LABEL_18:
        sub_1002CA4C4(v50, v48, v49);
      }
      else
      {
        os_log_t v51 = (os_log_t)ObjectType;
        uint64_t WitnessTable = swift_getWitnessTable();
        if (sub_1003019CC((uint64_t)v51, WitnessTable))
        {
          uint64_t v53 = v364;
          sub_1002D7498(0, 0, 4);
          uint64_t v54 = (char *)v53 + qword_1004858A8;
          swift_beginAccess();
          sub_1000136F4((uint64_t)(v54 + 104), (uint64_t)v377, (uint64_t *)&unk_100485B50);
          if (v378)
          {
            if (v378 == 1) {
              sub_1000380B4((uint64_t)v377, (uint64_t *)&unk_100485B50);
            }
            else {
              sub_1001B7BFC((uint64_t)v377);
            }
          }
          else
          {
            sub_1001B7BFC((uint64_t)v377);
            uint64_t v145 = qword_1004858F8;
            if (*((unsigned char *)&v364->isa + qword_1004858F8) == 1)
            {
              v146 = v364;
              sub_1002D0718();
              *((unsigned char *)&v146->isa + v145) = 0;
            }
          }
        }
      }
      return sub_1002D7614(v31, type metadata accessor for DriverEvent);
    }
LABEL_24:
    uint64_t v55 = v364;
    sub_100004130(v29, (uint64_t)v14);
    uint64_t v56 = v362;
    sub_100004130((uint64_t)v14, v362);
    uint64_t v57 = v361;
    sub_1002D75AC((uint64_t)v14, v361, type metadata accessor for DriverEvent);
    uint64_t v58 = v55;
    uint64_t v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, v60))
    {
      uint64_t v61 = swift_slowAlloc();
      uint64_t v62 = (void *)swift_slowAlloc();
      v363 = (char *)swift_slowAlloc();
      v377[0] = (uint64_t)v363;
      *(_DWORD *)uint64_t v61 = 138412546;
      v376[0] = v58;
      uint64_t v63 = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v62 = v364;

      *(_WORD *)(v61 + 12) = 2080;
      uint64_t v64 = v362;
      uint64_t v65 = DriverEvent.description.getter();
      v376[0] = sub_100010680(v65, v66, v377);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1002D7614(v361, type metadata accessor for DriverEvent);
      sub_1002D7614(v64, type metadata accessor for DriverEvent);
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "%@ received an unexpected %s", (uint8_t *)v61, 0x16u);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      swift_slowDealloc();
LABEL_26:
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_1002D7614(v57, type metadata accessor for DriverEvent);
      sub_1002D7614(v56, type metadata accessor for DriverEvent);
    }
    return sub_1002D7614(v31, type metadata accessor for DriverEvent);
  }
  if (EnumCaseMultiPayload) {
    goto LABEL_24;
  }
  sub_100004130((uint64_t)v20, (uint64_t)v18);
  sub_10006E544((uint64_t)v18, (uint64_t)v376);
  sub_10006E544((uint64_t)v376, (uint64_t)v377);
  switch(sub_1001343E0((uint64_t)v377))
  {
    case 4u:
      v363 = v20;
      uint64_t v32 = NANBitmap.Channel.operatingClass.getter(v377);
      int v33 = *(unsigned __int8 *)(v32 + 7);
      int v34 = *(unsigned __int8 *)(v32 + 8);
      uint64_t v35 = (char *)v364 + qword_1004858E8;
      int v36 = *((unsigned __int8 *)&v364[2].isa + qword_1004858E8);
      if (v36 != 1)
      {
        if (v36 == 2 && v33 == 6)
        {
          if (*(unsigned char *)(v32 + 8))
          {
            uint64_t v37 = *((void *)v35 + 1);
            uint64_t v38 = v364;
            uint64_t v39 = v364;
            uint64_t v40 = Logger.logObject.getter();
            int v41 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v40, (os_log_type_t)v41))
            {
              LODWORD(v359) = v41;
              uint64_t v361 = v37;
              uint64_t v362 = (uint64_t)v40;
              uint64_t v42 = swift_slowAlloc();
              uint64_t v43 = (void *)swift_slowAlloc();
              uint64_t ObjectType = swift_slowAlloc();
              *(void *)&long long v367 = ObjectType;
              *(_DWORD *)uint64_t v42 = 138412802;
              *(void *)&long long v379 = v39;
              uint64_t v44 = v39;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              void *v43 = v38;

              *(_WORD *)(v42 + 12) = 2080;
              if (v34 == 1)
              {
                uint64_t v46 = 0x756F2064656D6974;
                unint64_t v45 = 0xE900000000000074;
              }
              else if (v34 == 2)
              {
                unint64_t v45 = 0xE700000000000000;
                uint64_t v46 = 0x646570706F7264;
              }
              else
              {
                unint64_t v45 = 0x80000001003DC150;
                uint64_t v46 = 0xD000000000000010;
              }
              os_log_type_t v345 = v359;
              *(void *)&long long v379 = sub_100010680(v46, v45, (uint64_t *)&v367);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              *(_WORD *)(v42 + 22) = 2048;
              *(void *)&long long v379 = v361;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              os_log_type_t v346 = v345;
              id v347 = (id)v362;
              _os_log_impl((void *)&_mh_execute_header, (os_log_t)v362, v346, "%@ failed to send datapath confirmation, with status %s, for retry #%ld", (uint8_t *)v42, 0x20u);
              sub_100010BCC(&qword_10047CC30);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {
            }
            uint64_t v31 = (uint64_t)v363;
            sub_1002CC2FC();
            return sub_1002D7614(v31, type metadata accessor for DriverEvent);
          }
LABEL_101:
          sub_1002D7498((void *)1, 0, 4);
          uint64_t v31 = (uint64_t)v363;
          return sub_1002D7614(v31, type metadata accessor for DriverEvent);
        }
        goto LABEL_62;
      }
      if (v33 != 4)
      {
LABEL_62:
        v162 = v364;
        uint64_t v362 = Logger.logObject.getter();
        if (v34)
        {
          int v163 = static os_log_type_t.error.getter();
          if (os_log_type_enabled((os_log_t)v362, (os_log_type_t)v163))
          {
            LODWORD(ObjectType) = v163;
            uint64_t v164 = swift_slowAlloc();
            v165 = swift_slowAlloc();
            uint64_t v361 = swift_slowAlloc();
            *(void *)&long long v367 = v361;
            *(_DWORD *)uint64_t v164 = 138413058;
            *(void *)&long long v379 = v162;
            v166 = v162;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            uint64_t v357 = (uint64_t)v165;
            v165->Class isa = (Class)v364;

            *(_WORD *)(v164 + 12) = 2080;
            uint64_t v167 = NANManagementFrameType.description.getter(v33);
            *(void *)&long long v379 = sub_100010680(v167, v168, (uint64_t *)&v367);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v164 + 22) = 2080;
            unint64_t v169 = 0xE700000000000000;
            unint64_t v170 = 0x646570706F7264;
            if (v34 != 2)
            {
              unint64_t v170 = 0xD000000000000010;
              unint64_t v169 = 0x80000001003DC150;
            }
            if (v34 == 1) {
              uint64_t v171 = 0x756F2064656D6974;
            }
            else {
              uint64_t v171 = v170;
            }
            if (v34 == 1) {
              unint64_t v172 = 0xE900000000000074;
            }
            else {
              unint64_t v172 = v169;
            }
            *(void *)&long long v379 = sub_100010680(v171, v172, (uint64_t *)&v367);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v164 + 32) = 2080;
            v173 = *(void **)v35;
            uint64_t v174 = *((void *)v35 + 1);
            char v175 = v35[16];
            sub_1002D5EA4(v173, v174, v175);

            unint64_t v176 = sub_1002C97DC((uint64_t)v173, v174, v175);
            unint64_t v178 = v177;
            sub_1002D5EFC(v173, v174, v175);
            *(void *)&long long v379 = sub_100010680(v176, v178, (uint64_t *)&v367);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            id v179 = (id)v362;
            _os_log_impl((void *)&_mh_execute_header, (os_log_t)v362, (os_log_type_t)ObjectType, "%@ failed to transmit frame %s with status %s in %s", (uint8_t *)v164, 0x2Au);
            sub_100010BCC(&qword_10047CC30);
            swift_arrayDestroy();
            swift_slowDealloc();
            goto LABEL_80;
          }
        }
        else
        {
          os_log_type_t v192 = static os_log_type_t.default.getter();
          int v193 = v192;
          if (os_log_type_enabled((os_log_t)v362, v192))
          {
            uint64_t v194 = swift_slowAlloc();
            v195 = swift_slowAlloc();
            uint64_t ObjectType = (uint64_t)v195;
            uint64_t v361 = swift_slowAlloc();
            *(void *)&long long v367 = v361;
            *(_DWORD *)uint64_t v194 = 138412802;
            *(void *)&long long v379 = v162;
            v196 = v162;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            v195->Class isa = (Class)v364;

            LODWORD(v364) = v193;
            *(_WORD *)(v194 + 12) = 2080;
            uint64_t v197 = NANManagementFrameType.description.getter(v33);
            *(void *)&long long v379 = sub_100010680(v197, v198, (uint64_t *)&v367);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v194 + 22) = 2080;
            v199 = *(void **)v35;
            uint64_t v200 = *((void *)v35 + 1);
            char v201 = v35[16];
            sub_1002D5EA4(v199, v200, v201);

            unint64_t v202 = sub_1002C97DC((uint64_t)v199, v200, v201);
            unint64_t v204 = v203;
            sub_1002D5EFC(v199, v200, v201);
            *(void *)&long long v379 = sub_100010680(v202, v204, (uint64_t *)&v367);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            id v179 = (id)v362;
            _os_log_impl((void *)&_mh_execute_header, (os_log_t)v362, (os_log_type_t)v364, "%@ successfully transmitted frame %s in %s", (uint8_t *)v194, 0x20u);
            sub_100010BCC(&qword_10047CC30);
            swift_arrayDestroy();
            swift_slowDealloc();
LABEL_80:
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t v31 = (uint64_t)v363;
            return sub_1002D7614(v31, type metadata accessor for DriverEvent);
          }
        }

LABEL_166:
        uint64_t v31 = (uint64_t)v363;
        return sub_1002D7614(v31, type metadata accessor for DriverEvent);
      }
      if (!*(unsigned char *)(v32 + 8)) {
        goto LABEL_101;
      }
      uint64_t v147 = *(void *)v35;
      uint64_t v148 = v364;
      long long v149 = v364;
      unint64_t v150 = Logger.logObject.getter();
      os_log_type_t v151 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v150, v151))
      {
        uint64_t v357 = (uint64_t)v150;
        uint64_t v361 = v147;
        uint64_t v152 = swift_slowAlloc();
        uint64_t v153 = (void *)swift_slowAlloc();
        uint64_t ObjectType = swift_slowAlloc();
        *(void *)&long long v367 = ObjectType;
        *(_DWORD *)uint64_t v152 = 138412802;
        *(void *)&long long v379 = v149;
        uint64_t v362 = (uint64_t)v149;
        uint64_t v154 = v149;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v153 = v148;

        *(_WORD *)(v152 + 12) = 2080;
        unint64_t v155 = 0xE700000000000000;
        unint64_t v156 = 0x646570706F7264;
        if (v34 != 2)
        {
          unint64_t v156 = 0xD000000000000010;
          unint64_t v155 = 0x80000001003DC150;
        }
        if (v34 == 1) {
          uint64_t v157 = 0x756F2064656D6974;
        }
        else {
          uint64_t v157 = v156;
        }
        if (v34 == 1) {
          unint64_t v158 = 0xE900000000000074;
        }
        else {
          unint64_t v158 = v155;
        }
        *(void *)&long long v379 = sub_100010680(v157, v158, (uint64_t *)&v367);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v152 + 22) = 2048;
        uint64_t v159 = v361;
        *(void *)&long long v379 = v361;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        os_log_t v160 = (os_log_t)v357;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v357, v151, "%@ failed to send datapath request, with status %s, for retry #%ld", (uint8_t *)v152, 0x20u);
        sub_100010BCC(&qword_10047CC30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v147 = v159;
        swift_slowDealloc();

        uint64_t v161 = (uint64_t)v363;
      }
      else
      {

        uint64_t v161 = (uint64_t)v363;
      }
      v284 = (void **)v349;
      type metadata accessor for P2PTimer();
      uint64_t v285 = (uint64_t)v350;
      void *v350 = v147;
      uint64_t v287 = v351;
      uint64_t v286 = v352;
      (*(void (**)(uint64_t, void, uint64_t))(v351 + 104))(v285, enum case for DispatchTimeInterval.seconds(_:), v352);
      v288 = *v284;
      uint64_t v289 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v290 = (void *)swift_allocObject();
      os_log_t v291 = v359;
      v290[2] = v358;
      v290[3] = v291;
      v290[4] = v289;
      id v292 = v288;
      swift_retain();
      static P2PTimer.async(after:on:execute:)(v285, v292, (uint64_t)sub_1002D7790, (uint64_t)v290);

      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v287 + 8))(v285, v286);
      swift_release();
      uint64_t v31 = v161;
      return sub_1002D7614(v31, type metadata accessor for DriverEvent);
    case 6u:
      v363 = v20;
      uint64_t v90 = NANBitmap.Channel.operatingClass.getter(v377);
      uint64_t v361 = *(unsigned __int8 *)(v90 + 8);
      uint64_t v91 = *(unsigned __int8 *)(v90 + 9);
      uint64_t v92 = *(unsigned __int8 *)(v90 + 10);
      uint64_t v93 = *(unsigned __int8 *)(v90 + 11);
      os_log_t v359 = (os_log_t)*(unsigned __int8 *)(v90 + 12);
      uint64_t ObjectType = *(unsigned __int8 *)(v90 + 13);
      uint64_t v94 = *(void *)(v90 + 24);
      sub_10006E544((uint64_t)v376, (uint64_t)&v367);
      NANBitmap.Channel.operatingClass.getter(&v367);
      swift_bridgeObjectRetain();
      unint64_t v95 = (long long *)v357;
      uint64_t v362 = v94;
      Array<A>.retrieve(attribute:)(41, v94, v357);
      sub_1001344F4((uint64_t)v376, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
      uint64_t v96 = type metadata accessor for NANAttribute(0);
      uint64_t v97 = *(unsigned int (**)(long long *, uint64_t, uint64_t))(*(void *)(v96 - 8) + 48);
      if (v97(v95, 1, v96) == 1)
      {
        sub_1000380B4((uint64_t)v95, &qword_100485280);
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 36)
        {
          long long v137 = v95[1];
          long long v379 = *v95;
          long long v380 = v137;
          long long v138 = v95[3];
          v381[0] = v95[2];
          v381[1] = v138;
          char v139 = NANAttribute.Datapath.status.getter();
          if (v139 == 3)
          {
            v358 = 0;
            uint64_t v140 = 0;
          }
          else
          {
            uint64_t v370 = 0;
            unint64_t v371 = 0xE000000000000000;
            if (v139)
            {
              if (v139 == 1) {
                uint64_t v250 = 0x6465747065636361;
              }
              else {
                uint64_t v250 = 0x64657463656A6572;
              }
              unint64_t v251 = 0xE800000000000000;
            }
            else
            {
              unint64_t v251 = 0xE900000000000064;
              uint64_t v250 = 0x65756E69746E6F63;
            }
            unint64_t v293 = v251;
            String.append(_:)(*(Swift::String *)&v250);
            swift_bridgeObjectRelease();
            v358 = (char *)v370;
            uint64_t v140 = v371;
          }
          sub_10006EC68((uint64_t)v381 + 8, (uint64_t)&v370, (uint64_t *)&unk_100485B70);
          uint64_t v294 = *(uint64_t *)((char *)&v364->isa + qword_1004858D0);
          uint64_t v295 = *(uint64_t *)((char *)&v364[1].isa + qword_1004858D0);
          unint64_t v296 = *(unint64_t *)((char *)&v364[2].isa + qword_1004858D0);
          sub_10006EC68((uint64_t)&v370, (uint64_t)v364 + qword_1004858D0, (uint64_t *)&unk_100485B70);
          sub_1002D7674((uint64_t)&v370);
          uint64_t v297 = v294;
          v298 = v364;
          sub_1001331AC(v297, v295, v296);
          sub_10006EC68((unint64_t)&v379 | 0xD, (uint64_t)v382, &qword_100482740);
          sub_10006EC68((uint64_t)v382, (uint64_t)v298 + qword_100488890, &qword_100482740);
          sub_10006EC68((uint64_t)&v380 + 8, (uint64_t)&v374, (uint64_t *)&unk_100485B80);
          uint64_t v299 = (uint64_t)v298 + qword_1004858D8;
          uint64_t v300 = *(uint64_t *)((char *)&v298->isa + qword_1004858D8);
          unint64_t v301 = *(void *)(v299 + 8);
          sub_10006EC68((uint64_t)&v374, v299, (uint64_t *)&unk_100485B80);
          sub_1002D76A4((uint64_t)&v374);
          sub_10000C95C(v300, v301);
          sub_1002D76D4(&v379);
          goto LABEL_147;
        }
        sub_1002D7614((uint64_t)v95, type metadata accessor for NANAttribute);
      }
      swift_bridgeObjectRetain();
      os_log_t v180 = (os_log_t)v353;
      Array<A>.retrieve(attribute:)(16, v362, v353);
      sub_1001344F4((uint64_t)v376, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
      if (v97((long long *)v180, 1, v96) == 1)
      {
        sub_1000380B4((uint64_t)v180, &qword_100485280);
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 16)
        {
          int v181 = *(_DWORD *)((char *)&v180[1].isa + 5);
          os_log_t v182 = v180;
          __int16 v183 = *(_WORD *)((char *)&v180[2].isa + 1);
          char v184 = BYTE3(v182[2].isa);
          Class isa = v182[5].isa;
          v186 = v364;
          v187 = (char *)v364 + qword_1004858D0;
          uint64_t v188 = *(uint64_t *)((char *)&v364->isa + qword_1004858D0);
          uint64_t v189 = *(uint64_t *)((char *)&v364[1].isa + qword_1004858D0);
          unint64_t v190 = *(unint64_t *)((char *)&v364[2].isa + qword_1004858D0);
          *(_OWORD *)v187 = *(_OWORD *)&v182[3].isa;
          *((void *)v187 + 2) = isa;
          sub_1001331AC(v188, v189, v190);
          v358 = 0;
          v191 = (char *)v186 + qword_100488890;
          *((_WORD *)v191 + 2) = v183;
          uint64_t v140 = 0;
          *(_DWORD *)v191 = v181;
          v191[6] = v184;
          goto LABEL_147;
        }
        sub_1002D7614((uint64_t)v180, type metadata accessor for NANAttribute);
      }
      v358 = 0;
      uint64_t v140 = 0;
LABEL_147:
      uint64_t v303 = ObjectType;
      uint64_t v302 = v361;
      os_log_t v304 = v359;
      v305 = (unsigned int *)((char *)v364 + qword_100488890);
      if (*((unsigned char *)&v364->isa + qword_100488890 + 6))
      {
        LOBYTE(v306) = v361;
        LOBYTE(v307) = v91;
        LOBYTE(v308) = v92;
        LOBYTE(v309) = v93;
        LOBYTE(v310) = (_BYTE)v359;
        uint64_t v311 = ObjectType;
      }
      else
      {
        unsigned int v310 = *((unsigned __int16 *)v305 + 2);
        uint64_t v306 = *v305;
        unint64_t v312 = v306 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v305 + 2) << 32);
        unint64_t v307 = v312 >> 8;
        unint64_t v308 = v312 >> 16;
        unint64_t v309 = v312 >> 24;
        uint64_t v311 = v310 >> 8;
      }
      unint64_t v313 = v306 | (unint64_t)(unsigned __int16)(v307 << 8) | ((unint64_t)v308 << 16) & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)v309 << 24);
      unint64_t v314 = v313 | ((unint64_t)v310 << 32) | (v311 << 40);
      unsigned int *v305 = v313;
      *((_WORD *)v305 + 2) = WORD2(v314);
      *((unsigned char *)v305 + 6) = 0;
      unint64_t v315 = v302 | (v91 << 8) | (v92 << 16) | (v93 << 24) | ((void)v304 << 32) | (v303 << 40);
      if (static NANClusterChangeEvent.__derived_struct_equals(_:_:)(v314, v315))
      {
        sub_1001344F4((uint64_t)v376, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
      }
      else
      {
        v316 = v364;
        v317 = v364;
        sub_1001344F4((uint64_t)v376, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_100134598);
        v318 = Logger.logObject.getter();
        int v319 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v318, (os_log_type_t)v319))
        {
          LODWORD(v357) = v319;
          os_log_t v359 = v318;
          uint64_t v361 = v140;
          uint64_t v320 = swift_slowAlloc();
          v321 = (void *)swift_slowAlloc();
          uint64_t ObjectType = swift_slowAlloc();
          uint64_t v365 = (uint64_t)v317;
          uint64_t v366 = ObjectType;
          *(_DWORD *)uint64_t v320 = 138412802;
          v322 = v317;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v321 = v316;

          *(_WORD *)(v320 + 12) = 2080;
          uint64_t v323 = WiFiAddress.description.getter(v315);
          uint64_t v365 = sub_100010680(v323, v324, &v366);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1001344F4((uint64_t)v376, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
          swift_bridgeObjectRelease();
          *(_WORD *)(v320 + 22) = 2080;
          uint64_t v325 = *((unsigned __int16 *)v305 + 2);
          uint64_t v326 = *v305;
          char v327 = *((unsigned char *)v305 + 6);

          if (v327) {
            goto LABEL_177;
          }
          uint64_t v328 = WiFiAddress.description.getter((v326 | (v325 << 32)) & 0xFFFFFFFFFFFFLL);
          uint64_t v365 = sub_100010680(v328, v329, &v366);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          os_log_t v330 = v359;
          _os_log_impl((void *)&_mh_execute_header, v359, (os_log_type_t)v357, "%@: bad responder data address in the event %s compared to attributes %s", (uint8_t *)v320, 0x20u);
          sub_100010BCC(&qword_10047CC30);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v140 = v361;
        }
        else
        {

          sub_1001344F4((uint64_t)v376, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
          swift_bridgeObjectRelease();
        }
      }
      v331 = v364;
      sub_1002D7498((void *)1, 0, 4);
      swift_bridgeObjectRetain();
      v162 = v331;
      v332 = Logger.logObject.getter();
      int v333 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v332, (os_log_type_t)v333))
      {
        swift_bridgeObjectRelease_n();

        goto LABEL_166;
      }
      LODWORD(v359) = v333;
      uint64_t ObjectType = (uint64_t)v332;
      uint64_t v334 = swift_slowAlloc();
      v335 = (void *)swift_slowAlloc();
      uint64_t v362 = swift_slowAlloc();
      uint64_t v365 = (uint64_t)v162;
      uint64_t v366 = v362;
      *(_DWORD *)uint64_t v334 = 138412802;
      v336 = v162;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v361 = (uint64_t)v335;
      void *v335 = v331;

      *(_WORD *)(v334 + 12) = 2080;
      if (v140) {
        uint64_t v337 = (uint64_t)v358;
      }
      else {
        uint64_t v337 = 0x6E776F6E6B6E55;
      }
      if (v140) {
        unint64_t v338 = v140;
      }
      else {
        unint64_t v338 = 0xE700000000000000;
      }
      swift_bridgeObjectRetain();
      uint64_t v365 = sub_100010680(v337, v338, &v366);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_WORD *)(v334 + 22) = 2080;
      uint64_t v339 = *((unsigned __int16 *)v305 + 2);
      uint64_t v340 = *v305;
      char v341 = *((unsigned char *)v305 + 6);

      if ((v341 & 1) == 0)
      {
        uint64_t v342 = WiFiAddress.description.getter((v340 | (v339 << 32)) & 0xFFFFFFFFFFFFLL);
        uint64_t v365 = sub_100010680(v342, v343, &v366);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        os_log_t v344 = (os_log_t)ObjectType;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)ObjectType, (os_log_type_t)v359, "%@ received datapath response with status %s from responder data address: %s", (uint8_t *)v334, 0x20u);
        sub_100010BCC(&qword_10047CC30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v31 = (uint64_t)v363;
        return sub_1002D7614(v31, type metadata accessor for DriverEvent);
      }
      __break(1u);
LABEL_177:
      __break(1u);
      JUMPOUT(0x1002CF66CLL);
    case 8u:
      v363 = v20;
      uint64_t v68 = (unsigned __int8 *)NANBitmap.Channel.operatingClass.getter(v377);
      uint64_t v69 = v68[8];
      uint64_t v70 = v68[9];
      uint64_t v71 = v68[10];
      uint64_t v72 = v68[11];
      uint64_t v362 = v68[12];
      long long v73 = v68[13];
      uint64_t v74 = (char *)v364 + qword_100488888;
      uint64_t v75 = v364;
      v358 = v74;
      uint64_t v76 = Logger.logObject.getter();
      os_log_type_t v77 = static os_log_type_t.default.getter();
      int v78 = v77;
      unint64_t v79 = v69 | (v70 << 8);
      if (os_log_type_enabled(v76, v77))
      {
        uint64_t v80 = swift_slowAlloc();
        uint64_t v81 = swift_slowAlloc();
        os_log_t v359 = v73;
        unint64_t v82 = (void *)v81;
        uint64_t v357 = swift_slowAlloc();
        *(void *)&long long v367 = v357;
        *(_DWORD *)uint64_t v80 = 138412546;
        uint64_t v361 = v72;
        LODWORD(v356) = v78;
        *(void *)&long long v379 = v75;
        uint64_t v83 = v75;
        os_log_t v355 = v76;
        unint64_t v84 = v79;
        uint64_t v85 = v83;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *unint64_t v82 = v364;

        *(_WORD *)(v80 + 12) = 2080;
        os_log_t v86 = v359;
        uint64_t v87 = WiFiAddress.description.getter(v84 | (v71 << 16) | (v361 << 24) | (v362 << 32) | ((void)v359 << 40));
        *(void *)&long long v379 = sub_100010680(v87, v88, (uint64_t *)&v367);
        unint64_t v79 = v84;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v72 = v361;
        swift_bridgeObjectRelease();
        os_log_t v89 = v355;
        _os_log_impl((void *)&_mh_execute_header, v355, (os_log_type_t)v356, "%@ datapath established with %s", (uint8_t *)v80, 0x16u);
        sub_100010BCC(&qword_10047CC30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        os_log_t v86 = v73;
      }
      uint64_t v128 = (char *)v75 + qword_1004858D0;
      uint64_t v129 = *(uint64_t *)((char *)&v75->isa + qword_1004858D0);
      int v130 = v86;
      if (v129 == 4)
      {
        id v131 = 0;
        uint64_t v132 = v362;
      }
      else
      {
        v133 = v79;
        uint64_t v135 = *((void *)v128 + 1);
        unint64_t v134 = *((void *)v128 + 2);
        sub_100013D44(v135, v134);
        uint64_t v136 = NANServiceInfo.genericServiceProtocol.getter(v129, v135, v134);
        sub_1001331AC(v129, v135, v134);
        if (v136)
        {
          id v131 = NANGenericServiceProtocol.apiDatapathServiceSpecificInfo.getter((uint64_t)v136);
          swift_bridgeObjectRelease();
        }
        else
        {
          id v131 = 0;
        }
        uint64_t v132 = v362;
        unint64_t v79 = (unint64_t)v133;
      }
      v229 = (unsigned int *)((char *)v75 + qword_100488890);
      if ((*((unsigned char *)&v75->isa + qword_100488890 + 6) & 1) == 0)
      {
        unint64_t v230 = v79 | (v71 << 16) | (v72 << 24) | (v132 << 32) | ((void)v130 << 40);
        if (static WiFiAddress.!= infix(_:_:)(*v229 | ((unint64_t)*((unsigned __int16 *)v229 + 2) << 32), v230))
        {
          uint64_t v356 = v79;
          uint64_t v357 = v71;
          v231 = v75;
          unint64_t v79 = Logger.logObject.getter();
          os_log_type_t v232 = static os_log_type_t.error.getter();
          LODWORD(v358) = v232;
          if (os_log_type_enabled((os_log_t)v79, v232))
          {
            uint64_t v233 = swift_slowAlloc();
            os_log_t v355 = (os_log_t)swift_slowAlloc();
            v354 = (char *)swift_slowAlloc();
            *(void *)&long long v367 = v354;
            *(_DWORD *)uint64_t v233 = 138412546;
            os_log_t v359 = v130;
            uint64_t v353 = v79;
            uint64_t v361 = v72;
            *(void *)&long long v379 = v231;
            v234 = v231;
            LODWORD(v72) = v361;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            v355->Class isa = (Class)v364;

            *(_WORD *)(v233 + 12) = 2080;
            uint64_t v235 = WiFiAddress.description.getter(v230);
            *(void *)&long long v379 = sub_100010680(v235, v236, (uint64_t *)&v367);
            int v130 = v359;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            unint64_t v79 = v353;
            _os_log_impl((void *)&_mh_execute_header, (os_log_t)v353, (os_log_type_t)v358, "%@ got an updated responder data address %s", (uint8_t *)v233, 0x16u);
            sub_100010BCC(&qword_10047CC30);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            uint64_t v132 = v362;
            swift_slowDealloc();
          }
          else
          {
          }
          LODWORD(v79) = v356;
          LODWORD(v71) = v357;
        }
      }
      *((_WORD *)v229 + 2) = (((void)v130 << 40) | (unint64_t)(v132 << 32)) >> 32;
      unsigned int *v229 = v79 | (v71 << 16) | (v72 << 24);
      *((unsigned char *)v229 + 6) = 0;
      swift_unownedRetainStrong();
      id v237 = v131;
      sub_100354870();
      swift_release();
      v238 = (char *)v75 + qword_1004858A8;
      swift_beginAccess();
      uint64_t v239 = sub_1002D8B3C(*(unsigned __int16 *)(v238 + 25) | ((unint64_t)*(unsigned int *)(v238 + 27) << 16));
      swift_release();
      sub_1002D7498(v131, v239, 3);
      swift_release();

      uint64_t Strong = swift_unknownObjectWeakLoadStrong();
      if (Strong)
      {
        v241 = (void *)Strong;
        sub_100320D8C();
      }
      swift_unknownObjectWeakAssign();
      uint64_t v242 = qword_1004858F8;
      uint64_t v243 = (uint64_t)v363;
      if ((*((unsigned char *)&v75->isa + qword_1004858F8) & 1) == 0)
      {
        sub_1000136F4((uint64_t)(v238 + 104), (uint64_t)&v379, (uint64_t *)&unk_100485B50);
        if (*((void *)&v380 + 1) == 1)
        {
          sub_1000380B4((uint64_t)&v379, (uint64_t *)&unk_100485B50);
        }
        else
        {
          sub_10006EF50(&v379, (uint64_t)&v367);
          *((unsigned char *)&v75->isa + v242) = 1;
          sub_1001B7B7C(&v367, (uint64_t)&v379);
          if (*((void *)&v380 + 1))
          {
            sub_10006EF50(&v379, (uint64_t)&v370);
            uint64_t v244 = v372;
            uint64_t v245 = v373;
            v364 = sub_1000369C4(&v370, v372);
            uint64_t v362 = v238[25];
            uint64_t v246 = v238[26];
            unint64_t v247 = (unint64_t)*(unsigned int *)(v238 + 27) << 16;
            if (*((void *)v238 + 12) == 1)
            {
              uint64_t v248 = 0;
              unint64_t v249 = 0xF000000000000000;
            }
            else
            {
              uint64_t v248 = *((void *)v238 + 7);
              unint64_t v249 = *((void *)v238 + 8);
              sub_100013D44(v248, v249);
            }
            os_log_t v252 = (os_log_t)ObjectType;
            uint64_t v253 = swift_getWitnessTable();
            unint64_t v254 = sub_100301864((uint64_t)v252, v253);
            (*(void (**)(unint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t))(v245 + 8))(v362 | (v246 << 8) | v247, v248, v249, v254 & 0xFFFFFFFFFFFFFFLL, v244, v245);
            sub_10000C95C(v248, v249);
            sub_1001B7BFC((uint64_t)&v367);
            sub_100010754((uint64_t)&v370);
            uint64_t v243 = (uint64_t)v363;
          }
          else
          {
            sub_1002CF6F0();
            sub_1001B7BFC((uint64_t)&v367);
          }
        }
      }
      sub_1002CFF70();

      uint64_t v31 = v243;
      return sub_1002D7614(v31, type metadata accessor for DriverEvent);
    case 9u:
      uint64_t v98 = (uint64_t)v20;
      uint64_t v99 = NANBitmap.Channel.operatingClass.getter(v377);
      unint64_t v100 = *(void **)(v99 + 8);
      uint64_t v101 = (char *)v364 + qword_1004858E8;
      unint64_t v103 = *(unint64_t *)((char *)&v364->isa + qword_1004858E8);
      uint64_t v102 = *(uint64_t *)((char *)&v364[1].isa + qword_1004858E8);
      switch(*((unsigned char *)&v364[2].isa + qword_1004858E8))
      {
        case 1:
          goto LABEL_83;
        case 2:
          unint64_t v103 = *(unint64_t *)((char *)&v364[1].isa + qword_1004858E8);
LABEL_83:
          v205 = v364;
          sub_1002D7498((void *)v103, 0, 1);
          v206 = v205;
          v207 = Logger.logObject.getter();
          os_log_type_t v208 = static os_log_type_t.error.getter();
          int v209 = v208;
          if (os_log_type_enabled(v207, v208))
          {
            uint64_t v210 = swift_slowAlloc();
            uint64_t v357 = (uint64_t)v207;
            uint64_t v211 = v210;
            v212 = swift_slowAlloc();
            uint64_t v362 = (uint64_t)v100;
            v213 = v212;
            os_log_t v355 = v212;
            uint64_t ObjectType = swift_slowAlloc();
            *(void *)&long long v367 = ObjectType;
            *(_DWORD *)uint64_t v211 = 138413058;
            v363 = (char *)v98;
            LODWORD(v356) = v209;
            *(void *)&long long v379 = v206;
            v214 = v206;
            uint64_t v361 = (uint64_t)v206;
            v215 = v214;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            v213->Class isa = (Class)v364;

            *(_WORD *)(v211 + 12) = 2080;
            unint64_t v216 = WiFiAwareTerminationReason.description.getter(v362);
            *(void *)&long long v379 = sub_100010680(v216, v217, (uint64_t *)&v367);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v211 + 22) = 2080;
            v364 = (v211 + 24);
            v219 = *(void **)v101;
            uint64_t v218 = *((void *)v101 + 1);
            char v220 = v101[16];
            sub_1002D5EA4(*(void **)v101, v218, v220);

            unint64_t v221 = sub_1002C97DC((uint64_t)v219, v218, v220);
            unint64_t v223 = v222;
            sub_1002D5EFC(v219, v218, v220);
            uint64_t v224 = v221;
            uint64_t v98 = (uint64_t)v363;
            *(void *)&long long v379 = sub_100010680(v224, v223, (uint64_t *)&v367);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v211 + 32) = 2048;
            *(void *)&long long v379 = v103;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            os_log_t v225 = (os_log_t)v357;
            _os_log_impl((void *)&_mh_execute_header, (os_log_t)v357, (os_log_type_t)v356, "%@ got early termination (%s) when %s for retry #%ld", (uint8_t *)v211, 0x2Au);
            sub_100010BCC(&qword_10047CC30);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
          }
          sub_1002CB820();
          uint64_t v31 = v98;
          return sub_1002D7614(v31, type metadata accessor for DriverEvent);
        case 3:
          v226 = (char *)v364 + qword_1004858A8;
          swift_beginAccess();
          sub_1000136F4((uint64_t)(v226 + 104), (uint64_t)&v379, (uint64_t *)&unk_100485B50);
          if (!*((void *)&v380 + 1))
          {
            sub_1001B7BFC((uint64_t)&v379);
            uint64_t v31 = (uint64_t)v20;
            goto LABEL_143;
          }
          if (*((void *)&v380 + 1) == 1)
          {
            sub_1000380B4((uint64_t)&v379, (uint64_t *)&unk_100485B50);
            uint64_t v31 = (uint64_t)v20;
LABEL_143:
            uint64_t v50 = (uint64_t)v100;
            uint64_t v48 = 0x7165722072656570;
            unint64_t v49 = 0xEC00000074736575;
            goto LABEL_18;
          }
          sub_10006EF50(&v379, (uint64_t)&v367);
          uint64_t v31 = (uint64_t)v20;
          if (v100 != (void *)2
            || (uint64_t v255 = v368,
                uint64_t v256 = v369,
                sub_1000369C4(&v367, v368),
                (uint64_t v257 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v256 + 32))(*(unsigned __int16 *)(v226 + 25) | ((unint64_t)*(unsigned int *)(v226 + 27) << 16), v255, v256)) == 0))
          {
            sub_100010754((uint64_t)&v367);
            goto LABEL_143;
          }
          uint64_t v21 = v257;
          uint64_t v10 = (uint64_t)v20;
          v258 = *(Class *)((char *)&v364->isa + qword_1004858B0);
          p_type = &stru_100479FF0.type;
          if (v258) {
            [v258 datapathUpdatedInternetSharingPolicy:v21];
          }
          v259 = (unint64_t *)((char *)v364 + qword_1004858B8);
          swift_beginAccess();
          unint64_t v16 = *v259;
          if (v16 >> 62) {
            goto LABEL_174;
          }
          uint64_t v260 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain_n();
          if (!v260) {
            goto LABEL_134;
          }
          do
          {
            uint64_t v261 = 4;
            while (1)
            {
              if ((v16 & 0xC000000000000001) != 0)
              {
                v262 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else
              {
                v262 = *(void **)(v16 + 8 * v261);
                swift_unknownObjectRetain();
              }
              uint64_t v263 = v261 - 3;
              if (__OFADD__(v261 - 4, 1)) {
                break;
              }
              [v262 p_type[469]:v21];
              swift_unknownObjectRelease();
              ++v261;
              if (v263 == v260) {
                goto LABEL_134;
              }
            }
LABEL_173:
            __break(1u);
LABEL_174:
            swift_bridgeObjectRetain_n();
            uint64_t v260 = _CocoaArrayWrapper.endIndex.getter();
          }
          while (v260);
LABEL_134:
          swift_bridgeObjectRelease_n();
          uint64_t v374 = 0;
          unint64_t v375 = 0xE000000000000000;
          _StringGuts.grow(_:)(26);
          v264._countAndFlagsBits = 0xD000000000000018;
          v264._object = (void *)0x80000001003DFFC0;
          String.append(_:)(v264);
          sub_1002C8D7C(v21);
          v265._countAndFlagsBits = 0;
          v265._object = (void *)0xE000000000000000;
          String.append(_:)(v265);
          sub_1002CA4C4(4, v374, v375);
          swift_bridgeObjectRelease();
          sub_100010754((uint64_t)&v367);
          uint64_t v31 = v10;
          break;
        case 4:
          if (v103 | v102)
          {
            if (v103 ^ 1 | v102)
            {
              uint64_t v228 = 0x7165722072657375;
              uint64_t v227 = 2;
            }
            else
            {
              uint64_t v227 = 3;
              uint64_t v228 = 0x7165722072656570;
            }
            sub_1002CA4C4(v227, v228, 0xEC00000074736575);
            uint64_t v31 = (uint64_t)v20;
          }
          else
          {
            uint64_t v362 = *(void *)(v99 + 8);
            v266 = v364;
            v267 = Logger.logObject.getter();
            os_log_type_t v268 = static os_log_type_t.info.getter();
            int v269 = v268;
            if (os_log_type_enabled(v267, v268))
            {
              uint64_t v270 = swift_slowAlloc();
              LODWORD(v361) = v269;
              uint64_t v271 = v270;
              v272 = swift_slowAlloc();
              uint64_t ObjectType = (uint64_t)v272;
              v363 = (char *)swift_slowAlloc();
              *(void *)&long long v367 = v363;
              *(_DWORD *)uint64_t v271 = 138412802;
              *(void *)&long long v379 = v266;
              v273 = v266;
              uint64_t v357 = (uint64_t)&v379 + 8;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              v272->Class isa = (Class)v364;

              v364 = v267;
              *(_WORD *)(v271 + 12) = 2080;
              unint64_t v274 = WiFiAwareTerminationReason.description.getter(v362);
              *(void *)&long long v379 = sub_100010680(v274, v275, (uint64_t *)&v367);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              *(_WORD *)(v271 + 22) = 2080;
              uint64_t v362 = v271 + 24;
              v277 = *(void **)v101;
              uint64_t v276 = *((void *)v101 + 1);
              v278 = v20;
              char v279 = v101[16];
              sub_1002D5EA4(*(void **)v101, v276, v279);

              unint64_t v280 = sub_1002C97DC((uint64_t)v277, v276, v279);
              unint64_t v282 = v281;
              uint64_t v283 = v276;
              uint64_t v31 = (uint64_t)v278;
              sub_1002D5EFC(v277, v283, v279);
              *(void *)&long long v379 = sub_100010680(v280, v282, (uint64_t *)&v367);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              swift_bridgeObjectRelease();
              uint64_t v59 = v364;
              _os_log_impl((void *)&_mh_execute_header, v364, (os_log_type_t)v361, "%@ got early termination (%s) when %s, ignoring", (uint8_t *)v271, 0x20u);
              sub_100010BCC(&qword_10047CC30);
              swift_arrayDestroy();
              swift_slowDealloc();
              goto LABEL_26;
            }

            uint64_t v31 = (uint64_t)v20;
          }
          return sub_1002D7614(v31, type metadata accessor for DriverEvent);
        default:
          sub_1002CB148();
          uint64_t v31 = (uint64_t)v20;
          return sub_1002D7614(v31, type metadata accessor for DriverEvent);
      }
      break;
    case 0xAu:
      Swift::Int v104 = v20;
      char v105 = *(unsigned char *)(NANBitmap.Channel.operatingClass.getter(v377) + 15);
      uint64_t v106 = v364;
      unint64_t v107 = (unsigned __int8 *)v364 + qword_1004858A8;
      swift_beginAccess();
      uint64_t v108 = *v107;
      uint64_t v109 = v107[1];
      uint64_t v361 = v107[2];
      uint64_t ObjectType = v107[3];
      uint64_t v357 = v107[4];
      uint64_t v353 = v107[5];
      uint64_t v352 = v107[6];
      uint64_t v110 = v106;
      uint64_t v111 = Logger.logObject.getter();
      os_log_type_t v112 = static os_log_type_t.default.getter();
      uint64_t v113 = v106;
      int v114 = v112;
      BOOL v115 = os_log_type_enabled(v111, v112);
      uint64_t v362 = v109;
      if (v115)
      {
        uint64_t v116 = swift_slowAlloc();
        uint64_t v117 = swift_slowAlloc();
        v363 = v20;
        unint64_t v118 = (void *)v117;
        v350 = (void *)swift_slowAlloc();
        *(void *)&long long v379 = v350;
        *(_DWORD *)uint64_t v116 = 138412802;
        LODWORD(v349) = v114;
        uint64_t v351 = v108;
        uint64_t v370 = (uint64_t)v110;
        unint64_t v119 = v110;
        os_log_t v348 = v111;
        v120 = v119;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *unint64_t v118 = v113;

        *(_WORD *)(v116 + 12) = 2080;
        LOBYTE(v370) = v105;
        uint64_t v121 = String.init<A>(describing:)();
        uint64_t v370 = sub_100010680(v121, v122, (uint64_t *)&v379);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v116 + 22) = 2080;
        uint64_t v370 = sub_100010680(0x64657463656A6572, 0xE800000000000000, (uint64_t *)&v379);
        uint64_t v108 = v351;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        os_log_t v123 = v348;
        _os_log_impl((void *)&_mh_execute_header, v348, (os_log_type_t)v349, "%@ received datapath host assist for %s. Responding with %s", (uint8_t *)v116, 0x20u);
        sub_100010BCC(&qword_10047CC30);
        swift_arrayDestroy();
        uint64_t v124 = (uint64_t)v363;
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        os_log_t v126 = v355;
        uint64_t v125 = v356;
        uint64_t v127 = v354;
      }
      else
      {

        os_log_t v126 = v355;
        uint64_t v125 = v356;
        uint64_t v127 = v354;
        uint64_t v124 = (uint64_t)v104;
      }
      uint64_t v141 = *(uint64_t *)((char *)&v110->isa + qword_1004858A0);
      swift_unownedRetainStrong();
      sub_1003546AC();
      swift_release();
      uint64_t v142 = v124;
      swift_unownedRetainStrong();
      ((void (*)(char *, uint64_t, uint64_t))v126[2].isa)(v127, v141 + *(void *)(*(void *)v141 + 96), v125);
      swift_release();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      unint64_t v144 = (void *)(v108 | (v362 << 8) | (v361 << 16) | (ObjectType << 24) | (v357 << 32) | (v353 << 40) | (v352 << 48) | 0x200000000000000);
      (*(void (**)(void *, uint64_t, uint64_t))(AssociatedConformanceWitness + 272))(v144, v125, AssociatedConformanceWitness);
      ((void (*)(char *, uint64_t))v126[1].isa)(v127, v125);
      sub_1002D7498(v144, 0, 2);
      uint64_t v31 = v142;
      return sub_1002D7614(v31, type metadata accessor for DriverEvent);
    default:
      sub_1001344F4((uint64_t)v376, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
      goto LABEL_24;
  }
  return sub_1002D7614(v31, type metadata accessor for DriverEvent);
}

void sub_1002CF69C()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    sub_1002CB820();
  }
}

uint64_t sub_1002CF6F0()
{
  uint64_t v1 = swift_isaMask & *v0;
  uint64_t v61 = *(void *)(v1 + 0x58);
  uint64_t v2 = *(void (**)(void, void, void, void, void, void, void, void, void, void, void))(v1 + 80);
  swift_getAssociatedTypeWitness();
  unint64_t v67 = v2;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v3 = type metadata accessor for Preferences();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v64 = v3;
  uint64_t v65 = v4;
  __chkstk_darwin();
  uint64_t v6 = (char *)v52 - v5;
  uint64_t v7 = swift_checkMetadataState();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)v52 - v9;
  uint64_t v11 = type metadata accessor for DispatchTimeInterval();
  uint64_t v69 = *(void *)(v11 - 8);
  uint64_t v70 = v11;
  __chkstk_darwin();
  unint64_t v66 = (void *)((char *)v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v58 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v13 = v58;
  __chkstk_darwin();
  uint64_t v62 = (char *)v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v16 = (char *)v52 - v15;
  uint64_t v57 = (char *)v52 - v15;
  uint64_t v17 = type metadata accessor for DispatchTime();
  uint64_t v71 = *(void *)(v17 - 8);
  uint64_t v72 = v17;
  uint64_t v54 = *(void *)(v71 + 64);
  __chkstk_darwin();
  uint64_t v53 = (char *)v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  os_log_type_t v20 = (char *)v52 - v19;
  type metadata accessor for P2PTimer();
  variable initialization expression of AWDLPeer.lastUpdated();
  uint64_t v21 = *(void *)((char *)v0 + qword_1004858A0);
  swift_unownedRetainStrong();
  uint64_t v22 = v21 + *(void *)(*(void *)v21 + 96);
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v59 = v13 + 16;
  os_log_type_t v60 = v23;
  v23(v16, v22, AssociatedTypeWitness);
  swift_release();
  uint64_t v24 = sub_1002CB6FC();
  unint64_t v25 = (void *)((char *)v24 + *(void *)(*v24 + 104));
  uint64_t v26 = *v25;
  uint64_t v55 = v25[1];
  uint64_t v56 = v26;
  swift_bridgeObjectRetain();
  swift_release();
  swift_unownedRetainStrong();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v21 + *(void *)(*(void *)v21 + 112), v7);
  swift_release();
  (*(void (**)(uint64_t))(AssociatedConformanceWitness + 120))(v7);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v27 = v64;
  unsigned int v28 = Preferences.linkTestIntervalMinutes.getter();
  (*(void (**)(char *, uint64_t))(v65 + 8))(v6, v27);
  *unint64_t v66 = 60 * v28;
  (*(void (**)(void))(v69 + 104))();
  uint64_t v29 = swift_allocObject();
  uint64_t v65 = v29;
  swift_unknownObjectWeakInit();
  uint64_t v30 = (void *)swift_allocObject();
  v52[0] = v30;
  uint64_t v31 = v67;
  uint64_t v32 = v61;
  v30[2] = v67;
  void v30[3] = v32;
  v30[4] = v29;
  uint64_t v33 = swift_allocObject();
  uint64_t v64 = v33;
  swift_unknownObjectWeakInit();
  int v34 = (void *)swift_allocObject();
  v34[2] = v31;
  v34[3] = v32;
  v34[4] = v33;
  uint64_t v35 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v36 = v71;
  uint64_t v37 = v72;
  uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v71 + 16);
  uint64_t v39 = v53;
  uint64_t AssociatedConformanceWitness = (uint64_t)v20;
  v38(v53, v20, v72);
  unint64_t v40 = (*(unsigned __int8 *)(v36 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
  int v41 = (char *)swift_allocObject();
  *((void *)v41 + 2) = v67;
  *((void *)v41 + 3) = v32;
  v52[1] = v35;
  *((void *)v41 + 4) = v35;
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))(&v41[v40], v39, v37);
  uint64_t v42 = AssociatedTypeWitness;
  uint64_t v43 = swift_getAssociatedConformanceWitness();
  uint64_t v44 = *(void *)(v43 + 8);
  unint64_t v67 = *(void (**)(void, void, void, void, void, void, void, void, void, void, void))(v44 + 32);
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v51 = v44;
  unint64_t v45 = v66;
  uint64_t v46 = v57;
  v67(v56, v55, v66, sub_1002D779C, v52[0], sub_1002D77A8, v34, sub_1002D7880, v41, v42, v51);
  swift_bridgeObjectRelease();
  uint64_t v47 = v58;
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(void *, uint64_t))(v69 + 8))(v45, v70);
  uint64_t v48 = *(void (**)(char *, uint64_t))(v47 + 8);
  v48(v46, v42);
  swift_release();
  swift_release();
  swift_release();
  swift_unownedRetainStrong();
  unint64_t v49 = v62;
  v60(v62, v21 + *(void *)(*(void *)v21 + 96), v42);
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 320))(1, v42, v43);
  v48(v49, v42);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v71 + 8))(AssociatedConformanceWitness, v72);
}

void sub_1002CFF70()
{
  uint64_t v1 = v0;
  uint64_t v2 = qword_1004858F0;
  if ((*(unsigned char *)(v1 + qword_1004858F0) & 1) == 0 && *(unsigned char *)(v1 + qword_1004858E8 + 16) == 3)
  {
    uint64_t v3 = (unsigned int *)(v1 + qword_100488890);
    char v4 = *(unsigned char *)(v1 + qword_100488890 + 6);
    id v5 = *(id *)(v1 + qword_1004858E8);
    if (v4)
    {
    }
    else
    {
      id v82 = v5;
      unint64_t v6 = *v3 | ((unint64_t)*((unsigned __int16 *)v3 + 2) << 32);
      *(unsigned char *)(v1 + v2) = 1;
      uint64_t v7 = sub_1002CB6FC();
      uint64_t v8 = (uint64_t *)(v1 + qword_1004858D8);
      unint64_t v9 = *(void *)(v1 + qword_1004858D8 + 8);
      uint64_t v81 = v1 + qword_1004858D8;
      if (v9 >> 60 == 15)
      {
        uint64_t v10 = v6 & 0xFFFFFFFFFFFFLL;
        uint64_t v11 = WiFiAddress.ipv6LinkLocalAddress.getter(v10);
        uint64_t v13 = v12;
        unint64_t v15 = v14;
        uint64_t v17 = v16;
      }
      else
      {
        uint64_t v18 = *v8;
        sub_100013D44(*v8, v9);
        uint64_t v11 = InterfaceIdentifier.ipv6Address.getter(v18, v9);
        uint64_t v13 = v19;
        unint64_t v15 = v20;
        uint64_t v17 = v21;
        sub_10000C95C(v18, v9);
        uint64_t v10 = v6 & 0xFFFFFFFFFFFFLL;
      }
      uint64_t v22 = (void (*)(void *, void))(*(uint64_t (**)(void *))(*v7 + 392))(v83);
      uint64_t v23 = type metadata accessor for WiFiInterface.NeighborDiscoveryTable();
      uint64_t v80 = v10;
      unint64_t v24 = v15;
      uint64_t v25 = v23;
      WiFiInterface.NeighborDiscoveryTable.postPeerPresence(macAddress:ipv6Address:)(v10, v11, v13, v24, v17, v23);
      v22(v83, 0);
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v26 = sub_1002CB6FC();
      uint64_t v27 = *(void *)(v1 + qword_1004858A0);
      swift_unownedRetainStrong();
      unsigned int v28 = *(void **)(v27 + *(void *)(*(void *)v27 + 448));
      swift_retain();
      swift_release();
      swift_release();
      uint64_t v29 = (uint64_t *)v81;
      if (v28)
      {
        swift_release();
        if (v26 == v28)
        {
          swift_unownedRetainStrong();
          unint64_t v30 = *(void *)(v81 + 8);
          if (v30 >> 60 == 15)
          {
            uint64_t v31 = WiFiAddress.ipv6LinkLocalAddress.getter(v10);
            uint64_t v33 = v32;
            unint64_t v35 = v34;
            uint64_t v37 = v36;
          }
          else
          {
            uint64_t v71 = v25;
            uint64_t v72 = *(void *)v81;
            sub_100013D44(*(void *)v81, *(void *)(v81 + 8));
            uint64_t v31 = InterfaceIdentifier.ipv6Address.getter(v72, v30);
            uint64_t v33 = v73;
            unint64_t v35 = v74;
            uint64_t v37 = v75;
            uint64_t v76 = v72;
            uint64_t v25 = v71;
            sub_10000C95C(v76, v30);
            uint64_t v10 = v80;
          }
          swift_beginAccess();
          WiFiInterface.NeighborDiscoveryTable.postPeerPresence(macAddress:ipv6Address:)(v10, v31, v33, v35, v37, v25);
          swift_endAccess();
          swift_release();
          swift_bridgeObjectRelease();
          uint64_t v29 = (uint64_t *)v81;
        }
      }
      uint64_t v38 = v1 + qword_1004858A8;
      swift_beginAccess();
      uint64_t v39 = qword_1004858B0;
      if (*(unsigned char *)(v38 + 32) == 2)
      {
        unint64_t v40 = *(void **)(v1 + qword_1004858B0);
        if (v40)
        {
          uint64_t v41 = *(unsigned __int8 *)(v38 + 25);
          unint64_t v42 = (unint64_t)*(unsigned int *)(v38 + 27) << 16;
          unint64_t v43 = v29[1];
          if (v43 >> 60 == 15)
          {
            uint64_t v44 = *(unsigned __int8 *)(v38 + 26);
            unint64_t v45 = v42;
            swift_unknownObjectRetain();
            unint64_t v46 = v45;
            uint64_t v47 = v44;
            uint64_t v48 = 0;
            uint64_t v49 = 0;
            uint64_t v50 = 0;
            uint64_t v51 = 1;
          }
          else
          {
            uint64_t v78 = *(unsigned __int8 *)(v38 + 26);
            uint64_t v79 = *(unsigned __int8 *)(v38 + 25);
            uint64_t v52 = v29;
            uint64_t v53 = *v29;
            unint64_t v77 = (unint64_t)*(unsigned int *)(v38 + 27) << 16;
            swift_unknownObjectRetain();
            sub_100038004(v53, v43);
            uint64_t v48 = InterfaceIdentifier.ipv6Address.getter(v53, v43);
            uint64_t v49 = v54;
            uint64_t v50 = v55;
            uint64_t v51 = v56;
            uint64_t v57 = v53;
            uint64_t v29 = v52;
            uint64_t v41 = v79;
            sub_10000C95C(v57, v43);
            unint64_t v46 = v77;
            uint64_t v47 = v78;
          }
          id v58 = WiFiAddress.apiAddress(with:)(v48, v49, v50, v51, v41 | (v47 << 8) | v46);
          sub_1000CBC9C(v48, v49, v50, v51);
          swift_unownedRetainStrong();
          uint64_t v59 = WiFiInterface.interfaceIndex.getter();
          swift_release();
          [v40 datapathReceivedControlDataAddress:v58 serviceSpecificInfo:v82 onInterfaceIndex:v59];

          swift_unknownObjectRelease();
          uint64_t v39 = qword_1004858B0;
        }
      }
      os_log_type_t v60 = *(void **)(v1 + v39);
      if (v60)
      {
        unint64_t v61 = v29[1];
        if (v61 >> 60 == 15)
        {
          swift_unknownObjectRetain();
          uint64_t v62 = 0;
          uint64_t v63 = 0;
          uint64_t v64 = 0;
          uint64_t v65 = 1;
        }
        else
        {
          uint64_t v66 = *v29;
          swift_unknownObjectRetain();
          sub_100038004(v66, v61);
          uint64_t v62 = InterfaceIdentifier.ipv6Address.getter(v66, v61);
          uint64_t v63 = v67;
          uint64_t v64 = v68;
          uint64_t v65 = v69;
          sub_10000C95C(v66, v61);
        }
        id v70 = WiFiAddress.apiAddress(with:)(v62, v63, v64, v65, v80);
        sub_1000CBC9C(v62, v63, v64, v65);
        [v60 datapathConfirmedForPeerDataAddress:v70 serviceSpecificInfo:v82];

        swift_unknownObjectRelease();
      }
    }
  }
}

uint64_t sub_1002D0718()
{
  uint64_t v1 = v0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v23 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v6 = (char *)v22 - v5;
  __chkstk_darwin();
  uint64_t v8 = (char *)v22 - v7;
  uint64_t v9 = *(void *)(v0 + qword_1004858A0);
  swift_unownedRetainStrong();
  uint64_t v10 = v9 + *(void *)(*(void *)v9 + 96);
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v25(v8, v10, AssociatedTypeWitness);
  swift_release();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t))(*(void *)(AssociatedConformanceWitness + 8) + 40))(AssociatedTypeWitness);
  uint64_t v12 = v8;
  uint64_t v13 = v3 + 8;
  unint64_t v24 = *(void (**)(char *, uint64_t))(v3 + 8);
  v24(v12, AssociatedTypeWitness);
  uint64_t v14 = qword_100485908;
  if (*(unsigned char *)(v0 + qword_100485908) == 1)
  {
    unint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      v22[1] = v13;
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Restarting infrastructure WiFi connectivity", v17, 2u);
      swift_slowDealloc();
    }

    swift_unownedRetainStrong();
    swift_unownedRetainStrong();
    swift_release();
    sub_10033C098();
    swift_release();
    *(unsigned char *)(v1 + v14) = 0;
  }
  swift_unownedRetainStrong();
  v25(v6, v9 + *(void *)(*(void *)v9 + 96), AssociatedTypeWitness);
  swift_release();
  (*(void (**)(void, uint64_t, uint64_t))(AssociatedConformanceWitness + 320))(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v18 = v23;
  v24(v6, AssociatedTypeWitness);
  swift_unownedRetainStrong();
  uint64_t v19 = v9 + *(void *)(*(void *)v9 + 680);
  swift_beginAccess();
  *(unsigned char *)(v19 + 16) = 0;
  *(void *)uint64_t v19 = 0;
  *(void *)(v19 + 8) = 0;
  swift_release();
  swift_bridgeObjectRelease();
  swift_unownedRetainStrong();
  v25(v18, v9 + *(void *)(*(void *)v9 + 96), AssociatedTypeWitness);
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 328))(256, AssociatedTypeWitness, AssociatedConformanceWitness);
  v24(v18, AssociatedTypeWitness);
  unint64_t v20 = sub_1002CB6FC();
  (*(void (**)(void))(*v20 + 192))(0);
  return swift_release();
}

uint64_t sub_1002D0BA0()
{
  uint64_t v1 = v0;
  uint64_t v2 = swift_isaMask & *v0;
  v164[2] = *(void *)(v2 + 0x58);
  uint64_t v3 = *(void *)(v2 + 80);
  swift_getAssociatedTypeWitness();
  v164[1] = v3;
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v4 = type metadata accessor for Preferences();
  os_log_t isa = (os_log_t)v4[-1].isa;
  os_log_t v180 = v4;
  __chkstk_darwin();
  unint64_t v178 = (char *)v164 - v5;
  uint64_t BeaconInformation = type metadata accessor for NANPeer.LastBeaconInformation(0);
  uint64_t v175 = *(void *)(BeaconInformation - 8);
  unint64_t v176 = BeaconInformation;
  __chkstk_darwin();
  uint64_t v167 = (uint64_t)v164 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_100484CF8);
  __chkstk_darwin();
  uint64_t v173 = (uint64_t)v164 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v174 = (uint64_t)v164 - v9;
  uint64_t v170 = type metadata accessor for NANPeer(0);
  __chkstk_darwin();
  uint64_t v169 = (uint64_t)v164 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchTime();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)v164 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  os_log_type_t v16 = (char *)v164 - v15;
  uint64_t v17 = type metadata accessor for DispatchTimeInterval();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin();
  unint64_t v168 = (char *)v164 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v177 = (char *)v164 - v20;
  __chkstk_darwin();
  v166 = (char *)v164 - v21;
  __chkstk_darwin();
  unint64_t v172 = (char *)v164 - v22;
  __chkstk_darwin();
  uint64_t v171 = (char *)v164 - v23;
  __chkstk_darwin();
  v165 = (char *)v164 - v24;
  __chkstk_darwin();
  int v181 = ((char *)v164 - v25);
  __chkstk_darwin();
  uint64_t v27 = ((char *)v164 - v26);
  __chkstk_darwin();
  uint64_t v29 = (char *)v164 - v28;
  type metadata accessor for P2PTimer();
  variable initialization expression of AWDLPeer.lastUpdated();
  unint64_t v30 = (char *)v0 + qword_1004858E0;
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v30, v11);
  char v184 = v29;
  uint64_t v31 = v27;
  uint64_t v32 = v1;
  DispatchTime.distance(to:)();
  uint64_t v33 = *(void (**)(char *, uint64_t))(v12 + 8);
  v33(v14, v11);
  v33(v16, v11);
  v31->os_log_t isa = (Class)10;
  uint64_t v34 = enum case for DispatchTimeInterval.seconds(_:);
  uint64_t v182 = v17;
  uint64_t v183 = v18;
  unint64_t v35 = *(void (**)(void *, void, uint64_t))(v18 + 104);
  v35(v31, enum case for DispatchTimeInterval.seconds(_:), v17);
  uint64_t v36 = (char *)v1 + qword_1004858E8;
  os_log_t v37 = *(os_log_t *)((char *)v1 + qword_1004858E8);
  os_log_t v38 = *(os_log_t *)((char *)v1 + qword_1004858E8 + 8);
  switch(*((unsigned char *)v1 + qword_1004858E8 + 16))
  {
    case 1:
      unint64_t v42 = v31;
      unint64_t v43 = v184;
      if (!static DispatchTimeInterval.< infix(_:_:)())
      {
        unint64_t v40 = *(void (**)(void *, uint64_t))(v183 + 8);
        uint64_t v99 = v42;
        uint64_t v39 = v182;
        v40(v99, v182);
        uint64_t v41 = v43;
        return ((uint64_t (*)(char *, uint64_t))v40)(v41, v39);
      }
      unint64_t v176 = v42;
      uint64_t v45 = v182;
      uint64_t v44 = v183;
      unint64_t v46 = v171;
      (*(void (**)(char *, char *, uint64_t))(v183 + 16))(v171, v43, v182);
      uint64_t v47 = v32;
      uint64_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v48, v49))
      {
        uint64_t v50 = swift_slowAlloc();
        uint64_t v51 = (void *)swift_slowAlloc();
        int v181 = swift_slowAlloc();
        v187[0] = (uint64_t)v181;
        *(_DWORD *)uint64_t v50 = 138412802;
        os_log_t isa = v48;
        os_log_t v185 = v47;
        uint64_t v52 = v47;
        os_log_t v180 = v47;
        uint64_t v53 = v46;
        uint64_t v54 = v52;
        uint64_t v45 = v182;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v51 = v32;

        *(_WORD *)(v50 + 12) = 2080;
        uint64_t v55 = DispatchTimeInterval.description.getter();
        os_log_t v185 = (os_log_t)sub_100010680(v55, v56, v187);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v183 + 8))(v53, v45);
        *(_WORD *)(v50 + 22) = 2048;
        os_log_t v185 = v37;
        uint64_t v44 = v183;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        os_log_t v57 = isa;
        _os_log_impl((void *)&_mh_execute_header, isa, v49, "%@ did not get the datapath request acknowledgement for %s, retry #%ld", (uint8_t *)v50, 0x20u);
        sub_100010BCC(&qword_10047CC30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v44 + 8))(v46, v45);
      }
      id v58 = v184;
      uint64_t v31 = v176;
      sub_1002CB820();
      goto LABEL_63;
    case 2:
      id v58 = v184;
      if (!static DispatchTimeInterval.< infix(_:_:)())
      {
        uint64_t v39 = v182;
        unint64_t v40 = *(void (**)(void *, uint64_t))(v183 + 8);
        v40(v31, v182);
        uint64_t v41 = v58;
        return ((uint64_t (*)(char *, uint64_t))v40)(v41, v39);
      }
      unint64_t v176 = v31;
      uint64_t v45 = v182;
      uint64_t v44 = v183;
      uint64_t v59 = v172;
      (*(void (**)(char *, char *, uint64_t))(v183 + 16))(v172, v58, v182);
      os_log_type_t v60 = v32;
      unint64_t v61 = Logger.logObject.getter();
      os_log_type_t v62 = static os_log_type_t.error.getter();
      int v63 = v62;
      if (os_log_type_enabled(v61, v62))
      {
        uint64_t v64 = swift_slowAlloc();
        uint64_t v65 = (void *)swift_slowAlloc();
        int v181 = swift_slowAlloc();
        v187[0] = (uint64_t)v181;
        *(_DWORD *)uint64_t v64 = 138412802;
        os_log_t v180 = v61;
        os_log_t v185 = v60;
        LODWORD(isa) = v63;
        uint64_t v66 = v60;
        uint64_t v45 = v182;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v65 = v32;

        *(_WORD *)(v64 + 12) = 2080;
        uint64_t v67 = DispatchTimeInterval.description.getter();
        os_log_t v185 = (os_log_t)sub_100010680(v67, v68, v187);
        id v58 = v184;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v183 + 8))(v59, v45);
        *(_WORD *)(v64 + 22) = 2048;
        os_log_t v185 = v38;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        os_log_t v69 = v180;
        _os_log_impl((void *)&_mh_execute_header, v180, (os_log_type_t)isa, "%@ did not get the datapath confirmation acknowledgement for %s, retry #%ld", (uint8_t *)v64, 0x20u);
        sub_100010BCC(&qword_10047CC30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v44 = v183;
        swift_slowDealloc();
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v44 + 8))(v59, v45);
      }
      uint64_t v31 = v176;
      sub_1002CC2FC();
      goto LABEL_63;
    case 3:
      id v70 = v181;
      uint64_t v45 = v182;
      uint64_t v71 = v184;
      if (*((unsigned char *)v1 + qword_1004858C8))
      {
        swift_unownedRetainStrong();
        uint64_t v72 = (char *)v1 + qword_1004858A8;
        swift_beginAccess();
        uint64_t v73 = v169;
        sub_10035665C(*(unsigned __int16 *)(v72 + 25) | ((unint64_t)*(unsigned int *)(v72 + 27) << 16), v169);
        swift_release();
        uint64_t v74 = v174;
        sub_1000136F4(v73 + *(int *)(v170 + 32), v174, &qword_100484CF8);
        sub_1002D7614(v73, type metadata accessor for NANPeer);
        uint64_t v75 = v173;
        sub_1000136F4(v74, v173, &qword_100484CF8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, NSObject *))(v175 + 48))(v75, 1, v176) == 1)
        {
          sub_1000380B4(v74, &qword_100484CF8);
        }
        else
        {
          uint64_t v114 = v75;
          uint64_t v115 = v167;
          sub_1002D75AC(v114, v167, type metadata accessor for NANPeer.LastBeaconInformation);
          uint64_t v116 = *(void *)(v115 + 8);
          sub_1002D7614(v115, type metadata accessor for NANPeer.LastBeaconInformation);
          sub_1000380B4(v74, &qword_100484CF8);
          uint64_t v117 = *(void **)((char *)v1 + qword_1004858B0);
          if (v117)
          {
            int64_t v118 = 0x7FFFFFFFLL;
            if (v116 < 0x7FFFFFFF) {
              int64_t v118 = v116;
            }
            if (v118 <= (uint64_t)0xFFFFFFFF80000000) {
              unint64_t v119 = 0xFFFFFFFF80000000;
            }
            else {
              unint64_t v119 = v118;
            }
            [v117 datapathUpdatedPeerRSSI:v119];
          }
        }
      }
      unint64_t v176 = v31;
      swift_unownedRetainStrong();
      v120 = v178;
      WiFiInterface.preferences.getter();
      swift_release();
      os_log_t v121 = v180;
      uint64_t v122 = Preferences.enableUserspaceP2POptions.getter((uint64_t)v180);
      ((void (*)(char *, os_log_t))isa[1].isa)(v120, v121);
      uint64_t v123 = *(void *)PreferenceDefaults.EnableUserspaceP2POptions.keepAliveTermination.unsafeMutableAddressor() & ~v122;
      uint64_t v44 = v183;
      uint64_t v124 = *(void (**)(char *, char *, uint64_t))(v183 + 16);
      uint64_t v125 = v177;
      v124(v177, v71, v45);
      if (v123)
      {
        uint64_t v128 = *(void (**)(char *, uint64_t))(v44 + 8);
        v128(v125, v45);
      }
      else
      {
        uint64_t v126 = NANConstants.keepAliveTimeout.unsafeMutableAddressor();
        v124((char *)v70, (char *)v126, v45);
        BOOL v127 = static DispatchTimeInterval.< infix(_:_:)();
        uint64_t v128 = *(void (**)(char *, uint64_t))(v44 + 8);
        v128((char *)v70, v45);
        v128(v125, v45);
        if (v127)
        {
          uint64_t v129 = v32;
          v124(v168, v71, v45);
          id v130 = v32;
          id v131 = Logger.logObject.getter();
          os_log_type_t v132 = static os_log_type_t.error.getter();
          int v133 = v132;
          if (os_log_type_enabled(v131, v132))
          {
            uint64_t v134 = swift_slowAlloc();
            LODWORD(v180) = v133;
            uint64_t v135 = v134;
            uint64_t v136 = (void *)swift_slowAlloc();
            int v181 = swift_slowAlloc();
            os_log_t v185 = v181;
            *(_DWORD *)uint64_t v135 = 138412546;
            os_log_t isa = v131;
            uint64_t v186 = (uint64_t)v130;
            id v137 = v130;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *uint64_t v136 = v129;

            uint64_t v45 = v182;
            *(_WORD *)(v135 + 12) = 2080;
            long long v138 = v168;
            uint64_t v139 = DispatchTimeInterval.description.getter();
            uint64_t v186 = sub_100010680(v139, v140, (uint64_t *)&v185);
            uint64_t v44 = v183;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            v128(v138, v45);
            os_log_t v141 = isa;
            _os_log_impl((void *)&_mh_execute_header, isa, (os_log_type_t)v180, "%@ will be terminated because no keep alive was received for %s", (uint8_t *)v135, 0x16u);
            sub_100010BCC(&qword_10047CC30);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            v128(v168, v45);
          }
          id v58 = v184;
          uint64_t v31 = v176;
          sub_1002CBCAC();
          goto LABEL_63;
        }
      }
      v128((char *)v176, v45);
      return ((uint64_t (*)(char *, uint64_t))v128)(v71, v45);
    case 4:
      if (!((unint64_t)v37 | (unint64_t)v38))
      {
        uint64_t v101 = v181;
        uint64_t v100 = v182;
        v181->os_log_t isa = (Class)2;
        v35(v101, v34, v100);
        uint64_t v45 = v100;
        uint64_t v102 = v184;
        LOBYTE(v100) = static DispatchTimeInterval.< infix(_:_:)();
        uint64_t v44 = v183;
        unint64_t v103 = *(void (**)(NSObject *, uint64_t))(v183 + 8);
        v103(v101, v45);
        if (v100)
        {
          swift_unownedRetainStrong();
          sub_100354870();
          swift_release();
          swift_beginAccess();
          char v104 = sub_1002DA158();
          swift_release();
          if ((v104 & 1) == 0)
          {
            uint64_t v143 = v165;
            (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v165, v184, v45);
            unint64_t v144 = v32;
            uint64_t v145 = Logger.logObject.getter();
            os_log_type_t v146 = static os_log_type_t.default.getter();
            LODWORD(v181) = v146;
            if (os_log_type_enabled(v145, v146))
            {
              uint64_t v147 = swift_slowAlloc();
              unint64_t v176 = v31;
              uint64_t v148 = v147;
              long long v149 = (char *)swift_slowAlloc();
              unint64_t v178 = v149;
              os_log_t v180 = (os_log_t)swift_slowAlloc();
              os_log_t v185 = v180;
              *(_DWORD *)uint64_t v148 = 138412802;
              os_log_t isa = v145;
              uint64_t v186 = (uint64_t)v144;
              unint64_t v150 = v144;
              unint64_t v177 = v144;
              os_log_type_t v151 = v150;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(void *)long long v149 = v32;

              *(_WORD *)(v148 + 12) = 2080;
              uint64_t v152 = v165;
              uint64_t v153 = DispatchTimeInterval.description.getter();
              uint64_t v186 = sub_100010680(v153, v154, (uint64_t *)&v185);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              v103(v152, v182);
              *(_WORD *)(v148 + 22) = 2080;
              unint64_t v156 = *(void **)v36;
              uint64_t v155 = *((void *)v36 + 1);
              char v157 = v36[16];
              sub_1002D5EA4(*(void **)v36, v155, v157);

              unint64_t v158 = sub_1002C97DC((uint64_t)v156, v155, v157);
              unint64_t v160 = v159;
              uint64_t v161 = v156;
              uint64_t v45 = v182;
              sub_1002D5EFC(v161, v155, v157);
              uint64_t v186 = sub_100010680(v158, v160, (uint64_t *)&v185);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              uint64_t v44 = v183;
              swift_bridgeObjectRelease();
              os_log_t v162 = isa;
              _os_log_impl((void *)&_mh_execute_header, isa, (os_log_type_t)v181, "%@ will attempt to retry request since its been %s in %s", (uint8_t *)v148, 0x20u);
              sub_100010BCC(&qword_10047CC30);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_arrayDestroy();
              swift_slowDealloc();
              uint64_t v31 = v176;
              swift_slowDealloc();
            }
            else
            {

              v103(v143, v45);
            }
            sub_1002D7498(0, 0, 1);
            sub_1002CB820();
LABEL_62:
            id v58 = v184;
LABEL_63:
            int v163 = *(void (**)(void *, uint64_t))(v44 + 8);
            v163(v31, v45);
            return ((uint64_t (*)(char *, uint64_t))v163)(v58, v45);
          }
          char v105 = v31;
          uint64_t v106 = NANConstants.keepAliveTimeout.unsafeMutableAddressor();
          (*(void (**)(NSObject *, uint64_t, uint64_t))(v44 + 16))(v101, v106, v45);
          unint64_t v107 = v184;
          BOOL v108 = static DispatchTimeInterval.< infix(_:_:)();
          v103(v101, v45);
          if (v108) {
            sub_1002CA4C4(1, 0xD000000000000027, 0x80000001003DFEA0);
          }
          v103(v105, v45);
          uint64_t v109 = v107;
        }
        else
        {
          v103(v31, v45);
          uint64_t v109 = v102;
        }
        return ((uint64_t (*)(char *, uint64_t))v103)(v109, v45);
      }
      if (!((unint64_t)v37 ^ 1 | (unint64_t)v38))
      {
        uint64_t v76 = v184;
        BOOL v77 = static DispatchTimeInterval.< infix(_:_:)();
        uint64_t v45 = v182;
        uint64_t v44 = v183;
        if (!v77)
        {
          uint64_t v142 = *(void (**)(void *, uint64_t))(v183 + 8);
          v142(v31, v182);
          return ((uint64_t (*)(char *, uint64_t))v142)(v76, v45);
        }
        uint64_t v78 = v166;
        (*(void (**)(char *, char *, uint64_t))(v183 + 16))(v166, v76, v182);
        uint64_t v79 = v32;
        uint64_t v80 = Logger.logObject.getter();
        os_log_type_t v81 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v80, v81))
        {
          uint64_t v82 = swift_slowAlloc();
          unint64_t v176 = v31;
          uint64_t v83 = v82;
          unint64_t v84 = (void *)swift_slowAlloc();
          int v181 = swift_slowAlloc();
          v187[0] = (uint64_t)v181;
          *(_DWORD *)uint64_t v83 = 138412546;
          os_log_t v180 = v80;
          os_log_t v185 = v79;
          uint64_t v85 = v79;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *unint64_t v84 = v32;

          uint64_t v45 = v182;
          *(_WORD *)(v83 + 12) = 2080;
          uint64_t v86 = DispatchTimeInterval.description.getter();
          os_log_t v185 = (os_log_t)sub_100010680(v86, v87, v187);
          uint64_t v44 = v183;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v44 + 8))(v78, v45);
          os_log_t v88 = v180;
          _os_log_impl((void *)&_mh_execute_header, v180, v81, "%@ will be terminated because no response was received for %s", (uint8_t *)v83, 0x16u);
          sub_100010BCC(&qword_10047CC30);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v31 = v176;
          swift_slowDealloc();
        }
        else
        {

          (*(void (**)(char *, uint64_t))(v44 + 8))(v78, v45);
        }
        sub_1002CBCAC();
        goto LABEL_62;
      }
      uint64_t v110 = NANConstants.serviceTerminateEventTimeout.unsafeMutableAddressor();
      uint64_t v45 = v182;
      uint64_t v44 = v183;
      uint64_t v111 = v181;
      (*(void (**)(NSObject *, uint64_t, uint64_t))(v183 + 16))(v181, v110, v182);
      id v58 = v184;
      BOOL v112 = static DispatchTimeInterval.< infix(_:_:)();
      uint64_t v113 = *(void (**)(NSObject *, uint64_t))(v44 + 8);
      v113(v111, v45);
      if (v112)
      {
        sub_1002CA4C4(2, 0xD000000000000026, 0x80000001003DF1C0);
        goto LABEL_63;
      }
      v113(v31, v45);
      return ((uint64_t (*)(char *, uint64_t))v113)(v58, v45);
    default:
      if (v37)
      {
        swift_unownedRetainStrong();
        sub_100354870();
        swift_release();
        swift_beginAccess();
        char v89 = sub_1002DA158();
        swift_release();
        if ((v89 & 1) == 0)
        {
          sub_1002CB148();
          uint64_t v45 = v182;
          uint64_t v44 = v183;
          id v58 = v184;
          goto LABEL_63;
        }
        uint64_t v90 = v31;
        uint64_t v91 = NANConstants.keepAliveTimeout.unsafeMutableAddressor();
        uint64_t v92 = v182;
        uint64_t v93 = v183;
        uint64_t v94 = v181;
        (*(void (**)(NSObject *, uint64_t, uint64_t))(v183 + 16))(v181, v91, v182);
        unint64_t v95 = v184;
        BOOL v96 = static DispatchTimeInterval.< infix(_:_:)();
        uint64_t v97 = *(void (**)(NSObject *, uint64_t))(v93 + 8);
        v97(v94, v92);
        if (v96) {
          sub_1002CA4C4(1, 0xD000000000000025, 0x80000001003DFEF0);
        }
        v97(v90, v92);
        return ((uint64_t (*)(char *, uint64_t))v97)(v95, v92);
      }
      else
      {
        uint64_t v39 = v182;
        unint64_t v40 = *(void (**)(void *, uint64_t))(v183 + 8);
        v40(v31, v182);
        uint64_t v41 = v184;
        return ((uint64_t (*)(void, void))v40)(v41, v39);
      }
  }
}

uint64_t sub_1002D257C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  unint64_t v6 = (uint64_t *)((char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v8 = (void *)*v7;
  *unint64_t v6 = *v7;
  (*(void (**)(uint64_t *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v4 + 8))(v6, v3);
  if (v8)
  {
    uint64_t v11 = v1 + qword_1004858A8;
    swift_beginAccess();
    sub_1002D872C(a1, v11);
    return swift_endAccess();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1002D26C4(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  swift_unownedRetainStrong();
  BOOL v6 = sub_1003568D0();
  swift_release();
  if (v6)
  {
    uint64_t v7 = &v2[qword_1004858A8];
    swift_beginAccess();
    sub_1000136F4((uint64_t)(v7 + 104), (uint64_t)&v48, (uint64_t *)&unk_100485B50);
    if (v49)
    {
      if (v49 == 1)
      {
        sub_1000380B4((uint64_t)&v48, (uint64_t *)&unk_100485B50);
      }
      else
      {
        sub_10006EF50(&v48, (uint64_t)v50);
        uint64_t v8 = qword_1004858F8;
        if (v2[qword_1004858F8] == 1)
        {
          uint64_t v9 = v51;
          uint64_t v10 = v52;
          sub_1000369C4(v50, v51);
          (*(void (**)(unint64_t, uint64_t, uint64_t))(v10 + 16))(*(unsigned __int16 *)(v7 + 25) | ((unint64_t)*(unsigned int *)(v7 + 27) << 16), v9, v10);
          v2[v8] = 0;
          sub_100010754((uint64_t)v50);
          return;
        }
        sub_100010754((uint64_t)v50);
      }
    }
    else
    {
      sub_1001B7BFC((uint64_t)&v48);
    }
  }
  uint64_t v11 = v2;
  swift_bridgeObjectRetain_n();
  uint64_t v12 = v11;
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    unint64_t v46 = (void *)swift_slowAlloc();
    v50[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 138412546;
    *(void *)&long long v48 = v12;
    os_log_type_t v16 = v12;
    uint64_t v17 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v46 = v3;

    uint64_t v12 = v16;
    *(_WORD *)(v15 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(void *)&long long v48 = sub_100010680(a1, a2, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%@ is unsatisfiable, will terminate because %s", (uint8_t *)v15, 0x16u);
    sub_100010BCC(&qword_10047CC30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  if (v12[qword_1004858E8 + 16] != 3) {
    goto LABEL_54;
  }
  uint64_t v18 = &v12[qword_1004858A8];
  swift_beginAccess();
  sub_1000136F4((uint64_t)(v18 + 104), (uint64_t)&v48, (uint64_t *)&unk_100485B50);
  if (!v49)
  {
    sub_1001B7BFC((uint64_t)&v48);
    goto LABEL_54;
  }
  if (v49 != 1)
  {
    sub_10006EF50(&v48, (uint64_t)v50);
    uint64_t v19 = v51;
    uint64_t v20 = v52;
    sub_1000369C4(v50, v51);
    uint64_t v21 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v20 + 32))(*(unsigned __int16 *)(v18 + 25) | ((unint64_t)*(unsigned int *)(v18 + 27) << 16), v19, v20);
    if (!v21)
    {
LABEL_53:
      sub_100010754((uint64_t)v50);
      goto LABEL_54;
    }
    uint64_t v22 = v21;
    uint64_t v23 = v12;
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v24, v25))
    {

      goto LABEL_30;
    }
    uint64_t v47 = v3;
    uint64_t v26 = swift_slowAlloc();
    uint64_t v27 = (void *)swift_slowAlloc();
    *(void *)&long long v48 = swift_slowAlloc();
    *(_DWORD *)uint64_t v26 = 138412546;
    uint64_t v28 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v27 = v47;

    *(_WORD *)(v26 + 12) = 2080;
    if (v22 == 1)
    {
      uint64_t v30 = 0xD000000000000014;
      uint64_t v32 = "IR Policy For 2.4GHz";
    }
    else
    {
      if (v22 != 3)
      {
        uint64_t v29 = v24;
        uint64_t v30 = 0xD000000000000011;
        if (v22 == 2) {
          uint64_t v31 = "IR Policy for DFS";
        }
        else {
          uint64_t v31 = "Unknown IR Policy";
        }
        unint64_t v33 = (unint64_t)(v31 - 32) | 0x8000000000000000;
        goto LABEL_29;
      }
      uint64_t v30 = 0xD00000000000001BLL;
      uint64_t v32 = "IR Policy for Multiple 5GHz";
    }
    unint64_t v33 = (unint64_t)(v32 - 32) | 0x8000000000000000;
    uint64_t v29 = v24;
LABEL_29:
    sub_100010680(v30, v33, (uint64_t *)&v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v29, v25, "%@ terminating because of unsatisfiable internet sharing policy %s", (uint8_t *)v26, 0x16u);
    sub_100010BCC(&qword_10047CC30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

LABEL_30:
    uint64_t v34 = qword_1004858B0;
    unint64_t v35 = *(void **)&v23[qword_1004858B0];
    if (v35) {
      [v35 datapathUpdatedInternetSharingPolicy:v22];
    }
    uint64_t v36 = &v23[qword_1004858B8];
    swift_beginAccess();
    uint64_t v37 = *(void *)v36;
    if (*(void *)v36 >> 62)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
      if (!v38) {
        goto LABEL_41;
      }
    }
    else
    {
      uint64_t v38 = *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (!v38) {
        goto LABEL_41;
      }
    }
    if (v38 < 1)
    {
      __break(1u);
      goto LABEL_57;
    }
    for (uint64_t i = 0; i != v38; ++i)
    {
      if ((v37 & 0xC000000000000001) != 0)
      {
        unint64_t v40 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        unint64_t v40 = *(void **)(v37 + 8 * i + 32);
        swift_unknownObjectRetain();
      }
      [v40 datapathUpdatedInternetSharingPolicy:v22];
      swift_unknownObjectRelease();
    }
LABEL_41:
    swift_bridgeObjectRelease_n();
    uint64_t v41 = *(void **)&v23[v34];
    if (v41) {
      [v41 datapathTerminatedWithReason:4];
    }
    uint64_t v42 = *(void *)v36;
    if (*(void *)v36 >> 62)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v43 = _CocoaArrayWrapper.endIndex.getter();
      if (v43)
      {
LABEL_45:
        if (v43 >= 1)
        {
          for (uint64_t j = 0; j != v43; ++j)
          {
            if ((v42 & 0xC000000000000001) != 0)
            {
              uint64_t v45 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else
            {
              uint64_t v45 = *(void **)(v42 + 8 * j + 32);
              swift_unknownObjectRetain();
            }
            [v45 datapathTerminatedWithReason:4];
            swift_unknownObjectRelease();
          }
          goto LABEL_52;
        }
LABEL_57:
        __break(1u);
        return;
      }
    }
    else
    {
      uint64_t v43 = *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (v43) {
        goto LABEL_45;
      }
    }
LABEL_52:
    swift_bridgeObjectRelease_n();
    *(void *)&v23[v34] = 0;
    swift_unknownObjectRelease();
    *(void *)uint64_t v36 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    goto LABEL_53;
  }
  sub_1000380B4((uint64_t)&v48, (uint64_t *)&unk_100485B50);
LABEL_54:
  sub_1002CBCAC();
}

uint64_t sub_1002D2ED0(uint64_t a1)
{
  sub_100010BCC((uint64_t *)&unk_100485B60);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = v1 + qword_100485910;
  swift_beginAccess();
  uint64_t v6 = a1 + *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation(0) + 28);
  uint64_t v7 = v6 + *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0) + 48);
  sub_1000380B4(v7, (uint64_t *)&unk_100485B60);
  sub_1000136F4(v5, v7, (uint64_t *)&unk_100485B60);
  swift_endAccess();
  uint64_t v8 = type metadata accessor for NANInternetSharingStatistics.Requester();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v4, 1, 1, v8);
  swift_beginAccess();
  sub_10006D1A4((uint64_t)v4, v5, (uint64_t *)&unk_100485B60);
  return swift_endAccess();
}

uint64_t sub_1002D3024()
{
  uint64_t v1 = type metadata accessor for DispatchTime();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t result = __chkstk_darwin();
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v0 + qword_1004858E8 + 16) == 3)
  {
    type metadata accessor for P2PTimer();
    variable initialization expression of AWDLPeer.lastUpdated();
    uint64_t v6 = v0 + qword_1004858E0;
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v2 + 40))(v6, v5, v1);
    return swift_endAccess();
  }
  return result;
}

void sub_1002D3144()
{
  uint64_t v1 = v0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v15 - v4;
  uint64_t v6 = (uint64_t *)(v0 + qword_1004858E8);
  if (*(unsigned __int8 *)(v0 + qword_1004858E8 + 16) - 1 < 3)
  {
LABEL_2:
    uint64_t v7 = *(void *)(v0 + qword_1004858A0);
    swift_unownedRetainStrong();
    sub_1003546AC();
    swift_release();
    swift_unownedRetainStrong();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v7 + *(void *)(*(void *)v7 + 96), AssociatedTypeWitness);
    swift_release();
    uint64_t v8 = (unsigned __int8 *)(v1 + qword_1004858A8);
    swift_beginAccess();
    uint64_t v16 = *(unsigned int *)(v8 + 3);
    uint64_t v9 = *(unsigned __int16 *)(v8 + 1);
    uint64_t v10 = *v8;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 224))(v10, v9 | (v16 << 16), AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, AssociatedTypeWitness);
    sub_1002D7498(0, 0, 4);
    sub_1000136F4((uint64_t)(v8 + 104), (uint64_t)&v17, (uint64_t *)&unk_100485B50);
    if (v18)
    {
      if (v18 == 1) {
        sub_1000380B4((uint64_t)&v17, (uint64_t *)&unk_100485B50);
      }
      else {
        sub_1001B7BFC((uint64_t)&v17);
      }
    }
    else
    {
      sub_1001B7BFC((uint64_t)&v17);
      uint64_t v14 = qword_1004858F8;
      if (*(unsigned char *)(v1 + qword_1004858F8) == 1)
      {
        sub_1002D0718();
        *(unsigned char *)(v1 + v14) = 0;
      }
    }
    return;
  }
  if (!*(unsigned char *)(v0 + qword_1004858E8 + 16))
  {
    sub_1002CB148();
    return;
  }
  uint64_t v13 = *v6;
  uint64_t v12 = v6[1];
  if (v13 | v12)
  {
    if (v13 ^ 1 | v12) {
      return;
    }
    goto LABEL_2;
  }

  sub_1002CA4C4(1, 0xD000000000000030, 0x80000001003DF130);
}

uint64_t sub_1002D3584(uint64_t a1)
{
  sub_1000107A4(a1, (uint64_t)v3);
  sub_100010BCC(&qword_1004862E0);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    sub_1002D35F4(v2);
    return swift_unknownObjectRelease();
  }
  return result;
}

void sub_1002D35F4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = swift_isaMask & *(void *)v1;
  uint64_t v5 = type metadata accessor for DispatchTimeInterval();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (uint8_t **)((char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = qword_1004858B0;
  uint64_t v10 = *(void *)&v1[qword_1004858B0];
  uint64_t v11 = (uint64_t *)&v1[qword_1004858B8];
  if (v10) {
    BOOL v12 = v10 == a1;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    swift_beginAccess();
    if (!((unint64_t)*v11 >> 62))
    {
      if (!*(void *)((*v11 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_20;
      }
LABEL_10:
      swift_beginAccess();
      if ((unint64_t)*v11 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v33)
        {
LABEL_12:
          uint64_t v13 = sub_1002D7428();
          if (v13)
          {
LABEL_16:
            swift_endAccess();
            *(void *)&v2[v9] = v13;
            swift_unknownObjectRelease();
            return;
          }
          if (!((unint64_t)*v11 >> 62))
          {
            uint64_t v14 = *(void *)((*v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
            unint64_t v15 = v14 - 1;
            if (!__OFSUB__(v14, 1))
            {
LABEL_15:
              uint64_t v13 = sub_100397C94(v15);
              goto LABEL_16;
            }
LABEL_38:
            __break(1u);
            return;
          }
LABEL_36:
          swift_bridgeObjectRetain();
          uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          unint64_t v15 = v34 - 1;
          if (!__OFSUB__(v34, 1)) {
            goto LABEL_15;
          }
          goto LABEL_38;
        }
      }
      else if (*(void *)((*v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_12;
      }
      __break(1u);
      goto LABEL_36;
    }
  }
  else
  {
    swift_beginAccess();
    swift_unknownObjectRetain();
    uint64_t v2 = (char *)sub_1002D811C(v11, a1);
    swift_unknownObjectRelease();
    uint64_t v5 = *v11;
    if ((unint64_t)*v11 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = (void *)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if ((uint64_t)v8 >= (uint64_t)v2) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v8 = *(void **)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if ((uint64_t)v8 >= (uint64_t)v2)
      {
LABEL_7:
        sub_1002D843C((uint64_t)v2, (uint64_t)v8);
        swift_endAccess();
        return;
      }
    }
    __break(1u);
  }
  swift_bridgeObjectRetain();
  uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v16) {
    goto LABEL_10;
  }
LABEL_20:
  *(void *)&v2[v9] = 0;
  swift_unknownObjectRelease();
  uint64_t v17 = &v2[qword_1004858A8];
  swift_beginAccess();
  sub_1000136F4((uint64_t)(v17 + 104), (uint64_t)v39, (uint64_t *)&unk_100485B50);
  if (v40)
  {
    if (v40 == 1) {
      sub_1000380B4((uint64_t)v39, (uint64_t *)&unk_100485B50);
    }
    else {
      sub_1001B7BFC((uint64_t)v39);
    }
LABEL_27:
    uint64_t v23 = v2;
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 138412290;
      v39[0] = v23;
      uint64_t v28 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v27 = v2;

      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Terminating %@ because it's client was invalidated", v26, 0xCu);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    sub_1002CBCAC();
    return;
  }
  sub_1001B7BFC((uint64_t)v39);
  if (v2[qword_1004858E8 + 16] != 3) {
    goto LABEL_27;
  }
  uint64_t v18 = v2;
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    os_log_t v38 = v19;
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v36 = (void *)swift_slowAlloc();
    uint64_t v37 = v21;
    *(_DWORD *)uint64_t v21 = 138412290;
    unint64_t v35 = v21 + 4;
    v39[0] = v18;
    uint64_t v22 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v36 = v2;

    uint64_t v19 = v38;
    _os_log_impl((void *)&_mh_execute_header, v38, v20, "Delaying termination of %@ after client invalidation because it is an internet sharing requester", v37, 0xCu);
    sub_100010BCC(&qword_10047CC30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  type metadata accessor for P2PTimer();
  *uint64_t v8 = 10;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchTimeInterval.seconds(_:), v5);
  uint64_t v29 = (void *)*OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v30 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v31 = (void *)swift_allocObject();
  v31[2] = *(void *)(v4 + 80);
  v31[3] = *(void *)(v4 + 88);
  v31[4] = v30;
  id v32 = v29;
  swift_retain();
  static P2PTimer.async(after:on:execute:)((uint64_t)v8, v32, (uint64_t)sub_1002D8720, (uint64_t)v31);

  swift_release();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  swift_release();
}

void sub_1002D3CAC()
{
  uint64_t v0 = type metadata accessor for DispatchPredicate();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (uint64_t *)((char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v5 = (void *)*v4;
  uint64_t *v3 = *v4;
  (*(void (**)(uint64_t *, void, uint64_t))(v1 + 104))(v3, enum case for DispatchPredicate.onQueue(_:), v0);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v1 + 8))(v3, v0);
  if (v5) {
    sub_1002CBCAC();
  }
  else {
    __break(1u);
  }
}

void sub_1002D3DBC(void *a1)
{
  id v1 = a1;
  sub_1002D3CAC();
}

uint64_t sub_1002D3E04(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = swift_isaMask & *v1;
  v23[2] = *(void *)(v5 + 0x58);
  v23[1] = *(void *)(v5 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)v23 - v8;
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v13 = (void *)((char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  unint64_t v15 = (void *)*v14;
  uint64_t *v13 = *v14;
  (*(void (**)(uint64_t *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  id v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v11 + 8))(v13, v10);
  if (v15)
  {
    uint64_t v18 = *(void *)((char *)v2 + qword_1004888A0);
    *(void *)((char *)v2 + qword_1004888A0) = a1;
    sub_1002C9D1C(v18);
    uint64_t v19 = *(void *)((char *)v2 + qword_1004858A0);
    swift_unownedRetainStrong();
    sub_100354870();
    swift_release();
    sub_1002D9C18();
    swift_release();
    swift_unownedRetainStrong();
    sub_100354870();
    swift_release();
    sub_1002D9C44();
    swift_release();
    swift_unownedRetainStrong();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v19 + *(void *)(*(void *)v19 + 96), AssociatedTypeWitness);
    swift_release();
    uint64_t WitnessTable = swift_getWitnessTable();
    unint64_t v21 = sub_100301864(ObjectType, WitnessTable);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 312))(a1, v21 & 0xFFFFFFFFFFFFFFLL, AssociatedTypeWitness, AssociatedConformanceWitness);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1002D4390(void *a1, uint64_t a2, uint64_t a3)
{
  id v4 = a1;
  sub_1002D3E04(a3);
}

uint64_t sub_1002D43E4(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  id v6 = (uint64_t *)&v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v8 = (void *)*v7;
  *id v6 = *v7;
  (*(void (**)(uint64_t *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v4 + 8))(v6, v3);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    return result;
  }
  uint64_t v11 = v1 + qword_1004858A8;
  swift_beginAccess();
  sub_1000136F4(v11 + 104, (uint64_t)v18, (uint64_t *)&unk_100485B50);
  if (v19)
  {
    if (v19 == 1) {
      sub_1000380B4((uint64_t)v18, (uint64_t *)&unk_100485B50);
    }
    else {
      sub_1001B7BFC((uint64_t)v18);
    }
    return a1(3, 0);
  }
  sub_1001B7BFC((uint64_t)v18);
  if (*(unsigned char *)(v1 + qword_100488890 + 6)) {
    return a1(3, 0);
  }
  unint64_t v12 = *(unsigned int *)(v1 + qword_100488890) | ((unint64_t)*(unsigned __int16 *)(v1 + qword_100488890 + 4) << 32);
  unint64_t v14 = *(void *)(v11 + 8);
  unint64_t v13 = *(void *)(v11 + 16);
  swift_unownedRetainStrong();
  unint64_t v15 = sub_100356594();
  swift_bridgeObjectRetain();
  swift_release();
  if ((v15 & 0xFF00000000) == 0x300000000)
  {
    swift_unownedRetainStrong();
    unint64_t v15 = sub_100356538();
    swift_release();
  }
  unint64_t v16 = WiFiNetwork.createRecord()(v14, v13, v12 & 0xFFFFFFFFFFFFLL, v15 & 0xFFFFFFFFFFFFLL);
  swift_bridgeObjectRelease();
  uint64_t v17 = sub_1002C9228(v16);
  swift_bridgeObjectRelease();
  a1(0, v17);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002D464C(void *a1, int a2, void *a3)
{
  return sub_1002D55F4(a1, a2, a3, (uint64_t)&unk_10046A098, (uint64_t)sub_1002D8858, (void (*)(uint64_t, uint64_t))sub_1002D43E4);
}

void sub_1002D4680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    v5.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  else {
    v5.super.Class isa = 0;
  }
  Class isa = v5.super.isa;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
}

uint64_t sub_1002D4710(char a1, uint64_t (*a2)(void))
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (uint64_t *)((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v9 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v10 = (void *)*v9;
  *uint64_t v8 = *v9;
  (*(void (**)(uint64_t *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v6 + 8))(v8, v5);
  if (v10)
  {
    *(unsigned char *)(v2 + qword_1004858C8) = a1 & 1;
    return a2(0);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002D4850(void *a1, int a2, char a3, void *aBlock)
{
  uint64_t v6 = _Block_copy(aBlock);
  *(void *)(swift_allocObject() + 16) = v6;
  id v7 = a1;
  sub_1002D4710(a3, sub_100012A00);

  return swift_release();
}

void sub_1002D48E4(void (*a1)(uint64_t, id), uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v57 = a2;
  id v58 = a1;
  uint64_t v4 = swift_isaMask & *v2;
  uint64_t v56 = *(void *)(v4 + 0x58);
  uint64_t v5 = *(void *)(v4 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  id v9 = &v54.i8[-v8];
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v13 = (uint64_t *)((char *)v54.i64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v14 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  unint64_t v15 = (void *)*v14;
  uint64_t *v13 = *v14;
  (*(void (**)(uint64_t *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  id v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v11 + 8))(v13, v10);
  if (v15)
  {
    uint64_t v17 = (unsigned int *)((char *)v3 + qword_100488890);
    if (*((unsigned char *)v3 + qword_100488890 + 6))
    {
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v18, v19))
      {
        os_log_type_t v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Unable to generate a data session statistics because the datapath referenced doesn't exist or isn't established yet", v20, 2u);
        swift_slowDealloc();
      }

      v58(3, 0);
    }
    else
    {
      uint64_t v21 = *((unsigned __int16 *)v17 + 2);
      int v22 = *v17;
      unint64_t v23 = *v17 | (unint64_t)(v21 << 32);
      uint64_t v24 = *(void *)((char *)v3 + qword_1004858A0);
      swift_unownedRetainStrong();
      (*(void (**)(__int8 *, uint64_t, uint64_t))(v7 + 16))(v9, v24 + *(void *)(*(void *)v24 + 96), AssociatedTypeWitness);
      swift_release();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      id v55 = (id)(*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 336))(v23, AssociatedTypeWitness, AssociatedConformanceWitness);
      v54.i64[0] = v21;
      (*(void (**)(__int8 *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
      uint64_t v26 = (char *)v3 + qword_1004858A8;
      swift_beginAccess();
      sub_1000136F4((uint64_t)(v26 + 104), (uint64_t)&v64, (uint64_t *)&unk_100485B50);
      if (v65)
      {
        if (v65 == 1)
        {
          sub_1000380B4((uint64_t)&v64, (uint64_t *)&unk_100485B50);
        }
        else
        {
          sub_10006EF50(&v64, (uint64_t)aBlock);
          uint64_t v27 = v61;
          uint64_t v28 = v62;
          sub_1000369C4(aBlock, (uint64_t)v61);
          BOOL v29 = (*((uint64_t (**)(void *, void (*)(uint64_t)))v28 + 5))(v27, v28) != 0;
          id v30 = v55;
          [v55 setInfraRelayOperationStatus:v29];
          Class isa = Int._bridgeToObjectiveC()().super.super.isa;
          [v30 setInfraRelayRequestersCount:isa];

          sub_100010754((uint64_t)aBlock);
        }
      }
      else
      {
        sub_1001B7BFC((uint64_t)&v64);
      }
      unsigned __int32 v32 = v54.i32[0];
      uint64_t v33 = *(void **)((char *)v3 + qword_1004858C0);
      if (v33)
      {
        id v34 = v33;
        id v35 = v55;
        WiFiAwareDataSessionStatisticsReport.difference(from:)(v34);
      }
      else
      {
        id v35 = v55;
        *(void *)((char *)v3 + qword_1004858C0) = v55;
        uint64_t v36 = (int *)((char *)v3 + qword_100485900);
        id v37 = v35;
        swift_beginAccess();
        if (!notify_is_valid_token(*v36))
        {
          uint64x2_t v38 = (uint64x2_t)vdupq_n_s64(v23);
          int32x4_t v39 = vuzp1q_s32((int32x4_t)vshlq_u64(v38, (uint64x2_t)xmmword_1003B2EB0), (int32x4_t)vshlq_u64(v38, (uint64x2_t)xmmword_1003B2EA0));
          unsigned __int32 v40 = v32 >> 8;
          *(int16x4_t *)v39.i8 = vmovn_s32(v39);
          int16x8_t v54 = (int16x8_t)v39;
          uint64_t v41 = (void *)*v14;
          uint64_t v42 = swift_allocObject();
          swift_unknownObjectWeakInit();
          uint64_t v43 = swift_allocObject();
          uint64_t v44 = v56;
          *(void *)(v43 + 16) = v5;
          *(void *)(v43 + 24) = v44;
          *(void *)(v43 + 32) = v42;
          *(unsigned char *)(v43 + 40) = v22;
          *(_DWORD *)(v43 + 41) = vmovn_s16(v54).u32[0];
          *(unsigned char *)(v43 + 45) = v40;
          os_log_type_t v62 = sub_1002D8840;
          uint64_t v63 = v43;
          aBlock[0] = (uint64_t)_NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = (uint64_t)sub_100163154;
          unint64_t v61 = &unk_10046A038;
          uint64_t v45 = _Block_copy(aBlock);
          unint64_t v46 = v41;
          swift_release();
          swift_beginAccess();
          uint32_t v47 = notify_register_dispatch("com.apple.airplay.isPlayingAmbientAudioChanged", v36, v46, v45);
          swift_endAccess();
          _Block_release(v45);

          if (v47)
          {
            long long v48 = Logger.logObject.getter();
            os_log_type_t v49 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v48, v49))
            {
              uint64_t v50 = (uint8_t *)swift_slowAlloc();
              aBlock[0] = swift_slowAlloc();
              *(_DWORD *)uint64_t v50 = 136315138;
              unint64_t v51 = static WiFiError.notifyErrorMessage(from:)(v47);
              uint64_t v59 = sub_100010680(v51, v52, aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v48, v49, "Failed to start monitoring statistic reset events with error: %s", v50, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
          }
        }
      }
      id v53 = v35;
      v58(0, v35);
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1002D5230(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v14 - v6;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v9 = (char *)Strong;
    uint64_t v10 = *(void *)(Strong + qword_1004858A0);
    swift_unownedRetainStrong();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v10 + *(void *)(*(void *)v10 + 96), AssociatedTypeWitness);
    swift_release();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 336))(a3 & 0xFFFFFFFFFFFFLL, AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
    uint64_t v13 = *(void **)&v9[qword_1004858C0];
    *(void *)&v9[qword_1004858C0] = v12;
  }
}

uint64_t sub_1002D55C0(void *a1, int a2, void *a3)
{
  return sub_1002D55F4(a1, a2, a3, (uint64_t)&unk_100469FF8, (uint64_t)sub_1002D87F0, (void (*)(uint64_t, uint64_t))sub_1002D48E4);
}

uint64_t sub_1002D55F4(void *a1, int a2, void *aBlock, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  id v9 = _Block_copy(aBlock);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v9;
  id v11 = a1;
  a6(a5, v10);

  return swift_release();
}

uint64_t sub_1002D5688(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (uint64_t *)((char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  id v9 = (void *)*v8;
  *uint64_t v7 = *v8;
  (*(void (**)(uint64_t *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 8))(v7, v4);
  if (v9)
  {
    if (*((unsigned char *)v2 + qword_1004858E8 + 16) == 3)
    {
      id v12 = v2;
      id v13 = a1;
      uint64_t v14 = (char *)v12;
      unint64_t v15 = (char *)v13;
      id v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = swift_slowAlloc();
        os_log_type_t v19 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v18 = 138412546;
        unint64_t v46 = v14;
        os_log_type_t v20 = v14;
        uint64_t v45 = v16;
        uint64_t v21 = v20;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *os_log_type_t v19 = v2;

        *(_WORD *)(v18 + 12) = 2112;
        unint64_t v46 = v15;
        int v22 = v15;
        id v16 = v45;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v19[1] = v15;

        _os_log_impl((void *)&_mh_execute_header, v16, v17, "%@ got an issue report: %@", (uint8_t *)v18, 0x16u);
        sub_100010BCC(&qword_10047CC30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      swift_unownedRetainStrong();
      uint64_t v47 = 0;
      uint64_t v48 = 0xE000000000000000;
      unint64_t v23 = &v14[qword_1004858A8];
      swift_beginAccess();
      os_log_type_t v25 = &v14[qword_100488890];
      if (v14[qword_100488890 + 6])
      {
        LOBYTE(v26) = v23[25];
        LOBYTE(v27) = v23[26];
        v24.i32[0] = *(_DWORD *)(v23 + 27);
        uint64x2_t v28 = (uint64x2_t)vmovl_u8(v24);
      }
      else
      {
        uint64_t v29 = *((unsigned __int16 *)v25 + 2);
        uint64_t v26 = *(unsigned int *)v25;
        unint64_t v30 = v26 | (v29 << 32);
        v31.i64[0] = 0xFFFFFFFFFFFFLL;
        v31.i64[1] = 0xFFFFFFFFFFFFLL;
        uint64x2_t v28 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v30), v31);
        *(int16x4_t *)v28.i8 = vmovn_s32(vuzp1q_s32((int32x4_t)vshlq_u64(v28, (uint64x2_t)xmmword_1003B4FD0), (int32x4_t)vshlq_u64(v28, (uint64x2_t)xmmword_1003B4FE0)));
        unint64_t v27 = v30 >> 8;
      }
      uint32x4_t v32 = vmovl_u16((uint16x4_t)(v28.i64[0] & 0xFF00FF00FF00FFLL));
      v33.i64[0] = v32.u32[0];
      v33.i64[1] = v32.u32[1];
      uint64x2_t v34 = v33;
      v33.i64[0] = v32.u32[2];
      v33.i64[1] = v32.u32[3];
      int8x16_t v35 = vorrq_s8((int8x16_t)vshlq_u64(v34, (uint64x2_t)xmmword_1003D3F00), (int8x16_t)vshlq_u64(v33, (uint64x2_t)xmmword_1003D5EA0));
      v36._countAndFlagsBits = NANPeerServiceIdentifier.description.getter(*(void *)&vorr_s8(*(int8x8_t *)v35.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL)) | ((unint64_t)v27 << 16) | *v23 | ((unint64_t)v26 << 8));
      String.append(_:)(v36);
      swift_bridgeObjectRelease();
      v37._countAndFlagsBits = 0x6374696C47202D20;
      v37._object = (void *)0xEA00000000002068;
      String.append(_:)(v37);
      id v38 = [v15 rtpSequenceNumber];
      if (v38)
      {
        int32x4_t v39 = v38;
        id v40 = [v38 description];

        uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v43 = v42;
      }
      else
      {
        uint64_t v41 = 0;
        uint64_t v43 = (void *)0xE000000000000000;
      }
      v44._countAndFlagsBits = v41;
      v44._object = v43;
      String.append(_:)(v44);
      swift_bridgeObjectRelease();
      sub_100355E38(v47, v48);
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1002D5AF8(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  sub_1002D5688(v4);
}

id sub_1002D5B60(void *a1)
{
  id v1 = a1;
  sub_1002D5BC8();

  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();

  return v2;
}

unint64_t sub_1002D5BC8()
{
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + qword_1004858A8;
  swift_beginAccess();
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x203A6F543C205DLL;
  v3._object = (void *)0xE700000000000000;
  String.append(_:)(v3);
  id v5 = (unsigned int *)(v0 + qword_100488890);
  if (*(unsigned char *)(v0 + qword_100488890 + 6))
  {
    LOBYTE(v6) = *(unsigned char *)(v1 + 25);
    LOBYTE(v7) = *(unsigned char *)(v1 + 26);
    v4.i32[0] = *(_DWORD *)(v1 + 27);
    uint64x2_t v8 = (uint64x2_t)vmovl_u8(v4);
  }
  else
  {
    uint64_t v9 = *((unsigned __int16 *)v5 + 2);
    uint64_t v6 = *v5;
    unint64_t v10 = v6 | (v9 << 32);
    unint64_t v7 = v10 >> 8;
    v11.i64[0] = 0xFFFFFFFFFFFFLL;
    v11.i64[1] = 0xFFFFFFFFFFFFLL;
    uint64x2_t v8 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v10), v11);
    *(int16x4_t *)v8.i8 = vmovn_s32(vuzp1q_s32((int32x4_t)vshlq_u64(v8, (uint64x2_t)xmmword_1003B4FD0), (int32x4_t)vshlq_u64(v8, (uint64x2_t)xmmword_1003B4FE0)));
  }
  uint32x4_t v12 = vmovl_u16((uint16x4_t)(v8.i64[0] & 0xFF00FF00FF00FFLL));
  v13.i64[0] = v12.u32[0];
  v13.i64[1] = v12.u32[1];
  uint64x2_t v14 = v13;
  v13.i64[0] = v12.u32[2];
  v13.i64[1] = v12.u32[3];
  int8x16_t v15 = vorrq_s8((int8x16_t)vshlq_u64(v14, (uint64x2_t)xmmword_1003D5EC0), (int8x16_t)vshlq_u64(v13, (uint64x2_t)xmmword_1003D5EB0));
  v16._countAndFlagsBits = WiFiAddress.description.getter(*(void *)&vorr_s8(*(int8x8_t *)v15.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)) | ((unint64_t)v7 << 8) | v6);
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 8250;
  v17._object = (void *)0xE200000000000000;
  String.append(_:)(v17);
  v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 8254;
  v19._object = (void *)0xE200000000000000;
  String.append(_:)(v19);
  uint64_t v21 = *(void *)(v1 + 8);
  os_log_type_t v20 = *(void **)(v1 + 16);
  swift_bridgeObjectRetain();
  v22._countAndFlagsBits = NANServiceName.description.getter(v21, v20);
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD000000000000016;
}

void sub_1002D5DF0()
{
}

uint64_t _s17InitiatorInstanceCMa()
{
  return sub_100038354();
}

void sub_1002D5E4C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void *sub_1002D5EA4(void *result, uint64_t a2, char a3)
{
  if (a3 == 3)
  {
    id v4 = result;
    return (void *)swift_retain();
  }
  return result;
}

void sub_1002D5EEC(uint64_t a1)
{
}

void sub_1002D5EFC(void *a1, uint64_t a2, char a3)
{
  if (a3 == 3)
  {
    swift_release();
  }
}

uint64_t sub_1002D5F48(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_1002D5EA4(*(void **)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t sub_1002D5F94(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_1002D5EA4(*(void **)a2, v4, v5);
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_1002D5EFC(v6, v7, v8);
  return a1;
}

uint64_t sub_1002D5FEC(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_1002D5EFC(v4, v5, v6);
  return a1;
}

uint64_t sub_1002D6034(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 4) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t sub_1002D607C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 252;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1002D60C0(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 3u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 4);
  }
}

uint64_t sub_1002D60D8(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(void *)uint64_t result = a2 - 4;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 4;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

uint64_t _s17InitiatorInstanceC5StateOMa()
{
  return sub_100038354();
}

NSObject *sub_1002D6128(uint64_t a1, uint64_t a2)
{
  Swift::String v2 = sub_1002D7CEC(a1, a2);
  swift_release();
  return v2;
}

void sub_1002D6170()
{
}

uint64_t sub_1002D619C@<X0>(uint64_t a1@<X8>)
{
  return sub_1002C9768(a1);
}

uint64_t sub_1002D61C4(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002D6204()
{
  unint64_t result = qword_100485AD8;
  if (!qword_100485AD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100485AD8);
  }
  return result;
}

uint64_t sub_1002D6258(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1002D6294(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  int v4 = (id *)(v2 + qword_1004858E8);
  if (*(unsigned char *)(v2 + qword_1004858E8 + 16) != 3) {
    return 0;
  }
  uint64_t v7 = (unsigned int *)(v3 + qword_100488890);
  char v8 = *(unsigned char *)(v3 + qword_100488890 + 6);
  id v9 = *v4;
  unint64_t v10 = v9;
  if (v8)
  {

    return 0;
  }
  unint64_t v12 = *v7 | ((unint64_t)*((unsigned __int16 *)v7 + 2) << 32);
  uint64x2_t v13 = (unsigned __int8 *)(v3 + qword_1004858A8);
  uint64_t v14 = swift_beginAccess();
  uint64_t v15 = *v13;
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 232))(v14);
  id v17 = WiFiAddress.apiAddress.getter(v16 & 0xFFFFFFFFFFFFLL);
  [a1 datapathStartedWithInstanceID:v15 initiatorDataAddress:v17 localInterfaceIndex:WiFiInterface.interfaceIndex.getter()];

  id v18 = WiFiAddress.apiAddress.getter(v12);
  [a1 datapathConfirmedForPeerDataAddress:v18 serviceSpecificInfo:v10];

  uint64_t v19 = qword_1004858B0;
  if (*(void *)(v3 + qword_1004858B0))
  {
    os_log_type_t v20 = (void *)(v3 + qword_1004858B8);
    swift_beginAccess();
    swift_unknownObjectRetain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v20 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v20 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
  }
  else
  {

    *(void *)(v3 + v19) = a1;
    swift_unknownObjectRelease();
    swift_unknownObjectRetain();
  }
  return 1;
}

void sub_1002D6470()
{
  swift_beginAccess();
  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    if (!*(void *)&Strong[qword_1004858B0])
    {
      uint64_t v2 = Strong;
      uint64_t v3 = Logger.logObject.getter();
      os_log_type_t v4 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v3, v4))
      {
        uint64_t v5 = (uint8_t *)swift_slowAlloc();
        char v6 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v5 = 138412290;
        uint64_t v7 = v2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *char v6 = v1;

        _os_log_impl((void *)&_mh_execute_header, v3, v4, "Terminating %@ (after delay) because it's client was invalidated", v5, 0xCu);
        sub_100010BCC(&qword_10047CC30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      sub_1002CBCAC();
    }
  }
}

uint64_t sub_1002D660C(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v13 - v6;
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    id v9 = (void *)result;
    uint64_t v10 = *(void *)(result + qword_1004858A0);
    swift_unownedRetainStrong();
    uint64_t v11 = *(void *)(v10 + *(void *)(*(void *)v10 + 688));
    swift_unownedRetainStrong();
    swift_release();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v11 + *(void *)(*(void *)v11 + 96), AssociatedTypeWitness);
    swift_release();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 168))(a1, a2, AssociatedTypeWitness, AssociatedConformanceWitness);

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  }
  return result;
}

void sub_1002D6A48()
{
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    id v2 = Strong;
    swift_errorRetain();
    id v3 = v2;
    swift_errorRetain();
    os_log_type_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = swift_slowAlloc();
      uint64_t v11 = (void *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 138412802;
      id v7 = v3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v11 = v1;

      *(_WORD *)(v6 + 12) = 2080;
      sub_1002CB6FC();

      uint64_t v8 = WiFiInterface.description.getter();
      unint64_t v10 = v9;
      swift_release();
      sub_100010680(v8, v10, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v6 + 22) = 2112;
      swift_errorRetain();
      uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v11[1] = v12;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%@ internet sharing on %s failed because %@", (uint8_t *)v6, 0x20u);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    sub_1002CBCAC();
  }
}

void sub_1002D6D04(uint64_t a1, void (*a2)(char *, char *, uint64_t), uint64_t a3, uint64_t a4)
{
  int16x8_t v54 = a2;
  uint64_t v56 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  unint64_t v52 = (char *)&v45 - v6;
  sub_100010BCC((uint64_t *)&unk_100485B60);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchTime();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for DispatchTimeInterval();
  uint64_t v13 = *(void *)(v57 - 8);
  __chkstk_darwin();
  id v55 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v16 = (char *)&v45 - v15;
  __chkstk_darwin();
  id v58 = (char *)&v45 - v17;
  swift_beginAccess();
  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v19 = Strong;
    if (Strong[qword_1004888B0 + 8] == 1)
    {
    }
    else
    {
      uint64_t v51 = v5;
      unint64_t v47 = *(void *)&Strong[qword_1004888B0];
      uint64_t v48 = &Strong[qword_100488888];
      os_log_type_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.default.getter();
      BOOL v22 = os_log_type_enabled(v20, v21);
      uint64_t v50 = a3;
      if (v22)
      {
        unint64_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Triggering infrastructure WiFi disconnect", v23, 2u);
        swift_slowDealloc();
      }

      v19[qword_100485908] = 1;
      uint64_t v49 = qword_1004858A0;
      swift_unownedRetainStrong();
      swift_unownedRetainStrong();
      swift_release();
      sub_10033BFD8(0);
      swift_release();
      type metadata accessor for P2PTimer();
      variable initialization expression of AWDLPeer.lastUpdated();
      uint8x8_t v24 = v58;
      DispatchTime.distance(to:)();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      os_log_type_t v25 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
      uint64_t v26 = v13;
      uint64_t v27 = v57;
      int16x8_t v54 = v25;
      v25(v16, v24, v57);
      uint64x2_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = swift_slowAlloc();
        uint64_t v45 = v26;
        int8x16_t v31 = (uint8_t *)v30;
        uint64_t v46 = swift_slowAlloc();
        v60[0] = v46;
        *(_DWORD *)int8x16_t v31 = 136315138;
        uint64_t v48 = (char *)(v31 + 4);
        uint64_t v32 = DispatchTimeInterval.description.getter();
        uint64_t v59 = sub_100010680(v32, v33, v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v34 = v45;
        uint64_t v48 = *(char **)(v45 + 8);
        ((void (*)(char *, uint64_t))v48)(v16, v27);
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "DHCP took %s", v31, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        uint64_t v34 = v26;
        uint64_t v48 = *(char **)(v26 + 8);
        ((void (*)(char *, uint64_t))v48)(v16, v27);
      }
      Swift::String v36 = v52;
      uint64_t v35 = AssociatedTypeWitness;
      uint64_t v37 = v51;
      unint64_t v38 = v47;
      int32x4_t v39 = v55;
      v54(v55, v58, v27);
      if (v38 >= 4) {
        char v40 = 0;
      }
      else {
        char v40 = 0x3040102u >> (8 * v38);
      }
      (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v8, v39, v27);
      uint64_t v41 = type metadata accessor for NANInternetSharingStatistics.Requester();
      v8[*(int *)(v41 + 20)] = v40;
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v8, 0, 1, v41);
      uint64_t v42 = (uint64_t)&v19[qword_100485910];
      swift_beginAccess();
      sub_10006D1A4((uint64_t)v8, v42, (uint64_t *)&unk_100485B60);
      swift_endAccess();
      uint64_t v43 = *(void *)&v19[v49];
      swift_unownedRetainStrong();
      (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v36, v43 + *(void *)(*(void *)v43 + 96), v35);
      swift_release();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 328))(65792, v35, AssociatedConformanceWitness);

      (*(void (**)(char *, uint64_t))(v51 + 8))(v36, v35);
      ((void (*)(char *, uint64_t))v48)(v58, v57);
    }
  }
}

uint64_t sub_1002D7428()
{
  uint64_t v1 = *v0;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v0 = v1;
  if (!result || v1 < 0 || (v1 & 0x4000000000000000) != 0)
  {
    uint64_t result = sub_1003A4FE0(v1);
    uint64_t v1 = result;
    *uint64_t v0 = result;
  }
  uint64_t v3 = v1 & 0xFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    uint64_t v5 = v4 - 1;
    uint64_t v6 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 8 * v5 + 0x20);
    *(void *)(v3 + 16) = v5;
    specialized Array._endMutation()();
    return v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002D7498(void *a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3 + qword_1004858E8;
  uint64_t v5 = *(void **)(v3 + qword_1004858E8);
  uint64_t v6 = *(void *)(v3 + qword_1004858E8 + 8);
  *(void *)uint64_t v4 = a1;
  *(void *)(v4 + 8) = a2;
  char v7 = *(unsigned char *)(v4 + 16);
  *(unsigned char *)(v4 + 16) = a3;
  sub_1002D5EA4(a1, a2, a3);
  sub_1002D5EFC(v5, v6, v7);

  return sub_1002C9B30();
}

uint64_t sub_1002D74FC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1002D7558(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002D75AC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002D7614(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1002D7674(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002D76A4(uint64_t a1)
{
  return a1;
}

void *sub_1002D76D4(void *a1)
{
  uint64_t v2 = a1[5];
  uint64_t v3 = a1[6];
  unint64_t v4 = a1[7];
  sub_10000C95C(a1[3], a1[4]);
  sub_1001331AC(v2, v3, v4);
  return a1;
}

uint64_t sub_1002D7720()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002D7758()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1002D7790()
{
}

uint64_t sub_1002D779C(uint64_t a1, uint64_t a2)
{
  return sub_1002D660C(a1, a2);
}

void sub_1002D77A8()
{
}

uint64_t sub_1002D77B4()
{
  uint64_t v1 = type metadata accessor for DispatchTime();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_1002D7880()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = *(void *)(type metadata accessor for DispatchTime() - 8);
  uint64_t v4 = v0[4];
  uint64_t v5 = (void (*)(char *, char *, uint64_t))((char *)v0
                                                    + ((*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));

  sub_1002D6D04(v4, v5, v1, v2);
}

NSObject *sub_1002D7900(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v2[qword_1004858B0] = 0;
  *(void *)&v2[qword_1004858B8] = _swiftEmptyArrayStorage;
  *(void *)&v2[qword_1004858C0] = 0;
  v2[qword_1004858C8] = 0;
  uint64_t v6 = v2;
  Logger.init(subsystem:category:)();
  char v7 = &v6[qword_100488890];
  *((_WORD *)v7 + 2) = 0;
  *(_DWORD *)char v7 = 0;
  v7[6] = 1;
  uint64_t v8 = &v6[qword_1004858D0];
  *uint64_t v8 = 4;
  v8[1] = 0;
  v8[2] = 0;
  *(_OWORD *)&v6[qword_1004858D8] = xmmword_1003B4AC0;
  swift_unknownObjectWeakInit();
  type metadata accessor for P2PTimer();
  variable initialization expression of AWDLPeer.lastUpdated();
  uint64_t v9 = &v6[qword_1004858E8];
  *(_OWORD *)uint64_t v9 = xmmword_1003B00B0;
  v9[16] = 0;
  v6[qword_1004858F0] = 0;
  v6[qword_1004858F8] = 0;
  *(_DWORD *)&v6[qword_100485900] = -1;
  v6[qword_100485908] = 0;
  *(void *)&v6[qword_1004888A0] = 1;
  uint64_t v10 = &v6[qword_1004888A8];
  uint64_t v11 = type metadata accessor for DispatchTime();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  uint64_t v12 = &v6[qword_100485910];
  uint64_t v13 = type metadata accessor for NANInternetSharingStatistics.Requester();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  uint64_t v14 = &v6[qword_1004888B0];
  *(void *)uint64_t v14 = 0;
  unsigned char v14[8] = 1;
  *(void *)&v6[qword_1004858A0] = a1;
  sub_1002D74FC(a2, (uint64_t)&v6[qword_1004858A8]);
  swift_unownedRetain();

  v22.receiver = v6;
  v22.super_class = ObjectType;
  uint64_t v15 = [super init];
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    id v18 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v21 = (void *)swift_slowAlloc();
    *(_DWORD *)id v18 = 138412290;
    unint64_t v23 = v15;
    uint64_t v19 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v21 = v15;

    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Created %@", v18, 0xCu);
    sub_100010BCC(&qword_10047CC30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v16 = v15;
  }

  sub_1002D7558(a2);
  return v15;
}

NSObject *sub_1002D7CEC(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return sub_1002D7900(a1, a2);
}

uint64_t sub_1002D7D38(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *((void *)v4 + 3) >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = sub_100330164(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t v12 = 32 * a1;
  uint64_t v13 = &v4[32 * a1 + 32];
  sub_100010BCC((uint64_t *)&unk_100485BA0);
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v15 = *((void *)v4 + 2);
  BOOL v16 = __OFSUB__(v15, a2);
  uint64_t v17 = v15 - a2;
  if (v16) {
    goto LABEL_26;
  }
  if ((v17 & 0x8000000000000000) == 0)
  {
    id v18 = &v4[32 * a2 + 32];
    size_t v19 = 32 * v17;
    if (v12 != 32 * a2 || v13 >= &v18[v19]) {
      uint64_t result = (uint64_t)memmove(v13, v18, v19);
    }
    uint64_t v20 = *((void *)v4 + 2);
    BOOL v16 = __OFADD__(v20, v8);
    uint64_t v21 = v20 - v7;
    if (!v16)
    {
      *((void *)v4 + 2) = v21;
LABEL_20:
      *uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1002D7EB4(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v9 <= v4[3] >> 1)
  {
    if (!v8) {
      goto LABEL_24;
    }
  }
  else
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t result = (char *)sub_1000C66CC(result, v11, 1, v4);
    uint64_t v4 = result;
    if (!v8) {
      goto LABEL_24;
    }
  }
  uint64_t v12 = v4[2];
  BOOL v13 = __OFSUB__(v12, a2);
  uint64_t v14 = v12 - a2;
  if (v13) {
    goto LABEL_30;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
    uint64_t result = (char *)v4 + 10 * a1 + 32;
    uint64_t v15 = (char *)v4 + 10 * a2 + 32;
    size_t v16 = 10 * v14;
    if (10 * a1 < 10 * a2 || (result < &v15[v16] ? (BOOL v17 = a1 == a2) : (BOOL v17 = 0), !v17)) {
      uint64_t result = (char *)memmove(result, v15, v16);
    }
    uint64_t v18 = v4[2];
    BOOL v13 = __OFADD__(v18, v8);
    uint64_t v19 = v18 + v8;
    if (!v13)
    {
      _OWORD v4[2] = v19;
LABEL_24:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_31;
  }
LABEL_32:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002D8028(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62) {
    goto LABEL_11;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v5 = 0;
  if (v4)
  {
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v6 = *(void *)(a1 + 8 * v5 + 32);
        swift_unknownObjectRetain();
      }
      swift_unknownObjectRelease();
      if (v6 == a2) {
        break;
      }
      uint64_t v7 = v5 + 1;
      if (__OFADD__(v5, 1))
      {
        __break(1u);
LABEL_11:
        swift_bridgeObjectRetain();
        uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v5 = 0;
        if (!v4) {
          return v5;
        }
      }
      else
      {
        ++v5;
        if (v7 == v4) {
          return 0;
        }
      }
    }
  }
  return v5;
}

uint64_t sub_1002D811C(uint64_t *a1, uint64_t a2)
{
  unint64_t v5 = swift_bridgeObjectRetain();
  unint64_t v6 = sub_1002D8028(v5, a2);
  char v8 = v7;
  swift_bridgeObjectRelease();
  if (v2) {
    return v6;
  }
  if ((v8 & 1) == 0)
  {
    uint64_t v9 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      goto LABEL_54;
    }
    if ((unint64_t)*a1 >> 62)
    {
LABEL_55:
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v9 != v22) {
        goto LABEL_6;
      }
    }
    else if (v9 != *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      for (unint64_t i = v6 + 5; ; ++i)
      {
        unint64_t v11 = i - 4;
        uint64_t v12 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
        {
          uint64_t v13 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if ((v11 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_45:
            __break(1u);
LABEL_46:
            __break(1u);
LABEL_47:
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
            goto LABEL_55;
          }
          if (v11 >= *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_45;
          }
          uint64_t v13 = *(void *)(v12 + 8 * i);
          swift_unknownObjectRetain();
        }
        swift_unknownObjectRelease();
        if (v13 != a2) {
          break;
        }
LABEL_32:
        uint64_t v9 = i - 3;
        if (__OFADD__(v11, 1)) {
          goto LABEL_46;
        }
        if ((unint64_t)*a1 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v19 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        if (v9 == v19) {
          return v6;
        }
      }
      if (v11 == v6)
      {
LABEL_31:
        if (__OFADD__(v6++, 1)) {
          goto LABEL_47;
        }
        goto LABEL_32;
      }
      uint64_t v9 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        uint64_t v14 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v9 = *a1;
        if ((*a1 & 0xC000000000000001) == 0)
        {
LABEL_17:
          if ((v11 & 0x8000000000000000) != 0) {
            goto LABEL_50;
          }
          if (v11 >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_51;
          }
          uint64_t v15 = *(void *)(v9 + 8 * i);
          swift_unknownObjectRetain();
          goto LABEL_20;
        }
      }
      else
      {
        if ((v6 & 0x8000000000000000) != 0) {
          goto LABEL_48;
        }
        if (v6 >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_49;
        }
        uint64_t v14 = *(void *)(v9 + 8 * v6 + 32);
        swift_unknownObjectRetain();
        if ((v9 & 0xC000000000000001) == 0) {
          goto LABEL_17;
        }
      }
      uint64_t v15 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v9 = *a1;
LABEL_20:
      int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v9;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v9 < 0 || (v9 & 0x4000000000000000) != 0)
      {
        uint64_t v9 = sub_1003A4FE0(v9);
        *a1 = v9;
      }
      *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20) = v15;
      swift_unknownObjectRelease();
      specialized Array._endMutation()();
      uint64_t v9 = *a1;
      int v17 = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v9;
      if (!v17 || v9 < 0 || (v9 & 0x4000000000000000) != 0)
      {
        uint64_t v9 = sub_1003A4FE0(v9);
        *a1 = v9;
      }
      if ((v11 & 0x8000000000000000) != 0) {
        goto LABEL_52;
      }
      if (v11 >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_53;
      }
      *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 8 * i) = v14;
      swift_unknownObjectRelease();
      specialized Array._endMutation()();
      goto LABEL_31;
    }
    return v6;
  }
  unint64_t v20 = *a1;
  if (!(v20 >> 62)) {
    return *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t sub_1002D843C(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    if (!(*v3 >> 62))
    {
      if (*(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v18 < v2) {
    goto LABEL_29;
  }
LABEL_4:
  uint64_t v6 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v5 = v4 - v2;
  if (__OFSUB__(0, v6))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v8 = v19 + v5;
    if (!__OFADD__(v19, v5)) {
      goto LABEL_8;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (*v3 >> 62) {
    goto LABEL_32;
  }
  uint64_t v7 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v8 = v7 - v6;
  if (__OFADD__(v7, v5)) {
    goto LABEL_34;
  }
LABEL_8:
  unint64_t v9 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  unint64_t *v3 = v9;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v9 & 0x8000000000000000) != 0
    || (v9 & 0x4000000000000000) != 0
    || (uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8, v8 > *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v9 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      unint64_t *v3 = v9;
      uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_14;
    }
LABEL_35:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  sub_100010BCC(&qword_1004862E0);
  swift_arrayDestroy();
  if (v5)
  {
    if (v9 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v13 = v20 - v2;
      if (!__OFSUB__(v20, v2))
      {
LABEL_17:
        if (v13 < 0)
        {
LABEL_42:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v14 = (const void *)(v11 + 32 + 8 * v2);
        if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v14 + 8 * v13) {
          memmove((void *)(v11 + 32 + 8 * v4), v14, 8 * v13);
        }
        if (!(v9 >> 62))
        {
          uint64_t v15 = *(void *)(v11 + 16);
          uint64_t v16 = v15 + v5;
          if (!__OFADD__(v15, v5))
          {
LABEL_23:
            *(void *)(v11 + 16) = v16;
            goto LABEL_24;
          }
          goto LABEL_41;
        }
LABEL_39:
        swift_bridgeObjectRetain();
        uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v16 = v21 + v5;
        if (!__OFADD__(v21, v5)) {
          goto LABEL_23;
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v12 = *(void *)(v11 + 16);
      uint64_t v13 = v12 - v2;
      if (!__OFSUB__(v12, v2)) {
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_24:

  return specialized Array._endMutation()();
}

void sub_1002D8720()
{
}

uint64_t sub_1002D872C(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_1002D8788()
{
}

uint64_t sub_1002D87B8()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002D87F0()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_1002D8808()
{
  swift_release();

  return _swift_deallocObject(v0, 46, 7);
}

void sub_1002D8840(uint64_t a1)
{
  sub_1002D5230(a1, *(void *)(v1 + 32), *(unsigned __int16 *)(v1 + 40) | ((unint64_t)*(unsigned int *)(v1 + 42) << 16));
}

void sub_1002D8858(uint64_t a1, uint64_t a2)
{
  sub_1002D4680(a1, a2, *(void *)(v2 + 16));
}

void sub_1002D8874()
{
  type metadata accessor for Logger();
  if (v0 <= 0x3F)
  {
    type metadata accessor for DispatchTime();
    if (v1 <= 0x3F)
    {
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      swift_getAssociatedTypeWitness();
      if (v2 <= 0x3F)
      {
        sub_1002DD278();
        if (v3 <= 0x3F)
        {
          sub_1002EA174(319, &qword_100485CB8, (void (*)(uint64_t))type metadata accessor for PriorityRadioConstraint);
          if (v4 <= 0x3F)
          {
            sub_1002DD2D4();
            if (v5 <= 0x3F) {
              swift_initClassMetadata2();
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1002D8B3C(uint64_t a1)
{
  swift_beginAccess();
  type metadata accessor for NANDiscoveryEngine.UnownedDeviceLink();
  sub_1002FE310();
  Dictionary.subscript.getter();
  uint64_t v2 = v6;
  swift_endAccess();
  if (v6)
  {
    uint64_t v3 = swift_unownedRetainStrong();
    sub_1002FF504(v3);
  }
  else
  {
    type metadata accessor for NANDeviceLink();
    uint64_t v4 = swift_unownedRetainStrong();
    uint64_t v2 = sub_1003083B4(v4, a1 & 0xFFFFFFFFFFFFLL);
    swift_unownedRetain();
    swift_beginAccess();
    type metadata accessor for Dictionary();
    Dictionary.subscript.setter();
    swift_endAccess();
  }
  return v2;
}

uint64_t sub_1002D8D24(uint64_t a1)
{
  KeyPath = (void *)swift_getKeyPath();
  sub_1002EC668(a1, KeyPath, 0);
  return swift_release();
}

uint64_t sub_1002D8DAC(void (*a1)(uint64_t *__return_ptr, char *))
{
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_10047F2A8);
  __chkstk_darwin();
  unint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000136F4(v1, (uint64_t)v9, &qword_10047F2A8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v9, 1, v4) == 1) {
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v9, v4);
  a1(&v12, v7);
  if (v2) {
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v12;
}

uint64_t sub_1002D8F80@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  if (a2)
  {
    uint64_t v10 = result;
    uint64_t v11 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000) == 0) {
      uint64_t v11 = result & 0xFFFFFFFFFFFFLL;
    }
    if (v11)
    {
      uint64_t v14 = a6 & 0xFFFFFFFFFFFFLL;
      swift_bridgeObjectRetain();
      uint64_t v15 = NANPassphrase.pmk(for:serviceName:publisherAddress:)(a3, a4, a5, v14, v10, a2);
      uint64_t v17 = v16;
      swift_bridgeObjectRelease();
      *a7 = v15;
      a7[1] = v17;
      return swift_bridgeObjectRelease();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(_OWORD *)a7 = xmmword_1003B4AC0;
  }
  return result;
}

void *sub_1002D904C(void *(*a1)(uint64_t *__return_ptr, __int16 *), uint64_t a2, unint64_t a3)
{
  if ((a3 & 0x1000000000000) != 0)
  {
    int v5 = 0;
  }
  else
  {
    __int16 v7 = a3;
    char v8 = BYTE2(a3);
    char v9 = BYTE3(a3);
    char v10 = BYTE4(a3);
    char v11 = BYTE5(a3);
    uint64_t result = a1(&v12, &v7);
    if (v3) {
      return result;
    }
    int v5 = v12;
  }
  return (void *)(v5 | ((HIWORD(a3) & 1) << 8));
}

void *sub_1002D90E4(void *(*a1)(uint64_t *__return_ptr, __int16 *), uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x1000000000000) != 0) {
    return (void *)((a3 & 0x1000000000000uLL) >> 48);
  }
  __int16 v6 = a3;
  char v7 = BYTE2(a3);
  char v8 = BYTE3(a3);
  char v9 = BYTE4(a3);
  char v10 = BYTE5(a3);
  uint64_t result = a1(&v11, &v6);
  if (!v3) {
    return (void *)((a3 & 0x1000000000000uLL) >> 48);
  }
  return result;
}

void *sub_1002D9168(void *(*a1)(uint64_t *__return_ptr, __int16 *), uint64_t a2, int a3)
{
  if ((a3 & 0x10000) != 0) {
    return (void *)((a3 & 0x10000u) >> 16);
  }
  __int16 v6 = a3;
  uint64_t result = a1(&v7, &v6);
  if (!v3) {
    return (void *)((a3 & 0x10000u) >> 16);
  }
  return result;
}

uint64_t sub_1002D91C4@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v25 = a5;
  uint64_t v26 = a2;
  uint64_t v28 = a4;
  uint64_t v27 = a1;
  uint64_t v24 = *(void *)(a3 - 8);
  uint64_t v10 = __chkstk_darwin(a1);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v10);
  uint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v6);
  uint64_t v22 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1, v14) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
    v27(v18, v12);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    if (v7) {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v24 + 32))(v25, v12, a3);
    }
    uint64_t v22 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(a6, v22, 1);
}

void sub_1002D946C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  uint64_t v10 = *v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v22 - v13;
  uint64_t v15 = *(uint64_t *)((char *)v6 + *(void *)(v10 + 280));
  swift_unownedRetainStrong();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v15 + *(void *)(*(void *)v15 + 96), AssociatedTypeWitness);
  swift_release();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 224))(a1, a2 & 0xFFFFFFFFFFFFLL, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, AssociatedTypeWitness);
  swift_bridgeObjectRetain_n();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    v26[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 136315650;
    uint64_t v20 = WiFiAddress.description.getter(v23 & 0xFFFFFFFFFFFFLL);
    uint64_t v25 = sub_100010680(v20, v21, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 256;
    LOBYTE(v25) = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v19 + 15) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v25 = sub_100010680(v24, a5, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Terminated datapath request from %s[%hhu] because %s", (uint8_t *)v19, 0x19u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
}

NSObject *sub_1002D9A28(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(*v1 + 80);
  uint64_t v6 = *(void *)(*v1 + 88);
  uint64_t v7 = _s17ResponderInstanceCMa();
  uint64_t v8 = *(uint64_t *)((char *)v2 + *(void *)(v4 + 280));
  swift_unownedRetainStrong();
  sub_10027E64C(a1, (uint64_t)v13);
  char v9 = sub_10027EB70(v8, (uint64_t)v13);
  swift_release();
  swift_unknownObjectWeakAssign();
  uint64_t v10 = v9;
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_1002FEE98((uint64_t)v10, 0);

  swift_beginAccess();
  v13[0] = v5;
  v13[1] = v7;
  v13[2] = v6;
  v13[3] = WitnessTable;
  type metadata accessor for NANDiscoveryEngine.ServiceSession();
  sub_1001B8154();
  type metadata accessor for Dictionary();
  Dictionary.subscript.setter();
  swift_endAccess();
  sub_1002DA638();
  return v10;
}

uint64_t sub_1002D9C04(uint64_t a1)
{
  return sub_1002FD2FC(a1);
}

uint64_t sub_1002D9C18()
{
  return sub_1002E5074();
}

uint64_t sub_1002D9C44()
{
  uint64_t v1 = v0;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v27 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v28 = AssociatedTypeWitness;
  __chkstk_darwin();
  uint64_t v5 = (char *)&v26 - v4;
  uint64_t v6 = swift_checkMetadataState();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  char v9 = (char *)&v26 - v8;
  uint64_t v10 = (uint64_t *)(v0 + qword_100485BC0);
  swift_beginAccess();
  uint64_t v11 = *v10;
  _s17InitiatorInstanceCMa();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  char v12 = sub_1002E4B48(v11);
  uint64_t result = swift_bridgeObjectRelease();
  if (v12)
  {
    uint64_t v14 = (unsigned char *)(v0 + *(void *)(*(void *)v0 + 288));
    if (*v14) {
      return result;
    }
    char v15 = 1;
  }
  else
  {
    uint64_t v16 = (uint64_t *)(v0 + qword_100485BC8);
    swift_beginAccess();
    uint64_t v17 = *v16;
    _s17ResponderInstanceCMa();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    char v15 = sub_1002E4B48(v17);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v14 = (unsigned char *)(v1 + *(void *)(*(void *)v1 + 288));
    if ((v15 & 1) == *v14) {
      return result;
    }
  }
  uint64_t v18 = v15 & 1;
  unsigned char *v14 = v15 & 1;
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v19, v20))
  {
    unint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v21 = 67109120;
    int v29 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "NAN realtime mode has changed to %{BOOL}d", v21, 8u);
    swift_slowDealloc();
  }

  uint64_t v22 = *(void *)(v1 + *(void *)(*(void *)v1 + 280));
  swift_unownedRetainStrong();
  swift_unownedRetainStrong();
  swift_release();
  uint64_t v23 = sub_1003AA744((uint64_t)&off_1004674A0);
  sub_10033B738(v18, (uint64_t)v23);
  swift_release();
  swift_bridgeObjectRelease();
  swift_unownedRetainStrong();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v22 + *(void *)(*(void *)v22 + 112), v6);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 144))(v6, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v24 = v28;
  uint64_t v25 = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 8))(v18, v24, v25);
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v5, v24);
}

uint64_t sub_1002DA158()
{
  uint64_t v1 = (uint64_t *)(v0 + qword_100485BC0);
  swift_beginAccess();
  uint64_t v2 = *v1;
  _s17InitiatorInstanceCMa();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  char v3 = sub_1002E40E0(v2);
  swift_bridgeObjectRelease();
  if (v3)
  {
    char v4 = 1;
  }
  else
  {
    uint64_t v5 = (uint64_t *)(v0 + qword_100485BC8);
    swift_beginAccess();
    uint64_t v6 = *v5;
    _s17ResponderInstanceCMa();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    char v4 = sub_1002E40E0(v6);
    swift_bridgeObjectRelease();
  }
  return v4 & 1;
}

uint64_t sub_1002DA2D8(uint64_t a1)
{
  return sub_1002FD2FC(a1);
}

void *sub_1002DA2EC(void *result)
{
  if (result)
  {
    id v2 = result;
    return (void *)sub_1002DA330(&v2, v1);
  }
  return result;
}

uint64_t sub_1002DA330(id *a1, uint64_t a2)
{
  id v3 = *a1;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*(void *)(a2 + 8) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(a2 + 8) & 0xFFFFFFFFFFFFFF8)
                                                                                    + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  return specialized Array._endMutation()();
}

uint64_t sub_1002DA3B0(uint64_t a1, unint64_t a2)
{
  if (!(a2 >> 62))
  {
    uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain_n();
    if (v3) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain_n();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v3 = result;
  if (!result) {
    return swift_bridgeObjectRelease_n();
  }
LABEL_3:
  if (v3 >= 1)
  {
    uint64_t v5 = 0;
    unint64_t v15 = a2 & 0xC000000000000001;
    do
    {
      if (v15) {
        uint64_t v10 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        uint64_t v10 = (char *)*(id *)(a2 + 8 * v5 + 32);
      }
      uint64_t v11 = v10;
      memset(v18, 0, sizeof(v18));
      char v12 = *(void **)&v10[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection];
      sub_1000136F4((uint64_t)v18, (uint64_t)v16, &qword_10047D0D0);
      uint64_t v13 = v17;
      if (v17)
      {
        sub_1000369C4(v16, v17);
        uint64_t v6 = *(void *)(v13 - 8);
        __chkstk_darwin();
        uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v6 + 16))(v8);
        uint64_t v9 = _bridgeAnythingToObjectiveC<A>(_:)();
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v13);
        sub_100010754((uint64_t)v16);
      }
      else
      {
        uint64_t v9 = 0;
      }
      ++v5;
      [v12 setExportedObject:v9];
      swift_unknownObjectRelease();
      sub_1000380B4((uint64_t)v18, &qword_10047D0D0);
    }
    while (v3 != v5);
    return swift_bridgeObjectRelease_n();
  }
  __break(1u);
  return result;
}

uint64_t sub_1002DA5E4()
{
  return Mirror.init(reflecting:)();
}

uint64_t sub_1002DA624()
{
  return sub_1002DA5E4();
}

uint64_t sub_1002DA638()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = type metadata accessor for DispatchTime();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unownedRetainStrong();
  int v32 = sub_100355DD4();
  swift_release();
  swift_beginAccess();
  uint64_t v7 = *(void *)(v2 + 80);
  uint64_t v8 = *(void *)(v2 + 88);
  uint64_t v9 = _s17InitiatorInstanceCMa();
  swift_bridgeObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v33 = v7;
  uint64_t v34 = v9;
  uint64_t v35 = v8;
  uint64_t v36 = WitnessTable;
  type metadata accessor for NANDiscoveryEngine.ServiceSession();
  sub_1001B8154();
  char v11 = Dictionary.isEmpty.getter();
  swift_bridgeObjectRelease();
  if (v11)
  {
    swift_beginAccess();
    uint64_t v12 = _s17ResponderInstanceCMa();
    swift_bridgeObjectRetain();
    uint64_t v13 = swift_getWitnessTable();
    uint64_t v33 = v7;
    uint64_t v34 = v12;
    uint64_t v35 = v8;
    uint64_t v36 = v13;
    type metadata accessor for NANDiscoveryEngine.ServiceSession();
    char v14 = Dictionary.isEmpty.getter();
    swift_bridgeObjectRelease();
    if (v14)
    {
      unint64_t v15 = (void *)((char *)v1 + qword_100485BD0);
      swift_beginAccess();
      uint64_t v16 = *v15;
      type metadata accessor for NANDiscoveryEngine.UnownedDeviceLink();
      sub_1002FE310();
      uint64_t v30 = v6;
      uint64_t v17 = NANBitmap.Channel.operatingClass.getter(v16);
      uint64_t v29 = (uint64_t)&v29;
      uint64_t v33 = v17;
      __chkstk_darwin();
      uint64_t v31 = v4;
      *(&v29 - 2) = v7;
      *(&v29 - 1) = v8;
      type metadata accessor for Dictionary.Values();
      swift_bridgeObjectRetain();
      swift_getWitnessTable();
      uint64_t v4 = v31;
      Sequence.forEach(_:)();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      uint64_t v6 = v30;
      type metadata accessor for Dictionary();
      Dictionary.removeAll(keepingCapacity:)(0);
      swift_endAccess();
    }
  }
  swift_unownedRetainStrong();
  char v18 = sub_1002DACE0() > 0;
  sub_100356C70(v18);
  swift_release();
  sub_1002E1BD8();
  sub_1002E23E0();
  sub_1002E2C8C();
  sub_1002DC5B8();
  sub_1002D9C44();
  sub_1002EAAA8();
  sub_1002EAD70();
  swift_unownedRetainStrong();
  char v19 = sub_100355DD4();
  swift_release();
  if (v32) {
    uint64_t v20 = 0x64656C62616E65;
  }
  else {
    uint64_t v20 = 0x64656C6261736964;
  }
  if (v32) {
    unint64_t v21 = 0xE700000000000000;
  }
  else {
    unint64_t v21 = 0xE800000000000000;
  }
  if (v19) {
    uint64_t v22 = 0x64656C62616E65;
  }
  else {
    uint64_t v22 = 0x64656C6261736964;
  }
  if (v19) {
    unint64_t v23 = 0xE700000000000000;
  }
  else {
    unint64_t v23 = 0xE800000000000000;
  }
  if (v20 == v22 && v21 == v23) {
    return swift_bridgeObjectRelease_n();
  }
  char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v25 & 1) == 0)
  {
    uint64_t v26 = *(void *)NANDiscoveryWindowIndex.first.unsafeMutableAddressor();
    uint64_t v27 = *(void *)((char *)v1 + qword_100485BD8);
    *(void *)((char *)v1 + qword_100485BD8) = v26;
    sub_1002DB3F8(v27);
    type metadata accessor for P2PTimer();
    variable initialization expression of AWDLPeer.lastUpdated();
    uint64_t v28 = (char *)v1 + qword_100485BF8;
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v4 + 40))(v28, v6, v3);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_1002DAB78()
{
  return sub_1002DAC3C();
}

uint64_t sub_1002DAB84()
{
  return sub_1002DAC3C();
}

uint64_t sub_1002DAB90()
{
  return sub_1002DAC3C();
}

uint64_t (*sub_1002DAB9C(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_1002DABFC;
}

uint64_t sub_1002DABFC(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return sub_1002DA638();
  }
  return result;
}

uint64_t sub_1002DAC30()
{
  return sub_1002DAC3C();
}

uint64_t sub_1002DAC3C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1002DAC84(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(v2 + *a2);
  swift_beginAccess();
  *uint64_t v4 = a1;
  swift_bridgeObjectRelease();
  return sub_1002DA638();
}

uint64_t sub_1002DACE0()
{
  swift_beginAccess();
  _s8InstanceCMa();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  type metadata accessor for NANDiscoveryEngine.ServiceSession();
  uint64_t v0 = Dictionary.count.getter();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  _s8InstanceCMa_0();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  type metadata accessor for NANDiscoveryEngine.ServiceSession();
  uint64_t v1 = Dictionary.count.getter();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v3 = v0 + v1;
  if (__OFADD__(v0, v1))
  {
    __break(1u);
    goto LABEL_6;
  }
  swift_beginAccess();
  _s17InitiatorInstanceCMa();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  type metadata accessor for NANDiscoveryEngine.ServiceSession();
  sub_1001B8154();
  uint64_t v4 = Dictionary.count.getter();
  uint64_t result = swift_bridgeObjectRelease();
  BOOL v5 = __OFADD__(v3, v4);
  uint64_t v6 = v3 + v4;
  if (v5)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  swift_beginAccess();
  _s17ResponderInstanceCMa();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  type metadata accessor for NANDiscoveryEngine.ServiceSession();
  uint64_t v7 = Dictionary.count.getter();
  swift_bridgeObjectRelease();
  uint64_t result = v6 + v7;
  if (__OFADD__(v6, v7)) {
LABEL_7:
  }
    __break(1u);
  return result;
}

uint64_t sub_1002DAFD0()
{
  uint64_t v1 = v0;
  uint64_t v2 = (uint64_t *)(v0 + qword_100485BB0);
  swift_beginAccess();
  uint64_t v3 = *v2;
  _s8InstanceCMa();
  swift_getWitnessTable();
  type metadata accessor for NANDiscoveryEngine.ServiceSession();
  NANBitmap.Channel.operatingClass.getter(v3);
  type metadata accessor for Dictionary.Values();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  char v4 = Sequence.contains(where:)();
  swift_bridgeObjectRelease();
  if (v4)
  {
    char v5 = 1;
  }
  else
  {
    uint64_t v6 = (uint64_t *)(v1 + qword_100485BB8);
    swift_beginAccess();
    uint64_t v7 = *v6;
    _s8InstanceCMa_0();
    swift_getWitnessTable();
    type metadata accessor for NANDiscoveryEngine.ServiceSession();
    NANBitmap.Channel.operatingClass.getter(v7);
    __chkstk_darwin();
    type metadata accessor for Dictionary.Values();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    char v5 = Sequence.contains(where:)();
    swift_bridgeObjectRelease();
  }
  return v5 & 1;
}

uint64_t sub_1002DB290()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (uint64_t *)((char *)v0 + qword_100485BD0);
  swift_beginAccess();
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(v1 + 80);
  uint64_t v5 = *(void *)(v1 + 88);
  type metadata accessor for NANDiscoveryEngine.UnownedDeviceLink();
  sub_1002FE310();
  v12[6] = NANBitmap.Channel.operatingClass.getter(v3);
  _OWORD v12[2] = v4;
  v12[3] = v5;
  uint64_t v6 = type metadata accessor for Dictionary.Values();
  uint64_t v7 = type metadata accessor for NANDeviceLink();
  swift_bridgeObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v10 = sub_1003741D0((void (*)(char *, char *))sub_1002FF06C, (uint64_t)v12, v6, v7, (uint64_t)&type metadata for Never, WitnessTable, (uint64_t)&protocol witness table for Never, v9);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t *sub_1002DB3F8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v40 = a1;
  uint64_t v3 = (void *)*v1;
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  unint64_t v38 = *(void **)(v4 - 8);
  __chkstk_darwin();
  int32x4_t v39 = (uint64_t *)((char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  uint64_t v7 = (uint64_t *)((char *)&v36 - v6);
  __chkstk_darwin();
  uint64_t v41 = (uint64_t *)((char *)&v36 - v8);
  uint64_t v9 = v3[11];
  uint64_t v10 = v3[10];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  char v14 = (char *)&v36 - v13;
  uint64_t v15 = *(void *)((char *)v2 + v3[35]);
  swift_unownedRetainStrong();
  char v16 = sub_100355DD4();
  swift_release();
  if (v16)
  {
    swift_unownedRetainStrong();
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v15 + *(void *)(*(void *)v15 + 96), AssociatedTypeWitness);
    swift_release();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    char v19 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 368))(AssociatedTypeWitness, AssociatedConformanceWitness);
    uint64_t result = (uint64_t *)(*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, AssociatedTypeWitness);
    if (v19) {
      return result;
    }
    uint64_t v20 = qword_100485BD8;
    if (*(void *)((char *)v2 + qword_100485BD8) == v40)
    {
      if (*(void *)((char *)v2 + qword_100485BE0)) {
        return result;
      }
    }
    sub_1002E5074();
    uint64_t result = sub_1002EAAA8();
    uint64_t v21 = *(void *)((char *)v2 + v20);
    if (v21 == 15)
    {
      uint64_t v22 = 0;
    }
    else
    {
      uint64_t v22 = v21 + 1;
      if (__OFADD__(v21, 1)) {
        goto LABEL_17;
      }
    }
    uint64_t result = (uint64_t *)NANTimeUnit.discoveryWindowInterval.unsafeMutableAddressor();
    uint64_t v23 = *result;
    if ((unint64_t)*result >> 54)
    {
      __break(1u);
    }
    else
    {
      uint64_t v40 = v22;
      uint64_t v24 = v23 << 10;
      if ((v24 & 0x8000000000000000) == 0)
      {
        *uint64_t v7 = v24;
        char v25 = v38;
        uint64_t v26 = (void (*)(uint64_t, void, uint64_t))v38[13];
        v26((uint64_t)v7, enum case for DispatchTimeInterval.microseconds(_:), v4);
        uint64_t v27 = v26;
        uint64_t v37 = v26;
        uint64_t v28 = (uint64_t)v39;
        *int32x4_t v39 = 12;
        uint64_t v29 = enum case for DispatchTimeInterval.milliseconds(_:);
        v27(v28, enum case for DispatchTimeInterval.milliseconds(_:), v4);
        static DispatchTimeInterval.+ infix(_:_:)((uint64_t)v7, v28, v41);
        uint64_t v30 = (void (*)(uint64_t, uint64_t))v25[1];
        v30(v28, v4);
        v30((uint64_t)v7, v4);
        unint64_t v38 = (void *)*OS_dispatch_queue.nan.unsafeMutableAddressor();
        *uint64_t v7 = 2;
        uint64_t v31 = v37;
        v37((uint64_t)v7, v29, v4);
        uint64_t v32 = swift_allocObject();
        swift_weakInit();
        uint64_t v33 = (void *)swift_allocObject();
        v33[2] = v10;
        uint64_t v33[3] = v9;
        uint64_t v34 = v40;
        v33[4] = v32;
        v33[5] = v34;
        v31(v28, enum case for DispatchTimeInterval.never(_:), v4);
        type metadata accessor for P2PTimer();
        swift_allocObject();
        uint64_t v35 = v38;
        *(void *)((char *)v2 + qword_100485BE0) = P2PTimer.init(deadlineAfter:on:repeating:leeway:_:)((uint64_t)v41, v35, v28, (uint64_t)v7, (uint64_t)sub_1002FE410, (uint64_t)v33);
        return (uint64_t *)swift_release();
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
    return result;
  }
  *(void *)((char *)v2 + qword_100485BE0) = 0;

  return (uint64_t *)swift_release();
}

uint64_t sub_1002DB900(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1002DB960(a2);
    return swift_release();
  }
  return result;
}

uint64_t sub_1002DB960(uint64_t a1)
{
  uint64_t v2 = v1;
  if (*(void *)(v1 + qword_100485BD8) != a1)
  {
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 134217984;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Missed DW start event for DW index: %ld", v6, 0xCu);
      swift_slowDealloc();
    }
  }
  uint64_t v7 = *(void *)(v2 + qword_100485BD8);
  *(void *)(v2 + qword_100485BD8) = a1;
  return sub_1002DB3F8(v7);
}

uint64_t sub_1002DBA6C(uint64_t a1)
{
  uint64_t v3 = *v1;
  sub_100010BCC(&qword_1004862C0);
  __chkstk_darwin();
  os_log_type_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (uint64_t)v1 + *(void *)(v3 + 232);
  swift_beginAccess();
  sub_1000136F4(v6, (uint64_t)v5, &qword_1004862C0);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = sub_100010BCC(&qword_100485CB0);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = sub_1002FF3AC(&qword_1004862C8, &qword_100485CB0, (void (*)(void))sub_1002FF418);
  uint64_t v11 = sub_10000F9CC(&qword_1004862D8, &qword_100485CB0);
  RadioResourceControls.update<A>(from:to:)(a1, (uint64_t)v5, AssociatedTypeWitness, v8, AssociatedConformanceWitness, (uint64_t)&off_100469C00, v10, v11);
  return sub_1000380B4((uint64_t)v5, &qword_1004862C0);
}

uint64_t sub_1002DBCC0(uint64_t a1)
{
  sub_100010BCC(&qword_1004862C0);
  __chkstk_darwin();
  uint64_t v4 = &v7[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = v1 + *(void *)(*(void *)v1 + 232);
  swift_beginAccess();
  sub_1000136F4(v5, (uint64_t)v4, &qword_1004862C0);
  swift_beginAccess();
  sub_100300EB4(a1, v5, &qword_1004862C0);
  swift_endAccess();
  sub_1002DBA6C((uint64_t)v4);
  sub_1000380B4(a1, &qword_1004862C0);
  return sub_1000380B4((uint64_t)v4, &qword_1004862C0);
}

uint64_t sub_1002DBDCC(uint64_t a1)
{
  uint64_t v3 = *v1;
  sub_100010BCC(&qword_100486238);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (uint64_t)v1 + *(void *)(v3 + 240);
  swift_beginAccess();
  sub_1000136F4(v6, (uint64_t)v5, &qword_100486238);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for PriorityRadioConstraint();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = sub_100300F18(&qword_100486250, (void (*)(uint64_t))type metadata accessor for PriorityRadioConstraint);
  uint64_t v11 = sub_100300F18(&qword_100486258, (void (*)(uint64_t))type metadata accessor for PriorityRadioConstraint);
  RadioResourceControls.update<A>(from:to:)(a1, (uint64_t)v5, AssociatedTypeWitness, v8, AssociatedConformanceWitness, (uint64_t)&off_100469C10, v10, v11);
  return sub_1000380B4((uint64_t)v5, &qword_100486238);
}

uint64_t sub_1002DC018(uint64_t a1)
{
  sub_100010BCC(&qword_100486238);
  __chkstk_darwin();
  uint64_t v4 = &v7[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = v1 + *(void *)(*(void *)v1 + 240);
  swift_beginAccess();
  sub_1000136F4(v5, (uint64_t)v4, &qword_100486238);
  swift_beginAccess();
  sub_100300EB4(a1, v5, &qword_100486238);
  swift_endAccess();
  sub_1002DBDCC((uint64_t)v4);
  sub_1000380B4(a1, &qword_100486238);
  return sub_1000380B4((uint64_t)v4, &qword_100486238);
}

uint64_t sub_1002DC124(uint64_t a1)
{
  uint64_t v3 = *v1;
  sub_100010BCC(&qword_100486268);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v16 - v6;
  uint64_t v16 = (uint64_t)v1 + *(void *)(v3 + 224);
  sub_1000136F4(a1, (uint64_t)&v16 - v6, &qword_100486260);
  uint64_t v8 = sub_100010BCC(&qword_100486260);
  uint64_t v9 = *(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
  v9(v7, 0, 1, v8);
  uint64_t v10 = (uint64_t)v1 + *(void *)(*v1 + 248);
  swift_beginAccess();
  sub_1000136F4(v10, (uint64_t)v5, &qword_100486260);
  v9(v5, 0, 1, v8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v13 = sub_1002FF3AC(&qword_100486270, &qword_100486260, (void (*)(void))sub_1002FEFB4);
  uint64_t v14 = sub_10000F9CC(&qword_100486288, &qword_100486260);
  RadioResourceControls.update<A>(from:to:)((uint64_t)v7, (uint64_t)v5, AssociatedTypeWitness, v8, AssociatedConformanceWitness, (uint64_t)&off_100469C00, v13, v14);
  sub_1000380B4((uint64_t)v5, &qword_100486268);
  sub_1000380B4((uint64_t)v7, &qword_100486268);
  swift_unownedRetainStrong();
  swift_unownedRetainStrong();
  swift_release();
  sub_10033C888(*(unsigned char *)(v10 + *(int *)(v8 + 36)));
  return swift_release();
}

uint64_t sub_1002DC470(uint64_t a1)
{
  sub_100010BCC(&qword_100486260);
  __chkstk_darwin();
  uint64_t v4 = &v7[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = v1 + *(void *)(*(void *)v1 + 248);
  swift_beginAccess();
  sub_1000136F4(v5, (uint64_t)v4, &qword_100486260);
  swift_beginAccess();
  sub_100300EB4(a1, v5, &qword_100486260);
  swift_endAccess();
  sub_1002DC124((uint64_t)v4);
  sub_1000380B4(a1, &qword_100486260);
  return sub_1000380B4((uint64_t)v4, &qword_100486260);
}

uint64_t sub_1002DC57C(uint64_t a1)
{
  return sub_1002EA494(a1);
}

uint64_t sub_1002DC5B8()
{
  uint64_t v1 = (uint64_t)v0;
  uint64_t v2 = *v0;
  sub_100010BCC(&qword_100486238);
  __chkstk_darwin();
  uint64_t v4 = (char *)v64 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = NANAttribute.DataCluster.empty.unsafeMutableAddressor();
  __int16 v6 = *((_WORD *)v5 + 2);
  char v7 = *((unsigned char *)v5 + 6);
  uint64_t v8 = *((void *)v5 + 1);
  int v74 = *v5;
  __int16 v75 = v6;
  char v76 = v7;
  uint64_t v77 = v8;
  swift_beginAccess();
  uint64_t v9 = *(void *)(v2 + 80);
  uint64_t v10 = *(void *)(v2 + 88);
  uint64_t v11 = _s8InstanceCMa_0();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v70 = v9;
  uint64_t v71 = v11;
  uint64_t v72 = v10;
  uint64_t v73 = WitnessTable;
  type metadata accessor for NANDiscoveryEngine.ServiceSession();
  LOBYTE(v11) = Dictionary.isEmpty.getter();
  swift_bridgeObjectRelease();
  if ((v11 & 1) != 0 && sub_1002E42DC() < 1)
  {
    uint64_t v52 = type metadata accessor for PriorityRadioConstraint();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v4, 1, 1, v52);
  }
  else
  {
    swift_unownedRetainStrong();
    uint64_t v13 = WiFiInterface.capabilities.getter();
    swift_release();
    uint64_t v66 = WiFiDriverCapabilities.supportsSimultaneousDualBand.unsafeMutableAddressor();
    uint64_t v14 = *v66;
    v68[0] = v13;
    uint64_t v70 = v14;
    unint64_t v15 = sub_1002C8868();
    swift_bridgeObjectRetain_n();
    unint64_t v67 = v15;
    ExtendableOptionSet.formIntersection(_:)((uint64_t)v68, (uint64_t)&type metadata for WiFiDriverCapabilities, v15);
    char v16 = sub_1000956AC(v70, v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v16)
    {
      uint64_t v17 = (uint64_t *)(v1 + qword_100485BC0);
      swift_beginAccess();
      uint64_t v18 = *v17;
      uint64_t v19 = _s17InitiatorInstanceCMa();
      uint64_t v20 = swift_getWitnessTable();
      uint64_t v70 = v9;
      uint64_t v71 = v19;
      uint64_t v72 = v10;
      uint64_t v73 = v20;
      type metadata accessor for NANDiscoveryEngine.ServiceSession();
      unint64_t v21 = sub_1001B8154();
      uint64_t v65 = v4;
      unint64_t v22 = v21;
      uint64_t v70 = NANBitmap.Channel.operatingClass.getter(v18);
      uint64_t v23 = (void *)swift_allocObject();
      v23[2] = v19;
      void v23[3] = swift_getWitnessTable();
      v23[4] = v1;
      __chkstk_darwin();
      v64[-4] = v9;
      v64[-3] = v10;
      v64[-2] = sub_1002FEF74;
      v64[-1] = v23;
      v64[2] = v22;
      uint64_t v4 = v65;
      type metadata accessor for Dictionary.Values();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_getWitnessTable();
      LOBYTE(v18) = Sequence.contains(where:)();
      swift_release();
      swift_bridgeObjectRelease();
      if ((v18 & 1) == 0)
      {
        uint64_t v24 = (uint64_t *)(v1 + qword_100485BC8);
        swift_beginAccess();
        uint64_t v25 = *v24;
        uint64_t v26 = _s17ResponderInstanceCMa();
        uint64_t v27 = swift_getWitnessTable();
        uint64_t v70 = v9;
        uint64_t v71 = v26;
        uint64_t v72 = v10;
        uint64_t v73 = v27;
        type metadata accessor for NANDiscoveryEngine.ServiceSession();
        v64[1] = 0;
        uint64_t v70 = NANBitmap.Channel.operatingClass.getter(v25);
        uint64_t v28 = (void *)swift_allocObject();
        v28[2] = v26;
        uint64_t v29 = swift_getWitnessTable();
        v64[0] = v64;
        v28[3] = v29;
        v28[4] = v1;
        __chkstk_darwin();
        v64[-4] = v9;
        v64[-3] = v10;
        v64[-2] = sub_1003014D0;
        v64[-1] = v28;
        uint64_t v4 = v65;
        type metadata accessor for Dictionary.Values();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_getWitnessTable();
        LOBYTE(v25) = Sequence.contains(where:)();
        swift_release();
        swift_bridgeObjectRelease();
        if ((v25 & 1) == 0) {
          goto LABEL_7;
        }
      }
    }
    swift_unownedRetainStrong();
    unint64_t v30 = sub_100356594();
    swift_release();
    if ((v30 & 0xFF00000000) != 0x300000000)
    {
      sub_100010BCC((uint64_t *)&unk_100486240);
      uint64_t v47 = swift_allocObject();
      *(_OWORD *)(v47 + 16) = xmmword_1003B2450;
      swift_unownedRetainStrong();
      uint64_t v48 = WiFiInterface.capabilities.getter();
      swift_release();
      uint64_t v49 = *v66;
      uint64_t v69 = v48;
      uint64_t v70 = v49;
      swift_bridgeObjectRetain_n();
      ExtendableOptionSet.formIntersection(_:)((uint64_t)&v69, (uint64_t)&type metadata for WiFiDriverCapabilities, v67);
      char v50 = sub_1000956AC(v70, v49);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v50) {
        uint64_t v51 = (char *)NANMapID.secondary.unsafeMutableAddressor();
      }
      else {
        uint64_t v51 = (char *)NANMapID.primary.unsafeMutableAddressor();
      }
      char v53 = *v51;
      int16x8_t v54 = (char *)TimeBitmap.Slot.OO.unsafeMutableAddressor();
      unint64_t v55 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(*v54, 2, *v54, *v54);
      __int16 v58 = TimeBitmap.nanBitmap.getter(v55, v56, v57);
      *(unsigned char *)(v47 + 32) = v53;
      *(_WORD *)(v47 + 40) = v58;
      *(void *)(v47 + 48) = v59;
      *(void *)(v47 + 56) = v60;
      swift_bridgeObjectRelease();
      uint64_t v77 = v47;
      unint64_t v61 = TimeBitmap.secondaryDiscoveryWindow.unsafeMutableAddressor();
      uint64_t v42 = *v61;
      uint64_t v41 = v61[1];
      uint64_t v43 = v61[2];
      UUID.init()();
      Swift::String v44 = (int *)type metadata accessor for PriorityRadioConstraint();
      uint64_t v45 = v44;
      v4[v44[5]] = 5;
      uint64_t v46 = &v4[v44[6]];
      *(void *)uint64_t v46 = 1;
    }
    else
    {
LABEL_7:
      sub_100010BCC((uint64_t *)&unk_100486240);
      uint64_t v31 = swift_allocObject();
      *(_OWORD *)(v31 + 16) = xmmword_1003B2450;
      char v32 = *(unsigned char *)NANMapID.primary.unsafeMutableAddressor();
      uint64_t v33 = (char *)TimeBitmap.Slot.OO.unsafeMutableAddressor();
      unint64_t v34 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(2, *v33, *v33, *v33);
      __int16 v37 = TimeBitmap.nanBitmap.getter(v34, v35, v36);
      *(unsigned char *)(v31 + 32) = v32;
      *(_WORD *)(v31 + 40) = v37;
      *(void *)(v31 + 48) = v38;
      *(void *)(v31 + 56) = v39;
      swift_bridgeObjectRelease();
      uint64_t v77 = v31;
      uint64_t v40 = TimeBitmap.primaryDiscoveryWindow.unsafeMutableAddressor();
      uint64_t v42 = *v40;
      uint64_t v41 = v40[1];
      uint64_t v43 = v40[2];
      UUID.init()();
      Swift::String v44 = (int *)type metadata accessor for PriorityRadioConstraint();
      uint64_t v45 = v44;
      v4[v44[5]] = 5;
      uint64_t v46 = &v4[v44[6]];
      *(void *)uint64_t v46 = 0;
    }
    v46[8] = 2;
    os_log_type_t v62 = &v4[v44[7]];
    *(void *)os_log_type_t v62 = v42;
    *((void *)v62 + 1) = v41;
    *((void *)v62 + 2) = v43;
    (*(void (**)(char *, void, uint64_t, int *))(*((void *)v45 - 1) + 56))(v4, 0, 1, v45);
  }
  sub_1002DC018((uint64_t)v4);
  sub_1002E8470(v1, (unsigned int *)&v74);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002DCE0C()
{
  uint64_t v1 = v0;
  sub_1002DB290();
  type metadata accessor for NANDeviceLink();
  type metadata accessor for Array();
  swift_getWitnessTable();
  Sequence.forEach(_:)();
  swift_bridgeObjectRelease();
  uint64_t v2 = v0 + qword_1004888B8;
  uint64_t v3 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v4 = v1 + qword_100485BF0;
  uint64_t v5 = type metadata accessor for DispatchTime();
  __int16 v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(v1 + qword_100485BF8, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v7 = v1 + *(void *)(*(void *)v1 + 224);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v7, AssociatedTypeWitness);
  sub_1000380B4(v1 + *(void *)(*(void *)v1 + 232), &qword_1004862C0);
  sub_1000380B4(v1 + *(void *)(*(void *)v1 + 240), &qword_100486238);
  sub_1000380B4(v1 + *(void *)(*(void *)v1 + 248), &qword_100486260);

  swift_release();
  swift_unownedRelease();
  return v1;
}

uint64_t sub_1002DD208()
{
  sub_1002DCE0C();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for NANDiscoveryEngine()
{
  return sub_100038354();
}

void sub_1002DD278()
{
  if (!qword_100485CA8)
  {
    sub_100014434(&qword_100485CB0);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100485CA8);
    }
  }
}

void sub_1002DD2D4()
{
  if (!qword_100485CC0)
  {
    sub_100014434(&qword_100485CC8);
    sub_1002DD33C();
    unint64_t v0 = type metadata accessor for RadioConstraint();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100485CC0);
    }
  }
}

unint64_t sub_1002DD33C()
{
  unint64_t result = qword_100485CD0;
  if (!qword_100485CD0)
  {
    sub_100014434(&qword_100485CC8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100485CD0);
  }
  return result;
}

uint64_t sub_1002DD3A8()
{
  uint64_t result = type metadata accessor for DispatchTime();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1002DD458(uint64_t a1)
{
  *(void *)&long long v395 = a1;
  uint64_t v390 = *v1;
  uint64_t v2 = v390;
  uint64_t v3 = type metadata accessor for DispatchTime();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v385 = v3;
  uint64_t v386 = v4;
  __chkstk_darwin();
  unint64_t v384 = (unint64_t)&v351 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_10047DB90);
  __chkstk_darwin();
  uint64_t v362 = (char *)&v351 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v372 = *(void *)(v7 - 8);
  uint64_t v373 = v7;
  __chkstk_darwin();
  uint64_t v351 = (char *)&v351 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v353 = (char *)&v351 - v9;
  uint64_t v359 = sub_100010BCC((uint64_t *)&unk_100486400);
  __chkstk_darwin();
  uint64_t v360 = (uint64_t)&v351 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_1004862B0);
  __chkstk_darwin();
  uint64_t v352 = (uint64_t)&v351 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v363 = (char *)&v351 - v12;
  __chkstk_darwin();
  uint64_t v357 = (uint64_t)&v351 - v13;
  __chkstk_darwin();
  uint64_t v356 = (uint64_t)&v351 - v14;
  __chkstk_darwin();
  uint64_t v366 = (char *)&v351 - v15;
  __chkstk_darwin();
  uint64_t v370 = (uint64_t)&v351 - v16;
  sub_100010BCC(&qword_100485280);
  __chkstk_darwin();
  uint64_t v376 = (uint64_t)&v351 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v371 = (void *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  uint64_t v368 = (char *)&v351 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v392 = *(void *)(v2 + 88);
  v394 = v1;
  v393 = *(void **)(v2 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v388 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v389 = AssociatedTypeWitness;
  __chkstk_darwin();
  unint64_t v383 = (unint64_t)&v351 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  os_log_t v355 = (char *)&v351 - v21;
  __chkstk_darwin();
  unint64_t v387 = (unint64_t)&v351 - v22;
  __chkstk_darwin();
  uint64_t v361 = (char *)&v351 - v23;
  uint64_t v377 = type metadata accessor for NANAttribute(0);
  uint64_t v379 = *(void *)(v377 - 8);
  __chkstk_darwin();
  unint64_t v375 = (unsigned __int16 *)((char *)&v351 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v391 = type metadata accessor for NANAttribute.CustomDeviceInformation(0);
  __chkstk_darwin();
  uint64_t v354 = (uint64_t)&v351 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v367 = (uint64_t)&v351 - v26;
  __chkstk_darwin();
  uint64_t v365 = (uint64_t)&v351 - v27;
  __chkstk_darwin();
  uint64_t v369 = (uint64_t)&v351 - v28;
  __chkstk_darwin();
  v358 = (char *)&v351 - v29;
  __chkstk_darwin();
  uint64_t v378 = (uint64_t)&v351 - v30;
  uint64_t v382 = type metadata accessor for NANPeer(0);
  __chkstk_darwin();
  uint64_t v374 = (uint64_t)&v351 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v364 = (uint64_t)&v351 - v32;
  __chkstk_darwin();
  uint64_t v381 = (uint64_t)&v351 - v33;
  __chkstk_darwin();
  uint64_t v380 = (uint64_t)&v351 - v34;
  type metadata accessor for DriverEvent(0);
  __chkstk_darwin();
  unint64_t v36 = (char *)&v351 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v38 = (char *)&v351 - v37;
  __chkstk_darwin();
  uint64_t v40 = (char *)&v351 - v39;
  __chkstk_darwin();
  uint64_t v42 = (char *)&v351 - v41;
  uint64_t v43 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DispatchPredicate();
  uint64_t v44 = *((void *)v43 - 1);
  __chkstk_darwin();
  uint64_t v46 = (uint64_t *)((char *)&v351 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v47 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v48 = (void *)*v47;
  *uint64_t v46 = *v47;
  (*(void (**)(uint64_t *, void, uint64_t (*)(uint64_t, uint64_t, uint64_t)))(v44 + 104))(v46, enum case for DispatchPredicate.onQueue(_:), v43);
  id v49 = v48;
  uint64_t v50 = _dispatchPreconditionTest(_:)();
  uint64_t v52 = *(void (**)(uint64_t *, uint64_t (*)(uint64_t, uint64_t, uint64_t)))(v44 + 8);
  uint64_t v51 = v44 + 8;
  v52(v46, v43);
  if ((v50 & 1) == 0)
  {
    __break(1u);
LABEL_92:
    uint64_t v286 = v360;
    uint64_t v287 = v360 + *(int *)(v359 + 48);
    sub_1000136F4(v50 + *(int *)(v391 + 28) + (uint64_t)*((int *)v371 + 10), v360, &qword_1004862B0);
    sub_1000136F4((uint64_t)v40, v287, &qword_1004862B0);
    int v288 = v43(v286, 1, v51);
    uint64_t v276 = v385;
    if (v288 == 1)
    {
      sub_1000380B4((uint64_t)v40, &qword_1004862B0);
      sub_100300D5C(v50, type metadata accessor for NANAttribute.CustomDeviceInformation);
      if (v43(v287, 1, v51) == 1)
      {
        sub_1000380B4(v286, &qword_1004862B0);
        int v275 = 1;
        goto LABEL_110;
      }
    }
    else
    {
      uint64_t v293 = v356;
      sub_1000136F4(v286, v356, &qword_1004862B0);
      if (v43(v287, 1, v51) != 1)
      {
        uint64_t v294 = v293;
        uint64_t v295 = v372;
        unint64_t v296 = v353;
        (*(void (**)(char *, uint64_t, uint64_t))(v372 + 32))(v353, v287, v51);
        sub_100300F18(&qword_10047CF30, (void (*)(uint64_t))&type metadata accessor for UUID);
        int v275 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v297 = *(void (**)(char *, uint64_t))(v295 + 8);
        v297(v296, v51);
        sub_1000380B4((uint64_t)v366, &qword_1004862B0);
        sub_100300D5C(v365, type metadata accessor for NANAttribute.CustomDeviceInformation);
        v297((char *)v294, v51);
        sub_1000380B4(v286, &qword_1004862B0);
        goto LABEL_110;
      }
      sub_1000380B4((uint64_t)v366, &qword_1004862B0);
      sub_100300D5C(v365, type metadata accessor for NANAttribute.CustomDeviceInformation);
      (*(void (**)(uint64_t, uint64_t))(v372 + 8))(v293, v51);
    }
    sub_1000380B4(v286, (uint64_t *)&unk_100486400);
    int v275 = 0;
    goto LABEL_110;
  }
  uint64_t v53 = v395;
  sub_100300CF4(v395, (uint64_t)v42, type metadata accessor for DriverEvent);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v396 = v42;
  if (EnumCaseMultiPayload == 4)
  {
    sub_100300CF4((uint64_t)v396, (uint64_t)v38, type metadata accessor for DriverEvent);
    if (*v38 == 1)
    {
      unint64_t v57 = v394;
      __int16 v58 = (uint64_t *)((char *)v394 + qword_100485BB0);
      swift_beginAccess();
      uint64_t v59 = *v58;
      uint64_t v60 = v392;
      uint64_t v61 = (uint64_t)v393;
      uint64_t v62 = _s8InstanceCMa();
      uint64_t WitnessTable = swift_getWitnessTable();
      uint64_t v403 = v61;
      uint64_t v404 = v62;
      uint64_t v405 = v60;
      uint64_t v406 = WitnessTable;
      type metadata accessor for NANDiscoveryEngine.ServiceSession();
      *(void *)v409 = NANBitmap.Channel.operatingClass.getter(v59);
      __chkstk_darwin();
      *(&v351 - 2) = (char *)v57;
      *(&v351 - 1) = (char *)v53;
      type metadata accessor for Dictionary.Values();
      swift_bridgeObjectRetain();
      uint64_t v390 = (uint64_t)&protocol conformance descriptor for [A : B].Values;
      swift_getWitnessTable();
      Sequence.forEach(_:)();
      swift_bridgeObjectRelease();
      long long v64 = (uint64_t *)((char *)v57 + qword_100485BB8);
      swift_beginAccess();
      uint64_t v65 = *v64;
      uint64_t v66 = (uint64_t)v393;
      uint64_t v67 = _s8InstanceCMa_0();
      uint64_t v68 = swift_getWitnessTable();
      uint64_t v403 = v66;
      uint64_t v404 = v67;
      uint64_t v405 = v60;
      uint64_t v406 = v68;
      type metadata accessor for NANDiscoveryEngine.ServiceSession();
      uint64_t v403 = NANBitmap.Channel.operatingClass.getter(v65);
      __chkstk_darwin();
      *(&v351 - 2) = (char *)v57;
      *(&v351 - 1) = (char *)v53;
      type metadata accessor for Dictionary.Values();
      swift_bridgeObjectRetain();
      swift_getWitnessTable();
      Sequence.forEach(_:)();
      swift_bridgeObjectRelease();
      sub_100302A54(v53);
      uint64_t v390 = swift_allocBox();
      uint64_t v70 = v69;
      uint64_t v71 = *(uint64_t *)((char *)v57 + *(void *)(*v57 + 280));
      swift_unownedRetainStrong();
      unint64_t v72 = v387;
      uint64_t v73 = v388;
      int v74 = *(void (**)(unint64_t, uint64_t, uint64_t))(v388 + 16);
      uint64_t v75 = v389;
      v74(v387, v71 + *(void *)(*(void *)v71 + 96), v389);
      swift_release();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      LODWORD(v382) = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(v75, AssociatedConformanceWitness);
      uint64_t v77 = *(void (**)(unint64_t, uint64_t))(v73 + 8);
      v77(v72, v75);
      swift_unownedRetainStrong();
      unint64_t v78 = v383;
      v74(v383, v71 + *(void *)(*(void *)v71 + 96), v75);
      swift_release();
      char v79 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(v75, AssociatedConformanceWitness);
      v77(v78, v75);
      LODWORD(AssociatedConformanceWitness) = *(_DWORD *)NANAttribute.CustomDeviceInformation.Flags.triggeredWatchdogReset.unsafeMutableAddressor();
      NANAttribute.CustomDeviceInformation.CustomAttributes.init()(v70 + *(int *)(v391 + 28));
      *(unsigned char *)uint64_t v70 = v382;
      *(unsigned char *)(v70 + 1) = v79;
      *(_DWORD *)(v70 + 4) = AssociatedConformanceWitness;
      *(void *)(swift_allocObject() + 16) = &_swiftEmptySetSingleton;
      uint64_t v80 = v394;
      os_log_type_t v81 = (uint64_t *)((char *)v394 + qword_100485BC0);
      swift_beginAccess();
      uint64_t v82 = *v81;
      _s17InitiatorInstanceCMa();
      swift_bridgeObjectRetain();
      swift_getWitnessTable();
      sub_1002E3574(v82);
      swift_bridgeObjectRelease();
      uint64_t v83 = (uint64_t *)((char *)v80 + qword_100485BC8);
      swift_beginAccess();
      uint64_t v84 = *v83;
      _s17ResponderInstanceCMa();
      swift_bridgeObjectRetain();
      swift_getWitnessTable();
      sub_1002E3574(v84);
      swift_bridgeObjectRelease();
      swift_unownedRetainStrong();
      sub_100356B78((uint64_t)sub_1002E3F70, 0);
      swift_release();
      type metadata accessor for P2PTimer();
      uint64_t v85 = (char *)v384;
      variable initialization expression of AWDLPeer.lastUpdated();
      uint64_t v86 = (char *)v80 + qword_100485BF0;
      swift_beginAccess();
      (*(void (**)(char *, char *, uint64_t))(v386 + 40))(v86, v85, v385);
      swift_endAccess();
      sub_1002E1BD8();
      sub_1002E23E0();
      sub_1002DC5B8();
      swift_release();
LABEL_8:
      swift_release();
      return sub_100300D5C((uint64_t)v396, type metadata accessor for DriverEvent);
    }
  }
  else if (!EnumCaseMultiPayload)
  {
    sub_100300CF4((uint64_t)v396, (uint64_t)v40, type metadata accessor for DriverEvent);
    sub_10006E544((uint64_t)v40, (uint64_t)v402);
    sub_10006E544((uint64_t)v402, (uint64_t)&v403);
    switch(sub_1001343E0((uint64_t)&v403))
    {
      case 2u:
        uint64_t v158 = NANBitmap.Channel.operatingClass.getter(&v403);
        char v159 = *(unsigned char *)v158;
        uint64_t v160 = *(unsigned int *)(v158 + 4);
        uint64_t v161 = v394;
        uint64_t v162 = *(unsigned __int16 *)(v158 + 2);
        LODWORD(v391) = *(unsigned __int8 *)(v158 + 1);
        swift_beginAccess();
        LOBYTE(v407) = v159;
        uint64_t v164 = v392;
        int v163 = v393;
        unint64_t v165 = _s8InstanceCMa();
        uint64_t v166 = v53;
        uint64_t v167 = swift_getWitnessTable();
        v398 = v163;
        unint64_t v399 = v165;
        uint64_t v400 = v164;
        uint64_t v401 = v167;
        type metadata accessor for NANDiscoveryEngine.ServiceSession();
        Dictionary.subscript.getter();
        unint64_t v168 = v398;
        uint64_t v169 = v399;
        swift_endAccess();
        sub_1002E12D0((uint64_t)v168, v169, (uint64_t)v161, v166, v165, v167);
        sub_1002FF540(v168);
        swift_unownedRetainStrong();
        uint64_t v170 = v380;
        sub_10035665C(v162 | (v160 << 16), v380);
        uint64_t v171 = sub_100355AFC(&v398, v391);
        uint64_t v173 = v172;
        uint64_t v174 = type metadata accessor for NANPeer.Service(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v174 - 8) + 48))(v173, 1, v174))
        {
          sub_1002A914C(*(void *)(v173 + 120), *(void *)(v173 + 128), *(void *)(v173 + 136), *(unsigned char *)(v173 + 144));
          *(void *)(v173 + 120) = 0;
          *(void *)(v173 + 128) = 0;
          *(void *)(v173 + 136) = 0;
          *(unsigned char *)(v173 + 144) = -1;
        }
        ((void (*)(void **, void))v171)(&v398, 0);
        sub_1003568F4(v170, v162 | (v160 << 16));
        sub_1001344F4((uint64_t)v402, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
        goto LABEL_8;
      case 3u:
        uint64_t v175 = NANBitmap.Channel.operatingClass.getter(&v403);
        char v176 = *(unsigned char *)v175;
        uint64_t v177 = *(unsigned int *)(v175 + 4);
        unint64_t v178 = v394;
        uint64_t v179 = *(unsigned __int16 *)(v175 + 2);
        LODWORD(v391) = *(unsigned __int8 *)(v175 + 1);
        swift_beginAccess();
        LOBYTE(v407) = v176;
        uint64_t v180 = v53;
        uint64_t v182 = v392;
        int v181 = v393;
        unint64_t v183 = _s8InstanceCMa_0();
        uint64_t v184 = swift_getWitnessTable();
        v398 = v181;
        unint64_t v399 = v183;
        uint64_t v400 = v182;
        uint64_t v401 = v184;
        type metadata accessor for NANDiscoveryEngine.ServiceSession();
        Dictionary.subscript.getter();
        os_log_t v185 = v398;
        uint64_t v186 = v399;
        swift_endAccess();
        sub_1002E12D0((uint64_t)v185, v186, (uint64_t)v178, v180, v183, v184);
        sub_1002FF540(v185);
        swift_unownedRetainStrong();
        uint64_t v187 = v381;
        sub_10035665C(v179 | (v177 << 16), v381);
        uint64_t v188 = sub_100355AFC(&v398, v391);
        uint64_t v190 = v189;
        uint64_t v191 = type metadata accessor for NANPeer.Service(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v191 - 8) + 48))(v190, 1, v191))
        {
          sub_1002A914C(*(void *)(v190 + 120), *(void *)(v190 + 128), *(void *)(v190 + 136), *(unsigned char *)(v190 + 144));
          *(void *)(v190 + 120) = 0;
          *(void *)(v190 + 128) = 0;
          *(void *)(v190 + 136) = 0;
          *(unsigned char *)(v190 + 144) = -1;
        }
        ((void (*)(void **, void))v188)(&v398, 0);
        sub_1003568F4(v187, v179 | (v177 << 16));
        sub_1001344F4((uint64_t)v402, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
        swift_release();
        return sub_100300D5C((uint64_t)v396, type metadata accessor for DriverEvent);
      case 4u:
      case 8u:
      case 9u:
        unint64_t v55 = (unsigned __int16 *)NANBitmap.Channel.operatingClass.getter(&v403);
        unint64_t v56 = *v55 | ((unint64_t)*((unsigned __int8 *)v55 + 2) << 16) | ((unint64_t)*(unsigned int *)((char *)v55 + 3) << 24);
        goto LABEL_10;
      case 5u:
        id v131 = (unsigned __int8 *)NANBitmap.Channel.operatingClass.getter(&v403);
        int v132 = *v131;
        LODWORD(v391) = v131[1];
        uint64_t v389 = v131[2];
        uint64_t v388 = v131[3];
        unint64_t v384 = *((unsigned int *)v131 + 1);
        int v133 = (char *)v131[8];
        uint64_t v134 = v131[9];
        uint64_t v135 = v131[10];
        unint64_t v136 = v131[11];
        uint64_t v137 = v131[12];
        uint64_t v138 = v131[13];
        swift_beginAccess();
        LODWORD(v390) = v132;
        LOBYTE(v397) = v132;
        uint64_t v386 = v134;
        unint64_t v387 = (unint64_t)v133;
        BYTE1(v397) = (_BYTE)v133;
        BYTE2(v397) = v134;
        uint64_t v385 = v135;
        BYTE3(v397) = v135;
        BYTE4(v397) = v136;
        BYTE5(v397) = v137;
        BYTE6(v397) = v138;
        uint64_t v139 = v392;
        unint64_t v140 = v393;
        unint64_t v141 = _s17ResponderInstanceCMa();
        uint64_t v142 = swift_getWitnessTable();
        v398 = v140;
        unint64_t v399 = v141;
        uint64_t v400 = v139;
        uint64_t v401 = v142;
        type metadata accessor for NANDiscoveryEngine.ServiceSession();
        sub_1001B8154();
        Dictionary.subscript.getter();
        uint64_t v143 = v407;
        if (v407)
        {
          uint64_t v144 = v408;
          swift_endAccess();
          sub_1001344F4((uint64_t)v402, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
          id v145 = v143;
          swift_bridgeObjectRetain();
          uint64_t v146 = (uint64_t)v143;
          uint64_t v147 = v144;
          uint64_t v148 = v394;
LABEL_55:
          sub_1002E12D0(v146, v147, (uint64_t)v148, v395, v141, v142);
          sub_1002FF540(v143);
          swift_bridgeObjectRelease();

          sub_1002E1BD8();
          sub_1002E23E0();
          sub_1002DC5B8();
          return sub_100300D5C((uint64_t)v396, type metadata accessor for DriverEvent);
        }
        uint64_t v381 = v138;
        uint64_t v382 = v137;
        unint64_t v383 = v136;
        swift_endAccess();
        uint64_t v148 = v394;
        swift_beginAccess();
        char v248 = v391;
        LOBYTE(v397) = v391;
        unint64_t v141 = _s8InstanceCMa_0();
        uint64_t v142 = swift_getWitnessTable();
        v398 = v140;
        unint64_t v399 = v141;
        uint64_t v400 = v139;
        uint64_t v401 = v142;
        type metadata accessor for NANDiscoveryEngine.ServiceSession();
        Dictionary.subscript.getter();
        uint64_t v143 = v407;
        if (v407)
        {
          uint64_t v249 = v408;
          swift_endAccess();
          sub_1001344F4((uint64_t)v402, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
          id v145 = v143;
          swift_bridgeObjectRetain();
          uint64_t v146 = (uint64_t)v143;
          uint64_t v147 = v249;
          goto LABEL_55;
        }
        unint64_t v259 = v384 << 16;
        swift_endAccess();
        v398 = 0;
        unint64_t v399 = 0xE000000000000000;
        _StringGuts.grow(_:)(18);
        swift_bridgeObjectRelease();
        v398 = (void *)0xD000000000000010;
        unint64_t v399 = 0x80000001003E0390;
        v409[0] = v248;
        v260._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v260);
        swift_bridgeObjectRelease();
        sub_1002D946C(v390, v387 | (v386 << 8) | (v385 << 16) | (v383 << 24) | (v382 << 32) | (v381 << 40), v389 | (v388 << 8) | v259, (uint64_t)v398, v399);
        swift_bridgeObjectRelease();
LABEL_67:
        sub_1001344F4((uint64_t)v402, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
        return sub_100300D5C((uint64_t)v396, type metadata accessor for DriverEvent);
      case 6u:
      case 7u:
        unint64_t v87 = (unsigned __int8 *)NANBitmap.Channel.operatingClass.getter(&v403);
        uint64_t v88 = *v87;
        uint64_t v89 = v87[2];
        uint64_t v90 = v87[3];
        uint64_t v91 = *((unsigned int *)v87 + 1);
        sub_1001344F4((uint64_t)v402, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
        unint64_t v56 = v88 | (v89 << 8) | (v90 << 16) | (v91 << 24);
LABEL_10:
        sub_1002E1520(v56, v394, v53);
        return sub_100300D5C((uint64_t)v396, type metadata accessor for DriverEvent);
      case 0xAu:
        unint64_t v222 = (unsigned __int8 *)NANBitmap.Channel.operatingClass.getter(&v403);
        unint64_t v223 = (void *)*v222;
        uint64_t v388 = v222[2];
        unint64_t v387 = v222[3];
        uint64_t v386 = *((unsigned int *)v222 + 1);
        uint64_t v224 = v222[8];
        uint64_t v225 = v222[9];
        uint64_t v226 = v222[10];
        uint64_t v227 = v222[11];
        uint64_t v228 = v222[12];
        uint64_t v229 = v222[13];
        swift_beginAccess();
        uint64_t v390 = v224;
        uint64_t v391 = (uint64_t)v223;
        LOBYTE(v407) = (_BYTE)v223;
        BYTE1(v407) = v224;
        uint64_t v389 = v225;
        BYTE2(v407) = v225;
        BYTE3(v407) = v226;
        BYTE4(v407) = v227;
        BYTE5(v407) = v228;
        BYTE6(v407) = v229;
        uint64_t v230 = v392;
        v231 = v393;
        uint64_t v232 = _s17InitiatorInstanceCMa();
        uint64_t v233 = swift_getWitnessTable();
        v398 = v231;
        unint64_t v399 = v232;
        uint64_t v400 = v230;
        uint64_t v401 = v233;
        type metadata accessor for NANDiscoveryEngine.ServiceSession();
        sub_1001B8154();
        Dictionary.subscript.getter();
        v234 = v398;
        swift_endAccess();
        sub_1002FF540(v234);
        if (v234) {
          goto LABEL_46;
        }
        swift_beginAccess();
        LOBYTE(v407) = v391;
        BYTE1(v407) = v390;
        BYTE2(v407) = v389;
        BYTE3(v407) = v226;
        BYTE4(v407) = v227;
        BYTE5(v407) = v228;
        BYTE6(v407) = v229;
        uint64_t v235 = _s17ResponderInstanceCMa();
        uint64_t v236 = swift_getWitnessTable();
        v398 = v231;
        unint64_t v399 = v235;
        uint64_t v400 = v230;
        uint64_t v401 = v236;
        type metadata accessor for NANDiscoveryEngine.ServiceSession();
        Dictionary.subscript.getter();
        id v237 = v398;
        swift_endAccess();
        sub_1002FF540(v237);
        if (v237)
        {
LABEL_46:
          sub_1002E1520(v391 | (v390 << 8) | (v389 << 16) | (v226 << 24) | (v227 << 32) | (v228 << 40) | (v229 << 48), v394, v395);
        }
        else
        {
          *(void *)&long long v395 = v386 << 16;
          v398 = 0;
          unint64_t v399 = 0xE000000000000000;
          _StringGuts.grow(_:)(19);
          swift_bridgeObjectRelease();
          v398 = (void *)0xD000000000000011;
          unint64_t v399 = 0x80000001003E0370;
          uint64_t v262 = v390;
          uint64_t v261 = (void *)v391;
          uint64_t v263 = v389;
          v264._countAndFlagsBits = NANPeerServiceIdentifier.description.getter(v391 | (v390 << 8) | (v389 << 16) | (v226 << 24) | (v227 << 32) | (v228 << 40) | (v229 << 48));
          String.append(_:)(v264);
          swift_bridgeObjectRelease();
          sub_1002D946C((uint64_t)v261, (v226 << 16) | (v263 << 8) | (v227 << 24) | (v228 << 32) | (v229 << 40) | v262, v388 | (v387 << 8) | v395, (uint64_t)v398, v399);
          swift_bridgeObjectRelease();
        }
        return sub_100300D5C((uint64_t)v396, type metadata accessor for DriverEvent);
      case 0xBu:
        char v218 = *(unsigned char *)NANBitmap.Channel.operatingClass.getter(&v403);
        uint64_t v126 = v53;
        BOOL v127 = v394;
        swift_beginAccess();
        LOBYTE(v407) = v218;
        uint64_t v128 = v392;
        uint64_t v129 = v393;
        unint64_t v130 = _s8InstanceCMa();
        goto LABEL_43;
      case 0xCu:
        char v125 = *(unsigned char *)NANBitmap.Channel.operatingClass.getter(&v403);
        uint64_t v126 = v53;
        BOOL v127 = v394;
        swift_beginAccess();
        LOBYTE(v407) = v125;
        uint64_t v128 = v392;
        uint64_t v129 = v393;
        unint64_t v130 = _s8InstanceCMa_0();
LABEL_43:
        uint64_t v219 = swift_getWitnessTable();
        v398 = v129;
        unint64_t v399 = v130;
        uint64_t v400 = v128;
        uint64_t v401 = v219;
        type metadata accessor for NANDiscoveryEngine.ServiceSession();
        Dictionary.subscript.getter();
        char v220 = v398;
        uint64_t v221 = v399;
        swift_endAccess();
        sub_1002E12D0((uint64_t)v220, v221, (uint64_t)v127, v126, v130, v219);
        sub_1002FF540(v220);
        sub_100302A54(v126);
        return sub_100300D5C((uint64_t)v396, type metadata accessor for DriverEvent);
      case 0xDu:
        char v149 = *(unsigned char *)NANBitmap.Channel.operatingClass.getter(&v403);
        unint64_t v150 = v394;
        swift_beginAccess();
        LOBYTE(v397) = v149;
        uint64_t v152 = v392;
        os_log_type_t v151 = v393;
        unint64_t v153 = _s8InstanceCMa();
        uint64_t v154 = swift_getWitnessTable();
        v398 = v151;
        unint64_t v399 = v153;
        uint64_t v400 = v152;
        uint64_t v401 = v154;
        type metadata accessor for NANDiscoveryEngine.ServiceSession();
        Dictionary.subscript.getter();
        uint64_t v155 = v407;
        if (v407)
        {
          uint64_t v156 = v408;
          swift_endAccess();
          id v157 = v155;
          swift_bridgeObjectRetain();
          sub_1002E12D0((uint64_t)v155, v156, (uint64_t)v150, v395, v153, v154);
          sub_1002FF540(v155);
          os_log_type_t v151 = v393;
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_endAccess();
        }
        swift_beginAccess();
        LOBYTE(v397) = v149;
        unint64_t v250 = _s8InstanceCMa_0();
        uint64_t v251 = swift_getWitnessTable();
        v398 = v151;
        unint64_t v399 = v250;
        uint64_t v400 = v152;
        uint64_t v401 = v251;
        type metadata accessor for NANDiscoveryEngine.ServiceSession();
        Dictionary.subscript.getter();
        os_log_t v252 = v407;
        if (v407)
        {
          uint64_t v253 = v408;
          swift_endAccess();
          sub_1001344F4((uint64_t)v402, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
          id v254 = v252;
          swift_bridgeObjectRetain();
          sub_1002E12D0((uint64_t)v252, v253, (uint64_t)v150, v395, v250, v251);
          sub_1002FF540(v252);
          swift_bridgeObjectRelease();

          return sub_100300D5C((uint64_t)v396, type metadata accessor for DriverEvent);
        }
        swift_endAccess();
        goto LABEL_67;
      case 0xEu:
        NANBitmap.Channel.operatingClass.getter(&v403);
        sub_100302A54(v53);
        return sub_100300D5C((uint64_t)v396, type metadata accessor for DriverEvent);
      case 0x10u:
        uint64_t v92 = (unsigned __int8 *)NANBitmap.Channel.operatingClass.getter(&v403);
        uint64_t v93 = *v92;
        __int16 v94 = *(_WORD *)(v92 + 9);
        unsigned __int8 v95 = v92[11];
        int v96 = v92[16];
        uint64_t v97 = *((void *)v92 + 3);
        v409[0] = *v92;
        *(void *)&long long v98 = *(void *)(v92 + 1);
        long long v395 = v98;
        *(void *)&v409[1] = v98;
        __int16 v410 = v94;
        unsigned __int8 v411 = v95;
        char v412 = v96;
        uint64_t v413 = v97;
        long long v99 = *((_OWORD *)v92 + 2);
        long long v414 = v99;
        if ((v97 & 0xC0000000) != 0) {
          goto LABEL_81;
        }
        uint64_t v100 = v99;
        if (*(void *)(v99 + 16))
        {
          uint64_t v101 = v99 + ((*(unsigned __int8 *)(v379 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v379 + 80));
          uint64_t v102 = v375;
          sub_100300CF4(v101, (uint64_t)v375, type metadata accessor for NANAttribute);
          uint64_t v103 = v377;
          if (swift_getEnumCaseMultiPayload() == 41)
          {
            int v104 = *((unsigned __int8 *)v102 + 2);
            uint64_t v106 = *((void *)v102 + 1);
            unint64_t v105 = *((void *)v102 + 2);
            int v107 = *v102;
            sub_10006E544((uint64_t)v402, (uint64_t)&v398);
            uint64_t v108 = NANBitmap.Channel.operatingClass.getter(&v398);
            sub_10006EAC4(*(void *)(v108 + 24));
            uint64_t v109 = (unsigned __int16 *)OUI.apple.unsafeMutableAddressor();
            if (static OUI.== infix(_:_:)(v107 | (v104 << 16), *v109 | (*((unsigned __int8 *)v109 + 2) << 16)))
            {
              uint64_t v390 = v106;
              sub_1001344F4((uint64_t)v402, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
              uint64_t v110 = *(uint64_t *)((char *)v394 + *(void *)(*v394 + 280));
              swift_unownedRetainStrong();
              uint64_t v111 = v364;
              unint64_t v383 = v93 & 0xFFFFFFFF000000FFLL | (unsigned __int16)(v395 << 8) | ((unint64_t)BYTE1(v395) << 16) & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)BYTE2(v395) << 24) | ((unint64_t)BYTE3(v395) << 32) | ((unint64_t)BYTE4(v395) << 40);
              sub_10035665C(v383, v364);
              swift_release();
              BOOL v112 = sub_1002A16F8();
              sub_100300D5C(v111, type metadata accessor for NANPeer);
              uint64_t v113 = v389;
              if (!v112) {
                goto LABEL_17;
              }
              swift_unownedRetainStrong();
              uint64_t v114 = v388;
              uint64_t v115 = v361;
              (*(void (**)(char *, uint64_t, uint64_t))(v388 + 16))(v361, v110 + *(void *)(*(void *)v110 + 96), v113);
              swift_release();
              uint64_t v116 = swift_getAssociatedConformanceWitness();
              unsigned int v117 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v116 + 32))(v113, v116);
              (*(void (**)(char *, uint64_t))(v114 + 8))(v115, v113);
              if (v117 >= 5)
              {
                type metadata accessor for BinaryDecoder();
                uint64_t v291 = v390;
                sub_100013D44(v390, v105);
                sub_100300F18(&qword_100485088, (void (*)(uint64_t))type metadata accessor for NANAttribute.CustomDeviceInformation);
                id v292 = v358;
                uint64_t v124 = 0;
                static BinaryDecoder.decode<A>(_:data:)(v391, v291, v105, (void *)v391);
                sub_10000C970(v291, v105);
                sub_10000C970(v291, v105);
                uint64_t v320 = (uint64_t)v292;
                uint64_t v123 = v378;
                sub_100300DD8(v320, v378, type metadata accessor for NANAttribute.CustomDeviceInformation);
              }
              else
              {
LABEL_17:
                type metadata accessor for BinaryDecoder();
                uint64_t v118 = v390;
                sub_100013D44(v390, v105);
                sub_100300F18((unint64_t *)&unk_100486410, (void (*)(uint64_t))type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
                static BinaryDecoder.decode<A>(_:data:)((uint64_t)v371, v118, v105, v371);
                sub_10000C970(v118, v105);
                LODWORD(v383) = *v368;
                *uint64_t v368 = 0;
                swift_unownedRetainStrong();
                unint64_t v120 = v387;
                uint64_t v119 = v388;
                (*(void (**)(unint64_t, uint64_t, uint64_t))(v388 + 16))(v387, v110 + *(void *)(*(void *)v110 + 96), v113);
                uint64_t v121 = v119;
                swift_release();
                unint64_t v384 = 0;
                uint64_t v122 = swift_getAssociatedConformanceWitness();
                LOBYTE(v119) = (*(uint64_t (**)(uint64_t, uint64_t))(v122 + 32))(v113, v122);
                sub_10000C970(v118, v105);
                (*(void (**)(unint64_t, uint64_t))(v121 + 8))(v120, v113);
                uint64_t v123 = v378;
                uint64_t v124 = (char *)v384;
                sub_100300DD8((uint64_t)v368, v378 + *(int *)(v391 + 28), type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
                *(unsigned char *)uint64_t v123 = v119;
                *(unsigned char *)(v123 + 1) = 0;
                *(_DWORD *)(v123 + 4) = v383;
              }
              goto LABEL_77;
            }
            sub_10000C970(v106, v105);
            uint64_t v103 = v377;
            uint64_t v123 = v378;
          }
          else
          {
            sub_10006E544((uint64_t)v402, (uint64_t)&v398);
            uint64_t v265 = NANBitmap.Channel.operatingClass.getter(&v398);
            sub_10006EAC4(*(void *)(v265 + 24));
            sub_100300D5C((uint64_t)v102, type metadata accessor for NANAttribute);
            uint64_t v123 = v378;
          }
          if (!*(void *)(v100 + 16))
          {
            __break(1u);
            swift_bridgeObjectRelease();
            swift_release();
            __break(1u);
            JUMPOUT(0x1002E1270);
          }
          uint64_t v258 = v376;
          sub_100300CF4(v101, v376, type metadata accessor for NANAttribute);
          uint64_t v257 = 0;
        }
        else
        {
          sub_10006E544((uint64_t)v402, (uint64_t)&v398);
          uint64_t v256 = NANBitmap.Channel.operatingClass.getter(&v398);
          sub_10006EAC4(*(void *)(v256 + 24));
          uint64_t v257 = 1;
          uint64_t v103 = v377;
          uint64_t v123 = v378;
          uint64_t v258 = v376;
        }
        uint64_t v266 = v379;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v379 + 56))(v258, v257, 1, v103);
        sub_1001344F4((uint64_t)v402, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v266 + 48))(v258, 1, v103) == 1)
        {
          sub_1000380B4(v258, &qword_100485280);
        }
        else
        {
          if (swift_getEnumCaseMultiPayload() == 40)
          {
            uint64_t v267 = v258;
            uint64_t v268 = v369;
            sub_100300DD8(v267, v369, type metadata accessor for NANAttribute.CustomDeviceInformation);
            sub_100300DD8(v268, v123, type metadata accessor for NANAttribute.CustomDeviceInformation);
            uint64_t v124 = 0;
LABEL_77:
            int v269 = *(_DWORD *)(v123 + 4);
            if ((*(_DWORD *)NANAttribute.CustomDeviceInformation.Flags.triggeredWatchdogReset.unsafeMutableAddressor() & ~v269) != 0)
            {
              if ((*(_DWORD *)NANAttribute.CustomDeviceInformation.Flags.linkConditionFeedbackRequest.unsafeMutableAddressor() & ~v269) == 0
                || (uint64_t v284 = v123 + *(int *)(v391 + 28), (*(unsigned char *)(v284 + *((int *)v371 + 13) + 24) & 1) == 0))
              {
                sub_1001344F4((uint64_t)v402, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
                uint64_t v245 = type metadata accessor for NANAttribute.CustomDeviceInformation;
                uint64_t v246 = v123;
                goto LABEL_51;
              }
              if (*(void *)(*(void *)(v284 + *((int *)v371 + 11)) + 16))
              {
                if (v96 == 4)
                {
                  unint64_t v384 = (unint64_t)v124;
                  uint64_t v285 = v352;
                  sub_1000136F4(v284 + *((int *)v371 + 10), v352, &qword_1004862B0);
                  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v372 + 48))(v285, 1, v373) == 1)
                  {
                    sub_1001344F4((uint64_t)v402, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
                    sub_1000380B4(v285, &qword_1004862B0);
                  }
                  else
                  {
                    uint64_t v329 = v372;
                    uint64_t v328 = v373;
                    os_log_t v330 = v351;
                    (*(void (**)(char *, uint64_t, uint64_t))(v372 + 32))(v351, v285, v373);
                    swift_unownedRetainStrong();
                    uint64_t v331 = (uint64_t)v363;
                    (*(void (**)(char *, char *, uint64_t))(v329 + 16))(v363, v330, v328);
                    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v329 + 56))(v331, 0, 1, v328);
                    unint64_t v332 = v93 & 0xFFFFFFFF000000FFLL | (unsigned __int16)(v395 << 8) | ((unint64_t)BYTE1(v395) << 16) & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)BYTE2(v395) << 24) | ((unint64_t)BYTE3(v395) << 32) | ((unint64_t)BYTE4(v395) << 40);
                    uint64_t v333 = v374;
                    sub_10035665C(v332, v374);
                    sub_1002FF224(v331, v333 + *(int *)(v382 + 84));
                    sub_1003568F4(v333, v332);
                    swift_release();
                    sub_1001344F4((uint64_t)v402, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
                    (*(void (**)(char *, uint64_t))(v329 + 8))(v351, v328);
                  }
                  uint64_t v124 = (char *)v384;
                }
                else
                {
                  sub_1001344F4((uint64_t)v402, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
                }
                uint64_t v334 = swift_bridgeObjectRetain();
                uint64_t v335 = sub_1003AAF2C(v334);
                swift_bridgeObjectRelease();
                __chkstk_darwin();
                v336 = v394;
                *(&v351 - 2) = (char *)v394;
                *(&v351 - 1) = (char *)v123;
                sub_1003707B4((uint64_t (*)(int *))sub_100300DBC, (uint64_t)(&v351 - 4), v335);
                swift_bridgeObjectRelease();
                uint64_t v337 = *(uint64_t *)((char *)v336 + *(void *)(*v336 + 280));
                swift_unownedRetainStrong();
                uint64_t v338 = v388;
                uint64_t v339 = v389;
                uint64_t v340 = v355;
                (*(void (**)(char *, uint64_t, uint64_t))(v388 + 16))(v355, v337 + *(void *)(*(void *)v337 + 96), v389);
                swift_release();
                uint64_t v341 = swift_getAssociatedConformanceWitness();
                uint64_t v342 = *(void (**)(uint64_t, uint64_t, uint64_t))(v341 + 360);
                uint64_t v343 = swift_bridgeObjectRetain();
                v342(v343, v339, v341);
                if (v124)
                {
                  (*(void (**)(char *, uint64_t))(v338 + 8))(v340, v339);
                  swift_bridgeObjectRelease();
                  uint64_t v344 = v354;
                  sub_100300CF4(v378, v354, type metadata accessor for NANAttribute.CustomDeviceInformation);
                  os_log_type_t v345 = Logger.logObject.getter();
                  os_log_type_t v346 = static os_log_type_t.error.getter();
                  if (os_log_type_enabled(v345, v346))
                  {
                    id v347 = (uint8_t *)swift_slowAlloc();
                    v398 = (void *)swift_slowAlloc();
                    *(_DWORD *)id v347 = 136315138;
                    *(void *)&long long v395 = v347 + 4;
                    swift_bridgeObjectRetain();
                    uint64_t v348 = Array.description.getter();
                    unint64_t v350 = v349;
                    swift_bridgeObjectRelease();
                    v407 = (void *)sub_100010680(v348, v350, (uint64_t *)&v398);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_bridgeObjectRelease();
                    sub_100300D5C(v354, type metadata accessor for NANAttribute.CustomDeviceInformation);
                    _os_log_impl((void *)&_mh_execute_header, v345, v346, "Failed to notify driver of datapath identifiers received in keep alive: %s", v347, 0xCu);
                    swift_arrayDestroy();
                    swift_slowDealloc();
                    swift_slowDealloc();
                    swift_errorRelease();
                  }
                  else
                  {
                    swift_errorRelease();

                    sub_100300D5C(v344, type metadata accessor for NANAttribute.CustomDeviceInformation);
                  }
                }
                else
                {
                  (*(void (**)(char *, uint64_t))(v338 + 8))(v340, v339);
                  swift_bridgeObjectRelease();
                }
              }
              else
              {
                sub_10006E544((uint64_t)v402, (uint64_t)&v398);
                uint64_t v321 = NANBitmap.Channel.operatingClass.getter(&v398);
                sub_10006EAC4(*(void *)(v321 + 24));
                v322 = Logger.logObject.getter();
                os_log_type_t v323 = static os_log_type_t.error.getter();
                if (os_log_type_enabled(v322, v323))
                {
                  unint64_t v324 = (uint8_t *)swift_slowAlloc();
                  uint64_t v325 = swift_slowAlloc();
                  *(_DWORD *)unint64_t v324 = 136315138;
                  v407 = (void *)v325;
                  uint64_t v326 = WiFiAddress.description.getter(v93 & 0xFFFFFFFF000000FFLL | (unsigned __int16)(v395 << 8) | ((unint64_t)BYTE1(v395) << 16) & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)BYTE2(v395) << 24) | ((unint64_t)BYTE3(v395) << 32) | ((unint64_t)BYTE4(v395) << 40));
                  uint64_t v397 = sub_100010680(v326, v327, (uint64_t *)&v407);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease();
                  sub_1001344F4((uint64_t)v402, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
                  sub_1001344F4((uint64_t)v402, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
                  _os_log_impl((void *)&_mh_execute_header, v322, v323, "No keep alive datapath identifers provided skipping update from %s", v324, 0xCu);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();
                }
                else
                {

                  sub_1001344F4((uint64_t)v402, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
                  sub_1001344F4((uint64_t)v402, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
                }
              }
              goto LABEL_123;
            }
            uint64_t v270 = *(uint64_t *)((char *)v394 + *(void *)(*v394 + 280));
            swift_unownedRetainStrong();
            uint64_t v271 = v374;
            *(void *)&long long v395 = v93 & 0xFFFFFFFF000000FFLL | (unsigned __int16)(v395 << 8) | ((unint64_t)BYTE1(v395) << 16) & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)BYTE2(v395) << 24) | ((unint64_t)BYTE3(v395) << 32) | ((unint64_t)BYTE4(v395) << 40);
            sub_10035665C(v395, v374);
            uint64_t v389 = v270;
            swift_release();
            uint64_t v272 = v370;
            sub_1000136F4(v271 + *(int *)(v382 + 84), v370, &qword_1004862B0);
            sub_100300D5C(v271, type metadata accessor for NANPeer);
            uint64_t v51 = v373;
            uint64_t v273 = v372 + 48;
            uint64_t v43 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v372 + 48);
            int v274 = v43(v272, 1, v373);
            uint64_t v50 = v365;
            sub_100300CF4(v123, v365, type metadata accessor for NANAttribute.CustomDeviceInformation);
            uint64_t v40 = v366;
            sub_1000136F4(v272, (uint64_t)v366, &qword_1004862B0);
            unint64_t v387 = (unint64_t)v43;
            uint64_t v388 = v273;
            if (v274 != 1) {
              goto LABEL_92;
            }
            sub_1000380B4((uint64_t)v40, &qword_1004862B0);
            sub_100300D5C(v50, type metadata accessor for NANAttribute.CustomDeviceInformation);
            int v275 = 0;
            uint64_t v276 = v385;
LABEL_110:
            type metadata accessor for P2PTimer();
            uint64_t v298 = (uint64_t)v362;
            variable initialization expression of AWDLPeer.lastUpdated();
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v386 + 56))(v298, 0, 1, v276);
            sub_1002E2DBC(v298);
            uint64_t v299 = v367;
            sub_100300CF4(v378, v367, type metadata accessor for NANAttribute.CustomDeviceInformation);
            sub_10006E544((uint64_t)v402, (uint64_t)&v398);
            uint64_t v300 = *(void *)(NANBitmap.Channel.operatingClass.getter(&v398) + 24);
            sub_1001344F4((uint64_t)v402, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_100134598);
            sub_10006EAC4(v300);
            unint64_t v301 = Logger.logObject.getter();
            os_log_type_t v302 = static os_log_type_t.default.getter();
            BOOL v303 = os_log_type_enabled(v301, v302);
            LODWORD(v390) = v275;
            if (v303)
            {
              uint64_t v304 = swift_slowAlloc();
              v407 = (void *)swift_slowAlloc();
              *(_DWORD *)uint64_t v304 = 136315394;
              uint64_t v305 = WiFiAddress.description.getter(v395);
              uint64_t v397 = sub_100010680(v305, v306, (uint64_t *)&v407);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              sub_1001344F4((uint64_t)v402, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
              sub_1001344F4((uint64_t)v402, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
              *(_WORD *)(v304 + 12) = 2080;
              if (v275)
              {
                unint64_t v307 = 0xE800000000000000;
                uint64_t v308 = 0x676E69686374616DLL;
                uint64_t v309 = (uint64_t)v363;
                uint64_t v310 = v367;
              }
              else
              {
                uint64_t v310 = v367;
                uint64_t v311 = v357;
                sub_1000136F4(v367 + *(int *)(v391 + 28) + (uint64_t)*((int *)v371 + 10), v357, &qword_1004862B0);
                int v312 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v387)(v311, 1, v373);
                sub_1000380B4(v311, &qword_1004862B0);
                if (v312 == 1) {
                  uint64_t v308 = 0x676E697373696DLL;
                }
                else {
                  uint64_t v308 = 0x686374616D73696DLL;
                }
                if (v312 == 1) {
                  unint64_t v307 = 0xE700000000000000;
                }
                else {
                  unint64_t v307 = 0xEB00000000676E69;
                }
                uint64_t v309 = (uint64_t)v363;
              }
              uint64_t v397 = sub_100010680(v308, v307, (uint64_t *)&v407);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              sub_100300D5C(v310, type metadata accessor for NANAttribute.CustomDeviceInformation);
              _os_log_impl((void *)&_mh_execute_header, v301, v302, "Received SOS watchdog recovery from %s with %s UUID", (uint8_t *)v304, 0x16u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              sub_1001344F4((uint64_t)v402, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
              sub_1001344F4((uint64_t)v402, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
              sub_100300D5C(v299, type metadata accessor for NANAttribute.CustomDeviceInformation);
              uint64_t v309 = (uint64_t)v363;
            }
            swift_unownedRetainStrong();
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v372 + 56))(v309, 1, 1, v373);
            uint64_t v313 = v374;
            uint64_t v314 = v395;
            sub_10035665C(v395, v374);
            sub_1002FF224(v309, v313 + *(int *)(v382 + 84));
            sub_1003568F4(v313, v314);
            swift_release();
            unint64_t v315 = v394;
            v316 = (uint64_t *)((char *)v394 + qword_100485BC0);
            swift_beginAccess();
            uint64_t v317 = *v316;
            _s17InitiatorInstanceCMa();
            swift_bridgeObjectRetain();
            swift_getWitnessTable();
            sub_1002E2EBC(v317);
            swift_bridgeObjectRelease();
            v318 = (uint64_t *)((char *)v315 + qword_100485BC8);
            swift_beginAccess();
            uint64_t v319 = *v318;
            _s17ResponderInstanceCMa();
            swift_bridgeObjectRetain();
            swift_getWitnessTable();
            sub_1002E2EBC(v319);
            sub_1001344F4((uint64_t)v402, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
            swift_bridgeObjectRelease();
            sub_1002E23E0();
            sub_1002DC5B8();
            sub_1000380B4(v370, &qword_1004862B0);
LABEL_123:
            uint64_t v245 = type metadata accessor for NANAttribute.CustomDeviceInformation;
            uint64_t v246 = v378;
            goto LABEL_51;
          }
          sub_100300D5C(v258, type metadata accessor for NANAttribute);
        }
LABEL_81:
        sub_10006E544((uint64_t)v402, (uint64_t)&v398);
        uint64_t v277 = NANBitmap.Channel.operatingClass.getter(&v398);
        sub_10006EAC4(*(void *)(v277 + 24));
        v278 = Logger.logObject.getter();
        os_log_type_t v279 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v278, v279))
        {
          unint64_t v280 = (uint8_t *)swift_slowAlloc();
          uint64_t v281 = swift_slowAlloc();
          *(_DWORD *)unint64_t v280 = 136315138;
          v407 = (void *)v281;
          uint64_t v282 = WiFiAddress.description.getter(v93 & 0xFFFFFFFF000000FFLL | (unsigned __int16)(v395 << 8) | ((unint64_t)BYTE1(v395) << 16) & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)BYTE2(v395) << 24) | ((unint64_t)BYTE3(v395) << 32) | ((unint64_t)BYTE4(v395) << 40));
          uint64_t v397 = sub_100010680(v282, v283, (uint64_t *)&v407);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1001344F4((uint64_t)v402, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
          sub_1001344F4((uint64_t)v402, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
          _os_log_impl((void *)&_mh_execute_header, v278, v279, "Failed to parse the action frame from %s as a vendor specific NAN action frame", v280, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          sub_1001344F4((uint64_t)v402, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
          sub_1001344F4((uint64_t)v402, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
        }
        return sub_100300D5C((uint64_t)v396, type metadata accessor for DriverEvent);
      case 0x11u:
        uint64_t v192 = NANBitmap.Channel.operatingClass.getter(&v403);
        uint64_t v193 = *(void *)v192;
        if (*(uint64_t *)((char *)v394 + qword_100485BD8) != *(void *)v192)
        {
          char v194 = *(unsigned char *)(v192 + 28);
          int v195 = *(unsigned __int8 *)(v192 + 29);
          int v196 = *(_DWORD *)(v192 + 24);
          swift_unownedRetainStrong();
          unint64_t v197 = sub_100356538();
          swift_release();
          if (v196 == v197
            && ((0x801004u >> (8 * v194)) & 0xFFC) == ((0x801004u >> ((v197 >> 29) & 0xF8)) & 0xFFC))
          {
            switch(v195)
            {
              case 2:
                BOOL v198 = BYTE5(v197) == 2;
                goto LABEL_99;
              case 3:
                BOOL v198 = BYTE5(v197) == 3;
                goto LABEL_99;
              case 4:
                BOOL v198 = BYTE5(v197) == 4;
                goto LABEL_99;
              case 5:
                BOOL v198 = BYTE5(v197) == 5;
                goto LABEL_99;
              case 6:
                BOOL v198 = BYTE5(v197) == 6;
LABEL_99:
                uint64_t v289 = v394;
                if (!v198) {
                  return sub_100300D5C((uint64_t)v396, type metadata accessor for DriverEvent);
                }
                goto LABEL_101;
              default:
                uint64_t v289 = v394;
                if (BYTE5(v197) - 2 >= 5 && ((v195 & 1) == 0) != ((v197 >> 40) & 1))
                {
LABEL_101:
                  uint64_t v290 = *(uint64_t *)((char *)v289 + qword_100485BD8);
                  *(uint64_t *)((char *)v289 + qword_100485BD8) = v193;
                  sub_1002DB3F8(v290);
                }
                break;
            }
          }
        }
        return sub_100300D5C((uint64_t)v396, type metadata accessor for DriverEvent);
      case 0x14u:
        uint64_t v199 = *(void *)NANBitmap.Channel.operatingClass.getter(&v403);
        uint64_t v200 = *(uint64_t **)((char *)v394 + *(void *)(*v394 + 280));
        swift_unownedRetainStrong();
        unint64_t v202 = v387;
        uint64_t v201 = v388;
        uint64_t v203 = v389;
        (*(void (**)(unint64_t, char *, uint64_t))(v388 + 16))(v387, (char *)v200 + *(void *)(*v200 + 96), v389);
        swift_release();
        uint64_t v204 = swift_getAssociatedConformanceWitness();
        char v205 = (*(uint64_t (**)(uint64_t, uint64_t))(v204 + 368))(v203, v204);
        (*(void (**)(unint64_t, uint64_t))(v201 + 8))(v202, v203);
        if ((v205 & 1) == 0) {
          goto LABEL_67;
        }
        swift_unownedRetainStrong();
        int64_t v206 = *(void *)(v199 + 16);
        if (v206)
        {
          v394 = v200;
          v398 = _swiftEmptyArrayStorage;
          *(void *)&long long v395 = v199;
          sub_1002BF35C(0, v206, 0);
          uint64_t v207 = v395;
          unint64_t v208 = 0;
          int v209 = v398;
          unint64_t v210 = v398[2];
          uint64_t v211 = v210;
          do
          {
            int v212 = *(_DWORD *)(v207 + v208 + 32);
            char v213 = *(unsigned char *)(v207 + v208 + 36);
            char v214 = *(unsigned char *)(v207 + v208 + 37);
            v398 = v209;
            unint64_t v215 = v209[3];
            unint64_t v216 = v210 + 1;
            if (v210 >= v215 >> 1)
            {
              sub_1002BF35C(v215 > 1, v210 + 1, 1);
              uint64_t v207 = v395;
              int v209 = v398;
            }
            v209[2] = v216;
            unint64_t v217 = &v209[v211 + v208 / 8];
            *((_DWORD *)v217 + 8) = v212;
            *((unsigned char *)v217 + 36) = v213;
            *((unsigned char *)v217 + 37) = v214;
            *((unsigned char *)v217 + 38) = 2;
            v208 += 8;
            unint64_t v210 = v216;
            --v206;
          }
          while (v206);
          sub_1001344F4((uint64_t)v402, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
        }
        else
        {
          sub_1001344F4((uint64_t)v402, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
          int v209 = _swiftEmptyArrayStorage;
        }
        if (v209[2])
        {
          sub_100010BCC(&qword_100484B40);
          uint64_t v255 = (void *)static _DictionaryStorage.allocate(capacity:)();
        }
        else
        {
          uint64_t v255 = &_swiftEmptyDictionarySingleton;
        }
        v398 = v255;
        sub_1002FF848((uint64_t)v209, 1, (uint64_t *)&v398);
        swift_bridgeObjectRelease();
        sub_100356A44((uint64_t)v398);
        swift_release();
        return sub_100300D5C((uint64_t)v396, type metadata accessor for DriverEvent);
      default:
        sub_1001344F4((uint64_t)v402, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
        break;
    }
  }
  sub_100300CF4(v53, (uint64_t)v36, type metadata accessor for DriverEvent);
  v238 = Logger.logObject.getter();
  os_log_type_t v239 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v238, v239))
  {

    uint64_t v245 = type metadata accessor for DriverEvent;
    uint64_t v246 = (uint64_t)v36;
LABEL_51:
    sub_100300D5C(v246, v245);
    return sub_100300D5C((uint64_t)v396, type metadata accessor for DriverEvent);
  }
  uint64_t v240 = swift_slowAlloc();
  uint64_t v403 = swift_slowAlloc();
  *(_DWORD *)uint64_t v240 = 136315394;
  uint64_t v241 = _typeName(_:qualified:)();
  v402[0] = sub_100010680(v241, v242, &v403);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  *(_WORD *)(v240 + 12) = 2080;
  uint64_t v243 = DriverEvent.shortDescription.getter();
  v402[0] = sub_100010680(v243, v244, &v403);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  sub_100300D5C((uint64_t)v36, type metadata accessor for DriverEvent);
  _os_log_impl((void *)&_mh_execute_header, v238, v239, "%s unable to handle event: %s", (uint8_t *)v240, 0x16u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  return sub_100300D5C((uint64_t)v396, type metadata accessor for DriverEvent);
}

void sub_1002E12D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  type metadata accessor for DriverEvent(0);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(a6 + 88);
    swift_unknownObjectRetain();
    v12(a4, a5, a6);
    swift_unknownObjectRelease();
  }
  else
  {
    sub_100300CF4(a4, (uint64_t)v11, type metadata accessor for DriverEvent);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315138;
      uint64_t v16 = DriverEvent.description.getter();
      uint64_t v18 = sub_100010680(v16, v17, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100300D5C((uint64_t)v11, type metadata accessor for DriverEvent);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Did not find a service to handle %s", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_100300D5C((uint64_t)v11, type metadata accessor for DriverEvent);
    }
  }
}

void sub_1002E1520(unint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v5 = a1 >> 8;
  unint64_t v6 = a1 >> 16;
  unint64_t v7 = a1 >> 24;
  unint64_t v8 = HIDWORD(a1);
  unint64_t v9 = a1 >> 40;
  uint64_t v50 = *a2;
  uint64_t v51 = a3;
  unint64_t v10 = HIWORD(a1);
  uint64_t v48 = type metadata accessor for DriverEvent(0);
  __chkstk_darwin();
  uint64_t v46 = (uint64_t)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v47 = (uint64_t)&v38 - v12;
  __chkstk_darwin();
  uint64_t v39 = (uint64_t)&v38 - v13;
  os_log_type_t v14 = (uint64_t *)((char *)a2 + qword_100485BC0);
  swift_beginAccess();
  uint64_t v49 = *v14;
  char v57 = a1;
  unint64_t v40 = v5;
  unint64_t v41 = v6;
  char v58 = v5;
  char v59 = v6;
  unint64_t v42 = v7;
  unint64_t v43 = v8;
  char v60 = v7;
  char v61 = v8;
  unint64_t v44 = v10;
  unint64_t v45 = v9;
  char v62 = v9;
  char v63 = v10;
  uint64_t v15 = *(void *)(v50 + 80);
  uint64_t v16 = *(void *)(v50 + 88);
  uint64_t v17 = _s17InitiatorInstanceCMa();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v53 = v15;
  uint64_t v54 = v17;
  uint64_t v55 = v16;
  uint64_t v56 = WitnessTable;
  type metadata accessor for NANDiscoveryEngine.ServiceSession();
  sub_1001B8154();
  Dictionary.subscript.getter();
  uint64_t v19 = v64;
  if (v64)
  {
    uint64_t v20 = v65;
    swift_endAccess();
    id v21 = v19;
    swift_bridgeObjectRetain();
    uint64_t v22 = (uint64_t)v19;
    uint64_t v23 = v20;
    uint64_t v24 = (uint64_t)a2;
    uint64_t v25 = v51;
  }
  else
  {
    uint64_t v25 = v51;
    swift_endAccess();
    swift_beginAccess();
    char v57 = a1;
    char v58 = v40;
    char v59 = v41;
    char v60 = v42;
    char v61 = v43;
    char v62 = v45;
    char v63 = v44;
    uint64_t v17 = _s17ResponderInstanceCMa();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v53 = v15;
    uint64_t v54 = v17;
    uint64_t v55 = v16;
    uint64_t v56 = WitnessTable;
    type metadata accessor for NANDiscoveryEngine.ServiceSession();
    Dictionary.subscript.getter();
    uint64_t v19 = v64;
    if (!v64)
    {
      swift_endAccess();
      uint64_t v30 = v39;
      sub_100300CF4(v25, v39, type metadata accessor for DriverEvent);
      uint64_t v31 = Logger.logObject.getter();
      uint64_t v32 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v31, (os_log_type_t)v32))
      {

        uint64_t v29 = v30;
        goto LABEL_12;
      }
      uint64_t v33 = swift_slowAlloc();
      uint64_t v53 = swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 136315394;
      uint64_t v34 = NANPeerServiceIdentifier.description.getter(a1 & 0xFFFFFFFFFFFFFFLL);
      v52[0] = sub_100010680(v34, v35, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v33 + 12) = 2080;
      uint64_t v36 = DriverEvent.description.getter();
      v52[0] = sub_100010680(v36, v37, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100300D5C(v30, type metadata accessor for DriverEvent);
      _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v32, "Did not find a datapath[%s] to handle %s", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }
    uint64_t v26 = v65;
    swift_endAccess();
    id v21 = v19;
    swift_bridgeObjectRetain();
    uint64_t v22 = (uint64_t)v19;
    uint64_t v23 = v26;
    uint64_t v24 = (uint64_t)a2;
  }
  sub_1002E12D0(v22, v23, v24, v25, v17, WitnessTable);
  sub_1002FF540(v19);
  swift_bridgeObjectRelease();

  sub_1002E1BD8();
  sub_1002E23E0();
  sub_1002DC5B8();
  uint64_t v27 = v47;
  sub_100300CF4(v25, v47, type metadata accessor for DriverEvent);
  if (swift_getEnumCaseMultiPayload())
  {
    sub_100300D5C(v27, type metadata accessor for DriverEvent);
  }
  else
  {
    sub_10006E544(v27, (uint64_t)v52);
    sub_10006E544((uint64_t)v52, (uint64_t)&v53);
    if (sub_1001343E0((uint64_t)&v53) == 8)
    {
      NANBitmap.Channel.operatingClass.getter(&v53);
      sub_100302A54(v25);
      sub_1002D9C44();
LABEL_15:
      sub_1002E2C8C();
      sub_1002EAAA8();
      sub_1002EAD70();
      return;
    }
    sub_1001344F4((uint64_t)v52, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
  }
  uint64_t v28 = v46;
  sub_100300CF4(v25, v46, type metadata accessor for DriverEvent);
  if (swift_getEnumCaseMultiPayload())
  {
    uint64_t v29 = v28;
LABEL_12:
    sub_100300D5C(v29, type metadata accessor for DriverEvent);
    return;
  }
  sub_10006E544(v28, (uint64_t)v52);
  sub_10006E544((uint64_t)v52, (uint64_t)&v53);
  if (sub_1001343E0((uint64_t)&v53) == 9)
  {
    NANBitmap.Channel.operatingClass.getter(&v53);
    sub_1002E5074();
    goto LABEL_15;
  }
  sub_1001344F4((uint64_t)v52, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
}

uint64_t sub_1002E1BD8()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = type metadata accessor for DispatchTimeInterval();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  unint64_t v6 = (uint64_t *)&v46[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  unint64_t v8 = &v46[-v7];
  __chkstk_darwin();
  unint64_t v10 = (uint64_t *)&v46[-v9];
  __chkstk_darwin();
  uint64_t v12 = &v46[-v11];
  swift_unownedRetainStrong();
  char v13 = sub_100355DD4();
  swift_release();
  if (v13)
  {
    swift_bridgeObjectRelease();
LABEL_7:
    uint64_t v50 = v8;
    swift_unownedRetainStrong();
    sub_100354870();
    swift_release();
    char v17 = sub_1002DAFD0();
    swift_release();
    if (v17)
    {
      LODWORD(result) = *((unsigned __int8 *)v1 + 16);
      if (result != 4)
      {
LABEL_11:
        char v21 = 4;
        goto LABEL_12;
      }
      uint64_t v48 = v2;
      uint64_t v49 = v6;
      sub_1002E8DB4();
      *unint64_t v10 = 20;
      uint64_t v18 = enum case for DispatchTimeInterval.seconds(_:);
      (*(void (**)(uint64_t *, void, uint64_t))(v4 + 104))(v10, enum case for DispatchTimeInterval.seconds(_:), v3);
      BOOL v19 = static DispatchTimeInterval.< infix(_:_:)();
      uint64_t v20 = *(void (**)(uint64_t *, uint64_t))(v4 + 8);
      v20(v10, v3);
      v20((uint64_t *)v12, v3);
      if (v19)
      {
        LOBYTE(result) = *((unsigned char *)v1 + 16);
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v48 = v2;
      uint64_t v49 = v6;
      uint64_t v18 = enum case for DispatchTimeInterval.seconds(_:);
    }
    uint64_t v51 = v1;
    swift_unownedRetainStrong();
    sub_100356F3C();
    swift_release();
    *unint64_t v10 = 5;
    uint64_t v22 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v4 + 104);
    v22(v10, v18, v3);
    BOOL v23 = static DispatchTimeInterval.< infix(_:_:)();
    uint64_t v24 = *(void (**)(uint64_t *, uint64_t))(v4 + 8);
    v24(v10, v3);
    v24((uint64_t *)v12, v3);
    if (v23) {
      goto LABEL_16;
    }
    swift_unownedRetainStrong();
    sub_100356CE8((uint64_t)v12);
    swift_release();
    *unint64_t v10 = 5;
    v22(v10, v18, v3);
    BOOL v25 = static DispatchTimeInterval.< infix(_:_:)();
    v24(v10, v3);
    v24((uint64_t *)v12, v3);
    if (v25)
    {
LABEL_16:
      LOBYTE(result) = *((unsigned char *)v51 + 16);
      *((unsigned char *)v51 + 16) = 3;
      return sub_1002E86C8(result);
    }
    unsigned int v47 = v18;
    uint64_t v26 = v22;
    unint64_t v1 = v51;
    if (*((unsigned char *)v51 + 16) == 1
      && (sub_1002E8DB4(),
          *unint64_t v10 = 8,
          v26(v10, v47, v3),
          BOOL v27 = static DispatchTimeInterval.< infix(_:_:)(),
          v24(v10, v3),
          v24((uint64_t *)v12, v3),
          v27))
    {
      LOBYTE(result) = *((unsigned char *)v1 + 16);
      char v21 = 2;
    }
    else
    {
      sub_1002E8DB4();
      switch(*((unsigned char *)v1 + 16))
      {
        case 1:
          uint64_t v28 = 8;
          break;
        case 2:
          uint64_t v28 = 1;
          break;
        case 3:
          uint64_t v28 = 5;
          break;
        case 4:
          uint64_t v28 = 20;
          break;
        default:
          uint64_t v28 = 0x7FFFFFFFFFFFFFFFLL;
          break;
      }
      uint64_t v29 = v49;
      *uint64_t v49 = v28;
      v26(v29, v47, v3);
      uint64_t v30 = v50;
      BOOL v31 = static DispatchTimeInterval.< infix(_:_:)();
      v24(v29, v3);
      v24(v30, v3);
      uint64_t result = *((unsigned __int8 *)v1 + 16);
      if (result == 4)
      {
        if (v31) {
          return result;
        }
        swift_unownedRetainStrong();
        uint64_t v32 = sub_100354870();
        swift_release();
        uint64_t v33 = (uint64_t *)(v32 + qword_100485BB0);
        swift_beginAccess();
        uint64_t v34 = *v33;
        uint64_t v35 = *(void *)(v48 + 80);
        uint64_t v36 = *(void *)(v48 + 88);
        uint64_t v37 = _s8InstanceCMa();
        uint64_t WitnessTable = swift_getWitnessTable();
        uint64_t v52 = v35;
        uint64_t v53 = v37;
        uint64_t v54 = v36;
        uint64_t v55 = WitnessTable;
        type metadata accessor for NANDiscoveryEngine.ServiceSession();
        uint64_t v39 = NANBitmap.Channel.operatingClass.getter(v34);
        swift_bridgeObjectRetain();
        swift_release();
        uint64_t v52 = v39;
        __chkstk_darwin();
        *(void *)&v46[-16] = v35;
        *(void *)&v46[-8] = v36;
        type metadata accessor for Dictionary.Values();
        uint64_t v50 = &protocol conformance descriptor for [A : B].Values;
        swift_getWitnessTable();
        Sequence.forEach(_:)();
        swift_bridgeObjectRelease();
        swift_unownedRetainStrong();
        uint64_t v40 = sub_100354870();
        swift_release();
        unint64_t v41 = (uint64_t *)(v40 + qword_100485BB8);
        swift_beginAccess();
        uint64_t v42 = *v41;
        uint64_t v43 = _s8InstanceCMa_0();
        uint64_t v44 = swift_getWitnessTable();
        uint64_t v52 = v35;
        uint64_t v53 = v43;
        uint64_t v54 = v36;
        uint64_t v55 = v44;
        type metadata accessor for NANDiscoveryEngine.ServiceSession();
        uint64_t v45 = NANBitmap.Channel.operatingClass.getter(v42);
        swift_bridgeObjectRetain();
        swift_release();
        uint64_t v52 = v45;
        __chkstk_darwin();
        *(void *)&v46[-16] = v35;
        *(void *)&v46[-8] = v36;
        type metadata accessor for Dictionary.Values();
        swift_getWitnessTable();
        Sequence.forEach(_:)();
        swift_bridgeObjectRelease();
        LOBYTE(result) = *((unsigned char *)v1 + 16);
      }
      else if (v31)
      {
        return result;
      }
      char v21 = 1;
    }
LABEL_12:
    *((unsigned char *)v1 + 16) = v21;
    return sub_1002E86C8(result);
  }
  char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v14) {
    goto LABEL_7;
  }
  unsigned __int8 v15 = *((unsigned char *)v1 + 16);
  *((unsigned char *)v1 + 16) = 0;

  return sub_1002E86C8(v15);
}

uint64_t sub_1002E23E0()
{
  unint64_t v1 = v0;
  uint64_t v2 = *(void *)v0;
  uint64_t v54 = type metadata accessor for DispatchTimeInterval();
  uint64_t v51 = *(void *)(v54 - 8);
  __chkstk_darwin();
  unsigned int v47 = (char *)v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = sub_100010BCC((uint64_t *)&unk_100486290);
  __chkstk_darwin();
  uint64_t v52 = (char *)v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_10047F2A8);
  __chkstk_darwin();
  unint64_t v6 = (char *)v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v56 = (uint64_t)v46 - v7;
  __chkstk_darwin();
  uint64_t v53 = (void *)((char *)v46 - v8);
  uint64_t v9 = (uint64_t *)&v1[qword_100485BC0];
  swift_beginAccess();
  uint64_t v10 = *v9;
  uint64_t v11 = *(void *)(v2 + 80);
  uint64_t v12 = *(void *)(v2 + 88);
  uint64_t v13 = _s17InitiatorInstanceCMa();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v59 = v11;
  uint64_t v60 = v13;
  uint64_t v61 = v12;
  uint64_t v62 = WitnessTable;
  type metadata accessor for NANDiscoveryEngine.ServiceSession();
  sub_1001B8154();
  uint64_t v59 = NANBitmap.Channel.operatingClass.getter(v10);
  uint64_t v57 = v11;
  uint64_t v58 = v12;
  type metadata accessor for Dictionary.Values();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  LOBYTE(v13) = Sequence.contains(where:)();
  swift_bridgeObjectRelease();
  uint64_t v55 = v1;
  uint64_t v48 = v6;
  if (v13)
  {
    uint64_t v49 = 0;
    char v15 = 1;
  }
  else
  {
    uint64_t v16 = (uint64_t *)&v1[qword_100485BC8];
    swift_beginAccess();
    uint64_t v17 = *v16;
    uint64_t v18 = _s17ResponderInstanceCMa();
    uint64_t v19 = swift_getWitnessTable();
    uint64_t v59 = v11;
    uint64_t v60 = v18;
    uint64_t v61 = v12;
    uint64_t v62 = v19;
    type metadata accessor for NANDiscoveryEngine.ServiceSession();
    uint64_t v20 = NANBitmap.Channel.operatingClass.getter(v17);
    v46[1] = v46;
    uint64_t v59 = v20;
    __chkstk_darwin();
    v46[-2] = v11;
    v46[-1] = v12;
    type metadata accessor for Dictionary.Values();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    char v15 = Sequence.contains(where:)();
    uint64_t v49 = 0;
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  char v21 = Dictionary.isEmpty.getter();
  swift_bridgeObjectRelease();
  uint64_t v22 = v55;
  if ((v21 & 1) == 0) {
    goto LABEL_7;
  }
  swift_beginAccess();
  uint64_t v23 = _s17ResponderInstanceCMa();
  swift_bridgeObjectRetain();
  uint64_t v24 = swift_getWitnessTable();
  uint64_t v59 = v11;
  uint64_t v60 = v23;
  uint64_t v61 = v12;
  uint64_t v62 = v24;
  type metadata accessor for NANDiscoveryEngine.ServiceSession();
  LOBYTE(v23) = Dictionary.isEmpty.getter();
  swift_bridgeObjectRelease();
  if (v23)
  {
    uint64_t v25 = v51;
    uint64_t v26 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v51 + 56);
    uint64_t v27 = (uint64_t)v53;
    uint64_t v28 = v54;
    v26(v53, 1, 1, v54);
    uint64_t v29 = (uint64_t)v52;
    uint64_t v30 = v56;
  }
  else
  {
LABEL_7:
    uint64_t v25 = v51;
    BOOL v31 = (void (**)(uint64_t, void, uint64_t))(v51 + 104);
    uint64_t v32 = (void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v51 + 56);
    uint64_t v29 = (uint64_t)v52;
    uint64_t v30 = v56;
    if (v15) {
      uint64_t v33 = 1;
    }
    else {
      uint64_t v33 = 3;
    }
    uint64_t v27 = (uint64_t)v53;
    uint64_t *v53 = v33;
    uint64_t v28 = v54;
    (*v31)(v27, enum case for DispatchTimeInterval.seconds(_:), v54);
    uint64_t v26 = *v32;
    (*v32)((uint64_t *)v27, 0, 1, v28);
  }
  uint64_t v34 = qword_100485BE8;
  uint64_t v35 = *(void *)&v22[qword_100485BE8];
  if (v35)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v30, v35 + OBJC_IVAR____TtC7CoreP2P8P2PTimer_repeatingInterval, v28);
    uint64_t v36 = 0;
  }
  else
  {
    uint64_t v36 = 1;
  }
  v26((uint64_t *)v30, v36, 1, v28);
  uint64_t v37 = v29 + *(int *)(v50 + 48);
  sub_1000136F4(v27, v29, &qword_10047F2A8);
  sub_1000136F4(v30, v37, &qword_10047F2A8);
  uint64_t v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  if (v38(v29, 1, v28) == 1)
  {
    sub_1000380B4(v30, &qword_10047F2A8);
    if (v38(v37, 1, v28) == 1)
    {
      sub_1000380B4(v29, &qword_10047F2A8);
      return sub_1000380B4(v27, &qword_10047F2A8);
    }
    goto LABEL_19;
  }
  uint64_t v39 = (uint64_t)v48;
  sub_1000136F4(v29, (uint64_t)v48, &qword_10047F2A8);
  if (v38(v37, 1, v28) == 1)
  {
    sub_1000380B4(v56, &qword_10047F2A8);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v39, v28);
LABEL_19:
    sub_1000380B4(v29, (uint64_t *)&unk_100486290);
    uint64_t v40 = v22;
    goto LABEL_22;
  }
  unint64_t v41 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 32))(v47, v37, v28);
  sub_100300F18(&qword_1004862A0, (void (*)(uint64_t))&type metadata accessor for DispatchTimeInterval);
  char v42 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v43 = *(void (**)(char *, uint64_t))(v25 + 8);
  v43(v41, v28);
  sub_1000380B4(v56, &qword_10047F2A8);
  v43((char *)v39, v28);
  sub_1000380B4(v29, &qword_10047F2A8);
  uint64_t v40 = v22;
  if (v42) {
    return sub_1000380B4(v27, &qword_10047F2A8);
  }
LABEL_22:
  uint64_t v45 = sub_1002D8DAC((void (*)(uint64_t *__return_ptr, char *))sub_1002FF0F8);
  sub_1000380B4(v27, &qword_10047F2A8);
  *(void *)&v40[v34] = v45;
  return swift_release();
}

uint64_t sub_1002E2C8C()
{
  uint64_t v1 = sub_100010BCC(&qword_100486260);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_1002E48B8() < 1)
  {
    uint64_t v6 = *(void *)(sub_1002E4484() + 16);
    swift_bridgeObjectRelease();
    if (v6) {
      char v5 = 4;
    }
    else {
      char v5 = 6;
    }
    uint64_t v4 = v0 + *(void *)(*(void *)v0 + 248);
    swift_beginAccess();
  }
  else
  {
    uint64_t v4 = v0 + *(void *)(*(void *)v0 + 248);
    swift_beginAccess();
    char v5 = 5;
  }
  sub_1000136F4(v4, (uint64_t)v3, &qword_100486260);
  v3[*(int *)(v1 + 36)] = v5;
  return sub_1002DC470((uint64_t)v3);
}

uint64_t sub_1002E2DBC(uint64_t a1)
{
  sub_100010BCC(&qword_10047DB90);
  __chkstk_darwin();
  uint64_t v4 = &v7[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = v1 + qword_100485D70;
  swift_beginAccess();
  sub_1000136F4(v5, (uint64_t)v4, &qword_10047DB90);
  swift_beginAccess();
  sub_100300EB4(a1, v5, &qword_10047DB90);
  swift_endAccess();
  sub_1002E95A8((uint64_t)v4);
  sub_1000380B4(a1, &qword_10047DB90);
  return sub_1000380B4((uint64_t)v4, &qword_10047DB90);
}

uint64_t sub_1002E2EBC(uint64_t a1)
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002E3044(uint64_t a1, unsigned __int16 *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 24))(a5, a7);
  if (static NANClusterChangeEvent.__derived_struct_equals(_:_:)(v11 & 0xFFFFFFFFFFFFLL, *a2 | ((unint64_t)*(unsigned int *)(a2 + 1) << 16)))
  {
    char v12 = !sub_1003019CC(a5, a7) | a3;
  }
  else
  {
    char v12 = 0;
  }
  return v12 & 1;
}

void sub_1002E30E0(unsigned __int8 *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v18 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  swift_beginAccess();
  char v25 = v3;
  char v26 = v4;
  uint64_t v16 = v8;
  char v27 = v5;
  char v28 = v18;
  char v29 = v6;
  char v30 = v7;
  char v31 = v8;
  uint64_t v9 = *(void *)(v2 + 80);
  uint64_t v10 = *(void *)(v2 + 88);
  uint64_t v19 = v9;
  uint64_t v20 = _s17InitiatorInstanceCMa();
  uint64_t v21 = v10;
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for NANDiscoveryEngine.ServiceSession();
  sub_1001B8154();
  Dictionary.subscript.getter();
  if (v23)
  {
    swift_endAccess();
    sub_100300B70(v23);
    swift_bridgeObjectRelease();
    sub_1002FF540(v23);
    sub_1002D3024();
  }
  else
  {
    swift_endAccess();
    swift_beginAccess();
    char v25 = v3;
    char v26 = v4;
    char v27 = v5;
    char v28 = v18;
    char v29 = v6;
    char v30 = v7;
    char v31 = v8;
    uint64_t v19 = v9;
    uint64_t v20 = _s17ResponderInstanceCMa();
    uint64_t v21 = v10;
    uint64_t WitnessTable = swift_getWitnessTable();
    type metadata accessor for NANDiscoveryEngine.ServiceSession();
    Dictionary.subscript.getter();
    uint64_t v17 = v6;
    swift_endAccess();
    uint64_t v11 = Logger.logObject.getter();
    uint64_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, (os_log_type_t)v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315138;
      uint64_t v14 = NANPeerServiceIdentifier.description.getter(v3 | (v4 << 8) | (v5 << 16) | (v18 << 24) | (v17 << 32) | (v7 << 40) | (v16 << 48));
      uint64_t v24 = sub_100010680(v14, v15, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, (os_log_type_t)v12, "Received a keep alive for a datapath: %s, but datapath not found", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
}

void sub_1002E34C4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void, void))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v8 = a4(0, *(void *)(*(void *)a2 + 80), *(void *)(*(void *)a2 + 88));
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_1002E12D0(v6, v7, a2, a3, v8, WitnessTable);
}

uint64_t sub_1002E3574(uint64_t a1)
{
  return swift_bridgeObjectRelease();
}

void sub_1002E36D8(uint64_t *a1, unint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v75 = a5;
  uint64_t v71 = a3;
  unint64_t v73 = a2;
  uint64_t v11 = *a4;
  uint64_t v70 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  uint64_t v68 = (uint64_t)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v69 = (char *)&v59 - v13;
  uint64_t v72 = type metadata accessor for NANAttribute.CustomDeviceInformation(0);
  __chkstk_darwin();
  uint64_t v62 = (uint64_t)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = *(void *)(v11 + 88);
  char v79 = a4;
  uint64_t v64 = *(void *)(v11 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v66 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  char v63 = (char *)&v59 - v15;
  sub_100010BCC(&qword_1004862B0);
  __chkstk_darwin();
  uint64_t v17 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for NANPeer(0);
  __chkstk_darwin();
  uint64_t v20 = (char *)&v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v22 = (char *)&v59 - v21;
  uint64_t v23 = *a1;
  uint64_t v24 = a1[1];
  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 24))(a6, a7);
  uint64_t v76 = a6;
  uint64_t v74 = a7;
  uint64_t v78 = v23;
  if (!sub_1003019CC(a6, a7)) {
    goto LABEL_3;
  }
  uint64_t v60 = v18;
  uint64_t v61 = v20;
  uint64_t v27 = v72;
  char v26 = (uint64_t *)v73;
  swift_beginAccess();
  uint64_t v28 = *v26;
  uint64_t v29 = v25 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  BOOL v30 = sub_100374C7C(v25 & 0xFFFFFFFFFFFFLL, v28);
  swift_bridgeObjectRelease();
  if (!v30)
  {
    uint64_t v59 = v24;
    swift_beginAccess();
    sub_1003A5210((uint64_t)v81, v29);
    swift_endAccess();
    uint64_t v35 = *(void *)((char *)v79 + *(void *)(*v79 + 280));
    swift_unownedRetainStrong();
    sub_10035665C(v29, (uint64_t)v22);
    swift_release();
    sub_1000136F4((uint64_t)&v22[*(int *)(v60 + 80)], (uint64_t)v17, &qword_1004862B0);
    sub_100300D5C((uint64_t)v22, type metadata accessor for NANPeer);
    uint64_t v36 = v71;
    swift_beginAccess();
    sub_1002FF224((uint64_t)v17, v36 + *(int *)(v27 + 28) + *(int *)(v70 + 40));
    swift_unownedRetainStrong();
    uint64_t v37 = (uint64_t)v61;
    unint64_t v73 = v29;
    sub_10035665C(v29, (uint64_t)v61);
    swift_release();
    BOOL v38 = sub_1002A16F8();
    sub_100300D5C(v37, type metadata accessor for NANPeer);
    if (!v38) {
      goto LABEL_6;
    }
    swift_unownedRetainStrong();
    uint64_t v39 = v66;
    uint64_t v40 = v63;
    uint64_t v41 = AssociatedTypeWitness;
    (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v63, v35 + *(void *)(*(void *)v35 + 96), AssociatedTypeWitness);
    swift_release();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    unsigned int v43 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(v41, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v41);
    if (v43 >= 5)
    {
      swift_beginAccess();
      uint64_t v49 = v62;
      sub_100300CF4(v36, v62, type metadata accessor for NANAttribute.CustomDeviceInformation);
      unsigned __int8 v46 = NANActionFrame.init(customDeviceInformation:)(v49);
      uint64_t v48 = v50;
    }
    else
    {
LABEL_6:
      swift_beginAccess();
      uint64_t v44 = v69;
      sub_100300CF4(v36 + *(int *)(v27 + 28), (uint64_t)v69, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
      *uint64_t v44 = *(_DWORD *)(v36 + 4);
      uint64_t v45 = v68;
      sub_100300CF4((uint64_t)v44, v68, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
      unsigned __int8 v46 = NANActionFrame.init(customAttributes:)(v45);
      uint64_t v48 = v47;
      sub_100300D5C((uint64_t)v44, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
    }
    uint64_t v51 = v77;
    swift_unownedRetainStrong();
    sub_100356AB8();
    swift_release();
    sub_100331C6C(0, v46, v48, 0, v73, 1);
    uint64_t v33 = (uint64_t)v79;
    if (v51)
    {
      sub_10006DE90(v46);
      swift_release();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v52 = Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v52, v53))
      {
        uint64_t v54 = swift_slowAlloc();
        uint64_t v55 = (void *)swift_slowAlloc();
        uint64_t v82 = swift_slowAlloc();
        *(_DWORD *)uint64_t v54 = 136315394;
        uint64_t v56 = WiFiAddress.description.getter(v73);
        uint64_t v80 = sub_100010680(v56, v57, &v82);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v54 + 12) = 2112;
        swift_errorRetain();
        uint64_t v58 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v80 = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v55 = v58;
        uint64_t v33 = (uint64_t)v79;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "Failed to transmit SOS watchdog recovery to %s because %@", (uint8_t *)v54, 0x16u);
        sub_100010BCC(&qword_10047CC30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();

        swift_errorRelease();
        swift_errorRelease();
      }
    }
    else
    {
      sub_10006DE90(v46);
      swift_release();
    }
    uint64_t v31 = v75;
    uint64_t v32 = v76;
    uint64_t v34 = v74;
    uint64_t v24 = v59;
  }
  else
  {
LABEL_3:
    uint64_t v31 = v75;
    uint64_t v32 = v76;
    uint64_t v33 = (uint64_t)v79;
    uint64_t v34 = v74;
  }
  sub_1002E12D0(v78, v24, v33, v31, v32, *(void *)(v34 + 8));
}

uint64_t sub_1002E3F70(uint64_t a1)
{
  uint64_t v1 = a1 + *(int *)(type metadata accessor for NANPeer(0) + 80);
  sub_1000380B4(v1, &qword_1004862B0);
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(v1, 1, 1, v2);
}

uint64_t sub_1002E3FFC()
{
  swift_beginAccess();
  type metadata accessor for NANDiscoveryEngine.UnownedDeviceLink();
  sub_1002FE310();
  type metadata accessor for Dictionary();
  Dictionary.removeValue(forKey:)();
  swift_endAccess();
  return sub_1002FF504(v1);
}

uint64_t sub_1002E40E0(uint64_t a1)
{
  type metadata accessor for NANDiscoveryEngine.ServiceSession();
  sub_1001B8154();
  NANBitmap.Channel.operatingClass.getter(a1);
  type metadata accessor for Dictionary.Values();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  char v2 = Sequence.contains(where:)();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1002E4244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 24))(a4, a6);
  if (static NANClusterChangeEvent.__derived_struct_equals(_:_:)(v9 & 0xFFFFFFFFFFFFLL, a2 & 0xFFFFFFFFFFFFLL)) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 40))(a4, a6) & 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_1002E42DC()
{
  swift_beginAccess();
  _s17InitiatorInstanceCMa();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  type metadata accessor for NANDiscoveryEngine.ServiceSession();
  sub_1001B8154();
  uint64_t v0 = Dictionary.count.getter();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  _s17ResponderInstanceCMa();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  type metadata accessor for NANDiscoveryEngine.ServiceSession();
  uint64_t v1 = Dictionary.count.getter();
  swift_bridgeObjectRelease();
  uint64_t result = v0 + v1;
  if (__OFADD__(v0, v1)) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002E4484()
{
  uint64_t v1 = *v0;
  v7[5] = sub_1002DB290();
  v7[2] = *(void *)(v1 + 80);
  v7[3] = *(void *)(v1 + 88);
  type metadata accessor for NANDeviceLink();
  uint64_t v2 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = sub_1003741D0((void (*)(char *, char *))sub_1002FF044, (uint64_t)v7, v2, (uint64_t)&type metadata for WiFiAddress, (uint64_t)&type metadata for Never, WitnessTable, (uint64_t)&protocol witness table for Never, v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1002E4574()
{
  swift_beginAccess();
  type metadata accessor for NANDiscoveryEngine.UnownedDeviceLink();
  sub_1002FE310();
  Dictionary.subscript.getter();
  swift_endAccess();
  if (v2)
  {
    uint64_t v0 = swift_unownedRetain();
    sub_1002FF504(v0);
    swift_unownedRetainStrong();
    swift_unownedRelease();
  }
  return v2;
}

uint64_t sub_1002E46A0()
{
  swift_beginAccess();
  _s8InstanceCMa();
  swift_getWitnessTable();
  type metadata accessor for NANDiscoveryEngine.ServiceSession();
  Dictionary.subscript.getter();
  swift_endAccess();
  if (v3)
  {
    uint64_t v0 = v3;
    sub_1002FF540(v3);
    uint64_t v1 = v0[qword_100488978];
  }
  else
  {
    swift_beginAccess();
    _s8InstanceCMa_0();
    swift_getWitnessTable();
    type metadata accessor for NANDiscoveryEngine.ServiceSession();
    Dictionary.subscript.getter();
    uint64_t v1 = 0;
    swift_endAccess();
  }
  return v1;
}

uint64_t sub_1002E48B8()
{
  uint64_t v1 = (uint64_t *)(v0 + qword_100485BC0);
  swift_beginAccess();
  uint64_t v2 = *v1;
  _s17InitiatorInstanceCMa();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  uint64_t v3 = sub_1002E4A24(v2);
  swift_bridgeObjectRelease();
  uint64_t v4 = (uint64_t *)(v0 + qword_100485BC8);
  swift_beginAccess();
  uint64_t v5 = *v4;
  _s17ResponderInstanceCMa();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  uint64_t v6 = sub_1002E4A24(v5);
  swift_bridgeObjectRelease();
  uint64_t result = v3 + v6;
  if (__OFADD__(v3, v6)) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002E4A24(uint64_t a1)
{
  type metadata accessor for NANDiscoveryEngine.ServiceSession();
  sub_1001B8154();
  NANBitmap.Channel.operatingClass.getter(a1);
  type metadata accessor for Dictionary.Values();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  Sequence.filter(_:)();
  uint64_t v2 = Array.count.getter();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1002E4B48(uint64_t a1)
{
  type metadata accessor for NANDiscoveryEngine.ServiceSession();
  sub_1001B8154();
  NANBitmap.Channel.operatingClass.getter(a1);
  type metadata accessor for Dictionary.Values();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  char v2 = Sequence.contains(where:)();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

BOOL sub_1002E4C60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100303CEC(a3, a5)
      && sub_100303D34(a3, a5)
      && (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 48))(a3, a5) == 1;
}

void sub_1002E4CE8(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v37 = a2;
  uint64_t v6 = *v3;
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (void *)((char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v12 = (void *)*v11;
  *uint64_t v10 = *v11;
  (*(void (**)(uint64_t *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  id v13 = v12;
  char v14 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v8 + 8))(v10, v7);
  if (v14)
  {
    unint64_t v36 = a3;
    id v15 = (id)HIWORD(a1);
    unint64_t v16 = a1 >> 40;
    unint64_t v17 = HIDWORD(a1);
    unint64_t v18 = a1 >> 24;
    uint64_t v19 = (unint64_t *)((char *)v3 + qword_100485BC0);
    swift_beginAccess();
    unint64_t v33 = *v19;
    unint64_t v34 = a1 >> 8;
    __int16 v42 = a1;
    unint64_t v35 = a1 >> 16;
    char v43 = BYTE2(a1);
    char v44 = BYTE3(a1);
    char v45 = BYTE4(a1);
    char v46 = BYTE5(a1);
    char v47 = BYTE6(a1);
    uint64_t v20 = *(void *)(v6 + 80);
    uint64_t v21 = *(void *)(v6 + 88);
    uint64_t v22 = _s17InitiatorInstanceCMa();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v38 = v20;
    uint64_t v39 = v22;
    uint64_t v40 = v21;
    uint64_t v41 = WitnessTable;
    type metadata accessor for NANDiscoveryEngine.ServiceSession();
    unint64_t v33 = sub_1001B8154();
    Dictionary.subscript.getter();
    uint64_t v24 = v48;
    if (v48)
    {
      swift_endAccess();
      id v25 = v24;
      v31[1] = v3;
      unint64_t v32 = a1 >> 24;
      id v15 = v25;
      sub_1002FF540(v24);
      unint64_t v26 = v36;
      sub_1002D26C4(v37, v36);

      LOBYTE(v15) = BYTE6(a1);
      LOBYTE(v16) = BYTE5(a1);
      LOBYTE(v17) = BYTE4(a1);
      LOBYTE(v18) = v32;
    }
    else
    {
      swift_endAccess();
      unint64_t v26 = v36;
    }
    swift_beginAccess();
    LOBYTE(v42) = a1;
    HIBYTE(v42) = v34;
    char v43 = v35;
    char v44 = v18;
    char v45 = v17;
    char v46 = v16;
    char v47 = (char)v15;
    uint64_t v27 = _s17ResponderInstanceCMa();
    uint64_t v28 = swift_getWitnessTable();
    uint64_t v38 = v20;
    uint64_t v39 = v27;
    uint64_t v40 = v21;
    uint64_t v41 = v28;
    type metadata accessor for NANDiscoveryEngine.ServiceSession();
    Dictionary.subscript.getter();
    uint64_t v29 = v48;
    if (v48)
    {
      swift_endAccess();
      id v30 = v29;
      sub_1002FF540(v29);
      sub_10027D238(v37, v26);
    }
    else
    {
      swift_endAccess();
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1002E5074()
{
  uint64_t v1 = *v0;
  uint64_t v106 = type metadata accessor for DispatchTimeInterval();
  uint64_t v99 = *(void *)(v106 - 8);
  __chkstk_darwin();
  uint64_t v101 = (uint64_t)&v97 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v100 = (uint64_t)&v97 - v3;
  __chkstk_darwin();
  uint64_t v102 = (char *)&v97 - v4;
  __chkstk_darwin();
  uint64_t v6 = (void (**)(char *, uint64_t))((char *)&v97 - v5);
  __chkstk_darwin();
  int v107 = (void (**)(char *, uint64_t))((char *)&v97 - v7);
  sub_100010BCC(&qword_10047DB90);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchTime();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  id v13 = (char *)&v97 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  id v15 = (char *)&v97 - v14;
  uint64_t v16 = *(void *)(v1 + 88);
  unint64_t v105 = *(void (**)(char *, uint64_t))(v1 + 80);
  uint64_t v104 = v16;
  uint64_t v109 = type metadata accessor for NANDiscoveryEngine.BeaconScheduler.Reason();
  uint64_t v118 = Array.init()();
  uint64_t v103 = *(objc_class **)NANTimeUnit.defaultDiscoveryBeaconPeriod.unsafeMutableAddressor();
  uint64_t v108 = v0;
  uint64_t v17 = *(void *)((char *)v0 + qword_100485D80);
  swift_unownedRetainStrong();
  uint64_t v18 = sub_100354870();
  swift_release();
  uint64_t v19 = *(void *)(v18 + qword_100485C10);
  swift_retain();
  swift_release();
  uint64_t v20 = *(unsigned __int8 *)(v19 + 16);
  swift_release();
  switch(v20)
  {
    case 1:
      goto LABEL_9;
    case 2:
      goto LABEL_6;
    case 3:
      uint64_t v103 = *(objc_class **)NANTimeUnit.initialDiscoveryBeaconPeriod.unsafeMutableAddressor();
LABEL_6:
      __int16 v22 = 256;
      goto LABEL_8;
    case 4:
      __int16 v22 = 260;
LABEL_8:
      __int16 v117 = v22;
      type metadata accessor for Array();
      Array.append(_:)();
LABEL_9:
      uint64_t v23 = (uint64_t)v108 + qword_100485D70;
      swift_beginAccess();
      sub_1000136F4(v23, (uint64_t)v9, &qword_10047DB90);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
      {
        sub_1000380B4((uint64_t)v9, &qword_10047DB90);
        uint64_t v24 = v99;
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v15, v9, v10);
        type metadata accessor for P2PTimer();
        variable initialization expression of AWDLPeer.lastUpdated();
        uint64_t v25 = v10;
        uint64_t v26 = v11;
        uint64_t v27 = v107;
        DispatchTime.distance(to:)();
        uint64_t v28 = *(void (**)(char *, uint64_t))(v26 + 8);
        uint64_t v98 = v25;
        uint64_t v97 = v28;
        v28(v13, v25);
        *uint64_t v6 = 2;
        uint64_t v24 = v99;
        uint64_t v29 = v106;
        (*(void (**)(void *, void, uint64_t))(v99 + 104))(v6, enum case for DispatchTimeInterval.seconds(_:), v106);
        BOOL v30 = static DispatchTimeInterval.< infix(_:_:)();
        uint64_t v31 = *(void (**)(void *, uint64_t))(v24 + 8);
        v31(v6, v29);
        v31(v27, v29);
        if (v30)
        {
          __int16 v116 = 257;
          type metadata accessor for Array();
          Array.append(_:)();
        }
        v97(v15, v98);
      }
      swift_unownedRetainStrong();
      uint64_t v32 = sub_100354870();
      swift_release();
      unint64_t v33 = (uint64_t *)(v32 + qword_100485BC0);
      swift_beginAccess();
      uint64_t v34 = *v33;
      swift_bridgeObjectRetain();
      swift_release();
      uint64_t v35 = (uint64_t)v105;
      uint64_t v36 = v104;
      uint64_t v37 = _s17InitiatorInstanceCMa();
      uint64_t WitnessTable = swift_getWitnessTable();
      uint64_t v39 = v100;
      sub_1002E98BC(v34, v35, v37, v36, WitnessTable, v100);
      swift_bridgeObjectRelease();
      swift_unownedRetainStrong();
      uint64_t v40 = sub_100354870();
      swift_release();
      uint64_t v41 = (uint64_t *)(v40 + qword_100485BC8);
      swift_beginAccess();
      uint64_t v42 = *v41;
      swift_bridgeObjectRetain();
      swift_release();
      uint64_t v43 = _s17ResponderInstanceCMa();
      uint64_t v44 = swift_getWitnessTable();
      uint64_t v45 = v101;
      sub_1002E98BC(v42, v35, v43, v36, v44, v101);
      swift_bridgeObjectRelease();
      if (static DispatchTimeInterval.< infix(_:_:)()) {
        uint64_t v46 = v45;
      }
      else {
        uint64_t v46 = v39;
      }
      char v47 = v102;
      uint64_t v48 = v106;
      (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v102, v46, v106);
      uint64_t v49 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
      v49(v45, v48);
      v49(v39, v48);
      uint64_t v50 = v107;
      *int v107 = 256;
      (*(void (**)(void *, void, uint64_t))(v24 + 104))(v50, enum case for DispatchTimeInterval.milliseconds(_:), v48);
      BOOL v51 = static DispatchTimeInterval.< infix(_:_:)();
      v49((uint64_t)v50, v48);
      v49((uint64_t)v47, v48);
      if (v51)
      {
        LOWORD(v113) = 259;
        type metadata accessor for Array();
        Array.append(_:)();
      }
      swift_unownedRetainStrong();
      sub_100354870();
      swift_release();
      uint64_t v52 = sub_1002E48B8();
      swift_release();
      os_log_type_t v53 = v108;
      if (v52 < 1) {
        goto LABEL_23;
      }
      swift_unownedRetainStrong();
      uint64_t v54 = sub_100354870();
      swift_release();
      unint64_t v55 = *(void *)(v54 + qword_100485BD8);
      swift_release();
      if (v55 <= 6 && ((1 << v55) & 0x66) != 0)
      {
        LOWORD(v113) = 258;
        type metadata accessor for Array();
        Array.append(_:)();
LABEL_23:
        unsigned __int8 v56 = 0;
        char v57 = 1;
        goto LABEL_24;
      }
      if ((v55 & 0xFFFFFFFFFFFFFFFELL) != 0xA) {
        goto LABEL_23;
      }
      if (*((unsigned char *)v53 + qword_100485D78 + 1) == 1) {
        unsigned __int8 v56 = sub_1002FE274(8);
      }
      else {
        unsigned __int8 v56 = *((unsigned char *)v53 + qword_100485D78);
      }
      LOWORD(v113) = v56;
      type metadata accessor for Array();
      Array.append(_:)();
      char v57 = 0;
LABEL_24:
      uint64_t v58 = (unsigned __int8 *)v53 + qword_100485D78;
      unsigned __int8 *v58 = v56;
      v58[1] = v57;
      swift_unownedRetainStrong();
      int v59 = *(unsigned __int8 *)(v17 + *(void *)(*(void *)v17 + 616));
      swift_release();
      if ((v59 - 2) < 3 || v59 == 5)
      {
        swift_bridgeObjectRelease();
        uint64_t v60 = (objc_class *)_swiftEmptyArrayStorage;
        uint64_t v61 = v103;
      }
      else
      {
        swift_unownedRetainStrong();
        uint64_t v62 = WiFiInterface.capabilities.getter();
        swift_release();
        uint64_t v63 = *WiFiDriverCapabilities.supportsSimultaneousDualBand.unsafeMutableAddressor();
        *(void *)&long long v110 = v62;
        unint64_t v113 = v63;
        unint64_t v64 = sub_1002C8868();
        swift_bridgeObjectRetain_n();
        ExtendableOptionSet.formIntersection(_:)((uint64_t)&v110, (uint64_t)&type metadata for WiFiDriverCapabilities, v64);
        LODWORD(v64) = sub_1000956AC(v113, v63);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v112 = v118;
        swift_bridgeObjectRetain();
        uint64_t v65 = TimeBitmap.zero.unsafeMutableAddressor();
        uint64_t v66 = v65[2];
        long long v110 = *(_OWORD *)v65;
        uint64_t v111 = v66;
        __chkstk_darwin();
        uint64_t v67 = (void (*)(char *, uint64_t))v104;
        *(&v97 - 4) = v105;
        *(&v97 - 3) = v67;
        LODWORD(v108) = v64;
        *((unsigned char *)&v97 - 16) = v64 & 1;
        uint64_t v68 = type metadata accessor for Array();
        uint64_t v69 = swift_getWitnessTable();
        uint64_t v109 = v68;
        int v107 = (void *)v69;
        Sequence.reduce<A>(into:_:)();
        swift_bridgeObjectRelease();
        unint64_t v70 = v113;
        unint64_t v71 = v114;
        unint64_t v72 = v115;
        char v73 = *(unsigned char *)NANMapID.primary.unsafeMutableAddressor();
        __int16 v74 = TimeBitmap.nanBitmap.getter(v70, v71, v72);
        uint64_t v76 = v75;
        uint64_t v78 = v77;
        uint64_t v60 = (objc_class *)sub_100330648(0, 1, 1, _swiftEmptyArrayStorage);
        unint64_t v80 = *((void *)v60 + 2);
        unint64_t v79 = *((void *)v60 + 3);
        if (v80 >= v79 >> 1) {
          uint64_t v60 = (objc_class *)sub_100330648((void *)(v79 > 1), v80 + 1, 1, v60);
        }
        *((void *)v60 + 2) = v80 + 1;
        os_log_type_t v81 = (void *)((char *)v60 + 32 * v80);
        *((unsigned char *)v81 + 32) = v73;
        *((_WORD *)v81 + 20) = v74;
        v81[6] = v76;
        v81[7] = v78;
        swift_unownedRetainStrong();
        unint64_t v82 = sub_100356594();
        swift_release();
        if ((((v82 & 0xFF00000000) != 0x300000000) & v108) == 1)
        {
          uint64_t v112 = v118;
          uint64_t v83 = v65[2];
          long long v110 = *(_OWORD *)v65;
          uint64_t v111 = v83;
          __chkstk_darwin();
          uint64_t v84 = (void (*)(char *, uint64_t))v104;
          *(&v97 - 2) = v105;
          *(&v97 - 1) = v84;
          swift_bridgeObjectRetain();
          Sequence.reduce<A>(into:_:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v85 = v113;
          unint64_t v86 = v114;
          unint64_t v87 = v115;
          char v88 = *(unsigned char *)NANMapID.secondary.unsafeMutableAddressor();
          __int16 v89 = TimeBitmap.nanBitmap.getter(v85, v86, v87);
          uint64_t v91 = v90;
          uint64_t v93 = v92;
          unint64_t v95 = *((void *)v60 + 2);
          unint64_t v94 = *((void *)v60 + 3);
          if (v95 >= v94 >> 1) {
            uint64_t v60 = (objc_class *)sub_100330648((void *)(v94 > 1), v95 + 1, 1, v60);
          }
          *((void *)v60 + 2) = v95 + 1;
          int v96 = (void *)((char *)v60 + 32 * v95);
          *((unsigned char *)v96 + 32) = v88;
          *((_WORD *)v96 + 20) = v89;
          v96[6] = v91;
          v96[7] = v93;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        uint64_t v61 = *(objc_class **)NANTimeUnit.zero.unsafeMutableAddressor();
      }
      swift_unownedRetainStrong();
      sub_1003570B4(v61, v60);
      return swift_release();
    default:
      swift_bridgeObjectRelease();
      swift_unownedRetainStrong();
      sub_1003570B4(0, 0);
      return swift_release();
  }
}

uint64_t sub_1002E5D54@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v20 = a3;
  uint64_t v19 = *a2;
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (uint64_t *)((char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  uint64_t v9 = (char *)&v17 - v8;
  __chkstk_darwin();
  uint64_t v11 = (char *)&v17 - v10;
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12((char *)&v17 - v10, a1, v4);
  id v18 = (id)*OS_dispatch_queue.nan.unsafeMutableAddressor();
  v12(v9, a1, v4);
  uint64_t v13 = swift_allocObject();
  swift_weakInit();
  uint64_t v14 = (void *)swift_allocObject();
  uint64_t v15 = v19;
  v14[2] = *(void *)(v19 + 80);
  v14[3] = *(void *)(v15 + 88);
  v14[4] = v13;
  *uint64_t v7 = 100;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchTimeInterval.milliseconds(_:), v4);
  type metadata accessor for P2PTimer();
  swift_allocObject();
  uint64_t result = P2PTimer.init(deadlineAfter:on:repeating:leeway:_:)((uint64_t)v11, v18, (uint64_t)v9, (uint64_t)v7, (uint64_t)sub_1002FF118, (uint64_t)v14);
  uint64_t *v20 = result;
  return result;
}

uint64_t sub_1002E5FA4()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)*v0;
  uint64_t v3 = v2[11];
  uint64_t v70 = v2[10];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v67 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v66 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v65 = (char *)&v55 - v5;
  uint64_t v69 = type metadata accessor for NANAttribute.CustomDeviceInformation(0);
  __chkstk_darwin();
  unint64_t v71 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = type metadata accessor for DispatchTime();
  uint64_t v7 = *(void *)(v73 - 8);
  __chkstk_darwin();
  unint64_t v64 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v72 = (char *)&v55 - v9;
  uint64_t v10 = type metadata accessor for DispatchTimeInterval();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v15 = (char *)&v55 - v14;
  uint64_t v16 = *(void *)((char *)v1 + v2[35]);
  swift_unownedRetainStrong();
  LOBYTE(v2) = sub_1003568D0();
  uint64_t result = swift_release();
  if ((v2 & 1) == 0)
  {
    swift_unownedRetainStrong();
    sub_100356CE8((uint64_t)v15);
    swift_release();
    *(void *)uint64_t v13 = 3;
    id v18 = *(void (**)(void))(v11 + 104);
    unsigned int v60 = enum case for DispatchTimeInterval.seconds(_:);
    uint64_t v61 = v11 + 104;
    int v59 = (void (*)(void *, void, uint64_t))v18;
    v18(v13);
    BOOL v19 = static DispatchTimeInterval.< infix(_:_:)();
    uint64_t v20 = *(void (**)(char *, uint64_t))(v11 + 8);
    v20(v13, v10);
    uint64_t v62 = v20;
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v20)(v15, v10);
    if (!v19)
    {
      uint64_t v21 = type metadata accessor for P2PTimer();
      uint64_t v63 = v3;
      __int16 v22 = v72;
      uint64_t v55 = v21;
      variable initialization expression of AWDLPeer.lastUpdated();
      uint64_t v58 = (uint64_t)v1;
      uint64_t v23 = (char *)v1 + qword_100485BF0;
      swift_beginAccess();
      uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
      uint64_t v25 = v64;
      unsigned __int8 v56 = v23;
      uint64_t v26 = v23;
      uint64_t v27 = v7;
      uint64_t v28 = v73;
      v24(v64, v26, v73);
      DispatchTime.distance(to:)();
      uint64_t v57 = v27;
      uint64_t v29 = *(void (**)(char *, uint64_t))(v27 + 8);
      v29(v25, v28);
      v29(v22, v28);
      *(void *)uint64_t v13 = 5;
      v59(v13, v60, v10);
      LODWORD(v61) = static DispatchTimeInterval.< infix(_:_:)();
      unsigned int v60 = v61 ^ 1;
      BOOL v30 = v62;
      v62(v13, v10);
      v30(v15, v10);
      uint64_t v31 = swift_allocObject();
      unint64_t v64 = (char *)v31;
      *(void *)(v31 + 16) = &_swiftEmptyDictionarySingleton;
      uint64_t v62 = (void (*)(char *, uint64_t))(v31 + 16);
      swift_unownedRetainStrong();
      uint64_t v32 = v67;
      unint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v67 + 16);
      uint64_t v34 = v65;
      uint64_t v35 = AssociatedTypeWitness;
      v33(v65, v16 + *(void *)(*(void *)v16 + 96), AssociatedTypeWitness);
      swift_release();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      char v37 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(v35, AssociatedConformanceWitness);
      uint64_t v38 = *(void (**)(char *, uint64_t))(v32 + 8);
      v38(v34, v35);
      swift_unownedRetainStrong();
      uint64_t v39 = v66;
      v33(v66, v16 + *(void *)(*(void *)v16 + 96), v35);
      swift_release();
      char v40 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(v35, AssociatedConformanceWitness);
      v38(v39, v35);
      swift_unownedRetainStrong();
      uint64_t v41 = WiFiInterface.capabilities.getter();
      swift_release();
      uint64_t v42 = *WiFiDriverCapabilities.supportsSimultaneousDualBand.unsafeMutableAddressor();
      v74[0] = v41;
      uint64_t v75 = v42;
      unint64_t v43 = sub_1002C8868();
      swift_bridgeObjectRetain_n();
      ExtendableOptionSet.formIntersection(_:)((uint64_t)v74, (uint64_t)&type metadata for WiFiDriverCapabilities, v43);
      LOBYTE(v43) = sub_1000956AC(v75, v42);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v43) {
        int v44 = 0;
      }
      else {
        int v44 = *(_DWORD *)NANAttribute.CustomDeviceInformation.Flags.doesNotSupportSimultaneousDualBand.unsafeMutableAddressor();
      }
      uint64_t v45 = (uint64_t)v71;
      NANAttribute.CustomDeviceInformation.CustomAttributes.init()((uint64_t)&v71[*(int *)(v69 + 28)]);
      *(unsigned char *)uint64_t v45 = v37;
      *(unsigned char *)(v45 + 1) = v40;
      *(_DWORD *)(v45 + 4) = v44;
      uint64_t v46 = v58;
      char v47 = (uint64_t *)(v58 + qword_100485BC0);
      swift_beginAccess();
      uint64_t v48 = *v47;
      _s17InitiatorInstanceCMa();
      swift_bridgeObjectRetain();
      swift_getWitnessTable();
      sub_1002E68F8(v48);
      swift_bridgeObjectRelease();
      uint64_t v49 = (uint64_t *)(v46 + qword_100485BC8);
      swift_beginAccess();
      uint64_t v50 = *v49;
      _s17ResponderInstanceCMa();
      swift_bridgeObjectRetain();
      swift_getWitnessTable();
      sub_1002E68F8(v50);
      swift_bridgeObjectRelease();
      if (v61)
      {
        sub_100300D5C(v45, type metadata accessor for NANAttribute.CustomDeviceInformation);
      }
      else
      {
        BOOL v51 = (uint64_t *)v62;
        swift_beginAccess();
        uint64_t v52 = *v51;
        swift_bridgeObjectRetain();
        sub_10037094C((void (*)(uint64_t))sub_1002FF14C, v46, v52);
        swift_bridgeObjectRelease();
        os_log_type_t v53 = v72;
        variable initialization expression of AWDLPeer.lastUpdated();
        sub_100300D5C(v45, type metadata accessor for NANAttribute.CustomDeviceInformation);
        uint64_t v54 = v56;
        swift_beginAccess();
        (*(void (**)(char *, char *, uint64_t))(v57 + 40))(v54, v53, v73);
        swift_endAccess();
      }
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1002E68F8(uint64_t a1)
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002E6B00(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v89 = a4;
  uint64_t v106 = a3;
  uint64_t v98 = type metadata accessor for NANPeer(0);
  __chkstk_darwin();
  uint64_t v92 = (uint64_t)&v85 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v91 = (uint64_t)&v85 - v11;
  __chkstk_darwin();
  uint64_t v88 = (uint64_t)&v85 - v12;
  sub_100010BCC(&qword_1004862B0);
  __chkstk_darwin();
  uint64_t v97 = (uint64_t)&v85 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v90 = (uint64_t)&v85 - v14;
  __chkstk_darwin();
  uint64_t v100 = (char *)&v85 - v15;
  sub_100010BCC(&qword_1004862B8);
  __chkstk_darwin();
  uint64_t v96 = (uint64_t)&v85 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v87 = (uint64_t)&v85 - v17;
  __chkstk_darwin();
  uint64_t v99 = (uint64_t)&v85 - v18;
  uint64_t v107 = sub_100010BCC((uint64_t *)&unk_100484A90);
  unint64_t v105 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v107 - 8);
  __chkstk_darwin();
  uint64_t v20 = (char *)&v85 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v22 = (uint64_t)&v85 - v21;
  uint64_t v104 = type metadata accessor for NANAttribute.CustomDeviceInformation(0);
  __chkstk_darwin();
  uint64_t v24 = (char *)&v85 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = *a1;
  BOOL v103 = sub_1003019CC(a5, a6);
  uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t))(a6 + 24);
  uint64_t v101 = v26(a5, a6);
  uint64_t v27 = v26(a5, a6);
  uint64_t v102 = v24;
  sub_100300CF4(v106, (uint64_t)v24, type metadata accessor for NANAttribute.CustomDeviceInformation);
  uint64_t v94 = a5;
  uint64_t v95 = a6;
  uint64_t v93 = v25;
  unint64_t v28 = sub_100301864(a5, a6);
  swift_beginAccess();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v108 = (void *)*a2;
  BOOL v30 = v108;
  *a2 = 0x8000000000000000;
  uint64_t v31 = v27 & 0xFFFFFFFFFFFFLL;
  uint64_t v33 = sub_100031214(v27 & 0xFFFFFFFFFFFFLL);
  uint64_t v34 = v30[2];
  BOOL v35 = (v32 & 1) == 0;
  uint64_t v36 = v34 + v35;
  if (!__OFADD__(v34, v35))
  {
    LOBYTE(v37) = v32;
    if (v30[3] >= v36)
    {
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_6;
      }
      goto LABEL_43;
    }
    sub_100293B00(v36, isUniquelyReferenced_nonNull_native);
    BOOL v30 = v108;
    unint64_t v38 = sub_100031214(v31);
    if ((v37 & 1) == (v39 & 1))
    {
      uint64_t v33 = v38;
      goto LABEL_6;
    }
LABEL_52:
    sub_100300D5C((uint64_t)v102, type metadata accessor for NANAttribute.CustomDeviceInformation);
    goto LABEL_53;
  }
  __break(1u);
LABEL_40:
  BOOL v30 = sub_100330994(0, v30[2] + 1, 1, v30);
  *(void *)(v33 + v22) = v30;
  while (1)
  {
    unint64_t v45 = v30[2];
    unint64_t v44 = v30[3];
    uint64_t v37 = v45 + 1;
    if (v45 >= v44 >> 1)
    {
      BOOL v30 = sub_100330994((void *)(v44 > 1), v45 + 1, 1, v30);
      *(void *)(v33 + v22) = v30;
    }
    v30[2] = v37;
    uint64_t v46 = (uint64_t)&v30[v45] - v45;
    *(_WORD *)(v46 + 32) = v28;
    *(unsigned char *)(v46 + 34) = BYTE2(v28);
    *(unsigned char *)(v46 + 35) = BYTE3(v28);
    *(unsigned char *)(v46 + 36) = BYTE4(v28);
    *(unsigned char *)(v46 + 37) = BYTE5(v28);
    *(unsigned char *)(v46 + 38) = BYTE6(v28);
    uint64_t v47 = *a2;
    swift_endAccess();
    if (!*(void *)(v47 + 16)
      || (unint64_t v28 = v101 & 0xFFFFFFFFFFFFLL, v48 = sub_100031214(v101 & 0xFFFFFFFFFFFFLL), (v49 & 1) == 0))
    {
      sub_100300D5C((uint64_t)v102, type metadata accessor for NANAttribute.CustomDeviceInformation);
      __break(1u);
LABEL_51:
      v105(v47, 1, 1, v107);
      sub_100300D5C((uint64_t)v102, type metadata accessor for NANAttribute.CustomDeviceInformation);
      __break(1u);
      goto LABEL_52;
    }
    sub_1000136F4(*(void *)(v47 + 56) + v48 * v106, (uint64_t)v20, (uint64_t *)&unk_100484A90);
    uint64_t v31 = v20[*(int *)(v107 + 48)];
    sub_1000380B4((uint64_t)v20, (uint64_t *)&unk_100484A90);
    swift_beginAccess();
    uint64_t v22 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v108 = (void *)*a2;
    uint64_t v50 = (uint64_t)v108;
    *a2 = 0x8000000000000000;
    uint64_t v33 = sub_100031214(v28);
    uint64_t v52 = *(void *)(v50 + 16);
    BOOL v53 = (v51 & 1) == 0;
    uint64_t v54 = v52 + v53;
    if (__OFADD__(v52, v53))
    {
      __break(1u);
      goto LABEL_42;
    }
    LOBYTE(v37) = v51;
    if (*(void *)(v50 + 24) >= v54)
    {
      uint64_t v57 = v105;
      if (v22)
      {
        uint64_t v58 = (uint64_t)v100;
        if ((v51 & 1) == 0) {
          goto LABEL_45;
        }
      }
      else
      {
        sub_1003A4194();
        uint64_t v58 = (uint64_t)v100;
        if ((v37 & 1) == 0) {
          goto LABEL_45;
        }
      }
    }
    else
    {
      sub_100293B00(v54, v22);
      unint64_t v55 = sub_100031214(v28);
      uint64_t v57 = v105;
      if ((v37 & 1) != (v56 & 1)) {
        goto LABEL_53;
      }
      uint64_t v33 = v55;
      uint64_t v58 = (uint64_t)v100;
      if ((v37 & 1) == 0)
      {
LABEL_45:
        uint64_t v84 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((void *)v57 + 7);
        uint64_t v20 = (char *)v57 + 56;
        v84(v99, 1, 1, v107);
        sub_100300D5C((uint64_t)v102, type metadata accessor for NANAttribute.CustomDeviceInformation);
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        sub_1003A4194();
        if ((v37 & 1) == 0) {
          goto LABEL_48;
        }
LABEL_38:
        uint64_t v82 = v96;
        sub_10006EC68(v108[7] + v33 * v106, v96, (uint64_t *)&unk_100484A90);
        v105(v82, 0, 1, v107);
        (*(void (**)(uint64_t, uint64_t))(v95 + 80))(v82, v94);
        sub_1002FDD14(v82, 1, (uint64_t *)&v108, v33, v28);
        sub_1000380B4(v82, &qword_1004862B8);
        *a2 = (uint64_t)v108;
        swift_endAccess();
        return sub_100300D5C((uint64_t)v102, type metadata accessor for NANAttribute.CustomDeviceInformation);
      }
    }
    BOOL v59 = v103;
    char v60 = v31 | v103;
    uint64_t v31 = v99;
    sub_10006EC68(v108[7] + v33 * v106, v99, (uint64_t *)&unk_100484A90);
    uint64_t v61 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((void *)v57 + 7);
    uint64_t v20 = (char *)v57 + 56;
    uint64_t v37 = v107;
    unint64_t v105 = v61;
    v61(v31, 0, 1, v107);
    *(unsigned char *)(v31 + *(int *)(v37 + 48)) = v60 & 1;
    sub_1002FDD14(v31, 1, (uint64_t *)&v108, v33, v28);
    sub_1000380B4(v31, &qword_1004862B8);
    *a2 = (uint64_t)v108;
    swift_endAccess();
    if (v59) {
      break;
    }
    while (1)
    {
      swift_beginAccess();
      uint64_t v22 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v108 = (void *)*a2;
      uint64_t v75 = (uint64_t)v108;
      *a2 = 0x8000000000000000;
      uint64_t v33 = sub_100031214(v28);
      uint64_t v77 = *(void *)(v75 + 16);
      BOOL v78 = (v76 & 1) == 0;
      uint64_t v79 = v77 + v78;
      if (__OFADD__(v77, v78)) {
        break;
      }
      LOBYTE(v37) = v76;
      if (*(void *)(v75 + 24) >= v79)
      {
        if ((v22 & 1) == 0) {
          goto LABEL_47;
        }
        if (v76) {
          goto LABEL_38;
        }
      }
      else
      {
        sub_100293B00(v79, v22);
        unint64_t v80 = sub_100031214(v28);
        if ((v37 & 1) != (v81 & 1)) {
          goto LABEL_53;
        }
        uint64_t v33 = v80;
        if (v37) {
          goto LABEL_38;
        }
      }
LABEL_48:
      v105(v96, 1, 1, v107);
      sub_100300D5C((uint64_t)v102, type metadata accessor for NANAttribute.CustomDeviceInformation);
      __break(1u);
LABEL_49:
      sub_1003A4194();
LABEL_29:
      uint64_t v47 = v87;
      if ((v37 & 1) == 0) {
        goto LABEL_51;
      }
      sub_10006EC68(v108[7] + v33 * v106, v87, (uint64_t *)&unk_100484A90);
      v105(v47, 0, 1, v107);
      sub_1002FF224(v97, v47 + *(int *)(v104 + 28) + (uint64_t)*(int *)(v86 + 40));
      sub_1002FDD14(v47, 1, (uint64_t *)&v108, v33, v28);
      sub_1000380B4(v47, &qword_1004862B8);
      *a2 = (uint64_t)v108;
      swift_endAccess();
    }
LABEL_42:
    __break(1u);
LABEL_43:
    sub_1003A4194();
    BOOL v30 = v108;
LABEL_6:
    *a2 = (uint64_t)v30;
    swift_bridgeObjectRelease();
    char v40 = (void *)*a2;
    if ((v37 & 1) == 0)
    {
      uint64_t v41 = *(int *)(v107 + 48);
      sub_100300CF4((uint64_t)v102, v22, type metadata accessor for NANAttribute.CustomDeviceInformation);
      *(unsigned char *)(v22 + v41) = v103;
      sub_10029636C(v33, v31, v22, v40);
    }
    uint64_t v42 = v40[7];
    uint64_t v106 = *((void *)v105 + 9);
    uint64_t v33 = v42 + v106 * v33 + *(int *)(v104 + 28);
    uint64_t v86 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
    uint64_t v22 = *(int *)(v86 + 44);
    BOOL v30 = *(void **)(v33 + v22);
    char v43 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v33 + v22) = v30;
    if ((v43 & 1) == 0) {
      goto LABEL_40;
    }
  }
  swift_unownedRetainStrong();
  swift_unownedRetainStrong();
  uint64_t v62 = v88;
  sub_10035665C(v28, v88);
  swift_release();
  uint64_t v31 = v90;
  sub_1000136F4(v62 + *(int *)(v98 + 80), v90, &qword_1004862B0);
  sub_100300D5C(v62, type metadata accessor for NANPeer);
  uint64_t v63 = type metadata accessor for UUID();
  uint64_t v64 = *(void *)(v63 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v31, 1, v63) == 1)
  {
    UUID.init()();
    sub_1000380B4(v31, &qword_1004862B0);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 32))(v58, v31, v63);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v64 + 56))(v58, 0, 1, v63);
  uint64_t v65 = v91;
  sub_10035665C(v28, v91);
  uint64_t v66 = v98;
  sub_1002FF224(v58, v65 + *(int *)(v98 + 80));
  sub_1003568F4(v65, v28);
  swift_release();
  swift_unownedRetainStrong();
  uint64_t v37 = v92;
  sub_10035665C(v28, v92);
  swift_release();
  sub_1000136F4(v37 + *(int *)(v66 + 80), v97, &qword_1004862B0);
  sub_100300D5C(v37, type metadata accessor for NANPeer);
  swift_beginAccess();
  int v67 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v108 = (void *)*a2;
  uint64_t v68 = (uint64_t)v108;
  *a2 = 0x8000000000000000;
  uint64_t v33 = sub_100031214(v28);
  uint64_t v70 = *(void *)(v68 + 16);
  BOOL v71 = (v69 & 1) == 0;
  uint64_t v72 = v70 + v71;
  if (__OFADD__(v70, v71)) {
    goto LABEL_46;
  }
  LOBYTE(v37) = v69;
  if (*(void *)(v68 + 24) >= v72)
  {
    if ((v67 & 1) == 0) {
      goto LABEL_49;
    }
    goto LABEL_29;
  }
  sub_100293B00(v72, v67);
  unint64_t v73 = sub_100031214(v28);
  if ((v37 & 1) == (v74 & 1))
  {
    uint64_t v33 = v73;
    goto LABEL_29;
  }
LABEL_53:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_1002E77D8(unsigned __int8 *a1, void *a2)
{
  uint64_t v4 = (void *)*a2;
  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  uint64_t v91 = (uint64_t)&v86 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v92 = (uint64_t)&v86 - v6;
  os_log_t v7 = (os_log_t)sub_100010BCC(&qword_1004862A8);
  __chkstk_darwin();
  uint64_t v93 = (uint64_t)&v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v94 = (unsigned __int8 *)&v86 - v9;
  __chkstk_darwin();
  uint64_t v89 = (char *)&v86 - v10;
  __chkstk_darwin();
  uint64_t v97 = (char *)&v86 - v11;
  uint64_t v87 = v4[11];
  uint64_t v86 = v4[10];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v88 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v86 - v13;
  type metadata accessor for NANPeer(0);
  __chkstk_darwin();
  uint64_t v16 = (char *)&v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = v4[35];
  uint64_t v90 = a2;
  uint64_t v18 = *(void *)((char *)a2 + v17);
  swift_unownedRetainStrong();
  uint64_t v19 = a1[1];
  uint64_t v20 = *(unsigned int *)(a1 + 2);
  uint64_t v95 = *a1;
  sub_10035665C(v95 | (v19 << 8) | (v20 << 16), (uint64_t)v16);
  swift_release();
  LOBYTE(v4) = sub_1002A16F8();
  sub_100300D5C((uint64_t)v16, type metadata accessor for NANPeer);
  os_log_t v98 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v87 = v20 >> 8;
    uint64_t v88 = v18;
    uint64_t v86 = WORD1(v20);
    unsigned __int8 v24 = BYTE3(v20);
    goto LABEL_5;
  }
  swift_unownedRetainStrong();
  uint64_t v21 = v88;
  (*(void (**)(char *, uint64_t, uint64_t))(v88 + 16))(v14, v18 + *(void *)(*(void *)v18 + 96), AssociatedTypeWitness);
  swift_release();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  unsigned int v23 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v14, AssociatedTypeWitness);
  if (v23 <= 4)
  {
    uint64_t v95 = *a1;
    LOBYTE(v19) = a1[1];
    LOBYTE(v20) = a1[2];
    uint64_t v87 = a1[3];
    uint64_t v88 = v18;
    uint64_t v86 = a1[4];
    unsigned __int8 v24 = a1[5];
LABEL_5:
    uint64_t isa_low = SLODWORD(v7[6].isa);
    uint64_t v26 = v97;
    uint64_t v27 = (uint64_t)&v97[isa_low];
    uint64_t v28 = sub_100010BCC((uint64_t *)&unk_100484A90);
    uint64_t v29 = *(int *)(v28 + 48);
    uint64_t v30 = (uint64_t)&a1[isa_low];
    *uint64_t v26 = v95;
    v26[1] = v19;
    uint64_t v26[2] = v20;
    v26[3] = v87;
    void v26[4] = v86;
    v26[5] = v24;
    uint64_t v95 = (uint64_t)type metadata accessor for NANAttribute.CustomDeviceInformation;
    sub_100300CF4(v30, v27, type metadata accessor for NANAttribute.CustomDeviceInformation);
    *(unsigned char *)(v27 + v29) = *(unsigned char *)(v30 + v29);
    uint64_t v31 = type metadata accessor for NANAttribute.CustomDeviceInformation(0);
    char v32 = (unsigned char *)v92;
    sub_100300CF4(v27 + *(int *)(v31 + 28), v92, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
    sub_100300D5C(v27, type metadata accessor for NANAttribute.CustomDeviceInformation);
    uint64_t v33 = (uint64_t)&v26[SLODWORD(v98[6].isa)];
    uint64_t v34 = *(int *)(v28 + 48);
    __int16 v35 = *((_WORD *)a1 + 2);
    *(_DWORD *)uint64_t v26 = *(_DWORD *)a1;
    *((_WORD *)v26 + 2) = v35;
    sub_100300CF4(v30, v33, (uint64_t (*)(void))v95);
    char v36 = *(unsigned char *)(v30 + v29);
    os_log_t v7 = v98;
    *(unsigned char *)(v33 + v34) = v36;
    LODWORD(v34) = *(_DWORD *)(v33 + 4);
    sub_100300D5C(v33, type metadata accessor for NANAttribute.CustomDeviceInformation);
    *char v32 = v34;
    uint64_t v37 = v91;
    unint64_t v38 = v26;
    sub_100300CF4((uint64_t)v32, v91, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
    unsigned __int8 v39 = NANActionFrame.init(customAttributes:)(v37);
    uint64_t v95 = (uint64_t)v40;
    sub_100300D5C((uint64_t)v32, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
    goto LABEL_7;
  }
  uint64_t v41 = SLODWORD(v7[6].isa);
  unint64_t v38 = v97;
  uint64_t v42 = (uint64_t)&v97[v41];
  sub_100300CF4((uint64_t)&a1[v41], (uint64_t)&v97[v41], type metadata accessor for NANAttribute.CustomDeviceInformation);
  unsigned __int8 v39 = NANActionFrame.init(customDeviceInformation:)(v42);
  uint64_t v95 = (uint64_t)v43;
LABEL_7:
  swift_unownedRetainStrong();
  sub_100356AB8();
  swift_release();
  uint64_t v44 = SLODWORD(v7[6].isa);
  uint64_t v45 = (uint64_t)&v38[v44];
  uint64_t v92 = sub_100010BCC((uint64_t *)&unk_100484A90);
  uint64_t v46 = *(int *)(v92 + 48);
  uint64_t v47 = (uint64_t)&a1[v44];
  __int16 v48 = *((_WORD *)a1 + 2);
  *(_DWORD *)unint64_t v38 = *(_DWORD *)a1;
  *((_WORD *)v38 + 2) = v48;
  sub_100300CF4(v47, v45, type metadata accessor for NANAttribute.CustomDeviceInformation);
  int v49 = *(unsigned __int8 *)(v47 + v46);
  uint64_t v91 = v46;
  *(unsigned char *)(v45 + v46) = v49;
  sub_100300D5C(v45, type metadata accessor for NANAttribute.CustomDeviceInformation);
  uint64_t v50 = v39;
  uint64_t v51 = *a1;
  uint64_t v52 = a1[1];
  os_log_t v53 = v7;
  uint64_t v54 = a1[2];
  uint64_t v55 = a1[3];
  uint64_t v56 = a1[4];
  uint64_t v57 = a1[5];
  uint64_t v87 = v52;
  uint64_t v88 = v51;
  if (v49) {
    int v58 = 4;
  }
  else {
    int v58 = 0;
  }
  uint64_t v59 = v96;
  sub_100331C6C(v58, v50, v95, 0, v51 | (v52 << 8) | (v54 << 16) | (v55 << 24) | (v56 << 32) | (v57 << 40), 0);
  if (v59)
  {
    swift_release();
    swift_bridgeObjectRelease();
    char v60 = v89;
    uint64_t v96 = (uint64_t)v90 + qword_1004888B8;
    uint64_t v61 = (uint64_t)&v89[SLODWORD(v53[6].isa)];
    uint64_t v62 = *(int *)(v92 + 48);
    *uint64_t v89 = v88;
    v60[1] = v87;
    v60[2] = v54;
    uint64_t v60[3] = v55;
    v60[4] = v56;
    v60[5] = v57;
    sub_100300CF4(v47, v61, type metadata accessor for NANAttribute.CustomDeviceInformation);
    *(unsigned char *)(v61 + v62) = *(unsigned char *)(v47 + v91);
    uint64_t v63 = v94;
    sub_1000136F4((uint64_t)v60, (uint64_t)v94, &qword_1004862A8);
    uint64_t v64 = v93;
    sub_10006EC68((uint64_t)v60, v93, &qword_1004862A8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.error.getter();
    int v67 = v66;
    if (os_log_type_enabled(v65, v66))
    {
      uint64_t v68 = (_DWORD *)swift_slowAlloc();
      uint64_t v95 = swift_slowAlloc();
      uint64_t v96 = swift_slowAlloc();
      uint64_t v100 = v96;
      *uint64_t v68 = 136315394;
      uint64_t v89 = v68;
      uint64_t v90 = v68 + 1;
      char v69 = v97;
      uint64_t v70 = SLODWORD(v98[6].isa);
      uint64_t v71 = (uint64_t)&v97[v70];
      uint64_t v72 = *(int *)(v92 + 48);
      uint64_t v73 = (uint64_t)&v63[v70];
      uint64_t v74 = *v63;
      os_log_t v98 = v65;
      uint64_t v75 = v63[1];
      uint64_t v76 = v63[2];
      uint64_t v91 = v59;
      uint64_t v77 = v63[3];
      LODWORD(v92) = v67;
      uint64_t v78 = v63[4];
      uint64_t v79 = v63[5];
      *uint64_t v97 = v74;
      v69[1] = v75;
      v69[2] = v76;
      v69[3] = v77;
      v69[4] = v78;
      v69[5] = v79;
      sub_100300CF4(v73, (uint64_t)&v69[v70], type metadata accessor for NANAttribute.CustomDeviceInformation);
      *(unsigned char *)(v71 + v72) = *(unsigned char *)(v73 + v72);
      sub_100300D5C(v71, type metadata accessor for NANAttribute.CustomDeviceInformation);
      uint64_t v80 = WiFiAddress.description.getter(v74 | (v75 << 8) | (v76 << 16) | (v77 << 24) | (v78 << 32) | (v79 << 40));
      uint64_t v82 = sub_100010680(v80, v81, &v100);
      uint64_t v83 = v89;
      uint64_t v99 = v82;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000380B4(v93, &qword_1004862A8);
      sub_1000380B4((uint64_t)v94, &qword_1004862A8);
      *((_WORD *)v83 + 6) = 2112;
      swift_errorRetain();
      uint64_t v84 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v99 = v84;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(void *)uint64_t v95 = v84;
      swift_errorRelease();
      swift_errorRelease();
      os_log_t v85 = v98;
      _os_log_impl((void *)&_mh_execute_header, v98, (os_log_type_t)v92, "Failed to send the keep alive frame to %s because %@", v83, 0x16u);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();

      sub_1000380B4(v64, &qword_1004862A8);
      sub_1000380B4((uint64_t)v63, &qword_1004862A8);
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
  }
}

BOOL sub_1002E81CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_100010BCC(&qword_100484D00);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for NANPeer(0);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_100303D34(a4, a5) > 1u)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    BOOL v13 = 0;
    if ((v12 & 1) == 0) {
      return v13;
    }
  }
  swift_unownedRetainStrong();
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))(a4, a5);
  sub_10035665C(v14 & 0xFFFFFFFFFFFFLL, (uint64_t)v11);
  swift_release();
  sub_1000136F4((uint64_t)&v11[*(int *)(v9 + 72)], (uint64_t)v8, &qword_100484D00);
  uint64_t v15 = type metadata accessor for NANAttribute.CustomDeviceInformation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v8, 1, v15) == 1)
  {
    sub_1000380B4((uint64_t)v8, &qword_100484D00);
  }
  else
  {
    int v16 = *((_DWORD *)v8 + 1);
    sub_100300D5C((uint64_t)v8, type metadata accessor for NANAttribute.CustomDeviceInformation);
    if ((*(_DWORD *)NANAttribute.CustomDeviceInformation.Flags.doesNotSupportSimultaneousDualBand.unsafeMutableAddressor() & ~v16) == 0)
    {
LABEL_10:
      BOOL v13 = 1;
      goto LABEL_11;
    }
  }
  uint64_t v17 = *(void *)&v11[*(int *)(v9 + 64) + 8];
  if (!v17) {
    goto LABEL_10;
  }
  BOOL v13 = *(void *)(v17 + 16) < 2uLL;
LABEL_11:
  sub_100300D5C((uint64_t)v11, type metadata accessor for NANPeer);
  return v13;
}

uint64_t sub_1002E8470(uint64_t a1, unsigned int *a2)
{
  swift_unownedRetainStrong();
  uint64_t v3 = *a2;
  uint64_t v4 = *((unsigned __int8 *)a2 + 4);
  uint64_t v5 = *((unsigned __int8 *)a2 + 5);
  uint64_t v6 = *((unsigned __int8 *)a2 + 6);
  uint64_t v7 = (objc_class *)*((void *)a2 + 1);
  uint64_t v8 = v3 | (v4 << 32) | (v5 << 40) | (v6 << 48);
  swift_bridgeObjectRetain();
  sub_1003595FC(v8, v7);

  return swift_release();
}

void sub_1002E8500(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  switch(a2)
  {
    case 1:
      int v16 = TimeBitmap.primaryDiscoveryWindow.unsafeMutableAddressor();
      RadioSchedule.set(_:to:with:)(*v16, v16[1], v16[2], 0, 2, 3, a3, a4);
      uint64_t v17 = TimeBitmap.secondaryDiscoveryWindow.unsafeMutableAddressor();
      uint64_t v18 = v17[1];
      uint64_t v19 = v17[2];
      uint64_t v20 = *v17;
      goto LABEL_8;
    case 2:
    case 3:
      uint64_t v6 = TimeBitmap.primaryDiscoveryWindow.unsafeMutableAddressor();
      RadioSchedule.set(_:to:with:)(*v6, v6[1], v6[2], 0, 2, 3, a3, a4);
      char v7 = *(unsigned char *)TimeBitmap.Slot.OF.unsafeMutableAddressor();
      uint64_t v8 = (char *)TimeBitmap.Slot.OO.unsafeMutableAddressor();
      uint64_t v9 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(v7, *v8, *v8, *v8);
      RadioSchedule.set(_:to:with:)(v9, v10, v11, 0, 2, 3, a3, a4);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4))
      {
        char v12 = (char *)TimeBitmap.Slot.FF.unsafeMutableAddressor();
        char v13 = *v8;
        char v14 = *v12;
        char v15 = v14;
      }
      else
      {
        char v24 = *v8;
        uint64_t v25 = (char *)TimeBitmap.Slot.FF.unsafeMutableAddressor();
        char v13 = *v8;
        char v15 = *v25;
        char v14 = v24;
      }
      uint64_t v20 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(v14, v15, v13, v13);
LABEL_8:
      uint64_t v23 = 1;
      goto LABEL_9;
    case 4:
      uint64_t v21 = TimeBitmap.primaryDiscoveryWindow.unsafeMutableAddressor();
      RadioSchedule.set(_:to:with:)(*v21, v21[1], v21[2], 0, 2, 3, a3, a4);
      uint64_t v22 = (uint64_t *)TimeBitmap.all.unsafeMutableAddressor();
      uint64_t v18 = v22[1];
      uint64_t v19 = v22[2];
      uint64_t v20 = *v22;
      uint64_t v23 = 0;
LABEL_9:
      RadioSchedule.set(_:to:with:)(v20, v18, v19, v23, 2, 3, a3, a4);
      break;
    default:
      return;
  }
}

void sub_1002E86B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1002E8500(a1, *v3, a2, a3);
}

uint64_t sub_1002E86C8(unsigned __int8 a1)
{
  uint64_t v2 = v1;
  sub_100010BCC(&qword_1004862C0);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  char v7 = (char *)&v27 - v6;
  __chkstk_darwin();
  uint64_t v9 = (char *)&v27 - v8;
  uint64_t v10 = type metadata accessor for DispatchTime();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t result = __chkstk_darwin();
  char v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned __int8 *)(v2 + 16) != a1)
  {
    type metadata accessor for P2PTimer();
    variable initialization expression of AWDLPeer.lastUpdated();
    uint64_t v15 = v2 + qword_100485CD8;
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 40))(v15, v14, v10);
    swift_endAccess();
    sub_1002E8AC8();
    swift_unownedRetainStrong();
    sub_100354870();
    swift_release();
    sub_1002E5074();
    swift_release();
    int v16 = *(unsigned __int8 *)(v2 + 16);
    swift_unownedRetainStrong();
    uint64_t v17 = sub_100354870();
    swift_release();
    if (v16)
    {
      uint64_t v18 = v17 + *(void *)(*(void *)v17 + 232);
      swift_beginAccess();
      sub_1000136F4(v18, (uint64_t)v7, &qword_1004862C0);
      swift_release();
      uint64_t v19 = sub_100010BCC(&qword_100485CB0);
      uint64_t v20 = *(void *)(v19 - 8);
      uint64_t v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
      int v21 = v28(v7, 1, v19);
      sub_1000380B4((uint64_t)v7, &qword_1004862C0);
      swift_unownedRetainStrong();
      uint64_t v22 = sub_100354870();
      swift_release();
      char v23 = *(unsigned char *)(v2 + 16);
      if (v21 != 1)
      {
        uint64_t v26 = v22 + *(void *)(*(void *)v22 + 232);
        swift_beginAccess();
        sub_1000136F4(v26, (uint64_t)v5, &qword_1004862C0);
        uint64_t result = v28(v5, 1, v19);
        if (result == 1)
        {
          __break(1u);
          return result;
        }
        v5[*(int *)(v19 + 36)] = v23;
        uint64_t v25 = (uint64_t)v5;
        goto LABEL_9;
      }
      UUID.init()();
      v9[*(int *)(v19 + 36)] = v23;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v9, 0, 1, v19);
    }
    else
    {
      uint64_t v24 = sub_100010BCC(&qword_100485CB0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v9, 1, 1, v24);
    }
    uint64_t v25 = (uint64_t)v9;
LABEL_9:
    sub_1002DBCC0(v25);
    return swift_release();
  }
  return result;
}

uint64_t sub_1002E8AC8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = type metadata accessor for DispatchTimeInterval();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v16 - v7;
  __chkstk_darwin();
  uint64_t v10 = (uint64_t *)((char *)&v16 - v9);
  switch(*((unsigned char *)v1 + 16))
  {
    case 1:
      uint64_t v12 = 8;
      goto LABEL_9;
    case 2:
      uint64_t v12 = 1;
      goto LABEL_9;
    case 3:
      uint64_t v12 = 5;
      goto LABEL_9;
    case 4:
      uint64_t v12 = 20;
LABEL_9:
      *uint64_t v10 = v12;
      uint64_t v13 = *(void (**)(char *, void, uint64_t))(v4 + 104);
      v13((char *)&v16 - v9, enum case for DispatchTimeInterval.seconds(_:), v3);
      id v17 = (id)*OS_dispatch_queue.nan.unsafeMutableAddressor();
      uint64_t v14 = swift_allocObject();
      swift_weakInit();
      uint64_t v15 = (void *)swift_allocObject();
      v15[2] = *(void *)(v2 + 80);
      v15[3] = *(void *)(v2 + 88);
      v15[4] = v14;
      v13(v8, enum case for DispatchTimeInterval.never(_:), v3);
      *(void *)uint64_t v6 = 100;
      v13(v6, enum case for DispatchTimeInterval.milliseconds(_:), v3);
      type metadata accessor for P2PTimer();
      swift_allocObject();
      *(void *)((char *)v1 + qword_100485CE0) = P2PTimer.init(deadlineAfter:on:repeating:leeway:_:)((uint64_t)v10, v17, (uint64_t)v8, (uint64_t)v6, (uint64_t)sub_1002FF46C, (uint64_t)v15);
      uint64_t result = swift_release();
      break;
    default:
      *(void *)((char *)v1 + qword_100485CE0) = 0;
      uint64_t result = swift_release();
      break;
  }
  return result;
}

uint64_t sub_1002E8DB4()
{
  uint64_t v1 = type metadata accessor for DispatchTime();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v10 - v5;
  type metadata accessor for P2PTimer();
  variable initialization expression of AWDLPeer.lastUpdated();
  uint64_t v7 = v0 + qword_100485CD8;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v7, v1);
  DispatchTime.distance(to:)();
  uint64_t v8 = *(void (**)(char *, uint64_t))(v2 + 8);
  v8(v4, v1);
  return ((uint64_t (*)(char *, uint64_t))v8)(v6, v1);
}

uint64_t sub_1002E8F20(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    a4();
    return swift_release();
  }
  return result;
}

uint64_t sub_1002E8F80()
{
  uint64_t v1 = v0 + qword_100485CD8;
  uint64_t v2 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_unownedRelease();
  return v0;
}

uint64_t sub_1002E9004()
{
  sub_1002E8F80();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for NANDiscoveryEngine.StateMachine()
{
  return sub_100038354();
}

void sub_1002E9070()
{
  sub_1002EA174(319, (unint64_t *)&qword_10047DA60, (void (*)(uint64_t))&type metadata accessor for DispatchTime);
  if (v0 <= 0x3F) {
    swift_initClassMetadata2();
  }
}

Swift::UInt64 sub_1002E9130(char a1, __int16 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (Swift::UInt64 *)TimeBitmap.zero.unsafeMutableAddressor();
  Swift::UInt64 v9 = *v8;
  Swift::UInt64 v10 = v8[1];
  char v11 = *((unsigned char *)v8 + 16);
  char v12 = *((unsigned char *)v8 + 17);
  char v13 = *((unsigned char *)v8 + 18);
  char v14 = *((unsigned char *)v8 + 19);
  char v15 = *((unsigned char *)v8 + 20);
  char v16 = *((unsigned char *)v8 + 21);
  char v17 = *((unsigned char *)v8 + 22);
  char v18 = *((unsigned char *)v8 + 23);
  Swift::UInt64 v29 = *v8;
  Swift::UInt64 v30 = v10;
  LOBYTE(v31) = v11;
  BYTE1(v31) = v12;
  BYTE2(v31) = v13;
  BYTE3(v31) = v14;
  BYTE4(v31) = v15;
  BYTE5(v31) = v16;
  BYTE6(v31) = v17;
  HIBYTE(v31) = v18;
  if ((a2 & 0x100) != 0)
  {
    switch((char)a2)
    {
      case 1:
      case 3:
      case 4:
        TimeBitmap.subscript.setter(1, 2uLL);
        TimeBitmap.subscript.setter(1, 6uLL);
        TimeBitmap.subscript.setter(1, 0xAuLL);
        TimeBitmap.subscript.setter(1, 0xEuLL);
        TimeBitmap.subscript.setter(1, 0x12uLL);
        TimeBitmap.subscript.setter(1, 0x16uLL);
        TimeBitmap.subscript.setter(1, 0x1AuLL);
        TimeBitmap.subscript.setter(1, 0x1EuLL);
        TimeBitmap.subscript.setter(1, 0x22uLL);
        TimeBitmap.subscript.setter(1, 0x26uLL);
        TimeBitmap.subscript.setter(1, 0x2AuLL);
        TimeBitmap.subscript.setter(1, 0x2EuLL);
        TimeBitmap.subscript.setter(1, 0x32uLL);
        TimeBitmap.subscript.setter(1, 0x36uLL);
        TimeBitmap.subscript.setter(1, 0x3AuLL);
        TimeBitmap.subscript.setter(1, 0x3EuLL);
        break;
      case 2:
        TimeBitmap.subscript.setter(1, 2uLL);
        TimeBitmap.subscript.setter(1, 6uLL);
        TimeBitmap.subscript.setter(1, 0x22uLL);
        TimeBitmap.subscript.setter(1, 0x26uLL);
        if ((a1 & 1) == 0)
        {
          uint64_t v25 = sub_1002E943C(258, a3, a4);
          TimeBitmap.SlotsView.formUnion(_:)(v25, v26, v27);
        }
        break;
      default:
        return v29;
    }
  }
  else if (v9 != v10)
  {
    Swift::UInt64 rawValue = v9;
    do
    {
      v20.Swift::UInt64 rawValue = TimeBitmap.SlotsView.index(after:)((CoreP2P::NANTimeUnit)rawValue).rawValue;
      uint64_t v28 = v31;
      unint64_t v21 = NANIntervalDuration.timeUnits.getter(0);
      if (!v21)
      {
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
        JUMPOUT(0x1002E9428);
      }
      if (((rawValue / v21) & 0x8000000000000000) != 0) {
        goto LABEL_16;
      }
      LOBYTE(v28) = *((unsigned char *)&v28 + ((rawValue / v21) >> 3));
      TimeBitmap.Slot.setBit(_:)(a2);
      char v22 = v28;
      unint64_t v23 = NANIntervalDuration.timeUnits.getter(0);
      if (!v23) {
        goto LABEL_17;
      }
      if (((rawValue / v23) & 0x8000000000000000) != 0) {
        goto LABEL_18;
      }
      *((unsigned char *)&v31 + ((rawValue / v23) >> 3)) = v22;
      Swift::UInt64 rawValue = v20.rawValue;
    }
    while (v20.rawValue != v10);
  }
  return v29;
}

uint64_t sub_1002E943C(__int16 a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)TimeBitmap.zero.unsafeMutableAddressor();
  uint64_t v7 = result;
  if ((a1 & 0x100) == 0 || a1 < 2u) {
    return sub_1002E9130(1, a1 & 0x1FF, a2, a3);
  }
  if (a1 - 3 >= 2)
  {
    TimeBitmap.subscript.setter(1, 0xAuLL);
    TimeBitmap.subscript.setter(1, 0xEuLL);
    TimeBitmap.subscript.setter(1, 0x2AuLL);
    TimeBitmap.subscript.setter(1, 0x2EuLL);
    return v7;
  }
  return result;
}

uint64_t sub_1002E95A8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchTime();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_10047DB90);
  __chkstk_darwin();
  Swift::UInt64 v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100010BCC((uint64_t *)&unk_100486420) - 8;
  __chkstk_darwin();
  char v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = v2 + qword_100485D70;
  swift_beginAccess();
  uint64_t v14 = (uint64_t)&v12[*(int *)(v10 + 56)];
  sub_1000136F4(v13, (uint64_t)v12, &qword_10047DB90);
  sub_1000136F4(a1, v14, &qword_10047DB90);
  char v15 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v15((uint64_t)v12, 1, v4) == 1)
  {
    if (v15(v14, 1, v4) == 1) {
      return sub_1000380B4((uint64_t)v12, &qword_10047DB90);
    }
  }
  else
  {
    sub_1000136F4((uint64_t)v12, (uint64_t)v9, &qword_10047DB90);
    if (v15(v14, 1, v4) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v14, v4);
      sub_100300F18(&qword_100481B68, (void (*)(uint64_t))&type metadata accessor for DispatchTime);
      char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      char v18 = *(void (**)(char *, uint64_t))(v5 + 8);
      v18(v7, v4);
      v18(v9, v4);
      uint64_t result = sub_1000380B4((uint64_t)v12, &qword_10047DB90);
      if (v17) {
        return result;
      }
      return sub_1002E5074();
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
  }
  sub_1000380B4((uint64_t)v12, (uint64_t *)&unk_100486420);
  return sub_1002E5074();
}

uint64_t sub_1002E98BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v25 = a6;
  sub_100010BCC(&qword_10047DB90);
  __chkstk_darwin();
  char v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for DispatchTime();
  uint64_t v23 = *(void *)(v24 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(a5 + 8);
  uint64_t v34 = a2;
  uint64_t v35 = a3;
  uint64_t v36 = a4;
  uint64_t v37 = v15;
  type metadata accessor for NANDiscoveryEngine.ServiceSession();
  sub_1001B8154();
  uint64_t v34 = NANBitmap.Channel.operatingClass.getter(a1);
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  uint64_t v32 = a4;
  uint64_t v33 = a5;
  type metadata accessor for Dictionary.Values();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  uint64_t v34 = Sequence.filter(_:)();
  uint64_t v26 = a2;
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  uint64_t v29 = a5;
  type metadata accessor for Array();
  swift_getWitnessTable();
  Sequence.min(by:)();
  swift_bridgeObjectRelease();
  if (v38)
  {
    type metadata accessor for P2PTimer();
    variable initialization expression of AWDLPeer.lastUpdated();
    (*(void (**)(uint64_t, uint64_t))(a5 + 56))(a3, a5);
    uint64_t v16 = v23;
    uint64_t v17 = v24;
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48))(v12, 1, v24);
    if (result == 1)
    {
      __break(1u);
    }
    else
    {
      DispatchTime.distance(to:)();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v19 = *(void (**)(char *, uint64_t))(v16 + 8);
      v19(v14, v17);
      return ((uint64_t (*)(char *, uint64_t))v19)(v12, v17);
    }
  }
  else
  {
    uint64_t v20 = enum case for DispatchTimeInterval.never(_:);
    uint64_t v21 = type metadata accessor for DispatchTimeInterval();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 104))(v25, v20, v21);
  }
  return result;
}

BOOL sub_1002E9C14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_100010BCC(&qword_10047DB90);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a5 + 56))(a3, a5);
  uint64_t v9 = type metadata accessor for DispatchTime();
  int v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
  sub_1000380B4((uint64_t)v8, &qword_10047DB90);
  return v10 != 1 && (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 48))(a3, a5) == 1;
}

uint64_t sub_1002E9D50(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_100010BCC(&qword_10047DB90);
  __chkstk_darwin();
  uint64_t v42 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v32 - v10;
  uint64_t v12 = type metadata accessor for DispatchTime();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin();
  unsigned __int8 v39 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v16 = (char *)&v32 - v15;
  uint64_t v17 = type metadata accessor for DispatchTimeInterval();
  uint64_t v34 = *(void *)(v17 - 8);
  uint64_t v35 = v17;
  __chkstk_darwin();
  uint64_t v33 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  char v43 = (char *)&v32 - v19;
  uint64_t v38 = *a2;
  uint64_t v36 = type metadata accessor for P2PTimer();
  variable initialization expression of AWDLPeer.lastUpdated();
  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(a6 + 56);
  uint64_t v40 = a4;
  uint64_t v41 = a6;
  uint64_t v37 = v20;
  v20(a4, a6);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  uint64_t result = v21(v11, 1, v12);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    DispatchTime.distance(to:)();
    uint64_t v23 = *(void (**)(char *, uint64_t))(v13 + 8);
    v23(v16, v12);
    v23(v11, v12);
    uint64_t v24 = v39;
    variable initialization expression of AWDLPeer.lastUpdated();
    uint64_t v25 = v42;
    v37(v40, v41);
    uint64_t result = v21(v25, 1, v12);
    if (result != 1)
    {
      uint64_t v26 = v33;
      DispatchTime.distance(to:)();
      v23(v24, v12);
      v23(v25, v12);
      uint64_t v27 = v43;
      BOOL v28 = static DispatchTimeInterval.< infix(_:_:)();
      uint64_t v29 = *(void (**)(char *, uint64_t))(v34 + 8);
      uint64_t v30 = v26;
      uint64_t v31 = v35;
      v29(v30, v35);
      v29(v27, v31);
      return v28;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1002EA0E0()
{
  sub_1000380B4(v0 + qword_100485D70, &qword_10047DB90);
  swift_unownedRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for NANDiscoveryEngine.BeaconScheduler()
{
  return sub_100038354();
}

void sub_1002EA174(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1002EA1C8()
{
  return swift_initClassMetadata2();
}

BOOL sub_1002EA22C(char *a1, char *a2)
{
  return static AWDLPeer.Reachability.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int sub_1002EA240()
{
  return AWDLPeer.Reachability.hashValue.getter(*v0);
}

void sub_1002EA24C(uint64_t a1)
{
  AWDLPeer.Reachability.hash(into:)(a1, *v1);
}

Swift::Int sub_1002EA258()
{
  Hasher.init(_seed:)();
  AWDLPeer.Reachability.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t sub_1002EA2A0(uint64_t a1)
{
  uint64_t result = sub_1002A8518(*(void *)(v1 + 24), a1);
  if ((result & 1) == 0)
  {
    swift_unownedRetainStrong();
    swift_unownedRetainStrong();
    uint64_t v3 = WiFiInterface.capabilities.getter();
    swift_release();
    uint64_t v4 = *WiFiDriverCapabilities.supportsSimultaneousDualBand.unsafeMutableAddressor();
    uint64_t v8 = v3;
    uint64_t v9 = v4;
    unint64_t v5 = sub_1002C8868();
    swift_bridgeObjectRetain_n();
    ExtendableOptionSet.formIntersection(_:)((uint64_t)&v8, (uint64_t)&type metadata for WiFiDriverCapabilities, v5);
    LOBYTE(v5) = sub_1000956AC(v9, v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v6 = *(void *)(v1 + 24);
    swift_bridgeObjectRetain();
    uint64_t v7 = (objc_class *)static Array<A>.potentialAvailability(using:supportsSimultaneousDualBand:for:)(0, v5 & 1, v6);
    swift_bridgeObjectRelease();
    sub_100357128(v7);
    return swift_release();
  }
  return result;
}

uint64_t sub_1002EA3AC(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 24);
  *(void *)(v1 + 24) = a1;
  sub_1002EA2A0(v2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1002EA3EC()
{
  if (*(unsigned __int8 *)(v0 + 32) - 1 >= 2)
  {
    if (!*(unsigned char *)(v0 + 32))
    {
      unint64_t v2 = sub_100297404((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v3 = *(void *)(v0 + 24);
      *(void *)(v0 + 24) = v2;
      sub_1002EA2A0(v3);
      swift_bridgeObjectRelease();
    }
    swift_unownedRetainStrong();
    uint64_t v4 = swift_bridgeObjectRetain();
    sub_100356A44(v4);
    return swift_release();
  }
  else
  {
    return sub_1002EAD70();
  }
}

uint64_t sub_1002EA48C(char a1)
{
  *(unsigned char *)(v1 + 32) = a1;
  return sub_1002EA3EC();
}

uint64_t sub_1002EA494(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_100010BCC(&qword_100485280);
  __chkstk_darwin();
  unint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100010BCC(qword_100486430);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v1 + 16) = 0;
  uint64_t v9 = (uint64_t *)(v1 + 16);
  *(void *)(v1 + 24) = &_swiftEmptyDictionarySingleton;
  *(unsigned char *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = a1;
  swift_unownedRetainStrong();
  swift_unownedRetainStrong();
  swift_unownedRetain();
  swift_release();
  sub_100336858((uint64_t)v8);
  swift_release();
  uint64_t v10 = (void *)*OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v11 = swift_allocObject();
  swift_weakInit();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  *(void *)(v12 + 24) = a1;
  swift_beginAccess();
  id v13 = v10;
  swift_retain();
  ObservableWiFiProperty.registerForChanges(on:using:valueUpdateHandler:)(v13, v9, (uint64_t)sub_100301028, v12, v6, (uint64_t)&v30);
  swift_endAccess();

  swift_release();
  sub_1000380B4((uint64_t)v8, qword_100486430);
  if (v31)
  {
    *(void *)unint64_t v5 = NANAttribute.ExtendedWLANInfrastructure.init(network:)(v30, v31, v32 & 0xFFFFFFFFFFFFLL, v33 | ((unint64_t)v34 << 32));
    v5[8] = v14;
    v5[9] = v15;
    v5[10] = v16;
    v5[11] = v17;
    v5[12] = v18 & 1;
    v5[13] = v19;
    v5[14] = v20;
    v5[15] = v21;
    *((_WORD *)v5 + 8) = v22;
    *((_WORD *)v5 + 9) = v23;
    uint64_t v24 = type metadata accessor for NANAttribute(0);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v5, 0, 1, v24);
    uint64_t v25 = a1 + *(void *)(*(void *)a1 + 592);
    swift_beginAccess();
    uint64_t v26 = sub_100010BCC(&qword_100487CF0);
    uint64_t v29 = *(objc_class **)(v25 + *(int *)(v26 + 40));
    swift_bridgeObjectRetain();
    sub_100354930((uint64_t)v5, 30);
    v28.Class isa = v29;
    MutableDriverProperty.wrappedValue.setter(&v28, v26);
    swift_endAccess();
  }
  swift_release();
  return v2;
}

uint64_t sub_1002EA81C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100010BCC(&qword_100485280);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)a2;
  uint64_t v9 = *(void *)(a2 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v11 = *(unsigned __int16 *)(a2 + 28);
  uint64_t v12 = *(unsigned int *)(a2 + 24);
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    sub_1002EAD70();
    swift_release();
  }
  if (v9)
  {
    swift_bridgeObjectRetain();
    *(void *)uint64_t v7 = NANAttribute.ExtendedWLANInfrastructure.init(network:)(v8, v9, v10 & 0xFFFFFFFFFFFFLL, (v12 | (v11 << 32)) & 0xFFFFFFFFFFFFLL);
    v7[8] = v13;
    v7[9] = v14;
    v7[10] = v15;
    v7[11] = v16;
    v7[12] = v17 & 1;
    v7[13] = v18;
    v7[14] = v19;
    v7[15] = v20;
    *((_WORD *)v7 + 8) = v21;
    *((_WORD *)v7 + 9) = v22;
    uint64_t v23 = type metadata accessor for NANAttribute(0);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v7, 0, 1, v23);
  }
  else
  {
    uint64_t v24 = type metadata accessor for NANAttribute(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 1, 1, v24);
  }
  uint64_t v25 = a4 + *(void *)(*(void *)a4 + 592);
  swift_beginAccess();
  uint64_t v26 = sub_100010BCC(&qword_100487CF0);
  uint64_t v29 = *(objc_class **)(v25 + *(int *)(v26 + 40));
  swift_bridgeObjectRetain();
  sub_100354930((uint64_t)v7, 30);
  v28.Class isa = v29;
  MutableDriverProperty.wrappedValue.setter(&v28, v26);
  return swift_endAccess();
}

uint64_t *sub_1002EAAA8()
{
  uint64_t v1 = v0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t v6 = *(void *)(v0 + 40);
  swift_unownedRetainStrong();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6 + *(void *)(*(void *)v6 + 96), AssociatedTypeWitness);
  swift_release();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  char v8 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 368))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, AssociatedTypeWitness);
  if (v8) {
    goto LABEL_2;
  }
  swift_unownedRetainStrong();
  sub_100354870();
  swift_release();
  uint64_t v11 = sub_1002E48B8();
  swift_release();
  if (v11 <= 0)
  {
    swift_unownedRetainStrong();
    uint64_t v12 = sub_100354870();
    swift_release();
    uint64_t v13 = v12 + *(void *)(*(void *)v12 + 248);
    swift_beginAccess();
    LODWORD(v13) = *(unsigned __int8 *)(v13 + *(int *)(sub_100010BCC(&qword_100486260) + 36));
    swift_release();
    if (v13 != 4)
    {
LABEL_2:
      char v9 = 0;
LABEL_3:
      *(unsigned char *)(v1 + 32) = v9;
      return (uint64_t *)sub_1002EA3EC();
    }
  }
  swift_unownedRetainStrong();
  uint64_t v14 = sub_100354870();
  swift_release();
  uint64_t v15 = *(void *)(v14 + qword_100485BD8);
  swift_release();
  if (!v15)
  {
    char v9 = 1;
    goto LABEL_3;
  }
  if (v15 == 4)
  {
    char v9 = 2;
    goto LABEL_3;
  }
  uint64_t result = (uint64_t *)NANDiscoveryWindowIndex.last.unsafeMutableAddressor();
  if (*result < 8)
  {
    __break(1u);
    return result;
  }
  if (v15 >= 8 && *result >= v15)
  {
    char v9 = 3;
    goto LABEL_3;
  }
  return result;
}

uint64_t sub_1002EAD70()
{
  uint64_t v1 = type metadata accessor for NANPeer(0);
  uint64_t result = __chkstk_darwin();
  uint64_t v93 = (uint64_t)&v83 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v0 + 32))
  {
    uint64_t v4 = *(void *)(v0 + 40);
    uint64_t v92 = v0;
    swift_unownedRetainStrong();
    BOOL v5 = sub_1003568D0();
    uint64_t result = swift_release();
    if (!v5)
    {
      uint64_t v90 = v1;
      swift_unownedRetainStrong();
      uint64_t v6 = 0;
      sub_1003546AC();
      swift_release();
      swift_unownedRetainStrong();
      uint64_t v7 = *(void *)(v4 + *(void *)(*(void *)v4 + 688));
      swift_unownedRetainStrong();
      uint64_t v89 = v4;
      swift_release();
      sub_1003366E8();
      uint64_t v9 = v8;
      int64_t v11 = v10;
      swift_release();
      if (v9)
      {
        swift_bridgeObjectRelease();
        uint64_t v12 = sub_100330758(0, 1, 1, _swiftEmptyArrayStorage);
        uint64_t v7 = v12[2];
        unint64_t v13 = v12[3];
        uint64_t v14 = (void *)(v7 + 1);
        if (v7 >= v13 >> 1) {
          goto LABEL_113;
        }
        goto LABEL_6;
      }
      uint64_t v12 = _swiftEmptyArrayStorage;
LABEL_8:
      uint64_t v16 = swift_unownedRetainStrong();
      uint64_t v14 = (void *)sub_100354870(v16);
      swift_release();
      int64_t v11 = sub_1002E4484();
      swift_release();
      uint64_t v17 = *(void *)(v11 + 16);
      if (v17)
      {
        unint64_t v18 = 0;
        int64_t v85 = v11 + 32;
        uint64_t v19 = v92;
        uint64_t v97 = v6;
        int64_t v84 = v11;
        uint64_t v83 = v17;
        do
        {
          unint64_t v13 = *(void *)(v11 + 16);
          if (v18 >= v13)
          {
LABEL_111:
            __break(1u);
            goto LABEL_112;
          }
          if (*(unsigned char *)(v19 + 32) != 1)
          {
            unint64_t v91 = v18;
            char v20 = (unsigned __int16 *)(v85 + 6 * v18);
            uint64_t v21 = *(unsigned int *)(v20 + 1);
            uint64_t v22 = *v20;
            swift_unownedRetainStrong();
            uint64_t v23 = v22 | (v21 << 16);
            uint64_t v24 = v93;
            sub_10035665C(v23, v93);
            swift_release();
            uint64_t v25 = (uint64_t *)(v24 + *(int *)(v90 + 64));
            uint64_t v14 = (void *)v25[1];
            uint64_t v26 = v25[2];
            uint64_t v7 = v25[3];
            uint64_t v27 = v25[4];
            sub_100300F84(*v25, (uint64_t)v14);
            sub_100300D5C(v24, type metadata accessor for NANPeer);
            if (v14)
            {
              uint64_t v86 = v27;
              uint64_t v87 = v7;
              uint64_t v88 = v14;
              uint64_t v28 = *(void *)(v26 + 64);
              uint64_t v94 = v26 + 64;
              uint64_t v29 = 1 << *(unsigned char *)(v26 + 32);
              if (v29 < 64) {
                uint64_t v30 = ~(-1 << v29);
              }
              else {
                uint64_t v30 = -1;
              }
              int64_t v11 = v30 & v28;
              int64_t v96 = (unint64_t)(v29 + 63) >> 6;
              swift_bridgeObjectRetain_n();
              uint64_t v31 = 0;
              uint64_t v32 = _swiftEmptyArrayStorage;
              os_log_t v98 = v12;
              uint64_t v95 = (void *)v26;
              while (2)
              {
                if (v11)
                {
                  unint64_t v101 = (v11 - 1) & v11;
                  uint64_t v102 = v31;
                  unint64_t v13 = __clz(__rbit64(v11)) | (v31 << 6);
                }
                else
                {
                  unint64_t v13 = v31 + 1;
                  if (__OFADD__(v31, 1)) {
                    goto LABEL_105;
                  }
                  if ((uint64_t)v13 >= v96)
                  {
LABEL_64:
                    swift_release();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease_n();
                    swift_bridgeObjectRelease();
                    int64_t v96 = v32[2];
                    if (!v96)
                    {
LABEL_10:
                      swift_bridgeObjectRelease();
                      goto LABEL_11;
                    }
                    unint64_t v54 = 0;
                    uint64_t v55 = v32 + 4;
                    uint64_t v95 = v32 + 4;
                    uint64_t v100 = v32;
                    while (1)
                    {
                      unint64_t v13 = v32[2];
                      if (v54 >= v13) {
                        goto LABEL_106;
                      }
                      uint64_t v56 = &v55[7 * v54];
                      uint64_t v58 = *v56;
                      uint64_t v57 = v56[1];
                      uint64_t v60 = v56[2];
                      unint64_t v59 = v56[3];
                      int64_t v61 = *(void *)(*v56 + 16);
                      uint64_t v102 = v57;
                      uint64_t v103 = v60;
                      unint64_t v101 = v59;
                      if (v61)
                      {
                        os_log_t v98 = v12;
                        unint64_t v99 = v54;
                        unint64_t v62 = v59;
                        unsigned int v63 = LOBYTE(v55[7 * v54 + 4]);
                        swift_bridgeObjectRetain();
                        sub_10006E968(v57, v60, v62);
                        v104[0] = (uint64_t)_swiftEmptyArrayStorage;
                        swift_bridgeObjectRetain();
                        sub_1002BF35C(0, v61, 0);
                        unint64_t v64 = 0;
                        uint64_t v14 = (void *)v104[0];
                        if (v63 >= 2) {
                          char v65 = 2;
                        }
                        else {
                          char v65 = v63;
                        }
                        unint64_t v66 = *(void *)(v104[0] + 16);
                        uint64_t v67 = v66;
                        do
                        {
                          int v68 = *(_DWORD *)(v58 + v64 + 32);
                          char v69 = *(unsigned char *)(v58 + v64 + 36);
                          char v70 = *(unsigned char *)(v58 + v64 + 37);
                          v104[0] = (uint64_t)v14;
                          unint64_t v71 = v14[3];
                          unint64_t v72 = v66 + 1;
                          if (v66 >= v71 >> 1)
                          {
                            sub_1002BF35C(v71 > 1, v66 + 1, 1);
                            uint64_t v14 = (void *)v104[0];
                          }
                          v14[2] = v72;
                          uint64_t v73 = &v14[v67 + v64 / 8];
                          *((_DWORD *)v73 + 8) = v68;
                          *((unsigned char *)v73 + 36) = v69;
                          *((unsigned char *)v73 + 37) = v70;
                          *((unsigned char *)v73 + 38) = v65;
                          v64 += 8;
                          unint64_t v66 = v72;
                          --v61;
                        }
                        while (v61);
                        swift_bridgeObjectRelease();
                        uint64_t v6 = v97;
                        uint64_t v12 = v98;
                        unint64_t v54 = v99;
                        uint64_t v32 = v100;
                      }
                      else
                      {
                        swift_bridgeObjectRetain();
                        sub_10006E968(v57, v60, v59);
                        uint64_t v14 = _swiftEmptyArrayStorage;
                      }
                      int64_t v11 = v14[2];
                      int64_t v74 = v12[2];
                      uint64_t v7 = v74 + v11;
                      if (__OFADD__(v74, v11)) {
                        goto LABEL_107;
                      }
                      int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
                      if (!isUniquelyReferenced_nonNull_native || v7 > v12[3] >> 1)
                      {
                        if (v74 <= v7) {
                          int64_t v76 = v74 + v11;
                        }
                        else {
                          int64_t v76 = v74;
                        }
                        uint64_t v12 = sub_100330758(isUniquelyReferenced_nonNull_native, v76, 1, v12);
                      }
                      uint64_t v7 = v103;
                      unint64_t v13 = v14[2];
                      if (v13)
                      {
                        unint64_t v13 = v12[2];
                        if ((uint64_t)((v12[3] >> 1) - v13) < v11) {
                          goto LABEL_109;
                        }
                        uint64_t v77 = &v12[v13 + 4];
                        if (v14 + 4 < &v77[v11] && v77 < &v14[v11 + 4]) {
                          goto LABEL_114;
                        }
                        memcpy(v77, v14 + 4, 8 * v11);
                        if (v11)
                        {
                          uint64_t v79 = v12[2];
                          BOOL v53 = __OFADD__(v79, v11);
                          unint64_t v13 = v79 + v11;
                          if (v53) {
                            goto LABEL_110;
                          }
                          _OWORD v12[2] = v13;
                        }
                      }
                      else if (v11)
                      {
                        goto LABEL_108;
                      }
                      ++v54;
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      sub_10006E0D8(v102, v7, v101);
                      uint64_t v55 = v95;
                      if (v54 == v96) {
                        goto LABEL_10;
                      }
                    }
                  }
                  unint64_t v33 = *(void *)(v94 + 8 * v13);
                  uint64_t v34 = v31 + 1;
                  if (!v33)
                  {
                    uint64_t v34 = v31 + 2;
                    if (v31 + 2 >= v96) {
                      goto LABEL_64;
                    }
                    unint64_t v33 = *(void *)(v94 + 8 * v34);
                    if (!v33)
                    {
                      uint64_t v34 = v31 + 3;
                      if (v31 + 3 >= v96) {
                        goto LABEL_64;
                      }
                      unint64_t v33 = *(void *)(v94 + 8 * v34);
                      if (!v33)
                      {
                        uint64_t v34 = v31 + 4;
                        if (v31 + 4 >= v96) {
                          goto LABEL_64;
                        }
                        unint64_t v33 = *(void *)(v94 + 8 * v34);
                        if (!v33)
                        {
                          unint64_t v13 = v31 + 5;
                          if (v31 + 5 >= v96) {
                            goto LABEL_64;
                          }
                          unint64_t v33 = *(void *)(v94 + 8 * v13);
                          uint64_t v34 = v31 + 5;
                          if (!v33)
                          {
                            while (1)
                            {
                              uint64_t v34 = v13 + 1;
                              if (__OFADD__(v13, 1)) {
                                break;
                              }
                              if (v34 >= v96) {
                                goto LABEL_64;
                              }
                              unint64_t v33 = *(void *)(v94 + 8 * v34);
                              ++v13;
                              if (v33) {
                                goto LABEL_38;
                              }
                            }
LABEL_112:
                            __break(1u);
LABEL_113:
                            uint64_t v12 = sub_100330758((void *)(v13 > 1), (int64_t)v14, 1, v12);
LABEL_6:
                            _OWORD v12[2] = v14;
                            uint64_t v15 = &v12[v7];
                            *((_DWORD *)v15 + 8) = v11;
                            *((unsigned char *)v15 + 36) = BYTE4(v11);
                            *((unsigned char *)v15 + 37) = BYTE5(v11);
                            *((unsigned char *)v15 + 38) = 3;
                            goto LABEL_8;
                          }
                        }
                      }
                    }
                  }
LABEL_38:
                  unint64_t v101 = (v33 - 1) & v33;
                  uint64_t v102 = v34;
                  unint64_t v13 = __clz(__rbit64(v33)) + (v34 << 6);
                }
                unint64_t v35 = *(void *)(*(void *)(v26 + 56) + 8 * v13);
                int64_t v36 = *(void *)(v35 + 16);
                if (v36)
                {
                  uint64_t v100 = v32;
                  v104[0] = (uint64_t)_swiftEmptyArrayStorage;
                  swift_bridgeObjectRetain();
                  sub_1002BF3A4(0, v36, 0);
                  uint64_t v14 = (void *)v104[0];
                  unint64_t v99 = v35;
                  uint64_t v37 = (void *)(v35 + 80);
                  do
                  {
                    uint64_t v38 = *(v37 - 6);
                    uint64_t v39 = *(v37 - 5);
                    uint64_t v41 = *(v37 - 4);
                    unint64_t v40 = *(v37 - 3);
                    char v42 = *((unsigned char *)v37 - 16);
                    uint64_t v103 = *(v37 - 1);
                    uint64_t v43 = *v37;
                    swift_bridgeObjectRetain();
                    sub_10006E968(v39, v41, v40);
                    v104[0] = (uint64_t)v14;
                    unint64_t v45 = v14[2];
                    unint64_t v44 = v14[3];
                    if (v45 >= v44 >> 1)
                    {
                      sub_1002BF3A4(v44 > 1, v45 + 1, 1);
                      uint64_t v14 = (void *)v104[0];
                    }
                    v14[2] = v45 + 1;
                    uint64_t v46 = &v14[7 * v45];
                    unsigned char v46[4] = v38;
                    v46[5] = v39;
                    v46[6] = v41;
                    v46[7] = v40;
                    *((unsigned char *)v46 + 64) = v42;
                    v46[9] = v103;
                    v46[10] = v43;
                    v37 += 7;
                    --v36;
                  }
                  while (v36);
                  swift_bridgeObjectRelease();
                  uint64_t v6 = v97;
                  uint64_t v12 = v98;
                  uint64_t v32 = v100;
                  uint64_t v26 = (uint64_t)v95;
                }
                else
                {
                  uint64_t v14 = _swiftEmptyArrayStorage;
                }
                int64_t v11 = v14[2];
                int64_t v47 = v32[2];
                uint64_t v7 = v47 + v11;
                if (__OFADD__(v47, v11))
                {
                  __break(1u);
LABEL_102:
                  __break(1u);
LABEL_103:
                  __break(1u);
LABEL_104:
                  __break(1u);
LABEL_105:
                  __break(1u);
LABEL_106:
                  __break(1u);
LABEL_107:
                  __break(1u);
LABEL_108:
                  __break(1u);
LABEL_109:
                  __break(1u);
LABEL_110:
                  __break(1u);
                  goto LABEL_111;
                }
                uint64_t v48 = swift_isUniquelyReferenced_nonNull_native();
                if ((v48 & 1) != 0 && v7 <= v32[3] >> 1)
                {
                  unint64_t v13 = v14[2];
                  if (!v13)
                  {
LABEL_20:
                    if (v11) {
                      goto LABEL_102;
                    }
LABEL_21:
                    swift_bridgeObjectRelease();
                    int64_t v11 = v101;
                    uint64_t v31 = v102;
                    continue;
                  }
                }
                else
                {
                  if (v47 <= v7) {
                    int64_t v49 = v47 + v11;
                  }
                  else {
                    int64_t v49 = v47;
                  }
                  uint64_t v32 = sub_1003302BC((void *)v48, v49, 1, v32);
                  unint64_t v13 = v14[2];
                  if (!v13) {
                    goto LABEL_20;
                  }
                }
                break;
              }
              unint64_t v13 = v32[2];
              if ((uint64_t)((v32[3] >> 1) - v13) < v11) {
                goto LABEL_103;
              }
              unint64_t v50 = (unint64_t)&v32[7 * v13 + 4];
              if ((unint64_t)(v14 + 4) < v50 + 56 * v11 && v50 < (unint64_t)&v14[7 * v11 + 4])
              {
LABEL_114:
                _fatalErrorMessage(_:_:file:line:flags:)();
                __break(1u);
                goto LABEL_115;
              }
              swift_arrayInitWithCopy();
              if (v11)
              {
                uint64_t v52 = v32[2];
                BOOL v53 = __OFADD__(v52, v11);
                unint64_t v13 = v52 + v11;
                if (v53) {
                  goto LABEL_104;
                }
                _OWORD v32[2] = v13;
              }
              goto LABEL_21;
            }
LABEL_11:
            unint64_t v18 = v91;
            uint64_t v19 = v92;
            int64_t v11 = v84;
            uint64_t v17 = v83;
          }
          ++v18;
        }
        while (v18 != v17);
      }
      swift_bridgeObjectRelease();
      if (v12[2])
      {
        sub_100010BCC(&qword_100484B40);
        uint64_t v80 = (void *)static _DictionaryStorage.allocate(capacity:)();
      }
      else
      {
        uint64_t v80 = &_swiftEmptyDictionarySingleton;
      }
      v104[0] = (uint64_t)v80;
      uint64_t v81 = swift_bridgeObjectRetain();
      sub_1002FF5B0(v81, 1, v104);
      if (v6)
      {
LABEL_115:
        swift_bridgeObjectRelease();
        uint64_t result = swift_release();
        __break(1u);
      }
      else
      {
        swift_bridgeObjectRelease_n();
        uint64_t v82 = *(void *)(v92 + 24);
        *(void *)(v92 + 24) = v104[0];
        sub_1002EA2A0(v82);
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

uint64_t sub_1002EB784()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_unownedRelease();
  return v0;
}

uint64_t sub_1002EB7B4()
{
  sub_1002EB784();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for NANDiscoveryEngine.PeerChannelLearner()
{
  return sub_100038354();
}

uint64_t sub_1002EB800(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v77 = a1;
  uint64_t v76 = *v3;
  uint64_t v5 = *a2;
  unint64_t v72 = a2;
  uint64_t v6 = *(void *)(class metadata base offset for ReferenceWritableKeyPath + v5 + 8);
  __chkstk_darwin();
  unint64_t v71 = (char *)&v65 - v7;
  uint64_t v8 = *(void *)(v6 + 24);
  uint64_t v9 = *(void *)(v8 + 40);
  uint64_t v10 = *(void *)(v8 + 24);
  uint64_t v70 = *(void *)(v9 + 8);
  uint64_t v80 = v10;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v78 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  char v69 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  int64_t v74 = (char *)&v65 - v12;
  uint64_t v85 = type metadata accessor for Logger();
  uint64_t v83 = *(void *)(v85 - 8);
  uint64_t v13 = *(void *)(v83 + 64);
  __chkstk_darwin();
  uint64_t v73 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v15 = (char *)&v65 - v14;
  uint64_t v16 = type metadata accessor for DispatchPredicate();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin();
  uint64_t v19 = (uint64_t *)((char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  char v20 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v21 = (void *)*v20;
  *uint64_t v19 = *v20;
  (*(void (**)(uint64_t *, void, uint64_t))(v17 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v16);
  id v22 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v17 + 8))(v19, v16);
  if (v21)
  {
    uint64_t v68 = v6;
    sub_1000136F4(a3, (uint64_t)v88, &qword_1004862E8);
    if (v89)
    {
      sub_10003803C(v88, &v90);
      uint64_t v81 = 0;
    }
    else
    {
      uint64_t v81 = *(void *)&v88[0];
      id v24 = [*(id *)(*(void *)&v88[0] + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection) remoteObjectProxy];
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    uint64_t v25 = v85;
    uint64_t v26 = v83;
    uint64_t v27 = *(void (**)(char *))(v83 + 16);
    uint64_t v65 = v84 + qword_1004888B8;
    v27(v15);
    uint64_t v28 = swift_allocObject();
    uint64_t v67 = v28 + 16;
    swift_unknownObjectWeakInit();
    uint64_t v29 = v25;
    uint64_t v30 = v80;
    uint64_t v31 = (char *)v81;
    uint64_t v82 = v15;
    if (v81)
    {
      uint64_t v32 = v26;
      uint64_t v66 = v13;
      uint64_t v33 = v29;
      uint64_t v34 = swift_allocObject();
      swift_unknownObjectWeakInit();
      unint64_t v35 = v73;
      ((void (*)(char *, char *, uint64_t))v27)(v73, v82, v33);
      sub_1000107A4((uint64_t)&v90, (uint64_t)v88);
      unint64_t v36 = (*(unsigned __int8 *)(v32 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
      unint64_t v37 = (v66 + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v38 = (char *)swift_allocObject();
      *((void *)v38 + 2) = *(void *)(v76 + 80);
      *((void *)v38 + 3) = v30;
      *((void *)v38 + 4) = v9;
      *((void *)v38 + 5) = v28;
      *((void *)v38 + 6) = v34;
      uint64_t v39 = v35;
      uint64_t v31 = (char *)v81;
      (*(void (**)(char *, char *, uint64_t))(v32 + 32))(&v38[v36], v39, v85);
      sub_10003803C(v88, &v38[v37]);
      unint64_t v40 = (void (**)())&v31[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler];
      uint64_t v41 = *(void *)&v31[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler];
      *unint64_t v40 = sub_100300ABC;
      v40[1] = (void (*)())v38;
      swift_retain();
      sub_100011E30(v41);
    }
    char v42 = v31;
    uint64_t v81 = v28;
    uint64_t v43 = v84;
    uint64_t v44 = *(void *)(v84 + *(void *)(*(void *)v84 + 280));
    swift_unownedRetainStrong();
    unint64_t v45 = v74;
    (*(void (**)(char *, uint64_t, uint64_t))(v78 + 16))(v74, v77, AssociatedTypeWitness);
    uint64_t v46 = v75;
    uint64_t v47 = (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(v9 + 16))(v44, v45, v30, v9);
    if (v46)
    {
      (*(void (**)(char *, uint64_t))(v83 + 8))(v82, v85);
      sub_100010754((uint64_t)&v90);
      swift_release();
    }
    else
    {
      uint64_t v48 = v9;
      sub_1000107A4((uint64_t)&v90, (uint64_t)v88);
      (*(void (**)(_OWORD *, uint64_t, uint64_t))(v9 + 64))(v88, v30, v9);
      swift_beginAccess();
      swift_unknownObjectWeakAssign();
      if (v42)
      {
        int64_t v49 = self;
        id v50 = v42;
        id v51 = [v49 weakExportedObjectProxy:v47];
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
        sub_1002B9B5C((uint64_t)v88);
      }
      uint64_t v52 = v70;
      BOOL v53 = *(void (**)(uint64_t, uint64_t))(v70 + 64);
      swift_retain();
      uint64_t v77 = v47;
      unint64_t v54 = v69;
      uint64_t v55 = v80;
      v53(v80, v52);
      uint64_t v56 = AssociatedTypeWitness;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(v56, AssociatedConformanceWitness);
      uint64_t v58 = v54;
      uint64_t v47 = v77;
      (*(void (**)(char *, uint64_t))(v78 + 8))(v58, v56);
      id v59 = v42;
      uint64_t v60 = swift_unknownObjectRetain();
      sub_1002FEE98(v60, v42);
      uint64_t v61 = v60;
      uint64_t v63 = v62;
      swift_unknownObjectRelease();

      uint64_t v86 = v61;
      uint64_t v87 = v63;
      uint64_t v91 = v43;
      unint64_t v64 = (void (*)(_OWORD *, void))swift_modifyAtReferenceWritableKeyPath();
      Dictionary.subscript.setter();
      v64(v88, 0);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v48 + 32))(v55, v48);
      (*(void (**)(char *, uint64_t))(v83 + 8))(v82, v85);
      sub_100010754((uint64_t)&v90);

      swift_release();
    }
    return v47;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1002EC2C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v13 = (uint64_t *)((char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v15 = (void *)*v14;
  uint64_t *v13 = *v14;
  (*(void (**)(uint64_t *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  id v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v11 + 8))(v13, v10);
  if (v15)
  {
    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v18 = Strong;
      swift_beginAccess();
      uint64_t v19 = swift_unknownObjectWeakLoadStrong();
      if (v19)
      {
        char v20 = (void *)v19;
        uint64_t v34 = a4;
        swift_unknownObjectRetain_n();
        id v21 = v20;
        id v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v22, v23))
        {
          uint64_t v24 = swift_slowAlloc();
          uint64_t v33 = a6;
          uint64_t v25 = v24;
          uint64_t v30 = (void *)swift_slowAlloc();
          uint64_t v32 = swift_slowAlloc();
          uint64_t v35 = (uint64_t)v21;
          uint64_t v36 = v32;
          *(_DWORD *)uint64_t v25 = 138412546;
          os_log_t v31 = v22;
          id v26 = v21;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v30 = v20;

          *(_WORD *)(v25 + 12) = 2080;
          uint64_t v35 = v18;
          uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v35 = sub_100010680(v27, v28, &v36);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease();
          id v22 = v31;
          _os_log_impl((void *)&_mh_execute_header, v31, v23, "%@ was invalidated detaching from %s", (uint8_t *)v25, 0x16u);
          sub_100010BCC(&qword_10047CC30);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          a6 = v33;
          swift_slowDealloc();
        }
        else
        {
          swift_unknownObjectRelease_n();
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t))(a7 + 80))(v34, a6, a7);
        swift_unknownObjectRelease();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1002EC668(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v46 = a1;
  uint64_t v4 = *v3;
  uint64_t v39 = a3;
  uint64_t v40 = v4;
  uint64_t v5 = *a2;
  uint64_t v43 = a2;
  uint64_t v44 = *(void *)(*(void *)(class metadata base offset for ReferenceWritableKeyPath + v5 + 8) + 16);
  uint64_t v42 = *(void *)(v44 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v37 - v6;
  uint64_t v41 = v8;
  uint64_t v9 = *(void *)(v8 + 24);
  uint64_t v38 = *(void *)(v9 + 40);
  uint64_t v10 = *(void *)(v38 + 8);
  uint64_t v11 = *(void *)(v9 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v15 = (char *)&v37 - v14;
  uint64_t v16 = type metadata accessor for DispatchPredicate();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin();
  uint64_t v19 = (uint64_t *)((char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  char v20 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  id v21 = (void *)*v20;
  *uint64_t v19 = *v20;
  (*(void (**)(uint64_t *, void, uint64_t))(v17 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v16);
  id v22 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v17 + 8))(v19, v16);
  if (v21)
  {
    os_log_type_t v23 = *(void (**)(uint64_t, uint64_t))(v10 + 64);
    uint64_t v24 = v45;
    swift_retain();
    v23(v11, v10);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, AssociatedTypeWitness);
    v47[4] = v24;
    id v26 = (void (*)(uint64_t *, void))swift_modifyAtReferenceWritableKeyPath();
    Dictionary.removeValue(forKey:)();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v7, v44);
    v26(v47, 0);
    swift_release();
    if (v48[0])
    {
      uint64_t v27 = v38;
      sub_1002DA3B0(v48[0], v48[1]);
      v47[0] = v39;
      __chkstk_darwin();
      *(&v37 - 4) = v28;
      *(&v37 - 3) = v27;
      uint64_t v29 = v46;
      *(&v37 - 2) = v45;
      *(&v37 - 1) = v29;
      sub_100014434(&qword_100486218);
      type metadata accessor for ReferenceWritableKeyPath();
      type metadata accessor for Optional();
      sub_1002D91C4((void (*)(char *, char *))sub_1002FDAD0, (uint64_t)(&v37 - 6), (uint64_t)&type metadata for Never, (uint64_t)&type metadata for () + 8, v30, (uint64_t)v48);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v31 = v46;
      swift_unknownObjectRetain_n();
      uint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = (uint8_t *)swift_slowAlloc();
        v47[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v34 = 136315138;
        v48[0] = v31;
        uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
        v48[0] = sub_100010680(v35, v36, v47);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Unable to find %s when it was terminated", v34, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_unknownObjectRelease_n();
      }
    }
  }
  else
  {
    __break(1u);
  }
}

uint8_t *sub_1002ECC28(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v108 = a1;
  uint64_t v5 = *v2;
  uint64_t v109 = *(void *)(*v2 + 88);
  uint64_t v6 = *(void *)(v5 + 80);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = type metadata accessor for Preferences();
  uint64_t v102 = *(void *)(v7 - 8);
  uint64_t v103 = v7;
  __chkstk_darwin();
  unint64_t v101 = (char *)&v93 - v8;
  uint64_t v100 = type metadata accessor for DispatchTimeInterval();
  uint64_t v99 = *(void *)(v100 - 8);
  __chkstk_darwin();
  uint64_t v107 = (uint64_t *)((char *)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for NANSubscribe.Configuration();
  __chkstk_darwin();
  uint64_t v104 = (uint64_t)&v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for NANDriverCapabilities();
  __chkstk_darwin();
  uint64_t v13 = (char *)&v93 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a2;
  id v15 = [a2 serviceName];
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  v19._uint64_t countAndFlagsBits = v16;
  v19._object = v18;
  CoreP2P::NANServiceName_optional v20 = NANServiceName.init(_:)(v19);
  object = v20.value.string._object;
  if (!v20.value.string._object)
  {
    unint64_t v36 = (uint8_t *)v3 + qword_1004888B8;
    id v37 = v14;
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      unint64_t v36 = (uint8_t *)swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      *(_DWORD *)unint64_t v36 = 136315138;
      object = v36 + 4;
      v111[0] = v40;
      id v41 = [v37 serviceName];
      uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v44 = v43;

      uint64_t v113 = sub_100010680(v42, v44, v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Cannot create new subscribe because '%s' is not a valid service name", v36, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    sub_10000F000();
    swift_allocError();
    long long v55 = xmmword_1003B2F00;
    goto LABEL_24;
  }
  uint64_t countAndFlagsBits = v20.value.string._countAndFlagsBits;
  id v98 = v14;
  swift_beginAccess();
  uint64_t v21 = v109;
  uint64_t v22 = _s8InstanceCMa();
  swift_bridgeObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v97 = v6;
  v111[0] = v6;
  v111[1] = v22;
  v111[2] = v21;
  v111[3] = WitnessTable;
  type metadata accessor for NANDiscoveryEngine.ServiceSession();
  uint64_t v24 = Dictionary.count.getter();
  swift_bridgeObjectRelease();
  uint64_t v25 = *(uint64_t *)((char *)v3 + *(void *)(*v3 + 280));
  swift_unownedRetainStrong();
  uint64_t v26 = v25 + *(void *)(*(void *)v25 + 656);
  swift_beginAccess();
  sub_100300CF4(v26, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for NANDriverCapabilities);
  swift_release();
  uint64_t v27 = *(void *)&v13[*(int *)(v11 + 40)];
  sub_100300D5C((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for NANDriverCapabilities);
  unint64_t v28 = (unint64_t)v3 + qword_1004888B8;
  if (v24 >= v27)
  {
    swift_retain_n();
    uint64_t v45 = object;
    swift_bridgeObjectRetain();
    unint64_t v36 = (uint8_t *)Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.error.getter();
    int v47 = v46;
    if (os_log_type_enabled((os_log_t)v36, v46))
    {
      uint64_t v48 = swift_slowAlloc();
      LODWORD(v108) = v47;
      uint64_t v49 = v48;
      uint64_t v109 = swift_slowAlloc();
      v111[0] = v109;
      *(_DWORD *)uint64_t v49 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v50 = NANServiceName.description.getter(countAndFlagsBits, v45);
      unint64_t v52 = v51;
      swift_bridgeObjectRelease();
      uint64_t v114 = sub_100010680(v50, v52, v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v49 + 12) = 2048;
      swift_bridgeObjectRetain();
      uint64_t v53 = Dictionary.count.getter();
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v114 = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v36, (os_log_type_t)v108, "Cannot create new subscribe %s because exceeded maximum active count %ld", (uint8_t *)v49, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();

      swift_release_n();
    }
    sub_10000F000();
    swift_allocError();
    long long v55 = xmmword_1003BDA60;
    goto LABEL_24;
  }
  uint64_t v29 = object;
  swift_bridgeObjectRetain_n();
  int64_t v96 = (uint8_t *)v28;
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = (uint8_t *)swift_slowAlloc();
    v111[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v32 = 136315138;
    uint64_t v95 = v32 + 4;
    swift_bridgeObjectRetain();
    uint64_t v33 = NANServiceName.description.getter(countAndFlagsBits, object);
    unint64_t v35 = v34;
    swift_bridgeObjectRelease();
    uint64_t v114 = sub_100010680(v33, v35, v111);
    uint64_t v29 = object;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "New client requesting a subscribe with service name %s", v32, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v56 = v3;
  sub_1000136F4(v108, (uint64_t)v111, &qword_1004862E8);
  if (v112 == 1)
  {
    sub_1000380B4((uint64_t)v111, &qword_1004862E8);
  }
  else
  {
    uint64_t v57 = (char *)v111[0];
    uint64_t v58 = self;
    id v59 = [v58 interfaceWithProtocol:&OBJC_PROTOCOL___WiFiAwareSubscriberXPC];
    uint64_t v60 = OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection;
    [*(id *)&v57[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection] setExportedInterface:v59];

    id v61 = [v58 interfaceWithProtocol:&OBJC_PROTOCOL___WiFiAwareSubscriberXPCDelegate];
    uint64_t v62 = *(void **)&v57[v60];
    uint64_t v29 = object;
    [v62 setRemoteObjectInterface:v61];
  }
  id v63 = v98;
  unint64_t v64 = (uint8_t *)v56 + qword_100485C00;
  swift_beginAccess();
  uint64_t v65 = sub_100010BCC(&qword_100486218);
  IDPool.availableID()(v65, (char *)&v114);
  swift_endAccess();
  if ((v114 & 0x100) != 0)
  {
    swift_bridgeObjectRetain();
    unint64_t v36 = v96;
    uint64_t v66 = Logger.logObject.getter();
    os_log_type_t v67 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v66, v67))
    {
      unint64_t v36 = (uint8_t *)swift_slowAlloc();
      v111[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v36 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v68 = NANServiceName.description.getter(countAndFlagsBits, v29);
      unint64_t v70 = v69;
      swift_bridgeObjectRelease();
      uint64_t v114 = sub_100010680(v68, v70, v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "Cannot create new subscribe %s because no more instance IDs were available", v36, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    sub_10000F000();
    swift_allocError();
    long long v55 = xmmword_1003D60E0;
LABEL_24:
    *(_OWORD *)uint64_t v54 = v55;
    *(unsigned char *)(v54 + 16) = 1;
    goto LABEL_25;
  }
  LODWORD(object) = v114;
  id v71 = [v63 multicastAddress];
  if (v71)
  {
    unint64_t v72 = WiFiMACAddress.wifiAddress.getter();

    uint64_t v73 = v72 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v73 = 0;
  }
  id v75 = [v63 serviceSpecificInfo];
  if (v75)
  {
    uint64_t v76 = v75;
    uint64_t v77 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    int64_t v96 = (uint8_t *)v78;
  }
  else
  {
    uint64_t v77 = 0;
    int64_t v96 = (uint8_t *)0xF000000000000000;
  }
  uint64_t result = (uint8_t *)NANTimeUnit.discoveryWindowInterval.unsafeMutableAddressor();
  uint64_t v79 = *(void *)result;
  if (*(void *)result >> 54)
  {
    __break(1u);
  }
  else
  {
    uint64_t v95 = (uint8_t *)v77;
    uint64_t v94 = v64;
    uint64_t v80 = v79 << 10;
    if ((v80 & 0x8000000000000000) == 0)
    {
      *uint64_t v107 = v80;
      (*(void (**)(void))(v99 + 104))();
      id v81 = [v63 fastDiscoveryConfiguration];
      id v82 = v81;
      if (v81) {

      }
      swift_unownedRetainStrong();
      uint64_t v83 = v101;
      WiFiInterface.preferences.getter();
      swift_release();
      uint64_t v84 = v103;
      char v85 = Preferences.disableAuthentication.getter();
      (*(void (**)(char *, uint64_t))(v102 + 8))(v83, v84);
      int v86 = (v85 & 1) != 0 || [v98 authenticationType] != (id)1;
      unsigned __int8 v87 = object;
      BOOL v88 = v82 != 0;
      LOBYTE(v111[0]) = v71 == 0;
      uint64_t v89 = v104;
      NANSubscribe.Configuration.init(instanceID:serviceName:serviceSpecificInfo:queryPeriod:enableFastDiscovery:authenticationType:multicastAddress:type:multicastServiceType:)((int)object, countAndFlagsBits, (uint64_t)v29, (uint64_t)v95, (unint64_t)v96, (uint64_t)v107, v88, v86, v104, v73, (v73 | ((unint64_t)(v71 == 0) << 48)) >> 32, (v73 | ((unint64_t)(v71 == 0) << 48)) >> 48, (v73 | ((unint64_t)(v71 == 0) << 48)) >> 56, 1, 1u);
      __chkstk_darwin();
      KeyPath = (void *)swift_getKeyPath();
      uint64_t v91 = v105;
      uint64_t v92 = sub_1002EB800(v89, KeyPath, v108);
      if (!v91)
      {
        unint64_t v36 = (uint8_t *)v92;
        sub_100300D5C(v89, (uint64_t (*)(void))type metadata accessor for NANSubscribe.Configuration);
        swift_release();
        return v36;
      }
      sub_100300D5C(v89, (uint64_t (*)(void))type metadata accessor for NANSubscribe.Configuration);
      swift_release();
      unint64_t v36 = v94;
      swift_beginAccess();
      sub_1001742AC(v87);
      swift_endAccess();
LABEL_25:
      swift_willThrow();
      return v36;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_1002EDAA0(uint64_t a1, void *a2)
{
  uint64_t v271 = a1;
  uint64_t v4 = *v2;
  uint64_t v264 = type metadata accessor for DispatchTimeInterval();
  uint64_t v263 = *(void *)(v264 - 8);
  __chkstk_darwin();
  uint64_t v268 = (char **)((char *)&v248 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for NANPublish.Configuration();
  __chkstk_darwin();
  uint64_t v265 = (uint64_t)&v248 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v276 = *(void **)(v4 + 88);
  uint64_t v7 = *(void **)(v4 + 80);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t rawValue = type metadata accessor for Preferences();
  uint64_t v269 = *(void *)(rawValue - 8);
  __chkstk_darwin();
  uint64_t v261 = (uint64_t)&v248 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v266 = (uint64_t)&v248 - v9;
  uint64_t v10 = type metadata accessor for NANDriverCapabilities();
  __chkstk_darwin();
  uint64_t v260 = (uint64_t)&v248 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  *(void *)&long long v262 = (char *)&v248 - v12;
  __chkstk_darwin();
  *(void *)&long long v259 = (char *)&v248 - v13;
  __chkstk_darwin();
  id v15 = (char *)&v248 - v14;
  id v16 = [a2 serviceName];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v19 = v18;

  v20._uint64_t countAndFlagsBits = v17;
  v20._object = v19;
  CoreP2P::NANServiceName_optional v21 = NANServiceName.init(_:)(v20);
  uint64_t countAndFlagsBits = (uint8_t *)v21.value.string._countAndFlagsBits;
  if (!v21.value.string._object)
  {
    id v38 = a2;
    unint64_t p_type = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled((os_log_t)p_type, v40))
    {
      id v41 = (uint8_t *)swift_slowAlloc();
      uint64_t v276 = (void *)swift_slowAlloc();
      uint64_t v277 = v276;
      *(_DWORD *)id v41 = 136315138;
      uint64_t countAndFlagsBits = v41 + 4;
      id v42 = [v38 serviceName];
      uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v45 = v44;

      *(void *)&long long v283 = sub_100010680(v43, v45, (uint64_t *)&v277);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)p_type, v40, "Cannot create new publish because '%s' is not a valid service name", v41, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    sub_10000F000();
    swift_allocError();
    long long v54 = xmmword_1003B2F00;
    goto LABEL_18;
  }
  object = v21.value.string._object;
  id v270 = a2;
  swift_beginAccess();
  uint64_t v22 = v276;
  uint64_t v23 = _s8InstanceCMa_0();
  swift_bridgeObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v258 = v7;
  uint64_t v277 = v7;
  *(void *)&long long v278 = v23;
  *((void *)&v278 + 1) = v22;
  *(void *)&long long v279 = WitnessTable;
  type metadata accessor for NANDiscoveryEngine.ServiceSession();
  uint64_t v25 = v2;
  uint64_t v26 = Dictionary.count.getter();
  swift_bridgeObjectRelease();
  unint64_t v27 = *(uint64_t *)((char *)v2 + *(void *)(*v2 + 280));
  swift_unownedRetainStrong();
  uint64_t v28 = v27 + *(void *)(*(void *)v27 + 656);
  swift_beginAccess();
  sub_100300CF4(v28, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for NANDriverCapabilities);
  unint64_t v257 = v27;
  swift_release();
  uint64_t v29 = *(void *)&v15[*(int *)(v10 + 36)];
  sub_100300D5C((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for NANDriverCapabilities);
  uint64_t v30 = (uint64_t)v25 + qword_1004888B8;
  if (v26 >= v29)
  {
    swift_retain_n();
    unint64_t p_type = (unint64_t)object;
    swift_bridgeObjectRetain();
    os_log_type_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = swift_slowAlloc();
      uint64_t v276 = (void *)swift_slowAlloc();
      uint64_t v277 = v276;
      *(_DWORD *)uint64_t v48 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v49 = NANServiceName.description.getter((uint64_t)countAndFlagsBits, (void *)p_type);
      uint64_t v272 = v25;
      unint64_t v51 = v50;
      swift_bridgeObjectRelease();
      *(void *)&long long v283 = sub_100010680(v49, v51, (uint64_t *)&v277);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v48 + 12) = 2048;
      swift_bridgeObjectRetain();
      uint64_t v52 = Dictionary.count.getter();
      swift_release();
      swift_bridgeObjectRelease();
      *(void *)&long long v283 = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Cannot create new publish %s because exceeded maximum active count %ld", (uint8_t *)v48, 0x16u);
      unint64_t p_type = (unint64_t)v276;
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();

      swift_release_n();
    }
    sub_10000F000();
    swift_allocError();
    long long v54 = xmmword_1003BDA60;
LABEL_18:
    *(_OWORD *)uint64_t v53 = v54;
    *(unsigned char *)(v53 + 16) = 1;
    swift_willThrow();
    return p_type;
  }
  uint64_t v272 = v25;
  os_log_type_t v31 = object;
  swift_bridgeObjectRetain_n();
  uint64_t v256 = v30;
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v32, v33))
  {
    unint64_t v34 = (uint8_t *)swift_slowAlloc();
    uint64_t v277 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v34 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v35 = NANServiceName.description.getter((uint64_t)countAndFlagsBits, v31);
    unint64_t v37 = v36;
    swift_bridgeObjectRelease();
    *(void *)&long long v283 = sub_100010680(v35, v37, (uint64_t *)&v277);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "New client requesting a publish with service name %s", v34, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  long long v55 = v272;
  uint64_t v56 = (uint64_t)v270;
  id v57 = [v270 datapathConfiguration];
  if (v57)
  {
    uint64_t v58 = v57;
    id v59 = [v57 serviceType];

    int v60 = v59 == (id)1;
    if (v59 == (id)2) {
      int v60 = 2;
    }
    unsigned int v255 = v60;
  }
  else
  {
    unsigned int v255 = 0;
  }
  id v62 = [(id)v56 internetSharingConfiguration];
  if (!v62)
  {
    uint64_t v285 = 0;
    long long v283 = 0u;
    long long v284 = 0u;
    char v286 = -1;
    goto LABEL_61;
  }
  id v63 = v62;
  unint64_t p_type = (unint64_t)&stru_100479FF0.type;
  id v64 = [v62 interfaceName];
  if (!v64)
  {
LABEL_28:
    id v70 = [v63 interfaceName];
    if (v70)
    {

LABEL_34:
      id v71 = v63;
      unint64_t v72 = object;
      swift_bridgeObjectRetain();
      id v73 = v71;
      int64_t v74 = Logger.logObject.getter();
      os_log_type_t v75 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v74, v75))
      {
        uint64_t v76 = swift_slowAlloc();
        uint64_t v276 = (void *)swift_slowAlloc();
        uint64_t v277 = v276;
        *(_DWORD *)uint64_t v76 = 136316162;
        swift_bridgeObjectRetain();
        uint64_t v77 = NANServiceName.description.getter((uint64_t)countAndFlagsBits, v72);
        unint64_t v79 = v78;
        swift_bridgeObjectRelease();
        v282[0] = sub_100010680(v77, v79, (uint64_t *)&v277);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v76 + 12) = 2080;
        unsigned int v80 = [v73 automatic];
        BOOL v81 = v80 == 0;
        if (v80) {
          uint64_t v82 = 0x6974616D6F747561;
        }
        else {
          uint64_t v82 = 0;
        }
        if (v81) {
          unint64_t v83 = 0xE000000000000000;
        }
        else {
          unint64_t v83 = 0xEA00000000002063;
        }
        v282[0] = sub_100010680(v82, v83, (uint64_t *)&v277);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v76 + 22) = 2080;
        unsigned int v84 = [v73 provider];
        BOOL v85 = v84 == 0;
        if (v84) {
          uint64_t v86 = 0x72656469766F7270;
        }
        else {
          uint64_t v86 = 0x6574736575716572;
        }
        if (v85) {
          unint64_t v87 = 0xE900000000000072;
        }
        else {
          unint64_t v87 = 0xE800000000000000;
        }
        v282[0] = sub_100010680(v86, v87, (uint64_t *)&v277);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v76 + 32) = 2080;
        id v88 = [v73 interfaceName];
        if (v88)
        {
          uint64_t v89 = v88;
          uint64_t v90 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v92 = v91;
        }
        else
        {
          unint64_t v92 = 0xE400000000000000;
          uint64_t v90 = 1701736302;
        }
        v282[0] = sub_100010680(v90, v92, (uint64_t *)&v277);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v76 + 42) = 2080;
        if (v255)
        {
          if (v255 == 1)
          {
            unint64_t p_type = 0xE800000000000000;
            uint64_t v93 = 0x656D69746C616572;
          }
          else
          {
            uint64_t v93 = 0x6E6574614C776F6CLL;
            unint64_t p_type = 0xEA00000000007963;
          }
        }
        else
        {
          uint64_t v93 = 0x6576697470616461;
          unint64_t p_type = 0xE800000000000000;
        }
        v282[0] = sub_100010680(v93, p_type, (uint64_t *)&v277);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v74, v75, "Cannot create new publish %s because of invalid internet sharing policy %s%s on interface: %s with service type: %s", (uint8_t *)v76, 0x34u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }

      sub_10000F000();
      swift_allocError();
      *(_OWORD *)uint64_t v94 = xmmword_1003B2F00;
      *(unsigned char *)(v94 + 16) = 1;
      swift_willThrow();

      return p_type;
    }
    if (![v63 automatic] || (objc_msgSend(v63, "provider") & 1) != 0) {
      goto LABEL_34;
    }
    if (v255 > 1)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t p_type = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((p_type & 1) == 0) {
        goto LABEL_34;
      }
    }
    uint64_t v95 = *(void **)((char *)v55 + *(void *)(*v55 + 256));
    *((void *)&v284 + 1) = type metadata accessor for LowLatencyInternetRequesterPolicy();
    uint64_t v285 = &off_10046F7C8;
    id v96 = v95;

    *(void *)&long long v283 = v96;
    char v286 = 1;
    goto LABEL_60;
  }
  uint64_t v65 = v64;
  uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v68 = v67;

  if (([v63 automatic] & 1) != 0 || !objc_msgSend(v63, "provider"))
  {
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  unsigned __int8 v69 = [v63 useBridging];

  *(void *)&long long v283 = v66;
  *((void *)&v283 + 1) = v68;
  LOBYTE(v284) = v69;
  char v286 = 0;
LABEL_60:
  uint64_t v56 = (uint64_t)v270;
LABEL_61:
  sub_1000136F4((uint64_t)&v283, (uint64_t)&v277, (uint64_t *)&unk_100486320);
  unint64_t v97 = v257;
  if (v280 == 255)
  {
    sub_1000380B4((uint64_t)&v277, (uint64_t *)&unk_100486320);
  }
  else
  {
    if ((v280 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_unownedRetainStrong();
      unint64_t p_type = *(void *)(v97 + *(void *)(*(void *)v97 + 456));
      swift_retain();
      swift_release();
      uint64_t v98 = v273;
      if (p_type) {
        goto LABEL_75;
      }
      swift_unownedRetainStrong();
      uint64_t v99 = v98;
      uint64_t v100 = sub_10035719C();
      goto LABEL_71;
    }
    sub_1001B7D50((uint64_t)&v277);
  }
  id v101 = [(id)v56 datapathConfiguration];
  if (!v101 || (uint64_t v102 = v101, v103 = [v101 serviceType], v102, v103 != (id)2))
  {
    swift_unownedRetainStrong();
    unint64_t p_type = v97;
    goto LABEL_74;
  }
  swift_unownedRetainStrong();
  unint64_t p_type = *(void *)(v97 + *(void *)(*(void *)v97 + 448));
  swift_retain();
  swift_release();
  if (p_type)
  {
LABEL_74:
    uint64_t v98 = v273;
    goto LABEL_75;
  }
  swift_unownedRetainStrong();
  uint64_t v99 = v273;
  uint64_t v100 = (uint64_t)sub_100357D68();
LABEL_71:
  uint64_t v98 = v99;
  if (v99)
  {
    sub_1000380B4((uint64_t)&v283, (uint64_t *)&unk_100486320);
    swift_release();
    swift_bridgeObjectRelease();
    return p_type;
  }
  unint64_t p_type = v100;
  swift_release();
LABEL_75:
  unint64_t v254 = p_type;
  sub_1000136F4(v271, (uint64_t)&v277, &qword_1004862E8);
  *(void *)&long long v273 = v98;
  if (BYTE8(v279) == 1)
  {
    sub_1000380B4((uint64_t)&v277, &qword_1004862E8);
  }
  else
  {
    uint64_t v104 = v277;
    uint64_t v105 = self;
    id v106 = [v105 interfaceWithProtocol:&OBJC_PROTOCOL___WiFiAwarePublisherXPC];
    uint64_t v107 = OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection;
    [*(id *)((char *)v104 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection) setExportedInterface:v106];

    unint64_t v97 = v257;
    id v108 = [v105 interfaceWithProtocol:&OBJC_PROTOCOL___WiFiAwarePublisherXPCDelegate];
    [*(id *)((char *)v104 + v107) setRemoteObjectInterface:v108];
  }
  uint64_t v109 = (uint64_t)v55 + qword_100485C00;
  swift_beginAccess();
  uint64_t v110 = sub_100010BCC(&qword_100486218);
  IDPool.availableID()(v110, (char *)v282);
  swift_endAccess();
  if ((v282[0] & 0x100) != 0)
  {
    uint64_t v111 = object;
    swift_bridgeObjectRetain();
    char v112 = Logger.logObject.getter();
    os_log_type_t v113 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v112, v113))
    {
      uint64_t v114 = (uint8_t *)swift_slowAlloc();
      uint64_t v277 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v114 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v115 = NANServiceName.description.getter((uint64_t)countAndFlagsBits, v111);
      unint64_t v117 = v116;
      swift_bridgeObjectRelease();
      v282[0] = sub_100010680(v115, v117, (uint64_t *)&v277);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v112, v113, "Cannot create new publish %s because no more instance IDs were available", v114, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    unint64_t p_type = v254;
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v124 = xmmword_1003D60E0;
    *(unsigned char *)(v124 + 16) = 1;
    swift_willThrow();
    swift_release();
    sub_1000380B4((uint64_t)&v283, (uint64_t *)&unk_100486320);
    return p_type;
  }
  uint64_t v250 = v109;
  int v252 = LOBYTE(v282[0]);
  swift_unownedRetainStrong();
  uint64_t v118 = v266;
  WiFiInterface.preferences.getter();
  swift_release();
  uint64_t v119 = rawValue;
  char v120 = Preferences.disableAuthentication.getter();
  uint64_t v121 = v269 + 8;
  uint64_t v122 = *(void (**)(uint64_t, uint64_t))(v269 + 8);
  v122(v118, v119);
  uint64_t v269 = v121;
  uint64_t v249 = v122;
  BOOL v123 = (v120 & 1) != 0 || [(id)v56 authenticationType] != (id)1;
  BOOL v251 = v123;
  char v125 = _swiftEmptyArrayStorage;
  uint64_t v287 = _swiftEmptyArrayStorage;
  uint64_t v126 = (char *)[(id)v56 datapathConfiguration];
  BOOL v127 = v126;
  uint64_t v253 = v126;
  if (!v126) {
    goto LABEL_130;
  }
  uint64_t v128 = (char *)[v126 securityConfiguration];
  if (!v128) {
    goto LABEL_130;
  }
  char v248 = v128;
  id v129 = [v128 pmkList];
  unint64_t v130 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!v130[2])
  {
    swift_bridgeObjectRelease();
    goto LABEL_95;
  }
  uint64_t v131 = v130[4];
  unint64_t v132 = v130[5];
  sub_100013D44(v131, v132);
  swift_bridgeObjectRelease();
  uint64_t v133 = NANPMK.init(pmk:)(v131, v132);
  if (v134 >> 60 == 15)
  {
LABEL_95:
    swift_unownedRetainStrong();
    uint64_t v144 = v97 + *(void *)(*(void *)v97 + 656);
    swift_beginAccess();
    uint64_t v145 = v262;
    sub_100300CF4(v144, v262, (uint64_t (*)(void))type metadata accessor for NANDriverCapabilities);
    swift_release();
    uint64_t v146 = *(void **)(v145 + 8);
    swift_bridgeObjectRetain();
    sub_100300D5C(v145, (uint64_t (*)(void))type metadata accessor for NANDriverCapabilities);
    uint64_t v277 = v146;
    uint64_t v147 = sub_100010BCC((uint64_t *)&unk_1004852A0);
    sub_10000F9CC((unint64_t *)&qword_100486310, (uint64_t *)&unk_1004852A0);
    LODWORD(v266) = Collection<>.strongestSupportedSharedKeySuite.getter(v147);
    LODWORD(v145) = v266;
    swift_bridgeObjectRelease();
    if (v145 == 8)
    {
      swift_bridgeObjectRelease();
      uint64_t v148 = object;
      swift_bridgeObjectRetain();
      char v149 = Logger.logObject.getter();
      os_log_type_t v150 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v149, v150))
      {
        os_log_type_t v151 = (uint8_t *)swift_slowAlloc();
        uint64_t v277 = (void *)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v151 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v152 = NANServiceName.description.getter((uint64_t)countAndFlagsBits, v148);
        unint64_t v154 = v153;
        swift_bridgeObjectRelease();
        v282[0] = sub_100010680(v152, v154, (uint64_t *)&v277);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        BOOL v127 = v253;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v149, v150, "Cannot create new publish %s because the client specified a security configuration but failed to derive a valid configuration", v151, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      unint64_t p_type = v254;
      unsigned __int8 v168 = v252;
      sub_10000F000();
      swift_allocError();
      *(_OWORD *)uint64_t v169 = xmmword_1003D5850;
      *(unsigned char *)(v169 + 16) = 1;
      swift_willThrow();

      BOOL v127 = v248;
LABEL_165:

      swift_beginAccess();
      sub_1001742AC(v168);
      swift_endAccess();
      swift_willThrow();
      swift_release();
      sub_1000380B4((uint64_t)&v283, (uint64_t *)&unk_100486320);
      return p_type;
    }
    id v155 = [v248 pmkList];
    uint64_t v156 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v157 = *(void *)(v156 + 16);
    if (v157)
    {
      swift_bridgeObjectRetain();
      *(void *)&long long v259 = v156;
      uint64_t v158 = (unint64_t *)(v156 + 40);
      char v159 = _swiftEmptyArrayStorage;
      long long v262 = xmmword_1003B4AC0;
      uint64_t v56 = (uint64_t)v270;
      do
      {
        uint64_t v161 = *(v158 - 1);
        unint64_t v162 = *v158;
        sub_100013D44(v161, *v158);
        sub_100013D44(v161, v162);
        uint64_t v163 = NANPMK.init(pmk:)(v161, v162);
        unint64_t v165 = v164;
        sub_10000C970(v161, v162);
        if (v165 >> 60 != 15)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            char v159 = sub_100330038(0, v159[2] + 1, 1, v159);
          }
          unint64_t v167 = v159[2];
          unint64_t v166 = v159[3];
          if (v167 >= v166 >> 1) {
            char v159 = sub_100330038((void *)(v166 > 1), v167 + 1, 1, v159);
          }
          v159[2] = v167 + 1;
          uint64_t v160 = &v159[7 * v167];
          *((unsigned char *)v160 + 32) = v266;
          v160[5] = v163;
          v160[6] = v165;
          *(_OWORD *)(v160 + 7) = v262;
          v160[9] = 0;
          v160[10] = 0;
          uint64_t v56 = (uint64_t)v270;
        }
        v158 += 2;
        --v157;
      }
      while (v157);
      swift_bridgeObjectRelease();
      unint64_t v97 = v257;
    }
    else
    {
      char v159 = _swiftEmptyArrayStorage;
      uint64_t v56 = (uint64_t)v270;
    }
    swift_bridgeObjectRelease();
    sub_100375BF8((uint64_t)v159);
    id v170 = [v248 passphraseList];
    uint64_t v171 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

    BOOL v127 = (char *)v171[2];
    if (v127)
    {
      uint64_t v277 = _swiftEmptyArrayStorage;
      uint64_t v172 = (uint64_t)v171;
      sub_1002BF33C(0, (int64_t)v127, 0);
      uint64_t v173 = v277;
      uint64_t v174 = v171 + 5;
      do
      {
        uint64_t v175 = *(v174 - 1);
        uint64_t v56 = *v174;
        uint64_t v176 = HIBYTE(*v174) & 0xF;
        if ((*v174 & 0x2000000000000000) == 0) {
          uint64_t v176 = v175 & 0xFFFFFFFFFFFFLL;
        }
        if (!v176)
        {
          __break(1u);
          goto LABEL_173;
        }
        uint64_t v277 = v173;
        unint64_t v178 = v173[2];
        unint64_t v177 = v173[3];
        swift_bridgeObjectRetain();
        if (v178 >= v177 >> 1)
        {
          sub_1002BF33C(v177 > 1, v178 + 1, 1);
          uint64_t v171 = (void *)v172;
          uint64_t v173 = v277;
        }
        v174 += 2;
        v173[2] = v178 + 1;
        uint64_t v179 = &v173[2 * v178];
        v179[4] = v175;
        v179[5] = v56;
        --v127;
      }
      while (v127);
      swift_bridgeObjectRelease();
      uint64_t v180 = (uint64_t)object;
      uint64_t v56 = (uint64_t)v270;
      unint64_t v97 = v257;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v173 = _swiftEmptyArrayStorage;
      uint64_t v180 = (uint64_t)object;
    }
    int64_t v181 = v173[2];
    if (v181)
    {
      uint64_t v281 = _swiftEmptyArrayStorage;
      sub_1002BF31C(0, v181, 0);
      uint64_t v182 = v281;
      unint64_t v183 = v173 + 5;
      uint64_t v184 = v273;
      do
      {
        uint64_t v185 = *v183;
        v282[0] = *(v183 - 1);
        v282[1] = v185;
        swift_bridgeObjectRetain();
        sub_1002F0354(v282, v266, (uint64_t)countAndFlagsBits, v180, (uint64_t)&v277);
        swift_bridgeObjectRelease();
        char v186 = (char)v277;
        long long v187 = v278;
        long long v188 = v279;
        long long v189 = v280;
        uint64_t v281 = v182;
        unint64_t v191 = v182[2];
        unint64_t v190 = v182[3];
        if (v191 >= v190 >> 1)
        {
          long long v273 = v278;
          long long v262 = v279;
          long long v259 = v280;
          sub_1002BF31C(v190 > 1, v191 + 1, 1);
          long long v189 = v259;
          long long v188 = v262;
          long long v187 = v273;
          uint64_t v182 = v281;
        }
        v182[2] = v191 + 1;
        uint64_t v192 = &v182[7 * v191];
        *((unsigned char *)v192 + 32) = v186;
        v183 += 2;
        *(_OWORD *)(v192 + 5) = v187;
        *(_OWORD *)(v192 + 7) = v188;
        *(_OWORD *)(v192 + 9) = v189;
        --v181;
      }
      while (v181);
      *(void *)&long long v273 = v184;
      swift_bridgeObjectRelease();
      uint64_t v56 = (uint64_t)v270;
      unint64_t v97 = v257;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v182 = _swiftEmptyArrayStorage;
    }
    sub_100375BF8((uint64_t)v182);

    char v125 = v287;
    goto LABEL_129;
  }
  uint64_t v135 = v133;
  unint64_t v136 = v134;
  id v137 = [v248 pmkID];
  if (!v137
    || (uint64_t v138 = v137,
        uint64_t v139 = static Data._unconditionallyBridgeFromObjectiveC(_:)(),
        unint64_t v141 = v140,
        v138,
        uint64_t v142 = NANPMK.ID.init(_:)(v139, v141),
        v143 >> 60 == 15))
  {
    sub_10000C95C(v135, v136);
    goto LABEL_95;
  }
  unint64_t v239 = v143;
  uint64_t v266 = v142;
  swift_unownedRetainStrong();
  uint64_t v240 = v97 + *(void *)(*(void *)v97 + 656);
  swift_beginAccess();
  uint64_t v241 = v259;
  sub_100300CF4(v240, v259, (uint64_t (*)(void))type metadata accessor for NANDriverCapabilities);
  swift_release();
  unint64_t v242 = *(void **)(v241 + 8);
  swift_bridgeObjectRetain();
  sub_100300D5C(v241, (uint64_t (*)(void))type metadata accessor for NANDriverCapabilities);
  uint64_t v277 = v242;
  uint64_t v243 = sub_100010BCC((uint64_t *)&unk_1004852A0);
  sub_10000F9CC((unint64_t *)&qword_100486310, (uint64_t *)&unk_1004852A0);
  char v244 = Collection<>.strongestSupportedPublicKeySuite.getter(v243);
  swift_bridgeObjectRelease();
  if (v244 == 8)
  {
    sub_10000C95C(v135, v136);
    sub_10000C95C(v266, v239);
    BOOL v127 = v253;
    goto LABEL_95;
  }
  swift_bridgeObjectRelease();
  sub_100010BCC(&qword_100485608);
  char v125 = (void *)swift_allocObject();
  *((_OWORD *)v125 + 1) = xmmword_1003B2450;
  *((unsigned char *)v125 + 32) = v244;
  v125[5] = v135;
  v125[6] = v136;
  v125[7] = v266;
  v125[8] = v239;
  v125[9] = 0;
  v125[10] = 0;

  uint64_t v287 = v125;
  uint64_t v56 = (uint64_t)v270;
LABEL_129:
  BOOL v127 = v253;
LABEL_130:
  if (v125[2]) {
    goto LABEL_140;
  }
  swift_unownedRetainStrong();
  uint64_t v193 = v261;
  WiFiInterface.preferences.getter();
  swift_release();
  uint64_t v194 = rawValue;
  char v195 = Preferences.automaticallyUseEncryption.getter();
  v249(v193, v194);
  if ((v195 & 1) == 0 && v251) {
    goto LABEL_140;
  }
  swift_unownedRetainStrong();
  uint64_t v196 = v97 + *(void *)(*(void *)v97 + 656);
  swift_beginAccess();
  uint64_t v197 = v260;
  sub_100300CF4(v196, v260, (uint64_t (*)(void))type metadata accessor for NANDriverCapabilities);
  swift_release();
  BOOL v198 = *(void **)(v197 + 8);
  swift_bridgeObjectRetain();
  sub_100300D5C(v197, (uint64_t (*)(void))type metadata accessor for NANDriverCapabilities);
  uint64_t v277 = v198;
  uint64_t v173 = (void *)sub_100010BCC((uint64_t *)&unk_1004852A0);
  sub_10000F9CC((unint64_t *)&qword_100486310, (uint64_t *)&unk_1004852A0);
  LOBYTE(v173) = Collection<>.strongestSupportedSharedKeySuite.getter((uint64_t)v173);
  swift_bridgeObjectRelease();
  if (v173 == 8)
  {
    swift_bridgeObjectRelease();
    uint64_t v199 = object;
    swift_bridgeObjectRetain();
    uint64_t v200 = Logger.logObject.getter();
    os_log_type_t v201 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v200, v201))
    {
      unint64_t v202 = (uint8_t *)swift_slowAlloc();
      uint64_t v277 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v202 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v203 = NANServiceName.description.getter((uint64_t)countAndFlagsBits, v199);
      unint64_t v205 = v204;
      swift_bridgeObjectRelease();
      uint64_t v281 = (void *)sub_100010680(v203, v205, (uint64_t *)&v277);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      BOOL v127 = v253;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v200, v201, "Cannot create new publish %s because encryption is required but no suitable cipher suite exists", v202, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    unint64_t p_type = v254;
    unsigned __int8 v168 = v252;
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v245 = xmmword_1003D5850;
    *(unsigned char *)(v245 + 16) = 1;
    swift_willThrow();
    goto LABEL_165;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t v172 = __DataStorage.init(length:)();
  uint64_t v171 = v287;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_175;
  }
  while (1)
  {
    unint64_t v207 = v171[2];
    unint64_t v206 = v171[3];
    if (v207 >= v206 >> 1) {
      uint64_t v171 = sub_100330038((void *)(v206 > 1), v207 + 1, 1, v171);
    }
    v171[2] = v207 + 1;
    unint64_t v208 = &v171[7 * v207];
    *((unsigned char *)v208 + 32) = (_BYTE)v173;
    v208[5] = 0x2000000000;
    v208[6] = v172 | 0x4000000000000000;
    *(_OWORD *)(v208 + 7) = xmmword_1003B4AC0;
    v208[9] = 0;
    v208[10] = 0;
    uint64_t v287 = v171;
LABEL_140:
    uint64_t v172 = (uint64_t)[(id)v56 multicastAddress];
    if (v172)
    {
      unint64_t v209 = WiFiMACAddress.wifiAddress.getter();

      uint64_t v210 = v209 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v210 = 0;
    }
    uint64_t v211 = (void *)v254;
    uint64_t v269 = v210;
    if (v127 && (id v212 = [v127 serviceSpecificInfo]) != 0)
    {
      char v213 = v212;
      uint64_t rawValue = WiFiAwarePublishDatapathServiceSpecificInfo.genericServiceProtocol.getter();
    }
    else
    {
      uint64_t rawValue = (uint64_t)NANGenericServiceProtocol.init()().attributes._rawValue;
    }
    char v214 = v287;
    id v215 = [(id)v56 serviceSpecificInfo];
    if (v215
      && (unint64_t v216 = v215,
          id v217 = [v215 instanceName],
          v216,
          v217))
    {
      uint64_t v266 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)&long long v262 = v218;
    }
    else
    {
      uint64_t v266 = 0;
      *(void *)&long long v262 = 0;
    }
    id v219 = [(id)v56 serviceSpecificInfo];
    if (v219
      && (char v220 = v219, v221 = [v219 blob], v220, v221))
    {
      uint64_t v261 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v260 = v222;
    }
    else
    {
      uint64_t v261 = 0;
      uint64_t v260 = 0xF000000000000000;
    }
    id v223 = [(id)v56 serviceSpecificInfo];
    if (v223
      && (uint64_t v224 = v223,
          id v225 = [v223 txtRecordData],
          v224,
          v225))
    {
      uint64_t v173 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
      BOOL v127 = v226;
    }
    else
    {
      uint64_t v173 = 0;
      BOOL v127 = (char *)0xF000000000000000;
    }
    swift_unownedRetainStrong();
    uint64_t v56 = WiFiInterface.macAddress.getter();
    uint64_t v227 = swift_release();
    uint64_t v171 = v211;
    uint64_t v228 = (*(uint64_t (**)(uint64_t))(*v211 + 232))(v227);
    uint64_t v229 = NANTimeUnit.discoveryWindowInterval.unsafeMutableAddressor();
    if (*v229 >> 54)
    {
LABEL_173:
      __break(1u);
      goto LABEL_174;
    }
    uint64_t v230 = *v229 << 10;
    if ((v230 & 0x8000000000000000) == 0) {
      break;
    }
LABEL_174:
    __break(1u);
LABEL_175:
    uint64_t v171 = sub_100330038(0, v171[2] + 1, 1, v171);
  }
  *uint64_t v268 = v230;
  (*(void (**)(void))(v263 + 104))();
  id v231 = v270;
  unsigned __int8 v232 = WiFiAwarePublishConfiguration.furtherServiceDiscoveryFunction.getter();
  id v233 = [v231 fastDiscoveryConfiguration];
  id v234 = v233;
  if (v233) {

  }
  sub_1000136F4((uint64_t)&v283, (uint64_t)&v277, (uint64_t *)&unk_100486320);
  LOBYTE(v281) = v172 == 0;
  unint64_t v247 = v269 | ((unint64_t)(v172 == 0) << 48);
  uint64_t v246 = (uint64_t)v214;
  uint64_t v235 = v265;
  unsigned __int8 v168 = v252;
  NANPublish.Configuration.init(instanceID:serviceName:instanceName:blob:txtRecordData:managementAddress:responderAddress:datapathConfiguration:announcementPeriod:furtherServiceDiscoveryFunction:enableFastDiscovery:authenticationType:internetSharingConfiguration:pairingBootstrappingMethod:publisherType:multicastAddress:multicastServiceType:)(v252, (uint64_t)countAndFlagsBits, (uint64_t)object, v266, v262, v261, v260, (uint64_t)v173, v265, (unint64_t)v127, v56 & 0xFFFFFFFFFFFFLL, v228 & 0xFFFFFFFFFFFFLL, (v255 << 16) | 0x200, rawValue, v246, (uint64_t)v268, v232, v234 != 0, v251,
    (uint64_t)&v277,
    0,
    1u,
    v247,
    1);
  __chkstk_darwin();
  KeyPath = (void *)swift_getKeyPath();
  uint64_t v237 = v273;
  uint64_t v238 = sub_1002EB800(v235, KeyPath, v271);
  if (v237)
  {
    sub_100300D5C(v235, (uint64_t (*)(void))type metadata accessor for NANPublish.Configuration);
    swift_release();
    BOOL v127 = v253;
    unint64_t p_type = v254;
    goto LABEL_165;
  }
  unint64_t p_type = v238;

  swift_release();
  swift_release();
  sub_100300D5C(v235, (uint64_t (*)(void))type metadata accessor for NANPublish.Configuration);
  sub_1000380B4((uint64_t)&v283, (uint64_t *)&unk_100486320);
  return p_type;
}

uint64_t sub_1002F02D4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (a1)
  {
    [a1 servicePort];
    return NWEndpoint.Port.init(rawValue:)();
  }
  else
  {
    uint64_t v4 = type metadata accessor for NWEndpoint.Port();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(a2, 1, 1, v4);
  }
}

uint64_t sub_1002F0354@<X0>(uint64_t *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  swift_unownedRetainStrong();
  uint64_t v11 = WiFiInterface.macAddress.getter();
  swift_release();
  uint64_t v12 = NANPassphrase.pmk(for:serviceName:publisherAddress:)(a2, a3, a4, v11 & 0xFFFFFFFFFFFFLL, v9, v10);
  *(unsigned char *)a5 = a2;
  *(void *)(a5 + 8) = v12;
  *(void *)(a5 + 16) = v13;
  *(_OWORD *)(a5 + 24) = xmmword_1003B4AC0;
  *(void *)(a5 + 40) = v9;
  *(void *)(a5 + 48) = v10;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1002F0418(uint8_t *a1, void *a2)
{
  v773 = a1;
  uint64_t v4 = *v2;
  sub_100010BCC(&qword_10047CEF0);
  __chkstk_darwin();
  uint64_t v741 = (uint64_t)v725 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OWEKeys();
  __chkstk_darwin();
  uint64_t v736 = (uint64_t)v725 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_1004852B0);
  __chkstk_darwin();
  uint64_t v740 = (uint64_t)v725 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v9 = (char *)v725 - v8;
  uint64_t v10 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v738 = *(void *)(v10 - 8);
  __chkstk_darwin();
  v732 = (char *)v725 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_1004862F0);
  __chkstk_darwin();
  uint64_t v734 = (uint64_t)v725 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v733 = type metadata accessor for NANPeer.Service.AuthenticationStatus.State(0);
  __chkstk_darwin();
  v735 = (void *)((char *)v725 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v768 = *(void *)(v4 + 88);
  v783 = v2;
  uint64_t v14 = *(uint8_t **)(v4 + 80);
  swift_getAssociatedTypeWitness();
  v767 = v14;
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v742 = type metadata accessor for Preferences();
  uint64_t v746 = *(void *)(v742 - 8);
  __chkstk_darwin();
  v745 = (char *)v725 - v15;
  type metadata accessor for NANPeer(0);
  __chkstk_darwin();
  uint64_t v743 = (uint64_t)v725 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100486F40);
  __chkstk_darwin();
  v744 = (void *)((char *)v725 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v751 = type metadata accessor for NANDriverCapabilities();
  __chkstk_darwin();
  uint64_t v737 = (uint64_t)v725 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v739 = (uint64_t)v725 - v19;
  __chkstk_darwin();
  uint64_t v731 = (uint64_t)v725 - v20;
  __chkstk_darwin();
  uint64_t v750 = (uint64_t)v725 - v21;
  uint64_t v762 = type metadata accessor for Logger();
  uint64_t v755 = *(void *)(v762 - 8);
  __chkstk_darwin();
  uint64_t v747 = v22;
  v748 = (char *)v725 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v754 = (uint64_t)v725 - v23;
  uint64_t v24 = a2;
  id v25 = [a2 discoveryResult];
  id v26 = [v25 serviceName];

  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v29 = v28;

  v30._uint64_t countAndFlagsBits = v27;
  v30._object = v29;
  CoreP2P::NANServiceName_optional v31 = NANServiceName.init(_:)(v30);
  if (!v31.value.string._object)
  {
    id v71 = v784;
    uint64_t v72 = swift_allocObject();
    *(void *)(v72 + 16) = a2;
    id v73 = a2;
    int64_t v74 = Logger.logObject.getter();
    os_log_type_t v75 = static os_log_type_t.error.getter();
    uint64_t v76 = swift_allocObject();
    *(unsigned char *)(v76 + 16) = 32;
    uint64_t p_type = swift_allocObject();
    *(unsigned char *)(p_type + 16) = 8;
    uint64_t v78 = swift_allocObject();
    *(void *)(v78 + 16) = sub_1002FFC18;
    *(void *)(v78 + 24) = v72;
    uint64_t v79 = swift_allocObject();
    *(void *)(v79 + 16) = sub_1002FFC48;
    *(void *)(v79 + 24) = v78;
    sub_100010BCC((uint64_t *)&unk_100486300);
    uint64_t v80 = swift_allocObject();
    *(_OWORD *)(v80 + 16) = xmmword_1003B2760;
    *(void *)(v80 + 32) = sub_1002FFC30;
    *(void *)(v80 + 40) = v76;
    *(void *)(v80 + 48) = sub_100301218;
    *(void *)(v80 + 56) = p_type;
    *(void *)(v80 + 64) = sub_1002FFC50;
    *(void *)(v80 + 72) = v79;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v74, v75))
    {
      BOOL v81 = (uint8_t *)sub_100375300();
      uint64_t v82 = swift_slowAlloc();
      *(void *)&v788[0] = 0;
      v797[0] = v82;
      *(_WORD *)BOOL v81 = 258;
      *(void *)&v798[0] = v81 + 2;
      *(void *)&long long v789 = sub_1002FFC30;
      *((void *)&v789 + 1) = v76;
      sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v798, (uint64_t)v788, (uint64_t)v797);
      if (v71)
      {
        swift_errorRelease();
        __break(1u);
        swift_errorRelease();
        __break(1u);
        swift_errorRelease();
        __break(1u);
        goto LABEL_219;
      }
      swift_release();
      *(void *)&long long v789 = sub_100301218;
      *((void *)&v789 + 1) = p_type;
      sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v798, (uint64_t)v788, (uint64_t)v797);
      swift_release();
      *(void *)&long long v789 = sub_1002FFC50;
      *((void *)&v789 + 1) = v79;
      sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v798, (uint64_t)v788, (uint64_t)v797);
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "Cannot create new datapath because '%s' is not a valid service name", v81, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_10039F5FC();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v94 = xmmword_1003B2F00;
    *(unsigned char *)(v94 + 16) = 1;
    swift_willThrow();
    return p_type;
  }
  v728 = v9;
  uint64_t v729 = v10;
  id v32 = [a2 discoveryResult];
  id v33 = [v32 publisherAddress];

  unint64_t v34 = WiFiMACAddress.wifiAddress.getter();
  v778 = HIDWORD(v34);
  uint64_t v779 = v34 >> 24;
  id v780 = (id)(v34 >> 40);
  id v35 = [v24 discoveryResult];
  LODWORD(v781) = [v35 publishID];

  id v761 = v24;
  id v36 = [v24 discoveryResult];
  unsigned int v37 = [v36 subscribeID];

  id v38 = &v783[qword_1004888B8];
  os_log_type_t v39 = (CoreP2P::NANServiceName_optional *)swift_allocObject();
  uint64_t countAndFlagsBits = (unsigned char *)v31.value.string._countAndFlagsBits;
  v39[1] = v31;
  uint64_t v40 = swift_allocObject();
  *(void *)(v40 + 16) = sub_1002FFC58;
  *(void *)(v40 + 24) = v39;
  uint64_t v41 = swift_allocObject();
  unsigned int v752 = v37;
  *(unsigned char *)(v41 + 16) = v37;
  uint64_t v42 = swift_allocObject();
  v763 = (uint8_t *)v34;
  uint64_t v764 = v34 >> 8;
  *(_WORD *)(v42 + 16) = v34;
  v765 = (uint8_t *)(v34 >> 16);
  *(unsigned char *)(v42 + 18) = BYTE2(v34);
  *(unsigned char *)(v42 + 19) = v779;
  *(unsigned char *)(v42 + 20) = (_BYTE)v778;
  *(unsigned char *)(v42 + 21) = (_BYTE)v780;
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = sub_1003014D4;
  *(void *)(v43 + 24) = v42;
  uint64_t v44 = swift_allocObject();
  *(unsigned char *)(v44 + 16) = (_BYTE)v781;
  object = (uint8_t *)v31.value.string._object;
  swift_bridgeObjectRetain();
  v753 = v38;
  v777 = Logger.logObject.getter();
  LODWORD(v772) = static os_log_type_t.default.getter();
  v775 = (unsigned char *)swift_allocObject();
  v775[16] = 32;
  uint64_t v776 = swift_allocObject();
  *(unsigned char *)(v776 + 16) = 8;
  uint64_t v45 = swift_allocObject();
  *(void *)(v45 + 16) = sub_1002FFC64;
  *(void *)(v45 + 24) = v40;
  uint64_t v46 = swift_allocObject();
  *(void *)(v46 + 16) = sub_1003011F0;
  *(void *)(v46 + 24) = v45;
  uint64_t v47 = v46;
  v770 = (unsigned char *)swift_allocObject();
  v770[16] = 0;
  os_log_t v774 = (os_log_t)swift_allocObject();
  LOBYTE(v774[2].isa) = 1;
  uint64_t v48 = swift_allocObject();
  *(void *)(v48 + 16) = j___s7CoreP2P21NANDriverCapabilitiesV4modeAA12NANAttributeO16DeviceCapabilityV13OperationModeVvg;
  *(void *)(v48 + 24) = v41;
  uint64_t v49 = (void *)swift_allocObject();
  v782 = v49;
  v49[2] = sub_1002FFCE4;
  v49[3] = v48;
  unint64_t v50 = (uint8_t *)swift_allocObject();
  v50[16] = 32;
  unint64_t v51 = v50;
  v756 = v50;
  v759 = (unsigned char *)swift_allocObject();
  v759[16] = 8;
  uint64_t v52 = swift_allocObject();
  *(void *)(v52 + 16) = sub_1002FFC8C;
  *(void *)(v52 + 24) = v43;
  uint64_t v53 = swift_allocObject();
  v53[2].Class isa = (Class)sub_1003011F0;
  v53[3].Class isa = (Class)v52;
  long long v54 = v53;
  v771 = v53;
  unint64_t v758 = swift_allocObject();
  *(unsigned char *)(v758 + 16) = 0;
  unint64_t v757 = swift_allocObject();
  *(unsigned char *)(v757 + 16) = 1;
  uint64_t v55 = swift_allocObject();
  *(void *)(v55 + 16) = j___s7CoreP2P21NANDriverCapabilitiesV4modeAA12NANAttributeO16DeviceCapabilityV13OperationModeVvg;
  *(void *)(v55 + 24) = v44;
  uint64_t v56 = swift_allocObject();
  *(void *)(v56 + 16) = sub_1003014D8;
  *(void *)(v56 + 24) = v55;
  uint64_t v749 = sub_100010BCC((uint64_t *)&unk_100486300);
  uint64_t v57 = swift_allocObject();
  long long v730 = xmmword_1003D60F0;
  *(_OWORD *)(v57 + 16) = xmmword_1003D60F0;
  *(void *)(v57 + 32) = sub_100301218;
  uint64_t v58 = v776;
  *(void *)(v57 + 40) = v775;
  *(void *)(v57 + 48) = sub_100301218;
  *(void *)(v57 + 56) = v58;
  *(void *)(v57 + 64) = sub_100301208;
  *(void *)(v57 + 72) = v47;
  *(void *)(v57 + 80) = sub_100301218;
  *(void *)(v57 + 88) = v770;
  *(void *)(v57 + 96) = sub_100301218;
  *(void *)(v57 + 104) = v774;
  *(void *)(v57 + 112) = sub_1002FFCEC;
  *(void *)(v57 + 120) = v782;
  *(void *)(v57 + 128) = sub_100301218;
  *(void *)(v57 + 136) = v51;
  *(void *)(v57 + 144) = sub_100301218;
  id v59 = v759;
  *(void *)(v57 + 152) = v759;
  *(void *)(v57 + 160) = sub_100301208;
  *(void *)(v57 + 168) = v54;
  *(void *)(v57 + 176) = sub_100301218;
  unint64_t v60 = v757;
  uint64_t v61 = v758;
  *(void *)(v57 + 184) = v758;
  *(void *)(v57 + 192) = sub_100301218;
  *(void *)(v57 + 200) = v60;
  *(void *)(v57 + 208) = sub_10030120C;
  *(void *)(v57 + 216) = v56;
  swift_retain();
  swift_retain();
  uint64_t v760 = v47;
  swift_retain();
  swift_retain();
  id v62 = v756;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v777, (os_log_type_t)v772))
  {
    os_log_t v63 = v774;
    uint64_t v727 = v56;
    id v64 = (uint8_t *)sub_100375300();
    uint64_t v65 = swift_slowAlloc();
    *(void *)&v788[0] = 0;
    v725[1] = v65;
    v726 = v64;
    v797[0] = v65;
    *(_WORD *)id v64 = 1026;
    *(void *)&v798[0] = v64 + 2;
    *(void *)&long long v789 = sub_100301218;
    *((void *)&v789 + 1) = v775;
    uint64_t v66 = v784;
    sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v798, (uint64_t)v788, (uint64_t)v797);
    if (v66) {
      goto LABEL_221;
    }
    swift_release();
    *(void *)&long long v789 = sub_100301218;
    *((void *)&v789 + 1) = v776;
    sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v798, (uint64_t)v788, (uint64_t)v797);
    swift_release();
    *(void *)&long long v789 = sub_100301208;
    *((void *)&v789 + 1) = v760;
    sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v798, (uint64_t)v788, (uint64_t)v797);
    uint64_t v67 = v770;
    swift_release();
    *(void *)&long long v789 = sub_100301218;
    *((void *)&v789 + 1) = v67;
    sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v798, (uint64_t)v788, (uint64_t)v797);
    swift_release();
    *(void *)&long long v789 = sub_100301218;
    *((void *)&v789 + 1) = v63;
    sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v798, (uint64_t)v788, (uint64_t)v797);
    uint64_t v68 = v783;
    swift_release();
    *(void *)&long long v789 = sub_1002FFCEC;
    *((void *)&v789 + 1) = v782;
    sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v798, (uint64_t)v788, (uint64_t)v797);
    swift_release();
    *(void *)&long long v789 = sub_100301218;
    *((void *)&v789 + 1) = v62;
    sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v798, (uint64_t)v788, (uint64_t)v797);
    swift_release();
    *(void *)&long long v789 = sub_100301218;
    *((void *)&v789 + 1) = v59;
    sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v798, (uint64_t)v788, (uint64_t)v797);
    swift_release();
    *(void *)&long long v789 = sub_100301208;
    *((void *)&v789 + 1) = v771;
    sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v798, (uint64_t)v788, (uint64_t)v797);
    swift_release();
    *(void *)&long long v789 = sub_100301218;
    *((void *)&v789 + 1) = v61;
    sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v798, (uint64_t)v788, (uint64_t)v797);
    swift_release();
    *(void *)&long long v789 = sub_100301218;
    *((void *)&v789 + 1) = v60;
    sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v798, (uint64_t)v788, (uint64_t)v797);
    swift_release();
    *(void *)&long long v789 = sub_10030120C;
    *((void *)&v789 + 1) = v727;
    sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v798, (uint64_t)v788, (uint64_t)v797);
    unsigned __int8 v69 = 0;
    swift_release();
    id v70 = v777;
    _os_log_impl((void *)&_mh_execute_header, v777, (os_log_type_t)v772, "New client requesting a datapath for the service %s[%hhu] to %s[%hhu]", v726, 0x1Cu);
    swift_arrayDestroy();
    swift_slowDealloc();
    sub_10039F5FC();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    uint64_t v68 = v783;
    unsigned __int8 v69 = v784;
  }
  sub_1000136F4((uint64_t)v773, (uint64_t)&v789, &qword_1004862E8);
  if (v792 == 1)
  {
    sub_1000380B4((uint64_t)&v789, &qword_1004862E8);
  }
  else
  {
    unint64_t v83 = (char *)v789;
    unsigned int v84 = self;
    id v85 = [v84 interfaceWithProtocol:&OBJC_PROTOCOL___WiFiAwareDatapathXPC];
    uint64_t v86 = OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection;
    [*(id *)&v83[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection] setExportedInterface:v85];

    id v87 = [v84 interfaceWithProtocol:&OBJC_PROTOCOL___WiFiAwareDatapathXPCDelegate];
    [*(id *)&v83[v86] setRemoteObjectInterface:v87];
  }
  id v88 = v761;
  uint64_t p_type = (uint64_t)&stru_100479FF0.type;
  id v89 = [v761 serviceType];
  int v90 = v89 == (id)1;
  if (v89 == (id)2) {
    int v90 = 2;
  }
  LODWORD(v782) = v90;
  id v91 = [v88 internetSharingConfiguration];
  v784 = v69;
  if (!v91)
  {
    memset(v798, 0, 24);
    *(_OWORD *)((char *)&v798[1] + 8) = xmmword_1003B00B0;
    goto LABEL_18;
  }
  unint64_t v92 = v91;
  id v93 = [v91 interfaceName];
  if (v93)
  {
  }
  else if (([v92 automatic] & 1) == 0 {
         && ([v92 provider] & 1) == 0)
  }
  {

    memset(v798, 0, 40);
    goto LABEL_18;
  }
  id v95 = [v92 interfaceName];
  if (v95)
  {

LABEL_31:
    uint64_t v98 = swift_allocObject();
    uint64_t v99 = object;
    *(void *)(v98 + 16) = countAndFlagsBits;
    *(void *)(v98 + 24) = v99;
    uint64_t v100 = swift_allocObject();
    *(void *)(v100 + 16) = sub_1003014B4;
    *(void *)(v100 + 24) = v98;
    uint64_t v101 = swift_allocObject();
    *(unsigned char *)(v101 + 16) = v752;
    uint64_t v102 = (unsigned char *)swift_allocObject();
    v102[16] = (_BYTE)v763;
    v102[17] = v764;
    v102[18] = (_BYTE)v765;
    v102[19] = v779;
    v102[20] = (_BYTE)v778;
    v102[21] = (_BYTE)v780;
    uint64_t v103 = swift_allocObject();
    *(void *)(v103 + 16) = sub_1003007D4;
    *(void *)(v103 + 24) = v102;
    uint64_t v104 = swift_allocObject();
    *(unsigned char *)(v104 + 16) = (_BYTE)v781;
    uint64_t v105 = swift_allocObject();
    *(void *)(v105 + 16) = v92;
    v772 = (void *)swift_allocObject();
    v772[2] = v92;
    v773 = swift_allocObject();
    v773[2].Class isa = (Class)v92;
    uint64_t v106 = swift_allocObject();
    *(unsigned char *)(v106 + 16) = (_BYTE)v782;
    uint64_t v107 = swift_allocObject();
    v771 = v107;
    v107[2].Class isa = (Class)sub_1003008B8;
    v107[3].Class isa = (Class)v106;
    v759 = v92;
    v770 = (unsigned char *)Logger.logObject.getter();
    LODWORD(v763) = static os_log_type_t.error.getter();
    uint64_t countAndFlagsBits = (unsigned char *)swift_allocObject();
    countAndFlagsBits[16] = 32;
    v775 = (unsigned char *)swift_allocObject();
    v775[16] = 8;
    uint64_t v108 = swift_allocObject();
    *(void *)(v108 + 16) = sub_1003011F4;
    *(void *)(v108 + 24) = v100;
    uint64_t v109 = swift_allocObject();
    os_log_t v774 = v109;
    v109[2].Class isa = (Class)sub_1003011F0;
    v109[3].Class isa = (Class)v108;
    uint64_t v776 = swift_allocObject();
    *(unsigned char *)(v776 + 16) = 0;
    v778 = swift_allocObject();
    LOBYTE(v778[2].isa) = 1;
    uint64_t v110 = swift_allocObject();
    *(void *)(v110 + 16) = NANDriverCapabilities.mode.getter;
    *(void *)(v110 + 24) = v101;
    uint64_t v111 = swift_allocObject();
    v777 = v111;
    v111[2].Class isa = (Class)sub_1003014D8;
    v111[3].Class isa = (Class)v110;
    uint64_t v779 = swift_allocObject();
    *(unsigned char *)(v779 + 16) = 32;
    v781 = (unsigned char *)swift_allocObject();
    v781[16] = 8;
    uint64_t v112 = swift_allocObject();
    *(void *)(v112 + 16) = sub_1003011F8;
    *(void *)(v112 + 24) = v103;
    id v113 = (id)swift_allocObject();
    id v780 = v113;
    *((void *)v113 + 2) = sub_1003011F0;
    *((void *)v113 + 3) = v112;
    v782 = (unsigned char *)swift_allocObject();
    v782[16] = 0;
    v783 = (unsigned char *)swift_allocObject();
    v783[16] = 1;
    uint64_t v114 = swift_allocObject();
    *(void *)(v114 + 16) = j___s7CoreP2P21NANDriverCapabilitiesV4modeAA12NANAttributeO16DeviceCapabilityV13OperationModeVvg;
    *(void *)(v114 + 24) = v104;
    uint64_t v115 = swift_allocObject();
    v767 = (uint8_t *)v115;
    *(void *)(v115 + 16) = sub_1003014D8;
    *(void *)(v115 + 24) = v114;
    unint64_t v116 = (uint8_t *)swift_allocObject();
    v116[16] = 32;
    uint64_t v764 = swift_allocObject();
    *(unsigned char *)(v764 + 16) = 8;
    uint64_t v117 = swift_allocObject();
    *(void *)(v117 + 16) = sub_1003007F8;
    *(void *)(v117 + 24) = v105;
    uint64_t v118 = swift_allocObject();
    uint64_t v768 = v118;
    *(void *)(v118 + 16) = sub_1003011F0;
    *(void *)(v118 + 24) = v117;
    uint64_t v119 = swift_allocObject();
    *(unsigned char *)(v119 + 16) = 32;
    uint64_t v120 = v119;
    uint64_t v121 = swift_allocObject();
    *(unsigned char *)(v121 + 16) = 8;
    unint64_t v122 = v121;
    uint64_t v123 = swift_allocObject();
    id v124 = v772;
    *(void *)(v123 + 16) = sub_100300844;
    *(void *)(v123 + 24) = v124;
    uint64_t v125 = swift_allocObject();
    object = (uint8_t *)v125;
    *(void *)(v125 + 16) = sub_1003011F0;
    *(void *)(v125 + 24) = v123;
    uint64_t v126 = (unsigned char *)swift_allocObject();
    v126[16] = 32;
    uint64_t v760 = swift_allocObject();
    *(unsigned char *)(v760 + 16) = 8;
    uint64_t v127 = swift_allocObject();
    uint64_t v128 = v773;
    *(void *)(v127 + 16) = sub_1003008A0;
    *(void *)(v127 + 24) = v128;
    uint64_t v129 = swift_allocObject();
    uint64_t v762 = v129;
    *(void *)(v129 + 16) = sub_1003011F0;
    *(void *)(v129 + 24) = v127;
    v773 = swift_allocObject();
    LOBYTE(v773[2].isa) = 32;
    v772 = (void *)swift_allocObject();
    *((unsigned char *)v772 + 16) = 8;
    uint64_t v130 = swift_allocObject();
    uint64_t v131 = v771;
    *(void *)(v130 + 16) = sub_1003008C4;
    *(void *)(v130 + 24) = v131;
    unint64_t v132 = swift_allocObject();
    v771 = v132;
    v132[2].Class isa = (Class)sub_1003011F0;
    v132[3].Class isa = (Class)v130;
    id v761 = v126;
    v765 = v116;
    uint64_t v133 = swift_allocObject();
    *(_OWORD *)(v133 + 16) = xmmword_1003D6100;
    *(void *)(v133 + 32) = sub_100301218;
    *(void *)(v133 + 40) = countAndFlagsBits;
    *(void *)(v133 + 48) = sub_100301218;
    *(void *)(v133 + 56) = v775;
    *(void *)(v133 + 64) = sub_100301208;
    *(void *)(v133 + 72) = v774;
    *(void *)(v133 + 80) = sub_100301218;
    *(void *)(v133 + 88) = v776;
    *(void *)(v133 + 96) = sub_100301218;
    *(void *)(v133 + 104) = v778;
    *(void *)(v133 + 112) = sub_10030120C;
    *(void *)(v133 + 120) = v777;
    *(void *)(v133 + 128) = sub_100301218;
    *(void *)(v133 + 136) = v779;
    *(void *)(v133 + 144) = sub_100301218;
    *(void *)(v133 + 152) = v781;
    *(void *)(v133 + 160) = sub_100301208;
    *(void *)(v133 + 168) = v780;
    *(void *)(v133 + 176) = sub_100301218;
    *(void *)(v133 + 184) = v782;
    *(void *)(v133 + 192) = sub_100301218;
    *(void *)(v133 + 200) = v783;
    *(void *)(v133 + 208) = sub_10030120C;
    *(void *)(v133 + 216) = v767;
    *(void *)(v133 + 224) = sub_100301218;
    *(void *)(v133 + 232) = v116;
    *(void *)(v133 + 240) = sub_100301218;
    *(void *)(v133 + 248) = v764;
    *(void *)(v133 + 256) = sub_100301208;
    unint64_t v134 = object;
    *(void *)(v133 + 264) = v768;
    *(void *)(v133 + 272) = sub_100301218;
    *(void *)(v133 + 280) = v120;
    *(void *)(v133 + 288) = sub_100301218;
    *(void *)(v133 + 296) = v122;
    *(void *)(v133 + 304) = sub_100301208;
    *(void *)(v133 + 312) = v134;
    *(void *)(v133 + 320) = sub_100301218;
    *(void *)(v133 + 328) = v126;
    *(void *)(v133 + 336) = sub_100301218;
    *(void *)(v133 + 344) = v760;
    *(void *)(v133 + 352) = sub_100301208;
    uint64_t v135 = v762;
    *(void *)(v133 + 360) = v762;
    *(void *)(v133 + 368) = sub_100301218;
    *(void *)(v133 + 376) = v773;
    *(void *)(v133 + 384) = sub_100301218;
    *(void *)(v133 + 392) = v772;
    *(void *)(v133 + 400) = sub_100301208;
    *(void *)(v133 + 408) = v771;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    unint64_t v758 = v120;
    swift_retain();
    unint64_t v757 = v122;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t p_type = v135;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (!os_log_type_enabled((os_log_t)v770, (os_log_type_t)v763))
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();

      goto LABEL_35;
    }
    unint64_t v136 = (uint8_t *)sub_100375300();
    uint64_t v137 = swift_slowAlloc();
    v797[0] = 0;
    uint64_t v755 = v137;
    v756 = v136;
    v796[0] = v137;
    *(_WORD *)unint64_t v136 = 2050;
    *(void *)&v788[0] = v136 + 2;
    *(void *)&long long v789 = sub_100301218;
    *((void *)&v789 + 1) = countAndFlagsBits;
    uint64_t v138 = v784;
    sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v797, (uint64_t)v796);
    if (!v138)
    {
      swift_release();
      *(void *)&long long v789 = sub_100301218;
      *((void *)&v789 + 1) = v775;
      sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v797, (uint64_t)v796);
      uint64_t v139 = v764;
      uint64_t v140 = v779;
      uint64_t v141 = v776;
      swift_release();
      *(void *)&long long v789 = sub_100301208;
      *((void *)&v789 + 1) = v774;
      sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v797, (uint64_t)v796);
      uint64_t v142 = v765;
      unint64_t v143 = v782;
      swift_release();
      *(void *)&long long v789 = sub_100301218;
      *((void *)&v789 + 1) = v141;
      sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v797, (uint64_t)v796);
      uint64_t v144 = v783;
      swift_release();
      *(void *)&long long v789 = sub_100301218;
      *((void *)&v789 + 1) = v778;
      sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v797, (uint64_t)v796);
      swift_release();
      *(void *)&long long v789 = sub_10030120C;
      *((void *)&v789 + 1) = v777;
      sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v797, (uint64_t)v796);
      swift_release();
      *(void *)&long long v789 = sub_100301218;
      *((void *)&v789 + 1) = v140;
      sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v797, (uint64_t)v796);
      swift_release();
      *(void *)&long long v789 = sub_100301218;
      *((void *)&v789 + 1) = v781;
      sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v797, (uint64_t)v796);
      swift_release();
      *(void *)&long long v789 = sub_100301208;
      *((void *)&v789 + 1) = v780;
      sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v797, (uint64_t)v796);
      swift_release();
      *(void *)&long long v789 = sub_100301218;
      *((void *)&v789 + 1) = v143;
      sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v797, (uint64_t)v796);
      swift_release();
      *(void *)&long long v789 = sub_100301218;
      *((void *)&v789 + 1) = v144;
      sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v797, (uint64_t)v796);
      swift_release();
      *(void *)&long long v789 = sub_10030120C;
      *((void *)&v789 + 1) = v767;
      sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v797, (uint64_t)v796);
      swift_release();
      *(void *)&long long v789 = sub_100301218;
      *((void *)&v789 + 1) = v142;
      sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v797, (uint64_t)v796);
      swift_release();
      *(void *)&long long v789 = sub_100301218;
      *((void *)&v789 + 1) = v139;
      sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v797, (uint64_t)v796);
      uint64_t v145 = v760;
      swift_release();
      *(void *)&long long v789 = sub_100301208;
      *((void *)&v789 + 1) = v768;
      sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v797, (uint64_t)v796);
      unint64_t v146 = v757;
      uint64_t v147 = v758;
      swift_release();
      *(void *)&long long v789 = sub_100301218;
      *((void *)&v789 + 1) = v147;
      sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v797, (uint64_t)v796);
      swift_release();
      *(void *)&long long v789 = sub_100301218;
      *((void *)&v789 + 1) = v146;
      sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v797, (uint64_t)v796);
      id v148 = v761;
      swift_release();
      *(void *)&long long v789 = sub_100301208;
      *((void *)&v789 + 1) = object;
      sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v797, (uint64_t)v796);
      swift_release();
      *(void *)&long long v789 = sub_100301218;
      *((void *)&v789 + 1) = v148;
      sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v797, (uint64_t)v796);
      swift_release();
      *(void *)&long long v789 = sub_100301218;
      *((void *)&v789 + 1) = v145;
      sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v797, (uint64_t)v796);
      char v149 = v771;
      swift_release();
      *(void *)&long long v789 = sub_100301208;
      *((void *)&v789 + 1) = v762;
      sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v797, (uint64_t)v796);
      id v150 = v772;
      swift_release();
      *(void *)&long long v789 = sub_100301218;
      *((void *)&v789 + 1) = v773;
      sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v797, (uint64_t)v796);
      swift_release();
      *(void *)&long long v789 = sub_100301218;
      *((void *)&v789 + 1) = v150;
      sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v797, (uint64_t)v796);
      swift_release();
      *(void *)&long long v789 = sub_100301208;
      *((void *)&v789 + 1) = v149;
      sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v797, (uint64_t)v796);
      swift_release();
      id v151 = v770;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v770, (os_log_type_t)v763, "Cannot create new datapath %s[%hhu] to %s[%hhu] because of invalid internet sharing policy %s%s on interface: %s with service type: %s", v756, 0x44u);
      uint64_t p_type = v755;
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_10039F5FC();

LABEL_35:
      sub_10000F000();
      swift_allocError();
      *(_OWORD *)uint64_t v152 = xmmword_1003B2F00;
      *(unsigned char *)(v152 + 16) = 1;
      swift_willThrow();

      return p_type;
    }
    while (1)
    {
LABEL_221:
      swift_errorRelease();
      __break(1u);
      swift_unknownObjectRelease();
      swift_errorRelease();
      __break(1u);
LABEL_222:
      swift_errorRelease();
      __break(1u);
      sub_1000CAB20(v776, v754, v758, v755, (unint64_t)v756, 0, (uint64_t)v780);
LABEL_223:
      swift_errorRelease();
      __break(1u);
LABEL_224:
      sub_1000CAB20(v776, v754, v758, v755, (unint64_t)v756, 0, (uint64_t)v780);
      swift_errorRelease();
      __break(1u);
      sub_1000CAB20(v776, v754, v758, v755, (unint64_t)v756, 0, (uint64_t)v780);
    }
  }
  if (![v92 automatic]
    || ![v92 provider]
    || (sub_100042BAC(v782, 2u) & 1) == 0)
  {
    goto LABEL_31;
  }
  id v96 = *(void **)&v68[*(void *)(*(void *)v68 + 264)];
  *((void *)&v798[1] + 1) = type metadata accessor for LowLatencyInternetProviderPolicy();
  *(void *)&v798[2] = &off_10046F7E8;
  id v97 = v96;

  *(void *)&v798[0] = v97;
  unsigned __int8 v69 = v784;
LABEL_18:
  sub_1000136F4((uint64_t)v798, (uint64_t)&v789, (uint64_t *)&unk_100485B50);
  if (!v791)
  {
    sub_1001B7BFC((uint64_t)&v789);
    unint64_t v153 = *(NSObject **)&v68[*(void *)(*(void *)v68 + 280)];
    swift_unownedRetainStrong();
    unint64_t v154 = *(NSObject **)((char *)&v153->isa + *((void *)v153->isa + 57));
    swift_retain();
    swift_release();
    if (v154)
    {
LABEL_42:
      uint64_t v776 = (uint64_t)v153;
LABEL_43:
      unint64_t v153 = v154;
      goto LABEL_45;
    }
    swift_unownedRetainStrong();
    uint64_t v155 = sub_10035719C();
    if (!v69)
    {
LABEL_57:
      unint64_t v154 = v155;
      v784 = v69;
      uint64_t v776 = (uint64_t)v153;
      swift_release();
      goto LABEL_43;
    }
LABEL_38:
    sub_1000380B4((uint64_t)v798, (uint64_t *)&unk_100485B50);
    swift_release();
    swift_bridgeObjectRelease();
    return p_type;
  }
  if (v791 == (id)1) {
    sub_1000380B4((uint64_t)&v789, (uint64_t *)&unk_100485B50);
  }
  else {
    sub_1001B7BFC((uint64_t)&v789);
  }
  id v156 = [v88 serviceType];
  unint64_t v153 = *(NSObject **)&v68[*(void *)(*(void *)v68 + 280)];
  swift_unownedRetainStrong();
  if (v156 == (id)2)
  {
    unint64_t v154 = *(NSObject **)((char *)&v153->isa + *((void *)v153->isa + 56));
    swift_retain();
    swift_release();
    if (v154) {
      goto LABEL_42;
    }
    swift_unownedRetainStrong();
    uint64_t v185 = v784;
    uint64_t v155 = (uint64_t)sub_100357D68();
    unsigned __int8 v69 = v185;
    if (!v185) {
      goto LABEL_57;
    }
    goto LABEL_38;
  }
  uint64_t v776 = (uint64_t)v153;
LABEL_45:
  uint64_t v157 = (uint64_t *)&v68[qword_100485BC0];
  swift_beginAccess();
  uint64_t v158 = *v157;
  uint64_t v160 = v767;
  uint64_t v159 = v768;
  uint64_t v161 = (void *)_s17InitiatorInstanceCMa();
  uint64_t WitnessTable = swift_getWitnessTable();
  *(void *)&long long v789 = v160;
  v772 = v161;
  *((void *)&v789 + 1) = v161;
  uint64_t v790 = v159;
  id v791 = (id)WitnessTable;
  uint64_t v163 = (unsigned char *)type metadata accessor for NANDiscoveryEngine.ServiceSession();
  unint64_t v164 = sub_1001B8154();
  *(void *)&long long v789 = NANBitmap.Channel.operatingClass.getter(v158);
  __chkstk_darwin();
  os_log_t v774 = v164;
  v775 = v163;
  type metadata accessor for Dictionary.Values();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  unint64_t v165 = v784;
  Sequence.first(where:)();
  swift_bridgeObjectRelease();
  uint64_t p_type = *(void *)&v788[0];
  v777 = v153;
  v784 = v165;
  if (!*(void *)&v788[0]) {
    goto LABEL_64;
  }
  swift_bridgeObjectRelease();
  sub_1000136F4((uint64_t)v773, (uint64_t)&v789, &qword_1004862E8);
  if (v792)
  {
    sub_10003803C(&v789, v788);
    sub_100010BCC(&qword_1004862E0);
    char v166 = swift_dynamicCast();
    uint64_t v167 = v762;
    uint64_t v169 = v754;
    uint64_t v168 = v755;
    if (v166)
    {
      id v170 = 0;
      goto LABEL_50;
    }
    swift_bridgeObjectRelease();
    id v170 = 0;
LABEL_54:
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v184 = xmmword_1003B2F00;
    *(unsigned char *)(v184 + 16) = 1;
    swift_willThrow();
    swift_release();

    sub_1000380B4((uint64_t)v798, (uint64_t *)&unk_100485B50);
    return p_type;
  }
  id v170 = v789;
  sub_1002B9CB4();
  sub_100010BCC(&qword_1004862E0);
  char v171 = swift_dynamicCast();
  uint64_t v167 = v762;
  uint64_t v169 = v754;
  uint64_t v168 = v755;
  if ((v171 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_54;
  }
LABEL_50:
  uint64_t v172 = (unsigned char *)v796[0];
  uint64_t v173 = *(void (**)(uint64_t, char *, uint64_t))(v168 + 16);
  v173(v169, v753, v167);
  uint64_t v174 = swift_allocObject();
  v759 = (unsigned char *)p_type;
  swift_unknownObjectWeakInit();
  v770 = v172;
  v771 = v170;
  uint64_t v760 = v174;
  if (v170)
  {
    uint64_t v175 = v170;
    unint64_t v758 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v176 = v748;
    v173((uint64_t)v748, (char *)v169, v167);
    unint64_t v177 = (*(unsigned __int8 *)(v168 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v168 + 80);
    unint64_t v178 = (v747 + v177 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v179 = (char *)swift_allocObject();
    uint64_t v180 = v768;
    *((void *)v179 + 2) = v767;
    *((void *)v179 + 3) = v180;
    uint64_t v181 = v758;
    *((void *)v179 + 4) = v760;
    *((void *)v179 + 5) = v181;
    uint64_t v182 = v176;
    uint64_t v172 = v770;
    (*(void (**)(char *, char *, uint64_t))(v168 + 32))(&v179[v177], v182, v762);
    *(void *)&v179[v178] = v172;
    swift_unknownObjectRetain_n();
    unint64_t v183 = v175;
    swift_retain();
    swift_retain();
    sub_1002B9280((uint64_t)sub_100300670, (uint64_t)v179);
    swift_release();
  }
  else
  {
    swift_unknownObjectRetain();
  }
  char v186 = v784;
  id v187 = v759;
  if ((sub_1002D6294(v172, (uint64_t)v777) & 1) == 0)
  {
    (*(void (**)(uint64_t, uint64_t))(v755 + 8))(v754, v762);
    swift_release();

    swift_unknownObjectRelease_n();
LABEL_64:
    BOOL v198 = v783;
    uint64_t v199 = sub_1002E42DC();
    uint64_t v200 = v776;
    swift_unownedRetainStrong();
    uint64_t v201 = v200 + *(void *)(*(void *)v200 + 656);
    swift_beginAccess();
    uint64_t v202 = v750;
    sub_100300CF4(v201, v750, (uint64_t (*)(void))type metadata accessor for NANDriverCapabilities);
    swift_release();
    uint64_t v203 = *(void *)(v202 + *(int *)(v751 + 48));
    sub_100300D5C(v202, (uint64_t (*)(void))type metadata accessor for NANDriverCapabilities);
    if (v199 >= v203)
    {
      uint64_t v216 = swift_allocObject();
      id v217 = object;
      *(void *)(v216 + 16) = countAndFlagsBits;
      *(void *)(v216 + 24) = v217;
      uint64_t v218 = swift_allocObject();
      *(void *)(v218 + 16) = sub_1003014B4;
      *(void *)(v218 + 24) = v216;
      uint64_t v219 = swift_allocObject();
      *(unsigned char *)(v219 + 16) = v752;
      char v220 = (unsigned char *)swift_allocObject();
      v220[16] = (_BYTE)v763;
      v220[17] = v764;
      v220[18] = (_BYTE)v765;
      v220[19] = v779;
      v220[20] = (_BYTE)v778;
      v220[21] = (_BYTE)v780;
      uint64_t v221 = swift_allocObject();
      *(void *)(v221 + 16) = sub_1003014D4;
      *(void *)(v221 + 24) = v220;
      uint64_t v779 = swift_allocObject();
      *(unsigned char *)(v779 + 16) = (_BYTE)v781;
      swift_retain();
      v778 = Logger.logObject.getter();
      LODWORD(v772) = static os_log_type_t.error.getter();
      v773 = swift_allocObject();
      LOBYTE(v773[2].isa) = 32;
      v781 = (unsigned char *)swift_allocObject();
      v781[16] = 8;
      uint64_t v222 = swift_allocObject();
      *(void *)(v222 + 16) = sub_1003011F4;
      *(void *)(v222 + 24) = v218;
      id v223 = (id)swift_allocObject();
      id v780 = v223;
      *((void *)v223 + 2) = sub_1003011F0;
      *((void *)v223 + 3) = v222;
      os_log_t v774 = (os_log_t)swift_allocObject();
      LOBYTE(v774[2].isa) = 0;
      uint64_t v224 = swift_allocObject();
      id v225 = v198;
      *(unsigned char *)(v224 + 16) = 1;
      uint64_t v226 = swift_allocObject();
      *(void *)(v226 + 16) = j___s7CoreP2P21NANDriverCapabilitiesV4modeAA12NANAttributeO16DeviceCapabilityV13OperationModeVvg;
      *(void *)(v226 + 24) = v219;
      uint64_t v227 = (void *)swift_allocObject();
      v227[2] = sub_1003014D8;
      v227[3] = v226;
      uint64_t v228 = v227;
      v775 = v227;
      uint64_t v229 = swift_allocObject();
      *(unsigned char *)(v229 + 16) = 32;
      uint64_t v230 = (unsigned char *)v229;
      v782 = (unsigned char *)swift_allocObject();
      v782[16] = 8;
      uint64_t v231 = swift_allocObject();
      *(void *)(v231 + 16) = sub_1003011F8;
      *(void *)(v231 + 24) = v221;
      uint64_t v232 = swift_allocObject();
      *(void *)(v232 + 16) = sub_1003011F0;
      *(void *)(v232 + 24) = v231;
      id v233 = (uint8_t *)v232;
      v771 = swift_allocObject();
      LOBYTE(v771[2].isa) = 0;
      v770 = (unsigned char *)swift_allocObject();
      v770[16] = 1;
      uint64_t v234 = swift_allocObject();
      uint64_t v235 = v779;
      *(void *)(v234 + 16) = j___s7CoreP2P21NANDriverCapabilitiesV4modeAA12NANAttributeO16DeviceCapabilityV13OperationModeVvg;
      *(void *)(v234 + 24) = v235;
      uint64_t v236 = swift_allocObject();
      *(void *)(v236 + 16) = sub_1003014D8;
      *(void *)(v236 + 24) = v234;
      uint64_t v237 = v236;
      object = (uint8_t *)swift_allocObject();
      object[16] = 0;
      uint64_t v779 = swift_allocObject();
      *(unsigned char *)(v779 + 16) = 8;
      uint64_t v238 = swift_allocObject();
      *(void *)(v238 + 16) = sub_1002FFDA0;
      *(void *)(v238 + 24) = v225;
      unint64_t v239 = (void *)swift_allocObject();
      v239[2] = sub_1002FFE44;
      v239[3] = v238;
      uint64_t v776 = v224;
      uint64_t v240 = swift_allocObject();
      *(_OWORD *)(v240 + 16) = xmmword_1003D6110;
      *(void *)(v240 + 32) = sub_100301218;
      os_log_t v241 = v774;
      *(void *)(v240 + 40) = v773;
      *(void *)(v240 + 48) = sub_100301218;
      *(void *)(v240 + 56) = v781;
      *(void *)(v240 + 64) = sub_100301208;
      *(void *)(v240 + 72) = v780;
      *(void *)(v240 + 80) = sub_100301218;
      *(void *)(v240 + 88) = v241;
      *(void *)(v240 + 96) = sub_100301218;
      *(void *)(v240 + 104) = v224;
      *(void *)(v240 + 112) = sub_10030120C;
      *(void *)(v240 + 120) = v228;
      *(void *)(v240 + 128) = sub_100301218;
      unint64_t v242 = v230;
      *(void *)(v240 + 136) = v230;
      *(void *)(v240 + 144) = sub_100301218;
      *(void *)(v240 + 152) = v782;
      *(void *)(v240 + 160) = sub_100301208;
      uint64_t v243 = v233;
      *(void *)(v240 + 168) = v233;
      *(void *)(v240 + 176) = sub_100301218;
      uint64_t v245 = v770;
      char v244 = v771;
      *(void *)(v240 + 184) = v771;
      *(void *)(v240 + 192) = sub_100301218;
      *(void *)(v240 + 200) = v245;
      *(void *)(v240 + 208) = sub_10030120C;
      uint64_t p_type = v237;
      *(void *)(v240 + 216) = v237;
      *(void *)(v240 + 224) = sub_100301218;
      uint64_t v246 = object;
      *(void *)(v240 + 232) = object;
      *(void *)(v240 + 240) = sub_100301218;
      *(void *)(v240 + 248) = v779;
      *(void *)(v240 + 256) = sub_1002FFE4C;
      *(void *)(v240 + 264) = v239;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v778, (os_log_type_t)v772))
      {
        uint64_t countAndFlagsBits = v242;
        v767 = v243;
        unint64_t v247 = v244;
        uint64_t v768 = p_type;
        char v248 = v245;
        uint64_t v249 = v246;
        v783 = v239;
        uint64_t v250 = (uint8_t *)sub_100375300();
        uint64_t v251 = swift_slowAlloc();
        v795[0] = 0;
        uint64_t v764 = v251;
        v765 = v250;
        v794[0] = v251;
        *(_WORD *)uint64_t v250 = 1282;
        *(void *)&v788[0] = v250 + 2;
        *(void *)&long long v789 = sub_100301218;
        *((void *)&v789 + 1) = v773;
        int v252 = v784;
        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v795, (uint64_t)v794);
        if (v252) {
          goto LABEL_219;
        }
        swift_release();
        *(void *)&long long v789 = sub_100301218;
        *((void *)&v789 + 1) = v781;
        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v795, (uint64_t)v794);
        id v253 = countAndFlagsBits;
        id v254 = v780;
        swift_release();
        *(void *)&long long v789 = sub_100301208;
        *((void *)&v789 + 1) = v254;
        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v795, (uint64_t)v794);
        uint64_t v255 = v776;
        os_log_t v256 = v774;
        swift_release();
        *(void *)&long long v789 = sub_100301218;
        *((void *)&v789 + 1) = v256;
        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v795, (uint64_t)v794);
        swift_release();
        *(void *)&long long v789 = sub_100301218;
        *((void *)&v789 + 1) = v255;
        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v795, (uint64_t)v794);
        unint64_t v257 = v247;
        swift_release();
        *(void *)&long long v789 = sub_10030120C;
        *((void *)&v789 + 1) = v775;
        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v795, (uint64_t)v794);
        uint64_t v258 = v782;
        swift_release();
        *(void *)&long long v789 = sub_100301218;
        *((void *)&v789 + 1) = v253;
        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v795, (uint64_t)v794);
        swift_release();
        *(void *)&long long v789 = sub_100301218;
        *((void *)&v789 + 1) = v258;
        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v795, (uint64_t)v794);
        swift_release();
        *(void *)&long long v789 = sub_100301208;
        *((void *)&v789 + 1) = v767;
        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v795, (uint64_t)v794);
        swift_release();
        *(void *)&long long v789 = sub_100301218;
        *((void *)&v789 + 1) = v257;
        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v795, (uint64_t)v794);
        swift_release();
        *(void *)&long long v789 = sub_100301218;
        *((void *)&v789 + 1) = v248;
        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v795, (uint64_t)v794);
        swift_release();
        *(void *)&long long v789 = sub_10030120C;
        *((void *)&v789 + 1) = v768;
        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v795, (uint64_t)v794);
        swift_release();
        *(void *)&long long v789 = sub_100301218;
        *((void *)&v789 + 1) = v249;
        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v795, (uint64_t)v794);
        swift_release();
        *(void *)&long long v789 = sub_100301218;
        *((void *)&v789 + 1) = v779;
        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v795, (uint64_t)v794);
        swift_release();
        *(void *)&long long v789 = sub_1002FFE4C;
        *((void *)&v789 + 1) = v783;
        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v795, (uint64_t)v794);
        swift_release();
        long long v259 = v778;
        _os_log_impl((void *)&_mh_execute_header, v778, (os_log_type_t)v772, "Cannot create new datapath %s[%hhu] to %s[%hhu] because already exceeded maximum active count %ld", v765, 0x26u);
        uint64_t p_type = v764;
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_10039F5FC();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
      sub_10000F000();
      swift_allocError();
      *(_OWORD *)uint64_t v260 = xmmword_1003BDA60;
      *(unsigned char *)(v260 + 16) = 1;
      swift_willThrow();
      swift_release();
LABEL_122:
      sub_1000380B4((uint64_t)v798, (uint64_t *)&unk_100485B50);
      return p_type;
    }
    swift_beginAccess();
    LOBYTE(v794[0]) = v752;
    unint64_t v205 = v767;
    uint64_t v204 = v768;
    uint64_t v206 = _s8InstanceCMa();
    uint64_t v207 = swift_getWitnessTable();
    *(void *)&long long v789 = v205;
    *((void *)&v789 + 1) = v206;
    uint64_t v790 = v204;
    id v791 = (id)v207;
    type metadata accessor for NANDiscoveryEngine.ServiceSession();
    Dictionary.subscript.getter();
    unint64_t v208 = (char *)v795[0];
    if (v795[0])
    {
      swift_endAccess();
      sub_100300B70(v208);
      swift_bridgeObjectRelease();
      sub_1002FF540(v208);
      unsigned __int8 v210 = v779;
      unsigned __int8 v209 = v780;
      uint64_t v211 = object;
      id v212 = countAndFlagsBits;
      if (v208[qword_100488978] == 1)
      {
        v775 = v208;
        char v213 = &v208[qword_100488970];
        swift_beginAccess();
        Swift::String v214 = String.lowercased()();
        Swift::String v215 = String.lowercased()();
        if (v214._countAndFlagsBits == v215._countAndFlagsBits && v214._object == v215._object)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v305 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v305 & 1) == 0)
          {
            uint64_t v354 = (unsigned char *)swift_allocObject();
            v354[16] = (_BYTE)v763;
            v354[17] = v764;
            v354[18] = (_BYTE)v765;
            v354[19] = v210;
            v354[20] = (_BYTE)v778;
            v354[21] = v209;
            uint64_t v355 = swift_allocObject();
            *(void *)(v355 + 16) = sub_1003014D4;
            *(void *)(v355 + 24) = v354;
            uint64_t v356 = swift_allocObject();
            *(unsigned char *)(v356 + 16) = (_BYTE)v781;
            uint64_t v357 = swift_allocObject();
            id v358 = v775;
            *(void *)(v357 + 16) = v775;
            uint64_t v359 = swift_allocObject();
            uint64_t v360 = object;
            *(void *)(v359 + 16) = countAndFlagsBits;
            *(void *)(v359 + 24) = v360;
            uint64_t v361 = swift_allocObject();
            *(void *)(v361 + 16) = sub_1003014B4;
            *(void *)(v361 + 24) = v359;
            v772 = v358;
            v782 = (unsigned char *)Logger.logObject.getter();
            LODWORD(v775) = static os_log_type_t.error.getter();
            uint64_t v779 = swift_allocObject();
            *(unsigned char *)(v779 + 16) = 32;
            v781 = (unsigned char *)swift_allocObject();
            v781[16] = 8;
            uint64_t v362 = swift_allocObject();
            *(void *)(v362 + 16) = sub_1003011F8;
            *(void *)(v362 + 24) = v355;
            v363 = (void *)swift_allocObject();
            v363[2] = sub_1003011F0;
            v363[3] = v362;
            uint64_t v364 = v363;
            id v780 = v363;
            uint64_t v365 = swift_allocObject();
            LOBYTE(v365[2].isa) = 0;
            uint64_t v366 = swift_allocObject();
            LOBYTE(v366[2].isa) = 1;
            uint64_t v367 = swift_allocObject();
            *(void *)(v367 + 16) = j___s7CoreP2P21NANDriverCapabilitiesV4modeAA12NANAttributeO16DeviceCapabilityV13OperationModeVvg;
            *(void *)(v367 + 24) = v356;
            uint64_t v368 = swift_allocObject();
            v773 = v368;
            *(void *)(v368 + 16) = sub_1003014D8;
            *(void *)(v368 + 24) = v367;
            v783 = (unsigned char *)swift_allocObject();
            v783[16] = 64;
            v770 = (unsigned char *)swift_allocObject();
            v770[16] = 8;
            uint64_t v369 = swift_allocObject();
            *(void *)(v369 + 16) = sub_1003014B8;
            *(void *)(v369 + 24) = v357;
            uint64_t v370 = swift_allocObject();
            *(void *)(v370 + 16) = sub_1002FFF84;
            *(void *)(v370 + 24) = v369;
            os_log_t v774 = (os_log_t)swift_allocObject();
            LOBYTE(v774[2].isa) = 32;
            uint64_t v776 = swift_allocObject();
            *(unsigned char *)(v776 + 16) = 8;
            uint64_t v371 = swift_allocObject();
            *(void *)(v371 + 16) = sub_1003011F4;
            *(void *)(v371 + 24) = v361;
            uint64_t v372 = swift_allocObject();
            *(void *)(v372 + 16) = sub_1003011F0;
            *(void *)(v372 + 24) = v371;
            v778 = v365;
            uint64_t v373 = swift_allocObject();
            *(_OWORD *)(v373 + 16) = v730;
            *(void *)(v373 + 32) = sub_100301218;
            *(void *)(v373 + 40) = v779;
            *(void *)(v373 + 48) = sub_100301218;
            *(void *)(v373 + 56) = v781;
            *(void *)(v373 + 64) = sub_100301208;
            *(void *)(v373 + 72) = v364;
            *(void *)(v373 + 80) = sub_100301218;
            *(void *)(v373 + 88) = v365;
            *(void *)(v373 + 96) = sub_100301218;
            *(void *)(v373 + 104) = v366;
            *(void *)(v373 + 112) = sub_10030120C;
            os_log_t v374 = v774;
            *(void *)(v373 + 120) = v773;
            *(void *)(v373 + 128) = sub_100301218;
            *(void *)(v373 + 136) = v783;
            *(void *)(v373 + 144) = sub_100301218;
            unint64_t v375 = v770;
            *(void *)(v373 + 152) = v770;
            *(void *)(v373 + 160) = sub_1002FFF8C;
            *(void *)(v373 + 168) = v370;
            *(void *)(v373 + 176) = sub_100301218;
            *(void *)(v373 + 184) = v374;
            *(void *)(v373 + 192) = sub_100301218;
            *(void *)(v373 + 200) = v776;
            *(void *)(v373 + 208) = sub_100301208;
            *(void *)(v373 + 216) = v372;
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            v771 = v366;
            swift_retain();
            swift_retain();
            uint64_t v376 = v783;
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_bridgeObjectRelease();
            if (os_log_type_enabled((os_log_t)v782, (os_log_type_t)v775))
            {
              uint64_t v768 = v372;
              object = (uint8_t *)v370;
              uint64_t v377 = v778;
              uint64_t v378 = v771;
              uint64_t v379 = (uint8_t *)sub_100375300();
              uint64_t v380 = (uint8_t *)swift_slowAlloc();
              uint64_t v381 = (unsigned char *)swift_slowAlloc();
              v765 = v380;
              uint64_t countAndFlagsBits = v381;
              v794[0] = v380;
              v787[0] = v381;
              v767 = v379;
              *(_WORD *)uint64_t v379 = 1026;
              *(void *)&v788[0] = v379 + 2;
              *(void *)&long long v789 = sub_100301218;
              *((void *)&v789 + 1) = v779;
              uint64_t v382 = v784;
              sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v794, (uint64_t)v787);
              if (v382) {
                goto LABEL_222;
              }
              swift_release();
              *(void *)&long long v789 = sub_100301218;
              *((void *)&v789 + 1) = v781;
              sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v794, (uint64_t)v787);
              swift_release();
              *(void *)&long long v789 = sub_100301208;
              *((void *)&v789 + 1) = v780;
              sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v794, (uint64_t)v787);
              swift_release();
              *(void *)&long long v789 = sub_100301218;
              *((void *)&v789 + 1) = v377;
              sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v794, (uint64_t)v787);
              swift_release();
              *(void *)&long long v789 = sub_100301218;
              *((void *)&v789 + 1) = v378;
              sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v794, (uint64_t)v787);
              uint64_t p_type = (uint64_t)v777;
              swift_release();
              *(void *)&long long v789 = sub_10030120C;
              *((void *)&v789 + 1) = v773;
              sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v794, (uint64_t)v787);
              swift_release();
              *(void *)&long long v789 = sub_100301218;
              *((void *)&v789 + 1) = v376;
              sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v794, (uint64_t)v787);
              swift_release();
              *(void *)&long long v789 = sub_100301218;
              *((void *)&v789 + 1) = v375;
              sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v794, (uint64_t)v787);
              uint64_t v383 = v776;
              swift_release();
              *(void *)&long long v789 = sub_1002FFF8C;
              *((void *)&v789 + 1) = object;
              sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v794, (uint64_t)v787);
              swift_release();
              *(void *)&long long v789 = sub_100301218;
              *((void *)&v789 + 1) = v774;
              sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v794, (uint64_t)v787);
              swift_release();
              *(void *)&long long v789 = sub_100301218;
              *((void *)&v789 + 1) = v383;
              sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v794, (uint64_t)v787);
              swift_release();
              *(void *)&long long v789 = sub_100301208;
              *((void *)&v789 + 1) = v768;
              sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v794, (uint64_t)v787);
              swift_release();
              id v384 = v782;
              _os_log_impl((void *)&_mh_execute_header, (os_log_t)v782, (os_log_type_t)v775, "Cannot create new datapath to %s[%hhu] because %@ does not match the service name provided for the datapath: %s", v767, 0x23u);
              sub_100010BCC(&qword_10047CC30);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_arrayDestroy();
              swift_slowDealloc();
              sub_10039F5FC();
            }
            else
            {
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();

              uint64_t p_type = (uint64_t)v777;
            }
            id v450 = v772;
            sub_10000F000();
            swift_allocError();
            *(_OWORD *)uint64_t v452 = xmmword_1003D4F50;
            *(unsigned char *)(v452 + 16) = 1;
            swift_willThrow();
            goto LABEL_121;
          }
        }
        os_log_t v774 = v213;
        unint64_t v306 = (uint64_t *)&v775[qword_100488990];
        swift_beginAccess();
        uint64_t v307 = *v306;
        uint64_t v308 = v763;
        char v309 = v764;
        uint64_t v310 = BYTE4(v763);
        unint64_t v311 = ((unint64_t)BYTE4(v763) << 40) & 0xFF00FF00FFFFFFFFLL | ((unint64_t)v209 << 48) | ((unint64_t)v210 << 32);
        unsigned __int8 v312 = v210;
        char v313 = (char)v765;
        uint64_t v314 = (v311 & 0xFFFFFFFF000000FFLL | ((unint64_t)v765 << 24) | ((unint64_t)v764 << 16) | ((unint64_t)v763 << 8) | v781);
        swift_bridgeObjectRetain();
        v771 = v314;
        BOOL v315 = sub_100374F98((unint64_t)v314, v307);
        swift_bridgeObjectRelease();
        if (!v315)
        {
          swift_bridgeObjectRelease();
          unsigned __int8 v326 = v312;
          uint64_t v327 = swift_allocObject();
          id v328 = v775;
          *(void *)(v327 + 16) = v775;
          uint64_t v329 = (unsigned char *)swift_allocObject();
          v329[16] = (_BYTE)v308;
          v329[17] = v309;
          v329[18] = v313;
          v329[19] = v326;
          v329[20] = (_BYTE)v778;
          v329[21] = v209;
          uint64_t v330 = swift_allocObject();
          *(void *)(v330 + 16) = sub_1003014D4;
          *(void *)(v330 + 24) = v329;
          v778 = swift_allocObject();
          LOBYTE(v778[2].isa) = (_BYTE)v781;
          uint64_t v779 = (uint64_t)v328;
          v783 = (unsigned char *)Logger.logObject.getter();
          LODWORD(v781) = static os_log_type_t.error.getter();
          uint64_t v331 = swift_allocObject();
          *(unsigned char *)(v331 + 16) = 64;
          uint64_t v332 = swift_allocObject();
          *(unsigned char *)(v332 + 16) = 8;
          uint64_t v333 = v332;
          uint64_t v334 = swift_allocObject();
          *(void *)(v334 + 16) = sub_1003014B8;
          *(void *)(v334 + 24) = v327;
          uint64_t v335 = (void *)swift_allocObject();
          v335[2] = sub_1003011FC;
          v335[3] = v334;
          v336 = v335;
          v782 = v335;
          v775 = (unsigned char *)swift_allocObject();
          v775[16] = 32;
          id v780 = (id)swift_allocObject();
          *((unsigned char *)v780 + 16) = 8;
          uint64_t v337 = swift_allocObject();
          *(void *)(v337 + 16) = sub_1003011F8;
          *(void *)(v337 + 24) = v330;
          uint64_t v338 = (void *)swift_allocObject();
          v338[2] = sub_1003011F0;
          v338[3] = v337;
          uint64_t v339 = swift_allocObject();
          *(unsigned char *)(v339 + 16) = 0;
          uint64_t v340 = swift_allocObject();
          *(unsigned char *)(v340 + 16) = 1;
          uint64_t v341 = swift_allocObject();
          uint64_t v342 = v778;
          *(void *)(v341 + 16) = j___s7CoreP2P21NANDriverCapabilitiesV4modeAA12NANAttributeO16DeviceCapabilityV13OperationModeVvg;
          *(void *)(v341 + 24) = v342;
          uint64_t v343 = swift_allocObject();
          v343[2].Class isa = (Class)sub_1003014D8;
          v343[3].Class isa = (Class)v341;
          uint64_t v344 = swift_allocObject();
          *(_OWORD *)(v344 + 16) = xmmword_1003D6120;
          *(void *)(v344 + 32) = sub_100301218;
          *(void *)(v344 + 40) = v331;
          *(void *)(v344 + 48) = sub_100301218;
          *(void *)(v344 + 56) = v333;
          os_log_type_t v345 = v333;
          *(void *)(v344 + 64) = sub_100301210;
          *(void *)(v344 + 72) = v336;
          os_log_type_t v346 = v775;
          *(void *)(v344 + 80) = sub_100301218;
          *(void *)(v344 + 88) = v346;
          id v347 = v780;
          *(void *)(v344 + 96) = sub_100301218;
          *(void *)(v344 + 104) = v347;
          *(void *)(v344 + 112) = sub_100301208;
          *(void *)(v344 + 120) = v338;
          *(void *)(v344 + 128) = sub_100301218;
          *(void *)(v344 + 136) = v339;
          *(void *)(v344 + 144) = sub_100301218;
          *(void *)(v344 + 152) = v340;
          *(void *)(v344 + 160) = sub_10030120C;
          *(void *)(v344 + 168) = v343;
          uint64_t v776 = v331;
          uint64_t p_type = v339;
          swift_retain();
          v778 = v345;
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_bridgeObjectRelease();
          if (os_log_type_enabled((os_log_t)v783, (os_log_type_t)v781))
          {
            uint64_t v348 = v778;
            v771 = v343;
            v772 = v338;
            v773 = p_type;
            os_log_t v774 = (os_log_t)v340;
            unint64_t v349 = (uint8_t *)sub_100375300();
            unint64_t v350 = (uint8_t *)swift_slowAlloc();
            uint64_t v351 = (unsigned char *)swift_slowAlloc();
            object = v350;
            v770 = v351;
            v787[0] = v350;
            v786[0] = v351;
            *(_WORD *)unint64_t v349 = 770;
            *(void *)&v788[0] = v349 + 2;
            *(void *)&long long v789 = sub_100301218;
            *((void *)&v789 + 1) = v776;
            uint64_t v352 = v784;
            sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v787, (uint64_t)v786);
            if (v352) {
              goto LABEL_223;
            }
            v784 = v349;
            swift_release();
            *(void *)&long long v789 = sub_100301218;
            *((void *)&v789 + 1) = v348;
            sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v787, (uint64_t)v786);
            swift_release();
            *(void *)&long long v789 = sub_100301210;
            *((void *)&v789 + 1) = v782;
            sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v787, (uint64_t)v786);
            swift_release();
            *(void *)&long long v789 = sub_100301218;
            *((void *)&v789 + 1) = v346;
            sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v787, (uint64_t)v786);
            swift_release();
            *(void *)&long long v789 = sub_100301218;
            *((void *)&v789 + 1) = v780;
            sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v787, (uint64_t)v786);
            swift_release();
            *(void *)&long long v789 = sub_100301208;
            *((void *)&v789 + 1) = v772;
            sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v787, (uint64_t)v786);
            swift_release();
            *(void *)&long long v789 = sub_100301218;
            *((void *)&v789 + 1) = v773;
            sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v787, (uint64_t)v786);
            swift_release();
            *(void *)&long long v789 = sub_100301218;
            *((void *)&v789 + 1) = v774;
            sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v787, (uint64_t)v786);
            swift_release();
            *(void *)&long long v789 = sub_10030120C;
            *((void *)&v789 + 1) = v771;
            sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v787, (uint64_t)v786);
            swift_release();
            id v353 = v783;
            _os_log_impl((void *)&_mh_execute_header, (os_log_t)v783, (os_log_type_t)v781, "Cannot create new datapath because %@ has not discovered %s[%hhu]", v784, 0x19u);
            sub_100010BCC(&qword_10047CC30);
            swift_arrayDestroy();
            swift_slowDealloc();
            uint64_t p_type = (uint64_t)v770;
            swift_arrayDestroy();
            swift_slowDealloc();
            sub_10039F5FC();
          }
          else
          {
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
          }
          sub_10000F000();
          swift_allocError();
          *(_OWORD *)uint64_t v410 = xmmword_1003D4F50;
          *(unsigned char *)(v410 + 16) = 1;
          swift_willThrow();
          swift_release();
          unsigned __int8 v411 = (uint8_t *)v779;
          goto LABEL_110;
        }
        swift_unownedRetainStrong();
        unint64_t v316 = (v310 << 32) | ((unint64_t)BYTE5(v308) << 40) | ((unint64_t)BYTE3(v308) << 24) | ((unint64_t)BYTE2(v308) << 16) | ((unint64_t)BYTE1(v308) << 8) | v308;
        unsigned __int8 v317 = v781;
        uint64_t v318 = v743;
        sub_10035665C(v316, v743);
        swift_release();
        uint64_t v319 = v744;
        uint64_t v320 = (uint64_t)countAndFlagsBits;
        sub_1002A6C50(v317, (uint64_t)v744);
        sub_100300D5C(v318, type metadata accessor for NANPeer);
        uint64_t v321 = type metadata accessor for NANPeer.Service(0);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v321 - 8) + 48))(v319, 1, v321) == 1)
        {
          sub_1000380B4((uint64_t)v319, (uint64_t *)&unk_100486F40);
          int v322 = 0;
          os_log_type_t v323 = 0;
          uint64_t v762 = 0;
          v770 = 0;
          v759 = 0;
          uint64_t v760 = 5;
          uint64_t v324 = v742;
          os_log_t v325 = v774;
          goto LABEL_112;
        }
        os_log_type_t v323 = (void *)v319[10];
        uint64_t v386 = v319[12];
        uint64_t v385 = v319[13];
        unint64_t v387 = (unsigned char *)v319[14];
        v759 = (unsigned char *)v319[11];
        uint64_t v762 = v385;
        v770 = v387;
        sub_1002A94C8((uint64_t)v323, (uint64_t)v759, v386, v385, (unint64_t)v387);
        sub_100300D5C((uint64_t)v319, type metadata accessor for NANPeer.Service);
        uint64_t v760 = v386;
        uint64_t v388 = v386;
        os_log_t v325 = v774;
        if (v386 == 5
          || (*(unsigned __int16 *)NANAttribute.ServiceDescriptorExtension.Control.securityRequired.unsafeMutableAddressor() & ~(v323 >> 16)) != 0)
        {
          int v322 = 0;
          uint64_t v324 = v742;
          goto LABEL_112;
        }
        v772 = v323;
        id v389 = [v761 pmk];
        unint64_t v757 = v316;
        if (v389)
        {
          uint64_t v390 = v389;
          uint64_t v391 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v393 = v392;

          if (v393 >> 60 != 15)
          {
            sub_100013D44(v391, v393);
            uint64_t v394 = NANPMK.init(pmk:)(v391, v393);
            unint64_t v396 = v395;
            sub_10000C95C(v391, v393);
            if (v396 >> 60 == 15) {
              goto LABEL_140;
            }
            id v397 = [v761 pmkID];
            if (v397)
            {
              v398 = v397;
              uint64_t v399 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v401 = v400;

              if (v401 >> 60 != 15)
              {
                sub_100013D44(v399, v401);
                uint64_t v755 = NANPMK.ID.init(_:)(v399, v401);
                uint64_t v403 = v402;
                sub_10000C95C(v399, v401);
                v756 = v403;
                if ((unint64_t)v403 >> 60 != 15)
                {
                  uint64_t v754 = v394;
                  unint64_t v758 = v396;
                  uint64_t v404 = v776;
                  swift_unownedRetainStrong();
                  uint64_t v405 = v404 + *(void *)(*(void *)v404 + 656);
                  swift_beginAccess();
                  uint64_t v406 = v405;
                  uint64_t v407 = v731;
                  sub_100300CF4(v406, v731, (uint64_t (*)(void))type metadata accessor for NANDriverCapabilities);
                  swift_release();
                  uint64_t v408 = *(void *)(v407 + 8);
                  swift_bridgeObjectRetain();
                  sub_100300D5C(v407, (uint64_t (*)(void))type metadata accessor for NANDriverCapabilities);
                  *(void *)&long long v789 = v408;
                  uint64_t v409 = sub_100010BCC((uint64_t *)&unk_1004852A0);
                  sub_10000F9CC((unint64_t *)&qword_100486310, (uint64_t *)&unk_1004852A0);
                  uint64_t v751 = Collection<>.strongestSupportedPublicKeySuite.getter(v409);
                  LODWORD(v407) = v751;
                  swift_bridgeObjectRelease();
                  if (v407 != 8)
                  {
                    swift_beginAccess();
                    BOOL v700 = NANSubscribe.Configuration.requiresAuthentication.getter();
                    swift_endAccess();
                    if (v700)
                    {
                      swift_bridgeObjectRelease();
                      uint64_t v701 = swift_allocObject();
                      id v702 = v775;
                      *(void *)(v701 + 16) = v775;
                      v703 = (unsigned char *)swift_allocObject();
                      v703[16] = (_BYTE)v763;
                      v703[17] = v764;
                      v703[18] = (_BYTE)v765;
                      v703[19] = v779;
                      v703[20] = (_BYTE)v778;
                      v703[21] = (_BYTE)v780;
                      uint64_t v704 = swift_allocObject();
                      *(void *)(v704 + 16) = sub_1003014D4;
                      *(void *)(v704 + 24) = v703;
                      id v780 = (id)swift_allocObject();
                      *((unsigned char *)v780 + 16) = (_BYTE)v781;
                      v773 = v702;
                      v771 = Logger.logObject.getter();
                      LODWORD(v781) = static os_log_type_t.error.getter();
                      v782 = (unsigned char *)swift_allocObject();
                      v782[16] = 64;
                      v783 = (unsigned char *)swift_allocObject();
                      v783[16] = 8;
                      uint64_t v705 = swift_allocObject();
                      *(void *)(v705 + 16) = sub_1003014B8;
                      *(void *)(v705 + 24) = v701;
                      v706 = swift_allocObject();
                      v706[2].Class isa = (Class)sub_1003011FC;
                      v706[3].Class isa = (Class)v705;
                      uint64_t v707 = swift_allocObject();
                      *(unsigned char *)(v707 + 16) = 32;
                      uint64_t p_type = swift_allocObject();
                      *(unsigned char *)(p_type + 16) = 8;
                      uint64_t v708 = swift_allocObject();
                      *(void *)(v708 + 16) = sub_1003011F8;
                      *(void *)(v708 + 24) = v704;
                      v709 = (void *)swift_allocObject();
                      v709[2] = sub_1003011F0;
                      v709[3] = v708;
                      uint64_t v710 = swift_allocObject();
                      *(unsigned char *)(v710 + 16) = 0;
                      v711 = (unsigned char *)swift_allocObject();
                      v711[16] = 1;
                      uint64_t v712 = swift_allocObject();
                      id v713 = v780;
                      *(void *)(v712 + 16) = j___s7CoreP2P21NANDriverCapabilitiesV4modeAA12NANAttributeO16DeviceCapabilityV13OperationModeVvg;
                      *(void *)(v712 + 24) = v713;
                      uint64_t v714 = swift_allocObject();
                      *(void *)(v714 + 16) = sub_1003014D8;
                      *(void *)(v714 + 24) = v712;
                      uint64_t v715 = swift_allocObject();
                      *(_OWORD *)(v715 + 16) = xmmword_1003D6120;
                      *(void *)(v715 + 32) = sub_100301218;
                      v716 = v783;
                      *(void *)(v715 + 40) = v782;
                      *(void *)(v715 + 48) = sub_100301218;
                      *(void *)(v715 + 56) = v716;
                      *(void *)(v715 + 64) = sub_100301210;
                      *(void *)(v715 + 72) = v706;
                      *(void *)(v715 + 80) = sub_100301218;
                      *(void *)(v715 + 88) = v707;
                      *(void *)(v715 + 96) = sub_100301218;
                      *(void *)(v715 + 104) = p_type;
                      *(void *)(v715 + 112) = sub_100301208;
                      *(void *)(v715 + 120) = v709;
                      *(void *)(v715 + 128) = sub_100301218;
                      *(void *)(v715 + 136) = v710;
                      *(void *)(v715 + 144) = sub_100301218;
                      *(void *)(v715 + 152) = v711;
                      *(void *)(v715 + 160) = sub_10030120C;
                      *(void *)(v715 + 168) = v714;
                      swift_retain();
                      swift_retain();
                      os_log_t v774 = v706;
                      swift_retain();
                      uint64_t v776 = v707;
                      swift_retain();
                      v778 = p_type;
                      swift_retain();
                      v775 = v709;
                      swift_retain();
                      uint64_t v779 = v710;
                      swift_retain();
                      id v780 = v711;
                      swift_retain();
                      uint64_t v717 = v714;
                      swift_retain();
                      swift_bridgeObjectRelease();
                      v718 = v771;
                      if (os_log_type_enabled(v771, (os_log_type_t)v781))
                      {
                        v719 = (uint8_t *)sub_100375300();
                        v720 = (uint8_t *)swift_slowAlloc();
                        uint64_t v721 = swift_slowAlloc();
                        object = v720;
                        v787[0] = v720;
                        v786[0] = v721;
                        *(_WORD *)v719 = 770;
                        *(void *)&v788[0] = v719 + 2;
                        *(void *)&long long v789 = sub_100301218;
                        *((void *)&v789 + 1) = v782;
                        v722 = v784;
                        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v787, (uint64_t)v786);
                        if (v722) {
                          goto LABEL_223;
                        }
                        swift_release();
                        *(void *)&long long v789 = sub_100301218;
                        *((void *)&v789 + 1) = v783;
                        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v787, (uint64_t)v786);
                        swift_release();
                        *(void *)&long long v789 = sub_100301210;
                        *((void *)&v789 + 1) = v774;
                        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v787, (uint64_t)v786);
                        swift_release();
                        *(void *)&long long v789 = sub_100301218;
                        *((void *)&v789 + 1) = v776;
                        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v787, (uint64_t)v786);
                        swift_release();
                        *(void *)&long long v789 = sub_100301218;
                        *((void *)&v789 + 1) = v778;
                        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v787, (uint64_t)v786);
                        swift_release();
                        *(void *)&long long v789 = sub_100301208;
                        *((void *)&v789 + 1) = v775;
                        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v787, (uint64_t)v786);
                        swift_release();
                        *(void *)&long long v789 = sub_100301218;
                        *((void *)&v789 + 1) = v779;
                        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v787, (uint64_t)v786);
                        swift_release();
                        *(void *)&long long v789 = sub_100301218;
                        *((void *)&v789 + 1) = v780;
                        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v787, (uint64_t)v786);
                        swift_release();
                        *(void *)&long long v789 = sub_10030120C;
                        *((void *)&v789 + 1) = v717;
                        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v787, (uint64_t)v786);
                        swift_release();
                        _os_log_impl((void *)&_mh_execute_header, v718, (os_log_type_t)v781, "Cannot create new datapath for %@ to %s[%hhu] because unable to derive security parameters with client provided PMK and PMKID and with authentication type set", v719, 0x19u);
                        sub_100010BCC(&qword_10047CC30);
                        uint64_t p_type = (uint64_t)object;
                        swift_arrayDestroy();
                        swift_slowDealloc();
                        swift_arrayDestroy();
                        swift_slowDealloc();
                        sub_10039F5FC();
                      }
                      else
                      {
                        swift_release();
                        swift_release();
                        swift_release();
                        swift_release();
                        swift_release();
                        swift_release();
                        swift_release();
                        swift_release();
                        swift_release();
                      }
                      sub_10000F000();
                      swift_allocError();
                      *(_OWORD *)uint64_t v724 = xmmword_1003D5850;
                      *(unsigned char *)(v724 + 16) = 1;
                      swift_willThrow();
                      sub_10000C95C(v754, v758);
                      sub_10000C95C(v755, (unint64_t)v756);
                      sub_10013F040((uint64_t)v772, (uint64_t)v759, v760, v762, (unint64_t)v770);
                      swift_release();
                      unsigned __int8 v411 = (uint8_t *)v773;
                      goto LABEL_110;
                    }
                    uint64_t v454 = 0;
                    v485 = v784;
                    os_log_type_t v323 = v772;
                    unsigned __int8 v317 = v781;
                    char v486 = (char)v780;
                    uint64_t v482 = v758;
                    uint64_t v481 = v754;
                    uint64_t v483 = v755;
                    v484 = v756;
                    goto LABEL_213;
                  }
                  sub_10000C95C(v754, v758);
                  sub_10000C95C(v755, (unint64_t)v756);
                  uint64_t v320 = (uint64_t)countAndFlagsBits;
LABEL_140:
                  uint64_t v524 = v776;
                  swift_unownedRetainStrong();
                  uint64_t v525 = v524 + *(void *)(*(void *)v524 + 656);
                  swift_beginAccess();
                  uint64_t v526 = v525;
                  uint64_t v527 = v739;
                  sub_100300CF4(v526, v739, (uint64_t (*)(void))type metadata accessor for NANDriverCapabilities);
                  swift_release();
                  uint64_t v528 = *(void *)(v527 + 8);
                  swift_bridgeObjectRetain();
                  sub_100300D5C(v527, (uint64_t (*)(void))type metadata accessor for NANDriverCapabilities);
                  *(void *)&long long v789 = v528;
                  uint64_t v529 = sub_100010BCC((uint64_t *)&unk_1004852A0);
                  sub_10000F9CC((unint64_t *)&qword_100486310, (uint64_t *)&unk_1004852A0);
                  uint64_t v751 = Collection<>.strongestSupportedSharedKeySuite.getter(v529);
                  LODWORD(v527) = v751;
                  swift_bridgeObjectRelease();
                  unint64_t v758 = v529;
                  if (v527 == 8)
                  {
                    os_log_t v325 = v774;
                    unint64_t v316 = v757;
LABEL_162:
                    uint64_t v565 = v776;
                    swift_unownedRetainStrong();
                    v566 = v745;
                    WiFiInterface.preferences.getter();
                    swift_release();
                    uint64_t v324 = v742;
                    char v567 = Preferences.automaticallyUseEncryption.getter();
                    (*(void (**)(char *, uint64_t))(v746 + 8))(v566, v324);
                    if ((v567 & 1) == 0) {
                      goto LABEL_164;
                    }
                    swift_unownedRetainStrong();
                    uint64_t v568 = v565 + *(void *)(*(void *)v565 + 656);
                    swift_beginAccess();
                    uint64_t v569 = v568;
                    uint64_t v570 = v737;
                    sub_100300CF4(v569, v737, (uint64_t (*)(void))type metadata accessor for NANDriverCapabilities);
                    swift_release();
                    uint64_t v571 = *(void *)(v570 + 8);
                    swift_bridgeObjectRetain();
                    sub_100300D5C(v570, (uint64_t (*)(void))type metadata accessor for NANDriverCapabilities);
                    *(void *)&long long v789 = v571;
                    uint64_t v751 = Collection<>.strongestSupportedSharedKeySuite.getter(v758);
                    LODWORD(v570) = v751;
                    swift_bridgeObjectRelease();
                    if (v570 == 8)
                    {
LABEL_164:
                      int v322 = 1;
                      os_log_type_t v323 = v772;
                      unsigned __int8 v317 = v781;
LABEL_112:
                      swift_unownedRetainStrong();
                      char v412 = v745;
                      WiFiInterface.preferences.getter();
                      swift_release();
                      char v413 = Preferences.automaticallyUseEncryption.getter();
                      (*(void (**)(char *, uint64_t))(v746 + 8))(v412, v324);
                      if ((v413 & 1) != 0
                        || (swift_beginAccess(),
                            BOOL v414 = NANSubscribe.Configuration.requiresAuthentication.getter(),
                            swift_endAccess(),
                            v414))
                      {
                        v772 = v323;
                        swift_bridgeObjectRelease();
                        uint64_t v415 = swift_allocObject();
                        id v416 = v775;
                        *(void *)(v415 + 16) = v775;
                        v417 = (unsigned char *)swift_allocObject();
                        v417[16] = (_BYTE)v763;
                        v417[17] = v764;
                        v417[18] = (_BYTE)v765;
                        v417[19] = v779;
                        v417[20] = (_BYTE)v778;
                        v417[21] = (_BYTE)v780;
                        uint64_t v418 = swift_allocObject();
                        *(void *)(v418 + 16) = sub_1003014D4;
                        *(void *)(v418 + 24) = v417;
                        uint64_t v419 = swift_allocObject();
                        *(unsigned char *)(v419 + 16) = v317;
                        v765 = (uint8_t *)swift_allocObject();
                        *((void *)v765 + 2) = v416;
                        uint64_t countAndFlagsBits = v416;
                        v420 = v783;
                        swift_retain();
                        v778 = Logger.logObject.getter();
                        LODWORD(v771) = static os_log_type_t.error.getter();
                        os_log_t v774 = (os_log_t)swift_allocObject();
                        LOBYTE(v774[2].isa) = 64;
                        uint64_t v779 = swift_allocObject();
                        *(unsigned char *)(v779 + 16) = 8;
                        uint64_t v421 = swift_allocObject();
                        *(void *)(v421 + 16) = sub_1003014B8;
                        *(void *)(v421 + 24) = v415;
                        id v422 = (id)swift_allocObject();
                        id v780 = v422;
                        *((void *)v422 + 2) = sub_1003011FC;
                        *((void *)v422 + 3) = v421;
                        v773 = swift_allocObject();
                        LOBYTE(v773[2].isa) = 32;
                        uint64_t v776 = swift_allocObject();
                        *(unsigned char *)(v776 + 16) = 8;
                        uint64_t v423 = swift_allocObject();
                        *(void *)(v423 + 16) = sub_1003011F8;
                        *(void *)(v423 + 24) = v418;
                        v424 = (void *)swift_allocObject();
                        v775 = v424;
                        v424[2] = sub_1003011F0;
                        v424[3] = v423;
                        v781 = (unsigned char *)swift_allocObject();
                        v781[16] = 0;
                        v782 = (unsigned char *)swift_allocObject();
                        v782[16] = 1;
                        uint64_t v425 = swift_allocObject();
                        *(void *)(v425 + 16) = j___s7CoreP2P21NANDriverCapabilitiesV4modeAA12NANAttributeO16DeviceCapabilityV13OperationModeVvg;
                        *(void *)(v425 + 24) = v419;
                        uint64_t v426 = swift_allocObject();
                        object = (uint8_t *)v426;
                        *(void *)(v426 + 16) = sub_1003014D8;
                        *(void *)(v426 + 24) = v425;
                        uint64_t v427 = swift_allocObject();
                        *(unsigned char *)(v427 + 16) = 0;
                        v428 = (uint8_t *)swift_allocObject();
                        v428[16] = 4;
                        uint64_t v429 = swift_allocObject();
                        *(void *)(v429 + 16) = sub_100300154;
                        *(void *)(v429 + 24) = v420;
                        uint64_t v430 = swift_allocObject();
                        *(void *)(v430 + 16) = sub_1003001E4;
                        *(void *)(v430 + 24) = v429;
                        uint64_t v431 = swift_allocObject();
                        *(void *)(v431 + 16) = sub_100300210;
                        *(void *)(v431 + 24) = v430;
                        uint64_t v432 = swift_allocObject();
                        v767 = (uint8_t *)v432;
                        *(void *)(v432 + 16) = sub_100300238;
                        *(void *)(v432 + 24) = v431;
                        v783 = (unsigned char *)swift_allocObject();
                        v783[16] = 0;
                        uint64_t v768 = swift_allocObject();
                        *(unsigned char *)(v768 + 16) = 4;
                        uint64_t v433 = swift_allocObject();
                        v434 = v765;
                        *(void *)(v433 + 16) = sub_10030015C;
                        *(void *)(v433 + 24) = v434;
                        uint64_t v435 = swift_allocObject();
                        *(void *)(v435 + 16) = sub_1003014DC;
                        *(void *)(v435 + 24) = v433;
                        uint64_t v436 = swift_allocObject();
                        *(void *)(v436 + 16) = sub_100301200;
                        *(void *)(v436 + 24) = v435;
                        uint64_t v437 = v427;
                        uint64_t v764 = v427;
                        uint64_t v438 = swift_allocObject();
                        *(void *)(v438 + 16) = sub_100301204;
                        *(void *)(v438 + 24) = v436;
                        uint64_t v439 = swift_allocObject();
                        *(_OWORD *)(v439 + 16) = xmmword_1003D6110;
                        *(void *)(v439 + 32) = sub_100301218;
                        v440 = v773;
                        *(void *)(v439 + 40) = v774;
                        *(void *)(v439 + 48) = sub_100301218;
                        *(void *)(v439 + 56) = v779;
                        *(void *)(v439 + 64) = sub_100301210;
                        *(void *)(v439 + 72) = v780;
                        *(void *)(v439 + 80) = sub_100301218;
                        *(void *)(v439 + 88) = v440;
                        *(void *)(v439 + 96) = sub_100301218;
                        v441 = v775;
                        *(void *)(v439 + 104) = v776;
                        *(void *)(v439 + 112) = sub_100301208;
                        *(void *)(v439 + 120) = v441;
                        *(void *)(v439 + 128) = sub_100301218;
                        *(void *)(v439 + 136) = v781;
                        *(void *)(v439 + 144) = sub_100301218;
                        *(void *)(v439 + 152) = v782;
                        *(void *)(v439 + 160) = sub_10030120C;
                        uint64_t v442 = v768;
                        *(void *)(v439 + 168) = object;
                        *(void *)(v439 + 176) = sub_100301218;
                        *(void *)(v439 + 184) = v437;
                        *(void *)(v439 + 192) = sub_100301218;
                        *(void *)(v439 + 200) = v428;
                        *(void *)(v439 + 208) = sub_100300268;
                        *(void *)(v439 + 216) = v767;
                        *(void *)(v439 + 224) = sub_100301218;
                        *(void *)(v439 + 232) = v783;
                        *(void *)(v439 + 240) = sub_100301218;
                        *(void *)(v439 + 248) = v442;
                        *(void *)(v439 + 256) = sub_100301214;
                        *(void *)(v439 + 264) = v438;
                        swift_retain();
                        swift_retain();
                        swift_retain();
                        swift_retain();
                        swift_retain();
                        swift_retain();
                        swift_retain();
                        uint64_t p_type = v764;
                        swift_retain();
                        swift_retain();
                        swift_retain();
                        swift_retain();
                        swift_retain();
                        swift_retain();
                        swift_retain();
                        swift_retain();
                        swift_bridgeObjectRelease();
                        if (!os_log_type_enabled(v778, (os_log_type_t)v771))
                        {
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();

                          goto LABEL_118;
                        }
                        uint64_t v443 = v779;
                        v444 = v773;
                        v765 = v428;
                        v445 = (uint8_t *)sub_100375300();
                        v446 = (void *)swift_slowAlloc();
                        uint64_t v447 = swift_slowAlloc();
                        id v761 = v446;
                        v785[0] = v446;
                        v763 = v445;
                        *(_WORD *)v445 = 1282;
                        v800 = v447;
                        *(void *)&v788[0] = v445 + 2;
                        *(void *)&long long v789 = sub_100301218;
                        *((void *)&v789 + 1) = v774;
                        v448 = v784;
                        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v785, (uint64_t)&v800);
                        if (!v448)
                        {
                          swift_release();
                          *(void *)&long long v789 = sub_100301218;
                          *((void *)&v789 + 1) = v443;
                          sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v785, (uint64_t)&v800);
                          swift_release();
                          *(void *)&long long v789 = sub_100301210;
                          *((void *)&v789 + 1) = v780;
                          sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v785, (uint64_t)&v800);
                          swift_release();
                          *(void *)&long long v789 = sub_100301218;
                          *((void *)&v789 + 1) = v444;
                          sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v785, (uint64_t)&v800);
                          swift_release();
                          *(void *)&long long v789 = sub_100301218;
                          *((void *)&v789 + 1) = v776;
                          sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v785, (uint64_t)&v800);
                          swift_release();
                          *(void *)&long long v789 = sub_100301208;
                          *((void *)&v789 + 1) = v775;
                          sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v785, (uint64_t)&v800);
                          swift_release();
                          *(void *)&long long v789 = sub_100301218;
                          *((void *)&v789 + 1) = v781;
                          sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v785, (uint64_t)&v800);
                          swift_release();
                          *(void *)&long long v789 = sub_100301218;
                          *((void *)&v789 + 1) = v782;
                          sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v785, (uint64_t)&v800);
                          swift_release();
                          *(void *)&long long v789 = sub_10030120C;
                          *((void *)&v789 + 1) = object;
                          sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v785, (uint64_t)&v800);
                          swift_release();
                          *(void *)&long long v789 = sub_100301218;
                          *((void *)&v789 + 1) = p_type;
                          sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v785, (uint64_t)&v800);
                          swift_release();
                          *(void *)&long long v789 = sub_100301218;
                          *((void *)&v789 + 1) = v765;
                          sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v785, (uint64_t)&v800);
                          swift_release();
                          *(void *)&long long v789 = sub_100300268;
                          *((void *)&v789 + 1) = v767;
                          sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v785, (uint64_t)&v800);
                          swift_release();
                          *(void *)&long long v789 = sub_100301218;
                          *((void *)&v789 + 1) = v783;
                          sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v785, (uint64_t)&v800);
                          swift_release();
                          *(void *)&long long v789 = sub_100301218;
                          *((void *)&v789 + 1) = v768;
                          sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v785, (uint64_t)&v800);
                          swift_release();
                          *(void *)&long long v789 = sub_100301214;
                          *((void *)&v789 + 1) = v438;
                          sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v785, (uint64_t)&v800);
                          swift_release();
                          v449 = v778;
                          _os_log_impl((void *)&_mh_execute_header, v778, (os_log_type_t)v771, "Cannot create new datapath for %@ to %s[%hhu] because unable to derive a security configuration but encryption required: %{BOOL}d, authentication required: %{BOOL}d", v763, 0x25u);
                          sub_100010BCC(&qword_10047CC30);
                          swift_arrayDestroy();
                          swift_slowDealloc();
                          uint64_t p_type = v447;
                          swift_arrayDestroy();
                          swift_slowDealloc();
                          sub_10039F5FC();

LABEL_118:
                          id v450 = countAndFlagsBits;
                          sub_10000F000();
                          swift_allocError();
                          *(_OWORD *)uint64_t v451 = xmmword_1003D5850;
                          *(unsigned char *)(v451 + 16) = 1;
                          swift_willThrow();
                          sub_10013F040((uint64_t)v772, (uint64_t)v759, v760, v762, (unint64_t)v770);
LABEL_121:
                          swift_release();

                          goto LABEL_122;
                        }
LABEL_219:
                        swift_errorRelease();
                        __break(1u);
                        goto LABEL_220;
                      }
                      uint64_t v454 = 1;
                      if (v322)
                      {
                        v772 = v323;
                        swift_bridgeObjectRelease();
                        uint64_t v455 = swift_allocObject();
                        id v456 = v775;
                        *(void *)(v455 + 16) = v775;
                        v457 = (unsigned char *)swift_allocObject();
                        v457[16] = (_BYTE)v763;
                        v457[17] = v764;
                        v457[18] = (_BYTE)v765;
                        v457[19] = v779;
                        v457[20] = (_BYTE)v778;
                        v457[21] = (_BYTE)v780;
                        uint64_t v458 = swift_allocObject();
                        *(void *)(v458 + 16) = sub_1003014D4;
                        *(void *)(v458 + 24) = v457;
                        uint64_t v779 = swift_allocObject();
                        *(unsigned char *)(v779 + 16) = v317;
                        id v780 = v456;
                        v783 = (unsigned char *)Logger.logObject.getter();
                        LODWORD(v781) = static os_log_type_t.error.getter();
                        v782 = (unsigned char *)swift_allocObject();
                        v782[16] = 64;
                        v778 = swift_allocObject();
                        LOBYTE(v778[2].isa) = 8;
                        uint64_t v459 = swift_allocObject();
                        *(void *)(v459 + 16) = sub_1003014B8;
                        *(void *)(v459 + 24) = v455;
                        uint64_t v460 = swift_allocObject();
                        *(void *)(v460 + 16) = sub_1003011FC;
                        *(void *)(v460 + 24) = v459;
                        uint64_t v461 = swift_allocObject();
                        *(unsigned char *)(v461 + 16) = 32;
                        uint64_t v462 = swift_allocObject();
                        *(unsigned char *)(v462 + 16) = 8;
                        uint64_t v463 = swift_allocObject();
                        *(void *)(v463 + 16) = sub_1003011F8;
                        *(void *)(v463 + 24) = v458;
                        v464 = (void *)swift_allocObject();
                        v464[2] = sub_1003011F0;
                        v464[3] = v463;
                        uint64_t v465 = swift_allocObject();
                        *(unsigned char *)(v465 + 16) = 0;
                        v466 = (uint8_t *)swift_allocObject();
                        v466[16] = 1;
                        uint64_t v467 = swift_allocObject();
                        uint64_t v468 = v779;
                        *(void *)(v467 + 16) = j___s7CoreP2P21NANDriverCapabilitiesV4modeAA12NANAttributeO16DeviceCapabilityV13OperationModeVvg;
                        *(void *)(v467 + 24) = v468;
                        uint64_t v469 = swift_allocObject();
                        *(void *)(v469 + 16) = sub_1003014D8;
                        *(void *)(v469 + 24) = v467;
                        v470 = v461;
                        uint64_t v471 = swift_allocObject();
                        *(_OWORD *)(v471 + 16) = xmmword_1003D6120;
                        *(void *)(v471 + 32) = sub_100301218;
                        *(void *)(v471 + 40) = v782;
                        *(void *)(v471 + 48) = sub_100301218;
                        v472 = v778;
                        *(void *)(v471 + 56) = v778;
                        *(void *)(v471 + 64) = sub_100301210;
                        *(void *)(v471 + 72) = v460;
                        *(void *)(v471 + 80) = sub_100301218;
                        *(void *)(v471 + 88) = v470;
                        *(void *)(v471 + 96) = sub_100301218;
                        *(void *)(v471 + 104) = v462;
                        *(void *)(v471 + 112) = sub_100301208;
                        *(void *)(v471 + 120) = v464;
                        *(void *)(v471 + 128) = sub_100301218;
                        *(void *)(v471 + 136) = v465;
                        *(void *)(v471 + 144) = sub_100301218;
                        *(void *)(v471 + 152) = v466;
                        *(void *)(v471 + 160) = sub_10030120C;
                        *(void *)(v471 + 168) = v469;
                        swift_retain();
                        swift_retain();
                        swift_retain();
                        swift_retain();
                        swift_retain();
                        swift_retain();
                        swift_retain();
                        swift_retain();
                        swift_retain();
                        swift_bridgeObjectRelease();
                        if (os_log_type_enabled((os_log_t)v783, (os_log_type_t)v781))
                        {
                          uint64_t v768 = v460;
                          v775 = v464;
                          uint64_t v776 = v469;
                          os_log_t v774 = v470;
                          uint64_t v779 = v462;
                          v473 = (uint8_t *)sub_100375300();
                          v474 = (uint8_t *)swift_slowAlloc();
                          v475 = swift_slowAlloc();
                          object = v474;
                          v785[0] = v474;
                          *(_WORD *)v473 = 770;
                          v771 = v475;
                          v800 = v475;
                          *(void *)&v788[0] = v473 + 2;
                          *(void *)&long long v789 = sub_100301218;
                          *((void *)&v789 + 1) = v782;
                          v476 = v784;
                          sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v785, (uint64_t)&v800);
                          if (v476) {
                            goto LABEL_223;
                          }
                          v773 = v473;
                          v784 = v466;
                          swift_release();
                          *(void *)&long long v789 = sub_100301218;
                          *((void *)&v789 + 1) = v472;
                          sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v785, (uint64_t)&v800);
                          swift_release();
                          *(void *)&long long v789 = sub_100301210;
                          *((void *)&v789 + 1) = v768;
                          sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v785, (uint64_t)&v800);
                          os_log_t v477 = v774;
                          swift_release();
                          *(void *)&long long v789 = sub_100301218;
                          *((void *)&v789 + 1) = v477;
                          sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v785, (uint64_t)&v800);
                          uint64_t v478 = (uint64_t)v772;
                          swift_release();
                          *(void *)&long long v789 = sub_100301218;
                          *((void *)&v789 + 1) = v779;
                          sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v785, (uint64_t)&v800);
                          swift_release();
                          *(void *)&long long v789 = sub_100301208;
                          *((void *)&v789 + 1) = v775;
                          sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v785, (uint64_t)&v800);
                          uint64_t p_type = (uint64_t)v777;
                          swift_release();
                          *(void *)&long long v789 = sub_100301218;
                          *((void *)&v789 + 1) = v465;
                          sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v785, (uint64_t)&v800);
                          swift_release();
                          *(void *)&long long v789 = sub_100301218;
                          *((void *)&v789 + 1) = v784;
                          sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v785, (uint64_t)&v800);
                          swift_release();
                          *(void *)&long long v789 = sub_10030120C;
                          *((void *)&v789 + 1) = v776;
                          sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v785, (uint64_t)&v800);
                          swift_release();
                          id v479 = v783;
                          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v783, (os_log_type_t)v781, "Cannot create new datapath for %@ to %s[%hhu] because publisher requires security, but no security configuration was provided or derivable", (uint8_t *)v773, 0x19u);
                          sub_100010BCC(&qword_10047CC30);
                          swift_arrayDestroy();
                          swift_slowDealloc();
                          swift_arrayDestroy();
                          swift_slowDealloc();
                          sub_10039F5FC();
                        }
                        else
                        {
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();

                          uint64_t p_type = (uint64_t)v777;
                          uint64_t v478 = (uint64_t)v772;
                        }
                        id v450 = v780;
                        sub_10000F000();
                        swift_allocError();
                        *(_OWORD *)uint64_t v521 = xmmword_1003D5850;
                        *(unsigned char *)(v521 + 16) = 1;
                        swift_willThrow();
                        sub_10013F040(v478, (uint64_t)v759, v760, v762, (unint64_t)v770);
                        goto LABEL_121;
                      }
                      unint64_t v757 = v316;
                      unsigned __int8 v480 = 0;
                      uint64_t v481 = 0;
                      uint64_t v482 = 0;
                      uint64_t v483 = 0;
                      v484 = 0;
                      v485 = v784;
                      char v486 = (char)v780;
LABEL_129:
                      uint64_t v776 = v480;
                      v799[0] = v480;
                      v799[1] = v481;
                      v799[2] = v482;
                      v799[3] = v483;
                      uint64_t v755 = v483;
                      v756 = v484;
                      v799[4] = v484;
                      v799[5] = 0;
                      id v780 = (id)v454;
                      v799[6] = v454;
                      uint64_t v487 = v482;
                      swift_beginAccess();
                      uint64_t v488 = sub_100010BCC(&qword_100486218);
                      IDPool.availableID()(v488, (char *)v788);
                      uint64_t v489 = swift_endAccess();
                      v772 = v323;
                      unint64_t v758 = v487;
                      uint64_t v754 = v481;
                      if (BYTE1(v788[0]))
                      {
                        v784 = v485;
                        swift_bridgeObjectRelease();
                        uint64_t v490 = swift_allocObject();
                        id v491 = v775;
                        *(void *)(v490 + 16) = v775;
                        v492 = (unsigned char *)swift_allocObject();
                        v492[16] = (_BYTE)v763;
                        v492[17] = v764;
                        v492[18] = (_BYTE)v765;
                        v492[19] = v779;
                        v492[20] = (_BYTE)v778;
                        v492[21] = v486;
                        uint64_t v493 = swift_allocObject();
                        *(void *)(v493 + 16) = sub_1003014D4;
                        *(void *)(v493 + 24) = v492;
                        uint64_t v779 = swift_allocObject();
                        *(unsigned char *)(v779 + 16) = v317;
                        v781 = v491;
                        v783 = (unsigned char *)Logger.logObject.getter();
                        LODWORD(v782) = static os_log_type_t.error.getter();
                        uint64_t v494 = swift_allocObject();
                        *(unsigned char *)(v494 + 16) = 64;
                        v495 = v494;
                        os_log_t v774 = (os_log_t)swift_allocObject();
                        LOBYTE(v774[2].isa) = 8;
                        uint64_t v496 = swift_allocObject();
                        *(void *)(v496 + 16) = sub_1003014B8;
                        *(void *)(v496 + 24) = v490;
                        v497 = (void *)swift_allocObject();
                        v497[2] = sub_1003011FC;
                        v497[3] = v496;
                        uint64_t v498 = swift_allocObject();
                        *(unsigned char *)(v498 + 16) = 32;
                        v773 = swift_allocObject();
                        LOBYTE(v773[2].isa) = 8;
                        uint64_t v499 = swift_allocObject();
                        *(void *)(v499 + 16) = sub_1003011F8;
                        *(void *)(v499 + 24) = v493;
                        uint64_t v500 = swift_allocObject();
                        *(void *)(v500 + 16) = sub_1003011F0;
                        *(void *)(v500 + 24) = v499;
                        v501 = swift_allocObject();
                        LOBYTE(v501[2].isa) = 0;
                        uint64_t p_type = swift_allocObject();
                        *(unsigned char *)(p_type + 16) = 1;
                        uint64_t v502 = swift_allocObject();
                        uint64_t v503 = v779;
                        *(void *)(v502 + 16) = j___s7CoreP2P21NANDriverCapabilitiesV4modeAA12NANAttributeO16DeviceCapabilityV13OperationModeVvg;
                        *(void *)(v502 + 24) = v503;
                        uint64_t v504 = swift_allocObject();
                        *(void *)(v504 + 16) = sub_1003014D8;
                        *(void *)(v504 + 24) = v502;
                        uint64_t v505 = swift_allocObject();
                        *(_OWORD *)(v505 + 16) = xmmword_1003D6120;
                        *(void *)(v505 + 32) = sub_100301218;
                        v506 = v495;
                        *(void *)(v505 + 40) = v495;
                        *(void *)(v505 + 48) = sub_100301218;
                        v508 = v773;
                        os_log_t v507 = v774;
                        *(void *)(v505 + 56) = v774;
                        *(void *)(v505 + 64) = sub_100301210;
                        *(void *)(v505 + 72) = v497;
                        *(void *)(v505 + 80) = sub_100301218;
                        *(void *)(v505 + 88) = v498;
                        *(void *)(v505 + 96) = sub_100301218;
                        *(void *)(v505 + 104) = v508;
                        *(void *)(v505 + 112) = sub_100301208;
                        *(void *)(v505 + 120) = v500;
                        *(void *)(v505 + 128) = sub_100301218;
                        *(void *)(v505 + 136) = v501;
                        *(void *)(v505 + 144) = sub_100301218;
                        *(void *)(v505 + 152) = p_type;
                        *(void *)(v505 + 160) = sub_10030120C;
                        *(void *)(v505 + 168) = v504;
                        v778 = v506;
                        swift_retain();
                        swift_retain();
                        v775 = v497;
                        v509 = v783;
                        swift_retain();
                        uint64_t v779 = v498;
                        swift_retain();
                        swift_retain();
                        swift_retain();
                        swift_retain();
                        swift_retain();
                        swift_retain();
                        swift_bridgeObjectRelease();
                        if (os_log_type_enabled(v509, (os_log_type_t)v782))
                        {
                          v510 = v775;
                          uint64_t v768 = v500;
                          object = (uint8_t *)v504;
                          v771 = v501;
                          v511 = (uint8_t *)sub_100375300();
                          v512 = (unsigned char *)swift_slowAlloc();
                          v513 = (uint8_t *)swift_slowAlloc();
                          uint64_t countAndFlagsBits = v512;
                          v767 = v513;
                          v800 = v512;
                          *(_WORD *)v511 = 770;
                          uint64_t v793 = (uint64_t)v513;
                          *(void *)&v788[0] = v511 + 2;
                          *(void *)&long long v789 = sub_100301218;
                          *((void *)&v789 + 1) = v778;
                          v514 = v784;
                          sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)&v800, (uint64_t)&v793);
                          if (v514) {
                            goto LABEL_224;
                          }
                          swift_release();
                          *(void *)&long long v789 = sub_100301218;
                          *((void *)&v789 + 1) = v507;
                          sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)&v800, (uint64_t)&v793);
                          uint64_t v515 = v779;
                          swift_release();
                          *(void *)&long long v789 = sub_100301210;
                          *((void *)&v789 + 1) = v510;
                          sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)&v800, (uint64_t)&v793);
                          swift_release();
                          *(void *)&long long v789 = sub_100301218;
                          *((void *)&v789 + 1) = v515;
                          sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)&v800, (uint64_t)&v793);
                          swift_release();
                          *(void *)&long long v789 = sub_100301218;
                          *((void *)&v789 + 1) = v508;
                          sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)&v800, (uint64_t)&v793);
                          swift_release();
                          *(void *)&long long v789 = sub_100301208;
                          *((void *)&v789 + 1) = v768;
                          sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)&v800, (uint64_t)&v793);
                          uint64_t v516 = v776;
                          swift_release();
                          *(void *)&long long v789 = sub_100301218;
                          *((void *)&v789 + 1) = v771;
                          sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)&v800, (uint64_t)&v793);
                          swift_release();
                          *(void *)&long long v789 = sub_100301218;
                          *((void *)&v789 + 1) = p_type;
                          sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)&v800, (uint64_t)&v793);
                          swift_release();
                          *(void *)&long long v789 = sub_10030120C;
                          *((void *)&v789 + 1) = object;
                          sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)&v800, (uint64_t)&v793);
                          swift_release();
                          id v517 = v783;
                          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v783, (os_log_type_t)v782, "Cannot create new datapath for %@ to %s[%hhu] because no more instance IDs were available", v511, 0x19u);
                          sub_100010BCC(&qword_10047CC30);
                          swift_arrayDestroy();
                          swift_slowDealloc();
                          uint64_t p_type = (uint64_t)v767;
                          swift_arrayDestroy();
                          swift_slowDealloc();
                          sub_10039F5FC();
                        }
                        else
                        {
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();

                          uint64_t v516 = v776;
                        }
                        sub_10000F000();
                        swift_allocError();
                        *(_OWORD *)uint64_t v541 = xmmword_1003D60E0;
                        *(unsigned char *)(v541 + 16) = 1;
                        swift_willThrow();
                        sub_10013F040((uint64_t)v772, (uint64_t)v759, v760, v762, (unint64_t)v770);
                        swift_release();

                        sub_1000CAB20(v516, v754, v758, v755, (unint64_t)v756, 0, (uint64_t)v780);
                        goto LABEL_122;
                      }
                      LODWORD(v784) = LOBYTE(v788[0]);
                      uint64_t v779 = (*((uint64_t (**)(uint64_t))v777->isa + 29))(v489);
                      swift_beginAccess();
                      BOOL v518 = NANSubscribe.Configuration.requiresAuthentication.getter();
                      swift_endAccess();
                      if (v518)
                      {
                        uint64_t v519 = 1;
                        uint64_t v520 = v740;
                      }
                      else
                      {
                        uint64_t v542 = type metadata accessor for NANSubscribe.Configuration();
                        uint64_t v543 = v736;
                        uint64_t v544 = sub_100300CF4((uint64_t)v325 + *(int *)(v542 + 64), v736, (uint64_t (*)(void))type metadata accessor for OWEKeys);
                        uint64_t v520 = v740;
                        OWEKeys.publicKey.getter(v544);
                        sub_100300D5C(v543, (uint64_t (*)(void))type metadata accessor for OWEKeys);
                        uint64_t v519 = 0;
                      }
                      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v738 + 56))(v520, v519, 1, v729);
                      id v545 = v761;
                      id v546 = [v761 serviceSpecificInfo];
                      if (v546)
                      {
                        v547 = v546;
                        id v548 = [v546 protocolType];

                        int v549 = v548 != 0;
                      }
                      else
                      {
                        int v549 = 2;
                      }
                      id v550 = [v545 serviceSpecificInfo];
                      sub_1002F02D4(v550, v741);

                      id v551 = [v545 serviceSpecificInfo];
                      v552 = v551;
                      v778 = v485;
                      LODWORD(v771) = v549;
                      if (v551)
                      {
                        uint64_t v553 = v481;
                        id v554 = [v551 hostname];

                        if (v554)
                        {
                          v552 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
                          unint64_t v556 = v555;

LABEL_176:
                          sub_1000136F4((uint64_t)v798, (uint64_t)v788, (uint64_t *)&unk_100485B50);
                          v604 = (int *)type metadata accessor for NANSubscribe.Configuration();
                          os_log_t v605 = v774;
                          v606 = (unsigned int *)((char *)v774 + v604[18]);
                          unint64_t v607 = *v606 | ((unint64_t)*((unsigned __int16 *)v606 + 2) << 32);
                          unsigned __int8 v608 = *((unsigned char *)v606 + 6);
                          uint64_t p_type = *((unsigned __int8 *)&v774->isa + v604[19]);
                          sub_1001BA2CC(v776, v553, v758, v755, (unint64_t)v756, 0, (uint64_t)v780);
                          LOBYTE(v800) = v608;
                          NANDatapath.Configuration.init(instanceID:serviceName:responderPublishID:responderManagementAddress:initiatorDataAddress:initiatorSubscribeID:publicOWEKey:protocolType:port:hostname:serviceType:securityConfiguration:internetSharingConfiguration:multicastAddress:multicastServiceType:)((int)v784, (uint64_t)countAndFlagsBits, (uint64_t)object, (int)v781, v757, v779 & 0xFFFFFFFFFFFFLL, v752, v740, (uint64_t)&v789, (char)v771, v741, (uint64_t)v552, v556, v782, (uint64_t)v799, (uint64_t)v788, v607 | ((unint64_t)v608 << 48), p_type);
                          __chkstk_darwin();
                          KeyPath = (void *)swift_getKeyPath();
                          v610 = v778;
                          uint64_t v611 = sub_1002EB800((uint64_t)&v789, KeyPath, (uint64_t)v773);
                          if (!v610)
                          {
                            uint64_t p_type = v611;
                            uint64_t v612 = v754;
                            swift_release();
                            uint64_t v613 = (uint64_t)v772;
                            id v614 = v775;
                            if ((*((unsigned char *)&v605->isa + v604[15]) & 1) != 0 || *((unsigned char *)&v605->isa + v604[19]) != 1)
                            {
                              sub_10013F040((uint64_t)v772, (uint64_t)v759, v760, v762, (unint64_t)v770);
                              sub_1000CAB20(v776, v612, v758, v755, (unint64_t)v756, 0, (uint64_t)v780);
                              swift_release();
                              sub_1002D7558((uint64_t)&v789);
                              sub_1000380B4((uint64_t)v798, (uint64_t *)&unk_100485B50);
                              swift_unknownObjectWeakAssign();
                            }
                            else
                            {
                              swift_release();
                              sub_1000CAB20(v776, v612, v758, v755, (unint64_t)v756, 0, (uint64_t)v780);
                              sub_10013F040(v613, (uint64_t)v759, v760, v762, (unint64_t)v770);
                              sub_1002D7558((uint64_t)&v789);
                              sub_1000380B4((uint64_t)v798, (uint64_t *)&unk_100485B50);
                            }
                            return p_type;
                          }
                          swift_release();
                          sub_10013F040((uint64_t)v772, (uint64_t)v759, v760, v762, (unint64_t)v770);

                          sub_1000CAB20(v776, v754, v758, v755, (unint64_t)v756, 0, (uint64_t)v780);
                          swift_release();
                          sub_1002D7558((uint64_t)&v789);
                          goto LABEL_122;
                        }
                        v552 = 0;
                      }
                      else
                      {
                        uint64_t v553 = v481;
                      }
                      unint64_t v556 = 0;
                      goto LABEL_176;
                    }
                    swift_beginAccess();
                    BOOL v599 = NANSubscribe.Configuration.requiresAuthentication.getter();
                    swift_endAccess();
                    if (!v599)
                    {
                      if (v388 == 4
                        || (uint64_t v615 = v762,
                            unint64_t v616 = (unint64_t)v770,
                            sub_100013D44(v762, (unint64_t)v770),
                            uint64_t v617 = v760,
                            v618 = NANServiceInfo.genericServiceProtocol.getter(v760, v615, v616),
                            sub_10013F040((uint64_t)v772, (uint64_t)v759, v617, v615, v616),
                            !v618))
                      {
                        uint64_t v619 = (uint64_t)v728;
                        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v738 + 56))(v728, 1, 1, v729);
                      }
                      else
                      {
                        uint64_t v619 = (uint64_t)v728;
                        NANGenericServiceProtocol.publicKey.getter((uint64_t)v618, (uint64_t)v728);
                        swift_bridgeObjectRelease();
                        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v738 + 48))(v619, 1, v729) != 1)
                        {
                          uint64_t v620 = (uint64_t)v732;
                          (*(void (**)(char *, uint64_t, uint64_t))(v738 + 32))(v732, v619, v729);
                          uint64_t v621 = type metadata accessor for NANSubscribe.Configuration();
                          uint64_t v622 = v736;
                          sub_100300CF4((uint64_t)v774 + *(int *)(v621 + 64), v736, (uint64_t (*)(void))type metadata accessor for OWEKeys);
                          uint64_t v481 = OWEKeys.generatePMK(for:asClient:)(v620, 1);
                          unint64_t v624 = v623;
                          sub_100300D5C(v622, (uint64_t (*)(void))type metadata accessor for OWEKeys);
                          if (v624 >> 60 == 15)
                          {
                            swift_bridgeObjectRelease();
                            uint64_t v625 = swift_allocObject();
                            id v626 = v775;
                            *(void *)(v625 + 16) = v775;
                            v627 = (unsigned char *)swift_allocObject();
                            v627[16] = (_BYTE)v763;
                            v627[17] = v764;
                            v627[18] = (_BYTE)v765;
                            v627[19] = v779;
                            v627[20] = (_BYTE)v778;
                            v627[21] = (_BYTE)v780;
                            uint64_t v628 = swift_allocObject();
                            *(void *)(v628 + 16) = sub_1003014D4;
                            *(void *)(v628 + 24) = v627;
                            id v780 = (id)swift_allocObject();
                            *((unsigned char *)v780 + 16) = (_BYTE)v781;
                            v773 = v626;
                            v771 = Logger.logObject.getter();
                            LODWORD(v781) = static os_log_type_t.error.getter();
                            v782 = (unsigned char *)swift_allocObject();
                            v782[16] = 64;
                            v783 = (unsigned char *)swift_allocObject();
                            v783[16] = 8;
                            uint64_t v629 = swift_allocObject();
                            *(void *)(v629 + 16) = sub_1003014B8;
                            *(void *)(v629 + 24) = v625;
                            v630 = swift_allocObject();
                            v630[2].Class isa = (Class)sub_1003011FC;
                            v630[3].Class isa = (Class)v629;
                            uint64_t v631 = swift_allocObject();
                            *(unsigned char *)(v631 + 16) = 32;
                            uint64_t p_type = swift_allocObject();
                            *(unsigned char *)(p_type + 16) = 8;
                            uint64_t v632 = swift_allocObject();
                            *(void *)(v632 + 16) = sub_1003011F8;
                            *(void *)(v632 + 24) = v628;
                            v633 = (void *)swift_allocObject();
                            v633[2] = sub_1003011F0;
                            v633[3] = v632;
                            uint64_t v634 = swift_allocObject();
                            *(unsigned char *)(v634 + 16) = 0;
                            v635 = (unsigned char *)swift_allocObject();
                            v635[16] = 1;
                            uint64_t v636 = swift_allocObject();
                            id v637 = v780;
                            *(void *)(v636 + 16) = j___s7CoreP2P21NANDriverCapabilitiesV4modeAA12NANAttributeO16DeviceCapabilityV13OperationModeVvg;
                            *(void *)(v636 + 24) = v637;
                            uint64_t v638 = swift_allocObject();
                            *(void *)(v638 + 16) = sub_1003014D8;
                            *(void *)(v638 + 24) = v636;
                            uint64_t v639 = swift_allocObject();
                            *(_OWORD *)(v639 + 16) = xmmword_1003D6120;
                            *(void *)(v639 + 32) = sub_100301218;
                            v640 = v783;
                            *(void *)(v639 + 40) = v782;
                            *(void *)(v639 + 48) = sub_100301218;
                            *(void *)(v639 + 56) = v640;
                            *(void *)(v639 + 64) = sub_100301210;
                            *(void *)(v639 + 72) = v630;
                            *(void *)(v639 + 80) = sub_100301218;
                            *(void *)(v639 + 88) = v631;
                            *(void *)(v639 + 96) = sub_100301218;
                            *(void *)(v639 + 104) = p_type;
                            *(void *)(v639 + 112) = sub_100301208;
                            *(void *)(v639 + 120) = v633;
                            *(void *)(v639 + 128) = sub_100301218;
                            *(void *)(v639 + 136) = v634;
                            *(void *)(v639 + 144) = sub_100301218;
                            *(void *)(v639 + 152) = v635;
                            *(void *)(v639 + 160) = sub_10030120C;
                            *(void *)(v639 + 168) = v638;
                            swift_retain();
                            swift_retain();
                            os_log_t v774 = v630;
                            swift_retain();
                            uint64_t v776 = v631;
                            swift_retain();
                            v778 = p_type;
                            swift_retain();
                            v775 = v633;
                            swift_retain();
                            uint64_t v779 = v634;
                            swift_retain();
                            id v780 = v635;
                            swift_retain();
                            uint64_t v641 = v638;
                            swift_retain();
                            swift_bridgeObjectRelease();
                            v642 = v771;
                            if (os_log_type_enabled(v771, (os_log_type_t)v781))
                            {
                              v643 = (uint8_t *)sub_100375300();
                              v644 = (uint8_t *)swift_slowAlloc();
                              uint64_t v645 = swift_slowAlloc();
                              object = v644;
                              v785[0] = v644;
                              *(_WORD *)v643 = 770;
                              v800 = v645;
                              *(void *)&v788[0] = v643 + 2;
                              *(void *)&long long v789 = sub_100301218;
                              *((void *)&v789 + 1) = v782;
                              v646 = v784;
                              sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v785, (uint64_t)&v800);
                              if (v646) {
                                goto LABEL_223;
                              }
                              swift_release();
                              *(void *)&long long v789 = sub_100301218;
                              *((void *)&v789 + 1) = v783;
                              sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v785, (uint64_t)&v800);
                              swift_release();
                              *(void *)&long long v789 = sub_100301210;
                              *((void *)&v789 + 1) = v774;
                              sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v785, (uint64_t)&v800);
                              swift_release();
                              *(void *)&long long v789 = sub_100301218;
                              *((void *)&v789 + 1) = v776;
                              sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v785, (uint64_t)&v800);
                              swift_release();
                              *(void *)&long long v789 = sub_100301218;
                              *((void *)&v789 + 1) = v778;
                              sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v785, (uint64_t)&v800);
                              swift_release();
                              *(void *)&long long v789 = sub_100301208;
                              *((void *)&v789 + 1) = v775;
                              sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v785, (uint64_t)&v800);
                              swift_release();
                              *(void *)&long long v789 = sub_100301218;
                              *((void *)&v789 + 1) = v779;
                              sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v785, (uint64_t)&v800);
                              swift_release();
                              *(void *)&long long v789 = sub_100301218;
                              *((void *)&v789 + 1) = v780;
                              sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v785, (uint64_t)&v800);
                              swift_release();
                              *(void *)&long long v789 = sub_10030120C;
                              *((void *)&v789 + 1) = v641;
                              sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v785, (uint64_t)&v800);
                              swift_release();
                              _os_log_impl((void *)&_mh_execute_header, v642, (os_log_type_t)v781, "Cannot create new datapath for %@ to %s[%hhu] because unable to derive the PMK using the OWE keys", v643, 0x19u);
                              sub_100010BCC(&qword_10047CC30);
                              uint64_t p_type = (uint64_t)object;
                              swift_arrayDestroy();
                              swift_slowDealloc();
                              swift_arrayDestroy();
                              swift_slowDealloc();
                              sub_10039F5FC();
                            }
                            else
                            {
                              swift_release();
                              swift_release();
                              swift_release();
                              swift_release();
                              swift_release();
                              swift_release();
                              swift_release();
                              swift_release();
                              swift_release();
                            }
                            sub_10000F000();
                            swift_allocError();
                            *(_OWORD *)uint64_t v723 = xmmword_1003D5850;
                            *(unsigned char *)(v723 + 16) = 1;
                            swift_willThrow();
                            sub_10013F040((uint64_t)v772, (uint64_t)v759, v760, v762, (unint64_t)v770);
                            swift_release();

                            (*(void (**)(char *, uint64_t))(v738 + 8))(v732, v729);
                            goto LABEL_122;
                          }
                          (*(void (**)(char *, uint64_t))(v738 + 8))(v732, v729);
                          uint64_t v483 = 0;
                          uint64_t v454 = 0;
                          v484 = (uint8_t *)0xF000000000000000;
                          v485 = v784;
                          os_log_type_t v323 = v772;
                          unsigned __int8 v317 = v781;
                          char v486 = (char)v780;
                          uint64_t v482 = v624;
                          goto LABEL_213;
                        }
                      }
                      swift_bridgeObjectRelease();
                      sub_1000380B4(v619, (uint64_t *)&unk_1004852B0);
                      uint64_t v649 = swift_allocObject();
                      id v650 = v775;
                      *(void *)(v649 + 16) = v775;
                      v651 = (unsigned char *)swift_allocObject();
                      v651[16] = (_BYTE)v763;
                      v651[17] = v764;
                      v651[18] = (_BYTE)v765;
                      v651[19] = v779;
                      v651[20] = (_BYTE)v778;
                      v651[21] = (_BYTE)v780;
                      uint64_t v652 = swift_allocObject();
                      *(void *)(v652 + 16) = sub_1003014D4;
                      *(void *)(v652 + 24) = v651;
                      uint64_t v653 = swift_allocObject();
                      *(unsigned char *)(v653 + 16) = (_BYTE)v781;
                      os_log_t v774 = (os_log_t)v650;
                      v773 = Logger.logObject.getter();
                      LODWORD(v779) = static os_log_type_t.error.getter();
                      uint64_t v654 = swift_allocObject();
                      *(unsigned char *)(v654 + 16) = 64;
                      v781 = (unsigned char *)swift_allocObject();
                      v781[16] = 8;
                      uint64_t v655 = swift_allocObject();
                      *(void *)(v655 + 16) = sub_1003014B8;
                      *(void *)(v655 + 24) = v649;
                      v656 = (void *)swift_allocObject();
                      v656[2] = sub_1003011FC;
                      v656[3] = v655;
                      v657 = v656;
                      id v780 = v656;
                      v782 = (unsigned char *)swift_allocObject();
                      v782[16] = 32;
                      v783 = (unsigned char *)swift_allocObject();
                      v783[16] = 8;
                      uint64_t v658 = swift_allocObject();
                      *(void *)(v658 + 16) = sub_1003011F8;
                      *(void *)(v658 + 24) = v652;
                      v659 = (void *)swift_allocObject();
                      v659[2] = sub_1003011F0;
                      v659[3] = v658;
                      uint64_t v660 = swift_allocObject();
                      *(unsigned char *)(v660 + 16) = 0;
                      v661 = swift_allocObject();
                      LOBYTE(v661[2].isa) = 1;
                      uint64_t v662 = swift_allocObject();
                      *(void *)(v662 + 16) = j___s7CoreP2P21NANDriverCapabilitiesV4modeAA12NANAttributeO16DeviceCapabilityV13OperationModeVvg;
                      *(void *)(v662 + 24) = v653;
                      uint64_t v663 = swift_allocObject();
                      *(void *)(v663 + 16) = sub_1003014D8;
                      *(void *)(v663 + 24) = v662;
                      v664 = v654;
                      uint64_t v665 = swift_allocObject();
                      *(_OWORD *)(v665 + 16) = xmmword_1003D6120;
                      *(void *)(v665 + 32) = sub_100301218;
                      *(void *)(v665 + 40) = v654;
                      v666 = v781;
                      uint64_t p_type = (uint64_t)v782;
                      *(void *)(v665 + 48) = sub_100301218;
                      *(void *)(v665 + 56) = v666;
                      *(void *)(v665 + 64) = sub_100301210;
                      *(void *)(v665 + 72) = v657;
                      *(void *)(v665 + 80) = sub_100301218;
                      *(void *)(v665 + 88) = p_type;
                      v667 = v783;
                      *(void *)(v665 + 96) = sub_100301218;
                      *(void *)(v665 + 104) = v667;
                      *(void *)(v665 + 112) = sub_100301208;
                      *(void *)(v665 + 120) = v659;
                      *(void *)(v665 + 128) = sub_100301218;
                      *(void *)(v665 + 136) = v660;
                      *(void *)(v665 + 144) = sub_100301218;
                      *(void *)(v665 + 152) = v661;
                      *(void *)(v665 + 160) = sub_10030120C;
                      *(void *)(v665 + 168) = v663;
                      v771 = v664;
                      swift_retain();
                      swift_retain();
                      swift_retain();
                      swift_retain();
                      swift_retain();
                      v775 = v659;
                      swift_retain();
                      uint64_t v776 = v660;
                      swift_retain();
                      v778 = v661;
                      swift_retain();
                      uint64_t v668 = v663;
                      swift_retain();
                      swift_bridgeObjectRelease();
                      v669 = v773;
                      if (os_log_type_enabled(v773, (os_log_type_t)v779))
                      {
                        v670 = (uint8_t *)sub_100375300();
                        v671 = (uint8_t *)swift_slowAlloc();
                        uint64_t v672 = swift_slowAlloc();
                        object = v671;
                        v785[0] = v671;
                        *(_WORD *)v670 = 770;
                        v800 = v672;
                        *(void *)&v788[0] = v670 + 2;
                        *(void *)&long long v789 = sub_100301218;
                        *((void *)&v789 + 1) = v771;
                        v673 = v784;
                        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v785, (uint64_t)&v800);
                        if (v673) {
                          goto LABEL_223;
                        }
                        swift_release();
                        *(void *)&long long v789 = sub_100301218;
                        *((void *)&v789 + 1) = v781;
                        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v785, (uint64_t)&v800);
                        swift_release();
                        *(void *)&long long v789 = sub_100301210;
                        *((void *)&v789 + 1) = v780;
                        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v785, (uint64_t)&v800);
                        swift_release();
                        *(void *)&long long v789 = sub_100301218;
                        *((void *)&v789 + 1) = v782;
                        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v785, (uint64_t)&v800);
                        swift_release();
                        *(void *)&long long v789 = sub_100301218;
                        *((void *)&v789 + 1) = v783;
                        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v785, (uint64_t)&v800);
                        swift_release();
                        *(void *)&long long v789 = sub_100301208;
                        *((void *)&v789 + 1) = v775;
                        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v785, (uint64_t)&v800);
                        swift_release();
                        *(void *)&long long v789 = sub_100301218;
                        *((void *)&v789 + 1) = v776;
                        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v785, (uint64_t)&v800);
                        swift_release();
                        *(void *)&long long v789 = sub_100301218;
                        *((void *)&v789 + 1) = v778;
                        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v785, (uint64_t)&v800);
                        swift_release();
                        *(void *)&long long v789 = sub_10030120C;
                        *((void *)&v789 + 1) = v668;
                        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v785, (uint64_t)&v800);
                        swift_release();
                        os_log_type_t v674 = v779;
                        v675 = "Cannot create new datapath for %@ to %s[%hhu] because unable to find security parameters "
                               "included for the discovered publisher";
                        goto LABEL_204;
                      }
LABEL_205:
                      swift_release();
                      swift_release();
                      swift_release();
                      swift_release();
                      swift_release();
                      swift_release();
                      swift_release();
                      swift_release();
                      swift_release();

                      goto LABEL_206;
                    }
                    v600 = (uint64_t *)&v775[qword_100488988];
                    swift_beginAccess();
                    uint64_t v601 = *v600;
                    swift_bridgeObjectRetain();
                    uint64_t v602 = v734;
                    sub_1002AB33C((uint64_t)v771, v601, v734);
                    swift_bridgeObjectRelease();
                    uint64_t v603 = type metadata accessor for NANPeer.Service.AuthenticationStatus(0);
                    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v603 - 8) + 48))(v602, 1, v603) == 1)
                    {
                      sub_1000380B4(v602, (uint64_t *)&unk_1004862F0);
                      swift_bridgeObjectRelease();
                      goto LABEL_201;
                    }
                    sub_100300CF4(v602, (uint64_t)v735, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
                    sub_100300D5C(v602, type metadata accessor for NANPeer.Service.AuthenticationStatus);
                    if (swift_getEnumCaseMultiPayload() != 2)
                    {
                      swift_bridgeObjectRelease();
                      sub_100300D5C((uint64_t)v735, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
LABEL_201:
                      uint64_t v676 = swift_allocObject();
                      id v677 = v775;
                      *(void *)(v676 + 16) = v775;
                      v678 = (unsigned char *)swift_allocObject();
                      v678[16] = (_BYTE)v763;
                      v678[17] = v764;
                      v678[18] = (_BYTE)v765;
                      v678[19] = v779;
                      v678[20] = (_BYTE)v778;
                      v678[21] = (_BYTE)v780;
                      uint64_t v679 = swift_allocObject();
                      *(void *)(v679 + 16) = sub_1003014D4;
                      *(void *)(v679 + 24) = v678;
                      uint64_t v680 = swift_allocObject();
                      *(unsigned char *)(v680 + 16) = (_BYTE)v781;
                      os_log_t v774 = (os_log_t)v677;
                      v773 = Logger.logObject.getter();
                      LODWORD(v779) = static os_log_type_t.error.getter();
                      uint64_t v681 = swift_allocObject();
                      *(unsigned char *)(v681 + 16) = 64;
                      v781 = (unsigned char *)swift_allocObject();
                      v781[16] = 8;
                      uint64_t v682 = swift_allocObject();
                      *(void *)(v682 + 16) = sub_1003014B8;
                      *(void *)(v682 + 24) = v676;
                      v683 = (void *)swift_allocObject();
                      v683[2] = sub_1003011FC;
                      v683[3] = v682;
                      v684 = v683;
                      id v780 = v683;
                      v782 = (unsigned char *)swift_allocObject();
                      v782[16] = 32;
                      v783 = (unsigned char *)swift_allocObject();
                      v783[16] = 8;
                      uint64_t v685 = swift_allocObject();
                      *(void *)(v685 + 16) = sub_1003011F8;
                      *(void *)(v685 + 24) = v679;
                      v686 = (void *)swift_allocObject();
                      v686[2] = sub_1003011F0;
                      v686[3] = v685;
                      uint64_t v687 = swift_allocObject();
                      *(unsigned char *)(v687 + 16) = 0;
                      v688 = swift_allocObject();
                      LOBYTE(v688[2].isa) = 1;
                      uint64_t v689 = swift_allocObject();
                      *(void *)(v689 + 16) = j___s7CoreP2P21NANDriverCapabilitiesV4modeAA12NANAttributeO16DeviceCapabilityV13OperationModeVvg;
                      *(void *)(v689 + 24) = v680;
                      uint64_t v690 = swift_allocObject();
                      *(void *)(v690 + 16) = sub_1003014D8;
                      *(void *)(v690 + 24) = v689;
                      v691 = v681;
                      uint64_t v692 = swift_allocObject();
                      *(_OWORD *)(v692 + 16) = xmmword_1003D6120;
                      *(void *)(v692 + 32) = sub_100301218;
                      *(void *)(v692 + 40) = v681;
                      v693 = v781;
                      uint64_t p_type = (uint64_t)v782;
                      *(void *)(v692 + 48) = sub_100301218;
                      *(void *)(v692 + 56) = v693;
                      *(void *)(v692 + 64) = sub_100301210;
                      *(void *)(v692 + 72) = v684;
                      *(void *)(v692 + 80) = sub_100301218;
                      *(void *)(v692 + 88) = p_type;
                      v694 = v783;
                      *(void *)(v692 + 96) = sub_100301218;
                      *(void *)(v692 + 104) = v694;
                      *(void *)(v692 + 112) = sub_100301208;
                      *(void *)(v692 + 120) = v686;
                      *(void *)(v692 + 128) = sub_100301218;
                      *(void *)(v692 + 136) = v687;
                      *(void *)(v692 + 144) = sub_100301218;
                      *(void *)(v692 + 152) = v688;
                      *(void *)(v692 + 160) = sub_10030120C;
                      *(void *)(v692 + 168) = v690;
                      v771 = v691;
                      swift_retain();
                      swift_retain();
                      swift_retain();
                      swift_retain();
                      swift_retain();
                      v775 = v686;
                      swift_retain();
                      uint64_t v776 = v687;
                      swift_retain();
                      v778 = v688;
                      swift_retain();
                      uint64_t v695 = v690;
                      swift_retain();
                      swift_bridgeObjectRelease();
                      v669 = v773;
                      if (os_log_type_enabled(v773, (os_log_type_t)v779))
                      {
                        v670 = (uint8_t *)sub_100375300();
                        v696 = (uint8_t *)swift_slowAlloc();
                        uint64_t v697 = swift_slowAlloc();
                        object = v696;
                        v800 = v696;
                        *(_WORD *)v670 = 770;
                        uint64_t v793 = v697;
                        *(void *)&v788[0] = v670 + 2;
                        *(void *)&long long v789 = sub_100301218;
                        *((void *)&v789 + 1) = v771;
                        v698 = v784;
                        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)&v800, (uint64_t)&v793);
                        if (v698) {
                          goto LABEL_223;
                        }
                        swift_release();
                        *(void *)&long long v789 = sub_100301218;
                        *((void *)&v789 + 1) = v781;
                        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)&v800, (uint64_t)&v793);
                        swift_release();
                        *(void *)&long long v789 = sub_100301210;
                        *((void *)&v789 + 1) = v780;
                        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)&v800, (uint64_t)&v793);
                        swift_release();
                        *(void *)&long long v789 = sub_100301218;
                        *((void *)&v789 + 1) = v782;
                        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)&v800, (uint64_t)&v793);
                        swift_release();
                        *(void *)&long long v789 = sub_100301218;
                        *((void *)&v789 + 1) = v783;
                        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)&v800, (uint64_t)&v793);
                        swift_release();
                        *(void *)&long long v789 = sub_100301208;
                        *((void *)&v789 + 1) = v775;
                        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)&v800, (uint64_t)&v793);
                        swift_release();
                        *(void *)&long long v789 = sub_100301218;
                        *((void *)&v789 + 1) = v776;
                        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)&v800, (uint64_t)&v793);
                        swift_release();
                        *(void *)&long long v789 = sub_100301218;
                        *((void *)&v789 + 1) = v778;
                        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)&v800, (uint64_t)&v793);
                        swift_release();
                        *(void *)&long long v789 = sub_10030120C;
                        *((void *)&v789 + 1) = v695;
                        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)&v800, (uint64_t)&v793);
                        swift_release();
                        os_log_type_t v674 = v779;
                        v675 = "Cannot create new datapath for %@ to %s[%hhu] because unable to find an authenticated PMK"
                               " for the discovered publisher";
LABEL_204:
                        _os_log_impl((void *)&_mh_execute_header, v669, v674, v675, v670, 0x19u);
                        sub_100010BCC(&qword_10047CC30);
                        uint64_t p_type = (uint64_t)object;
                        swift_arrayDestroy();
                        swift_slowDealloc();
                        swift_arrayDestroy();
                        swift_slowDealloc();
                        sub_10039F5FC();

LABEL_206:
                        sub_10000F000();
                        swift_allocError();
                        *(_OWORD *)uint64_t v699 = xmmword_1003D5850;
                        *(unsigned char *)(v699 + 16) = 1;
                        swift_willThrow();
                        sub_10013F040((uint64_t)v772, (uint64_t)v759, v760, v762, (unint64_t)v770);
                        swift_release();
                        unsigned __int8 v411 = (uint8_t *)v774;
                        goto LABEL_110;
                      }
                      goto LABEL_205;
                    }
                    uint64_t v483 = 0;
                    uint64_t v454 = 0;
                    uint64_t v481 = *v735;
                    uint64_t v482 = v735[1];
                    v484 = (uint8_t *)0xF000000000000000;
                    v485 = v784;
                    os_log_type_t v323 = v772;
                    unsigned __int8 v317 = v781;
                    char v486 = (char)v780;
LABEL_213:
                    os_log_t v325 = v774;
                    unsigned __int8 v480 = v751;
                    goto LABEL_129;
                  }
                  id v530 = [v761 pmk];
                  os_log_t v325 = v774;
                  if (v530)
                  {
                    v531 = v530;
                    uint64_t v532 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
                    unint64_t v534 = v533;

                    if (v534 >> 60 != 15)
                    {
                      sub_100013D44(v532, v534);
                      uint64_t v481 = NANPMK.init(pmk:)(v532, v534);
                      unint64_t v536 = v535;
                      sub_10000C95C(v532, v534);
                      uint64_t v537 = v536;
                      BOOL v538 = v536 >> 60 == 15;
                      id v539 = v761;
                      if (!v538)
                      {
                        unint64_t v758 = v537;
                        char v486 = (char)v780;
                        id v540 = v775;
                        goto LABEL_166;
                      }
LABEL_158:
                      id v557 = [v539 passphrase];
                      if (v557)
                      {
                        v558 = v557;
                        uint64_t v559 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                        unint64_t v561 = v560;
                      }
                      else
                      {
                        uint64_t v559 = 0;
                        unint64_t v561 = 0;
                      }
                      id v540 = v775;
                      unint64_t v316 = v757;
                      v562 = object;
                      swift_bridgeObjectRetain();
                      uint64_t v563 = (uint64_t)v562;
                      v564 = v784;
                      sub_1002D8F80(v559, v561, v751, v320, v563, v316, (uint64_t *)&v789);
                      v784 = v564;
                      swift_bridgeObjectRelease();
                      if (*((void *)&v789 + 1) >> 60 == 15) {
                        goto LABEL_162;
                      }
                      unint64_t v758 = *((void *)&v789 + 1);
                      uint64_t v481 = v789;
                      char v486 = (char)v780;
LABEL_166:
                      swift_beginAccess();
                      BOOL v572 = NANSubscribe.Configuration.requiresAuthentication.getter();
                      swift_endAccess();
                      unsigned __int8 v317 = v781;
                      if (!v572)
                      {
                        uint64_t v483 = 0;
                        uint64_t v454 = 0;
                        v484 = (uint8_t *)0xF000000000000000;
                        v485 = v784;
                        os_log_type_t v323 = v772;
                        unsigned __int8 v480 = v751;
                        uint64_t v482 = v758;
                        goto LABEL_129;
                      }
                      uint64_t v754 = v481;
                      swift_bridgeObjectRelease();
                      uint64_t v573 = swift_allocObject();
                      *(void *)(v573 + 16) = v540;
                      v574 = (unsigned char *)swift_allocObject();
                      v574[16] = (_BYTE)v763;
                      v574[17] = v764;
                      v574[18] = (_BYTE)v765;
                      v574[19] = v779;
                      v574[20] = (_BYTE)v778;
                      v574[21] = v486;
                      uint64_t v575 = swift_allocObject();
                      *(void *)(v575 + 16) = sub_1003014D4;
                      *(void *)(v575 + 24) = v574;
                      uint64_t v576 = swift_allocObject();
                      *(unsigned char *)(v576 + 16) = v317;
                      uint64_t v577 = v576;
                      v778 = v540;
                      os_log_t v774 = (os_log_t)Logger.logObject.getter();
                      LODWORD(v779) = static os_log_type_t.error.getter();
                      v578 = (uint8_t *)swift_allocObject();
                      v578[16] = 64;
                      v781 = (unsigned char *)swift_allocObject();
                      v781[16] = 8;
                      uint64_t v579 = swift_allocObject();
                      *(void *)(v579 + 16) = sub_1003014B8;
                      *(void *)(v579 + 24) = v573;
                      uint64_t v580 = swift_allocObject();
                      *(void *)(v580 + 16) = sub_1003011FC;
                      *(void *)(v580 + 24) = v579;
                      uint64_t v581 = v580;
                      uint64_t v582 = swift_allocObject();
                      *(unsigned char *)(v582 + 16) = 32;
                      uint64_t p_type = v582;
                      v782 = (unsigned char *)swift_allocObject();
                      v782[16] = 8;
                      uint64_t v583 = swift_allocObject();
                      *(void *)(v583 + 16) = sub_1003011F8;
                      *(void *)(v583 + 24) = v575;
                      v584 = (void *)swift_allocObject();
                      v584[2] = sub_1003011F0;
                      v584[3] = v583;
                      v585 = v584;
                      id v780 = v584;
                      uint64_t v586 = swift_allocObject();
                      *(unsigned char *)(v586 + 16) = 0;
                      v783 = (unsigned char *)swift_allocObject();
                      v783[16] = 1;
                      uint64_t v587 = swift_allocObject();
                      *(void *)(v587 + 16) = j___s7CoreP2P21NANDriverCapabilitiesV4modeAA12NANAttributeO16DeviceCapabilityV13OperationModeVvg;
                      *(void *)(v587 + 24) = v577;
                      uint64_t v588 = swift_allocObject();
                      *(void *)(v588 + 16) = sub_1003014D8;
                      *(void *)(v588 + 24) = v587;
                      uint64_t v589 = swift_allocObject();
                      *(_OWORD *)(v589 + 16) = xmmword_1003D6120;
                      *(void *)(v589 + 32) = sub_100301218;
                      *(void *)(v589 + 40) = v578;
                      v590 = v781;
                      *(void *)(v589 + 48) = sub_100301218;
                      *(void *)(v589 + 56) = v590;
                      *(void *)(v589 + 64) = sub_100301210;
                      *(void *)(v589 + 72) = v581;
                      uint64_t v591 = v581;
                      *(void *)(v589 + 80) = sub_100301218;
                      *(void *)(v589 + 88) = p_type;
                      v592 = v782;
                      *(void *)(v589 + 96) = sub_100301218;
                      *(void *)(v589 + 104) = v592;
                      *(void *)(v589 + 112) = sub_100301208;
                      *(void *)(v589 + 120) = v585;
                      *(void *)(v589 + 128) = sub_100301218;
                      *(void *)(v589 + 136) = v586;
                      v593 = v783;
                      *(void *)(v589 + 144) = sub_100301218;
                      *(void *)(v589 + 152) = v593;
                      *(void *)(v589 + 160) = sub_10030120C;
                      *(void *)(v589 + 168) = v588;
                      v773 = v578;
                      swift_retain();
                      swift_retain();
                      swift_retain();
                      v775 = (unsigned char *)p_type;
                      swift_retain();
                      swift_retain();
                      swift_retain();
                      uint64_t v776 = v586;
                      swift_retain();
                      swift_retain();
                      swift_retain();
                      swift_bridgeObjectRelease();
                      v594 = v774;
                      if (os_log_type_enabled(v774, (os_log_type_t)v779))
                      {
                        v595 = (uint8_t *)sub_100375300();
                        v596 = (uint8_t *)swift_slowAlloc();
                        v597 = swift_slowAlloc();
                        object = v596;
                        v786[0] = v596;
                        v771 = v597;
                        v785[0] = v597;
                        *(_WORD *)v595 = 770;
                        *(void *)&v788[0] = v595 + 2;
                        *(void *)&long long v789 = sub_100301218;
                        *((void *)&v789 + 1) = v773;
                        v598 = v784;
                        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v786, (uint64_t)v785);
                        if (v598) {
                          goto LABEL_223;
                        }
                        swift_release();
                        *(void *)&long long v789 = sub_100301218;
                        *((void *)&v789 + 1) = v781;
                        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v786, (uint64_t)v785);
                        swift_release();
                        *(void *)&long long v789 = sub_100301210;
                        *((void *)&v789 + 1) = v591;
                        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v786, (uint64_t)v785);
                        uint64_t p_type = 0;
                        swift_release();
                        *(void *)&long long v789 = sub_100301218;
                        *((void *)&v789 + 1) = v775;
                        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v786, (uint64_t)v785);
                        swift_release();
                        *(void *)&long long v789 = sub_100301218;
                        *((void *)&v789 + 1) = v782;
                        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v786, (uint64_t)v785);
                        swift_release();
                        *(void *)&long long v789 = sub_100301208;
                        *((void *)&v789 + 1) = v780;
                        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v786, (uint64_t)v785);
                        swift_release();
                        *(void *)&long long v789 = sub_100301218;
                        *((void *)&v789 + 1) = v776;
                        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v786, (uint64_t)v785);
                        swift_release();
                        *(void *)&long long v789 = sub_100301218;
                        *((void *)&v789 + 1) = v783;
                        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v786, (uint64_t)v785);
                        swift_release();
                        *(void *)&long long v789 = sub_10030120C;
                        *((void *)&v789 + 1) = v588;
                        sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v786, (uint64_t)v785);
                        swift_release();
                        _os_log_impl((void *)&_mh_execute_header, v594, (os_log_type_t)v779, "Cannot create new datapath for %@ to %s[%hhu] because unable to derive security parameters with client provided PMK and with authentication type set", v595, 0x19u);
                        sub_100010BCC(&qword_10047CC30);
                        swift_arrayDestroy();
                        swift_slowDealloc();
                        swift_arrayDestroy();
                        swift_slowDealloc();
                        sub_10039F5FC();
                      }
                      else
                      {
                        swift_release();
                        swift_release();
                        swift_release();
                        swift_release();
                        swift_release();
                        swift_release();
                        swift_release();
                        swift_release();
                        swift_release();
                      }
                      unint64_t v647 = v758;
                      sub_10000F000();
                      swift_allocError();
                      *(_OWORD *)uint64_t v648 = xmmword_1003D5850;
                      *(unsigned char *)(v648 + 16) = 1;
                      swift_willThrow();
                      sub_10000C95C(v754, v647);
                      sub_10013F040((uint64_t)v772, (uint64_t)v759, v760, v762, (unint64_t)v770);
                      swift_release();
                      unsigned __int8 v411 = (uint8_t *)v778;
LABEL_110:

                      goto LABEL_122;
                    }
                  }
                  else
                  {
                    uint64_t v532 = 0;
                    unint64_t v534 = 0xF000000000000000;
                  }
                  id v539 = v761;
                  sub_10000C95C(v532, v534);
                  goto LABEL_158;
                }
                goto LABEL_197;
              }
            }
            else
            {
              uint64_t v399 = 0;
              unint64_t v401 = 0xF000000000000000;
            }
            sub_10000C95C(v399, v401);
LABEL_197:
            uint64_t v522 = v394;
            unint64_t v523 = v396;
            goto LABEL_139;
          }
        }
        else
        {
          uint64_t v391 = 0;
          unint64_t v393 = 0xF000000000000000;
        }
        uint64_t v522 = v391;
        unint64_t v523 = v393;
LABEL_139:
        sub_10000C95C(v522, v523);
        goto LABEL_140;
      }

      char v261 = (char)v781;
    }
    else
    {
      swift_endAccess();
      char v261 = (char)v781;
      unsigned __int8 v210 = v779;
      unsigned __int8 v209 = v780;
      uint64_t v211 = object;
      id v212 = countAndFlagsBits;
    }
    uint64_t v262 = swift_allocObject();
    *(void *)(v262 + 16) = v212;
    *(void *)(v262 + 24) = v211;
    uint64_t v263 = swift_allocObject();
    *(void *)(v263 + 16) = sub_1003014B4;
    *(void *)(v263 + 24) = v262;
    uint64_t v264 = (unsigned char *)swift_allocObject();
    v264[16] = (_BYTE)v763;
    v264[17] = v764;
    v264[18] = (_BYTE)v765;
    v264[19] = v210;
    v264[20] = (_BYTE)v778;
    v264[21] = v209;
    uint64_t v265 = swift_allocObject();
    *(void *)(v265 + 16) = sub_1003014D4;
    *(void *)(v265 + 24) = v264;
    uint64_t v266 = swift_allocObject();
    *(unsigned char *)(v266 + 16) = v261;
    v772 = (void *)swift_allocObject();
    *((unsigned char *)v772 + 16) = v752;
    v782 = (unsigned char *)Logger.logObject.getter();
    LODWORD(v778) = static os_log_type_t.error.getter();
    id v780 = (id)swift_allocObject();
    *((unsigned char *)v780 + 16) = 32;
    uint64_t v267 = (unsigned char *)swift_allocObject();
    v267[16] = 8;
    uint64_t v268 = swift_allocObject();
    *(void *)(v268 + 16) = sub_1003011F4;
    *(void *)(v268 + 24) = v263;
    uint64_t v269 = (void *)swift_allocObject();
    v783 = v269;
    v269[2] = sub_1003011F0;
    v269[3] = v268;
    os_log_t v774 = (os_log_t)swift_allocObject();
    LOBYTE(v774[2].isa) = 32;
    uint64_t v779 = swift_allocObject();
    *(unsigned char *)(v779 + 16) = 8;
    uint64_t v270 = swift_allocObject();
    *(void *)(v270 + 16) = sub_1003011F8;
    *(void *)(v270 + 24) = v265;
    uint64_t v271 = (void *)swift_allocObject();
    v271[2] = sub_1003011F0;
    v271[3] = v270;
    uint64_t v272 = v271;
    v781 = v271;
    v771 = swift_allocObject();
    LOBYTE(v771[2].isa) = 0;
    uint64_t v273 = swift_allocObject();
    *(unsigned char *)(v273 + 16) = 1;
    uint64_t v274 = swift_allocObject();
    *(void *)(v274 + 16) = j___s7CoreP2P21NANDriverCapabilitiesV4modeAA12NANAttributeO16DeviceCapabilityV13OperationModeVvg;
    *(void *)(v274 + 24) = v266;
    uint64_t v275 = swift_allocObject();
    *(void *)(v275 + 16) = sub_1003014D8;
    *(void *)(v275 + 24) = v274;
    uint64_t v276 = v275;
    uint64_t v776 = v275;
    v773 = swift_allocObject();
    LOBYTE(v773[2].isa) = 0;
    v775 = (unsigned char *)swift_allocObject();
    v775[16] = 1;
    uint64_t v277 = swift_allocObject();
    id v278 = v772;
    *(void *)(v277 + 16) = j___s7CoreP2P21NANDriverCapabilitiesV4modeAA12NANAttributeO16DeviceCapabilityV13OperationModeVvg;
    *(void *)(v277 + 24) = v278;
    long long v279 = (void *)swift_allocObject();
    v279[2] = sub_1003014D8;
    v279[3] = v277;
    uint64_t v280 = swift_allocObject();
    *(_OWORD *)(v280 + 16) = v730;
    *(void *)(v280 + 32) = sub_100301218;
    uint64_t v281 = v779;
    *(void *)(v280 + 40) = v780;
    *(void *)(v280 + 48) = sub_100301218;
    *(void *)(v280 + 56) = v267;
    *(void *)(v280 + 64) = sub_100301208;
    *(void *)(v280 + 72) = v783;
    *(void *)(v280 + 80) = sub_100301218;
    os_log_t v282 = v774;
    *(void *)(v280 + 88) = v774;
    *(void *)(v280 + 96) = sub_100301218;
    *(void *)(v280 + 104) = v281;
    *(void *)(v280 + 112) = sub_100301208;
    *(void *)(v280 + 120) = v272;
    *(void *)(v280 + 128) = sub_100301218;
    long long v283 = v771;
    *(void *)(v280 + 136) = v771;
    *(void *)(v280 + 144) = sub_100301218;
    *(void *)(v280 + 152) = v273;
    *(void *)(v280 + 160) = sub_10030120C;
    *(void *)(v280 + 168) = v276;
    *(void *)(v280 + 176) = sub_100301218;
    *(void *)(v280 + 184) = v773;
    *(void *)(v280 + 192) = sub_100301218;
    *(void *)(v280 + 200) = v775;
    *(void *)(v280 + 208) = sub_10030120C;
    *(void *)(v280 + 216) = v279;
    swift_retain();
    v772 = v267;
    swift_retain();
    uint64_t p_type = (uint64_t)v282;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled((os_log_t)v782, (os_log_type_t)v778))
    {
      id v284 = v772;
      uint64_t v285 = v779;
      v770 = v279;
      char v286 = (uint8_t *)sub_100375300();
      uint64_t v287 = swift_slowAlloc();
      v795[0] = 0;
      uint64_t v768 = v287;
      object = v286;
      v794[0] = v287;
      *(_WORD *)char v286 = 1026;
      *(void *)&v788[0] = v286 + 2;
      *(void *)&long long v789 = sub_100301218;
      *((void *)&v789 + 1) = v780;
      int v288 = v784;
      sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v795, (uint64_t)v794);
      if (v288) {
        goto LABEL_221;
      }
      swift_release();
      *(void *)&long long v789 = sub_100301218;
      *((void *)&v789 + 1) = v284;
      sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v795, (uint64_t)v794);
      swift_release();
      *(void *)&long long v789 = sub_100301208;
      *((void *)&v789 + 1) = v783;
      sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v795, (uint64_t)v794);
      os_log_t v289 = v774;
      swift_release();
      *(void *)&long long v789 = sub_100301218;
      *((void *)&v789 + 1) = v289;
      sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v795, (uint64_t)v794);
      swift_release();
      *(void *)&long long v789 = sub_100301218;
      *((void *)&v789 + 1) = v285;
      sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v795, (uint64_t)v794);
      swift_release();
      *(void *)&long long v789 = sub_100301208;
      *((void *)&v789 + 1) = v781;
      sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v795, (uint64_t)v794);
      swift_release();
      *(void *)&long long v789 = sub_100301218;
      *((void *)&v789 + 1) = v283;
      sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v795, (uint64_t)v794);
      swift_release();
      *(void *)&long long v789 = sub_100301218;
      *((void *)&v789 + 1) = v273;
      sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v795, (uint64_t)v794);
      swift_release();
      *(void *)&long long v789 = sub_10030120C;
      *((void *)&v789 + 1) = v776;
      sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v795, (uint64_t)v794);
      swift_release();
      *(void *)&long long v789 = sub_100301218;
      *((void *)&v789 + 1) = v773;
      sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v795, (uint64_t)v794);
      swift_release();
      *(void *)&long long v789 = sub_100301218;
      *((void *)&v789 + 1) = v775;
      sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v795, (uint64_t)v794);
      swift_release();
      *(void *)&long long v789 = sub_10030120C;
      *((void *)&v789 + 1) = v770;
      sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v795, (uint64_t)v794);
      swift_release();
      id v290 = v782;
      uint64_t p_type = (uint64_t)object;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v782, (os_log_type_t)v778, "Cannot create new datapath %s to %s[%hhu] because unable to find a matching subscribe with instance ID %hhu", object, 0x1Cu);
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_10039F5FC();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v291 = xmmword_1003D4F50;
    *(unsigned char *)(v291 + 16) = 1;
    swift_willThrow();
    swift_release();
    goto LABEL_122;
  }
  swift_bridgeObjectRelease();
  uint64_t v188 = swift_allocObject();
  *(void *)(v188 + 16) = v187;
  uint64_t p_type = (uint64_t)v187;
  v782 = (unsigned char *)Logger.logObject.getter();
  int v189 = static os_log_type_t.default.getter();
  uint64_t v190 = swift_allocObject();
  *(unsigned char *)(v190 + 16) = 64;
  uint64_t v191 = swift_allocObject();
  *(unsigned char *)(v191 + 16) = 8;
  uint64_t v192 = swift_allocObject();
  *(void *)(v192 + 16) = sub_100300754;
  *(void *)(v192 + 24) = v188;
  uint64_t v193 = swift_allocObject();
  *(void *)(v193 + 16) = sub_1003011FC;
  *(void *)(v193 + 24) = v192;
  uint64_t v194 = swift_allocObject();
  *(_OWORD *)(v194 + 16) = xmmword_1003B2760;
  *(void *)(v194 + 32) = sub_100301218;
  *(void *)(v194 + 40) = v190;
  *(void *)(v194 + 48) = sub_100301218;
  *(void *)(v194 + 56) = v191;
  *(void *)(v194 + 64) = sub_100301210;
  *(void *)(v194 + 72) = v193;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  LODWORD(v781) = v189;
  os_log_type_t v195 = v189;
  uint64_t v196 = v782;
  if (!os_log_type_enabled((os_log_t)v782, v195))
  {
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_83;
  }
  uint64_t v197 = (uint8_t *)sub_100375300();
  v796[0] = swift_slowAlloc();
  v795[0] = 0;
  *(_WORD *)uint64_t v197 = 258;
  *(void *)&v788[0] = v197 + 2;
  *(void *)&long long v789 = sub_100301218;
  *((void *)&v789 + 1) = v190;
  sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v796, (uint64_t)v795);
  if (v186)
  {
LABEL_220:
    swift_unknownObjectRelease();
    goto LABEL_221;
  }
  swift_release();
  *(void *)&long long v789 = sub_100301218;
  *((void *)&v789 + 1) = v191;
  sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v796, (uint64_t)v795);
  swift_release();
  *(void *)&long long v789 = sub_100301210;
  *((void *)&v789 + 1) = v193;
  sub_1000170D0((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v789, (uint64_t)v788, (uint64_t)v796, (uint64_t)v795);
  v784 = 0;
  swift_release();
  _os_log_impl((void *)&_mh_execute_header, v196, (os_log_type_t)v781, "Attached this datapath request to the matching existing %@", v197, 0xCu);
  sub_100010BCC(&qword_10047CC30);
  swift_arrayDestroy();
  swift_slowDealloc();
  sub_10039F5FC();
LABEL_83:

  if (v771)
  {
    id v791 = v772;
    *(void *)&long long v789 = p_type;
    id v292 = v771;
    id v293 = (id)p_type;
    sub_1002B9B5C((uint64_t)&v789);
  }
  swift_beginAccess();
  unint64_t v294 = NANDatapath.Configuration.identifier.getter();
  char v295 = v294;
  unint64_t v296 = v294 >> 8;
  unint64_t v297 = v294 >> 16;
  unint64_t v298 = v294 >> 24;
  unint64_t v299 = HIDWORD(v294);
  unint64_t v300 = v294 >> 40;
  v782 = (unsigned char *)HIWORD(v294);
  swift_endAccess();
  v783 = sub_1002DAB9C((uint64_t)&v789);
  LOBYTE(v796[0]) = v295;
  BYTE1(v796[0]) = v296;
  BYTE2(v796[0]) = v297;
  BYTE3(v796[0]) = v298;
  BYTE4(v796[0]) = v299;
  BYTE5(v796[0]) = v300;
  BYTE6(v796[0]) = (_BYTE)v782;
  type metadata accessor for Dictionary();
  unint64_t v301 = (void (*)(_OWORD *, void))Dictionary.subscript.modify();
  if (*v302)
  {
    BOOL v303 = v771;
    uint64_t v304 = v771;
    sub_1002DA2EC(v303);

    v301(v788, 0);
    ((void (*)(long long *, void))v783)(&v789, 0);
    swift_release();
    swift_unknownObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v755 + 8))(v754, v762);
    sub_1000380B4((uint64_t)v798, (uint64_t *)&unk_100485B50);

    swift_release();
  }
  else
  {
    v301(v788, 0);
    ((void (*)(long long *, void))v783)(&v789, 0);
    swift_release();
    swift_unknownObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v755 + 8))(v754, v762);
    sub_1000380B4((uint64_t)v798, (uint64_t *)&unk_100485B50);
    swift_release();
  }
  return p_type;
}

uint64_t sub_1002FB4A4(void *a1)
{
  id v1 = [a1 discoveryResult];
  id v2 = [v1 serviceName];

  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v3;
}

uint64_t sub_1002FB518(void *a1)
{
  id v1 = [a1 interfaceName];
  if (!v1) {
    return 1701736302;
  }
  id v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

BOOL sub_1002FB580(void *a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = *a1 + qword_1004858A8;
  swift_beginAccess();
  if (*(unsigned __int8 *)(v11 + 24) != a2) {
    return 0;
  }
  Swift::String v12 = String.lowercased()();
  Swift::String v13 = String.lowercased()();
  if (v12._countAndFlagsBits == v13._countAndFlagsBits && v12._object == v13._object)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_9;
  }
  char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  BOOL v16 = 0;
  if (v15)
  {
LABEL_9:
    if (*(unsigned char *)(v11 + 32))
    {
      if (*(unsigned char *)(v11 + 32) == 1 && a5 == 2) {
        return 0;
      }
    }
    else if (a5 - 1 < 2)
    {
      return 0;
    }
    if (static NANClusterChangeEvent.__derived_struct_equals(_:_:)(*(unsigned __int16 *)(v11 + 25) | ((unint64_t)*(unsigned int *)(v11 + 27) << 16), a6 & 0xFFFFFFFFFFFFLL))
    {
      uint64_t v18 = *(unsigned int *)(v11 + 3);
      uint64_t v19 = *(unsigned __int16 *)(v11 + 1);
      uint64_t v20 = (*(uint64_t (**)(void))(*(void *)a7 + 232))();
      return static NANClusterChangeEvent.__derived_struct_equals(_:_:)(v19 | (v18 << 16), v20 & 0xFFFFFFFFFFFFLL);
    }
    return 0;
  }
  return v16;
}

void sub_1002FB710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (uint64_t *)((char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v10 = (void *)*v9;
  *uint64_t v8 = *v9;
  (*(void (**)(uint64_t *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v8, v5);
  if (v10)
  {
    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      Swift::String v13 = (void *)Strong;
      swift_beginAccess();
      uint64_t v14 = (void *)swift_unknownObjectWeakLoadStrong();
      if (v14)
      {
        char v15 = v14;
        id v16 = v14;
        id v17 = v13;
        id v18 = v16;
        id v19 = v17;
        uint64_t v20 = Logger.logObject.getter();
        os_log_type_t v21 = static os_log_type_t.default.getter();
        int v22 = v21;
        if (os_log_type_enabled(v20, v21))
        {
          uint64_t v23 = swift_slowAlloc();
          uint64_t v24 = swift_slowAlloc();
          uint64_t v32 = a4;
          v33[0] = v18;
          id v25 = (void *)v24;
          *(_DWORD *)uint64_t v23 = 138412546;
          CoreP2P::NANServiceName_optional v31 = v20;
          id v26 = v18;
          int v30 = v22;
          id v27 = v26;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *id v25 = v15;

          *(_WORD *)(v23 + 12) = 2112;
          v33[0] = v19;
          id v28 = v19;
          uint64_t v20 = v31;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v25[1] = v13;

          _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)v30, "%@ was invalidated detaching from %@", (uint8_t *)v23, 0x16u);
          sub_100010BCC(&qword_10047CC30);
          swift_arrayDestroy();
          a4 = v32;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v33[3] = swift_getObjectType();
        v33[0] = a4;
        swift_unknownObjectRetain();
        sub_1002D3584((uint64_t)v33);

        sub_100010754((uint64_t)v33);
      }
      else
      {
      }
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1002FBA38()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v0 = type metadata accessor for Preferences();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v6 - v2;
  swift_unownedRetainStrong();
  WiFiInterface.preferences.getter();
  swift_release();
  char v4 = Preferences.automaticallyUseEncryption.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4 & 1;
}

BOOL sub_1002FBC00(uint64_t a1)
{
  uint64_t v1 = a1 + qword_100488970;
  swift_beginAccess();
  return (*(unsigned char *)(v1 + *(int *)(type metadata accessor for NANSubscribe.Configuration() + 68)) & 1) == 0;
}

uint64_t sub_1002FBC64(uint64_t a1, uint64_t a2)
{
  return sub_1002FBCBC(a1, a2, (uint64_t (*)(void *, uint64_t))sub_1002ECC28);
}

uint64_t sub_1002FBC90(uint64_t a1, uint64_t a2)
{
  return sub_1002FBCBC(a1, a2, (uint64_t (*)(void *, uint64_t))sub_1002EDAA0);
}

uint64_t sub_1002FBCBC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void *, uint64_t))
{
  v8[3] = swift_getObjectType();
  v8[0] = a2;
  char v9 = 1;
  swift_unknownObjectRetain();
  uint64_t v6 = a3(v8, a1);
  sub_1000380B4((uint64_t)v8, &qword_1004862E8);
  return v6;
}

uint64_t sub_1002FBD54(uint64_t a1, uint64_t a2)
{
  return sub_1002FBCBC(a1, a2, (uint64_t (*)(void *, uint64_t))sub_1002F0418);
}

uint64_t sub_1002FBD80(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  type metadata accessor for NANSubscribe.Configuration();
  __chkstk_darwin();
  uint64_t v10 = (unsigned __int8 *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  DNSRecords.Identifier.description.getter(a1, a2, a3 & 1);
  swift_bridgeObjectRelease();
  id v11 = objc_allocWithZone((Class)WiFiAwareSubscribeConfiguration);
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v13 = [v11 initWithServiceName:v12];

  [v13 setAuthenticationType:0];
  uint64_t v14 = sub_1002FBCBC((uint64_t)v13, a4, (uint64_t (*)(void *, uint64_t))sub_1002ECC28);

  if (!v4)
  {
    uint64_t v15 = v14 + qword_100488970;
    swift_beginAccess();
    sub_100300CF4(v15, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for NANSubscribe.Configuration);

    uint64_t v14 = *v10;
    sub_100300D5C((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for NANSubscribe.Configuration);
  }
  return v14;
}

uint64_t sub_1002FBF40()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 88);
  *(void *)&long long v7 = *(void *)(v1 + 80);
  *((void *)&v7 + 1) = _s8InstanceCMa();
  *(void *)&long long v8 = v2;
  *((void *)&v8 + 1) = swift_getWitnessTable();
  type metadata accessor for NANDiscoveryEngine.ServiceSession();
  Dictionary.subscript.getter();
  if (!v5)
  {
    swift_endAccess();
    long long v7 = 0u;
    long long v8 = 0u;
    goto LABEL_7;
  }
  swift_endAccess();
  id v3 = v5;
  sub_1002FF540(v5);
  sub_100320DE0((uint64_t)&v7);

  if (!*((void *)&v8 + 1))
  {
LABEL_7:
    sub_1000380B4((uint64_t)&v7, &qword_10047D0D0);
    return 0;
  }
  sub_100010BCC(&qword_100486390);
  if (swift_dynamicCast()) {
    return v6;
  }
  else {
    return 0;
  }
}

void sub_1002FC0CC()
{
  swift_beginAccess();
  _s8InstanceCMa();
  swift_getWitnessTable();
  type metadata accessor for NANDiscoveryEngine.ServiceSession();
  Dictionary.subscript.getter();
  swift_endAccess();
  if (v1)
  {
    id v0 = v1;
    sub_1002FF540(v1);
    sub_100320E48();
  }
}

uint64_t sub_1002FC1F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = a4;
  uint64_t v30 = a3;
  type metadata accessor for NANPublish.Configuration();
  __chkstk_darwin();
  uint64_t v29 = (unsigned __int8 *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  __int16 v8 = *(unsigned __int8 *)(a1 + 32) | (*(unsigned __int8 *)(a1 + 33) << 8);
  swift_bridgeObjectRetain();
  DNSRecords.Identifier.description.getter(v6, v7, v8);
  swift_bridgeObjectRelease();
  id v9 = objc_allocWithZone((Class)WiFiAwarePublishConfiguration);
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v11 = [v9 initWithServiceName:v10];

  [v11 setAuthenticationType:0];
  id v12 = [objc_allocWithZone((Class)WiFiAwarePublishServiceSpecificInfo) init];
  uint64_t v13 = v30;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [v12 setTxtRecordData:isa];

  NSString v15 = String._bridgeToObjectiveC()();
  [v12 setInstanceName:v15];

  [v11 setServiceSpecificInfo:v12];
  id v16 = [objc_allocWithZone((Class)WiFiAwarePublishDatapathConfiguration) initWithServiceType:DNSRecords.Identifier.serviceType.getter(v6, v7, v8) securityConfiguration:0];
  uint64_t v17 = *(unsigned __int8 *)(v13 + 32);
  type metadata accessor for DNSRecords.SRV();
  id v18 = [objc_allocWithZone((Class)WiFiAwarePublishDatapathServiceSpecificInfo) initWithProtocolType:v17 servicePort:(unsigned __int16)NWEndpoint.Port.rawValue.getter()];
  [v16 setServiceSpecificInfo:v18];

  id v19 = [v16 serviceSpecificInfo];
  if (v19)
  {
    uint64_t v20 = v19;
    NSString v21 = String._bridgeToObjectiveC()();
    [v20 setHostname:v21];
  }
  [v11 setDatapathConfiguration:v16];
  uint64_t v22 = v32;
  uint64_t v23 = sub_1002FBCBC((uint64_t)v11, v31, (uint64_t (*)(void *, uint64_t))sub_1002EDAA0);

  if (v22)
  {
  }
  else
  {

    uint64_t v24 = v23 + qword_1004887E8;
    swift_beginAccess();
    uint64_t v25 = v24;
    id v26 = v29;
    sub_100300CF4(v25, (uint64_t)v29, (uint64_t (*)(void))type metadata accessor for NANPublish.Configuration);

    uint64_t v23 = *v26;
    sub_100300D5C((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for NANPublish.Configuration);
  }
  return v23;
}

void sub_1002FC554()
{
  uint64_t v1 = *v0;
  id v2 = [objc_allocWithZone((Class)WiFiAwarePublishServiceSpecificInfo) init];
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 88);
  uint64_t v10 = *(void *)(v1 + 80);
  uint64_t v11 = _s8InstanceCMa_0();
  uint64_t v12 = v3;
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for NANDiscoveryEngine.ServiceSession();
  Dictionary.subscript.getter();
  swift_endAccess();
  if (v14)
  {
    sub_100300B70(v14);
    swift_bridgeObjectRelease();
    sub_1002FF540(v14);
  }
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [v2 setTxtRecordData:isa, v10, v11, v12, WitnessTable];

  if (v14
    && (swift_beginAccess(),
        uint64_t v5 = swift_bridgeObjectRetain(),
        NANGenericServiceProtocol.instanceName.getter(v5),
        uint64_t v7 = v6,
        swift_bridgeObjectRelease(),
        v7))
  {
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v8 = 0;
  }
  [v2 setInstanceName:v8];

  swift_beginAccess();
  Dictionary.subscript.getter();
  swift_endAccess();
  if (v14)
  {
    sub_100300B70(v14);
    swift_bridgeObjectRelease();
    sub_1002FF540(v14);
    id v9 = v2;
    sub_1002B45A8((uint64_t)v2, NANBitmap.Channel.operatingClass.getter, 0);
  }
  else
  {
  }
}

uint64_t sub_1002FC814()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 88);
  *(void *)&long long v7 = *(void *)(v1 + 80);
  *((void *)&v7 + 1) = _s8InstanceCMa_0();
  *(void *)&long long v8 = v2;
  *((void *)&v8 + 1) = swift_getWitnessTable();
  type metadata accessor for NANDiscoveryEngine.ServiceSession();
  Dictionary.subscript.getter();
  if (!v5)
  {
    swift_endAccess();
    long long v7 = 0u;
    long long v8 = 0u;
    goto LABEL_7;
  }
  swift_endAccess();
  id v3 = v5;
  sub_1002FF540(v5);
  sub_1002AB15C((uint64_t)&v7);

  if (!*((void *)&v8 + 1))
  {
LABEL_7:
    sub_1000380B4((uint64_t)&v7, &qword_10047D0D0);
    return 0;
  }
  sub_100010BCC(&qword_100485290);
  if (swift_dynamicCast()) {
    return v6;
  }
  else {
    return 0;
  }
}

void sub_1002FC9A0()
{
  swift_beginAccess();
  _s8InstanceCMa_0();
  swift_getWitnessTable();
  type metadata accessor for NANDiscoveryEngine.ServiceSession();
  Dictionary.subscript.getter();
  swift_endAccess();
  if (v1)
  {
    id v0 = v1;
    sub_1002FF540(v1);
    sub_1002B3CC0();
  }
}

uint64_t sub_1002FCACC()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 88);
  *(void *)&long long v7 = *(void *)(v1 + 80);
  *((void *)&v7 + 1) = _s17InitiatorInstanceCMa();
  *(void *)&long long v8 = v2;
  *((void *)&v8 + 1) = swift_getWitnessTable();
  type metadata accessor for NANDiscoveryEngine.ServiceSession();
  sub_1001B8154();
  Dictionary.subscript.getter();
  if (!v5)
  {
    swift_endAccess();
    long long v7 = 0u;
    long long v8 = 0u;
    goto LABEL_7;
  }
  swift_endAccess();
  id v3 = v5;
  sub_1002FF540(v5);
  sub_1002C9670((uint64_t)&v7);

  if (!*((void *)&v8 + 1))
  {
LABEL_7:
    sub_1000380B4((uint64_t)&v7, &qword_10047D0D0);
    return 0;
  }
  sub_100010BCC(&qword_1004862E0);
  if (swift_dynamicCast()) {
    return v6;
  }
  else {
    return 0;
  }
}

void sub_1002FCCA4()
{
  swift_beginAccess();
  _s17InitiatorInstanceCMa();
  swift_getWitnessTable();
  type metadata accessor for NANDiscoveryEngine.ServiceSession();
  sub_1001B8154();
  Dictionary.subscript.getter();
  swift_endAccess();
  if (v1)
  {
    id v0 = v1;
    sub_1002FF540(v1);
    sub_1002D3CAC();
  }
}

uint64_t sub_1002FCE1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, unsigned char *a5@<X8>)
{
  uint64_t result = sub_1002FBD80(a1, a2, a3 & 1, a4);
  if (!v5) {
    *a5 = result;
  }
  return result;
}

uint64_t sub_1002FCE50()
{
  return sub_1002FBF40();
}

void sub_1002FCE78()
{
}

uint64_t sub_1002FCEA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X8>)
{
  uint64_t result = sub_1002FC1F8(a1, a2, a3, a4);
  if (!v5) {
    *a5 = result;
  }
  return result;
}

void sub_1002FCED0()
{
}

uint64_t sub_1002FCEF8()
{
  return sub_1002FC814();
}

void sub_1002FCF20()
{
}

void sub_1002FCF48(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_1002FFAE0(*(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned __int8 *)(a1 + 32) | (*(unsigned __int8 *)(a1 + 33) << 8), a2, a3);
  if (!v4)
  {
    *(_WORD *)a4 = v6;
    *(unsigned char *)(a4 + 2) = BYTE2(v6);
    *(unsigned char *)(a4 + 3) = BYTE3(v6);
    *(unsigned char *)(a4 + 4) = BYTE4(v6);
    *(unsigned char *)(a4 + 5) = BYTE5(v6);
    *(unsigned char *)(a4 + 6) = BYTE6(v6);
  }
}

uint64_t sub_1002FCFC4()
{
  return sub_1002FCACC();
}

void sub_1002FCFFC()
{
}

uint64_t sub_1002FD034(uint64_t a1, void *a2)
{
  return sub_1002FD08C(a1, a2, (uint64_t (*)(void *, uint64_t))sub_1002ECC28);
}

uint64_t sub_1002FD060(uint64_t a1, void *a2)
{
  return sub_1002FD08C(a1, a2, (uint64_t (*)(void *, uint64_t))sub_1002EDAA0);
}

uint64_t sub_1002FD08C(uint64_t a1, void *a2, uint64_t (*a3)(void *, uint64_t))
{
  v9[0] = a2;
  char v10 = 0;
  id v6 = a2;
  long long v7 = (void *)a3(v9, a1);
  if (!v3) {

  }
  return sub_1000380B4((uint64_t)v9, &qword_1004862E8);
}

uint64_t sub_1002FD104(uint64_t a1, void *a2)
{
  return sub_1002FD08C(a1, a2, (uint64_t (*)(void *, uint64_t))sub_1002F0418);
}

uint64_t sub_1002FD130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void *)(a5 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v11 = &v18[-v10];
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v7 + 64);
  swift_retain();
  v12(a4, v7);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  unsigned __int8 v14 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
  uint64_t v19 = a2;
  NSString v15 = (void (*)(unsigned char *, void))swift_modifyAtReferenceWritableKeyPath();
  sub_1001742AC(v14);
  v15(v18, 0);
  return swift_release();
}

uint64_t sub_1002FD2E8(uint64_t a1)
{
  return sub_1002FD2FC(a1);
}

uint64_t sub_1002FD2FC(uint64_t a1)
{
  KeyPath = (void *)swift_getKeyPath();
  uint64_t v3 = swift_getKeyPath();
  sub_1002EC668(a1, KeyPath, v3);
  swift_release();
  return swift_release();
}

uint64_t sub_1002FD3B4()
{
  return sub_1002FD3C8(&qword_1004888C0);
}

uint64_t sub_1002FD3C8(void *a1)
{
  sub_1002FD4FC(a1);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for NANSynchronizer()
{
  return sub_100038354();
}

uint64_t sub_1002FD438()
{
  return sub_1002FD3C8(&qword_1004888D0);
}

uint64_t type metadata accessor for NANPowerSaver()
{
  return sub_100038354();
}

uint64_t sub_1002FD464()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1002FD4FC(void *a1)
{
  uint64_t v2 = v1 + *a1;
  uint64_t v3 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_unownedRelease();
  return v1;
}

uint64_t sub_1002FD574()
{
  return sub_1002FD3C8(&qword_1004888E0);
}

uint64_t type metadata accessor for NANDFSProxy()
{
  return sub_100038354();
}

unsigned char *sub_1002FD5A0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002FD66CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t type metadata accessor for NANDiscoveryEngine.PeerChannelLearner.State()
{
  return sub_100038354();
}

uint64_t *sub_1002FD6AC(uint64_t *a1)
{
  *a1 = swift_unownedRetain();
  return a1;
}

uint64_t sub_1002FD6DC()
{
  return swift_unownedRelease();
}

uint64_t *sub_1002FD6E4(uint64_t *a1)
{
  *a1 = swift_unownedRetain();
  swift_unownedRelease();
  return a1;
}

void *sub_1002FD720(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

void *sub_1002FD72C(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unownedRelease();
  return a1;
}

uint64_t sub_1002FD760(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != 1 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)a1) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t sub_1002FD7A4(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)uint64_t result = a2 - 2;
    if (a3 >= 2) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for NANDiscoveryEngine.UnownedDeviceLink()
{
  return sub_100038354();
}

uint64_t sub_1002FD7FC()
{
  swift_unknownObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_1002FD838(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1002FD870(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_1002FD8D0(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for NANDiscoveryEngine.ServiceSession()
{
  return swift_getGenericMetadata();
}

unsigned char *storeEnumTagSinglePayload for NANDiscoveryState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002FD9F4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANDiscoveryState()
{
  return &type metadata for NANDiscoveryState;
}

unint64_t sub_1002FDA30()
{
  unint64_t result = qword_100486190;
  if (!qword_100486190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100486190);
  }
  return result;
}

uint64_t sub_1002FDA84()
{
  return swift_getWitnessTable();
}

uint64_t sub_1002FDAA0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100300BBC(a1, &qword_100485BC8, a2);
}

uint64_t sub_1002FDAAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1002FF4B8(a1, a2, a3, a4, &qword_100485BC8);
}

uint64_t sub_1002FDAB8()
{
  return 16;
}

__n128 sub_1002FDAC4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1002FDAD0(uint64_t a1)
{
  return sub_1002FD130(a1, v1[4], v1[5], v1[2], v1[3]);
}

unint64_t sub_1002FDAF4(uint64_t a1, char a2, uint64_t *a3, unint64_t a4, int a5)
{
  int v20 = a5;
  sub_100010BCC((uint64_t *)&unk_100486F40);
  __chkstk_darwin();
  uint64_t v10 = &v19[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = type metadata accessor for NANPeer.Service(0);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  unsigned __int8 v14 = &v19[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  id v16 = &v19[-v15];
  sub_1000136F4(a1, (uint64_t)v10, (uint64_t *)&unk_100486F40);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    unint64_t result = sub_1000380B4((uint64_t)v10, (uint64_t *)&unk_100486F40);
    if (a2) {
      return sub_1003A0CD4(a4, *a3);
    }
  }
  else
  {
    sub_100300DD8((uint64_t)v10, (uint64_t)v16, type metadata accessor for NANPeer.Service);
    id v18 = (void *)*a3;
    if (a2)
    {
      return sub_100300DD8((uint64_t)v16, v18[7] + *(void *)(v12 + 72) * a4, type metadata accessor for NANPeer.Service);
    }
    else
    {
      sub_100300DD8((uint64_t)v16, (uint64_t)v14, type metadata accessor for NANPeer.Service);
      return sub_1002960C8(a4, v20, (uint64_t)v14, v18);
    }
  }
  return result;
}

unint64_t sub_1002FDD14(uint64_t a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v20 = a5;
  sub_100010BCC(&qword_1004862B8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100010BCC((uint64_t *)&unk_100484A90);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  unsigned __int8 v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  id v16 = (char *)&v19 - v15;
  sub_1000136F4(a1, (uint64_t)v10, &qword_1004862B8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    unint64_t result = sub_1000380B4((uint64_t)v10, &qword_1004862B8);
    if (a2) {
      return sub_1003A1648(a4, *a3);
    }
  }
  else
  {
    sub_10006EC68((uint64_t)v10, (uint64_t)v16, (uint64_t *)&unk_100484A90);
    id v18 = (void *)*a3;
    if (a2)
    {
      return sub_10006EC68((uint64_t)v16, v18[7] + *(void *)(v12 + 72) * a4, (uint64_t *)&unk_100484A90);
    }
    else
    {
      sub_10006EC68((uint64_t)v16, (uint64_t)v14, (uint64_t *)&unk_100484A90);
      return sub_10029636C(a4, v20 & 0xFFFFFFFFFFFFLL, (uint64_t)v14, v18);
    }
  }
  return result;
}

uint64_t sub_1002FDF18(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  type metadata accessor for UUID();
  __chkstk_darwin();
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *a1;
  if (v13)
  {
    unsigned __int8 v14 = (void *)*a3;
    if (a2)
    {
      *(void *)(v14[7] + 8 * a4) = v13;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v10 + 16))(v12, a5);
      sub_100296434(a4, (uint64_t)v12, v13, v14);
    }
  }
  else if (a2)
  {
    swift_arrayDestroy();
    sub_1003A1860(a4, *a3);
  }
  return swift_bridgeObjectRetain();
}

unint64_t sub_1002FE050(uint64_t a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v20 = a5;
  sub_100010BCC(&qword_100487CE0);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AWDLPeer(0);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  unsigned __int8 v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v16 = (char *)&v19 - v15;
  sub_1000136F4(a1, (uint64_t)v10, &qword_100487CE0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    unint64_t result = sub_1000380B4((uint64_t)v10, &qword_100487CE0);
    if (a2) {
      return sub_1003A09C4(a4, *a3);
    }
  }
  else
  {
    sub_100300DD8((uint64_t)v10, (uint64_t)v16, type metadata accessor for AWDLPeer);
    id v18 = (void *)*a3;
    if (a2)
    {
      return sub_100300DD8((uint64_t)v16, v18[7] + *(void *)(v12 + 72) * a4, type metadata accessor for AWDLPeer);
    }
    else
    {
      sub_100300DD8((uint64_t)v16, (uint64_t)v14, type metadata accessor for AWDLPeer);
      return sub_1002964EC(a4, v20 & 0xFFFFFFFFFFFFLL, (uint64_t)v14, v18);
    }
  }
  return result;
}

uint64_t sub_1002FE274(uint64_t result)
{
  if ((_BYTE)result)
  {
    unsigned __int8 v1 = result;
    swift_stdlib_random();
    unint64_t result = 0;
    if (v1 && -v1 % v1)
    {
      int v2 = (-v1 % v1);
      do
        swift_stdlib_random();
      while (v2);
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_1002FE310()
{
  unint64_t result = qword_100486220;
  if (!qword_100486220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100486220);
  }
  return result;
}

uint64_t sub_1002FE364()
{
  return swift_release();
}

uint64_t sub_1002FE3A0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002FE3D8()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1002FE410()
{
  return sub_1002DB900(*(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t type metadata accessor for NANDiscoveryEngine.BeaconScheduler.Reason()
{
  return sub_100038354();
}

int8x8_t sub_1002FE434(uint64_t a1, unsigned __int8 *a2)
{
  Swift::UInt64 v3 = sub_1002E9130(*(unsigned char *)(v2 + 32), *a2 | (unsigned __int16)(a2[1] << 8), *(void *)(v2 + 16), *(void *)(v2 + 24));
  return TimeBitmap.SlotsView.formUnion(_:)(v3, v4, v5);
}

int8x8_t sub_1002FE484(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = sub_1002E943C(*a2 | (unsigned __int16)(a2[1] << 8), *(void *)(v2 + 16), *(void *)(v2 + 24));
  return TimeBitmap.SlotsView.formUnion(_:)(v3, v4, v5);
}

BOOL sub_1002FE4D4()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 40);
  return sub_100303CEC(v1, v2) && sub_100303D34(v1, v2) != 0;
}

BOOL sub_1002FE538(uint64_t a1)
{
  return sub_1002E9C14(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1002FE55C(uint64_t a1, uint64_t *a2)
{
  return sub_1002E9D50(a1, a2, v2[2], v2[3], v2[4], v2[5]) & 1;
}

uint64_t sub_1002FE580(uint64_t a1)
{
  *(unsigned char *)(v1 + 16) = 0;
  type metadata accessor for P2PTimer();
  variable initialization expression of AWDLPeer.lastUpdated();
  *(void *)(v1 + qword_100485CE0) = 0;
  *(void *)(v1 + qword_100485CE8) = a1;
  swift_unownedRetain();
  return v1;
}

uint64_t sub_1002FE5F4(uint64_t a1)
{
  uint64_t v3 = v1 + qword_100485D70;
  uint64_t v4 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(_WORD *)(v1 + qword_100485D78) = 256;
  *(void *)(v1 + qword_100485D80) = a1;
  swift_unownedRetain();
  return v1;
}

uint64_t sub_1002FE690(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 88);
  uint64_t v5 = *(void *)(*(void *)v1 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v51 = *(void *)(v6 - 8);
  uint64_t v52 = v6;
  __chkstk_darwin();
  uint64_t v48 = (char *)&v47 - v7;
  uint64_t v47 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v47 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init(subsystem:category:)();
  uint64_t v11 = qword_100485BB0;
  uint64_t v12 = _s8InstanceCMa();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v53 = v5;
  uint64_t v54 = v12;
  uint64_t v55 = v4;
  uint64_t v56 = WitnessTable;
  type metadata accessor for NANDiscoveryEngine.ServiceSession();
  *(void *)(v2 + v11) = Dictionary.init()();
  uint64_t v14 = qword_100485BB8;
  uint64_t v15 = _s8InstanceCMa_0();
  uint64_t v16 = swift_getWitnessTable();
  uint64_t v53 = v5;
  uint64_t v54 = v15;
  uint64_t v55 = v4;
  uint64_t v56 = v16;
  type metadata accessor for NANDiscoveryEngine.ServiceSession();
  *(void *)(v2 + v14) = Dictionary.init()();
  uint64_t v17 = qword_100485BC0;
  uint64_t v18 = _s17InitiatorInstanceCMa();
  uint64_t v19 = swift_getWitnessTable();
  uint64_t v53 = v5;
  uint64_t v54 = v18;
  uint64_t v55 = v4;
  uint64_t v56 = v19;
  type metadata accessor for NANDiscoveryEngine.ServiceSession();
  sub_1001B8154();
  *(void *)(v2 + v17) = Dictionary.init()();
  uint64_t v20 = qword_100485BC8;
  uint64_t v21 = _s17ResponderInstanceCMa();
  uint64_t v22 = swift_getWitnessTable();
  uint64_t v53 = v5;
  uint64_t v54 = v21;
  uint64_t v55 = v4;
  uint64_t v56 = v22;
  type metadata accessor for NANDiscoveryEngine.ServiceSession();
  *(void *)(v2 + v20) = Dictionary.init()();
  uint64_t v23 = qword_100485BD0;
  type metadata accessor for NANDiscoveryEngine.UnownedDeviceLink();
  sub_1002FE310();
  *(void *)(v2 + v23) = Dictionary.init()();
  uint64_t v24 = qword_100485BD8;
  *(void *)(v2 + v24) = *(void *)NANDiscoveryWindowIndex.first.unsafeMutableAddressor();
  *(void *)(v2 + qword_100485BE0) = 0;
  *(void *)(v2 + qword_100485BE8) = 0;
  type metadata accessor for P2PTimer();
  variable initialization expression of AWDLPeer.lastUpdated();
  variable initialization expression of AWDLPeer.lastUpdated();
  uint64_t v25 = (void *)(v2 + qword_100485C00);
  uint64_t v26 = sub_100017DF0((uint64_t)&off_100466EF0);
  *uint64_t v25 = &_swiftEmptySetSingleton;
  v25[1] = v26;
  id v27 = (void *)(v2 + qword_100485C08);
  uint64_t v28 = sub_100017DF0((uint64_t)&off_100466F18);
  *id v27 = &_swiftEmptySetSingleton;
  v27[1] = v28;
  uint64_t v29 = v2 + *(void *)(*(void *)v2 + 232);
  uint64_t v30 = sub_100010BCC(&qword_100485CB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v29, 1, 1, v30);
  uint64_t v31 = v2 + *(void *)(*(void *)v2 + 240);
  uint64_t v32 = type metadata accessor for PriorityRadioConstraint();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v31, 1, 1, v32);
  uint64_t v33 = v2 + *(void *)(*(void *)v2 + 248);
  UUID.init()();
  *(unsigned char *)(v33 + *(int *)(sub_100010BCC(&qword_100486260) + 36)) = 6;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v33, v10, v47);
  *(unsigned char *)(v2 + *(void *)(*(void *)v2 + 288)) = 0;
  *(void *)(v2 + *(void *)(*(void *)v2 + 280)) = a1;
  type metadata accessor for NANDiscoveryEngine.StateMachine();
  swift_unownedRetain();
  swift_allocObject();
  uint64_t v34 = swift_retain();
  uint64_t v35 = sub_1002FE580(v34);
  swift_release();
  *(void *)(v2 + qword_100485C10) = v35;
  type metadata accessor for NANDiscoveryEngine.BeaconScheduler();
  swift_allocObject();
  *(void *)(v2 + qword_100485C18) = sub_1002FE5F4(a1);
  type metadata accessor for NANDiscoveryEngine.PeerChannelLearner();
  swift_allocObject();
  uint64_t v36 = swift_retain();
  *(void *)(v2 + qword_100485C20) = sub_1002EA494(v36);
  type metadata accessor for LowLatencyInternetRequesterPolicy();
  uint64_t v37 = swift_retain();
  id v38 = sub_1003536A4(v37);
  swift_release();
  *(void *)(v2 + *(void *)(*(void *)v2 + 256)) = v38;
  type metadata accessor for LowLatencyInternetProviderPolicy();
  uint64_t v39 = swift_retain();
  id v40 = sub_100353870(v39);
  swift_release();
  *(void *)(v2 + *(void *)(*(void *)v2 + 264)) = v40;
  type metadata accessor for NANFollowUpTransmitter();
  uint64_t v41 = swift_retain();
  *(void *)(v2 + *(void *)(*(void *)v2 + 272)) = sub_100302A14(v41);
  uint64_t v42 = AssociatedConformanceWitness;
  uint64_t v43 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 104);
  uint64_t v44 = swift_checkMetadataState();
  uint64_t v45 = v48;
  v43(v44, v42);
  (*(void (**)(uint64_t, char *, uint64_t))(v51 + 32))(v2 + *(void *)(*(void *)v2 + 224), v45, v52);
  sub_1002DC5B8();
  return v2;
}

uint64_t sub_1002FEE5C(uint64_t a1)
{
  return sub_1002FE690(a1);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_1002FEE98(uint64_t a1, void *a2)
{
}

BOOL sub_1002FEF18(uint64_t a1)
{
  return sub_1002E4C60(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1002FEF3C()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

BOOL sub_1002FEF74(uint64_t a1, uint64_t a2)
{
  return sub_1002E81CC(a1, a2, v2[4], v2[2], v2[3]);
}

uint64_t sub_1002FEF80(void *a1)
{
  return (*(uint64_t (**)(void, void))(v1 + 32))(*a1, a1[1]) & 1;
}

uint64_t sub_1002FEFB4()
{
  return sub_1002FF3AC(&qword_100486278, &qword_100485CC8, (void (*)(void))sub_1002FEFF0);
}

unint64_t sub_1002FEFF0()
{
  unint64_t result = qword_100486280;
  if (!qword_100486280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100486280);
  }
  return result;
}

void *sub_1002FF044@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *result + qword_100488918;
  __int16 v3 = *(_WORD *)(v2 + 4);
  *(_DWORD *)a2 = *(_DWORD *)v2;
  *(_WORD *)(a2 + 4) = v3;
  return result;
}

uint64_t sub_1002FF06C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = swift_unownedRetainStrong();
  *a1 = result;
  return result;
}

BOOL sub_1002FF098()
{
  return sub_1002C9C88();
}

uint64_t sub_1002FF0C8()
{
  return sub_1002770E8() & 1;
}

uint64_t sub_1002FF0F8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1002E5D54(a1, v2, a2);
}

uint64_t sub_1002FF118()
{
  return sub_1002E8F20(v0[4], v0[2], v0[3], (void (*)(void))sub_1002E5FA4);
}

void sub_1002FF14C(unsigned __int8 *a1)
{
  sub_1002E77D8(a1, v1);
}

uint64_t sub_1002FF168()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 40) + 64))(*(void *)(v0 + 24));
}

BOOL sub_1002FF1B0()
{
  return *(unsigned char *)(v0 + 48) == 1 && sub_100303CEC(*(void *)(v0 + 24), *(void *)(v0 + 40));
}

uint64_t sub_1002FF200(uint64_t *a1)
{
  return sub_1002E6B00(a1, *(uint64_t **)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1002FF224(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010BCC(&qword_1004862B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002FF28C()
{
  return sub_100320D8C();
}

uint64_t sub_1002FF2B8()
{
  return sub_1002AB1C4();
}

uint64_t sub_1002FF2E4(void *a1)
{
  uint64_t v1 = *a1 + qword_100488970;
  swift_beginAccess();
  return *(unsigned __int8 *)(v1 + *(int *)(type metadata accessor for NANSubscribe.Configuration() + 60));
}

uint64_t sub_1002FF348(void *a1)
{
  uint64_t v1 = *a1 + qword_1004887E8;
  swift_beginAccess();
  return *(unsigned __int8 *)(v1 + *(int *)(type metadata accessor for NANPublish.Configuration() + 80));
}

uint64_t sub_1002FF3AC(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100014434(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1002FF418()
{
  unint64_t result = qword_1004862D0;
  if (!qword_1004862D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004862D0);
  }
  return result;
}

uint64_t sub_1002FF46C()
{
  return sub_1002E8F20(v0[4], v0[2], v0[3], (void (*)(void))sub_1002E1BD8);
}

uint64_t sub_1002FF4A0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100300BBC(a1, &qword_100485BB8, a2);
}

uint64_t sub_1002FF4AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1002FF4B8(a1, a2, a3, a4, &qword_100485BB8);
}

uint64_t sub_1002FF4B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v6 = swift_bridgeObjectRetain();
  return sub_1002DAC84(v6, a5);
}

uint64_t sub_1002FF4EC()
{
  return 16;
}

__n128 sub_1002FF4F8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1002FF504(uint64_t result)
{
  if (result) {
    return swift_unownedRelease();
  }
  return result;
}

uint64_t sub_1002FF510(uint64_t a1)
{
  return sub_1002E4244(a1, *(unsigned __int16 *)(v1 + 48) | ((unint64_t)*(unsigned int *)(v1 + 50) << 16), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40)) & 1;
}

void *sub_1002FF540(void *result)
{
  if (result)
  {

    return (void *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1002FF580@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100300BBC(a1, &qword_100485BC0, a2);
}

uint64_t sub_1002FF58C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1002FF4B8(a1, a2, a3, a4, &qword_100485BC0);
}

uint64_t sub_1002FF598()
{
  return 16;
}

__n128 sub_1002FF5A4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1002FF5B0(uint64_t result, char a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)(result + 16);
  if (!v4) {
    return result;
  }
  LODWORD(v6) = *(unsigned __int8 *)(result + 38);
  uint64_t v7 = *(unsigned __int8 *)(result + 37);
  uint64_t v8 = *(unsigned int *)(result + 32);
  uint64_t v9 = (void *)*a3;
  unint64_t v10 = (v7 << 40) | ((unint64_t)*(unsigned __int8 *)(result + 36) << 32) | v8;
  uint64_t v42 = result;
  swift_bridgeObjectRetain();
  unint64_t v12 = sub_10039F82C(v10);
  uint64_t v13 = v9[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14)) {
    goto LABEL_27;
  }
  LOBYTE(v3) = v11;
  if (v9[3] >= v15)
  {
    if ((a2 & 1) == 0) {
      goto LABEL_29;
    }
    while (1)
    {
LABEL_7:
      uint64_t v18 = (void *)*a3;
      if (v3)
      {
        uint64_t v19 = v18[7];
        unsigned int v20 = *(unsigned __int8 *)(v19 + v12);
        if (v20 <= v6) {
          LOBYTE(v20) = v6;
        }
        *(unsigned char *)(v19 + v12) = v20;
        uint64_t v21 = a3;
        uint64_t v22 = v4 - 1;
        if (v4 == 1) {
          return swift_bridgeObjectRelease();
        }
      }
      else
      {
        v18[(v12 >> 6) + 8] |= 1 << v12;
        uint64_t v23 = v18[6] + 8 * v12;
        *(_DWORD *)uint64_t v23 = v8;
        *(unsigned char *)(v23 + 4) = v41;
        *(unsigned char *)(v23 + 5) = v7;
        *(unsigned char *)(v18[7] + v12) = v6;
        uint64_t v24 = v18[2];
        BOOL v25 = __OFADD__(v24, 1);
        uint64_t v26 = v24 + 1;
        uint64_t v21 = a3;
        if (v25) {
          goto LABEL_28;
        }
        _OWORD v18[2] = v26;
        uint64_t v22 = v4 - 1;
        if (v4 == 1) {
          return swift_bridgeObjectRelease();
        }
      }
      for (unint64_t i = (unsigned __int8 *)(v42 + 46); ; i += 8)
      {
        LODWORD(v8) = *i;
        uint64_t v4 = *(i - 1);
        uint64_t v6 = *(i - 2);
        uint64_t v7 = *(unsigned int *)(i - 6);
        uint64_t v30 = *v21;
        uint64_t v3 = (v4 << 40) | (v6 << 32) | v7;
        unint64_t v31 = sub_10039F82C(v3);
        uint64_t v33 = *(void *)(v30 + 16);
        BOOL v34 = (v32 & 1) == 0;
        BOOL v25 = __OFADD__(v33, v34);
        uint64_t v35 = v33 + v34;
        if (v25) {
          break;
        }
        unint64_t v12 = v32;
        if (*(void *)(v30 + 24) < v35)
        {
          sub_100292238(v35, 1);
          unint64_t v31 = sub_10039F82C(v3);
          if ((v12 & 1) != (v36 & 1)) {
            goto LABEL_30;
          }
        }
        uint64_t v21 = a3;
        uint64_t v37 = (void *)*a3;
        if (v12)
        {
          uint64_t v28 = v37[7];
          unsigned int v29 = *(unsigned __int8 *)(v28 + v31);
          if (v29 <= v8) {
            LOBYTE(v29) = v8;
          }
          *(unsigned char *)(v28 + v31) = v29;
        }
        else
        {
          v37[(v31 >> 6) + 8] |= 1 << v31;
          uint64_t v38 = v37[6] + 8 * v31;
          *(_DWORD *)uint64_t v38 = v7;
          *(unsigned char *)(v38 + 4) = v6;
          *(unsigned char *)(v38 + 5) = v4;
          *(unsigned char *)(v37[7] + v31) = v8;
          uint64_t v39 = v37[2];
          BOOL v25 = __OFADD__(v39, 1);
          uint64_t v40 = v39 + 1;
          if (v25) {
            goto LABEL_28;
          }
          v37[2] = v40;
        }
        if (!--v22) {
          return swift_bridgeObjectRelease();
        }
      }
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      sub_1003A32A4();
    }
  }
  sub_100292238(v15, a2 & 1);
  uint64_t v16 = sub_10039F82C(v10);
  if ((v3 & 1) == (v17 & 1))
  {
    unint64_t v12 = v16;
    goto LABEL_7;
  }
LABEL_30:
  __n128 result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1002FF848(uint64_t result, char a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)(result + 16);
  if (!v4) {
    return result;
  }
  uint64_t v38 = result;
  char v37 = *(unsigned char *)(result + 38);
  uint64_t v6 = *(unsigned __int8 *)(result + 37);
  uint64_t v7 = *(unsigned int *)(result + 32);
  uint64_t v8 = *a3;
  uint64_t v9 = *(unsigned __int8 *)(result + 36);
  uint64_t v10 = (v6 << 40) | (v9 << 32) | v7;
  swift_bridgeObjectRetain();
  unint64_t v12 = sub_10039F82C(v10);
  uint64_t v13 = *(void *)(v8 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  LOBYTE(v3) = v11;
  if (*(void *)(v8 + 24) >= v15)
  {
    if ((a2 & 1) == 0) {
      goto LABEL_24;
    }
    if ((v11 & 1) == 0) {
      goto LABEL_9;
    }
    while (1)
    {
LABEL_11:
      uint64_t v23 = v4 - 1;
      uint64_t v24 = a3;
      if (v4 == 1) {
        return swift_bridgeObjectRelease();
      }
      for (unint64_t i = (unsigned __int8 *)(v38 + 46); ; i += 8)
      {
        LODWORD(v7) = *i;
        uint64_t v4 = *(i - 1);
        uint64_t v9 = *(i - 2);
        uint64_t v6 = *(unsigned int *)(i - 6);
        uint64_t v26 = *v24;
        uint64_t v3 = (v4 << 40) | (v9 << 32) | v6;
        unint64_t v27 = sub_10039F82C(v3);
        uint64_t v29 = *(void *)(v26 + 16);
        BOOL v30 = (v28 & 1) == 0;
        BOOL v21 = __OFADD__(v29, v30);
        uint64_t v31 = v29 + v30;
        if (v21) {
          goto LABEL_22;
        }
        unint64_t v12 = v28;
        if (*(void *)(v26 + 24) < v31)
        {
          sub_100292238(v31, 1);
          unint64_t v27 = sub_10039F82C(v3);
          if ((v12 & 1) != (v32 & 1)) {
            goto LABEL_26;
          }
        }
        uint64_t v24 = a3;
        if ((v12 & 1) == 0) {
          break;
        }
LABEL_15:
        if (!--v23) {
          return swift_bridgeObjectRelease();
        }
      }
      uint64_t v33 = (void *)*a3;
      *(void *)(*a3 + 8 * (v27 >> 6) + 64) |= 1 << v27;
      uint64_t v34 = v33[6] + 8 * v27;
      *(_DWORD *)uint64_t v34 = v6;
      *(unsigned char *)(v34 + 4) = v9;
      *(unsigned char *)(v34 + 5) = v4;
      *(unsigned char *)(v33[7] + v27) = v7;
      uint64_t v35 = v33[2];
      BOOL v21 = __OFADD__(v35, 1);
      uint64_t v36 = v35 + 1;
      if (!v21) {
        break;
      }
LABEL_23:
      while (1)
      {
        __break(1u);
LABEL_24:
        sub_1003A32A4();
        if (v3) {
          break;
        }
LABEL_9:
        uint64_t v18 = (void *)*a3;
        *(void *)(*a3 + 8 * (v12 >> 6) + 64) |= 1 << v12;
        uint64_t v19 = v18[6] + 8 * v12;
        *(_DWORD *)uint64_t v19 = v7;
        *(unsigned char *)(v19 + 4) = v9;
        *(unsigned char *)(v19 + 5) = v6;
        *(unsigned char *)(v18[7] + v12) = v37;
        uint64_t v20 = v18[2];
        BOOL v21 = __OFADD__(v20, 1);
        uint64_t v22 = v20 + 1;
        if (!v21)
        {
          _OWORD v18[2] = v22;
          goto LABEL_11;
        }
      }
    }
    v33[2] = v36;
    goto LABEL_15;
  }
  sub_100292238(v15, a2 & 1);
  uint64_t v16 = sub_10039F82C(v10);
  if ((v3 & 1) == (v17 & 1))
  {
    unint64_t v12 = v16;
    if ((v3 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_11;
  }
LABEL_26:
  __n128 result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1002FFAB4()
{
  return sub_1002EAD70();
}

void sub_1002FFAE0(uint64_t a1, uint64_t a2, __int16 a3, void *a4, uint64_t a5)
{
  __int16 v9 = a3 & 0xFF01;
  id v10 = a4;
  LOBYTE(v14) = 0;
  id v11 = [objc_allocWithZone((Class)WiFiAwareDatapathConfiguration) initWithDiscoveryResult:v10 serviceType:DNSRecords.Identifier.serviceType.getter(a1, a2, v9) passphrase:0 pmk:0 pmkID:0 serviceSpecificInfo:0 internetSharingConfiguration:0 pairingMethod:0 pairingCachingEnabled:0 pairSetupServiceSpecificInfo:v14];

  unint64_t v12 = (void *)sub_1002FBCBC((uint64_t)v11, a5, (uint64_t (*)(void *, uint64_t))sub_1002F0418);
  if (!v5)
  {
    uint64_t v13 = (uint64_t)v12 + qword_1004858A8;
    swift_beginAccess();
    sub_1002D74FC(v13, (uint64_t)&v15);

    sub_1002D7558((uint64_t)&v15);
  }
}

uint64_t sub_1002FFC18()
{
  return sub_1002FB4A4(*(void **)(v0 + 16));
}

uint64_t sub_1002FFC20()
{
  return _swift_deallocObject(v0, 17, 7);
}

unsigned char **sub_1002FFC30(unsigned char **a1, uint64_t a2, uint64_t a3)
{
  return sub_1000171AC(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

uint64_t sub_1002FFC38()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFC48()
{
  return sub_10001710C(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1002FFC50(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  return sub_100017134(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_1002FFC58@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 24);
  *a1 = *(void *)(v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1002FFC64()
{
  return sub_10039F608(*(void (**)(uint64_t *__return_ptr))(v0 + 16));
}

uint64_t sub_1002FFC6C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFC7C()
{
  return _swift_deallocObject(v0, 22, 7);
}

uint64_t sub_1002FFC8C()
{
  return sub_10039F6F8(*(void (**)(uint64_t *__return_ptr))(v0 + 16));
}

uint64_t sub_1002FFC94()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFCA4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFCB4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFCC4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFCD4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFCE4@<X0>(unsigned char *a1@<X8>)
{
  return sub_10027E584(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t sub_1002FFCEC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_1003A0330(a1, a2, a3, *(void (**)(uint64_t *__return_ptr))(v3 + 16));
}

uint64_t sub_1002FFCF4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFD04()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFD14()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFD24()
{
  return _swift_deallocObject(v0, 17, 7);
}

BOOL sub_1002FFD34(void *a1)
{
  return sub_1002FB580(a1, *(unsigned char *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(unsigned char *)(v1 + 48), *(unsigned __int16 *)(v1 + 49) | ((unint64_t)*(unsigned int *)(v1 + 51) << 16), *(void *)(v1 + 56));
}

uint64_t sub_1002FFD70()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFD80()
{
  return _swift_deallocObject(v0, 22, 7);
}

uint64_t sub_1002FFD90()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFDA4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFDB4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFDC4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFDD4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFDE4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFDF4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFE04()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFE14()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFE24()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFE34()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFE44@<X0>(uint64_t *a1@<X8>)
{
  return sub_100030FC4(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t sub_1002FFE4C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_1003A02D0(a1, a2, a3, *(void (**)(uint64_t *__return_ptr))(v3 + 16));
}

uint64_t sub_1002FFE54()
{
  return _swift_deallocObject(v0, 22, 7);
}

uint64_t sub_1002FFE64()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFE74()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFE84()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFE94()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFEA4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFEB4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFEC4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFED4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFEE4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFEF4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFF04()
{
  return _swift_deallocObject(v0, 22, 7);
}

uint64_t sub_1002FFF14()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFF24()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFF34()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFF44()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFF54()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFF64()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFF74()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFF84()
{
  return sub_10028FD5C(*(uint64_t (**)(void))(v0 + 16));
}

void sub_1002FFF8C(uint64_t *a1, void **a2, uint64_t a3)
{
  sub_100030FF4(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_1002FFF94()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFFA4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFFB4()
{
  return _swift_deallocObject(v0, 22, 7);
}

uint64_t sub_1002FFFC4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFFD4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFFE4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002FFFF4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100300004()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100300014()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100300024()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100300034()
{
  return _swift_deallocObject(v0, 22, 7);
}

uint64_t sub_100300044()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100300054()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100300064()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100300074()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100300084()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100300094()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1003000A4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1003000B4()
{
  return _swift_deallocObject(v0, 22, 7);
}

uint64_t sub_1003000C4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1003000D4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1003000E4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1003000F4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100300104()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100300114()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100300124()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100300134()
{
  return _swift_deallocObject(v0, 22, 7);
}

uint64_t sub_100300144()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100300154()
{
  return sub_1002FBA38();
}

BOOL sub_10030015C()
{
  return sub_1002FBC00(*(void *)(v0 + 16));
}

uint64_t sub_100300164()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100300174()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100300184()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100300194()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1003001A4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1003001B4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1003001C4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1003001D4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1003001E4()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_100300210()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100300238@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t sub_100300268(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_1003A0390(a1, a2, a3, *(void (**)(uint64_t *__return_ptr))(v3 + 16));
}

uint64_t sub_100300270()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100300280()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100300290()
{
  return _swift_deallocObject(v0, 22, 7);
}

uint64_t sub_1003002A0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1003002B0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1003002C0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1003002D0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1003002E0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1003002F0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100300300()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100300310()
{
  return _swift_deallocObject(v0, 22, 7);
}

uint64_t sub_100300320()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100300330()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100300340()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100300350()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100300360()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100300370()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100300380()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100300390()
{
  return _swift_deallocObject(v0, 22, 7);
}

uint64_t sub_1003003A0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1003003B0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1003003C0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1003003D0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1003003E0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1003003F0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100300400()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100300410()
{
  return _swift_deallocObject(v0, 22, 7);
}

uint64_t sub_100300420()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100300430()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100300440()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100300450()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100300460()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100300470()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100300480()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100300490()
{
  return _swift_deallocObject(v0, 22, 7);
}

uint64_t sub_1003004A0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1003004B0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1003004C0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1003004D0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1003004E0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1003004F0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100300500()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100300510()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100300548()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100300580()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, v6, v5);
}

void sub_100300670()
{
  uint64_t v1 = *(void *)(type metadata accessor for Logger() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  sub_1002FB710(v3, v4, v0 + v2, v5);
}

uint64_t sub_10030071C()
{
  return _swift_deallocObject(v0, 24, 7);
}

id sub_100300754()
{
  return *(id *)(v0 + 16);
}

uint64_t sub_10030075C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10030076C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10030077C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003007B4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1003007C4()
{
  return _swift_deallocObject(v0, 22, 7);
}

void sub_1003007D4(uint64_t a1@<X8>)
{
  __int16 v2 = *(_WORD *)(v1 + 20);
  *(_DWORD *)a1 = *(_DWORD *)(v1 + 16);
  *(_WORD *)(a1 + 4) = v2;
}

uint64_t sub_1003007E8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1003007F8()
{
  if ([*(id *)(v0 + 16) automatic]) {
    return 0x6974616D6F747561;
  }
  else {
    return 0;
  }
}

uint64_t sub_100300844()
{
  if ([*(id *)(v0 + 16) provider]) {
    return 0x72656469766F7270;
  }
  else {
    return 0x6574736575716572;
  }
}

uint64_t sub_1003008A0()
{
  return sub_1002FB518(*(void **)(v0 + 16));
}

uint64_t sub_1003008A8()
{
  return _swift_deallocObject(v0, 17, 7);
}

void sub_1003008B8(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 16);
}

uint64_t sub_1003008C4()
{
  return sub_10039F668(*(void (**)(uint64_t *__return_ptr))(v0 + 16));
}

uint64_t sub_1003008CC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1003008DC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1003008EC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1003008FC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10030090C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10030091C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10030092C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10030093C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10030094C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10030095C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10030096C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10030097C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10030098C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10030099C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1003009AC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1003009BC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1003009CC()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  sub_100010754(v0 + v6);

  return _swift_deallocObject(v0, v6 + 32, v5);
}

void sub_100300ABC()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = *(void *)(type metadata accessor for Logger() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[6];
  uint64_t v8 = (uint64_t)v0 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);

  sub_1002EC2C8(v6, v7, (uint64_t)v0 + v5, v8, v1, v2, v3);
}

void *sub_100300B70(void *result)
{
  if (result)
  {
    id v1 = result;
    return (void *)swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100300BB0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100300BBC(a1, &qword_100485BB0, a2);
}

uint64_t sub_100300BBC@<X0>(void *a1@<X0>, void *a2@<X3>, void *a3@<X8>)
{
  uint64_t v4 = (void *)(*a1 + *a2);
  swift_beginAccess();
  *a3 = *v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100300C10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1002FF4B8(a1, a2, a3, a4, &qword_100485BB0);
}

uint64_t sub_100300C1C()
{
  return 16;
}

__n128 sub_100300C28(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_100300C34(uint64_t *a1)
{
  sub_1002E34C4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t (*)(void, void, void))_s8InstanceCMa);
}

void sub_100300C78(uint64_t *a1)
{
  sub_1002E34C4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t (*)(void, void, void))_s8InstanceCMa_0);
}

uint64_t sub_100300CBC()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100300CF4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100300D5C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_100300DBC(unsigned __int8 *a1)
{
  sub_1002E30E0(a1, *(uint64_t **)(v1 + 16));
}

uint64_t sub_100300DD8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100300E40(uint64_t a1)
{
  return sub_1002E3044(a1, *(unsigned __int16 **)(v1 + 48), *(unsigned char *)(v1 + 56), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40)) & 1;
}

uint64_t sub_100300E6C()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 40) + 96))(*(void *)(v0 + 24));
}

uint64_t sub_100300EB4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100010BCC(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

uint64_t sub_100300F18(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_100300F60(uint64_t *a1)
{
  sub_1002E36D8(a1, *(void *)(v1 + 32), *(void *)(v1 + 40), *(void **)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100300F84(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100300FE8()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100301028(uint64_t a1, uint64_t a2)
{
  return sub_1002EA81C(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

void sub_100301030()
{
}

uint64_t sub_10030105C(unsigned __int16 *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  unsigned int v2 = a2 + 0xFFFF;
  if ((a2 + 0xFFFF) <= 0xFFFEFFFF) {
    unsigned int v3 = 2;
  }
  else {
    unsigned int v3 = 4;
  }
  if (v2 < 0xFF0000) {
    unsigned int v3 = 1;
  }
  if (v2 >= 0x10000) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  switch(v4)
  {
    case 1:
      uint64_t v4 = *((unsigned __int8 *)a1 + 2);
      if (!*((unsigned char *)a1 + 2)) {
        return v4;
      }
      goto LABEL_17;
    case 2:
      uint64_t v4 = a1[1];
      if (!a1[1]) {
        return v4;
      }
      goto LABEL_17;
    case 3:
      __break(1u);
      JUMPOUT(0x1003010F8);
    case 4:
      uint64_t v4 = *(unsigned int *)(a1 + 1);
      if (v4) {
LABEL_17:
      }
        uint64_t v4 = (*a1 | (v4 << 16)) - 0xFFFF;
      break;
    default:
      return v4;
  }
  return v4;
}

uint64_t sub_10030110C(uint64_t result, int a2, int a3)
{
  unsigned int v3 = a3 + 0xFFFF;
  if ((a3 + 0xFFFF) <= 0xFFFEFFFF) {
    int v4 = 2;
  }
  else {
    int v4 = 4;
  }
  if (v3 < 0xFF0000) {
    int v4 = 1;
  }
  if (v3 >= 0x10000) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2)
  {
    unsigned int v7 = ((a2 - 1) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 1;
    switch(v6)
    {
      case 1:
        *(unsigned char *)(result + 2) = v7;
        return result;
      case 2:
        *(_WORD *)(result + 2) = v7;
        return result;
      case 3:
        goto LABEL_21;
      case 4:
        *(_DWORD *)(result + 2) = v7;
        return result;
      default:
        return result;
    }
  }
  switch(v6)
  {
    case 1:
      *(unsigned char *)(result + 2) = 0;
      break;
    case 2:
      *(_WORD *)(result + 2) = 0;
      break;
    case 3:
LABEL_21:
      __break(1u);
      JUMPOUT(0x1003011C8);
    case 4:
      *(_DWORD *)(result + 2) = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100301498(void *a1)
{
  return sub_1002FEF80(a1) & 1;
}

uint64_t sub_1003014E0()
{
  uint64_t result = type metadata accessor for DispatchTime();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Logger();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for DispatchTimeInterval();
      if (v3 <= 0x3F) {
        return swift_initClassMetadata2();
      }
    }
  }
  return result;
}

uint64_t sub_100301614()
{
  swift_unownedRelease();
  uint64_t v1 = v0 + qword_1004864C0;
  uint64_t v2 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + qword_1004888F0;
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + qword_1004864C8;
  uint64_t v6 = type metadata accessor for DispatchTimeInterval();
  unsigned int v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  v7(v0 + qword_1004864D0, v6);
  return v0;
}

uint64_t sub_100301738()
{
  sub_100301614();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AWDLElectionEngine()
{
  return sub_100038354();
}

uint64_t sub_1003017A8()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unint64_t sub_100301864(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  unsigned int v7 = (char *)&v10 - v6;
  (*(void (**)(uint64_t, uint64_t))(v3 + 64))(a1, v3);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)(AssociatedConformanceWitness + 8) + 56))(&v11, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  return (unsigned __int16)v11 | ((unint64_t)BYTE2(v11) << 16) | ((unint64_t)*(unsigned int *)((char *)&v11 + 3) << 24);
}

BOOL sub_1003019CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  unsigned int v7 = (char *)v11 - v6;
  (*(void (**)(uint64_t, uint64_t))(v3 + 64))(a1, v3);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(v11, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  sub_100307F5C((uint64_t)v11, (uint64_t)v12);
  uint64_t v9 = v13;
  if (v13 != 1) {
    sub_100307FC4((uint64_t)v11);
  }
  return v9 != 1;
}

uint64_t sub_100301B48(int a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 v7 = a6;
  unsigned __int8 v8 = a5;
  uint64_t v39 = a5;
  uint64_t v40 = a6;
  char v37 = (char *)a3;
  LODWORD(v38) = a1;
  uint64_t v11 = *v6;
  uint64_t v36 = *(void *)(*v6 + 80);
  uint64_t v35 = *(void *)(v11 + 88);
  uint64_t v12 = type metadata accessor for NANFollowUpTransmitter.FollowUpInformation();
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v28 = *(void *)(v13 - 8);
  uint64_t v29 = v13;
  __chkstk_darwin();
  __int16 v15 = (char *)&v28 - v14;
  type metadata accessor for DispatchTime();
  __chkstk_darwin();
  char v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(v12 - 8);
  __chkstk_darwin();
  uint64_t v20 = (char *)&v28 - v19;
  unint64_t v21 = v7 | ((v8 | (a4 << 8)) << 8);
  unint64_t v30 = a4 >> 8;
  unint64_t v31 = a4 >> 16;
  unint64_t v32 = a4 >> 24;
  unint64_t v33 = HIDWORD(a4);
  unint64_t v34 = a4 >> 40;
  uint64_t v22 = (uint64_t)v37;
  sub_100013D44(a2, (unint64_t)v37);
  type metadata accessor for P2PTimer();
  variable initialization expression of AWDLPeer.lastUpdated();
  sub_100304528(v38, a2, v22, 0, (uint64_t)v17, (uint64_t)v20);
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
  char v37 = v20;
  v23(v15, v20, v12);
  uint64_t v38 = v18;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v12);
  char v41 = v40;
  char v42 = v39;
  LOBYTE(v43) = a4;
  HIBYTE(v43) = v30;
  char v44 = v31;
  LOBYTE(v45) = v32;
  HIBYTE(v45) = v33;
  char v46 = v34;
  swift_beginAccess();
  type metadata accessor for NANFollowUpTransmitter.FollowUpIdentifier();
  swift_getWitnessTable();
  type metadata accessor for Dictionary();
  Dictionary.subscript.setter();
  swift_endAccess();
  char v24 = sub_100305444(v21);
  if (v24 == 2)
  {
    char v41 = v40;
    char v42 = v39;
    __int16 v43 = a4;
    char v44 = a4 << 8 >> 24;
    __int16 v45 = a4 >> 24;
    char v46 = a4 << 8 >> 48;
    swift_beginAccess();
    Dictionary.removeValue(forKey:)();
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v15, v29);
    return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v37, v12);
  }
  else
  {
    unint64_t v27 = (unint64_t)v37;
    uint64_t v26 = v38;
    if (v24) {
      sub_1003059C0(v21);
    }
    return (*(uint64_t (**)(unint64_t, uint64_t))(v26 + 8))(v27, v12);
  }
}

uint64_t sub_100301F7C(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v89 = a2;
  int v90 = a1;
  uint64_t v88 = type metadata accessor for Logger();
  uint64_t v91 = *(void *)(v88 - 8);
  __chkstk_darwin();
  id v95 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for NANPublish.Configuration();
  __chkstk_darwin();
  uint64_t v82 = (uint64_t)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v80 = (char *)&v73 - v8;
  uint64_t v9 = *(void *)(a4 + 8);
  uint64_t v10 = *(void *)(v9 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v84 = AssociatedTypeWitness;
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v85 = *(void *)(v12 - 8);
  uint64_t v86 = v12;
  __chkstk_darwin();
  uint64_t v77 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v79 = (char *)&v73 - v14;
  uint64_t v87 = type metadata accessor for NANSubscribe.Configuration();
  __chkstk_darwin();
  uint64_t v78 = (uint64_t)&v73 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  char v17 = (char *)&v73 - v16;
  uint64_t v94 = v10;
  uint64_t v18 = swift_getAssociatedTypeWitness();
  uint64_t v93 = *(void *)(v18 - 8);
  __chkstk_darwin();
  uint64_t v20 = (char *)&v73 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v22 = (char *)&v73 - v21;
  uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v9 + 24);
  uint64_t v96 = a3;
  uint64_t v92 = v9;
  v23(a3, v9);
  uint64_t v24 = v98;
  sub_1003546AC();
  uint64_t result = swift_release();
  uint64_t v98 = v24;
  if (v24) {
    return result;
  }
  int64_t v74 = v17;
  id v73 = (uint64_t (*)(uint64_t, uint64_t))v23;
  uint64_t v26 = v20;
  uint64_t v76 = v18;
  uint64_t v27 = v96;
  uint64_t v28 = v94;
  uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t))(v94 + 64);
  os_log_type_t v75 = v22;
  uint64_t v30 = v97;
  uint64_t v31 = v29(v96, v94);
  uint64_t v32 = v98;
  v90(v31);
  uint64_t v33 = v32;
  if (!v32)
  {
    uint64_t v38 = v28;
    uint64_t v39 = v26;
    v29(v27, v38);
    uint64_t v40 = (uint64_t)v74;
    uint64_t v41 = v76;
    int v42 = swift_dynamicCast();
    uint64_t v36 = v91;
    if (v42)
    {
      uint64_t v98 = (uint64_t)v39;
      uint64_t v43 = v78;
      sub_100308230(v40, v78, (uint64_t (*)(void))type metadata accessor for NANSubscribe.Configuration);
      uint64_t v44 = v73(v96, v92);
      uint64_t v46 = v85;
      uint64_t v45 = v86;
      uint64_t v47 = v79;
      (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v79, v44 + *(void *)(*(void *)v44 + 96), v86);
      swift_release();
      uint64_t v48 = swift_getAssociatedConformanceWitness();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 208))(v43, v45, v48);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v45);
      unsigned __int8 v69 = type metadata accessor for NANSubscribe.Configuration;
      uint64_t v70 = v43;
    }
    else
    {
      uint64_t v35 = v96;
      uint64_t v34 = v30;
      uint64_t v49 = (uint64_t)v80;
      if (!swift_dynamicCast())
      {
        sub_10000F000();
        uint64_t v33 = swift_allocError();
        *(_OWORD *)uint64_t v56 = xmmword_1003B2F00;
        *(unsigned char *)(v56 + 16) = 1;
        swift_willThrow();
        (*(void (**)(char *, uint64_t))(v93 + 8))(v39, v41);
        uint64_t v28 = v94;
        char v37 = v95;
        goto LABEL_9;
      }
      uint64_t v98 = (uint64_t)v39;
      uint64_t v50 = v82;
      sub_100308230(v49, v82, (uint64_t (*)(void))type metadata accessor for NANPublish.Configuration);
      uint64_t v51 = v73(v35, v92);
      uint64_t v53 = v85;
      uint64_t v52 = v86;
      uint64_t v54 = v77;
      (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v77, v51 + *(void *)(*(void *)v51 + 96), v86);
      swift_release();
      uint64_t v55 = swift_getAssociatedConformanceWitness();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 216))(v50, v52, v55);
      (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v52);
      unsigned __int8 v69 = type metadata accessor for NANPublish.Configuration;
      uint64_t v70 = v82;
    }
    sub_100308298(v70, (uint64_t (*)(void))v69);
    uint64_t v71 = v76;
    uint64_t v72 = *(void (**)(char *, uint64_t))(v93 + 8);
    v72(v75, v76);
    return ((uint64_t (*)(uint64_t, uint64_t))v72)(v98, v71);
  }
  uint64_t v34 = v30;
  uint64_t v35 = v27;
  uint64_t v36 = v91;
  char v37 = v95;
LABEL_9:
  uint64_t v100 = v34;
  (*(void (**)(uint64_t))(*(void *)(v28 + 8) + 8))(v35);
  swift_unknownObjectRetain();
  swift_errorRetain();
  swift_unknownObjectRetain();
  swift_errorRetain();
  uint64_t v57 = Logger.logObject.getter();
  os_log_type_t v58 = static os_log_type_t.error.getter();
  BOOL v59 = os_log_type_enabled(v57, v58);
  uint64_t v98 = v33;
  if (v59)
  {
    uint64_t v60 = swift_slowAlloc();
    uint64_t v61 = (void *)swift_slowAlloc();
    uint64_t v97 = swift_slowAlloc();
    uint64_t v100 = v97;
    *(_DWORD *)uint64_t v60 = 136315394;
    uint64_t v99 = v34;
    uint64_t v62 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v64 = v63;
    swift_unknownObjectRelease();
    uint64_t v99 = sub_100010680(v62, v64, &v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    *(_WORD *)(v60 + 12) = 2112;
    swift_errorRetain();
    uint64_t v65 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v99 = v65;
    uint64_t v35 = v96;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v61 = v65;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "%s failed to update its configuration because of error %@", (uint8_t *)v60, 0x16u);
    sub_100010BCC(&qword_10047CC30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v36 + 8))(v95, v88);
  }
  else
  {
    swift_unknownObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v88);
  }
  uint64_t v66 = v93;
  uint64_t v67 = v76;
  uint64_t v68 = v75;
  (*(void (**)(char *, uint64_t))(v92 + 48))(v75, v35);
  swift_willThrow();
  return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v68, v67);
}

uint64_t sub_100302A14(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  sub_100304C70(a1);
  return v2;
}

uint64_t sub_100302A54(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void (**)(uint64_t, char *, uint64_t))(*v1 + 80);
  uint64_t v142 = v1;
  uint64_t v136 = *(void *)(v3 + 88);
  uint64_t v137 = v4;
  uint64_t v5 = type metadata accessor for NANFollowUpTransmitter.FollowUpInformation();
  uint64_t v141 = type metadata accessor for Optional();
  v139.i64[0] = *(void *)(v141 - 8);
  __chkstk_darwin();
  uint64_t v131 = (char *)&v118 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v132 = (char *)&v118 - v7;
  __chkstk_darwin();
  unint64_t v133 = (unint64_t)&v118 - v8;
  __chkstk_darwin();
  uint64_t v10 = (char *)&v118 - v9;
  __chkstk_darwin();
  uint64_t v12 = (char *)&v118 - v11;
  uint64_t v135 = v5;
  uint64_t v140 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v130 = (char *)&v118 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v138.i64[0] = (uint64_t)&v118 - v14;
  __chkstk_darwin();
  unint64_t v134 = (char *)&v118 - v15;
  type metadata accessor for DriverEvent(0);
  __chkstk_darwin();
  char v17 = (char *)&v118 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v19 = (char *)&v118 - v18;
  __chkstk_darwin();
  uint64_t v21 = (char *)&v118 - v20;
  __chkstk_darwin();
  uint64_t v23 = (char *)&v118 - v22;
  sub_100004130(a1, (uint64_t)&v118 - v22);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 4)
  {
    BOOL v25 = v142;
    if (!EnumCaseMultiPayload)
    {
      sub_100004130((uint64_t)v23, (uint64_t)v21);
      sub_10006E544((uint64_t)v21, (uint64_t)v148);
      sub_10006E544((uint64_t)v148, (uint64_t)v149);
      switch(sub_1001343E0((uint64_t)v149))
      {
        case 8u:
          uint64_t v121 = v23;
          uint64_t v27 = NANBitmap.Channel.operatingClass.getter(v149);
          v28.i32[0] = *(_DWORD *)v27;
          uint16x8_t v29 = vmovl_u8(v28);
          int16x8_t v139 = (int16x8_t)v29;
          LODWORD(v131) = *(unsigned __int8 *)(v27 + 4);
          LODWORD(v130) = *(unsigned __int8 *)(v27 + 5);
          LODWORD(v129) = *(unsigned __int8 *)(v27 + 6);
          LODWORD(v128) = *(unsigned __int8 *)(v27 + 7);
          v29.i32[0] = *(_DWORD *)(v27 + 8);
          int16x8_t v138 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v29.i8);
          LODWORD(v127) = *(unsigned __int8 *)(v27 + 12);
          LODWORD(v126) = *(unsigned __int8 *)(v27 + 13);
          uint64_t v30 = (uint64_t *)((char *)v25 + qword_100486570);
          swift_beginAccess();
          uint64_t v123 = v140 + 8;
          uint64_t v31 = type metadata accessor for NANFollowUpTransmitter.FollowUpIdentifier();
          uint64_t v32 = 0;
          *((void *)&v33 + 1) = v139.i64[1];
          *(int8x8_t *)&long long v33 = vmovn_s16(v139);
          long long v125 = v33;
          *((void *)&v33 + 1) = v138.i64[1];
          *(int8x8_t *)&long long v33 = vmovn_s16(v138);
          long long v124 = v33;
          uint64_t v34 = v135;
          uint64_t v122 = v31;
          uint64_t v141 = (uint64_t)v30;
          break;
        case 0xBu:
        case 0xCu:
          NANBitmap.Channel.operatingClass.getter(v149);
          sub_100304E7C();
          uint64_t v26 = (uint64_t)v23;
          return sub_100308298(v26, type metadata accessor for DriverEvent);
        case 0xEu:
          uint64_t v121 = v23;
          uint64_t v60 = (unsigned __int8 *)NANBitmap.Channel.operatingClass.getter(v149);
          uint64_t v61 = *v60;
          uint64_t v62 = v60[1];
          uint64_t v63 = v60[2];
          unint64_t v64 = v60[3];
          uint64_t v65 = v60[4];
          uint64_t v66 = v60[5];
          uint64_t v67 = v60[7];
          int v68 = v60[8];
          *(void *)&long long v125 = v60[6];
          uint64_t v69 = (void)v125 << 40;
          uint64_t v126 = v66;
          uint64_t v127 = v65;
          uint64_t v70 = v66 << 32;
          uint64_t v71 = v65 << 24;
          unint64_t v134 = (char *)v64;
          uint64_t v120 = v64 << 16;
          uint64_t v128 = v63;
          uint64_t v129 = v62;
          *(void *)&long long v124 = v67;
          uint64_t v122 = v62 | (v67 << 48) | (v63 << 8);
          uint64_t v72 = Logger.logObject.getter();
          uint64_t v123 = v61;
          if (v68)
          {
            int v73 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v72, (os_log_type_t)v73))
            {
              LODWORD(v119) = v73;
              char v74 = v61;
              uint64_t v61 = swift_slowAlloc();
              uint64_t v118 = (void (*)(uint64_t, char *, uint64_t))swift_slowAlloc();
              v147[0] = (uint64_t)v118;
              *(_DWORD *)uint64_t v61 = 136315650;
              uint64_t v75 = NANPeerServiceIdentifier.description.getter(v122 | v69 | v70 | v71 | v120);
              uint64_t v143 = sub_100010680(v75, v76, v147);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              *(_WORD *)(v61 + 12) = 256;
              LOBYTE(v143) = v74;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v61 + 15) = 2080;
              unint64_t v77 = 0xE700000000000000;
              unint64_t v78 = 0x646570706F7264;
              if (v68 != 2)
              {
                unint64_t v78 = 0xD000000000000010;
                unint64_t v77 = 0x80000001003DC150;
              }
              if (v68 == 1) {
                uint64_t v79 = 0x756F2064656D6974;
              }
              else {
                uint64_t v79 = v78;
              }
              if (v68 == 1) {
                unint64_t v80 = 0xE900000000000074;
              }
              else {
                unint64_t v80 = v77;
              }
              uint64_t v143 = sub_100010680(v79, v80, v147);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v72, (os_log_type_t)v119, "Follow up transmission to %s from %hhu failed with reason: %s", (uint8_t *)v61, 0x19u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              uint64_t v81 = v135;
              uint64_t v82 = v140;
              LOBYTE(v61) = v123;
            }
            else
            {

              uint64_t v81 = v135;
              uint64_t v82 = v140;
            }
            LOBYTE(v143) = v61;
            BYTE1(v143) = v129;
            BYTE2(v143) = v128;
            BYTE3(v143) = (_BYTE)v134;
            BYTE4(v143) = v127;
            BYTE5(v143) = v126;
            BYTE6(v143) = v125;
            HIBYTE(v143) = v124;
            swift_beginAccess();
            uint64_t v88 = type metadata accessor for NANFollowUpTransmitter.FollowUpIdentifier();
            uint64_t WitnessTable = swift_getWitnessTable();
            uint64_t v90 = type metadata accessor for Dictionary();
            Dictionary.removeValue(forKey:)();
            swift_endAccess();
            sub_1003045E0();
            uint64_t v91 = v82;
            uint64_t v94 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v82 + 48);
            uint64_t v92 = v82 + 48;
            uint64_t v93 = v94;
            if (v94((unint64_t)v10, 1, v81) == 1)
            {
              (*(void (**)(char *, uint64_t))(v139.i64[0] + 8))(v10, v141);
              sub_100306688();
            }
            else
            {
              uint64_t v119 = v90;
              uint64_t v120 = v92;
              uint64_t v136 = WitnessTable;
              uint64_t v137 = (void (*)(uint64_t, char *, uint64_t))v88;
              uint64_t v118 = *(void (**)(uint64_t, char *, uint64_t))(v91 + 32);
              v118(v138.i64[0], v10, v81);
              BOOL v95 = sub_1003041D4(v81);
              char v97 = v128;
              char v96 = v129;
              unsigned __int8 v99 = v126;
              unsigned __int8 v98 = v127;
              unsigned __int8 v100 = v125;
              if (!v95) {
                goto LABEL_40;
              }
              swift_beginAccess();
              LOBYTE(v143) = v123;
              BYTE1(v143) = v96;
              BYTE2(v143) = v97;
              unint64_t v101 = v133;
              BYTE3(v143) = (_BYTE)v134;
              BYTE4(v143) = v98;
              BYTE5(v143) = v99;
              BYTE6(v143) = v100;
              HIBYTE(v143) = v124;
              Dictionary.subscript.getter();
              swift_endAccess();
              int v102 = v93(v101, 1, v81);
              unint64_t v103 = v101;
              char v96 = v129;
              (*(void (**)(unint64_t, uint64_t))(v139.i64[0] + 8))(v103, v141);
              if (v102 == 1)
              {
                sub_100306688();
                (*(void (**)(uint64_t, uint64_t))(v140 + 8))(v138.i64[0], v81);
              }
              else
              {
LABEL_40:
                unint64_t v104 = v122 & 0xFFFF00000000FFFFLL | ((unint64_t)v134 << 16) & 0xFFFF000000FFFFFFLL | (v98 << 24) | ((unint64_t)v99 << 32) & 0xFFFF00FFFFFFFFFFLL | ((unint64_t)v100 << 40);
                unsigned __int8 v105 = v98;
                char v106 = v123;
                unint64_t v133 = v123 | (v104 << 8);
                int v107 = sub_100305444(v133);
                if (v107 == 2)
                {
                  (*(void (**)(uint64_t, uint64_t))(v140 + 8))(v138.i64[0], v135);
                }
                else
                {
                  LODWORD(v122) = v107;
                  swift_beginAccess();
                  LOBYTE(v143) = v106;
                  BYTE1(v143) = v96;
                  BYTE2(v143) = v97;
                  BYTE3(v143) = (_BYTE)v134;
                  BYTE4(v143) = v105;
                  BYTE5(v143) = v99;
                  BYTE6(v143) = v100;
                  char v108 = v124;
                  HIBYTE(v143) = v124;
                  uint64_t v109 = v131;
                  uint64_t v110 = v135;
                  Dictionary.subscript.getter();
                  swift_endAccess();
                  uint64_t v111 = v140;
                  uint64_t v112 = v130;
                  (*(void (**)(char *, uint64_t, uint64_t))(v140 + 16))(v130, v138.i64[0], v110);
                  if (v93((unint64_t)v109, 1, v110) == 1)
                  {
                    id v113 = v132;
                    v118((uint64_t)v132, v112, v110);
                    (*(void (**)(char *, uint64_t))(v139.i64[0] + 8))(v109, v141);
                  }
                  else
                  {
                    (*(void (**)(char *, uint64_t))(v111 + 8))(v112, v110);
                    id v113 = v132;
                    v118((uint64_t)v132, v109, v110);
                  }
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v111 + 56))(v113, 0, 1, v110);
                  LOBYTE(v143) = v123;
                  BYTE1(v143) = v129;
                  BYTE2(v143) = v128;
                  BYTE3(v143) = (_BYTE)v134;
                  BYTE4(v143) = v127;
                  BYTE5(v143) = v126;
                  BYTE6(v143) = v125;
                  HIBYTE(v143) = v108;
                  swift_beginAccess();
                  Dictionary.subscript.setter();
                  swift_endAccess();
                  if (v122) {
                    sub_1003059C0(v133);
                  }
                  (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v138.i64[0], v135);
                }
              }
            }
          }
          else
          {
            os_log_type_t v83 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v72, v83))
            {
              uint64_t v84 = swift_slowAlloc();
              v147[0] = swift_slowAlloc();
              *(_DWORD *)uint64_t v84 = 136315394;
              uint64_t v85 = NANPeerServiceIdentifier.description.getter(v122 | v69 | v70 | v71 | v120);
              uint64_t v143 = sub_100010680(v85, v86, v147);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              *(_WORD *)(v84 + 12) = 256;
              char v87 = v123;
              LOBYTE(v143) = v123;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              _os_log_impl((void *)&_mh_execute_header, v72, v83, "Follow up transmission to %s from %hhu completed", (uint8_t *)v84, 0xFu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              char v87 = v123;
            }
            LOBYTE(v143) = v87;
            BYTE1(v143) = v129;
            BYTE2(v143) = v128;
            BYTE3(v143) = (_BYTE)v134;
            BYTE4(v143) = v127;
            BYTE5(v143) = v126;
            BYTE6(v143) = v125;
            HIBYTE(v143) = v124;
            swift_beginAccess();
            type metadata accessor for NANFollowUpTransmitter.FollowUpIdentifier();
            swift_getWitnessTable();
            type metadata accessor for Dictionary();
            Dictionary.removeValue(forKey:)();
            (*(void (**)(char *, uint64_t))(v139.i64[0] + 8))(v12, v141);
            swift_endAccess();
            sub_1003045E0();
            sub_100306688();
          }
          goto LABEL_18;
        default:
          sub_1003080B8((uint64_t)v148);
          goto LABEL_15;
      }
      while (1)
      {
        uint64_t v146 = *v30;
        __chkstk_darwin();
        uint64_t v38 = (void (*)(uint64_t, char *, uint64_t))v136;
        *(&v118 - 4) = v137;
        *(&v118 - 3) = v38;
        LODWORD(v114) = v125;
        BYTE4(v114) = (_BYTE)v131;
        BYTE5(v114) = (_BYTE)v130;
        BYTE6(v114) = v129;
        HIBYTE(v114) = v128;
        int v115 = v124;
        char v116 = v127;
        char v117 = v126;
        swift_bridgeObjectRetain();
        uint64_t v39 = swift_getWitnessTable();
        uint64_t v40 = type metadata accessor for Dictionary();
        swift_getWitnessTable();
        Collection.firstIndex(where:)();
        swift_bridgeObjectRelease();
        unsigned __int8 v41 = v145;
        if (v145 == 255) {
          goto LABEL_18;
        }
        unint64_t v132 = (char *)v40;
        v138.i64[0] = v32;
        uint64_t v42 = v34;
        uint64_t v43 = v143;
        uint64_t v44 = v144;
        swift_bridgeObjectRetain();
        uint64_t v114 = v39;
        uint64_t v45 = v134;
        uint64_t v140 = v43;
        v139.i64[0] = v44;
        LODWORD(v133) = v41 & 1;
        Dictionary.subscript.getter();
        swift_bridgeObjectRelease();
        uint64_t v46 = v45;
        uint64_t v47 = *(void (**)(char *, uint64_t))v123;
        (*(void (**)(char *, uint64_t))v123)(v46, v42);
        uint64_t v48 = v143;
        char v49 = sub_100305444(v143);
        if (v49 == 2)
        {
          uint64_t v35 = (uint64_t *)v141;
          swift_beginAccess();
          uint64_t v36 = v140;
          uint64_t v37 = v139.i64[0];
          Dictionary.remove(at:)();
          swift_endAccess();
          sub_100038018(v36, v37, v41);
          uint64_t v34 = v135;
          v47(v46, v135);
          uint64_t v30 = v35;
        }
        else
        {
          uint64_t v50 = v140;
          uint64_t v30 = (uint64_t *)v141;
          uint64_t v51 = v139.i64[0];
          if ((v49 & 1) == 0)
          {
            sub_100038018(v140, v139.i64[0], v41);
            goto LABEL_18;
          }
          sub_1003059C0(v48);
          sub_100038018(v50, v51, v41);
          uint64_t v34 = v135;
        }
        uint64_t v32 = v138.i64[0];
      }
    }
LABEL_15:
    uint64_t v121 = v23;
    sub_100004130(a1, (uint64_t)v17);
    uint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = swift_slowAlloc();
      v149[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v54 = 136315394;
      uint64_t v55 = _typeName(_:qualified:)();
      v148[0] = sub_100010680(v55, v56, v149);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v54 + 12) = 2080;
      uint64_t v57 = DriverEvent.shortDescription.getter();
      v148[0] = sub_100010680(v57, v58, v149);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100308298((uint64_t)v17, type metadata accessor for DriverEvent);
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "%s unable to handle event: %s", (uint8_t *)v54, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_100308298((uint64_t)v17, type metadata accessor for DriverEvent);
    }
LABEL_18:
    uint64_t v26 = (uint64_t)v121;
    return sub_100308298(v26, type metadata accessor for DriverEvent);
  }
  sub_100004130((uint64_t)v23, (uint64_t)v19);
  if (*v19 != 1) {
    goto LABEL_15;
  }
  swift_beginAccess();
  type metadata accessor for NANFollowUpTransmitter.FollowUpIdentifier();
  swift_getWitnessTable();
  type metadata accessor for Dictionary();
  Dictionary.removeAll(keepingCapacity:)(0);
  swift_endAccess();
  swift_beginAccess();
  Dictionary.removeAll(keepingCapacity:)(0);
  swift_endAccess();
  sub_1003045E0();
  uint64_t v26 = (uint64_t)v23;
  return sub_100308298(v26, type metadata accessor for DriverEvent);
}

BOOL sub_100303CEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(void))(a2 + 32))();
  if (v2) {
    swift_release();
  }
  return v2 != 0;
}

uint64_t sub_100303D34(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v11 - v6;
  (*(void (**)(uint64_t, uint64_t))(v3 + 64))(a1, v3);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  return v9;
}

void sub_100303E88(int a1, unint64_t a2)
{
  unint64_t v3 = a2 >> 8;
  unint64_t v4 = a2 >> 16;
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v3);

  NANClusterChangeEvent.hash(into:)(a1, v4);
}

BOOL sub_100303EE0(unint64_t a1, unint64_t a2)
{
  return a1 == a2
      && static NANPeerServiceIdentifier.__derived_struct_equals(_:_:)(a1 >> 8, a2 >> 8);
}

Swift::Int sub_100303F00(unint64_t a1)
{
  Hasher.init(_seed:)();
  sub_100303E88((int)&v3, a1);
  return Hasher._finalize()();
}

Swift::Int sub_100303F60()
{
  return sub_100303F00(*v0);
}

void sub_100303F70(int a1)
{
  sub_100303E88(a1, *v1);
}

Swift::Int sub_100303F80()
{
  Hasher.init(_seed:)();
  sub_100303E88((int)&v2, *v0);
  return Hasher._finalize()();
}

BOOL sub_100303FC8(unint64_t *a1, unint64_t *a2)
{
  return sub_100303EE0(*a1, *a2);
}

uint64_t sub_100303FDC()
{
  uint64_t v0 = type metadata accessor for DispatchTime();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  char v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for P2PTimer();
  variable initialization expression of AWDLPeer.lastUpdated();
  DispatchTime.distance(to:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_1003040D8()
{
  uint64_t v0 = type metadata accessor for DispatchTime();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  char v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for P2PTimer();
  variable initialization expression of AWDLPeer.lastUpdated();
  DispatchTime.distance(to:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

BOOL sub_1003041D4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  uint64_t v35 = *(void *)(v4 - 8);
  __chkstk_darwin();
  long long v33 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v7 = (char *)v27 - v6;
  uint64_t v8 = *(void *)(a1 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v12 = (char *)v27 - v11;
  int v13 = *(unsigned __int8 *)(v2 + 24);
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v34 = v2;
  v14((char *)v27 - v11, v2, a1);
  if (v13 == 1)
  {
    uint64_t v15 = *(void (**)(char *, uint64_t))(v8 + 8);
    v15(v12, a1);
    v14(v10, v34, a1);
LABEL_5:
    v15(v10, a1);
    return 1;
  }
  sub_1003040D8();
  uint64_t v16 = NANConstants.followUpTimeout.unsafeMutableAddressor();
  uint64_t v17 = v35;
  uint64_t v18 = v33;
  v27[0] = *(void *)(v35 + 16);
  v27[1] = v35 + 16;
  ((void (*)(char *, uint64_t, uint64_t))v27[0])(v33, v16, v4);
  BOOL v32 = static DispatchTimeInterval.< infix(_:_:)();
  uint64_t v31 = v14;
  uint64_t v19 = *(void (**)(char *, uint64_t))(v17 + 8);
  v19(v18, v4);
  uint8x8_t v28 = v7;
  uint16x8_t v29 = v19;
  uint64_t v30 = v4;
  uint64_t v35 = v17 + 8;
  v19(v7, v4);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v12, a1);
  v31(v10, v34, a1);
  if (!v32) {
    goto LABEL_5;
  }
  uint64_t v20 = v28;
  sub_100303FDC();
  uint64_t v21 = NANConstants.keepAliveTimeout.unsafeMutableAddressor();
  uint64_t v22 = v30;
  ((void (*)(char *, uint64_t, uint64_t))v27[0])(v18, v21, v30);
  BOOL v23 = !static DispatchTimeInterval.< infix(_:_:)();
  uint64_t v24 = v18;
  BOOL v25 = v29;
  v29(v24, v22);
  v25(v20, v22);
  v15(v10, a1);
  return v23;
}

uint64_t sub_100304528@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(unsigned char *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = a3;
  *(unsigned char *)(a6 + 24) = a4;
  uint64_t v8 = type metadata accessor for NANFollowUpTransmitter.FollowUpInformation();
  type metadata accessor for P2PTimer();
  variable initialization expression of AWDLPeer.lastUpdated();
  uint64_t v9 = a6 + *(int *)(v8 + 44);
  uint64_t v10 = type metadata accessor for DispatchTime();
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32);

  return v11(v9, a5, v10);
}

uint64_t sub_1003045E0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = type metadata accessor for DispatchTimeInterval();
  BOOL v23 = *(void **)(v3 - 8);
  __chkstk_darwin();
  uint64_t v24 = (uint64_t *)((char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  uint64_t v6 = (char *)&v20 - v5;
  __chkstk_darwin();
  uint64_t v8 = (uint64_t *)((char *)&v20 - v7);
  swift_beginAccess();
  uint64_t v9 = *(void *)(v2 + 80);
  uint64_t v10 = *(void *)(v2 + 88);
  type metadata accessor for NANFollowUpTransmitter.FollowUpIdentifier();
  type metadata accessor for NANFollowUpTransmitter.FollowUpInformation();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  char v11 = Dictionary.isEmpty.getter();
  swift_bridgeObjectRelease();
  uint64_t v12 = qword_100486580;
  if (v11)
  {
    *(void *)((char *)v1 + qword_100486580) = 0;
  }
  else
  {
    uint64_t v13 = *(void *)((char *)v1 + qword_100486580);
    if (!v13)
    {
      *uint64_t v8 = 5;
      uint64_t v22 = v6;
      uint64_t v14 = (void (*)(uint64_t, void, uint64_t))v23[13];
      v14((uint64_t)v8, enum case for DispatchTimeInterval.seconds(_:), v3);
      uint64_t v21 = v14;
      BOOL v23 = (void *)*OS_dispatch_queue.nan.unsafeMutableAddressor();
      *uint64_t v22 = 5;
      ((void (*)(void))v14)();
      uint64_t v15 = swift_allocObject();
      swift_weakInit();
      uint64_t v16 = (void *)swift_allocObject();
      _OWORD v16[2] = v9;
      void v16[3] = v10;
      v16[4] = v15;
      uint64_t v17 = (uint64_t)v24;
      *uint64_t v24 = 100;
      v21(v17, enum case for DispatchTimeInterval.milliseconds(_:), v3);
      type metadata accessor for P2PTimer();
      swift_allocObject();
      uint64_t v18 = v23;
      uint64_t v13 = P2PTimer.init(deadlineAfter:on:repeating:leeway:_:)((uint64_t)v8, v18, (uint64_t)v22, v17, (uint64_t)sub_10030806C, (uint64_t)v16);
    }
    *(void *)((char *)v1 + v12) = v13;
    swift_retain();
  }
  return swift_release();
}

uint64_t sub_10030490C()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100304964();
    return swift_release();
  }
  return result;
}

uint64_t sub_100304964()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  uint64_t v12 = *(void *)(v1 + 80);
  uint64_t v13 = *(void *)(v1 + 88);
  type metadata accessor for NANFollowUpTransmitter.FollowUpIdentifier();
  type metadata accessor for NANFollowUpTransmitter.FollowUpInformation();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  uint64_t v14 = Dictionary.filter(_:)();
  v11[2] = v12;
  v11[3] = v13;
  uint64_t v2 = type metadata accessor for Dictionary();
  uint64_t v3 = type metadata accessor for DriverEvent(0);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v6 = sub_1003741D0((void (*)(char *, char *))sub_100308098, (uint64_t)v11, v2, v3, (uint64_t)&type metadata for Never, WitnessTable, (uint64_t)&protocol witness table for Never, v5);
  swift_bridgeObjectRelease();
  if (!*(void *)(v6 + 16)) {
    return swift_bridgeObjectRelease();
  }
  swift_unownedRetainStrong();
  sub_100355E38(0xD000000000000012, 0x80000001003E04F0);
  swift_release();
  uint64_t v7 = *(void *)(v6 + 16);
  if (!v7) {
    return swift_bridgeObjectRelease();
  }
  unint64_t v8 = v6
     + ((*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80));
  uint64_t v9 = *(void *)(*(void *)(v3 - 8) + 72);
  swift_bridgeObjectRetain();
  do
  {
    sub_100302A54(v8);
    v8 += v9;
    --v7;
  }
  while (v7);
  return swift_bridgeObjectRelease_n();
}

uint64_t (*sub_100304BDC(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_100304C3C;
}

uint64_t sub_100304C3C(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return sub_1003045E0();
  }
  return result;
}

uint64_t sub_100304C70(uint64_t a1)
{
  Logger.init(subsystem:category:)();
  uint64_t v3 = qword_100486570;
  type metadata accessor for NANFollowUpTransmitter.FollowUpIdentifier();
  type metadata accessor for NANFollowUpTransmitter.FollowUpInformation();
  swift_getWitnessTable();
  *(void *)(v1 + v3) = Dictionary.init()();
  uint64_t v4 = qword_100486578;
  *(void *)(v1 + v4) = Dictionary.init()();
  *(void *)(v1 + qword_100486580) = 0;
  *(void *)(v1 + qword_100488900) = a1;
  swift_unownedRetain();
  swift_retain();
  uint64_t v5 = WiFiInterface.capabilities.getter();
  swift_release();
  uint64_t v6 = *WiFiDriverCapabilities.supportsSimultaneousDualBand.unsafeMutableAddressor();
  uint64_t v12 = v5;
  uint64_t v13 = v6;
  unint64_t v7 = sub_1002C8868();
  swift_bridgeObjectRetain_n();
  ExtendableOptionSet.formIntersection(_:)((uint64_t)&v12, (uint64_t)&type metadata for WiFiDriverCapabilities, v7);
  char v8 = sub_1000956AC(v13, v6);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = v1 + qword_100486568;
  uint64_t v10 = 4;
  if (v8) {
    uint64_t v10 = 10;
  }
  *(void *)uint64_t v9 = v10;
  *(unsigned char *)(v9 + 8) = (v8 & 1) == 0;
  return v1;
}

uint64_t sub_100304E7C()
{
  uint64_t v1 = (uint64_t *)(v0 + qword_100486570);
  swift_beginAccess();
  type metadata accessor for NANFollowUpTransmitter.FollowUpIdentifier();
  type metadata accessor for NANFollowUpTransmitter.FollowUpInformation();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  *uint64_t v1 = Dictionary.filter(_:)();
  swift_bridgeObjectRelease();
  uint64_t v2 = (void *)(v0 + qword_100486578);
  swift_beginAccess();
  NANBitmap.Channel.operatingClass.getter(*v2);
  type metadata accessor for Dictionary.Keys();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  Sequence.filter(_:)();
  type metadata accessor for Array();
  swift_getWitnessTable();
  Array.init<A>(_:)();
  Sequence.forEach(_:)();
  return swift_bridgeObjectRelease();
}

BOOL sub_1003050D8(unsigned __int8 *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v40 = a3;
  unint64_t v47 = a2;
  type metadata accessor for NANFollowUpTransmitter.FollowUpIdentifier();
  uint64_t v4 = type metadata accessor for NANFollowUpTransmitter.FollowUpInformation();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v48 = *(void *)(TupleTypeMetadata2 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin();
  uint64_t v9 = (char *)&v37 - v8;
  uint64_t v10 = *(int *)(v7 + 48);
  char v11 = (char *)&v37 + v10 - v8;
  uint64_t v46 = &a1[v10];
  LOWORD(v10) = *(_WORD *)a1;
  uint64_t v12 = a1[2];
  uint64_t v13 = a1[3];
  uint64_t v14 = (void (*)(char *, uint64_t))a1[4];
  uint64_t v42 = v11;
  uint64_t v43 = v14;
  unsigned __int8 v15 = a1[5];
  uint64_t v41 = v15;
  uint64_t v16 = a1[6];
  uint64_t v17 = a1[7];
  *(_WORD *)uint64_t v9 = v10;
  void v9[2] = v12;
  v9[3] = v13;
  void v9[4] = (char)v14;
  void v9[5] = v15;
  v9[6] = v16;
  v9[7] = v17;
  uint64_t v18 = *(void *)(v4 - 8);
  uint64_t v20 = (unsigned __int8 *)(v18 + 16);
  uint64_t v19 = *(void (**)(void))(v18 + 16);
  uint64_t v44 = v13;
  uint64_t v45 = v19;
  v19();
  LODWORD(v47) = static NANClusterChangeEvent.__derived_struct_equals(_:_:)(v12 | (v44 << 8) | ((void)v43 << 16) | (v41 << 24) | (v16 << 32) | (v17 << 40), (v47 >> 8) & 0xFFFFFFFFFFFFLL);
  uint64_t v43 = *(void (**)(char *, uint64_t))(v18 + 8);
  uint64_t v44 = v18 + 8;
  v43(v42, v4);
  uint64_t v21 = &v6[*(int *)(TupleTypeMetadata2 + 48)];
  int v22 = *a1;
  int v23 = a1[1];
  uint64_t v24 = a1[2];
  uint64_t v25 = a1[3];
  uint64_t v26 = a1[4];
  uint64_t v27 = a1[5];
  uint64_t v28 = a1[6];
  uint64_t v29 = a1[7];
  int v37 = v23;
  int v38 = v22;
  *uint64_t v6 = v22;
  v6[1] = v23;
  uint64_t v41 = v24;
  uint64_t v42 = (char *)v4;
  v6[2] = v24;
  uint64_t v6[3] = v25;
  v6[4] = v26;
  v6[5] = v27;
  v6[6] = v28;
  v6[7] = v29;
  uint64_t v39 = v21;
  uint64_t v46 = v20;
  uint64_t v30 = v45;
  v45();
  if (v47)
  {
    (*(void (**)(char *, uint64_t))(v48 + 8))(v6, TupleTypeMetadata2);
    return 1;
  }
  else
  {
    BOOL v32 = v30;
    long long v33 = &v9[*(int *)(TupleTypeMetadata2 + 48)];
    *uint64_t v9 = v38;
    v9[1] = v37;
    uint64_t v34 = v41;
    void v9[2] = v41;
    v9[3] = v25;
    void v9[4] = v26;
    void v9[5] = v27;
    v9[6] = v28;
    v9[7] = v29;
    uint64_t v35 = v42;
    ((void (*)(char *, char *, char *))v32)(v33, v39, v42);
    BOOL v31 = static NANClusterChangeEvent.__derived_struct_equals(_:_:)(v34 | (v25 << 8) | (v26 << 16) | (v27 << 24) | (v28 << 32) | (v29 << 40), v40 & 0xFFFFFFFFFFFFLL);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v6, TupleTypeMetadata2);
    v43(v33, (uint64_t)v35);
  }
  return v31;
}

uint64_t sub_100305444(unint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 80);
  uint64_t v5 = *(void *)(*(void *)v1 + 88);
  uint64_t v6 = type metadata accessor for NANFollowUpTransmitter.FollowUpInformation();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v27 - v8;
  swift_unownedRetainStrong();
  sub_100354870();
  swift_release();
  char v10 = sub_1002E46A0();
  swift_release();
  if ((v10 & 1) == 0) {
    return 2;
  }
  swift_unownedRetainStrong();
  char v11 = sub_100355DD4();
  swift_release();
  if (v11)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0) {
      return 2;
    }
  }
  swift_unownedRetainStrong();
  BOOL v13 = sub_1003584A4(a1 >> 16);
  swift_release();
  if (!v13) {
    return 2;
  }
  swift_unownedRetainStrong();
  BOOL v14 = sub_1003568D0();
  swift_release();
  if (v14) {
    return 0;
  }
  swift_unownedRetainStrong();
  sub_100354870();
  swift_release();
  char v15 = sub_1002DA158();
  swift_release();
  if (v15) {
    return 0;
  }
  unint64_t v38 = HIWORD(a1);
  unint64_t v39 = HIBYTE(a1);
  unint64_t v36 = HIDWORD(a1);
  unint64_t v37 = a1 >> 40;
  unint64_t v35 = a1 >> 24;
  uint64_t v17 = (void *)(v2 + qword_100486578);
  swift_beginAccess();
  unint64_t v32 = a1 >> 8;
  long long v33 = v17;
  uint64_t v18 = *v17;
  __int16 v40 = a1;
  char v41 = BYTE2(a1);
  char v42 = v35;
  char v43 = v36;
  char v44 = v37;
  char v45 = v38;
  char v46 = v39;
  uint64_t v34 = v18;
  if (*(void *)(v18 + 16))
  {
    uint64_t v19 = type metadata accessor for NANFollowUpTransmitter.FollowUpIdentifier();
    swift_bridgeObjectRetain();
    uint64_t WitnessTable = swift_getWitnessTable();
    unint64_t v20 = sub_100271804((uint64_t)&v40, v19, WitnessTable);
    if (v21)
    {
      uint64_t v29 = *(unsigned int *)(v34 + 36);
      unint64_t v30 = v20;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v26 = WitnessTable;
      uint64_t v34 = v19;
      Dictionary.subscript.getter();
      swift_bridgeObjectRelease();
      BOOL v22 = sub_1003041D4(v6);
      int v23 = *(void (**)(char *, uint64_t))(v7 + 8);
      v23(v9, v6);
      uint64_t result = 0;
      if (!v22) {
        return result;
      }
      uint64_t v28 = v23;
      swift_beginAccess();
      type metadata accessor for Dictionary();
      Dictionary.remove(at:)();
      v28(v9, v6);
      swift_endAccess();
      sub_1003045E0();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v24 = *(void *)(v2 + qword_100486568);
  if (*(unsigned char *)(v2 + qword_100486568 + 8))
  {
    type metadata accessor for NANFollowUpTransmitter.FollowUpIdentifier();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
  }
  else
  {
    __chkstk_darwin();
    *(&v27 - 4) = v4;
    *(&v27 - 3) = v5;
    LOBYTE(v26) = a1;
    BYTE1(v26) = v32;
    BYTE2(v26) = BYTE2(a1);
    BYTE3(v26) = v35;
    BYTE4(v26) = v36;
    BYTE5(v26) = v37;
    BYTE6(v26) = v38;
    HIBYTE(v26) = v39;
    type metadata accessor for NANFollowUpTransmitter.FollowUpIdentifier();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    Dictionary.filter(_:)();
  }
  uint64_t v25 = Dictionary.count.getter();
  swift_bridgeObjectRelease();
  return v25 < v24;
}

uint64_t sub_1003059C0(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 88);
  uint64_t v4 = *(void *)(*(void *)v1 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v76 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  int v73 = (char *)&v55 - v5;
  uint64_t v6 = type metadata accessor for DispatchTime();
  unint64_t v79 = *(void *)(v6 - 8);
  uint64_t v80 = v6;
  __chkstk_darwin();
  unint64_t v78 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for NANFollowUpTransmitter.FollowUpInformation();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v70 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  BOOL v13 = (char *)&v55 - v12;
  uint64_t v14 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v16 = (unsigned __int8 *)&v55 - v15;
  unint64_t v75 = a1;
  uint64_t v82 = a1;
  uint64_t v77 = v1;
  uint64_t v17 = v1 + qword_100486570;
  swift_beginAccess();
  uint64_t v71 = v4;
  uint64_t v72 = v3;
  type metadata accessor for NANFollowUpTransmitter.FollowUpIdentifier();
  swift_getWitnessTable();
  uint64_t v18 = type metadata accessor for Dictionary();
  uint64_t v68 = v17;
  uint64_t v69 = v18;
  Dictionary.removeValue(forKey:)();
  swift_endAccess();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, v8) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  (*(void (**)(unsigned __int8 *, char *, uint64_t))(v14 + 32))(v16, v13, v8);
  uint64_t v20 = v14;
  if (!sub_1003041D4(v8))
  {
    type metadata accessor for P2PTimer();
    char v21 = v78;
    variable initialization expression of AWDLPeer.lastUpdated();
    (*(void (**)(unsigned __int8 *, char *, uint64_t))(v79 + 40))(&v16[*(int *)(v8 + 44)], v21, v80);
    type metadata accessor for BinaryEncoder();
    uint64_t v22 = *((void *)v16 + 1);
    unint64_t v23 = *((void *)v16 + 2);
    v81[0] = *v16;
    v81[1] = v22;
    v81[2] = v23;
    sub_100013D44(v22, v23);
    unint64_t v24 = sub_10021844C();
    uint64_t v25 = static BinaryEncoder.encode<A>(_:)((uint64_t)v81, (uint64_t)&type metadata for NANServiceInfo, v24);
    unint64_t v27 = v26;
    sub_10000C970(v22, v23);
    if (v27 >> 60 != 15)
    {
      unint64_t v29 = v75;
      uint64_t v28 = v76;
      switch(v27 >> 62)
      {
        case 1uLL:
          uint64_t v39 = (int)v25;
          uint64_t v40 = v25 >> 32;
          goto LABEL_10;
        case 2uLL:
          uint64_t v39 = *(void *)(v25 + 16);
          uint64_t v40 = *(void *)(v25 + 24);
LABEL_10:
          if (v39 == v40) {
            goto LABEL_11;
          }
          goto LABEL_7;
        case 3uLL:
          goto LABEL_11;
        default:
          if ((v27 & 0xFF000000000000) != 0)
          {
LABEL_7:
            unint64_t v56 = v27 >> 62;
            unint64_t v64 = HIBYTE(v75);
            unint64_t v78 = (char *)HIDWORD(v75);
            unint64_t v79 = v75 >> 40;
            uint64_t v66 = v25;
            unint64_t v67 = v75 >> 24;
            uint64_t v30 = *(void *)(v77 + qword_100488900);
            uint64_t v80 = v75 >> 8;
            swift_unownedRetainStrong();
            BOOL v31 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
            long long v33 = v73;
            uint64_t v32 = AssociatedTypeWitness;
            v31(v73, v30 + *(void *)(*(void *)v30 + 96), AssociatedTypeWitness);
            swift_release();
            uint64_t v62 = BYTE6(v29);
            unint64_t v63 = HIWORD(v29);
            uint64_t v34 = v32;
            unint64_t v35 = v33;
            uint64_t v36 = v66;
            uint64_t v61 = BYTE5(v29);
            uint64_t v60 = BYTE4(v29);
            uint64_t v57 = BYTE3(v29);
            uint64_t v59 = BYTE2(v29);
            uint64_t v58 = BYTE1(v29);
            unint64_t v37 = (v29 & 0xFF00000000000000 | ((unint64_t)BYTE6(v29) << 48) | ((unint64_t)v79 << 40) | ((unint64_t)v78 << 32) | ((unint64_t)BYTE2(v29) << 16) & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)v67 << 24)) >> 16;
            uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
            (*(void (**)(uint64_t, unint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 248))(v36, v27, v29, v37, v80, v34, AssociatedConformanceWitness);
            uint64_t v65 = v16;
            (*(void (**)(char *, uint64_t))(v76 + 8))(v35, v34);
            sub_100013D44(v36, v27);
            char v41 = Logger.logObject.getter();
            os_log_type_t v42 = static os_log_type_t.info.getter();
            if (!os_log_type_enabled(v41, v42))
            {
              unint64_t v46 = v27;

              sub_10000C95C(v36, v27);
              char v47 = v64;
LABEL_24:
              os_log_type_t v53 = v70;
              uint64_t v54 = v65;
              (*(void (**)(char *, unsigned __int8 *, uint64_t))(v20 + 16))(v70, v65, v8);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v53, 0, 1, v8);
              LOBYTE(v82) = v29;
              BYTE1(v82) = v80;
              BYTE2(v82) = BYTE2(v29);
              BYTE3(v82) = v67;
              BYTE4(v82) = (_BYTE)v78;
              BYTE5(v82) = v79;
              BYTE6(v82) = v63;
              HIBYTE(v82) = v47;
              swift_beginAccess();
              Dictionary.subscript.setter();
              swift_endAccess();
              sub_1003045E0();
              sub_10000C95C(v36, v46);
              return (*(uint64_t (**)(unsigned __int8 *, uint64_t))(v20 + 8))(v54, v8);
            }
            uint64_t v44 = swift_slowAlloc();
            uint64_t v76 = swift_slowAlloc();
            v81[0] = v76;
            *(_DWORD *)uint64_t v44 = 134218498;
            uint64_t v55 = v8;
            if (v56)
            {
              if (v56 == 1)
              {
                LODWORD(v45) = HIDWORD(v36) - v36;
                if (!__OFSUB__(HIDWORD(v36), v36))
                {
                  unint64_t v46 = v27;
                  uint64_t v45 = (int)v45;
LABEL_23:
                  uint64_t v82 = v45;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  sub_10000C95C(v36, v46);
                  *(_WORD *)(v44 + 12) = 2080;
                  char v47 = v64;
                  uint64_t v51 = NANPeerServiceIdentifier.description.getter((v64 << 48) | (v62 << 40) | (v61 << 32) | (v60 << 24) | (v57 << 16) | (v59 << 8) | v58);
                  uint64_t v82 = sub_100010680(v51, v52, v81);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease();
                  *(_WORD *)(v44 + 22) = 256;
                  LODWORD(v29) = v75;
                  LOBYTE(v82) = v75;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  _os_log_impl((void *)&_mh_execute_header, v41, v42, "Transmitted a follow up of size %ld to %s from %hhu", (uint8_t *)v44, 0x19u);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();

                  uint64_t v8 = v55;
                  goto LABEL_24;
                }
                __break(1u);
              }
              else
              {
                uint64_t v49 = *(void *)(v36 + 16);
                uint64_t v48 = *(void *)(v36 + 24);
                BOOL v50 = __OFSUB__(v48, v49);
                uint64_t v45 = v48 - v49;
                if (!v50)
                {
                  unint64_t v46 = v27;
                  goto LABEL_23;
                }
              }
              __break(1u);
              JUMPOUT(0x100306678);
            }
            unint64_t v46 = v27;
            uint64_t v45 = BYTE6(v27);
            goto LABEL_23;
          }
LABEL_11:
          sub_10000C95C(v25, v27);
          break;
      }
    }
  }
  return (*(uint64_t (**)(unsigned __int8 *, uint64_t))(v20 + 8))(v16, v8);
}

uint64_t sub_100306688()
{
  type metadata accessor for NANFollowUpTransmitter.FollowUpInformation();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v1 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v10 - v2;
  uint64_t v4 = (uint64_t *)(v0 + qword_100486570);
  swift_beginAccess();
  uint64_t v5 = *v4;
  type metadata accessor for NANFollowUpTransmitter.FollowUpIdentifier();
  swift_getWitnessTable();
  uint64_t v12 = NANBitmap.Channel.operatingClass.getter(v5);
  type metadata accessor for Dictionary.Keys();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  uint64_t v15 = Set.init<A>(_:)();
  type metadata accessor for Set();
  Set.popFirst()();
  if ((v13 & 1) == 0)
  {
    uint64_t v7 = (void (**)(char *, uint64_t))(v1 + 8);
    do
    {
      uint64_t v8 = v12;
      char v9 = sub_100305444(v12);
      if (v9 == 2)
      {
        uint64_t v14 = v8;
        swift_beginAccess();
        type metadata accessor for Dictionary();
        Dictionary.removeValue(forKey:)();
        swift_endAccess();
        (*v7)(v3, v11);
      }
      else if (v9)
      {
        sub_1003059C0(v8);
      }
      Set.popFirst()();
    }
    while (v13 != 1);
  }
  return swift_bridgeObjectRelease();
}

BOOL sub_100306938(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v40 = a2;
  uint64_t v3 = type metadata accessor for DispatchTimeInterval();
  uint64_t v44 = *(void *)(v3 - 8);
  uint64_t v45 = v3;
  __chkstk_darwin();
  char v43 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  char v41 = (char *)&v31 - v5;
  type metadata accessor for NANFollowUpTransmitter.FollowUpIdentifier();
  uint64_t v6 = type metadata accessor for NANFollowUpTransmitter.FollowUpInformation();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v42 = *(void *)(TupleTypeMetadata2 - 8);
  __chkstk_darwin();
  char v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin();
  uint64_t v12 = (char *)&v31 - v11;
  int v13 = *a1;
  unsigned __int8 v14 = a1[1];
  int v37 = v14;
  int v38 = v13;
  unsigned __int8 v15 = a1[2];
  int v16 = a1[3];
  LOBYTE(v11) = a1[4];
  int v35 = v11;
  int v36 = v16;
  int v17 = a1[5];
  unsigned __int8 v18 = a1[6];
  int v33 = v18;
  int v34 = v17;
  LOBYTE(a1) = a1[7];
  uint64_t v19 = *(int *)(v10 + 48);
  uint64_t v39 = v10;
  uint64_t v32 = &v12[v19];
  *uint64_t v12 = v13;
  v12[1] = v14;
  _OWORD v12[2] = v15;
  v12[3] = v16;
  v12[4] = v11;
  v12[5] = v17;
  v12[6] = v18;
  void v12[7] = (char)a1;
  uint64_t v20 = *(void *)(v6 - 8);
  char v21 = *(void (**)(void))(v20 + 16);
  v21();
  uint64_t v22 = &v9[*(int *)(TupleTypeMetadata2 + 48)];
  *char v9 = v38;
  v9[1] = v37;
  void v9[2] = v15;
  v9[3] = v36;
  void v9[4] = v35;
  void v9[5] = v34;
  v9[6] = v33;
  v9[7] = (char)a1;
  ((void (*)(char *, char *, uint64_t))v21)(v22, v32, v6);
  unint64_t v23 = v41;
  sub_1003040D8();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v6);
  uint64_t v24 = NANConstants.followUpTimeout.unsafeMutableAddressor();
  uint64_t v25 = v43;
  uint64_t v26 = v44;
  uint64_t v27 = v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v43, v24, v45);
  uint64_t v28 = v25;
  LOBYTE(v25) = static DispatchTimeInterval.< infix(_:_:)();
  unint64_t v29 = *(void (**)(char *, uint64_t))(v26 + 8);
  v29(v28, v27);
  v29(v23, v27);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v12, v39);
  return (v25 & 1) == 0;
}

uint64_t sub_100306CB8@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v36 = a2;
  type metadata accessor for NANFollowUpTransmitter.FollowUpIdentifier();
  uint64_t v3 = type metadata accessor for NANFollowUpTransmitter.FollowUpInformation();
  swift_getTupleTypeMetadata2();
  __chkstk_darwin();
  uint64_t v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v29 - v6;
  uint64_t v8 = __chkstk_darwin();
  uint64_t v10 = (char *)&v29 - v9;
  uint64_t v11 = *(int *)(v8 + 56);
  uint64_t v12 = v8;
  uint64_t v31 = v8;
  int v35 = (char *)&v29 + v11 - v9;
  char v41 = &a1[v11];
  LODWORD(v11) = *a1;
  int v13 = a1[1];
  int v14 = a1[2];
  LOBYTE(v9) = a1[3];
  int v38 = v9;
  int v39 = v14;
  int v15 = a1[4];
  int v16 = a1[5];
  unsigned __int8 v17 = a1[6];
  int v43 = v17;
  int v44 = v16;
  unsigned __int8 v18 = a1[7];
  int v32 = v18;
  *uint64_t v10 = v11;
  char v19 = v11;
  int v37 = v11;
  v10[1] = v13;
  v10[2] = v14;
  void v10[3] = v9;
  v10[4] = v15;
  char v20 = v15;
  int v30 = v15;
  void v10[5] = v16;
  v10[6] = v17;
  v10[7] = v18;
  uint64_t v29 = v3;
  uint64_t v21 = *(void *)(v3 - 8);
  uint64_t v40 = *(void (**)(void))(v21 + 16);
  v40();
  int v33 = &v7[*(int *)(v12 + 56)];
  *uint64_t v7 = v19;
  int v34 = v13;
  v7[1] = v13;
  char v22 = v38;
  LOBYTE(v12) = v39;
  v7[2] = v39;
  v7[3] = v22;
  v7[4] = v20;
  v7[5] = v44;
  void v7[6] = v43;
  char v23 = v32;
  v7[7] = v32;
  uint64_t v24 = v29;
  v40();
  uint64_t v25 = &v5[*(int *)(v31 + 56)];
  *uint64_t v5 = v37;
  v5[1] = v13;
  uint64_t v5[2] = v12;
  v5[3] = v22;
  LOBYTE(v12) = v30;
  v5[4] = v30;
  v5[5] = v44;
  v5[6] = v43;
  v5[7] = v23;
  uint64_t v26 = v25;
  v40();
  uint64_t v27 = *(void (**)(char *, uint64_t))(v21 + 8);
  v27(v26, v24);
  v27(v33, v24);
  v27(v35, v24);
  v42[0] = v37;
  v42[1] = v34;
  v42[2] = v39;
  v42[3] = v38;
  v42[4] = v12;
  v42[5] = v44;
  v42[6] = v43;
  v42[7] = v23;
  v42[8] = 1;
  sub_10006EC20((uint64_t)v42);
  sub_10006E544((uint64_t)v42, v36);
  type metadata accessor for DriverEvent(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_100306FEC(unsigned __int8 *a1, char *a2, unint64_t a3)
{
  char v41 = a2;
  unint64_t v42 = a3;
  type metadata accessor for NANFollowUpTransmitter.FollowUpIdentifier();
  uint64_t v4 = type metadata accessor for NANFollowUpTransmitter.FollowUpInformation();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v40 = *(void *)(TupleTypeMetadata2 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin();
  uint64_t v10 = (char *)&v31 - v9;
  int v34 = *a1;
  unsigned __int8 v11 = a1[1];
  uint64_t v12 = a1[2];
  uint64_t v13 = a1[3];
  unsigned __int8 v14 = a1[4];
  uint64_t v36 = v14;
  uint64_t v37 = v13;
  unsigned __int8 v15 = a1[5];
  uint64_t v35 = v15;
  uint64_t v16 = a1[6];
  unsigned __int8 v17 = a1[7];
  uint64_t v38 = v17;
  uint64_t v39 = v8;
  unsigned __int8 v18 = (char *)&v31 + *(int *)(v8 + 48) - v9;
  uint64_t v32 = v4;
  int v33 = v18;
  *uint64_t v10 = v34;
  v10[1] = v11;
  char v19 = v11;
  v10[2] = v12;
  uint64_t v20 = v12;
  void v10[3] = v13;
  v10[4] = v14;
  void v10[5] = v15;
  v10[6] = v16;
  LOBYTE(a1) = v16;
  uint64_t v31 = v16;
  v10[7] = v17;
  uint64_t v21 = *(void *)(v4 - 8);
  char v22 = *(void (**)(void))(v21 + 16);
  v22();
  char v23 = v22;
  char v41 = &v7[*(int *)(TupleTypeMetadata2 + 48)];
  *uint64_t v7 = v34;
  v7[1] = v19;
  uint64_t v24 = v20;
  v7[2] = v20;
  uint64_t v26 = v36;
  uint64_t v25 = v37;
  v7[3] = v37;
  v7[4] = v26;
  uint64_t v27 = v35;
  v7[5] = v35;
  void v7[6] = (char)a1;
  uint64_t v28 = v38;
  v7[7] = v38;
  uint64_t v29 = v32;
  v23();
  LOBYTE(v26) = static NANClusterChangeEvent.__derived_struct_equals(_:_:)(v24 | (v25 << 8) | (v26 << 16) | (v27 << 24) | (v31 << 32) | (v28 << 40), v42 >> 16);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v10, v39);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v41, v29);
  return v26 & 1;
}

BOOL sub_100307284(unsigned __int8 *a1, uint64_t a2, int a3)
{
  int v25 = a3;
  type metadata accessor for NANFollowUpTransmitter.FollowUpIdentifier();
  uint64_t v4 = type metadata accessor for NANFollowUpTransmitter.FollowUpInformation();
  uint64_t v5 = swift_getTupleTypeMetadata2() - 8;
  __chkstk_darwin();
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v20 - v8;
  int v10 = *a1;
  unsigned __int8 v11 = a1[1];
  int v12 = a1[2];
  unsigned __int8 v13 = a1[3];
  unsigned __int8 v14 = a1[4];
  int v23 = v14;
  int v24 = v12;
  LODWORD(v8) = a1[5];
  unsigned __int8 v15 = a1[6];
  int v21 = v15;
  int v22 = v8;
  LOBYTE(a1) = a1[7];
  uint64_t v20 = &v9[*(int *)(v5 + 56)];
  *uint64_t v9 = v10;
  v9[1] = v11;
  void v9[2] = v12;
  v9[3] = v13;
  void v9[4] = v14;
  void v9[5] = v8;
  v9[6] = v15;
  v9[7] = (char)a1;
  uint64_t v16 = *(void *)(v4 - 8);
  (*(void (**)(void))(v16 + 16))();
  unsigned __int8 v17 = &v7[*(int *)(v5 + 56)];
  *uint64_t v7 = v10;
  v7[1] = v11;
  v7[2] = v24;
  v7[3] = v13;
  v7[4] = v23;
  v7[5] = v22;
  void v7[6] = v21;
  v7[7] = (char)a1;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v17, v20, v4);
  BOOL v18 = v10 != v25;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v17, v4);
  return v18;
}

uint64_t sub_1003074A4(uint64_t *a1)
{
  uint64_t v2 = sub_100304BDC((uint64_t)v10);
  uint64_t v9 = *a1;
  type metadata accessor for NANFollowUpTransmitter.FollowUpIdentifier();
  uint64_t v3 = type metadata accessor for NANFollowUpTransmitter.FollowUpInformation();
  swift_getWitnessTable();
  type metadata accessor for Dictionary();
  uint64_t v4 = (void (*)(unsigned char *, void))Dictionary.subscript.modify();
  uint64_t v6 = v5;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v5, 1, v3)) {
    *(unsigned char *)(v6 + 24) = 1;
  }
  v4(v8, 0);
  return v2((uint64_t)v10, 0);
}

uint64_t sub_100307618()
{
  uint64_t v1 = v0 + qword_1004888F8;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_unownedRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_1003076BC()
{
  sub_100307618();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for NANFollowUpTransmitter()
{
  return sub_100038354();
}

uint64_t sub_10030772C()
{
  uint64_t result = type metadata accessor for DispatchTime();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *sub_1003077CC(unsigned char *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = (unsigned char *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(unsigned char *)a2;
    uint64_t v7 = a2[1];
    unint64_t v8 = a2[2];
    sub_100013D44(v7, v8);
    *((void *)v4 + 1) = v7;
    *((void *)v4 + 2) = v8;
    v4[24] = *((unsigned char *)a2 + 24);
    uint64_t v9 = *(int *)(a3 + 40);
    int v10 = &v4[v9];
    uint64_t v11 = (uint64_t)a2 + v9;
    uint64_t v12 = type metadata accessor for DispatchTime();
    unsigned __int8 v13 = *(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v13(&v4[*(int *)(a3 + 44)], (uint64_t)a2 + *(int *)(a3 + 44), v12);
  }
  return v4;
}

uint64_t sub_1003078EC(uint64_t a1, uint64_t a2)
{
  sub_10000C970(*(void *)(a1 + 8), *(void *)(a1 + 16));
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for DispatchTime();
  unint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v8)((void *)(v5 - 8), v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 44);

  return v8(v6, v5);
}

uint64_t sub_1003079A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_100013D44(v6, v7);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v8 = *(int *)(a3 + 40);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for DispatchTime();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v12(a1 + *(int *)(a3 + 44), a2 + *(int *)(a3 + 44), v11);
  return a1;
}

uint64_t sub_100307A70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_100013D44(v6, v7);
  uint64_t v8 = *(void *)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  sub_10000C970(v8, v9);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v10 = *(int *)(a3 + 40);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for DispatchTime();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 24);
  v14(v11, v12, v13);
  v14(a1 + *(int *)(a3 + 44), a2 + *(int *)(a3 + 44), v13);
  return a1;
}

uint64_t sub_100307B48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for DispatchTime();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v10(a1 + *(int *)(a3 + 44), a2 + *(int *)(a3 + 44), v9);
  return a1;
}

uint64_t sub_100307C0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_10000C970(v6, v7);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v8 = *(int *)(a3 + 40);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for DispatchTime();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40);
  v12(v9, v10, v11);
  v12(a1 + *(int *)(a3 + 44), a2 + *(int *)(a3 + 44), v11);
  return a1;
}

uint64_t sub_100307CDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100307CF0);
}

uint64_t sub_100307CF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 24);
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = type metadata accessor for DispatchTime();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 40);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_100307DA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100307DB4);
}

uint64_t sub_100307DB4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(unsigned char *)(result + 24) = a2 + 1;
  }
  else
  {
    uint64_t v7 = type metadata accessor for DispatchTime();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 40);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for NANFollowUpTransmitter.FollowUpInformation()
{
  return sub_100038354();
}

uint64_t type metadata accessor for NANFollowUpTransmitter.FollowUpIdentifier()
{
  return sub_100038354();
}

uint64_t sub_100307E88(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t sub_100307ED0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100307F14(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_100307F1C(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2 & 1;
  return result;
}

uint64_t type metadata accessor for NANFollowUpTransmitter.FollowUpTransmitQueueLimit()
{
  return sub_100038354();
}

uint64_t sub_100307F40()
{
  return swift_getWitnessTable();
}

uint64_t sub_100307F5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010BCC(&qword_100481CA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100307FC4(uint64_t a1)
{
  return a1;
}

uint64_t sub_100307FFC()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100308034()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10030806C()
{
  return sub_10030490C();
}

BOOL sub_100308078(unsigned __int8 *a1, uint64_t a2)
{
  return sub_100306938(a1, a2);
}

uint64_t sub_100308098@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100306CB8(a1, a2);
}

uint64_t sub_1003080B8(uint64_t a1)
{
  __int16 v11 = *(_WORD *)(a1 + 360);
  long long v9 = *(_OWORD *)(a1 + 320);
  long long v10 = *(_OWORD *)(a1 + 336);
  long long v7 = *(_OWORD *)(a1 + 288);
  long long v8 = *(_OWORD *)(a1 + 304);
  long long v5 = *(_OWORD *)(a1 + 256);
  long long v6 = *(_OWORD *)(a1 + 272);
  long long v3 = *(_OWORD *)(a1 + 224);
  long long v4 = *(_OWORD *)(a1 + 240);
  sub_10006DC3C(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((uint64_t *)&v7 + 1),
    v8,
    *((uint64_t *)&v8 + 1),
    v9,
    *((uint64_t *)&v9 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    *(void *)(a1 + 352),
    v11,
    SHIBYTE(v11));
  return a1;
}

BOOL sub_100308154(unsigned __int8 *a1)
{
  uint64_t v2 = 0x100000000000000;
  if (!*(unsigned char *)(v1 + 39)) {
    uint64_t v2 = 0;
  }
  return sub_1003050D8(a1, *(unsigned int *)(v1 + 32) | ((unint64_t)*(unsigned __int8 *)(v1 + 36) << 32) | ((unint64_t)*(unsigned __int8 *)(v1 + 37) << 40) | ((unint64_t)*(unsigned __int8 *)(v1 + 38) << 48) | v2, *(unsigned int *)(v1 + 40) | ((unint64_t)*(unsigned __int8 *)(v1 + 44) << 32) | ((unint64_t)*(unsigned __int8 *)(v1 + 45) << 40));
}

BOOL sub_1003081B8(unsigned __int8 *a1, uint64_t a2)
{
  return sub_100307284(a1, a2, *(unsigned __int8 *)(v2 + 32));
}

BOOL sub_1003081DC(unsigned __int8 *a1)
{
  return *a1 == *(unsigned __int8 *)(v1 + 32);
}

uint64_t sub_1003081F0(uint64_t *a1)
{
  return sub_1003074A4(a1);
}

uint64_t sub_10030820C(unsigned __int8 *a1, char *a2)
{
  return sub_100306FEC(a1, a2, *(void *)(v2 + 32)) & 1;
}

uint64_t sub_100308230(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100308298(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1003082F8()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1003083B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  sub_100308404(a1, a2 & 0xFFFFFFFFFFFFLL);
  return v4;
}

void *sub_100308404(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  unint64_t v6 = a2 >> 8;
  unint64_t v22 = a2 >> 8;
  unint64_t v7 = a2 >> 16;
  unint64_t v8 = a2 >> 24;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = a2 >> 40;
  uint64_t v11 = *v3;
  Logger.init(subsystem:category:)();
  *((unsigned char *)v3 + qword_100486788) = 0;
  *(void *)((char *)v3 + qword_100488910) = a1;
  uint64_t v12 = (char *)v3 + qword_100488918;
  *uint64_t v12 = a2;
  v12[1] = v6;
  _OWORD v12[2] = v7;
  v12[3] = v8;
  v12[4] = v9;
  v12[5] = v10;
  uint64_t v13 = swift_allocObject();
  swift_weakInit();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = *(void *)(v11 + 80);
  *(void *)(v14 + 24) = *(void *)(v11 + 88);
  *(void *)(v14 + 32) = v13;
  *(unsigned char *)(v14 + 40) = a2;
  *(unsigned char *)(v14 + 41) = v22;
  *(unsigned char *)(v14 + 42) = v7;
  *(unsigned char *)(v14 + 43) = v8;
  *(unsigned char *)(v14 + 44) = v9;
  *(unsigned char *)(v14 + 45) = v10;
  swift_unownedRetain();
  swift_retain();
  uint64_t v15 = sub_1003586A4(a2 & 0xFFFFFFFFFFFFLL, 18, (uint64_t)sub_100308B3C, v14);
  swift_release();
  swift_release();
  *(void *)((char *)v3 + qword_100486790) = v15;
  swift_retain();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    BOOL v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)BOOL v18 = 136315138;
    uint64_t v19 = sub_1003089FC();
    sub_100010680(v19, v20, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Created %s", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release();
  }

  swift_release();
  return v3;
}

uint64_t sub_100308700()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100354870();
    swift_release();
    sub_1002FFAB4();
    return swift_release();
  }
  return result;
}

uint64_t sub_10030876C()
{
  if ((*(unsigned char *)(v0 + qword_100486788) & 1) == 0)
  {
    swift_unownedRetainStrong();
    sub_100354870();
    swift_release();
    sub_1002E3FFC();
    swift_release();
  }
  uint64_t v1 = v0 + qword_100488908;
  swift_retain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    uint64_t v5 = sub_1003089FC();
    sub_100010680(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Destroyed %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  uint64_t v7 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v1, v7);
  swift_unownedRelease();
  swift_release();
  return v0;
}

uint64_t sub_100308978()
{
  sub_10030876C();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for NANDeviceLink()
{
  return sub_100038354();
}

void sub_1003089E8()
{
  *(unsigned char *)(v0 + qword_100486788) = 1;
}

uint64_t sub_1003089FC()
{
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  strcpy((char *)v4, "NANDeviceLink[");
  HIBYTE(v4[1]) = -18;
  v1._uint64_t countAndFlagsBits = WiFiAddress.description.getter(*(unsigned __int16 *)(v0 + qword_100488918) | ((unint64_t)*(unsigned int *)(v0 + qword_100488918 + 2) << 16));
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 93;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return v4[0];
}

uint64_t sub_100308AA8()
{
  return sub_1003089FC();
}

uint64_t sub_100308ACC()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100308B04()
{
  swift_release();

  return _swift_deallocObject(v0, 46, 7);
}

uint64_t sub_100308B3C()
{
  return sub_100308700();
}

uint64_t sub_100308B54()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100308C00@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v30 = a3;
  uint64_t v29 = type metadata accessor for AWDLPeer.AdvertisedService(0);
  uint64_t v34 = *(void *)(v29 - 8);
  __chkstk_darwin();
  unint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v8 = (char *)&v27 - v7;
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v32 = a1 + 56;
  uint64_t v10 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & v9;
  int64_t v33 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v28 = a2 + 1;
  uint64_t v39 = a2;
  int v31 = *((unsigned __int8 *)a2 + 33) << 8;
  uint64_t v35 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v14 = 0;
  while (v12)
  {
    unint64_t v15 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    unint64_t v16 = v15 | (v14 << 6);
LABEL_23:
    sub_100314FE0(*(void *)(v35 + 48) + *(void *)(v34 + 72) * v16, (uint64_t)v8, type metadata accessor for AWDLPeer.AdvertisedService);
    sub_1003139F0((uint64_t)v8, (uint64_t)v6);
    uint64_t v20 = *((void *)v6 + 2);
    uint64_t v21 = *((void *)v6 + 3);
    uint64_t v22 = *((void *)v6 + 4);
    __int16 v23 = v6[40];
    __int16 v24 = v6[41];
    *(void *)&long long v36 = *((void *)v6 + 1);
    *((void *)&v36 + 1) = v20;
    long long v38 = *v39;
    sub_10001D82C();
    if (!StringProtocol.caseInsensitiveCompare<A>(_:)()
      && static DNSRecords.Identifier.== infix(_:_:)(v21, v22, v23 | (v24 << 8), *((void *)v39 + 2), *((void *)v39 + 3), v31 | *((unsigned __int8 *)v39 + 32)))
    {
      swift_release();
      uint64_t v25 = v30;
      sub_1003139F0((uint64_t)v6, v30);
      uint64_t v26 = 0;
LABEL_27:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56))(v25, v26, 1, v29);
      long long v38 = *v39;
      sub_1000361C4((uint64_t)&v38);
      long long v36 = *v28;
      __int16 v37 = *((_WORD *)v28 + 8);
      return sub_1000361C4((uint64_t)&v36);
    }
    uint64_t result = sub_100315048((uint64_t)v6, type metadata accessor for AWDLPeer.AdvertisedService);
  }
  int64_t v17 = v14 + 1;
  if (__OFADD__(v14, 1))
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v17 >= v33) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v32 + 8 * v17);
  ++v14;
  if (v18) {
    goto LABEL_22;
  }
  int64_t v14 = v17 + 1;
  if (v17 + 1 >= v33) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v32 + 8 * v14);
  if (v18) {
    goto LABEL_22;
  }
  int64_t v14 = v17 + 2;
  if (v17 + 2 >= v33) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v32 + 8 * v14);
  if (v18) {
    goto LABEL_22;
  }
  int64_t v14 = v17 + 3;
  if (v17 + 3 >= v33) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v32 + 8 * v14);
  if (v18)
  {
LABEL_22:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v14 << 6);
    goto LABEL_23;
  }
  int64_t v19 = v17 + 4;
  if (v19 >= v33)
  {
LABEL_26:
    swift_release();
    uint64_t v26 = 1;
    uint64_t v25 = v30;
    goto LABEL_27;
  }
  unint64_t v18 = *(void *)(v32 + 8 * v19);
  if (v18)
  {
    int64_t v14 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v14 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v14 >= v33) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v32 + 8 * v14);
    ++v19;
    if (v18) {
      goto LABEL_22;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_100308F8C()
{
  swift_unownedRetainStrong();
  sub_100375EB4();

  return swift_release();
}

uint64_t sub_100308FD4()
{
  swift_beginAccess();
  type metadata accessor for AWDLDiscoveryEngine.Browse();
  sub_1000171BC();
  swift_bridgeObjectRetain();
  uint64_t v0 = Dictionary.count.getter();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  type metadata accessor for AWDLDiscoveryEngine.Advertise();
  sub_100017210();
  swift_bridgeObjectRetain();
  uint64_t v1 = Dictionary.count.getter();
  uint64_t result = swift_bridgeObjectRelease();
  BOOL v3 = __OFADD__(v0, v1);
  uint64_t v4 = v0 + v1;
  if (v3)
  {
    __break(1u);
    goto LABEL_5;
  }
  swift_beginAccess();
  type metadata accessor for AWDLDiscoveryEngine.DatapathInitiator();
  swift_bridgeObjectRetain();
  uint64_t v5 = Dictionary.count.getter();
  swift_bridgeObjectRelease();
  uint64_t result = v4 + v5;
  if (__OFADD__(v4, v5)) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t sub_100309184@<X0>(void *a1@<X8>)
{
  BOOL v3 = (uint64_t *)(v1 + qword_100486820);
  swift_beginAccess();
  uint64_t v4 = *v3;
  type metadata accessor for AWDLDiscoveryEngine.Browse();
  sub_1000171BC();
  *a1 = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_10030921C@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  type metadata accessor for AWDLDiscoveryEngine.Advertise();
  sub_100017210();
  uint64_t v2 = type metadata accessor for Dictionary.Keys();
  swift_bridgeObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = sub_1003741D0((void (*)(char *, char *))sub_100309344, 0, v2, (uint64_t)&type metadata for DNSRecords.Identifier, (uint64_t)&type metadata for Never, WitnessTable, (uint64_t)&protocol witness table for Never, v4);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v5;
  return result;
}

uint64_t sub_100309344@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 24);
  char v3 = *(unsigned char *)(a1 + 32);
  char v4 = *(unsigned char *)(a1 + 33);
  *(void *)a2 = *(void *)(a1 + 16);
  *(void *)(a2 + 8) = v2;
  *(unsigned char *)(a2 + 16) = v3;
  *(unsigned char *)(a2 + 17) = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100309378()
{
  uint64_t v28 = _swiftEmptyArrayStorage;
  uint64_t v1 = (uint64_t *)(v0 + qword_100486820);
  swift_beginAccess();
  v24[0] = *v1;
  type metadata accessor for AWDLDiscoveryEngine.Browse();
  sub_1000171BC();
  type metadata accessor for Dictionary();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  Sequence.forEach(_:)();
  swift_bridgeObjectRelease();
  uint64_t v27 = _swiftEmptyArrayStorage;
  uint64_t v2 = (uint64_t *)(v0 + qword_100486828);
  swift_beginAccess();
  v24[0] = *v2;
  type metadata accessor for AWDLDiscoveryEngine.Advertise();
  sub_100017210();
  type metadata accessor for Dictionary();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  Sequence.forEach(_:)();
  swift_bridgeObjectRelease();
  char v3 = _swiftEmptyArrayStorage;
  char v4 = _swiftEmptyArrayStorage;
  if (!_swiftEmptyArrayStorage[2]) {
    goto LABEL_12;
  }
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    v24[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315394;
    swift_beginAccess();
    char v3 = v28;
    swift_bridgeObjectRetain();
    uint64_t v8 = Array.description.getter();
    unint64_t v10 = v9;
    swift_bridgeObjectRelease();
    sub_100010680(v8, v10, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    swift_beginAccess();
    char v4 = v27;
    swift_bridgeObjectRetain();
    uint64_t v11 = Array.description.getter();
    unint64_t v13 = v12;
    swift_bridgeObjectRelease();
    sub_100010680(v11, v13, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to recover browses: %s, advertises: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v14 = v3[2];
  if (v14)
  {
    swift_bridgeObjectRetain();
    unint64_t v15 = (char *)v3 + 49;
    do
    {
      v15 += 24;
      swift_bridgeObjectRetain();
      sub_10030A33C();
      swift_bridgeObjectRelease();
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease();
  }
  uint64_t v16 = v4[2];
  if (v16)
  {
    swift_bridgeObjectRetain();
    int64_t v17 = (char *)v4 + 65;
    do
    {
      char v18 = *v17;
      char v19 = *(v17 - 1);
      uint64_t v20 = *(void *)(v17 - 9);
      uint64_t v21 = *(void *)(v17 - 17);
      uint64_t v22 = *(void *)(v17 - 25);
      v24[0] = *(void *)(v17 - 33);
      v24[1] = v22;
      v24[2] = v21;
      _OWORD v24[3] = v20;
      char v25 = v19;
      char v26 = v18;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_10030A42C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v17 += 40;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease_n();
  }
  else
  {
LABEL_12:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100309828(uint64_t *a1, void **a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  char v6 = *((unsigned char *)a1 + 16);
  char v7 = *((unsigned char *)a1 + 17);
  uint64_t result = sub_100309928(1);
  if (v2)
  {
    unint64_t v9 = *a2;
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a2 = v9;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v9 = sub_100330AC0(0, v9[2] + 1, 1, v9);
      *a2 = v9;
    }
    unint64_t v12 = v9[2];
    unint64_t v11 = v9[3];
    if (v12 >= v11 >> 1)
    {
      unint64_t v9 = sub_100330AC0((void *)(v11 > 1), v12 + 1, 1, v9);
      *a2 = v9;
    }
    void v9[2] = v12 + 1;
    unint64_t v13 = &v9[3 * v12];
    void v13[4] = v5;
    void v13[5] = v4;
    *((unsigned char *)v13 + 48) = v6;
    *((unsigned char *)v13 + 49) = v7;
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_100309928(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  char v6 = (char *)&v14 - v5;
  uint64_t v7 = *(void *)(v1 + qword_1004868B8);
  swift_unownedRetainStrong();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7 + *(void *)(*(void *)v7 + 96), AssociatedTypeWitness);
  swift_release();
  uint64_t v8 = DNSRecords.Identifier.keyData.getter(*(void *)(v1 + qword_1004868C0), *(void *)(v1 + qword_1004868C0 + 8), *(unsigned __int8 *)(v1 + qword_1004868C0 + 16) | (unsigned __int16)(*(unsigned __int8 *)(v1+ qword_1004868C0+ 17) << 8));
  unint64_t v10 = v9;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v12 = v14;
  (*(void (**)(uint64_t, uint64_t, unint64_t, void, unint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 128))(a1, v8, v10, 0, 0xF000000000000000, AssociatedTypeWitness, AssociatedConformanceWitness);
  if (!v12)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, AssociatedTypeWitness);
    return sub_10000C970(v8, v10);
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, AssociatedTypeWitness);
  sub_10000C970(v8, v10);
  uint64_t v18 = v12;
  swift_errorRetain();
  sub_100010BCC((uint64_t *)&unk_1004843F0);
  if (!swift_dynamicCast()) {
    return swift_errorRelease();
  }
  if (v17 == 1)
  {
    if (v15 == 2) {
      goto LABEL_9;
    }
  }
  else
  {
    if (!v17)
    {
      if (v15 != 6) {
        return swift_errorRelease();
      }
LABEL_9:
      swift_errorRelease();
      return swift_errorRelease();
    }
    sub_100012AA4(v15, v16, v17);
  }
  return swift_errorRelease();
}

uint64_t sub_100309BDC(uint64_t *a1, void **a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v6 = a1[3];
  char v8 = *((unsigned char *)a1 + 32);
  char v9 = *((unsigned char *)a1 + 33);
  uint64_t result = sub_100309D04(1u);
  if (v2)
  {
    uint64_t v16 = v5;
    unint64_t v11 = *a2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a2 = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v11 = sub_100330BE4(0, v11[2] + 1, 1, v11);
      *a2 = v11;
    }
    unint64_t v14 = v11[2];
    unint64_t v13 = v11[3];
    if (v14 >= v13 >> 1)
    {
      unint64_t v11 = sub_100330BE4((void *)(v13 > 1), v14 + 1, 1, v11);
      *a2 = v11;
    }
    v11[2] = v14 + 1;
    uint64_t v15 = &v11[5 * v14];
    v15[4] = v16;
    void v15[5] = v4;
    v15[6] = v7;
    v15[7] = v6;
    *((unsigned char *)v15 + 64) = v8;
    *((unsigned char *)v15 + 65) = v9;
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_100309D04(unsigned int a1)
{
  unsigned int v53 = a1;
  uint64_t v50 = *(void *)(*(void *)v1 + 88);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v48 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v43 - v5;
  uint64_t v7 = *(void *)(v1 + qword_100486978);
  swift_unownedRetainStrong();
  uint64_t v8 = v7 + *(void *)(*(void *)v7 + 96);
  uint64_t v52 = v3;
  uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  uint64_t v46 = v3 + 16;
  v45(v6, v8, AssociatedTypeWitness);
  uint64_t v47 = v7;
  swift_release();
  uint64_t v49 = v1;
  long long v9 = *(_OWORD *)(v1 + qword_100486980 + 16);
  long long v63 = *(_OWORD *)(v1 + qword_100486980);
  long long v64 = v9;
  __int16 v65 = *(_WORD *)(v1 + qword_100486980 + 32);
  uint64_t v10 = DNSRecords.PTR.keyData.getter();
  unint64_t v12 = v11;
  uint64_t v13 = DNSRecords.PTR.valueData.getter();
  unint64_t v15 = v14;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  char v17 = *(void (**)(void, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 128);
  uint64_t v18 = v51;
  uint64_t v50 = AssociatedConformanceWitness + 128;
  uint64_t v51 = AssociatedConformanceWitness;
  int v44 = v17;
  ((void (*)(void, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))v17)(v53, v10, v12, v13, v15, AssociatedTypeWitness);
  if (v18)
  {
    char v19 = v6;
    uint64_t v20 = *(void (**)(char *, uint64_t))(v52 + 8);
    v20(v19, AssociatedTypeWitness);
    sub_10000C95C(v13, v15);
    sub_10000C970(v10, v12);
    uint64_t v66 = v18;
    swift_errorRetain();
    sub_100010BCC((uint64_t *)&unk_1004843F0);
    if (!swift_dynamicCast()) {
      return swift_errorRelease();
    }
    if (v56 == 1)
    {
      if (v54 == 2)
      {
LABEL_10:
        swift_errorRelease();
        swift_errorRelease();
        goto LABEL_11;
      }
    }
    else
    {
      if (!v56)
      {
        if (v54 != 6) {
          return swift_errorRelease();
        }
        goto LABEL_10;
      }
      sub_100012AA4(v54, v55, v56);
    }
    return swift_errorRelease();
  }
  uint64_t v21 = v6;
  uint64_t v20 = *(void (**)(char *, uint64_t))(v52 + 8);
  v20(v21, AssociatedTypeWitness);
  sub_10000C95C(v13, v15);
  sub_10000C970(v10, v12);
LABEL_11:
  int v43 = v20;
  if (v53)
  {
    uint64_t v58 = 0;
    memset(v57, 0, sizeof(v57));
    uint64_t v22 = *(void *)(v49 + qword_100486988 + 8);
    uint64_t v23 = *(void *)(v49 + qword_100486988 + 16);
    uint64_t v24 = *(void *)(v49 + qword_100486988 + 24);
    uint64_t v25 = *(void *)(v49 + qword_100486988 + 40);
    unint64_t v26 = *(void *)(v49 + qword_100486988 + 48);
    unint64_t v27 = *(unsigned __int8 *)(v49 + qword_100486988 + 32) | ((unint64_t)*(unsigned __int8 *)(v49 + qword_100486988 + 33) << 8);
    v59[0] = *(void *)(v49 + qword_100486988);
    v59[1] = v22;
    v59[2] = v23;
    v59[3] = v24;
    v59[4] = v27;
    v59[5] = v25;
    v59[6] = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100013D44(v25, v26);
    sub_1003123D4((uint64_t)v57, (uint64_t)v59);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000C970(v25, v26);
  }
  else
  {
    uint64_t v28 = *(void *)(v49 + qword_100486988 + 8);
    uint64_t v29 = *(void *)(v49 + qword_100486988 + 16);
    uint64_t v30 = *(void *)(v49 + qword_100486988 + 24);
    uint64_t v31 = *(void *)(v49 + qword_100486988 + 40);
    unint64_t v32 = *(void *)(v49 + qword_100486988 + 48);
    unint64_t v33 = *(unsigned __int8 *)(v49 + qword_100486988 + 32) | ((unint64_t)*(unsigned __int8 *)(v49 + qword_100486988 + 33) << 8);
    v60[0] = *(void *)(v49 + qword_100486988);
    v60[1] = v28;
    v60[2] = v29;
    uint64_t v60[3] = v30;
    v60[4] = v33;
    v60[5] = v31;
    v60[6] = v32;
    memset(v61, 0, sizeof(v61));
    uint64_t v62 = 0;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100013D44(v31, v32);
    sub_1003123D4((uint64_t)v60, (uint64_t)v61);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000C970(v31, v32);
  }
  uint64_t v34 = v47;
  swift_unownedRetainStrong();
  uint64_t v35 = v48;
  v45(v48, v34 + *(void *)(*(void *)v34 + 96), AssociatedTypeWitness);
  swift_release();
  uint64_t v36 = DNSRecords.SRV.keyData.getter();
  unint64_t v38 = v37;
  uint64_t v39 = DNSRecords.SRV.valueData.getter();
  unint64_t v41 = v40;
  v44(v53 & 1, v36, v38, v39, v40, AssociatedTypeWitness, v51);
  v43(v35, AssociatedTypeWitness);
  sub_10000C95C(v39, v41);
  return sub_10000C970(v36, v38);
}

uint64_t sub_10030A33C()
{
  swift_beginAccess();
  type metadata accessor for AWDLDiscoveryEngine.Browse();
  sub_1000171BC();
  type metadata accessor for Dictionary();
  Dictionary.removeValue(forKey:)();
  swift_endAccess();
  uint64_t result = sub_100308F8C();
  if (v1)
  {
    sub_10030E3F4();
    return swift_release();
  }
  return result;
}

uint64_t sub_10030A42C()
{
  swift_beginAccess();
  type metadata accessor for AWDLDiscoveryEngine.Advertise();
  sub_100017210();
  type metadata accessor for Dictionary();
  Dictionary.removeValue(forKey:)();
  swift_endAccess();
  uint64_t result = sub_100308F8C();
  if (v1)
  {
    sub_10030F540();
    return swift_release();
  }
  return result;
}

uint64_t sub_10030A518()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (void *)((char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = OS_dispatch_queue.awdl.unsafeMutableAddressor();
  uint64_t v7 = (void *)*v6;
  *uint64_t v5 = *v6;
  (*(void (**)(uint64_t *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
  if (v7)
  {
    uint64_t v10 = (uint64_t *)(v0 + qword_100488930);
    swift_beginAccess();
    uint64_t v11 = *v10;
    type metadata accessor for AWDLDiscoveryEngine.DatapathInitiator();
    _OWORD v16[2] = sub_100017210();
    uint64_t v19 = v11;
    type metadata accessor for Dictionary.Keys();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    uint64_t v19 = Array.init<A>(_:)();
    sub_100010BCC((uint64_t *)&unk_100486B50);
    v16[1] = swift_getWitnessTable();
    Sequence.forEach(_:)();
    swift_bridgeObjectRelease();
    unint64_t v12 = (uint64_t *)(v0 + qword_100486820);
    swift_beginAccess();
    uint64_t v13 = *v12;
    type metadata accessor for AWDLDiscoveryEngine.Browse();
    sub_1000171BC();
    uint64_t v18 = v13;
    type metadata accessor for Dictionary.Keys();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    uint64_t v18 = Array.init<A>(_:)();
    sub_100010BCC((uint64_t *)&unk_100486B60);
    swift_getWitnessTable();
    Sequence.forEach(_:)();
    swift_bridgeObjectRelease();
    unint64_t v14 = (uint64_t *)(v1 + qword_100486828);
    swift_beginAccess();
    uint64_t v15 = *v14;
    type metadata accessor for AWDLDiscoveryEngine.Advertise();
    uint64_t v17 = v15;
    type metadata accessor for Dictionary.Keys();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    uint64_t v17 = Array.init<A>(_:)();
    Sequence.forEach(_:)();
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10030A90C()
{
  swift_beginAccess();
  type metadata accessor for AWDLDiscoveryEngine.DatapathInitiator();
  sub_100017210();
  type metadata accessor for Dictionary();
  Dictionary.removeValue(forKey:)();
  uint64_t result = swift_endAccess();
  if (v1)
  {
    sub_1003111BC();
    return swift_release();
  }
  return result;
}

uint64_t sub_10030A9EC()
{
  uint64_t v1 = (uint64_t *)(v0 + qword_100486820);
  swift_beginAccess();
  uint64_t v2 = *v1;
  type metadata accessor for AWDLDiscoveryEngine.Browse();
  sub_1000171BC();
  NANBitmap.Channel.operatingClass.getter(v2);
  type metadata accessor for Dictionary.Values();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  Sequence.forEach(_:)();
  swift_bridgeObjectRelease();
  uint64_t v3 = (uint64_t *)(v0 + qword_100486828);
  swift_beginAccess();
  uint64_t v4 = *v3;
  type metadata accessor for AWDLDiscoveryEngine.Advertise();
  sub_100017210();
  NANBitmap.Channel.operatingClass.getter(v4);
  type metadata accessor for Dictionary.Values();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  Sequence.forEach(_:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10030ABF8@<X0>(uint64_t a1@<X8>)
{
  return sub_10030AC78((uint64_t)sub_1003157A0, (void (*)(uint64_t *__return_ptr, uint64_t, unsigned char *, uint64_t, uint64_t))&Sequence.max(by:), (void (*)(char *, char *))sub_1003157C0, a1);
}

uint64_t sub_10030AC38@<X0>(uint64_t a1@<X8>)
{
  return sub_10030AC78((uint64_t)sub_100315868, (void (*)(uint64_t *__return_ptr, uint64_t, unsigned char *, uint64_t, uint64_t))&Sequence.min(by:), (void (*)(char *, char *))sub_100315850, a1);
}

uint64_t sub_10030AC78@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t *__return_ptr, uint64_t, unsigned char *, uint64_t, uint64_t)@<X1>, void (*a3)(char *, char *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = *v4;
  uint64_t v10 = (uint64_t *)((char *)v4 + qword_100486820);
  swift_beginAccess();
  uint64_t v11 = *v10;
  uint64_t v12 = *(void *)(v9 + 80);
  uint64_t v13 = *(void *)(v9 + 88);
  type metadata accessor for AWDLDiscoveryEngine.Browse();
  sub_1000171BC();
  uint64_t v23 = NANBitmap.Channel.operatingClass.getter(v11);
  uint64_t v21 = v12;
  uint64_t v22 = v13;
  uint64_t v14 = type metadata accessor for Dictionary.Values();
  swift_bridgeObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  a2(&v24, a1, v20, v14, WitnessTable);
  swift_bridgeObjectRelease();
  uint64_t v23 = v24;
  v19[2] = v12;
  v19[3] = v13;
  type metadata accessor for Optional();
  uint64_t v16 = type metadata accessor for DispatchTimeInterval();
  sub_1002D91C4(a3, (uint64_t)v19, (uint64_t)&type metadata for Never, v16, v17, a4);
  return swift_release();
}

uint64_t sub_10030AE20(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for DispatchTime();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  uint64_t v9 = &v17[-v8];
  uint64_t v10 = *a1;
  uint64_t v11 = *a2;
  uint64_t v12 = v10 + qword_1004868E8;
  swift_beginAccess();
  uint64_t v13 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16);
  v13(v9, v12, v4);
  uint64_t v14 = v11 + qword_1004868E8;
  swift_beginAccess();
  v13(v7, v14, v4);
  LOBYTE(v14) = static DispatchTime.< infix(_:_:)();
  uint64_t v15 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
  v15(v7, v4);
  v15(v9, v4);
  return v14 & 1;
}

uint64_t sub_10030AFC8(uint64_t *a1)
{
  uint64_t v2 = type metadata accessor for DispatchTime();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v12 - v6;
  uint64_t v8 = *a1;
  type metadata accessor for P2PTimer();
  variable initialization expression of AWDLPeer.lastUpdated();
  uint64_t v9 = v8 + qword_1004868E8;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v9, v2);
  DispatchTime.distance(to:)();
  uint64_t v10 = *(void (**)(char *, uint64_t))(v3 + 8);
  v10(v5, v2);
  return ((uint64_t (*)(char *, uint64_t))v10)(v7, v2);
}

uint64_t sub_10030B140()
{
  uint64_t v1 = v0;
  uint64_t v2 = (uint64_t *)(v0 + qword_100486820);
  swift_beginAccess();
  uint64_t v3 = *v2;
  type metadata accessor for AWDLDiscoveryEngine.Browse();
  sub_1000171BC();
  NANBitmap.Channel.operatingClass.getter(v3);
  type metadata accessor for Dictionary.Values();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  char v4 = Sequence.contains(where:)();
  swift_bridgeObjectRelease();
  if (v4)
  {
    char v5 = 1;
  }
  else
  {
    uint64_t v6 = (uint64_t *)(v1 + qword_100486828);
    swift_beginAccess();
    uint64_t v7 = *v6;
    type metadata accessor for AWDLDiscoveryEngine.Advertise();
    sub_100017210();
    NANBitmap.Channel.operatingClass.getter(v7);
    __chkstk_darwin();
    type metadata accessor for Dictionary.Values();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    char v5 = Sequence.contains(where:)();
    swift_bridgeObjectRelease();
  }
  return v5 & 1;
}

uint64_t sub_10030B3A0()
{
  uint64_t v1 = (uint64_t *)(v0 + qword_100486820);
  swift_beginAccess();
  uint64_t v2 = *v1;
  type metadata accessor for AWDLDiscoveryEngine.Browse();
  sub_1000171BC();
  NANBitmap.Channel.operatingClass.getter(v2);
  type metadata accessor for Dictionary.Values();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  Sequence.forEach(_:)();
  swift_bridgeObjectRelease();
  uint64_t v3 = (uint64_t *)(v0 + qword_100486828);
  swift_beginAccess();
  uint64_t v4 = *v3;
  type metadata accessor for AWDLDiscoveryEngine.Advertise();
  sub_100017210();
  NANBitmap.Channel.operatingClass.getter(v4);
  type metadata accessor for Dictionary.Values();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  Sequence.forEach(_:)();
  return swift_bridgeObjectRelease();
}

void sub_10030B5A8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *(unsigned char *)(*a1 + qword_1004868E0) = *(unsigned char *)(*a1 + qword_1004868D8);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315650;
    uint64_t v5 = *(void *)(v1 + qword_1004868C0);
    unint64_t v6 = *(void *)(v1 + qword_1004868C0 + 8);
    swift_bridgeObjectRetain();
    sub_100010680(v5, v6, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 1024;
    swift_release();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v4 + 18) = 1024;
    swift_release();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "triggeredTTRForServiceAcrossSleep BService:%s sleep/wake:%{BOOL}d alreadyTTR:%{BOOL}d", (uint8_t *)v4, 0x18u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }
}

uint64_t sub_10030B7B0()
{
  uint64_t v1 = v0 + qword_100488920;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_unownedRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10030B854()
{
  return sub_10031368C((void (*)(void))sub_10030B7B0);
}

uint64_t type metadata accessor for AWDLDiscoveryEngine()
{
  return sub_100038354();
}

uint64_t sub_10030B884()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for DispatchTime();
    if (v2 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }
  return result;
}

uint64_t sub_10030B978(uint64_t a1, uint64_t a2, unsigned int a3, void *a4)
{
  unsigned int v24 = a3 >> 8;
  uint64_t v9 = *(void *)(v4 + qword_100488928);
  swift_unownedRetainStrong();
  swift_beginAccess();
  unsigned int v10 = a3 & 0xFFFFFF01;
  swift_bridgeObjectRetain();
  sub_1003A567C((uint64_t)&v27, a1, a2, v10);
  swift_endAccess();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v11 = a1;
  type metadata accessor for AWDLDiscoveryEngine.Browse();
  swift_unownedRetainStrong();
  swift_allocObject();
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_100311848(v9, a1, a2, v10);
  *(void *)(v12 + qword_1004868C8) = a4;
  swift_unknownObjectRelease();
  uint64_t v31 = v12;
  uint64_t v27 = a1;
  uint64_t v28 = a2;
  char v29 = v10;
  char v30 = v24;
  swift_beginAccess();
  sub_1000171BC();
  type metadata accessor for Dictionary();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_retain();
  Dictionary.subscript.setter();
  swift_endAccess();
  sub_100308F8C();
  sub_10030BEE4();
  if (v23)
  {
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v22 = (void *)swift_slowAlloc();
      v26[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315394;
      swift_bridgeObjectRetain();
      DNSRecords.Identifier.description.getter(v11, a2, v10);
      os_log_t log = v13;
      unint64_t v17 = v16;
      swift_bridgeObjectRelease();
      uint64_t v27 = sub_100010680(v11, v17, v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 12) = 2112;
      swift_errorRetain();
      uint64_t v18 = v11;
      uint64_t v19 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v27 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v22 = v19;
      uint64_t v11 = v18;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, log, v14, "Failed to start browse for %s because %@", (uint8_t *)v15, 0x16u);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();

      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v27 = v11;
    uint64_t v28 = a2;
    char v29 = v10;
    char v30 = v24;
    swift_beginAccess();
    Dictionary.removeValue(forKey:)();
    swift_endAccess();
    swift_release();
    sub_100308F8C();
    swift_getErrorValue();
    [a4 subscribeFailedToStartWithError:Error.apiError.getter(v25)];
    swift_willThrow();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_release();
  }
  return v11;
}

uint64_t sub_10030BE80(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return sub_100311848(a1, a2, a3, a4 & 0xFFFFFF01);
}

uint64_t sub_10030BEE4()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for DispatchTime();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  unint64_t v6 = (char *)&v26[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  unsigned int v10 = (uint64_t *)((char *)&v26[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = OS_dispatch_queue.awdl.unsafeMutableAddressor();
  uint64_t v12 = (void *)*v11;
  *unsigned int v10 = *v11;
  (*(void (**)(uint64_t *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v8 + 8))(v10, v7);
  if (v12)
  {
    uint64_t result = sub_100309928(1);
    if (!v1)
    {
      *(unsigned char *)(v2 + qword_1004868D0) = 1;
      type metadata accessor for P2PTimer();
      variable initialization expression of AWDLPeer.lastUpdated();
      uint64_t v15 = v2 + qword_1004868E8;
      swift_beginAccess();
      (*(void (**)(uint64_t, char *, uint64_t))(v4 + 40))(v15, v6, v3);
      swift_endAccess();
      unint64_t v16 = *(void **)(v2 + qword_1004868C8);
      if (v16) {
        [v16 subscribeStartedWithInstanceID:0];
      }
      swift_retain();
      unint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc();
        v26[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v19 = 136315138;
        uint64_t v20 = sub_100311F78();
        void v26[4] = sub_100010680(v20, v21, v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "%s was started", v19, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release();
      }

      uint64_t v22 = *(void *)(v2 + qword_1004868B8);
      swift_unownedRetainStrong();
      uint64_t v23 = (uint64_t *)(v22 + *(void *)(*(void *)v22 + 424));
      swift_beginAccess();
      uint64_t v24 = *v23;
      swift_bridgeObjectRetain();
      swift_release();
      sub_1003151F8(v24, (void (*)(uint64_t, uint64_t))sub_100315670);
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10030C2C8()
{
  DNSRecords.Identifier.assistedDiscovery.unsafeMutableAddressor();
  swift_beginAccess();
  type metadata accessor for AWDLDiscoveryEngine.Browse();
  sub_1000171BC();
  swift_bridgeObjectRetain();
  Dictionary.subscript.getter();
  swift_bridgeObjectRelease();
  if (!v4)
  {
    swift_endAccess();
LABEL_7:
    uint64_t v7 = 0;
    long long v5 = 0u;
    long long v6 = 0u;
    return sub_1000380B4((uint64_t)&v5, &qword_100486F50);
  }
  swift_endAccess();
  uint64_t v0 = *(void *)(v4 + qword_1004868C8);
  swift_unknownObjectRetain();
  swift_release();
  if (!v0) {
    goto LABEL_7;
  }
  sub_100010BCC(&qword_100486390);
  sub_100010BCC((uint64_t *)&unk_100486F70);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v1 = *((void *)&v6 + 1);
  if (*((void *)&v6 + 1))
  {
    uint64_t v2 = v7;
    sub_1000369C4(&v5, *((uint64_t *)&v6 + 1));
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
    return sub_100010754((uint64_t)&v5);
  }
  return sub_1000380B4((uint64_t)&v5, &qword_100486F50);
}

uint64_t sub_10030C488(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v127 = type metadata accessor for AWDLPeer.AdvertisedService(0);
  uint64_t v136 = *(void *)(v127 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)v121 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v126 = (uint64_t)v121 - v8;
  __chkstk_darwin();
  uint64_t v129 = (void *)((char *)v121 - v9);
  __chkstk_darwin();
  uint64_t v11 = (char *)v121 - v10;
  __chkstk_darwin();
  uint64_t v135 = (uint64_t)v121 - v12;
  uint64_t v139 = *(void *)(v5 + 88);
  v121[0] = v2;
  uint64_t v13 = *(void *)(v5 + 80);
  swift_getAssociatedTypeWitness();
  uint64_t v138 = v13;
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v14 = type metadata accessor for Preferences();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin();
  unint64_t v17 = (char *)v121 - v16;
  uint64_t v130 = (int *)type metadata accessor for AWDLPeer(0);
  uint64_t v18 = v130[10];
  uint64_t v131 = a1;
  uint64_t v19 = (unsigned __int8 *)(a1 + v18);
  if (*((void *)v19 + 3) >> 60 != 15)
  {
    int v20 = *v19;
    if ((*(unsigned __int8 *)AWDLActionFrame.ServiceParameter.Flags.supportsWiFiAwareMigration.unsafeMutableAddressor() & ~v20) == 0)
    {
      swift_unownedRetainStrong();
      WiFiInterface.preferences.getter();
      swift_release();
      uint64_t v21 = Preferences.enableUserspaceP2POptions.getter(v14);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      if ((*(void *)PreferenceDefaults.EnableUserspaceP2POptions.awdlToWiFiAwareMigration.unsafeMutableAddressor() & ~v21) == 0)
      {
        swift_unownedRetainStrong();
        uint64_t v22 = WiFiInterface.capabilities.getter();
        swift_release();
        uint64_t v23 = *WiFiDriverCapabilities.supportsNAN.unsafeMutableAddressor();
        uint64_t v151 = v22;
        uint64_t v156 = v23;
        unint64_t v24 = sub_1002C8868();
        swift_bridgeObjectRetain_n();
        ExtendableOptionSet.formIntersection(_:)((uint64_t)&v151, (uint64_t)&type metadata for WiFiDriverCapabilities, v24);
        LOBYTE(v24) = sub_1000956AC(v156, v23);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        if (v24) {
          return result;
        }
      }
    }
  }
  uint64_t v26 = *(void *)(v131 + v130[20]);
  uint64_t v27 = *(void *)(v26 + 56);
  uint64_t v132 = v26 + 56;
  uint64_t v28 = 1 << *(unsigned char *)(v26 + 32);
  if (v28 < 64) {
    uint64_t v29 = ~(-1 << v28);
  }
  else {
    uint64_t v29 = -1;
  }
  unint64_t v30 = v29 & v27;
  uint64_t v134 = v121[0] + qword_100486820;
  v121[1] = v121[0] + qword_100488930;
  int64_t v133 = (unint64_t)(v28 + 63) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v137 = v26;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v31 = 0;
  uint64_t v147 = v11;
LABEL_11:
  uint64_t v146 = a2 + 56;
  uint64_t v143 = a2;
  while (1)
  {
    if (v30)
    {
      uint64_t v140 = (v30 - 1) & v30;
      int64_t v141 = v31;
      unint64_t v36 = __clz(__rbit64(v30)) | (v31 << 6);
      goto LABEL_32;
    }
    int64_t v37 = v31 + 1;
    if (__OFADD__(v31, 1))
    {
      __break(1u);
      goto LABEL_62;
    }
    if (v37 >= v133) {
      goto LABEL_59;
    }
    unint64_t v38 = *(void *)(v132 + 8 * v37);
    int64_t v39 = v31 + 1;
    if (!v38)
    {
      int64_t v39 = v31 + 2;
      if (v31 + 2 >= v133) {
        goto LABEL_59;
      }
      unint64_t v38 = *(void *)(v132 + 8 * v39);
      if (!v38)
      {
        int64_t v39 = v31 + 3;
        if (v31 + 3 >= v133) {
          goto LABEL_59;
        }
        unint64_t v38 = *(void *)(v132 + 8 * v39);
        if (!v38) {
          break;
        }
      }
    }
LABEL_31:
    uint64_t v140 = (v38 - 1) & v38;
    int64_t v141 = v39;
    unint64_t v36 = __clz(__rbit64(v38)) + (v39 << 6);
LABEL_32:
    uint64_t v41 = *(void *)(v137 + 48);
    uint64_t v145 = *(void *)(v136 + 72);
    uint64_t v42 = v135;
    sub_100314FE0(v41 + v145 * v36, v135, type metadata accessor for AWDLPeer.AdvertisedService);
    sub_1003139F0(v42, (uint64_t)v11);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    AWDLPeer.AdvertisedService.hash(into:)();
    Swift::Int v43 = Hasher._finalize()();
    uint64_t v44 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v45 = v43 & ~v44;
    if ((*(void *)(v146 + ((v45 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v45))
    {
      unint64_t v144 = ~v44;
      do
      {
        uint64_t v46 = v45 * v145;
        sub_100314FE0(*(void *)(a2 + 48) + v45 * v145, (uint64_t)v7, type metadata accessor for AWDLPeer.AdvertisedService);
        uint64_t v47 = *((void *)v7 + 1);
        uint64_t v48 = *((void *)v7 + 2);
        uint64_t v49 = *((void *)v7 + 3);
        uint64_t v149 = *((void *)v7 + 4);
        uint64_t v150 = v49;
        __int16 v50 = v7[40];
        __int16 v51 = v7[41];
        uint64_t v52 = *((void *)v147 + 1);
        uint64_t v53 = *((void *)v147 + 2);
        uint64_t v54 = *((void *)v147 + 3);
        uint64_t v148 = *((void *)v147 + 4);
        __int16 v55 = v147[40];
        __int16 v56 = v147[41];
        uint64_t v156 = v47;
        uint64_t v157 = v48;
        uint64_t v151 = v52;
        uint64_t v152 = v53;
        sub_10001D82C();
        if (StringProtocol.caseInsensitiveCompare<A>(_:)())
        {
          sub_100315048((uint64_t)v7, type metadata accessor for AWDLPeer.AdvertisedService);
        }
        else
        {
          uint64_t v142 = v46;
          BOOL v57 = static DNSRecords.Identifier.== infix(_:_:)(v150, v149, v50 | (v51 << 8), v54, v148, v55 | (v56 << 8));
          sub_100315048((uint64_t)v7, type metadata accessor for AWDLPeer.AdvertisedService);
          if (v57)
          {
            uint64_t v58 = v143;
            swift_bridgeObjectRelease();
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v156 = v58;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_100173A1C();
              uint64_t v58 = v156;
            }
            uint64_t v60 = *(void *)(v58 + 48) + v142;
            uint64_t v61 = v126;
            sub_1003139F0(v60, v126);
            sub_10017455C(v45);
            a2 = v156;
            swift_bridgeObjectRelease();
            uint64_t v62 = v61;
            long long v63 = v129;
            sub_1003139F0(v62, (uint64_t)v129);
            uint64_t v65 = v63[6];
            uint64_t v64 = v63[7];
            uint64_t v66 = v63[8];
            uint64_t v67 = v63[9];
            uint64_t v68 = v63[10];
            uint64_t v69 = v63[11];
            unint64_t v70 = v63[12];
            uint64_t v11 = v147;
            uint64_t v72 = *((void *)v147 + 6);
            uint64_t v71 = *((void *)v147 + 7);
            uint64_t v73 = *((void *)v147 + 8);
            uint64_t v150 = *((void *)v147 + 9);
            uint64_t v74 = *((void *)v147 + 11);
            uint64_t v149 = *((void *)v147 + 10);
            unint64_t v75 = *((void *)v147 + 12);
            if (!v64)
            {
              if (!v71) {
                goto LABEL_50;
              }
LABEL_45:
              uint64_t v93 = v65;
              uint64_t v128 = v65;
              uint64_t v94 = v74;
              uint64_t v143 = v72;
              uint64_t v95 = v64;
              uint64_t v142 = v64;
              uint64_t v96 = v71;
              uint64_t v145 = v73;
              uint64_t v146 = v66;
              uint64_t v97 = v73;
              uint64_t v148 = v68;
              uint64_t v98 = v69;
              unint64_t v144 = v70;
              sub_1000362B4(v93, v95, v66, v67, v68, v69, v70);
              uint64_t v99 = v97;
              uint64_t v100 = v149;
              sub_1000362B4(v72, v96, v99, v150, v149, v94, v75);
              sub_100036090(v128, v142, v146, v67, v148, v98, v144);
              uint64_t v86 = v143;
              uint64_t v87 = v96;
              uint64_t v88 = v145;
              uint64_t v89 = v150;
              uint64_t v90 = v100;
              uint64_t v91 = v94;
              unint64_t v92 = v75;
              goto LABEL_46;
            }
            if (!v71) {
              goto LABEL_45;
            }
            uint64_t v156 = v65;
            uint64_t v157 = v64;
            uint64_t v151 = v72;
            uint64_t v152 = v71;
            uint64_t v76 = v65;
            unint64_t v124 = v75;
            uint64_t v128 = v65;
            uint64_t v77 = v64;
            uint64_t v78 = v71;
            uint64_t v142 = v64;
            uint64_t v79 = v73;
            uint64_t v146 = v66;
            uint64_t v125 = v67;
            uint64_t v148 = v68;
            uint64_t v80 = v69;
            unint64_t v144 = v70;
            sub_1000362B4(v76, v77, v66, v67, v68, v69, v70);
            uint64_t v143 = v72;
            uint64_t v81 = v72;
            uint64_t v122 = v78;
            uint64_t v145 = v79;
            uint64_t v82 = v79;
            uint64_t v83 = v149;
            uint64_t v84 = v150;
            unint64_t v85 = v124;
            uint64_t v123 = v74;
            sub_1000362B4(v81, v78, v82, v150, v149, v74, v124);
            if (StringProtocol.caseInsensitiveCompare<A>(_:)())
            {
              sub_100036090(v143, v122, v145, v84, v83, v123, v85);
              uint64_t v86 = v128;
              uint64_t v87 = v142;
              uint64_t v88 = v146;
              uint64_t v89 = v125;
              uint64_t v90 = v148;
              uint64_t v91 = v80;
              unint64_t v92 = v144;
              goto LABEL_46;
            }
            uint64_t v115 = v143;
            uint64_t v116 = v122;
            uint64_t v117 = v123;
            if (static DNSRecords.Identifier.== infix(_:_:)(v146, v125, v148 & 0xFF01, v145, v84, v83 & 0xFF01))
            {
              unint64_t v118 = v85;
              char v119 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v80, v144, v117, v85);
              sub_100036090(v115, v116, v145, v84, v149, v117, v118);
              sub_100036090(v128, v142, v146, v125, v148, v80, v144);
              if (v119) {
                goto LABEL_50;
              }
              goto LABEL_47;
            }
            sub_100036090(v115, v116, v145, v84, v83, v117, v85);
            uint64_t v86 = v128;
            uint64_t v87 = v142;
            uint64_t v88 = v146;
            uint64_t v89 = v125;
            uint64_t v90 = v148;
            uint64_t v91 = v80;
            unint64_t v92 = v144;
LABEL_46:
            sub_100036090(v86, v87, v88, v89, v90, v91, v92);
LABEL_47:
            uint64_t v102 = *((void *)v11 + 3);
            uint64_t v101 = *((void *)v11 + 4);
            char v103 = v11[40];
            char v104 = v11[41];
            swift_beginAccess();
            uint64_t v151 = v102;
            uint64_t v152 = v101;
            char v153 = v103;
            char v154 = v104;
            type metadata accessor for AWDLDiscoveryEngine.Browse();
            sub_1000171BC();
            swift_bridgeObjectRetain();
            Dictionary.subscript.getter();
            swift_bridgeObjectRelease();
            if (v155)
            {
              swift_endAccess();
              sub_10030D388(v11, *(unsigned __int16 *)(v131 + v130[5]) | ((unint64_t)*(unsigned int *)(v131 + v130[5] + 2) << 16));
              swift_release();
            }
            else
            {
              swift_endAccess();
            }
LABEL_50:
            uint64_t v105 = *(int *)(v127 + 28);
            uint64_t v106 = (uint64_t)v129;
            uint64_t v107 = (uint64_t)&v11[v105];
            if (static DNSRecords.SRV.__derived_struct_equals(_:_:)((char *)v129 + v105, &v11[v105]))
            {
              sub_100315048(v106, type metadata accessor for AWDLPeer.AdvertisedService);
            }
            else
            {
              uint64_t v109 = *((void *)v11 + 1);
              uint64_t v108 = *((void *)v11 + 2);
              uint64_t v111 = *((void *)v11 + 3);
              uint64_t v110 = *((void *)v11 + 4);
              uint64_t v112 = v11;
              char v113 = v11[40];
              char v114 = v112[41];
              swift_beginAccess();
              uint64_t v156 = v109;
              uint64_t v157 = v108;
              uint64_t v158 = v111;
              uint64_t v159 = v110;
              char v160 = v113;
              char v161 = v114;
              type metadata accessor for AWDLDiscoveryEngine.DatapathInitiator();
              sub_100017210();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              Dictionary.subscript.getter();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v155)
              {
                swift_endAccess();
                sub_10030D534(v107);
                swift_release();
              }
              else
              {
                swift_endAccess();
              }
              sub_100315048((uint64_t)v129, type metadata accessor for AWDLPeer.AdvertisedService);
              uint64_t v11 = v147;
            }
            uint64_t result = sub_100315048((uint64_t)v11, type metadata accessor for AWDLPeer.AdvertisedService);
            int64_t v31 = v141;
            unint64_t v30 = v140;
            goto LABEL_11;
          }
        }
        unint64_t v45 = (v45 + 1) & v144;
        a2 = v143;
      }
      while (((*(void *)(v146 + ((v45 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v45) & 1) != 0);
    }
    swift_bridgeObjectRelease();
    uint64_t v11 = v147;
    uint64_t v33 = *((void *)v147 + 3);
    uint64_t v32 = *((void *)v147 + 4);
    char v34 = v147[40];
    char v35 = v147[41];
    swift_beginAccess();
    uint64_t v151 = v33;
    uint64_t v152 = v32;
    char v153 = v34;
    char v154 = v35;
    type metadata accessor for AWDLDiscoveryEngine.Browse();
    sub_1000171BC();
    swift_bridgeObjectRetain();
    Dictionary.subscript.getter();
    swift_bridgeObjectRelease();
    if (v155)
    {
      swift_endAccess();
      sub_10030D89C(v11, *(unsigned __int16 *)(v131 + v130[5]) | ((unint64_t)*(unsigned int *)(v131 + v130[5] + 2) << 16));
      swift_release();
    }
    else
    {
      swift_endAccess();
    }
    uint64_t result = sub_100315048((uint64_t)v11, type metadata accessor for AWDLPeer.AdvertisedService);
    int64_t v31 = v141;
    unint64_t v30 = v140;
  }
  uint64_t v40 = v31 + 4;
  if (v31 + 4 >= v133)
  {
LABEL_59:
    swift_release();
    __chkstk_darwin();
    uint64_t v120 = v131;
    v121[-2] = v121[0];
    v121[-1] = v120;
    swift_bridgeObjectRetain();
    sub_100370160((void (*)(char *))sub_100314F60, (uint64_t)&v121[-4], a2);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  unint64_t v38 = *(void *)(v132 + 8 * v40);
  if (v38)
  {
    int64_t v39 = v31 + 4;
    goto LABEL_31;
  }
  while (1)
  {
    int64_t v39 = v40 + 1;
    if (__OFADD__(v40, 1)) {
      break;
    }
    if (v39 >= v133) {
      goto LABEL_59;
    }
    unint64_t v38 = *(void *)(v132 + 8 * v39);
    ++v40;
    if (v38) {
      goto LABEL_31;
    }
  }
LABEL_62:
  __break(1u);
  return result;
}

uint64_t sub_10030D388(void *a1, uint64_t a2)
{
  id v5 = [objc_allocWithZone((Class)WiFiAwarePublishServiceSpecificInfo) init];
  NSString v6 = String._bridgeToObjectiveC()();
  [v5 setInstanceName:v6];

  if (a1[7])
  {
    uint64_t v8 = a1[11];
    unint64_t v7 = a1[12];
    sub_100013D44(v8, v7);
    v9.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10000C970(v8, v7);
  }
  else
  {
    v9.super.Class isa = 0;
  }
  [v5 setTxtRecordData:v9.super.isa];

  if (*(void *)(v2 + qword_1004868C8)
    && (swift_unknownObjectRetain(),
        sub_100010BCC(&qword_100486390),
        sub_100010BCC((uint64_t *)&unk_100486F70),
        (swift_dynamicCast() & 1) != 0))
  {
    uint64_t v10 = *((void *)&v17 + 1);
    if (*((void *)&v17 + 1))
    {
      uint64_t v11 = v18;
      sub_1000369C4(&v16, *((uint64_t *)&v17 + 1));
      uint64_t v12 = *(void (**)(id, uint64_t, uint64_t, uint64_t))(v11 + 16);
      uint64_t v13 = *(unsigned __int8 *)a1 | ((a2 & 0xFFFFFFFFFFFFLL) << 8);
      id v14 = v5;
      v12(v5, v13, v10, v11);

      return sub_100010754((uint64_t)&v16);
    }
  }
  else
  {
    uint64_t v18 = 0;
    long long v16 = 0u;
    long long v17 = 0u;
  }

  return sub_1000380B4((uint64_t)&v16, &qword_100486F50);
}

void sub_10030D534(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DNSRecords.SRV();
  __chkstk_darwin();
  NSString v6 = &v22[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  uint64_t v8 = &v22[-v7];
  uint64_t v9 = v1 + qword_100488958;
  swift_beginAccess();
  sub_100314F7C(a1, v9);
  swift_endAccess();
  sub_100314FE0(a1, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for DNSRecords.SRV);
  sub_100314FE0(a1, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for DNSRecords.SRV);
  swift_retain();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  int v12 = v11;
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    v26[0] = v24;
    *(_DWORD *)uint64_t v13 = 136315650;
    int v23 = v12;
    unint64_t v14 = sub_1003138A4();
    uint64_t v25 = sub_100010680(v14, v15, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    long long v16 = (uint64_t *)&v8[*(int *)(v4 + 24)];
    uint64_t v18 = *v16;
    unint64_t v17 = v16[1];
    swift_bridgeObjectRetain();
    uint64_t v25 = sub_100010680(v18, v17, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100315048((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for DNSRecords.SRV);
    *(_WORD *)(v13 + 22) = 512;
    __int16 v19 = NWEndpoint.Port.rawValue.getter();
    sub_100315048((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for DNSRecords.SRV);
    LOWORD(v25) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v10, (os_log_type_t)v23, "%s updated datapath service info to %s%%%hu", (uint8_t *)v13, 0x1Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100315048((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for DNSRecords.SRV);
    swift_release();

    sub_100315048((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for DNSRecords.SRV);
  }
  int v20 = *(void **)(v2 + qword_100488960);
  if (v20)
  {
    swift_unknownObjectRetain();
    id v21 = sub_100313700();
    [v20 datapathUpdatedServiceSpecificInfo:v21];

    swift_unknownObjectRelease();
  }
}

void sub_10030D89C(void *a1, uint64_t a2)
{
  type metadata accessor for AWDLPeer.AdvertisedService(0);
  __chkstk_darwin();
  uint64_t v53 = (uint64_t)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AWDLPeer(0);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v50 - v9;
  id v11 = [objc_allocWithZone((Class)WiFiAwarePublishServiceSpecificInfo) init];
  NSString v12 = String._bridgeToObjectiveC()();
  [v11 setInstanceName:v12];

  if (a1[7])
  {
    uint64_t v14 = a1[11];
    unint64_t v13 = a1[12];
    sub_100013D44(v14, v13);
    v15.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10000C970(v14, v13);
  }
  else
  {
    v15.super.Class isa = 0;
  }
  [v11 setTxtRecordData:v15.super.isa];

  id v52 = (id)a1[3];
  unint64_t v16 = a2 & 0xFFFFFFFFFFFFLL;
  uint64_t v17 = *(unsigned __int8 *)a1;
  swift_bridgeObjectRetain();
  id v18 = WiFiAddress.apiAddress.getter(v16);
  uint64_t v54 = v2;
  swift_unownedRetainStrong();
  unint64_t v51 = v16;
  sub_100376468(v16, (uint64_t)v10);
  swift_release();
  __int16 v19 = &v10[*(int *)(v6 + 96)];
  uint64_t v20 = *(void *)v19;
  char v21 = v19[8];
  sub_100314FE0((uint64_t)v10, (uint64_t)v8, type metadata accessor for AWDLPeer);
  if (v21)
  {
    uint64_t v22 = &v8[*(int *)(v6 + 92)];
    uint64_t v20 = *(void *)v22;
    int v23 = v22[8];
    sub_100315048((uint64_t)v8, type metadata accessor for AWDLPeer);
    sub_100315048((uint64_t)v10, type metadata accessor for AWDLPeer);
    if (v23) {
      uint64_t v20 = -60;
    }
  }
  else
  {
    sub_100315048((uint64_t)v8, type metadata accessor for AWDLPeer);
    sub_100315048((uint64_t)v10, type metadata accessor for AWDLPeer);
  }
  id v24 = objc_allocWithZone((Class)WiFiAwareDiscoveryResult);
  id v25 = v11;
  NSString v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  LOBYTE(v49) = 0;
  id v27 = [v24 initWithServiceName:v26 serviceSpecificInfo:v25 publishID:v17 subscribeID:0 publisherAddressKey:v18 datapathSupported:1 datapathCipherSuite:0 fsdFunction:0 rssi:v20 pairSetupRequired:v49 pairingConfiguration:0];

  uint64_t v29 = v53;
  uint64_t v28 = v54;
  sub_100314FE0((uint64_t)a1, v53, type metadata accessor for AWDLPeer.AdvertisedService);
  id v30 = v27;
  int64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = swift_slowAlloc();
    id v52 = v25;
    uint64_t v34 = v33;
    uint64_t v50 = swift_slowAlloc();
    uint64_t v56 = v50;
    *(_DWORD *)uint64_t v34 = 136315650;
    uint64_t v35 = WiFiAddress.description.getter(v51);
    uint64_t v57 = sub_100010680(v35, v36, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v34 + 12) = 2080;
    uint64_t v37 = *(void *)(v29 + 16);
    uint64_t v38 = *(void *)(v29 + 24);
    uint64_t v39 = *(void *)(v29 + 32);
    char v40 = *(unsigned char *)(v29 + 40);
    char v41 = *(unsigned char *)(v29 + 41);
    uint64_t v57 = *(void *)(v29 + 8);
    uint64_t v58 = v37;
    uint64_t v59 = v38;
    uint64_t v60 = v39;
    char v61 = v40;
    char v62 = v41;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v42 = DNSRecords.PTR.description.getter();
    uint64_t v43 = v29;
    unint64_t v45 = v44;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v55 = (id)sub_100010680(v42, v45, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100315048(v43, type metadata accessor for AWDLPeer.AdvertisedService);
    *(_WORD *)(v34 + 22) = 2080;
    id v55 = [v30 rssi];
    unint64_t v46 = sub_10003AAFC();
    RSSI.init<A>(_:)((uint64_t)&v55, (uint64_t)&type metadata for Int, v46);
    uint64_t v47 = RSSI.description.getter();
    id v55 = (id)sub_100010680(v47, v48, &v56);
    uint64_t v28 = v54;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Received a new discovery result %s [%s] at %s", (uint8_t *)v34, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    id v25 = v52;
    swift_slowDealloc();
  }
  else
  {

    sub_100315048(v29, type metadata accessor for AWDLPeer.AdvertisedService);
  }
  if (*(void *)(v28 + qword_1004868C8))
  {
    [(id)swift_unknownObjectRetain() subscribeReceivedDiscoveryResult:v30];
    swift_unknownObjectRelease();
  }
}

uint64_t sub_10030DE70(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  type metadata accessor for AWDLDiscoveryEngine.Browse();
  sub_1000171BC();
  swift_bridgeObjectRetain();
  Dictionary.subscript.getter();
  swift_bridgeObjectRelease();
  swift_endAccess();
  if (v7)
  {
    uint64_t v5 = type metadata accessor for AWDLPeer(0);
    sub_10030DFE0(a1, *(unsigned __int16 *)(a3 + *(int *)(v5 + 20)) | ((unint64_t)*(unsigned int *)(a3 + *(int *)(v5 + 20) + 2) << 16));
    swift_release();
  }
  return sub_10030A90C();
}

void sub_10030DFE0(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  type metadata accessor for AWDLPeer.AdvertisedService(0);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100314FE0((uint64_t)a1, (uint64_t)v7, type metadata accessor for AWDLPeer.AdvertisedService);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v29 = a2;
  if (v10)
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    uint64_t v31 = v28;
    *(_DWORD *)uint64_t v11 = 136315394;
    uint64_t v12 = WiFiAddress.description.getter(a2 & 0xFFFFFFFFFFFFLL);
    uint64_t v32 = sub_100010680(v12, v13, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    uint64_t v27 = v11 + 14;
    uint64_t v14 = *((void *)v7 + 2);
    uint64_t v15 = *((void *)v7 + 3);
    uint64_t v16 = *((void *)v7 + 4);
    char v17 = v7[40];
    char v18 = v7[41];
    uint64_t v32 = *((void *)v7 + 1);
    uint64_t v33 = v14;
    uint64_t v34 = v15;
    uint64_t v35 = v16;
    char v36 = v17;
    char v37 = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v19 = DNSRecords.PTR.description.getter();
    uint64_t v20 = v3;
    unint64_t v22 = v21;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v30 = sub_100010680(v19, v22, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v3 = v20;
    swift_bridgeObjectRelease();
    sub_100315048((uint64_t)v7, type metadata accessor for AWDLPeer.AdvertisedService);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Aging out discovery result %s [%s]", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    sub_100315048((uint64_t)v7, type metadata accessor for AWDLPeer.AdvertisedService);
  }
  int v23 = *(void **)(v3 + qword_1004868C8);
  if (v23)
  {
    uint64_t v24 = *a1;
    uint64_t v25 = v29 & 0xFFFFFFFFFFFFLL;
    swift_unknownObjectRetain();
    id v26 = WiFiAddress.apiAddress.getter(v25);
    [v23 subscribeLostDiscoveryResultForPublishID:v24 address:v26];

    swift_unknownObjectRelease();
  }
}

uint64_t sub_10030E2C4()
{
  swift_beginAccess();
  type metadata accessor for AWDLDiscoveryEngine.Browse();
  sub_1000171BC();
  swift_bridgeObjectRetain();
  Dictionary.subscript.getter();
  swift_bridgeObjectRelease();
  swift_endAccess();
  if (!v2) {
    return 0;
  }
  uint64_t v0 = *(void *)(v2 + qword_1004868C8);
  swift_unknownObjectRetain();
  swift_release();
  return v0;
}

uint64_t sub_10030E3F4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (uint64_t *)((char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = OS_dispatch_queue.awdl.unsafeMutableAddressor();
  uint64_t v7 = (void *)*v6;
  *uint64_t v5 = *v6;
  (*(void (**)(uint64_t *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
  if (v7)
  {
    uint64_t v10 = qword_1004868D0;
    if (*(unsigned char *)(v1 + qword_1004868D0) == 1)
    {
      swift_retain();
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v11, v12))
      {
        unint64_t v13 = (uint8_t *)swift_slowAlloc();
        uint64_t v24 = swift_slowAlloc();
        *(_DWORD *)unint64_t v13 = 136315138;
        uint64_t v14 = sub_100311F78();
        uint64_t v25 = sub_100010680(v14, v15, &v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s will attempt to stop", v13, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release();
      }

      *(unsigned char *)(v1 + v10) = 0;
      sub_100309928(0);
      swift_retain();
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = swift_slowAlloc();
        uint64_t v24 = swift_slowAlloc();
        *(_DWORD *)uint64_t v18 = 136315394;
        uint64_t v19 = sub_100311F78();
        uint64_t v25 = sub_100010680(v19, v20, &v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v18 + 12) = 2080;
        uint64_t v25 = sub_100010680(0x7165522072657355, 0xEE00646574736575, &v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "%s was terminated with reason %s", (uint8_t *)v18, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release();
      }

      uint64_t v21 = qword_1004868C8;
      unint64_t v22 = *(void **)(v1 + qword_1004868C8);
      if (v22) {
        [v22 subscribeTerminatedWithReason:2];
      }
      *(void *)(v1 + v21) = 0;
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10030EA8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, _OWORD *a5@<X8>)
{
  id v40 = a4;
  uint64_t v6 = v5;
  uint64_t v37 = a3;
  uint64_t v38 = a2;
  uint64_t v35 = a5;
  type metadata accessor for DNSRecords.SRV();
  __chkstk_darwin();
  char v36 = (uint64_t *)((char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void *)(v5 + qword_100488928);
  swift_unownedRetainStrong();
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  int v12 = *(unsigned __int8 *)(a1 + 32);
  int v13 = *(unsigned __int8 *)(a1 + 33);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1003A567C((uint64_t)&v42, v10, v11, v12 | (v13 << 8));
  swift_endAccess();
  swift_release();
  swift_bridgeObjectRelease();
  type metadata accessor for AWDLDiscoveryEngine.Advertise();
  swift_unownedRetainStrong();
  v46[0] = *(_OWORD *)a1;
  uint64_t v14 = v36;
  sub_100314FE0(v37, (uint64_t)v36, (uint64_t (*)(void))type metadata accessor for DNSRecords.SRV);
  swift_bridgeObjectRetain();
  sub_100036198((uint64_t)v46);
  uint64_t v15 = v38;
  sub_1000368C0(v38);
  swift_allocObject();
  uint64_t v16 = sub_1003129F4(v9, a1, v15, (uint64_t)v14);
  *(void *)(v16 + qword_100486998) = v40;
  swift_unknownObjectRelease();
  uint64_t v47 = v16;
  long long v17 = *(_OWORD *)(a1 + 16);
  long long v43 = *(_OWORD *)a1;
  long long v44 = v17;
  __int16 v45 = *(_WORD *)(a1 + 32);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_100036198((uint64_t)v46);
  sub_100017210();
  uint64_t v18 = type metadata accessor for Dictionary();
  swift_unknownObjectRetain();
  swift_retain();
  Dictionary.subscript.setter();
  swift_endAccess();
  sub_100308F8C();
  uint64_t v19 = v39;
  sub_10030F0C4();
  if (v19)
  {
    swift_bridgeObjectRetain();
    sub_100036198((uint64_t)v46);
    swift_errorRetain();
    swift_bridgeObjectRetain();
    sub_100036198((uint64_t)v46);
    swift_errorRetain();
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    int v22 = v21;
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v38 = v18;
      uint64_t v24 = v23;
      char v36 = (void *)swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      *(void *)&long long v43 = v37;
      *(_DWORD *)uint64_t v24 = 136315394;
      uint64_t v34 = v24 + 4;
      swift_bridgeObjectRetain();
      sub_100036198((uint64_t)v46);
      LODWORD(v35) = v22;
      uint64_t v25 = DNSRecords.PTR.description.getter();
      uint64_t v39 = v6;
      unint64_t v27 = v26;
      sub_1000361C4((uint64_t)v46);
      swift_bridgeObjectRelease();
      uint64_t v42 = sub_100010680(v25, v27, (uint64_t *)&v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000361C4((uint64_t)v46);
      swift_bridgeObjectRelease();
      sub_1000361C4((uint64_t)v46);
      swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 12) = 2112;
      swift_errorRetain();
      uint64_t v28 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v42 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *char v36 = v28;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)v35, "Failed to start advertise for %s because %@", (uint8_t *)v24, 0x16u);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_1000361C4((uint64_t)v46);
      swift_bridgeObjectRelease();
      sub_1000361C4((uint64_t)v46);
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    long long v32 = *(_OWORD *)(a1 + 16);
    long long v43 = *(_OWORD *)a1;
    long long v44 = v32;
    __int16 v45 = *(_WORD *)(a1 + 32);
    swift_beginAccess();
    Dictionary.removeValue(forKey:)();
    swift_endAccess();
    swift_release();
    sub_100308F8C();
    swift_getErrorValue();
    uint64_t v33 = Error.apiError.getter(v41);
    [v40 publishFailedToStartWithError:v33];
    swift_willThrow();
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_100036198((uint64_t)v46);
    uint64_t result = swift_release();
    long long v30 = *(_OWORD *)(a1 + 16);
    uint64_t v31 = v35;
    *uint64_t v35 = *(_OWORD *)a1;
    v31[1] = v30;
    *((_WORD *)v31 + 16) = *(_WORD *)(a1 + 32);
  }
  return result;
}

uint64_t sub_10030F060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1003129F4(a1, a2, a3, a4);
}

id sub_10030F0C4()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (void *)((char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = OS_dispatch_queue.awdl.unsafeMutableAddressor();
  uint64_t v8 = (void *)*v7;
  *uint64_t v6 = *v7;
  (*(void (**)(uint64_t *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  id result = (id)(*(uint64_t (**)(uint64_t *, uint64_t))(v4 + 8))(v6, v3);
  if (v8)
  {
    id result = (id)sub_100309D04(1u);
    if (!v1)
    {
      *(unsigned char *)(v2 + qword_1004869A0) = 1;
      swift_retain();
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v11, v12))
      {
        int v13 = (uint8_t *)swift_slowAlloc();
        uint64_t v17 = swift_slowAlloc();
        *(_DWORD *)int v13 = 136315138;
        uint64_t v14 = sub_1003130C4();
        v16[1] = sub_100010680(v14, v15, &v17);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s was started", v13, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release();
      }

      id result = *(id *)(v2 + qword_100486998);
      if (result) {
        return [result publishStartedWithInstanceID:0];
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10030F354(long long *a1, uint64_t a2)
{
  swift_beginAccess();
  long long v4 = *a1;
  long long v8 = a1[1];
  __int16 v9 = *((_WORD *)a1 + 16);
  long long v7 = v4;
  sub_100036198((uint64_t)&v7);
  sub_100036198((uint64_t)&v8);
  type metadata accessor for AWDLDiscoveryEngine.Advertise();
  sub_100017210();
  Dictionary.subscript.getter();
  sub_1000361C4((uint64_t)&v7);
  sub_1000361C4((uint64_t)&v8);
  if (!v6) {
    return swift_endAccess();
  }
  swift_endAccess();
  sub_1000368C0(a2);
  sub_10030F480(a2);
  return swift_release();
}

uint64_t sub_10030F480(uint64_t a1)
{
  uint64_t v3 = v1 + qword_100486988;
  long long v4 = *(_OWORD *)(v1 + qword_100486988 + 16);
  v9[0] = *(_OWORD *)(v1 + qword_100486988);
  v9[1] = v4;
  void v9[2] = *(_OWORD *)(v1 + qword_100486988 + 32);
  uint64_t v6 = *(void *)(v1 + qword_100486988 + 40);
  unint64_t v10 = *(void *)(v1 + qword_100486988 + 48);
  unint64_t v5 = v10;
  long long v7 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v3 = *(_OWORD *)a1;
  *(_OWORD *)(v3 + 16) = v7;
  *(_OWORD *)(v3 + 32) = *(_OWORD *)(a1 + 32);
  *(void *)(v3 + 48) = *(void *)(a1 + 48);
  sub_1000368C0((uint64_t)v9);
  sub_1000368C0(a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000C970(v6, v5);
  sub_10031203C((uint64_t)v9);
  sub_100036910(a1);
  return sub_100036910((uint64_t)v9);
}

uint64_t sub_10030F540()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  unint64_t v5 = (uint64_t *)((char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = OS_dispatch_queue.awdl.unsafeMutableAddressor();
  long long v7 = (void *)*v6;
  *unint64_t v5 = *v6;
  (*(void (**)(uint64_t *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
  if (v7)
  {
    uint64_t v10 = qword_1004869A0;
    if (*(unsigned char *)(v1 + qword_1004869A0) == 1)
    {
      swift_retain();
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v11, v12))
      {
        int v13 = (uint8_t *)swift_slowAlloc();
        uint64_t v24 = swift_slowAlloc();
        *(_DWORD *)int v13 = 136315138;
        uint64_t v14 = sub_1003130C4();
        uint64_t v25 = sub_100010680(v14, v15, &v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s will attempt to stop", v13, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release();
      }

      *(unsigned char *)(v1 + v10) = 0;
      sub_100309D04(0);
      swift_retain();
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = swift_slowAlloc();
        uint64_t v24 = swift_slowAlloc();
        *(_DWORD *)uint64_t v18 = 136315394;
        uint64_t v19 = sub_1003130C4();
        uint64_t v25 = sub_100010680(v19, v20, &v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v18 + 12) = 2080;
        uint64_t v25 = sub_100010680(0x7165522072657355, 0xEE00646574736575, &v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "%s was terminated with reason %s", (uint8_t *)v18, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release();
      }

      uint64_t v21 = qword_100486998;
      int v22 = *(void **)(v1 + qword_100486998);
      if (v22) {
        [v22 publishTerminatedWithReason:2];
      }
      *(void *)(v1 + v21) = 0;
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10030FBD8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v17 = a3;
  unsigned int v19 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  long long v7 = (char *)&v17 - v6;
  uint64_t v18 = v3;
  uint64_t v8 = *(void *)(v3 + qword_100488928);
  swift_unownedRetainStrong();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8 + *(void *)(*(void *)v8 + 96), AssociatedTypeWitness);
  swift_release();
  uint64_t v9 = DNSRecords.ARPA.keyData.getter();
  unint64_t v11 = v10;
  uint64_t v12 = DNSRecords.ARPA.valueData.getter();
  unint64_t v14 = v13;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(void, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 128))(v19, v9, v11, v12, v14, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  sub_10000C95C(v12, v14);
  return sub_10000C970(v9, v11);
}

uint64_t sub_10030FFC4@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v5 = v4;
  unint64_t v51 = a3;
  uint64_t v47 = a4;
  unint64_t v48 = *v5;
  type metadata accessor for DNSRecords.SRV();
  __chkstk_darwin();
  uint64_t v49 = (uint64_t)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AWDLPeer(0) - 8;
  __chkstk_darwin();
  unint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100486B80);
  __chkstk_darwin();
  unint64_t v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for AWDLPeer.AdvertisedService(0);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin();
  uint64_t v52 = (uint64_t)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v17 = [a2 publisherAddress];
  unint64_t v18 = WiFiMACAddress.wifiAddress.getter();

  uint64_t v50 = v5;
  uint64_t v19 = *(uint64_t *)((char *)v5 + qword_100488928);
  swift_unownedRetainStrong();
  unint64_t v20 = v18 & 0xFFFFFFFFFFFFLL;
  sub_100376468(v18 & 0xFFFFFFFFFFFFLL, (uint64_t)v11);
  swift_release();
  uint64_t v21 = *(void *)&v11[*(int *)(v9 + 88)];
  swift_bridgeObjectRetain();
  sub_100315048((uint64_t)v11, type metadata accessor for AWDLPeer);
  long long v22 = *(_OWORD *)(a1 + 16);
  v61[0] = *(_OWORD *)a1;
  long long v59 = v22;
  __int16 v60 = *(_WORD *)(a1 + 32);
  sub_100036198((uint64_t)v61);
  sub_100036198((uint64_t)&v59);
  unint64_t v23 = v53;
  sub_100308C00(v21, (long long *)a1, (uint64_t)v13);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_1000380B4((uint64_t)v13, (uint64_t *)&unk_100486B80);
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v24 = xmmword_1003D4F50;
    *(unsigned char *)(v24 + 16) = 1;
    return swift_willThrow();
  }
  else
  {
    uint64_t v26 = v52;
    sub_1003139F0((uint64_t)v13, v52);
    type metadata accessor for AWDLDiscoveryEngine.DatapathInitiator();
    swift_unownedRetainStrong();
    uint64_t v27 = v26 + *(int *)(v14 + 28);
    uint64_t v28 = v49;
    sub_100314FE0(v27, v49, (uint64_t (*)(void))type metadata accessor for DNSRecords.SRV);
    sub_100036198((uint64_t)v61);
    sub_100036198((uint64_t)&v59);
    uint64_t v29 = swift_allocObject();
    unint64_t v53 = v20;
    sub_1003131B8(v19, v20, a1, v28);
    long long v30 = v51;
    *(void *)(v29 + qword_100488960) = v51;
    swift_unknownObjectRelease();
    uint64_t v62 = v29;
    long long v31 = *(_OWORD *)(a1 + 16);
    long long v56 = *(_OWORD *)a1;
    long long v57 = v31;
    __int16 v58 = *(_WORD *)(a1 + 32);
    swift_beginAccess();
    sub_100036198((uint64_t)v61);
    sub_100036198((uint64_t)&v59);
    sub_100017210();
    uint64_t v32 = type metadata accessor for Dictionary();
    swift_unknownObjectRetain();
    swift_retain();
    Dictionary.subscript.setter();
    swift_endAccess();
    sub_100310878();
    if (v23)
    {
      sub_100036198((uint64_t)v61);
      sub_100036198((uint64_t)&v59);
      swift_errorRetain();
      sub_100036198((uint64_t)v61);
      sub_100036198((uint64_t)&v59);
      swift_errorRetain();
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.error.getter();
      int v35 = v34;
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v36 = swift_slowAlloc();
        unint64_t v48 = (void *)swift_slowAlloc();
        uint64_t v49 = swift_slowAlloc();
        *(void *)&long long v56 = v49;
        *(_DWORD *)uint64_t v36 = 136315650;
        sub_100036198((uint64_t)v61);
        sub_100036198((uint64_t)&v59);
        LODWORD(v47) = v35;
        uint64_t v37 = DNSRecords.PTR.description.getter();
        uint64_t v50 = (void **)v32;
        unint64_t v39 = v38;
        sub_1000361C4((uint64_t)v61);
        sub_1000361C4((uint64_t)&v59);
        uint64_t v55 = sub_100010680(v37, v39, (uint64_t *)&v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1000361C4((uint64_t)v61);
        sub_1000361C4((uint64_t)&v59);
        sub_1000361C4((uint64_t)v61);
        sub_1000361C4((uint64_t)&v59);
        *(_WORD *)(v36 + 12) = 2080;
        uint64_t v40 = WiFiAddress.description.getter(v53);
        uint64_t v55 = sub_100010680(v40, v41, (uint64_t *)&v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v36 + 22) = 2112;
        swift_errorRetain();
        uint64_t v42 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v55 = v42;
        long long v30 = v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v48 = v42;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v33, (os_log_type_t)v47, "Failed to start datapath for %s to %s because %@", (uint8_t *)v36, 0x20u);
        sub_100010BCC(&qword_10047CC30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        sub_1000361C4((uint64_t)v61);
        sub_1000361C4((uint64_t)&v59);
        sub_1000361C4((uint64_t)v61);
        sub_1000361C4((uint64_t)&v59);
        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v45 = v52;
      long long v46 = *(_OWORD *)(a1 + 16);
      long long v56 = *(_OWORD *)a1;
      long long v57 = v46;
      __int16 v58 = *(_WORD *)(a1 + 32);
      swift_beginAccess();
      Dictionary.removeValue(forKey:)();
      swift_endAccess();
      swift_release();
      swift_getErrorValue();
      [v30 datapathFailedToStartWithError:Error.apiError.getter(v54)];
      swift_willThrow();
      swift_release();
      return sub_100315048(v45, type metadata accessor for AWDLPeer.AdvertisedService);
    }
    else
    {
      sub_100315048(v52, type metadata accessor for AWDLPeer.AdvertisedService);
      sub_100036198((uint64_t)v61);
      sub_100036198((uint64_t)&v59);
      uint64_t result = swift_release();
      long long v43 = *(_OWORD *)(a1 + 16);
      long long v44 = v47;
      *uint64_t v47 = *(_OWORD *)a1;
      v44[1] = v43;
      *((_WORD *)v44 + 16) = *(_WORD *)(a1 + 32);
    }
  }
  return result;
}

uint64_t sub_100310810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  sub_1003131B8(a1, a2 & 0xFFFFFFFFFFFFLL, a3, a4);
  return v8;
}

void sub_100310878()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for NWEndpoint.Port();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  long long v46 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (uint64_t *)((char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = OS_dispatch_queue.awdl.unsafeMutableAddressor();
  unint64_t v11 = (void *)*v10;
  *uint64_t v9 = *v10;
  (*(void (**)(uint64_t *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v12 = v11;
  char v13 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v7 + 8))(v9, v6);
  if (v13)
  {
    uint64_t v44 = v4;
    *(unsigned char *)(v2 + qword_100488968) = 1;
    uint64_t v47 = qword_100488960;
    uint64_t v48 = v1;
    uint64_t v14 = *(void **)(v2 + qword_100488960);
    if (v14)
    {
      swift_unownedRetainStrong();
      swift_unknownObjectRetain();
      uint64_t v15 = WiFiInterface.macAddress.getter();
      swift_release();
      id v16 = WiFiAddress.apiAddress.getter(v15 & 0xFFFFFFFFFFFFLL);
      swift_unownedRetainStrong();
      id v17 = WiFiInterface.interfaceIndex.getter();
      swift_release();
      [v14 datapathStartedWithInstanceID:0 initiatorDataAddress:v16 localInterfaceIndex:v17];

      swift_unknownObjectRelease();
    }
    swift_retain();
    unint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    BOOL v20 = os_log_type_enabled(v18, v19);
    uint64_t v45 = v3;
    if (v20)
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      v50[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136315138;
      unint64_t v22 = sub_1003138A4();
      uint64_t v51 = sub_100010680(v22, v23, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "%s was started", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release();
    }

    swift_retain_n();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      uint64_t v51 = v43;
      *(_DWORD *)uint64_t v26 = 136315650;
      unint64_t v27 = sub_1003138A4();
      v50[0] = sub_100010680(v27, v28, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2080;
      uint64_t v29 = v2 + qword_100488958;
      swift_beginAccess();
      uint64_t v30 = type metadata accessor for DNSRecords.SRV();
      long long v31 = (uint64_t *)(v29 + *(int *)(v30 + 24));
      uint64_t v32 = *v31;
      unint64_t v33 = v31[1];
      swift_bridgeObjectRetain();
      uint64_t v49 = sub_100010680(v32, v33, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 22) = 512;
      uint64_t v34 = v29 + *(int *)(v30 + 20);
      uint64_t v36 = v44;
      uint64_t v35 = v45;
      uint64_t v37 = v46;
      (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v46, v34, v45);
      __int16 v38 = NWEndpoint.Port.rawValue.getter();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v35);
      swift_release();
      LOWORD(v49) = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "%s datapath established with %s%%%hu", (uint8_t *)v26, 0x1Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    unint64_t v39 = *(void **)(v2 + v47);
    if (v39)
    {
      unint64_t v40 = *(unsigned __int16 *)(v2 + qword_100488948) | ((unint64_t)*(unsigned int *)(v2 + qword_100488948 + 2) << 16);
      swift_unknownObjectRetain();
      id v41 = WiFiAddress.apiAddress.getter(v40);
      id v42 = sub_100313700();
      [v39 datapathConfirmedForPeerDataAddress:v41 serviceSpecificInfo:v42];

      swift_unknownObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100310E7C()
{
  return swift_bridgeObjectRelease();
}

BOOL sub_100311014(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = (unsigned __int16 *)(*a2 + qword_100488948);
  uint64_t v5 = *(unsigned int *)(v4 + 1);
  uint64_t v6 = *v4;
  uint64_t v7 = type metadata accessor for AWDLPeer(0);
  return static NANClusterChangeEvent.__derived_struct_equals(_:_:)(v6 | (v5 << 16), *(unsigned __int16 *)(a3 + *(int *)(v7 + 20)) | ((unint64_t)*(unsigned int *)(a3+ *(int *)(v7 + 20)+ 2) << 16));
}

uint64_t sub_100311084(long long *a1, uint64_t a2, void (*a3)(void, void, void), void *a4)
{
  uint64_t v8 = *v4;
  swift_beginAccess();
  long long v9 = *a1;
  long long v14 = a1[1];
  __int16 v15 = *((_WORD *)a1 + 16);
  long long v13 = v9;
  sub_100036198((uint64_t)&v13);
  sub_100036198((uint64_t)&v14);
  a3(0, *(void *)(v8 + 80), *(void *)(v8 + 88));
  sub_100017210();
  Dictionary.subscript.getter();
  sub_1000361C4((uint64_t)&v13);
  sub_1000361C4((uint64_t)&v14);
  swift_endAccess();
  if (!v12) {
    return 0;
  }
  uint64_t v10 = *(void *)(v12 + *a4);
  swift_unknownObjectRetain();
  swift_release();
  return v10;
}

uint64_t sub_1003111BC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (uint64_t *)((char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = OS_dispatch_queue.awdl.unsafeMutableAddressor();
  uint64_t v7 = (void *)*v6;
  *uint64_t v5 = *v6;
  (*(void (**)(uint64_t *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
  if (v7)
  {
    uint64_t v10 = qword_100488968;
    if (*(unsigned char *)(v1 + qword_100488968) == 1)
    {
      swift_retain();
      unint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v11, v12))
      {
        long long v13 = (uint8_t *)swift_slowAlloc();
        uint64_t v24 = swift_slowAlloc();
        *(_DWORD *)long long v13 = 136315138;
        unint64_t v14 = sub_1003138A4();
        uint64_t v23 = sub_100010680(v14, v15, &v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s will attempt to stop", v13, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release();
      }

      *(unsigned char *)(v1 + v10) = 0;
      swift_retain();
      id v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = swift_slowAlloc();
        uint64_t v24 = swift_slowAlloc();
        *(_DWORD *)uint64_t v18 = 136315394;
        unint64_t v19 = sub_1003138A4();
        uint64_t v23 = sub_100010680(v19, v20, &v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v18 + 12) = 2080;
        uint64_t v23 = sub_100010680(0x7165522072657355, 0xEE00646574736575, &v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "%s was terminated because %s", (uint8_t *)v18, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release();
      }

      uint64_t v21 = qword_100488960;
      unint64_t v22 = *(void **)(v1 + qword_100488960);
      if (v22) {
        [v22 datapathTerminatedWithReason:2];
      }
      *(void *)(v1 + v21) = 0;
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1003115A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result = sub_10030B978(a1, a2, a3 & 0xFFFFFF01, a4);
  if (!v5)
  {
    *(void *)a5 = result;
    *(void *)(a5 + 8) = v8;
    *(unsigned char *)(a5 + 16) = v9 & 1;
    *(unsigned char *)(a5 + 17) = HIBYTE(v9);
  }
  return result;
}

uint64_t sub_1003115E4()
{
  return sub_10030E2C4();
}

uint64_t sub_10031161C()
{
  return sub_10030A33C();
}

double sub_100311654@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  sub_10030EA8C(a1, a2, a3, a4, v9);
  if (!v5)
  {
    double result = *(double *)v9;
    long long v8 = v9[1];
    *(_OWORD *)a5 = v9[0];
    *(_OWORD *)(a5 + 16) = v8;
    *(_WORD *)(a5 + 32) = v10;
  }
  return result;
}

uint64_t sub_1003116A0(long long *a1, uint64_t a2)
{
  return sub_10030F354(a1, a2);
}

uint64_t sub_1003116C4(long long *a1)
{
  return sub_100311084(a1, (uint64_t)&qword_100486828, (void (*)(void, void, void))type metadata accessor for AWDLDiscoveryEngine.Advertise, &qword_100486998);
}

uint64_t sub_10031170C()
{
  return sub_10030A42C();
}

uint64_t sub_100311730(uint64_t a1)
{
  return sub_10030FBD8(a1, 1u, (uint64_t)"Failed to start advertising ARPA because: %@");
}

uint64_t sub_100311760(uint64_t a1)
{
  return sub_10030FBD8(a1, 0, (uint64_t)"Failed to stop advertising ARPA because: %@");
}

double sub_100311790@<D0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  sub_10030FFC4(a1, a2, a3, v8);
  if (!v4)
  {
    double result = *(double *)v8;
    long long v7 = v8[1];
    *(_OWORD *)a4 = v8[0];
    *(_OWORD *)(a4 + 16) = v7;
    *(_WORD *)(a4 + 32) = v9;
  }
  return result;
}

uint64_t sub_1003117DC(long long *a1)
{
  return sub_100311084(a1, (uint64_t)&qword_100488930, (void (*)(void, void, void))type metadata accessor for AWDLDiscoveryEngine.DatapathInitiator, &qword_100488960);
}

uint64_t sub_100311824()
{
  return sub_10030A90C();
}

uint64_t sub_100311848(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  char v5 = a4;
  unsigned int v9 = a4 >> 8;
  Logger.init(subsystem:category:)();
  *(void *)(v4 + qword_1004868C8) = 0;
  *(unsigned char *)(v4 + qword_1004868D0) = 0;
  *(unsigned char *)(v4 + qword_1004868D8) = 0;
  *(unsigned char *)(v4 + qword_1004868E0) = 0;
  type metadata accessor for P2PTimer();
  variable initialization expression of AWDLPeer.lastUpdated();
  *(void *)(v4 + qword_1004868B8) = a1;
  uint64_t v10 = v4 + qword_1004868C0;
  *(void *)uint64_t v10 = a2;
  *(void *)(v10 + 8) = a3;
  *(unsigned char *)(v10 + 16) = v5 & 1;
  *(unsigned char *)(v10 + 17) = v9;
  swift_retain();
  swift_unownedRetain();
  unint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    long long v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)long long v13 = 136315138;
    uint64_t v14 = sub_100311F78();
    sub_100010680(v14, v15, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Created %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release();
  }

  swift_release();
  return v4;
}

uint64_t sub_100311A90()
{
  uint64_t v1 = v0;
  if (*(unsigned char *)(v0 + qword_1004868D0) == 1) {
    sub_100309928(0);
  }
  uint64_t v2 = qword_1004868C8;
  uint64_t v3 = *(void **)(v0 + qword_1004868C8);
  if (v3) {
    [v3 subscribeTerminatedWithReason:-1];
  }
  *(void *)(v0 + v2) = 0;
  swift_unknownObjectRelease();
  uint64_t v4 = v0 + qword_1004868B0;
  swift_retain();
  char v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    long long v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)long long v7 = 136315138;
    uint64_t v8 = sub_100311F78();
    sub_100010680(v8, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Destroyed %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  uint64_t v10 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v4, v10);
  swift_unownedRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v11 = v0 + qword_1004868E8;
  uint64_t v12 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  return v1;
}

uint64_t sub_100311D04()
{
  return sub_100312F5C(sub_100311A90);
}

uint64_t type metadata accessor for AWDLDiscoveryEngine.Browse()
{
  return sub_100038354();
}

uint64_t sub_100311D34()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for DNSRecords.SRV();
    if (v2 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }
  return result;
}

uint64_t sub_100311E30(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4 = a1;
  unint64_t v5 = a1 >> 8;
  unint64_t v6 = a1 >> 16;
  unint64_t v7 = a1 >> 24;
  unint64_t v8 = HIDWORD(a1);
  unint64_t v9 = a1 >> 40;
  uint64_t v10 = *(void *)(a2 + *(int *)(type metadata accessor for AWDLPeer(0) + 80));
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_100314810((uint64_t (*)(char *))sub_10031567C, a3, v10);
  v13[2] = a3;
  char v14 = v4;
  char v15 = v5;
  char v16 = v6;
  char v17 = v7;
  char v18 = v8;
  char v19 = v9;
  sub_100370160((void (*)(char *))sub_10031569C, (uint64_t)v13, v11);
  return swift_release();
}

BOOL sub_100311F18(uint64_t a1, uint64_t a2)
{
  return static DNSRecords.Identifier.== infix(_:_:)(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40) | (*(unsigned __int8 *)(a1 + 41) << 8), *(void *)(a2 + qword_1004868C0), *(void *)(a2 + qword_1004868C0 + 8), *(unsigned __int8 *)(a2 + qword_1004868C0 + 16) | (*(unsigned __int8 *)(a2 + qword_1004868C0 + 17) << 8));
}

uint64_t sub_100311F78()
{
  uint64_t v1 = *(void *)(v0 + qword_1004868C0);
  uint64_t v2 = *(void *)(v0 + qword_1004868C0 + 8);
  char v3 = *(unsigned char *)(v0 + qword_1004868C0 + 16);
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = v1;
  DNSRecords.Identifier.description.getter(v1, v2, v3);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0x776F72424C445741;
}

uint64_t sub_100312018()
{
  return sub_100311F78();
}

uint64_t sub_10031203C(uint64_t result)
{
  if (*(unsigned char *)(v1 + qword_1004869A0) == 1)
  {
    uint64_t v3 = *(void *)(result + 16);
    uint64_t v2 = *(void *)(result + 24);
    unint64_t v4 = *(unsigned char *)(result + 32) & 1 | ((unint64_t)*(unsigned __int8 *)(result + 33) << 8);
    long long v11 = *(_OWORD *)result;
    uint64_t v12 = v3;
    uint64_t v13 = v2;
    unint64_t v14 = v4;
    long long v15 = *(_OWORD *)(result + 40);
    uint64_t v5 = *(void *)(v1 + qword_100486988 + 8);
    uint64_t v6 = *(void *)(v1 + qword_100486988 + 16);
    uint64_t v7 = *(void *)(v1 + qword_100486988 + 24);
    uint64_t v8 = *(void *)(v1 + qword_100486988 + 40);
    unint64_t v9 = *(void *)(v1 + qword_100486988 + 48);
    unint64_t v10 = *(unsigned __int8 *)(v1 + qword_100486988 + 32) | ((unint64_t)*(unsigned __int8 *)(v1
                                                                                                  + qword_100486988
                                                                                                  + 33) << 8);
    v16[0] = *(void *)(v1 + qword_100486988);
    v16[1] = v5;
    void v16[2] = v6;
    void v16[3] = v7;
    v16[4] = v10;
    v16[5] = v8;
    v16[6] = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100013D44(v8, v9);
    sub_1003123D4((uint64_t)&v11, (uint64_t)v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_10000C970(v8, v9);
  }
  return result;
}

uint64_t sub_1003123D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  uint64_t v5 = *v2;
  sub_100315158(a2, (uint64_t)v60);
  uint64_t v42 = v60[1];
  uint64_t v43 = v60[3];
  unint64_t v44 = v60[6];
  uint64_t v45 = v60[5];
  sub_100315158(a1, (uint64_t)v59);
  uint64_t v48 = v59[1];
  uint64_t v49 = (void (*)(void, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t))v59[3];
  unint64_t v50 = v59[6];
  unint64_t v51 = v59[5];
  uint64_t v6 = *(void *)(v5 + 88);
  uint64_t v7 = *(void *)(v5 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v73 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  unint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v40 - v11;
  uint64_t v47 = a1;
  sub_100315158(a1, (uint64_t)v67);
  uint64_t v52 = v10;
  uint64_t v53 = v3;
  uint64_t v46 = v7;
  if (*((void *)&v67[0] + 1))
  {
    long long v69 = v67[0];
    long long v70 = v67[1];
    long long v71 = v67[2];
    unint64_t v72 = v68;
    id v41 = v2;
    uint64_t v13 = *(void *)((char *)v2 + qword_100486978);
    swift_unownedRetainStrong();
    (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v12, v13 + *(void *)(*(void *)v13 + 96), AssociatedTypeWitness);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100013D44(v51, v50);
    swift_release();
    unint64_t v14 = v12;
    uint64_t v15 = DNSRecords.TXT.keyData.getter();
    uint64_t v16 = v6;
    unint64_t v18 = v17;
    uint64_t v19 = *((void *)&v71 + 1);
    unint64_t v20 = v72;
    uint64_t v48 = v16;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v49 = *(void (**)(void, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 128);
    sub_100013D44(v19, v20);
    unint64_t v50 = v15;
    unint64_t v51 = v18;
    uint64_t v22 = v54;
    v49(0, v15, v18, v19, v20, AssociatedTypeWitness, AssociatedConformanceWitness);
    if (v22)
    {
      sub_10000C970(v19, v20);
      sub_10000C970(v50, v51);
      sub_1003151C0(v47);
      uint64_t v23 = v73;
      (*(void (**)(char *, uint64_t))(v73 + 8))(v14, AssociatedTypeWitness);
      uint64_t v58 = v22;
      swift_errorRetain();
      sub_100010BCC((uint64_t *)&unk_1004843F0);
      if (!swift_dynamicCast()) {
        return swift_errorRelease();
      }
      uint64_t v24 = v55;
      char v25 = v57;
      if (v57 == 1)
      {
        if (v55 != 2) {
          return swift_errorRelease();
        }
      }
      else
      {
        if (v57) {
          goto LABEL_22;
        }
        if (v55 != 6) {
          return swift_errorRelease();
        }
      }
      swift_errorRelease();
      swift_errorRelease();
      uint64_t v54 = 0;
      uint64_t v3 = v53;
    }
    else
    {
      uint64_t v54 = 0;
      uint64_t v26 = v73;
      (*(void (**)(char *, uint64_t))(v73 + 8))(v14, AssociatedTypeWitness);
      sub_10000C970(v19, v20);
      sub_10000C970(v50, v51);
      sub_1003151C0(v47);
      uint64_t v3 = v53;
      uint64_t v23 = v26;
    }
    unint64_t v10 = v52;
    uint64_t v2 = v41;
  }
  else
  {
    uint64_t v23 = v73;
  }
  uint64_t result = sub_100315158(v3, (uint64_t)v61);
  if (*((void *)&v61[0] + 1))
  {
    long long v63 = v61[0];
    long long v64 = v61[1];
    long long v65 = v61[2];
    unint64_t v66 = v62;
    uint64_t v28 = *(void *)((char *)v2 + qword_100486978);
    swift_unownedRetainStrong();
    (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v10, v28 + *(void *)(*(void *)v28 + 96), AssociatedTypeWitness);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100013D44(v45, v44);
    swift_release();
    uint64_t v29 = (void (*)(void, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t))DNSRecords.TXT.keyData.getter();
    unint64_t v31 = v30;
    uint64_t v32 = *((void *)&v65 + 1);
    unint64_t v33 = v66;
    uint64_t v34 = swift_getAssociatedConformanceWitness();
    unint64_t v51 = AssociatedTypeWitness;
    uint64_t v35 = v34;
    uint64_t v36 = *(void (**)(uint64_t, void, unint64_t, uint64_t, unint64_t, unint64_t, uint64_t))(v34 + 128);
    sub_100013D44(v32, v33);
    uint64_t v49 = v29;
    unint64_t v50 = v31;
    uint64_t v37 = v29;
    unint64_t v38 = v51;
    uint64_t v39 = v54;
    v36(1, v37, v31, v32, v33, v51, v35);
    if (!v39)
    {
      (*(void (**)(char *, unint64_t))(v73 + 8))(v52, v38);
      sub_10000C970(v32, v33);
      sub_10000C970((uint64_t)v49, v50);
      return sub_1003151C0(v53);
    }
    sub_10000C970(v32, v33);
    sub_10000C970((uint64_t)v49, v50);
    sub_1003151C0(v53);
    (*(void (**)(char *, unint64_t))(v73 + 8))(v52, v38);
    uint64_t v58 = v39;
    swift_errorRetain();
    sub_100010BCC((uint64_t *)&unk_1004843F0);
    if (!swift_dynamicCast()) {
      return swift_errorRelease();
    }
    uint64_t v24 = v55;
    char v25 = v57;
    if (v57 == 1)
    {
      if (v55 == 2)
      {
LABEL_25:
        swift_errorRelease();
        return swift_errorRelease();
      }
      return swift_errorRelease();
    }
    if (!v57)
    {
      if (v55 == 6) {
        goto LABEL_25;
      }
      return swift_errorRelease();
    }
LABEL_22:
    sub_100012AA4(v24, v56, v25);
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_1003129F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  Logger.init(subsystem:category:)();
  *(void *)(v5 + qword_100486998) = 0;
  *(unsigned char *)(v5 + qword_1004869A0) = 0;
  *(unsigned char *)(v5 + qword_1004869A8) = 0;
  *(unsigned char *)(v5 + qword_1004869B0[0]) = 0;
  *(void *)(v5 + qword_100486978) = a1;
  uint64_t v10 = v5 + qword_100486980;
  *(_WORD *)(v10 + 32) = *(_WORD *)(a2 + 32);
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)a2;
  *(_OWORD *)(v10 + 16) = v11;
  uint64_t v12 = v5 + qword_100486988;
  *(void *)(v12 + 48) = *(void *)(a3 + 48);
  long long v13 = *(_OWORD *)(a3 + 32);
  long long v14 = *(_OWORD *)a3;
  *(_OWORD *)(v12 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v12 + 32) = v13;
  *(_OWORD *)uint64_t v12 = v14;
  sub_100314FE0(a4, v5 + qword_100486990, (uint64_t (*)(void))type metadata accessor for DNSRecords.SRV);
  swift_retain();
  swift_unownedRetain();
  sub_1000368C0(a3);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v22 = a4;
    unint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)unint64_t v17 = 136315138;
    uint64_t v18 = sub_1003130C4();
    sub_100010680(v18, v19, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Created %s", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    sub_100036910(a3);

    uint64_t v20 = v22;
  }
  else
  {
    swift_release();
    sub_100036910(a3);

    uint64_t v20 = a4;
  }
  sub_100315048(v20, (uint64_t (*)(void))type metadata accessor for DNSRecords.SRV);
  swift_release();
  return v5;
}

uint64_t sub_100312CB4()
{
  if (*(unsigned char *)(v0 + qword_1004869A0) == 1) {
    sub_100309D04(0);
  }
  uint64_t v1 = qword_100486998;
  uint64_t v2 = *(void **)(v0 + qword_100486998);
  if (v2) {
    [v2 publishTerminatedWithReason:-1];
  }
  *(void *)(v0 + v1) = 0;
  swift_unknownObjectRelease();
  uint64_t v3 = v0 + qword_100486970;
  swift_retain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v7 = sub_1003130C4();
    sub_100010680(v7, v8, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Destroyed %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  uint64_t v9 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v3, v9);
  swift_unownedRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(v0 + qword_100486988 + 40);
  unint64_t v11 = *(void *)(v0 + qword_100486988 + 48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000C970(v10, v11);
  sub_100315048(v0 + qword_100486990, (uint64_t (*)(void))type metadata accessor for DNSRecords.SRV);
  swift_unknownObjectRelease();
  return v0;
}

uint64_t sub_100312F44()
{
  return sub_100312F5C(sub_100312CB4);
}

uint64_t sub_100312F5C(uint64_t (*a1)(void))
{
  a1();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AWDLDiscoveryEngine.Advertise()
{
  return sub_100038354();
}

uint64_t sub_100312FCC()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for DNSRecords.SRV();
    if (v2 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }
  return result;
}

uint64_t sub_1003130C4()
{
  *(void *)&long long v5 = 0;
  *((void *)&v5 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)v4, "AWDLAdvertise ");
  HIBYTE(v4[1]) = -18;
  long long v1 = *(_OWORD *)(v0 + qword_100486980 + 16);
  long long v5 = *(_OWORD *)(v0 + qword_100486980);
  long long v6 = v1;
  __int16 v7 = *(_WORD *)(v0 + qword_100486980 + 32);
  long long v8 = v5;
  long long v9 = v1;
  __int16 v10 = v7;
  sub_100036198((uint64_t)&v8);
  sub_100036198((uint64_t)&v9);
  v2._uint64_t countAndFlagsBits = DNSRecords.PTR.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  sub_1000361C4((uint64_t)&v8);
  sub_1000361C4((uint64_t)&v9);
  return v4[0];
}

uint64_t sub_100313194()
{
  return sub_1003130C4();
}

uint64_t sub_1003131B8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  char v8 = a2;
  unint64_t v10 = a2 >> 8;
  unint64_t v11 = a2 >> 16;
  unint64_t v12 = a2 >> 24;
  unint64_t v13 = HIDWORD(a2);
  unint64_t v14 = a2 >> 40;
  Logger.init(subsystem:category:)();
  *(void *)(v5 + qword_100488960) = 0;
  *(unsigned char *)(v5 + qword_100488968) = 0;
  *(void *)(v5 + qword_100488940) = a1;
  uint64_t v15 = (unsigned char *)(v5 + qword_100488948);
  *uint64_t v15 = v8;
  v15[1] = v10;
  v15[2] = v11;
  v15[3] = v12;
  v15[4] = v13;
  void v15[5] = v14;
  uint64_t v16 = a4;
  uint64_t v17 = v5 + qword_100488950;
  long long v18 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)uint64_t v17 = *(_OWORD *)a3;
  *(_OWORD *)(v17 + 16) = v18;
  *(_WORD *)(v17 + 32) = *(_WORD *)(a3 + 32);
  sub_100314FE0(a4, v5 + qword_100488958, (uint64_t (*)(void))type metadata accessor for DNSRecords.SRV);
  swift_retain();
  swift_unownedRetain();
  unint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 136315138;
    unint64_t v22 = sub_1003138A4();
    sub_100010680(v22, v23, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Created %s", v21, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  sub_100315048(v16, (uint64_t (*)(void))type metadata accessor for DNSRecords.SRV);
  swift_release();
  return v5;
}

uint64_t sub_10031344C()
{
  if (*(unsigned char *)(v0 + qword_100488968) == 1) {
    sub_1003111BC();
  }
  uint64_t v1 = v0 + qword_100488938;
  swift_retain();
  Swift::String v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    unint64_t v5 = sub_1003138A4();
    sub_100010680(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Destroyed %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  uint64_t v7 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v1, v7);
  swift_unownedRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100315048(v0 + qword_100488958, (uint64_t (*)(void))type metadata accessor for DNSRecords.SRV);
  swift_unknownObjectRelease();
  return v0;
}

uint64_t sub_100313674()
{
  return sub_10031368C((void (*)(void))sub_10031344C);
}

uint64_t sub_10031368C(void (*a1)(void))
{
  a1();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AWDLDiscoveryEngine.DatapathInitiator()
{
  return sub_100038354();
}

id sub_100313700()
{
  uint64_t v1 = type metadata accessor for NWEndpoint.Port();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(unsigned __int8 *)(v0 + qword_100488950 + 32);
  uint64_t v6 = v0 + qword_100488958;
  swift_beginAccess();
  uint64_t v7 = type metadata accessor for DNSRecords.SRV();
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v6 + *(int *)(v7 + 20), v1);
  unsigned __int16 v8 = NWEndpoint.Port.rawValue.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  id v9 = [objc_allocWithZone((Class)WiFiAwarePublishDatapathServiceSpecificInfo) initWithProtocolType:v5 servicePort:v8];
  swift_bridgeObjectRetain();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v9 setHostname:v10];

  return v9;
}

unint64_t sub_1003138A4()
{
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  long long v6 = *(_OWORD *)(v0 + qword_100488950 + 16);
  __int16 v7 = *(_WORD *)(v0 + qword_100488950 + 32);
  long long v8 = *(_OWORD *)(v0 + qword_100488950);
  long long v9 = v6;
  __int16 v10 = v7;
  sub_100036198((uint64_t)&v8);
  sub_100036198((uint64_t)&v9);
  v1._uint64_t countAndFlagsBits = DNSRecords.PTR.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  sub_1000361C4((uint64_t)&v8);
  sub_1000361C4((uint64_t)&v9);
  v2._uint64_t countAndFlagsBits = 0x203A6F543C20;
  v2._object = (void *)0xE600000000000000;
  String.append(_:)(v2);
  v3._uint64_t countAndFlagsBits = WiFiAddress.description.getter(*(unsigned __int16 *)(v0 + qword_100488948) | ((unint64_t)*(unsigned int *)(v0 + qword_100488948 + 2) << 16));
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 62;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0xD000000000000016;
}

unint64_t sub_1003139CC()
{
  return sub_1003138A4();
}

uint64_t sub_1003139F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AWDLPeer.AdvertisedService(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *sub_100313A54()
{
  Swift::String v1 = v0;
  sub_100010BCC((uint64_t *)&unk_100486B70);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *Swift::String v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100313BEC()
{
  Swift::String v1 = v0;
  sub_100010BCC((uint64_t *)&unk_1004883D0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *Swift::String v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    unint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100313DA0()
{
  Swift::String v1 = v0;
  sub_100010BCC((uint64_t *)&unk_100488310);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *Swift::String v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 6 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    __int16 v18 = *(_WORD *)(v17 + 4);
    uint64_t v19 = *(void *)(v4 + 48) + v16;
    *(_DWORD *)uint64_t v19 = *(_DWORD *)v17;
    *(_WORD *)(v19 + 4) = v18;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100313F4C()
{
  Swift::String v1 = v0;
  sub_100010BCC((uint64_t *)&unk_100486BA0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *Swift::String v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v13) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22)
      {
        int64_t v9 = v21 + 2;
        if (v21 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v22 = *(void *)(v6 + 8 * v9);
        if (!v22) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 7 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    __int16 v18 = *(_WORD *)(v17 + 4);
    char v19 = *(unsigned char *)(v17 + 6);
    uint64_t v20 = *(void *)(v4 + 48) + v16;
    *(_DWORD *)uint64_t v20 = *(_DWORD *)v17;
    *(_WORD *)(v20 + 4) = v18;
    *(unsigned char *)(v20 + 6) = v19;
  }
  int64_t v23 = v21 + 3;
  if (v23 >= v13) {
    goto LABEL_28;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100314100()
{
  Swift::String v1 = v0;
  sub_100010BCC((uint64_t *)&unk_100486B90);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *Swift::String v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_28;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23)
      {
        int64_t v9 = v22 + 2;
        if (v22 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v23 = *(void *)(v6 + 8 * v9);
        if (!v23) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 24 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    uint64_t v19 = *(void *)v17;
    uint64_t v18 = *(void *)(v17 + 8);
    char v20 = *(unsigned char *)(v17 + 16);
    LOBYTE(v17) = *(unsigned char *)(v17 + 17);
    uint64_t v21 = *(void *)(v4 + 48) + v16;
    *(void *)uint64_t v21 = v19;
    *(void *)(v21 + 8) = v18;
    *(unsigned char *)(v21 + 16) = v20;
    *(unsigned char *)(v21 + 17) = v17;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 3;
  if (v24 >= v13) {
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1003142C8()
{
  return sub_1003142D4(qword_100486BB0);
}

void *sub_1003142D4(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100010BCC(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  uint64_t result = (void *)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8) {
    uint64_t result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v7 + 8 * v10);
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v7 + 8 * v10);
        if (!v18) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v13 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_12:
    *(unsigned char *)(*(void *)(v5 + 48) + v16) = *(unsigned char *)(*(void *)(v3 + 48) + v16);
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v7 + 8 * v19);
  if (v18)
  {
    int64_t v10 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

unint64_t sub_100314460(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v11 = (unsigned __int16 *)(*(void *)(v3 + 48) + 6 * v6);
        uint64_t v12 = *(unsigned int *)(v11 + 1);
        uint64_t v13 = *v11;
        Hasher.init(_seed:)();
        NANClusterChangeEvent.hash(into:)((int)&v21, v13 | (v12 << 16));
        unint64_t v14 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9) {
            goto LABEL_5;
          }
        }
        else if (v14 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(v3 + 48);
          unint64_t v16 = v15 + 6 * v2;
          int64_t v17 = (int *)(v15 + 6 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v16 >= (unint64_t)v17 + 6))
          {
            int v10 = *v17;
            *(_WORD *)(v16 + 4) = *((_WORD *)v17 + 2);
            *(_DWORD *)unint64_t v16 = v10;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v18 = *(void *)(v3 + 16);
  BOOL v19 = __OFSUB__(v18, 1);
  uint64_t v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_100314628(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v12 = *(void *)(v3 + 48) - v6 + 8 * v6;
        uint64_t v13 = *(unsigned int *)(v12 + 3);
        Swift::UInt8 v14 = *(unsigned char *)v12;
        uint64_t v15 = *(unsigned __int16 *)(v12 + 1);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v14);
        NANClusterChangeEvent.hash(into:)((int)&v23, v15 | (v13 << 16));
        unint64_t v16 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v16 < v9) {
            goto LABEL_5;
          }
        }
        else if (v16 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v16)
        {
LABEL_11:
          uint64_t v17 = *(void *)(v3 + 48);
          unint64_t v18 = v17 - v2 + 8 * v2;
          uint64_t v19 = v17 - v6 + 8 * v6;
          if (v2 != v6 || (int64_t v2 = v6, v18 >= v19 + 7))
          {
            int v10 = *(_DWORD *)v19;
            __int16 v11 = *(_WORD *)(v19 + 4);
            *(unsigned char *)(v18 + 6) = *(unsigned char *)(v19 + 6);
            *(_WORD *)(v18 + 4) = v11;
            *(_DWORD *)unint64_t v18 = v10;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v20 = *(void *)(v3 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v22;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_100314810(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a3 + 32);
  unint64_t v7 = (unint64_t)((1 << v6) + 63) >> 6;
  size_t v8 = 8 * v7;
  if (v6 & 0x3Fu) <= 0xD || (swift_stdlib_isStackAllocationSafe())
  {
    __chkstk_darwin();
    bzero((char *)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    uint64_t v9 = sub_100314994((unint64_t *)((char *)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, a3, a1);
    swift_release();
    if (v3) {
      swift_willThrow();
    }
  }
  else
  {
    int v10 = (void *)swift_slowAlloc();
    bzero(v10, v8);
    uint64_t v9 = sub_100314994((unint64_t *)v10, v7, a3, a1);
    swift_release();
    swift_slowDealloc();
  }
  return v9;
}

uint64_t sub_100314994(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *))
{
  uint64_t v29 = a4;
  uint64_t v23 = a2;
  int64_t v24 = a1;
  uint64_t v28 = *(void *)(type metadata accessor for AWDLPeer.AdvertisedService(0) - 8);
  uint64_t result = __chkstk_darwin();
  size_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v9 = 0;
  uint64_t v10 = a3;
  uint64_t v11 = *(void *)(a3 + 56);
  uint64_t v25 = 0;
  uint64_t v26 = a3 + 56;
  uint64_t v12 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  int64_t v27 = (unint64_t)(v12 + 63) >> 6;
  while (v14)
  {
    unint64_t v15 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    unint64_t v16 = v15 | (v9 << 6);
LABEL_17:
    sub_100314FE0(*(void *)(v10 + 48) + *(void *)(v28 + 72) * v16, (uint64_t)v8, type metadata accessor for AWDLPeer.AdvertisedService);
    char v20 = v29(v8);
    uint64_t result = sub_100315048((uint64_t)v8, type metadata accessor for AWDLPeer.AdvertisedService);
    if (v4) {
      return result;
    }
    if (v20)
    {
      *(unint64_t *)((char *)v24 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      BOOL v17 = __OFADD__(v25++, 1);
      if (v17) {
        goto LABEL_30;
      }
    }
  }
  BOOL v17 = __OFADD__(v9++, 1);
  if (v17)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v9 >= v27) {
    goto LABEL_27;
  }
  unint64_t v18 = *(void *)(v26 + 8 * v9);
  if (v18)
  {
LABEL_16:
    unint64_t v14 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v9 << 6);
    goto LABEL_17;
  }
  int64_t v19 = v9 + 1;
  if (v9 + 1 >= v27) {
    goto LABEL_27;
  }
  unint64_t v18 = *(void *)(v26 + 8 * v19);
  if (v18) {
    goto LABEL_15;
  }
  int64_t v19 = v9 + 2;
  if (v9 + 2 >= v27) {
    goto LABEL_27;
  }
  unint64_t v18 = *(void *)(v26 + 8 * v19);
  if (v18) {
    goto LABEL_15;
  }
  int64_t v19 = v9 + 3;
  if (v9 + 3 >= v27)
  {
LABEL_27:
    uint64_t v21 = v23;
    uint64_t v22 = v25;
    swift_retain();
    return sub_100314C34(v24, v21, v22, v10);
  }
  unint64_t v18 = *(void *)(v26 + 8 * v19);
  if (v18)
  {
LABEL_15:
    int64_t v9 = v19;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v27) {
      goto LABEL_27;
    }
    unint64_t v18 = *(void *)(v26 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_16;
    }
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100314C34(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v30 = a1;
  uint64_t v31 = *(void *)(type metadata accessor for AWDLPeer.AdvertisedService(0) - 8);
  __chkstk_darwin();
  size_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  sub_100010BCC((uint64_t *)&unk_100486B40);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v9 = result;
  uint64_t v29 = a2;
  if (a2 < 1) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = *v30;
  }
  uint64_t v12 = 0;
  uint64_t v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v15 = v14 | (v12 << 6);
    }
    else
    {
      uint64_t v16 = v12 + 1;
      if (__OFADD__(v12, 1)) {
        goto LABEL_40;
      }
      if (v16 >= v29)
      {
LABEL_37:
        swift_release();
        return v9;
      }
      unint64_t v17 = v30[v16];
      ++v12;
      if (!v17)
      {
        uint64_t v12 = v16 + 1;
        if (v16 + 1 >= v29) {
          goto LABEL_37;
        }
        unint64_t v17 = v30[v12];
        if (!v17)
        {
          uint64_t v12 = v16 + 2;
          if (v16 + 2 >= v29) {
            goto LABEL_37;
          }
          unint64_t v17 = v30[v12];
          if (!v17)
          {
            uint64_t v18 = v16 + 3;
            if (v18 >= v29) {
              goto LABEL_37;
            }
            unint64_t v17 = v30[v18];
            if (!v17)
            {
              while (1)
              {
                uint64_t v12 = v18 + 1;
                if (__OFADD__(v18, 1)) {
                  goto LABEL_41;
                }
                if (v12 >= v29) {
                  goto LABEL_37;
                }
                unint64_t v17 = v30[v12];
                ++v18;
                if (v17) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v12 = v18;
          }
        }
      }
LABEL_24:
      unint64_t v11 = (v17 - 1) & v17;
      unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
    }
    uint64_t v19 = *(void *)(v31 + 72);
    sub_100314FE0(*(void *)(a4 + 48) + v19 * v15, (uint64_t)v8, type metadata accessor for AWDLPeer.AdvertisedService);
    Hasher.init(_seed:)();
    AWDLPeer.AdvertisedService.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v13 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v13 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v13 + 8 * v22);
      }
      while (v27 == -1);
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v13 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t result = sub_1003139F0((uint64_t)v8, *(void *)(v9 + 48) + v23 * v19);
    ++*(void *)(v9 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    if (!a3) {
      goto LABEL_37;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100314F60(unsigned __int8 *a1)
{
  return sub_10030DE70(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100314F7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DNSRecords.SRV();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_100314FE0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100315048(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

BOOL sub_1003150A8(uint64_t a1, void *a2)
{
  return sub_100311014(a1, a2, *(void *)(v2 + 32));
}

uint64_t sub_1003150CC()
{
  return sub_10030A90C();
}

uint64_t sub_1003150F4()
{
  return sub_10030A33C();
}

uint64_t sub_100315130()
{
  return sub_10030A42C();
}

uint64_t sub_100315158(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010BCC(&qword_100480348);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003151C0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1003151F8(uint64_t a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v31 = a2;
  uint64_t v30 = sub_100010BCC(&qword_1004855F0);
  __chkstk_darwin();
  uint64_t v29 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v27 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & v4;
  int64_t v28 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v32 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v9 = 0;
  while (1)
  {
    if (v7)
    {
      uint64_t v33 = (v7 - 1) & v7;
      int64_t v34 = v9;
      unint64_t v10 = __clz(__rbit64(v7)) | (v9 << 6);
      goto LABEL_5;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v22 >= v28) {
      return swift_release();
    }
    unint64_t v23 = *(void *)(v27 + 8 * v22);
    int64_t v24 = v9 + 1;
    if (!v23)
    {
      int64_t v24 = v9 + 2;
      if (v9 + 2 >= v28) {
        return swift_release();
      }
      unint64_t v23 = *(void *)(v27 + 8 * v24);
      if (!v23)
      {
        int64_t v24 = v9 + 3;
        if (v9 + 3 >= v28) {
          return swift_release();
        }
        unint64_t v23 = *(void *)(v27 + 8 * v24);
        if (!v23)
        {
          int64_t v24 = v9 + 4;
          if (v9 + 4 >= v28) {
            return swift_release();
          }
          unint64_t v23 = *(void *)(v27 + 8 * v24);
          if (!v23) {
            break;
          }
        }
      }
    }
LABEL_22:
    uint64_t v33 = (v23 - 1) & v23;
    int64_t v34 = v24;
    unint64_t v10 = __clz(__rbit64(v23)) + (v24 << 6);
LABEL_5:
    uint64_t v11 = *(void *)(v32 + 56);
    uint64_t v12 = (unsigned __int8 *)(*(void *)(v32 + 48) + 6 * v10);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    uint64_t v15 = v12[2];
    uint64_t v16 = v12[3];
    uint64_t v17 = v12[4];
    uint64_t v18 = v12[5];
    uint64_t v19 = v11 + *(void *)(*(void *)(type metadata accessor for AWDLPeer(0) - 8) + 72) * v10;
    uint64_t v20 = v29;
    uint64_t v21 = (uint64_t)&v29[*(int *)(v30 + 48)];
    sub_100314FE0(v19, v21, type metadata accessor for AWDLPeer);
    unsigned char *v20 = v13;
    v20[1] = v14;
    v20[2] = v15;
    v20[3] = v16;
    v20[4] = v17;
    v20[5] = v18;
    v31(v13 | (v14 << 8) | (v15 << 16) | (v16 << 24) | (v17 << 32) | (v18 << 40), v21);
    uint64_t result = sub_1000380B4((uint64_t)v20, &qword_1004855F0);
    int64_t v9 = v34;
    unint64_t v7 = v33;
  }
  uint64_t v25 = v9 + 5;
  if (v9 + 5 >= v28) {
    return swift_release();
  }
  unint64_t v23 = *(void *)(v27 + 8 * v25);
  if (v23)
  {
    int64_t v24 = v9 + 5;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v24 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v24 >= v28) {
      return swift_release();
    }
    unint64_t v23 = *(void *)(v27 + 8 * v24);
    ++v25;
    if (v23) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1003154C4(uint64_t a1)
{
  Logger.init(subsystem:category:)();
  uint64_t v3 = qword_100486820;
  type metadata accessor for AWDLDiscoveryEngine.Browse();
  sub_1000171BC();
  *(void *)(v1 + v3) = Dictionary.init()();
  uint64_t v4 = qword_100486828;
  type metadata accessor for AWDLDiscoveryEngine.Advertise();
  sub_100017210();
  *(void *)(v1 + v4) = Dictionary.init()();
  uint64_t v5 = qword_100488930;
  type metadata accessor for AWDLDiscoveryEngine.DatapathInitiator();
  *(void *)(v1 + v5) = Dictionary.init()();
  *(void *)(v1 + qword_100488928) = a1;
  swift_unownedRetain();
  return v1;
}

uint64_t sub_100315634(uint64_t a1)
{
  return sub_1003154C4(a1);
}

uint64_t sub_100315670(uint64_t a1, uint64_t a2)
{
  return sub_100311E30(a1 & 0xFFFFFFFFFFFFLL, a2, v2);
}

BOOL sub_10031567C(uint64_t a1)
{
  return sub_100311F18(a1, v1);
}

void sub_10031569C(void *a1)
{
  sub_10030D89C(a1, *(unsigned __int16 *)(v1 + 24) | ((unint64_t)*(unsigned int *)(v1 + 26) << 16));
}

uint64_t sub_1003156D8(void *a1)
{
  return sub_100315730(a1, &qword_1004868D8, &qword_1004868E0) & 1;
}

uint64_t sub_100315704(void *a1)
{
  return sub_100315730(a1, &qword_1004869A8, qword_1004869B0) & 1;
}

uint64_t sub_100315730(void *a1, void *a2, void *a3)
{
  if (*(unsigned char *)(*a1 + *a2) == 1) {
    return (*(unsigned __int8 *)(*a1 + *a3) ^ 1) & 1;
  }
  else {
    return 0;
  }
}

void sub_100315764(uint64_t *a1)
{
}

void *sub_100315780(void *result)
{
  *(unsigned char *)(*result + qword_1004869B0) = *(unsigned char *)(*result + qword_1004869A8);
  return result;
}

uint64_t sub_1003157A0(uint64_t *a1, uint64_t *a2)
{
  return sub_10030AE20(a1, a2) & 1;
}

uint64_t sub_1003157C0(uint64_t *a1)
{
  return sub_10030AFC8(a1);
}

uint64_t sub_1003157E0(uint64_t *a1)
{
  return sub_100309828(a1, *(void ***)(v1 + 32));
}

uint64_t sub_100315800(uint64_t *a1)
{
  return sub_100309BDC(a1, *(void ***)(v1 + 32));
}

void *sub_100315820(void *result)
{
  *(unsigned char *)(*result + qword_1004868D8) = 1;
  return result;
}

void *sub_100315838(void *result)
{
  *(unsigned char *)(*result + qword_1004869A8) = 1;
  return result;
}

uint64_t sub_100315850(uint64_t *a1)
{
  return sub_1003157C0(a1);
}

uint64_t sub_100315868(uint64_t *a1, uint64_t *a2)
{
  return sub_1003157A0(a1, a2) & 1;
}

uint64_t sub_100315884()
{
  return sub_1003150CC();
}

uint64_t sub_10031589C()
{
  uint64_t result = type metadata accessor for P2PController.Components();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Logger();
    if (v2 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }
  return result;
}

uint64_t sub_1003159B4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 144);
  uint64_t v2 = *(void *)(v0 + v1);
  uint64_t v3 = v2;
  if (v2 == 1)
  {
    uint64_t v3 = sub_100315C58();
    uint64_t v4 = *(void *)(v0 + v1);
    *(void *)(v0 + v1) = v3;
    swift_retain();
    sub_10031C170(v4);
  }
  sub_1000127FC(v2);
  return v3;
}

void *sub_100315A2C(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_1002BF3C4(0, v1, 0);
  uint64_t result = (void *)sub_100374AE8(a1);
  uint64_t v5 = (uint64_t)result;
  uint64_t v6 = 0;
  uint64_t v7 = a1 + 64;
  int64_t v19 = v1;
  int v20 = v4;
  uint64_t v21 = a1 + 64;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v10 = (unint64_t)v5 >> 6;
    if ((*(void *)(v7 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0) {
      goto LABEL_25;
    }
    if (*(_DWORD *)(a1 + 36) != v4) {
      goto LABEL_26;
    }
    uint64_t result = [*(id *)(*(void *)(a1 + 48) + 8 * v5) uniqueIdentifier];
    uint64_t v11 = result;
    unint64_t v13 = _swiftEmptyArrayStorage[2];
    unint64_t v12 = _swiftEmptyArrayStorage[3];
    if (v13 >= v12 >> 1) {
      uint64_t result = (void *)sub_1002BF3C4(v12 > 1, v13 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v13 + 1;
    _swiftEmptyArrayStorage[v13 + 4] = v11;
    int64_t v8 = 1 << *(unsigned char *)(a1 + 32);
    if (v5 >= v8) {
      goto LABEL_27;
    }
    uint64_t v7 = a1 + 64;
    uint64_t v14 = *(void *)(v21 + 8 * v10);
    if ((v14 & (1 << v5)) == 0) {
      goto LABEL_28;
    }
    int v4 = v20;
    if (*(_DWORD *)(a1 + 36) != v20) {
      goto LABEL_29;
    }
    unint64_t v15 = v14 & (-2 << (v5 & 0x3F));
    if (v15)
    {
      int64_t v8 = __clz(__rbit64(v15)) | v5 & 0xFFFFFFFFFFFFFFC0;
      int64_t v9 = v19;
    }
    else
    {
      unint64_t v16 = v10 + 1;
      unint64_t v17 = (unint64_t)(v8 + 63) >> 6;
      int64_t v9 = v19;
      if (v10 + 1 < v17)
      {
        unint64_t v18 = *(void *)(v21 + 8 * v16);
        if (!v18)
        {
          unint64_t v16 = v10 + 2;
          if (v10 + 2 >= v17) {
            goto LABEL_4;
          }
          unint64_t v18 = *(void *)(v21 + 8 * v16);
          if (!v18)
          {
            while (v17 - 3 != v10)
            {
              unint64_t v18 = *(void *)(a1 + 88 + 8 * v10++);
              if (v18)
              {
                unint64_t v16 = v10 + 2;
                goto LABEL_17;
              }
            }
            goto LABEL_4;
          }
        }
LABEL_17:
        int64_t v8 = __clz(__rbit64(v18)) + (v16 << 6);
      }
    }
LABEL_4:
    ++v6;
    uint64_t v5 = v8;
    if (v6 == v9) {
      return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_100315C58()
{
  int64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v4 = *(void *)(v2 + 88);
  uint64_t v5 = *(void *)(v2 + 112);
  uint64_t v47 = *(void *)(v2 + 80);
  uint64_t v3 = v47;
  uint64_t v48 = v4;
  uint64_t v38 = v4;
  uint64_t v42 = v2;
  long long v44 = *(_OWORD *)(v2 + 96);
  long long v49 = v44;
  uint64_t v50 = v5;
  uint64_t v46 = type metadata accessor for P2PController.Components();
  uint64_t v41 = *(void *)(v46 - 8);
  __chkstk_darwin();
  uint64_t v40 = (char *)&v36 - v6;
  uint64_t v45 = *(void *)(v47 - 8);
  __chkstk_darwin();
  uint64_t v43 = (char *)&v36 - v7;
  type metadata accessor for Optional();
  __chkstk_darwin();
  uint64_t v39 = (char *)&v36 - v8;
  swift_getAssociatedTypeWitness();
  *(void *)&long long v44 = v3;
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v9 = type metadata accessor for Preferences();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  unint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v36 - v13;
  *((unsigned char *)v1 + *(void *)(v2 + 136)) = 1;
  unint64_t v15 = (char *)v1 + *(void *)(*v1 + 128);
  unint64_t v16 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v16((char *)&v36 - v13, v15, v9);
  LOBYTE(v2) = Preferences.nan.getter();
  unint64_t v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v14, v9);
  uint64_t v18 = 0;
  if (v2)
  {
    uint64_t v19 = v1[2];
    (*(void (**)(char *, uint64_t, void))(v45 + 16))(v43, v19 + *(void *)(*(void *)v19 + 96), v44);
    int v20 = (uint64_t *)(v19 + *(void *)(*(void *)v19 + 104));
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    uint64_t v37 = v15;
    v16(v12, v15, v9);
    uint64_t v23 = v21;
    swift_bridgeObjectRetain();
    uint64_t v24 = Preferences.nanDataMACAddress.getter();
    v17(v12, v9);
    if ((v24 & 0x1000000000000) != 0) {
      static WiFiAddress.random()();
    }
    WiFiAddress.linkLocalAddress()(v25);
    uint64_t v26 = (uint64_t)v39;
    int64_t v28 = v43;
    uint64_t v29 = v44;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)(v38 + 8) + 16))(2, v22, v23, v27 & 0xFFFFFFFFFFFFLL, v44);
    uint64_t v30 = v45;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v28, v29);
    swift_bridgeObjectRelease();
    uint64_t v31 = v37;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v30 + 56))(v26, 0, 1, v29);
    swift_getWitnessTable();
    type metadata accessor for NANInterface();
    uint64_t v32 = (uint64_t)v40;
    (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v40, v31, v46);
    swift_retain();
    uint64_t v18 = sub_100358C1C(v26, v32, v19);
    unint64_t v15 = v31;
  }
  uint64_t v33 = v46;
  swift_retain();
  swift_retain();
  sub_1002C866C(v18);
  swift_release();
  swift_release();
  uint64_t v34 = *(void *)&v15[*(int *)(v33 + 68)];
  swift_beginAccess();
  swift_retain();
  swift_retain();
  swift_unownedRelease();
  *(void *)(v34 + 16) = v18;
  swift_endAccess();
  swift_unownedRetain();
  swift_release();
  swift_release();
  return v18;
}

char *sub_10031628C()
{
  int64_t v1 = v0;
  uint64_t v58 = 0;
  uint64_t v2 = *v0;
  uint64_t v4 = *(void *)(v2 + 88);
  uint64_t v5 = *(void *)(v2 + 112);
  uint64_t v62 = *(void *)(v2 + 80);
  uint64_t v3 = v62;
  uint64_t v63 = v4;
  uint64_t v50 = v4;
  uint64_t v59 = v2;
  long long v57 = *(_OWORD *)(v2 + 96);
  long long v64 = v57;
  uint64_t v65 = v5;
  uint64_t v60 = type metadata accessor for P2PController.Components();
  uint64_t v53 = *(void *)(v60 - 8);
  __chkstk_darwin();
  uint64_t v52 = (char *)&v47 - v6;
  uint64_t v56 = *(void *)(v62 - 8);
  __chkstk_darwin();
  uint64_t v54 = (char *)&v47 - v7;
  type metadata accessor for Optional();
  __chkstk_darwin();
  unint64_t v51 = (char *)&v47 - v8;
  uint64_t v9 = v57;
  swift_getAssociatedTypeWitness();
  *(void *)&long long v57 = v9;
  uint64_t v55 = v3;
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v10 = type metadata accessor for Preferences();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v15 = (char *)&v47 - v14;
  *((unsigned char *)v1 + *(void *)(v2 + 152)) = 1;
  unint64_t v16 = (char *)v1 + *(void *)(*v1 + 128);
  unint64_t v17 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v17((char *)&v47 - v14, v16, v10);
  LOBYTE(v2) = Preferences.awdl.getter();
  uint64_t v18 = *(void (**)(char *, uint64_t))(v11 + 8);
  v18(v15, v10);
  if (v2)
  {
    uint64_t v19 = v1[2];
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v54, v19 + *(void *)(*(void *)v19 + 96), v55);
    uint64_t v20 = *(void *)(*(void *)v19 + 104);
    uint64_t v48 = v19;
    uint64_t v21 = (uint64_t *)(v19 + v20);
    uint64_t v22 = v21[1];
    uint64_t v47 = *v21;
    long long v49 = v16;
    v17(v13, v16, v10);
    swift_bridgeObjectRetain();
    uint64_t v23 = Preferences.awdlMACAddress.getter();
    v18(v13, v10);
    if ((v23 & 0x1000000000000) != 0) {
      static WiFiAddress.random()();
    }
    WiFiAddress.linkLocalAddress()(v24);
    uint64_t v25 = (uint64_t)v51;
    int64_t v28 = v54;
    uint64_t v27 = v55;
    uint64_t v29 = v58;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v50 + 8) + 16))(1, v47, v22, v26 & 0xFFFFFFFFFFFFLL, v55);
    uint64_t v31 = v59;
    uint64_t v30 = v60;
    uint64_t v32 = v27;
    if (v29)
    {
      swift_bridgeObjectRelease();
      swift_errorRelease();
      uint64_t v33 = v56;
      (*(void (**)(char *, uint64_t))(v56 + 8))(v28, v32);
      uint64_t v34 = 1;
    }
    else
    {
      uint64_t v33 = v56;
      (*(void (**)(char *, uint64_t))(v56 + 8))(v28, v32);
      swift_bridgeObjectRelease();
      uint64_t v34 = 0;
    }
    unint64_t v16 = v49;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 56))(v25, v34, 1, v32);
    swift_getWitnessTable();
    type metadata accessor for AWDLInterface();
    uint64_t v36 = (uint64_t)v52;
    (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v52, v16, v30);
    uint64_t v37 = v48;
    swift_retain();
    uint64_t v35 = sub_100376704(v25, v36, v37);
  }
  else
  {
    uint64_t v35 = v58;
    uint64_t v31 = v59;
    uint64_t v30 = v60;
  }
  char v61 = v35;
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for AWDLInterface();
  type metadata accessor for Optional();
  uint64_t v39 = swift_getWitnessTable();
  uint64_t v40 = swift_getWitnessTable();
  uint64_t v62 = v31;
  uint64_t v63 = WitnessTable;
  *(void *)&long long v64 = v39;
  *((void *)&v64 + 1) = v40;
  uint64_t v65 = v57;
  uint64_t v41 = type metadata accessor for AWDLNetworkAgent();
  sub_100027E7C((void (*)(char *, char *))sub_10031C150, (uint64_t)v1, (uint64_t)&type metadata for Never, v41, v42, (uint64_t)&v62);
  uint64_t v43 = *(void *)(*v1 + 168);
  long long v44 = *(void **)((char *)v1 + v43);
  *(void *)((char *)v1 + v43) = v62;

  swift_weakAssign();
  uint64_t v45 = *(void *)&v16[*(int *)(v30 + 68)];
  swift_beginAccess();
  swift_retain();
  swift_retain();
  swift_unownedRelease();
  *(void *)(v45 + 24) = v35;
  swift_endAccess();
  swift_unownedRetain();
  swift_release();
  swift_release();
  return v35;
}

uint64_t sub_1003169DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for Preferences();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a3, a1, v5);
  uint64_t v6 = (int *)type metadata accessor for P2PController.Components();
  *(void *)(a3 + v6[15]) = a2;
  uint64_t v7 = v6[16];
  type metadata accessor for P2PController();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  type metadata accessor for RadioResourceManager();
  *(void *)(a3 + v7) = sub_1002C39B8();
  uint64_t v8 = v6[17];
  type metadata accessor for PeerCacheManager();
  *(void *)(a3 + v8) = sub_10036D728();
  uint64_t v9 = v6[18];
  _s22P2PActivityCoordinatorCMa();
  *(void *)(a3 + v9) = sub_100282178();
  uint64_t v10 = v6[19];
  type metadata accessor for CoreAnalyticsCommunicator();
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 0;
  *(void *)(a3 + v10) = result;
  return result;
}

uint64_t sub_100316C58@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(v2 + *(int *)(a1 + 64));
  return swift_retain();
}

uint64_t sub_100316C68@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(v2 + *(int *)(a1 + 68));
  return swift_retain();
}

uint64_t sub_100316C78@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v3 = type metadata accessor for Preferences();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t sub_100316D8C()
{
  return swift_retain();
}

uint64_t sub_100316D98@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(v2 + *(int *)(a1 + 72));
  return swift_retain();
}

uint64_t sub_100316DA8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(v2 + *(int *)(a1 + 76));
  return swift_retain();
}

char *sub_100316DB8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, char **a3@<X8>)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *a1;
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  type metadata accessor for AWDLNetworkAgent();
  uint64_t v7 = (char *)a2 + *(void *)(v5 + 128);
  uint64_t v8 = *(void *)&v7[*(int *)(type metadata accessor for P2PController.Components() + 72)];
  swift_retain();
  swift_retain();
  uint64_t result = sub_10034735C(v6, v8);
  *a3 = result;
  return result;
}

uint64_t sub_100316F2C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v41 = a1;
  uint64_t v5 = *v2;
  uint64_t v6 = *v2;
  uint64_t v40 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v44 = *(void *)(v40 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v42 = v9;
  uint64_t v43 = v10;
  __chkstk_darwin();
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Lock();
  swift_allocObject();
  uint64_t v13 = Lock.init()();
  uint64_t v14 = swift_allocObject();
  *(unsigned char *)(v14 + 16) = 0;
  uint64_t v15 = swift_allocObject();
  *(unsigned char *)(v15 + 16) = 0;
  unint64_t v16 = *(uint64_t (**)())(v5 + 112);
  long long v17 = *(_OWORD *)(v6 + 96);
  long long aBlock = *(_OWORD *)(v6 + 80);
  long long v47 = v17;
  uint64_t v48 = v16;
  type metadata accessor for P2PController.Components();
  swift_retain();
  sub_10028A698();
  swift_release();
  uint64_t v18 = (void *)*OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v19 = (void *)swift_allocObject();
  v19[2] = v3;
  v19[3] = v13;
  uint64_t v33 = v13;
  void v19[4] = v14;
  v19[5] = v15;
  v19[6] = v41;
  v19[7] = a2;
  uint64_t v32 = a2;
  uint64_t v48 = sub_10031C108;
  long long v49 = v19;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  uint64_t v39 = &v47;
  *(void *)&long long v47 = sub_10000E5D0;
  *((void *)&v47 + 1) = &unk_10046E1D0;
  uint64_t v20 = _Block_copy(&aBlock);
  id v21 = v18;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v45 = _swiftEmptyArrayStorage;
  unint64_t v35 = sub_100014390();
  uint64_t v34 = sub_100010BCC((uint64_t *)&unk_10047D0F0);
  unint64_t v37 = sub_1000143E0();
  uint64_t v22 = v40;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);

  uint64_t v23 = *(void (**)(char *, uint64_t))(v44 + 8);
  v44 += 8;
  uint64_t v38 = v23;
  v23(v8, v22);
  uint64_t v24 = *(void (**)(char *, uint64_t))(v43 + 8);
  v43 += 8;
  uint64_t v36 = v24;
  v24(v12, v42);
  swift_release();
  uint64_t v25 = (void *)*OS_dispatch_queue.awdl.unsafeMutableAddressor();
  uint64_t v26 = (void *)swift_allocObject();
  uint64_t v27 = v33;
  uint64_t v26[2] = v3;
  uint64_t v26[3] = v27;
  void v26[4] = v15;
  uint64_t v26[5] = v14;
  uint64_t v28 = v32;
  v26[6] = v41;
  v26[7] = v28;
  uint64_t v48 = sub_10031C138;
  long long v49 = v26;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  *(void *)&long long v47 = sub_10000E5D0;
  *((void *)&v47 + 1) = &unk_10046E220;
  uint64_t v29 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  id v30 = v25;
  static DispatchQoS.unspecified.getter();
  uint64_t v45 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v29);
  swift_release();

  v38(v8, v22);
  v36(v12, v42);
  swift_release();
  swift_release();
  return swift_release();
}

void sub_100317470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v23 = a5;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v25 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  uint64_t v24 = *(void *)(v13 - 8);
  __chkstk_darwin();
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v16 = (unsigned char *)(a3 + 16);
  if (*(unsigned char *)(a1 + *(void *)(*(void *)a1 + 136)) == 1)
  {
    if (sub_1003159B4())
    {
      sub_100358C70();
      swift_release();
    }
    uint64_t v17 = *(void *)(*(void *)a1 + 144);
    uint64_t v18 = *(void *)(a1 + v17);
    *(void *)(a1 + v17) = 0;
    sub_10031C170(v18);
  }
  Lock.lock()();
  swift_beginAccess();
  *unint64_t v16 = 1;
  swift_beginAccess();
  int v19 = *(unsigned __int8 *)(a4 + 16);
  Lock.unlock()();
  if (v19 == 1)
  {
    uint64_t v20 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
    aBlock[4] = v23;
    aBlock[5] = a6;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10000E5D0;
    uint64_t aBlock[3] = &unk_10046E270;
    id v21 = _Block_copy(aBlock);
    id v22 = v20;
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v26 = _swiftEmptyArrayStorage;
    sub_100014390();
    sub_100010BCC((uint64_t *)&unk_10047D0F0);
    sub_1000143E0();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v21);

    (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v10);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v15, v13);
    swift_release();
  }
}

void sub_100317790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v23 = a5;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v25 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  uint64_t v24 = *(void *)(v13 - 8);
  __chkstk_darwin();
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v16 = (unsigned char *)(a3 + 16);
  if (*(unsigned char *)(a1 + *(void *)(*(void *)a1 + 152)) == 1)
  {
    if (sub_10001132C())
    {
      sub_100376758();
      swift_release();
    }
    uint64_t v17 = *(void *)(*(void *)a1 + 160);
    uint64_t v18 = *(void *)(a1 + v17);
    *(void *)(a1 + v17) = 0;
    sub_10031C170(v18);
  }
  Lock.lock()();
  swift_beginAccess();
  *unint64_t v16 = 1;
  swift_beginAccess();
  int v19 = *(unsigned __int8 *)(a4 + 16);
  Lock.unlock()();
  if (v19 == 1)
  {
    uint64_t v20 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
    aBlock[4] = v23;
    aBlock[5] = a6;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10000E5D0;
    uint64_t aBlock[3] = &unk_10046E248;
    id v21 = _Block_copy(aBlock);
    id v22 = v20;
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v26 = _swiftEmptyArrayStorage;
    sub_100014390();
    sub_100010BCC((uint64_t *)&unk_10047D0F0);
    sub_1000143E0();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v21);

    (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v10);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v15, v13);
    swift_release();
  }
}

uint64_t sub_100317AB0()
{
  swift_release();
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 128);
  uint64_t v2 = type metadata accessor for P2PController.Components();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_10031C170(*(void *)(v0 + *(void *)(*(void *)v0 + 144)));
  sub_10031C170(*(void *)(v0 + *(void *)(*(void *)v0 + 160)));

  uint64_t v3 = v0 + *(void *)(*(void *)v0 + 184);
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  return v0;
}

uint64_t sub_100317C48()
{
  sub_100317AB0();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for P2PController()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for P2PController.Components()
{
  return swift_getGenericMetadata();
}

uint64_t sub_100317CD0()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t result = type metadata accessor for Preferences();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_100317E1C(void *a1, void *a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7 | 7;
  uint64_t v9 = ~v8;
  if (v7 > 7u) {
    goto LABEL_5;
  }
  if ((v7 & 0x100000) != 0) {
    goto LABEL_5;
  }
  uint64_t v10 = v6 + 3 + v7;
  unint64_t v11 = (v6 & 0xFFFFFFFFFFFFFFFCLL) + 9;
  unint64_t v12 = (v6 & 0xFFFFFFFFFFFFFFF8) + 25;
  unint64_t v13 = v11 + v7;
  unint64_t v14 = (v10
       + ((v13
         + (((v7 | 3)
           + v6
           + 3
           + ((v10
             + ((v12
               + v7
               + ((v8 + 1) & ~v8)
               + ((v8
                 + v11
                 + (((v7 | 3)
                   + v6
                   + 3
                   + ((v10
                     + ((v10 + (v10 & ~(unint64_t)v7)) & ~(unint64_t)v7)) & ~(unint64_t)v7)) & ~(v7 | 3))) & ~v8)) & ~(unint64_t)v7)) & ~(unint64_t)v7)) & ~(v7 | 3))) & ~(unint64_t)v7)) & ~(unint64_t)v7;
  uint64_t v15 = v8 + v6 + 3;
  unint64_t v16 = (v6 & 0xFFFFFFFFFFFFFFF8) + 17;
  unint64_t v17 = (v8 + v16 + ((v15 + v14) & ~v8)) & ~v8;
  unint64_t v18 = v16 + v7;
  unint64_t v19 = (v8
       + v12
       + ((v8
         + v12
         + ((v15
           + ((v12 + v7 + ((v15 + ((v18 + v17) & ~(unint64_t)v7)) & ~v8)) & ~(unint64_t)v7)) & ~v8)) & ~v8)) & ~v8;
  unint64_t v20 = v18 + ((v7 + 8) & ~v8);
  if (((((((((((((v10
                 + ((v10 + ((v20 + v19) & ~(unint64_t)v7)) & ~(unint64_t)v7)) & ~(unint64_t)v7)
               + v6
               + 3
               + 7) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 8 > 0x18)
  {
LABEL_5:
    uint64_t v118 = *a2;
    *a1 = v118;
    uint64_t v94 = (void *)(v118 + ((v7 + 16) & v9));
  }
  else
  {
    uint64_t v21 = AssociatedTypeWitness;
    unint64_t v22 = ~(unint64_t)v7;
    uint64_t v130 = ~(v7 | 3);
    uint64_t v23 = *(void (**)(void *, void *, uint64_t))(v5 + 16);
    uint64_t v129 = (v7 | 3) + v6 + 3;
    unint64_t v121 = v13;
    unint64_t v122 = v18;
    unint64_t v125 = v18 + ((v7 + 8) & ~v8);
    uint64_t v126 = ((v10 + ((v10 + ((v20 + v19) & v22)) & v22)) & v22) + v6 + 3;
    unint64_t v124 = v12 + v7;
    unint64_t v120 = v124 + ((v8 + 1) & ~v8);
    v23(a1, a2, AssociatedTypeWitness);
    uint64_t v24 = (char *)a1 + v6;
    uint64_t v123 = a2;
    *uint64_t v24 = *((unsigned char *)a2 + v6);
    v24[1] = *((unsigned char *)a2 + v6 + 1);
    v24[2] = *((unsigned char *)a2 + v6 + 2);
    unint64_t v25 = ((unint64_t)a1 + v10) & v22;
    unint64_t v26 = ((unint64_t)a2 + v10) & v22;
    v23((void *)v25, (void *)v26, v21);
    uint64_t v27 = (unsigned char *)(v25 + v6);
    *uint64_t v27 = *(unsigned char *)(v26 + v6);
    v27[1] = *(unsigned char *)(v26 + v6 + 1);
    void v27[2] = *(unsigned char *)(v26 + v6 + 2);
    unint64_t v28 = (v10 + v25) & v22;
    unint64_t v29 = (v10 + v26) & v22;
    v23((void *)v28, (void *)v29, v21);
    id v30 = (unsigned char *)(v28 + v6);
    *id v30 = *(unsigned char *)(v29 + v6);
    v30[1] = *(unsigned char *)(v29 + v6 + 1);
    v30[2] = *(unsigned char *)(v29 + v6 + 2);
    unint64_t v31 = (v10 + v28) & v22;
    unint64_t v32 = (v10 + v29) & v22;
    v23((void *)v31, (void *)v32, v21);
    uint64_t v33 = (unsigned char *)(v31 + v6);
    *uint64_t v33 = *(unsigned char *)(v32 + v6);
    v33[1] = *(unsigned char *)(v32 + v6 + 1);
    v33[2] = *(unsigned char *)(v32 + v6 + 2);
    uint64_t v34 = (v129 + v31) & v130;
    uint64_t v35 = (v129 + v32) & v130;
    v23((void *)v34, (void *)v35, v21);
    *(unsigned char *)(v34 + v6) = *(unsigned char *)(v35 + v6);
    unint64_t v36 = (v34 + v6) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v37 = (v35 + v6) & 0xFFFFFFFFFFFFFFFCLL;
    *(_DWORD *)(v36 + 4) = *(_DWORD *)(v37 + 4);
    *(unsigned char *)(v36 + 8) = *(unsigned char *)(v37 + 8);
    uint64_t v127 = a1;
    uint64_t v128 = v9;
    uint64_t v38 = (unsigned char *)((v6 + 16 + v35) & v9);
    uint64_t v39 = v9;
    uint64_t v40 = (unsigned char *)((v6 + 16 + v34) & v9);
    *uint64_t v40 = *v38;
    uint64_t v41 = (unint64_t)(v40 + 8) & v39;
    uint64_t v42 = (unint64_t)(v38 + 8) & v39;
    v23((void *)v41, (void *)v42, v21);
    *(unsigned char *)(v41 + v6) = *(unsigned char *)(v42 + v6);
    unint64_t v43 = (v41 + v6) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v44 = (v42 + v6) & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v43 + 8) = *(void *)(v44 + 8);
    *(void *)(v43 + 16) = *(void *)(v44 + 16);
    *(unsigned char *)(v43 + 24) = *(unsigned char *)(v44 + 24);
    unint64_t v45 = (unint64_t)&v40[v120] & v22;
    unint64_t v46 = (unint64_t)&v38[v120] & v22;
    swift_bridgeObjectRetain();
    v23((void *)v45, (void *)v46, v21);
    long long v47 = (unsigned char *)(v45 + v6);
    *long long v47 = *(unsigned char *)(v46 + v6);
    v47[1] = *(unsigned char *)(v46 + v6 + 1);
    v47[2] = *(unsigned char *)(v46 + v6 + 2);
    unint64_t v48 = (v10 + v45) & v22;
    unint64_t v49 = (v10 + v46) & v22;
    v23((void *)v48, (void *)v49, v21);
    uint64_t v50 = (unsigned char *)(v48 + v6);
    *uint64_t v50 = *(unsigned char *)(v49 + v6);
    v50[1] = *(unsigned char *)(v49 + v6 + 1);
    v50[2] = *(unsigned char *)(v49 + v6 + 2);
    uint64_t v51 = (v129 + v48) & v130;
    uint64_t v52 = (v129 + v49) & v130;
    v23((void *)v51, (void *)v52, v21);
    *(unsigned char *)(v51 + v6) = *(unsigned char *)(v52 + v6);
    unint64_t v53 = (v51 + v6) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v54 = (v52 + v6) & 0xFFFFFFFFFFFFFFFCLL;
    *(_DWORD *)(v53 + 4) = *(_DWORD *)(v54 + 4);
    *(unsigned char *)(v53 + 8) = *(unsigned char *)(v54 + 8);
    unint64_t v55 = (v121 + v51) & v22;
    unint64_t v56 = (v121 + v52) & v22;
    v23((void *)v55, (void *)v56, v21);
    long long v57 = (unsigned char *)(v55 + v6);
    *long long v57 = *(unsigned char *)(v56 + v6);
    v57[1] = *(unsigned char *)(v56 + v6 + 1);
    v57[2] = *(unsigned char *)(v56 + v6 + 2);
    unint64_t v58 = (v10 + v55) & v22;
    unint64_t v59 = (v10 + v56) & v22;
    v23((void *)v58, (void *)v59, v21);
    uint64_t v60 = (unsigned char *)(v58 + v6);
    *uint64_t v60 = *(unsigned char *)(v59 + v6);
    v60[1] = *(unsigned char *)(v59 + v6 + 1);
    v60[2] = *(unsigned char *)(v59 + v6 + 2);
    uint64_t v61 = (v6 + 10 + v58) & v128;
    uint64_t v62 = (v6 + 10 + v59) & v128;
    v23((void *)v61, (void *)v62, v21);
    *(unsigned char *)(v61 + v6) = *(unsigned char *)(v62 + v6);
    unint64_t v63 = (v61 + v6) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v64 = (v62 + v6) & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v63 + 8) = *(void *)(v64 + 8);
    *(unsigned char *)(v63 + 16) = *(unsigned char *)(v64 + 16);
    uint64_t v65 = (v6 + 24 + v61) & v128;
    uint64_t v66 = (v6 + 24 + v62) & v128;
    v23((void *)v65, (void *)v66, v21);
    *(unsigned char *)(v65 + v6) = *(unsigned char *)(v66 + v6);
    unint64_t v67 = (v65 + v6) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v68 = (v66 + v6) & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v67 + 8) = *(void *)(v68 + 8);
    *(unsigned char *)(v67 + 16) = *(unsigned char *)(v68 + 16);
    unint64_t v69 = (v122 + v65) & v22;
    unint64_t v70 = (v122 + v66) & v22;
    v23((void *)v69, (void *)v70, v21);
    long long v71 = (unsigned char *)(v69 + v6);
    *long long v71 = *(unsigned char *)(v70 + v6);
    v71[1] = *(unsigned char *)(v70 + v6 + 1);
    v71[2] = *(unsigned char *)(v70 + v6 + 2);
    uint64_t v72 = (v6 + 10 + v69) & v128;
    uint64_t v73 = (v6 + 10 + v70) & v128;
    uint64_t v74 = v21;
    v23((void *)v72, (void *)v73, v21);
    *(unsigned char *)(v72 + v6) = *(unsigned char *)(v73 + v6);
    uint64_t v131 = v10;
    unint64_t v75 = (v72 + v6) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v76 = (v73 + v6) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v77 = *(void *)(v76 + 8);
    unint64_t v78 = *(void *)(v76 + 16);
    sub_100013D44(v77, v78);
    *(void *)(v75 + 8) = v77;
    *(void *)(v75 + 16) = v78;
    *(unsigned char *)(v75 + 24) = *(unsigned char *)(v76 + 24);
    unint64_t v79 = (v124 + v72) & v22;
    unint64_t v80 = (v124 + v73) & v22;
    v23((void *)v79, (void *)v80, v74);
    uint64_t v81 = (unsigned char *)(v79 + v6);
    *uint64_t v81 = *(unsigned char *)(v80 + v6);
    v81[1] = *(unsigned char *)(v80 + v6 + 1);
    v81[2] = *(unsigned char *)(v80 + v6 + 2);
    uint64_t v82 = (v6 + 10 + v79) & v128;
    uint64_t v83 = (v6 + 10 + v80) & v128;
    v23((void *)v82, (void *)v83, v74);
    *(unsigned char *)(v82 + v6) = *(unsigned char *)(v83 + v6);
    unint64_t v84 = (v82 + v6) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v85 = (v83 + v6) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v86 = *(void *)(v85 + 8);
    unint64_t v87 = *(void *)(v85 + 16);
    sub_100013D44(v86, v87);
    *(void *)(v84 + 8) = v86;
    *(void *)(v84 + 16) = v87;
    *(unsigned char *)(v84 + 24) = *(unsigned char *)(v85 + 24);
    uint64_t v88 = (v6 + 32 + v82) & v128;
    uint64_t v89 = (v6 + 32 + v83) & v128;
    v23((void *)v88, (void *)v89, v74);
    *(unsigned char *)(v88 + v6) = *(unsigned char *)(v89 + v6);
    unint64_t v90 = (v88 + v6) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v91 = (v89 + v6) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v92 = *(void *)(v91 + 8);
    unint64_t v93 = *(void *)(v91 + 16);
    sub_100013D44(v92, v93);
    *(void *)(v90 + 8) = v92;
    *(void *)(v90 + 16) = v93;
    uint64_t v94 = v127;
    *(unsigned char *)(v90 + 24) = *(unsigned char *)(v91 + 24);
    uint64_t v95 = (void *)((v6 + 32 + v89) & v128);
    uint64_t v96 = (void *)((v6 + 32 + v88) & v128);
    *uint64_t v96 = *v95;
    uint64_t v97 = ((unint64_t)v96 + 15) & v128;
    uint64_t v98 = ((unint64_t)v95 + 15) & v128;
    v23((void *)v97, (void *)v98, v74);
    *(unsigned char *)(v97 + v6) = *(unsigned char *)(v98 + v6);
    unint64_t v99 = (v97 + v6) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v100 = (v98 + v6) & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v99 + 8) = *(void *)(v100 + 8);
    *(unsigned char *)(v99 + 16) = *(unsigned char *)(v100 + 16);
    unint64_t v101 = ((unint64_t)v96 + v125) & v22;
    unint64_t v102 = ((unint64_t)v95 + v125) & v22;
    v23((void *)v101, (void *)v102, v74);
    char v103 = (unsigned char *)(v101 + v6);
    *char v103 = *(unsigned char *)(v102 + v6);
    v103[1] = *(unsigned char *)(v102 + v6 + 1);
    v103[2] = *(unsigned char *)(v102 + v6 + 2);
    unint64_t v104 = (v131 + v101) & v22;
    unint64_t v105 = (v131 + v102) & v22;
    v23((void *)v104, (void *)v105, v74);
    uint64_t v106 = (unsigned char *)(v104 + v6);
    *uint64_t v106 = *(unsigned char *)(v105 + v6);
    v106[1] = *(unsigned char *)(v105 + v6 + 1);
    v106[2] = *(unsigned char *)(v105 + v6 + 2);
    unint64_t v107 = (v131 + v104) & v22;
    unint64_t v108 = (v131 + v105) & v22;
    v23((void *)v107, (void *)v108, v74);
    uint64_t v109 = (unsigned char *)(v107 + v6);
    *uint64_t v109 = *(unsigned char *)(v108 + v6);
    v109[1] = *(unsigned char *)(v108 + v6 + 1);
    v109[2] = *(unsigned char *)(v108 + v6 + 2);
    uint64_t v110 = (void *)(((unint64_t)v127 + v126 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v111 = (void *)(((unint64_t)v123 + v126 + 7) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v110 = *v111;
    uint64_t v112 = (void *)(((unint64_t)v110 + 15) & 0xFFFFFFFFFFFFFFF8);
    char v113 = (void *)(((unint64_t)v111 + 15) & 0xFFFFFFFFFFFFFFF8);
    void *v112 = *v113;
    char v114 = (void *)(((unint64_t)v112 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v115 = (void *)(((unint64_t)v113 + 15) & 0xFFFFFFFFFFFFFFF8);
    *char v114 = *v115;
    uint64_t v116 = (void *)(((unint64_t)v114 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v117 = (void *)(((unint64_t)v115 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v116 = *v117;
    *(void *)(((unint64_t)v116 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v117 + 15) & 0xFFFFFFFFFFFFFFF8);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v94;
}

uint64_t sub_1003188AC(uint64_t a1)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  uint64_t v5 = v3 + 8;
  v4(a1, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 56);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 72);
  uint64_t v8 = v6 + 3 + v7;
  uint64_t v40 = v6 + 3;
  v4((v8 + a1) & ~v7, AssociatedTypeWitness);
  uint64_t v9 = (v8 + ((v8 + a1) & ~v7)) & ~v7;
  v4(v9, AssociatedTypeWitness);
  uint64_t v10 = (v8 + v9) & ~v7;
  v4(v10, AssociatedTypeWitness);
  uint64_t v39 = (v7 | 3) + v6 + 3;
  uint64_t v11 = (v39 + v10) & ~(v7 | 3);
  v4(v11, AssociatedTypeWitness);
  uint64_t v35 = v6;
  unint64_t v38 = (v6 & 0xFFFFFFFFFFFFFFFCLL) + 9;
  uint64_t v12 = v7 | 7;
  uint64_t v13 = ((v7 | 7) + v38 + v11) & ~(v7 | 7);
  uint64_t v14 = (v7 | 7) + 1;
  v4((v14 + v13) & ~(v7 | 7), AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  uint64_t v15 = v14 & ~(v7 | 7);
  unint64_t v16 = v6 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v37 = (v6 & 0xFFFFFFFFFFFFFFF8) + 25;
  unint64_t v17 = (v37 + v7 + v15 + v13) & ~v7;
  v4(v17, AssociatedTypeWitness);
  unint64_t v18 = (v8 + v17) & ~v7;
  v4(v18, AssociatedTypeWitness);
  uint64_t v19 = (v39 + v18) & ~(v7 | 3);
  v4(v19, AssociatedTypeWitness);
  unint64_t v20 = (v38 + v7 + v19) & ~v7;
  v4(v20, AssociatedTypeWitness);
  unint64_t v21 = (v8 + v20) & ~v7;
  v4(v21, AssociatedTypeWitness);
  uint64_t v22 = (v7 | 7) + v6 + 3;
  uint64_t v23 = (v12 + v40 + v21) & ~v12;
  v4(v23, AssociatedTypeWitness);
  v16 += 17;
  unint64_t v24 = (v12 + v16 + v23) & ~v12;
  v4(v24, AssociatedTypeWitness);
  uint64_t v36 = v16 + v7;
  unint64_t v25 = (v16 + v7 + v24) & ~v7;
  v4(v25, AssociatedTypeWitness);
  uint64_t v26 = (v22 + v25) & ~(v7 | 7);
  v4(v26, AssociatedTypeWitness);
  uint64_t v27 = v35;
  sub_10000C970(*(void *)(((v26 + v35) & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(((v26 + v35) & 0xFFFFFFFFFFFFFFF8) + 16));
  unint64_t v28 = (v37 + v7 + v26) & ~v7;
  v4(v28, AssociatedTypeWitness);
  uint64_t v29 = (v22 + v28) & ~(v7 | 7);
  v4(v29, AssociatedTypeWitness);
  sub_10000C970(*(void *)(((v29 + v27) & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(((v29 + v27) & 0xFFFFFFFFFFFFFFF8) + 16));
  unint64_t v30 = (v12 + v37 + v29) & ~v12;
  v4(v30, AssociatedTypeWitness);
  sub_10000C970(*(void *)(((v30 + v27) & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(((v30 + v27) & 0xFFFFFFFFFFFFFFF8) + 16));
  uint64_t v31 = ((v7 | 7) + v37 + v30) & ~(v7 | 7);
  v4((v7 + 8 + v31) & ~(v7 | 7), AssociatedTypeWitness);
  uint64_t v32 = (v36 + ((v7 + 8) & ~(v7 | 7)) + v31) & ~v7;
  v4(v32, AssociatedTypeWitness);
  uint64_t v33 = (v8 + v32) & ~v7;
  v4(v33, AssociatedTypeWitness);
  v4((v8 + v33) & ~v7, AssociatedTypeWitness);
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_100318DFC(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 16);
  uint64_t v7 = v5 + 16;
  uint64_t v8 = AssociatedTypeWitness;
  v6(a1, a2);
  uint64_t v9 = *(void *)(v7 + 48);
  uint64_t v10 = (unsigned char *)(v9 + a1);
  uint64_t v119 = a1;
  uint64_t v120 = a2;
  *uint64_t v10 = *(unsigned char *)(v9 + a2);
  v10[1] = *(unsigned char *)(v9 + a2 + 1);
  v10[2] = *(unsigned char *)(v9 + a2 + 2);
  uint64_t v11 = *(unsigned __int8 *)(v7 + 64);
  uint64_t v12 = v9 + 3 + v11;
  uint64_t v13 = (v12 + a1) & ~v11;
  uint64_t v14 = (v12 + a2) & ~v11;
  ((void (*)(uint64_t, uint64_t, uint64_t))v6)(v13, v14, v8);
  uint64_t v15 = (unsigned char *)(v13 + v9);
  *uint64_t v15 = *(unsigned char *)(v14 + v9);
  v15[1] = *(unsigned char *)(v14 + v9 + 1);
  v15[2] = *(unsigned char *)(v14 + v9 + 2);
  uint64_t v16 = (v12 + v13) & ~v11;
  uint64_t v17 = (v12 + v14) & ~v11;
  ((void (*)(uint64_t, uint64_t, uint64_t))v6)(v16, v17, v8);
  unint64_t v18 = (unsigned char *)(v16 + v9);
  unsigned char *v18 = *(unsigned char *)(v17 + v9);
  v18[1] = *(unsigned char *)(v17 + v9 + 1);
  _OWORD v18[2] = *(unsigned char *)(v17 + v9 + 2);
  uint64_t v125 = v12;
  uint64_t v19 = (v12 + v16) & ~v11;
  uint64_t v20 = (v12 + v17) & ~v11;
  uint64_t v21 = v8;
  ((void (*)(uint64_t, uint64_t, uint64_t))v6)(v19, v20, v8);
  uint64_t v22 = (unsigned char *)(v19 + v9);
  *uint64_t v22 = *(unsigned char *)(v20 + v9);
  v22[1] = *(unsigned char *)(v20 + v9 + 1);
  void v22[2] = *(unsigned char *)(v20 + v9 + 2);
  uint64_t v126 = v11 | 3;
  uint64_t v127 = (v11 | 3) + v9 + 3;
  uint64_t v23 = (v127 + v19) & ~(v11 | 3);
  uint64_t v24 = (v127 + v20) & ~(v11 | 3);
  uint64_t v128 = v8;
  ((void (*)(uint64_t, uint64_t, uint64_t))v6)(v23, v24, v8);
  *(unsigned char *)(v23 + v9) = *(unsigned char *)(v24 + v9);
  unint64_t v25 = (v23 + v9) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v26 = (v24 + v9) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v25 + 4) = *(_DWORD *)(v26 + 4);
  *(unsigned char *)(v25 + 8) = *(unsigned char *)(v26 + 8);
  unint64_t v122 = (v9 & 0xFFFFFFFFFFFFFFFCLL) + 9;
  uint64_t v27 = v11 | 7;
  unint64_t v118 = (v11 | 7) + v122;
  unint64_t v28 = (unsigned char *)((v118 + v23) & ~(v11 | 7));
  uint64_t v29 = (unsigned char *)((v118 + v24) & ~(v11 | 7));
  *unint64_t v28 = *v29;
  uint64_t v30 = (v11 | 7) + 1;
  uint64_t v31 = (unint64_t)&v28[v30] & ~(v11 | 7);
  uint64_t v32 = (unint64_t)&v29[v30] & ~(v11 | 7);
  ((void (*)(uint64_t, uint64_t, uint64_t))v6)(v31, v32, v21);
  *(unsigned char *)(v31 + v9) = *(unsigned char *)(v32 + v9);
  unint64_t v33 = (v31 + v9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v34 = (v32 + v9) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v33 + 8) = *(void *)(v34 + 8);
  *(void *)(v33 + 16) = *(void *)(v34 + 16);
  *(unsigned char *)(v33 + 24) = *(unsigned char *)(v34 + 24);
  unint64_t v113 = (v9 & 0xFFFFFFFFFFFFFFF8) + 25;
  uint64_t v124 = v113 + v11;
  uint64_t v117 = v113 + v11 + (v30 & ~(v11 | 7));
  unint64_t v35 = (unint64_t)&v28[v117] & ~v11;
  unint64_t v36 = (unint64_t)&v29[v117] & ~v11;
  swift_bridgeObjectRetain();
  unint64_t v37 = (void (*)(unint64_t, unint64_t, uint64_t))v6;
  ((void (*)(unint64_t, unint64_t, uint64_t))v6)(v35, v36, v128);
  unint64_t v38 = (unsigned char *)(v35 + v9);
  *unint64_t v38 = *(unsigned char *)(v36 + v9);
  v38[1] = *(unsigned char *)(v36 + v9 + 1);
  _OWORD v38[2] = *(unsigned char *)(v36 + v9 + 2);
  unint64_t v39 = (v125 + v35) & ~v11;
  uint64_t v40 = v9 + 3 + v11;
  unint64_t v41 = (v125 + v36) & ~v11;
  v37(v39, v41, v128);
  uint64_t v42 = (unsigned char *)(v39 + v9);
  *uint64_t v42 = *(unsigned char *)(v41 + v9);
  v42[1] = *(unsigned char *)(v41 + v9 + 1);
  v42[2] = *(unsigned char *)(v41 + v9 + 2);
  uint64_t v43 = (v127 + v39) & ~(v11 | 3);
  uint64_t v44 = (v127 + v41) & ~(v11 | 3);
  v37(v43, v44, v128);
  *(unsigned char *)(v43 + v9) = *(unsigned char *)(v44 + v9);
  unint64_t v45 = (v43 + v9) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v46 = (v44 + v9) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v45 + 4) = *(_DWORD *)(v46 + 4);
  *(unsigned char *)(v45 + 8) = *(unsigned char *)(v46 + 8);
  uint64_t v116 = v122 + v11;
  unint64_t v47 = (v122 + v11 + v43) & ~v11;
  unint64_t v48 = (v122 + v11 + v44) & ~v11;
  v37(v47, v48, v128);
  unint64_t v49 = (unsigned char *)(v47 + v9);
  *unint64_t v49 = *(unsigned char *)(v48 + v9);
  v49[1] = *(unsigned char *)(v48 + v9 + 1);
  v49[2] = *(unsigned char *)(v48 + v9 + 2);
  unint64_t v50 = (v40 + v47) & ~v11;
  unint64_t v51 = (v40 + v48) & ~v11;
  v37(v50, v51, v128);
  uint64_t v52 = (unsigned char *)(v50 + v9);
  *uint64_t v52 = *(unsigned char *)(v51 + v9);
  v52[1] = *(unsigned char *)(v51 + v9 + 1);
  void v52[2] = *(unsigned char *)(v51 + v9 + 2);
  uint64_t v53 = (v27 + v9 + 3 + v50) & ~v27;
  uint64_t v54 = (v27 + v9 + 3 + v51) & ~v27;
  v37(v53, v54, v128);
  *(unsigned char *)(v53 + v9) = *(unsigned char *)(v54 + v9);
  unint64_t v55 = (v53 + v9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v56 = (v54 + v9) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v55 + 8) = *(void *)(v56 + 8);
  *(unsigned char *)(v55 + 16) = *(unsigned char *)(v56 + 16);
  unint64_t v57 = (v9 & 0xFFFFFFFFFFFFFFF8) + 17;
  unint64_t v115 = (v11 | 7) + v57;
  uint64_t v58 = (v115 + v53) & ~(v11 | 7);
  uint64_t v59 = (v115 + v54) & ~(v11 | 7);
  v37(v58, v59, v128);
  *(unsigned char *)(v58 + v9) = *(unsigned char *)(v59 + v9);
  unint64_t v60 = (v58 + v9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v61 = (v59 + v9) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v60 + 8) = *(void *)(v61 + 8);
  *(unsigned char *)(v60 + 16) = *(unsigned char *)(v61 + 16);
  uint64_t v121 = v57 + v11;
  unint64_t v62 = (v57 + v11 + v58) & ~v11;
  unint64_t v63 = (v57 + v11 + v59) & ~v11;
  uint64_t v129 = v37;
  v37(v62, v63, v128);
  unint64_t v64 = (unsigned char *)(v62 + v9);
  unsigned char *v64 = *(unsigned char *)(v63 + v9);
  v64[1] = *(unsigned char *)(v63 + v9 + 1);
  v64[2] = *(unsigned char *)(v63 + v9 + 2);
  uint64_t v123 = (v11 | 7) + v9 + 3;
  uint64_t v65 = (v123 + v62) & ~(v11 | 7);
  uint64_t v66 = (v123 + v63) & ~(v11 | 7);
  v37(v65, v66, v128);
  *(unsigned char *)(v65 + v9) = *(unsigned char *)(v66 + v9);
  unint64_t v67 = (v65 + v9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v68 = (v66 + v9) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v69 = *(void *)(v68 + 8);
  unint64_t v70 = *(void *)(v68 + 16);
  sub_100013D44(v69, v70);
  *(void *)(v67 + 8) = v69;
  *(void *)(v67 + 16) = v70;
  *(unsigned char *)(v67 + 24) = *(unsigned char *)(v68 + 24);
  unint64_t v71 = (v113 + v11 + v65) & ~v11;
  unint64_t v72 = (v113 + v11 + v66) & ~v11;
  v129(v71, v72, v128);
  uint64_t v73 = (unsigned char *)(v71 + v9);
  *uint64_t v73 = *(unsigned char *)(v72 + v9);
  v73[1] = *(unsigned char *)(v72 + v9 + 1);
  v73[2] = *(unsigned char *)(v72 + v9 + 2);
  uint64_t v74 = (v123 + v71) & ~(v11 | 7);
  uint64_t v75 = (v123 + v72) & ~(v11 | 7);
  v129(v74, v75, v128);
  *(unsigned char *)(v74 + v9) = *(unsigned char *)(v75 + v9);
  unint64_t v76 = (v74 + v9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v77 = (v75 + v9) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v78 = *(void *)(v77 + 8);
  unint64_t v79 = *(void *)(v77 + 16);
  sub_100013D44(v78, v79);
  *(void *)(v76 + 8) = v78;
  *(void *)(v76 + 16) = v79;
  *(unsigned char *)(v76 + 24) = *(unsigned char *)(v77 + 24);
  unint64_t v80 = (v27 + v113 + v74) & ~v27;
  unint64_t v81 = (v27 + v113 + v75) & ~v27;
  v129(v80, v81, v128);
  *(unsigned char *)(v80 + v9) = *(unsigned char *)(v81 + v9);
  unint64_t v82 = (v80 + v9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v83 = (v81 + v9) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v84 = *(void *)(v83 + 8);
  unint64_t v85 = *(void *)(v83 + 16);
  sub_100013D44(v84, v85);
  *(void *)(v82 + 8) = v84;
  *(void *)(v82 + 16) = v85;
  *(unsigned char *)(v82 + 24) = *(unsigned char *)(v83 + 24);
  unint64_t v114 = (v11 | 7) + v113;
  uint64_t v86 = (void *)((v114 + v80) & ~(v11 | 7));
  unint64_t v87 = (void *)((v114 + v81) & ~(v11 | 7));
  *uint64_t v86 = *v87;
  uint64_t v88 = ((unint64_t)v86 + v11 + 8) & ~(v11 | 7);
  uint64_t v89 = ((unint64_t)v87 + v11 + 8) & ~(v11 | 7);
  v129(((unint64_t)v86 + v11 + 8) & ~v27, ((unint64_t)v87 + v11 + 8) & ~v27, v128);
  *(unsigned char *)(v88 + v9) = *(unsigned char *)(v89 + v9);
  unint64_t v90 = (v88 + v9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v91 = (v89 + v9) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v90 + 8) = *(void *)(v91 + 8);
  *(unsigned char *)(v90 + 16) = *(unsigned char *)(v91 + 16);
  uint64_t v92 = v121 + ((v11 + 8) & ~(v11 | 7));
  unint64_t v93 = ((unint64_t)v86 + v92) & ~v11;
  unint64_t v94 = ((unint64_t)v87 + v92) & ~v11;
  v129(v93, v94, v128);
  uint64_t v95 = (unsigned char *)(v93 + v9);
  *uint64_t v95 = *(unsigned char *)(v94 + v9);
  v95[1] = *(unsigned char *)(v94 + v9 + 1);
  v95[2] = *(unsigned char *)(v94 + v9 + 2);
  uint64_t v96 = v9 + 3 + v11;
  unint64_t v97 = (v125 + v93) & ~v11;
  unint64_t v98 = (v125 + v94) & ~v11;
  v129(v97, v98, v128);
  unint64_t v99 = (unsigned char *)(v97 + v9);
  *unint64_t v99 = *(unsigned char *)(v98 + v9);
  v99[1] = *(unsigned char *)(v98 + v9 + 1);
  v99[2] = *(unsigned char *)(v98 + v9 + 2);
  unint64_t v100 = (v96 + v97) & ~v11;
  unint64_t v101 = (v96 + v98) & ~v11;
  v129(v100, v101, v128);
  unint64_t v102 = (unsigned char *)(v100 + v9);
  *unint64_t v102 = *(unsigned char *)(v101 + v9);
  v102[1] = *(unsigned char *)(v101 + v9 + 1);
  v102[2] = *(unsigned char *)(v101 + v9 + 2);
  uint64_t v103 = ((v96
         + ((v96
           + ((v92
             + ((v114
               + ((v114
                 + ((v123
                   + ((v124
                     + ((v123
                       + ((v121
                         + ((v115
                           + ((v123
                             + ((v96
                               + ((v116
                                 + ((v127
                                   + ((v96
                                     + ((v117
                                       + ((v118 + ((v127 + ((v96 + ((v96 + (v96 & ~v11)) & ~v11)) & ~v11)) & ~v126)) & ~v27)) & ~v11)) & ~v11)) & ~v126)) & ~v11)) & ~v11)) & ~v27)) & ~v27)) & ~v11)) & ~v27)) & ~v11)) & ~v27)) & ~v27)) & ~v27)) & ~v11)) & ~v11)) & ~v11)
       + v9
       + 3
       + 7;
  unint64_t v104 = (void *)((v103 + v119) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v105 = (void *)((v103 + v120) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v104 = *v105;
  uint64_t v106 = (void *)(((unint64_t)v104 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v107 = (void *)(((unint64_t)v105 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v106 = *v107;
  unint64_t v108 = (void *)(((unint64_t)v106 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v109 = (void *)(((unint64_t)v107 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v108 = *v109;
  uint64_t v110 = (void *)(((unint64_t)v108 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v111 = (void *)(((unint64_t)v109 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v110 = *v111;
  *(void *)(((unint64_t)v110 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v111 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return v119;
}

uint64_t sub_100319814(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 24);
  uint64_t v7 = v5 + 24;
  uint64_t v8 = AssociatedTypeWitness;
  v6(a1, a2);
  uint64_t v9 = *(void *)(v7 + 40);
  uint64_t v10 = (unsigned char *)(v9 + a1);
  uint64_t v122 = a1;
  uint64_t v123 = a2;
  *uint64_t v10 = *(unsigned char *)(v9 + a2);
  v10[1] = *(unsigned char *)(v9 + a2 + 1);
  v10[2] = *(unsigned char *)(v9 + a2 + 2);
  uint64_t v11 = *(unsigned __int8 *)(v7 + 56);
  uint64_t v12 = v9 + 3 + v11;
  uint64_t v13 = (v12 + a1) & ~v11;
  uint64_t v14 = (v12 + a2) & ~v11;
  ((void (*)(uint64_t, uint64_t, uint64_t))v6)(v13, v14, v8);
  uint64_t v15 = (unsigned char *)(v13 + v9);
  *uint64_t v15 = *(unsigned char *)(v14 + v9);
  v15[1] = *(unsigned char *)(v14 + v9 + 1);
  v15[2] = *(unsigned char *)(v14 + v9 + 2);
  uint64_t v16 = (v12 + v13) & ~v11;
  uint64_t v17 = (v12 + v14) & ~v11;
  ((void (*)(uint64_t, uint64_t, uint64_t))v6)(v16, v17, v8);
  unint64_t v18 = (unsigned char *)(v16 + v9);
  unsigned char *v18 = *(unsigned char *)(v17 + v9);
  v18[1] = *(unsigned char *)(v17 + v9 + 1);
  _OWORD v18[2] = *(unsigned char *)(v17 + v9 + 2);
  uint64_t v19 = (v12 + v16) & ~v11;
  uint64_t v20 = (v12 + v17) & ~v11;
  uint64_t v131 = v8;
  ((void (*)(uint64_t, uint64_t, uint64_t))v6)(v19, v20, v8);
  uint64_t v21 = (unsigned char *)(v19 + v9);
  *uint64_t v21 = *(unsigned char *)(v20 + v9);
  v21[1] = *(unsigned char *)(v20 + v9 + 1);
  void v21[2] = *(unsigned char *)(v20 + v9 + 2);
  uint64_t v128 = v11 | 3;
  uint64_t v129 = (v11 | 3) + v9 + 3;
  uint64_t v22 = (v129 + v19) & ~(v11 | 3);
  uint64_t v23 = (v129 + v20) & ~(v11 | 3);
  ((void (*)(uint64_t, uint64_t, uint64_t))v6)(v22, v23, v8);
  uint64_t v130 = (void (*)(unint64_t, unint64_t, uint64_t))v6;
  *(unsigned char *)(v22 + v9) = *(unsigned char *)(v23 + v9);
  unint64_t v24 = (v22 + v9) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v25 = (v23 + v9) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v24 + 4) = *(_DWORD *)(v25 + 4);
  *(unsigned char *)(v24 + 8) = *(unsigned char *)(v25 + 8);
  unint64_t v125 = (v9 & 0xFFFFFFFFFFFFFFFCLL) + 9;
  uint64_t v26 = v11 | 7;
  unint64_t v121 = (v11 | 7) + v125;
  uint64_t v27 = (unsigned char *)((v121 + v22) & ~(v11 | 7));
  unint64_t v28 = (unsigned char *)((v121 + v23) & ~(v11 | 7));
  *uint64_t v27 = *v28;
  uint64_t v29 = (v11 | 7) + 1;
  uint64_t v30 = (unint64_t)&v27[v29] & ~(v11 | 7);
  uint64_t v31 = (unint64_t)&v28[v29] & ~(v11 | 7);
  ((void (*)(uint64_t, uint64_t, uint64_t))v6)(v30, v31, v131);
  uint64_t v32 = v31 + v9;
  *(unsigned char *)(v30 + v9) = *(unsigned char *)(v31 + v9);
  unint64_t v33 = (v30 + v9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v34 = v32 & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v33 + 8) = *(void *)((v32 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(void *)(v33 + 16) = *(void *)((v32 & 0xFFFFFFFFFFFFFFF8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v33 + 24) = *(unsigned char *)(v34 + 24);
  unint64_t v116 = (v9 & 0xFFFFFFFFFFFFFFF8) + 25;
  uint64_t v127 = v116 + v11;
  uint64_t v120 = v116 + v11 + (v29 & ~(v11 | 7));
  unint64_t v35 = (unint64_t)&v27[v120] & ~v11;
  unint64_t v36 = (unint64_t)&v28[v120] & ~v11;
  v130(v35, v36, v131);
  unint64_t v37 = (unsigned char *)(v35 + v9);
  *unint64_t v37 = *(unsigned char *)(v36 + v9);
  v37[1] = *(unsigned char *)(v36 + v9 + 1);
  v37[2] = *(unsigned char *)(v36 + v9 + 2);
  unint64_t v38 = (v12 + v35) & ~v11;
  unint64_t v39 = (v12 + v36) & ~v11;
  v130(v38, v39, v131);
  uint64_t v40 = (unsigned char *)(v38 + v9);
  *uint64_t v40 = *(unsigned char *)(v39 + v9);
  v40[1] = *(unsigned char *)(v39 + v9 + 1);
  _OWORD v40[2] = *(unsigned char *)(v39 + v9 + 2);
  uint64_t v41 = (v129 + v38) & ~(v11 | 3);
  uint64_t v42 = (v129 + v39) & ~(v11 | 3);
  v130(v41, v42, v131);
  *(unsigned char *)(v41 + v9) = *(unsigned char *)(v42 + v9);
  unint64_t v43 = (v41 + v9) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v44 = (v42 + v9) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v43 + 4) = *(_DWORD *)(v44 + 4);
  *(unsigned char *)(v43 + 8) = *(unsigned char *)(v44 + 8);
  uint64_t v119 = v125 + v11;
  unint64_t v45 = (v125 + v11 + v41) & ~v11;
  unint64_t v46 = (v125 + v11 + v42) & ~v11;
  v130(v45, v46, v131);
  unint64_t v47 = (unsigned char *)(v45 + v9);
  *unint64_t v47 = *(unsigned char *)(v46 + v9);
  v47[1] = *(unsigned char *)(v46 + v9 + 1);
  v47[2] = *(unsigned char *)(v46 + v9 + 2);
  unint64_t v48 = (v12 + v45) & ~v11;
  unint64_t v49 = (v12 + v46) & ~v11;
  v130(v48, v49, v131);
  unint64_t v50 = (unsigned char *)(v48 + v9);
  *unint64_t v50 = *(unsigned char *)(v49 + v9);
  v50[1] = *(unsigned char *)(v49 + v9 + 1);
  v50[2] = *(unsigned char *)(v49 + v9 + 2);
  uint64_t v51 = (v26 + v9 + 3 + v48) & ~v26;
  uint64_t v52 = (v26 + v9 + 3 + v49) & ~v26;
  v130(v51, v52, v131);
  *(unsigned char *)(v51 + v9) = *(unsigned char *)(v52 + v9);
  unint64_t v53 = (v51 + v9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v54 = (v52 + v9) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v53 + 8) = *(void *)(v54 + 8);
  *(unsigned char *)(v53 + 16) = *(unsigned char *)(v54 + 16);
  unint64_t v55 = (v9 & 0xFFFFFFFFFFFFFFF8) + 17;
  unint64_t v118 = (v11 | 7) + v55;
  uint64_t v56 = (v118 + v51) & ~(v11 | 7);
  uint64_t v57 = (v118 + v52) & ~(v11 | 7);
  v130(v56, v57, v131);
  *(unsigned char *)(v56 + v9) = *(unsigned char *)(v57 + v9);
  unint64_t v58 = (v56 + v9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v59 = (v57 + v9) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v58 + 8) = *(void *)(v59 + 8);
  *(unsigned char *)(v58 + 16) = *(unsigned char *)(v59 + 16);
  uint64_t v124 = v55 + v11;
  unint64_t v60 = (v55 + v11 + v56) & ~v11;
  unint64_t v61 = (v55 + v11 + v57) & ~v11;
  v130(v60, v61, v131);
  unint64_t v62 = (unsigned char *)(v60 + v9);
  unsigned char *v62 = *(unsigned char *)(v61 + v9);
  v62[1] = *(unsigned char *)(v61 + v9 + 1);
  v62[2] = *(unsigned char *)(v61 + v9 + 2);
  uint64_t v126 = (v11 | 7) + v9 + 3;
  uint64_t v63 = (v126 + v60) & ~(v11 | 7);
  uint64_t v64 = (v126 + v61) & ~(v11 | 7);
  v130(v63, v64, v131);
  *(unsigned char *)(v63 + v9) = *(unsigned char *)(v64 + v9);
  unint64_t v65 = (v63 + v9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v66 = (v64 + v9) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v67 = *(void *)(v66 + 8);
  unint64_t v68 = *(void *)(v66 + 16);
  sub_100013D44(v67, v68);
  uint64_t v69 = *(void *)(v65 + 8);
  unint64_t v70 = *(void *)(v65 + 16);
  *(void *)(v65 + 8) = v67;
  *(void *)(v65 + 16) = v68;
  sub_10000C970(v69, v70);
  *(unsigned char *)(v65 + 24) = *(unsigned char *)(v66 + 24);
  unint64_t v71 = (v116 + v11 + v63) & ~v11;
  unint64_t v72 = (v116 + v11 + v64) & ~v11;
  v130(v71, v72, v131);
  uint64_t v73 = (unsigned char *)(v71 + v9);
  *uint64_t v73 = *(unsigned char *)(v72 + v9);
  v73[1] = *(unsigned char *)(v72 + v9 + 1);
  v73[2] = *(unsigned char *)(v72 + v9 + 2);
  uint64_t v74 = (v126 + v71) & ~(v11 | 7);
  uint64_t v75 = (v126 + v72) & ~(v11 | 7);
  v130(v74, v75, v131);
  *(unsigned char *)(v74 + v9) = *(unsigned char *)(v75 + v9);
  unint64_t v76 = (v74 + v9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v77 = (v75 + v9) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v78 = *(void *)(v77 + 8);
  unint64_t v79 = *(void *)(v77 + 16);
  sub_100013D44(v78, v79);
  uint64_t v80 = *(void *)(v76 + 8);
  unint64_t v81 = *(void *)(v76 + 16);
  *(void *)(v76 + 8) = v78;
  *(void *)(v76 + 16) = v79;
  sub_10000C970(v80, v81);
  *(unsigned char *)(v76 + 24) = *(unsigned char *)(v77 + 24);
  unint64_t v82 = (v26 + v116 + v74) & ~v26;
  unint64_t v83 = (v26 + v116 + v75) & ~v26;
  v130(v82, v83, v131);
  *(unsigned char *)(v82 + v9) = *(unsigned char *)(v83 + v9);
  unint64_t v84 = (v82 + v9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v85 = (v83 + v9) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v86 = *(void *)(v85 + 8);
  unint64_t v87 = *(void *)(v85 + 16);
  sub_100013D44(v86, v87);
  uint64_t v88 = *(void *)(v84 + 8);
  unint64_t v89 = *(void *)(v84 + 16);
  *(void *)(v84 + 8) = v86;
  *(void *)(v84 + 16) = v87;
  sub_10000C970(v88, v89);
  *(unsigned char *)(v84 + 24) = *(unsigned char *)(v85 + 24);
  unint64_t v117 = (v11 | 7) + v116;
  unint64_t v90 = (void *)((v117 + v82) & ~(v11 | 7));
  unint64_t v91 = (void *)((v117 + v83) & ~(v11 | 7));
  void *v90 = *v91;
  uint64_t v92 = ((unint64_t)v90 + v11 + 8) & ~(v11 | 7);
  uint64_t v93 = ((unint64_t)v91 + v11 + 8) & ~(v11 | 7);
  v130(((unint64_t)v90 + v11 + 8) & ~v26, ((unint64_t)v91 + v11 + 8) & ~v26, v131);
  *(unsigned char *)(v92 + v9) = *(unsigned char *)(v93 + v9);
  unint64_t v94 = (v92 + v9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v95 = (v93 + v9) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v94 + 8) = *(void *)(v95 + 8);
  *(unsigned char *)(v94 + 16) = *(unsigned char *)(v95 + 16);
  uint64_t v96 = v124 + ((v11 + 8) & ~(v11 | 7));
  unint64_t v97 = ((unint64_t)v90 + v96) & ~v11;
  unint64_t v98 = ((unint64_t)v91 + v96) & ~v11;
  v130(v97, v98, v131);
  unint64_t v99 = (unsigned char *)(v97 + v9);
  *unint64_t v99 = *(unsigned char *)(v98 + v9);
  v99[1] = *(unsigned char *)(v98 + v9 + 1);
  v99[2] = *(unsigned char *)(v98 + v9 + 2);
  unint64_t v100 = (v12 + v97) & ~v11;
  unint64_t v101 = (v12 + v98) & ~v11;
  v130(v100, v101, v131);
  unint64_t v102 = (unsigned char *)(v100 + v9);
  *unint64_t v102 = *(unsigned char *)(v101 + v9);
  v102[1] = *(unsigned char *)(v101 + v9 + 1);
  v102[2] = *(unsigned char *)(v101 + v9 + 2);
  unint64_t v103 = (v12 + v100) & ~v11;
  unint64_t v104 = (v12 + v101) & ~v11;
  v130(v103, v104, v131);
  unint64_t v105 = (unsigned char *)(v103 + v9);
  *unint64_t v105 = *(unsigned char *)(v104 + v9);
  v105[1] = *(unsigned char *)(v104 + v9 + 1);
  v105[2] = *(unsigned char *)(v104 + v9 + 2);
  uint64_t v106 = ((v12
         + ((v12
           + ((v96
             + ((v117
               + ((v117
                 + ((v126
                   + ((v127
                     + ((v126
                       + ((v124
                         + ((v118
                           + ((v126
                             + ((v12
                               + ((v119
                                 + ((v129
                                   + ((v12
                                     + ((v120
                                       + ((v121 + ((v129 + ((v12 + ((v12 + (v12 & ~v11)) & ~v11)) & ~v11)) & ~v128)) & ~v26)) & ~v11)) & ~v11)) & ~v128)) & ~v11)) & ~v11)) & ~v26)) & ~v26)) & ~v11)) & ~v26)) & ~v11)) & ~v26)) & ~v26)) & ~v26)) & ~v11)) & ~v11)) & ~v11)
       + v9
       + 3
       + 7;
  unint64_t v107 = (void *)((v106 + v122) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v108 = v106 + v123;
  unint64_t v109 = (v108 & 0xFFFFFFFFFFFFFFF8) + 15;
  *unint64_t v107 = *(void *)(v108 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  uint64_t v110 = (void *)(((unint64_t)v107 + 15) & 0xFFFFFFFFFFFFFFF8);
  v109 &= 0xFFFFFFFFFFFFFFF8;
  *uint64_t v110 = *(void *)v109;
  swift_retain();
  swift_release();
  uint64_t v111 = (void *)(((unint64_t)v110 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v112 = (void *)((v109 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v111 = *v112;
  swift_retain();
  swift_release();
  unint64_t v113 = (void *)(((unint64_t)v111 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v114 = (void *)(((unint64_t)v112 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v113 = *v114;
  swift_retain();
  swift_release();
  *(void *)(((unint64_t)v113 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v114 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return v122;
}

uint64_t sub_10031A27C(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  uint64_t v7 = v5 + 32;
  uint64_t v8 = a2;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v9 = v6;
  uint64_t v10 = *(void *)(v7 + 32);
  uint64_t v11 = (unsigned char *)(v10 + a1);
  uint64_t v116 = a1;
  uint64_t v117 = v8;
  uint64_t v12 = v8;
  unsigned char *v11 = *(unsigned char *)(v10 + v8);
  v11[1] = *(unsigned char *)(v10 + v8 + 1);
  v11[2] = *(unsigned char *)(v10 + v8 + 2);
  uint64_t v13 = *(unsigned __int8 *)(v7 + 48);
  uint64_t v14 = v10 + 3 + v13;
  uint64_t v15 = (v14 + a1) & ~v13;
  uint64_t v16 = (v14 + v12) & ~v13;
  uint64_t v17 = v9;
  v9(v15, v16, AssociatedTypeWitness);
  unint64_t v18 = (unsigned char *)(v15 + v10);
  unsigned char *v18 = *(unsigned char *)(v16 + v10);
  v18[1] = *(unsigned char *)(v16 + v10 + 1);
  _OWORD v18[2] = *(unsigned char *)(v16 + v10 + 2);
  uint64_t v19 = (v14 + v15) & ~v13;
  uint64_t v20 = (v14 + v16) & ~v13;
  v17(v19, v20, AssociatedTypeWitness);
  uint64_t v21 = (unsigned char *)(v19 + v10);
  *uint64_t v21 = *(unsigned char *)(v20 + v10);
  v21[1] = *(unsigned char *)(v20 + v10 + 1);
  void v21[2] = *(unsigned char *)(v20 + v10 + 2);
  uint64_t v22 = (v14 + v19) & ~v13;
  uint64_t v23 = (v14 + v20) & ~v13;
  v17(v22, v23, AssociatedTypeWitness);
  unint64_t v118 = v17;
  unint64_t v24 = (unsigned char *)(v22 + v10);
  *unint64_t v24 = *(unsigned char *)(v23 + v10);
  v24[1] = *(unsigned char *)(v23 + v10 + 1);
  v24[2] = *(unsigned char *)(v23 + v10 + 2);
  uint64_t v120 = (v13 | 3) + v10 + 3;
  uint64_t v25 = (v120 + v22) & ~(v13 | 3);
  uint64_t v26 = (v120 + v23) & ~(v13 | 3);
  v17(v25, v26, AssociatedTypeWitness);
  *(unsigned char *)(v25 + v10) = *(unsigned char *)(v26 + v10);
  unint64_t v27 = (v25 + v10) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v28 = (v26 + v10) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v27 + 4) = *(_DWORD *)(v28 + 4);
  *(unsigned char *)(v27 + 8) = *(unsigned char *)(v28 + 8);
  unint64_t v112 = (v10 & 0xFFFFFFFFFFFFFFFCLL) + 9;
  uint64_t v29 = v13 | 7;
  unint64_t v115 = (v13 | 7) + v112;
  uint64_t v30 = (unsigned char *)((v115 + v25) & ~(v13 | 7));
  uint64_t v31 = (unsigned char *)((v115 + v26) & ~(v13 | 7));
  *uint64_t v30 = *v31;
  uint64_t v32 = (v13 | 7) + 1;
  uint64_t v33 = (unint64_t)&v30[v32] & ~(v13 | 7);
  uint64_t v34 = (unint64_t)&v31[v32] & ~(v13 | 7);
  v118(v33, v34, AssociatedTypeWitness);
  *(unsigned char *)(v33 + v10) = *(unsigned char *)(v34 + v10);
  unint64_t v35 = (v33 + v10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v36 = (v34 + v10) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)(v35 + 8) = *(_OWORD *)(v36 + 8);
  *(unsigned char *)(v35 + 24) = *(unsigned char *)(v36 + 24);
  unint64_t v109 = (v10 & 0xFFFFFFFFFFFFFFF8) + 25;
  uint64_t v119 = v109 + v13;
  uint64_t v114 = v109 + v13 + (v32 & ~(v13 | 7));
  unint64_t v37 = (unint64_t)&v30[v114] & ~v13;
  unint64_t v38 = (unint64_t)&v31[v114] & ~v13;
  v118(v37, v38, AssociatedTypeWitness);
  unint64_t v39 = (unsigned char *)(v37 + v10);
  *unint64_t v39 = *(unsigned char *)(v38 + v10);
  v39[1] = *(unsigned char *)(v38 + v10 + 1);
  v39[2] = *(unsigned char *)(v38 + v10 + 2);
  unint64_t v40 = (v14 + v37) & ~v13;
  unint64_t v41 = (v14 + v38) & ~v13;
  v118(v40, v41, AssociatedTypeWitness);
  uint64_t v42 = (unsigned char *)(v40 + v10);
  *uint64_t v42 = *(unsigned char *)(v41 + v10);
  v42[1] = *(unsigned char *)(v41 + v10 + 1);
  v42[2] = *(unsigned char *)(v41 + v10 + 2);
  uint64_t v43 = (v120 + v40) & ~(v13 | 3);
  uint64_t v44 = (v120 + v41) & ~(v13 | 3);
  v118(v43, v44, AssociatedTypeWitness);
  *(unsigned char *)(v43 + v10) = *(unsigned char *)(v44 + v10);
  unint64_t v45 = (v43 + v10) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v46 = (v44 + v10) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v45 + 4) = *(_DWORD *)(v46 + 4);
  *(unsigned char *)(v45 + 8) = *(unsigned char *)(v46 + 8);
  uint64_t v113 = v112 + v13;
  uint64_t v47 = (v113 + v43) & ~v13;
  uint64_t v48 = (v113 + v44) & ~v13;
  v118(v47, v48, AssociatedTypeWitness);
  unint64_t v49 = (unsigned char *)(v47 + v10);
  *unint64_t v49 = *(unsigned char *)(v48 + v10);
  v49[1] = *(unsigned char *)(v48 + v10 + 1);
  v49[2] = *(unsigned char *)(v48 + v10 + 2);
  uint64_t v50 = (v14 + v47) & ~v13;
  uint64_t v51 = (v14 + v48) & ~v13;
  v118(v50, v51, AssociatedTypeWitness);
  uint64_t v52 = (unsigned char *)(v50 + v10);
  *uint64_t v52 = *(unsigned char *)(v51 + v10);
  v52[1] = *(unsigned char *)(v51 + v10 + 1);
  void v52[2] = *(unsigned char *)(v51 + v10 + 2);
  uint64_t v53 = (v13 | 7) + v10 + 3;
  uint64_t v54 = (v29 + v10 + 3 + v50) & ~v29;
  uint64_t v55 = (v29 + v10 + 3 + v51) & ~v29;
  v118(v54, v55, AssociatedTypeWitness);
  *(unsigned char *)(v54 + v10) = *(unsigned char *)(v55 + v10);
  unint64_t v56 = (v54 + v10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v57 = (v55 + v10) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v56 + 8) = *(void *)(v57 + 8);
  *(unsigned char *)(v56 + 16) = *(unsigned char *)(v57 + 16);
  unint64_t v58 = (v10 & 0xFFFFFFFFFFFFFFF8) + 17;
  unint64_t v111 = (v13 | 7) + v58;
  uint64_t v59 = (v111 + v54) & ~(v13 | 7);
  uint64_t v60 = (v111 + v55) & ~(v13 | 7);
  v118(v59, v60, AssociatedTypeWitness);
  *(unsigned char *)(v59 + v10) = *(unsigned char *)(v60 + v10);
  unint64_t v61 = (v59 + v10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v62 = (v60 + v10) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v61 + 8) = *(void *)(v62 + 8);
  *(unsigned char *)(v61 + 16) = *(unsigned char *)(v62 + 16);
  unint64_t v63 = (v58 + v13 + v59) & ~v13;
  unint64_t v64 = (v58 + v13 + v60) & ~v13;
  v118(v63, v64, AssociatedTypeWitness);
  unint64_t v65 = (unsigned char *)(v63 + v10);
  *unint64_t v65 = *(unsigned char *)(v64 + v10);
  v65[1] = *(unsigned char *)(v64 + v10 + 1);
  v65[2] = *(unsigned char *)(v64 + v10 + 2);
  uint64_t v66 = (v53 + v63) & ~(v13 | 7);
  uint64_t v67 = (v53 + v64) & ~(v13 | 7);
  v118(v66, v67, AssociatedTypeWitness);
  *(unsigned char *)(v66 + v10) = *(unsigned char *)(v67 + v10);
  unint64_t v68 = (v66 + v10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v69 = (v67 + v10) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)(v68 + 8) = *(_OWORD *)(v69 + 8);
  *(unsigned char *)(v68 + 24) = *(unsigned char *)(v69 + 24);
  unint64_t v70 = (v109 + v13 + v66) & ~v13;
  unint64_t v71 = (v109 + v13 + v67) & ~v13;
  v118(v70, v71, AssociatedTypeWitness);
  unint64_t v72 = (unsigned char *)(v70 + v10);
  *unint64_t v72 = *(unsigned char *)(v71 + v10);
  v72[1] = *(unsigned char *)(v71 + v10 + 1);
  v72[2] = *(unsigned char *)(v71 + v10 + 2);
  uint64_t v73 = (v53 + v70) & ~(v13 | 7);
  uint64_t v74 = (v53 + v71) & ~(v13 | 7);
  v118(v73, v74, AssociatedTypeWitness);
  *(unsigned char *)(v73 + v10) = *(unsigned char *)(v74 + v10);
  unint64_t v75 = (v73 + v10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v76 = (v74 + v10) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)(v75 + 8) = *(_OWORD *)(v76 + 8);
  *(unsigned char *)(v75 + 24) = *(unsigned char *)(v76 + 24);
  unint64_t v77 = (v29 + v109 + v73) & ~v29;
  unint64_t v78 = (v29 + v109 + v74) & ~v29;
  v118(v77, v78, AssociatedTypeWitness);
  *(unsigned char *)(v77 + v10) = *(unsigned char *)(v78 + v10);
  unint64_t v79 = (v77 + v10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v80 = (v78 + v10) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)(v79 + 8) = *(_OWORD *)(v80 + 8);
  *(unsigned char *)(v79 + 24) = *(unsigned char *)(v80 + 24);
  unint64_t v110 = (v13 | 7) + v109;
  unint64_t v81 = (void *)((v110 + v77) & ~(v13 | 7));
  unint64_t v82 = (void *)((v110 + v78) & ~(v13 | 7));
  *unint64_t v81 = *v82;
  uint64_t v83 = ((unint64_t)v81 + v13 + 8) & ~(v13 | 7);
  uint64_t v84 = ((unint64_t)v82 + v13 + 8) & ~(v13 | 7);
  v118(((unint64_t)v81 + v13 + 8) & ~v29, ((unint64_t)v82 + v13 + 8) & ~v29, AssociatedTypeWitness);
  *(unsigned char *)(v83 + v10) = *(unsigned char *)(v84 + v10);
  unint64_t v85 = (v83 + v10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v86 = (v84 + v10) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v85 + 8) = *(void *)(v86 + 8);
  *(unsigned char *)(v85 + 16) = *(unsigned char *)(v86 + 16);
  uint64_t v87 = v58 + v13 + ((v13 + 8) & ~(v13 | 7));
  unint64_t v88 = ((unint64_t)v81 + v87) & ~v13;
  unint64_t v89 = ((unint64_t)v82 + v87) & ~v13;
  v118(v88, v89, AssociatedTypeWitness);
  unint64_t v90 = (unsigned char *)(v88 + v10);
  unsigned char *v90 = *(unsigned char *)(v89 + v10);
  v90[1] = *(unsigned char *)(v89 + v10 + 1);
  v90[2] = *(unsigned char *)(v89 + v10 + 2);
  unint64_t v91 = (v14 + v88) & ~v13;
  unint64_t v92 = (v14 + v89) & ~v13;
  v118(v91, v92, AssociatedTypeWitness);
  uint64_t v93 = (unsigned char *)(v91 + v10);
  unsigned char *v93 = *(unsigned char *)(v92 + v10);
  v93[1] = *(unsigned char *)(v92 + v10 + 1);
  v93[2] = *(unsigned char *)(v92 + v10 + 2);
  unint64_t v94 = (v14 + v91) & ~v13;
  unint64_t v95 = (v14 + v92) & ~v13;
  v118(v94, v95, AssociatedTypeWitness);
  uint64_t v96 = (unsigned char *)(v94 + v10);
  *uint64_t v96 = *(unsigned char *)(v95 + v10);
  v96[1] = *(unsigned char *)(v95 + v10 + 1);
  v96[2] = *(unsigned char *)(v95 + v10 + 2);
  uint64_t v97 = v13 | 3;
  uint64_t v98 = (v13 | 7) + v10 + 3;
  uint64_t v99 = ((v14
        + ((v14
          + ((v58
            + v13
            + ((v13 + 8) & ~(v13 | 7))
            + ((v110
              + ((v110
                + ((v98
                  + ((v119
                    + ((v98
                      + ((v58
                        + v13
                        + ((v111
                          + ((v98
                            + ((v14
                              + ((v113
                                + ((v120
                                  + ((v14
                                    + ((v114
                                      + ((v115 + ((v120 + ((v14 + ((v14 + (v14 & ~v13)) & ~v13)) & ~v13)) & ~v97)) & ~v29)) & ~v13)) & ~v13)) & ~v97)) & ~v13)) & ~v13)) & ~v29)) & ~v29)) & ~v13)) & ~v29)) & ~v13)) & ~v29)) & ~v29)) & ~v29)) & ~v13)) & ~v13)) & ~v13)
      + v10
      + 3
      + 7;
  uint64_t result = v116;
  unint64_t v101 = (void *)((v99 + v116) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v102 = (void *)((v99 + v117) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v101 = *v102;
  unint64_t v103 = (void *)(((unint64_t)v101 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v104 = (void *)(((unint64_t)v102 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v103 = *v104;
  unint64_t v105 = (void *)(((unint64_t)v103 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v106 = (void *)(((unint64_t)v104 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v105 = *v106;
  unint64_t v107 = (void *)(((unint64_t)v105 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v108 = (void *)(((unint64_t)v106 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v107 = *v108;
  *(void *)(((unint64_t)v107 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v108 + 15) & 0xFFFFFFFFFFFFFFF8);
  return result;
}

uint64_t sub_10031AC4C(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 40);
  uint64_t v7 = v5 + 40;
  uint64_t v8 = a2;
  uint64_t v9 = AssociatedTypeWitness;
  v6(a1, a2);
  uint64_t v10 = *(void *)(v7 + 24);
  uint64_t v11 = (unsigned char *)(v10 + a1);
  uint64_t v118 = a1;
  uint64_t v119 = v8;
  uint64_t v12 = v8;
  unsigned char *v11 = *(unsigned char *)(v10 + v8);
  v11[1] = *(unsigned char *)(v10 + v8 + 1);
  v11[2] = *(unsigned char *)(v10 + v8 + 2);
  uint64_t v13 = *(unsigned __int8 *)(v7 + 40);
  uint64_t v14 = v10 + 3 + v13;
  uint64_t v15 = (v14 + a1) & ~v13;
  uint64_t v16 = (v14 + v12) & ~v13;
  ((void (*)(uint64_t, uint64_t, uint64_t))v6)(v15, v16, v9);
  uint64_t v17 = (unsigned char *)(v15 + v10);
  unsigned char *v17 = *(unsigned char *)(v16 + v10);
  v17[1] = *(unsigned char *)(v16 + v10 + 1);
  void v17[2] = *(unsigned char *)(v16 + v10 + 2);
  uint64_t v18 = (v14 + v15) & ~v13;
  uint64_t v19 = (v14 + v16) & ~v13;
  ((void (*)(uint64_t, uint64_t, uint64_t))v6)(v18, v19, v9);
  uint64_t v20 = (unsigned char *)(v18 + v10);
  unsigned char *v20 = *(unsigned char *)(v19 + v10);
  v20[1] = *(unsigned char *)(v19 + v10 + 1);
  v20[2] = *(unsigned char *)(v19 + v10 + 2);
  uint64_t v125 = v14;
  uint64_t v21 = (v14 + v18) & ~v13;
  uint64_t v22 = (v14 + v19) & ~v13;
  uint64_t v120 = v9;
  ((void (*)(uint64_t, uint64_t, uint64_t))v6)(v21, v22, v9);
  uint64_t v23 = (unsigned char *)(v21 + v10);
  *uint64_t v23 = *(unsigned char *)(v22 + v10);
  v23[1] = *(unsigned char *)(v22 + v10 + 1);
  v23[2] = *(unsigned char *)(v22 + v10 + 2);
  uint64_t v126 = v13 | 3;
  uint64_t v127 = (v13 | 3) + v10 + 3;
  uint64_t v24 = (v127 + v21) & ~(v13 | 3);
  uint64_t v25 = (v127 + v22) & ~(v13 | 3);
  ((void (*)(uint64_t, uint64_t, uint64_t))v6)(v24, v25, v9);
  *(unsigned char *)(v24 + v10) = *(unsigned char *)(v25 + v10);
  unint64_t v26 = (v24 + v10) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v27 = (v25 + v10) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v26 + 4) = *(_DWORD *)(v27 + 4);
  *(unsigned char *)(v26 + 8) = *(unsigned char *)(v27 + 8);
  unint64_t v121 = (v10 & 0xFFFFFFFFFFFFFFFCLL) + 9;
  uint64_t v28 = v13 | 7;
  unint64_t v117 = (v13 | 7) + v121;
  uint64_t v29 = (unsigned char *)((v117 + v24) & ~(v13 | 7));
  uint64_t v30 = (unsigned char *)((v117 + v25) & ~(v13 | 7));
  *uint64_t v29 = *v30;
  uint64_t v31 = (v13 | 7) + 1;
  uint64_t v32 = (unint64_t)&v29[v31] & ~(v13 | 7);
  uint64_t v33 = (unint64_t)&v30[v31] & ~(v13 | 7);
  ((void (*)(uint64_t, uint64_t, uint64_t))v6)(v32, v33, v120);
  *(unsigned char *)(v32 + v10) = *(unsigned char *)(v33 + v10);
  unint64_t v34 = (v32 + v10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v35 = (v33 + v10) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v34 + 8) = *(void *)(v35 + 8);
  *(void *)(v34 + 16) = *(void *)(v35 + 16);
  swift_bridgeObjectRelease();
  *(unsigned char *)(v34 + 24) = *(unsigned char *)(v35 + 24);
  unint64_t v112 = (v10 & 0xFFFFFFFFFFFFFFF8) + 25;
  uint64_t v123 = v112 + v13;
  uint64_t v116 = v112 + v13 + (v31 & ~(v13 | 7));
  unint64_t v36 = (unint64_t)&v29[v116] & ~v13;
  unint64_t v37 = (unint64_t)&v30[v116] & ~v13;
  ((void (*)(unint64_t, unint64_t, uint64_t))v6)(v36, v37, v120);
  unint64_t v38 = (unsigned char *)(v36 + v10);
  *unint64_t v38 = *(unsigned char *)(v37 + v10);
  v38[1] = *(unsigned char *)(v37 + v10 + 1);
  _OWORD v38[2] = *(unsigned char *)(v37 + v10 + 2);
  unint64_t v39 = (v14 + v36) & ~v13;
  unint64_t v40 = (v14 + v37) & ~v13;
  ((void (*)(unint64_t, unint64_t, uint64_t))v6)(v39, v40, v120);
  unint64_t v41 = (unsigned char *)(v39 + v10);
  *unint64_t v41 = *(unsigned char *)(v40 + v10);
  v41[1] = *(unsigned char *)(v40 + v10 + 1);
  v41[2] = *(unsigned char *)(v40 + v10 + 2);
  uint64_t v42 = (v127 + v39) & ~(v13 | 3);
  uint64_t v43 = (v127 + v40) & ~(v13 | 3);
  ((void (*)(uint64_t, uint64_t, uint64_t))v6)(v42, v43, v120);
  *(unsigned char *)(v42 + v10) = *(unsigned char *)(v43 + v10);
  unint64_t v44 = (v42 + v10) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v45 = (v43 + v10) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v44 + 4) = *(_DWORD *)(v45 + 4);
  *(unsigned char *)(v44 + 8) = *(unsigned char *)(v45 + 8);
  uint64_t v115 = v121 + v13;
  unint64_t v46 = (v121 + v13 + v42) & ~v13;
  unint64_t v47 = (v121 + v13 + v43) & ~v13;
  ((void (*)(unint64_t, unint64_t, uint64_t))v6)(v46, v47, v120);
  uint64_t v48 = (unsigned char *)(v46 + v10);
  unsigned char *v48 = *(unsigned char *)(v47 + v10);
  v48[1] = *(unsigned char *)(v47 + v10 + 1);
  uint64_t v48[2] = *(unsigned char *)(v47 + v10 + 2);
  unint64_t v49 = (v14 + v46) & ~v13;
  unint64_t v50 = (v14 + v47) & ~v13;
  ((void (*)(unint64_t, unint64_t, uint64_t))v6)(v49, v50, v120);
  uint64_t v51 = (unsigned char *)(v49 + v10);
  *uint64_t v51 = *(unsigned char *)(v50 + v10);
  v51[1] = *(unsigned char *)(v50 + v10 + 1);
  v51[2] = *(unsigned char *)(v50 + v10 + 2);
  uint64_t v52 = (v28 + v10 + 3 + v49) & ~v28;
  uint64_t v53 = (v28 + v10 + 3 + v50) & ~v28;
  ((void (*)(uint64_t, uint64_t, uint64_t))v6)(v52, v53, v120);
  *(unsigned char *)(v52 + v10) = *(unsigned char *)(v53 + v10);
  unint64_t v54 = (v52 + v10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v55 = (v53 + v10) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v54 + 8) = *(void *)(v55 + 8);
  *(unsigned char *)(v54 + 16) = *(unsigned char *)(v55 + 16);
  unint64_t v56 = (v10 & 0xFFFFFFFFFFFFFFF8) + 17;
  unint64_t v114 = (v13 | 7) + v56;
  uint64_t v57 = (v114 + v52) & ~(v13 | 7);
  uint64_t v58 = (v114 + v53) & ~(v13 | 7);
  ((void (*)(uint64_t, uint64_t, uint64_t))v6)(v57, v58, v120);
  *(unsigned char *)(v57 + v10) = *(unsigned char *)(v58 + v10);
  unint64_t v59 = (v57 + v10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v60 = (v58 + v10) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v59 + 8) = *(void *)(v60 + 8);
  *(unsigned char *)(v59 + 16) = *(unsigned char *)(v60 + 16);
  uint64_t v124 = v56 + v13;
  unint64_t v61 = (v56 + v13 + v57) & ~v13;
  unint64_t v62 = (v56 + v13 + v58) & ~v13;
  ((void (*)(unint64_t, unint64_t, uint64_t))v6)(v61, v62, v120);
  unint64_t v63 = (unsigned char *)(v61 + v10);
  *unint64_t v63 = *(unsigned char *)(v62 + v10);
  v63[1] = *(unsigned char *)(v62 + v10 + 1);
  v63[2] = *(unsigned char *)(v62 + v10 + 2);
  uint64_t v122 = (v13 | 7) + v10 + 3;
  uint64_t v64 = (v122 + v61) & ~(v13 | 7);
  uint64_t v65 = (v122 + v62) & ~(v13 | 7);
  ((void (*)(uint64_t, uint64_t, uint64_t))v6)(v64, v65, v120);
  *(unsigned char *)(v64 + v10) = *(unsigned char *)(v65 + v10);
  unint64_t v66 = (v64 + v10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v67 = (v65 + v10) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v68 = *(void *)(v66 + 8);
  unint64_t v69 = *(void *)(v66 + 16);
  *(_OWORD *)(v66 + 8) = *(_OWORD *)(v67 + 8);
  sub_10000C970(v68, v69);
  *(unsigned char *)(v66 + 24) = *(unsigned char *)(v67 + 24);
  unint64_t v70 = (v112 + v13 + v64) & ~v13;
  unint64_t v71 = (v112 + v13 + v65) & ~v13;
  ((void (*)(unint64_t, unint64_t, uint64_t))v6)(v70, v71, v120);
  unint64_t v72 = (unsigned char *)(v70 + v10);
  *unint64_t v72 = *(unsigned char *)(v71 + v10);
  v72[1] = *(unsigned char *)(v71 + v10 + 1);
  v72[2] = *(unsigned char *)(v71 + v10 + 2);
  uint64_t v73 = (v122 + v70) & ~(v13 | 7);
  uint64_t v74 = (v122 + v71) & ~(v13 | 7);
  ((void (*)(uint64_t, uint64_t, uint64_t))v6)(v73, v74, v120);
  *(unsigned char *)(v73 + v10) = *(unsigned char *)(v74 + v10);
  unint64_t v75 = (v73 + v10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v76 = (v74 + v10) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v77 = *(void *)(v75 + 8);
  unint64_t v78 = *(void *)(v75 + 16);
  *(_OWORD *)(v75 + 8) = *(_OWORD *)(v76 + 8);
  sub_10000C970(v77, v78);
  *(unsigned char *)(v75 + 24) = *(unsigned char *)(v76 + 24);
  unint64_t v79 = (v28 + v112 + v73) & ~v28;
  unint64_t v80 = (v28 + v112 + v74) & ~v28;
  ((void (*)(unint64_t, unint64_t, uint64_t))v6)(v79, v80, v120);
  *(unsigned char *)(v79 + v10) = *(unsigned char *)(v80 + v10);
  unint64_t v81 = (v79 + v10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v82 = (v80 + v10) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v83 = *(void *)(v81 + 8);
  unint64_t v84 = *(void *)(v81 + 16);
  *(_OWORD *)(v81 + 8) = *(_OWORD *)(v82 + 8);
  sub_10000C970(v83, v84);
  *(unsigned char *)(v81 + 24) = *(unsigned char *)(v82 + 24);
  unint64_t v113 = (v13 | 7) + v112;
  unint64_t v85 = (void *)((v113 + v79) & ~(v13 | 7));
  unint64_t v86 = (void *)((v113 + v80) & ~(v13 | 7));
  *unint64_t v85 = *v86;
  uint64_t v87 = ((unint64_t)v85 + v13 + 8) & ~(v13 | 7);
  uint64_t v88 = ((unint64_t)v86 + v13 + 8) & ~(v13 | 7);
  ((void (*)(unint64_t, unint64_t, uint64_t))v6)(((unint64_t)v85 + v13 + 8) & ~v28, ((unint64_t)v86 + v13 + 8) & ~v28, v120);
  *(unsigned char *)(v87 + v10) = *(unsigned char *)(v88 + v10);
  unint64_t v89 = (v87 + v10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v90 = (v88 + v10) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v89 + 8) = *(void *)(v90 + 8);
  *(unsigned char *)(v89 + 16) = *(unsigned char *)(v90 + 16);
  uint64_t v91 = v56 + v13 + ((v13 + 8) & ~(v13 | 7));
  unint64_t v92 = ((unint64_t)v85 + v91) & ~v13;
  unint64_t v93 = ((unint64_t)v86 + v91) & ~v13;
  ((void (*)(unint64_t, unint64_t, uint64_t))v6)(v92, v93, v120);
  unint64_t v94 = (unsigned char *)(v92 + v10);
  *unint64_t v94 = *(unsigned char *)(v93 + v10);
  v94[1] = *(unsigned char *)(v93 + v10 + 1);
  v94[2] = *(unsigned char *)(v93 + v10 + 2);
  uint64_t v95 = v10 + 3 + v13;
  unint64_t v96 = (v125 + v92) & ~v13;
  unint64_t v97 = (v125 + v93) & ~v13;
  ((void (*)(unint64_t, unint64_t, uint64_t))v6)(v96, v97, v120);
  uint64_t v98 = (unsigned char *)(v96 + v10);
  *uint64_t v98 = *(unsigned char *)(v97 + v10);
  v98[1] = *(unsigned char *)(v97 + v10 + 1);
  v98[2] = *(unsigned char *)(v97 + v10 + 2);
  unint64_t v99 = (v95 + v96) & ~v13;
  unint64_t v100 = (v95 + v97) & ~v13;
  ((void (*)(unint64_t, unint64_t, uint64_t))v6)(v99, v100, v120);
  unint64_t v101 = (unsigned char *)(v99 + v10);
  *unint64_t v101 = *(unsigned char *)(v100 + v10);
  v101[1] = *(unsigned char *)(v100 + v10 + 1);
  v101[2] = *(unsigned char *)(v100 + v10 + 2);
  uint64_t v102 = ((v95
         + ((v95
           + ((v124
             + ((v13 + 8) & ~(v13 | 7))
             + ((v113
               + ((v113
                 + ((v122
                   + ((v123
                     + ((v122
                       + ((v124
                         + ((v114
                           + ((v122
                             + ((v95
                               + ((v115
                                 + ((v127
                                   + ((v95
                                     + ((v116
                                       + ((v117 + ((v127 + ((v95 + ((v95 + (v95 & ~v13)) & ~v13)) & ~v13)) & ~v126)) & ~v28)) & ~v13)) & ~v13)) & ~v126)) & ~v13)) & ~v13)) & ~v28)) & ~v28)) & ~v13)) & ~v28)) & ~v13)) & ~v28)) & ~v28)) & ~v28)) & ~v13)) & ~v13)) & ~v13)
       + v10
       + 3
       + 7;
  unint64_t v103 = (void *)((v102 + v118) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v104 = (void *)((v102 + v119) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v103 = *v104;
  swift_release();
  unint64_t v105 = (void *)(((unint64_t)v103 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v106 = (void *)(((unint64_t)v104 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v105 = *v106;
  swift_release();
  unint64_t v107 = (void *)(((unint64_t)v105 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v108 = (void *)(((unint64_t)v106 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v107 = *v108;
  swift_release();
  unint64_t v109 = (void *)(((unint64_t)v107 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v110 = (void *)(((unint64_t)v108 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v109 = *v110;
  swift_release();
  *(void *)(((unint64_t)v109 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v110 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return v118;
}

uint64_t sub_10031B650(_DWORD *a1, unsigned int a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  if (v8 <= v7) {
    unsigned int v9 = v7;
  }
  else {
    unsigned int v9 = v8;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v10 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v11 = v6 + 3 + v10;
  uint64_t v12 = v10 | 3;
  uint64_t v13 = (v10 | 3) + v6 + 3;
  unint64_t v14 = (v6 & 0xFFFFFFFFFFFFFFFCLL) + 9;
  uint64_t v15 = v10 | 7;
  unint64_t v16 = (v10 | 7) + v14;
  uint64_t v17 = (v10 | 7) + 1;
  if (v9 < a2)
  {
    unint64_t v18 = (v6 & 0xFFFFFFFFFFFFFFF8) + 25;
    uint64_t v19 = v15 + v6 + 3;
    unint64_t v20 = (v6 & 0xFFFFFFFFFFFFFFF8) + 17;
    unint64_t v21 = ((((((((((v6
                  + ((v11
                    + ((v11
                      + ((v20
                        + v10
                        + ((v10 + 8) & ~v15)
                        + ((v15
                          + v18
                          + ((v15
                            + v18
                            + ((v19
                              + ((v18
                                + v10
                                + ((v19
                                  + ((v20
                                    + v10
                                    + ((v15
                                      + v20
                                      + ((v19
                                        + ((v11
                                          + ((v14
                                            + v10
                                            + ((v13
                                              + ((v11
                                                + ((v18
                                                  + v10
                                                  + (v17 & ~v15)
                                                  + ((v16
                                                    + ((v13 + ((v11 + ((v11 + (v11 & ~v10)) & ~v10)) & ~v10)) & ~v12)) & ~v15)) & ~v10)) & ~v10)) & ~v12)) & ~v10)) & ~v10)) & ~v15)) & ~v15)) & ~v10)) & ~v15)) & ~v10)) & ~v15)) & ~v15)) & ~v15)) & ~v10)) & ~v10)) & ~v10)
                  + 10) & 0xFFFFFFFFFFFFFFF8)
                + 15) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 8;
    if ((v21 & 0xFFFFFFF8) != 0) {
      unsigned int v22 = 2;
    }
    else {
      unsigned int v22 = a2 - v9 + 1;
    }
    if (v22 >= 0x10000) {
      unsigned int v23 = 4;
    }
    else {
      unsigned int v23 = 2;
    }
    if (v22 < 0x100) {
      unsigned int v23 = 1;
    }
    if (v22 >= 2) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = 0;
    }
    switch(v24)
    {
      case 1:
        int v25 = *((unsigned __int8 *)a1 + v21);
        if (!*((unsigned char *)a1 + v21)) {
          break;
        }
        goto LABEL_27;
      case 2:
        int v25 = *(unsigned __int16 *)((char *)a1 + v21);
        if (*(_WORD *)((char *)a1 + v21)) {
          goto LABEL_27;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x10031BA0CLL);
      case 4:
        int v25 = *(_DWORD *)((char *)a1 + v21);
        if (!v25) {
          break;
        }
LABEL_27:
        int v26 = v25 - 1;
        if ((v21 & 0xFFFFFFF8) != 0)
        {
          int v26 = 0;
          int v27 = *a1;
        }
        else
        {
          int v27 = 0;
        }
        int v33 = v9 + (v27 | v26);
        return (v33 + 1);
      default:
        break;
    }
  }
  if (v7 >= v8)
  {
    if (v5 >= 0xFE)
    {
      uint64_t v29 = *(uint64_t (**)(_DWORD *))(v4 + 48);
      uint64_t v28 = a1;
      goto LABEL_35;
    }
    unsigned int v32 = *((unsigned __int8 *)a1 + v6 + 1);
    if (v32 >= 2)
    {
      int v33 = (v32 + 2147483646) & 0x7FFFFFFF;
      return (v33 + 1);
    }
    return 0;
  }
  uint64_t v28 = (_DWORD *)((v17
                  + ((v16 + ((v13 + ((v11 + ((v11 + (((unint64_t)a1 + v11) & ~v10)) & ~v10)) & ~v10)) & ~v12)) & ~v15)) & ~v15);
  if (v5 >= 0x7FFFFFFF)
  {
    uint64_t v29 = *(uint64_t (**)(_DWORD *))(v4 + 48);
LABEL_35:
    return v29(v28);
  }
  unint64_t v31 = *(void *)((((unint64_t)v28 + v6) & 0xFFFFFFFFFFFFFFF8) + 16);
  if (v31 >= 0xFFFFFFFF) {
    LODWORD(v31) = -1;
  }
  return (v31 + 1);
}

void sub_10031BA20(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(v6 + 64);
  if (v7 <= 0xFE) {
    unsigned int v9 = 254;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v6 + 84);
  }
  if (v10 <= v9) {
    unsigned int v11 = v9;
  }
  else {
    unsigned int v11 = v10;
  }
  size_t v12 = v8 + 3;
  uint64_t v13 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v14 = v8 + 3 + v13;
  uint64_t v15 = (v13 | 3) + v8 + 3;
  unint64_t v16 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 9;
  unint64_t v17 = (v13 | 7) + v16;
  uint64_t v18 = (v13 | 7) + 1;
  unint64_t v19 = (v8 & 0xFFFFFFFFFFFFFFF8) + 25;
  size_t v20 = (v18 & ~(v13 | 7)) + v19;
  uint64_t v21 = (v13 | 7) + v8 + 3;
  unint64_t v22 = (v8 & 0xFFFFFFFFFFFFFFF8) + 17;
  size_t v23 = ((((((((((v8
                + ((v14
                  + ((v14
                    + ((v22
                      + v13
                      + ((v13 + 8) & ~(v13 | 7))
                      + (((v13 | 7)
                        + v19
                        + (((v13 | 7)
                          + v19
                          + ((v21
                            + ((v19
                              + v13
                              + ((v21
                                + ((v22
                                  + v13
                                  + (((v13 | 7)
                                    + v22
                                    + ((v21
                                      + ((v14
                                        + ((v16
                                          + v13
                                          + ((v15
                                            + ((v14
                                              + ((v20
                                                + v13
                                                + ((v17
                                                  + ((v15 + ((v14 + ((v14 + (v14 & ~v13)) & ~v13)) & ~v13)) & ~(v13 | 3))) & ~(v13 | 7))) & ~v13)) & ~v13)) & ~(v13 | 3))) & ~v13)) & ~v13)) & ~(v13 | 7))) & ~(v13 | 7))) & ~v13)) & ~(v13 | 7))) & ~v13)) & ~(v13 | 7))) & ~(v13 | 7))) & ~(v13 | 7))) & ~v13)) & ~v13)) & ~v13)
                + 10) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v11 >= a3)
  {
    int v26 = 0;
    int v27 = a2 - v11;
    if (a2 <= v11) {
      goto LABEL_23;
    }
LABEL_27:
    if (v23) {
      int v29 = 1;
    }
    else {
      int v29 = v27;
    }
    if (v23)
    {
      int v30 = ~v11 + a2;
      bzero(a1, v23);
      *(_DWORD *)a1 = v30;
    }
    switch(v26)
    {
      case 1:
        a1[v23] = v29;
        break;
      case 2:
        *(_WORD *)&a1[v23] = v29;
        break;
      case 3:
LABEL_72:
        __break(1u);
        JUMPOUT(0x10031BF08);
      case 4:
        *(_DWORD *)&a1[v23] = v29;
        break;
      default:
        return;
    }
    return;
  }
  if (((((((((((v8
               + ((v14
                 + ((v14
                   + ((v22
                     + v13
                     + ((v13 + 8) & ~(v13 | 7))
                     + (((v13 | 7)
                       + v19
                       + (((v13 | 7)
                         + v19
                         + ((v21
                           + ((v19
                             + v13
                             + ((v21
                               + ((v22
                                 + v13
                                 + (((v13 | 7)
                                   + v22
                                   + ((v21
                                     + ((v14
                                       + ((v16
                                         + v13
                                         + ((v15
                                           + ((v14
                                             + ((v20
                                               + v13
                                               + ((v17
                                                 + ((v15
                                                   + ((v14
                                                     + ((v14 + (v14 & ~v13)) & ~v13)) & ~v13)) & ~(v13 | 3))) & ~(v13 | 7))) & ~v13)) & ~v13)) & ~(v13 | 3))) & ~v13)) & ~v13)) & ~(v13 | 7))) & ~(v13 | 7))) & ~v13)) & ~(v13 | 7))) & ~v13)) & ~(v13 | 7))) & ~(v13 | 7))) & ~(v13 | 7))) & ~v13)) & ~v13)) & ~v13)
               + 10) & 0xFFFFFFF8)
             + 15) & 0xFFFFFFF8)
           + 15) & 0xFFFFFFF8)
         + 15) & 0xFFFFFFF8)
       + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
    unsigned int v24 = a3 - v11 + 1;
  else {
    unsigned int v24 = 2;
  }
  if (v24 >= 0x10000) {
    int v25 = 4;
  }
  else {
    int v25 = 2;
  }
  if (v24 < 0x100) {
    int v25 = 1;
  }
  if (v24 >= 2) {
    int v26 = v25;
  }
  else {
    int v26 = 0;
  }
  int v27 = a2 - v11;
  if (a2 > v11) {
    goto LABEL_27;
  }
LABEL_23:
  uint64_t v28 = ~(v13 | 7);
  switch(v26)
  {
    case 1:
      a1[v23] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_36;
    case 2:
      *(_WORD *)&a1[v23] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_36;
    case 3:
      goto LABEL_72;
    case 4:
      *(_DWORD *)&a1[v23] = 0;
      goto LABEL_35;
    default:
LABEL_35:
      if (!a2) {
        return;
      }
LABEL_36:
      if (v9 < v10)
      {
        a1 = (unsigned char *)((v17
                      + ((v15 + ((v14 + ((v14 + ((unint64_t)&a1[v14] & ~v13)) & ~v13)) & ~v13)) & ~(v13 | 3))) & v28);
        if (v10 < a2)
        {
          int v31 = ~v10 + a2;
          if (v20 < 4) {
            int v32 = ~(-1 << (8 * v20));
          }
          else {
            int v32 = -1;
          }
          int v33 = v32 & v31;
          bzero(a1, v20);
          if (v20 == 1) {
LABEL_52:
          }
            *a1 = v33;
          else {
LABEL_64:
          }
            *(_DWORD *)a1 = v33;
          return;
        }
        unint64_t v36 = (unsigned char *)((unint64_t)&a1[v18] & v28);
        if (v7 < 0x7FFFFFFF)
        {
          unint64_t v38 = (unint64_t)&v36[v8] & 0xFFFFFFFFFFFFFFF8;
          if ((a2 & 0x80000000) != 0)
          {
            *(void *)(v38 + 8) = a2 ^ 0x80000000;
            *(void *)(v38 + 16) = 0;
          }
          else
          {
            *(void *)(v38 + 16) = (a2 - 1);
          }
          return;
        }
        unint64_t v37 = *(void (**)(unsigned char *, uint64_t))(v6 + 56);
LABEL_61:
        v37(v36, a2);
        return;
      }
      if (v9 >= a2)
      {
        if (v7 < 0xFE)
        {
          a1[v8 + 1] = a2 + 1;
          return;
        }
        unint64_t v37 = *(void (**)(unsigned char *, uint64_t))(v6 + 56);
        unint64_t v36 = a1;
        goto LABEL_61;
      }
      if (v12 <= 3) {
        int v34 = ~(-1 << (8 * v12));
      }
      else {
        int v34 = -1;
      }
      if (v12)
      {
        int v33 = v34 & (~v9 + a2);
        if (v12 <= 3) {
          int v35 = v12;
        }
        else {
          int v35 = 4;
        }
        bzero(a1, v12);
        switch(v35)
        {
          case 2:
            *(_WORD *)a1 = v33;
            break;
          case 3:
            *(_WORD *)a1 = v33;
            a1[2] = BYTE2(v33);
            break;
          case 4:
            goto LABEL_64;
          default:
            goto LABEL_52;
        }
      }
      break;
  }
}

_UNKNOWN **sub_10031BF40()
{
  return &off_100467C00;
}

_UNKNOWN **sub_10031BF4C()
{
  return &off_100467770;
}

uint64_t sub_10031BF58()
{
  return sub_10031BF7C();
}

_UNKNOWN **sub_10031BF64()
{
  return &off_100470280;
}

uint64_t sub_10031BF70()
{
  return sub_10031BF7C();
}

uint64_t sub_10031BF7C()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();

  return swift_getAssociatedConformanceWitness();
}

_UNKNOWN **sub_10031C020()
{
  return &off_100469C20;
}

uint64_t sub_10031C02C()
{
  return swift_getWitnessTable();
}

uint64_t sub_10031C048(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(a2 + 88) + 8);
}

uint64_t sub_10031C054(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 112);
}

uint64_t sub_10031C05C()
{
  return swift_getWitnessTable();
}

uint64_t sub_10031C078(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10031C0B4(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 104);
}

uint64_t sub_10031C0BC(uint64_t a1, uint64_t a2)
{
  return sub_100316F2C(a1, a2);
}

uint64_t sub_10031C0E0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10031C0F0()
{
  return sub_1003207D8((void (*)(void))&_swift_release);
}

uint64_t sub_10031C108()
{
  return sub_100320364((uint64_t (*)(void, void, void, void, void, void))sub_100317470);
}

uint64_t sub_10031C120()
{
  return sub_1003207D8((void (*)(void))&_swift_release);
}

uint64_t sub_10031C138()
{
  return sub_100320364((uint64_t (*)(void, void, void, void, void, void))sub_100317790);
}

char *sub_10031C150@<X0>(uint64_t *a1@<X0>, char **a2@<X8>)
{
  return sub_100316DB8(a1, v2, a2);
}

uint64_t sub_10031C170(uint64_t result)
{
  if (result != 1) {
    return swift_release();
  }
  return result;
}

void sub_10031C180(uint64_t a1, char *a2)
{
  uint64_t v232 = *v2;
  sub_10031F9C4(a1, (uint64_t)v241);
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  Class v230 = *(Class *)(v5 - 8);
  __chkstk_darwin();
  unsigned int v7 = (char *)&v218 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v229 = *(char **)(v8 - 8);
  __chkstk_darwin();
  unsigned int v10 = (char *)&v218 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  Class isa = *(Class *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v13 = (uint64_t *)((char *)&v218 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v233 = a1;
  sub_10031F9C4(a1, (uint64_t)&v242);
  switch(v246)
  {
    case 1:
      uint64_t v14 = v243;
      uint64_t v15 = v244;
      __chkstk_darwin();
      unint64_t v16 = &v218 - 4;
      id v217 = a2;
      uint64_t v18 = (char *)v20;
      swift_retain();
      uint64_t v216 = "Failed to accept %@ because there is no NAN interface";
      unint64_t v19 = sub_1003206C8;
      goto LABEL_5;
    case 2:
      uint64_t v14 = v243;
      uint64_t v15 = v244;
      __chkstk_darwin();
      unint64_t v16 = &v218 - 4;
      id v217 = a2;
      uint64_t v18 = (char *)v21;
      swift_retain();
      uint64_t v216 = "Failed to accept %@ because there is no NAN interface";
      unint64_t v19 = sub_10032069C;
      goto LABEL_5;
    case 3:
      int v25 = (void (*)(void))v242;
      swift_retain();
      uint64_t v26 = sub_1003159B4();
      if (v26)
      {
        uint64_t v27 = v26;
        uint64_t v234 = v25;
        sub_10006F314(0, (unint64_t *)&qword_10047C320);
        uint64_t v28 = a2;
        id v29 = *(id *)&a2[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_queue];
        int v30 = OS_dispatch_queue.nan.unsafeMutableAddressor();
        id v31 = (id)*v30;
        char v32 = static NSObject.== infix(_:_:)();

        if ((v32 & 1) == 0
          || (unint64_t v33 = sub_100356538(), NANBitmap.Channel.init(channel:)(v33 & 0xFFFFFFFFFFFFLL), (v34 & 0x100) != 0))
        {
          swift_release();
          id v198 = 0;
        }
        else
        {
          id v35 = (id)*v30;
          uint64_t *v13 = *v30;
          Class v36 = isa;
          (*((void (**)(uint64_t *, void, uint64_t))isa + 13))(v13, enum case for DispatchPredicate.onQueue(_:), v11);
          id v37 = v35;
          LOBYTE(v35) = _dispatchPreconditionTest(_:)();
          (*((void (**)(uint64_t *, uint64_t))v36 + 1))(v13, v11);
          if ((v35 & 1) == 0)
          {
LABEL_101:
            __break(1u);
            JUMPOUT(0x10031DF90);
          }
          sub_100356538();
          Class isa = UInt32._bridgeToObjectiveC()().super.super.isa;
          Class v230 = UInt8._bridgeToObjectiveC()().super.super.isa;
          unint64_t v38 = (void *)(v27 + *(void *)(*(void *)v27 + 656));
          swift_beginAccess();
          uint64_t v39 = *(void *)(v38[1] + 16);
          if (v39)
          {
            uint64_t v240 = _swiftEmptyArrayStorage;
            swift_bridgeObjectRetain();
            specialized ContiguousArray.reserveCapacity(_:)();
            uint64_t v40 = 0;
            do
            {
              uint64_t v41 = v40 + 1;
              UInt8._bridgeToObjectiveC()();
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
              specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized ContiguousArray._endMutation()();
              uint64_t v40 = v41;
            }
            while (v39 != v41);
            swift_bridgeObjectRelease();
          }
          uint64_t v42 = (*(uint64_t (**)(void))(*(void *)(*(void *)(v232 + 88) + 8) + 8))(*(void *)(v232 + 80));
          uint64_t v43 = *WiFiDriverCapabilities.supportsDualBand.unsafeMutableAddressor();
          uint64_t v235 = v42;
          uint64_t v240 = (void *)v43;
          unint64_t v44 = sub_1002C8868();
          swift_bridgeObjectRetain_n();
          ExtendableOptionSet.formIntersection(_:)((uint64_t)&v235, (uint64_t)&type metadata for WiFiDriverCapabilities, v44);
          char v45 = sub_1000956AC(v240, v43);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v46 = *(void *)(*v38 + 16);
          if (v46)
          {
            int v47 = 0;
            uint64_t v48 = (char *)(*v38 + 32);
            do
            {
              char v49 = *v48++;
              v47 |= 0x801004u >> (8 * v49);
              --v46;
            }
            while (v46);
          }
          else
          {
            LOBYTE(v47) = 0;
          }
          id v206 = objc_allocWithZone((Class)WiFiAwareDeviceCapabilities);
          sub_10006F314(0, (unint64_t *)&unk_1004853D0);
          swift_bridgeObjectRetain();
          Class v207 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          NSString v208 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          uint64_t v209 = v47;
          Class v210 = isa;
          Class v211 = v230;
          id v198 = [v206 initWithOperatingChannel:isa operatingClass:v230 supportedCipherSuites:v207 supportsDataTransfer:v45 & 1 supportedBands:v209 discoveryInterfaceName:v208];
          swift_release();
        }
        int v25 = v234;
      }
      else
      {
        id v198 = 0;
        uint64_t v28 = a2;
      }
      v25(v198);
      id v212 = &v28[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler];
      uint64_t v213 = *(void *)&v28[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler];
      *(void *)id v212 = 0;
      *((void *)v212 + 1) = 0;
      sub_100011E30(v213);

LABEL_86:
      uint64_t v56 = v233;
LABEL_87:
      sub_1003202F4(v56, (void (*)(void, void, void, void, void, void))sub_1002BB7AC);
      return;
    case 4:
      uint64_t v50 = v242;
      uint64_t v51 = v243;
      uint64_t v52 = v244;
      uint64_t v53 = *(uint64_t (**)())(v232 + 112);
      long long v54 = *(_OWORD *)(v232 + 96);
      long long aBlock = *(_OWORD *)(v232 + 80);
      long long v237 = v54;
      uint64_t v238 = v53;
      type metadata accessor for P2PController.Components();
      uint64_t v55 = v233;
      sub_1003202F4(v233, (void (*)(void, void, void, void, void, void))sub_1002BB6B8);
      swift_retain();
      sub_100282470(a2, v50, v51, v52);
      swift_release();
      uint64_t v56 = v55;
      goto LABEL_87;
    case 5:
      uint64_t v14 = v243;
      uint64_t v15 = v244;
      __chkstk_darwin();
      unint64_t v16 = &v218 - 4;
      id v217 = v57;
      uint64_t v18 = v57;
      swift_retain();
      uint64_t v216 = "Failed to accept %@ because there is no AWDL interface";
      unint64_t v22 = sub_100320670;
      size_t v23 = OS_dispatch_queue.awdl.unsafeMutableAddressor;
      unsigned int v24 = (uint64_t (*)(uint64_t))sub_10001132C;
      goto LABEL_20;
    case 6:
      __chkstk_darwin();
      uint64_t v58 = &v218 - 4;
      id v217 = v59;
      __chkstk_darwin();
      unint64_t v60 = &v218 - 6;
      *(&v218 - 4) = (uint64_t)a2;
      *(&v218 - 3) = v61;
      swift_retain();
      uint64_t v216 = "Failed to accept %@ because there is no AWDL interface";
      unint64_t v62 = (void (*)(uint64_t))sub_1003205A8;
      unint64_t v63 = sub_100320604;
      goto LABEL_25;
    case 7:
      __chkstk_darwin();
      *((_DWORD *)&v218 - 8) = v64;
      *((_WORD *)&v218 - 14) = v65;
      *(&v218 - 3) = v66;
      __chkstk_darwin();
      unint64_t v60 = &v218 - 6;
      *(&v218 - 4) = (uint64_t)a2;
      *(&v218 - 3) = v67;
      swift_retain();
      uint64_t v216 = "Failed to accept %@ because there is no AWDL interface";
      unint64_t v62 = (void (*)(uint64_t))sub_100320514;
      uint64_t v68 = sub_10032053C;
      unint64_t v69 = &v218 - 6;
      goto LABEL_26;
    case 8:
      __chkstk_darwin();
      uint64_t v58 = &v218 - 6;
      *(&v218 - 4) = (uint64_t)a2;
      *(&v218 - 3) = v70;
      __chkstk_darwin();
      unint64_t v60 = &v218 - 6;
      *(&v218 - 4) = (uint64_t)a2;
      *(&v218 - 3) = v71;
      swift_retain();
      uint64_t v216 = "Failed to accept %@ because there is no AWDL interface";
      unint64_t v62 = (void (*)(uint64_t))sub_100320470;
      unint64_t v63 = sub_1003204A4;
      goto LABEL_25;
    case 9:
      __chkstk_darwin();
      uint64_t v58 = &v218 - 4;
      id v217 = v72;
      __chkstk_darwin();
      unint64_t v60 = &v218 - 6;
      *(&v218 - 4) = (uint64_t)a2;
      *(&v218 - 3) = v73;
      swift_retain();
      uint64_t v216 = "Failed to accept %@ because there is no AWDL interface";
      unint64_t v62 = (void (*)(uint64_t))sub_100320448;
      unint64_t v63 = sub_100320464;
LABEL_25:
      uint64_t v68 = v63;
      unint64_t v69 = v58;
LABEL_26:
      sub_10031DFD0(v62, (uint64_t)v69, v68, (uint64_t)v60, a2, (uint64_t)v234, (uint64_t (*)(id))OS_dispatch_queue.awdl.unsafeMutableAddressor, (uint64_t (*)(uint64_t))sub_10001132C, v216);
      sub_1003202F4(v233, (void (*)(void, void, void, void, void, void))sub_1002BB7AC);
      return;
    case 10:
      uint64_t v232 = v242;
      Class isa = (Class)v243;
      uint64_t v74 = &a2[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler];
      uint64_t v75 = *(void *)&a2[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler];
      *(void *)uint64_t v74 = 0;
      *((void *)v74 + 1) = 0;
      swift_retain();
      sub_100011E30(v75);
      sub_10006F314(0, (unint64_t *)&qword_10047C320);
      id v76 = *(id *)&a2[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_queue];
      id v77 = (id)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
      char v78 = static NSObject.== infix(_:_:)();

      if ((v78 & 1) == 0)
      {
        sub_10001FE34((uint64_t)_swiftEmptyArrayStorage);
        ((void (*)(void))v232)();
        goto LABEL_81;
      }
      uint64_t v79 = swift_allocObject();
      *(unsigned char *)(v79 + 16) = 0;
      uint64_t v80 = swift_allocObject();
      *(unsigned char *)(v80 + 16) = 0;
      uint64_t v81 = swift_allocObject();
      *(void *)(v81 + 16) = _swiftEmptyDictionarySingleton;
      id v224 = (id)*OS_dispatch_queue.awdl.unsafeMutableAddressor();
      unint64_t v82 = (void *)swift_allocObject();
      uint64_t v83 = (uint64_t)v234;
      v82[2] = v234;
      v82[3] = v81;
      uint64_t v220 = v81;
      v82[4] = v79;
      v82[5] = v80;
      uint64_t v228 = v80;
      Class v84 = isa;
      v82[6] = v232;
      v82[7] = v84;
      uint64_t v238 = sub_1003202DC;
      unint64_t v239 = v82;
      *(void *)&long long aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256;
      uint64_t v227 = &v237;
      *(void *)&long long v237 = sub_10000E5D0;
      *((void *)&v237 + 1) = &unk_10046E360;
      id v225 = _Block_copy(&aBlock);
      uint64_t v226 = sub_1002BB6B8;
      sub_1003202F4(v233, (void (*)(void, void, void, void, void, void))sub_1002BB6B8);
      id v85 = v224;
      swift_retain();
      swift_retain();
      uint64_t v86 = v79;
      swift_retain();
      swift_retain();
      static DispatchQoS.unspecified.getter();
      uint64_t v240 = _swiftEmptyArrayStorage;
      unint64_t v223 = sub_100014390();
      uint64_t v222 = sub_100010BCC((uint64_t *)&unk_10047D0F0);
      unint64_t v221 = sub_1000143E0();
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v87 = v225;
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v87);

      uint64_t v88 = (void (*)(void, void))*((void *)v230 + 1);
      Class v230 = (Class)((char *)v230 + 8);
      id v225 = v88;
      v88(v7, v5);
      unint64_t v89 = (void *)*((void *)v229 + 1);
      v229 += 8;
      id v224 = v89;
      ((void (*)(char *, uint64_t))v89)(v10, v8);
      swift_release();
      id v219 = (id)*OS_dispatch_queue.nan.unsafeMutableAddressor();
      unint64_t v90 = (void *)swift_allocObject();
      v90[2] = v83;
      uint64_t v91 = v228;
      v90[3] = v220;
      v90[4] = v91;
      uint64_t v92 = v232;
      v90[5] = v86;
      v90[6] = v92;
      v90[7] = isa;
      uint64_t v238 = sub_10032034C;
      unint64_t v239 = v90;
      *(void *)&long long aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256;
      *(void *)&long long v237 = sub_10000E5D0;
      *((void *)&v237 + 1) = &unk_10046E3B0;
      unint64_t v93 = _Block_copy(&aBlock);
      uint64_t v94 = v233;
      sub_1003202F4(v233, (void (*)(void, void, void, void, void, void))v226);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      id v95 = v219;
      static DispatchQoS.unspecified.getter();
      uint64_t v240 = _swiftEmptyArrayStorage;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v93);

      sub_1003202F4(v94, (void (*)(void, void, void, void, void, void))sub_1002BB7AC);
      ((void (*)(char *, uint64_t))v225)(v7, v5);
      ((void (*)(char *, uint64_t))v224)(v10, v8);
      swift_release();
      swift_release();
      swift_release();
LABEL_66:
      swift_release();
      return;
    case 11:
      unint64_t v96 = (void *)v242;
      unint64_t v97 = (void (*)(void))v243;
      uint64_t v98 = &a2[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler];
      uint64_t v99 = *(void *)&a2[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler];
      *(void *)uint64_t v98 = 0;
      *((void *)v98 + 1) = 0;
      id v100 = v96;
      swift_retain();
      sub_100011E30(v99);
      sub_10006F314(0, (unint64_t *)&qword_10047C320);
      id v101 = *(id *)&a2[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_queue];
      uint64_t v102 = OS_dispatch_queue.awdl.unsafeMutableAddressor();
      id v103 = (id)*v102;
      LOBYTE(v99) = static NSObject.== infix(_:_:)();

      if ((v99 & 1) == 0) {
        goto LABEL_91;
      }
      id v104 = (id)*v102;
      uint64_t *v13 = *v102;
      Class v105 = isa;
      (*((void (**)(uint64_t *, void, uint64_t))isa + 13))(v13, enum case for DispatchPredicate.onQueue(_:), v11);
      id v106 = v104;
      LOBYTE(v104) = _dispatchPreconditionTest(_:)();
      (*((void (**)(uint64_t *, uint64_t))v105 + 1))(v13, v11);
      if ((v104 & 1) == 0) {
        goto LABEL_98;
      }
      if (!sub_10001132C()) {
        goto LABEL_91;
      }
      unint64_t v107 = v97;
      id v108 = [v100 uniqueIdentifier];
      uint64_t v109 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v111 = v110;
      if (v109 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v111 == v112) {
        goto LABEL_37;
      }
      char v113 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v113) {
        goto LABEL_38;
      }
      id v108 = [v100 uniqueIdentifier];
      uint64_t v114 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v116 = v115;
      if (v114 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v116 == v117)
      {
LABEL_37:

        swift_bridgeObjectRelease_n();
LABEL_38:
        id v118 = [v100 peerAddress];
        sub_100377C04((uint64_t)v118);

        Class v119 = Int32._bridgeToObjectiveC()().super.super.isa;
        v107();

        swift_release();
        swift_release();

        return;
      }
      char v214 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v214) {
        goto LABEL_38;
      }
      swift_release();
      unint64_t v97 = v107;
LABEL_91:
      Class v215 = Int32._bridgeToObjectiveC()().super.super.isa;
      v97();

      swift_release();
      return;
    case 12:
      unint64_t v121 = (objc_class *)v242;
      uint64_t v120 = (objc_class *)v243;
      uint64_t v122 = &a2[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler];
      uint64_t v123 = *(void *)&a2[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler];
      *(void *)uint64_t v122 = 0;
      *((void *)v122 + 1) = 0;
      swift_retain();
      sub_100011E30(v123);
      sub_10006F314(0, (unint64_t *)&qword_10047C320);
      id v124 = *(id *)&a2[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_queue];
      uint64_t v125 = OS_dispatch_queue.p2p.unsafeMutableAddressor();
      id v126 = (id)*v125;
      char v127 = static NSObject.== infix(_:_:)();

      if ((v127 & 1) == 0)
      {
        ((void (*)(void *))v121)(_swiftEmptyArrayStorage);
        goto LABEL_86;
      }
      id v128 = (id)*v125;
      uint64_t *v13 = (uint64_t)v128;
      Class v129 = isa;
      (*((void (**)(uint64_t *, void, uint64_t))isa + 13))(v13, enum case for DispatchPredicate.onQueue(_:), v11);
      id v130 = v128;
      LOBYTE(v128) = _dispatchPreconditionTest(_:)();
      (*((void (**)(uint64_t *, uint64_t))v129 + 1))(v13, v11);
      if (v128)
      {
        Class isa = v120;
        uint64_t v131 = (char *)v234 + *(void *)(*(void *)v234 + 128);
        uint64_t v132 = *(uint64_t (**)())(v232 + 112);
        long long v133 = *(_OWORD *)(v232 + 96);
        long long aBlock = *(_OWORD *)(v232 + 80);
        long long v237 = v133;
        uint64_t v238 = v132;
        uint64_t v134 = *(void *)(*(void *)&v131[*(int *)(type metadata accessor for P2PController.Components() + 72)]
                         + qword_1004887B8);
        swift_bridgeObjectRetain();
        swift_retain();
        uint64_t v135 = sub_100280F74();
        swift_release();
        uint64_t v136 = sub_100315A2C(v135);
        swift_bridgeObjectRelease();
        uint64_t v137 = sub_100320190((uint64_t)v136, v134);
        swift_bridgeObjectRelease();
        int64_t v138 = *(void *)(v137 + 16);
        if (!v138)
        {
          swift_bridgeObjectRelease();
          ((void (*)(void *))v121)(_swiftEmptyArrayStorage);
LABEL_81:
          swift_bridgeObjectRelease();
          goto LABEL_86;
        }
        Class v230 = v121;
        *(void *)&long long aBlock = _swiftEmptyArrayStorage;
        uint64_t v232 = v137;
        sub_10008345C(0, v138, 0);
        uint64_t v139 = v232;
        uint64_t v140 = aBlock;
        uint64_t v141 = sub_100296A3C(v232);
        uint64_t v143 = v142;
        char v145 = v144 & 1;
        uint64_t v234 = (void (*)(void))(v139 + 56);
        while ((v141 & 0x8000000000000000) == 0 && v141 < 1 << *(unsigned char *)(v139 + 32))
        {
          if (((*(void *)((char *)v234 + (((unint64_t)v141 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v141) & 1) == 0) {
            goto LABEL_93;
          }
          if (*(_DWORD *)(v139 + 36) != v143) {
            goto LABEL_94;
          }
          uint64_t v146 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v148 = v147;
          *(void *)&long long aBlock = v140;
          unint64_t v150 = *(void *)(v140 + 16);
          unint64_t v149 = *(void *)(v140 + 24);
          if (v150 >= v149 >> 1)
          {
            sub_10008345C(v149 > 1, v150 + 1, 1);
            uint64_t v139 = v232;
            uint64_t v140 = aBlock;
          }
          *(void *)(v140 + 16) = v150 + 1;
          uint64_t v151 = v140 + 16 * v150;
          *(void *)(v151 + 32) = v146;
          *(void *)(v151 + 40) = v148;
          uint64_t v152 = sub_100296ADC(v141, v143, v145 & 1, v139);
          uint64_t v141 = v152;
          uint64_t v143 = v153;
          char v145 = v154 & 1;
          if (!--v138)
          {
            sub_100038030(v152, v153, v154 & 1);
            swift_bridgeObjectRelease();
            ((void (*)(uint64_t))v230)(v140);
            goto LABEL_81;
          }
        }
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
LABEL_95:
        __break(1u);
LABEL_96:
        __break(1u);
LABEL_97:
        __break(1u);
LABEL_98:
        __break(1u);
      }
      __break(1u);
LABEL_100:
      __break(1u);
      goto LABEL_101;
    case 13:
      uint64_t v155 = (char *)v242;
      uint64_t v156 = (objc_class *)v243;
      uint64_t v157 = &a2[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler];
      uint64_t v158 = *(void *)&a2[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler];
      *(void *)uint64_t v157 = 0;
      *((void *)v157 + 1) = 0;
      swift_retain();
      sub_100011E30(v158);
      sub_10006F314(0, (unint64_t *)&qword_10047C320);
      id v159 = *(id *)&a2[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_queue];
      char v160 = OS_dispatch_queue.awdl.unsafeMutableAddressor();
      id v161 = (id)*v160;
      char v162 = static NSObject.== infix(_:_:)();

      if ((v162 & 1) == 0) {
        goto LABEL_67;
      }
      id v163 = (id)*v160;
      uint64_t *v13 = (uint64_t)v163;
      Class v164 = isa;
      (*((void (**)(uint64_t *, void, uint64_t))isa + 13))(v13, enum case for DispatchPredicate.onQueue(_:), v11);
      id v165 = v163;
      LOBYTE(v163) = _dispatchPreconditionTest(_:)();
      (*((void (**)(uint64_t *, uint64_t))v164 + 1))(v13, v11);
      if ((v163 & 1) == 0) {
        goto LABEL_100;
      }
      char v166 = sub_10001132C();
      if (!v166)
      {
LABEL_67:
        ((void (*)(void *, void *))v155)(_swiftEmptyArrayStorage, _swiftEmptyArrayStorage);
        goto LABEL_86;
      }
      uint64_t v167 = v166;
      sub_100375308();
      sub_100309184(&aBlock);
      swift_release();
      uint64_t v240 = (void *)aBlock;
      swift_getWitnessTable();
      type metadata accessor for AWDLDiscoveryEngine.Browse();
      sub_1000171BC();
      type metadata accessor for Dictionary.Keys();
      swift_getWitnessTable();
      uint64_t v168 = Set.init<A>(_:)();
      sub_100375308();
      sub_10030921C((uint64_t *)&aBlock);
      swift_release();
      uint64_t v169 = sub_1003201FC(aBlock, v168);
      swift_bridgeObjectRelease();
      int64_t v170 = *(void *)(v169 + 16);
      Class v230 = v156;
      Class isa = (Class)v167;
      if (v170)
      {
        uint64_t v229 = v155;
        *(void *)&long long aBlock = _swiftEmptyArrayStorage;
        sub_10008345C(0, v170, 0);
        char v171 = (void *)aBlock;
        uint64_t v172 = sub_100296A3C(v169);
        uint64_t v174 = v173;
        char v176 = v175 & 1;
        uint64_t v234 = (void (*)(void))(v169 + 56);
        do
        {
          if (v172 < 0 || v172 >= 1 << *(unsigned char *)(v169 + 32)) {
            goto LABEL_95;
          }
          if (((*(void *)((char *)v234 + (((unint64_t)v172 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v172) & 1) == 0) {
            goto LABEL_96;
          }
          if (*(_DWORD *)(v169 + 36) != v174) {
            goto LABEL_97;
          }
          uint64_t v177 = *(void *)(v169 + 48) + 24 * v172;
          unint64_t v178 = v171;
          uint64_t v179 = *(void *)v177;
          uint64_t v180 = *(void *)(v177 + 8);
          char v181 = *(unsigned char *)(v177 + 16);
          swift_bridgeObjectRetain();
          uint64_t v182 = v179;
          char v171 = v178;
          DNSRecords.Identifier.description.getter(v182, v180, v181);
          uint64_t v183 = v182;
          uint64_t v185 = v184;
          swift_bridgeObjectRelease();
          *(void *)&long long aBlock = v178;
          unint64_t v186 = v178[2];
          unint64_t v187 = v171[3];
          if (v186 >= v187 >> 1)
          {
            sub_10008345C(v187 > 1, v186 + 1, 1);
            char v171 = (void *)aBlock;
          }
          v171[2] = v186 + 1;
          uint64_t v188 = &v171[2 * v186];
          v188[4] = v183;
          v188[5] = v185;
          uint64_t v189 = sub_100296ADC(v172, v174, v176 & 1, v169);
          uint64_t v172 = v189;
          uint64_t v174 = v190;
          char v176 = v191 & 1;
          --v170;
        }
        while (v170);
        uint64_t v199 = v171;
        sub_100038030(v189, v190, v191 & 1);
        swift_bridgeObjectRelease();
        uint64_t v155 = v229;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v199 = _swiftEmptyArrayStorage;
      }
      uint64_t v200 = (*(uint64_t (**)(void))(*(void *)(v232 + 88) + 64))(*(void *)(v232 + 80));
      uint64_t v201 = *(void *)(v200 + 16);
      if (v201)
      {
        uint64_t v202 = (void (*)(void *, uint64_t))v155;
        *(void *)&long long aBlock = _swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)();
        uint64_t v203 = 0;
        do
        {
          uint64_t v204 = v203 + 1;
          [objc_allocWithZone((Class)NSNumber) initWithUnsignedShort:*(unsigned __int16 *)(v200 + 2 * v203 + 32)];
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          uint64_t v203 = v204;
        }
        while (v201 != v204);
        uint64_t v205 = aBlock;
        swift_bridgeObjectRelease();
        v202(v199, v205);
      }
      else
      {
        swift_bridgeObjectRelease();
        ((void (*)(void *, void *))v155)(v199, _swiftEmptyArrayStorage);
      }
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_81;
    case 14:
      __chkstk_darwin();
      __chkstk_darwin();
      *(&v218 - 4) = (uint64_t)a2;
      *(&v218 - 3) = v192;
      swift_retain();
      sub_10031DFD0((void (*)(uint64_t))sub_10032037C, (uint64_t)(&v218 - 4), sub_1003203E8, (uint64_t)(&v218 - 6), a2, (uint64_t)v234, (uint64_t (*)(id))OS_dispatch_queue.awdl.unsafeMutableAddressor, (uint64_t (*)(uint64_t))sub_10001132C, "Failed to accept %@ because there is no AWDL interface");
      swift_release();
      return;
    case 15:
      uint64_t v193 = v243;
      uint64_t v194 = v245;
      os_log_type_t v195 = &a2[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler];
      uint64_t v196 = *(void *)&a2[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler];
      *(void *)os_log_type_t v195 = 0;
      *((void *)v195 + 1) = 0;
      uint64_t v197 = v193;
      swift_retain();
      sub_100011E30(v196);
      v194(2);

      goto LABEL_66;
    default:
      uint64_t v14 = v243;
      uint64_t v15 = v244;
      __chkstk_darwin();
      unint64_t v16 = &v218 - 4;
      id v217 = a2;
      uint64_t v18 = (char *)v17;
      swift_retain();
      uint64_t v216 = "Failed to accept %@ because there is no NAN interface";
      unint64_t v19 = sub_1003206F4;
LABEL_5:
      unint64_t v22 = (uint64_t (*)())v19;
      size_t v23 = OS_dispatch_queue.nan.unsafeMutableAddressor;
      unsigned int v24 = (uint64_t (*)(uint64_t))sub_1003159B4;
LABEL_20:
      sub_10031DFD0((void (*)(uint64_t))v22, (uint64_t)v16, v14, v15, a2, (uint64_t)v234, (uint64_t (*)(id))v23, v24, v216);

      swift_release();
      return;
  }
}

uint64_t sub_10031DFD0(void (*a1)(uint64_t), uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, char *a5, uint64_t a6, uint64_t (*a7)(id), uint64_t (*a8)(uint64_t), const char *a9)
{
  uint64_t v38 = a4;
  uint64_t v39 = a3;
  uint64_t v36 = a2;
  id v37 = a1;
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin();
  uint64_t v15 = (uint64_t *)((char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10006F314(0, (unint64_t *)&qword_10047C320);
  id v16 = *(id *)&a5[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_queue];
  id v17 = (id *)a7(v16);
  id v18 = *v17;
  char v19 = static NSObject.== infix(_:_:)();

  if (v19)
  {
    id v20 = *v17;
    *uint64_t v15 = v20;
    (*(void (**)(void *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
    id v21 = v20;
    LOBYTE(v20) = _dispatchPreconditionTest(_:)();
    uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v13 + 8))(v15, v12);
    if (v20)
    {
      uint64_t v23 = a8(result);
      if (v23)
      {
        v37(v23);
        v39(0);
        return swift_release();
      }
      else
      {
        uint64_t v28 = a5;
        id v29 = Logger.logObject.getter();
        os_log_type_t v30 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v29, v30))
        {
          id v31 = (uint8_t *)swift_slowAlloc();
          char v32 = (void *)swift_slowAlloc();
          *(_DWORD *)id v31 = 138412290;
          uint64_t v40 = v28;
          unint64_t v33 = v28;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *char v32 = v28;

          _os_log_impl((void *)&_mh_execute_header, v29, v30, a9, v31, 0xCu);
          sub_100010BCC(&qword_10047CC30);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        __int16 v34 = &v28[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler];
        uint64_t v35 = *(void *)&v28[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler];
        *(void *)__int16 v34 = 0;
        *((void *)v34 + 1) = 0;
        sub_100011E30(v35);
        return v39(7);
      }
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v24 = xmmword_1003B2F00;
    *(unsigned char *)(v24 + 16) = 1;
    swift_willThrow();
    int v25 = &a5[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler];
    uint64_t v26 = *(void *)&a5[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler];
    *(void *)int v25 = 0;
    *((void *)v25 + 1) = 0;
    sub_100011E30(v26);
    swift_getErrorValue();
    uint64_t v27 = Error.apiError.getter(v41);
    v39(v27);
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_10031E398(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = type metadata accessor for AWDLPeer(0);
  __chkstk_darwin();
  unsigned int v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v19 - v8;
  uint64_t v10 = a2 & 0xFFFFFFFFFFFFLL;
  if (!sub_100377334(v10))
  {
    sub_10000F000();
    swift_allocError();
    uint64_t v18 = 3;
    goto LABEL_6;
  }
  sub_100376468(v10, (uint64_t)v9);
  uint64_t v11 = &v9[*(int *)(v5 + 96)];
  uint64_t v12 = *(void *)v11;
  char v13 = v11[8];
  sub_1002C0BFC((uint64_t)v9, (uint64_t)v7);
  if (v13)
  {
    uint64_t v14 = &v7[*(int *)(v5 + 92)];
    uint64_t v12 = *(void *)v14;
    int v15 = v14[8];
    sub_1002C0CC8((uint64_t)v7);
    uint64_t result = sub_1002C0CC8((uint64_t)v9);
    if (v15 == 1)
    {
      sub_10000F000();
      swift_allocError();
      uint64_t v18 = 2;
LABEL_6:
      *(void *)uint64_t v17 = v18;
      *(void *)(v17 + 8) = 0;
      *(unsigned char *)(v17 + 16) = 1;
      return swift_willThrow();
    }
  }
  else
  {
    sub_1002C0CC8((uint64_t)v7);
    uint64_t result = sub_1002C0CC8((uint64_t)v9);
  }
  if (v12 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v12 <= 0x7FFFFFFF)
  {
    return a3(v12);
  }
  __break(1u);
  return result;
}

uint64_t sub_10031E55C()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  (*(void (**)(void *__return_ptr, void))(*(void *)(*(void *)(*(void *)v0 + 408) + 88) + 152))(v49, *(void *)(*(void *)(*(void *)v0 + 408) + 80));
  sub_10006EC68((uint64_t)v49, (uint64_t)__src, &qword_10047E7A8);
  if (sub_100320788((uint64_t)__src) == 1)
  {
    unint64_t v4 = sub_10001FE34((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    memcpy(v51, __src, 0xE80uLL);
    uint64_t v5 = eventPayload(for:)((uint64_t)v51);
    uint64_t v6 = (uint64_t *)(v3 + *(void *)(*(void *)v3 + 528));
    swift_beginAccess();
    uint64_t v7 = *v6;
    uint64_t v8 = (void *)AWDLTrafficRegistrationServiceAirPlay;
    swift_bridgeObjectRetain();
    id v9 = v8;
    char v10 = sub_100375138((uint64_t)v9, v7);

    swift_bridgeObjectRelease();
    uint64_t v48 = &type metadata for Bool;
    LOBYTE(v47) = v10 & 1;
    sub_10003803C(&v47, v46);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v52 = v5;
    sub_100034178(v46, 0xD000000000000019, 0x80000001003E06D0, isUniquelyReferenced_nonNull_native);
    uint64_t v12 = v52;
    swift_bridgeObjectRelease();
    uint64_t v13 = *v6;
    uint64_t v14 = (void *)AWDLTrafficRegistrationServiceSidecar;
    swift_bridgeObjectRetain();
    id v15 = v14;
    char v16 = sub_100375138((uint64_t)v15, v13);

    swift_bridgeObjectRelease();
    uint64_t v48 = &type metadata for Bool;
    LOBYTE(v47) = v16 & 1;
    sub_10003803C(&v47, v46);
    char v17 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v52 = v12;
    sub_100034178(v46, 0xD000000000000019, 0x80000001003E06F0, v17);
    uint64_t v18 = v52;
    swift_bridgeObjectRelease();
    uint64_t v19 = *v6;
    id v20 = (void *)AWDLTrafficRegistrationServiceRemoteCamera;
    swift_bridgeObjectRetain();
    id v21 = v20;
    char v22 = sub_100375138((uint64_t)v21, v19);

    swift_bridgeObjectRelease();
    uint64_t v48 = &type metadata for Bool;
    LOBYTE(v47) = v22 & 1;
    sub_10003803C(&v47, v46);
    char v23 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v52 = v18;
    sub_100034178(v46, 0xD00000000000001ELL, 0x80000001003E0710, v23);
    uint64_t v24 = v52;
    swift_bridgeObjectRelease();
    uint64_t v25 = *v6;
    uint64_t v26 = (void *)AWDLTrafficRegistrationServiceRemoteScreen;
    swift_bridgeObjectRetain();
    uint64_t v27 = v26;
    char v28 = sub_100375138(v27, v25);

    swift_bridgeObjectRelease();
    uint64_t v48 = &type metadata for Bool;
    LOBYTE(v47) = v28 & 1;
    sub_10003803C(&v47, v46);
    char v29 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v52 = v24;
    sub_100034178(v46, 0xD00000000000001ELL, 0x80000001003E0730, v29);
    os_log_type_t v30 = v52;
    swift_bridgeObjectRelease();
    uint64_t v31 = *v6;
    char v32 = (void *)AWDLTrafficRegistrationServiceUniversalControl;
    swift_bridgeObjectRetain();
    id v33 = v32;
    LOBYTE(v27) = sub_100375138((uint64_t)v33, v31);

    swift_bridgeObjectRelease();
    uint64_t v48 = &type metadata for Bool;
    LOBYTE(v47) = v27 & 1;
    sub_10003803C(&v47, v46);
    char v34 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v52 = v30;
    sub_100034178(v46, 0xD000000000000022, 0x80000001003E0750, v34);
    uint64_t v35 = v52;
    swift_bridgeObjectRelease();
    uint64_t v36 = *v6;
    id v37 = (void *)AWDLTrafficRegistrationServiceTVRemoteCamera;
    swift_bridgeObjectRetain();
    uint64_t v38 = v37;
    LOBYTE(v27) = sub_100375138(v38, v36);

    swift_bridgeObjectRelease();
    uint64_t v48 = &type metadata for Bool;
    LOBYTE(v47) = v27 & 1;
    sub_10003803C(&v47, v46);
    char v39 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v52 = v35;
    sub_100034178(v46, 0xD000000000000020, 0x80000001003E0780, v39);
    uint64_t v40 = v52;
    swift_bridgeObjectRelease();
    uint64_t v41 = *v6;
    uint64_t v42 = (void *)AWDLTrafficRegistrationServiceTimeSync;
    swift_bridgeObjectRetain();
    id v43 = v42;
    LOBYTE(v38) = sub_100375138((uint64_t)v43, v41);

    swift_bridgeObjectRelease();
    uint64_t v48 = &type metadata for Bool;
    LOBYTE(v47) = v38 & 1;
    sub_10003803C(&v47, v46);
    char v44 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v52 = v40;
    sub_100034178(v46, 0xD00000000000001DLL, 0x80000001003E07B0, v44);
    unint64_t v4 = (unint64_t)v52;
    swift_bridgeObjectRelease();
  }
  v2(v4);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10031EAC4(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  if (a1)
  {
    sub_10001FE34((uint64_t)_swiftEmptyArrayStorage);
    a3();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = (void *)(a2 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler);
    uint64_t v6 = *(void *)(a2 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler);
    *uint64_t v5 = 0;
    v5[1] = 0;
    return sub_100011E30(v6);
  }
}

uint64_t sub_10031EB58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v25 = a4;
  uint64_t v26 = a6;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v24 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v27 - 8);
  __chkstk_darwin();
  id v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(a1 + *(void *)(*(void *)a1 + 152)) == 1)
  {
    if (sub_10001132C())
    {
      char v16 = (void *)sub_10037755C();
      swift_release();
    }
    else
    {
      char v16 = _swiftEmptyDictionarySingleton;
    }
  }
  else
  {
    char v16 = _swiftEmptyDictionarySingleton;
  }
  char v17 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v18 = (void *)swift_allocObject();
  _OWORD v18[2] = a2;
  v18[3] = v16;
  v18[4] = a3;
  uint64_t v19 = v26;
  uint64_t v18[5] = v25;
  v18[6] = a5;
  v18[7] = v19;
  aBlock[4] = sub_1003207BC;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E5D0;
  uint64_t aBlock[3] = &unk_10046E450;
  id v20 = _Block_copy(aBlock);
  id v21 = v17;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  char v28 = _swiftEmptyArrayStorage;
  sub_100014390();
  sub_100010BCC((uint64_t *)&unk_10047D0F0);
  sub_1000143E0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v27);
  return swift_release();
}

uint64_t sub_10031EE70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v31 = a6;
  uint64_t v32 = a3;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v30 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for DispatchQoS();
  uint64_t v29 = *(void *)(v33 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(a1 + *(void *)(*(void *)a1 + 136)) == 1)
  {
    id v15 = _swiftEmptyDictionarySingleton;
    if (sub_1003159B4())
    {
      sub_100354870();
      uint64_t v16 = sub_1002E48B8();
      uint64_t v28 = v10;
      uint64_t v17 = a2;
      uint64_t v18 = v16;
      swift_release();
      BOOL v19 = v18 <= 0;
      a2 = v17;
      uint64_t v10 = v28;
      char v20 = !v19;
      uint64_t v38 = &type metadata for Bool;
      LOBYTE(aBlock) = v20;
      sub_10003803C(&aBlock, v35);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      char v34 = _swiftEmptyDictionarySingleton;
      sub_100034178(v35, 0xD000000000000018, 0x80000001003DD960, isUniquelyReferenced_nonNull_native);
      id v15 = v34;
      swift_release();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    id v15 = _swiftEmptyDictionarySingleton;
  }
  char v22 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v23 = (void *)swift_allocObject();
  v23[2] = a2;
  void v23[3] = v15;
  v23[4] = v32;
  v23[5] = a4;
  v23[6] = a5;
  v23[7] = v31;
  char v39 = sub_1003207BC;
  uint64_t v40 = v23;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  id v37 = sub_10000E5D0;
  uint64_t v38 = &unk_10046E400;
  uint64_t v24 = _Block_copy(&aBlock);
  id v25 = v22;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  *(void *)&v35[0] = _swiftEmptyArrayStorage;
  sub_100014390();
  sub_100010BCC((uint64_t *)&unk_10047D0F0);
  sub_1000143E0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v24);

  (*(void (**)(char *, uint64_t))(v30 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v14, v33);
  return swift_release();
}

uint64_t sub_10031F208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v10 = (void *)(a1 + 16);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v14[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0x8000000000000000;
  sub_10018B520(a2, (uint64_t)sub_10018B784, 0, isUniquelyReferenced_nonNull_native, v14);
  *uint64_t v10 = v14[0];
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_beginAccess();
  *(unsigned char *)(a3 + 16) = 1;
  uint64_t result = swift_beginAccess();
  if (*(unsigned char *)(a4 + 16))
  {
    swift_beginAccess();
    uint64_t v13 = swift_bridgeObjectRetain();
    a5(v13);
    return swift_bridgeObjectRelease();
  }
  return result;
}

id sub_10031F360(char *a1)
{
  uint64_t v2 = v1;
  unint64_t v4 = *(void **)v1;
  uint64_t v5 = *(void **)v1;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin();
  uint64_t v9 = swift_allocObject();
  swift_weakInit();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v4[10];
  *(void *)(v10 + 24) = v4[11];
  *(_OWORD *)(v10 + 32) = *((_OWORD *)v5 + 6);
  *(void *)(v10 + 48) = v4[14];
  *(void *)(v10 + 56) = v9;
  uint64_t v11 = (uint64_t (**)(uint64_t, char *))&a1[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_requestHandler];
  char *v11 = sub_10031F884;
  v11[1] = (uint64_t (*)(uint64_t, char *))v10;
  swift_release();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))((char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), &v2[*(void *)(*(void *)v2 + 184)], v6);
  unint64_t v12 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v13 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v13 + v12, (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  *(void *)(v13 + ((v8 + v12 + 7) & 0xFFFFFFFFFFFFFFF8)) = a1;
  uint64_t v14 = (uint64_t (**)())&a1[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler];
  uint64_t v15 = *(void *)&a1[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler];
  char *v14 = sub_10031F938;
  v14[1] = (uint64_t (*)())v13;
  uint64_t v16 = a1;
  sub_100011E30(v15);
  return [*(id *)&v16[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection] activate];
}

uint64_t sub_10031F5DC(uint64_t a1, char *a2)
{
  unint64_t v4 = &a2[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_requestHandler];
  *(void *)unint64_t v4 = NANBitmap.Channel.operatingClass.getter;
  *((void *)v4 + 1) = 0;
  swift_release();
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10031C180(a1, a2);
    return swift_release();
  }
  return result;
}

uint64_t sub_10031F67C(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138412290;
    uint64_t v7 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v2;

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "The invalidation handler was called for %@ before we could process its request", v5, 0xCu);
    sub_100010BCC(&qword_10047CC30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v8 = (CoreP2P::NANBitmap::Time::Control (__swiftcall **)(Swift::UInt16))&v2[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_requestHandler];
  *uint64_t v8 = NANBitmap.Time.Control.init(rawValue:);
  v8[1] = 0;
  swift_release();
  uint64_t v9 = &v2[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler];
  uint64_t v10 = *(void *)&v2[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler];
  *(void *)uint64_t v9 = 0;
  *((void *)v9 + 1) = 0;
  return sub_100011E30(v10);
}

uint64_t sub_10031F814()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10031F84C()
{
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10031F884(uint64_t a1, char *a2)
{
  return sub_10031F5DC(a1, a2);
}

uint64_t sub_10031F894()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_10031F938()
{
  uint64_t v1 = *(void *)(type metadata accessor for Logger() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void **)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_10031F67C(v0 + v2, v3);
}

uint64_t sub_10031F9C4(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_10031FA20(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v50 = a1;
  uint64_t v3 = (void *)*v1;
  uint64_t v48 = v3;
  uint64_t v4 = v3[12];
  uint64_t v5 = v3[10];
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  __chkstk_darwin();
  long long v47 = (char *)&v34 - v7;
  uint64_t v8 = swift_getAssociatedTypeWitness();
  __chkstk_darwin();
  uint64_t v40 = (char *)&v34 - v9;
  uint64_t v10 = swift_checkMetadataState();
  uint64_t v51 = *(void *)(v10 - 8);
  __chkstk_darwin();
  unint64_t v12 = (char *)&v34 - v11;
  uint64_t v39 = v8;
  uint64_t v38 = swift_getAssociatedConformanceWitness();
  type metadata accessor for Preferences();
  __chkstk_darwin();
  uint64_t v49 = (uint64_t)&v34 - v13;
  uint64_t v44 = v3[11];
  uint64_t v43 = v3[13];
  uint64_t v42 = v3[14];
  uint64_t v35 = v5;
  uint64_t v52 = v5;
  uint64_t v53 = v44;
  uint64_t v54 = v4;
  uint64_t v55 = v43;
  uint64_t v56 = v42;
  uint64_t v45 = type metadata accessor for P2PController.Components();
  uint64_t v41 = *(void *)(v45 - 8);
  __chkstk_darwin();
  uint64_t v37 = (uint64_t)&v34 - v14;
  *((unsigned char *)v2 + v3[17]) = 0;
  *(void *)((char *)v2 + *(void *)(*v2 + 144)) = 1;
  *((unsigned char *)v2 + *(void *)(*v2 + 152)) = 0;
  *(void *)((char *)v2 + *(void *)(*v2 + 160)) = 1;
  *(void *)((char *)v2 + *(void *)(*v2 + 168)) = 0;
  uint64_t v15 = *(void *)(*v2 + 176);
  *(void *)((char *)v2 + v15) = [objc_allocWithZone((Class)WiFiP2PUIAgent) init];
  Logger.init(subsystem:category:)();
  uint64_t v36 = *(void (**)(uint64_t))(v4 + 56);
  v36(v5);
  uint64_t v16 = AssociatedConformanceWitness;
  uint64_t v17 = *(void (**)(uint64_t))(AssociatedConformanceWitness + 56);
  uint64_t v18 = (uint64_t)v40;
  uint64_t v19 = v10;
  uint64_t v20 = v10;
  uint64_t v21 = v16;
  v17(v20);
  char v22 = *(void (**)(char *, uint64_t))(v51 + 8);
  v51 += 8;
  v22(v12, v19);
  Preferences.init(storage:)(v18, v39, v38, v49);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for LongTermPairingKeyStore();
  ((void (*)(uint64_t, uint64_t))v36)(v35, v4);
  uint64_t v23 = (uint64_t)v47;
  (*(void (**)(uint64_t, uint64_t))(v21 + 64))(v19, v21);
  v22(v12, v19);
  uint64_t v24 = LongTermPairingKeyStore.__allocating_init(keychain:)(v23);
  uint64_t v25 = v37;
  sub_1003169DC(v49, v24, v37);
  uint64_t v26 = (char *)v2 + *(void *)(*v2 + 128);
  uint64_t v27 = v41;
  uint64_t v28 = v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 32))(v26, v25, v45);
  swift_getWitnessTable();
  type metadata accessor for InfrastructureWiFiInterface();
  (*(void (**)(uint64_t, char *, uint64_t))(v27 + 16))(v25, v26, v28);
  uint64_t v29 = sub_10033F5F0(v50, v25);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v25, v28);
  v2[2] = v29;
  swift_retain();
  uint64_t v30 = swift_retain();
  sub_1002C87FC(v30);
  swift_release();
  swift_release();
  swift_weakAssign();
  uint64_t v31 = *(void **)((char *)v2 + *(void *)(*v2 + 176));
  swift_retain();
  id v32 = v31;
  sub_100297D74();
  swift_release();

  return v2;
}

void *sub_100320154(uint64_t a1)
{
  return sub_10031FA20(a1);
}

uint64_t sub_100320190(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = (void **)(a1 + 32);
    do
    {
      uint64_t v4 = *v3++;
      sub_1000FA3C4(&v6, v4);

      --v2;
    }
    while (v2);
    return v7;
  }
  return a2;
}

uint64_t sub_1003201FC(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = a2;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = (unsigned __int8 *)(a1 + 49);
    do
    {
      uint64_t v4 = *(void *)(v3 - 17);
      uint64_t v5 = *(void *)(v3 - 9);
      int v6 = *(v3 - 1);
      int v7 = *v3;
      v3 += 24;
      unsigned int v8 = v6 | (v7 << 8);
      swift_bridgeObjectRetain();
      sub_1003A567C((uint64_t)&v10, v4, v5, v8);
      swift_bridgeObjectRelease();
      --v2;
    }
    while (v2);
    return v11;
  }
  return a2;
}

uint64_t sub_10032028C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003202C4()
{
  return sub_1003207D8((void (*)(void))&_swift_release);
}

uint64_t sub_1003202DC()
{
  return sub_100320364(sub_10031EB58);
}

uint64_t sub_1003202F4(uint64_t a1, void (*a2)(void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_100320334()
{
  return sub_1003207D8((void (*)(void))&_swift_release);
}

uint64_t sub_10032034C()
{
  return sub_100320364(sub_10031EE70);
}

uint64_t sub_100320364(uint64_t (*a1)(void, void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_10032037C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(*(void *)a1 + 408) + 88) + 120))(*(void *)(v1 + 16), *(void *)(*(void *)(*(void *)a1 + 408) + 80));
}

uint64_t sub_1003203E8(uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v1 + 24);
  if (!a1)
  {
    uint64_t v4 = (uint64_t *)(*(void *)(v1 + 16) + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler);
    uint64_t v5 = *v4;
    *uint64_t v4 = 0;
    v4[1] = 0;
    sub_100011E30(v5);
  }
  return v3(a1);
}

uint64_t sub_100320448()
{
  return sub_10031E55C();
}

uint64_t sub_100320464(uint64_t a1)
{
  return sub_10031EAC4(a1, *(void *)(v1 + 16), *(void (**)(void))(v1 + 24));
}

uint64_t sub_100320470()
{
  return sub_1003AB05C(*(void (**)(void *))(v0 + 24));
}

uint64_t sub_1003204A4(uint64_t a1)
{
  if (a1) {
    return (*(uint64_t (**)(void *))(v1 + 24))(_swiftEmptyArrayStorage);
  }
  uint64_t v3 = (uint64_t *)(*(void *)(v1 + 16) + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler);
  uint64_t v4 = *v3;
  uint64_t *v3 = 0;
  v3[1] = 0;

  return sub_100011E30(v4);
}

uint64_t sub_100320514(uint64_t a1)
{
  return sub_10031E398(a1, *(unsigned __int16 *)(v1 + 16) | ((unint64_t)*(unsigned int *)(v1 + 18) << 16), *(uint64_t (**)(uint64_t))(v1 + 24));
}

uint64_t sub_10032053C(uint64_t a1)
{
  if (a1) {
    return (*(uint64_t (**)(void))(v1 + 24))(0);
  }
  uint64_t v3 = (uint64_t *)(*(void *)(v1 + 16) + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler);
  uint64_t v4 = *v3;
  uint64_t *v3 = 0;
  v3[1] = 0;

  return sub_100011E30(v4);
}

void sub_1003205A8()
{
  uint64_t v1 = *(void (**)(void))(v0 + 16);
  uint64_t v2 = (void *)sub_100376F44(1);
  v1();
}

uint64_t sub_100320604(uint64_t a1)
{
  if (a1) {
    return (*(uint64_t (**)(void))(v1 + 24))(0);
  }
  uint64_t v3 = (uint64_t *)(*(void *)(v1 + 16) + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler);
  uint64_t v4 = *v3;
  uint64_t *v3 = 0;
  v3[1] = 0;

  return sub_100011E30(v4);
}

uint64_t sub_100320670()
{
  return sub_1003767D0(*(char **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10032069C(uint64_t a1)
{
  return sub_100320720(a1, (void (*)(uint64_t, uint64_t))sub_1002FD104);
}

uint64_t sub_1003206C8(uint64_t a1)
{
  return sub_100320720(a1, (void (*)(uint64_t, uint64_t))sub_1002FD060);
}

uint64_t sub_1003206F4(uint64_t a1)
{
  return sub_100320720(a1, (void (*)(uint64_t, uint64_t))sub_1002FD034);
}

uint64_t sub_100320720(uint64_t a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  sub_100354870();
  a2(v4, v5);
  return swift_release();
}

uint64_t sub_100320788(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 3712)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1003207A4()
{
  return sub_1003207D8((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_1003207C0()
{
  return sub_1003207D8((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_1003207D8(void (*a1)(void))
{
  swift_release();
  a1(*(void *)(v1 + 24));
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v1, 64, 7);
}

uint64_t sub_100320840()
{
  return sub_10031F208(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void (**)(uint64_t))(v0 + 48));
}

void sub_1003208A0()
{
  type metadata accessor for NANSubscribe.Configuration();
  if (v0 <= 0x3F)
  {
    type metadata accessor for DispatchTime();
    if (v1 <= 0x3F)
    {
      type metadata accessor for Logger();
      if (v2 <= 0x3F)
      {
        sub_1002B673C();
        if (v3 <= 0x3F) {
          swift_initClassMetadata2();
        }
      }
    }
  }
}

uint64_t sub_100320A18(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = a2;
  uint64_t v41 = sub_100010BCC(&qword_1004852C8);
  __chkstk_darwin();
  uint64_t v40 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v39 = (char *)&v34 - v4;
  __chkstk_darwin();
  uint64_t v38 = (char *)&v34 - v5;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v35 = a1 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & v6;
  int64_t v36 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v42 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  for (int64_t i = 0; ; int64_t i = v44)
  {
    if (v9)
    {
      uint64_t v43 = (v9 - 1) & v9;
      int64_t v44 = i;
      unint64_t v12 = __clz(__rbit64(v9)) | (i << 6);
      goto LABEL_5;
    }
    int64_t v30 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v30 >= v36) {
      return swift_release();
    }
    unint64_t v31 = *(void *)(v35 + 8 * v30);
    int64_t v32 = i + 1;
    if (!v31)
    {
      int64_t v32 = i + 2;
      if (i + 2 >= v36) {
        return swift_release();
      }
      unint64_t v31 = *(void *)(v35 + 8 * v32);
      if (!v31)
      {
        int64_t v32 = i + 3;
        if (i + 3 >= v36) {
          return swift_release();
        }
        unint64_t v31 = *(void *)(v35 + 8 * v32);
        if (!v31)
        {
          int64_t v32 = i + 4;
          if (i + 4 >= v36) {
            return swift_release();
          }
          unint64_t v31 = *(void *)(v35 + 8 * v32);
          if (!v31) {
            break;
          }
        }
      }
    }
LABEL_22:
    uint64_t v43 = (v31 - 1) & v31;
    int64_t v44 = v32;
    unint64_t v12 = __clz(__rbit64(v31)) + (v32 << 6);
LABEL_5:
    uint64_t v13 = *(void *)(v42 + 56);
    uint64_t v14 = *(void *)(v42 + 48) - v12 + 8 * v12;
    __int16 v15 = *(_WORD *)(v14 + 4);
    char v16 = *(unsigned char *)(v14 + 6);
    uint64_t v17 = type metadata accessor for NANPeer.Service.AuthenticationStatus(0);
    uint64_t v18 = v41;
    uint64_t v19 = (uint64_t)v38;
    LODWORD(v14) = *(_DWORD *)v14;
    sub_10032DFF4(v13 + *(void *)(*(void *)(v17 - 8) + 72) * v12, (uint64_t)&v38[*(int *)(v41 + 48)], type metadata accessor for NANPeer.Service.AuthenticationStatus);
    *(_DWORD *)uint64_t v19 = v14;
    *(_WORD *)(v19 + 4) = v15;
    *(unsigned char *)(v19 + 6) = v16;
    uint64_t v20 = v39;
    sub_10006EC68(v19, (uint64_t)v39, &qword_1004852C8);
    uint64_t v21 = *(int *)(v18 + 48);
    char v22 = v40;
    uint64_t v23 = (uint64_t)&v40[v21];
    uint64_t v24 = v20[1];
    uint64_t v25 = v20[2];
    uint64_t v26 = v20[3];
    uint64_t v27 = v20[4];
    uint64_t v28 = v20[5];
    uint64_t v29 = v20[6];
    *uint64_t v40 = *v20;
    v22[1] = v24;
    void v22[2] = v25;
    v22[3] = v26;
    unsigned char v22[4] = v27;
    v22[5] = v28;
    v22[6] = v29;
    sub_10032DFF4((uint64_t)&v20[v21], v23, type metadata accessor for NANPeer.Service.AuthenticationStatus);
    sub_1003A5210((uint64_t)v45, v24 | (v25 << 8) | (v26 << 16) | (v27 << 24) | (v28 << 32) | (v29 << 40));
    sub_10032DD6C(v23, type metadata accessor for NANPeer.Service.AuthenticationStatus);
    uint64_t result = sub_1000380B4((uint64_t)v20, &qword_1004852C8);
    unint64_t v9 = v43;
  }
  uint64_t v33 = i + 5;
  if (i + 5 >= v36) {
    return swift_release();
  }
  unint64_t v31 = *(void *)(v35 + 8 * v33);
  if (v31)
  {
    int64_t v32 = i + 5;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v32 = v33 + 1;
    if (__OFADD__(v33, 1)) {
      break;
    }
    if (v32 >= v36) {
      return swift_release();
    }
    unint64_t v31 = *(void *)(v35 + 8 * v32);
    ++v33;
    if (v31) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_100320D8C()
{
  uint64_t v1 = v0 + qword_100488970;
  swift_beginAccess();
  uint64_t result = type metadata accessor for NANSubscribe.Configuration();
  *(unsigned char *)(v1 + *(int *)(result + 60)) = 0;
  return result;
}

uint64_t sub_100320DE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + qword_100486E08);
  if (v3)
  {
    *(void *)(a1 + 24) = swift_getObjectType();
    *(void *)a1 = v3;
  }
  else
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }

  return swift_unknownObjectRetain();
}

uint64_t sub_100320E48()
{
  uint64_t v0 = type metadata accessor for DispatchPredicate();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (uint64_t *)((char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v5 = (void *)*v4;
  uint64_t *v3 = *v4;
  (*(void (**)(uint64_t *, void, uint64_t))(v1 + 104))(v3, enum case for DispatchPredicate.onQueue(_:), v0);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v1 + 8))(v3, v0);
  if (v5) {
    return sub_100329CE8();
  }
  __break(1u);
  return result;
}

uint64_t sub_100320F58()
{
  return swift_unownedRetainStrong();
}

uint64_t sub_100320F68@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + qword_100488970;
  swift_beginAccess();
  return sub_10032DFF4(v3, a1, (uint64_t (*)(void))type metadata accessor for NANSubscribe.Configuration);
}

uint64_t sub_100320FD0(uint64_t a1)
{
  if (!*(void *)(a1 + 24))
  {
    sub_1000380B4(a1, &qword_10047D0D0);
    goto LABEL_5;
  }
  sub_100010BCC(&qword_100486390);
  if (!swift_dynamicCast())
  {
LABEL_5:
    uint64_t v2 = 0;
    goto LABEL_6;
  }
  uint64_t v2 = v4;
LABEL_6:
  *(void *)(v1 + qword_100486E08) = v2;
  return swift_unknownObjectRelease();
}

uint64_t sub_100321060@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + qword_100488980;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_1003210D4()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v3 = type metadata accessor for Preferences();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  id v6 = (char *)&v29 - v5;
  swift_unownedRetainStrong();
  WiFiInterface.preferences.getter();
  swift_release();
  char v7 = Preferences.subscribeFilterEnabled.getter();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) != 0 && *(unsigned char *)(v1 + qword_100488978) == 1)
  {
    uint64_t v9 = v1 + qword_100486E10;
    swift_beginAccess();
    if (*(void *)(*(void *)v9 + 16))
    {
      uint64_t v10 = *(void *)(v9 + 8);
      __int16 v11 = *(unsigned __int8 *)(v9 + 16);
      __int16 v12 = *(unsigned __int8 *)(v9 + 17);
      uint64_t v13 = swift_bridgeObjectRetain();
      LOBYTE(v18) = sub_1002AA2E8(v13, v10, v11 | (unsigned __int16)(v12 << 8));
      uint64_t v15 = v14;
      unint64_t v17 = v16;
      swift_bridgeObjectRelease();
      unsigned int v18 = v18;
    }
    else
    {
      uint64_t v15 = 0;
      unint64_t v17 = 0;
      unsigned int v18 = 512;
    }
    uint64_t v19 = v1 + qword_100488970;
    swift_beginAccess();
    uint64_t result = type metadata accessor for NANSubscribe.Configuration();
    uint64_t v20 = v19 + *(int *)(result + 56);
    uint64_t v22 = *(void *)v20;
    unint64_t v21 = *(void *)(v20 + 8);
    __int16 v23 = *(_WORD *)(v20 + 16);
    int v24 = v23 & 0xFF00;
    if (v18 > 0x1FF)
    {
      if (v24 == 512) {
        return result;
      }
    }
    else if (v24 != 512)
    {
      sub_10014E854(v22, v21, v23);
      sub_10014E854(v15, v17, v18);
      if (_s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v15, v17, v22, v21))
      {
        sub_1000CA4D0(v22, v21, v23);
        sub_1000CA4D0(v15, v17, v18);
        if (v18 == v23 && (v23 & 0x100) == 0) {
          return sub_1000CA4D0(v15, v17, v18);
        }
        goto LABEL_16;
      }
      sub_1000CA4D0(v22, v21, v23);
      uint64_t v25 = v15;
      unint64_t v26 = v17;
      __int16 v27 = v18;
LABEL_15:
      sub_1000CA4D0(v25, v26, v27);
LABEL_16:
      __chkstk_darwin();
      *(&v29 - 4) = v1;
      *(&v29 - 3) = v15;
      *(&v29 - 2) = v17;
      *((_WORD *)&v29 - 4) = v18;
      uint64_t WitnessTable = swift_getWitnessTable();
      sub_100301F7C((void (*)(uint64_t))sub_10032DF68, (uint64_t)(&v29 - 6), ObjectType, WitnessTable);
      return sub_1000CA4D0(v15, v17, v18);
    }
    sub_10014E854(v22, v21, v23);
    sub_10014E854(v15, v17, v18);
    sub_1000CA4D0(v15, v17, v18);
    uint64_t v25 = v22;
    unint64_t v26 = v21;
    __int16 v27 = v23;
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_100321510()
{
  uint64_t v1 = v0;
  uint64_t v2 = swift_isaMask & *v0;
  uint64_t v3 = type metadata accessor for DispatchTimeInterval();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  id v6 = (uint64_t *)((char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  uint64_t v8 = (uint64_t *)((char *)&v21 - v7);
  __chkstk_darwin();
  uint64_t v10 = (uint64_t *)((char *)&v21 - v9);
  __int16 v11 = (char *)v1 + qword_100488990;
  uint64_t result = swift_beginAccess();
  if (*(void *)(*(void *)v11 + 16)
    || (v13 = (char *)v1 + qword_100486E10, uint64_t result = swift_beginAccess(), *(void *)(*(void *)v13 + 16))
    || (v14 = (char *)v1 + qword_100488988, uint64_t result = swift_beginAccess(), *(void *)(*(void *)v14 + 16)))
  {
    uint64_t v15 = qword_100486E20;
    if (*(void *)((char *)v1 + qword_100486E20)) {
      return result;
    }
    *uint64_t v10 = 5;
    uint64_t v16 = enum case for DispatchTimeInterval.seconds(_:);
    uint64_t v22 = v2;
    unint64_t v17 = *(void (**)(void *, uint64_t, uint64_t))(v4 + 104);
    v17(v10, enum case for DispatchTimeInterval.seconds(_:), v3);
    id v23 = (id)*OS_dispatch_queue.nan.unsafeMutableAddressor();
    *uint64_t v8 = 5;
    v17(v8, v16, v3);
    uint64_t v18 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v19 = (void *)swift_allocObject();
    uint64_t v20 = v22;
    v19[2] = *(void *)(v22 + 80);
    v19[3] = *(void *)(v20 + 88);
    void v19[4] = v18;
    *id v6 = 100;
    v17(v6, enum case for DispatchTimeInterval.milliseconds(_:), v3);
    type metadata accessor for P2PTimer();
    swift_allocObject();
    *(void *)((char *)v1 + v15) = P2PTimer.init(deadlineAfter:on:repeating:leeway:_:)((uint64_t)v10, v23, (uint64_t)v8, (uint64_t)v6, (uint64_t)sub_10032DEE0, (uint64_t)v19);
  }
  else
  {
    *(void *)((char *)v1 + qword_100486E20) = 0;
  }
  return swift_release();
}

uint64_t sub_100321824(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v4 = a3;
  unsigned int v7 = a3 >> 8;
  uint64_t v8 = v3 + qword_100486E10;
  swift_beginAccess();
  *(void *)uint64_t v8 = a1;
  *(void *)(v8 + 8) = a2;
  *(unsigned char *)(v8 + 16) = v4 & 1;
  *(unsigned char *)(v8 + 17) = v7;
  swift_bridgeObjectRelease();
  uint64_t v9 = sub_1003210D4();
  return sub_100321510(v9);
}

void *sub_1003218A8(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return sub_1003218F4(a1, a2);
}

void *sub_1003218F4(uint64_t a1, uint64_t a2)
{
  uint64_t v83 = (void *)a2;
  uint64_t v84 = a1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = swift_isaMask & *v2;
  uint64_t v4 = type metadata accessor for LongTermPairingKeys(0);
  uint64_t v80 = *(void *)(v4 - 8);
  uint64_t v81 = v4;
  __chkstk_darwin();
  uint64_t v72 = (uint64_t)v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = *(void *)(v3 + 88);
  uint64_t v6 = *(void *)(v3 + 80);
  uint64_t v75 = *(void *)(v71 + 8);
  uint64_t v78 = v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v76 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v77 = AssociatedTypeWitness;
  __chkstk_darwin();
  uint64_t v73 = (char *)v59 - v8;
  sub_100010BCC(&qword_1004852C0);
  __chkstk_darwin();
  uint64_t v79 = (uint64_t)v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v74 = (char *)v59 - v10;
  uint64_t v11 = type metadata accessor for DispatchTimeInterval();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchTime();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin();
  uint64_t v18 = (char *)v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((unsigned char *)v2 + qword_100488978) = 0;
  uint64_t v19 = (char *)v2 + qword_100486DF8;
  type metadata accessor for P2PTimer();
  uint64_t v67 = v2;
  uint64_t v20 = v2;
  variable initialization expression of AWDLPeer.lastUpdated();
  uint64_t v21 = v84;
  uint64_t v22 = NANConstants.maximumServiceRetryRate.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v22, v11);
  uint64_t v68 = v19;
  - infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  id v23 = *(void (**)(char *, uint64_t))(v16 + 8);
  uint64_t v69 = v16 + 8;
  uint64_t v70 = v15;
  __int16 v65 = v23;
  v23(v18, v15);
  uint64_t v63 = qword_100486E00;
  *(void *)((char *)v20 + qword_100486E00) = 0;
  uint64_t v64 = qword_100486E08;
  *(void *)((char *)v20 + qword_100486E08) = 0;
  int v24 = (char *)v20 + qword_100488980;
  Logger.init(subsystem:category:)();
  uint64_t v25 = (char *)v20 + qword_100486E10;
  *(void *)uint64_t v25 = &_swiftEmptySetSingleton;
  *((void *)v25 + 1) = 0;
  *((_WORD *)v25 + 8) = 1025;
  uint64_t v66 = qword_100488988;
  *(void *)((char *)v20 + qword_100488988) = _swiftEmptyDictionarySingleton;
  uint64_t v26 = qword_100486E20;
  *(void *)((char *)v20 + qword_100486E20) = 0;
  uint64_t v27 = qword_100488990;
  *(void *)((char *)v20 + qword_100488990) = &_swiftEmptySetSingleton;
  uint64_t v61 = qword_100486DF0;
  *(void *)((char *)v20 + qword_100486DF0) = v21;
  uint64_t v28 = v83;
  uint64_t v62 = (uint64_t)v20 + qword_100488970;
  sub_10032DFF4((uint64_t)v83, (uint64_t)v20 + qword_100488970, (uint64_t (*)(void))type metadata accessor for NANSubscribe.Configuration);
  uint64_t v29 = *(int *)(type metadata accessor for NANSubscribe.Configuration() + 68);
  if (*((unsigned char *)v28 + v29))
  {
    uint64_t v30 = v78;
    uint64_t v32 = v80;
    uint64_t v31 = v81;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v80 + 56))((uint64_t)v20 + qword_100486E18, 1, 1, v81);
    swift_unownedRetain();
  }
  else
  {
    v59[1] = v26;
    v59[2] = v27;
    unint64_t v60 = v24;
    swift_unownedRetainStrong();
    uint64_t v34 = v76;
    uint64_t v33 = v77;
    uint64_t v35 = v73;
    (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v73, v21 + *(void *)(*(void *)v21 + 112), v77);
    swift_unownedRetain();
    swift_release();
    uint64_t v30 = v78;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 128))(v33, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v33);
    uint64_t v38 = (uint64_t)v74;
    (*(void (**)(void, void, BOOL))(*(void *)v37 + 136))(v28[1], v28[2], (*((unsigned char *)v28 + v29) & 1) == 0);
    swift_release();
    uint64_t v39 = (uint64_t)v20 + qword_100486E18;
    sub_10006EC68(v38, (uint64_t)v20 + qword_100486E18, &qword_1004852C0);
    uint64_t v40 = v79;
    sub_10032DD04(v39, v79);
    uint64_t v32 = v80;
    uint64_t v41 = v40;
    uint64_t v31 = v81;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v80 + 48))(v41, 1, v81) == 1)
    {
      sub_1000380B4(v79, &qword_1004852C0);
      sub_10000F000();
      swift_allocError();
      *(_OWORD *)uint64_t v42 = xmmword_1003D5850;
      *(unsigned char *)(v42 + 16) = 1;
      swift_willThrow();
      swift_release();
      sub_10032DD6C((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for NANSubscribe.Configuration);
      swift_unownedRelease();
      sub_10032DD6C(v62, (uint64_t (*)(void))type metadata accessor for NANSubscribe.Configuration);
      v65(v68, v70);
      swift_release();
      swift_unknownObjectRelease();
      uint64_t v43 = type metadata accessor for Logger();
      (*(void (**)(char *, uint64_t))(*(void *)(v43 - 8) + 8))(v60, v43);
      swift_bridgeObjectRelease();
      sub_1000380B4(v39, &qword_1004852C0);
      swift_bridgeObjectRelease();
      swift_release();

      swift_bridgeObjectRelease();
      swift_deallocPartialClassInstance();
      return v28;
    }

    sub_1000380B4(v79, &qword_1004852C0);
  }
  v85.receiver = v20;
  v85.super_class = ObjectType;
  id v44 = [super init];
  uint64_t v45 = (uint64_t)v44 + qword_100486E18;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))((uint64_t)v44 + qword_100486E18, 1, v31))
  {
    id v46 = v44;
  }
  else
  {
    uint64_t v47 = v72;
    sub_10032DFF4(v45, v72, type metadata accessor for LongTermPairingKeys);
    uint64_t v48 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v49 = (void *)swift_allocObject();
    uint64_t v50 = v71;
    v49[2] = v30;
    v49[3] = v50;
    v49[4] = v48;
    id v51 = v44;
    swift_retain();
    LongTermPairingKeys.updatedPairedDevicesHandler.setter((uint64_t)sub_10032E05C, (uint64_t)v49);
    sub_10032DD6C(v47, type metadata accessor for LongTermPairingKeys);
    swift_release();
  }
  uint64_t v28 = v44;
  uint64_t v52 = Logger.logObject.getter();
  os_log_type_t v53 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v52, v53))
  {
    uint64_t v54 = (uint8_t *)swift_slowAlloc();
    uint64_t v55 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v54 = 138412290;
    uint64_t v86 = v28;
    uint64_t v56 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v55 = v28;

    _os_log_impl((void *)&_mh_execute_header, v52, v53, "Created %@", v54, 0xCu);
    sub_100010BCC(&qword_10047CC30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v52 = v28;
  }
  uint64_t v57 = (uint64_t)v83;

  swift_release();
  sub_10032DD6C(v57, (uint64_t (*)(void))type metadata accessor for NANSubscribe.Configuration);
  return v28;
}

uint64_t sub_10032239C()
{
  uint64_t v1 = (uint64_t *)(v0 + qword_100486E10);
  swift_beginAccess();
  uint64_t v2 = v1[1];
  unsigned __int8 v3 = *((unsigned char *)v1 + 16);
  unsigned __int8 v4 = *((unsigned char *)v1 + 17);
  uint64_t v13 = *v1;
  uint64_t v14 = v2;
  unsigned __int8 v15 = v3;
  unsigned __int8 v16 = v4;
  uint64_t v5 = (uint64_t *)(v0 + qword_100488988);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  uint64_t v6 = swift_bridgeObjectRetain();
  uint64_t v7 = sub_10032CB4C(v6, (uint64_t)&v13);
  swift_bridgeObjectRelease();
  *uint64_t v5 = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = v14;
  int v9 = v15;
  int v10 = v16;
  uint64_t v11 = swift_bridgeObjectRetain();
  sub_100321824(v11, v8, v9 | (v10 << 8));
  return swift_bridgeObjectRelease();
}

id sub_100322488()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  sub_100010BCC(&qword_1004852C0);
  __chkstk_darwin();
  unsigned __int8 v4 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)v22 - v7;
  if (v1[qword_100488978] == 1)
  {
    uint64_t v9 = *(void *)&v1[qword_100486DF0];
    swift_unownedRetainStrong();
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9 + *(void *)(*(void *)v9 + 96), AssociatedTypeWitness);
    swift_release();
    int v10 = &v1[qword_100488970];
    swift_beginAccess();
    uint64_t v11 = *v10;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 232))(v11, AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  }
  uint64_t v13 = qword_100486E08;
  uint64_t v14 = *(void **)&v1[qword_100486E08];
  if (v14) {
    [v14 subscribeTerminatedWithReason:-1];
  }
  *(void *)&v1[v13] = 0;
  swift_unknownObjectRelease();
  sub_10032DD04((uint64_t)&v1[qword_100486E18], (uint64_t)v4);
  uint64_t v15 = type metadata accessor for LongTermPairingKeys(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v4, 1, v15) == 1)
  {
    sub_1000380B4((uint64_t)v4, &qword_1004852C0);
  }
  else
  {
    LongTermPairingKeys.updatedPairedDevicesHandler.setter(0, 0);
    sub_10032DD6C((uint64_t)v4, type metadata accessor for LongTermPairingKeys);
  }
  unsigned __int8 v16 = v1;
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    v22[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 138412290;
    v22[5] = v16;
    uint64_t v20 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(void *)v22[0] = v1;

    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Destroyed %@", v19, 0xCu);
    sub_100010BCC(&qword_10047CC30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v17 = v16;
  }

  v23.receiver = v16;
  v23.super_class = ObjectType;
  return [super dealloc];
}

id sub_1003228DC(void *a1)
{
  id v1 = a1;
  return sub_100322488();
}

uint64_t sub_100322904(uint64_t a1)
{
  swift_unownedRelease();
  sub_10032DD6C(a1 + qword_100488970, (uint64_t (*)(void))type metadata accessor for NANSubscribe.Configuration);
  uint64_t v2 = a1 + qword_100486DF8;
  uint64_t v3 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_release();
  swift_unknownObjectRelease();
  uint64_t v4 = a1 + qword_100488980;
  uint64_t v5 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  sub_1000380B4(a1 + qword_100486E18, &qword_1004852C0);
  swift_bridgeObjectRelease();
  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_100322A64()
{
  uint64_t v2 = v0;
  uint64_t v3 = swift_isaMask & *v0;
  type metadata accessor for NANSubscribe.Configuration();
  __chkstk_darwin();
  uint64_t v42 = ((char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v40 = *(void *)(v3 + 88);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v41 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v38 - v6;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (uint64_t *)((char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v13 = (void *)*v12;
  uint64_t *v11 = *v12;
  (*(void (**)(uint64_t *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v9 + 8))(v11, v8);
  if (v13)
  {
    if (v2[qword_100488978]) {
      return;
    }
    uint64_t v15 = v2;
    uint64_t v38 = qword_100488978;
    uint64_t v16 = *(void *)&v2[qword_100486DF0];
    swift_unownedRetainStrong();
    sub_1003546AC();
    uint64_t v39 = (objc_class *)v2;
    if (v1)
    {
      swift_release();
      uint64_t v47 = v1;
      swift_errorRetain();
      sub_100010BCC((uint64_t *)&unk_1004843F0);
      if (!swift_dynamicCast()) {
        goto LABEL_13;
      }
      if (v46 != 1)
      {
        sub_100012AA4((uint64_t)v44, v45, v46);
        goto LABEL_13;
      }
      if (v44 != (objc_class *)7)
      {
LABEL_13:
        swift_errorRelease();
        return;
      }
      swift_errorRelease();
      swift_unownedRetainStrong();
      char v21 = sub_100355DD4();
      swift_release();
      if (v21)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v22 & 1) == 0)
        {
          sub_10000F000();
          swift_allocError();
          *(_OWORD *)uint64_t v23 = xmmword_1003B0090;
          *(unsigned char *)(v23 + 16) = 1;
          swift_willThrow();
          goto LABEL_13;
        }
      }
      int v24 = v39;
      uint64_t v25 = v39;
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = (uint8_t *)swift_slowAlloc();
        uint64_t v42 = swift_slowAlloc();
        *(_DWORD *)uint64_t v28 = 138412290;
        uint64_t v43 = v25;
        uint64_t v29 = v25;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v42->Class isa = v24;

        _os_log_impl((void *)&_mh_execute_header, v26, v27, "%@ faking start until NAN becomes available", v28, 0xCu);
        sub_100010BCC(&qword_10047CC30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      swift_errorRelease();
    }
    else
    {
      swift_release();
      swift_unownedRetainStrong();
      uint64_t v17 = v41;
      (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v7, v16 + *(void *)(*(void *)v16 + 96), AssociatedTypeWitness);
      swift_release();
      uint64_t v18 = (uint64_t)&v15[qword_100488970];
      swift_beginAccess();
      uint64_t v19 = v42;
      sub_10032DFF4(v18, (uint64_t)v42, (uint64_t (*)(void))type metadata accessor for NANSubscribe.Configuration);
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      (*(void (**)(NSObject *, uint64_t, uint64_t))(AssociatedConformanceWitness + 184))(v19, AssociatedTypeWitness, AssociatedConformanceWitness);
      sub_10032DD6C((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for NANSubscribe.Configuration);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v7, AssociatedTypeWitness);
    }
    uint64_t v30 = v39;
    *((unsigned char *)v39 + v38) = 1;
    uint64_t v31 = v30;
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.default.getter();
    uint64_t v42 = v32;
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 138412290;
      id v44 = v31;
      uint64_t v35 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(void *)uint64_t v41 = v30;

      _os_log_impl((void *)&_mh_execute_header, v42, v33, "%@ was started", v34, 0xCu);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    int64_t v36 = *(void **)((char *)v31 + qword_100486E08);
    if (v36)
    {
      uint64_t v37 = (unsigned __int8 *)v31 + qword_100488970;
      swift_beginAccess();
      [v36 subscribeStartedWithInstanceID:*v37];
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100323214(uint64_t a1)
{
  uint64_t v3 = swift_isaMask & *v1;
  type metadata accessor for NANSubscribe.Configuration();
  __chkstk_darwin();
  uint64_t v107 = (uint64_t)&v103 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v104 = (uint64_t)&v103 - v5;
  uint64_t v109 = *(void *)(v3 + 88);
  uint64_t v122 = (uint64_t)v1;
  uint64_t v108 = *(void *)(v3 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v116 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  id v106 = (char *)&v103 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  Class v105 = (char *)&v103 - v7;
  uint64_t v8 = type metadata accessor for DispatchTime();
  uint64_t v118 = *(void *)(v8 - 8);
  Class v119 = (void *)v8;
  __chkstk_darwin();
  uint64_t v112 = (char *)&v103 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v117 = (char *)&v103 - v10;
  uint64_t v11 = type metadata accessor for DispatchTimeInterval();
  uint64_t v114 = *(void *)(v11 - 8);
  uint64_t v115 = v11;
  __chkstk_darwin();
  char v113 = (char *)&v103 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v111 = (char *)&v103 - v13;
  type metadata accessor for DriverEvent(0);
  __chkstk_darwin();
  uint64_t v120 = (char *)&v103 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v121 = (uint64_t)&v103 - v15;
  __chkstk_darwin();
  uint64_t v17 = (unsigned __int8 *)&v103 - v16;
  __chkstk_darwin();
  uint64_t v19 = (char *)&v103 - v18;
  __chkstk_darwin();
  char v21 = (char *)&v103 - v20;
  uint64_t v22 = type metadata accessor for DispatchPredicate();
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin();
  uint64_t v25 = (uint64_t *)((char *)&v103 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v26 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  os_log_type_t v27 = (void *)*v26;
  *uint64_t v25 = *v26;
  (*(void (**)(uint64_t *, void, uint64_t))(v23 + 104))(v25, enum case for DispatchPredicate.onQueue(_:), v22);
  id v28 = v27;
  LOBYTE(v27) = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v23 + 8))(v25, v22);
  if ((v27 & 1) == 0)
  {
    __break(1u);
    JUMPOUT(0x10032482CLL);
  }
  sub_10032DFF4(a1, (uint64_t)v21, type metadata accessor for DriverEvent);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v30 = (uint64_t)v21;
  if (EnumCaseMultiPayload == 4)
  {
    sub_10032DFF4((uint64_t)v21, (uint64_t)v17, type metadata accessor for DriverEvent);
    int v36 = *v17;
    uint64_t v31 = (unsigned __int8 *)v122;
    if (v36 == 1)
    {
      uint64_t v37 = qword_100488978;
      if (*(unsigned char *)(v122 + qword_100488978) == 1)
      {
        uint64_t v38 = *(void *)(v122 + qword_100486DF0);
        swift_unownedRetainStrong();
        sub_1003546AC();
        uint64_t v121 = v37;
        swift_release();
        swift_unownedRetainStrong();
        uint64_t v79 = v116;
        uint64_t v80 = v106;
        uint64_t v81 = AssociatedTypeWitness;
        (*(void (**)(char *, uint64_t, uint64_t))(v116 + 16))(v106, v38 + *(void *)(*(void *)v38 + 96), AssociatedTypeWitness);
        swift_release();
        uint64_t v82 = (uint64_t)&v31[qword_100488970];
        swift_beginAccess();
        uint64_t v83 = v107;
        sub_10032DFF4(v82, v107, (uint64_t (*)(void))type metadata accessor for NANSubscribe.Configuration);
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 184))(v83, v81, AssociatedConformanceWitness);
        sub_10032DD6C(v83, (uint64_t (*)(void))type metadata accessor for NANSubscribe.Configuration);
        (*(void (**)(char *, uint64_t))(v79 + 8))(v80, v81);
      }
      return sub_10032DD6C(v30, type metadata accessor for DriverEvent);
    }
LABEL_21:
    uint64_t v120 = v21;
    uint64_t v69 = a1;
    uint64_t v70 = v121;
    sub_10032DFF4(v69, v121, type metadata accessor for DriverEvent);
    uint64_t v71 = v31;
    uint64_t v72 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v72, v73))
    {
      uint64_t v74 = swift_slowAlloc();
      Class v119 = (void *)swift_slowAlloc();
      uint64_t v122 = swift_slowAlloc();
      v127[0] = v122;
      *(_DWORD *)uint64_t v74 = 138412546;
      v126[0] = v71;
      uint64_t v75 = v71;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *Class v119 = v31;

      *(_WORD *)(v74 + 12) = 2080;
      uint64_t v76 = DriverEvent.description.getter();
      v126[0] = sub_100010680(v76, v77, v127);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10032DD6C(v70, type metadata accessor for DriverEvent);
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "%@ received an unexpected %s", (uint8_t *)v74, 0x16u);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_10032DD6C(v70, type metadata accessor for DriverEvent);
    }
    uint64_t v30 = (uint64_t)v120;
    return sub_10032DD6C(v30, type metadata accessor for DriverEvent);
  }
  uint64_t v31 = (unsigned __int8 *)v122;
  if (EnumCaseMultiPayload) {
    goto LABEL_21;
  }
  sub_10032DFF4((uint64_t)v21, (uint64_t)v19, type metadata accessor for DriverEvent);
  sub_10006E544((uint64_t)v19, (uint64_t)v126);
  sub_10006E544((uint64_t)v126, (uint64_t)v127);
  int v32 = sub_1001343E0((uint64_t)v127);
  if (v32 == 13)
  {
    uint64_t v39 = NANBitmap.Channel.operatingClass.getter(v127);
    if (v31[qword_100488978] == 1) {
      sub_100327BD4(*(void *)v39, *(void *)(v39 + 8), *(void *)(v39 + 16));
    }
    goto LABEL_14;
  }
  if (v32 != 11)
  {
    if (v32 == 2)
    {
      os_log_type_t v33 = (unint64_t *)NANBitmap.Channel.operatingClass.getter(v127);
      if (v31[qword_100488978] == 1)
      {
        uint64_t v34 = v33[1];
        unint64_t v35 = *v33;
        sub_10032485C(*v33, v34, v33[2], 0);
        sub_100326968(v35, v34);
      }
LABEL_14:
      sub_1003080B8((uint64_t)v126);
      return sub_10032DD6C(v30, type metadata accessor for DriverEvent);
    }
    sub_1003080B8((uint64_t)v126);
    goto LABEL_21;
  }
  uint64_t v121 = *(void *)(NANBitmap.Channel.operatingClass.getter(v127) + 8);
  uint64_t v40 = qword_100488978;
  int v41 = v31[qword_100488978];
  uint64_t v107 = qword_100488978;
  if (v41 != 1) {
    goto LABEL_33;
  }
  uint64_t v42 = type metadata accessor for P2PTimer();
  uint64_t v43 = v117;
  uint64_t v103 = v42;
  variable initialization expression of AWDLPeer.lastUpdated();
  id v44 = (char *)&v31[qword_100486DF8];
  swift_beginAccess();
  uint64_t v45 = v118;
  char v46 = v119;
  uint64_t v47 = *(void (**)(char *, char *, void *))(v118 + 16);
  uint64_t v48 = v112;
  id v106 = v44;
  v47(v112, v44, v119);
  uint64_t v49 = v111;
  DispatchTime.distance(to:)();
  uint64_t v50 = *(void (**)(char *, void *))(v45 + 8);
  v50(v48, v46);
  v50(v43, v46);
  uint64_t v51 = NANConstants.maximumServiceRetryRate.unsafeMutableAddressor();
  uint64_t v52 = v113;
  uint64_t v53 = v114;
  uint64_t v54 = v115;
  (*(void (**)(char *, uint64_t, uint64_t))(v114 + 16))(v113, v51, v115);
  LOBYTE(v44) = static DispatchTimeInterval.< infix(_:_:)();
  uint64_t v55 = *(void (**)(char *, uint64_t))(v53 + 8);
  uint64_t v56 = v52;
  uint64_t v57 = (void *)&unk_100486000;
  v55(v56, v54);
  uint64_t v58 = v49;
  uint64_t v40 = v107;
  v55(v58, v54);
  if (v44)
  {
    unint64_t v59 = &v31[qword_100488980];
    unint64_t v60 = v31;
    uint64_t v115 = (uint64_t)v59;
    uint64_t v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v120 = (char *)v30;
      uint64_t v63 = swift_slowAlloc();
      uint64_t v64 = (char *)swift_slowAlloc();
      uint64_t v114 = swift_slowAlloc();
      v123[0] = v114;
      *(_DWORD *)uint64_t v63 = 138412546;
      uint64_t v125 = v60;
      __int16 v65 = v60;
      uint64_t v66 = v122;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      char v113 = v64;
      *(void *)uint64_t v64 = v66;

      *(_WORD *)(v63 + 12) = 2080;
      uint64_t v67 = 0xD000000000000011;
      unint64_t v68 = 0x80000001003DC2D0;
      switch(v121)
      {
        case -1:
          break;
        case 1:
          uint64_t v67 = 0x754F2064656D6954;
          unint64_t v68 = 0xE900000000000074;
          break;
        case 2:
          uint64_t v67 = 0x7165522072657355;
          unint64_t v68 = 0xEE00646574736575;
          break;
        case 3:
          uint64_t v67 = 0x6961462070696843;
          unint64_t v68 = 0xEC0000006572756CLL;
          break;
        case 4:
          uint64_t v67 = 0xD000000000000018;
          unint64_t v68 = 0x80000001003DC230;
          break;
        default:
          unint64_t v68 = 0xE700000000000000;
          uint64_t v67 = 0x6E776F6E6B6E55;
          break;
      }
      uint64_t v125 = (void *)sub_100010680(v67, v68, v123);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "%@ got an early termination with reason: %s. Retrying", (uint8_t *)v63, 0x16u);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v30 = (uint64_t)v120;
      uint64_t v57 = &unk_100486000;
    }
    else
    {
    }
    objc_super v85 = v117;
    variable initialization expression of AWDLPeer.lastUpdated();
    uint64_t v86 = v106;
    swift_beginAccess();
    (*(void (**)(char *, char *, void *))(v118 + 40))(v86, v85, v119);
    swift_endAccess();
    uint64_t v87 = *(void *)&v60[v57[446]];
    swift_unownedRetainStrong();
    sub_1003546AC();
    swift_release();
    swift_unownedRetainStrong();
    uint64_t v88 = AssociatedTypeWitness;
    (*(void (**)(char *, uint64_t, uint64_t))(v116 + 16))(v105, v87 + *(void *)(*(void *)v87 + 96), AssociatedTypeWitness);
    swift_release();
    uint64_t v120 = (char *)v60;
    uint64_t v89 = (uint64_t)&v60[qword_100488970];
    swift_beginAccess();
    uint64_t v90 = v104;
    sub_10032DFF4(v89, v104, (uint64_t (*)(void))type metadata accessor for NANSubscribe.Configuration);
    uint64_t v91 = swift_getAssociatedConformanceWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v91 + 184))(v90, v88, v91);
    sub_10032DD6C(v90, (uint64_t (*)(void))type metadata accessor for NANSubscribe.Configuration);
    (*(void (**)(char *, uint64_t))(v116 + 8))(v105, v88);
  }
  else
  {
LABEL_33:
    uint64_t v92 = v31;
    unint64_t v93 = Logger.logObject.getter();
    int v94 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v93, (os_log_type_t)v94))
    {
      LODWORD(v118) = v94;
      uint64_t v120 = (char *)v30;
      uint64_t v95 = swift_slowAlloc();
      unint64_t v96 = v31;
      unint64_t v97 = (void *)swift_slowAlloc();
      Class v119 = (void *)swift_slowAlloc();
      uint64_t v124 = (uint64_t)v92;
      uint64_t v125 = v119;
      *(_DWORD *)uint64_t v95 = 138412546;
      uint64_t v98 = v92;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v97 = v96;

      *(_WORD *)(v95 + 12) = 2080;
      uint64_t v99 = 0xD000000000000011;
      unint64_t v100 = 0x80000001003DC2D0;
      switch(v121)
      {
        case -1:
          break;
        case 1:
          uint64_t v99 = 0x754F2064656D6954;
          unint64_t v100 = 0xE900000000000074;
          break;
        case 2:
          uint64_t v99 = 0x7165522072657355;
          unint64_t v100 = 0xEE00646574736575;
          break;
        case 3:
          uint64_t v99 = 0x6961462070696843;
          unint64_t v100 = 0xEC0000006572756CLL;
          break;
        case 4:
          uint64_t v99 = 0xD000000000000018;
          unint64_t v100 = 0x80000001003DC230;
          break;
        default:
          unint64_t v100 = 0xE700000000000000;
          uint64_t v99 = 0x6E776F6E6B6E55;
          break;
      }
      uint64_t v124 = sub_100010680(v99, v100, (uint64_t *)&v125);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v93, (os_log_type_t)v118, "%@ was terminated with reason %s", (uint8_t *)v95, 0x16u);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v30 = (uint64_t)v120;
      uint64_t v31 = (unsigned __int8 *)v122;
      uint64_t v40 = v107;
    }
    else
    {
    }
    v31[v40] = 0;
    *(void *)&v92[qword_100486E00] = 0;
    swift_release();
    uint64_t v101 = qword_100486E08;
    uint64_t v102 = *(void **)&v92[qword_100486E08];
    if (v102) {
      [v102 subscribeTerminatedWithReason:v121];
    }
    *(void *)&v92[v101] = 0;
    swift_unknownObjectRelease();
    swift_unownedRetainStrong();
    sub_100354870();
    swift_release();
    sub_1002FD2E8((uint64_t)v92);
    swift_release();
  }
  return sub_10032DD6C(v30, type metadata accessor for DriverEvent);
}

void sub_10032485C(unint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  uint64_t v5 = v4;
  os_log_t v208 = a4;
  uint64_t v214 = a3;
  uint64_t v213 = a2;
  uint64_t v221 = a1 >> 8;
  unint64_t v220 = a1 >> 24;
  unint64_t v219 = HIDWORD(a1);
  unint64_t v218 = a1 >> 40;
  unint64_t v217 = HIWORD(a1);
  unint64_t v7 = HIBYTE(a1);
  uint64_t v195 = type metadata accessor for DispatchTime();
  uint64_t v194 = *(void *)(v195 - 8);
  __chkstk_darwin();
  uint64_t v193 = (char *)&v187 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v209 = type metadata accessor for NANPeer.Service.AuthenticationStatus(0);
  uint64_t v211 = *(void *)(v209 - 8);
  __chkstk_darwin();
  uint64_t v201 = (uint64_t)&v187 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v199 = (uint64_t)&v187 - v10;
  __chkstk_darwin();
  uint64_t v197 = (uint64_t)&v187 - v11;
  __chkstk_darwin();
  uint64_t v198 = (uint64_t)&v187 - v12;
  sub_100010BCC((uint64_t *)&unk_1004862F0);
  __chkstk_darwin();
  uint64_t v192 = (uint64_t)&v187 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  id v206 = (_OWORD *)((char *)&v187 - v14);
  __chkstk_darwin();
  uint64_t v205 = (uint64_t *)((char *)&v187 - v15);
  uint64_t v207 = type metadata accessor for NANPeer.Service.AuthenticationStatus.State(0);
  __chkstk_darwin();
  uint64_t v200 = (uint64_t)&v187 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  char v191 = (char *)&v187 - v17;
  __chkstk_darwin();
  uint64_t v196 = (uint64_t)&v187 - v18;
  __chkstk_darwin();
  uint64_t v202 = (uint64_t)&v187 - v19;
  __chkstk_darwin();
  uint64_t v204 = (uint64_t)&v187 - v20;
  type metadata accessor for NANPeer(0);
  __chkstk_darwin();
  uint64_t v22 = (char *)&v187 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100486F40);
  __chkstk_darwin();
  uint64_t v24 = (char *)&v187 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for NANPeer.Service(0);
  uint64_t v26 = *(void *)(v25 - 8);
  __chkstk_darwin();
  uint64_t v188 = (uint64_t)&v187 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v189 = (uint64_t *)((char *)&v187 - v28);
  __chkstk_darwin();
  uint64_t v30 = (char *)&v187 - v29;
  __chkstk_darwin();
  int v32 = (char *)&v187 - v31;
  uint64_t v33 = *(void *)&v4[qword_100486DF0];
  swift_unownedRetainStrong();
  unint64_t v216 = v7;
  uint64_t v222 = BYTE6(a1);
  uint64_t v215 = BYTE5(a1);
  unint64_t v34 = (v7 << 40) | ((unint64_t)v217 << 32) | ((unint64_t)v218 << 24);
  unint64_t v218 = BYTE4(a1);
  unint64_t v35 = v34 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)v219 << 16);
  unint64_t v219 = BYTE3(a1);
  unint64_t v36 = v35 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v220 << 8);
  unint64_t v217 = BYTE2(a1);
  unint64_t v220 = a1;
  unint64_t v203 = v36 & 0xFFFFFFFFFFFFFF00 | BYTE2(a1);
  sub_10035665C(v203, (uint64_t)v22);
  uint64_t v190 = v33;
  swift_release();
  uint64_t v37 = (unsigned __int8 *)&v5[qword_100488970];
  swift_beginAccess();
  id v212 = v37;
  swift_bridgeObjectRetain();
  sub_1002A6C50(v221, (uint64_t)v24);
  swift_bridgeObjectRelease();
  sub_10032DD6C((uint64_t)v22, type metadata accessor for NANPeer);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25) != 1)
  {
    Class v210 = v5;
    sub_10032DDCC((uint64_t)v24, (uint64_t)v32, type metadata accessor for NANPeer.Service);
    char v43 = sub_1002A14D0();
    sub_10032DFF4((uint64_t)v32, (uint64_t)v30, type metadata accessor for NANPeer.Service);
    id v44 = v32;
    if (v43)
    {
      BOOL v45 = 1;
      unint64_t v46 = v220;
      unint64_t v47 = v216;
      goto LABEL_14;
    }
    unint64_t v46 = v220;
    unint64_t v47 = v216;
    if (v30[96] == 5 || (__int16 v48 = *((_WORD *)v30 + 41), (v48 & 1) == 0))
    {
      BOOL v45 = 0;
      goto LABEL_14;
    }
    if ((v48 & 2) != 0)
    {
      char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      BOOL v45 = 0;
      if ((v49 & 1) == 0) {
        goto LABEL_14;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    BOOL v45 = v208 != 0;
LABEL_14:
    sub_10032DD6C((uint64_t)v30, type metadata accessor for NANPeer.Service);
    uint64_t v50 = type metadata accessor for NANSubscribe.Configuration();
    if (v212[*(int *)(v50 + 68)])
    {
      uint64_t v51 = v215;
      if (v32[96] != 5 && (*((void *)v32 + 10) & 0x30000) == 0x10000 && !v208)
      {
        uint64_t v52 = &v210[qword_100488988];
        swift_beginAccess();
        uint64_t v53 = *(void *)v52;
        if (*(void *)(*(void *)v52 + 16)
          && (unint64_t v54 = sub_100031130((v47 << 48) | (v222 << 40) | (v51 << 32) | (v218 << 24) | (v219 << 16) | (v217 << 8) | BYTE1(v46)),
              (v55 & 1) != 0))
        {
          uint64_t v56 = v197;
          sub_10032DFF4(*(void *)(v53 + 56) + *(void *)(v211 + 72) * v54, v197, type metadata accessor for NANPeer.Service.AuthenticationStatus);
          uint64_t v57 = v56;
          uint64_t v58 = v198;
          sub_10032DDCC(v57, v198, type metadata accessor for NANPeer.Service.AuthenticationStatus);
          swift_endAccess();
          uint64_t v59 = v196;
          sub_10032DFF4(v58, v196, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
          if (swift_getEnumCaseMultiPayload() == 4)
          {
            sub_10032DD6C(v59, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
            BOOL v60 = sub_1002A11E4();
            sub_10032DD6C(v58, type metadata accessor for NANPeer.Service.AuthenticationStatus);
            if (!v60)
            {
              unint64_t v46 = v46 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)v222 << 48);
              uint64_t v61 = (uint64_t)v210;
LABEL_79:
              unint64_t v127 = v46;
              goto LABEL_80;
            }
          }
          else
          {
            sub_10032DD6C(v58, type metadata accessor for NANPeer.Service.AuthenticationStatus);
            sub_10032DD6C(v59, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
          }
        }
        else
        {
          swift_endAccess();
        }
        if (*(void *)RSSI.minimumDiscoveryThreshold.unsafeMutableAddressor() <= v213)
        {
          id v206 = v44;
          uint64_t v137 = v222;
          uint64_t v138 = (uint64_t)v210;
          uint64_t v139 = (uint64_t *)&v210[qword_100488990];
          swift_beginAccess();
          uint64_t v140 = *v139;
          unint64_t v141 = (v47 << 48) | (v137 << 40) | (v51 << 32) | (v218 << 24) | (v219 << 16) | (v217 << 8) | BYTE1(v46);
          swift_bridgeObjectRetain();
          BOOL v142 = sub_100374F98(v141, v140);
          swift_bridgeObjectRelease();
          if (v45 || !v142)
          {
            uint64_t v143 = (uint64_t)v191;
            swift_storeEnumTagMultiPayload();
            uint64_t v144 = v199;
            sub_10032DFF4(v143, v199, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
            type metadata accessor for P2PTimer();
            char v145 = v193;
            variable initialization expression of AWDLPeer.lastUpdated();
            sub_10032DD6C(v143, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
            uint64_t v146 = v209;
            (*(void (**)(uint64_t, char *, uint64_t))(v194 + 32))(v144 + *(int *)(v209 + 20), v145, v195);
            uint64_t v147 = v144;
            uint64_t v148 = v192;
            sub_10032DDCC(v147, v192, type metadata accessor for NANPeer.Service.AuthenticationStatus);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v211 + 56))(v148, 0, 1, v146);
            swift_beginAccess();
            sub_100354D90(v148, v141);
            swift_endAccess();
            *(CoreP2P::NANGenericServiceProtocol *)&long long v231 = NANGenericServiceProtocol.init()();
            NANGenericServiceProtocol.furtherServiceDiscoveryFollowUp.setter(1);
            swift_unownedRetainStrong();
            sub_100354870();
            swift_release();
            swift_retain();
            swift_release();
            uint64_t v149 = v231;
            unint64_t v150 = (uint64_t *)NANGenericServiceProtocol.AttributeFilter.all.unsafeMutableAddressor();
            int v151 = NANServiceInfo.init(information:filter:)(v149, *v150);
            uint64_t v153 = v152;
            unint64_t v155 = v154;
            sub_100301B48(v151, v152, v154, v203, v221, *v212);
            sub_10000C970(v153, v155);
            swift_release();
          }
          sub_10032B034(v138, v46 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)v137 << 48));
          uint64_t v156 = (uint64_t)v206;
          goto LABEL_81;
        }
        uint64_t v61 = (uint64_t)v210;
        unint64_t v127 = v46;
LABEL_80:
        sub_10032B034(v61, v127);
        uint64_t v156 = (uint64_t)v44;
LABEL_81:
        sub_10032DD6C(v156, type metadata accessor for NANPeer.Service);
        return;
      }
LABEL_38:
      uint64_t v75 = v210;
      swift_beginAccess();
      unint64_t v76 = (v47 << 48) | (v222 << 40) | (v51 << 32) | (v218 << 24) | (v219 << 16) | (v217 << 8) | BYTE1(v46);
      char v77 = sub_1003A53F8(&v231, v76);
      swift_endAccess();
      sub_100321510();
      uint64_t v78 = BYTE6(v231);
      if (v77)
      {
        unint64_t v219 = v76;
        uint64_t v209 = BYTE1(v231);
        uint64_t v211 = BYTE2(v231);
        uint64_t v215 = BYTE3(v231);
        unint64_t v216 = v231;
        unint64_t v217 = BYTE4(v231);
        unint64_t v218 = BYTE5(v231);
        id v79 = v75;
        uint64_t v80 = v214;
        swift_bridgeObjectRetain_n();
        uint64_t v81 = (char *)v79;
        uint64_t v82 = Logger.logObject.getter();
        os_log_type_t v83 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v82, v83))
        {
          uint64_t v84 = swift_slowAlloc();
          uint64_t v204 = v78;
          uint64_t v85 = v84;
          uint64_t v86 = (void *)swift_slowAlloc();
          uint64_t v205 = v86;
          uint64_t v221 = swift_slowAlloc();
          *(void *)&long long v226 = v221;
          *(_DWORD *)uint64_t v85 = 138412802;
          *(void *)&long long v231 = v81;
          uint64_t v87 = v81;
          id v206 = v44;
          uint64_t v88 = v87;
          unint64_t v46 = v220;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v86 = v75;

          *(_WORD *)(v85 + 12) = 2080;
          uint64_t v89 = NANPeerServiceIdentifier.description.getter(v216 | (v209 << 8) | (v211 << 16) | (v215 << 24) | (v217 << 32) | (v218 << 40) | (v204 << 48));
          *(void *)&long long v231 = sub_100010680(v89, v90, (uint64_t *)&v226);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v85 + 22) = 2080;
          uint64_t v91 = RSSI.description.getter();
          *(void *)&long long v231 = sub_100010680(v91, v92, (uint64_t *)&v226);
          uint64_t v80 = v214;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          id v44 = v206;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v82, v83, "%@ received a new discovery result %s at %s", (uint8_t *)v85, 0x20u);
          sub_100010BCC(&qword_10047CC30);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }
        id v106 = *(void **)&v81[qword_100486E08];
        if (v106)
        {
          uint64_t v221 = sub_10032DE34();
          uint64_t v107 = *((void *)v212 + 1);
          uint64_t v108 = *((void *)v212 + 2);
          long long v109 = v44[3];
          long long v228 = v44[2];
          long long v229 = v109;
          long long v230 = v44[4];
          long long v110 = v44[1];
          long long v226 = *v44;
          long long v227 = v110;
          sub_10006EC68((uint64_t)(v44 + 5), (uint64_t)&v231, (uint64_t *)&unk_100486F60);
          swift_bridgeObjectRetain();
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          sub_10021ABA8((uint64_t)&v226);
          sub_10032DE74((uint64_t)&v231);
          uint64_t v111 = v44;
          unint64_t v112 = v46 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)v222 << 48);
          os_log_t v113 = v208;
          swift_bridgeObjectRetain();
          unint64_t v114 = v112;
          id v44 = v111;
          id v115 = WiFiAwareDiscoveryResult.init(nanDiscoveryResultEvent:serviceName:serviceDescriptor:serviceDescriptorExtension:extraServiceSpecificInfo:pairSetupRequired:pairingConfiguration:)(v114, v213, v80, v107, v108, (uint64_t)&v226, (uint64_t)&v231, (uint64_t)v113, 0, 0);
          [v106 subscribeReceivedDiscoveryResult:v115];

          swift_unknownObjectRelease();
        }
        uint64_t v116 = (uint64_t *)&v81[qword_100488988];
        swift_beginAccess();
        uint64_t v117 = *v116;
        uint64_t v75 = v210;
        unint64_t v118 = v219;
        if (*(void *)(*v116 + 16))
        {
          swift_bridgeObjectRetain();
          unint64_t v119 = sub_100031130(v118);
          if (v120)
          {
            unint64_t v121 = v119;
            int v122 = *(_DWORD *)(v117 + 36);
            swift_bridgeObjectRelease();
            uint64_t v123 = v201;
            sub_10028010C((uint64_t)v223, v201, v121, v122, 0, *v116);
            uint64_t v124 = v200;
            sub_10032DFF4(v123, v200, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
            sub_10032DD6C(v123, type metadata accessor for NANPeer.Service.AuthenticationStatus);
            int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
            sub_10032DD6C(v124, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
            if (EnumCaseMultiPayload == 4)
            {
              swift_beginAccess();
              uint64_t v126 = v199;
              sub_1003A4E10((uint64_t)v224, v199, v121, v122);
              swift_endAccess();
              sub_10032DD6C(v126, type metadata accessor for NANPeer.Service.AuthenticationStatus);
            }
          }
          else
          {
            swift_bridgeObjectRelease();
          }
        }
        goto LABEL_78;
      }
      if (!v45)
      {
LABEL_78:
        unint64_t v46 = v46 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)v222 << 48);
        uint64_t v61 = (uint64_t)v75;
        goto LABEL_79;
      }
      unint64_t v219 = v76;
      uint64_t v209 = BYTE1(v231);
      uint64_t v211 = BYTE2(v231);
      uint64_t v215 = BYTE3(v231);
      unint64_t v216 = v231;
      unint64_t v217 = BYTE4(v231);
      unint64_t v218 = BYTE5(v231);
      unsigned __int8 v93 = v212[*(int *)(v50 + 68)];
      id v94 = v75;
      uint64_t v95 = v94;
      if ((v93 & 1) == 0)
      {
        id v128 = (char *)v94;
        Class v129 = Logger.logObject.getter();
        os_log_type_t v130 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v129, v130))
        {
          uint64_t v131 = swift_slowAlloc();
          uint64_t v132 = (void *)swift_slowAlloc();
          id v212 = (unsigned __int8 *)swift_slowAlloc();
          *(void *)&long long v226 = v212;
          *(_DWORD *)uint64_t v131 = 138412546;
          os_log_t v208 = v129;
          id v206 = v44;
          *(void *)&long long v231 = v128;
          long long v133 = v128;
          uint64_t v134 = v128;
          unint64_t v46 = v220;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v132 = v210;

          *(_WORD *)(v131 + 12) = 2080;
          uint64_t v135 = NANPeerServiceIdentifier.description.getter(v216 | (v209 << 8) | (v211 << 16) | (v215 << 24) | (v217 << 32) | (v218 << 40) | (v78 << 48));
          *(void *)&long long v231 = sub_100010680(v135, v136, (uint64_t *)&v226);
          id v128 = v133;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          id v44 = v206;
          swift_bridgeObjectRelease();
          Class v129 = v208;
          _os_log_impl((void *)&_mh_execute_header, v208, v130, "%@ aging out discovery result %s because re-authentication is required", (uint8_t *)v131, 0x16u);
          sub_100010BCC(&qword_10047CC30);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        unint64_t v174 = v219;
        char v175 = *(void **)&v128[qword_100486E08];
        if (v175)
        {
          swift_unknownObjectRetain();
          id v176 = WiFiAddress.apiAddress.getter(v203);
          [v175 subscribeLostDiscoveryResultForPublishID:v221 address:v176];

          swift_unknownObjectRelease();
        }
        swift_beginAccess();
        sub_1003A9024(v174, (uint64_t)&v231);
        swift_endAccess();
        sub_100321510();
        uint64_t v75 = v210;
        goto LABEL_78;
      }
      id v206 = v44;
      swift_bridgeObjectRetain_n();
      unint64_t v96 = v95;
      unint64_t v97 = Logger.logObject.getter();
      os_log_type_t v98 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v97, v98))
      {
        uint64_t v99 = swift_slowAlloc();
        unint64_t v100 = (void *)swift_slowAlloc();
        unint64_t v219 = swift_slowAlloc();
        *(void *)&long long v226 = v219;
        *(_DWORD *)uint64_t v99 = 138412802;
        *(void *)&long long v231 = v96;
        uint64_t v101 = v96;
        unint64_t v46 = v220;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *unint64_t v100 = v210;

        *(_WORD *)(v99 + 12) = 2080;
        uint64_t v102 = NANPeerServiceIdentifier.description.getter(v216 | (v209 << 8) | (v211 << 16) | (v215 << 24) | (v217 << 32) | (v218 << 40) | (v78 << 48));
        *(void *)&long long v231 = sub_100010680(v102, v103, (uint64_t *)&v226);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v99 + 22) = 2080;
        uint64_t v104 = RSSI.description.getter();
        *(void *)&long long v231 = sub_100010680(v104, v105, (uint64_t *)&v226);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        uint64_t v75 = v210;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v97, v98, "%@ received new service specific info for %s at %s", (uint8_t *)v99, 0x20u);
        sub_100010BCC(&qword_10047CC30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }
      uint64_t v157 = qword_100486E08;
      id v44 = v206;
      if (*(void *)&v96[qword_100486E08]
        && (uint64_t v225 = *(void *)&v96[qword_100486E08],
            swift_unknownObjectRetain(),
            sub_100010BCC(&qword_100486390),
            sub_100010BCC((uint64_t *)&unk_100486F70),
            (swift_dynamicCast() & 1) != 0))
      {
        if (*((void *)&v232 + 1))
        {
          uint64_t v221 = (uint64_t)v96;
          sub_10006EF50(&v231, (uint64_t)&v226);
          uint64_t v158 = v189;
          sub_10032DFF4((uint64_t)v44, (uint64_t)v189, type metadata accessor for NANPeer.Service);
          os_log_t v159 = v208;
          if (v208)
          {
            uint64_t v160 = v78;
            swift_bridgeObjectRetain();
            sub_10032DD6C((uint64_t)v158, type metadata accessor for NANPeer.Service);
          }
          else
          {
            uint64_t v160 = v78;
            uint64_t v177 = v158[12];
            if ((v177 & 0xFE) == 4)
            {
              uint64_t v178 = v188;
              sub_10032DFF4((uint64_t)v158, v188, type metadata accessor for NANPeer.Service);
            }
            else
            {
              uint64_t v180 = v158[13];
              unint64_t v179 = v158[14];
              uint64_t v181 = v158[11];
              uint64_t v182 = v189[10];
              sub_10013316C(v177, v180, v179);
              uint64_t v183 = NANServiceInfo.genericServiceProtocol.getter(v177, v180, v179);
              uint64_t v184 = v182;
              uint64_t v158 = v189;
              uint64_t v185 = v177;
              os_log_t v159 = v183;
              sub_10013F040(v184, v181, v185, v180, v179);
              uint64_t v178 = v188;
              sub_10032DFF4((uint64_t)v158, v188, type metadata accessor for NANPeer.Service);
              if (v159)
              {
                sub_10032DD6C((uint64_t)v158, type metadata accessor for NANPeer.Service);
                sub_10032DD6C(v178, type metadata accessor for NANPeer.Service);
                goto LABEL_68;
              }
            }
            uint64_t v186 = *(unsigned __int8 *)(v178 + 56);
            if (v186 == 4)
            {
              sub_10032DD6C((uint64_t)v158, type metadata accessor for NANPeer.Service);
              sub_10032DD6C(v178, type metadata accessor for NANPeer.Service);
              id v161 = 0;
              goto LABEL_69;
            }
            id v161 = NANServiceInfo.genericServiceProtocol.getter(v186, *(void *)(v178 + 64), *(void *)(v178 + 72));
            sub_10032DD6C((uint64_t)v158, type metadata accessor for NANPeer.Service);
            os_log_t v159 = v161;
            sub_10032DD6C(v178, type metadata accessor for NANPeer.Service);
            if (!v161) {
              goto LABEL_69;
            }
          }
LABEL_68:
          id v161 = NANGenericServiceProtocol.apiPublishServiceSpecificInfo.getter((uint64_t)v159);
          swift_bridgeObjectRelease();
LABEL_69:
          uint64_t v162 = *((void *)&v227 + 1);
          uint64_t v163 = v228;
          sub_1000369C4(&v226, *((uint64_t *)&v227 + 1));
          (*(void (**)(NSObject *, unint64_t, uint64_t, uint64_t))(v163 + 16))(v161, v216 | (v209 << 8) | (v211 << 16) | (v215 << 24) | (v217 << 32) | (v218 << 40) | (v160 << 48), v162, v163);

          sub_100010754((uint64_t)&v226);
          uint64_t v61 = v221;
          unint64_t v127 = v46 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)v222 << 48);
          goto LABEL_80;
        }
      }
      else
      {
        uint64_t v233 = 0;
        long long v231 = 0u;
        long long v232 = 0u;
      }
      sub_1000380B4((uint64_t)&v231, &qword_100486F50);
      Class v164 = *(void **)&v96[v157];
      if (v164)
      {
        swift_unknownObjectRetain();
        id v165 = WiFiAddress.apiAddress.getter(v203);
        [v164 subscribeLostDiscoveryResultForPublishID:v221 address:v165];

        swift_unknownObjectRelease();
        char v166 = *(void **)&v96[v157];
        if (v166)
        {
          sub_10032DE34();
          uint64_t v167 = *((void *)v212 + 1);
          uint64_t v168 = *((void *)v212 + 2);
          long long v169 = v44[3];
          long long v228 = v44[2];
          long long v229 = v169;
          long long v230 = v44[4];
          long long v170 = v44[1];
          long long v226 = *v44;
          long long v227 = v170;
          sub_10006EC68((uint64_t)(v44 + 5), (uint64_t)&v231, (uint64_t *)&unk_100486F60);
          os_log_t v171 = v208;
          swift_bridgeObjectRetain();
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v172 = v214;
          swift_bridgeObjectRetain();
          sub_10021ABA8((uint64_t)&v226);
          sub_10032DE74((uint64_t)&v231);
          id v173 = WiFiAwareDiscoveryResult.init(nanDiscoveryResultEvent:serviceName:serviceDescriptor:serviceDescriptorExtension:extraServiceSpecificInfo:pairSetupRequired:pairingConfiguration:)(v46 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)v222 << 48), v213, v172, v167, v168, (uint64_t)&v226, (uint64_t)&v231, (uint64_t)v171, 0, 0);
          [v166 subscribeReceivedDiscoveryResult:v173];

          swift_unknownObjectRelease();
        }
      }
      goto LABEL_78;
    }
    uint64_t v62 = (uint64_t)v210;
    uint64_t v63 = &v210[qword_100488988];
    uint64_t v51 = v215;
    if (v45)
    {
      swift_beginAccess();
      uint64_t v64 = (uint64_t)v205;
      sub_1003674E8((v47 << 48) | (v222 << 40) | (v51 << 32) | (v218 << 24) | (v219 << 16) | (v217 << 8) | BYTE1(v46), (uint64_t)v205);
      uint64_t v65 = v64;
      swift_endAccess();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v211 + 48))(v64, 1, v209) == 1)
      {
        sub_1000380B4(v64, (uint64_t *)&unk_1004862F0);
LABEL_34:
        unint64_t v46 = v46 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)v222 << 48);
        goto LABEL_35;
      }
      uint64_t v73 = v64;
      uint64_t v74 = v204;
      sub_10032DFF4(v73, v204, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
      sub_10032DD6C(v65, type metadata accessor for NANPeer.Service.AuthenticationStatus);
      if (swift_getEnumCaseMultiPayload() != 2)
      {
        sub_10032DD6C(v74, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
        goto LABEL_34;
      }
    }
    else
    {
      swift_beginAccess();
      uint64_t v66 = *(void *)v63;
      if (*(void *)(v66 + 16)
        && (unint64_t v67 = sub_100031130((v47 << 48) | (v222 << 40) | (v51 << 32) | (v218 << 24) | (v219 << 16) | (v217 << 8) | BYTE1(v46)),
            (v68 & 1) != 0))
      {
        uint64_t v69 = (uint64_t)v206;
        sub_10032DFF4(*(void *)(v66 + 56) + *(void *)(v211 + 72) * v67, (uint64_t)v206, type metadata accessor for NANPeer.Service.AuthenticationStatus);
        uint64_t v70 = 0;
      }
      else
      {
        uint64_t v70 = 1;
        uint64_t v69 = (uint64_t)v206;
      }
      uint64_t v71 = v211;
      uint64_t v72 = v209;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v211 + 56))(v69, v70, 1, v209);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v69, 1, v72))
      {
        sub_1000380B4(v69, (uint64_t *)&unk_1004862F0);
        swift_endAccess();
LABEL_35:
        uint64_t v61 = v62;
        goto LABEL_79;
      }
      uint64_t v74 = v202;
      sub_10032DFF4(v69, v202, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
      sub_1000380B4(v69, (uint64_t *)&unk_1004862F0);
      swift_endAccess();
      if (swift_getEnumCaseMultiPayload() != 2)
      {
        sub_10032DD6C(v74, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
        goto LABEL_35;
      }
    }
    sub_10000C970(*(void *)v74, *(void *)(v74 + 8));
    goto LABEL_38;
  }
  sub_1000380B4((uint64_t)v24, (uint64_t *)&unk_100486F40);
  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v226 = swift_slowAlloc();
    *(_DWORD *)uint64_t v40 = 136315138;
    uint64_t v41 = NANPeerServiceIdentifier.description.getter((v216 << 48) | (v222 << 40) | (v215 << 32) | (v218 << 24) | (v219 << 16) | (v217 << 8) | BYTE1(v220));
    *(void *)&long long v231 = sub_100010680(v41, v42, (uint64_t *)&v226);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Failed to find the service descriptor or service descriptor extension attributes for %s", v40, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
}

uint64_t sub_100326968(unint64_t a1, uint64_t a2)
{
  unint64_t v138 = a1;
  int64_t v139 = a2;
  uint64_t v3 = type metadata accessor for DispatchTime();
  uint64_t v129 = *(void *)(v3 - 8);
  uint64_t v130 = v3;
  __chkstk_darwin();
  uint64_t v5 = (char *)&v111 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OWEKeys();
  __chkstk_darwin();
  uint64_t v131 = (uint64_t (*)(uint64_t))((char *)&v111 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100010BCC(&qword_100486F30);
  __chkstk_darwin();
  uint64_t v132 = (uint64_t)&v111 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v124 = sub_100010BCC(&qword_100486F38);
  __chkstk_darwin();
  uint64_t v123 = (uint64_t)&v111 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0);
  __chkstk_darwin();
  uint64_t v128 = (uint64_t)&v111 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NANPeer(0);
  __chkstk_darwin();
  uint64_t v135 = (uint64_t)&v111 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100486F40);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v111 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_1004852C0);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v111 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for LongTermPairingKeys(0);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin();
  uint64_t v18 = (char *)&v111 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_1004862F0);
  __chkstk_darwin();
  uint64_t v134 = (uint64_t)&v111 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v136 = type metadata accessor for NANPeer.Service.AuthenticationStatus.State(0);
  __chkstk_darwin();
  uint64_t v125 = (uint64_t)&v111 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v22 = (char *)&v111 - v21;
  uint64_t v127 = type metadata accessor for NANPeer.Service.AuthenticationStatus(0);
  uint64_t v137 = *(void *)(v127 - 8);
  __chkstk_darwin();
  uint64_t v126 = (uint64_t)&v111 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v25 = (char *)&v111 - v24;
  __chkstk_darwin();
  uint64_t v27 = (char *)&v111 - v26;
  uint64_t v140 = v2;
  uint64_t v28 = (unsigned __int8 *)(v2 + qword_100488970);
  swift_beginAccess();
  uint64_t result = type metadata accessor for NANSubscribe.Configuration();
  uint64_t v133 = result;
  if ((v28[*(int *)(result + 68)] & 1) == 0)
  {
    uint64_t result = (uint64_t)RSSI.minimumDiscoveryThreshold.unsafeMutableAddressor();
    if (*(void *)result <= v139)
    {
      uint64_t v119 = v16;
      uint64_t v117 = v12;
      unint64_t v118 = v28;
      unint64_t v114 = v5;
      char v120 = v18;
      int v30 = v138;
      int64_t v139 = v138 >> 24;
      unint64_t v122 = HIDWORD(v138);
      unint64_t v121 = v138 >> 40;
      unint64_t v31 = HIWORD(v138);
      unint64_t v32 = HIBYTE(v138);
      uint64_t v33 = (void *)(v140 + qword_100488988);
      swift_beginAccess();
      id v115 = v33;
      uint64_t v34 = *v33;
      if (*(void *)(v34 + 16))
      {
        unint64_t v35 = (v32 << 48) | ((unint64_t)v31 << 40) | ((unint64_t)v121 << 32) | (v122 << 24) | ((unint64_t)v139 << 16) | ((unint64_t)BYTE2(v30) << 8) | BYTE1(v30);
        unint64_t v36 = sub_100031130(v35);
        if (v37)
        {
          sub_10032DFF4(*(void *)(v34 + 56) + *(void *)(v137 + 72) * v36, (uint64_t)v25, type metadata accessor for NANPeer.Service.AuthenticationStatus);
          sub_10032DDCC((uint64_t)v25, (uint64_t)v27, type metadata accessor for NANPeer.Service.AuthenticationStatus);
          swift_endAccess();
          sub_10032DFF4((uint64_t)v27, (uint64_t)v22, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
          if (swift_getEnumCaseMultiPayload())
          {
            sub_10032DD6C((uint64_t)v27, type metadata accessor for NANPeer.Service.AuthenticationStatus);
            uint64_t v38 = type metadata accessor for NANPeer.Service.AuthenticationStatus.State;
            uint64_t v39 = (uint64_t)v22;
          }
          else
          {
            sub_10032DD6C((uint64_t)v22, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
            if (sub_1002A11E4())
            {
              swift_beginAccess();
              uint64_t v80 = v134;
              sub_1003674E8(v35, v134);
              swift_endAccess();
              sub_1000380B4(v80, (uint64_t *)&unk_1004862F0);
            }
            uint64_t v38 = type metadata accessor for NANPeer.Service.AuthenticationStatus;
            uint64_t v39 = (uint64_t)v27;
          }
          return sub_10032DD6C(v39, v38);
        }
      }
      unsigned __int8 v40 = v121;
      unsigned __int8 v41 = v122;
      unsigned __int8 v42 = v139;
      unint64_t v116 = v32;
      swift_endAccess();
      uint64_t v43 = v140;
      sub_10032DD04(v140 + qword_100486E18, (uint64_t)v14);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v119 + 48))(v14, 1, v15) == 1) {
        return sub_1000380B4((uint64_t)v14, &qword_1004852C0);
      }
      unint64_t v44 = v138;
      uint64_t v45 = v138 >> 8;
      sub_10032DDCC((uint64_t)v14, (uint64_t)v120, type metadata accessor for LongTermPairingKeys);
      uint64_t v46 = *(void *)(v43 + qword_100486DF0);
      swift_unownedRetainStrong();
      uint64_t v113 = BYTE6(v44);
      uint64_t v119 = BYTE5(v44);
      unint64_t v121 = BYTE4(v44);
      unint64_t v122 = BYTE3(v44);
      int64_t v139 = BYTE2(v44);
      unint64_t v47 = (v116 << 40) | ((unint64_t)v31 << 32) | ((unint64_t)v40 << 24) | ((unint64_t)v41 << 16) | ((unint64_t)v42 << 8) | BYTE2(v44);
      uint64_t v48 = v135;
      sub_10035665C(v47, v135);
      swift_release();
      swift_bridgeObjectRetain();
      char v49 = v117;
      sub_1002A6C50(BYTE1(v44), (uint64_t)v117);
      swift_bridgeObjectRelease();
      sub_10032DD6C(v48, type metadata accessor for NANPeer);
      uint64_t v50 = type metadata accessor for NANPeer.Service(0);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v50 - 8) + 48))(v49, 1, v50) == 1)
      {
        sub_1000380B4((uint64_t)v49, (uint64_t *)&unk_100486F40);
      }
      else
      {
        uint64_t v135 = v46;
        unint64_t v112 = v47;
        uint64_t v51 = v49[10];
        uint64_t v52 = v49[11];
        uint64_t v53 = v49[12];
        uint64_t v54 = v49[13];
        unint64_t v55 = v49[14];
        sub_1002A94C8(v51, v52, v53, v54, v55);
        sub_10032DD6C((uint64_t)v49, type metadata accessor for NANPeer.Service);
        if ((v53 & 0xFE) != 4)
        {
          uint64_t v56 = NANServiceInfo.genericServiceProtocol.getter(v53, v54, v55);
          sub_10013F040(v51, v52, v53, v54, v55);
          if (v56)
          {
            uint64_t v117 = (void *)v45;
            uint64_t v57 = v133;
            uint64_t v58 = v118;
            uint64_t v59 = v131;
            sub_10032DFF4((uint64_t)&v118[*(int *)(v133 + 64)], (uint64_t)v131, (uint64_t (*)(void))type metadata accessor for OWEKeys);
            swift_unownedRetainStrong();
            uint64_t v60 = WiFiInterface.macAddress.getter();
            swift_release();
            uint64_t v61 = *((void *)v58 + 3);
            swift_bridgeObjectRetain();
            uint64_t v62 = v132;
            unint64_t v63 = v112;
            LongTermPairingKeys.authenticationRequest(forPeer:with:using:on:myServiceSpecificInfo:)(v112, (uint64_t)v56, v59, v60 & 0xFFFFFFFFFFFFLL, v61, v132);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_10032DD6C((uint64_t)v59, (uint64_t (*)(void))type metadata accessor for OWEKeys);
            uint64_t v64 = sub_100010BCC(&qword_100480900);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 48))(v62, 1, v64) == 1)
            {
              sub_1000380B4(v62, &qword_100486F30);
              uint64_t v65 = Logger.logObject.getter();
              os_log_type_t v66 = static os_log_type_t.error.getter();
              BOOL v67 = os_log_type_enabled(v65, v66);
              unint64_t v68 = v116;
              uint64_t v69 = v139;
              unint64_t v70 = v122;
              if (v67)
              {
                uint64_t v71 = (uint8_t *)swift_slowAlloc();
                v142[0] = swift_slowAlloc();
                *(_DWORD *)uint64_t v71 = 136315138;
                unint64_t v72 = (v68 << 48) | (v113 << 40) | (v119 << 32) | (v121 << 24) | (v70 << 16) | (v69 << 8) | BYTE1(v44);
                uint64_t v73 = NANPeerServiceIdentifier.description.getter(v72);
                uint64_t v141 = sub_100010680(v73, v74, v142);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v65, v66, "Failed while generating the authentication follow up message for %s", v71, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {

                unint64_t v72 = (v68 << 48) | (v113 << 40) | (v119 << 32) | (v121 << 24) | (v70 << 16) | (v69 << 8) | BYTE1(v44);
              }
              uint64_t v106 = v125;
              swift_storeEnumTagMultiPayload();
              uint64_t v107 = v126;
              sub_10032DFF4(v106, v126, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
              type metadata accessor for P2PTimer();
              uint64_t v108 = v114;
              variable initialization expression of AWDLPeer.lastUpdated();
              sub_10032DD6C(v106, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
              uint64_t v109 = v127;
              (*(void (**)(uint64_t, char *, uint64_t))(v129 + 32))(v107 + *(int *)(v127 + 20), v108, v130);
              uint64_t v110 = v134;
              sub_10032DDCC(v107, v134, type metadata accessor for NANPeer.Service.AuthenticationStatus);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v137 + 56))(v110, 0, 1, v109);
              swift_beginAccess();
              sub_100354D90(v110, v72);
              swift_endAccess();
            }
            else
            {
              uint64_t v81 = *(void *)(v62 + *(int *)(v64 + 48));
              uint64_t v82 = v124;
              uint64_t v83 = *(int *)(v124 + 48);
              uint64_t v84 = v62;
              uint64_t v85 = v123;
              sub_10032DDCC(v84, v123, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
              *(void *)(v85 + v83) = v81;
              uint64_t v86 = *(void *)(v85 + *(int *)(v82 + 48));
              uint64_t v87 = v128;
              sub_10032DDCC(v85, v128, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
              uint64_t v88 = v125;
              sub_10032DFF4(v87, v125, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
              swift_storeEnumTagMultiPayload();
              uint64_t v89 = v126;
              sub_10032DFF4(v88, v126, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
              type metadata accessor for P2PTimer();
              unint64_t v90 = v114;
              variable initialization expression of AWDLPeer.lastUpdated();
              sub_10032DD6C(v88, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
              uint64_t v91 = v127;
              (*(void (**)(uint64_t, char *, uint64_t))(v129 + 32))(v89 + *(int *)(v127 + 20), v90, v130);
              uint64_t v92 = v134;
              sub_10032DDCC(v89, v134, type metadata accessor for NANPeer.Service.AuthenticationStatus);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v137 + 56))(v92, 0, 1, v91);
              swift_beginAccess();
              unint64_t v93 = (v116 << 48) | (v113 << 40) | (v119 << 32) | (v121 << 24) | (v122 << 16) | (v139 << 8) | BYTE1(v44);
              sub_100354D90(v92, v93);
              swift_endAccess();
              id v94 = Logger.logObject.getter();
              os_log_type_t v95 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v94, v95))
              {
                unint64_t v96 = (uint8_t *)swift_slowAlloc();
                v142[0] = swift_slowAlloc();
                *(_DWORD *)unint64_t v96 = 136315138;
                uint64_t v97 = NANPeerServiceIdentifier.description.getter(v93);
                uint64_t v141 = sub_100010680(v97, v98, v142);
                unint64_t v63 = v112;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v94, v95, "Providing encrypted follow up to %s", v96, 0xCu);
                swift_arrayDestroy();
                uint64_t v57 = v133;
                swift_slowDealloc();
                swift_slowDealloc();
              }

              swift_unownedRetainStrong();
              sub_100354870();
              swift_release();
              swift_retain();
              swift_release();
              uint64_t v99 = v118;
              uint64_t v100 = Optional<A>.attributeFilter.getter(v118[*(int *)(v57 + 68)]);
              int v101 = NANServiceInfo.init(information:filter:)(v86, v100);
              uint64_t v103 = v102;
              unint64_t v105 = v104;
              sub_100301B48(v101, v102, v104, v63, (uint64_t)v117, *v99);
              sub_10000C970(v103, v105);
              swift_release();
              sub_10032DD6C(v128, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
            }
            goto LABEL_19;
          }
        }
      }
      uint64_t v75 = Logger.logObject.getter();
      os_log_type_t v76 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v75, v76))
      {
        char v77 = (uint8_t *)swift_slowAlloc();
        v142[0] = swift_slowAlloc();
        *(_DWORD *)char v77 = 136315138;
        uint64_t v78 = NANPeerServiceIdentifier.description.getter((v116 << 48) | (v113 << 40) | (v119 << 32) | (v121 << 24) | (v122 << 16) | (v139 << 8) | BYTE1(v44));
        uint64_t v141 = sub_100010680(v78, v79, v142);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v75, v76, "Unable to generate an authentication follow up message for %s because no service specific info was found in the publish", v77, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

LABEL_19:
      uint64_t v38 = type metadata accessor for LongTermPairingKeys;
      uint64_t v39 = (uint64_t)v120;
      return sub_10032DD6C(v39, v38);
    }
  }
  return result;
}

void sub_100327BD4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v221 = (a1 >> 8);
  unint64_t v8 = HIWORD(a1);
  unint64_t v225 = HIBYTE(a1);
  uint64_t v193 = type metadata accessor for DispatchTime();
  uint64_t v192 = *(void *)(v193 - 8);
  __chkstk_darwin();
  char v191 = (char *)v187 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v213 = type metadata accessor for NANPeer.Service.AuthenticationStatus(0);
  uint64_t v214 = *(void *)(v213 - 8);
  __chkstk_darwin();
  uint64_t v189 = (uint64_t)v187 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v190 = (uint64_t)v187 - v11;
  type metadata accessor for OWEKeys();
  __chkstk_darwin();
  uint64_t v195 = (uint64_t)v187 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0);
  __chkstk_darwin();
  uint64_t v196 = (char *)v187 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_1004852B0);
  __chkstk_darwin();
  os_log_t v208 = (char *)v187 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v210 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v209 = *(void *)(v210 - 8);
  __chkstk_darwin();
  uint64_t v202 = (uint64_t)v187 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_1004852C0);
  __chkstk_darwin();
  uint64_t v218 = (uint64_t)v187 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for LongTermPairingKeys(0);
  uint64_t v216 = *(void *)(v17 - 8);
  uint64_t v217 = v17;
  __chkstk_darwin();
  uint64_t v219 = (uint64_t)v187 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_1004862F0);
  __chkstk_darwin();
  uint64_t v206 = (uint64_t)v187 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v200 = (uint64_t)v187 - v20;
  __chkstk_darwin();
  uint64_t v201 = (uint64_t)v187 - v21;
  uint64_t v204 = type metadata accessor for NANPeer.Service.AuthenticationStatus.State(0);
  __chkstk_darwin();
  uint64_t v203 = (uint64_t)v187 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v188 = (char *)v187 - v23;
  __chkstk_darwin();
  uint64_t v194 = (void *)((char *)v187 - v24);
  __chkstk_darwin();
  uint64_t v197 = (uint64_t)v187 - v25;
  __chkstk_darwin();
  uint64_t v198 = (uint64_t)v187 - v26;
  type metadata accessor for NANPeer(0);
  __chkstk_darwin();
  uint64_t v220 = (uint64_t)v187 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100486F40);
  __chkstk_darwin();
  uint64_t v207 = (void *)((char *)v187 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  uint64_t v211 = (void *)((char *)v187 - v29);
  uint64_t v30 = v3 + qword_100488970;
  swift_beginAccess();
  uint64_t v223 = v30;
  swift_bridgeObjectRetain();
  NANConstants.csaMatterServiceName.unsafeMutableAddressor();
  Swift::String v31 = String.lowercased()();
  Swift::String v32 = String.lowercased()();
  unint64_t v228 = BYTE2(a1);
  if (v31._countAndFlagsBits == v32._countAndFlagsBits && v31._object == v32._object)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v33 & 1) == 0) {
      goto LABEL_7;
    }
  }
  uint64_t v34 = NANFollowUpReceivedEvent.serviceInfo.getter(a1, a2, a3);
  if (v34 != 4)
  {
    uint64_t v37 = v34;
    uint64_t v38 = v35;
    unint64_t v39 = v36;
    uint64_t v40 = NANServiceInfo.csaMatterPayload.getter(v34, v35, v36);
    unint64_t v42 = v41;
    sub_1001331AC(v37, v38, v39);
    if (v42 >> 60 != 15)
    {
      os_log_type_t v66 = *(void **)(v4 + qword_100486E08);
      if (v66)
      {
        unint64_t v67 = a1 >> 24;
        unint64_t v68 = HIDWORD(a1);
        unint64_t v69 = a1 >> 40;
        swift_unknownObjectRetain();
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        id v71 = WiFiAddress.apiAddress.getter((v225 << 40) | ((unint64_t)v8 << 32) | (v69 << 24) | ((unint64_t)v68 << 16) | ((unint64_t)v67 << 8) | v228);
        [v66 subscribeReceivedMessage:isa fromPublishID:v221 address:v71];
        sub_10000C95C(v40, v42);

        swift_unknownObjectRelease();
      }
      else
      {
        sub_10000C95C(v40, v42);
      }
      return;
    }
  }
LABEL_7:
  uint64_t v43 = BYTE1(a1);
  uint64_t v44 = BYTE3(a1);
  uint64_t v45 = BYTE4(a1);
  unint64_t v226 = BYTE5(a1);
  uint64_t v227 = BYTE6(a1);
  unint64_t v46 = a1 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)v8 << 48);
  unint64_t v47 = NANFollowUpReceivedEvent.followUpMessage.getter(v46, a2, a3);
  if (v47)
  {
    uint64_t v212 = a2;
    uint64_t v222 = v45;
    uint64_t v224 = v44;
    uint64_t v215 = v43;
    uint64_t v199 = v47;
    uint64_t v48 = v4 + qword_100488980;
    char v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.default.getter();
    BOOL v51 = os_log_type_enabled(v49, v50);
    unint64_t v205 = v4;
    v187[1] = v48;
    if (v51)
    {
      uint64_t v52 = (uint8_t *)swift_slowAlloc();
      uint64_t v230 = swift_slowAlloc();
      *(_DWORD *)uint64_t v52 = 136315138;
      uint64_t v53 = NANPeerServiceIdentifier.description.getter((v225 << 48) | (v227 << 40) | (v226 << 32) | (v222 << 24) | (v224 << 16) | (v228 << 8) | v215);
      uint64_t v231 = sub_100010680(v53, v54, &v230);
      uint64_t v4 = v205;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "Received a follow up message from %s", v52, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v55 = v223;
    v187[0] = type metadata accessor for NANSubscribe.Configuration();
    uint64_t v56 = v212;
    if (*(unsigned char *)(v55 + *(int *)(v187[0] + 68)) != 1) {
      goto LABEL_31;
    }
    swift_unownedRetainStrong();
    uint64_t v57 = v220;
    sub_10035665C((v225 << 40) | (v227 << 32) | (v226 << 24) | (v222 << 16) | (v224 << 8) | v228, v220);
    swift_release();
    swift_bridgeObjectRetain();
    uint64_t v58 = v211;
    sub_1002A6C50(v221, (uint64_t)v211);
    uint64_t v59 = v58;
    swift_bridgeObjectRelease();
    sub_10032DD6C(v57, type metadata accessor for NANPeer);
    uint64_t v60 = type metadata accessor for NANPeer.Service(0);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v60 - 8) + 48))(v58, 1, v60) == 1)
    {
      sub_1000380B4((uint64_t)v58, (uint64_t *)&unk_100486F40);
      goto LABEL_31;
    }
    uint64_t v72 = v58[10];
    uint64_t v73 = v58[11];
    uint64_t v74 = v58[12];
    uint64_t v75 = v59[13];
    unint64_t v76 = v59[14];
    sub_1002A94C8(v59[10], v59[11], v59[12], v75, v76);
    sub_10032DD6C((uint64_t)v59, type metadata accessor for NANPeer.Service);
    if (v74 == 5 || (sub_10013F040(v72, v73, v74, v75, v76), (v72 & 0x30000) != 0x10000))
    {
LABEL_31:
      uint64_t v88 = v218;
      sub_10032DD04(v4 + qword_100486E18, v218);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v216 + 48))(v88, 1, v217) == 1)
      {
        sub_1000380B4(v88, &qword_1004852C0);
        unint64_t v89 = (v225 << 48) | (v227 << 40) | (v226 << 32) | (v222 << 24) | (v224 << 16) | (v228 << 8) | v215;
        unint64_t v90 = v199;
        uint64_t v91 = v4;
        unint64_t v92 = v46;
LABEL_57:
        sub_10032B0F0((uint64_t)v90, v91, v89, v92);
        goto LABEL_58;
      }
      uint64_t v217 = a3;
      sub_10032DDCC(v88, v219, type metadata accessor for LongTermPairingKeys);
      swift_unownedRetainStrong();
      unint64_t v93 = v225;
      uint64_t v94 = v222;
      unint64_t v95 = (v225 << 40) | (v227 << 32) | (v226 << 24) | (v222 << 16) | (v224 << 8) | v228;
      uint64_t v96 = v220;
      sub_10035665C(v95, v220);
      swift_release();
      swift_bridgeObjectRetain();
      uint64_t v97 = v207;
      sub_1002A6C50(v221, (uint64_t)v207);
      swift_bridgeObjectRelease();
      sub_10032DD6C(v96, type metadata accessor for NANPeer);
      uint64_t v98 = type metadata accessor for NANPeer.Service(0);
      int v99 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v98 - 8) + 48))(v97, 1, v98);
      unint64_t v225 = v93 << 48;
      if (v99 == 1)
      {
        sub_1000380B4((uint64_t)v97, (uint64_t *)&unk_100486F40);
        uint64_t v100 = (uint64_t)v208;
LABEL_41:
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v209 + 56))(v100, 1, 1, v210);
        goto LABEL_42;
      }
      uint64_t v101 = v97[10];
      uint64_t v102 = v97[11];
      uint64_t v103 = v97[12];
      uint64_t v104 = v97[13];
      unint64_t v105 = v97[14];
      sub_1002A94C8(v101, v102, v103, v104, v105);
      sub_10032DD6C((uint64_t)v97, type metadata accessor for NANPeer.Service);
      uint64_t v100 = (uint64_t)v208;
      if ((v103 & 0xFE) == 4) {
        goto LABEL_41;
      }
      uint64_t v106 = NANServiceInfo.genericServiceProtocol.getter(v103, v104, v105);
      sub_10013F040(v101, v102, v103, v104, v105);
      if (!v106) {
        goto LABEL_41;
      }
      NANGenericServiceProtocol.publicKey.getter((uint64_t)v106, v100);
      swift_bridgeObjectRelease();
      uint64_t v107 = v209;
      uint64_t v108 = v210;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v209 + 48))(v100, 1, v210) == 1)
      {
LABEL_42:
        sub_1000380B4(v100, (uint64_t *)&unk_1004852B0);
        unint64_t v109 = v205;
        unint64_t v118 = v226;
LABEL_43:
        unint64_t v119 = v109 + qword_100488988;
        swift_beginAccess();
        uint64_t v120 = *(void *)v119;
        uint64_t v121 = *(void *)(*(void *)v119 + 16);
        uint64_t v122 = v213;
        unint64_t v123 = v228;
        uint64_t v124 = v214;
        uint64_t v125 = v215;
        if (v121
          && (unint64_t v126 = sub_100031130(v225 | (v227 << 40) | (v118 << 32) | (v94 << 24) | (v224 << 16) | (v228 << 8) | v215),
              (v127 & 1) != 0))
        {
          uint64_t v128 = *(void *)(v120 + 56) + *(void *)(v124 + 72) * v126;
          uint64_t v129 = v206;
          sub_10032DFF4(v128, v206, type metadata accessor for NANPeer.Service.AuthenticationStatus);
          uint64_t v130 = 0;
        }
        else
        {
          uint64_t v130 = 1;
          uint64_t v129 = v206;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v124 + 56))(v129, v130, 1, v122);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v124 + 48))(v129, 1, v122))
        {
          sub_1000380B4(v129, (uint64_t *)&unk_1004862F0);
          swift_endAccess();
        }
        else
        {
          uint64_t v131 = v203;
          sub_10032DFF4(v129, v203, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
          sub_1000380B4(v129, (uint64_t *)&unk_1004862F0);
          swift_endAccess();
          if (swift_getEnumCaseMultiPayload() == 2)
          {
            sub_10032DD6C(v219, type metadata accessor for LongTermPairingKeys);
            sub_10000C970(*(void *)v131, *(void *)(v131 + 8));
            goto LABEL_55;
          }
          sub_10032DD6C(v131, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
        }
        uint64_t v132 = Logger.logObject.getter();
        os_log_type_t v133 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v132, v133))
        {
          uint64_t v134 = (uint8_t *)swift_slowAlloc();
          uint64_t v223 = swift_slowAlloc();
          uint64_t v230 = v223;
          *(_DWORD *)uint64_t v134 = 136315138;
          uint64_t v135 = v227;
          uint64_t v136 = v225 | (v227 << 40) | (v118 << 32) | (v94 << 24);
          uint64_t v137 = v224;
          uint64_t v138 = NANPeerServiceIdentifier.description.getter(v136 | (v224 << 16) | (v228 << 8) | v125);
          uint64_t v231 = sub_100010680(v138, v139, &v230);
          unint64_t v123 = v228;
          unint64_t v109 = v205;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v125 = v215;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v132, v133, "Received an authentication response from %s but failed to verify the peer because missing peer's public OWE key or authentication state", v134, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          unint64_t v140 = v225;
          swift_slowDealloc();

          sub_10032DD6C(v219, type metadata accessor for LongTermPairingKeys);
          uint64_t v141 = v222;
          unint64_t v142 = v226;
LABEL_56:
          unint64_t v89 = v140 | (v135 << 40) | (v142 << 32) | (v141 << 24) | (v137 << 16) | (v123 << 8) | v125;
          unint64_t v90 = v199;
          uint64_t v91 = v109;
          unint64_t v92 = v46;
          goto LABEL_57;
        }

        sub_10032DD6C(v219, type metadata accessor for LongTermPairingKeys);
LABEL_55:
        unint64_t v142 = v118;
        uint64_t v141 = v94;
        uint64_t v137 = v224;
        unint64_t v140 = v225;
        uint64_t v135 = v227;
        goto LABEL_56;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v107 + 32))(v202, v100, v108);
      unint64_t v109 = v205;
      uint64_t v110 = (v205 + qword_100488988);
      swift_beginAccess();
      Class v111 = v110->isa;
      uint64_t v112 = *((void *)v110->isa + 2);
      uint64_t v221 = v110;
      if (v112)
      {
        uint64_t v113 = v226;
        unint64_t v114 = sub_100031130(v225 | (v227 << 40) | (v226 << 32) | (v94 << 24) | (v224 << 16) | (v228 << 8) | v215);
        uint64_t v115 = v200;
        if (v116)
        {
          sub_10032DFF4(*((void *)v111 + 7) + *(void *)(v214 + 72) * v114, v200, type metadata accessor for NANPeer.Service.AuthenticationStatus);
          uint64_t v117 = 0;
        }
        else
        {
          uint64_t v117 = 1;
        }
      }
      else
      {
        uint64_t v113 = v226;
        uint64_t v117 = 1;
        uint64_t v115 = v200;
      }
      uint64_t v143 = v214;
      uint64_t v144 = v213;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v214 + 56))(v115, v117, 1, v213);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v143 + 48))(v115, 1, v144))
      {
        sub_1000380B4(v115, (uint64_t *)&unk_1004862F0);
        swift_endAccess();
        (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v202, v108);
LABEL_65:
        unint64_t v118 = v113;
        goto LABEL_43;
      }
      uint64_t v145 = v197;
      sub_10032DFF4(v115, v197, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
      sub_1000380B4(v115, (uint64_t *)&unk_1004862F0);
      swift_endAccess();
      if (swift_getEnumCaseMultiPayload())
      {
        (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v202, v108);
        sub_10032DD6C(v145, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
        goto LABEL_65;
      }
      uint64_t v146 = v196;
      sub_10032DDCC(v145, (uint64_t)v196, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
      uint64_t v231 = 0;
      uint64_t v147 = v223;
      uint64_t v148 = v195;
      sub_10032DFF4(v223 + *(int *)(v187[0] + 64), v195, (uint64_t (*)(void))type metadata accessor for OWEKeys);
      LOBYTE(v146) = LongTermPairingKeys.verifyAuthenticationResponse(forPeer:with:publisherKeys:using:extraServiceSpecificInfo:)(v95, (uint64_t)v199, v146, v148, &v231);
      sub_10032DD6C(v148, (uint64_t (*)(void))type metadata accessor for OWEKeys);
      if ((v146 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v152 = Logger.logObject.getter();
        os_log_type_t v153 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v152, v153))
        {
          unint64_t v154 = (uint8_t *)swift_slowAlloc();
          uint64_t v230 = swift_slowAlloc();
          *(_DWORD *)unint64_t v154 = 136315138;
          unint64_t v155 = v225 | (v227 << 40) | (v113 << 32) | (v94 << 24) | (v224 << 16) | (v228 << 8) | v215;
          uint64_t v160 = NANPeerServiceIdentifier.description.getter(v155);
          uint64_t v229 = sub_100010680(v160, v161, &v230);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          unint64_t v158 = v205;
          swift_bridgeObjectRelease();
          os_log_t v159 = "Received an authentication response from %s but failed to verify because authentication failed";
          goto LABEL_72;
        }
        goto LABEL_77;
      }
      sub_10032DFF4(v147 + *(int *)(v187[0] + 64), v148, (uint64_t (*)(void))type metadata accessor for OWEKeys);
      uint64_t v108 = OWEKeys.generatePMK(for:asClient:)(v202, 1);
      unint64_t v150 = v149;
      sub_10032DD6C(v148, (uint64_t (*)(void))type metadata accessor for OWEKeys);
      unint64_t v151 = v228;
      if (v150 >> 60 == 15)
      {
        swift_bridgeObjectRelease();
        uint64_t v152 = Logger.logObject.getter();
        os_log_type_t v153 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v152, v153))
        {
          unint64_t v154 = (uint8_t *)swift_slowAlloc();
          uint64_t v230 = swift_slowAlloc();
          *(_DWORD *)unint64_t v154 = 136315138;
          unint64_t v155 = v225 | (v227 << 40) | (v113 << 32) | (v94 << 24) | (v224 << 16) | (v151 << 8) | v215;
          uint64_t v156 = NANPeerServiceIdentifier.description.getter(v155);
          uint64_t v229 = sub_100010680(v156, v157, &v230);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          unint64_t v158 = v205;
          swift_bridgeObjectRelease();
          os_log_t v159 = "Received an authentication response from %s but failed to verify because PMK generation failed";
LABEL_72:
          _os_log_impl((void *)&_mh_execute_header, v152, v153, v159, v154, 0xCu);
          swift_arrayDestroy();
          unint64_t v109 = v158;
          swift_slowDealloc();
          swift_slowDealloc();

          sub_10032DD6C((uint64_t)v196, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
          (*(void (**)(uint64_t, uint64_t))(v209 + 8))(v202, v210);
          sub_10032DD6C(v219, type metadata accessor for LongTermPairingKeys);
LABEL_80:
          unint64_t v90 = v199;
          uint64_t v91 = v109;
          unint64_t v89 = v155;
          unint64_t v92 = v46;
          goto LABEL_57;
        }

        sub_10032DD6C((uint64_t)v196, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
        (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v202, v210);
        sub_10032DD6C(v219, type metadata accessor for LongTermPairingKeys);
        unint64_t v171 = v225 | (v227 << 40) | (v113 << 32) | (v94 << 24) | (v224 << 16) | (v151 << 8);
LABEL_79:
        unint64_t v155 = v171 | v215;
        goto LABEL_80;
      }
      uint64_t v162 = v194;
      *uint64_t v194 = v108;
      v162[1] = v150;
      swift_storeEnumTagMultiPayload();
      uint64_t v152 = v221;
      swift_beginAccess();
      sub_100013D44(v108, v150);
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v164 = v113;
      uint64_t v113 = isUniquelyReferenced_nonNull_native;
      uint64_t v229 = (uint64_t)v152->isa;
      id v165 = (objc_class *)v229;
      v152->Class isa = (Class)0x8000000000000000;
      unint64_t v109 = v225 | (v227 << 40) | (v164 << 32) | (v94 << 24) | (v224 << 16) | (v151 << 8) | v215;
      unint64_t v228 = sub_100031130(v109);
      uint64_t v167 = *((void *)v165 + 2);
      BOOL v168 = (v166 & 1) == 0;
      uint64_t v169 = v167 + v168;
      if (__OFADD__(v167, v168))
      {
        __break(1u);
      }
      else
      {
        uint64_t v107 = v166;
        uint64_t v94 = v192;
        if (*((void *)v165 + 3) < v169)
        {
          sub_100292528(v169, v113);
          id v165 = (objc_class *)v229;
          unint64_t v228 = sub_100031130(v109);
          if ((v107 & 1) != (v170 & 1))
          {
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
LABEL_77:

            sub_10032DD6C((uint64_t)v196, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
            (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v202, v108);
            sub_10032DD6C(v219, type metadata accessor for LongTermPairingKeys);
            unint64_t v171 = v225 | (v227 << 40) | (v113 << 32) | (v94 << 24) | (v224 << 16) | (v228 << 8);
            goto LABEL_79;
          }
LABEL_82:
          uint64_t v172 = v191;
          uint64_t v173 = v109;
          uint64_t v227 = v108;
          v152->Class isa = v165;
          swift_bridgeObjectRelease();
          unint64_t v174 = v152->isa;
          unint64_t v226 = v109;
          if (v107)
          {
            swift_bridgeObjectRetain();
            uint64_t v175 = v213;
            uint64_t v176 = v193;
            unint64_t v177 = v228;
          }
          else
          {
            uint64_t v178 = (uint64_t)v188;
            swift_storeEnumTagMultiPayload();
            uint64_t v179 = v189;
            sub_10032DFF4(v178, v189, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
            type metadata accessor for P2PTimer();
            swift_bridgeObjectRetain();
            variable initialization expression of AWDLPeer.lastUpdated();
            sub_10032DD6C(v178, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
            uint64_t v175 = v213;
            uint64_t v176 = v193;
            (*(void (**)(uint64_t, char *, uint64_t))(v94 + 32))(v179 + *(int *)(v213 + 20), v172, v193);
            uint64_t v180 = v190;
            sub_10032DDCC(v179, v190, type metadata accessor for NANPeer.Service.AuthenticationStatus);
            unint64_t v177 = v228;
            sub_10029619C(v228, v173, v180, v174);
          }
          uint64_t v181 = v174[7];
          swift_bridgeObjectRelease();
          uint64_t v182 = v181 + *(void *)(v214 + 72) * v177;
          uint64_t v183 = v194;
          sub_10032DF8C((uint64_t)v194, v182, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
          type metadata accessor for P2PTimer();
          variable initialization expression of AWDLPeer.lastUpdated();
          (*(void (**)(uint64_t, char *, uint64_t))(v94 + 40))(v182 + *(int *)(v175 + 20), v172, v176);
          sub_10032DD6C((uint64_t)v183, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
          swift_endAccess();
          uint64_t v184 = v231;
          uint64_t v185 = v217;
          swift_bridgeObjectRetain();
          uint64_t v186 = v205;
          sub_10032485C(v46, v212, v185, v184);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_10000C95C(v227, v150);
          sub_10032DD6C((uint64_t)v196, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
          (*(void (**)(uint64_t, uint64_t))(v209 + 8))(v202, v210);
          sub_10032DD6C(v219, type metadata accessor for LongTermPairingKeys);
          unint64_t v90 = v199;
          uint64_t v91 = v186;
          unint64_t v89 = v226;
          unint64_t v92 = v46;
          goto LABEL_57;
        }
        if (v113) {
          goto LABEL_82;
        }
      }
      sub_1003A3444();
      id v165 = (objc_class *)v229;
      goto LABEL_82;
    }
    uint64_t v77 = v4 + qword_100488988;
    swift_beginAccess();
    uint64_t v78 = *(void *)v77;
    if (*(void *)(*(void *)v77 + 16))
    {
      unint64_t v79 = sub_100031130((v225 << 48) | (v227 << 40) | (v226 << 32) | (v222 << 24) | (v224 << 16) | (v228 << 8) | v215);
      uint64_t v80 = v213;
      uint64_t v81 = v214;
      if (v82)
      {
        uint64_t v83 = *(void *)(v78 + 56) + *(void *)(v214 + 72) * v79;
        uint64_t v84 = v201;
        sub_10032DFF4(v83, v201, type metadata accessor for NANPeer.Service.AuthenticationStatus);
        uint64_t v85 = 0;
        goto LABEL_27;
      }
      uint64_t v85 = 1;
    }
    else
    {
      uint64_t v85 = 1;
      uint64_t v80 = v213;
      uint64_t v81 = v214;
    }
    uint64_t v84 = v201;
LABEL_27:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v81 + 56))(v84, v85, 1, v80);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48))(v84, 1, v80))
    {
      sub_1000380B4(v84, (uint64_t *)&unk_1004862F0);
      swift_endAccess();
    }
    else
    {
      uint64_t v86 = v198;
      sub_10032DFF4(v84, v198, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
      sub_1000380B4(v84, (uint64_t *)&unk_1004862F0);
      swift_endAccess();
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      sub_10032DD6C(v86, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
      if (EnumCaseMultiPayload == 4)
      {
        swift_bridgeObjectRetain();
        sub_10032485C(v46, v56, a3, v199);
        swift_bridgeObjectRelease();
LABEL_58:
        swift_bridgeObjectRelease();
        return;
      }
    }
    goto LABEL_31;
  }
  uint64_t v61 = Logger.logObject.getter();
  os_log_type_t v62 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v61, v62))
  {
    unint64_t v63 = (uint8_t *)swift_slowAlloc();
    uint64_t v230 = swift_slowAlloc();
    *(_DWORD *)unint64_t v63 = 136315138;
    uint64_t v64 = NANPeerServiceIdentifier.description.getter((v225 << 48) | (v227 << 40) | (v226 << 32) | (v45 << 24) | (v44 << 16) | (v228 << 8) | v43);
    uint64_t v231 = sub_100010680(v64, v65, &v230);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v61, v62, "Failed to parse the follow up received from %s", v63, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
}

uint64_t sub_100329B8C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (uint64_t *)((char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  unint64_t v8 = (void *)*v7;
  *uint64_t v6 = *v7;
  (*(void (**)(uint64_t *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v4 + 8))(v6, v3);
  if (v8)
  {
    uint64_t v11 = v1 + qword_100488970;
    swift_beginAccess();
    sub_10032DF8C(a1, v11, (uint64_t (*)(void))type metadata accessor for NANSubscribe.Configuration);
    return swift_endAccess();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100329CE8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)((swift_isaMask & *(void *)v0) + 0x58);
  uint64_t v59 = *(void *)((swift_isaMask & *(void *)v0) + 0x50);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v47 - v4;
  uint64_t v6 = type metadata accessor for DispatchTimeInterval();
  uint64_t v54 = *(void *)(v6 - 8);
  uint64_t v55 = v6;
  __chkstk_darwin();
  uint64_t v57 = (void **)((char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  uint64_t v56 = (char *)&v47 - v8;
  __chkstk_darwin();
  uint64_t v10 = (char *)&v47 - v9;
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v14 = (uint64_t *)((char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v53 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v15 = (void *)*v53;
  uint64_t *v14 = *v53;
  (*(void (**)(uint64_t *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  id v16 = v15;
  char v17 = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v12 + 8))(v14, v11);
  if (v17)
  {
    uint64_t v58 = v2;
    uint64_t v19 = qword_100488978;
    if (v1[qword_100488978] == 1)
    {
      uint64_t v50 = v3;
      uint64_t v20 = &v1[qword_100488980];
      uint64_t v21 = v1;
      BOOL v51 = v20;
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.default.getter();
      BOOL v24 = os_log_type_enabled(v22, v23);
      char v49 = v5;
      if (v24)
      {
        uint64_t v48 = v22;
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        unint64_t v47 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v25 = 138412290;
        uint64_t v60 = v21;
        uint64_t v26 = v21;
        uint64_t v22 = v48;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *unint64_t v47 = v1;

        _os_log_impl((void *)&_mh_execute_header, v22, v23, "%@ will attempt to stop", v25, 0xCu);
        sub_100010BCC(&qword_10047CC30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      v1[v19] = 0;
      uint64_t v27 = NANConstants.serviceTerminateEventTimeout.unsafeMutableAddressor();
      uint64_t v28 = v54;
      uint64_t v29 = v10;
      uint64_t v30 = (uint64_t)v10;
      uint64_t v31 = v55;
      (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v29, v27, v55);
      Swift::String v32 = (void *)*v53;
      uint64_t v33 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v34 = (void *)swift_allocObject();
      uint64_t v35 = v58;
      v34[2] = v59;
      v34[3] = v35;
      v34[4] = v33;
      unint64_t v36 = *(void (**)(char *, void, uint64_t))(v28 + 104);
      uint64_t v37 = (uint64_t)v56;
      v36(v56, enum case for DispatchTimeInterval.never(_:), v31);
      uint64_t v38 = (uint64_t)v57;
      *uint64_t v57 = 100;
      v36((char *)v38, enum case for DispatchTimeInterval.milliseconds(_:), v31);
      type metadata accessor for P2PTimer();
      swift_allocObject();
      *(void *)&v21[qword_100486E00] = P2PTimer.init(deadlineAfter:on:repeating:leeway:_:)(v30, v32, v37, v38, (uint64_t)sub_10032B028, (uint64_t)v34);
      swift_release();
      uint64_t v39 = *(void *)&v21[qword_100486DF0];
      swift_unownedRetainStrong();
      sub_1003546AC();
      swift_release();
      uint64_t v40 = v21;
      swift_unownedRetainStrong();
      unint64_t v42 = v49;
      uint64_t v41 = v50;
      uint64_t v43 = AssociatedTypeWitness;
      (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v49, v39 + *(void *)(*(void *)v39 + 96), AssociatedTypeWitness);
      swift_release();
      uint64_t v44 = &v40[qword_100488970];
      swift_beginAccess();
      uint64_t v45 = *v44;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 232))(v45, v43, AssociatedConformanceWitness);
      return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v42, AssociatedTypeWitness);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *sub_10032A530()
{
  swift_beginAccess();
  uint64_t result = (void *)swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result;
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v6 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 138412290;
      uint64_t v7 = v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v6 = v1;

      _os_log_impl((void *)&_mh_execute_header, v3, v4, "%@ timed out while waiting for terminate event", v5, 0xCu);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v8 = qword_100486E08;
    uint64_t v9 = *(void **)&v2[qword_100486E08];
    if (v9) {
      [v9 subscribeTerminatedWithReason:2];
    }
    *(void *)&v2[v8] = 0;
    swift_unknownObjectRelease();
    swift_unownedRetainStrong();
    sub_100354870();
    swift_release();
    sub_1002FD2E8((uint64_t)v2);

    return (void *)swift_release();
  }
  return result;
}

uint64_t sub_10032A718()
{
  id v1 = v0;
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    os_log_type_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v4 = 138412290;
    *(void *)&v8[0] = v1;
    id v6 = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v1;

    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Terminating %@ because it's client was invalidated", v4, 0xCu);
    sub_100010BCC(&qword_10047CC30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  memset(v8, 0, sizeof(v8));
  sub_100320FD0((uint64_t)v8);
  return sub_100329CE8();
}

void sub_10032A88C(void *a1)
{
  id v1 = a1;
  sub_100320E48();
}

uint64_t sub_10032A8D4(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = v5;
  uint64_t v37 = a3;
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v14 = (uint64_t *)((char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  id v16 = (void *)*v15;
  uint64_t *v14 = *v15;
  (*(void (**)(uint64_t *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  id v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v12 + 8))(v14, v11);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    return result;
  }
  if (*(unsigned char *)(v6 + qword_100488978) != 1) {
    return a5(3);
  }
  unsigned int v35 = a4;
  unint64_t v36 = a5;
  uint64_t v19 = (unsigned __int8 *)(v6 + qword_100488970);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  NANConstants.csaMatterServiceName.unsafeMutableAddressor();
  Swift::String v20 = String.lowercased()();
  Swift::String v21 = String.lowercased()();
  if (v20._countAndFlagsBits == v21._countAndFlagsBits && v20._object == v21._object)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    goto LABEL_11;
  }
  char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v23)
  {
LABEL_11:
    int v26 = NANServiceInfo.init(csaMatterPayload:)();
    uint64_t v28 = v31;
    unint64_t v30 = v32;
    sub_100013D44(a1, a2);
    goto LABEL_12;
  }
  uint64_t rawValue = NANGenericServiceProtocol.init()().attributes._rawValue;
  sub_100013D44(a1, a2);
  NANGenericServiceProtocol.blob.setter(a1, a2);
  uint64_t v24 = (uint64_t)rawValue;
  uint64_t v25 = (uint64_t *)NANGenericServiceProtocol.AttributeFilter.all.unsafeMutableAddressor();
  int v26 = NANServiceInfo.init(information:filter:)(v24, *v25);
  uint64_t v28 = v27;
  unint64_t v30 = v29;
LABEL_12:
  swift_unownedRetainStrong();
  sub_100354870();
  swift_release();
  swift_retain();
  swift_release();
  unint64_t v33 = WiFiMACAddress.wifiAddress.getter();
  sub_100301B48(v26, v28, v30, v33 & 0xFFFFFFFFFFFFLL, v35, *v19);
  swift_release();
  v36(0);
  return sub_10000C970(v28, v30);
}

void sub_10032ABF8(void *a1, int a2, void *a3, void *a4, unsigned int a5, void *aBlock)
{
  uint64_t v10 = _Block_copy(aBlock);
  id v11 = a3;
  id v12 = a4;
  id v16 = a1;
  uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v15 = v14;

  *(void *)(swift_allocObject() + 16) = v10;
  sub_10032A8D4(v13, v15, (uint64_t)v12, a5, (uint64_t (*)(uint64_t))sub_100012A08);
  swift_release();
  sub_10000C970(v13, v15);
}

id sub_10032ACF4(void *a1)
{
  id v1 = a1;
  sub_10032AD5C();

  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();

  return v2;
}

uint64_t sub_10032AD5C()
{
  strcpy((char *)v8, "NANSubscribe [");
  HIBYTE(v8[1]) = -18;
  uint64_t v1 = v0 + qword_100488970;
  swift_beginAccess();
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 8285;
  v3._object = (void *)0xE200000000000000;
  String.append(_:)(v3);
  uint64_t v5 = *(void *)(v1 + 8);
  os_log_type_t v4 = *(void **)(v1 + 16);
  swift_bridgeObjectRetain();
  v6._uint64_t countAndFlagsBits = NANServiceName.description.getter(v5, v4);
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8[0];
}

void sub_10032AE48()
{
}

uint64_t _s8InstanceCMa()
{
  return sub_100038354();
}

void *sub_10032AEA4(uint64_t a1, uint64_t a2)
{
  return sub_1003218A8(a1, a2);
}

void sub_10032AEC0()
{
}

uint64_t sub_10032AEEC@<X0>(uint64_t a1@<X8>)
{
  return sub_100321060(a1);
}

uint64_t sub_10032AF10()
{
  return sub_10014F088(&qword_100486EB0);
}

uint64_t sub_10032AF44(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10032AF80()
{
  return sub_10014F088(&qword_100486F00);
}

uint64_t sub_10032AFB4(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10032AFF0()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void *sub_10032B028()
{
  return sub_10032A530();
}

uint64_t sub_10032B034(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2 >> 16;
  Swift::String v3 = (uint64_t *)(a1 + qword_100486E10);
  swift_beginAccess();
  uint64_t v4 = *v3;
  swift_bridgeObjectRetain();
  BOOL v5 = sub_100374C7C(v2, v4);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v5)
  {
    swift_beginAccess();
    sub_1003A5210((uint64_t)v7, v2);
    swift_endAccess();
    sub_1003210D4();
    return sub_100321510();
  }
  return result;
}

uint64_t sub_10032B0F0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result = NANGenericServiceProtocol.blob.getter(a1);
  if (v8 >> 60 != 15)
  {
    unint64_t v9 = v8;
    unint64_t v10 = a4 >> 8;
    uint64_t v11 = a4 >> 16;
    uint64_t v12 = result;
    switch(v8 >> 62)
    {
      case 1uLL:
        if ((int)result != result >> 32) {
          goto LABEL_4;
        }
        goto LABEL_12;
      case 2uLL:
        if (*(void *)(result + 16) == *(void *)(result + 24)) {
          goto LABEL_12;
        }
        goto LABEL_4;
      case 3uLL:
        goto LABEL_12;
      default:
        if ((v8 & 0xFF000000000000) != 0)
        {
LABEL_4:
          uint64_t v13 = (uint64_t *)(a2 + qword_100488990);
          swift_beginAccess();
          uint64_t v14 = *v13;
          swift_bridgeObjectRetain();
          BOOL v15 = sub_100374F98(a3 & 0xFFFFFFFFFFFFFFLL, v14);
          swift_bridgeObjectRelease();
          if (v15 && (id v16 = *(void **)(a2 + qword_100486E08)) != 0)
          {
            swift_unknownObjectRetain();
            Class isa = Data._bridgeToObjectiveC()().super.isa;
            id v18 = WiFiAddress.apiAddress.getter(v11);
            [v16 subscribeReceivedMessage:isa fromPublishID:v10 address:v18];
            sub_10000C95C(v12, v9);

            uint64_t result = swift_unknownObjectRelease();
          }
          else
          {
            uint64_t result = sub_10000C95C(v12, v9);
          }
        }
        else
        {
LABEL_12:
          uint64_t result = sub_10000C95C(result, v8);
        }
        break;
    }
  }
  return result;
}

void sub_10032B2B0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    Swift::String v6 = (void *)Strong;
    if (*(unsigned char *)(Strong + qword_100488978) == 1) {
      a4();
    }
  }
}

uint64_t sub_10032B320()
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v0 = type metadata accessor for DispatchTimeInterval();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  Swift::String v3 = (char *)v102 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  BOOL v5 = (char *)v102 - v4;
  __chkstk_darwin();
  uint64_t v121 = (char *)v102 - v6;
  __chkstk_darwin();
  unint64_t v8 = (char *)v102 - v7;
  __chkstk_darwin();
  char v127 = (char *)v102 - v9;
  uint64_t v104 = type metadata accessor for DispatchTime();
  uint64_t v103 = *(void *)(v104 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)v102 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin();
  BOOL v15 = (void *)((char *)v102 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v16 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  id v17 = (void *)*v16;
  *BOOL v15 = *v16;
  (*(void (**)(uint64_t *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  id v18 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v13 + 8))(v15, v12);
  if ((v17 & 1) == 0) {
    goto LABEL_37;
  }
  uint64_t v129 = v5;
  uint64_t v137 = &_swiftEmptySetSingleton;
  type metadata accessor for P2PTimer();
  variable initialization expression of AWDLPeer.lastUpdated();
  uint64_t v20 = swift_allocObject();
  Swift::String v21 = (uint64_t *)v3;
  uint64_t v22 = v0;
  *(void *)(v20 + 16) = &_swiftEmptySetSingleton;
  uint64_t v23 = v20 + 16;
  *(void *)(v20 + 24) = 0;
  uint64_t v122 = v20;
  *(_WORD *)(v20 + 32) = 1025;
  unint64_t v126 = v8;
  uint64_t v24 = v133;
  uint64_t v25 = (uint64_t *)&v133[qword_100488988];
  swift_beginAccess();
  uint64_t v26 = swift_bridgeObjectRetain();
  uint64_t v27 = sub_10032CCB8(v26);
  swift_bridgeObjectRelease();
  *uint64_t v25 = v27;
  swift_bridgeObjectRelease();
  uint64_t v28 = swift_bridgeObjectRetain();
  uint64_t v124 = v23;
  sub_100320A18(v28, v23);
  v102[1] = 0;
  swift_bridgeObjectRelease();
  unint64_t v29 = &v24[qword_100488990];
  swift_beginAccess();
  v102[0] = v29;
  uint64_t v30 = *(void *)v29;
  uint64_t v31 = *(void *)(*(void *)v29 + 56);
  uint64_t v109 = *(void *)v29 + 56;
  uint64_t v32 = 1 << *(unsigned char *)(v30 + 32);
  uint64_t v33 = -1;
  if (v32 < 64) {
    uint64_t v33 = ~(-1 << v32);
  }
  unint64_t v34 = v33 & v31;
  uint64_t v128 = &v24[qword_100488980];
  uint64_t v35 = (uint64_t)v126;
  int64_t v110 = (unint64_t)(v32 + 63) >> 6;
  unint64_t v118 = (void (**)(char *, uint64_t, uint64_t))(v1 + 16);
  uint64_t v117 = (void (**)(char *, uint64_t))(v1 + 8);
  Class v111 = &v135;
  unsigned int v116 = enum case for DispatchTimeInterval.seconds(_:);
  uint64_t v115 = (void (**)(uint64_t *, uint64_t, uint64_t))(v1 + 104);
  uint64_t v123 = v30;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v36 = 0;
  *(void *)&long long v37 = 136315650;
  long long v108 = v37;
  uint64_t v107 = &type metadata for Any[8];
  *(void *)&long long v37 = 138412546;
  long long v105 = v37;
  uint64_t v125 = v22;
  unint64_t v119 = v21;
  uint64_t v38 = (uint64_t)v127;
  uint64_t v39 = (uint64_t)v11;
  unint64_t v114 = v11;
  if (v34) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v41 = v36 + 1;
  if (!__OFADD__(v36, 1))
  {
    if (v41 < v110)
    {
      unint64_t v42 = *(void *)(v109 + 8 * v41);
      int64_t v43 = v36 + 1;
      if (v42) {
        goto LABEL_21;
      }
      int64_t v43 = v36 + 2;
      if (v36 + 2 >= v110) {
        goto LABEL_34;
      }
      unint64_t v42 = *(void *)(v109 + 8 * v43);
      if (v42) {
        goto LABEL_21;
      }
      int64_t v43 = v36 + 3;
      if (v36 + 3 >= v110) {
        goto LABEL_34;
      }
      unint64_t v42 = *(void *)(v109 + 8 * v43);
      if (v42)
      {
LABEL_21:
        uint64_t v130 = (v42 - 1) & v42;
        int64_t v131 = v43;
        for (unint64_t i = __clz(__rbit64(v42)) + (v43 << 6); ; unint64_t i = __clz(__rbit64(v34)) | (v36 << 6))
        {
          uint64_t v45 = (unsigned __int8 *)(*(void *)(v123 + 48) - i + 8 * i);
          uint64_t v46 = v45[1];
          uint64_t v47 = v45[2];
          uint64_t v48 = v45[3];
          uint64_t v49 = v45[4];
          uint64_t v50 = v45[5];
          uint64_t v51 = v45[6];
          unint64_t v52 = *v45 | (unint64_t)(v46 << 8) | (v47 << 16) | (v48 << 24) | (v49 << 32) | (v50 << 40) | (v51 << 48);
          sub_10032C054(v38, v35, (uint64_t)v133, v52, v39);
          swift_beginAccess();
          sub_1003A5210((uint64_t)&v134, (v48 << 16) | (v47 << 8) | (v49 << 24) | (v50 << 32) | (v51 << 40) | v46);
          swift_endAccess();
          uint64_t v53 = *v118;
          uint64_t v54 = v121;
          uint64_t v55 = v125;
          (*v118)(v121, v35, v125);
          uint64_t v56 = v129;
          v53(v129, v38, v55);
          uint64_t v57 = Logger.logObject.getter();
          os_log_type_t v58 = static os_log_type_t.debug.getter();
          int v59 = v58;
          BOOL v60 = os_log_type_enabled(v57, v58);
          unint64_t v132 = v52;
          if (v60)
          {
            uint64_t v61 = swift_slowAlloc();
            LODWORD(v113) = v59;
            uint64_t v62 = v61;
            uint64_t v112 = swift_slowAlloc();
            v136[0] = v112;
            *(_DWORD *)uint64_t v62 = v108;
            uint64_t v63 = NANPeerServiceIdentifier.description.getter(v52);
            uint64_t v134 = sub_100010680(v63, v64, v136);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v62 + 12) = 2080;
            uint64_t v65 = DispatchTimeInterval.description.getter();
            uint64_t v134 = sub_100010680(v65, v66, v136);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            unint64_t v67 = *v117;
            (*v117)(v54, v55);
            *(_WORD *)(v62 + 22) = 2080;
            unint64_t v68 = v129;
            uint64_t v69 = DispatchTimeInterval.description.getter();
            uint64_t v134 = sub_100010680(v69, v70, v136);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            v67(v68, v55);
            _os_log_impl((void *)&_mh_execute_header, v57, (os_log_type_t)v113, "Considering aging out peer %s. Last saw peer %s ago and last saw service information %s ago.", (uint8_t *)v62, 0x20u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            unint64_t v67 = *v117;
            (*v117)(v54, v55);
            v67(v56, v55);
          }
          uint64_t v71 = v116;
          uint64_t v72 = v115;
          uint64_t v73 = v119;
          *unint64_t v119 = 9;
          uint64_t v74 = *v72;
          (*v72)(v73, v71, v55);
          uint64_t v35 = (uint64_t)v126;
          BOOL v75 = static DispatchTimeInterval.< infix(_:_:)();
          v67((char *)v73, v55);
          uint64_t v38 = (uint64_t)v127;
          if (v75) {
            uint64_t v76 = 8;
          }
          else {
            uint64_t v76 = 20;
          }
          *uint64_t v73 = v76;
          v74(v73, v71, v55);
          BOOL v77 = sub_10032C3C4((uint64_t)v73, v38, v122, v132, (uint64_t)v133);
          v67((char *)v73, v55);
          if (v77)
          {
            uint64_t v78 = v133;
            unint64_t v79 = Logger.logObject.getter();
            os_log_type_t v80 = static os_log_type_t.default.getter();
            int v81 = v80;
            uint64_t v113 = v79;
            if (os_log_type_enabled(v79, v80))
            {
              uint64_t v82 = swift_slowAlloc();
              uint64_t v83 = swift_slowAlloc();
              int v106 = v81;
              uint64_t v84 = (void *)v83;
              uint64_t v112 = swift_slowAlloc();
              v136[0] = v112;
              *(_DWORD *)uint64_t v82 = v105;
              uint64_t v134 = (uint64_t)v78;
              uint64_t v85 = v78;
              uint64_t v86 = (uint64_t)v126;
              uint64_t v87 = v133;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *uint64_t v84 = v87;

              *(_WORD *)(v82 + 12) = 2080;
              unint64_t v88 = v132;
              uint64_t v89 = NANPeerServiceIdentifier.description.getter(v132);
              uint64_t v134 = sub_100010680(v89, v90, v136);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              uint64_t v55 = v125;
              swift_bridgeObjectRelease();
              uint64_t v91 = v113;
              _os_log_impl((void *)&_mh_execute_header, v113, (os_log_type_t)v106, "%@ aging out discovery result %s", (uint8_t *)v82, 0x16u);
              sub_100010BCC(&qword_10047CC30);
              swift_arrayDestroy();
              uint64_t v38 = (uint64_t)v127;
              swift_slowDealloc();
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              unint64_t v34 = v130;
              int64_t v36 = v131;
            }
            else
            {

              unint64_t v34 = v130;
              int64_t v36 = v131;
              uint64_t v86 = v35;
              unint64_t v88 = v132;
            }
            sub_1003A53F8(v136, v88);
            v67((char *)v86, v55);
            uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v67)(v38, v55);
            uint64_t v39 = (uint64_t)v114;
            uint64_t v35 = v86;
            if (!v34) {
              goto LABEL_8;
            }
          }
          else
          {
            v67((char *)v35, v55);
            uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v67)(v38, v55);
            uint64_t v39 = (uint64_t)v114;
            unint64_t v34 = v130;
            int64_t v36 = v131;
            if (!v130) {
              goto LABEL_8;
            }
          }
LABEL_7:
          uint64_t v130 = (v34 - 1) & v34;
          int64_t v131 = v36;
        }
      }
      uint64_t v44 = v36 + 4;
      if (v36 + 4 < v110)
      {
        unint64_t v42 = *(void *)(v109 + 8 * v44);
        if (v42)
        {
          int64_t v43 = v36 + 4;
          goto LABEL_21;
        }
        while (1)
        {
          int64_t v43 = v44 + 1;
          if (__OFADD__(v44, 1)) {
            goto LABEL_36;
          }
          if (v43 >= v110) {
            break;
          }
          unint64_t v42 = *(void *)(v109 + 8 * v43);
          ++v44;
          if (v42) {
            goto LABEL_21;
          }
        }
      }
    }
LABEL_34:
    uint64_t v92 = v39;
    swift_release();
    swift_beginAccess();
    uint64_t v93 = *(void *)(v122 + 24);
    int v94 = *(unsigned __int8 *)(v122 + 32);
    int v95 = *(unsigned __int8 *)(v122 + 33);
    uint64_t v96 = swift_bridgeObjectRetain();
    unsigned int v97 = v94 | (v95 << 8);
    uint64_t v98 = v133;
    sub_100321824(v96, v93, v97);
    uint64_t v99 = (uint64_t)v137;
    swift_beginAccess();
    uint64_t v100 = swift_bridgeObjectRetain();
    sub_10032DB68(v100);
    swift_endAccess();
    uint64_t v101 = swift_bridgeObjectRelease();
    sub_100321510(v101);
    __chkstk_darwin();
    v102[-2] = v98;
    swift_bridgeObjectRetain();
    sub_1003707B4((uint64_t (*)(int *))sub_10032DF4C, (uint64_t)&v102[-4], v99);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v92, v104);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10032C054(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  v20[1] = a5;
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  sub_100010BCC((uint64_t *)&unk_100486F40);
  __chkstk_darwin();
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for NANPeer.Service(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  v20[0] = (uint64_t)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchTimeInterval();
  uint64_t v11 = *(void *)(v21 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NANPeer(0);
  __chkstk_darwin();
  BOOL v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unownedRetainStrong();
  sub_10035665C((a4 >> 8) & 0xFFFFFFFFFFFFLL, (uint64_t)v15);
  swift_release();
  DispatchTime.distance(to:)();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1002A6C50(a4, (uint64_t)v7);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_10032DD6C((uint64_t)v15, type metadata accessor for NANPeer);
    sub_1000380B4((uint64_t)v7, (uint64_t *)&unk_100486F40);
    uint64_t v16 = v21;
    (*(void (**)(uint64_t, void, uint64_t))(v11 + 104))(v22, enum case for DispatchTimeInterval.never(_:), v21);
    uint64_t v17 = v16;
  }
  else
  {
    uint64_t v18 = v20[0];
    sub_10032DDCC((uint64_t)v7, v20[0], type metadata accessor for NANPeer.Service);
    DispatchTime.distance(to:)();
    sub_10032DD6C(v18, type metadata accessor for NANPeer.Service);
    sub_10032DD6C((uint64_t)v15, type metadata accessor for NANPeer);
    uint64_t v17 = v21;
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(v23, v13, v17);
}

BOOL sub_10032C3C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v41 = a5;
  uint64_t v8 = type metadata accessor for DispatchTimeInterval();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v13 = (uint64_t *)((char *)&v35 - v12);
  __chkstk_darwin();
  BOOL v15 = (uint64_t *)((char *)&v35 - v14);
  if (!static DispatchTimeInterval.< infix(_:_:)()) {
    return 0;
  }
  uint64_t v36 = a1;
  long long v37 = v11;
  uint64_t v38 = a2;
  uint64_t v39 = v9;
  uint64_t v40 = v8;
  swift_beginAccess();
  unint64_t v16 = ((unint64_t)BYTE5(a4) << 32) & 0xFFFF00FF00000000 | ((unint64_t)BYTE6(a4) << 40) | ((unint64_t)BYTE4(a4) << 24) | ((unint64_t)BYTE3(a4) << 16) | ((unint64_t)BYTE2(a4) << 8) | BYTE1(a4);
  sub_1003A8E6C(v16);
  swift_endAccess();
  uint64_t v17 = (uint64_t *)(v41 + qword_100486E10);
  swift_beginAccess();
  uint64_t v18 = *v17;
  swift_bridgeObjectRetain();
  LOBYTE(v16) = sub_100374C7C(v16, v18);
  swift_bridgeObjectRelease();
  if (v16)
  {
    uint64_t v36 = BYTE5(a4);
    uint64_t v19 = v39;
    uint64_t v20 = v37;
    uint64_t v21 = v40;
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v37, v38, v40);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      uint64_t v43 = v41;
      *(_DWORD *)uint64_t v24 = 136315394;
      uint64_t v25 = NANPeerServiceIdentifier.description.getter((v36 << 40) | ((unint64_t)BYTE6(a4) << 48) | ((unint64_t)BYTE4(a4) << 32) | ((unint64_t)BYTE3(a4) << 24) | ((unint64_t)BYTE2(a4) << 16) | ((unint64_t)BYTE1(a4) << 8) | a4);
      uint64_t v42 = sub_100010680(v25, v26, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 12) = 2080;
      uint64_t v27 = v37;
      uint64_t v28 = DispatchTimeInterval.description.getter();
      uint64_t v42 = sub_100010680(v28, v29, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v27, v40);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Reset the peer %s from the bloom filter because its been %s since we last saw the advertised service descriptor", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v19 + 8))(v20, v21);
    }
    return 0;
  }
  uint64_t *v13 = 5;
  uint64_t v31 = v39;
  uint64_t v30 = v40;
  (*(void (**)(uint64_t *, void, uint64_t))(v39 + 104))(v13, enum case for DispatchTimeInterval.seconds(_:), v40);
  static DispatchTimeInterval.+ infix(_:_:)(v36, (uint64_t)v13, v15);
  uint64_t v32 = *(void (**)(uint64_t *, uint64_t))(v31 + 8);
  v32(v13, v30);
  BOOL v33 = static DispatchTimeInterval.< infix(_:_:)();
  v32(v15, v30);
  return v33;
}

uint64_t sub_10032C7F4(unsigned __int8 *a1, uint64_t a2)
{
  type metadata accessor for NANPeer(0);
  __chkstk_darwin();
  uint64_t v30 = (uint64_t)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_1004862F0);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v27 = a1[2];
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  uint64_t v11 = a1[5];
  uint64_t v12 = a1[6];
  uint64_t v13 = type metadata accessor for NANPeer.Service.AuthenticationStatus(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v6, 1, 1, v13);
  swift_beginAccess();
  uint64_t v28 = v7;
  uint64_t v14 = v7 | (v8 << 8);
  uint64_t v15 = v27;
  sub_100354D90((uint64_t)v6, v14 | (v27 << 16) | (v9 << 24) | (v10 << 32) | (v11 << 40) | (v12 << 48));
  swift_endAccess();
  uint64_t v29 = a2;
  unint64_t v16 = *(void **)(a2 + qword_100486E08);
  uint64_t v17 = (v9 << 16) | (v15 << 8) | (v10 << 24) | (v11 << 32) | (v12 << 40) | v8;
  if (v16)
  {
    swift_unknownObjectRetain();
    id v18 = WiFiAddress.apiAddress.getter(v17);
    unsigned __int8 v19 = v28;
    [v16 subscribeLostDiscoveryResultForPublishID:v28 address:v18];

    swift_unknownObjectRelease();
  }
  else
  {
    unsigned __int8 v19 = v28;
  }
  uint64_t v20 = v29;
  swift_unownedRetainStrong();
  uint64_t v21 = v20 + qword_100488970;
  swift_beginAccess();
  uint64_t v22 = *(void *)(v21 + 8);
  uint64_t v23 = *(void *)(v21 + 16);
  swift_bridgeObjectRetain();
  uint64_t v24 = v30;
  sub_10035665C(v17, v30);
  sub_1002A6E60(v22, v23, v19);
  swift_bridgeObjectRelease();
  sub_1003568F4(v24, v17);
  return swift_release();
}

uint64_t sub_10032CA9C(uint64_t a1, uint64_t a2, unint64_t a3, __int16 a4)
{
  uint64_t v7 = a1 + qword_100488970;
  swift_beginAccess();
  uint64_t v8 = v7 + *(int *)(type metadata accessor for NANSubscribe.Configuration() + 56);
  uint64_t v9 = *(void *)v8;
  unint64_t v10 = *(void *)(v8 + 8);
  *(void *)uint64_t v8 = a2;
  *(void *)(v8 + 8) = a3;
  __int16 v11 = *(_WORD *)(v8 + 16);
  *(_WORD *)(v8 + 16) = a4;
  sub_10014E854(a2, a3, a4);
  return sub_1000CA4D0(v9, v10, v11);
}

uint64_t sub_10032CB4C(uint64_t a1, uint64_t a2)
{
  char v5 = *(unsigned char *)(a1 + 32);
  unint64_t v6 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v7 = 8 * v6;
  if (v5 & 0x3Fu) <= 0xD || (swift_stdlib_isStackAllocationSafe())
  {
    __chkstk_darwin();
    bzero((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    uint64_t v8 = sub_10032CE10((unint64_t *)((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, a1, a2);
    if (v2) {
      swift_willThrow();
    }
    else {
      return v8;
    }
  }
  else
  {
    uint64_t v9 = (void *)swift_slowAlloc();
    bzero(v9, v7);
    a2 = sub_10032CE10((unint64_t *)v9, v6, a1, a2);
    swift_slowDealloc();
  }
  return a2;
}

uint64_t sub_10032CCB8(uint64_t a1)
{
  uint64_t v2 = a1;
  char v3 = *(unsigned char *)(a1 + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if (v3 & 0x3Fu) <= 0xD || (swift_stdlib_isStackAllocationSafe())
  {
    __chkstk_darwin();
    bzero((char *)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    uint64_t v6 = sub_10032D410((unint64_t *)((char *)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v2);
    if (v1) {
      swift_willThrow();
    }
    else {
      return v6;
    }
  }
  else
  {
    size_t v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    uint64_t v2 = sub_10032D410((unint64_t *)v7, v4, v2);
    swift_slowDealloc();
  }
  return v2;
}

uint64_t sub_10032CE10(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v55 = a4;
  v49[0] = a2;
  uint64_t v50 = a1;
  uint64_t v61 = type metadata accessor for NANPeer.Service.AuthenticationStatus.State(0);
  __chkstk_darwin();
  uint64_t v6 = (char *)v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = sub_100010BCC(&qword_1004852C8);
  __chkstk_darwin();
  uint64_t v54 = (char *)v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  int v59 = (char *)v49 - v8;
  __chkstk_darwin();
  uint64_t v57 = (char *)v49 - v9;
  uint64_t v58 = *(void *)(type metadata accessor for NANPeer.Service.AuthenticationStatus(0) - 8);
  uint64_t result = __chkstk_darwin();
  uint64_t v12 = (char *)v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = 0;
  int64_t v14 = 0;
  uint64_t v63 = (void *)a3;
  uint64_t v15 = *(void *)(a3 + 64);
  uint64_t v52 = a3 + 64;
  uint64_t v16 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v15;
  int64_t v53 = (unint64_t)(v16 + 63) >> 6;
  BOOL v60 = v6;
  uint64_t v56 = v12;
  unsigned __int8 v19 = v57;
  while (2)
  {
    uint64_t v51 = v13;
    if (v18)
    {
LABEL_6:
      uint64_t v69 = (v18 - 1) & v18;
      int64_t v70 = v14;
      unint64_t v20 = __clz(__rbit64(v18)) | (v14 << 6);
      uint64_t v21 = v73;
      goto LABEL_21;
    }
    while (1)
    {
      int64_t v22 = v14 + 1;
      if (__OFADD__(v14, 1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      uint64_t v21 = v73;
      if (v22 >= v53) {
        return sub_100368D90(v50, v49[0], v51, v63);
      }
      unint64_t v23 = *(void *)(v52 + 8 * v22);
      int64_t v24 = v14 + 1;
      if (!v23)
      {
        int64_t v24 = v14 + 2;
        if (v14 + 2 >= v53) {
          return sub_100368D90(v50, v49[0], v51, v63);
        }
        unint64_t v23 = *(void *)(v52 + 8 * v24);
        if (!v23)
        {
          int64_t v24 = v14 + 3;
          if (v14 + 3 >= v53) {
            return sub_100368D90(v50, v49[0], v51, v63);
          }
          unint64_t v23 = *(void *)(v52 + 8 * v24);
          if (!v23)
          {
            uint64_t v25 = v14 + 4;
            if (v14 + 4 >= v53) {
              return sub_100368D90(v50, v49[0], v51, v63);
            }
            unint64_t v23 = *(void *)(v52 + 8 * v25);
            if (!v23)
            {
              while (1)
              {
                int64_t v24 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_26;
                }
                if (v24 >= v53) {
                  return sub_100368D90(v50, v49[0], v51, v63);
                }
                unint64_t v23 = *(void *)(v52 + 8 * v24);
                ++v25;
                if (v23) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v24 = v14 + 4;
          }
        }
      }
LABEL_20:
      uint64_t v69 = (v23 - 1) & v23;
      int64_t v70 = v24;
      unint64_t v20 = __clz(__rbit64(v23)) + (v24 << 6);
LABEL_21:
      uint64_t v26 = v63[7];
      uint64_t v27 = (unsigned __int8 *)(v63[6] - v20 + 8 * v20);
      int v28 = *v27;
      unsigned __int8 v29 = v27[1];
      uint64_t v72 = v29;
      uint64_t v30 = v27[2];
      uint64_t v31 = v27[3];
      uint64_t v32 = v27[4];
      uint64_t v33 = v27[5];
      uint64_t v74 = v27[6];
      uint64_t v34 = *(void *)(v58 + 72);
      unint64_t v62 = v20;
      BOOL v75 = type metadata accessor for NANPeer.Service.AuthenticationStatus;
      sub_10032DFF4(v26 + v34 * v20, (uint64_t)v12, type metadata accessor for NANPeer.Service.AuthenticationStatus);
      uint64_t v71 = &v19[*(int *)(v21 + 48)];
      uint64_t v35 = (uint64_t)v71;
      *unsigned __int8 v19 = v28;
      v19[1] = v29;
      v19[2] = v30;
      v19[3] = v31;
      void v19[4] = v32;
      v19[5] = v33;
      char v36 = v74;
      v19[6] = v74;
      sub_10032DFF4((uint64_t)v12, v35, v75);
      long long v37 = v59;
      uint64_t v38 = (uint64_t)&v59[*(int *)(v21 + 48)];
      int v66 = v28;
      *int v59 = v28;
      uint64_t v40 = (uint64_t)v71;
      uint64_t v39 = v72;
      v37[1] = v72;
      uint64_t v64 = v30;
      uint64_t v65 = v31;
      v37[2] = v30;
      _OWORD v37[3] = v31;
      uint64_t v67 = v32;
      uint64_t v68 = v33;
      v37[4] = v32;
      v37[5] = v33;
      v37[6] = v36;
      sub_10032DFF4(v40, v38, v75);
      uint64_t v41 = (uint64_t)v60;
      sub_10032DFF4(v38, (uint64_t)v60, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
      sub_10032DD6C(v38, type metadata accessor for NANPeer.Service.AuthenticationStatus);
      if (swift_getEnumCaseMultiPayload() != 3) {
        break;
      }
      sub_10032DD6C(v41, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
      uint64_t v42 = v74;
      uint64_t v43 = v54;
      uint64_t v44 = (uint64_t)&v54[*(int *)(v73 + 48)];
      *uint64_t v54 = v66;
      v43[1] = v39;
      uint64_t v46 = v64;
      uint64_t v45 = v65;
      v43[2] = v64;
      v43[3] = v45;
      uint64_t v48 = v67;
      uint64_t v47 = v68;
      v43[4] = v67;
      v43[5] = v47;
      v43[6] = v42;
      sub_10032DFF4(v40, v44, type metadata accessor for NANPeer.Service.AuthenticationStatus);
      sub_1003A8E6C(v39 | (v46 << 8) | (v45 << 16) | (v48 << 24) | (v47 << 32) | (v42 << 40));
      sub_1000380B4((uint64_t)v19, &qword_1004852C8);
      sub_10032DD6C(v44, type metadata accessor for NANPeer.Service.AuthenticationStatus);
      uint64_t v12 = v56;
      uint64_t result = sub_10032DD6C((uint64_t)v56, type metadata accessor for NANPeer.Service.AuthenticationStatus);
      unint64_t v18 = v69;
      int64_t v14 = v70;
      if (v69) {
        goto LABEL_6;
      }
    }
    sub_1000380B4((uint64_t)v19, &qword_1004852C8);
    sub_10032DD6C(v41, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
    uint64_t v12 = v56;
    uint64_t result = sub_10032DD6C((uint64_t)v56, type metadata accessor for NANPeer.Service.AuthenticationStatus);
    *(unint64_t *)((char *)v50 + ((v62 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v62;
    uint64_t v13 = v51 + 1;
    unint64_t v18 = v69;
    int64_t v14 = v70;
    if (!__OFADD__(v51, 1)) {
      continue;
    }
    break;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_10032D410(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  v52[0] = a2;
  int64_t v53 = a1;
  uint64_t v65 = type metadata accessor for DispatchTime();
  uint64_t v4 = *(void *)(v65 - 8);
  __chkstk_darwin();
  uint64_t v64 = (char *)v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for DispatchTimeInterval();
  uint64_t v6 = *(void *)(v63 - 8);
  __chkstk_darwin();
  unint64_t v62 = (char *)v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v61 = (char *)v52 - v8;
  uint64_t v69 = type metadata accessor for NANPeer.Service.AuthenticationStatus.State(0);
  __chkstk_darwin();
  uint64_t v72 = (uint64_t)v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = sub_100010BCC(&qword_1004852C8);
  __chkstk_darwin();
  uint64_t v67 = (char *)v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v78 = (char *)v52 - v11;
  uint64_t v60 = type metadata accessor for NANPeer.Service.AuthenticationStatus(0);
  uint64_t v66 = *(void *)(v60 - 8);
  __chkstk_darwin();
  uint64_t v77 = (uint64_t)v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = 0;
  int64_t v13 = 0;
  int64_t v70 = (void *)a3;
  uint64_t v14 = *(void *)(a3 + 64);
  uint64_t v55 = a3 + 64;
  uint64_t v15 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & v14;
  int64_t v56 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v58 = (void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  int v59 = (void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v57 = (void (**)(char *, uint64_t))(v6 + 8);
  while (2)
  {
    if (v17)
    {
      uint64_t v75 = (v17 - 1) & v17;
      int64_t v76 = v13;
      unint64_t v25 = __clz(__rbit64(v17)) | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v26 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v26 >= v56) {
      return sub_100368D90(v53, v52[0], v54, v70);
    }
    unint64_t v27 = *(void *)(v55 + 8 * v26);
    int64_t v28 = v13 + 1;
    if (v27) {
      goto LABEL_21;
    }
    int64_t v28 = v13 + 2;
    if (v13 + 2 >= v56) {
      return sub_100368D90(v53, v52[0], v54, v70);
    }
    unint64_t v27 = *(void *)(v55 + 8 * v28);
    if (v27) {
      goto LABEL_21;
    }
    int64_t v28 = v13 + 3;
    if (v13 + 3 >= v56) {
      return sub_100368D90(v53, v52[0], v54, v70);
    }
    unint64_t v27 = *(void *)(v55 + 8 * v28);
    if (v27) {
      goto LABEL_21;
    }
    uint64_t v29 = v13 + 4;
    if (v13 + 4 >= v56) {
      return sub_100368D90(v53, v52[0], v54, v70);
    }
    unint64_t v27 = *(void *)(v55 + 8 * v29);
    if (!v27)
    {
      while (1)
      {
        int64_t v28 = v29 + 1;
        if (__OFADD__(v29, 1)) {
          break;
        }
        if (v28 >= v56) {
          return sub_100368D90(v53, v52[0], v54, v70);
        }
        unint64_t v27 = *(void *)(v55 + 8 * v28);
        ++v29;
        if (v27) {
          goto LABEL_21;
        }
      }
LABEL_31:
      __break(1u);
      JUMPOUT(0x10032DB54);
    }
    int64_t v28 = v13 + 4;
LABEL_21:
    uint64_t v75 = (v27 - 1) & v27;
    int64_t v76 = v28;
    unint64_t v25 = __clz(__rbit64(v27)) + (v28 << 6);
LABEL_22:
    uint64_t v30 = v70[7];
    uint64_t v31 = (char *)(v70[6] - v25 + 8 * v25);
    char v32 = *v31;
    char v33 = v31[1];
    char v34 = v31[2];
    char v35 = v31[3];
    char v36 = v31[4];
    unsigned __int8 v37 = v31[5];
    int v74 = v37;
    char v38 = v31[6];
    uint64_t v39 = *(void *)(v66 + 72);
    unint64_t v71 = v25;
    uint64_t v73 = type metadata accessor for NANPeer.Service.AuthenticationStatus;
    uint64_t v40 = v77;
    sub_10032DFF4(v30 + v39 * v25, v77, type metadata accessor for NANPeer.Service.AuthenticationStatus);
    uint64_t v41 = v68;
    uint64_t v42 = *(int *)(v68 + 48);
    uint64_t v43 = v78;
    uint64_t v44 = (uint64_t)&v78[v42];
    unsigned char *v78 = v32;
    v43[1] = v33;
    v43[2] = v34;
    v43[3] = v35;
    v43[4] = v36;
    v43[5] = v37;
    v43[6] = v38;
    uint64_t v45 = v40;
    uint64_t v46 = (uint64_t)&v43[v42];
    uint64_t v47 = v73;
    sub_10032DFF4(v45, v44, v73);
    uint64_t v48 = v67;
    uint64_t v49 = (uint64_t)&v67[*(int *)(v41 + 48)];
    unsigned char *v67 = v32;
    v48[1] = v33;
    uint64_t v48[2] = v34;
    _OWORD v48[3] = v35;
    v48[4] = v36;
    v48[5] = v74;
    v48[6] = v38;
    sub_10032DFF4(v46, v49, v47);
    sub_10032DFF4(v49, v72, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        swift_bridgeObjectRelease();
        goto LABEL_5;
      case 2u:
        sub_10000C970(*(void *)v72, *(void *)(v72 + 8));
        goto LABEL_25;
      case 3u:
LABEL_25:
        sub_1000380B4((uint64_t)v78, &qword_1004852C8);
        sub_10032DD6C(v49, type metadata accessor for NANPeer.Service.AuthenticationStatus);
        sub_10032DD6C(v77, type metadata accessor for NANPeer.Service.AuthenticationStatus);
        unint64_t v17 = v75;
        int64_t v13 = v76;
        goto LABEL_26;
      case 4u:
        goto LABEL_5;
      default:
        sub_10032DD6C(v72, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
LABEL_5:
        type metadata accessor for P2PTimer();
        unint64_t v18 = v64;
        variable initialization expression of AWDLPeer.lastUpdated();
        unsigned __int8 v19 = v61;
        DispatchTime.distance(to:)();
        (*v59)(v18, v65);
        uint64_t v20 = NANConstants.authenticationRequestTimeout.unsafeMutableAddressor();
        int64_t v22 = v62;
        uint64_t v21 = v63;
        (*v58)(v62, v20, v63);
        BOOL v23 = static DispatchTimeInterval.< infix(_:_:)();
        int64_t v24 = *v57;
        (*v57)(v22, v21);
        v24(v19, v21);
        sub_1000380B4((uint64_t)v78, &qword_1004852C8);
        sub_10032DD6C(v49, type metadata accessor for NANPeer.Service.AuthenticationStatus);
        sub_10032DD6C(v77, type metadata accessor for NANPeer.Service.AuthenticationStatus);
        unint64_t v17 = v75;
        int64_t v13 = v76;
        if (v23) {
          continue;
        }
LABEL_26:
        *(unint64_t *)((char *)v53 + ((v71 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v71;
        if (!__OFADD__(v54++, 1)) {
          continue;
        }
        __break(1u);
        break;
    }
    return sub_100368D90(v53, v52[0], v54, v70);
  }
}

uint64_t sub_10032DB68(uint64_t result)
{
  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    int64_t v12 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    if (v12 >= v7) {
      goto LABEL_24;
    }
    unint64_t v13 = *(void *)(v3 + 8 * v12);
    ++v8;
    if (!v13)
    {
      int64_t v8 = v12 + 1;
      if (v12 + 1 >= v7) {
        goto LABEL_24;
      }
      unint64_t v13 = *(void *)(v3 + 8 * v8);
      if (!v13)
      {
        int64_t v8 = v12 + 2;
        if (v12 + 2 >= v7) {
          goto LABEL_24;
        }
        unint64_t v13 = *(void *)(v3 + 8 * v8);
        if (!v13)
        {
          int64_t v8 = v12 + 3;
          if (v12 + 3 >= v7) {
            goto LABEL_24;
          }
          unint64_t v13 = *(void *)(v3 + 8 * v8);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v13 - 1) & v13;
    unint64_t v10 = __clz(__rbit64(v13)) + (v8 << 6);
LABEL_6:
    uint64_t v11 = (unsigned __int16 *)(*(void *)(v2 + 48) - v10 + 8 * v10);
    uint64_t result = sub_1003A9024(*v11 | ((unint64_t)*((unsigned __int8 *)v11 + 2) << 16) | ((unint64_t)*(unsigned int *)((char *)v11 + 3) << 24), (uint64_t)v15);
  }
  int64_t v14 = v12 + 4;
  if (v14 < v7)
  {
    unint64_t v13 = *(void *)(v3 + 8 * v14);
    if (!v13)
    {
      while (1)
      {
        int64_t v8 = v14 + 1;
        if (__OFADD__(v14, 1)) {
          goto LABEL_29;
        }
        if (v8 >= v7) {
          goto LABEL_24;
        }
        unint64_t v13 = *(void *)(v3 + 8 * v8);
        ++v14;
        if (v13) {
          goto LABEL_23;
        }
      }
    }
    int64_t v8 = v14;
    goto LABEL_23;
  }
LABEL_24:

  return swift_release();
}

uint64_t sub_10032DD04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010BCC(&qword_1004852C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10032DD6C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10032DDCC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_10032DE34()
{
  unint64_t result = qword_100486F58;
  if (!qword_100486F58)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100486F58);
  }
  return result;
}

uint64_t sub_10032DE74(uint64_t a1)
{
  return a1;
}

uint64_t sub_10032DEA8()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10032DEE0()
{
  sub_10032B2B0(v0[4], v0[2], v0[3], (void (*)(void))sub_10032B320);
}

uint64_t sub_10032DF14()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 34, 7);
}

uint64_t sub_10032DF4C(unsigned __int8 *a1)
{
  return sub_10032C7F4(a1, *(void *)(v1 + 16));
}

uint64_t sub_10032DF68()
{
  return sub_10032CA9C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(_WORD *)(v0 + 40));
}

uint64_t sub_10032DF8C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

uint64_t sub_10032DFF4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_10032E05C()
{
  sub_10032B2B0(v0[4], v0[2], v0[3], (void (*)(void))sub_10032239C);
}

uint64_t sub_10032E090()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t P2PMain.device.getter@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 80) - 8) + 16))(a1, v1 + *(void *)(*(void *)v1 + 96));
}

uint64_t P2PMain.onTerminate.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 144));
  swift_beginAccess();
  uint64_t v2 = *v1;
  sub_100037FF4(*v1);
  return v2;
}

uint64_t P2PMain.onTerminate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(v2 + *(void *)(*(void *)v2 + 144));
  swift_beginAccess();
  uint64_t v6 = *v5;
  *uint64_t v5 = a1;
  v5[1] = a2;
  return sub_100011E30(v6);
}

uint64_t (*P2PMain.onTerminate.modify())()
{
  return j__swift_endAccess;
}

uint64_t P2PMain.__allocating_init(device:)(uint64_t a1)
{
  return P2PMain.init(device:)(a1);
}

uint64_t P2PMain.init(device:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v59 = *(void *)v1;
  uint64_t v3 = v59;
  uint64_t v60 = a1;
  uint64_t v58 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v55 = *(void (**)(char *, uint64_t))(v58 - 8);
  __chkstk_darwin();
  uint64_t v54 = (char *)v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for DispatchQoS();
  uint64_t v53 = *(void *)(v57 - 8);
  __chkstk_darwin();
  uint64_t v52 = (char *)v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v3 + 80);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  unint64_t v10 = (char *)v46 - v9;
  uint64_t v61 = *(void *)(v6 - 8);
  __chkstk_darwin();
  int64_t v56 = (char *)v46 - v11;
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin();
  uint64_t v15 = (id *)((char *)v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(void *)&v2[*(void *)(v3 + 104)] = _swiftEmptyArrayStorage;
  uint64_t v16 = &v2[*(void *)(*(void *)v2 + 144)];
  *(void *)uint64_t v16 = 0;
  *((void *)v16 + 1) = 0;
  unint64_t v17 = (id *)OS_dispatch_queue.p2p.unsafeMutableAddressor();
  id v18 = *v17;
  *uint64_t v15 = *v17;
  (*(void (**)(id *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  id v19 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(id *, uint64_t))(v13 + 8))(v15, v12);
  if (v18)
  {
    uint64_t v21 = v60;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v60, v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v10, 1, v6) == 1)
    {
      int64_t v22 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
      v22(v21, v7);
      v22((uint64_t)v10, v7);
    }
    else
    {
      uint64_t v50 = v8;
      uint64_t v51 = v7;
      BOOL v23 = v56;
      (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v56, v10, v6);
      uint64_t v24 = *(void *)(v59 + 88);
      uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 48))(v6, v24);
      uint64_t v27 = v26;
      id v28 = objc_allocWithZone((Class)type metadata accessor for XPCServer());
      uint64_t v29 = sub_10036D7A8(v25, v27);
      if (v29)
      {
        uint64_t v30 = v29;
        (*(void (**)(char *, char *, uint64_t))(v61 + 16))(&v2[*(void *)(*(void *)v2 + 96)], v23, v6);
        *(void *)&v2[*(void *)(*(void *)v2 + 136)] = v30;
        sub_100151414();
        id v31 = *v17;
        uint64_t v49 = v30;
        id v32 = v31;
        uint64_t v33 = static OS_dispatch_source.makeSignalSource(signal:queue:)();

        *(void *)&v2[*(void *)(*(void *)v2 + 112)] = v33;
        id v34 = *v17;
        uint64_t v35 = static OS_dispatch_source.makeSignalSource(signal:queue:)();

        *(void *)&v2[*(void *)(*(void *)v2 + 120)] = v35;
        id v36 = *v17;
        uint64_t v37 = static OS_dispatch_source.makeSignalSource(signal:queue:)();

        *(void *)&v2[*(void *)(*(void *)v2 + 128)] = v37;
        uint64_t v38 = swift_allocObject();
        swift_weakInit();
        uint64_t v39 = (void *)swift_allocObject();
        v39[2] = v6;
        void v39[3] = v24;
        v39[4] = v38;
        swift_getObjectType();
        uint64_t v47 = sub_10032FF94;
        uint64_t v66 = sub_10032FF94;
        uint64_t v67 = v39;
        long long aBlock = _NSConcreteStackBlock;
        uint64_t v63 = 1107296256;
        v46[1] = &v64;
        uint64_t v64 = sub_10000E5D0;
        uint64_t v65 = &unk_10046E6E0;
        uint64_t v40 = _Block_copy(&aBlock);
        swift_retain();
        uint64_t v41 = v52;
        static DispatchQoS.unspecified.getter();
        uint64_t v48 = v6;
        uint64_t v42 = v54;
        sub_1001503DC();
        OS_dispatch_source.setEventHandler(qos:flags:handler:)();
        _Block_release(v40);
        uint64_t v43 = (void (*)(char *, uint64_t))*((void *)v55 + 1);
        v43(v42, v58);
        uint64_t v55 = v43;
        uint64_t v59 = *(void *)(v53 + 8);
        ((void (*)(char *, uint64_t))v59)(v41, v57);
        swift_release();
        swift_getObjectType();
        uint64_t v66 = v47;
        uint64_t v67 = v39;
        long long aBlock = _NSConcreteStackBlock;
        uint64_t v63 = 1107296256;
        uint64_t v64 = sub_10000E5D0;
        uint64_t v65 = &unk_10046E708;
        uint64_t v44 = _Block_copy(&aBlock);
        swift_retain();
        static DispatchQoS.unspecified.getter();
        sub_1001503DC();
        OS_dispatch_source.setEventHandler(qos:flags:handler:)();
        _Block_release(v44);
        v43(v42, v58);
        ((void (*)(char *, uint64_t))v59)(v41, v57);
        swift_release();
        swift_getObjectType();
        uint64_t v66 = (uint64_t (*)())NANBitmap.Channel.operatingClass.getter;
        uint64_t v67 = 0;
        long long aBlock = _NSConcreteStackBlock;
        uint64_t v63 = 1107296256;
        uint64_t v64 = sub_10000E5D0;
        uint64_t v65 = &unk_10046E730;
        uint64_t v45 = _Block_copy(&aBlock);
        static DispatchQoS.unspecified.getter();
        sub_1001503DC();
        OS_dispatch_source.setEventHandler(qos:flags:handler:)();
        _Block_release(v45);

        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v60, v51);
        v55(v42, v58);
        ((void (*)(char *, uint64_t))v59)(v41, v57);
        (*(void (**)(char *, uint64_t))(v61 + 8))(v56, v48);
        return (uint64_t)v2;
      }
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v60, v51);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v23, v6);
    }
    swift_bridgeObjectRelease();
    sub_100011E30(*(void *)&v2[*(void *)(*(void *)v2 + 144)]);
    type metadata accessor for P2PMain();
    swift_deallocPartialClassInstance();
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for P2PMain()
{
  return sub_100038354();
}

uint64_t sub_10032EC88()
{
  uint64_t v0 = type metadata accessor for DispatchPredicate();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (uint64_t *)&v22[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = &v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Logger.init(subsystem:category:)();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    unint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Received a terminate signal, will disable all interfaces", v10, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v11 = OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v12 = (void *)*v11;
  uint64_t *v3 = *v11;
  (*(void (**)(uint64_t *, void, uint64_t))(v1 + 104))(v3, enum case for DispatchPredicate.onQueue(_:), v0);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v1 + 8))(v3, v0);
  if (v12)
  {
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      uint64_t v15 = result;
      uint64_t v16 = (uint64_t *)(result + *(void *)(*(void *)result + 104));
      swift_beginAccess();
      uint64_t v17 = *v16;
      uint64_t v18 = *(void *)(v17 + 16);
      uint64_t v19 = swift_allocObject();
      *(void *)(v19 + 16) = 0;
      if (v18)
      {
        uint64_t v20 = (void *)(v17 + 32);
        swift_bridgeObjectRetain();
        uint64_t v21 = v18;
        do
        {
          sub_10032EFB0(v20, v19, v18, v15);
          v20 += 5;
          --v21;
        }
        while (v21);
        swift_release();
        swift_release();
        return swift_bridgeObjectRelease();
      }
      else
      {
        swift_release();
        return swift_release();
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10032EFB0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_1000369C4(a1, v7);
  os_log_type_t v9 = (void *)swift_allocObject();
  _OWORD v9[2] = a2;
  _OWORD v9[3] = a3;
  void v9[4] = a4;
  unint64_t v10 = *(void (**)(uint64_t (*)(), void *, uint64_t, uint64_t))(v8 + 8);
  swift_retain();
  swift_retain();
  v10(sub_100331B40, v9, v7, v8);
  return swift_release();
}

uint64_t sub_10032F078(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  os_log_type_t v9 = (uint64_t *)((char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v10 = OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v11 = (void *)*v10;
  *os_log_type_t v9 = *v10;
  (*(void (**)(uint64_t *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v7 + 8))(v9, v6);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v14 = (uint64_t *)(a1 + 16);
  uint64_t result = swift_beginAccess();
  uint64_t v15 = *v14 + 1;
  if (__OFADD__(*v14, 1))
  {
LABEL_8:
    __break(1u);
    return result;
  }
  uint64_t *v14 = v15;
  if (v15 == a2)
  {
    uint64_t v16 = (void *)(a3 + *(void *)(*(void *)a3 + 104));
    swift_beginAccess();
    *uint64_t v16 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    uint64_t v17 = a3 + *(void *)(*(void *)a3 + 144);
    swift_beginAccess();
    uint64_t v18 = *(void (**)(uint64_t))v17;
    *(void *)uint64_t v17 = 0;
    *(void *)(v17 + 8) = 0;
    sub_100037FF4((uint64_t)v18);
    uint64_t result = sub_100011E30((uint64_t)v18);
    if (v18)
    {
      uint64_t v19 = swift_retain();
      v18(v19);
      sub_100011E30((uint64_t)v18);
      return sub_100011E30((uint64_t)v18);
    }
  }
  return result;
}

char *P2PMain.deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)v0;
  uint64_t v34 = v2;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v38 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for DispatchQoS();
  uint64_t v39 = *(void *)(v33 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = *(void *)(v2 + 112);
  swift_getObjectType();
  OS_dispatch_source.cancel()();
  uint64_t v36 = *(void *)(*(void *)v1 + 120);
  swift_getObjectType();
  OS_dispatch_source.cancel()();
  uint64_t v35 = *(void *)(*(void *)v1 + 128);
  swift_getObjectType();
  OS_dispatch_source.cancel()();
  uint64_t v8 = swift_allocObject();
  *(unsigned char *)(v8 + 16) = 0;
  uint64_t v9 = swift_allocObject();
  *(unsigned char *)(v9 + 16) = 0;
  unint64_t v10 = (void *)*OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v8;
  *(void *)(v11 + 24) = v9;
  uint64_t v26 = v8;
  uint64_t v45 = sub_10032FFB4;
  uint64_t v46 = v11;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v42 = 1107296256;
  id v32 = &v43;
  uint64_t v43 = sub_10000E5D0;
  uint64_t v44 = &unk_10046E7A8;
  id v12 = _Block_copy(&aBlock);
  id v13 = v10;
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v40 = _swiftEmptyArrayStorage;
  unint64_t v30 = sub_100014390();
  uint64_t v29 = sub_100010BCC((uint64_t *)&unk_10047D0F0);
  unint64_t v31 = sub_1000143E0();
  uint64_t v25 = v3;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v12);

  uint64_t v14 = *(void (**)(char *, uint64_t))(v38 + 8);
  v38 += 8;
  id v28 = v14;
  v14(v5, v3);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v39 + 8);
  v39 += 8;
  uint64_t v27 = v15;
  uint64_t v16 = v33;
  v15(v7, v33);
  swift_release();
  uint64_t v17 = (void *)*OS_dispatch_queue.awdl.unsafeMutableAddressor();
  uint64_t v18 = swift_allocObject();
  uint64_t v19 = v26;
  *(void *)(v18 + 16) = v9;
  *(void *)(v18 + 24) = v19;
  uint64_t v45 = sub_10032FFF8;
  uint64_t v46 = v18;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v42 = 1107296256;
  uint64_t v43 = sub_10000E5D0;
  uint64_t v44 = &unk_10046E7F8;
  uint64_t v20 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  id v21 = v17;
  static DispatchQoS.unspecified.getter();
  uint64_t v40 = _swiftEmptyArrayStorage;
  uint64_t v22 = v25;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);

  v28(v5, v22);
  v27(v7, v16);
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *))(*(void *)(*(void *)(v34 + 80) - 8) + 8))(&v1[*(void *)(*(void *)v1 + 96)]);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  sub_100011E30(*(void *)&v1[*(void *)(*(void *)v1 + 144)]);
  return v1;
}

uint64_t sub_10032F82C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = a5;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v22 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a1;
  *(void *)(v16 + 24) = a2;
  aBlock[4] = a4;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E5D0;
  uint64_t aBlock[3] = v21;
  uint64_t v17 = _Block_copy(aBlock);
  id v18 = v15;
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  BOOL v23 = _swiftEmptyArrayStorage;
  sub_100014390();
  sub_100010BCC((uint64_t *)&unk_10047D0F0);
  sub_1000143E0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v22);
  return swift_release();
}

uint64_t sub_10032FAA4(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(unsigned char *)(a1 + 16) = 1;
  uint64_t result = swift_beginAccess();
  if (*(unsigned char *)(a2 + 16) == 1) {
    exit(0);
  }
  return result;
}

uint64_t P2PMain.__deallocating_deinit()
{
  P2PMain.deinit();

  return swift_deallocClassInstance();
}

Swift::Void __swiftcall P2PMain.start()()
{
}

uint64_t P2PMain.attached<A>(infraDriver:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, void *a6)
{
  uint64_t v7 = v6;
  uint64_t v28 = *v7;
  uint64_t v29 = a1;
  uint64_t v13 = type metadata accessor for DispatchPredicate();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin();
  uint64_t v16 = (uint64_t *)((char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = OS_dispatch_queue.p2p.unsafeMutableAddressor();
  id v18 = (void *)*v17;
  *uint64_t v16 = *v17;
  (*(void (**)(uint64_t *, void, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  id v19 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)();
  uint64_t v21 = *(void (**)(uint64_t *, uint64_t))(v14 + 8);
  uint64_t v20 = (void *)(v14 + 8);
  v21(v16, v13);
  if ((v18 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    a6 = sub_100330D04(0, a6[2] + 1, 1, a6);
    *a4 = (uint64_t)a6;
    goto LABEL_5;
  }
  v30[4] = a2;
  v30[5] = a3;
  v30[6] = a4;
  v30[7] = a5;
  v30[8] = a6;
  a5 = type metadata accessor for P2PController();
  uint64_t v20 = sub_100320154(v29);
  a4 = (uint64_t *)((char *)v7 + *(void *)(*v7 + 104));
  swift_beginAccess();
  if (!*(void *)(*a4 + 16))
  {
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = *(_OWORD *)(v28 + 80);
    *(void *)(v22 + 32) = v20;
    swift_retain();
    sub_10036DD54((uint64_t)sub_100331958, v22);
    swift_release();
  }
  swift_beginAccess();
  a6 = (void *)*a4;
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a4 = (uint64_t)a6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_9;
  }
LABEL_5:
  unint64_t v25 = a6[2];
  unint64_t v24 = a6[3];
  if (v25 >= v24 >> 1) {
    *a4 = (uint64_t)sub_100330D04((void *)(v24 > 1), v25 + 1, 1, a6);
  }
  v30[0] = v20;
  sub_100330E28(v25, (uint64_t)v30, a4, a5, (uint64_t)&off_10046E170);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_10032FF00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, void *a6)
{
  return P2PMain.attached<A>(infraDriver:)(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_10032FF24()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10032FF5C()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10032FF94()
{
  return sub_10032EC88();
}

uint64_t sub_10032FFA0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10032FFB4()
{
  return sub_10032F82C(*(void *)(v0 + 16), *(void *)(v0 + 24), (uint64_t)&unk_10046E998, (uint64_t)sub_100331B4C, (uint64_t)&unk_10046E9B0);
}

uint64_t sub_10032FFF8()
{
  return sub_10032F82C(*(void *)(v0 + 16), *(void *)(v0 + 24), (uint64_t)&unk_10046E948, (uint64_t)sub_100331A90, (uint64_t)&unk_10046E960);
}

void *sub_100330038(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100010BCC(&qword_100485608);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      void v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4]) {
          memmove(v12, a4 + 4, 56 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100330EC0(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_100330164(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100010BCC((uint64_t *)&unk_100484A80);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[32 * v8 + 32]) {
          memmove(v13, a4 + 32, 32 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_100330FB8(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100330274(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10033041C(a1, a2, a3, a4, &qword_100485670, (void (*)(void, int64_t, void *, void *))sub_1003310C4);
}

void *sub_100330294(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1003302D0(a1, a2, a3, a4, (uint64_t *)&unk_1004870E0);
}

void *sub_1003302A8(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1003302D0(a1, a2, a3, a4, &qword_1004870C8);
}

void *sub_1003302BC(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1003302D0(a1, a2, a3, a4, (uint64_t *)&unk_100485630);
}

void *sub_1003302D0(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      sub_100010BCC(a5);
      int64_t v11 = (void *)swift_allocObject();
      size_t v12 = j__malloc_size(v11);
      v11[2] = v9;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 56);
      uint64_t v13 = v11 + 4;
      if (v6)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[7 * v9 + 4]) {
          memmove(v13, a4 + 4, 56 * v9);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      int64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1003311CC(0, v9, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

void *sub_100330408(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1003302D0(a1, a2, a3, a4, &qword_1004870B8);
}

void *sub_10033041C(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, void (*a6)(void, int64_t, void *, void *))
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  int64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v10 = a2;
    }
LABEL_8:
    int64_t v11 = a4[2];
    if (v10 <= v11) {
      int64_t v12 = a4[2];
    }
    else {
      int64_t v12 = v10;
    }
    if (v12)
    {
      sub_100010BCC(a5);
      uint64_t v13 = (void *)swift_allocObject();
      int64_t v14 = j__malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 25;
      }
      v13[2] = v11;
      void v13[3] = 2 * (v15 >> 3);
      uint64_t v16 = v13 + 4;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v13 = _swiftEmptyArrayStorage;
      uint64_t v16 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[v11 + 4]) {
          memmove(v16, a4 + 4, 8 * v11);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    a6(0, v11, v16, a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

void *sub_100330538(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100010BCC(&qword_1004870F0);
      int64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1003312C0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100330648(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100010BCC((uint64_t *)&unk_100486240);
      int64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1003313CC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100330758(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100330764(a1, a2, a3, a4, &qword_100485618);
}

void *sub_100330764(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      sub_100010BCC(a5);
      int64_t v11 = (void *)swift_allocObject();
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 3);
      int64_t v14 = v11 + 4;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v11 = _swiftEmptyArrayStorage;
      int64_t v14 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v9 + 4]) {
          memmove(v14, a4 + 4, 8 * v9);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000C7ECC(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

void *sub_100330870(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100010BCC(&qword_100487088);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      void v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      int64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      int64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1003314C0(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100330994(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100010BCC((uint64_t *)&unk_100487070);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      void v10[3] = 2 * ((uint64_t)(v11 - 32) / 7);
      int64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= (void *)((char *)&a4[v8 + 4] - v8)) {
          memmove(v12, a4 + 4, 7 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      int64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1003315B0(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100330AC0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100010BCC(&qword_100487090);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      void v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      int64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      int64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1003316A0(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100330BE4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100010BCC(&qword_100487098);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      void v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      int64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      int64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100331798(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100330D04(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100010BCC(&qword_100487108);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      void v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      int64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      int64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10033197C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100330E28(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  uint64_t v9 = sub_1000382F0((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(v9, a2, a4);
  uint64_t v10 = *a3;
  *(void *)(v10 + 16) = a1 + 1;
  return sub_10006EF50(&v12, v10 + 40 * a1 + 32);
}

uint64_t sub_100330EC0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 56 * a1 + 32;
    unint64_t v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100330FB8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      sub_100010BCC((uint64_t *)&unk_100485BA0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1003310C4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      type metadata accessor for AWDLTrafficRegistrationService(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1003311CC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 56 * a1 + 32;
    unint64_t v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1003312C0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      sub_100010BCC((uint64_t *)&unk_1004870F8);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1003313CC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1003314C0(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 40 * a1 + 32);
    size_t v6 = 40 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1003315B0(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 - a1 + 8 * a1 + 32);
    size_t v6 = 7 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1003316A0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100331798(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100331890()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

id sub_100331958(char *a1)
{
  return sub_10031F360(a1);
}

uint64_t sub_10033197C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      sub_100010BCC((uint64_t *)&unk_100487110);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100331A90()
{
  return sub_10032FAA4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100331AB0()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100331AF0()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100331B00()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100331B40()
{
  return sub_10032F078(v0[2], v0[3], v0[4]);
}

uint64_t sub_100331B7C()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    type metadata accessor for NANOutOfBoundActionFrameTransmitter.InFlightActionFrame();
    uint64_t result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_initClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_100331C6C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v7 = v6;
  LODWORD(v69) = a6;
  uint64_t v71 = a3;
  uint64_t v72 = a4;
  uint64_t v67 = a2;
  LODWORD(v66) = a1;
  uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)v7 + 88);
  int64_t v70 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)v7 + 80);
  uint64_t v68 = v9;
  uint64_t v10 = type metadata accessor for NANOutOfBoundActionFrameTransmitter.InFlightActionFrame();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v61 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v64 = (char *)&v57 - v14;
  __chkstk_darwin();
  uint64_t v65 = (char *)&v57 - v15;
  __chkstk_darwin();
  uint64_t v17 = (char *)&v57 - v16;
  uint64_t v73 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v63 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v20 = (char *)&v57 - v19;
  swift_unownedRetainStrong();
  unint64_t v21 = a5 & 0xFFFFFFFFFFFFLL;
  LOBYTE(a5) = sub_1003584A4(a5 & 0xFFFFFFFFFFFFLL);
  swift_release();
  if (a5)
  {
    uint64_t v62 = v10;
    uint64_t v22 = v11;
    uint64_t v23 = v7;
    uint64_t v24 = v67;
    uint64_t v26 = v71;
    uint64_t v25 = v72;
    sub_10006EAC4(v67);
    char v27 = v69 & 1;
    unint64_t v69 = (unint64_t)v20;
    unint64_t v60 = v21;
    sub_1003324A8(v66, v24, v26, v25, v21, v27, (uint64_t)v20);
    uint64_t v28 = v23 + *(void *)(*(void *)v23 + 112);
    swift_beginAccess();
    uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    uint64_t v71 = v12 + 16;
    uint64_t v72 = v28;
    int64_t v70 = v29;
    v29(v17, v28, v22);
    unint64_t v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v73 + 48);
    uint64_t v31 = v62;
    uint64_t v67 = v73 + 48;
    uint64_t v68 = v30;
    LODWORD(v28) = v30(v17, 1, v62);
    id v32 = *(void (**)(char *, uint64_t))(v12 + 8);
    uint64_t v66 = v12 + 8;
    v32(v17, v22);
    uint64_t v33 = v31;
    if (v28 == 1)
    {
LABEL_3:
      unint64_t v34 = v69;
      sub_100332FFC(v69);
      return (*(uint64_t (**)(unint64_t, uint64_t))(v73 + 8))(v34, v33);
    }
    uint64_t v42 = v65;
    v70(v65, v72, v22);
    uint64_t result = v68(v42, 1, v33);
    if (result == 1)
    {
      __break(1u);
    }
    else
    {
      BOOL v43 = sub_10033267C();
      uint64_t v44 = *(uint64_t (**)(unint64_t, uint64_t))(v73 + 8);
      uint64_t v65 = (char *)(v73 + 8);
      uint64_t v59 = v44;
      v44((unint64_t)v42, v33);
      if (v43)
      {
        uint64_t v45 = (uint64_t *)(v23 + qword_100487120);
        swift_beginAccess();
        v74[0] = *v45;
        type metadata accessor for Array();
        swift_getWitnessTable();
        if (Collection.isEmpty.getter()) {
          goto LABEL_3;
        }
      }
      uint64_t v58 = (void (*)(uint64_t, uint64_t))v32;
      uint64_t v46 = v22;
      uint64_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v47, v48))
      {
        uint64_t v49 = (uint8_t *)swift_slowAlloc();
        v74[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v49 = 136315138;
        uint64_t v50 = WiFiAddress.description.getter(v60);
        v75[5] = sub_100010680(v50, v51, v74);
        uint64_t v33 = v62;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "Deferring transmission of out of band action frame to peer: %s", v49, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      unint64_t v52 = v69;
      uint64_t v53 = v64;
      (*(void (**)(char *, unint64_t, uint64_t))(v73 + 16))(v63, v69, v33);
      swift_beginAccess();
      type metadata accessor for Array();
      Array.append(_:)();
      swift_endAccess();
      v70(v53, v72, v46);
      uint64_t result = v68(v53, 1, v33);
      if (result != 1)
      {
        BOOL v54 = sub_10033267C();
        uint64_t v55 = v59;
        v59((unint64_t)v53, v33);
        if (v54)
        {
          uint64_t v56 = (uint64_t)v61;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v73 + 56))(v61, 1, 1, v33);
          sub_100335D80(v56);
          v58(v56, v46);
        }
        return v55(v52, v33);
      }
    }
    __break(1u);
    return result;
  }
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = (uint8_t *)swift_slowAlloc();
    v75[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v38 = 136315138;
    uint64_t v39 = WiFiAddress.description.getter(v21);
    v74[0] = sub_100010680(v39, v40, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Failed to transmit out of band action frame to %s, since the peer was not found", v38, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_10000F000();
  swift_allocError();
  *(_OWORD *)uint64_t v41 = xmmword_1003D4F50;
  *(unsigned char *)(v41 + 16) = 1;
  return swift_willThrow();
}

uint64_t sub_1003324A8@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  char v7 = a5;
  unint64_t v13 = a5 >> 8;
  unint64_t v14 = a5 >> 16;
  *(void *)(a7 + 40) = 0;
  unint64_t v15 = HIDWORD(a5);
  unint64_t v17 = a5 >> 40;
  unint64_t v18 = a5 >> 24;
  type metadata accessor for NANOutOfBoundActionFrameTransmitter.InFlightActionFrame();
  type metadata accessor for P2PTimer();
  uint64_t result = variable initialization expression of AWDLPeer.lastUpdated();
  *(unsigned char *)a7 = a1;
  *(void *)(a7 + 8) = a2;
  *(void *)(a7 + 16) = a3;
  *(void *)(a7 + 24) = a4;
  *(unsigned char *)(a7 + 32) = v7;
  *(unsigned char *)(a7 + 33) = v13;
  *(unsigned char *)(a7 + 34) = v14;
  *(unsigned char *)(a7 + 35) = v18;
  *(unsigned char *)(a7 + 36) = v15;
  *(unsigned char *)(a7 + 37) = v17;
  *(unsigned char *)(a7 + 38) = a6;
  return result;
}

uint64_t sub_100332584(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchTime();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for P2PTimer();
  variable initialization expression of AWDLPeer.lastUpdated();
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 40))(v1 + *(int *)(a1 + 48), v6, v3);
  uint64_t v8 = *(void *)(v1 + 40);
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    *(void *)(v1 + 40) = v10;
  }
  return result;
}

BOOL sub_10033267C()
{
  uint64_t v0 = type metadata accessor for DispatchTime();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  char v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  BOOL v9 = (char *)&v13 - v8;
  type metadata accessor for P2PTimer();
  variable initialization expression of AWDLPeer.lastUpdated();
  DispatchTime.distance(to:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  *(void *)char v7 = 4;
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchTimeInterval.seconds(_:), v4);
  BOOL v10 = static DispatchTimeInterval.< infix(_:_:)();
  uint64_t v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v7, v4);
  v11(v9, v4);
  return v10;
}

uint64_t sub_100332884()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for NANOutOfBoundActionFrameTransmitter.InFlightActionFrame();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v46 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v28 = (char *)v25 - v5;
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  unint64_t v34 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  os_log_type_t v37 = (char *)v25 - v9;
  __chkstk_darwin();
  uint64_t v11 = (char *)v25 - v10;
  uint64_t v12 = *(void *)(v1 + 112);
  uint64_t v42 = v0;
  uint64_t v13 = (char *)v0 + v12;
  uint64_t v14 = qword_100487120;
  uint64_t v15 = qword_100488998;
  swift_beginAccess();
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  uint64_t v47 = v13;
  uint64_t v48 = v6;
  unint64_t v40 = v16;
  uint64_t v41 = v7 + 16;
  v16(v11, v13, v6);
  unint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48);
  uint64_t v29 = v11;
  uint64_t v36 = v3 + 48;
  uint64_t v35 = v17;
  unsigned int v18 = v17(v11, 1, v2);
  BOOL v43 = *(void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v44 = v7 + 8;
  if (v18 == 1)
  {
    uint64_t v39 = (char *)v42 + v14;
    uint64_t v33 = (char *)v42 + v15;
    uint64_t v38 = (void (**)(char *, char *, uint64_t))(v3 + 32);
    uint64_t v32 = v3 + 56;
    uint64_t v31 = v7 + 40;
    uint64_t v30 = v3 + 16;
    uint64_t v45 = (void (**)(char *, uint64_t))(v3 + 8);
    char v27 = &v49;
    *(void *)&long long v19 = 136315394;
    long long v26 = v19;
    v25[1] = (char *)&type metadata for Any + 8;
    uint64_t v20 = v28;
    unint64_t v21 = v29;
    uint64_t v22 = v37;
    uint64_t v23 = v35;
    while (1)
    {
      v43(v21, v48);
      swift_beginAccess();
      type metadata accessor for Array();
      swift_getWitnessTable();
      swift_getWitnessTable();
      RangeReplaceableCollection<>.popLast()();
      swift_endAccess();
      if (v23(v22, 1, v2) == 1) {
        break;
      }
      (*v38)(v20, v22, v2);
      sub_100332FFC(v20);
      (*v45)(v20, v2);
      v40(v21, v47, v48);
      if (v23(v21, 1, v2) != 1) {
        return ((uint64_t (*)(char *, uint64_t))v43)(v21, v48);
      }
    }
    unint64_t v21 = v22;
  }
  else
  {
    unint64_t v21 = v29;
  }
  return ((uint64_t (*)(char *, uint64_t))v43)(v21, v48);
}

uint64_t sub_100332FFC(unint64_t a1)
{
  uint64_t v3 = v1;
  unint64_t v75 = a1;
  uint64_t v4 = (void *)*v1;
  uint64_t v5 = v4[11];
  uint64_t v6 = v4[10];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(void *)&long long v77 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v8 = &v61[-v7];
  uint64_t v9 = type metadata accessor for NANOutOfBoundActionFrameTransmitter.InFlightActionFrame();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v73 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v12 = &v61[-v11];
  uint64_t v76 = v9;
  uint64_t v78 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v14 = &v61[-v13];
  uint64_t v15 = *(void *)((char *)v3 + v4[15]);
  swift_unownedRetainStrong();
  sub_1003546AC();
  uint64_t result = swift_release();
  if (!v2)
  {
    uint64_t v67 = v15;
    uint64_t v68 = v12;
    uint64_t v69 = v6;
    uint64_t v70 = v5;
    uint64_t v72 = v8;
    unint64_t v17 = *(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v78 + 16);
    long long v19 = (unsigned __int8 *)v75;
    uint64_t v18 = v76;
    uint64_t v64 = v78 + 16;
    uint64_t v65 = v17;
    uint64_t v66 = v10;
    v17(v14, (unsigned __int8 *)v75, v76);
    swift_retain_n();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.info.getter();
    int v22 = v21;
    BOOL v23 = os_log_type_enabled(v20, v21);
    uint64_t v71 = 0;
    if (v23)
    {
      uint64_t v24 = swift_slowAlloc();
      uint64_t v63 = swift_slowAlloc();
      v79[0] = v63;
      *(_DWORD *)uint64_t v24 = 136315394;
      int v62 = v22;
      uint64_t v25 = *(unsigned int *)(v14 + 34);
      long long v26 = v19;
      uint64_t v27 = *((unsigned __int16 *)v14 + 16);
      (*(void (**)(unsigned char *, uint64_t))(v78 + 8))(v14, v18);
      unint64_t v28 = v27 | (v25 << 16);
      long long v19 = v26;
      uint64_t v29 = WiFiAddress.description.getter(v28);
      uint64_t v80 = sub_100010680(v29, v30, v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 12) = 2080;
      uint64_t v31 = v67;
      swift_unownedRetainStrong();
      unint64_t v32 = sub_100358C78();
      swift_release();
      swift_release();
      uint64_t v33 = WiFiAddress.description.getter(v32 & 0xFFFFFFFFFFFFLL);
      uint64_t v80 = sub_100010680(v33, v34, v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)v62, "Attempting to transmit out of band action frame to peer: %s on clusterID: %s", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v35 = v66;
    }
    else
    {
      swift_release();
      (*(void (**)(unsigned char *, uint64_t))(v78 + 8))(v14, v18);

      swift_release();
      uint64_t v35 = v66;
      uint64_t v31 = v67;
    }
    uint64_t v36 = v73;
    uint64_t v37 = (uint64_t)v68;
    v65(v68, v19, v18);
    uint64_t v38 = v78;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v78 + 56))(v37, 0, 1, v18);
    sub_100335D80(v37);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v37, v35);
    uint64_t v39 = sub_100333748((uint64_t)v79);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v40, 1, v18)) {
      sub_100332584(v18);
    }
    v39((uint64_t)v79, 0);
    uint64_t v41 = AssociatedTypeWitness;
    uint64_t v42 = v72;
    uint64_t v43 = v77;
    unint64_t v75 = *((unsigned __int16 *)v19 + 16) | ((unint64_t)*(unsigned int *)(v19 + 34) << 16);
    int v44 = sub_10033512C(v75);
    swift_unownedRetainStrong();
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v43 + 16))(v42, v31 + *(void *)(*(void *)v31 + 96), v41);
    swift_release();
    uint64_t v45 = *v19;
    uint64_t v47 = *((void *)v19 + 1);
    uint64_t v46 = *((void *)v19 + 2);
    uint64_t v78 = *((void *)v19 + 3);
    swift_unownedRetainStrong();
    uint64_t v76 = WiFiInterface.macAddress.getter();
    swift_release();
    swift_unownedRetainStrong();
    unint64_t v48 = sub_100358C78();
    swift_release();
    if (v44 == 1)
    {
      swift_unownedRetainStrong();
      uint64_t v49 = WiFiInterface.capabilities.getter();
      swift_release();
      uint64_t v50 = *WiFiDriverCapabilities.supportsSimultaneousDualBand.unsafeMutableAddressor();
      uint64_t v80 = v49;
      v79[0] = v50;
      unint64_t v51 = sub_1002C8868();
      swift_bridgeObjectRetain_n();
      ExtendableOptionSet.formIntersection(_:)((uint64_t)&v80, (uint64_t)&type metadata for WiFiDriverCapabilities, v51);
      LOBYTE(v51) = sub_1000956AC(v79[0], v50);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v52 = v45;
      unint64_t v53 = v75;
      if (v51) {
        BOOL v54 = (unsigned __int8 *)NANMapID.secondary.unsafeMutableAddressor();
      }
      else {
        BOOL v54 = (unsigned __int8 *)NANMapID.primary.unsafeMutableAddressor();
      }
      uint64_t v55 = *v54;
      uint64_t v56 = TimeBitmap.fiveGHzOutOfBoundActionFrameBitmap.unsafeMutableAddressor();
      uint64_t v43 = v77;
    }
    else
    {
      uint64_t v55 = *(unsigned __int8 *)NANMapID.primary.unsafeMutableAddressor();
      uint64_t v56 = TimeBitmap.twoGHzOutOfBoundActionFrameBitmap.unsafeMutableAddressor();
      uint64_t v52 = v45;
      unint64_t v53 = v75;
    }
    uint64_t v57 = v56[2];
    long long v77 = *(_OWORD *)v56;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v59 = v55;
    unint64_t v60 = v72;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 256))(v52, v47, v46, v78, v76 & 0xFFFFFFFFFFFFLL, v53, v48 & 0xFFFFFFFFFFFFLL, v59, v77, *((void *)&v77 + 1), v57, v41, AssociatedConformanceWitness);
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v43 + 8))(v60, v41);
  }
  return result;
}

uint64_t (*sub_100333748(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_1003337B4;
}

uint64_t sub_1003337B4(uint64_t a1, char a2)
{
  if (a2)
  {
    return swift_endAccess();
  }
  else
  {
    swift_endAccess();
    return sub_100332884();
  }
}

uint64_t sub_1003337F0(uint64_t a1)
{
  uint64_t v167 = (unsigned char *)*v1;
  uint64_t v3 = v167;
  uint64_t v164 = (uint8_t *)type metadata accessor for DispatchTimeInterval();
  unint64_t v161 = (uint8_t *)*((void *)v164 - 1);
  __chkstk_darwin();
  uint64_t v160 = &v143[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  uint64_t v163 = &v143[-v5];
  uint64_t v6 = *((void *)v3 + 10);
  uint64_t v172 = v1;
  uint64_t v152 = *((void *)v3 + 11);
  uint64_t v153 = v6;
  uint64_t v7 = type metadata accessor for NANOutOfBoundActionFrameTransmitter.InFlightActionFrame();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v168 = v8;
  uint64_t v169 = v9;
  __chkstk_darwin();
  uint64_t v166 = &v143[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  uint64_t v12 = &v143[-v11];
  uint64_t v170 = v7;
  uint64_t v171 = *(void *)(v7 - 8);
  uint64_t v13 = *(void *)(v171 + 64);
  __chkstk_darwin();
  unint64_t v154 = &v143[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  uint64_t v156 = &v143[-v14];
  __chkstk_darwin();
  unint64_t v155 = &v143[-v15];
  __chkstk_darwin();
  unint64_t v151 = &v143[-v16];
  __chkstk_darwin();
  unint64_t v158 = &v143[-v17];
  __chkstk_darwin();
  os_log_t v159 = &v143[-v18];
  __chkstk_darwin();
  unint64_t v157 = &v143[-v19];
  __chkstk_darwin();
  uint64_t v162 = &v143[-v20];
  __chkstk_darwin();
  int v22 = &v143[-v21];
  __chkstk_darwin();
  id v165 = &v143[-v23];
  type metadata accessor for DriverEvent(0);
  __chkstk_darwin();
  uint64_t v25 = &v143[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  uint64_t v27 = &v143[-v26];
  __chkstk_darwin();
  uint64_t v29 = &v143[-v28];
  __chkstk_darwin();
  uint64_t v31 = &v143[-v30];
  sub_100004130(a1, (uint64_t)&v143[-v30]);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 4)
  {
    sub_100004130((uint64_t)v31, (uint64_t)v27);
    if (*v27 == 1)
    {
      uint64_t v42 = (uint64_t)v166;
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v171 + 56))(v166, 1, 1, v170);
      sub_100335D80(v42);
      (*(void (**)(uint64_t, uint64_t))(v169 + 8))(v42, v168);
      swift_beginAccess();
      type metadata accessor for Array();
      Array.removeAll(keepingCapacity:)(0);
      swift_endAccess();
      return sub_100335E5C((uint64_t)v31, type metadata accessor for DriverEvent);
    }
    goto LABEL_9;
  }
  if (EnumCaseMultiPayload)
  {
LABEL_9:
    sub_100004130(a1, (uint64_t)v25);
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = swift_slowAlloc();
      v176[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v45 = 136315394;
      uint64_t v46 = _typeName(_:qualified:)();
      v175[0] = sub_100010680(v46, v47, v176);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v45 + 12) = 2080;
      uint64_t v48 = DriverEvent.shortDescription.getter();
      v175[0] = sub_100010680(v48, v49, v176);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100335E5C((uint64_t)v25, type metadata accessor for DriverEvent);
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "%s unable to handle event: %s", (uint8_t *)v45, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_100335E5C((uint64_t)v25, type metadata accessor for DriverEvent);
    }
    return sub_100335E5C((uint64_t)v31, type metadata accessor for DriverEvent);
  }
  sub_100004130((uint64_t)v31, (uint64_t)v29);
  sub_10006E544((uint64_t)v29, (uint64_t)v175);
  sub_10006E544((uint64_t)v175, (uint64_t)v176);
  if (sub_1001343E0((uint64_t)v176) != 15)
  {
    sub_1003080B8((uint64_t)v175);
    goto LABEL_9;
  }
  uint64_t v167 = v31;
  uint64_t v33 = NANBitmap.Channel.operatingClass.getter(v176);
  unsigned int v150 = *(unsigned __int8 *)(v33 + 2);
  int v34 = *(unsigned __int8 *)(v33 + 3);
  uint64_t v35 = v172;
  uint64_t v36 = (char *)v172 + *(void *)(*v172 + 112);
  swift_beginAccess();
  uint64_t v37 = v169;
  uint64_t v38 = v36;
  uint64_t v39 = v168;
  (*(void (**)(unsigned char *, char *, uint64_t))(v169 + 16))(v12, v38, v168);
  uint64_t v40 = v170;
  uint64_t v41 = v171;
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v171 + 48))(v12, 1, v170) == 1)
  {
    (*(void (**)(unsigned char *, uint64_t))(v37 + 8))(v12, v39);
    uint64_t v31 = v167;
    return sub_100335E5C((uint64_t)v31, type metadata accessor for DriverEvent);
  }
  LODWORD(v149) = v34;
  unint64_t v51 = (unint64_t)v165;
  uint64_t v146 = *(void (**)(char *, unsigned char *, uint64_t))(v41 + 32);
  uint64_t v147 = v41 + 32;
  v146(v165, v12, v40);
  BOOL v54 = *(unsigned char **)(v41 + 16);
  uint64_t v53 = v41 + 16;
  uint64_t v52 = v54;
  uint64_t v55 = v35;
  unsigned int v56 = v150;
  if (v150)
  {
    uint64_t v162 = v52;
    ((void (*)(unsigned char *, unint64_t, uint64_t))v52)(v22, v51, v40);
    uint64_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.error.getter();
    int v59 = v58;
    BOOL v60 = os_log_type_enabled(v57, v58);
    uint64_t v148 = v53;
    if (v60)
    {
      uint64_t v61 = swift_slowAlloc();
      uint64_t v145 = swift_slowAlloc();
      v174[0] = v145;
      *(_DWORD *)uint64_t v61 = 136315650;
      int v144 = v59;
      uint64_t v62 = *(unsigned int *)(v22 + 34);
      uint64_t v63 = *(void (**)(unsigned char *, uint64_t))(v171 + 8);
      uint64_t v64 = *((unsigned __int16 *)v22 + 16);
      v63(v22, v170);
      uint64_t v65 = WiFiAddress.description.getter(v64 | (v62 << 16));
      uint64_t v173 = sub_100010680(v65, v66, v174);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v61 + 12) = 2080;
      LOBYTE(v173) = v56;
      uint64_t v67 = String.init<A>(describing:)();
      uint64_t v173 = sub_100010680(v67, v68, v174);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v61 + 22) = 2080;
      LOBYTE(v173) = (_BYTE)v149;
      uint64_t v69 = String.init<A>(describing:)();
      uint64_t v173 = sub_100010680(v69, v70, v174);
      uint64_t v55 = v172;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      unint64_t v51 = (unint64_t)v165;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v57, (os_log_type_t)v144, "Failed to transmit out of band action frame to %s: %s [%s]", (uint8_t *)v61, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v40 = v170;
      swift_slowDealloc();
    }
    else
    {
      uint64_t v63 = *(void (**)(unsigned char *, uint64_t))(v171 + 8);
      v63(v22, v40);
    }

    uint64_t v83 = (uint8_t *)v163;
    uint64_t v84 = v164;
    if (v56 >= 3)
    {
      uint64_t v113 = (uint64_t)v166;
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v171 + 56))(v166, 1, 1, v40);
      sub_100335D80(v113);
      (*(void (**)(uint64_t, uint64_t))(v169 + 8))(v113, v168);
    }
    else
    {
      if (*(uint64_t *)(v51 + 40) > 3)
      {
        unint64_t v149 = v63;
        swift_unownedRetainStrong();
        sub_100356CE8((uint64_t)v83);
        swift_release();
        uint64_t v86 = v160;
        uint64_t v85 = v161;
        *(void *)uint64_t v160 = 10;
        unint64_t v87 = v51;
        unint64_t v88 = (void (*)(unsigned char *))*((void *)v85 + 13);
        LODWORD(v159) = enum case for DispatchTimeInterval.seconds(_:);
        v88(v86);
        BOOL v89 = static DispatchTimeInterval.< infix(_:_:)();
        uint64_t v91 = (unsigned char *)*((void *)v85 + 1);
        unint64_t v90 = v85 + 8;
        uint64_t v92 = v86;
        uint64_t v93 = v91;
        ((void (*)(unsigned char *, uint8_t *))v91)(v92, v84);
        ((void (*)(uint8_t *, uint8_t *))v91)(v83, v84);
        int v94 = v158;
        unint64_t v95 = v87;
        uint64_t v96 = v170;
        ((void (*)(unsigned char *, unint64_t, uint64_t))v162)(v158, v95, v170);
        if (v89)
        {
          uint64_t v160 = v88;
          unint64_t v161 = v90;
          char v97 = v94[38];
          uint64_t v98 = v171;
          v149(v94, v96);
          if (v97)
          {
            unint64_t v158 = (unsigned char *)type metadata accessor for P2PTimer();
            uint64_t v99 = v96;
            uint64_t v101 = (uint8_t *)v163;
            uint64_t v100 = v164;
            v163->Class isa = (Class)2;
            ((void (*)(uint8_t *, void, uint8_t *))v160)(v101, v159, v100);
            uint64_t v102 = (void *)*OS_dispatch_queue.nan.unsafeMutableAddressor();
            uint64_t v103 = swift_allocObject();
            swift_weakInit();
            uint64_t v160 = v93;
            uint64_t v104 = v151;
            ((void (*)(unsigned char *, char *, uint64_t))v162)(v151, v165, v99);
            unint64_t v105 = (*(unsigned __int8 *)(v98 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80);
            int v106 = (void *)swift_allocObject();
            uint64_t v107 = v152;
            v106[2] = v153;
            v106[3] = v107;
            v106[4] = v103;
            long long v108 = (char *)v106 + v105;
            uint64_t v98 = v171;
            v146(v108, v104, v99);
            id v109 = v102;
            swift_retain();
            static P2PTimer.async(after:on:execute:)((uint64_t)v101, v109, (uint64_t)sub_100335FF8, (uint64_t)v106);

            int64_t v110 = v165;
            swift_release();
            ((void (*)(uint8_t *, uint8_t *))v160)(v101, v164);
            swift_release();
            uint64_t v111 = v99;
            uint64_t v112 = v149;
LABEL_37:
            uint64_t v142 = (uint64_t)v166;
            (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v98 + 56))(v166, 1, 1, v111);
            sub_100335D80(v142);
            (*(void (**)(uint64_t, uint64_t))(v169 + 8))(v142, v168);
            v112(v110, v111);
            uint64_t v31 = v167;
            return sub_100335E5C((uint64_t)v31, type metadata accessor for DriverEvent);
          }
        }
        else
        {
          uint64_t v98 = v171;
          v149(v94, v96);
        }
        uint64_t v130 = v155;
        int64_t v110 = v165;
        ((void (*)(unsigned char *, char *, uint64_t))v162)(v155, v165, v96);
        int64_t v131 = Logger.logObject.getter();
        os_log_type_t v132 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v131, v132))
        {
          os_log_type_t v133 = (uint8_t *)swift_slowAlloc();
          v174[0] = swift_slowAlloc();
          uint64_t v164 = v133;
          *(_DWORD *)os_log_type_t v133 = 136315138;
          uint64_t v163 = (v133 + 4);
          uint64_t v134 = *(unsigned int *)(v130 + 34);
          uint64_t v135 = *((unsigned __int16 *)v130 + 16);
          uint64_t v136 = v130;
          uint64_t v111 = v96;
          uint64_t v137 = v96;
          uint64_t v112 = v149;
          v149(v136, v137);
          uint64_t v138 = WiFiAddress.description.getter(v135 | (v134 << 16));
          uint64_t v173 = sub_100010680(v138, v139, v174);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v98 = v171;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v131, v132, "Exceeded retries while transmitting out of band action frame to %s", v164, 0xCu);
          swift_arrayDestroy();
          int64_t v110 = v165;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          unint64_t v140 = v130;
          uint64_t v141 = v96;
          uint64_t v111 = v96;
          uint64_t v112 = v149;
          v149(v140, v141);
        }

        goto LABEL_37;
      }
      uint64_t v115 = (uint8_t *)v55 + qword_100488998;
      unsigned int v116 = v157;
      uint64_t v117 = (void (*)(unsigned char *, unint64_t, uint64_t))v162;
      ((void (*)(unsigned char *, unint64_t, uint64_t))v162)(v157, v51, v40);
      unint64_t v118 = v159;
      v117(v159, v51, v40);
      unint64_t v119 = Logger.logObject.getter();
      os_log_type_t v120 = static os_log_type_t.info.getter();
      BOOL v121 = os_log_type_enabled(v119, v120);
      uint64_t v164 = v115;
      if (v121)
      {
        uint64_t v122 = swift_slowAlloc();
        v174[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v122 = 134218242;
        uint64_t v163 = v119;
        uint64_t v123 = v116;
        uint64_t v124 = *((void *)v116 + 5);
        v63(v123, v40);
        uint64_t v173 = v124;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v122 + 12) = 2080;
        unint64_t v161 = (uint8_t *)(v122 + 14);
        uint64_t v125 = *(unsigned int *)(v118 + 34);
        uint64_t v126 = *((unsigned __int16 *)v118 + 16);
        v63(v118, v170);
        unint64_t v127 = v126 | (v125 << 16);
        uint64_t v40 = v170;
        uint64_t v128 = WiFiAddress.description.getter(v127);
        uint64_t v173 = sub_100010680(v128, v129, v174);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        unint64_t v119 = v163;
        _os_log_impl((void *)&_mh_execute_header, v163, v120, "Retry #%ld transmission of out of band action frame to %s", (uint8_t *)v122, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        unint64_t v51 = (unint64_t)v165;
        swift_slowDealloc();
      }
      else
      {
        v63(v118, v40);
        v63(v116, v40);
      }

      sub_100332FFC(v51);
    }
    v63((unsigned char *)v51, v40);
    uint64_t v31 = v167;
    return sub_100335E5C((uint64_t)v31, type metadata accessor for DriverEvent);
  }
  uint64_t v71 = v162;
  ((void (*)(unsigned char *, unint64_t, uint64_t))v52)(v162, v51, v40);
  uint64_t v72 = Logger.logObject.getter();
  os_log_type_t v73 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v72, v73))
  {
    int v74 = (uint8_t *)swift_slowAlloc();
    uint64_t v164 = (uint8_t *)swift_slowAlloc();
    v174[0] = (uint64_t)v164;
    uint64_t v163 = v74;
    *(_DWORD *)int v74 = 136315138;
    unint64_t v161 = v74 + 4;
    uint64_t v75 = *(unsigned int *)(v71 + 34);
    uint64_t v76 = v171;
    long long v77 = *(void (**)(unsigned char *, uint64_t))(v171 + 8);
    uint64_t v78 = *((unsigned __int16 *)v71 + 16);
    v77(v71, v170);
    uint64_t v79 = WiFiAddress.description.getter(v78 | (v75 << 16));
    uint64_t v173 = sub_100010680(v79, v80, v174);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v40 = v170;
    swift_bridgeObjectRelease();
    os_log_type_t v81 = v73;
    uint64_t v82 = v77;
    _os_log_impl((void *)&_mh_execute_header, v72, v81, "Successfully transmitted out of band action frame to %s", (uint8_t *)v163, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v76 = v171;
    uint64_t v82 = *(void (**)(unsigned char *, uint64_t))(v171 + 8);
    v82(v71, v40);
  }

  uint64_t v114 = (uint64_t)v166;
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v76 + 56))(v166, 1, 1, v40);
  sub_100335D80(v114);
  (*(void (**)(uint64_t, uint64_t))(v169 + 8))(v114, v168);
  v82(v165, v40);
  uint64_t v31 = v167;
  return sub_100335E5C((uint64_t)v31, type metadata accessor for DriverEvent);
}

uint64_t sub_100334D7C(uint64_t a1, unsigned __int8 *a2)
{
  type metadata accessor for NANOutOfBoundActionFrameTransmitter.InFlightActionFrame();
  __chkstk_darwin();
  type metadata accessor for Logger();
  __chkstk_darwin();
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100331C6C(*a2, *((void *)a2 + 1), *((void *)a2 + 2), *((void *)a2 + 3), *((unsigned __int16 *)a2 + 16) | ((unint64_t)*(unsigned int *)(a2 + 34) << 16), 0);
    return swift_release();
  }
  return result;
}

uint64_t sub_10033512C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NANPeer(0);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unownedRetainStrong();
  swift_unownedRetainStrong();
  swift_release();
  __int16 v5 = sub_10033727C();
  swift_release();
  uint64_t v6 = CountryCode.unknown.unsafeMutableAddressor();
  if (*(unsigned __int8 *)v6 != v5 || *((unsigned __int8 *)v6 + 1) != HIBYTE(v5))
  {
    swift_unownedRetainStrong();
    uint64_t v8 = WiFiInterface.capabilities.getter();
    swift_release();
    uint64_t v9 = *WiFiDriverCapabilities.supportsDualBand.unsafeMutableAddressor();
    uint64_t v15 = v8;
    uint64_t v16 = v9;
    unint64_t v10 = sub_1002C8868();
    swift_bridgeObjectRetain_n();
    ExtendableOptionSet.formIntersection(_:)((uint64_t)&v15, (uint64_t)&type metadata for WiFiDriverCapabilities, v10);
    LOBYTE(v10) = sub_1000956AC(v16, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v10)
    {
      swift_unownedRetainStrong();
      sub_10035665C(a1 & 0xFFFFFFFFFFFFLL, (uint64_t)v4);
      swift_release();
      uint64_t v11 = &v4[*(int *)(v2 + 52)];
      if ((v11[11] & 1) != 0
        || (int v12 = v11[4],
            (*(unsigned __int8 *)NANBitmap.Band.ghz_4_9_to_5_0.unsafeMutableAddressor() & ~v12) != 0))
      {
        sub_100335E5C((uint64_t)v4, type metadata accessor for NANPeer);
      }
      else
      {
        int v13 = *(unsigned __int8 *)NANBitmap.Band.ghz2_4.unsafeMutableAddressor() & ~v12;
        sub_100335E5C((uint64_t)v4, type metadata accessor for NANPeer);
        if (!v13) {
          return 1;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_100335348()
{
  uint64_t v1 = v0 + qword_100488998;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  uint64_t v3 = v0 + *(void *)(*(void *)v0 + 112);
  type metadata accessor for NANOutOfBoundActionFrameTransmitter.InFlightActionFrame();
  uint64_t v4 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_unownedRelease();
  return v0;
}

uint64_t sub_100335468()
{
  sub_100335348();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for NANOutOfBoundActionFrameTransmitter()
{
  return sub_100038354();
}

uint64_t type metadata accessor for NANOutOfBoundActionFrameTransmitter.InFlightActionFrame()
{
  return sub_100038354();
}

uint64_t sub_1003354F0()
{
  uint64_t result = type metadata accessor for DispatchTime();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *sub_1003355A8(unsigned char *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = (unsigned char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(unsigned char *)a2;
    uint64_t v7 = a2[1];
    uint64_t v8 = a2[2];
    uint64_t v9 = a2[3];
    sub_10006EAC4(v7);
    *((void *)v4 + 1) = v7;
    *((void *)v4 + 2) = v8;
    *((void *)v4 + 3) = v9;
    *((_DWORD *)v4 + 8) = *((_DWORD *)a2 + 8);
    *((_WORD *)v4 + 18) = *((_WORD *)a2 + 18);
    v4[38] = *((unsigned char *)a2 + 38);
    uint64_t v10 = a2[5];
    uint64_t v11 = *(int *)(a3 + 48);
    int v12 = &v4[v11];
    uint64_t v13 = (uint64_t)a2 + v11;
    *((void *)v4 + 5) = v10;
    uint64_t v14 = type metadata accessor for DispatchTime();
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return v4;
}

uint64_t sub_1003356C4(uint64_t a1, uint64_t a2)
{
  sub_10006DE90(*(void *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 48);
  uint64_t v5 = type metadata accessor for DispatchTime();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t sub_100335740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  sub_10006EAC4(v6);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 36);
  *(unsigned char *)(a1 + 38) = *(unsigned char *)(a2 + 38);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(int *)(a3 + 48);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(void *)(a1 + 40) = v9;
  uint64_t v13 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

uint64_t sub_10033580C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  sub_10006EAC4(v6);
  uint64_t v9 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v8;
  sub_10006DE90(v9);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  *(unsigned char *)(a1 + 35) = *(unsigned char *)(a2 + 35);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(unsigned char *)(a1 + 37) = *(unsigned char *)(a2 + 37);
  *(unsigned char *)(a1 + 38) = *(unsigned char *)(a2 + 38);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v10 = *(int *)(a3 + 48);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t sub_100335904(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 36);
  *(unsigned char *)(a1 + 38) = *(unsigned char *)(a2 + 38);
  uint64_t v5 = *(int *)(a3 + 48);
  uint64_t v6 = a2 + v5;
  uint64_t v7 = a1 + v5;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v8 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v7, v6, v8);
  return a1;
}

uint64_t sub_1003359A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v6;
  sub_10006DE90(v7);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 36);
  *(unsigned char *)(a1 + 38) = *(unsigned char *)(a2 + 38);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v8 = *(int *)(a3 + 48);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_100335A60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100335A74);
}

uint64_t sub_100335A74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 32765)
  {
    HIDWORD(v5) = (*(_DWORD *)(a1 + 8) >> 17) & 0x1F80 | ((unsigned __int16)*(_DWORD *)(a1 + 8) >> 9);
    LODWORD(v5) = *(_DWORD *)(a1 + 8);
    int v4 = v5 >> 30;
    unsigned int v6 = v4 ^ 0x7FFF;
    unsigned int v7 = 0x8000 - v4;
    if (v6 >= 0x7FFD) {
      return 0;
    }
    else {
      return v7;
    }
  }
  else
  {
    uint64_t v11 = type metadata accessor for DispatchTime();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 48);
    return v12(v14, a2, v13);
  }
}

uint64_t sub_100335B38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100335B4C);
}

void *sub_100335B4C(void *result, uint64_t a2, int a3, uint64_t a4)
{
  unint64_t v5 = result;
  if (a3 == 32765)
  {
    result[2] = 0;
    result[3] = 0;
    result[1] = ((-(__int16)a2 & 0x7FFF) << 7) & 0xFE00 | ((((-(int)a2 >> 2) & 0x1FFF) - (a2 << 13)) << 17) & 0xFF00FFFF;
  }
  else
  {
    uint64_t v7 = type metadata accessor for DispatchTime();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 48);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_100335C14(uint64_t a1)
{
  Logger.init(subsystem:category:)();
  uint64_t v3 = qword_100487120;
  uint64_t v4 = type metadata accessor for NANOutOfBoundActionFrameTransmitter.InFlightActionFrame();
  *(void *)(v1 + v3) = Array.init()();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v1 + *(void *)(*(void *)v1 + 112), 1, 1, v4);
  *(void *)(v1 + *(void *)(*(void *)v1 + 120)) = a1;
  swift_unownedRetain();
  return v1;
}

uint64_t sub_100335D44(uint64_t a1)
{
  return sub_100335C14(a1);
}

uint64_t sub_100335D80(uint64_t a1)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 112);
  swift_beginAccess();
  type metadata accessor for NANOutOfBoundActionFrameTransmitter.InFlightActionFrame();
  uint64_t v4 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(v3, a1, v4);
  swift_endAccess();
  return sub_100332884();
}

uint64_t sub_100335E5C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100335EBC()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100335EF4()
{
  uint64_t v1 = (int *)(type metadata accessor for NANOutOfBoundActionFrameTransmitter.InFlightActionFrame() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  uint64_t v6 = v0 + v3;
  sub_10006DE90(*(void *)(v6 + 8));
  uint64_t v7 = v6 + v1[14];
  uint64_t v8 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100335FF8()
{
  uint64_t v1 = *(void *)(type metadata accessor for NANOutOfBoundActionFrameTransmitter.InFlightActionFrame() - 8);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (unsigned __int8 *)(v0
                         + ((*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));

  return sub_100334D7C(v2, v3);
}

void sub_100336080()
{
  sub_10033CA88(319, &qword_1004872A8, (uint64_t (*)(void))sub_1000D50AC, (uint64_t)&type metadata for PreferenceDefaults.EnableUserspaceP2POptions, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MutableDriverProperty);
  if (v0 <= 0x3F)
  {
    sub_10033CBC4(319, &qword_1004872B0, (uint64_t)&type metadata for Bool, (uint64_t)&protocol witness table for Bool, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ObservableWiFiProperty);
    if (v1 <= 0x3F)
    {
      sub_10033C9F0(319, &qword_1004872B8, &qword_1004872C0, &qword_1004872C8, (void (*)(void))sub_10007AA4C);
      if (v2 <= 0x3F)
      {
        sub_10033CA88(319, &qword_1004872D0, (uint64_t (*)(void))sub_10007AAA4, (uint64_t)&type metadata for AutoJoinState, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ObservableWiFiProperty);
        if (v3 <= 0x3F)
        {
          sub_10027E0A4();
          if (v4 <= 0x3F)
          {
            type metadata accessor for DispatchTimeInterval();
            if (v5 <= 0x3F)
            {
              sub_10033C9F0(319, &qword_1004872D8, (uint64_t *)&unk_100487B90, &qword_1004872E0, (void (*)(void))sub_1001C7C00);
              if (v6 <= 0x3F)
              {
                sub_10033CA88(319, &qword_1004872E8, (uint64_t (*)(void))sub_100156598, (uint64_t)&type metadata for CountryCode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ObservableWiFiProperty);
                if (v7 <= 0x3F)
                {
                  sub_10033CAF0();
                  if (v8 <= 0x3F)
                  {
                    sub_10033C9F0(319, &qword_100487300, &qword_100487308, &qword_100487310, (void (*)(void))sub_1001E0DB4);
                    if (v9 <= 0x3F)
                    {
                      sub_10033CBC4(319, &qword_100487318, (uint64_t)&type metadata for InfrastructureRadioConstraints, (uint64_t)&off_10046ECD0, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for RadioConstraint);
                      if (v10 <= 0x3F) {
                        swift_initClassMetadata2();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_100336530()
{
  uint64_t v1 = sub_100010BCC((uint64_t *)&unk_100488350);
  __chkstk_darwin();
  unint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = v0 + *(void *)(*(void *)v0 + 440);
  swift_beginAccess();
  sub_1000136F4(v4, (uint64_t)v3, (uint64_t *)&unk_100488350);
  ObservableWiFiProperty.wrappedValue.getter(v1, (uint64_t)&v6 + 7);
  sub_1000380B4((uint64_t)v3, (uint64_t *)&unk_100488350);
  return HIBYTE(v6);
}

uint64_t sub_10033660C(char a1)
{
  char v3 = a1;
  swift_beginAccess();
  uint64_t v1 = sub_100010BCC((uint64_t *)&unk_100488350);
  ObservableWiFiProperty.wrappedValue.setter(&v3, v1);
  return swift_endAccess();
}

uint64_t sub_100336680@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 440);
  swift_beginAccess();
  return sub_1000136F4(v3, a1, (uint64_t *)&unk_100488350);
}

uint64_t sub_1003366E8()
{
  uint64_t v1 = sub_100010BCC(qword_100486430);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = v0 + *(void *)(*(void *)v0 + 448);
  swift_beginAccess();
  sub_1000136F4(v4, (uint64_t)v3, qword_100486430);
  ObservableWiFiProperty.wrappedValue.getter(v1, (uint64_t)&v7);
  sub_1000380B4((uint64_t)v3, qword_100486430);
  return v7;
}

uint64_t sub_1003367D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = a1;
  v6[1] = a2;
  v6[2] = a3;
  int v7 = a4;
  __int16 v8 = WORD2(a4);
  swift_beginAccess();
  uint64_t v4 = sub_100010BCC(qword_100486430);
  ObservableWiFiProperty.wrappedValue.setter((char *)v6, v4);
  return swift_endAccess();
}

uint64_t sub_100336858@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 448);
  swift_beginAccess();
  return sub_1000136F4(v3, a1, qword_100486430);
}

uint64_t sub_1003368C0(char a1)
{
  char v3 = a1 & 1;
  swift_beginAccess();
  uint64_t v1 = sub_100010BCC(qword_100487A90);
  ObservableWiFiProperty.wrappedValue.setter(&v3, v1);
  return swift_endAccess();
}

uint64_t sub_100336938@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 456);
  swift_beginAccess();
  return sub_1000136F4(v3, a1, qword_100487A90);
}

unint64_t sub_1003369A0(unint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100010BCC(&qword_100487328);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_10047DB90);
  __chkstk_darwin();
  __int16 v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v10 = (char *)&v20 - v9;
  unint64_t result = sub_100336D48();
  uint64_t v12 = a1 & 0xFF00000000;
  if ((result & 0xFF00000000) == 0x300000000)
  {
    if (v12 == 0x300000000) {
      return result;
    }
    goto LABEL_20;
  }
  if (v12 == 0x300000000
    || result != a1
    || ((0x801004u >> ((result >> 29) & 0xF8)) & 0xFFC) != ((0x801004u >> ((a1 >> 29) & 0xF8)) & 0xFFC))
  {
LABEL_20:
    if ((sub_100336D48() & 0xFF00000000) == 0x300000000)
    {
      uint64_t v13 = type metadata accessor for DispatchTime();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v10, 1, 1, v13);
      uint64_t v14 = v1 + *(void *)(*(void *)v1 + 464);
      swift_beginAccess();
      uint64_t v15 = (uint64_t)v10;
    }
    else
    {
      type metadata accessor for P2PTimer();
      variable initialization expression of AWDLPeer.lastUpdated();
      uint64_t v16 = type metadata accessor for DispatchTime();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v10, 0, 1, v16);
      sub_10006EC68((uint64_t)v10, (uint64_t)v8, &qword_10047DB90);
      uint64_t v14 = v1 + *(void *)(*(void *)v1 + 464);
      swift_beginAccess();
      uint64_t v15 = (uint64_t)v8;
    }
    sub_10027ECE4(v15, v14);
    swift_endAccess();
    unint64_t v17 = sub_100336D48();
    uint64_t v18 = v2 + *(void *)(*(void *)v2 + 552);
    swift_beginAccess();
    sub_1000136F4(v18, (uint64_t)v6, &qword_100487328);
    uint64_t v19 = &v6[*(int *)(v4 + 36)];
    *((_WORD *)v19 + 10) = WORD2(v17);
    *((_DWORD *)v19 + 4) = v17;
    return sub_100337D54((uint64_t)v6);
  }
  switch(BYTE5(result))
  {
    case 2:
      if (BYTE5(a1) != 2) {
        goto LABEL_20;
      }
      break;
    case 3:
      if (BYTE5(a1) != 3) {
        goto LABEL_20;
      }
      break;
    case 4:
      if (BYTE5(a1) != 4) {
        goto LABEL_20;
      }
      break;
    case 5:
      if (BYTE5(a1) != 5) {
        goto LABEL_20;
      }
      break;
    case 6:
      if (BYTE5(a1) != 6) {
        goto LABEL_20;
      }
      break;
    default:
      if (BYTE5(a1) - 2 < 5 || ((a1 >> 40) & 1) == ((result & 0x10000000000) == 0)) {
        goto LABEL_20;
      }
      break;
  }
  return result;
}

unint64_t sub_100336D48()
{
  uint64_t v1 = sub_100010BCC(&qword_100487350);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = v0 + *(void *)(*(void *)v0 + 488);
  swift_beginAccess();
  sub_1000136F4(v4, (uint64_t)v3, &qword_100487350);
  ObservableWiFiProperty.wrappedValue.getter(v1, (uint64_t)&v6);
  sub_1000380B4((uint64_t)v3, &qword_100487350);
  return v6 | ((unint64_t)v7 << 32);
}

unint64_t sub_100336E2C(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v2 = sub_100010BCC(&qword_100487350);
  ObservableWiFiProperty.wrappedValue.getter(v2, (uint64_t)&v5);
  unint64_t v3 = v5 | ((unint64_t)v6 << 32);
  swift_endAccess();
  unsigned __int16 v6 = WORD2(a1);
  unsigned int v5 = a1;
  swift_beginAccess();
  ObservableWiFiProperty.wrappedValue.setter((char *)&v5, v2);
  swift_endAccess();
  return sub_1003369A0(v3);
}

uint64_t sub_100336F00(char a1)
{
  int v2 = a1 & 1;
  sub_100010BCC(&qword_10047DB90);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unsigned __int16 v6 = (char *)&v12 - v5;
  uint64_t result = sub_1003370DC();
  if ((result & 1) != v2)
  {
    if (sub_1003370DC())
    {
      type metadata accessor for P2PTimer();
      variable initialization expression of AWDLPeer.lastUpdated();
      uint64_t v8 = type metadata accessor for DispatchTime();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v6, 0, 1, v8);
      sub_10006EC68((uint64_t)v6, (uint64_t)v4, &qword_10047DB90);
      uint64_t v9 = v1 + *(void *)(*(void *)v1 + 496);
      swift_beginAccess();
      uint64_t v10 = (uint64_t)v4;
    }
    else
    {
      uint64_t v11 = type metadata accessor for DispatchTime();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v6, 1, 1, v11);
      uint64_t v9 = v1 + *(void *)(*(void *)v1 + 496);
      swift_beginAccess();
      uint64_t v10 = (uint64_t)v6;
    }
    sub_10027ECE4(v10, v9);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_1003370DC()
{
  uint64_t v1 = sub_100010BCC((uint64_t *)&unk_100488350);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = v0 + *(void *)(*(void *)v0 + 520);
  swift_beginAccess();
  sub_1000136F4(v4, (uint64_t)v3, (uint64_t *)&unk_100488350);
  ObservableWiFiProperty.wrappedValue.getter(v1, (uint64_t)&v6 + 7);
  sub_1000380B4((uint64_t)v3, (uint64_t *)&unk_100488350);
  return HIBYTE(v6);
}

uint64_t sub_1003371B8(char a1)
{
  swift_beginAccess();
  uint64_t v2 = sub_100010BCC((uint64_t *)&unk_100488350);
  ObservableWiFiProperty.wrappedValue.getter(v2, (uint64_t)&v5);
  char v3 = v5;
  swift_endAccess();
  char v5 = a1;
  swift_beginAccess();
  ObservableWiFiProperty.wrappedValue.setter(&v5, v2);
  swift_endAccess();
  return sub_100336F00(v3);
}

uint64_t sub_10033727C()
{
  uint64_t v1 = sub_100010BCC((uint64_t *)&unk_100487D30);
  __chkstk_darwin();
  char v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = v0 + *(void *)(*(void *)v0 + 528);
  swift_beginAccess();
  sub_1000136F4(v4, (uint64_t)v3, (uint64_t *)&unk_100487D30);
  ObservableWiFiProperty.wrappedValue.getter(v1, (uint64_t)&v6 + 6);
  sub_1000380B4((uint64_t)v3, (uint64_t *)&unk_100487D30);
  return HIWORD(v6);
}

uint64_t sub_100337358(__int16 a1)
{
  __int16 v3 = a1;
  swift_beginAccess();
  uint64_t v1 = sub_100010BCC((uint64_t *)&unk_100487D30);
  ObservableWiFiProperty.wrappedValue.setter((char *)&v3, v1);
  return swift_endAccess();
}

uint64_t sub_1003373CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 528);
  swift_beginAccess();
  return sub_1000136F4(v3, a1, (uint64_t *)&unk_100487D30);
}

uint64_t sub_100337434(uint64_t a1, uint64_t a2)
{
  v4[0] = a1;
  v4[1] = a2;
  swift_beginAccess();
  uint64_t v2 = sub_100010BCC((uint64_t *)&unk_100487A70);
  ObservableWiFiProperty.wrappedValue.setter((char *)v4, v2);
  return swift_endAccess();
}

uint64_t sub_1003374A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 536);
  swift_beginAccess();
  return sub_1000136F4(v3, a1, (uint64_t *)&unk_100487A70);
}

uint64_t sub_100337510(uint64_t a1)
{
  uint64_t v33 = a1;
  uint64_t v2 = *v1;
  uint64_t v36 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v39 = *(void *)(v36 - 8);
  __chkstk_darwin();
  uint64_t v35 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v37 = *(void *)(v4 - 8);
  uint64_t v38 = v4;
  __chkstk_darwin();
  int v34 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = *(void *)(sub_100010BCC(&qword_100487328) - 8);
  uint64_t v6 = *(void *)(v31 + 64);
  __chkstk_darwin();
  unsigned __int16 v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v29 - v8;
  uint64_t v30 = *(void *)(v2 + 416);
  uint64_t v29 = *(void *)(v2 + 408);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v29 - v13;
  id v32 = (id)*OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v15 = (uint64_t)v1 + *(void *)(*v1 + 112);
  uint64_t v16 = (uint64_t)v1 + *(void *)(*v1 + 552);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v15, AssociatedTypeWitness);
  sub_1000136F4(v33, (uint64_t)v9, &qword_100487328);
  sub_1000136F4(v16, (uint64_t)v7, &qword_100487328);
  unint64_t v17 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v18 = *(unsigned __int8 *)(v31 + 80);
  unint64_t v19 = (v12 + v18 + v17) & ~v18;
  unint64_t v20 = (v6 + v18 + v19) & ~v18;
  uint64_t v21 = swift_allocObject();
  uint64_t v22 = v30;
  *(void *)(v21 + 16) = v29;
  *(void *)(v21 + 24) = v22;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v21 + v17, v14, AssociatedTypeWitness);
  sub_10006EC68((uint64_t)v9, v21 + v19, &qword_100487328);
  sub_10006EC68((uint64_t)v7, v21 + v20, &qword_100487328);
  aBlock[4] = sub_10033FB40;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E5D0;
  uint64_t aBlock[3] = &unk_10046EF88;
  uint64_t v23 = _Block_copy(aBlock);
  id v24 = v32;
  uint64_t v25 = v34;
  static DispatchQoS.unspecified.getter();
  uint64_t v40 = _swiftEmptyArrayStorage;
  sub_100014390();
  sub_100010BCC((uint64_t *)&unk_10047D0F0);
  sub_10000F9CC((unint64_t *)&qword_1004807B0, (uint64_t *)&unk_10047D0F0);
  uint64_t v27 = v35;
  uint64_t v26 = v36;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v23);

  (*(void (**)(char *, uint64_t))(v39 + 8))(v27, v26);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v25, v38);
  return swift_release();
}

uint64_t sub_100337A1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = a3;
  uint64_t v19 = a2;
  sub_100010BCC(&qword_100487330);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v18 - v5;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = *(void (**)(void))(AssociatedConformanceWitness + 104);
  swift_checkMetadataState();
  v11();
  sub_1000136F4(v19, (uint64_t)v6, &qword_100487328);
  uint64_t v12 = sub_100010BCC(&qword_100487328);
  uint64_t v13 = *(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
  v13(v6, 0, 1, v12);
  sub_1000136F4(v21, (uint64_t)v4, &qword_100487328);
  v13(v4, 0, 1, v12);
  uint64_t v14 = swift_getAssociatedConformanceWitness();
  uint64_t v15 = sub_10033FC68(&qword_100487338, &qword_100487328, (void (*)(void))sub_10033FCD4);
  uint64_t v16 = sub_10000F9CC(&qword_100487348, &qword_100487328);
  RadioResourceControls.update<A>(from:to:)((uint64_t)v6, (uint64_t)v4, AssociatedTypeWitness, v12, v14, (uint64_t)&off_100469C00, v15, v16);
  sub_1000380B4((uint64_t)v4, &qword_100487330);
  sub_1000380B4((uint64_t)v6, &qword_100487330);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v10, AssociatedTypeWitness);
}

uint64_t sub_100337D54(uint64_t a1)
{
  sub_100010BCC(&qword_100487328);
  __chkstk_darwin();
  uint64_t v4 = &v7[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = v1 + *(void *)(*(void *)v1 + 552);
  swift_beginAccess();
  sub_1000136F4(v5, (uint64_t)v4, &qword_100487328);
  swift_beginAccess();
  sub_10033F934(a1, v5);
  swift_endAccess();
  sub_100337510((uint64_t)v4);
  sub_1000380B4(a1, &qword_100487328);
  return sub_1000380B4((uint64_t)v4, &qword_100487328);
}

uint64_t (*sub_100337E5C(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v13 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v13 - v8, a1, AssociatedTypeWitness);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, v9, AssociatedTypeWitness);
  return sub_10033FF0C;
}

uint64_t sub_100337FAC(uint64_t a1)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 104);
  uint64_t v4 = swift_checkMetadataState();
  return v3(a1, v4, AssociatedConformanceWitness);
}

uint64_t sub_10033806C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1) {
    return WiFiNetwork.description.getter(*(void *)a1, v1, *(void *)(a1 + 16) & 0xFFFFFFFFFFFFLL, *(unsigned int *)(a1 + 24) | ((unint64_t)*(unsigned __int16 *)(a1 + 28) << 32));
  }
  else {
    return 0x6F73736120746F6ELL;
  }
}

uint64_t sub_1003380CC(uint64_t *a1)
{
  if (a1[1]) {
    uint64_t v1 = *a1;
  }
  else {
    uint64_t v1 = 1701736302;
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_100338118(unsigned int *a1)
{
  unint64_t v1 = *a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32);
  if ((v1 & 0xFF00000000) == 0x300000000) {
    return 1701736302;
  }
  else {
    return Channel.description.getter(v1);
  }
}

uint64_t sub_100338160(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_bridgeObjectRetain();
    sub_100337434(a1, a2);
    return swift_release();
  }
  return result;
}

uint64_t sub_1003381DC()
{
  sub_1000380B4(v0 + *(void *)(*(void *)v0 + 424), &qword_100487358);
  swift_release();
  sub_1000380B4(v0 + *(void *)(*(void *)v0 + 440), (uint64_t *)&unk_100488350);
  sub_1000380B4(v0 + *(void *)(*(void *)v0 + 448), qword_100486430);
  sub_1000380B4(v0 + *(void *)(*(void *)v0 + 456), qword_100487A90);
  sub_1000380B4(v0 + *(void *)(*(void *)v0 + 464), &qword_10047DB90);
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 472);
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(v1, v2);
  swift_release();
  sub_1000380B4(v0 + *(void *)(*(void *)v0 + 488), &qword_100487350);
  sub_1000380B4(v0 + *(void *)(*(void *)v0 + 496), &qword_10047DB90);
  v3(v0 + *(void *)(*(void *)v0 + 504), v2);
  swift_release();
  sub_1000380B4(v0 + *(void *)(*(void *)v0 + 520), (uint64_t *)&unk_100488350);
  sub_1000380B4(v0 + *(void *)(*(void *)v0 + 528), (uint64_t *)&unk_100487D30);
  sub_1000380B4(v0 + *(void *)(*(void *)v0 + 536), (uint64_t *)&unk_100487A70);
  sub_1000380B4(v0 + *(void *)(*(void *)v0 + 544), (uint64_t *)&unk_100487360);
  return sub_1000380B4(v0 + *(void *)(*(void *)v0 + 552), &qword_100487328);
}

uint64_t sub_100338490()
{
  swift_getAssociatedTypeWitness();
  uint64_t v0 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 16);
  uint64_t v2 = swift_checkMetadataState();
  v1(v2, v0);
  (*(void (**)(uint64_t, uint64_t))(v0 + 48))(v2, v0);
  uint64_t v3 = WiFiInterface.deinit();
  sub_1000380B4(v3 + *(void *)(*(void *)v3 + 424), &qword_100487358);
  swift_release();
  sub_1000380B4(v3 + *(void *)(*(void *)v3 + 440), (uint64_t *)&unk_100488350);
  sub_1000380B4(v3 + *(void *)(*(void *)v3 + 448), qword_100486430);
  sub_1000380B4(v3 + *(void *)(*(void *)v3 + 456), qword_100487A90);
  sub_1000380B4(v3 + *(void *)(*(void *)v3 + 464), &qword_10047DB90);
  uint64_t v4 = v3 + *(void *)(*(void *)v3 + 472);
  uint64_t v5 = type metadata accessor for DispatchTimeInterval();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  swift_release();
  sub_1000380B4(v3 + *(void *)(*(void *)v3 + 488), &qword_100487350);
  sub_1000380B4(v3 + *(void *)(*(void *)v3 + 496), &qword_10047DB90);
  v6(v3 + *(void *)(*(void *)v3 + 504), v5);
  swift_release();
  sub_1000380B4(v3 + *(void *)(*(void *)v3 + 520), (uint64_t *)&unk_100488350);
  sub_1000380B4(v3 + *(void *)(*(void *)v3 + 528), (uint64_t *)&unk_100487D30);
  sub_1000380B4(v3 + *(void *)(*(void *)v3 + 536), (uint64_t *)&unk_100487A70);
  sub_1000380B4(v3 + *(void *)(*(void *)v3 + 544), (uint64_t *)&unk_100487360);
  sub_1000380B4(v3 + *(void *)(*(void *)v3 + 552), &qword_100487328);
  return v3;
}

uint64_t sub_100338828()
{
  sub_100338490();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for InfrastructureWiFiInterface()
{
  return sub_100038354();
}

uint64_t sub_1003388D8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v35 = sub_100010BCC(&qword_100487328);
  __chkstk_darwin();
  int v34 = &v31[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = &v31[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  uint64_t v9 = &v31[-v8];
  __chkstk_darwin();
  uint64_t v11 = &v31[-v10];
  sub_1003371B8(1);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v11, (uint64_t)v0 + *(void *)(*v0 + 504), v4);
  id v33 = (id)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v12 = swift_allocObject();
  swift_weakInit();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = *(void *)(v2 + 408);
  *(void *)(v18 + 24) = *(void *)(v2 + 416);
  *(void *)(v18 + 32) = v12;
  uint64_t v13 = *(void (**)(unsigned char *, void, uint64_t))(v5 + 104);
  v13(v9, enum case for DispatchTimeInterval.never(_:), v4);
  *uint64_t v7 = 100;
  v13(v7, enum case for DispatchTimeInterval.milliseconds(_:), v4);
  type metadata accessor for P2PTimer();
  swift_allocObject();
  *(uint64_t *)((char *)v1 + *(void *)(*v1 + 512)) = P2PTimer.init(deadlineAfter:on:repeating:leeway:_:)((uint64_t)v11, v33, (uint64_t)v9, (uint64_t)v7, (uint64_t)sub_10033F928, v18);
  swift_release();
  uint64_t v14 = (uint64_t)v1 + *(void *)(*v1 + 552);
  swift_beginAccess();
  uint64_t v15 = v14 + *(int *)(v35 + 36);
  unint64_t v16 = *(unsigned int *)(v15 + 16) | ((unint64_t)*(unsigned __int16 *)(v15 + 20) << 32);
  unint64_t v17 = *(unsigned int *)(v15 + 24) | ((unint64_t)*(unsigned __int16 *)(v15 + 28) << 32);
  LODWORD(v18) = *(unsigned __int8 *)(v15 + 30);
  LODWORD(v33) = *(unsigned __int8 *)(v15 + 31);
  uint64_t v19 = swift_bridgeObjectRetain();
  uint64_t v20 = sub_10033D9A0(v19);
  swift_bridgeObjectRelease();
  uint64_t v21 = *(void *)(v20 + 16);
  swift_bridgeObjectRelease();
  uint64_t v22 = swift_bridgeObjectRetain();
  uint64_t v23 = sub_10033DAB0(v22);
  swift_bridgeObjectRelease();
  uint64_t v24 = *(void *)(v23 + 16);
  swift_bridgeObjectRelease();
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (_DWORD *)swift_slowAlloc();
    int v32 = v18;
    uint64_t v18 = (uint64_t)v27;
    *uint64_t v27 = 134218240;
    uint64_t v36 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v18 + 12) = 2048;
    uint64_t v36 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Infra scan started (2.4GHz: %ld 5GHz: %ld)", (uint8_t *)v18, 0x16u);
    LOBYTE(v18) = v32;
    swift_slowDealloc();
  }

  uint64_t v28 = v34;
  sub_1000136F4(v14, (uint64_t)v34, &qword_100487328);
  uint64_t v29 = &v28[*(int *)(v35 + 36)];
  *(void *)uint64_t v29 = v21;
  *((void *)v29 + 1) = v24;
  *((_WORD *)v29 + 10) = WORD2(v16);
  *((_DWORD *)v29 + 4) = v16;
  *((_WORD *)v29 + 14) = WORD2(v17);
  *((_DWORD *)v29 + 6) = v17;
  v29[30] = v18;
  v29[31] = (_BYTE)v33;
  return sub_100337D54((uint64_t)v28);
}

uint64_t sub_100338D78()
{
  uint64_t v0 = type metadata accessor for DispatchTimeInterval();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v48 = (char *)v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v4 = (char *)v39 - v3;
  __chkstk_darwin();
  uint64_t v6 = (char *)v39 - v5;
  sub_100010BCC(&qword_10047DB90);
  __chkstk_darwin();
  uint64_t v8 = (char *)v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchTime();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v14 = (char *)v39 - v13;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v16 = result;
    uint64_t v47 = v0;
    uint64_t v17 = v1;
    uint64_t v18 = result + *(void *)(*(void *)result + 496);
    swift_beginAccess();
    sub_1000136F4(v18, (uint64_t)v8, &qword_10047DB90);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    {
      swift_release();
      return sub_1000380B4((uint64_t)v8, &qword_10047DB90);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v14, v8, v9);
      type metadata accessor for P2PTimer();
      variable initialization expression of AWDLPeer.lastUpdated();
      DispatchTime.distance(to:)();
      uint64_t v45 = *(void (**)(char *, uint64_t))(v10 + 8);
      v45(v12, v9);
      sub_100339320(1);
      uint64_t v19 = v17;
      uint64_t v20 = *(void (**)(char *, uint64_t))(v17 + 16);
      uint64_t v46 = v6;
      uint64_t v21 = v47;
      os_log_type_t v44 = v20;
      ((void (*)(char *, char *, uint64_t))v20)(v4, v6, v47);
      swift_retain_n();
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.error.getter();
      int v24 = v23;
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v25 = swift_slowAlloc();
        int v42 = v24;
        uint64_t v26 = v19;
        uint64_t v27 = v25;
        uint64_t v43 = swift_slowAlloc();
        uint64_t v50 = v43;
        *(_DWORD *)uint64_t v27 = 136315394;
        uint64_t v40 = (char *)(v27 + 4);
        os_log_t v41 = v22;
        uint64_t v28 = DispatchTimeInterval.description.getter();
        uint64_t v49 = sub_100010680(v28, v29, &v50);
        v39[1] = &v50;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v30 = *(void (**)(char *, uint64_t))(v26 + 8);
        v30(v4, v21);
        *(_WORD *)(v27 + 12) = 2080;
        v39[0] = v27 + 14;
        uint64_t v31 = v16 + *(void *)(*(void *)v16 + 504);
        int v32 = v48;
        uint64_t v40 = v14;
        v44(v48, v31);
        swift_release();
        uint64_t v33 = DispatchTimeInterval.description.getter();
        unint64_t v35 = v34;
        v30(v32, v21);
        uint64_t v49 = sub_100010680(v33, v35, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        os_log_t v36 = v41;
        _os_log_impl((void *)&_mh_execute_header, v41, (os_log_type_t)v42, "Infra scan has timed out, revoked infra scan availability, scan on going for %s, maximum allowed %s", (uint8_t *)v27, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_release();

        v30(v46, v21);
        uint64_t v37 = v40;
      }
      else
      {

        swift_release_n();
        uint64_t v38 = *(void (**)(char *, uint64_t))(v19 + 8);
        v38(v4, v21);
        swift_release();
        v38(v46, v21);
        uint64_t v37 = v14;
      }
      return ((uint64_t (*)(char *, uint64_t))v45)(v37, v9);
    }
  }
  return result;
}

void sub_100339320(int a1)
{
  uint64_t v2 = v1;
  int v61 = a1;
  uint64_t v62 = sub_100010BCC(&qword_100487328);
  __chkstk_darwin();
  uint64_t v60 = (uint64_t)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  uint64_t v58 = *(void *)(v4 - 8);
  uint64_t v59 = v4;
  __chkstk_darwin();
  uint64_t v6 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_10047DB90);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchTime();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v52 - v13;
  __chkstk_darwin();
  uint64_t v16 = (char *)&v52 - v15;
  uint64_t v17 = v2 + *(void *)(*(void *)v2 + 496);
  swift_beginAccess();
  sub_1000136F4(v17, (uint64_t)v8, &qword_10047DB90);
  uint64_t v18 = v10;
  uint64_t v19 = v9;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_1000380B4((uint64_t)v8, &qword_10047DB90);
LABEL_7:
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      int v42 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)int v42 = 16777472;
      LOBYTE(v64[0]) = v61;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Ignoring scan end event because no scan in progress with status: %hhu", v42, 5u);
      swift_slowDealloc();
    }

    return;
  }
  uint64_t v20 = v12;
  uint64_t v57 = v6;
  uint64_t v21 = v62;
  uint64_t v22 = v19;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v16, v8, v19);
  char v23 = sub_1003370DC();
  int v24 = v16;
  if ((v23 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v19);
    goto LABEL_7;
  }
  uint64_t v25 = *(void (**)(char *))(v10 + 16);
  uint64_t v26 = v14;
  unsigned int v56 = v24;
  v25(v14);
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  int v29 = v28;
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v30 = swift_slowAlloc();
    uint64_t v55 = swift_slowAlloc();
    v64[0] = v55;
    *(_DWORD *)uint64_t v30 = 136315394;
    uint64_t v52 = v30 + 4;
    type metadata accessor for P2PTimer();
    int v54 = v29;
    os_log_t v53 = v27;
    variable initialization expression of AWDLPeer.lastUpdated();
    uint64_t v31 = v57;
    DispatchTime.distance(to:)();
    int v32 = *(void (**)(char *, uint64_t))(v10 + 8);
    v32(v20, v22);
    uint64_t v33 = DispatchTimeInterval.description.getter();
    unint64_t v35 = v34;
    (*(void (**)(char *, uint64_t))(v58 + 8))(v31, v59);
    uint64_t v63 = sub_100010680(v33, v35, v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_t v36 = v26;
    uint64_t v37 = v32;
    uint64_t v38 = v62;
    v32(v36, v22);
    *(_WORD *)(v30 + 12) = 256;
    LOBYTE(v63) = v61;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    os_log_t v39 = v53;
    _os_log_impl((void *)&_mh_execute_header, v53, (os_log_type_t)v54, "Infra scan complete (duration: %s), status: %hhu)", (uint8_t *)v30, 0xFu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v38 = v21;

    uint64_t v37 = *(void (**)(char *, uint64_t))(v18 + 8);
    v37(v14, v22);
  }
  *(void *)(v2 + *(void *)(*(void *)v2 + 512)) = 0;
  swift_release();
  sub_1003371B8(0);
  uint64_t v43 = v2 + *(void *)(*(void *)v2 + 552);
  swift_beginAccess();
  uint64_t v44 = v43 + *(int *)(v38 + 36);
  int v45 = *(_DWORD *)(v44 + 16);
  __int16 v46 = *(_WORD *)(v44 + 20);
  int v48 = *(_DWORD *)(v44 + 24);
  int v47 = *(_DWORD *)(v44 + 28);
  uint64_t v49 = v43;
  uint64_t v50 = v60;
  sub_1000136F4(v49, v60, &qword_100487328);
  uint64_t v51 = v50 + *(int *)(v38 + 36);
  *(void *)uint64_t v51 = 0;
  *(void *)(v51 + 8) = 0;
  *(_WORD *)(v51 + 20) = v46;
  *(_DWORD *)(v51 + 16) = v45;
  *(_DWORD *)(v51 + 24) = v48;
  *(_DWORD *)(v51 + 28) = v47;
  sub_100337D54(v50);
  v37(v56, v22);
}

void sub_10033998C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = type metadata accessor for DispatchTimeInterval();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v22 - v9;
  __chkstk_darwin();
  uint64_t v12 = (char *)&v22 - v11;
  uint64_t v23 = a1 & 0xFFFFFFFFFFFFLL;
  sub_100336E2C(a1 & 0xFFFFFFFFFFFFLL);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v12, (uint64_t)v1 + *(void *)(*v1 + 472), v5);
  uint64_t v13 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v14 = swift_allocObject();
  swift_weakInit();
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = *(void *)(v4 + 408);
  v15[3] = *(void *)(v4 + 416);
  v15[4] = v14;
  uint64_t v16 = *(void (**)(char *, void, uint64_t))(v6 + 104);
  v16(v10, enum case for DispatchTimeInterval.never(_:), v5);
  *(void *)uint64_t v8 = 100;
  v16(v8, enum case for DispatchTimeInterval.milliseconds(_:), v5);
  type metadata accessor for P2PTimer();
  swift_allocObject();
  *(uint64_t *)((char *)v2 + *(void *)(*v2 + 480)) = P2PTimer.init(deadlineAfter:on:repeating:leeway:_:)((uint64_t)v12, v13, (uint64_t)v10, (uint64_t)v8, (uint64_t)sub_10033F91C, (uint64_t)v15);
  swift_release();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 136315138;
    uint64_t v20 = Channel.description.getter(v23);
    uint64_t v24 = sub_100010680(v20, v21, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Infra association started on channel %s", v19, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
}

uint64_t sub_100339D0C()
{
  uint64_t v0 = type metadata accessor for DispatchTimeInterval();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v52 = (char *)v42 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v4 = (char *)v42 - v3;
  __chkstk_darwin();
  uint64_t v6 = (char *)v42 - v5;
  sub_100010BCC(&qword_10047DB90);
  __chkstk_darwin();
  uint64_t v8 = (char *)v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchTime();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v14 = (char *)v42 - v13;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v16 = result;
    uint64_t v50 = v1;
    uint64_t v51 = v0;
    uint64_t v17 = result + *(void *)(*(void *)result + 464);
    swift_beginAccess();
    sub_1000136F4(v17, (uint64_t)v8, &qword_10047DB90);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    {
      swift_release();
      return sub_1000380B4((uint64_t)v8, &qword_10047DB90);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v14, v8, v9);
      unint64_t v18 = sub_100336D48();
      if ((v18 & 0xFF00000000) == 0x300000000)
      {
        (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
        return swift_release();
      }
      else
      {
        uint64_t v19 = v18;
        type metadata accessor for P2PTimer();
        variable initialization expression of AWDLPeer.lastUpdated();
        uint64_t v20 = v6;
        DispatchTime.distance(to:)();
        unint64_t v21 = *(void (**)(char *, uint64_t))(v10 + 8);
        v21(v12, v9);
        sub_10033F644();
        uint64_t v22 = v50;
        int v47 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
        uint64_t v48 = v50 + 16;
        v47(v4, v20, v51);
        swift_retain_n();
        uint64_t v23 = Logger.logObject.getter();
        os_log_type_t v24 = static os_log_type_t.error.getter();
        int v49 = v24;
        if (os_log_type_enabled(v23, v24))
        {
          uint64_t v25 = swift_slowAlloc();
          __int16 v46 = v20;
          uint64_t v26 = v25;
          uint64_t v45 = swift_slowAlloc();
          uint64_t v54 = v45;
          *(_DWORD *)uint64_t v26 = 136315650;
          os_log_t v44 = v23;
          uint64_t v27 = Channel.description.getter(v19);
          uint64_t v53 = sub_100010680(v27, v28, &v54);
          v42[2] = &v54;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v26 + 12) = 2080;
          uint64_t v29 = DispatchTimeInterval.description.getter();
          uint64_t v53 = sub_100010680(v29, v30, &v54);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v50 = *(void *)(v50 + 8);
          uint64_t v31 = v4;
          uint64_t v32 = v51;
          ((void (*)(char *, uint64_t))v50)(v31, v51);
          *(_WORD *)(v26 + 22) = 2080;
          v42[1] = v26 + 24;
          uint64_t v33 = v16 + *(void *)(*(void *)v16 + 472);
          uint64_t v43 = (uint64_t (*)(char *, uint64_t))v21;
          unint64_t v34 = v52;
          v47(v52, (char *)v33, v32);
          swift_release();
          uint64_t v35 = DispatchTimeInterval.description.getter();
          unint64_t v37 = v36;
          ((void (*)(char *, uint64_t))v50)(v34, v32);
          uint64_t v53 = sub_100010680(v35, v37, &v54);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_bridgeObjectRelease();
          os_log_t v38 = v44;
          _os_log_impl((void *)&_mh_execute_header, v44, (os_log_type_t)v49, "Infra association has timed out, revoked infra association availability on channel %s, on going for %s, maximum allowed %s", (uint8_t *)v26, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          swift_release();

          ((void (*)(char *, uint64_t))v50)(v46, v32);
          return v43(v14, v9);
        }
        else
        {

          swift_release_n();
          os_log_t v39 = *(void (**)(char *, uint64_t))(v22 + 8);
          uint64_t v40 = v4;
          uint64_t v41 = v51;
          v39(v40, v51);
          swift_release();
          v39(v20, v41);
          return ((uint64_t (*)(char *, uint64_t))v21)(v14, v9);
        }
      }
    }
  }
  return result;
}

unint64_t sub_10033A340(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v50 = a3;
  uint64_t v6 = type metadata accessor for DispatchTimeInterval();
  uint64_t v48 = *(void *)(v6 - 8);
  uint64_t v49 = v6;
  __chkstk_darwin();
  uint64_t v8 = (char *)v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_10047DB90);
  __chkstk_darwin();
  uint64_t v10 = (char *)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchTime();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v16 = (char *)v42 - v15;
  __chkstk_darwin();
  uint64_t v51 = (char *)v42 - v17;
  unint64_t result = sub_100336D48();
  if ((result & 0xFF00000000) != 0x300000000)
  {
    uint64_t v19 = result;
    uint64_t v20 = v3 + *(void *)(*(void *)v3 + 464);
    swift_beginAccess();
    sub_1000136F4(v20, (uint64_t)v10, &qword_10047DB90);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
    {
      return sub_1000380B4((uint64_t)v10, &qword_10047DB90);
    }
    else
    {
      uint64_t v21 = v11;
      uint64_t v22 = v51;
      uint64_t v23 = v10;
      uint64_t v24 = v21;
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v51, v23, v21);
      unint64_t v46 = HIDWORD(a2);
      uint64_t v47 = v24;
      if (HIDWORD(a2))
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v16, v22, v24);
        swift_bridgeObjectRetain_n();
        uint64_t v25 = Logger.logObject.getter();
        os_log_type_t v26 = static os_log_type_t.error.getter();
        int v45 = v26;
        if (os_log_type_enabled(v25, v26))
        {
          uint64_t v27 = swift_slowAlloc();
          uint64_t v44 = swift_slowAlloc();
          uint64_t v53 = v44;
          *(_DWORD *)uint64_t v27 = 136315650;
          os_log_t v43 = v25;
          uint64_t v28 = Channel.description.getter(v19);
          uint64_t v52 = sub_100010680(v28, v29, &v53);
          v42[1] = &v53;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v27 + 12) = 1024;
          swift_bridgeObjectRelease();
          LODWORD(v52) = v46;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v27 + 18) = 2080;
          uint64_t v50 = v27 + 20;
          type metadata accessor for P2PTimer();
          variable initialization expression of AWDLPeer.lastUpdated();
          DispatchTime.distance(to:)();
          unint64_t v30 = *(void (**)(char *, uint64_t))(v12 + 8);
          uint64_t v31 = v47;
          v30(v14, v47);
          uint64_t v32 = DispatchTimeInterval.description.getter();
          unint64_t v34 = v33;
          (*(void (**)(char *, uint64_t))(v48 + 8))(v8, v49);
          uint64_t v52 = sub_100010680(v32, v34, &v53);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v30(v16, v31);
          os_log_t v35 = v43;
          _os_log_impl((void *)&_mh_execute_header, v43, (os_log_type_t)v45, "Infra association failed on %s with status code %u (duration: %s)", (uint8_t *)v27, 0x1Cu);
          swift_arrayDestroy();
          swift_slowDealloc();
          unint64_t v36 = v51;
          swift_slowDealloc();
        }
        else
        {
          unint64_t v36 = v22;

          swift_bridgeObjectRelease_n();
          unint64_t v30 = *(void (**)(char *, uint64_t))(v12 + 8);
          uint64_t v31 = v47;
          v30(v16, v47);
        }
        *(void *)(v4 + *(void *)(*(void *)v4 + 480)) = 0;
        swift_release();
        sub_100336E2C(0x300000000);
        return ((uint64_t (*)(char *, uint64_t))v30)(v36, v31);
      }
      else
      {
        unint64_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v37, v38))
        {
          os_log_t v39 = (uint8_t *)swift_slowAlloc();
          uint64_t v53 = swift_slowAlloc();
          *(_DWORD *)os_log_t v39 = 136315138;
          uint64_t v40 = Channel.description.getter(v19);
          uint64_t v52 = sub_100010680(v40, v41, &v53);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "Infra association on %s handshake complete, waiting for IP address", v39, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }

        return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v22, v47);
      }
    }
  }
  return result;
}

unint64_t sub_10033A99C(int a1)
{
  uint64_t v2 = v1;
  LODWORD(v49) = a1;
  uint64_t v3 = type metadata accessor for DispatchTimeInterval();
  uint64_t v48 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v47 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_10047DB90);
  __chkstk_darwin();
  uint64_t v6 = (char *)v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchTime();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v12 = (char *)v40 - v11;
  __chkstk_darwin();
  uint64_t v14 = (char *)v40 - v13;
  unint64_t result = sub_100336D48();
  if ((result & 0xFF00000000) != 0x300000000)
  {
    uint64_t v16 = result;
    uint64_t v17 = v1 + *(void *)(*(void *)v1 + 464);
    swift_beginAccess();
    sub_1000136F4(v17, (uint64_t)v6, &qword_10047DB90);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      return sub_1000380B4((uint64_t)v6, &qword_10047DB90);
    }
    else
    {
      uint64_t v46 = v3;
      int v18 = v49;
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v14, v6, v7);
      if (v18)
      {
        (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v12, v14, v7);
        uint64_t v19 = Logger.logObject.getter();
        os_log_type_t v20 = static os_log_type_t.error.getter();
        int v21 = v20;
        if (os_log_type_enabled(v19, v20))
        {
          int v44 = v21;
          char v22 = v49;
          int v41 = BYTE1(v49);
          uint64_t v23 = swift_slowAlloc();
          int v45 = v14;
          uint64_t v24 = v23;
          uint64_t v43 = swift_slowAlloc();
          uint64_t v51 = v43;
          *(_DWORD *)uint64_t v24 = 136315906;
          uint64_t v25 = Channel.description.getter(v16);
          os_log_t v42 = v19;
          uint64_t v50 = sub_100010680(v25, v26, &v51);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v24 + 12) = 2080;
          unint64_t v27 = IEEE80211Status.description.getter(v22);
          uint64_t v50 = sub_100010680(v27, v28, &v51);
          v40[1] = &v51;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v24 + 22) = 2080;
          unint64_t v29 = IEEE80211Reason.description.getter(v41);
          uint64_t v50 = sub_100010680(v29, v30, &v51);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v24 + 32) = 2080;
          uint64_t v49 = v24 + 34;
          type metadata accessor for P2PTimer();
          variable initialization expression of AWDLPeer.lastUpdated();
          uint64_t v31 = v47;
          DispatchTime.distance(to:)();
          uint64_t v32 = *(void (**)(char *, uint64_t))(v8 + 8);
          v32(v10, v7);
          uint64_t v33 = DispatchTimeInterval.description.getter();
          unint64_t v35 = v34;
          (*(void (**)(char *, uint64_t))(v48 + 8))(v31, v46);
          uint64_t v50 = sub_100010680(v33, v35, &v51);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v32(v12, v7);
          os_log_t v36 = v42;
          _os_log_impl((void *)&_mh_execute_header, v42, (os_log_type_t)v44, "Infra association failed on %s with status code %s reason: %s (duration: %s)", (uint8_t *)v24, 0x2Au);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v14 = v45;
          swift_slowDealloc();
        }
        else
        {

          uint64_t v32 = *(void (**)(char *, uint64_t))(v8 + 8);
          v32(v12, v7);
        }
        *(void *)(v2 + *(void *)(*(void *)v2 + 480)) = 0;
        swift_release();
        sub_100336E2C(0x300000000);
        return ((uint64_t (*)(char *, uint64_t))v32)(v14, v7);
      }
      else
      {
        unint64_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v37, v38))
        {
          os_log_t v39 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)os_log_t v39 = 0;
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "Infra association complete", v39, 2u);
          swift_slowDealloc();
        }

        return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v14, v7);
      }
    }
  }
  return result;
}

unint64_t sub_10033AFAC()
{
  *(void *)(v0 + *(void *)(*(void *)v0 + 480)) = 0;
  swift_release();

  return sub_100336E2C(0x300000000);
}

uint64_t sub_10033AFF4(uint64_t result)
{
  uint64_t v2 = *v1;
  if (result)
  {
    if (result >= 1 && !*(uint64_t *)((char *)v1 + *(void *)(v2 + 560)))
    {
      swift_retain();
      uint64_t v3 = Logger.logObject.getter();
      os_log_type_t v4 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v3, v4))
      {
        uint64_t v5 = (uint8_t *)swift_slowAlloc();
        uint64_t v19 = swift_slowAlloc();
        *(_DWORD *)uint64_t v5 = 136315138;
        uint64_t v6 = WiFiInterface.description.getter();
        sub_100010680(v6, v7, &v19);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s enabling auto-join", v5, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release();
      }

      swift_getAssociatedTypeWitness();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48);
      uint64_t v18 = swift_checkMetadataState();
      return v17(v18, AssociatedConformanceWitness);
    }
  }
  else if (*(uint64_t *)((char *)v1 + *(void *)(v2 + 560)) >= 1)
  {
    swift_retain();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315138;
      uint64_t v11 = WiFiInterface.description.getter();
      sub_100010680(v11, v12, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s disabling auto-join", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release();
    }

    swift_getAssociatedTypeWitness();
    uint64_t v13 = swift_getAssociatedConformanceWitness();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 40);
    uint64_t v15 = swift_checkMetadataState();
    return v14(v15, v13);
  }
  return result;
}

uint64_t sub_10033B3D0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 560);
  uint64_t v3 = *(void *)(v1 + v2);
  *(void *)(v1 + v2) = a1;
  return sub_10033AFF4(v3);
}

uint64_t sub_10033B3F4()
{
  return sub_10033B47C((uint64_t)sub_10033F8A4, (uint64_t)&unk_10046EEC0);
}

uint64_t sub_10033B414(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)a1 + 560);
  uint64_t result = *(void *)(a1 + v2);
  if (result >= 1)
  {
    *(void *)(a1 + v2) = result - 1;
    return sub_10033AFF4(result);
  }
  return result;
}

uint64_t sub_10033B45C()
{
  return sub_10033B47C((uint64_t)sub_10033F89C, (uint64_t)&unk_10046EE98);
}

uint64_t sub_10033B47C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[0] = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v16[0] - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
  aBlock[4] = a1;
  uint64_t v18 = v2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E5D0;
  uint64_t aBlock[3] = a2;
  uint64_t v13 = _Block_copy(aBlock);
  id v14 = v12;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v16[1] = _swiftEmptyArrayStorage;
  sub_100014390();
  sub_100010BCC((uint64_t *)&unk_10047D0F0);
  sub_10000F9CC((unint64_t *)&qword_1004807B0, (uint64_t *)&unk_10047D0F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, void))(v9 + 8))(v11, v16[0]);
  return swift_release();
}

uint64_t sub_10033B6EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)a1 + 560);
  uint64_t result = *(void *)(a1 + v2);
  if (__OFADD__(result, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(a1 + v2) = result + 1;
    return sub_10033AFF4(result);
  }
  return result;
}

uint64_t sub_10033B738(char a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v17[0] - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a2;
  *(unsigned char *)(v13 + 24) = a1;
  *(void *)(v13 + 32) = v2;
  aBlock[4] = sub_10033F88C;
  void aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E5D0;
  uint64_t aBlock[3] = &unk_10046EE70;
  id v14 = _Block_copy(aBlock);
  id v15 = v12;
  swift_bridgeObjectRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v17[1] = _swiftEmptyArrayStorage;
  sub_100014390();
  sub_100010BCC((uint64_t *)&unk_10047D0F0);
  sub_10000F9CC((unint64_t *)&qword_1004807B0, (uint64_t *)&unk_10047D0F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, void))(v9 + 8))(v11, v17[0]);
  return swift_release();
}

uint64_t sub_10033B9E8(uint64_t a1, char a2, uint64_t a3)
{
  unint64_t v29 = &_swiftEmptySetSingleton;
  if (!*(void *)(a1 + 16)) {
    goto LABEL_31;
  }
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  unint64_t v8 = v6 & ~v7;
  uint64_t v9 = a1 + 56;
  if ((*(void *)(a1 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    uint64_t v10 = ~v7;
    while (2)
    {
      switch(*(unsigned char *)(*(void *)(a1 + 48) + v8))
      {
        case 1:
        case 2:
        case 3:
        case 4:
          char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v11) {
            goto LABEL_9;
          }
          unint64_t v8 = (v8 + 1) & v10;
          if (((*(void *)(v9 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
            break;
          }
          continue;
        default:
          swift_bridgeObjectRelease();
LABEL_9:
          uint64_t v12 = *(void *)(*(void *)a3 + 568);
          uint64_t v13 = *(void *)(a3 + v12);
          if (a2)
          {
            if (__OFADD__(v13, 1))
            {
              __break(1u);
              goto LABEL_37;
            }
            *(void *)(a3 + v12) = v13 + 1;
            if (!v13) {
              goto LABEL_15;
            }
          }
          else if (v13 > 0)
          {
            uint64_t v14 = v13 - 1;
            *(void *)(a3 + v12) = v14;
            if (!v14)
            {
LABEL_15:
              sub_1003A596C(v28, 0);
              goto LABEL_16;
            }
          }
          break;
      }
      break;
    }
  }
LABEL_16:
  if (!*(void *)(a1 + 16)) {
    goto LABEL_31;
  }
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v15 = Hasher._finalize()();
  uint64_t v16 = -1 << *(unsigned char *)(a1 + 32);
  unint64_t v17 = v15 & ~v16;
  if (((*(void *)(v9 + ((v17 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v17) & 1) == 0) {
    goto LABEL_31;
  }
  uint64_t v18 = ~v16;
  while (2)
  {
    switch(*(unsigned char *)(*(void *)(a1 + 48) + v17))
    {
      case 3:
        swift_bridgeObjectRelease();
        goto LABEL_24;
      default:
        char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v19 & 1) == 0)
        {
          unint64_t v17 = (v17 + 1) & v18;
          if (((*(void *)(v9 + ((v17 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v17) & 1) == 0) {
            goto LABEL_31;
          }
          continue;
        }
LABEL_24:
        uint64_t v20 = *(void *)(*(void *)a3 + 576);
        uint64_t v21 = *(void *)(a3 + v20);
        if (a2)
        {
          if (!__OFADD__(v21, 1))
          {
            *(void *)(a3 + v20) = v21 + 1;
            if (!v21) {
              goto LABEL_30;
            }
            goto LABEL_31;
          }
LABEL_37:
          __break(1u);
          JUMPOUT(0x10033BE8CLL);
        }
        if (v21 > 0)
        {
          uint64_t v22 = v21 - 1;
          *(void *)(a3 + v20) = v22;
          if (!v22) {
LABEL_30:
          }
            sub_1003A596C(v28, 3);
        }
LABEL_31:
        uint64_t v23 = v29;
        if (v29[2])
        {
          swift_getAssociatedTypeWitness();
          uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
          uint64_t v25 = *(void (**)(void, void *, uint64_t, uint64_t))(AssociatedConformanceWitness + 56);
          uint64_t v26 = swift_checkMetadataState();
          v25(a2 & 1, v23, v26, AssociatedConformanceWitness);
        }
        return swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_10033BEB4(uint64_t result)
{
  uint64_t v2 = *(unsigned __int8 *)(v1 + *(void *)(*(void *)v1 + 592));
  if (v2 != 3 && result == 3)
  {
    swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 32);
    uint64_t v6 = swift_checkMetadataState();
    return v5(v2, v6, AssociatedConformanceWitness);
  }
  return result;
}

uint64_t sub_10033BFB4(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 592);
  uint64_t v3 = *(unsigned __int8 *)(v1 + v2);
  *(unsigned char *)(v1 + v2) = a1;
  return sub_10033BEB4(v3);
}

uint64_t sub_10033BFD8(char a1)
{
  return sub_10033C50C(a1, (uint64_t)&unk_10046EE08, (uint64_t)sub_10033F840, (uint64_t)&unk_10046EE20);
}

uint64_t sub_10033C000(uint64_t a1, char a2)
{
  uint64_t v3 = *(void *)(*(void *)a1 + 560);
  uint64_t result = *(void *)(a1 + v3);
  if (__OFADD__(result, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(a1 + v3) = result + 1;
    sub_10033AFF4(result);
    uint64_t v6 = *(void *)(*(void *)a1 + 592);
    uint64_t v7 = *(unsigned __int8 *)(a1 + v6);
    *(unsigned char *)(a1 + v6) = a2;
    uint64_t result = sub_10033BEB4(v7);
    uint64_t v8 = *(void *)(*(void *)a1 + 584);
    uint64_t v9 = *(void *)(a1 + v8);
    BOOL v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (!v10)
    {
      *(void *)(a1 + v8) = v11;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10033C098()
{
  return sub_10033B47C((uint64_t)sub_10033F838, (uint64_t)&unk_10046EDD0);
}

uint64_t sub_10033C0B8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 584);
  uint64_t v4 = *(uint64_t *)((char *)a1 + v3);
  if (v4 >= 1)
  {
    *(uint64_t *)((char *)a1 + v3) = v4 - 1;
    uint64_t v2 = *a1;
    --v4;
  }
  if (!v4)
  {
    uint64_t v5 = *(void *)(v2 + 592);
    uint64_t v6 = *((unsigned __int8 *)a1 + v5);
    *((unsigned char *)a1 + v5) = 3;
    sub_10033BEB4(v6);
    uint64_t v2 = *a1;
  }
  uint64_t v7 = *(void *)(v2 + 560);
  uint64_t result = *(uint64_t *)((char *)a1 + v7);
  if (result >= 1)
  {
    *(uint64_t *)((char *)a1 + v7) = result - 1;
    return sub_10033AFF4(result);
  }
  return result;
}

uint64_t sub_10033C15C(char a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v15[0] - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v10 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v1;
  *(unsigned char *)(v11 + 24) = a1;
  aBlock[4] = sub_10033F82C;
  void aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E5D0;
  uint64_t aBlock[3] = &unk_10046EDA8;
  uint64_t v12 = _Block_copy(aBlock);
  id v13 = v10;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v15[1] = _swiftEmptyArrayStorage;
  sub_100014390();
  sub_100010BCC((uint64_t *)&unk_10047D0F0);
  sub_10000F9CC((unint64_t *)&qword_1004807B0, (uint64_t *)&unk_10047D0F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, void))(v7 + 8))(v9, v15[0]);
  return swift_release();
}

uint64_t sub_10033C3FC(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 112);
  uint64_t v5 = swift_checkMetadataState();
  return v4(a2, v5, AssociatedConformanceWitness);
}

uint64_t sub_10033C4E4(char a1)
{
  return sub_10033C50C(a1, (uint64_t)&unk_10046ED40, (uint64_t)sub_10033F820, (uint64_t)&unk_10046ED58);
}

uint64_t sub_10033C50C(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  BOOL v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v21 - 8);
  __chkstk_darwin();
  id v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v4;
  *(unsigned char *)(v15 + 24) = a1;
  aBlock[4] = a3;
  void aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E5D0;
  uint64_t aBlock[3] = v20;
  uint64_t v16 = _Block_copy(aBlock);
  id v17 = v14;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v22 = _swiftEmptyArrayStorage;
  sub_100014390();
  sub_100010BCC((uint64_t *)&unk_10047D0F0);
  sub_10000F9CC((unint64_t *)&qword_1004807B0, (uint64_t *)&unk_10047D0F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v21);
  return swift_release();
}

uint64_t sub_10033C7A0(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 144);
  uint64_t v5 = swift_checkMetadataState();
  return v4(a2, v5, AssociatedConformanceWitness);
}

uint64_t sub_10033C888(char a1)
{
  return sub_10033C50C(a1, (uint64_t)&unk_10046ECF0, (uint64_t)sub_10033F814, (uint64_t)&unk_10046ED08);
}

uint64_t sub_10033C8B0(uint64_t a1, unsigned __int8 a2)
{
  int v3 = a2;
  uint64_t v4 = sub_100010BCC(&qword_100487328);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1 + *(void *)(*(void *)a1 + 552);
  uint64_t result = swift_beginAccess();
  int v9 = *(unsigned __int8 *)(v7 + *(int *)(v4 + 36) + 31);
  if (v9 == 6)
  {
    if (v3 == 6) {
      return result;
    }
LABEL_6:
    sub_1000136F4(v7, (uint64_t)v6, &qword_100487328);
    v6[*(int *)(v4 + 36) + 31] = v3;
    return sub_100337D54((uint64_t)v6);
  }
  if (v3 == 6 || v9 != v3) {
    goto LABEL_6;
  }
  return result;
}

void sub_10033C9C0()
{
}

void sub_10033C9F0(uint64_t a1, unint64_t *a2, uint64_t *a3, unint64_t *a4, void (*a5)(void))
{
  if (!*a2)
  {
    sub_100014434(a3);
    sub_10033FC68(a4, a3, a5);
    unint64_t v9 = type metadata accessor for ObservableWiFiProperty();
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void sub_10033CA88(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void sub_10033CAF0()
{
  if (!qword_1004872F0)
  {
    sub_100014434(&qword_1004829B0);
    sub_10033CB58();
    unint64_t v0 = type metadata accessor for ObservableWiFiProperty();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1004872F0);
    }
  }
}

unint64_t sub_10033CB58()
{
  unint64_t result = qword_1004872F8;
  if (!qword_1004872F8)
  {
    sub_100014434(&qword_1004829B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004872F8);
  }
  return result;
}

void sub_10033CBC4(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t getEnumTagSinglePayload for InfrastructureRadioConstraints(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 253);
  }
  if (*(unsigned __int8 *)(a1 + 20) <= 3u) {
    int v3 = 3;
  }
  else {
    int v3 = *(unsigned __int8 *)(a1 + 20);
  }
  int v4 = v3 - 4;
  if (*(unsigned __int8 *)(a1 + 20) < 3u) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for InfrastructureRadioConstraints(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 20) = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InfrastructureRadioConstraints()
{
  return &type metadata for InfrastructureRadioConstraints;
}

uint64_t sub_10033CCBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a2 >= 1 && ((*(uint64_t (**)(uint64_t, uint64_t))(a7 + 56))(a6, a7) & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a7 + 32))(8, a6, a7);
    __chkstk_darwin();
    (*(void (**)(void, uint64_t, uint64_t (*)(uint64_t)))(a7 + 24))(0, 2, sub_10033D594);
  }
  unint64_t v13 = HIBYTE(a5);
  if (a3 > 0
    || (uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 56))(a6, a7), a2 >= 1) && (result & 1) == 0)
  {
    __chkstk_darwin();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)()))(a7 + 24))(1, 2, sub_10033D58C);
  }
  if ((a4 & 0xFF00000000) != 0x300000000)
  {
    uint64_t v15 = (uint64_t *)TimeBitmap.all.unsafeMutableAddressor();
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    if ((a4 & 0xFE00000000) != 0) {
      uint64_t result = RadioSchedule.reserve(_:with:)(v16, v17, v18, 9, a6, a7);
    }
    else {
      uint64_t result = RadioSchedule.set(_:to:with:)(v16, v17, v18, a4 & 0xFFFFFFFFFFFFLL, 1, 9, a6, a7);
    }
  }
  if (v13 < 2 || v13 == 6 || BYTE6(a5) == 0 || BYTE6(a5) == 4) {
    uint64_t v22 = 3;
  }
  else {
    uint64_t v22 = 2;
  }
  uint64_t v23 = a5 & 0xFF00000000;
  if ((a5 & 0xFF00000000) != 0)
  {
    LOBYTE(a5) = 1;
    if (BYTE6(a5) == 4) {
      return result;
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a7 + 32))(1, a6, a7);
    LOBYTE(a5) = result;
    if (BYTE6(a5) == 4) {
      return result;
    }
  }
  switch(BYTE6(a5))
  {
    case 1:
      char v29 = *(unsigned char *)TimeBitmap.Slot.OO.unsafeMutableAddressor();
      char v30 = *(unsigned char *)TimeBitmap.Slot.FF.unsafeMutableAddressor();
      char v31 = v29;
      char v32 = v29;
      goto LABEL_38;
    case 2:
      if ((*(uint64_t (**)(uint64_t, uint64_t))(a7 + 56))(a6, a7))
      {
        if (v23)
        {
          uint64_t v33 = (char *)TimeBitmap.Slot.FF.unsafeMutableAddressor();
          char v34 = *v33;
          unint64_t v35 = (char *)TimeBitmap.Slot.OO.unsafeMutableAddressor();
          char v36 = *v33;
          char v37 = *v35;
          char v38 = v34;
          char v39 = *v33;
        }
        else
        {
          char v48 = *(unsigned char *)TimeBitmap.Slot.OO.unsafeMutableAddressor();
          char v37 = *(unsigned char *)TimeBitmap.Slot.FF.unsafeMutableAddressor();
          char v38 = v48;
          char v36 = v37;
          char v39 = v37;
        }
        uint64_t v26 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(v38, v37, v36, v39);
        goto LABEL_44;
      }
      char v41 = *(unsigned char *)TimeBitmap.Slot.OO.unsafeMutableAddressor();
      char v42 = *(unsigned char *)TimeBitmap.Slot.OF.unsafeMutableAddressor();
      char v30 = *(unsigned char *)TimeBitmap.Slot.FF.unsafeMutableAddressor();
      char v31 = v41;
      char v32 = v42;
LABEL_38:
      uint64_t v26 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(v31, v32, v30, v30);
      break;
    case 3:
      if ((*(uint64_t (**)(uint64_t, uint64_t))(a7 + 56))(a6, a7))
      {
        if (v23) {
          uint64_t v40 = TimeBitmap.secondaryDiscoveryWindow.unsafeMutableAddressor();
        }
        else {
          uint64_t v40 = TimeBitmap.primaryDiscoveryWindow.unsafeMutableAddressor();
        }
        uint64_t v26 = TimeBitmap.inverted()(*v40, v40[1], v40[2]);
LABEL_44:
        LOBYTE(a5) = 1;
      }
      else
      {
        uint64_t v43 = (unint64_t *)TimeBitmap.primaryDiscoveryWindow.unsafeMutableAddressor();
        unint64_t v44 = *v43;
        uint64_t v45 = v43[1];
        uint64_t v46 = v43[2];
        uint64_t v47 = TimeBitmap.secondaryDiscoveryWindow.unsafeMutableAddressor();
        TimeBitmap.SlotsView.formUnion(_:)(*v47, v47[1], v47[2]);
        uint64_t v26 = TimeBitmap.inverted()(v44, v45, v46);
      }
      break;
    default:
      char v24 = *(unsigned char *)TimeBitmap.Slot.OO.unsafeMutableAddressor();
      uint64_t v25 = (char *)TimeBitmap.Slot.FF.unsafeMutableAddressor();
      uint64_t v26 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(v24, v24, v24, *v25);
      return RadioSchedule.set(_:to:with:)(v26, v27, v28, v22, 2, a5, a6, a7);
  }
  return RadioSchedule.set(_:to:with:)(v26, v27, v28, v22, 2, a5, a6, a7);
}

uint64_t sub_10033D0EC(uint64_t a1, uint64_t a2)
{
  int v3 = (char *)TimeBitmap.Slot.OO.unsafeMutableAddressor();
  char v4 = *v3;
  char v5 = *(unsigned char *)TimeBitmap.Slot.FF.unsafeMutableAddressor();
  unint64_t v6 = (char *)TimeBitmap.Slot.FO.unsafeMutableAddressor();
  uint64_t v7 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(v4, v5, *v6, *v3);
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 32);
  uint64_t v14 = swift_checkMetadataState();
  return v13(v7, v9, v11, 3, 2, a2, v14, AssociatedConformanceWitness);
}

uint64_t sub_10033D1F8()
{
  char v0 = *(unsigned char *)TimeBitmap.Slot.OO.unsafeMutableAddressor();
  char v1 = *(unsigned char *)TimeBitmap.Slot.OF.unsafeMutableAddressor();
  uint64_t v2 = (char *)TimeBitmap.Slot.FF.unsafeMutableAddressor();
  uint64_t v3 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(v0, v0, v1, *v2);
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 32);
  uint64_t v10 = swift_checkMetadataState();
  return v9(v3, v5, v7, 3, 2, 8, v10, AssociatedConformanceWitness);
}

void sub_10033D2F4(int a1, Swift::UInt a2, Swift::UInt a3, uint64_t a4, unint64_t a5)
{
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(a3);
  if ((a4 & 0xFF00000000) == 0x300000000)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Channel.hash(into:)(a1, a4 & 0xFFFFFFFFFFFFLL);
  }
  if ((a5 & 0xFF00000000) == 0x300000000)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Channel.hash(into:)(a1, a5 & 0xFFFFFFFFFFFFLL);
  }
  unint64_t v9 = HIBYTE(a5);
  if ((a5 & 0xFF000000000000) == 0x4000000000000)
  {
    Hasher._combine(_:)(0);
    if (v9 != 6)
    {
LABEL_9:
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(HIBYTE(a5));
      return;
    }
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(BYTE6(a5) + 1);
    if (v9 != 6) {
      goto LABEL_9;
    }
  }
  Hasher._combine(_:)(0);
}

uint64_t sub_10033D3F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10033CCBC(a1, *(void *)v3, *(void *)(v3 + 8), *(unsigned int *)(v3 + 16) | ((unint64_t)*(unsigned __int16 *)(v3 + 20) << 32), *(void *)(v3 + 24), a2, a3);
}

Swift::Int sub_10033D414()
{
  Swift::UInt v1 = *(void *)v0;
  Swift::UInt v2 = *(void *)(v0 + 8);
  unint64_t v3 = *(unsigned int *)(v0 + 16) | ((unint64_t)*(unsigned __int16 *)(v0 + 20) << 32);
  unint64_t v4 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  sub_10033D2F4((int)&v6, v1, v2, v3, v4);
  return Hasher._finalize()();
}

void sub_10033D480(int a1)
{
  sub_10033D2F4(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned int *)(v1 + 16) | ((unint64_t)*(unsigned __int16 *)(v1 + 20) << 32), *(void *)(v1 + 24));
}

Swift::Int sub_10033D498()
{
  Swift::UInt v1 = *(void *)v0;
  Swift::UInt v2 = *(void *)(v0 + 8);
  unint64_t v3 = *(unsigned int *)(v0 + 16) | ((unint64_t)*(unsigned __int16 *)(v0 + 20) << 32);
  unint64_t v4 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  sub_10033D2F4((int)&v6, v1, v2, v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_10033D500(uint64_t a1, uint64_t a2)
{
  return sub_10033D70C(*(void *)a1, *(void *)(a1 + 8), *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int16 *)(a1 + 20) << 32), *(void *)(a1 + 24), *(void *)a2, *(void *)(a2 + 8), *(unsigned int *)(a2 + 16) | ((unint64_t)*(unsigned __int16 *)(a2 + 20) << 32), *(void *)(a2 + 24));
}

unint64_t sub_10033D538()
{
  unint64_t result = qword_100487320;
  if (!qword_100487320)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100487320);
  }
  return result;
}

uint64_t sub_10033D58C()
{
  return sub_10033D1F8();
}

uint64_t sub_10033D594(uint64_t a1)
{
  return sub_10033D0EC(a1, *(unsigned __int8 *)(v1 + 32));
}

uint64_t sub_10033D5A0(unsigned __int8 *a1)
{
  BYTE8(v2) = 0;
  *(void *)&long long v2 = *a1;
  sub_100010BCC(&qword_100487308);
  _print_unlocked<A, B>(_:_:)();
  return *(void *)((char *)&v2 + 1);
}

uint64_t sub_10033D5FC(unsigned __int16 *a1)
{
  WORD4(v2) = 0;
  *(void *)&long long v2 = *a1;
  _print_unlocked<A, B>(_:_:)();
  return *(void *)((char *)&v2 + 2);
}

uint64_t sub_10033D650(unsigned __int8 *a1)
{
  return sub_10033D668(a1);
}

uint64_t sub_10033D65C(unsigned __int8 *a1)
{
  return sub_10033D668(a1);
}

uint64_t sub_10033D668(unsigned __int8 *a1)
{
  BYTE8(v2) = 0;
  *(void *)&long long v2 = *a1;
  _print_unlocked<A, B>(_:_:)();
  return *(void *)((char *)&v2 + 1);
}

uint64_t sub_10033D6B8()
{
  return 0;
}

uint64_t sub_10033D70C(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, unint64_t a8)
{
  uint64_t result = 0;
  if (a1 != a5 || a2 != a6) {
    return result;
  }
  uint64_t v10 = a7 & 0xFF00000000;
  if ((a3 & 0xFF00000000) != 0x300000000)
  {
    if (v10 != 0x300000000
      && a3 == a7
      && ((0x801004u >> ((a3 >> 29) & 0xF8)) & 0xFFC) == ((0x801004u >> ((a7 >> 29) & 0xF8)) & 0xFFC))
    {
      switch(BYTE5(a3))
      {
        case 2:
          if (BYTE5(a7) != 2) {
            return 0;
          }
          goto LABEL_5;
        case 3:
          if (BYTE5(a7) != 3) {
            return 0;
          }
          goto LABEL_5;
        case 4:
          if (BYTE5(a7) != 4) {
            return 0;
          }
          goto LABEL_5;
        case 5:
          if (BYTE5(a7) != 5) {
            return 0;
          }
          goto LABEL_5;
        case 6:
          if (BYTE5(a7) != 6) {
            return 0;
          }
          goto LABEL_5;
        default:
          if (BYTE5(a7) - 2 < 5 || ((a3 & 0x10000000000) == 0) == ((a7 >> 40) & 1)) {
            return 0;
          }
          goto LABEL_5;
      }
    }
    return 0;
  }
  if (v10 != 0x300000000) {
    return 0;
  }
LABEL_5:
  uint64_t v11 = a8 & 0xFF00000000;
  if ((a4 & 0xFF00000000) != 0x300000000)
  {
    if (v11 != 0x300000000
      && a4 == a8
      && ((0x801004u >> ((a4 >> 29) & 0xF8)) & 0xFFC) == ((0x801004u >> ((a8 >> 29) & 0xF8)) & 0xFFC))
    {
      switch(BYTE5(a4))
      {
        case 2:
          if (BYTE5(a8) != 2) {
            return 0;
          }
          goto LABEL_7;
        case 3:
          if (BYTE5(a8) != 3) {
            return 0;
          }
          goto LABEL_7;
        case 4:
          if (BYTE5(a8) != 4) {
            return 0;
          }
          goto LABEL_7;
        case 5:
          if (BYTE5(a8) != 5) {
            return 0;
          }
          goto LABEL_7;
        case 6:
          if (BYTE5(a8) != 6) {
            return 0;
          }
          goto LABEL_7;
        default:
          if (BYTE5(a8) - 2 < 5 || ((a4 & 0x10000000000) == 0) == ((a8 >> 40) & 1)) {
            return 0;
          }
          goto LABEL_7;
      }
    }
    return 0;
  }
  if (v11 != 0x300000000) {
    return 0;
  }
LABEL_7:
  uint64_t v12 = a8 & 0xFF000000000000;
  if ((a4 & 0xFF000000000000) == 0x4000000000000)
  {
    if (v12 != 0x4000000000000) {
      return 0;
    }
  }
  else if (v12 == 0x4000000000000 || ((a8 ^ a4) & 0xFF000000000000) != 0)
  {
    return 0;
  }
  unint64_t v13 = HIBYTE(a8);
  if (HIBYTE(a4) == 6)
  {
    if (v13 != 6) {
      return 0;
    }
  }
  else if (v13 == 6 || HIBYTE(a4) != v13)
  {
    return 0;
  }
  return 1;
}

uint64_t sub_10033D9A0(uint64_t result)
{
  unint64_t v1 = 0;
  unint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = result + 24;
LABEL_2:
  if (v1 <= v2) {
    unint64_t v4 = v2;
  }
  else {
    unint64_t v4 = v1;
  }
  unint64_t v5 = v4 + 1;
  uint64_t v6 = v3 + 8 * v1;
  while (1)
  {
    if (v2 == v1) {
      return (uint64_t)_swiftEmptyArrayStorage;
    }
    if (v5 == ++v1) {
      break;
    }
    uint64_t v7 = (int *)(v6 + 8);
    int v8 = *(unsigned __int8 *)(v6 + 12);
    v6 += 8;
    if (!v8)
    {
      int v9 = *v7;
      char v10 = *((unsigned char *)v7 + 5);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0) {
        uint64_t result = sub_1002BF2F4(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      unint64_t v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1) {
        uint64_t result = sub_1002BF2F4(v11 > 1, v12 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v12 + 1;
      unint64_t v13 = &_swiftEmptyArrayStorage[v12];
      *((_DWORD *)v13 + 8) = v9;
      *((unsigned char *)v13 + 36) = 0;
      *((unsigned char *)v13 + 37) = v10;
      goto LABEL_2;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10033DAB0(uint64_t result)
{
  unint64_t v1 = 0;
  unint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = result + 24;
LABEL_2:
  if (v1 <= v2) {
    unint64_t v4 = v2;
  }
  else {
    unint64_t v4 = v1;
  }
  unint64_t v5 = v4 + 1;
  uint64_t v6 = v3 + 8 * v1;
  while (1)
  {
    if (v2 == v1) {
      return (uint64_t)_swiftEmptyArrayStorage;
    }
    if (v5 == ++v1) {
      break;
    }
    uint64_t v7 = (int *)(v6 + 8);
    int v8 = *(unsigned __int8 *)(v6 + 12);
    v6 += 8;
    if (v8 == 1)
    {
      int v9 = *v7;
      char v10 = *((unsigned char *)v7 + 5);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0) {
        uint64_t result = sub_1002BF2F4(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      unint64_t v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1) {
        uint64_t result = sub_1002BF2F4(v11 > 1, v12 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v12 + 1;
      unint64_t v13 = &_swiftEmptyArrayStorage[v12];
      *((_DWORD *)v13 + 8) = v9;
      *((unsigned char *)v13 + 36) = 1;
      *((unsigned char *)v13 + 37) = v10;
      goto LABEL_2;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10033DBC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v178 = a2;
  uint64_t v185 = a1;
  unint64_t v4 = *(void **)v2;
  uint64_t v179 = v4[52];
  uint64_t v5 = *(void *)(v179 + 8);
  uint64_t v6 = v4[51];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v174 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  v157[0] = (char *)v157 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  os_log_t v159 = (char *)v157 - v8;
  uint64_t v189 = v5;
  uint64_t v180 = v6;
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v173 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v172 = (char *)v157 - v10;
  type metadata accessor for Optional();
  __chkstk_darwin();
  uint64_t v171 = (char *)v157 - v11;
  sub_100010BCC(&qword_100487350);
  __chkstk_darwin();
  uint64_t v170 = (uint64_t (**)(char *))((char *)v157 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100010BCC((uint64_t *)&unk_100487360);
  __chkstk_darwin();
  uint64_t v169 = (uint64_t (**)(char *))((char *)v157 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100010BCC((uint64_t *)&unk_100487A70);
  __chkstk_darwin();
  uint64_t v168 = (uint64_t (**)(char *))((char *)v157 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100010BCC((uint64_t *)&unk_100487D30);
  __chkstk_darwin();
  uint64_t v167 = (uint64_t (**)(char *))((char *)v157 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100010BCC(qword_100487A90);
  __chkstk_darwin();
  uint64_t v166 = (uint64_t (**)(char *))((char *)v157 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100010BCC(qword_100486430);
  __chkstk_darwin();
  id v165 = (uint64_t (**)(char *))((char *)v157 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100010BCC((uint64_t *)&unk_100488350);
  __chkstk_darwin();
  uint64_t v175 = (uint64_t (**)(char *))((char *)v157 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t AssociatedConformanceWitness = (uint64_t (*)(char *))swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v164 = (void (**)(uint64_t))AssociatedConformanceWitness;
  uint64_t v177 = v9;
  swift_getAssociatedConformanceWitness();
  uint64_t v163 = type metadata accessor for Preferences();
  uint64_t v162 = *(void *)(v163 - 8);
  __chkstk_darwin();
  unint64_t v161 = (char *)v157 - v20;
  sub_100010BCC(&qword_100487358);
  __chkstk_darwin();
  uint64_t v181 = (void *)((char *)v157 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v191 = type metadata accessor for Logger();
  uint64_t v182 = *(void *)(v191 - 8);
  __chkstk_darwin();
  unint64_t v158 = (char *)v157 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v176 = (void (*)(uint64_t))((char *)v157 - v23);
  v157[1] = v24;
  __chkstk_darwin();
  uint64_t v190 = (char *)v157 - v25;
  uint64_t v26 = type metadata accessor for UUID();
  uint64_t v186 = *(void *)(v26 - 8);
  uint64_t v187 = v26;
  __chkstk_darwin();
  uint64_t v28 = (char *)v157 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = v4[54];
  type metadata accessor for Lock();
  swift_allocObject();
  swift_retain();
  uint64_t v30 = Lock.init()();
  uint64_t v183 = v29;
  *(void *)&v3[v29] = v30;
  char v31 = &v3[*(void *)(*(void *)v3 + 464)];
  uint64_t v32 = type metadata accessor for DispatchTime();
  uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56);
  v33(v31, 1, 1, v32);
  char v34 = &v3[*(void *)(*(void *)v3 + 472)];
  *(void *)char v34 = 24;
  uint64_t v35 = enum case for DispatchTimeInterval.seconds(_:);
  uint64_t v36 = type metadata accessor for DispatchTimeInterval();
  char v37 = *(void (**)(void))(*(void *)(v36 - 8) + 104);
  ((void (*)(char *, uint64_t, uint64_t))v37)(v34, v35, v36);
  *(void *)&v3[*(void *)(*(void *)v3 + 480)] = 0;
  v33(&v3[*(void *)(*(void *)v3 + 496)], 1, 1, v32);
  *(void *)&v3[*(void *)(*(void *)v3 + 504)] = 24;
  uint64_t v38 = v180;
  v37();
  *(void *)&v3[*(void *)(*(void *)v3 + 512)] = 0;
  char v39 = &v3[*(void *)(*(void *)v3 + 552)];
  UUID.init()();
  uint64_t v40 = &v39[*(int *)(sub_100010BCC(&qword_100487328) + 36)];
  *(void *)uint64_t v40 = 0;
  *((void *)v40 + 1) = 0;
  *((_WORD *)v40 + 10) = 3;
  *((_DWORD *)v40 + 4) = 0;
  *((void *)v40 + 3) = 0x604000300000000;
  (*(void (**)(char *, char *, uint64_t))(v186 + 32))(v39, v28, v187);
  *(void *)&v3[*(void *)(*(void *)v3 + 560)] = 0;
  *(void *)&v3[*(void *)(*(void *)v3 + 568)] = 0;
  *(void *)&v3[*(void *)(*(void *)v3 + 576)] = 0;
  *(void *)&v3[*(void *)(*(void *)v3 + 584)] = 0;
  v3[*(void *)(*(void *)v3 + 592)] = 3;
  uint64_t v41 = AssociatedTypeWitness;
  uint64_t v42 = v38;
  uint64_t v43 = swift_getAssociatedConformanceWitness();
  uint64_t v189 = (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 40))(v41, v43);
  uint64_t v184 = v44;
  (*(void (**)(uint64_t, uint64_t))(v43 + 32))(v41, v43);
  uint64_t v45 = v190;
  Logger.init(subsystem:category:)();
  uint64_t v46 = v184;
  uint64_t v194 = v189;
  unint64_t v195 = (unint64_t)v184;
  swift_bridgeObjectRetain();
  v47._uint64_t countAndFlagsBits = 0x74706F2050325020;
  v47._object = (void *)0xEC000000736E6F69;
  String.append(_:)(v47);
  unint64_t v48 = v195;
  uint64_t v160 = v194;
  uint64_t v186 = *(void *)(v182 + 16);
  uint64_t v187 = v182 + 16;
  uint64_t v49 = v176;
  ((void (*)(void (*)(uint64_t), char *, uint64_t))v186)(v176, v45, v191);
  uint64_t v194 = 0;
  LOBYTE(v195) = 1;
  uint64_t v50 = v161;
  v164[15](v177);
  uint64_t v51 = v163;
  uint64_t v52 = Preferences.enableUserspaceP2POptions.getter(v163);
  (*(void (**)(char *, uint64_t))(v162 + 8))(v50, v51);
  uint64_t v192 = v52;
  uint64_t v53 = sub_100337E5C(v185, v42, v179);
  uint64_t v55 = v54;
  uint64_t v56 = swift_allocObject();
  *(void *)(v56 + 16) = v53;
  *(void *)(v56 + 24) = v55;
  sub_1000D50AC();
  uint64_t v57 = v181;
  MutableDriverProperty.init(name:logger:initialValue:defaultValue:updater:valueDescriber:)(v160, v48, v49, (uint64_t)&v194, (char *)&v192, (void (*)(uint64_t))sub_10033FD60, (void (*)(uint64_t))v56, (uint64_t (*)(char *))sub_10033D6B8, v181, 0, (uint64_t)&type metadata for PreferenceDefaults.EnableUserspaceP2POptions);
  sub_10006EC68((uint64_t)v57, (uint64_t)&v3[*(void *)(*(void *)v3 + 424)], &qword_100487358);
  uint64_t v58 = *(uint64_t (**)(char *))&v3[v183];
  uint64_t v59 = AssociatedTypeWitness;
  uint64_t v60 = (uint64_t *)swift_getAssociatedConformanceWitness();
  int v61 = (uint64_t (*)(uint64_t, uint64_t *))v60[8];
  swift_retain();
  LOBYTE(v192) = v61(v59, v60) & 1;
  uint64_t v194 = v189;
  unint64_t v195 = (unint64_t)v46;
  swift_bridgeObjectRetain();
  v62._uint64_t countAndFlagsBits = 0x702069462D695720;
  v62._object = (void *)0xEC0000007265776FLL;
  String.append(_:)(v62);
  uint64_t v63 = v194;
  unint64_t v64 = v195;
  uint64_t v65 = v190;
  ((void (*)(void (*)(uint64_t), char *, uint64_t))v186)(v49, v190, v191);
  unint64_t v66 = v175;
  uint64_t v164 = (void (**)(uint64_t))v58;
  ObservableWiFiProperty.init(lock:defaultValue:name:logger:valueDescriber:)(v58, (uint64_t)&v192, v63, v64, (uint64_t)v49, (uint64_t (*)(char *))sub_10033D65C, 0, (uint64_t)&type metadata for Bool, v175);
  sub_10006EC68((uint64_t)v66, (uint64_t)&v3[*(void *)(*(void *)v3 + 440)], (uint64_t *)&unk_100488350);
  uint64_t v181 = v60;
  uint64_t v67 = (uint64_t (*)(uint64_t, uint64_t *))v60[9];
  swift_retain();
  uint64_t v194 = v67(AssociatedTypeWitness, v60);
  unint64_t v195 = v68;
  uint64_t v196 = v69;
  int v197 = v70;
  __int16 v198 = v71;
  uint64_t v192 = 0;
  unint64_t v193 = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
  uint64_t v72 = v184;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v192 = v189;
  unint64_t v193 = (unint64_t)v72;
  v73._uint64_t countAndFlagsBits = 0x6E206172666E6920;
  v73._object = (void *)0xEE006B726F777465;
  String.append(_:)(v73);
  uint64_t v74 = v192;
  unint64_t v75 = v193;
  uint64_t v76 = v191;
  ((void (*)(void (*)(uint64_t), char *, uint64_t))v186)(v49, v65, v191);
  uint64_t v77 = sub_100010BCC(&qword_1004872C0);
  uint64_t v78 = v76;
  sub_10033FC68(&qword_1004872C8, &qword_1004872C0, (void (*)(void))sub_10007AA4C);
  uint64_t v79 = v165;
  ObservableWiFiProperty.init(lock:defaultValue:name:logger:valueDescriber:)((uint64_t (*)(char *))v164, (uint64_t)&v194, v74, v75, (uint64_t)v49, (uint64_t (*)(char *))sub_10033806C, 0, v77, v165);
  sub_10006EC68((uint64_t)v79, (uint64_t)&v3[*(void *)(*(void *)v3 + 448)], qword_100486430);
  uint64_t v80 = v183;
  os_log_type_t v81 = *(uint64_t (**)(char *))&v3[v183];
  LOBYTE(v192) = 1;
  uint64_t v194 = 0;
  unint64_t v195 = 0xE000000000000000;
  swift_retain();
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v194 = v189;
  unint64_t v195 = (unint64_t)v72;
  v82._uint64_t countAndFlagsBits = 0xD000000000000010;
  v82._object = (void *)0x80000001003E0B70;
  String.append(_:)(v82);
  uint64_t v83 = v194;
  unint64_t v84 = v195;
  uint64_t v85 = (uint64_t)v49;
  uint64_t v86 = v49;
  unint64_t v87 = (void (*)(void (*)(uint64_t), char *, uint64_t))v186;
  ((void (*)(void (*)(uint64_t), char *, uint64_t))v186)(v86, v190, v78);
  sub_10007AAA4();
  unint64_t v88 = v166;
  ObservableWiFiProperty.init(lock:defaultValue:name:logger:valueDescriber:)(v81, (uint64_t)&v192, v83, v84, v85, (uint64_t (*)(char *))sub_10033D650, 0, (uint64_t)&type metadata for AutoJoinState, v166);
  sub_10006EC68((uint64_t)v88, (uint64_t)&v3[*(void *)(*(void *)v3 + 456)], qword_100487A90);
  BOOL v89 = *(uint64_t (**)(char *))&v3[v80];
  unint64_t v90 = v181;
  uint64_t v91 = (uint64_t (*)(uint64_t, uint64_t *))v181[10];
  swift_retain();
  unsigned int v92 = v91(AssociatedTypeWitness, v90);
  if ((v92 & 0x10000) != 0)
  {
    uint64_t v93 = CountryCode.unknown.unsafeMutableAddressor();
    LOBYTE(v92) = *(unsigned char *)v93;
    LOBYTE(v93) = *((unsigned char *)v93 + 1);
  }
  else
  {
    LODWORD(v93) = v92 >> 8;
  }
  int v94 = v167;
  LOBYTE(v192) = v92;
  BYTE1(v192) = (_BYTE)v93;
  uint64_t v95 = v189;
  uint64_t v194 = v189;
  unint64_t v195 = (unint64_t)v184;
  uint64_t v96 = v184;
  swift_bridgeObjectRetain();
  v97._uint64_t countAndFlagsBits = 0x7972746E756F6320;
  v97._object = (void *)0xED000065646F6320;
  String.append(_:)(v97);
  uint64_t v98 = v194;
  unint64_t v99 = v195;
  uint64_t v100 = (uint64_t)v176;
  v87(v176, v190, v78);
  sub_100156598();
  ObservableWiFiProperty.init(lock:defaultValue:name:logger:valueDescriber:)(v89, (uint64_t)&v192, v98, v99, v100, (uint64_t (*)(char *))sub_10033D5FC, 0, (uint64_t)&type metadata for CountryCode, v94);
  sub_10006EC68((uint64_t)v94, (uint64_t)&v3[*(void *)(*(void *)v3 + 528)], (uint64_t *)&unk_100487D30);
  LOBYTE(v192) = 0;
  uint64_t v194 = 0;
  unint64_t v195 = 0xE000000000000000;
  swift_retain();
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v194 = v95;
  unint64_t v195 = (unint64_t)v96;
  v101._uint64_t countAndFlagsBits = 0xD000000000000011;
  v101._object = (void *)0x80000001003E0B90;
  String.append(_:)(v101);
  uint64_t v103 = v194;
  unint64_t v102 = v195;
  uint64_t v104 = v190;
  uint64_t v105 = v191;
  v87((void (*)(uint64_t))v100, v190, v191);
  int v106 = v175;
  ObservableWiFiProperty.init(lock:defaultValue:name:logger:valueDescriber:)(v89, (uint64_t)&v192, v103, v102, v100, (uint64_t (*)(char *))sub_10033D65C, 0, (uint64_t)&type metadata for Bool, v175);
  sub_10006EC68((uint64_t)v106, (uint64_t)&v3[*(void *)(*(void *)v3 + 520)], (uint64_t *)&unk_100488350);
  uint64_t v107 = *(uint64_t (**)(char *))&v3[v183];
  uint64_t v194 = 0;
  unint64_t v195 = 0;
  long long v108 = v104;
  v87((void (*)(uint64_t))v100, v104, v105);
  swift_retain();
  uint64_t v109 = sub_100010BCC(&qword_1004829B0);
  sub_10033CB58();
  int64_t v110 = v168;
  ObservableWiFiProperty.init(lock:defaultValue:name:logger:valueDescriber:)(v107, (uint64_t)&v194, 0xD000000000000018, 0x80000001003E0BB0, v100, (uint64_t (*)(char *))sub_1003380CC, 0, v109, v168);
  sub_10006EC68((uint64_t)v110, (uint64_t)&v3[*(void *)(*(void *)v3 + 536)], (uint64_t *)&unk_100487A70);
  LOBYTE(v192) = 4;
  uint64_t v194 = v189;
  unint64_t v195 = (unint64_t)v184;
  swift_retain();
  v111._uint64_t countAndFlagsBits = 1399804192;
  v111._object = (void *)0xE400000000000000;
  String.append(_:)(v111);
  uint64_t v112 = (void (*)(uint64_t, char *, uint64_t))v87;
  unint64_t v113 = v195;
  uint64_t v189 = v194;
  uint64_t v114 = v108;
  v112(v100, v108, v191);
  uint64_t v115 = v112;
  uint64_t v116 = sub_100010BCC(&qword_100487308);
  sub_10033FC68(&qword_100487310, &qword_100487308, (void (*)(void))sub_1001E0DB4);
  uint64_t v117 = v169;
  ObservableWiFiProperty.init(lock:defaultValue:name:logger:valueDescriber:)(v107, (uint64_t)&v192, v189, v113, v100, (uint64_t (*)(char *))sub_10033D5A0, 0, v116, v169);
  sub_10006EC68((uint64_t)v117, (uint64_t)&v3[*(void *)(*(void *)v3 + 544)], (uint64_t *)&unk_100487360);
  WORD2(v194) = 3;
  LODWORD(v194) = 0;
  uint64_t v118 = v191;
  v115(v100, v114, v191);
  swift_retain();
  uint64_t v119 = sub_100010BCC((uint64_t *)&unk_100487B90);
  sub_10033FC68(&qword_1004872E0, (uint64_t *)&unk_100487B90, (void (*)(void))sub_1001C7C00);
  os_log_type_t v120 = v170;
  ObservableWiFiProperty.init(lock:defaultValue:name:logger:valueDescriber:)(v107, (uint64_t)&v194, 0xD000000000000017, 0x80000001003E0BD0, v100, (uint64_t (*)(char *))sub_100338118, 0, v119, v170);
  sub_10006EC68((uint64_t)v120, (uint64_t)&v3[*(void *)(*(void *)v3 + 488)], &qword_100487350);
  swift_release();
  uint64_t v121 = v174;
  uint64_t v122 = v174 + 16;
  uint64_t v123 = *(void (**)(void))(v174 + 16);
  uint64_t v124 = v171;
  uint64_t v125 = AssociatedTypeWitness;
  ((void (*)(char *, uint64_t, uint64_t))v123)(v171, v185, AssociatedTypeWitness);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v121 + 56))(v124, 0, 1, v125);
  uint64_t v126 = (uint64_t)v172;
  (*(void (**)(char *, uint64_t, uint64_t))(v173 + 16))(v172, v178, v177);
  ((void (*)(uint64_t, char *, uint64_t))v186)(v100, v114, v118);
  uint64_t v127 = WiFiInterface.init(driver:components:logger:)(v124, v126, v100);
  uint64_t v128 = v179;
  if (!v127)
  {
    __break(1u);
    JUMPOUT(0x10033F5DCLL);
  }
  uint64_t v129 = v127;
  uint64_t v130 = v159;
  uint64_t v183 = v127 + *(void *)(*(void *)v127 + 96);
  uint64_t v184 = v123;
  uint64_t v189 = v122;
  ((void (*)(char *))v123)(v159);
  uint64_t v131 = swift_allocObject();
  swift_weakInit();
  os_log_type_t v132 = v158;
  ((void (*)(char *, char *, uint64_t))v186)(v158, v114, v118);
  uint64_t v133 = v182;
  unint64_t v134 = (*(unsigned __int8 *)(v182 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v182 + 80);
  uint64_t v135 = (char *)swift_allocObject();
  *((void *)v135 + 2) = v180;
  *((void *)v135 + 3) = v128;
  *((void *)v135 + 4) = v131;
  uint64_t v136 = v118;
  uint64_t v137 = v125;
  (*(void (**)(char *, char *, uint64_t))(v133 + 32))(&v135[v134], v132, v136);
  uint64_t v138 = v181;
  uint64_t v139 = v128;
  unint64_t v140 = v130;
  uint64_t v141 = (void (*)(void (*)(uint64_t), char *, uint64_t, uint64_t *))v181[3];
  swift_retain();
  swift_retain();
  v141(sub_1000137A4, v135, v137, v138);
  uint64_t v186 = *(void *)(v174 + 8);
  ((void (*)(char *, uint64_t))v186)(v140, v137);
  swift_release();
  swift_release();
  uint64_t v187 = v129;
  uint64_t v142 = v157[0];
  v184();
  uint64_t v143 = swift_allocObject();
  swift_weakInit();
  int v144 = (void *)swift_allocObject();
  uint64_t v145 = v139;
  uint64_t v146 = v144;
  v144[2] = v180;
  v144[3] = v145;
  v144[4] = v143;
  uint64_t v147 = v138[1];
  uint64_t v148 = *(uint64_t (**)(uint64_t (*)(uint64_t, uint64_t), void *, uint64_t, uint64_t))(v147 + 40);
  swift_retain();
  uint64_t v149 = v148(sub_10033FE58, v146, v137, v147);
  uint64_t v151 = v150;
  swift_release();
  uint64_t v152 = v142;
  uint64_t v153 = v187;
  ((void (*)(uint64_t, uint64_t))v186)(v152, v137);
  swift_release();
  sub_100337434(v149, v151);
  unint64_t v155 = v190;
  uint64_t v154 = v191;
  (*(void (**)(uint64_t))(v138[1] + 8))(v137);
  swift_release();
  (*(void (**)(char *, uint64_t))(v182 + 8))(v155, v154);
  return v153;
}

uint64_t sub_10033F5F0(uint64_t a1, uint64_t a2)
{
  return sub_10033DBC8(a1, a2);
}

void sub_10033F644()
{
  *(void *)(v0 + *(void *)(*(void *)v0 + 480)) = 0;
  swift_release();
  sub_100336E2C(0x300000000);
  osos_log_t log = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    unint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "Infra association ready", v2, 2u);
    swift_slowDealloc();
  }
}

void sub_10033F724()
{
  osos_log_t log = Logger.logObject.getter();
  os_log_type_t v0 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v0))
  {
    os_log_type_t v1 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v0, "Infra authentication complete", v1, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_10033F7DC()
{
  swift_release();

  return _swift_deallocObject(v0, 25, 7);
}

uint64_t sub_10033F814()
{
  return sub_10033C8B0(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_10033F820()
{
  return sub_10033C7A0(*(void *)(v0 + 16), *(unsigned __int8 *)(v0 + 24));
}

uint64_t sub_10033F82C()
{
  return sub_10033C3FC(*(void *)(v0 + 16), *(unsigned __int8 *)(v0 + 24));
}

uint64_t sub_10033F838()
{
  return sub_10033C0B8(v0);
}

uint64_t sub_10033F840()
{
  return sub_10033C000(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_10033F84C()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10033F88C()
{
  return sub_10033B9E8(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_10033F89C()
{
  return sub_10033B6EC(v0);
}

uint64_t sub_10033F8A4()
{
  return sub_10033B414(v0);
}

uint64_t sub_10033F8AC()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10033F8E4()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10033F91C()
{
  return sub_100339D0C();
}

uint64_t sub_10033F928()
{
  return sub_100338D78();
}

uint64_t sub_10033F934(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010BCC(&qword_100487328);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_10033F99C()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = *(void *)(sub_100010BCC(&qword_100487328) - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v4 + v5 + v7) & ~v7;
  uint64_t v9 = *(void *)(v6 + 64);
  uint64_t v10 = v3 | v7 | 7;
  uint64_t v11 = (v9 + v7 + v8) & ~v7;
  uint64_t v12 = v11 + v9;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, AssociatedTypeWitness);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8);
  v14(v0 + v8, v13);
  v14(v0 + v11, v13);

  return _swift_deallocObject(v0, v12, v10);
}

uint64_t sub_10033FB40()
{
  uint64_t v1 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(sub_100010BCC(&qword_100487328) - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (v2 + v3 + v5) & ~v5;
  uint64_t v7 = v0 + ((*(void *)(v4 + 64) + v5 + v6) & ~v5);

  return sub_100337A1C(v0 + v2, v0 + v6, v7);
}

uint64_t sub_10033FC68(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100014434(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10033FCD4()
{
  unint64_t result = qword_100487340;
  if (!qword_100487340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100487340);
  }
  return result;
}

uint64_t sub_10033FD28()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10033FD60(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_10033FD8C()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10033FE58(uint64_t a1, uint64_t a2)
{
  return sub_100338160(a1, a2);
}

uint64_t sub_10033FE64()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, AssociatedTypeWitness);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10033FF0C(uint64_t a1)
{
  return sub_100337FAC(a1);
}

uint64_t sub_10033FFF8()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Logger();
    if (v2 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }
  return result;
}

void *sub_100340100(void (*a1)(uint64_t *__return_ptr, int *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    uint64_t v18 = _swiftEmptyArrayStorage;
    sub_10008377C(0, v5, 0);
    uint64_t v6 = _swiftEmptyArrayStorage;
    for (uint64_t i = a3 + 37; ; i += 6)
    {
      __int16 v10 = *(_WORD *)(i - 1);
      int v15 = *(_DWORD *)(i - 5);
      __int16 v16 = v10;
      a1(&v17, &v15);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      uint64_t v11 = v17;
      uint64_t v18 = v6;
      unint64_t v13 = v6[2];
      unint64_t v12 = v6[3];
      if (v13 >= v12 >> 1)
      {
        sub_10008377C(v12 > 1, v13 + 1, 1);
        uint64_t v6 = v18;
      }
      v6[2] = v13 + 1;
      v6[v13 + 4] = v11;
      if (!--v5) {
        return v6;
      }
    }
    swift_release();
  }
  return v6;
}

void *sub_10034021C(void (*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  void (*v31)(uint64_t *__return_ptr, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;

  char v31 = a1;
  uint64_t v32 = a2;
  uint64_t v30 = sub_100010BCC(&qword_100487708);
  __chkstk_darwin();
  uint64_t v29 = (uint64_t)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v28 = (char *)&v27 - v6;
  __chkstk_darwin();
  uint64_t v8 = (char *)&v27 - v7;
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v9)
  {
    uint64_t v35 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v11 = sub_100374AE8(a3);
    uint64_t v13 = v12;
    char v15 = v14 & 1;
    uint64_t v27 = a3 + 64;
    for (uint64_t i = v9 - 1; ; uint64_t i = v33 - 1)
    {
      uint64_t v33 = i;
      uint64_t v17 = v30;
      uint64_t v18 = *(int *)(v30 + 48);
      char v19 = v15 & 1;
      id v20 = sub_1002801DC(v8, v11, v13, v15 & 1, a3);
      *(void *)&v8[v18] = v20;
      uint64_t v21 = type metadata accessor for UUID();
      uint64_t v22 = v28;
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(v28, v8, v21);
      *(void *)&v22[*(int *)(v17 + 48)] = v20;
      uint64_t v23 = (uint64_t)v22;
      uint64_t v24 = v29;
      sub_100346D50(v23, v29);
      id v25 = v20;
      sub_1000380B4((uint64_t)v8, &qword_100487708);
      v31(&v34, v24);
      sub_1000380B4(v24, &qword_100487708);
      if (v3)
      {
        sub_100038030(v11, v13, v19);
        return (void *)swift_release();
      }
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = (void *)specialized ContiguousArray._endMutation()();
      if (v11 < 0 || v11 >= -(-1 << *(unsigned char *)(a3 + 32))) {
        break;
      }
      if (((*(void *)(v27 + (((unint64_t)v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
        goto LABEL_14;
      }
      if (*(_DWORD *)(a3 + 36) != v13) {
        goto LABEL_15;
      }
      uint64_t v26 = _HashTable.occupiedBucket(after:)();
      if (!v33) {
        return v35;
      }
      uint64_t v11 = v26;
      char v15 = 0;
      uint64_t v13 = *(unsigned int *)(a3 + 36);
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }
  return result;
}

Class sub_1003404D8()
{
  uint64_t v0 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1003405BC((uint64_t)v3);
  v4.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);

  return v4.super.isa;
}

uint64_t sub_1003405BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + qword_1004889A0;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

void sub_100340640(void *a1)
{
  type metadata accessor for UUID();
  __chkstk_darwin();
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  id v4 = a1;
  sub_1003406D4((uint64_t)v3);
}

uint64_t sub_1003406D4(uint64_t a1)
{
  uint64_t v3 = v1 + qword_1004889A0;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

id sub_100340760()
{
  sub_100345EF0();
  swift_bridgeObjectRetain();
  NSString v0 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();

  return v0;
}

void sub_1003407C0(void *a1)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;
  id v5 = a1;
  sub_100340830(v2, v4);
}

uint64_t sub_100340830(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + qword_1004889A8);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t sub_10034084C()
{
  return sub_100340874() & 1;
}

uint64_t sub_100340874()
{
  return *(unsigned __int8 *)(v0 + qword_100487378);
}

uint64_t sub_100340884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003408AC(a3);
}

uint64_t sub_1003408AC(uint64_t result)
{
  *(unsigned char *)(v1 + qword_100487378) = result;
  return result;
}

uint64_t sub_1003408BC()
{
  return sub_1003408E4() & 1;
}

uint64_t sub_1003408E4()
{
  return *(unsigned __int8 *)(v0 + qword_100487380);
}

uint64_t sub_1003408F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10034091C(a3);
}

uint64_t sub_10034091C(uint64_t result)
{
  *(unsigned char *)(v1 + qword_100487380) = result;
  return result;
}

uint64_t sub_10034092C()
{
  return sub_100340954() & 1;
}

uint64_t sub_100340954()
{
  return *(unsigned __int8 *)(v0 + qword_100487388);
}

uint64_t sub_100340964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10034098C(a3);
}

uint64_t sub_10034098C(uint64_t result)
{
  *(unsigned char *)(v1 + qword_100487388) = result;
  return result;
}

uint64_t sub_10034099C()
{
  return sub_1003409C4() & 1;
}

uint64_t sub_1003409C4()
{
  return *(unsigned __int8 *)(v0 + qword_100487390);
}

uint64_t sub_1003409D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003409FC(a3);
}

uint64_t sub_1003409FC(uint64_t result)
{
  *(unsigned char *)(v1 + qword_100487390) = result;
  return result;
}

char *sub_100340A0C(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return sub_100340A40(a1);
}

char *sub_100340A40(uint64_t a1)
{
  uint64_t v28 = a1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v26 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (unint64_t *)&v1[qword_1004889A8];
  unint64_t v30 = 0xD000000000000012;
  unint64_t v31 = 0x80000001003D7B30;
  uint64_t v7 = v1;
  v8._uint64_t countAndFlagsBits = 32;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  v9._uint64_t countAndFlagsBits = 5128526;
  v9._object = (void *)0xE300000000000000;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  unint64_t v10 = v31;
  *uint64_t v6 = v30;
  v6[1] = v10;
  v7[qword_100487378] = 1;
  v7[qword_100487380] = 0;
  v7[qword_100487388] = 0;
  v7[qword_100487390] = 0;
  uint64_t v11 = &v7[qword_1004889B0];
  Logger.init(subsystem:category:)();
  uint64_t v12 = qword_100487398;
  type metadata accessor for NANNetworkAgent.Client();
  sub_100346D0C(&qword_100487710);
  *(void *)&v7[v12] = Dictionary.init()();
  uint64_t v13 = *OS_dispatch_queue.nan.unsafeMutableAddressor();
  id v14 = objc_allocWithZone((Class)NWNetworkAgentRegistration);
  uint64_t v27 = (objc_class *)ObjectType;
  id v15 = [v14 initWithNetworkAgentClass:swift_getObjCClassFromMetadata() queue:v13];
  if (!v15)
  {
    swift_release();

    swift_bridgeObjectRelease();
    uint64_t v23 = type metadata accessor for Logger();
    (*(void (**)(char *, uint64_t))(*(void *)(v23 - 8) + 8))(v11, v23);
    swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance();
    return 0;
  }
  *(void *)&v7[qword_100487370] = v15;
  id v16 = v15;
  UUID.init()();
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))(&v7[qword_1004889A0], v5, v3);
  *(void *)&v7[qword_1004889B8] = v28;
  swift_unownedRetain();

  v29.receiver = v7;
  v29.super_class = v27;
  uint64_t v17 = (char *)[super init];
  uint64_t v18 = *(void **)&v17[qword_100487370];
  char v19 = v17;
  if (![v18 registerNetworkAgent:v19])
  {

    swift_release();
    return 0;
  }
  id v20 = v18;
  swift_bridgeObjectRetain();
  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned __int8 v22 = [v20 addNetworkAgentToInterfaceNamed:v21];

  swift_release();
  if ((v22 & 1) == 0)
  {

    return 0;
  }
  return v19;
}

uint64_t sub_100340E94()
{
  return 1;
}

uint64_t sub_100340EA0()
{
  return 1;
}

uint64_t sub_100340EAC()
{
  return 0;
}

id sub_100340EB8()
{
  AppleDevice.machServiceName.getter();
  NSString v0 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();

  return v0;
}

id sub_100340F08()
{
  NSString v0 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();

  return v0;
}

id sub_100340F54(uint64_t a1, uint64_t a2, void *a3)
{
  swift_getObjCClassMetadata();
  id v4 = a3;
  uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v7 = v6;

  Swift::String v8 = (void *)variable initialization expression of NANBitmap.Band.Iterator.currentIndex();
  sub_10000C970(v5, v7);

  return v8;
}

uint64_t sub_100340FCC()
{
  return 0;
}

uint64_t sub_100340FD4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v184 = (void *)(swift_isaMask & *v2);
  sub_100010BCC(&qword_1004862B0);
  __chkstk_darwin();
  uint64_t v181 = (char *)&v165 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v183 = (char *)&v165 - v5;
  __chkstk_darwin();
  unint64_t v7 = (char *)&v165 - v6;
  __chkstk_darwin();
  Swift::String v9 = (char *)&v165 - v8;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v176 = (char *)&v165 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v177 = (char *)&v165 - v13;
  __chkstk_darwin();
  uint64_t v182 = (char *)&v165 - v14;
  __chkstk_darwin();
  id v16 = (char *)&v165 - v15;
  __chkstk_darwin();
  uint64_t v178 = (char *)&v165 - v17;
  __chkstk_darwin();
  uint64_t v179 = (char *)&v165 - v18;
  __chkstk_darwin();
  id v20 = (char *)&v165 - v19;
  __chkstk_darwin();
  uint64_t v180 = (char *)&v165 - v21;
  __chkstk_darwin();
  uint64_t v23 = (char *)&v165 - v22;
  uint64_t result = __chkstk_darwin();
  uint64_t v26 = (char *)&v165 - v25;
  if (!a1)
  {
    __break(1u);
    return result;
  }
  uint64_t v185 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v186 = v27;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v28 = sub_10039F920((uint64_t)v187), (v29 & 1) != 0))
  {
    sub_1000107A4(*(void *)(a1 + 56) + 32 * v28, (uint64_t)&v188);
  }
  else
  {
    long long v188 = 0u;
    long long v189 = 0u;
  }
  sub_100346DB8((uint64_t)v187);
  if (!*((void *)&v189 + 1))
  {
    sub_1000380B4((uint64_t)&v188, &qword_10047D0D0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
    goto LABEL_11;
  }
  uint64_t v174 = (uint64_t)v16;
  id v175 = v2;
  uint64_t v172 = v20;
  int v30 = swift_dynamicCast();
  unint64_t v31 = *(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56);
  v31(v9, v30 ^ 1u, 1, v10);
  uint64_t v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v32(v9, 1, v10) == 1)
  {
LABEL_11:
    sub_1000380B4((uint64_t)v9, &qword_1004862B0);
    return 0;
  }
  uint64_t v33 = *(void (**)(char *, uint64_t, void *))(v11 + 32);
  id v169 = (id)(v11 + 32);
  uint64_t v168 = v33;
  v33(v26, (uint64_t)v9, (void *)v10);
  uint64_t v35 = v11 + 16;
  char v34 = *(void (**)(char *, char *, void *))(v11 + 16);
  uint64_t v173 = v26;
  uint64_t v170 = v34;
  v34(v7, v26, (void *)v10);
  v31(v7, 0, 1, v10);
  unsigned int v36 = v32(v7, 1, v10);
  uint64_t v171 = v11;
  if (v36 == 1)
  {
    char v37 = (void *)v10;
    Class isa = 0;
  }
  else
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    char v39 = v7;
    char v37 = (void *)v10;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v39, v10);
  }
  id v40 = [self pathForClientID:isa];

  if (!v40) {
    goto LABEL_31;
  }
  if ([v40 hasBrowseDescriptor])
  {
    uint64_t v41 = (char *)[v40 browseDescriptor];
    if (v41)
    {
      uint64_t v42 = v41;
      id v43 = [v41 bonjourServiceType];
      if (v43)
      {
        unint64_t v44 = v43;
        uint64_t v183 = v42;
        id v166 = v40;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v45 = v35;

        id v46 = objc_allocWithZone((Class)WiFiAwareSubscribeConfiguration);
        NSString v47 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v48 = [v46 initWithServiceName:v47];

        [v48 setAuthenticationType:0];
        uint64_t v49 = (char *)v184[10];
        uint64_t v50 = (objc_class *)type metadata accessor for NANNetworkAgent.SubscriberClient();
        uint64_t v51 = v173;
        uint64_t v52 = v37;
        uint64_t v53 = v37;
        uint64_t v54 = v170;
        uint64_t v167 = v45;
        v170(v23, v173, v53);
        uint64_t v55 = (char *)v175;
        id v56 = v48;
        id v57 = objc_allocWithZone(v50);
        uint64_t v181 = (char *)sub_100343E40(v55, (uint64_t)v23, v56);
        uint64_t v182 = v55;
        uint64_t v184 = v56;
        uint64_t v179 = v49;
        unint64_t v99 = v180;
        uint64_t v100 = v52;
        v54(v180, v51, v52);
        Swift::String v101 = Logger.logObject.getter();
        os_log_type_t v102 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v101, v102))
        {
          uint64_t v104 = (uint8_t *)swift_slowAlloc();
          v187[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v104 = 136315138;
          sub_100346D0C((unint64_t *)&qword_1004853F0);
          uint64_t v105 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)&long long v188 = sub_100010680(v105, v106, v187);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v107 = *(void (**)(char *, void *))(v171 + 8);
          v107(v99, v100);
          _os_log_impl((void *)&_mh_execute_header, v101, v102, "Subscribing for client %s", v104, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          uint64_t v107 = *(void (**)(char *, void *))(v171 + 8);
          v107(v99, v100);
        }
        uint64_t v126 = v173;
        v170(v172, v173, v100);
        id v127 = v181;
        *(void *)&long long v188 = v181;
        swift_beginAccess();
        type metadata accessor for NANNetworkAgent.Client();
        sub_100346D0C(&qword_100487710);
        type metadata accessor for Dictionary();
        id v128 = v127;
        Dictionary.subscript.setter();
        swift_endAccess();

        v107(v126, v100);
        return 1;
      }

      goto LABEL_31;
    }
  }
  if (![v40 hasAdvertiseDescriptor]
    || (uint64_t v58 = (char *)[v40 advertiseDescriptor]) == 0)
  {
    id v90 = [v40 endpoint];
    if (v90)
    {
      uint64_t v91 = v90;
      self;
      unsigned int v92 = (void *)swift_dynamicCastObjCClass();
      if (v92)
      {
        uint64_t v93 = v92;
        uint64_t v167 = v35;
        id v94 = [v92 domain];
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        Swift::String v9 = v183;
        UUID.init(uuidString:)();
        swift_bridgeObjectRelease();
        if (v32(v9, 1, (uint64_t)v37) == 1)
        {
          (*(void (**)(char *, void *))(v171 + 8))(v173, v37);

          goto LABEL_11;
        }
        id v166 = v40;
        uint64_t v95 = v168;
        v168((char *)v174, (uint64_t)v9, v37);
        id v96 = [v93 name];
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v97 = (uint64_t)v181;
        UUID.init(uuidString:)();
        swift_bridgeObjectRelease();
        if (v32((char *)v97, 1, (uint64_t)v37) == 1)
        {

          uint64_t v98 = *(void (**)(uint64_t, void *))(v171 + 8);
          v98(v174, v37);
          v98((uint64_t)v173, v37);
          sub_1000380B4(v97, &qword_1004862B0);
          return 0;
        }
        v95(v182, v97, v37);
        swift_beginAccess();
        long long v108 = (char *)type metadata accessor for NANNetworkAgent.Client();
        sub_100346D0C(&qword_100487710);
        uint64_t v109 = v37;
        uint64_t v183 = v108;
        Dictionary.subscript.getter();
        int64_t v110 = (void *)v188;
        swift_endAccess();
        if (v110)
        {
          type metadata accessor for NANNetworkAgent.SubscriberClient();
          uint64_t v111 = swift_dynamicCastClass();
          if (v111)
          {
            uint64_t v112 = (uint64_t *)(v111 + qword_100487528);
            swift_beginAccess();
            uint64_t v113 = *v112;
            swift_bridgeObjectRetain();

            if (*(void *)(v113 + 16))
            {
              unint64_t v114 = sub_1000316CC((uint64_t)v182);
              if (v115)
              {
                uint64_t v116 = (char *)*(id *)(*(void *)(v113 + 56) + 8 * v114);
                swift_bridgeObjectRelease();
                LOBYTE(v164) = 0;
                uint64_t v117 = v116;
                id v118 = [objc_allocWithZone((Class)WiFiAwareDatapathConfiguration) initWithDiscoveryResult:v116 serviceType:0 passphrase:0 pmk:0 pmkID:0 serviceSpecificInfo:0 internetSharingConfiguration:0 pairingMethod:0 pairingCachingEnabled:v164 pairSetupServiceSpecificInfo:0];
                uint64_t v119 = (objc_class *)type metadata accessor for NANNetworkAgent.DataSessionClient();
                uint64_t v120 = (uint64_t)v177;
                uint64_t v121 = v170;
                v170(v177, v173, v109);
                id v122 = v175;
                uint64_t v184 = v109;
                id v123 = v122;
                uint64_t v124 = (char *)v118;
                id v125 = objc_allocWithZone(v119);
                uint64_t v149 = (char *)sub_100344F90(v123, v120, v124);
                uint64_t v178 = v124;
                uint64_t v181 = v117;
                uint64_t v150 = v176;
                uint64_t v151 = v184;
                v121(v176, v173, v184);
                uint64_t v152 = Logger.logObject.getter();
                os_log_type_t v153 = static os_log_type_t.default.getter();
                int v154 = v153;
                BOOL v155 = os_log_type_enabled(v152, v153);
                uint64_t v180 = v149;
                if (v155)
                {
                  LODWORD(v177) = v154;
                  uint64_t v156 = (uint8_t *)swift_slowAlloc();
                  *(void *)&long long v188 = swift_slowAlloc();
                  *(_DWORD *)uint64_t v156 = 136315138;
                  uint64_t v179 = (char *)(v156 + 4);
                  sub_100346D0C((unint64_t *)&qword_1004853F0);
                  uint64_t v157 = dispatch thunk of CustomStringConvertible.description.getter();
                  uint64_t v185 = (char *)sub_100010680(v157, v158, (uint64_t *)&v188);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease();
                  uint64_t v179 = *(char **)(v171 + 8);
                  ((void (*)(char *, void *))v179)(v150, v151);
                  _os_log_impl((void *)&_mh_execute_header, v152, (os_log_type_t)v177, "Data session for client %s", v156, 0xCu);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();
                }
                else
                {

                  uint64_t v179 = *(char **)(v171 + 8);
                  ((void (*)(char *, void *))v179)(v150, v151);
                }
                os_log_t v159 = v178;
                uint64_t v160 = v173;
                v170(v172, v173, v151);
                id v161 = v180;
                uint64_t v185 = v180;
                swift_beginAccess();
                type metadata accessor for Dictionary();
                id v162 = v161;
                Dictionary.subscript.setter();
                swift_endAccess();

                uint64_t v163 = (void (*)(uint64_t, void *))v179;
                ((void (*)(char *, void *))v179)(v182, v151);
                v163(v174, v151);
                v163((uint64_t)v160, v151);
                return 1;
              }
            }

            swift_bridgeObjectRelease();
LABEL_53:
            unint64_t v140 = *(void (**)(char *, void *))(v171 + 8);
            v140(v182, v37);
            v140((char *)v174, v37);
            v140(v173, v37);
            return 0;
          }
        }
        goto LABEL_53;
      }
    }
LABEL_31:
    (*(void (**)(char *, void *))(v171 + 8))(v173, v37);
    return 0;
  }
  uint64_t v59 = v58;
  uint64_t v60 = (char *)[v40 effectiveLocalEndpoint];
  int v61 = v37;
  Swift::String v62 = v173;
  uint64_t v63 = v171;
  if (!v60)
  {
LABEL_39:

    (*(void (**)(char *, void *))(v63 + 8))(v62, v37);
    return 0;
  }
  unint64_t v64 = v60;
  self;
  uint64_t v65 = (void *)swift_dynamicCastObjCClass();
  if (!v65)
  {

    goto LABEL_39;
  }
  uint64_t v167 = v35;
  id v66 = [v65 port];
  uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v69 = v68;

  uint64_t v70 = sub_100342818(v67, v69);
  if ((v70 & 0x10000) != 0)
  {
    (*(void (**)(char *, void *))(v63 + 8))(v62, v61);

    return 0;
  }
  unsigned __int16 v71 = v70;
  uint64_t v181 = v64;
  id v166 = v40;
  id v72 = [v59 bonjourServiceType];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v73 = objc_allocWithZone((Class)WiFiAwarePublishConfiguration);
  NSString v74 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v75 = [v73 initWithServiceName:v74];

  [v75 setAuthenticationType:0];
  uint64_t v76 = (char *)[objc_allocWithZone((Class)WiFiAwarePublishServiceSpecificInfo) init];
  id v77 = [v59 bonjourServiceName];
  [v76 setInstanceName:v77];

  uint64_t v182 = v76;
  [v75 setServiceSpecificInfo:v76];
  uint64_t v78 = v62;
  id v79 = [objc_allocWithZone((Class)WiFiAwarePublishDatapathConfiguration) initWithServiceType:0 securityConfiguration:0];
  id v80 = [objc_allocWithZone((Class)WiFiAwarePublishDatapathServiceSpecificInfo) initWithProtocolType:0 servicePort:v71];
  [v79 setServiceSpecificInfo:v80];
  [v75 setDatapathConfiguration:v79];
  os_log_type_t v81 = (char *)v184[10];
  Swift::String v82 = (char *)v184[11];
  uint64_t v83 = (objc_class *)type metadata accessor for NANNetworkAgent.PublisherClient();
  unint64_t v84 = v61;
  uint64_t v85 = (uint64_t)v179;
  uint64_t v184 = v84;
  uint64_t v183 = v59;
  uint64_t v86 = v170;
  ((void (*)(char *, char *))v170)(v179, v78);
  id v87 = v175;
  unint64_t v88 = (char *)v75;
  id v89 = objc_allocWithZone(v83);
  uint64_t v176 = (char *)sub_100344538(v87, v85, v88);
  uint64_t v177 = v82;
  uint64_t v179 = v81;
  uint64_t v180 = v88;
  id v169 = v80;
  uint64_t v129 = (uint64_t)v182;
  id v175 = v87;
  uint64_t v130 = v178;
  uint64_t v131 = v184;
  v86(v178, v173, v184);
  os_log_type_t v132 = Logger.logObject.getter();
  os_log_type_t v133 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v132, v133))
  {
    uint64_t v135 = (uint8_t *)swift_slowAlloc();
    v187[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v135 = 136315138;
    uint64_t v174 = (uint64_t)(v135 + 4);
    sub_100346D0C((unint64_t *)&qword_1004853F0);
    uint64_t v136 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)&long long v188 = sub_100010680(v136, v137, v187);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v138 = *(char **)(v171 + 8);
    uint64_t v174 = (v171 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v139 = v131;
    uint64_t v178 = v138;
    ((void (*)(char *, void *))v138)(v130, v131);
    _os_log_impl((void *)&_mh_execute_header, v132, v133, "Publishing for client %s", v135, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v141 = *(char **)(v171 + 8);
    uint64_t v174 = (v171 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v139 = v131;
    uint64_t v178 = v141;
    ((void (*)(char *, void *))v141)(v130, v131);
  }
  uint64_t v142 = (void *)v129;
  uint64_t v143 = v79;
  int v144 = v169;
  id v145 = v181;
  uint64_t v146 = v173;
  v170(v172, v173, v139);
  uint64_t v147 = v176;
  *(void *)&long long v188 = v176;
  swift_beginAccess();
  type metadata accessor for NANNetworkAgent.Client();
  sub_100346D0C(&qword_100487710);
  type metadata accessor for Dictionary();
  id v148 = v147;
  Dictionary.subscript.setter();
  swift_endAccess();

  ((void (*)(char *, void *))v178)(v146, v139);
  return 1;
}

id sub_1003427BC(void *a1, uint64_t a2, void *a3)
{
  id v7 = objc_allocWithZone(v3);
  return sub_100343E40(a1, a2, a3);
}

uint64_t sub_100342818(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    swift_bridgeObjectRelease();
    int v18 = 0;
    int v9 = 1;
    return v18 | (v9 << 16);
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((a1 & 0x1000000000000000) != 0) {
        uint64_t v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      unsigned int v7 = sub_10034575C(v6, v4, 10);
      LOWORD(v8) = v7;
      int v9 = HIWORD(v7) & 1;
      goto LABEL_38;
    }
    v22[0] = a1;
    v22[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    __int16 v10 = a1;
    if (a1 == 43)
    {
      if (v3)
      {
        if (v3 != 1)
        {
          unsigned int v8 = (BYTE1(a1) - 48);
          if (v8 <= 9)
          {
            uint64_t v14 = v3 - 2;
            if (v14)
            {
              uint64_t v15 = (unsigned __int8 *)v22 + 2;
              while (1)
              {
                unsigned int v16 = *v15 - 48;
                if (v16 > 9) {
                  goto LABEL_35;
                }
                if (((10 * (unsigned __int16)v8) & 0xF0000) != 0) {
                  goto LABEL_35;
                }
                unsigned int v8 = (unsigned __int16)(10 * v8) + v16;
                if ((v8 & 0x10000) != 0) {
                  goto LABEL_35;
                }
                int v9 = 0;
                ++v15;
                if (!--v14) {
                  goto LABEL_38;
                }
              }
            }
            goto LABEL_37;
          }
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (a1 != 45)
      {
        if (v3)
        {
          unsigned int v8 = (a1 - 48);
          if (v8 <= 9)
          {
            uint64_t v17 = v3 - 1;
            if (v17)
            {
              id v20 = (unsigned __int8 *)v22 + 1;
              while (1)
              {
                unsigned int v21 = *v20 - 48;
                if (v21 > 9) {
                  goto LABEL_35;
                }
                if (((10 * (unsigned __int16)v8) & 0xF0000) != 0) {
                  goto LABEL_35;
                }
                unsigned int v8 = (unsigned __int16)(10 * v8) + v21;
                if ((v8 & 0x10000) != 0) {
                  goto LABEL_35;
                }
                int v9 = 0;
                ++v20;
                if (!--v17) {
                  goto LABEL_38;
                }
              }
            }
            goto LABEL_37;
          }
        }
        goto LABEL_35;
      }
      if (v3)
      {
        if (v3 != 1 && (BYTE1(a1) - 48) <= 9u)
        {
          __int16 v10 = 0;
          unsigned int v8 = -(BYTE1(a1) - 48);
          if ((v8 & 0xFFFF0000) == 0)
          {
            uint64_t v11 = v3 - 2;
            if (v11)
            {
              uint64_t v12 = (unsigned __int8 *)v22 + 2;
              while (1)
              {
                unsigned int v13 = *v12 - 48;
                if (v13 > 9) {
                  goto LABEL_35;
                }
                if (((10 * (unsigned __int16)v8) & 0xF0000) != 0) {
                  goto LABEL_35;
                }
                unsigned int v8 = (unsigned __int16)(10 * v8) - v13;
                if ((v8 & 0xFFFF0000) != 0) {
                  goto LABEL_35;
                }
                int v9 = 0;
                ++v12;
                if (!--v11) {
                  goto LABEL_38;
                }
              }
            }
LABEL_37:
            int v9 = 0;
            goto LABEL_38;
          }
LABEL_53:
          int v9 = 1;
          LOWORD(v8) = v10;
          goto LABEL_38;
        }
LABEL_35:
        LOWORD(v8) = 0;
        int v9 = 1;
LABEL_38:
        swift_bridgeObjectRelease();
        goto LABEL_39;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_53;
  }
  unsigned int v8 = sub_10034567C(a1, a2, 10);
  swift_bridgeObjectRelease();
  int v9 = HIWORD(v8) & 1;
LABEL_39:
  int v18 = (unsigned __int16)v8;
  if (v9) {
    int v18 = 0;
  }
  return v18 | (v9 << 16);
}

id sub_100342A8C(void *a1, uint64_t a2, void *a3)
{
  id v7 = objc_allocWithZone(v3);
  return sub_100344538(a1, a2, a3);
}

id sub_100342AE8(void *a1, uint64_t a2, void *a3)
{
  id v7 = objc_allocWithZone(v3);
  return sub_100344F90(a1, a2, a3);
}

uint64_t sub_100342B44(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else {
    uint64_t v4 = 0;
  }
  id v5 = a1;
  char v6 = sub_100340FD4(v4);

  swift_bridgeObjectRelease();
  return v6 & 1;
}

uint64_t sub_100342BC8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = swift_isaMask & *v2;
  sub_100010BCC(&qword_1004862B0);
  __chkstk_darwin();
  char v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  __int16 v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin();
  unsigned int v13 = (char *)&v27 - v12;
  if (!a1)
  {
    __break(1u);
    return result;
  }
  uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v31 = v14;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v15 = sub_10039F920((uint64_t)v32), (v16 & 1) != 0))
  {
    sub_1000107A4(*(void *)(a1 + 56) + 32 * v15, (uint64_t)&v33);
  }
  else
  {
    long long v33 = 0u;
    long long v34 = 0u;
  }
  sub_100346DB8((uint64_t)v32);
  if (!*((void *)&v34 + 1))
  {
    sub_1000380B4((uint64_t)&v33, &qword_10047D0D0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    return sub_1000380B4((uint64_t)v6, &qword_1004862B0);
  }
  int v17 = swift_dynamicCast();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, v17 ^ 1u, 1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1) {
    return sub_1000380B4((uint64_t)v6, &qword_1004862B0);
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v6, v7);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v13, v7);
  int v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v29 = v4;
    unsigned int v21 = (uint8_t *)v20;
    uint64_t v28 = swift_slowAlloc();
    v32[0] = v28;
    *(_DWORD *)unsigned int v21 = 136315138;
    uint64_t v27 = v21 + 4;
    sub_100346D0C((unint64_t *)&qword_1004853F0);
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)&long long v33 = sub_100010680(v22, v23, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v24 = *(void (**)(char *, uint64_t))(v8 + 8);
    v24(v10, v7);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Terminating client %s", v21, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v24 = *(void (**)(char *, uint64_t))(v8 + 8);
    v24(v10, v7);
  }
  swift_beginAccess();
  type metadata accessor for NANNetworkAgent.Client();
  sub_100346D0C(&qword_100487710);
  type metadata accessor for Dictionary();
  Dictionary.removeValue(forKey:)();
  uint64_t v25 = swift_endAccess();
  uint64_t v26 = (void *)v33;
  if ((void)v33)
  {
    (*(void (**)(uint64_t))((swift_isaMask & *(void *)v33) + 0x98))(v25);
  }
  return ((uint64_t (*)(char *, uint64_t))v24)(v13, v7);
}

uint64_t sub_1003430E0(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else {
    uint64_t v4 = 0;
  }
  id v5 = a1;
  sub_100342BC8(v4);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100343168(void *a1, uint64_t a2)
{
  return sub_100343394(a1, a2, (uint64_t (*)(void, void))sub_1003462D4);
}

uint64_t sub_100343180(uint64_t a1)
{
  uint64_t v2 = a1 + qword_1004889A0;
  uint64_t v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_bridgeObjectRelease();

  uint64_t v4 = a1 + qword_1004889B0;
  uint64_t v5 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_unownedRelease();

  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for NANNetworkAgent()
{
  return sub_100038354();
}

uint64_t sub_100343290()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100343334()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t sub_100343344@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = os_transaction_create();
  if (result) {
    *a1 = result;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t sub_10034337C(void *a1, uint64_t a2)
{
  return sub_100343394(a1, a2, (uint64_t (*)(void, void))sub_100346304);
}

uint64_t sub_100343394(void *a1, uint64_t a2, uint64_t (*a3)(void, void))
{
  return a3(*(void *)((swift_isaMask & *a1) + 0x50), *(void *)((swift_isaMask & *a1) + 0x58));
}

id sub_1003433DC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NANNetworkAgent.Client();
  return [super dealloc];
}

uint64_t sub_100343450(uint64_t a1)
{
  uint64_t v1 = a1 + qword_100487480;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_unknownObjectWeakDestroy();

  return swift_unknownObjectRelease();
}

uint64_t type metadata accessor for NANNetworkAgent.Client()
{
  return sub_100038354();
}

uint64_t sub_1003434F8()
{
  return swift_initClassMetadata2();
}

uint64_t sub_100343554()
{
  return swift_unknownObjectWeakLoadStrong();
}

void sub_100343564(char a1)
{
  *(unsigned char *)(v1 + qword_100487520) = a1;
  sub_100346188();
}

void sub_100343574()
{
  uint64_t v1 = v0;
  type metadata accessor for NANSubscribe.Configuration();
  __chkstk_darwin();
  uint64_t v3 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = swift_unknownObjectWeakLoadStrong();
    if (v4)
    {
      uint64_t v5 = (void *)v4;
      uint64_t v6 = v4 + qword_100488970;
      swift_beginAccess();
      sub_100346C28(v6, (uint64_t)v3);

      uint64_t v7 = *((void *)v3 + 1);
      uint64_t v8 = *((void *)v3 + 2);
      swift_bridgeObjectRetain();
      sub_100346C8C((uint64_t)v3);
      uint64_t v9 = (uint64_t *)&v1[qword_100487528];
      swift_beginAccess();
      uint64_t v10 = *v9;
      __chkstk_darwin();
      *(&v34 - 4) = v7;
      *(&v34 - 3) = v8;
      *(&v34 - 2) = (uint64_t)v1;
      swift_bridgeObjectRetain();
      unint64_t v11 = (unint64_t)sub_10034021C((void (*)(uint64_t *__return_ptr, uint64_t))sub_100346CE8, (uint64_t)(&v34 - 6), v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v12 = *(void **)&Strong[qword_100487370];
      if (v11 >> 62)
      {
        sub_10006F314(0, (unint64_t *)&unk_1004876E8);
        id v33 = v12;
        swift_bridgeObjectRetain();
        _bridgeCocoaArray<A>(_:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        id v13 = v12;
        swift_bridgeObjectRetain();
        dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
        sub_10006F314(0, (unint64_t *)&unk_1004876E8);
      }
      swift_bridgeObjectRelease();
      sub_10006F314(0, (unint64_t *)&unk_1004876E8);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      Class v15 = UUID._bridgeToObjectiveC()().super.isa;
      unsigned int v16 = [v12 assignDiscoveredEndpoints:isa toClient:v15];

      int v17 = v1;
      int v18 = Logger.logObject.getter();
      if (v16)
      {
        os_log_type_t v19 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v18, v19))
        {
          uint64_t v20 = swift_slowAlloc();
          uint64_t v34 = swift_slowAlloc();
          uint64_t v37 = v34;
          *(_DWORD *)uint64_t v20 = 136315394;
          type metadata accessor for UUID();
          sub_10006F314(0, (unint64_t *)&qword_100486F58);
          sub_100346D0C(&qword_100487710);
          swift_bridgeObjectRetain();
          uint64_t v21 = Dictionary.description.getter();
          unint64_t v23 = v22;
          swift_bridgeObjectRelease();
          uint64_t v36 = sub_100010680(v21, v23, &v37);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v20 + 12) = 2080;

          sub_100346D0C((unint64_t *)&qword_1004853F0);
          uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v36 = sub_100010680(v24, v25, &v37);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          uint64_t v26 = "Assigned %s to client %s";
LABEL_13:
          _os_log_impl((void *)&_mh_execute_header, v18, v19, v26, (uint8_t *)v20, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          return;
        }
      }
      else
      {
        os_log_type_t v19 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v18, v19))
        {
          uint64_t v20 = swift_slowAlloc();
          uint64_t v34 = swift_slowAlloc();
          uint64_t v37 = v34;
          *(_DWORD *)uint64_t v20 = 136315394;
          type metadata accessor for UUID();
          sub_10006F314(0, (unint64_t *)&qword_100486F58);
          sub_100346D0C(&qword_100487710);
          swift_bridgeObjectRetain();
          uint64_t v28 = Dictionary.description.getter();
          unint64_t v30 = v29;
          swift_bridgeObjectRelease();
          uint64_t v36 = sub_100010680(v28, v30, &v37);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v20 + 12) = 2080;

          sub_100346D0C((unint64_t *)&qword_1004853F0);
          uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v36 = sub_100010680(v31, v32, &v37);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          uint64_t v26 = "Failed to assign %s to client %s";
          goto LABEL_13;
        }
      }
    }
    else
    {
      id v27 = Strong;
    }
  }
}

void sub_100343C00(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v14 = a2;
  sub_100010BCC(&qword_100487708);
  uint64_t v3 = __chkstk_darwin();
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(int *)(v3 + 56);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v5, a1, v7);
  *(void *)&v5[v6] = *(void *)(a1 + v6);
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v5, v7);
  swift_bridgeObjectRetain();
  UUID.uuidString.getter();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v12 = [self endpointWithName:v9 type:v10 domain:v11];

  void *v14 = v12;
}

void sub_100343DE0(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + qword_100487528);
  swift_beginAccess();
  void *v3 = a1;
  swift_bridgeObjectRelease();
  sub_100343574();
}

id sub_100343E40(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = v4;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  id v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectWeakInit();
  *(unsigned char *)(v3 + qword_100487520) = 0;
  *(void *)(v3 + qword_100487528) = _swiftEmptyDictionarySingleton;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  uint64_t v13 = (void *)sub_100345F04((uint64_t)a1, (uint64_t)v12);
  swift_unownedRetainStrong();
  id v14 = v13;
  sub_100354870();
  swift_release();
  id v15 = v14;
  uint64_t v16 = sub_1002FBC64((uint64_t)a3, (uint64_t)v15);
  if (v5)
  {

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
  }
  else
  {
    int v17 = (void *)v16;

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
    swift_unknownObjectWeakAssign();
  }
  return v15;
}

uint64_t sub_100344048()
{
  swift_unknownObjectWeakDestroy();

  return swift_bridgeObjectRelease();
}

id sub_100344088()
{
  return sub_100345214(&qword_100487520, (uint64_t (*)(void, void, void))type metadata accessor for NANNetworkAgent.SubscriberClient);
}

id sub_1003440A8(void *a1)
{
  id v1 = a1;
  return sub_100344088();
}

uint64_t sub_1003440D0()
{
  swift_unknownObjectWeakDestroy();

  return swift_bridgeObjectRelease();
}

void sub_10034411C()
{
  *(unsigned char *)(v0 + qword_100487520) = 0;
  sub_100346188();
}

void sub_10034412C(void *a1)
{
  id v1 = a1;
  sub_100346334();
}

void sub_100344174(void *a1)
{
  id v1 = a1;
  sub_100346348();
}

void sub_1003441BC(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  uint64_t v8 = (uint64_t *)(v2 + qword_100487528);
  swift_beginAccess();
  id v9 = a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v8;
  *uint64_t v8 = 0x8000000000000000;
  sub_100295B50((uint64_t)v9, (uint64_t)v7, isUniquelyReferenced_nonNull_native);
  *uint64_t v8 = v11;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_endAccess();
  sub_100343574();
}

void sub_10034430C(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  sub_1003441BC(v4);
}

void sub_100344374(int a1, void *a2)
{
  id v5 = (uint64_t *)(v2 + qword_100487528);
  swift_beginAccess();
  uint64_t v6 = *v5;
  swift_bridgeObjectRetain();
  id v7 = a2;
  uint64_t v8 = sub_1003468A8(v6, a1, v7);
  swift_bridgeObjectRelease();

  sub_100343DE0(v8);
}

void sub_100344408(void *a1, uint64_t a2, int a3, void *a4)
{
  id v6 = a4;
  id v7 = a1;
  sub_100344374(a3, v6);
}

uint64_t type metadata accessor for NANNetworkAgent.SubscriberClient()
{
  return sub_100038354();
}

uint64_t sub_100344494()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1003444E0()
{
  return swift_unknownObjectWeakLoadStrong();
}

void sub_1003444F0(char a1)
{
  *(unsigned char *)(v1 + qword_1004875B8[0]) = a1;
  sub_100346238(qword_1004875B8, (uint64_t)&qword_1004875B0, (void (*)(void))sub_1002B3CC0);
}

id sub_100344538(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = v4;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  id v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectWeakInit();
  *(unsigned char *)(v3 + qword_1004875B8) = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  uint64_t v13 = (void *)sub_100345F04((uint64_t)a1, (uint64_t)v12);
  swift_unownedRetainStrong();
  id v14 = v13;
  sub_100354870();
  swift_release();
  id v15 = v14;
  uint64_t v16 = sub_1002FBC90((uint64_t)a3, (uint64_t)v15);
  if (v5)
  {

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
  }
  else
  {
    int v17 = (void *)v16;

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
    swift_unknownObjectWeakAssign();
  }
  return v15;
}

uint64_t sub_10034472C()
{
  return swift_unknownObjectWeakDestroy();
}

id sub_10034473C()
{
  return sub_100345214(qword_1004875B8, (uint64_t (*)(void, void, void))type metadata accessor for NANNetworkAgent.PublisherClient);
}

id sub_10034475C(void *a1)
{
  id v1 = a1;
  return sub_10034473C();
}

uint64_t sub_100344784()
{
  return swift_unknownObjectWeakDestroy();
}

void sub_100344794()
{
  *(unsigned char *)(v0 + qword_1004875B8[0]) = 0;
  sub_100346238(qword_1004875B8, (uint64_t)&qword_1004875B0, (void (*)(void))sub_1002B3CC0);
}

void sub_1003447D8(void *a1)
{
  id v1 = a1;
  sub_100346A58();
}

void sub_100344820(void *a1)
{
  id v1 = a1;
  sub_100346AA0((uint64_t)&qword_1004875B0, qword_1004875B8, (void (*)(void))sub_1002B3CC0);
}

void sub_10034489C(int a1, int a2, int a3, int a4, void *aBlock)
{
  uint64_t v5 = _Block_copy(aBlock);

  _Block_release(v5);
}

uint64_t type metadata accessor for NANNetworkAgent.PublisherClient()
{
  return sub_100038354();
}

uint64_t sub_1003448E0()
{
  return swift_initClassMetadata2();
}

uint64_t sub_100344940()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t sub_100344950(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + qword_100487648);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

void sub_10034496C(char a1)
{
  *(unsigned char *)(v1 + qword_100487650) = a1;
  sub_100346238(&qword_100487650, (uint64_t)&qword_100487640, sub_1002D3CAC);
}

void sub_1003449B4(void *a1)
{
  uint64_t v2 = v1;
  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return;
  }
  uint64_t v5 = qword_100487658;
  id v6 = *(void **)&v1[qword_100487658];
  uint64_t v37 = Strong;
  if (!v6)
  {
    if (!a1) {
      goto LABEL_19;
    }
    id v6 = 0;
    uint64_t v10 = *(void **)&Strong[qword_100487370];
LABEL_11:
    sub_10006F314(0, (unint64_t *)&unk_1004876E8);
    id v12 = v10;
    id v13 = v6;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    Class v15 = UUID._bridgeToObjectiveC()().super.isa;
    unsigned int v16 = [v12 assignResolvedEndpoints:isa toClient:v15];

    uint64_t v38 = v2;
    int v17 = Logger.logObject.getter();
    if (v16)
    {
      os_log_type_t v18 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = swift_slowAlloc();
        uint64_t v39 = swift_slowAlloc();
        *(_DWORD *)uint64_t v19 = 136315394;
        uint64_t v20 = *(void **)&v2[v5];
        if (v20)
        {
          id v21 = [v20 description];
          uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v24 = v23;
        }
        else
        {
          uint64_t v22 = 1701736302;
          unint64_t v24 = 0xE400000000000000;
        }
        sub_100010680(v22, v24, &v39);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v19 + 12) = 2080;

        type metadata accessor for UUID();
        sub_100346D0C((unint64_t *)&qword_1004853F0);
        uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
        sub_100010680(v31, v32, &v39);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        os_log_type_t v33 = v18;
        uint64_t v34 = "Assigned %s to client %s";
LABEL_26:
        _os_log_impl((void *)&_mh_execute_header, v17, v33, v34, (uint8_t *)v19, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        return;
      }
    }
    else
    {
      os_log_type_t v25 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v25))
      {
        uint64_t v19 = swift_slowAlloc();
        uint64_t v39 = swift_slowAlloc();
        *(_DWORD *)uint64_t v19 = 136315394;
        uint64_t v26 = *(void **)&v2[v5];
        if (v26)
        {
          id v27 = [v26 description];
          uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v30 = v29;
        }
        else
        {
          uint64_t v28 = 1701736302;
          unint64_t v30 = 0xE400000000000000;
        }
        sub_100010680(v28, v30, &v39);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v19 + 12) = 2080;

        type metadata accessor for UUID();
        sub_100346D0C((unint64_t *)&qword_1004853F0);
        uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
        sub_100010680(v35, v36, &v39);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        os_log_type_t v33 = v25;
        uint64_t v34 = "Failed to assign %s to client %s";
        goto LABEL_26;
      }
    }

    uint64_t Strong = v38;
    goto LABEL_19;
  }
  if (!a1)
  {
    uint64_t v10 = *(void **)&Strong[qword_100487370];
LABEL_10:
    sub_100010BCC(&qword_1004876F8);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_1003D70E0;
    *(void *)(v11 + 32) = v6;
    uint64_t v39 = v11;
    specialized Array._endMutation()();
    goto LABEL_11;
  }
  sub_10006F314(0, &qword_100487700);
  id v7 = a1;
  id v8 = v6;
  char v9 = static NSObject.== infix(_:_:)();

  if ((v9 & 1) == 0)
  {
    id v6 = *(void **)&v2[v5];
    uint64_t v10 = *(void **)&v37[qword_100487370];
    if (!v6) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t Strong = v37;
LABEL_19:
}

void sub_100344F34(void *a1)
{
  uint64_t v2 = *(void **)(v1 + qword_100487658);
  *(void *)(v1 + qword_100487658) = a1;
  id v3 = a1;
  sub_1003449B4(v2);
}

id sub_100344F90(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = v4;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  id v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectWeakInit();
  id v13 = (void *)(v3 + qword_100487648);
  void *v13 = 0;
  v13[1] = 0;
  *(unsigned char *)(v3 + qword_100487650) = 0;
  *(void *)(v3 + qword_100487658) = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  id v14 = (void *)sub_100345F04((uint64_t)a1, (uint64_t)v12);
  swift_unownedRetainStrong();
  id v15 = v14;
  sub_100354870();
  swift_release();
  id v16 = v15;
  uint64_t v17 = sub_1002FBD54((uint64_t)a3, (uint64_t)v16);
  if (v5)
  {

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
  }
  else
  {
    os_log_type_t v18 = (void *)v17;

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
    swift_unknownObjectWeakAssign();
  }
  return v16;
}

void sub_1003451A0()
{
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void **)(v0 + qword_100487658);
}

id sub_1003451F4()
{
  return sub_100345214(&qword_100487650, (uint64_t (*)(void, void, void))type metadata accessor for NANNetworkAgent.DataSessionClient);
}

id sub_100345214(void *a1, uint64_t (*a2)(void, void, void))
{
  uint64_t v3 = swift_isaMask & *v2;
  *((unsigned char *)v2 + *a1) = 0;
  uint64_t v4 = (objc_class *)a2(0, *(void *)(v3 + 160), *(void *)(v3 + 168));
  v6.receiver = v2;
  v6.super_class = v4;
  return [super dealloc];
}

id sub_100345298(void *a1)
{
  id v1 = a1;
  return sub_1003451F4();
}

void sub_1003452C0(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + qword_100487658);
}

void sub_100345320()
{
  *(unsigned char *)(v0 + qword_100487650) = 0;
  sub_100346238(&qword_100487650, (uint64_t)&qword_100487640, sub_1002D3CAC);
}

void sub_100345364(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  id v7 = a4;
  id v8 = a1;
  sub_100346AF8(a5);
}

void sub_1003453D0(void *a1)
{
  id v1 = a1;
  sub_100346AA0((uint64_t)&qword_100487640, &qword_100487650, sub_1002D3CAC);
}

void sub_10034544C(int a1, id a2)
{
  if (a2)
  {
    unsigned __int16 v3 = (unsigned __int16)[a2 servicePort];
    uint64_t v4 = *(void **)(v2 + qword_100487648 + 8);
    if (v4)
    {
      unsigned __int16 v5 = v3;
      uint64_t v6 = *(void *)(v2 + qword_100487648);
      swift_bridgeObjectRetain();
      uint64_t v13 = WiFiMACAddress.ipv6LinkLocalAddressString.getter();
      uint64_t v14 = v7;
      swift_bridgeObjectRetain();
      v8._uint64_t countAndFlagsBits = 37;
      v8._object = (void *)0xE100000000000000;
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v9._uint64_t countAndFlagsBits = v6;
      v9._object = v4;
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      LOWORD(v13) = v5;
      dispatch thunk of CustomStringConvertible.description.getter();
      NSString v10 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      NSString v11 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v12 = [self endpointWithHostname:v10 port:v11];

      sub_100344F34(v12);
    }
  }
}

void sub_1003455B8(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = a1;
  sub_10034544C((int)v6, a4);
}

void sub_100345638(int a1, int a2, int a3, void *aBlock)
{
  uint64_t v4 = _Block_copy(aBlock);

  _Block_release(v4);
}

uint64_t type metadata accessor for NANNetworkAgent.DataSessionClient()
{
  return sub_100038354();
}

uint64_t sub_10034567C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    id v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = sub_100345A04();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    id v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    id v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  unsigned int v11 = sub_10034575C(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11 & 0x1FFFF;
}

unsigned __int8 *sub_10034575C(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v14 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v15 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v16 = a3 + 55;
        }
        else
        {
          unsigned __int8 v15 = 97;
          unsigned __int8 v16 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v17 = a3 + 48;
        }
        else {
          unsigned __int8 v17 = 58;
        }
        if (result)
        {
          LOWORD(v8) = 0;
          os_log_type_t v18 = result + 1;
          do
          {
            unsigned int v19 = *v18;
            if (v19 < 0x30 || v19 >= v17)
            {
              if (v19 < 0x41 || v19 >= v16)
              {
                unsigned __int16 v12 = 0;
                int v13 = 1;
                if (v19 < 0x61 || v19 >= v15) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                char v20 = -87;
              }
              else
              {
                char v20 = -55;
              }
            }
            else
            {
              char v20 = -48;
            }
            if ((((unsigned __int16)v8 * (unsigned __int16)a3) & 0xFFFF0000) != 0) {
              goto LABEL_72;
            }
            int v8 = (unsigned __int16)(v8 * a3) + (v19 + v20);
            if ((v8 & 0x10000) != 0) {
              goto LABEL_72;
            }
            ++v18;
            --v14;
          }
          while (v14);
LABEL_48:
          int v13 = 0;
          unsigned __int16 v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 16));
        }
        goto LABEL_71;
      }
LABEL_72:
      unsigned __int16 v12 = 0;
      int v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 16));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v21 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v22 = a3 + 55;
        }
        else
        {
          unsigned __int8 v21 = 97;
          unsigned __int8 v22 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v23 = a3 + 48;
        }
        else {
          unsigned __int8 v23 = 58;
        }
        if (result)
        {
          LOWORD(v24) = 0;
          do
          {
            unsigned int v25 = *result;
            if (v25 < 0x30 || v25 >= v23)
            {
              if (v25 < 0x41 || v25 >= v22)
              {
                unsigned __int16 v12 = 0;
                int v13 = 1;
                if (v25 < 0x61 || v25 >= v21) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                char v26 = -87;
              }
              else
              {
                char v26 = -55;
              }
            }
            else
            {
              char v26 = -48;
            }
            if ((((unsigned __int16)v24 * (unsigned __int16)a3) & 0xFFFF0000) != 0) {
              goto LABEL_72;
            }
            int v24 = (unsigned __int16)(v24 * a3) + (v25 + v26);
            if ((v24 & 0x10000) != 0) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }
          while (a2);
          int v13 = 0;
          unsigned __int16 v12 = v24;
          return (unsigned __int8 *)(v12 | (v13 << 16));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }
        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          LOWORD(v8) = 0;
          unint64_t v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned __int16 v12 = 0;
                int v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                char v11 = -87;
              }
              else
              {
                char v11 = -55;
              }
            }
            else
            {
              char v11 = -48;
            }
            if ((((unsigned __int16)v8 * (unsigned __int16)a3) & 0xFFFF0000) != 0) {
              goto LABEL_72;
            }
            int v8 = (unsigned __int16)(v8 * a3) - (v10 + v11);
            if ((v8 & 0xFFFF0000) != 0) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }
LABEL_71:
        unsigned __int16 v12 = 0;
        int v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 16));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100345A04()
{
  unint64_t v0 = String.subscript.getter();
  uint64_t v4 = sub_100345A84(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_100345A84(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = sub_100345BDC(a1, a2, a3, a4);
    if (!v9
      || (uint64_t v10 = v9,
          char v11 = sub_100010B64(v9, 0),
          unint64_t v12 = sub_100345CDC((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4),
          swift_bridgeObjectRetain(),
          swift_bridgeObjectRelease(),
          v12 == v10))
    {
      uint64_t v13 = static String._uncheckedFromUTF8(_:)();
      swift_release();
      return v13;
    }
    __break(1u);
  }
  else
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      v14[0] = a3;
      v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      return static String._uncheckedFromUTF8(_:)();
    }
    if ((a3 & 0x1000000000000000) != 0) {
      goto LABEL_4;
    }
  }
  _StringObject.sharedUTF8.getter();
LABEL_4:

  return static String._uncheckedFromUTF8(_:)();
}

uint64_t sub_100345BDC(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v5 = a3;
  unint64_t v6 = a2;
  unint64_t v7 = a1;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((a1 & 0xC) == 4 << v8)
  {
    a1 = sub_10024AF24(a1, a3, a4);
    unint64_t v7 = a1;
  }
  if ((v6 & 0xC) == v9)
  {
    a1 = sub_10024AF24(v6, v5, v4);
    unint64_t v6 = a1;
    if ((v4 & 0x1000000000000000) == 0) {
      return (v6 >> 16) - (v7 >> 16);
    }
  }
  else if ((v4 & 0x1000000000000000) == 0)
  {
    return (v6 >> 16) - (v7 >> 16);
  }
  unint64_t v11 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    unint64_t v11 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (v11 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v11 >= v6 >> 16)
  {
    a1 = v7;
    a2 = v6;
    a3 = v5;
    a4 = v4;
    return String.UTF8View._foreignDistance(from:to:)(a1, a2, a3, a4);
  }
  __break(1u);
  return String.UTF8View._foreignDistance(from:to:)(a1, a2, a3, a4);
}

unint64_t sub_100345CDC(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    _OWORD v9[2] = a6;
    _OWORD v9[3] = a7;
    void v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = sub_10024AF24(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    uint64_t result = sub_10024AF24(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_100345EF0()
{
  return *(void *)(v0 + qword_1004889A8);
}

uint64_t sub_100345F04(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakInit();
  unint64_t v4 = &v2[qword_100487480];
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v4, a2, v5);
  swift_unknownObjectWeakAssign();
  unint64_t v7 = v2;
  uint64_t v8 = UUID.uuidString.getter();
  uint64_t v10 = v8;
  uint64_t v11 = v9;
  if ((v9 & 0x1000000000000000) != 0 || !(v9 & 0x2000000000000000 | v8 & 0x1000000000000000))
  {
    sub_100010BCC(&qword_1004876E0);
    _StringGuts._slowWithCString<A>(_:)();
LABEL_7:
    swift_bridgeObjectRelease();
LABEL_10:
    *(void *)&v7[qword_100487490] = v17;

    v16.receiver = v7;
    v16.super_class = (Class)type metadata accessor for NANNetworkAgent.Client();
    id v15 = [super init];
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a2, v5);
    return (uint64_t)v15;
  }
  __chkstk_darwin();
  if ((v11 & 0x2000000000000000) == 0)
  {
    if ((v10 & 0x1000000000000000) != 0)
    {
      uint64_t v12 = (v11 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v13 = v10 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v12 = _StringObject.sharedUTF8.getter();
    }
    uint64_t v17 = sub_100068878(v12, v13, (uint64_t (*)(void))sub_10006D5A8);
    goto LABEL_7;
  }
  uint64_t result = os_transaction_create();
  if (result)
  {
    uint64_t v17 = result;
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

void sub_100346188()
{
  if ((*(unsigned char *)(v0 + qword_100487520) & 1) == 0)
  {
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      unint64_t v2 = (void *)Strong;
      unint64_t v3 = (void *)(v0 + qword_100487528);
      swift_beginAccess();
      void *v3 = _swiftEmptyDictionarySingleton;
      swift_bridgeObjectRelease();
      sub_100343574();
      sub_100320E48();
      swift_unknownObjectWeakAssign();
    }
  }
}

void sub_100346238(void *a1, uint64_t a2, void (*a3)(void))
{
  if ((*(unsigned char *)(v3 + *a1) & 1) == 0)
  {
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      id v6 = (id)Strong;
      a3();
      swift_unknownObjectWeakAssign();
    }
  }
}

void sub_1003462D4()
{
}

void sub_100346304()
{
}

void sub_100346334()
{
  *(unsigned char *)(v0 + qword_100487520) = 1;
  sub_100346188();
}

void sub_100346348()
{
  swift_unknownObjectWeakAssign();
  *(unsigned char *)(v0 + qword_100487520) = 0;

  sub_100346188();
}

uint64_t sub_10034638C(unint64_t *a1, uint64_t a2, void *a3, int a4, uint64_t a5)
{
  uint64_t v49 = a2;
  uint64_t v54 = a5;
  int v60 = a4;
  uint64_t v50 = a1;
  uint64_t v62 = sub_100010BCC(&qword_100487708);
  __chkstk_darwin();
  uint64_t v59 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  id v57 = (char *)&v48 - v7;
  __chkstk_darwin();
  uint64_t v9 = (char *)&v48 - v8;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t result = __chkstk_darwin();
  unint64_t v68 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = 0;
  int64_t v15 = 0;
  int v61 = a3;
  objc_super v16 = a3;
  uint64_t v17 = (uint64_t)v9;
  uint64_t v18 = v16[8];
  uint64_t v52 = v16 + 8;
  uint64_t v19 = 1 << *((unsigned char *)v16 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & v18;
  int64_t v53 = (unint64_t)(v19 + 63) >> 6;
  uint64_t v55 = v12 + 16;
  id v56 = v9;
  uint64_t v58 = v12;
  uint64_t v67 = v12 + 8;
  while (2)
  {
    uint64_t v51 = v14;
    while (1)
    {
      if (v21)
      {
        uint64_t v64 = (v21 - 1) & v21;
        int64_t v65 = v15;
        unint64_t v24 = __clz(__rbit64(v21)) | (v15 << 6);
        uint64_t v25 = v62;
      }
      else
      {
        int64_t v26 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
          __break(1u);
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }
        if (v26 >= v53) {
          return sub_1003691C8(v50, v49, v51, v61);
        }
        unint64_t v27 = v52[v26];
        int64_t v28 = v15 + 1;
        if (!v27)
        {
          int64_t v28 = v15 + 2;
          if (v15 + 2 >= v53) {
            return sub_1003691C8(v50, v49, v51, v61);
          }
          unint64_t v27 = v52[v28];
          if (!v27)
          {
            int64_t v28 = v15 + 3;
            if (v15 + 3 >= v53) {
              return sub_1003691C8(v50, v49, v51, v61);
            }
            unint64_t v27 = v52[v28];
            if (!v27)
            {
              uint64_t v29 = v15 + 4;
              if (v15 + 4 >= v53) {
                return sub_1003691C8(v50, v49, v51, v61);
              }
              unint64_t v27 = v52[v29];
              if (!v27)
              {
                while (1)
                {
                  int64_t v28 = v29 + 1;
                  if (__OFADD__(v29, 1)) {
                    goto LABEL_28;
                  }
                  if (v28 >= v53) {
                    return sub_1003691C8(v50, v49, v51, v61);
                  }
                  unint64_t v27 = v52[v28];
                  ++v29;
                  if (v27) {
                    goto LABEL_22;
                  }
                }
              }
              int64_t v28 = v15 + 4;
            }
          }
        }
LABEL_22:
        uint64_t v64 = (v27 - 1) & v27;
        int64_t v65 = v28;
        unint64_t v24 = __clz(__rbit64(v27)) + (v28 << 6);
        uint64_t v25 = v62;
      }
      unint64_t v30 = v61;
      uint64_t v31 = v58;
      unint64_t v32 = *(void (**)(char *, unint64_t, uint64_t))(v58 + 16);
      os_log_type_t v33 = v68;
      v32(v68, v61[6] + *(void *)(v58 + 72) * v24, v10);
      uint64_t v34 = v30[7];
      unint64_t v63 = v24;
      uint64_t v35 = *(void **)(v34 + 8 * v24);
      v32((char *)v17, (unint64_t)v33, v10);
      uint64_t v36 = v10;
      uint64_t v37 = *(int *)(v25 + 48);
      *(void *)(v17 + v37) = v35;
      uint64_t v38 = v25;
      uint64_t v39 = v57;
      v32(v57, v17, v36);
      *(void *)&v39[v37] = v35;
      id v40 = v35;
      LODWORD(v35) = [v40 publishID];
      id v66 = *(void (**)(char *, uint64_t))(v31 + 8);
      v66(v39, v36);
      uint64_t v41 = *(int *)(v38 + 48);
      uint64_t v42 = v17;
      uint64_t v43 = (uint64_t)v59;
      v32(v59, v42, v36);
      *(void *)(v43 + v41) = v40;
      if (v35 != v60) {
        break;
      }
      uint64_t v44 = *(int *)(v38 + 48);
      v32(v39, v43, v36);
      *(void *)&v39[v44] = v40;
      id v45 = [v40 publisherAddress];
      sub_10006F314(0, &qword_100484BD0);
      LOBYTE(v44) = static NSObject.== infix(_:_:)();
      sub_1000380B4(v43, &qword_100487708);
      uint64_t v46 = (uint64_t)v56;
      sub_1000380B4((uint64_t)v56, &qword_100487708);

      NSString v47 = (uint64_t (*)(char *, uint64_t))v66;
      v66(v39, v36);

      uint64_t result = v47(v68, v36);
      uint64_t v17 = v46;
      uint64_t v10 = v36;
      unint64_t v21 = v64;
      int64_t v15 = v65;
      if ((v44 & 1) == 0) {
        goto LABEL_5;
      }
    }
    sub_1000380B4(v43, &qword_100487708);
    uint64_t v17 = (uint64_t)v56;
    sub_1000380B4((uint64_t)v56, &qword_100487708);

    uint64_t result = ((uint64_t (*)(char *, uint64_t))v66)(v68, v36);
    uint64_t v10 = v36;
    unint64_t v21 = v64;
    int64_t v15 = v65;
LABEL_5:
    uint64_t v22 = v51;
    *(unint64_t *)((char *)v50 + ((v63 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v63;
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v14 = v22 + 1;
    if (!v23) {
      continue;
    }
    break;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1003468A8(uint64_t a1, int a2, void *a3)
{
  char v6 = *(unsigned char *)(a1 + 32);
  unsigned int v7 = v6 & 0x3F;
  unint64_t v8 = (unint64_t)((1 << v6) + 63) >> 6;
  id v9 = a3;
  if (v7 <= 0xD || (swift_stdlib_isStackAllocationSafe() & 1) != 0)
  {
    __chkstk_darwin();
    uint64_t v10 = (char *)&v16 - ((8 * v8 + 15) & 0x3FFFFFFFFFFFFFF0);
    bzero(v10, 8 * v8);
    id v11 = v9;
    uint64_t v12 = sub_10034638C((unint64_t *)v10, v8, (void *)a1, a2, (uint64_t)v11);

    if (v3) {
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v13 = (void *)swift_slowAlloc();
    bzero(v13, 8 * v8);
    id v14 = v9;
    uint64_t v12 = sub_10034638C((unint64_t *)v13, v8, (void *)a1, a2, (uint64_t)v14);

    swift_slowDealloc();
  }
  return v12;
}

void sub_100346A58()
{
  *(unsigned char *)(v0 + qword_1004875B8[0]) = 1;
  sub_100346238(qword_1004875B8, (uint64_t)&qword_1004875B0, (void (*)(void))sub_1002B3CC0);
}

void sub_100346AA0(uint64_t a1, void *a2, void (*a3)(void))
{
  swift_unknownObjectWeakAssign();
  *(unsigned char *)(v3 + *a2) = 0;
  sub_100346238(a2, a1, a3);
}

void sub_100346AF8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 176))(a1, AssociatedTypeWitness, AssociatedConformanceWitness);
  unsigned int v7 = (uint64_t *)(v2 + qword_100487648);
  *unsigned int v7 = v6;
  v7[1] = v8;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v2 + qword_100487650) = 1;
  sub_100346238(&qword_100487650, (uint64_t)&qword_100487640, sub_1002D3CAC);
}

uint64_t sub_100346C28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NANSubscribe.Configuration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100346C8C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NANSubscribe.Configuration();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_100346CE8(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_100346D0C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for UUID();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100346D50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010BCC(&qword_100487708);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100346DB8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100346E18()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Logger();
    if (v2 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }
  return result;
}

uint64_t sub_100346F24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8 = v7;
  id v56 = a6;
  uint64_t v57 = a5;
  uint64_t v54 = a4;
  unint64_t v55 = a3;
  uint64_t v53 = a2;
  uint64_t v47 = a7;
  uint64_t v59 = sub_100010BCC(&qword_1004855F0);
  uint64_t v46 = *(void *)(v59 - 8);
  __chkstk_darwin();
  uint64_t v52 = (_DWORD *)((char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  uint64_t v50 = (uint64_t)&v46 - v11;
  __chkstk_darwin();
  uint64_t v51 = (char *)&v46 - v12;
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v48 = a1 + 64;
  uint64_t v14 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v13;
  int64_t v49 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v58 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v18 = 0;
  if (!v16) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v60 = v8;
  unint64_t v19 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (unint64_t i = v19 | (v18 << 6); ; unint64_t i = __clz(__rbit64(v22)) + (v18 << 6))
  {
    uint64_t v24 = *(void *)(v58 + 56);
    uint64_t v25 = *(void *)(v58 + 48) + 6 * i;
    __int16 v26 = *(_WORD *)(v25 + 4);
    unint64_t v27 = (int *)(type metadata accessor for AWDLPeer(0) - 8);
    uint64_t v28 = v24 + *(void *)(*(void *)v27 + 72) * i;
    uint64_t v29 = v59;
    unint64_t v30 = v51;
    int v31 = *(_DWORD *)v25;
    sub_10034C7F8(v28, (uint64_t)&v51[*(int *)(v59 + 48)], type metadata accessor for AWDLPeer);
    *(_DWORD *)unint64_t v30 = v31;
    *((_WORD *)v30 + 2) = v26;
    uint64_t v32 = (uint64_t)v30;
    uint64_t v33 = v50;
    sub_1002C0C60(v32, v50);
    uint64_t v34 = *(int *)(v29 + 48);
    uint64_t v35 = v52;
    uint64_t v36 = (uint64_t)v52 + v34;
    uint64_t v37 = v33 + v34;
    LOWORD(v34) = *(_WORD *)(v33 + 4);
    *uint64_t v52 = *(_DWORD *)v33;
    *((_WORD *)v35 + 2) = v34;
    sub_10034C7F8(v37, v36, type metadata accessor for AWDLPeer);
    uint64_t v38 = *(void *)(v36 + v27[22]);
    swift_bridgeObjectRetain();
    sub_10034C860(v36, type metadata accessor for AWDLPeer);
    unint64_t v39 = v55;
    swift_bridgeObjectRetain();
    uint64_t v40 = v57;
    swift_bridgeObjectRetain();
    id v41 = v56;
    uint64_t v42 = v60;
    LOBYTE(v24) = sub_10034B7F8(v38, v53, v39, v54, v40, v41);
    uint64_t v8 = v42;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    if (v24)
    {
      swift_release();
      uint64_t v43 = v47;
      sub_1002C0C60(v33, v47);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v59);
      goto LABEL_27;
    }
    uint64_t result = sub_1000380B4(v33, &qword_1004855F0);
    if (v16) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v18++, 1)) {
      break;
    }
    if (v18 >= v49) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v48 + 8 * v18);
    if (!v22)
    {
      int64_t v23 = v18 + 1;
      if (v18 + 1 >= v49) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v48 + 8 * v23);
      if (v22) {
        goto LABEL_16;
      }
      int64_t v23 = v18 + 2;
      if (v18 + 2 >= v49) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v48 + 8 * v23);
      if (v22) {
        goto LABEL_16;
      }
      int64_t v23 = v18 + 3;
      if (v18 + 3 >= v49) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v48 + 8 * v23);
      if (v22)
      {
LABEL_16:
        int64_t v18 = v23;
        goto LABEL_17;
      }
      int64_t v23 = v18 + 4;
      if (v18 + 4 < v49)
      {
        unint64_t v22 = *(void *)(v48 + 8 * v23);
        if (!v22)
        {
          while (1)
          {
            int64_t v18 = v23 + 1;
            if (__OFADD__(v23, 1)) {
              goto LABEL_29;
            }
            if (v18 >= v49) {
              goto LABEL_26;
            }
            unint64_t v22 = *(void *)(v48 + 8 * v18);
            ++v23;
            if (v22) {
              goto LABEL_17;
            }
          }
        }
        goto LABEL_16;
      }
LABEL_26:
      uint64_t v45 = v46;
      uint64_t v44 = v47;
      swift_release();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 56))(v44, 1, 1, v59);
LABEL_27:
      swift_bridgeObjectRelease();

      return swift_bridgeObjectRelease();
    }
LABEL_17:
    uint64_t v60 = v8;
    unint64_t v16 = (v22 - 1) & v22;
  }
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

char *sub_10034735C(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return sub_1003479A0(a1, a2);
}

unint64_t sub_1003473A0()
{
  if (!(*v0 >> 62))
  {
    if (*(void *)((*v0 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v3) {
    return 0;
  }
LABEL_3:
  unint64_t result = sub_1002D7428();
  if (!result)
  {
    if (*v0 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      unint64_t result = v4 - 1;
      if (!__OFSUB__(v4, 1)) {
        return sub_100397C94(result);
      }
    }
    else
    {
      uint64_t v2 = *(void *)((*v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
      unint64_t result = v2 - 1;
      if (!__OFSUB__(v2, 1)) {
        return sub_100397C94(result);
      }
    }
    __break(1u);
  }
  return result;
}

Class sub_10034746C()
{
  uint64_t v0 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100347550((uint64_t)v3);
  v4.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);

  return v4.super.isa;
}

uint64_t sub_100347550@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + qword_1004889C0;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

void sub_1003475D4(void *a1)
{
  type metadata accessor for UUID();
  __chkstk_darwin();
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  id v4 = a1;
  sub_100347668((uint64_t)v3);
}

uint64_t sub_100347668(uint64_t a1)
{
  uint64_t v3 = v1 + qword_1004889C0;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

id sub_1003476F4()
{
  sub_10034BD80();
  swift_bridgeObjectRetain();
  NSString v0 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();

  return v0;
}

void sub_100347754(void *a1)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;
  id v5 = a1;
  sub_1003477C4(v2, v4);
}

uint64_t sub_1003477C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + qword_1004889C8);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003477E0()
{
  return sub_100347808() & 1;
}

uint64_t sub_100347808()
{
  return *(unsigned __int8 *)(v0 + qword_100487720);
}

uint64_t sub_100347818(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100347840(a3);
}

uint64_t sub_100347840(uint64_t result)
{
  *(unsigned char *)(v1 + qword_100487720) = result;
  return result;
}

uint64_t sub_100347850()
{
  return sub_100347878() & 1;
}

uint64_t sub_100347878()
{
  return *(unsigned __int8 *)(v0 + qword_100487728);
}

uint64_t sub_100347888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003478B0(a3);
}

uint64_t sub_1003478B0(uint64_t result)
{
  *(unsigned char *)(v1 + qword_100487728) = result;
  return result;
}

uint64_t sub_1003478C0()
{
  return sub_1003478E8() & 1;
}

uint64_t sub_1003478E8()
{
  return *(unsigned __int8 *)(v0 + qword_100487730);
}

uint64_t sub_1003478F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100347920(a3);
}

uint64_t sub_100347920(uint64_t result)
{
  *(unsigned char *)(v1 + qword_100487730) = result;
  return result;
}

uint64_t sub_100347930()
{
  return sub_100347958() & 1;
}

uint64_t sub_100347958()
{
  return *(unsigned __int8 *)(v0 + qword_100487738);
}

uint64_t sub_100347968(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100347990(a3);
}

uint64_t sub_100347990(uint64_t result)
{
  *(unsigned char *)(v1 + qword_100487738) = result;
  return result;
}

char *sub_1003479A0(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = a1;
  uint64_t v32 = a2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v29 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v29 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (unint64_t *)&v2[qword_1004889C8];
  unint64_t v34 = 0xD000000000000012;
  unint64_t v35 = 0x80000001003D7B30;
  uint64_t v8 = v2;
  v9._uint64_t countAndFlagsBits = 32;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = 1279547201;
  v10._object = (void *)0xE400000000000000;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  unint64_t v11 = v35;
  *uint64_t v7 = v34;
  v7[1] = v11;
  v8[qword_100487720] = 1;
  v8[qword_100487728] = 0;
  v8[qword_100487730] = 0;
  v8[qword_100487738] = 0;
  uint64_t v12 = &v8[qword_1004889D0];
  Logger.init(subsystem:category:)();
  uint64_t v13 = qword_100487740;
  uint64_t v14 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
  id v15 = objc_allocWithZone((Class)type metadata accessor for XPCSession(0));
  *(void *)&v8[v13] = sub_1002B92A0(0xD000000000000012, (void *)0x80000001003E0EB0, v14);
  *(void *)&v8[qword_100487748] = &_swiftEmptyDictionarySingleton;
  uint64_t v16 = *OS_dispatch_queue.awdl.unsafeMutableAddressor();
  id v17 = objc_allocWithZone((Class)NWNetworkAgentRegistration);
  unint64_t v30 = (objc_class *)ObjectType;
  id v18 = [v17 initWithNetworkAgentClass:swift_getObjCClassFromMetadata() queue:v16];
  if (!v18)
  {
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    uint64_t v27 = type metadata accessor for Logger();
    (*(void (**)(char *, uint64_t))(*(void *)(v27 - 8) + 8))(v12, v27);

    swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance();
    return 0;
  }
  *(void *)&v8[qword_100487718] = v18;
  id v19 = v18;
  UUID.init()();
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(&v8[qword_1004889C0], v6, v29);
  uint64_t v20 = v32;
  *(void *)&v8[qword_1004889D8] = v31;
  *(void *)&v8[qword_1004889E0] = v20;
  swift_unownedRetain();
  swift_unownedRetain();

  v33.receiver = v8;
  v33.super_class = v30;
  unint64_t v21 = (char *)[super init];
  unint64_t v22 = *(void **)&v21[qword_100487718];
  int64_t v23 = v21;
  if (![v22 registerNetworkAgent:v23])
  {

    swift_release();
    swift_release();
    return 0;
  }
  id v24 = v22;
  swift_bridgeObjectRetain();
  NSString v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned __int8 v26 = [v24 addNetworkAgentToInterfaceNamed:v25];

  swift_release();
  swift_release();

  if ((v26 & 1) == 0)
  {

    return 0;
  }
  return v23;
}

uint64_t sub_100347DF8()
{
  return 0;
}

uint64_t sub_100347E04()
{
  return 0;
}

uint64_t sub_100347E10()
{
  return 1;
}

id sub_100347E1C()
{
  AppleDevice.machServiceName.getter();
  NSString v0 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();

  return v0;
}

id sub_100347E6C()
{
  NSString v0 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();

  return v0;
}

id sub_100347EB8(uint64_t a1, uint64_t a2, void *a3)
{
  swift_getObjCClassMetadata();
  id v4 = a3;
  uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v7 = v6;

  uint64_t v8 = (void *)variable initialization expression of NANBitmap.Band.Iterator.currentIndex();
  sub_10000C970(v5, v7);

  return v8;
}

uint64_t sub_100347F38()
{
  return 0;
}

uint64_t sub_100347F40(uint64_t a1)
{
  uint64_t v3 = swift_isaMask & *v1;
  uint64_t v183 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v182 = *(void *)(v183 - 8);
  __chkstk_darwin();
  uint64_t v180 = (char *)&v161 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v181 = type metadata accessor for DispatchQoS();
  uint64_t v179 = *(void *)(v181 - 8);
  __chkstk_darwin();
  uint64_t v178 = (char *)&v161 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v177 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v175 = v7;
  uint64_t v176 = (char *)&v161 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100485640);
  __chkstk_darwin();
  uint64_t v171 = (char *)&v161 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_1004862B0);
  __chkstk_darwin();
  Swift::String v10 = (char *)&v161 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v161 - v11;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v191 = *(char **)(v13 - 8);
  __chkstk_darwin();
  long long v188 = (char *)&v161 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v185 = (char *)&v161 - v15;
  __chkstk_darwin();
  uint64_t v184 = (char *)&v161 - v16;
  __chkstk_darwin();
  uint64_t v186 = (char *)&v161 - v17;
  uint64_t v174 = v18;
  __chkstk_darwin();
  uint64_t v190 = (char *)&v161 - v19;
  uint64_t v20 = type metadata accessor for DispatchPredicate();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin();
  int64_t v23 = (uint64_t *)((char *)&v161 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v24 = OS_dispatch_queue.awdl.unsafeMutableAddressor();
  NSString v25 = (void *)*v24;
  *int64_t v23 = *v24;
  (*(void (**)(uint64_t *, void, uint64_t))(v21 + 104))(v23, enum case for DispatchPredicate.onQueue(_:), v20);
  id v26 = v25;
  uint64_t v27 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v21 + 8))(v23, v20);
  if ((v27 & 1) == 0)
  {
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_60:
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    unint64_t v140 = v191;
    uint64_t v184 = v191 + 8;
    v166(v27, a1);
    id v163 = (id)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
    uint64_t v162 = *(uint64_t *)((char *)v23 + qword_1004889E0);
    uint64_t v141 = v162;
    swift_unownedRetainStrong();
    uint64_t v142 = *(void **)((char *)v23 + qword_100487740);
    uint64_t v143 = v177;
    int v144 = v176;
    uint64_t v145 = v172;
    (*(void (**)(char *, char *, uint64_t))(v177 + 16))(v176, v164, v172);
    v170(v185, v190, a1);
    unint64_t v146 = (*(unsigned __int8 *)(v143 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v143 + 80);
    unint64_t v147 = (v175 + v140[80] + v146) & ~(unint64_t)v140[80];
    unint64_t v148 = (v174 + v147 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v149 = swift_allocObject();
    uint64_t v150 = v173;
    *(void *)(v149 + 16) = *(void *)(v173 + 80);
    *(void *)(v149 + 24) = *(void *)(v150 + 88);
    *(_OWORD *)(v149 + 32) = *(_OWORD *)(v150 + 96);
    *(void *)(v149 + 48) = *(void *)(v150 + 112);
    *(void *)(v149 + 56) = v141;
    uint64_t v151 = v186;
    *(void *)(v149 + 64) = v186;
    *(void *)(v149 + 72) = v142;
    (*(void (**)(unint64_t, char *, uint64_t))(v143 + 32))(v149 + v146, v144, v145);
    uint64_t v152 = a1;
    v168(v149 + v147, v185, a1);
    id v153 = v171;
    *(void *)(v149 + v148) = v171;
    aBlock[4] = (uint64_t)sub_10034C44C;
    void aBlock[5] = v149;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_10000E5D0;
    uint64_t aBlock[3] = (uint64_t)&unk_10046F540;
    int v154 = _Block_copy(aBlock);
    uint64_t v191 = v151;
    id v155 = v153;
    id v156 = v163;
    swift_retain();
    id v157 = v142;
    unint64_t v158 = v178;
    static DispatchQoS.unspecified.getter();
    unint64_t v193 = _swiftEmptyArrayStorage;
    sub_10034C024((unint64_t *)&qword_1004807A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100010BCC((uint64_t *)&unk_10047D0F0);
    sub_1000143E0();
    os_log_t v159 = v180;
    uint64_t v160 = v183;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();

    _Block_release(v154);
    swift_release();

    (*(void (**)(char *, uint64_t))(v182 + 8))(v159, v160);
    (*(void (**)(char *, uint64_t))(v179 + 8))(v158, v181);
    v166((uint64_t)v190, v152);
    swift_release();
    return 1;
  }
  uint64_t v172 = v6;
  uint64_t v173 = v3;
  if (!a1)
  {
    __break(1u);
    goto LABEL_68;
  }
  unint64_t v193 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v194 = v28;
  AnyHashable.init<A>(_:)();
  uint64_t v29 = v190;
  if (*(void *)(a1 + 16) && (unint64_t v30 = sub_10039F920((uint64_t)aBlock), (v31 & 1) != 0))
  {
    sub_1000107A4(*(void *)(a1 + 56) + 32 * v30, (uint64_t)&v195);
  }
  else
  {
    long long v195 = 0u;
    long long v196 = 0u;
  }
  sub_100346DB8((uint64_t)aBlock);
  if (!*((void *)&v196 + 1))
  {
    sub_1000380B4((uint64_t)&v195, &qword_10047D0D0);
    (*((void (**)(char *, uint64_t, uint64_t, uint64_t))v191 + 7))(v12, 1, 1, v13);
    goto LABEL_12;
  }
  int v32 = swift_dynamicCast();
  objc_super v33 = v191;
  unint64_t v34 = (void (*)(char *, void, uint64_t, uint64_t))*((void *)v191 + 7);
  v34(v12, v32 ^ 1u, 1, v13);
  unint64_t v35 = (unsigned int (*)(char *, uint64_t, uint64_t))*((void *)v33 + 6);
  if (v35(v12, 1, v13) == 1)
  {
LABEL_12:
    sub_1000380B4((uint64_t)v12, &qword_1004862B0);
LABEL_13:
    unint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      id v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Failed to assert because no UUID or path found", v41, 2u);
      swift_slowDealloc();
    }

    return 1;
  }
  uint64_t v36 = (void (*)(unint64_t, char *, uint64_t))*((void *)v33 + 4);
  uint64_t v187 = v13;
  id v169 = v33 + 32;
  uint64_t v168 = v36;
  v36((unint64_t)v29, v12, v13);
  uint64_t v37 = v187;
  uint64_t v170 = (void (*)(char *, char *, uint64_t))*((void *)v33 + 2);
  v170(v10, v29, v187);
  v34(v10, 0, 1, v37);
  if (v35(v10, 1, v37) == 1)
  {
    Class isa = 0;
  }
  else
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*((void (**)(char *, uint64_t))v33 + 1))(v10, v37);
  }
  uint64_t v43 = v188;
  uint64_t v44 = [self pathForClientID:isa];

  if (!v44)
  {
    (*((void (**)(char *, uint64_t))v33 + 1))(v29, v37);
    goto LABEL_13;
  }
  long long v188 = v33 + 16;
  id v45 = [v44 parameters];
  if (!v45
    || (uint64_t v46 = v45, v47 = [v45 account], v46, !v47))
  {
    uint64_t v54 = v29;
    unint64_t v55 = v29;
    uint64_t v56 = v187;
    v170(v43, v55, v187);
    uint64_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v57, v58))
    {
      uint64_t v59 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v59 = 136315138;
      sub_10034C024((unint64_t *)&qword_1004853F0, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&long long v195 = sub_100010680(v60, v61, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v62 = (void (*)(char *, uint64_t))*((void *)v191 + 1);
      v62(v43, v56);
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "Ignoring assertion from %s because no account", v59, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v62(v190, v56);
    }
    else
    {

      unint64_t v63 = (void (*)(char *, uint64_t))*((void *)v191 + 1);
      v63(v43, v56);

      v63(v54, v56);
    }
    return 1;
  }
  uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v50 = v49;

  v51._uint64_t countAndFlagsBits = 0x6C7070612E6D6F63;
  v51._object = (void *)0xEA00000000002E65;
  uint64_t v52 = v29;
  if (String.hasPrefix(_:)(v51))
  {
    String.count.getter();
    unint64_t v53 = String.index(_:offsetBy:)();
  }
  else
  {
    unint64_t v53 = 15;
  }
  sub_10011AF00(v53, v48, v50);
  swift_bridgeObjectRelease();
  static String._fromSubstring(_:)();
  swift_bridgeObjectRelease();
  uint64_t v64 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v65 = [v44 endpoint];
  id v66 = v186;
  a1 = v187;
  if (v65)
  {
    uint64_t v67 = v65;
    self;
    unint64_t v68 = (void *)swift_dynamicCastObjCClass();
    if (v68 && (unint64_t v69 = v68, [v68 addressFamily] == (id)30))
    {
      uint64_t v70 = [v69 address];
      id v71 = [objc_allocWithZone((Class)WiFiMACAddress) initWithLinkLocalIPv6Address:v70[1], v70[2]];

      if (v71) {
        goto LABEL_48;
      }
    }
    else
    {
    }
  }
  id v72 = [v44 endpoint];
  if (!v72)
  {
LABEL_41:
    uint64_t v91 = Logger.logObject.getter();
    os_log_type_t v92 = static os_log_type_t.info.getter();
    BOOL v93 = os_log_type_enabled(v91, v92);
    id v94 = v191;
    if (v93)
    {
      uint64_t v95 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v95 = 0;
      _os_log_impl((void *)&_mh_execute_header, v91, v92, "Unknown endpoint information in assertion", v95, 2u);
      swift_slowDealloc();
      id v96 = v64;
    }
    else
    {
      id v96 = v91;
      uint64_t v91 = v44;
      uint64_t v44 = v64;
    }

    (*((void (**)(char *, uint64_t))v94 + 1))(v52, a1);
    return 1;
  }
  id v73 = v72;
  self;
  NSString v74 = (void *)swift_dynamicCastObjCClass();
  if (!v74)
  {

    goto LABEL_41;
  }
  id v75 = v74;
  uint64_t v167 = v64;
  id v76 = [v74 hostname];
  uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v79 = v78;

  v80._uint64_t countAndFlagsBits = 0x6C61636F6C2ELL;
  v80._object = (void *)0xE600000000000000;
  if (!String.hasSuffix(_:)(v80))
  {
    unint64_t v97 = v79;
    swift_bridgeObjectRetain();
    uint64_t v98 = Logger.logObject.getter();
    os_log_type_t v99 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v98, v99))
    {
      uint64_t v100 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v100 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)&long long v195 = sub_100010680(v77, v97, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v98, v99, "No local suffix on hostname %s", v100, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

LABEL_63:
      (*((void (**)(char *, uint64_t))v191 + 1))(v190, v187);
      return 1;
    }

    swift_bridgeObjectRelease_n();
    (*((void (**)(char *, uint64_t))v191 + 1))(v52, a1);
    return 1;
  }
  uint64_t v81 = *(uint64_t *)((char *)v189 + qword_1004889D8);
  swift_unownedRetainStrong();
  unint64_t v82 = v79;
  uint64_t v83 = (uint64_t *)(v81 + *(void *)(*(void *)v81 + 424));
  swift_beginAccess();
  uint64_t v84 = *v83;
  swift_bridgeObjectRetain();
  swift_release();
  swift_bridgeObjectRetain();
  id v85 = v73;
  uint64_t v86 = (unsigned __int16 *)v171;
  sub_100346F24(v84, v77, v82, 0x6C61636F6C2ELL, 0xE600000000000000, v75, (uint64_t)v171);
  swift_bridgeObjectRelease();
  uint64_t v87 = sub_100010BCC(&qword_1004855F0);
  if ((*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(*(void *)(v87 - 8) + 48))(v86, 1, v87) == 1)
  {
    sub_1000380B4((uint64_t)v86, (uint64_t *)&unk_100485640);
    swift_bridgeObjectRetain();
    unint64_t v88 = Logger.logObject.getter();
    os_log_type_t v89 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v88, v89))
    {
      id v90 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)id v90 = 136315138;
      swift_bridgeObjectRetain();
      unint64_t v193 = (void *)sub_100010680(v77, v82, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v88, v89, "No peer with specified hostname %s", v90, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    goto LABEL_63;
  }
  swift_bridgeObjectRelease();
  uint64_t v101 = *(unsigned int *)(v86 + 1);
  uint64_t v102 = (uint64_t)v86 + *(int *)(v87 + 48);
  uint64_t v103 = *v86;
  sub_10034C860(v102, type metadata accessor for AWDLPeer);
  id v71 = WiFiAddress.apiAddress.getter(v103 | (v101 << 16));

  id v66 = v186;
  a1 = v187;
  uint64_t v52 = v190;
  uint64_t v64 = v167;
LABEL_48:
  id v104 = [objc_allocWithZone((Class)AWDLTrafficRegistrationConfiguration) initWithUniqueIdentifier:v64 peerAddress:v71];
  uint64_t v105 = (char *)v189 + qword_1004889D0;
  v170(v66, v52, a1);
  id v106 = v104;
  id v107 = v71;
  uint64_t v186 = (char *)v106;
  uint64_t v171 = (char *)v107;
  uint64_t v164 = v105;
  long long v108 = Logger.logObject.getter();
  os_log_type_t v109 = static os_log_type_t.info.getter();
  int v110 = v109;
  BOOL v111 = os_log_type_enabled(v108, v109);
  uint64_t v165 = v44;
  if (v111)
  {
    uint64_t v112 = swift_slowAlloc();
    uint64_t v167 = swift_slowAlloc();
    aBlock[0] = (uint64_t)v167;
    *(_DWORD *)uint64_t v112 = 136315650;
    sub_10034C024((unint64_t *)&qword_1004853F0, (void (*)(uint64_t))&type metadata accessor for UUID);
    LODWORD(v163) = v110;
    uint64_t v113 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v193 = (void *)sub_100010680(v113, v114, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    id v166 = (void (*)(uint64_t, uint64_t))*((void *)v191 + 1);
    v166((uint64_t)v66, a1);
    *(_WORD *)(v112 + 12) = 2080;
    char v115 = v186;
    id v116 = [v186 uniqueIdentifier];
    uint64_t v117 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v119 = v118;

    unint64_t v193 = (void *)sub_100010680(v117, v119, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v112 + 22) = 2080;
    id v120 = v171;
    unint64_t v121 = WiFiMACAddress.wifiAddress.getter();
    uint64_t v122 = WiFiAddress.description.getter(v121 & 0xFFFFFFFFFFFFLL);
    unint64_t v193 = (void *)sub_100010680(v122, v123, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v108, (os_log_type_t)v163, "%s starting traffic registration for %s to %s", (uint8_t *)v112, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v52 = v190;
    swift_slowDealloc();
  }
  else
  {

    id v166 = (void (*)(uint64_t, uint64_t))*((void *)v191 + 1);
    v166((uint64_t)v66, a1);
    id v124 = v171;

    id v125 = v186;
  }
  uint64_t v27 = (uint64_t)v184;
  v170(v184, v52, a1);
  int64_t v23 = v189;
  uint64_t v126 = (void **)((char *)v189 + qword_100487748);
  swift_beginAccess();
  uint64_t v186 = v186;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v193 = *v126;
  id v128 = v193;
  *uint64_t v126 = (void *)0x8000000000000000;
  unint64_t v130 = sub_1000316CC(v27);
  uint64_t v131 = v128[2];
  BOOL v132 = (v129 & 1) == 0;
  uint64_t v133 = v131 + v132;
  if (__OFADD__(v131, v132)) {
    goto LABEL_65;
  }
  char v134 = v129;
  if (v128[3] >= v133)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1003A46B4();
      id v128 = v193;
    }
LABEL_57:
    *uint64_t v126 = v128;
    swift_bridgeObjectRelease();
    unint64_t v137 = *v126;
    swift_bridgeObjectRetain();
    if ((v134 & 1) == 0)
    {
      uint64_t v138 = (uint64_t)v185;
      v170(v185, (char *)v27, a1);
      sub_100296434(v130, v138, (uint64_t)_swiftEmptyArrayStorage, v137);
    }
    uint64_t v167 = v64;
    uint64_t v139 = v137[7];
    swift_bridgeObjectRelease();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*(void *)(v139 + 8 * v130) & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*(void *)(v139 + 8 * v130) & 0xFFFFFFFFFFFFFF8)
                                                                                              + 0x18) >> 1)
      goto LABEL_60;
    goto LABEL_66;
  }
  sub_100294318(v133, isUniquelyReferenced_nonNull_native);
  id v128 = v193;
  unint64_t v135 = sub_1000316CC(v27);
  if ((v134 & 1) == (v136 & 1))
  {
    unint64_t v130 = v135;
    goto LABEL_57;
  }
LABEL_68:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10034986C(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v28 = a6;
  uint64_t v29 = a3;
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  uint64_t v27 = a2;
  uint64_t v30 = a1;
  uint64_t v31 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v31 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin();
  id v24 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v24 - v12;
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v14((char *)&v24 - v12, v25, v8);
  v14(v11, (uint64_t)v13, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v26, v31);
  unint64_t v15 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v16 = (v10 + *(unsigned __int8 *)(v6 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v17 = (v7 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v18 + v15, v11, v8);
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v18 + v16, v24, v31);
  uint64_t v20 = v27;
  uint64_t v19 = v28;
  *(void *)(v18 + v17) = v27;
  *(void *)(v18 + ((v17 + 15) & 0xFFFFFFFFFFFFFFF8)) = v19;
  id v21 = v19;
  id v22 = v20;
  sub_1002864C0(v22, v29, (uint64_t)sub_10034C6EC, v18);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v13, v8);
}

void sub_100349B08(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
    swift_errorRetain();
    swift_errorRetain();
    id v13 = a4;
    id v14 = a5;
    swift_errorRetain();
    id v15 = v13;
    id v16 = v14;
    unint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    int v19 = v18;
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v20 = swift_slowAlloc();
      int v35 = v19;
      uint64_t v21 = v20;
      unint64_t v34 = (void *)swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      uint64_t v38 = v36;
      *(_DWORD *)uint64_t v21 = 136315906;
      sub_10034C024((unint64_t *)&qword_1004853F0, (void (*)(uint64_t))&type metadata accessor for UUID);
      os_log_t v33 = v17;
      uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v37 = sub_100010680(v22, v23, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      *(_WORD *)(v21 + 12) = 2080;
      id v24 = [v15 uniqueIdentifier];
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v27 = v26;

      uint64_t v37 = sub_100010680(v25, v27, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v21 + 22) = 2080;
      unint64_t v28 = WiFiMACAddress.wifiAddress.getter();
      uint64_t v29 = WiFiAddress.description.getter(v28 & 0xFFFFFFFFFFFFLL);
      uint64_t v37 = sub_100010680(v29, v30, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v21 + 32) = 2112;
      swift_errorRetain();
      uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v37 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v34 = v31;
      swift_errorRelease();
      swift_errorRelease();
      os_log_t v32 = v33;
      _os_log_impl((void *)&_mh_execute_header, v33, (os_log_type_t)v35, "%s failed to start %s to %s because %@", (uint8_t *)v21, 0x2Au);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      swift_errorRelease();
      swift_errorRelease();
    }
  }
}

uint64_t sub_100349F20(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else {
    uint64_t v4 = 0;
  }
  id v5 = a1;
  sub_100347F40(v4);

  swift_bridgeObjectRelease();
  return 1;
}

void sub_100349FA0(uint64_t a1)
{
  uint64_t v108 = swift_isaMask & *v1;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v113 = *(void *)(v3 - 8);
  uint64_t v114 = v3;
  __chkstk_darwin();
  BOOL v111 = (char *)&v91 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v112 = type metadata accessor for DispatchQoS();
  uint64_t v110 = *(void *)(v112 - 8);
  __chkstk_darwin();
  os_log_type_t v109 = (char *)&v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v107 = type metadata accessor for Logger();
  uint64_t v106 = *(void *)(v107 - 8);
  __chkstk_darwin();
  uint64_t v104 = v6;
  uint64_t v105 = (char *)&v91 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_1004862B0);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v116 = *(void *)(v9 - 8);
  uint64_t v10 = *(void *)(v116 + 64);
  __chkstk_darwin();
  char v115 = (char *)&v91 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v103 = (char *)&v91 - v11;
  __chkstk_darwin();
  uint64_t v102 = (char *)&v91 - v12;
  __chkstk_darwin();
  id v14 = (char *)&v91 - v13;
  __chkstk_darwin();
  uint64_t v117 = (char *)&v91 - v15;
  uint64_t v16 = type metadata accessor for DispatchPredicate();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin();
  int v19 = (uint64_t *)((char *)&v91 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = OS_dispatch_queue.awdl.unsafeMutableAddressor();
  uint64_t v21 = (void *)*v20;
  *int v19 = *v20;
  (*(void (**)(uint64_t *, void, uint64_t))(v17 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v16);
  id v22 = v21;
  uint64_t v23 = _dispatchPreconditionTest(_:)();
  uint64_t v25 = *(void (**)(uint64_t *, uint64_t))(v17 + 8);
  uint64_t v24 = v17 + 8;
  v25(v19, v16);
  if ((v23 & 1) == 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (!a1)
  {
    __break(1u);
    goto LABEL_32;
  }
  uint64_t aBlock[6] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  aBlock[7] = v26;
  AnyHashable.init<A>(_:)();
  uint64_t v23 = v116;
  uint64_t v24 = (uint64_t)v117;
  if (*(void *)(a1 + 16) && (unint64_t v27 = sub_10039F920((uint64_t)aBlock), (v28 & 1) != 0))
  {
    sub_1000107A4(*(void *)(a1 + 56) + 32 * v27, (uint64_t)&v120);
  }
  else
  {
    long long v120 = 0u;
    long long v121 = 0u;
  }
  sub_100346DB8((uint64_t)aBlock);
  if (*((void *)&v121 + 1))
  {
    int v29 = swift_dynamicCast();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v8, v29 ^ 1u, 1, v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v8, 1, v9) != 1)
    {
      os_log_type_t v99 = *(void (**)(uint64_t, char *, uint64_t))(v23 + 32);
      v99(v24, v8, v9);
      unint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
      uint64_t v101 = v23 + 16;
      uint64_t v100 = v30;
      v30(v14, v24, v9);
      uint64_t v31 = &v118[qword_100487748];
      swift_beginAccess();
      os_log_t v32 = sub_100355B60(aBlock);
      if (*v33)
      {
        uint64_t v97 = v23 + 32;
        unint64_t v34 = sub_1003473A0();
        ((void (*)(uint64_t *, void))v32)(aBlock, 0);
        swift_endAccess();
        int v19 = (uint64_t *)(v23 + 8);
        a1 = *(void *)(v23 + 8);
        int v35 = v14;
        id v14 = (char *)v34;
        ((void (*)(char *, uint64_t))a1)(v35, v9);
        if (v34)
        {
          swift_beginAccess();
          uint64_t v36 = *(void *)v31;
          if (*(void *)(*(void *)v31 + 16))
          {
            unint64_t v37 = sub_1000316CC(v24);
            if (v38)
            {
              unint64_t v39 = *(void *)(*(void *)(v36 + 56) + 8 * v37);
              swift_endAccess();
              if (!(v39 >> 62))
              {
                if (*(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10))
                {
LABEL_16:
                  os_log_type_t v40 = &v118[qword_1004889D0];
                  id v41 = v102;
                  v100(v102, v24, v9);
                  os_log_t v42 = v14;
                  id v94 = v40;
                  uint64_t v43 = Logger.logObject.getter();
                  os_log_type_t v44 = static os_log_type_t.info.getter();
                  int v45 = v44;
                  BOOL v46 = os_log_type_enabled(v43, v44);
                  os_log_t v96 = v42;
                  uint64_t v95 = v19;
                  uint64_t v98 = (void (*)(char *, uint64_t))a1;
                  if (v46)
                  {
                    uint64_t v47 = swift_slowAlloc();
                    os_log_t v48 = v42;
                    LODWORD(v115) = v45;
                    uint64_t v49 = v47;
                    uint64_t v93 = swift_slowAlloc();
                    aBlock[0] = v93;
                    *(_DWORD *)uint64_t v49 = 136315650;
                    sub_10034C024((unint64_t *)&qword_1004853F0, (void (*)(uint64_t))&type metadata accessor for UUID);
                    os_log_t v92 = v43;
                    uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter();
                    *(void *)&long long v120 = sub_100010680(v50, v51, aBlock);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_bridgeObjectRelease();
                    ((void (*)(char *, uint64_t))a1)(v41, v9);
                    *(_WORD *)(v49 + 12) = 2080;
                    id v52 = [v42 uniqueIdentifier];
                    uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                    unint64_t v55 = v54;

                    *(void *)&long long v120 = sub_100010680(v53, v55, aBlock);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();

                    uint64_t v23 = v116;
                    swift_bridgeObjectRelease();
                    *(_WORD *)(v49 + 22) = 2080;
                    id v56 = [v48 peerAddress];
                    unint64_t v57 = WiFiMACAddress.wifiAddress.getter();

                    uint64_t v58 = WiFiAddress.description.getter(v57 & 0xFFFFFFFFFFFFLL);
                    *(void *)&long long v120 = sub_100010680(v58, v59, aBlock);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();

                    swift_bridgeObjectRelease();
                    os_log_t v42 = v92;
                    _os_log_impl((void *)&_mh_execute_header, v92, (os_log_type_t)v115, "%s stopping traffic registration for %s to %s", (uint8_t *)v49, 0x20u);
                    swift_arrayDestroy();
                    swift_slowDealloc();
                    swift_slowDealloc();
                  }
                  else
                  {

                    ((void (*)(char *, uint64_t))a1)(v41, v9);
                  }

                  uint64_t v102 = (char *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
                  id v71 = v118;
                  char v115 = *(char **)&v118[qword_1004889E0];
                  swift_unownedRetainStrong();
                  unint64_t v118 = *(char **)&v71[qword_100487740];
                  id v72 = v118;
                  uint64_t v73 = v106;
                  NSString v74 = v105;
                  uint64_t v75 = v107;
                  (*(void (**)(char *, char *, uint64_t))(v106 + 16))(v105, v94, v107);
                  id v76 = v103;
                  v100(v103, (uint64_t)v117, v9);
                  unint64_t v77 = (*(unsigned __int8 *)(v73 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80);
                  unint64_t v78 = (v104 + *(unsigned __int8 *)(v23 + 80) + v77) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
                  uint64_t v79 = swift_allocObject();
                  uint64_t v80 = v108;
                  *(void *)(v79 + 16) = *(void *)(v108 + 80);
                  *(void *)(v79 + 24) = *(void *)(v80 + 88);
                  *(_OWORD *)(v79 + 32) = *(_OWORD *)(v80 + 96);
                  uint64_t v81 = v115;
                  *(void *)(v79 + 48) = *(void *)(v80 + 112);
                  *(void *)(v79 + 56) = v81;
                  os_log_t v82 = v96;
                  *(void *)(v79 + 64) = v96;
                  *(void *)(v79 + 72) = v72;
                  (*(void (**)(unint64_t, char *, uint64_t))(v73 + 32))(v79 + v77, v74, v75);
                  v99(v79 + v78, v76, v9);
                  aBlock[4] = (uint64_t)sub_10034BF2C;
                  void aBlock[5] = v79;
                  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
                  aBlock[1] = 1107296256;
                  aBlock[2] = (uint64_t)sub_10000E5D0;
                  uint64_t aBlock[3] = (uint64_t)&unk_10046F4C8;
                  uint64_t v83 = _Block_copy(aBlock);
                  uint64_t v84 = v82;
                  id v85 = v102;
                  swift_retain();
                  uint64_t v86 = v118;
                  uint64_t v87 = v109;
                  static DispatchQoS.unspecified.getter();
                  *(void *)&long long v120 = _swiftEmptyArrayStorage;
                  sub_10034C024((unint64_t *)&qword_1004807A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
                  sub_100010BCC((uint64_t *)&unk_10047D0F0);
                  sub_1000143E0();
                  unint64_t v88 = v111;
                  uint64_t v89 = v114;
                  dispatch thunk of SetAlgebra.init<A>(_:)();
                  OS_dispatch_queue.async(group:qos:flags:execute:)();
                  _Block_release(v83);

                  swift_release();
                  (*(void (**)(char *, uint64_t))(v113 + 8))(v88, v89);
                  (*(void (**)(char *, uint64_t))(v110 + 8))(v87, v112);
                  v98(v117, v9);
                  swift_release();
                  return;
                }
LABEL_15:
                swift_beginAccess();
                sub_100367818(v24);
                swift_endAccess();
                swift_bridgeObjectRelease();
                goto LABEL_16;
              }
LABEL_29:
              swift_bridgeObjectRetain();
              uint64_t v90 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (v90) {
                goto LABEL_16;
              }
              goto LABEL_15;
            }
          }
LABEL_32:
          swift_endAccess();
          __break(1u);
          return;
        }
      }
      else
      {
        ((void (*)(uint64_t *, void))v32)(aBlock, 0);
        swift_endAccess();
        a1 = *(void *)(v23 + 8);
        ((void (*)(char *, uint64_t))a1)(v14, v9);
      }
      unint64_t v63 = v115;
      v100(v115, v24, v9);
      uint64_t v64 = Logger.logObject.getter();
      os_log_type_t v65 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v64, v65))
      {
        id v66 = (uint8_t *)swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        uint64_t v98 = (void (*)(char *, uint64_t))a1;
        *(_DWORD *)id v66 = 136315138;
        sub_10034C024((unint64_t *)&qword_1004853F0, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v67 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)&long long v120 = sub_100010680(v67, v68, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        unint64_t v69 = v63;
        uint64_t v70 = (void (*)(uint64_t, uint64_t))v98;
        v98(v69, v9);
        _os_log_impl((void *)&_mh_execute_header, v64, v65, "No client previously asserted for %s", v66, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v70(v24, v9);
      }
      else
      {
        ((void (*)(char *, uint64_t))a1)(v63, v9);

        ((void (*)(uint64_t, uint64_t))a1)(v24, v9);
      }
      return;
    }
  }
  else
  {
    sub_1000380B4((uint64_t)&v120, &qword_10047D0D0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v8, 1, 1, v9);
  }
  sub_1000380B4((uint64_t)v8, &qword_1004862B0);
  uint64_t v60 = Logger.logObject.getter();
  os_log_type_t v61 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v60, v61))
  {
    uint64_t v62 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v62 = 0;
    _os_log_impl((void *)&_mh_execute_header, v60, v61, "Failed to unassert because no UUID found", v62, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_10034AF64(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = a2;
  id v22 = a3;
  uint64_t v23 = a1;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin();
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a4, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a5, v7);
  unint64_t v14 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v15 = (v12 + *(unsigned __int8 *)(v8 + 80) + v14) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v16 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v16 + v14, v13, v10);
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v16 + v15, (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  uint64_t v17 = v21;
  *(void *)(v16 + ((v9 + v15 + 7) & 0xFFFFFFFFFFFFFFF8)) = v21;
  id v18 = v17;
  sub_100287264(v18, v22, sub_10034C1D0, v16);
  return swift_release();
}

void sub_10034B198(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a3, v7);
    id v11 = a4;
    swift_errorRetain();
    id v12 = v11;
    swift_errorRetain();
    id v13 = v12;
    swift_errorRetain();
    unint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    int v16 = v15;
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v31 = (void *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      uint64_t v34 = v32;
      *(_DWORD *)uint64_t v17 = 136315906;
      sub_10034C024((unint64_t *)&qword_1004853F0, (void (*)(uint64_t))&type metadata accessor for UUID);
      int v30 = v16;
      uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v33 = sub_100010680(v18, v19, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      *(_WORD *)(v17 + 12) = 2080;
      id v20 = [v13 uniqueIdentifier];
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v23 = v22;

      uint64_t v33 = sub_100010680(v21, v23, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 22) = 2080;
      id v24 = [v13 peerAddress];
      unint64_t v25 = WiFiMACAddress.wifiAddress.getter();

      uint64_t v26 = WiFiAddress.description.getter(v25 & 0xFFFFFFFFFFFFLL);
      uint64_t v33 = sub_100010680(v26, v27, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 32) = 2112;
      swift_errorRetain();
      uint64_t v28 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v33 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v31 = v28;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, (os_log_type_t)v30, "%s failed to clear %s to %s because %@", (uint8_t *)v17, 0x2Au);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      swift_errorRelease();
      swift_errorRelease();
    }
  }
}

uint64_t sub_10034B5C0(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else {
    uint64_t v4 = 0;
  }
  id v5 = a1;
  sub_100349FA0(v4);

  return swift_bridgeObjectRelease();
}

void sub_10034B648()
{
}

uint64_t sub_10034B6C8(uint64_t a1)
{
  uint64_t v2 = a1 + qword_1004889C0;
  uint64_t v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_bridgeObjectRelease();

  uint64_t v4 = a1 + qword_1004889D0;
  uint64_t v5 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_unownedRelease();
  swift_unownedRelease();

  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for AWDLNetworkAgent()
{
  return swift_getGenericMetadata();
}

uint64_t sub_10034B7F8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v57 = a6;
  uint64_t v65 = a4;
  uint64_t v66 = a5;
  uint64_t v68 = type metadata accessor for AWDLPeer.AdvertisedService(0);
  uint64_t v64 = *(void *)(v68 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  id v12 = (char *)&v55 - v11;
  __chkstk_darwin();
  unint64_t v62 = a3;
  uint64_t v63 = (uint64_t)&v55 - v13;
  uint64_t v14 = *(void *)(a1 + 56);
  uint64_t v56 = a1 + 56;
  uint64_t v15 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & v14;
  uint64_t v18 = HIBYTE(a3) & 0xF;
  uint64_t v61 = a2;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v18 = a2;
  }
  uint64_t v19 = 7;
  if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0) {
    uint64_t v19 = 11;
  }
  int64_t v58 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v59 = v19 | (v18 << 16);
  uint64_t v67 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v21 = 0;
  uint64_t v60 = v10;
  if (v17) {
    goto LABEL_11;
  }
LABEL_12:
  int64_t v26 = v21 + 1;
  if (!__OFADD__(v21, 1))
  {
    if (v26 < v58)
    {
      unint64_t v27 = *(void *)(v56 + 8 * v26);
      ++v21;
      if (v27) {
        goto LABEL_26;
      }
      int64_t v21 = v26 + 1;
      if (v26 + 1 >= v58) {
        goto LABEL_49;
      }
      unint64_t v27 = *(void *)(v56 + 8 * v21);
      if (v27) {
        goto LABEL_26;
      }
      int64_t v21 = v26 + 2;
      if (v26 + 2 >= v58) {
        goto LABEL_49;
      }
      unint64_t v27 = *(void *)(v56 + 8 * v21);
      if (v27) {
        goto LABEL_26;
      }
      int64_t v21 = v26 + 3;
      if (v26 + 3 >= v58) {
        goto LABEL_49;
      }
      unint64_t v27 = *(void *)(v56 + 8 * v21);
      if (v27)
      {
LABEL_26:
        uint64_t v24 = (v27 - 1) & v27;
        for (unint64_t i = __clz(__rbit64(v27)) + (v21 << 6); ; unint64_t i = v23 | (v21 << 6))
        {
          uint64_t v29 = v63;
          sub_10034C7F8(*(void *)(v67 + 48) + *(void *)(v64 + 72) * i, v63, type metadata accessor for AWDLPeer.AdvertisedService);
          sub_1003139F0(v29, (uint64_t)v12);
          int v30 = &v12[*(int *)(v68 + 28)];
          uint64_t v31 = &v30[*(int *)(type metadata accessor for DNSRecords.SRV() + 24)];
          uint64_t v32 = *(void *)v31;
          unint64_t v33 = *((void *)v31 + 1);
          swift_bridgeObjectRetain();
          uint64_t result = String.count.getter();
          if (__OFSUB__(0, result))
          {
            __break(1u);
            goto LABEL_51;
          }
          unint64_t v69 = v24;
          int64_t v70 = v21;
          uint64_t v34 = (uint64_t)v12;
          String.index(_:offsetBy:)();
          swift_bridgeObjectRetain();
          unint64_t v35 = String.subscript.getter();
          unint64_t v37 = v36;
          uint64_t v39 = v38;
          uint64_t v41 = v40;
          swift_bridgeObjectRelease();
          if ((v33 & 0x2000000000000000) != 0) {
            uint64_t v42 = HIBYTE(v33) & 0xF;
          }
          else {
            uint64_t v42 = v32 & 0xFFFFFFFFFFFFLL;
          }
          if (v32 == v39 && v33 == v41 && v35 >> 16 == 0 && v42 == v37 >> 16)
          {
            swift_bridgeObjectRelease_n();
            id v12 = (char *)v34;
            uint64_t v47 = (uint64_t)v60;
            sub_10034C7F8(v34, (uint64_t)v60, type metadata accessor for AWDLPeer.AdvertisedService);
          }
          else
          {
            char v46 = _stringCompareInternal(_:_:_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            id v12 = (char *)v34;
            uint64_t v47 = (uint64_t)v60;
            sub_10034C7F8(v34, (uint64_t)v60, type metadata accessor for AWDLPeer.AdvertisedService);
            if ((v46 & 1) == 0)
            {
              sub_10034C860(v47, type metadata accessor for AWDLPeer.AdvertisedService);
              uint64_t result = sub_10034C860(v34, type metadata accessor for AWDLPeer.AdvertisedService);
              unint64_t v17 = v69;
              int64_t v21 = v70;
              if (!v69) {
                goto LABEL_12;
              }
              goto LABEL_11;
            }
          }
          __int16 v71 = NWEndpoint.Port.rawValue.getter();
          sub_1000C9760();
          uint64_t v48 = BinaryInteger.description.getter();
          uint64_t v50 = v49;
          id v51 = [v57 port];
          uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v54 = v53;

          if (v48 == v52 && v50 == v54)
          {
            swift_bridgeObjectRelease_n();
            sub_10034C860(v47, type metadata accessor for AWDLPeer.AdvertisedService);
            sub_10034C860((uint64_t)v12, type metadata accessor for AWDLPeer.AdvertisedService);
LABEL_48:
            swift_release();
            return 1;
          }
          char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_10034C860(v47, type metadata accessor for AWDLPeer.AdvertisedService);
          uint64_t result = sub_10034C860((uint64_t)v12, type metadata accessor for AWDLPeer.AdvertisedService);
          unint64_t v17 = v69;
          int64_t v21 = v70;
          if (v22) {
            goto LABEL_48;
          }
          if (!v69) {
            goto LABEL_12;
          }
LABEL_11:
          unint64_t v23 = __clz(__rbit64(v17));
          uint64_t v24 = (v17 - 1) & v17;
        }
      }
      int64_t v28 = v26 + 4;
      if (v28 < v58)
      {
        unint64_t v27 = *(void *)(v56 + 8 * v28);
        int64_t v21 = v28;
        if (!v27)
        {
          while (1)
          {
            int64_t v21 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_52;
            }
            if (v21 >= v58) {
              goto LABEL_49;
            }
            unint64_t v27 = *(void *)(v56 + 8 * v21);
            ++v28;
            if (v27) {
              goto LABEL_26;
            }
          }
        }
        goto LABEL_26;
      }
    }
LABEL_49:
    swift_release();
    return 0;
  }
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
  return result;
}

uint64_t sub_10034BD80()
{
  return *(void *)(v0 + qword_1004889C8);
}

void sub_10034BD94()
{
}

uint64_t sub_10034BDC4()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 80) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return _swift_deallocObject(v0, v10, v11);
}

uint64_t sub_10034BF2C()
{
  uint64_t v1 = *(void *)(type metadata accessor for Logger() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  return sub_10034AF64(*(void *)(v0 + 56), *(void **)(v0 + 64), *(void **)(v0 + 72), v0 + v2, v0 + ((v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)));
}

uint64_t sub_10034C024(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10034C06C()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v3 | v8 | 7;
  unint64_t v11 = (*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return _swift_deallocObject(v0, v11 + 8, v10);
}

void sub_10034C1D0(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for Logger() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void **)(v1 + ((*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8));

  sub_10034B198(a1, v1 + v4, v1 + v7, v8);
}

uint64_t sub_10034C2D0()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 80) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v3 | v8 | 7;
  unint64_t v11 = (*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return _swift_deallocObject(v0, v11 + 8, v10);
}

uint64_t sub_10034C44C()
{
  uint64_t v1 = *(void *)(type metadata accessor for Logger() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  return sub_10034986C(*(void *)(v0 + 56), *(void **)(v0 + 64), *(void **)(v0 + 72), v0 + v2, v0 + v5, *(void **)(v0 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_10034C56C()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v13 = v3 | v8 | 7;
  unint64_t v10 = (*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return _swift_deallocObject(v0, v11 + 8, v13);
}

void sub_10034C6EC(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for Logger() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = (*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void **)(v1 + v8);
  unint64_t v10 = *(void **)(v1 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8));

  sub_100349B08(a1, v1 + v4, v1 + v7, v9, v10);
}

uint64_t sub_10034C7F8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10034C860(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10034C8C8()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void *sub_10034C9A8(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v42 = *(void *)(a1 + 16);
  sub_1002BF2F4(0, v1, 0);
  uint64_t result = (void *)sub_100085FFC(a1);
  uint64_t v4 = (uint64_t)result;
  uint64_t v6 = v42;
  uint64_t v5 = a1;
  uint64_t v7 = 0;
  char v9 = v8 & 1;
  uint64_t v10 = a1 + 64;
  uint64_t v11 = v3;
  uint64_t v12 = a1 + 96;
  while ((v9 & 1) == 0)
  {
    if (v4 < 0 || v4 >= 1 << *(unsigned char *)(v5 + 32))
    {
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
      break;
    }
    unint64_t v14 = (unint64_t)v4 >> 6;
    if ((*(void *)(v10 + 8 * ((unint64_t)v4 >> 6)) & (1 << v4)) == 0) {
      goto LABEL_29;
    }
    if (*(_DWORD *)(v5 + 36) != v3) {
      goto LABEL_30;
    }
    uint64_t v15 = *(void *)(v5 + 48) + 8 * v4;
    int v16 = *(_DWORD *)v15;
    char v17 = *(unsigned char *)(v15 + 4);
    char v18 = *(unsigned char *)(v15 + 5);
    unint64_t v20 = _swiftEmptyArrayStorage[2];
    unint64_t v19 = _swiftEmptyArrayStorage[3];
    if (v20 >= v19 >> 1)
    {
      uint64_t v37 = v3;
      uint64_t v38 = v12;
      uint64_t v40 = v10;
      uint64_t v41 = v7;
      uint64_t v39 = v11;
      uint64_t result = (void *)sub_1002BF2F4(v19 > 1, v20 + 1, 1);
      uint64_t v3 = v37;
      uint64_t v12 = v38;
      uint64_t v11 = v39;
      uint64_t v10 = v40;
      uint64_t v7 = v41;
      uint64_t v6 = v42;
      uint64_t v5 = a1;
    }
    _swiftEmptyArrayStorage[2] = v20 + 1;
    int64_t v21 = &_swiftEmptyArrayStorage[v20];
    *((_DWORD *)v21 + 8) = v16;
    *((unsigned char *)v21 + 36) = v17;
    *((unsigned char *)v21 + 37) = v18;
    int64_t v13 = 1 << *(unsigned char *)(v5 + 32);
    if (v4 >= v13) {
      goto LABEL_31;
    }
    uint64_t v22 = *(void *)(v10 + 8 * v14);
    if ((v22 & (1 << v4)) == 0) {
      goto LABEL_32;
    }
    if (*(_DWORD *)(v5 + 36) != v3) {
      goto LABEL_33;
    }
    unint64_t v23 = v22 & (-2 << (v4 & 0x3F));
    if (v23)
    {
      int64_t v13 = __clz(__rbit64(v23)) | v4 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v24 = v14 + 1;
      unint64_t v25 = (unint64_t)(v13 + 63) >> 6;
      if (v14 + 1 < v25)
      {
        unint64_t v26 = *(void *)(v10 + 8 * v24);
        if (!v26)
        {
          unint64_t v24 = v14 + 2;
          if (v14 + 2 >= v25) {
            goto LABEL_4;
          }
          unint64_t v26 = *(void *)(v10 + 8 * v24);
          if (!v26)
          {
            unint64_t v24 = v14 + 3;
            if (v14 + 3 >= v25) {
              goto LABEL_4;
            }
            unint64_t v26 = *(void *)(v10 + 8 * v24);
            if (!v26)
            {
              while (v25 - 4 != v14)
              {
                unint64_t v26 = *(void *)(v12 + 8 * v14++);
                if (v26)
                {
                  uint64_t v27 = v4;
                  uint64_t v28 = v7;
                  uint64_t v29 = v10;
                  uint64_t v30 = v11;
                  uint64_t v31 = v12;
                  uint64_t result = (void *)sub_100038030(v27, v3, 0);
                  uint64_t v12 = v31;
                  uint64_t v11 = v30;
                  uint64_t v10 = v29;
                  uint64_t v7 = v28;
                  uint64_t v6 = v42;
                  uint64_t v5 = a1;
                  unint64_t v24 = v14 + 3;
                  goto LABEL_18;
                }
              }
              uint64_t v32 = v4;
              uint64_t v33 = v7;
              uint64_t v34 = v10;
              uint64_t v35 = v11;
              uint64_t v36 = v12;
              uint64_t result = (void *)sub_100038030(v32, v3, 0);
              uint64_t v12 = v36;
              uint64_t v11 = v35;
              uint64_t v10 = v34;
              uint64_t v7 = v33;
              uint64_t v6 = v42;
              uint64_t v5 = a1;
              goto LABEL_4;
            }
          }
        }
LABEL_18:
        int64_t v13 = __clz(__rbit64(v26)) + (v24 << 6);
      }
    }
LABEL_4:
    char v9 = 0;
    ++v7;
    uint64_t v3 = v11;
    uint64_t v4 = v13;
    if (v7 == v6) {
      return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10034CC74(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = __chkstk_darwin();
  uint64_t v7 = (char *)&v12 - v6;
  uint64_t v8 = qword_1004877E8;
  if (*(void *)(v1 + qword_1004877E8) != a1)
  {
    uint64_t v9 = *(void *)(v1 + qword_1004877E0);
    swift_unownedRetainStrong();
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v9 + *(void *)(*(void *)v9 + 96), AssociatedTypeWitness);
    swift_release();
    unint64_t v10 = *(void *)(v1 + v8);
    if ((v10 & 0x8000000000000000) != 0 || v10 >= 0x100)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    else
    {
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      (*(void (**)(void, uint64_t, uint64_t))(AssociatedConformanceWitness + 328))(v10 | ((v10 != 0) << 16), AssociatedTypeWitness, AssociatedConformanceWitness);
      return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, AssociatedTypeWitness);
    }
  }
  return result;
}

void sub_10034CEF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(v2 + qword_1004877F0 + 8);
  if (v4)
  {
    if (a2)
    {
      BOOL v5 = *(void *)(v2 + qword_1004877F0) == a1 && v4 == a2;
      if (!v5 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        sub_10034CF7C(1);
      }
      return;
    }
  }
  else if (!a2)
  {
    return;
  }

  sub_10034D2C0();
}

uint64_t sub_10034CF7C(char a1)
{
  uint64_t v2 = v1;
  int v3 = a1 & 1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    v15[0] = v7;
    if (v3) {
      uint64_t v8 = 0xD000000000000010;
    }
    else {
      uint64_t v8 = 0x6C7561686B636142;
    }
    if (v3) {
      unint64_t v9 = 0x80000001003E10D0;
    }
    else {
      unint64_t v9 = 0xED000074736F4C20;
    }
    sub_100010680(v8, v9, v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Stopping internet sharing provider based on policy update: %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v11 = (void *)result;
    char v14 = v3;
    uint64_t v12 = (void *)(result + qword_100488808);
    swift_beginAccess();
    _s17ResponderInstanceCMa();
    sub_1001B8154();
    swift_bridgeObjectRetain();
    char v13 = Dictionary.isEmpty.getter();
    swift_bridgeObjectRelease();
    if (v13)
    {
      sub_1002B3214();

      return swift_unknownObjectWeakAssign();
    }
    else
    {
      *(unsigned char *)(v2 + qword_100487808) = v14;
      NANBitmap.Channel.operatingClass.getter(*v12);
      __chkstk_darwin();
      type metadata accessor for Dictionary.Values();
      swift_bridgeObjectRetain();
      swift_getWitnessTable();
      Sequence.forEach(_:)();

      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

void sub_10034D2C0()
{
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();

  if (Strong || !*(void *)(v0 + qword_1004877F0 + 8))
  {
    uint64_t v2 = (void *)swift_unknownObjectWeakLoadStrong();

    if (v2 && !*(void *)(v0 + qword_1004877F0 + 8))
    {
      sub_10034CF7C(0);
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_10034D994();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_10034D3A0()
{
  uint64_t v1 = v0;
  sub_10034D520();
  uint64_t v2 = (uint64_t *)(v0 + qword_1004877F8);
  swift_beginAccess();
  uint64_t v3 = *v2;
  type metadata accessor for LowLatencyInternetProviderPolicy.Requester();
  sub_1002FE310();
  NANBitmap.Channel.operatingClass.getter(v3);
  type metadata accessor for Dictionary.Values();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  Sequence.filter(_:)();
  uint64_t v4 = Array.count.getter();
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(v1 + qword_1004877E8);
  *(void *)(v1 + qword_1004877E8) = v4;
  return sub_10034CC74(v5);
}

void sub_10034D520()
{
  uint64_t v1 = v0;
  uint64_t v2 = swift_isaMask & *v0;
  uint64_t v3 = sub_100010BCC((uint64_t *)&unk_100487A70);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v31[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v6 = *(void *)(v2 + 80);
  uint64_t v7 = *(void *)(v2 + 88);
  type metadata accessor for LowLatencyInternetProviderPolicy.Requester();
  sub_1002FE310();
  swift_bridgeObjectRetain();
  char v8 = Dictionary.isEmpty.getter();
  swift_bridgeObjectRelease();
  if ((v8 & 1) != 0 || (unint64_t v9 = (char *)v0 + qword_1004877F0, *(void *)((char *)v0 + qword_1004877F0 + 8)))
  {
    swift_bridgeObjectRetain();
    char v10 = Dictionary.isEmpty.getter();
    swift_bridgeObjectRelease();
    if (v10)
    {
      uint64_t v11 = (void *)((char *)v0 + qword_1004877F0);
      uint64_t v12 = *(void *)((char *)v0 + qword_1004877F0);
      uint64_t v13 = *(void *)((char *)v0 + qword_1004877F0 + 8);
      void *v11 = 0;
      v11[1] = 0;
      sub_10034CEF4(v12, v13);
      swift_bridgeObjectRelease();
      char v14 = (void *)((char *)v0 + qword_1004877D0);
      swift_beginAccess();
      void *v14 = 0;
      swift_release();
    }
  }
  else
  {
    uint64_t v15 = (void *)((char *)v0 + qword_1004877D0);
    swift_beginAccess();
    uint64_t v30 = *v15;
    swift_unownedRetainStrong();
    swift_unownedRetainStrong();
    swift_release();
    sub_1003374A8((uint64_t)v5);
    swift_release();
    int v16 = (void *)*OS_dispatch_queue.nan.unsafeMutableAddressor();
    uint64_t v17 = swift_allocObject();
    swift_unknownObjectWeakInit();
    char v18 = (void *)swift_allocObject();
    _OWORD v18[2] = v6;
    v18[3] = v7;
    v18[4] = v17;
    swift_beginAccess();
    uint64_t v19 = *v15;
    id v20 = v16;
    int64_t v21 = v20;
    if (v19) {
      ObservableWiFiProperty.wrappedValue.getter(v3, (uint64_t)v31);
    }
    else {
      ObservableWiFiProperty.registerForChanges(on:using:valueUpdateHandler:)(v20, v15, (uint64_t)sub_100353D88, (uint64_t)v18, v3, (uint64_t)v31);
    }
    uint64_t v22 = v31[0];
    uint64_t v23 = v31[1];
    swift_endAccess();

    swift_release();
    sub_1000380B4((uint64_t)v5, (uint64_t *)&unk_100487A70);
    unint64_t v24 = (void *)((char *)v1 + qword_1004877F0);
    uint64_t v25 = *(void *)((char *)v1 + qword_1004877F0);
    uint64_t v26 = *(void *)((char *)v1 + qword_1004877F0 + 8);
    *unint64_t v24 = v22;
    v24[1] = v23;
    sub_10034CEF4(v25, v26);
    swift_bridgeObjectRelease();
    if (!v30 && !*((void *)v9 + 1))
    {
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v29 = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "Waiting to start publishing the provider because there is no interface to share internet from", v29, 2u);
        swift_slowDealloc();
      }
    }
  }
}

uint64_t (*sub_10034D900(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_10034D960;
}

uint64_t sub_10034D960(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return sub_10034D3A0();
  }
  return result;
}

void sub_10034D994()
{
  uint64_t v1 = v0;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v2 = type metadata accessor for Preferences();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v20 - v4;
  swift_unownedRetainStrong();
  WiFiInterface.preferences.getter();
  swift_release();
  char v6 = Preferences.internetSharingOptions.getter(v2);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) == 0)
    {
      char v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v8, v9))
      {
        char v10 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "Starting internet sharing provider based on policy update", v10, 2u);
        swift_slowDealloc();
      }

      NANConstants.internetSharingServiceName.unsafeMutableAddressor();
      id v11 = objc_allocWithZone((Class)WiFiAwarePublishConfiguration);
      swift_bridgeObjectRetain();
      NSString v12 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v13 = [v11 initWithServiceName:v12];

      [v13 setAuthenticationType:0];
      char v14 = self;
      NSString v15 = String._bridgeToObjectiveC()();
      id v16 = [v14 provideInternetToInitiatorsFromInterface:v15];

      [v13 setInternetSharingConfiguration:v16];
      id v17 = [v13 internetSharingConfiguration];
      if (v17)
      {
        char v18 = v17;
        [v17 setUseBridging:1];
      }
      *(unsigned char *)(v1 + qword_100487808) = 2;
      swift_unownedRetainStrong();
      sub_100354870();
      swift_release();
      uint64_t v19 = (void *)sub_1002FBC90((uint64_t)v13, v1);
      swift_release();

      swift_unknownObjectWeakAssign();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_10034DE04(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if ((a3 & 0x100000000000000) != 0)
  {
    swift_beginAccess();
    __chkstk_darwin();
    type metadata accessor for LowLatencyInternetProviderPolicy.Requester();
    sub_1002FE310();
    swift_bridgeObjectRetain();
    Dictionary.filter(_:)();
    __chkstk_darwin();
    type metadata accessor for Dictionary();
    swift_getWitnessTable();
    Sequence.forEach(_:)();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_unownedRetainStrong();
    sub_100354870();
    swift_release();
    sub_1002E4CE8(a3 & 0xFFFFFFFFFFFFFFLL, a1, a2);
    return swift_release();
  }
}

uint64_t sub_10034E03C(char a1)
{
  if (a1) {
    return 0xD000000000000010;
  }
  else {
    return 0x6C7561686B636142;
  }
}

BOOL sub_10034E084(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static NANInternetSharingStatistics.Status.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int sub_10034E098()
{
  return NANInternetSharingStatistics.Status.hashValue.getter(*v0);
}

void sub_10034E0A8(uint64_t a1)
{
  NANInternetSharingStatistics.Status.hash(into:)(a1, *v1);
}

Swift::Int sub_10034E0B8()
{
  Hasher.init(_seed:)();
  NANInternetSharingStatistics.Status.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t sub_10034E100()
{
  return sub_10034E03C(*v0);
}

id sub_10034E110()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  swift_beginAccess();
  type metadata accessor for LowLatencyInternetProviderPolicy.Requester();
  sub_1002FE310();
  type metadata accessor for Dictionary();
  Dictionary.removeAll(keepingCapacity:)(0);
  swift_endAccess();
  v3.receiver = v0;
  v3.super_class = ObjectType;
  return [super dealloc];
}

id sub_10034E1FC(void *a1)
{
  id v1 = a1;
  return sub_10034E110();
}

uint64_t sub_10034E224(uint64_t a1)
{
  uint64_t v1 = a1 + qword_1004889E8;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_bridgeObjectRelease();
  swift_unownedRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_unknownObjectWeakDestroy();
}

void sub_10034E2FC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  v12[0] = a4 & 0xFFFFFFFFFFFFFFLL;
  v12[1] = a2;
  _OWORD v12[2] = a3;
  char v13 = 0;
  swift_beginAccess();
  sub_100038004(a2, a3);
  type metadata accessor for LowLatencyInternetProviderPolicy.Requester();
  sub_1002FE310();
  type metadata accessor for Dictionary();
  Dictionary.subscript.setter();
  swift_endAccess();
  sub_10034D3A0();
  char v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    os_log_type_t v9 = (uint8_t *)swift_slowAlloc();
    v12[0] = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v9 = 136315138;
    uint64_t v10 = WiFiAddress.description.getter(a1 & 0xFFFFFFFFFFFFLL);
    sub_100010680(v10, v11, v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Added requester %s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
}

uint64_t sub_10034E540(uint64_t a1)
{
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    v12[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    uint64_t v5 = WiFiAddress.description.getter(a1 & 0xFFFFFFFFFFFFLL);
    sub_100010680(v5, v6, v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Removed requester %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_beginAccess();
  type metadata accessor for LowLatencyInternetProviderPolicy.Requester();
  sub_1002FE310();
  type metadata accessor for Dictionary();
  Dictionary.removeValue(forKey:)();
  uint64_t v7 = v12[0];
  uint64_t v8 = v12[1];
  unint64_t v9 = v12[2];
  char v10 = v13;
  swift_endAccess();
  sub_100353D2C(v7, v8, v9, v10);
  return sub_10034D3A0();
}

uint64_t sub_10034E77C()
{
  swift_beginAccess();
  type metadata accessor for LowLatencyInternetProviderPolicy.Requester();
  sub_1002FE310();
  Dictionary.subscript.getter();
  if (v5 == 2)
  {
    swift_endAccess();
    return 0;
  }
  else
  {
    uint64_t v0 = v3;
    swift_endAccess();
    sub_100038004(v3, v4);
    sub_100353D2C(v2, v3, v4, v5);
  }
  return v0;
}

uint64_t sub_10034E8D8()
{
  swift_beginAccess();
  type metadata accessor for LowLatencyInternetProviderPolicy.Requester();
  sub_1002FE310();
  swift_bridgeObjectRetain();
  Dictionary.filter(_:)();
  uint64_t v0 = Dictionary.count.getter();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10034EA00(uint64_t a1)
{
  sub_100010BCC(&qword_100484D00);
  __chkstk_darwin();
  uint64_t v3 = &v24[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unint64_t v4 = (int *)type metadata accessor for NANPeer(0);
  __chkstk_darwin();
  unint64_t v6 = &v24[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  uint64_t v8 = &v24[-v7];
  swift_unownedRetainStrong();
  swift_unownedRetainStrong();
  swift_release();
  sub_1003366E8();
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  swift_release();
  if (v10)
  {
    swift_bridgeObjectRelease();
    unint64_t v13 = v12 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    unint64_t v13 = 0x300000000;
  }
  swift_unownedRetainStrong();
  uint64_t v14 = a1 & 0xFFFFFFFFFFFFLL;
  sub_10035665C(a1 & 0xFFFFFFFFFFFFLL, (uint64_t)v8);
  swift_release();
  uint64_t v15 = *(void *)&v8[v4[17] + 8];
  sub_100353CCC((uint64_t)v8, type metadata accessor for NANPeer);
  if ((v15 & 0xFF00000000) == 0x200000000) {
    unint64_t v16 = 0x300000000;
  }
  else {
    unint64_t v16 = Optional<A>.init(integerLiteral:)(BYTE6(v15)) & 0xFFFFFFFFFFFFLL;
  }
  swift_unownedRetainStrong();
  sub_10035665C(v14, (uint64_t)v6);
  swift_release();
  sub_1002A82F8((uint64_t)&v6[v4[18]], (uint64_t)v3);
  uint64_t v17 = type metadata accessor for NANAttribute.CustomDeviceInformation(0);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v3, 1, v17) == 1)
  {
    sub_1000380B4((uint64_t)v3, &qword_100484D00);
  }
  else
  {
    int v18 = *((_DWORD *)v3 + 1);
    sub_100353CCC((uint64_t)v3, type metadata accessor for NANAttribute.CustomDeviceInformation);
    if ((*(_DWORD *)NANAttribute.CustomDeviceInformation.Flags.doesNotSupportSimultaneousDualBand.unsafeMutableAddressor() & ~v18) == 0)
    {
LABEL_12:
      char v20 = 0;
      goto LABEL_13;
    }
  }
  uint64_t v19 = *(void *)&v6[v4[16] + 8];
  if (!v19) {
    goto LABEL_12;
  }
  char v20 = *(void *)(v19 + 16) > 1uLL;
LABEL_13:
  sub_100353CCC((uint64_t)v6, type metadata accessor for NANPeer);
  swift_unownedRetainStrong();
  uint64_t v21 = sub_100358CE8();
  swift_release();
  uint64_t v22 = sub_10034C9A8(v21);
  swift_bridgeObjectRelease();
  return sub_100353910(v13, v16, v20, (uint64_t)v22);
}

uint64_t sub_10034ED1C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v5 = (void *)result;
    unint64_t v6 = (void *)(result + qword_1004877F0);
    uint64_t v7 = *(void *)(result + qword_1004877F0);
    uint64_t v8 = *(void *)(result + qword_1004877F0 + 8);
    *unint64_t v6 = v3;
    v6[1] = v2;
    swift_bridgeObjectRetain();
    sub_10034CEF4(v7, v8);

    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10034EDB0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = *(unsigned __int8 *)(a1 + 10);
  uint64_t v7 = *(unsigned int *)(a1 + 11);
  uint64_t v8 = *(unsigned __int16 *)(a1 + 8);
  swift_unownedRetainStrong();
  sub_100354870();
  swift_release();
  sub_1002E4CE8(v8 | (v6 << 16) | (v7 << 24), a3, a4);
  return swift_release();
}

unint64_t sub_10034EE44(void *a1)
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    goto LABEL_4;
  }
  uint64_t v3 = (void *)Strong;
  swift_beginAccess();
  swift_bridgeObjectRetain();

  uint64_t v4 = WiFiAwarePublisherDataSessionHandle.peerServiceIdentifier.getter();
  LOWORD(v22[0]) = v4;
  BYTE2(v22[0]) = BYTE2(v4);
  BYTE3(v22[0]) = BYTE3(v4);
  BYTE4(v22[0]) = BYTE4(v4);
  BYTE5(v22[0]) = BYTE5(v4);
  BYTE6(v22[0]) = BYTE6(v4);
  _s17ResponderInstanceCMa();
  sub_1001B8154();
  Dictionary.subscript.getter();
  swift_bridgeObjectRelease();
  uint64_t v5 = v23;
  if (v23)
  {
    uint64_t v6 = (uint64_t)v23 + qword_100484170;
    swift_beginAccess();
    sub_10027E64C(v6, (uint64_t)v22);

    uint64_t v7 = *(unsigned int *)((char *)v22 + 2);
    uint64_t v8 = BYTE6(v22[0]);
    uint64_t v9 = HIBYTE(v22[0]);
    sub_10027E6A8((uint64_t)v22);
    unsigned __int8 v10 = 0;
    uint64_t v11 = v7 | (v8 << 32) | (v9 << 40);
  }
  else
  {
LABEL_4:
    uint64_t v12 = swift_unknownObjectWeakLoadStrong();
    if (v12)
    {
      unint64_t v13 = (void *)v12;
      sub_1002B3E18((uint64_t)a1, (void (*)(void))NANBitmap.Channel.operatingClass.getter, 0);
    }
    id v14 = a1;
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      v22[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136315138;
      uint64_t v18 = WiFiAwarePublisherDataSessionHandle.peerServiceIdentifier.getter();
      uint64_t v19 = NANPeerServiceIdentifier.description.getter(v18 & 0xFFFFFFFFFFFFFFLL);
      v22[24] = sub_100010680(v19, v20, v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Unknown requester address for %s", v17, 0xCu);
      unsigned __int8 v10 = 1;
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v11 = 0;
    }
    else
    {

      uint64_t v11 = 0;
      unsigned __int8 v10 = 1;
    }
  }
  return v11 | ((unint64_t)v10 << 48);
}

uint64_t sub_10034F170()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._uint64_t countAndFlagsBits = WiFiP2PError.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  sub_10034DE04(0xD000000000000020, 0x80000001003E1320, 0x100000000000000);

  return swift_bridgeObjectRelease();
}

void sub_10034F22C(void *a1)
{
  id v1 = a1;
  sub_10034F170();
}

uint64_t sub_10034F280(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t result = __chkstk_darwin();
  uint64_t v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 != -1)
  {
    if (*((unsigned char *)v1 + qword_100487808))
    {
      uint64_t v15 = (void *)*OS_dispatch_queue.nan.unsafeMutableAddressor();
      uint64_t v16 = swift_allocObject();
      *(void *)(v16 + 16) = v2;
      uint64_t v27 = sub_100354140;
      uint64_t v28 = v16;
      long long aBlock = _NSConcreteStackBlock;
      unint64_t v24 = 1107296256;
      uint64_t v25 = sub_10000E5D0;
      uint64_t v26 = &unk_10046F9D0;
      uint64_t v17 = _Block_copy(&aBlock);
      id v18 = v15;
      id v19 = v2;
      static DispatchQoS.unspecified.getter();
      v22[1] = _swiftEmptyArrayStorage;
      sub_100014390();
      sub_100010BCC((uint64_t *)&unk_10047D0F0);
      sub_1000143E0();
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v17);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      return swift_release();
    }
    else
    {
      long long aBlock = 0;
      unint64_t v24 = 0xE000000000000000;
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      long long aBlock = (void **)0xD00000000000001BLL;
      unint64_t v24 = 0x80000001003E1300;
      unint64_t v13 = 0xE900000000000074;
      unint64_t v14 = 0x754F2064656D6954;
      switch(a1)
      {
        case 1:
          break;
        case 2:
          unint64_t v13 = 0xEE00646574736575;
          unint64_t v14 = 0x7165522072657355;
          break;
        case 3:
          unint64_t v13 = 0xEC0000006572756CLL;
          unint64_t v14 = 0x6961462070696843;
          break;
        case 4:
          unint64_t v13 = 0x80000001003DC230;
          unint64_t v14 = 0xD000000000000018;
          break;
        default:
          unint64_t v13 = 0xE700000000000000;
          unint64_t v14 = 0x6E776F6E6B6E55;
          break;
      }
      unint64_t v20 = v13;
      String.append(_:)(*(Swift::String *)&v14);
      swift_bridgeObjectRelease();
      uint64_t v21 = (uint64_t)aBlock;
      LOBYTE(aBlock) = 1;
      sub_10034DE04(v21, v24, 0x100000000000000);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

void sub_10034F678(uint64_t a1)
{
  if (*(void *)(a1 + qword_1004877F0 + 8)) {
    sub_10034D2C0();
  }
  else {
    sub_10034D520();
  }
}

void sub_10034F6BC(void *a1, uint64_t a2, uint64_t a3)
{
  id v4 = a1;
  sub_10034F280(a3);
}

uint64_t sub_10034F710@<X0>(int *a1@<X0>, BOOL *a2@<X8>)
{
  __int16 v4 = *((_WORD *)a1 + 2);
  uint64_t v5 = sub_10034D900((uint64_t)v11);
  int v12 = *a1;
  __int16 v13 = v4;
  type metadata accessor for LowLatencyInternetProviderPolicy.Requester();
  sub_1002FE310();
  type metadata accessor for Dictionary();
  uint64_t v7 = (void (*)(uint64_t *, void))Dictionary.subscript.modify();
  int v8 = *(unsigned __int8 *)(v6 + 24);
  if (v8 != 2) {
    *(unsigned char *)(v6 + 24) = 1;
  }
  v7(&v10, 0);
  uint64_t result = v5((uint64_t)v11, 0);
  *a2 = v8 == 2;
  return result;
}

void sub_10034F854(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  id v7 = a3;
  id v8 = a5;
  id v9 = a1;
  sub_100353EA4(v7);
}

uint64_t sub_10034F8CC(void *a1, uint64_t a2)
{
  if (a2 == -1)
  {
    return sub_10034F9A0(v2);
  }
  else
  {
    sub_10034EE44(a1);
    unint64_t v4 = __chkstk_darwin();
    v6[2] = v2;
    void v6[3] = a2;
    sub_1002D90E4((void *(*)(uint64_t *__return_ptr, __int16 *))sub_1003540C8, (uint64_t)v6, v4 & 0xFFFFFFFFFFFFLL | ((HIWORD(v4) & 1) << 48));
    return sub_10034F9A0(v2);
  }
}

uint64_t sub_10034F9A0(uint64_t a1)
{
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v3 = (void *)result;
    swift_beginAccess();
    swift_bridgeObjectRetain();

    _s17ResponderInstanceCMa();
    sub_1001B8154();
    uint64_t v4 = Dictionary.count.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v4 == 1)
    {
      uint64_t Strong = swift_unknownObjectWeakLoadStrong();
      if (Strong)
      {
        uint64_t v6 = (void *)Strong;
        id v7 = (uint64_t *)(Strong + qword_100488808);
        swift_beginAccess();
        uint64_t v8 = *v7;
        swift_bridgeObjectRetain();

        NANBitmap.Channel.operatingClass.getter(v8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        type metadata accessor for Dictionary.Keys();
        swift_getWitnessTable();
        Collection.first.getter();
        swift_bridgeObjectRelease();
        uint64_t result = WiFiAwarePublisherDataSessionHandle.peerServiceIdentifier.getter();
        if ((v14 & 1) == 0)
        {
          uint64_t result = static NANPeerServiceIdentifier.__derived_struct_equals(_:_:)((v11 | ((unint64_t)(v12 | (v13 << 16)) << 32)) & 0xFFFFFFFFFFFFFFLL, result & 0xFFFFFFFFFFFFFFLL);
          if ((result & 1) != 0 && *(unsigned char *)(a1 + qword_100487808) != 2)
          {
            uint64_t v9 = swift_unknownObjectWeakLoadStrong();
            if (v9)
            {
              uint64_t v10 = (void *)v9;
              sub_1002B3214();
            }
            return swift_unknownObjectWeakAssign();
          }
        }
      }
      else
      {
        return WiFiAwarePublisherDataSessionHandle.peerServiceIdentifier.getter();
      }
    }
  }
  return result;
}

uint64_t sub_10034FBE8(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  uint64_t v23 = *a1;
  uint64_t v25 = sub_10034D900((uint64_t)&v28);
  char v32 = v23;
  char v33 = v4;
  char v34 = v5;
  char v35 = v6;
  char v36 = v7;
  char v37 = v8;
  type metadata accessor for LowLatencyInternetProviderPolicy.Requester();
  sub_1002FE310();
  type metadata accessor for Dictionary();
  uint64_t v10 = (void (*)(unsigned char *, void))Dictionary.subscript.modify();
  if (*(unsigned char *)(v9 + 24) != 2) {
    *(unsigned char *)(v9 + 24) = 0;
  }
  v10(v27, 0);
  uint64_t result = v25((uint64_t)&v28, 0);
  if ((*(unsigned char *)(a2 + qword_100487808) & 1) == 0)
  {
    uint64_t result = sub_10034EA00(v23 | (v4 << 8) | (v5 << 16) | (v6 << 24) | (v7 << 32) | (v8 << 40));
    if (result)
    {
      swift_beginAccess();
      char v32 = v23;
      char v33 = v4;
      char v34 = v5;
      char v35 = v6;
      char v36 = v7;
      char v37 = v8;
      Dictionary.subscript.getter();
      char v12 = v31;
      if (v31 == 2)
      {
        return swift_endAccess();
      }
      else
      {
        uint64_t v13 = 0xD000000000000011;
        uint64_t v26 = v28;
        uint64_t v24 = BYTE4(v28);
        uint64_t v14 = BYTE5(v28);
        uint64_t v15 = BYTE6(v28);
        uint64_t v16 = v28;
        uint64_t v17 = v29;
        unint64_t v18 = v30;
        swift_endAccess();
        sub_100353D2C(v16, v17, v18, v12);
        unint64_t v28 = 0;
        unint64_t v29 = 0xE000000000000000;
        _StringGuts.grow(_:)(40);
        swift_bridgeObjectRelease();
        unint64_t v28 = 0xD000000000000026;
        unint64_t v29 = 0x80000001003E12D0;
        id v19 = (void *)0x80000001003DC2D0;
        switch(a3)
        {
          case -1:
            break;
          case 1:
            id v19 = (void *)0xE900000000000074;
            uint64_t v13 = 0x754F2064656D6954;
            break;
          case 2:
            id v19 = (void *)0xEE00646574736575;
            uint64_t v13 = 0x7165522072657355;
            break;
          case 3:
            id v19 = (void *)0xEC0000006572756CLL;
            uint64_t v13 = 0x6961462070696843;
            break;
          case 4:
            uint64_t v13 = 0xD000000000000018;
            id v19 = (void *)0x80000001003DC230;
            break;
          default:
            id v19 = (void *)0xE700000000000000;
            uint64_t v13 = 0x6E776F6E6B6E55;
            break;
        }
        v20._uint64_t countAndFlagsBits = v13;
        v20._object = v19;
        String.append(_:)(v20);
        swift_bridgeObjectRelease();
        uint64_t v21 = v28;
        LOBYTE(v28) = 0;
        sub_10034DE04(v21, v29, v26 | (v24 << 32) | (v14 << 40) | (v15 << 48));
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

void sub_10034FF9C(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = a1;
  sub_10034F8CC(v6, a4);
}

void sub_100350010(int a1, int a2, int a3, int a4, void *aBlock)
{
  uint64_t v5 = _Block_copy(aBlock);

  _Block_release(v5);
}

uint64_t sub_10035003C(void *a1, uint64_t a2)
{
  return sub_100352FC0(a1, a2, (uint64_t (*)(void, void))sub_100353F00);
}

uint64_t type metadata accessor for LowLatencyInternetProviderPolicy()
{
  return sub_100038354();
}

uint64_t sub_10035006C()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F) {
    return swift_initClassMetadata2();
  }
  return result;
}

void sub_100350148(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
}

uint64_t sub_100350174(uint64_t a1)
{
  return sub_10034E540(a1 & 0xFFFFFFFFFFFFLL);
}

uint64_t sub_10035019C()
{
  return sub_10034E77C();
}

uint64_t sub_1003501C4(uint64_t a1)
{
  return sub_10034EA00(a1 & 0xFFFFFFFFFFFFLL);
}

uint64_t sub_1003501EC()
{
  return sub_10034E8D8();
}

void sub_100350210(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = swift_isaMask & *v2;
  uint64_t v5 = type metadata accessor for DispatchTimeInterval();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (uint64_t *)((char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  uint64_t v10 = (char *)&v35 - v9;
  __chkstk_darwin();
  char v12 = (uint64_t *)((char *)&v35 - v11);
  if (*(void *)((char *)v2 + qword_1004889F8))
  {
    if (!a1)
    {
      uint64_t v13 = (char *)v2 + qword_1004878E0;
      uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();

      if (!Strong)
      {
        uint64_t v15 = (void *)swift_unknownObjectWeakLoadStrong();

        if (!v15)
        {
          id v37 = v13;
          uint64_t v16 = (void *)((char *)v2 + qword_1004878D8);
          swift_beginAccess();
          *uint64_t v16 = _swiftEmptyDictionarySingleton;
          swift_bridgeObjectRelease();
          uint64_t v17 = Logger.logObject.getter();
          os_log_type_t v18 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v17, v18))
          {
            id v19 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)id v19 = 0;
            _os_log_impl((void *)&_mh_execute_header, v17, v18, "Starting internet sharing requester based on policy update", v19, 2u);
            swift_slowDealloc();
          }

          NANConstants.internetSharingServiceName.unsafeMutableAddressor();
          id v20 = objc_allocWithZone((Class)WiFiAwareSubscribeConfiguration);
          swift_bridgeObjectRetain();
          NSString v21 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v22 = [v20 initWithServiceName:v21];

          [v22 setAuthenticationType:0];
          swift_unownedRetainStrong();
          sub_100354870();
          swift_release();
          id v38 = v22;
          uint64_t v23 = (void *)sub_1002FBC64((uint64_t)v22, (uint64_t)v2);
          swift_release();
          swift_unknownObjectWeakAssign();

          uint64_t v29 = qword_1004878B0;
          uint64_t v30 = *(void *)((char *)v2 + qword_1004878B0);
          if (v30)
          {
            swift_retain();
          }
          else
          {
            *char v12 = 25;
            char v36 = *(void (**)(void *, void, uint64_t))(v6 + 104);
            v36(v12, enum case for DispatchTimeInterval.seconds(_:), v5);
            id v37 = (id)*OS_dispatch_queue.nan.unsafeMutableAddressor();
            uint64_t v31 = swift_allocObject();
            swift_unknownObjectWeakInit();
            char v32 = (void *)swift_allocObject();
            _OWORD v32[2] = *(void *)(v4 + 80);
            _OWORD v32[3] = *(void *)(v4 + 88);
            v32[4] = v31;
            char v33 = v36;
            v36(v10, enum case for DispatchTimeInterval.never(_:), v5);
            *uint64_t v8 = 100;
            v33(v8, enum case for DispatchTimeInterval.milliseconds(_:), v5);
            type metadata accessor for P2PTimer();
            swift_allocObject();
            id v34 = v37;
            swift_retain();
            uint64_t v30 = P2PTimer.init(deadlineAfter:on:repeating:leeway:_:)((uint64_t)v12, v34, (uint64_t)v10, (uint64_t)v8, (uint64_t)sub_100353E78, (uint64_t)v32);
            swift_release();
          }

          *(void *)((char *)v2 + v29) = v30;
          swift_release();
        }
      }
    }
  }
  else if (a1)
  {
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Stopping internet sharing requester based on policy update", v26, 2u);
      swift_slowDealloc();
    }

    sub_100350840();
    uint64_t v27 = swift_unknownObjectWeakLoadStrong();
    if (v27)
    {
      unint64_t v28 = (void *)v27;
      sub_1002CBCAC();
    }
    swift_unknownObjectWeakAssign();
    *(void *)((char *)v2 + qword_1004878B8) = 0;
    swift_release();
  }
}

void sub_1003507A4()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    unint64_t v1 = (void *)Strong;
    if (*(void *)(Strong + qword_1004889F8))
    {
      uint64_t v2 = (void *)swift_unknownObjectWeakLoadStrong();

      if (!v2)
      {
        sub_100350840();
        sub_1003508B8(0xD00000000000002ELL, 0x80000001003E1150);
      }
    }
  }
}

uint64_t sub_100350840()
{
  uint64_t v1 = v0;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    sub_100329CE8();
  }
  swift_unknownObjectWeakAssign();
  *(void *)(v1 + qword_1004878B0) = 0;

  return swift_release();
}

void sub_1003508B8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(v2 + qword_1004878D0);
  swift_beginAccess();
  uint64_t v6 = *v5;
  uint64_t v8 = v2;
  uint64_t v9 = a1;
  uint64_t v10 = a2;
  swift_bridgeObjectRetain();
  sub_10036FF84((void (*)(int *))sub_100353E84, (uint64_t)&v7, v6);
  swift_bridgeObjectRelease();
  *uint64_t v5 = (uint64_t)_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease();
  sub_10035096C();
}

void sub_10035096C()
{
  uint64_t v1 = (uint64_t)v0;
  uint64_t v2 = swift_isaMask & *v0;
  uint64_t v122 = type metadata accessor for NANPeer(0);
  __chkstk_darwin();
  uint64_t v123 = (uint64_t)v109 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(void *)(v2 + 88);
  uint64_t v5 = *(void *)(v2 + 80);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = type metadata accessor for Preferences();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  id v125 = (char *)v109 - v8;
  uint64_t v124 = sub_100010BCC((uint64_t *)&unk_100487A80);
  __chkstk_darwin();
  uint64_t v126 = (void *)((char *)v109 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = sub_100010BCC(qword_100486430);
  __chkstk_darwin();
  char v12 = (char *)v109 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100010BCC(qword_100487A90);
  __chkstk_darwin();
  uint64_t v15 = (char *)v109 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = v1 + qword_1004878D0;
  swift_beginAccess();
  if (!*(void *)(*(void *)v16 + 16))
  {
    uint64_t v26 = qword_1004878C8;
    if (*(unsigned char *)(v1 + qword_1004878C8) == 1)
    {
      swift_unownedRetainStrong();
      swift_unownedRetainStrong();
      swift_release();
      sub_10033B3F4();
      swift_release();
      *(unsigned char *)(v1 + v26) = 0;
    }
    uint64_t v27 = (void *)(v1 + qword_100487898);
    swift_beginAccess();
    *uint64_t v27 = 0;
    swift_release();
    unint64_t v28 = (void *)(v1 + qword_1004878A0);
    swift_beginAccess();
    *unint64_t v28 = 0;
    swift_release();
    uint64_t v29 = (void *)(v1 + qword_1004878D8);
    swift_beginAccess();
    *uint64_t v29 = _swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease();
    uint64_t v30 = (void *)(v1 + qword_1004878A8);
    swift_beginAccess();
    *uint64_t v30 = 0;
    swift_release();
    goto LABEL_13;
  }
  uint64_t v118 = v7;
  uint64_t v119 = v6;
  uint64_t v117 = (uint64_t *)v16;
  uint64_t v17 = *(void *)(v1 + qword_100487890);
  swift_unownedRetainStrong();
  swift_unownedRetainStrong();
  uint64_t v120 = v17;
  swift_release();
  sub_100336938((uint64_t)v15);
  swift_release();
  uint64_t v18 = v5;
  long long v121 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  id v19 = (void *)*v121;
  uint64_t v20 = swift_allocObject();
  swift_unknownObjectWeakInit();
  NSString v21 = (void *)swift_allocObject();
  uint64_t v112 = v18;
  void v21[2] = v18;
  v21[3] = v4;
  uint64_t v113 = v4;
  v21[4] = v20;
  id v22 = (uint64_t *)(v1 + qword_1004878A0);
  swift_beginAccess();
  uint64_t v23 = *v22;
  id v24 = v19;
  os_log_type_t v25 = v24;
  if (v23) {
    ObservableWiFiProperty.wrappedValue.getter(v13, (uint64_t)v128);
  }
  else {
    ObservableWiFiProperty.registerForChanges(on:using:valueUpdateHandler:)(v24, v22, (uint64_t)sub_100353E48, (uint64_t)v21, v13, (uint64_t)v128);
  }
  int v31 = LOBYTE(v128[0]);
  swift_endAccess();

  swift_release();
  sub_1000380B4((uint64_t)v15, qword_100487A90);
  uint64_t v32 = v113;
  uint64_t v33 = v112;
  if (v31 != 1)
  {
LABEL_13:
    uint64_t v43 = *(void *)(v1 + qword_1004889F8);
    *(void *)(v1 + qword_1004889F8) = 0;
    sub_100350210(v43);
    return;
  }
  uint64_t v34 = qword_1004878C8;
  if ((*(unsigned char *)(v1 + qword_1004878C8) & 1) == 0)
  {
    swift_unownedRetainStrong();
    swift_unownedRetainStrong();
    swift_release();
    sub_10033B45C();
    swift_release();
    *(unsigned char *)(v1 + v34) = 1;
  }
  swift_unownedRetainStrong();
  swift_unownedRetainStrong();
  swift_release();
  sub_100336858((uint64_t)v12);
  swift_release();
  uint64_t v35 = (void *)*v121;
  uint64_t v36 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v37 = (void *)swift_allocObject();
  v37[2] = v33;
  _OWORD v37[3] = v32;
  v37[4] = v36;
  id v38 = (uint64_t *)(v1 + qword_100487898);
  swift_beginAccess();
  uint64_t v39 = *v38;
  id v40 = v35;
  uint64_t v41 = v40;
  uint64_t v42 = v118;
  if (v39) {
    ObservableWiFiProperty.wrappedValue.getter(v10, (uint64_t)v129);
  }
  else {
    ObservableWiFiProperty.registerForChanges(on:using:valueUpdateHandler:)(v40, v38, (uint64_t)sub_100353E54, (uint64_t)v37, v10, (uint64_t)v129);
  }
  swift_endAccess();

  swift_release();
  sub_1000380B4((uint64_t)v12, qword_100486430);
  uint64_t v44 = v130;
  uint64_t v45 = v132;
  uint64_t v46 = v131;
  uint64_t v47 = (uint64_t *)(v1 + qword_1004878A8);
  swift_beginAccess();
  if (*v47)
  {
    swift_unownedRetainStrong();
    uint64_t v48 = sub_100358CE8();
    swift_release();
  }
  else
  {
    swift_unownedRetainStrong();
    uint64_t v116 = v46;
    uint64_t v49 = v45;
    uint64_t v50 = v126;
    sub_1003564D0((uint64_t)v126);
    swift_release();
    id v51 = (void *)*v121;
    uint64_t v52 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v53 = (void *)swift_allocObject();
    uint64_t v54 = v113;
    v53[2] = v112;
    v53[3] = v54;
    v53[4] = v52;
    swift_beginAccess();
    id v55 = v51;
    ObservableWiFiProperty.registerForChanges(on:using:valueUpdateHandler:)(v55, v47, (uint64_t)sub_100353E48, (uint64_t)v53, v124, (uint64_t)v127);
    swift_endAccess();

    swift_release();
    uint64_t v56 = (uint64_t)v50;
    uint64_t v45 = v49;
    uint64_t v46 = v116;
    sub_1000380B4(v56, (uint64_t *)&unk_100487A80);
    uint64_t v48 = v127[0];
  }
  uint64_t v126 = sub_10034C9A8(v48);
  swift_bridgeObjectRelease();
  swift_unownedRetainStrong();
  id v57 = v125;
  WiFiInterface.preferences.getter();
  swift_release();
  uint64_t v58 = v119;
  char v59 = Preferences.internetSharingOptions.getter(v119);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v57, v58);
  if (!v59)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v61 = *(void *)(v1 + qword_1004889F8);
    *(void *)(v1 + qword_1004889F8) = 0;
LABEL_22:
    sub_100350210(v61);
LABEL_64:
    sub_100352038(v1);
    return;
  }
  uint64_t v60 = v126;
  if (v59 == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v61 = *(void *)(v1 + qword_1004889F8);
    *(void *)(v1 + qword_1004889F8) = 3;
    goto LABEL_22;
  }
  v109[0] = 0;
  if (v44)
  {
    swift_bridgeObjectRelease();
    uint64_t v62 = (v46 | (v45 << 32)) & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v62 = 0x300000000;
  }
  uint64_t v118 = v62;
  swift_unownedRetainStrong();
  uint64_t v63 = WiFiInterface.capabilities.getter();
  swift_release();
  uint64_t v64 = *WiFiDriverCapabilities.supportsSimultaneousDualBand.unsafeMutableAddressor();
  v127[0] = v63;
  v128[0] = v64;
  unint64_t v65 = sub_1002C8868();
  swift_bridgeObjectRetain_n();
  ExtendableOptionSet.formIntersection(_:)((uint64_t)v127, (uint64_t)&type metadata for WiFiDriverCapabilities, v65);
  char v66 = sub_1000956AC(v128[0], v64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v67 = *v117;
  uint64_t v68 = *(void *)(*v117 + 64);
  uint64_t v124 = *v117 + 64;
  uint64_t v69 = 1 << *(unsigned char *)(v67 + 32);
  uint64_t v70 = -1;
  if (v69 < 64) {
    uint64_t v70 = ~(-1 << v69);
  }
  unint64_t v71 = v70 & v68;
  uint64_t v72 = qword_1004889F8;
  uint64_t v116 = v1 + qword_1004889F0;
  BOOL v111 = (void *)(v1 + qword_1004878D8);
  uint64_t v115 = v123 + 8;
  id v125 = (char *)((unint64_t)(v69 + 63) >> 6);
  uint64_t v119 = v67;
  swift_bridgeObjectRetain();
  uint64_t v73 = 0;
  *(void *)&long long v74 = 136315650;
  long long v110 = v74;
  v109[1] = &type metadata for Any[8];
  int v114 = v66 & 1;
  uint64_t v117 = (uint64_t *)v72;
  while (1)
  {
    while (v71)
    {
      unint64_t v83 = __clz(__rbit64(v71));
      v71 &= v71 - 1;
      unint64_t v84 = v83 | (v73 << 6);
      if (!*(void *)(v1 + v72)) {
        goto LABEL_49;
      }
    }
    if (__OFADD__(v73++, 1))
    {
      __break(1u);
      goto LABEL_66;
    }
    if (v73 >= (uint64_t)v125) {
      goto LABEL_63;
    }
    unint64_t v86 = *(void *)(v124 + 8 * v73);
    if (!v86) {
      break;
    }
LABEL_48:
    unint64_t v71 = (v86 - 1) & v86;
    unint64_t v84 = __clz(__rbit64(v86)) + (v73 << 6);
    if (!*(void *)(v1 + v72))
    {
LABEL_49:
      unint64_t v88 = (unsigned __int8 *)(*(void *)(v119 + 48) + 6 * v84);
      unint64_t v89 = (unint64_t)*(unsigned int *)(v88 + 2) << 16;
      uint64_t v90 = v88[1];
      uint64_t v91 = *v88;
      swift_unownedRetainStrong();
      os_log_t v92 = (uint64_t *)(v89 | (v90 << 8) | v91);
      uint64_t v93 = v123;
      long long v121 = v92;
      sub_10035665C((uint64_t)v92, v123);
      swift_release();
      uint64_t v94 = *(void *)(v115 + *(int *)(v122 + 68));
      sub_100353CCC(v93, type metadata accessor for NANPeer);
      if ((v94 & 0xFF00000000) == 0x200000000) {
        uint64_t v95 = 0x300000000;
      }
      else {
        uint64_t v95 = Optional<A>.init(integerLiteral:)(BYTE6(v94)) & 0xFFFFFFFFFFFFLL;
      }
      swift_bridgeObjectRetain_n();
      os_log_t v96 = Logger.logObject.getter();
      os_log_type_t v97 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v96, v97))
      {
        uint64_t v98 = swift_slowAlloc();
        v128[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v98 = v110;
        unint64_t v99 = v118;
        uint64_t v100 = Optional<A>.description.getter(v118);
        *(void *)(v98 + 4) = sub_100010680(v100, v101, v128);
        swift_bridgeObjectRelease();
        *(_WORD *)(v98 + 12) = 2080;
        uint64_t v102 = Optional<A>.description.getter(v95);
        *(void *)(v98 + 14) = sub_100010680(v102, v103, v128);
        swift_bridgeObjectRelease();
        *(_WORD *)(v98 + 22) = 2048;
        uint64_t v104 = v126[2];
        swift_bridgeObjectRelease();
        *(void *)(v98 + 24) = v104;
        uint64_t v60 = v126;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v96, v97, "Evaluating policy for requester infra channel %s with provider infra channel %s [PCL count: %ld]", (uint8_t *)v98, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        unint64_t v99 = v118;
      }
      swift_bridgeObjectRetain();
      uint64_t v105 = sub_100353910(v95, v99, v114, (uint64_t)v60);
      uint64_t v106 = *(void *)(v1 + qword_1004889F8);
      *(void *)(v1 + qword_1004889F8) = v105;
      sub_100350210(v106);
      uint64_t v72 = (uint64_t)v117;
      if (!*(uint64_t *)((char *)v117 + v1))
      {
        uint64_t v107 = v111;
        swift_beginAccess();
        if (!*(void *)(*v107 + 16) || (sub_100031214((unint64_t)v121), (v108 & 1) == 0))
        {
          swift_endAccess();
          swift_unownedRetainStrong();
          uint64_t v75 = swift_allocObject();
          swift_unknownObjectWeakInit();
          id v76 = (void *)swift_allocObject();
          uint64_t v77 = v113;
          v76[2] = v112;
          v76[3] = v77;
          v76[4] = v75;
          swift_retain();
          unint64_t v78 = v121;
          uint64_t v79 = sub_1003586A4((unint64_t)v121, 30, (uint64_t)sub_100353E60, (uint64_t)v76);
          swift_release();
          swift_release();
          swift_release();
          uint64_t v80 = v111;
          swift_beginAccess();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v127[0] = *v80;
          *uint64_t v80 = 0x8000000000000000;
          uint64_t v82 = v79;
          uint64_t v60 = v126;
          sub_100294C28(v82, (uint64_t)v78, isUniquelyReferenced_nonNull_native);
          *uint64_t v80 = v127[0];
          swift_bridgeObjectRelease();
        }
        swift_endAccess();
      }
    }
  }
  uint64_t v87 = v73 + 1;
  if (v73 + 1 >= (uint64_t)v125) {
    goto LABEL_63;
  }
  unint64_t v86 = *(void *)(v124 + 8 * v87);
  if (v86) {
    goto LABEL_47;
  }
  uint64_t v87 = v73 + 2;
  if (v73 + 2 >= (uint64_t)v125) {
    goto LABEL_63;
  }
  unint64_t v86 = *(void *)(v124 + 8 * v87);
  if (v86) {
    goto LABEL_47;
  }
  uint64_t v87 = v73 + 3;
  if (v73 + 3 >= (uint64_t)v125) {
    goto LABEL_63;
  }
  unint64_t v86 = *(void *)(v124 + 8 * v87);
  if (v86) {
    goto LABEL_47;
  }
  uint64_t v87 = v73 + 4;
  if (v73 + 4 >= (uint64_t)v125) {
    goto LABEL_63;
  }
  unint64_t v86 = *(void *)(v124 + 8 * v87);
  if (v86) {
    goto LABEL_47;
  }
  uint64_t v87 = v73 + 5;
  if (v73 + 5 >= (uint64_t)v125)
  {
LABEL_63:
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_64;
  }
  unint64_t v86 = *(void *)(v124 + 8 * v87);
  if (v86)
  {
LABEL_47:
    uint64_t v73 = v87;
    goto LABEL_48;
  }
  while (1)
  {
    uint64_t v73 = v87 + 1;
    if (__OFADD__(v87, 1)) {
      break;
    }
    if (v73 >= (uint64_t)v125) {
      goto LABEL_63;
    }
    unint64_t v86 = *(void *)(v124 + 8 * v73);
    ++v87;
    if (v86) {
      goto LABEL_48;
    }
  }
LABEL_66:
  __break(1u);
}

id sub_1003519B4()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v0[qword_1004889F8] = 0;
  v3.receiver = v0;
  v3.super_class = ObjectType;
  return [super dealloc];
}

id sub_1003519F8(void *a1)
{
  id v1 = a1;
  return sub_1003519B4();
}

uint64_t sub_100351A20(uint64_t a1)
{
  uint64_t v1 = a1 + qword_1004889F0;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_unownedRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakDestroy();

  return swift_unknownObjectWeakDestroy();
}

void sub_100351B40(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v18 = a4;
    char v12 = (uint8_t *)swift_slowAlloc();
    v20[0] = swift_slowAlloc();
    *(_DWORD *)char v12 = 136315138;
    uint64_t v13 = a1 & 0xFFFFFFFFFFFFLL;
    uint64_t v14 = WiFiAddress.description.getter(v13);
    sub_100010680(v14, v15, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Added provider %s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a4 = v18;
    swift_slowDealloc();
  }
  else
  {

    uint64_t v13 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v16 = (uint64_t *)(v5 + qword_1004878D0);
  swift_beginAccess();
  sub_100038004(a2, a3);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v19 = *v16;
  *uint64_t v16 = 0x8000000000000000;
  sub_100294D50(a4 & 0xFFFFFFFFFFFFFFLL, a2, a3, v13, isUniquelyReferenced_nonNull_native);
  *uint64_t v16 = v19;
  swift_bridgeObjectRelease();
  swift_endAccess();
  sub_10035096C();
}

void sub_100351D48(uint64_t a1)
{
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    v11[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
    uint64_t v6 = WiFiAddress.description.getter(v5);
    sub_100010680(v6, v7, v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Removed %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  swift_beginAccess();
  sub_100367278(v5);
  swift_endAccess();
  swift_release();
  swift_beginAccess();
  sub_10036732C(v5, (uint64_t)v11);
  uint64_t v8 = v11[0];
  uint64_t v9 = v11[1];
  unint64_t v10 = v11[2];
  swift_endAccess();
  sub_100353DF4(v8, v9, v10);
  sub_10035096C();
}

uint64_t sub_100351F34()
{
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v1 = (void *)result;
    uint64_t v2 = _s17InitiatorInstanceCMa();
    uint64_t WitnessTable = swift_getWitnessTable();
    LOBYTE(v2) = sub_100303CEC(v2, WitnessTable);

    return v2 & 1;
  }
  return result;
}

void sub_100351FE4()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    sub_10035096C();
  }
}

uint64_t sub_100352038(uint64_t result)
{
  if (!*(void *)(result + qword_1004889F8))
  {
    uint64_t v1 = result;
    uint64_t v2 = qword_1004878C8;
    if (*(unsigned char *)(result + qword_1004878C8) == 1)
    {
      swift_unownedRetainStrong();
      swift_unownedRetainStrong();
      swift_release();
      sub_10033B3F4();
      uint64_t result = swift_release();
      *(unsigned char *)(v1 + v2) = 0;
    }
  }
  return result;
}

void sub_1003520D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = type metadata accessor for DispatchTimeInterval();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  os_log_type_t v11 = (uint64_t *)((char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  uint64_t v13 = (char *)&v28 - v12;
  __chkstk_darwin();
  unint64_t v15 = (uint64_t *)((char *)&v28 - v14);
  uint64_t v16 = *(void *)(a2 + 8);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v18 = (char *)Strong;
    if (v16)
    {
      if (!*(void *)(Strong + qword_1004878C0)) {
        sub_10035096C();
      }
    }
    else
    {
      uint64_t v32 = a5;
      uint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v19, v20))
      {
        NSString v21 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)NSString v21 = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "Lost infrastructure network, waiting for 5 seconds before re-evaluating infra relay policy", v21, 2u);
        swift_slowDealloc();
      }

      uint64_t v22 = qword_1004878C0;
      uint64_t v23 = *(void *)&v18[qword_1004878C0];
      if (!v23)
      {
        uint64_t v31 = qword_1004878C0;
        *unint64_t v15 = 5;
        uint64_t v29 = *(void (**)(void *, void, uint64_t))(v9 + 104);
        v29(v15, enum case for DispatchTimeInterval.seconds(_:), v8);
        id v30 = (id)*OS_dispatch_queue.nan.unsafeMutableAddressor();
        uint64_t v24 = swift_allocObject();
        swift_unknownObjectWeakInit();
        os_log_type_t v25 = (void *)swift_allocObject();
        uint64_t v26 = v32;
        void v25[2] = a4;
        v25[3] = v26;
        v25[4] = v24;
        uint64_t v27 = v29;
        v29(v13, enum case for DispatchTimeInterval.never(_:), v8);
        void *v11 = 100;
        v27(v11, enum case for DispatchTimeInterval.milliseconds(_:), v8);
        type metadata accessor for P2PTimer();
        swift_allocObject();
        uint64_t v23 = P2PTimer.init(deadlineAfter:on:repeating:leeway:_:)((uint64_t)v15, v30, (uint64_t)v13, (uint64_t)v11, (uint64_t)sub_100353E6C, (uint64_t)v25);
        uint64_t v22 = v31;
      }
      *(void *)&v18[v22] = v23;
      swift_retain();

      swift_release();
    }
  }
}

void sub_100352404()
{
  swift_beginAccess();
  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    *(void *)&Strong[qword_1004878C0] = 0;

    swift_release();
  }
  swift_beginAccess();
  uint64_t v1 = swift_unknownObjectWeakLoadStrong();
  if (v1)
  {
    uint64_t v2 = (void *)v1;
    sub_10035096C();
  }
}

void sub_100352494()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    sub_10035096C();
  }
}

uint64_t sub_1003524E8(unsigned __int16 *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = *((unsigned __int8 *)a1 + 2);
  uint64_t v7 = *(unsigned int *)((char *)a1 + 3);
  uint64_t v8 = *a1;
  swift_unownedRetainStrong();
  sub_100354870();
  swift_release();
  sub_1002E4CE8(v8 | (v6 << 16) | (v7 << 24), a3, a4);
  return swift_release();
}

void sub_100352580(uint64_t a1)
{
  if (*(void *)(v1 + qword_1004889F8))
  {
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();

    if (!Strong && a1 != -1)
    {
      _StringGuts.grow(_:)(40);
      swift_bridgeObjectRelease();
      uint64_t v5 = a1 - 1;
      unint64_t v6 = 0xE900000000000074;
      unint64_t v7 = 0x754F2064656D6954;
      switch(v5)
      {
        case 0:
          break;
        case 1:
          unint64_t v6 = 0xEE00646574736575;
          unint64_t v7 = 0x7165522072657355;
          break;
        case 2:
          unint64_t v6 = 0xEC0000006572756CLL;
          unint64_t v7 = 0x6961462070696843;
          break;
        case 3:
          unint64_t v6 = 0x80000001003DC230;
          unint64_t v7 = 0xD000000000000018;
          break;
        default:
          unint64_t v6 = 0xE700000000000000;
          unint64_t v7 = 0x6E776F6E6B6E55;
          break;
      }
      unint64_t v8 = v6;
      String.append(_:)(*(Swift::String *)&v7);
      swift_bridgeObjectRelease();
      sub_1003508B8(0xD000000000000026, 0x80000001003E1270);
      swift_bridgeObjectRelease();
    }
  }
}

void sub_100352738(void *a1, uint64_t a2, uint64_t a3)
{
  id v4 = a1;
  sub_100352580(a3);
}

void sub_10035278C(void *a1)
{
  uint64_t v2 = v1;
  id v4 = [a1 publisherAddress];
  unint64_t v5 = WiFiMACAddress.wifiAddress.getter();

  unint64_t v6 = (uint64_t *)(v2 + qword_1004878D0);
  swift_beginAccess();
  uint64_t v7 = *v6;
  if (*(void *)(v7 + 16) && (unint64_t v8 = sub_100031214(v5 & 0xFFFFFFFFFFFFLL), (v9 & 1) != 0))
  {
    uint64_t v10 = *(void *)(v7 + 56) + 24 * v8;
    uint64_t v12 = *(void *)(v10 + 8);
    unint64_t v11 = *(void *)(v10 + 16);
    swift_endAccess();
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
    sub_100038004(v12, v11);

    if (Strong)
    {
      sub_10000C95C(v12, v11);
    }
    else
    {
      *(void *)(v2 + qword_1004878B0) = 0;
      swift_release();
      uint64_t v14 = self;
      sub_100038004(v12, v11);
      id v15 = [v14 requestInterentFromResponder];
      id v16 = a1;
      Class isa = 0;
      if (v11 >> 60 != 15)
      {
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        sub_10000C95C(v12, v11);
      }
      LOBYTE(v22) = 0;
      id v18 = [objc_allocWithZone((Class)WiFiAwareDatapathConfiguration) initWithDiscoveryResult:v16 serviceType:0 passphrase:0 pmk:isa pmkID:0 serviceSpecificInfo:0 internetSharingConfiguration:v15 pairingMethod:0 pairingCachingEnabled:v22 pairSetupServiceSpecificInfo:0];

      swift_unownedRetainStrong();
      sub_100354870();
      swift_release();
      uint64_t v19 = (void *)sub_1002FBD54((uint64_t)v18, v2);
      swift_release();
      swift_unknownObjectWeakAssign();

      os_log_type_t v20 = (char *)swift_unknownObjectWeakLoadStrong();
      sub_10000C95C(v12, v11);

      if (v20)
      {
        NSString v21 = &v20[qword_1004888B0];
        *(void *)NSString v21 = *(void *)(v2 + qword_1004889F8);
        v21[8] = 0;
      }
    }
  }
  else
  {
    swift_endAccess();
  }
}

void sub_100352A34(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  sub_10035278C(v4);
}

void sub_100352AA0(void *a1)
{
  id v1 = a1;
  sub_100353F30();
}

void sub_100352AF0(void *a1)
{
  id v1 = a1;
  sub_100353F4C();
}

void sub_100352B38(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = swift_isaMask & *v1;
  uint64_t v5 = type metadata accessor for DispatchTimeInterval();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  unint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v18 - v9;
  __chkstk_darwin();
  uint64_t v12 = (char *)&v18 - v11;
  uint64_t v13 = *(void *)((char *)v1 + qword_1004889F8);
  *(void *)((char *)v1 + qword_1004889F8) = 0;
  sub_100350210(v13);
  if (a1 != -1)
  {
    *(void *)uint64_t v12 = 2;
    uint64_t v19 = v13;
    uint64_t v14 = *(void (**)(char *, void, uint64_t))(v6 + 104);
    v14(v12, enum case for DispatchTimeInterval.seconds(_:), v5);
    id v18 = (id)*OS_dispatch_queue.nan.unsafeMutableAddressor();
    uint64_t v15 = swift_allocObject();
    swift_unknownObjectWeakInit();
    id v16 = (void *)swift_allocObject();
    void v16[2] = *(void *)(v4 + 80);
    void v16[3] = *(void *)(v4 + 88);
    v16[4] = v15;
    v14(v10, enum case for DispatchTimeInterval.never(_:), v5);
    *(void *)unint64_t v8 = 100;
    v14(v8, enum case for DispatchTimeInterval.milliseconds(_:), v5);
    type metadata accessor for P2PTimer();
    swift_allocObject();
    *(void *)((char *)v2 + qword_1004878B8) = P2PTimer.init(deadlineAfter:on:repeating:leeway:_:)((uint64_t)v12, v18, (uint64_t)v10, (uint64_t)v8, (uint64_t)sub_1003540BC, (uint64_t)v16);
    swift_release();
    uint64_t v17 = *(void *)((char *)v2 + qword_1004889F8);
    *(void *)((char *)v2 + qword_1004889F8) = v19;
    sub_100350210(v17);
  }
}

void sub_100352DE4()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v1 = (char *)Strong;
    if (*(void *)(Strong + qword_1004889F8))
    {
      uint64_t v2 = (void *)swift_unknownObjectWeakLoadStrong();

      if (!v2)
      {
        os_log_type_t v3 = &v1[qword_1004878D0];
        swift_beginAccess();
        if (*(void *)(*(void *)v3 + 16)) {
          sub_1003508B8(0xD000000000000024, 0x80000001003E11B0);
        }
      }
    }
  }
}

void sub_100352EA8(void *a1, uint64_t a2, uint64_t a3)
{
  id v4 = a1;
  sub_100352B38(a3);
}

void sub_100352F08(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = a1;
  sub_100353F9C();
}

void sub_100352F7C(int a1, int a2, int a3, void *aBlock)
{
  id v4 = _Block_copy(aBlock);

  _Block_release(v4);
}

uint64_t sub_100352FA8(void *a1, uint64_t a2)
{
  return sub_100352FC0(a1, a2, (uint64_t (*)(void, void))sub_10035408C);
}

uint64_t sub_100352FC0(void *a1, uint64_t a2, uint64_t (*a3)(void, void))
{
  return a3(*(void *)((swift_isaMask & *a1) + 0x50), *(void *)((swift_isaMask & *a1) + 0x58));
}

uint64_t type metadata accessor for LowLatencyInternetRequesterPolicy()
{
  return sub_100038354();
}

unsigned char *sub_100353020(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003530ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t type metadata accessor for LowLatencyInternetProviderPolicy.TearDownReason()
{
  return sub_100038354();
}

uint64_t sub_10035312C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 3) = *(_DWORD *)(a2 + 3);
  unsigned int v4 = (uint64_t *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  if (v5 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v4;
  }
  else
  {
    uint64_t v6 = *v4;
    sub_100013D44(*v4, *(void *)(a2 + 16));
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = v5;
  }
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t sub_1003531AC(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3) = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a1 + 5) = *(unsigned char *)(a2 + 5);
  *(unsigned char *)(a1 + 6) = *(unsigned char *)(a2 + 6);
  unsigned int v4 = (_OWORD *)(a1 + 8);
  unint64_t v5 = (uint64_t *)(a2 + 8);
  unint64_t v6 = *(void *)(a2 + 16);
  if (*(void *)(a1 + 16) >> 60 != 15)
  {
    if (v6 >> 60 != 15)
    {
      uint64_t v8 = *v5;
      sub_100013D44(*v5, *(void *)(a2 + 16));
      uint64_t v9 = *(void *)(a1 + 8);
      unint64_t v10 = *(void *)(a1 + 16);
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = v6;
      sub_10000C970(v9, v10);
      goto LABEL_8;
    }
    sub_1003532A0(a1 + 8);
    goto LABEL_6;
  }
  if (v6 >> 60 == 15)
  {
LABEL_6:
    *unsigned int v4 = *(_OWORD *)v5;
    goto LABEL_8;
  }
  uint64_t v7 = *v5;
  sub_100013D44(*v5, *(void *)(a2 + 16));
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v6;
LABEL_8:
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t sub_1003532A0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1003532F4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(_WORD *)(a1 + 5) = *(_WORD *)(a2 + 5);
  unsigned int v4 = (_OWORD *)(a1 + 8);
  unint64_t v5 = (void *)(a2 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  if (v6 >> 60 != 15)
  {
    unint64_t v7 = *(void *)(a2 + 16);
    if (v7 >> 60 != 15)
    {
      uint64_t v8 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = *v5;
      *(void *)(a1 + 16) = v7;
      sub_10000C970(v8, v6);
      goto LABEL_6;
    }
    sub_1003532A0(a1 + 8);
  }
  *unsigned int v4 = *(_OWORD *)v5;
LABEL_6:
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t sub_100353390(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_1003533E4(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = a2 + 1;
    }
  }
  return result;
}

uint64_t type metadata accessor for LowLatencyInternetProviderPolicy.Requester()
{
  return sub_100038354();
}

uint64_t sub_100353444()
{
  return swift_getWitnessTable();
}

void sub_100353460(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
}

void sub_10035348C(uint64_t a1)
{
}

uint64_t sub_1003534B4()
{
  return sub_100351F34() & 1;
}

uint64_t sub_1003534DC(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 16) = result + 1;
  uint64_t v4 = v3 + 8 * result;
  *(_DWORD *)(v4 + 32) = a2;
  *(unsigned char *)(v4 + 36) = BYTE4(a2);
  *(unsigned char *)(v4 + 37) = BYTE5(a2);
  return result;
}

__n128 sub_100353504(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 16) = a1 + 1;
  uint64_t v4 = v3 + 56 * a1;
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 48) = v5;
  __n128 result = *(__n128 *)(a2 + 32);
  *(__n128 *)(v4 + 64) = result;
  *(void *)(v4 + 80) = *(void *)(a2 + 48);
  return result;
}

id sub_100353534(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  long long v5 = v2;
  Logger.init(subsystem:category:)();
  *(void *)&v5[qword_100487898] = 0;
  *(void *)&v5[qword_1004878A0] = 0;
  *(void *)&v5[qword_1004878A8] = 0;
  *(void *)&v5[qword_1004878B0] = 0;
  *(void *)&v5[qword_1004878B8] = 0;
  *(void *)&v5[qword_1004878C0] = 0;
  v5[qword_1004878C8] = 0;
  *(void *)&v5[qword_1004889F8] = 0;
  *(void *)&v5[qword_1004878D0] = &_swiftEmptyDictionarySingleton;
  *(void *)&v5[qword_1004878D8] = &_swiftEmptyDictionarySingleton;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(void *)&v5[qword_100487890] = a1;
  swift_unownedRetain();

  v7.receiver = v5;
  v7.super_class = ObjectType;
  return [super init];
}

id sub_1003536A4(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return sub_100353534(a1);
}

id sub_1003536D8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  long long v5 = v2;
  Logger.init(subsystem:category:)();
  *(void *)&v5[qword_1004877D0] = 0;
  unint64_t v6 = &v5[qword_1004877D8];
  *unint64_t v6 = 0;
  v6[1] = 0;
  *(void *)&v5[qword_1004877E8] = 0;
  objc_super v7 = &v5[qword_1004877F0];
  *objc_super v7 = 0;
  v7[1] = 0;
  uint64_t v8 = qword_1004877F8;
  type metadata accessor for LowLatencyInternetProviderPolicy.Requester();
  sub_1002FE310();
  *(void *)&v5[v8] = Dictionary.init()();
  swift_unknownObjectWeakInit();
  v5[qword_100487808] = 2;
  *(void *)&v5[qword_1004877E0] = a1;
  swift_unownedRetain();

  v10.receiver = v5;
  v10.super_class = ObjectType;
  return [super init];
}

id sub_100353870(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return sub_1003536D8(a1);
}

uint64_t sub_1003538A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return a5 & 1;
}

uint64_t sub_1003538AC(unsigned __int16 *a1, unsigned int *a2)
{
  return (*(uint64_t (**)(unint64_t, unint64_t, void, void, void))(v2 + 32))(*a1 | ((unint64_t)*(unsigned int *)(a1 + 1) << 16), *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 40) | ((unint64_t)*((unsigned __int8 *)a2 + 6) << 48), *((void *)a2 + 1), *((void *)a2 + 2), *((unsigned __int8 *)a2 + 24)) & 1;
}

uint64_t sub_100353910(unint64_t a1, unint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4 = (void *)a4;
  uint64_t v8 = a1 & 0xFF00000000;
  if ((a1 & 0xFF00000000) != 0x300000000)
  {
    uint64_t v9 = *(void *)(a4 + 16);
    unint64_t v10 = HIDWORD(a1);
    if (v9)
    {
      uint64_t v11 = (unsigned char *)(a4 + 36);
      uint64_t v12 = *(void *)(a4 + 16);
      while (*((_DWORD *)v11 - 1) != a1
           || ((0x801004u >> (8 * BYTE4(a1))) & 0xFFC) != (0x801004u >> (8 * *v11)))
      {
        v11 += 8;
        if (!--v12) {
          goto LABEL_8;
        }
      }
    }
    else
    {
LABEL_8:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v4 = sub_1000C5C4C(0, v9 + 1, 1, v4);
      }
      unint64_t v14 = v4[2];
      unint64_t v13 = v4[3];
      if (v14 >= v13 >> 1) {
        uint64_t v4 = sub_1000C5C4C((void *)(v13 > 1), v14 + 1, 1, v4);
      }
      void v4[2] = v14 + 1;
      uint64_t v15 = &v4[v14];
      *((_DWORD *)v15 + 8) = a1;
      *((unsigned char *)v15 + 36) = v10;
      *((unsigned char *)v15 + 37) = BYTE5(a1);
    }
  }
  uint64_t v16 = a2 & 0xFF00000000;
  if ((a2 & 0xFF00000000) != 0x300000000)
  {
    uint64_t v17 = v4[2];
    if (v17)
    {
      id v18 = (char *)v4 + 36;
      uint64_t v19 = v4[2];
      while (*((_DWORD *)v18 - 1) != a2
           || ((0x801004u >> (8 * BYTE4(a2))) & 0xFFC) != (0x801004u >> (8 * *v18)))
      {
        v18 += 8;
        if (!--v19) {
          goto LABEL_20;
        }
      }
    }
    else
    {
LABEL_20:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v4 = sub_1000C5C4C(0, v17 + 1, 1, v4);
      }
      unint64_t v21 = v4[2];
      unint64_t v20 = v4[3];
      if (v21 >= v20 >> 1) {
        uint64_t v4 = sub_1000C5C4C((void *)(v20 > 1), v21 + 1, 1, v4);
      }
      void v4[2] = v21 + 1;
      uint64_t v22 = &v4[v21];
      *((_DWORD *)v22 + 8) = a2;
      *((unsigned char *)v22 + 36) = BYTE4(a2);
      *((unsigned char *)v22 + 37) = BYTE5(a2);
    }
  }
  uint64_t v23 = swift_bridgeObjectRetain();
  uint64_t v24 = sub_10033D9A0(v23);
  swift_bridgeObjectRelease();
  unint64_t v25 = *(void *)(v24 + 16);
  swift_bridgeObjectRelease();
  if (a3)
  {
    if (v25 < 2) {
      goto LABEL_34;
    }
LABEL_33:
    swift_bridgeObjectRelease();
    return 1;
  }
  if (v25)
  {
    if (v25 == 1 && !v8 && v16 != 0x300000000 && v16) {
      goto LABEL_38;
    }
    goto LABEL_33;
  }
LABEL_34:
  if (v8 == 0x300000000 && v16 == 0x300000000)
  {
LABEL_36:
    swift_bridgeObjectRelease();
    return 3;
  }
LABEL_38:
  uint64_t v27 = swift_bridgeObjectRetain();
  uint64_t v28 = sub_10033DAB0(v27);
  swift_bridgeObjectRelease();
  unint64_t v29 = *(void *)(v28 + 16);
  swift_bridgeObjectRelease();
  if (v29 < 2) {
    goto LABEL_57;
  }
  if (v16 == 0x300000000)
  {
    if (v8 != 0x300000000) {
      goto LABEL_49;
    }
LABEL_57:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (v8 == 0x300000000) {
    int v30 = 0;
  }
  else {
    int v30 = a1;
  }
  if (v8 != 0x300000000 && v30 == a2)
  {
    uint64_t v31 = a1 & 0xFF00000000;
    if ((a2 & 0xFF00000000) == 0x300000000)
    {
      if (v31 == 0x300000000) {
        goto LABEL_57;
      }
    }
    else if (v31 != 0x300000000 {
           && ((0x801004u >> ((a2 >> 29) & 0xF8)) & 0xFFC) == ((0x801004u >> ((a1 >> 29) & 0xF8)) & 0xFFC))
    }
    {
      goto LABEL_57;
    }
  }
LABEL_49:
  uint64_t v32 = v4[2];
  if (!v32) {
    goto LABEL_36;
  }
  swift_bridgeObjectRetain();
  for (unint64_t i = (char *)v4 + 37; !Channel.isDFS.getter(*(_DWORD *)(i - 5)); i += 8)
  {
    if (!--v32)
    {
      swift_bridgeObjectRelease_n();
      return 3;
    }
  }
  uint64_t v26 = 2;
  swift_bridgeObjectRelease_n();
  return v26;
}

uint64_t sub_100353CCC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100353D2C(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  if (a4 != 2) {
    return sub_10000C95C(a2, a3);
  }
  return result;
}

uint64_t sub_100353D48(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t sub_100353D50()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100353D88(uint64_t a1, uint64_t *a2)
{
  return sub_10034ED1C(a1, a2);
}

BOOL sub_100353D94(unsigned __int16 *a1)
{
  return sub_10034EA00(*a1 | ((unint64_t)*(unsigned int *)(a1 + 1) << 16)) != 0;
}

uint64_t sub_100353DD4(uint64_t a1)
{
  return sub_10034EDB0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100353DF4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 60 != 11) {
    return sub_10000C95C(a2, a3);
  }
  return result;
}

uint64_t sub_100353E10()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100353E48()
{
}

void sub_100353E54(uint64_t a1, uint64_t a2)
{
  sub_1003520D4(a1, a2, v2[4], v2[2], v2[3]);
}

void sub_100353E60()
{
}

void sub_100353E6C()
{
}

void sub_100353E78()
{
}

uint64_t sub_100353E84(unsigned __int16 *a1)
{
  return sub_1003524E8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

void *sub_100353EA4(void *a1)
{
  unint64_t v2 = sub_10034EE44(a1);
  uint64_t v5 = v1;
  return sub_1002D904C((void *(*)(uint64_t *__return_ptr, __int16 *))sub_1003540E8, (uint64_t)&v4, v2 & 0xFFFFFFFFFFFFLL | ((HIWORD(v2) & 1) << 48));
}

void sub_100353F00()
{
}

void sub_100353F30()
{
}

void sub_100353F4C()
{
  swift_unknownObjectWeakAssign();

  sub_1003508B8(0xD000000000000029, 0x80000001003E11E0);
}

uint64_t sub_100353F9C()
{
  uint64_t v1 = v0;
  sub_100350840();
  uint64_t v2 = qword_1004878C8;
  if (*(unsigned char *)(v0 + qword_1004878C8) == 1)
  {
    swift_unownedRetainStrong();
    swift_unownedRetainStrong();
    swift_release();
    sub_10033B3F4();
    swift_release();
    *(unsigned char *)(v0 + v2) = 0;
  }
  uint64_t v3 = (void *)(v0 + qword_100487898);
  swift_beginAccess();
  void *v3 = 0;
  swift_release();
  uint64_t v4 = (void *)(v1 + qword_1004878A0);
  swift_beginAccess();
  *uint64_t v4 = 0;
  return swift_release();
}

void sub_10035408C()
{
}

void sub_1003540BC()
{
}

uint64_t sub_1003540C8(unsigned __int8 *a1)
{
  return sub_10034FBE8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1003540E8@<X0>(int *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_10034F710(a1, a2);
}

uint64_t sub_100354108()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_100354140()
{
  sub_10034F678(*(void *)(v0 + 16));
}

void sub_100354168()
{
  sub_10027E0A4();
  if (v0 <= 0x3F)
  {
    sub_1003667F8(319, &qword_100487B28, (void (*)(void))sub_1002769A8);
    if (v1 <= 0x3F)
    {
      sub_1003667F8(319, &qword_100483CC0, (void (*)(void))sub_100262480);
      if (v2 <= 0x3F)
      {
        sub_1003667F8(319, &qword_100487B48, (void (*)(void))sub_10021AC38);
        if (v3 <= 0x3F)
        {
          sub_1003666F4(319, &qword_100487B58, &qword_100487B60, &qword_100487B68, (void (*)(void))sub_100142E70);
          if (v4 <= 0x3F)
          {
            sub_1003667F8(319, &qword_100487B78, (void (*)(void))sub_1001C7C00);
            if (v5 <= 0x3F)
            {
              sub_1003666F4(319, &qword_100487B88, (uint64_t *)&unk_100487B90, &qword_1004872E0, (void (*)(void))sub_1001C7C00);
              if (v6 <= 0x3F)
              {
                sub_1003667F8(319, (unint64_t *)&unk_100487BA0, (void (*)(void))sub_100110588);
                if (v7 <= 0x3F)
                {
                  sub_1003667F8(319, (unint64_t *)&unk_100487BB0, (void (*)(void))sub_10021C7DC);
                  if (v8 <= 0x3F)
                  {
                    sub_100366858();
                    if (v9 <= 0x3F)
                    {
                      sub_100366900();
                      if (v10 <= 0x3F)
                      {
                        sub_100366A0C();
                        if (v11 <= 0x3F)
                        {
                          type metadata accessor for NANDriverCapabilities();
                          if (v12 <= 0x3F)
                          {
                            type metadata accessor for DispatchTime();
                            if (v13 <= 0x3F) {
                              swift_initClassMetadata2();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1003546AC()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  unint64_t v4 = (uint64_t *)((char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v5 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  unint64_t v6 = (void *)*v5;
  *unint64_t v4 = *v5;
  (*(void (**)(uint64_t *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v2 + 8))(v4, v1);
  if ((v6 & 1) == 0)
  {
    __break(1u);
    return result;
  }
  if (sub_100355DD4())
  {
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t result = swift_bridgeObjectRelease();
  if (v9)
  {
LABEL_5:
    if (!*(void *)(v0 + *(void *)(*(void *)v0 + 496))) {
      return result;
    }
  }
  sub_10000F000();
  swift_allocError();
  *(_OWORD *)uint64_t v10 = xmmword_1003B0090;
  *(unsigned char *)(v10 + 16) = 1;
  return swift_willThrow();
}

uint64_t sub_100354870()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 632);
  if (*(void *)(v0 + v1))
  {
    uint64_t v2 = *(void *)(v0 + v1);
  }
  else
  {
    uint64_t v3 = v0;
    type metadata accessor for NANDiscoveryEngine();
    uint64_t v4 = swift_retain();
    uint64_t v2 = sub_1002FEE5C(v4);
    swift_release();
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_100354930(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100010BCC(&qword_100485280);
  __chkstk_darwin(v6 - 8);
  unint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for NANAttribute(0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_1000380B4(a1, &qword_100485280);
    unint64_t v13 = sub_10039F7B4(a2);
    if (v14)
    {
      unint64_t v15 = v13;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v17 = *v3;
      uint64_t v21 = *v3;
      uint64_t *v3 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1003A1D1C();
        uint64_t v17 = v21;
      }
      sub_100297894(*(void *)(v17 + 56) + *(void *)(v10 + 72) * v15, (uint64_t)v8, type metadata accessor for NANAttribute);
      sub_1003A03F0(v15, v17);
      uint64_t *v3 = v17;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    }
    return sub_1000380B4((uint64_t)v8, &qword_100485280);
  }
  else
  {
    sub_100297894(a1, (uint64_t)v12, type metadata accessor for NANAttribute);
    char v18 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    sub_100294AAC((uint64_t)v12, a2, v18);
    uint64_t *v3 = v21;
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100354B90(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  sub_100010BCC((uint64_t *)&unk_100485B60);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NANInternetSharingStatistics.Requester();
  __chkstk_darwin();
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v10 + 48))(a1, 1) == 1)
  {
    sub_1000380B4(a1, (uint64_t *)&unk_100485B60);
    sub_10036753C(a2 & 0xFFFFFFFFFFFFFFLL, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester, (void (*)(unint64_t, uint64_t))sub_1003A09AC, (void (*)(void))sub_1003A2468, (uint64_t)v7);
    return sub_1000380B4((uint64_t)v7, (uint64_t *)&unk_100485B60);
  }
  else
  {
    sub_100297894(a1, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    sub_100294ECC((uint64_t)v9, a2 & 0xFFFFFFFFFFFFFFLL, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v14;
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100354D90(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  sub_100010BCC((uint64_t *)&unk_1004862F0);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NANPeer.Service.AuthenticationStatus(0);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v10 + 48))(a1, 1) == 1)
  {
    sub_1000380B4(a1, (uint64_t *)&unk_1004862F0);
    sub_10036753C(a2 & 0xFFFFFFFFFFFFFFLL, type metadata accessor for NANPeer.Service.AuthenticationStatus, type metadata accessor for NANPeer.Service.AuthenticationStatus, (void (*)(unint64_t, uint64_t))sub_1003A0EA8, (void (*)(void))sub_1003A3444, (uint64_t)v7);
    return sub_1000380B4((uint64_t)v7, (uint64_t *)&unk_1004862F0);
  }
  else
  {
    sub_100297894(a1, (uint64_t)v9, type metadata accessor for NANPeer.Service.AuthenticationStatus);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    sub_100295634((uint64_t)v9, a2 & 0xFFFFFFFFFFFFFFLL, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v14;
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100354F90(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    sub_10006EF50((long long *)a1, (uint64_t)v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    sub_1002957D4(v9, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v8;
    swift_bridgeObjectRelease();
    uint64_t v5 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a2, v5);
  }
  else
  {
    sub_1000380B4(a1, (uint64_t *)&unk_100485890);
    sub_1003676E4(a2, (uint64_t)v9);
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a2, v7);
    return sub_1000380B4((uint64_t)v9, (uint64_t *)&unk_100485890);
  }
}

uint64_t sub_1003550B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  sub_100010BCC(&qword_100487CA0);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NANPeer(0);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v10 + 48))(a1, 1) == 1)
  {
    sub_1000380B4(a1, &qword_100487CA0);
    sub_100367AB0(a2 & 0xFFFFFFFFFFFFLL, type metadata accessor for NANPeer, type metadata accessor for NANPeer, (void (*)(unint64_t, uint64_t))sub_1003A1418, (void (*)(void))sub_1003A3ED4, (uint64_t)v7);
    return sub_1000380B4((uint64_t)v7, &qword_100487CA0);
  }
  else
  {
    sub_100297894(a1, (uint64_t)v9, type metadata accessor for NANPeer);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    sub_1002959B0((uint64_t)v9, a2 & 0xFFFFFFFFFFFFLL, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v14;
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1003552B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  sub_100010BCC(&qword_100487CE0);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AWDLPeer(0);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v10 + 48))(a1, 1) == 1)
  {
    sub_1000380B4(a1, &qword_100487CE0);
    sub_100367AB0(a2 & 0xFFFFFFFFFFFFLL, type metadata accessor for AWDLPeer, type metadata accessor for AWDLPeer, (void (*)(unint64_t, uint64_t))sub_1003A09C4, (void (*)(void))sub_1003A2654, (uint64_t)v7);
    return sub_1000380B4((uint64_t)v7, &qword_100487CE0);
  }
  else
  {
    sub_100297894(a1, (uint64_t)v9, type metadata accessor for AWDLPeer);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    sub_100295CF8((uint64_t)v9, a2 & 0xFFFFFFFFFFFFLL, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v14;
    return swift_bridgeObjectRelease();
  }
}

void *sub_1003554B0(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = a1;
  sub_10008345C(0, v1, 0);
  uint64_t result = (void *)sub_1003670A4(v2);
  uint64_t v5 = (uint64_t)result;
  uint64_t v6 = 0;
  char v8 = v7 & 1;
  uint64_t v9 = v2 + 64;
  uint64_t v27 = v4;
  int64_t v28 = v1;
  uint64_t v25 = v2 + 96;
  uint64_t v29 = v2 + 64;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(unsigned char *)(v2 + 32))
  {
    unint64_t v12 = (unint64_t)v5 >> 6;
    if ((*(void *)(v9 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0) {
      goto LABEL_28;
    }
    if (*(_DWORD *)(v2 + 36) != v4) {
      goto LABEL_29;
    }
    uint64_t v30 = v6;
    uint64_t v31 = v4;
    char v26 = v8;
    uint64_t result = (void *)Channel.description.getter(*(unsigned int *)(*(void *)(v2 + 48) + 8 * v5) | ((unint64_t)*(unsigned __int8 *)(*(void *)(v2 + 48) + 8 * v5 + 4) << 32) | ((unint64_t)*(unsigned __int8 *)(*(void *)(v2 + 48) + 8 * v5 + 5) << 40));
    uint64_t v13 = result;
    uint64_t v15 = v14;
    uint64_t v16 = v2;
    unint64_t v18 = _swiftEmptyArrayStorage[2];
    unint64_t v17 = _swiftEmptyArrayStorage[3];
    if (v18 >= v17 >> 1) {
      uint64_t result = (void *)sub_10008345C(v17 > 1, v18 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v18 + 1;
    uint64_t v19 = &_swiftEmptyArrayStorage[2 * v18];
    void v19[4] = v13;
    v19[5] = v15;
    int64_t v10 = 1 << *(unsigned char *)(v16 + 32);
    if (v5 >= v10) {
      goto LABEL_30;
    }
    uint64_t v9 = v29;
    uint64_t v20 = *(void *)(v29 + 8 * v12);
    if ((v20 & (1 << v5)) == 0) {
      goto LABEL_31;
    }
    uint64_t v2 = v16;
    if (*(_DWORD *)(v16 + 36) != v31) {
      goto LABEL_32;
    }
    unint64_t v21 = v20 & (-2 << (v5 & 0x3F));
    if (v21)
    {
      int64_t v10 = __clz(__rbit64(v21)) | v5 & 0xFFFFFFFFFFFFFFC0;
      int64_t v11 = v28;
    }
    else
    {
      unint64_t v22 = v12 + 1;
      unint64_t v23 = (unint64_t)(v10 + 63) >> 6;
      int64_t v11 = v28;
      if (v12 + 1 < v23)
      {
        unint64_t v24 = *(void *)(v29 + 8 * v22);
        if (!v24)
        {
          unint64_t v22 = v12 + 2;
          if (v12 + 2 >= v23) {
            goto LABEL_4;
          }
          unint64_t v24 = *(void *)(v29 + 8 * v22);
          if (!v24)
          {
            unint64_t v22 = v12 + 3;
            if (v12 + 3 >= v23) {
              goto LABEL_4;
            }
            unint64_t v24 = *(void *)(v29 + 8 * v22);
            if (!v24)
            {
              while (v23 - 4 != v12)
              {
                unint64_t v24 = *(void *)(v25 + 8 * v12++);
                if (v24)
                {
                  uint64_t result = (void *)sub_100038030(v5, v31, v26 & 1);
                  unint64_t v22 = v12 + 3;
                  goto LABEL_17;
                }
              }
              uint64_t result = (void *)sub_100038030(v5, v31, v26 & 1);
              goto LABEL_4;
            }
          }
        }
LABEL_17:
        int64_t v10 = __clz(__rbit64(v24)) + (v22 << 6);
      }
    }
LABEL_4:
    char v8 = 0;
    uint64_t v6 = v30 + 1;
    uint64_t v4 = v27;
    uint64_t v5 = v10;
    if (v30 + 1 == v11) {
      return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

void *sub_10035573C(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = a1;
  sub_10008345C(0, v1, 0);
  uint64_t result = (void *)sub_1003670A4(v2);
  uint64_t v5 = (uint64_t)result;
  uint64_t v6 = 0;
  char v8 = v7 & 1;
  uint64_t v9 = v2 + 64;
  uint64_t v26 = v4;
  int64_t v27 = v1;
  uint64_t v24 = v2 + 96;
  uint64_t v28 = v2 + 64;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(unsigned char *)(v2 + 32))
  {
    unint64_t v11 = (unint64_t)v5 >> 6;
    if ((*(void *)(v9 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0) {
      goto LABEL_28;
    }
    if (*(_DWORD *)(v2 + 36) != v4) {
      goto LABEL_29;
    }
    uint64_t v29 = v6;
    uint64_t v30 = v4;
    char v25 = v8;
    uint64_t result = (void *)String.init<A>(describing:)();
    unint64_t v12 = result;
    uint64_t v14 = v13;
    uint64_t v15 = v2;
    unint64_t v17 = _swiftEmptyArrayStorage[2];
    unint64_t v16 = _swiftEmptyArrayStorage[3];
    if (v17 >= v16 >> 1) {
      uint64_t result = (void *)sub_10008345C(v16 > 1, v17 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v17 + 1;
    unint64_t v18 = &_swiftEmptyArrayStorage[2 * v17];
    v18[4] = v12;
    uint64_t v18[5] = v14;
    int64_t v10 = 1 << *(unsigned char *)(v15 + 32);
    if (v5 >= v10) {
      goto LABEL_30;
    }
    uint64_t v2 = v15;
    uint64_t v9 = v28;
    uint64_t v19 = *(void *)(v28 + 8 * v11);
    if ((v19 & (1 << v5)) == 0) {
      goto LABEL_31;
    }
    if (*(_DWORD *)(v2 + 36) != v30) {
      goto LABEL_32;
    }
    unint64_t v20 = v19 & (-2 << (v5 & 0x3F));
    if (v20)
    {
      int64_t v10 = __clz(__rbit64(v20)) | v5 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v21 = v11 + 1;
      unint64_t v22 = (unint64_t)(v10 + 63) >> 6;
      if (v11 + 1 < v22)
      {
        unint64_t v23 = *(void *)(v28 + 8 * v21);
        if (!v23)
        {
          unint64_t v21 = v11 + 2;
          if (v11 + 2 >= v22) {
            goto LABEL_4;
          }
          unint64_t v23 = *(void *)(v28 + 8 * v21);
          if (!v23)
          {
            unint64_t v21 = v11 + 3;
            if (v11 + 3 >= v22) {
              goto LABEL_4;
            }
            unint64_t v23 = *(void *)(v28 + 8 * v21);
            if (!v23)
            {
              while (v22 - 4 != v11)
              {
                unint64_t v23 = *(void *)(v24 + 8 * v11++);
                if (v23)
                {
                  uint64_t result = (void *)sub_100038030(v5, v30, v25 & 1);
                  unint64_t v21 = v11 + 3;
                  goto LABEL_17;
                }
              }
              uint64_t result = (void *)sub_100038030(v5, v30, v25 & 1);
              goto LABEL_4;
            }
          }
        }
LABEL_17:
        int64_t v10 = __clz(__rbit64(v23)) + (v21 << 6);
      }
    }
LABEL_4:
    char v8 = 0;
    uint64_t v6 = v29 + 1;
    uint64_t v5 = v10;
    uint64_t v4 = v26;
    if (v29 + 1 == v27) {
      return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_1003559BC(uint64_t a1)
{
  if (a1 == 16)
  {
    uint64_t result = static WiFiAddress.randomLinkLocalAddress()();
    uint64_t v3 = v1 + *(void *)(*(void *)v1 + 464);
    *(_WORD *)(v3 + 4) = WORD2(result);
    *(_DWORD *)uint64_t v3 = result;
    *(unsigned char *)(v3 + 6) = 0;
  }
  else
  {
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v4 = xmmword_1003B2F00;
    *(unsigned char *)(v4 + 16) = 1;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_100355A54(uint64_t result)
{
  if (result == 16)
  {
    uint64_t v2 = v1 + *(void *)(*(void *)v1 + 464);
    *(_WORD *)(v2 + 4) = 0;
    *(_DWORD *)uint64_t v2 = 0;
    *(unsigned char *)(v2 + 6) = 1;
  }
  else
  {
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v3 = xmmword_1003B2F00;
    *(unsigned char *)(v3 + 16) = 1;
    return swift_willThrow();
  }
  return result;
}

uint64_t (*sub_100355AFC(void *a1, unsigned __int8 a2))()
{
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = sub_100367C58(v4, a2);
  return sub_100355B5C;
}

void (*sub_100355B60(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x40uLL);
  *a1 = v2;
  uint64_t v3 = type metadata accessor for UUID();
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v4;
  v2[5] = v4;
  uint64_t v6 = malloc(*(void *)(v4 + 64));
  v2[6] = v6;
  (*(void (**)(void))(v5 + 16))();
  v2[7] = sub_100367CEC(v2, (uint64_t)v6);
  return sub_100355C50;
}

void sub_100355C50(void *a1)
{
  uint64_t v1 = (void *)*a1;
  uint64_t v2 = *(void **)(*a1 + 48);
  uint64_t v3 = *(void *)(*a1 + 32);
  uint64_t v4 = *(void *)(*a1 + 40);
  (*(void (**)(void, void))(*a1 + 56))(*a1, 0);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v2, v3);
  free(v2);

  free(v1);
}

uint64_t (*sub_100355CC8(void *a1, uint64_t a2))()
{
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = sub_100367F34(v4, a2 & 0xFFFFFFFFFFFFLL);
  return sub_100355B5C;
}

uint64_t (*sub_100355D28(void *a1, char a2))()
{
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = sub_100367EA4(v4, a2);
  return sub_100355B5C;
}

void sub_100355D88(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 32))(*a1, 0);

  free(v1);
}

uint64_t sub_100355DD4()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 520);
  swift_beginAccess();
  return *(unsigned __int8 *)(v1 + *(int *)(sub_100010BCC(&qword_100487C80) + 40));
}

uint64_t sub_100355E38(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v41 = a1;
  uint64_t v42 = a2;
  uint64_t v4 = *v2;
  uint64_t v40 = v4;
  uint64_t v5 = type metadata accessor for DispatchTime();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  id v38 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchTimeInterval();
  uint64_t v36 = *(void *)(v8 - 8);
  uint64_t v37 = v8;
  __chkstk_darwin();
  uint64_t v35 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v34 = (char *)&v33 - v10;
  sub_100010BCC(&qword_10047DB90);
  __chkstk_darwin();
  uint64_t v39 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v33 - v12;
  __chkstk_darwin();
  uint64_t v15 = (char *)&v33 - v14;
  uint64_t v16 = (uint64_t)v3 + *(void *)(v4 + 512);
  swift_beginAccess();
  sub_1000136F4(v16, (uint64_t)v15, &qword_10047DB90);
  unint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  LODWORD(v4) = v17(v15, 1, v5);
  uint64_t v18 = (uint64_t)v15;
  uint64_t v19 = v5;
  sub_1000380B4(v18, &qword_10047DB90);
  if (v4 == 1) {
    goto LABEL_4;
  }
  type metadata accessor for P2PTimer();
  unint64_t v20 = v38;
  variable initialization expression of AWDLPeer.lastUpdated();
  sub_1000136F4(v16, (uint64_t)v13, &qword_10047DB90);
  uint64_t result = v17(v13, 1, v19);
  if (result == 1)
  {
    __break(1u);
    return result;
  }
  unint64_t v22 = v34;
  DispatchTime.distance(to:)();
  unint64_t v23 = *(void (**)(char *, uint64_t))(v6 + 8);
  v23(v20, v19);
  v23(v13, v19);
  char v25 = v35;
  uint64_t v24 = v36;
  *(void *)uint64_t v35 = 5;
  uint64_t v26 = v37;
  (*(void (**)(char *, void, uint64_t))(v24 + 104))(v25, enum case for DispatchTimeInterval.seconds(_:), v37);
  BOOL v27 = static DispatchTimeInterval.< infix(_:_:)();
  uint64_t v28 = *(uint64_t (**)(char *, uint64_t))(v24 + 8);
  v28(v25, v26);
  uint64_t result = v28(v22, v26);
  if (v27)
  {
LABEL_4:
    type metadata accessor for P2PTimer();
    uint64_t v29 = (uint64_t)v39;
    variable initialization expression of AWDLPeer.lastUpdated();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v29, 0, 1, v19);
    swift_beginAccess();
    sub_10027ECE4(v29, v16);
    swift_endAccess();
    swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 160);
    uint64_t v32 = swift_checkMetadataState();
    return v31(v41, v42, v32, AssociatedConformanceWitness);
  }
  return result;
}

uint64_t sub_1003564D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 584);
  swift_beginAccess();
  return sub_1000136F4(v3, a1, (uint64_t *)&unk_100487A80);
}

unint64_t sub_100356538()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 552);
  uint64_t v2 = (unsigned int *)(v0 + *(int *)(sub_100010BCC(&qword_100487C90) + 40) + v1);
  return *v2 | ((unint64_t)*((unsigned __int8 *)v2 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v2 + 5) << 40);
}

unint64_t sub_100356594()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 560);
  uint64_t v2 = (unsigned int *)(v0 + *(int *)(sub_100010BCC(&qword_100487C88) + 40) + v1);
  return *v2 | ((unint64_t)*((unsigned __int16 *)v2 + 2) << 32);
}

uint64_t sub_1003565E8(objc_class *a1)
{
  v3.Class isa = a1;
  swift_beginAccess();
  uint64_t v1 = sub_100010BCC(&qword_100487CE8);
  MutableDriverProperty.wrappedValue.setter(&v3, v1);
  return swift_endAccess();
}

uint64_t sub_10035665C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_100010BCC(&qword_100487CA0);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t v9 = (uint64_t *)(v2 + *(void *)(*(void *)v2 + 440));
  swift_beginAccess();
  uint64_t v10 = *v9;
  if (*(void *)(v10 + 16) && (unint64_t v11 = sub_100031214(a1 & 0xFFFFFFFFFFFFLL), (v12 & 1) != 0))
  {
    unint64_t v13 = v11;
    uint64_t v14 = *(void *)(v10 + 56);
    uint64_t v15 = type metadata accessor for NANPeer(0);
    uint64_t v16 = *(void *)(v15 - 8);
    sub_10036BA3C(v14 + *(void *)(v16 + 72) * v13, (uint64_t)v8, type metadata accessor for NANPeer);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v8, 0, 1, v15);
  }
  else
  {
    uint64_t v15 = type metadata accessor for NANPeer(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v8, 1, 1, v15);
  }
  sub_10006EC68((uint64_t)v8, (uint64_t)v6, &qword_100487CA0);
  type metadata accessor for NANPeer(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v6, 1, v15) == 1)
  {
    sub_1002A1890(a1 & 0xFFFFFFFFFFFFLL, a2);
    sub_1000380B4((uint64_t)v6, &qword_100487CA0);
  }
  else
  {
    sub_100297894((uint64_t)v6, a2, type metadata accessor for NANPeer);
  }
  return swift_endAccess();
}

BOOL sub_1003568D0()
{
  return *(void *)(v0 + *(void *)(*(void *)v0 + 496)) != 0;
}

uint64_t sub_1003568F4(uint64_t a1, uint64_t a2)
{
  sub_100010BCC(&qword_100487CA0);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10036BA3C(a1, (uint64_t)v5, type metadata accessor for NANPeer);
  uint64_t v6 = type metadata accessor for NANPeer(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 0, 1, v6);
  swift_beginAccess();
  sub_1003550B0((uint64_t)v5, a2 & 0xFFFFFFFFFFFFLL);
  swift_endAccess();
  sub_100358DC4();
  return sub_10036B854(a1, type metadata accessor for NANPeer);
}

uint64_t sub_100356A44(uint64_t a1)
{
  uint64_t v3 = a1;
  swift_beginAccess();
  uint64_t v1 = sub_100010BCC((uint64_t *)&unk_100487A80);
  ObservableWiFiProperty.wrappedValue.setter((char *)&v3, v1);
  return swift_endAccess();
}

uint64_t sub_100356AB8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 640);
  if (*(void *)(v0 + v1))
  {
    uint64_t v2 = *(void *)(v0 + v1);
  }
  else
  {
    uint64_t v3 = v0;
    type metadata accessor for NANOutOfBoundActionFrameTransmitter();
    uint64_t v4 = swift_retain();
    uint64_t v2 = sub_100335D44(v4);
    swift_release();
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_100356B78(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(v2 + *(void *)(*(void *)v2 + 440));
  swift_beginAccess();
  uint64_t v6 = *v5;
  uint64_t v7 = sub_100374AE8(v6);
  uint64_t v9 = v8;
  uint64_t v10 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v11 = *(unsigned int *)(v6 + 36);
  char v13 = v12 & 1;
  uint64_t v17 = v6;
  uint64_t v18 = v7;
  uint64_t v19 = v8;
  char v20 = v12 & 1;
  uint64_t v21 = v10;
  uint64_t v22 = v11;
  char v23 = 0;
  void v15[2] = a1;
  uint64_t v15[3] = a2;
  uint64_t v16 = v2;
  swift_bridgeObjectRetain();
  sub_100370758((void (*)(void))sub_10036B914, (uint64_t)v15);
  swift_bridgeObjectRelease();
  return sub_100038030(v7, v9, v13);
}

uint64_t sub_100356C70(char a1)
{
  LOBYTE(v3.isa) = a1 & 1;
  swift_beginAccess();
  uint64_t v1 = sub_100010BCC(&qword_100487C80);
  MutableDriverProperty.wrappedValue.setter(&v3, v1);
  return swift_endAccess();
}

uint64_t sub_100356CE8@<X0>(uint64_t a1@<X8>)
{
  sub_100010BCC(&qword_10047DB90);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchTime();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v16 - v9;
  uint64_t v11 = v1 + *(void *)(*(void *)v1 + 504);
  swift_beginAccess();
  sub_1000136F4(v11, (uint64_t)v4, &qword_10047DB90);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_1000380B4((uint64_t)v4, &qword_10047DB90);
    uint64_t v12 = enum case for DispatchTimeInterval.never(_:);
    uint64_t v13 = type metadata accessor for DispatchTimeInterval();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 104))(a1, v12, v13);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v10, v4, v5);
    type metadata accessor for P2PTimer();
    variable initialization expression of AWDLPeer.lastUpdated();
    DispatchTime.distance(to:)();
    uint64_t v15 = *(void (**)(char *, uint64_t))(v6 + 8);
    v15(v8, v5);
    return ((uint64_t (*)(char *, uint64_t))v15)(v10, v5);
  }
}

uint64_t sub_100356F3C()
{
  uint64_t v1 = type metadata accessor for DispatchTime();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v10 - v5;
  type metadata accessor for P2PTimer();
  variable initialization expression of AWDLPeer.lastUpdated();
  uint64_t v7 = v0 + *(void *)(*(void *)v0 + 672);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v7, v1);
  DispatchTime.distance(to:)();
  uint64_t v8 = *(void (**)(char *, uint64_t))(v2 + 8);
  v8(v4, v1);
  return ((uint64_t (*)(char *, uint64_t))v8)(v6, v1);
}

uint64_t sub_1003570B4(objc_class *a1, objc_class *a2)
{
  v4[0].Class isa = a1;
  v4[1].Class isa = a2;
  swift_beginAccess();
  uint64_t v2 = sub_100010BCC(&qword_100487C98);
  MutableDriverProperty.wrappedValue.setter(v4, v2);
  return swift_endAccess();
}

uint64_t sub_100357128(objc_class *a1)
{
  v3.Class isa = a1;
  swift_beginAccess();
  uint64_t v1 = sub_100010BCC(&qword_100487CE8);
  MutableDriverProperty.wrappedValue.setter(&v3, v1);
  return swift_endAccess();
}

uint64_t sub_10035719C()
{
  uint64_t v2 = v0;
  uint64_t v84 = *(void *)v0;
  uint64_t v3 = v84;
  uint64_t v85 = v1;
  uint64_t v74 = type metadata accessor for Logger();
  uint64_t v78 = *(void *)(v74 - 8);
  __chkstk_darwin();
  uint64_t v77 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(*(void *)(v84 + 416) + 8);
  uint64_t v6 = *(void *)(v84 + 408);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v75 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  id v76 = (char *)&v63 - v8;
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v72 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v82 = v9;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v80 = *(void *)(v10 - 8);
  uint64_t v81 = v10;
  __chkstk_darwin();
  unint64_t v71 = (char *)&v63 - v11;
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v12 = type metadata accessor for Preferences();
  uint64_t v79 = *(void *)(v12 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v63 - v13;
  uint64_t v83 = v5;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin();
  uint64_t v18 = (char *)&v63 - v17;
  type metadata accessor for Optional();
  __chkstk_darwin();
  char v20 = (char *)&v63 - v19;
  uint64_t v21 = *(void *)(v3 + 456);
  uint64_t v22 = *(void *)&v2[v21];
  if (v22)
  {
    swift_retain_n();
    char v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      char v25 = (uint8_t *)swift_slowAlloc();
      v86[0] = swift_slowAlloc();
      *(_DWORD *)char v25 = 136315138;
      uint64_t v26 = WiFiInterface.description.getter();
      v86[6] = sub_100010680(v26, v27, v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Ignoring request to create NAN data interface since it is already present: %s", v25, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release();
    }

    return v22;
  }
  uint64_t v69 = v14;
  uint64_t v70 = v20;
  uint64_t v73 = v18;
  uint64_t v65 = v21;
  uint64_t v84 = v16;
  uint64_t v66 = AssociatedTypeWitness;
  uint64_t v68 = v6;
  WiFiInterface.linkState.setter(1);
  uint64_t v64 = &v2[*(void *)(*(void *)v2 + 160)];
  uint64_t v28 = Logger.logObject.getter();
  uint64_t v29 = static os_log_type_t.info.getter();
  uint64_t v30 = v2;
  if (os_log_type_enabled(v28, (os_log_type_t)v29))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)v29, "Creating NAN data interface", v31, 2u);
    uint64_t v30 = v2;
    swift_slowDealloc();
  }

  (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v73, &v30[*(void *)(*(void *)v30 + 96)], v15);
  uint64_t v32 = *(void *)&v30[*(void *)(*(void *)v30 + 688)];
  swift_unownedRetainStrong();
  uint64_t v33 = (uint64_t *)(v32 + *(void *)(*(void *)v32 + 104));
  uint64_t v34 = *v33;
  uint64_t v67 = v33[1];
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v35 = v69;
  WiFiInterface.preferences.getter();
  unint64_t v36 = Preferences.nanDataMACAddress.getter();
  (*(void (**)(char *, uint64_t))(v79 + 8))(v35, v12);
  uint64_t v37 = v81;
  uint64_t v38 = v80;
  if ((v36 & 0x1000000000000) == 0)
  {
    unint64_t v39 = v36 >> 40;
LABEL_14:
    uint64_t v22 = v85;
    goto LABEL_17;
  }
  unint64_t v39 = (unint64_t)&v30[*(void *)(*(void *)v30 + 464)];
  if ((*(unsigned char *)(v39 + 6) & 1) == 0)
  {
    LODWORD(v39) = HIBYTE(*(unsigned __int16 *)(v39 + 4));
    goto LABEL_14;
  }
  swift_unownedRetainStrong();
  uint64_t v40 = v71;
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v71, v32 + *(void *)(*(void *)v32 + 96), v37);
  swift_release();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v42 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 64))(v37, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v40, v37);
  uint64_t v22 = v85;
  if ((v42 & 0x1000000000000) != 0) {
    unint64_t v43 = static WiFiAddress.random()();
  }
  else {
    WiFiAddress.lastOctetIncremented()(&v87);
  }
  unint64_t v39 = v43 >> 40;
LABEL_17:
  uint64_t v44 = v67;
  WiFiAddress.linkLocalAddress()((CoreP2P::WiFiAddress *)((unint64_t)v39 << 40));
  uint64_t v46 = v45;
  uint64_t v47 = swift_getAssociatedConformanceWitness();
  uint64_t v48 = v70;
  uint64_t v49 = v73;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 16))(3, v34, v44, v46 & 0xFFFFFFFFFFFFLL, v15, v47);
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v84 + 8))(v49, v15);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v85 = type metadata accessor for WiFiInterface();
    uint64_t v51 = v84;
    (*(void (**)(char *, uint64_t))(v84 + 8))(v49, v15);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v15);
    uint64_t v52 = (uint64_t)v76;
    (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v76, &v30[*(void *)(*(void *)v30 + 112)], v66);
    uint64_t v53 = (uint64_t)v77;
    (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v77, v64, v74);
    uint64_t v54 = WiFiInterface.__allocating_init(driver:components:logger:)(v48, v52, v53);
    uint64_t v55 = v65;
    *(void *)&v30[v65] = v54;
    swift_release();
    uint64_t v22 = *(void *)&v30[v55];
    if (v22)
    {
      uint64_t v56 = *(uint64_t (**)(uint64_t *))(*(void *)v22 + 392);
      swift_retain();
      id v57 = (void (*)(uint64_t *, uint64_t))v56(v86);
      type metadata accessor for WiFiInterface.NeighborDiscoveryTable();
      WiFiInterface.NeighborDiscoveryTable.clearAllPeerPresence()();
      if (v58)
      {
        v57(v86, 1);
        swift_release();
      }
      else
      {
        v57(v86, 0);
        (*(void (**)(void))(*(void *)v22 + 192))(0);
      }
    }
    else
    {
      char v59 = Logger.logObject.getter();
      os_log_type_t v60 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v59, v60))
      {
        uint64_t v61 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v61 = 0;
        _os_log_impl((void *)&_mh_execute_header, v59, v60, "Failed to create NAN data interface", v61, 2u);
        swift_slowDealloc();
      }

      sub_10000F000();
      swift_allocError();
      *(_OWORD *)uint64_t v62 = xmmword_1003B0090;
      *(unsigned char *)(v62 + 16) = 1;
      swift_willThrow();
    }
  }
  return v22;
}

char *sub_100357D68()
{
  uint64_t v2 = v0;
  uint64_t v54 = *(char **)v0;
  uint64_t v3 = v54;
  uint64_t v55 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v52 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *((void *)v54 + 51);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v53 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v44 - v9;
  uint64_t v11 = swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  __chkstk_darwin();
  uint64_t v13 = (char *)&v44 - v12;
  uint64_t v14 = *((void *)v3 + 56);
  uint64_t v15 = *(char **)&v2[v14];
  if (v15)
  {
    swift_retain_n();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      v56[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315138;
      uint64_t v19 = WiFiInterface.description.getter();
      v56[5] = sub_100010680(v19, v20, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Ignoring request to create NAN companion low latency interface since it is already present: %s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release();
    }
  }
  else
  {
    uint64_t v50 = v13;
    uint64_t v51 = v7;
    uint64_t v45 = v14;
    uint64_t v46 = v10;
    uint64_t v47 = AssociatedTypeWitness;
    uint64_t v48 = v6;
    uint64_t v49 = v4;
    uint64_t v54 = &v2[*((void *)v54 + 20)];
    uint64_t v21 = Logger.logObject.getter();
    uint64_t v22 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v21, (os_log_type_t)v22))
    {
      char v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, (os_log_type_t)v22, "Creating companion low latency interface", v23, 2u);
      swift_slowDealloc();
    }

    uint64_t v15 = &v2[*(void *)(*(void *)v2 + 96)];
    os_log_type_t v24 = (uint64_t *)&v2[*(void *)(*(void *)v2 + 104)];
    uint64_t v26 = *v24;
    uint64_t v25 = v24[1];
    uint64_t v27 = WiFiInterface.macAddress.getter();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v29 = v50;
    uint64_t v30 = v55;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(4, v26, v25, v27 & 0xFFFFFFFFFFFFLL, v11, AssociatedConformanceWitness);
    uint64_t v31 = v53;
    if (!v30)
    {
      type metadata accessor for WiFiInterface();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v29, 0, 1, v11);
      uint64_t v33 = (uint64_t)v46;
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v46, &v2[*(void *)(*(void *)v2 + 112)], v47);
      uint64_t v34 = (uint64_t)v48;
      (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v48, v54, v49);
      uint64_t v35 = WiFiInterface.__allocating_init(driver:components:logger:)(v29, v33, v34);
      uint64_t v36 = v45;
      *(void *)&v2[v45] = v35;
      swift_release();
      uint64_t v15 = *(char **)&v2[v36];
      if (v15)
      {
        swift_retain();
        sub_100362910();
        uint64_t v37 = (void (*)(uint64_t *, uint64_t))(*(uint64_t (**)(uint64_t *))(*(void *)v15 + 392))(v56);
        type metadata accessor for WiFiInterface.NeighborDiscoveryTable();
        WiFiInterface.NeighborDiscoveryTable.clearAllPeerPresence()();
        if (v38)
        {
          v37(v56, 1);
          swift_release();
        }
        else
        {
          v37(v56, 0);
          if (sub_100355DD4()) {
            char v43 = 1;
          }
          else {
            char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
          }
          swift_bridgeObjectRelease();
          (*(void (**)(void))(*(void *)v15 + 192))(v43 & 1);
        }
      }
      else
      {
        unint64_t v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v39, v40))
        {
          uint64_t v41 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v41 = 0;
          _os_log_impl((void *)&_mh_execute_header, v39, v40, "Failed to create NAN companion low latency interface", v41, 2u);
          swift_slowDealloc();
        }

        sub_10000F000();
        swift_allocError();
        *(_OWORD *)uint64_t v42 = xmmword_1003B0090;
        *(unsigned char *)(v42 + 16) = 1;
        swift_willThrow();
      }
    }
  }
  return v15;
}

BOOL sub_1003584A4(uint64_t a1)
{
  sub_100010BCC(&qword_100487CA0);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (uint64_t *)(v1 + *(void *)(*(void *)v1 + 440));
  swift_beginAccess();
  uint64_t v6 = *v5;
  if (*(void *)(v6 + 16) && (unint64_t v7 = sub_100031214(a1 & 0xFFFFFFFFFFFFLL), (v8 & 1) != 0))
  {
    unint64_t v9 = v7;
    uint64_t v10 = *(void *)(v6 + 56);
    uint64_t v11 = type metadata accessor for NANPeer(0);
    uint64_t v12 = *(void *)(v11 - 8);
    sub_10036BA3C(v10 + *(void *)(v12 + 72) * v9, (uint64_t)v4, type metadata accessor for NANPeer);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v4, 0, 1, v11);
  }
  else
  {
    uint64_t v11 = type metadata accessor for NANPeer(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v4, 1, 1, v11);
  }
  swift_endAccess();
  type metadata accessor for NANPeer(0);
  BOOL v13 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v4, 1, v11) != 1;
  sub_1000380B4((uint64_t)v4, &qword_100487CA0);
  return v13;
}

uint64_t sub_1003586A4(unint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v58 = a3;
  uint64_t v59 = a4;
  uint64_t v60 = *v5;
  uint64_t v8 = type metadata accessor for UUID();
  unint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin();
  uint64_t v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  os_log_type_t v17 = (void *)*v16;
  *(void *)uint64_t v15 = *v16;
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  id v18 = v17;
  uint64_t v19 = _dispatchPreconditionTest(_:)();
  uint64_t v21 = *(void (**)(char *, uint64_t))(v13 + 8);
  unint64_t v20 = v13 + 8;
  v21(v15, v12);
  if ((v19 & 1) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v56 = (void *)(a1 >> 40);
  uint64_t v57 = v9;
  uint64_t v22 = v8;
  uint64_t v61 = v11;
  unint64_t v9 = a1 >> 8;
  uint64_t v23 = swift_allocObject();
  swift_weakInit();
  uint64_t v24 = swift_allocObject();
  uint64_t v25 = v60;
  *(void *)(v24 + 16) = *(void *)(v60 + 408);
  *(void *)(v24 + 24) = *(void *)(v25 + 416);
  *(void *)(v24 + 32) = v23;
  *(_WORD *)(v24 + 40) = a1;
  *(unsigned char *)(v24 + 42) = BYTE2(a1);
  *(unsigned char *)(v24 + 43) = BYTE3(a1);
  *(unsigned char *)(v24 + 44) = BYTE4(a1);
  *(unsigned char *)(v24 + 45) = (_BYTE)v56;
  *(unsigned char *)(v24 + 46) = a2;
  LOBYTE(v11) = a2;
  type metadata accessor for WiFiPropertyUpdateRegistration();
  swift_allocObject();
  uint64_t v15 = (char *)WiFiPropertyUpdateRegistration.init(cancellationHandler:)((uint64_t)sub_10036AF7C, v24);
  uint64_t v8 = v57;
  uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v57 + 16);
  uint64_t v60 = v22;
  v26(v61, &v15[OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_id], v22);
  uint64_t v19 = swift_allocObject();
  uint64_t v27 = v59;
  *(void *)(v19 + 16) = v58;
  *(void *)(v19 + 24) = v27;
  uint64_t v5 = (uint64_t *)((char *)v5 + *(void *)(*v5 + 432));
  swift_beginAccess();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v62 = (void *)*v5;
  uint64_t v29 = v62;
  *uint64_t v5 = 0x8000000000000000;
  a1 &= 0xFFFFFFFFFFFFuLL;
  unint64_t v20 = sub_100031214(a1);
  uint64_t v31 = v29[2];
  BOOL v32 = (v30 & 1) == 0;
  uint64_t v33 = v31 + v32;
  if (__OFADD__(v31, v32))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  LOBYTE(v9) = v30;
  if (v29[3] >= v33)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_21;
    }
  }
  else
  {
    sub_10029040C(v33, isUniquelyReferenced_nonNull_native);
    uint64_t v29 = v62;
    unint64_t v34 = sub_100031214(a1);
    if ((v9 & 1) != (v35 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_23;
    }
    unint64_t v20 = v34;
  }
  while (1)
  {
    *uint64_t v5 = (uint64_t)v29;
    swift_bridgeObjectRelease();
    uint64_t v36 = *v5;
    if ((v9 & 1) == 0) {
      sub_100295EDC(v20, a1, (uint64_t)&_swiftEmptyDictionarySingleton, (void *)*v5);
    }
    uint64_t v5 = *(uint64_t **)(v36 + 56);
    v20 *= 8;
    char v37 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v62 = *(void **)((char *)v5 + v20);
    uint64_t v38 = v62;
    *(uint64_t *)((char *)v5 + v20) = 0x8000000000000000;
    a1 = sub_10039F7B4((char)v11);
    uint64_t v40 = v38[2];
    BOOL v41 = (v39 & 1) == 0;
    uint64_t v42 = v40 + v41;
    if (!__OFADD__(v40, v41)) {
      break;
    }
LABEL_20:
    __break(1u);
LABEL_21:
    sub_1003A1F14();
    uint64_t v29 = v62;
  }
  char v43 = v39;
  uint64_t v44 = v38[3];
  uint64_t v56 = v15;
  if (v44 >= v42)
  {
    char v47 = (char)v11;
    if ((v37 & 1) == 0)
    {
      sub_1003A1D70();
      uint64_t v38 = v62;
    }
    goto LABEL_15;
  }
  sub_100290130(v42, v37);
  uint64_t v38 = v62;
  unint64_t v45 = sub_10039F7B4((char)v11);
  if ((v43 & 1) != (v46 & 1))
  {
LABEL_23:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  a1 = v45;
  char v47 = (char)v11;
LABEL_15:
  uint64_t v48 = v8;
  *(uint64_t *)((char *)v5 + v20) = (uint64_t)v38;
  swift_bridgeObjectRelease();
  uint64_t v49 = *(void **)((char *)v5 + v20);
  swift_bridgeObjectRetain();
  if ((v43 & 1) == 0)
  {
    unint64_t v50 = sub_100280BA4((uint64_t)_swiftEmptyArrayStorage);
    sub_100295E98(a1, v47, v50, v49);
  }
  uint64_t v51 = v49[7];
  swift_bridgeObjectRelease();
  char v52 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v62 = *(void **)(v51 + 8 * a1);
  *(void *)(v51 + 8 * a1) = 0x8000000000000000;
  uint64_t v53 = v19;
  uint64_t v54 = (uint64_t)v61;
  sub_100294C08((uint64_t)sub_10036AF98, v53, (uint64_t)v61, v52);
  *(void *)(v51 + 8 * a1) = v62;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v54, v60);
  swift_endAccess();
  return (uint64_t)v56;
}

uint64_t sub_100358C1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359C4C(a1, a2, a3);
}

uint64_t sub_100358C70()
{
  return sub_100356C70(0);
}

unint64_t sub_100358C78()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 528);
  swift_beginAccess();
  uint64_t v2 = sub_100010BCC((uint64_t *)&unk_100487CB0);
  return *(unsigned __int16 *)(v1 + *(int *)(v2 + 40)) | ((unint64_t)*(unsigned int *)(v1 + *(int *)(v2 + 40) + 2) << 16);
}

uint64_t sub_100358CE8()
{
  uint64_t v1 = sub_100010BCC((uint64_t *)&unk_100487A80);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = v0 + *(void *)(*(void *)v0 + 584);
  swift_beginAccess();
  sub_1000136F4(v4, (uint64_t)v3, (uint64_t *)&unk_100487A80);
  ObservableWiFiProperty.wrappedValue.getter(v1, (uint64_t)&v6);
  sub_1000380B4((uint64_t)v3, (uint64_t *)&unk_100487A80);
  return v6;
}

uint64_t sub_100358DC4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = *v0;
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  unint64_t v7 = (void (**)(void *, void, uint64_t))((char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  unint64_t v9 = (void (**)(void *, void, uint64_t))((char *)&v21 - v8);
  __chkstk_darwin();
  uint64_t v11 = (void (**)(void *, void, uint64_t))((char *)&v21 - v10);
  uint64_t v12 = (char *)v1 + *(void *)(v2 + 440);
  swift_beginAccess();
  uint64_t v13 = *(void *)(*v1 + 424);
  if (*(void *)(*(void *)v12 + 16))
  {
    uint64_t v14 = *(void *)((char *)v1 + v13);
    if (!v14)
    {
      uint64_t v22 = v3;
      void *v11 = 5;
      uint64_t v15 = enum case for DispatchTimeInterval.seconds(_:);
      uint64_t v16 = *(void (**)(void *, void, uint64_t))(v5 + 104);
      v16(v11, enum case for DispatchTimeInterval.seconds(_:), v4);
      uint64_t v21 = v16;
      id v23 = (id)*OS_dispatch_queue.nan.unsafeMutableAddressor();
      *unint64_t v9 = 5;
      v16(v9, v15, v4);
      uint64_t v17 = swift_allocObject();
      swift_weakInit();
      id v18 = (void *)swift_allocObject();
      uint64_t v19 = v22;
      _OWORD v18[2] = *(void *)(v22 + 408);
      v18[3] = *(void *)(v19 + 416);
      v18[4] = v17;
      *unint64_t v7 = 100;
      v21(v7, enum case for DispatchTimeInterval.milliseconds(_:), v4);
      type metadata accessor for P2PTimer();
      swift_allocObject();
      uint64_t v14 = P2PTimer.init(deadlineAfter:on:repeating:leeway:_:)((uint64_t)v11, v23, (uint64_t)v9, (uint64_t)v7, (uint64_t)sub_10036AEF4, (uint64_t)v18);
    }
    *(void *)((char *)v1 + v13) = v14;
    swift_retain();
  }
  else
  {
    *(void *)((char *)v1 + v13) = 0;
  }
  return swift_release();
}

uint64_t sub_1003590A0()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1003590F8();
    return swift_release();
  }
  return result;
}

uint64_t sub_1003590F8()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (uint64_t *)((char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  unint64_t v7 = (void *)*v6;
  *uint64_t v5 = *v6;
  (*(void (**)(uint64_t *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
  if (v7)
  {
    uint64_t v10 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 440));
    swift_beginAccess();
    uint64_t v11 = *v10;
    __chkstk_darwin();
    *((_OWORD *)&v16 - 2) = *(_OWORD *)(v1 + 408);
    *(&v16 - 2) = v1;
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_100368744((uint64_t)sub_10036AF00, (uint64_t)(&v16 - 6), v11, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t, uint64_t))sub_100368AE0);
    swift_bridgeObjectRelease();
    sub_100359370(v12);
    uint64_t v13 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 432));
    swift_beginAccess();
    uint64_t v14 = *v13;
    swift_bridgeObjectRetain();
    uint64_t v15 = sub_100368744((uint64_t)sub_10036AF24, v0, v14, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t, uint64_t))sub_1003688D0);
    swift_bridgeObjectRelease();
    uint64_t *v13 = v15;
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100359370(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + *(void *)(*(void *)v1 + 440));
  swift_beginAccess();
  void *v3 = a1;
  uint64_t v4 = swift_bridgeObjectRelease();
  return sub_100358DC4(v4);
}

uint64_t sub_1003593DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 520);
  swift_beginAccess();
  return sub_1000136F4(v3, a1, &qword_100487C80);
}

uint64_t sub_100359444@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 528);
  swift_beginAccess();
  return sub_1000136F4(v3, a1, (uint64_t *)&unk_100487CB0);
}

uint64_t sub_1003594AC(uint64_t a1)
{
  sub_100010BCC((uint64_t *)&unk_100487CB0);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000136F4(a1, (uint64_t)v4, (uint64_t *)&unk_100487CB0);
  uint64_t v5 = v1 + *(void *)(*(void *)v1 + 528);
  swift_beginAccess();
  sub_1000380B4(v5, (uint64_t *)&unk_100487CB0);
  sub_10006EC68((uint64_t)v4, v5, (uint64_t *)&unk_100487CB0);
  swift_endAccess();
  return sub_1000380B4(a1, (uint64_t *)&unk_100487CB0);
}

uint64_t sub_100359594@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 544);
  swift_beginAccess();
  return sub_1000136F4(v3, a1, &qword_100487C98);
}

uint64_t sub_1003595FC(uint64_t a1, objc_class *a2)
{
  LOWORD(v4[0].isa) = a1;
  BYTE2(v4[0].isa) = BYTE2(a1);
  BYTE3(v4[0].isa) = BYTE3(a1);
  BYTE4(v4[0].isa) = BYTE4(a1);
  BYTE5(v4[0].isa) = BYTE5(a1);
  BYTE6(v4[0].isa) = BYTE6(a1);
  v4[1].Class isa = a2;
  swift_beginAccess();
  uint64_t v2 = sub_100010BCC(&qword_100487CA8);
  MutableDriverProperty.wrappedValue.setter(v4, v2);
  return swift_endAccess();
}

uint64_t sub_1003596A4(uint64_t result)
{
  int v2 = result;
  uint64_t v3 = *(void *)(*(void *)v1 + 616);
  int v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5)
  {
    if (result == 5) {
      return result;
    }
  }
  else if (result != 5)
  {
    switch(v4)
    {
      case 2:
        if (result == 2) {
          return result;
        }
        break;
      case 3:
        if (result == 3) {
          return result;
        }
        break;
      case 4:
        if (result == 4) {
          return result;
        }
        break;
      default:
        if result - 2 >= 3 && ((result ^ ((v4 & 1) == 0))) {
          return result;
        }
        break;
    }
  }
  swift_retain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = 1701736302;
    uint64_t v8 = swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315394;
    int v9 = *(unsigned __int8 *)(v1 + v3);
    if (v9 == 5)
    {
      unint64_t v10 = 0xE400000000000000;
      uint64_t v11 = 1701736302;
    }
    else
    {
      switch(v9)
      {
        case 2:
          unint64_t v13 = 0x6974616D6F747541;
          unint64_t v12 = 0xE900000000000063;
          break;
        case 3:
          unint64_t v13 = 0x4D20726F68636E41;
          unint64_t v12 = 0xED00007265747361;
          break;
        case 4:
          unint64_t v12 = 0xE600000000000000;
          unint64_t v13 = 0x72657473614DLL;
          break;
        default:
          if (v9) {
            unint64_t v13 = 0x7473614D206E6F4ELL;
          }
          else {
            unint64_t v13 = 0xD000000000000013;
          }
          if (v9) {
            unint64_t v12 = 0xEF636E7953207265;
          }
          else {
            unint64_t v12 = 0x80000001003DBAF0;
          }
          break;
      }
      unint64_t v14 = v12;
      String.append(_:)(*(Swift::String *)&v13);
      swift_bridgeObjectRelease();
      uint64_t v11 = 0;
      unint64_t v10 = 0xE000000000000000;
    }
    sub_100010680(v11, v10, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2080;
    if (v2 == 5)
    {
      unint64_t v15 = 0xE400000000000000;
    }
    else
    {
      uint64_t v16 = 0x4D20726F68636E41;
      unint64_t v17 = 0xED00007265747361;
      unint64_t v18 = 0xE600000000000000;
      uint64_t v19 = 0x72657473614DLL;
      unint64_t v20 = 0x7473614D206E6F4ELL;
      if ((v2 & 1) == 0) {
        unint64_t v20 = 0xD000000000000013;
      }
      unint64_t v21 = 0x80000001003DBAF0;
      if (v2) {
        unint64_t v21 = 0xEF636E7953207265;
      }
      if (v2 != 4)
      {
        uint64_t v19 = v20;
        unint64_t v18 = v21;
      }
      if (v2 != 3)
      {
        uint64_t v16 = v19;
        unint64_t v17 = v18;
      }
      if (v2 == 2) {
        uint64_t v22 = 0x6974616D6F747541;
      }
      else {
        uint64_t v22 = v16;
      }
      if (v2 == 2) {
        unint64_t v23 = 0xE900000000000063;
      }
      else {
        unint64_t v23 = v17;
      }
      unint64_t v24 = v23;
      String.append(_:)(*(Swift::String *)&v22);
      swift_bridgeObjectRelease();
      uint64_t v7 = 0;
      unint64_t v15 = 0xE000000000000000;
    }
    sub_100010680(v7, v15, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Updated device role to %s (from %s)", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  sub_100354870();
  sub_1002D9C18();
  return swift_release();
}

void *sub_100359AEC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100010BCC((uint64_t *)&unk_100487D30);
  __chkstk_darwin();
  int v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v2 + 648);
  if (*(void *)((char *)v0 + v5))
  {
    os_log_type_t v6 = *(void **)((char *)v0 + v5);
  }
  else
  {
    type metadata accessor for LocaleManager();
    swift_unownedRetainStrong();
    sub_1003373CC((uint64_t)v4);
    swift_retain();
    swift_release();
    id v7 = (id)*OS_dispatch_queue.nan.unsafeMutableAddressor();
    os_log_type_t v6 = sub_10036D5A8((uint64_t)v0, (uint64_t)v4, v7);
    swift_release();

    *(void *)((char *)v1 + v5) = v6;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v6;
}

uint64_t sub_100359C4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = v3;
  uint64_t v349 = a3;
  uint64_t v348 = a2;
  uint64_t v350 = a1;
  uint64_t v5 = (uint64_t *)*v3;
  uint64_t v364 = v5;
  sub_100010BCC(&qword_100485280);
  __chkstk_darwin();
  unint64_t v311 = (char *)&v309 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v363 = v5[52];
  uint64_t v7 = *(void *)(v363 + 8);
  uint64_t v8 = v5[51];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v315 = type metadata accessor for Preferences();
  uint64_t v314 = *(void *)(v315 - 8);
  __chkstk_darwin();
  char v313 = (char *)&v309 - v9;
  uint64_t v346 = swift_checkMetadataState();
  uint64_t v347 = *(void *)(v346 - 8);
  __chkstk_darwin();
  uint64_t v342 = (char *)&v309 - v10;
  sub_100010BCC(&qword_100487CE8);
  __chkstk_darwin();
  os_log_type_t v345 = (uint64_t *)((char *)&v309 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v310 = sub_100010BCC(&qword_100487CF0);
  __chkstk_darwin();
  uint64_t v340 = (uint64_t *)((char *)&v309 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100010BCC((uint64_t *)&unk_100487A80);
  __chkstk_darwin();
  uint64_t v339 = (uint64_t (**)(char *))((char *)&v309 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100010BCC(&qword_100487CA8);
  __chkstk_darwin();
  uint64_t v338 = (uint64_t *)((char *)&v309 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100010BCC(&qword_100487C88);
  __chkstk_darwin();
  uint64_t v335 = (uint64_t *)((char *)&v309 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100010BCC(&qword_100487C90);
  __chkstk_darwin();
  uint64_t v334 = (uint64_t *)((char *)&v309 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100010BCC(&qword_100487CF8);
  __chkstk_darwin();
  uint64_t v333 = (uint64_t)&v309 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_100487C98);
  __chkstk_darwin();
  unint64_t v332 = (unint64_t)&v309 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100487D00);
  __chkstk_darwin();
  id v353 = (uint64_t *)((char *)&v309 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100010BCC((uint64_t *)&unk_100487CB0);
  __chkstk_darwin();
  uint64_t v352 = (uint64_t *)((char *)&v309 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v312 = sub_100010BCC(&qword_100487C80);
  __chkstk_darwin();
  uint64_t v331 = (uint64_t)&v309 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v360 = type metadata accessor for Logger();
  uint64_t v351 = *(void *)(v360 - 8);
  __chkstk_darwin();
  uint64_t v318 = (char *)&v309 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v357 = (void (*)(uint64_t))((char *)&v309 - v23);
  __chkstk_darwin();
  uint64_t v354 = (void (*)(uint64_t))((char *)&v309 - v24);
  uint64_t v317 = v25;
  __chkstk_darwin();
  uint64_t v365 = (char *)&v309 - v26;
  uint64_t v343 = v7;
  uint64_t v362 = v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v28 = type metadata accessor for Optional();
  uint64_t v29 = *(void *)(v28 - 8);
  __chkstk_darwin();
  uint64_t v341 = (char *)&v309 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  BOOL v32 = (char *)&v309 - v31;
  uint64_t v356 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  unint64_t v316 = (char *)&v309 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v337 = (uint64_t)&v309 - v34;
  uint64_t v336 = v35;
  __chkstk_darwin();
  uint64_t v366 = (uint64_t)&v309 - v36;
  uint64_t v329 = (char *)v5[53];
  *(void *)&v329[(void)v4] = 0;
  uint64_t v344 = *(void *)(*v4 + 432);
  *(void *)((char *)v4 + v344) = &_swiftEmptyDictionarySingleton;
  uint64_t v330 = *(void *)(*v4 + 440);
  *(void *)((char *)v4 + v330) = &_swiftEmptyDictionarySingleton;
  id v358 = *(uint64_t **)(*v4 + 448);
  *(uint64_t *)((char *)v358 + (void)v4) = 0;
  uint64_t v359 = *(void *)(*v4 + 456);
  *(void *)((char *)v4 + v359) = 0;
  char v37 = (char *)v4 + *(void *)(*v4 + 464);
  *((_WORD *)v37 + 2) = 0;
  *(_DWORD *)char v37 = 0;
  v37[6] = 1;
  unint64_t v327 = *(void *)(*v4 + 472);
  *(void *)((char *)v4 + v327) = 0;
  uint64_t v38 = *(void *)(*v4 + 480);
  id v39 = objc_allocWithZone((Class)WRM_UCMInterface);
  swift_retain();
  id v40 = [v39 init];
  unint64_t v328 = v38;
  *(void *)((char *)v4 + v38) = v40;
  uint64_t v324 = *(void *)(*v4 + 488);
  *(void *)((char *)v4 + v324) = 0;
  uint64_t v325 = *(void *)(*v4 + 496);
  *(void *)((char *)v4 + v325) = 0;
  uint64_t v41 = (uint64_t)v4 + *(void *)(*v4 + 504);
  uint64_t v42 = type metadata accessor for DispatchTime();
  uint64_t v361 = *(void (**)(void, void, void))(v42 - 8);
  char v43 = (void (*)(void))*((void *)v361 + 7);
  uint64_t v326 = v41;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v43)(v41, 1, 1, v42);
  uint64_t v323 = (uint64_t)v4 + *(void *)(*v4 + 512);
  v43();
  *((unsigned char *)v4 + *(void *)(*v4 + 616)) = 5;
  uint64_t v44 = (char *)v4 + *(void *)(*v4 + 624);
  *(void *)uint64_t v44 = 0;
  v44[8] = 1;
  uint64_t v319 = *(void *)(*v4 + 632);
  *(void *)((char *)v4 + v319) = 0;
  uint64_t v320 = *(void *)(*v4 + 640);
  *(void *)((char *)v4 + v320) = 0;
  uint64_t v321 = *(void *)(*v4 + 648);
  *(void *)((char *)v4 + v321) = 0;
  uint64_t v45 = (uint64_t)v4 + *(void *)(*v4 + 656);
  uint64_t v46 = NANDriverCapabilities.defaultCapabilities.unsafeMutableAddressor();
  uint64_t v322 = v45;
  sub_10036BA3C(v46, v45, (uint64_t (*)(void))type metadata accessor for NANDriverCapabilities);
  *((unsigned char *)v4 + *(void *)(*v4 + 664)) = 0;
  char v47 = (char *)v4 + *(void *)(*v4 + 672);
  type metadata accessor for P2PTimer();
  variable initialization expression of AWDLPeer.lastUpdated();
  uint64_t v48 = (char *)v4 + *(void *)(*v4 + 680);
  *(void *)uint64_t v48 = 0;
  *((void *)v48 + 1) = 0;
  v48[16] = 0;
  uint64_t v49 = v350;
  (*(void (**)(char *))(v29 + 16))(v32);
  uint64_t v50 = v356;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v356 + 48))(v32, 1, AssociatedTypeWitness) == 1)
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v347 + 8))(v348, v346);
    uint64_t v51 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
    v51(v49, v28);
    swift_release();
    v51((uint64_t)v32, v28);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_unknownObjectRelease();

    swift_release();
    sub_1000380B4(v326, &qword_10047DB90);
    sub_1000380B4(v323, &qword_10047DB90);
    swift_release();
    swift_release();
    swift_release();
    sub_10036B854(v322, (uint64_t (*)(void))type metadata accessor for NANDriverCapabilities);
    (*((void (**)(char *, uint64_t))v361 + 1))(v47, v42);
    swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance();
    return 0;
  }
  uint64_t v324 = v28;
  uint64_t v325 = v29;
  char v52 = *(char **)(v50 + 32);
  uint64_t v330 = v50 + 32;
  uint64_t v329 = v52;
  ((void (*)(uint64_t, char *, uint64_t))v52)(v366, v32, AssociatedTypeWitness);
  uint64_t v53 = v362;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  id v358 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v56 = v55;
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v57 = AssociatedTypeWitness;
  uint64_t v323 = AssociatedConformanceWitness;
  uint64_t v58 = v365;
  Logger.init(subsystem:category:)();
  uint64_t v59 = v358;
  uint64_t v371 = v358;
  uint64_t v372 = v56;
  swift_bridgeObjectRetain();
  v60._uint64_t countAndFlagsBits = 0x657461747320;
  v60._object = (void *)0xE600000000000000;
  String.append(_:)(v60);
  unint64_t v328 = (unint64_t)v371;
  uint64_t v364 = v56;
  unint64_t v327 = (unint64_t)v372;
  uint64_t v61 = *(void (**)(void, void, void))(v351 + 16);
  uint64_t v359 = v351 + 16;
  uint64_t v361 = v61;
  uint64_t v62 = v360;
  v61(v354, v58, v360);
  uint64_t v63 = v363;
  uint64_t v64 = v57;
  uint64_t v65 = swift_getAssociatedConformanceWitness();
  uint64_t v66 = *(uint64_t (**)(uint64_t, uint64_t))(v65 + 56);
  uint64_t v67 = v366;
  uint64_t v355 = v64;
  LOBYTE(v371) = v66(v64, v65);
  LOBYTE(v368) = 0;
  uint64_t v68 = sub_10035D2A0(v67, v53, v63);
  uint64_t v70 = v69;
  uint64_t v71 = swift_allocObject();
  *(void *)(v71 + 16) = v68;
  *(void *)(v71 + 24) = v70;
  sub_1002769A8();
  uint64_t v72 = (uint64_t *)v331;
  uint64_t v73 = v354;
  MutableDriverProperty.init(name:logger:initialValue:defaultValue:updater:valueDescriber:)(v328, v327, v354, (uint64_t)&v371, (char *)&v368, (void (*)(uint64_t))sub_10036B03C, (void (*)(uint64_t))v71, (uint64_t (*)(char *))sub_10036AB18, (uint64_t *)v331, 0, (uint64_t)&type metadata for NANState);
  sub_10006EC68((uint64_t)v72, (uint64_t)v4 + *(void *)(*v4 + 520), &qword_100487C80);
  uint64_t v371 = v59;
  uint64_t v372 = v364;
  swift_bridgeObjectRetain();
  v74._uint64_t countAndFlagsBits = 0x72657473756C6320;
  v74._object = (void *)0xEB00000000444920;
  String.append(_:)(v74);
  uint64_t v331 = (uint64_t)v371;
  unint64_t v328 = (unint64_t)v372;
  uint64_t v75 = v73;
  id v76 = v365;
  uint64_t v77 = (void (*)(void (*)(uint64_t), char *, uint64_t))v361;
  v361(v75, v365, v62);
  uint64_t v78 = v366;
  uint64_t v79 = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 72))(v64, v65);
  LODWORD(v371) = v79;
  WORD2(v371) = WORD2(v79);
  BYTE6(v371) = BYTE6(v79) & 1;
  uint64_t v80 = WiFiAddress.defaultClusterID.unsafeMutableAddressor();
  __int16 v81 = v80[2];
  LODWORD(v368) = *(_DWORD *)v80;
  WORD2(v368) = v81;
  uint64_t v82 = v363;
  uint64_t v83 = sub_10035D4B0(v78, v53, v363);
  uint64_t v85 = v84;
  uint64_t v86 = swift_allocObject();
  *(void *)(v86 + 16) = v83;
  *(void *)(v86 + 24) = v85;
  sub_100262480();
  CoreP2P::WiFiAddress v87 = v352;
  unint64_t v88 = v354;
  MutableDriverProperty.init(name:logger:initialValue:defaultValue:updater:valueDescriber:)(v331, v328, v354, (uint64_t)&v371, (char *)&v368, (void (*)(uint64_t))sub_100271F70, (void (*)(uint64_t))v86, (uint64_t (*)(char *))sub_100271A44, v352, 0, (uint64_t)&type metadata for WiFiAddress);
  sub_10006EC68((uint64_t)v87, (uint64_t)v4 + *(void *)(*v4 + 528), (uint64_t *)&unk_100487CB0);
  uint64_t v371 = 0;
  uint64_t v372 = (uint64_t *)0xE000000000000000;
  _StringGuts.grow(_:)(18);
  unint64_t v89 = v364;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v90 = v358;
  uint64_t v371 = v358;
  uint64_t v372 = v89;
  v91._uint64_t countAndFlagsBits = 0xD000000000000010;
  uint64_t v331 = 0xD000000000000010;
  v91._object = (void *)0x80000001003E16B0;
  String.append(_:)(v91);
  uint64_t v352 = v371;
  unint64_t v328 = (unint64_t)v372;
  v77(v88, v76, v360);
  uint64_t v344 = v65;
  uint64_t v92 = v366;
  uint64_t v93 = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 88))(v355, v65);
  LOWORD(v371) = v93;
  BYTE2(v371) = BYTE2(v93) & 1;
  LOWORD(v368) = 10;
  uint64_t v94 = v362;
  uint64_t v95 = v82;
  os_log_t v96 = sub_10035D6C0(v92, v362, v82);
  uint64_t v98 = v97;
  uint64_t v99 = swift_allocObject();
  *(void *)(v99 + 16) = v96;
  *(void *)(v99 + 24) = v98;
  sub_10021AC38();
  uint64_t v100 = v353;
  unint64_t v101 = v354;
  MutableDriverProperty.init(name:logger:initialValue:defaultValue:updater:valueDescriber:)((uint64_t)v352, v328, v354, (uint64_t)&v371, (char *)&v368, (void (*)(uint64_t))sub_10036B068, (void (*)(uint64_t))v99, (uint64_t (*)(char *))sub_10036AABC, v353, 0, (uint64_t)&type metadata for NANAttribute.MasterIndication);
  sub_10006EC68((uint64_t)v100, (uint64_t)v4 + *(void *)(*v4 + 536), (uint64_t *)&unk_100487D00);
  uint64_t v371 = 0;
  uint64_t v372 = (uint64_t *)0xE000000000000000;
  _StringGuts.grow(_:)(18);
  uint64_t v102 = v364;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v371 = v90;
  uint64_t v372 = v102;
  v103._object = (void *)0x80000001003E16D0;
  v103._uint64_t countAndFlagsBits = v331;
  String.append(_:)(v103);
  id v353 = v371;
  uint64_t v352 = v372;
  uint64_t v104 = v101;
  uint64_t v105 = v360;
  uint64_t v106 = (void (*)(void (*)(uint64_t), void (*)(uint64_t), uint64_t))v361;
  v361(v101, v365, v360);
  uint64_t v107 = sub_10035D8D0(v92, v94, v95);
  uint64_t v109 = v108;
  uint64_t v110 = swift_allocObject();
  *(void *)(v110 + 16) = v107;
  *(void *)(v110 + 24) = v109;
  BOOL v111 = v357;
  v106(v357, v104, v105);
  uint64_t v371 = 0;
  uint64_t v372 = 0;
  uint64_t v368 = 0;
  uint64_t v369 = 0;
  uint64_t v112 = sub_100010BCC(&qword_100487B60);
  unint64_t v328 = (unint64_t)&protocol conformance descriptor for <A> A?;
  sub_10036678C(&qword_100487B68, &qword_100487B60, (void (*)(void))sub_100142E70);
  uint64_t v113 = (uint64_t *)v332;
  MutableDriverProperty.init(name:logger:initialValue:defaultValue:updater:valueDescriber:)((uint64_t)v353, (unint64_t)v352, v111, (uint64_t)&v371, (char *)&v368, (void (*)(uint64_t))sub_10036B084, (void (*)(uint64_t))v110, (uint64_t (*)(char *))sub_10035DAF4, (uint64_t *)v332, 0, v112);
  uint64_t v352 = *(uint64_t **)(v351 + 8);
  id v353 = (uint64_t *)(v351 + 8);
  uint64_t v114 = v105;
  ((void (*)(void (*)(uint64_t), uint64_t))v352)(v104, v105);
  sub_10006EC68((uint64_t)v113, (uint64_t)v4 + *(void *)(*v4 + 544), &qword_100487C98);
  uint64_t v371 = 0;
  uint64_t v372 = (uint64_t *)0xE000000000000000;
  _StringGuts.grow(_:)(19);
  uint64_t v115 = v364;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v116 = v358;
  uint64_t v371 = v358;
  uint64_t v372 = v115;
  v117._uint64_t countAndFlagsBits = 0xD000000000000011;
  v117._object = (void *)0x80000001003E16F0;
  String.append(_:)(v117);
  uint64_t v118 = (uint64_t)v371;
  unint64_t v119 = (unint64_t)v372;
  uint64_t v120 = v104;
  v361(v104, v365, v114);
  LOWORD(v371) = 5;
  LOWORD(v368) = 1;
  long long v121 = sub_10035DB60(v366, v362, v363);
  uint64_t v123 = v122;
  uint64_t v124 = swift_allocObject();
  *(void *)(v124 + 16) = v121;
  *(void *)(v124 + 24) = v123;
  sub_100110588();
  id v125 = (uint64_t *)v333;
  MutableDriverProperty.init(name:logger:initialValue:defaultValue:updater:valueDescriber:)(v118, v119, v104, (uint64_t)&v371, (char *)&v368, (void (*)(uint64_t))sub_10036B0B4, (void (*)(uint64_t))v124, (uint64_t (*)(char *))sub_10036AAB0, (uint64_t *)v333, 0, (uint64_t)&type metadata for NANAwakeDWPeriods);
  sub_10006EC68((uint64_t)v125, (uint64_t)v4 + *(void *)(*v4 + 568), &qword_100487CF8);
  uint64_t v371 = 0;
  uint64_t v372 = (uint64_t *)0xE000000000000000;
  _StringGuts.grow(_:)(18);
  uint64_t v126 = v364;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v371 = v116;
  uint64_t v372 = v126;
  id v127 = v116;
  v128._object = (void *)0x80000001003E1710;
  v128._uint64_t countAndFlagsBits = v331;
  String.append(_:)(v128);
  uint64_t v333 = (uint64_t)v371;
  unint64_t v332 = (unint64_t)v372;
  char v129 = v365;
  uint64_t v130 = (void (*)(void (*)(uint64_t), char *, uint64_t))v361;
  v361(v104, v365, v360);
  uint64_t v131 = v366;
  uint64_t v132 = (*(uint64_t (**)(uint64_t))(v344 + 120))(v355);
  LODWORD(v371) = v132;
  WORD2(v371) = WORD2(v132);
  uint64_t v133 = Channel.nanPrimary.unsafeMutableAddressor();
  __int16 v134 = *((_WORD *)v133 + 2);
  LODWORD(v368) = *v133;
  WORD2(v368) = v134;
  uint64_t v135 = v362;
  char v136 = sub_10035DD70(v131, v362, v363);
  uint64_t v138 = v137;
  uint64_t v139 = swift_allocObject();
  *(void *)(v139 + 16) = v136;
  *(void *)(v139 + 24) = v138;
  uint64_t v140 = swift_allocObject();
  *(void *)(v140 + 16) = sub_10036B0F8;
  *(void *)(v140 + 24) = v139;
  sub_1001C7C00();
  uint64_t v141 = v334;
  MutableDriverProperty.init(name:logger:initialValue:defaultValue:updater:valueDescriber:)(v333, v332, v104, (uint64_t)&v371, (char *)&v368, (void (*)(uint64_t))sub_10036B124, (void (*)(uint64_t))v140, (uint64_t (*)(char *))sub_10036AA54, v334, 0, (uint64_t)&type metadata for Channel);
  sub_10006EC68((uint64_t)v141, (uint64_t)v4 + *(void *)(*v4 + 552), &qword_100487C90);
  uint64_t v371 = 0;
  uint64_t v372 = (uint64_t *)0xE000000000000000;
  _StringGuts.grow(_:)(20);
  uint64_t v142 = v364;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v371 = v127;
  uint64_t v372 = v142;
  v143._object = (void *)0x80000001003E1730;
  v143._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v143);
  uint64_t v334 = v371;
  uint64_t v333 = (uint64_t)v372;
  uint64_t v144 = v360;
  v130(v120, v129, v360);
  uint64_t v145 = v366;
  uint64_t v146 = (*(uint64_t (**)(uint64_t))(v344 + 136))(v355);
  unint64_t v147 = sub_10035DF80(v145, v135, v363);
  uint64_t v149 = v148;
  uint64_t v150 = swift_allocObject();
  *(void *)(v150 + 16) = v147;
  *(void *)(v150 + 24) = v149;
  uint64_t v151 = v357;
  v130(v357, (char *)v120, v144);
  WORD2(v371) = WORD2(v146);
  LODWORD(v371) = v146;
  WORD2(v368) = WORD2(v146);
  LODWORD(v368) = v146;
  uint64_t v152 = sub_100010BCC((uint64_t *)&unk_100487B90);
  sub_10036678C(&qword_1004872E0, (uint64_t *)&unk_100487B90, (void (*)(void))sub_1001C7C00);
  id v153 = v335;
  MutableDriverProperty.init(name:logger:initialValue:defaultValue:updater:valueDescriber:)((uint64_t)v334, v333, v151, (uint64_t)&v371, (char *)&v368, (void (*)(uint64_t))sub_10036B160, (void (*)(uint64_t))v150, (uint64_t (*)(char *))sub_10035E190, v335, 0, v152);
  ((void (*)(void (*)(uint64_t), uint64_t))v352)(v120, v144);
  sub_10006EC68((uint64_t)v153, (uint64_t)v4 + *(void *)(*v4 + 560), &qword_100487C88);
  uint64_t v371 = v358;
  uint64_t v372 = v364;
  swift_bridgeObjectRetain();
  v154._uint64_t countAndFlagsBits = 0x6C63206174616420;
  v154._object = (void *)0xED00007265747375;
  String.append(_:)(v154);
  uint64_t v335 = v371;
  uint64_t v334 = v372;
  id v155 = v120;
  uint64_t v156 = v144;
  v130(v155, v365, v144);
  id v157 = NANAttribute.DataCluster.empty.unsafeMutableAddressor();
  uint64_t v333 = *(unsigned __int8 *)v157;
  uint64_t v158 = *((unsigned __int8 *)v157 + 1);
  unint64_t v332 = *((unsigned __int8 *)v157 + 2);
  uint64_t v331 = *((unsigned __int8 *)v157 + 3);
  unint64_t v328 = *((unsigned __int8 *)v157 + 4);
  unint64_t v327 = *((unsigned __int8 *)v157 + 5);
  uint64_t v326 = *((unsigned __int8 *)v157 + 6);
  os_log_t v159 = (uint64_t *)*((void *)v157 + 1);
  uint64_t v160 = sub_10035E1D4(v366, v362, v363);
  uint64_t v162 = v161;
  uint64_t v163 = swift_allocObject();
  *(void *)(v163 + 16) = v160;
  *(void *)(v163 + 24) = v162;
  uint64_t v164 = v357;
  uint64_t v165 = v354;
  v130(v357, (char *)v354, v156);
  uint64_t v371 = (uint64_t *)(v333 | (v158 << 8) | (v332 << 16) | (v331 << 24) | (v328 << 32) | (v327 << 40) | (v326 << 48));
  uint64_t v372 = v159;
  LOBYTE(v368) = v333;
  BYTE1(v368) = v158;
  BYTE2(v368) = v332;
  BYTE3(v368) = v331;
  BYTE4(v368) = v328;
  BYTE5(v368) = v327;
  BYTE6(v368) = v326;
  uint64_t v369 = v159;
  sub_10021C7DC();
  swift_bridgeObjectRetain_n();
  id v166 = v338;
  MutableDriverProperty.init(name:logger:initialValue:defaultValue:updater:valueDescriber:)((uint64_t)v335, (unint64_t)v334, v164, (uint64_t)&v371, (char *)&v368, (void (*)(uint64_t))sub_10036B194, (void (*)(uint64_t))v163, (uint64_t (*)(char *))sub_10036A9E8, v338, 0, (uint64_t)&type metadata for NANAttribute.DataCluster);
  ((void (*)(void (*)(uint64_t), uint64_t))v352)(v165, v156);
  sub_10006EC68((uint64_t)v166, (uint64_t)v4 + *(void *)(*v4 + 576), &qword_100487CA8);
  type metadata accessor for Lock();
  swift_allocObject();
  uint64_t v338 = (uint64_t *)Lock.init()();
  uint64_t v368 = (void *)sub_100297404((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v371 = 0;
  uint64_t v372 = (uint64_t *)0xE000000000000000;
  _StringGuts.grow(_:)(21);
  uint64_t v167 = v364;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v168 = v358;
  uint64_t v371 = v358;
  uint64_t v372 = v167;
  v169._uint64_t countAndFlagsBits = 0xD000000000000013;
  v169._object = (void *)0x80000001003E1750;
  String.append(_:)(v169);
  uint64_t v170 = (uint64_t)v371;
  unint64_t v171 = (unint64_t)v372;
  uint64_t v172 = v365;
  v361(v165, v365, v156);
  uint64_t v173 = sub_100010BCC(&qword_100487BC8);
  sub_10036678C((unint64_t *)&unk_100487BD0, &qword_100487BC8, (void (*)(void))sub_1000A4188);
  uint64_t v174 = v339;
  ObservableWiFiProperty.init(lock:defaultValue:name:logger:valueDescriber:)((uint64_t (*)(char *))v338, (uint64_t)&v368, v170, v171, (uint64_t)v165, (uint64_t (*)(char *))sub_10035E3F8, 0, v173, v339);
  sub_10006EC68((uint64_t)v174, (uint64_t)v4 + *(void *)(*v4 + 584), (uint64_t *)&unk_100487A80);
  uint64_t v371 = 0;
  uint64_t v372 = (uint64_t *)0xE000000000000000;
  _StringGuts.grow(_:)(20);
  uint64_t v175 = v364;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v371 = v168;
  uint64_t v372 = v175;
  v176._object = (void *)0x80000001003E1770;
  v176._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v176);
  uint64_t v335 = v371;
  uint64_t v334 = v372;
  uint64_t v177 = v360;
  uint64_t v178 = (void (*)(void (*)(uint64_t), void (*)(uint64_t), uint64_t))v361;
  v361(v165, v172, v360);
  uint64_t v179 = (uint64_t *)sub_1002974FC((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v180 = v356;
  uint64_t v181 = *(uint64_t **)(v356 + 16);
  uint64_t v339 = (uint64_t (**)(char *))(v356 + 16);
  uint64_t v338 = v181;
  uint64_t v182 = v337;
  ((void (*)(uint64_t, uint64_t, uint64_t))v181)(v337, v366, v355);
  unint64_t v183 = (*(unsigned __int8 *)(v180 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v180 + 80);
  uint64_t v184 = swift_allocObject();
  uint64_t v186 = v362;
  uint64_t v185 = v363;
  *(void *)(v184 + 16) = v362;
  *(void *)(v184 + 24) = v185;
  ((void (*)(unint64_t, uint64_t, uint64_t))v329)(v184 + v183, v182, v355);
  uint64_t v187 = v357;
  v178(v357, v165, v177);
  uint64_t v371 = v179;
  uint64_t v368 = v179;
  swift_bridgeObjectRetain();
  uint64_t v188 = sub_100010BCC(&qword_100487BE8);
  sub_100366968();
  long long v189 = v340;
  MutableDriverProperty.init(name:logger:initialValue:defaultValue:updater:valueDescriber:)((uint64_t)v335, (unint64_t)v334, v187, (uint64_t)&v371, (char *)&v368, (void (*)(uint64_t))sub_10036B1E0, (void (*)(uint64_t))v184, (uint64_t (*)(char *))sub_10035E614, v340, 0, v188);
  ((void (*)(void (*)(uint64_t), uint64_t))v352)(v165, v177);
  sub_10006EC68((uint64_t)v189, (uint64_t)v4 + *(void *)(*v4 + 592), &qword_100487CF0);
  uint64_t v371 = 0;
  uint64_t v372 = (uint64_t *)0xE000000000000000;
  _StringGuts.grow(_:)(25);
  uint64_t v190 = v364;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v371 = v358;
  uint64_t v372 = v190;
  v191._uint64_t countAndFlagsBits = 0xD000000000000017;
  uint64_t v340 = (uint64_t *)0xD000000000000017;
  v191._object = (void *)0x80000001003E1790;
  String.append(_:)(v191);
  uint64_t v334 = v371;
  uint64_t v333 = (uint64_t)v372;
  uint64_t v192 = v165;
  unint64_t v193 = (void (*)(void (*)(uint64_t), void (*)(uint64_t), uint64_t))v361;
  v361(v165, v365, v177);
  uint64_t v194 = sub_10035E700(v366, v186, v363);
  uint64_t v196 = v195;
  uint64_t v197 = swift_allocObject();
  *(void *)(v197 + 16) = v194;
  *(void *)(v197 + 24) = v196;
  __int16 v198 = v357;
  v193(v357, v192, v177);
  uint64_t v199 = (void (*)(void (*)(uint64_t), char *, uint64_t))v193;
  uint64_t v371 = _swiftEmptyArrayStorage;
  uint64_t v368 = _swiftEmptyArrayStorage;
  uint64_t v200 = sub_100010BCC(&qword_100487C08);
  uint64_t v337 = v200;
  uint64_t v336 = sub_10036678C((unint64_t *)&unk_100487C10, &qword_100487C08, (void (*)(void))sub_10021C624);
  uint64_t v308 = v200;
  uint64_t v335 = (uint64_t *)sub_10036A98C;
  uint64_t v201 = v345;
  MutableDriverProperty.init(name:logger:initialValue:defaultValue:updater:valueDescriber:)((uint64_t)v334, v333, v198, (uint64_t)&v371, (char *)&v368, (void (*)(uint64_t))sub_100271FE0, (void (*)(uint64_t))v197, (uint64_t (*)(char *))sub_10036A98C, v345, 0, v308);
  uint64_t v202 = (uint64_t)v192;
  uint64_t v203 = v352;
  ((void (*)(void (*)(uint64_t), uint64_t))v352)(v192, v177);
  sub_10006EC68((uint64_t)v201, (uint64_t)v4 + *(void *)(*v4 + 600), &qword_100487CE8);
  uint64_t v371 = 0;
  uint64_t v372 = (uint64_t *)0xE000000000000000;
  _StringGuts.grow(_:)(25);
  uint64_t v204 = v364;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v371 = v358;
  uint64_t v372 = v204;
  v205._object = (void *)0x80000001003E17B0;
  v205._uint64_t countAndFlagsBits = (uint64_t)v340;
  String.append(_:)(v205);
  uint64_t v340 = v371;
  uint64_t v334 = v372;
  v199(v192, v365, v177);
  uint64_t v206 = sub_10035E910(v366, v362, v363);
  uint64_t v208 = v207;
  uint64_t v209 = swift_allocObject();
  *(void *)(v209 + 16) = v206;
  *(void *)(v209 + 24) = v208;
  uint64_t v210 = v203;
  uint64_t v211 = v355;
  uint64_t v212 = v357;
  uint64_t v213 = v177;
  v199(v357, (char *)v202, v177);
  uint64_t v371 = _swiftEmptyArrayStorage;
  uint64_t v368 = _swiftEmptyArrayStorage;
  uint64_t v214 = v345;
  MutableDriverProperty.init(name:logger:initialValue:defaultValue:updater:valueDescriber:)((uint64_t)v340, (unint64_t)v334, v212, (uint64_t)&v371, (char *)&v368, (void (*)(uint64_t))sub_10036BFC8, (void (*)(uint64_t))v209, (uint64_t (*)(char *))v335, v345, 0, v337);
  ((void (*)(uint64_t, uint64_t))v210)(v202, v177);
  sub_10006EC68((uint64_t)v214, (uint64_t)v4 + *(void *)(*v4 + 608), &qword_100487CE8);
  *(void *)((char *)v4 + *(void *)(*v4 + 688)) = v349;
  swift_unownedRetain();
  swift_release();
  uint64_t v215 = v341;
  ((void (*)(char *, uint64_t, uint64_t))v338)(v341, v366, v211);
  uint64_t v216 = v211;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v356 + 56))(v215, 0, 1, v211);
  uint64_t v217 = v347;
  uint64_t v218 = (uint64_t)v342;
  uint64_t v219 = v348;
  uint64_t v220 = v346;
  (*(void (**)(char *, uint64_t, uint64_t))(v347 + 16))(v342, v348, v346);
  v361(v202, v365, v213);
  uint64_t v221 = WiFiInterface.init(driver:components:logger:)(v215, v218, v202);
  if (v221)
  {
    uint64_t v222 = v216;
    swift_retain_n();
    swift_beginAccess();
    type metadata accessor for WiFiInterface.NeighborDiscoveryTable();
    swift_retain_n();
    WiFiInterface.NeighborDiscoveryTable.clearAllPeerPresence()();
    uint64_t v357 = (void (*)(uint64_t))v221;
    if (v223)
    {
      swift_endAccess();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v224 = v365;
      unint64_t v225 = Logger.logObject.getter();
      os_log_type_t v226 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v225, v226))
      {
        uint64_t v227 = (uint8_t *)swift_slowAlloc();
        unint64_t v228 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v227 = 138412290;
        swift_errorRetain();
        uint64_t v229 = (uint64_t *)_swift_stdlib_bridgeErrorToNSError();
        uint64_t v371 = v229;
        uint64_t v230 = v365;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *unint64_t v228 = v229;
        uint64_t v222 = v355;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v225, v226, "Failed to initially clear the peer presence table because %@", v227, 0xCu);
        sub_100010BCC(&qword_10047CC30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_errorRelease();

        os_log_type_t v345 = 0;
        uint64_t v231 = v360;
        uint64_t v232 = v351;
        uint64_t v233 = v317;
        uint64_t v234 = v316;
        uint64_t v235 = v338;
      }
      else
      {
        swift_errorRelease();

        swift_errorRelease();
        swift_errorRelease();
        os_log_type_t v345 = 0;
        uint64_t v231 = v360;
        uint64_t v232 = v351;
        uint64_t v233 = v317;
        uint64_t v234 = v316;
        uint64_t v235 = v338;
        uint64_t v230 = v224;
      }
    }
    else
    {
      swift_endAccess();
      uint64_t v231 = v360;
      uint64_t v230 = v365;
      uint64_t v232 = v351;
      uint64_t v233 = v317;
      uint64_t v234 = v316;
      uint64_t v235 = v338;
      os_log_type_t v345 = 0;
    }
    uint64_t v221 = (uint64_t)v357;
    ((void (*)(char *, char *, uint64_t))v235)(v234, (char *)v357 + *(void *)(*(void *)v357 + 96), v222);
    swift_release();
    uint64_t v236 = swift_allocObject();
    swift_weakInit();
    swift_release();
    long long v237 = v318;
    v361(v318, v230, v231);
    uint64_t v238 = *(unsigned __int8 *)(v232 + 80);
    uint64_t v239 = v222;
    uint64_t v240 = (v238 + 40) & ~v238;
    uint64_t v340 = (uint64_t *)(v240 + v233);
    uint64_t v342 = (char *)(v238 | 7);
    os_log_t v241 = (void *)swift_allocObject();
    uint64_t v242 = v363;
    v241[2] = v362;
    v241[3] = v242;
    v241[4] = v236;
    uint64_t v343 = v240;
    uint64_t v243 = (char *)v241 + v240;
    uint64_t v244 = v239;
    uint64_t v245 = *(char **)(v232 + 32);
    uint64_t v351 = v232 + 32;
    uint64_t v341 = v245;
    ((void (*)(char *, char *, uint64_t))v245)(v243, v237, v231);
    uint64_t v246 = v344;
    unint64_t v247 = *(void (**)(void (*)(uint64_t), void *, uint64_t, uint64_t))(v344 + 48);
    swift_retain();
    char v248 = v234;
    uint64_t v249 = v345;
    v247(sub_10036B290, v241, v239, v246);
    if (v249)
    {
      uint64_t v250 = v356 + 8;
      uint64_t v363 = *(void *)(v356 + 8);
      ((void (*)(char *, uint64_t))v363)(v248, v239);
      swift_release();
      swift_release_n();
      swift_release();
      swift_errorRetain();
      unint64_t v251 = (unint64_t)v364;
      swift_bridgeObjectRetain();
      swift_errorRetain();
      int v252 = v365;
      id v253 = Logger.logObject.getter();
      os_log_type_t v254 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v253, v254))
      {
        uint64_t v255 = swift_slowAlloc();
        uint64_t v356 = v250;
        uint64_t v256 = v255;
        unint64_t v257 = (void *)swift_slowAlloc();
        uint64_t v371 = (uint64_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v256 = 136315394;
        swift_bridgeObjectRetain();
        uint64_t v368 = (void *)sub_100010680((uint64_t)v358, v251, (uint64_t *)&v371);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v256 + 12) = 2112;
        swift_errorRetain();
        uint64_t v258 = v244;
        long long v259 = (void *)_swift_stdlib_bridgeErrorToNSError();
        uint64_t v368 = v259;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *unint64_t v257 = v259;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v253, v254, "Unable to create NANInterface for %s because initialization error: %@", (uint8_t *)v256, 0x16u);
        sub_100010BCC(&qword_10047CC30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
        (*(void (**)(uint64_t, uint64_t))(v347 + 8))(v348, v346);
        (*(void (**)(uint64_t, uint64_t))(v325 + 8))(v350, v324);
        ((void (*)(char *, uint64_t))v352)(v365, v360);
        ((void (*)(uint64_t, uint64_t))v363)(v366, v258);
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
        swift_bridgeObjectRelease_n();
        swift_errorRelease();
        (*(void (**)(uint64_t, uint64_t))(v347 + 8))(v348, v346);
        (*(void (**)(uint64_t, uint64_t))(v325 + 8))(v350, v324);
        ((void (*)(char *, uint64_t))v352)(v252, v360);
        ((void (*)(uint64_t, uint64_t))v363)(v366, v244);
      }
      swift_release();
      swift_release();
      return 0;
    }
    uint64_t v260 = v356 + 8;
    id v358 = *(uint64_t **)(v356 + 8);
    ((void (*)(char *, uint64_t))v358)(v248, v239);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_unownedRetain();
    swift_unownedRetain();
    swift_release();
    char v261 = v354;
    uint64_t v262 = v360;
    v361(v354, v365, v360);
    swift_unownedRetainStrong();
    uint64_t v263 = v349;
    swift_retain();
    swift_unownedRelease();
    swift_unownedRelease();
    swift_unownedRetain();
    swift_release();
    unint64_t v264 = ((unint64_t)v340 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v265 = (void *)swift_allocObject();
    uint64_t v266 = v362;
    uint64_t v267 = v363;
    v265[2] = v362;
    v265[3] = v267;
    v265[4] = v263;
    ((void (*)(char *, void (*)(uint64_t), uint64_t))v341)((char *)v265 + v343, v261, v262);
    *(void *)((char *)v265 + v264) = v221;
    uint64_t v268 = swift_allocObject();
    *(void *)(v268 + 16) = sub_10036B400;
    *(void *)(v268 + 24) = v265;
    uint64_t v269 = v221 + *(void *)(*(void *)v221 + 520);
    swift_beginAccess();
    uint64_t v270 = v312;
    uint64_t v271 = (uint64_t *)(v269 + *(int *)(v312 + 48));
    uint64_t v272 = *v271;
    *uint64_t v271 = (uint64_t)sub_10036C01C;
    v271[1] = v268;
    sub_100011E30(v272);
    swift_release();
    swift_unownedRetain();
    swift_unownedRetain();
    swift_release();
    swift_unownedRetainStrong();
    swift_unownedRelease();
    swift_unownedRelease();
    swift_unownedRetain();
    swift_release();
    uint64_t v273 = (void *)swift_allocObject();
    v273[2] = v266;
    v273[3] = v267;
    v273[4] = v221;
    uint64_t v274 = swift_allocObject();
    *(void *)(v274 + 16) = sub_10036B4E8;
    *(void *)(v274 + 24) = v273;
    uint64_t v275 = (uint64_t *)(v269 + *(int *)(v270 + 52));
    uint64_t v276 = *v275;
    *uint64_t v275 = (uint64_t)sub_10036B4F8;
    v275[1] = v274;
    sub_100011E30(v276);
    swift_release();
    swift_unownedRetain();
    swift_unownedRetain();
    swift_release();
    swift_unownedRetainStrong();
    swift_unownedRelease();
    swift_unownedRelease();
    swift_unownedRetain();
    swift_release();
    uint64_t v277 = (void *)swift_allocObject();
    v277[2] = v266;
    v277[3] = v267;
    v277[4] = v221;
    uint64_t v278 = swift_allocObject();
    *(void *)(v278 + 16) = sub_10036B524;
    *(void *)(v278 + 24) = v277;
    long long v279 = (uint64_t *)(v269 + *(int *)(v270 + 56));
    uint64_t v280 = *v279;
    *long long v279 = (uint64_t)sub_10036C034;
    v279[1] = v278;
    sub_100011E30(v280);
    swift_release();
    sub_100356C70(0);
    swift_release();
    WiFiInterface.linkState.setter(0);
    swift_release();
    uint64_t v281 = v313;
    WiFiInterface.preferences.getter();
    swift_release();
    uint64_t v282 = v315;
    LOBYTE(v269) = Preferences.createNetworkAgent.getter();
    (*(void (**)(char *, uint64_t))(v314 + 8))(v281, v282);
    uint64_t v356 = v260;
    if (v269)
    {
      type metadata accessor for NANNetworkAgent();
      long long v283 = sub_100340A0C(v221);
    }
    else
    {
      swift_release();
      long long v283 = 0;
    }
    uint64_t v285 = v355;
    uint64_t v286 = v323;
    uint64_t v287 = v344;
    uint64_t v288 = *(void *)(*(void *)v221 + 488);
    os_log_t v289 = *(void **)(v221 + v288);
    *(void *)(v221 + v288) = v283;
    swift_release();

    char v290 = (*(uint64_t (**)(uint64_t, uint64_t))(v287 + 32))(v285, v287);
    char v291 = (*(uint64_t (**)(uint64_t, uint64_t))(v287 + 24))(v285, v287);
    uint64_t v292 = (*(uint64_t (**)(uint64_t, uint64_t))(v286 + 8))(v285, v286);
    id v293 = (void *)*WiFiDriverCapabilities.supportsSimultaneousDualBand.unsafeMutableAddressor();
    uint64_t v370 = (objc_class *)v292;
    uint64_t v368 = v293;
    unint64_t v294 = sub_1002C8868();
    swift_bridgeObjectRetain_n();
    ExtendableOptionSet.formIntersection(_:)((uint64_t)&v370, (uint64_t)&type metadata for WiFiDriverCapabilities, v294);
    LOBYTE(v294) = sub_1000956AC(v368, v293);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v294) {
      int v295 = 0;
    }
    else {
      int v295 = *(_DWORD *)NANAttribute.CustomDeviceInformation.Flags.doesNotSupportSimultaneousDualBand.unsafeMutableAddressor();
    }
    uint64_t v296 = (uint64_t)v311;
    uint64_t v297 = v310;
    uint64_t v298 = type metadata accessor for NANAttribute.CustomDeviceInformation(0);
    NANAttribute.CustomDeviceInformation.CustomAttributes.init()(v296 + *(int *)(v298 + 28));
    *(unsigned char *)uint64_t v296 = v290;
    *(unsigned char *)(v296 + 1) = v291;
    *(_DWORD *)(v296 + 4) = v295;
    uint64_t v299 = type metadata accessor for NANAttribute(0);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v299 - 8) + 56))(v296, 0, 1, v299);
    uint64_t v300 = v221 + *(void *)(*(void *)v221 + 592);
    swift_beginAccess();
    uint64_t v370 = *(objc_class **)(v300 + *(int *)(v297 + 40));
    swift_bridgeObjectRetain();
    sub_100354930(v296, 45);
    v367.Class isa = v370;
    MutableDriverProperty.wrappedValue.setter(&v367, v297);
    swift_endAccess();
    swift_release();
    swift_retain();
    unint64_t v301 = v365;
    os_log_type_t v302 = Logger.logObject.getter();
    os_log_type_t v303 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v302, v303))
    {
      uint64_t v304 = (uint8_t *)swift_slowAlloc();
      uint64_t v368 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v304 = 136315138;
      uint64_t v305 = WiFiInterface.description.getter();
      unint64_t v307 = v306;
      swift_release();
      uint64_t v370 = (objc_class *)sub_100010680(v305, v307, (uint64_t *)&v368);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v302, v303, "Created %s", v304, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v347 + 8))(v348, v346);
      (*(void (**)(uint64_t, uint64_t))(v325 + 8))(v350, v324);
      ((void (*)(char *, uint64_t))v352)(v301, v360);
      ((void (*)(uint64_t, uint64_t))v358)(v366, v355);
    }
    else
    {

      swift_release_n();
      (*(void (**)(uint64_t, uint64_t))(v347 + 8))(v348, v346);
      (*(void (**)(uint64_t, uint64_t))(v325 + 8))(v350, v324);
      ((void (*)(char *, uint64_t))v352)(v301, v360);
      ((void (*)(uint64_t, uint64_t))v358)(v366, v285);
    }
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v217 + 8))(v219, v220);
    (*(void (**)(uint64_t, uint64_t))(v325 + 8))(v350, v324);
    ((void (*)(char *, uint64_t))v352)(v365, v213);
    (*(void (**)(uint64_t, uint64_t))(v356 + 8))(v366, v216);
    swift_release();
  }
  return v221;
}

uint64_t (*sub_10035D2A0(uint64_t a1, uint64_t a2, uint64_t a3))(char a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v9 = (char *)&v13 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v13 - v8, a1, AssociatedTypeWitness);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, v9, AssociatedTypeWitness);
  return sub_10036BEE8;
}

uint64_t sub_10035D3F0(char a1)
{
  uint64_t v1 = a1 & 1;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 64);
  uint64_t v4 = swift_checkMetadataState();
  return v3(v1, v4, AssociatedConformanceWitness);
}

uint64_t (*sub_10035D4B0(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v9 = (char *)&v13 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v13 - v8, a1, AssociatedTypeWitness);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, v9, AssociatedTypeWitness);
  return sub_10036BD68;
}

uint64_t sub_10035D600(uint64_t a1)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 80);
  uint64_t v4 = swift_checkMetadataState();
  return v3(a1 & 0xFFFFFFFFFFFFLL, v4, AssociatedConformanceWitness);
}

uint64_t (*sub_10035D6C0(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v9 = (char *)&v13 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v13 - v8, a1, AssociatedTypeWitness);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, v9, AssociatedTypeWitness);
  return sub_10036BC90;
}

uint64_t sub_10035D810(uint64_t a1)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 96);
  uint64_t v4 = swift_checkMetadataState();
  return v3(a1, v4, AssociatedConformanceWitness);
}

uint64_t (*sub_10035D8D0(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v9 = (char *)&v13 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v13 - v8, a1, AssociatedTypeWitness);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, v9, AssociatedTypeWitness);
  return sub_10036BBE4;
}

uint64_t sub_10035DA20(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 304);
  uint64_t v6 = swift_checkMetadataState();
  return v5(a1, a2, v6, AssociatedConformanceWitness);
}

uint64_t sub_10035DAF4(uint64_t a1)
{
  if (!*(void *)(a1 + 8)) {
    return 1701736302;
  }
  _print_unlocked<A, B>(_:_:)();
  return 0;
}

uint64_t (*sub_10035DB60(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v9 = (char *)&v13 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v13 - v8, a1, AssociatedTypeWitness);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, v9, AssociatedTypeWitness);
  return sub_10036BBB4;
}

uint64_t sub_10035DCB0(uint64_t a1)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 112);
  uint64_t v4 = swift_checkMetadataState();
  return v3(a1, v4, AssociatedConformanceWitness);
}

uint64_t (*sub_10035DD70(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v9 = (char *)&v13 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v13 - v8, a1, AssociatedTypeWitness);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, v9, AssociatedTypeWitness);
  return sub_10036BB84;
}

uint64_t sub_10035DEC0(uint64_t a1)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 128);
  uint64_t v4 = swift_checkMetadataState();
  return v3(a1 & 0xFFFFFFFFFFFFLL, v4, AssociatedConformanceWitness);
}

uint64_t (*sub_10035DF80(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v9 = (char *)&v13 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v13 - v8, a1, AssociatedTypeWitness);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, v9, AssociatedTypeWitness);
  return sub_10036BB54;
}

uint64_t sub_10035E0D0(uint64_t a1)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 144);
  uint64_t v4 = swift_checkMetadataState();
  return v3(a1 & 0xFFFFFFFFFFFFLL, v4, AssociatedConformanceWitness);
}

uint64_t sub_10035E190(unsigned int *a1)
{
  unint64_t v1 = *a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32);
  if ((v1 & 0xFF00000000) == 0x300000000) {
    return 48;
  }
  else {
    return Channel.description.getter(v1);
  }
}

uint64_t (*sub_10035E1D4(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v9 = (char *)&v13 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v13 - v8, a1, AssociatedTypeWitness);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, v9, AssociatedTypeWitness);
  return sub_10036BAA8;
}

uint64_t sub_10035E324(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 296);
  uint64_t v6 = swift_checkMetadataState();
  return v5(a1 & 0xFFFFFFFFFFFFFFLL, a2, v6, AssociatedConformanceWitness);
}

uint64_t sub_10035E3F8(uint64_t a1)
{
  if (!*(void *)(*(void *)a1 + 16)) {
    return 1701736302;
  }
  uint64_t v1 = swift_bridgeObjectRetain();
  sub_1003554B0(v1);
  swift_bridgeObjectRelease();
  sub_100010BCC((uint64_t *)&unk_100488360);
  sub_10000F9CC(&qword_100487D40, (uint64_t *)&unk_100488360);
  uint64_t v2 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_10035E4CC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = swift_bridgeObjectRetain();
  unint64_t v10 = sub_1002C5648(v3);
  sub_100369FF8((uint64_t *)&v10);
  if (v1)
  {
    uint64_t result = swift_release();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = (uint64_t)v10;
    swift_bridgeObjectRetain();
    unint64_t v5 = sub_10036ACBC(v4, v2);
    swift_release();
    swift_bridgeObjectRelease();
    swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v7 = *(void (**)(unint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 168);
    uint64_t v8 = swift_checkMetadataState();
    v7(v5, v8, AssociatedConformanceWitness);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10035E614()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  sub_10035573C(v0);
  swift_bridgeObjectRelease();
  sub_100010BCC((uint64_t *)&unk_100488360);
  sub_10000F9CC(&qword_100487D40, (uint64_t *)&unk_100488360);
  uint64_t v1 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v3 = v2;
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = v1;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 93;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return 91;
}

uint64_t (*sub_10035E700(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v9 = (char *)&v13 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v13 - v8, a1, AssociatedTypeWitness);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, v9, AssociatedTypeWitness);
  return sub_10036B968;
}

uint64_t sub_10035E850(uint64_t a1)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 288);
  uint64_t v4 = swift_checkMetadataState();
  return v3(a1, v4, AssociatedConformanceWitness);
}

uint64_t (*sub_10035E910(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v9 = (char *)&v13 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v13 - v8, a1, AssociatedTypeWitness);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, v9, AssociatedTypeWitness);
  return sub_10036B938;
}

uint64_t sub_10035EA60(uint64_t a1)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 280);
  uint64_t v4 = swift_checkMetadataState();
  return v3(a1, v4, AssociatedConformanceWitness);
}

void sub_10035EB20(uint64_t a1)
{
  type metadata accessor for DriverEvent(0);
  __chkstk_darwin();
  uint64_t v3 = (char *)v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (void *)((char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v9 = (void *)*v8;
  *uint64_t v7 = *v8;
  (*(void (**)(uint64_t *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v5 + 8))(v7, v4);
  if (v9)
  {
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      sub_10035EE1C(a1);
      swift_release();
    }
    else
    {
      sub_10036BA3C(a1, (uint64_t)v3, type metadata accessor for DriverEvent);
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        uint64_t v17 = swift_slowAlloc();
        *(_DWORD *)uint64_t v13 = 136315138;
        uint64_t v14 = DriverEvent.shortDescription.getter();
        v16[1] = sub_100010680(v14, v15, &v17);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10036B854((uint64_t)v3, type metadata accessor for DriverEvent);
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "Failed to dispatch event %s because the NANInterface was deallocated before the event was received from the driver", v13, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        sub_10036B854((uint64_t)v3, type metadata accessor for DriverEvent);
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_10035EE1C(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v395 = sub_100010BCC(&qword_100483C10);
  __chkstk_darwin();
  uint64_t v394 = (uint64_t)&v365[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(void *)&long long v376 = sub_100010BCC(&qword_100487C80);
  __chkstk_darwin();
  *(void *)&long long v375 = &v365[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(void *)&long long v380 = sub_100010BCC(&qword_100487CF8);
  __chkstk_darwin();
  *(void *)&long long v379 = &v365[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(void *)&long long v378 = sub_100010BCC(&qword_100487C98);
  __chkstk_darwin();
  *(void *)&long long v377 = &v365[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v397 = sub_100010BCC((uint64_t *)&unk_100487D20);
  __chkstk_darwin();
  uint64_t v398 = (uint64_t)&v365[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v402 = type metadata accessor for DispatchTime();
  uint64_t v392 = *(void *)(v402 - 8);
  __chkstk_darwin();
  uint64_t v391 = &v365[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v389 = v9;
  __chkstk_darwin();
  uint64_t v401 = (uint64_t)&v365[-v10];
  uint64_t v393 = *(void *)(v3 + 416);
  uint64_t v11 = *(void *)(v393 + 8);
  *(void *)&long long v411 = v1;
  unint64_t v12 = *(void *)(v3 + 408);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v407 = v11;
  unint64_t v409 = v12;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v385 = AssociatedTypeWitness;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v383 = *(void *)(v14 - 8);
  uint64_t v384 = v14;
  __chkstk_darwin();
  unint64_t v386 = (unint64_t)&v365[-v15];
  sub_100010BCC(&qword_100484D00);
  __chkstk_darwin();
  *(void *)&long long v382 = &v365[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v403 = type metadata accessor for DispatchTimeInterval();
  uint64_t v405 = *(void *)(v403 - 8);
  __chkstk_darwin();
  uint64_t v390 = (uint64_t)&v365[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  unint64_t v400 = &v365[-v18];
  __chkstk_darwin();
  uint64_t v406 = &v365[-v19];
  unint64_t v408 = sub_100010BCC((uint64_t *)&unk_100487CB0);
  __chkstk_darwin();
  uint64_t v404 = &v365[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  uint64_t v399 = (uint64_t)&v365[-v21];
  uint64_t v410 = (uint8_t *)type metadata accessor for NANPeer(0);
  __chkstk_darwin();
  *(void *)&long long v381 = &v365[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  uint64_t v24 = &v365[-v23];
  type metadata accessor for DriverEvent(0);
  __chkstk_darwin();
  unint64_t v396 = (unint64_t)&v365[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  uint64_t v27 = &v365[-v26];
  __chkstk_darwin();
  uint64_t v29 = &v365[-v28];
  uint64_t v30 = type metadata accessor for DispatchPredicate();
  uint64_t v31 = *(void *)(v30 - 8);
  __chkstk_darwin();
  uint64_t v33 = &v365[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v388 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  id v34 = (id)*v388;
  *uint64_t v33 = *v388;
  (*(void (**)(void *, void, uint64_t))(v31 + 104))(v33, enum case for DispatchPredicate.onQueue(_:), v30);
  id v35 = v34;
  LOBYTE(v34) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v31 + 8))(v33, v30);
  if ((v34 & 1) == 0)
  {
    __break(1u);
LABEL_167:

    goto LABEL_164;
  }
  uint64_t v412 = a1;
  sub_10036BA3C(a1, (uint64_t)v29, type metadata accessor for DriverEvent);
  if (swift_getEnumCaseMultiPayload())
  {
    sub_10036B854((uint64_t)v29, type metadata accessor for DriverEvent);
    uint64_t v36 = 0;
    uint64_t v37 = v411;
  }
  else
  {
    sub_10006E544((uint64_t)v29, (uint64_t)v425);
    unint64_t v38 = DriverEvent.NAN.peerAttributes.getter();
    uint64_t v36 = v39;
    uint64_t v37 = v411;
    if (v39)
    {
      unint64_t v40 = v38;
      uint64_t v41 = (uint64_t *)(v411 + *(void *)(*(void *)v411 + 432));
      swift_beginAccess();
      uint64_t v42 = *v41;
      uint64_t v43 = v40 & 0xFFFFFFFFFFFFLL;
      if (*(void *)(v42 + 16) && (unint64_t v44 = sub_100031214(v43), (v45 & 1) != 0))
      {
        unint64_t v46 = *(void *)(*(void *)(v42 + 56) + 8 * v44);
        swift_endAccess();
        swift_bridgeObjectRetain();
      }
      else
      {
        swift_endAccess();
        unint64_t v46 = sub_1002976C0((uint64_t)_swiftEmptyArrayStorage);
      }
      sub_10035665C(v43, (uint64_t)v24);
      sub_1002A1F5C(v36, v46);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1003568F4((uint64_t)v24, v43);
      sub_10035665C(v43, (uint64_t)v24);
      char v47 = (unsigned __int16 *)&v24[*((int *)v410 + 11)];
      int v48 = *v47;
      int v49 = *((unsigned __int8 *)v47 + 2);
      sub_10036B854((uint64_t)v24, type metadata accessor for NANPeer);
      int v50 = v48 | (v49 << 16);
      uint64_t v36 = 0;
      sub_1002D9168((void *(*)(uint64_t *__return_ptr, __int16 *))sub_10036B8B4, v37, v50);
    }
    sub_1001344F4((uint64_t)v425, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
  }
  uint64_t v51 = v412;
  sub_10036BA3C(v412, (uint64_t)v27, type metadata accessor for DriverEvent);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v52 = (uint64_t)v27;
LABEL_15:
      sub_10036B854(v52, type metadata accessor for DriverEvent);
      return;
    case 2u:
      sub_1000135D4(*(void *)v27, *((void *)v27 + 1), *((void *)v27 + 2), *((void *)v27 + 3), *((void *)v27 + 4), v27[40], v27[41]);
      return;
    case 3u:
      if ((*v27 & 1) == 0) {
        sub_100356C70(0);
      }
      return;
    case 4u:
      uint64_t v53 = v405;
      uint64_t v54 = v406;
      switch(*v27)
      {
        case 1:
          uint64_t v119 = *(void *)(v37 + *(void *)(*(void *)v37 + 496));
          uint64_t v120 = Logger.logObject.getter();
          if (v119)
          {
            os_log_type_t v121 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v120, v121))
            {
              uint64_t v122 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v122 = 0;
              _os_log_impl((void *)&_mh_execute_header, v120, v121, "Watchdog reset completed", v122, 2u);
              swift_slowDealloc();
            }

            *(void *)(v37 + *(void *)(*(void *)v37 + 496)) = 0;
            swift_release();
            sub_100356CE8((uint64_t)v54);
            uint64_t v123 = (uint8_t *)v400;
            *unint64_t v400 = 1;
            uint64_t v124 = v403;
            (*(void (**)(uint8_t *, void, uint64_t))(v53 + 104))(v123, enum case for DispatchTimeInterval.seconds(_:), v403);
            BOOL v125 = static DispatchTimeInterval.< infix(_:_:)();
            uint64_t v126 = *(void (**)(uint8_t *, uint64_t))(v53 + 8);
            v126(v123, v124);
            v126(v54, v124);
            if (v125)
            {
              swift_retain();
              id v127 = Logger.logObject.getter();
              os_log_type_t v128 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v127, v128))
              {
                char v129 = (uint8_t *)swift_slowAlloc();
                uint64_t v412 = swift_slowAlloc();
                v423[0] = v412;
                *(_DWORD *)char v129 = 136315138;
                uint64_t v410 = v129 + 4;
                sub_100356CE8((uint64_t)v54);
                uint64_t v130 = DispatchTimeInterval.description.getter();
                uint64_t v131 = v54;
                unint64_t v133 = v132;
                v126(v131, v124);
                v422[0] = sub_100010680(v130, v133, v423);
                uint64_t v37 = v411;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release();
                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v127, v128, "Last watchdog occurred %s ago, skipping restore", v129, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {
                swift_release();
              }

              sub_100356C70(0);
LABEL_119:
              sub_1003661FC(v37);
              return;
            }
            uint64_t v177 = v398;
            WiFiInterface.$linkState.getter(v398);
            MutableDriverProperty.restore()();
            sub_1000380B4(v177, (uint64_t *)&unk_100487D20);
            uint64_t v178 = *(void *)(*(void *)v37 + 448);
            uint64_t v179 = *(void *)(v37 + v178);
            if (v179)
            {
              uint64_t v180 = *(uint64_t (**)(uint64_t))(*(void *)v179 + 184);
              uint64_t v181 = swift_retain();
              LOBYTE(v180) = v180(v181);
              swift_release();
              uint64_t v182 = *(void *)(v37 + v178);
              if (v180)
              {
                if (v182)
                {
                  uint64_t v270 = *(void (**)(void))(*(void *)v182 + 192);
                  swift_retain();
                  v270(0);
                  swift_release();
                  uint64_t v271 = *(void *)(v37 + v178);
                  if (v271)
                  {
                    uint64_t v272 = *(void (**)(uint64_t))(*(void *)v271 + 192);
                    swift_retain();
                    v272(1);
                    swift_release();
                  }
                }
              }
              else if (v182)
              {
                unint64_t v183 = *(void (**)(uint64_t))(*(void *)v182 + 208);
                uint64_t v184 = swift_retain();
                uint64_t v185 = v398;
                v183(v184);
                swift_release();
                MutableDriverProperty.restore()();
                sub_1000380B4(v185, (uint64_t *)&unk_100487D20);
              }
            }
            uint64_t v273 = *(void *)(v37 + *(void *)(*(void *)v37 + 456));
            if (v273)
            {
              uint64_t v274 = *(void (**)(uint64_t))(*(void *)v273 + 208);
              uint64_t v275 = swift_retain();
              uint64_t v276 = v398;
              v274(v275);
              swift_release();
              MutableDriverProperty.restore()();
              sub_1000380B4(v276, (uint64_t *)&unk_100487D20);
            }
            sub_1003631BC();
            if (v36)
            {
              uint64_t v277 = Logger.logObject.getter();
              os_log_type_t v278 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v277, v278))
              {
                long long v279 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)long long v279 = 0;
                _os_log_impl((void *)&_mh_execute_header, v277, v278, "Failed to initialize NAN after watchdog reset completed, force disabling NAN", v279, 2u);
                swift_slowDealloc();
              }

              sub_100356C70(0);
              swift_errorRelease();
              goto LABEL_119;
            }
            uint64_t v280 = v377;
            sub_100359594(v377);
            MutableDriverProperty.restore()();
            sub_1000380B4(v280, &qword_100487C98);
            uint64_t v281 = v379;
            sub_1000136F4(v37 + *(void *)(*(void *)v37 + 568), v379, &qword_100487CF8);
            MutableDriverProperty.restore()();
            sub_1000380B4(v281, &qword_100487CF8);
            swift_getAssociatedTypeWitness();
            uint64_t v282 = swift_getAssociatedConformanceWitness();
            uint64_t v283 = v37;
            id v284 = *(uint64_t (**)(uint64_t, uint64_t))(v282 + 56);
            uint64_t v285 = swift_checkMetadataState();
            char v286 = v284(v285, v282);
            char v287 = sub_100355DD4();
            if (v286 != 2)
            {
              char v288 = v287;
              if (v286) {
                uint64_t v289 = 0x64656C62616E65;
              }
              else {
                uint64_t v289 = 0x64656C6261736964;
              }
              if (v286) {
                unint64_t v290 = 0xE700000000000000;
              }
              else {
                unint64_t v290 = 0xE800000000000000;
              }
              if (v288) {
                uint64_t v291 = 0x64656C62616E65;
              }
              else {
                uint64_t v291 = 0x64656C6261736964;
              }
              if (v288) {
                unint64_t v292 = 0xE700000000000000;
              }
              else {
                unint64_t v292 = 0xE800000000000000;
              }
              if (v289 == v291 && v290 == v292)
              {
                swift_bridgeObjectRelease_n();
                uint64_t v283 = v411;
LABEL_150:
                char v321 = v284(v285, v282);
                sub_100356C70(v321 & 1);
                sub_100356AB8();
                uint64_t v322 = v412;
                sub_1003337F0(v412);
                swift_release();
                sub_100354870();
                sub_1002DD458(v322);
                swift_release();
                sub_1003661FC(v283);
                return;
              }
              char v319 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v283 = v411;
              if (v319) {
                goto LABEL_150;
              }
            }
            uint64_t v320 = v375;
            sub_1003593DC(v375);
            MutableDriverProperty.restore()();
            sub_1000380B4(v320, &qword_100487C80);
            goto LABEL_150;
          }
          os_log_type_t v170 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v120, v170)) {
            goto LABEL_77;
          }
          unint64_t v171 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v171 = 0;
          uint64_t v172 = "Watchdog reset completed without a watchdog being in progress";
          uint64_t v173 = v120;
          os_log_type_t v174 = v170;
          uint64_t v175 = v171;
          uint32_t v176 = 2;
LABEL_76:
          _os_log_impl((void *)&_mh_execute_header, v173, v174, v172, v175, v176);
          swift_slowDealloc();
LABEL_77:

          break;
        case 2:
          __int16 v134 = Logger.logObject.getter();
          os_log_type_t v135 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v134, v135))
          {
            char v136 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)char v136 = 0;
            _os_log_impl((void *)&_mh_execute_header, v134, v135, "Driver interface was removed", v136, 2u);
            swift_slowDealloc();
          }

          *(unsigned char *)(v37 + *(void *)(*(void *)v37 + 664)) = 0;
          if (*(void *)(v37 + *(void *)(*(void *)v37 + 496))) {
            return;
          }
          *(void *)&long long v411 = type metadata accessor for P2PTimer();
          uint64_t v137 = v401;
          variable initialization expression of AWDLPeer.lastUpdated();
          *(void *)uint64_t v54 = 20;
          uint64_t v410 = *(uint8_t **)(v53 + 104);
          ((void (*)(uint8_t *, void, uint64_t))v410)(v54, enum case for DispatchTimeInterval.seconds(_:), v403);
          uint64_t v412 = *v388;
          uint64_t v138 = swift_allocObject();
          unint64_t v408 = v138;
          swift_weakInit();
          uint64_t v139 = v391;
          uint64_t v61 = v392;
          uint64_t v140 = v402;
          (*(void (**)(unsigned char *, uint64_t, uint64_t))(v392 + 16))(v391, v137, v402);
          unint64_t v141 = (*(unsigned __int8 *)(v61 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80);
          uint64_t v64 = (char *)swift_allocObject();
          uint64_t v142 = v393;
          *((void *)v64 + 2) = v409;
          *((void *)v64 + 3) = v142;
          *((void *)v64 + 4) = v138;
          (*(void (**)(char *, unsigned char *, uint64_t))(v61 + 32))(&v64[v141], v139, v140);
          uint64_t v66 = (uint64_t)v400;
          uint64_t v143 = v403;
          uint64_t v144 = v410;
          ((void (*)(uint8_t *, void, uint64_t))v410)((uint8_t *)v400, enum case for DispatchTimeInterval.never(_:), v403);
          uint64_t v69 = v390;
          *(void *)uint64_t v390 = 100;
          ((void (*)(uint64_t, void, uint64_t))v144)(v69, enum case for DispatchTimeInterval.milliseconds(_:), v143);
          swift_allocObject();
          id v70 = (id)v412;
          swift_retain();
          uint64_t v71 = sub_10036B5B0;
          goto LABEL_53;
        case 3:
          uint64_t v146 = v37 + *(void *)(*(void *)v37 + 160);
          unint64_t v147 = Logger.logObject.getter();
          os_log_type_t v148 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v147, v148))
          {
            uint64_t v149 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v149 = 0;
            _os_log_impl((void *)&_mh_execute_header, v147, v148, "Driver interface was re-created", v149, 2u);
            swift_slowDealloc();
          }

          char v150 = WiFiInterface.linkState.getter() & 1;
          if (v150)
          {
            uint64_t v157 = v398;
            WiFiInterface.$linkState.getter(v398);
            MutableDriverProperty.restore()();
            sub_1000380B4(v157, (uint64_t *)&unk_100487D20);
          }
          else
          {
            WiFiInterface.linkState.setter(1);
          }
          uint64_t v158 = v394;
          uint64_t v159 = v399;
          WiFiInterface.$macAddress.getter(v399);
          MutableDriverProperty.restore()();
          sub_1000380B4(v159, (uint64_t *)&unk_100487CB0);
          WiFiInterface.$ipv6Addresses.getter(v158);
          MutableDriverProperty.restore()();
          sub_1000380B4(v158, &qword_100483C10);
          WiFiInterface.linkState.setter(v150);
          uint64_t v160 = *(void *)(*(void *)v37 + 448);
          uint64_t v161 = *(void *)(v37 + v160);
          if (v161)
          {
            uint64_t v162 = (uint64_t *)(v161 + *(void *)(*(void *)v161 + 104));
            uint64_t v163 = *v162;
            unint64_t v164 = v162[1];
            *(void *)(v37 + v160) = 0;
            swift_bridgeObjectRetain();
            swift_release();
            sub_100357D68();
            if (v36)
            {
              swift_bridgeObjectRetain();
              uint64_t v165 = Logger.logObject.getter();
              os_log_type_t v166 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v165, v166))
              {
                uint64_t v167 = swift_slowAlloc();
                uint64_t v410 = (uint8_t *)v163;
                uint64_t v168 = (uint8_t *)v167;
                uint64_t v169 = swift_slowAlloc();
                uint64_t v412 = v146;
                v423[0] = v169;
                *(_DWORD *)uint64_t v168 = 136315138;
                swift_bridgeObjectRetain();
                v422[0] = sub_100010680((uint64_t)v410, v164, v423);
                uint64_t v37 = v411;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                _os_log_impl((void *)&_mh_execute_header, v165, v166, "Failed to recover the low latency interface %s", v168, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
                swift_errorRelease();
              }
              else
              {
                swift_errorRelease();
                swift_bridgeObjectRelease_n();
              }

              uint64_t v36 = 0;
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_release();
            }
          }
          uint64_t v236 = *(void *)(*(void *)v37 + 456);
          uint64_t v237 = *(void *)(v37 + v236);
          if (v237)
          {
            uint64_t v238 = *(uint64_t (**)(uint64_t))(*(void *)v237 + 184);
            uint64_t v239 = v37;
            uint64_t v240 = v237 + *(void *)(*(void *)v237 + 104);
            unint64_t v241 = *(void *)(v240 + 8);
            uint64_t v412 = *(void *)v240;
            swift_bridgeObjectRetain();
            uint64_t v242 = swift_retain();
            char v243 = v238(v242);
            swift_release();
            *(void *)(v239 + v236) = 0;
            swift_release();
            uint64_t v244 = sub_10035719C();
            if (v36)
            {
              swift_bridgeObjectRetain();
              uint64_t v245 = Logger.logObject.getter();
              os_log_type_t v246 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v245, v246))
              {
                unint64_t v247 = (uint8_t *)swift_slowAlloc();
                v423[0] = swift_slowAlloc();
                *(_DWORD *)unint64_t v247 = 136315138;
                swift_bridgeObjectRetain();
                v422[0] = sub_100010680(v412, v241, v423);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                _os_log_impl((void *)&_mh_execute_header, v245, v246, "Failed to recover the nan data interface %s", v247, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
                swift_errorRelease();
              }
              else
              {
                swift_errorRelease();
                swift_bridgeObjectRelease_n();
              }
            }
            else
            {
              uint64_t v248 = v244;
              swift_bridgeObjectRelease();
              (*(void (**)(void))(*(void *)v248 + 192))(v243 & 1);
              swift_release();
            }
          }
          uint64_t v249 = (unsigned char *)v396;
          *(unsigned char *)unint64_t v396 = 1;
          swift_storeEnumTagMultiPayload();
          sub_10035EE1C(v249);
          uint64_t v52 = (uint64_t)v249;
          goto LABEL_15;
        case 4:
        case 5:
          return;
        default:
          uint64_t v55 = Logger.logObject.getter();
          os_log_type_t v56 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v55, v56))
          {
            uint64_t v57 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v57 = 0;
            _os_log_impl((void *)&_mh_execute_header, v55, v56, "Watchdog reset in progress", v57, 2u);
            swift_slowDealloc();
          }

          if (*(void *)(v37 + *(void *)(*(void *)v37 + 496))) {
            return;
          }
          *(void *)&long long v411 = type metadata accessor for P2PTimer();
          uint64_t v58 = v401;
          variable initialization expression of AWDLPeer.lastUpdated();
          *(void *)uint64_t v54 = 10;
          uint64_t v410 = *(uint8_t **)(v53 + 104);
          ((void (*)(uint8_t *, void, uint64_t))v410)(v54, enum case for DispatchTimeInterval.seconds(_:), v403);
          uint64_t v412 = *v388;
          uint64_t v59 = swift_allocObject();
          unint64_t v408 = v59;
          swift_weakInit();
          Swift::String v60 = v391;
          uint64_t v61 = v392;
          uint64_t v62 = v402;
          (*(void (**)(unsigned char *, uint64_t, uint64_t))(v392 + 16))(v391, v58, v402);
          unint64_t v63 = (*(unsigned __int8 *)(v61 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80);
          uint64_t v64 = (char *)swift_allocObject();
          uint64_t v65 = v393;
          *((void *)v64 + 2) = v409;
          *((void *)v64 + 3) = v65;
          *((void *)v64 + 4) = v59;
          (*(void (**)(char *, unsigned char *, uint64_t))(v61 + 32))(&v64[v63], v60, v62);
          uint64_t v66 = (uint64_t)v400;
          uint64_t v67 = v403;
          uint64_t v68 = v410;
          ((void (*)(uint8_t *, void, uint64_t))v410)((uint8_t *)v400, enum case for DispatchTimeInterval.never(_:), v403);
          uint64_t v69 = v390;
          *(void *)uint64_t v390 = 100;
          ((void (*)(uint64_t, void, uint64_t))v68)(v69, enum case for DispatchTimeInterval.milliseconds(_:), v67);
          swift_allocObject();
          id v70 = (id)v412;
          swift_retain();
          uint64_t v71 = sub_10036B6B4;
LABEL_53:
          uint64_t v145 = P2PTimer.init(deadlineAfter:on:repeating:leeway:_:)((uint64_t)v54, v70, v66, v69, (uint64_t)v71, (uint64_t)v64);
          (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v401, v402);
          swift_release();
          *(void *)(v37 + *(void *)(*(void *)v37 + 496)) = v145;
          swift_release();
          return;
      }
      return;
    case 5u:
      swift_getAssociatedTypeWitness();
      uint64_t v72 = swift_getAssociatedConformanceWitness();
      uint64_t v73 = *(uint64_t (**)(uint64_t, uint64_t))(v72 + 64);
      uint64_t v412 = swift_checkMetadataState();
      uint64_t v74 = v73(v412, v72);
      if ((v74 & 0x1000000000000) != 0) {
        uint64_t v74 = WiFiInterface.macAddress.getter();
      }
      uint64_t v75 = WiFiInterface.macAddress.getter();
      unint64_t v76 = v74 & 0xFFFFFFFFFFFFLL;
      if (static WiFiAddress.!= infix(_:_:)(v74 & 0xFFFFFFFFFFFFLL, v75 & 0xFFFFFFFFFFFFLL))
      {
        unint64_t v409 = (unint64_t)v73;
        uint64_t v410 = (uint8_t *)v72;
        swift_retain_n();
        uint64_t v77 = Logger.logObject.getter();
        os_log_type_t v78 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v77, v78))
        {
          uint64_t v79 = swift_slowAlloc();
          *(void *)&long long v411 = swift_slowAlloc();
          v423[0] = v411;
          *(_DWORD *)uint64_t v79 = 136315394;
          uint64_t v80 = WiFiAddress.description.getter(v76);
          v422[0] = sub_100010680(v80, v81, v423);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v79 + 12) = 2080;
          uint64_t v82 = WiFiInterface.macAddress.getter();
          swift_release();
          uint64_t v83 = WiFiAddress.description.getter(v82 & 0xFFFFFFFFFFFFLL);
          v422[0] = sub_100010680(v83, v84, v423);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v77, v78, "MAC address changed event with unexpected MAC address %s, expected %s", (uint8_t *)v79, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_release_n();
        }
        uint64_t v85 = v37;
        uint64_t v86 = (uint64_t)v404;
        unint64_t v88 = (uint64_t (*)(uint64_t, uint64_t))v409;
        uint64_t v87 = (uint64_t)v410;
        unint64_t v89 = ((uint64_t (*)(uint64_t, uint8_t *))v409)(v412, v410);
        WiFiInterface.$macAddress.getter(v86);
        if ((v89 & 0x1000000000000) != 0)
        {
          uint64_t v94 = *(int *)(v408 + 40);
          LOBYTE(v89) = *(unsigned char *)(v86 + v94);
          v90.i32[0] = *(_DWORD *)(v86 + v94 + 1);
          int16x8_t v92 = (int16x8_t)vmovl_u8(v90);
          LOBYTE(v93) = *(unsigned char *)(v86 + v94 + 5);
        }
        else
        {
          uint64x2_t v91 = (uint64x2_t)vdupq_n_s64(v89);
          int16x8_t v92 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v91, (uint64x2_t)xmmword_1003B2EB0), (int32x4_t)vshlq_u64(v91, (uint64x2_t)xmmword_1003B2EA0));
          *(int16x4_t *)v92.i8 = vmovn_s32((int32x4_t)v92);
          unint64_t v93 = v89 >> 40;
          uint64_t v94 = *(int *)(v408 + 40);
        }
        uint64_t v95 = v86 + v94;
        *(unsigned char *)uint64_t v95 = v89;
        *(_DWORD *)(v95 + 1) = vmovn_s16(v92).u32[0];
        *(unsigned char *)(v95 + 5) = v93;
        WiFiInterface.$macAddress.setter(v86);
        uint64_t v96 = *(void *)(*(void *)v85 + 448);
        uint64_t v97 = *(void *)(v85 + v96);
        if (v97)
        {
          swift_retain();
          uint64_t v98 = WiFiInterface.macAddress.getter();
          (*(void (**)(uint64_t))(*(void *)v97 + 240))(v98 & 0xFFFFFFFFFFFFLL);
          swift_release();
        }
        sub_100010BCC((uint64_t *)&unk_1004882C0);
        uint64_t v99 = swift_allocObject();
        long long v411 = xmmword_1003B2450;
        *(_OWORD *)(v99 + 16) = xmmword_1003B2450;
        uint64_t v100 = WiFiInterface.macAddress.getter();
        *(void *)(v99 + 32) = WiFiAddress.ipv6LinkLocalAddress.getter(v100 & 0xFFFFFFFFFFFFLL);
        *(void *)(v99 + 40) = v101;
        *(void *)(v99 + 48) = v102;
        *(void *)(v99 + 56) = v103;
        WiFiInterface.ipv6Addresses.setter(v99);
        uint64_t v104 = *(void *)(v85 + v96);
        if (v104)
        {
          uint64_t v105 = swift_allocObject();
          *(_OWORD *)(v105 + 16) = v411;
          swift_retain();
          uint64_t v106 = WiFiInterface.macAddress.getter();
          *(void *)(v105 + 32) = WiFiAddress.ipv6LinkLocalAddress.getter(v106 & 0xFFFFFFFFFFFFLL);
          *(void *)(v105 + 40) = v107;
          *(void *)(v105 + 48) = v108;
          *(void *)(v105 + 56) = v109;
          (*(void (**)(uint64_t))(*(void *)v104 + 336))(v105);
          swift_release();
        }
        uint64_t v110 = *(void *)(v85 + *(void *)(*(void *)v85 + 456));
        if (v110)
        {
          swift_retain();
          unint64_t v111 = v88(v412, v87);
          uint64_t v113 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(*(void *)v110 + 272))(v423);
          if ((v111 & 0x1000000000000) != 0)
          {
            uint64_t v118 = *(int *)(v408 + 40);
            LOBYTE(v111) = *(unsigned char *)(v112 + v118);
            v114.i32[0] = *(_DWORD *)(v112 + v118 + 1);
            int16x8_t v116 = (int16x8_t)vmovl_u8(v114);
            LOBYTE(v117) = *(unsigned char *)(v112 + v118 + 5);
          }
          else
          {
            uint64x2_t v115 = (uint64x2_t)vdupq_n_s64(v111);
            int16x8_t v116 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v115, (uint64x2_t)xmmword_1003B2EB0), (int32x4_t)vshlq_u64(v115, (uint64x2_t)xmmword_1003B2EA0));
            *(int16x4_t *)v116.i8 = vmovn_s32((int32x4_t)v116);
            unint64_t v117 = v111 >> 40;
            uint64_t v118 = *(int *)(v408 + 40);
          }
          uint64_t v151 = v112 + v118;
          *(unsigned char *)uint64_t v151 = v111;
          *(_DWORD *)(v151 + 1) = vmovn_s16(v116).u32[0];
          *(unsigned char *)(v151 + 5) = v117;
          v113(v423, 0);
          uint64_t v152 = swift_allocObject();
          *(_OWORD *)(v152 + 16) = v411;
          uint64_t v153 = (*(uint64_t (**)(void))(*(void *)v110 + 232))();
          *(void *)(v152 + 32) = WiFiAddress.ipv6LinkLocalAddress.getter(v153 & 0xFFFFFFFFFFFFLL);
          *(void *)(v152 + 40) = v154;
          *(void *)(v152 + 48) = v155;
          *(void *)(v152 + 56) = v156;
          (*(void (**)(uint64_t))(*(void *)v110 + 336))(v152);
          swift_release();
        }
      }
      return;
    default:
      sub_10006E544((uint64_t)v27, (uint64_t)v422);
      sub_10006E544((uint64_t)v422, (uint64_t)v423);
      switch(sub_1001343E0((uint64_t)v423))
      {
        case 1u:
          uint64_t v191 = NANBitmap.Channel.operatingClass.getter(v423);
          char v192 = *(unsigned char *)v191;
          uint64_t v193 = *(void *)(v191 + 8);
          uint64_t v194 = *(void *)(*(void *)v37 + 616);
          uint64_t v195 = *(unsigned __int8 *)(v37 + v194);
          *(unsigned char *)(v37 + v194) = v192;
          sub_1003596A4(v195);
          uint64_t v196 = v37 + *(void *)(*(void *)v37 + 624);
          *(void *)uint64_t v196 = v193;
          *(unsigned char *)(v196 + 8) = 0;
          return;
        case 2u:
        case 3u:
        case 5u:
        case 6u:
        case 7u:
        case 0xDu:
        case 0x10u:
        case 0x14u:
          NANBitmap.Channel.operatingClass.getter(v423);
          sub_1001344F4((uint64_t)v422, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
          goto LABEL_30;
        case 4u:
        case 8u:
        case 9u:
        case 0xAu:
        case 0xBu:
        case 0xCu:
        case 0xEu:
          NANBitmap.Channel.operatingClass.getter(v423);
LABEL_30:
          sub_100354870();
          sub_1002DD458(v412);
          goto LABEL_31;
        case 0xFu:
          NANBitmap.Channel.operatingClass.getter(v423);
          sub_100356AB8();
          sub_1003337F0(v51);
          goto LABEL_31;
        case 0x11u:
          uint64_t v197 = *(void *)NANBitmap.Channel.operatingClass.getter(v423);
          sub_100354870();
          sub_1002DD458(v51);
          swift_release();
          uint64_t v120 = Logger.logObject.getter();
          os_log_type_t v198 = static os_log_type_t.default.getter();
          if (!os_log_type_enabled(v120, v198)) {
            goto LABEL_77;
          }
          uint64_t v199 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v199 = 134217984;
          v424[0] = v197;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v172 = "DW Start: %ld";
          uint64_t v173 = v120;
          os_log_type_t v174 = v198;
          uint64_t v175 = v199;
          uint32_t v176 = 12;
          goto LABEL_76;
        case 0x12u:
          uint64_t v200 = (unsigned int *)NANBitmap.Channel.operatingClass.getter(v423);
          uint64_t v201 = *((void *)v200 + 24);
          uint64_t v202 = (unsigned char *)v200[50];
          uint64_t v203 = *((unsigned __int8 *)v200 + 204);
          uint64_t v204 = *((unsigned __int8 *)v200 + 205);
          uint64_t v206 = *((void *)v200 + 26);
          unint64_t v205 = *((void *)v200 + 27);
          sub_10013BD30((uint64_t)(v200 + 6), (uint64_t)v424);
          if (sub_10013BD8C((uint64_t)v424)) {
            goto LABEL_164;
          }
          sub_10013BDA0((uint64_t)v424, (uint64_t)v414);
          if (sub_10019F738((uint64_t)v414)) {
            goto LABEL_164;
          }
          uint64_t v393 = v206;
          uint64_t v407 = v201;
          uint64_t AssociatedConformanceWitness = v204;
          uint64_t v389 = v203;
          uint64_t v391 = v202;
          unint64_t v409 = v205;
          uint64_t v207 = sub_10019F744((uint64_t)v414);
          unint64_t v408 = *(void *)v207;
          LODWORD(v404) = *(_DWORD *)(v207 + 8);
          uint64_t v208 = *(void *)(v207 + 16);
          uint64_t v401 = *v200;
          uint64_t v402 = v208;
          uint64_t v399 = *((unsigned __int8 *)v200 + 4);
          uint64_t v398 = *((unsigned __int8 *)v200 + 5);
          uint64_t v397 = *((unsigned __int8 *)v200 + 6);
          unint64_t v396 = *((unsigned __int8 *)v200 + 7);
          uint64_t v395 = *((unsigned __int8 *)v200 + 8);
          uint64_t v394 = *((unsigned __int8 *)v200 + 9);
          uint64_t v412 = *((unsigned __int8 *)v200 + 10);
          uint64_t v209 = *((unsigned __int8 *)v200 + 11);
          uint64_t v210 = *((unsigned __int8 *)v200 + 12);
          uint64_t v211 = (uint64_t *)*((unsigned __int8 *)v200 + 13);
          unint64_t v212 = *((unsigned __int8 *)v200 + 14);
          uint64_t v213 = *((unsigned __int8 *)v200 + 15);
          uint64_t v384 = v200[4];
          uint64_t v383 = *((unsigned __int8 *)v200 + 20);
          *(void *)&long long v382 = *((unsigned __int8 *)v200 + 21);
          *(void *)&long long v381 = *((unsigned __int16 *)v200 + 11);
          uint64_t v214 = (void *)(v411 + *(void *)(*(void *)v411 + 432));
          swift_beginAccess();
          *(void *)&long long v376 = *v214;
          uint64_t v215 = *(void *)(v376 + 16);
          sub_1001344F4((uint64_t)v422, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_100134598);
          *(void *)&long long v385 = v213;
          unint64_t v386 = v212;
          unint64_t v216 = v212 << 32;
          uint64_t v388 = v211;
          uint64_t v217 = (void)v211 << 24;
          uint64_t v390 = v210;
          uint64_t v218 = v210 << 16;
          uint64_t v392 = v209;
          uint64_t v219 = v209 << 8;
          *(void *)&long long v380 = v213 << 40;
          *(void *)&long long v379 = v216;
          *(void *)&long long v378 = v217;
          *(void *)&long long v377 = v218;
          if (v215 && (unint64_t v220 = sub_100031214(v219 | v412 | v218 | v217 | v216 | (v213 << 40)), (v221 & 1) != 0))
          {
            unint64_t v222 = *(void *)(*(void *)(v376 + 56) + 8 * v220);
            swift_endAccess();
            swift_bridgeObjectRetain();
          }
          else
          {
            swift_endAccess();
            unint64_t v222 = sub_1002976C0((uint64_t)_swiftEmptyArrayStorage);
          }
          unint64_t v323 = (unint64_t)v391;
          uint64_t v324 = v389;
          uint64_t v325 = AssociatedConformanceWitness;
          uint64_t v326 = v219 | v377 | v378 | v379;
          uint64_t v327 = v412;
          unint64_t v328 = v326 | v380 | v412;
          uint64_t v329 = v411;
          sub_10035665C(v328, (uint64_t)v24);
          unint64_t v330 = v323 | (v324 << 32) | (v325 << 40);
          uint64_t v331 = v329;
          sub_1002A1C28(v408, v404, v402, v401 | (v399 << 32) | (v398 << 40) | (v397 << 48) | (v396 << 56), v395 | (v394 << 8) | (v327 << 16) | (v392 << 24) | (v390 << 32) | ((void)v388 << 40) | (v386 << 48) | ((void)v385 << 56), v384 | (v383 << 32) | ((void)v382 << 40) | ((void)v381 << 48), v407, v330, v393, v409, v222);
          swift_bridgeObjectRelease();
          sub_1003568F4((uint64_t)v24, v328);
          uint64_t v407 = v328;
          sub_10035665C(v328, (uint64_t)v24);
          unint64_t v332 = (unsigned __int16 *)&v24[*((int *)v410 + 11)];
          LODWORD(v329) = *v332;
          LODWORD(v324) = *((unsigned __int8 *)v332 + 2);
          sub_10036B854((uint64_t)v24, type metadata accessor for NANPeer);
          sub_1002D9168((void *(*)(uint64_t *__return_ptr, __int16 *))sub_10036B8B4, v331, v329 | (v324 << 16));
          uint64_t v333 = v406;
          sub_100356F3C();
          uint64_t v334 = (uint8_t *)v400;
          *unint64_t v400 = 8;
          uint64_t v335 = v405;
          uint64_t v336 = enum case for DispatchTimeInterval.seconds(_:);
          uint64_t v337 = v403;
          uint64_t v412 = *(void *)(v405 + 104);
          ((void (*)(uint8_t *))v412)(v334);
          LOBYTE(v329) = static DispatchTimeInterval.< infix(_:_:)();
          uint64_t v338 = *(void (**)(uint8_t *, uint64_t))(v335 + 8);
          v338(v334, v337);
          v338(v333, v337);
          if ((v329 & 1) == 0
            || (sub_100356CE8((uint64_t)v333),
                *(void *)uint64_t v334 = 3,
                ((void (*)(uint8_t *, uint64_t, uint64_t))v412)(v334, v336, v337),
                BOOL v339 = static DispatchTimeInterval.< infix(_:_:)(),
                v338(v334, v337),
                v338(v333, v337),
                !v339))
          {
            sub_1001344F4((uint64_t)v422, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
            goto LABEL_164;
          }
          sub_100354870();
          unint64_t v340 = v407;
          uint64_t v341 = sub_1002E4574();
          swift_release();
          swift_release();
          sub_1001344F4((uint64_t)v422, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
          if (!v341) {
            goto LABEL_164;
          }
          unint64_t v342 = v409;
          uint64_t v343 = v342 - (v342 & 0x7FFFF);
          if (v342 < (v342 & 0x7FFFF))
          {
            __break(1u);
            goto LABEL_169;
          }
          if (v409 < (v409 & 0x7FFFFF))
          {
LABEL_169:
            __break(1u);
            goto LABEL_170;
          }
          unint64_t v344 = v408;
          uint64_t v345 = v344 - (v344 & 0x7FFFF);
          if (v344 < (v344 & 0x7FFFF))
          {
LABEL_170:
            __break(1u);
            goto LABEL_171;
          }
          unint64_t v346 = v408 & 0x7FFFFF;
          if (v408 < (v408 & 0x7FFFFF))
          {
LABEL_171:
            __break(1u);
            JUMPOUT(0x100362390);
          }
          if (v343 == v345) {
            goto LABEL_164;
          }
          uint64_t v412 = v409 & 0x7FFFFF;
          uint64_t v410 = (uint8_t *)(v409 - (v409 & 0x7FFFFF));
          uint64_t v406 = (uint8_t *)(v408 - (v408 & 0x7FFFFF));
          if (v410 == v406) {
            goto LABEL_164;
          }
          uint64_t v347 = Logger.logObject.getter();
          os_log_type_t v348 = static os_log_type_t.error.getter();
          *(void *)&long long v411 = v347;
          LODWORD(v405) = v348;
          if (!os_log_type_enabled(v347, v348)) {
            goto LABEL_167;
          }
          uint64_t v349 = swift_slowAlloc();
          uint64_t v404 = (unsigned char *)swift_slowAlloc();
          v413[0] = (uint64_t)v404;
          *(_DWORD *)uint64_t v349 = 136317186;
          uint64_t v350 = WiFiAddress.description.getter(v340);
          v420[0] = sub_100010680(v350, v351, v413);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v349 + 12) = 2080;
          uint64_t v352 = NANTimeSynchronizationFunction.description.getter(v408);
          v420[0] = sub_100010680(v352, v353, v413);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v349 + 22) = 2080;
          uint64_t v354 = NANTimeSynchronizationFunction.description.getter(v409);
          v420[0] = sub_100010680(v354, v355, v413);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v349 + 32) = 2080;
          uint64_t v356 = NANTimeSynchronizationFunction.description.getter(v345);
          v420[0] = sub_100010680(v356, v357, v413);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v349 + 42) = 2080;
          uint64_t v358 = NANTimeSynchronizationFunction.description.getter(v343);
          v420[0] = sub_100010680(v358, v359, v413);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v349 + 52) = 2080;
          uint64_t v360 = NANTimeSynchronizationFunction.description.getter((uint64_t)v406);
          v420[0] = sub_100010680(v360, v361, v413);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v349 + 62) = 2080;
          uint64_t v362 = NANTimeSynchronizationFunction.description.getter((uint64_t)v410);
          v420[0] = sub_100010680(v362, v363, v413);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v349 + 72) = 2048;
          v420[0] = v346 >> 19;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v349 + 82) = 2048;
          v420[0] = (unint64_t)v412 >> 19;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v364 = (void *)v411;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v411, (os_log_type_t)v405, "Peer %s not synced.\nTSF: %s:%s\nDW TSF: %s:%s\nDW0 TSF: %s:%s\nDW Count: %ld:%ld\n(Peer:Local)", (uint8_t *)v349, 0x5Cu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

LABEL_164:
          sub_1001344F4((uint64_t)v422, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
          return;
        case 0x13u:
          uint64_t v223 = NANBitmap.Channel.operatingClass.getter(v423);
          swift_retain();
          uint64_t v224 = Logger.logObject.getter();
          os_log_type_t v225 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v224, v225))
          {
            os_log_type_t v226 = (uint8_t *)swift_slowAlloc();
            v424[0] = swift_slowAlloc();
            *(_DWORD *)os_log_type_t v226 = 136315138;
            uint64_t v227 = WiFiInterface.description.getter();
            *(void *)BOOL v414 = sub_100010680(v227, v228, v424);
            uint64_t v37 = v411;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v224, v225, "Attempting to submit low latency statistics for %s", v226, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            swift_release();
          }

          uint64_t v397 = *(unsigned __int8 *)(v223 + 33);
          unint64_t v396 = *(unsigned __int8 *)(v223 + 34);
          unint64_t v250 = *(unsigned __int8 *)(v223 + 35);
          uint64_t v251 = *(unsigned __int8 *)(v223 + 36);
          uint64_t v252 = *(unsigned __int8 *)(v223 + 37);
          id v253 = (uint64_t *)*(unsigned __int8 *)(v223 + 38);
          uint64_t v254 = *(void *)(v223 + 232);
          uint64_t v255 = *(void *)(v223 + 240);
          uint64_t v256 = *(void *)(v223 + 256);
          uint64_t v398 = *(void *)(v223 + 248);
          uint64_t v399 = v256;
          uint64_t v257 = *(void *)(v223 + 272);
          unint64_t v400 = *(void **)(v223 + 264);
          uint64_t v401 = v257;
          uint64_t v258 = *(void *)(v223 + 280);
          long long v259 = *(uint8_t **)(v223 + 296);
          uint64_t v405 = *(void *)(v223 + 288);
          uint64_t v406 = v259;
          uint64_t v260 = *(void *)(v223 + 304);
          unint64_t v409 = *(void *)(v223 + 312);
          uint64_t v412 = *(void *)(v223 + 320);
          *(_OWORD *)uint64_t v421 = *(_OWORD *)v223;
          *(_DWORD *)&v421[15] = *(_DWORD *)(v223 + 15);
          unint64_t v261 = *(void *)(v223 + 328);
          uint64_t v407 = v260;
          unint64_t v408 = v261;
          uint64_t v262 = *(void *)(v223 + 336);
          uint64_t v402 = v258;
          uint64_t v403 = v262;
          memcpy(v420, (const void *)(v223 + 20), 0x144uLL);
          uint64_t v404 = *(unsigned char **)(v223 + 344);
          *(void *)&long long v380 = *(void *)(v223 + 352);
          LODWORD(v379) = *(unsigned __int8 *)(v223 + 360);
          uint64_t v390 = v251;
          uint64_t v391 = (unsigned char *)v250;
          uint64_t v388 = v253;
          uint64_t v389 = v252;
          uint64_t v263 = v397 | (v396 << 8) | (v250 << 16) | (v251 << 24) | (v252 << 32) | ((void)v253 << 40);
          uint64_t v392 = v254;
          swift_bridgeObjectRetain();
          uint64_t v393 = v255;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v264 = v381;
          sub_10035665C(v263, v381);
          uint64_t v265 = v382;
          sub_1000136F4(v264 + *((int *)v410 + 18), v382, &qword_100484D00);
          uint64_t v266 = type metadata accessor for NANAttribute.CustomDeviceInformation(0);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v266 - 8) + 48))(v265, 1, v266) == 1)
          {
            sub_1000380B4(v265, &qword_100484D00);
          }
          else
          {
            int v267 = *(_DWORD *)(v265 + 4);
            sub_10036B854(v265, type metadata accessor for NANAttribute.CustomDeviceInformation);
            if ((*(_DWORD *)NANAttribute.CustomDeviceInformation.Flags.doesNotSupportSimultaneousDualBand.unsafeMutableAddressor() & ~v267) == 0)
            {
              sub_10036B854(v264, type metadata accessor for NANPeer);
              LODWORD(v410) = 1;
              goto LABEL_138;
            }
          }
          uint64_t v268 = *(void *)(v264 + *((int *)v410 + 16) + 8);
          if (v268) {
            BOOL v269 = *(void *)(v268 + 16) < 2uLL;
          }
          else {
            BOOL v269 = 1;
          }
          LODWORD(v410) = v269;
          sub_10036B854(v264, type metadata accessor for NANPeer);
LABEL_138:
          uint64_t v293 = v37 + *(void *)(*(void *)v37 + 680);
          swift_beginAccess();
          uint64_t v294 = *(void *)(v293 + 8);
          if (!v294 || (int v295 = *(unsigned __int8 *)(v293 + 16), (v295 & 1) != 0))
          {
            uint64_t v394 = v380;
            LODWORD(v395) = v379;
          }
          else
          {
            uint64_t v404 = *(unsigned char **)v293;
            uint64_t v296 = v294;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v297 = *(void *)(v293 + 8);
            LODWORD(v395) = v295;
            uint64_t v394 = v296;
            if (v297) {
              *(unsigned char *)(v293 + 16) = 1;
            }
          }
          int v298 = *(_DWORD *)v223;
          char v299 = *(unsigned char *)(v223 + 4);
          char v300 = *(unsigned char *)(v223 + 5);
          int v301 = *(unsigned __int16 *)(v223 + 16);
          int v302 = *(unsigned __int8 *)(v223 + 18);
          int v366 = *(unsigned __int8 *)(v223 + 6);
          int v367 = v302;
          int v370 = *(_DWORD *)(v223 + 28);
          int v303 = *(unsigned __int8 *)(v223 + 32);
          int v368 = v301;
          int v369 = v303;
          int v373 = *(_DWORD *)(v223 + 48);
          long long v385 = *(_OWORD *)(v223 + 56);
          long long v304 = *(_OWORD *)(v223 + 72);
          long long v381 = *(_OWORD *)(v223 + 88);
          long long v382 = v304;
          long long v305 = *(_OWORD *)(v223 + 104);
          long long v379 = *(_OWORD *)(v223 + 120);
          long long v380 = v305;
          long long v306 = *(_OWORD *)(v223 + 136);
          long long v377 = *(_OWORD *)(v223 + 152);
          long long v378 = v306;
          long long v307 = *(_OWORD *)(v223 + 168);
          long long v375 = *(_OWORD *)(v223 + 184);
          long long v376 = v307;
          long long v374 = *(_OWORD *)(v223 + 200);
          uint64_t v308 = *(void *)(v223 + 216);
          uint64_t v371 = *(void *)(v223 + 224);
          uint64_t v372 = v308;
          uint64_t v309 = AssociatedConformanceWitness;
          uint64_t v310 = *(void (**)(void, uint64_t))(AssociatedConformanceWitness + 144);
          *(void *)&long long v411 = swift_checkMetadataState();
          uint64_t v311 = *(void *)(v223 + 8);
          uint64_t v312 = *(void *)(v223 + 20);
          uint64_t v313 = *(void *)(v223 + 40);
          v310(v411, v309);
          LODWORD(v413[0]) = v298;
          BYTE4(v413[0]) = v299;
          BYTE5(v413[0]) = v300;
          BYTE6(v413[0]) = v366;
          LOWORD(v413[2]) = v368;
          BYTE2(v413[2]) = v367;
          HIDWORD(v413[3]) = v370;
          LOBYTE(v413[4]) = v369;
          BYTE1(v413[4]) = v397;
          BYTE2(v413[4]) = v396;
          BYTE3(v413[4]) = (_BYTE)v391;
          BYTE4(v413[4]) = v390;
          BYTE5(v413[4]) = v389;
          BYTE6(v413[4]) = (_BYTE)v388;
          LODWORD(v413[6]) = v373;
          v413[27] = v372;
          v413[28] = v371;
          v413[1] = v311;
          BYTE3(v413[2]) = (_BYTE)v410;
          *(uint64_t *)((char *)&v413[2] + 4) = v312;
          v413[5] = v313;
          *(_OWORD *)&v413[7] = v385;
          *(_OWORD *)&v413[9] = v382;
          *(_OWORD *)&v413[11] = v381;
          *(_OWORD *)&v413[13] = v380;
          *(_OWORD *)&v413[15] = v379;
          *(_OWORD *)&v413[17] = v378;
          *(_OWORD *)&v413[19] = v377;
          *(_OWORD *)&v413[21] = v376;
          *(_OWORD *)&v413[23] = v375;
          *(_OWORD *)&v413[25] = v374;
          v413[29] = v392;
          v413[30] = v393;
          v413[31] = v398;
          v413[32] = v399;
          v413[33] = (uint64_t)v400;
          v413[34] = v401;
          v413[35] = v402;
          v413[36] = v405;
          v413[37] = (uint64_t)v406;
          v413[38] = v407;
          v413[39] = v409;
          v413[40] = v412;
          v413[41] = v408;
          v413[42] = v403;
          v413[43] = (uint64_t)v404;
          v413[44] = v394;
          LOBYTE(v413[45]) = v395;
          memcpy(v424, v413, 0x169uLL);
          sub_1001343E8((uint64_t)v413);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v314 = v384;
          uint64_t v315 = swift_getAssociatedConformanceWitness();
          unint64_t v316 = (unsigned char *)v386;
          (*(void (**)(uint64_t *, uint64_t, uint64_t))(v315 + 16))(v424, v314, v315);
          sub_10036B760((uint64_t)v413);
          (*(void (**)(unsigned char *, uint64_t))(v383 + 8))(v316, v314);
          *(_OWORD *)BOOL v414 = *(_OWORD *)v421;
          *(_DWORD *)&v414[15] = *(_DWORD *)&v421[15];
          char v415 = (char)v410;
          memcpy(v416, v420, sizeof(v416));
          v417 = v404;
          uint64_t v418 = v394;
          char v419 = v395;
          sub_10036B760((uint64_t)v414);
          return;
        case 0x15u:
          LODWORD(v229) = *(unsigned __int8 *)NANBitmap.Channel.operatingClass.getter(v423);
          swift_retain_n();
          uint64_t v230 = Logger.logObject.getter();
          os_log_type_t v231 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v230, v231))
          {
            uint64_t v232 = swift_slowAlloc();
            uint64_t v233 = swift_slowAlloc();
            v424[0] = v233;
            *(_DWORD *)uint64_t v232 = 136315394;
            LODWORD(v412) = v229;
            uint64_t v410 = (uint8_t *)v233;
            if (v229)
            {
              if (v229 == 1)
              {
                unint64_t v234 = 0xE500000000000000;
                uint64_t v235 = 0x7A48472035;
              }
              else
              {
                uint64_t v235 = 0x7A48472036;
                unint64_t v234 = 0xE500000000000000;
              }
            }
            else
            {
              unint64_t v234 = 0xE700000000000000;
              uint64_t v235 = 0x7A484720342E32;
            }
            *(void *)BOOL v414 = sub_100010680(v235, v234, v424);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v232 + 12) = 2080;
            uint64_t v229 = WiFiInterface.description.getter();
            unint64_t v318 = v317;
            swift_release();
            *(void *)BOOL v414 = sub_100010680(v229, v318, v424);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v230, v231, "Attempting to update soft AP band to %s for %s", (uint8_t *)v232, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            LOBYTE(v229) = v412;
          }
          else
          {

            swift_release_n();
          }
          swift_unownedRetainStrong();
          sub_10033C4E4(v229);
LABEL_31:
          swift_release();
          return;
        default:
          uint64_t v186 = NANBitmap.Channel.operatingClass.getter(v423);
          __int16 v187 = *(_WORD *)(v186 + 4);
          int v188 = *(_DWORD *)v186;
          uint64_t v189 = v399;
          sub_100359444(v399);
          uint64_t v190 = v189 + *(int *)(v408 + 40);
          *(_DWORD *)uint64_t v190 = v188;
          *(_WORD *)(v190 + 4) = v187;
          sub_1003594AC(v189);
          return;
      }
  }
}

uint64_t sub_100362418(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    if (sub_100336530())
    {
      swift_unownedRetainStrong();
      sub_1003625D0();
      swift_release();
      swift_unownedRetainStrong();
      sub_100362910();
      swift_release();
      swift_unownedRetainStrong();
      sub_100362BA4();
      swift_release();
      swift_unownedRetainStrong();
      uint64_t v5 = *(void *)(a4 + *(void *)(*(void *)a4 + 456));
      if (v5)
      {
        swift_retain();
        swift_release();
        (*(void (**)(void))(*(void *)v5 + 192))(0);
      }
      swift_release();
      swift_unownedRetainStrong();
      sub_1003631BC();
      return swift_release();
    }
    else
    {
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v8 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "Refusing request to enable NAN because Wi-Fi is powered off", v8, 2u);
        swift_slowDealloc();
      }

      sub_10000F000();
      swift_allocError();
      *(_OWORD *)uint64_t v9 = xmmword_1003B0090;
      *(unsigned char *)(v9 + 16) = 1;
      return swift_willThrow();
    }
  }
  return result;
}

void sub_1003625D0()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v0 = type metadata accessor for Preferences();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v17 - v2;
  WiFiInterface.linkState.setter(1);
  WiFiInterface.preferences.getter();
  uint64_t v4 = Preferences.nanMACAddress.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if ((v4 & 0x1000000000000) != 0) {
    static WiFiAddress.random()();
  }
  WiFiAddress.linkLocalAddress()(v5);
  WiFiInterface.macAddress.setter(v6 & 0xFFFFFFFFFFFFLL);
  sub_100010BCC((uint64_t *)&unk_1004882C0);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1003B2450;
  uint64_t v8 = WiFiInterface.macAddress.getter();
  *(void *)(v7 + 32) = WiFiAddress.ipv6LinkLocalAddress.getter(v8 & 0xFFFFFFFFFFFFLL);
  *(void *)(v7 + 40) = v9;
  *(void *)(v7 + 48) = v10;
  *(void *)(v7 + 56) = v11;
  WiFiInterface.ipv6Addresses.setter(v7);
  swift_retain();
  unint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315138;
    uint64_t v15 = WiFiInterface.description.getter();
    uint64_t v17 = sub_100010680(v15, v16, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Updated %s", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release();
  }
}

void sub_100362910()
{
  uint64_t v1 = *(void *)(v0 + *(void *)(*(void *)v0 + 448));
  if (v1)
  {
    uint64_t v2 = *(void (**)(uint64_t))(*(void *)v1 + 192);
    swift_retain();
    v2(1);
    uint64_t v3 = WiFiInterface.macAddress.getter();
    (*(void (**)(uint64_t))(*(void *)v1 + 240))(v3 & 0xFFFFFFFFFFFFLL);
    sub_100010BCC((uint64_t *)&unk_1004882C0);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_1003B2450;
    uint64_t v5 = (*(uint64_t (**)(void))(*(void *)v1 + 232))();
    *(void *)(v4 + 32) = WiFiAddress.ipv6LinkLocalAddress.getter(v5 & 0xFFFFFFFFFFFFLL);
    *(void *)(v4 + 40) = v6;
    *(void *)(v4 + 48) = v7;
    *(void *)(v4 + 56) = v8;
    (*(void (**)(uint64_t))(*(void *)v1 + 336))(v4);
    swift_retain();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315138;
      uint64_t v12 = WiFiInterface.description.getter();
      sub_100010680(v12, v13, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Updated %s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
    }
    else
    {

      swift_release_n();
    }
  }
}

uint64_t sub_100362BA4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  swift_getAssociatedTypeWitness();
  uint64_t v33 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v30 - v5;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = type metadata accessor for Preferences();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t result = __chkstk_darwin();
  uint64_t v11 = (char *)&v30 - v10;
  uint64_t v12 = *(void *)((char *)v0 + *(void *)(v2 + 456));
  if (v12)
  {
    uint64_t v31 = v4;
    uint64_t v32 = AssociatedTypeWitness;
    unint64_t v13 = *(void (**)(uint64_t))(*(void *)v12 + 192);
    swift_retain();
    v13(1);
    WiFiInterface.preferences.getter();
    unint64_t v14 = Preferences.nanDataMACAddress.getter();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    if ((v14 & 0x1000000000000) != 0)
    {
      unint64_t v16 = (char *)v1 + *(void *)(*v1 + 464);
      if (v16[6])
      {
        uint64_t v17 = *(void *)((char *)v1 + *(void *)(*v1 + 688));
        swift_unownedRetainStrong();
        uint64_t v19 = v31;
        uint64_t v18 = v32;
        (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v6, v17 + *(void *)(*(void *)v17 + 96), v32);
        swift_release();
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 64))(v18, AssociatedConformanceWitness);
        (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v18);
        if ((v21 & 0x1000000000000) != 0) {
          unint64_t v23 = static WiFiAddress.random()();
        }
        else {
          WiFiAddress.lastOctetIncremented()(v22);
        }
        unint64_t v15 = v23 >> 40;
      }
      else
      {
        LODWORD(v15) = HIBYTE(*((unsigned __int16 *)v16 + 2));
      }
    }
    else
    {
      unint64_t v15 = v14 >> 40;
    }
    WiFiAddress.linkLocalAddress()((CoreP2P::WiFiAddress *)((unint64_t)v15 << 40));
    (*(void (**)(uint64_t))(*(void *)v12 + 240))(v24 & 0xFFFFFFFFFFFFLL);
    swift_retain();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136315138;
      uint64_t v28 = WiFiInterface.description.getter();
      uint64_t v34 = sub_100010680(v28, v29, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Updated %s", v27, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return swift_release();
    }
    else
    {

      return swift_release_n();
    }
  }
  return result;
}

uint64_t sub_1003631BC()
{
  uint64_t v2 = v0;
  uint64_t v3 = *v0;
  sub_100010BCC(&qword_100485280);
  __chkstk_darwin();
  uint64_t v86 = (char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NANDriverCapabilities();
  __chkstk_darwin();
  uint64_t v6 = (char *)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(v3 + 664);
  LOBYTE(v5) = *((unsigned char *)v0 + v7);
  uint64_t v87 = v3;
  if (v5)
  {
    uint64_t v83 = v1;
  }
  else
  {
    swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40);
    uint64_t v10 = swift_checkMetadataState();
    v9(v10, AssociatedConformanceWitness);
    if (v1)
    {
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v11, v12))
      {
        unint64_t v13 = (uint8_t *)swift_slowAlloc();
        unint64_t v14 = (void *)swift_slowAlloc();
        *(_DWORD *)unint64_t v13 = 138412290;
        swift_errorRetain();
        uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)&long long v88 = v15;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v14 = v15;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "Failed to initialize and configure NAN: %@", v13, 0xCu);
        sub_100010BCC(&qword_10047CC30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      return swift_willThrow();
    }
    uint64_t v83 = 0;
    uint64_t v16 = (uint64_t)v0 + *(void *)(*v0 + 656);
    swift_beginAccess();
    sub_10036B534((uint64_t)v6, v16);
    swift_endAccess();
    *((unsigned char *)v2 + v7) = 1;
  }
  uint64_t v17 = WiFiInterface.capabilities.getter();
  unint64_t v84 = WiFiDriverCapabilities.supportsSimultaneousDualBand.unsafeMutableAddressor();
  uint64_t v18 = *v84;
  int16x8_t v92 = (objc_class *)v17;
  *(void *)&long long v88 = v18;
  unint64_t v19 = sub_1002C8868();
  swift_bridgeObjectRetain_n();
  unint64_t v85 = v19;
  ExtendableOptionSet.formIntersection(_:)((uint64_t)&v92, (uint64_t)&type metadata for WiFiDriverCapabilities, v19);
  char v20 = sub_1000956AC(v88, v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v21 = sub_100358CE8();
  uint64_t v22 = (objc_class *)static Array<A>.potentialAvailability(using:supportsSimultaneousDualBand:for:)(0, v20 & 1, v21);
  swift_bridgeObjectRelease();
  sub_100357128(v22);
  if (*(void *)(sub_10036AFA0() + 16))
  {
    uint64_t v23 = (uint64_t)v86;
  }
  else
  {
    swift_unownedRetainStrong();
    sub_1003366E8();
    uint64_t v25 = v24;
    uint64_t v27 = v26;
    swift_release();
    if (v25) {
      swift_bridgeObjectRelease();
    }
    else {
      uint64_t v27 = 0x300000000;
    }
    uint64_t v29 = *v2;
    uint64_t v30 = *(void *)(*v2 + 552);
    uint64_t v31 = (uint64_t)v2 + *(int *)(sub_100010BCC(&qword_100487C90) + 40) + v30;
    LODWORD(v30) = *(_DWORD *)v31;
    __int16 v32 = *(_WORD *)(v31 + 4);
    uint64_t v33 = *(void *)(v29 + 560);
    uint64_t v34 = (unsigned int *)((char *)v2 + *(int *)(sub_100010BCC(&qword_100487C88) + 40) + v33);
    unsigned int v35 = *v34;
    LOWORD(v34) = *((_WORD *)v34 + 2);
    LODWORD(v92) = v30;
    WORD2(v92) = v32;
    unsigned __int16 v94 = (unsigned __int16)v34;
    unsigned int v93 = v35;
    unsigned __int16 v96 = WORD2(v27);
    unsigned int v95 = v27;
    uint64_t v97 = _swiftEmptyArrayStorage;
    uint64_t v36 = sub_100358CE8();
    RadioResources.SymbolicChannel.Resolver.update(preferredChannels:)((Swift::OpaquePointer)v36);
    swift_bridgeObjectRelease();
    int v80 = (int)v92;
    int v79 = WORD2(v92);
    uint64_t v82 = v93;
    uint64_t v77 = v94;
    uint64_t v81 = v95;
    uint64_t v76 = v96;
    os_log_type_t v78 = v97;
    uint64_t v74 = (uint64_t)v2 + *(void *)(*v2 + 96);
    swift_getAssociatedTypeWitness();
    uint64_t v37 = swift_getAssociatedConformanceWitness();
    unint64_t v38 = *(uint64_t (**)(uint64_t, uint64_t))(v37 + 8);
    uint64_t v39 = swift_checkMetadataState();
    unint64_t v40 = (objc_class *)v38(v39, v37);
    uint64_t v41 = *WiFiDriverCapabilities.supportsDualBand.unsafeMutableAddressor();
    v100.Class isa = v40;
    *(void *)&long long v88 = v41;
    swift_bridgeObjectRetain_n();
    uint64_t v42 = v85;
    ExtendableOptionSet.formIntersection(_:)((uint64_t)&v100, (uint64_t)&type metadata for WiFiDriverCapabilities, v85);
    int v75 = sub_1000956AC(v88, v41);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v43 = (objc_class *)v38(v39, v37);
    uint64_t v44 = *v84;
    v100.Class isa = v43;
    *(void *)&long long v88 = v44;
    swift_bridgeObjectRetain_n();
    ExtendableOptionSet.formIntersection(_:)((uint64_t)&v100, (uint64_t)&type metadata for WiFiDriverCapabilities, v42);
    LOBYTE(v40) = sub_1000956AC(v88, v44);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)&long long v88 = &_swiftEmptyDictionarySingleton;
    BYTE8(v88) = v75 & 1;
    BYTE9(v88) = v40 & 1;
    LODWORD(v89) = v80;
    WORD2(v89) = v79;
    WORD6(v89) = v77;
    DWORD2(v89) = v82;
    WORD2(v90) = v76;
    LODWORD(v90) = v81;
    *((void *)&v90 + 1) = v78;
    uint64x2_t v91 = _swiftEmptyArrayStorage;
    char v45 = TimeBitmap.primaryDiscoveryWindow.unsafeMutableAddressor();
    RadioSchedule.set(_:to:with:)(*v45, v45[1], v45[2], 0, 2, 3, (uint64_t)&type metadata for RadioResourceSchedule, (uint64_t)&off_100485830);
    char v46 = *(unsigned char *)TimeBitmap.Slot.OF.unsafeMutableAddressor();
    char v47 = (char *)TimeBitmap.Slot.OO.unsafeMutableAddressor();
    uint64_t v48 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(v46, *v47, *v47, *v47);
    RadioSchedule.set(_:to:with:)(v48, v49, v50, 0, 2, 3, (uint64_t)&type metadata for RadioResourceSchedule, (uint64_t)&off_100485830);
    if (BYTE9(v88))
    {
      uint64_t v51 = (char *)TimeBitmap.Slot.FF.unsafeMutableAddressor();
      char v52 = *v47;
      char v53 = *v51;
      char v54 = v53;
    }
    else
    {
      char v55 = *v47;
      os_log_type_t v56 = (char *)TimeBitmap.Slot.FF.unsafeMutableAddressor();
      char v52 = *v47;
      char v54 = *v56;
      char v53 = v55;
    }
    uint64_t v57 = static TimeBitmap.repeatingPerDW(_:_:_:_:)(v53, v54, v52, v52);
    uint64_t v23 = (uint64_t)v86;
    RadioSchedule.set(_:to:with:)(v57, v58, v59, 1, 2, 3, (uint64_t)&type metadata for RadioResourceSchedule, (uint64_t)&off_100485830);
    v98[0] = v88;
    v98[1] = v89;
    v98[2] = v90;
    uint64_t v99 = v91;
    uint64_t v60 = sub_1002C1B60();
    sub_1002C871C((uint64_t)v98);
    uint64_t v61 = (objc_class *)sub_10036AB6C(v60, (char *)v98);
    sub_1002C86D4((uint64_t)v98);
    swift_bridgeObjectRelease();
    sub_1002C86D4((uint64_t)v98);
    sub_1003565E8(v61);
  }
  swift_getAssociatedTypeWitness();
  uint64_t v62 = swift_getAssociatedConformanceWitness();
  unint64_t v63 = *(uint64_t (**)(uint64_t, uint64_t))(v62 + 32);
  uint64_t v64 = swift_checkMetadataState();
  char v65 = v63(v64, v62);
  char v66 = (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 24))(v64, v62);
  uint64_t v67 = WiFiInterface.capabilities.getter();
  uint64_t v68 = *v84;
  int16x8_t v92 = (objc_class *)v67;
  *(void *)&long long v88 = v68;
  swift_bridgeObjectRetain_n();
  ExtendableOptionSet.formIntersection(_:)((uint64_t)&v92, (uint64_t)&type metadata for WiFiDriverCapabilities, v85);
  LOBYTE(v63) = sub_1000956AC(v88, v68);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v63) {
    int v69 = 0;
  }
  else {
    int v69 = *(_DWORD *)NANAttribute.CustomDeviceInformation.Flags.doesNotSupportSimultaneousDualBand.unsafeMutableAddressor();
  }
  uint64_t v70 = type metadata accessor for NANAttribute.CustomDeviceInformation(0);
  NANAttribute.CustomDeviceInformation.CustomAttributes.init()(v23 + *(int *)(v70 + 28));
  *(unsigned char *)uint64_t v23 = v65;
  *(unsigned char *)(v23 + 1) = v66;
  *(_DWORD *)(v23 + 4) = v69;
  uint64_t v71 = type metadata accessor for NANAttribute(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v71 - 8) + 56))(v23, 0, 1, v71);
  uint64_t v72 = (uint64_t)v2 + *(void *)(*v2 + 592);
  swift_beginAccess();
  uint64_t v73 = sub_100010BCC(&qword_100487CF0);
  int16x8_t v92 = *(objc_class **)(v72 + *(int *)(v73 + 40));
  swift_bridgeObjectRetain();
  sub_100354930(v23, 45);
  v100.Class isa = v92;
  MutableDriverProperty.wrappedValue.setter(&v100, v73);
  return swift_endAccess();
}

uint64_t sub_100363CC0(uint64_t result, uint64_t a2)
{
  if (result)
  {
    swift_unownedRetainStrong();
    uint64_t v4 = *(void *)(a2 + *(void *)(*(void *)a2 + 456));
    if (v4)
    {
      swift_retain();
      swift_release();
      (*(void (**)(void))(*(void *)v4 + 192))(0);
    }
    swift_release();
    swift_unownedRetainStrong();
    uint64_t v5 = *(void *)(a2 + *(void *)(*(void *)a2 + 448));
    if (v5)
    {
      swift_retain();
      swift_release();
      (*(void (**)(void))(*(void *)v5 + 192))(0);
    }
    swift_release();
    swift_unownedRetainStrong();
    WiFiInterface.linkState.setter(0);
    return swift_release();
  }
  return result;
}

uint64_t sub_100363DD8(char a1, uint64_t a2)
{
  int v4 = a1 & 1;
  uint64_t v5 = type metadata accessor for DispatchTime();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unownedRetainStrong();
  type metadata accessor for P2PTimer();
  variable initialization expression of AWDLPeer.lastUpdated();
  uint64_t v9 = a2 + *(void *)(*(void *)a2 + 672);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 40))(v9, v8, v5);
  swift_endAccess();
  swift_release();
  swift_unownedRetainStrong();
  sub_100364010(v4);
  uint64_t result = swift_release();
  if ((a1 & 1) == 0)
  {
    swift_unownedRetainStrong();
    uint64_t v11 = *(void *)(a2 + *(void *)(*(void *)a2 + 448));
    if (v11)
    {
      swift_retain();
      swift_release();
      (*(void (**)(void))(*(void *)v11 + 192))(0);
    }
    swift_release();
    swift_unownedRetainStrong();
    uint64_t v12 = *(void *)(a2 + *(void *)(*(void *)a2 + 456));
    if (v12)
    {
      swift_retain();
      swift_release();
      (*(void (**)(void))(*(void *)v12 + 192))(0);
    }
    swift_release();
    swift_unownedRetainStrong();
    WiFiInterface.linkState.setter(0);
    return swift_release();
  }
  return result;
}

void sub_100364010(int a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void (***)(void (**)(char *, uint64_t), uint64_t, char *))(v7 - 8);
  __chkstk_darwin();
  uint64_t v61 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  int v60 = a1;
  uint64_t v62 = AssociatedTypeWitness;
  if (a1)
  {
    uint64_t v61 = (char *)v7;
    uint64_t v58 = (void (**)(char *, uint64_t))((char *)&v56 - v10);
    uint64_t v59 = AssociatedConformanceWitness;
    if (((unint64_t)" committed availability" & 0x1000000000000000) != 0)
    {
      sub_100010BCC((uint64_t *)&unk_100487D10);
      _StringGuts._slowWithCString<A>(_:)();
      uint64_t v36 = v65;
    }
    else
    {
      __chkstk_darwin();
      *(&v56 - 2) = (uint64_t)sub_1002BCC6C;
      *(&v56 - 1) = 0;
      if (((unint64_t)" committed availability" & 0x2000000000000000) != 0)
      {
        unint64_t v65 = 0xD000000000000022;
        unint64_t v66 = (unint64_t)" committed availability" & 0xFFFFFFFFFFFFFFLL;
        uint64_t v36 = os_transaction_create();
      }
      else
      {
        uint64_t v36 = sub_100068878(((unint64_t)" committed availability" & 0xFFFFFFFFFFFFFFFLL) + 32, 34, (uint64_t (*)(void))sub_1002C0EEC);
      }
    }
    *(void *)((char *)v2 + *(void *)(*v2 + 472)) = v36;
    swift_unknownObjectRelease();
    uint64_t v37 = *(void **)((char *)v2 + *(void *)(*v2 + 480));
    [v37 registerClient:39 queue:*OS_dispatch_queue.nan.unsafeMutableAddressor()];
    [v37 setNANEnabled:1];
    uint64_t v38 = *(void *)((char *)v2 + *(void *)(*v2 + 688));
    swift_unownedRetainStrong();
    uint64_t v39 = v58;
    unint64_t v40 = v61;
    v8[2](v58, v38 + *(void *)(*(void *)v38 + 96), v61);
    swift_release();
    swift_getAssociatedTypeWitness();
    uint64_t v41 = swift_getAssociatedConformanceWitness();
    uint64_t v42 = *(uint64_t (**)(uint64_t, uint64_t))(v41 + 32);
    uint64_t v43 = swift_checkMetadataState();
    uint64_t v44 = v42(v43, v41);
    uint64_t v45 = swift_getAssociatedConformanceWitness();
    (*(void (**)(uint64_t, uint64_t, char *, uint64_t))(v45 + 136))(v44, 1, v40, v45);
    ((void (*)(void, char *))v8[1])(v39, v40);
  }
  else
  {
    uint64_t v11 = (void *)((char *)v2 + *(void *)(v4 + 440));
    swift_beginAccess();
    void *v11 = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease();
    sub_100358DC4();
    uint64_t v12 = (void *)((char *)v2 + *(void *)(*v2 + 432));
    swift_beginAccess();
    *uint64_t v12 = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease();
    type metadata accessor for NANDiscoveryEngine();
    uint64_t v13 = swift_retain();
    uint64_t v14 = sub_1002FEE5C(v13);
    swift_release();
    *(void *)((char *)v2 + *(void *)(*v2 + 632)) = v14;
    swift_release();
    type metadata accessor for NANOutOfBoundActionFrameTransmitter();
    uint64_t v15 = swift_retain();
    uint64_t v16 = sub_100335D44(v15);
    swift_release();
    *(void *)((char *)v2 + *(void *)(*v2 + 640)) = v16;
    swift_release();
    uint64_t v17 = *(void *)(*v2 + 616);
    uint64_t v18 = *((unsigned __int8 *)v2 + v17);
    *((unsigned char *)v2 + v17) = 5;
    sub_1003596A4(v18);
    unint64_t v19 = (char *)v2 + *(void *)(*v2 + 624);
    *(void *)unint64_t v19 = 0;
    unsigned char v19[8] = 1;
    unint64_t v20 = sub_100297404((uint64_t)_swiftEmptyArrayStorage);
    sub_100356A44(v20);
    *(void *)((char *)v2 + *(void *)(*v2 + 472)) = 0;
    swift_unknownObjectRelease();
    uint64_t v21 = *(void **)((char *)v2 + *(void *)(*v2 + 480));
    [v21 setNANEnabled:0];
    [v21 unregisterClient];
    uint64_t v22 = *(void *)(*v2 + 688);
    uint64_t v57 = 0;
    uint64_t v23 = *(void *)((char *)v2 + v22);
    swift_unownedRetainStrong();
    uint64_t v24 = v23 + *(void *)(*(void *)v23 + 96);
    uint64_t v58 = (void (**)(char *, uint64_t))v8;
    v8[2]((void (**)(char *, uint64_t))v61, v24, (char *)v7);
    swift_release();
    swift_getAssociatedTypeWitness();
    uint64_t v25 = swift_getAssociatedConformanceWitness();
    uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t))(v25 + 32);
    uint64_t v27 = swift_checkMetadataState();
    uint64_t v28 = v26(v27, v25);
    uint64_t v29 = swift_getAssociatedConformanceWitness();
    uint64_t v30 = v57;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v29 + 136))(v28, 0, v7, v29);
    if (v30)
    {
      v58[1](v61, v7);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = (uint8_t *)swift_slowAlloc();
        uint64_t v34 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v33 = 138412290;
        swift_errorRetain();
        uint64_t v35 = _swift_stdlib_bridgeErrorToNSError();
        v64[0] = v35;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v34 = v35;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "Failed to notify NAN disabled to infrastructure: %@", v33, 0xCu);
        sub_100010BCC(&qword_10047CC30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();

        swift_errorRelease();
        swift_errorRelease();
      }
    }
    else
    {
      v58[1](v61, v7);
    }
    char v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Attempting to update soft AP band to 5G on disabling NAN", v48, 2u);
      swift_slowDealloc();
    }

    swift_unownedRetainStrong();
    sub_10033C4E4(1);
    swift_release();
  }
  swift_retain();
  uint64_t v49 = Logger.logObject.getter();
  os_log_type_t v50 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v49, v50))
  {
    uint64_t v51 = swift_slowAlloc();
    v64[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v51 = 136315394;
    uint64_t v52 = WiFiInterface.description.getter();
    uint64_t v63 = sub_100010680(v52, v53, v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v51 + 12) = 2080;
    if (v60) {
      uint64_t v54 = 0x64656C62616E65;
    }
    else {
      uint64_t v54 = 0x64656C6261736964;
    }
    if (v60) {
      unint64_t v55 = 0xE700000000000000;
    }
    else {
      unint64_t v55 = 0xE800000000000000;
    }
    uint64_t v63 = sub_100010680(v54, v55, v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v49, v50, "%s %s NAN", (uint8_t *)v51, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release();
  }
}

uint64_t sub_100364C98()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();

  swift_release();
  sub_1000380B4(v0 + *(void *)(*(void *)v0 + 504), &qword_10047DB90);
  sub_1000380B4(v0 + *(void *)(*(void *)v0 + 512), &qword_10047DB90);
  sub_1000380B4(v0 + *(void *)(*(void *)v0 + 520), &qword_100487C80);
  sub_1000380B4(v0 + *(void *)(*(void *)v0 + 528), (uint64_t *)&unk_100487CB0);
  sub_1000380B4(v0 + *(void *)(*(void *)v0 + 536), (uint64_t *)&unk_100487D00);
  sub_1000380B4(v0 + *(void *)(*(void *)v0 + 544), &qword_100487C98);
  sub_1000380B4(v0 + *(void *)(*(void *)v0 + 552), &qword_100487C90);
  sub_1000380B4(v0 + *(void *)(*(void *)v0 + 560), &qword_100487C88);
  sub_1000380B4(v0 + *(void *)(*(void *)v0 + 568), &qword_100487CF8);
  sub_1000380B4(v0 + *(void *)(*(void *)v0 + 576), &qword_100487CA8);
  sub_1000380B4(v0 + *(void *)(*(void *)v0 + 584), (uint64_t *)&unk_100487A80);
  sub_1000380B4(v0 + *(void *)(*(void *)v0 + 592), &qword_100487CF0);
  sub_1000380B4(v0 + *(void *)(*(void *)v0 + 600), &qword_100487CE8);
  sub_1000380B4(v0 + *(void *)(*(void *)v0 + 608), &qword_100487CE8);
  swift_release();
  swift_release();
  swift_release();
  sub_10036B854(v0 + *(void *)(*(void *)v0 + 656), (uint64_t (*)(void))type metadata accessor for NANDriverCapabilities);
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 672);
  uint64_t v2 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();

  return swift_unownedRelease();
}

uint64_t sub_1003650C4()
{
  swift_retain();
  uint64_t v0 = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v0, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 136315138;
    uint64_t v3 = WiFiInterface.description.getter();
    sub_100010680(v3, v4, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v0, v1, "Destroyed %s", v2, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  uint64_t v5 = WiFiInterface.deinit();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();

  swift_release();
  sub_1000380B4(v5 + *(void *)(*(void *)v5 + 504), &qword_10047DB90);
  sub_1000380B4(v5 + *(void *)(*(void *)v5 + 512), &qword_10047DB90);
  sub_1000380B4(v5 + *(void *)(*(void *)v5 + 520), &qword_100487C80);
  sub_1000380B4(v5 + *(void *)(*(void *)v5 + 528), (uint64_t *)&unk_100487CB0);
  sub_1000380B4(v5 + *(void *)(*(void *)v5 + 536), (uint64_t *)&unk_100487D00);
  sub_1000380B4(v5 + *(void *)(*(void *)v5 + 544), &qword_100487C98);
  sub_1000380B4(v5 + *(void *)(*(void *)v5 + 552), &qword_100487C90);
  sub_1000380B4(v5 + *(void *)(*(void *)v5 + 560), &qword_100487C88);
  sub_1000380B4(v5 + *(void *)(*(void *)v5 + 568), &qword_100487CF8);
  sub_1000380B4(v5 + *(void *)(*(void *)v5 + 576), &qword_100487CA8);
  sub_1000380B4(v5 + *(void *)(*(void *)v5 + 584), (uint64_t *)&unk_100487A80);
  sub_1000380B4(v5 + *(void *)(*(void *)v5 + 592), &qword_100487CF0);
  sub_1000380B4(v5 + *(void *)(*(void *)v5 + 600), &qword_100487CE8);
  sub_1000380B4(v5 + *(void *)(*(void *)v5 + 608), &qword_100487CE8);
  swift_release();
  swift_release();
  swift_release();
  sub_10036B854(v5 + *(void *)(*(void *)v5 + 656), (uint64_t (*)(void))type metadata accessor for NANDriverCapabilities);
  uint64_t v6 = v5 + *(void *)(*(void *)v5 + 672);
  uint64_t v7 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_unownedRelease();
  return v5;
}

uint64_t sub_100365644()
{
  sub_1003650C4();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for NANInterface()
{
  return sub_100038354();
}

uint64_t sub_1003656B0(uint64_t *a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v7 = (uint64_t *)(a4 + *(void *)(*(void *)a4 + 440));
  swift_beginAccess();
  uint64_t v8 = *v7;
  *uint64_t v7 = 0x8000000000000000;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    sub_1003A3ED4();
    uint64_t result = swift_bridgeObjectRelease();
  }
  if (v5 < 0 || v5 >= 1 << *(unsigned char *)(v8 + 32))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (((*(void *)(v8 + 8 * ((unint64_t)v5 >> 6) + 64) >> v5) & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (*(_DWORD *)(v8 + 36) == v6)
  {
    uint64_t v10 = *(void *)(v8 + 56);
    uint64_t v11 = type metadata accessor for NANPeer(0);
    a2(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v5);
    *uint64_t v7 = v8;
    swift_endAccess();
    return sub_100358DC4();
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_1003657F0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return result;
  }
  uint64_t v8 = result + *(void *)(*(void *)result + 432);
  swift_beginAccess();
  uint64_t v9 = a3 & 0xFFFFFFFFFFFFLL;
  uint64_t v10 = sub_100355CC8(v29, a3 & 0xFFFFFFFFFFFFLL);
  if (!*v11)
  {
    ((void (*)(void *, void))v10)(v29, 0);
LABEL_8:
    swift_endAccess();
    goto LABEL_9;
  }
  uint64_t v12 = sub_100355D28(v28, a4);
  if (!*v13)
  {
    ((void (*)(void *, void))v12)(v28, 0);
    ((void (*)(void *, void))v10)(v29, 0);
    goto LABEL_8;
  }
  uint64_t v14 = sub_10036716C(a1 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_id);
  ((void (*)(void *, void))v12)(v28, 0);
  ((void (*)(void *, void))v10)(v29, 0);
  swift_endAccess();
  if (v14) {
    sub_100011E30(v14);
  }
LABEL_9:
  swift_beginAccess();
  uint64_t v15 = *(void *)v8;
  if (*(void *)(*(void *)v8 + 16))
  {
    unint64_t v16 = sub_100031214(v9);
    if (v17)
    {
      uint64_t v18 = *(void *)(*(void *)(v15 + 56) + 8 * v16);
      if (*(void *)(v18 + 16))
      {
        unint64_t v19 = sub_10039F7B4(a4);
        if (v20)
        {
          uint64_t v21 = *(void *)(*(void *)(v18 + 56) + 8 * v19);
          swift_endAccess();
          if (*(void *)(v21 + 16)) {
            goto LABEL_17;
          }
          swift_beginAccess();
          uint64_t v22 = sub_100355CC8(v29, v9);
          if (*v23)
          {
            sub_1003679C4(a4);
            ((void (*)(void *, void))v22)(v29, 0);
            swift_endAccess();
            swift_bridgeObjectRelease();
            goto LABEL_17;
          }
          ((void (*)(void *, void))v22)(v29, 0);
        }
      }
    }
  }
  swift_endAccess();
LABEL_17:
  swift_beginAccess();
  uint64_t v24 = *(void *)v8;
  if (*(void *)(*(void *)v8 + 16) && (unint64_t v25 = sub_100031214(v9), (v26 & 1) != 0))
  {
    uint64_t v27 = *(void *)(*(void *)(v24 + 56) + 8 * v25);
    swift_endAccess();
    if (!*(void *)(v27 + 16))
    {
      swift_beginAccess();
      sub_100367910(v9);
      swift_endAccess();
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_endAccess();
  }
  return swift_release();
}

uint64_t sub_100365B10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v15[0] - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)*OS_dispatch_queue.nan.unsafeMutableAddressor();
  aBlock[4] = a1;
  void aBlock[5] = a2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E5D0;
  uint64_t aBlock[3] = &unk_10046FB50;
  uint64_t v12 = _Block_copy(aBlock);
  id v13 = v11;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v15[1] = _swiftEmptyArrayStorage;
  sub_10036BF80((unint64_t *)&qword_1004807A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100010BCC((uint64_t *)&unk_10047D0F0);
  sub_10000F9CC((unint64_t *)&qword_1004807B0, (uint64_t *)&unk_10047D0F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, void))(v8 + 8))(v10, v15[0]);
  return swift_release();
}

uint64_t sub_100365DB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for DriverEvent(0);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchTimeInterval();
  uint64_t v32 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchTime();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v24 - v13;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (*(void *)(result + *(void *)(*(void *)result + 496)))
    {
      uint64_t v31 = v3;
      (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v14, a2, v9);
      unint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.error.getter();
      int v18 = v17;
      if (os_log_type_enabled(v16, v17))
      {
        os_log_t v30 = v16;
        uint64_t v19 = swift_slowAlloc();
        int v28 = v18;
        char v20 = (uint8_t *)v19;
        uint64_t v29 = swift_slowAlloc();
        uint64_t v34 = v29;
        uint64_t v27 = v20;
        *(_DWORD *)char v20 = 136315138;
        char v26 = v20 + 4;
        type metadata accessor for P2PTimer();
        variable initialization expression of AWDLPeer.lastUpdated();
        DispatchTime.distance(to:)();
        unint64_t v25 = *(void (**)(char *, uint64_t))(v10 + 8);
        v25(v12, v9);
        uint64_t v21 = DispatchTimeInterval.description.getter();
        unint64_t v23 = v22;
        (*(void (**)(char *, uint64_t))(v32 + 8))(v8, v6);
        uint64_t v33 = sub_100010680(v21, v23, &v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v25(v14, v9);
        unint64_t v16 = v30;
        _os_log_impl((void *)&_mh_execute_header, v30, (os_log_type_t)v28, "Watchdog reset timed out because it has been in progress since %s", v27, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
      }

      *uint64_t v5 = 1;
      swift_storeEnumTagMultiPayload();
      sub_10035EE1C(v5);
      swift_release();
      return sub_10036B854((uint64_t)v5, type metadata accessor for DriverEvent);
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1003661FC(uint64_t a1)
{
  sub_100010BCC(&qword_10047DB90);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for P2PTimer();
  variable initialization expression of AWDLPeer.lastUpdated();
  uint64_t v4 = type metadata accessor for DispatchTime();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 0, 1, v4);
  uint64_t v5 = a1 + *(void *)(*(void *)a1 + 504);
  swift_beginAccess();
  sub_10027ECE4((uint64_t)v3, v5);
  return swift_endAccess();
}

void sub_100366308(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for DispatchTimeInterval();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchTime();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v23 - v11;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    if (*(void *)(Strong + *(void *)(*(void *)Strong + 496)))
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v12, a2, v7);
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.error.getter();
      int v16 = v15;
      if (os_log_type_enabled(v14, v15))
      {
        os_log_t v29 = v14;
        uint64_t v17 = swift_slowAlloc();
        int v27 = v16;
        int v18 = (uint8_t *)v17;
        uint64_t v28 = swift_slowAlloc();
        uint64_t v31 = v28;
        char v26 = v18;
        *(_DWORD *)int v18 = 136315138;
        unint64_t v25 = v18 + 4;
        type metadata accessor for P2PTimer();
        variable initialization expression of AWDLPeer.lastUpdated();
        DispatchTime.distance(to:)();
        uint64_t v24 = *(void (**)(char *, uint64_t))(v8 + 8);
        v24(v10, v7);
        uint64_t v19 = DispatchTimeInterval.description.getter();
        unint64_t v21 = v20;
        (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
        uint64_t v30 = sub_100010680(v19, v21, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v24(v12, v7);
        os_log_t v22 = v29;
        _os_log_impl((void *)&_mh_execute_header, v29, (os_log_type_t)v27, "Interface re-creation timed out because it has been in progress since %s", v26, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_release();
      }
      else
      {
        swift_release();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
      }
    }
    else
    {
      swift_release();
    }
  }
}

void sub_1003666C4()
{
}

void sub_1003666F4(uint64_t a1, unint64_t *a2, uint64_t *a3, unint64_t *a4, void (*a5)(void))
{
  if (!*a2)
  {
    sub_100014434(a3);
    sub_10036678C(a4, a3, a5);
    unint64_t v9 = type metadata accessor for MutableDriverProperty();
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t sub_10036678C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100014434(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1003667F8(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for MutableDriverProperty();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_100366858()
{
  if (!qword_100487BC0)
  {
    sub_100014434(&qword_100487BC8);
    sub_10036678C((unint64_t *)&unk_100487BD0, &qword_100487BC8, (void (*)(void))sub_1000A4188);
    unint64_t v0 = type metadata accessor for ObservableWiFiProperty();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100487BC0);
    }
  }
}

void sub_100366900()
{
  if (!qword_100487BE0)
  {
    sub_100014434(&qword_100487BE8);
    sub_100366968();
    unint64_t v0 = type metadata accessor for MutableDriverProperty();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100487BE0);
    }
  }
}

unint64_t sub_100366968()
{
  unint64_t result = qword_100487BF0;
  if (!qword_100487BF0)
  {
    sub_100014434(&qword_100487BE8);
    sub_10036BF80(&qword_100482FB0, (void (*)(uint64_t))type metadata accessor for NANAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100487BF0);
  }
  return result;
}

void sub_100366A0C()
{
  if (!qword_100487C00)
  {
    sub_100014434(&qword_100487C08);
    sub_10036678C((unint64_t *)&unk_100487C10, &qword_100487C08, (void (*)(void))sub_10021C624);
    unint64_t v0 = type metadata accessor for MutableDriverProperty();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100487C00);
    }
  }
}

uint64_t sub_100366AB4(char *a1, uint64_t a2)
{
  uint64_t v42 = a2;
  uint64_t v3 = type metadata accessor for DispatchTime();
  uint64_t v45 = *(void *)(v3 - 8);
  uint64_t v46 = v3;
  __chkstk_darwin();
  uint64_t v43 = &v36[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  unint64_t v40 = &v36[-v5];
  uint64_t v6 = type metadata accessor for DispatchTimeInterval();
  uint64_t v47 = *(void *)(v6 - 8);
  uint64_t v48 = v6;
  __chkstk_darwin();
  uint64_t v44 = &v36[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  uint64_t v41 = &v36[-v8];
  uint64_t v9 = sub_100010BCC(&qword_100487CC8) - 8;
  __chkstk_darwin();
  uint64_t v11 = &v36[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  uint64_t v13 = &v36[-v12];
  char v14 = *a1;
  char v15 = a1[1];
  char v16 = a1[2];
  int v17 = a1[3];
  unsigned __int8 v18 = a1[4];
  int v38 = v18;
  int v39 = v17;
  unsigned __int8 v19 = a1[5];
  int v37 = v19;
  unint64_t v20 = &v36[*(int *)(v9 + 56) - v12];
  unsigned char *v13 = v14;
  v13[1] = v15;
  v13[2] = v16;
  void v13[3] = v17;
  void v13[4] = v18;
  void v13[5] = v19;
  sub_10036BA3C(v42, (uint64_t)v20, type metadata accessor for NANPeer);
  type metadata accessor for P2PTimer();
  variable initialization expression of AWDLPeer.lastUpdated();
  uint64_t v21 = (uint64_t)&v11[*(int *)(v9 + 56)];
  unsigned char *v11 = v14;
  v11[1] = v15;
  v11[2] = v16;
  uint64_t v11[3] = v39;
  void v11[4] = v38;
  void v11[5] = v37;
  sub_10036BA3C((uint64_t)v20, v21, type metadata accessor for NANPeer);
  uint64_t v22 = type metadata accessor for NANPeer(0);
  uint64_t v24 = v45;
  uint64_t v23 = v46;
  unint64_t v25 = v43;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v45 + 16))(v43, v21 + *(int *)(v22 + 24), v46);
  sub_10036B854(v21, type metadata accessor for NANPeer);
  int v27 = v40;
  char v26 = v41;
  DispatchTime.distance(to:)();
  uint64_t v28 = *(void (**)(unsigned char *, uint64_t))(v24 + 8);
  v28(v25, v23);
  v28(v27, v23);
  os_log_t v29 = v44;
  *uint64_t v44 = 30;
  uint64_t v31 = v47;
  uint64_t v30 = v48;
  (*(void (**)(void *, void, uint64_t))(v47 + 104))(v29, enum case for DispatchTimeInterval.seconds(_:), v48);
  uint64_t v32 = v26;
  uint64_t v33 = v29;
  LOBYTE(v29) = static DispatchTimeInterval.< infix(_:_:)();
  uint64_t v34 = *(void (**)(unsigned char *, uint64_t))(v31 + 8);
  v34(v33, v30);
  v34(v32, v30);
  sub_1000380B4((uint64_t)v13, &qword_100487CC8);
  return v29 & 1;
}

BOOL sub_100366E80(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  sub_100010BCC(&qword_100487CA0);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v9 = *(unsigned int *)(a1 + 2);
  uint64_t v10 = (uint64_t *)(a3 + *(void *)(*(void *)a3 + 440));
  swift_beginAccess();
  uint64_t v11 = *v10;
  if (*(void *)(v11 + 16) && (unint64_t v12 = sub_100031214(v7 | (v8 << 8) | (v9 << 16)), (v13 & 1) != 0))
  {
    unint64_t v14 = v12;
    uint64_t v15 = *(void *)(v11 + 56);
    uint64_t v16 = type metadata accessor for NANPeer(0);
    uint64_t v17 = *(void *)(v16 - 8);
    sub_10036BA3C(v15 + *(void *)(v17 + 72) * v14, (uint64_t)v6, type metadata accessor for NANPeer);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v6, 0, 1, v16);
  }
  else
  {
    uint64_t v16 = type metadata accessor for NANPeer(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v6, 1, 1, v16);
  }
  swift_endAccess();
  type metadata accessor for NANPeer(0);
  BOOL v18 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v6, 1, v16) != 1;
  sub_1000380B4((uint64_t)v6, &qword_100487CA0);
  return v18;
}

uint64_t sub_1003670A4(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v1 = *(void *)(a1 + 88);
  if (v1)
  {
    uint64_t v2 = 192;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 9) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 96);
  if (v1)
  {
    uint64_t v2 = 256;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 5) {
    unint64_t v7 = 5;
  }
  unint64_t v8 = v7 - 5;
  uint64_t v9 = (unint64_t *)(a1 + 104);
  uint64_t v2 = 256;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_10036716C(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_1000316CC(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1003A1D64();
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 16 * v4);
  sub_1003A05EC(v4, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_100367278(uint64_t a1)
{
  uint64_t v2 = v1;
  unint64_t v3 = a1 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_100031214(v3);
  char v6 = v5;
  swift_bridgeObjectRelease();
  if ((v6 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = *v1;
  uint64_t v11 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1003A20D0();
    uint64_t v8 = v11;
  }
  uint64_t v9 = *(void *)(*(void *)(v8 + 56) + 8 * v4);
  sub_1003A05F0(v4, v8);
  *uint64_t v2 = v8;
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_10036732C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = v2;
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100031214(v5);
  char v8 = v7;
  uint64_t result = swift_bridgeObjectRelease();
  if (v8)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v2;
    uint64_t v15 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1003A228C();
      uint64_t v11 = v15;
    }
    uint64_t v12 = *(void *)(v11 + 56) + 24 * v6;
    __int16 v13 = *(_WORD *)(v12 + 4);
    char v14 = *(unsigned char *)(v12 + 6);
    *(_DWORD *)a2 = *(_DWORD *)v12;
    *(_WORD *)(a2 + 4) = v13;
    *(unsigned char *)(a2 + 6) = v14;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(v12 + 8);
    sub_1003A07C8(v6, v11);
    uint64_t *v3 = v11;
    return swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0xB000000000000000;
  }
  return result;
}

uint64_t sub_100367414(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_100011CE0(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v1;
  uint64_t v10 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1003A24B0();
    uint64_t v7 = v10;
  }

  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  sub_100012CB4(v4, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1003674E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10036753C(a1, type metadata accessor for NANPeer.Service.AuthenticationStatus, type metadata accessor for NANPeer.Service.AuthenticationStatus, (void (*)(unint64_t, uint64_t))sub_1003A0EA8, (void (*)(void))sub_1003A3444, a2);
}

uint64_t sub_10036753C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t (*a3)(void)@<X2>, void (*a4)(unint64_t, uint64_t)@<X3>, void (*a5)(void)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11 = v6;
  unint64_t v13 = a1 & 0xFFFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  unint64_t v14 = sub_100031130(v13);
  char v16 = v15;
  swift_bridgeObjectRelease();
  if (v16)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v6;
    uint64_t v28 = *v11;
    uint64_t *v11 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a5();
      uint64_t v18 = v28;
    }
    uint64_t v19 = *(void *)(v18 + 56);
    uint64_t v20 = a2(0);
    uint64_t v27 = *(void *)(v20 - 8);
    sub_100297894(v19 + *(void *)(v27 + 72) * v14, a6, a3);
    a4(v14, v18);
    uint64_t *v11 = v18;
    swift_bridgeObjectRelease();
    uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56);
    uint64_t v22 = a6;
    uint64_t v23 = 0;
    uint64_t v24 = v20;
  }
  else
  {
    uint64_t v25 = a2(0);
    uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56);
    uint64_t v24 = v25;
    uint64_t v22 = a6;
    uint64_t v23 = 1;
  }

  return v21(v22, v23, 1, v24);
}

double sub_1003676E4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1000316CC(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v13 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1003A3C28();
      uint64_t v9 = v13;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    sub_10006EF50((long long *)(*(void *)(v9 + 56) + 40 * v6), a2);
    sub_1003A10FC(v6, v9);
    uint64_t *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(a2 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_100367818(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_1000316CC(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1003A46B4();
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  sub_1003A1860(v4, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_100367910(uint64_t a1)
{
  uint64_t v2 = v1;
  unint64_t v3 = a1 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_100031214(v3);
  char v6 = v5;
  swift_bridgeObjectRelease();
  if ((v6 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = *v1;
  uint64_t v11 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1003A1F14();
    uint64_t v8 = v11;
  }
  uint64_t v9 = *(void *)(*(void *)(v8 + 56) + 8 * v4);
  sub_1003A05F0(v4, v8);
  *uint64_t v2 = v8;
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_1003679C4(char a1)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_10039F7B4(a1);
  if ((v4 & 1) == 0) {
    return 0;
  }
  unint64_t v5 = v3;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v1;
  uint64_t v10 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1003A1D70();
    uint64_t v7 = v10;
  }
  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8 * v5);
  sub_1003A1B58(v5, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_100367A5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100367AB0(a1, type metadata accessor for AWDLPeer, type metadata accessor for AWDLPeer, (void (*)(unint64_t, uint64_t))sub_1003A09C4, (void (*)(void))sub_1003A2654, a2);
}

uint64_t sub_100367AB0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t (*a3)(void)@<X2>, void (*a4)(unint64_t, uint64_t)@<X3>, void (*a5)(void)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11 = v6;
  unint64_t v13 = a1 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  unint64_t v14 = sub_100031214(v13);
  char v16 = v15;
  swift_bridgeObjectRelease();
  if (v16)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v6;
    uint64_t v28 = *v11;
    uint64_t *v11 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a5();
      uint64_t v18 = v28;
    }
    uint64_t v19 = *(void *)(v18 + 56);
    uint64_t v20 = a2(0);
    uint64_t v27 = *(void *)(v20 - 8);
    sub_100297894(v19 + *(void *)(v27 + 72) * v14, a6, a3);
    a4(v14, v18);
    uint64_t *v11 = v18;
    swift_bridgeObjectRelease();
    uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56);
    uint64_t v22 = a6;
    uint64_t v23 = 0;
    uint64_t v24 = v20;
  }
  else
  {
    uint64_t v25 = a2(0);
    uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56);
    uint64_t v24 = v25;
    uint64_t v22 = a6;
    uint64_t v23 = 1;
  }

  return v21(v22, v23, 1, v24);
}

uint64_t (*sub_100367C58(void *a1, unsigned __int8 a2))()
{
  char v4 = malloc(0x50uLL);
  *a1 = v4;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4[8] = sub_1001733A0(v4);
  v4[9] = sub_100368024((uint64_t)(v4 + 4), a2, isUniquelyReferenced_nonNull_native);
  return sub_100367CE8;
}

void (*sub_100367CEC(void *a1, uint64_t a2))(uint64_t a1)
{
  char v4 = malloc(0x68uLL);
  *a1 = v4;
  uint64_t v5 = type metadata accessor for UUID();
  v4[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  v4[9] = v6;
  uint64_t v8 = malloc(*(void *)(v6 + 64));
  v4[10] = v8;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  (*(void (**)(void *, uint64_t, uint64_t))(v7 + 16))(v8, a2, v5);
  v4[11] = sub_100173364(v4);
  v4[12] = sub_10036828C(v4 + 4, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
  return sub_100367E0C;
}

void sub_100367E0C(uint64_t a1)
{
  unint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 88);
  uint64_t v4 = *(void *)(*(void *)a1 + 72);
  unint64_t v3 = *(void **)(*(void *)a1 + 80);
  uint64_t v5 = *(void *)(*(void *)a1 + 64);
  (*(void (**)(void))(*(void *)a1 + 96))();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v5);
  v2(v1, 0);
  free(v3);

  free(v1);
}

uint64_t (*sub_100367EA4(void *a1, char a2))()
{
  uint64_t v4 = malloc(0x50uLL);
  *a1 = v4;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4[8] = sub_1001733A0(v4);
  v4[9] = sub_10036840C((uint64_t)(v4 + 4), a2, isUniquelyReferenced_nonNull_native);
  return sub_100367CE8;
}

uint64_t (*sub_100367F34(void *a1, uint64_t a2))()
{
  uint64_t v4 = malloc(0x50uLL);
  *a1 = v4;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4[8] = sub_1001733A0(v4);
  v4[9] = sub_100368578(v4 + 4, a2 & 0xFFFFFFFFFFFFLL, isUniquelyReferenced_nonNull_native);
  return sub_100367CE8;
}

void sub_100367FC4(uint64_t a1)
{
  unint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 64);
  (*(void (**)(void))(*(void *)a1 + 72))();
  v2(v1, 0);

  free(v1);
}

void (*sub_100368024(uint64_t a1, unsigned __int8 a2, char a3))(uint64_t a1)
{
  uint64_t v4 = v3;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 24) = a2;
  uint64_t v8 = sub_100010BCC((uint64_t *)&unk_100486F40);
  uint64_t v9 = malloc(*(void *)(*(void *)(v8 - 8) + 64));
  *(void *)(a1 + 8) = v9;
  uint64_t v10 = *v3;
  unint64_t v12 = sub_10039F964(a2);
  *(unsigned char *)(a1 + 25) = v11 & 1;
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    char v16 = v11;
    uint64_t v17 = *(void *)(v10 + 24);
    if (v17 >= v15 && (a3 & 1) != 0)
    {
LABEL_7:
      *(void *)(a1 + 16) = v12;
      if (v16)
      {
LABEL_8:
        uint64_t v18 = *(void *)(*v4 + 56);
        uint64_t v19 = type metadata accessor for NANPeer.Service(0);
        uint64_t v20 = *(void *)(v19 - 8);
        sub_100297894(v18 + *(void *)(v20 + 72) * v12, (uint64_t)v9, type metadata accessor for NANPeer.Service);
        uint64_t v21 = 0;
LABEL_12:
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v9, v21, 1, v19);
        return sub_100368234;
      }
LABEL_11:
      uint64_t v19 = type metadata accessor for NANPeer.Service(0);
      uint64_t v20 = *(void *)(v19 - 8);
      uint64_t v21 = 1;
      goto LABEL_12;
    }
    if (v17 >= v15 && (a3 & 1) == 0)
    {
      sub_1003A2E78();
      goto LABEL_7;
    }
    sub_100291BF4(v15, a3 & 1);
    unint64_t v22 = sub_10039F964(a2);
    if ((v16 & 1) == (v23 & 1))
    {
      unint64_t v12 = v22;
      *(void *)(a1 + 16) = v22;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  double result = (void (*)(uint64_t))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_100368234(uint64_t a1)
{
  unint64_t v1 = *(void **)(a1 + 8);
  sub_1002FDAF4((uint64_t)v1, *(unsigned char *)(a1 + 25), *(uint64_t **)a1, *(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24));
  sub_1000380B4((uint64_t)v1, (uint64_t *)&unk_100486F40);

  free(v1);
}

void (*sub_10036828C(void *a1, uint64_t a2, char a3))(uint64_t **a1)
{
  uint64_t v4 = v3;
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[1] = a2;
  void v8[2] = v3;
  uint64_t v9 = *v3;
  unint64_t v11 = sub_1000316CC(a2);
  *((unsigned char *)v8 + 32) = v10 & 1;
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    char v15 = v10;
    uint64_t v16 = *(void *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v11;
      if (v15)
      {
LABEL_8:
        uint64_t v17 = *(void *)(*(void *)(*v4 + 56) + 8 * v11);
LABEL_12:
        *uint64_t v8 = v17;
        return sub_1003683BC;
      }
LABEL_11:
      uint64_t v17 = 0;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      sub_1003A46B4();
      goto LABEL_7;
    }
    sub_100294318(v14, a3 & 1);
    unint64_t v18 = sub_1000316CC(a2);
    if ((v15 & 1) == (v19 & 1))
    {
      unint64_t v11 = v18;
      v8[3] = v18;
      if (v15) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  type metadata accessor for UUID();
  double result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_1003683BC(uint64_t **a1)
{
  unint64_t v1 = *a1;
  sub_1002FDF18(*a1, *((unsigned char *)*a1 + 32), (uint64_t *)(*a1)[2], (*a1)[3], (*a1)[1]);
  swift_bridgeObjectRelease();

  free(v1);
}

unint64_t (*sub_10036840C(uint64_t a1, char a2, char a3))(unint64_t result)
{
  uint64_t v4 = v3;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 24) = a2;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_10039F7B4(a2);
  *(unsigned char *)(a1 + 25) = v9 & 1;
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    char v14 = v9;
    uint64_t v15 = *(void *)(v8 + 24);
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      *(void *)(a1 + 16) = v10;
      if (v14)
      {
LABEL_8:
        uint64_t v16 = *(void *)(*(void *)(*v4 + 56) + 8 * v10);
LABEL_12:
        *(void *)a1 = v16;
        return sub_100368530;
      }
LABEL_11:
      uint64_t v16 = 0;
      goto LABEL_12;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1003A1D70();
      goto LABEL_7;
    }
    sub_100290130(v13, a3 & 1);
    unint64_t v17 = sub_10039F7B4(a2);
    if ((v14 & 1) == (v18 & 1))
    {
      unint64_t v10 = v17;
      *(void *)(a1 + 16) = v17;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  double result = (unint64_t (*)(unint64_t))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t sub_100368530(unint64_t result)
{
  uint64_t v1 = *(void *)result;
  if (*(void *)result)
  {
    uint64_t v2 = **(void ***)(result + 8);
    if (*(unsigned char *)(result + 25)) {
      *(void *)(v2[7] + 8 * *(void *)(result + 16)) = v1;
    }
    else {
      return sub_100295E98(*(void *)(result + 16), *(unsigned char *)(result + 24), v1, v2);
    }
  }
  else if (*(unsigned char *)(result + 25))
  {
    return sub_1003A1B58(*(void *)(result + 16), **(void **)(result + 8));
  }
  return result;
}

void (*sub_100368578(void *a1, uint64_t a2, char a3))(uint64_t **a1)
{
  uint64_t v4 = v3;
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[1] = a2;
  void v8[2] = v3;
  uint64_t v9 = *v3;
  unint64_t v10 = a2 & 0xFFFFFFFFFFFFLL;
  unint64_t v12 = sub_100031214(a2 & 0xFFFFFFFFFFFFLL);
  *((unsigned char *)v8 + 32) = v11 & 1;
  uint64_t v13 = *(void *)(v9 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    char v16 = v11;
    uint64_t v17 = *(void *)(v9 + 24);
    if (v17 >= v15 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v12;
      if (v16)
      {
LABEL_8:
        uint64_t v18 = *(void *)(*(void *)(*v4 + 56) + 8 * v12);
LABEL_12:
        *uint64_t v8 = v18;
        return sub_1003686AC;
      }
LABEL_11:
      uint64_t v18 = 0;
      goto LABEL_12;
    }
    if (v17 >= v15 && (a3 & 1) == 0)
    {
      sub_1003A1F14();
      goto LABEL_7;
    }
    sub_10029040C(v15, a3 & 1);
    unint64_t v19 = sub_100031214(v10);
    if ((v16 & 1) == (v20 & 1))
    {
      unint64_t v12 = v19;
      v8[3] = v19;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  double result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_1003686AC(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  char v3 = *((unsigned char *)*a1 + 32);
  if (v2)
  {
    unint64_t v4 = v1[3];
    uint64_t v5 = *(void **)v1[2];
    if (v3) {
      *(void *)(v5[7] + 8 * v4) = v2;
    }
    else {
      sub_100295EDC(v4, v1[1] & 0xFFFFFFFFFFFFLL, v2, v5);
    }
  }
  else if ((*a1)[4])
  {
    sub_1003A05F0(v1[3], *(void *)v1[2]);
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t sub_100368744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, unint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = v4;
  char v10 = *(unsigned char *)(a3 + 32);
  unint64_t v11 = (unint64_t)((1 << v10) + 63) >> 6;
  size_t v12 = 8 * v11;
  if (v10 & 0x3Fu) <= 0xD || (swift_stdlib_isStackAllocationSafe())
  {
    __chkstk_darwin();
    bzero((char *)&v16 - ((v12 + 15) & 0x3FFFFFFFFFFFFFF0), v12);
    uint64_t v13 = a4((char *)&v16 - ((v12 + 15) & 0x3FFFFFFFFFFFFFF0), v11, a3, a1, a2);
    if (v4) {
      swift_willThrow();
    }
    else {
      return v13;
    }
  }
  else
  {
    BOOL v14 = (void *)swift_slowAlloc();
    bzero(v14, v12);
    uint64_t v6 = a4((char *)v14, v11, a3, a1, a2);
    swift_slowDealloc();
  }
  return v6;
}

uint64_t sub_1003688D0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(int *, uint64_t *))
{
  uint64_t v21 = (unint64_t *)result;
  int64_t v7 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = a3 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a3 + 64);
  int64_t v24 = (unint64_t)(v8 + 63) >> 6;
  while (v10)
  {
    unint64_t v11 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v12 = v11 | (v7 << 6);
LABEL_17:
    uint64_t v16 = *(void *)(a3 + 56);
    uint64_t v17 = *(void *)(a3 + 48) + 6 * v12;
    __int16 v18 = *(_WORD *)(v17 + 4);
    int v26 = *(_DWORD *)v17;
    __int16 v27 = v18;
    uint64_t v25 = *(void *)(v16 + 8 * v12);
    swift_bridgeObjectRetain();
    char v19 = a4(&v26, &v25);
    double result = swift_bridgeObjectRelease();
    if (v4) {
      return result;
    }
    if (v19)
    {
      *(unint64_t *)((char *)v21 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      BOOL v13 = __OFADD__(v22++, 1);
      if (v13) {
        goto LABEL_30;
      }
    }
  }
  BOOL v13 = __OFADD__(v7++, 1);
  if (v13)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v7 >= v24) {
    return sub_1003695A0(v21, a2, v22, a3);
  }
  unint64_t v14 = *(void *)(v23 + 8 * v7);
  if (v14)
  {
LABEL_16:
    unint64_t v10 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v7 << 6);
    goto LABEL_17;
  }
  int64_t v15 = v7 + 1;
  if (v7 + 1 >= v24) {
    return sub_1003695A0(v21, a2, v22, a3);
  }
  unint64_t v14 = *(void *)(v23 + 8 * v15);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v7 + 2;
  if (v7 + 2 >= v24) {
    return sub_1003695A0(v21, a2, v22, a3);
  }
  unint64_t v14 = *(void *)(v23 + 8 * v15);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v7 + 3;
  if (v7 + 3 >= v24) {
    return sub_1003695A0(v21, a2, v22, a3);
  }
  unint64_t v14 = *(void *)(v23 + 8 * v15);
  if (v14)
  {
LABEL_15:
    int64_t v7 = v15;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v7 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v7 >= v24) {
      return sub_1003695A0(v21, a2, v22, a3);
    }
    unint64_t v14 = *(void *)(v23 + 8 * v7);
    ++v15;
    if (v14) {
      goto LABEL_16;
    }
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100368AE0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(int *, char *))
{
  os_log_t v29 = a4;
  uint64_t v24 = a2;
  uint64_t v25 = a1;
  uint64_t v6 = *(void *)(type metadata accessor for NANPeer(0) - 8);
  double result = (void *)__chkstk_darwin();
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v10 = 0;
  uint64_t v11 = *(void *)(a3 + 64);
  uint64_t v26 = 0;
  uint64_t v27 = a3 + 64;
  uint64_t v12 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  int64_t v28 = (unint64_t)(v12 + 63) >> 6;
  while (v14)
  {
    unint64_t v15 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    unint64_t v16 = v15 | (v10 << 6);
LABEL_17:
    uint64_t v20 = *(void *)(a3 + 56);
    uint64_t v21 = *(void *)(a3 + 48) + 6 * v16;
    __int16 v22 = *(_WORD *)(v21 + 4);
    int v30 = *(_DWORD *)v21;
    __int16 v31 = v22;
    sub_10036BA3C(v20 + *(void *)(v6 + 72) * v16, (uint64_t)v9, type metadata accessor for NANPeer);
    char v23 = v29(&v30, v9);
    double result = (void *)sub_10036B854((uint64_t)v9, type metadata accessor for NANPeer);
    if (v4) {
      return result;
    }
    if (v23)
    {
      *(unint64_t *)((char *)v25 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      BOOL v17 = __OFADD__(v26++, 1);
      if (v17) {
        goto LABEL_30;
      }
    }
  }
  BOOL v17 = __OFADD__(v10++, 1);
  if (v17)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v10 >= v28) {
    return sub_1003698B4(v25, v24, v26, (void *)a3);
  }
  unint64_t v18 = *(void *)(v27 + 8 * v10);
  if (v18)
  {
LABEL_16:
    unint64_t v14 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v10 << 6);
    goto LABEL_17;
  }
  int64_t v19 = v10 + 1;
  if (v10 + 1 >= v28) {
    return sub_1003698B4(v25, v24, v26, (void *)a3);
  }
  unint64_t v18 = *(void *)(v27 + 8 * v19);
  if (v18) {
    goto LABEL_15;
  }
  int64_t v19 = v10 + 2;
  if (v10 + 2 >= v28) {
    return sub_1003698B4(v25, v24, v26, (void *)a3);
  }
  unint64_t v18 = *(void *)(v27 + 8 * v19);
  if (v18) {
    goto LABEL_15;
  }
  int64_t v19 = v10 + 3;
  if (v10 + 3 >= v28) {
    return sub_1003698B4(v25, v24, v26, (void *)a3);
  }
  unint64_t v18 = *(void *)(v27 + 8 * v19);
  if (v18)
  {
LABEL_15:
    int64_t v10 = v19;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v10 >= v28) {
      return sub_1003698B4(v25, v24, v26, (void *)a3);
    }
    unint64_t v18 = *(void *)(v27 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_16;
    }
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100368D90(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v43 = a1;
  uint64_t v44 = a2;
  uint64_t v48 = *(void *)(type metadata accessor for NANPeer.Service.AuthenticationStatus(0) - 8);
  __chkstk_darwin();
  __chkstk_darwin();
  uint64_t v47 = (uint64_t)&v42 - v7;
  if (!a3) {
    return (uint64_t)_swiftEmptyDictionarySingleton;
  }
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  uint64_t v46 = v6;
  sub_100010BCC((uint64_t *)&unk_100487CD0);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v53 = result;
  if (v44 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *v43;
  }
  uint64_t v10 = 0;
  uint64_t v11 = v53 + 64;
  uint64_t v12 = v46;
  uint64_t v45 = a4;
  while (1)
  {
    uint64_t v52 = a3;
    if (v9)
    {
      uint64_t v13 = v12;
      uint64_t v49 = (v9 - 1) & v9;
      uint64_t v50 = v10;
      unint64_t v14 = __clz(__rbit64(v9)) | (v10 << 6);
    }
    else
    {
      uint64_t v15 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        goto LABEL_40;
      }
      if (v15 >= v44) {
        return v53;
      }
      unint64_t v16 = v43[v15];
      uint64_t v17 = v10 + 1;
      if (!v16)
      {
        uint64_t v17 = v10 + 2;
        if (v10 + 2 >= v44) {
          return v53;
        }
        unint64_t v16 = v43[v17];
        if (!v16)
        {
          uint64_t v17 = v10 + 3;
          if (v10 + 3 >= v44) {
            return v53;
          }
          unint64_t v16 = v43[v17];
          if (!v16)
          {
            uint64_t v18 = v10 + 4;
            if (v10 + 4 >= v44) {
              return v53;
            }
            unint64_t v16 = v43[v18];
            if (!v16)
            {
              while (1)
              {
                uint64_t v17 = v18 + 1;
                if (__OFADD__(v18, 1)) {
                  goto LABEL_41;
                }
                if (v17 >= v44) {
                  return v53;
                }
                unint64_t v16 = v43[v17];
                ++v18;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v17 = v10 + 4;
          }
        }
      }
LABEL_24:
      uint64_t v13 = v12;
      uint64_t v49 = (v16 - 1) & v16;
      uint64_t v50 = v17;
      unint64_t v14 = __clz(__rbit64(v16)) + (v17 << 6);
    }
    uint64_t v19 = a4[7];
    uint64_t v20 = (Swift::UInt8 *)(a4[6] - v14 + 8 * v14);
    Swift::UInt8 v21 = *v20;
    uint64_t v22 = v20[1];
    uint64_t v23 = v20[2];
    uint64_t v24 = v20[3];
    uint64_t v25 = v20[4];
    uint64_t v26 = v20[5];
    uint64_t v27 = v20[6];
    uint64_t v28 = v47;
    uint64_t v51 = *(void *)(v48 + 72);
    sub_10036BA3C(v19 + v51 * v14, v47, type metadata accessor for NANPeer.Service.AuthenticationStatus);
    uint64_t v29 = v13;
    uint64_t v30 = v27;
    sub_100297894(v28, v29, type metadata accessor for NANPeer.Service.AuthenticationStatus);
    uint64_t v31 = v53;
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v21);
    NANClusterChangeEvent.hash(into:)((int)&v54, v22 | (v23 << 8) | (v24 << 16) | (v25 << 24) | (v26 << 32) | (v30 << 40));
    uint64_t result = Hasher._finalize()();
    uint64_t v32 = -1 << *(unsigned char *)(v31 + 32);
    unint64_t v33 = result & ~v32;
    unint64_t v34 = v33 >> 6;
    if (((-1 << v33) & ~*(void *)(v11 + 8 * (v33 >> 6))) != 0)
    {
      unint64_t v35 = __clz(__rbit64((-1 << v33) & ~*(void *)(v11 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v12 = v46;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v32) >> 6;
      uint64_t v12 = v46;
      do
      {
        if (++v34 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v38 = v34 == v37;
        if (v34 == v37) {
          unint64_t v34 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v11 + 8 * v34);
      }
      while (v39 == -1);
      unint64_t v35 = __clz(__rbit64(~v39)) + (v34 << 6);
    }
    *(void *)(v11 + ((v35 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v35;
    uint64_t v40 = v53;
    uint64_t v41 = (Swift::UInt8 *)(*(void *)(v53 + 48) - v35 + 8 * v35);
    *uint64_t v41 = v21;
    v41[1] = v22;
    v41[2] = v23;
    v41[3] = v24;
    v41[4] = v25;
    v41[5] = v26;
    v41[6] = v30;
    uint64_t result = sub_100297894(v12, *(void *)(v40 + 56) + v35 * v51, type metadata accessor for NANPeer.Service.AuthenticationStatus);
    ++*(void *)(v40 + 16);
    a3 = v52 - 1;
    if (__OFSUB__(v52, 1)) {
      break;
    }
    a4 = v45;
    unint64_t v9 = v49;
    uint64_t v10 = v50;
    if (v52 == 1) {
      return v53;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1003691C8(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v47 = type metadata accessor for UUID();
  uint64_t v42 = *(void *)(v47 - 8);
  __chkstk_darwin();
  uint64_t v46 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v41 = (char *)&v36 - v9;
  if (!a3) {
    return (uint64_t)_swiftEmptyDictionarySingleton;
  }
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  sub_100010BCC((uint64_t *)&unk_1004883B0);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v11 = result;
  unint64_t v37 = a1;
  uint64_t v38 = a2;
  if (a2 < 1) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = *a1;
  }
  uint64_t v13 = 0;
  uint64_t v39 = a4;
  uint64_t v40 = v42 + 16;
  uint64_t v45 = v42 + 32;
  uint64_t v14 = result + 64;
  uint64_t v15 = v47;
  while (1)
  {
    if (v12)
    {
      uint64_t v43 = (v12 - 1) & v12;
      uint64_t v44 = v13;
      unint64_t v16 = __clz(__rbit64(v12)) | (v13 << 6);
    }
    else
    {
      uint64_t v17 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_40;
      }
      if (v17 >= v38) {
        return v11;
      }
      unint64_t v18 = v37[v17];
      uint64_t v19 = v13 + 1;
      if (!v18)
      {
        uint64_t v19 = v13 + 2;
        if (v13 + 2 >= v38) {
          return v11;
        }
        unint64_t v18 = v37[v19];
        if (!v18)
        {
          uint64_t v19 = v13 + 3;
          if (v13 + 3 >= v38) {
            return v11;
          }
          unint64_t v18 = v37[v19];
          if (!v18)
          {
            uint64_t v20 = v13 + 4;
            if (v13 + 4 >= v38) {
              return v11;
            }
            unint64_t v18 = v37[v20];
            if (!v18)
            {
              while (1)
              {
                uint64_t v19 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v19 >= v38) {
                  return v11;
                }
                unint64_t v18 = v37[v19];
                ++v20;
                if (v18) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v19 = v13 + 4;
          }
        }
      }
LABEL_24:
      uint64_t v43 = (v18 - 1) & v18;
      uint64_t v44 = v19;
      unint64_t v16 = __clz(__rbit64(v18)) + (v19 << 6);
    }
    Swift::UInt8 v21 = v41;
    uint64_t v22 = v42;
    uint64_t v23 = *(void *)(v42 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v42 + 16))(v41, a4[6] + v23 * v16, v15);
    uint64_t v24 = *(void **)(a4[7] + 8 * v16);
    uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
    v25(v46, v21, v15);
    sub_10036BF80(&qword_100487710, (void (*)(uint64_t))&type metadata accessor for UUID);
    id v26 = v24;
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v27 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1 << v28) & ~*(void *)(v14 + 8 * (v28 >> 6))) != 0)
    {
      unint64_t v30 = __clz(__rbit64((-1 << v28) & ~*(void *)(v14 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v33 = v29 == v32;
        if (v29 == v32) {
          unint64_t v29 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v14 + 8 * v29);
      }
      while (v34 == -1);
      unint64_t v30 = __clz(__rbit64(~v34)) + (v29 << 6);
    }
    *(void *)(v14 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v25)(*(void *)(v11 + 48) + v30 * v23, v46, v47);
    *(void *)(*(void *)(v11 + 56) + 8 * v30) = v26;
    ++*(void *)(v11 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v39;
    unint64_t v12 = v43;
    uint64_t v13 = v44;
    if (!a3) {
      return v11;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1003695A0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_100010BCC((uint64_t *)&unk_100484AB0);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = result;
  if (a2 < 1) {
    unint64_t v8 = 0;
  }
  else {
    unint64_t v8 = *a1;
  }
  uint64_t v9 = 0;
  uint64_t v10 = result + 64;
  uint64_t v36 = v4;
  while (1)
  {
    if (v8)
    {
      uint64_t v37 = (v8 - 1) & v8;
      uint64_t v38 = v9;
      unint64_t v11 = __clz(__rbit64(v8)) | (v9 << 6);
    }
    else
    {
      uint64_t v12 = v9 + 1;
      if (__OFADD__(v9, 1)) {
        goto LABEL_40;
      }
      if (v12 >= a2) {
        return v7;
      }
      unint64_t v13 = a1[v12];
      uint64_t v14 = v9 + 1;
      if (!v13)
      {
        uint64_t v14 = v9 + 2;
        if (v9 + 2 >= a2) {
          return v7;
        }
        unint64_t v13 = a1[v14];
        if (!v13)
        {
          uint64_t v14 = v9 + 3;
          if (v9 + 3 >= a2) {
            return v7;
          }
          unint64_t v13 = a1[v14];
          if (!v13)
          {
            uint64_t v15 = v9 + 4;
            if (v9 + 4 >= a2) {
              return v7;
            }
            unint64_t v13 = a1[v15];
            if (!v13)
            {
              while (1)
              {
                uint64_t v14 = v15 + 1;
                if (__OFADD__(v15, 1)) {
                  goto LABEL_41;
                }
                if (v14 >= a2) {
                  return v7;
                }
                unint64_t v13 = a1[v14];
                ++v15;
                if (v13) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v14 = v9 + 4;
          }
        }
      }
LABEL_24:
      uint64_t v37 = (v13 - 1) & v13;
      uint64_t v38 = v14;
      unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
    }
    uint64_t v16 = *(void *)(v4 + 56);
    uint64_t v17 = (unsigned __int8 *)(*(void *)(v4 + 48) + 6 * v11);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t v20 = v17[2];
    uint64_t v21 = v17[3];
    uint64_t v22 = v17[4];
    uint64_t v23 = v17[5];
    uint64_t v39 = *(void *)(v16 + 8 * v11);
    Hasher.init(_seed:)();
    NANClusterChangeEvent.hash(into:)((int)&v40, v18 | (v19 << 8) | (v20 << 16) | (v21 << 24) | (v22 << 32) | (v23 << 40));
    uint64_t result = Hasher._finalize()();
    uint64_t v24 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1 << v25) & ~*(void *)(v10 + 8 * (v25 >> 6))) != 0)
    {
      unint64_t v27 = __clz(__rbit64((-1 << v25) & ~*(void *)(v10 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v30 = v26 == v29;
        if (v26 == v29) {
          unint64_t v26 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v10 + 8 * v26);
      }
      while (v31 == -1);
      unint64_t v27 = __clz(__rbit64(~v31)) + (v26 << 6);
    }
    *(void *)(v10 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    unint64_t v32 = (unsigned char *)(*(void *)(v7 + 48) + 6 * v27);
    *unint64_t v32 = v18;
    v32[1] = v19;
    _OWORD v32[2] = v20;
    _OWORD v32[3] = v21;
    v32[4] = v22;
    uint64_t v32[5] = v23;
    uint64_t result = v39;
    *(void *)(*(void *)(v7 + 56) + 8 * v27) = v39;
    ++*(void *)(v7 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v4 = v36;
    unint64_t v8 = v37;
    uint64_t v9 = v38;
    if (!v5) {
      return v7;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

void *sub_1003698B4(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  char v40 = a1;
  uint64_t v41 = a2;
  uint64_t v45 = *(void *)(type metadata accessor for NANPeer(0) - 8);
  __chkstk_darwin();
  __chkstk_darwin();
  uint64_t v44 = (uint64_t)&v39 - v7;
  if (!a3) {
    return &_swiftEmptyDictionarySingleton;
  }
  if (a4[2] == a3)
  {
    swift_retain();
    return a4;
  }
  uint64_t v43 = v6;
  sub_100010BCC(&qword_100487CC0);
  uint64_t result = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v50 = result;
  if (v41 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *v40;
  }
  uint64_t v10 = 0;
  unint64_t v11 = v50 + 8;
  uint64_t v12 = (uint64_t)v43;
  uint64_t v42 = a4;
  while (1)
  {
    uint64_t v49 = a3;
    if (v9)
    {
      uint64_t v46 = (v9 - 1) & v9;
      uint64_t v47 = v10;
      unint64_t v13 = __clz(__rbit64(v9)) | (v10 << 6);
    }
    else
    {
      uint64_t v14 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        goto LABEL_40;
      }
      if (v14 >= v41) {
        return v50;
      }
      unint64_t v15 = v40[v14];
      uint64_t v16 = v10 + 1;
      if (!v15)
      {
        uint64_t v16 = v10 + 2;
        if (v10 + 2 >= v41) {
          return v50;
        }
        unint64_t v15 = v40[v16];
        if (!v15)
        {
          uint64_t v16 = v10 + 3;
          if (v10 + 3 >= v41) {
            return v50;
          }
          unint64_t v15 = v40[v16];
          if (!v15)
          {
            uint64_t v17 = v10 + 4;
            if (v10 + 4 >= v41) {
              return v50;
            }
            unint64_t v15 = v40[v17];
            if (!v15)
            {
              while (1)
              {
                uint64_t v16 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_41;
                }
                if (v16 >= v41) {
                  return v50;
                }
                unint64_t v15 = v40[v16];
                ++v17;
                if (v15) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v16 = v10 + 4;
          }
        }
      }
LABEL_24:
      uint64_t v46 = (v15 - 1) & v15;
      uint64_t v47 = v16;
      unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
    }
    uint64_t v18 = a4[7];
    uint64_t v19 = (unsigned __int8 *)(a4[6] + 6 * v13);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    uint64_t v22 = v19[2];
    uint64_t v23 = v19[3];
    uint64_t v24 = v19[4];
    uint64_t v25 = v19[5];
    uint64_t v26 = v44;
    uint64_t v48 = *(void *)(v45 + 72);
    sub_10036BA3C(v18 + v48 * v13, v44, type metadata accessor for NANPeer);
    sub_100297894(v26, v12, type metadata accessor for NANPeer);
    unint64_t v27 = v50;
    Hasher.init(_seed:)();
    NANClusterChangeEvent.hash(into:)((int)&v51, v20 | (v21 << 8) | (v22 << 16) | (v23 << 24) | (v24 << 32) | (v25 << 40));
    Swift::Int v28 = Hasher._finalize()();
    uint64_t v29 = -1 << *((unsigned char *)v27 + 32);
    unint64_t v30 = v28 & ~v29;
    unint64_t v31 = v30 >> 6;
    if (((-1 << v30) & ~v11[v30 >> 6]) != 0)
    {
      unint64_t v32 = __clz(__rbit64((-1 << v30) & ~v11[v30 >> 6])) | v30 & 0x7FFFFFFFFFFFFFC0;
      uint64_t result = v43;
    }
    else
    {
      char v33 = 0;
      unint64_t v34 = (unint64_t)(63 - v29) >> 6;
      uint64_t result = v43;
      do
      {
        if (++v31 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v35 = v31 == v34;
        if (v31 == v34) {
          unint64_t v31 = 0;
        }
        v33 |= v35;
        uint64_t v36 = v11[v31];
      }
      while (v36 == -1);
      unint64_t v32 = __clz(__rbit64(~v36)) + (v31 << 6);
    }
    *(void *)((char *)v11 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v32;
    uint64_t v37 = v50;
    uint64_t v38 = (unsigned char *)(v50[6] + 6 * v32);
    *uint64_t v38 = v20;
    v38[1] = v21;
    _OWORD v38[2] = v22;
    v38[3] = v23;
    v38[4] = v24;
    v38[5] = v25;
    uint64_t v12 = (uint64_t)result;
    uint64_t result = (void *)sub_100297894((uint64_t)result, v37[7] + v32 * v48, type metadata accessor for NANPeer);
    ++v37[2];
    a3 = v49 - 1;
    if (__OFSUB__(v49, 1)) {
      break;
    }
    a4 = v42;
    unint64_t v9 = v46;
    uint64_t v10 = v47;
    if (v49 == 1) {
      return v50;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100369CD0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_100010BCC((uint64_t *)&unk_100484AF0);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = result;
  uint64_t v34 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 64;
  uint64_t v36 = v4;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      uint64_t v37 = v10;
      unint64_t v13 = v12 | (v10 << 6);
    }
    else
    {
      uint64_t v14 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        goto LABEL_40;
      }
      if (v14 >= v34) {
        return v8;
      }
      unint64_t v15 = a1[v14];
      uint64_t v16 = v10 + 1;
      if (!v15)
      {
        uint64_t v16 = v10 + 2;
        if (v10 + 2 >= v34) {
          return v8;
        }
        unint64_t v15 = a1[v16];
        if (!v15)
        {
          uint64_t v16 = v10 + 3;
          if (v10 + 3 >= v34) {
            return v8;
          }
          unint64_t v15 = a1[v16];
          if (!v15)
          {
            uint64_t v17 = v10 + 4;
            if (v10 + 4 >= v34) {
              return v8;
            }
            unint64_t v15 = a1[v17];
            if (!v15)
            {
              while (1)
              {
                uint64_t v16 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_41;
                }
                if (v16 >= v34) {
                  return v8;
                }
                unint64_t v15 = a1[v16];
                ++v17;
                if (v15) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v16 = v10 + 4;
          }
        }
      }
LABEL_24:
      unint64_t v9 = (v15 - 1) & v15;
      uint64_t v37 = v16;
      unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
    }
    uint64_t v18 = *(void *)(v4 + 56);
    uint64_t v19 = *(void *)(v4 + 48) + 24 * v13;
    uint64_t v21 = *(void *)v19;
    uint64_t v20 = *(void *)(v19 + 8);
    char v22 = *(unsigned char *)(v19 + 16);
    Swift::UInt8 v23 = *(unsigned char *)(v19 + 17);
    uint64_t v38 = *(void *)(v18 + 8 * v13);
    Hasher.init(_seed:)();
    String.lowercased()();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(v23);
    uint64_t result = Hasher._finalize()();
    uint64_t v24 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1 << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      unint64_t v27 = __clz(__rbit64((-1 << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v30 = v26 == v29;
        if (v26 == v29) {
          unint64_t v26 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v11 + 8 * v26);
      }
      while (v31 == -1);
      unint64_t v27 = __clz(__rbit64(~v31)) + (v26 << 6);
    }
    *(void *)(v11 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    uint64_t v32 = *(void *)(v8 + 48) + 24 * v27;
    *(void *)uint64_t v32 = v21;
    *(void *)(v32 + 8) = v20;
    *(unsigned char *)(v32 + 16) = v22;
    *(unsigned char *)(v32 + 17) = v23;
    *(void *)(*(void *)(v8 + 56) + 8 * v27) = v38;
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    uint64_t v4 = v36;
    uint64_t v10 = v37;
    if (!v5) {
      return v8;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

Swift::Int sub_100369FF8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1002C6470(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_10036A064(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_10036A064(void *a1)
{
  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_136;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v78 = 0;
      uint64_t v79 = *v2;
      for (uint64_t i = 1; i != v3; ++i)
      {
        char v81 = *(unsigned char *)(v79 + i);
        unsigned int v82 = byte_1003D76B2[v81];
        uint64_t v83 = v78;
        do
        {
          uint64_t v84 = *(char *)(v79 + v83);
          if (v82 >= byte_1003D76B2[v84]) {
            break;
          }
          if (!v79) {
            goto LABEL_140;
          }
          *(unsigned char *)(v79 + v83 + 1) = v84;
          *(unsigned char *)(v79 + v83--) = v81;
        }
        while (v83 != -1);
        ++v78;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_145;
  }
  Swift::Int v95 = result;
  if (v3 < 2)
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      uint64_t v11 = (char *)_swiftEmptyArrayStorage;
LABEL_102:
      unint64_t v85 = v11;
      unsigned __int16 v94 = v8;
      if (v12 >= 2)
      {
        uint64_t v86 = *v2;
        do
        {
          unint64_t v87 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_131;
          }
          if (!v86) {
            goto LABEL_144;
          }
          long long v88 = v85;
          uint64_t v89 = *(void *)&v85[16 * v87 + 32];
          uint64_t v90 = *(void *)&v85[16 * v12 + 24];
          sub_10036A724((char *)(v86 + v89), (char *)(v86 + *(void *)&v85[16 * v12 + 16]), v86 + v90, __dst);
          if (v1) {
            break;
          }
          if (v90 < v89) {
            goto LABEL_132;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            long long v88 = sub_100114E40((uint64_t)v88);
          }
          if (v87 >= *((void *)v88 + 2)) {
            goto LABEL_133;
          }
          uint64x2_t v91 = &v88[16 * v87 + 32];
          *(void *)uint64x2_t v91 = v89;
          *((void *)v91 + 1) = v90;
          unint64_t v92 = *((void *)v88 + 2);
          if (v12 > v92) {
            goto LABEL_134;
          }
          memmove(&v88[16 * v12 + 16], &v88[16 * v12 + 32], 16 * (v92 - v12));
          unint64_t v85 = v88;
          *((void *)v88 + 2) = v92 - 1;
          unint64_t v12 = v92 - 1;
        }
        while (v92 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      v94[2] = 0;
      return swift_bridgeObjectRelease();
    }
    unsigned __int16 v94 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    unsigned __int16 v94 = (void *)v7;
    __dst = (char *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  unsigned int v93 = v2;
  uint64_t v10 = *v2;
  uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v96 = v3;
  uint64_t v97 = *v2;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 < v3)
    {
      uint64_t v14 = *(char *)(v10 + v9);
      unsigned int v15 = byte_1003D76B2[v14];
      unsigned int v16 = byte_1003D76B2[*(char *)(v10 + v13)];
      Swift::Int v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        while (v15 < v16 != byte_1003D76B2[*(char *)(v10 + v9)] >= byte_1003D76B2[(char)v14])
        {
          LOBYTE(v14) = *(unsigned char *)(v10 + v9++);
          if (v3 == v9)
          {
            Swift::Int v9 = v3;
            break;
          }
        }
      }
      if (v15 < v16)
      {
        if (v9 < v13) {
          goto LABEL_137;
        }
        if (v13 < v9)
        {
          Swift::Int v17 = v9 - 1;
          Swift::Int v18 = v13;
          do
          {
            if (v18 != v17)
            {
              if (!v10) {
                goto LABEL_143;
              }
              char v19 = *(unsigned char *)(v10 + v18);
              *(unsigned char *)(v10 + v18) = *(unsigned char *)(v10 + v17);
              *(unsigned char *)(v10 + v17) = v19;
            }
            BOOL v59 = ++v18 < v17--;
          }
          while (v59);
        }
      }
    }
    if (v9 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v9, v13)) {
      goto LABEL_135;
    }
    if (v9 - v13 >= v95) {
      goto LABEL_46;
    }
    Swift::Int v20 = v13 + v95;
    if (__OFADD__(v13, v95)) {
      goto LABEL_138;
    }
    if (v20 >= v3) {
      Swift::Int v20 = v3;
    }
    if (v20 < v13) {
      break;
    }
    if (v9 != v20)
    {
      uint64_t v21 = (unsigned char *)(v10 + v9);
      do
      {
        char v22 = *(unsigned char *)(v10 + v9);
        unsigned int v23 = byte_1003D76B2[v22];
        Swift::Int v24 = v13;
        unint64_t v25 = v21;
        do
        {
          uint64_t v26 = (char)*(v25 - 1);
          if (v23 >= byte_1003D76B2[v26]) {
            break;
          }
          if (!v10) {
            goto LABEL_141;
          }
          *unint64_t v25 = v26;
          *--unint64_t v25 = v22;
          ++v24;
        }
        while (v9 != v24);
        ++v9;
        ++v21;
      }
      while (v9 != v20);
      Swift::Int v9 = v20;
    }
LABEL_46:
    if (v9 < v13) {
      goto LABEL_130;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = sub_100114B14(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v28 = *((void *)v11 + 2);
    unint64_t v27 = *((void *)v11 + 3);
    unint64_t v12 = v28 + 1;
    uint64_t v10 = v97;
    if (v28 >= v27 >> 1)
    {
      uint64_t v77 = sub_100114B14((char *)(v27 > 1), v28 + 1, 1, v11);
      uint64_t v10 = v97;
      uint64_t v11 = v77;
    }
    *((void *)v11 + 2) = v12;
    unint64_t v29 = v11 + 32;
    BOOL v30 = &v11[16 * v28 + 32];
    *(void *)BOOL v30 = v13;
    *((void *)v30 + 1) = v9;
    if (v28)
    {
      while (1)
      {
        unint64_t v31 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v36 = &v29[16 * v12];
          uint64_t v37 = *((void *)v36 - 8);
          uint64_t v38 = *((void *)v36 - 7);
          BOOL v42 = __OFSUB__(v38, v37);
          uint64_t v39 = v38 - v37;
          if (v42) {
            goto LABEL_119;
          }
          uint64_t v41 = *((void *)v36 - 6);
          uint64_t v40 = *((void *)v36 - 5);
          BOOL v42 = __OFSUB__(v40, v41);
          uint64_t v34 = v40 - v41;
          char v35 = v42;
          if (v42) {
            goto LABEL_120;
          }
          unint64_t v43 = v12 - 2;
          uint64_t v44 = &v29[16 * v12 - 32];
          uint64_t v46 = *(void *)v44;
          uint64_t v45 = *((void *)v44 + 1);
          BOOL v42 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          if (v42) {
            goto LABEL_122;
          }
          BOOL v42 = __OFADD__(v34, v47);
          uint64_t v48 = v34 + v47;
          if (v42) {
            goto LABEL_125;
          }
          if (v48 >= v39)
          {
            unint64_t v66 = &v29[16 * v31];
            uint64_t v68 = *(void *)v66;
            uint64_t v67 = *((void *)v66 + 1);
            BOOL v42 = __OFSUB__(v67, v68);
            uint64_t v69 = v67 - v68;
            if (v42) {
              goto LABEL_129;
            }
            BOOL v59 = v34 < v69;
            goto LABEL_83;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v60 = *((void *)v11 + 4);
            uint64_t v61 = *((void *)v11 + 5);
            BOOL v42 = __OFSUB__(v61, v60);
            uint64_t v53 = v61 - v60;
            char v54 = v42;
            goto LABEL_77;
          }
          uint64_t v33 = *((void *)v11 + 4);
          uint64_t v32 = *((void *)v11 + 5);
          BOOL v42 = __OFSUB__(v32, v33);
          uint64_t v34 = v32 - v33;
          char v35 = v42;
        }
        if (v35) {
          goto LABEL_121;
        }
        unint64_t v43 = v12 - 2;
        uint64_t v49 = &v29[16 * v12 - 32];
        uint64_t v51 = *(void *)v49;
        uint64_t v50 = *((void *)v49 + 1);
        BOOL v52 = __OFSUB__(v50, v51);
        uint64_t v53 = v50 - v51;
        char v54 = v52;
        if (v52) {
          goto LABEL_124;
        }
        unint64_t v55 = &v29[16 * v31];
        uint64_t v57 = *(void *)v55;
        uint64_t v56 = *((void *)v55 + 1);
        BOOL v42 = __OFSUB__(v56, v57);
        uint64_t v58 = v56 - v57;
        if (v42) {
          goto LABEL_127;
        }
        if (__OFADD__(v53, v58)) {
          goto LABEL_128;
        }
        if (v53 + v58 >= v34)
        {
          BOOL v59 = v34 < v58;
LABEL_83:
          if (v59) {
            unint64_t v31 = v43;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v54) {
          goto LABEL_123;
        }
        uint64_t v62 = &v29[16 * v31];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v42 = __OFSUB__(v63, v64);
        uint64_t v65 = v63 - v64;
        if (v42) {
          goto LABEL_126;
        }
        if (v65 < v53) {
          goto LABEL_15;
        }
LABEL_85:
        unint64_t v70 = v31 - 1;
        if (v31 - 1 >= v12)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v10) {
          goto LABEL_142;
        }
        uint64_t v71 = &v29[16 * v70];
        uint64_t v72 = *(void *)v71;
        uint64_t v73 = v29;
        uint64_t v74 = &v29[16 * v31];
        uint64_t v75 = *((void *)v74 + 1);
        sub_10036A724((char *)(v10 + *(void *)v71), (char *)(v10 + *(void *)v74), v10 + v75, __dst);
        if (v1) {
          goto LABEL_93;
        }
        if (v75 < v72) {
          goto LABEL_116;
        }
        if (v31 > *((void *)v11 + 2)) {
          goto LABEL_117;
        }
        *(void *)uint64_t v71 = v72;
        *(void *)&v73[16 * v70 + 8] = v75;
        unint64_t v76 = *((void *)v11 + 2);
        if (v31 >= v76) {
          goto LABEL_118;
        }
        unint64_t v12 = v76 - 1;
        memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
        unint64_t v29 = v73;
        *((void *)v11 + 2) = v76 - 1;
        uint64_t v10 = v97;
        if (v76 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v3 = v96;
    if (v9 >= v96)
    {
      uint64_t v2 = v93;
      uint64_t v8 = v94;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10036A724(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char v22 = __src;
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  size_t v8 = a2 - __src;
  unint64_t v9 = a3 - (void)a2;
  uint64_t v21 = __dst;
  if (a2 - __src >= (uint64_t)(a3 - (void)a2))
  {
    if ((v9 & 0x8000000000000000) == 0)
    {
      if (__dst != a2 || a3 <= (unint64_t)__dst) {
        memmove(__dst, a2, a3 - (void)a2);
      }
      uint64_t v14 = &v4[v9];
      Swift::Int v20 = &v4[v9];
      char v22 = v6;
      if (v7 < v6 && (char *)a3 != v6)
      {
        unsigned int v15 = (char *)(a3 - 1);
        while (1)
        {
          unsigned int v16 = v6 - 1;
          uint64_t v17 = *(v6 - 1);
          Swift::Int v18 = v15 + 1;
          if (byte_1003D76B2[*(v14 - 1)] >= byte_1003D76B2[v17])
          {
            Swift::Int v20 = v14 - 1;
            if (v18 < v14 || v15 >= v14 || v18 != v14) {
              *unsigned int v15 = *(v14 - 1);
            }
            --v14;
            if (v6 <= v7) {
              goto LABEL_38;
            }
          }
          else
          {
            if (v18 != v6 || v15 >= v6) {
              *unsigned int v15 = v17;
            }
            char v22 = --v6;
            if (v16 <= v7) {
              goto LABEL_38;
            }
          }
          --v15;
          if (v14 <= v4) {
            goto LABEL_38;
          }
        }
      }
      goto LABEL_38;
    }
  }
  else if ((v8 & 0x8000000000000000) == 0)
  {
    if (__dst != __src || a2 <= __dst) {
      memmove(__dst, __src, v8);
    }
    uint64_t v10 = &v4[v8];
    Swift::Int v20 = &v4[v8];
    if (v6 != v7 && (unint64_t)v6 < a3)
    {
      do
      {
        uint64_t v11 = *v6;
        uint64_t v12 = *v4;
        if (byte_1003D76B2[v11] >= byte_1003D76B2[v12])
        {
          if (v7 != v4) {
            *uint64_t v7 = v12;
          }
          uint64_t v21 = ++v4;
          Swift::Int v13 = v6;
        }
        else
        {
          Swift::Int v13 = v6 + 1;
          if (v7 < v6 || v7 >= v13 || v7 != v6) {
            *uint64_t v7 = v11;
          }
        }
        ++v7;
        if (v4 >= v10) {
          break;
        }
        uint64_t v6 = v13;
      }
      while ((unint64_t)v13 < a3);
      char v22 = v7;
    }
LABEL_38:
    sub_1002C5E80((void **)&v22, (const void **)&v21, &v20);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10036A98C()
{
  return 0;
}

uint64_t sub_10036A9E8()
{
  return 0;
}

uint64_t sub_10036AA54()
{
  return 0;
}

uint64_t sub_10036AAB0(unsigned __int16 *a1)
{
  return sub_10036AAC8(a1);
}

uint64_t sub_10036AABC(unsigned __int16 *a1)
{
  return sub_10036AAC8(a1);
}

uint64_t sub_10036AAC8(unsigned __int16 *a1)
{
  WORD4(v2) = 0;
  *(void *)&long long v2 = *a1;
  _print_unlocked<A, B>(_:_:)();
  return *(void *)((char *)&v2 + 2);
}

uint64_t sub_10036AB18(unsigned __int8 *a1)
{
  BYTE8(v2) = 0;
  *(void *)&long long v2 = *a1;
  _print_unlocked<A, B>(_:_:)();
  return *(void *)((char *)&v2 + 1);
}

void *sub_10036AB6C(uint64_t a1, char *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  uint64_t v6 = _swiftEmptyArrayStorage;
  do
  {
    char v16 = *(unsigned char *)(a1 + v5 + 32);
    sub_1002C2184((unint64_t)&v16, a2, &v14);
    if (v2)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v6;
    }
    uint64_t v8 = v15;
    if (v15)
    {
      int v9 = v14;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v6 = sub_1000C6914(0, v6[2] + 1, 1, v6);
      }
      unint64_t v11 = v6[2];
      unint64_t v10 = v6[3];
      if (v11 >= v10 >> 1) {
        uint64_t v6 = sub_1000C6914((void *)(v10 > 1), v11 + 1, 1, v6);
      }
      v6[2] = v11 + 1;
      uint64_t v7 = &v6[2 * v11];
      *((unsigned char *)v7 + 32) = v9;
      *((_WORD *)v7 + 17) = HIWORD(v9);
      v7[5] = v8;
    }
    ++v5;
  }
  while (v3 != v5);
  swift_bridgeObjectRelease();
  return v6;
}

unint64_t sub_10036ACBC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for NANAttribute(0) - 8;
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v9 = *(void *)(a1 + 16);
  unint64_t v10 = _swiftEmptyArrayStorage;
  if (!v9) {
    return (unint64_t)v10;
  }
  uint64_t v18 = v2;
  uint64_t v19 = v6;
  Swift::Int v20 = _swiftEmptyArrayStorage;
  unint64_t result = sub_1000837FC(0, v9, 0);
  unint64_t v10 = v20;
  uint64_t v12 = (char *)(a1 + 32);
  while (*(void *)(a2 + 16))
  {
    unint64_t result = sub_10039F7B4(*v12);
    if ((v13 & 1) == 0) {
      goto LABEL_10;
    }
    uint64_t v14 = v19;
    uint64_t v15 = *(void *)(v19 + 72);
    sub_10036BA3C(*(void *)(a2 + 56) + v15 * result, (uint64_t)v8, type metadata accessor for NANAttribute);
    Swift::Int v20 = v10;
    unint64_t v17 = v10[2];
    unint64_t v16 = v10[3];
    if (v17 >= v16 >> 1)
    {
      sub_1000837FC(v16 > 1, v17 + 1, 1);
      uint64_t v14 = v19;
      unint64_t v10 = v20;
    }
    v10[2] = v17 + 1;
    unint64_t result = sub_100297894((uint64_t)v8, (uint64_t)v10+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ v17 * v15, type metadata accessor for NANAttribute);
    ++v12;
    if (!--v9) {
      return (unint64_t)v10;
    }
  }
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_10036AE84()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10036AEBC()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10036AEF4()
{
  return sub_1003590A0();
}

uint64_t sub_10036AF00(char *a1, uint64_t a2)
{
  return sub_100366AB4(a1, a2) & 1;
}

BOOL sub_10036AF24(unsigned __int8 *a1, uint64_t a2)
{
  return sub_100366E80(a1, a2, v2);
}

uint64_t sub_10036AF44()
{
  swift_release();

  return _swift_deallocObject(v0, 47, 7);
}

uint64_t sub_10036AF7C(uint64_t a1)
{
  return sub_1003657F0(a1, *(void *)(v1 + 32), *(unsigned __int16 *)(v1 + 40) | ((unint64_t)*(unsigned int *)(v1 + 42) << 16), *(unsigned char *)(v1 + 46));
}

uint64_t sub_10036AF98()
{
  return sub_100365B10(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10036AFA0()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 608);
  swift_beginAccess();
  return *(void *)(v1 + *(int *)(sub_100010BCC(&qword_100487CE8) + 40));
}

uint64_t sub_10036B004()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10036B03C(unsigned __int8 *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_10036B068(unsigned __int16 *a1)
{
  return sub_10036B0D0(a1);
}

uint64_t sub_10036B084(void *a1)
{
  return (*(uint64_t (**)(void, void))(v1 + 16))(*a1, a1[1]);
}

uint64_t sub_10036B0B4(unsigned __int16 *a1)
{
  return sub_10036B0D0(a1);
}

uint64_t sub_10036B0D0(unsigned __int16 *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_10036B0F8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(v1 + 16))(a1 & 0xFFFFFFFFFFFFLL);
}

uint64_t sub_10036B124(unsigned int *a1)
{
  return (*(uint64_t (**)(unint64_t))(v1 + 16))(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 5) << 40));
}

uint64_t sub_10036B160(unsigned int *a1)
{
  return (*(uint64_t (**)(unint64_t))(v1 + 16))(*a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32));
}

uint64_t sub_10036B194(unsigned int *a1)
{
  return (*(uint64_t (**)(unint64_t, void))(v1 + 16))(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 5) << 40) | ((unint64_t)*((unsigned __int8 *)a1 + 6) << 48), *((void *)a1 + 1));
}

uint64_t sub_10036B1E0(uint64_t *a1)
{
  return sub_10035E4CC(a1);
}

uint64_t sub_10036B278()
{
  return sub_10036B5E0((uint64_t (*)(void))&type metadata accessor for Logger);
}

void sub_10036B290(uint64_t a1)
{
  type metadata accessor for Logger();

  sub_10035EB20(a1);
}

uint64_t sub_10036B318()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_unownedRelease();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10036B400(char a1)
{
  uint64_t v2 = a1 & 1;
  uint64_t v3 = *(void *)(type metadata accessor for Logger() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_100362418(v2, *(void *)(v1 + 32), v1 + v4, *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_10036B4B0()
{
  swift_unownedRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10036B4E8(char a1)
{
  return sub_100363CC0(a1 & 1, *(void *)(v1 + 32));
}

uint64_t sub_10036B4F8(unsigned __int8 *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_10036B524(char a1)
{
  return sub_100363DD8(a1 & 1, *(void *)(v1 + 32));
}

uint64_t sub_10036B534(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NANDriverCapabilities();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10036B598()
{
  return sub_10036B5E0((uint64_t (*)(void))&type metadata accessor for DispatchTime);
}

uint64_t sub_10036B5B0()
{
  return sub_10036B6CC((uint64_t (*)(uint64_t, char *, uint64_t, uint64_t))sub_100366308);
}

uint64_t sub_10036B5C8()
{
  return sub_10036B5E0((uint64_t (*)(void))&type metadata accessor for DispatchTime);
}

uint64_t sub_10036B5E0(uint64_t (*a1)(void))
{
  uint64_t v2 = a1(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 40) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);

  return _swift_deallocObject(v1, v6, v7);
}

uint64_t sub_10036B6B4()
{
  return sub_10036B6CC((uint64_t (*)(uint64_t, char *, uint64_t, uint64_t))sub_100365DB8);
}

uint64_t sub_10036B6CC(uint64_t (*a1)(uint64_t, char *, uint64_t, uint64_t))
{
  uint64_t v2 = v1[2];
  uint64_t v3 = v1[3];
  uint64_t v4 = *(void *)(type metadata accessor for DispatchTime() - 8);
  uint64_t v5 = v1[4];
  uint64_t v6 = (char *)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return a1(v5, v6, v2, v3);
}

uint64_t sub_10036B760(uint64_t a1)
{
  return a1;
}

uint64_t sub_10036B854(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10036B8B4(__int16 *a1)
{
  return sub_10036B8CC(a1);
}

uint64_t sub_10036B8CC(__int16 *a1)
{
  __int16 v1 = *a1;
  sub_100359AEC();
  sub_10036CED4(v1);
  return swift_release();
}

uint64_t sub_10036B914(uint64_t *a1)
{
  return sub_1003656B0(a1, *(void (**)(uint64_t))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_10036B938(uint64_t a1)
{
  return sub_10036B994(a1, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_10035EA60);
}

uint64_t sub_10036B968(uint64_t a1)
{
  return sub_10036B994(a1, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_10035E850);
}

uint64_t sub_10036B994(uint64_t a1, uint64_t (*a2)(uint64_t, unint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  return a2(a1, v2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), v5, v6);
}

uint64_t sub_10036BA3C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10036BAA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 & 0xFFFFFFFFFFFFFFLL;
  swift_getAssociatedTypeWitness();
  return sub_10035E324(v3, a2);
}

uint64_t sub_10036BB54(uint64_t a1)
{
  return sub_10036BD94(a1, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_10035E0D0);
}

uint64_t sub_10036BB84(uint64_t a1)
{
  return sub_10036BD94(a1, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_10035DEC0);
}

uint64_t sub_10036BBB4(uint64_t a1)
{
  return sub_10036BCBC(a1, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_10035DCB0);
}

uint64_t sub_10036BBE4(uint64_t a1, uint64_t a2)
{
  return sub_10035DA20(a1, a2);
}

uint64_t sub_10036BC90(uint64_t a1)
{
  return sub_10036BCBC(a1, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_10035D810);
}

uint64_t sub_10036BCBC(uint64_t a1, uint64_t (*a2)(uint64_t, unint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  return a2(a1, v2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), v5, v6);
}

uint64_t sub_10036BD68(uint64_t a1)
{
  return sub_10036BD94(a1, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_10035D600);
}

uint64_t sub_10036BD94(uint64_t a1, uint64_t (*a2)(uint64_t, unint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  return a2(v4, v2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), v5, v6);
}

uint64_t sub_10036BE40()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, AssociatedTypeWitness);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10036BEE8(char a1)
{
  char v1 = a1 & 1;
  swift_getAssociatedTypeWitness();
  return sub_10035D3F0(v1);
}

uint64_t sub_10036BF80(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10036BFC8(void *a1)
{
  return sub_100271FE0(a1);
}

uint64_t sub_10036C01C(unsigned __int8 *a1)
{
  return sub_10036B03C(a1);
}

uint64_t sub_10036C038()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

BOOL sub_10036C0FC(char *a1, char *a2)
{
  return static AWDLPeer.Reachability.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int sub_10036C114()
{
  return AWDLPeer.Reachability.hashValue.getter(*v0);
}

void sub_10036C124(uint64_t a1)
{
  AWDLPeer.Reachability.hash(into:)(a1, *v1);
}

Swift::Int sub_10036C134()
{
  Hasher.init(_seed:)();
  AWDLPeer.Reachability.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t sub_10036C180()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v1 = type metadata accessor for Preferences();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v14 - v3;
  uint64_t v5 = *(void *)(v0 + qword_100487D60);
  uint64_t v6 = swift_unownedRetainStrong();
  (*(void (**)(uint64_t))(*(void *)v5 + 168))(v6);
  swift_release();
  uint64_t v7 = Preferences.enableUserspaceP2POptions.getter(v1);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  if ((*(void *)PreferenceDefaults.EnableUserspaceP2POptions.localeManager.unsafeMutableAddressor() & ~v7) != 0)
  {
    char v12 = 0;
  }
  else
  {
    uint64_t v8 = swift_unownedRetainStrong();
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 176))(v8);
    swift_release();
    uint64_t v10 = *WiFiDriverCapabilities.peerCountryCodeLearningCapable.unsafeMutableAddressor();
    uint64_t v14 = v9;
    uint64_t v15 = v10;
    unint64_t v11 = sub_1002C8868();
    swift_bridgeObjectRetain_n();
    ExtendableOptionSet.formIntersection(_:)((uint64_t)&v14, (uint64_t)&type metadata for WiFiDriverCapabilities, v11);
    char v12 = sub_1000956AC(v15, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v12 & 1;
}

void sub_10036C414()
{
  uint64_t v1 = v0;
  swift_retain_n();
  osos_log_t log = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    uint64_t v8 = v4;
    uint64_t v5 = CountryCode.description.getter(*(_WORD *)(v1 + qword_100487D48));
    sub_100010680(v5, v6, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "Peer country code: %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }
}

uint64_t sub_10036C5B4()
{
  return *(unsigned __int16 *)(v0 + qword_100487D48);
}

void sub_10036C5C4(__int16 a1)
{
  *(_WORD *)(v1 + qword_100487D48) = a1;
  sub_10036C414();
}

void sub_10036C5D4()
{
  swift_retain_n();
  uint64_t v0 = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v0, v1))
  {
    os_log_type_t v2 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v2 = 136315138;
    type metadata accessor for LocaleManager.State();
    uint64_t v3 = String.init<A>(describing:)();
    sub_100010680(v3, v4, &v5);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v0, v1, "Current country code state: %s", v2, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  sub_10036CA24();
}

uint64_t sub_10036C798()
{
  return *(unsigned __int8 *)(v0 + qword_100487D50);
}

void sub_10036C7A8(char a1)
{
  *(unsigned char *)(v1 + qword_100487D50) = a1;
  sub_10036C5D4();
}

void sub_10036C7B8()
{
  swift_retain();
  osos_log_t log = Logger.logObject.getter();
  os_log_type_t v0 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v0))
  {
    uint64_t v1 = (uint8_t *)swift_slowAlloc();
    uint64_t v2 = swift_slowAlloc();
    *(_DWORD *)uint64_t v1 = 136315138;
    uint64_t v7 = v2;
    swift_bridgeObjectRetain();
    uint64_t v3 = Array.description.getter();
    unint64_t v5 = v4;
    swift_bridgeObjectRelease();
    sub_100010680(v3, v5, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, oslog, v0, "Supported channels information: %s", v1, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release();
  }
}

void sub_10036C97C(uint64_t a1)
{
  *(void *)(v1 + qword_100487D58) = a1;
  swift_bridgeObjectRelease();

  sub_10036C7B8();
}

uint64_t sub_10036C9B8(uint64_t a1, unsigned __int8 *a2)
{
  __int16 v2 = *a2;
  __int16 v3 = a2[1];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10036CE48(v2 | (v3 << 8));
    return swift_release();
  }
  return result;
}

void sub_10036CA24()
{
  uint64_t v1 = v0;
  if (*(unsigned char *)(v0 + qword_100487D50) == 3)
  {
    swift_retain_n();
    __int16 v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      unint64_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v5 = swift_slowAlloc();
      *(_DWORD *)unint64_t v4 = 136315138;
      uint64_t v11 = v5;
      uint64_t v6 = CountryCode.description.getter(*(_WORD *)(v1 + qword_100487D48));
      sub_100010680(v6, v7, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Would have set country code %s received from peer", v4, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    *(unsigned char *)(v1 + qword_100487D50) = 4;
    sub_10036C5D4();
  }
  else
  {
    osos_log_t log = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(oslog, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v8, "Nothing to do", v9, 2u);
      swift_slowDealloc();
    }
  }
}

void sub_10036CC60(__int16 a1)
{
  uint64_t v2 = v1;
  unsigned __int8 v3 = a1;
  int v4 = HIBYTE(a1);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  os_log_type_t v8 = (char *)&v14 - v7;
  uint64_t v9 = CountryCode.unknown.unsafeMutableAddressor();
  if (*(unsigned __int8 *)v9 == v3 && *((unsigned __int8 *)v9 + 1) == v4)
  {
    char v13 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v11 = *(void *)(v1 + qword_100487D60);
    swift_unownedRetainStrong();
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v11 + *(void *)(*(void *)v11 + 96), AssociatedTypeWitness);
    swift_release();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    char v13 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 128))(AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  }
  *(void *)(v2 + qword_100487D58) = v13;
  swift_bridgeObjectRelease();
  sub_10036C7B8();
}

void sub_10036CE48(__int16 a1)
{
  if (sub_10036C180())
  {
    unsigned __int8 v3 = CountryCode.unknown.unsafeMutableAddressor();
    if (*((unsigned __int8 *)v3 + 1) == (unsigned __int16)(a1 & 0xFF00) >> 8
      && *(unsigned __int8 *)v3 == a1)
    {
      char v5 = 2;
    }
    else
    {
      char v5 = 1;
    }
    *(unsigned char *)(v1 + qword_100487D50) = v5;
    sub_10036C5D4();
    sub_10036CC60(a1);
    sub_10036D164();
  }
}

void sub_10036CED4(__int16 a1)
{
  if (sub_10036C180())
  {
    *(_WORD *)(v1 + qword_100487D48) = a1;
    sub_10036C414();
    *(unsigned char *)(v1 + qword_100487D50) = 3;
    sub_10036C5D4();
  }
}

uint64_t sub_10036CF38()
{
  uint64_t v1 = v0 + qword_100488A00;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_unownedRelease();
  swift_release();
  return v0;
}

uint64_t sub_10036CFCC()
{
  sub_10036CF38();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LocaleManager()
{
  return sub_100038354();
}

unsigned char *sub_10036D03C(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10036D108);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

uint64_t type metadata accessor for LocaleManager.State()
{
  return sub_100038354();
}

uint64_t sub_10036D148()
{
  return swift_getWitnessTable();
}

void sub_10036D164()
{
  osos_log_t log = Logger.logObject.getter();
  os_log_type_t v0 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v0))
  {
    uint64_t v1 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v0, "WARNING: Calling empty updateSocialChannels()", v1, 2u);
    swift_slowDealloc();
  }
}

void *sub_10036D210(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v4 = v3;
  uint64_t v26 = a3;
  uint64_t v27 = a2;
  uint64_t v25 = *v4;
  uint64_t v6 = v25;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v23 = *(void *)(v7 - 8);
  uint64_t v24 = v7;
  __chkstk_darwin();
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = qword_100487D48;
  *(_WORD *)((char *)v4 + v10) = *CountryCode.unknown.unsafeMutableAddressor();
  *((unsigned char *)v4 + qword_100487D50) = 0;
  *(void *)((char *)v4 + qword_100487D58) = _swiftEmptyArrayStorage;
  *(void *)((char *)v4 + qword_100487D68) = 0;
  *(void *)((char *)v4 + qword_100487D60) = a1;
  uint64_t v11 = *(void *)(v6 + 96);
  uint64_t v12 = *(void *)(v6 + 80);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32);
  swift_unownedRetain();
  uint64_t v15 = swift_checkMetadataState();
  v14(v15, AssociatedConformanceWitness);
  Logger.init(subsystem:category:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))((uint64_t)v4 + qword_100488A00, v9, v24);
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  unint64_t v17 = (void *)swift_allocObject();
  void v17[2] = v12;
  void v17[3] = *(void *)(v25 + 88);
  void v17[4] = v11;
  v17[5] = v16;
  uint64_t v18 = (void *)((char *)v4 + qword_100487D68);
  swift_beginAccess();
  uint64_t v19 = sub_100010BCC((uint64_t *)&unk_100487D30);
  uint64_t v20 = v27;
  ObservableWiFiProperty.registerForChanges(on:using:valueUpdateHandler:)(v26, v18, (uint64_t)sub_10036D678, (uint64_t)v17, v19, (uint64_t)&v28);
  swift_endAccess();
  swift_release();
  sub_10036CE48(v28);
  sub_10036D684(v20);
  return v4;
}

void *sub_10036D5A8(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_10036D210(a1, a2, a3);
}

uint64_t sub_10036D608()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10036D640()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10036D678(uint64_t a1, unsigned __int8 *a2)
{
  return sub_10036C9B8(a1, a2);
}

uint64_t sub_10036D684(uint64_t a1)
{
  uint64_t v2 = sub_100010BCC((uint64_t *)&unk_100487D30);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10036D6E4()
{
  return swift_initClassMetadata2();
}

uint64_t sub_10036D728()
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

uint64_t sub_10036D750()
{
  swift_unownedRelease();
  swift_unownedRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PeerCacheManager()
{
  return swift_getGenericMetadata();
}

char *sub_10036D7A8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v40 = *(void *)(v5 - 8);
  uint64_t v41 = v5;
  __chkstk_darwin();
  uint64_t v39 = (char *)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38[1] = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin();
  type metadata accessor for DispatchQoS();
  __chkstk_darwin();
  uint64_t v7 = OBJC_IVAR____TtC12wifip2pdCore9XPCServer_lock;
  type metadata accessor for Lock();
  swift_allocObject();
  uint64_t v8 = v2;
  *(void *)&v2[v7] = Lock.init()();
  *(void *)&v8[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_gracePeriodEndedTimer] = 0;
  *(void *)&v8[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_pendingSessions] = _swiftEmptyArrayStorage;
  uint64_t v9 = &v8[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_lastProcessName];
  *(void *)uint64_t v9 = 0;
  *((void *)v9 + 1) = 0;
  uint64_t v10 = &v8[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_lastProcessID];
  *(_DWORD *)uint64_t v10 = 0;
  v10[4] = 1;
  *(_DWORD *)&v8[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_unlockObserver] = -1;
  uint64_t v11 = &v8[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_newSessionGracePeriod];
  *(void *)&v8[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_newSessionGracePeriod] = 60;
  uint64_t v12 = enum case for DispatchTimeInterval.seconds(_:);
  uint64_t v13 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 104))(v11, v12, v13);
  uint64_t v14 = &v8[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_newSessionHandler];
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = 0;
  type metadata accessor for P2PTimer();
  variable initialization expression of AWDLPeer.lastUpdated();
  Logger.init(subsystem:category:)();
  id v15 = objc_allocWithZone((Class)NSXPCListener);
  swift_bridgeObjectRetain();
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v17 = [v15 initWithMachServiceName:v16];

  *(void *)&v8[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_listener] = v17;
  uint64_t v18 = self;
  id v19 = [v18 anonymousListener];
  *(void *)&v8[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_p2pListener] = v19;
  id v20 = [v18 anonymousListener];
  *(void *)&v8[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_awdlListener] = v20;
  id v21 = [v18 anonymousListener];
  *(void *)&v8[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_nanListener] = v21;
  uint64_t v22 = &v8[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_entitlement];
  *(void *)uint64_t v22 = a1;
  *((void *)v22 + 1) = a2;

  uint64_t v23 = (objc_class *)type metadata accessor for XPCServer();
  v43.receiver = v8;
  v43.super_class = v23;
  uint64_t v24 = (char *)[super init];
  uint64_t v25 = OBJC_IVAR____TtC12wifip2pdCore9XPCServer_listener;
  uint64_t v26 = *(void **)&v24[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_listener];
  sub_10006F314(0, (unint64_t *)&qword_10047C320);
  uint64_t v27 = v24;
  id v28 = v26;
  static DispatchQoS.unspecified.getter();
  BOOL v42 = _swiftEmptyArrayStorage;
  sub_10036FD8C((unint64_t *)&unk_100488060, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100010BCC((uint64_t *)&unk_10047C330);
  sub_10015149C(qword_100488070, (uint64_t *)&unk_10047C330);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v40 + 104))(v39, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v41);
  unint64_t v29 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  [v28 _setQueue:v29];

  [*(id *)&v24[v25] setDelegate:v27];
  uint64_t v30 = OBJC_IVAR____TtC12wifip2pdCore9XPCServer_p2pListener;
  id v31 = *(id *)&v27[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_p2pListener];
  [v31 _setQueue:*OS_dispatch_queue.p2p.unsafeMutableAddressor()];

  [*(id *)&v27[v30] setDelegate:v27];
  uint64_t v32 = OBJC_IVAR____TtC12wifip2pdCore9XPCServer_awdlListener;
  id v33 = *(id *)&v27[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_awdlListener];
  [v33 _setQueue:*OS_dispatch_queue.awdl.unsafeMutableAddressor()];

  [*(id *)&v27[v32] setDelegate:v27];
  uint64_t v34 = OBJC_IVAR____TtC12wifip2pdCore9XPCServer_nanListener;
  id v35 = *(id *)&v27[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_nanListener];
  [v35 _setQueue:*OS_dispatch_queue.nan.unsafeMutableAddressor()];

  id v36 = *(id *)&v27[v34];
  [v36 setDelegate:v27];

  return v27;
}

void sub_10036DD54(uint64_t a1, uint64_t a2)
{
  uint64_t v35 = a1;
  uint64_t v36 = a2;
  uint64_t v34 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v34 - 8);
  __chkstk_darwin();
  id v33 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v32 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[1] = *(void *)(v2 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_lock);
  Lock.lock()();
  *(void *)(v2 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_gracePeriodEndedTimer) = 0;
  swift_release();
  uint64_t v26 = v2;
  uint64_t v8 = (unint64_t *)(v2 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_pendingSessions);
  swift_beginAccess();
  unint64_t v9 = *v8;
  *uint64_t v8 = (unint64_t)_swiftEmptyArrayStorage;
  if (!(v9 >> 62))
  {
    uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v10) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease_n();
    uint64_t v22 = (void *)(v26 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_newSessionHandler);
    uint64_t v23 = *(void *)(v26 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_newSessionHandler);
    uint64_t v24 = v36;
    *uint64_t v22 = v35;
    v22[1] = v24;
    swift_retain();
    sub_100011E30(v23);
    Lock.unlock()();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  if (!v10) {
    goto LABEL_10;
  }
LABEL_3:
  if (v10 >= 1)
  {
    uint64_t v11 = 0;
    unint64_t v29 = v39;
    unint64_t v30 = v9 & 0xC000000000000001;
    id v28 = (void (**)(char *, uint64_t))(v3 + 8);
    uint64_t v27 = (void (**)(char *, uint64_t))(v5 + 8);
    unint64_t v31 = v9;
    uint64_t v12 = v34;
    do
    {
      uint64_t v21 = v10;
      if (v30) {
        id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v13 = *(id *)(v9 + 8 * v11 + 32);
      }
      uint64_t v14 = v13;
      ++v11;
      id v15 = (void *)swift_allocObject();
      uint64_t v16 = v35;
      uint64_t v17 = v36;
      void v15[2] = v14;
      uint64_t v15[3] = v16;
      void v15[4] = v17;
      void v39[2] = sub_10036FD78;
      void v39[3] = v15;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      v39[0] = sub_10000E5D0;
      v39[1] = &unk_100470378;
      uint64_t v18 = _Block_copy(aBlock);
      swift_retain();
      id v19 = v14;
      static DispatchQoS.unspecified.getter();
      uint64_t v37 = _swiftEmptyArrayStorage;
      sub_10036FD8C((unint64_t *)&qword_1004807A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_100010BCC((uint64_t *)&unk_10047D0F0);
      sub_10015149C((unint64_t *)&qword_1004807B0, (uint64_t *)&unk_10047D0F0);
      id v20 = v33;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v18);
      (*v28)(v20, v12);
      (*v27)(v7, v32);

      swift_release();
      uint64_t v10 = v21;
      unint64_t v9 = v31;
    }
    while (v21 != v11);
    goto LABEL_10;
  }
  __break(1u);
}

uint64_t sub_10036E1AC(void *a1, uint64_t (*a2)(void))
{
  id v3 = a1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = a2;
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138412290;
    id v9 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v8 = v3;

    a2 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Resuming %@ after Wi-Fi is ready", v7, 0xCu);
    sub_100010BCC(&qword_10047CC30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return a2(v3);
}

void sub_10036E330()
{
  uint64_t v1 = type metadata accessor for DispatchTimeInterval();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v18 - v5;
  __chkstk_darwin();
  uint64_t v8 = (char *)&v18 - v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))((char *)&v18 - v7, (uint64_t)v0 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_newSessionGracePeriod, v1);
  id v9 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v10 = *(void (**)(char *, void, uint64_t))(v2 + 104);
  v10(v6, enum case for DispatchTimeInterval.never(_:), v1);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v0;
  *(void *)uint64_t v4 = 100;
  v10(v4, enum case for DispatchTimeInterval.milliseconds(_:), v1);
  type metadata accessor for P2PTimer();
  swift_allocObject();
  id v12 = v9;
  id v13 = v0;
  *(void *)&v13[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_gracePeriodEndedTimer] = P2PTimer.init(deadlineAfter:on:repeating:leeway:_:)((uint64_t)v8, v12, (uint64_t)v6, (uint64_t)v4, (uint64_t)sub_10036FD84, v11);
  swift_release();
  [*(id *)&v13[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_listener] activate];
  [*(id *)&v13[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_p2pListener] activate];
  [*(id *)&v13[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_awdlListener] activate];
  [*(id *)&v13[OBJC_IVAR____TtC12wifip2pdCore9XPCServer_nanListener] activate];
  uint64_t v14 = (const char *)[self wifiPeerToPeerAvailableNotification];
  notify_post(v14);
  id v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Successfully started XPC server listening for new incoming client connections", v17, 2u);
    swift_slowDealloc();
  }
}

void sub_10036E618(uint64_t a1)
{
  v22[1] = *(void *)(a1 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_lock);
  Lock.lock()();
  *(void *)(a1 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_gracePeriodEndedTimer) = 0;
  swift_release();
  uint64_t v2 = (uint64_t *)(a1 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_pendingSessions);
  *(void *)&long long v3 = 138412290;
  long long v23 = v3;
  while (1)
  {
    swift_beginAccess();
    if ((unint64_t)*v2 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v21)
      {
LABEL_17:
        swift_endAccess();
        Lock.unlock()();
        return;
      }
    }
    else if (!*(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_17;
    }
    uint64_t v8 = *v2;
    int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
    *uint64_t v2 = v8;
    if (!isUniquelyReferenced_nonNull_bridgeObject || v8 < 0 || (v8 & 0x4000000000000000) != 0)
    {
      uint64_t v8 = sub_1003A4FE0(v8);
      *uint64_t v2 = v8;
    }
    uint64_t v10 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v10) {
      break;
    }
    uint64_t v11 = v10 - 1;
    id v12 = *(void **)((v8 & 0xFFFFFFFFFFFFFF8) + 8 * v11 + 0x20);
    *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) = v11;
    specialized Array._endMutation()();
    swift_endAccess();
    id v13 = v12;
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v17 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = v23;
      *(void *)(v16 + 4) = v13;
      void *v17 = v13;

      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Rejecting XPC connection from %@ because there is no Wi-Fi", (uint8_t *)v16, 0xCu);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    memset(v26, 0, sizeof(v26));
    uint64_t v18 = OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection;
    id v19 = *(void **)&v13[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection];
    sub_1000A6A90((uint64_t)v26, (uint64_t)v24);
    uint64_t v20 = v25;
    if (v25)
    {
      sub_1000369C4(v24, v25);
      uint64_t v4 = *(void *)(v20 - 8);
      __chkstk_darwin();
      uint64_t v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v4 + 16))(v6);
      uint64_t v7 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v20);
      sub_100010754((uint64_t)v24);
    }
    else
    {
      uint64_t v7 = 0;
    }
    [v19 setExportedObject:v7];
    swift_unknownObjectRelease();
    sub_1000D4FD4((uint64_t)v26);
    [*(id *)&v13[v18] activate];
  }
  __break(1u);
}

id sub_10036E9B0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for XPCServer();
  return [super dealloc];
}

uint64_t sub_10036EB8C()
{
  return type metadata accessor for XPCServer();
}

uint64_t type metadata accessor for XPCServer()
{
  uint64_t result = qword_100487F88;
  if (!qword_100487F88) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10036EBE0()
{
  uint64_t result = type metadata accessor for DispatchTimeInterval();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for DispatchTime();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for Logger();
      if (v3 <= 0x3F) {
        return swift_updateClassMetadata2();
      }
    }
  }
  return result;
}

uint64_t sub_10036ED4C(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchTime();
  uint64_t v58 = *(void *)(v6 - 8);
  uint64_t v59 = v6;
  __chkstk_darwin();
  uint64_t v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchTimeInterval();
  uint64_t v57 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Logger();
  __chkstk_darwin();
  id v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v2 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_entitlement);
  uint64_t v14 = *(void **)(v2 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_entitlement + 8);
  v16._uint64_t countAndFlagsBits = v15;
  v16._object = v14;
  if (!NSXPCConnection.has(entitlement:)(v16))
  {
    id v25 = a2;
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      id v28 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v28 = 67109120;
      LODWORD(aBlock._countAndFlagsBits) = [v25 processIdentifier];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      unint64_t v29 = "Rejecting XPC connection from unentitled process with PID %d";
LABEL_19:
      _os_log_impl((void *)&_mh_execute_header, v26, v27, v29, v28, 8u);
      swift_slowDealloc();
LABEL_21:

      return 0;
    }
LABEL_20:

    goto LABEL_21;
  }
  if (MKBDeviceUnlockedSinceBoot() != 1)
  {
    aBlock._uint64_t countAndFlagsBits = v15;
    aBlock._object = v14;
    swift_bridgeObjectRetain();
    v17._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
    v17._object = (void *)0x80000001003E19B0;
    String.append(_:)(v17);
    Swift::Bool v18 = NSXPCConnection.has(entitlement:)(aBlock);
    swift_bridgeObjectRelease();
    if (!v18)
    {
      sub_10006F314(0, (unint64_t *)&qword_10047DC50);
      id v33 = *(void **)(v3 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_listener);
      if (static NSObject.== infix(_:_:)())
      {
        uint64_t v34 = (int *)(v3 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_unlockObserver);
        swift_beginAccess();
        if (*v34 == -1)
        {
          uint64_t v35 = [v33 _queue];
          uint64_t v36 = swift_allocObject();
          swift_unknownObjectWeakInit();
          uint64_t v62 = sub_10036FCF0;
          uint64_t v63 = v36;
          aBlock._uint64_t countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
          aBlock._object = (void *)1107296256;
          *(void *)&long long v61 = sub_100163154;
          *((void *)&v61 + 1) = &unk_1004702B0;
          uint64_t v37 = _Block_copy(&aBlock);
          swift_release();
          swift_beginAccess();
          notify_register_dispatch("com.apple.mobile.keybagd.lock_status", v34, v35, v37);
          swift_endAccess();
          _Block_release(v37);
        }
      }
      id v25 = a2;
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v26, v27))
      {
        id v28 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)id v28 = 67109120;
        LODWORD(aBlock._countAndFlagsBits) = [v25 processIdentifier];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        unint64_t v29 = "Rejecting XPC connection from process with PID %d because device has never been unlocked";
        goto LABEL_19;
      }
      goto LABEL_20;
    }
  }
  id v19 = [a1 _queue];
  [a2 _setQueue:v19];

  sub_10006F314(0, (unint64_t *)&qword_10047DC50);
  if (static NSObject.== infix(_:_:)())
  {
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = a2;
    uint64_t v62 = sub_10036FD30;
    uint64_t v63 = v20;
    aBlock._uint64_t countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
    aBlock._object = (void *)1107296256;
    *(void *)&long long v61 = sub_10000E5D0;
    *((void *)&v61 + 1) = &unk_100470300;
    uint64_t v21 = _Block_copy(&aBlock);
    id v22 = a2;
    swift_release();
    [v22 setInvalidationHandler:v21];
    _Block_release(v21);
    id v23 = [self interfaceWithProtocol:&OBJC_PROTOCOL___WiFiP2PXPCListenerProtocol];
    [v22 setExportedInterface:v23];

    [v22 setExportedObject:v3];
    [v22 activate];
    return 1;
  }
  uint64_t v56 = *(void *)(v3 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_lock);
  Lock.lock()();
  unsigned int v30 = [a2 processIdentifier];
  if ((*(unsigned char *)(v3 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_lastProcessID + 4) & 1) != 0
    || v30 != *(_DWORD *)(v3 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_lastProcessID))
  {
    uint64_t v54 = 0;
    uint64_t v55 = 0;
  }
  else
  {
    uint64_t v31 = *(void *)(v3 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_lastProcessName);
    uint64_t v54 = *(void *)(v3 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_lastProcessName + 8);
    uint64_t v55 = v31;
    swift_bridgeObjectRetain();
  }
  if ((static NSObject.== infix(_:_:)() & 1) == 0) {
    static NSObject.== infix(_:_:)();
  }
  id v32 = [a2 _queue];
  Logger.init(subsystem:category:)();
  id v38 = objc_allocWithZone((Class)type metadata accessor for XPCSession(0));
  uint64_t v39 = sub_1002BBCFC(a2, v32, (uint64_t)v13, v55, v54);

  uint64_t v40 = *(void (**)(char *))(v3 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_newSessionHandler);
  if (v40)
  {
    swift_retain();
    Lock.unlock()();
    v40(v39);

    sub_100011E30((uint64_t)v40);
    return 1;
  }
  type metadata accessor for P2PTimer();
  variable initialization expression of AWDLPeer.lastUpdated();
  DispatchTime.distance(to:)();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v8, v59);
  BOOL v41 = static DispatchTimeInterval.< infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v57 + 8))(v11, v9);
  BOOL v42 = v39;
  objc_super v43 = Logger.logObject.getter();
  if (!v41)
  {
    os_log_type_t v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v48))
    {
      uint64_t v49 = (uint8_t *)swift_slowAlloc();
      uint64_t v50 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v49 = 138412290;
      aBlock._uint64_t countAndFlagsBits = (uint64_t)v42;
      uint64_t v51 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v50 = v42;

      _os_log_impl((void *)&_mh_execute_header, v43, v48, "Rejecting XPC connection from %@ because there is no Wi-Fi", v49, 0xCu);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    Swift::String aBlock = (Swift::String)0;
    long long v61 = 0u;
    sub_1002B9B5C((uint64_t)&aBlock);
    Lock.unlock()();

    return 0;
  }
  os_log_type_t v44 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v43, v44))
  {
    uint64_t v45 = (uint8_t *)swift_slowAlloc();
    uint64_t v46 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v45 = 138412290;
    aBlock._uint64_t countAndFlagsBits = (uint64_t)v42;
    uint64_t v47 = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v46 = v42;

    _os_log_impl((void *)&_mh_execute_header, v43, v44, "Blocking %@ while waiting for Wi-Fi to come up", v45, 0xCu);
    sub_100010BCC(&qword_10047CC30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  BOOL v52 = (void *)(v3 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_pendingSessions);
  swift_beginAccess();
  uint64_t v53 = v42;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*v52 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v52 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  Lock.unlock()();

  return 1;
}

void sub_10036F894()
{
  if (MKBDeviceUnlockedSinceBoot() == 1)
  {
    uint64_t v0 = (const char *)[self wifiPeerToPeerAvailableNotification];
    notify_post(v0);
    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v2 = (void *)Strong;
      uint64_t v3 = (int *)(Strong + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_unlockObserver);
      swift_beginAccess();
      if (*v3 != -1)
      {
        notify_cancel(*v3);
        int *v3 = -1;
      }
    }
  }
}

void sub_10036F948(void *a1)
{
  v3[4] = NANBitmap.Channel.operatingClass.getter;
  v3[5] = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 1107296256;
  v3[2] = sub_10000E5D0;
  v3[3] = &unk_100470328;
  uint64_t v2 = _Block_copy(v3);
  [a1 setInvalidationHandler:v2];
  _Block_release(v2);
}

void sub_10036FAF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Lock.lock()();
  uint64_t v10 = self;
  id v11 = [v10 currentConnection];
  uint64_t v12 = v11;
  if (v11)
  {
    unsigned int v13 = [v11 processIdentifier];
  }
  else
  {
    unsigned int v13 = 0;
  }
  uint64_t v14 = a4 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_lastProcessID;
  *(_DWORD *)uint64_t v14 = v13;
  *(unsigned char *)(v14 + 4) = v12 == 0;
  uint64_t v15 = (void *)(a4 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_lastProcessName);
  *uint64_t v15 = a2;
  v15[1] = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  Lock.unlock()();
  switch(a1)
  {
    case 2:
      id v16 = [*(id *)(a4 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_awdlListener) endpoint];
      goto LABEL_10;
    case 1:
      id v16 = [*(id *)(a4 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_nanListener) endpoint];
      goto LABEL_10;
    case 0:
      id v16 = [*(id *)(a4 + OBJC_IVAR____TtC12wifip2pdCore9XPCServer_p2pListener) endpoint];
LABEL_10:
      id v17 = v16;
      (*(void (**)(uint64_t))(a5 + 16))(a5);
      goto LABEL_12;
  }
  id v17 = [v10 currentConnection];
  [v17 invalidate];
LABEL_12:
}

uint64_t sub_10036FCB8()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10036FCF0()
{
}

uint64_t sub_10036FCF8()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_10036FD30()
{
  sub_10036F948(*(void **)(v0 + 16));
}

uint64_t sub_10036FD38()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10036FD78()
{
  return sub_10036E1AC(*(void **)(v0 + 16), *(uint64_t (**)(void))(v0 + 24));
}

void sub_10036FD84()
{
  sub_10036E618(*(void *)(v0 + 16));
}

uint64_t sub_10036FD8C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_10036FDE8()
{
  sub_10039D9F4(319, (unint64_t *)&qword_10047DA60, (void (*)(uint64_t))&type metadata accessor for DispatchTime);
  if (v0 <= 0x3F)
  {
    type metadata accessor for DispatchTime();
    if (v1 <= 0x3F) {
      swift_initClassMetadata2();
    }
  }
}

uint64_t sub_10036FF84(void (*a1)(int *), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v27 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  while (v9)
  {
    unint64_t v12 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v13 = v12 | (v11 << 6);
LABEL_5:
    uint64_t v14 = *(void *)(a3 + 56) + 24 * v13;
    __int16 v15 = *(_WORD *)(v14 + 4);
    char v16 = *(unsigned char *)(v14 + 6);
    uint64_t v17 = *(void *)(v14 + 8);
    unint64_t v18 = *(void *)(v14 + 16);
    int v22 = *(_DWORD *)v14;
    __int16 v23 = v15;
    char v24 = v16;
    uint64_t v25 = v17;
    unint64_t v26 = v18;
    sub_100038004(v17, v18);
    a1(&v22);
    uint64_t result = sub_10000C95C(v17, v18);
    if (v3) {
      return swift_release();
    }
  }
  if (__OFADD__(v11++, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v11 >= v27) {
    return swift_release();
  }
  unint64_t v20 = *(void *)(v6 + 8 * v11);
  if (v20)
  {
LABEL_19:
    unint64_t v9 = (v20 - 1) & v20;
    unint64_t v13 = __clz(__rbit64(v20)) + (v11 << 6);
    goto LABEL_5;
  }
  int64_t v21 = v11 + 1;
  if (v11 + 1 >= v27) {
    return swift_release();
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20) {
    goto LABEL_18;
  }
  int64_t v21 = v11 + 2;
  if (v11 + 2 >= v27) {
    return swift_release();
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20) {
    goto LABEL_18;
  }
  int64_t v21 = v11 + 3;
  if (v11 + 3 >= v27) {
    return swift_release();
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20) {
    goto LABEL_18;
  }
  int64_t v21 = v11 + 4;
  if (v11 + 4 >= v27) {
    return swift_release();
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
LABEL_18:
    int64_t v11 = v21;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v11 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v11 >= v27) {
      return swift_release();
    }
    unint64_t v20 = *(void *)(v6 + 8 * v11);
    ++v21;
    if (v20) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100370160(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(type metadata accessor for AWDLPeer.AdvertisedService(0) - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v22 - v9;
  uint64_t v11 = *(void *)(a3 + 56);
  uint64_t v23 = a3 + 56;
  uint64_t v12 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  int64_t v24 = (unint64_t)(v12 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v16 = 0;
  while (v14)
  {
    unint64_t v17 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    unint64_t v18 = v17 | (v16 << 6);
LABEL_5:
    sub_1003AB930(*(void *)(a3 + 48) + *(void *)(v6 + 72) * v18, (uint64_t)v10, type metadata accessor for AWDLPeer.AdvertisedService);
    sub_1003AB998((uint64_t)v10, (uint64_t)v8, type metadata accessor for AWDLPeer.AdvertisedService);
    a1(v8);
    uint64_t result = sub_1003AB6C0((uint64_t)v8, type metadata accessor for AWDLPeer.AdvertisedService);
    if (v3) {
      return swift_release();
    }
  }
  if (__OFADD__(v16++, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v16 >= v24) {
    return swift_release();
  }
  unint64_t v20 = *(void *)(v23 + 8 * v16);
  if (v20)
  {
LABEL_19:
    unint64_t v14 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v16 << 6);
    goto LABEL_5;
  }
  int64_t v21 = v16 + 1;
  if (v16 + 1 >= v24) {
    return swift_release();
  }
  unint64_t v20 = *(void *)(v23 + 8 * v21);
  if (v20) {
    goto LABEL_18;
  }
  int64_t v21 = v16 + 2;
  if (v16 + 2 >= v24) {
    return swift_release();
  }
  unint64_t v20 = *(void *)(v23 + 8 * v21);
  if (v20) {
    goto LABEL_18;
  }
  int64_t v21 = v16 + 3;
  if (v16 + 3 >= v24) {
    return swift_release();
  }
  unint64_t v20 = *(void *)(v23 + 8 * v21);
  if (v20) {
    goto LABEL_18;
  }
  int64_t v21 = v16 + 4;
  if (v16 + 4 >= v24) {
    return swift_release();
  }
  unint64_t v20 = *(void *)(v23 + 8 * v21);
  if (v20)
  {
LABEL_18:
    int64_t v16 = v21;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v16 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v16 >= v24) {
      return swift_release();
    }
    unint64_t v20 = *(void *)(v23 + 8 * v16);
    ++v21;
    if (v20) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100370408(void (*a1)(long long *), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  if (!v9) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v13 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    long long v18 = *(_OWORD *)(*(void *)(a3 + 56) + 16 * i);
    swift_retain();
    a1(&v18);
    if (v3)
    {
      swift_release();
      return swift_release();
    }
    uint64_t result = swift_release();
    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v12++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v12 >= v10) {
      return swift_release();
    }
    unint64_t v16 = *(void *)(v6 + 8 * v12);
    if (!v16) {
      break;
    }
LABEL_17:
    unint64_t v9 = (v16 - 1) & v16;
  }
  int64_t v17 = v12 + 1;
  if (v12 + 1 >= v10) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_16;
  }
  int64_t v17 = v12 + 2;
  if (v12 + 2 >= v10) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_16;
  }
  int64_t v17 = v12 + 3;
  if (v12 + 3 >= v10) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_16;
  }
  int64_t v17 = v12 + 4;
  if (v12 + 4 >= v10) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
LABEL_16:
    int64_t v12 = v17;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v12 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v12 >= v10) {
      return swift_release();
    }
    unint64_t v16 = *(void *)(v6 + 8 * v12);
    ++v17;
    if (v16) {
      goto LABEL_17;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1003705B8(uint64_t (*a1)(int *), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  while (v9)
  {
    unint64_t v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v14 = v13 | (v12 << 6);
LABEL_5:
    uint64_t v15 = *(void *)(a3 + 48) + 6 * v14;
    __int16 v16 = *(_WORD *)(v15 + 4);
    uint64_t v17 = *(void *)(*(void *)(a3 + 56) + 8 * v14);
    int v21 = *(_DWORD *)v15;
    __int16 v22 = v16;
    uint64_t v23 = v17;
    uint64_t result = a1(&v21);
    if (v3) {
      return swift_release();
    }
  }
  if (__OFADD__(v12++, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v12 >= v10) {
    return swift_release();
  }
  unint64_t v19 = *(void *)(v6 + 8 * v12);
  if (v19)
  {
LABEL_19:
    unint64_t v9 = (v19 - 1) & v19;
    unint64_t v14 = __clz(__rbit64(v19)) + (v12 << 6);
    goto LABEL_5;
  }
  int64_t v20 = v12 + 1;
  if (v12 + 1 >= v10) {
    return swift_release();
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19) {
    goto LABEL_18;
  }
  int64_t v20 = v12 + 2;
  if (v12 + 2 >= v10) {
    return swift_release();
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19) {
    goto LABEL_18;
  }
  int64_t v20 = v12 + 3;
  if (v12 + 3 >= v10) {
    return swift_release();
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19) {
    goto LABEL_18;
  }
  int64_t v20 = v12 + 4;
  if (v12 + 4 >= v10) {
    return swift_release();
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
LABEL_18:
    int64_t v12 = v20;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v12 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v12 >= v10) {
      return swift_release();
    }
    unint64_t v19 = *(void *)(v6 + 8 * v12);
    ++v20;
    if (v19) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100370758(void (*a1)(void), uint64_t a2)
{
  return sub_100370C08(a1, a2, (uint64_t *)&unk_1004883A0, (unint64_t)sub_1003ABC84, (void (*)(uint64_t *))sub_1003ABA00, (void (*)(unsigned char *))sub_1003ABA2C);
}

uint64_t sub_1003707B4(uint64_t (*a1)(int *), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  while (v9)
  {
    unint64_t v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v14 = v13 | (v12 << 6);
LABEL_5:
    uint64_t v15 = *(void *)(a3 + 48) - v14 + 8 * v14;
    __int16 v16 = *(_WORD *)(v15 + 4);
    char v17 = *(unsigned char *)(v15 + 6);
    int v21 = *(_DWORD *)v15;
    __int16 v22 = v16;
    char v23 = v17;
    uint64_t result = a1(&v21);
    if (v3) {
      return swift_release();
    }
  }
  if (__OFADD__(v12++, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v12 >= v10) {
    return swift_release();
  }
  unint64_t v19 = *(void *)(v6 + 8 * v12);
  if (v19)
  {
LABEL_19:
    unint64_t v9 = (v19 - 1) & v19;
    unint64_t v14 = __clz(__rbit64(v19)) + (v12 << 6);
    goto LABEL_5;
  }
  int64_t v20 = v12 + 1;
  if (v12 + 1 >= v10) {
    return swift_release();
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19) {
    goto LABEL_18;
  }
  int64_t v20 = v12 + 2;
  if (v12 + 2 >= v10) {
    return swift_release();
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19) {
    goto LABEL_18;
  }
  int64_t v20 = v12 + 3;
  if (v12 + 3 >= v10) {
    return swift_release();
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19) {
    goto LABEL_18;
  }
  int64_t v20 = v12 + 4;
  if (v12 + 4 >= v10) {
    return swift_release();
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
LABEL_18:
    int64_t v12 = v20;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v12 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v12 >= v10) {
      return swift_release();
    }
    unint64_t v19 = *(void *)(v6 + 8 * v12);
    ++v20;
    if (v19) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_10037094C(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  unsigned int v30 = a1;
  uint64_t v29 = sub_100010BCC(&qword_1004862A8);
  __chkstk_darwin();
  uint64_t v28 = (uint64_t)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  int64_t v27 = (char *)&v25 - v6;
  uint64_t v7 = *(void *)(a3 + 64);
  uint64_t v25 = a3 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v7;
  int64_t v26 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v31 = a3;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  while (v10)
  {
    unint64_t v13 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v14 = v13 | (v12 << 6);
LABEL_5:
    uint64_t v15 = *(void *)(v31 + 56);
    uint64_t v16 = *(void *)(v31 + 48) + 6 * v14;
    __int16 v17 = *(_WORD *)(v16 + 4);
    uint64_t v18 = v15 + *(void *)(*(void *)(sub_100010BCC((uint64_t *)&unk_100484A90) - 8) + 72) * v14;
    unint64_t v19 = v27;
    LODWORD(v16) = *(_DWORD *)v16;
    sub_1000136F4(v18, (uint64_t)&v27[*(int *)(v29 + 48)], (uint64_t *)&unk_100484A90);
    *(_DWORD *)unint64_t v19 = v16;
    *((_WORD *)v19 + 2) = v17;
    uint64_t v20 = (uint64_t)v19;
    uint64_t v21 = v28;
    sub_10006EC68(v20, v28, &qword_1004862A8);
    v30(v21);
    uint64_t result = sub_1000380B4(v21, &qword_1004862A8);
    if (v3) {
      return swift_release();
    }
  }
  if (__OFADD__(v12++, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v12 >= v26) {
    return swift_release();
  }
  unint64_t v23 = *(void *)(v25 + 8 * v12);
  if (v23)
  {
LABEL_19:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v14 = __clz(__rbit64(v23)) + (v12 << 6);
    goto LABEL_5;
  }
  int64_t v24 = v12 + 1;
  if (v12 + 1 >= v26) {
    return swift_release();
  }
  unint64_t v23 = *(void *)(v25 + 8 * v24);
  if (v23) {
    goto LABEL_18;
  }
  int64_t v24 = v12 + 2;
  if (v12 + 2 >= v26) {
    return swift_release();
  }
  unint64_t v23 = *(void *)(v25 + 8 * v24);
  if (v23) {
    goto LABEL_18;
  }
  int64_t v24 = v12 + 3;
  if (v12 + 3 >= v26) {
    return swift_release();
  }
  unint64_t v23 = *(void *)(v25 + 8 * v24);
  if (v23) {
    goto LABEL_18;
  }
  int64_t v24 = v12 + 4;
  if (v12 + 4 >= v26) {
    return swift_release();
  }
  unint64_t v23 = *(void *)(v25 + 8 * v24);
  if (v23)
  {
LABEL_18:
    int64_t v12 = v24;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v12 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v12 >= v26) {
      return swift_release();
    }
    unint64_t v23 = *(void *)(v25 + 8 * v12);
    ++v24;
    if (v23) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100370C08(void (*a1)(void), uint64_t a2, uint64_t *a3, unint64_t a4, void (*a5)(uint64_t *), void (*a6)(unsigned char *))
{
  uint64_t v10 = *v6;
  uint64_t v32 = v6[1];
  uint64_t v33 = v6[2];
  char v11 = *((unsigned char *)v6 + 24);
  uint64_t v30 = v6[4];
  uint64_t v31 = v6[5];
  char v12 = *((unsigned char *)v6 + 48);
  uint64_t v44 = *v6;
  long long v38 = *((_OWORD *)v6 + 2);
  char v29 = v12;
  char v39 = v12;
  if (v11) {
    goto LABEL_38;
  }
  unint64_t v13 = a3;
  sub_10006EC68((uint64_t)&v38, (uint64_t)v40, a3);
  ((void (*)(long long *))a4)(&v38);
  a5(&v44);
  uint64_t result = sub_10006EC68((uint64_t)v40, (uint64_t)&v41, v13);
  if ((v43 & 1) == 0)
  {
    uint64_t v35 = v10 + 64;
    a4 = v32;
    uint64_t v34 = v13;
    uint64_t v16 = v33;
    int v17 = v33;
    do
    {
      if (v17 != v42)
      {
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        sub_1003AB924(v32, v33, 1);
        ((void (*)(long long *))a4)(&v38);
        a5(&v44);
        uint64_t result = sub_1003AB924(v32, v33, 1);
        break;
      }
      if (a4 == v41)
      {
        swift_bridgeObjectRelease();
        sub_100038030(v32, v33, 0);
        sub_100038030(v30, v31, v29 & 1);
        uint64_t v26 = a4;
        uint64_t v27 = v16;
        return sub_100038030(v26, v27, 0);
      }
      if ((a4 & 0x8000000000000000) != 0) {
        goto LABEL_35;
      }
      a5 = (void (*)(uint64_t *))(1 << *(unsigned char *)(v10 + 32));
      if ((uint64_t)a4 >= (uint64_t)a5) {
        goto LABEL_35;
      }
      unint64_t v18 = a4 >> 6;
      unint64_t v19 = *(void *)(v35 + 8 * (a4 >> 6));
      if (((v19 >> a4) & 1) == 0) {
        goto LABEL_36;
      }
      if (*(_DWORD *)(v10 + 36) != v16) {
        goto LABEL_37;
      }
      int v17 = v16;
      unint64_t v20 = v19 & (-2 << (a4 & 0x3F));
      if (v20)
      {
        a5 = (void (*)(uint64_t *))(__clz(__rbit64(v20)) | a4 & 0xFFFFFFFFFFFFFFC0);
        goto LABEL_17;
      }
      uint64_t v21 = a1;
      unint64_t v22 = v18 + 1;
      unint64_t v23 = ((unint64_t)a5 + 63) >> 6;
      if (v18 + 1 >= v23) {
        goto LABEL_16;
      }
      unint64_t v24 = *(void *)(v35 + 8 * v22);
      if (v24) {
        goto LABEL_14;
      }
      unint64_t v22 = v18 + 2;
      if (v18 + 2 >= v23) {
        goto LABEL_15;
      }
      unint64_t v24 = *(void *)(v35 + 8 * v22);
      if (v24) {
        goto LABEL_14;
      }
      unint64_t v22 = v18 + 3;
      if (v18 + 3 >= v23)
      {
        a1 = v21;
      }
      else
      {
        unint64_t v24 = *(void *)(v35 + 8 * v22);
        if (v24)
        {
LABEL_28:
          a6(v40);
          sub_100038030(a4, v16, 0);
LABEL_14:
          a5 = (void (*)(uint64_t *))(__clz(__rbit64(v24)) + (v22 << 6));
LABEL_15:
          unint64_t v13 = v34;
LABEL_16:
          a1 = v21;
          goto LABEL_17;
        }
        unint64_t v25 = v23 - 4;
        a1 = v21;
        while (v25 != v18)
        {
          unint64_t v24 = *(void *)(v10 + 96 + 8 * v18++);
          if (v24)
          {
            unint64_t v22 = v18 + 3;
            goto LABEL_28;
          }
        }
      }
      a6(v40);
      sub_100038030(a4, v16, 0);
      unint64_t v13 = v34;
LABEL_17:
      v36[0] = a4;
      v36[1] = v16;
      char v37 = 0;
      a1(v36);
      sub_100038030(a4, v16, 0);
      if (v7)
      {
        swift_bridgeObjectRelease();
        sub_100038030(v32, v33, 0);
        sub_100038030(v30, v31, v29 & 1);
        uint64_t v26 = (uint64_t)a5;
        uint64_t v27 = v33;
        return sub_100038030(v26, v27, 0);
      }
      uint64_t result = sub_10006EC68((uint64_t)v40, (uint64_t)&v41, v13);
      uint64_t v16 = v33;
      a4 = (unint64_t)a5;
    }
    while ((v43 & 1) == 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_100370F74(void (*a1)(void *), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  if (!v9) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v13 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    uint64_t v18 = *(void *)(a3 + 48) + 24 * i;
    uint64_t v19 = *(void *)v18;
    uint64_t v20 = *(void *)(v18 + 8);
    char v21 = *(unsigned char *)(v18 + 16);
    LOBYTE(v18) = *(unsigned char *)(v18 + 17);
    v22[0] = v19;
    v22[1] = v20;
    char v23 = v21;
    char v24 = v18;
    swift_bridgeObjectRetain();
    a1(v22);
    if (v3)
    {
      swift_release();
      return swift_bridgeObjectRelease();
    }
    uint64_t result = swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v12++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v12 >= v10) {
      return swift_release();
    }
    unint64_t v16 = *(void *)(v6 + 8 * v12);
    if (!v16) {
      break;
    }
LABEL_17:
    unint64_t v9 = (v16 - 1) & v16;
  }
  int64_t v17 = v12 + 1;
  if (v12 + 1 >= v10) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_16;
  }
  int64_t v17 = v12 + 2;
  if (v12 + 2 >= v10) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_16;
  }
  int64_t v17 = v12 + 3;
  if (v12 + 3 >= v10) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_16;
  }
  int64_t v17 = v12 + 4;
  if (v12 + 4 >= v10) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
LABEL_16:
    int64_t v12 = v17;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v12 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v12 >= v10) {
      return swift_release();
    }
    unint64_t v16 = *(void *)(v6 + 8 * v12);
    ++v17;
    if (v16) {
      goto LABEL_17;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_10037113C(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  while (v9)
  {
    unint64_t v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v14 = v13 | (v12 << 6);
LABEL_5:
    uint64_t v18 = *(void *)(*(void *)(a3 + 48) + 8 * v14);
    uint64_t result = a1(&v18);
    if (v3) {
      return swift_release();
    }
  }
  if (__OFADD__(v12++, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v12 >= v10) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v6 + 8 * v12);
  if (v16)
  {
LABEL_19:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v12 << 6);
    goto LABEL_5;
  }
  int64_t v17 = v12 + 1;
  if (v12 + 1 >= v10) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_18;
  }
  int64_t v17 = v12 + 2;
  if (v12 + 2 >= v10) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_18;
  }
  int64_t v17 = v12 + 3;
  if (v12 + 3 >= v10) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_18;
  }
  int64_t v17 = v12 + 4;
  if (v12 + 4 >= v10) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
LABEL_18:
    int64_t v12 = v17;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v12 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v12 >= v10) {
      return swift_release();
    }
    unint64_t v16 = *(void *)(v6 + 8 * v12);
    ++v17;
    if (v16) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

void sub_1003712BC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

uint64_t sub_100371328(void *a1)
{
  if (sub_1003A9B14(a1, 0, 1)) {
    return swift_willThrow();
  }
  id v4 = (void *)(v1 + *(void *)(*(void *)v1 + 544));
  swift_beginAccess();
  id v5 = a1;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  return sub_100378300();
}

uint64_t sub_100371414(uint64_t a1)
{
  uint64_t v3 = (unint64_t *)(v1 + *(void *)(*(void *)v1 + 544));
  swift_beginAccess();
  unint64_t v4 = *v3;
  swift_bridgeObjectRetain();
  sub_100397AF8(a1, v4);
  unint64_t v6 = v5;
  char v8 = v7;
  uint64_t result = swift_bridgeObjectRelease();
  if ((v8 & 1) == 0)
  {
    swift_beginAccess();
    int64_t v10 = (void *)sub_100397C94(v6);
    swift_endAccess();

    return sub_100378300();
  }
  return result;
}

void sub_1003714E4(void *a1)
{
  uint64_t v3 = v2;
  unint64_t v4 = v1;
  uint64_t v6 = *v1;
  sub_100010BCC(&qword_1004862B0);
  __chkstk_darwin();
  uint64_t v55 = (char *)v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_10047DB90);
  __chkstk_darwin();
  uint64_t v53 = (char *)v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v54 = (char *)v49 - v9;
  uint64_t v10 = type metadata accessor for DispatchTime();
  uint64_t v56 = *(void *)(v10 - 8);
  uint64_t v57 = v10;
  __chkstk_darwin();
  int64_t v12 = (char *)v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation();
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v51 = *(void *)(v14 - 8);
  uint64_t v52 = v14;
  __chkstk_darwin();
  uint64_t v50 = (char *)v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v58 = (uint64_t)v49 - v16;
  uint64_t v60 = v13;
  uint64_t v59 = *(void *)(v13 - 8);
  __chkstk_darwin();
  uint64_t v18 = (char *)v49 - v17;
  uint64_t v19 = (char *)v4 + *(void *)(v6 + 552);
  swift_beginAccess();
  if (*(void *)(*(void *)v19 + 16))
  {
    uint64_t v61 = v2;
    swift_bridgeObjectRetain();
    sub_10039F8DC((uint64_t)a1);
    if (v20)
    {
      swift_bridgeObjectRelease();
      swift_beginAccess();
      sub_10006F314(255, (unint64_t *)&unk_100484A40);
      sub_100296BC4();
      uint64_t v21 = v60;
      type metadata accessor for Dictionary();
      Dictionary.remove(at:)();
      unint64_t v22 = v62;
      swift_endAccess();

      sub_100378300();
      uint64_t v23 = v58;
      uint64_t v24 = v59;
      (*(void (**)(uint64_t, char *, uint64_t))(v59 + 16))(v58, v18, v21);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v24 + 56))(v23, 0, 1, v21);
      uint64_t v62 = a1;
      swift_beginAccess();
      id v25 = a1;
      Dictionary.subscript.setter();
      swift_endAccess();
      sub_100378300();
      (*(void (**)(char *, uint64_t))(v24 + 8))(v18, v21);
      return;
    }
    swift_bridgeObjectRelease();
    uint64_t v3 = v61;
  }
  sub_100388EAC(a1, 1);
  if (!v3)
  {
    uint64_t v61 = 0;
    uint64_t v26 = (char *)v4 + *(void *)(*v4 + 536);
    swift_beginAccess();
    if (*(void *)(*(void *)v26 + 16))
    {
      swift_bridgeObjectRetain();
      sub_10039F8DC((uint64_t)a1);
      if (v27)
      {
        swift_bridgeObjectRelease();
        swift_beginAccess();
        sub_10006F314(255, (unint64_t *)&unk_100484A40);
        sub_100296BC4();
        uint64_t v28 = v60;
        type metadata accessor for Dictionary();
        Dictionary.remove(at:)();
        char v29 = v63;
        swift_endAccess();

        sub_100378300();
        uint64_t v30 = v58;
        uint64_t v31 = v59;
        (*(void (**)(uint64_t, char *, uint64_t))(v59 + 16))(v58, v18, v28);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v31 + 56))(v30, 0, 1, v28);
        id v63 = a1;
        swift_beginAccess();
        id v32 = a1;
        Dictionary.subscript.setter();
        swift_endAccess();
        sub_100378300();
        (*(void (**)(char *, uint64_t))(v31 + 8))(v18, v28);
        return;
      }
      swift_bridgeObjectRelease();
    }
    type metadata accessor for P2PTimer();
    id v33 = a1;
    variable initialization expression of AWDLPeer.lastUpdated();
    uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v56 + 56);
    uint64_t v35 = (uint64_t)v54;
    v49[1] = v56 + 56;
    v49[0] = v34;
    v34(v54, 1, 1, v57);
    uint64_t v36 = type metadata accessor for UUID();
    uint64_t v37 = (uint64_t)v55;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v55, 1, 1, v36);
    uint64_t v38 = v58;
    sub_100387508((uint64_t)v12, v35, v37, v58);
    uint64_t v39 = v59;
    uint64_t v40 = v60;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v59 + 56))(v38, 0, 1, v60);
    id v63 = v33;
    swift_beginAccess();
    sub_10006F314(255, (unint64_t *)&unk_100484A40);
    sub_100296BC4();
    type metadata accessor for Dictionary();
    Dictionary.subscript.setter();
    swift_endAccess();
    sub_100378300();
    id v41 = [v33 uniqueIdentifier];
    int v42 = AWDLTrafficRegistrationService.serviceType.getter();

    if (v42 == 2)
    {
      swift_beginAccess();
      id v63 = v33;
      id v43 = v33;
      uint64_t v44 = v50;
      Dictionary.subscript.getter();

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v44, 1, v40))
      {
        (*(void (**)(char *, uint64_t))(v51 + 8))(v44, v52);
        swift_endAccess();
        uint64_t v45 = 1;
        uint64_t v46 = (uint64_t)v53;
        uint64_t v47 = v57;
      }
      else
      {
        uint64_t v47 = v57;
        uint64_t v46 = (uint64_t)v53;
        (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v53, v44, v57);
        (*(void (**)(char *, uint64_t))(v51 + 8))(v44, v52);
        swift_endAccess();
        uint64_t v45 = 0;
      }
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v49[0])(v46, v45, 1, v47);
      uint64_t v48 = (uint64_t)v4 + *(void *)(*v4 + 512);
      swift_beginAccess();
      sub_10006D1A4(v46, v48, &qword_10047DB90);
      swift_endAccess();
      *(void *)((char *)v4 + *(void *)(*v4 + 496)) = 0;
      *((unsigned char *)v4 + *(void *)(*v4 + 504)) = 2;
    }
  }
}

void sub_100371DFC(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v147 = type metadata accessor for DispatchTimeInterval();
  uint64_t v146 = *(void *)(v147 - 8);
  __chkstk_darwin();
  uint64_t v145 = (void *)((char *)v141 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100010BCC(&qword_1004862B0);
  __chkstk_darwin();
  uint64_t v151 = (char *)v141 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_10047DB90);
  __chkstk_darwin();
  uint64_t v143 = (char *)v141 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  char v150 = (char *)v141 - v8;
  uint64_t v153 = type metadata accessor for DispatchTime();
  uint64_t v152 = *(void *)(v153 - 8);
  __chkstk_darwin();
  uint64_t v149 = (char *)v141 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v4 + 416);
  uint64_t v11 = *(void *)(v10 + 8);
  uint64_t v12 = *(void *)(v4 + 408);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v141[1] = v11;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v162 = AssociatedConformanceWitness;
  uint64_t v163 = AssociatedTypeWitness;
  swift_getAssociatedConformanceWitness();
  uint64_t v15 = (void *)type metadata accessor for Preferences();
  unint64_t v160 = *(v15 - 1);
  uint64_t v161 = (void (*)(void, void, void, void))v15;
  __chkstk_darwin();
  uint64_t v159 = (char *)v141 - v16;
  uint64_t v156 = v10;
  uint64_t v157 = v12;
  uint64_t v17 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation();
  uint64_t v165 = type metadata accessor for Optional();
  uint64_t v169 = *(void (***)(char *, uint64_t))(v165 - 8);
  __chkstk_darwin();
  uint64_t v144 = (char *)v141 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v148 = (uint64_t)v141 - v19;
  __chkstk_darwin();
  uint64_t v21 = (char *)v141 - v20;
  __chkstk_darwin();
  uint64_t v23 = (char *)v141 - v22;
  uint64_t v24 = *(void (***)(char *, uint64_t))(v17 - 8);
  __chkstk_darwin();
  uint64_t v26 = (char *)v141 - v25;
  id v27 = [a1 peerAddress];
  unint64_t v142 = WiFiMACAddress.wifiAddress.getter();

  uint64_t v28 = (char *)v2 + *(void *)(*v2 + 552);
  swift_beginAccess();
  uint64_t v29 = *(void *)v28;
  uint64_t v30 = *(void *)(*(void *)v28 + 16);
  uint64_t v168 = v17;
  unint64_t v164 = v24;
  if (v30)
  {
    swift_bridgeObjectRetain();
    sub_10039F8DC((uint64_t)a1);
    if (v31)
    {
      uint64_t v167 = (void (**)(char *, uint64_t))*(unsigned int *)(v29 + 36);
      swift_bridgeObjectRelease();
      swift_beginAccess();
      sub_10006F314(255, (unint64_t *)&unk_100484A40);
      sub_100296BC4();
      uint64_t v17 = v168;
      type metadata accessor for Dictionary();
      Dictionary.remove(at:)();
      uint64_t v24 = v164;
      v164[1](v26, v17);
      id v32 = v171;
      swift_endAccess();

      sub_100378300();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v17 = v168;
      uint64_t v24 = v164;
    }
  }
  swift_beginAccess();
  id v171 = a1;
  uint64_t v33 = sub_10006F314(0, (unint64_t *)&unk_100484A40);
  uint64_t v34 = v2;
  unint64_t v35 = sub_100296BC4();
  id v36 = a1;
  Dictionary.subscript.getter();

  swift_endAccess();
  uint64_t v37 = v24;
  os_log_type_t v166 = v24[6];
  uint64_t v167 = v24 + 6;
  int v38 = ((uint64_t (*)(char *, uint64_t, uint64_t))v166)(v21, 1, v17);
  uint64_t v155 = v33;
  unint64_t v154 = v35;
  uint64_t v39 = v34;
  if (v38 == 1)
  {
    swift_beginAccess();
    id v171 = v36;
    id v40 = v36;
    uint64_t v17 = v168;
    Dictionary.subscript.getter();

    swift_endAccess();
    id v41 = v169;
    uint64_t v42 = v165;
    v169[1](v21, v165);
  }
  else
  {
    ((void (*)(char *, char *, uint64_t))v37[4])(v23, v21, v17);
    ((void (*)(char *, void, uint64_t, uint64_t))v37[7])(v23, 0, 1, v17);
    uint64_t v42 = v165;
    id v41 = v169;
  }
  int v43 = ((uint64_t (*)(char *, uint64_t, uint64_t))v166)(v23, 1, v17);
  uint64_t v46 = v41[1];
  uint64_t v45 = v41 + 1;
  uint64_t v44 = v46;
  v46(v23, v42);
  uint64_t v47 = v39;
  if (v43 == 1 && sub_1003A9B14(v36, 1, 1)) {
    goto LABEL_22;
  }
  uint64_t v48 = v44;
  uint64_t v169 = v45;
  id v49 = [v36 uniqueIdentifier];
  uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v52 = v51;
  if (v50 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v52 == v53)
  {

    swift_bridgeObjectRelease_n();
LABEL_14:
    uint64_t v55 = v162;
    uint64_t v56 = *(void (**)(uint64_t, uint64_t))(v162 + 120);
    uint64_t v57 = swift_checkMetadataState();
    uint64_t v58 = v159;
    v56(v57, v55);
    uint64_t v59 = v161;
    char v60 = Preferences.edgeKitSupport.getter();
    (*(void (**)(char *, void (*)(void, void, void, void)))(v160 + 8))(v58, v59);
    if (v60) {
      goto LABEL_15;
    }
    uint64_t v67 = Logger.logObject.getter();
    os_log_type_t v68 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v67, v68))
    {
      uint64_t v69 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v69 = 0;
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "EdgeKit is not supported", v69, 2u);
      swift_slowDealloc();
    }

    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v70 = xmmword_1003B2F30;
    *(unsigned char *)(v70 + 16) = 0;
LABEL_22:
    swift_willThrow();
    return;
  }
  char v54 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v54) {
    goto LABEL_14;
  }
LABEL_15:
  unint64_t v61 = v158;
  sub_100388EAC(v36, 1);
  if (v61) {
    return;
  }
  uint64_t v163 = 0;
  id v62 = [v36 uniqueIdentifier];
  uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v65 = v64;
  if (v63 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v65 == v66)
  {

    swift_bridgeObjectRelease_n();
    return;
  }
  char v71 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v71) {
    return;
  }
  id v72 = [v36 uniqueIdentifier];
  int v73 = AWDLTrafficRegistrationService.serviceType.getter();

  if (v73 == 2)
  {
    uint64_t v74 = *(uint64_t (****)(uint64_t *))((char *)v47 + *(void *)(*v47 + 592));
    if (v74)
    {
      swift_retain();
      uint64_t v75 = (unsigned __int16 *)WiFiAddress.zero.unsafeMutableAddressor();
      uint64_t v76 = v142 & 0xFFFFFFFFFFFFLL;
      if (static WiFiAddress.!= infix(_:_:)(v142 & 0xFFFFFFFFFFFFLL, *v75 | ((unint64_t)*(unsigned int *)(v75 + 1) << 16)))
      {
        unint64_t v77 = WiFiAddress.ipv6LinkLocalAddress.getter(v76);
        uint64_t v161 = v78;
        uint64_t v162 = v77;
        unint64_t v160 = v79;
        uint64_t v81 = v80;
        uint64_t v159 = (char *)(*v74)[49](v170);
        uint64_t v82 = type metadata accessor for WiFiInterface.NeighborDiscoveryTable();
        unint64_t v158 = v76;
        uint64_t v83 = v163;
        WiFiInterface.NeighborDiscoveryTable.postPeerPresence(macAddress:ipv6Address:)(v76, v162, (uint64_t)v161, v160, v81, v82);
        if (v83)
        {
          ((void (*)(uint64_t *, uint64_t))v159)(v170, 1);
          swift_bridgeObjectRelease();
          id v84 = v36;
          swift_retain();
          swift_errorRetain();
          id v85 = v84;
          swift_retain();
          swift_errorRetain();
          uint64_t v86 = Logger.logObject.getter();
          os_log_type_t v87 = static os_log_type_t.error.getter();
          int v88 = v87;
          if (os_log_type_enabled(v86, v87))
          {
            uint64_t v89 = swift_slowAlloc();
            LODWORD(v167) = v88;
            uint64_t v90 = v89;
            os_log_type_t v166 = (void (*)(char *, uint64_t))swift_slowAlloc();
            uint64_t v168 = swift_slowAlloc();
            v170[0] = v168;
            *(_DWORD *)uint64_t v90 = 136315906;
            id v91 = [v85 uniqueIdentifier];
            uint64_t v92 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v169 = (void (**)(char *, uint64_t))v74;
            uint64_t v93 = v92;
            unint64_t v95 = v94;

            id v171 = (id)sub_100010680(v93, v95, v170);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v90 + 12) = 2080;
            uint64_t v96 = WiFiAddress.description.getter(v158);
            id v171 = (id)sub_100010680(v96, v97, v170);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v90 + 22) = 2080;
            uint64_t v98 = (uint64_t *)((char *)v169 + *((void *)*v169 + 13));
            uint64_t v99 = *v98;
            unint64_t v100 = v98[1];
            swift_bridgeObjectRetain();
            id v171 = (id)sub_100010680(v99, v100, v170);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v90 + 32) = 2112;
            swift_errorRetain();
            uint64_t v101 = (void *)_swift_stdlib_bridgeErrorToNSError();
            id v171 = v101;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(void *)os_log_type_t v166 = v101;
            swift_errorRelease();
            swift_errorRelease();
            _os_log_impl((void *)&_mh_execute_header, v86, (os_log_type_t)v167, "Will clear traffic registration for %s to %s because failed to post peer presence on %s: %@", (uint8_t *)v90, 0x2Au);
            sub_100010BCC(&qword_10047CC30);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            swift_release_n();

            swift_errorRelease();
            swift_errorRelease();
          }
          sub_100388EAC(v85, 0);
          swift_willThrow();
          swift_release();
          return;
        }
        uint64_t v163 = 0;
        ((void (*)(uint64_t *, void))v159)(v170, 0);
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_release();
      }
    }
  }
  id v102 = [v36 uniqueIdentifier];
  swift_beginAccess();
  sub_1000FA3C4(&v171, v102);
  swift_endAccess();

  uint64_t v103 = type metadata accessor for P2PTimer();
  uint64_t v104 = (void (**)(char *, uint64_t))v36;
  uint64_t v105 = (uint64_t)v149;
  uint64_t v162 = v103;
  variable initialization expression of AWDLPeer.lastUpdated();
  uint64_t v106 = (uint64_t)v150;
  uint64_t v161 = *(void (**)(void, void, void, void))(v152 + 56);
  v161(v150, 1, 1, v153);
  uint64_t v107 = type metadata accessor for UUID();
  uint64_t v108 = (uint64_t)v151;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v107 - 8) + 56))(v151, 1, 1, v107);
  uint64_t v109 = v148;
  sub_100387508(v105, v106, v108, v148);
  uint64_t v110 = v168;
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v164[7])(v109, 0, 1, v168);
  id v171 = v104;
  swift_beginAccess();
  type metadata accessor for Dictionary();
  Dictionary.subscript.setter();
  swift_endAccess();
  sub_100378300();
  id v111 = [v104 uniqueIdentifier];
  LODWORD(v106) = AWDLTrafficRegistrationService.serviceType.getter();

  if (v106 == 2)
  {
    uint64_t v112 = v161;
    swift_beginAccess();
    id v171 = v104;
    unint64_t v164 = v104;
    uint64_t v113 = v104;
    uint8x8_t v114 = v144;
    Dictionary.subscript.getter();

    if (((unsigned int (*)(char *, uint64_t, uint64_t))v166)(v114, 1, v110))
    {
      v48(v114, v165);
      swift_endAccess();
      uint64_t v115 = 1;
      uint64_t v116 = (uint64_t)v143;
      uint64_t v117 = v153;
    }
    else
    {
      uint64_t v118 = v114;
      uint64_t v116 = (uint64_t)v143;
      uint64_t v117 = v153;
      (*(void (**)(char *, char *, uint64_t))(v152 + 16))(v143, v118, v153);
      v48(v118, v165);
      swift_endAccess();
      uint64_t v115 = 0;
    }
    v112(v116, v115, 1, v117);
    uint64_t v119 = (uint64_t)v47 + *(void *)(*v47 + 512);
    swift_beginAccess();
    sub_10006D1A4(v116, v119, &qword_10047DB90);
    swift_endAccess();
    *(void *)((char *)v47 + *(void *)(*v47 + 496)) = 0;
    *((unsigned char *)v47 + *(void *)(*v47 + 504)) = 2;
    uint64_t v104 = v164;
  }
  id v120 = [v104 uniqueIdentifier];
  uint64_t v121 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v123 = v122;
  if (v121 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v123 == v124)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v125 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v125 & 1) == 0) {
      goto LABEL_43;
    }
  }
  sub_100375308();
  sub_10030C2C8();
  swift_release();
LABEL_43:
  id v126 = [v104 uniqueIdentifier];
  uint64_t v127 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v129 = v128;
  if (v127 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v129 == v130)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v131 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v131 & 1) == 0) {
      return;
    }
  }
  uint64_t v132 = (uint64_t)v145;
  *uint64_t v145 = 5;
  uint64_t v133 = v146;
  uint64_t v134 = v147;
  (*(void (**)(uint64_t, void, uint64_t))(v146 + 104))(v132, enum case for DispatchTimeInterval.seconds(_:), v147);
  os_log_type_t v135 = (void *)*OS_dispatch_queue.awdl.unsafeMutableAddressor();
  uint64_t v136 = swift_allocObject();
  swift_weakInit();
  uint64_t v137 = (void *)swift_allocObject();
  uint64_t v138 = v156;
  v137[2] = v157;
  v137[3] = v138;
  v137[4] = v136;
  v137[5] = v104;
  uint64_t v139 = v104;
  id v140 = v135;
  swift_retain();
  static P2PTimer.async(after:on:execute:)(v132, v140, (uint64_t)sub_1003AAB58, (uint64_t)v137);

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v133 + 8))(v132, v134);
  swift_release();
}

void sub_10037334C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v5 = swift_getAssociatedTypeWitness();
  uint64_t v98 = *(void *)(v5 - 8);
  uint64_t v99 = v5;
  __chkstk_darwin();
  uint64_t v92 = (char *)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v94 = (char *)&v89 - v7;
  sub_100010BCC(&qword_1004862B0);
  __chkstk_darwin();
  uint64_t v93 = (uint64_t)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v102 = (uint64_t)&v89 - v9;
  uint64_t v10 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v101 = *(void *)(v11 - 8);
  __chkstk_darwin();
  unint64_t v100 = (char *)&v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v106 = (char *)&v89 - v13;
  uint64_t v108 = v10;
  uint64_t v14 = *(void *)(v10 - 8);
  __chkstk_darwin();
  unint64_t v95 = (char *)&v89 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v103 = (char *)&v89 - v16;
  uint64_t v109 = a1;
  id v17 = [a1 uniqueIdentifier];
  int v18 = AWDLTrafficRegistrationService.serviceType.getter();

  uint64_t v104 = v14;
  uint64_t v107 = v3;
  if (v18 == 2)
  {
    uint64_t v19 = *(void *)(v3 + *(void *)(*(void *)v3 + 592));
    if (v19)
    {
      uint64_t v90 = v11;
      swift_retain();
      uint64_t v20 = v109;
      id v21 = [v109 peerAddress];
      unint64_t v105 = WiFiMACAddress.wifiAddress.getter();

      id v22 = [v20 peerAddress];
      unint64_t v23 = WiFiMACAddress.wifiAddress.getter();

      unint64_t v24 = WiFiAddress.ipv6LinkLocalAddress.getter(v23 & 0xFFFFFFFFFFFFLL);
      uint64_t v26 = v25;
      uint64_t v28 = v27;
      uint64_t v30 = v29;
      id v91 = (void (*)(uint64_t *, uint64_t))(*(uint64_t (**)(uint64_t *))(*(void *)v19 + 392))(v110);
      uint64_t v31 = type metadata accessor for WiFiInterface.NeighborDiscoveryTable();
      WiFiInterface.NeighborDiscoveryTable.postPeerAbsence(macAddress:ipv6Address:)(v105 & 0xFFFFFFFFFFFFLL, v24, v26, v28, v30, v31);
      if (v2)
      {
        v91(v110, 1);
        swift_bridgeObjectRelease();
        swift_retain();
        id v32 = v109;
        swift_errorRetain();
        uint64_t v33 = v19;
        swift_retain();
        id v34 = v32;
        swift_errorRetain();
        unint64_t v35 = Logger.logObject.getter();
        os_log_type_t v36 = static os_log_type_t.error.getter();
        int v37 = v36;
        if (os_log_type_enabled(v35, v36))
        {
          uint64_t v38 = swift_slowAlloc();
          id v91 = (void (*)(uint64_t *, uint64_t))swift_slowAlloc();
          v110[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v38 = 136315650;
          LODWORD(v105) = v37;
          id v39 = [v34 peerAddress];
          unint64_t v40 = WiFiMACAddress.wifiAddress.getter();

          uint64_t v41 = WiFiAddress.description.getter(v40 & 0xFFFFFFFFFFFFLL);
          uint64_t v111 = sub_100010680(v41, v42, v110);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v38 + 12) = 2080;
          int v43 = (uint64_t *)(v33 + *(void *)(*(void *)v33 + 104));
          uint64_t v44 = *v43;
          unint64_t v45 = v43[1];
          swift_bridgeObjectRetain();
          uint64_t v111 = sub_100010680(v44, v45, v110);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v38 + 22) = 2112;
          swift_errorRetain();
          uint64_t v46 = _swift_stdlib_bridgeErrorToNSError();
          uint64_t v111 = v46;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(void *)id v91 = v46;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v35, (os_log_type_t)v105, "Failed to clear peer %s on %s: %@", (uint8_t *)v38, 0x20u);
          sub_100010BCC(&qword_10047CC30);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          swift_release();
          swift_errorRelease();
        }
        else
        {
          swift_release();
          swift_errorRelease();
          swift_release_n();

          swift_errorRelease();
          swift_errorRelease();
        }
        unint64_t v105 = 0;
      }
      else
      {
        v91(v110, 0);
        swift_release();
        swift_bridgeObjectRelease();
        unint64_t v105 = 0;
      }
      uint64_t v48 = v108;
      uint64_t v47 = v109;
      uint64_t v14 = v104;
      uint64_t v11 = v90;
    }
    else
    {
      unint64_t v105 = v2;
      uint64_t v48 = v108;
      uint64_t v47 = v109;
    }
    uint64_t v3 = v107;
  }
  else
  {
    unint64_t v105 = v2;
    uint64_t v48 = v108;
    uint64_t v47 = v109;
  }
  id v49 = v106;
  uint64_t v50 = v11;
  sub_10039A16C((uint64_t)v47);
  uint64_t v51 = *(void **)(v3 + *(void *)(*(void *)v3 + 752));
  uint64_t v52 = v47;
  if (v51)
  {
    sub_10006F314(0, (unint64_t *)&unk_100484A40);
    id v53 = v47;
    id v54 = v51;
    char v55 = static NSObject.== infix(_:_:)();

    if (v55) {
      sub_1003927B4(v53);
    }
  }
  uint64_t v111 = (uint64_t)v52;
  swift_beginAccess();
  sub_10006F314(255, (unint64_t *)&unk_100484A40);
  sub_100296BC4();
  type metadata accessor for Dictionary();
  Dictionary.removeValue(forKey:)();
  swift_endAccess();
  sub_100378300();
  uint64_t v56 = v52;
  uint64_t v57 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v57(v49, 1, v48) == 1)
  {
    uint64_t v106 = *(char **)(v101 + 8);
    ((void (*)(char *, uint64_t))v106)(v49, v50);
    uint64_t v111 = (uint64_t)v56;
    swift_beginAccess();
    uint64_t v58 = v100;
    Dictionary.removeValue(forKey:)();
    swift_endAccess();
    sub_100378300();
    if (v57(v58, 1, v48) == 1)
    {
      ((void (*)(char *, uint64_t))v106)(v58, v50);
      uint64_t v59 = v109;
    }
    else
    {
      uint64_t v65 = v104;
      uint64_t v66 = (uint64_t)v95;
      (*(void (**)(char *, char *, uint64_t))(v104 + 32))(v95, v58, v48);
      uint64_t v67 = v93;
      sub_1000136F4(v66 + *(int *)(v48 + 40), v93, &qword_1004862B0);
      uint64_t v68 = type metadata accessor for UUID();
      uint64_t v69 = *(void *)(v68 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v69 + 48))(v67, 1, v68) == 1)
      {
        sub_1000380B4(v67, &qword_1004862B0);
      }
      else
      {
        uint64_t v79 = UUID.uuidString.getter();
        uint64_t v81 = v80;
        (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v67, v68);
        uint64_t v82 = *(void (**)(void))(AssociatedConformanceWitness + 136);
        swift_checkMetadataState();
        uint64_t v83 = v92;
        v82();
        uint64_t v84 = v99;
        uint64_t v85 = swift_getAssociatedConformanceWitness();
        uint64_t v86 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v85 + 8))(v84, v85);
        (*(void (**)(char *, uint64_t))(v98 + 8))(v83, v84);
        if (v86)
        {
          sub_100010BCC((uint64_t *)&unk_100484BA0);
          uint64_t v87 = swift_allocObject();
          *(_OWORD *)(v87 + 16) = xmmword_1003B2450;
          *(void *)(v87 + 32) = v79;
          *(void *)(v87 + 40) = v81;
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v86 removeNotificationsWithIdentifiers:isa];

          swift_unknownObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        uint64_t v48 = v108;
        uint64_t v65 = v104;
        uint64_t v66 = (uint64_t)v95;
      }
      uint64_t v59 = v109;
      sub_10039ACB4(v109, v66, 1);
      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v66, v48);
    }
    sub_100388EAC(v59, 0);
  }
  else
  {
    char v60 = v56;
    uint64_t v61 = (uint64_t)v103;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v103, v49, v48);
    uint64_t v62 = v102;
    sub_1000136F4(v61 + *(int *)(v48 + 40), v102, &qword_1004862B0);
    uint64_t v63 = type metadata accessor for UUID();
    uint64_t v64 = *(void *)(v63 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63) == 1)
    {
      sub_1000380B4(v62, &qword_1004862B0);
    }
    else
    {
      uint64_t v106 = (char *)UUID.uuidString.getter();
      uint64_t v71 = v70;
      (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v62, v63);
      id v72 = *(void (**)(void))(AssociatedConformanceWitness + 136);
      swift_checkMetadataState();
      int v73 = v94;
      v72();
      uint64_t v74 = v99;
      uint64_t v75 = swift_getAssociatedConformanceWitness();
      uint64_t v76 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v75 + 8))(v74, v75);
      (*(void (**)(char *, uint64_t))(v98 + 8))(v73, v74);
      if (v76)
      {
        sub_100010BCC((uint64_t *)&unk_100484BA0);
        uint64_t v77 = swift_allocObject();
        *(_OWORD *)(v77 + 16) = xmmword_1003B2450;
        *(void *)(v77 + 32) = v106;
        *(void *)(v77 + 40) = v71;
        Class v78 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v76 removeNotificationsWithIdentifiers:v78];

        swift_unknownObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      uint64_t v48 = v108;
      uint64_t v61 = (uint64_t)v103;
      uint64_t v14 = v104;
    }
    sub_10039ACB4(v60, v61, 1);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v61, v48);
  }
}

uint64_t sub_1003741D0(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v27 = a5;
  uint64_t v28 = a8;
  int v37 = a1;
  uint64_t v38 = a2;
  uint64_t v26 = *(void *)(a5 - 8);
  __chkstk_darwin();
  id v39 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  id v32 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v25 - v10;
  __chkstk_darwin();
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v29 = *(void *)(v14 - 8);
  uint64_t v30 = v14;
  __chkstk_darwin();
  uint64_t v16 = (char *)&v25 - v15;
  uint64_t v17 = dispatch thunk of Collection.count.getter();
  if (!v17) {
    return static Array._allocateUninitialized(_:)();
  }
  Swift::Int v18 = v17;
  uint64_t v42 = ContiguousArray.init()();
  uint64_t v31 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v18);
  uint64_t v35 = v8;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if (v18 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v33 = (void (**)(char *))(v32 + 2);
    id v34 = v13;
    ++v32;
    while (1)
    {
      uint64_t v20 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      id v21 = v11;
      id v22 = v11;
      uint64_t v23 = AssociatedTypeWitness;
      (*v33)(v21);
      v20(v41, 0);
      uint64_t v24 = v40;
      v37(v22, v39);
      if (v24) {
        break;
      }
      uint64_t v40 = 0;
      (*v32)(v22, v23);
      ContiguousArray.append(_:)();
      dispatch thunk of Collection.formIndex(after:)();
      --v18;
      uint64_t v11 = v22;
      if (!v18)
      {
        (*(void (**)(char *, uint64_t))(v29 + 8))(v16, v30);
        return v42;
      }
    }
    (*v32)(v22, v23);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v16, v30);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 32))(v28, v39, v27);
  }
  return result;
}

uint64_t sub_1003745D0(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for AWDLPeer.AdvertisedService(0) - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v19 - v6;
  id v21 = _swiftEmptyArrayStorage;
  uint64_t v8 = a1 + 56;
  uint64_t v9 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(a1 + 56);
  int64_t v19 = (unint64_t)(v9 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v13 = 0;
  if (!v11) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    sub_1003AB930(*(void *)(a1 + 48) + *(void *)(v3 + 72) * i, (uint64_t)v7, type metadata accessor for AWDLPeer.AdvertisedService);
    sub_1003AB998((uint64_t)v7, (uint64_t)v5, type metadata accessor for AWDLPeer.AdvertisedService);
    sub_100391E48((uint64_t)v5, &v20);
    sub_1003AB6C0((uint64_t)v5, type metadata accessor for AWDLPeer.AdvertisedService);
    if (v1)
    {
      swift_release();
      return swift_bridgeObjectRelease();
    }
    uint64_t result = sub_1001DE7F0(v20);
    if (v11) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v13 >= v19) {
      goto LABEL_26;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v13);
    if (!v17) {
      break;
    }
LABEL_17:
    unint64_t v11 = (v17 - 1) & v17;
  }
  int64_t v18 = v13 + 1;
  if (v13 + 1 >= v19) {
    goto LABEL_26;
  }
  unint64_t v17 = *(void *)(v8 + 8 * v18);
  if (v17) {
    goto LABEL_16;
  }
  int64_t v18 = v13 + 2;
  if (v13 + 2 >= v19) {
    goto LABEL_26;
  }
  unint64_t v17 = *(void *)(v8 + 8 * v18);
  if (v17) {
    goto LABEL_16;
  }
  int64_t v18 = v13 + 3;
  if (v13 + 3 >= v19) {
    goto LABEL_26;
  }
  unint64_t v17 = *(void *)(v8 + 8 * v18);
  if (v17) {
    goto LABEL_16;
  }
  int64_t v18 = v13 + 4;
  if (v13 + 4 >= v19)
  {
LABEL_26:
    swift_release();
    return (uint64_t)v21;
  }
  unint64_t v17 = *(void *)(v8 + 8 * v18);
  if (v17)
  {
LABEL_16:
    int64_t v13 = v18;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v13 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v13 >= v19) {
      goto LABEL_26;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v13);
    ++v18;
    if (v17) {
      goto LABEL_17;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_100374888()
{
  uint64_t v2 = *(void *)(*(void *)v0 + 736);
  if ((*(unsigned char *)(v0 + v2) & 1) == 0)
  {
    swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 96);
    uint64_t v5 = swift_checkMetadataState();
    v4(2, v5, AssociatedConformanceWitness);
    if (!v1) {
      *(unsigned char *)(v0 + v2) = 1;
    }
  }
}

void sub_1003749A4()
{
  uint64_t v2 = *(void *)(*(void *)v0 + 736);
  if (*(unsigned char *)(v0 + v2) == 1)
  {
    swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v4 = *(void (**)(void, uint64_t, uint64_t))(AssociatedConformanceWitness + 96);
    uint64_t v5 = swift_checkMetadataState();
    v4(0, v5, AssociatedConformanceWitness);
    if (!v1) {
      *(unsigned char *)(v0 + v2) = 0;
    }
  }
}

uint64_t sub_100374AEC(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 88);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

BOOL sub_100374B8C(Swift::UInt a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(void *)(v8 + 8 * v6) == a1) {
    return 1;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    uint64_t v12 = *(void *)(v8 + 8 * v11);
    BOOL result = v12 == a1;
    if (v12 == a1) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

BOOL sub_100374C7C(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  Hasher.init(_seed:)();
  uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  NANClusterChangeEvent.hash(into:)((int)&v13, a1 & 0xFFFFFFFFFFFFLL);
  Swift::Int v5 = Hasher._finalize()();
  uint64_t v6 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v7 = v5 & ~v6;
  uint64_t v8 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
    return 0;
  }
  if (static NANClusterChangeEvent.__derived_struct_equals(_:_:)(*(unsigned __int16 *)(*(void *)(a2 + 48) + 6 * v7) | ((unint64_t)*(unsigned int *)(*(void *)(a2 + 48) + 6 * v7 + 2) << 16), v4))
  {
    return 1;
  }
  uint64_t v10 = ~v6;
  unint64_t v11 = (v7 + 1) & v10;
  if (((*(void *)(v8 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    BOOL v9 = static NANClusterChangeEvent.__derived_struct_equals(_:_:)(*(unsigned __int16 *)(*(void *)(a2 + 48) + 6 * v11) | ((unint64_t)*(unsigned int *)(*(void *)(a2 + 48) + 6 * v11 + 2) << 16), v4);
    if (v9) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v8 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return v9;
}

BOOL sub_100374DA4(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  if (!*(void *)(a4 + 16)) {
    return 0;
  }
  Swift::UInt8 v8 = HIBYTE(a3);
  Hasher.init(_seed:)();
  String.lowercased()();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v8);
  Swift::Int v9 = Hasher._finalize()();
  uint64_t v10 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v11 = v9 & ~v10;
  uint64_t v12 = a4 + 56;
  if (((*(void *)(a4 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  uint64_t v13 = *(void *)(a4 + 48) + 24 * v11;
  uint64_t v14 = *(void *)(v13 + 8);
  uint64_t v26 = *(void *)v13;
  __int16 v15 = *(unsigned __int8 *)(v13 + 16) | (*(unsigned __int8 *)(v13 + 17) << 8);
  __int16 v16 = a3 & 0xFF01;
  swift_bridgeObjectRetain();
  BOOL v17 = static DNSRecords.Identifier.== infix(_:_:)(v26, v14, v15, a1, a2, a3 & 0xFF01);
  swift_bridgeObjectRelease();
  if (v17) {
    return 1;
  }
  uint64_t v19 = ~v10;
  unint64_t v20 = (v11 + 1) & ~v10;
  if (((*(void *)(v12 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
    return 0;
  }
  do
  {
    uint64_t v21 = *(void *)(a4 + 48) + 24 * v20;
    uint64_t v22 = *(void *)v21;
    uint64_t v23 = *(void *)(v21 + 8);
    __int16 v24 = *(unsigned __int8 *)(v21 + 16) | (*(unsigned __int8 *)(v21 + 17) << 8);
    swift_bridgeObjectRetain();
    BOOL v18 = static DNSRecords.Identifier.== infix(_:_:)(v22, v23, v24, a1, a2, v16);
    swift_bridgeObjectRelease();
    if (v18) {
      break;
    }
    unint64_t v20 = (v20 + 1) & v19;
  }
  while (((*(void *)(v12 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) != 0);
  return v18;
}

BOOL sub_100374F98(unint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  unint64_t v4 = HIWORD(a1);
  unint64_t v5 = HIDWORD(a1);
  unint64_t v6 = a1 >> 24;
  unint64_t v7 = a1 >> 16;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  NANClusterChangeEvent.hash(into:)((int)&v17, ((unint64_t)BYTE5(a1) << 32) & 0xFFFF00FF00000000 | ((unint64_t)v4 << 40) | ((unint64_t)v5 << 24) | ((unint64_t)v6 << 16) | ((unint64_t)v7 << 8) | BYTE1(a1));
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = v8 & ~v9;
  uint64_t v11 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
    return 0;
  }
  uint64_t v12 = (unsigned __int16 *)(*(void *)(a2 + 48) - v10 + 8 * v10);
  if (static NANPeerServiceIdentifier.__derived_struct_equals(_:_:)(*v12 | ((unint64_t)*((unsigned __int8 *)v12 + 2) << 16) | ((unint64_t)*(unsigned int *)((char *)v12 + 3) << 24), ((unint64_t)BYTE5(a1) << 40) | ((unint64_t)BYTE6(a1) << 48) | ((unint64_t)BYTE4(a1) << 32) | ((unint64_t)BYTE3(a1) << 24) | ((unint64_t)BYTE2(a1) << 16) | ((unint64_t)BYTE1(a1) << 8) | a1))
  {
    return 1;
  }
  unint64_t v14 = (v10 + 1) & ~v9;
  if (((*(void *)(v11 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
    return 0;
  }
  do
  {
    __int16 v15 = (unsigned __int16 *)(*(void *)(a2 + 48) - v14 + 8 * v14);
    BOOL v13 = static NANPeerServiceIdentifier.__derived_struct_equals(_:_:)(*v15 | ((unint64_t)*((unsigned __int8 *)v15 + 2) << 16) | ((unint64_t)*(unsigned int *)((char *)v15 + 3) << 24), ((unint64_t)BYTE5(a1) << 40) | ((unint64_t)BYTE6(a1) << 48) | ((unint64_t)BYTE4(a1) << 32) | ((unint64_t)BYTE3(a1) << 24) | ((unint64_t)BYTE2(a1) << 16) | ((unint64_t)BYTE1(a1) << 8) | a1);
    if (v13) {
      break;
    }
    unint64_t v14 = (v14 + 1) & ~v9;
  }
  while (((*(void *)(v11 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
  return v13;
}

uint64_t sub_100375138(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v3 = Hasher._finalize()();
    swift_bridgeObjectRelease();
    uint64_t v4 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v5 = v3 & ~v4;
    uint64_t v6 = a2 + 56;
    if ((*(void *)(a2 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
    {
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v9 = v8;
      if (v7 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v9 == v10)
      {
LABEL_17:
        swift_bridgeObjectRelease_n();
        goto LABEL_18;
      }
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v12)
      {
LABEL_18:
        char v20 = 1;
        return v20 & 1;
      }
      uint64_t v13 = ~v4;
      unint64_t v14 = (v5 + 1) & v13;
      if ((*(void *)(v6 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
      {
        while (1)
        {
          uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v17 = v16;
          if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18) {
            break;
          }
          char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v20 & 1) == 0)
          {
            unint64_t v14 = (v14 + 1) & v13;
            if ((*(void *)(v6 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14)) {
              continue;
            }
          }
          return v20 & 1;
        }
        goto LABEL_17;
      }
    }
  }
  char v20 = 0;
  return v20 & 1;
}

uint64_t sub_100375300()
{
  return swift_slowAlloc();
}

uint64_t sub_100375308()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 440);
  if (*(void *)(v0 + v1))
  {
    uint64_t v2 = *(void *)(v0 + v1);
  }
  else
  {
    uint64_t v3 = v0;
    type metadata accessor for AWDLDiscoveryEngine();
    uint64_t v4 = swift_retain();
    uint64_t v2 = sub_100315634(v4);
    swift_release();
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_1003753C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a3, v7);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = a2;
  char v12 = (uint64_t *)(v3 + *(void *)(*(void *)v3 + 744));
  swift_beginAccess();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v15 = *v12;
  *char v12 = 0x8000000000000000;
  sub_1002951C4((uint64_t)sub_10006CB44, v11, (uint64_t)v10, isUniquelyReferenced_nonNull_native);
  *char v12 = v15;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_endAccess();
}

uint64_t sub_100375570(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + *(void *)(*(void *)v1 + 744));
  swift_beginAccess();
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_1000316CC(a1);
  char v6 = v5;
  swift_bridgeObjectRelease();
  if ((v6 & 1) == 0) {
    return swift_endAccess();
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = *v3;
  uint64_t v12 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_1003A26A8((uint64_t *)&unk_1004883C0);
    uint64_t v8 = v12;
  }
  uint64_t v9 = *(void *)(v8 + 48);
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9 + *(void *)(*(void *)(v10 - 8) + 72) * v4, v10);
  sub_1003A09DC(v4, v12);
  uint64_t *v3 = v12;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_release();
}

void sub_1003756AC(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v11 = 0;
  if (!v9) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    id v19 = *(id *)(*(void *)(a3 + 48) + 8 * i);
    id v17 = v19;
    char v18 = a1(&v19);
    if (v3)
    {
      swift_release();

      return;
    }
    if (v18)
    {
LABEL_27:
      swift_release();
      return;
    }

    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v11++, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v11 >= v10) {
      goto LABEL_27;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v11);
    if (!v15) {
      break;
    }
LABEL_17:
    unint64_t v9 = (v15 - 1) & v15;
  }
  int64_t v16 = v11 + 1;
  if (v11 + 1 >= v10) {
    goto LABEL_27;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15) {
    goto LABEL_16;
  }
  int64_t v16 = v11 + 2;
  if (v11 + 2 >= v10) {
    goto LABEL_27;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15) {
    goto LABEL_16;
  }
  int64_t v16 = v11 + 3;
  if (v11 + 3 >= v10) {
    goto LABEL_27;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15) {
    goto LABEL_16;
  }
  int64_t v16 = v11 + 4;
  if (v11 + 4 >= v10) {
    goto LABEL_27;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15)
  {
LABEL_16:
    int64_t v11 = v16;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v11 >= v10) {
      goto LABEL_27;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_17;
    }
  }
LABEL_30:
  __break(1u);
}

BOOL sub_100375864(BOOL result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  unsigned int v3 = (0x801004u >> (8 * result)) & 0xFFC;
  if (((0x801004u >> (8 * *(unsigned char *)(a2 + 32))) & 0xFFC) == v3) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (uint64_t i = 33; ; ++i)
  {
    uint64_t v5 = i - 31;
    if (__OFADD__(i - 32, 1)) {
      break;
    }
    int v6 = (0x801004u >> (8 * *(unsigned char *)(a2 + i)));
    BOOL result = v6 == v3;
    if (v6 == v3 || v5 == v2) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1003758F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;
  if (v3 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v5 == v6)
  {
LABEL_20:
    swift_bridgeObjectRelease_n();
    return 1;
  }
  char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v8)
  {
LABEL_7:
    swift_bridgeObjectRelease();
    return 1;
  }
  if (v2 == 1)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v10 = 5;
  while (1)
  {
    uint64_t v11 = v10 - 3;
    if (__OFADD__(v10 - 4, 1)) {
      break;
    }
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;
    if (v12 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v14 == v15)
    {
      swift_bridgeObjectRelease();
      goto LABEL_20;
    }
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v17) {
      goto LABEL_7;
    }
    ++v10;
    if (v11 == v2) {
      goto LABEL_17;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100375A48(uint64_t result, uint64_t a2, uint64_t a3)
{
  id v19 = (uint64_t (*)(unsigned char *))result;
  uint64_t v18 = *(void *)(a3 + 16);
  if (v18)
  {
    unint64_t v4 = 0;
    uint64_t v5 = (char *)(a3 + 37);
    uint64_t v6 = _swiftEmptyArrayStorage;
    uint64_t v17 = a3;
    while (v4 < *(void *)(a3 + 16))
    {
      char v11 = *(v5 - 5);
      char v12 = *(v5 - 4);
      char v13 = *(v5 - 3);
      char v14 = *(v5 - 2);
      char v15 = *(v5 - 1);
      char v16 = *v5;
      v21[0] = v11;
      v21[1] = v12;
      void v21[2] = v13;
      v21[3] = v14;
      v21[4] = v15;
      char v20 = v16;
      v21[5] = v16;
      uint64_t result = v19(v21);
      if (v3)
      {
        swift_release();
        goto LABEL_15;
      }
      if (result)
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v22 = v6;
        if ((result & 1) == 0)
        {
          uint64_t result = sub_1002BF3E4(0, v6[2] + 1, 1);
          uint64_t v6 = v22;
        }
        unint64_t v8 = v6[2];
        unint64_t v7 = v6[3];
        unint64_t v9 = v8 + 1;
        if (v8 >= v7 >> 1)
        {
          uint64_t result = sub_1002BF3E4(v7 > 1, v8 + 1, 1);
          unint64_t v9 = v8 + 1;
          uint64_t v3 = 0;
          uint64_t v6 = v22;
        }
        v6[2] = v9;
        uint64_t v10 = (char *)v6 + 6 * v8;
        unsigned char v10[32] = v11;
        v10[33] = v12;
        v10[34] = v13;
        v10[35] = v14;
        v10[36] = v15;
        v10[37] = v20;
      }
      ++v4;
      v5 += 6;
      a3 = v17;
      if (v18 == v4) {
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v6 = _swiftEmptyArrayStorage;
LABEL_15:
    swift_bridgeObjectRelease();
    return (uint64_t)v6;
  }
  return result;
}

uint64_t sub_100375BF8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_100330038(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[7 * v8 + 4];
  if (a1 + 32 < v9 + 56 * v2 && v9 < a1 + 32 + 56 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100375D54(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_100330274(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[v8 + 4];
  if (a1 + 32 < v9 + 8 * v2 && v9 < a1 + 32 + 8 * v2) {
    goto LABEL_24;
  }
  type metadata accessor for AWDLTrafficRegistrationService(0);
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100375EB4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100010BCC(&qword_100483C10);
  __chkstk_darwin();
  int64_t v4 = (char *)v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100487D20);
  __chkstk_darwin();
  uint64_t v6 = (char *)v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unownedRetainStrong();
  char v7 = sub_100336530();
  uint64_t result = swift_release();
  if ((v7 & 1) != 0 && *(unsigned char *)(v0 + *(void *)(*(void *)v0 + 488)) == 1)
  {
    v42[1] = v2;
    WiFiInterface.linkState.setter(1);
    uint64_t v9 = v0 + *(void *)(*(void *)v0 + 96);
    swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48);
    uint64_t v12 = swift_checkMetadataState();
    void v42[2] = v9;
    uint64_t v43 = v12;
    int v13 = v11(v12, AssociatedConformanceWitness);
    int v14 = WiFiInterface.linkState.getter();
    if v13 == 2 || ((v14 ^ v13))
    {
      char v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v17 = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "Forcing new link state because of mismatch", v17, 2u);
        swift_slowDealloc();
      }

      WiFiInterface.$linkState.getter((uint64_t)v6);
      MutableDriverProperty.restore()();
      sub_1000380B4((uint64_t)v6, (uint64_t *)&unk_100487D20);
    }
    uint64_t v18 = *(void *)(*(void *)v1 + 592);
    uint64_t v19 = *(void *)(v1 + v18);
    if (v19)
    {
      char v20 = *(void (**)(uint64_t))(*(void *)v19 + 192);
      swift_retain();
      v20(1);
      swift_release();
    }
    sub_100010BCC((uint64_t *)&unk_1004882C0);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_1003B2450;
    uint64_t v22 = WiFiInterface.macAddress.getter();
    *(void *)(v21 + 32) = WiFiAddress.ipv6LinkLocalAddress.getter(v22 & 0xFFFFFFFFFFFFLL);
    *(void *)(v21 + 40) = v23;
    *(void *)(v21 + 48) = v24;
    *(void *)(v21 + 56) = v25;
    WiFiInterface.ipv6Addresses.setter(v21);
    uint64_t v26 = *(void *)(v1 + v18);
    if (v26)
    {
      swift_retain();
      uint64_t v27 = WiFiInterface.ipv6Addresses.getter();
      (*(void (**)(uint64_t))(*(void *)v26 + 336))(v27);
      swift_release();
    }
    uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 96);
    uint64_t v29 = v28(v43, AssociatedConformanceWitness);
    uint64_t v30 = WiFiInterface.ipv6Addresses.getter();
    char v31 = sub_10009BCA0(v29, v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v31 & 1) == 0)
    {
      id v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v32, v33))
      {
        id v34 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v34 = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Forcing new IPv6 addresses because of mismatch", v34, 2u);
        swift_slowDealloc();
      }

      WiFiInterface.$ipv6Addresses.getter((uint64_t)v4);
      MutableDriverProperty.restore()();
      sub_1000380B4((uint64_t)v4, &qword_100483C10);
    }
    if (*(void *)(v1 + v18))
    {
      uint64_t v35 = v28(v43, AssociatedConformanceWitness);
      uint64_t v36 = WiFiInterface.ipv6Addresses.getter();
      if (v35)
      {
        uint64_t v37 = swift_bridgeObjectRetain();
        char v38 = sub_10009BCA0(v37, v36);
        swift_bridgeObjectRelease_n();
        uint64_t result = swift_bridgeObjectRelease();
        if (v38) {
          return result;
        }
        goto LABEL_22;
      }
    }
    else
    {
      WiFiInterface.ipv6Addresses.getter();
    }
    uint64_t result = swift_bridgeObjectRelease();
LABEL_22:
    uint64_t v39 = *(void *)(v1 + v18);
    if (v39)
    {
      uint64_t v40 = *(void (**)(uint64_t))(*(void *)v39 + 352);
      uint64_t v41 = swift_retain();
      v40(v41);
      swift_release();
      MutableDriverProperty.restore()();
      return sub_1000380B4((uint64_t)v4, &qword_100483C10);
    }
  }
  return result;
}

uint64_t sub_100376468@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_100010BCC(&qword_100487CE0);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t v9 = (uint64_t *)(v2 + *(void *)(*(void *)v2 + 424));
  swift_beginAccess();
  uint64_t v10 = *v9;
  if (*(void *)(v10 + 16)
    && (uint64_t v11 = sub_10039F858(a1 & 0xFFFFFFFFFFFFLL, (void (*)(unsigned char *, uint64_t))NANClusterChangeEvent.hash(into:), (uint64_t (*)(uint64_t, Swift::Int))sub_100031D78), (v12 & 1) != 0))
  {
    uint64_t v13 = v11;
    uint64_t v14 = *(void *)(v10 + 56);
    uint64_t v15 = type metadata accessor for AWDLPeer(0);
    uint64_t v16 = *(void *)(v15 - 8);
    sub_1003AB930(v14 + *(void *)(v16 + 72) * v13, (uint64_t)v8, type metadata accessor for AWDLPeer);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v8, 0, 1, v15);
  }
  else
  {
    uint64_t v15 = type metadata accessor for AWDLPeer(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v8, 1, 1, v15);
  }
  sub_10006EC68((uint64_t)v8, (uint64_t)v6, &qword_100487CE0);
  type metadata accessor for AWDLPeer(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v6, 1, v15) == 1)
  {
    AWDLPeer.init(macAddress:)(a1 & 0xFFFFFFFFFFFFLL, a2);
    sub_1000380B4((uint64_t)v6, &qword_100487CE0);
  }
  else
  {
    sub_1003AB998((uint64_t)v6, a2, type metadata accessor for AWDLPeer);
  }
  return swift_endAccess();
}

char *sub_100376704(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10037B9F8(a1, a2, a3);
}

uint64_t sub_100376758()
{
  sub_100375308();
  sub_10030A518();
  swift_release();
  uint64_t v1 = *(void *)(*(void *)v0 + 680);
  char v2 = *(unsigned char *)(v0 + v1);
  sub_100379A98(0);
  *(unsigned char *)(v0 + v1) = 0;

  return sub_10037A3D8(v2);
}

uint64_t sub_1003767D0(char *a1, void *a2)
{
  uint64_t v3 = (uint64_t)v2;
  uint64_t v6 = *v2;
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (uint64_t *)((char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = OS_dispatch_queue.awdl.unsafeMutableAddressor();
  char v12 = (void *)*v11;
  *uint64_t v10 = *v11;
  (*(void (**)(uint64_t *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v8 + 8))(v10, v7);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    goto LABEL_30;
  }
  swift_beginAccess();
  uint64_t v15 = sub_100010BCC(&qword_1004883E0);
  IDPool.availableID()(v15, (char *)&v59);
  swift_endAccess();
  if (v60)
  {
    sub_10000F000();
    swift_allocError();
    uint64_t v17 = 4;
LABEL_8:
    *(void *)uint64_t v16 = v17;
    *(void *)(v16 + 8) = 0;
    *(unsigned char *)(v16 + 16) = 1;
    return swift_willThrow();
  }
  uint64_t v18 = v59;
  id v19 = [self interfaceWithProtocol:&OBJC_PROTOCOL___WiFiP2PAWDLStateMonitorXPCDelegate];
  char v20 = *(void **)&a1[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection];
  [v20 setRemoteObjectInterface:v19];

  uint64_t v21 = swift_allocObject();
  swift_weakInit();
  uint64_t v22 = (void (*)())swift_allocObject();
  *((void *)v22 + 2) = *(void *)(v6 + 408);
  *((void *)v22 + 3) = *(void *)(v6 + 416);
  *((void *)v22 + 4) = v21;
  *((void *)v22 + 5) = a2;
  *((void *)v22 + 6) = v18;
  uint64_t v57 = v18;
  uint64_t v23 = (void (**)())&a1[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler];
  uint64_t v58 = a1;
  uint64_t v24 = *(void *)&a1[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_invalidationHandler];
  *uint64_t v23 = sub_1003ABB48;
  v23[1] = v22;
  id v25 = a2;
  sub_100011E30(v24);
  id v26 = [v20 remoteObjectProxy];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_100010BCC(&qword_1004883E8);
  if (!swift_dynamicCast())
  {
    sub_10000F000();
    swift_allocError();
    uint64_t v17 = 2;
    goto LABEL_8;
  }
  uint64_t v28 = v58;
  uint64_t v27 = v59;
  v61[0] = v58;
  v61[1] = v59;
  _OWORD v61[2] = v25;
  v61[5] = v57;
  swift_beginAccess();
  type metadata accessor for AWDLInterface.StateMonitoringClient();
  type metadata accessor for Dictionary();
  id v29 = v25;
  id v30 = v28;
  swift_unknownObjectRetain();
  Dictionary.subscript.setter();
  swift_endAccess();
  id v31 = v30;
  id v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.default.getter();
  BOOL v34 = os_log_type_enabled(v32, v33);
  uint64_t v57 = v29;
  if (v34)
  {
    uint64_t v56 = v32;
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    uint64_t v36 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v35 = 138412290;
    id v54 = v35 + 4;
    char v55 = v35;
    v61[0] = v31;
    id v37 = v31;
    id v32 = v56;
    id v29 = v57;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v36 = v58;

    _os_log_impl((void *)&_mh_execute_header, v32, v33, "%@ is monitoring AWDL state information", v55, 0xCu);
    sub_100010BCC(&qword_10047CC30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  if ([v29 options])
  {
    uint64_t v38 = sub_100376F44(0);
    if (v38)
    {
      uint64_t v39 = (void *)v38;
      [v27 updatedAWDLState:v38];
    }
  }
  if (([v29 options] & 0x20) != 0)
  {
    uint64_t v40 = *(void *)(v3 + *(void *)(*(void *)v3 + 472));
    uint64_t v41 = j___s7CoreP2P15ChannelSequenceV8endIndexSivg(v40);
    if (!v41)
    {
LABEL_19:
      sub_10006F314(0, (unint64_t *)&unk_1004882A0);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v27 channelSequenceChangedEvent:isa];

      id v29 = v57;
      goto LABEL_20;
    }
    uint64_t v42 = v41;
    uint64_t v58 = v27;
    v61[0] = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
    if ((v42 & 0x8000000000000000) == 0)
    {
      unint64_t v43 = 0;
      do
      {
        unint64_t v44 = v43 + 1;
        unint64_t v45 = ChannelSequence.subscript.getter(v43, v40);
        Optional<A>.apiChannel.getter(v45 & 0xFFFFFFFFFFFFLL);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        unint64_t v43 = v44;
      }
      while (v42 != v44);
      swift_bridgeObjectRelease();
      uint64_t v27 = v58;
      goto LABEL_19;
    }
LABEL_30:
    __break(1u);
    return result;
  }
LABEL_20:
  if (([v29 options] & 4) != 0) {
    [v27 updatedRealtimeMode:*(unsigned __int8 *)(v3 + *(void *)(*(void *)v3 + 464))];
  }
  id v47 = [v29 servicesRequiringAvailabilityNotification];
  if (!v47) {
    return swift_unknownObjectRelease();
  }
  uint64_t v48 = v47;
  type metadata accessor for AWDLTrafficRegistrationService(0);
  uint64_t v49 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v50 = *(void *)(v49 + 16);
  if (!v50)
  {
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v51 = 0;
  do
  {
    uint64_t v52 = *(void **)(v49 + 8 * v51++ + 32);
    v61[0] = v52;
    id v53 = v52;
    sub_10039BB9C(v61, v3, v31, v27);
  }
  while (v50 != v51);
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_100376F44(char a1)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  int64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48);
  uint64_t v5 = swift_checkMetadataState();
  uint64_t v30 = v4(v5, AssociatedConformanceWitness);
  uint64_t v31 = v6;
  uint64_t v29 = v7;
  swift_bridgeObjectRetain();
  uint64_t v8 = WiFiInterface.capabilities.getter();
  uint64_t v9 = *WiFiDriverCapabilities.supportsAWDLSoloMode.unsafeMutableAddressor();
  uint64_t v33 = v8;
  BOOL v34 = (void *)v9;
  unint64_t v10 = sub_1002C8868();
  swift_bridgeObjectRetain_n();
  ExtendableOptionSet.formIntersection(_:)((uint64_t)&v33, (uint64_t)&type metadata for WiFiDriverCapabilities, v10);
  char v32 = sub_1000956AC(v34, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a1)
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(v5, AssociatedConformanceWitness);
    uint64_t v12 = j___s7CoreP2P15ChannelSequenceV8endIndexSivg(v11);
    if (v12)
    {
      uint64_t v13 = v12;
      BOOL v34 = _swiftEmptyArrayStorage;
      uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
      if (v13 < 0)
      {
        __break(1u);
        return result;
      }
      unint64_t v15 = 0;
      do
      {
        unint64_t v16 = v15 + 1;
        unint64_t v17 = ChannelSequence.subscript.getter(v15, v11);
        Optional<A>.apiChannel.getter(v17 & 0xFFFFFFFFFFFFLL);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        unint64_t v15 = v16;
      }
      while (v13 != v16);
    }
    swift_bridgeObjectRelease();
  }
  if (*(unsigned char *)(v1 + *(void *)(*(void *)v1 + 680)) == 1) {
    char v18 = 1;
  }
  else {
    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(v5, AssociatedConformanceWitness);
  uint64_t v20 = WiFiInterface.macAddress.getter();
  id v21 = WiFiAddress.apiAddress.getter(v20 & 0xFFFFFFFFFFFFLL);
  id v22 = Optional<A>.apiChannel.getter(v30 & 0xFFFFFFFFFFFFLL);
  id v23 = Optional<A>.apiChannel.getter(v31 & 0xFFFFFFFFFFFFLL);
  id v24 = Optional<A>.apiChannel.getter(v29 & 0xFFFFFFFFFFFFLL);
  id v25 = objc_allocWithZone((Class)WiFiP2PAWDLState);
  NSString v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10006F314(0, (unint64_t *)&unk_1004882A0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v28 = [v25 initWithInterfaceName:v26 supportsSoloMode:v32 & 1 supportsDataTransfer:1 channelSequence:isa isEnabled:v18 & 1 substate:v19 macAddress:v21 peerMasterChannel:v22 peerPrimaryPreferredChannel:v23 peerSecondaryPreferredChannel:v24];

  return (uint64_t)v28;
}

BOOL sub_100377334(uint64_t a1)
{
  sub_100010BCC(&qword_100487CE0);
  __chkstk_darwin();
  int64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (uint64_t *)(v1 + *(void *)(*(void *)v1 + 424));
  swift_beginAccess();
  uint64_t v6 = *v5;
  if (*(void *)(v6 + 16)
    && (uint64_t v7 = sub_10039F858(a1 & 0xFFFFFFFFFFFFLL, (void (*)(unsigned char *, uint64_t))NANClusterChangeEvent.hash(into:), (uint64_t (*)(uint64_t, Swift::Int))sub_100031D78), (v8 & 1) != 0))
  {
    uint64_t v9 = v7;
    uint64_t v10 = *(void *)(v6 + 56);
    uint64_t v11 = type metadata accessor for AWDLPeer(0);
    uint64_t v12 = *(void *)(v11 - 8);
    sub_1003AB930(v10 + *(void *)(v12 + 72) * v9, (uint64_t)v4, type metadata accessor for AWDLPeer);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v4, 0, 1, v11);
  }
  else
  {
    uint64_t v11 = type metadata accessor for AWDLPeer(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v4, 1, 1, v11);
  }
  swift_endAccess();
  type metadata accessor for AWDLPeer(0);
  BOOL v13 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v4, 1, v11) != 1;
  sub_1000380B4((uint64_t)v4, &qword_100487CE0);
  return v13;
}

uint64_t sub_10037755C()
{
  void (*v11)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  unint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t result;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  int v35;
  char v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _OWORD v44[3];
  long long v45;
  long long v46;
  unint64_t v47;
  void v48[502];
  unsigned char v49[4016];
  unsigned char v50[4016];

  __chkstk_darwin();
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  uint64_t v41 = *(void *)(v2 - 8);
  uint64_t v42 = v2;
  __chkstk_darwin();
  uint64_t v40 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchTime();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v38 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v39 = (char *)&v37 - v7;
  sub_100010BCC(&qword_10047DB90);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 160);
  uint64_t v12 = swift_checkMetadataState();
  v11(v48, v12, AssociatedConformanceWitness);
  sub_10006EC68((uint64_t)v48, (uint64_t)v49, &qword_10047E7B0);
  if (sub_10006E498((uint64_t)v49) == 1)
  {
    BOOL v13 = sub_10001FE34((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    memcpy(v50, v49, sizeof(v50));
    BOOL v13 = apple80211_awdl_low_latency_statistics.eventPayload()();
  }
  id v47 = v13;
  uint64_t v14 = v0 + *(void *)(*(void *)v0 + 512);
  swift_beginAccess();
  sub_1000136F4(v14, (uint64_t)v9, &qword_10047DB90);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v9, 1, v4) == 1)
  {
    unint64_t v45 = 0u;
    uint64_t v46 = 0u;
LABEL_8:
    sub_1000380B4((uint64_t)&v45, &qword_10047D0D0);
    sub_10003395C(0xD000000000000019, 0x80000001003DD7B0, v44);
    sub_1000380B4((uint64_t)v44, &qword_10047D0D0);
    id v22 = v47;
    goto LABEL_9;
  }
  uint64_t v15 = v39;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v39, v9, v4);
  type metadata accessor for P2PTimer();
  unint64_t v16 = v38;
  variable initialization expression of AWDLPeer.lastUpdated();
  unint64_t v17 = v40;
  DispatchTime.distance(to:)();
  char v18 = *(void (**)(char *, uint64_t))(v5 + 8);
  v18(v16, v4);
  uint64_t v19 = DispatchTimeInterval.rawSeconds.getter();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v17, v42);
  *((void *)&v46 + 1) = &type metadata for Int;
  *(void *)&unint64_t v45 = v19;
  v18(v15, v4);
  if (!*((void *)&v46 + 1)) {
    goto LABEL_8;
  }
  sub_10003803C(&v45, v44);
  uint64_t v20 = v47;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v43 = v20;
  sub_100034178(v44, 0xD000000000000019, 0x80000001003DD7B0, isUniquelyReferenced_nonNull_native);
  id v22 = v43;
  swift_bridgeObjectRelease();
LABEL_9:
  id v23 = *(void *)(*(void *)v1 + 496);
  id v24 = *(void *)(v1 + v23);
  *((void *)&v46 + 1) = &type metadata for Int;
  *(void *)&unint64_t v45 = v24;
  sub_10003803C(&v45, v44);
  id v25 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v43 = v22;
  sub_100034178(v44, 0xD000000000000028, 0x80000001003DD730, v25);
  NSString v26 = v43;
  swift_bridgeObjectRelease();
  if (*(void *)(v26 + 16))
  {
    uint64_t v27 = sub_10000DDE0(0xD000000000000029, 0x80000001003DD760);
    if (v28)
    {
      sub_1000107A4(*(void *)(v26 + 56) + 32 * v27, (uint64_t)&v45);
      uint64_t result = swift_dynamicCast();
      if (result)
      {
        uint64_t v30 = *(void *)(v1 + v23);
        if (__OFSUB__(*(void *)&v44[0], v30))
        {
          __break(1u);
          return result;
        }
        *((void *)&v46 + 1) = &type metadata for Int;
        *(void *)&unint64_t v45 = *(void *)&v44[0] - v30;
        sub_10003803C(&v45, v44);
        uint64_t v31 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v43 = v26;
        sub_100034178(v44, 0xD000000000000029, 0x80000001003DD760, v31);
        NSString v26 = v43;
        swift_bridgeObjectRelease();
      }
    }
  }
  char v32 = *(void *)(v1 + v23);
  *((void *)&v46 + 1) = &type metadata for Int;
  *(void *)&unint64_t v45 = v32;
  sub_10003803C(&v45, v44);
  uint64_t v33 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v43 = v26;
  sub_100034178(v44, 0xD000000000000025, 0x80000001003DDA50, v33);
  BOOL v34 = v43;
  swift_bridgeObjectRelease();
  uint64_t v35 = *(unsigned __int8 *)(v1 + *(void *)(*(void *)v1 + 504));
  if (v35 != 2)
  {
    *((void *)&v46 + 1) = &type metadata for Bool;
    LOBYTE(v45) = v35 & 1;
    sub_10003803C(&v45, v44);
    uint64_t v36 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v43 = v34;
    sub_100034178(v44, 0xD000000000000012, 0x80000001003DD9D0, v36);
    BOOL v34 = v43;
    swift_bridgeObjectRelease();
  }
  return v34;
}

uint64_t sub_100377C04(uint64_t a1)
{
  id v2 = [objc_allocWithZone((Class)AWDLTrafficRegistrationConfiguration) initWithUniqueIdentifier:AWDLTrafficRegistrationServiceAirPlay peerAddress:a1];
  id v3 = sub_1003A9B14(v2, 1, 1);

  if (v3)
  {
    swift_errorRelease();
    return 16;
  }
  else
  {
    id v5 = [objc_allocWithZone((Class)AWDLTrafficRegistrationConfiguration) initWithUniqueIdentifier:AWDLTrafficRegistrationServiceAirPlayConnectivity peerAddress:a1];
    sub_100371DFC(v5);

    return 0;
  }
}

uint64_t sub_100377D50(uint64_t result)
{
  int v2 = *(unsigned __int8 *)(v1 + *(void *)(*(void *)v1 + 464));
  if (v2 != (result & 1))
  {
    swift_unownedRetainStrong();
    id v3 = sub_1003AA744((uint64_t)&off_100467568);
    sub_10033B738(v2, (uint64_t)v3);
    swift_release();
    swift_bridgeObjectRelease();
    sub_1003A9680();
    __chkstk_darwin();
    type metadata accessor for AWDLInterface.StateMonitoringClient();
    type metadata accessor for Dictionary.Values();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    Sequence.filter(_:)();
    type metadata accessor for Array();
    swift_getWitnessTable();
    Sequence.forEach(_:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100377F30(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 472);
  uint64_t v4 = swift_bridgeObjectRetain();
  LOBYTE(a1) = static ChannelSequence.__derived_struct_equals(_:_:)(v4, a1);
  uint64_t result = swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
  {
    uint64_t v6 = *(void *)(v1 + v3);
    uint64_t v7 = j___s7CoreP2P15ChannelSequenceV8endIndexSivg(v6);
    if (v7)
    {
      uint64_t v8 = v7;
      swift_bridgeObjectRetain();
      uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
      if (v8 < 0)
      {
        __break(1u);
        return result;
      }
      unint64_t v9 = 0;
      do
      {
        unint64_t v10 = v9 + 1;
        unint64_t v11 = ChannelSequence.subscript.getter(v9, v6);
        Optional<A>.apiChannel.getter(v11 & 0xFFFFFFFFFFFFLL);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        unint64_t v9 = v10;
      }
      while (v8 != v10);
      swift_bridgeObjectRelease();
    }
    sub_1003A9680();
    __chkstk_darwin();
    type metadata accessor for AWDLInterface.StateMonitoringClient();
    type metadata accessor for Dictionary.Values();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    Sequence.filter(_:)();
    __chkstk_darwin();
    type metadata accessor for Array();
    swift_getWitnessTable();
    Sequence.forEach(_:)();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1003781CC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  sub_10006F314(0, (unint64_t *)&unk_1004882A0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v1 channelSequenceChangedEvent:isa];
}

uint64_t sub_100378240(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 472);
  uint64_t v3 = *(void *)(v1 + v2);
  *(void *)(v1 + v2) = a1;
  sub_100377F30(v3);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100378294(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + *(void *)(*(void *)v1 + 536));
  swift_beginAccess();
  void *v3 = a1;
  swift_bridgeObjectRelease();
  return sub_100378300();
}

uint64_t sub_100378300()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v30 = *(void *)(v2 + 416);
  uint64_t v3 = *(void *)(v2 + 408);
  swift_getAssociatedTypeWitness();
  uint64_t v29 = v3;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v26[1] = AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v31 = AssociatedTypeWitness;
  uint64_t v32 = v6;
  __chkstk_darwin();
  id v28 = (char *)v26 - v7;
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 136);
  uint64_t v27 = swift_checkMetadataState();
  v8(v27, AssociatedConformanceWitness);
  unint64_t v9 = (void *)((char *)v1 + *(void *)(*v1 + 576));
  swift_beginAccess();
  uint64_t v10 = *v9;
  sub_10006F314(0, (unint64_t *)&unk_100484A40);
  type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation();
  sub_100296BC4();
  uint64_t v35 = NANBitmap.Channel.operatingClass.getter(v10);
  uint64_t v11 = type metadata accessor for Dictionary.Keys();
  type metadata accessor for AWDLTrafficRegistrationService(0);
  uint64_t v13 = v12;
  swift_bridgeObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  v26[0] = sub_1003741D0((void (*)(char *, char *))sub_1003ABC60, 0, v11, v13, (uint64_t)&type metadata for Never, WitnessTable, (uint64_t)&protocol witness table for Never, v15);
  swift_bridgeObjectRelease();
  unint64_t v16 = (void *)((char *)v1 + *(void *)(*v1 + 560));
  swift_beginAccess();
  uint64_t v34 = NANBitmap.Channel.operatingClass.getter(*v16);
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_1003741D0((void (*)(char *, char *))sub_10039BE18, 0, v11, v13, (uint64_t)&type metadata for Never, WitnessTable, (uint64_t)&protocol witness table for Never, v17);
  swift_bridgeObjectRelease();
  uint64_t v34 = v26[0];
  sub_100375D54(v18);
  uint64_t v19 = sub_1003A97EC(v34);
  swift_bridgeObjectRelease();
  uint64_t v20 = v31;
  uint64_t v21 = swift_getAssociatedConformanceWitness();
  id v22 = v28;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 24))(v19, v20, v21);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v22, v20);
  id v23 = (void *)((char *)v1 + *(void *)(*v1 + 584));
  swift_beginAccess();
  uint64_t v24 = *v23;
  type metadata accessor for AWDLInterface.TrafficRegistrationServiceAvailabilityMonitor();
  sub_1003A98A8(&qword_10047C870, type metadata accessor for AWDLTrafficRegistrationService);
  uint64_t v33 = NANBitmap.Channel.operatingClass.getter(v24);
  type metadata accessor for Dictionary.Keys();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  uint64_t v33 = Array.init<A>(_:)();
  sub_100010BCC(&qword_1004882B8);
  swift_getWitnessTable();
  Sequence.forEach(_:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100378820(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + *(void *)(*(void *)v1 + 560));
  swift_beginAccess();
  void *v3 = a1;
  swift_bridgeObjectRelease();
  return sub_100378300();
}

uint64_t sub_10037888C(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + *(void *)(*(void *)v1 + 576));
  swift_beginAccess();
  void *v3 = a1;
  swift_bridgeObjectRelease();
  return sub_100378300();
}

uint64_t sub_1003788F8(void *a1)
{
  swift_beginAccess();
  type metadata accessor for AWDLTrafficRegistrationService(0);
  type metadata accessor for AWDLInterface.TrafficRegistrationServiceAvailabilityMonitor();
  sub_1003A98A8(&qword_10047C870, type metadata accessor for AWDLTrafficRegistrationService);
  id v2 = a1;
  Dictionary.subscript.getter();

  swift_endAccess();
  if (v18 == (void *)1)
  {
    uint64_t v3 = self;
    id v4 = v2;
    id v5 = [v3 zeroAddress];
    id v6 = [objc_allocWithZone((Class)AWDLTrafficRegistrationConfiguration) initWithUniqueIdentifier:v4 peerAddress:v5];

    id v7 = sub_1003A9B14(v6, 0, 0);
    id v21 = v7;
    uint64_t v22 = 0;
  }
  else
  {
    id v21 = v18;
    uint64_t v22 = v19;
    if (v19) {
      goto LABEL_11;
    }
  }
  id v8 = v2;
  unint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    v20[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315394;
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100010680(v12, v13, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    swift_beginAccess();
    if (v21) {
      uint64_t v14 = 7630702;
    }
    else {
      uint64_t v14 = 7827310;
    }
    sub_100010680(v14, 0xE300000000000000, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "New client started monitoring availability for %s, %s available", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
LABEL_11:
  uint64_t result = swift_beginAccess();
  if (__OFADD__(v22, 1))
  {
    __break(1u);
  }
  else
  {
    ++v22;
    id v16 = v21;
    swift_beginAccess();
    id v17 = v2;
    swift_errorRetain();
    type metadata accessor for Dictionary();
    Dictionary.subscript.setter();
    swift_endAccess();
    return (uint64_t)v16;
  }
  return result;
}

void sub_100378CEC(void *a1)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 584);
  swift_beginAccess();
  if (*(void *)(*(void *)v3 + 16))
  {
    swift_bridgeObjectRetain();
    sub_10039F9AC((uint64_t)a1);
    if ((v4 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
    type metadata accessor for AWDLTrafficRegistrationService(0);
    type metadata accessor for AWDLInterface.TrafficRegistrationServiceAvailabilityMonitor();
    sub_1003A98A8(&qword_10047C870, type metadata accessor for AWDLTrafficRegistrationService);
    swift_bridgeObjectRetain();
    Dictionary.subscript.getter();
    swift_bridgeObjectRelease();

    swift_errorRelease();
    if (v17[1] == 1)
    {
      id v5 = a1;
      id v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v6, v7))
      {
        id v8 = (uint8_t *)swift_slowAlloc();
        v17[0] = swift_slowAlloc();
        *(_DWORD *)id v8 = 136315138;
        uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v19 = (id)sub_100010680(v9, v10, v17);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "All clients stopped monitoring availability for %s", v8, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      swift_beginAccess();
      type metadata accessor for Dictionary();
      Dictionary.remove(at:)();
      swift_endAccess();
      swift_errorRelease();
    }
    else
    {
      swift_beginAccess();
      id v18 = a1;
      id v11 = a1;
      type metadata accessor for Dictionary._Variant();
      uint64_t v12 = (void (*)(uint64_t *, void))Dictionary._Variant.subscript.modify();
      if (*v13 != 1)
      {
        uint64_t v14 = v13[1];
        BOOL v15 = __OFSUB__(v14, 1);
        uint64_t v16 = v14 - 1;
        if (!v15)
        {
          v13[1] = v16;
          v12(v17, 0);

          swift_endAccess();
          return;
        }
        __break(1u);
      }
      __break(1u);
    }
  }
}

uint64_t sub_1003790BC@<X0>(uint64_t a1@<X8>)
{
  sub_100010BCC(&qword_10047DB90);
  __chkstk_darwin();
  char v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchTime();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  id v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v10 = (char *)&v16 - v9;
  uint64_t v11 = v1 + *(void *)(*(void *)v1 + 608);
  swift_beginAccess();
  sub_1000136F4(v11, (uint64_t)v4, &qword_10047DB90);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_1000380B4((uint64_t)v4, &qword_10047DB90);
    uint64_t v12 = enum case for DispatchTimeInterval.never(_:);
    uint64_t v13 = type metadata accessor for DispatchTimeInterval();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 104))(a1, v12, v13);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v10, v4, v5);
    type metadata accessor for P2PTimer();
    variable initialization expression of AWDLPeer.lastUpdated();
    DispatchTime.distance(to:)();
    BOOL v15 = *(void (**)(char *, uint64_t))(v6 + 8);
    v15(v8, v5);
    return ((uint64_t (*)(char *, uint64_t))v15)(v10, v5);
  }
}

uint64_t sub_100379310@<X0>(uint64_t a1@<X8>)
{
  sub_100010BCC(&qword_10047DB90);
  __chkstk_darwin();
  char v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchTime();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  id v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v10 = (char *)&v16 - v9;
  uint64_t v11 = v1 + *(void *)(*(void *)v1 + 616);
  swift_beginAccess();
  sub_1000136F4(v11, (uint64_t)v4, &qword_10047DB90);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_1000380B4((uint64_t)v4, &qword_10047DB90);
    uint64_t v12 = enum case for DispatchTimeInterval.never(_:);
    uint64_t v13 = type metadata accessor for DispatchTimeInterval();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 104))(a1, v12, v13);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v10, v4, v5);
    type metadata accessor for P2PTimer();
    variable initialization expression of AWDLPeer.lastUpdated();
    DispatchTime.distance(to:)();
    BOOL v15 = *(void (**)(char *, uint64_t))(v6 + 8);
    v15(v8, v5);
    return ((uint64_t (*)(char *, uint64_t))v15)(v10, v5);
  }
}

uint64_t sub_100379564(void (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin();
  unint64_t v10 = (char *)&v13 - v9;
  a1(v8);
  *(void *)uint64_t v7 = a2;
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchTimeInterval.seconds(_:), v4);
  LOBYTE(a2) = static DispatchTimeInterval.< infix(_:_:)();
  uint64_t v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v7, v4);
  v11(v10, v4);
  return a2 & 1;
}

uint64_t sub_1003796B4@<X0>(uint64_t a1@<X8>)
{
  sub_100010BCC(&qword_10047DB90);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchTime();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v10 = (char *)&v16 - v9;
  uint64_t v11 = v1 + *(void *)(*(void *)v1 + 664);
  swift_beginAccess();
  sub_1000136F4(v11, (uint64_t)v4, &qword_10047DB90);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_1000380B4((uint64_t)v4, &qword_10047DB90);
    uint64_t v12 = enum case for DispatchTimeInterval.never(_:);
    uint64_t v13 = type metadata accessor for DispatchTimeInterval();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 104))(a1, v12, v13);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v10, v4, v5);
    type metadata accessor for P2PTimer();
    variable initialization expression of AWDLPeer.lastUpdated();
    DispatchTime.distance(to:)();
    BOOL v15 = *(void (**)(char *, uint64_t))(v6 + 8);
    v15(v8, v5);
    return ((uint64_t (*)(char *, uint64_t))v15)(v10, v5);
  }
}

uint64_t sub_100379908()
{
  uint64_t v0 = type metadata accessor for DispatchTimeInterval();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v11 - v4;
  sub_1003796B4((uint64_t)&v11 - v4);
  *(void *)uint64_t v3 = 10;
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for DispatchTimeInterval.seconds(_:), v0);
  BOOL v6 = static DispatchTimeInterval.< infix(_:_:)();
  uint64_t v7 = *(void (**)(char *, uint64_t))(v1 + 8);
  v7(v3, v0);
  v7(v5, v0);
  if (!v6) {
    return 0;
  }
  swift_unownedRetainStrong();
  sub_1003366E8();
  uint64_t v9 = v8;
  swift_release();
  if (v9)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return 1;
}

void sub_100379A98(char a1)
{
  if (*(unsigned char *)(v1 + *(void *)(*(void *)v1 + 680))) {
    uint64_t v3 = 0x64656C62616E65;
  }
  else {
    uint64_t v3 = 0x64656C6261736964;
  }
  if (*(unsigned char *)(v1 + *(void *)(*(void *)v1 + 680))) {
    unint64_t v4 = 0xE700000000000000;
  }
  else {
    unint64_t v4 = 0xE800000000000000;
  }
  if (a1) {
    uint64_t v5 = 0x64656C62616E65;
  }
  else {
    uint64_t v5 = 0x64656C6261736964;
  }
  if (a1) {
    unint64_t v6 = 0xE700000000000000;
  }
  else {
    unint64_t v6 = 0xE800000000000000;
  }
  if (v3 == v5 && v4 == v6)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0 && (a1 & 1) == 0)
    {
      swift_beginAccess();
      sub_10006F314(0, (unint64_t *)&unk_100484A40);
      type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation();
      sub_100296BC4();
      swift_bridgeObjectRetain();
      char v9 = Dictionary.isEmpty.getter();
      swift_bridgeObjectRelease();
      if (v9)
      {
        swift_beginAccess();
        swift_bridgeObjectRetain();
        char v10 = Dictionary.isEmpty.getter();
        swift_bridgeObjectRelease();
        if (v10)
        {
          sub_100379C88();
          sub_10037A144();
        }
      }
    }
  }
}

void sub_100379C88()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v1 = type metadata accessor for Preferences();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  unint64_t v4 = (char *)v25 - v3;
  if (WiFiInterface.linkState.getter())
  {
    char v8 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 520));
    swift_beginAccess();
    if (sub_100374B8C(0xFuLL, *v8))
    {
      char v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "Skipping address rotation because in use", v11, 2u);
        swift_slowDealloc();
      }
    }
    else
    {
      WiFiInterface.preferences.getter();
      uint64_t v12 = Preferences.awdlMACAddress.getter();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      if ((v12 & 0x1000000000000) != 0) {
        static WiFiAddress.random()();
      }
      WiFiAddress.linkLocalAddress()(v13);
      WiFiInterface.macAddress.setter(v14 & 0xFFFFFFFFFFFFLL);
      sub_100010BCC((uint64_t *)&unk_1004882C0);
      uint64_t v15 = swift_allocObject();
      *(_OWORD *)(v15 + 16) = xmmword_1003B2450;
      uint64_t v16 = WiFiInterface.macAddress.getter();
      *(void *)(v15 + 32) = WiFiAddress.ipv6LinkLocalAddress.getter(v16 & 0xFFFFFFFFFFFFLL);
      *(void *)(v15 + 40) = v17;
      *(void *)(v15 + 48) = v18;
      *(void *)(v15 + 56) = v19;
      WiFiInterface.ipv6Addresses.setter(v15);
      swift_retain();
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = (uint8_t *)swift_slowAlloc();
        uint64_t v26 = swift_slowAlloc();
        *(_DWORD *)uint64_t v22 = 136315138;
        uint64_t v23 = WiFiInterface.description.getter();
        v25[1] = (os_log_t)sub_100010680(v23, v24, &v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Updated %s", v22, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release();
      }
    }
  }
  else
  {
    v25[0] = (os_log_t)Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25[0], v5))
    {
      unint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25[0], v5, "Skipping address rotation because link is down", v6, 2u);
      swift_slowDealloc();
    }
    os_log_t v7 = v25[0];
  }
}

void sub_10037A144()
{
  uint64_t v1 = *(void *)(v0 + *(void *)(*(void *)v0 + 592));
  if (v1)
  {
    uint64_t v2 = *(void (**)(uint64_t))(*(void *)v1 + 192);
    swift_retain();
    v2(1);
    uint64_t v3 = WiFiInterface.macAddress.getter();
    (*(void (**)(uint64_t))(*(void *)v1 + 240))(v3 & 0xFFFFFFFFFFFFLL);
    sub_100010BCC((uint64_t *)&unk_1004882C0);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_1003B2450;
    uint64_t v5 = (*(uint64_t (**)(void))(*(void *)v1 + 232))();
    *(void *)(v4 + 32) = WiFiAddress.ipv6LinkLocalAddress.getter(v5 & 0xFFFFFFFFFFFFLL);
    *(void *)(v4 + 40) = v6;
    *(void *)(v4 + 48) = v7;
    *(void *)(v4 + 56) = v8;
    (*(void (**)(uint64_t))(*(void *)v1 + 336))(v4);
    swift_retain();
    char v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315138;
      uint64_t v12 = WiFiInterface.description.getter();
      sub_100010680(v12, v13, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Updated %s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
    }
    else
    {

      swift_release_n();
    }
  }
}

uint64_t sub_10037A3D8(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchTime();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v1 + *(void *)(*(void *)v1 + 680))) {
    uint64_t v8 = 0x64656C62616E65;
  }
  else {
    uint64_t v8 = 0x64656C6261736964;
  }
  if (*(unsigned char *)(v1 + *(void *)(*(void *)v1 + 680))) {
    unint64_t v9 = 0xE700000000000000;
  }
  else {
    unint64_t v9 = 0xE800000000000000;
  }
  if (a1) {
    uint64_t v10 = 0x64656C62616E65;
  }
  else {
    uint64_t v10 = 0x64656C6261736964;
  }
  if (a1) {
    unint64_t v11 = 0xE700000000000000;
  }
  else {
    unint64_t v11 = 0xE800000000000000;
  }
  if (v8 == v10 && v9 == v11) {
    return swift_bridgeObjectRelease_n();
  }
  char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v13 & 1) == 0)
  {
    sub_10037A5A0(0);
    type metadata accessor for P2PTimer();
    variable initialization expression of AWDLPeer.lastUpdated();
    uint64_t v15 = v2 + *(void *)(*(void *)v2 + 600);
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 40))(v15, v7, v4);
    return swift_endAccess();
  }
  return result;
}

void sub_10037A5A0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v103 = a1;
  uint64_t v106 = 0;
  uint64_t v3 = (void *)*v1;
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  uint64_t v101 = *(void *)(v4 - 8);
  __chkstk_darwin();
  unint64_t v100 = (void *)((char *)v98 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = v3[52];
  uint64_t v7 = v3[51];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = swift_getAssociatedTypeWitness();
  __chkstk_darwin();
  unint64_t v105 = (char *)v98 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v14 = (char *)v98 - v13;
  uint64_t v102 = v3[85];
  int v15 = *((unsigned __int8 *)v2 + v102);
  uint64_t v104 = v7;
  uint64_t v107 = AssociatedConformanceWitness;
  if (v15 == 1)
  {
    uint64_t v101 = AssociatedTypeWitness;
    unint64_t v105 = (char *)v10;
    uint64_t v16 = v12;
    uint64_t v17 = (void *)((char *)v2 + v3[66]);
    swift_beginAccess();
    void *v17 = &_swiftEmptySetSingleton;
    swift_bridgeObjectRelease();
    uint64_t v18 = (void *)((char *)v2 + *(void *)(*v2 + 96));
    uint64_t v99 = *(void *)(v6 + 8);
    swift_getAssociatedTypeWitness();
    uint64_t v19 = swift_getAssociatedConformanceWitness();
    uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t))(v19 + 56);
    uint64_t v21 = swift_checkMetadataState();
    unint64_t v100 = v18;
    uint64_t v22 = v20(v21, v19);
    uint64_t v23 = *(void *)(*v2 + 472);
    uint64_t v24 = *(void *)((char *)v2 + v23);
    *(void *)((char *)v2 + v23) = v22;
    sub_100377F30(v24);
    swift_bridgeObjectRelease();
    if (((unint64_t)"fficRegistration" & 0x1000000000000000) != 0)
    {
      sub_100010BCC((uint64_t *)&unk_100487D10);
      uint64_t v26 = v106;
      _StringGuts._slowWithCString<A>(_:)();
      uint64_t v28 = v111;
      uint64_t v25 = v16;
      uint64_t v27 = v105;
    }
    else
    {
      __chkstk_darwin();
      v98[-2] = sub_1002BCC6C;
      v98[-1] = 0;
      uint64_t v25 = v16;
      uint64_t v27 = v105;
      uint64_t v26 = v106;
      if (((unint64_t)"fficRegistration" & 0x2000000000000000) != 0)
      {
        unint64_t v111 = 0xD000000000000023;
        unint64_t v112 = (unint64_t)"fficRegistration" & 0xFFFFFFFFFFFFFFLL;
        uint64_t v28 = os_transaction_create();
      }
      else
      {
        uint64_t v28 = sub_100068878(((unint64_t)"fficRegistration" & 0xFFFFFFFFFFFFFFFLL) + 32, 35, (uint64_t (*)(void))sub_10006D5A8);
      }
    }
    *(void *)((char *)v2 + *(void *)(*v2 + 688)) = v28;
    swift_unknownObjectRelease();
    uint64_t v46 = *(void **)((char *)v2 + *(void *)(*v2 + 696));
    [v46 registerClient:38 queue:*OS_dispatch_queue.awdl.unsafeMutableAddressor()];
    [v46 setAWDLEnabled:1];
    uint64_t v47 = *(void *)((char *)v2 + *(void *)(*v2 + 704));
    swift_unownedRetainStrong();
    (*(void (**)(char *, uint64_t, char *))(v25 + 16))(v14, v47 + *(void *)(*(void *)v47 + 96), v27);
    swift_release();
    uint64_t v48 = swift_getAssociatedConformanceWitness();
    uint64_t v49 = (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 32))(v21, v48);
    uint64_t v50 = swift_getAssociatedConformanceWitness();
    (*(void (**)(uint64_t, uint64_t, char *, uint64_t))(v50 + 136))(v49, 1, v27, v50);
    if (v26)
    {
      (*(void (**)(char *, char *))(v25 + 8))(v14, v27);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v51 = Logger.logObject.getter();
      os_log_type_t v52 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v51, v52))
      {
        id v53 = (uint8_t *)swift_slowAlloc();
        id v54 = (void *)swift_slowAlloc();
        *(_DWORD *)id v53 = 138412290;
        swift_errorRetain();
        uint64_t v55 = _swift_stdlib_bridgeErrorToNSError();
        unint64_t v111 = v55;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v54 = v55;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "Failed to notify AWDL enabled to infrastructure: %@", v53, 0xCu);
        sub_100010BCC(&qword_10047CC30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();

        swift_errorRelease();
        swift_errorRelease();
      }
    }
    else
    {
      (*(void (**)(char *, char *))(v25 + 8))(v14, v27);
    }
    goto LABEL_37;
  }
  v98[0] = v4;
  uint64_t v29 = (void *)((char *)v2 + v3[90]);
  uint64_t v30 = v12;
  swift_beginAccess();
  *uint64_t v29 = &_swiftEmptySetSingleton;
  swift_bridgeObjectRelease();
  sub_10038DD4C();
  *(void *)((char *)v2 + *(void *)(*v2 + 688)) = 0;
  swift_unknownObjectRelease();
  uint64_t v31 = *(void **)((char *)v2 + *(void *)(*v2 + 696));
  [v31 setAWDLEnabled:0];
  [v31 unregisterClient];
  uint64_t v32 = *(void *)((char *)v2 + *(void *)(*v2 + 704));
  swift_unownedRetainStrong();
  uint64_t v33 = v32 + *(void *)(*(void *)v32 + 96);
  uint64_t v99 = v30;
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v105, v33, v10);
  swift_release();
  uint64_t v34 = *(void *)(v6 + 8);
  swift_getAssociatedTypeWitness();
  v98[1] = v34;
  uint64_t v35 = swift_getAssociatedConformanceWitness();
  uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t))(v35 + 32);
  uint64_t v37 = swift_checkMetadataState();
  uint64_t v38 = v36(v37, v35);
  uint64_t v39 = swift_getAssociatedConformanceWitness();
  uint64_t v40 = v106;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 136))(v38, 0, v10, v39);
  if (v40)
  {
    (*(void (**)(char *, uint64_t))(v99 + 8))(v105, v10);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      unint64_t v43 = (uint8_t *)swift_slowAlloc();
      unint64_t v44 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v43 = 138412290;
      swift_errorRetain();
      uint64_t v45 = _swift_stdlib_bridgeErrorToNSError();
      v109[0] = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v44 = v45;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Failed to notify AWDL disabled to infrastructure: %@", v43, 0xCu);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();

      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v99 + 8))(v105, v10);
  }
  uint64_t v56 = ChannelSequence.none.unsafeMutableAddressor();
  uint64_t v57 = *(void *)(*v2 + 472);
  uint64_t v58 = *(void *)((char *)v2 + v57);
  *(void *)((char *)v2 + v57) = *v56;
  swift_bridgeObjectRetain();
  sub_100377F30(v58);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  type metadata accessor for WiFiInterface.NeighborDiscoveryTable();
  WiFiInterface.NeighborDiscoveryTable.clearAllPeerPresence()();
  if (v59)
  {
    swift_endAccess();
    goto LABEL_17;
  }
  swift_endAccess();
  uint64_t v78 = *(void *)((char *)v2 + *(void *)(*v2 + 592));
  if (!v78)
  {
LABEL_37:
    swift_retain_n();
    int v88 = Logger.logObject.getter();
    os_log_type_t v89 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v88, v89))
    {
      uint64_t v90 = swift_slowAlloc();
      v110[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v90 = 136315650;
      uint64_t v91 = WiFiInterface.description.getter();
      uint64_t v108 = sub_100010680(v91, v92, v110);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v90 + 12) = 2080;
      int v93 = *((unsigned __int8 *)v2 + v102);
      swift_release();
      if (v93) {
        uint64_t v94 = 0x64656C62616E65;
      }
      else {
        uint64_t v94 = 0x64656C6261736964;
      }
      if (v93) {
        unint64_t v95 = 0xE700000000000000;
      }
      else {
        unint64_t v95 = 0xE800000000000000;
      }
      uint64_t v108 = sub_100010680(v94, v95, v110);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v90 + 22) = 2080;
      uint64_t v108 = v103;
      sub_1000E4CC4();
      uint64_t v96 = FixedWidthInteger.retryText.getter((uint64_t)&type metadata for Int);
      uint64_t v108 = sub_100010680(v96, v97, v110);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v88, v89, "%s %s AWDL after %s", (uint8_t *)v90, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    return;
  }
  uint64_t v79 = *(uint64_t (**)(uint64_t *))(*(void *)v78 + 392);
  swift_retain();
  uint64_t v80 = (void (*)(uint64_t *, uint64_t))v79(v109);
  WiFiInterface.NeighborDiscoveryTable.clearAllPeerPresence()();
  if (!v81)
  {
    v80(v109, 0);
    swift_release();
    goto LABEL_37;
  }
  v80(v109, 1);
  swift_release();
LABEL_17:
  uint64_t v60 = v103;
  if (v103 > 2)
  {
    swift_retain_n();
    uint64_t v70 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v70, v71))
    {
      uint64_t v72 = v60;
      uint64_t v73 = swift_slowAlloc();
      v109[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v73 = 136315394;
      uint64_t v74 = NANState.actionDescription.getter();
      v110[0] = sub_100010680(v74, v75, v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v73 + 12) = 2080;
      v110[0] = v72;
      sub_1000E4CC4();
      uint64_t v76 = FixedWidthInteger.retryText.getter((uint64_t)&type metadata for Int);
      v110[0] = sub_100010680(v76, v77, v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "Giving up attempt to %s AWDL after %s", (uint8_t *)v73, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_release_n();
    }
  }
  else
  {
    uint64_t v61 = v103 + 1;
    swift_retain();
    swift_errorRetain();
    swift_retain();
    swift_errorRetain();
    uint64_t v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v62, v63))
    {
      uint64_t v64 = swift_slowAlloc();
      uint64_t v65 = (void *)swift_slowAlloc();
      uint64_t v107 = swift_slowAlloc();
      v109[0] = v107;
      *(_DWORD *)uint64_t v64 = 136315650;
      int v66 = *((unsigned __int8 *)v2 + v102);
      swift_release();
      if (v66) {
        uint64_t v67 = 0x64656C62616E65;
      }
      else {
        uint64_t v67 = 0x64656C6261736964;
      }
      if (v66) {
        unint64_t v68 = 0xE700000000000000;
      }
      else {
        unint64_t v68 = 0xE800000000000000;
      }
      v110[0] = sub_100010680(v67, v68, v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v64 + 12) = 2112;
      swift_errorRetain();
      uint64_t v69 = _swift_stdlib_bridgeErrorToNSError();
      v110[0] = v69;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v65 = v69;
      uint64_t v61 = v60 + 1;
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v64 + 22) = 2048;
      v110[0] = v60 + 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "AWDL failed to be %s because: %@. Attempting retry #%ld", (uint8_t *)v64, 0x20u);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v82 = v98[0];
    type metadata accessor for P2PTimer();
    uint64_t v84 = (uint64_t)v100;
    uint64_t v83 = v101;
    *unint64_t v100 = v61;
    (*(void (**)(uint64_t, void, uint64_t))(v83 + 104))(v84, enum case for DispatchTimeInterval.seconds(_:), v82);
    uint64_t v85 = (void *)*OS_dispatch_queue.awdl.unsafeMutableAddressor();
    uint64_t v86 = swift_allocObject();
    *(void *)(v86 + 16) = v2;
    *(void *)(v86 + 24) = v61;
    swift_retain();
    id v87 = v85;
    static P2PTimer.async(after:on:execute:)(v84, v87, (uint64_t)sub_1003A02A8, v86);

    swift_release();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v84, v82);
  }
}

uint64_t sub_10037B838(char a1)
{
  char v2 = a1 & 1;
  uint64_t v3 = *(void *)(*(void *)v1 + 680);
  char v4 = *(unsigned char *)(v1 + v3);
  sub_100379A98(a1 & 1);
  *(unsigned char *)(v1 + v3) = v2;

  return sub_10037A3D8(v4);
}

void *sub_10037B898()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100010BCC((uint64_t *)&unk_100487D30);
  __chkstk_darwin();
  char v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v2 + 712);
  if (*(void *)((char *)v0 + v5))
  {
    uint64_t v6 = *(void **)((char *)v0 + v5);
  }
  else
  {
    type metadata accessor for LocaleManager();
    swift_unownedRetainStrong();
    sub_1003373CC((uint64_t)v4);
    swift_retain();
    swift_release();
    id v7 = (id)*OS_dispatch_queue.awdl.unsafeMutableAddressor();
    uint64_t v6 = sub_10036D5A8((uint64_t)v0, (uint64_t)v4, v7);
    swift_release();

    *(void *)((char *)v1 + v5) = v6;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v6;
}

char *sub_10037B9F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4 = v3;
  uint64_t v115 = a1;
  uint64_t v116 = a3;
  uint64_t v112 = a2;
  uint64_t v5 = (void *)*v3;
  uint64_t v97 = sub_100010BCC((uint64_t *)&unk_100488350);
  __chkstk_darwin();
  uint64_t v98 = (uint64_t)v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = v5[52];
  uint64_t v8 = *(void *)(v7 + 8);
  uint64_t v9 = v5[51];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v107 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v108 = (char *)v96 - v11;
  uint64_t v102 = v8;
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v110 = v12;
  uint64_t v111 = v13;
  __chkstk_darwin();
  uint64_t v106 = (char *)v96 - v14;
  uint64_t v103 = AssociatedTypeWitness;
  uint64_t v117 = type metadata accessor for Optional();
  uint64_t v113 = *(void *)(v117 - 8);
  __chkstk_darwin();
  unint64_t v105 = (char *)v96 - v15;
  uint64_t v119 = type metadata accessor for Logger();
  uint64_t v118 = *(void *)(v119 - 8);
  __chkstk_darwin();
  uint64_t v101 = (char *)v96 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v104 = (char *)v96 - v17;
  uint64_t v100 = v18;
  __chkstk_darwin();
  id v120 = (char *)v96 - v19;
  *(void *)((char *)v4 + v5[53]) = &_swiftEmptyDictionarySingleton;
  *(void *)((char *)v4 + *(void *)(*v4 + 432)) = 0;
  *(void *)((char *)v4 + *(void *)(*v4 + 440)) = 0;
  uint64_t v20 = (void *)((char *)v4 + *(void *)(*v4 + 448));
  void *v20 = &_swiftEmptySetSingleton;
  v20[1] = 0;
  uint64_t v21 = *(void *)(*v4 + 456);
  uint64_t v114 = v7;
  type metadata accessor for AWDLInterface.StateMonitoringClient();
  swift_retain();
  *(void *)((char *)v4 + v21) = Dictionary.init()();
  *((unsigned char *)v4 + *(void *)(*v4 + 464)) = 0;
  uint64_t v22 = *(void *)(*v4 + 472);
  *(void *)((char *)v4 + v22) = *ChannelSequence.none.unsafeMutableAddressor();
  *(void *)((char *)v4 + *(void *)(*v4 + 480)) = 0;
  *((unsigned char *)v4 + *(void *)(*v4 + 488)) = 1;
  *(void *)((char *)v4 + *(void *)(*v4 + 496)) = 0;
  *((unsigned char *)v4 + *(void *)(*v4 + 504)) = 2;
  uint64_t v23 = (char *)v4 + *(void *)(*v4 + 512);
  uint64_t v24 = type metadata accessor for DispatchTime();
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56);
  v25(v23, 1, 1, v24);
  *(void *)((char *)v4 + *(void *)(*v4 + 520)) = &_swiftEmptySetSingleton;
  *(void *)((char *)v4 + *(void *)(*v4 + 528)) = &_swiftEmptySetSingleton;
  uint64_t v26 = *(void *)(*v4 + 536);
  sub_10006F314(0, (unint64_t *)&unk_100484A40);
  type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation();
  sub_100296BC4();
  swift_bridgeObjectRetain();
  *(void *)((char *)v4 + v26) = Dictionary.init()();
  *(void *)((char *)v4 + *(void *)(*v4 + 544)) = _swiftEmptyArrayStorage;
  uint64_t v27 = *(void *)(*v4 + 552);
  *(void *)((char *)v4 + v27) = Dictionary.init()();
  uint64_t v28 = *(void *)(*v4 + 560);
  *(void *)((char *)v4 + v28) = Dictionary.init()();
  DispatchTime.init(uptimeNanoseconds:)();
  uint64_t v29 = *(void *)(*v4 + 576);
  *(void *)((char *)v4 + v29) = Dictionary.init()();
  uint64_t v30 = *(void *)(*v4 + 584);
  type metadata accessor for AWDLTrafficRegistrationService(0);
  uint64_t v109 = v9;
  uint64_t v31 = v116;
  type metadata accessor for AWDLInterface.TrafficRegistrationServiceAvailabilityMonitor();
  sub_1003A98A8(&qword_10047C870, type metadata accessor for AWDLTrafficRegistrationService);
  *(void *)((char *)v4 + v30) = Dictionary.init()();
  *(void *)((char *)v4 + *(void *)(*v4 + 592)) = 0;
  type metadata accessor for P2PTimer();
  variable initialization expression of AWDLPeer.lastUpdated();
  v25((char *)v4 + *(void *)(*v4 + 608), 1, 1, v24);
  v25((char *)v4 + *(void *)(*v4 + 616), 1, 1, v24);
  uint64_t v32 = *(void *)(*v4 + 624);
  id v33 = [objc_allocWithZone((Class)NSDateFormatter) init];
  NSString v34 = String._bridgeToObjectiveC()();
  [v33 setDateFormat:v34];

  *(void *)((char *)v4 + v32) = v33;
  *(void *)((char *)v4 + *(void *)(*v4 + 656)) = 0;
  v25((char *)v4 + *(void *)(*v4 + 664), 1, 1, v24);
  uint64_t v35 = v113;
  *(void *)((char *)v4 + *(void *)(*v4 + 672)) = 0;
  *((unsigned char *)v4 + *(void *)(*v4 + 680)) = 0;
  *(void *)((char *)v4 + *(void *)(*v4 + 688)) = 0;
  uint64_t v36 = *(void *)(*v4 + 696);
  id v37 = objc_allocWithZone((Class)WRM_UCMInterface);
  uint64_t v38 = v110;
  *(void *)((char *)v4 + v36) = [v37 init];
  uint64_t v39 = v112;
  *(void *)((char *)v4 + *(void *)(*v4 + 712)) = 0;
  *(void *)((char *)v4 + *(void *)(*v4 + 720)) = &_swiftEmptySetSingleton;
  *(void *)((char *)v4 + *(void *)(*v4 + 728)) = &_swiftEmptyDictionarySingleton;
  *((unsigned char *)v4 + *(void *)(*v4 + 736)) = 0;
  *(void *)((char *)v4 + *(void *)(*v4 + 744)) = &_swiftEmptyDictionarySingleton;
  *(void *)((char *)v4 + *(void *)(*v4 + 752)) = 0;
  *(void *)((char *)v4 + *(void *)(*v4 + 704)) = v31;
  *((unsigned char *)v4 + *(void *)(*v4 + 632)) = 0;
  *((unsigned char *)v4 + *(void *)(*v4 + 648)) = 0;
  *((unsigned char *)v4 + *(void *)(*v4 + 640)) = 0;
  swift_unownedRetain();
  swift_release();
  uint64_t v40 = v120;
  Logger.init(subsystem:category:)();
  uint64_t v41 = v105;
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v105, v115, v117);
  uint64_t v42 = v111;
  uint64_t v43 = (uint64_t)v106;
  uint64_t v44 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v111 + 16))(v106, v39, v38);
  uint64_t v45 = v118 + 16;
  uint64_t v46 = (uint64_t)v104;
  uint64_t v99 = *(void (**)(char *, char *, uint64_t))(v118 + 16);
  v99(v104, v40, v119);
  uint64_t v47 = WiFiInterface.init(driver:components:logger:)(v41, v43, v46);
  if (!v47)
  {
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v39, v44);
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v115, v117);
    (*(void (**)(char *, uint64_t))(v118 + 8))(v40, v119);
LABEL_11:
    swift_release();
    return 0;
  }
  uint64_t v48 = (char *)v47;
  uint64_t v49 = (char *)(v47 + *(void *)(*(void *)v47 + 96));
  uint64_t v50 = v103;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  os_log_type_t v52 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32);
  swift_retain();
  uint64_t v106 = (char *)AssociatedConformanceWitness;
  v48[*(void *)(*(void *)v48 + 680)] = v52(v50, AssociatedConformanceWitness) & 1;
  uint64_t v104 = v48;
  sub_100375EB4();
  id v53 = (unsigned __int16 *)WiFiAddress.bonjourMulticastAddress.unsafeMutableAddressor();
  uint64_t v54 = *(unsigned int *)(v53 + 1);
  uint64_t v55 = *v53;
  uint64_t v56 = swift_getAssociatedConformanceWitness();
  uint64_t v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 112);
  unint64_t v105 = v49;
  v57(v55 | (v54 << 16), v50, v56);
  v96[1] = v45;
  uint64_t v58 = v107;
  uint64_t v59 = v35;
  uint64_t v60 = v104;
  (*((void (**)(void, void, unint64_t, void, unint64_t, uint64_t))v106 + 16))(0, 0, 0xC000000000000000, 0, 0xF000000000000000, v50);
  uint64_t v61 = v108;
  uint64_t v62 = v109;
  swift_beginAccess();
  type metadata accessor for WiFiInterface.NeighborDiscoveryTable();
  swift_retain();
  WiFiInterface.NeighborDiscoveryTable.clearAllPeerPresence()();
  if (v63)
  {
    swift_endAccess();
    swift_release();
    swift_errorRetain();
    swift_retain();
    swift_errorRetain();
    unint64_t v77 = v120;
    uint64_t v78 = Logger.logObject.getter();
    os_log_type_t v79 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v78, v79))
    {
      uint64_t v80 = swift_slowAlloc();
      uint64_t v81 = (void *)swift_slowAlloc();
      uint64_t v121 = swift_slowAlloc();
      *(_DWORD *)uint64_t v80 = 136315394;
      uint64_t v82 = (uint64_t *)&v60[*(void *)(*(void *)v60 + 104)];
      uint64_t v83 = *v82;
      unint64_t v84 = v82[1];
      swift_bridgeObjectRetain();
      v122[0] = sub_100010680(v83, v84, &v121);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v80 + 12) = 2112;
      swift_errorRetain();
      uint64_t v85 = _swift_stdlib_bridgeErrorToNSError();
      v122[0] = v85;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v81 = v85;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v78, v79, "Unable to create AWDLInterface for %s because initialization error: %@", (uint8_t *)v80, 0x16u);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v112, v110);
      (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v115, v117);
      (*(void (**)(char *, uint64_t))(v118 + 8))(v120, v119);
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      swift_release_n();
      swift_errorRelease();
      (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v112, v110);
      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v115, v117);
      (*(void (**)(char *, uint64_t))(v118 + 8))(v77, v119);
    }
    swift_release();
    goto LABEL_11;
  }
  swift_endAccess();
  swift_release();
  uint64_t v64 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
  uint64_t v65 = v103;
  v64(v61, v105, v103);
  uint64_t v66 = v62;
  uint64_t v67 = swift_allocObject();
  swift_weakInit();
  unint64_t v68 = v101;
  uint64_t v69 = v119;
  v99(v101, v120, v119);
  uint64_t v70 = v118;
  unint64_t v71 = (*(unsigned __int8 *)(v118 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v118 + 80);
  uint64_t v72 = (char *)swift_allocObject();
  uint64_t v73 = v114;
  *((void *)v72 + 2) = v66;
  *((void *)v72 + 3) = v73;
  *((void *)v72 + 4) = v67;
  uint64_t v74 = v108;
  (*(void (**)(char *, char *, uint64_t))(v70 + 32))(&v72[v71], v68, v69);
  unint64_t v75 = v106;
  uint64_t v76 = (void (*)(void (*)(uint64_t), char *, uint64_t, char *))*((void *)v106 + 3);
  swift_retain();
  v76(sub_1003AB28C, v72, v65, v75);
  (*(void (**)(char *, uint64_t))(v107 + 8))(v74, v65);
  swift_release();
  swift_release();
  *(void *)&v60[*(void *)(*(void *)v60 + 592)] = sub_1003809C4();
  swift_release();
  uint64_t v87 = v115;
  uint64_t v88 = v110;
  uint64_t v89 = v114;
  uint64_t v90 = v98;
  sub_100336680(v98);
  uint64_t v91 = (void *)*OS_dispatch_queue.awdl.unsafeMutableAddressor();
  uint64_t v92 = swift_allocObject();
  swift_weakInit();
  int v93 = (void *)swift_allocObject();
  v93[2] = v109;
  v93[3] = v89;
  v93[4] = v92;
  uint64_t v94 = (uint64_t *)&v60[*(void *)(*(void *)v60 + 480)];
  swift_beginAccess();
  id v95 = v91;
  ObservableWiFiProperty.registerForChanges(on:using:valueUpdateHandler:)(v95, v94, (uint64_t)sub_1003AB34C, (uint64_t)v93, v97, (uint64_t)v122);
  swift_endAccess();

  swift_release();
  sub_1000380B4(v90, (uint64_t *)&unk_100488350);
  sub_1003810D8(v122[0]);
  (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v112, v88);
  (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v87, v117);
  (*(void (**)(char *, uint64_t))(v118 + 8))(v120, v119);
  swift_release();
  swift_release();
  return v60;
}

void sub_10037D124(uint64_t a1)
{
  type metadata accessor for DriverEvent(0);
  __chkstk_darwin();
  uint64_t v3 = (char *)v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (void *)((char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = OS_dispatch_queue.awdl.unsafeMutableAddressor();
  uint64_t v9 = (void *)*v8;
  *uint64_t v7 = *v8;
  (*(void (**)(uint64_t *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v5 + 8))(v7, v4);
  if (v9)
  {
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      sub_10037D420(a1);
      swift_release();
    }
    else
    {
      sub_1003AB930(a1, (uint64_t)v3, type metadata accessor for DriverEvent);
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        uint64_t v17 = swift_slowAlloc();
        *(_DWORD *)uint64_t v13 = 136315138;
        uint64_t v14 = DriverEvent.shortDescription.getter();
        v16[1] = sub_100010680(v14, v15, &v17);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1003AB6C0((uint64_t)v3, type metadata accessor for DriverEvent);
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "Failed to dispatch event %s because the AWDLInterface was deallocated before the event was received from the driver", v13, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        sub_1003AB6C0((uint64_t)v3, type metadata accessor for DriverEvent);
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_10037D420(uint64_t a1)
{
  *(void *)&long long v314 = a1;
  uint64_t v307 = 0;
  uint64_t v2 = *v1;
  uint64_t v292 = sub_100010BCC(&qword_100483C10);
  __chkstk_darwin();
  uint64_t v291 = (uint64_t)&v278 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v308 = sub_100010BCC((uint64_t *)&unk_100487CB0);
  __chkstk_darwin();
  uint64_t v309 = (uint64_t)&v278 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v288 = sub_100010BCC((uint64_t *)&unk_100487D20);
  __chkstk_darwin();
  uint64_t v287 = (uint64_t)&v278 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_100487CE0);
  __chkstk_darwin();
  uint64_t v284 = (uint64_t)&v278 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AWDLPeer(0);
  uint64_t v282 = *(void *)(v7 - 8);
  uint64_t v283 = v7;
  __chkstk_darwin();
  uint64_t v280 = (uint64_t)&v278 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v303 = type metadata accessor for DispatchTimeInterval();
  uint64_t v300 = *(void *)(v303 - 8);
  __chkstk_darwin();
  int v295 = (char **)((char *)&v278 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  uint64_t v294 = (char *)&v278 - v10;
  __chkstk_darwin();
  long long v304 = (char **)((char *)&v278 - v11);
  sub_100010BCC(&qword_10047DB90);
  __chkstk_darwin();
  unint64_t v290 = (char *)&v278 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v281 = (uint64_t)&v278 - v13;
  uint64_t v305 = type metadata accessor for DispatchTime();
  uint64_t v301 = *(void *)(v305 - 8);
  uint64_t v14 = *(void *)(v301 + 64);
  __chkstk_darwin();
  uint64_t v293 = (char *)&v278 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  int v302 = (char *)&v278 - v15;
  __chkstk_darwin();
  os_log_type_t v278 = (char *)&v278 - v16;
  type metadata accessor for AWDLStatistics.LowLatencyStatistics(0);
  __chkstk_darwin();
  uint64_t v285 = (uint64_t)&v278 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v306 = *(void *)(v2 + 416);
  uint64_t v18 = *(void (**)(void))(v306 + 8);
  uint64_t v313 = v1;
  uint64_t v19 = *(char **)(v2 + 408);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v298 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v299 = AssociatedTypeWitness;
  __chkstk_darwin();
  uint64_t v297 = (char *)&v278 - v22;
  type metadata accessor for AWDLIdleActivity(0);
  __chkstk_darwin();
  uint64_t v24 = (char *)&v278 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v310 = v18;
  uint64_t v312 = v19;
  uint64_t v311 = swift_getAssociatedTypeWitness();
  uint64_t v289 = *(void *)(v311 - 8);
  __chkstk_darwin();
  char v286 = (char *)&v278 - v25;
  swift_getAssociatedTypeWitness();
  uint64_t v296 = AssociatedConformanceWitness;
  swift_getAssociatedConformanceWitness();
  uint64_t v26 = type metadata accessor for Preferences();
  uint64_t v279 = *(void *)(v26 - 8);
  __chkstk_darwin();
  uint64_t v28 = (char *)&v278 - v27;
  type metadata accessor for AWDLActionFrame.Header(0);
  __chkstk_darwin();
  uint64_t v30 = (unsigned __int16 *)((char *)&v278 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for DriverEvent(0);
  __chkstk_darwin();
  uint64_t v32 = (char *)&v278 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  NSString v34 = (unsigned __int16 *)((char *)&v278 - v33);
  sub_1003AB930(v314, (uint64_t)&v278 - v33, type metadata accessor for DriverEvent);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      type metadata accessor for DriverEvent.AWDL(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v144 = *((void *)v34 + 1);
          uint64_t v145 = *((void *)v34 + 2);
          uint64_t v146 = *((void *)v34 + 3);
          uint64_t v147 = sub_100010BCC(&qword_10047DC40);
          sub_1003AB998((uint64_t)v34 + *(int *)(v147 + 48), (uint64_t)v30, type metadata accessor for AWDLActionFrame.Header);
          if ((v144 & 0xC0000000) == 0x40000000) {
            sub_100381E8C(v144 & 0xFFFFFFFF00FF01FFLL, v145, v146, v30);
          }
          sub_10006DE90(v144);
          sub_1003AB6C0((uint64_t)v30, type metadata accessor for AWDLActionFrame.Header);
          return;
        case 2u:
          long long v148 = *((_OWORD *)v34 + 5);
          long long v322 = *((_OWORD *)v34 + 4);
          long long v323 = v148;
          long long v324 = *((_OWORD *)v34 + 6);
          long long v149 = *((_OWORD *)v34 + 1);
          long long v318 = *(_OWORD *)v34;
          long long v319 = v149;
          long long v150 = *((_OWORD *)v34 + 3);
          long long v320 = *((_OWORD *)v34 + 2);
          long long v321 = v150;
          uint64_t v151 = *(void (**)(void))(v296 + 144);
          swift_checkMetadataState();
          uint64_t v152 = v297;
          v151();
          uint64_t v153 = v299;
          uint64_t v154 = swift_getAssociatedConformanceWitness();
          (*(void (**)(long long *, uint64_t, uint64_t))(v154 + 64))(&v318, v153, v154);
          sub_10013BCE0((uint64_t)&v318);
          (*(void (**)(char *, uint64_t))(v298 + 8))(v152, v153);
          return;
        case 3u:
          uint64_t v155 = v285;
          sub_1003AB998((uint64_t)v34, v285, type metadata accessor for AWDLStatistics.LowLatencyStatistics);
          uint64_t v156 = v313;
          uint64_t v157 = *v313;
          uint64_t v158 = *(void *)((char *)v313 + *(void *)(*v313 + 496));
          *(void *)(v155 + 96) = v158;
          uint64_t v159 = *(void *)(v155 + 104);
          BOOL v160 = __OFSUB__(v159, v158);
          uint64_t v161 = v159 - v158;
          if (v160)
          {
            __break(1u);
            JUMPOUT(0x10038095CLL);
          }
          *(void *)(v155 + 104) = v161;
          uint64_t v162 = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
          uint64_t v163 = v162;
          *(void *)(v155 + *(int *)(v162 + 160)) = v158;
          int v164 = *((unsigned __int8 *)v156 + *(void *)(v157 + 504));
          uint64_t v165 = v305;
          uint64_t v166 = v301;
          if (v164 == 2)
          {
            uint64_t v167 = Logger.logObject.getter();
            os_log_type_t v168 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v167, v168))
            {
              uint64_t v169 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v169 = 0;
              _os_log_impl((void *)&_mh_execute_header, v167, v168, "Cannot set same SSID for low latency statistics, same SSID value is unknown", v169, 2u);
              swift_slowDealloc();
            }
          }
          else
          {
            *(unsigned char *)(v155 + *(int *)(v162 + 148)) = v164 & 1;
          }
          uint64_t v241 = (uint64_t)v156 + *(void *)(*v156 + 512);
          swift_beginAccess();
          uint64_t v242 = v241;
          uint64_t v243 = v281;
          sub_1000136F4(v242, v281, &qword_10047DB90);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v166 + 48))(v243, 1, v165) == 1)
          {
            sub_1000380B4(v243, &qword_10047DB90);
            uint64_t v244 = Logger.logObject.getter();
            os_log_type_t v245 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v244, v245))
            {
              os_log_type_t v246 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)os_log_type_t v246 = 0;
              _os_log_impl((void *)&_mh_execute_header, v244, v245, "Cannot set session duration for low latency statistics, session start time is unknown", v246, 2u);
              swift_slowDealloc();
            }
          }
          else
          {
            unint64_t v247 = *(void (**)(char *, uint64_t, uint64_t))(v166 + 32);
            *(void *)&long long v314 = v163;
            uint64_t v248 = v278;
            v247(v278, v243, v165);
            type metadata accessor for P2PTimer();
            uint64_t v249 = v302;
            variable initialization expression of AWDLPeer.lastUpdated();
            unint64_t v250 = v304;
            DispatchTime.distance(to:)();
            uint64_t v251 = *(void (**)(char *, uint64_t))(v166 + 8);
            v251(v249, v165);
            v251(v248, v165);
            (*(void (**)(uint64_t, void *, uint64_t))(v300 + 40))(v155 + *(int *)(v314 + 80), v250, v303);
          }
          uint64_t v252 = *(void (**)(void))(v296 + 144);
          swift_checkMetadataState();
          id v253 = v297;
          v252();
          uint64_t v254 = v299;
          uint64_t v255 = swift_getAssociatedConformanceWitness();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v255 + 56))(v155, v254, v255);
          (*(void (**)(char *, uint64_t))(v298 + 8))(v253, v254);
          sub_1003AB6C0(v155, type metadata accessor for AWDLStatistics.LowLatencyStatistics);
          return;
        case 4u:
          char v170 = *(unsigned char *)v34;
          char v171 = *((unsigned char *)v34 + 1);
          sub_100010BCC(qword_10047DD00);
          uint64_t inited = swift_initStackObject();
          *(void *)(inited + 32) = 0xD000000000000018;
          *(void *)(inited + 40) = 0x80000001003E1F40;
          *(_OWORD *)(inited + 16) = xmmword_1003B4420;
          *(unsigned char *)(inited + 48) = v170;
          *(void *)(inited + 72) = &type metadata for UInt8;
          *(void *)(inited + 80) = 0xD00000000000001BLL;
          *(void *)(inited + 88) = 0x80000001003E1F60;
          *(void *)(inited + 120) = &type metadata for UInt8;
          *(unsigned char *)(inited + 96) = v171;
          unint64_t v173 = sub_10001FE34(inited);
          *(void *)&long long v318 = sub_1003A9680();
          __chkstk_darwin();
          os_log_type_t v174 = v312;
          uint64_t v175 = (char *)v306;
          *(&v278 - 2) = v312;
          *(&v278 - 1) = v175;
          type metadata accessor for AWDLInterface.StateMonitoringClient();
          type metadata accessor for Dictionary.Values();
          swift_bridgeObjectRetain();
          swift_getWitnessTable();
          *(void *)&long long v318 = Sequence.filter(_:)();
          __chkstk_darwin();
          *(&v278 - 4) = v174;
          *(&v278 - 3) = v175;
          *(&v278 - 2) = (char *)v173;
          type metadata accessor for Array();
          swift_getWitnessTable();
          Sequence.forEach(_:)();
          swift_bridgeObjectRelease();
          goto LABEL_126;
        case 5u:
          char v176 = *(unsigned char *)v34;
          *(void *)&long long v314 = *((unsigned int *)v34 + 1);
          unsigned __int16 v177 = v34[4];
          *(void *)&long long v318 = sub_1003A9680();
          __chkstk_darwin();
          uint64_t v178 = v312;
          uint64_t v179 = (char *)v306;
          *(&v278 - 2) = v312;
          *(&v278 - 1) = v179;
          type metadata accessor for AWDLInterface.StateMonitoringClient();
          type metadata accessor for Dictionary.Values();
          swift_bridgeObjectRetain();
          swift_getWitnessTable();
          *(void *)&long long v318 = Sequence.filter(_:)();
          __chkstk_darwin();
          *(&v278 - 4) = v178;
          *(&v278 - 3) = v179;
          *((unsigned char *)&v278 - 16) = v176;
          *((_WORD *)&v278 - 4) = v177;
          *((_DWORD *)&v278 - 3) = v314;
          type metadata accessor for Array();
          swift_getWitnessTable();
          Sequence.forEach(_:)();
          goto LABEL_126;
        case 6u:
          sub_10006B904((uint64_t)v34, (uint64_t)v325);
          sub_10006B904((uint64_t)v325, (uint64_t)&v318);
          if (v320 != 1
            || (swift_bridgeObjectRetain(),
                swift_bridgeObjectRetain(),
                swift_bridgeObjectRelease(),
                swift_bridgeObjectRelease(),
                WiFiInterface.preferences.getter(),
                char v180 = Preferences.reportSoftErrorsWithTTR.getter(),
                (*(void (**)(char *, uint64_t))(v279 + 8))(v28, v26),
                (v180 & 1) != 0))
          {
            uint64_t v181 = v311;
            uint64_t v182 = swift_getAssociatedConformanceWitness();
            uint64_t v183 = v307;
            (*(void (**)(void *, uint64_t, uint64_t))(v182 + 144))(v325, v181, v182);
            if (v183)
            {
              swift_errorRetain();
              sub_1003AB680((uint64_t)v325, (void (*)(void, void, void, void, void))sub_10006B960);
              swift_errorRetain();
              uint64_t v184 = Logger.logObject.getter();
              os_log_type_t v185 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v184, v185))
              {
                uint64_t v186 = swift_slowAlloc();
                __int16 v187 = (void *)swift_slowAlloc();
                *(void *)&long long v314 = swift_slowAlloc();
                v316[0] = v314;
                *(_DWORD *)uint64_t v186 = 136315394;
                sub_1003AB680((uint64_t)v325, (void (*)(void, void, void, void, void))sub_10006B960);
                unint64_t v188 = AWDLSoftErrorReport.description.getter();
                unint64_t v190 = v189;
                sub_1003AB680((uint64_t)v325, (void (*)(void, void, void, void, void))sub_10006B9A0);
                unint64_t v317 = (void *)sub_100010680(v188, v190, v316);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                sub_1003AB680((uint64_t)v325, (void (*)(void, void, void, void, void))sub_10006B9A0);
                sub_1003AB680((uint64_t)v325, (void (*)(void, void, void, void, void))sub_10006B9A0);
                *(_WORD *)(v186 + 12) = 2112;
                swift_errorRetain();
                uint64_t v191 = (void *)_swift_stdlib_bridgeErrorToNSError();
                unint64_t v317 = v191;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                void *v187 = v191;
                swift_errorRelease();
                swift_errorRelease();
                _os_log_impl((void *)&_mh_execute_header, v184, v185, "Failed while sending a soft error report: %s because: %@", (uint8_t *)v186, 0x16u);
                sub_100010BCC(&qword_10047CC30);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
                swift_errorRelease();
              }
              else
              {
                swift_errorRelease();

                sub_1003AB680((uint64_t)v325, (void (*)(void, void, void, void, void))sub_10006B9A0);
                sub_1003AB680((uint64_t)v325, (void (*)(void, void, void, void, void))sub_10006B9A0);
                swift_errorRelease();
                swift_errorRelease();
              }
            }
            else
            {
              sub_1003AB680((uint64_t)v325, (void (*)(void, void, void, void, void))sub_10006B960);
              uint64_t v272 = Logger.logObject.getter();
              os_log_type_t v273 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v272, v273))
              {
                uint64_t v274 = (uint8_t *)swift_slowAlloc();
                v316[0] = swift_slowAlloc();
                *(_DWORD *)uint64_t v274 = 136315138;
                sub_1003AB680((uint64_t)v325, (void (*)(void, void, void, void, void))sub_10006B960);
                unint64_t v275 = AWDLSoftErrorReport.description.getter();
                unint64_t v277 = v276;
                sub_1003AB680((uint64_t)v325, (void (*)(void, void, void, void, void))sub_10006B9A0);
                unint64_t v317 = (void *)sub_100010680(v275, v277, v316);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                sub_1003AB680((uint64_t)v325, (void (*)(void, void, void, void, void))sub_10006B9A0);
                sub_1003AB680((uint64_t)v325, (void (*)(void, void, void, void, void))sub_10006B9A0);
                _os_log_impl((void *)&_mh_execute_header, v272, v273, "Successfully reported soft error: %s", v274, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {

                sub_1003AB680((uint64_t)v325, (void (*)(void, void, void, void, void))sub_10006B9A0);
                sub_1003AB680((uint64_t)v325, (void (*)(void, void, void, void, void))sub_10006B9A0);
              }
            }
            return;
          }
          sub_1003AB680((uint64_t)v325, (void (*)(void, void, void, void, void))sub_10006B9A0);
          int v93 = Logger.logObject.getter();
          LOBYTE(v236) = static os_log_type_t.info.getter();
          if (!os_log_type_enabled(v93, (os_log_type_t)v236)) {
            goto LABEL_123;
          }
          uint64_t v237 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v237 = 0;
          uint64_t v238 = "Tap to radar disabled, skipping reporting";
          break;
        case 7u:
          uint64_t v192 = *(unsigned int *)(v34 + 1);
          uint64_t v193 = *v34;
          swift_beginAccess();
          uint64_t v194 = v193 | (v192 << 16);
          uint64_t v195 = v284;
          sub_100367A5C(v194, v284);
          swift_endAccess();
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v282 + 48))(v195, 1, v283) == 1)
          {
            sub_1000380B4(v195, &qword_100487CE0);
          }
          else
          {
            uint64_t v239 = v195;
            uint64_t v240 = v280;
            sub_1003AB998(v239, v280, type metadata accessor for AWDLPeer);
            sub_10038C950(v240);
            sub_1003AB6C0(v240, type metadata accessor for AWDLPeer);
          }
          return;
        case 8u:
          uint64_t v196 = *(void **)v34;
          uint64_t v197 = *(void (**)(void))(v296 + 144);
          uint64_t v198 = *((unsigned __int8 *)v34 + 8);
          swift_checkMetadataState();
          uint64_t v199 = v297;
          v197();
          uint64_t v200 = v299;
          uint64_t v201 = swift_getAssociatedConformanceWitness();
          (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v201 + 48))(v196, v198, v200, v201);

          (*(void (**)(char *, uint64_t))(v298 + 8))(v199, v200);
          return;
        case 9u:
          sub_1003AB998((uint64_t)v34, (uint64_t)v24, type metadata accessor for AWDLIdleActivity);
          sub_100389C90((uint64_t)v24);
          sub_1003AB6C0((uint64_t)v24, type metadata accessor for AWDLIdleActivity);
          return;
        case 0xAu:
          if (*((unsigned char *)v313 + *(void *)(*v313 + 736))) {
            return;
          }
          uint64_t v202 = v311;
          uint64_t v203 = swift_getAssociatedConformanceWitness();
          char v204 = (*(uint64_t (**)(uint64_t, uint64_t))(v203 + 32))(v202, v203);
          sub_10037B838(v204 & 1);
          uint64_t v205 = sub_100376F44(0);
          if (!v205) {
            return;
          }
          uint64_t v206 = (char *)v205;
          *(void *)&long long v318 = sub_1003A9680();
          __chkstk_darwin();
          uint64_t v207 = v312;
          uint64_t v208 = (char *)v306;
          *(&v278 - 2) = v312;
          *(&v278 - 1) = v208;
          type metadata accessor for AWDLInterface.StateMonitoringClient();
          type metadata accessor for Dictionary.Values();
          swift_bridgeObjectRetain();
          swift_getWitnessTable();
          *(void *)&long long v318 = Sequence.filter(_:)();
          __chkstk_darwin();
          *(&v278 - 4) = v207;
          *(&v278 - 3) = v208;
          *(&v278 - 2) = v206;
          type metadata accessor for Array();
          swift_getWitnessTable();
          Sequence.forEach(_:)();

LABEL_126:
          swift_bridgeObjectRelease();
          return;
        case 0xBu:
          uint64_t v209 = v311;
          uint64_t v210 = swift_getAssociatedConformanceWitness();
          uint64_t v211 = (*(uint64_t (**)(uint64_t, uint64_t))(v210 + 56))(v209, v210);
          sub_100378240(v211);
          return;
        case 0xCu:
          *(void *)&long long v318 = sub_1003A9680();
          __chkstk_darwin();
          unint64_t v212 = v312;
          uint64_t v213 = (char *)v306;
          *(&v278 - 2) = v312;
          *(&v278 - 1) = v213;
          type metadata accessor for AWDLInterface.StateMonitoringClient();
          type metadata accessor for Dictionary.Values();
          swift_bridgeObjectRetain();
          swift_getWitnessTable();
          *(void *)&long long v318 = Sequence.filter(_:)();
          __chkstk_darwin();
          *(&v278 - 2) = v212;
          *(&v278 - 1) = v213;
          type metadata accessor for Array();
          swift_getWitnessTable();
          Sequence.forEach(_:)();
          goto LABEL_126;
        case 0xDu:
          uint64_t v214 = (uint64_t)v313;
          uint64_t v215 = (void *)((char *)v313 + *(void *)(*v313 + 720));
          swift_beginAccess();
          uint64_t v216 = *v215;
          swift_bridgeObjectRetain();
          uint64_t v217 = v307;
          sub_100370F74((void (*)(void *))sub_1003AB664, v214, v216);
          swift_bridgeObjectRelease();
          unint64_t v317 = _swiftEmptyArrayStorage;
          uint64_t v218 = (void *)(v214 + *(void *)(*(void *)v214 + 728));
          swift_beginAccess();
          uint64_t v219 = swift_bridgeObjectRetain();
          unint64_t v220 = sub_1003A9240(v219, &v317);
          swift_bridgeObjectRelease();
          *uint64_t v218 = v220;
          swift_bridgeObjectRelease();
          char v221 = v317;
          if (v317[2])
          {
            unint64_t v222 = v286;
            uint64_t v223 = v311;
            (*(void (**)(char *, uint64_t, uint64_t))(v289 + 16))(v286, v214 + *(void *)(*(void *)v214 + 96), v311);
            *(void *)&long long v318 = 0;
            *((void *)&v318 + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(55);
            v224._uint64_t countAndFlagsBits = 0xD000000000000035;
            v224._object = (void *)0x80000001003E1F80;
            String.append(_:)(v224);
            int64_t v225 = v221[2];
            os_log_type_t v226 = _swiftEmptyArrayStorage;
            if (v225)
            {
              *(void *)&long long v314 = v217;
              uint64_t v315 = _swiftEmptyArrayStorage;
              swift_bridgeObjectRetain();
              sub_10008345C(0, v225, 0);
              os_log_type_t v226 = v315;
              uint64_t v227 = (char *)v221 + 49;
              do
              {
                uint64_t v228 = *(void *)(v227 - 17);
                uint64_t v229 = *(void *)(v227 - 9);
                char v230 = *(v227 - 1);
                swift_bridgeObjectRetain();
                DNSRecords.Identifier.description.getter(v228, v229, v230);
                uint64_t v232 = v231;
                swift_bridgeObjectRelease();
                uint64_t v315 = v226;
                unint64_t v234 = v226[2];
                unint64_t v233 = v226[3];
                if (v234 >= v233 >> 1)
                {
                  sub_10008345C(v233 > 1, v234 + 1, 1);
                  os_log_type_t v226 = v315;
                }
                v227 += 24;
                v226[2] = v234 + 1;
                uint64_t v235 = &v226[2 * v234];
                v235[4] = v228;
                v235[5] = v232;
                --v225;
              }
              while (v225);
              swift_bridgeObjectRelease();
              uint64_t v223 = v311;
              unint64_t v222 = v286;
              uint64_t v217 = v314;
            }
            uint64_t v315 = v226;
            sub_100010BCC((uint64_t *)&unk_100488360);
            sub_10000F9CC(&qword_100487D40, (uint64_t *)&unk_100488360);
            uint64_t v261 = BidirectionalCollection<>.joined(separator:)();
            uint64_t v263 = v262;
            swift_bridgeObjectRelease();
            v264._uint64_t countAndFlagsBits = v261;
            v264._object = v263;
            String.append(_:)(v264);
            swift_bridgeObjectRelease();
            uint64_t v265 = swift_getAssociatedConformanceWitness();
            long long v319 = 0uLL;
            LOBYTE(v320) = 0;
            (*(void (**)(long long *, uint64_t, uint64_t))(v265 + 144))(&v318, v223, v265);
            if (v217)
            {
              swift_bridgeObjectRelease();
              swift_errorRelease();
              (*(void (**)(char *, uint64_t))(v289 + 8))(v222, v223);
            }
            else
            {
              (*(void (**)(char *, uint64_t))(v289 + 8))(v222, v223);
              swift_bridgeObjectRelease();
            }
          }
          goto LABEL_126;
        default:
          int v35 = *(unsigned __int8 *)v34;
          uint64_t v36 = v313;
          id v37 = Logger.logObject.getter();
          os_log_type_t v38 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v37, v38))
          {
            uint64_t v39 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)uint64_t v39 = 67109120;
            LODWORD(v318) = v35;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v37, v38, "Realtime mode updated %{BOOL}d", v39, 8u);
            swift_slowDealloc();
          }

          uint64_t v40 = *(void *)(*v36 + 464);
          uint64_t v41 = *((unsigned __int8 *)v36 + v40);
          *((unsigned char *)v36 + v40) = v35;
          sub_100377D50(v41);
          return;
      }
LABEL_122:
      _os_log_impl((void *)&_mh_execute_header, v93, (os_log_type_t)v236, v238, v237, 2u);
      swift_slowDealloc();
LABEL_123:

      break;
    case 2u:
      sub_1000135D4(*(void *)v34, *((void *)v34 + 1), *((void *)v34 + 2), *((void *)v34 + 3), *((void *)v34 + 4), *((unsigned char *)v34 + 40), *((unsigned char *)v34 + 41));
      break;
    case 3u:
      if (*(unsigned char *)v34)
      {
        *((unsigned char *)v313 + *(void *)(*v313 + 488)) = 1;
        swift_unownedRetainStrong();
        char v42 = sub_100336530();
        swift_release();
        WiFiInterface.linkState.setter(v42 & 1);
      }
      else
      {
        unint64_t v75 = v313;
        sub_100375308();
        sub_10030A9EC();
        swift_release();
        *((unsigned char *)v75 + *(void *)(*v75 + 488)) = 0;
        WiFiInterface.linkState.setter(0);
      }
      break;
    case 4u:
      uint64_t v43 = (uint64_t)v313;
      switch(*(unsigned char *)v34)
      {
        case 1:
          uint64_t v92 = *(void *)((char *)v313 + *(void *)(*v313 + 656));
          int v93 = Logger.logObject.getter();
          if (v92)
          {
            os_log_type_t v94 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v93, v94))
            {
              id v95 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)id v95 = 0;
              _os_log_impl((void *)&_mh_execute_header, v93, v94, "Watchdog reset completed", v95, 2u);
              swift_slowDealloc();
            }

            type metadata accessor for P2PTimer();
            uint64_t v96 = (uint64_t)v290;
            variable initialization expression of AWDLPeer.lastUpdated();
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v301 + 56))(v96, 0, 1, v305);
            uint64_t v97 = v43 + *(void *)(*(void *)v43 + 664);
            swift_beginAccess();
            sub_10006D1A4(v96, v97, &qword_10047DB90);
            swift_endAccess();
            uint64_t v98 = *(void *)(*(void *)v43 + 656);
            goto LABEL_43;
          }
          uint64_t v236 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v93, (os_log_type_t)v236)) {
            goto LABEL_123;
          }
          uint64_t v237 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v237 = 0;
          uint64_t v238 = "Watchdog reset completed without a watchdog being in progress";
          goto LABEL_122;
        case 2:
          uint64_t v99 = Logger.logObject.getter();
          os_log_type_t v100 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v99, v100))
          {
            uint64_t v101 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v101 = 0;
            _os_log_impl((void *)&_mh_execute_header, v99, v100, "Driver interface was removed", v101, 2u);
            swift_slowDealloc();
          }

          *(unsigned char *)(v43 + *(void *)(*(void *)v43 + 632)) = 1;
          *(unsigned char *)(v43 + *(void *)(*(void *)v43 + 648)) = 0;
          *(unsigned char *)(v43 + *(void *)(*(void *)v43 + 640)) = 0;
          return;
        case 3:
          uint64_t v102 = v32;
          uint64_t v103 = Logger.logObject.getter();
          os_log_type_t v104 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v103, v104))
          {
            unint64_t v105 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)unint64_t v105 = 0;
            _os_log_impl((void *)&_mh_execute_header, v103, v104, "Driver interface was re-created", v105, 2u);
            swift_slowDealloc();
          }

          *(unsigned char *)(v43 + *(void *)(*(void *)v43 + 640)) = 1;
          if (*(unsigned char *)(v43 + *(void *)(*(void *)v43 + 632)) == 1
            && *(unsigned char *)(v43 + *(void *)(*(void *)v43 + 648)) == 1)
          {
            *uint64_t v102 = 5;
            swift_storeEnumTagMultiPayload();
            sub_10037D420(v102);
            sub_1003AB6C0((uint64_t)v102, type metadata accessor for DriverEvent);
          }
          else
          {
            uint64_t v311 = type metadata accessor for P2PTimer();
            uint64_t v116 = v302;
            variable initialization expression of AWDLPeer.lastUpdated();
            *long long v304 = 700;
            uint64_t v310 = *(void (**)(void))(v300 + 104);
            v310();
            *(void *)&long long v314 = *OS_dispatch_queue.nan.unsafeMutableAddressor();
            uint64_t v117 = swift_allocObject();
            uint64_t v309 = v117;
            swift_weakInit();
            uint64_t v118 = v301;
            uint64_t v119 = v293;
            uint64_t v120 = v305;
            (*(void (**)(char *, char *, uint64_t))(v301 + 16))(v293, v116, v305);
            unint64_t v121 = (*(unsigned __int8 *)(v118 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v118 + 80);
            uint64_t v122 = (char *)swift_allocObject();
            uint64_t v123 = v306;
            *((void *)v122 + 2) = v312;
            *((void *)v122 + 3) = v123;
            *((void *)v122 + 4) = v117;
            (*(void (**)(char *, char *, uint64_t))(v118 + 32))(&v122[v121], v119, v120);
            uint64_t v124 = (uint64_t)v294;
            uint64_t v125 = v303;
            id v126 = v310;
            ((void (*)(char *, void, uint64_t))v310)(v294, enum case for DispatchTimeInterval.never(_:), v303);
            uint64_t v127 = (uint64_t)v295;
            *int v295 = 100;
            ((void (*)(uint64_t, void, uint64_t))v126)(v127, enum case for DispatchTimeInterval.milliseconds(_:), v125);
            swift_allocObject();
            id v128 = (id)v314;
            swift_retain();
            uint64_t v60 = P2PTimer.init(deadlineAfter:on:repeating:leeway:_:)((uint64_t)v304, v128, v124, v127, (uint64_t)sub_1003AB38C, (uint64_t)v122);
            (*(void (**)(char *, uint64_t))(v118 + 8))(v302, v305);
            swift_release();
            uint64_t v61 = *(void *)(*(void *)v43 + 672);
LABEL_49:
            *(void *)(v43 + v61) = v60;
            swift_release();
          }
          break;
        case 4:
          uint64_t v106 = v32;
          uint64_t v107 = Logger.logObject.getter();
          os_log_type_t v108 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v107, v108))
          {
            uint64_t v109 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v109 = 0;
            _os_log_impl((void *)&_mh_execute_header, v107, v108, "Driver interface was powered on", v109, 2u);
            swift_slowDealloc();
          }

          *(unsigned char *)(v43 + *(void *)(*(void *)v43 + 648)) = 1;
          uint64_t v110 = *(void *)v43;
          if (*(unsigned char *)(v43 + *(void *)(*(void *)v43 + 632)) == 1
            && *(unsigned char *)(v43 + *(void *)(*(void *)v43 + 640)) == 1)
          {
            *uint64_t v106 = 5;
            swift_storeEnumTagMultiPayload();
            sub_10037D420(v106);
            sub_1003AB6C0((uint64_t)v106, type metadata accessor for DriverEvent);
            uint64_t v110 = *(void *)v43;
          }
          uint64_t v98 = *(void *)(v110 + 672);
LABEL_43:
          *(void *)(v43 + v98) = 0;
          swift_release();
          return;
        case 5:
          uint64_t v111 = (char *)v313 + *(void *)(*v313 + 160);
          uint64_t v112 = Logger.logObject.getter();
          os_log_type_t v113 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v112, v113))
          {
            uint64_t v114 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v114 = 0;
            _os_log_impl((void *)&_mh_execute_header, v112, v113, "Driver interface was ready", v114, 2u);
            swift_slowDealloc();
          }

          *(unsigned char *)(v43 + *(void *)(*(void *)v43 + 632)) = 0;
          *(void *)(v43 + *(void *)(*(void *)v43 + 672)) = 0;
          swift_release();
          char v115 = WiFiInterface.linkState.getter() & 1;
          if (v115)
          {
            uint64_t v129 = v287;
            WiFiInterface.$linkState.getter(v287);
            MutableDriverProperty.restore()();
            sub_1000380B4(v129, (uint64_t *)&unk_100487D20);
          }
          else
          {
            WiFiInterface.linkState.setter(1);
          }
          uint64_t v130 = v309;
          WiFiInterface.$macAddress.getter(v309);
          MutableDriverProperty.restore()();
          sub_1000380B4(v130, (uint64_t *)&unk_100487CB0);
          uint64_t v131 = v291;
          WiFiInterface.$ipv6Addresses.getter(v291);
          MutableDriverProperty.restore()();
          sub_1000380B4(v131, &qword_100483C10);
          WiFiInterface.linkState.setter(v115);
          uint64_t v132 = *(void *)(*(void *)v43 + 592);
          uint64_t v133 = *(void *)(v43 + v132);
          if (v133)
          {
            uint64_t v134 = (uint64_t *)(v133 + *(void *)(*(void *)v133 + 104));
            uint64_t v136 = *v134;
            unint64_t v135 = v134[1];
            *(void *)(v43 + v132) = 0;
            swift_bridgeObjectRetain();
            swift_release();
            uint64_t v137 = v307;
            sub_1003809C4();
            if (v137)
            {
              swift_errorRetain();
              swift_bridgeObjectRetain();
              swift_errorRetain();
              uint64_t v138 = Logger.logObject.getter();
              os_log_type_t v139 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v138, v139))
              {
                uint64_t v140 = swift_slowAlloc();
                uint64_t v141 = swift_slowAlloc();
                *(void *)&long long v314 = v111;
                unint64_t v142 = (void *)v141;
                *(void *)&long long v318 = swift_slowAlloc();
                *(_DWORD *)uint64_t v140 = 136315394;
                swift_bridgeObjectRetain();
                v325[0] = sub_100010680(v136, v135, (uint64_t *)&v318);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                *(_WORD *)(v140 + 12) = 2112;
                swift_errorRetain();
                uint64_t v143 = _swift_stdlib_bridgeErrorToNSError();
                v325[0] = v143;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                *unint64_t v142 = v143;
                uint64_t v43 = (uint64_t)v313;
                swift_errorRelease();
                swift_errorRelease();
                _os_log_impl((void *)&_mh_execute_header, v138, v139, "Failed to recover the low latency interface %s: %@", (uint8_t *)v140, 0x16u);
                sub_100010BCC(&qword_10047CC30);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
                swift_errorRelease();
              }
              else
              {
                swift_errorRelease();
                swift_bridgeObjectRelease_n();

                swift_errorRelease();
                swift_errorRelease();
              }
              uint64_t v137 = 0;
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_release();
            }
          }
          else
          {
            uint64_t v137 = v307;
          }
          sub_100375308();
          sub_100309378();
          swift_release();
          if (*(unsigned char *)(v43 + *(void *)(*(void *)v43 + 736)) == 1)
          {
            sub_100374888();
            if (v137)
            {
              uint64_t v307 = 0;
              swift_errorRetain();
              swift_errorRetain();
              uint64_t v256 = Logger.logObject.getter();
              os_log_type_t v257 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v256, v257))
              {
                uint64_t v258 = (uint8_t *)swift_slowAlloc();
                long long v259 = (void *)swift_slowAlloc();
                *(_DWORD *)uint64_t v258 = 138412290;
                swift_errorRetain();
                uint64_t v260 = _swift_stdlib_bridgeErrorToNSError();
                *(void *)&long long v318 = v260;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                void *v259 = v260;
                uint64_t v43 = (uint64_t)v313;
                swift_errorRelease();
                swift_errorRelease();
                _os_log_impl((void *)&_mh_execute_header, v256, v257, "Failed to suspend AWDL after interface recovery: %@", v258, 0xCu);
                sub_100010BCC(&qword_10047CC30);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
                swift_errorRelease();
              }
              else
              {
                swift_errorRelease();

                swift_errorRelease();
                swift_errorRelease();
              }
            }
          }
          uint64_t v266 = (uint64_t *)(v43 + *(void *)(*(void *)v43 + 520));
          swift_beginAccess();
          uint64_t v267 = *v266;
          swift_bridgeObjectRetain();
          sub_10037113C((uint64_t (*)(uint64_t *))sub_1003AB358, v43, v267);
          swift_bridgeObjectRelease();
          swift_beginAccess();
          type metadata accessor for WiFiInterface.NeighborDiscoveryTable();
          WiFiInterface.NeighborDiscoveryTable.clearAllPeerPresence()();
          swift_endAccess();
          if (v268)
          {
            BOOL v269 = Logger.logObject.getter();
            os_log_type_t v270 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v269, v270))
            {
              uint64_t v271 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v271 = 0;
              _os_log_impl((void *)&_mh_execute_header, v269, v270, "Failed to clear all previous peer presence after interface recovery", v271, 2u);
              swift_slowDealloc();
            }
            swift_errorRelease();
          }
          else
          {
            sub_10038DC10((uint64_t)sub_10038DBE0, 0);
          }
          sub_10038DD4C();
          return;
        default:
          uint64_t v44 = Logger.logObject.getter();
          os_log_type_t v45 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v44, v45))
          {
            uint64_t v46 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v46 = 0;
            _os_log_impl((void *)&_mh_execute_header, v44, v45, "Watchdog reset in progress", v46, 2u);
            swift_slowDealloc();
          }

          if (*(void *)(v43 + *(void *)(*(void *)v43 + 656))) {
            return;
          }
          uint64_t v311 = type metadata accessor for P2PTimer();
          uint64_t v47 = v302;
          variable initialization expression of AWDLPeer.lastUpdated();
          *long long v304 = 10;
          uint64_t v310 = *(void (**)(void))(v300 + 104);
          v310();
          *(void *)&long long v314 = *OS_dispatch_queue.nan.unsafeMutableAddressor();
          uint64_t v48 = swift_allocObject();
          uint64_t v309 = v48;
          swift_weakInit();
          uint64_t v49 = v301;
          uint64_t v50 = v293;
          uint64_t v51 = v305;
          (*(void (**)(char *, char *, uint64_t))(v301 + 16))(v293, v47, v305);
          unint64_t v52 = (*(unsigned __int8 *)(v49 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
          id v53 = (char *)swift_allocObject();
          uint64_t v54 = v306;
          *((void *)v53 + 2) = v312;
          *((void *)v53 + 3) = v54;
          *((void *)v53 + 4) = v48;
          (*(void (**)(char *, char *, uint64_t))(v49 + 32))(&v53[v52], v50, v51);
          uint64_t v55 = (uint64_t)v294;
          uint64_t v56 = v303;
          uint64_t v57 = v310;
          ((void (*)(char *, void, uint64_t))v310)(v294, enum case for DispatchTimeInterval.never(_:), v303);
          uint64_t v58 = (uint64_t)v295;
          *int v295 = 100;
          ((void (*)(uint64_t, void, uint64_t))v57)(v58, enum case for DispatchTimeInterval.milliseconds(_:), v56);
          swift_allocObject();
          id v59 = (id)v314;
          swift_retain();
          uint64_t v60 = P2PTimer.init(deadlineAfter:on:repeating:leeway:_:)((uint64_t)v304, v59, v55, v58, (uint64_t)sub_1003AB3BC, (uint64_t)v53);
          (*(void (**)(char *, uint64_t))(v49 + 8))(v302, v305);
          swift_release();
          uint64_t v61 = *(void *)(*(void *)v43 + 656);
          goto LABEL_49;
      }
      break;
    case 5u:
      uint64_t v62 = v313;
      uint64_t v63 = v311;
      uint64_t v64 = swift_getAssociatedConformanceWitness();
      uint64_t v65 = (*(uint64_t (**)(uint64_t, uint64_t))(v64 + 64))(v63, v64);
      if ((v65 & 0x1000000000000) != 0) {
        uint64_t v65 = WiFiInterface.macAddress.getter();
      }
      uint64_t v66 = WiFiInterface.macAddress.getter();
      if (static WiFiAddress.!= infix(_:_:)(v65 & 0xFFFFFFFFFFFFLL, v66 & 0xFFFFFFFFFFFFLL))
      {
        swift_retain_n();
        uint64_t v67 = Logger.logObject.getter();
        os_log_type_t v68 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v67, v68))
        {
          uint64_t v69 = swift_slowAlloc();
          *(void *)&long long v318 = swift_slowAlloc();
          *(_DWORD *)uint64_t v69 = 136315394;
          uint64_t v70 = WiFiAddress.description.getter(v65 & 0xFFFFFFFFFFFFLL);
          v325[0] = sub_100010680(v70, v71, (uint64_t *)&v318);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v69 + 12) = 2080;
          uint64_t v72 = WiFiInterface.macAddress.getter();
          swift_release();
          uint64_t v73 = WiFiAddress.description.getter(v72 & 0xFFFFFFFFFFFFLL);
          v325[0] = sub_100010680(v73, v74, (uint64_t *)&v318);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v67, v68, "MAC address changed event with unexpected MAC address %s, expected %s", (uint8_t *)v69, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_release_n();
        }
        uint64_t v76 = v309;
        WiFiInterface.$macAddress.getter(v309);
        uint64_t v77 = v76 + *(int *)(v308 + 40);
        *(_WORD *)uint64_t v77 = v65;
        *(unsigned char *)(v77 + 2) = BYTE2(v65);
        *(unsigned char *)(v77 + 3) = BYTE3(v65);
        *(unsigned char *)(v77 + 4) = BYTE4(v65);
        *(unsigned char *)(v77 + 5) = BYTE5(v65);
        WiFiInterface.$macAddress.setter(v76);
        sub_100010BCC((uint64_t *)&unk_1004882C0);
        uint64_t v78 = swift_allocObject();
        long long v314 = xmmword_1003B2450;
        *(_OWORD *)(v78 + 16) = xmmword_1003B2450;
        uint64_t v79 = WiFiInterface.macAddress.getter();
        *(void *)(v78 + 32) = WiFiAddress.ipv6LinkLocalAddress.getter(v79 & 0xFFFFFFFFFFFFLL);
        *(void *)(v78 + 40) = v80;
        *(void *)(v78 + 48) = v81;
        *(void *)(v78 + 56) = v82;
        WiFiInterface.ipv6Addresses.setter(v78);
        uint64_t v83 = *(void *)(*v62 + 592);
        uint64_t v84 = *(void *)((char *)v62 + v83);
        if (v84)
        {
          swift_retain();
          uint64_t v85 = WiFiInterface.macAddress.getter();
          (*(void (**)(uint64_t))(*(void *)v84 + 240))(v85 & 0xFFFFFFFFFFFFLL);
          swift_release();
          uint64_t v86 = *(void *)((char *)v62 + v83);
          if (v86)
          {
            uint64_t v87 = swift_allocObject();
            *(_OWORD *)(v87 + 16) = v314;
            swift_retain();
            uint64_t v88 = WiFiInterface.macAddress.getter();
            *(void *)(v87 + 32) = WiFiAddress.ipv6LinkLocalAddress.getter(v88 & 0xFFFFFFFFFFFFLL);
            *(void *)(v87 + 40) = v89;
            *(void *)(v87 + 48) = v90;
            *(void *)(v87 + 56) = v91;
            (*(void (**)(uint64_t))(*(void *)v86 + 336))(v87);
            swift_release();
          }
        }
      }
      break;
    default:
      sub_10006E544((uint64_t)v34, (uint64_t)&v318);
      sub_1003080B8((uint64_t)&v318);
      break;
  }
}

char *sub_1003809C4()
{
  uint64_t v2 = v0;
  uint64_t v56 = *(void **)v0;
  uint64_t v3 = v56;
  uint64_t v57 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v54 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void **)(v56[52] + 8);
  uint64_t v8 = v56[51];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v55 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v46 - v10;
  uint64_t v12 = swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  __chkstk_darwin();
  uint64_t v14 = (char *)&v46 - v13;
  uint64_t v15 = v3[74];
  uint64_t v16 = *(char **)&v2[v15];
  if (v16)
  {
    swift_retain_n();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      v58[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136315138;
      uint64_t v20 = WiFiInterface.description.getter();
      v58[5] = sub_100010680(v20, v21, v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Ignoring request to create AWDL companion low latency interface since it is already present: %s", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release();
    }
  }
  else
  {
    unint64_t v52 = v14;
    uint64_t v53 = v8;
    uint64_t v47 = v15;
    uint64_t v48 = v11;
    uint64_t v49 = AssociatedTypeWitness;
    uint64_t v50 = v6;
    uint64_t v51 = v4;
    uint64_t v22 = &v2[v56[20]];
    uint64_t v23 = Logger.logObject.getter();
    uint64_t v24 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v23, (os_log_type_t)v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v24, "Creating companion low latency interface", v25, 2u);
      swift_slowDealloc();
    }

    uint64_t v16 = &v2[*(void *)(*(void *)v2 + 96)];
    uint64_t v26 = (uint64_t *)&v2[*(void *)(*(void *)v2 + 104)];
    uint64_t v28 = *v26;
    uint64_t v27 = v26[1];
    uint64_t v29 = WiFiInterface.macAddress.getter();
    uint64_t v56 = v7;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v31 = v52;
    uint64_t v32 = v57;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(4, v28, v27, v29 & 0xFFFFFFFFFFFFLL, v12, AssociatedConformanceWitness);
    uint64_t v33 = v55;
    if (!v32)
    {
      type metadata accessor for WiFiInterface();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v31, 0, 1, v12);
      int v35 = v22;
      uint64_t v36 = (uint64_t)v48;
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v48, &v2[*(void *)(*(void *)v2 + 112)], v49);
      uint64_t v37 = (uint64_t)v50;
      (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v50, v35, v51);
      uint64_t v38 = WiFiInterface.__allocating_init(driver:components:logger:)(v31, v36, v37);
      uint64_t v39 = v47;
      *(void *)&v2[v47] = v38;
      swift_release();
      uint64_t v16 = *(char **)&v2[v39];
      if (v16)
      {
        swift_retain();
        sub_10037A144();
        uint64_t v40 = (void (*)(uint64_t *, uint64_t))(*(uint64_t (**)(uint64_t *))(*(void *)v16 + 392))(v58);
        type metadata accessor for WiFiInterface.NeighborDiscoveryTable();
        WiFiInterface.NeighborDiscoveryTable.clearAllPeerPresence()();
        if (v41)
        {
          v40(v58, 1);
          swift_release();
        }
        else
        {
          v40(v58, 0);
        }
      }
      else
      {
        char v42 = Logger.logObject.getter();
        os_log_type_t v43 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v42, v43))
        {
          uint64_t v44 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v44 = 0;
          _os_log_impl((void *)&_mh_execute_header, v42, v43, "Failed to create AWDL companion low latency interface", v44, 2u);
          swift_slowDealloc();
        }

        sub_10000F000();
        swift_allocError();
        *(_OWORD *)uint64_t v45 = xmmword_1003B0090;
        *(unsigned char *)(v45 + 16) = 1;
        swift_willThrow();
      }
    }
  }
  return v16;
}

uint64_t sub_100381078(uint64_t a1, char *a2)
{
  char v2 = *a2;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1003810D8(v2);
    return swift_release();
  }
  return result;
}

void sub_1003810D8(char a1)
{
  if (a1)
  {
    if (*(unsigned char *)(v1 + *(void *)(*(void *)v1 + 488)) == 1)
    {
      swift_retain();
      char v2 = Logger.logObject.getter();
      os_log_type_t v3 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v2, v3))
      {
        uint64_t v4 = (uint8_t *)swift_slowAlloc();
        uint64_t v17 = swift_slowAlloc();
        *(_DWORD *)uint64_t v4 = 136315138;
        uint64_t v5 = WiFiInterface.description.getter();
        sub_100010680(v5, v6, &v17);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v2, v3, "WiFi powered on, setting link up on %s", v4, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release();
      }

      WiFiInterface.linkState.setter(1);
      sub_100375EB4();
    }
    else
    {
      osos_log_t log = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(oslog, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, oslog, v12, "WiFi powered on but system sleep active, skipping link up till system wake indication", v13, 2u);
        swift_slowDealloc();
      }
    }
  }
  else
  {
    swift_retain();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315138;
      uint64_t v10 = WiFiInterface.description.getter();
      sub_100010680(v10, v11, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "WiFi powered off, setting link down on %s", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release();
    }

    WiFiInterface.linkState.setter(0);
    uint64_t v14 = *(void *)(*(void *)v1 + 680);
    char v15 = *(unsigned char *)(v1 + v14);
    sub_100379A98(0);
    *(unsigned char *)(v1 + v14) = 0;
    sub_10037A3D8(v15);
  }
}

void sub_100381464()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_1000380B4(v0 + *(void *)(*(void *)v0 + 512), &qword_10047DB90);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 568);
  uint64_t v2 = type metadata accessor for DispatchTime();
  os_log_type_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v3(v0 + *(void *)(*(void *)v0 + 600), v2);
  sub_1000380B4(v0 + *(void *)(*(void *)v0 + 608), &qword_10047DB90);
  sub_1000380B4(v0 + *(void *)(*(void *)v0 + 616), &qword_10047DB90);

  swift_release();
  sub_1000380B4(v0 + *(void *)(*(void *)v0 + 664), &qword_10047DB90);
  swift_release();
  swift_unknownObjectRelease();

  swift_unownedRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(v0 + *(void *)(*(void *)v0 + 752));
}

uint64_t sub_1003818A0()
{
  swift_retain();
  uint64_t v0 = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v0, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 136315138;
    uint64_t v3 = WiFiInterface.description.getter();
    sub_100010680(v3, v4, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v0, v1, "Destroyed %s", v2, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  uint64_t v5 = WiFiInterface.deinit();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_1000380B4(v5 + *(void *)(*(void *)v5 + 512), &qword_10047DB90);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = v5 + *(void *)(*(void *)v5 + 568);
  uint64_t v7 = type metadata accessor for DispatchTime();
  os_log_type_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v8(v5 + *(void *)(*(void *)v5 + 600), v7);
  sub_1000380B4(v5 + *(void *)(*(void *)v5 + 608), &qword_10047DB90);
  sub_1000380B4(v5 + *(void *)(*(void *)v5 + 616), &qword_10047DB90);

  swift_release();
  sub_1000380B4(v5 + *(void *)(*(void *)v5 + 664), &qword_10047DB90);
  swift_release();
  swift_unknownObjectRelease();

  swift_unownedRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v5;
}

uint64_t sub_100381E20()
{
  sub_1003818A0();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AWDLInterface()
{
  return sub_100038354();
}

void sub_100381E8C(uint64_t a1, int a2, uint64_t a3, unsigned __int16 *a4)
{
  uint64_t v5 = v4;
  uint64_t v391 = a3;
  LODWORD(v390) = a2;
  uint64_t v389 = a1;
  uint64_t v7 = (void *)*v4;
  uint64_t v8 = v7[52];
  uint64_t v9 = (void *)v7[51];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v360 = AssociatedTypeWitness;
  uint64_t v363 = swift_getAssociatedTypeWitness();
  uint64_t v362 = *(void *)(v363 - 8);
  __chkstk_darwin();
  unint64_t v359 = (char *)&v331 - v11;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v379 = *(void *)(v12 - 8);
  __chkstk_darwin();
  int v370 = (char *)&v331 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchTimeInterval();
  uint64_t v376 = *(void *)(v14 - 8);
  __chkstk_darwin();
  unint64_t v342 = (char *)&v331 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v344 = (char *)&v331 - v16;
  __chkstk_darwin();
  uint64_t v358 = (char *)&v331 - v17;
  __chkstk_darwin();
  unint64_t v353 = (char *)&v331 - v18;
  sub_100010BCC(&qword_1004862B0);
  __chkstk_darwin();
  uint64_t v364 = (char *)&v331 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v372 = (uint64_t *)((char *)&v331 - v20);
  __chkstk_darwin();
  uint64_t v356 = (char *)&v331 - v21;
  long long v385 = v9;
  uint64_t v380 = v8;
  uint64_t v22 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation();
  uint64_t v378 = type metadata accessor for Optional();
  unint64_t v382 = *(void *)(v378 - 8);
  __chkstk_darwin();
  int v366 = (char *)&v331 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v349 = (char *)&v331 - v24;
  __chkstk_darwin();
  uint64_t v368 = (uint64_t)&v331 - v25;
  __chkstk_darwin();
  int v367 = (char *)&v331 - v26;
  sub_100010BCC(&qword_10047DB90);
  __chkstk_darwin();
  uint64_t v347 = (uint64_t)&v331 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  os_log_type_t v348 = (char *)&v331 - v28;
  __chkstk_darwin();
  unint64_t v355 = (char *)&v331 - v29;
  __chkstk_darwin();
  uint64_t v352 = (uint64_t)&v331 - v30;
  uint64_t v31 = *(void *)(v22 - 8);
  __chkstk_darwin();
  uint64_t v354 = (char *)&v331 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v371 = (void (*)(char *, uint64_t))((char *)&v331 - v33);
  __chkstk_darwin();
  uint64_t v341 = (char *)&v331 - v34;
  __chkstk_darwin();
  unint64_t v346 = (char *)&v331 - v35;
  __chkstk_darwin();
  long long v375 = (char *)&v331 - v36;
  __chkstk_darwin();
  int v373 = (char *)&v331 - v37;
  __chkstk_darwin();
  unint64_t v351 = (char *)&v331 - v38;
  uint64_t v374 = type metadata accessor for DispatchTime();
  uint64_t v369 = *(void *)(v374 - 8);
  __chkstk_darwin();
  uint64_t v343 = (char *)&v331 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v365 = (char *)&v331 - v40;
  __chkstk_darwin();
  uint64_t v350 = (char *)&v331 - v41;
  sub_100010BCC(&qword_10047F2A8);
  __chkstk_darwin();
  uint64_t v357 = (uint64_t)&v331 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v345 = (char *)&v331 - v43;
  __chkstk_darwin();
  long long v381 = (uint64_t *)((char *)&v331 - v44);
  sub_100010BCC((uint64_t *)&unk_1004882F0);
  __chkstk_darwin();
  uint64_t v383 = (char *)&v331 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v47 = (char *)&v331 - v46;
  __chkstk_darwin();
  unint64_t v386 = (char *)&v331 - v48;
  __chkstk_darwin();
  unint64_t v387 = (char *)&v331 - v49;
  __chkstk_darwin();
  uint64_t v388 = (char *)&v331 - v50;
  uint64_t v51 = (int *)type metadata accessor for AWDLPeer(0);
  __chkstk_darwin();
  if (*((unsigned char *)v5 + v7[85]) == 1)
  {
    uint64_t v340 = (uint64_t)&v331 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v333 = v47;
    uint64_t v335 = v12;
    uint64_t v336 = v31;
    uint64_t v334 = v14;
    uint64_t v338 = v22;
    uint64_t v384 = swift_allocBox();
    uint64_t v54 = v53;
    sub_100376468(*a4 | ((unint64_t)*(unsigned int *)(a4 + 1) << 16), v53);
    uint64_t v55 = *(void *)(v54 + v51[20]);
    uint64_t v56 = (unsigned __int16 *)(v54 + v51[11]);
    int v337 = *v56;
    int v339 = *((unsigned __int8 *)v56 + 2);
    unint64_t v57 = v389 & 0xFFFFFFFF00FF01FFLL;
    uint64_t v389 = v55;
    swift_bridgeObjectRetain();
    AWDLPeer.received(actionFrame:with:)(v57, v390, v391, (uint64_t)a4);
    uint64_t v58 = v51[27];
    char v59 = *(unsigned char *)(v54 + v58);
    long long v377 = v51;
    if ((v59 & 1) == 0)
    {
      unint64_t v60 = *(unsigned __int16 *)(v54 + v51[5]) | ((unint64_t)*(unsigned int *)(v54 + v51[5] + 2) << 16);
      unint64_t v61 = WiFiAddress.ipv6LinkLocalAddress.getter(v60);
      uint64_t v63 = v62;
      unint64_t v65 = v64;
      uint64_t v67 = v66;
      swift_beginAccess();
      uint64_t v68 = type metadata accessor for WiFiInterface.NeighborDiscoveryTable();
      WiFiInterface.NeighborDiscoveryTable.postPeerPresence(macAddress:ipv6Address:)(v60, v61, v63, v65, v67, v68);
      swift_endAccess();
      swift_bridgeObjectRelease();
      *(unsigned char *)(v54 + v58) = 1;
      uint64_t v51 = v377;
    }
    uint64_t v69 = (uint64_t)v388;
    swift_beginAccess();
    uint64_t v70 = (unsigned __int16 *)(v54 + v51[5]);
    uint64_t v71 = *(unsigned int *)(v70 + 1);
    uint64_t v72 = *v70;
    uint64_t v73 = v340;
    sub_1003AB930(v54, v340, type metadata accessor for AWDLPeer);
    sub_100385BB0(v73, v72 | (v71 << 16));
    char v400 = 0;
    sub_1000136F4(v54 + v51[14], v69, (uint64_t *)&unk_1004882F0);
    uint64_t v74 = type metadata accessor for AWDLActionFrame.DataPathState(0);
    unint64_t v75 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 48);
    if (v75(v69, 1, v74) == 1)
    {
      sub_1000380B4(v69, (uint64_t *)&unk_1004882F0);
    }
    else
    {
      int v76 = *(unsigned __int8 *)(v69 + 64);
      sub_1003AB6C0(v69, type metadata accessor for AWDLActionFrame.DataPathState);
      if (v76 != 43)
      {
        uint64_t v77 = sub_10006F314(0, (unint64_t *)&unk_100484A40);
        uint64_t v78 = (char *)AWDLTrafficRegistrationConfiguration.init(peerAddress:umiOptions:isActive:)(*(unsigned __int16 *)(v54 + v51[5]) | ((unint64_t)*(unsigned int *)(v54 + v51[5] + 2) << 16), v76, &v400);
        if (v78)
        {
          uint64_t v79 = v78;
          if (v400 == 1)
          {
            uint64_t v388 = (char *)v77;
            uint64_t v391 = 0;
            uint64_t v80 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v376 + 56);
            v80(v381, 1, 1, v334);
            uint64_t v81 = (char *)v5 + *(void *)(*v5 + 576);
            swift_beginAccess();
            uint64_t v82 = *(void *)v81;
            uint64_t v83 = *(void *)(*(void *)v81 + 16);
            uint64_t v84 = v338;
            uint64_t v85 = v336;
            unint64_t v386 = v81;
            unint64_t v332 = v5;
            if (v83)
            {
              swift_bridgeObjectRetain();
              unint64_t v387 = v79;
              unint64_t v86 = sub_10039F8DC((uint64_t)v79);
              if (v87)
              {
                uint64_t v88 = (uint64_t *)v86;
                uint64_t v390 = v54;
                uint64_t v89 = (char *)*(unsigned int *)(v82 + 36);
                swift_bridgeObjectRelease();
                unint64_t v90 = sub_100296BC4();
                swift_bridgeObjectRetain();
                unint64_t v329 = v90;
                uint64_t v91 = v351;
                uint64_t v383 = v89;
                Dictionary.subscript.getter();
                swift_bridgeObjectRelease();

                uint64_t v92 = v352;
                sub_1000136F4((uint64_t)&v91[*(int *)(v84 + 36)], v352, &qword_10047DB90);
                int v93 = *(void (**)(char *, uint64_t))(v85 + 8);
                v93(v91, v84);
                uint64_t v94 = v369;
                uint64_t v95 = v374;
                if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v369 + 48))(v92, 1, v374) == 1)
                {
                  sub_1000380B4(v92, &qword_10047DB90);
                  uint64_t v5 = v332;
                }
                else
                {
                  uint64_t v206 = *(void (**)(void))(v94 + 32);
                  uint64_t v372 = v88;
                  v206();
                  type metadata accessor for P2PTimer();
                  uint64_t v207 = v365;
                  variable initialization expression of AWDLPeer.lastUpdated();
                  uint64_t v371 = v93;
                  uint64_t v208 = (uint64_t)v345;
                  DispatchTime.distance(to:)();
                  int v370 = (char *)v90;
                  long long v375 = *(char **)(v94 + 8);
                  ((void (*)(char *, uint64_t))v375)(v207, v95);
                  uint64_t v209 = (void (*)(void, void))v381;
                  sub_1000380B4((uint64_t)v381, &qword_10047F2A8);
                  v80((uint64_t *)v208, 0, 1, v334);
                  sub_10006EC68(v208, (uint64_t)v209, &qword_10047F2A8);
                  swift_beginAccess();
                  uint64_t v210 = v338;
                  type metadata accessor for Dictionary();
                  uint64_t v211 = v373;
                  Dictionary.remove(at:)();
                  uint64_t v84 = v210;
                  v371(v211, v210);
                  id v212 = v398;
                  swift_endAccess();

                  uint64_t v5 = v332;
                  sub_100378300();
                  ((void (*)(char *, uint64_t))v375)(v350, v374);
                }
                uint64_t v54 = v390;
                uint64_t v85 = v336;
              }
              else
              {
                swift_bridgeObjectRelease();
              }
              uint64_t v79 = v387;
            }
            uint64_t v213 = (char *)v5 + *(void *)(*v5 + 560);
            swift_beginAccess();
            uint64_t v383 = v213;
            id v398 = v79;
            uint64_t v214 = (char *)sub_100296BC4();
            uint64_t v215 = v79;
            uint64_t v216 = v367;
            unint64_t v387 = v214;
            Dictionary.subscript.getter();

            swift_endAccess();
            uint64_t v217 = *(char **)(v85 + 48);
            long long v375 = (char *)(v85 + 48);
            int v373 = v217;
            int v218 = ((uint64_t (*)(char *, uint64_t, uint64_t))v217)(v216, 1, v84);
            unint64_t v219 = v382 + 8;
            unint64_t v220 = *(void (**)(char *, uint64_t))(v382 + 8);
            v220(v216, v378);
            if (v218 == 1)
            {
              uint64_t v372 = (uint64_t *)v220;
              unint64_t v382 = v219;
              uint64_t v390 = v54;
              type metadata accessor for P2PTimer();
              char v221 = v215;
              uint64_t v222 = (uint64_t)v365;
              variable initialization expression of AWDLPeer.lastUpdated();
              uint64_t v223 = (uint64_t)v355;
              uint64_t v371 = *(void (**)(char *, uint64_t))(v369 + 56);
              ((void (*)(char *, uint64_t, uint64_t, uint64_t))v371)(v355, 1, 1, v374);
              uint64_t v224 = (uint64_t)v356;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v379 + 56))(v356, 1, 1, v335);
              uint64_t v225 = v368;
              sub_100387508(v222, v223, v224, v368);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v85 + 56))(v225, 0, 1, v84);
              id v398 = v221;
              swift_beginAccess();
              type metadata accessor for Dictionary();
              Dictionary.subscript.setter();
              swift_endAccess();
              sub_100378300();
              uint64_t p_type = &stru_100479FF0.type;
              id v227 = [v221 uniqueIdentifier];
              uint64_t v228 = v221;
              swift_beginAccess();
              sub_1000FA3C4(&v398, v227);
              swift_endAccess();

              id v229 = [v221 uniqueIdentifier];
              LODWORD(v222) = AWDLTrafficRegistrationService.serviceType.getter();

              uint64_t v230 = v376;
              uint64_t v231 = v358;
              if (v222 == 2)
              {
                swift_beginAccess();
                id v398 = v221;
                uint64_t v232 = v221;
                unint64_t v233 = v349;
                uint64_t v234 = v338;
                Dictionary.subscript.getter();

                if (((unsigned int (*)(char *, uint64_t, uint64_t))v373)(v233, 1, v234))
                {
                  ((void (*)(char *, uint64_t))v372)(v233, v378);
                  swift_endAccess();
                  uint64_t v235 = 1;
                  uint64_t v236 = v374;
                  uint64_t v237 = (uint64_t)v348;
                }
                else
                {
                  uint64_t v237 = (uint64_t)v348;
                  uint64_t v236 = v374;
                  (*(void (**)(char *, char *, uint64_t))(v369 + 16))(v348, v233, v374);
                  ((void (*)(char *, uint64_t))v372)(v233, v378);
                  swift_endAccess();
                  uint64_t v235 = 0;
                }
                ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v371)(v237, v235, 1, v236);
                uint64_t v251 = v332;
                uint64_t v252 = (uint64_t)v332 + *(void *)(*v332 + 512);
                swift_beginAccess();
                sub_10006D1A4(v237, v252, &qword_10047DB90);
                swift_endAccess();
                *(void *)((char *)v251 + *(void *)(*v251 + 496)) = 0;
                *((unsigned char *)v251 + *(void *)(*v251 + 504)) = 2;
                uint64_t v228 = v221;
              }
              uint64_t v253 = v357;
              sub_1000136F4((uint64_t)v381, v357, &qword_10047F2A8);
              uint64_t v254 = v334;
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v230 + 48))(v253, 1, v334) == 1)
              {
                sub_1000380B4(v253, &qword_10047F2A8);
                sub_1003875CC(v228);
                uint64_t v255 = v228;
                uint64_t v256 = v384;
                swift_retain();
                os_log_type_t v257 = Logger.logObject.getter();
                os_log_type_t v258 = static os_log_type_t.default.getter();
                if (os_log_type_enabled(v257, v258))
                {
                  uint64_t v259 = swift_slowAlloc();
                  long long v385 = (void *)swift_slowAlloc();
                  id v399 = v385;
                  *(_DWORD *)uint64_t v259 = 136315394;
                  id v260 = [v255 uniqueIdentifier];
                  uint64_t v261 = v228;
                  uint64_t v262 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  unint64_t v264 = v263;

                  uint64_t v265 = v262;
                  uint64_t v228 = v261;
                  uint64_t p_type = &stru_100479FF0.type;
                  id v398 = (id)sub_100010680(v265, v264, (uint64_t *)&v399);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();

                  uint64_t v256 = v384;
                  swift_bridgeObjectRelease();
                  *(_WORD *)(v259 + 12) = 2080;
                  uint64_t v266 = WiFiAddress.description.getter(*(unsigned __int16 *)(v390 + v377[5]) | ((unint64_t)*(unsigned int *)(v390 + v377[5] + 2) << 16));
                  id v398 = (id)sub_100010680(v266, v267, (uint64_t *)&v399);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_release();
                  swift_bridgeObjectRelease();
                  _os_log_impl((void *)&_mh_execute_header, v257, v258, "Successfully set traffic registration for %s from %s", (uint8_t *)v259, 0x16u);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();
                }
                else
                {
                  swift_release();
                }
              }
              else
              {
                uint64_t v268 = v353;
                (*(void (**)(char *, uint64_t, uint64_t))(v230 + 32))(v353, v253, v254);
                (*(void (**)(char *, char *, uint64_t))(v230 + 16))(v231, v268, v254);
                BOOL v269 = v228;
                uint64_t v256 = v384;
                swift_retain();
                os_log_type_t v270 = Logger.logObject.getter();
                os_log_type_t v271 = static os_log_type_t.default.getter();
                int v272 = v271;
                if (os_log_type_enabled(v270, v271))
                {
                  uint64_t v273 = swift_slowAlloc();
                  long long v385 = (void *)swift_slowAlloc();
                  id v399 = v385;
                  *(_DWORD *)uint64_t v273 = 136315650;
                  LODWORD(v383) = v272;
                  uint64_t v274 = v228;
                  id v275 = [v269 uniqueIdentifier];
                  uint64_t v276 = v230;
                  uint64_t v277 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  unint64_t v279 = v278;

                  id v398 = (id)sub_100010680(v277, v279, (uint64_t *)&v399);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();

                  swift_bridgeObjectRelease();
                  *(_WORD *)(v273 + 12) = 2080;
                  uint64_t v280 = WiFiAddress.description.getter(*(unsigned __int16 *)(v390 + v377[5]) | ((unint64_t)*(unsigned int *)(v390 + v377[5] + 2) << 16));
                  id v398 = (id)sub_100010680(v280, v281, (uint64_t *)&v399);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_release();
                  swift_bridgeObjectRelease();
                  *(_WORD *)(v273 + 22) = 2080;
                  uint64_t v282 = v358;
                  uint64_t v283 = DispatchTimeInterval.description.getter();
                  id v398 = (id)sub_100010680(v283, v284, (uint64_t *)&v399);
                  uint64_t v228 = v274;
                  uint64_t p_type = (char **)(&stru_100479FF0 + 16);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease();
                  uint64_t v285 = *(void (**)(char *, uint64_t))(v276 + 8);
                  char v286 = v282;
                  uint64_t v287 = v334;
                  v285(v286, v334);
                  _os_log_impl((void *)&_mh_execute_header, v270, (os_log_type_t)v383, "Successfully recovered traffic registration for %s from %s (in recovery for %s)", (uint8_t *)v273, 0x20u);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();

                  v285(v353, v287);
                }
                else
                {
                  swift_release();

                  uint64_t v288 = *(void (**)(char *, uint64_t))(v230 + 8);
                  v288(v231, v254);

                  v288(v268, v254);
                }
              }
              id v289 = [v228 p_type[450]];
              int v290 = AWDLTrafficRegistrationService.serviceType.getter();

              if (v290 == 2)
              {
                __chkstk_darwin();
                uint64_t v291 = v332;
                *(&v331 - 4) = (uint64_t)v228;
                *(&v331 - 3) = (uint64_t)v291;
                unint64_t v329 = v256;
                swift_bridgeObjectRetain();
                uint64_t v292 = Dictionary.filter(_:)();
                sub_10037888C(v292);

                sub_1000380B4((uint64_t)v381, &qword_10047F2A8);
              }
              else
              {
                sub_1000380B4((uint64_t)v381, &qword_10047F2A8);
              }
              uint64_t v51 = v377;
              uint64_t v54 = v390;
              goto LABEL_93;
            }
            uint64_t v238 = v215;
            swift_retain();
            uint64_t v239 = Logger.logObject.getter();
            os_log_type_t v240 = static os_log_type_t.info.getter();
            int v241 = v240;
            if (os_log_type_enabled(v239, v240))
            {
              uint64_t v242 = swift_slowAlloc();
              LODWORD(v391) = v241;
              uint64_t v243 = v242;
              id v399 = (id)swift_slowAlloc();
              *(_DWORD *)uint64_t v243 = 136315394;
              uint64_t v244 = v54;
              id v245 = [v238 uniqueIdentifier];
              uint64_t v246 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v248 = v247;

              id v398 = (id)sub_100010680(v246, v248, (uint64_t *)&v399);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              swift_bridgeObjectRelease();
              *(_WORD *)(v243 + 12) = 2080;
              uint64_t v51 = v377;
              uint64_t v249 = WiFiAddress.description.getter(*(unsigned __int16 *)(v244 + v377[5]) | ((unint64_t)*(unsigned int *)(v244 + v377[5] + 2) << 16));
              id v398 = (id)sub_100010680(v249, v250, (uint64_t *)&v399);
              uint64_t v54 = v244;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_release();
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v239, (os_log_type_t)v391, "Received a duplicate traffic registration indication for %s from %s", (uint8_t *)v243, 0x16u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              sub_1000380B4((uint64_t)v381, &qword_10047F2A8);
              goto LABEL_93;
            }

            swift_release();
            sub_1000380B4((uint64_t)v381, &qword_10047F2A8);
          }
          else
          {
            id v399 = v78;
            swift_beginAccess();
            unint64_t v138 = sub_100296BC4();
            uint64_t v139 = v338;
            type metadata accessor for Dictionary();
            uint64_t v140 = v366;
            Dictionary.removeValue(forKey:)();
            swift_endAccess();
            sub_100378300();
            uint64_t v141 = v336;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v336 + 48))(v140, 1, v139) != 1)
            {
              (*(void (**)(char *, char *, uint64_t))(v141 + 32))(v375, v140, v139);
              unint64_t v332 = v5;
              uint64_t v166 = v79;
              uint64_t v167 = Logger.logObject.getter();
              os_log_type_t v168 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v167, v168))
              {
                uint64_t v169 = swift_slowAlloc();
                id aBlock = (id)swift_slowAlloc();
                *(_DWORD *)uint64_t v169 = 136315394;
                uint64_t v170 = v54;
                id v171 = [v166 uniqueIdentifier];
                uint64_t v172 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v174 = v173;

                id v399 = (id)sub_100010680(v172, v174, (uint64_t *)&aBlock);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                swift_bridgeObjectRelease();
                *(_WORD *)(v169 + 12) = 2080;
                id v175 = [v166 peerAddress];
                unint64_t v176 = WiFiMACAddress.wifiAddress.getter();

                uint64_t v177 = WiFiAddress.description.getter(v176 & 0xFFFFFFFFFFFFLL);
                id v399 = (id)sub_100010680(v177, v178, (uint64_t *)&aBlock);
                uint64_t v54 = v170;
                uint64_t v139 = v338;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                uint64_t v179 = v166;
                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v167, v168, "Successfully cleared traffic registration for %s from %s", (uint8_t *)v169, 0x16u);
                swift_arrayDestroy();
                swift_slowDealloc();
                uint64_t v51 = v377;
                swift_slowDealloc();
              }
              else
              {

                uint64_t v179 = v166;
              }

              uint64_t v186 = v389;
              uint64_t v187 = v336;
              uint64_t v188 = v368;
              (*(void (**)(uint64_t, char *, uint64_t))(v336 + 16))(v368, v375, v139);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v187 + 56))(v188, 0, 1, v139);
              sub_1003885BC(v179, v188);

              (*(void (**)(uint64_t, uint64_t))(v382 + 8))(v188, v378);
              (*(void (**)(char *, uint64_t))(v187 + 8))(v375, v139);
              goto LABEL_94;
            }
            unint64_t v387 = v79;
            unint64_t v142 = *(void (**)(char *, uint64_t))(v382 + 8);
            v382 += 8;
            uint64_t v391 = (uint64_t)v142;
            v142(v140, v378);
            uint64_t v143 = (char *)v5 + *(void *)(*v5 + 576);
            swift_beginAccess();
            uint64_t v144 = *(void *)v143;
            if (!*(void *)(*(void *)v143 + 16))
            {

              goto LABEL_93;
            }
            swift_bridgeObjectRetain();
            id v145 = v387;
            unint64_t v146 = sub_10039F8DC((uint64_t)v387);
            if (v147)
            {
              unint64_t v332 = v5;
              long long v148 = (char *)*(unsigned int *)(v144 + 36);
              long long v149 = (char *)v146;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              unint64_t v329 = v138;
              long long v150 = v346;
              uint64_t v388 = v149;
              unint64_t v386 = v148;
              Dictionary.subscript.getter();
              swift_bridgeObjectRelease();

              uint64_t v151 = v347;
              sub_1000136F4((uint64_t)&v150[*(int *)(v139 + 36)], v347, &qword_10047DB90);
              uint64_t v152 = (void *)(v336 + 8);
              uint64_t v153 = *(void (**)(char *, uint64_t))(v336 + 8);
              v153(v150, v139);
              uint64_t v154 = v369;
              uint64_t v155 = v374;
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v369 + 48))(v151, 1, v374) != 1)
              {
                uint64_t v383 = (char *)v153;
                long long v385 = v152;
                uint64_t v390 = v54;
                (*(void (**)(char *, uint64_t, uint64_t))(v154 + 32))(v343, v151, v155);
                type metadata accessor for P2PTimer();
                uint64_t v301 = v365;
                variable initialization expression of AWDLPeer.lastUpdated();
                int v302 = v344;
                DispatchTime.distance(to:)();
                uint64_t v303 = *(uint64_t **)(v154 + 8);
                uint64_t v369 = v154 + 8;
                long long v381 = v303;
                ((void (*)(char *, uint64_t))v303)(v301, v155);
                swift_beginAccess();
                long long v304 = v341;
                Dictionary.remove(at:)();
                id v305 = v398;
                swift_endAccess();

                sub_100378300();
                uint64_t v306 = v376;
                uint64_t v307 = v342;
                (*(void (**)(char *, char *, uint64_t))(v376 + 16))(v342, v302, v334);
                uint64_t v308 = v387;
                uint64_t v309 = Logger.logObject.getter();
                os_log_type_t v310 = static os_log_type_t.default.getter();
                int v311 = v310;
                if (os_log_type_enabled(v309, v310))
                {
                  uint64_t v312 = swift_slowAlloc();
                  uint64_t v388 = (char *)swift_slowAlloc();
                  id v399 = v388;
                  *(_DWORD *)uint64_t v312 = 136315650;
                  LODWORD(v387) = v311;
                  id v313 = [v308 uniqueIdentifier];
                  uint64_t v314 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  unint64_t v316 = v315;

                  id v398 = (id)sub_100010680(v314, v316, (uint64_t *)&v399);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();

                  swift_bridgeObjectRelease();
                  *(_WORD *)(v312 + 12) = 2080;
                  id v317 = [v308 peerAddress];
                  unint64_t v318 = WiFiMACAddress.wifiAddress.getter();

                  uint64_t v319 = WiFiAddress.description.getter(v318 & 0xFFFFFFFFFFFFLL);
                  id v398 = (id)sub_100010680(v319, v320, (uint64_t *)&v399);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();

                  swift_bridgeObjectRelease();
                  *(_WORD *)(v312 + 22) = 2080;
                  uint64_t v321 = DispatchTimeInterval.description.getter();
                  id v398 = (id)sub_100010680(v321, v322, (uint64_t *)&v399);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease();
                  long long v323 = *(void (**)(char *, uint64_t))(v306 + 8);
                  v323(v307, v334);
                  _os_log_impl((void *)&_mh_execute_header, v309, (os_log_type_t)v387, "Successfully cleared traffic registration for %s from %s (in recovery for %s)", (uint8_t *)v312, 0x20u);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();
                }
                else
                {

                  long long v323 = *(void (**)(char *, uint64_t))(v306 + 8);
                  v323(v307, v334);
                }
                uint64_t v51 = v377;
                uint64_t v324 = v336;
                uint64_t v325 = v368;
                uint64_t v326 = v338;
                (*(void (**)(uint64_t, char *, uint64_t))(v336 + 16))(v368, v304, v338);
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v324 + 56))(v325, 0, 1, v326);
                sub_1003885BC(v308, v325);

                ((void (*)(uint64_t, uint64_t))v391)(v325, v378);
                ((void (*)(char *, uint64_t))v383)(v304, v326);
                v323(v344, v334);
                ((void (*)(char *, uint64_t))v381)(v343, v374);
                uint64_t v54 = v390;
                goto LABEL_93;
              }

              sub_1000380B4(v151, &qword_10047DB90);
            }
            else
            {

              swift_bridgeObjectRelease();
            }
          }
LABEL_78:
          uint64_t v51 = v377;
          goto LABEL_93;
        }
      }
    }
    uint64_t v96 = (unsigned __int8 *)v387;
    sub_1000136F4(v54 + v51[14], (uint64_t)v387, (uint64_t *)&unk_1004882F0);
    if (v75((uint64_t)v96, 1, v74) == 1)
    {
      sub_1000380B4((uint64_t)v96, (uint64_t *)&unk_1004882F0);
      uint64_t v97 = (uint64_t)v386;
    }
    else
    {
      int v98 = v96[64];
      sub_1003AB6C0((uint64_t)v96, type metadata accessor for AWDLActionFrame.DataPathState);
      uint64_t v97 = (uint64_t)v386;
      if (v98 == 31)
      {
        uint64_t v391 = 0;
        uint64_t v99 = v384;
        swift_retain();
        os_log_type_t v100 = Logger.logObject.getter();
        os_log_type_t v101 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v100, v101))
        {
          uint64_t v102 = (uint8_t *)swift_slowAlloc();
          id aBlock = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v102 = 136315138;
          uint64_t v103 = WiFiAddress.description.getter(*(unsigned __int16 *)(v54 + v377[5]) | ((unint64_t)*(unsigned int *)(v54 + v377[5] + 2) << 16));
          uint64_t v104 = v54;
          id v399 = (id)sub_100010680(v103, v105, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v100, v101, "Received a recovery UMI from %s", v102, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_release();

          uint64_t v104 = v54;
        }
        uint64_t v136 = (void *)((char *)v5 + *(void *)(*v5 + 536));
        swift_beginAccess();
        uint64_t v137 = *v136;
        sub_10006F314(0, (unint64_t *)&unk_100484A40);
        sub_100296BC4();
        id v399 = (id)NANBitmap.Channel.operatingClass.getter(v137);
        __chkstk_darwin();
        type metadata accessor for Dictionary.Keys();
        swift_bridgeObjectRetain();
        swift_getWitnessTable();
        id v399 = (id)Sequence.filter(_:)();
        __chkstk_darwin();
        unint64_t v329 = (unint64_t)v5;
        uint64_t v330 = v99;
        sub_100010BCC(&qword_100484A50);
        swift_getWitnessTable();
        Sequence.forEach(_:)();
        swift_bridgeObjectRelease();
        uint64_t v51 = v377;
        uint64_t v54 = v104;
        goto LABEL_93;
      }
    }
    sub_1000136F4(v54 + v51[14], v97, (uint64_t *)&unk_1004882F0);
    if (v75(v97, 1, v74) == 1)
    {
      sub_1000380B4(v97, (uint64_t *)&unk_1004882F0);
LABEL_31:
      uint64_t v135 = (uint64_t)v383;
      sub_1000136F4(v54 + v51[14], (uint64_t)v383, (uint64_t *)&unk_1004882F0);
      v75(v135, 1, v74);
      sub_1000380B4(v135, (uint64_t *)&unk_1004882F0);
LABEL_93:
      uint64_t v186 = v389;
      goto LABEL_94;
    }
    int v106 = *(unsigned __int8 *)(v97 + 64);
    sub_1003AB6C0(v97, type metadata accessor for AWDLActionFrame.DataPathState);
    if (v106 != 32) {
      goto LABEL_31;
    }
    uint64_t v107 = (id *)((char *)v5 + *(void *)(*v5 + 536));
    swift_beginAccess();
    unint64_t v387 = (char *)&v331;
    uint64_t v388 = (char *)v107;
    id v398 = *v107;
    __chkstk_darwin();
    uint64_t v391 = 0;
    uint64_t v108 = v380;
    *(&v331 - 4) = (uint64_t)v385;
    *(&v331 - 3) = v108;
    uint64_t v390 = v54;
    unint64_t v329 = v54;
    uint64_t v109 = sub_10006F314(255, (unint64_t *)&unk_100484A40);
    unint64_t v110 = sub_100296BC4();
    unint64_t v386 = (char *)v109;
    uint64_t v111 = v338;
    type metadata accessor for Dictionary();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    Collection.firstIndex(where:)();
    swift_bridgeObjectRelease();
    if (v394 == 255)
    {
      swift_bridgeObjectRelease();
      swift_retain();
      uint64_t v156 = Logger.logObject.getter();
      os_log_type_t v157 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v156, v157))
      {
        uint64_t v158 = (uint8_t *)swift_slowAlloc();
        id aBlock = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v158 = 136315138;
        uint64_t v159 = WiFiAddress.description.getter(*(unsigned __int16 *)(v390 + v377[5]) | ((unint64_t)*(unsigned int *)(v390 + v377[5] + 2) << 16));
        id v398 = (id)sub_100010680(v159, v160, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v156, v157, "Peer %s notified about infrastructure disconnect but no active traffic registration was found", v158, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_release();
      }
      else
      {
        swift_release_n();
      }
    }
    else
    {
      unint64_t v332 = v5;
      uint64_t v391 = (uint64_t)aBlock;
      unint64_t v387 = (char *)v393;
      LODWORD(v381) = v394;
      int v112 = v394 & 1;
      swift_bridgeObjectRetain();
      unint64_t v329 = v110;
      os_log_type_t v113 = v373;
      Dictionary.subscript.getter();
      swift_bridgeObjectRelease();
      uint64_t v114 = v336 + 8;
      long long v385 = *(void **)(v336 + 8);
      ((void (*)(char *, uint64_t))v385)(v113, v111);
      id v115 = aBlock;
      uint64_t v383 = (char *)[aBlock uniqueIdentifier];

      swift_bridgeObjectRetain();
      unint64_t v382 = v110;
      unint64_t v329 = v110;
      uint64_t v116 = v371;
      LODWORD(v380) = v112;
      Dictionary.subscript.getter();
      swift_bridgeObjectRelease();

      uint64_t v117 = (void (*)(void, void))v372;
      sub_1000136F4((uint64_t)v116 + *(int *)(v111 + 40), (uint64_t)v372, &qword_1004862B0);
      uint64_t v378 = v114;
      ((void (*)(void, uint64_t))v385)(v116, v111);
      uint64_t v118 = v379;
      uint64_t v119 = v335;
      LODWORD(v116) = (*(uint64_t (**)(void (*)(void, void), uint64_t, uint64_t))(v379 + 48))(v117, 1, v335);
      sub_1000380B4((uint64_t)v117, &qword_1004862B0);
      if (v116 == 1)
      {
        uint64_t v120 = v370;
        UUID.init()();
        uint64_t v121 = (uint64_t)v364;
        (*(void (**)(char *, char *, uint64_t))(v118 + 16))(v364, v120, v119);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v118 + 56))(v121, 0, 1, v119);
        uint64_t v122 = (id *)v388;
        swift_beginAccess();
        id v123 = *v122;
        *uint64_t v122 = (id)0x8000000000000000;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          id v398 = v123;
          type metadata accessor for _NativeDictionary();
          _NativeDictionary.copy()();
          id v123 = v398;
          swift_bridgeObjectRelease();
        }
        uint64_t v124 = v377;
        if (v391 < 0 || v391 >= 1 << *((unsigned char *)v123 + 32))
        {
          __break(1u);
        }
        else if ((*((void *)v123 + ((unint64_t)v391 >> 6) + 8) >> v391))
        {
          if (*((_DWORD *)v123 + 9) == v387)
          {
            sub_10006D1A4(v121, *((void *)v123 + 7) + *(void *)(v336 + 72) * v391 + *(int *)(v338 + 40), &qword_1004862B0);
            *uint64_t v122 = v123;
            swift_endAccess();
            sub_100378300();
            uint64_t v125 = v383;
            swift_retain();
            id v126 = v125;
            uint64_t v127 = Logger.logObject.getter();
            os_log_type_t v128 = static os_log_type_t.default.getter();
            BOOL v129 = os_log_type_enabled(v127, v128);
            uint64_t v383 = v126;
            if (v129)
            {
              uint64_t v130 = swift_slowAlloc();
              long long v381 = (uint64_t *)swift_slowAlloc();
              id aBlock = v381;
              *(_DWORD *)uint64_t v130 = 136315394;
              uint64_t v131 = WiFiAddress.description.getter(*(unsigned __int16 *)(v390 + v124[5]) | ((unint64_t)*(unsigned int *)(v390 + v124[5] + 2) << 16));
              id v398 = (id)sub_100010680(v131, v132, (uint64_t *)&aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_release();
              swift_bridgeObjectRelease();
              *(_WORD *)(v130 + 12) = 2080;
              uint64_t v133 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              id v398 = (id)sub_100010680(v133, v134, (uint64_t *)&aBlock);
              uint64_t v124 = v377;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v127, v128, "Peer %s disconnected infrastructure network to avoid retro mode while running %s", (uint8_t *)v130, 0x16u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_release();
            }

            uint64_t v180 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v182 = v181;
            if (v180 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v182 == v183)
            {
              swift_bridgeObjectRelease_n();
              uint64_t v184 = 1;
              uint64_t v54 = v390;
            }
            else
            {
              char v185 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v54 = v390;
              if ((v185 & 1) == 0)
              {
                uint64_t v189 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v191 = v190;
                if (v189 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v191 == v192)
                {
                  swift_bridgeObjectRelease_n();
                  uint64_t v184 = 1;
                  goto LABEL_62;
                }
                char v296 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v296 & 1) == 0)
                {
                  uint64_t v297 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  uint64_t v299 = v298;
                  if (v297 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v299 == v300)
                  {
                    swift_bridgeObjectRelease_n();
                  }
                  else
                  {
                    char v327 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    uint64_t v184 = 0;
                    if ((v327 & 1) == 0) {
                      goto LABEL_62;
                    }
                  }
                  uint64_t v328 = (uint64_t)v333;
                  sub_1000136F4(v54 + v124[14], (uint64_t)v333, (uint64_t *)&unk_1004882F0);
                  if (v75(v328, 1, v74) == 1)
                  {
                    sub_1000380B4(v328, (uint64_t *)&unk_1004882F0);
                    uint64_t v184 = 0;
                  }
                  else
                  {
                    uint64_t v184 = *(unsigned __int8 *)(v328 + 84);
                    sub_1003AB6C0(v328, type metadata accessor for AWDLActionFrame.DataPathState);
                  }
                  goto LABEL_62;
                }
              }
              uint64_t v184 = 1;
            }
LABEL_62:
            uint64_t v193 = *(void (**)(void))(AssociatedConformanceWitness + 136);
            swift_checkMetadataState();
            uint64_t v194 = v359;
            v193();
            uint64_t v195 = v363;
            uint64_t v196 = swift_getAssociatedConformanceWitness();
            uint64_t v197 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v196 + 8))(v195, v196);
            (*(void (**)(char *, uint64_t))(v362 + 8))(v194, v195);
            if (v197)
            {
              swift_bridgeObjectRetain();
              unint64_t v329 = v382;
              uint64_t v198 = v354;
              uint64_t v199 = v338;
              Dictionary.subscript.getter();
              swift_bridgeObjectRelease();
              ((void (*)(char *, uint64_t))v385)(v198, v199);
              id v200 = aBlock;
              NSString v201 = [aBlock localization];

              uint64_t v186 = v389;
              if (!v201)
              {
                static String._unconditionallyBridgeFromObjectiveC(_:)();
                NSString v201 = String._bridgeToObjectiveC()();
                swift_bridgeObjectRelease();
              }
              uint64_t v202 = v370;
              Class isa = UUID._bridgeToObjectiveC()().super.isa;
              unint64_t v396 = sub_10038982C;
              uint64_t v397 = 0;
              id aBlock = _NSConcreteStackBlock;
              uint64_t v393 = 1107296256;
              uint64_t v394 = sub_1003712BC;
              uint64_t v395 = &unk_100470718;
              char v204 = _Block_copy(&aBlock);
              uint64_t v205 = v383;
              [v197 showInfrastructureDisconnectOnRetroModeNotificationForService:v383 localization:v201 phoneDisconnected:v184 uuid:isa completionHandler:v204];
              _Block_release(v204);

              swift_unknownObjectRelease();
              (*(void (**)(char *, uint64_t))(v379 + 8))(v202, v335);
              uint64_t v51 = v377;
LABEL_94:
              sub_10037B898();
              __int16 v293 = AWDLPeer.countryCode.getter();
              sub_10036CED4(v293);
              swift_release();
              uint64_t v294 = (unsigned __int16 *)(v54 + v51[11]);
              char v295 = *((unsigned char *)v294 + 2);
              if (v339)
              {
                if (v294[1]) {
                  goto LABEL_101;
                }
              }
              else
              {
                if (v337 != *v294) {
                  char v295 = 1;
                }
                if ((v295 & 1) == 0) {
                  goto LABEL_101;
                }
              }
              sub_100375308();
              sub_10030C488(v54, v186);
              swift_release();
LABEL_101:
              swift_release();
              swift_bridgeObjectRelease();
              return;
            }
            (*(void (**)(char *, uint64_t))(v379 + 8))(v370, v335);

            goto LABEL_78;
          }
LABEL_117:
          __break(1u);
          return;
        }
        __break(1u);
        goto LABEL_117;
      }
      swift_bridgeObjectRelease();
      swift_retain();
      uint64_t v161 = Logger.logObject.getter();
      os_log_type_t v162 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v161, v162))
      {
        uint64_t v163 = (uint8_t *)swift_slowAlloc();
        id aBlock = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v163 = 136315138;
        uint64_t v164 = WiFiAddress.description.getter(*(unsigned __int16 *)(v390 + v377[5]) | ((unint64_t)*(unsigned int *)(v390 + v377[5] + 2) << 16));
        id v398 = (id)sub_100010680(v164, v165, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v161, v162, "Peer %s notified about infrastructure disconnect but already presented notification for this session", v163, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        sub_100038018(v391, (uint64_t)v387, v381);
        swift_release();
      }
      else
      {
        sub_100038018(v391, (uint64_t)v387, v381);
        swift_release_n();
      }
    }
  }
}

void sub_100385BB0(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)v3;
  uint64_t v150 = type metadata accessor for DispatchTime();
  uint64_t v144 = *(void *)(v150 - 8);
  __chkstk_darwin();
  uint64_t v137 = (char *)&v128 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  long long v149 = (char *)&v128 - v8;
  uint64_t v141 = (uint64_t *)type metadata accessor for DispatchTimeInterval();
  uint64_t v140 = *(v141 - 1);
  __chkstk_darwin();
  uint64_t v139 = (char *)&v128 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v138 = (char *)&v128 - v10;
  uint64_t v11 = type metadata accessor for AWDLPeer(0);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v143 = (char *)&v128 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v15 = (char *)&v128 - v14;
  uint64_t v16 = *(void *)(v6 + 416);
  uint64_t v135 = *(void *)(v6 + 408);
  uint64_t v134 = v16;
  uint64_t v154 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation();
  uint64_t v142 = type metadata accessor for Optional();
  unint64_t v133 = *(void *)(v142 - 8);
  __chkstk_darwin();
  uint64_t v18 = (char *)&v128 - v17;
  sub_100010BCC(&qword_100487CE0);
  __chkstk_darwin();
  uint64_t v129 = (uint64_t)&v128 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v132 = (uint64_t)&v128 - v20;
  __chkstk_darwin();
  uint64_t v130 = (uint64_t)&v128 - v21;
  __chkstk_darwin();
  uint64_t v128 = (uint64_t)&v128 - v22;
  __chkstk_darwin();
  uint64_t v131 = (uint64_t)&v128 - v23;
  __chkstk_darwin();
  uint64_t v25 = (char *)&v128 - v24;
  unint64_t v136 = a2;
  uint64_t v26 = a2 & 0xFFFFFFFFFFFFLL;
  BOOL v27 = sub_100377334(a2 & 0xFFFFFFFFFFFFLL);
  id v156 = WiFiAddress.apiAddress.getter(a2 & 0xFFFFFFFFFFFFLL);
  uint64_t v153 = a1;
  sub_1003AB930(a1, (uint64_t)v25, type metadata accessor for AWDLPeer);
  uint64_t v145 = v12;
  uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
  uint64_t v152 = v11;
  uint64_t v147 = v12 + 56;
  unint64_t v146 = v28;
  v28((uint64_t)v25, 0, 1, v11);
  uint64_t v29 = (uint64_t *)(v3 + *(void *)(*(void *)v3 + 424));
  swift_beginAccess();
  uint64_t v30 = v26;
  uint64_t v155 = v29;
  sub_1003552B0((uint64_t)v25, v26);
  swift_endAccess();
  LODWORD(v151) = v27;
  if (!v27)
  {
    uint64_t v31 = AWDLTrafficRegistrationServiceAssistedDiscovery;
    id v32 = objc_allocWithZone((Class)AWDLTrafficRegistrationConfiguration);
    uint64_t v33 = (uint64_t *)[v32 initWithUniqueIdentifier:v31 peerAddress:v156];
    swift_beginAccess();
    uint64_t v161 = v33;
    sub_10006F314(0, (unint64_t *)&unk_100484A40);
    sub_100296BC4();
    uint64_t v30 = v26;
    uint64_t v34 = v154;
    Dictionary.subscript.getter();

    swift_endAccess();
    LODWORD(v33) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v34 - 8) + 48))(v18, 1, v34);
    (*(void (**)(char *, uint64_t))(v133 + 8))(v18, v142);
    if (v33 != 1)
    {
      sub_100375308();
      sub_10030C2C8();
      swift_release();
    }
  }
  int v35 = sub_100379908();
  sub_1003AB930(v153, (uint64_t)v15, type metadata accessor for AWDLPeer);
  uint64_t v148 = v30;
  LODWORD(v142) = v35;
  if ((v151 & 1) == 0)
  {
    sub_1003AB6C0((uint64_t)v15, type metadata accessor for AWDLPeer);
    unint64_t v37 = v150;
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)v149;
    if (v35)
    {
      unint64_t v40 = sub_100379908();
      uint64_t v41 = (uint64_t **)v155;
      swift_beginAccess();
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v161 = *v41;
      uint64_t v42 = (uint64_t)v161;
      *uint64_t v41 = (uint64_t *)0x8000000000000000;
      uint64_t v44 = sub_10039F858(v30, (void (*)(unsigned char *, uint64_t))NANClusterChangeEvent.hash(into:), (uint64_t (*)(uint64_t, Swift::Int))sub_100031D78);
      uint64_t v45 = *(void *)(v42 + 16);
      BOOL v46 = (v43 & 1) == 0;
      uint64_t v47 = v45 + v46;
      if (__OFADD__(v45, v46)) {
        goto LABEL_61;
      }
      LOBYTE(v30) = v43;
      if (*(void *)(v42 + 24) >= v47)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          goto LABEL_67;
        }
        goto LABEL_23;
      }
      sub_100290E38(v47, isUniquelyReferenced_nonNull_native);
      uint64_t v48 = sub_10039F858(v148, (void (*)(unsigned char *, uint64_t))NANClusterChangeEvent.hash(into:), (uint64_t (*)(uint64_t, Swift::Int))sub_100031D78);
      if ((v30 & 1) == (v49 & 1))
      {
        uint64_t v44 = v48;
        goto LABEL_23;
      }
      goto LABEL_74;
    }
LABEL_12:
    swift_beginAccess();
    uint64_t v44 = (uint64_t)&v128;
    __chkstk_darwin();
    uint64_t v50 = v134;
    *(&v128 - 4) = v135;
    *(&v128 - 3) = v50;
    *(&v128 - 2) = (uint64_t)v156;
    uint64_t v51 = sub_10006F314(0, (unint64_t *)&unk_100484A40);
    unint64_t v37 = sub_100296BC4();
    swift_bridgeObjectRetain();
    uint64_t v52 = Dictionary.filter(_:)();
    uint64_t v135 = 0;
    uint64_t v41 = (uint64_t **)v52;
    uint64_t v134 = v51;
    unint64_t v133 = v37;
    if (Dictionary.isEmpty.getter())
    {
      unint64_t v37 = v150;
      if ((v151 & 1) == 0) {
        goto LABEL_34;
      }
      uint64_t v53 = v155;
      swift_beginAccess();
      LODWORD(v30) = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v160 = *v53;
      uint64_t v54 = v160;
      uint64_t *v53 = 0x8000000000000000;
      unint64_t v40 = sub_10039F858(v148, (void (*)(unsigned char *, uint64_t))NANClusterChangeEvent.hash(into:), (uint64_t (*)(uint64_t, Swift::Int))sub_100031D78);
      uint64_t v56 = *(void *)(v54 + 16);
      BOOL v57 = (v55 & 1) == 0;
      uint64_t v58 = v56 + v57;
      if (__OFADD__(v56, v57)) {
        goto LABEL_66;
      }
      LOBYTE(v44) = v55;
      if (*(void *)(v54 + 24) >= v58)
      {
        if ((v30 & 1) == 0) {
          goto LABEL_70;
        }
        goto LABEL_30;
      }
      sub_100290E38(v58, v30);
      uint64_t v59 = v148;
      uint64_t v60 = sub_10039F858(v148, (void (*)(unsigned char *, uint64_t))NANClusterChangeEvent.hash(into:), (uint64_t (*)(uint64_t, Swift::Int))sub_100031D78);
      if ((v44 & 1) == (v61 & 1))
      {
        unint64_t v40 = v60;
        goto LABEL_31;
      }
      goto LABEL_74;
    }
    uint64_t v62 = v155;
    swift_beginAccess();
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v160 = *v62;
    uint64_t v63 = v160;
    uint64_t *v62 = 0x8000000000000000;
    unint64_t v40 = sub_10039F858(v30, (void (*)(unsigned char *, uint64_t))NANClusterChangeEvent.hash(into:), (uint64_t (*)(uint64_t, Swift::Int))sub_100031D78);
    uint64_t v65 = *(void *)(v63 + 16);
    BOOL v66 = (v64 & 1) == 0;
    uint64_t v67 = v65 + v66;
    if (__OFADD__(v65, v66)) {
      goto LABEL_62;
    }
    char v68 = v64;
    if (*(void *)(v63 + 24) >= v67)
    {
      unint64_t v37 = v150;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_1003A3F1C(type metadata accessor for AWDLPeer, &qword_100484AE8, type metadata accessor for AWDLPeer, type metadata accessor for AWDLPeer);
      }
    }
    else
    {
      sub_100290E38(v67, isUniquelyReferenced_nonNull_native);
      uint64_t v69 = sub_10039F858(v30, (void (*)(unsigned char *, uint64_t))NANClusterChangeEvent.hash(into:), (uint64_t (*)(uint64_t, Swift::Int))sub_100031D78);
      unint64_t v37 = v150;
      if ((v68 & 1) != (v70 & 1)) {
        goto LABEL_74;
      }
      unint64_t v40 = v69;
    }
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)v149;
    if (v68)
    {
      uint64_t v73 = v131;
      sub_1003AB998(*(void *)(v160 + 56) + *(void *)(v145 + 72) * v40, v131, type metadata accessor for AWDLPeer);
      uint64_t v74 = v152;
      v146(v73, 0, 1, v152);
      *(unsigned char *)(v73 + *(int *)(v74 + 112)) = 1;
      sub_1002FE050(v73, 1, &v160, v40, v30);
      uint64_t v75 = v73;
      goto LABEL_33;
    }
    goto LABEL_72;
  }
  char v36 = v15[*(int *)(v152 + 112)];
  sub_1003AB6C0((uint64_t)v15, type metadata accessor for AWDLPeer);
  unint64_t v37 = v150;
  uint64_t v38 = v144;
  uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)v149;
  if (!(v35 & 1 | ((v36 & 1) == 0))) {
    goto LABEL_12;
  }
  uint64_t v135 = 0;
  while (1)
  {
    uint64_t v134 = type metadata accessor for P2PTimer();
    variable initialization expression of AWDLPeer.lastUpdated();
    uint64_t v85 = (char *)(v3 + *(void *)(*(void *)v3 + 568));
    swift_beginAccess();
    unint64_t v86 = *(void (**)(char *, char *, unint64_t))(v38 + 16);
    char v87 = v137;
    long long v149 = v85;
    v86(v137, v85, v37);
    uint64_t v88 = isUniquelyReferenced_nonNull_native;
    uint64_t v89 = v138;
    DispatchTime.distance(to:)();
    unint64_t v90 = *(void (**)(char *, unint64_t))(v38 + 8);
    v90(v87, v37);
    v90((char *)v88, v37);
    uint64_t v91 = v139;
    *(void *)uint64_t v139 = 10;
    uint64_t v92 = v140;
    uint64_t v41 = (uint64_t **)v37;
    unint64_t v37 = (unint64_t)v141;
    (*(void (**)(char *, void, uint64_t *))(v140 + 104))(v91, enum case for DispatchTimeInterval.seconds(_:), v141);
    BOOL v93 = static DispatchTimeInterval.< infix(_:_:)();
    uint64_t v94 = *(void (**)(char *, unint64_t))(v92 + 8);
    v94(v91, v37);
    v94(v89, v37);
    if (v93)
    {
      uint64_t v95 = (uint64_t)v143;
      uint64_t v30 = v153;
      uint64_t isUniquelyReferenced_nonNull_native = v142;
      LOBYTE(v41) = v135;
    }
    else
    {
      swift_beginAccess();
      uint64_t v96 = v38;
      uint64_t v97 = v41;
      uint64_t v141 = &v128;
      __chkstk_darwin();
      *(&v128 - 2) = (uint64_t)v156;
      *(&v128 - 1) = v3;
      sub_10006F314(0, (unint64_t *)&unk_100484A40);
      uint64_t v98 = v88;
      sub_100296BC4();
      swift_bridgeObjectRetain();
      LOBYTE(v41) = v135;
      uint64_t v99 = Dictionary.filter(_:)();
      sub_10037888C(v99);
      variable initialization expression of AWDLPeer.lastUpdated();
      os_log_type_t v100 = v149;
      swift_beginAccess();
      os_log_type_t v101 = *(void (**)(char *, uint64_t, uint64_t **))(v96 + 40);
      unint64_t v37 = v96 + 40;
      v101(v100, v98, v97);
      swift_endAccess();
      uint64_t v95 = (uint64_t)v143;
      uint64_t v30 = v153;
      uint64_t isUniquelyReferenced_nonNull_native = v142;
    }
    sub_1003AB930(v30, v95, type metadata accessor for AWDLPeer);
    if (v151) {
      break;
    }
    sub_1003AB6C0(v95, type metadata accessor for AWDLPeer);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_48;
    }
    uint64_t v103 = v155;
    swift_beginAccess();
    uint64_t v44 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v158 = *v103;
    uint64_t v104 = v158;
    *uint64_t v103 = 0x8000000000000000;
    uint64_t v3 = v148;
    unint64_t v40 = sub_10039F858(v148, (void (*)(unsigned char *, uint64_t))NANClusterChangeEvent.hash(into:), (uint64_t (*)(uint64_t, Swift::Int))sub_100031D78);
    uint64_t v106 = *(void *)(v104 + 16);
    BOOL v107 = (v105 & 1) == 0;
    uint64_t v108 = v106 + v107;
    if (__OFADD__(v106, v107)) {
      goto LABEL_63;
    }
    uint64_t v41 = v105;
    if (*(void *)(v104 + 24) >= v108)
    {
      if (v44)
      {
        if (v105) {
          goto LABEL_58;
        }
      }
      else
      {
        sub_1003A3F1C(type metadata accessor for AWDLPeer, &qword_100484AE8, type metadata accessor for AWDLPeer, type metadata accessor for AWDLPeer);
        if (v41) {
          goto LABEL_58;
        }
      }
    }
    else
    {
      sub_100290E38(v108, v44);
      uint64_t v109 = sub_10039F858(v3, (void (*)(unsigned char *, uint64_t))NANClusterChangeEvent.hash(into:), (uint64_t (*)(uint64_t, Swift::Int))sub_100031D78);
      if ((v41 & 1) != (v110 & 1)) {
        goto LABEL_74;
      }
      unint64_t v40 = v109;
      if (v41)
      {
LABEL_58:
        uint64_t v126 = v129;
        sub_1003AB998(*(void *)(v158 + 56) + *(void *)(v145 + 72) * v40, v129, type metadata accessor for AWDLPeer);
        uint64_t v127 = v152;
        v146(v126, 0, 1, v152);
        *(unsigned char *)(v126 + *(int *)(v127 + 116)) = (isUniquelyReferenced_nonNull_native ^ 1) & 1;
        sub_1002FE050(v126, 1, &v158, v40, v3);
        sub_1000380B4(v126, &qword_100487CE0);
        *uint64_t v155 = v158;
        goto LABEL_59;
      }
    }
    v146(v129, 1, 1, v152);
    __break(1u);
LABEL_70:
    sub_1003A3F1C(type metadata accessor for AWDLPeer, &qword_100484AE8, type metadata accessor for AWDLPeer, type metadata accessor for AWDLPeer);
LABEL_30:
    uint64_t v59 = v148;
LABEL_31:
    if ((v44 & 1) == 0) {
      goto LABEL_73;
    }
    uint64_t v76 = v128;
    sub_1003AB998(*(void *)(v160 + 56) + *(void *)(v145 + 72) * v40, v128, type metadata accessor for AWDLPeer);
    uint64_t v77 = v152;
    v146(v76, 0, 1, v152);
    *(unsigned char *)(v76 + *(int *)(v77 + 112)) = 0;
    sub_1002FE050(v76, 1, &v160, v40, v59);
    uint64_t v75 = v76;
LABEL_33:
    sub_1000380B4(v75, &qword_100487CE0);
    *uint64_t v155 = v160;
    swift_endAccess();
LABEL_34:
    uint64_t v161 = (uint64_t *)v41;
    char v78 = __chkstk_darwin();
    *(&v128 - 2) = v3;
    *((unsigned char *)&v128 - 8) = v78;
    *((unsigned char *)&v128 - 7) = v79;
    *((unsigned char *)&v128 - 6) = v80;
    *((unsigned char *)&v128 - 5) = v81;
    *((unsigned char *)&v128 - 4) = v82;
    *((unsigned char *)&v128 - 3) = v83;
    type metadata accessor for Dictionary();
    swift_getWitnessTable();
    uint64_t v84 = v135;
    Sequence.forEach(_:)();
    uint64_t v135 = v84;
    swift_bridgeObjectRelease();
LABEL_35:
    uint64_t v38 = v144;
  }
  char v102 = *(unsigned char *)(v95 + *(int *)(v152 + 116));
  sub_1003AB6C0(v95, type metadata accessor for AWDLPeer);
  if (isUniquelyReferenced_nonNull_native & 1 | ((v102 & 1) == 0))
  {
    sub_1003AB6C0(v30, type metadata accessor for AWDLPeer);

    return;
  }
LABEL_48:
  uint64_t v30 = v136;
  unint64_t v111 = v136 >> 40;
  unint64_t v112 = HIDWORD(v136);
  unint64_t v113 = v136 >> 24;
  unint64_t v114 = v136 >> 16;
  unint64_t v37 = v136 >> 8;
  unsigned __int8 v159 = 0;
  id v115 = (uint64_t *)(v3 + *(void *)(*(void *)v3 + 576));
  swift_beginAccess();
  uint64_t v151 = &v128;
  uint64_t v158 = *v115;
  __chkstk_darwin();
  *(&v128 - 4) = (uint64_t)v156;
  *(&v128 - 3) = v3;
  *((unsigned char *)&v128 - 16) = v30;
  *((unsigned char *)&v128 - 15) = v37;
  *((unsigned char *)&v128 - 14) = v114;
  *((unsigned char *)&v128 - 13) = v113;
  *((unsigned char *)&v128 - 12) = v112;
  *((unsigned char *)&v128 - 11) = v111;
  *(&v128 - 1) = (uint64_t)&v159;
  sub_10006F314(255, (unint64_t *)&unk_100484A40);
  sub_100296BC4();
  type metadata accessor for Dictionary();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  Sequence.forEach(_:)();
  swift_bridgeObjectRelease();
  uint64_t v3 = v159;
  uint64_t v116 = v155;
  swift_beginAccess();
  uint64_t v44 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v157 = *v116;
  uint64_t v117 = v157;
  *uint64_t v116 = 0x8000000000000000;
  uint64_t isUniquelyReferenced_nonNull_native = v148;
  unint64_t v40 = sub_10039F858(v148, (void (*)(unsigned char *, uint64_t))NANClusterChangeEvent.hash(into:), (uint64_t (*)(uint64_t, Swift::Int))sub_100031D78);
  uint64_t v119 = *(void *)(v117 + 16);
  BOOL v120 = (v118 & 1) == 0;
  uint64_t v121 = v119 + v120;
  if (__OFADD__(v119, v120))
  {
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    sub_1003A3F1C(type metadata accessor for AWDLPeer, &qword_100484AE8, type metadata accessor for AWDLPeer, type metadata accessor for AWDLPeer);
    if (v41) {
      goto LABEL_55;
    }
    goto LABEL_65;
  }
  LOBYTE(v41) = v118;
  if (*(void *)(v117 + 24) >= v121)
  {
    uint64_t v30 = v153;
    if (v44)
    {
      if (v118) {
        goto LABEL_55;
      }
      goto LABEL_65;
    }
    goto LABEL_64;
  }
  sub_100290E38(v121, v44);
  uint64_t v122 = sub_10039F858(isUniquelyReferenced_nonNull_native, (void (*)(unsigned char *, uint64_t))NANClusterChangeEvent.hash(into:), (uint64_t (*)(uint64_t, Swift::Int))sub_100031D78);
  uint64_t v30 = v153;
  if ((v41 & 1) != (v123 & 1)) {
    goto LABEL_74;
  }
  unint64_t v40 = v122;
  if (v41)
  {
LABEL_55:
    uint64_t v124 = v132;
    sub_1003AB998(*(void *)(v157 + 56) + *(void *)(v145 + 72) * v40, v132, type metadata accessor for AWDLPeer);
    uint64_t v125 = v152;
    v146(v124, 0, 1, v152);
    *(unsigned char *)(v124 + *(int *)(v125 + 116)) = v3 ^ 1;
    sub_1002FE050(v124, 1, &v157, v40, isUniquelyReferenced_nonNull_native);
    sub_1000380B4(v124, &qword_100487CE0);
    *uint64_t v155 = v157;
LABEL_59:
    swift_endAccess();

    sub_1003AB6C0(v30, type metadata accessor for AWDLPeer);
    return;
  }
LABEL_65:
  v146(v132, 1, 1, v152);
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  sub_1003A3F1C(type metadata accessor for AWDLPeer, &qword_100484AE8, type metadata accessor for AWDLPeer, type metadata accessor for AWDLPeer);
LABEL_23:
  uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)v149;
  if (v30)
  {
    uint64_t v71 = v130;
    sub_1003AB998(v161[7] + *(void *)(v145 + 72) * v44, v130, type metadata accessor for AWDLPeer);
    uint64_t v72 = v152;
    v146(v71, 0, 1, v152);
    *(unsigned char *)(v71 + *(int *)(v72 + 112)) = v40 & 1;
    sub_1002FE050(v71, 1, (uint64_t *)&v161, v44, v148);
    sub_1000380B4(v71, &qword_100487CE0);
    *uint64_t v155 = (uint64_t)v161;
    swift_endAccess();
    uint64_t v135 = 0;
    goto LABEL_35;
  }
  v146(v130, 1, 1, v152);
  __break(1u);
LABEL_72:
  v146(v131, 1, 1, v152);
  __break(1u);
LABEL_73:
  v146(v128, 1, 1, v152);
  __break(1u);
LABEL_74:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t sub_100387508@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a4, a1, v8);
  uint64_t v9 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation();
  sub_10006EC68(a2, a4 + *(int *)(v9 + 36), &qword_10047DB90);
  return sub_10006EC68(a3, a4 + *(int *)(v9 + 40), &qword_1004862B0);
}

uint64_t sub_1003875CC(void *a1)
{
  uint64_t v2 = v1;
  type metadata accessor for AWDLPeer(0);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = [a1 uniqueIdentifier];
  char v7 = AWDLTrafficRegistrationService.showsInfraDisconnectUINotifications.getter();

  if (v7)
  {
    sub_100397F24(a1, 0);
    int v9 = v8;
    int v10 = BYTE1(v8);
    *(unsigned char *)(v2 + *(void *)(*(void *)v2 + 504)) = v8;
  }
  else
  {
    int v10 = 2;
    int v9 = 2;
  }
  id v11 = [a1 peerAddress];
  unint64_t v12 = WiFiMACAddress.wifiAddress.getter();

  sub_100376468(v12 & 0xFFFFFFFFFFFFLL, (uint64_t)v5);
  sub_10039B0AC(a1, v10, v9, (uint64_t)v5);
  return sub_1003AB6C0((uint64_t)v5, type metadata accessor for AWDLPeer);
}

BOOL sub_100387720(void **a1, uint64_t a2, NSObject *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v122 = a5;
  uint64_t v137 = a3;
  uint64_t v126 = a4;
  uint64_t v7 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation();
  uint64_t v120 = type metadata accessor for Optional();
  uint64_t v119 = *(void *)(v120 - 8);
  __chkstk_darwin();
  char v118 = (char *)&v111 - v8;
  uint64_t v124 = type metadata accessor for DispatchTimeInterval();
  uint64_t v123 = *(void *)(v124 - 8);
  __chkstk_darwin();
  uint64_t v131 = (char *)&v111 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v132 = (char *)&v111 - v10;
  sub_100010BCC(&qword_10047DB90);
  __chkstk_darwin();
  unint64_t v138 = (char *)&v111 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v133 = type metadata accessor for DispatchTime();
  uint64_t v135 = *(void *)(v133 - 8);
  __chkstk_darwin();
  uint64_t v116 = (char *)&v111 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v125 = (char *)&v111 - v13;
  sub_10006F314(255, (unint64_t *)&unk_100484A40);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v143 = *(void *)(TupleTypeMetadata2 - 8);
  __chkstk_darwin();
  uint64_t v121 = (void **)((char *)&v111 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  uint64_t v130 = (char *)&v111 - v16;
  __chkstk_darwin();
  uint64_t v129 = (void **)((char *)&v111 - v17);
  __chkstk_darwin();
  id v115 = (NSObject **)((char *)&v111 - v18);
  __chkstk_darwin();
  uint64_t v128 = (char *)&v111 - v19;
  __chkstk_darwin();
  uint64_t v117 = (void **)((char *)&v111 - v20);
  __chkstk_darwin();
  unint64_t v114 = (NSObject **)((char *)&v111 - v21);
  __chkstk_darwin();
  uint64_t v127 = (void (*)(char *, uint64_t))((char *)&v111 - v22);
  __chkstk_darwin();
  uint64_t v24 = (void (**)(void **, NSObject **, uint64_t))((char *)&v111 - v23);
  uint64_t v25 = __chkstk_darwin();
  BOOL v27 = (void (*)(void **, NSObject **, uint64_t))*a1;
  uint64_t v28 = (char *)&v111 + *(int *)(v25 + 48) - v26;
  uint64_t v134 = (char *)&v111 - v26;
  *(void (**)(void **, NSObject **, uint64_t))((char *)&v111 - v26) = v27;
  uint64_t v141 = *(void *)(v7 - 8);
  uint64_t v29 = v141 + 16;
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v141 + 16);
  v30(v28, a2, v7);
  uint64_t v144 = TupleTypeMetadata2;
  uint64_t v31 = (char *)v24 + *(int *)(TupleTypeMetadata2 + 48);
  *uint64_t v24 = v27;
  uint64_t v139 = v28;
  uint64_t v140 = v29;
  uint64_t v142 = v7;
  unint64_t v136 = v30;
  v30(v31, (uint64_t)v28, v7);
  id v32 = v27;
  id v33 = [v32 uniqueIdentifier];
  id v34 = [v137 uniqueIdentifier];
  uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v37 = v36;
  if (v35 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v37 == v38) {
    int v39 = 1;
  }
  else {
    int v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v41 = v141 + 8;
  unint64_t v40 = *(void (**)(char *, uint64_t))(v141 + 8);
  uint64_t v42 = v31;
  uint64_t v43 = v142;
  v40(v42, v142);
  uint64_t v44 = (uint64_t)v138;
  if (v39)
  {
    uint64_t v45 = v144;
    BOOL v46 = (char *)v127 + *(int *)(v144 + 48);
    uint64_t v137 = v32;
    *(void *)uint64_t v127 = v32;
    uint64_t v47 = (void (*)(char *, char *, uint64_t))v136;
    v136(v46, (uint64_t)v139, v43);
    sub_1000136F4((uint64_t)&v46[*(int *)(v43 + 36)], v44, &qword_10047DB90);
    v40(v46, v43);
    uint64_t v48 = v135;
    uint64_t v49 = v133;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v135 + 48))(v44, 1, v133) == 1)
    {
      (*(void (**)(char *, uint64_t))(v143 + 8))(v134, v45);
      sub_1000380B4(v44, &qword_10047DB90);
    }
    else
    {
      uint64_t v113 = v41;
      uint64_t v127 = v40;
      int v112 = v39;
      (*(void (**)(char *, uint64_t, uint64_t))(v48 + 32))(v125, v44, v49);
      type metadata accessor for P2PTimer();
      uint64_t v50 = v116;
      variable initialization expression of AWDLPeer.lastUpdated();
      DispatchTime.distance(to:)();
      uint64_t v51 = *(char **)(v48 + 8);
      uint64_t v135 = v48 + 8;
      uint64_t v116 = v51;
      ((void (*)(char *, uint64_t))v51)(v50, v49);
      unint64_t v138 = (char *)(v126 + *(void *)(*(void *)v126 + 160));
      uint64_t v52 = v114;
      uint64_t v53 = (char *)v114 + *(int *)(v144 + 48);
      uint64_t v54 = v137;
      *unint64_t v114 = v137;
      v47(v53, v139, v43);
      uint64_t v55 = v143;
      unint64_t v111 = *(void (**)(void **, NSObject **, uint64_t))(v143 + 16);
      uint64_t v56 = v117;
      v111(v117, v52, v144);
      uint64_t v57 = v43;
      uint64_t v58 = *(void (**)(char *, NSObject **, uint64_t))(v55 + 32);
      v58(v128, v52, v144);
      uint64_t v59 = v115;
      uint64_t v60 = (char *)v115 + *(int *)(v144 + 48);
      *id v115 = v54;
      uint64_t v61 = v57;
      uint64_t v62 = v56;
      v47(v60, v139, v61);
      v111(v129, v59, v144);
      v58(v130, v59, v144);
      uint64_t v63 = v123;
      uint64_t v64 = v144;
      uint64_t v65 = v124;
      (*(void (**)(char *, char *, uint64_t))(v123 + 16))(v131, v132, v124);
      BOOL v66 = v54;
      swift_retain_n();
      id v115 = v66;
      uint64_t v67 = Logger.logObject.getter();
      os_log_type_t v68 = static os_log_type_t.default.getter();
      int v69 = v68;
      uint64_t v137 = v67;
      BOOL v70 = os_log_type_enabled(v67, v68);
      uint64_t v71 = v121;
      if (v70)
      {
        uint64_t v72 = swift_slowAlloc();
        unint64_t v114 = (NSObject **)swift_slowAlloc();
        uint64_t v147 = v114;
        *(_DWORD *)uint64_t v72 = 136315906;
        LODWORD(v111) = v69;
        uint64_t v73 = *(int *)(v64 + 48);
        uint64_t v74 = (char *)v71 + v73;
        uint64_t v75 = *v62;
        *uint64_t v71 = *v62;
        uint64_t v76 = v142;
        v136((char *)v71 + v73, (uint64_t)v62 + v73, v142);
        id v77 = [v75 uniqueIdentifier];
        v127(v74, v76);
        char v78 = *(void (**)(void **, uint64_t))(v143 + 8);
        unint64_t v138 = (char *)((v143 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
        v78(v62, v144);
        char v79 = (void (*)(char *, uint64_t))v78;
        uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v82 = v81;

        uint64_t v146 = sub_100010680(v80, v82, (uint64_t *)&v147);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v79(v128, v144);
        char v83 = (void (*)(void **, uint64_t))v79;
        *(_WORD *)(v72 + 12) = 2080;
        uint64_t v128 = (char *)(v72 + 14);
        uint64_t v84 = *(int *)(v144 + 48);
        uint64_t v85 = (char *)v71 + v84;
        unint64_t v86 = v129;
        char v87 = (char *)v129 + v84;
        uint64_t v88 = *v129;
        *uint64_t v71 = *v129;
        v136((char *)v71 + v84, (uint64_t)v87, v76);
        id v89 = [v88 peerAddress];
        unint64_t v90 = WiFiMACAddress.wifiAddress.getter();

        uint64_t v91 = v76;
        uint64_t v64 = v144;
        v127(v85, v91);
        v83(v86, v64);
        unint64_t v92 = v90 & 0xFFFFFFFFFFFFLL;
        uint64_t v71 = v121;
        uint64_t v93 = WiFiAddress.description.getter(v92);
        uint64_t v146 = sub_100010680(v93, v94, (uint64_t *)&v147);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v83((void **)v130, v64);
        uint64_t v65 = v124;
        *(_WORD *)(v72 + 22) = 2080;
        uint64_t v95 = type metadata accessor for AWDLPeer(0);
        uint64_t v96 = swift_projectBox();
        swift_beginAccess();
        uint64_t v97 = WiFiAddress.description.getter(*(unsigned __int16 *)(v96 + *(int *)(v95 + 20)) | ((unint64_t)*(unsigned int *)(v96 + *(int *)(v95 + 20) + 2) << 16));
        uint64_t v145 = sub_100010680(v97, v98, (uint64_t *)&v147);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v72 + 32) = 2080;
        uint64_t v99 = v131;
        uint64_t v100 = DispatchTimeInterval.description.getter();
        uint64_t v145 = sub_100010680(v100, v101, (uint64_t *)&v147);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        char v102 = *(void (**)(char *, uint64_t))(v123 + 8);
        v102(v99, v65);
        uint64_t v103 = v137;
        _os_log_impl((void *)&_mh_execute_header, v137, (os_log_type_t)v111, "Cleared responder traffic registration for %s from %s (new registration from %s while in recovery for %s)", (uint8_t *)v72, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v104 = *(void (**)(void **, uint64_t))(v143 + 8);
        unint64_t v138 = (char *)((v143 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
        v104(v129, v64);
        v104(v62, v64);

        v104((void **)v128, v64);
        v104((void **)v130, v64);
        swift_release_n();
        char v102 = *(void (**)(char *, uint64_t))(v63 + 8);
        v102(v131, v65);
      }
      unint64_t v105 = (char *)v71 + *(int *)(v64 + 48);
      uint64_t v106 = v115;
      *uint64_t v71 = v115;
      uint64_t v107 = v142;
      v136(v105, (uint64_t)v139, v142);
      uint64_t v108 = v141;
      uint64_t v109 = (uint64_t)v118;
      (*(void (**)(char *, char *, uint64_t))(v141 + 32))(v118, v105, v107);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v108 + 56))(v109, 0, 1, v107);
      sub_1003885BC(v106, v109);
      (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v109, v120);
      v102(v132, v65);
      ((void (*)(char *, uint64_t))v116)(v125, v133);
      (*(void (**)(char *, uint64_t))(v143 + 8))(v134, v64);
      LOBYTE(v39) = v112;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v143 + 8))(v134, v144);
  }
  return (v39 & 1) == 0;
}

void sub_1003885BC(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v18 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v10, v6);
    sub_10039ACB4(a1, (uint64_t)v13, 0);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v6);
  }
  uint64_t v14 = *(void **)(v3 + *(void *)(*(void *)v3 + 752));
  if (v14)
  {
    sub_10006F314(0, (unint64_t *)&unk_100484A40);
    id v15 = a1;
    id v16 = v14;
    char v17 = static NSObject.== infix(_:_:)();

    if (v17) {
      sub_1003927B4(v15);
    }
  }
}

BOOL sub_10038883C(id *a1, uint64_t a2)
{
  id v3 = [*a1 peerAddress];
  unint64_t v4 = WiFiMACAddress.wifiAddress.getter();

  swift_beginAccess();
  uint64_t v5 = type metadata accessor for AWDLPeer(0);
  return static NANClusterChangeEvent.__derived_struct_equals(_:_:)(v4 & 0xFFFFFFFFFFFFLL, *(unsigned __int16 *)(a2 + *(int *)(v5 + 20)) | ((unint64_t)*(unsigned int *)(a2+ *(int *)(v5 + 20)+ 2) << 16));
}

void sub_1003888D8(id *a1)
{
  [*a1 copy];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_10006F314(0, (unint64_t *)&unk_100484A40);
  swift_dynamicCast();
  uint64_t v2 = *(void *)AWDLTrafficRegistrationOptions.forceUnicastMasterIndicationFrame.unsafeMutableAddressor();
  unint64_t v3 = (unint64_t)[v35 options];
  if ((v2 & ~v3) != 0) {
    uint64_t v4 = v2;
  }
  else {
    uint64_t v4 = 0;
  }
  [v35 setOptions:v4 | v3];
  sub_100388EAC(v35, 1);
  if (v1)
  {
    uint64_t v5 = v35;
    swift_retain();
    swift_errorRetain();
    id v6 = v5;
    swift_retain();
    swift_errorRetain();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      os_log_type_t type = v8;
      uint64_t v9 = swift_slowAlloc();
      uint64_t v31 = (void *)swift_slowAlloc();
      uint64_t v35 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315650;
      id v10 = [v6 uniqueIdentifier];
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v13 = v12;

      sub_100010680(v11, v13, (uint64_t *)&v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 12) = 2080;
      uint64_t v14 = type metadata accessor for AWDLPeer(0);
      uint64_t v15 = swift_projectBox();
      swift_beginAccess();
      uint64_t v16 = WiFiAddress.description.getter(*(unsigned __int16 *)(v15 + *(int *)(v14 + 20)) | ((unint64_t)*(unsigned int *)(v15 + *(int *)(v14 + 20) + 2) << 16));
      sub_100010680(v16, v17, (uint64_t *)&v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 22) = 2112;
      swift_errorRetain();
      uint64_t v34 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v31 = v34;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, type, "Failed to recover the traffic registration for %s to %s: %@", (uint8_t *)v9, 0x20u);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {

      swift_errorRelease();
      swift_release_n();

      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    uint64_t v18 = v35;
    swift_retain_n();
    id v19 = v18;
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      os_log_type_t v33 = v21;
      uint64_t v22 = swift_slowAlloc();
      uint64_t v35 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315394;
      id v23 = [v19 uniqueIdentifier];
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v26 = v25;

      sub_100010680(v24, v26, (uint64_t *)&v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2080;
      uint64_t v27 = type metadata accessor for AWDLPeer(0);
      uint64_t v28 = swift_projectBox();
      swift_beginAccess();
      uint64_t v29 = WiFiAddress.description.getter(*(unsigned __int16 *)(v28 + *(int *)(v27 + 20)) | ((unint64_t)*(unsigned int *)(v28 + *(int *)(v27 + 20) + 2) << 16));
      sub_100010680(v29, v30, (uint64_t *)&v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v33, "Successfully recovered registration for %s to %s", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }
  }
}

void sub_100388EAC(void *a1, char a2)
{
  id v4 = [a1 uniqueIdentifier];
  unint64_t v55 = (unint64_t)[a1 options];
  id v5 = [a1 uniqueIdentifier];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0) {
      goto LABEL_11;
    }
  }
  id v12 = AWDLTrafficRegistrationServiceSidecar;

  uint64_t v13 = *(void *)AWDLTrafficRegistrationOptions.remoteCamera.unsafeMutableAddressor();
  if ((v13 & ~v55) == 0) {
    uint64_t v13 = 0;
  }
  v55 |= v13;
  id v4 = v12;
LABEL_11:
  id v14 = [a1 uniqueIdentifier];
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v16;
  if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0) {
      goto LABEL_18;
    }
  }
  id v20 = AWDLTrafficRegistrationServiceSidecar;

  uint64_t v21 = *(void *)AWDLTrafficRegistrationOptions.tvRemoteCamera.unsafeMutableAddressor();
  if ((v21 & ~v55) == 0) {
    uint64_t v21 = 0;
  }
  v55 |= v21;
  id v4 = v20;
LABEL_18:
  id v22 = [a1 uniqueIdentifier];
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v25 = v24;
  if (v23 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v25 == v26)
  {

    swift_bridgeObjectRelease_n();
    uint64_t v27 = (void *)AWDLTrafficRegistrationServiceSidecar;
  }
  else
  {
    char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v27 = (void *)AWDLTrafficRegistrationServiceSidecar;
    if ((v28 & 1) == 0) {
      goto LABEL_25;
    }
  }
  id v29 = v27;

  uint64_t v30 = *(void *)AWDLTrafficRegistrationOptions.remoteScreen.unsafeMutableAddressor();
  if ((v30 & ~v55) == 0) {
    uint64_t v30 = 0;
  }
  v55 |= v30;
  id v4 = v29;
LABEL_25:
  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v33 = v32;
  char v53 = a2;
  uint64_t v52 = v4;
  if (v31 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v33 == v34)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v35 & 1) == 0)
    {
LABEL_33:
      unint64_t v54 = 0;
      unsigned __int8 v44 = 1;
      goto LABEL_34;
    }
  }
  swift_unownedRetainStrong();
  uint64_t v36 = sub_1003366E8();
  uint64_t v38 = v37;
  swift_release();
  if (!v38) {
    goto LABEL_33;
  }
  v56[0] = v36;
  v56[1] = v38;
  swift_bridgeObjectRetain();
  sub_100393148((unint64_t *)v56, a1, &v57);
  swift_bridgeObjectRelease_n();
  unint64_t v54 = v57 | ((unint64_t)BYTE1(v57) << 8) | ((unint64_t)BYTE2(v57) << 16) | ((unint64_t)BYTE3(v57) << 24) | ((unint64_t)BYTE4(v57) << 32) | ((unint64_t)BYTE5(v57) << 40);
  int v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v39, v40))
  {
    uint64_t v41 = (uint8_t *)swift_slowAlloc();
    v56[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v41 = 136315138;
    uint64_t v42 = WiFiAddress.description.getter(v54);
    uint64_t v57 = sub_100010680(v42, v43, v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "Using SSID hash for traffic registration: %s", v41, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  unsigned __int8 v44 = 0;
LABEL_34:
  id v45 = [a1 peerAddress];
  unint64_t v46 = WiFiMACAddress.wifiAddress.getter();

  id v47 = [a1 preferredChannel];
  id v48 = [a1 secondaryPreferredChannel];
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v50 = *(void (**)(void *, unint64_t, void, id, id, unint64_t, unint64_t, void, uint64_t, uint64_t))(AssociatedConformanceWitness + 72);
  uint64_t v51 = swift_checkMetadataState();
  LOBYTE(v56[0]) = v44;
  v50(v52, v46 & 0xFFFFFFFFFFFFLL, 0, v47, v48, v55, v54 & 0xFFFFFFFFFFFFLL | ((unint64_t)v44 << 48), v53 & 1, v51, AssociatedConformanceWitness);
}

uint64_t sub_10038951C(void **a1, char *a2)
{
  char v35 = a2;
  sub_10006F314(255, (unint64_t *)&unk_100484A40);
  uint64_t v3 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v36 = *(void *)(TupleTypeMetadata2 - 8);
  __chkstk_darwin();
  uint64_t v34 = (void **)((char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = __chkstk_darwin();
  uint64_t v8 = (void *)((char *)v31 - v7);
  uint64_t v9 = *(int *)(v6 + 48);
  id v10 = (char *)v31 + v9 - v7;
  uint64_t v32 = (char *)a1 + v9;
  uint64_t v33 = a1;
  char v11 = *a1;
  *(void *)((char *)v31 - v7) = *a1;
  uint64_t v12 = *(void *)(v3 - 8);
  uint64_t v13 = *(char **)(v12 + 16);
  ((void (*)(char *))v13)(v10);
  id v14 = [v11 peerAddress];
  unint64_t v15 = WiFiMACAddress.wifiAddress.getter();

  uint64_t v16 = v35;
  swift_beginAccess();
  uint64_t v17 = type metadata accessor for AWDLPeer(0);
  LOBYTE(v15) = static NANClusterChangeEvent.__derived_struct_equals(_:_:)(v15 & 0xFFFFFFFFFFFFLL, *(unsigned __int16 *)&v16[*(int *)(v17 + 20)] | ((unint64_t)*(unsigned int *)&v16[*(int *)(v17 + 20) + 2] << 16));
  v31[0] = *(void *)(v12 + 8);
  v31[1] = v12 + 8;
  ((void (*)(char *, uint64_t))v31[0])(v10, v3);
  uint64_t v18 = TupleTypeMetadata2;
  uint64_t v19 = *(int *)(TupleTypeMetadata2 + 48);
  id v20 = v34;
  uint64_t v21 = (char *)v34 + v19;
  id v22 = v32;
  uint64_t v23 = *v33;
  *uint64_t v34 = *v33;
  uint64_t v33 = (void **)v3;
  char v35 = v13;
  ((void (*)(char *, char *, uint64_t))v13)(v21, v22, v3);
  if (v15)
  {
    uint64_t v24 = (char *)v8 + *(int *)(v18 + 48);
    *uint64_t v8 = v23;
    uint64_t v25 = v33;
    ((void (*)(char *, char *, void **))v35)(v24, v21, v33);
    id v26 = [v23 uniqueIdentifier];
    char v27 = AWDLTrafficRegistrationService.showsInfraDisconnectUINotifications.getter();

    (*(void (**)(void **, uint64_t))(v36 + 8))(v20, v18);
    ((void (*)(char *, void **))v31[0])(v24, v25);
  }
  else
  {
    char v28 = *(void (**)(void **, uint64_t))(v36 + 8);
    id v29 = v23;
    v28(v20, v18);
    char v27 = 0;
  }
  return v27 & 1;
}

uint64_t sub_10038982C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init(subsystem:category:)();
  if (a1)
  {
    swift_errorRetain();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      v16[0] = v2;
      id v10 = (void *)v9;
      *(_DWORD *)uint64_t v8 = 138412290;
      swift_errorRetain();
      uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
      v16[1] = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v10 = v11;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to add notification request: %@", v8, 0xCu);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      uint64_t v2 = v16[0];
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      id v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Successfully added notification request", v14, 2u);
      swift_slowDealloc();
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_100389AEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  __int16 v5 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v6 = (void **)(a2 + *(void *)(*(void *)a2 + 728));
  __int16 v7 = *(unsigned __int8 *)(a1 + 17);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v6;
  uint64_t v24 = *v6;
  *uint64_t v6 = (void *)0x8000000000000000;
  __int16 v10 = v5 | (v7 << 8);
  unint64_t v12 = sub_10039FA40(v4, v3, v10);
  uint64_t v13 = v9[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_11;
  }
  char v2 = v11;
  if (v9[3] >= v15)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_12;
    }
  }
  else
  {
    sub_10029473C(v15, isUniquelyReferenced_nonNull_native);
    uint64_t v9 = v24;
    unint64_t v16 = sub_10039FA40(v4, v3, v10);
    if ((v2 & 1) != (v17 & 1))
    {
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    unint64_t v12 = v16;
  }
  while (1)
  {
    *uint64_t v6 = v9;
    swift_bridgeObjectRelease();
    uint64_t v18 = *v6;
    if ((v2 & 1) == 0)
    {
      sub_1002965F0(v12, v4, v3, v10, 0, *v6);
      swift_bridgeObjectRetain();
    }
    uint64_t v19 = v18[7];
    uint64_t v20 = *(void *)(v19 + 8 * v12);
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (!v21) {
      break;
    }
LABEL_11:
    __break(1u);
LABEL_12:
    sub_1003A494C();
    uint64_t v9 = v24;
  }
  *(void *)(v19 + 8 * v12) = v22;
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100389C90(uint64_t a1)
{
  uint64_t v345 = a1;
  uint64_t v2 = *v1;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v311 = *(void *)(v3 - 8);
  uint64_t v312 = v3;
  __chkstk_darwin();
  os_log_type_t v310 = (char *)&v308 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v324 = type metadata accessor for AWDLIdleActivity(0);
  __chkstk_darwin();
  uint64_t v318 = (uint64_t)&v308 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v317 = (uint64_t)&v308 - v6;
  __chkstk_darwin();
  uint64_t v319 = (uint64_t)&v308 - v7;
  __chkstk_darwin();
  uint64_t v333 = (uint64_t)&v308 - v8;
  __chkstk_darwin();
  uint64_t v349 = (uint64_t)&v308 - v9;
  unint64_t v353 = v1;
  uint64_t v335 = *(void *)(v2 + 416);
  uint64_t v10 = *(void *)(v335 + 8);
  uint64_t v334 = *(void *)(v2 + 408);
  swift_getAssociatedTypeWitness();
  uint64_t v313 = v10;
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  os_log_t v355 = 0;
  uint64_t v11 = type metadata accessor for Preferences();
  uint64_t v330 = *(void *)(v11 - 8);
  uint64_t v331 = v11;
  __chkstk_darwin();
  unint64_t v329 = (char *)&v308 - v12;
  sub_100010BCC(&qword_10047F2A8);
  __chkstk_darwin();
  uint64_t v343 = (uint64_t)&v308 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v328 = (uint64_t)&v308 - v14;
  sub_100010BCC(&qword_10047DB90);
  __chkstk_darwin();
  uint64_t v325 = (char *)&v308 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchTimeInterval();
  uint64_t v352 = *(void *)(v16 - 8);
  uint64_t v17 = v352;
  __chkstk_darwin();
  uint64_t v314 = (uint64_t)&v308 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v332 = (char *)&v308 - v19;
  __chkstk_darwin();
  uint64_t v347 = (char *)&v308 - v20;
  __chkstk_darwin();
  os_log_type_t v348 = (char *)&v308 - v21;
  __chkstk_darwin();
  unint64_t v322 = (char *)&v308 - v22;
  __chkstk_darwin();
  uint64_t v321 = (char *)&v308 - v23;
  __chkstk_darwin();
  uint64_t v25 = (char *)&v308 - v24;
  __chkstk_darwin();
  char v27 = (char *)&v308 - v26;
  __chkstk_darwin();
  id v29 = (char *)&v308 - v28;
  __chkstk_darwin();
  uint64_t v31 = (char *)&v308 - v30;
  __chkstk_darwin();
  uint64_t v33 = (char *)&v308 - v32;
  __chkstk_darwin();
  BOOL v367 = 0;
  *(uint64_t *)((char *)&v308 - v34) = 300;
  uint64_t v35 = enum case for DispatchTimeInterval.seconds(_:);
  uint64_t v36 = *(void (**)(void))(v17 + 104);
  unint64_t v346 = (char *)&v308 - v34;
  v36();
  *(void *)uint64_t v33 = 300;
  unint64_t v351 = v33;
  ((void (*)(char *, uint64_t, uint64_t))v36)(v33, v35, v16);
  *(void *)uint64_t v31 = 300;
  unint64_t v342 = v31;
  ((void (*)(char *, uint64_t, uint64_t))v36)(v31, v35, v16);
  *(void *)id v29 = 7200;
  uint64_t v341 = v29;
  ((void (*)(char *, uint64_t, uint64_t))v36)(v29, v35, v16);
  os_log_t v37 = v355;
  *(void *)char v27 = v355;
  uint64_t v350 = v27;
  ((void (*)(char *, uint64_t, uint64_t))v36)(v27, v35, v16);
  *(void *)uint64_t v25 = v37;
  uint64_t v38 = v37;
  unint64_t v344 = v25;
  unsigned int v338 = v35;
  uint64_t v39 = v35;
  uint64_t v40 = v352;
  uint64_t v340 = v16;
  uint64_t v336 = v36;
  uint64_t v337 = v17 + 104;
  ((void (*)(char *, uint64_t, uint64_t))v36)(v25, v39, v16);
  sub_100375308();
  sub_100309184(&v362);
  swift_release();
  uint64_t v41 = type metadata accessor for AWDLDiscoveryEngine.Browse();
  unint64_t v42 = sub_1000171BC();
  LOBYTE(v37) = Dictionary.Keys.isEmpty.getter();
  swift_bridgeObjectRelease();
  uint64_t v354 = v42;
  if ((v37 & 1) == 0)
  {
    sub_100375308();
    sub_10030921C(&v362);
    swift_release();
    uint64_t v43 = *(void *)(v362 + 16);
    swift_bridgeObjectRelease();
    if (v43)
    {
      unsigned __int8 v44 = v346;
      uint64_t v45 = v340;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v346, v340);
      *(void *)unsigned __int8 v44 = 3600;
      ((void (*)(char *, void, uint64_t))v336)(v44, v338, v45);
      sub_100375308();
      sub_100309184(&v362);
      swift_release();
      v361[0] = v362;
      uint64_t v339 = v41;
      uint64_t v46 = type metadata accessor for Dictionary.Keys();
      uint64_t WitnessTable = swift_getWitnessTable();
      uint64_t v49 = sub_1003741D0((void (*)(char *, char *))sub_1003ABC48, 0, v46, (uint64_t)&type metadata for String, (uint64_t)&type metadata for Never, WitnessTable, (uint64_t)&protocol witness table for Never, v48);
      os_log_t v355 = v38;
      swift_bridgeObjectRelease();
      uint64_t v362 = v49;
      uint64_t v50 = sub_100010BCC((uint64_t *)&unk_100488360);
      char v327 = (void *)sub_10000F9CC(&qword_100487D40, (uint64_t *)&unk_100488360);
      uint64_t v51 = BidirectionalCollection<>.joined(separator:)();
      char v53 = v52;
      swift_bridgeObjectRelease();
      uint64_t v362 = 0x203A6573776F7242;
      unint64_t v363 = 0xE800000000000000;
      v54._uint64_t countAndFlagsBits = v51;
      v54._object = v53;
      String.append(_:)(v54);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v55._uint64_t countAndFlagsBits = 0x6974726576644120;
      v55._object = (void *)0xEC000000203A6573;
      String.append(_:)(v55);
      swift_bridgeObjectRelease();
      uint64_t v326 = v362;
      unint64_t v56 = v363;
      sub_100375308();
      sub_10030921C(&v362);
      swift_release();
      uint64_t v57 = v362;
      int64_t v58 = *(void *)(v362 + 16);
      if (v58)
      {
        unint64_t v320 = v56;
        uint64_t v323 = v50;
        v361[0] = (uint64_t)_swiftEmptyArrayStorage;
        sub_10008345C(0, v58, 0);
        uint64_t v59 = (void *)v361[0];
        uint64_t v60 = (uint64_t *)(v57 + 40);
        do
        {
          uint64_t v61 = *(v60 - 1);
          uint64_t v62 = *v60;
          v361[0] = (uint64_t)v59;
          unint64_t v64 = v59[2];
          unint64_t v63 = v59[3];
          swift_bridgeObjectRetain();
          if (v64 >= v63 >> 1)
          {
            sub_10008345C(v63 > 1, v64 + 1, 1);
            uint64_t v59 = (void *)v361[0];
          }
          v60 += 3;
          v59[2] = v64 + 1;
          uint64_t v65 = &v59[2 * v64];
          v65[4] = v61;
          v65[5] = v62;
          --v58;
        }
        while (v58);
        swift_bridgeObjectRelease();
        uint64_t v40 = v352;
        unint64_t v56 = v320;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v59 = _swiftEmptyArrayStorage;
      }
      uint64_t v309 = 0xD00000000000002ELL;
      uint64_t v362 = (uint64_t)v59;
      uint64_t v115 = BidirectionalCollection<>.joined(separator:)();
      uint64_t v117 = v116;
      swift_bridgeObjectRelease();
      uint64_t v362 = v326;
      unint64_t v363 = v56;
      swift_bridgeObjectRetain();
      v118._uint64_t countAndFlagsBits = v115;
      v118._object = v117;
      String.append(_:)(v118);
      swift_bridgeObjectRelease();
LABEL_28:
      swift_bridgeObjectRelease();
      v368[0] = v362;
      v368[1] = v363;
      BOOL v367 = 0;
      type metadata accessor for P2PTimer();
      uint64_t v123 = (uint64_t)v325;
      variable initialization expression of AWDLPeer.lastUpdated();
      uint64_t v124 = type metadata accessor for DispatchTime();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v124 - 8) + 56))(v123, 0, 1, v124);
      uint64_t v125 = (uint64_t)v353 + *(void *)(*v353 + 616);
      swift_beginAccess();
      sub_10006D1A4(v123, v125, &qword_10047DB90);
      swift_endAccess();
      char v327 = (void *)0x80000001003E1FC0;
      uint64_t v38 = v355;
      goto LABEL_29;
    }
  }
  sub_100375308();
  sub_100309184(&v362);
  swift_release();
  char v66 = Dictionary.Keys.isEmpty.getter();
  swift_bridgeObjectRelease();
  sub_100375308();
  if (v66)
  {
    sub_10030921C(&v362);
    swift_release();
    uint64_t v67 = *(void *)(v362 + 16);
    swift_bridgeObjectRelease();
    os_log_type_t v68 = v346;
    if (!v67)
    {
      uint64_t v309 = 0xD00000000000002ELL;
      strcpy((char *)v368, "ActiveSocket");
      BYTE5(v368[1]) = 0;
      HIWORD(v368[1]) = -5120;
      BOOL v367 = (sub_100379564((void (*)(uint64_t))sub_100379310, 300) & 1) == 0;
      char v327 = (void *)0x80000001003E1FC0;
      goto LABEL_29;
    }
    uint64_t v339 = v41;
    uint64_t v69 = v340;
    (*(void (**)(char *, uint64_t))(v40 + 8))(v346, v340);
    *(void *)os_log_type_t v68 = 3600;
    ((void (*)(char *, void, uint64_t))v336)(v68, v338, v69);
    sub_100375308();
    sub_10030921C(&v362);
    swift_release();
    uint64_t v70 = v362;
    uint64_t v71 = v40;
    int64_t v72 = *(void *)(v362 + 16);
    if (v72)
    {
      v361[0] = (uint64_t)_swiftEmptyArrayStorage;
      sub_10008345C(0, v72, 0);
      uint64_t v73 = (void *)v361[0];
      uint64_t v74 = (uint64_t *)(v70 + 40);
      do
      {
        uint64_t v75 = *(v74 - 1);
        uint64_t v76 = *v74;
        v361[0] = (uint64_t)v73;
        unint64_t v78 = v73[2];
        unint64_t v77 = v73[3];
        swift_bridgeObjectRetain();
        if (v78 >= v77 >> 1)
        {
          sub_10008345C(v77 > 1, v78 + 1, 1);
          uint64_t v73 = (void *)v361[0];
        }
        v74 += 3;
        v73[2] = v78 + 1;
        char v79 = &v73[2 * v78];
        v79[4] = v75;
        uint64_t v79[5] = v76;
        --v72;
      }
      while (v72);
      swift_bridgeObjectRelease();
      uint64_t v40 = v352;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v73 = _swiftEmptyArrayStorage;
      uint64_t v40 = v71;
    }
    uint64_t v309 = 0xD00000000000002ELL;
    uint64_t v362 = (uint64_t)v73;
    sub_100010BCC((uint64_t *)&unk_100488360);
    sub_10000F9CC(&qword_100487D40, (uint64_t *)&unk_100488360);
    uint64_t v119 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v121 = v120;
    swift_bridgeObjectRelease();
    uint64_t v362 = 0x7369747265766441;
    unint64_t v363 = 0xEB00000000203A65;
    v122._uint64_t countAndFlagsBits = v119;
    v122._object = v121;
    String.append(_:)(v122);
    goto LABEL_28;
  }
  sub_100309184(v361);
  swift_release();
  uint64_t v360 = v361[0];
  uint64_t v80 = DNSRecords.Identifier.airplay.unsafeMutableAddressor();
  unint64_t v81 = *((void *)v80 + 1);
  char v82 = v80[16];
  char v83 = v80[17];
  uint64_t v362 = *(void *)v80;
  unint64_t v363 = v81;
  LOBYTE(v364) = v82;
  BYTE1(v364) = v83;
  uint64_t v339 = v41;
  uint64_t v84 = type metadata accessor for Dictionary.Keys();
  swift_getWitnessTable();
  sub_100127494();
  char v85 = Sequence<>.contains(_:)();
  swift_bridgeObjectRelease();
  unint64_t v86 = (uint64_t *)v346;
  if (v85) {
    goto LABEL_21;
  }
  sub_100375308();
  sub_100309184(v361);
  swift_release();
  uint64_t v360 = v361[0];
  char v87 = DNSRecords.Identifier.airdrop.unsafeMutableAddressor();
  unint64_t v88 = *((void *)v87 + 1);
  char v89 = v87[16];
  char v90 = v87[17];
  uint64_t v362 = *(void *)v87;
  unint64_t v363 = v88;
  LOBYTE(v364) = v89;
  BYTE1(v364) = v90;
  char v91 = Sequence<>.contains(_:)();
  swift_bridgeObjectRelease();
  if (v91) {
    goto LABEL_21;
  }
  sub_100375308();
  sub_100309184(v361);
  swift_release();
  uint64_t v360 = v361[0];
  unint64_t v92 = DNSRecords.Identifier.companionLink.unsafeMutableAddressor();
  unint64_t v93 = v92[1];
  char v94 = *((unsigned char *)v92 + 16);
  char v95 = *((unsigned char *)v92 + 17);
  uint64_t v362 = *v92;
  unint64_t v363 = v93;
  LOBYTE(v364) = v94;
  BYTE1(v364) = v95;
  char v96 = Sequence<>.contains(_:)();
  swift_bridgeObjectRelease();
  if (v96) {
    goto LABEL_21;
  }
  sub_100375308();
  sub_100309184(v361);
  swift_release();
  uint64_t v360 = v361[0];
  uint64_t v97 = DNSRecords.Identifier.remoteDisplay.unsafeMutableAddressor();
  unint64_t v98 = *((void *)v97 + 1);
  char v99 = v97[16];
  char v100 = v97[17];
  uint64_t v362 = *(void *)v97;
  unint64_t v363 = v98;
  LOBYTE(v364) = v99;
  BYTE1(v364) = v100;
  char v101 = Sequence<>.contains(_:)();
  swift_bridgeObjectRelease();
  if (v101)
  {
LABEL_21:
    uint64_t v102 = v340;
    (*(void (**)(uint64_t *, uint64_t))(v352 + 8))(v86, v340);
    uint64_t v103 = 600;
  }
  else
  {
    sub_100375308();
    sub_100309184(v361);
    swift_release();
    uint64_t v360 = v361[0];
    uint64_t v252 = DNSRecords.Identifier.assistedDiscovery.unsafeMutableAddressor();
    unint64_t v253 = *((void *)v252 + 1);
    char v254 = v252[16];
    char v255 = v252[17];
    uint64_t v362 = *(void *)v252;
    unint64_t v363 = v253;
    LOBYTE(v364) = v254;
    BYTE1(v364) = v255;
    char v256 = Sequence<>.contains(_:)();
    swift_bridgeObjectRelease();
    uint64_t v102 = v340;
    (*(void (**)(uint64_t *, uint64_t))(v352 + 8))(v86, v340);
    uint64_t v103 = 900;
    if (v256) {
      uint64_t v103 = 600;
    }
  }
  *unint64_t v86 = v103;
  ((void (*)(uint64_t *, void, uint64_t))v336)(v86, v338, v102);
  sub_100375308();
  sub_100309184(&v362);
  swift_release();
  v361[0] = v362;
  uint64_t v104 = swift_getWitnessTable();
  uint64_t v106 = sub_1003741D0((void (*)(char *, char *))sub_10038DE88, 0, v84, (uint64_t)&type metadata for String, (uint64_t)&type metadata for Never, v104, (uint64_t)&protocol witness table for Never, v105);
  swift_bridgeObjectRelease();
  uint64_t v362 = v106;
  sub_100010BCC((uint64_t *)&unk_100488360);
  sub_10000F9CC(&qword_100487D40, (uint64_t *)&unk_100488360);
  uint64_t v107 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v109 = v108;
  swift_bridgeObjectRelease();
  uint64_t v362 = 0x203A6573776F7242;
  unint64_t v363 = 0xE800000000000000;
  v110._uint64_t countAndFlagsBits = v107;
  v110._object = v109;
  String.append(_:)(v110);
  unint64_t v111 = v353;
  swift_bridgeObjectRelease();
  v368[0] = v362;
  v368[1] = v363;
  BOOL v367 = 1;
  type metadata accessor for P2PTimer();
  uint64_t v112 = (uint64_t)v325;
  variable initialization expression of AWDLPeer.lastUpdated();
  uint64_t v113 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v113 - 8) + 56))(v112, 0, 1, v113);
  uint64_t v114 = (uint64_t)v111 + *(void *)(*v111 + 616);
  swift_beginAccess();
  sub_10006D1A4(v112, v114, &qword_10047DB90);
  swift_endAccess();
  uint64_t v309 = 0;
  char v327 = (void *)0xE000000000000000;
  uint64_t v40 = v352;
LABEL_29:
  sub_100010BCC(&qword_100487090);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003B2760;
  uint64_t v127 = DNSRecords.Identifier.dfsMonitoring.unsafeMutableAddressor();
  uint64_t v128 = *((void *)v127 + 1);
  char v129 = v127[16];
  char v130 = v127[17];
  *(void *)(inited + 32) = *(void *)v127;
  *(void *)(inited + 40) = v128;
  *(unsigned char *)(inited + 48) = v129;
  *(unsigned char *)(inited + 49) = v130;
  swift_bridgeObjectRetain();
  uint64_t v131 = DNSRecords.Identifier.testAWDLService.unsafeMutableAddressor();
  uint64_t v132 = *((void *)v131 + 1);
  char v133 = v131[16];
  char v134 = v131[17];
  *(void *)(inited + 56) = *(void *)v131;
  *(void *)(inited + 64) = v132;
  *(unsigned char *)(inited + 72) = v133;
  *(unsigned char *)(inited + 73) = v134;
  swift_bridgeObjectRetain();
  uint64_t v135 = DNSRecords.Identifier.atpAWDLService.unsafeMutableAddressor();
  uint64_t v136 = *((void *)v135 + 1);
  char v137 = v135[16];
  char v138 = v135[17];
  *(void *)(inited + 80) = *(void *)v135;
  *(void *)(inited + 88) = v136;
  *(unsigned char *)(inited + 96) = v137;
  *(unsigned char *)(inited + 97) = v138;
  swift_bridgeObjectRetain();
  uint64_t v139 = sub_1003AAFB4(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  sub_100375308();
  sub_100309184(&v362);
  swift_release();
  v361[0] = v362;
  __chkstk_darwin();
  *(&v308 - 2) = v139;
  uint64_t v140 = type metadata accessor for Dictionary.Keys();
  swift_getWitnessTable();
  uint64_t v315 = v140;
  LOBYTE(inited) = Sequence.contains(where:)();
  unint64_t v316 = v38;
  swift_bridgeObjectRelease();
  if (inited)
  {
    swift_bridgeObjectRelease();
    LODWORD(v339) = 1;
    uint64_t v141 = v347;
    if (!v367) {
      goto LABEL_45;
    }
  }
  else
  {
    uint64_t v354 = v139;
    sub_100375308();
    sub_10030921C(v361);
    swift_release();
    unint64_t v142 = *(void *)(v361[0] + 16);
    LODWORD(v339) = v142 != 0;
    uint64_t v141 = v347;
    if (v142)
    {
      uint64_t v323 = v361[0] + 32;
      uint64_t v143 = v354;
      os_log_t v355 = v354 + 7;
      uint64_t v308 = v361[0];
      swift_bridgeObjectRetain();
      uint64_t v144 = 0;
      unint64_t v320 = v142;
      do
      {
        if (v143[2].isa)
        {
          uint64_t v145 = v323 + 24 * v144;
          uint64_t v147 = *(void *)v145;
          uint64_t v146 = *(void *)(v145 + 8);
          __int16 v148 = *(unsigned __int8 *)(v145 + 16);
          int v149 = *(unsigned __int8 *)(v145 + 17);
          Hasher.init(_seed:)();
          String.lowercased()();
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          LODWORD(v326) = v149;
          Hasher._combine(_:)(v149);
          Swift::Int v150 = Hasher._finalize()();
          uint64_t v151 = -1 << LOBYTE(v143[4].isa);
          unint64_t v152 = v150 & ~v151;
          if ((*(unint64_t *)((char *)&v355->isa + ((v152 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v152))
          {
            uint64_t v153 = (uint64_t)v143[6].isa + 24 * v152;
            uint64_t v155 = *(void *)v153;
            uint64_t v154 = *(void *)(v153 + 8);
            __int16 v156 = v148;
            __int16 v157 = *(unsigned __int8 *)(v153 + 16) | (*(unsigned __int8 *)(v153 + 17) << 8);
            __int16 v158 = v156 | ((_WORD)v326 << 8);
            swift_bridgeObjectRetain();
            LOBYTE(v155) = static DNSRecords.Identifier.== infix(_:_:)(v155, v154, v157, v147, v146, v158);
            swift_bridgeObjectRelease();
            if (v155)
            {
LABEL_42:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v40 = v352;
              uint64_t v141 = v347;
              if (!v367) {
                goto LABEL_45;
              }
              goto LABEL_47;
            }
            uint64_t v159 = ~v151;
            while (1)
            {
              unint64_t v152 = (v152 + 1) & v159;
              uint64_t v143 = v354;
              if (((*(unint64_t *)((char *)&v355->isa + ((v152 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v152) & 1) == 0) {
                break;
              }
              uint64_t v160 = (uint64_t)v354[6].isa + 24 * v152;
              uint64_t v161 = *(void *)v160;
              uint64_t v162 = *(void *)(v160 + 8);
              __int16 v163 = *(unsigned __int8 *)(v160 + 16) | (*(unsigned __int8 *)(v160 + 17) << 8);
              swift_bridgeObjectRetain();
              LOBYTE(v161) = static DNSRecords.Identifier.== infix(_:_:)(v161, v162, v163, v147, v146, v158);
              swift_bridgeObjectRelease();
              if (v161) {
                goto LABEL_42;
              }
            }
          }
          swift_bridgeObjectRelease();
          uint64_t v40 = v352;
          uint64_t v141 = v347;
          unint64_t v142 = v320;
        }
        ++v144;
      }
      while (v144 != v142);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      LODWORD(v339) = 0;
      char v164 = 0;
      if (!v367) {
        goto LABEL_48;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!v367)
      {
LABEL_45:
        char v164 = 0;
        goto LABEL_48;
      }
    }
  }
LABEL_47:
  char v164 = v339 ^ 1;
LABEL_48:
  BOOL v367 = v164;
  sub_100375308();
  uint64_t v165 = v328;
  sub_10030ABF8(v328);
  swift_release();
  uint64_t v166 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48);
  uint64_t v167 = v340;
  if (v166(v165, 1, v340) == 1)
  {
    sub_1000380B4(v165, &qword_10047F2A8);
  }
  else
  {
    os_log_type_t v168 = v141;
    uint64_t v169 = v321;
    (*(void (**)(char *, uint64_t, uint64_t))(v40 + 32))(v321, v165, v167);
    uint64_t v170 = v169;
    uint64_t v141 = v168;
    (*(void (**)(char *, char *, uint64_t))(v40 + 40))(v350, v170, v167);
  }
  sub_100375308();
  uint64_t v171 = v343;
  sub_10030AC38(v343);
  swift_release();
  if (v166(v171, 1, v167) == 1)
  {
    sub_1000380B4(v343, &qword_10047F2A8);
    uint64_t v172 = v167;
    uint64_t v173 = v352;
  }
  else
  {
    uint64_t v173 = v352;
    unint64_t v174 = v322;
    (*(void (**)(char *, uint64_t, uint64_t))(v352 + 32))(v322, v343, v167);
    (*(void (**)(char *, char *, uint64_t))(v173 + 40))(v344, v174, v167);
    uint64_t v172 = v167;
  }
  id v175 = v353;
  if (v367)
  {
    uint64_t v176 = v173;
    swift_retain_n();
    uint64_t v177 = Logger.logObject.getter();
    os_log_type_t v178 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v177, v178))
    {
      uint64_t v179 = swift_slowAlloc();
      uint64_t v362 = swift_slowAlloc();
      *(_DWORD *)uint64_t v179 = 136316162;
      swift_beginAccess();
      uint64_t v180 = DispatchTimeInterval.description.getter();
      v361[0] = sub_100010680(v180, v181, &v362);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v179 + 12) = 2080;
      swift_beginAccess();
      uint64_t v182 = DispatchTimeInterval.description.getter();
      v361[0] = sub_100010680(v182, v183, &v362);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v179 + 22) = 2080;
      swift_beginAccess();
      uint64_t v184 = v368[0];
      unint64_t v185 = v368[1];
      swift_bridgeObjectRetain();
      v361[0] = sub_100010680(v184, v185, &v362);
      uint64_t v186 = v347;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v179 + 32) = 1024;
      swift_beginAccess();
      LODWORD(v361[0]) = v367;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v179 + 38) = 1024;
      sub_100375308();
      LOBYTE(v185) = sub_10030B140();
      swift_release();
      swift_release();
      LODWORD(v361[0]) = v185 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v177, v178, "Time since oldest service added: %s and last service added: %s leakReason: %s triggerTTR: %{BOOL}d Service active on sleep/wake:%{BOOL}d", (uint8_t *)v179, 0x2Cu);
      swift_arrayDestroy();
      uint64_t v173 = v352;
      swift_slowDealloc();
      uint64_t v141 = v186;
      id v175 = v353;
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
      uint64_t v173 = v176;
    }
    sub_100375308();
    char v187 = sub_10030B140();
    swift_release();
    if (v187)
    {
      uint64_t v188 = v346;
      (*(void (**)(char *, uint64_t))(v173 + 8))(v346, v172);
      *(void *)uint64_t v188 = 300;
      ((void (*)(char *, void, uint64_t))v336)(v188, v338, v172);
      swift_beginAccess();
      uint64_t v362 = v368[0];
      unint64_t v363 = v368[1];
      swift_bridgeObjectRetain();
      v189._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
      v189._object = (void *)0x80000001003E2100;
      String.append(_:)(v189);
      v368[0] = v362;
      v368[1] = v363;
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v190 = v329;
  WiFiInterface.preferences.getter();
  uint64_t v191 = v331;
  char v192 = Preferences.disableAWDLLinkWhenInactive.getter();
  (*(void (**)(char *, uint64_t))(v330 + 8))(v190, v191);
  sub_1003AB930(v345, v349, type metadata accessor for AWDLIdleActivity);
  uint64_t v193 = *(void (**)(char *, void *, uint64_t))(v173 + 16);
  v193(v348, v351, v172);
  BOOL v194 = 0;
  if ((v192 & 1) != 0 && v339 != 1) {
    BOOL v194 = !static DispatchTimeInterval.< infix(_:_:)();
  }
  uint64_t v197 = *(void (**)(char *, uint64_t))(v173 + 8);
  uint64_t v196 = v173 + 8;
  uint64_t v195 = v197;
  v197(v348, v172);
  sub_1003AB6C0(v349, type metadata accessor for AWDLIdleActivity);
  uint64_t v198 = v333;
  sub_1003AB930(v345, v333, type metadata accessor for AWDLIdleActivity);
  v193(v141, v351, v172);
  if (v194)
  {
    uint64_t v199 = v198;
    BOOL v200 = static DispatchTimeInterval.< infix(_:_:)();
    NSString v201 = v141;
    uint64_t v202 = v196;
    v195(v201, v172);
    sub_1003AB6C0(v199, type metadata accessor for AWDLIdleActivity);
    uint64_t v203 = v346;
    char v204 = v195;
    if (!v200)
    {
      uint64_t v205 = Logger.logObject.getter();
      os_log_type_t v206 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v205, v206))
      {
        uint64_t v207 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v207 = 0;
        _os_log_impl((void *)&_mh_execute_header, v205, v206, "Disabling AWDL due to inactivity", v207, 2u);
        uint64_t v203 = v346;
        swift_slowDealloc();
      }

      WiFiInterface.linkState.setter(0);
    }
  }
  else
  {
    uint64_t v208 = v141;
    uint64_t v202 = v196;
    v195(v208, v172);
    sub_1003AB6C0(v198, type metadata accessor for AWDLIdleActivity);
    uint64_t v203 = v346;
    char v204 = v195;
  }
  swift_beginAccess();
  BOOL v209 = static DispatchTimeInterval.< infix(_:_:)();
  uint64_t v210 = v332;
  v193(v332, v341, v172);
  if (v209)
  {
    v204(v210, v172);
LABEL_75:
    swift_bridgeObjectRelease();
    v204(v341, v172);
    v204(v342, v172);
    v204(v351, v172);
    v204(v203, v172);
    v204(v344, v172);
    v204(v350, v172);
    return swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  BOOL v211 = static DispatchTimeInterval.< infix(_:_:)();
  v204(v210, v172);
  if (v211) {
    goto LABEL_75;
  }
  uint64_t v212 = v345;
  BOOL v213 = static DispatchTimeInterval.< infix(_:_:)();
  uint64_t v214 = v212;
  uint64_t v215 = v319;
  sub_1003AB930(v214, v319, type metadata accessor for AWDLIdleActivity);
  if (v213)
  {
    sub_1003AB6C0(v215, type metadata accessor for AWDLIdleActivity);
    goto LABEL_75;
  }
  BOOL v216 = static DispatchTimeInterval.< infix(_:_:)();
  sub_1003AB6C0(v215, type metadata accessor for AWDLIdleActivity);
  if (v216) {
    goto LABEL_75;
  }
  uint64_t v352 = v202;
  int v218 = v175;
  uint64_t v220 = v368[0];
  unint64_t v219 = v368[1];
  swift_retain_n();
  uint64_t v221 = v345;
  uint64_t v222 = v317;
  sub_1003AB930(v345, v317, type metadata accessor for AWDLIdleActivity);
  uint64_t v223 = v221;
  uint64_t v224 = v318;
  sub_1003AB930(v223, v318, type metadata accessor for AWDLIdleActivity);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v225 = Logger.logObject.getter();
  int v226 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v225, (os_log_type_t)v226))
  {
    LODWORD(v349) = v226;
    os_log_t v355 = v225;
    uint64_t v227 = swift_slowAlloc();
    os_log_type_t v348 = (char *)swift_slowAlloc();
    uint64_t v362 = (uint64_t)v348;
    *(_DWORD *)uint64_t v227 = 136316674;
    uint64_t v228 = v314;
    sub_1003790BC(v314);
    swift_release();
    uint64_t v229 = DispatchTimeInterval.description.getter();
    unint64_t v231 = v230;
    v204((char *)v228, v340);
    v359[0] = sub_100010680(v229, v231, &v362);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v227 + 12) = 2080;
    swift_bridgeObjectRetain();
    v359[0] = sub_100010680(v220, v219, &v362);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v227 + 22) = 2080;
    sub_100375308();
    sub_100309184(v359);
    swift_release();
    uint64_t v358 = (void *)v359[0];
    uint64_t v232 = v315;
    uint64_t v233 = swift_getWitnessTable();
    uint64_t v234 = v232;
    uint64_t v235 = v316;
    uint64_t v237 = sub_1003741D0((void (*)(char *, char *))sub_1003ABC48, 0, v234, (uint64_t)&type metadata for String, (uint64_t)&type metadata for Never, v233, (uint64_t)&protocol witness table for Never, v236);
    unint64_t v316 = v235;
    swift_bridgeObjectRelease();
    v359[0] = v237;
    uint64_t v238 = sub_100010BCC((uint64_t *)&unk_100488360);
    uint64_t v239 = sub_10000F9CC(&qword_100487D40, (uint64_t *)&unk_100488360);
    uint64_t v347 = (char *)v238;
    uint64_t v343 = v239;
    uint64_t v240 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v242 = v241;
    swift_bridgeObjectRelease();
    v359[0] = sub_100010680(v240, v242, &v362);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    uint64_t v354 = v227;
    *(_WORD *)(v227 + 32) = 2080;
    sub_100375308();
    sub_10030921C(v359);
    swift_release();
    uint64_t v243 = v359[0];
    int64_t v244 = *(void *)(v359[0] + 16);
    if (v244)
    {
      uint64_t v358 = _swiftEmptyArrayStorage;
      sub_10008345C(0, v244, 0);
      id v245 = v358;
      uint64_t v339 = v243;
      uint64_t v246 = (uint64_t *)(v243 + 40);
      do
      {
        uint64_t v247 = *(v246 - 1);
        uint64_t v248 = *v246;
        uint64_t v358 = v245;
        unint64_t v250 = v245[2];
        unint64_t v249 = v245[3];
        swift_bridgeObjectRetain();
        if (v250 >= v249 >> 1)
        {
          sub_10008345C(v249 > 1, v250 + 1, 1);
          id v245 = v358;
        }
        v246 += 3;
        v245[2] = v250 + 1;
        uint64_t v251 = &v245[2 * v250];
        v251[4] = v247;
        v251[5] = v248;
        --v244;
      }
      while (v244);
      swift_bridgeObjectRelease();
      int v218 = v353;
    }
    else
    {
      swift_bridgeObjectRelease();
      id v245 = _swiftEmptyArrayStorage;
    }
    os_log_type_t v257 = v354;
    v359[0] = (uint64_t)v245;
    uint64_t v258 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v260 = v259;
    swift_bridgeObjectRelease();
    v359[0] = sub_100010680(v258, v260, &v362);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    WORD1(v257[5].isa) = 2048;
    sub_100375308();
    uint64_t v261 = sub_100308FD4();
    swift_release();
    swift_release();
    v359[0] = v261;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    WORD2(v257[6].isa) = 2080;
    uint64_t v262 = v317;
    uint64_t v263 = DispatchTimeInterval.description.getter();
    v359[0] = sub_100010680(v263, v264, &v362);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1003AB6C0(v262, type metadata accessor for AWDLIdleActivity);
    HIWORD(v257[7].isa) = 2080;
    uint64_t v265 = v318;
    uint64_t v266 = DispatchTimeInterval.description.getter();
    v359[0] = sub_100010680(v266, v267, &v362);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1003AB6C0(v265, type metadata accessor for AWDLIdleActivity);
    os_log_t v268 = v355;
    _os_log_impl((void *)&_mh_execute_header, v355, (os_log_type_t)v349, "Last TTR %s leak %s, browses: %s, advertises: %s and services count: %ld no Tx/Rx for %s/%s", (uint8_t *)v257, 0x48u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();

    swift_release_n();
    sub_1003AB6C0(v222, type metadata accessor for AWDLIdleActivity);
    sub_1003AB6C0(v224, type metadata accessor for AWDLIdleActivity);
  }
  uint64_t v269 = v340;
  if ((sub_100379564((void (*)(uint64_t))sub_1003790BC, 43200) & 1) != 0 || (swift_beginAccess(), !v367))
  {
    swift_bridgeObjectRelease();
    v204(v341, v269);
    v204(v342, v269);
    v204(v351, v269);
    v204(v346, v269);
    v204(v344, v269);
    v204(v350, v269);
  }
  else
  {
    sub_100375308();
    sub_10030B3A0();
    swift_release();
    uint64_t v362 = 0;
    unint64_t v363 = 0xE000000000000000;
    _StringGuts.grow(_:)(65);
    v270._uint64_t countAndFlagsBits = 0x20676E696B61654CLL;
    v270._object = (void *)0xE800000000000000;
    String.append(_:)(v270);
    swift_beginAccess();
    os_log_type_t v271 = v218;
    uint64_t v272 = v368[0];
    uint64_t v273 = (void *)v368[1];
    swift_bridgeObjectRetain();
    v274._uint64_t countAndFlagsBits = v272;
    v274._object = v273;
    String.append(_:)(v274);
    swift_bridgeObjectRelease();
    v275._uint64_t countAndFlagsBits = 0xD000000000000022;
    v275._object = (void *)0x80000001003E1FF0;
    String.append(_:)(v275);
    v276._uint64_t countAndFlagsBits = DispatchTimeInterval.description.getter();
    String.append(_:)(v276);
    swift_bridgeObjectRelease();
    v277._uint64_t countAndFlagsBits = 0xD000000000000013;
    v277._object = (void *)0x80000001003E2020;
    String.append(_:)(v277);
    os_log_t v355 = (os_log_t)v362;
    unint64_t v278 = v363;
    uint64_t v362 = 0;
    unint64_t v363 = 0xE000000000000000;
    _StringGuts.grow(_:)(163);
    v279._uint64_t countAndFlagsBits = 0xD000000000000020;
    v279._object = (void *)0x80000001003E2040;
    String.append(_:)(v279);
    unint64_t v280 = v278;
    v281._uint64_t countAndFlagsBits = DispatchTimeInterval.description.getter();
    String.append(_:)(v281);
    swift_bridgeObjectRelease();
    v282._uint64_t countAndFlagsBits = 0x6E696B61654C0A0ALL;
    v282._object = (void *)0xEA00000000002067;
    String.append(_:)(v282);
    swift_bridgeObjectRetain();
    v283._uint64_t countAndFlagsBits = v272;
    v283._object = v273;
    String.append(_:)(v283);
    swift_bridgeObjectRelease();
    v284._object = (void *)0x80000001003E2070;
    v284._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v284);
    uint64_t v285 = *(void **)((char *)v271 + *(void *)(*v271 + 624));
    char v286 = v310;
    Date.init()();
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v311 + 8))(v286, v312);
    id v288 = [v285 stringFromDate:isa];

    uint64_t v289 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v291 = v290;

    v292._uint64_t countAndFlagsBits = v289;
    v292._object = v291;
    String.append(_:)(v292);
    swift_bridgeObjectRelease();
    v293._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    v293._object = (void *)0x80000001003E2090;
    String.append(_:)(v293);
    sub_100375308();
    sub_100309184(&v357);
    swift_release();
    uint64_t v356 = v357;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    swift_bridgeObjectRelease();
    v294._object = (void *)0x80000001003E20B0;
    v294._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v294);
    sub_100375308();
    sub_10030921C(&v357);
    swift_release();
    uint64_t v356 = v357;
    sub_100010BCC((uint64_t *)&unk_100486B60);
    _print_unlocked<A, B>(_:_:)();
    swift_bridgeObjectRelease();
    v295._uint64_t countAndFlagsBits = 0xD00000000000002FLL;
    v295._object = (void *)0x80000001003E20D0;
    String.append(_:)(v295);
    v296._uint64_t countAndFlagsBits = v309;
    v296._object = v327;
    String.append(_:)(v296);
    swift_bridgeObjectRelease();
    v297._uint64_t countAndFlagsBits = 34;
    v297._object = (void *)0xE100000000000000;
    String.append(_:)(v297);
    uint64_t v298 = v362;
    unint64_t v299 = v363;
    type metadata accessor for P2PTimer();
    uint64_t v300 = (uint64_t)v325;
    variable initialization expression of AWDLPeer.lastUpdated();
    uint64_t v301 = type metadata accessor for DispatchTime();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v301 - 8) + 56))(v300, 0, 1, v301);
    uint64_t v302 = (uint64_t)v271 + *(void *)(*v271 + 608);
    swift_beginAccess();
    sub_10006D1A4(v300, v302, &qword_10047DB90);
    swift_endAccess();
    uint64_t v362 = (uint64_t)v355;
    unint64_t v363 = v280;
    uint64_t v364 = v298;
    unint64_t v365 = v299;
    char v366 = 1;
    swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    long long v304 = *(void (**)(uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 144);
    uint64_t v305 = swift_checkMetadataState();
    uint64_t v306 = v316;
    v304(&v362, v305, AssociatedConformanceWitness);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v306) {
      swift_errorRelease();
    }
    uint64_t v307 = v340;
    v204(v341, v340);
    v204(v342, v307);
    v204(v351, v307);
    v204(v346, v307);
    v204(v344, v307);
    v204(v350, v307);
  }
  return swift_bridgeObjectRelease();
}

id sub_10038C890(uint64_t a1, unint64_t a2, unsigned __int16 a3)
{
  unint64_t v3 = HIDWORD(a2) | ((unint64_t)a3 << 32);
  uint64_t v4 = *(void **)(a1 + 8);
  if ((v3 & 0xFF00000000) == 0x300000000)
  {
    LOWORD(v3) = 0;
    return [v4 softAPChannelChangedEvent:a2 & 1 channelNumber:(unsigned __int16)v3];
  }
  if (HIDWORD(a2) < 0x10000) {
    return [v4 softAPChannelChangedEvent:a2 & 1 channelNumber:(unsigned __int16)v3];
  }
  id result = (id)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_10038C950(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = type metadata accessor for AWDLPeer(0);
  uint64_t v6 = __chkstk_darwin();
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(int *)(v6 + 20);
  uint64_t v37 = a1;
  unint64_t v10 = *(unsigned __int16 *)(a1 + v9) | ((unint64_t)*(unsigned int *)(a1 + v9 + 2) << 16);
  id v11 = WiFiAddress.apiAddress.getter(v10);
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  swift_beginAccess();
  id v41 = v11;
  unint64_t v42 = v2;
  uint64_t v43 = &v49;
  sub_10006F314(0, (unint64_t *)&unk_100484A40);
  uint64_t v12 = *(void *)(v4 + 416);
  uint64_t v35 = *(void *)(v4 + 408);
  uint64_t v34 = v12;
  type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation();
  sub_100296BC4();
  swift_bridgeObjectRetain();
  uint64_t v13 = Dictionary.filter(_:)();
  sub_100378294(v13);
  swift_beginAccess();
  id v36 = v11;
  id v38 = v11;
  uint64_t v39 = v2;
  uint64_t v40 = &v48;
  swift_bridgeObjectRetain();
  uint64_t v14 = Dictionary.filter(_:)();
  sub_100378820(v14);
  if (v49 > 0 || v48 >= 1)
  {
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      v47[0] = v33;
      *(_DWORD *)uint64_t v17 = 136315650;
      uint64_t v18 = WiFiAddress.description.getter(v10);
      uint64_t v45 = sub_100010680(v18, v19, v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 12) = 2048;
      swift_beginAccess();
      uint64_t v44 = v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v17 + 22) = 2048;
      swift_beginAccess();
      uint64_t v46 = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Aged out %s with total traffic registrations: %ld, total responder traffic registrations: %ld", (uint8_t *)v17, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  sub_100375308();
  uint64_t v20 = v37;
  sub_100310E7C();
  swift_release();
  sub_100375308();
  AWDLPeer.init(macAddress:)(v10, (uint64_t)v8);
  sub_10030C488((uint64_t)v8, *(void *)(v20 + *(int *)(v5 + 80)));
  swift_release();
  sub_1003AB6C0((uint64_t)v8, type metadata accessor for AWDLPeer);
  if (*(unsigned char *)(v20 + *(int *)(v5 + 108)) == 1)
  {
    unint64_t v21 = WiFiAddress.ipv6LinkLocalAddress.getter(v10);
    uint64_t v23 = v22;
    uint64_t v25 = v24;
    uint64_t v27 = v26;
    swift_beginAccess();
    uint64_t v28 = type metadata accessor for WiFiInterface.NeighborDiscoveryTable();
    WiFiInterface.NeighborDiscoveryTable.postPeerAbsence(macAddress:ipv6Address:)(v10, v21, v23, v25, v27, v28);
    swift_endAccess();
    swift_bridgeObjectRelease();
  }
  id v29 = v36;
  uint64_t v30 = (void *)((char *)v2 + *(void *)(*v2 + 744));
  swift_beginAccess();
  uint64_t v31 = *v30;
  __chkstk_darwin();
  *(&v32 - 2) = v20;
  swift_bridgeObjectRetain();
  sub_100370408((void (*)(long long *))sub_1003A97B4, (uint64_t)(&v32 - 4), v31);
  swift_bridgeObjectRelease();
}

uint64_t sub_10038D0CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for DriverEvent(0);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchTimeInterval();
  uint64_t v32 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchTime();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v24 - v13;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (*(void *)(result + *(void *)(*(void *)result + 656)))
    {
      uint64_t v31 = v3;
      (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v14, a2, v9);
      os_log_type_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.error.getter();
      int v18 = v17;
      if (os_log_type_enabled(v16, v17))
      {
        os_log_t v30 = v16;
        uint64_t v19 = swift_slowAlloc();
        int v28 = v18;
        uint64_t v20 = (uint8_t *)v19;
        uint64_t v29 = swift_slowAlloc();
        uint64_t v34 = v29;
        uint64_t v27 = v20;
        *(_DWORD *)uint64_t v20 = 136315138;
        uint64_t v26 = v20 + 4;
        type metadata accessor for P2PTimer();
        variable initialization expression of AWDLPeer.lastUpdated();
        DispatchTime.distance(to:)();
        uint64_t v25 = *(void (**)(char *, uint64_t))(v10 + 8);
        v25(v12, v9);
        uint64_t v21 = DispatchTimeInterval.description.getter();
        unint64_t v23 = v22;
        (*(void (**)(char *, uint64_t))(v32 + 8))(v8, v6);
        uint64_t v33 = sub_100010680(v21, v23, &v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v25(v14, v9);
        os_log_type_t v16 = v30;
        _os_log_impl((void *)&_mh_execute_header, v30, (os_log_type_t)v28, "Watchdog reset timed out because it has been in progress since %s", v27, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
      }

      *uint64_t v5 = 1;
      swift_storeEnumTagMultiPayload();
      sub_10037D420(v5);
      swift_release();
      return sub_1003AB6C0((uint64_t)v5, type metadata accessor for DriverEvent);
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_10038D510(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for DriverEvent(0);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchTimeInterval();
  uint64_t v32 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchTime();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v24 - v13;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (*(void *)(result + *(void *)(*(void *)result + 672)))
    {
      uint64_t v31 = v3;
      (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v14, a2, v9);
      os_log_type_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.error.getter();
      int v18 = v17;
      if (os_log_type_enabled(v16, v17))
      {
        os_log_t v30 = v16;
        uint64_t v19 = swift_slowAlloc();
        int v28 = v18;
        uint64_t v20 = (uint8_t *)v19;
        uint64_t v29 = swift_slowAlloc();
        uint64_t v34 = v29;
        uint64_t v27 = v20;
        *(_DWORD *)uint64_t v20 = 136315138;
        uint64_t v26 = v20 + 4;
        type metadata accessor for P2PTimer();
        variable initialization expression of AWDLPeer.lastUpdated();
        DispatchTime.distance(to:)();
        uint64_t v25 = *(void (**)(char *, uint64_t))(v10 + 8);
        v25(v12, v9);
        uint64_t v21 = DispatchTimeInterval.description.getter();
        unint64_t v23 = v22;
        (*(void (**)(char *, uint64_t))(v32 + 8))(v8, v6);
        uint64_t v33 = sub_100010680(v21, v23, &v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v25(v14, v9);
        os_log_type_t v16 = v30;
        _os_log_impl((void *)&_mh_execute_header, v30, (os_log_type_t)v28, "Waiting interface power on timed out because it has been in progress since %s", v27, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
      }

      *uint64_t v5 = 5;
      swift_storeEnumTagMultiPayload();
      sub_10037D420(v5);
      swift_release();
      return sub_1003AB6C0((uint64_t)v5, type metadata accessor for DriverEvent);
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

void sub_10038D954(uint64_t *a1)
{
  uint64_t v2 = *a1;
  sub_10000D88C(*a1, 1u);
  if (v1)
  {
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = swift_slowAlloc();
      uint64_t v6 = (void *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136315394;
      unint64_t v7 = WiFiP2PSPITransactionType.description.getter(v2);
      sub_100010680(v7, v8, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v5 + 12) = 2112;
      swift_errorRetain();
      uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v6 = v9;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to recover transaction %s: %@", (uint8_t *)v5, 0x16u);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();

      swift_errorRelease();
      swift_errorRelease();
    }
  }
}

uint64_t sub_10038DBE0(uint64_t a1)
{
  uint64_t result = type metadata accessor for AWDLPeer(0);
  *(unsigned char *)(a1 + *(int *)(result + 108)) = 0;
  return result;
}

uint64_t sub_10038DC10(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(v2 + *(void *)(*(void *)v2 + 424));
  swift_beginAccess();
  uint64_t v6 = *v5;
  uint64_t v7 = sub_100374AEC(v6);
  uint64_t v9 = v8;
  uint64_t v10 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v11 = *(unsigned int *)(v6 + 36);
  char v13 = v12 & 1;
  uint64_t v17 = v6;
  uint64_t v18 = v7;
  uint64_t v19 = v8;
  char v20 = v12 & 1;
  uint64_t v21 = v10;
  uint64_t v22 = v11;
  char v23 = 0;
  void v15[2] = a1;
  uint64_t v15[3] = a2;
  uint64_t v16 = v2;
  swift_bridgeObjectRetain();
  sub_100370C08((void (*)(void))sub_1003AB904, (uint64_t)v15, &qword_100488378, (unint64_t)sub_1003ABC84, (void (*)(uint64_t *))sub_1003ABC7C, (void (*)(unsigned char *))sub_1003ABC84);
  swift_bridgeObjectRelease();
  return sub_100038030(v7, v9, v13);
}

uint64_t sub_10038DD4C()
{
  type metadata accessor for AWDLPeer(0);
  __chkstk_darwin();
  uint64_t v2 = &v10[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v3 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 424));
  swift_beginAccess();
  while (1)
  {
    uint64_t result = *v3;
    if (!*(void *)(*v3 + 16)) {
      break;
    }
    uint64_t v5 = sub_100374AEC(result);
    uint64_t v7 = v6;
    char v9 = v8 & 1;
    swift_beginAccess();
    sub_1003A4B10((uint64_t)v2, v5, v7);
    swift_endAccess();
    sub_100038030(v5, v7, v9);
    sub_10038C950((uint64_t)v2);
    sub_1003AB6C0((uint64_t)v2, type metadata accessor for AWDLPeer);
  }
  return result;
}

uint64_t sub_10038DE88@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  *a2 = v3;
  a2[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_10038DEA8(void **a1, char *a2, uint64_t a3)
{
  uint64_t v21 = a3;
  uint64_t v19 = a2;
  sub_10006F314(255, (unint64_t *)&unk_100484A40);
  uint64_t v4 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v20 = *(void *)(TupleTypeMetadata2 - 8);
  __chkstk_darwin();
  uint64_t v7 = (uint64_t *)((char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = __chkstk_darwin();
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = *a1;
  char v12 = (char *)&v18 + *(int *)(v8 + 48) - v9;
  *(uint64_t *)((char *)&v18 - v9) = (uint64_t)v11;
  uint64_t v13 = *(void *)(v4 - 8);
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v14(v12, v19, v4);
  uint64_t v18 = sub_10006F314(0, (unint64_t *)&qword_10047DC50);
  uint64_t v19 = (char *)v7 + *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v15 = v19;
  *uint64_t v7 = v11;
  ((void (*)(char *))v14)(v15);
  id v16 = [v11 peerAddress];
  LOBYTE(v7) = static NSObject.== infix(_:_:)();

  (*(void (**)(char *, uint64_t))(v20 + 8))(v10, TupleTypeMetadata2);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v4);
  return v7 & 1;
}

uint64_t sub_10038E0E8(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v127 = a3;
  sub_100010BCC(&qword_100487CE0);
  __chkstk_darwin();
  uint64_t v123 = (uint64_t)&v119 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation();
  type metadata accessor for Optional();
  __chkstk_darwin();
  uint64_t v8 = (char *)&v119 - v7;
  sub_10006F314(255, (unint64_t *)&unk_100484A40);
  uint64_t v138 = *(void *)(swift_getTupleTypeMetadata2() - 8);
  __chkstk_darwin();
  char v137 = (char *)&v119 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  os_log_t v136 = (os_log_t)((char *)&v119 - v10);
  __chkstk_darwin();
  uint64_t v124 = (uint64_t *)((char *)&v119 - v11);
  __chkstk_darwin();
  uint64_t v132 = (char *)&v119 - v12;
  __chkstk_darwin();
  uint64_t v126 = (char *)&v119 - v13;
  __chkstk_darwin();
  os_log_t v125 = (os_log_t)((char *)&v119 - v14);
  __chkstk_darwin();
  uint64_t v121 = (uint64_t *)((char *)&v119 - v15);
  uint64_t v16 = __chkstk_darwin();
  uint64_t v140 = ((char *)&v119 - v17);
  uint64_t v141 = v16;
  uint64_t v18 = *(int *)(v16 + 48);
  uint64_t v19 = (char *)&v119 + v18 - v17;
  uint64_t v20 = *a1;
  *(uint64_t *)((char *)&v119 - v17) = (uint64_t)*a1;
  uint64_t v21 = *(void **)(v6 - 8);
  uint64_t v22 = (void (*)(char *, char *, uint64_t))v21[2];
  unint64_t v142 = (char *)a1 + v18;
  uint64_t v143 = v22;
  uint64_t v144 = v21 + 2;
  ((void (*)(char *))v22)(v19);
  char v129 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v21[7];
  char v130 = v21 + 7;
  v129(v8, 1, 1, v6);
  __int16 v148 = v20;
  uint64_t v23 = a2 + *(void *)(*(void *)a2 + 552);
  swift_beginAccess();
  sub_100296BC4();
  uint64_t v24 = type metadata accessor for Dictionary();
  uint64_t v25 = v20;
  uint64_t v26 = v6;
  char v134 = v8;
  uint64_t v131 = v24;
  uint64_t v122 = v23;
  Dictionary.subscript.setter();
  swift_endAccess();
  sub_100378300();
  uint64_t v128 = v21;
  uint64_t v139 = (void (*)(char *, uint64_t))v21[1];
  v139(v19, v6);
  char v133 = a1;
  uint64_t v27 = *a1;
  int v28 = *a1;
  uint64_t v145 = a2;
  uint64_t v29 = v146;
  sub_100371DFC(v28);
  uint64_t v146 = v29;
  uint64_t v135 = v21 + 1;
  if (!v29)
  {
    uint64_t v58 = v141;
    uint64_t v59 = v142;
    uint64_t v60 = v121;
    uint64_t v61 = (char *)v121 + *(int *)(v141 + 48);
    *uint64_t v121 = v27;
    uint64_t v62 = v6;
    unint64_t v63 = v143;
    v143(v61, v59, v62);
    uint64_t v64 = v138;
    (*(void (**)(os_log_t, void *, uint64_t))(v138 + 16))(v125, v60, v58);
    (*(void (**)(char *, void *, uint64_t))(v64 + 32))(v126, v60, v58);
    id v65 = v27;
    char v66 = Logger.logObject.getter();
    os_log_type_t v67 = static os_log_type_t.info.getter();
    uint64_t v68 = v58;
    uint64_t v69 = v63;
    if (os_log_type_enabled(v66, v67))
    {
      uint64_t v70 = swift_slowAlloc();
      char v137 = (char *)swift_slowAlloc();
      v147[0] = (uint64_t)v137;
      *(_DWORD *)uint64_t v70 = 136315394;
      uint64_t v124 = (void *)(v70 + 4);
      uint64_t v71 = *(int *)(v68 + 48);
      int64_t v72 = v140;
      os_log_t v136 = v66;
      uint64_t v73 = (char *)v140 + v71;
      os_log_t v74 = v125;
      uint64_t v75 = (char *)v125 + v71;
      Class isa = v125->isa;
      v140->Class isa = v125->isa;
      v69((char *)v72 + v71, v75, v26);
      id v77 = [(objc_class *)isa uniqueIdentifier];
      v139(v73, v26);
      unint64_t v78 = *(void (**)(os_log_t, uint64_t))(v138 + 8);
      v78(v74, v68);
      uint64_t v79 = v26;
      uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v82 = v81;

      __int16 v148 = (void *)sub_100010680(v80, v82, v147);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v78((os_log_t)v126, v68);
      *(_WORD *)(v70 + 12) = 2080;
      uint64_t v83 = WiFiAddress.description.getter(v127 & 0xFFFFFFFFFFFFLL);
      __int16 v148 = (void *)sub_100010680(v83, v84, v147);
      uint64_t v26 = v79;
      uint64_t v59 = v142;
      unint64_t v63 = v143;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      char v85 = v140;
      swift_bridgeObjectRelease();
      os_log_t v86 = v136;
      _os_log_impl((void *)&_mh_execute_header, v136, v67, "Successfully recovered traffic registration for %s to %s", (uint8_t *)v70, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v112 = *(void (**)(os_log_t, uint64_t))(v138 + 8);
      v112(v125, v58);

      v112((os_log_t)v126, v58);
      char v85 = v140;
    }
    uint64_t v105 = (char *)v85 + *(int *)(v68 + 48);
    uint64_t v113 = *v133;
    v85->Class isa = (Class)*v133;
    v63(v105, v59, v26);
    uint64_t v114 = &v132[*(int *)(v68 + 48)];
    v63(v114, v59, v26);
    uint64_t v115 = v134;
    ((void (*)(char *, char *, uint64_t))v128[4])(v134, v114, v26);
    v129(v115, 0, 1, v26);
    __int16 v148 = v113;
    swift_beginAccess();
    uint64_t v116 = v113;
    Dictionary.subscript.setter();
    swift_endAccess();
    sub_100378300();
    return ((uint64_t (*)(char *, uint64_t))v139)(v105, v26);
  }
  uint64_t v31 = v141;
  os_log_t v30 = v142;
  uint64_t v32 = v124;
  uint64_t v33 = (char *)v124 + *(int *)(v141 + 48);
  *uint64_t v124 = v27;
  v143(v33, v30, v26);
  uint64_t v34 = v138;
  (*(void (**)(os_log_t, void *, uint64_t))(v138 + 16))(v136, v32, v31);
  (*(void (**)(char *, void *, uint64_t))(v34 + 32))(v137, v32, v31);
  swift_errorRetain();
  id v35 = v27;
  swift_errorRetain();
  id v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.error.getter();
  LODWORD(v38) = v37;
  BOOL v39 = os_log_type_enabled(v36, v37);
  uint64_t v120 = v26;
  if (v39)
  {
    uint64_t v40 = swift_slowAlloc();
    os_log_t v125 = v36;
    uint64_t v41 = v26;
    uint64_t v42 = v40;
    uint64_t v124 = (void *)swift_slowAlloc();
    uint64_t v126 = (char *)swift_slowAlloc();
    v147[0] = (uint64_t)v126;
    *(_DWORD *)uint64_t v42 = 136315650;
    uint64_t v119 = v42 + 4;
    uint64_t v43 = *(int *)(v31 + 48);
    uint64_t v44 = v140;
    LODWORD(v121) = v38;
    uint64_t v45 = (char *)v140 + v43;
    os_log_t v46 = v136;
    id v47 = (char *)v136 + v43;
    Class v48 = v136->isa;
    v140->Class isa = v136->isa;
    v143((char *)v44 + v43, v47, v41);
    id v49 = [(objc_class *)v48 uniqueIdentifier];
    v139(v45, v41);
    uint64_t v50 = *(void (**)(os_log_t, uint64_t))(v34 + 8);
    v50(v46, v31);
    uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v38 = v52;

    __int16 v148 = (void *)sub_100010680(v51, v38, v147);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v50((os_log_t)v137, v31);
    *(_WORD *)(v42 + 12) = 2080;
    uint64_t v53 = v127 & 0xFFFFFFFFFFFFLL;
    uint64_t v54 = WiFiAddress.description.getter(v127 & 0xFFFFFFFFFFFFLL);
    __int16 v148 = (void *)sub_100010680(v54, v55, v147);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v42 + 22) = 2112;
    LOBYTE(v38) = v42 + 24;
    swift_errorRetain();
    uint64_t v56 = _swift_stdlib_bridgeErrorToNSError();
    __int16 v148 = (void *)v56;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v124 = v56;
    swift_errorRelease();
    swift_errorRelease();
    os_log_t v57 = v125;
    _os_log_impl((void *)&_mh_execute_header, v125, (os_log_type_t)v121, "Failed to recover traffic registration for %s to %s: %@", (uint8_t *)v42, 0x20u);
    sub_100010BCC(&qword_10047CC30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    char v87 = *(void (**)(os_log_t, uint64_t))(v34 + 8);
    v87(v136, v31);

    v87((os_log_t)v137, v31);
    swift_errorRelease();
    swift_errorRelease();
    uint64_t v53 = v127 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v88 = (uint64_t *)(v145 + *(void *)(*(void *)v145 + 424));
  swift_beginAccess();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  __int16 v148 = (void *)*v88;
  uint64_t v90 = (uint64_t)v148;
  *unint64_t v88 = 0x8000000000000000;
  unint64_t v92 = sub_10039F858(v53, (void (*)(unsigned char *, uint64_t))NANClusterChangeEvent.hash(into:), (uint64_t (*)(uint64_t, Swift::Int))sub_100031D78);
  uint64_t v93 = *(void *)(v90 + 16);
  BOOL v94 = (v91 & 1) == 0;
  uint64_t v95 = v93 + v94;
  if (__OFADD__(v93, v94))
  {
    __break(1u);
    goto LABEL_19;
  }
  LOBYTE(v38) = v91;
  if (*(void *)(v90 + 24) >= v95)
  {
    if (isUniquelyReferenced_nonNull_native)
    {
      char v99 = v140;
      uint64_t v98 = v141;
      if (v91)
      {
LABEL_14:
        uint64_t v100 = v53;
        uint64_t v101 = v148[7];
        uint64_t v102 = type metadata accessor for AWDLPeer(0);
        uint64_t v103 = *(void *)(v102 - 8);
        uint64_t v104 = v123;
        sub_1003AB998(v101 + *(void *)(v103 + 72) * v92, v123, type metadata accessor for AWDLPeer);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v103 + 56))(v104, 0, 1, v102);
        *(unsigned char *)(v104 + *(int *)(v102 + 112)) = 1;
        sub_1002FE050(v104, 1, (uint64_t *)&v148, v92, v100);
        sub_1000380B4(v104, &qword_100487CE0);
        *unint64_t v88 = (uint64_t)v148;
        swift_endAccess();
        uint64_t v105 = (char *)v99 + *(int *)(v98 + 48);
        uint64_t v106 = *v133;
        v99->Class isa = (Class)*v133;
        uint64_t v107 = v142;
        uint64_t v108 = v143;
        uint64_t v26 = v120;
        v143(v105, v142, v120);
        uint64_t v109 = &v132[*(int *)(v98 + 48)];
        v108(v109, v107, v26);
        Swift::String v110 = v134;
        ((void (*)(char *, char *, uint64_t))v128[4])(v134, v109, v26);
        v129(v110, 0, 1, v26);
        __int16 v148 = v106;
        swift_beginAccess();
        unint64_t v111 = v106;
        Dictionary.subscript.setter();
        swift_endAccess();
        sub_100378300();
        swift_errorRelease();
        uint64_t v146 = 0;
        return ((uint64_t (*)(char *, uint64_t))v139)(v105, v26);
      }
LABEL_20:
      uint64_t v118 = type metadata accessor for AWDLPeer(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v118 - 8) + 56))(v123, 1, 1, v118);
      __break(1u);
      goto LABEL_21;
    }
LABEL_19:
    sub_1003A3F1C(type metadata accessor for AWDLPeer, &qword_100484AE8, type metadata accessor for AWDLPeer, type metadata accessor for AWDLPeer);
    char v99 = v140;
    uint64_t v98 = v141;
    if (v38) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }
  sub_100290E38(v95, isUniquelyReferenced_nonNull_native);
  uint64_t v96 = sub_10039F858(v53, (void (*)(unsigned char *, uint64_t))NANClusterChangeEvent.hash(into:), (uint64_t (*)(uint64_t, Swift::Int))sub_100031D78);
  if ((v38 & 1) == (v97 & 1))
  {
    unint64_t v92 = v96;
    char v99 = v140;
    uint64_t v98 = v141;
    if ((v38 & 1) == 0) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
LABEL_21:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10038F084(void **a1, uint64_t a2, void (*a3)(char *, char *, uint64_t), char *a4)
{
  __int16 v156 = a3;
  Class isa = a4;
  uint64_t v6 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation();
  uint64_t v146 = (void (*)(char *, uint64_t))type metadata accessor for Optional();
  uint64_t v145 = *((void *)v146 - 1);
  __chkstk_darwin();
  uint64_t v144 = (char *)v136 - v7;
  uint64_t v160 = type metadata accessor for DispatchTimeInterval();
  uint64_t v162 = *(void *)(v160 - 8);
  __chkstk_darwin();
  Swift::Int v150 = (char *)v136 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v151 = (char *)v136 - v9;
  __chkstk_darwin();
  uint64_t v155 = (char *)v136 - v10;
  __chkstk_darwin();
  uint64_t v166 = (char *)v136 - v11;
  sub_100010BCC(&qword_10047DB90);
  __chkstk_darwin();
  __int16 v163 = (void (*)(char *, uint64_t))((char *)v136 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = type metadata accessor for DispatchTime();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v168 = v13;
  uint64_t v169 = v14;
  __chkstk_darwin();
  uint64_t v154 = (char *)v136 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  char v164 = (char *)v136 - v16;
  sub_10006F314(255, (unint64_t *)&unk_100484A40);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  os_log_t v165 = *(os_log_t *)(TupleTypeMetadata2 - 8);
  __chkstk_darwin();
  int v149 = (char *)v136 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  __int16 v148 = (void **)((char *)v136 - v19);
  __chkstk_darwin();
  uint64_t v143 = (void *)((char *)v136 - v20);
  __chkstk_darwin();
  uint64_t v153 = (char *)v136 - v21;
  __chkstk_darwin();
  unint64_t v152 = (void **)((char *)v136 - v22);
  __chkstk_darwin();
  unint64_t v142 = (void *)((char *)v136 - v23);
  __chkstk_darwin();
  uint64_t v159 = (void **)((char *)v136 - v24);
  __chkstk_darwin();
  uint64_t v26 = (void *)((char *)v136 - v25);
  uint64_t v27 = __chkstk_darwin();
  uint64_t v29 = (char *)v136 - v28;
  os_log_t v30 = *a1;
  uint64_t v31 = (char *)v136 + *(int *)(v27 + 48) - v28;
  *(void *)((char *)v136 - v28) = v30;
  uint64_t v32 = v6;
  uint64_t v33 = *(void *)(v6 - 8);
  uint64_t v34 = *(void (**)(char *, uint64_t))(v33 + 16);
  uint64_t v35 = a2;
  uint64_t v36 = v32;
  v34(v31, v35);
  uint64_t v167 = TupleTypeMetadata2;
  os_log_type_t v37 = (char *)v26 + *(int *)(TupleTypeMetadata2 + 48);
  *uint64_t v26 = v30;
  uint64_t v38 = (uint64_t)v163;
  uint64_t v161 = (uint64_t)v31;
  BOOL v39 = v31;
  uint64_t v40 = v33 + 16;
  __int16 v157 = v34;
  ((void (*)(char *, char *, uint64_t))v34)(v37, v39, v36);
  sub_1000136F4((uint64_t)&v37[*(int *)(v36 + 36)], v38, &qword_10047DB90);
  uint64_t v140 = v33;
  uint64_t v41 = v33 + 8;
  uint64_t v42 = *(char **)(v33 + 8);
  id v43 = v30;
  uint64_t v44 = v37;
  uint64_t v45 = v42;
  uint64_t v46 = v168;
  uint64_t v158 = v41;
  ((void (*)(char *, uint64_t))v45)(v44, v36);
  uint64_t v47 = v169;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v169 + 48))(v38, 1, v46) == 1)
  {
    ((void (*)(char *, uint64_t))v165[1].isa)(v29, v167);

    sub_1000380B4(v38, &qword_10047DB90);
    return 0;
  }
  uint64_t v139 = v29;
  uint64_t v49 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))(v164, v38, v46);
  type metadata accessor for P2PTimer();
  uint64_t v50 = v154;
  __int16 v163 = (void (*)(char *, uint64_t))v45;
  variable initialization expression of AWDLPeer.lastUpdated();
  uint64_t v51 = v166;
  DispatchTime.distance(to:)();
  unint64_t v52 = *(char **)(v49 + 8);
  uint64_t v169 = v49 + 8;
  uint64_t v154 = v52;
  ((void (*)(char *, uint64_t))v52)(v50, v46);
  sub_10006F314(0, (unint64_t *)&qword_10047DC50);
  uint64_t v53 = v167;
  uint64_t v54 = (char *)v159 + *(int *)(v167 + 48);
  *uint64_t v159 = v43;
  uint64_t v138 = v40;
  unint64_t v55 = (void (*)(char *, uint64_t, uint64_t))v157;
  ((void (*)(char *, uint64_t, uint64_t))v157)(v54, v161, v36);
  id v141 = v43;
  id v56 = [v43 peerAddress];
  char v57 = static NSObject.== infix(_:_:)();

  uint64_t v137 = v36;
  v163(v54, v36);
  uint64_t v58 = v162;
  uint64_t v59 = v162 + 16;
  uint64_t v60 = v155;
  uint64_t v61 = v160;
  __int16 v156 = *(void (**)(char *, char *, uint64_t))(v162 + 16);
  v156(v155, v51, v160);
  uint64_t v62 = v164;
  if (v57)
  {
    uint64_t v63 = v53;
    uint64_t v64 = v164;
    id v65 = *(void (**)(char *, uint64_t))(v58 + 8);
    v65(v60, v61);
    os_log_t v66 = v165;
    os_log_type_t v67 = v141;
  }
  else
  {
    v136[1] = v59;
    uint64_t v68 = v151;
    *(void *)uint64_t v151 = 180;
    (*(void (**)(char *, void, uint64_t))(v58 + 104))(v68, enum case for DispatchTimeInterval.seconds(_:), v61);
    BOOL v69 = static DispatchTimeInterval.< infix(_:_:)();
    uint64_t v70 = *(void (**)(char *, uint64_t))(v58 + 8);
    v70(v68, v61);
    uint64_t v155 = (char *)v70;
    uint64_t v71 = v58 + 8;
    v70(v60, v61);
    os_log_t v66 = v165;
    if (!v69)
    {
      uint64_t v162 = v71;
      uint64_t v72 = v167;
      uint64_t v73 = (char *)v159 + *(int *)(v167 + 48);
      os_log_t v74 = v141;
      *uint64_t v159 = v141;
      uint64_t v75 = v74;
      uint64_t v76 = v161;
      uint64_t v77 = v137;
      v55(v73, v161, v137);
      uint64_t v78 = v140;
      uint64_t v79 = (uint64_t)v144;
      (*(void (**)(char *, char *, uint64_t))(v140 + 32))(v144, v73, v77);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v78 + 56))(v79, 0, 1, v77);
      uint64_t v80 = isa;
      sub_1003885BC(v75, v79);
      (*(void (**)(uint64_t, void *))(v145 + 8))(v79, v146);
      uint64_t v151 = &v80[*(void *)(*(void *)v80 + 160)];
      unint64_t v81 = v142;
      unint64_t v82 = (char *)v142 + *(int *)(v72 + 48);
      *unint64_t v142 = v75;
      v55(v82, v76, v77);
      Class isa = (char *)v66[2].isa;
      ((void (*)(void **, void *, uint64_t))isa)(v152, v81, v72);
      uint64_t v83 = (void (*)(void, void, void))v66[4].isa;
      v83(v153, v81, v72);
      unint64_t v84 = v143;
      char v85 = (char *)v143 + *(int *)(v72 + 48);
      os_log_t v86 = v141;
      *uint64_t v143 = v141;
      v55(v85, v161, v77);
      char v87 = v148;
      ((void (*)(void **, void *, uint64_t))isa)(v148, v84, v72);
      unint64_t v88 = v149;
      char v89 = v84;
      uint64_t v90 = v72;
      v83(v149, v89, v72);
      uint64_t v91 = v160;
      unint64_t v92 = v150;
      v156(v150, v166, v160);
      id v93 = v86;
      BOOL v94 = Logger.logObject.getter();
      os_log_type_t v95 = static os_log_type_t.error.getter();
      int v96 = v95;
      if (os_log_type_enabled(v94, v95))
      {
        char v97 = (char *)swift_slowAlloc();
        uint64_t v161 = swift_slowAlloc();
        uint64_t v172 = v161;
        Class isa = v97;
        *(_DWORD *)char v97 = 136315650;
        uint64_t v151 = v97 + 4;
        uint64_t v98 = *(int *)(v90 + 48);
        uint64_t v99 = v90;
        uint64_t v100 = v159;
        uint64_t v101 = (char *)v159 + v98;
        uint64_t v102 = v152;
        uint64_t v103 = (char *)v152 + v98;
        uint64_t v104 = *v152;
        *uint64_t v159 = *v152;
        LODWORD(v156) = v96;
        uint64_t v105 = v137;
        ((void (*)(char *, char *, uint64_t))v157)((char *)v100 + v98, v103, v137);
        id v106 = [v104 uniqueIdentifier];
        v163(v101, v105);
        Class v107 = v165[1].isa;
        ((void (*)(void **, uint64_t))v107)(v102, v99);
        uint64_t v146 = (void (*)(char *, uint64_t))v107;
        uint64_t v108 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        os_log_t v165 = v94;
        uint64_t v109 = v108;
        unint64_t v111 = v110;

        uint64_t v112 = sub_100010680(v109, v111, &v172);
        uint64_t v113 = isa;
        uint64_t v170 = v112;
        unint64_t v152 = (void **)&v171;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        ((void (*)(char *, uint64_t))v107)(v153, v99);
        *((_WORD *)v113 + 6) = 2080;
        uint64_t v153 = v113 + 14;
        uint64_t v114 = *(int *)(v99 + 48);
        uint64_t v115 = (char *)v100 + v114;
        uint64_t v116 = v148;
        uint64_t v117 = (char *)v148 + v114;
        uint64_t v118 = *v148;
        *uint64_t v100 = *v148;
        ((void (*)(char *, char *, uint64_t))v157)((char *)v100 + v114, v117, v105);
        id v119 = [v118 peerAddress];
        unint64_t v120 = WiFiMACAddress.wifiAddress.getter();

        v163(v115, v105);
        uint64_t v121 = v116;
        uint64_t v122 = v146;
        v146((char *)v121, v99);
        uint64_t v123 = WiFiAddress.description.getter(v120 & 0xFFFFFFFFFFFFLL);
        uint64_t v170 = sub_100010680(v123, v124, &v172);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v125 = v99;
        v122(v149, v99);
        uint64_t v126 = v122;
        *((_WORD *)v113 + 11) = 2080;
        uint64_t v127 = v150;
        uint64_t v128 = DispatchTimeInterval.description.getter();
        uint64_t v170 = sub_100010680(v128, v129, &v172);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v130 = v160;
        uint64_t v131 = (void (*)(char *, uint64_t))v155;
        ((void (*)(char *, uint64_t))v155)(v127, v160);
        os_log_t v132 = v165;
        _os_log_impl((void *)&_mh_execute_header, v165, (os_log_type_t)v156, "Cleared responder traffic registration for %s from %s (expired while in recovery for %s)", (uint8_t *)v113, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v131(v166, v130);
        ((void (*)(char *, uint64_t))v154)(v164, v168);
        v126(v139, v125);
      }
      else
      {
        Class v133 = v165[1].isa;
        ((void (*)(void **, uint64_t))v133)(v87, v90);
        ((void (*)(void **, uint64_t))v133)(v152, v90);

        char v134 = v92;
        uint64_t v135 = (void (*)(char *, uint64_t))v155;
        ((void (*)(char *, uint64_t))v155)(v134, v91);
        ((void (*)(char *, uint64_t))v133)(v88, v90);
        ((void (*)(char *, uint64_t))v133)(v153, v90);
        v135(v166, v91);
        ((void (*)(char *, uint64_t))v154)(v164, v168);
        ((void (*)(char *, uint64_t))v133)(v139, v90);
      }
      return 0;
    }
    uint64_t v64 = v62;
    id v65 = (void (*)(char *, uint64_t))v155;
    os_log_type_t v67 = v141;
    uint64_t v63 = v167;
  }

  v65(v166, v61);
  ((void (*)(char *, uint64_t))v154)(v64, v168);
  ((void (*)(char *, uint64_t))v66[1].isa)(v139, v63);
  return 1;
}

uint64_t sub_10038FFA0(void **a1, void (*a2)(char *, uint64_t), uint64_t *a3, uint64_t a4, unsigned char *a5)
{
  uint64_t v145 = a5;
  uint64_t v142 = a4;
  uint64_t v5 = (uint64_t)a3;
  uint64_t v159 = a2;
  uint64_t v7 = *a3;
  uint64_t v148 = type metadata accessor for DispatchTimeInterval();
  uint64_t v153 = *(void *)(v148 - 8);
  __chkstk_darwin();
  unint64_t v151 = (unint64_t)&v124 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v155 = (char *)&v124 - v9;
  sub_100010BCC(&qword_10047DB90);
  __chkstk_darwin();
  uint64_t v160 = (uint64_t)&v124 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v154 = type metadata accessor for DispatchTime();
  uint64_t v158 = *(void *)(v154 - 8);
  __chkstk_darwin();
  uint64_t v144 = (char *)&v124 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v152 = (char *)&v124 - v12;
  sub_10006F314(255, (unint64_t *)&unk_100484A40);
  uint64_t v13 = *(void *)(v7 + 408);
  uint64_t v147 = v5;
  uint64_t v14 = *(void *)(v7 + 416);
  uint64_t v140 = v13;
  uint64_t v139 = v14;
  uint64_t v15 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v146 = *(void *)(TupleTypeMetadata2 - 8);
  __chkstk_darwin();
  uint64_t v138 = (char *)&v124 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v137 = (void **)((char *)&v124 - v18);
  __chkstk_darwin();
  os_log_t v136 = (void **)((char *)&v124 - v19);
  __chkstk_darwin();
  Swift::Int v150 = (char *)&v124 - v20;
  __chkstk_darwin();
  int v149 = (void **)((char *)&v124 - v21);
  __chkstk_darwin();
  uint64_t v143 = (void **)((char *)&v124 - v22);
  __chkstk_darwin();
  uint64_t v24 = (void **)((char *)&v124 - v23);
  __chkstk_darwin();
  uint64_t v26 = (char *)&v124 - v25;
  sub_10006F314(0, (unint64_t *)&qword_10047DC50);
  uint64_t v27 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v28 = &v26[v27];
  uint64_t v29 = (char *)a1 + v27;
  __int16 v156 = a1;
  os_log_t v30 = *a1;
  id v141 = v26;
  *(void *)uint64_t v26 = v30;
  uint64_t v31 = *(void *)(v15 - 8);
  uint64_t v32 = v31 + 16;
  __int16 v157 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
  v157(v28, v29, v15);
  id v33 = [v30 peerAddress];
  LOBYTE(v5) = static NSObject.== infix(_:_:)();

  uint64_t v34 = v15;
  os_log_type_t v37 = *(void (**)(char *, uint64_t))(v31 + 8);
  uint64_t v36 = v31 + 8;
  uint64_t v35 = v37;
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v37)(v28, v34);
  if ((v5 & 1) == 0) {
    return result;
  }
  BOOL v39 = (char *)v24 + *(int *)(TupleTypeMetadata2 + 48);
  *uint64_t v24 = *v156;
  v157(v39, v29, v34);
  uint64_t v40 = v160;
  sub_1000136F4((uint64_t)&v39[*(int *)(v34 + 36)], v160, &qword_10047DB90);
  uint64_t v159 = v35;
  v35(v39, v34);
  uint64_t v41 = v158;
  uint64_t v42 = v154;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v158 + 48))(v40, 1, v154) == 1) {
    return sub_1000380B4(v160, &qword_10047DB90);
  }
  uint64_t v134 = v36;
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 32))(v152, v160, v42);
  type metadata accessor for P2PTimer();
  id v43 = v144;
  variable initialization expression of AWDLPeer.lastUpdated();
  DispatchTime.distance(to:)();
  uint64_t v144 = *(char **)(v41 + 8);
  ((void (*)(char *, uint64_t))v144)(v43, v42);
  uint64_t v44 = (void **)(v147 + *(void *)(*(void *)v147 + 160));
  uint64_t v45 = v143;
  uint64_t v46 = (char *)v143 + *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v47 = *v156;
  *uint64_t v143 = *v156;
  os_log_t v132 = v29;
  uint64_t v135 = v32;
  v157(v46, v29, v34);
  uint64_t v48 = v146;
  uint64_t v49 = *(void (**)(void **, void **, uint64_t))(v146 + 16);
  uint64_t v131 = v146 + 16;
  uint64_t v130 = v49;
  v49(v149, v45, TupleTypeMetadata2);
  uint64_t v50 = *(void (**)(char *, void **, uint64_t))(v48 + 32);
  uint64_t v129 = v48 + 32;
  uint64_t v128 = v50;
  v50(v150, v45, TupleTypeMetadata2);
  uint64_t v51 = v153;
  unint64_t v52 = *(void (**)(unint64_t, char *, uint64_t))(v153 + 16);
  uint64_t v160 = TupleTypeMetadata2;
  uint64_t v53 = v34;
  uint64_t v54 = v148;
  v52(v151, v155, v148);
  id v55 = v47;
  uint64_t v143 = v44;
  id v56 = Logger.logObject.getter();
  os_log_type_t v57 = static os_log_type_t.default.getter();
  int v58 = v57;
  BOOL v59 = os_log_type_enabled(v56, v57);
  uint64_t v158 = v41 + 8;
  uint64_t v133 = v53;
  if (!v59)
  {
    unint64_t v82 = *(void (**)(char *, uint64_t))(v48 + 8);
    uint64_t v90 = v160;
    v82((char *)v149, v160);

    v82(v150, v90);
    uint64_t v80 = *(void (**)(unint64_t, uint64_t))(v51 + 8);
    v80(v151, v54);
    uint64_t v83 = v161;
    if ((*v145 & 1) == 0) {
      goto LABEL_7;
    }
LABEL_10:
    v80((unint64_t)v155, v54);
    return ((uint64_t (*)(char *, uint64_t))v144)(v152, v154);
  }
  uint64_t v60 = swift_slowAlloc();
  os_log_t v126 = v56;
  uint64_t v61 = v60;
  uint64_t v127 = swift_slowAlloc();
  uint64_t v163 = v127;
  *(_DWORD *)uint64_t v61 = 136315650;
  int v125 = v58;
  uint64_t v124 = v61 + 4;
  uint64_t v62 = v160;
  uint64_t v63 = *(int *)(v160 + 48);
  uint64_t v64 = v141;
  id v65 = &v141[v63];
  os_log_t v66 = (char *)v149;
  os_log_type_t v67 = (char *)v149 + v63;
  uint64_t v68 = *v149;
  *(void *)id v141 = *v149;
  v157(&v64[v63], v67, v53);
  id v69 = [v68 uniqueIdentifier];
  v159(v65, v53);
  uint64_t v70 = *(void (**)(char *, uint64_t))(v48 + 8);
  v70(v66, v62);
  uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v73 = v72;

  uint64_t v162 = sub_100010680(v71, v73, &v163);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  v70(v150, v62);
  uint64_t v54 = v148;
  *(_WORD *)(v61 + 12) = 2080;
  uint64_t v74 = WiFiAddress.description.getter(v142 & 0xFFFFFFFFFFFFLL);
  uint64_t v162 = sub_100010680(v74, v75, &v163);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  *(_WORD *)(v61 + 22) = 2080;
  unint64_t v76 = v151;
  uint64_t v77 = DispatchTimeInterval.description.getter();
  uint64_t v162 = sub_100010680(v77, v78, &v163);
  uint64_t v79 = v153;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  uint64_t v80 = *(void (**)(unint64_t, uint64_t))(v79 + 8);
  v80(v76, v54);
  os_log_t v81 = v126;
  _os_log_impl((void *)&_mh_execute_header, v126, (os_log_type_t)v125, "Attempting to recover responder traffic registration for %s from %s (in recovery for %s)", (uint8_t *)v61, 0x20u);
  swift_arrayDestroy();
  unint64_t v82 = v70;
  swift_slowDealloc();
  swift_slowDealloc();

  uint64_t v83 = v161;
  if (*v145) {
    goto LABEL_10;
  }
LABEL_7:
  unint64_t v84 = Logger.logObject.getter();
  os_log_type_t v85 = static os_log_type_t.info.getter();
  BOOL v86 = os_log_type_enabled(v84, v85);
  int v149 = (void **)v82;
  Swift::Int v150 = (char *)v80;
  if (v86)
  {
    char v87 = (uint8_t *)swift_slowAlloc();
    uint64_t v163 = swift_slowAlloc();
    *(_DWORD *)char v87 = 136315138;
    unint64_t v151 = v142 & 0xFFFFFFFFFFFFLL;
    uint64_t v88 = WiFiAddress.description.getter(v142 & 0xFFFFFFFFFFFFLL);
    uint64_t v162 = sub_100010680(v88, v89, &v163);
    uint64_t v83 = v161;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v54 = v148;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v84, v85, "Attempting to send responder traffic registration recovery frame to %s", v87, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    unint64_t v151 = v142 & 0xFFFFFFFFFFFFLL;
  }
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  unint64_t v92 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 80);
  uint64_t v93 = swift_checkMetadataState();
  v92(31, v151, v93, AssociatedConformanceWitness);
  if (v83)
  {
    uint64_t v94 = v160;
    os_log_type_t v95 = v136;
    int v96 = (char *)v136 + *(int *)(v160 + 48);
    char v97 = v157;
    uint64_t v98 = *v156;
    *os_log_t v136 = *v156;
    uint64_t v99 = v133;
    v97(v96, v132, v133);
    uint64_t v100 = v137;
    v130(v137, v95, v94);
    uint64_t v101 = v138;
    v128(v138, v95, v94);
    swift_errorRetain();
    swift_errorRetain();
    id v102 = v98;
    uint64_t v103 = Logger.logObject.getter();
    os_log_type_t v104 = static os_log_type_t.error.getter();
    uint64_t v161 = v103;
    LODWORD(v156) = v104;
    if (os_log_type_enabled(v103, v104))
    {
      uint64_t v105 = swift_slowAlloc();
      uint64_t v145 = (unsigned char *)swift_slowAlloc();
      uint64_t v147 = swift_slowAlloc();
      uint64_t v163 = v147;
      *(_DWORD *)uint64_t v105 = 136315650;
      uint64_t v143 = (void **)(v105 + 4);
      uint64_t v106 = *(int *)(v94 + 48);
      Class v107 = v141;
      uint64_t v108 = &v141[v106];
      uint64_t v109 = (char *)v100 + v106;
      unint64_t v110 = v100;
      unint64_t v111 = *v100;
      *(void *)id v141 = v111;
      v97(&v107[v106], v109, v99);
      id v112 = [v111 uniqueIdentifier];
      v159(v108, v99);
      uint64_t v113 = (void (*)(char *, uint64_t))v149;
      ((void (*)(void **, uint64_t))v149)(v110, v94);
      uint64_t v114 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v116 = v115;

      uint64_t v162 = sub_100010680(v114, v116, &v163);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v113(v138, v94);
      *(_WORD *)(v105 + 12) = 2080;
      uint64_t v117 = WiFiAddress.description.getter(v151);
      uint64_t v162 = sub_100010680(v117, v118, &v163);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v105 + 22) = 2112;
      swift_errorRetain();
      uint64_t v119 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v162 = v119;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(void *)uint64_t v145 = v119;
      swift_errorRelease();
      swift_errorRelease();
      unint64_t v120 = v161;
      _os_log_impl((void *)&_mh_execute_header, v161, (os_log_type_t)v156, "Failed to send responder traffic registration recovery frame for %s to %s: %@", (uint8_t *)v105, 0x20u);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      uint64_t v121 = v155;
      uint64_t v122 = v148;
    }
    else
    {
      uint64_t v123 = (void (*)(char *, uint64_t))v149;
      ((void (*)(void **, uint64_t))v149)(v100, v94);

      swift_errorRelease();
      swift_errorRelease();
      v123(v101, v94);
      swift_errorRelease();
      uint64_t v121 = v155;
      uint64_t v122 = v54;
    }
    ((void (*)(char *, uint64_t))v150)(v121, v122);
    return ((uint64_t (*)(char *, uint64_t))v144)(v152, v154);
  }
  else
  {
    ((void (*)(char *, uint64_t))v150)(v155, v54);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v144)(v152, v154);
    *uint64_t v145 = 1;
  }
  return result;
}

uint64_t sub_100390FE0(uint64_t *a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v7 = (uint64_t *)(a4 + *(void *)(*(void *)a4 + 424));
  swift_beginAccess();
  uint64_t v8 = *v7;
  *uint64_t v7 = 0x8000000000000000;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    sub_1003A3F1C(type metadata accessor for AWDLPeer, &qword_100484AE8, type metadata accessor for AWDLPeer, type metadata accessor for AWDLPeer);
    uint64_t result = swift_bridgeObjectRelease();
  }
  if (v5 < 0 || v5 >= 1 << *(unsigned char *)(v8 + 32))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (((*(void *)(v8 + 8 * ((unint64_t)v5 >> 6) + 64) >> v5) & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (*(_DWORD *)(v8 + 36) == v6)
  {
    uint64_t v10 = *(void *)(v8 + 56);
    uint64_t v11 = type metadata accessor for AWDLPeer(0);
    a2(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v5);
    *uint64_t v7 = v8;
    return swift_endAccess();
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_100391150(void **a1, char *a2)
{
  uint64_t v23 = a2;
  sub_10006F314(255, (unint64_t *)&unk_100484A40);
  uint64_t v3 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v24 = *(void *)(TupleTypeMetadata2 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char **)((char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = __chkstk_darwin();
  uint64_t v9 = (char *)&v23 - v8;
  uint64_t v10 = (char *)*a1;
  uint64_t v11 = (char *)&v23 + *(int *)(v7 + 48) - v8;
  *(char **)((char *)&v23 - v8) = v10;
  uint64_t v12 = *(void *)(v3 - 8);
  uint64_t v13 = *(void (**)(void))(v12 + 16);
  ((void (*)(char *, char *, uint64_t))v13)(v11, v23, v3);
  uint64_t v14 = *(int *)(TupleTypeMetadata2 + 48);
  *uint64_t v6 = v10;
  uint64_t v23 = (char *)v6 + v14;
  v13();
  id v15 = [v10 uniqueIdentifier];
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;
  if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v18 == v19) {
    char v21 = 1;
  }
  else {
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v9, TupleTypeMetadata2);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v23, v3);
  return v21 & 1;
}

uint64_t sub_1003913C4@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  sub_10006F314(255, (unint64_t *)&unk_100484A40);
  uint64_t v4 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation();
  swift_getTupleTypeMetadata2();
  uint64_t v5 = __chkstk_darwin();
  uint64_t v7 = (void **)((char *)&v15 - v6);
  uint64_t v8 = *(int *)(v5 + 56);
  uint64_t v9 = (char *)v7 + v8;
  uint64_t v10 = *a1;
  *uint64_t v7 = *a1;
  uint64_t v11 = *(void *)(v4 - 8);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))((char *)v7 + v8, (char *)a1 + v8, v4);
  id v12 = [v10 peerAddress];
  unint64_t v13 = WiFiMACAddress.wifiAddress.getter();

  *(_WORD *)a2 = v13;
  *(unsigned char *)(a2 + 2) = BYTE2(v13);
  *(unsigned char *)(a2 + 3) = BYTE3(v13);
  *(unsigned char *)(a2 + 4) = BYTE4(v13);
  *(unsigned char *)(a2 + 5) = BYTE5(v13);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v9, v4);
}

uint64_t sub_100391560@<X0>(unsigned __int16 *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (int *)type metadata accessor for AWDLPeer(0);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v60 - v7;
  __chkstk_darwin();
  uint64_t v10 = (char *)&v60 - v9;
  uint64_t v11 = *(unsigned int *)(a1 + 1);
  uint64_t v12 = *a1;
  id v69 = _swiftEmptyDictionarySingleton;
  sub_100010BCC((uint64_t *)&unk_1004853E0);
  Dictionary.reserveCapacity(_:)(10);
  sub_100376468(v12 | (v11 << 16), (uint64_t)v10);
  uint64_t v13 = WiFiAddress.data.getter(*(unsigned __int16 *)&v10[v4[5]] | ((unint64_t)*(unsigned int *)&v10[v4[5] + 2] << 16));
  *((void *)&v68 + 1) = &type metadata for Data;
  *(void *)&long long v67 = v13;
  *((void *)&v67 + 1) = v14;
  sub_10003803C(&v67, &v65);
  uint64_t v15 = v69;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v63 = v15;
  sub_100034178(&v65, 0x5F4E4F4954415453, 0xEB0000000043414DLL, isUniquelyReferenced_nonNull_native);
  uint64_t v17 = v63;
  swift_bridgeObjectRelease();
  uint64_t v18 = &v10[v4[24]];
  uint64_t v19 = *(void *)v18;
  LOBYTE(v12) = v18[8];
  sub_1003AB930((uint64_t)v10, (uint64_t)v8, type metadata accessor for AWDLPeer);
  if (v12)
  {
    uint64_t v20 = &v8[v4[23]];
    uint64_t v21 = *(void *)v20;
    int v22 = v20[8];
    sub_1003AB6C0((uint64_t)v8, type metadata accessor for AWDLPeer);
    if (v22) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = v21;
    }
  }
  else
  {
    sub_1003AB6C0((uint64_t)v8, type metadata accessor for AWDLPeer);
  }
  *((void *)&v68 + 1) = &type metadata for Int;
  *(void *)&long long v67 = v19;
  sub_10003803C(&v67, &v65);
  char v23 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v63 = v17;
  sub_100034178(&v65, 0x5F4E4F4954415453, 0xEC00000049535352, v23);
  uint64_t v24 = v63;
  id v69 = (void *)v63;
  swift_bridgeObjectRelease();
  uint64_t v25 = &v10[v4[9]];
  if (v25[48])
  {
    long long v65 = 0u;
    long long v66 = 0u;
  }
  else
  {
    uint64_t v26 = *((void *)v25 + 3);
    if (v25[32]) {
      LODWORD(v26) = dword_1003D7AAC[v26 >> 32];
    }
    else {
      uint64_t v26 = HIDWORD(v26);
    }
    *((void *)&v66 + 1) = &type metadata for UInt32;
    LODWORD(v65) = v26;
  }
  sub_1003AB930((uint64_t)v10, (uint64_t)v6, type metadata accessor for AWDLPeer);
  if (*((void *)&v66 + 1))
  {
    sub_1003AB6C0((uint64_t)v6, type metadata accessor for AWDLPeer);
    sub_10003803C(&v65, &v67);
LABEL_21:
    sub_10003803C(&v67, &v63);
    char v30 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v62[0] = v24;
    sub_100034178(&v63, 0xD00000000000001CLL, 0x80000001003E2120, v30);
    id v69 = *(void **)&v62[0];
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  uint64_t v27 = &v6[v4[8]];
  if (v27[25])
  {
    sub_1003AB6C0((uint64_t)v6, type metadata accessor for AWDLPeer);
    long long v67 = 0u;
    long long v68 = 0u;
  }
  else
  {
    char v28 = v27[24];
    uint64_t v29 = *((void *)v27 + 2);
    if (v28) {
      LODWORD(v29) = dword_1003D7AAC[v29 >> 32];
    }
    else {
      uint64_t v29 = HIDWORD(v29);
    }
    *((void *)&v68 + 1) = &type metadata for UInt32;
    LODWORD(v67) = v29;
    sub_1003AB6C0((uint64_t)v6, type metadata accessor for AWDLPeer);
  }
  sub_1000380B4((uint64_t)&v65, &qword_10047D0D0);
  if (*((void *)&v68 + 1)) {
    goto LABEL_21;
  }
  sub_1000380B4((uint64_t)&v67, &qword_10047D0D0);
  sub_10003395C(0xD00000000000001CLL, 0x80000001003E2120, &v63);
  sub_1000380B4((uint64_t)&v63, &qword_10047D0D0);
LABEL_22:
  uint64_t v31 = &v10[v4[13]];
  uint64_t v32 = *((void *)v31 + 2);
  if (v32)
  {
    uint64_t v33 = *((void *)v31 + 1);
    uint64_t v64 = &type metadata for String;
    *(void *)&long long v63 = v33;
    *((void *)&v63 + 1) = v32;
    sub_10003803C(&v63, v62);
    swift_bridgeObjectRetain();
    uint64_t v34 = v69;
    char v35 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v61 = v34;
    sub_100034178(v62, 0xD000000000000010, 0x80000001003E2140, v35);
    id v69 = v61;
    swift_bridgeObjectRelease();
    if (v25[48]) {
      goto LABEL_24;
    }
  }
  else
  {
    sub_10003395C(0xD000000000000010, 0x80000001003E2140, &v63);
    sub_1000380B4((uint64_t)&v63, &qword_10047D0D0);
    if (v25[48])
    {
LABEL_24:
      sub_10003395C(0xD000000000000017, 0x80000001003E2160, &v63);
      sub_1000380B4((uint64_t)&v63, &qword_10047D0D0);
      if ((v25[48] & 1) == 0) {
        goto LABEL_25;
      }
LABEL_29:
      sub_10003395C(0xD000000000000018, 0x80000001003E2180, &v63);
      sub_1000380B4((uint64_t)&v63, &qword_10047D0D0);
      if ((v25[48] & 1) == 0) {
        goto LABEL_26;
      }
      goto LABEL_30;
    }
  }
  uint64_t v44 = WiFiAddress.data.getter(*(void *)v25 & 0xFFFFFFFFFFFFLL);
  uint64_t v64 = &type metadata for Data;
  *(void *)&long long v63 = v44;
  *((void *)&v63 + 1) = v45;
  sub_10003803C(&v63, v62);
  uint64_t v46 = v69;
  char v47 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v61 = v46;
  sub_100034178(v62, 0xD000000000000017, 0x80000001003E2160, v47);
  id v69 = v61;
  swift_bridgeObjectRelease();
  if (v25[48]) {
    goto LABEL_29;
  }
LABEL_25:
  uint64_t v36 = WiFiAddress.data.getter(*((unsigned __int16 *)v25 + 3) | ((unint64_t)*((void *)v25 + 1) << 16));
  uint64_t v64 = &type metadata for Data;
  *(void *)&long long v63 = v36;
  *((void *)&v63 + 1) = v37;
  sub_10003803C(&v63, v62);
  uint64_t v38 = v69;
  char v39 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v61 = v38;
  sub_100034178(v62, 0xD000000000000018, 0x80000001003E2180, v39);
  id v69 = v61;
  swift_bridgeObjectRelease();
  if ((v25[48] & 1) == 0)
  {
LABEL_26:
    uint64_t v40 = *((void *)v25 + 2);
    uint64_t v64 = &type metadata for UInt32;
    LODWORD(v63) = v40;
    sub_10003803C(&v63, v62);
    uint64_t v41 = v69;
    char v42 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v61 = v41;
    sub_100034178(v62, 0xD000000000000019, 0x80000001003E21A0, v42);
    id v43 = v61;
    id v69 = v61;
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
LABEL_30:
  sub_10003395C(0xD000000000000019, 0x80000001003E21A0, &v63);
  sub_1000380B4((uint64_t)&v63, &qword_10047D0D0);
  id v43 = v69;
LABEL_31:
  uint64_t v48 = swift_bridgeObjectRetain();
  uint64_t v49 = sub_1003745D0(v48);
  swift_bridgeObjectRelease();
  uint64_t v64 = (void *)sub_100010BCC((uint64_t *)&unk_100488360);
  *(void *)&long long v63 = v49;
  sub_10003803C(&v63, v62);
  char v50 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v61 = v43;
  sub_100034178(v62, 0xD000000000000015, 0x80000001003E21C0, v50);
  uint64_t v51 = v61;
  swift_bridgeObjectRelease();
  unint64_t v52 = &v10[v4[16]];
  if (v52[2]) {
    LOBYTE(v53) = 0;
  }
  else {
    unint64_t v53 = 0x1008040201uLL >> (8 * AWDLActionFrame.Version.platformType.getter(*(_WORD *)v52));
  }
  uint64_t v64 = &type metadata for UInt8;
  LOBYTE(v63) = v53;
  sub_10003803C(&v63, v62);
  char v54 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v61 = v51;
  sub_100034178(v62, 0xD000000000000015, 0x80000001003E21E0, v54);
  id v55 = v61;
  id v69 = v61;
  swift_bridgeObjectRelease();
  if (v52[2])
  {
    sub_10003395C(0xD000000000000014, 0x80000001003DD140, &v63);
    sub_1000380B4((uint64_t)&v63, &qword_10047D0D0);
    id v56 = v69;
  }
  else
  {
    char v57 = *v52;
    uint64_t v64 = &type metadata for UInt8;
    LOBYTE(v63) = v57;
    sub_10003803C(&v63, v62);
    char v58 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v61 = v55;
    sub_100034178(v62, 0xD000000000000014, 0x80000001003DD140, v58);
    id v56 = v61;
    swift_bridgeObjectRelease();
  }
  uint64_t result = sub_1003AB6C0((uint64_t)v10, type metadata accessor for AWDLPeer);
  *a2 = v56;
  return result;
}

void sub_100391E48(uint64_t a1@<X0>, void *a2@<X8>)
{
  long long v27 = *(_OWORD *)(a1 + 24);
  __int16 v28 = *(_WORD *)(a1 + 40);
  long long v29 = *(_OWORD *)(a1 + 8);
  long long v30 = v27;
  __int16 v31 = v28;
  sub_100036198((uint64_t)&v29);
  sub_100036198((uint64_t)&v30);
  uint64_t v4 = DNSRecords.PTR.description.getter();
  uint64_t v6 = v5;
  sub_1000361C4((uint64_t)&v29);
  sub_1000361C4((uint64_t)&v30);
  v7._uint64_t countAndFlagsBits = 1381257274;
  v7._object = (void *)0xE400000000000000;
  String.append(_:)(v7);
  uint64_t v8 = v6;
  uint64_t v9 = sub_1000C5698(0, 1, 1, _swiftEmptyArrayStorage);
  unint64_t v11 = v9[2];
  unint64_t v10 = v9[3];
  if (v11 >= v10 >> 1) {
    uint64_t v9 = sub_1000C5698((void *)(v10 > 1), v11 + 1, 1, v9);
  }
  long long v9[2] = v11 + 1;
  uint64_t v12 = &v9[2 * v11];
  v12[4] = v4;
  v12[5] = v8;
  if (*(void *)(a1 + 56))
  {
    sub_100036198((uint64_t)&v29);
    sub_100036198((uint64_t)&v30);
    uint64_t v13 = DNSRecords.PTR.description.getter();
    uint64_t v15 = v14;
    sub_1000361C4((uint64_t)&v29);
    sub_1000361C4((uint64_t)&v30);
    v16._uint64_t countAndFlagsBits = 1415074874;
    v16._object = (void *)0xE400000000000000;
    String.append(_:)(v16);
    unint64_t v18 = v9[2];
    unint64_t v17 = v9[3];
    if (v18 >= v17 >> 1) {
      uint64_t v9 = sub_1000C5698((void *)(v17 > 1), v18 + 1, 1, v9);
    }
    long long v9[2] = v18 + 1;
    uint64_t v19 = &v9[2 * v18];
    void v19[4] = v13;
    v19[5] = v15;
  }
  sub_100036198((uint64_t)&v29);
  sub_100036198((uint64_t)&v30);
  uint64_t v20 = DNSRecords.PTR.description.getter();
  uint64_t v22 = v21;
  sub_1000361C4((uint64_t)&v29);
  sub_1000361C4((uint64_t)&v30);
  v23._uint64_t countAndFlagsBits = 1448235834;
  v23._object = (void *)0xE400000000000000;
  String.append(_:)(v23);
  unint64_t v25 = v9[2];
  unint64_t v24 = v9[3];
  if (v25 >= v24 >> 1) {
    uint64_t v9 = sub_1000C5698((void *)(v24 > 1), v25 + 1, 1, v9);
  }
  long long v9[2] = v25 + 1;
  uint64_t v26 = &v9[2 * v25];
  void v26[4] = v20;
  uint64_t v26[5] = v22;
  *a2 = v9;
}

uint64_t sub_100392070(void **a1, unsigned char *a2, uint64_t a3, char *a4, void *a5)
{
  id v69 = a5;
  unint64_t v73 = a2;
  uint64_t v74 = a3;
  uint64_t v7 = *(void *)a4;
  sub_100010BCC(&qword_1004862B0);
  __chkstk_darwin();
  long long v68 = &v55[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100010BCC(&qword_10047DB90);
  __chkstk_darwin();
  long long v67 = &v55[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for DispatchTime();
  uint64_t v61 = *(void *)(v10 - 8);
  uint64_t v62 = v10;
  __chkstk_darwin();
  long long v65 = &v55[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = *(void *)(v7 + 408);
  uint64_t v71 = a4;
  uint64_t v63 = *(void *)(v7 + 416);
  uint64_t v64 = v12;
  uint64_t v13 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation();
  type metadata accessor for Optional();
  __chkstk_darwin();
  long long v66 = &v55[-v14];
  uint64_t v70 = sub_10006F314(255, (unint64_t *)&unk_100484A40);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v75 = *(void *)(TupleTypeMetadata2 - 8);
  __chkstk_darwin();
  uint64_t v60 = &v55[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  char v58 = (void (*)(void))&v55[-v17];
  __chkstk_darwin();
  uint64_t v19 = &v55[-v18];
  uint64_t v20 = __chkstk_darwin();
  uint64_t v22 = &v55[-v21];
  Swift::String v23 = *a1;
  unint64_t v24 = &v55[*(int *)(v20 + 48) - v21];
  *(void *)&v55[-v21] = *a1;
  uint64_t v25 = *(void *)(v13 - 8);
  uint64_t v26 = *(void (**)(void))(v25 + 16);
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v26)(v24, v73, v13);
  unint64_t v72 = (void (*)(char *, uint64_t))sub_10006F314(0, (unint64_t *)&qword_10047DC50);
  uint64_t v76 = TupleTypeMetadata2;
  long long v27 = (char *)v19 + *(int *)(TupleTypeMetadata2 + 48);
  BOOL v59 = v19;
  *uint64_t v19 = v23;
  unint64_t v73 = v24;
  ((void (*)(char *, unsigned char *, uint64_t))v26)(v27, v24, v13);
  id v28 = v23;
  id v29 = [v28 peerAddress];
  int v30 = static NSObject.== infix(_:_:)();

  uint64_t v74 = v25;
  __int16 v31 = *(void (**)(char *, uint64_t))(v25 + 8);
  v31(v27, v13);
  if ((v30 & 1) == 0)
  {
    (*(void (**)(unsigned char *, uint64_t))(v75 + 8))(v22, v76);

    return (v30 & 1) == 0;
  }
  int v56 = v30;
  char v57 = v22;
  uint64_t v32 = (char *)v58 + *(int *)(v76 + 48);
  *(void *)char v58 = v28;
  char v58 = v26;
  ((void (*)(char *, unsigned char *, uint64_t))v26)(v32, v73, v13);
  uint64_t v33 = *(void **)&v71[*(void *)(*(void *)v71 + 752)];
  uint64_t v34 = v28;
  unint64_t v72 = v31;
  if (v33)
  {
    id v35 = v28;
    uint64_t v36 = v31;
    id v37 = v35;
    id v38 = v33;
    char v39 = static NSObject.== infix(_:_:)();

    v36(v32, v13);
    if (v39) {
      sub_1003927B4(v37);
    }
  }
  else
  {
    v31(v32, v13);
  }
  uint64_t v40 = v76;
  uint64_t v71 = (char *)v59 + *(int *)(v76 + 48);
  *BOOL v59 = v34;
  uint64_t v41 = v73;
  char v42 = v58;
  v58();
  uint64_t v43 = *(int *)(v40 + 48);
  uint64_t v44 = v60;
  uint64_t v45 = (char *)v60 + v43;
  *uint64_t v60 = v34;
  ((void (*)(char *, unsigned char *, uint64_t))v42)((char *)v44 + v43, v41, v13);
  uint64_t v47 = v61;
  uint64_t v46 = v62;
  uint64_t v48 = *(void (**)(unsigned char *, char *, uint64_t))(v61 + 16);
  unint64_t v73 = v34;
  uint64_t v49 = (uint64_t)v65;
  v48(v65, v45, v62);
  v72(v45, v13);
  type metadata accessor for P2PTimer();
  uint64_t v50 = (uint64_t)v67;
  variable initialization expression of AWDLPeer.lastUpdated();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v47 + 56))(v50, 0, 1, v46);
  uint64_t v51 = type metadata accessor for UUID();
  uint64_t v52 = (uint64_t)v68;
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v68, 1, 1, v51);
  unint64_t v53 = v66;
  sub_100387508(v49, v50, v52, (uint64_t)v66);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v74 + 56))(v53, 0, 1, v13);
  uint64_t v77 = v73;
  swift_beginAccess();
  sub_100296BC4();
  type metadata accessor for Dictionary();
  Dictionary.subscript.setter();
  swift_endAccess();
  sub_100378300();
  (*(void (**)(unsigned char *, uint64_t))(v75 + 8))(v57, v76);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v72)(v71, v13);
  if (!__OFADD__(*v69, 1))
  {
    ++*v69;
    LOBYTE(v30) = v56;
    return (v30 & 1) == 0;
  }
  __break(1u);
  return result;
}

void sub_1003927B4(void *a1)
{
  uint64_t v2 = v1;
  id v4 = [a1 peerAddress];
  unint64_t v5 = WiFiMACAddress.wifiAddress.getter();

  id v6 = a1;
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315394;
    id v10 = [v6 uniqueIdentifier];
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v13 = v12;

    sub_100010680(v11, v13, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    uint64_t v14 = WiFiAddress.description.getter(v5 & 0xFFFFFFFFFFFFLL);
    sub_100010680(v14, v15, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Exiting retro mode for %s from %s, enabling infrastructure Wi-Fi", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  swift_unownedRetainStrong();
  sub_10033C098();
  swift_release();
  uint64_t v16 = *(void *)(*(void *)v2 + 752);
  uint64_t v17 = *(void **)(v2 + v16);
  *(void *)(v2 + v16) = 0;
}

uint64_t sub_100392A04(void **a1, unsigned char *a2, uint64_t a3, char *a4, void *a5)
{
  id v69 = a5;
  unint64_t v73 = a2;
  uint64_t v74 = a3;
  uint64_t v7 = *(void *)a4;
  sub_100010BCC(&qword_1004862B0);
  __chkstk_darwin();
  long long v68 = &v55[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100010BCC(&qword_10047DB90);
  __chkstk_darwin();
  long long v67 = &v55[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for DispatchTime();
  uint64_t v61 = *(void *)(v10 - 8);
  uint64_t v62 = v10;
  __chkstk_darwin();
  long long v65 = &v55[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = *(void *)(v7 + 408);
  uint64_t v71 = a4;
  uint64_t v63 = *(void *)(v7 + 416);
  uint64_t v64 = v12;
  uint64_t v13 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation();
  type metadata accessor for Optional();
  __chkstk_darwin();
  long long v66 = &v55[-v14];
  uint64_t v70 = sub_10006F314(255, (unint64_t *)&unk_100484A40);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v75 = *(void *)(TupleTypeMetadata2 - 8);
  __chkstk_darwin();
  uint64_t v60 = &v55[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  char v58 = (void (*)(void))&v55[-v17];
  __chkstk_darwin();
  uint64_t v19 = &v55[-v18];
  uint64_t v20 = __chkstk_darwin();
  uint64_t v22 = &v55[-v21];
  Swift::String v23 = *a1;
  unint64_t v24 = &v55[*(int *)(v20 + 48) - v21];
  *(void *)&v55[-v21] = *a1;
  uint64_t v25 = *(void *)(v13 - 8);
  uint64_t v26 = *(void (**)(void))(v25 + 16);
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v26)(v24, v73, v13);
  unint64_t v72 = (void (*)(char *, uint64_t))sub_10006F314(0, (unint64_t *)&qword_10047DC50);
  uint64_t v76 = TupleTypeMetadata2;
  long long v27 = (char *)v19 + *(int *)(TupleTypeMetadata2 + 48);
  BOOL v59 = v19;
  *uint64_t v19 = v23;
  unint64_t v73 = v24;
  ((void (*)(char *, unsigned char *, uint64_t))v26)(v27, v24, v13);
  id v28 = v23;
  id v29 = [v28 peerAddress];
  int v30 = static NSObject.== infix(_:_:)();

  uint64_t v74 = v25;
  __int16 v31 = *(void (**)(char *, uint64_t))(v25 + 8);
  v31(v27, v13);
  if ((v30 & 1) == 0)
  {
    (*(void (**)(unsigned char *, uint64_t))(v75 + 8))(v22, v76);

    return (v30 & 1) == 0;
  }
  int v56 = v30;
  char v57 = v22;
  uint64_t v32 = (char *)v58 + *(int *)(v76 + 48);
  *(void *)char v58 = v28;
  char v58 = v26;
  ((void (*)(char *, unsigned char *, uint64_t))v26)(v32, v73, v13);
  uint64_t v33 = *(void **)&v71[*(void *)(*(void *)v71 + 752)];
  uint64_t v34 = v28;
  unint64_t v72 = v31;
  if (v33)
  {
    id v35 = v28;
    uint64_t v36 = v31;
    id v37 = v35;
    id v38 = v33;
    char v39 = static NSObject.== infix(_:_:)();

    v36(v32, v13);
    if (v39) {
      sub_1003927B4(v37);
    }
  }
  else
  {
    v31(v32, v13);
  }
  uint64_t v40 = v76;
  uint64_t v71 = (char *)v59 + *(int *)(v76 + 48);
  *BOOL v59 = v34;
  uint64_t v41 = v73;
  char v42 = v58;
  v58();
  uint64_t v43 = *(int *)(v40 + 48);
  uint64_t v44 = v60;
  uint64_t v45 = (char *)v60 + v43;
  *uint64_t v60 = v34;
  ((void (*)(char *, unsigned char *, uint64_t))v42)((char *)v44 + v43, v41, v13);
  uint64_t v47 = v61;
  uint64_t v46 = v62;
  uint64_t v48 = *(void (**)(unsigned char *, char *, uint64_t))(v61 + 16);
  unint64_t v73 = v34;
  uint64_t v49 = (uint64_t)v65;
  v48(v65, v45, v62);
  v72(v45, v13);
  type metadata accessor for P2PTimer();
  uint64_t v50 = (uint64_t)v67;
  variable initialization expression of AWDLPeer.lastUpdated();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v47 + 56))(v50, 0, 1, v46);
  uint64_t v51 = type metadata accessor for UUID();
  uint64_t v52 = (uint64_t)v68;
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v68, 1, 1, v51);
  unint64_t v53 = v66;
  sub_100387508(v49, v50, v52, (uint64_t)v66);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v74 + 56))(v53, 0, 1, v13);
  uint64_t v77 = v73;
  swift_beginAccess();
  sub_100296BC4();
  type metadata accessor for Dictionary();
  Dictionary.subscript.setter();
  swift_endAccess();
  sub_100378300();
  (*(void (**)(unsigned char *, uint64_t))(v75 + 8))(v57, v76);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v72)(v71, v13);
  if (!__OFADD__(*v69, 1))
  {
    ++*v69;
    LOBYTE(v30) = v56;
    return (v30 & 1) == 0;
  }
  __break(1u);
  return result;
}

uint64_t sub_100393148@<X0>(unint64_t *a1@<X0>, void *a2@<X2>, unsigned char *a3@<X8>)
{
  unint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_10011A478(v5, v6);
  unint64_t v9 = v8;
  uint64_t v10 = WiFiInterface.macAddress.getter();
  id v11 = [a2 peerAddress];
  unint64_t v12 = WiFiMACAddress.wifiAddress.getter();

  unint64_t v13 = sub_100393238(v7, v9, v10 & 0xFFFFFFFFFFFFLL, v12 & 0xFFFFFFFFFFFFLL);
  LOBYTE(v11) = v13;
  unint64_t v14 = v13 >> 8;
  unint64_t v15 = v13 >> 16;
  unint64_t v16 = v13 >> 24;
  unint64_t v17 = HIDWORD(v13);
  unint64_t v18 = v13 >> 40;
  uint64_t result = sub_10000C970(v7, v9);
  *a3 = (_BYTE)v11;
  a3[1] = v14;
  a3[2] = v15;
  a3[3] = v16;
  a3[4] = v17;
  a3[5] = v18;
  return result;
}

unint64_t sub_100393238(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for SHA256Digest();
  uint64_t v41 = *(void *)(v8 - 8);
  uint64_t v42 = v8;
  __chkstk_darwin();
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for SHA256();
  uint64_t v40 = *(void *)(v11 - 8);
  __chkstk_darwin();
  unint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  SHA256.init()();
  switch(a2 >> 62)
  {
    case 1uLL:
      char v39 = v10;
      if (a1 >> 32 < (int)a1)
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
      }
      sub_100013D44(a1, a2);
      sub_1001A7444((int)a1, a1 >> 32);
      sub_10000C970(a1, a2);
      uint64_t v10 = v39;
      goto LABEL_9;
    case 2uLL:
      char v39 = 0;
      unint64_t v14 = v10;
      uint64_t v15 = v11;
      uint64_t v16 = a4;
      uint64_t v17 = a3;
      uint64_t v19 = *(void *)(a1 + 16);
      uint64_t v18 = *(void *)(a1 + 24);
      sub_100013D44(a1, a2);
      swift_retain();
      swift_retain();
      uint64_t v20 = v19;
      a4 = v16;
      uint64_t v11 = v15;
      uint64_t v10 = v14;
      uint64_t v21 = v18;
      a3 = v17;
      sub_1001A7444(v20, v21);
      swift_release();
      swift_release();
      goto LABEL_8;
    case 3uLL:
      sub_1003A98A8(&qword_10047DF50, (void (*)(uint64_t))&type metadata accessor for SHA256);
      memset(v43, 0, 14);
      goto LABEL_7;
    default:
      v43[0] = a1;
      LOWORD(v43[1]) = a2;
      BYTE2(v43[1]) = BYTE2(a2);
      BYTE3(v43[1]) = BYTE3(a2);
      BYTE4(v43[1]) = BYTE4(a2);
      BYTE5(v43[1]) = BYTE5(a2);
      sub_1003A98A8(&qword_10047DF50, (void (*)(uint64_t))&type metadata accessor for SHA256);
LABEL_7:
      dispatch thunk of HashFunction.update(bufferPointer:)();
LABEL_8:
      sub_10000C970(a1, a2);
LABEL_9:
      uint64_t v22 = WiFiAddress.data.getter(a3 & 0xFFFFFFFFFFFFLL);
      uint64_t v24 = v22;
      unint64_t v25 = v23;
      switch(v23 >> 62)
      {
        case 1uLL:
          if (v22 >> 32 < (int)v22) {
            goto LABEL_26;
          }
          sub_100013D44(v22, v23);
          sub_1001A7444((int)v24, v24 >> 32);
          sub_10000C970(v24, v25);
          sub_10000C970(v24, v25);
          break;
        case 2uLL:
          uint64_t v26 = v10;
          uint64_t v27 = v11;
          uint64_t v28 = a4;
          uint64_t v29 = *(void *)(v22 + 16);
          uint64_t v30 = *(void *)(v22 + 24);
          sub_100013D44(v22, v23);
          swift_retain();
          swift_retain();
          uint64_t v31 = v30;
          a4 = v28;
          uint64_t v11 = v27;
          uint64_t v10 = v26;
          sub_1001A7444(v29, v31);
          swift_release();
          swift_release();
          goto LABEL_16;
        case 3uLL:
          sub_1003A98A8(&qword_10047DF50, (void (*)(uint64_t))&type metadata accessor for SHA256);
          memset(v43, 0, 14);
          goto LABEL_15;
        default:
          v43[0] = v22;
          LOWORD(v43[1]) = v23;
          BYTE2(v43[1]) = BYTE2(v23);
          BYTE3(v43[1]) = BYTE3(v23);
          BYTE4(v43[1]) = BYTE4(v23);
          BYTE5(v43[1]) = BYTE5(v23);
          sub_1003A98A8(&qword_10047DF50, (void (*)(uint64_t))&type metadata accessor for SHA256);
LABEL_15:
          dispatch thunk of HashFunction.update(bufferPointer:)();
LABEL_16:
          sub_10000C970(v24, v25);
          sub_10000C970(v24, v25);
          break;
      }
      uint64_t v32 = WiFiAddress.data.getter(a4 & 0xFFFFFFFFFFFFLL);
      uint64_t v34 = v32;
      unint64_t v35 = v33;
      switch(v33 >> 62)
      {
        case 1uLL:
          if (v32 >> 32 < (int)v32) {
            goto LABEL_27;
          }
          sub_100013D44(v32, v33);
          sub_1001A7444((int)v34, v34 >> 32);
          break;
        case 2uLL:
          uint64_t v36 = *(void *)(v32 + 16);
          uint64_t v37 = *(void *)(v32 + 24);
          sub_100013D44(v32, v33);
          swift_retain();
          swift_retain();
          sub_1001A7444(v36, v37);
          swift_release();
          swift_release();
          break;
        case 3uLL:
          sub_1003A98A8(&qword_10047DF50, (void (*)(uint64_t))&type metadata accessor for SHA256);
          memset(v43, 0, 14);
          goto LABEL_23;
        default:
          v43[0] = v32;
          LOWORD(v43[1]) = v33;
          BYTE2(v43[1]) = BYTE2(v33);
          BYTE3(v43[1]) = BYTE3(v33);
          BYTE4(v43[1]) = BYTE4(v33);
          BYTE5(v43[1]) = BYTE5(v33);
          sub_1003A98A8(&qword_10047DF50, (void (*)(uint64_t))&type metadata accessor for SHA256);
LABEL_23:
          dispatch thunk of HashFunction.update(bufferPointer:)();
          break;
      }
      sub_10000C970(v34, v35);
      sub_10000C970(v34, v35);
      SHA256.finalize()();
      SHA256Digest.withUnsafeBytes<A>(_:)();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v10, v42);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v13, v11);
      return LOWORD(v43[0]) | ((unint64_t)*(unsigned int *)((char *)v43 + 2) << 16);
  }
}

id sub_100393A70(void *a1, void *a2, char *a3, int a4)
{
  id v349 = a2;
  uint64_t v7 = *(void *)a3;
  uint64_t v8 = *(void *)(*(void *)a3 + 408);
  uint64_t v9 = *(void *)(*(void *)a3 + 416);
  uint64_t v10 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation();
  uint64_t v313 = type metadata accessor for Optional();
  uint64_t v308 = *(void *)(v313 - 8);
  __chkstk_darwin();
  uint64_t v312 = (char *)v305 - v11;
  uint64_t v339 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v371 = *(void *)(v339 - 8);
  __chkstk_darwin();
  unsigned int v338 = (char *)v305 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v337 = type metadata accessor for DispatchQoS();
  uint64_t v356 = *(char **)(v337 - 8);
  __chkstk_darwin();
  unint64_t v336 = (unint64_t)v305 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v363 = v9;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v364 = v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v335 = AssociatedTypeWitness;
  uint64_t v360 = (void *)swift_getAssociatedTypeWitness();
  unint64_t v361 = (char *)*(v360 - 1);
  __chkstk_darwin();
  uint64_t v334 = (char *)v305 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v355 = v15;
  __chkstk_darwin();
  uint64_t v359 = (uint64_t)v305 - v16;
  uint64_t v17 = type metadata accessor for DispatchTimeInterval();
  uint64_t v311 = *(void *)(v17 - 8);
  __chkstk_darwin();
  uint64_t v19 = (char *)v305 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v316 = (char *)v305 - v20;
  __chkstk_darwin();
  uint64_t v317 = (char *)v305 - v21;
  __chkstk_darwin();
  uint64_t v309 = (char *)v305 - v22;
  __chkstk_darwin();
  os_log_type_t v348 = (void *)((char *)v305 - v23);
  __chkstk_darwin();
  unint64_t v25 = (char *)v305 - v24;
  sub_100010BCC(&qword_10047DB90);
  __chkstk_darwin();
  uint64_t v315 = (char *)v305 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v341 = (void (**)(uint64_t, uint64_t))((char *)v305 - v27);
  uint64_t v369 = type metadata accessor for DispatchTime();
  BOOL v367 = *(void (***)(void *, uint64_t))(v369 - 8);
  __chkstk_darwin();
  uint64_t v318 = (char *)v305 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v347 = (char *)v305 - v29;
  __chkstk_darwin();
  unint64_t v342 = (char *)v305 - v30;
  os_log_t v370 = v10;
  Class isa = v10[-1].isa;
  __chkstk_darwin();
  uint64_t v314 = (char *)v305 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  os_log_t v340 = (os_log_t)((char *)v305 - v32);
  __chkstk_darwin();
  uint64_t v368 = (char *)v305 - v33;
  uint64_t v34 = *(void *)(v7 + 544);
  uint64_t v372 = a3;
  unint64_t v35 = (NSObject **)&a3[v34];
  swift_beginAccess();
  uint64_t v36 = *v35;
  id v37 = a1;
  unint64_t v38 = swift_bridgeObjectRetain();
  os_log_type_t v39 = OS_LOG_TYPE_DEFAULT;
  unint64_t v40 = sub_1003A991C(v38);
  uint64_t v42 = v41;
  swift_bridgeObjectRelease();
  id v358 = v37;

  if (v42)
  {
    int v307 = a4;
    uint64_t v365 = v17;
    id v56 = v349;
    uint64_t v306 = v19;
    uint64_t v328 = v25;
    if (v349)
    {
      id v57 = objc_allocWithZone((Class)AWDLTrafficRegistrationConfiguration);
      id v58 = v358;
      id v59 = [v57 initWithUniqueIdentifier:v358 peerAddress:v56];
    }
    else
    {
      id v59 = 0;
      id v58 = v358;
    }
    uint64_t v60 = v372;
    uint64_t v61 = &v372[*(void *)(*(void *)v372 + 536)];
    swift_beginAccess();
    uint64_t v62 = *(void *)v61;
    uint64_t v63 = sub_10006F314(0, (unint64_t *)&unk_100484A40);
    unint64_t v64 = sub_100296BC4();
    uint64_t v65 = NANBitmap.Channel.operatingClass.getter(v62);
    uint64_t v362 = (char **)v305;
    uint64_t v381 = v65;
    __chkstk_darwin();
    v305[-4] = v58;
    v305[-3] = v56;
    uint64_t v303 = (uint64_t)v59;
    uint64_t v366 = v63;
    unint64_t v66 = v64;
    uint64_t v67 = type metadata accessor for Dictionary.Keys();
    swift_bridgeObjectRetain();
    uint64_t WitnessTable = swift_getWitnessTable();
    Sequence.first(where:)();
    swift_bridgeObjectRelease();
    id v69 = aBlock;
    id v346 = v59;
    if (aBlock)
    {
      id v70 = v59;
      uint64_t p_type = &stru_100479FF0.type;
      if (v307)
      {
        unint64_t v72 = aBlock;
        id v73 = v358;
        uint64_t v74 = v72;
        id v75 = v73;
        uint64_t v76 = v74;
        uint64_t v77 = Logger.logObject.getter();
        os_log_type_t v78 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v77, v78))
        {
          uint64_t v79 = swift_slowAlloc();
          uint64_t v372 = (char *)swift_slowAlloc();
          id aBlock = v372;
          *(_DWORD *)uint64_t v79 = 136315650;
          uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v381 = sub_100010680(v80, v81, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v79 + 12) = 2080;
          id v82 = [v76 uniqueIdentifier];
          uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v85 = v84;

          uint64_t v381 = sub_100010680(v83, v85, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v79 + 22) = 2080;
          id v86 = [v76 peerAddress];
          unint64_t v87 = WiFiMACAddress.wifiAddress.getter();

          uint64_t v88 = WiFiAddress.description.getter(v87 & 0xFFFFFFFFFFFFLL);
          uint64_t v381 = sub_100010680(v88, v89, (uint64_t *)&aBlock);
          uint64_t p_type = (char **)(&stru_100479FF0 + 16);
          id v70 = v346;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v77, v78, "Rejecting %s because of conflict with registration for %s to %s", (uint8_t *)v79, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
      }
      id v142 = [v69 p_type[450]];
    }
    else
    {
      uint64_t v357 = 0;
      v305[1] = WitnessTable;
      v305[2] = v67;
      uint64_t v90 = &v60[*(void *)(*(void *)v60 + 552)];
      swift_beginAccess();
      uint64_t v362 = (char **)((char *)isa + 8);
      uint64_t v333 = (unsigned int (**)(NSObject *, uint64_t, uint64_t))(v367 + 6);
      unint64_t v332 = (void (**)(char *, NSObject *, uint64_t))(v367 + 4);
      uint64_t v91 = (void (**)(char *, uint64_t))(v367 + 1);
      unsigned int v331 = enum case for DispatchTimeInterval.seconds(_:);
      uint64_t v330 = (void (**)(void *, void, uint64_t))(v311 + 104);
      BOOL v367 = (void (**)(void *, uint64_t))(v311 + 8);
      uint64_t v326 = AssociatedConformanceWitness + 136;
      uint64_t v325 = v361 + 16;
      uint64_t v324 = v355 + 7;
      uint64_t v323 = v361 + 32;
      unint64_t v322 = v375;
      uint64_t v321 = (void (**)(char *, uint64_t))(v371 + 8);
      unint64_t v320 = (void (**)(unint64_t, uint64_t))(v356 + 8);
      uint64_t v319 = v361 + 8;
      unint64_t v345 = v66;
      uint64_t v92 = type metadata accessor for Dictionary();
      unint64_t v344 = v91;
      uint64_t v329 = v92;
      char v327 = v90;
      while (1)
      {
        uint64_t v380 = *(void **)v90;
        __chkstk_darwin();
        uint64_t v93 = v363;
        v305[-6] = v94;
        v305[-5] = v93;
        id v95 = v358;
        v305[-4] = v358;
        v305[-3] = v56;
        uint64_t v303 = (uint64_t)v346;
        swift_bridgeObjectRetain();
        uint64_t v96 = swift_getWitnessTable();
        uint64_t v97 = v357;
        Collection.firstIndex(where:)();
        uint64_t v357 = v97;
        swift_bridgeObjectRelease();
        LODWORD(v371) = LOBYTE(v375[0]);
        if (LOBYTE(v375[0]) == 255) {
          break;
        }
        uint64_t v98 = aBlock;
        uint64_t v99 = v374;
        int v100 = v371 & 1;
        swift_bridgeObjectRetain();
        uint64_t v101 = v345;
        uint64_t v303 = v345;
        id v102 = v368;
        os_log_t v103 = v370;
        Dictionary.subscript.getter();
        swift_bridgeObjectRelease();
        os_log_type_t v104 = *v362;
        ((void (*)(char *, os_log_t))*v362)(v102, v103);
        id v354 = aBlock;
        swift_bridgeObjectRetain();
        uint64_t v303 = v101;
        os_log_t v105 = v340;
        uint64_t v356 = v98;
        uint64_t v355 = v99;
        LODWORD(v351) = v100;
        Dictionary.subscript.getter();
        swift_bridgeObjectRelease();

        uint64_t v36 = v341;
        sub_1000136F4((uint64_t)v105 + SHIDWORD(v103[4].isa), (uint64_t)v341, &qword_10047DB90);
        uint64_t v350 = (void (*)(char *, os_log_t))v104;
        ((void (*)(os_log_t, os_log_t))v104)(v105, v103);
        uint64_t v106 = v369;
        if ((*v333)(v36, 1, v369) == 1) {
          goto LABEL_73;
        }
        Class v107 = v342;
        (*v332)(v342, v36, v106);
        type metadata accessor for P2PTimer();
        uint64_t v108 = v347;
        variable initialization expression of AWDLPeer.lastUpdated();
        uint64_t v109 = v328;
        DispatchTime.distance(to:)();
        unint64_t v110 = *v344;
        (*v344)(v108, v106);
        unint64_t v111 = v348;
        *os_log_type_t v348 = 300;
        uint64_t v112 = v365;
        (*v330)(v111, v331, v365);
        LOBYTE(v108) = static DispatchTimeInterval.< infix(_:_:)();
        uint64_t v113 = (char *)*v367;
        (*v367)(v111, v112);
        uint64_t v352 = (void (**)(char *, char *, uint64_t))v110;
        unint64_t v353 = v113;
        if (v108)
        {
          uint64_t v166 = v109;
          id v167 = v354;
          if (v307)
          {
            uint64_t v168 = v309;
            (*(void (**)(char *, char *, uint64_t))(v311 + 16))(v309, v109, v112);
            uint64_t v169 = v112;
            id v170 = v167;
            id v171 = v358;
            id v172 = v170;
            id v173 = v171;
            id v174 = v172;
            id v175 = Logger.logObject.getter();
            os_log_type_t v176 = static os_log_type_t.error.getter();
            int v177 = v176;
            if (os_log_type_enabled(v175, v176))
            {
              uint64_t v178 = swift_slowAlloc();
              uint64_t v368 = (char *)swift_slowAlloc();
              id aBlock = v368;
              *(_DWORD *)uint64_t v178 = 136315906;
              LODWORD(v372) = v177;
              uint64_t v179 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              os_log_t v370 = v175;
              uint64_t v380 = (void *)sub_100010680(v179, v180, (uint64_t *)&aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              swift_bridgeObjectRelease();
              *(_WORD *)(v178 + 12) = 2080;
              uint64_t v181 = DispatchTimeInterval.description.getter();
              uint64_t v380 = (void *)sub_100010680(v181, v182, (uint64_t *)&aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              ((void (*)(char *, uint64_t))v353)(v168, v365);
              *(_WORD *)(v178 + 22) = 2080;
              id v183 = [v174 uniqueIdentifier];
              uint64_t v184 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v186 = v185;

              uint64_t v380 = (void *)sub_100010680(v184, v186, (uint64_t *)&aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              swift_bridgeObjectRelease();
              *(_WORD *)(v178 + 32) = 2080;
              unint64_t v110 = (void (*)(char *, uint64_t))v352;
              id v187 = [v174 peerAddress];
              unint64_t v188 = WiFiMACAddress.wifiAddress.getter();

              uint64_t v189 = WiFiAddress.description.getter(v188 & 0xFFFFFFFFFFFFLL);
              uint64_t v380 = (void *)sub_100010680(v189, v190, (uint64_t *)&aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              swift_bridgeObjectRelease();
              os_log_t v191 = v370;
              _os_log_impl((void *)&_mh_execute_header, v370, (os_log_type_t)v372, "Rejecting %s because of conflict with registration (in recovery for %s) for %s to %s", (uint8_t *)v178, 0x2Au);
              swift_arrayDestroy();
              swift_slowDealloc();
              uint64_t v113 = v353;
              uint64_t v112 = v365;
              swift_slowDealloc();

              uint64_t v106 = v369;
            }
            else
            {

              ((void (*)(char *, uint64_t))v113)(v168, v169);
              uint64_t v106 = v369;
              uint64_t v112 = v169;
            }
            uint64_t v166 = v328;
          }
          id v142 = [v167 uniqueIdentifier];

          sub_100038018((uint64_t)v356, v355, v371);
          ((void (*)(char *, uint64_t))v113)(v166, v112);
          v110(v342, v106);
          return v142;
        }
        uint64_t v114 = AssociatedConformanceWitness;
        unint64_t v115 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 136);
        uint64_t v116 = swift_checkMetadataState();
        uint64_t v117 = v359;
        v115(v116, v114);
        unint64_t v118 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
        uint64_t v119 = v361;
        unint64_t v120 = v334;
        uint64_t v121 = v117;
        uint64_t v122 = v360;
        (*((void (**)(char *, uint64_t, void *))v361 + 2))(v334, v121, v360);
        uint64_t v123 = v119;
        unint64_t v124 = (v119[80] + 32) & ~(unint64_t)v119[80];
        unint64_t v125 = (v324 + v124) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v126 = swift_allocObject();
        uint64_t v127 = v363;
        *(void *)(v126 + 16) = v364;
        *(void *)(v126 + 24) = v127;
        (*((void (**)(unint64_t, char *, void *))v123 + 4))(v126 + v124, v120, v122);
        id v128 = v354;
        *(void *)(v126 + v125) = v354;
        v375[2] = sub_1003AA634;
        v375[3] = v126;
        id aBlock = (char *)_NSConcreteStackBlock;
        unint64_t v374 = 1107296256;
        v375[0] = sub_10000E5D0;
        v375[1] = &unk_1004705D8;
        uint64_t v129 = _Block_copy(&aBlock);
        id v130 = v118;
        id v354 = v128;
        unint64_t v131 = v336;
        static DispatchQoS.unspecified.getter();
        uint64_t v380 = _swiftEmptyArrayStorage;
        sub_1003A98A8((unint64_t *)&qword_1004807A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_100010BCC((uint64_t *)&unk_10047D0F0);
        sub_10000F9CC((unint64_t *)&qword_1004807B0, (uint64_t *)&unk_10047D0F0);
        os_log_t v132 = v338;
        uint64_t v133 = v107;
        uint64_t v134 = v339;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v129);

        (*v321)(v132, v134);
        (*v320)(v131, v337);
        swift_release();
        uint64_t v90 = v327;
        swift_beginAccess();
        uint64_t v135 = v368;
        os_log_t v136 = (void (*)(void, void))v356;
        uint64_t v137 = v355;
        Dictionary.remove(at:)();
        v350(v135, v370);
        id v138 = v380;
        swift_endAccess();

        sub_100378300();
        sub_100038018((uint64_t)v136, v137, v371);

        (*((void (**)(uint64_t, void *))v361 + 1))(v359, v360);
        ((void (*)(char *, uint64_t))v353)(v109, v365);
        ((void (*)(char *, uint64_t))v352)(v133, v369);
        id v56 = v349;
      }
      uint64_t v143 = v372;
      uint64_t v144 = &v372[*(void *)(*(void *)v372 + 560)];
      swift_beginAccess();
      uint64_t v376 = NANBitmap.Channel.operatingClass.getter(*(void *)v144);
      __chkstk_darwin();
      id v145 = v349;
      v305[-4] = v95;
      v305[-3] = v145;
      uint64_t v303 = (uint64_t)v346;
      swift_bridgeObjectRetain();
      uint64_t v146 = v357;
      Sequence.first(where:)();
      swift_bridgeObjectRelease();
      id v147 = v380;
      if (v380)
      {
        if (v307)
        {
          uint64_t v148 = v380;
          id v149 = v95;
          Swift::Int v150 = v148;
          id v151 = v149;
          unint64_t v152 = v150;
          uint64_t v153 = Logger.logObject.getter();
          os_log_type_t v154 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v153, v154))
          {
            uint64_t v155 = swift_slowAlloc();
            uint64_t v372 = (char *)swift_slowAlloc();
            uint64_t v380 = v372;
            *(_DWORD *)uint64_t v155 = 136315650;
            uint64_t v156 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v376 = sub_100010680(v156, v157, (uint64_t *)&v380);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v155 + 12) = 2080;
            id v158 = [v152 uniqueIdentifier];
            uint64_t v159 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v161 = v160;

            uint64_t v376 = sub_100010680(v159, v161, (uint64_t *)&v380);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v155 + 22) = 2080;
            id v162 = [v152 peerAddress];
            unint64_t v163 = WiFiMACAddress.wifiAddress.getter();

            uint64_t v164 = WiFiAddress.description.getter(v163 & 0xFFFFFFFFFFFFLL);
            uint64_t v376 = sub_100010680(v164, v165, (uint64_t *)&v380);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v153, v154, "Rejecting %s because of conflict with responder for %s from %s", (uint8_t *)v155, 0x20u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
          }
        }
        id v142 = [v147 uniqueIdentifier];
      }
      else
      {
        char v192 = (uint64_t *)&v143[*(void *)(*(void *)v143 + 576)];
        swift_beginAccess();
        uint64_t v352 = (void (**)(char *, char *, uint64_t))(v311 + 16);
        unint64_t v351 = &v377;
        uint64_t v194 = 0x6172747369676572;
        if (!v145) {
          uint64_t v194 = 0x7461767265736572;
        }
        uint64_t v337 = v194;
        unint64_t v195 = 0xEC0000006E6F6974;
        if (!v145) {
          unint64_t v195 = 0xEB000000006E6F69;
        }
        unint64_t v336 = v195;
        unint64_t v342 = (char *)isa + 56;
        uint64_t v341 = (void (**)(uint64_t, uint64_t))(v308 + 8);
        *(void *)&long long v193 = 136316418;
        long long v335 = v193;
        uint64_t v334 = (char *)&type metadata for Any + 8;
        uint64_t AssociatedConformanceWitness = (uint64_t)v192;
        uint64_t v350 = (void (*)(char *, os_log_t))v96;
        while (1)
        {
          uint64_t v379 = (char *)*v192;
          __chkstk_darwin();
          uint64_t v204 = v363;
          v305[-6] = v364;
          v305[-5] = v204;
          id v205 = v349;
          v305[-4] = v95;
          v305[-3] = v205;
          uint64_t v303 = (uint64_t)v346;
          swift_bridgeObjectRetain();
          Collection.firstIndex(where:)();
          swift_bridgeObjectRelease();
          LODWORD(v371) = v378;
          if (v378 == 255)
          {

            return 0;
          }
          uint64_t v355 = v146;
          uint64_t v207 = v376;
          uint64_t v206 = v377;
          int v208 = v371 & 1;
          swift_bridgeObjectRetain();
          uint64_t v209 = v345;
          uint64_t v303 = v345;
          uint64_t v210 = v368;
          os_log_t v211 = v370;
          Dictionary.subscript.getter();
          swift_bridgeObjectRelease();
          uint64_t v212 = *v362;
          ((void (*)(char *, os_log_t))*v362)(v210, v211);
          uint64_t v360 = (void *)v376;
          swift_bridgeObjectRetain();
          uint64_t v303 = v209;
          BOOL v213 = v314;
          uint64_t v359 = v207;
          uint64_t v357 = v206;
          LODWORD(v354) = v208;
          Dictionary.subscript.getter();
          swift_bridgeObjectRelease();

          object = v315;
          sub_1000136F4((uint64_t)&v213[SHIDWORD(v211[4].isa)], (uint64_t)v315, &qword_10047DB90);
          unint64_t v353 = v212;
          ((void (*)(char *, os_log_t))v212)(v213, v211);
          uint64_t v215 = v369;
          if ((*v333)(object, 1, v369) == 1) {
            goto LABEL_75;
          }
          (*v332)(v318, object, v215);
          type metadata accessor for P2PTimer();
          BOOL v216 = v347;
          variable initialization expression of AWDLPeer.lastUpdated();
          uint64_t v217 = v317;
          DispatchTime.distance(to:)();
          int v218 = (char *)*v344;
          (*v344)(v216, v215);
          unint64_t v219 = v348;
          *os_log_type_t v348 = 20;
          uint64_t v220 = v365;
          (*v330)(v219, v331, v365);
          BOOL v221 = static DispatchTimeInterval.< infix(_:_:)();
          uint64_t v222 = (char *)*v367;
          (*v367)(v219, v220);
          id v223 = v358;
          uint64_t v356 = v218;
          unint64_t v361 = v222;
          if (v221) {
            break;
          }
          uint64_t v224 = v316;
          (*v352)(v316, v217, v220);
          uint64_t v225 = v360;
          id v226 = v349;
          id v227 = v349;
          uint64_t v228 = v225;
          id v229 = v227;
          id v230 = v223;
          unint64_t v231 = v228;
          id v232 = v229;
          id v233 = v230;
          uint64_t v234 = v231;
          id v235 = v232;
          uint64_t v236 = Logger.logObject.getter();
          int v237 = static os_log_type_t.default.getter();
          BOOL v238 = os_log_type_enabled(v236, (os_log_type_t)v237);
          uint64_t v360 = v234;
          if (v238)
          {
            LODWORD(v339) = v237;
            os_log_t v340 = v236;
            uint64_t v239 = swift_slowAlloc();
            unsigned int v338 = (char *)swift_slowAlloc();
            uint64_t v379 = v338;
            *(_DWORD *)uint64_t v239 = v335;
            id v240 = [v234 uniqueIdentifier];
            id v241 = v226;
            uint64_t v242 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v244 = v243;

            uint64_t v376 = sub_100010680(v242, v244, (uint64_t *)&v379);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v239 + 12) = 2080;
            id v245 = [v234 peerAddress];
            unint64_t v246 = WiFiMACAddress.wifiAddress.getter();

            uint64_t v247 = WiFiAddress.description.getter(v246 & 0xFFFFFFFFFFFFLL);
            uint64_t v376 = sub_100010680(v247, v248, (uint64_t *)&v379);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v239 + 22) = 2080;
            uint64_t v376 = sub_100010680(v337, v336, (uint64_t *)&v379);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v239 + 32) = 2080;
            uint64_t v249 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v376 = sub_100010680(v249, v250, (uint64_t *)&v379);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v239 + 42) = 2080;
            if (v241)
            {
              uint64_t v376 = 544175136;
              unint64_t v377 = 0xE400000000000000;
              id v251 = [v235 description];
              uint64_t v252 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              char v254 = v253;

              v255._uint64_t countAndFlagsBits = v252;
              v255._object = v254;
              String.append(_:)(v255);
              swift_bridgeObjectRelease();
              uint64_t v256 = v376;
              unint64_t v257 = v377;
            }
            else
            {
              uint64_t v256 = 0;
              unint64_t v257 = 0xE000000000000000;
            }
            uint64_t v258 = v316;
            uint64_t v196 = v345;
            unint64_t v259 = (void (*)(char *, uint64_t))v361;
            uint64_t v376 = sub_100010680(v256, v257, (uint64_t *)&v379);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v239 + 52) = 2080;
            uint64_t v260 = DispatchTimeInterval.description.getter();
            uint64_t v376 = sub_100010680(v260, v261, (uint64_t *)&v379);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            v259(v258, v365);
            os_log_t v262 = v340;
            _os_log_impl((void *)&_mh_execute_header, v340, (os_log_type_t)v339, "Cleared responder traffic registration for %s from %s (new %s for %s%s while in recovery for %s)", (uint8_t *)v239, 0x3Eu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            id v197 = v360;
          }
          else
          {

            ((void (*)(char *, uint64_t))v361)(v224, v220);
            uint64_t v196 = v345;
            id v197 = v234;
          }
          char v192 = (uint64_t *)AssociatedConformanceWitness;
          swift_bridgeObjectRetain();
          uint64_t v303 = v196;
          uint64_t v198 = (uint64_t)v312;
          uint64_t v199 = v359;
          uint64_t v200 = v357;
          os_log_t v201 = v370;
          Dictionary.subscript.getter();
          swift_bridgeObjectRelease();

          (*(void (**)(uint64_t, void, uint64_t, os_log_t))v342)(v198, 0, 1, v201);
          sub_1003885BC(v197, v198);
          (*v341)(v198, v313);
          swift_beginAccess();
          uint64_t v202 = v368;
          Dictionary.remove(at:)();
          ((void (*)(char *, os_log_t))v353)(v202, v201);
          uint64_t v203 = v379;
          swift_endAccess();

          sub_100378300();
          sub_100038018(v199, v200, v371);

          ((void (*)(char *, uint64_t))v361)(v317, v365);
          ((void (*)(char *, uint64_t))v356)(v318, v369);
          id v95 = v358;
          uint64_t v146 = v355;
        }
        if (v307)
        {
          uint64_t v263 = v306;
          (*v352)(v306, v217, v220);
          unint64_t v264 = v360;
          id v265 = v223;
          uint64_t v266 = v264;
          id v267 = v265;
          os_log_t v268 = v266;
          uint64_t v269 = Logger.logObject.getter();
          os_log_type_t v270 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v269, v270))
          {
            uint64_t v271 = swift_slowAlloc();
            uint64_t v372 = (char *)swift_slowAlloc();
            uint64_t v376 = (uint64_t)v372;
            *(_DWORD *)uint64_t v271 = 136315906;
            uint64_t v272 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v379 = (char *)sub_100010680(v272, v273, &v376);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v271 + 12) = 2080;
            uint64_t v274 = DispatchTimeInterval.description.getter();
            uint64_t v379 = (char *)sub_100010680(v274, v275, &v376);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            ((void (*)(char *, uint64_t))v361)(v263, v365);
            *(_WORD *)(v271 + 22) = 2080;
            id v276 = [v268 uniqueIdentifier];
            uint64_t v277 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v279 = v278;

            uint64_t v379 = (char *)sub_100010680(v277, v279, &v376);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v271 + 32) = 2080;
            id v280 = [v268 peerAddress];
            unint64_t v281 = WiFiMACAddress.wifiAddress.getter();

            uint64_t v282 = WiFiAddress.description.getter(v281 & 0xFFFFFFFFFFFFLL);
            uint64_t v379 = (char *)sub_100010680(v282, v283, &v376);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v269, v270, "Rejecting %s because of conflict with responder (in recovery for %s) for %s from %s", (uint8_t *)v271, 0x2Au);
            swift_arrayDestroy();
            swift_slowDealloc();
            uint64_t v222 = v361;
            uint64_t v220 = v365;
            swift_slowDealloc();
          }
          else
          {

            ((void (*)(char *, uint64_t))v222)(v263, v220);
          }
          uint64_t v217 = v317;
          int v218 = v356;
        }
        id v284 = v360;
        id v142 = [v360 uniqueIdentifier];

        sub_100038018(v359, v357, v371);
        ((void (*)(char *, uint64_t))v222)(v217, v220);
        ((void (*)(char *, uint64_t))v218)(v318, v369);
      }
    }
  }
  else
  {
    if ((a4 & 1) == 0) {
      goto LABEL_23;
    }
    uint64_t v42 = (uint64_t)&v372[*(void *)(*(void *)v372 + 160)];
    id v43 = v358;
    swift_retain_n();
    id v44 = v43;
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v36, v39))
    {

      swift_release_n();
      goto LABEL_23;
    }
    uint64_t v42 = swift_slowAlloc();
    uint64_t v45 = swift_slowAlloc();
    uint64_t v382 = v45;
    *(_DWORD *)uint64_t v42 = 136315394;
    uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id aBlock = (char *)sub_100010680(v46, v47, &v382);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v42 + 12) = 2080;
    swift_beginAccess();
    uint64_t v48 = *v35;
    BOOL v49 = ((unint64_t)*v35 & 0xC000000000000001) == 0;
    uint64_t v371 = v45;
    if (v49)
    {
      if ((v40 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v40 < *(void *)(((unint64_t)v48 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        uint64_t v50 = v48[v40 + 4].isa;
        goto LABEL_9;
      }
      __break(1u);
LABEL_73:
      sub_1000380B4((uint64_t)v36, &qword_10047DB90);
      id aBlock = 0;
      unint64_t v374 = 0xE000000000000000;
      _StringGuts.grow(_:)(73);
      v286._object = (void *)0x80000001003E1EA0;
      v286._uint64_t countAndFlagsBits = 0xD000000000000041;
      String.append(_:)(v286);
      id v287 = v354;
      id v288 = [v354 uniqueIdentifier];
      v289._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
      object = v289._object;
      String.append(_:)(v289);

      swift_bridgeObjectRelease();
      v290._uint64_t countAndFlagsBits = 544175136;
      v290._object = (void *)0xE400000000000000;
      String.append(_:)(v290);
      id v291 = [v287 peerAddress];
      unint64_t v292 = WiFiMACAddress.wifiAddress.getter();

      v293._uint64_t countAndFlagsBits = WiFiAddress.description.getter(v292 & 0xFFFFFFFFFFFFLL);
      String.append(_:)(v293);
      swift_bridgeObjectRelease();
      int v304 = 0;
      for (uint64_t i = 1189; ; uint64_t i = 1215)
      {
        uint64_t v303 = i;
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
LABEL_75:
        sub_1000380B4((uint64_t)object, &qword_10047DB90);
        uint64_t v376 = 0;
        unint64_t v377 = 0xE000000000000000;
        _StringGuts.grow(_:)(75);
        v295._object = (void *)0x80000001003E1EA0;
        v295._uint64_t countAndFlagsBits = 0xD000000000000041;
        String.append(_:)(v295);
        id v296 = v360;
        id v297 = [v360 uniqueIdentifier];
        v298._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
        object = v298._object;
        String.append(_:)(v298);

        swift_bridgeObjectRelease();
        v299._uint64_t countAndFlagsBits = 0x206D6F726620;
        v299._object = (void *)0xE600000000000000;
        String.append(_:)(v299);
        id v300 = [v296 peerAddress];
        unint64_t v301 = WiFiMACAddress.wifiAddress.getter();

        v302._uint64_t countAndFlagsBits = WiFiAddress.description.getter(v301 & 0xFFFFFFFFFFFFLL);
        String.append(_:)(v302);
        swift_bridgeObjectRelease();
        int v304 = 0;
      }
    }
    while (1)
    {
      uint64_t v50 = (objc_class *)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
      uint64_t v51 = v50;
      swift_endAccess();
      id v52 = [(objc_class *)v51 uniqueIdentifier];
      swift_release();

      uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v55 = v54;

      id aBlock = (char *)sub_100010680(v53, v55, &v382);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v36, v39, "Rejecting %s because of conflict with reservation for %s", (uint8_t *)v42, 0x16u);
      os_log_type_t v39 = v371;
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

LABEL_23:
      swift_beginAccess();
      uint64_t v139 = *v35;
      if (((unint64_t)*v35 & 0xC000000000000001) != 0) {
        break;
      }
      if ((v40 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v40 < *(void *)(((unint64_t)v139 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        uint64_t v140 = v139[v40 + 4].isa;
        goto LABEL_27;
      }
      __break(1u);
    }
    uint64_t v140 = (objc_class *)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_27:
    id v141 = v140;
    swift_endAccess();
    id v142 = [(objc_class *)v141 uniqueIdentifier];
  }
  return v142;
}

uint64_t sub_100396A50(id *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = *a1;
  id v7 = [*a1 uniqueIdentifier];
  int v8 = AWDLTrafficRegistrationService.serviceType.getter();
  char v9 = AWDLTrafficRegistrationService.serviceType.getter();
  if (v8 != 2 || v9 != 2)
  {

    goto LABEL_11;
  }
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;
  if (v10 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v12 == v13)
  {

    swift_bridgeObjectRelease_n();
    if (a3) {
      goto LABEL_14;
    }
LABEL_11:
    char v16 = 0;
    return v16 & 1;
  }
  char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v15)
  {
    char v16 = 0;
    if (!a3) {
      return v16 & 1;
    }
  }
LABEL_14:
  if (a4)
  {
    sub_10006F314(0, (unint64_t *)&unk_100484A40);
    id v18 = v6;
    id v19 = a4;
    char v20 = static NSObject.== infix(_:_:)();

    if (v20) {
      goto LABEL_11;
    }
  }
  id v21 = [v6 uniqueIdentifier];
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v24 = v23;
  if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v24 == v25)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v26 & 1) == 0)
    {
      char v16 = 1;
      return v16 & 1;
    }
  }
  char v16 = AWDLTrafficRegistrationService.allowsMultipleConcurrentPeers.getter() ^ 1;
  return v16 & 1;
}

uint64_t sub_100396C60(void **a1, uint64_t a2, uint64_t a3, void (*a4)(void, void))
{
  uint64_t v63 = a4;
  uint64_t v7 = sub_10006F314(255, (unint64_t *)&unk_100484A40);
  uint64_t v8 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation();
  uint64_t v59 = v7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v65 = *(void *)(TupleTypeMetadata2 - 8);
  __chkstk_darwin();
  uint64_t v61 = (uint64_t *)((char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  unint64_t v66 = (void **)((char *)&v59 - v11);
  __chkstk_darwin();
  uint64_t v60 = (uint64_t *)((char *)&v59 - v12);
  __chkstk_darwin();
  unint64_t v14 = (void **)((char *)&v59 - v13);
  uint64_t v16 = *(int *)(__chkstk_darwin() + 48);
  uint64_t v17 = (char *)&v59 + v16 - v15;
  long long v68 = (char *)a1 + v16;
  id v69 = a1;
  id v18 = *a1;
  *(uint64_t *)((char *)&v59 - v15) = (uint64_t)*a1;
  uint64_t v70 = *(void *)(v8 - 8);
  uint64_t v67 = *(void (**)(void))(v70 + 16);
  ((void (*)(char *))v67)(v17);
  id v19 = [v18 uniqueIdentifier:v59];
  BOOL v20 = a3 != 0;
  LODWORD(a1) = AWDLTrafficRegistrationService.serviceType.getter();
  uint64_t v62 = a2;
  char v21 = AWDLTrafficRegistrationService.serviceType.getter();
  if (a1 != 2 || v21 != 2)
  {

    BOOL v20 = 0;
    goto LABEL_7;
  }
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v24 = v23;
  if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v24 == v25)
  {

    swift_bridgeObjectRelease_n();
LABEL_7:
    uint64_t v26 = v65;
    goto LABEL_8;
  }
  LODWORD(v64) = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v26 = v65;
  if ((v64 & 1) == 0) {
    BOOL v20 = 1;
  }
LABEL_8:
  uint64_t v27 = *(void (**)(char *, uint64_t))(v70 + 8);
  v70 += 8;
  unint64_t v64 = v27;
  v27(v17, v8);
  uint64_t v28 = (char *)v14 + *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v29 = v68;
  uint64_t v30 = *v69;
  char *v14 = *v69;
  uint64_t v31 = v67;
  ((void (*)(char *, char *, uint64_t))v67)(v28, v29, v8);
  if (v20)
  {
    uint64_t v32 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v33 = v60;
    *uint64_t v60 = v30;
    uint64_t v60 = (void *)((char *)v33 + v32);
    v31();
    uint64_t v34 = v63;
    if (v63)
    {
      id v35 = v30;
      id v36 = v34;
      char v37 = static NSObject.== infix(_:_:)();
      uint64_t v63 = *(void (**)(void, void))(v26 + 8);
      v63(v14, TupleTypeMetadata2);

      char v38 = v37 ^ 1;
    }
    else
    {
      uint64_t v42 = *(void (**)(void, void))(v26 + 8);
      id v43 = v30;
      uint64_t v63 = v42;
      v42(v14, TupleTypeMetadata2);
      char v38 = 1;
    }
    uint64_t v41 = v66;
    v64((char *)v60, v8);
    uint64_t v31 = v67;
  }
  else
  {
    os_log_type_t v39 = *(void (**)(void, void))(v26 + 8);
    id v40 = v30;
    uint64_t v63 = v39;
    v39(v14, TupleTypeMetadata2);
    char v38 = 0;
    uint64_t v41 = v66;
  }
  id v44 = (char *)v41 + *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v45 = v68;
  uint64_t v46 = *v69;
  *uint64_t v41 = *v69;
  ((void (*)(char *, char *, uint64_t))v31)(v44, v45, v8);
  if (v38)
  {
    uint64_t v47 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v48 = v61;
    BOOL v49 = (char *)v61 + v47;
    void *v61 = v46;
    ((void (*)(char *, char *, uint64_t))v31)((char *)v48 + v47, v44, v8);
    id v50 = [v46 uniqueIdentifier];
    uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v53 = v52;
    if (v51 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v53 == v54)
    {

      swift_bridgeObjectRelease_n();
      v64(v49, v8);
    }
    else
    {
      char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v64(v49, v8);
      if ((v57 & 1) == 0)
      {
        char v56 = 1;
        goto LABEL_24;
      }
    }
    char v56 = AWDLTrafficRegistrationService.allowsMultipleConcurrentPeers.getter() ^ 1;
LABEL_24:
    uint64_t v41 = v66;
    goto LABEL_25;
  }
  id v55 = v46;
  char v56 = 0;
LABEL_25:
  v63(v41, TupleTypeMetadata2);
  return v56 & 1;
}

uint64_t sub_10039720C(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  id v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 16);
  uint64_t v5 = swift_checkMetadataState();
  return v4(a2, v5, AssociatedConformanceWitness);
}

uint64_t sub_100397304(id *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = *a1;
  id v7 = [*a1 uniqueIdentifier];
  int v8 = AWDLTrafficRegistrationService.serviceType.getter();
  char v9 = AWDLTrafficRegistrationService.serviceType.getter();
  if (v8 != 2 || v9 != 2)
  {

    goto LABEL_11;
  }
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;
  if (v10 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v12 == v13)
  {

    swift_bridgeObjectRelease_n();
    if (a3)
    {
LABEL_14:
      if (a4)
      {
        sub_10006F314(0, (unint64_t *)&unk_100484A40);
        id v18 = v6;
        id v19 = a4;
        char v20 = static NSObject.== infix(_:_:)();

        char v16 = v20 ^ 1;
      }
      else
      {
        char v16 = 1;
      }
      return v16 & 1;
    }
LABEL_11:
    char v16 = 0;
    return v16 & 1;
  }
  char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v15 & 1) == 0) {
    goto LABEL_14;
  }
  char v16 = 0;
  if (a3) {
    goto LABEL_14;
  }
  return v16 & 1;
}

uint64_t sub_100397474(void **a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v52 = a4;
  uint64_t v6 = sub_10006F314(255, (unint64_t *)&unk_100484A40);
  uint64_t v7 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation();
  v50[1] = v6;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v56 = *(void *)(TupleTypeMetadata2 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v59 = (char *)v50 - v11;
  uint64_t v13 = *(int *)(__chkstk_darwin() + 48);
  unint64_t v14 = (void (*)(char *, uint64_t))((char *)a1 + v13);
  uint64_t v60 = (uint64_t)a1;
  char v15 = *a1;
  *(void *)((char *)v50 - v12) = v15;
  uint64_t v53 = *(void *)(v7 - 8);
  uint64_t v54 = (char *)v50 + v13 - v12;
  uint64_t v17 = v53 + 16;
  char v16 = *(void (**)(void))(v53 + 16);
  id v55 = v14;
  id v58 = v16;
  v16();
  id v18 = [v15 uniqueIdentifier];
  BOOL v19 = a3 != 0;
  int v20 = AWDLTrafficRegistrationService.serviceType.getter();
  char v21 = AWDLTrafficRegistrationService.serviceType.getter();
  uint64_t v51 = v10;
  uint64_t v57 = v17;
  if (v20 != 2 || v21 != 2)
  {

    int v31 = 0;
    uint64_t v26 = v59;
    uint64_t v27 = (void **)v60;
    uint64_t v28 = v54;
    uint64_t v29 = v55;
    uint64_t v30 = v53;
    goto LABEL_7;
  }
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v24 = v23;
  if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v24 == v25)
  {

    swift_bridgeObjectRelease_n();
    uint64_t v26 = v59;
    uint64_t v27 = (void **)v60;
    uint64_t v28 = v54;
    uint64_t v29 = v55;
    uint64_t v30 = v53;
LABEL_15:
    int v31 = v19;
    goto LABEL_7;
  }
  char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v26 = v59;
  uint64_t v27 = (void **)v60;
  uint64_t v28 = v54;
  uint64_t v29 = v55;
  uint64_t v30 = v53;
  if (v49) {
    goto LABEL_15;
  }
  int v31 = 1;
LABEL_7:
  uint64_t v32 = *(void (**)(char *, uint64_t))(v30 + 8);
  v32(v28, v7);
  uint64_t v33 = (char *)v26 + *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v34 = *v27;
  *uint64_t v26 = v34;
  uint64_t v60 = TupleTypeMetadata2;
  id v35 = v58;
  ((void (*)(char *, void (*)(char *, uint64_t), uint64_t))v58)(v33, v29, v7);
  if (v31)
  {
    id v55 = v32;
    uint64_t v36 = *(int *)(v60 + 48);
    char v37 = v51;
    char v38 = (char *)v51 + v36;
    *uint64_t v51 = v34;
    ((void (*)(char *, char *, uint64_t))v35)((char *)v37 + v36, v33, v7);
    os_log_type_t v39 = v52;
    if (v52)
    {
      id v40 = v34;
      id v41 = v39;
      char v42 = static NSObject.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v59, v60);

      char v43 = v42 ^ 1;
    }
    else
    {
      uint64_t v46 = *(void (**)(char *, uint64_t))(v56 + 8);
      id v47 = v34;
      v46(v59, v60);
      char v43 = 1;
    }
    v55(v38, v7);
  }
  else
  {
    id v44 = *(void (**)(void *, uint64_t))(v56 + 8);
    id v45 = v34;
    v44(v26, v60);
    char v43 = 0;
  }
  return v43 & 1;
}

BOOL sub_100397890(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for AWDLPeer(0);
  __chkstk_darwin();
  uint64_t v9 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = [a2 uniqueIdentifier];
  int v11 = AWDLTrafficRegistrationService.serviceType.getter();
  char v12 = AWDLTrafficRegistrationService.serviceType.getter();

  if (v11 != 2 || v12 != 2) {
    return 0;
  }
  v31[1] = a3;
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;
  if (v14 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v16 == v17)
  {
    swift_bridgeObjectRelease_n();
    uint64_t p_type = &stru_100479FF0.type;
  }
  else
  {
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t p_type = (char **)(&stru_100479FF0 + 16);
    if ((v19 & 1) == 0) {
      return 1;
    }
  }
  id v21 = [a2 p_type[450]];
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v24 = v23;
  if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v24 == v25)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v26 & 1) == 0) {
      return 1;
    }
  }
  sub_100376468(a4 & 0xFFFFFFFFFFFFLL, (uint64_t)v9);
  uint64_t v27 = &v9[*(int *)(v7 + 68)];
  uint64_t v28 = *(void *)v27;
  uint64_t v29 = v27[12];
  sub_1003AB6C0((uint64_t)v9, type metadata accessor for AWDLPeer);
  if (v29 << 32 == 0x400000000) {
    return 0;
  }
  return (*(unsigned __int8 *)AWDLActionFrame.RealtimeGroup.Flags.airPlaySender.unsafeMutableAddressor() & ~v28) == 0;
}

void sub_100397AF8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    goto LABEL_20;
  }
  uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      if ((a2 & 0xC000000000000001) != 0)
      {
        id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        id v4 = *(id *)(a2 + 32);
      }
      uint64_t v5 = v4;
      sub_10006F314(0, (unint64_t *)&unk_100484A40);
      char v6 = static NSObject.== infix(_:_:)();

      if ((v6 & 1) == 0)
      {
        for (uint64_t i = 0; ; ++i)
        {
          unint64_t v11 = i + 1;
          if (__OFADD__(i, 1)) {
            break;
          }
          if (v11 == v3) {
            return;
          }
          if ((a2 & 0xC000000000000001) != 0)
          {
            id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if ((v11 & 0x8000000000000000) != 0) {
              goto LABEL_18;
            }
            if (v11 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_19;
            }
            id v8 = *(id *)(a2 + 32 + 8 * v11);
          }
          uint64_t v9 = v8;
          char v10 = static NSObject.== infix(_:_:)();

          if (v10) {
            return;
          }
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        swift_bridgeObjectRetain();
        uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v3) {
          continue;
        }
      }
      return;
    }
  }
}

uint64_t sub_100397C94(unint64_t a1)
{
  unint64_t v3 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v3;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v3 & 0x8000000000000000) != 0
    || (v3 & 0x4000000000000000) != 0)
  {
    unint64_t v3 = sub_1003A4FE4(v3);
    *uint64_t v1 = v3;
  }
  uint64_t v5 = v3 & 0xFFFFFFFFFFFFFF8;
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    uint64_t v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      uint64_t v9 = v5 + 8 * a1;
      uint64_t v10 = *(void *)(v9 + 32);
      memmove((void *)(v9 + 32), (const void *)(v9 + 40), 8 * v8);
      *(void *)(v5 + 16) = v7;
      specialized Array._endMutation()();
      return v10;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100397D78(uint64_t a1, void *a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_beginAccess();
    __chkstk_darwin();
    sub_10006F314(255, (unint64_t *)&unk_100484A40);
    type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation();
    sub_100296BC4();
    type metadata accessor for Dictionary();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    Collection.firstIndex(where:)();
    swift_bridgeObjectRelease();
    sub_100038018(v4, v5, v6);
    if (v6 != 255) {
      sub_100397F24(a2, 1);
    }
    return swift_release();
  }
  return result;
}

void sub_100397F24(void *a1, int a2)
{
  unint64_t v3 = v2;
  int v239 = a2;
  uint64_t v5 = *v2;
  uint64_t v6 = type metadata accessor for DispatchTimeInterval();
  uint64_t v226 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v225 = (uint64_t *)((char *)&v218 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void *)(v5 + 416);
  uint64_t v9 = *(void *)(v8 + 8);
  uint64_t v10 = *(void *)(v5 + 408);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v260 = v9;
  uint64_t v262 = v10;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v258 = AssociatedConformanceWitness;
  uint64_t v259 = AssociatedTypeWitness;
  swift_getAssociatedConformanceWitness();
  uint64_t v13 = type metadata accessor for Preferences();
  uint64_t v256 = *(void *)(v13 - 8);
  uint64_t v257 = v13;
  __chkstk_darwin();
  Swift::String v255 = (char *)&v218 - v14;
  sub_100010BCC((uint64_t *)&unk_1004882F0);
  __chkstk_darwin();
  uint64_t v219 = (uint64_t)&v218 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v229 = (uint64_t)&v218 - v16;
  __chkstk_darwin();
  uint64_t v227 = (uint64_t)&v218 - v17;
  __chkstk_darwin();
  char v19 = (char *)&v218 - v18;
  uint64_t v20 = type metadata accessor for AWDLPeer(0);
  uint64_t v222 = *(void *)(v20 - 8);
  __chkstk_darwin();
  uint64_t v224 = (uint64_t)&v218 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v220 = (uint64_t)&v218 - v22;
  __chkstk_darwin();
  uint64_t v221 = (uint64_t)&v218 - v23;
  __chkstk_darwin();
  uint64_t v240 = (uint64_t)&v218 - v24;
  __chkstk_darwin();
  uint64_t v241 = (uint64_t)&v218 - v25;
  __chkstk_darwin();
  uint64_t v250 = (uint64_t)&v218 - v26;
  __chkstk_darwin();
  uint64_t v265 = (uint64_t)&v218 - v27;
  uint64_t v223 = v28;
  __chkstk_darwin();
  uint64_t v30 = (char *)&v218 - v29;
  id v31 = [a1 peerAddress];
  unint64_t v32 = WiFiMACAddress.wifiAddress.getter();

  unint64_t v263 = v32 & 0xFFFFFFFFFFFFLL;
  sub_100376468(v32 & 0xFFFFFFFFFFFFLL, (uint64_t)v30);
  uint64_t v33 = *(void *)(*v3 + 704);
  uint64_t v270 = (uint64_t)v3;
  uint64_t v34 = *(void *)((char *)v3 + v33);
  id v35 = (int *)v20;
  swift_unownedRetainStrong();
  uint64_t v36 = sub_1003366E8();
  uint64_t v267 = v37;
  uint64_t v39 = v38;
  uint64_t v269 = v40;
  uint64_t v236 = v34;
  swift_release();
  os_log_t v268 = v35;
  sub_1000136F4((uint64_t)&v30[v35[14]], (uint64_t)v19, (uint64_t *)&unk_1004882F0);
  uint64_t v41 = type metadata accessor for AWDLActionFrame.DataPathState(0);
  uint64_t v42 = *(void *)(v41 - 8);
  char v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48);
  uint64_t v234 = v41;
  id v233 = v43;
  uint64_t v232 = v42 + 48;
  int v44 = ((uint64_t (*)(char *, uint64_t))v43)(v19, 1);
  uint64_t v228 = v6;
  if (v44 == 1)
  {
    sub_1000380B4((uint64_t)v19, (uint64_t *)&unk_1004882F0);
    uint64_t v45 = 0;
    unint64_t v46 = 0;
    unint64_t v253 = 0;
    unint64_t v252 = 0;
    uint64_t v254 = 0;
    uint64_t v251 = 0;
    int v266 = 1;
  }
  else
  {
    uint64_t v47 = *((unsigned __int16 *)v19 + 15);
    uint64_t v45 = *(unsigned int *)(v19 + 26);
    unint64_t v48 = v45 | (unint64_t)(v47 << 32);
    int v266 = v19[32];
    sub_1003AB6C0((uint64_t)v19, type metadata accessor for AWDLActionFrame.DataPathState);
    unint64_t v49 = v48 >> 16;
    unint64_t v50 = v48 >> 24;
    uint64_t v254 = v47;
    unint64_t v46 = v48 >> 8;
    unint64_t v253 = v49;
    unint64_t v252 = v50;
    uint64_t v251 = v47 >> 8;
  }
  uint64_t v237 = v8;
  uint64_t v231 = v45;
  unint64_t v230 = v46;
  if (v267)
  {
    v271[0] = v36;
    v271[1] = v267;
    __int16 v272 = v39;
    char v273 = BYTE2(v39);
    char v274 = BYTE3(v39);
    char v275 = BYTE4(v39);
    char v276 = BYTE5(v39);
    int v277 = v269;
    __int16 v278 = WORD2(v269);
    swift_bridgeObjectRetain();
    sub_10039B53C((unint64_t *)v271, (uint64_t)v30, &v279);
    uint64_t v235 = 0;
    swift_bridgeObjectRelease();
    uint64_t v247 = v279;
    uint64_t v246 = BYTE1(v279);
    uint64_t v245 = BYTE2(v279);
    uint64_t v244 = BYTE3(v279);
    uint64_t v243 = BYTE4(v279);
    uint64_t v242 = BYTE5(v279);
    BOOL v51 = (v266 & 1) == 0
       && static NANClusterChangeEvent.__derived_struct_equals(_:_:)(((unint64_t)v254 << 32) | (v251 << 40) | ((unint64_t)v252 << 24) | ((unint64_t)v253 << 16) | ((unint64_t)v46 << 8) | v45, v279 | ((unint64_t)BYTE1(v279) << 8) | ((unint64_t)BYTE2(v279) << 16) | ((unint64_t)BYTE3(v279) << 24) | ((unint64_t)BYTE4(v279) << 32) | ((unint64_t)BYTE5(v279) << 40));
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v247 = 0;
    uint64_t v246 = 0;
    uint64_t v245 = 0;
    uint64_t v244 = 0;
    uint64_t v243 = 0;
    uint64_t v242 = 0;
    uint64_t v235 = 0;
    uint64_t v269 = 0x300000000;
    BOOL v51 = v266;
  }
  uint64_t v52 = AWDLPeer.infrastructureChannel.getter();
  uint64_t v53 = v52 & 0xFFFFFFFFFFFFLL;
  uint64_t v54 = v270 + *(void *)(*(void *)v270 + 160);
  id v55 = a1;
  uint64_t v56 = Logger.logObject.getter();
  os_log_type_t v57 = static os_log_type_t.default.getter();
  BOOL v58 = os_log_type_enabled(v56, v57);
  id v238 = v55;
  uint64_t v249 = v52 & 0xFFFFFFFFFFFFLL;
  if (v58)
  {
    uint64_t v59 = swift_slowAlloc();
    uint64_t v218 = swift_slowAlloc();
    v271[0] = v218;
    *(_DWORD *)uint64_t v59 = 136315906;
    BOOL v261 = v51;
    uint64_t v60 = v52;
    uint64_t v61 = v55;
    id v62 = [v55 uniqueIdentifier:v218];
    uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v248 = v54;
    uint64_t v64 = v63;
    unint64_t v264 = v30;
    unint64_t v66 = v65;

    uint64_t v279 = sub_100010680(v64, v66, v271);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v52 = v60;
    swift_bridgeObjectRelease();
    *(_WORD *)(v59 + 12) = 2080;
    uint64_t v67 = Optional<A>.description.getter(v269 & 0xFFFFFFFFFFFFLL);
    uint64_t v279 = sub_100010680(v67, v68, v271);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v59 + 22) = 2080;
    uint64_t v69 = WiFiAddress.description.getter(v263);
    uint64_t v279 = sub_100010680(v69, v70, v271);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v59 + 32) = 2080;
    uint64_t v30 = v264;
    uint64_t v71 = Optional<A>.description.getter(v53);
    uint64_t v279 = sub_100010680(v71, v72, v271);
    uint64_t v54 = v248;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    BOOL v51 = v261;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v56, v57, "Evaluating retro mode for %s with my infra: %s, peer %s infra: %s", (uint8_t *)v59, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v73 = &v30[v268[16]];
  if (v73[2]) {
    goto LABEL_18;
  }
  if (AWDLActionFrame.Version.platformType.getter(*(_WORD *)v73) != 3) {
    goto LABEL_18;
  }
  swift_getAssociatedTypeWitness();
  uint64_t v74 = swift_getAssociatedConformanceWitness();
  id v75 = *(uint64_t (**)(uint64_t, uint64_t))(v74 + 8);
  uint64_t v76 = swift_checkMetadataState();
  uint64_t v77 = v75(v76, v74);
  uint64_t v78 = *WiFiDriverCapabilities.supportsSimultaneousDualBand.unsafeMutableAddressor();
  uint64_t v279 = v77;
  v271[0] = v78;
  unint64_t v79 = sub_1002C8868();
  swift_bridgeObjectRetain_n();
  ExtendableOptionSet.formIntersection(_:)((uint64_t)&v279, (uint64_t)&type metadata for WiFiDriverCapabilities, v79);
  LOBYTE(v79) = sub_1000956AC(v271[0], v78);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v79)
  {
    int v80 = *PreferenceDefaults.isiPad.unsafeMutableAddressor();
    uint64_t v81 = v265;
    sub_1003AB930((uint64_t)v30, v265, type metadata accessor for AWDLPeer);
    if (v80 == 1)
    {
      sub_1003AB6C0(v81, type metadata accessor for AWDLPeer);
LABEL_23:
      uint64_t v91 = Logger.logObject.getter();
      os_log_type_t v92 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v91, v92))
      {
        uint64_t v93 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v93 = 0;
        _os_log_impl((void *)&_mh_execute_header, v91, v92, "Skipping evaluation of infra disconnect policy", v93, 2u);
        swift_slowDealloc();
      }

      sub_1003AB6C0((uint64_t)v30, type metadata accessor for AWDLPeer);
      return;
    }
  }
  else
  {
LABEL_18:
    uint64_t v81 = v265;
    sub_1003AB930((uint64_t)v30, v265, type metadata accessor for AWDLPeer);
  }
  uint64_t v82 = v81 + v268[17];
  if ((unint64_t)*(unsigned __int8 *)(v82 + 12) << 32 == 0x400000000)
  {
    sub_1003AB6C0(v81, type metadata accessor for AWDLPeer);
  }
  else
  {
    int v83 = *(unsigned __int8 *)(v82 + 24);
    int v84 = *(unsigned __int8 *)AWDLActionFrame.RealtimeGroup.AdditionalFlags.disableWiFiDisconnect.unsafeMutableAddressor() & ~v83;
    sub_1003AB6C0(v81, type metadata accessor for AWDLPeer);
    if (!v84) {
      goto LABEL_23;
    }
  }
  uint64_t v85 = v258;
  id v86 = *(void (**)(uint64_t, uint64_t))(v258 + 120);
  uint64_t v87 = swift_checkMetadataState();
  uint64_t v88 = v255;
  v86(v87, v85);
  uint64_t v89 = v257;
  char v90 = Preferences.disableWiFiDisconnectRemoteCamera.getter();
  (*(void (**)(char *, uint64_t))(v256 + 8))(v88, v89);
  if (v90) {
    goto LABEL_23;
  }
  BOOL v261 = v51;
  uint64_t v94 = v269 & 0xFF00000000;
  uint64_t v95 = BYTE4(v269);
  unint64_t v264 = v30;
  if ((v269 & 0xFF00000000) == 0x300000000 || BYTE4(v269))
  {
    uint64_t v106 = v250;
    sub_1003AB930((uint64_t)v30, v250, type metadata accessor for AWDLPeer);
  }
  else
  {
    uint64_t v96 = v52;
    uint64_t v97 = v54;
    uint64_t v98 = v269 & 0xFF00000000;
    swift_getAssociatedTypeWitness();
    uint64_t v99 = swift_getAssociatedConformanceWitness();
    int v100 = *(uint64_t (**)(uint64_t, uint64_t))(v99 + 8);
    uint64_t v101 = swift_checkMetadataState();
    uint64_t v102 = v100(v101, v99);
    uint64_t v95 = 0;
    uint64_t v94 = v98;
    uint64_t v54 = v97;
    uint64_t v52 = v96;
    uint64_t v103 = v102;
    uint64_t v104 = *WiFiDriverCapabilities.supportsSimultaneousDualBand.unsafeMutableAddressor();
    uint64_t v279 = v103;
    v271[0] = v104;
    unint64_t v105 = sub_1002C8868();
    swift_bridgeObjectRetain_n();
    ExtendableOptionSet.formIntersection(_:)((uint64_t)&v279, (uint64_t)&type metadata for WiFiDriverCapabilities, v105);
    LOBYTE(v105) = sub_1000956AC(v271[0], v104);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v106 = v250;
    sub_1003AB930((uint64_t)v30, v250, type metadata accessor for AWDLPeer);
    if ((v105 & 1) == 0)
    {
      sub_1003AB6C0(v106, type metadata accessor for AWDLPeer);
      uint64_t v107 = v249 & 0xFF00000000;
      BOOL v108 = 1;
      goto LABEL_36;
    }
  }
  uint64_t v107 = v249 & 0xFF00000000;
  if ((v249 & 0xFF00000000) == 0x300000000)
  {
    uint64_t v109 = v241;
    sub_1003AB930(v106, v241, type metadata accessor for AWDLPeer);
LABEL_34:
    sub_1003AB6C0(v109, type metadata accessor for AWDLPeer);
    sub_1003AB6C0(v106, type metadata accessor for AWDLPeer);
LABEL_35:
    BOOL v108 = 0;
    goto LABEL_36;
  }
  uint64_t v109 = v241;
  sub_1003AB930(v106, v241, type metadata accessor for AWDLPeer);
  if ((v52 & 0xFF00000000) != 0) {
    goto LABEL_34;
  }
  uint64_t v112 = v227;
  sub_1000136F4(v109 + v268[14], v227, (uint64_t *)&unk_1004882F0);
  if (v233(v112, 1, v234) == 1)
  {
    sub_1000380B4(v112, (uint64_t *)&unk_1004882F0);
    sub_1003AB6C0(v109, type metadata accessor for AWDLPeer);
    sub_1003AB6C0(v106, type metadata accessor for AWDLPeer);
  }
  else
  {
    char v197 = *(unsigned char *)(v112 + 84);
    sub_1003AB6C0(v112, type metadata accessor for AWDLActionFrame.DataPathState);
    sub_1003AB6C0(v109, type metadata accessor for AWDLPeer);
    sub_1003AB6C0(v106, type metadata accessor for AWDLPeer);
    if (v197) {
      goto LABEL_35;
    }
  }
  BOOL v108 = v94 == 0x300000000 || v269 != v52;
LABEL_36:
  if (v94 == 0x300000000)
  {
    char v110 = v107 != 0x300000000 || v108;
    if ((v110 & 1) == 0) {
      goto LABEL_128;
    }
    goto LABEL_58;
  }
  if (v107 != 0x300000000 && v52 == v269)
  {
    if (v95 == 3)
    {
      char v111 = BYTE4(v52) != 3 || v108;
      if ((v111 & 1) == 0) {
        goto LABEL_128;
      }
      goto LABEL_59;
    }
    if (BYTE4(v52) != 3
      && ((0x801004u >> (8 * BYTE4(v269))) & 0xFFC) == ((0x801004u >> (8 * BYTE4(v52))) & 0xFFC)
      && !v108)
    {
      goto LABEL_128;
    }
  }
  if (v95 < 2)
  {
LABEL_58:
    BOOL v114 = 0;
    goto LABEL_65;
  }
LABEL_59:
  BOOL v114 = (v52 & 0xFE00000000) == 0 || v107 == 0x300000000;
LABEL_65:
  uint64_t v116 = v269 & 0xFFFFFFFFFFFFLL;
  if (!Optional<A>.isDFS.getter(v269 & 0xFFFFFFFFFFFFLL) && !Optional<A>.isDFS.getter(v52 & 0xFFFFFFFFFFFFLL))
  {
    if (v94 == 0x300000000 || v95 != 1 || v107 == 0x300000000)
    {
      if (!v114 && !v108) {
        goto LABEL_128;
      }
    }
    else
    {
      int v125 = (const mach_header_64 *)(v52 & 0xFF00000000) == &_mh_execute_header || v114;
      if (((v125 | v108) & 1) == 0) {
        goto LABEL_128;
      }
    }
  }
  if (!Optional<A>.isDFS.getter(v116) && !Optional<A>.isDFS.getter(v52 & 0xFFFFFFFFFFFFLL))
  {
    uint64_t v123 = v240;
    sub_1003AB930((uint64_t)v264, v240, type metadata accessor for AWDLPeer);
    goto LABEL_82;
  }
  uint64_t v265 = v95;
  uint64_t v269 = v52;
  uint64_t v248 = v54;
  swift_getAssociatedTypeWitness();
  uint64_t v117 = swift_getAssociatedConformanceWitness();
  unint64_t v118 = *(uint64_t (**)(uint64_t, uint64_t))(v117 + 8);
  uint64_t v119 = swift_checkMetadataState();
  uint64_t v120 = v118(v119, v117);
  uint64_t v121 = *WiFiDriverCapabilities.supportsDFSProxy.unsafeMutableAddressor();
  uint64_t v279 = v120;
  v271[0] = v121;
  unint64_t v122 = sub_1002C8868();
  swift_bridgeObjectRetain_n();
  uint64_t v259 = v122;
  ExtendableOptionSet.formIntersection(_:)((uint64_t)&v279, (uint64_t)&type metadata for WiFiDriverCapabilities, v122);
  LOBYTE(v122) = sub_1000956AC(v271[0], v121);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v123 = v240;
  sub_1003AB930((uint64_t)v264, v240, type metadata accessor for AWDLPeer);
  if ((v122 & 1) == 0) {
    goto LABEL_82;
  }
  uint64_t v124 = v229;
  sub_1000136F4(v123 + v268[14], v229, (uint64_t *)&unk_1004882F0);
  if (v233(v124, 1, v234) == 1)
  {
    sub_1000380B4(v124, (uint64_t *)&unk_1004882F0);
    goto LABEL_82;
  }
  char v195 = *(unsigned char *)(v124 + 85);
  sub_1003AB6C0(v124, type metadata accessor for AWDLActionFrame.DataPathState);
  sub_1003AB6C0(v123, type metadata accessor for AWDLPeer);
  if ((v195 & 1) == 0) {
    goto LABEL_83;
  }
  if (v94 == 0x300000000 || !v265)
  {
    uint64_t v210 = swift_checkMetadataState();
    uint64_t v211 = v118(v210, v117);
    uint64_t v212 = *WiFiDriverCapabilities.supportsSimultaneousDualBand.unsafeMutableAddressor();
    uint64_t v279 = v211;
    v271[0] = v212;
    swift_bridgeObjectRetain_n();
    ExtendableOptionSet.formIntersection(_:)((uint64_t)&v279, (uint64_t)&type metadata for WiFiDriverCapabilities, v259);
    char v213 = sub_1000956AC(v271[0], v212);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v123 = v221;
    sub_1003AB930((uint64_t)v264, v221, type metadata accessor for AWDLPeer);
    uint64_t v196 = v269;
    if (v213)
    {
      sub_1003AB6C0(v123, type metadata accessor for AWDLPeer);
LABEL_128:
      sub_1003AB6C0((uint64_t)v264, type metadata accessor for AWDLPeer);
      return;
    }
  }
  else
  {
    uint64_t v123 = v221;
    sub_1003AB930((uint64_t)v264, v221, type metadata accessor for AWDLPeer);
    uint64_t v196 = v269;
  }
  if (v107 == 0x300000000)
  {
    uint64_t v214 = v220;
    sub_1003AB930(v123, v220, type metadata accessor for AWDLPeer);
    goto LABEL_127;
  }
  uint64_t v215 = v196 & 0xFF00000000;
  uint64_t v214 = v220;
  sub_1003AB930(v123, v220, type metadata accessor for AWDLPeer);
  if (!v215)
  {
    uint64_t v216 = v219;
    sub_1000136F4(v214 + v268[14], v219, (uint64_t *)&unk_1004882F0);
    if (v233(v216, 1, v234) != 1)
    {
      char v217 = *(unsigned char *)(v216 + 84);
      sub_1003AB6C0(v216, type metadata accessor for AWDLActionFrame.DataPathState);
      sub_1003AB6C0(v214, type metadata accessor for AWDLPeer);
      sub_1003AB6C0(v123, type metadata accessor for AWDLPeer);
      if (v217) {
        goto LABEL_128;
      }
      goto LABEL_83;
    }
    sub_1000380B4(v216, (uint64_t *)&unk_1004882F0);
    sub_1003AB6C0(v214, type metadata accessor for AWDLPeer);
LABEL_82:
    sub_1003AB6C0(v123, type metadata accessor for AWDLPeer);
    goto LABEL_83;
  }
LABEL_127:
  sub_1003AB6C0(v214, type metadata accessor for AWDLPeer);
  sub_1003AB6C0(v123, type metadata accessor for AWDLPeer);
  if (v107 == 0x300000000) {
    goto LABEL_128;
  }
LABEL_83:
  uint64_t v126 = Logger.logObject.getter();
  os_log_type_t v127 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v126, v127))
  {
    uint64_t v128 = swift_slowAlloc();
    v271[0] = swift_slowAlloc();
    unsigned __int8 v129 = v231;
    unsigned __int8 v130 = v230;
    *(_DWORD *)uint64_t v128 = 136315394;
    unsigned __int8 v131 = v253;
    unsigned __int8 v132 = v252;
    unsigned __int8 v133 = v254;
    uint64_t v134 = v251;
    if (v266)
    {
      uint64_t v135 = (unsigned __int8 *)WiFiAddress.zero.unsafeMutableAddressor();
      unsigned __int8 v129 = *v135;
      unsigned __int8 v130 = v135[1];
      unsigned __int8 v131 = v135[2];
      unsigned __int8 v132 = v135[3];
      unsigned __int8 v133 = v135[4];
      uint64_t v134 = v135[5];
    }
    uint64_t v136 = WiFiAddress.description.getter(((unint64_t)v133 << 32) | (v134 << 40) | ((unint64_t)v132 << 24) | ((unint64_t)v131 << 16) | ((unint64_t)v130 << 8) | v129);
    uint64_t v279 = sub_100010680(v136, v137, v271);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unsigned int v138 = v247;
    *(_WORD *)(v128 + 12) = 2080;
    unsigned int v139 = v246;
    unsigned int v140 = v245;
    unsigned int v141 = v244;
    uint64_t v142 = v243;
    uint64_t v143 = v242;
    if (!v267)
    {
      uint64_t v144 = (unsigned __int8 *)WiFiAddress.zero.unsafeMutableAddressor();
      unsigned int v138 = *v144;
      unsigned int v139 = v144[1];
      unsigned int v140 = v144[2];
      unsigned int v141 = v144[3];
      uint64_t v142 = v144[4];
      uint64_t v143 = v144[5];
    }
    uint64_t v145 = WiFiAddress.description.getter((v142 << 32) | (v143 << 40) | ((unint64_t)v141 << 24) | ((unint64_t)v140 << 16) | ((unint64_t)v139 << 8) | v138);
    uint64_t v279 = sub_100010680(v145, v146, v271);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v126, v127, "Comparing peer SSID hash %s with my SSID hash %s", (uint8_t *)v128, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v147 = v238;
  if ((v239 & 1) == 0)
  {
    if (v266)
    {
      if (!v267) {
        goto LABEL_96;
      }
    }
    else if (v267 {
           && static NANClusterChangeEvent.__derived_struct_equals(_:_:)(((unint64_t)v254 << 32) | (v251 << 40) | ((unint64_t)v252 << 24) | ((unint64_t)v253 << 16) | ((unint64_t)v230 << 8) | v231, (v243 << 32) | (v242 << 40) | ((unint64_t)v244 << 24) | ((unint64_t)v245 << 16) | ((unint64_t)v246 << 8) | v247))
    }
    {
LABEL_96:
      id v148 = v147;
      id v149 = Logger.logObject.getter();
      os_log_type_t v150 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v149, v150))
      {
        uint64_t v151 = swift_slowAlloc();
        v271[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v151 = 136315394;
        id v152 = [v148 uniqueIdentifier];
        uint64_t v153 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v155 = v154;

        uint64_t v279 = sub_100010680(v153, v155, v271);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v151 + 12) = 2080;
        uint64_t v156 = WiFiAddress.description.getter(v263);
        uint64_t v279 = sub_100010680(v156, v157, v271);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v149, v150, "Not entering retro mode on responder for %s from %s because expecting to steer infra", (uint8_t *)v151, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v199 = (uint64_t)v264;
      uint64_t v269 = type metadata accessor for P2PTimer();
      uint64_t v200 = (uint64_t)v225;
      *uint64_t v225 = 5;
      uint64_t v201 = v226;
      (*(void (**)(uint64_t, void, uint64_t))(v226 + 104))(v200, enum case for DispatchTimeInterval.seconds(_:), v228);
      uint64_t v202 = (void *)*OS_dispatch_queue.awdl.unsafeMutableAddressor();
      uint64_t v203 = swift_allocObject();
      swift_weakInit();
      uint64_t v204 = v224;
      sub_1003AB930(v199, v224, type metadata accessor for AWDLPeer);
      unint64_t v205 = (*(unsigned __int8 *)(v222 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v222 + 80);
      uint64_t v206 = (void *)swift_allocObject();
      uint64_t v207 = v237;
      v206[2] = v262;
      v206[3] = v207;
      v206[4] = v203;
      v206[5] = v148;
      sub_1003AB998(v204, (uint64_t)v206 + v205, type metadata accessor for AWDLPeer);
      id v208 = v148;
      id v209 = v202;
      swift_retain();
      static P2PTimer.async(after:on:execute:)(v200, v209, (uint64_t)sub_1003AADF0, (uint64_t)v206);

      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v201 + 8))(v200, v228);
      sub_1003AB6C0(v199, type metadata accessor for AWDLPeer);
      swift_release();
      return;
    }
  }
  id v158 = v147;
  uint64_t v159 = Logger.logObject.getter();
  os_log_type_t v160 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v159, v160))
  {
    uint64_t v161 = swift_slowAlloc();
    v271[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v161 = 136315394;
    id v162 = [v158 uniqueIdentifier];
    uint64_t v163 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v165 = v164;

    uint64_t v279 = sub_100010680(v163, v165, v271);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v161 + 12) = 2080;
    uint64_t v166 = WiFiAddress.description.getter(v263);
    uint64_t v279 = sub_100010680(v166, v167, v271);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v159, v160, "Entering retro mode for %s from %s, disabling infrastructure Wi-Fi", (uint8_t *)v161, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v168 = (uint64_t)v264;
  swift_unownedRetainStrong();
  sub_10033BFD8(1);
  swift_release();
  uint64_t v169 = v270;
  uint64_t v170 = *(void *)(*(void *)v270 + 752);
  id v171 = *(void **)(v270 + v170);
  *(void *)(v270 + v170) = v158;

  uint64_t v172 = *(void *)(*(void *)v169 + 496);
  uint64_t v173 = *(void *)(v169 + v172);
  BOOL v174 = __OFADD__(v173, 1);
  uint64_t v175 = v173 + 1;
  if (v174)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v270 + v172) = v175;
    swift_getAssociatedTypeWitness();
    uint64_t v176 = swift_getAssociatedConformanceWitness();
    int v177 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v176 + 80);
    id v178 = v158;
    uint64_t v179 = swift_checkMetadataState();
    uint64_t v180 = v235;
    v177(32, v263, v179, v176);
    if (v180)
    {
      id v181 = v178;
      swift_errorRetain();
      id v182 = v181;
      swift_errorRetain();
      id v183 = Logger.logObject.getter();
      os_log_type_t v184 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v183, v184))
      {
        uint64_t v185 = swift_slowAlloc();
        uint64_t v269 = swift_slowAlloc();
        uint64_t v270 = swift_slowAlloc();
        v271[0] = v270;
        *(_DWORD *)uint64_t v185 = 136315650;
        id v186 = [v182 uniqueIdentifier];
        uint64_t v187 = v168;
        uint64_t v188 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v190 = v189;

        uint64_t v191 = v188;
        uint64_t v168 = v187;
        uint64_t v279 = sub_100010680(v191, v190, v271);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v185 + 12) = 2080;
        uint64_t v192 = WiFiAddress.description.getter(v263);
        uint64_t v279 = sub_100010680(v192, v193, v271);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v185 + 22) = 2112;
        swift_errorRetain();
        uint64_t v194 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v279 = v194;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(void *)uint64_t v269 = v194;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v183, v184, "Failed to disable infrastructure Wi-Fi on entering retro mode for %s from %s: %@", (uint8_t *)v185, 0x20u);
        sub_100010BCC(&qword_10047CC30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();

        swift_errorRelease();
        swift_errorRelease();
      }
    }
    sub_1003AB6C0(v168, type metadata accessor for AWDLPeer);
  }
}

uint64_t sub_10039A16C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v69 - v8;
  uint64_t v81 = *(void *)(v5 - 8);
  __chkstk_darwin();
  int v80 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v79 = (char *)&v69 - v11;
  __chkstk_darwin();
  uint64_t v13 = (char *)&v69 - v12;
  uint64_t v14 = (char *)v2 + *(void *)(v4 + 576);
  swift_beginAccess();
  if (*(void *)(*(void *)v14 + 16))
  {
    swift_bridgeObjectRetain();
    sub_10039F8DC(a1);
    if (v15)
    {
      uint64_t v74 = (uint64_t (*)(char *, uint64_t))a1;
      uint64_t v77 = v6;
      uint64_t v78 = v9;
      uint64_t v76 = v7;
      swift_bridgeObjectRelease();
      sub_10006F314(0, (unint64_t *)&unk_100484A40);
      sub_100296BC4();
      swift_bridgeObjectRetain();
      Dictionary.subscript.getter();
      swift_bridgeObjectRelease();
      uint64_t v69 = v2;
      uint64_t v17 = (void *)(v81 + 8);
      uint64_t v16 = *(void (**)(char *, uint64_t))(v81 + 8);
      v16(v13, v5);
      id v70 = v84[0];
      swift_bridgeObjectRetain();
      Dictionary.subscript.getter();
      swift_bridgeObjectRelease();

      swift_beginAccess();
      type metadata accessor for Dictionary();
      Dictionary.remove(at:)();
      uint64_t v71 = v13;
      unint64_t v72 = v16;
      uint64_t v75 = v5;
      id v73 = v17;
      v16(v13, v5);
      uint64_t v2 = v69;
      id v18 = v82[0];
      swift_endAccess();

      sub_100378300();
      id v19 = v70;
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.default.getter();
      int v22 = v21;
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v23 = swift_slowAlloc();
        v84[0] = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 136315650;
        LODWORD(v70) = v22;
        id v24 = [v19 uniqueIdentifier];
        uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v27 = v26;

        v82[0] = (id)sub_100010680(v25, v27, (uint64_t *)v84);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v23 + 12) = 2080;
        id v28 = [v19 peerAddress];
        unint64_t v29 = WiFiMACAddress.wifiAddress.getter();

        uint64_t v30 = WiFiAddress.description.getter(v29 & 0xFFFFFFFFFFFFLL);
        v82[0] = (id)sub_100010680(v30, v31, (uint64_t *)v84);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v23 + 22) = 2080;
        id v32 = [v19 peerAddress];
        unint64_t v33 = WiFiMACAddress.wifiAddress.getter();

        uint64_t v34 = WiFiAddress.description.getter(v33 & 0xFFFFFFFFFFFFLL);
        v82[0] = (id)sub_100010680(v34, v35, (uint64_t *)v84);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)v70, "Cleared responder traffic registration for %s from %s (cleared initiator registration to %s while in recovery)", (uint8_t *)v23, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v9 = v78;
      uint64_t v36 = v79;
      uint64_t v37 = v81;
      uint64_t v5 = v75;
      (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v78, v79, v75);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v9, 0, 1, v5);
      sub_1003885BC(v19, (uint64_t)v9);

      uint64_t v7 = v76;
      uint64_t v6 = v77;
      (*(void (**)(char *, uint64_t))(v76 + 8))(v9, v77);
      v72(v36, v5);
      a1 = (uint64_t)v74;
      uint64_t v13 = v71;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v38 = (char *)v2 + *(void *)(*v2 + 560);
  uint64_t result = swift_beginAccess();
  uint64_t v40 = *(void *)v38;
  if (*(void *)(*(void *)v38 + 16))
  {
    swift_bridgeObjectRetain();
    sub_10039F8DC(a1);
    if (v41)
    {
      uint64_t v77 = v6;
      uint64_t v78 = v9;
      uint64_t v76 = v7;
      uint64_t v42 = (char *)*(unsigned int *)(v40 + 36);
      swift_bridgeObjectRelease();
      uint64_t v75 = sub_10006F314(0, (unint64_t *)&unk_100484A40);
      sub_100296BC4();
      swift_bridgeObjectRetain();
      unint64_t v79 = v42;
      Dictionary.subscript.getter();
      swift_bridgeObjectRelease();
      int v44 = (char *)(v81 + 8);
      char v43 = *(void (**)(char *, uint64_t))(v81 + 8);
      v43(v13, v5);
      id v73 = v82[0];
      swift_bridgeObjectRetain();
      Dictionary.subscript.getter();
      swift_bridgeObjectRelease();

      swift_beginAccess();
      type metadata accessor for Dictionary();
      Dictionary.remove(at:)();
      uint64_t v74 = (uint64_t (*)(char *, uint64_t))v43;
      uint64_t v75 = v5;
      unint64_t v79 = v44;
      v43(v13, v5);
      uint64_t v45 = (void *)v83;
      swift_endAccess();

      sub_100378300();
      id v46 = v73;
      uint64_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.default.getter();
      int v49 = v48;
      if (os_log_type_enabled(v47, v48))
      {
        uint64_t v50 = swift_slowAlloc();
        id v73 = (id)swift_slowAlloc();
        v82[0] = v73;
        *(_DWORD *)uint64_t v50 = 136315650;
        LODWORD(v72) = v49;
        id v51 = [v46 uniqueIdentifier];
        uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v54 = v53;

        uint64_t v83 = sub_100010680(v52, v54, (uint64_t *)v82);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v50 + 12) = 2080;
        id v55 = [v46 peerAddress];
        unint64_t v56 = WiFiMACAddress.wifiAddress.getter();

        uint64_t v57 = WiFiAddress.description.getter(v56 & 0xFFFFFFFFFFFFLL);
        uint64_t v83 = sub_100010680(v57, v58, (uint64_t *)v82);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v50 + 22) = 2080;
        id v59 = [v46 peerAddress];
        unint64_t v60 = WiFiMACAddress.wifiAddress.getter();

        uint64_t v61 = WiFiAddress.description.getter(v60 & 0xFFFFFFFFFFFFLL);
        uint64_t v83 = sub_100010680(v61, v62, (uint64_t *)v82);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v47, (os_log_type_t)v72, "Cleared responder traffic registration for %s from %s (cleared initiator registration to %s)", (uint8_t *)v50, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v64 = v76;
      uint64_t v63 = v77;
      uint64_t v65 = (uint64_t)v78;
      uint64_t v67 = v80;
      uint64_t v66 = v81;
      uint64_t v68 = v75;
      (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v78, v80, v75);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v66 + 56))(v65, 0, 1, v68);
      sub_1003885BC(v46, v65);

      (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v65, v63);
      return v74(v67, v68);
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_10039ACB4(void *a1, uint64_t a2, int a3)
{
  int v29 = a3;
  v23[1] = a2;
  id v26 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v3 = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v27 = v3;
  uint64_t v28 = v4;
  __chkstk_darwin();
  uint64_t v6 = (char *)v23 - v5;
  uint64_t v7 = type metadata accessor for AWDLStatistics.TrafficRegistrationStop(0) - 8;
  __chkstk_darwin();
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchTime();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[0] = type metadata accessor for DispatchTimeInterval();
  uint64_t v14 = *(void *)(v23[0] - 8);
  __chkstk_darwin();
  uint64_t v16 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for P2PTimer();
  variable initialization expression of AWDLPeer.lastUpdated();
  DispatchTime.distance(to:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  id v17 = [v26 uniqueIdentifier];
  uint64_t v18 = v23[0];
  (*(void (**)(char *, char *, void))(v14 + 16))(&v9[*(int *)(v7 + 32)], v16, v23[0]);
  *(void *)uint64_t v9 = v17;
  v9[8] = v29;
  id v19 = *(void (**)(void))(AssociatedConformanceWitness + 144);
  swift_checkMetadataState();
  v19();
  uint64_t v20 = v27;
  uint64_t v21 = swift_getAssociatedConformanceWitness();
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 40))(v9, v20, v21);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v6, v20);
  sub_1003AB6C0((uint64_t)v9, type metadata accessor for AWDLStatistics.TrafficRegistrationStop);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v18);
}

uint64_t sub_10039B0AC(void *a1, int a2, int a3, uint64_t a4)
{
  uint64_t v42 = a4;
  int v45 = a3;
  int v39 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v38 = AssociatedTypeWitness;
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v44 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v36 - v8;
  sub_100010BCC((uint64_t *)&unk_1004882F0);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v43 = [a1 uniqueIdentifier];
  swift_unownedRetainStrong();
  sub_1003366E8();
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  swift_release();
  uint64_t v37 = v7;
  if (v13)
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = v15 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v16 = 0x300000000;
  }
  uint64_t v41 = v16;
  uint64_t v17 = v42;
  uint64_t v40 = AWDLPeer.infrastructureChannel.getter();
  swift_getAssociatedTypeWitness();
  uint64_t v18 = swift_getAssociatedConformanceWitness();
  id v19 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 8);
  uint64_t v20 = swift_checkMetadataState();
  uint64_t v21 = v19(v20, v18);
  uint64_t v22 = *WiFiDriverCapabilities.supportsSimultaneousDualBand.unsafeMutableAddressor();
  uint64_t v46 = v21;
  uint64_t v47 = v22;
  unint64_t v23 = sub_1002C8868();
  swift_bridgeObjectRetain_n();
  ExtendableOptionSet.formIntersection(_:)((uint64_t)&v46, (uint64_t)&type metadata for WiFiDriverCapabilities, v23);
  char v24 = sub_1000956AC(v47, v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v25 = type metadata accessor for AWDLPeer(0);
  sub_1000136F4(v17 + *(int *)(v25 + 56), (uint64_t)v11, (uint64_t *)&unk_1004882F0);
  uint64_t v26 = type metadata accessor for AWDLActionFrame.DataPathState(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 48))(v11, 1, v26) == 1)
  {
    sub_1000380B4((uint64_t)v11, (uint64_t *)&unk_1004882F0);
    uint64_t v27 = 0;
  }
  else
  {
    int v28 = v11[84];
    sub_1003AB6C0((uint64_t)v11, type metadata accessor for AWDLActionFrame.DataPathState);
    if (v28) {
      uint64_t v27 = 0x100000000000000;
    }
    else {
      uint64_t v27 = 0;
    }
  }
  unsigned __int8 v29 = v39;
  uint64_t v30 = v37;
  unint64_t v31 = *(void (**)(void))(AssociatedConformanceWitness + 144);
  swift_checkMetadataState();
  v31();
  uint64_t v32 = swift_getAssociatedConformanceWitness();
  uint64_t v33 = 0x1000000000000;
  if ((v24 & 1) == 0) {
    uint64_t v33 = 0;
  }
  uint64_t v34 = v43;
  (*(void (**)(id, uint64_t, unint64_t, void, uint64_t, uint64_t))(v32 + 32))(v43, v41, v33 & 0xFFFF000000000000 | v40 & 0xFFFFFFFFFFFFLL | v27, v29 | (v45 << 8), v30, v32);

  return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v9, v30);
}

uint64_t sub_10039B53C@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_10011A478(v5, v6);
  unint64_t v9 = v8;
  uint64_t v10 = (unsigned __int16 *)(a2 + *(int *)(type metadata accessor for AWDLPeer(0) + 20));
  uint64_t v11 = *(unsigned int *)(v10 + 1);
  uint64_t v12 = *v10;
  uint64_t v13 = WiFiInterface.macAddress.getter();
  unint64_t v14 = sub_100393238(v7, v9, v12 | (v11 << 16), v13 & 0xFFFFFFFFFFFFLL);
  char v15 = v14;
  unint64_t v16 = v14 >> 8;
  unint64_t v17 = v14 >> 16;
  unint64_t v18 = v14 >> 24;
  unint64_t v19 = HIDWORD(v14);
  unint64_t v20 = v14 >> 40;
  uint64_t result = sub_10000C970(v7, v9);
  *a3 = v15;
  a3[1] = v16;
  a3[2] = v17;
  a3[3] = v18;
  a3[4] = v19;
  a3[5] = v20;
  return result;
}

uint64_t sub_10039B618(uint64_t a1, void *a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_beginAccess();
    __chkstk_darwin();
    sub_10006F314(255, (unint64_t *)&unk_100484A40);
    type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation();
    sub_100296BC4();
    type metadata accessor for Dictionary();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    Collection.firstIndex(where:)();
    swift_bridgeObjectRelease();
    sub_100038018(v7, v8, v9);
    if (v9 != 255)
    {
      int v6 = sub_100397F24(a2, 1);
      sub_10039B0AC(a2, BYTE1(v6), v6, a3);
    }
    return swift_release();
  }
  return result;
}

BOOL sub_10039B7E4(uint64_t *a1, uint64_t a2)
{
  sub_10006F314(255, (unint64_t *)&unk_100484A40);
  uint64_t v4 = type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation();
  swift_getTupleTypeMetadata2();
  uint64_t v5 = __chkstk_darwin();
  uint64_t v7 = (char *)&v14 - v6;
  uint64_t v8 = *(int *)(v5 + 56);
  unsigned __int8 v9 = &v7[v8];
  uint64_t v10 = (char *)a1 + v8;
  uint64_t v11 = *a1;
  *(void *)uint64_t v7 = v11;
  uint64_t v12 = *(void *)(v4 - 8);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(&v7[v8], v10, v4);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v4);
  return v11 == a2;
}

void sub_10039B930(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (uint64_t *)&v19[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unsigned __int8 v9 = OS_dispatch_queue.awdl.unsafeMutableAddressor();
  uint64_t v10 = (void *)*v9;
  *uint64_t v8 = *v9;
  (*(void (**)(uint64_t *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v8, v5);
  if (v10)
  {
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      id v12 = [a2 servicesRequiringAvailabilityNotification];
      if (v12)
      {
        uint64_t v13 = v12;
        type metadata accessor for AWDLTrafficRegistrationService(0);
        uint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v15 = *(void *)(v14 + 16);
        if (v15)
        {
          swift_bridgeObjectRetain();
          uint64_t v16 = 0;
          do
          {
            unint64_t v17 = *(void **)(v14 + 8 * v16++ + 32);
            id v18 = v17;
            sub_100378CEC(v18);
          }
          while (v15 != v16);
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
      }
      uint64_t v20 = a3;
      swift_beginAccess();
      type metadata accessor for AWDLInterface.StateMonitoringClient();
      type metadata accessor for Dictionary();
      Dictionary.removeValue(forKey:)();
      swift_endAccess();
      swift_release();
      sub_1003ABB58(v21, v22, v23);
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_10039BB9C(void **a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v5 = *a1;
  id v6 = a3;
  id v7 = v5;
  id v8 = v6;
  id v9 = v7;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    unint64_t v17 = (void *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 138412546;
    os_log_t log = v10;
    id v13 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v17 = v8;

    *(_WORD *)(v12 + 12) = 2080;
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100010680(v14, v15, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    uint64_t v10 = log;
    _os_log_impl((void *)&_mh_execute_header, log, v11, "%@ is monitoring AWDL state information %s", (uint8_t *)v12, 0x16u);
    sub_100010BCC(&qword_10047CC30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  if (sub_1003788F8(v9))
  {
    uint64_t v16 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
  }
  else
  {
    uint64_t v16 = 0;
  }
  [a4 availabilityUpdatedForService:v9 error:v16, v17];
}

id sub_10039BE18@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 uniqueIdentifier];
  *a2 = result;
  return result;
}

void sub_10039BE5C(void **a1)
{
  uint64_t v1 = *a1;
  swift_beginAccess();
  id v24 = v1;
  type metadata accessor for AWDLTrafficRegistrationService(0);
  type metadata accessor for AWDLInterface.TrafficRegistrationServiceAvailabilityMonitor();
  sub_1003A98A8(&qword_10047C870, type metadata accessor for AWDLTrafficRegistrationService);
  id v2 = v1;
  Dictionary.subscript.getter();

  uint64_t v3 = v23;
  swift_endAccess();
  if (v23 == 1)
  {
    uint64_t v3 = 0;
  }
  else
  {
    swift_errorRetain();
    sub_1003A990C(v23);
  }
  uint64_t v4 = self;
  id v5 = v2;
  id v6 = [v4 zeroAddress];
  id v7 = [objc_allocWithZone((Class)AWDLTrafficRegistrationConfiguration) initWithUniqueIdentifier:v5 peerAddress:v6];

  id v8 = sub_1003A9B14(v7, 0, 0);
  if (v3)
  {
    if (v8)
    {
      swift_errorRelease();
      swift_errorRelease();
      return;
    }
  }
  else if (!v8)
  {
    return;
  }
  id v9 = v5;
  swift_errorRetain();
  id v10 = v9;
  swift_errorRetain();
  os_log_type_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    os_log_type_t v21 = v12;
    uint64_t v13 = swift_slowAlloc();
    v22[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315394;
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = sub_100010680(v14, v15, v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    if (v8) {
      uint64_t v16 = 7630702;
    }
    else {
      uint64_t v16 = 7827310;
    }
    uint64_t v23 = sub_100010680(v16, 0xE300000000000000, v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v21, "Notifying clients that %s is %s available", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  swift_beginAccess();
  id v24 = v10;
  id v17 = v10;
  type metadata accessor for Dictionary._Variant();
  uint64_t v18 = Dictionary._Variant.subscript.modify();
  if (*v19 == 1)
  {
    swift_errorRelease();
    __break(1u);
  }
  else
  {
    uint64_t v20 = (void (*)(uint64_t *, void))v18;
    *uint64_t v19 = v8;
    swift_errorRetain();
    swift_errorRelease();
    v20(v22, 0);

    swift_endAccess();
    v22[0] = sub_1003A9680();
    __chkstk_darwin();
    type metadata accessor for AWDLInterface.StateMonitoringClient();
    type metadata accessor for Dictionary.Values();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    v22[0] = Sequence.filter(_:)();
    __chkstk_darwin();
    type metadata accessor for Array();
    swift_getWitnessTable();
    Sequence.forEach(_:)();
    swift_errorRelease();
    swift_errorRelease();
    swift_bridgeObjectRelease();
  }
}

id sub_10039C448(uint64_t a1, uint64_t a2)
{
  id result = [*(id *)(a1 + 16) servicesRequiringAvailabilityNotification];
  if (result)
  {
    uint64_t v4 = result;
    type metadata accessor for AWDLTrafficRegistrationService(0);
    uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    char v6 = sub_1003758F0(a2, v5);
    swift_bridgeObjectRelease();
    return (id)(v6 & 1);
  }
  return result;
}

void sub_10039C4D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void **)(a1 + 8);
  if (a3) {
    uint64_t v5 = (void *)_convertErrorToNSError(_:)();
  }
  else {
    uint64_t v5 = 0;
  }
  [v4 availabilityUpdatedForService:a2 error:v5];
}

void sub_10039C538()
{
}

void *sub_10039C568(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  swift_errorRetain();
  uint64_t v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  return a1;
}

uint64_t sub_10039C5AC()
{
  return swift_errorRelease();
}

void *sub_10039C5B4(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  swift_errorRetain();
  *a1 = v4;
  swift_errorRelease();
  a1[1] = a2[1];
  return a1;
}

void *sub_10039C608(void *a1, void *a2)
{
  *a1 = *a2;
  swift_errorRelease();
  a1[1] = a2[1];
  return a1;
}

uint64_t sub_10039C648(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t sub_10039C6A4(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)id result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)id result = a2;
    }
  }
  return result;
}

uint64_t type metadata accessor for AWDLInterface.TrafficRegistrationServiceAvailabilityMonitor()
{
  return sub_100038354();
}

void sub_10039C70C()
{
  type metadata accessor for DispatchTime();
  if (v0 <= 0x3F)
  {
    sub_10039D9F4(319, (unint64_t *)&qword_10047DA60, (void (*)(uint64_t))&type metadata accessor for DispatchTime);
    if (v1 <= 0x3F)
    {
      sub_10039D9F4(319, (unint64_t *)&unk_100483170, (void (*)(uint64_t))&type metadata accessor for UUID);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

char *sub_10039C848(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for DispatchTime();
    uint64_t v8 = *(void *)(v7 - 8);
    id v9 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    uint64_t v10 = *(int *)(a3 + 36);
    os_log_type_t v11 = &a1[v10];
    os_log_type_t v12 = &a2[v10];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(&a2[v10], 1, v7))
    {
      uint64_t v13 = sub_100010BCC(&qword_10047DB90);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      v9(v11, v12, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v7);
    }
    uint64_t v15 = *(int *)(a3 + 40);
    uint64_t v16 = &a1[v15];
    id v17 = &a2[v15];
    uint64_t v18 = type metadata accessor for UUID();
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      uint64_t v20 = sub_100010BCC(&qword_1004862B0);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
  }
  return a1;
}

uint64_t sub_10039CAD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchTime();
  uint64_t v5 = *(void *)(v4 - 8);
  char v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(a1, v4);
  uint64_t v7 = a1 + *(int *)(a2 + 36);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v7, 1, v4)) {
    v6(v7, v4);
  }
  uint64_t v8 = a1 + *(int *)(a2 + 40);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v9 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v8, 1, v9);
  if (!result)
  {
    os_log_type_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8);
    return v11(v8, v9);
  }
  return result;
}

char *sub_10039CC78(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTime();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  uint64_t v9 = *(int *)(a3 + 36);
  uint64_t v10 = &a1[v9];
  os_log_type_t v11 = &a2[v9];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(&a2[v9], 1, v6))
  {
    uint64_t v12 = sub_100010BCC(&qword_10047DB90);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    v8(v10, v11, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  uint64_t v13 = *(int *)(a3 + 40);
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = sub_100010BCC(&qword_1004862B0);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t sub_10039CEB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTime();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  uint64_t v26 = a3;
  uint64_t v27 = a1;
  uint64_t v9 = *(int *)(a3 + 36);
  uint64_t v10 = (void *)(a1 + v9);
  os_log_type_t v11 = (void *)(a2 + v9);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v13 = v12(v10, 1, v6);
  int v14 = v12(v11, 1, v6);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v10, v11, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v7 + 8))(v10, v6);
LABEL_6:
    uint64_t v15 = sub_100010BCC(&qword_10047DB90);
    memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  v8((uint64_t)v10, (uint64_t)v11, v6);
LABEL_7:
  uint64_t v16 = *(int *)(v26 + 40);
  uint64_t v17 = (void *)(v27 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  uint64_t v19 = type metadata accessor for UUID();
  uint64_t v20 = *(void *)(v19 - 8);
  os_log_type_t v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1, v19);
  int v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 24))(v17, v18, v19);
      return v27;
    }
    (*(void (**)(void *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    uint64_t v24 = sub_100010BCC(&qword_1004862B0);
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64));
    return v27;
  }
  (*(void (**)(void *, void *, uint64_t))(v20 + 16))(v17, v18, v19);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  return v27;
}

char *sub_10039D1BC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTime();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  uint64_t v9 = *(int *)(a3 + 36);
  uint64_t v10 = &a1[v9];
  os_log_type_t v11 = &a2[v9];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(&a2[v9], 1, v6))
  {
    uint64_t v12 = sub_100010BCC(&qword_10047DB90);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    v8(v10, v11, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  uint64_t v13 = *(int *)(a3 + 40);
  int v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = sub_100010BCC(&qword_1004862B0);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v14, v15, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t sub_10039D3F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTime();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  uint64_t v26 = a3;
  uint64_t v27 = a1;
  uint64_t v9 = *(int *)(a3 + 36);
  uint64_t v10 = (void *)(a1 + v9);
  os_log_type_t v11 = (void *)(a2 + v9);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v13 = v12(v10, 1, v6);
  int v14 = v12(v11, 1, v6);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v10, v11, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v7 + 8))(v10, v6);
LABEL_6:
    uint64_t v15 = sub_100010BCC(&qword_10047DB90);
    memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  v8((uint64_t)v10, (uint64_t)v11, v6);
LABEL_7:
  uint64_t v16 = *(int *)(v26 + 40);
  uint64_t v17 = (void *)(v27 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  uint64_t v19 = type metadata accessor for UUID();
  uint64_t v20 = *(void *)(v19 - 8);
  os_log_type_t v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1, v19);
  int v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 40))(v17, v18, v19);
      return v27;
    }
    (*(void (**)(void *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    uint64_t v24 = sub_100010BCC(&qword_1004862B0);
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64));
    return v27;
  }
  (*(void (**)(void *, void *, uint64_t))(v20 + 32))(v17, v18, v19);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  return v27;
}

uint64_t sub_10039D700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10039D714);
}

uint64_t sub_10039D714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTime();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_100010BCC(&qword_10047DB90);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 36);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  uint64_t v14 = sub_100010BCC(&qword_1004862B0);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + *(int *)(a3 + 40);

  return v15(v17, a2, v16);
}

uint64_t sub_10039D868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10039D87C);
}

uint64_t sub_10039D87C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchTime();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = sub_100010BCC(&qword_10047DB90);
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + *(int *)(a4 + 36);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  uint64_t v16 = sub_100010BCC(&qword_1004862B0);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + *(int *)(a4 + 40);

  return v17(v19, a2, a2, v18);
}

uint64_t type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation()
{
  return sub_100038354();
}

void sub_10039D9F4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_10039DA4C(uint64_t a1)
{
  swift_unknownObjectRelease();
  unint64_t v2 = *(void **)(a1 + 16);
}

void *sub_10039DA90(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  uint64_t v5 = *(void **)(a2 + 16);
  a1[2] = v5;
  id v6 = v3;
  swift_unknownObjectRetain();
  id v7 = v5;
  return a1;
}

uint64_t sub_10039DADC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  id v7 = *(void **)(a2 + 16);
  uint64_t v8 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v7;
  id v9 = v7;

  return a1;
}

uint64_t sub_10039DB4C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectRelease();
  uint64_t v4 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  return a1;
}

uint64_t sub_10039DB9C(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10039DBE4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for AWDLInterface.StateMonitoringClient()
{
  return sub_100038354();
}

uint64_t sub_10039DC3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_10011A3BC(a1, a2);
  unint64_t v5 = v4;
  Data.load<A>(as:)((uint64_t)&type metadata for WiFiAddress, v3, v4, (uint64_t)&type metadata for WiFiAddress);
  if (!v2) {
    return sub_10000C970(v3, v5);
  }
  sub_10000C970(v3, v5);
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_10039DCD0(uint64_t a1, uint64_t a2)
{
  return sub_10039EDA4(a1, a2);
}

uint64_t sub_10039DD28(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = 0;
  uint64_t v4 = a1 + 32;
  uint64_t v5 = a2 + 32;
  uint64_t v83 = *(void *)(a1 + 16);
  uint64_t v81 = a1 + 32;
  uint64_t v80 = a2 + 32;
  while (2)
  {
    uint64_t v6 = v4 + 56 * v3;
    id v7 = *(unsigned char **)v6;
    uint64_t v8 = v5 + 56 * v3;
    id v9 = *(unsigned char **)v8;
    uint64_t v10 = *(void *)(*(void *)v6 + 16);
    if (v10 != *(void *)(*(void *)v8 + 16)) {
      return 0;
    }
    uint64_t v12 = *(void *)(v6 + 8);
    uint64_t v11 = *(void *)(v6 + 16);
    unint64_t v13 = *(void *)(v6 + 24);
    int v14 = *(unsigned __int8 *)(v6 + 32);
    uint64_t v15 = *(void *)(v6 + 40);
    double v16 = *(double *)(v6 + 48);
    uint64_t v17 = *(void *)(v8 + 8);
    uint64_t v18 = *(void *)(v8 + 16);
    unint64_t v19 = *(void *)(v8 + 24);
    int v20 = *(unsigned __int8 *)(v8 + 32);
    uint64_t v21 = *(void *)(v8 + 40);
    if (v10) {
      BOOL v22 = v7 == v9;
    }
    else {
      BOOL v22 = 1;
    }
    double v23 = *(double *)(v8 + 48);
    if (!v22)
    {
      if ((0x801004u >> (8 * v7[32])) != (0x801004u >> (8 * v9[32]))) {
        return 0;
      }
      if (v10 != 1)
      {
        if ((0x801004u >> (8 * v7[33])) != (0x801004u >> (8 * v9[33]))) {
          return 0;
        }
        int v28 = v7 + 34;
        unsigned __int8 v29 = v9 + 34;
        for (uint64_t i = v10 - 2; i; --i)
        {
          char v32 = *v28++;
          char v31 = v32;
          char v33 = *v29++;
          if ((0x801004u >> (8 * v31)) != (0x801004u >> (8 * v33))) {
            return 0;
          }
        }
      }
    }
    uint64_t v86 = v21;
    uint64_t v87 = v15;
    int v88 = v20;
    int v89 = v14;
    uint64_t v85 = v3;
    if (v13 >> 60 == 15)
    {
      if (v19 >> 60 != 15) {
        goto LABEL_61;
      }
      uint64_t v24 = v5;
      unint64_t v25 = v13;
      uint64_t v26 = v11;
      swift_bridgeObjectRetain();
      sub_10006E968(v12, v26, v25);
      swift_bridgeObjectRetain();
      sub_10006E968(v17, v18, v19);
      goto LABEL_55;
    }
    if (v19 >> 60 == 15)
    {
LABEL_61:
      uint64_t v73 = v11;
      sub_10006E968(v12, v11, v13);
      sub_10006E968(v17, v18, v19);
      sub_10006E0D8(v12, v73, v13);
      uint64_t v74 = v17;
      uint64_t v11 = v18;
      unint64_t v75 = v19;
      goto LABEL_65;
    }
    if ((unsigned __int16)v12 != (unsigned __int16)v17) {
      return 0;
    }
    uint64_t v84 = v17;
    uint64_t v27 = 0;
    uint64_t v82 = v18;
    switch(v13 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v11), v11))
        {
          __break(1u);
LABEL_69:
          __break(1u);
LABEL_70:
          __break(1u);
LABEL_71:
          __break(1u);
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
LABEL_75:
          __break(1u);
        }
        uint64_t v27 = HIDWORD(v11) - (int)v11;
LABEL_27:
        uint64_t v36 = v11;
        sub_10006E968(v12, v11, v13);
        uint64_t v11 = v36;
        break;
      case 2uLL:
        uint64_t v35 = *(void *)(v11 + 16);
        uint64_t v34 = *(void *)(v11 + 24);
        uint64_t v27 = v34 - v35;
        if (!__OFSUB__(v34, v35)) {
          goto LABEL_27;
        }
        goto LABEL_69;
      case 3uLL:
        break;
      default:
        uint64_t v27 = BYTE6(v13);
        break;
    }
    switch(v19 >> 62)
    {
      case 1uLL:
        LODWORD(v37) = HIDWORD(v18) - v18;
        if (__OFSUB__(HIDWORD(v18), v18)) {
          goto LABEL_70;
        }
        uint64_t v37 = (int)v37;
LABEL_33:
        if (v27 != v37)
        {
LABEL_62:
          uint64_t v74 = v12;
          goto LABEL_64;
        }
        if (v27 < 1)
        {
LABEL_38:
          unint64_t v25 = v13;
          uint64_t v26 = v11;
          swift_bridgeObjectRetain();
          sub_10006E968(v12, v26, v25);
          swift_bridgeObjectRetain();
          uint64_t v17 = v84;
          sub_10006E968(v84, v18, v19);
          sub_10006E0D8(v12, v26, v25);
          uint64_t v24 = v80;
          uint64_t v4 = v81;
          goto LABEL_55;
        }
        break;
      case 2uLL:
        uint64_t v39 = *(void *)(v18 + 16);
        uint64_t v38 = *(void *)(v18 + 24);
        BOOL v40 = __OFSUB__(v38, v39);
        uint64_t v37 = v38 - v39;
        if (!v40) {
          goto LABEL_33;
        }
        goto LABEL_71;
      case 3uLL:
        if (!v27) {
          goto LABEL_38;
        }
        goto LABEL_62;
      default:
        uint64_t v37 = BYTE6(v19);
        goto LABEL_33;
    }
    uint64_t v78 = v11;
    uint64_t v79 = v12;
    unint64_t v77 = v19;
    switch(v13 >> 62)
    {
      case 1uLL:
        uint64_t v48 = (int)v11;
        if (v11 >> 32 < (int)v11) {
          goto LABEL_72;
        }
        uint64_t v49 = v12;
        uint64_t v50 = v12;
        uint64_t v51 = v11;
        sub_10006E968(v50, v11, v13);
        swift_bridgeObjectRetain();
        sub_10006E968(v49, v51, v13);
        swift_bridgeObjectRetain();
        sub_10006E968(v84, v82, v19);
        sub_10006E968(v84, v82, v19);
        uint64_t v52 = __DataStorage._bytes.getter();
        if (!v52) {
          goto LABEL_43;
        }
        uint64_t v53 = __DataStorage._offset.getter();
        if (__OFSUB__(v48, v53)) {
          goto LABEL_74;
        }
        v52 += v48 - v53;
LABEL_43:
        __DataStorage._length.getter();
        sub_10009BE04(v52, v82, v19, (char *)__s1);
        sub_10006E0D8(v79, v78, v13);
        sub_10006E0D8(v84, v82, v19);
        uint64_t v54 = v79;
        uint64_t v55 = v78;
        unint64_t v56 = v13;
        goto LABEL_53;
      case 2uLL:
        uint64_t v57 = *(void *)(v11 + 16);
        uint64_t v76 = *(void *)(v11 + 24);
        unint64_t v58 = v13;
        unint64_t v59 = v19;
        uint64_t v60 = v11;
        swift_bridgeObjectRetain();
        uint64_t v61 = v12;
        unint64_t v62 = v58;
        sub_10006E968(v61, v60, v58);
        swift_bridgeObjectRetain();
        sub_10006E968(v84, v18, v59);
        sub_10006E968(v84, v18, v59);
        swift_retain();
        swift_retain();
        uint64_t v63 = __DataStorage._bytes.getter();
        if (v63)
        {
          uint64_t v64 = v63;
          uint64_t v65 = __DataStorage._offset.getter();
          if (__OFSUB__(v57, v65)) {
            goto LABEL_75;
          }
          uint64_t v66 = v64 + v57 - v65;
        }
        else
        {
          uint64_t v66 = 0;
        }
        if (__OFSUB__(v76, v57)) {
          goto LABEL_73;
        }
        __DataStorage._length.getter();
        sub_10009BE04(v66, v18, v77, (char *)__s1);
        swift_release();
        swift_release();
        sub_10006E0D8(v84, v18, v77);
        uint64_t v54 = v79;
        uint64_t v55 = v78;
        unint64_t v13 = v62;
        unint64_t v56 = v62;
LABEL_53:
        sub_10006E0D8(v54, v55, v56);
        if (__s1[0])
        {
LABEL_54:
          uint64_t v24 = v80;
          uint64_t v4 = v81;
          uint64_t v18 = v82;
          uint64_t v17 = v84;
          unint64_t v25 = v13;
          uint64_t v26 = v78;
          uint64_t v12 = v79;
          unint64_t v19 = v77;
LABEL_55:
          swift_bridgeObjectRelease();
          sub_10006E0D8(v17, v18, v19);
          swift_bridgeObjectRelease();
          sub_10006E0D8(v12, v26, v25);
          uint64_t result = 0;
          if (v89 != v88) {
            return result;
          }
          if (v87 != v86) {
            return result;
          }
          uint64_t v5 = v24;
          if (v16 != v23) {
            return result;
          }
          uint64_t v3 = v85 + 1;
          uint64_t result = 1;
          if (v85 + 1 == v83) {
            return result;
          }
          continue;
        }
LABEL_63:
        swift_bridgeObjectRelease();
        sub_10006E0D8(v84, v82, v77);
        swift_bridgeObjectRelease();
        uint64_t v11 = v78;
        uint64_t v74 = v79;
LABEL_64:
        unint64_t v75 = v13;
LABEL_65:
        sub_10006E0D8(v74, v11, v75);
        return 0;
      case 3uLL:
        memset(__s1, 0, 14);
        uint64_t v67 = v18;
        unint64_t v68 = v13;
        unint64_t v69 = v19;
        uint64_t v70 = v11;
        swift_bridgeObjectRetain();
        sub_10006E968(v12, v70, v68);
        swift_bridgeObjectRetain();
        sub_10006E968(v84, v67, v69);
        sub_10006E968(v84, v67, v69);
        sub_10009BE04((uint64_t)__s1, v67, v69, &v90);
        unint64_t v71 = v69;
        unint64_t v13 = v68;
        sub_10006E0D8(v84, v67, v71);
        uint64_t v45 = v12;
        uint64_t v46 = v70;
        unint64_t v47 = v68;
        goto LABEL_48;
      default:
        __s1[0] = v11;
        LOWORD(__s1[1]) = v13;
        BYTE2(__s1[1]) = BYTE2(v13);
        BYTE3(__s1[1]) = BYTE3(v13);
        BYTE4(__s1[1]) = BYTE4(v13);
        BYTE5(__s1[1]) = BYTE5(v13);
        unint64_t v41 = v13;
        unint64_t v42 = v19;
        uint64_t v43 = v11;
        swift_bridgeObjectRetain();
        sub_10006E968(v12, v43, v41);
        swift_bridgeObjectRetain();
        sub_10006E968(v84, v18, v42);
        sub_10006E968(v84, v18, v42);
        sub_10009BE04((uint64_t)__s1, v18, v42, &v90);
        unint64_t v44 = v42;
        unint64_t v13 = v41;
        sub_10006E0D8(v84, v18, v44);
        uint64_t v45 = v12;
        uint64_t v46 = v43;
        unint64_t v47 = v41;
LABEL_48:
        sub_10006E0D8(v45, v46, v47);
        if ((v90 & 1) == 0) {
          goto LABEL_63;
        }
        goto LABEL_54;
    }
  }
}

BOOL sub_10039E5D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (((0x801004u >> (8 * *(unsigned char *)(a1 + 32))) & 0xFFC) != ((0x801004u >> (8 * *(unsigned char *)(a2 + 32))) & 0xFFC)) {
    return 0;
  }
  uint64_t v3 = (char *)(a1 + 33);
  uint64_t v4 = (char *)(a2 + 33);
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    char v8 = *v3++;
    char v7 = v8;
    char v9 = *v4++;
    --v5;
  }
  while ((0x801004u >> (8 * v7)) == (0x801004u >> (8 * v9)));
  return result;
}

uint64_t sub_10039E670(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2) {
    return 1;
  }
  uint64_t v3 = a2;
  uint64_t v4 = a1;
  if (a1 == a2) {
    return 1;
  }
  uint64_t v5 = 0;
  while (1)
  {
    uint64_t v6 = *(void *)(v4 + v5 + 40);
    uint64_t v8 = *(void *)(v4 + v5 + 48);
    unint64_t v7 = *(void *)(v4 + v5 + 56);
    uint64_t v9 = *(void *)(v4 + v5 + 72);
    double v10 = *(double *)(v4 + v5 + 80);
    uint64_t v38 = v5;
    uint64_t v11 = *(void *)(v3 + v5 + 40);
    uint64_t v13 = *(void *)(v3 + v5 + 48);
    unint64_t v12 = *(void *)(v3 + v5 + 56);
    int v40 = *(unsigned __int8 *)(v3 + v5 + 64);
    int v41 = *(unsigned __int8 *)(v4 + v5 + 64);
    uint64_t v39 = *(void *)(v3 + v5 + 72);
    double v14 = *(double *)(v3 + v5 + 80);
    if ((_s7CoreP2P19InfraScanStartEventV23__derived_struct_equalsySbAC_ACtFZ_0(*(void *)(v4 + v5 + 32), *(void *)(v3 + v5 + 32)) & 1) == 0)return 0; {
    uint64_t v37 = v2;
    }
    if (v7 >> 60 != 15) {
      break;
    }
    if (v12 >> 60 != 15) {
      goto LABEL_49;
    }
    swift_bridgeObjectRetain();
    sub_10006E968(v6, v8, v7);
    swift_bridgeObjectRetain();
    sub_10006E968(v11, v13, v12);
LABEL_44:
    swift_bridgeObjectRelease();
    sub_10006E0D8(v11, v13, v12);
    swift_bridgeObjectRelease();
    sub_10006E0D8(v6, v8, v7);
    uint64_t result = 0;
    if (v41 != v40 || v9 != v39 || v10 != v14) {
      return result;
    }
    uint64_t v5 = v38 + 56;
    --v2;
    if (v37 == 1) {
      return 1;
    }
  }
  if (v12 >> 60 == 15)
  {
LABEL_49:
    sub_10006E968(v6, v8, v7);
    sub_10006E968(v11, v13, v12);
    sub_10006E0D8(v6, v8, v7);
    uint64_t v31 = v11;
    uint64_t v32 = v13;
    unint64_t v33 = v12;
    goto LABEL_53;
  }
  if ((unsigned __int16)v6 != (unsigned __int16)v11) {
    return 0;
  }
  uint64_t v15 = 0;
  switch(v7 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v8), v8))
      {
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
      }
      uint64_t v15 = HIDWORD(v8) - (int)v8;
LABEL_16:
      sub_10006E968(v6, v8, v7);
      break;
    case 2uLL:
      uint64_t v17 = *(void *)(v8 + 16);
      uint64_t v16 = *(void *)(v8 + 24);
      uint64_t v15 = v16 - v17;
      if (!__OFSUB__(v16, v17)) {
        goto LABEL_16;
      }
      goto LABEL_57;
    case 3uLL:
      break;
    default:
      uint64_t v15 = BYTE6(v7);
      break;
  }
  switch(v12 >> 62)
  {
    case 1uLL:
      LODWORD(v18) = HIDWORD(v13) - v13;
      if (__OFSUB__(HIDWORD(v13), v13)) {
        goto LABEL_58;
      }
      uint64_t v18 = (int)v18;
LABEL_22:
      if (v15 != v18)
      {
LABEL_50:
        swift_bridgeObjectRetain();
        sub_10006E968(v6, v8, v7);
        sub_10006E0D8(v6, v8, v7);
        goto LABEL_52;
      }
      if (v15 < 1)
      {
LABEL_27:
        swift_bridgeObjectRetain();
        sub_10006E968(v6, v8, v7);
        swift_bridgeObjectRetain();
        sub_10006E968(v11, v13, v12);
        sub_10006E0D8(v6, v8, v7);
        uint64_t v4 = a1;
        uint64_t v3 = a2;
        goto LABEL_44;
      }
      switch(v7 >> 62)
      {
        case 1uLL:
          if (v8 >> 32 < (int)v8) {
            goto LABEL_60;
          }
          sub_10006E968(v6, v8, v7);
          swift_bridgeObjectRetain();
          sub_10006E968(v6, v8, v7);
          swift_bridgeObjectRetain();
          sub_10006E968(v11, v13, v12);
          sub_10006E968(v11, v13, v12);
          uint64_t v22 = __DataStorage._bytes.getter();
          if (!v22) {
            goto LABEL_32;
          }
          uint64_t v23 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v8, v23)) {
            goto LABEL_62;
          }
          v22 += (int)v8 - v23;
LABEL_32:
          __DataStorage._length.getter();
          sub_10009BE04(v22, v13, v12, (char *)__s1);
          sub_10006E0D8(v6, v8, v7);
          goto LABEL_42;
        case 2uLL:
          uint64_t v24 = *(void *)(v8 + 16);
          uint64_t v34 = *(void *)(v8 + 24);
          swift_bridgeObjectRetain();
          sub_10006E968(v6, v8, v7);
          swift_bridgeObjectRetain();
          sub_10006E968(v11, v13, v12);
          sub_10006E968(v11, v13, v12);
          swift_retain();
          swift_retain();
          uint64_t v25 = __DataStorage._bytes.getter();
          if (v25)
          {
            uint64_t v26 = v25;
            uint64_t v27 = __DataStorage._offset.getter();
            if (__OFSUB__(v24, v27)) {
              goto LABEL_63;
            }
            uint64_t v28 = v24;
            uint64_t v29 = v26 + v24 - v27;
          }
          else
          {
            uint64_t v28 = v24;
            uint64_t v29 = 0;
          }
          if (__OFSUB__(v34, v28)) {
            goto LABEL_61;
          }
          __DataStorage._length.getter();
          sub_10009BE04(v29, v13, v12, (char *)__s1);
          swift_release();
          swift_release();
LABEL_42:
          sub_10006E0D8(v11, v13, v12);
          sub_10006E0D8(v6, v8, v7);
          if (__s1[0])
          {
LABEL_43:
            uint64_t v4 = a1;
            uint64_t v3 = a2;
            goto LABEL_44;
          }
LABEL_51:
          swift_bridgeObjectRelease();
          sub_10006E0D8(v11, v13, v12);
LABEL_52:
          swift_bridgeObjectRelease();
          uint64_t v31 = v6;
          uint64_t v32 = v8;
          unint64_t v33 = v7;
LABEL_53:
          sub_10006E0D8(v31, v32, v33);
          return 0;
        case 3uLL:
          memset(__s1, 0, 14);
          swift_bridgeObjectRetain();
          sub_10006E968(v6, v8, v7);
          swift_bridgeObjectRetain();
          sub_10006E968(v11, v13, v12);
          sub_10006E968(v11, v13, v12);
          goto LABEL_37;
        default:
          __s1[0] = v8;
          LOWORD(__s1[1]) = v7;
          BYTE2(__s1[1]) = BYTE2(v7);
          BYTE3(__s1[1]) = BYTE3(v7);
          BYTE4(__s1[1]) = BYTE4(v7);
          BYTE5(__s1[1]) = BYTE5(v7);
          swift_bridgeObjectRetain();
          sub_10006E968(v6, v8, v7);
          swift_bridgeObjectRetain();
          sub_10006E968(v11, v13, v12);
          sub_10006E968(v11, v13, v12);
LABEL_37:
          sub_10009BE04((uint64_t)__s1, v13, v12, &v42);
          sub_10006E0D8(v11, v13, v12);
          sub_10006E0D8(v6, v8, v7);
          if ((v42 & 1) == 0) {
            goto LABEL_51;
          }
          goto LABEL_43;
      }
    case 2uLL:
      uint64_t v20 = *(void *)(v13 + 16);
      uint64_t v19 = *(void *)(v13 + 24);
      BOOL v21 = __OFSUB__(v19, v20);
      uint64_t v18 = v19 - v20;
      if (!v21) {
        goto LABEL_22;
      }
      goto LABEL_59;
    case 3uLL:
      if (!v15) {
        goto LABEL_27;
      }
      goto LABEL_50;
    default:
      uint64_t v18 = BYTE6(v12);
      goto LABEL_22;
  }
}

uint64_t sub_10039EDA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2) {
    return 1;
  }
  uint64_t v3 = a1;
  if (a1 == a2) {
    return 1;
  }
  uint64_t v4 = 0;
  uint64_t v40 = a2;
  while (2)
  {
    uint64_t v5 = v3 + v4;
    uint64_t v6 = a2 + v4;
    if (*(_DWORD *)(v5 + 32) != *(_DWORD *)(a2 + v4 + 32)
      || (0x801004u >> (8 * *(unsigned char *)(v5 + 36))) != (0x801004u >> (8 * *(unsigned char *)(v6 + 36))))
    {
      return 0;
    }
    int v7 = *(unsigned __int8 *)(v5 + 37);
    uint64_t v9 = *(void *)(v5 + 40);
    uint64_t v8 = *(void *)(v5 + 48);
    unint64_t v10 = *(void *)(v5 + 56);
    int v11 = *(unsigned __int8 *)(v5 + 64);
    uint64_t v12 = *(void *)(v5 + 72);
    double v13 = *(double *)(v5 + 80);
    int v14 = *(unsigned __int8 *)(v6 + 37);
    uint64_t v16 = *(void *)(v6 + 40);
    uint64_t v15 = *(void *)(v6 + 48);
    unint64_t v17 = *(void *)(v6 + 56);
    double v18 = *(double *)(v6 + 80);
    switch(v7)
    {
      case 2:
        if (v14 != 2) {
          return 0;
        }
        goto LABEL_20;
      case 3:
        if (v14 != 3) {
          return 0;
        }
        goto LABEL_20;
      case 4:
        if (v14 != 4) {
          return 0;
        }
        goto LABEL_20;
      case 5:
        if (v14 != 5) {
          return 0;
        }
        goto LABEL_20;
      case 6:
        if (v14 == 6) {
          goto LABEL_20;
        }
        return 0;
      default:
        if ((v14 - 2) < 5 || ((((v7 & 1) == 0) ^ v14) & 1) == 0) {
          return 0;
        }
LABEL_20:
        int v42 = *(unsigned __int8 *)(v6 + 64);
        int v43 = v11;
        uint64_t v44 = v12;
        uint64_t v41 = *(void *)(v6 + 72);
        if (v10 >> 60 == 15)
        {
          if (v17 >> 60 != 15) {
            goto LABEL_65;
          }
          sub_10006E968(v9, v8, v10);
LABEL_41:
          sub_10006E968(v16, v15, v17);
LABEL_42:
          sub_10006E0D8(v16, v15, v17);
          sub_10006E0D8(v9, v8, v10);
          uint64_t result = 0;
          uint64_t v3 = a1;
          a2 = v40;
          if (v43 != v42) {
            return result;
          }
          if (v44 != v41) {
            return result;
          }
          if (v13 != v18) {
            return result;
          }
          v4 += 56;
          uint64_t result = 1;
          if (!--v2) {
            return result;
          }
          continue;
        }
        if (v17 >> 60 == 15)
        {
LABEL_65:
          sub_10006E968(v9, v8, v10);
          sub_10006E968(v16, v15, v17);
          sub_10006E0D8(v9, v8, v10);
          uint64_t v33 = v16;
          uint64_t v34 = v15;
          unint64_t v35 = v17;
        }
        else
        {
          if ((unsigned __int16)v9 != (unsigned __int16)v16) {
            return 0;
          }
          uint64_t v19 = 0;
          switch(v10 >> 62)
          {
            case 1uLL:
              if (__OFSUB__(HIDWORD(v8), v8))
              {
                __break(1u);
LABEL_70:
                __break(1u);
LABEL_71:
                __break(1u);
LABEL_72:
                __break(1u);
LABEL_73:
                __break(1u);
LABEL_74:
                __break(1u);
LABEL_75:
                __break(1u);
LABEL_76:
                __break(1u);
              }
              uint64_t v19 = HIDWORD(v8) - (int)v8;
LABEL_30:
              sub_10006E968(v9, v8, v10);
LABEL_31:
              switch(v17 >> 62)
              {
                case 1uLL:
                  LODWORD(v22) = HIDWORD(v15) - v15;
                  if (__OFSUB__(HIDWORD(v15), v15)) {
                    goto LABEL_71;
                  }
                  uint64_t v22 = (int)v22;
LABEL_36:
                  if (v19 != v22) {
                    goto LABEL_63;
                  }
                  if (v19 < 1) {
                    goto LABEL_41;
                  }
                  break;
                case 2uLL:
                  uint64_t v24 = *(void *)(v15 + 16);
                  uint64_t v23 = *(void *)(v15 + 24);
                  BOOL v25 = __OFSUB__(v23, v24);
                  uint64_t v22 = v23 - v24;
                  if (!v25) {
                    goto LABEL_36;
                  }
                  goto LABEL_72;
                case 3uLL:
                  if (!v19) {
                    goto LABEL_41;
                  }
                  goto LABEL_63;
                default:
                  uint64_t v22 = BYTE6(v17);
                  goto LABEL_36;
              }
              switch(v10 >> 62)
              {
                case 1uLL:
                  if (v8 >> 32 < (int)v8) {
                    goto LABEL_73;
                  }
                  sub_10006E968(v9, v8, v10);
                  sub_10006E968(v16, v15, v17);
                  sub_10006E968(v9, v8, v10);
                  sub_10006E968(v16, v15, v17);
                  uint64_t v27 = __DataStorage._bytes.getter();
                  if (!v27) {
                    goto LABEL_51;
                  }
                  uint64_t v28 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)v8, v28)) {
                    goto LABEL_75;
                  }
                  v27 += (int)v8 - v28;
LABEL_51:
                  __DataStorage._length.getter();
                  sub_10009BE04(v27, v15, v17, (char *)__s1);
                  sub_10006E0D8(v9, v8, v10);
                  goto LABEL_61;
                case 2uLL:
                  uint64_t v37 = *(void *)(v8 + 24);
                  uint64_t v38 = *(void *)(v8 + 16);
                  sub_10006E968(v16, v15, v17);
                  sub_10006E968(v9, v8, v10);
                  sub_10006E968(v16, v15, v17);
                  swift_retain();
                  swift_retain();
                  uint64_t v29 = __DataStorage._bytes.getter();
                  if (v29)
                  {
                    uint64_t v30 = v29;
                    uint64_t v31 = __DataStorage._offset.getter();
                    uint64_t v32 = v38;
                    if (__OFSUB__(v38, v31)) {
                      goto LABEL_76;
                    }
                    uint64_t v36 = (void *)(v30 + v38 - v31);
                  }
                  else
                  {
                    uint64_t v36 = 0;
                    uint64_t v32 = v38;
                  }
                  if (__OFSUB__(v37, v32)) {
                    goto LABEL_74;
                  }
                  __DataStorage._length.getter();
                  sub_10009BE04((uint64_t)v36, v15, v17, (char *)__s1);
                  swift_release();
                  swift_release();
LABEL_61:
                  sub_10006E0D8(v16, v15, v17);
                  sub_10006E0D8(v9, v8, v10);
                  if (__s1[0]) {
                    goto LABEL_42;
                  }
LABEL_62:
                  sub_10006E0D8(v16, v15, v17);
LABEL_63:
                  uint64_t v33 = v9;
                  uint64_t v34 = v8;
                  unint64_t v35 = v10;
                  break;
                case 3uLL:
                  memset(__s1, 0, 14);
                  sub_10006E968(v16, v15, v17);
                  sub_10006E968(v9, v8, v10);
                  sub_10006E968(v16, v15, v17);
                  goto LABEL_56;
                default:
                  __s1[0] = v8;
                  LOWORD(__s1[1]) = v10;
                  BYTE2(__s1[1]) = BYTE2(v10);
                  BYTE3(__s1[1]) = BYTE3(v10);
                  BYTE4(__s1[1]) = BYTE4(v10);
                  BYTE5(__s1[1]) = BYTE5(v10);
                  sub_10006E968(v16, v15, v17);
                  sub_10006E968(v9, v8, v10);
                  sub_10006E968(v16, v15, v17);
LABEL_56:
                  sub_10009BE04((uint64_t)__s1, v15, v17, &v45);
                  sub_10006E0D8(v16, v15, v17);
                  sub_10006E0D8(v9, v8, v10);
                  if ((v45 & 1) == 0) {
                    goto LABEL_62;
                  }
                  goto LABEL_42;
              }
              break;
            case 2uLL:
              uint64_t v21 = *(void *)(v8 + 16);
              uint64_t v20 = *(void *)(v8 + 24);
              uint64_t v19 = v20 - v21;
              if (!__OFSUB__(v20, v21)) {
                goto LABEL_30;
              }
              goto LABEL_70;
            case 3uLL:
              goto LABEL_31;
            default:
              uint64_t v19 = BYTE6(v10);
              goto LABEL_31;
          }
        }
        sub_10006E0D8(v33, v34, v35);
        return 0;
    }
  }
}

uint64_t sub_10039F4A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    goto LABEL_12;
  }
  if (!v2 || a1 == a2) {
    goto LABEL_11;
  }
  uint64_t v5 = 0x100000000000000;
  if (*(unsigned char *)(a1 + 39)) {
    uint64_t v6 = 0x100000000000000;
  }
  else {
    uint64_t v6 = 0;
  }
  unint64_t v7 = v6 | ((unint64_t)*(unsigned __int8 *)(a1 + 38) << 48) | ((unint64_t)*(unsigned __int8 *)(a1 + 37) << 40) | ((unint64_t)*(unsigned __int8 *)(a1 + 36) << 32) | *(unsigned int *)(a1 + 32);
  if (!*(unsigned char *)(a2 + 39)) {
    uint64_t v5 = 0;
  }
  if ((static RadioResources.PreferredChannel.__derived_struct_equals(_:_:)(v7, v5 | ((unint64_t)*(unsigned __int8 *)(a2 + 38) << 48) | ((unint64_t)*(unsigned __int8 *)(a2 + 37) << 40) | ((unint64_t)*(unsigned __int8 *)(a2 + 36) << 32) | *(unsigned int *)(a2 + 32)) & 1) == 0)
  {
LABEL_12:
    char v8 = 0;
    return v8 & 1;
  }
  if (v2 == 1)
  {
LABEL_11:
    char v8 = 1;
    return v8 & 1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = v2 - 2;
  do
  {
    if (*(unsigned char *)(a1 + v10 + 47)) {
      uint64_t v12 = 0x100000000000000;
    }
    else {
      uint64_t v12 = 0;
    }
    if (*(unsigned char *)(a2 + v10 + 47)) {
      uint64_t v13 = 0x100000000000000;
    }
    else {
      uint64_t v13 = 0;
    }
    char v8 = static RadioResources.PreferredChannel.__derived_struct_equals(_:_:)(v12 | ((unint64_t)*(unsigned __int8 *)(a1 + v10 + 46) << 48) | ((unint64_t)*(unsigned __int8 *)(a1 + v10 + 45) << 40) | ((unint64_t)*(unsigned __int8 *)(a1 + v10 + 44) << 32) | *(unsigned int *)(a1 + v10 + 40), v13 | ((unint64_t)*(unsigned __int8 *)(a2 + v10 + 46) << 48) | ((unint64_t)*(unsigned __int8 *)(a2 + v10 + 45) << 40) | ((unint64_t)*(unsigned __int8 *)(a2 + v10 + 44) << 32) | *(unsigned int *)(a2 + v10 + 40));
    BOOL v15 = v11-- != 0;
    if ((v8 & 1) == 0) {
      break;
    }
    v10 += 8;
  }
  while (v15);
  return v8 & 1;
}

uint64_t sub_10039F5FC()
{
  return swift_slowDealloc();
}

uint64_t sub_10039F608(void (*a1)(uint64_t *__return_ptr))
{
  a1(v3);
  uint64_t v1 = NANServiceName.description.getter(v3[0], (void *)v3[1]);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_10039F668(void (*a1)(uint64_t *__return_ptr))
{
  a1(&v3);
  uint64_t v1 = 0x656D69746C616572;
  if (v3 != 1) {
    uint64_t v1 = 0x6E6574614C776F6CLL;
  }
  if ((_BYTE)v3) {
    return v1;
  }
  else {
    return 0x6576697470616461;
  }
}

uint64_t sub_10039F6F8(void (*a1)(uint64_t *__return_ptr))
{
  a1(&v3);
  unint64_t v1 = (unsigned __int16)v3 | ((unint64_t)*(unsigned int *)((char *)&v3 + 2) << 16);

  return WiFiAddress.description.getter(v1);
}

unint64_t sub_10039F748(Swift::UInt8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();

  return sub_10039FB1C(a1, v2);
}

unint64_t sub_10039F7B4(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(byte_1003D7AC8[a1]);
  Swift::Int v2 = Hasher._finalize()();

  return sub_10039FBBC(a1, v2);
}

uint64_t sub_10039F82C(uint64_t a1)
{
  return sub_10039F858(a1, (void (*)(unsigned char *, uint64_t))Channel.hash(into:), (uint64_t (*)(uint64_t, Swift::Int))sub_10039FC70);
}

uint64_t sub_10039F858(uint64_t a1, void (*a2)(unsigned char *, uint64_t), uint64_t (*a3)(uint64_t, Swift::Int))
{
  Hasher.init(_seed:)();
  a2(v8, a1 & 0xFFFFFFFFFFFFLL);
  Swift::Int v5 = Hasher._finalize()();

  return a3(a1 & 0xFFFFFFFFFFFFLL, v5);
}

unint64_t sub_10039F8DC(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_10039FDB0(a1, v4);
}

unint64_t sub_10039F920(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_10039FECC(a1, v4);
}

unint64_t sub_10039F964(unsigned __int8 a1)
{
  uint64_t v2 = static Hasher._hash(seed:bytes:count:)();

  return sub_10039FB1C(a1, v2);
}

unint64_t sub_10039F9AC(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();

  return sub_10039FF94(a1, v2);
}

unint64_t sub_10039FA40(uint64_t a1, uint64_t a2, __int16 a3)
{
  Hasher.init(_seed:)();
  String.lowercased()();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(HIBYTE(a3));
  Swift::Int v6 = Hasher._finalize()();

  return sub_1003A010C(a1, a2, a3 & 0xFF01, v6);
}

unint64_t sub_10039FB1C(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_10039FBBC(char a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    int v7 = byte_1003D7AC8[a1];
    uint64_t v8 = *(void *)(v2 + 48);
    if (byte_1003D7AC8[*(char *)(v8 + result)] != v7)
    {
      uint64_t v9 = ~v5;
      for (unint64_t result = (result + 1) & v9;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v9)
      {
        if (byte_1003D7AC8[*(char *)(v8 + result)] == v7) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_10039FC70(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v6 = ~v4;
    while (1)
    {
      uint64_t v7 = *(void *)(v2 + 48) + 8 * result;
      if (*(_DWORD *)v7 == a1
        && ((0x801004u >> ((a1 >> 29) & 0xF8)) & 0xFFC) == (0x801004u >> (8 * *(unsigned char *)(v7 + 4))))
      {
        break;
      }
LABEL_4:
      unint64_t result = (result + 1) & v6;
      if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) == 0) {
        return result;
      }
    }
    switch(*(unsigned char *)(v7 + 5))
    {
      case 2:
        if (BYTE5(a1) != 2) {
          goto LABEL_4;
        }
        break;
      case 3:
        if (BYTE5(a1) != 3) {
          goto LABEL_4;
        }
        break;
      case 4:
        if (BYTE5(a1) != 4) {
          goto LABEL_4;
        }
        break;
      case 5:
        if (BYTE5(a1) != 5) {
          goto LABEL_4;
        }
        break;
      case 6:
        if (BYTE5(a1) != 6) {
          goto LABEL_4;
        }
        break;
      default:
        if (BYTE5(a1) - 2 < 5 || ((a1 >> 40) & 1) == ((*(unsigned char *)(v7 + 5) & 1) == 0)) {
          goto LABEL_4;
        }
        break;
    }
  }
  return result;
}

unint64_t sub_10039FDB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_10006F314(0, (unint64_t *)&unk_100484A40);
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = static NSObject.== infix(_:_:)();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_10039FECC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_1003ABA60(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_100346DB8((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_10039FF94(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_1003A010C(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  uint64_t v5 = v4 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t i = a4 & ~v6;
  if ((*(void *)(v4 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    uint64_t v10 = *(void *)(v4 + 48) + 24 * i;
    uint64_t v11 = *(void *)v10;
    uint64_t v12 = *(void *)(v10 + 8);
    __int16 v13 = *(unsigned __int8 *)(v10 + 16) | (*(unsigned __int8 *)(v10 + 17) << 8);
    __int16 v14 = a3 & 0xFF01;
    swift_bridgeObjectRetain();
    LOBYTE(v11) = static DNSRecords.Identifier.== infix(_:_:)(v11, v12, v13, a1, a2, v14);
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v15 = ~v6;
      for (unint64_t i = (i + 1) & v15; ((*(void *)(v5 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v15)
      {
        uint64_t v16 = *(void *)(v4 + 48) + 24 * i;
        uint64_t v17 = *(void *)v16;
        uint64_t v18 = *(void *)(v16 + 8);
        __int16 v19 = *(unsigned __int8 *)(v16 + 16) | (*(unsigned __int8 *)(v16 + 17) << 8);
        swift_bridgeObjectRetain();
        LOBYTE(v17) = static DNSRecords.Identifier.== infix(_:_:)(v17, v18, v19, a1, a2, v14);
        swift_bridgeObjectRelease();
        if (v17) {
          break;
        }
      }
    }
  }
  return i;
}

uint64_t sub_1003A0270()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003A02A8()
{
  return sub_10037A5A0(*(void *)(v0 + 24));
}

uint64_t sub_1003A02D0(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr))
{
  a4(&v7);
  uint64_t v5 = *a1 + 8;
  uint64_t result = UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v5;
  return result;
}

uint64_t sub_1003A0330(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr))
{
  a4(&v7);
  uint64_t v5 = *a1 + 1;
  uint64_t result = UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v5;
  return result;
}

uint64_t sub_1003A0390(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr))
{
  a4(&v7);
  uint64_t v5 = *a1 + 4;
  uint64_t result = UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v5;
  return result;
}

unint64_t sub_1003A03F0(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        uint64_t v9 = *(char *)(*(void *)(a2 + 48) + v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(byte_1003D7AC8[v9]);
        uint64_t result = Hasher._finalize()();
        unint64_t v10 = result & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v10 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v11 = *(void *)(a2 + 48);
        uint64_t v12 = (unsigned char *)(v11 + v3);
        __int16 v13 = (unsigned char *)(v11 + v6);
        if (v3 != v6 || v12 >= v13 + 1) {
          *uint64_t v12 = *v13;
        }
        uint64_t v14 = *(void *)(a2 + 56);
        uint64_t v15 = *(void *)(*(void *)(type metadata accessor for NANAttribute(0) - 8) + 72);
        int64_t v16 = v15 * v3;
        uint64_t result = v14 + v15 * v3;
        int64_t v17 = v15 * v6;
        unint64_t v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          uint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v16 == v17) {
            goto LABEL_6;
          }
          uint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v10 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v10) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  uint64_t *v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1003A05F0(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = (unsigned __int16 *)(*(void *)(a2 + 48) + 6 * v6);
        uint64_t v10 = *(unsigned int *)(v9 + 1);
        uint64_t v11 = *v9;
        Hasher.init(_seed:)();
        NANClusterChangeEvent.hash(into:)((int)&v26, v11 | (v10 << 16));
        uint64_t result = Hasher._finalize()();
        unint64_t v12 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8) {
            goto LABEL_5;
          }
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          uint64_t v13 = *(void *)(a2 + 48);
          unint64_t v14 = v13 + 6 * v3;
          uint64_t v15 = (int *)(v13 + 6 * v6);
          if (v3 != v6 || v14 >= (unint64_t)v15 + 6)
          {
            int v16 = *v15;
            *(_WORD *)(v14 + 4) = *((_WORD *)v15 + 2);
            *(_DWORD *)unint64_t v14 = v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          unint64_t v18 = (void *)(v17 + 8 * v3);
          __int16 v19 = (void *)(v17 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            void *v18 = *v19;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  uint64_t *v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1003A07C8(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v10 = (unsigned __int16 *)(*(void *)(a2 + 48) + 6 * v6);
        uint64_t v11 = *(unsigned int *)(v10 + 1);
        uint64_t v12 = *v10;
        Hasher.init(_seed:)();
        NANClusterChangeEvent.hash(into:)((int)&v27, v12 | (v11 << 16));
        uint64_t result = Hasher._finalize()();
        unint64_t v13 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          unint64_t v15 = v14 + 6 * v3;
          int v16 = (int *)(v14 + 6 * v6);
          if (v3 != v6 || v15 >= (unint64_t)v16 + 6)
          {
            int v17 = *v16;
            *(_WORD *)(v15 + 4) = *((_WORD *)v16 + 2);
            *(_DWORD *)unint64_t v15 = v17;
          }
          uint64_t v18 = *(void *)(a2 + 56);
          unint64_t v19 = v18 + 24 * v3;
          uint64_t v20 = (long long *)(v18 + 24 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v19 >= (unint64_t)v20 + 24))
          {
            long long v9 = *v20;
            *(void *)(v19 + 16) = *((void *)v20 + 2);
            *(_OWORD *)unint64_t v19 = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v22 = *v21;
    uint64_t v23 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v23 = *v21;
    uint64_t v22 = (-1 << result) - 1;
  }
  *uint64_t v21 = v23 & v22;
  uint64_t v24 = *(void *)(a2 + 16);
  BOOL v25 = __OFSUB__(v24, 1);
  uint64_t v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1003A09AC(unint64_t a1, uint64_t a2)
{
  return sub_1003A0EC0(a1, a2, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
}

unint64_t sub_1003A09C4(unint64_t a1, uint64_t a2)
{
  return sub_1003A1430(a1, a2, type metadata accessor for AWDLPeer);
}

unint64_t sub_1003A09DC(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin();
  unint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v34 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v12 = v34;
    if ((*(void *)(v34 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v31 = (result + 1) & v11;
      uint64_t v32 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v33 = v5 + 16;
      unint64_t v13 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 72);
      do
      {
        uint64_t v15 = v14;
        int64_t v16 = v14 * v10;
        v32(v8, *(void *)(a2 + 48) + v14 * v10, v4);
        sub_1003A98A8(&qword_100487710, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v13)(v8, v4);
        unint64_t v18 = v17 & v11;
        if (a1 >= (uint64_t)v31)
        {
          if (v18 >= v31 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            uint64_t v21 = *(void *)(a2 + 48);
            uint64_t v14 = v15;
            unint64_t result = v21 + v15 * a1;
            if (v15 * a1 < v16 || result >= v21 + v16 + v15)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v22 = *(void *)(a2 + 56);
            uint64_t v23 = (_OWORD *)(v22 + 16 * a1);
            uint64_t v24 = (_OWORD *)(v22 + 16 * v10);
            uint64_t v12 = v34;
            if (a1 != v10 || (a1 = v10, v23 >= v24 + 1))
            {
              *uint64_t v23 = *v24;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v31 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        uint64_t v12 = v34;
        uint64_t v14 = v15;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v12 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    BOOL v25 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v26 = *v25;
    uint64_t v27 = (-1 << a1) - 1;
  }
  else
  {
    BOOL v25 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v27 = *v25;
    uint64_t v26 = (-1 << a1) - 1;
  }
  *BOOL v25 = v27 & v26;
  uint64_t v28 = *(void *)(a2 + 16);
  BOOL v29 = __OFSUB__(v28, 1);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1003A0CD4(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(a2 + 48);
        unint64_t v10 = (unsigned char *)(v9 + v6);
        unint64_t result = static Hasher._hash(seed:bytes:count:)();
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8 || v3 < (uint64_t)v11) {
            goto LABEL_6;
          }
        }
        else if (v11 < v8 && v3 < (uint64_t)v11)
        {
          goto LABEL_6;
        }
        uint64_t v14 = (unsigned char *)(v9 + v3);
        if (v3 != v6 || v14 >= v10 + 1) {
          unsigned char *v14 = *v10;
        }
        uint64_t v15 = *(void *)(a2 + 56);
        uint64_t v16 = *(void *)(*(void *)(type metadata accessor for NANPeer.Service(0) - 8) + 72);
        int64_t v17 = v16 * v3;
        unint64_t result = v15 + v16 * v3;
        int64_t v18 = v16 * v6;
        unint64_t v19 = v15 + v16 * v6 + v16;
        if (v17 < v18 || result >= v19)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v17 == v18) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v22 = *v21;
    uint64_t v23 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v23 = *v21;
    uint64_t v22 = (-1 << result) - 1;
  }
  *uint64_t v21 = v23 & v22;
  uint64_t v24 = *(void *)(a2 + 16);
  BOOL v25 = __OFSUB__(v24, 1);
  uint64_t v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1003A0EA8(unint64_t a1, uint64_t a2)
{
  return sub_1003A0EC0(a1, a2, type metadata accessor for NANPeer.Service.AuthenticationStatus);
}

unint64_t sub_1003A0EC0(unint64_t result, uint64_t a2, uint64_t (*a3)(void))
{
  int64_t v4 = result;
  uint64_t v5 = a2 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v7 = (result + 1) & ~v6;
  if (((1 << v7) & *(void *)(a2 + 64 + 8 * (v7 >> 6))) != 0)
  {
    uint64_t v8 = ~v6;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v5 + 8 * (v7 >> 6)) & (1 << v7)) != 0)
    {
      unint64_t v9 = (result + 1) & v8;
      while (1)
      {
        uint64_t v10 = *(void *)(a2 + 48) - v7 + 8 * v7;
        uint64_t v11 = *(unsigned int *)(v10 + 3);
        Swift::UInt8 v12 = *(unsigned char *)v10;
        uint64_t v13 = *(unsigned __int16 *)(v10 + 1);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v12);
        NANClusterChangeEvent.hash(into:)((int)&v33, v13 | (v11 << 16));
        unint64_t result = Hasher._finalize()();
        unint64_t v14 = result & v8;
        if (v4 >= (uint64_t)v9) {
          break;
        }
        if (v14 < v9) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v15 = *(void *)(a2 + 48);
        unint64_t v16 = v15 - v4 + 8 * v4;
        uint64_t v17 = v15 - v7 + 8 * v7;
        if (v4 != v7 || v16 >= v17 + 7)
        {
          int v18 = *(_DWORD *)v17;
          __int16 v19 = *(_WORD *)(v17 + 4);
          *(unsigned char *)(v16 + 6) = *(unsigned char *)(v17 + 6);
          *(_WORD *)(v16 + 4) = v19;
          *(_DWORD *)unint64_t v16 = v18;
        }
        uint64_t v20 = *(void *)(a2 + 56);
        uint64_t v21 = *(void *)(*(void *)(a3(0) - 8) + 72);
        int64_t v22 = v21 * v4;
        unint64_t result = v20 + v21 * v4;
        int64_t v23 = v21 * v7;
        unint64_t v24 = v20 + v21 * v7 + v21;
        if (v22 < v23 || result >= v24)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v4 = v7;
          if (v22 == v23) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v4 = v7;
LABEL_6:
        unint64_t v7 = (v7 + 1) & v8;
        if (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v14 < v9) {
        goto LABEL_6;
      }
LABEL_11:
      if (v4 < (uint64_t)v14) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    uint64_t v26 = (uint64_t *)(v5 + 8 * ((unint64_t)v4 >> 6));
    uint64_t v27 = *v26;
    uint64_t v28 = (-1 << v4) - 1;
  }
  else
  {
    uint64_t v26 = (uint64_t *)(v5 + 8 * (result >> 6));
    uint64_t v28 = *v26;
    uint64_t v27 = (-1 << result) - 1;
  }
  *uint64_t v26 = v28 & v27;
  uint64_t v29 = *(void *)(a2 + 16);
  BOOL v30 = __OFSUB__(v29, 1);
  uint64_t v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1003A10FC(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin();
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2 + 64;
  uint64_t v10 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(void *)(a2 + 64 + 8 * (v11 >> 6))) != 0)
  {
    uint64_t v12 = ~v10;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v9 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      unint64_t v37 = (result + 1) & v12;
      uint64_t v38 = v13;
      uint64_t v14 = *(void *)(v5 + 72);
      uint64_t v39 = v5 + 16;
      uint64_t v36 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v15 = v12;
      do
      {
        uint64_t v16 = v9;
        uint64_t v17 = v14;
        int64_t v18 = v14 * v11;
        uint64_t v19 = v15;
        v38(v8, *(void *)(a2 + 48) + v14 * v11, v4);
        sub_1003A98A8(&qword_100487710, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v36)(v8, v4);
        uint64_t v15 = v19;
        unint64_t v21 = v20 & v19;
        if (a1 >= (uint64_t)v37)
        {
          if (v21 >= v37 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            uint64_t v24 = *(void *)(a2 + 48);
            unint64_t result = v24 + v17 * a1;
            uint64_t v9 = v16;
            if (v17 * a1 < v18 || (uint64_t v14 = v17, result >= v24 + v18 + v17))
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              uint64_t v14 = v17;
              uint64_t v15 = v19;
            }
            else if (v17 * a1 != v18)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            uint64_t v25 = *(void *)(a2 + 56);
            unint64_t v26 = v25 + 40 * a1;
            uint64_t v27 = (long long *)(v25 + 40 * v11);
            if (a1 != v11 || (a1 = v11, v26 >= (unint64_t)v27 + 40))
            {
              long long v28 = *v27;
              long long v29 = v27[1];
              *(void *)(v26 + 32) = *((void *)v27 + 4);
              *(_OWORD *)unint64_t v26 = v28;
              *(_OWORD *)(v26 + 16) = v29;
              a1 = v11;
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v37 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        uint64_t v9 = v16;
        uint64_t v14 = v17;
LABEL_5:
        unint64_t v11 = (v11 + 1) & v15;
      }
      while (((*(void *)(v9 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    BOOL v30 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v30;
    uint64_t v32 = (-1 << a1) - 1;
  }
  else
  {
    BOOL v30 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v32 = *v30;
    uint64_t v31 = (-1 << a1) - 1;
  }
  *BOOL v30 = v32 & v31;
  uint64_t v33 = *(void *)(a2 + 16);
  BOOL v34 = __OFSUB__(v33, 1);
  uint64_t v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1003A1418(unint64_t a1, uint64_t a2)
{
  return sub_1003A1430(a1, a2, type metadata accessor for NANPeer);
}

unint64_t sub_1003A1430(unint64_t result, uint64_t a2, uint64_t (*a3)(void))
{
  int64_t v4 = result;
  uint64_t v5 = a2 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v7 = (result + 1) & ~v6;
  if (((1 << v7) & *(void *)(a2 + 64 + 8 * (v7 >> 6))) != 0)
  {
    uint64_t v9 = ~v6;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v5 + 8 * (v7 >> 6)) & (1 << v7)) != 0)
    {
      unint64_t v10 = (result + 1) & v9;
      while (1)
      {
        unint64_t v11 = (unsigned __int16 *)(*(void *)(a2 + 48) + 6 * v7);
        uint64_t v12 = *(unsigned int *)(v11 + 1);
        uint64_t v13 = *v11;
        Hasher.init(_seed:)();
        NANClusterChangeEvent.hash(into:)((int)&v31, v13 | (v12 << 16));
        unint64_t result = Hasher._finalize()();
        unint64_t v14 = result & v9;
        if (v4 >= (uint64_t)v10) {
          break;
        }
        if (v14 < v10) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v15 = *(void *)(a2 + 48);
        unint64_t v16 = v15 + 6 * v4;
        uint64_t v17 = (int *)(v15 + 6 * v7);
        if (v4 != v7 || v16 >= (unint64_t)v17 + 6)
        {
          int v18 = *v17;
          *(_WORD *)(v16 + 4) = *((_WORD *)v17 + 2);
          *(_DWORD *)unint64_t v16 = v18;
        }
        uint64_t v19 = *(void *)(a2 + 56);
        uint64_t v20 = *(void *)(*(void *)(a3(0) - 8) + 72);
        int64_t v21 = v20 * v4;
        unint64_t result = v19 + v20 * v4;
        int64_t v22 = v20 * v7;
        unint64_t v23 = v19 + v20 * v7 + v20;
        if (v21 < v22 || result >= v23)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v4 = v7;
          if (v21 == v22) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v4 = v7;
LABEL_6:
        unint64_t v7 = (v7 + 1) & v9;
        if (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v14 < v10) {
        goto LABEL_6;
      }
LABEL_11:
      if (v4 < (uint64_t)v14) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    uint64_t v25 = (uint64_t *)(v5 + 8 * ((unint64_t)v4 >> 6));
    uint64_t v26 = *v25;
    uint64_t v27 = (-1 << v4) - 1;
  }
  else
  {
    uint64_t v25 = (uint64_t *)(v5 + 8 * (result >> 6));
    uint64_t v27 = *v25;
    uint64_t v26 = (-1 << result) - 1;
  }
  *uint64_t v25 = v27 & v26;
  uint64_t v28 = *(void *)(a2 + 16);
  BOOL v29 = __OFSUB__(v28, 1);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1003A1648(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        uint64_t v9 = (unsigned __int16 *)(*(void *)(a2 + 48) + 6 * v6);
        uint64_t v10 = *(unsigned int *)(v9 + 1);
        uint64_t v11 = *v9;
        Hasher.init(_seed:)();
        NANClusterChangeEvent.hash(into:)((int)&v29, v11 | (v10 << 16));
        unint64_t result = Hasher._finalize()();
        unint64_t v12 = result & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v12 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v13 = *(void *)(a2 + 48);
        unint64_t v14 = v13 + 6 * v3;
        uint64_t v15 = (int *)(v13 + 6 * v6);
        if (v3 != v6 || v14 >= (unint64_t)v15 + 6)
        {
          int v16 = *v15;
          *(_WORD *)(v14 + 4) = *((_WORD *)v15 + 2);
          *(_DWORD *)unint64_t v14 = v16;
        }
        uint64_t v17 = *(void *)(a2 + 56);
        uint64_t v18 = *(void *)(*(void *)(sub_100010BCC((uint64_t *)&unk_100484A90) - 8) + 72);
        int64_t v19 = v18 * v3;
        unint64_t result = v17 + v18 * v3;
        int64_t v20 = v18 * v6;
        unint64_t v21 = v17 + v18 * v6 + v18;
        if (v19 < v20 || result >= v21)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v19 == v20) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v12 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v12) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    unint64_t v23 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v24 = *v23;
    uint64_t v25 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v23 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v25 = *v23;
    uint64_t v24 = (-1 << result) - 1;
  }
  *unint64_t v23 = v25 & v24;
  uint64_t v26 = *(void *)(a2 + 16);
  BOOL v27 = __OFSUB__(v26, 1);
  uint64_t v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1003A1860(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin();
  unint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v34 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v12 = v34;
    if ((*(void *)(v34 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v31 = (result + 1) & v11;
      uint64_t v32 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v33 = v5 + 16;
      uint64_t v13 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 72);
      do
      {
        uint64_t v15 = v14;
        int64_t v16 = v14 * v10;
        v32(v8, *(void *)(a2 + 48) + v14 * v10, v4);
        sub_1003A98A8(&qword_100487710, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v13)(v8, v4);
        unint64_t v18 = v17 & v11;
        if (a1 >= (uint64_t)v31)
        {
          if (v18 >= v31 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            uint64_t v21 = *(void *)(a2 + 48);
            uint64_t v14 = v15;
            unint64_t result = v21 + v15 * a1;
            if (v15 * a1 < v16 || result >= v21 + v16 + v15)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v22 = *(void *)(a2 + 56);
            unint64_t v23 = (void *)(v22 + 8 * a1);
            uint64_t v24 = (void *)(v22 + 8 * v10);
            uint64_t v12 = v34;
            if (a1 != v10 || (a1 = v10, v23 >= v24 + 1))
            {
              *unint64_t v23 = *v24;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v31 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        uint64_t v12 = v34;
        uint64_t v14 = v15;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v12 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    uint64_t v25 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v26 = *v25;
    uint64_t v27 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v25 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v27 = *v25;
    uint64_t v26 = (-1 << a1) - 1;
  }
  *uint64_t v25 = v27 & v26;
  uint64_t v28 = *(void *)(a2 + 16);
  BOOL v29 = __OFSUB__(v28, 1);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1003A1B58(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(char *)(*(void *)(a2 + 48) + v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(byte_1003D7AC8[v9]);
        unint64_t result = Hasher._finalize()();
        unint64_t v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (unsigned char *)(v11 + v3);
          uint64_t v13 = (unsigned char *)(v11 + v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          int64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  uint64_t *v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void *sub_1003A1D1C()
{
  return sub_1003A2EC0(type metadata accessor for NANAttribute, (uint64_t *)&unk_100488380, type metadata accessor for NANAttribute, type metadata accessor for NANAttribute);
}

void *sub_1003A1D64()
{
  return sub_1003A26A8((uint64_t *)&unk_100484AC0);
}

void *sub_1003A1D70()
{
  uint64_t v1 = v0;
  sub_100010BCC((uint64_t *)&unk_100488330);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1003A1F14()
{
  uint64_t v1 = v0;
  sub_100010BCC((uint64_t *)&unk_100484AB0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 6 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 6 * v15;
    __int16 v18 = *(_WORD *)(v17 + 4);
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = *(void *)(v4 + 48) + v16;
    *(_DWORD *)uint64_t v21 = *(_DWORD *)v17;
    *(_WORD *)(v21 + 4) = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1003A20D0()
{
  uint64_t v1 = v0;
  sub_100010BCC((uint64_t *)&unk_100488320);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 6 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 6 * v15;
    __int16 v18 = *(_WORD *)(v17 + 4);
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = *(void *)(v4 + 48) + v16;
    *(_DWORD *)uint64_t v21 = *(_DWORD *)v17;
    *(_WORD *)(v21 + 4) = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    unint64_t result = (void *)swift_retain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1003A228C()
{
  uint64_t v1 = v0;
  sub_100010BCC((uint64_t *)&unk_100488340);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      int64_t v9 = v27 + 1;
      if (v27 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v28 = *(void *)(v6 + 8 * v9);
      if (!v28) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v28 - 1) & v28;
    unint64_t v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 3 * v15;
    uint64_t v17 = 2 * v16;
    uint64_t v18 = *(void *)(v2 + 48) + 2 * v16;
    __int16 v19 = *(_WORD *)(v18 + 4);
    v16 *= 8;
    uint64_t v20 = *(void *)(v2 + 56) + v16;
    __int16 v21 = *(_WORD *)(v20 + 4);
    char v22 = *(unsigned char *)(v20 + 6);
    uint64_t v23 = *(void *)(v20 + 8);
    unint64_t v24 = *(void *)(v20 + 16);
    uint64_t v25 = *(void *)(v4 + 48) + v17;
    LODWORD(v20) = *(_DWORD *)v20;
    *(_DWORD *)uint64_t v25 = *(_DWORD *)v18;
    *(_WORD *)(v25 + 4) = v19;
    uint64_t v26 = *(void *)(v4 + 56) + v16;
    *(_DWORD *)uint64_t v26 = v20;
    *(_WORD *)(v26 + 4) = v21;
    *(unsigned char *)(v26 + 6) = v22;
    *(void *)(v26 + 8) = v23;
    *(void *)(v26 + 16) = v24;
    unint64_t result = (void *)sub_100038004(v23, v24);
  }
  int64_t v29 = v27 + 2;
  if (v29 >= v13) {
    goto LABEL_26;
  }
  unint64_t v28 = *(void *)(v6 + 8 * v29);
  if (v28)
  {
    int64_t v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v9);
    ++v29;
    if (v28) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1003A2468()
{
  return sub_1003A348C((uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester, &qword_10047CF18, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
}

id sub_1003A24B0()
{
  uint64_t v1 = v0;
  sub_100010BCC((uint64_t *)&unk_1004882D0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id result = v17;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1003A2654()
{
  return sub_1003A3F1C(type metadata accessor for AWDLPeer, &qword_100484AE8, type metadata accessor for AWDLPeer, type metadata accessor for AWDLPeer);
}

void *sub_1003A269C()
{
  return sub_1003A26A8((uint64_t *)&unk_1004883C0);
}

void *sub_1003A26A8(uint64_t *a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  unint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(a1);
  uint64_t v8 = *v1;
  uint64_t v9 = static _DictionaryStorage.copy(original:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    uint64_t *v3 = v10;
    return result;
  }
  int64_t v27 = v3;
  id result = (void *)(v9 + 64);
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12) {
    id result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  }
  uint64_t v28 = v8 + 64;
  int64_t v14 = 0;
  *(void *)(v10 + 16) = *(void *)(v8 + 16);
  uint64_t v15 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(v8 + 64);
  int64_t v29 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v30 = v5 + 16;
  while (1)
  {
    if (v17)
    {
      unint64_t v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v19 = v18 | (v14 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v29) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v28 + 8 * v24);
    ++v14;
    if (!v25)
    {
      int64_t v14 = v24 + 1;
      if (v24 + 1 >= v29) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v28 + 8 * v14);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v17 = (v25 - 1) & v25;
    unint64_t v19 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_12:
    unint64_t v20 = *(void *)(v5 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(void *)(v8 + 48) + v20, v4);
    uint64_t v21 = 16 * v19;
    unint64_t v22 = *(void *)(v10 + 48) + v20;
    uint64_t v23 = *(void (**)(unint64_t, char *, uint64_t))(v5 + 32);
    long long v31 = *(_OWORD *)(*(void *)(v8 + 56) + v21);
    v23(v22, v7, v4);
    *(_OWORD *)(*(void *)(v10 + 56) + v21) = v31;
    id result = (void *)swift_retain();
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v29)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v3 = v27;
    goto LABEL_28;
  }
  unint64_t v25 = *(void *)(v28 + 8 * v26);
  if (v25)
  {
    int64_t v14 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v14 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v14 >= v29) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v28 + 8 * v14);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1003A294C()
{
  uint64_t v1 = v0;
  sub_100010BCC(&qword_100484BD8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v25 = __clz(__rbit64(v23));
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = v25 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 6 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 6 * v15;
    __int16 v18 = *(_WORD *)(v17 + 4);
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = *(void *)(v4 + 48) + v16;
    *(_DWORD *)uint64_t v21 = *(_DWORD *)v17;
    *(_WORD *)(v21 + 4) = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1003A2AF4()
{
  uint64_t v1 = v0;
  sub_100010BCC(&qword_100484BC0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1003A2CAC()
{
  return sub_1003A2CDC((uint64_t *)&unk_100484B30);
}

void *sub_1003A2CB8()
{
  return sub_1003A2CDC(&qword_100484B20);
}

void *sub_1003A2CC4()
{
  return sub_1003A2CDC(&qword_100484B28);
}

void *sub_1003A2CD0()
{
  return sub_1003A2CDC(&qword_100484B18);
}

void *sub_1003A2CDC(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100010BCC(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v14) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v7 + 8 * v18);
    ++v10;
    if (!v19)
    {
      int64_t v10 = v18 + 1;
      if (v18 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v7 + 8 * v10);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = *(void *)(*(void *)(v3 + 56) + 8 * v16);
    *(unsigned char *)(*(void *)(v5 + 48) + v16) = *(unsigned char *)(*(void *)(v3 + 48) + v16);
    *(void *)(*(void *)(v5 + 56) + 8 * v16) = v17;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v14) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v7 + 8 * v20);
  if (v19)
  {
    int64_t v10 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v7 + 8 * v10);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1003A2E78()
{
  return sub_1003A2EC0(type metadata accessor for NANPeer.Service, &qword_100484B10, type metadata accessor for NANPeer.Service, type metadata accessor for NANPeer.Service);
}

void *sub_1003A2EC0(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  long long v31 = a3;
  uint64_t v32 = a4;
  uint64_t v6 = v4;
  uint64_t v7 = a1(0);
  uint64_t v30 = *(void *)(v7 - 8);
  __chkstk_darwin(v7 - 8);
  int64_t v9 = (char *)&v29 - v8;
  sub_100010BCC(a2);
  uint64_t v10 = *v4;
  uint64_t v11 = static _DictionaryStorage.copy(original:)();
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    *uint64_t v6 = v12;
    return result;
  }
  int64_t v29 = v6;
  id result = (void *)(v11 + 64);
  uint64_t v14 = v10 + 64;
  unint64_t v15 = (unint64_t)((1 << *(unsigned char *)(v12 + 32)) + 63) >> 6;
  if (v12 != v10 || (unint64_t)result >= v10 + 64 + 8 * v15) {
    id result = memmove(result, (const void *)(v10 + 64), 8 * v15);
  }
  int64_t v17 = 0;
  *(void *)(v12 + 16) = *(void *)(v10 + 16);
  uint64_t v18 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & *(void *)(v10 + 64);
  int64_t v21 = (unint64_t)(v18 + 63) >> 6;
  while (1)
  {
    if (v20)
    {
      unint64_t v22 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v23 = v22 | (v17 << 6);
      goto LABEL_12;
    }
    int64_t v26 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v26 >= v21) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v14 + 8 * v26);
    ++v17;
    if (!v27)
    {
      int64_t v17 = v26 + 1;
      if (v26 + 1 >= v21) {
        goto LABEL_26;
      }
      unint64_t v27 = *(void *)(v14 + 8 * v17);
      if (!v27) {
        break;
      }
    }
LABEL_25:
    unint64_t v20 = (v27 - 1) & v27;
    unint64_t v23 = __clz(__rbit64(v27)) + (v17 << 6);
LABEL_12:
    char v24 = *(unsigned char *)(*(void *)(v10 + 48) + v23);
    unint64_t v25 = *(void *)(v30 + 72) * v23;
    sub_1003AB930(*(void *)(v10 + 56) + v25, (uint64_t)v9, v31);
    *(unsigned char *)(*(void *)(v12 + 48) + v23) = v24;
    id result = (void *)sub_1003AB998((uint64_t)v9, *(void *)(v12 + 56) + v25, v32);
  }
  int64_t v28 = v26 + 2;
  if (v28 >= v21)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v6 = v29;
    goto LABEL_28;
  }
  unint64_t v27 = *(void *)(v14 + 8 * v28);
  if (v27)
  {
    int64_t v17 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v17 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v17 >= v21) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v14 + 8 * v17);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1003A3118()
{
  uint64_t v1 = v0;
  sub_100010BCC((uint64_t *)&unk_100488390);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v20 = __clz(__rbit64(v18));
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = v20 + (v9 << 6);
LABEL_12:
    char v16 = *(unsigned char *)(*(void *)(v2 + 56) + v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(unsigned char *)(*(void *)(v4 + 56) + v15) = v16;
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1003A32A4()
{
  uint64_t v1 = v0;
  sub_100010BCC(&qword_100484B40);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v23 = __clz(__rbit64(v21));
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = v23 + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(v2 + 48) + 8 * v15;
    int v17 = *(_DWORD *)v16;
    LOWORD(v16) = *(_WORD *)(v16 + 4);
    char v18 = *(unsigned char *)(*(void *)(v2 + 56) + v15);
    uint64_t v19 = *(void *)(v4 + 48) + 8 * v15;
    *(_DWORD *)uint64_t v19 = v17;
    *(_WORD *)(v19 + 4) = v16;
    *(unsigned char *)(*(void *)(v4 + 56) + v15) = v18;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1003A3444()
{
  return sub_1003A348C(type metadata accessor for NANPeer.Service.AuthenticationStatus, (uint64_t *)&unk_100487CD0, type metadata accessor for NANPeer.Service.AuthenticationStatus, type metadata accessor for NANPeer.Service.AuthenticationStatus);
}

void *sub_1003A348C(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t v34 = a3;
  uint64_t v35 = a4;
  uint64_t v33 = *(void *)(a1(0) - 8);
  __chkstk_darwin();
  unint64_t v7 = (char *)&v30 - v6;
  sub_100010BCC(a2);
  uint64_t v30 = v4;
  uint64_t v8 = *v4;
  uint64_t v9 = static _DictionaryStorage.copy(original:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v30 = v10;
    return result;
  }
  id result = (void *)(v9 + 64);
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12) {
    id result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  }
  uint64_t v31 = v8 + 64;
  int64_t v14 = 0;
  *(void *)(v10 + 16) = *(void *)(v8 + 16);
  uint64_t v15 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(v8 + 64);
  int64_t v32 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      unint64_t v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v19 = v18 | (v14 << 6);
      goto LABEL_12;
    }
    int64_t v27 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v32) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v31 + 8 * v27);
    ++v14;
    if (!v28)
    {
      int64_t v14 = v27 + 1;
      if (v27 + 1 >= v32) {
        goto LABEL_26;
      }
      unint64_t v28 = *(void *)(v31 + 8 * v14);
      if (!v28) {
        break;
      }
    }
LABEL_25:
    unint64_t v17 = (v28 - 1) & v28;
    unint64_t v19 = __clz(__rbit64(v28)) + (v14 << 6);
LABEL_12:
    uint64_t v20 = 7 * v19;
    uint64_t v21 = *(void *)(v8 + 48) + 7 * v19;
    __int16 v22 = *(_WORD *)(v21 + 4);
    char v23 = *(unsigned char *)(v21 + 6);
    unint64_t v24 = *(void *)(v33 + 72) * v19;
    int v25 = *(_DWORD *)v21;
    sub_1003AB930(*(void *)(v8 + 56) + v24, (uint64_t)v7, v34);
    uint64_t v26 = *(void *)(v10 + 48) + v20;
    *(_DWORD *)uint64_t v26 = v25;
    *(_WORD *)(v26 + 4) = v22;
    *(unsigned char *)(v26 + 6) = v23;
    id result = (void *)sub_1003AB998((uint64_t)v7, *(void *)(v10 + 56) + v24, v35);
  }
  int64_t v29 = v27 + 2;
  if (v29 >= v32) {
    goto LABEL_26;
  }
  unint64_t v28 = *(void *)(v31 + 8 * v29);
  if (v28)
  {
    int64_t v14 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v14 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v14 >= v32) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v31 + 8 * v14);
    ++v29;
    if (v28) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1003A3708()
{
  uint64_t v1 = v0;
  sub_100010BCC((uint64_t *)&unk_10047CFA0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 6 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 6 * v15;
    __int16 v18 = *(_WORD *)(v17 + 4);
    uint64_t v19 = 16 * v15;
    uint64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v19);
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    uint64_t v23 = *(void *)(v4 + 48) + v16;
    *(_DWORD *)uint64_t v23 = *(_DWORD *)v17;
    *(_WORD *)(v23 + 4) = v18;
    unint64_t v24 = (void *)(*(void *)(v4 + 56) + v19);
    *unint64_t v24 = v22;
    v24[1] = v21;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1003A38CC()
{
  uint64_t v1 = v0;
  sub_100010BCC((uint64_t *)&unk_100484B00);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v28 = __clz(__rbit64(v26));
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = v28 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 8 * v15;
    int v18 = *(_DWORD *)v17;
    LOWORD(v17) = *(_WORD *)(v17 + 4);
    uint64_t v19 = 24 * v15;
    uint64_t v20 = *(void *)(v2 + 56) + v19;
    uint64_t v21 = *(void *)(v4 + 48) + v16;
    uint64_t v22 = *(void *)(v20 + 16);
    long long v23 = *(_OWORD *)v20;
    *(_DWORD *)uint64_t v21 = v18;
    *(_WORD *)(v21 + 4) = v17;
    uint64_t v24 = *(void *)(v4 + 56) + v19;
    *(_OWORD *)uint64_t v24 = v23;
    *(void *)(v24 + 16) = v22;
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1003A3A84()
{
  uint64_t v1 = v0;
  sub_100010BCC(&qword_100484AE0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1003A3C28()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_100484BB0);
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v8;
    return result;
  }
  long long v23 = v1;
  id result = (void *)(v7 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    id result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  uint64_t v24 = v6 + 64;
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 64);
  int64_t v25 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v26 = v3 + 16;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v11;
    if (!v20)
    {
      int64_t v11 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v11);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    uint64_t v18 = 40 * v16;
    sub_100035FD4(*(void *)(v6 + 56) + v18, (uint64_t)v27);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v17, v5, v2);
    id result = (void *)sub_10006EF50(v27, *(void *)(v8 + 56) + v18);
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v23;
    goto LABEL_25;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v11 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v11 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v11);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_1003A3ED4()
{
  return sub_1003A3F1C(type metadata accessor for NANPeer, &qword_100487CC0, type metadata accessor for NANPeer, type metadata accessor for NANPeer);
}

void *sub_1003A3F1C(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t v35 = a3;
  uint64_t v36 = a4;
  uint64_t v6 = v4;
  uint64_t v34 = *(void *)(a1(0) - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v31 - v7;
  sub_100010BCC(a2);
  uint64_t v9 = *v4;
  uint64_t v10 = static _DictionaryStorage.copy(original:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    *uint64_t v6 = v11;
    return result;
  }
  int64_t v32 = v6;
  id result = (void *)(v10 + 64);
  unint64_t v13 = (unint64_t)((1 << *(unsigned char *)(v11 + 32)) + 63) >> 6;
  if (v11 != v9 || (unint64_t)result >= v9 + 64 + 8 * v13) {
    id result = memmove(result, (const void *)(v9 + 64), 8 * v13);
  }
  uint64_t v33 = v9 + 64;
  int64_t v15 = 0;
  *(void *)(v11 + 16) = *(void *)(v9 + 16);
  uint64_t v16 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & *(void *)(v9 + 64);
  int64_t v19 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      unint64_t v20 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v21 = v20 | (v15 << 6);
      goto LABEL_12;
    }
    int64_t v28 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v28 >= v19) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v33 + 8 * v28);
    ++v15;
    if (!v29)
    {
      int64_t v15 = v28 + 1;
      if (v28 + 1 >= v19) {
        goto LABEL_26;
      }
      unint64_t v29 = *(void *)(v33 + 8 * v15);
      if (!v29) {
        break;
      }
    }
LABEL_25:
    unint64_t v18 = (v29 - 1) & v29;
    unint64_t v21 = __clz(__rbit64(v29)) + (v15 << 6);
LABEL_12:
    uint64_t v22 = 6 * v21;
    uint64_t v23 = *(void *)(v9 + 48) + 6 * v21;
    __int16 v24 = *(_WORD *)(v23 + 4);
    unint64_t v25 = *(void *)(v34 + 72) * v21;
    int v26 = *(_DWORD *)v23;
    sub_1003AB930(*(void *)(v9 + 56) + v25, (uint64_t)v8, v35);
    uint64_t v27 = *(void *)(v11 + 48) + v22;
    *(_DWORD *)uint64_t v27 = v26;
    *(_WORD *)(v27 + 4) = v24;
    id result = (void *)sub_1003AB998((uint64_t)v8, *(void *)(v11 + 56) + v25, v36);
  }
  int64_t v30 = v28 + 2;
  if (v30 >= v19)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v6 = v32;
    goto LABEL_28;
  }
  unint64_t v29 = *(void *)(v33 + 8 * v30);
  if (v29)
  {
    int64_t v15 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v15 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v15 >= v19) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v33 + 8 * v15);
    ++v30;
    if (v29) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1003A4194()
{
  uint64_t v1 = v0;
  uint64_t v27 = *(void *)(sub_100010BCC((uint64_t *)&unk_100484A90) - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100488300);
  uint64_t v4 = *v0;
  uint64_t v5 = static _DictionaryStorage.copy(original:)();
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v6;
    return result;
  }
  __int16 v24 = v1;
  id result = (void *)(v5 + 64);
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  if (v6 != v4 || (unint64_t)result >= v4 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v4 + 64), 8 * v8);
  }
  int64_t v9 = 0;
  *(void *)(v6 + 16) = *(void *)(v4 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v4 + 64);
  uint64_t v25 = v4 + 64;
  int64_t v26 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v13 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v14 = v13 | (v9 << 6);
      goto LABEL_9;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v26) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v26) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v25 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v14 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_9:
    uint64_t v15 = 6 * v14;
    uint64_t v16 = *(void *)(v4 + 48) + 6 * v14;
    __int16 v17 = *(_WORD *)(v16 + 4);
    unint64_t v18 = *(void *)(v27 + 72) * v14;
    int v19 = *(_DWORD *)v16;
    sub_1000136F4(*(void *)(v4 + 56) + v18, (uint64_t)v3, (uint64_t *)&unk_100484A90);
    uint64_t v20 = *(void *)(v6 + 48) + v15;
    *(_DWORD *)uint64_t v20 = v19;
    *(_WORD *)(v20 + 4) = v17;
    id result = (void *)sub_10006EC68((uint64_t)v3, *(void *)(v6 + 56) + v18, (uint64_t *)&unk_100484A90);
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v26)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v24;
    goto LABEL_25;
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v26) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

id sub_1003A441C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_1004883B0);
  int64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    id result = (id)swift_release();
    *int64_t v23 = v7;
    return result;
  }
  id result = (id)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v24 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v27 = v2 + 16;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    uint64_t v17 = 8 * v15;
    unint64_t v18 = *(void **)(*(void *)(v5 + 56) + v17);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
    id result = v18;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_1003A46B4()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_100484B50);
  int64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    *int64_t v23 = v7;
    return result;
  }
  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v24 = v5 + 64;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  uint64_t v27 = v2 + 16;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    uint64_t v17 = 8 * v15;
    uint64_t v18 = *(void *)(*(void *)(v5 + 56) + 8 * v15);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_1003A494C()
{
  uint64_t v1 = v0;
  sub_100010BCC((uint64_t *)&unk_100484AF0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 24 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 24 * v15;
    uint64_t v19 = *(void *)v17;
    uint64_t v18 = *(void *)(v17 + 8);
    char v20 = *(unsigned char *)(v17 + 16);
    LOBYTE(v17) = *(unsigned char *)(v17 + 17);
    uint64_t v21 = 8 * v15;
    uint64_t v22 = *(void *)(*(void *)(v2 + 56) + v21);
    uint64_t v23 = *(void *)(v4 + 48) + v16;
    *(void *)uint64_t v23 = v19;
    *(void *)(v23 + 8) = v18;
    *(unsigned char *)(v23 + 16) = v20;
    *(unsigned char *)(v23 + 17) = v17;
    *(void *)(*(void *)(v4 + 56) + v21) = v22;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  unint64_t v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    int64_t v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1003A4B10(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v4 = v3;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t v15 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    sub_1003A3F1C(type metadata accessor for AWDLPeer, &qword_100484AE8, type metadata accessor for AWDLPeer, type metadata accessor for AWDLPeer);
    uint64_t *v3 = v15;
    uint64_t result = swift_bridgeObjectRelease();
  }
  if ((a2 & 0x8000000000000000) != 0 || (uint64_t v9 = *v3, 1 << *(unsigned char *)(*v4 + 32) <= (uint64_t)a2))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (((*(void *)(v9 + 8 * (a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (*(_DWORD *)(v9 + 36) == a3)
  {
    *uint64_t v4 = 0x8000000000000000;
    uint64_t v10 = *(void *)(v9 + 56);
    uint64_t v11 = (unsigned __int16 *)(*(void *)(v9 + 48) + 6 * a2);
    uint64_t v12 = *(unsigned int *)(v11 + 1);
    uint64_t v13 = *v11;
    uint64_t v14 = type metadata accessor for AWDLPeer(0);
    sub_1003AB998(v10 + *(void *)(*(void *)(v14 - 8) + 72) * a2, a1, type metadata accessor for AWDLPeer);
    sub_1003A1430(a2, v9, type metadata accessor for AWDLPeer);
    *uint64_t v4 = v9;
    swift_bridgeObjectRelease();
    return v13 | (v12 << 16);
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_1003A4CA4(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v4 = v3;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t v13 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    sub_1003A2EC0(type metadata accessor for NANPeer.Service, &qword_100484B10, type metadata accessor for NANPeer.Service, type metadata accessor for NANPeer.Service);
    uint64_t *v3 = v13;
    uint64_t result = swift_bridgeObjectRelease();
  }
  if ((a2 & 0x8000000000000000) != 0 || (uint64_t v9 = *v3, 1 << *(unsigned char *)(*v4 + 32) <= (uint64_t)a2))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (((*(void *)(v9 + 8 * (a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (*(_DWORD *)(v9 + 36) == a3)
  {
    *uint64_t v4 = 0x8000000000000000;
    uint64_t v10 = *(void *)(v9 + 56);
    uint64_t v11 = *(unsigned __int8 *)(*(void *)(v9 + 48) + a2);
    uint64_t v12 = type metadata accessor for NANPeer.Service(0);
    sub_1003AB998(v10 + *(void *)(*(void *)(v12 - 8) + 72) * a2, a1, type metadata accessor for NANPeer.Service);
    sub_1003A0CD4(a2, v9);
    *uint64_t v4 = v9;
    swift_bridgeObjectRelease();
    return v11;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_1003A4E10(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v5 = v4;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t v17 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    sub_1003A348C(type metadata accessor for NANPeer.Service.AuthenticationStatus, (uint64_t *)&unk_100487CD0, type metadata accessor for NANPeer.Service.AuthenticationStatus, type metadata accessor for NANPeer.Service.AuthenticationStatus);
    *uint64_t v4 = v17;
    uint64_t result = swift_bridgeObjectRelease();
  }
  if ((a3 & 0x8000000000000000) != 0 || (uint64_t v11 = *v4, 1 << *(unsigned char *)(*v5 + 32) <= (uint64_t)a3))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (((*(void *)(v11 + 8 * (a3 >> 6) + 64) >> a3) & 1) == 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (*(_DWORD *)(v11 + 36) != a4)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  *uint64_t v5 = 0x8000000000000000;
  uint64_t v12 = *(void *)(v11 + 56);
  uint64_t v13 = *(void *)(v11 + 48) - a3 + 8 * a3;
  __int16 v14 = *(_WORD *)(v13 + 4);
  char v15 = *(unsigned char *)(v13 + 6);
  *(_DWORD *)a1 = *(_DWORD *)v13;
  *(_WORD *)(a1 + 4) = v14;
  *(unsigned char *)(a1 + 6) = v15;
  uint64_t v16 = type metadata accessor for NANPeer.Service.AuthenticationStatus(0);
  sub_1003AB998(v12 + *(void *)(*(void *)(v16 - 8) + 72) * a3, a2, type metadata accessor for NANPeer.Service.AuthenticationStatus);
  sub_1003A0EC0(a3, v11, type metadata accessor for NANPeer.Service.AuthenticationStatus);
  *uint64_t v5 = v11;

  return swift_bridgeObjectRelease();
}

void *sub_1003A4FB8(void *a1)
{
  return sub_100330038(0, a1[2], 0, a1);
}

char *sub_1003A4FCC(uint64_t a1)
{
  return sub_100330164(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1003A4FE4(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t sub_1003A5060(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __int16 v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_1003A704C(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

int8x8_t sub_1003A5210(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  Hasher.init(_seed:)();
  NANClusterChangeEvent.hash(into:)((int)&v21, a2 & 0xFFFFFFFFFFFFLL);
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  uint64_t v10 = v6 + 56;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
    goto LABEL_8;
  }
  unint64_t v11 = *(unsigned __int16 *)(*(void *)(v6 + 48) + 6 * v9) | ((unint64_t)*(unsigned int *)(*(void *)(v6 + 48)
                                                                                                  + 6 * v9
                                                                                                  + 2) << 16);
  swift_bridgeObjectRetain();
  if (!static NANClusterChangeEvent.__derived_struct_equals(_:_:)(v11, a2 & 0xFFFFFFFFFFFFLL))
  {
    unint64_t v9 = (v9 + 1) & ~v8;
    if ((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
    {
      while (!static NANClusterChangeEvent.__derived_struct_equals(_:_:)(*(unsigned __int16 *)(*(void *)(v6 + 48) + 6 * v9) | ((unint64_t)*(unsigned int *)(*(void *)(v6 + 48) + 6 * v9 + 2) << 16), a2 & 0xFFFFFFFFFFFFLL))
      {
        unint64_t v9 = (v9 + 1) & ~v8;
        if (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
          goto LABEL_7;
        }
      }
      goto LABEL_3;
    }
LABEL_7:
    swift_bridgeObjectRelease();
LABEL_8:
    uint64x2_t v16 = (uint64x2_t)vdupq_n_s64(a2);
    int32x4_t v17 = vuzp1q_s32((int32x4_t)vshlq_u64(v16, (uint64x2_t)xmmword_1003B2EB0), (int32x4_t)vshlq_u64(v16, (uint64x2_t)xmmword_1003B2EA0));
    *(int16x4_t *)v17.i8 = vmovn_s32(v17);
    int16x8_t v20 = (int16x8_t)v17;
    unint64_t v15 = a2 >> 40;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v3;
    void *v3 = 0x8000000000000000;
    sub_1003A71E8(a2 & 0xFFFFFFFFFFFFLL, v9, isUniquelyReferenced_nonNull_native);
    void *v3 = v21;
    swift_bridgeObjectRelease();
    int16x8_t v14 = v20;
    goto LABEL_9;
  }
LABEL_3:
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(*v3 + 48) + 6 * v9;
  LOBYTE(a2) = *(unsigned char *)v12;
  v13.i32[0] = *(_DWORD *)(v12 + 1);
  int16x8_t v14 = (int16x8_t)vmovl_u8(v13);
  LOBYTE(v15) = *(unsigned char *)(v12 + 5);
LABEL_9:
  *(unsigned char *)a1 = a2;
  int8x8_t result = vmovn_s16(v14);
  *(_DWORD *)(a1 + 1) = result.i32[0];
  *(unsigned char *)(a1 + 5) = v15;
  return result;
}

uint64_t sub_1003A53F8(unsigned char *a1, unint64_t a2)
{
  unint64_t v3 = a2;
  unint64_t v5 = a2 >> 16;
  unint64_t v6 = a2 >> 24;
  unint64_t v7 = HIDWORD(a2);
  unint64_t v8 = HIWORD(a2);
  uint64_t v9 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  char v26 = v7;
  char v27 = v6;
  char v28 = v5;
  NANClusterChangeEvent.hash(into:)((int)&v30, ((unint64_t)BYTE5(v3) << 32) & 0xFFFF00FF00000000 | ((unint64_t)v8 << 40) | ((unint64_t)v7 << 24) | ((unint64_t)v6 << 16) | ((unint64_t)v5 << 8) | BYTE1(v3));
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
    unint64_t v15 = ((unint64_t)BYTE5(v3) << 40) | ((unint64_t)BYTE6(v3) << 48) | ((unint64_t)BYTE4(v3) << 32) | ((unint64_t)BYTE3(v3) << 24) | ((unint64_t)BYTE2(v3) << 16) | ((unint64_t)BYTE1(v3) << 8) | v3;
LABEL_8:
    unint64_t v19 = v3 >> 8;
    unint64_t v23 = v3 >> 40;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v30 = *v29;
    *unint64_t v29 = 0x8000000000000000;
    sub_1003A73BC(v15, v12, isUniquelyReferenced_nonNull_native);
    *unint64_t v29 = v30;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    char v21 = v27;
    char v20 = v28;
    char v24 = v8;
    char v22 = v26;
    goto LABEL_9;
  }
  uint8x8_t v13 = (unsigned __int16 *)(*(void *)(v9 + 48) - v12 + 8 * v12);
  unint64_t v14 = *v13 | ((unint64_t)*((unsigned __int8 *)v13 + 2) << 16) | ((unint64_t)*(unsigned int *)((char *)v13 + 3) << 24);
  unint64_t v15 = ((unint64_t)BYTE5(v3) << 40) | ((unint64_t)BYTE6(v3) << 48) | ((unint64_t)BYTE4(v3) << 32) | ((unint64_t)BYTE3(v3) << 24) | ((unint64_t)BYTE2(v3) << 16) | ((unint64_t)BYTE1(v3) << 8) | v3;
  swift_bridgeObjectRetain();
  if (!static NANPeerServiceIdentifier.__derived_struct_equals(_:_:)(v14, v15))
  {
    while (1)
    {
      unint64_t v12 = (v12 + 1) & ~v11;
      if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
        break;
      }
      uint64x2_t v16 = (unsigned __int16 *)(*(void *)(v9 + 48) - v12 + 8 * v12);
      if (static NANPeerServiceIdentifier.__derived_struct_equals(_:_:)(*v16 | ((unint64_t)*((unsigned __int8 *)v16 + 2) << 16) | ((unint64_t)*(unsigned int *)((char *)v16 + 3) << 24), v15))
      {
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
LABEL_5:
  swift_bridgeObjectRelease();
  uint64_t result = 0;
  uint64_t v18 = (unsigned char *)(*(void *)(*v29 + 48) - v12 + 8 * v12);
  LOBYTE(v3) = *v18;
  LOBYTE(v19) = v18[1];
  char v20 = v18[2];
  char v21 = v18[3];
  char v22 = v18[4];
  LOBYTE(v23) = v18[5];
  char v24 = v18[6];
LABEL_9:
  *a1 = v3;
  a1[1] = v19;
  a1[2] = v20;
  a1[3] = v21;
  a1[4] = v22;
  a1[5] = v23;
  a1[6] = v24;
  return result;
}

uint64_t sub_1003A567C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unint64_t v5 = v4;
  unsigned int v6 = a4;
  Swift::UInt8 v10 = BYTE1(a4);
  uint64_t v11 = *v5;
  Hasher.init(_seed:)();
  uint64_t v41 = a2;
  String.lowercased()();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v10);
  Swift::Int v12 = Hasher._finalize()();
  uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
  unint64_t v14 = v12 & ~v13;
  uint64_t v15 = v11 + 56;
  char v40 = v6 & 1;
  if (((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
  {
    uint64_t v42 = a3;
    Swift::Int i = a2;
    swift_bridgeObjectRelease();
    __int16 v29 = v6 & 0xFF01;
    goto LABEL_8;
  }
  uint64_t v38 = v5;
  uint64_t v39 = a1;
  uint64_t v16 = 24 * v14;
  uint64_t v17 = *(void *)(v11 + 48) + 24 * v14;
  uint64_t v18 = *(void *)v17;
  uint64_t v19 = *(void *)(v17 + 8);
  unsigned int v20 = v6;
  __int16 v21 = *(unsigned __int8 *)(v17 + 16) | (*(unsigned __int8 *)(v17 + 17) << 8);
  unsigned int v37 = v20;
  __int16 v22 = v20 & 0xFF01;
  swift_bridgeObjectRetain();
  LOBYTE(v21) = static DNSRecords.Identifier.== infix(_:_:)(v18, v19, v21, v41, a3, v22);
  swift_bridgeObjectRelease();
  if ((v21 & 1) == 0)
  {
    uint64_t v42 = a3;
    uint64_t v23 = ~v13;
    unint64_t v14 = (v14 + 1) & v23;
    for (i = v41; ((*(void *)(v15 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) != 0; unint64_t v14 = (v14 + 1) & v23)
    {
      uint64_t v16 = 24 * v14;
      uint64_t v25 = *(void *)(v11 + 48) + 24 * v14;
      uint64_t v26 = *(void *)v25;
      uint64_t v27 = *(void *)(v25 + 8);
      __int16 v28 = *(unsigned __int8 *)(v25 + 16) | (*(unsigned __int8 *)(v25 + 17) << 8);
      swift_bridgeObjectRetain();
      LOBYTE(v26) = static DNSRecords.Identifier.== infix(_:_:)(v26, v27, v28, v41, v42, v22);
      swift_bridgeObjectRelease();
      if (v26) {
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v5 = v38;
    a1 = v39;
    unsigned int v6 = v37;
    __int16 v29 = v22;
LABEL_8:
    unsigned int v30 = v6 >> 8;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v43 = *v5;
    *unint64_t v5 = 0x8000000000000000;
    swift_bridgeObjectRetain();
    sub_1003A761C(i, v42, v29, v14, isUniquelyReferenced_nonNull_native);
    *unint64_t v5 = v43;
    swift_bridgeObjectRelease();
    *(void *)a1 = i;
    *(void *)(a1 + 8) = v42;
    *(unsigned char *)(a1 + 16) = v40;
    uint64_t result = 1;
    *(unsigned char *)(a1 + 17) = v30;
    return result;
  }
LABEL_9:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v33 = *(void *)(*v38 + 48) + v16;
  uint64_t v35 = *(void *)v33;
  uint64_t v34 = *(void *)(v33 + 8);
  char v36 = *(unsigned char *)(v33 + 16);
  LOBYTE(v33) = *(unsigned char *)(v33 + 17);
  *(void *)uint64_t v39 = v35;
  *(void *)(v39 + 8) = v34;
  *(unsigned char *)(v39 + 16) = v36;
  *(unsigned char *)(v39 + 17) = v33;
  swift_bridgeObjectRetain();
  return 0;
}

uint64_t sub_1003A596C(unsigned char *a1, Swift::Int a2)
{
  uint64_t v4 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v5 = Hasher._finalize()();
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = v5 & ~v6;
  if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
  {
LABEL_21:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    sub_1003A78B0(a2, v7, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v17;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_24;
  }
  uint64_t v8 = ~v6;
  while (2)
  {
    unint64_t v9 = 0xEE00657275746375;
    uint64_t v10 = 0x7274736172666E69;
    switch(*(unsigned char *)(*(void *)(v4 + 48) + v7))
    {
      case 1:
        unint64_t v9 = 0xE400000000000000;
        uint64_t v10 = 1818523489;
        break;
      case 2:
        uint64_t v10 = 0x67616E614D6E616ELL;
        unint64_t v9 = 0xED0000746E656D65;
        break;
      case 3:
        unint64_t v9 = 0xE700000000000000;
        uint64_t v10 = 0x617461446E616ELL;
        break;
      case 4:
        uint64_t v10 = 0x6E6574614C776F6CLL;
        unint64_t v9 = 0xEA00000000007963;
        break;
      default:
        break;
    }
    uint64_t v11 = 0x7274736172666E69;
    unint64_t v12 = 0xEE00657275746375;
    switch((char)a2)
    {
      case 1:
        unint64_t v12 = 0xE400000000000000;
        if (v10 == 1818523489) {
          goto LABEL_15;
        }
        goto LABEL_16;
      case 2:
        unint64_t v12 = 0xED0000746E656D65;
        if (v10 != 0x67616E614D6E616ELL) {
          goto LABEL_16;
        }
        goto LABEL_15;
      case 3:
        unint64_t v12 = 0xE700000000000000;
        uint64_t v11 = 0x617461446E616ELL;
        goto LABEL_14;
      case 4:
        unint64_t v12 = 0xEA00000000007963;
        if (v10 != 0x6E6574614C776F6CLL) {
          goto LABEL_16;
        }
        goto LABEL_15;
      default:
LABEL_14:
        if (v10 != v11) {
          goto LABEL_16;
        }
LABEL_15:
        if (v9 != v12)
        {
LABEL_16:
          char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v13) {
            goto LABEL_23;
          }
          unint64_t v7 = (v7 + 1) & v8;
          if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
            goto LABEL_21;
          }
          continue;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_23:
        swift_bridgeObjectRelease();
        uint64_t result = 0;
        LOBYTE(a2) = *(unsigned char *)(*(void *)(*v2 + 48) + v7);
LABEL_24:
        *a1 = a2;
        return result;
    }
  }
}

uint64_t sub_1003A5D54()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100010BCC((uint64_t *)&unk_100486B70);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v26;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      Swift::UInt v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      uint64_t result = Hasher._finalize()();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_1003A6000()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100010BCC((uint64_t *)&unk_1004883D0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    unsigned int v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unsigned int v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      void *v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_1003A62E0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100010BCC((uint64_t *)&unk_100488310);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v34 = (void *)(v2 + 56);
    uint64_t v35 = v2;
    uint64_t v6 = 1 << *(unsigned char *)(v2 + 32);
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v33 = (unint64_t)(v6 + 63) >> 6;
    uint64_t v9 = result + 56;
    while (1)
    {
      if (v8)
      {
        unint64_t v12 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        int64_t v36 = v5;
        unint64_t v13 = v12 | (v5 << 6);
      }
      else
      {
        int64_t v14 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v14 >= v33) {
          goto LABEL_33;
        }
        unint64_t v15 = v34[v14];
        int64_t v16 = v5 + 1;
        if (!v15)
        {
          int64_t v16 = v14 + 1;
          if (v14 + 1 >= v33) {
            goto LABEL_33;
          }
          unint64_t v15 = v34[v16];
          if (!v15)
          {
            int64_t v16 = v14 + 2;
            if (v14 + 2 >= v33) {
              goto LABEL_33;
            }
            unint64_t v15 = v34[v16];
            if (!v15)
            {
              int64_t v17 = v14 + 3;
              if (v17 >= v33)
              {
LABEL_33:
                uint64_t v32 = 1 << *(unsigned char *)(v2 + 32);
                if (v32 > 63) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v34 = -1 << v32;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v15 = v34[v17];
              if (!v15)
              {
                while (1)
                {
                  int64_t v16 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v16 >= v33) {
                    goto LABEL_33;
                  }
                  unint64_t v15 = v34[v16];
                  ++v17;
                  if (v15) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v16 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v15 - 1) & v15;
        int64_t v36 = v16;
        unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
      }
      int64_t v18 = (unsigned __int8 *)(*(void *)(v2 + 48) + 6 * v13);
      uint64_t v19 = *v18;
      uint64_t v20 = v18[1];
      uint64_t v21 = v18[2];
      uint64_t v22 = v18[3];
      uint64_t v23 = v18[4];
      uint64_t v24 = v18[5];
      Hasher.init(_seed:)();
      NANClusterChangeEvent.hash(into:)((int)&v37, v19 | (v20 << 8) | (v21 << 16) | (v22 << 24) | (v23 << 32) | (v24 << 40));
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v9 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v10 = __clz(__rbit64((-1 << v26) & ~*(void *)(v9 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v9 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v10 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v9 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
      int64_t v11 = (unsigned char *)(*(void *)(v4 + 48) + 6 * v10);
      unsigned char *v11 = v19;
      v11[1] = v20;
      v11[2] = v21;
      uint64_t v11[3] = v22;
      void v11[4] = v23;
      void v11[5] = v24;
      ++*(void *)(v4 + 16);
      uint64_t v2 = v35;
      int64_t v5 = v36;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_1003A6614()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100010BCC((uint64_t *)&unk_100486BA0);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v34 = (void *)(v2 + 56);
    uint64_t v35 = v2;
    uint64_t v6 = 1 << *(unsigned char *)(v2 + 32);
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v33 = (unint64_t)(v6 + 63) >> 6;
    uint64_t v9 = result + 56;
    while (1)
    {
      if (v8)
      {
        uint64_t v36 = (v8 - 1) & v8;
        int64_t v37 = v5;
        unint64_t v12 = __clz(__rbit64(v8)) | (v5 << 6);
      }
      else
      {
        int64_t v13 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v13 >= v33) {
          goto LABEL_33;
        }
        unint64_t v14 = v34[v13];
        int64_t v15 = v5 + 1;
        if (!v14)
        {
          int64_t v15 = v5 + 2;
          if (v5 + 2 >= v33) {
            goto LABEL_33;
          }
          unint64_t v14 = v34[v15];
          if (!v14)
          {
            int64_t v15 = v5 + 3;
            if (v5 + 3 >= v33) {
              goto LABEL_33;
            }
            unint64_t v14 = v34[v15];
            if (!v14)
            {
              uint64_t v16 = v5 + 4;
              if (v5 + 4 >= v33)
              {
LABEL_33:
                uint64_t v32 = 1 << *(unsigned char *)(v2 + 32);
                if (v32 > 63) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v34 = -1 << v32;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v14 = v34[v16];
              if (!v14)
              {
                while (1)
                {
                  int64_t v15 = v16 + 1;
                  if (__OFADD__(v16, 1)) {
                    goto LABEL_39;
                  }
                  if (v15 >= v33) {
                    goto LABEL_33;
                  }
                  unint64_t v14 = v34[v15];
                  ++v16;
                  if (v14) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v15 = v5 + 4;
            }
          }
        }
LABEL_23:
        uint64_t v36 = (v14 - 1) & v14;
        int64_t v37 = v15;
        unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
      }
      int64_t v17 = (Swift::UInt8 *)(*(void *)(v2 + 48) - v12 + 8 * v12);
      Swift::UInt8 v18 = *v17;
      uint64_t v19 = v17[1];
      uint64_t v20 = v17[2];
      uint64_t v21 = v17[3];
      uint64_t v22 = v17[4];
      uint64_t v23 = v17[5];
      uint64_t v24 = v17[6];
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      NANClusterChangeEvent.hash(into:)((int)&v38, v19 | (v20 << 8) | (v21 << 16) | (v22 << 24) | (v23 << 32) | (v24 << 40));
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v9 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v10 = __clz(__rbit64((-1 << v26) & ~*(void *)(v9 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v9 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v10 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v9 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
      int64_t v11 = (Swift::UInt8 *)(*(void *)(v4 + 48) - v10 + 8 * v10);
      Swift::UInt8 *v11 = v18;
      v11[1] = v19;
      v11[2] = v20;
      uint64_t v11[3] = v21;
      void v11[4] = v22;
      void v11[5] = v23;
      v11[6] = v24;
      ++*(void *)(v4 + 16);
      uint64_t v2 = v35;
      unint64_t v8 = v36;
      int64_t v5 = v37;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_1003A6960()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100010BCC((uint64_t *)&unk_100486B90);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v33 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v32 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v14 = v13 | (v10 << 6);
      }
      else
      {
        int64_t v15 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v32) {
          goto LABEL_33;
        }
        unint64_t v16 = v33[v15];
        ++v10;
        if (!v16)
        {
          int64_t v10 = v15 + 1;
          if (v15 + 1 >= v32) {
            goto LABEL_33;
          }
          unint64_t v16 = v33[v10];
          if (!v16)
          {
            int64_t v10 = v15 + 2;
            if (v15 + 2 >= v32) {
              goto LABEL_33;
            }
            unint64_t v16 = v33[v10];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v32)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v31 = 1 << *(unsigned char *)(v2 + 32);
                if (v31 > 63) {
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v33 = -1 << v31;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v33[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v10 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v10 >= v32) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v33[v10];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v10 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v10 << 6);
      }
      uint64_t v18 = v2;
      uint64_t v19 = *(void *)(v2 + 48) + 24 * v14;
      uint64_t v20 = *(void *)v19;
      uint64_t v21 = *(void *)(v19 + 8);
      char v22 = *(unsigned char *)(v19 + 16);
      Swift::UInt8 v23 = *(unsigned char *)(v19 + 17);
      Hasher.init(_seed:)();
      String.lowercased()();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(v23);
      uint64_t result = Hasher._finalize()();
      uint64_t v24 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v25 = result & ~v24;
      unint64_t v26 = v25 >> 6;
      if (((-1 << v25) & ~*(void *)(v8 + 8 * (v25 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v25) & ~*(void *)(v8 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v29 = v26 == v28;
          if (v26 == v28) {
            unint64_t v26 = 0;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v8 + 8 * v26);
        }
        while (v30 == -1);
        unint64_t v11 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      uint64_t v12 = *(void *)(v4 + 48) + 24 * v11;
      *(void *)uint64_t v12 = v20;
      *(void *)(v12 + 8) = v21;
      *(unsigned char *)(v12 + 16) = v22;
      *(unsigned char *)(v12 + 17) = v23;
      ++*(void *)(v4 + 16);
      uint64_t v2 = v18;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_1003A6CCC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100010BCC(qword_100486BB0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16)) {
    goto LABEL_38;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = (void *)(v2 + 56);
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v17 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v18 = v17 | (v11 << 6);
      goto LABEL_33;
    }
    int64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_39;
    }
    if (v19 >= v9) {
      break;
    }
    unint64_t v20 = v6[v19];
    ++v11;
    if (!v20)
    {
      int64_t v11 = v19 + 1;
      if (v19 + 1 >= v9) {
        break;
      }
      unint64_t v20 = v6[v11];
      if (!v20)
      {
        int64_t v11 = v19 + 2;
        if (v19 + 2 >= v9) {
          break;
        }
        unint64_t v20 = v6[v11];
        if (!v20)
        {
          int64_t v21 = v19 + 3;
          if (v21 >= v9) {
            break;
          }
          unint64_t v20 = v6[v21];
          if (!v20)
          {
            while (1)
            {
              int64_t v11 = v21 + 1;
              if (__OFADD__(v21, 1)) {
                goto LABEL_40;
              }
              if (v11 >= v9) {
                goto LABEL_34;
              }
              unint64_t v20 = v6[v11];
              ++v21;
              if (v20) {
                goto LABEL_32;
              }
            }
          }
          int64_t v11 = v21;
        }
      }
    }
LABEL_32:
    unint64_t v8 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_33:
    char v26 = *(unsigned char *)(*(void *)(v2 + 48) + v18);
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v12 = Hasher._finalize()();
    uint64_t v13 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v14 = v12 & ~v13;
    unint64_t v15 = v14 >> 6;
    if (((-1 << v14) & ~*(void *)(v10 + 8 * (v14 >> 6))) != 0)
    {
      unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v10 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_8;
    }
    char v22 = 0;
    unint64_t v23 = (unint64_t)(63 - v13) >> 6;
    do
    {
      if (++v15 == v23 && (v22 & 1) != 0)
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        JUMPOUT(0x1003A7038);
      }
      BOOL v24 = v15 == v23;
      if (v15 == v23) {
        unint64_t v15 = 0;
      }
      v22 |= v24;
      uint64_t v25 = *(void *)(v10 + 8 * v15);
    }
    while (v25 == -1);
    unint64_t v16 = __clz(__rbit64(~v25)) + (v15 << 6);
LABEL_8:
    *(void *)(v10 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *(unsigned char *)(*(void *)(v4 + 48) + v16) = v26;
    ++*(void *)(v4 + 16);
  }
LABEL_34:
  swift_release();
  uint64_t v1 = v0;
  uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
  if (v27 > 63) {
    bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v6 = -1 << v27;
  }
  *(void *)(v2 + 16) = 0;
LABEL_38:
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

Swift::Int sub_1003A704C(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_1003A6000();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_100313BEC();
      goto LABEL_22;
    }
    sub_1003A7F1C();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    unint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        unint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  int64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *int64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

Swift::Int sub_1003A71E8(Swift::Int result, unint64_t i, char a3)
{
  uint64_t v4 = v3;
  Swift::Int v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_13;
  }
  if (a3)
  {
    sub_1003A62E0();
  }
  else
  {
    if (v8 > v7)
    {
      uint64_t result = (Swift::Int)sub_100313DA0();
      goto LABEL_13;
    }
    sub_1003A81CC();
  }
  uint64_t v9 = *v3;
  Hasher.init(_seed:)();
  NANClusterChangeEvent.hash(into:)((int)&v18, v6 & 0xFFFFFFFFFFFFLL);
  uint64_t result = Hasher._finalize()();
  uint64_t v10 = -1 << *(unsigned char *)(v9 + 32);
  Swift::Int i = result & ~v10;
  uint64_t v11 = v9 + 56;
  if ((*(void *)(v9 + 56 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    uint64_t result = static NANClusterChangeEvent.__derived_struct_equals(_:_:)(*(unsigned __int16 *)(*(void *)(v9 + 48) + 6 * i) | ((unint64_t)*(unsigned int *)(*(void *)(v9 + 48) + 6 * i + 2) << 16), v6 & 0xFFFFFFFFFFFFLL);
    if (result) {
      goto LABEL_16;
    }
    uint64_t v12 = ~v10;
    for (Swift::Int i = (i + 1) & v12; ((*(void *)(v11 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; Swift::Int i = (i + 1) & v12)
    {
      uint64_t result = static NANClusterChangeEvent.__derived_struct_equals(_:_:)(*(unsigned __int16 *)(*(void *)(v9 + 48) + 6 * i) | ((unint64_t)*(unsigned int *)(*(void *)(v9 + 48) + 6 * i + 2) << 16), v6 & 0xFFFFFFFFFFFFLL);
      if (result) {
        goto LABEL_16;
      }
    }
  }
LABEL_13:
  uint64_t v13 = *v4;
  *(void *)(*v4 + 8 * (i >> 6) + 56) |= 1 << i;
  uint64_t v14 = *(void *)(v13 + 48) + 6 * i;
  *(_WORD *)uint64_t v14 = v6;
  *(unsigned char *)(v14 + 2) = BYTE2(v6);
  *(unsigned char *)(v14 + 3) = BYTE3(v6);
  *(unsigned char *)(v14 + 4) = BYTE4(v6);
  *(unsigned char *)(v14 + 5) = BYTE5(v6);
  uint64_t v15 = *(void *)(v13 + 16);
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (!v16)
  {
    *(void *)(v13 + 16) = v17;
    return result;
  }
  __break(1u);
LABEL_16:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t sub_1003A73BC(unint64_t result, unint64_t a2, char a3)
{
  unint64_t v5 = result;
  unint64_t v6 = HIWORD(result);
  unint64_t v7 = HIDWORD(result);
  unint64_t v8 = *(void *)(*v3 + 16);
  unint64_t v9 = *(void *)(*v3 + 24);
  unint64_t v21 = result >> 16;
  unint64_t v22 = result >> 24;
  if (v9 > v8 && (a3 & 1) != 0)
  {
    unint64_t v10 = HIDWORD(result);
    unint64_t v11 = HIWORD(result);
    goto LABEL_14;
  }
  if (a3)
  {
    sub_1003A6614();
  }
  else
  {
    if (v9 > v8)
    {
      LOBYTE(v10) = BYTE4(result);
      LOBYTE(v11) = BYTE6(result);
      uint64_t result = (unint64_t)sub_100313F4C();
      goto LABEL_14;
    }
    sub_1003A84CC();
  }
  uint64_t v12 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  LOBYTE(v11) = v6;
  LOBYTE(v10) = v7;
  NANClusterChangeEvent.hash(into:)((int)&v23, ((unint64_t)BYTE5(v5) << 32) & 0xFFFF00FF00000000 | ((unint64_t)v6 << 40) | ((unint64_t)v7 << 24) | ((unint64_t)v22 << 16) | ((unint64_t)v21 << 8) | BYTE1(v5));
  uint64_t result = Hasher._finalize()();
  uint64_t v13 = -1 << *(unsigned char *)(v12 + 32);
  a2 = result & ~v13;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v14 = (unsigned __int16 *)(*(void *)(v12 + 48) - a2 + 8 * a2);
    uint64_t result = static NANPeerServiceIdentifier.__derived_struct_equals(_:_:)(*v14 | ((unint64_t)*((unsigned __int8 *)v14 + 2) << 16) | ((unint64_t)*(unsigned int *)((char *)v14 + 3) << 24), ((unint64_t)BYTE5(v5) << 40) | ((unint64_t)BYTE6(v5) << 48) | ((unint64_t)BYTE4(v5) << 32) | ((unint64_t)BYTE3(v5) << 24) | ((unint64_t)BYTE2(v5) << 16) | ((unint64_t)BYTE1(v5) << 8) | v5);
    if (result)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      while (1)
      {
        a2 = (a2 + 1) & ~v13;
        if (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        uint64_t v15 = (unsigned __int16 *)(*(void *)(v12 + 48) - a2 + 8 * a2);
        uint64_t result = static NANPeerServiceIdentifier.__derived_struct_equals(_:_:)(*v15 | ((unint64_t)*((unsigned __int8 *)v15 + 2) << 16) | ((unint64_t)*(unsigned int *)((char *)v15 + 3) << 24), ((unint64_t)BYTE5(v5) << 40) | ((unint64_t)BYTE6(v5) << 48) | ((unint64_t)BYTE4(v5) << 32) | ((unint64_t)BYTE3(v5) << 24) | ((unint64_t)BYTE2(v5) << 16) | ((unint64_t)BYTE1(v5) << 8) | v5);
        if (result) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v16 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t v17 = *(void *)(v16 + 48) - a2 + 8 * a2;
  *(_WORD *)uint64_t v17 = v5;
  *(unsigned char *)(v17 + 2) = v21;
  *(unsigned char *)(v17 + 3) = v22;
  *(unsigned char *)(v17 + 4) = v10;
  *(unsigned char *)(v17 + 5) = BYTE5(v5);
  *(unsigned char *)(v17 + 6) = v11;
  uint64_t v18 = *(void *)(v16 + 16);
  BOOL v19 = __OFADD__(v18, 1);
  uint64_t v20 = v18 + 1;
  if (v19) {
    __break(1u);
  }
  else {
    *(void *)(v16 + 16) = v20;
  }
  return result;
}

Swift::Int sub_1003A761C(Swift::Int result, uint64_t a2, __int16 a3, unint64_t a4, char a5)
{
  uint64_t v9 = result;
  unint64_t v10 = *(void *)(*v5 + 16);
  unint64_t v11 = *(void *)(*v5 + 24);
  char v35 = a3 & 1;
  char v33 = HIBYTE(a3);
  if (v11 > v10 && (a5 & 1) != 0) {
    goto LABEL_14;
  }
  if (a5)
  {
    sub_1003A6960();
  }
  else
  {
    if (v11 > v10)
    {
      uint64_t v12 = result;
      uint64_t result = (Swift::Int)sub_100314100();
      goto LABEL_15;
    }
    sub_1003A87E4();
  }
  uint64_t v13 = *v5;
  Hasher.init(_seed:)();
  String.lowercased()();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(HIBYTE(a3));
  uint64_t result = Hasher._finalize()();
  a4 = result & ~(-1 << *(unsigned char *)(v13 + 32));
  if (((*(void *)(v13 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4) & 1) == 0) {
    goto LABEL_14;
  }
  __int16 v14 = a3;
  uint64_t v32 = -1 << *(unsigned char *)(v13 + 32);
  uint64_t v15 = *(void *)(v13 + 48) + 24 * a4;
  uint64_t v16 = *(void *)v15;
  uint64_t v17 = *(void *)(v15 + 8);
  uint64_t v18 = a2;
  __int16 v19 = *(unsigned __int8 *)(v15 + 16) | (*(unsigned __int8 *)(v15 + 17) << 8);
  __int16 v20 = v14 & 0xFF01;
  swift_bridgeObjectRetain();
  __int16 v21 = v19;
  a2 = v18;
  uint64_t v12 = v9;
  LOBYTE(v16) = static DNSRecords.Identifier.== infix(_:_:)(v16, v17, v21, v9, v18, v20);
  uint64_t result = swift_bridgeObjectRelease();
  if (v16)
  {
LABEL_13:
    uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
LABEL_14:
    uint64_t v12 = v9;
    goto LABEL_15;
  }
  uint64_t v9 = ~v32;
  while (1)
  {
    a4 = (a4 + 1) & v9;
    if (((*(void *)(v13 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4) & 1) == 0) {
      break;
    }
    uint64_t v22 = *(void *)(v13 + 48) + 24 * a4;
    uint64_t v23 = *(void *)v22;
    uint64_t v24 = *(void *)(v22 + 8);
    __int16 v25 = *(unsigned __int8 *)(v22 + 16) | (*(unsigned __int8 *)(v22 + 17) << 8);
    swift_bridgeObjectRetain();
    __int16 v26 = v25;
    a2 = v18;
    LOBYTE(v23) = static DNSRecords.Identifier.== infix(_:_:)(v23, v24, v26, v12, v18, v20);
    uint64_t result = swift_bridgeObjectRelease();
    if (v23) {
      goto LABEL_13;
    }
  }
LABEL_15:
  uint64_t v27 = *v34;
  *(void *)(*v34 + 8 * (a4 >> 6) + 56) |= 1 << a4;
  uint64_t v28 = *(void *)(v27 + 48) + 24 * a4;
  *(void *)uint64_t v28 = v12;
  *(void *)(v28 + 8) = a2;
  *(unsigned char *)(v28 + 16) = v35;
  *(unsigned char *)(v28 + 17) = v33;
  uint64_t v29 = *(void *)(v27 + 16);
  BOOL v30 = __OFADD__(v29, 1);
  uint64_t v31 = v29 + 1;
  if (v30) {
    __break(1u);
  }
  else {
    *(void *)(v27 + 16) = v31;
  }
  return result;
}

Swift::Int sub_1003A78B0(Swift::Int result, unint64_t a2, char a3)
{
  char v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if (a3)
    {
      sub_1003A6CCC();
    }
    else
    {
      if (v7 > v6)
      {
        uint64_t result = (Swift::Int)sub_1003142C8();
        goto LABEL_28;
      }
      sub_1003A8B20();
    }
    uint64_t v8 = *v3;
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
    a2 = result & ~v9;
    if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v10 = ~v9;
      while (2)
      {
        unint64_t v11 = 0xEE00657275746375;
        uint64_t v12 = 0x7274736172666E69;
        switch(*(unsigned char *)(*(void *)(v8 + 48) + a2))
        {
          case 1:
            unint64_t v11 = 0xE400000000000000;
            uint64_t v12 = 1818523489;
            break;
          case 2:
            uint64_t v12 = 0x67616E614D6E616ELL;
            unint64_t v11 = 0xED0000746E656D65;
            break;
          case 3:
            unint64_t v11 = 0xE700000000000000;
            uint64_t v12 = 0x617461446E616ELL;
            break;
          case 4:
            uint64_t v12 = 0x6E6574614C776F6CLL;
            unint64_t v11 = 0xEA00000000007963;
            break;
          default:
            break;
        }
        uint64_t v13 = 0x7274736172666E69;
        unint64_t v14 = 0xEE00657275746375;
        switch(v5)
        {
          case 1:
            unint64_t v14 = 0xE400000000000000;
            if (v12 != 1818523489) {
              goto LABEL_23;
            }
            goto LABEL_22;
          case 2:
            uint64_t v13 = 0x67616E614D6E616ELL;
            unint64_t v14 = 0xED0000746E656D65;
            goto LABEL_21;
          case 3:
            unint64_t v14 = 0xE700000000000000;
            if (v12 != 0x617461446E616ELL) {
              goto LABEL_23;
            }
            goto LABEL_22;
          case 4:
            unint64_t v14 = 0xEA00000000007963;
            if (v12 != 0x6E6574614C776F6CLL) {
              goto LABEL_23;
            }
            goto LABEL_22;
          default:
LABEL_21:
            if (v12 != v13) {
              goto LABEL_23;
            }
LABEL_22:
            if (v11 == v14) {
              goto LABEL_31;
            }
LABEL_23:
            char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            if (v15) {
              goto LABEL_32;
            }
            a2 = (a2 + 1) & v10;
            if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
              break;
            }
            continue;
        }
        break;
      }
    }
  }
LABEL_28:
  uint64_t v16 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(unsigned char *)(*(void *)(v16 + 48) + a2) = v5;
  uint64_t v17 = *(void *)(v16 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18)
  {
    __break(1u);
LABEL_31:
    swift_bridgeObjectRelease_n();
LABEL_32:
    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    JUMPOUT(0x1003A7C64);
  }
  *(void *)(v16 + 16) = v19;
  return result;
}

uint64_t sub_1003A7CA0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100010BCC((uint64_t *)&unk_100486B70);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    Swift::UInt v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1003A7F1C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100010BCC((uint64_t *)&unk_1004883D0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    void *v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1003A81CC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100010BCC((uint64_t *)&unk_100488310);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v32 = v2 + 56;
  uint64_t v6 = 1 << *(unsigned char *)(v2 + 32);
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v33 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v34 = v2;
  uint64_t v9 = result + 56;
  while (1)
  {
    if (v8)
    {
      unint64_t v12 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      int64_t v35 = v5;
      unint64_t v13 = v12 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v14 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v33) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v32 + 8 * v14);
    int64_t v16 = v5 + 1;
    if (!v15)
    {
      int64_t v16 = v14 + 1;
      if (v14 + 1 >= v33) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v32 + 8 * v16);
      if (!v15)
      {
        int64_t v16 = v14 + 2;
        if (v14 + 2 >= v33) {
          goto LABEL_33;
        }
        unint64_t v15 = *(void *)(v32 + 8 * v16);
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v15 - 1) & v15;
    int64_t v35 = v16;
    unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
LABEL_24:
    int64_t v18 = (unsigned __int8 *)(*(void *)(v2 + 48) + 6 * v13);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    uint64_t v21 = v18[2];
    uint64_t v22 = v18[3];
    uint64_t v23 = v18[4];
    uint64_t v24 = v18[5];
    Hasher.init(_seed:)();
    NANClusterChangeEvent.hash(into:)((int)&v36, v19 | (v20 << 8) | (v21 << 16) | (v22 << 24) | (v23 << 32) | (v24 << 40));
    uint64_t result = Hasher._finalize()();
    uint64_t v25 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v26 = result & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v9 + 8 * (v26 >> 6))) != 0)
    {
      unint64_t v10 = __clz(__rbit64((-1 << v26) & ~*(void *)(v9 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v30 = v27 == v29;
        if (v27 == v29) {
          unint64_t v27 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v9 + 8 * v27);
      }
      while (v31 == -1);
      unint64_t v10 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(void *)(v9 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    int64_t v11 = (unsigned char *)(*(void *)(v4 + 48) + 6 * v10);
    unsigned char *v11 = v19;
    v11[1] = v20;
    v11[2] = v21;
    uint64_t v11[3] = v22;
    void v11[4] = v23;
    void v11[5] = v24;
    ++*(void *)(v4 + 16);
    uint64_t v2 = v34;
    int64_t v5 = v35;
  }
  int64_t v17 = v14 + 3;
  if (v17 >= v33)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v15 = *(void *)(v32 + 8 * v17);
  if (v15)
  {
    int64_t v16 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v16 >= v33) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v32 + 8 * v16);
    ++v17;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1003A84CC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100010BCC((uint64_t *)&unk_100486BA0);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v32 = v2 + 56;
  uint64_t v6 = 1 << *(unsigned char *)(v2 + 32);
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v33 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v34 = v2;
  uint64_t v9 = result + 56;
  while (1)
  {
    if (v8)
    {
      uint64_t v35 = (v8 - 1) & v8;
      int64_t v36 = v5;
      unint64_t v12 = __clz(__rbit64(v8)) | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v13 >= v33) {
      goto LABEL_33;
    }
    unint64_t v14 = *(void *)(v32 + 8 * v13);
    int64_t v15 = v5 + 1;
    if (!v14)
    {
      int64_t v15 = v5 + 2;
      if (v5 + 2 >= v33) {
        goto LABEL_33;
      }
      unint64_t v14 = *(void *)(v32 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v5 + 3;
        if (v5 + 3 >= v33) {
          goto LABEL_33;
        }
        unint64_t v14 = *(void *)(v32 + 8 * v15);
        if (!v14) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v35 = (v14 - 1) & v14;
    int64_t v36 = v15;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
LABEL_24:
    int64_t v17 = (Swift::UInt8 *)(*(void *)(v2 + 48) - v12 + 8 * v12);
    Swift::UInt8 v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t v20 = v17[2];
    uint64_t v21 = v17[3];
    uint64_t v22 = v17[4];
    uint64_t v23 = v17[5];
    uint64_t v24 = v17[6];
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    NANClusterChangeEvent.hash(into:)((int)&v37, v19 | (v20 << 8) | (v21 << 16) | (v22 << 24) | (v23 << 32) | (v24 << 40));
    uint64_t result = Hasher._finalize()();
    uint64_t v25 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v26 = result & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v9 + 8 * (v26 >> 6))) != 0)
    {
      unint64_t v10 = __clz(__rbit64((-1 << v26) & ~*(void *)(v9 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v30 = v27 == v29;
        if (v27 == v29) {
          unint64_t v27 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v9 + 8 * v27);
      }
      while (v31 == -1);
      unint64_t v10 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(void *)(v9 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    int64_t v11 = (Swift::UInt8 *)(*(void *)(v4 + 48) - v10 + 8 * v10);
    Swift::UInt8 *v11 = v18;
    v11[1] = v19;
    v11[2] = v20;
    uint64_t v11[3] = v21;
    void v11[4] = v22;
    void v11[5] = v23;
    v11[6] = v24;
    ++*(void *)(v4 + 16);
    uint64_t v2 = v34;
    unint64_t v8 = v35;
    int64_t v5 = v36;
  }
  uint64_t v16 = v5 + 4;
  if (v5 + 4 >= v33)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v32 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v5 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v33) {
      goto LABEL_33;
    }
    unint64_t v14 = *(void *)(v32 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1003A87E4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100010BCC((uint64_t *)&unk_100486B90);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v30 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v31 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  for (i = v2; ; uint64_t v2 = i)
  {
    if (v7)
    {
      unint64_t v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v14 = v13 | (v10 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v31) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v30 + 8 * v15);
    ++v10;
    if (!v16)
    {
      int64_t v10 = v15 + 1;
      if (v15 + 1 >= v31) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v30 + 8 * v10);
      if (!v16)
      {
        int64_t v10 = v15 + 2;
        if (v15 + 2 >= v31) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v30 + 8 * v10);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v10 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(v2 + 48) + 24 * v14;
    uint64_t v19 = *(void *)v18;
    uint64_t v20 = *(void *)(v18 + 8);
    char v21 = *(unsigned char *)(v18 + 16);
    Swift::UInt8 v22 = *(unsigned char *)(v18 + 17);
    Hasher.init(_seed:)();
    String.lowercased()();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(v22);
    uint64_t result = Hasher._finalize()();
    uint64_t v23 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v8 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v24) & ~*(void *)(v8 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v8 + 8 * v25);
      }
      while (v29 == -1);
      unint64_t v11 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    uint64_t v12 = *(void *)(v4 + 48) + 24 * v11;
    *(void *)uint64_t v12 = v19;
    *(void *)(v12 + 8) = v20;
    *(unsigned char *)(v12 + 16) = v21;
    *(unsigned char *)(v12 + 17) = v22;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v31)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v30 + 8 * v17);
  if (v16)
  {
    int64_t v10 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v10 >= v31) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v30 + 8 * v10);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1003A8B20()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100010BCC(qword_100486BB0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
    goto LABEL_36;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v17 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v18 = v17 | (v11 << 6);
      goto LABEL_33;
    }
    int64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_37;
    }
    if (v19 >= v9) {
      break;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v11;
    if (!v20)
    {
      int64_t v11 = v19 + 1;
      if (v19 + 1 >= v9) {
        break;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v11);
      if (!v20)
      {
        int64_t v11 = v19 + 2;
        if (v19 + 2 >= v9) {
          break;
        }
        unint64_t v20 = *(void *)(v6 + 8 * v11);
        if (!v20)
        {
          int64_t v21 = v19 + 3;
          if (v21 >= v9) {
            break;
          }
          unint64_t v20 = *(void *)(v6 + 8 * v21);
          if (!v20)
          {
            while (1)
            {
              int64_t v11 = v21 + 1;
              if (__OFADD__(v21, 1)) {
                goto LABEL_38;
              }
              if (v11 >= v9) {
                goto LABEL_34;
              }
              unint64_t v20 = *(void *)(v6 + 8 * v11);
              ++v21;
              if (v20) {
                goto LABEL_32;
              }
            }
          }
          int64_t v11 = v21;
        }
      }
    }
LABEL_32:
    unint64_t v8 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_33:
    char v26 = *(unsigned char *)(*(void *)(v2 + 48) + v18);
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v12 = Hasher._finalize()();
    uint64_t v13 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v14 = v12 & ~v13;
    unint64_t v15 = v14 >> 6;
    if (((-1 << v14) & ~*(void *)(v10 + 8 * (v14 >> 6))) != 0)
    {
      unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v10 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_8;
    }
    char v22 = 0;
    unint64_t v23 = (unint64_t)(63 - v13) >> 6;
    do
    {
      if (++v15 == v23 && (v22 & 1) != 0)
      {
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
        JUMPOUT(0x1003A8E58);
      }
      BOOL v24 = v15 == v23;
      if (v15 == v23) {
        unint64_t v15 = 0;
      }
      v22 |= v24;
      uint64_t v25 = *(void *)(v10 + 8 * v15);
    }
    while (v25 == -1);
    unint64_t v16 = __clz(__rbit64(~v25)) + (v15 << 6);
LABEL_8:
    *(void *)(v10 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *(unsigned char *)(*(void *)(v4 + 48) + v16) = v26;
    ++*(void *)(v4 + 16);
  }
LABEL_34:
  uint64_t result = swift_release_n();
  uint64_t v1 = v0;
LABEL_36:
  *uint64_t v1 = v4;
  return result;
}

unint64_t sub_1003A8E6C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  Hasher.init(_seed:)();
  uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  NANClusterChangeEvent.hash(into:)((int)&v20, a1 & 0xFFFFFFFFFFFFLL);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v8 = v6 & ~v7;
  uint64_t v9 = v4 + 56;
  if (((*(void *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
    goto LABEL_10;
  }
  unint64_t v10 = *(unsigned __int16 *)(*(void *)(v4 + 48) + 6 * v8) | ((unint64_t)*(unsigned int *)(*(void *)(v4 + 48)
                                                                                                  + 6 * v8
                                                                                                  + 2) << 16);
  swift_bridgeObjectRetain();
  if (!static NANClusterChangeEvent.__derived_struct_equals(_:_:)(v10, v5))
  {
    unint64_t v8 = (v8 + 1) & ~v7;
    if ((*(void *)(v9 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      while (!static NANClusterChangeEvent.__derived_struct_equals(_:_:)(*(unsigned __int16 *)(*(void *)(v4 + 48) + 6 * v8) | ((unint64_t)*(unsigned int *)(*(void *)(v4 + 48) + 6 * v8 + 2) << 16), v5))
      {
        unint64_t v8 = (v8 + 1) & ~v7;
        if (((*(void *)(v9 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
          goto LABEL_9;
        }
      }
      goto LABEL_3;
    }
LABEL_9:
    swift_bridgeObjectRelease();
LABEL_10:
    uint64_t v18 = 0;
    unsigned __int8 v17 = 1;
    return v18 | ((unint64_t)v17 << 48);
  }
LABEL_3:
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = *v2;
  uint64_t v20 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100313DA0();
    uint64_t v12 = v20;
  }
  uint64_t v13 = (unsigned int *)(*(void *)(v12 + 48) + 6 * v8);
  uint64_t v14 = *v13;
  uint64_t v15 = *((unsigned __int8 *)v13 + 4);
  uint64_t v16 = *((unsigned __int8 *)v13 + 5);
  sub_100314460(v8);
  *uint64_t v2 = v20;
  swift_bridgeObjectRelease();
  unsigned __int8 v17 = 0;
  uint64_t v18 = v14 | (v15 << 32) | (v16 << 40);
  return v18 | ((unint64_t)v17 << 48);
}

Swift::Int sub_1003A9024@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v5 = a1 >> 16;
  unint64_t v6 = a1 >> 24;
  unint64_t v7 = HIDWORD(a1);
  unint64_t v8 = HIWORD(a1);
  uint64_t v9 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  NANClusterChangeEvent.hash(into:)((int)&v22, ((unint64_t)BYTE5(a1) << 32) & 0xFFFF00FF00000000 | ((unint64_t)v8 << 40) | ((unint64_t)v7 << 24) | ((unint64_t)v6 << 16) | ((unint64_t)v5 << 8) | BYTE1(a1));
  Swift::Int result = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = result & ~v11;
  if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_9:
    *(unsigned char *)(a2 + 6) = 0;
    *(_WORD *)(a2 + 4) = 0;
    char v21 = 1;
    *(_DWORD *)a2 = 0;
    goto LABEL_10;
  }
  uint64_t v13 = (unsigned __int16 *)(*(void *)(v9 + 48) - v12 + 8 * v12);
  unint64_t v14 = *v13 | ((unint64_t)*((unsigned __int8 *)v13 + 2) << 16) | ((unint64_t)*(unsigned int *)((char *)v13 + 3) << 24);
  swift_bridgeObjectRetain();
  if (!static NANPeerServiceIdentifier.__derived_struct_equals(_:_:)(v14, ((unint64_t)BYTE5(a1) << 40) | ((unint64_t)BYTE6(a1) << 48) | ((unint64_t)BYTE4(a1) << 32) | ((unint64_t)BYTE3(a1) << 24) | ((unint64_t)BYTE2(a1) << 16) | ((unint64_t)BYTE1(a1) << 8) | a1))
  {
    while (1)
    {
      unint64_t v12 = (v12 + 1) & ~v11;
      if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
        break;
      }
      uint64_t v15 = (unsigned __int16 *)(*(void *)(v9 + 48) - v12 + 8 * v12);
      if (static NANPeerServiceIdentifier.__derived_struct_equals(_:_:)(*v15 | ((unint64_t)*((unsigned __int8 *)v15 + 2) << 16) | ((unint64_t)*(unsigned int *)((char *)v15 + 3) << 24), ((unint64_t)BYTE5(a1) << 40) | ((unint64_t)BYTE6(a1) << 48) | ((unint64_t)BYTE4(a1) << 32) | ((unint64_t)BYTE3(a1) << 24) | ((unint64_t)BYTE2(a1) << 16) | ((unint64_t)BYTE1(a1) << 8) | a1))
      {
        goto LABEL_5;
      }
    }
    Swift::Int result = swift_bridgeObjectRelease();
    goto LABEL_9;
  }
LABEL_5:
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v17 = *v2;
  uint64_t v22 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100313F4C();
    uint64_t v17 = v22;
  }
  uint64_t v18 = *(void *)(v17 + 48) - v12 + 8 * v12;
  __int16 v19 = *(_WORD *)(v18 + 4);
  char v20 = *(unsigned char *)(v18 + 6);
  *(_DWORD *)a2 = *(_DWORD *)v18;
  *(_WORD *)(a2 + 4) = v19;
  *(unsigned char *)(a2 + 6) = v20;
  sub_100314628(v12);
  *uint64_t v2 = v22;
  Swift::Int result = swift_bridgeObjectRelease();
  char v21 = 0;
LABEL_10:
  *(unsigned char *)(a2 + 7) = v21;
  return result;
}

void **sub_1003A9240(uint64_t a1, void **a2)
{
  char v5 = *(unsigned char *)(a1 + 32);
  unint64_t v6 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v7 = 8 * v6;
  if (v5 & 0x3Fu) <= 0xD || (swift_stdlib_isStackAllocationSafe())
  {
    __chkstk_darwin();
    bzero((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    uint64_t v8 = sub_1003A93AC((uint64_t)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v6, a1, a2);
    if (v2) {
      swift_willThrow();
    }
    else {
      return (void **)v8;
    }
  }
  else
  {
    uint64_t v9 = (void *)swift_slowAlloc();
    bzero(v9, v7);
    a2 = (void **)sub_1003A93AC((uint64_t)v9, v6, a1, a2);
    swift_slowDealloc();
  }
  return a2;
}

uint64_t sub_1003A93AC(uint64_t result, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v4 = a3;
  unint64_t v27 = (unint64_t *)result;
  uint64_t v28 = 0;
  int64_t v5 = 0;
  uint64_t v6 = *(void *)(a3 + 64);
  uint64_t v29 = a3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & v6;
  int64_t v30 = (unint64_t)(v7 + 63) >> 6;
  if ((v8 & v6) != 0) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v13 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    if (v13 < v30)
    {
      unint64_t v14 = *(void *)(v29 + 8 * v13);
      ++v5;
      if (v14) {
        goto LABEL_21;
      }
      int64_t v5 = v13 + 1;
      if (v13 + 1 >= v30) {
        return sub_100369CD0(v27, a2, v28, v4);
      }
      unint64_t v14 = *(void *)(v29 + 8 * v5);
      if (v14) {
        goto LABEL_21;
      }
      int64_t v5 = v13 + 2;
      if (v13 + 2 >= v30) {
        return sub_100369CD0(v27, a2, v28, v4);
      }
      unint64_t v14 = *(void *)(v29 + 8 * v5);
      if (v14)
      {
LABEL_21:
        unint64_t v9 = (v14 - 1) & v14;
        for (unint64_t i = __clz(__rbit64(v14)) + (v5 << 6); ; unint64_t i = v11 | (v5 << 6))
        {
          if (*(uint64_t *)(*(void *)(v4 + 56) + 8 * i) > 2)
          {
            *(unint64_t *)((char *)v27 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
            if (__OFADD__(v28++, 1)) {
              goto LABEL_32;
            }
            if (!v9) {
              goto LABEL_8;
            }
          }
          else
          {
            uint64_t v16 = *(void *)(v4 + 48) + 24 * i;
            uint64_t v17 = *(void *)v16;
            uint64_t v18 = *(void *)(v16 + 8);
            char v19 = *(unsigned char *)(v16 + 16);
            char v20 = *(unsigned char *)(v16 + 17);
            char v21 = *a4;
            swift_bridgeObjectRetain_n();
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *a4 = v21;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              char v21 = sub_100330AC0(0, v21[2] + 1, 1, v21);
              *a4 = v21;
            }
            unint64_t v24 = v21[2];
            unint64_t v23 = v21[3];
            if (v24 >= v23 >> 1)
            {
              char v21 = sub_100330AC0((void *)(v23 > 1), v24 + 1, 1, v21);
              *a4 = v21;
            }
            void v21[2] = v24 + 1;
            uint64_t v25 = &v21[3 * v24];
            v25[4] = v17;
            v25[5] = v18;
            *((unsigned char *)v25 + 48) = v19;
            *((unsigned char *)v25 + 49) = v20;
            Swift::Int result = swift_bridgeObjectRelease();
            uint64_t v4 = a3;
            if (!v9) {
              goto LABEL_8;
            }
          }
LABEL_7:
          unint64_t v11 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
        }
      }
      int64_t v15 = v13 + 3;
      if (v15 < v30)
      {
        unint64_t v14 = *(void *)(v29 + 8 * v15);
        if (v14)
        {
          int64_t v5 = v15;
          goto LABEL_21;
        }
        while (1)
        {
          int64_t v5 = v15 + 1;
          if (__OFADD__(v15, 1)) {
            goto LABEL_31;
          }
          if (v5 >= v30) {
            return sub_100369CD0(v27, a2, v28, v4);
          }
          unint64_t v14 = *(void *)(v29 + 8 * v5);
          ++v15;
          if (v14) {
            goto LABEL_21;
          }
        }
      }
    }
    return sub_100369CD0(v27, a2, v28, v4);
  }
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

void *sub_1003A963C@<X0>(void *(*a1)(uint64_t *__return_ptr)@<X2>, void *a2@<X8>)
{
  Swift::Int result = a1(&v5);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_1003A9680()
{
  uint64_t v1 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 456));
  swift_beginAccess();
  uint64_t v2 = *v1;
  type metadata accessor for AWDLInterface.StateMonitoringClient();
  return v2;
}

unint64_t sub_1003A9714(uint64_t a1)
{
  return ((unint64_t)[*(id *)(a1 + 16) options] >> 5) & 1;
}

void sub_1003A974C(uint64_t a1)
{
}

uint64_t sub_1003A976C(void **a1, unsigned char *a2)
{
  return sub_100392070(a1, a2, *(void *)(v2 + 16), *(char **)(v2 + 24), *(void **)(v2 + 32)) & 1;
}

uint64_t sub_1003A9790(void **a1, unsigned char *a2)
{
  return sub_100392A04(a1, a2, *(void *)(v2 + 16), *(char **)(v2 + 24), *(void **)(v2 + 32)) & 1;
}

uint64_t sub_1003A97B4(uint64_t (**a1)(void))
{
  return (*a1)(*(void *)(v1 + 16));
}

uint64_t sub_1003A97EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  type metadata accessor for AWDLTrafficRegistrationService(0);
  sub_1003A98A8(&qword_10047C870, type metadata accessor for AWDLTrafficRegistrationService);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (void **)(a1 + 32);
    do
    {
      uint64_t v5 = *v4++;
      sub_1000FA3C4(&v6, v5);

      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_1003A98A8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1003A98F0(void **a1)
{
}

uint64_t sub_1003A990C(uint64_t result)
{
  if (result != 1) {
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_1003A991C(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v2) {
      goto LABEL_3;
    }
    return 0;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    return 0;
  }
LABEL_3:
  uint64_t v3 = 0;
  unint64_t v4 = v1 & 0xC000000000000001;
  uint64_t p_type = &stru_100479FF0.type;
  uint64_t v21 = v2;
  while (1)
  {
    if (v4) {
      id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v6 = *(id *)(v1 + 8 * v3 + 32);
    }
    uint64_t v7 = v6;
    id v8 = [v6 p_type[450]];
    int v9 = AWDLTrafficRegistrationService.serviceType.getter();
    char v10 = AWDLTrafficRegistrationService.serviceType.getter();
    if (v9 != 2 || v10 != 2)
    {

      goto LABEL_16;
    }
    unint64_t v11 = v4;
    unint64_t v12 = v1;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;
    if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
      break;
    }
    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v1 = v12;
    unint64_t v4 = v11;
    uint64_t v2 = v21;
    uint64_t p_type = (char **)(&stru_100479FF0 + 16);
    if ((v18 & 1) == 0) {
      return v3;
    }
LABEL_16:
    uint64_t v19 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      goto LABEL_21;
    }
LABEL_17:
    ++v3;
    if (v19 == v2) {
      return 0;
    }
  }

  swift_bridgeObjectRelease_n();
  unint64_t v1 = v12;
  unint64_t v4 = v11;
  uint64_t v2 = v21;
  uint64_t p_type = (char **)(&stru_100479FF0 + 16);
  uint64_t v19 = v3 + 1;
  if (!__OFADD__(v3, 1)) {
    goto LABEL_17;
  }
LABEL_21:
  __break(1u);
  return 0;
}

id sub_1003A9B14(void *a1, char a2, char a3)
{
  unint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for AWDLPeer(0);
  __chkstk_darwin();
  char v10 = (char *)v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v73 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v74 = AssociatedTypeWitness;
  __chkstk_darwin();
  unint64_t v72 = (char *)v66 - v12;
  id v13 = [a1 uniqueIdentifier];
  id v14 = 0;
  if (a2) {
    id v14 = [a1 peerAddress];
  }
  id v15 = sub_100393A70(v13, v14, v4, a3 & 1);

  if (v15)
  {
    if (a2)
    {
      uint64_t v16 = *(void (**)(void))(AssociatedConformanceWitness + 144);
      swift_checkMetadataState();
      uint64_t v17 = v72;
      v16();
      id v18 = v15;
      id v19 = [a1 uniqueIdentifier];
      uint64_t v20 = v74;
      uint64_t v21 = swift_getAssociatedConformanceWitness();
      (*(void (**)(id, id, uint64_t, uint64_t))(v21 + 24))(v18, v19, v20, v21);

      (*(void (**)(char *, uint64_t))(v73 + 8))(v17, v20);
    }
    id v22 = [a1 uniqueIdentifier];
    static PreferenceDefaults.deviceName.getter();
    NSString v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v24 = [a1 localization];
    if (!v24)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v24 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    id v25 = [self localizedErrorForConflictBetweenExistingService:v15 withNewService:v22 localDeviceName:v23 localization:v24];
  }
  else
  {
    if ((a2 & 1) == 0) {
      return 0;
    }
    id v26 = [a1 peerAddress];
    unint64_t v27 = WiFiMACAddress.wifiAddress.getter();

    unint64_t v69 = v27 & 0xFFFFFFFFFFFFLL;
    sub_100376468(v27 & 0xFFFFFFFFFFFFLL, (uint64_t)v10);
    uint64_t v28 = &v10[*(int *)(v8 + 68)];
    uint64_t v29 = *(void *)v28;
    uint64_t v30 = *((void *)v28 + 1);
    uint64_t v31 = *((void *)v28 + 3);
    uint64_t v70 = *((void *)v28 + 2);
    uint64_t v32 = *((void *)v28 + 4);
    sub_1003AB6C0((uint64_t)v10, type metadata accessor for AWDLPeer);
    if ((v30 & 0xFF00000000) == 0x400000000)
    {
      int64_t v33 = &_swiftEmptySetSingleton;
    }
    else
    {
      __int16 v77 = v29;
      char v78 = BYTE2(v29);
      char v79 = BYTE3(v29);
      char v80 = BYTE4(v29);
      char v81 = BYTE5(v29);
      char v82 = BYTE6(v29);
      int v83 = v30;
      __int16 v84 = WORD2(v30);
      uint64_t v85 = v70;
      char v86 = v31;
      *((void *)&v34 + 1) = v32;
      *(void *)&long long v34 = v31;
      int v87 = HIDWORD(v31);
      __int16 v88 = (unint64_t)(v34 >> 32) >> 32;
      char v89 = BYTE2(v32);
      char v90 = BYTE3(v32);
      char v91 = BYTE4(v32);
      char v92 = BYTE5(v32);
      char v93 = BYTE6(v32);
      char v94 = HIBYTE(v32);
      int64_t v33 = AWDLActionFrame.RealtimeGroup.activeServiceIdentifiers.getter();
    }
    __chkstk_darwin();
    v66[-4] = a1;
    v66[-3] = v4;
    LOBYTE(v66[-2]) = v27;
    BYTE1(v66[-2]) = v35;
    BYTE2(v66[-2]) = v36;
    BYTE3(v66[-2]) = v37;
    BYTE4(v66[-2]) = v38;
    BYTE5(v66[-2]) = v39;
    sub_1003756AC((uint64_t (*)(id *))sub_1003AA420, (uint64_t)&v66[-6], (uint64_t)v33);
    uint64_t v41 = v40;
    swift_bridgeObjectRelease();
    if (!v41) {
      return 0;
    }
    if (a3)
    {
      id v42 = a1;
      id v43 = v41;
      id v44 = v42;
      id v45 = v43;
      uint64_t v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.error.getter();
      int v48 = v47;
      if (os_log_type_enabled(v46, v47))
      {
        uint64_t v49 = swift_slowAlloc();
        uint64_t v70 = swift_slowAlloc();
        v76[0] = v70;
        *(_DWORD *)uint64_t v49 = 136315650;
        v66[1] = v49 + 4;
        id v50 = [v44 uniqueIdentifier];
        os_log_t v68 = v46;
        id v51 = v50;
        uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        int v67 = v48;
        unint64_t v54 = v53;

        uint64_t v75 = sub_100010680(v52, v54, v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v49 + 12) = 2080;
        uint64_t v55 = WiFiAddress.description.getter(v69);
        uint64_t v75 = sub_100010680(v55, v56, v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v49 + 22) = 2080;
        uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v75 = sub_100010680(v57, v58, v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        os_log_t v59 = v68;
        _os_log_impl((void *)&_mh_execute_header, v68, (os_log_type_t)v67, "Rejecting %s because peer %s would conflict with its active service for %s", (uint8_t *)v49, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
    }
    uint64_t v61 = *(void (**)(void))(AssociatedConformanceWitness + 144);
    swift_checkMetadataState();
    unint64_t v62 = v72;
    v61();
    id v15 = v41;
    id v63 = [a1 uniqueIdentifier];
    uint64_t v64 = v74;
    uint64_t v65 = swift_getAssociatedConformanceWitness();
    (*(void (**)(id, id, uint64_t, uint64_t))(v65 + 24))(v15, v63, v64, v65);

    (*(void (**)(char *, uint64_t))(v73 + 8))(v62, v64);
    NSString v23 = [a1 uniqueIdentifier];
    NSString v24 = [a1 localization];
    if (!v24)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v24 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    id v25 = [self localizedErrorForConflictBetweenExistingService:v15 withNewService:v23 localDeviceName:0 localization:v24];
  }

  return v25;
}

unint64_t sub_1003AA3DC(uint64_t a1)
{
  return (unint64_t)sub_10039C448(a1, *(void *)(v1 + 32)) & 1;
}

void sub_1003AA400(uint64_t a1)
{
  sub_10039C4D0(a1, *(void *)(v1 + 32), *(void *)(v1 + 40));
}

BOOL sub_1003AA420(uint64_t a1)
{
  return sub_100397890(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(unsigned __int16 *)(v1 + 32) | ((unint64_t)*(unsigned int *)(v1 + 34) << 16));
}

uint64_t sub_1003AA44C(id *a1)
{
  return sub_100396A50(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32)) & 1;
}

uint64_t sub_1003AA470(uint64_t a1)
{
  return sub_1003AA4F4(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_100396C60) & 1;
}

uint64_t sub_1003AA4A0(id *a1)
{
  return sub_100397304(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32)) & 1;
}

uint64_t sub_1003AA4C4(uint64_t a1)
{
  return sub_1003AA4F4(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_100397474) & 1;
}

uint64_t sub_1003AA4F4(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void))
{
  return a2(a1, v2[4], v2[5], v2[6], v2[2], v2[3]) & 1;
}

uint64_t sub_1003AA524()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, AssociatedTypeWitness);

  return _swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1003AA634()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v1 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_10039720C(v0 + v2, v3);
}

void *sub_1003AA744(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return &_swiftEmptySetSingleton;
  }
  sub_100010BCC(qword_100486BB0);
  uint64_t v3 = static _SetStorage.allocate(capacity:)();
  uint64_t v4 = 0;
  uint64_t v5 = v3 + 56;
  uint64_t v22 = v1;
  uint64_t v23 = a1 + 32;
  do
  {
    int v6 = *(unsigned __int8 *)(v23 + v4++);
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v7 = Hasher._finalize()();
    uint64_t v8 = ~(-1 << *(unsigned char *)(v3 + 32));
    unint64_t v9 = v7 & v8;
    unint64_t v10 = (v7 & (unint64_t)v8) >> 6;
    uint64_t v11 = *(void *)(v5 + 8 * v10);
    uint64_t v12 = 1 << (v7 & v8);
    if ((v12 & v11) != 0)
    {
      while (1)
      {
        unint64_t v13 = 0xEE00657275746375;
        uint64_t v14 = 0x7274736172666E69;
        switch(*(unsigned char *)(*(void *)(v3 + 48) + v9))
        {
          case 1:
            unint64_t v13 = 0xE400000000000000;
            uint64_t v14 = 1818523489;
            break;
          case 2:
            uint64_t v14 = 0x67616E614D6E616ELL;
            unint64_t v13 = 0xED0000746E656D65;
            break;
          case 3:
            unint64_t v13 = 0xE700000000000000;
            uint64_t v14 = 0x617461446E616ELL;
            break;
          case 4:
            uint64_t v14 = 0x6E6574614C776F6CLL;
            unint64_t v13 = 0xEA00000000007963;
            break;
          default:
            break;
        }
        uint64_t v15 = 0x7274736172666E69;
        unint64_t v16 = 0xEE00657275746375;
        switch(v6)
        {
          case 1:
            unint64_t v16 = 0xE400000000000000;
            if (v14 == 1818523489) {
              goto LABEL_18;
            }
            goto LABEL_19;
          case 2:
            unint64_t v16 = 0xED0000746E656D65;
            if (v14 != 0x67616E614D6E616ELL) {
              goto LABEL_19;
            }
            goto LABEL_18;
          case 3:
            unint64_t v16 = 0xE700000000000000;
            uint64_t v15 = 0x617461446E616ELL;
            goto LABEL_17;
          case 4:
            unint64_t v16 = 0xEA00000000007963;
            if (v14 != 0x6E6574614C776F6CLL) {
              goto LABEL_19;
            }
            goto LABEL_18;
          default:
LABEL_17:
            if (v14 != v15) {
              goto LABEL_19;
            }
LABEL_18:
            if (v13 == v16)
            {
              swift_bridgeObjectRelease_n();
              goto LABEL_4;
            }
LABEL_19:
            char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v17) {
              goto LABEL_4;
            }
            unint64_t v9 = (v9 + 1) & v8;
            unint64_t v10 = v9 >> 6;
            uint64_t v11 = *(void *)(v5 + 8 * (v9 >> 6));
            uint64_t v12 = 1 << v9;
            if ((v11 & (1 << v9)) == 0) {
              goto LABEL_24;
            }
            break;
        }
      }
    }
LABEL_24:
    *(void *)(v5 + 8 * v10) = v12 | v11;
    *(unsigned char *)(*(void *)(v3 + 48) + v9) = v6;
    uint64_t v18 = *(void *)(v3 + 16);
    BOOL v19 = __OFADD__(v18, 1);
    uint64_t v20 = v18 + 1;
    if (v19)
    {
      __break(1u);
      JUMPOUT(0x1003AAADCLL);
    }
    *(void *)(v3 + 16) = v20;
LABEL_4:
    ;
  }
  while (v4 != v22);
  return (void *)v3;
}

uint64_t sub_1003AAB18()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003AAB50()
{
  return sub_1003ABAFC(48);
}

uint64_t sub_1003AAB58()
{
  return sub_100397D78(*(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1003AAB64()
{
  uint64_t v1 = (int *)type metadata accessor for AWDLPeer(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();

  uint64_t v5 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  uint64_t v6 = v0 + v3 + v1[6];
  uint64_t v7 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = v0 + v3 + v1[10];
  unint64_t v9 = *(void *)(v8 + 24);
  if (v9 >> 60 != 15) {
    sub_10000C970(*(void *)(v8 + 16), v9);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v0 + v3 + v1[14];
  uint64_t v11 = type metadata accessor for AWDLActionFrame.DataPathState(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
  {
    swift_bridgeObjectRelease();
    uint64_t v12 = v10 + *(int *)(v11 + 136);
    uint64_t v13 = type metadata accessor for DispatchTimeInterval();
    uint64_t v14 = *(void *)(v13 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13)) {
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_1003AADF0()
{
  uint64_t v1 = *(void *)(type metadata accessor for AWDLPeer(0) - 8);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void **)(v0 + 40);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_10039B618(v2, v3, v4);
}

BOOL sub_1003AAE70(uint64_t *a1)
{
  return sub_10039B7E4(a1, *(void *)(v1 + 32));
}

uint64_t sub_1003AAE94(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      sub_1003A5060(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_1003AAF2C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_1001B8154();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v6 = result;
  if (v2)
  {
    uint64_t v4 = (unsigned int *)(a1 + 35);
    do
    {
      sub_1003A53F8(v5, *(unsigned __int16 *)((char *)v4 - 3) | ((unint64_t)*((unsigned __int8 *)v4 - 1) << 16) | ((unint64_t)*v4 << 24));
      uint64_t v4 = (unsigned int *)((char *)v4 + 7);
      --v2;
    }
    while (v2);
    return v6;
  }
  return result;
}

uint64_t sub_1003AAFB4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_1000171BC();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v11 = result;
  if (v2)
  {
    uint64_t v4 = (unsigned __int8 *)(a1 + 49);
    do
    {
      uint64_t v5 = *(void *)(v4 - 17);
      uint64_t v6 = *(void *)(v4 - 9);
      int v7 = *(v4 - 1);
      int v8 = *v4;
      v4 += 24;
      unsigned int v9 = v7 | (v8 << 8);
      swift_bridgeObjectRetain();
      sub_1003A567C((uint64_t)&v10, v5, v6, v9);
      swift_bridgeObjectRelease();
      --v2;
    }
    while (v2);
    return v11;
  }
  return result;
}

uint64_t sub_1003AB05C(void (*a1)(void *))
{
  uint64_t v2 = (uint64_t)v1;
  uint64_t v4 = *v1;
  swift_beginAccess();
  uint64_t v13 = *(void *)(v4 + 408);
  uint64_t v14 = *(void *)(v4 + 416);
  sub_10006F314(0, (unint64_t *)&unk_100484A40);
  type metadata accessor for AWDLInterface.AdditionalTrafficRegistrationInformation();
  sub_100296BC4();
  swift_bridgeObjectRetain();
  uint64_t v15 = Dictionary.filter(_:)();
  _OWORD v12[2] = v13;
  uint64_t v12[3] = v14;
  uint64_t v5 = type metadata accessor for Dictionary();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v8 = sub_1003741D0((void (*)(char *, char *))sub_1003ABBCC, (uint64_t)v12, v5, (uint64_t)&type metadata for WiFiAddress, (uint64_t)&type metadata for Never, WitnessTable, (uint64_t)&protocol witness table for Never, v7);
  swift_bridgeObjectRelease();
  uint64_t v9 = sub_100375A48((uint64_t)sub_1003ABBEC, v2, v8);
  uint64_t v10 = sub_100340100((void (*)(uint64_t *__return_ptr, int *))sub_1003ABC24, v2, v9);
  swift_bridgeObjectRelease();
  a1(v10);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003AB274()
{
  return sub_10036B5E0((uint64_t (*)(void))&type metadata accessor for Logger);
}

void sub_1003AB28C(uint64_t a1)
{
  type metadata accessor for Logger();

  sub_10037D124(a1);
}

uint64_t sub_1003AB314()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1003AB34C(uint64_t a1, char *a2)
{
  return sub_100381078(a1, a2);
}

void sub_1003AB358(uint64_t *a1)
{
}

uint64_t sub_1003AB374()
{
  return sub_10036B5E0((uint64_t (*)(void))&type metadata accessor for DispatchTime);
}

uint64_t sub_1003AB38C()
{
  return sub_1003AB3D4((uint64_t (*)(uint64_t, char *, uint64_t, uint64_t))sub_10038D510);
}

uint64_t sub_1003AB3A4()
{
  return sub_10036B5E0((uint64_t (*)(void))&type metadata accessor for DispatchTime);
}

uint64_t sub_1003AB3BC()
{
  return sub_1003AB3D4((uint64_t (*)(uint64_t, char *, uint64_t, uint64_t))sub_10038D0CC);
}

uint64_t sub_1003AB3D4(uint64_t (*a1)(uint64_t, char *, uint64_t, uint64_t))
{
  uint64_t v2 = v1[2];
  uint64_t v3 = v1[3];
  uint64_t v4 = *(void *)(type metadata accessor for DispatchTime() - 8);
  uint64_t v5 = v1[4];
  uint64_t v6 = (char *)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return a1(v5, v6, v2, v3);
}

unint64_t sub_1003AB468(uint64_t a1)
{
  return ((unint64_t)[*(id *)(a1 + 16) options] >> 4) & 1;
}

id sub_1003AB4A0(uint64_t a1)
{
  LOBYTE(v3) = *(unsigned char *)(v1 + 32);
  HIDWORD(v3) = *(_DWORD *)(v1 + 36);
  return sub_10038C890(a1, v3, *(_WORD *)(v1 + 40));
}

unint64_t sub_1003AB4DC(uint64_t a1)
{
  return ((unint64_t)[*(id *)(a1 + 16) options] >> 3) & 1;
}

void sub_1003AB514(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  [v1 threadCoexistenceEvent:isa];
}

unint64_t sub_1003AB588(uint64_t a1)
{
  return ((unint64_t)[*(id *)(a1 + 16) options] >> 1) & 1;
}

id sub_1003AB5C0(uint64_t a1)
{
  return [*(id *)(a1 + 8) updatedStatistics];
}

unint64_t sub_1003AB5F4(uint64_t a1)
{
  return (unint64_t)[*(id *)(a1 + 16) options] & 1;
}

id sub_1003AB62C(uint64_t a1)
{
  return [*(id *)(a1 + 8) updatedAWDLState:*(void *)(v1 + 32)];
}

uint64_t sub_1003AB664(uint64_t a1)
{
  return sub_100389AEC(a1, v1);
}

uint64_t sub_1003AB680(uint64_t a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t sub_1003AB6C0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1003AB720(void **a1)
{
  return sub_10038951C(a1, *(char **)(v1 + 32)) & 1;
}

BOOL sub_1003AB744(id *a1)
{
  return sub_10038883C(a1, *(void *)(v1 + 16));
}

void sub_1003AB764(id *a1)
{
}

BOOL sub_1003AB780(void **a1, uint64_t a2)
{
  return sub_100387720(a1, a2, *(NSObject **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_1003AB7A4(void **a1, char *a2)
{
  return sub_10038DEA8(a1, a2, *(void *)(v2 + 32)) & 1;
}

uint64_t sub_1003AB7C8(void **a1)
{
  return sub_10038E0E8(a1, *(void *)(v1 + 16), *(unsigned __int16 *)(v1 + 24) | ((unint64_t)*(unsigned int *)(v1 + 26) << 16));
}

uint64_t sub_1003AB7F0(void **a1, uint64_t a2)
{
  return sub_10038F084(a1, a2, *(void (**)(char *, char *, uint64_t))(v2 + 16), *(char **)(v2 + 24)) & 1;
}

uint64_t sub_1003AB810(void **a1)
{
  return sub_10038FFA0(a1, *(void (**)(char *, uint64_t))(v1 + 16), *(uint64_t **)(v1 + 24), *(unsigned __int16 *)(v1 + 32) | ((unint64_t)*(unsigned int *)(v1 + 34) << 16), *(unsigned char **)(v1 + 40));
}

unint64_t sub_1003AB83C(uint64_t a1)
{
  return ((unint64_t)[*(id *)(a1 + 16) options] >> 2) & 1;
}

id sub_1003AB874(uint64_t a1)
{
  return [*(id *)(a1 + 8) updatedRealtimeMode:*(unsigned __int8 *)(v1 + *(void *)(*(void *)v1 + 464))];
}

BOOL sub_1003AB8C0(uint64_t a1)
{
  return sub_100374DA4(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16) | (*(unsigned __int8 *)(a1 + 17) << 8), *(void *)(v1 + 16));
}

uint64_t sub_1003AB904(uint64_t *a1)
{
  return sub_100390FE0(a1, *(void (**)(uint64_t))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1003AB924(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1003AB930(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1003AB998(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1003ABA00(uint64_t a1)
{
  return a1;
}

uint64_t sub_1003ABA2C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1003ABA60(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1003ABABC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003ABAF4()
{
  return sub_1003ABAFC(56);
}

uint64_t sub_1003ABAFC(uint64_t a1)
{
  swift_release();

  return _swift_deallocObject(v1, a1, 7);
}

void sub_1003ABB48()
{
  sub_10039B930(*(void *)(v0 + 32), *(void **)(v0 + 40), *(void *)(v0 + 48));
}

void sub_1003ABB58(void *a1, uint64_t a2, void *a3)
{
  if (a1)
  {

    swift_unknownObjectRelease();
  }
}

uint64_t sub_1003ABBAC(void **a1, char *a2)
{
  return sub_100391150(a1, a2) & 1;
}

uint64_t sub_1003ABBCC@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003913C4(a1, a2);
}

BOOL sub_1003ABBEC(unsigned __int16 *a1)
{
  return sub_100377334(*a1 | ((unint64_t)*(unsigned int *)(a1 + 1) << 16));
}

uint64_t sub_1003ABC24@<X0>(unsigned __int16 *a1@<X0>, void *a2@<X8>)
{
  return sub_100391560(a1, a2);
}

uint64_t sub_1003ABC48@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10038DE88(a1, a2);
}

id sub_1003ABC60@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  return sub_10039BE18(a1, a2);
}

BOOL sub_1003ABC88(uint64_t *a1)
{
  return sub_1003AAE70(a1);
}

BOOL sub_1003ABCA4()
{
  return sandbox_check() != 0;
}

uint64_t sub_1003ABCD8(unsigned int a1)
{
  if (a1 > 8) {
    return 0;
  }
  else {
    return qword_1003D7AF8[a1];
  }
}

uint64_t sub_1003ABCF8(int a1)
{
  if (a1 == -536870272) {
    int v1 = 2;
  }
  else {
    int v1 = 0;
  }
  if (a1 == -536870144) {
    unsigned int v2 = 3;
  }
  else {
    unsigned int v2 = v1;
  }
  if (a1 == -536870288) {
    return 1;
  }
  else {
    return v2;
  }
}

dispatch_workloop_t sub_1003ABD38(const char *a1)
{
  dispatch_workloop_t v1 = dispatch_workloop_create(a1);

  return v1;
}

void *sub_1003ABD60(uint64_t a1, void *a2)
{
  uint64_t v3 = malloc_type_malloc(0x3BDC8uLL, 0x10000401B0B51D0uLL);
  v3[183] = 0x10000;
  __strlcpy_chk();
  *a2 = 245192;
  return v3;
}

_DWORD *sub_1003ABDD8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = malloc_type_malloc(0x3B8A0uLL, 0x1000040E9231DBDuLL);
  v5[60965] = 0;
  *((_WORD *)v5 + 121932) = 0;
  *((void *)v5 + 17) = a2;
  __strlcpy_chk();
  *a3 = 243872;
  return v5;
}

void *sub_1003ABE68(uint64_t a1, void *a2)
{
  uint64_t v3 = malloc_type_malloc(0x84uLL, 0x10000403E349CAEuLL);
  __strlcpy_chk();
  *a2 = 132;
  return v3;
}

uint64_t static FormatStyle<>.units(allowed:width:maximumUnitCount:zeroValueUnits:valueLength:fractionalPart:)()
{
  return static FormatStyle<>.units(allowed:width:maximumUnitCount:zeroValueUnits:valueLength:fractionalPart:)();
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:)()
{
  return dispatch thunk of JSONEncoder.encode<A>(_:)();
}

uint64_t JSONEncoder.init()()
{
  return JSONEncoder.init()();
}

uint64_t type metadata accessor for JSONEncoder()
{
  return type metadata accessor for JSONEncoder();
}

uint64_t CharacterSet.init(charactersIn:)()
{
  return CharacterSet.init(charactersIn:)();
}

uint64_t static CharacterSet.decimalDigits.getter()
{
  return static CharacterSet.decimalDigits.getter();
}

uint64_t static CharacterSet.urlQueryAllowed.getter()
{
  return static CharacterSet.urlQueryAllowed.getter();
}

uint64_t CharacterSet.union(_:)()
{
  return CharacterSet.union(_:)();
}

uint64_t static CharacterSet.letters.getter()
{
  return static CharacterSet.letters.getter();
}

uint64_t CharacterSet.contains(_:)()
{
  return CharacterSet.contains(_:)();
}

uint64_t type metadata accessor for CharacterSet()
{
  return type metadata accessor for CharacterSet();
}

uint64_t DataProtocol.copyBytes(to:)()
{
  return DataProtocol.copyBytes(to:)();
}

Swift::Void __swiftcall __DataStorage.ensureUniqueBufferReference(growingTo:clear:)(Swift::Int growingTo, Swift::Bool clear)
{
}

uint64_t __DataStorage.init(bytes:length:copy:deallocator:offset:)()
{
  return __DataStorage.init(bytes:length:copy:deallocator:offset:)();
}

uint64_t __DataStorage.init(bytes:length:)()
{
  return __DataStorage.init(bytes:length:)();
}

uint64_t __DataStorage._bytes.getter()
{
  return __DataStorage._bytes.getter();
}

uint64_t __DataStorage.init(length:)()
{
  return __DataStorage.init(length:)();
}

uint64_t __DataStorage._length.getter()
{
  return __DataStorage._length.getter();
}

uint64_t __DataStorage._offset.getter()
{
  return __DataStorage._offset.getter();
}

uint64_t type metadata accessor for __DataStorage()
{
  return type metadata accessor for __DataStorage();
}

uint64_t dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)()
{
  return dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
}

uint64_t _convertErrorToNSError(_:)()
{
  return _convertErrorToNSError(_:)();
}

uint64_t _convertNSErrorToError(_:)()
{
  return _convertNSErrorToError(_:)();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t URL.init(string:)()
{
  return URL.init(string:)();
}

uint64_t type metadata accessor for URL()
{
  return type metadata accessor for URL();
}

Swift::Void __swiftcall Data.LargeSlice.ensureUniqueReference()()
{
}

uint64_t Data.Deallocator._deallocator.getter()
{
  return Data.Deallocator._deallocator.getter();
}

uint64_t type metadata accessor for Data.Deallocator()
{
  return type metadata accessor for Data.Deallocator();
}

Swift::Void __swiftcall Data.InlineSlice.ensureUniqueReference()()
{
}

uint64_t type metadata accessor for Data.RangeReference()
{
  return type metadata accessor for Data.RangeReference();
}

uint64_t Data._Representation.replaceSubrange(_:with:count:)()
{
  return Data._Representation.replaceSubrange(_:with:count:)();
}

Swift::Void __swiftcall Data._Representation.reserveCapacity(_:)(Swift::Int a1)
{
}

uint64_t Data._Representation.append(contentsOf:)()
{
  return Data._Representation.append(contentsOf:)();
}

uint64_t Data._Representation.subscript.getter()
{
  return Data._Representation.subscript.getter();
}

uint64_t Data._Representation.subscript.setter()
{
  return Data._Representation.subscript.setter();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)Data._bridgeToObjectiveC()();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Data.hash(into:)()
{
  return Data.hash(into:)();
}

uint64_t Data.append(_:)()
{
  return Data.append(_:)();
}

uint64_t Data.subdata(in:)()
{
  return Data.subdata(in:)();
}

Swift::UInt8_optional __swiftcall Data.Iterator.next()()
{
  return (Swift::UInt8_optional)Data.Iterator.next()();
}

uint64_t type metadata accessor for Data.Iterator()
{
  return type metadata accessor for Data.Iterator();
}

uint64_t Data.Iterator.init(_:at:)()
{
  return Data.Iterator.init(_:at:)();
}

uint64_t Data.copyBytes(to:count:)()
{
  return Data.copyBytes(to:count:)();
}

uint64_t Data.subscript.getter()
{
  return Data.subscript.getter();
}

uint64_t Date.timeIntervalSince(_:)()
{
  return Date.timeIntervalSince(_:)();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)Date._bridgeToObjectiveC()();
}

uint64_t Date.init()()
{
  return Date.init()();
}

uint64_t type metadata accessor for Date()
{
  return type metadata accessor for Date();
}

uint64_t UUID.init(uuidString:)()
{
  return UUID.init(uuidString:)();
}

uint64_t UUID.uuidString.getter()
{
  return UUID.uuidString.getter();
}

NSUUID __swiftcall UUID._bridgeToObjectiveC()()
{
  return (NSUUID)UUID._bridgeToObjectiveC()();
}

uint64_t static UUID.== infix(_:_:)()
{
  return static UUID.== infix(_:_:)();
}

uint64_t static UUID._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t UUID.init(uuid:)()
{
  return UUID.init(uuid:)();
}

uint64_t UUID.uuid.getter()
{
  return UUID.uuid.getter();
}

uint64_t UUID.init()()
{
  return UUID.init()();
}

uint64_t type metadata accessor for UUID()
{
  return type metadata accessor for UUID();
}

uint64_t static _CFObject.== infix(_:_:)()
{
  return static _CFObject.== infix(_:_:)();
}

uint64_t _CFObject.hash(into:)()
{
  return _CFObject.hash(into:)();
}

uint64_t _CFObject.hashValue.getter()
{
  return _CFObject.hashValue.getter();
}

uint64_t Logger.logObject.getter()
{
  return Logger.logObject.getter();
}

uint64_t Logger.init(subsystem:category:)()
{
  return Logger.init(subsystem:category:)();
}

uint64_t type metadata accessor for Logger()
{
  return type metadata accessor for Logger();
}

uint64_t XPC_TYPE_UINT64.getter()
{
  return XPC_TYPE_UINT64.getter();
}

uint64_t XPC_TYPE_DICTIONARY.getter()
{
  return XPC_TYPE_DICTIONARY.getter();
}

uint64_t errno.getter()
{
  return errno.getter();
}

Swift::Int32 __swiftcall fcntl(_:_:_:)(Swift::Int32 a1, Swift::Int32 a2, Swift::Int32 a3)
{
  return fcntl(_:_:_:)(*(void *)&a1, *(void *)&a2, *(void *)&a3);
}

Swift::Int32 __swiftcall fcntl(_:_:)(Swift::Int32 a1, Swift::Int32 a2)
{
  return fcntl(_:_:)(*(void *)&a1, *(void *)&a2);
}

uint64_t ioctl(_:_:_:)()
{
  return ioctl(_:_:_:)();
}

uint64_t NWEndpoint.Port.init(rawValue:)()
{
  return NWEndpoint.Port.init(rawValue:)();
}

uint64_t NWEndpoint.Port.rawValue.getter()
{
  return NWEndpoint.Port.rawValue.getter();
}

uint64_t type metadata accessor for NWEndpoint.Port()
{
  return type metadata accessor for NWEndpoint.Port();
}

uint64_t static NWConnection.ContentContext.defaultMessage.getter()
{
  return static NWConnection.ContentContext.defaultMessage.getter();
}

uint64_t type metadata accessor for NWConnection.ContentContext()
{
  return type metadata accessor for NWConnection.ContentContext();
}

uint64_t type metadata accessor for NWConnection.SendCompletion()
{
  return type metadata accessor for NWConnection.SendCompletion();
}

uint64_t NWConnection.send(content:contentContext:isComplete:completion:)()
{
  return NWConnection.send(content:contentContext:isComplete:completion:)();
}

uint64_t type metadata accessor for NWError()
{
  return type metadata accessor for NWError();
}

uint64_t static DispatchTimeInterval.== infix(_:_:)()
{
  return static DispatchTimeInterval.== infix(_:_:)();
}

uint64_t type metadata accessor for DispatchTimeInterval()
{
  return type metadata accessor for DispatchTimeInterval();
}

uint64_t static DispatchTimeoutResult.== infix(_:_:)()
{
  return static DispatchTimeoutResult.== infix(_:_:)();
}

uint64_t static DispatchWorkItemFlags.assignCurrentContext.getter()
{
  return static DispatchWorkItemFlags.assignCurrentContext.getter();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t static DispatchQoS.userInteractive.getter()
{
  return static DispatchQoS.userInteractive.getter();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t DispatchTime.init(uptimeNanoseconds:)()
{
  return DispatchTime.init(uptimeNanoseconds:)();
}

uint64_t static DispatchTime.< infix(_:_:)()
{
  return static DispatchTime.< infix(_:_:)();
}

uint64_t static DispatchTime.now()()
{
  return static DispatchTime.now()();
}

uint64_t DispatchTime.distance(to:)()
{
  return DispatchTime.distance(to:)();
}

uint64_t DispatchTime.rawValue.getter()
{
  return DispatchTime.rawValue.getter();
}

uint64_t type metadata accessor for DispatchTime()
{
  return type metadata accessor for DispatchTime();
}

uint64_t DispatchWorkItem.init(qos:flags:block:)()
{
  return DispatchWorkItem.init(qos:flags:block:)();
}

uint64_t DispatchWorkItem.init(flags:block:)()
{
  return DispatchWorkItem.init(flags:block:)();
}

uint64_t type metadata accessor for DispatchWorkItem()
{
  return type metadata accessor for DispatchWorkItem();
}

uint64_t type metadata accessor for DispatchPredicate()
{
  return type metadata accessor for DispatchPredicate();
}

uint64_t + infix(_:_:)()
{
  return + infix(_:_:)();
}

{
  return + infix(_:_:)();
}

uint64_t - infix(_:_:)()
{
  return - infix(_:_:)();
}

uint64_t _dispatchPreconditionTest(_:)()
{
  return _dispatchPreconditionTest(_:)();
}

uint64_t type metadata accessor for CryptoKitError()
{
  return type metadata accessor for CryptoKitError();
}

uint64_t dispatch thunk of HashFunction.update(bufferPointer:)()
{
  return dispatch thunk of HashFunction.update(bufferPointer:)();
}

uint64_t SHA256Digest.withUnsafeBytes<A>(_:)()
{
  return SHA256Digest.withUnsafeBytes<A>(_:)();
}

uint64_t static SHA256Digest.byteCount.getter()
{
  return static SHA256Digest.byteCount.getter();
}

uint64_t type metadata accessor for SHA256Digest()
{
  return type metadata accessor for SHA256Digest();
}

uint64_t SharedSecret.withUnsafeBytes<A>(_:)()
{
  return SharedSecret.withUnsafeBytes<A>(_:)();
}

uint64_t SharedSecret.hkdfDerivedSymmetricKey<A, B, C>(using:salt:sharedInfo:outputByteCount:)()
{
  return SharedSecret.hkdfDerivedSymmetricKey<A, B, C>(using:salt:sharedInfo:outputByteCount:)();
}

uint64_t type metadata accessor for SharedSecret()
{
  return type metadata accessor for SharedSecret();
}

uint64_t SymmetricKey.withUnsafeBytes<A>(_:)()
{
  return SymmetricKey.withUnsafeBytes<A>(_:)();
}

uint64_t SymmetricKey.init<A>(data:)()
{
  return SymmetricKey.init<A>(data:)();
}

uint64_t SymmetricKey.init(size:)()
{
  return SymmetricKey.init(size:)();
}

uint64_t type metadata accessor for SymmetricKey()
{
  return type metadata accessor for SymmetricKey();
}

uint64_t static SymmetricKeySize.bits256.getter()
{
  return static SymmetricKeySize.bits256.getter();
}

uint64_t SymmetricKeySize.bitCount.getter()
{
  return SymmetricKeySize.bitCount.getter();
}

uint64_t type metadata accessor for SymmetricKeySize()
{
  return type metadata accessor for SymmetricKeySize();
}

uint64_t HashedAuthenticationCode.withUnsafeBytes<A>(_:)()
{
  return HashedAuthenticationCode.withUnsafeBytes<A>(_:)();
}

uint64_t static AES.GCM.open(_:using:)()
{
  return static AES.GCM.open(_:using:)();
}

uint64_t static AES.GCM.seal<A>(_:using:nonce:)()
{
  return static AES.GCM.seal<A>(_:using:nonce:)();
}

uint64_t type metadata accessor for AES.GCM.Nonce()
{
  return type metadata accessor for AES.GCM.Nonce();
}

uint64_t AES.GCM.SealedBox.combined.getter()
{
  return AES.GCM.SealedBox.combined.getter();
}

uint64_t AES.GCM.SealedBox.init(combined:)()
{
  return AES.GCM.SealedBox.init(combined:)();
}

uint64_t type metadata accessor for AES.GCM.SealedBox()
{
  return type metadata accessor for AES.GCM.SealedBox();
}

uint64_t static HKDF.deriveKey<A, B>(inputKeyMaterial:salt:info:outputByteCount:)()
{
  return static HKDF.deriveKey<A, B>(inputKeyMaterial:salt:info:outputByteCount:)();
}

uint64_t static HMAC.authenticationCode<A>(for:using:)()
{
  return static HMAC.authenticationCode<A>(for:using:)();
}

uint64_t static HMAC.isValidAuthenticationCode<A, B>(_:authenticating:using:)()
{
  return static HMAC.isValidAuthenticationCode<A, B>(_:authenticating:using:)();
}

uint64_t P256.KeyAgreement.PublicKey.rawRepresentation.getter()
{
  return P256.KeyAgreement.PublicKey.rawRepresentation.getter();
}

uint64_t P256.KeyAgreement.PublicKey.init<A>(rawRepresentation:)()
{
  return P256.KeyAgreement.PublicKey.init<A>(rawRepresentation:)();
}

uint64_t type metadata accessor for P256.KeyAgreement.PublicKey()
{
  return type metadata accessor for P256.KeyAgreement.PublicKey();
}

uint64_t P256.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)()
{
  return P256.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)();
}

uint64_t P256.KeyAgreement.PrivateKey.publicKey.getter()
{
  return P256.KeyAgreement.PrivateKey.publicKey.getter();
}

uint64_t P256.KeyAgreement.PrivateKey.rawRepresentation.getter()
{
  return P256.KeyAgreement.PrivateKey.rawRepresentation.getter();
}

uint64_t P256.KeyAgreement.PrivateKey.init()()
{
  return P256.KeyAgreement.PrivateKey.init()();
}

uint64_t type metadata accessor for P256.KeyAgreement.PrivateKey()
{
  return type metadata accessor for P256.KeyAgreement.PrivateKey();
}

uint64_t P256.Signing.PrivateKey.publicKey.getter()
{
  return P256.Signing.PrivateKey.publicKey.getter();
}

uint64_t P256.Signing.PrivateKey.init(compactRepresentable:)()
{
  return P256.Signing.PrivateKey.init(compactRepresentable:)();
}

uint64_t P256.Signing.PrivateKey.signature<A>(for:)()
{
  return P256.Signing.PrivateKey.signature<A>(for:)();
}

uint64_t type metadata accessor for P256.Signing.PrivateKey()
{
  return type metadata accessor for P256.Signing.PrivateKey();
}

uint64_t P256.Signing.ECDSASignature.rawRepresentation.getter()
{
  return P256.Signing.ECDSASignature.rawRepresentation.getter();
}

uint64_t P256.Signing.ECDSASignature.init<A>(rawRepresentation:)()
{
  return P256.Signing.ECDSASignature.init<A>(rawRepresentation:)();
}

uint64_t type metadata accessor for P256.Signing.ECDSASignature()
{
  return type metadata accessor for P256.Signing.ECDSASignature();
}

uint64_t P256.Signing.PublicKey.isValidSignature<A>(_:for:)()
{
  return P256.Signing.PublicKey.isValidSignature<A>(_:for:)();
}

uint64_t type metadata accessor for P256.Signing.PublicKey()
{
  return type metadata accessor for P256.Signing.PublicKey();
}

uint64_t SHA256.finalize()()
{
  return SHA256.finalize()();
}

uint64_t SHA256.init()()
{
  return SHA256.init()();
}

uint64_t type metadata accessor for SHA256()
{
  return type metadata accessor for SHA256();
}

uint64_t type metadata accessor for SHA384()
{
  return type metadata accessor for SHA384();
}

uint64_t Dictionary.init()()
{
  return Dictionary.init()();
}

uint64_t Array.init()()
{
  return Array.init()();
}

uint64_t Set.init()()
{
  return Set.init()();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Dictionary.description.getter()
{
  return Dictionary.description.getter();
}

uint64_t Dictionary.removeValue(forKey:)()
{
  return Dictionary.removeValue(forKey:)();
}

Swift::Void __swiftcall Dictionary.reserveCapacity(_:)(Swift::Int a1)
{
}

uint64_t Dictionary.compactMapValues<A>(_:)()
{
  return Dictionary.compactMapValues<A>(_:)();
}

uint64_t Dictionary.Keys.isEmpty.getter()
{
  return Dictionary.Keys.isEmpty.getter();
}

uint64_t type metadata accessor for Dictionary.Keys()
{
  return type metadata accessor for Dictionary.Keys();
}

uint64_t Dictionary.count.getter()
{
  return Dictionary.count.getter();
}

uint64_t type metadata accessor for Dictionary.Values()
{
  return type metadata accessor for Dictionary.Values();
}

uint64_t Dictionary.filter(_:)()
{
  return Dictionary.filter(_:)();
}

uint64_t Dictionary.remove(at:)()
{
  return Dictionary.remove(at:)();
}

uint64_t Dictionary.isEmpty.getter()
{
  return Dictionary.isEmpty.getter();
}

uint64_t type metadata accessor for Dictionary._Variant()
{
  return type metadata accessor for Dictionary._Variant();
}

uint64_t Dictionary._Variant.subscript.modify()
{
  return Dictionary._Variant.subscript.modify();
}

Swift::Void __swiftcall Dictionary.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
}

uint64_t type metadata accessor for Dictionary()
{
  return type metadata accessor for Dictionary();
}

uint64_t Dictionary.subscript.modify()
{
  return Dictionary.subscript.modify();
}

uint64_t Dictionary.subscript.getter()
{
  return Dictionary.subscript.getter();
}

{
  return Dictionary.subscript.getter();
}

uint64_t Dictionary.subscript.setter()
{
  return Dictionary.subscript.setter();
}

uint64_t dispatch thunk of Encodable.encode(to:)()
{
  return dispatch thunk of Encodable.encode(to:)();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t Character.asciiValue.getter()
{
  return Character.asciiValue.getter();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t dispatch thunk of static Comparable.> infix(_:_:)()
{
  return dispatch thunk of static Comparable.> infix(_:_:)();
}

uint64_t dispatch thunk of static Comparable.< infix(_:_:)()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

uint64_t dispatch thunk of static Comparable.>= infix(_:_:)()
{
  return dispatch thunk of static Comparable.>= infix(_:_:)();
}

uint64_t dispatch thunk of static Comparable.<= infix(_:_:)()
{
  return dispatch thunk of static Comparable.<= infix(_:_:)();
}

uint64_t type metadata accessor for ClosedRange()
{
  return type metadata accessor for ClosedRange();
}

uint64_t ClosedRange<>.startIndex.getter()
{
  return ClosedRange<>.startIndex.getter();
}

uint64_t static ClosedRange<>.Index.== infix(_:_:)()
{
  return static ClosedRange<>.Index.== infix(_:_:)();
}

uint64_t type metadata accessor for ClosedRange<>.Index()
{
  return type metadata accessor for ClosedRange<>.Index();
}

uint64_t ClosedRange<>.index(after:)()
{
  return ClosedRange<>.index(after:)();
}

uint64_t ClosedRange<>.endIndex.getter()
{
  return ClosedRange<>.endIndex.getter();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return static String._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static String._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.init(data:encoding:)()
{
  return String.init(data:encoding:)();
}

uint64_t String.init<A>(bytes:encoding:)()
{
  return String.init<A>(bytes:encoding:)();
}

uint64_t String.init(format:_:)()
{
  return String.init(format:_:)();
}

uint64_t String.init(cString:encoding:)()
{
  return String.init(cString:encoding:)();
}

uint64_t static String.Encoding.utf8.getter()
{
  return static String.Encoding.utf8.getter();
}

uint64_t type metadata accessor for String.Encoding()
{
  return type metadata accessor for String.Encoding();
}

uint64_t String.init<A>(describing:)()
{
  return String.init<A>(describing:)();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0 = String.lowercased()();
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

Swift::String __swiftcall String.uppercased()()
{
  uint64_t v0 = String.uppercased()();
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t String.utf8CString.getter()
{
  return String.utf8CString.getter();
}

uint64_t static String._fromSubstring(_:)()
{
  return static String._fromSubstring(_:)();
}

uint64_t static String._uncheckedFromUTF8(_:)()
{
  return static String._uncheckedFromUTF8(_:)();
}

uint64_t String.init(from:)()
{
  return String.init(from:)();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

uint64_t String.count.getter()
{
  return String.count.getter();
}

uint64_t String.index(after:)()
{
  return String.index(after:)();
}

uint64_t String.index(before:)()
{
  return String.index(before:)();
}

uint64_t String.index(_:offsetBy:limitedBy:)()
{
  return String.index(_:offsetBy:limitedBy:)();
}

uint64_t String.index(_:offsetBy:)()
{
  return String.index(_:offsetBy:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

uint64_t String.encode(to:)()
{
  return String.encode(to:)();
}

uint64_t String.init(cString:)()
{
  return String.init(cString:)();
}

{
  return String.init(cString:)();
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return String.UTF8View._foreignIndex(after:)();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return String.UTF8View._foreignIndex(_:offsetBy:)();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return String.UTF8View._foreignSubscript(position:)();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return String.UTF16View.index(_:offsetBy:)();
}

Swift::Bool __swiftcall String.hasPrefix(_:)(Swift::String a1)
{
  return String.hasPrefix(_:)(a1._countAndFlagsBits, a1._object);
}

Swift::Bool __swiftcall String.hasSuffix(_:)(Swift::String a1)
{
  return String.hasSuffix(_:)(a1._countAndFlagsBits, a1._object);
}

uint64_t String.subscript.getter()
{
  return String.subscript.getter();
}

{
  return String.subscript.getter();
}

uint64_t String.init<A>(_:)()
{
  return String.init<A>(_:)();
}

uint64_t Sequence.compactMap<A>(_:)()
{
  return Sequence.compactMap<A>(_:)();
}

uint64_t Sequence.withContiguousStorageIfAvailable<A>(_:)()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t Sequence.min(by:)()
{
  return Sequence.min(by:)();
}

uint64_t Sequence.first(where:)()
{
  return Sequence.first(where:)();
}

uint64_t Sequence.filter(_:)()
{
  return Sequence.filter(_:)();
}

uint64_t Sequence.reduce<A>(into:_:)()
{
  return Sequence.reduce<A>(into:_:)();
}

uint64_t Sequence.reduce<A>(_:_:)()
{
  return Sequence.reduce<A>(_:_:)();
}

uint64_t Sequence.flatMap<A>(_:)()
{
  return Sequence.flatMap<A>(_:)();
}

uint64_t Sequence.forEach(_:)()
{
  return Sequence.forEach(_:)();
}

uint64_t Sequence.contains(where:)()
{
  return Sequence.contains(where:)();
}

uint64_t Sequence<>.contains(_:)()
{
  return Sequence<>.contains(_:)();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t dispatch thunk of RawRepresentable.init(rawValue:)()
{
  return dispatch thunk of RawRepresentable.init(rawValue:)();
}

uint64_t RawRepresentable<>.encode(to:)()
{
  return RawRepresentable<>.encode(to:)();
}

{
  return RawRepresentable<>.encode(to:)();
}

{
  return RawRepresentable<>.encode(to:)();
}

{
  return RawRepresentable<>.encode(to:)();
}

{
  return RawRepresentable<>.encode(to:)();
}

uint64_t RawRepresentable<>.init(from:)()
{
  return RawRepresentable<>.init(from:)();
}

{
  return RawRepresentable<>.init(from:)();
}

{
  return RawRepresentable<>.init(from:)();
}

{
  return RawRepresentable<>.init(from:)();
}

{
  return RawRepresentable<>.init(from:)();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t static Array._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static Array._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Array.description.getter()
{
  return Array.description.getter();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t static Array.+ infix(_:_:)()
{
  return static Array.+ infix(_:_:)();
}

uint64_t static Array._allocateUninitialized(_:)()
{
  return static Array._allocateUninitialized(_:)();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t Array.count.getter()
{
  return Array.count.getter();
}

uint64_t Array.append(_:)()
{
  return Array.append(_:)();
}

Swift::Void __swiftcall Array.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
}

uint64_t type metadata accessor for Array()
{
  return type metadata accessor for Array();
}

uint64_t Array<A>.encode(to:)()
{
  return Array<A>.encode(to:)();
}

uint64_t Array.init<A>(_:)()
{
  return Array.init<A>(_:)();
}

uint64_t Bool.encode(to:)()
{
  return Bool.encode(to:)();
}

NSNumber __swiftcall Double._bridgeToObjectiveC()()
{
  return (NSNumber)Double._bridgeToObjectiveC()();
}

uint64_t Double.write<A>(to:)()
{
  return Double.write<A>(to:)();
}

uint64_t dispatch thunk of Decodable.init(from:)()
{
  return dispatch thunk of Decodable.init(from:)();
}

uint64_t Float.init(from:)()
{
  return Float.init(from:)();
}

uint64_t Float.encode(to:)()
{
  return Float.encode(to:)();
}

uint64_t Set.init(minimumCapacity:)()
{
  return Set.init(minimumCapacity:)();
}

uint64_t Set.count.getter()
{
  return Set.count.getter();
}

uint64_t Set.insert(_:)()
{
  return Set.insert(_:)();
}

uint64_t Set.remove(_:)()
{
  return Set.remove(_:)();
}

uint64_t Set.contains(_:)()
{
  return Set.contains(_:)();
}

uint64_t Set.popFirst()()
{
  return Set.popFirst()();
}

uint64_t type metadata accessor for Set()
{
  return type metadata accessor for Set();
}

uint64_t Set.init<A>(_:)()
{
  return Set.init<A>(_:)();
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  return (NSNumber)Int._bridgeToObjectiveC()();
}

uint64_t dispatch thunk of Collection.startIndex.getter()
{
  return dispatch thunk of Collection.startIndex.getter();
}

uint64_t dispatch thunk of Collection.count.getter()
{
  return dispatch thunk of Collection.count.getter();
}

uint64_t dispatch thunk of Collection.formIndex(after:)()
{
  return dispatch thunk of Collection.formIndex(after:)();
}

uint64_t Collection.firstIndex(where:)()
{
  return Collection.firstIndex(where:)();
}

uint64_t Collection.count.getter()
{
  return Collection.count.getter();
}

uint64_t Collection.first.getter()
{
  return Collection.first.getter();
}

uint64_t Collection.isEmpty.getter()
{
  return Collection.isEmpty.getter();
}

uint64_t dispatch thunk of Collection.subscript.read()
{
  return dispatch thunk of Collection.subscript.read();
}

uint64_t RangeReplaceableCollection<>.popLast()()
{
  return RangeReplaceableCollection<>.popLast()();
}

uint64_t static os_log_type_t.info.getter()
{
  return static os_log_type_t.info.getter();
}

uint64_t static os_log_type_t.debug.getter()
{
  return static os_log_type_t.debug.getter();
}

uint64_t static os_log_type_t.error.getter()
{
  return static os_log_type_t.error.getter();
}

uint64_t static os_log_type_t.fault.getter()
{
  return static os_log_type_t.fault.getter();
}

uint64_t static os_log_type_t.default.getter()
{
  return static os_log_type_t.default.getter();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return type metadata accessor for OS_dispatch_queue.Attributes();
}

uint64_t OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)()
{
  return OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
}

uint64_t OS_dispatch_queue.asyncAndWait(execute:)()
{
  return OS_dispatch_queue.asyncAndWait(execute:)();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return static OS_dispatch_queue.main.getter();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t type metadata accessor for OS_dispatch_source.TimerFlags()
{
  return type metadata accessor for OS_dispatch_source.TimerFlags();
}

uint64_t static OS_dispatch_source.makeTimerSource(flags:queue:)()
{
  return static OS_dispatch_source.makeTimerSource(flags:queue:)();
}

uint64_t static OS_dispatch_source.makeSignalSource(signal:queue:)()
{
  return static OS_dispatch_source.makeSignalSource(signal:queue:)();
}

uint64_t OS_dispatch_source.setEventHandler(qos:flags:handler:)()
{
  return OS_dispatch_source.setEventHandler(qos:flags:handler:)();
}

Swift::Void __swiftcall OS_dispatch_source.cancel()()
{
}

Swift::Void __swiftcall OS_dispatch_source.activate()()
{
}

uint64_t OS_dispatch_semaphore.wait(timeout:)()
{
  return OS_dispatch_semaphore.wait(timeout:)();
}

Swift::Int __swiftcall OS_dispatch_semaphore.signal()()
{
  return OS_dispatch_semaphore.signal()();
}

uint64_t OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)()
{
  return OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)();
}

NSNumber __swiftcall NSNumber.init(integerLiteral:)(Swift::Int integerLiteral)
{
  return (NSNumber)NSNumber.init(integerLiteral:)(integerLiteral);
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return NSObject._rawHashValue(seed:)(seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t NSObject.hash(into:)()
{
  return NSObject.hash(into:)();
}

uint64_t type metadata accessor for Optional()
{
  return type metadata accessor for Optional();
}

uint64_t Optional<A>.encode(to:)()
{
  return Optional<A>.encode(to:)();
}

uint64_t UnsafeMutableBufferPointer.baseAddress.getter()
{
  return UnsafeMutableBufferPointer.baseAddress.getter();
}

uint64_t dispatch thunk of IteratorProtocol.next()()
{
  return dispatch thunk of IteratorProtocol.next()();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t UnsafeMutableRawBufferPointer.load<A>(fromByteOffset:as:)()
{
  return UnsafeMutableRawBufferPointer.load<A>(fromByteOffset:as:)();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t StringProtocol.components<A>(separatedBy:)()
{
  return StringProtocol.components<A>(separatedBy:)();
}

uint64_t StringProtocol.addingPercentEncoding(withAllowedCharacters:)()
{
  return StringProtocol.addingPercentEncoding(withAllowedCharacters:)();
}

uint64_t StringProtocol.caseInsensitiveCompare<A>(_:)()
{
  return StringProtocol.caseInsensitiveCompare<A>(_:)();
}

uint64_t StringProtocol.localizedCaseInsensitiveContains<A>(_:)()
{
  return StringProtocol.localizedCaseInsensitiveContains<A>(_:)();
}

uint64_t StringProtocol.contains<A>(_:)()
{
  return StringProtocol.contains<A>(_:)();
}

uint64_t dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)()
{
  return dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
}

uint64_t dispatch thunk of static BinaryInteger.& infix(_:_:)()
{
  return dispatch thunk of static BinaryInteger.& infix(_:_:)();
}

uint64_t dispatch thunk of static BinaryInteger.~ prefix(_:)()
{
  return dispatch thunk of static BinaryInteger.~ prefix(_:)();
}

uint64_t dispatch thunk of static BinaryInteger.&= infix(_:_:)()
{
  return dispatch thunk of static BinaryInteger.&= infix(_:_:)();
}

uint64_t dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)()
{
  return dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)();
}

uint64_t dispatch thunk of static BinaryInteger.|= infix(_:_:)()
{
  return dispatch thunk of static BinaryInteger.|= infix(_:_:)();
}

uint64_t dispatch thunk of BinaryInteger._lowWord.getter()
{
  return dispatch thunk of BinaryInteger._lowWord.getter();
}

uint64_t dispatch thunk of BinaryInteger.bitWidth.getter()
{
  return dispatch thunk of BinaryInteger.bitWidth.getter();
}

uint64_t dispatch thunk of static BinaryInteger.isSigned.getter()
{
  return dispatch thunk of static BinaryInteger.isSigned.getter();
}

uint64_t BinaryInteger.description.getter()
{
  return BinaryInteger.description.getter();
}

uint64_t dispatch thunk of BinaryInteger.init<A>(_:)()
{
  return dispatch thunk of BinaryInteger.init<A>(_:)();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t dispatch thunk of AnyKeyPath._storedInlineOffset.getter()
{
  return dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
}

uint64_t SetAlgebra.isDisjoint(with:)()
{
  return SetAlgebra.isDisjoint(with:)();
}

uint64_t SetAlgebra.isSuperset(of:)()
{
  return SetAlgebra.isSuperset(of:)();
}

uint64_t SetAlgebra.subtracting(_:)()
{
  return SetAlgebra.subtracting(_:)();
}

uint64_t SetAlgebra.isEmpty.getter()
{
  return SetAlgebra.isEmpty.getter();
}

uint64_t SetAlgebra.isSubset(of:)()
{
  return SetAlgebra.isSubset(of:)();
}

uint64_t SetAlgebra.subtract(_:)()
{
  return SetAlgebra.subtract(_:)();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t _HashTable.previousHole(before:)()
{
  return _HashTable.previousHole(before:)();
}

uint64_t _HashTable.occupiedBucket(after:)()
{
  return _HashTable.occupiedBucket(after:)();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return _HashTable.nextHole(atOrAfter:)();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return AnyHashable._rawHashValue(seed:)(seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return static AnyHashable.== infix(_:_:)();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t static _SetStorage.copy(original:)()
{
  return static _SetStorage.copy(original:)();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return static _SetStorage.allocate(capacity:)();
}

uint64_t _StringGuts._slowWithCString<A>(_:)()
{
  return _StringGuts._slowWithCString<A>(_:)();
}

uint64_t _StringGuts.foreignErrorCorrectedScalar(startingAt:)()
{
  return _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t dispatch thunk of Identifiable.id.getter()
{
  return dispatch thunk of Identifiable.id.getter();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t static DecodingError.dataCorruptedError(in:debugDescription:)()
{
  return static DecodingError.dataCorruptedError(in:debugDescription:)();
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
}

uint64_t type metadata accessor for DecodingError()
{
  return type metadata accessor for DecodingError();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t _decodeScalar(_:startingAt:)()
{
  return _decodeScalar(_:startingAt:)();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return specialized ContiguousArray._endMutation()();
}

Swift::Void __swiftcall ContiguousArray.reserveCapacity(_:)(Swift::Int a1)
{
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t ContiguousArray.append(_:)()
{
  return ContiguousArray.append(_:)();
}

uint64_t ContiguousArray.init()()
{
  return ContiguousArray.init()();
}

uint64_t type metadata accessor for ContiguousArray()
{
  return type metadata accessor for ContiguousArray();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return _print_unlocked<A, B>(_:_:)();
}

uint64_t type metadata accessor for IndexingIterator()
{
  return type metadata accessor for IndexingIterator();
}

uint64_t CodingUserInfoKey.init(rawValue:)()
{
  return CodingUserInfoKey.init(rawValue:)();
}

uint64_t type metadata accessor for CodingUserInfoKey()
{
  return type metadata accessor for CodingUserInfoKey();
}

uint64_t dispatch thunk of static FixedWidthInteger.bitWidth.getter()
{
  return dispatch thunk of static FixedWidthInteger.bitWidth.getter();
}

uint64_t dispatch thunk of FixedWidthInteger.littleEndian.getter()
{
  return dispatch thunk of FixedWidthInteger.littleEndian.getter();
}

uint64_t dispatch thunk of FixedWidthInteger.init(littleEndian:)()
{
  return dispatch thunk of FixedWidthInteger.init(littleEndian:)();
}

uint64_t dispatch thunk of static FixedWidthInteger.max.getter()
{
  return dispatch thunk of static FixedWidthInteger.max.getter();
}

uint64_t dispatch thunk of static FixedWidthInteger.min.getter()
{
  return dispatch thunk of static FixedWidthInteger.min.getter();
}

uint64_t static FixedWidthInteger.random(in:)()
{
  return static FixedWidthInteger.random(in:)();
}

Swift::Bool __swiftcall _NativeDictionary.ensureUnique(isUnique:capacity:)(Swift::Bool isUnique, Swift::Int capacity)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, capacity);
}

Swift::Void __swiftcall _NativeDictionary.copy()()
{
}

uint64_t _NativeDictionary._insert(at:key:value:)()
{
  return _NativeDictionary._insert(at:key:value:)();
}

uint64_t type metadata accessor for _NativeDictionary()
{
  return type metadata accessor for _NativeDictionary();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t _bridgeCocoaArray<A>(_:)()
{
  return _bridgeCocoaArray<A>(_:)();
}

uint64_t dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)()
{
  return dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
}

uint64_t dispatch thunk of static AdditiveArithmetic.- infix(_:_:)()
{
  return dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
}

uint64_t dispatch thunk of static AdditiveArithmetic.zero.getter()
{
  return dispatch thunk of static AdditiveArithmetic.zero.getter();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return _findStringSwitchCase(cases:string:)(cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t KeyedDecodingContainer.codingPath.getter()
{
  return KeyedDecodingContainer.codingPath.getter();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t KeyedDecodingContainer.allKeys.getter()
{
  return KeyedDecodingContainer.allKeys.getter();
}

uint64_t type metadata accessor for KeyedDecodingContainer()
{
  return type metadata accessor for KeyedDecodingContainer();
}

uint64_t KeyedDecodingContainer.init<A>(_:)()
{
  return KeyedDecodingContainer.init<A>(_:)();
}

uint64_t KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t type metadata accessor for KeyedEncodingContainer()
{
  return type metadata accessor for KeyedEncodingContainer();
}

uint64_t KeyedEncodingContainer.init<A>(_:)()
{
  return KeyedEncodingContainer.init<A>(_:)();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return _minimumMergeRunLength(_:)(a1);
}

uint64_t _stringCompareInternal(_:_:_:_:expecting:)()
{
  return _stringCompareInternal(_:_:_:_:expecting:)();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t type metadata accessor for ReferenceWritableKeyPath()
{
  return type metadata accessor for ReferenceWritableKeyPath();
}

uint64_t dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)()
{
  return dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
}

uint64_t dispatch thunk of UnkeyedDecodingContainer.decode(_:)()
{
  return dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
}

{
  return dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
}

{
  return dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
}

{
  return dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
}

{
  return dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
}

uint64_t UnkeyedDecodingContainer.decodeIfPresent(_:)()
{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)();
}

{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)();
}

{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)();
}

{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)();
}

{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)();
}

{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)();
}

{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)();
}

uint64_t UnkeyedDecodingContainer.decodeIfPresent<A>(_:)()
{
  return UnkeyedDecodingContainer.decodeIfPresent<A>(_:)();
}

uint64_t dispatch thunk of UnkeyedEncodingContainer.encode(_:)()
{
  return dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
}

{
  return dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
}

{
  return dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
}

{
  return dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
}

{
  return dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
}

{
  return dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
}

{
  return dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
}

uint64_t dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)()
{
  return dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
}

uint64_t UnkeyedEncodingContainer.encodeConditional<A>(_:)()
{
  return UnkeyedEncodingContainer.encodeConditional<A>(_:)();
}

uint64_t UnkeyedEncodingContainer.encode<A>(contentsOf:)()
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

uint64_t DefaultStringInterpolation.appendInterpolation<A>(_:)()
{
  return DefaultStringInterpolation.appendInterpolation<A>(_:)();
}

{
  return DefaultStringInterpolation.appendInterpolation<A>(_:)();
}

uint64_t dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)()
{
  return dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return _bridgeAnythingToObjectiveC<A>(_:)();
}

uint64_t _diagnoseUnexpectedEnumCase<A>(type:)()
{
  return _diagnoseUnexpectedEnumCase<A>(type:)();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t dispatch thunk of CustomDebugStringConvertible.debugDescription.getter()
{
  return dispatch thunk of CustomDebugStringConvertible.debugDescription.getter();
}

uint64_t dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)()
{
  return dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
}

uint64_t dispatch thunk of SingleValueDecodingContainer.decode(_:)()
{
  return dispatch thunk of SingleValueDecodingContainer.decode(_:)();
}

{
  return dispatch thunk of SingleValueDecodingContainer.decode(_:)();
}

{
  return dispatch thunk of SingleValueDecodingContainer.decode(_:)();
}

uint64_t SingleValueDecodingContainer<>.decode(_:)()
{
  return SingleValueDecodingContainer<>.decode(_:)();
}

{
  return SingleValueDecodingContainer<>.decode(_:)();
}

uint64_t dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)()
{
  return dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
}

uint64_t dispatch thunk of SingleValueEncodingContainer.encode(_:)()
{
  return dispatch thunk of SingleValueEncodingContainer.encode(_:)();
}

{
  return dispatch thunk of SingleValueEncodingContainer.encode(_:)();
}

uint64_t SingleValueEncodingContainer<>.encode(_:)()
{
  return SingleValueEncodingContainer<>.encode(_:)();
}

{
  return SingleValueEncodingContainer<>.encode(_:)();
}

uint64_t dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter()
{
  return dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
}

uint64_t type metadata accessor for __ContiguousArrayStorageBase()
{
  return type metadata accessor for __ContiguousArrayStorageBase();
}

uint64_t KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)()
{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
}

uint64_t KeyedDecodingContainerProtocol.decodeIfPresent<A>(_:forKey:)()
{
  return KeyedDecodingContainerProtocol.decodeIfPresent<A>(_:forKey:)();
}

uint64_t KeyedDecodingContainerProtocol.decode(_:forKey:)()
{
  return KeyedDecodingContainerProtocol.decode(_:forKey:)();
}

{
  return KeyedDecodingContainerProtocol.decode(_:forKey:)();
}

uint64_t KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

uint64_t KeyedEncodingContainerProtocol.encodeIfPresent<A>(_:forKey:)()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent<A>(_:forKey:)();
}

uint64_t KeyedEncodingContainerProtocol.encodeConditional<A>(_:forKey:)()
{
  return KeyedEncodingContainerProtocol.encodeConditional<A>(_:forKey:)();
}

uint64_t KeyedEncodingContainerProtocol.encode(_:forKey:)()
{
  return KeyedEncodingContainerProtocol.encode(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encode(_:forKey:)();
}

uint64_t _findStringSwitchCaseWithCache(cases:string:cache:)()
{
  return _findStringSwitchCaseWithCache(cases:string:cache:)();
}

uint64_t dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)()
{
  return dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t Error.localizedDescription.getter()
{
  return Error.localizedDescription.getter();
}

uint64_t Error._getEmbeddedNSError()()
{
  return Error._getEmbeddedNSError()();
}

uint64_t Error._code.getter()
{
  return Error._code.getter();
}

uint64_t Error._domain.getter()
{
  return Error._domain.getter();
}

uint64_t Error._userInfo.getter()
{
  return Error._userInfo.getter();
}

NSNumber __swiftcall Int32._bridgeToObjectiveC()()
{
  return (NSNumber)Int32._bridgeToObjectiveC()();
}

uint64_t Slice<>.withUnsafeBytes<A>(_:)()
{
  return Slice<>.withUnsafeBytes<A>(_:)();
}

NSNumber __swiftcall UInt8._bridgeToObjectiveC()()
{
  return (NSNumber)UInt8._bridgeToObjectiveC()();
}

uint64_t UInt8.init(from:)()
{
  return UInt8.init(from:)();
}

uint64_t print(_:separator:terminator:)()
{
  return print(_:separator:terminator:)();
}

uint64_t static Hasher._hash(seed:bytes:count:)()
{
  return static Hasher._hash(seed:bytes:count:)();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return static Hasher._hash(seed:_:)();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt16 a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt32 a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt64 a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t Mirror.init(reflecting:)()
{
  return Mirror.init(reflecting:)();
}

uint64_t Mirror.description.getter()
{
  return Mirror.description.getter();
}

uint64_t type metadata accessor for Mirror.DisplayStyle()
{
  return type metadata accessor for Mirror.DisplayStyle();
}

uint64_t type metadata accessor for Mirror.AncestorRepresentation()
{
  return type metadata accessor for Mirror.AncestorRepresentation();
}

uint64_t type metadata accessor for Mirror()
{
  return type metadata accessor for Mirror();
}

uint64_t Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)()
{
  return Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)();
}

uint64_t Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)()
{
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)()
{
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t type metadata accessor for Result()
{
  return type metadata accessor for Result();
}

NSNumber __swiftcall UInt32._bridgeToObjectiveC()()
{
  return (NSNumber)UInt32._bridgeToObjectiveC()();
}

NSNumber __swiftcall UInt64._bridgeToObjectiveC()()
{
  return (NSNumber)UInt64._bridgeToObjectiveC()();
}

uint64_t dispatch thunk of Decoder.codingPath.getter()
{
  return dispatch thunk of Decoder.codingPath.getter();
}

uint64_t dispatch thunk of Decoder.unkeyedContainer()()
{
  return dispatch thunk of Decoder.unkeyedContainer()();
}

uint64_t dispatch thunk of Decoder.singleValueContainer()()
{
  return dispatch thunk of Decoder.singleValueContainer()();
}

uint64_t dispatch thunk of Decoder.userInfo.getter()
{
  return dispatch thunk of Decoder.userInfo.getter();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t dispatch thunk of Encoder.unkeyedContainer()()
{
  return dispatch thunk of Encoder.unkeyedContainer()();
}

uint64_t dispatch thunk of Encoder.singleValueContainer()()
{
  return dispatch thunk of Encoder.singleValueContainer()();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t static Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.hide.getter()
{
  return static Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.hide.getter();
}

uint64_t type metadata accessor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy()
{
  return type metadata accessor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy();
}

uint64_t static Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.hide.getter()
{
  return static Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.hide.getter();
}

uint64_t type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy()
{
  return type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy();
}

uint64_t static Duration.UnitsFormatStyle.Unit.nanoseconds.getter()
{
  return static Duration.UnitsFormatStyle.Unit.nanoseconds.getter();
}

uint64_t static Duration.UnitsFormatStyle.Unit.microseconds.getter()
{
  return static Duration.UnitsFormatStyle.Unit.microseconds.getter();
}

uint64_t static Duration.UnitsFormatStyle.Unit.milliseconds.getter()
{
  return static Duration.UnitsFormatStyle.Unit.milliseconds.getter();
}

uint64_t static Duration.UnitsFormatStyle.Unit.days.getter()
{
  return static Duration.UnitsFormatStyle.Unit.days.getter();
}

uint64_t static Duration.UnitsFormatStyle.Unit.hours.getter()
{
  return static Duration.UnitsFormatStyle.Unit.hours.getter();
}

uint64_t static Duration.UnitsFormatStyle.Unit.minutes.getter()
{
  return static Duration.UnitsFormatStyle.Unit.minutes.getter();
}

uint64_t static Duration.UnitsFormatStyle.Unit.seconds.getter()
{
  return static Duration.UnitsFormatStyle.Unit.seconds.getter();
}

uint64_t type metadata accessor for Duration.UnitsFormatStyle.Unit()
{
  return type metadata accessor for Duration.UnitsFormatStyle.Unit();
}

uint64_t static Duration.UnitsFormatStyle.UnitWidth.wide.getter()
{
  return static Duration.UnitsFormatStyle.UnitWidth.wide.getter();
}

uint64_t type metadata accessor for Duration.UnitsFormatStyle.UnitWidth()
{
  return type metadata accessor for Duration.UnitsFormatStyle.UnitWidth();
}

uint64_t type metadata accessor for Duration.UnitsFormatStyle()
{
  return type metadata accessor for Duration.UnitsFormatStyle();
}

uint64_t Duration.formatted<A>(_:)()
{
  return Duration.formatted<A>(_:)();
}

uint64_t static Duration.seconds(_:)()
{
  return static Duration.seconds(_:)();
}

uint64_t dispatch thunk of OptionSet.init(rawValue:)()
{
  return dispatch thunk of OptionSet.init(rawValue:)();
}

uint64_t OptionSet<>.insert(_:)()
{
  return OptionSet<>.insert(_:)();
}

uint64_t OptionSet<>.update(with:)()
{
  return OptionSet<>.update(with:)();
}

uint64_t OptionSet.intersection(_:)()
{
  return OptionSet.intersection(_:)();
}

uint64_t _typeName(_:qualified:)()
{
  return _typeName(_:qualified:)();
}

uint64_t AnalyticsIsEventUsed()
{
  return _AnalyticsIsEventUsed();
}

uint64_t AnalyticsSendEvent()
{
  return _AnalyticsSendEvent();
}

uint64_t Apple80211BindToInterfaceWithService()
{
  return _Apple80211BindToInterfaceWithService();
}

uint64_t Apple80211Close()
{
  return _Apple80211Close();
}

uint64_t Apple80211EventMonitoringHalt()
{
  return _Apple80211EventMonitoringHalt();
}

uint64_t Apple80211Open()
{
  return _Apple80211Open();
}

uint64_t Apple80211RawGet()
{
  return _Apple80211RawGet();
}

uint64_t Apple80211RawSet()
{
  return _Apple80211RawSet();
}

uint64_t Apple80211StartMonitoringEvent()
{
  return _Apple80211StartMonitoringEvent();
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return _CFEqual(cf1, cf2);
}

IOReturn IOAllowPowerChange(io_connect_t kernelPort, intptr_t notificationID)
{
  return _IOAllowPowerChange(kernelPort, notificationID);
}

IOReturn IODeregisterForSystemPower(io_object_t *notifier)
{
  return _IODeregisterForSystemPower(notifier);
}

io_object_t IOIteratorNext(io_iterator_t iterator)
{
  return _IOIteratorNext(iterator);
}

IONotificationPortRef IONotificationPortCreate(mach_port_t mainPort)
{
  return _IONotificationPortCreate(mainPort);
}

void IONotificationPortDestroy(IONotificationPortRef notify)
{
}

void IONotificationPortSetDispatchQueue(IONotificationPortRef notify, dispatch_queue_t queue)
{
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return _IOObjectRelease(object);
}

kern_return_t IOObjectRetain(io_object_t object)
{
  return _IOObjectRetain(object);
}

io_connect_t IORegisterForSystemPower(void *refcon, IONotificationPortRef *thePortRef, IOServiceInterestCallback callback, io_object_t *notifier)
{
  return _IORegisterForSystemPower(refcon, thePortRef, callback, notifier);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return _IORegistryEntryCreateCFProperty(entry, key, allocator, options);
}

kern_return_t IOServiceAddMatchingNotification(IONotificationPortRef notifyPort, const io_name_t notificationType, CFDictionaryRef matching, IOServiceMatchingCallback callback, void *refCon, io_iterator_t *notification)
{
  return _IOServiceAddMatchingNotification(notifyPort, notificationType, matching, callback, refCon, notification);
}

uint64_t MKBDeviceUnlockedSinceBoot()
{
  return _MKBDeviceUnlockedSinceBoot();
}

uint64_t MobileGestalt_copy_userAssignedDeviceName_obj()
{
  return _MobileGestalt_copy_userAssignedDeviceName_obj();
}

uint64_t MobileGestalt_get_current_device()
{
  return _MobileGestalt_get_current_device();
}

uint64_t MobileGestalt_get_iPadCapability()
{
  return _MobileGestalt_get_iPadCapability();
}

int SCError(void)
{
  return _SCError();
}

const char *__cdecl SCErrorString(int status)
{
  return _SCErrorString(status);
}

CFStringRef SCNetworkInterfaceGetBSDName(SCNetworkInterfaceRef interface)
{
  return _SCNetworkInterfaceGetBSDName(interface);
}

SCNetworkInterfaceRef SCNetworkInterfaceGetInterface(SCNetworkInterfaceRef interface)
{
  return _SCNetworkInterfaceGetInterface(interface);
}

CFDictionaryRef SCNetworkProtocolGetConfiguration(SCNetworkProtocolRef protocol)
{
  return _SCNetworkProtocolGetConfiguration(protocol);
}

Boolean SCNetworkProtocolSetConfiguration(SCNetworkProtocolRef protocol, CFDictionaryRef config)
{
  return _SCNetworkProtocolSetConfiguration(protocol, config);
}

Boolean SCNetworkServiceAddProtocolType(SCNetworkServiceRef service, CFStringRef protocolType)
{
  return _SCNetworkServiceAddProtocolType(service, protocolType);
}

CFArrayRef SCNetworkServiceCopyAll(SCPreferencesRef prefs)
{
  return _SCNetworkServiceCopyAll(prefs);
}

SCNetworkProtocolRef SCNetworkServiceCopyProtocol(SCNetworkServiceRef service, CFStringRef protocolType)
{
  return _SCNetworkServiceCopyProtocol(service, protocolType);
}

SCNetworkInterfaceRef SCNetworkServiceGetInterface(SCNetworkServiceRef service)
{
  return _SCNetworkServiceGetInterface(service);
}

Boolean SCNetworkServiceSetEnabled(SCNetworkServiceRef service, Boolean enabled)
{
  return _SCNetworkServiceSetEnabled(service, enabled);
}

Boolean SCNetworkSetAddService(SCNetworkSetRef set, SCNetworkServiceRef service)
{
  return _SCNetworkSetAddService(set, service);
}

Boolean SCNetworkSetContainsInterface(SCNetworkSetRef set, SCNetworkInterfaceRef interface)
{
  return _SCNetworkSetContainsInterface(set, interface);
}

CFArrayRef SCNetworkSetCopyAll(SCPreferencesRef prefs)
{
  return _SCNetworkSetCopyAll(prefs);
}

SCNetworkSetRef SCNetworkSetCopyCurrent(SCPreferencesRef prefs)
{
  return _SCNetworkSetCopyCurrent(prefs);
}

CFArrayRef SCNetworkSetCopyServices(SCNetworkSetRef set)
{
  return _SCNetworkSetCopyServices(set);
}

uint64_t SCNetworkSetEstablishDefaultInterfaceConfiguration()
{
  return _SCNetworkSetEstablishDefaultInterfaceConfiguration();
}

Boolean SCNetworkSetRemoveService(SCNetworkSetRef set, SCNetworkServiceRef service)
{
  return _SCNetworkSetRemoveService(set, service);
}

Boolean SCPreferencesApplyChanges(SCPreferencesRef prefs)
{
  return _SCPreferencesApplyChanges(prefs);
}

Boolean SCPreferencesCommitChanges(SCPreferencesRef prefs)
{
  return _SCPreferencesCommitChanges(prefs);
}

SCPreferencesRef SCPreferencesCreate(CFAllocatorRef allocator, CFStringRef name, CFStringRef prefsID)
{
  return _SCPreferencesCreate(allocator, name, prefsID);
}

SCPreferencesRef SCPreferencesCreateWithAuthorization(CFAllocatorRef allocator, CFStringRef name, CFStringRef prefsID, AuthorizationRef authorization)
{
  return _SCPreferencesCreateWithAuthorization(allocator, name, prefsID, authorization);
}

CFPropertyListRef SCPreferencesGetValue(SCPreferencesRef prefs, CFStringRef key)
{
  return _SCPreferencesGetValue(prefs, key);
}

Boolean SCPreferencesLock(SCPreferencesRef prefs, Boolean wait)
{
  return _SCPreferencesLock(prefs, wait);
}

Boolean SCPreferencesRemoveValue(SCPreferencesRef prefs, CFStringRef key)
{
  return _SCPreferencesRemoveValue(prefs, key);
}

Boolean SCPreferencesSetCallback(SCPreferencesRef prefs, SCPreferencesCallBack callout, SCPreferencesContext *context)
{
  return _SCPreferencesSetCallback(prefs, callout, context);
}

Boolean SCPreferencesSetDispatchQueue(SCPreferencesRef prefs, dispatch_queue_t queue)
{
  return _SCPreferencesSetDispatchQueue(prefs, queue);
}

Boolean SCPreferencesSetValue(SCPreferencesRef prefs, CFStringRef key, CFPropertyListRef value)
{
  return _SCPreferencesSetValue(prefs, key, value);
}

void SCPreferencesSynchronize(SCPreferencesRef prefs)
{
}

Boolean SCPreferencesUnlock(SCPreferencesRef prefs)
{
  return _SCPreferencesUnlock(prefs);
}

CFStringRef SecCopyErrorMessageString(OSStatus status, void *reserved)
{
  return _SecCopyErrorMessageString(status, reserved);
}

OSStatus SecItemAdd(CFDictionaryRef attributes, CFTypeRef *result)
{
  return _SecItemAdd(attributes, result);
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return _SecItemCopyMatching(query, result);
}

OSStatus SecItemDelete(CFDictionaryRef query)
{
  return _SecItemDelete(query);
}

OSStatus SecItemUpdate(CFDictionaryRef query, CFDictionaryRef attributesToUpdate)
{
  return _SecItemUpdate(query, attributesToUpdate);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_release(const void *aBlock)
{
}

uint64_t _NETRBClientCreate()
{
  return __NETRBClientCreate();
}

uint64_t _NETRBClientDestroy()
{
  return __NETRBClientDestroy();
}

uint64_t _NETRBClientSetGlobalServiceState()
{
  return __NETRBClientSetGlobalServiceState();
}

uint64_t _NETRBClientSetHostCount()
{
  return __NETRBClientSetHostCount();
}

uint64_t _NETRBClientStartService()
{
  return __NETRBClientStartService();
}

uint64_t _NETRBClientStopService()
{
  return __NETRBClientStopService();
}

uint64_t _SCNetworkInterfaceCreateWithBSDName()
{
  return __SCNetworkInterfaceCreateWithBSDName();
}

uint64_t __strlcpy_chk()
{
  return ___strlcpy_chk();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return __swift_stdlib_bridgeErrorToNSError();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

void bzero(void *a1, size_t a2)
{
}

int close(int a1)
{
  return _close(a1);
}

void dispatch_main(void)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return _dispatch_semaphore_create(value);
}

dispatch_workloop_t dispatch_workloop_create(const char *label)
{
  return _dispatch_workloop_create(label);
}

void exit(int a1)
{
}

void free(void *a1)
{
}

void freeifaddrs(ifaddrs *a1)
{
}

int getifaddrs(ifaddrs **a1)
{
  return _getifaddrs(a1);
}

pid_t getpid(void)
{
  return _getpid();
}

char *__cdecl if_indextoname(unsigned int a1, char *a2)
{
  return _if_indextoname(a1, a2);
}

unsigned int if_nametoindex(const char *a1)
{
  return _if_nametoindex(a1);
}

const char *__cdecl inet_ntop(int a1, const void *a2, char *a3, socklen_t a4)
{
  return _inet_ntop(a1, a2, a3, a4);
}

char *__cdecl mach_error_string(mach_error_t error_value)
{
  return _mach_error_string(error_value);
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_malloc(size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return _memcmp(__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return _memset(__b, __c, __len);
}

uint32_t notify_cancel(int token)
{
  return _notify_cancel(token);
}

BOOL notify_is_valid_token(int val)
{
  return _notify_is_valid_token(val);
}

uint32_t notify_post(const char *name)
{
  return _notify_post(name);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return _notify_register_dispatch(name, out_token, queue, handler);
}

const sockaddr *__cdecl nw_endpoint_get_address(nw_endpoint_t endpoint)
{
  return _nw_endpoint_get_address(endpoint);
}

uint64_t nw_interface_create_with_name()
{
  return _nw_interface_create_with_name();
}

const char *__cdecl nw_interface_get_name(nw_interface_t interface)
{
  return _nw_interface_get_name(interface);
}

nw_parameters_t nw_parameters_create(void)
{
  return _nw_parameters_create();
}

void nw_parameters_require_interface(nw_parameters_t parameters, nw_interface_t interface)
{
}

uint64_t nw_path_copy_interface()
{
  return _nw_path_copy_interface();
}

uint64_t nw_path_create_default_evaluator()
{
  return _nw_path_create_default_evaluator();
}

uint64_t nw_path_create_evaluator_for_endpoint()
{
  return _nw_path_create_evaluator_for_endpoint();
}

void nw_path_enumerate_gateways(nw_path_t path, nw_path_enumerate_gateways_block_t enumerate_block)
{
}

uint64_t nw_path_evaluator_cancel()
{
  return _nw_path_evaluator_cancel();
}

uint64_t nw_path_evaluator_copy_path()
{
  return _nw_path_evaluator_copy_path();
}

uint64_t nw_path_evaluator_set_update_handler()
{
  return _nw_path_evaluator_set_update_handler();
}

uint64_t nw_path_evaluator_start()
{
  return _nw_path_evaluator_start();
}

nw_path_status_t nw_path_get_status(nw_path_t path)
{
  return _nw_path_get_status(path);
}

uint64_t nwi_state_copy()
{
  return _nwi_state_copy();
}

uint64_t nwi_state_get_interface_names()
{
  return _nwi_state_get_interface_names();
}

uint64_t nwi_state_release()
{
  return _nwi_state_release();
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return [super a2];
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

uint64_t os_transaction_create()
{
  return _os_transaction_create();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

BOOL os_unfair_lock_trylock(os_unfair_lock_t lock)
{
  return _os_unfair_lock_trylock(lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_allows_internal_security_policies()
{
  return _os_variant_allows_internal_security_policies();
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return _read(a1, a2, a3);
}

uint64_t sandbox_check()
{
  return _sandbox_check();
}

int socket(int a1, int a2, int a3)
{
  return _socket(a1, a2, a3);
}

char *__cdecl strerror(int __errnum)
{
  return _strerror(__errnum);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return _strlcpy(__dst, __source, __size);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return _strncpy(__dst, __src, __n);
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return _swift_allocateGenericClassMetadata();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return _swift_arrayInitWithTakeBackToFront();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return _swift_arrayInitWithTakeFrontToBack();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_checkMetadataState()
{
  return _swift_checkMetadataState();
}

uint64_t swift_conformsToProtocol2()
{
  return _swift_conformsToProtocol2();
}

uint64_t swift_deallocClassInstance()
{
  return _swift_deallocClassInstance();
}

uint64_t swift_deallocPartialClassInstance()
{
  return _swift_deallocPartialClassInstance();
}

uint64_t swift_deallocUninitializedObject()
{
  return _swift_deallocUninitializedObject();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastClass()
{
  return _swift_dynamicCastClass();
}

uint64_t swift_dynamicCastObjCClass()
{
  return _swift_dynamicCastObjCClass();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return _swift_getAssociatedConformanceWitness();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return _swift_getAssociatedTypeWitness();
}

uint64_t swift_getAtKeyPath()
{
  return _swift_getAtKeyPath();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return _swift_getEnumCaseMultiPayload();
}

uint64_t swift_getErrorValue()
{
  return _swift_getErrorValue();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getFunctionTypeMetadata2()
{
  return _swift_getFunctionTypeMetadata2();
}

uint64_t swift_getGenericMetadata()
{
  return _swift_getGenericMetadata();
}

uint64_t swift_getKeyPath()
{
  return _swift_getKeyPath();
}

uint64_t swift_getMetatypeMetadata()
{
  return _swift_getMetatypeMetadata();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTupleTypeLayout2()
{
  return _swift_getTupleTypeLayout2();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return _swift_getTupleTypeMetadata2();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initClassMetadata2()
{
  return _swift_initClassMetadata2();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return _swift_initEnumMetadataMultiPayload();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return _swift_isEscapingClosureAtFileLocation();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return _swift_isUniquelyReferenced_nonNull_bridgeObject();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_makeBoxUnique()
{
  return _swift_makeBoxUnique();
}

uint64_t swift_modifyAtReferenceWritableKeyPath()
{
  return _swift_modifyAtReferenceWritableKeyPath();
}

uint64_t swift_modifyAtWritableKeyPath()
{
  return _swift_modifyAtWritableKeyPath();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_projectBox()
{
  return _swift_projectBox();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_setAtWritableKeyPath()
{
  return _swift_setAtWritableKeyPath();
}

uint64_t swift_setDeallocating()
{
  return _swift_setDeallocating();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return _swift_stdlib_isStackAllocationSafe();
}

uint64_t swift_stdlib_random()
{
  return _swift_stdlib_random();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return _swift_storeEnumTagMultiPayload();
}

uint64_t swift_unexpectedError()
{
  return _swift_unexpectedError();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRelease_n()
{
  return _swift_unknownObjectRelease_n();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectRetain_n()
{
  return _swift_unknownObjectRetain_n();
}

uint64_t swift_unknownObjectUnownedCopyAssign()
{
  return _swift_unknownObjectUnownedCopyAssign();
}

uint64_t swift_unknownObjectUnownedCopyInit()
{
  return _swift_unknownObjectUnownedCopyInit();
}

uint64_t swift_unknownObjectUnownedDestroy()
{
  return _swift_unknownObjectUnownedDestroy();
}

uint64_t swift_unknownObjectUnownedInit()
{
  return _swift_unknownObjectUnownedInit();
}

uint64_t swift_unknownObjectUnownedLoadStrong()
{
  return _swift_unknownObjectUnownedLoadStrong();
}

uint64_t swift_unknownObjectUnownedTakeAssign()
{
  return _swift_unknownObjectUnownedTakeAssign();
}

uint64_t swift_unknownObjectUnownedTakeInit()
{
  return _swift_unknownObjectUnownedTakeInit();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return _swift_unknownObjectWeakAssign();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return _swift_unknownObjectWeakDestroy();
}

uint64_t swift_unknownObjectWeakInit()
{
  return _swift_unknownObjectWeakInit();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return _swift_unknownObjectWeakLoadStrong();
}

uint64_t swift_unownedRelease()
{
  return _swift_unownedRelease();
}

uint64_t swift_unownedRetain()
{
  return _swift_unownedRetain();
}

uint64_t swift_unownedRetainStrong()
{
  return _swift_unownedRetainStrong();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_weakAssign()
{
  return _swift_weakAssign();
}

uint64_t swift_weakCopyAssign()
{
  return _swift_weakCopyAssign();
}

uint64_t swift_weakCopyInit()
{
  return _swift_weakCopyInit();
}

uint64_t swift_weakDestroy()
{
  return _swift_weakDestroy();
}

uint64_t swift_weakInit()
{
  return _swift_weakInit();
}

uint64_t swift_weakLoadStrong()
{
  return _swift_weakLoadStrong();
}

uint64_t swift_weakTakeAssign()
{
  return _swift_weakTakeAssign();
}

uint64_t swift_weakTakeInit()
{
  return _swift_weakTakeInit();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return _sysctl(a1, a2, a3, a4, a5, a6);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return _write(__fd, __buf, __nbyte);
}

char *__cdecl xpc_copy_description(xpc_object_t object)
{
  return _xpc_copy_description(object);
}

xpc_object_t xpc_dictionary_create_empty(void)
{
  return _xpc_dictionary_create_empty();
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_value(xdict, key);
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}

void xpc_dictionary_set_uint64(xpc_object_t xdict, const char *key, uint64_t value)
{
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return _xpc_get_type(object);
}

uint64_t xpc_uint64_get_value(xpc_object_t xuint)
{
  return _xpc_uint64_get_value(xuint);
}