ValueMetadata *type metadata accessor for NANAttribute.FineTimingMeasurementRangeReport.Entry.CodingKeys()
{
  return &type metadata for NANAttribute.FineTimingMeasurementRangeReport.Entry.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.ExtendedMesh.CodingKeys()
{
  return &type metadata for NANAttribute.ExtendedMesh.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.ExtendedIBSS.CodingKeys()
{
  return &type metadata for NANAttribute.ExtendedIBSS.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.ExtendedP2POperation.CodingKeys()
{
  return &type metadata for NANAttribute.ExtendedP2POperation.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.ElementContainer.CodingKeys()
{
  return &type metadata for NANAttribute.ElementContainer.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceLinkQoS.CodingKeys()
{
  return &type metadata for NANAttribute.DeviceLinkQoS.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.DataCluster.CodingKeys()
{
  return &type metadata for NANAttribute.DataCluster.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.Availability.CodingKeys()
{
  return &type metadata for NANAttribute.Availability.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceCapabilityExtension.CodingKeys()
{
  return &type metadata for NANAttribute.DeviceCapabilityExtension.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for NANAttribute.DeviceCapability.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100228BD0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceCapability.CodingKeys()
{
  return &type metadata for NANAttribute.DeviceCapability.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation.CodingKeys()
{
  return &type metadata for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.ClusterDiscovery.CodingKeys()
{
  return &type metadata for NANAttribute.ClusterDiscovery.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.Ranging.CodingKeys()
{
  return &type metadata for NANAttribute.Ranging.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.FurtherAvailabilityMap.CodingKeys()
{
  return &type metadata for NANAttribute.FurtherAvailabilityMap.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.FurtherServiceDiscovery.CodingKeys()
{
  return &type metadata for NANAttribute.FurtherServiceDiscovery.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.Mesh.CodingKeys()
{
  return &type metadata for NANAttribute.Mesh.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.IBSS.CodingKeys()
{
  return &type metadata for NANAttribute.IBSS.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.P2POperation.CodingKeys()
{
  return &type metadata for NANAttribute.P2POperation.CodingKeys;
}

unsigned char *_s7CoreP2P12NANAttributeO17ServiceDescriptorV7ControlV11ControlTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100228D54);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.WLANInfrastructure.CodingKeys()
{
  return &type metadata for NANAttribute.WLANInfrastructure.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.ServiceDescriptorExtension.RangeLimit.CodingKeys()
{
  return &type metadata for NANAttribute.ServiceDescriptorExtension.RangeLimit.CodingKeys;
}

unsigned char *_s7CoreP2P12NANAttributeO25PairingIdentityResolutionV13CipherVersionOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *result = a2;
        return result;
      case 2:
        *(_WORD *)result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *result = 0;
      break;
    case 2:
      *(_WORD *)result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100228E38);
    case 4:
      *(_DWORD *)result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.ServiceIDList.CodingKeys()
{
  return &type metadata for NANAttribute.ServiceIDList.CodingKeys;
}

unsigned char *_s7CoreP2P12NANAttributeO8DatapathV6StatusOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100228F3CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.Cluster.CodingKeys()
{
  return &type metadata for NANAttribute.Cluster.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.MasterIndication.CodingKeys()
{
  return &type metadata for NANAttribute.MasterIndication.CodingKeys;
}

unint64_t sub_100228F88()
{
  unint64_t result = qword_1004831C0;
  if (!qword_1004831C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004831C0);
  }
  return result;
}

unint64_t sub_100228FE0()
{
  unint64_t result = qword_1004831C8;
  if (!qword_1004831C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004831C8);
  }
  return result;
}

unint64_t sub_100229038()
{
  unint64_t result = qword_1004831D0;
  if (!qword_1004831D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004831D0);
  }
  return result;
}

unint64_t sub_100229090()
{
  unint64_t result = qword_1004831D8;
  if (!qword_1004831D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004831D8);
  }
  return result;
}

unint64_t sub_1002290E8()
{
  unint64_t result = qword_1004831E0;
  if (!qword_1004831E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004831E0);
  }
  return result;
}

unint64_t sub_100229140()
{
  unint64_t result = qword_1004831E8;
  if (!qword_1004831E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004831E8);
  }
  return result;
}

unint64_t sub_100229198()
{
  unint64_t result = qword_1004831F0;
  if (!qword_1004831F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004831F0);
  }
  return result;
}

unint64_t sub_1002291F0()
{
  unint64_t result = qword_1004831F8;
  if (!qword_1004831F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004831F8);
  }
  return result;
}

unint64_t sub_100229248()
{
  unint64_t result = qword_100483200;
  if (!qword_100483200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483200);
  }
  return result;
}

unint64_t sub_1002292A0()
{
  unint64_t result = qword_100483208;
  if (!qword_100483208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483208);
  }
  return result;
}

unint64_t sub_1002292F8()
{
  unint64_t result = qword_100483210;
  if (!qword_100483210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483210);
  }
  return result;
}

unint64_t sub_100229350()
{
  unint64_t result = qword_100483218;
  if (!qword_100483218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483218);
  }
  return result;
}

unint64_t sub_1002293A8()
{
  unint64_t result = qword_100483220;
  if (!qword_100483220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483220);
  }
  return result;
}

unint64_t sub_100229400()
{
  unint64_t result = qword_100483228;
  if (!qword_100483228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483228);
  }
  return result;
}

unint64_t sub_100229458()
{
  unint64_t result = qword_100483230;
  if (!qword_100483230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483230);
  }
  return result;
}

unint64_t sub_1002294B0()
{
  unint64_t result = qword_100483238;
  if (!qword_100483238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483238);
  }
  return result;
}

unint64_t sub_100229508()
{
  unint64_t result = qword_100483240;
  if (!qword_100483240)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483240);
  }
  return result;
}

unint64_t sub_100229560()
{
  unint64_t result = qword_100483248;
  if (!qword_100483248)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483248);
  }
  return result;
}

unint64_t sub_1002295B8()
{
  unint64_t result = qword_100483250;
  if (!qword_100483250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483250);
  }
  return result;
}

unint64_t sub_100229610()
{
  unint64_t result = qword_100483258;
  if (!qword_100483258)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483258);
  }
  return result;
}

unint64_t sub_100229668()
{
  unint64_t result = qword_100483260;
  if (!qword_100483260)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483260);
  }
  return result;
}

unint64_t sub_1002296C0()
{
  unint64_t result = qword_100483268;
  if (!qword_100483268)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483268);
  }
  return result;
}

unint64_t sub_100229718()
{
  unint64_t result = qword_100483270;
  if (!qword_100483270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483270);
  }
  return result;
}

unint64_t sub_100229770()
{
  unint64_t result = qword_100483278;
  if (!qword_100483278)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483278);
  }
  return result;
}

unint64_t sub_1002297C8()
{
  unint64_t result = qword_100483280;
  if (!qword_100483280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483280);
  }
  return result;
}

unint64_t sub_100229820()
{
  unint64_t result = qword_100483288;
  if (!qword_100483288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483288);
  }
  return result;
}

unint64_t sub_100229878()
{
  unint64_t result = qword_100483290;
  if (!qword_100483290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483290);
  }
  return result;
}

unint64_t sub_1002298D0()
{
  unint64_t result = qword_100483298;
  if (!qword_100483298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483298);
  }
  return result;
}

unint64_t sub_100229928()
{
  unint64_t result = qword_1004832A0;
  if (!qword_1004832A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004832A0);
  }
  return result;
}

unint64_t sub_100229980()
{
  unint64_t result = qword_1004832A8;
  if (!qword_1004832A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004832A8);
  }
  return result;
}

unint64_t sub_1002299D8()
{
  unint64_t result = qword_1004832B0;
  if (!qword_1004832B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004832B0);
  }
  return result;
}

unint64_t sub_100229A30()
{
  unint64_t result = qword_1004832B8;
  if (!qword_1004832B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004832B8);
  }
  return result;
}

unint64_t sub_100229A88()
{
  unint64_t result = qword_1004832C0;
  if (!qword_1004832C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004832C0);
  }
  return result;
}

unint64_t sub_100229AE0()
{
  unint64_t result = qword_1004832C8;
  if (!qword_1004832C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004832C8);
  }
  return result;
}

unint64_t sub_100229B38()
{
  unint64_t result = qword_1004832D0;
  if (!qword_1004832D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004832D0);
  }
  return result;
}

unint64_t sub_100229B90()
{
  unint64_t result = qword_1004832D8;
  if (!qword_1004832D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004832D8);
  }
  return result;
}

unint64_t sub_100229BE8()
{
  unint64_t result = qword_1004832E0;
  if (!qword_1004832E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004832E0);
  }
  return result;
}

unint64_t sub_100229C40()
{
  unint64_t result = qword_1004832E8;
  if (!qword_1004832E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004832E8);
  }
  return result;
}

unint64_t sub_100229C98()
{
  unint64_t result = qword_1004832F0;
  if (!qword_1004832F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004832F0);
  }
  return result;
}

unint64_t sub_100229CF0()
{
  unint64_t result = qword_1004832F8;
  if (!qword_1004832F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004832F8);
  }
  return result;
}

unint64_t sub_100229D48()
{
  unint64_t result = qword_100483300;
  if (!qword_100483300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483300);
  }
  return result;
}

unint64_t sub_100229DA0()
{
  unint64_t result = qword_100483308;
  if (!qword_100483308)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483308);
  }
  return result;
}

unint64_t sub_100229DF8()
{
  unint64_t result = qword_100483310;
  if (!qword_100483310)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483310);
  }
  return result;
}

unint64_t sub_100229E50()
{
  unint64_t result = qword_100483318;
  if (!qword_100483318)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483318);
  }
  return result;
}

unint64_t sub_100229EA8()
{
  unint64_t result = qword_100483320;
  if (!qword_100483320)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483320);
  }
  return result;
}

unint64_t sub_100229F00()
{
  unint64_t result = qword_100483328;
  if (!qword_100483328)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483328);
  }
  return result;
}

unint64_t sub_100229F58()
{
  unint64_t result = qword_100483330;
  if (!qword_100483330)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483330);
  }
  return result;
}

unint64_t sub_100229FB0()
{
  unint64_t result = qword_100483338;
  if (!qword_100483338)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483338);
  }
  return result;
}

unint64_t sub_10022A008()
{
  unint64_t result = qword_100483340;
  if (!qword_100483340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483340);
  }
  return result;
}

unint64_t sub_10022A060()
{
  unint64_t result = qword_100483348;
  if (!qword_100483348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483348);
  }
  return result;
}

unint64_t sub_10022A0B8()
{
  unint64_t result = qword_100483350;
  if (!qword_100483350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483350);
  }
  return result;
}

unint64_t sub_10022A110()
{
  unint64_t result = qword_100483358;
  if (!qword_100483358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483358);
  }
  return result;
}

unint64_t sub_10022A168()
{
  unint64_t result = qword_100483360;
  if (!qword_100483360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483360);
  }
  return result;
}

unint64_t sub_10022A1C0()
{
  unint64_t result = qword_100483368;
  if (!qword_100483368)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483368);
  }
  return result;
}

unint64_t sub_10022A218()
{
  unint64_t result = qword_100483370;
  if (!qword_100483370)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483370);
  }
  return result;
}

unint64_t sub_10022A270()
{
  unint64_t result = qword_100483378;
  if (!qword_100483378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483378);
  }
  return result;
}

unint64_t sub_10022A2C8()
{
  unint64_t result = qword_100483380;
  if (!qword_100483380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483380);
  }
  return result;
}

unint64_t sub_10022A320()
{
  unint64_t result = qword_100483388;
  if (!qword_100483388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483388);
  }
  return result;
}

unint64_t sub_10022A378()
{
  unint64_t result = qword_100483390;
  if (!qword_100483390)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483390);
  }
  return result;
}

unint64_t sub_10022A3D0()
{
  unint64_t result = qword_100483398;
  if (!qword_100483398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483398);
  }
  return result;
}

unint64_t sub_10022A428()
{
  unint64_t result = qword_1004833A0;
  if (!qword_1004833A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004833A0);
  }
  return result;
}

unint64_t sub_10022A480()
{
  unint64_t result = qword_1004833A8;
  if (!qword_1004833A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004833A8);
  }
  return result;
}

unint64_t sub_10022A4D8()
{
  unint64_t result = qword_1004833B0;
  if (!qword_1004833B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004833B0);
  }
  return result;
}

unint64_t sub_10022A530()
{
  unint64_t result = qword_1004833B8;
  if (!qword_1004833B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004833B8);
  }
  return result;
}

unint64_t sub_10022A588()
{
  unint64_t result = qword_1004833C0;
  if (!qword_1004833C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004833C0);
  }
  return result;
}

unint64_t sub_10022A5E0()
{
  unint64_t result = qword_1004833C8;
  if (!qword_1004833C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004833C8);
  }
  return result;
}

unint64_t sub_10022A638()
{
  unint64_t result = qword_1004833D0;
  if (!qword_1004833D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004833D0);
  }
  return result;
}

unint64_t sub_10022A690()
{
  unint64_t result = qword_1004833D8;
  if (!qword_1004833D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004833D8);
  }
  return result;
}

unint64_t sub_10022A6E8()
{
  unint64_t result = qword_1004833E0;
  if (!qword_1004833E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004833E0);
  }
  return result;
}

unint64_t sub_10022A740()
{
  unint64_t result = qword_1004833E8;
  if (!qword_1004833E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004833E8);
  }
  return result;
}

unint64_t sub_10022A798()
{
  unint64_t result = qword_1004833F0;
  if (!qword_1004833F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004833F0);
  }
  return result;
}

unint64_t sub_10022A7F0()
{
  unint64_t result = qword_1004833F8;
  if (!qword_1004833F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004833F8);
  }
  return result;
}

unint64_t sub_10022A848()
{
  unint64_t result = qword_100483400;
  if (!qword_100483400)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483400);
  }
  return result;
}

unint64_t sub_10022A8A0()
{
  unint64_t result = qword_100483408;
  if (!qword_100483408)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483408);
  }
  return result;
}

unint64_t sub_10022A8F8()
{
  unint64_t result = qword_100483410;
  if (!qword_100483410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483410);
  }
  return result;
}

unint64_t sub_10022A950()
{
  unint64_t result = qword_100483418;
  if (!qword_100483418)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483418);
  }
  return result;
}

unint64_t sub_10022A9A8()
{
  unint64_t result = qword_100483420;
  if (!qword_100483420)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483420);
  }
  return result;
}

unint64_t sub_10022AA00()
{
  unint64_t result = qword_100483428;
  if (!qword_100483428)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483428);
  }
  return result;
}

unint64_t sub_10022AA58()
{
  unint64_t result = qword_100483430;
  if (!qword_100483430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483430);
  }
  return result;
}

unint64_t sub_10022AAB0()
{
  unint64_t result = qword_100483438;
  if (!qword_100483438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483438);
  }
  return result;
}

unint64_t sub_10022AB08()
{
  unint64_t result = qword_100483440;
  if (!qword_100483440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483440);
  }
  return result;
}

unint64_t sub_10022AB60()
{
  unint64_t result = qword_100483448;
  if (!qword_100483448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483448);
  }
  return result;
}

unint64_t sub_10022ABB8()
{
  unint64_t result = qword_100483450;
  if (!qword_100483450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483450);
  }
  return result;
}

unint64_t sub_10022AC10()
{
  unint64_t result = qword_100483458;
  if (!qword_100483458)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483458);
  }
  return result;
}

unint64_t sub_10022AC68()
{
  unint64_t result = qword_100483460;
  if (!qword_100483460)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483460);
  }
  return result;
}

unint64_t sub_10022ACC0()
{
  unint64_t result = qword_100483468;
  if (!qword_100483468)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483468);
  }
  return result;
}

unint64_t sub_10022AD18()
{
  unint64_t result = qword_100483470;
  if (!qword_100483470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483470);
  }
  return result;
}

unint64_t sub_10022AD70()
{
  unint64_t result = qword_100483478;
  if (!qword_100483478)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483478);
  }
  return result;
}

unint64_t sub_10022ADC8()
{
  unint64_t result = qword_100483480;
  if (!qword_100483480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483480);
  }
  return result;
}

unint64_t sub_10022AE20()
{
  unint64_t result = qword_100483488;
  if (!qword_100483488)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483488);
  }
  return result;
}

unint64_t sub_10022AE78()
{
  unint64_t result = qword_100483490;
  if (!qword_100483490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483490);
  }
  return result;
}

unint64_t sub_10022AED0()
{
  unint64_t result = qword_100483498;
  if (!qword_100483498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483498);
  }
  return result;
}

unint64_t sub_10022AF28()
{
  unint64_t result = qword_1004834A0;
  if (!qword_1004834A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004834A0);
  }
  return result;
}

unint64_t sub_10022AF80()
{
  unint64_t result = qword_1004834A8;
  if (!qword_1004834A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004834A8);
  }
  return result;
}

unint64_t sub_10022AFD8()
{
  unint64_t result = qword_1004834B0;
  if (!qword_1004834B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004834B0);
  }
  return result;
}

unint64_t sub_10022B030()
{
  unint64_t result = qword_1004834B8;
  if (!qword_1004834B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004834B8);
  }
  return result;
}

unint64_t sub_10022B088()
{
  unint64_t result = qword_1004834C0;
  if (!qword_1004834C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004834C0);
  }
  return result;
}

unint64_t sub_10022B0E0()
{
  unint64_t result = qword_1004834C8;
  if (!qword_1004834C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004834C8);
  }
  return result;
}

unint64_t sub_10022B138()
{
  unint64_t result = qword_1004834D0;
  if (!qword_1004834D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004834D0);
  }
  return result;
}

unint64_t sub_10022B190()
{
  unint64_t result = qword_1004834D8;
  if (!qword_1004834D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004834D8);
  }
  return result;
}

unint64_t sub_10022B1E8()
{
  unint64_t result = qword_1004834E0;
  if (!qword_1004834E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004834E0);
  }
  return result;
}

unint64_t sub_10022B240()
{
  unint64_t result = qword_1004834E8;
  if (!qword_1004834E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004834E8);
  }
  return result;
}

char *sub_10022B294(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  unsigned int v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  unint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v9 <= v4[3] >> 1)
  {
    if (!v8) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    unint64_t result = (char *)sub_1000C568C(result, v11, 1, v4);
    unsigned int v4 = result;
    if (!v8) {
      goto LABEL_21;
    }
  }
  uint64_t v12 = v4[2];
  size_t v13 = v12 - a2;
  if (__OFSUB__(v12, a2)) {
    goto LABEL_27;
  }
  if ((v13 & 0x8000000000000000) == 0)
  {
    unint64_t result = (char *)v4 + a1 + 32;
    v14 = (char *)v4 + a2 + 32;
    if (a1 != a2 || result >= &v14[v13]) {
      unint64_t result = (char *)memmove(result, v14, v13);
    }
    uint64_t v15 = v4[2];
    BOOL v16 = __OFADD__(v15, v8);
    uint64_t v17 = v15 + v8;
    if (!v16)
    {
      v4[2] = v17;
LABEL_21:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  unint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10022B3EC(uint64_t a1)
{
  uint64_t result = (uint64_t)_swiftEmptyArrayStorage;
  v30 = _swiftEmptyArrayStorage;
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return result;
  }
  uint64_t v4 = 0;
  uint64_t v5 = a1 + 32;
  uint64_t v27 = a1 + 32;
  uint64_t v28 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v6 = *(void *)(v5 + 8 * v4);
    uint64_t v7 = v30;
    unint64_t v8 = v30[2];
    uint64_t v9 = *(void *)(v6 + 16);
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    if (v9 >= v8)
    {
      v10 = v30;
    }
    else
    {
      uint64_t result = (uint64_t)sub_10022B294(v9, v8);
      v10 = v30;
      unint64_t v8 = v30[2];
      uint64_t v9 = *(void *)(v6 + 16);
    }
    BOOL v11 = !v8 || v9 == 0;
    if (!v11) {
      break;
    }
LABEL_20:
    if (v8 != v9) {
      goto LABEL_31;
    }
    if (!v8) {
      goto LABEL_25;
    }
    if (v10 != (void *)v6)
    {
      if (*((unsigned __int8 *)v10 + 32) != *(unsigned __int8 *)(v6 + 32)) {
        goto LABEL_31;
      }
      if (v8 == 1) {
        goto LABEL_25;
      }
      if (*((unsigned __int8 *)v10 + 33) == *(unsigned __int8 *)(v6 + 33))
      {
        uint64_t v17 = 34;
        while (2 - v8 + v17 != 34)
        {
          int v18 = *((unsigned __int8 *)v10 + v17);
          int v19 = *(unsigned __int8 *)(v6 + v17++);
          if (v18 != v19) {
            goto LABEL_31;
          }
        }
LABEL_25:
        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_31:
        swift_bridgeObjectRelease();
        uint64_t v20 = v30[2];
        uint64_t v21 = *(void *)(v6 + 16);
        if (v20)
        {
          if (v21)
          {
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)sub_1001DFD70(v30);
              uint64_t v7 = (void *)result;
            }
            unint64_t v22 = 0;
            uint64_t v23 = *(void *)(v6 + 16);
            while ((v21 & ~(v21 >> 63)) != v22)
            {
              if (v22 == v23) {
                goto LABEL_54;
              }
              uint64_t v24 = v7[2];
              if (v22 >= v24) {
                goto LABEL_55;
              }
              *((unsigned char *)v7 + v22 + 32) |= *(unsigned char *)(v6 + 32 + v22);
              unint64_t v25 = v22 + 1;
              if (v25 != v20)
              {
                unint64_t v26 = v25 - 1;
                if (v26 == v20 - 1) {
                  goto LABEL_56;
                }
                unint64_t v22 = v26 + 1;
                if (v22 != v21) {
                  continue;
                }
              }
              v30 = v7;
              uint64_t v21 = v23;
              if (v24 >= v23) {
                goto LABEL_44;
              }
              goto LABEL_43;
            }
            goto LABEL_53;
          }
        }
        else
        {
          uint64_t v24 = 0;
          if (v21 > 0) {
LABEL_43:
          }
            sub_1001DFEA8(v6, v6 + 32, v24, (2 * v21) | 1);
        }
      }
LABEL_44:
      swift_bridgeObjectRelease();
      goto LABEL_45;
    }
    swift_bridgeObjectRelease_n();
LABEL_45:
    if (++v4 == v3) {
      return (uint64_t)v30;
    }
  }
  uint64_t v29 = v4;
  unint64_t v12 = 0;
  uint64_t v13 = v9 - 1;
  unint64_t v14 = v8 - 1;
  uint64_t v15 = v9 & ~(v9 >> 63);
  while (v15 != v12)
  {
    if (v12 >= *(void *)(v6 + 16)) {
      goto LABEL_51;
    }
    char v16 = *(unsigned char *)(v6 + 32 + v12);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1001DFD70(v10);
      v10 = (void *)result;
    }
    unint64_t v8 = v10[2];
    if (v12 >= v8) {
      goto LABEL_52;
    }
    *((unsigned char *)v10 + v12 + 32) &= v16;
    if (v14 != v12)
    {
      BOOL v11 = v13 == v12++;
      if (!v11) {
        continue;
      }
    }
    uint64_t v9 = *(void *)(v6 + 16);
    uint64_t v3 = v28;
    uint64_t v4 = v29;
    uint64_t v5 = v27;
    goto LABEL_20;
  }
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
  return result;
}

uint64_t sub_10022B6D0(uint64_t a1)
{
  uint64_t result = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v27 = _swiftEmptyArrayStorage;
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return result;
  }
  uint64_t v4 = 0;
  uint64_t v5 = a1 + 32;
  while (1)
  {
    uint64_t v6 = *(void *)(v5 + 8 * v4);
    uint64_t v7 = v27;
    unint64_t v8 = v27[2];
    uint64_t v9 = *(void *)(v6 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v9 >= v8)
    {
      v10 = v27;
      if (!v8)
      {
LABEL_27:
        if (!v9) {
          goto LABEL_43;
        }
        goto LABEL_28;
      }
    }
    else
    {
      sub_10022B294(v9, v8);
      uint64_t v9 = *(void *)(v6 + 16);
      v10 = v27;
      unint64_t v8 = v27[2];
      if (!v8) {
        goto LABEL_27;
      }
    }
    if (v9)
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_1001DFD70(v10);
        v10 = (void *)result;
      }
      unint64_t v11 = 0;
      uint64_t v12 = *(void *)(v6 + 16);
      uint64_t v13 = 32;
      uint64_t v14 = 1;
      do
      {
        if (v13 - (v9 & ~(v9 >> 63)) == 32)
        {
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
          goto LABEL_50;
        }
        if (v11 == v12) {
          goto LABEL_47;
        }
        unint64_t v15 = v10[2];
        if (v11 >= v15) {
          goto LABEL_48;
        }
        *((unsigned char *)v10 + v13) &= *(unsigned char *)(v6 + v13);
        if (v14 == v8) {
          break;
        }
        if (v11 == v8 - 1) {
          goto LABEL_49;
        }
        ++v11;
        ++v14;
        ++v13;
      }
      while (v11 != v9);
      if (v15 != v12) {
        goto LABEL_28;
      }
      if (v10 != (void *)v6)
      {
        if (*((unsigned __int8 *)v10 + 32) != *(unsigned __int8 *)(v6 + 32)) {
          goto LABEL_28;
        }
        if (v15 != 1)
        {
          if (*((unsigned __int8 *)v10 + 33) != *(unsigned __int8 *)(v6 + 33)) {
            goto LABEL_28;
          }
          unint64_t v16 = 2 - v15;
          uint64_t v17 = 34;
          while (v16 + v17 != 34)
          {
            int v18 = *((unsigned __int8 *)v10 + v17);
            int v19 = *(unsigned __int8 *)(v6 + v17++);
            if (v18 != v19) {
              goto LABEL_28;
            }
          }
        }
LABEL_43:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_4;
      }
      goto LABEL_3;
    }
LABEL_28:
    swift_bridgeObjectRelease();
    uint64_t v20 = v27[2];
    uint64_t v21 = *(void *)(v6 + 16);
    if (!v20)
    {
      swift_bridgeObjectRetain();
      uint64_t v24 = 0;
      if (v21 > 0) {
LABEL_42:
      }
        sub_1001DFEA8(v6, v6 + 32, v24, (2 * v21) | 1);
      goto LABEL_3;
    }
    swift_bridgeObjectRetain();
    if (v21) {
      break;
    }
LABEL_3:
    swift_bridgeObjectRelease_n();
LABEL_4:
    if (++v4 == v3) {
      return (uint64_t)v27;
    }
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1001DFD70(v27);
    uint64_t v7 = (void *)result;
  }
  unint64_t v22 = 0;
  uint64_t v23 = *(void *)(v6 + 16);
  while ((v21 & ~(v21 >> 63)) != v22)
  {
    if (v22 == v23) {
      goto LABEL_51;
    }
    uint64_t v24 = v7[2];
    if (v22 >= v24) {
      goto LABEL_52;
    }
    *((unsigned char *)v7 + v22 + 32) |= *(unsigned char *)(v6 + 32 + v22);
    unint64_t v25 = v22 + 1;
    if (v25 != v20)
    {
      unint64_t v26 = v25 - 1;
      if (v26 == v20 - 1) {
        goto LABEL_53;
      }
      unint64_t v22 = v26 + 1;
      if (v22 != v21) {
        continue;
      }
    }
    uint64_t v27 = v7;
    uint64_t v21 = v23;
    if (v24 >= v23) {
      goto LABEL_3;
    }
    goto LABEL_42;
  }
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
  return result;
}

uint64_t sub_10022B9BC(uint64_t a1)
{
  uint64_t result = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v27 = _swiftEmptyArrayStorage;
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return result;
  }
  uint64_t v4 = 0;
  uint64_t v26 = a1 + 32;
  uint64_t v25 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v5 = *(void *)(v26 + 8 * v4);
    uint64_t v6 = v27;
    unint64_t v7 = v27[2];
    uint64_t v8 = *(void *)(v5 + 16);
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    if (v8 >= v7)
    {
      uint64_t v9 = v27;
    }
    else
    {
      uint64_t result = (uint64_t)sub_10022B294(v8, v7);
      uint64_t v9 = v27;
      unint64_t v7 = v27[2];
      uint64_t v8 = *(void *)(v5 + 16);
    }
    BOOL v10 = !v7 || v8 == 0;
    if (!v10) {
      break;
    }
LABEL_22:
    if (v7 == v8)
    {
      if (!v7 || v9 == (void *)v5) {
        goto LABEL_3;
      }
      if (*((unsigned __int8 *)v9 + 32) == *(unsigned __int8 *)(v5 + 32))
      {
        if (v7 == 1) {
          goto LABEL_3;
        }
        if (*((unsigned __int8 *)v9 + 33) == *(unsigned __int8 *)(v5 + 33))
        {
          uint64_t v16 = 0;
          while (v7 - 2 != v16)
          {
            int v17 = *((unsigned __int8 *)v9 + v16 + 34);
            int v18 = *(unsigned __int8 *)(v5 + 34 + v16++);
            if (v17 != v18) {
              goto LABEL_31;
            }
          }
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
      }
    }
LABEL_31:
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v19 = v27[2];
    if (v19)
    {
      uint64_t v20 = *(void *)(v5 + 16);
      if (v20)
      {
        unint64_t v21 = 0;
        unint64_t v22 = v19 - 1;
        while ((v20 & ~(v20 >> 63)) != v21)
        {
          if (v21 >= *(void *)(v5 + 16)) {
            goto LABEL_51;
          }
          char v23 = *(unsigned char *)(v5 + 32 + v21);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)sub_1001DFD70(v6);
            uint64_t v6 = (void *)result;
          }
          unint64_t v19 = v6[2];
          if (v21 >= v19) {
            goto LABEL_52;
          }
          *((unsigned char *)v6 + v21 + 32) |= v23;
          if (v22 != v21 && v20 != ++v21) {
            continue;
          }
          uint64_t v27 = v6;
          goto LABEL_42;
        }
        goto LABEL_50;
      }
    }
LABEL_42:
    unint64_t v24 = *(void *)(v5 + 16);
    if (v19 < v24) {
      sub_1001DFEA8(v5, v5 + 32, v19, (2 * v24) | 1);
    }
LABEL_4:
    ++v4;
    swift_bridgeObjectRelease();
    if (v4 == v3) {
      return (uint64_t)v27;
    }
  }
  unint64_t v11 = 0;
  uint64_t v12 = v8 - 1;
  unint64_t v13 = v7 - 1;
  uint64_t v14 = v8 & ~(v8 >> 63);
  while (v14 != v11)
  {
    if (v11 >= *(void *)(v5 + 16)) {
      goto LABEL_48;
    }
    char v15 = *(unsigned char *)(v5 + 32 + v11);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1001DFD70(v9);
      uint64_t v9 = (void *)result;
    }
    unint64_t v7 = v9[2];
    if (v11 >= v7) {
      goto LABEL_49;
    }
    *((unsigned char *)v9 + v11 + 32) &= v15;
    if (v13 != v11)
    {
      BOOL v10 = v12 == v11++;
      if (!v10) {
        continue;
      }
    }
    uint64_t v8 = *(void *)(v5 + 16);
    uint64_t v3 = v25;
    goto LABEL_22;
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
  return result;
}

uint64_t sub_10022BC7C(uint64_t a1)
{
  uint64_t result = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v28 = _swiftEmptyArrayStorage;
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return result;
  }
  uint64_t v4 = 0;
  uint64_t v5 = a1 + 32;
  uint64_t v27 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v6 = *(void *)(v5 + 8 * v4);
    unint64_t v7 = v28;
    unint64_t v8 = v28[2];
    uint64_t v9 = *(void *)(v6 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v9 >= v8) {
      break;
    }
    sub_10022B294(v9, v8);
    uint64_t v9 = *(void *)(v6 + 16);
    BOOL v10 = v28;
    unint64_t v8 = v28[2];
    if (!v8) {
      goto LABEL_27;
    }
LABEL_7:
    if (!v9) {
      goto LABEL_28;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1001DFD70(v10);
      BOOL v10 = (void *)result;
    }
    unint64_t v11 = 0;
    uint64_t v12 = *(void *)(v6 + 16);
    uint64_t v13 = 32;
    uint64_t v14 = 1;
    do
    {
      if (v13 - (v9 & ~(v9 >> 63)) == 32)
      {
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
      if (v11 == v12) {
        goto LABEL_45;
      }
      unint64_t v15 = v10[2];
      if (v11 >= v15) {
        goto LABEL_46;
      }
      *((unsigned char *)v10 + v13) &= *(unsigned char *)(v6 + v13);
      if (v14 == v8) {
        break;
      }
      if (v11 == v8 - 1) {
        goto LABEL_47;
      }
      ++v11;
      ++v14;
      ++v13;
    }
    while (v11 != v9);
    if (v15 != v12) {
      goto LABEL_28;
    }
    if (v10 != (void *)v6)
    {
      if (*((unsigned __int8 *)v10 + 32) != *(unsigned __int8 *)(v6 + 32)) {
        goto LABEL_28;
      }
      if (v15 != 1)
      {
        if (*((unsigned __int8 *)v10 + 33) != *(unsigned __int8 *)(v6 + 33)) {
          goto LABEL_28;
        }
        uint64_t v16 = 0;
        unint64_t v17 = v15 - 2;
        while (v17 != v16)
        {
          int v18 = *((unsigned __int8 *)v10 + v16 + 34);
          int v19 = *(unsigned __int8 *)(v6 + 34 + v16++);
          if (v18 != v19) {
            goto LABEL_28;
          }
        }
      }
    }
LABEL_3:
    swift_bridgeObjectRelease();
LABEL_4:
    ++v4;
    swift_bridgeObjectRelease();
    if (v4 == v3) {
      return (uint64_t)v28;
    }
  }
  BOOL v10 = v28;
  if (v8) {
    goto LABEL_7;
  }
LABEL_27:
  if (!v9) {
    goto LABEL_3;
  }
LABEL_28:
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v20 = v28[2];
  if (!v20 || (uint64_t v21 = *(void *)(v6 + 16)) == 0)
  {
LABEL_39:
    unint64_t v26 = *(void *)(v6 + 16);
    if (v20 < v26) {
      sub_1001DFEA8(v6, v6 + 32, v20, (2 * v26) | 1);
    }
    goto LABEL_4;
  }
  uint64_t v22 = v5;
  unint64_t v23 = 0;
  unint64_t v24 = v20 - 1;
  while ((v21 & ~(v21 >> 63)) != v23)
  {
    if (v23 >= *(void *)(v6 + 16)) {
      goto LABEL_49;
    }
    char v25 = *(unsigned char *)(v6 + 32 + v23);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1001DFD70(v7);
      unint64_t v7 = (void *)result;
    }
    unint64_t v20 = v7[2];
    if (v23 >= v20) {
      goto LABEL_50;
    }
    *((unsigned char *)v7 + v23 + 32) |= v25;
    if (v24 != v23 && v21 != ++v23) {
      continue;
    }
    uint64_t v28 = v7;
    uint64_t v5 = v22;
    uint64_t v3 = v27;
    goto LABEL_39;
  }
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
  return result;
}

uint64_t sub_10022BF44(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000001003DBB10
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x61466D6F646E6172 && a2 == 0xEC000000726F7463)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10022C04C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000001003DE710
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E756F43706F68 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000022 && a2 == 0x80000001003DB8D0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_10022C19C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6573736572646461 && a2 == 0xE900000000000073;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6564756C636E69 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10022C29C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x80000001003DE730
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001003DE750)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10022C388(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000001003DE770
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001003DE790 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6962616C69617661 && a2 == 0xEC0000007974696CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1701605234 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_10022C544(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701605234 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x657264644163616DLL && a2 == 0xEA00000000007373 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6962616C69617661 && a2 == 0xEC0000007974696CLL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_10022C6B0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4953534273736269 && a2 == 0xE900000000000044;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x657264644163616DLL && a2 == 0xEA00000000007373 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6962616C69617661 && a2 == 0xEC0000007974696CLL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_10022C838(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x657264644163616DLL && a2 == 0xEA00000000007373;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6962616C69617661 && a2 == 0xEC0000007974696CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x44496873656DLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_10022C9AC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x444970616DLL && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001003DE7B0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10022CA94(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x657264644163616DLL && a2 == 0xEA00000000007373;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10022CB84(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4972657473756C63 && a2 == 0xE900000000000044;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7366664F656D6974 && a2 == 0xEA00000000007465 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001003DE710)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_10022CCF0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x444970616DLL && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000023 && a2 == 0x80000001003DE7D0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6574726F70707573 && a2 == 0xEE0073646E614264 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1701080941 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001003DE800 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000024 && a2 == 0x80000001003DE820 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x696C696261706163 && a2 == 0xEC00000073656974)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

uint64_t sub_10022CFE4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65636E6575716573 && a2 == 0xEA00000000004449;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C6F72746E6F63 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001003DE7B0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_10022D144(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4972657473756C63 && a2 == 0xE900000000000044;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C6F72746E6F63 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C756465686373 && a2 == 0xEF73656972746E45)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_10022D2CC(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000001003DE850
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4C6D756D6978616DLL && a2 == 0xEE0079636E657461)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10022D3E0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x73444970616DLL && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10022D4BC(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000001003DE770
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001003DE790 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1701605234 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x80000001003DE870 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001003DE890)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_10022D6AC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701605234 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x657264644163616DLL && a2 == 0xEA00000000007373 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x80000001003DE870 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001003DE890)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_10022D85C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4953534273736269 && a2 == 0xE900000000000044;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x657264644163616DLL && a2 == 0xEA00000000007373 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x80000001003DE870 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001003DE890)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_10022DA28(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x657264644163616DLL && a2 == 0xEA00000000007373;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x80000001003DE870 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001003DE890 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x44496873656DLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_10022DBDC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6D69547472617473 && a2 == 0xE900000000000065;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6469737362 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x746E4565676E6172 && a2 == 0xEB00000000317972 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x746E4565676E6172 && a2 == 0xEB00000000327972 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x746E4565676E6172 && a2 == 0xEB00000000337972 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x80000001003DE8B0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_10022DE58(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7553726568706963 && a2 == 0xEB00000000657469;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x496873696C627570 && a2 == 0xE900000000000044)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10022DF70(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696C696261706163 && a2 == 0xEC00000073656974;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7553726568706963 && a2 == 0xEC00000073657469)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10022E080(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012 && a2 == 0x80000001003DE8D0)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_10022E108(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x496873696C627570 && a2 == 0xE900000000000044;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10022E1F8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x444967736D6ELL && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001003DE8F0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C6F72746E6F63 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E6F73616572 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD00000000000001ELL && a2 == 0x80000001003DE910)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_10022E3FC(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000021 && a2 == 0x80000001003DE930)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_10022E484(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6556726568706963 && a2 == 0xED00006E6F697372;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65636E6F6ELL && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 6775156 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_10022E5E8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 6911343 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10022E6BC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D726F6674616C70 && a2 == 0xEC00000065707954 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7367616C66 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001003DE960)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

unint64_t sub_10022E884()
{
  unint64_t result = qword_1004834F0;
  if (!qword_1004834F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004834F0);
  }
  return result;
}

unint64_t sub_10022E8D8()
{
  unint64_t result = qword_1004834F8;
  if (!qword_1004834F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004834F8);
  }
  return result;
}

unint64_t sub_10022E92C()
{
  unint64_t result = qword_100483500;
  if (!qword_100483500)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483500);
  }
  return result;
}

unint64_t sub_10022E980()
{
  unint64_t result = qword_100483508;
  if (!qword_100483508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483508);
  }
  return result;
}

unint64_t sub_10022E9D4()
{
  unint64_t result = qword_100483510;
  if (!qword_100483510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483510);
  }
  return result;
}

unint64_t sub_10022EA28()
{
  unint64_t result = qword_100483518;
  if (!qword_100483518)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483518);
  }
  return result;
}

unint64_t sub_10022EA7C()
{
  unint64_t result = qword_100483520;
  if (!qword_100483520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483520);
  }
  return result;
}

unint64_t sub_10022EAD0()
{
  unint64_t result = qword_100483528;
  if (!qword_100483528)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483528);
  }
  return result;
}

unint64_t sub_10022EB24()
{
  unint64_t result = qword_100483530;
  if (!qword_100483530)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483530);
  }
  return result;
}

unint64_t sub_10022EB78()
{
  unint64_t result = qword_100483538;
  if (!qword_100483538)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483538);
  }
  return result;
}

unint64_t sub_10022EBCC()
{
  unint64_t result = qword_100483540;
  if (!qword_100483540)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483540);
  }
  return result;
}

unint64_t sub_10022EC20()
{
  unint64_t result = qword_100483548;
  if (!qword_100483548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483548);
  }
  return result;
}

unint64_t sub_10022EC74()
{
  unint64_t result = qword_100483550;
  if (!qword_100483550)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483550);
  }
  return result;
}

uint64_t sub_10022ECC8(unint64_t a1, unint64_t a2)
{
  return sub_1001E2BF4(a1, a2, *(void ***)(v2 + 16), **(void **)(v2 + 24));
}

unint64_t sub_10022ECE8()
{
  unint64_t result = qword_100483558;
  if (!qword_100483558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483558);
  }
  return result;
}

unint64_t sub_10022ED3C()
{
  unint64_t result = qword_100483560;
  if (!qword_100483560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483560);
  }
  return result;
}

uint64_t sub_10022ED90(unint64_t a1, unint64_t a2)
{
  return sub_1001E2B58(a1, a2, *(void ***)(v2 + 16), **(void **)(v2 + 24));
}

unint64_t sub_10022EDB0()
{
  unint64_t result = qword_100483590;
  if (!qword_100483590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483590);
  }
  return result;
}

unint64_t sub_10022EE04()
{
  unint64_t result = qword_100483598;
  if (!qword_100483598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483598);
  }
  return result;
}

unint64_t sub_10022EE58()
{
  unint64_t result = qword_1004835A0;
  if (!qword_1004835A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004835A0);
  }
  return result;
}

unint64_t sub_10022EEAC()
{
  unint64_t result = qword_1004835B8;
  if (!qword_1004835B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004835B8);
  }
  return result;
}

unint64_t sub_10022EF00()
{
  unint64_t result = qword_1004835C8;
  if (!qword_1004835C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004835C8);
  }
  return result;
}

unint64_t sub_10022EF54()
{
  unint64_t result = qword_1004835E8;
  if (!qword_1004835E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004835E8);
  }
  return result;
}

unint64_t sub_10022EFA8()
{
  unint64_t result = qword_1004835F8;
  if (!qword_1004835F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004835F8);
  }
  return result;
}

unint64_t sub_10022EFFC()
{
  unint64_t result = qword_100483608;
  if (!qword_100483608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483608);
  }
  return result;
}

unint64_t sub_10022F050()
{
  unint64_t result = qword_100483618;
  if (!qword_100483618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483618);
  }
  return result;
}

unint64_t sub_10022F0A4()
{
  unint64_t result = qword_100483620;
  if (!qword_100483620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483620);
  }
  return result;
}

unint64_t sub_10022F0F8()
{
  unint64_t result = qword_100483638;
  if (!qword_100483638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483638);
  }
  return result;
}

unint64_t sub_10022F14C()
{
  unint64_t result = qword_100483640;
  if (!qword_100483640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483640);
  }
  return result;
}

unint64_t sub_10022F1A0()
{
  unint64_t result = qword_100483658;
  if (!qword_100483658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483658);
  }
  return result;
}

unint64_t sub_10022F1F4()
{
  unint64_t result = qword_100483668;
  if (!qword_100483668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483668);
  }
  return result;
}

unint64_t sub_10022F248()
{
  unint64_t result = qword_100483670;
  if (!qword_100483670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483670);
  }
  return result;
}

unint64_t sub_10022F29C()
{
  unint64_t result = qword_100483680;
  if (!qword_100483680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483680);
  }
  return result;
}

unint64_t sub_10022F2F0()
{
  unint64_t result = qword_100483690;
  if (!qword_100483690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483690);
  }
  return result;
}

unint64_t sub_10022F344()
{
  unint64_t result = qword_1004836A8;
  if (!qword_1004836A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004836A8);
  }
  return result;
}

unint64_t sub_10022F398()
{
  unint64_t result = qword_1004836B0;
  if (!qword_1004836B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004836B0);
  }
  return result;
}

unint64_t sub_10022F3EC()
{
  unint64_t result = qword_1004836B8;
  if (!qword_1004836B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004836B8);
  }
  return result;
}

unint64_t sub_10022F440()
{
  unint64_t result = qword_1004836C0;
  if (!qword_1004836C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004836C0);
  }
  return result;
}

unint64_t sub_10022F494()
{
  unint64_t result = qword_1004836D8;
  if (!qword_1004836D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004836D8);
  }
  return result;
}

unint64_t sub_10022F4E8()
{
  unint64_t result = qword_1004836E8;
  if (!qword_1004836E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004836E8);
  }
  return result;
}

unint64_t sub_10022F53C()
{
  unint64_t result = qword_1004836F8;
  if (!qword_1004836F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004836F8);
  }
  return result;
}

unint64_t sub_10022F590()
{
  unint64_t result = qword_100483708;
  if (!qword_100483708)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483708);
  }
  return result;
}

unint64_t sub_10022F5E4()
{
  unint64_t result = qword_100483718;
  if (!qword_100483718)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483718);
  }
  return result;
}

unint64_t sub_10022F638()
{
  unint64_t result = qword_100483720;
  if (!qword_100483720)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483720);
  }
  return result;
}

uint64_t sub_10022F68C(unint64_t a1, unint64_t a2)
{
  return sub_10020B52C(a1, a2, *(void ***)(v2 + 16), *(void *)(v2 + 24));
}

unint64_t sub_10022F694()
{
  unint64_t result = qword_100483738;
  if (!qword_100483738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483738);
  }
  return result;
}

unint64_t sub_10022F6E8()
{
  unint64_t result = qword_100483740;
  if (!qword_100483740)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483740);
  }
  return result;
}

unint64_t sub_10022F73C()
{
  unint64_t result = qword_100483748;
  if (!qword_100483748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483748);
  }
  return result;
}

unint64_t sub_10022F790()
{
  unint64_t result = qword_100483750;
  if (!qword_100483750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483750);
  }
  return result;
}

unint64_t sub_10022F7E4()
{
  unint64_t result = qword_100483760;
  if (!qword_100483760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483760);
  }
  return result;
}

unint64_t sub_10022F838()
{
  unint64_t result = qword_100483780;
  if (!qword_100483780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483780);
  }
  return result;
}

unint64_t sub_10022F88C()
{
  unint64_t result = qword_100483790;
  if (!qword_100483790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483790);
  }
  return result;
}

unint64_t sub_10022F8E0()
{
  unint64_t result = qword_1004837B8;
  if (!qword_1004837B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004837B8);
  }
  return result;
}

unint64_t sub_10022F934()
{
  unint64_t result = qword_1004837C0;
  if (!qword_1004837C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004837C0);
  }
  return result;
}

unint64_t sub_10022F988()
{
  unint64_t result = qword_1004837D0;
  if (!qword_1004837D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004837D0);
  }
  return result;
}

unint64_t sub_10022F9DC()
{
  unint64_t result = qword_1004837D8;
  if (!qword_1004837D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004837D8);
  }
  return result;
}

unint64_t sub_10022FA30()
{
  unint64_t result = qword_1004837F0;
  if (!qword_1004837F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004837F0);
  }
  return result;
}

unsigned char *_s7CoreP2P12NANAttributeO18WLANInfrastructureV10DeviceRoleOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10022FB50);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.ServiceDescriptor.ServiceFilterControl.CodingKeys()
{
  return &type metadata for NANAttribute.ServiceDescriptor.ServiceFilterControl.CodingKeys;
}

unsigned char *_s7CoreP2P12NANAttributeO8DatapathV13AttributeTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10022FC54);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.ExtendedWLANInfrastructure.CodingKeys()
{
  return &type metadata for NANAttribute.ExtendedWLANInfrastructure.CodingKeys;
}

unint64_t sub_10022FC90()
{
  unint64_t result = qword_100483818;
  if (!qword_100483818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483818);
  }
  return result;
}

unint64_t sub_10022FCE8()
{
  unint64_t result = qword_100483820;
  if (!qword_100483820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483820);
  }
  return result;
}

unint64_t sub_10022FD40()
{
  unint64_t result = qword_100483828;
  if (!qword_100483828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483828);
  }
  return result;
}

unint64_t sub_10022FD98()
{
  unint64_t result = qword_100483830;
  if (!qword_100483830)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483830);
  }
  return result;
}

unint64_t sub_10022FDF0()
{
  unint64_t result = qword_100483838;
  if (!qword_100483838)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483838);
  }
  return result;
}

unint64_t sub_10022FE48()
{
  unint64_t result = qword_100483840;
  if (!qword_100483840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483840);
  }
  return result;
}

uint64_t SymmetricKey.rawRepresentation.getter()
{
  return sub_10022FFB4((uint64_t)sub_100079094, (void (*)(uint64_t *__return_ptr, uint64_t, void, void *))&SymmetricKey.withUnsafeBytes<A>(_:));
}

uint64_t HashedAuthenticationCode.rawRepresentation.getter()
{
  HashedAuthenticationCode.withUnsafeBytes<A>(_:)();
  return v1;
}

uint64_t SharedSecret.rawRepresentation.getter()
{
  return sub_10022FFB4((uint64_t)sub_100079094, (void (*)(uint64_t *__return_ptr, uint64_t, void, void *))&SharedSecret.withUnsafeBytes<A>(_:));
}

uint64_t sub_10022FFB4(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t, void, void *))
{
  a2(&v3, a1, 0, &type metadata for Data);
  return v3;
}

uint64_t P256.KeyAgreement.PublicKey.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100230288(a1, (uint64_t (*)(void))&type metadata accessor for P256.KeyAgreement.PublicKey, (void (*)(_OWORD *, void *, void *))&P256.KeyAgreement.PublicKey.init<A>(rawRepresentation:), a2);
}

uint64_t static P256.KeyAgreement.PublicKey.== infix(_:_:)()
{
  uint64_t v0 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  unint64_t v2 = v1;
  uint64_t v3 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  unint64_t v5 = v4;
  char v6 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v0, v2, v3, v4);
  sub_10000C970(v3, v5);
  sub_10000C970(v0, v2);
  return v6 & 1;
}

uint64_t P256.KeyAgreement.PublicKey.hash(into:)()
{
  uint64_t v0 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  unint64_t v2 = v1;
  Data.hash(into:)();

  return sub_10000C970(v0, v2);
}

Swift::Int P256.KeyAgreement.PublicKey.hashValue.getter()
{
  Hasher.init(_seed:)();
  uint64_t v0 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  unint64_t v2 = v1;
  Data.hash(into:)();
  sub_10000C970(v0, v2);
  return Hasher._finalize()();
}

uint64_t sub_10023017C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return P256.KeyAgreement.PublicKey.init(from:)(a1, a2);
}

Swift::Int sub_100230194()
{
  Hasher.init(_seed:)();
  uint64_t v0 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  unint64_t v2 = v1;
  Data.hash(into:)();
  sub_10000C970(v0, v2);
  return Hasher._finalize()();
}

uint64_t P256.Signing.PrivateKey.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100230288(a1, (uint64_t (*)(void))&type metadata accessor for P256.Signing.PrivateKey, (void (*)(_OWORD *, void *, void *))&P256.Signing.PrivateKey.init<A>(rawRepresentation:), a2);
}

uint64_t sub_100230230@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return P256.Signing.PrivateKey.init(from:)(a1, a2);
}

uint64_t P256.Signing.PublicKey.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100230288(a1, (uint64_t (*)(void))&type metadata accessor for P256.Signing.PublicKey, (void (*)(_OWORD *, void *, void *))&P256.Signing.PublicKey.init<A>(rawRepresentation:), a2);
}

uint64_t sub_100230288@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X1>, void (*a3)(_OWORD *, void *, void *)@<X2>, uint64_t a4@<X8>)
{
  unint64_t v17 = a3;
  uint64_t v7 = a2(0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  BOOL v10 = (char *)&v13 - v9;
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v4)
  {
    uint64_t v13 = v7;
    uint64_t v14 = v8;
    unint64_t v11 = v17;
    sub_1000369C4(v16, v16[3]);
    sub_10008B6F4();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    v15[0] = v15[1];
    v11(v15, &type metadata for Data, &protocol witness table for Data);
    sub_100010754((uint64_t)v16);
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(a4, v10, v13);
  }
  return sub_100010754((uint64_t)a1);
}

uint64_t sub_100230440@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return P256.Signing.PublicKey.init(from:)(a1, a2);
}

uint64_t P256.Signing.ECDSASignature.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for P256.Signing.ECDSASignature();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    sub_1000369C4(v11, v11[3]);
    sub_10008B6F4();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    v10[0] = v10[1];
    sub_100074B70();
    P256.Signing.ECDSASignature.init<A>(rawRepresentation:)();
    sub_100010754((uint64_t)v11);
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a2, v8, v5);
  }
  return sub_100010754((uint64_t)a1);
}

uint64_t sub_100230600@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return P256.Signing.ECDSASignature.init(from:)(a1, a2);
}

unint64_t sub_10023061C()
{
  unint64_t result = qword_100483848;
  if (!qword_100483848)
  {
    type metadata accessor for P256.KeyAgreement.PublicKey();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483848);
  }
  return result;
}

uint64_t NANManagementFrameType.init(frameType:frameSubtype:)(char a1, unsigned __int8 a2)
{
  if (a1 == 19) {
    return 14;
  }
  if (a1 != 24) {
    return 15;
  }
  uint64_t result = _s7CoreP2P21NANActionFrameSubtypeO8rawValueACSgs5UInt8V_tcfC_0(a2);
  if (result == 14) {
    return 15;
  }
  return result;
}

BOOL static NANManagementFrameType.__derived_enum_equals(_:_:)(char a1, char a2)
{
  if (a1 == 14) {
    return a2 == 14;
  }
  if (a2 == 14) {
    return 0;
  }
  return byte_1003D30F8[a1] == byte_1003D30F8[a2];
}

void *NANInformationElement.ouiType.unsafeMutableAddressor()
{
  return &static NANInformationElement.ouiType;
}

uint64_t NANManagementFrameType.init(from:)(void *a1)
{
  return sub_100231198(a1);
}

uint64_t NANManagementFrameType.encode(to:)(void *a1, unsigned __int8 a2)
{
  int v3 = a2;
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  sub_100039448((uint64_t)v5, v6);
  if (v3 == 14) {
    goto LABEL_4;
  }
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  if (!v2)
  {
    sub_100039448((uint64_t)v5, v6);
LABEL_4:
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  }
  return sub_100010754((uint64_t)v5);
}

uint64_t NANActionFrameSubtype.rawValue.getter(char a1)
{
  return byte_1003D30F8[a1];
}

uint64_t NANManagementFrameType.description.getter(char a1)
{
  if (a1 == 14) {
    return 0xD000000000000011;
  }
  v2._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  return 0x206E6F69746361;
}

void NANManagementFrameType.hash(into:)(uint64_t a1, char a2)
{
  if (a2 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(byte_1003D30F8[a2]);
  }
}

Swift::Int NANManagementFrameType.hashValue.getter(unsigned __int8 a1)
{
  int v2 = a1;
  Hasher.init(_seed:)();
  if (v2 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(byte_1003D30F8[(char)a1]);
  }
  return Hasher._finalize()();
}

Swift::Int sub_1002309B0()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(byte_1003D30F8[v1]);
  }
  return Hasher._finalize()();
}

void sub_100230A20()
{
  uint64_t v1 = *v0;
  if (v1 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(byte_1003D30F8[v1]);
  }
}

Swift::Int sub_100230A74()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(byte_1003D30F8[v1]);
  }
  return Hasher._finalize()();
}

uint64_t sub_100230AE0@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100231198(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_100230B0C(void *a1)
{
  return NANManagementFrameType.encode(to:)(a1, *v1);
}

uint64_t sub_100230B28()
{
  return NANManagementFrameType.description.getter(*v0);
}

BOOL sub_100230B30(char *a1, char *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (v2 == 14) {
    return v3 == 14;
  }
  if (v3 == 14) {
    return 0;
  }
  return byte_1003D30F8[v2] == byte_1003D30F8[v3];
}

BOOL sub_100230B7C(char *a1, char *a2)
{
  return byte_1003D30F8[*a1] == byte_1003D30F8[*a2];
}

uint64_t sub_100230BA0@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = _s7CoreP2P21NANActionFrameSubtypeO8rawValueACSgs5UInt8V_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_100230BCC(unsigned char *a1@<X8>)
{
  *a1 = byte_1003D30F8[*v1];
}

Swift::Int sub_100230BE4()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(byte_1003D30F8[v1]);
  return Hasher._finalize()();
}

void sub_100230C34()
{
  Hasher._combine(_:)(byte_1003D30F8[*v0]);
}

Swift::Int sub_100230C6C()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(byte_1003D30F8[v1]);
  return Hasher._finalize()();
}

void NANInformationElement.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    uint64_t v5 = *(void *)(type metadata accessor for NANAttribute(0) - 8);
    uint64_t v6 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v7 = *(void *)(v5 + 72);
    swift_bridgeObjectRetain();
    do
    {
      NANAttribute.hash(into:)(a1);
      v6 += v7;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
}

Swift::Int NANInformationElement.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  Swift::UInt v2 = *(void *)(a1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    uint64_t v3 = *(void *)(type metadata accessor for NANAttribute(0) - 8);
    uint64_t v4 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v5 = *(void *)(v3 + 72);
    swift_bridgeObjectRetain();
    do
    {
      NANAttribute.hash(into:)((uint64_t)v7);
      v4 += v5;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

Swift::Int sub_100230E70()
{
  return NANInformationElement.hashValue.getter(*v0);
}

void sub_100230E78(uint64_t a1)
{
  NANInformationElement.hash(into:)(a1, *v1);
}

Swift::Int sub_100230E80()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Swift::UInt v2 = *(void *)(v1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    uint64_t v3 = *(void *)(type metadata accessor for NANAttribute(0) - 8);
    uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v5 = *(void *)(v3 + 72);
    swift_bridgeObjectRetain();
    do
    {
      NANAttribute.hash(into:)((uint64_t)v7);
      v4 += v5;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

uint64_t sub_100230F50@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = NANInformationElement.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t NANInformationElement.init(from:)(void *a1)
{
  return sub_100231438(a1);
}

uint64_t sub_100230F94(void *a1)
{
  return NANInformationElement.encode(to:)(a1, *v1);
}

uint64_t NANInformationElement.encode(to:)(void *a1, uint64_t a2)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  sub_100039448((uint64_t)v5, v6);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  if (!v2)
  {
    uint64_t v7 = a2;
    sub_100039448((uint64_t)v5, v6);
    sub_100010BCC(&qword_10047DCD8);
    sub_1001D9008();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return sub_100010754((uint64_t)v5);
}

uint64_t sub_100231094(uint64_t *a1, uint64_t *a2)
{
  return _s7CoreP2P21NANInformationElementV23__derived_struct_equalsySbAC_ACtFZ_0(*a1, *a2);
}

uint64_t _s7CoreP2P21NANActionFrameSubtypeO8rawValueACSgs5UInt8V_tcfC_0(unsigned __int8 a1)
{
  int v1 = a1;
  int v2 = a1 - 1;
  uint64_t result = 1;
  switch(v2)
  {
    case 0:
      uint64_t result = 0;
      break;
    case 1:
      return result;
    case 2:
      uint64_t result = 2;
      break;
    case 3:
      uint64_t result = 3;
      break;
    case 4:
      uint64_t result = 4;
      break;
    case 5:
      uint64_t result = 5;
      break;
    case 6:
      uint64_t result = 6;
      break;
    case 7:
      uint64_t result = 7;
      break;
    case 8:
      uint64_t result = 8;
      break;
    case 9:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      goto LABEL_5;
    case 10:
      uint64_t result = 10;
      break;
    case 11:
      uint64_t result = 11;
      break;
    case 12:
      uint64_t result = 12;
      break;
    case 18:
      uint64_t result = 9;
      break;
    default:
      if (v1 == 221) {
        uint64_t result = 13;
      }
      else {
LABEL_5:
      }
        uint64_t result = 14;
      break;
  }
  return result;
}

uint64_t sub_100231198(void *a1)
{
  uint64_t v3 = (uint64_t)sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v1) {
    goto LABEL_4;
  }
  sub_100039448((uint64_t)v13, v14);
  char v4 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
  if (v4 == 19)
  {
    uint64_t v3 = 14;
    goto LABEL_12;
  }
  if (v4 == 24)
  {
    sub_100039448((uint64_t)v13, v14);
    unsigned __int8 v6 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    uint64_t v3 = _s7CoreP2P21NANActionFrameSubtypeO8rawValueACSgs5UInt8V_tcfC_0(v6);
    if (v3 == 14)
    {
      sub_100035FD4((uint64_t)v13, (uint64_t)v12);
      unint64_t v11 = 0;
      _StringGuts.grow(_:)(61);
      v7._object = (void *)0x80000001003DE9E0;
      v7._countAndFlagsBits = 0xD000000000000030;
      String.append(_:)(v7);
      v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      v9._countAndFlagsBits = 0x6570797462757320;
      v9._object = (void *)0xE900000000000020;
      String.append(_:)(v9);
      goto LABEL_14;
    }
LABEL_12:
    sub_100010754((uint64_t)v13);
    sub_100010754((uint64_t)a1);
    return v3;
  }
  sub_100035FD4((uint64_t)v13, (uint64_t)v12);
  _StringGuts.grow(_:)(50);
  swift_bridgeObjectRelease();
  unint64_t v11 = 0xD000000000000030;
LABEL_14:
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  uint64_t v3 = v11;
  type metadata accessor for DecodingError();
  swift_allocError();
  static DecodingError.dataCorruptedError(in:debugDescription:)();
  swift_bridgeObjectRelease();
  sub_100010754((uint64_t)v12);
  swift_willThrow();
  sub_100010754((uint64_t)v13);
LABEL_4:
  sub_100010754((uint64_t)a1);
  return v3;
}

uint64_t sub_100231438(void *a1)
{
  uint64_t v3 = (uint64_t)sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (!v1)
  {
    uint64_t v3 = sub_100039448((uint64_t)v10, v11);
    if (dispatch thunk of UnkeyedDecodingContainer.decode(_:)() == 19)
    {
      uint64_t v4 = v11;
      uint64_t v5 = v12;
      sub_100039448((uint64_t)v10, v11);
      unsigned __int8 v6 = (void *)type metadata accessor for NANAttribute(0);
      uint64_t v7 = sub_1002319B4(&qword_10047E798);
      uint64_t v3 = UnkeyedDecodingContainer.inferredArrayDecode<A>()(v4, v6, v5, v7);
    }
    else
    {
      sub_10000F000();
      swift_allocError();
      *(_OWORD *)uint64_t v8 = xmmword_1003B00B0;
      *(unsigned char *)(v8 + 16) = 2;
      swift_willThrow();
    }
    sub_100010754((uint64_t)v10);
  }
  sub_100010754((uint64_t)a1);
  return v3;
}

unint64_t sub_1002315AC()
{
  unint64_t result = qword_100483850;
  if (!qword_100483850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483850);
  }
  return result;
}

unint64_t sub_100231604()
{
  unint64_t result = qword_100483858;
  if (!qword_100483858)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483858);
  }
  return result;
}

unint64_t sub_10023165C()
{
  unint64_t result = qword_100483860;
  if (!qword_100483860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483860);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for NANManagementFrameType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF2)
  {
    unsigned int v2 = a2 + 14;
    if (a2 + 14 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 14;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 14;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x10023175CLL);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 14;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  BOOL v8 = v7 >= 0xE;
  unsigned int v9 = v7 - 14;
  if (!v8) {
    unsigned int v9 = -1;
  }
  if (v9 + 1 >= 2) {
    return v9;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for NANManagementFrameType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 14;
  if (a3 + 14 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xF2) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xF1)
  {
    unsigned int v7 = ((a2 - 242) >> 8) + 1;
    *unint64_t result = a2 + 14;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x100231844);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *unint64_t result = a2 + 14;
        break;
    }
  }
  return result;
}

uint64_t sub_10023186C(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 0xE) {
    return v1 - 13;
  }
  else {
    return 0;
  }
}

unsigned char *sub_100231880(unsigned char *result, int a2)
{
  if (a2) {
    *unint64_t result = a2 + 13;
  }
  return result;
}

ValueMetadata *type metadata accessor for NANManagementFrameType()
{
  return &type metadata for NANManagementFrameType;
}

unsigned char *storeEnumTagSinglePayload for NANActionFrameSubtype(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF2)
  {
    unsigned int v6 = ((a2 - 243) >> 8) + 1;
    *unint64_t result = a2 + 13;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10023196CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 13;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANActionFrameSubtype()
{
  return &type metadata for NANActionFrameSubtype;
}

ValueMetadata *type metadata accessor for NANInformationElement()
{
  return &type metadata for NANInformationElement;
}

uint64_t sub_1002319B4(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for NANAttribute(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *NANConstants.csaMatterServiceName.unsafeMutableAddressor()
{
  if (qword_10047C278 != -1) {
    swift_once();
  }
  return &static NANConstants.csaMatterServiceName;
}

uint64_t sub_100231A44(uint64_t a1)
{
  return sub_100231BA8(a1, 0x74656E7265746E69, 0xE800000000000000, &static NANConstants.internetSharingServiceName, &qword_1004886D0);
}

uint64_t *NANConstants.internetSharingServiceName.unsafeMutableAddressor()
{
  if (qword_10047C268 != -1) {
    swift_once();
  }
  return &static NANConstants.internetSharingServiceName;
}

uint64_t static NANConstants.internetSharingServiceName.getter()
{
  return sub_100231C10(&qword_10047C268, &static NANConstants.internetSharingServiceName);
}

uint64_t sub_100231ADC(uint64_t a1)
{
  return sub_100231BA8(a1, 0xD000000000000012, 0x80000001003DEA20, &static NANConstants.airplayServiceName, &qword_1004886E0);
}

uint64_t *NANConstants.airplayServiceName.unsafeMutableAddressor()
{
  if (qword_10047C270 != -1) {
    swift_once();
  }
  return &static NANConstants.airplayServiceName;
}

uint64_t static NANConstants.airplayServiceName.getter()
{
  return sub_100231C10(&qword_10047C270, &static NANConstants.airplayServiceName);
}

uint64_t sub_100231B78(uint64_t a1)
{
  return sub_100231BA8(a1, 0x6372657474616D5FLL, 0xED00007064755F2ELL, &static NANConstants.csaMatterServiceName, &qword_1004886F0);
}

uint64_t sub_100231BA8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4, void *a5)
{
  uint64_t result = _s7CoreP2P14NANServiceNameVyACSgSScfC_0(a2, a3);
  if (v8)
  {
    *a4 = result;
    *a5 = v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static NANConstants.csaMatterServiceName.getter()
{
  return sub_100231C10(&qword_10047C278, &static NANConstants.csaMatterServiceName);
}

uint64_t sub_100231C10(void *a1, uint64_t *a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = *a2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t sub_100231C64(uint64_t a1)
{
  return sub_100231DD4(a1, static NANConstants.maximumServiceRetryRate, 2);
}

uint64_t NANConstants.maximumServiceRetryRate.unsafeMutableAddressor()
{
  return sub_100231E8C(&qword_10047C280, (uint64_t)static NANConstants.maximumServiceRetryRate);
}

uint64_t static NANConstants.maximumServiceRetryRate.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100231F04(&qword_10047C280, (uint64_t)static NANConstants.maximumServiceRetryRate, a1);
}

uint64_t sub_100231CBC(uint64_t a1)
{
  return sub_100231DD4(a1, static NANConstants.serviceTerminateEventTimeout, 4);
}

uint64_t NANConstants.serviceTerminateEventTimeout.unsafeMutableAddressor()
{
  return sub_100231E8C(&qword_10047C288, (uint64_t)static NANConstants.serviceTerminateEventTimeout);
}

uint64_t static NANConstants.serviceTerminateEventTimeout.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100231F04(&qword_10047C288, (uint64_t)static NANConstants.serviceTerminateEventTimeout, a1);
}

uint64_t sub_100231D14(uint64_t a1)
{
  return sub_100231DD4(a1, static NANConstants.authenticationRequestTimeout, 8);
}

uint64_t NANConstants.authenticationRequestTimeout.unsafeMutableAddressor()
{
  return sub_100231E8C(&qword_10047C290, (uint64_t)static NANConstants.authenticationRequestTimeout);
}

uint64_t static NANConstants.authenticationRequestTimeout.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100231F04(&qword_10047C290, (uint64_t)static NANConstants.authenticationRequestTimeout, a1);
}

uint64_t sub_100231D6C(uint64_t a1)
{
  return sub_100231DD4(a1, static NANConstants.followUpTimeout, 7);
}

uint64_t NANConstants.followUpTimeout.unsafeMutableAddressor()
{
  return sub_100231E8C(&qword_10047C298, (uint64_t)static NANConstants.followUpTimeout);
}

uint64_t static NANConstants.followUpTimeout.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100231F04(&qword_10047C298, (uint64_t)static NANConstants.followUpTimeout, a1);
}

uint64_t sub_100231DC4(uint64_t a1)
{
  return sub_100231DD4(a1, static NANConstants.keepAliveTimeout, 17);
}

uint64_t sub_100231DD4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for DispatchTimeInterval();
  sub_10001D880(v5, a2);
  *(void *)sub_1000151B8(v5, (uint64_t)a2) = a3;
  unsigned int v6 = *(uint64_t (**)(void))(*(void *)(v5 - 8) + 104);

  return v6();
}

uint64_t NANConstants.keepAliveTimeout.unsafeMutableAddressor()
{
  return sub_100231E8C(&qword_10047C2A0, (uint64_t)static NANConstants.keepAliveTimeout);
}

uint64_t sub_100231E8C(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for DispatchTimeInterval();

  return sub_1000151B8(v3, a2);
}

uint64_t static NANConstants.keepAliveTimeout.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100231F04(&qword_10047C2A0, (uint64_t)static NANConstants.keepAliveTimeout, a1);
}

uint64_t sub_100231F04@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for DispatchTimeInterval();
  uint64_t v6 = sub_1000151B8(v5, a2);
  unsigned int v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v7(a3, v6, v5);
}

ValueMetadata *type metadata accessor for NANConstants()
{
  return &type metadata for NANConstants;
}

uint64_t sub_100231FAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = __chkstk_darwin(a1);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v16(v12, v12 + *(void *)(*(void *)(v15 - 8) + 64), v14);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  }
  return result;
}

uint64_t sub_1002320A0(uint64_t result, uint64_t a2, char *a3)
{
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | result & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    return swift_bridgeObjectRelease();
  }
  if ((a2 & 0x2000000000000000) != 0)
  {
    *(void *)__src = result;
    uint64_t v10 = a2 & 0xFFFFFFFFFFFFFFLL;
    if (a3)
    {
      size_t v8 = String.count.getter();
      strncpy(a3, __src, v8);
      return swift_bridgeObjectRelease();
    }
    __break(1u);
  }
  else
  {
    if ((result & 0x1000000000000000) != 0)
    {
      uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else
    {
      uint64_t result = _StringObject.sharedUTF8.getter();
      uint64_t v4 = result;
      if (!result)
      {
        if (a3)
        {
          size_t v5 = String.count.getter();
          uint64_t v6 = a3;
          unsigned int v7 = 0;
          goto LABEL_8;
        }
        goto LABEL_18;
      }
    }
    if (a3)
    {
      size_t v5 = String.count.getter();
      uint64_t v6 = a3;
      unsigned int v7 = (const char *)v4;
LABEL_8:
      strncpy(v6, v7, v5);
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

void sub_1002321FC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  if (a3) {
    AppleDevice.setRequest(requestType:data:on:)(0xFFFFFFFFuLL, a1, a2, 0, a4, a5);
  }
  else {
    AppleDevice.getRequest(requestType:data:on:)(0xFFFFFFFFuLL, a1, a2, 0, a4, a5);
  }
}

uint64_t BroadcomDevice<>.send(command:set:on:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))(a8 + 32))(0xFFFFFFFFLL, a1, a2, 0, a4, a5, a6);
  }
  else {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))(a8 + 24))(0xFFFFFFFFLL, a1, a2, 0, a4, a5, a6);
  }
}

uint64_t sub_1002322C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = __chkstk_darwin(a1);
  uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v15(v12, v14);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  }
  return result;
}

uint64_t sub_10023239C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3;
  uint64_t v17 = *(void *)(a3 + 16);
  if (v17)
  {
    size_t v5 = (uint64_t (*)(void *))result;
    unint64_t v6 = 0;
    unsigned int v7 = (uint64_t *)(a3 + 40);
    uint64_t v8 = _swiftEmptyArrayStorage;
    uint64_t v15 = (uint64_t (*)(void *))result;
    while (v6 < *(void *)(v4 + 16))
    {
      uint64_t v10 = *(v7 - 1);
      uint64_t v9 = *v7;
      v18[0] = v10;
      v18[1] = v9;
      swift_bridgeObjectRetain();
      char v11 = v5(v18);
      if (v3)
      {
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_16;
      }
      if (v11)
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        int v19 = v8;
        if ((result & 1) == 0)
        {
          uint64_t result = sub_10008345C(0, v8[2] + 1, 1);
          uint64_t v8 = v19;
        }
        unint64_t v13 = v8[2];
        unint64_t v12 = v8[3];
        if (v13 >= v12 >> 1)
        {
          uint64_t result = sub_10008345C(v12 > 1, v13 + 1, 1);
          uint64_t v8 = v19;
        }
        v8[2] = v13 + 1;
        uint64_t v14 = &v8[2 * v13];
        v14[4] = v10;
        v14[5] = v9;
        uint64_t v4 = a3;
        size_t v5 = v15;
      }
      else
      {
        uint64_t result = swift_bridgeObjectRelease();
      }
      ++v6;
      v7 += 2;
      if (v17 == v6) {
        goto LABEL_16;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
LABEL_16:
    swift_bridgeObjectRelease();
    return (uint64_t)v8;
  }
  return result;
}

uint64_t sub_100232514@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = a3;
  uint64_t v5 = type metadata accessor for P256.Signing.ECDSASignature();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v18[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100013D44(a1, a2);
  unint64_t v9 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v10 = type metadata accessor for BinaryDecoder();
  char v11 = (void *)swift_allocObject();
  v11[5] = _swiftEmptyDictionarySingleton;
  v11[2] = a1;
  v11[3] = a2;
  uint64_t v12 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v12 = (int)a1;
      break;
    case 2uLL:
      uint64_t v12 = *(void *)(a1 + 16);
      break;
    default:
      break;
  }
  void v11[4] = v12;
  swift_beginAccess();
  v11[5] = v9;
  swift_bridgeObjectRelease();
  v19[3] = &type metadata for BinaryDecoder.UnkeyedContainer;
  v19[4] = sub_10008B64C();
  v19[0] = v11;
  uint64_t v13 = *(void *)sub_100039448((uint64_t)v19, (uint64_t)&type metadata for BinaryDecoder.UnkeyedContainer);
  v18[3] = v10;
  v18[4] = sub_10024DC6C((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
  v18[0] = v13;
  swift_retain();
  uint64_t v14 = v19[9];
  P256.Signing.ECDSASignature.init(from:)(v18, (uint64_t)v8);
  if (!v14)
  {
    uint64_t v15 = v17;
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v17, v8, v5);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v15, 0, 1, v5);
  }
  return sub_100010754((uint64_t)v19);
}

uint64_t sub_100232768(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  sub_100013D44(a2, a3);
  unint64_t v7 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v8 = type metadata accessor for BinaryDecoder();
  unint64_t v9 = (void *)swift_allocObject();
  v9[5] = &_swiftEmptyDictionarySingleton;
  v9[2] = a2;
  v9[3] = a3;
  uint64_t v10 = 0;
  switch(v6)
  {
    case 1uLL:
      uint64_t v10 = (int)a2;
      break;
    case 2uLL:
      uint64_t v10 = *(void *)(a2 + 16);
      break;
    default:
      break;
  }
  v9[4] = v10;
  swift_beginAccess();
  v9[5] = v7;
  swift_bridgeObjectRelease();
  v16[3] = &type metadata for BinaryDecoder.UnkeyedContainer;
  void v16[4] = sub_10008B64C();
  v16[0] = v9;
  uint64_t v11 = *(void *)sub_100039448((uint64_t)v16, (uint64_t)&type metadata for BinaryDecoder.UnkeyedContainer);
  v15[3] = v8;
  v15[4] = sub_10024DC6C((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
  v15[0] = v11;
  swift_retain();
  uint64_t v12 = sub_1002616B0(v15);
  if (v3) {
    return sub_100010754((uint64_t)v16);
  }
  uint64_t v14 = v12 & 0xFFFFFFFFFFFFLL;
  sub_100010754((uint64_t)v16);
  return v14;
}

uint64_t sub_100232910(unint64_t a1, unint64_t a2, void **a3, uint64_t a4)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (*(void *)(a4 + 16) <= a2)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = a3;
  unint64_t v5 = a1;
  char v7 = *(unsigned char *)(a4 + a2 + 32);
  unint64_t v6 = *a3;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v4 = v6;
  if (result)
  {
    if ((v5 & 0x8000000000000000) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
LABEL_9:
  uint64_t result = (uint64_t)sub_1001DFD70(v6);
  unint64_t v6 = (void *)result;
  if ((v5 & 0x8000000000000000) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if (v6[2] > v5)
  {
    *((unsigned char *)v6 + v5 + 32) |= v7;
    *uint64_t v4 = v6;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

void *BroadcomCapabilities.supportsExtendedMessage.unsafeMutableAddressor()
{
  return &static BroadcomCapabilities.supportsExtendedMessage;
}

uint64_t AppleBroadcomDriver.capabilities.getter()
{
  if (*(void *)(v0 + 72))
  {
    uint64_t v1 = *(void *)(v0 + 72);
  }
  else
  {
    uint64_t v1 = sub_100232A14();
    *(void *)(v0 + 72) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_100232A14()
{
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t v54 = 0x40000000000;
  unint64_t v55 = __DataStorage.init(length:)() | 0x4000000000000000;
  v52 = &v56;
  uint64_t v0 = sub_10024BEC8((void *(*)(uint64_t *__return_ptr, char *, char *))sub_10024DE10);
  unint64_t v2 = v1;
  v53[0] = 32;
  v53[1] = 0xE100000000000000;
  __chkstk_darwin();
  v49 = v53;
  swift_bridgeObjectRetain();
  uint64_t v3 = sub_10024AFA0(0x7FFFFFFFFFFFFFFFLL, 1, sub_10024C628, (uint64_t)v48, (uint64_t)v0, v2);
  uint64_t v50 = 0;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(v3 + 16);
  unint64_t v5 = _swiftEmptyArrayStorage;
  if (v4)
  {
    unint64_t v6 = (void *)(v3 + 56);
    do
    {
      unint64_t v11 = *(v6 - 3);
      if (!((*(v6 - 2) ^ v11) >> 14))
      {
        long long v51 = *((_OWORD *)v6 - 1);
        uint64_t v12 = *v6;
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v53[0] = v5;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_100083838(0, v5[2] + 1, 1);
          unint64_t v5 = (void *)v53[0];
        }
        unint64_t v8 = v5[2];
        unint64_t v7 = v5[3];
        long long v9 = v51;
        if (v8 >= v7 >> 1)
        {
          sub_100083838(v7 > 1, v8 + 1, 1);
          long long v9 = v51;
          unint64_t v5 = (void *)v53[0];
        }
        v5[2] = v8 + 1;
        uint64_t v10 = &v5[4 * v8];
        v10[4] = v11;
        *(_OWORD *)(v10 + 5) = v9;
        v10[7] = v12;
      }
      v6 += 4;
      --v4;
    }
    while (v4);
  }
  swift_bridgeObjectRelease();
  int64_t v14 = v5[2];
  if (v14)
  {
    v53[0] = _swiftEmptyArrayStorage;
    sub_10008345C(0, v14, 0);
    uint64_t v15 = (void *)v53[0];
    uint64_t v16 = v5 + 7;
    do
    {
      swift_bridgeObjectRetain();
      uint64_t v17 = static String._fromSubstring(_:)();
      uint64_t v19 = v18;
      swift_bridgeObjectRelease();
      v53[0] = v15;
      unint64_t v21 = v15[2];
      unint64_t v20 = v15[3];
      if (v21 >= v20 >> 1)
      {
        sub_10008345C(v20 > 1, v21 + 1, 1);
        uint64_t v15 = (void *)v53[0];
      }
      _OWORD v15[2] = v21 + 1;
      uint64_t v22 = &v15[2 * v21];
      v22[4] = v17;
      v22[5] = v19;
      v16 += 4;
      --v14;
    }
    while (v14);
    swift_release();
  }
  else
  {
    swift_release();
    uint64_t v15 = _swiftEmptyArrayStorage;
  }
  __chkstk_darwin();
  v49 = &v56;
  uint64_t v23 = sub_10023239C((uint64_t)sub_10024DE9C, (uint64_t)v48, (uint64_t)v15);
  uint64_t v24 = *(void *)(v23 + 16);
  if (v24)
  {
    swift_bridgeObjectRetain();
    *(void *)&long long v51 = v23;
    char v25 = (uint64_t *)(v23 + 40);
    unint64_t v26 = _swiftEmptyArrayStorage;
    while (1)
    {
      uint64_t v27 = *(v25 - 1);
      uint64_t v28 = *v25;
      BOOL v29 = v27 == 0x646E61626C617564 && v28 == 0xE800000000000000;
      if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
      BOOL v34 = v27 == 7233902 && v28 == 0xE300000000000000;
      if (v34 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v30 = &static WiFiDriverCapabilities.supportsNAN;
        if (qword_10047BF18 != -1)
        {
          swift_once();
          v30 = &static WiFiDriverCapabilities.supportsNAN;
        }
        goto LABEL_26;
      }
      if (v27 == 1818523489 && v28 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v30 = &static WiFiDriverCapabilities.supportsAWDL;
        if (qword_10047BF20 != -1)
        {
          swift_once();
          v30 = &static WiFiDriverCapabilities.supportsAWDL;
        }
        goto LABEL_26;
      }
LABEL_31:
      v25 += 2;
      if (!--v24)
      {
        swift_bridgeObjectRelease();
        goto LABEL_46;
      }
    }
    v30 = &static WiFiDriverCapabilities.supportsSimultaneousDualBand;
    if (qword_10047BF30 != -1)
    {
      swift_once();
      v30 = &static WiFiDriverCapabilities.supportsSimultaneousDualBand;
    }
LABEL_26:
    uint64_t v31 = *v30;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v26 = sub_1000C70E4(0, v26[2] + 1, 1, v26);
    }
    unint64_t v33 = v26[2];
    unint64_t v32 = v26[3];
    if (v33 >= v32 >> 1) {
      unint64_t v26 = sub_1000C70E4((void *)(v32 > 1), v33 + 1, 1, v26);
    }
    v26[2] = v33 + 1;
    v26[v33 + 4] = v31;
    goto LABEL_31;
  }
  unint64_t v26 = _swiftEmptyArrayStorage;
LABEL_46:
  swift_bridgeObjectRelease();
  v53[0] = _swiftEmptyArrayStorage;
  uint64_t v35 = v26[2];
  if (!v35)
  {
    swift_bridgeObjectRelease();
LABEL_69:
    uint64_t v47 = v53[0];
    sub_10000C970(v54, v55);
    return v47;
  }
  swift_bridgeObjectRetain();
  uint64_t v36 = 0;
  while (1)
  {
    uint64_t v37 = v26[v36 + 4];
    v38 = (void *)v53[0];
    uint64_t v39 = *(void *)(v53[0] + 16);
    unint64_t v40 = *(void *)(v37 + 16);
    if (v39)
    {
      swift_bridgeObjectRetain();
      if (!v40) {
        goto LABEL_49;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_1001DFD70(v38);
        v38 = (void *)result;
      }
      unint64_t v42 = 0;
      unint64_t v43 = *(void *)(v37 + 16);
      do
      {
        if (v40 == v42)
        {
          __break(1u);
LABEL_71:
          __break(1u);
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
          goto LABEL_74;
        }
        if (v42 == v43) {
          goto LABEL_71;
        }
        unint64_t v44 = v38[2];
        if (v42 >= v44) {
          goto LABEL_72;
        }
        *((unsigned char *)v38 + v42 + 32) |= *(unsigned char *)(v37 + 32 + v42);
        unint64_t v45 = v42 + 1;
        if (v45 == v39) {
          break;
        }
        unint64_t v46 = v45 - 1;
        if (v46 == v39 - 1) {
          goto LABEL_73;
        }
        unint64_t v42 = v46 + 1;
      }
      while (v42 != v40);
      v53[0] = v38;
      if (v44 >= v43) {
        goto LABEL_49;
      }
    }
    else
    {
      uint64_t result = swift_bridgeObjectRetain();
      unint64_t v44 = 0;
      unint64_t v43 = v40;
      if (!v40) {
        goto LABEL_49;
      }
    }
    if (v40 < v44) {
      break;
    }
    if (v43 < v40) {
      goto LABEL_75;
    }
    sub_1001DFEA8(v37, v37 + 32, v44, (2 * v40) | 1);
LABEL_49:
    ++v36;
    swift_bridgeObjectRelease();
    if (v36 == v35)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_69;
    }
  }
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
  return result;
}

uint64_t BroadcomDriver<>.loadCapabilities()(uint64_t a1, uint64_t a2, void *a3)
{
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t v69 = 0x40000000000;
  unint64_t v70 = __DataStorage.init(length:)() | 0x4000000000000000;
  uint64_t v64 = a1;
  uint64_t v65 = a2;
  v66 = a3;
  uint64_t v67 = v3;
  unint64_t v7 = sub_10024BEC8((void *(*)(uint64_t *__return_ptr, char *, char *))sub_10024C608);
  unint64_t v9 = v8;
  uint64_t v59 = a1;
  uint64_t v60 = a2;
  v61 = a3;
  uint64_t v62 = v67;
  v68[0] = 32;
  v68[1] = 0xE100000000000000;
  __chkstk_darwin();
  uint64_t v56 = v68;
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_10024AFA0(0x7FFFFFFFFFFFFFFFLL, 1, sub_10024C628, (uint64_t)v55, (uint64_t)v7, v9);
  uint64_t v58 = 0;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(v10 + 16);
  uint64_t v12 = _swiftEmptyArrayStorage;
  if (v11)
  {
    uint64_t v13 = (void *)(v10 + 56);
    do
    {
      unint64_t v18 = *(v13 - 3);
      if (!((*(v13 - 2) ^ v18) >> 14))
      {
        long long v63 = *((_OWORD *)v13 - 1);
        uint64_t v19 = *v13;
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v68[0] = v12;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_100083838(0, v12[2] + 1, 1);
          uint64_t v12 = (void *)v68[0];
        }
        unint64_t v15 = v12[2];
        unint64_t v14 = v12[3];
        long long v16 = v63;
        if (v15 >= v14 >> 1)
        {
          sub_100083838(v14 > 1, v15 + 1, 1);
          long long v16 = v63;
          uint64_t v12 = (void *)v68[0];
        }
        v12[2] = v15 + 1;
        uint64_t v17 = &v12[4 * v15];
        v17[4] = v18;
        *(_OWORD *)(v17 + 5) = v16;
        v17[7] = v19;
      }
      v13 += 4;
      --v11;
    }
    while (v11);
  }
  swift_bridgeObjectRelease();
  int64_t v21 = v12[2];
  if (v21)
  {
    v68[0] = _swiftEmptyArrayStorage;
    sub_10008345C(0, v21, 0);
    uint64_t v22 = (void *)v68[0];
    uint64_t v23 = v12 + 7;
    do
    {
      swift_bridgeObjectRetain();
      uint64_t v24 = static String._fromSubstring(_:)();
      uint64_t v26 = v25;
      swift_bridgeObjectRelease();
      v68[0] = v22;
      unint64_t v28 = v22[2];
      unint64_t v27 = v22[3];
      if (v28 >= v27 >> 1)
      {
        sub_10008345C(v27 > 1, v28 + 1, 1);
        uint64_t v22 = (void *)v68[0];
      }
      v22[2] = v28 + 1;
      BOOL v29 = &v22[2 * v28];
      v29[4] = v24;
      v29[5] = v26;
      v23 += 4;
      --v21;
    }
    while (v21);
    swift_release();
  }
  else
  {
    swift_release();
    uint64_t v22 = _swiftEmptyArrayStorage;
  }
  __chkstk_darwin();
  v55[0] = v59;
  v55[1] = v60;
  uint64_t v56 = v61;
  uint64_t v57 = v62;
  *(void *)&long long v63 = sub_10023239C((uint64_t)sub_10024C644, (uint64_t)&v54, (uint64_t)v22);
  uint64_t v30 = *(void *)(v63 + 16);
  if (v30)
  {
    uint64_t v31 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
    unint64_t v32 = _swiftEmptyArrayStorage;
    while (1)
    {
      uint64_t v33 = *(v31 - 1);
      uint64_t v34 = *v31;
      BOOL v35 = v33 == 0x646E61626C617564 && v34 == 0xE800000000000000;
      if (v35 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
      BOOL v40 = v33 == 7233902 && v34 == 0xE300000000000000;
      if (v40 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        uint64_t v36 = &static WiFiDriverCapabilities.supportsNAN;
        if (qword_10047BF18 != -1)
        {
          swift_once();
          uint64_t v36 = &static WiFiDriverCapabilities.supportsNAN;
        }
        goto LABEL_26;
      }
      if (v33 == 1818523489 && v34 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        uint64_t v36 = &static WiFiDriverCapabilities.supportsAWDL;
        if (qword_10047BF20 != -1)
        {
          swift_once();
          uint64_t v36 = &static WiFiDriverCapabilities.supportsAWDL;
        }
        goto LABEL_26;
      }
LABEL_31:
      v31 += 2;
      if (!--v30)
      {
        swift_bridgeObjectRelease();
        goto LABEL_46;
      }
    }
    uint64_t v36 = &static WiFiDriverCapabilities.supportsSimultaneousDualBand;
    if (qword_10047BF30 != -1)
    {
      swift_once();
      uint64_t v36 = &static WiFiDriverCapabilities.supportsSimultaneousDualBand;
    }
LABEL_26:
    uint64_t v37 = *v36;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v32 = sub_1000C70E4(0, v32[2] + 1, 1, v32);
    }
    unint64_t v39 = v32[2];
    unint64_t v38 = v32[3];
    if (v39 >= v38 >> 1) {
      unint64_t v32 = sub_1000C70E4((void *)(v38 > 1), v39 + 1, 1, v32);
    }
    v32[2] = v39 + 1;
    v32[v39 + 4] = v37;
    goto LABEL_31;
  }
  unint64_t v32 = _swiftEmptyArrayStorage;
LABEL_46:
  swift_bridgeObjectRelease();
  v68[0] = _swiftEmptyArrayStorage;
  uint64_t v41 = v32[2];
  if (!v41)
  {
    swift_bridgeObjectRelease();
LABEL_69:
    uint64_t v53 = v68[0];
    sub_10000C970(v69, v70);
    return v53;
  }
  swift_bridgeObjectRetain();
  uint64_t v42 = 0;
  while (1)
  {
    uint64_t v43 = v32[v42 + 4];
    unint64_t v44 = (void *)v68[0];
    uint64_t v45 = *(void *)(v68[0] + 16);
    unint64_t v46 = *(void *)(v43 + 16);
    if (v45)
    {
      swift_bridgeObjectRetain();
      if (!v46) {
        goto LABEL_49;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_1001DFD70(v44);
        unint64_t v44 = (void *)result;
      }
      unint64_t v48 = 0;
      unint64_t v49 = *(void *)(v43 + 16);
      do
      {
        if (v46 == v48)
        {
          __break(1u);
LABEL_71:
          __break(1u);
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
          goto LABEL_74;
        }
        if (v48 == v49) {
          goto LABEL_71;
        }
        unint64_t v50 = v44[2];
        if (v48 >= v50) {
          goto LABEL_72;
        }
        *((unsigned char *)v44 + v48 + 32) |= *(unsigned char *)(v43 + 32 + v48);
        unint64_t v51 = v48 + 1;
        if (v51 == v45) {
          break;
        }
        unint64_t v52 = v51 - 1;
        if (v52 == v45 - 1) {
          goto LABEL_73;
        }
        unint64_t v48 = v52 + 1;
      }
      while (v48 != v46);
      v68[0] = v44;
      if (v50 >= v49) {
        goto LABEL_49;
      }
    }
    else
    {
      uint64_t result = swift_bridgeObjectRetain();
      unint64_t v50 = 0;
      unint64_t v49 = v46;
      if (!v46) {
        goto LABEL_49;
      }
    }
    if (v46 < v50) {
      break;
    }
    if (v49 < v46) {
      goto LABEL_75;
    }
    sub_1001DFEA8(v43, v43 + 32, v50, (2 * v46) | 1);
LABEL_49:
    ++v42;
    swift_bridgeObjectRelease();
    if (v42 == v41)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_69;
    }
  }
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
  return result;
}

uint64_t AppleBroadcomDriver.broadcomCapabilities.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 80);
}

uint64_t AppleBroadcomDriver.broadcomCapabilities.setter(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 80) = a1;
  return result;
}

uint64_t (*AppleBroadcomDriver.broadcomCapabilities.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t AppleBroadcomDriver.logger.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC7CoreP2P19AppleBroadcomDriver_logger;
  uint64_t v4 = type metadata accessor for Logger();
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t AppleBroadcomDriver.__allocating_init(device:role:name:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  return AppleBroadcomDriver.init(device:role:name:)(a1, a2, a3, a4);
}

uint64_t AppleBroadcomDriver.init(device:role:name:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v4 + 80) = 0;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(void *)(v4 + 40) = a1;
  *(unsigned char *)(v4 + 32) = a2;
  *(void *)(v4 + 16) = a3;
  *(void *)(v4 + 24) = a4;
  Logger.init(subsystem:category:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v4 + OBJC_IVAR____TtC7CoreP2P19AppleBroadcomDriver_logger, v12, v9);
  return v4;
}

uint64_t AppleBroadcomDriver.deinit()
{
  uint64_t v1 = v0;
  swift_beginAccess();
  if (*(void *)(v0 + 64))
  {
    swift_unownedRetain();
    swift_bridgeObjectRetain();
    swift_unownedRelease();
    swift_bridgeObjectRelease();
    swift_unownedRetainStrong();
    AppleDevice.stopMonitoringEvents(on:)(*(Swift::String *)(v0 + 56));
    swift_release();
  }
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_release();
  sub_1000C9898(*(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64));
  swift_bridgeObjectRelease();
  uint64_t v2 = v0 + OBJC_IVAR____TtC7CoreP2P19AppleBroadcomDriver_logger;
  uint64_t v3 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  return v1;
}

uint64_t AppleBroadcomDriver.__deallocating_deinit()
{
  swift_beginAccess();
  if (*(void *)(v0 + 64))
  {
    swift_unownedRetain();
    swift_bridgeObjectRetain();
    swift_unownedRelease();
    swift_bridgeObjectRelease();
    swift_unownedRetainStrong();
    AppleDevice.stopMonitoringEvents(on:)(*(Swift::String *)(v0 + 56));
    swift_release();
  }
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_release();
  sub_1000C9898(*(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64));
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC7CoreP2P19AppleBroadcomDriver_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_100233D7C()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  return *(void *)(v1 + 80);
}

uint64_t sub_100233DBC(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_beginAccess();
  *(void *)(v3 + 80) = a1;
  return result;
}

uint64_t (*sub_100233E00())()
{
  return j_j__swift_endAccess;
}

void *BroadcomDriver<>.awdlChannelSequence.getter()
{
  sub_1000835DC(0, 16, 0);
  uint64_t v0 = 0;
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v2 = _swiftEmptyArrayStorage[2];
  uint64_t v3 = 8 * v2 + 32;
  do
  {
    unint64_t v7 = result;
    unint64_t v4 = result[3];
    unint64_t v5 = v2 + 1;
    if (v2 >= v4 >> 1)
    {
      sub_1000835DC(v4 > 1, v2 + 1, 1);
      uint64_t result = v7;
    }
    result[2] = v5;
    unint64_t v6 = (char *)result + v3 + v0;
    *((_WORD *)v6 + 2) = 3;
    *(_DWORD *)unint64_t v6 = 0;
    v0 += 8;
    unint64_t v2 = v5;
  }
  while (v0 != 128);
  return result;
}

uint64_t sub_100233F24()
{
  return sub_100233F48();
}

uint64_t sub_100233F48()
{
  uint64_t v1 = type metadata accessor for Data.Deallocator();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  unint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = sub_100248448(0x101u, 1);
  if (!v0)
  {
    uint64_t v6 = sub_100240C34(7233902, 0xE300000000000000, 277, 0, 0x4000000000000uLL, 0);
    unint64_t v8 = v7;
    int v9 = sub_1002579EC(v6, v7);
    sub_10000C970(v6, v8);
    sub_10024855C(0x115u, v9 | 0xE5007F);
    uint64_t v10 = sub_100240C34(7233902, 0xE300000000000000, 280, 0, 0x8000000000000uLL, 0);
    unint64_t v12 = v11;
    uint64_t v13 = sub_10025846C(v10, v11);
    sub_10000C970(v10, v12);
    sub_100248670(0x118u, v13 | 0x441);
    uint64_t v14 = swift_slowAlloc();
    *(unsigned char *)uint64_t v14 = 1;
    *(_WORD *)(v14 + 2) = 16;
    *(unsigned char *)(v14 + 4) |= 0xE8u;
    *(unsigned char *)(v14 + 5) |= 7u;
    *(unsigned char *)(v14 + 6) |= 0xB0u;
    char v15 = *(unsigned char *)(v14 + 8);
    *(unsigned char *)(v14 + 7) = -1;
    char v16 = *(unsigned char *)(v14 + 9);
    *(unsigned char *)(v14 + 8) = v15 | 0x3F;
    *(unsigned char *)(v14 + 9) = v16 | 0x90;
    *(unsigned char *)(v14 + 10) |= 1u;
    (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for Data.Deallocator.none(_:), v1);
    Data.Deallocator._deallocator.getter();
    type metadata accessor for __DataStorage();
    swift_allocObject();
    swift_retain();
    uint64_t v17 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    uint64_t v18 = sub_100240C34(7233902, 0xE300000000000000, 276, 0x1400000000, v17 | 0x4000000000000000, 1);
    sub_10000C970(v18, v19);
    sub_10000C970(0x1400000000, v17 | 0x4000000000000000);
    sub_10024855C(0x105u, 20);
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v20 = xmmword_1003B2F30;
    *(unsigned char *)(v20 + 16) = 0;
    swift_willThrow();
    return swift_slowDealloc();
  }
  return result;
}

uint64_t BroadcomDriver<>.initializeNAN()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for Data.Deallocator();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v25[0]) = 1;
  uint64_t result = sub_100248AF0(257, (uint64_t)v25, a1, (uint64_t)&type metadata for UInt8, a2, a3);
  if (!v3)
  {
    sub_100248C48(0x115u, (uint64_t)&type metadata for UInt32, a1, (uint64_t)&type metadata for UInt32, a2, a3);
    v26 |= 0xE5007Fu;
    v25[0] = v26;
    sub_100248AF0(277, (uint64_t)v25, a1, (uint64_t)&type metadata for UInt32, a2, a3);
    type metadata accessor for wl_nan_cfg_ctrl2(0);
    uint64_t v23 = v12;
    sub_100248C48(0x118u, v23, a1, v23, a2, a3);
    v24[1] = v25[1];
    v25[0] |= 0x441u;
    v24[0] = v25[0];
    sub_100248AF0(280, (uint64_t)v24, a1, v23, a2, a3);
    uint64_t v13 = swift_slowAlloc();
    uint64_t v23 = v13;
    *(unsigned char *)uint64_t v13 = 1;
    *(_WORD *)(v13 + 2) = 16;
    *(unsigned char *)(v13 + 4) |= 0xE8u;
    *(unsigned char *)(v13 + 5) |= 7u;
    *(unsigned char *)(v13 + 6) |= 0xB0u;
    char v14 = *(unsigned char *)(v13 + 8);
    *(unsigned char *)(v13 + 7) = -1;
    char v15 = *(unsigned char *)(v13 + 9);
    *(unsigned char *)(v13 + 8) = v14 | 0x3F;
    *(unsigned char *)(v13 + 9) = v15 | 0x90;
    *(unsigned char *)(v13 + 10) |= 1u;
    (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for Data.Deallocator.none(_:), v7);
    uint64_t v16 = Data.Deallocator._deallocator.getter();
    v22[1] = v17;
    v22[2] = v16;
    type metadata accessor for __DataStorage();
    swift_allocObject();
    swift_retain();
    uint64_t v18 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    unint64_t v19 = sub_10024177C(7233902, 0xE300000000000000, 276, (void *)0x1400000000, v18 | 0x4000000000000000, 1, a1, a2, *(void *)(a3 + 16));
    sub_10000C970((uint64_t)v19, v20);
    sub_10000C970(0x1400000000, v18 | 0x4000000000000000);
    v24[0] = 20;
    sub_100248AF0(261, (uint64_t)v24, a1, (uint64_t)&type metadata for UInt32, a2, a3);
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v21 = xmmword_1003B2F30;
    *(unsigned char *)(v21 + 16) = 0;
    swift_willThrow();
    return swift_slowDealloc();
  }
  return result;
}

BOOL sub_1002346EC()
{
  return sub_100234710();
}

BOOL sub_100234710()
{
  uint64_t v0 = sub_100240C34(7233902, 0xE300000000000000, 278, 0, 0x1000000000000uLL, 0);
  unint64_t v2 = v1;
  char v3 = sub_100257954(v0, v1);
  sub_10000C970(v0, v2);
  return v3 == 1;
}

BOOL BroadcomDriver<>.nanState.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100248C48(0x116u, (uint64_t)&type metadata for UInt8, a1, (uint64_t)&type metadata for UInt8, a2, a3);
  return v4 == 1;
}

uint64_t sub_10023480C(char a1)
{
  uint64_t v2 = *v1;
  char v5 = a1 & 1;
  char v4 = a1 & 1;
  return sub_100247CE0((uint64_t)&v4, &v5, v2, 0x116u);
}

uint64_t BroadcomDriver<>.update(nanState:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v5 = a1 & 1;
  return sub_100247B44(278, (uint64_t)&v5, a2, (uint64_t)&type metadata for UInt8, a3, a4);
}

uint64_t sub_1002348B8()
{
  uint64_t v0 = sub_100240C34(7233902, 0xE300000000000000, 268, 0, 0x6000000000000uLL, 0);
  unint64_t v2 = v1;
  uint64_t v3 = sub_100013CF8(v0, v1);
  sub_10000C970(v0, v2);
  return v3 & 0xFFFFFFFFFFFFLL;
}

unint64_t BroadcomDriver<>.clusterID.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for ether_addr(0);
  sub_100248C48(0x10Cu, v6, a1, v6, a2, a3);
  return v8 | ((unint64_t)v9 << 32) | ((unint64_t)v10 << 40);
}

uint64_t sub_1002349F8(uint64_t a1)
{
  return sub_100248784(0x10Cu, a1 & 0xFFFFFFFFFFFFLL);
}

uint64_t BroadcomDriver<>.update(clusterID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int16 v9 = a1;
  char v10 = BYTE2(a1);
  char v11 = BYTE3(a1);
  char v12 = BYTE4(a1);
  char v13 = BYTE5(a1);
  type metadata accessor for ether_addr(0);
  return sub_100248AF0(268, (uint64_t)&v9, a2, v7, a3, a4);
}

uint64_t sub_100234AB4()
{
  uint64_t v0 = sub_100240C34(7233902, 0xE300000000000000, 514, 0, 0x4000000000000uLL, 0);
  unint64_t v2 = v1;
  unsigned int v3 = sub_10025B758(v0, v1);
  sub_10000C970(v0, v2);
  return bswap32(v3) >> 16;
}

uint64_t BroadcomDriver<>.electionMetric.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for wl_nan_election_metric_config(0);
  sub_100248C48(0x202u, v6, a1, v6, a2, a3);
  return __rev16(v8);
}

uint64_t sub_100234BDC(__int16 a1)
{
  uint64_t v2 = *v1;
  HIBYTE(v6) = 0;
  LOBYTE(v6) = HIBYTE(a1);
  *(_WORD *)((char *)&v6 + 1) = a1;
  v4[0] = HIBYTE(a1);
  v4[1] = a1;
  __int16 v5 = 0;
  return sub_100247F28((uint64_t)v4, &v6, v2, 0x202u);
}

uint64_t BroadcomDriver<>.update(electionMetric:)(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v11 = 0;
  char v9 = HIBYTE(a1);
  __int16 v10 = a1;
  type metadata accessor for wl_nan_election_metric_config(0);
  return sub_100247B44(514, (uint64_t)&v9, a2, v7, a3, a4);
}

uint64_t sub_100234CC8()
{
  return sub_100234CEC();
}

uint64_t sub_100234CEC()
{
  uint64_t v0 = sub_100240C34(7233902, 0xE300000000000000, 1026, 0, 0x4000000000000uLL, 0);
  unint64_t v2 = v1;
  sub_10025B898(v0, v1);
  sub_10000C970(v0, v2);
  unsigned __int8 v4 = _s7CoreP2P18NANAwakeDWIntervalO8intervalACSgAA11NANTimeUnitV_tcfC_0();
  if (v4 == 5) {
    unsigned __int8 v5 = 0;
  }
  else {
    unsigned __int8 v5 = v4;
  }
  int v6 = _s7CoreP2P18NANAwakeDWIntervalO8intervalACSgAA11NANTimeUnitV_tcfC_0();
  if (v6 == 5) {
    int v7 = 0;
  }
  else {
    int v7 = v6;
  }
  return v5 | (v7 << 8);
}

uint64_t BroadcomDriver<>.dwAwakePeriods.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for wl_nan_awake_dws(0);
  sub_100248C48(0x402u, v6, a1, v6, a2, a3);
  unsigned __int8 v7 = _s7CoreP2P18NANAwakeDWIntervalO8intervalACSgAA11NANTimeUnitV_tcfC_0();
  if (v7 == 5) {
    unsigned __int8 v8 = 0;
  }
  else {
    unsigned __int8 v8 = v7;
  }
  int v9 = _s7CoreP2P18NANAwakeDWIntervalO8intervalACSgAA11NANTimeUnitV_tcfC_0();
  if (v9 == 5) {
    int v10 = 0;
  }
  else {
    int v10 = v9;
  }
  return v8 | (v10 << 8);
}

uint64_t sub_100234E60(unsigned int a1)
{
  return sub_100234E84(a1);
}

uint64_t sub_100234E84(unsigned int a1)
{
  int v1 = a1;
  int v2 = 8;
  switch((char)a1)
  {
    case 1:
      int v1 = 1;
      goto LABEL_5;
    case 2:
      int v1 = 4;
      goto LABEL_5;
    case 3:
      return sub_1002488B8(0x402u, *(_DWORD *)((char *)&unk_1003D3690 + ((uint64_t)((unint64_t)(a1 >> 8) << 56) >> 54)) | v2);
    case 4:
      int v2 = 16;
      return sub_1002488B8(0x402u, *(_DWORD *)((char *)&unk_1003D3690 + ((uint64_t)((unint64_t)(a1 >> 8) << 56) >> 54)) | v2);
    default:
LABEL_5:
      int v2 = v1;
      return sub_1002488B8(0x402u, *(_DWORD *)((char *)&unk_1003D3690 + ((uint64_t)((unint64_t)(a1 >> 8) << 56) >> 54)) | v2);
  }
}

uint64_t BroadcomDriver<>.update(dwAwakePeriods:)(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4 = 8;
  char v8 = a1;
  switch((char)a1)
  {
    case 1:
      char v8 = 1;
      goto LABEL_5;
    case 2:
      char v8 = 4;
      goto LABEL_5;
    case 3:
      goto LABEL_6;
    case 4:
      char v4 = 16;
      goto LABEL_6;
    default:
LABEL_5:
      char v4 = v8;
LABEL_6:
      v11[0] = v4;
      v11[1] = 0x1008040100uLL >> ((a1 >> 5) & 0xF8);
      __int16 v12 = 0;
      type metadata accessor for wl_nan_awake_dws(0);
      return sub_100248AF0(1026, (uint64_t)v11, a2, v9, a3, a4);
  }
}

BOOL sub_100234FF0()
{
  return sub_100235018();
}

BOOL sub_100235018()
{
  uint64_t v0 = sub_100240C34(7233902, 0xE300000000000000, 513, 0, 0x1000000000000uLL, 0);
  unint64_t v2 = v1;
  char v3 = sub_100257954(v0, v1);
  sub_10000C970(v0, v2);
  return v3 != 0;
}

BOOL BroadcomDriver<>.hostElection.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100248C48(0x201u, (uint64_t)&type metadata for UInt8, a1, (uint64_t)&type metadata for UInt8, a2, a3);
  return v4 != 0;
}

uint64_t sub_100235110(char a1)
{
  return sub_100248670(0x201u, a1 & 1);
}

uint64_t BroadcomDriver<>.update(hostElection:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 & 1;
  return sub_100248AF0(513, (uint64_t)&v5, a2, (uint64_t)&type metadata for Int, a3, a4);
}

uint64_t sub_100235180(unsigned char *a1)
{
  return sub_1002351A4(a1);
}

uint64_t sub_1002351A4(unsigned char *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  uint64_t v122 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v113 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SHA256Digest();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  int v10 = (char *)&v113 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = type metadata accessor for SHA256();
  uint64_t v11 = *(void *)(v121 - 8);
  __chkstk_darwin();
  v120 = (char *)&v113 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v124 = xmmword_1003B2440;
  long long v131 = xmmword_1003B2440;
  char v13 = (int *)type metadata accessor for NANSubscribe.Configuration();
  uint64_t v14 = v13[12];
  v125 = a1;
  char v15 = &a1[v14];
  uint64_t v16 = *((void *)v15 + 1);
  uint64_t v17 = *(void *)(v16 + 16);
  uint64_t v123 = v4;
  if (v17)
  {
    uint64_t result = sub_100249514(*v15, v16);
    if (v1) {
      return result;
    }
    unint64_t v20 = v19;
    uint64_t v119 = v11;
    uint64_t v21 = result;
    switch(v19 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(result), result)) {
          goto LABEL_79;
        }
        uint64_t v22 = HIDWORD(result) - (int)result;
LABEL_7:
        sub_100013D44(result, v19);
        if (v22 >= 0xFFFF)
        {
LABEL_29:
          sub_10000F000();
          swift_allocError();
          *(void *)uint64_t v65 = 0;
          *(void *)(v65 + 8) = 0;
          *(unsigned char *)(v65 + 16) = 2;
          swift_willThrow();
          sub_10000C970(v21, v20);
          uint64_t v66 = v21;
LABEL_39:
          unint64_t v83 = v20;
LABEL_40:
          sub_10000C970(v66, v83);
          return sub_10000C970(v131, *((unint64_t *)&v131 + 1));
        }
LABEL_8:
        uint64_t v25 = sub_100247790(258, v21, v20);
        v117 = v13;
        uint64_t v118 = v7;
        uint64_t v26 = v25;
        v116 = v10;
        uint64_t v27 = v8;
        unint64_t v29 = v28;
        sub_10000C970(v21, v20);
        Data.append(_:)();
        uint64_t v30 = v26;
        uint64_t v7 = v118;
        char v13 = v117;
        unint64_t v31 = v29;
        uint64_t v8 = v27;
        uint64_t v2 = 0;
        int v10 = v116;
        sub_10000C970(v30, v31);
        sub_10000C970(v21, v20);
        uint64_t v11 = v119;
        break;
      case 2uLL:
        uint64_t v24 = *(void *)(result + 16);
        uint64_t v23 = *(void *)(result + 24);
        uint64_t v22 = v23 - v24;
        if (!__OFSUB__(v23, v24)) {
          goto LABEL_7;
        }
        goto LABEL_80;
      default:
        goto LABEL_8;
    }
  }
  unint64_t v32 = &v125[v13[11]];
  uint64_t v33 = *((void *)v32 + 1);
  if (*(void *)(v33 + 16))
  {
    uint64_t v34 = sub_100249514(*v32, v33);
    if (v2) {
      return sub_10000C970(v131, *((unint64_t *)&v131 + 1));
    }
    unint64_t v20 = v35;
    uint64_t v119 = v11;
    uint64_t v21 = v34;
    switch(v35 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v34), v34)) {
          goto LABEL_83;
        }
        uint64_t v36 = HIDWORD(v34) - (int)v34;
LABEL_15:
        sub_100013D44(v34, v35);
        if (v36 >= 0xFFFF) {
          goto LABEL_29;
        }
LABEL_16:
        uint64_t v39 = sub_100247790(257, v21, v20);
        v115 = v6;
        BOOL v40 = v10;
        uint64_t v41 = v39;
        uint64_t v114 = v8;
        unint64_t v43 = v42;
        sub_10000C970(v21, v20);
        Data.append(_:)();
        uint64_t v44 = v41;
        int v10 = v40;
        uint64_t v2 = 0;
        uint64_t v6 = v115;
        unint64_t v45 = v43;
        uint64_t v8 = v114;
        sub_10000C970(v44, v45);
        sub_10000C970(v21, v20);
        uint64_t v11 = v119;
        break;
      case 2uLL:
        uint64_t v38 = *(void *)(v34 + 16);
        uint64_t v37 = *(void *)(v34 + 24);
        uint64_t v36 = v37 - v38;
        if (!__OFSUB__(v37, v38)) {
          goto LABEL_15;
        }
        goto LABEL_84;
      default:
        goto LABEL_16;
    }
  }
  uint64_t v118 = v7;
  unint64_t v46 = &v125[v13[14]];
  unint64_t v47 = *((unsigned __int16 *)v46 + 8);
  v115 = v6;
  uint64_t v114 = v8;
  uint64_t v119 = v11;
  if ((v47 & 0xFF00) == 0x200)
  {
    v116 = v10;
    v117 = v13;
    goto LABEL_33;
  }
  uint64_t v48 = *(void *)v46;
  uint64_t v49 = *(void *)v46;
  unint64_t v113 = *((void *)v46 + 1);
  sub_100013D44(v49, v113);
  char v50 = sub_1001E1C7C(1u, 0, 1);
  if (v2)
  {
LABEL_87:
    swift_unexpectedError();
    __break(1u);
    swift_unexpectedError();
    __break(1u);
    swift_unexpectedError();
    __break(1u);
    JUMPOUT(0x100236024);
  }
  char v51 = v50;
  unsigned __int8 v52 = sub_1001E1C64((v47 >> 8) & 1, 1, 1);
  unsigned __int8 v53 = sub_1001E1C7C(v47, 2uLL, 2);
  if ((v52 & ~v51) != 0) {
    unsigned __int8 v54 = v52;
  }
  else {
    unsigned __int8 v54 = 0;
  }
  char v55 = v54 | v51;
  if ((v53 & ~v55) != 0) {
    unsigned __int8 v56 = v53;
  }
  else {
    unsigned __int8 v56 = 0;
  }
  char v57 = v56 | v55;
  sub_100010BCC(&qword_10047BEF8);
  uint64_t v58 = swift_allocObject();
  *(_OWORD *)(v58 + 16) = xmmword_1003B2450;
  *(unsigned char *)(v58 + 32) = v57;
  uint64_t v59 = sub_1001265EC(v58);
  unint64_t v61 = v60;
  swift_bridgeObjectRelease();
  v130[0] = v59;
  v130[1] = v61;
  unint64_t v62 = v113;
  sub_10014E854(v48, v113, v47);
  sub_100013D44(v59, v61);
  sub_100125FAC(v48, v62);
  sub_1000CA4D0(v48, v62, v47);
  sub_10000C970(v59, v61);
  uint64_t v63 = v130[0];
  unint64_t v20 = v130[1];
  switch((unint64_t)v130[1] >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v130[0]), v130[0])) {
        goto LABEL_81;
      }
      uint64_t v64 = HIDWORD(v130[0]) - LODWORD(v130[0]);
LABEL_31:
      sub_100013D44(v130[0], v130[1]);
      if (v64 >= 0xFFFF)
      {
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v82 = 0;
        *(void *)(v82 + 8) = 0;
        *(unsigned char *)(v82 + 16) = 2;
        swift_willThrow();
        sub_10000C970(v63, v20);
        sub_1000CA4D0(v48, v113, v47);
        uint64_t v66 = v63;
        goto LABEL_39;
      }
LABEL_32:
      v116 = v10;
      v117 = v13;
      uint64_t v69 = sub_100247790(259, v63, v20);
      unint64_t v71 = v70;
      sub_10000C970(v63, v20);
      Data.append(_:)();
      sub_10000C970(v69, v71);
      sub_1000CA4D0(v48, v113, v47);
      sub_10000C970(v63, v20);
LABEL_33:
      uint64_t v72 = NANSubscribe.Configuration.serviceInfo.getter();
      uint64_t v74 = v73;
      unint64_t v76 = v75;
      sub_100013D44(v73, v75);
      unint64_t v77 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v78 = type metadata accessor for BinaryEncoder();
      uint64_t v79 = swift_allocObject();
      *(_OWORD *)(v79 + 16) = v124;
      *(void *)(v79 + 32) = v77;
      v130[3] = v78;
      v130[4] = sub_10024DC6C((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      v130[0] = v79;
      sub_100013D44(v74, v76);
      swift_retain();
      NANServiceInfo.encode(to:)(v130, v72, v74, v76);
      if (!v2)
      {
        sub_100010754((uint64_t)v130);
        sub_10000C970(v74, v76);
        sub_10000C970(v74, v76);
        swift_beginAccess();
        uint64_t v81 = *(void *)(v79 + 16);
        unint64_t v80 = *(void *)(v79 + 24);
        sub_100013D44(v81, v80);
        swift_release();
        sub_10000C970(v74, v76);
        switch(v80 >> 62)
        {
          case 1uLL:
            if (!((v81 ^ (unint64_t)(v81 << 32)) >> 32)) {
              goto LABEL_53;
            }
            goto LABEL_49;
          case 2uLL:
            uint64_t v84 = *(void *)(v81 + 16);
            uint64_t v85 = *(void *)(v81 + 24);
            if (v84 == v85) {
              goto LABEL_53;
            }
            if (v80 >> 62 != 2) {
              goto LABEL_49;
            }
            uint64_t v86 = v85 - v84;
            if (!__OFSUB__(v85, v84)) {
              goto LABEL_51;
            }
            __break(1u);
LABEL_49:
            if (__OFSUB__(HIDWORD(v81), v81)) {
              goto LABEL_85;
            }
            uint64_t v86 = HIDWORD(v81) - (int)v81;
LABEL_51:
            sub_100013D44(v81, v80);
            if (v86 < 0xFFFF)
            {
LABEL_52:
              uint64_t v87 = sub_100247790(780, v81, v80);
              unint64_t v89 = v88;
              sub_10000C970(v81, v80);
              Data.append(_:)();
              sub_10000C970(v87, v89);
LABEL_53:
              sub_10000C970(v81, v80);
              goto LABEL_54;
            }
            sub_10000F000();
            swift_allocError();
            *(void *)uint64_t v112 = 0;
            *(void *)(v112 + 8) = 0;
            *(unsigned char *)(v112 + 16) = 2;
            swift_willThrow();
            sub_10000C970(v81, v80);
            uint64_t v66 = v81;
            unint64_t v83 = v80;
            break;
          case 3uLL:
            goto LABEL_53;
          default:
            if ((v80 & 0xFF000000000000) == 0) {
              goto LABEL_53;
            }
            goto LABEL_52;
        }
        goto LABEL_40;
      }
      sub_100010754((uint64_t)v130);
      sub_10000C970(v74, v76);
      sub_10000C970(v74, v76);
      swift_release();
      swift_errorRelease();
      sub_10000C970(v74, v76);
LABEL_54:
      uint64_t v90 = 0;
      switch(*((void *)&v131 + 1) >> 62)
      {
        case 1:
          LODWORD(v90) = DWORD1(v131) - v131;
          if (__OFSUB__(DWORD1(v131), v131)) {
            goto LABEL_77;
          }
          uint64_t v90 = (int)v90;
LABEL_59:
          uint64_t v94 = v90 + 20;
          if (__OFADD__(v90, 20))
          {
            __break(1u);
LABEL_75:
            __break(1u);
            goto LABEL_76;
          }
          uint64_t v128 = sub_100126710(v90 + 20);
          unint64_t v129 = v95;
          memset(v130, 0, 23);
          swift_bridgeObjectRetain();
          v96 = v120;
          SHA256.init()();
          Swift::String v97 = String.lowercased()();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          sub_1001A5654(v97._countAndFlagsBits, (uint64_t)v97._object);
          swift_bridgeObjectRelease();
          v98 = v116;
          SHA256.finalize()();
          SHA256Digest.withUnsafeBytes<A>(_:)();
          (*(void (**)(char *, uint64_t))(v114 + 8))(v98, v118);
          uint64_t v99 = v126;
          unint64_t v100 = v127;
          (*(void (**)(char *, uint64_t))(v119 + 8))(v96, v121);
          uint64_t v126 = v99;
          unint64_t v127 = v100;
          sub_100074B70();
          DataProtocol.copyBytes(to:)();
          sub_10000C970(v99, v100);
          if (v94 <= 1) {
            goto LABEL_86;
          }
          uint64_t v101 = v123;
          v102 = v115;
          if ((unint64_t)(v94 - 2) >= 0x10000) {
            goto LABEL_86;
          }
          LOWORD(v130[0]) = v94 - 2;
          uint64_t v103 = sub_1001ADA80();
          void *v102 = 0x80000;
          uint64_t v104 = v122;
          (*(void (**)(void *, void, uint64_t))(v122 + 104))(v102, enum case for DispatchTimeInterval.microseconds(_:), v101);
          uint64_t v105 = sub_1001ADA80();
          (*(void (**)(void *, uint64_t))(v104 + 8))(v102, v101);
          if (!v105) {
            goto LABEL_75;
          }
          if (v103 == 0x8000000000000000 && v105 == -1)
          {
LABEL_76:
            __break(1u);
LABEL_77:
            __break(1u);
LABEL_78:
            __break(1u);
LABEL_79:
            __break(1u);
LABEL_80:
            __break(1u);
LABEL_81:
            __break(1u);
LABEL_82:
            __break(1u);
LABEL_83:
            __break(1u);
LABEL_84:
            __break(1u);
LABEL_85:
            __break(1u);
          }
          if (v103 / v105 < 0 || (unint64_t)(v103 / v105) >= 0x100)
          {
LABEL_86:
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            goto LABEL_87;
          }
          BYTE2(v130[0]) = v103 / v105;
          BYTE2(v130[1]) = *v125;
          if (v125[32] == 1)
          {
            swift_bridgeObjectRelease();
LABEL_70:
            HIDWORD(v130[1]) |= 0x1000u;
            goto LABEL_71;
          }
          char v106 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v106) {
            goto LABEL_70;
          }
LABEL_71:
          LODWORD(v130[2]) = -1;
          sub_10024B8A4(&v128, (uint64_t)v130, (uint64_t *)&v131);
          uint64_t v107 = v128;
          unint64_t v108 = v129;
          sub_100013D44(v128, v129);
          uint64_t v109 = sub_100240C34(7233902, 0xE300000000000000, 773, v107, v108, 1);
          unint64_t v111 = v110;
          sub_10000C970(v107, v108);
          sub_10000C970(v109, v111);
          sub_10000C970(v107, v108);
          return sub_10000C970(v131, *((unint64_t *)&v131 + 1));
        case 2:
          uint64_t v92 = *(void *)(v131 + 16);
          uint64_t v91 = *(void *)(v131 + 24);
          BOOL v93 = __OFSUB__(v91, v92);
          uint64_t v90 = v91 - v92;
          if (!v93) {
            goto LABEL_59;
          }
          goto LABEL_78;
        case 3:
          goto LABEL_59;
        default:
          uint64_t v90 = BYTE14(v131);
          goto LABEL_59;
      }
    case 2uLL:
      uint64_t v68 = *(void *)(v130[0] + 16);
      uint64_t v67 = *(void *)(v130[0] + 24);
      uint64_t v64 = v67 - v68;
      if (!__OFSUB__(v67, v68)) {
        goto LABEL_31;
      }
      goto LABEL_82;
    default:
      goto LABEL_32;
  }
}

uint64_t BroadcomDriver<>.start(configuration:)(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for DispatchTimeInterval();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  char v13 = (char *)&v127 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for SHA256Digest();
  uint64_t v139 = *(void *)(v14 - 8);
  __chkstk_darwin();
  v137 = (char *)&v127 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v138 = type metadata accessor for SHA256();
  uint64_t v136 = *(void *)(v138 - 8);
  __chkstk_darwin();
  v135 = (char *)&v127 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v140 = xmmword_1003B2440;
  long long v149 = xmmword_1003B2440;
  uint64_t v17 = (int *)type metadata accessor for NANSubscribe.Configuration();
  uint64_t v18 = v17[12];
  v141 = v17;
  v142 = a1;
  unint64_t v19 = &a1[v18];
  uint64_t v20 = *((void *)v19 + 1);
  if (*(void *)(v20 + 16))
  {
    uint64_t result = sub_100249514(*v19, v20);
    uint64_t v143 = v4;
    if (v4) {
      return result;
    }
    unint64_t v23 = v22;
    uint64_t v134 = v11;
    uint64_t v24 = result;
    switch(v22 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(result), result)) {
          goto LABEL_84;
        }
        uint64_t v25 = HIDWORD(result) - (int)result;
LABEL_7:
        sub_100013D44(result, v22);
        if (v25 >= 0xFFFF)
        {
LABEL_31:
          sub_10000F000();
          uint64_t v68 = swift_allocError();
          *(void *)uint64_t v69 = 0;
          *(void *)(v69 + 8) = 0;
          *(unsigned char *)(v69 + 16) = 2;
          uint64_t v143 = v68;
          swift_willThrow();
          sub_10000C970(v24, v23);
          uint64_t v70 = v24;
          goto LABEL_74;
        }
LABEL_8:
        uint64_t v28 = sub_100247790(258, v24, v23);
        uint64_t v132 = v14;
        unint64_t v29 = v13;
        uint64_t v30 = v28;
        uint64_t v133 = v10;
        uint64_t v31 = a4;
        uint64_t v32 = a2;
        unint64_t v34 = v33;
        sub_10000C970(v24, v23);
        Data.append(_:)();
        uint64_t v35 = v30;
        char v13 = v29;
        uint64_t v14 = v132;
        unint64_t v36 = v34;
        a2 = v32;
        a4 = v31;
        uint64_t v10 = v133;
        sub_10000C970(v35, v36);
        sub_10000C970(v24, v23);
        uint64_t v11 = v134;
        uint64_t v17 = v141;
        uint64_t v5 = v143;
        break;
      case 2uLL:
        uint64_t v27 = *(void *)(result + 16);
        uint64_t v26 = *(void *)(result + 24);
        uint64_t v25 = v26 - v27;
        if (!__OFSUB__(v26, v27)) {
          goto LABEL_7;
        }
        goto LABEL_85;
      default:
        goto LABEL_8;
    }
  }
  uint64_t v37 = &v142[v17[11]];
  uint64_t v38 = *((void *)v37 + 1);
  if (!*(void *)(v38 + 16))
  {
    uint64_t v128 = a2;
    uint64_t v130 = a3;
LABEL_19:
    uint64_t v129 = a4;
    uint64_t v49 = &v142[v17[14]];
    unint64_t v50 = *((unsigned __int16 *)v49 + 8);
    uint64_t v134 = v11;
    long long v131 = v13;
    if ((v50 & 0xFF00) == 0x200)
    {
      uint64_t v143 = v5;
      uint64_t v132 = v14;
      uint64_t v133 = v10;
    }
    else
    {
      uint64_t v51 = *(void *)v49;
      unint64_t v52 = *((void *)v49 + 1);
      sub_100013D44(*(void *)v49, v52);
      char v53 = sub_1001E1C7C(1u, 0, 1);
      if (v5)
      {
LABEL_92:
        swift_unexpectedError();
        __break(1u);
        swift_unexpectedError();
        __break(1u);
        swift_unexpectedError();
        __break(1u);
        JUMPOUT(0x100236F14);
      }
      char v54 = v53;
      uint64_t v55 = sub_1001E1C64((v50 >> 8) & 1, 1, 1);
      unsigned __int8 v56 = sub_1001E1C7C(v50, 2uLL, 2);
      uint64_t v143 = 0;
      if ((v55 & ~v54) != 0) {
        char v57 = v55;
      }
      else {
        char v57 = 0;
      }
      char v58 = v57 | v54;
      if ((v56 & ~v58) != 0) {
        unsigned __int8 v59 = v56;
      }
      else {
        unsigned __int8 v59 = 0;
      }
      char v60 = v59 | v58;
      sub_100010BCC(&qword_10047BEF8);
      uint64_t v61 = swift_allocObject();
      *(_OWORD *)(v61 + 16) = xmmword_1003B2450;
      *(unsigned char *)(v61 + 32) = v60;
      uint64_t v62 = sub_1001265EC(v61);
      unint64_t v64 = v63;
      swift_bridgeObjectRelease();
      v148[0] = v62;
      v148[1] = v64;
      sub_10014E854(v51, v52, v50);
      sub_100013D44(v62, v64);
      sub_100125FAC(v51, v52);
      sub_1000CA4D0(v51, v52, v50);
      sub_10000C970(v62, v64);
      uint64_t v65 = v148[0];
      unint64_t v66 = v148[1];
      switch((unint64_t)v148[1] >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v148[0]), v148[0])) {
            goto LABEL_86;
          }
          uint64_t v67 = HIDWORD(v148[0]) - LODWORD(v148[0]);
LABEL_33:
          sub_100013D44(v148[0], v148[1]);
          if (v67 >= 0xFFFF)
          {
            sub_10000F000();
            uint64_t v87 = swift_allocError();
            *(void *)uint64_t v88 = 0;
            *(void *)(v88 + 8) = 0;
            *(unsigned char *)(v88 + 16) = 2;
            uint64_t v143 = v87;
            swift_willThrow();
            sub_10000C970(v65, v66);
            sub_1000CA4D0(v51, v52, v50);
            uint64_t v70 = v65;
            unint64_t v89 = v66;
LABEL_75:
            sub_10000C970(v70, v89);
            return sub_10000C970(v149, *((unint64_t *)&v149 + 1));
          }
LABEL_34:
          uint64_t v132 = v14;
          uint64_t v133 = v10;
          uint64_t v73 = sub_100247790(259, v65, v66);
          uint64_t v74 = v51;
          unint64_t v76 = v75;
          sub_10000C970(v65, v66);
          Data.append(_:)();
          sub_10000C970(v73, v76);
          sub_1000CA4D0(v74, v52, v50);
          sub_10000C970(v65, v66);
          break;
        case 2uLL:
          uint64_t v72 = *(void *)(v148[0] + 16);
          uint64_t v71 = *(void *)(v148[0] + 24);
          uint64_t v67 = v71 - v72;
          if (!__OFSUB__(v71, v72)) {
            goto LABEL_33;
          }
          goto LABEL_87;
        default:
          goto LABEL_34;
      }
    }
    uint64_t v77 = NANSubscribe.Configuration.serviceInfo.getter();
    uint64_t v79 = v78;
    unint64_t v81 = v80;
    sub_100013D44(v78, v80);
    unint64_t v82 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v83 = type metadata accessor for BinaryEncoder();
    uint64_t v84 = swift_allocObject();
    *(_OWORD *)(v84 + 16) = v140;
    *(void *)(v84 + 32) = v82;
    v148[3] = v83;
    v148[4] = sub_10024DC6C((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
    v148[0] = v84;
    sub_100013D44(v79, v81);
    swift_retain();
    uint64_t v85 = v143;
    NANServiceInfo.encode(to:)(v148, v77, v79, v81);
    if (v85)
    {
      sub_100010754((uint64_t)v148);
      sub_10000C970(v79, v81);
      sub_10000C970(v79, v81);
      swift_release();
      swift_errorRelease();
      sub_10000C970(v79, v81);
LABEL_53:
      uint64_t v96 = 0;
      switch(*((void *)&v149 + 1) >> 62)
      {
        case 1:
          LODWORD(v96) = DWORD1(v149) - v149;
          if (__OFSUB__(DWORD1(v149), v149)) {
            goto LABEL_82;
          }
          uint64_t v96 = (int)v96;
LABEL_58:
          uint64_t v100 = v96 + 20;
          if (__OFADD__(v96, 20))
          {
            __break(1u);
          }
          else
          {
            v146 = (void *)sub_100126710(v96 + 20);
            unint64_t v147 = v101;
            memset(v148, 0, 23);
            swift_bridgeObjectRetain();
            v102 = v135;
            SHA256.init()();
            Swift::String v103 = String.lowercased()();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            sub_1001A5654(v103._countAndFlagsBits, (uint64_t)v103._object);
            swift_bridgeObjectRelease();
            uint64_t v104 = v137;
            SHA256.finalize()();
            SHA256Digest.withUnsafeBytes<A>(_:)();
            uint64_t v143 = 0;
            (*(void (**)(char *, uint64_t))(v139 + 8))(v104, v132);
            uint64_t v105 = v144;
            unint64_t v106 = v145;
            (*(void (**)(char *, uint64_t))(v136 + 8))(v102, v138);
            uint64_t v144 = v105;
            unint64_t v145 = v106;
            sub_100074B70();
            DataProtocol.copyBytes(to:)();
            sub_10000C970(v105, v106);
            if (v100 <= 1
              || (__int16 v107 = v100 - 2,
                  BOOL v108 = (unint64_t)(v100 - 2) >= 0x10000,
                  uint64_t v109 = v130,
                  uint64_t v110 = v129,
                  uint64_t v111 = v133,
                  v108))
            {
LABEL_91:
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              goto LABEL_92;
            }
            LOWORD(v148[0]) = v107;
            uint64_t v112 = sub_1001ADA80();
            unint64_t v113 = v131;
            *long long v131 = 0x80000;
            uint64_t v114 = v134;
            (*(void (**)(void *, void, uint64_t))(v134 + 104))(v113, enum case for DispatchTimeInterval.microseconds(_:), v111);
            uint64_t v115 = sub_1001ADA80();
            (*(void (**)(void *, uint64_t))(v114 + 8))(v113, v111);
            if (v115)
            {
              if (v112 != 0x8000000000000000 || v115 != -1)
              {
                if (((v112 / v115) & 0x8000000000000000) == 0 && (unint64_t)(v112 / v115) < 0x100)
                {
                  BYTE2(v148[0]) = v112 / v115;
                  BYTE2(v148[1]) = *v142;
                  if (v142[32] == 1)
                  {
                    swift_bridgeObjectRelease();
                  }
                  else
                  {
                    char v116 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    if ((v116 & 1) == 0)
                    {
LABEL_70:
                      LODWORD(v148[2]) = -1;
                      uint64_t v117 = v143;
                      sub_10024B8A4(&v146, (uint64_t)v148, (uint64_t *)&v149);
                      uint64_t v118 = v146;
                      unint64_t v23 = v147;
                      sub_100013D44((uint64_t)v146, v147);
                      uint64_t v119 = sub_10024177C(7233902, 0xE300000000000000, 773, v118, v23, 1, v128, v109, *(void *)(v110 + 16));
                      uint64_t v143 = v117;
                      if (v117)
                      {
                        uint64_t v121 = (uint64_t)v118;
                        unint64_t v122 = v23;
                      }
                      else
                      {
                        uint64_t v123 = v119;
                        unint64_t v124 = v120;
                        sub_10000C970((uint64_t)v118, v23);
                        uint64_t v121 = (uint64_t)v123;
                        unint64_t v122 = v124;
                      }
                      sub_10000C970(v121, v122);
                      uint64_t v70 = (uint64_t)v118;
                      goto LABEL_74;
                    }
                  }
                  HIDWORD(v148[1]) |= 0x1000u;
                  goto LABEL_70;
                }
                goto LABEL_91;
              }
LABEL_81:
              __break(1u);
LABEL_82:
              __break(1u);
LABEL_83:
              __break(1u);
LABEL_84:
              __break(1u);
LABEL_85:
              __break(1u);
LABEL_86:
              __break(1u);
LABEL_87:
              __break(1u);
LABEL_88:
              __break(1u);
LABEL_89:
              __break(1u);
LABEL_90:
              __break(1u);
            }
          }
          __break(1u);
          goto LABEL_81;
        case 2:
          uint64_t v98 = *(void *)(v149 + 16);
          uint64_t v97 = *(void *)(v149 + 24);
          BOOL v99 = __OFSUB__(v97, v98);
          uint64_t v96 = v97 - v98;
          if (!v99) {
            goto LABEL_58;
          }
          goto LABEL_83;
        case 3:
          goto LABEL_58;
        default:
          uint64_t v96 = BYTE14(v149);
          goto LABEL_58;
      }
    }
    sub_100010754((uint64_t)v148);
    sub_10000C970(v79, v81);
    sub_10000C970(v79, v81);
    swift_beginAccess();
    uint64_t v86 = *(void *)(v84 + 16);
    unint64_t v23 = *(void *)(v84 + 24);
    sub_100013D44(v86, v23);
    swift_release();
    sub_10000C970(v79, v81);
    switch(v23 >> 62)
    {
      case 1uLL:
        if (!((v86 ^ (unint64_t)(v86 << 32)) >> 32)) {
          goto LABEL_52;
        }
        goto LABEL_48;
      case 2uLL:
        uint64_t v90 = *(void *)(v86 + 16);
        uint64_t v91 = *(void *)(v86 + 24);
        if (v90 == v91) {
          goto LABEL_52;
        }
        if (v23 >> 62 != 2) {
          goto LABEL_48;
        }
        uint64_t v92 = v91 - v90;
        if (!__OFSUB__(v91, v90)) {
          goto LABEL_50;
        }
        __break(1u);
LABEL_48:
        if (__OFSUB__(HIDWORD(v86), v86)) {
          goto LABEL_90;
        }
        uint64_t v92 = HIDWORD(v86) - (int)v86;
LABEL_50:
        sub_100013D44(v86, v23);
        if (v92 < 0xFFFF)
        {
LABEL_51:
          uint64_t v93 = sub_100247790(780, v86, v23);
          unint64_t v95 = v94;
          sub_10000C970(v86, v23);
          Data.append(_:)();
          sub_10000C970(v93, v95);
LABEL_52:
          sub_10000C970(v86, v23);
          goto LABEL_53;
        }
        sub_10000F000();
        uint64_t v125 = swift_allocError();
        *(void *)uint64_t v126 = 0;
        *(void *)(v126 + 8) = 0;
        *(unsigned char *)(v126 + 16) = 2;
        uint64_t v143 = v125;
        swift_willThrow();
        sub_10000C970(v86, v23);
        uint64_t v70 = v86;
        break;
      case 3uLL:
        goto LABEL_52;
      default:
        if ((v23 & 0xFF000000000000) == 0) {
          goto LABEL_52;
        }
        goto LABEL_51;
    }
LABEL_74:
    unint64_t v89 = v23;
    goto LABEL_75;
  }
  uint64_t v39 = sub_100249514(*v37, v38);
  uint64_t v143 = v5;
  if (!v5)
  {
    unint64_t v23 = v40;
    long long v131 = v13;
    uint64_t v24 = v39;
    switch(v40 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v39), v39)) {
          goto LABEL_88;
        }
        uint64_t v41 = v11;
        uint64_t v42 = HIDWORD(v39) - (int)v39;
LABEL_16:
        sub_100013D44(v39, v40);
        BOOL v45 = v42 < 0xFFFF;
        uint64_t v11 = v41;
        if (!v45) {
          goto LABEL_31;
        }
LABEL_18:
        uint64_t v128 = a2;
        uint64_t v130 = a3;
        uint64_t v46 = sub_100247790(257, v24, v23);
        unint64_t v48 = v47;
        sub_10000C970(v24, v23);
        Data.append(_:)();
        sub_10000C970(v46, v48);
        sub_10000C970(v24, v23);
        char v13 = (char *)v131;
        uint64_t v17 = v141;
        uint64_t v5 = v143;
        break;
      case 2uLL:
        uint64_t v41 = v11;
        uint64_t v44 = *(void *)(v39 + 16);
        uint64_t v43 = *(void *)(v39 + 24);
        uint64_t v42 = v43 - v44;
        if (!__OFSUB__(v43, v44)) {
          goto LABEL_16;
        }
        goto LABEL_89;
      default:
        goto LABEL_18;
    }
    goto LABEL_19;
  }
  return sub_10000C970(v149, *((unint64_t *)&v149 + 1));
}

uint64_t sub_100236F64(uint64_t a1)
{
  return sub_100236F88(a1);
}

uint64_t sub_100236F88(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v183 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SHA256Digest();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  v199 = (char *)&v183 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for SHA256();
  uint64_t v198 = *(void *)(v11 - 8);
  __chkstk_darwin();
  v197 = (char *)&v183 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v210 = xmmword_1003B2440;
  uint64_t v202 = a1;
  uint64_t v13 = *(void *)(a1 + 48);
  uint64_t v14 = *(void *)(v13 + 16);
  long long v200 = xmmword_1003B2440;
  if (v14)
  {
    uint64_t result = sub_100249514(*(unsigned __int8 *)(v202 + 40), v13);
    uint64_t v201 = v1;
    if (v1) {
      return result;
    }
    unint64_t v17 = v16;
    uint64_t v18 = result;
    switch(v16 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(result), result)) {
          goto LABEL_138;
        }
        uint64_t v19 = HIDWORD(result) - (int)result;
LABEL_7:
        sub_100013D44(result, v16);
        if (v19 >= 0xFFFF)
        {
LABEL_86:
          sub_10000F000();
          uint64_t v135 = swift_allocError();
          *(void *)uint64_t v136 = 0;
          *(void *)(v136 + 8) = 0;
          *(unsigned char *)(v136 + 16) = 2;
          uint64_t v201 = v135;
          swift_willThrow();
          uint64_t v137 = v18;
          unint64_t v138 = v17;
          goto LABEL_87;
        }
LABEL_8:
        uint64_t v22 = sub_100247790(258, v18, v17);
        v195 = v7;
        uint64_t v23 = v5;
        uint64_t v24 = v22;
        uint64_t v196 = v11;
        uint64_t v25 = v9;
        uint64_t v26 = v8;
        unint64_t v28 = v27;
        sub_10000C970(v18, v17);
        Data.append(_:)();
        uint64_t v29 = v24;
        uint64_t v5 = v23;
        uint64_t v7 = v195;
        unint64_t v30 = v28;
        uint64_t v8 = v26;
        uint64_t v9 = v25;
        uint64_t v11 = v196;
        sub_10000C970(v29, v30);
        sub_10000C970(v18, v17);
        uint64_t v2 = v201;
        break;
      case 2uLL:
        uint64_t v21 = *(void *)(result + 16);
        uint64_t v20 = *(void *)(result + 24);
        uint64_t v19 = v20 - v21;
        if (!__OFSUB__(v20, v21)) {
          goto LABEL_7;
        }
        goto LABEL_139;
      default:
        goto LABEL_8;
    }
  }
  uint64_t v31 = *(void *)(v202 + 64);
  if (*(void *)(v31 + 16))
  {
    uint64_t v32 = sub_100249514(*(unsigned __int8 *)(v202 + 56), v31);
    uint64_t v201 = v2;
    if (v2) {
      return sub_10000C970(v210, *((unint64_t *)&v210 + 1));
    }
    unint64_t v17 = v33;
    uint64_t v18 = v32;
    switch(v33 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v32), v32)) {
          goto LABEL_145;
        }
        uint64_t v34 = HIDWORD(v32) - (int)v32;
LABEL_16:
        sub_100013D44(v32, v33);
        if (v34 >= 0xFFFF) {
          goto LABEL_86;
        }
LABEL_17:
        uint64_t v196 = v11;
        uint64_t v35 = v7;
        uint64_t v191 = v8;
        uint64_t v192 = v5;
        uint64_t v193 = v4;
        uint64_t v38 = sub_100247790(257, v18, v17);
        unint64_t v40 = v39;
        sub_10000C970(v18, v17);
        Data.append(_:)();
        sub_10000C970(v38, v40);
        sub_10000C970(v18, v17);
        break;
      case 2uLL:
        uint64_t v37 = *(void *)(v32 + 16);
        uint64_t v36 = *(void *)(v32 + 24);
        uint64_t v34 = v36 - v37;
        if (!__OFSUB__(v36, v37)) {
          goto LABEL_16;
        }
        goto LABEL_146;
      default:
        goto LABEL_17;
    }
  }
  else
  {
    uint64_t v201 = v2;
    uint64_t v196 = v11;
    uint64_t v35 = v7;
    uint64_t v191 = v8;
    uint64_t v192 = v5;
    uint64_t v193 = v4;
  }
  uint64_t v41 = NANPublish.Configuration.serviceInfo.getter();
  uint64_t v43 = v42;
  unint64_t v45 = v44;
  sub_100013D44(v42, v44);
  unint64_t v46 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v47 = type metadata accessor for BinaryEncoder();
  uint64_t v48 = swift_allocObject();
  *(_OWORD *)(v48 + 16) = v200;
  *(void *)(v48 + 32) = v46;
  v195 = (char *)v47;
  uint64_t v208 = v47;
  uint64_t v194 = sub_10024DC6C((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
  uint64_t v209 = v194;
  __src[0] = v48;
  sub_100013D44(v43, v45);
  swift_retain();
  uint64_t v49 = v201;
  NANServiceInfo.encode(to:)(__src, v41, v43, v45);
  if (v49)
  {
    sub_100010754((uint64_t)__src);
    sub_10000C970(v43, v45);
    sub_10000C970(v43, v45);
    swift_release();
    swift_errorRelease();
    sub_10000C970(v43, v45);
    uint64_t v201 = 0;
    unint64_t v50 = v35;
  }
  else
  {
    uint64_t v201 = 0;
    sub_100010754((uint64_t)__src);
    sub_10000C970(v43, v45);
    sub_10000C970(v43, v45);
    swift_beginAccess();
    uint64_t v18 = *(void *)(v48 + 16);
    unint64_t v17 = *(void *)(v48 + 24);
    sub_100013D44(v18, v17);
    swift_release();
    sub_10000C970(v43, v45);
    unint64_t v50 = v35;
    switch(v17 >> 62)
    {
      case 1uLL:
        if ((v18 ^ (unint64_t)(v18 << 32)) >> 32) {
          goto LABEL_31;
        }
        goto LABEL_26;
      case 2uLL:
        uint64_t v52 = *(void *)(v18 + 16);
        uint64_t v53 = *(void *)(v18 + 24);
        if (v52 == v53) {
          goto LABEL_26;
        }
        if (v17 >> 62 != 2) {
          goto LABEL_31;
        }
        uint64_t v51 = v9;
        uint64_t v9 = v53 - v52;
        if (!__OFSUB__(v53, v52)) {
          goto LABEL_33;
        }
        __break(1u);
LABEL_31:
        if (__OFSUB__(HIDWORD(v18), v18)) {
          goto LABEL_151;
        }
        uint64_t v51 = v9;
        uint64_t v9 = HIDWORD(v18) - (int)v18;
LABEL_33:
        sub_100013D44(v18, v17);
        if (v9 >= 0xFFFF) {
          goto LABEL_86;
        }
LABEL_34:
        uint64_t v54 = sub_100247790(780, v18, v17);
        unint64_t v56 = v55;
        sub_10000C970(v18, v17);
        Data.append(_:)();
        sub_10000C970(v54, v56);
LABEL_35:
        sub_10000C970(v18, v17);
        uint64_t v9 = v51;
        break;
      case 3uLL:
LABEL_26:
        sub_10000C970(v18, v17);
        break;
      default:
        uint64_t v51 = v9;
        if ((v17 & 0xFF000000000000) == 0) {
          goto LABEL_35;
        }
        goto LABEL_34;
    }
  }
  uint64_t v190 = v9;
  uint64_t v57 = type metadata accessor for NANPublish.Configuration();
  uint64_t v58 = v202 + *(int *)(v57 + 84);
  uint64_t v59 = *(void *)(v58 + 16);
  if (*(void *)(v59 + 16)) {
    __int16 v60 = 580;
  }
  else {
    __int16 v60 = 516;
  }
  int v61 = *(unsigned __int8 *)(v202 + 77);
  if (v61) {
    __int16 v62 = 3;
  }
  else {
    __int16 v62 = 1;
  }
  if (v61 == 2) {
    __int16 v63 = 0;
  }
  else {
    __int16 v63 = v62;
  }
  LOWORD(__src[0]) = v60 | v63;
  uint64_t v64 = sub_100260F60(__src, 2);
  uint64_t v18 = v64;
  unint64_t v17 = v65;
  switch(v65 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v64), v64)) {
        goto LABEL_136;
      }
      uint64_t v66 = HIDWORD(v64) - (int)v64;
LABEL_49:
      sub_100013D44(v64, v65);
      if (v66 >= 0xFFFF) {
        goto LABEL_86;
      }
LABEL_50:
      uint64_t v188 = v58;
      uint64_t v187 = v57;
      uint64_t v69 = sub_100247790(772, v18, v17);
      unint64_t v71 = v70;
      sub_10000C970(v18, v17);
      Data.append(_:)();
      sub_10000C970(v69, v71);
      sub_10000C970(v18, v17);
      if (!*(void *)(v59 + 16)) {
        goto LABEL_71;
      }
      break;
    case 2uLL:
      uint64_t v68 = *(void *)(v64 + 16);
      uint64_t v67 = *(void *)(v64 + 24);
      uint64_t v66 = v67 - v68;
      if (!__OFSUB__(v67, v68)) {
        goto LABEL_49;
      }
      goto LABEL_137;
    default:
      goto LABEL_50;
  }
  uint64_t v72 = v50;
  char v73 = *(unsigned char *)(v59 + 32);
  uint64_t v75 = *(void *)(v59 + 40);
  unint64_t v74 = *(void *)(v59 + 48);
  uint64_t v77 = *(void *)(v59 + 56);
  unint64_t v76 = *(void *)(v59 + 64);
  sub_100010BCC(&qword_10047BEF8);
  uint64_t v78 = swift_allocObject();
  *(_OWORD *)(v78 + 16) = xmmword_1003B2450;
  *(unsigned char *)(v78 + 32) = v73 + 1;
  unint64_t v185 = v74 >> 62;
  uint64_t v189 = v75;
  unint64_t v186 = v74;
  sub_100013D44(v75, v74);
  sub_100038004(v77, v76);
  swift_bridgeObjectRetain();
  uint64_t v79 = sub_1001265EC(v78);
  unint64_t v81 = v80;
  swift_bridgeObjectRelease();
  switch(v81 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v79), v79)) {
        goto LABEL_143;
      }
      uint64_t v82 = HIDWORD(v79) - (int)v79;
LABEL_55:
      sub_100013D44(v79, v81);
      if (v82 >= 0xFFFF)
      {
        sub_10000F000();
        uint64_t v91 = swift_allocError();
        *(void *)uint64_t v92 = 0;
        *(void *)(v92 + 8) = 0;
        *(unsigned char *)(v92 + 16) = 2;
        uint64_t v201 = v91;
        swift_willThrow();
        sub_10000C970(v79, v81);
        sub_10000C970(v79, v81);
        uint64_t v93 = v189;
        unint64_t v94 = v186;
      }
      else
      {
LABEL_56:
        uint64_t v184 = v77;
        uint64_t v85 = sub_100247790(264, v79, v81);
        unint64_t v87 = v86;
        sub_10000C970(v79, v81);
        Data.append(_:)();
        sub_10000C970(v85, v87);
        sub_10000C970(v79, v81);
        unint64_t v50 = v72;
        uint64_t v77 = v184;
        unint64_t v88 = v186;
        uint64_t v89 = v189;
        switch((int)v185)
        {
          case 1:
            if (__OFSUB__(HIDWORD(v189), v189)) {
              goto LABEL_149;
            }
            uint64_t v90 = HIDWORD(v189) - (int)v189;
LABEL_61:
            sub_100013D44(v189, v186);
            sub_100013D44(v89, v88);
            if (v90 >= 0xFFFF)
            {
              sub_10000F000();
              uint64_t v101 = swift_allocError();
              *(void *)uint64_t v102 = 0;
              *(void *)(v102 + 8) = 0;
              *(unsigned char *)(v102 + 16) = 2;
              uint64_t v201 = v101;
              swift_willThrow();
              sub_10000C970(v89, v88);
              sub_10000C970(v89, v88);
            }
            else
            {
LABEL_62:
              uint64_t v97 = sub_100247790(265, v89, v88);
              unint64_t v99 = v98;
              sub_10000C970(v89, v88);
              Data.append(_:)();
              uint64_t v89 = v189;
              sub_10000C970(v97, v99);
              sub_10000C970(v89, v88);
              if (v76 >> 60 == 15)
              {
                sub_10000C970(v89, v88);
                sub_10000C95C(v77, v76);
                swift_bridgeObjectRelease();
                goto LABEL_71;
              }
              switch(v76 >> 62)
              {
                case 1uLL:
                  if (__OFSUB__(HIDWORD(v77), v77)) {
                    goto LABEL_154;
                  }
                  uint64_t v100 = HIDWORD(v77) - (int)v77;
LABEL_69:
                  sub_100038004(v77, v76);
                  sub_100013D44(v77, v76);
                  if (v100 < 0xFFFF)
                  {
LABEL_70:
                    uint64_t v105 = sub_100247790(266, v77, v76);
                    unint64_t v107 = v106;
                    sub_10000C95C(v77, v76);
                    Data.append(_:)();
                    sub_10000C970(v105, v107);
                    sub_10000C970(v89, v88);
                    sub_10000C95C(v77, v76);
                    swift_bridgeObjectRelease();
                    sub_10000C95C(v77, v76);
LABEL_71:
                    sub_100010BCC(&qword_10047BEF8);
                    uint64_t v108 = swift_allocObject();
                    *(_OWORD *)(v108 + 16) = xmmword_1003B2450;
                    *(unsigned char *)(v108 + 32) = *(unsigned char *)(v202 + 32);
                    uint64_t v18 = sub_1001265EC(v108);
                    unint64_t v17 = v109;
                    swift_bridgeObjectRelease();
                    switch(v17 >> 62)
                    {
                      case 1uLL:
                        if (__OFSUB__(HIDWORD(v18), v18)) {
                          goto LABEL_140;
                        }
                        uint64_t v110 = HIDWORD(v18) - (int)v18;
LABEL_75:
                        sub_100013D44(v18, v17);
                        if (v110 >= 0xFFFF) {
                          goto LABEL_86;
                        }
                        break;
                      case 2uLL:
                        uint64_t v112 = *(void *)(v18 + 16);
                        uint64_t v111 = *(void *)(v18 + 24);
                        uint64_t v110 = v111 - v112;
                        if (!__OFSUB__(v111, v112)) {
                          goto LABEL_75;
                        }
                        goto LABEL_141;
                      default:
                        break;
                    }
                    uint64_t v113 = sub_100247790(781, v18, v17);
                    unint64_t v115 = v114;
                    sub_10000C970(v18, v17);
                    Data.append(_:)();
                    sub_10000C970(v113, v115);
                    sub_10000C970(v18, v17);
                    uint64_t v116 = v202;
                    __int16 v117 = *(_WORD *)(v202 + 88);
                    uint64_t v118 = swift_allocObject();
                    *(_OWORD *)(v118 + 16) = xmmword_1003B2F40;
                    *(_DWORD *)(v118 + 32) = *(_DWORD *)(v116 + 84);
                    *(_WORD *)(v118 + 36) = v117;
                    uint64_t v18 = sub_1001265EC(v118);
                    unint64_t v17 = v119;
                    swift_bridgeObjectRelease();
                    uint64_t v120 = v196;
                    uint64_t v121 = v195;
                    switch(v17 >> 62)
                    {
                      case 1uLL:
                        if (__OFSUB__(HIDWORD(v18), v18)) {
                          goto LABEL_147;
                        }
                        uint64_t v122 = HIDWORD(v18) - (int)v18;
LABEL_80:
                        sub_100013D44(v18, v17);
                        if (v122 >= 0xFFFF) {
                          goto LABEL_86;
                        }
LABEL_81:
                        uint64_t v196 = v120;
                        uint64_t v125 = sub_100247790(782, v18, v17);
                        unint64_t v127 = v126;
                        sub_10000C970(v18, v17);
                        Data.append(_:)();
                        sub_10000C970(v125, v127);
                        sub_10000C970(v18, v17);
                        swift_bridgeObjectRetain();
                        uint64_t v128 = NANGenericServiceProtocol.packetData(for:)(3);
                        unint64_t v130 = v129;
                        swift_bridgeObjectRelease();
                        if (v130 >> 60 == 15)
                        {
                          uint64_t v128 = 0;
                          unint64_t v131 = 0xC000000000000000;
                        }
                        else
                        {
                          unint64_t v131 = v130;
                        }
                        sub_100013D44(v128, v131);
                        unint64_t v132 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
                        uint64_t v133 = swift_allocObject();
                        *(_OWORD *)(v133 + 16) = v200;
                        *(void *)(v133 + 32) = v132;
                        uint64_t v208 = (uint64_t)v121;
                        uint64_t v209 = v194;
                        __src[0] = v133;
                        sub_100013D44(v128, v131);
                        swift_retain();
                        uint64_t v134 = v201;
                        NANServiceInfo.encode(to:)(__src, 2, v128, v131);
                        if (v134)
                        {
                          sub_100010754((uint64_t)__src);
                          sub_10000C970(v128, v131);
                          sub_10000C970(v128, v131);
                          swift_release();
                          swift_errorRelease();
                          sub_10000C970(v128, v131);
LABEL_114:
                          uint64_t v159 = 0;
                          switch(*((void *)&v210 + 1) >> 62)
                          {
                            case 1:
                              LODWORD(v159) = DWORD1(v210) - v210;
                              if (__OFSUB__(DWORD1(v210), v210)) {
                                goto LABEL_152;
                              }
                              uint64_t v159 = (int)v159;
LABEL_119:
                              v195 = v50;
                              uint64_t v163 = v159 + 20;
                              if (__OFADD__(v159, 20))
                              {
                                __break(1u);
                              }
                              else
                              {
                                uint64_t v205 = sub_100126710(v159 + 20);
                                unint64_t v206 = v164;
                                memset(__src, 0, 23);
                                swift_bridgeObjectRetain();
                                v165 = v197;
                                SHA256.init()();
                                Swift::String v166 = String.lowercased()();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRetain();
                                sub_1001A5654(v166._countAndFlagsBits, (uint64_t)v166._object);
                                swift_bridgeObjectRelease();
                                v167 = v199;
                                SHA256.finalize()();
                                SHA256Digest.withUnsafeBytes<A>(_:)();
                                (*(void (**)(char *, uint64_t))(v190 + 8))(v167, v191);
                                uint64_t v168 = v203;
                                unint64_t v169 = v204;
                                (*(void (**)(char *, uint64_t))(v198 + 8))(v165, v196);
                                uint64_t v203 = v168;
                                unint64_t v204 = v169;
                                sub_100074B70();
                                DataProtocol.copyBytes(to:)();
                                sub_10000C970(v168, v169);
                                if (v163 <= 1) {
                                  goto LABEL_159;
                                }
                                uint64_t v170 = v193;
                                v171 = v195;
                                if ((unint64_t)(v163 - 2) >= 0x10000) {
                                  goto LABEL_159;
                                }
                                LOWORD(__src[0]) = v163 - 2;
                                uint64_t v172 = sub_1001ADA80();
                                void *v171 = 0x80000;
                                uint64_t v173 = v192;
                                (*(void (**)(void *, void, uint64_t))(v192 + 104))(v171, enum case for DispatchTimeInterval.microseconds(_:), v170);
                                uint64_t v174 = sub_1001ADA80();
                                (*(void (**)(void *, uint64_t))(v173 + 8))(v171, v170);
                                if (v174)
                                {
                                  if (v172 != 0x8000000000000000 || v174 != -1)
                                  {
                                    if (((v172 / v174) & 0x8000000000000000) == 0
                                      && (unint64_t)(v172 / v174) < 0x100)
                                    {
                                      BYTE2(__src[0]) = v172 / v174;
                                      BYTE2(__src[1]) = *(unsigned char *)v202;
                                      int v175 = HIDWORD(__src[1]) | ((*(unsigned __int8 *)(v202 + 72) << 12) + 4096);
                                      HIDWORD(__src[1]) = v175;
                                      if (*(unsigned char *)(v202 + 74) == 1) {
                                        HIDWORD(__src[1]) = v175 | 0x8000;
                                      }
                                      LODWORD(__src[2]) = -1;
                                      sub_10024B8A4(&v205, (uint64_t)__src, (uint64_t *)&v210);
                                      uint64_t v176 = v205;
                                      unint64_t v17 = v206;
                                      sub_100013D44(v205, v206);
                                      uint64_t v177 = sub_100240C34(7233902, 0xE300000000000000, 770, v176, v17, 1);
                                      uint64_t v201 = 0;
                                      uint64_t v178 = v177;
                                      unint64_t v180 = v179;
                                      sub_10000C970(v176, v17);
                                      sub_10000C970(v178, v180);
                                      uint64_t v139 = v176;
                                      goto LABEL_130;
                                    }
LABEL_159:
                                    _assertionFailure(_:_:file:line:flags:)();
                                    __break(1u);
                                    JUMPOUT(0x100238730);
                                  }
LABEL_142:
                                  __break(1u);
LABEL_143:
                                  __break(1u);
LABEL_144:
                                  __break(1u);
LABEL_145:
                                  __break(1u);
LABEL_146:
                                  __break(1u);
LABEL_147:
                                  __break(1u);
LABEL_148:
                                  __break(1u);
LABEL_149:
                                  __break(1u);
LABEL_150:
                                  __break(1u);
LABEL_151:
                                  __break(1u);
LABEL_152:
                                  __break(1u);
LABEL_153:
                                  __break(1u);
LABEL_154:
                                  __break(1u);
LABEL_155:
                                  __break(1u);
LABEL_156:
                                  __break(1u);
                                }
                              }
                              __break(1u);
LABEL_136:
                              __break(1u);
LABEL_137:
                              __break(1u);
LABEL_138:
                              __break(1u);
LABEL_139:
                              __break(1u);
LABEL_140:
                              __break(1u);
LABEL_141:
                              __break(1u);
                              goto LABEL_142;
                            case 2:
                              uint64_t v161 = *(void *)(v210 + 16);
                              uint64_t v160 = *(void *)(v210 + 24);
                              BOOL v162 = __OFSUB__(v160, v161);
                              uint64_t v159 = v160 - v161;
                              if (!v162) {
                                goto LABEL_119;
                              }
                              goto LABEL_153;
                            case 3:
                              goto LABEL_119;
                            default:
                              uint64_t v159 = BYTE14(v210);
                              goto LABEL_119;
                          }
                        }
                        break;
                      case 2uLL:
                        uint64_t v124 = *(void *)(v18 + 16);
                        uint64_t v123 = *(void *)(v18 + 24);
                        uint64_t v122 = v123 - v124;
                        if (!__OFSUB__(v123, v124)) {
                          goto LABEL_80;
                        }
                        goto LABEL_148;
                      default:
                        goto LABEL_81;
                    }
                    sub_100010754((uint64_t)__src);
                    sub_10000C970(v128, v131);
                    sub_10000C970(v128, v131);
                    swift_beginAccess();
                    uint64_t v18 = *(void *)(v133 + 16);
                    unint64_t v17 = *(void *)(v133 + 24);
                    sub_100013D44(v18, v17);
                    swift_release();
                    sub_10000C970(v128, v131);
                    switch(v17 >> 62)
                    {
                      case 1uLL:
                        if (!((v18 ^ (unint64_t)(v18 << 32)) >> 32)) {
                          goto LABEL_113;
                        }
                        goto LABEL_102;
                      case 2uLL:
                        uint64_t v142 = *(void *)(v18 + 16);
                        uint64_t v143 = *(void *)(v18 + 24);
                        if (v142 == v143) {
                          goto LABEL_113;
                        }
                        if (v17 >> 62 != 2) {
                          goto LABEL_102;
                        }
                        uint64_t v144 = v143 - v142;
                        if (!__OFSUB__(v143, v142)) {
                          goto LABEL_104;
                        }
                        __break(1u);
LABEL_102:
                        if (__OFSUB__(HIDWORD(v18), v18)) {
                          goto LABEL_156;
                        }
                        uint64_t v144 = HIDWORD(v18) - (int)v18;
LABEL_104:
                        sub_100013D44(v18, v17);
                        if (v144 >= 0xFFFF)
                        {
                          sub_10000C970(v18, v17);
                          sub_10000F000();
                          uint64_t v147 = swift_allocError();
                          *(_OWORD *)uint64_t v148 = xmmword_1003B2F90;
                          *(unsigned char *)(v148 + 16) = 0;
                          uint64_t v201 = v147;
                          swift_willThrow();
                          goto LABEL_88;
                        }
LABEL_105:
                        sub_100013D44(v18, v17);
                        unint64_t v145 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
                        uint64_t v146 = swift_allocObject();
                        *(_OWORD *)(v146 + 16) = v200;
                        *(void *)(v146 + 32) = v145;
                        uint64_t v208 = (uint64_t)v121;
                        uint64_t v209 = v194;
                        __src[0] = v146;
                        sub_100013D44(v18, v17);
                        swift_retain();
                        sub_10024AD70(__src, 1, v18, v17);
                        sub_100010754((uint64_t)__src);
                        sub_10000C970(v18, v17);
                        sub_10000C970(v18, v17);
                        swift_beginAccess();
                        uint64_t v149 = *(void *)(v146 + 16);
                        unint64_t v150 = *(void *)(v146 + 24);
                        sub_100013D44(v149, v150);
                        swift_release();
                        sub_10000C970(v18, v17);
                        switch(v150 >> 62)
                        {
                          case 1uLL:
                            if (__OFSUB__(HIDWORD(v149), v149))
                            {
                              __break(1u);
LABEL_158:
                              __break(1u);
                              goto LABEL_159;
                            }
                            uint64_t v151 = HIDWORD(v149) - (int)v149;
LABEL_111:
                            sub_100013D44(v149, v150);
                            if (v151 < 0xFFFF)
                            {
LABEL_112:
                              uint64_t v154 = sub_100247790(784, v149, v150);
                              v155 = v50;
                              unint64_t v157 = v156;
                              sub_10000C970(v149, v150);
                              Data.append(_:)();
                              unint64_t v158 = v157;
                              unint64_t v50 = v155;
                              sub_10000C970(v154, v158);
                              sub_10000C970(v149, v150);
LABEL_113:
                              sub_10000C970(v18, v17);
                              goto LABEL_114;
                            }
                            sub_10000F000();
                            uint64_t v181 = swift_allocError();
                            *(void *)uint64_t v182 = 0;
                            *(void *)(v182 + 8) = 0;
                            *(unsigned char *)(v182 + 16) = 2;
                            uint64_t v201 = v181;
                            swift_willThrow();
                            sub_10000C970(v149, v150);
                            uint64_t v137 = v149;
                            unint64_t v138 = v150;
                            break;
                          case 2uLL:
                            uint64_t v153 = *(void *)(v149 + 16);
                            uint64_t v152 = *(void *)(v149 + 24);
                            uint64_t v151 = v152 - v153;
                            if (!__OFSUB__(v152, v153)) {
                              goto LABEL_111;
                            }
                            goto LABEL_158;
                          default:
                            goto LABEL_112;
                        }
                        break;
                      case 3uLL:
                        goto LABEL_113;
                      default:
                        if ((v17 & 0xFF000000000000) == 0) {
                          goto LABEL_113;
                        }
                        goto LABEL_105;
                    }
LABEL_87:
                    sub_10000C970(v137, v138);
LABEL_88:
                    uint64_t v139 = v18;
LABEL_130:
                    sub_10000C970(v139, v17);
                    return sub_10000C970(v210, *((unint64_t *)&v210 + 1));
                  }
                  sub_10000F000();
                  uint64_t v140 = swift_allocError();
                  *(void *)uint64_t v141 = 0;
                  *(void *)(v141 + 8) = 0;
                  *(unsigned char *)(v141 + 16) = 2;
                  uint64_t v201 = v140;
                  swift_willThrow();
                  sub_10000C95C(v77, v76);
                  sub_10000C95C(v77, v76);
                  break;
                case 2uLL:
                  uint64_t v104 = *(void *)(v77 + 16);
                  uint64_t v103 = *(void *)(v77 + 24);
                  uint64_t v100 = v103 - v104;
                  if (!__OFSUB__(v103, v104)) {
                    goto LABEL_69;
                  }
                  goto LABEL_155;
                default:
                  goto LABEL_70;
              }
            }
            uint64_t v93 = v89;
            unint64_t v94 = v88;
            break;
          case 2:
            uint64_t v96 = *(void *)(v189 + 16);
            uint64_t v95 = *(void *)(v189 + 24);
            uint64_t v90 = v95 - v96;
            if (!__OFSUB__(v95, v96)) {
              goto LABEL_61;
            }
            goto LABEL_150;
          default:
            goto LABEL_62;
        }
      }
      sub_10000C970(v93, v94);
      sub_10000C95C(v77, v76);
      swift_bridgeObjectRelease();
      break;
    case 2uLL:
      uint64_t v84 = *(void *)(v79 + 16);
      uint64_t v83 = *(void *)(v79 + 24);
      uint64_t v82 = v83 - v84;
      if (!__OFSUB__(v83, v84)) {
        goto LABEL_55;
      }
      goto LABEL_144;
    default:
      goto LABEL_56;
  }
  return sub_10000C970(v210, *((unint64_t *)&v210 + 1));
}

uint64_t BroadcomDriver<>.start(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v195 = a4;
  uint64_t v8 = type metadata accessor for DispatchTimeInterval();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)v185 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for SHA256Digest();
  uint64_t v199 = *(void *)(v12 - 8);
  __chkstk_darwin();
  uint64_t v198 = (char *)v185 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for SHA256();
  uint64_t v197 = *(void *)(v14 - 8);
  __chkstk_darwin();
  uint64_t v196 = (char *)v185 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v210 = xmmword_1003B2440;
  uint64_t v202 = a1;
  uint64_t v16 = *(void *)(a1 + 48);
  uint64_t v17 = *(void *)(v16 + 16);
  uint64_t v200 = a3;
  long long v201 = xmmword_1003B2440;
  if (v17)
  {
    uint64_t result = sub_100249514(*(unsigned __int8 *)(v202 + 40), v16);
    if (v4) {
      return result;
    }
    unint64_t v20 = v19;
    uint64_t v194 = v12;
    uint64_t v21 = result;
    switch(v19 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(result), result)) {
          goto LABEL_140;
        }
        uint64_t v22 = HIDWORD(result) - (int)result;
LABEL_7:
        sub_100013D44(result, v19);
        if (v22 >= 0xFFFF)
        {
LABEL_48:
          sub_10000F000();
          swift_allocError();
          *(void *)uint64_t v68 = 0;
          *(void *)(v68 + 8) = 0;
          *(unsigned char *)(v68 + 16) = 2;
          swift_willThrow();
          uint64_t v69 = v21;
          unint64_t v70 = v20;
          goto LABEL_49;
        }
LABEL_8:
        uint64_t v25 = sub_100247790(258, v21, v20);
        uint64_t v193 = v9;
        uint64_t v26 = a2;
        uint64_t v27 = v25;
        uint64_t v192 = v14;
        unint64_t v28 = v11;
        uint64_t v29 = v8;
        unint64_t v31 = v30;
        sub_10000C970(v21, v20);
        Data.append(_:)();
        uint64_t v32 = v27;
        a2 = v26;
        uint64_t v9 = v193;
        unint64_t v33 = v31;
        uint64_t v8 = v29;
        uint64_t v11 = v28;
        uint64_t v14 = v192;
        sub_10000C970(v32, v33);
        sub_10000C970(v21, v20);
        uint64_t v12 = v194;
        break;
      case 2uLL:
        uint64_t v24 = *(void *)(result + 16);
        uint64_t v23 = *(void *)(result + 24);
        uint64_t v22 = v23 - v24;
        if (!__OFSUB__(v23, v24)) {
          goto LABEL_7;
        }
        goto LABEL_141;
      default:
        goto LABEL_8;
    }
  }
  uint64_t v34 = *(void *)(v202 + 64);
  if (*(void *)(v34 + 16))
  {
    uint64_t v35 = sub_100249514(*(unsigned __int8 *)(v202 + 56), v34);
    if (v4) {
      return sub_10000C970(v210, *((unint64_t *)&v210 + 1));
    }
    unint64_t v20 = v36;
    uint64_t v194 = v12;
    uint64_t v21 = v35;
    switch(v36 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v35), v35)) {
          goto LABEL_147;
        }
        uint64_t v37 = HIDWORD(v35) - (int)v35;
LABEL_16:
        sub_100013D44(v35, v36);
        if (v37 >= 0xFFFF) {
          goto LABEL_48;
        }
LABEL_17:
        uint64_t v188 = v11;
        uint64_t v192 = v14;
        uint64_t v193 = v9;
        uint64_t v189 = v8;
        uint64_t v187 = a2;
        uint64_t v40 = sub_100247790(257, v21, v20);
        unint64_t v42 = v41;
        sub_10000C970(v21, v20);
        Data.append(_:)();
        sub_10000C970(v40, v42);
        sub_10000C970(v21, v20);
        break;
      case 2uLL:
        uint64_t v39 = *(void *)(v35 + 16);
        uint64_t v38 = *(void *)(v35 + 24);
        uint64_t v37 = v38 - v39;
        if (!__OFSUB__(v38, v39)) {
          goto LABEL_16;
        }
        goto LABEL_148;
      default:
        goto LABEL_17;
    }
  }
  else
  {
    uint64_t v188 = v11;
    uint64_t v192 = v14;
    uint64_t v194 = v12;
    uint64_t v193 = v9;
    uint64_t v189 = v8;
    uint64_t v187 = a2;
  }
  uint64_t v43 = NANPublish.Configuration.serviceInfo.getter();
  uint64_t v45 = v44;
  unint64_t v47 = v46;
  sub_100013D44(v44, v46);
  unint64_t v48 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v49 = type metadata accessor for BinaryEncoder();
  uint64_t v50 = swift_allocObject();
  *(_OWORD *)(v50 + 16) = v201;
  *(void *)(v50 + 32) = v48;
  uint64_t v191 = v49;
  uint64_t v208 = v49;
  uint64_t v190 = sub_10024DC6C((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
  uint64_t v209 = v190;
  __src[0] = v50;
  sub_100013D44(v45, v47);
  swift_retain();
  NANServiceInfo.encode(to:)(__src, v43, v45, v47);
  if (v4)
  {
    sub_100010754((uint64_t)__src);
    sub_10000C970(v45, v47);
    sub_10000C970(v45, v47);
    swift_release();
    swift_errorRelease();
    sub_10000C970(v45, v47);
    uint64_t v186 = 0;
  }
  else
  {
    sub_100010754((uint64_t)__src);
    sub_10000C970(v45, v47);
    sub_10000C970(v45, v47);
    swift_beginAccess();
    uint64_t v21 = *(void *)(v50 + 16);
    unint64_t v20 = *(void *)(v50 + 24);
    sub_100013D44(v21, v20);
    swift_release();
    sub_10000C970(v45, v47);
    switch(v20 >> 62)
    {
      case 1uLL:
        if ((v21 ^ (unint64_t)(v21 << 32)) >> 32) {
          goto LABEL_31;
        }
        goto LABEL_26;
      case 2uLL:
        uint64_t v51 = *(void *)(v21 + 16);
        uint64_t v52 = *(void *)(v21 + 24);
        if (v51 == v52) {
          goto LABEL_26;
        }
        if (v20 >> 62 != 2) {
          goto LABEL_31;
        }
        uint64_t v53 = v52 - v51;
        if (!__OFSUB__(v52, v51)) {
          goto LABEL_33;
        }
        __break(1u);
LABEL_31:
        if (__OFSUB__(HIDWORD(v21), v21)) {
          goto LABEL_153;
        }
        uint64_t v53 = HIDWORD(v21) - (int)v21;
LABEL_33:
        sub_100013D44(v21, v20);
        if (v53 >= 0xFFFF) {
          goto LABEL_48;
        }
LABEL_34:
        uint64_t v186 = 0;
        uint64_t v54 = sub_100247790(780, v21, v20);
        unint64_t v56 = v55;
        sub_10000C970(v21, v20);
        Data.append(_:)();
        sub_10000C970(v54, v56);
LABEL_35:
        sub_10000C970(v21, v20);
        break;
      case 3uLL:
        goto LABEL_26;
      default:
        if ((v20 & 0xFF000000000000) != 0) {
          goto LABEL_34;
        }
LABEL_26:
        uint64_t v186 = 0;
        goto LABEL_35;
    }
  }
  uint64_t v57 = type metadata accessor for NANPublish.Configuration();
  uint64_t v58 = v202 + *(int *)(v57 + 84);
  uint64_t v59 = *(void *)(v58 + 16);
  if (*(void *)(v59 + 16)) {
    __int16 v60 = 580;
  }
  else {
    __int16 v60 = 516;
  }
  int v61 = *(unsigned __int8 *)(v202 + 77);
  if (v61) {
    __int16 v62 = 3;
  }
  else {
    __int16 v62 = 1;
  }
  if (v61 == 2) {
    __int16 v63 = 0;
  }
  else {
    __int16 v63 = v62;
  }
  LOWORD(__src[0]) = v63 | v60;
  uint64_t v64 = sub_100260F60(__src, 2);
  uint64_t v66 = v64;
  unint64_t v20 = v65;
  switch(v65 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v64), v64)) {
        goto LABEL_138;
      }
      uint64_t v67 = HIDWORD(v64) - (int)v64;
LABEL_52:
      sub_100013D44(v64, v65);
      if (v67 >= 0xFFFF)
      {
LABEL_91:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v140 = 0;
        *(void *)(v140 + 8) = 0;
        *(unsigned char *)(v140 + 16) = 2;
        swift_willThrow();
        sub_10000C970(v66, v20);
        uint64_t v71 = v66;
        goto LABEL_92;
      }
LABEL_53:
      uint64_t v74 = sub_100247790(772, v66, v20);
      unint64_t v76 = v75;
      sub_10000C970(v66, v20);
      Data.append(_:)();
      sub_10000C970(v74, v76);
      sub_10000C970(v66, v20);
      uint64_t v77 = *(void *)(v59 + 16);
      v185[3] = v57;
      if (!v77) {
        goto LABEL_76;
      }
      break;
    case 2uLL:
      uint64_t v73 = *(void *)(v64 + 16);
      uint64_t v72 = *(void *)(v64 + 24);
      uint64_t v67 = v72 - v73;
      if (!__OFSUB__(v72, v73)) {
        goto LABEL_52;
      }
      goto LABEL_139;
    default:
      goto LABEL_53;
  }
  v185[1] = v58;
  char v78 = *(unsigned char *)(v59 + 32);
  uint64_t v80 = *(void *)(v59 + 40);
  unint64_t v79 = *(void *)(v59 + 48);
  uint64_t v82 = *(void *)(v59 + 56);
  unint64_t v81 = *(void *)(v59 + 64);
  uint64_t v83 = *(void *)(v59 + 80);
  sub_100010BCC(&qword_10047BEF8);
  uint64_t v84 = swift_allocObject();
  *(_OWORD *)(v84 + 16) = xmmword_1003B2450;
  *(unsigned char *)(v84 + 32) = v78 + 1;
  v185[0] = v79 >> 62;
  sub_100013D44(v80, v79);
  uint64_t v85 = v82;
  uint64_t v86 = v82;
  unint64_t v87 = v81;
  sub_100038004(v86, v81);
  v185[2] = v83;
  swift_bridgeObjectRetain();
  uint64_t v88 = sub_1001265EC(v84);
  unint64_t v90 = v89;
  swift_bridgeObjectRelease();
  switch(v90 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v88), v88)) {
        goto LABEL_145;
      }
      uint64_t v91 = HIDWORD(v88) - (int)v88;
LABEL_58:
      sub_100013D44(v88, v90);
      if (v91 >= 0xFFFF)
      {
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v98 = 0;
        *(void *)(v98 + 8) = 0;
        *(unsigned char *)(v98 + 16) = 2;
        swift_willThrow();
        sub_10000C970(v88, v90);
        uint64_t v99 = v88;
        unint64_t v100 = v90;
LABEL_71:
        sub_10000C970(v99, v100);
      }
      else
      {
LABEL_59:
        uint64_t v94 = sub_100247790(264, v88, v90);
        unint64_t v96 = v95;
        sub_10000C970(v88, v90);
        Data.append(_:)();
        sub_10000C970(v94, v96);
        sub_10000C970(v88, v90);
        switch(LODWORD(v185[0]))
        {
          case 1:
            if (__OFSUB__(HIDWORD(v80), v80)) {
              goto LABEL_151;
            }
            uint64_t v97 = HIDWORD(v80) - (int)v80;
LABEL_64:
            sub_100013D44(v80, v79);
            sub_100013D44(v80, v79);
            if (v97 >= 0xFFFF)
            {
              sub_10000F000();
              swift_allocError();
              *(void *)uint64_t v107 = 0;
              *(void *)(v107 + 8) = 0;
              *(unsigned char *)(v107 + 16) = 2;
              swift_willThrow();
              sub_10000C970(v80, v79);
              uint64_t v99 = v80;
              unint64_t v100 = v79;
              goto LABEL_71;
            }
LABEL_65:
            uint64_t v103 = sub_100247790(265, v80, v79);
            unint64_t v105 = v104;
            sub_10000C970(v80, v79);
            Data.append(_:)();
            sub_10000C970(v103, v105);
            sub_10000C970(v80, v79);
            if (v87 >> 60 == 15)
            {
              sub_10000C970(v80, v79);
              sub_10000C95C(v85, v87);
              swift_bridgeObjectRelease();
              goto LABEL_76;
            }
            switch(v87 >> 62)
            {
              case 1uLL:
                if (__OFSUB__(HIDWORD(v85), v85)) {
                  goto LABEL_156;
                }
                uint64_t v106 = HIDWORD(v85) - (int)v85;
LABEL_74:
                sub_100038004(v85, v87);
                sub_100013D44(v85, v87);
                if (v106 < 0xFFFF)
                {
LABEL_75:
                  uint64_t v110 = sub_100247790(266, v85, v87);
                  unint64_t v112 = v111;
                  sub_10000C95C(v85, v87);
                  Data.append(_:)();
                  sub_10000C970(v110, v112);
                  sub_10000C970(v80, v79);
                  sub_10000C95C(v85, v87);
                  swift_bridgeObjectRelease();
                  sub_10000C95C(v85, v87);
LABEL_76:
                  sub_100010BCC(&qword_10047BEF8);
                  uint64_t v113 = swift_allocObject();
                  *(_OWORD *)(v113 + 16) = xmmword_1003B2450;
                  *(unsigned char *)(v113 + 32) = *(unsigned char *)(v202 + 32);
                  uint64_t v66 = sub_1001265EC(v113);
                  unint64_t v20 = v114;
                  swift_bridgeObjectRelease();
                  switch(v20 >> 62)
                  {
                    case 1uLL:
                      if (__OFSUB__(HIDWORD(v66), v66)) {
                        goto LABEL_142;
                      }
                      uint64_t v115 = HIDWORD(v66) - (int)v66;
LABEL_80:
                      sub_100013D44(v66, v20);
                      if (v115 >= 0xFFFF) {
                        goto LABEL_91;
                      }
                      break;
                    case 2uLL:
                      uint64_t v117 = *(void *)(v66 + 16);
                      uint64_t v116 = *(void *)(v66 + 24);
                      uint64_t v115 = v116 - v117;
                      if (!__OFSUB__(v116, v117)) {
                        goto LABEL_80;
                      }
                      goto LABEL_143;
                    default:
                      break;
                  }
                  uint64_t v118 = sub_100247790(781, v66, v20);
                  unint64_t v120 = v119;
                  sub_10000C970(v66, v20);
                  Data.append(_:)();
                  sub_10000C970(v118, v120);
                  sub_10000C970(v66, v20);
                  uint64_t v121 = v202;
                  __int16 v122 = *(_WORD *)(v202 + 88);
                  uint64_t v123 = swift_allocObject();
                  *(_OWORD *)(v123 + 16) = xmmword_1003B2F40;
                  *(_DWORD *)(v123 + 32) = *(_DWORD *)(v121 + 84);
                  *(_WORD *)(v123 + 36) = v122;
                  uint64_t v66 = sub_1001265EC(v123);
                  unint64_t v20 = v124;
                  swift_bridgeObjectRelease();
                  uint64_t v125 = v191;
                  switch(v20 >> 62)
                  {
                    case 1uLL:
                      if (__OFSUB__(HIDWORD(v66), v66)) {
                        goto LABEL_149;
                      }
                      uint64_t v126 = HIDWORD(v66) - (int)v66;
LABEL_85:
                      sub_100013D44(v66, v20);
                      if (v126 >= 0xFFFF) {
                        goto LABEL_91;
                      }
LABEL_86:
                      uint64_t v129 = sub_100247790(782, v66, v20);
                      unint64_t v131 = v130;
                      sub_10000C970(v66, v20);
                      Data.append(_:)();
                      sub_10000C970(v129, v131);
                      sub_10000C970(v66, v20);
                      swift_bridgeObjectRetain();
                      uint64_t v132 = NANGenericServiceProtocol.packetData(for:)(3);
                      unint64_t v134 = v133;
                      swift_bridgeObjectRelease();
                      if (v134 >> 60 == 15)
                      {
                        uint64_t v132 = 0;
                        unint64_t v135 = 0xC000000000000000;
                      }
                      else
                      {
                        unint64_t v135 = v134;
                      }
                      sub_100013D44(v132, v135);
                      unint64_t v136 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
                      uint64_t v137 = swift_allocObject();
                      *(_OWORD *)(v137 + 16) = v201;
                      *(void *)(v137 + 32) = v136;
                      uint64_t v138 = v190;
                      uint64_t v208 = v125;
                      uint64_t v209 = v190;
                      __src[0] = v137;
                      sub_100013D44(v132, v135);
                      swift_retain();
                      uint64_t v139 = v186;
                      NANServiceInfo.encode(to:)(__src, 2, v132, v135);
                      if (v139)
                      {
                        sub_100010754((uint64_t)__src);
                        sub_10000C970(v132, v135);
                        sub_10000C970(v132, v135);
                        swift_release();
                        swift_errorRelease();
                        sub_10000C970(v132, v135);
LABEL_116:
                        uint64_t v159 = 0;
                        switch(*((void *)&v210 + 1) >> 62)
                        {
                          case 1:
                            LODWORD(v159) = DWORD1(v210) - v210;
                            if (__OFSUB__(DWORD1(v210), v210)) {
                              goto LABEL_154;
                            }
                            uint64_t v159 = (int)v159;
LABEL_121:
                            uint64_t v163 = v159 + 20;
                            if (__OFADD__(v159, 20))
                            {
                              __break(1u);
                            }
                            else
                            {
                              uint64_t v205 = (void *)sub_100126710(v159 + 20);
                              unint64_t v206 = v164;
                              memset(__src, 0, 23);
                              swift_bridgeObjectRetain();
                              v165 = v196;
                              SHA256.init()();
                              Swift::String v166 = String.lowercased()();
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRetain();
                              sub_1001A5654(v166._countAndFlagsBits, (uint64_t)v166._object);
                              swift_bridgeObjectRelease();
                              v167 = v198;
                              SHA256.finalize()();
                              SHA256Digest.withUnsafeBytes<A>(_:)();
                              (*(void (**)(char *, uint64_t))(v199 + 8))(v167, v194);
                              uint64_t v168 = v203;
                              unint64_t v169 = v204;
                              (*(void (**)(char *, uint64_t))(v197 + 8))(v165, v192);
                              uint64_t v203 = v168;
                              unint64_t v204 = v169;
                              sub_100074B70();
                              DataProtocol.copyBytes(to:)();
                              sub_10000C970(v168, v169);
                              if (v163 <= 1) {
                                goto LABEL_161;
                              }
                              __int16 v170 = v163 - 2;
                              BOOL v171 = (unint64_t)(v163 - 2) >= 0x10000;
                              uint64_t v172 = v200;
                              uint64_t v173 = v189;
                              uint64_t v174 = v193;
                              if (v171) {
                                goto LABEL_161;
                              }
                              LOWORD(__src[0]) = v170;
                              uint64_t v175 = sub_1001ADA80();
                              uint64_t v176 = v188;
                              *uint64_t v188 = 0x80000;
                              (*(void (**)(void *, void, uint64_t))(v174 + 104))(v176, enum case for DispatchTimeInterval.microseconds(_:), v173);
                              uint64_t v177 = sub_1001ADA80();
                              (*(void (**)(void *, uint64_t))(v174 + 8))(v176, v173);
                              if (v177)
                              {
                                if (v175 != 0x8000000000000000 || v177 != -1)
                                {
                                  if (((v175 / v177) & 0x8000000000000000) == 0
                                    && (unint64_t)(v175 / v177) < 0x100)
                                  {
                                    BYTE2(__src[0]) = v175 / v177;
                                    BYTE2(__src[1]) = *(unsigned char *)v202;
                                    int v178 = HIDWORD(__src[1]) | ((*(unsigned __int8 *)(v202 + 72) << 12) + 4096);
                                    HIDWORD(__src[1]) = v178;
                                    if (*(unsigned char *)(v202 + 74) == 1) {
                                      HIDWORD(__src[1]) = v178 | 0x8000;
                                    }
                                    LODWORD(__src[2]) = -1;
                                    sub_10024B8A4(&v205, (uint64_t)__src, (uint64_t *)&v210);
                                    unint64_t v179 = v205;
                                    unint64_t v180 = v206;
                                    sub_100013D44((uint64_t)v205, v206);
                                    uint64_t v181 = sub_10024177C(7233902, 0xE300000000000000, 770, v179, v180, 1, v187, v172, *(void *)(v195 + 16));
                                    unint64_t v183 = v182;
                                    sub_10000C970((uint64_t)v179, v180);
                                    sub_10000C970((uint64_t)v181, v183);
                                    uint64_t v71 = (uint64_t)v179;
                                    unint64_t v141 = v180;
                                    goto LABEL_132;
                                  }
LABEL_161:
                                  _assertionFailure(_:_:file:line:flags:)();
                                  __break(1u);
                                  JUMPOUT(0x100239F78);
                                }
LABEL_144:
                                __break(1u);
LABEL_145:
                                __break(1u);
LABEL_146:
                                __break(1u);
LABEL_147:
                                __break(1u);
LABEL_148:
                                __break(1u);
LABEL_149:
                                __break(1u);
LABEL_150:
                                __break(1u);
LABEL_151:
                                __break(1u);
LABEL_152:
                                __break(1u);
LABEL_153:
                                __break(1u);
LABEL_154:
                                __break(1u);
LABEL_155:
                                __break(1u);
LABEL_156:
                                __break(1u);
LABEL_157:
                                __break(1u);
LABEL_158:
                                __break(1u);
                              }
                            }
                            __break(1u);
LABEL_138:
                            __break(1u);
LABEL_139:
                            __break(1u);
LABEL_140:
                            __break(1u);
LABEL_141:
                            __break(1u);
LABEL_142:
                            __break(1u);
LABEL_143:
                            __break(1u);
                            goto LABEL_144;
                          case 2:
                            uint64_t v161 = *(void *)(v210 + 16);
                            uint64_t v160 = *(void *)(v210 + 24);
                            BOOL v162 = __OFSUB__(v160, v161);
                            uint64_t v159 = v160 - v161;
                            if (!v162) {
                              goto LABEL_121;
                            }
                            goto LABEL_155;
                          case 3:
                            goto LABEL_121;
                          default:
                            uint64_t v159 = BYTE14(v210);
                            goto LABEL_121;
                        }
                      }
                      break;
                    case 2uLL:
                      uint64_t v128 = *(void *)(v66 + 16);
                      uint64_t v127 = *(void *)(v66 + 24);
                      uint64_t v126 = v127 - v128;
                      if (!__OFSUB__(v127, v128)) {
                        goto LABEL_85;
                      }
                      goto LABEL_150;
                    default:
                      goto LABEL_86;
                  }
                  sub_100010754((uint64_t)__src);
                  sub_10000C970(v132, v135);
                  sub_10000C970(v132, v135);
                  swift_beginAccess();
                  uint64_t v21 = *(void *)(v137 + 16);
                  unint64_t v20 = *(void *)(v137 + 24);
                  sub_100013D44(v21, v20);
                  swift_release();
                  sub_10000C970(v132, v135);
                  switch(v20 >> 62)
                  {
                    case 1uLL:
                      if ((v21 ^ (unint64_t)(v21 << 32)) >> 32) {
                        goto LABEL_104;
                      }
                      goto LABEL_115;
                    case 2uLL:
                      uint64_t v143 = *(void *)(v21 + 16);
                      uint64_t v144 = *(void *)(v21 + 24);
                      if (v143 == v144) {
                        goto LABEL_115;
                      }
                      if (v20 >> 62 != 2) {
                        goto LABEL_104;
                      }
                      uint64_t v145 = v144 - v143;
                      if (!__OFSUB__(v144, v143)) {
                        goto LABEL_106;
                      }
                      __break(1u);
LABEL_104:
                      if (__OFSUB__(HIDWORD(v21), v21)) {
                        goto LABEL_158;
                      }
                      uint64_t v145 = HIDWORD(v21) - (int)v21;
LABEL_106:
                      sub_100013D44(v21, v20);
                      if (v145 >= 0xFFFF)
                      {
                        sub_10000C970(v21, v20);
                        sub_10000F000();
                        swift_allocError();
                        *(_OWORD *)uint64_t v150 = xmmword_1003B2F90;
                        *(unsigned char *)(v150 + 16) = 0;
                        swift_willThrow();
                        goto LABEL_50;
                      }
LABEL_107:
                      sub_100013D44(v21, v20);
                      uint64_t v146 = v138;
                      unint64_t v147 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
                      uint64_t v148 = v191;
                      uint64_t v149 = swift_allocObject();
                      *(_OWORD *)(v149 + 16) = v201;
                      *(void *)(v149 + 32) = v147;
                      uint64_t v208 = v148;
                      uint64_t v209 = v146;
                      __src[0] = v149;
                      sub_100013D44(v21, v20);
                      swift_retain();
                      sub_10024AD70(__src, 1, v21, v20);
                      sub_100010754((uint64_t)__src);
                      sub_10000C970(v21, v20);
                      sub_10000C970(v21, v20);
                      swift_beginAccess();
                      uint64_t v151 = *(void *)(v149 + 16);
                      unint64_t v152 = *(void *)(v149 + 24);
                      sub_100013D44(v151, v152);
                      swift_release();
                      sub_10000C970(v21, v20);
                      switch(v152 >> 62)
                      {
                        case 1uLL:
                          if (__OFSUB__(HIDWORD(v151), v151))
                          {
                            __break(1u);
LABEL_160:
                            __break(1u);
                            goto LABEL_161;
                          }
                          uint64_t v153 = HIDWORD(v151) - (int)v151;
LABEL_113:
                          sub_100013D44(v151, v152);
                          if (v153 < 0xFFFF)
                          {
LABEL_114:
                            uint64_t v156 = sub_100247790(784, v151, v152);
                            unint64_t v158 = v157;
                            sub_10000C970(v151, v152);
                            Data.append(_:)();
                            sub_10000C970(v156, v158);
                            sub_10000C970(v151, v152);
LABEL_115:
                            sub_10000C970(v21, v20);
                            goto LABEL_116;
                          }
                          sub_10000F000();
                          swift_allocError();
                          *(void *)uint64_t v184 = 0;
                          *(void *)(v184 + 8) = 0;
                          *(unsigned char *)(v184 + 16) = 2;
                          swift_willThrow();
                          sub_10000C970(v151, v152);
                          uint64_t v69 = v151;
                          unint64_t v70 = v152;
                          break;
                        case 2uLL:
                          uint64_t v155 = *(void *)(v151 + 16);
                          uint64_t v154 = *(void *)(v151 + 24);
                          uint64_t v153 = v154 - v155;
                          if (!__OFSUB__(v154, v155)) {
                            goto LABEL_113;
                          }
                          goto LABEL_160;
                        default:
                          goto LABEL_114;
                      }
                      break;
                    case 3uLL:
                      goto LABEL_115;
                    default:
                      if ((v20 & 0xFF000000000000) == 0) {
                        goto LABEL_115;
                      }
                      goto LABEL_107;
                  }
LABEL_49:
                  sub_10000C970(v69, v70);
LABEL_50:
                  uint64_t v71 = v21;
LABEL_92:
                  unint64_t v141 = v20;
LABEL_132:
                  sub_10000C970(v71, v141);
                  return sub_10000C970(v210, *((unint64_t *)&v210 + 1));
                }
                sub_10000F000();
                swift_allocError();
                *(void *)uint64_t v142 = 0;
                *(void *)(v142 + 8) = 0;
                *(unsigned char *)(v142 + 16) = 2;
                swift_willThrow();
                sub_10000C95C(v85, v87);
                sub_10000C95C(v85, v87);
                break;
              case 2uLL:
                uint64_t v109 = *(void *)(v85 + 16);
                uint64_t v108 = *(void *)(v85 + 24);
                uint64_t v106 = v108 - v109;
                if (!__OFSUB__(v108, v109)) {
                  goto LABEL_74;
                }
                goto LABEL_157;
              default:
                goto LABEL_75;
            }
            break;
          case 2:
            uint64_t v102 = *(void *)(v80 + 16);
            uint64_t v101 = *(void *)(v80 + 24);
            uint64_t v97 = v101 - v102;
            if (!__OFSUB__(v101, v102)) {
              goto LABEL_64;
            }
            goto LABEL_152;
          default:
            goto LABEL_65;
        }
      }
      sub_10000C970(v80, v79);
      sub_10000C95C(v85, v87);
      swift_bridgeObjectRelease();
      break;
    case 2uLL:
      uint64_t v93 = *(void *)(v88 + 16);
      uint64_t v92 = *(void *)(v88 + 24);
      uint64_t v91 = v92 - v93;
      if (!__OFSUB__(v92, v93)) {
        goto LABEL_58;
      }
      goto LABEL_146;
    default:
      goto LABEL_59;
  }
  return sub_10000C970(v210, *((unint64_t *)&v210 + 1));
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  Swift::String v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t result;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  char v108;
  __int16 v109;
  __int16 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  void *v123;
  unint64_t v124;
  NSObject *v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  long long v149;
  unint64_t v150;
  long long v151;
  uint64_t v152;
  unint64_t v153;
  int v154;
  __int16 v155;
  unsigned char v156[18];
  long long v157;
  uint64_t v158;

  uint64_t v6 = v4;
  uint64_t v148 = type metadata accessor for SHA256Digest();
  unint64_t v147 = *(void *)(v148 - 8);
  __chkstk_darwin();
  uint64_t v145 = (char *)&v135 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v146 = type metadata accessor for SHA256();
  uint64_t v144 = *(void *)(v146 - 8);
  __chkstk_darwin();
  uint64_t v143 = (char *)&v135 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v151 = xmmword_1003B2440;
  unint64_t v157 = xmmword_1003B2440;
  uint64_t v150 = sub_100010BCC(&qword_10047BEF8);
  uint64_t v13 = swift_allocObject();
  uint64_t v149 = xmmword_1003B2450;
  *(_OWORD *)(v13 + 16) = xmmword_1003B2450;
  *(unsigned char *)(v13 + 32) = *(unsigned char *)a1;
  uint64_t v14 = sub_1001265EC(v13);
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();
  switch(v16 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v14), v14))
      {
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
        goto LABEL_89;
      }
      uint64_t v17 = HIDWORD(v14) - (int)v14;
LABEL_5:
      sub_100013D44(v14, v16);
      if (v17 >= 0xFFFF)
      {
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v34 = 0;
        *(void *)(v34 + 8) = 0;
        *(unsigned char *)(v34 + 16) = 2;
        swift_willThrow();
        sub_10000C970(v14, v16);
        sub_10000C970(v157, *((unint64_t *)&v157 + 1));
        uint64_t v35 = v14;
LABEL_72:
        uint64_t v93 = v16;
        return sub_10000C970(v35, v93);
      }
LABEL_6:
      uint64_t v140 = a4;
      unint64_t v141 = a2;
      uint64_t v142 = a3;
      unint64_t v20 = sub_100247790(269, v14, v16);
      uint64_t v22 = v21;
      sub_10000C970(v14, v16);
      Data.append(_:)();
      sub_10000C970(v20, v22);
      sub_10000C970(v14, v16);
      swift_bridgeObjectRetain();
      uint64_t v23 = NANGenericServiceProtocol.packetData(for:)(3);
      uint64_t v25 = v24;
      swift_bridgeObjectRelease();
      if (v25 >> 60 == 15)
      {
        uint64_t v23 = 0;
        uint64_t v25 = 0xC000000000000000;
      }
      sub_100013D44(v23, v25);
      uint64_t v26 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v27 = type metadata accessor for BinaryEncoder();
      unint64_t v28 = swift_allocObject();
      *(_OWORD *)(v28 + 16) = v151;
      *(void *)(v28 + 32) = v26;
      *(void *)&v156[2] = v27;
      uint64_t v29 = sub_10024DC6C((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      *(void *)&v156[10] = v29;
      unint64_t v152 = v28;
      sub_100013D44(v23, v25);
      swift_retain();
      NANServiceInfo.encode(to:)(&v152, 2, v23, v25);
      if (!v5)
      {
        unint64_t v158 = 0;
        uint64_t v139 = v6;
        sub_100010754((uint64_t)&v152);
        sub_10000C970(v23, v25);
        sub_10000C970(v23, v25);
        swift_beginAccess();
        uint64_t v32 = *(void *)(v28 + 16);
        unint64_t v31 = *(void *)(v28 + 24);
        unint64_t v33 = v31 >> 62;
        sub_100013D44(v32, v31);
        swift_release();
        sub_10000C970(v23, v25);
        switch(v31 >> 62)
        {
          case 1uLL:
            if ((v32 ^ (unint64_t)(v32 << 32)) >> 32) {
              goto LABEL_48;
            }
            goto LABEL_17;
          case 2uLL:
            unint64_t v36 = *(void *)(v32 + 16);
            uint64_t v37 = *(void *)(v32 + 24);
            if (v36 == v37) {
              goto LABEL_17;
            }
            if (v33 != 2) {
              goto LABEL_48;
            }
            uint64_t v85 = v37 - v36;
            if (!__OFSUB__(v37, v36)) {
              goto LABEL_50;
            }
            __break(1u);
LABEL_48:
            if (__OFSUB__(HIDWORD(v32), v32)) {
              goto LABEL_86;
            }
            uint64_t v85 = HIDWORD(v32) - (int)v32;
LABEL_50:
            sub_100013D44(v32, v31);
            if (v85 >= 0xFFFF)
            {
              sub_10000F000();
              swift_allocError();
              *(void *)unint64_t v90 = 0;
              *(void *)(v90 + 8) = 0;
              *(unsigned char *)(v90 + 16) = 2;
              swift_willThrow();
              sub_10000C970(v32, v31);
              uint64_t v92 = *((void *)&v157 + 1);
              uint64_t v91 = v157;
              goto LABEL_56;
            }
LABEL_51:
            uint64_t v86 = sub_100247790(769, v32, v31);
            uint64_t v88 = v87;
            sub_10000C970(v32, v31);
            Data.append(_:)();
            sub_10000C970(v86, v88);
            if (!v33) {
              goto LABEL_59;
            }
            if (v33 != 1)
            {
              unint64_t v95 = *(void *)(v32 + 16);
              uint64_t v94 = *(void *)(v32 + 24);
              unint64_t v89 = v94 - v95;
              if (!__OFSUB__(v94, v95))
              {
LABEL_58:
                sub_100013D44(v32, v31);
                if (v89 >= 0xFFFF) {
                  goto LABEL_61;
                }
LABEL_59:
                sub_100013D44(v32, v31);
                unint64_t v96 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
                uint64_t v97 = swift_allocObject();
                *(_OWORD *)(v97 + 16) = v151;
                *(void *)(v97 + 32) = v96;
                *(void *)&v156[2] = v27;
                *(void *)&v156[10] = v29;
                unint64_t v152 = v97;
                sub_100013D44(v32, v31);
                swift_retain();
                uint64_t v98 = v158;
                sub_10024AD70(&v152, 1, v32, v31);
                sub_100010754((uint64_t)&v152);
                sub_10000C970(v32, v31);
                sub_10000C970(v32, v31);
                if (v98)
                {
                  swift_release();
                  swift_errorRelease();
LABEL_61:
                  sub_10000C970(v32, v31);
                  sub_10000F000();
                  swift_allocError();
                  *(_OWORD *)uint64_t v99 = xmmword_1003B2F90;
                  *(unsigned char *)(v99 + 16) = 0;
                  swift_willThrow();
                  sub_10000C970(v32, v31);
LABEL_62:
                  uint64_t v93 = *((void *)&v157 + 1);
                  uint64_t v35 = v157;
                  return sub_10000C970(v35, v93);
                }
                unint64_t v158 = 0;
                swift_beginAccess();
                unint64_t v100 = *(void *)(v97 + 16);
                uint64_t v101 = *(void *)(v97 + 24);
                sub_100013D44(v100, v101);
                swift_release();
                sub_10000C970(v32, v31);
                switch(v101 >> 62)
                {
                  case 1uLL:
                    if (__OFSUB__(HIDWORD(v100), v100)) {
                      goto LABEL_93;
                    }
                    uint64_t v102 = HIDWORD(v100) - (int)v100;
LABEL_77:
                    sub_100013D44(v100, v101);
                    if (v102 < 0xFFFF)
                    {
LABEL_78:
                      unint64_t v131 = sub_100247790(784, v100, v101);
                      unint64_t v133 = v132;
                      sub_10000C970(v100, v101);
                      Data.append(_:)();
                      sub_10000C970(v131, v133);
                      sub_10000C970(v100, v101);
                      sub_10000C970(v32, v31);
                      unint64_t v30 = 1;
                      goto LABEL_18;
                    }
                    sub_10000F000();
                    swift_allocError();
                    *(void *)unint64_t v134 = 0;
                    *(void *)(v134 + 8) = 0;
                    *(unsigned char *)(v134 + 16) = 2;
                    swift_willThrow();
                    sub_10000C970(v100, v101);
                    sub_10000C970(v157, *((unint64_t *)&v157 + 1));
                    uint64_t v91 = v100;
                    uint64_t v92 = v101;
                    break;
                  case 2uLL:
                    unint64_t v130 = *(void *)(v100 + 16);
                    uint64_t v129 = *(void *)(v100 + 24);
                    uint64_t v102 = v129 - v130;
                    if (!__OFSUB__(v129, v130)) {
                      goto LABEL_77;
                    }
                    goto LABEL_94;
                  default:
                    goto LABEL_78;
                }
LABEL_56:
                sub_10000C970(v91, v92);
                uint64_t v35 = v32;
                uint64_t v93 = v31;
                return sub_10000C970(v35, v93);
              }
LABEL_90:
              __break(1u);
LABEL_91:
              __break(1u);
LABEL_92:
              __break(1u);
LABEL_93:
              __break(1u);
LABEL_94:
              __break(1u);
              JUMPOUT(0x10023C1BCLL);
            }
            if (!__OFSUB__(HIDWORD(v32), v32))
            {
              unint64_t v89 = HIDWORD(v32) - (int)v32;
              goto LABEL_58;
            }
            break;
          case 3uLL:
            goto LABEL_17;
          default:
            if ((v31 & 0xFF000000000000) != 0) {
              goto LABEL_51;
            }
LABEL_17:
            sub_10000C970(v32, v31);
            unint64_t v30 = 0;
LABEL_18:
            uint64_t v6 = v139;
            goto LABEL_19;
        }
LABEL_89:
        __break(1u);
        goto LABEL_90;
      }
      sub_100010754((uint64_t)&v152);
      sub_10000C970(v23, v25);
      sub_10000C970(v23, v25);
      swift_release();
      swift_errorRelease();
      sub_10000C970(v23, v25);
      unint64_t v30 = 0;
      unint64_t v158 = 0;
LABEL_19:
      uint64_t v38 = *(void *)(a1 + 96);
      if (v38 == 1)
      {
LABEL_69:
        uint64_t v108 = *(unsigned char *)(a1 + 24);
        uint64_t v109 = *(_WORD *)(a1 + 5);
        uint64_t v110 = *(_WORD *)(a1 + 29);
        LOBYTE(v152) = 0;
        BYTE1(v152) = v108;
        WORD1(v152) = v30;
        HIDWORD(v152) = *(_DWORD *)(a1 + 25);
        LOWORD(v153) = v110;
        *(_DWORD *)((char *)&v153 + 2) = 0;
        HIWORD(v153) = 0;
        uint64_t v154 = *(_DWORD *)(a1 + 1);
        uint64_t v155 = v109;
        *(void *)uint64_t v156 = 0;
        *(_DWORD *)&v156[8] = -65536;
        uint64_t v16 = *((void *)&v157 + 1);
        unint64_t v111 = v157;
        sub_100013D44(v157, *((unint64_t *)&v157 + 1));
        type metadata accessor for wl_nan_dp_req(0);
        uint64_t v113 = v112;
        unint64_t v114 = sub_1000E4A78();
        uint64_t v115 = v140;
        uint64_t v116 = v142;
        uint64_t v117 = v141;
        uint64_t v118 = v158;
        unint64_t v119 = sub_10024CA34((uint64_t)&v152, 0, 34, v111, v16, v141, v113, (uint64_t)&type metadata for UInt16, v142, v140, v114);
        if (v118)
        {
          uint64_t v121 = v111;
          __int16 v122 = v16;
        }
        else
        {
          uint64_t v123 = (void *)v119;
          unint64_t v124 = v120;
          sub_10000C970(v111, v16);
          uint64_t v125 = sub_10024177C(7233902, 0xE300000000000000, 1284, v123, v124, 0, v117, v116, *(void *)(v115 + 16));
          uint64_t v127 = v126;
          sub_10000C970((uint64_t)v123, v124);
          uint64_t v121 = (uint64_t)v125;
          __int16 v122 = v127;
        }
        sub_10000C970(v121, v122);
        uint64_t v35 = v111;
        goto LABEL_72;
      }
      uint64_t v139 = v6;
      uint64_t v39 = *(void *)(a1 + 48);
      uint64_t v40 = *(void *)(a1 + 56);
      unint64_t v42 = *(void *)(a1 + 64);
      unint64_t v41 = *(void *)(a1 + 72);
      v30 |= 8u;
      uint64_t v43 = *(void *)(a1 + 80);
      uint64_t v138 = *(void *)(a1 + 88);
      uint64_t v44 = swift_allocObject();
      *(_OWORD *)(v44 + 16) = v149;
      *(void *)&uint64_t v149 = v39;
      *(unsigned char *)(v44 + 32) = v39 + 1;
      uint64_t v137 = v42 >> 62;
      sub_100013D44(v40, v42);
      uint64_t v150 = v43;
      *(void *)&uint64_t v151 = v41;
      sub_100038004(v41, v43);
      swift_bridgeObjectRetain();
      uint64_t v45 = sub_1001265EC(v44);
      unint64_t v47 = v46;
      swift_bridgeObjectRelease();
      switch(v47 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v45), v45)) {
            goto LABEL_82;
          }
          unint64_t v48 = HIDWORD(v45) - (int)v45;
LABEL_24:
          sub_100013D44(v45, v47);
          if (v48 >= 0xFFFF)
          {
            sub_10000F000();
            swift_allocError();
            *(void *)__int16 v62 = 0;
            *(void *)(v62 + 8) = 0;
            *(unsigned char *)(v62 + 16) = 2;
            swift_willThrow();
            sub_10000C970(v45, v47);
            sub_10000C970(v45, v47);
            __int16 v63 = v149;
            uint64_t v64 = v40;
            unint64_t v65 = v42;
            uint64_t v66 = v151;
LABEL_43:
            sub_1000CAB20(v63, v64, v65, v66, v150, v138, v38);
            goto LABEL_62;
          }
LABEL_25:
          unint64_t v136 = v38;
          uint64_t v51 = v40;
          uint64_t v52 = sub_100247790(264, v45, v47);
          uint64_t v54 = v53;
          sub_10000C970(v45, v47);
          Data.append(_:)();
          sub_10000C970(v52, v54);
          sub_10000C970(v45, v47);
          swift_bridgeObjectRetain();
          unint64_t v55 = v143;
          SHA256.init()();
          unint64_t v56 = String.lowercased()();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          uint64_t v57 = v158;
          sub_1001A5654(v56._countAndFlagsBits, (uint64_t)v56._object);
          swift_bridgeObjectRelease();
          uint64_t v58 = v145;
          SHA256.finalize()();
          SHA256Digest.withUnsafeBytes<A>(_:)();
          unint64_t v158 = v57;
          (*(void (**)(char *, uint64_t))(v147 + 8))(v58, v148);
          uint64_t v59 = v152;
          __int16 v60 = v153;
          (*(void (**)(char *, uint64_t))(v144 + 8))(v55, v146);
          switch(v60 >> 62)
          {
            case 1uLL:
              if (__OFSUB__(HIDWORD(v59), v59)) {
                goto LABEL_84;
              }
              int v61 = HIDWORD(v59) - (int)v59;
LABEL_30:
              sub_100013D44(v59, v60);
              if (v61 >= 0xFFFF)
              {
                sub_10000F000();
                swift_allocError();
                *(void *)unint64_t v75 = 0;
                *(void *)(v75 + 8) = 0;
                *(unsigned char *)(v75 + 16) = 2;
                swift_willThrow();
                sub_10000C970(v59, v60);
                sub_10000C970(v157, *((unint64_t *)&v157 + 1));
                sub_10000C970(v59, v60);
                uint64_t result = sub_1000CAB20(v149, v51, v42, v151, v150, v138, v136);
              }
              else
              {
LABEL_31:
                uint64_t v69 = sub_100247790(263, v59, v60);
                uint64_t v71 = v70;
                sub_10000C970(v59, v60);
                Data.append(_:)();
                sub_10000C970(v69, v71);
                sub_10000C970(v59, v60);
                uint64_t v72 = v151;
                uint64_t v73 = v51;
                uint64_t v38 = v136;
                switch((int)v137)
                {
                  case 1:
                    if (__OFSUB__(HIDWORD(v73), v73)) {
                      goto LABEL_87;
                    }
                    uint64_t v74 = HIDWORD(v73) - (int)v73;
LABEL_36:
                    sub_100013D44(v73, v42);
                    sub_100013D44(v73, v42);
                    if (v74 >= 0xFFFF)
                    {
                      sub_10000F000();
                      swift_allocError();
                      *(void *)uint64_t v84 = 0;
                      *(void *)(v84 + 8) = 0;
                      *(unsigned char *)(v84 + 16) = 2;
                      swift_willThrow();
                      sub_10000C970(v73, v42);
                      sub_10000C970(v73, v42);
                      __int16 v63 = v149;
                      uint64_t v64 = v73;
                      unint64_t v65 = v42;
                      uint64_t v66 = v72;
                      goto LABEL_43;
                    }
LABEL_37:
                    unint64_t v79 = sub_100247790(265, v73, v42);
                    unint64_t v81 = v80;
                    sub_10000C970(v73, v42);
                    Data.append(_:)();
                    sub_10000C970(v79, v81);
                    sub_10000C970(v73, v42);
                    uint64_t v82 = v150;
                    if (v150 >> 60 == 15)
                    {
                      sub_1000CAB20(v149, v73, v42, v72, v150, v138, v38);
                      goto LABEL_69;
                    }
                    switch(v150 >> 62)
                    {
                      case 1uLL:
                        if (__OFSUB__(HIDWORD(v72), v72)) {
                          goto LABEL_91;
                        }
                        uint64_t v83 = HIDWORD(v72) - (int)v72;
LABEL_67:
                        sub_100038004(v72, v150);
                        sub_100038004(v72, v82);
                        sub_100013D44(v72, v82);
                        if (v83 < 0xFFFF)
                        {
LABEL_68:
                          unint64_t v105 = sub_100247790(266, v72, v82);
                          uint64_t v148 = v73;
                          uint64_t v107 = v106;
                          sub_10000C95C(v72, v82);
                          Data.append(_:)();
                          sub_10000C970(v105, v107);
                          sub_1000CAB20(v149, v148, v42, v72, v82, v138, v38);
                          sub_10000C95C(v72, v82);
                          sub_10000C95C(v72, v82);
                          goto LABEL_69;
                        }
                        sub_10000F000();
                        swift_allocError();
                        *(void *)uint64_t v128 = 0;
                        *(void *)(v128 + 8) = 0;
                        *(unsigned char *)(v128 + 16) = 2;
                        swift_willThrow();
                        sub_10000C95C(v72, v82);
                        sub_10000C970(v157, *((unint64_t *)&v157 + 1));
                        sub_10000C95C(v72, v82);
                        sub_10000C95C(v72, v82);
                        uint64_t result = sub_1000CAB20(v149, v73, v42, v72, v82, v138, v38);
                        break;
                      case 2uLL:
                        unint64_t v104 = *(void *)(v72 + 16);
                        uint64_t v103 = *(void *)(v72 + 24);
                        uint64_t v83 = v103 - v104;
                        if (!__OFSUB__(v103, v104)) {
                          goto LABEL_67;
                        }
                        goto LABEL_92;
                      default:
                        goto LABEL_68;
                    }
                    break;
                  case 2:
                    char v78 = *(void *)(v73 + 16);
                    uint64_t v77 = *(void *)(v73 + 24);
                    uint64_t v74 = v77 - v78;
                    if (!__OFSUB__(v77, v78)) {
                      goto LABEL_36;
                    }
                    goto LABEL_88;
                  default:
                    goto LABEL_37;
                }
              }
              break;
            case 2uLL:
              uint64_t v68 = *(void *)(v59 + 16);
              uint64_t v67 = *(void *)(v59 + 24);
              int v61 = v67 - v68;
              if (!__OFSUB__(v67, v68)) {
                goto LABEL_30;
              }
              goto LABEL_85;
            default:
              goto LABEL_31;
          }
          break;
        case 2uLL:
          uint64_t v50 = *(void *)(v45 + 16);
          uint64_t v49 = *(void *)(v45 + 24);
          unint64_t v48 = v49 - v50;
          if (!__OFSUB__(v49, v50)) {
            goto LABEL_24;
          }
          goto LABEL_83;
        default:
          goto LABEL_25;
      }
      return result;
    case 2uLL:
      unint64_t v19 = *(void *)(v14 + 16);
      uint64_t v18 = *(void *)(v14 + 24);
      uint64_t v17 = v18 - v19;
      if (!__OFSUB__(v18, v19)) {
        goto LABEL_5;
      }
      goto LABEL_81;
    default:
      goto LABEL_6;
  }
}

uint64_t sub_10023A038(uint64_t a1)
{
  return sub_10023A05C(a1);
}

uint64_t sub_10023A05C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for SHA256Digest();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = &v131[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for SHA256();
  uint64_t v141 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v140 = &v131[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  long long v144 = xmmword_1003B2440;
  long long v150 = xmmword_1003B2440;
  uint64_t v143 = sub_100010BCC(&qword_10047BEF8);
  uint64_t v9 = swift_allocObject();
  long long v142 = xmmword_1003B2450;
  *(_OWORD *)(v9 + 16) = xmmword_1003B2450;
  *(unsigned char *)(v9 + 32) = *(unsigned char *)a1;
  uint64_t v10 = sub_1001265EC(v9);
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  switch(v12 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v10), v10))
      {
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
        goto LABEL_89;
      }
      uint64_t v13 = HIDWORD(v10) - (int)v10;
LABEL_5:
      sub_100013D44(v10, v12);
      if (v13 >= 0xFFFF)
      {
LABEL_54:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v90 = 0;
        *(void *)(v90 + 8) = 0;
        *(unsigned char *)(v90 + 16) = 2;
        swift_willThrow();
        sub_10000C970(v10, v12);
        unint64_t v92 = *((void *)&v150 + 1);
        uint64_t v91 = v150;
        goto LABEL_72;
      }
LABEL_6:
      unint64_t v136 = v6;
      uint64_t v137 = v7;
      uint64_t v138 = v4;
      uint64_t v139 = v3;
      uint64_t v16 = sub_100247790(269, v10, v12);
      unint64_t v18 = v17;
      sub_10000C970(v10, v12);
      Data.append(_:)();
      sub_10000C970(v16, v18);
      sub_10000C970(v10, v12);
      swift_bridgeObjectRetain();
      uint64_t v19 = NANGenericServiceProtocol.packetData(for:)(3);
      unint64_t v21 = v20;
      swift_bridgeObjectRelease();
      if (v21 >> 60 == 15)
      {
        uint64_t v19 = 0;
        unint64_t v22 = 0xC000000000000000;
      }
      else
      {
        unint64_t v22 = v21;
      }
      sub_100013D44(v19, v22);
      unint64_t v23 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v24 = type metadata accessor for BinaryEncoder();
      uint64_t v25 = swift_allocObject();
      *(_OWORD *)(v25 + 16) = v144;
      *(void *)(v25 + 32) = v23;
      uint64_t v148 = v24;
      uint64_t v26 = sub_10024DC6C((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      uint64_t v149 = v26;
      v147[0] = v25;
      sub_100013D44(v19, v22);
      swift_retain();
      NANServiceInfo.encode(to:)(v147, 2, v19, v22);
      if (!v1)
      {
        uint64_t v161 = 0;
        sub_100010754((uint64_t)v147);
        sub_10000C970(v19, v22);
        sub_10000C970(v19, v22);
        swift_beginAccess();
        uint64_t v10 = *(void *)(v25 + 16);
        unint64_t v12 = *(void *)(v25 + 24);
        unint64_t v28 = v12 >> 62;
        sub_100013D44(v10, v12);
        swift_release();
        sub_10000C970(v19, v22);
        switch(v12 >> 62)
        {
          case 1uLL:
            if ((v10 ^ (unint64_t)(v10 << 32)) >> 32) {
              goto LABEL_47;
            }
            goto LABEL_17;
          case 2uLL:
            uint64_t v29 = *(void *)(v10 + 16);
            uint64_t v30 = *(void *)(v10 + 24);
            if (v29 == v30) {
              goto LABEL_17;
            }
            if (v28 != 2) {
              goto LABEL_47;
            }
            uint64_t v85 = v30 - v29;
            if (!__OFSUB__(v30, v29)) {
              goto LABEL_49;
            }
            __break(1u);
LABEL_47:
            if (__OFSUB__(HIDWORD(v10), v10)) {
              goto LABEL_86;
            }
            uint64_t v85 = HIDWORD(v10) - (int)v10;
LABEL_49:
            sub_100013D44(v10, v12);
            if (v85 >= 0xFFFF) {
              goto LABEL_54;
            }
LABEL_50:
            uint64_t v86 = sub_100247790(769, v10, v12);
            unint64_t v88 = v87;
            sub_10000C970(v10, v12);
            Data.append(_:)();
            sub_10000C970(v86, v88);
            if (!v28) {
              goto LABEL_57;
            }
            if (v28 != 1)
            {
              uint64_t v94 = *(void *)(v10 + 16);
              uint64_t v93 = *(void *)(v10 + 24);
              uint64_t v89 = v93 - v94;
              if (!__OFSUB__(v93, v94)) {
                goto LABEL_56;
              }
LABEL_90:
              __break(1u);
LABEL_91:
              __break(1u);
LABEL_92:
              __break(1u);
LABEL_93:
              __break(1u);
LABEL_94:
              __break(1u);
              JUMPOUT(0x10023B078);
            }
            if (!__OFSUB__(HIDWORD(v10), v10))
            {
              uint64_t v89 = HIDWORD(v10) - (int)v10;
LABEL_56:
              sub_100013D44(v10, v12);
              if (v89 >= 0xFFFF) {
                goto LABEL_59;
              }
LABEL_57:
              sub_100013D44(v10, v12);
              unint64_t v95 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
              uint64_t v96 = swift_allocObject();
              *(_OWORD *)(v96 + 16) = v144;
              *(void *)(v96 + 32) = v95;
              uint64_t v148 = v24;
              uint64_t v149 = v26;
              v147[0] = v96;
              sub_100013D44(v10, v12);
              swift_retain();
              uint64_t v97 = v161;
              sub_10024AD70(v147, 1, v10, v12);
              sub_100010754((uint64_t)v147);
              sub_10000C970(v10, v12);
              sub_10000C970(v10, v12);
              if (v97)
              {
                swift_release();
                swift_errorRelease();
LABEL_59:
                sub_10000C970(v10, v12);
                sub_10000F000();
                swift_allocError();
                *(_OWORD *)uint64_t v98 = xmmword_1003B2F90;
                *(unsigned char *)(v98 + 16) = 0;
                swift_willThrow();
                sub_10000C970(v10, v12);
LABEL_60:
                unint64_t v100 = *((void *)&v150 + 1);
                uint64_t v99 = v150;
                return sub_10000C970(v99, v100);
              }
              uint64_t v161 = 0;
              swift_beginAccess();
              uint64_t v101 = *(void *)(v96 + 16);
              unint64_t v102 = *(void *)(v96 + 24);
              sub_100013D44(v101, v102);
              swift_release();
              sub_10000C970(v10, v12);
              switch(v102 >> 62)
              {
                case 1uLL:
                  if (__OFSUB__(HIDWORD(v101), v101)) {
                    goto LABEL_93;
                  }
                  uint64_t v103 = HIDWORD(v101) - (int)v101;
LABEL_77:
                  sub_100013D44(v101, v102);
                  if (v103 < 0xFFFF)
                  {
LABEL_78:
                    uint64_t v127 = sub_100247790(784, v101, v102);
                    unint64_t v129 = v128;
                    sub_10000C970(v101, v102);
                    Data.append(_:)();
                    sub_10000C970(v127, v129);
                    sub_10000C970(v101, v102);
                    sub_10000C970(v10, v12);
                    int v27 = 1;
                    goto LABEL_18;
                  }
                  sub_10000F000();
                  swift_allocError();
                  *(void *)uint64_t v130 = 0;
                  *(void *)(v130 + 8) = 0;
                  *(unsigned char *)(v130 + 16) = 2;
                  swift_willThrow();
                  sub_10000C970(v101, v102);
                  sub_10000C970(v150, *((unint64_t *)&v150 + 1));
                  uint64_t v91 = v101;
                  unint64_t v92 = v102;
                  break;
                case 2uLL:
                  uint64_t v126 = *(void *)(v101 + 16);
                  uint64_t v125 = *(void *)(v101 + 24);
                  uint64_t v103 = v125 - v126;
                  if (!__OFSUB__(v125, v126)) {
                    goto LABEL_77;
                  }
                  goto LABEL_94;
                default:
                  goto LABEL_78;
              }
LABEL_72:
              sub_10000C970(v91, v92);
              uint64_t v99 = v10;
              unint64_t v100 = v12;
              return sub_10000C970(v99, v100);
            }
            break;
          case 3uLL:
            goto LABEL_17;
          default:
            if ((v12 & 0xFF000000000000) != 0) {
              goto LABEL_50;
            }
LABEL_17:
            sub_10000C970(v10, v12);
            int v27 = 0;
            goto LABEL_18;
        }
LABEL_89:
        __break(1u);
        goto LABEL_90;
      }
      sub_100010754((uint64_t)v147);
      sub_10000C970(v19, v22);
      sub_10000C970(v19, v22);
      swift_release();
      swift_errorRelease();
      sub_10000C970(v19, v22);
      int v27 = 0;
      uint64_t v161 = 0;
LABEL_18:
      uint64_t v31 = *(void *)(a1 + 96);
      if (v31 == 1)
      {
LABEL_68:
        char v109 = *(unsigned char *)(a1 + 24);
        __int16 v110 = *(_WORD *)(a1 + 5);
        __int16 v111 = *(_WORD *)(a1 + 29);
        v151[0] = 0;
        v151[1] = v109;
        __int16 v152 = v27;
        int v153 = *(_DWORD *)(a1 + 25);
        __int16 v154 = v111;
        int v155 = 0;
        __int16 v156 = 0;
        int v157 = *(_DWORD *)(a1 + 1);
        __int16 v158 = v110;
        uint64_t v159 = 0;
        int v160 = -65536;
        unsigned long long v112 = v150;
        sub_100013D44(v150, *((unint64_t *)&v150 + 1));
        uint64_t v113 = v161;
        uint64_t v114 = sub_10024C850((uint64_t)v151, 0, 34, v112, *((unint64_t *)&v112 + 1));
        if (v113)
        {
          unint64_t v117 = v112 >> 64;
          uint64_t v116 = v112;
        }
        else
        {
          uint64_t v118 = v114;
          unint64_t v119 = v115;
          sub_10000C970(v112, *((unint64_t *)&v112 + 1));
          uint64_t v121 = sub_100240C34(7233902, 0xE300000000000000, 1284, v118, v119, 0);
          unint64_t v123 = v122;
          sub_10000C970(v118, v119);
          uint64_t v116 = v121;
          unint64_t v117 = v123;
        }
        sub_10000C970(v116, v117);
        unint64_t v100 = v112 >> 64;
        uint64_t v99 = v112;
        return sub_10000C970(v99, v100);
      }
      uint64_t v33 = *(void *)(a1 + 48);
      uint64_t v32 = *(void *)(a1 + 56);
      unint64_t v35 = *(void *)(a1 + 64);
      uint64_t v34 = *(void *)(a1 + 72);
      int v132 = v27 | 8;
      unint64_t v36 = *(void *)(a1 + 80);
      uint64_t v37 = *(void *)(a1 + 88);
      uint64_t v38 = swift_allocObject();
      *(_OWORD *)(v38 + 16) = v142;
      *(unsigned char *)(v38 + 32) = v33 + 1;
      *(void *)&long long v142 = v35 >> 62;
      uint64_t v143 = v32;
      *(void *)&long long v144 = v35;
      sub_100013D44(v32, v35);
      sub_100038004(v34, v36);
      swift_bridgeObjectRetain();
      uint64_t v39 = sub_1001265EC(v38);
      unint64_t v41 = v40;
      swift_bridgeObjectRelease();
      switch(v41 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v39), v39)) {
            goto LABEL_82;
          }
          uint64_t v42 = HIDWORD(v39) - (int)v39;
LABEL_23:
          sub_100013D44(v39, v41);
          if (v42 >= 0xFFFF)
          {
            sub_10000F000();
            swift_allocError();
            *(void *)uint64_t v58 = 0;
            *(void *)(v58 + 8) = 0;
            *(unsigned char *)(v58 + 16) = 2;
            swift_willThrow();
            sub_10000C970(v39, v41);
            sub_10000C970(v39, v41);
            uint64_t v59 = v33;
            uint64_t v60 = v143;
            unint64_t v61 = v144;
            uint64_t v62 = v34;
            unint64_t v63 = v36;
            uint64_t v64 = v37;
            uint64_t v65 = v31;
LABEL_42:
            sub_1000CAB20(v59, v60, v61, v62, v63, v64, v65);
            goto LABEL_60;
          }
LABEL_24:
          uint64_t v133 = v33;
          uint64_t v134 = v37;
          unint64_t v135 = v36;
          uint64_t v45 = v34;
          uint64_t v46 = sub_100247790(264, v39, v41);
          unint64_t v48 = v47;
          sub_10000C970(v39, v41);
          Data.append(_:)();
          sub_10000C970(v46, v48);
          sub_10000C970(v39, v41);
          swift_bridgeObjectRetain();
          uint64_t v49 = v140;
          SHA256.init()();
          Swift::String v50 = String.lowercased()();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          uint64_t v51 = v161;
          sub_1001A5654(v50._countAndFlagsBits, (uint64_t)v50._object);
          swift_bridgeObjectRelease();
          uint64_t v52 = v136;
          SHA256.finalize()();
          SHA256Digest.withUnsafeBytes<A>(_:)();
          uint64_t v161 = v51;
          (*(void (**)(unsigned char *, uint64_t))(v138 + 8))(v52, v139);
          uint64_t v53 = v145;
          unint64_t v54 = v146;
          (*(void (**)(unsigned char *, uint64_t))(v141 + 8))(v49, v137);
          uint64_t v55 = v45;
          unint64_t v56 = v135;
          switch(v54 >> 62)
          {
            case 1uLL:
              if (__OFSUB__(HIDWORD(v53), v53)) {
                goto LABEL_84;
              }
              uint64_t v57 = HIDWORD(v53) - (int)v53;
LABEL_29:
              sub_100013D44(v53, v54);
              if (v57 >= 0xFFFF)
              {
                sub_10000F000();
                swift_allocError();
                *(void *)uint64_t v74 = 0;
                *(void *)(v74 + 8) = 0;
                *(unsigned char *)(v74 + 16) = 2;
                swift_willThrow();
                sub_10000C970(v53, v54);
                sub_10000C970(v150, *((unint64_t *)&v150 + 1));
                sub_10000C970(v53, v54);
                uint64_t v75 = v133;
                uint64_t v76 = v143;
                unint64_t v77 = v144;
              }
              else
              {
LABEL_30:
                uint64_t v68 = sub_100247790(263, v53, v54);
                unint64_t v70 = v69;
                sub_10000C970(v53, v54);
                Data.append(_:)();
                sub_10000C970(v68, v70);
                sub_10000C970(v53, v54);
                unint64_t v71 = v144;
                uint64_t v72 = v143;
                switch((int)v142)
                {
                  case 1:
                    if (__OFSUB__(HIDWORD(v143), v143)) {
                      goto LABEL_87;
                    }
                    uint64_t v73 = HIDWORD(v143) - (int)v143;
LABEL_35:
                    sub_100013D44(v143, v144);
                    sub_100013D44(v72, v71);
                    if (v73 >= 0xFFFF)
                    {
                      sub_10000F000();
                      swift_allocError();
                      *(void *)uint64_t v84 = 0;
                      *(void *)(v84 + 8) = 0;
                      *(unsigned char *)(v84 + 16) = 2;
                      swift_willThrow();
                      sub_10000C970(v72, v71);
                      sub_10000C970(v72, v71);
                      uint64_t v59 = v133;
                      uint64_t v60 = v72;
                      unint64_t v61 = v71;
                      uint64_t v62 = v55;
                      unint64_t v63 = v56;
                      uint64_t v64 = v134;
                      uint64_t v65 = v31;
                      goto LABEL_42;
                    }
LABEL_36:
                    uint64_t v80 = sub_100247790(265, v72, v71);
                    unint64_t v82 = v81;
                    sub_10000C970(v72, v71);
                    Data.append(_:)();
                    sub_10000C970(v80, v82);
                    sub_10000C970(v72, v71);
                    if (v56 >> 60 == 15)
                    {
                      sub_1000CAB20(v133, v72, v71, v55, v56, v134, v31);
LABEL_67:
                      LOWORD(v27) = v132;
                      goto LABEL_68;
                    }
                    switch(v56 >> 62)
                    {
                      case 1uLL:
                        if (__OFSUB__(HIDWORD(v55), v55)) {
                          goto LABEL_91;
                        }
                        uint64_t v83 = HIDWORD(v55) - (int)v55;
LABEL_65:
                        sub_100038004(v55, v56);
                        sub_100038004(v55, v56);
                        sub_100013D44(v55, v56);
                        if (v83 < 0xFFFF)
                        {
LABEL_66:
                          uint64_t v106 = sub_100247790(266, v55, v56);
                          unint64_t v108 = v107;
                          sub_10000C95C(v55, v56);
                          Data.append(_:)();
                          sub_10000C970(v106, v108);
                          sub_1000CAB20(v133, v72, v71, v55, v56, v134, v31);
                          sub_10000C95C(v55, v56);
                          sub_10000C95C(v55, v56);
                          goto LABEL_67;
                        }
                        sub_10000F000();
                        swift_allocError();
                        *(void *)uint64_t v124 = 0;
                        *(void *)(v124 + 8) = 0;
                        *(unsigned char *)(v124 + 16) = 2;
                        swift_willThrow();
                        sub_10000C95C(v55, v56);
                        sub_10000C970(v150, *((unint64_t *)&v150 + 1));
                        sub_10000C95C(v55, v56);
                        sub_10000C95C(v55, v56);
                        uint64_t v75 = v133;
                        uint64_t v76 = v72;
                        unint64_t v77 = v71;
                        break;
                      case 2uLL:
                        uint64_t v105 = *(void *)(v55 + 16);
                        uint64_t v104 = *(void *)(v55 + 24);
                        uint64_t v83 = v104 - v105;
                        if (!__OFSUB__(v104, v105)) {
                          goto LABEL_65;
                        }
                        goto LABEL_92;
                      default:
                        goto LABEL_66;
                    }
                    break;
                  case 2:
                    uint64_t v79 = *(void *)(v143 + 16);
                    uint64_t v78 = *(void *)(v143 + 24);
                    uint64_t v73 = v78 - v79;
                    if (!__OFSUB__(v78, v79)) {
                      goto LABEL_35;
                    }
                    goto LABEL_88;
                  default:
                    goto LABEL_36;
                }
              }
              uint64_t result = sub_1000CAB20(v75, v76, v77, v55, v56, v134, v31);
              break;
            case 2uLL:
              uint64_t v67 = *(void *)(v53 + 16);
              uint64_t v66 = *(void *)(v53 + 24);
              uint64_t v57 = v66 - v67;
              if (!__OFSUB__(v66, v67)) {
                goto LABEL_29;
              }
              goto LABEL_85;
            default:
              goto LABEL_30;
          }
          break;
        case 2uLL:
          uint64_t v44 = *(void *)(v39 + 16);
          uint64_t v43 = *(void *)(v39 + 24);
          uint64_t v42 = v43 - v44;
          if (!__OFSUB__(v43, v44)) {
            goto LABEL_23;
          }
          goto LABEL_83;
        default:
          goto LABEL_24;
      }
      return result;
    case 2uLL:
      uint64_t v15 = *(void *)(v10 + 16);
      uint64_t v14 = *(void *)(v10 + 24);
      uint64_t v13 = v14 - v15;
      if (!__OFSUB__(v14, v15)) {
        goto LABEL_5;
      }
      goto LABEL_81;
    default:
      goto LABEL_6;
  }
}

uint64_t sub_10023C22C(unsigned __int8 a1, uint64_t a2)
{
  return sub_100248670(0x506u, a1 | (unint64_t)(a2 << 16));
}

uint64_t BroadcomDriver<>.terminate(datapathID:initiatorAddress:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v10[0] = a1;
  v10[1] = 0;
  __int16 v11 = a2;
  char v12 = BYTE2(a2);
  char v13 = BYTE3(a2);
  char v14 = BYTE4(a2);
  char v15 = BYTE5(a2);
  type metadata accessor for wl_nan_dp_end(0);
  return sub_100248AF0(1286, (uint64_t)v10, a3, v8, a4, a5);
}

uint64_t sub_10023C2F4(char a1)
{
  return sub_100248448(0x307u, a1);
}

uint64_t BroadcomDriver<>.terminate(subscribeID:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v5 = a1;
  return sub_100248AF0(775, (uint64_t)&v5, a2, (uint64_t)&type metadata for UInt8, a3, a4);
}

uint64_t sub_10023C360(char a1)
{
  return sub_100248448(0x304u, a1);
}

uint64_t BroadcomDriver<>.terminate(publishID:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v5 = a1;
  return sub_100248AF0(772, (uint64_t)&v5, a2, (uint64_t)&type metadata for UInt8, a3, a4);
}

uint64_t sub_10023C3CC(uint64_t a1, unint64_t a2, unsigned __int8 a3, uint64_t a4, unsigned __int8 a5)
{
  return sub_10023C3F4(a1, a2, a3, a4 & 0xFFFFFFFFFFFFLL, a5);
}

uint64_t sub_10023C3F4(uint64_t a1, unint64_t a2, unsigned __int8 a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t KeyPath = swift_getKeyPath();
  sub_100010BCC(&qword_10047E1D0);
  uint64_t inited = swift_initStackObject();
  *(_DWORD *)(inited + 32) = 780;
  *(_OWORD *)(inited + 16) = xmmword_1003B2450;
  *(void *)(inited + 40) = a1;
  *(void *)(inited + 48) = a2;
  sub_100013D44(a1, a2);
  unsigned int v10 = *(_DWORD *)(inited + 32);
  uint64_t v12 = *(void *)(inited + 40);
  unint64_t v11 = *(void *)(inited + 48);
  swift_bridgeObjectRetain();
  if (v10 >= 0x10000) {
    goto LABEL_13;
  }
  switch(v11 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v12), v12))
      {
        __break(1u);
LABEL_12:
        __break(1u);
LABEL_13:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x10023C6F4);
      }
      uint64_t v13 = HIDWORD(v12) - (int)v12;
LABEL_6:
      sub_100013D44(v12, v11);
      if (v13 >= 0xFFFF)
      {
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v25 = 0;
        *(void *)(v25 + 8) = 0;
        *(unsigned char *)(v25 + 16) = 2;
        swift_willThrow();
        sub_10000C970(v12, v11);
        swift_bridgeObjectRelease_n();
        sub_10000C970(0, 0xC000000000000000);
        return swift_release();
      }
      else
      {
LABEL_7:
        sub_100013D44(v12, v11);
        uint64_t v16 = sub_100247790(v10, v12, v11);
        unint64_t v18 = v17;
        sub_10000C970(v12, v11);
        Data.append(_:)();
        sub_10000C970(v16, v18);
        sub_10000C970(v12, v11);
        swift_bridgeObjectRelease();
        swift_setDeallocating();
        sub_100010BCC(&qword_10047E1D8);
        swift_arrayDestroy();
        uint64_t v19 = sub_10024D0F8(a3 | ((unint64_t)a5 << 8) | (a4 << 16), 0, KeyPath, 14, 0, 0xC000000000000000);
        unint64_t v21 = v20;
        sub_10000C970(0, 0xC000000000000000);
        uint64_t result = swift_release();
        if (!v5)
        {
          uint64_t v23 = sub_100240C34(7233902, 0xE300000000000000, 779, v19, v21, 1);
          sub_10000C970(v23, v24);
          return sub_10000C970(v19, v21);
        }
      }
      return result;
    case 2uLL:
      uint64_t v15 = *(void *)(v12 + 16);
      uint64_t v14 = *(void *)(v12 + 24);
      uint64_t v13 = v14 - v15;
      if (!__OFSUB__(v14, v15)) {
        goto LABEL_6;
      }
      goto LABEL_12;
    default:
      goto LABEL_7;
  }
}

uint64_t BroadcomDriver<>.transmit(followUp:for:to:with:)(uint64_t a1, unint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v32[0] = a3;
  v32[1] = a5;
  __int16 v33 = a4;
  char v34 = BYTE2(a4);
  char v35 = BYTE3(a4);
  char v36 = BYTE4(a4);
  char v37 = BYTE5(a4);
  int v38 = 0;
  __int16 v39 = 0;
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  sub_100010BCC(&qword_10047E1D0);
  uint64_t inited = swift_initStackObject();
  *(_DWORD *)(inited + 32) = 780;
  *(_OWORD *)(inited + 16) = xmmword_1003B2450;
  *(void *)(inited + 40) = a1;
  *(void *)(inited + 48) = a2;
  sub_100013D44(a1, a2);
  unsigned int v13 = *(_DWORD *)(inited + 32);
  uint64_t v15 = *(void *)(inited + 40);
  unint64_t v14 = *(void *)(inited + 48);
  swift_bridgeObjectRetain();
  if (HIWORD(v13)) {
    goto LABEL_13;
  }
  switch(v14 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v15), v15))
      {
        __break(1u);
LABEL_12:
        __break(1u);
LABEL_13:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x10023CA58);
      }
      uint64_t v16 = HIDWORD(v15) - (int)v15;
LABEL_6:
      sub_100013D44(v15, v14);
      if (v16 >= 0xFFFF)
      {
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v29 = 0;
        *(void *)(v29 + 8) = 0;
        *(unsigned char *)(v29 + 16) = 2;
        swift_willThrow();
        sub_10000C970(v15, v14);
        swift_bridgeObjectRelease_n();
        sub_10000C970(0, 0xC000000000000000);
        return swift_release();
      }
      else
      {
LABEL_7:
        sub_100013D44(v15, v14);
        uint64_t v19 = sub_100247790(v13, v15, v14);
        unint64_t v21 = v20;
        sub_10000C970(v15, v14);
        Data.append(_:)();
        sub_10000C970(v19, v21);
        sub_10000C970(v15, v14);
        swift_bridgeObjectRelease();
        swift_setDeallocating();
        sub_100010BCC(&qword_10047E1D8);
        swift_arrayDestroy();
        unint64_t v22 = sub_1000E4A78();
        uint64_t v23 = (void *)sub_10024D324((uint64_t)v32, KeyPath, 0, 0xC000000000000000, a6, a7, a8, v22);
        unint64_t v25 = v24;
        sub_10000C970(0, 0xC000000000000000);
        uint64_t result = swift_release();
        if (!v8)
        {
          int v27 = sub_10024177C(7233902, 0xE300000000000000, 779, v23, v25, 1, a6, a7, *(void *)(a8 + 16));
          sub_10000C970((uint64_t)v27, v28);
          return sub_10000C970((uint64_t)v23, v25);
        }
      }
      return result;
    case 2uLL:
      uint64_t v18 = *(void *)(v15 + 16);
      uint64_t v17 = *(void *)(v15 + 24);
      uint64_t v16 = v17 - v18;
      if (!__OFSUB__(v17, v18)) {
        goto LABEL_6;
      }
      goto LABEL_12;
    default:
      goto LABEL_7;
  }
}

uint64_t sub_10023CA68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, unint64_t a9, unint64_t a10, unint64_t a11)
{
  return sub_10023CAB0(a1, a2, a3, a4, a5 & 0xFFFFFFFFFFFFLL, a6 & 0xFFFFFFFFFFFFLL, a7 & 0xFFFFFFFFFFFFLL, a8, a9, a10, a11);
}

uint64_t sub_10023CAB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, unint64_t a9, unint64_t a10, unint64_t a11)
{
  int v95 = a8;
  uint64_t v93 = a6;
  uint64_t v94 = a7;
  uint64_t v92 = a5;
  uint64_t v13 = type metadata accessor for Data.Deallocator();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v96 = v13;
  uint64_t v97 = v14;
  __chkstk_darwin();
  uint64_t v16 = (char *)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v17 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v18 = type metadata accessor for BinaryEncoder();
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1003B2440;
  *(void *)(v19 + 32) = v17;
  v100[3] = v18;
  v100[4] = sub_10024DC6C((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
  v100[0] = v19;
  sub_10006EAC4(a2);
  swift_retain();
  unint64_t v20 = v98;
  IEEE80211Frame.Management.ActionFrame.encode(to:)(v100, a1, a2);
  sub_100010754((uint64_t)v100);
  sub_10006DE90(a2);
  if (v20) {
    return swift_release();
  }
  int v89 = a1;
  unint64_t v88 = v16;
  unint64_t v98 = a11;
  unint64_t v22 = a9;
  swift_beginAccess();
  uint64_t v23 = *(void *)(v19 + 16);
  unint64_t v24 = *(void *)(v19 + 24);
  sub_100013D44(v23, v24);
  swift_release();
  uint64_t v25 = 0;
  switch(v24 >> 62)
  {
    case 1uLL:
      LODWORD(v26) = HIDWORD(v23) - v23;
      if (__OFSUB__(HIDWORD(v23), v23)) {
        goto LABEL_49;
      }
      uint64_t v26 = (int)v26;
LABEL_8:
      if (v26 >= 0x10000)
      {
        sub_10000F000();
        swift_allocError();
        *(_OWORD *)uint64_t v30 = xmmword_1003B2F90;
        *(unsigned char *)(v30 + 16) = 0;
        swift_willThrow();
        goto LABEL_27;
      }
      if (v24 >> 62 != 2) {
        goto LABEL_14;
      }
      uint64_t v32 = *(void *)(v23 + 16);
      uint64_t v31 = *(void *)(v23 + 24);
      BOOL v29 = __OFSUB__(v31, v32);
      uint64_t v25 = v31 - v32;
      if (!v29) {
        goto LABEL_16;
      }
      __break(1u);
LABEL_14:
      LODWORD(v25) = HIDWORD(v23) - v23;
      if (__OFSUB__(HIDWORD(v23), v23)) {
        goto LABEL_51;
      }
      uint64_t v25 = (int)v25;
LABEL_16:
      if (__OFADD__(v25, 40)) {
        goto LABEL_47;
      }
      uint64_t v87 = v25 + 40;
      uint64_t v33 = swift_slowAlloc();
      unint64_t v34 = a10 - a9;
      if (a10 < a9) {
        goto LABEL_48;
      }
      uint64_t v35 = v33;
      unint64_t v86 = v24 >> 62;
      unint64_t v36 = 0;
      char v37 = _swiftEmptyArrayStorage;
      if (v34 < 0x80) {
        goto LABEL_25;
      }
      uint64_t v84 = v33;
      uint64_t v90 = v23;
      unint64_t v91 = v20;
      unint64_t v85 = v24;
      unint64_t v38 = v34 >> 7;
      uint64_t v101 = _swiftEmptyArrayStorage;
      sub_1000834E4(0, v34 >> 7, 0);
      char v37 = v101;
      unint64_t v39 = a9 >> 7;
      unint64_t v40 = v101[2];
      char v41 = v98;
      unint64_t v42 = HIBYTE(v98);
      unint64_t v43 = HIWORD(v98);
      unint64_t v44 = v98 >> 40;
      unint64_t v45 = HIDWORD(v98);
      unint64_t v46 = v98 >> 24;
      unint64_t v47 = v98 >> 16;
      unint64_t v48 = v98 >> 8;
      do
      {
        v99[0] = v41;
        v99[1] = v48;
        v99[2] = v47;
        v99[3] = v46;
        v99[4] = v45;
        v99[5] = v44;
        v99[6] = v43;
        v99[7] = v42;
        char v49 = v99[v39];
        unint64_t v50 = v37[3];
        uint64_t v101 = v37;
        if (v40 >= v50 >> 1)
        {
          unint64_t v83 = v42;
          unint64_t v51 = v43;
          unint64_t v82 = v44;
          unint64_t v81 = v45;
          unint64_t v80 = v46;
          unint64_t v79 = v47;
          sub_1000834E4(v50 > 1, v40 + 1, 1);
          unint64_t v47 = v79;
          unint64_t v46 = v80;
          unint64_t v45 = v81;
          unint64_t v44 = v82;
          unint64_t v43 = v51;
          unint64_t v42 = v83;
          char v41 = v98;
          char v37 = v101;
        }
        v37[2] = v40 + 1;
        *((unsigned char *)v37 + v40 + 32) = v49;
        if (v22 >= 0xFFFFFFFFFFFFFF80)
        {
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x10023D2F8);
        }
        v22 += 128;
        ++v39;
        ++v40;
        --v38;
      }
      while (v38);
      uint64_t v23 = v90;
      unint64_t v36 = v91;
      unint64_t v24 = v85;
      uint64_t v35 = v84;
LABEL_25:
      uint64_t v52 = sub_1001265EC((uint64_t)v37);
      unint64_t v54 = v53;
      swift_bridgeObjectRelease();
      uint64_t v55 = sub_1002579A0(v52, v54);
      sub_10000C970(v52, v54);
      if (v36)
      {
        swift_slowDealloc();
LABEL_27:
        uint64_t v56 = v23;
      }
      else
      {
        unint64_t v91 = 0;
        BOOL v57 = v89 == 4;
        uint64_t v58 = v86;
        LOWORD(v59) = 0;
        uint64_t v61 = v96;
        uint64_t v60 = v97;
        char v62 = v95;
        uint64_t v63 = v93;
        uint64_t v64 = v94;
        uint64_t v65 = v92;
        switch((int)v86)
        {
          case 1:
            LODWORD(v59) = HIDWORD(v23) - v23;
            if (__OFSUB__(HIDWORD(v23), v23)) {
              goto LABEL_52;
            }
            unint64_t v59 = (int)v59;
LABEL_33:
            if ((v59 & 0x8000000000000000) != 0 || v59 >= 0x10000) {
              goto LABEL_56;
            }
LABEL_35:
            *(void *)uint64_t v35 = v55;
            *(_WORD *)(v35 + 8) = v65;
            *(unsigned char *)(v35 + 10) = BYTE2(v65);
            *(unsigned char *)(v35 + 11) = BYTE3(v65);
            *(unsigned char *)(v35 + 12) = BYTE4(v65);
            *(unsigned char *)(v35 + 13) = BYTE5(v65);
            *(_WORD *)(v35 + 14) = v63;
            *(unsigned char *)(v35 + 16) = BYTE2(v63);
            *(unsigned char *)(v35 + 17) = BYTE3(v63);
            *(unsigned char *)(v35 + 18) = BYTE4(v63);
            *(unsigned char *)(v35 + 19) = BYTE5(v63);
            *(_WORD *)(v35 + 20) = v64;
            *(unsigned char *)(v35 + 22) = BYTE2(v64);
            *(unsigned char *)(v35 + 23) = BYTE3(v64);
            *(unsigned char *)(v35 + 24) = BYTE4(v64);
            *(unsigned char *)(v35 + 25) = BYTE5(v64);
            *(unsigned char *)(v35 + 26) = v57;
            *(unsigned char *)(v35 + 27) = v62;
            *(_WORD *)(v35 + 28) = 3000;
            *(void *)(v35 + 30) = 0;
            *(_WORD *)(v35 + 38) = v59;
            switch(v58)
            {
              case 0:
              case 3:
                goto LABEL_39;
              case 1:
                if (!__OFSUB__(HIDWORD(v23), v23)) {
                  goto LABEL_39;
                }
                goto LABEL_54;
              case 2:
                if (__OFSUB__(*(void *)(v23 + 24), *(void *)(v23 + 16))) {
                  goto LABEL_55;
                }
LABEL_39:
                uint64_t v90 = v23;
                Data.copyBytes(to:count:)();
                uint64_t v68 = *(void (**)(char *, void, uint64_t))(v60 + 104);
                unint64_t v69 = v88;
                v68(v88, enum case for Data.Deallocator.none(_:), v61);
                Data.Deallocator._deallocator.getter();
                uint64_t v70 = v87;
                if (v87)
                {
                  type metadata accessor for __DataStorage();
                  swift_allocObject();
                  swift_retain();
                  uint64_t v71 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
                  uint64_t v72 = sub_100003D88(v71, v70);
                  unint64_t v74 = v73;
                  swift_release();
                }
                else
                {
                  uint64_t v75 = (void (*)(uint64_t, void))Data.Deallocator._deallocator.getter();
                  v75(v35, 0);
                  swift_release();
                  swift_release();
                  uint64_t v72 = 0;
                  unint64_t v74 = 0xC000000000000000;
                }
                (*(void (**)(char *, uint64_t))(v97 + 8))(v69, v61);
                unint64_t v76 = v91;
                uint64_t v77 = sub_100240C34(7233902, 0xE300000000000000, 2051, v72, v74, 1);
                if (!v76) {
                  sub_10000C970(v77, v78);
                }
                sub_10000C970(v72, v74);
                swift_slowDealloc();
                uint64_t v56 = v90;
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          case 2:
            uint64_t v67 = *(void *)(v23 + 16);
            uint64_t v66 = *(void *)(v23 + 24);
            BOOL v29 = __OFSUB__(v66, v67);
            unint64_t v59 = v66 - v67;
            if (!v29) {
              goto LABEL_33;
            }
            goto LABEL_53;
          case 3:
            goto LABEL_35;
          default:
            LOWORD(v59) = BYTE6(v24);
            goto LABEL_35;
        }
      }
      uint64_t result = sub_10000C970(v56, v24);
      break;
    case 2uLL:
      uint64_t v28 = *(void *)(v23 + 16);
      uint64_t v27 = *(void *)(v23 + 24);
      BOOL v29 = __OFSUB__(v27, v28);
      uint64_t v26 = v27 - v28;
      if (!v29) {
        goto LABEL_8;
      }
      goto LABEL_50;
    case 3uLL:
      goto LABEL_16;
    default:
      uint64_t v25 = BYTE6(v24);
      goto LABEL_16;
  }
  return result;
}

uint64_t BroadcomDriver<>.transmit(outOfBoundActionFrame:from:to:on:mapID:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, unint64_t a9, unint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v93 = a5;
  int v96 = a8;
  uint64_t v94 = a6;
  uint64_t v95 = a7;
  uint64_t v16 = type metadata accessor for Data.Deallocator();
  uint64_t v97 = *(void *)(v16 - 8);
  uint64_t v98 = v16;
  __chkstk_darwin();
  uint64_t v18 = (char *)&v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v19 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v20 = type metadata accessor for BinaryEncoder();
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_1003B2440;
  *(void *)(v21 + 32) = v19;
  v101[3] = v20;
  v101[4] = sub_10024DC6C((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
  v101[0] = v21;
  sub_10006EAC4(a2);
  swift_retain();
  unint64_t v22 = v99;
  IEEE80211Frame.Management.ActionFrame.encode(to:)(v101, a1, a2);
  uint64_t v23 = v22;
  sub_100010754((uint64_t)v101);
  sub_10006DE90(a2);
  if (v22) {
    return swift_release();
  }
  int v89 = a1;
  uint64_t v90 = v18;
  uint64_t v87 = a14;
  uint64_t v88 = a12;
  unint64_t v92 = a11;
  unint64_t v25 = a9;
  swift_beginAccess();
  uint64_t v27 = *(void *)(v21 + 16);
  unint64_t v26 = *(void *)(v21 + 24);
  sub_100013D44(v27, v26);
  swift_release();
  uint64_t v28 = 0;
  switch(v26 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v27), v27)) {
        goto LABEL_46;
      }
      if (HIDWORD(v27) - (int)v27 < 0x10000) {
        goto LABEL_12;
      }
      goto LABEL_10;
    case 2uLL:
      uint64_t v30 = *(void *)(v27 + 16);
      uint64_t v29 = *(void *)(v27 + 24);
      BOOL v31 = __OFSUB__(v29, v30);
      uint64_t v28 = v29 - v30;
      if (v31) {
        goto LABEL_47;
      }
      if (v28 >= 0x10000)
      {
LABEL_10:
        sub_10000F000();
        swift_allocError();
        *(_OWORD *)uint64_t v32 = xmmword_1003B2F90;
        *(unsigned char *)(v32 + 16) = 0;
        swift_willThrow();
        goto LABEL_42;
      }
      if (v26 >> 62 == 2) {
        goto LABEL_14;
      }
LABEL_12:
      LODWORD(v28) = HIDWORD(v27) - v27;
      if (__OFSUB__(HIDWORD(v27), v27)) {
        goto LABEL_48;
      }
      uint64_t v28 = (int)v28;
LABEL_14:
      uint64_t v33 = v28 + 40;
      if (__OFADD__(v28, 40)) {
        goto LABEL_44;
      }
      uint64_t v34 = swift_slowAlloc();
      unint64_t v35 = a10 - a9;
      if (a10 < a9) {
        goto LABEL_45;
      }
      unint64_t v85 = v26 >> 62;
      unint64_t v86 = (void *)v33;
      uint64_t v99 = (void *)v34;
      uint64_t v84 = a13;
      unint64_t v36 = _swiftEmptyArrayStorage;
      if (v35 < 0x80) {
        goto LABEL_23;
      }
      uint64_t v82 = v27;
      unint64_t v83 = v26;
      unint64_t v91 = 0;
      unint64_t v37 = v35 >> 7;
      unint64_t v102 = _swiftEmptyArrayStorage;
      sub_1000834E4(0, v35 >> 7, 0);
      unint64_t v36 = v102;
      unint64_t v38 = a9 >> 7;
      unint64_t v39 = v102[2];
      char v40 = v92;
      unint64_t v41 = HIBYTE(v92);
      unint64_t v42 = HIWORD(v92);
      unint64_t v43 = v92 >> 40;
      unint64_t v44 = HIDWORD(v92);
      unint64_t v45 = v92 >> 24;
      unint64_t v46 = v92 >> 16;
      unint64_t v47 = v92 >> 8;
      do
      {
        v100[0] = v40;
        v100[1] = v47;
        v100[2] = v46;
        v100[3] = v45;
        v100[4] = v44;
        v100[5] = v43;
        void v100[6] = v42;
        v100[7] = v41;
        char v48 = v100[v38];
        unint64_t v49 = v36[3];
        unint64_t v102 = v36;
        if (v39 >= v49 >> 1)
        {
          unint64_t v81 = v41;
          unint64_t v80 = v42;
          unint64_t v79 = v43;
          unint64_t v78 = v44;
          unint64_t v77 = v45;
          sub_1000834E4(v49 > 1, v39 + 1, 1);
          unint64_t v45 = v77;
          unint64_t v44 = v78;
          unint64_t v43 = v79;
          unint64_t v42 = v80;
          unint64_t v41 = v81;
          char v40 = v92;
          unint64_t v36 = v102;
        }
        v36[2] = v39 + 1;
        *((unsigned char *)v36 + v39 + 32) = v48;
        if (v25 >= 0xFFFFFFFFFFFFFF80)
        {
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x10023DB68);
        }
        v25 += 128;
        ++v38;
        ++v39;
        --v37;
      }
      while (v37);
      uint64_t v23 = v91;
      unint64_t v26 = v83;
      uint64_t v27 = v82;
LABEL_23:
      uint64_t v50 = sub_1001265EC((uint64_t)v36);
      unint64_t v51 = v23;
      unint64_t v53 = v52;
      swift_bridgeObjectRelease();
      uint64_t v54 = sub_1002579A0(v50, v53);
      sub_10000C970(v50, v53);
      if (!v51)
      {
        unint64_t v91 = 0;
        BOOL v55 = v89 == 4;
        uint64_t v56 = v85;
        uint64_t v58 = v98;
        BOOL v57 = v99;
        LOWORD(v59) = 0;
        uint64_t v60 = v97;
        uint64_t v61 = v90;
        char v62 = v96;
        uint64_t v63 = v94;
        uint64_t v64 = v95;
        uint64_t v65 = v93;
        uint64_t v66 = v86;
        switch((int)v85)
        {
          case 1:
            LODWORD(v59) = HIDWORD(v27) - v27;
            if (__OFSUB__(HIDWORD(v27), v27)) {
              goto LABEL_49;
            }
            unint64_t v59 = (int)v59;
LABEL_29:
            if ((v59 & 0x8000000000000000) != 0 || v59 >= 0x10000) {
              goto LABEL_53;
            }
LABEL_31:
            *uint64_t v99 = v54;
            *((_WORD *)v57 + 4) = v65;
            *((unsigned char *)v57 + 10) = BYTE2(v65);
            *((unsigned char *)v57 + 11) = BYTE3(v65);
            *((unsigned char *)v57 + 12) = BYTE4(v65);
            *((unsigned char *)v57 + 13) = BYTE5(v65);
            *((_WORD *)v57 + 7) = v63;
            *((unsigned char *)v57 + 16) = BYTE2(v63);
            *((unsigned char *)v57 + 17) = BYTE3(v63);
            *((unsigned char *)v57 + 18) = BYTE4(v63);
            *((unsigned char *)v57 + 19) = BYTE5(v63);
            *((_WORD *)v57 + 10) = v64;
            *((unsigned char *)v57 + 22) = BYTE2(v64);
            *((unsigned char *)v57 + 23) = BYTE3(v64);
            *((unsigned char *)v57 + 24) = BYTE4(v64);
            *((unsigned char *)v57 + 25) = BYTE5(v64);
            *((unsigned char *)v57 + 26) = v55;
            *((unsigned char *)v57 + 27) = v62;
            *((_WORD *)v57 + 14) = 3000;
            *(void *)((char *)v57 + 30) = 0;
            *((_WORD *)v57 + 19) = v59;
            switch(v56)
            {
              case 0:
              case 3:
                goto LABEL_35;
              case 1:
                if (!__OFSUB__(HIDWORD(v27), v27)) {
                  goto LABEL_35;
                }
                goto LABEL_51;
              case 2:
                if (__OFSUB__(*(void *)(v27 + 24), *(void *)(v27 + 16))) {
                  goto LABEL_52;
                }
LABEL_35:
                Data.copyBytes(to:count:)();
                (*(void (**)(char *, void, uint64_t))(v60 + 104))(v61, enum case for Data.Deallocator.none(_:), v58);
                Data.Deallocator._deallocator.getter();
                if (v66)
                {
                  type metadata accessor for __DataStorage();
                  swift_allocObject();
                  swift_retain();
                  uint64_t v69 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
                  uint64_t v66 = (void *)sub_100003D88(v69, (uint64_t)v66);
                  unint64_t v71 = v70;
                  swift_release();
                }
                else
                {
                  uint64_t v72 = (void (*)(void *, void))Data.Deallocator._deallocator.getter();
                  v72(v57, 0);
                  swift_release();
                  swift_release();
                  unint64_t v71 = 0xC000000000000000;
                }
                (*(void (**)(char *, uint64_t))(v60 + 8))(v61, v58);
                unint64_t v73 = v91;
                unint64_t v74 = sub_10024177C(7233902, 0xE300000000000000, 2051, v66, v71, 1, v88, v84, *(void *)(v87 + 16));
                if (!v73) {
                  sub_10000C970((uint64_t)v74, v75);
                }
                sub_10000C970((uint64_t)v66, v71);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          case 2:
            uint64_t v68 = *(void *)(v27 + 16);
            uint64_t v67 = *(void *)(v27 + 24);
            BOOL v31 = __OFSUB__(v67, v68);
            unint64_t v59 = v67 - v68;
            if (!v31) {
              goto LABEL_29;
            }
            goto LABEL_50;
          case 3:
            goto LABEL_31;
          default:
            LOWORD(v59) = BYTE6(v26);
            goto LABEL_31;
        }
      }
      swift_slowDealloc();
LABEL_42:
      uint64_t result = sub_10000C970(v27, v26);
      break;
    case 3uLL:
      goto LABEL_14;
    default:
      uint64_t v28 = BYTE6(v26);
      goto LABEL_14;
  }
  return result;
}

uint64_t sub_10023DB98(unsigned __int8 *a1)
{
  return sub_10023DBBC(a1);
}

uint64_t sub_10023DBBC(unsigned __int8 *a1)
{
  uint64_t v3 = type metadata accessor for SHA256Digest();
  uint64_t v110 = *(void *)(v3 - 8);
  uint64_t v111 = v3;
  __chkstk_darwin();
  unint64_t v108 = (char *)&v99 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = type metadata accessor for SHA256();
  uint64_t v107 = *(void *)(v109 - 8);
  __chkstk_darwin();
  uint64_t v106 = (char *)&v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v121 = xmmword_1003B2440;
  uint64_t v6 = a1[8];
  uint64_t v7 = a1[9];
  uint64_t v8 = a1[10];
  uint64_t v9 = a1[11];
  uint64_t v10 = a1[12];
  uint64_t v11 = a1[13];
  uint64_t v112 = sub_100010BCC(&qword_10047BEF8);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1003B2F40;
  uint64_t v117 = v7;
  uint64_t v118 = v6;
  *(unsigned char *)(v12 + 32) = v6;
  *(unsigned char *)(v12 + 33) = v7;
  uint64_t v115 = v9;
  uint64_t v116 = v8;
  *(unsigned char *)(v12 + 34) = v8;
  *(unsigned char *)(v12 + 35) = v9;
  uint64_t v113 = v11;
  uint64_t v114 = v10;
  *(unsigned char *)(v12 + 36) = v10;
  *(unsigned char *)(v12 + 37) = v11;
  uint64_t v13 = sub_1001265EC(v12);
  unint64_t v15 = v14;
  swift_bridgeObjectRelease();
  switch(v15 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v13), v13))
      {
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
        JUMPOUT(0x10023E6B8);
      }
      uint64_t v16 = HIDWORD(v13) - (int)v13;
LABEL_5:
      sub_100013D44(v13, v15);
      if (v16 >= 0xFFFF)
      {
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v34 = 0;
        *(void *)(v34 + 8) = 0;
        *(unsigned char *)(v34 + 16) = 2;
        swift_willThrow();
        sub_10000C970(v13, v15);
        sub_10000C970(v121, *((unint64_t *)&v121 + 1));
        uint64_t v35 = v13;
        unint64_t v36 = v15;
        return sub_10000C970(v35, v36);
      }
LABEL_6:
      uint64_t v105 = v1;
      uint64_t v19 = sub_100247790(270, v13, v15);
      unint64_t v21 = v20;
      sub_10000C970(v13, v15);
      Data.append(_:)();
      sub_10000C970(v19, v21);
      sub_10000C970(v13, v15);
      uint64_t v22 = *((void *)a1 + 16);
      if (v22 == 1)
      {
        LODWORD(v23) = 0;
LABEL_37:
        BOOL v82 = a1[74] != 2;
        if (a1[74]) {
          uint64_t v23 = v23;
        }
        else {
          uint64_t v23 = v23 | 0x10;
        }
        uint64_t v111 = a1[50];
        uint64_t v112 = v23;
        uint64_t v83 = a1[49];
        uint64_t v84 = a1[48];
        uint64_t v85 = a1[47];
        uint64_t v86 = a1[46];
        uint64_t v87 = *a1;
        long long v88 = v121;
        uint64_t v89 = a1[51];
        sub_100013D44(v121, *((unint64_t *)&v121 + 1));
        uint64_t v90 = v122;
        uint64_t v91 = sub_10024D488(((unint64_t)v82 << 8) | (v87 << 24), (v118 << 32) | (v117 << 40) | (v116 << 48) | (v115 << 56), v114 | (v113 << 8) | (v89 << 56) | (v111 << 48) | (v83 << 40) | (v84 << 32) | (v85 << 24) | (v86 << 16), v112 | 0xFFFF00000000, 0, 30, v88, *((unint64_t *)&v88 + 1));
        unint64_t v93 = v92;
        sub_10000C970(v88, *((unint64_t *)&v88 + 1));
        if (!v90)
        {
          uint64_t v94 = sub_100240C34(7233902, 0xE300000000000000, 1285, v91, v93, 0);
          unint64_t v96 = v95;
          sub_10000C970(v91, v93);
          sub_10000C970(v94, v96);
        }
        unint64_t v36 = *((void *)&v88 + 1);
        uint64_t v35 = v88;
        return sub_10000C970(v35, v36);
      }
      uint64_t v25 = *((void *)a1 + 10);
      uint64_t v24 = *((void *)a1 + 11);
      unint64_t v27 = *((void *)a1 + 12);
      uint64_t v26 = *((void *)a1 + 13);
      unint64_t v28 = *((void *)a1 + 14);
      uint64_t v104 = *((void *)a1 + 15);
      uint64_t v29 = swift_allocObject();
      *(_OWORD *)(v29 + 16) = xmmword_1003B2450;
      uint64_t v103 = v25;
      *(unsigned char *)(v29 + 32) = v25 + 1;
      uint64_t v112 = v24;
      sub_100013D44(v24, v27);
      sub_100038004(v26, v28);
      swift_bridgeObjectRetain();
      uint64_t v30 = sub_1001265EC(v29);
      unint64_t v32 = v31;
      swift_bridgeObjectRelease();
      switch(v32 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v30), v30)) {
            goto LABEL_47;
          }
          uint64_t v33 = HIDWORD(v30) - (int)v30;
LABEL_13:
          sub_100013D44(v30, v32);
          if (v33 >= 0xFFFF)
          {
            sub_10000F000();
            swift_allocError();
            *(void *)uint64_t v49 = 0;
            *(void *)(v49 + 8) = 0;
            *(unsigned char *)(v49 + 16) = 2;
            swift_willThrow();
            sub_10000C970(v30, v32);
            sub_10000C970(v30, v32);
            uint64_t v50 = v103;
            uint64_t v51 = v104;
            uint64_t v52 = v112;
            unint64_t v53 = v27;
            uint64_t v54 = v26;
            unint64_t v55 = v28;
            uint64_t v56 = v22;
LABEL_32:
            sub_1000CAB20(v50, v52, v53, v54, v55, v51, v56);
            unint64_t v36 = *((void *)&v121 + 1);
            uint64_t v35 = v121;
            return sub_10000C970(v35, v36);
          }
LABEL_14:
          unint64_t v100 = v27 >> 62;
          uint64_t v102 = v26;
          uint64_t v101 = v22;
          uint64_t v39 = sub_100247790(264, v30, v32);
          unint64_t v41 = v40;
          sub_10000C970(v30, v32);
          Data.append(_:)();
          sub_10000C970(v39, v41);
          sub_10000C970(v30, v32);
          swift_bridgeObjectRetain();
          unint64_t v42 = v106;
          SHA256.init()();
          Swift::String v43 = String.lowercased()();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          uint64_t v44 = v122;
          sub_1001A5654(v43._countAndFlagsBits, (uint64_t)v43._object);
          swift_bridgeObjectRelease();
          unint64_t v45 = v108;
          SHA256.finalize()();
          SHA256Digest.withUnsafeBytes<A>(_:)();
          (*(void (**)(char *, uint64_t))(v110 + 8))(v45, v111);
          uint64_t v46 = v119;
          unint64_t v47 = v120;
          (*(void (**)(char *, uint64_t))(v107 + 8))(v42, v109);
          switch(v47 >> 62)
          {
            case 1uLL:
              if (__OFSUB__(HIDWORD(v46), v46)) {
                goto LABEL_49;
              }
              uint64_t v48 = HIDWORD(v46) - (int)v46;
LABEL_19:
              sub_100013D44(v46, v47);
              if (v48 >= 0xFFFF)
              {
                sub_10000F000();
                swift_allocError();
                *(void *)uint64_t v66 = 0;
                *(void *)(v66 + 8) = 0;
                *(unsigned char *)(v66 + 16) = 2;
                swift_willThrow();
                sub_10000C970(v46, v47);
                sub_10000C970(v121, *((unint64_t *)&v121 + 1));
                sub_10000C970(v46, v47);
                uint64_t result = sub_1000CAB20(v103, v112, v27, v102, v28, v104, v101);
              }
              else
              {
LABEL_20:
                unint64_t v59 = v28;
                uint64_t v60 = sub_100247790(263, v46, v47);
                unint64_t v62 = v61;
                sub_10000C970(v46, v47);
                Data.append(_:)();
                sub_10000C970(v60, v62);
                sub_10000C970(v46, v47);
                uint64_t v63 = v101;
                uint64_t v64 = v112;
                switch((int)v100)
                {
                  case 1:
                    if (__OFSUB__(HIDWORD(v112), v112)) {
                      goto LABEL_51;
                    }
                    uint64_t v65 = HIDWORD(v112) - (int)v112;
LABEL_25:
                    sub_100013D44(v112, v27);
                    sub_100013D44(v64, v27);
                    if (v65 >= 0xFFFF)
                    {
                      sub_10000F000();
                      swift_allocError();
                      *(void *)uint64_t v74 = 0;
                      *(void *)(v74 + 8) = 0;
                      *(unsigned char *)(v74 + 16) = 2;
                      swift_willThrow();
                      sub_10000C970(v64, v27);
                      sub_10000C970(v64, v27);
                      uint64_t v50 = v103;
                      uint64_t v51 = v104;
                      uint64_t v52 = v64;
                      unint64_t v53 = v27;
                      uint64_t v54 = v102;
                      unint64_t v55 = v59;
                      uint64_t v56 = v63;
                      goto LABEL_32;
                    }
LABEL_26:
                    uint64_t v70 = sub_100247790(265, v64, v27);
                    unint64_t v72 = v71;
                    sub_10000C970(v64, v27);
                    Data.append(_:)();
                    sub_10000C970(v70, v72);
                    sub_10000C970(v64, v27);
                    if (v59 >> 60 == 15)
                    {
                      uint64_t v122 = v44;
                      sub_1000CAB20(v103, v64, v27, v102, v59, v104, v63);
LABEL_36:
                      LODWORD(v23) = 8;
                      goto LABEL_37;
                    }
                    switch(v59 >> 62)
                    {
                      case 1uLL:
                        if (__OFSUB__(HIDWORD(v102), v102)) {
                          goto LABEL_53;
                        }
                        uint64_t v73 = HIDWORD(v102) - (int)v102;
LABEL_34:
                        uint64_t v77 = v102;
                        sub_100038004(v102, v59);
                        sub_100038004(v77, v59);
                        sub_100013D44(v77, v59);
                        if (v73 < 0xFFFF)
                        {
LABEL_35:
                          uint64_t v122 = v44;
                          uint64_t v78 = v102;
                          uint64_t v79 = sub_100247790(266, v102, v59);
                          unint64_t v81 = v80;
                          sub_10000C95C(v78, v59);
                          Data.append(_:)();
                          sub_10000C970(v79, v81);
                          sub_1000CAB20(v103, v64, v27, v78, v59, v104, v63);
                          sub_10000C95C(v78, v59);
                          sub_10000C95C(v78, v59);
                          goto LABEL_36;
                        }
                        sub_10000F000();
                        swift_allocError();
                        *(void *)uint64_t v97 = 0;
                        *(void *)(v97 + 8) = 0;
                        *(unsigned char *)(v97 + 16) = 2;
                        swift_willThrow();
                        uint64_t v98 = v102;
                        sub_10000C95C(v102, v59);
                        sub_10000C970(v121, *((unint64_t *)&v121 + 1));
                        sub_10000C95C(v98, v59);
                        sub_10000C95C(v98, v59);
                        uint64_t result = sub_1000CAB20(v103, v64, v27, v98, v59, v104, v63);
                        break;
                      case 2uLL:
                        uint64_t v76 = *(void *)(v102 + 16);
                        uint64_t v75 = *(void *)(v102 + 24);
                        uint64_t v73 = v75 - v76;
                        if (!__OFSUB__(v75, v76)) {
                          goto LABEL_34;
                        }
                        goto LABEL_54;
                      default:
                        goto LABEL_35;
                    }
                    break;
                  case 2:
                    uint64_t v69 = *(void *)(v112 + 16);
                    uint64_t v68 = *(void *)(v112 + 24);
                    uint64_t v65 = v68 - v69;
                    if (!__OFSUB__(v68, v69)) {
                      goto LABEL_25;
                    }
                    goto LABEL_52;
                  default:
                    goto LABEL_26;
                }
              }
              break;
            case 2uLL:
              uint64_t v58 = *(void *)(v46 + 16);
              uint64_t v57 = *(void *)(v46 + 24);
              uint64_t v48 = v57 - v58;
              if (!__OFSUB__(v57, v58)) {
                goto LABEL_19;
              }
              goto LABEL_50;
            default:
              goto LABEL_20;
          }
          break;
        case 2uLL:
          uint64_t v38 = *(void *)(v30 + 16);
          uint64_t v37 = *(void *)(v30 + 24);
          uint64_t v33 = v37 - v38;
          if (!__OFSUB__(v37, v38)) {
            goto LABEL_13;
          }
          goto LABEL_48;
        default:
          goto LABEL_14;
      }
      return result;
    case 2uLL:
      uint64_t v18 = *(void *)(v13 + 16);
      uint64_t v17 = *(void *)(v13 + 24);
      uint64_t v16 = v17 - v18;
      if (!__OFSUB__(v17, v18)) {
        goto LABEL_5;
      }
      goto LABEL_46;
    default:
      goto LABEL_6;
  }
}

uint64_t BroadcomDriver<>.send(datapathResponse:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v130 = a4;
  uint64_t v131 = a3;
  uint64_t v138 = a2;
  uint64_t v6 = type metadata accessor for SHA256Digest();
  uint64_t v127 = *(void *)(v6 - 8);
  uint64_t v128 = v6;
  __chkstk_darwin();
  uint64_t v125 = (char *)&v116 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = type metadata accessor for SHA256();
  uint64_t v124 = *(void *)(v126 - 8);
  __chkstk_darwin();
  unint64_t v123 = (char *)&v116 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v146 = xmmword_1003B2440;
  int v9 = a1[8];
  int v10 = a1[9];
  int v11 = a1[10];
  int v12 = a1[11];
  int v13 = a1[12];
  int v14 = a1[13];
  uint64_t v129 = sub_100010BCC(&qword_10047BEF8);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1003B2F40;
  int v136 = v10;
  int v137 = v9;
  *(unsigned char *)(v15 + 32) = v9;
  *(unsigned char *)(v15 + 33) = v10;
  int v134 = v12;
  int v135 = v11;
  *(unsigned char *)(v15 + 34) = v11;
  *(unsigned char *)(v15 + 35) = v12;
  int v132 = v14;
  int v133 = v13;
  *(unsigned char *)(v15 + 36) = v13;
  *(unsigned char *)(v15 + 37) = v14;
  uint64_t v16 = sub_1001265EC(v15);
  unint64_t v18 = v17;
  swift_bridgeObjectRelease();
  switch(v18 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v16), v16))
      {
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
        JUMPOUT(0x10023F2A4);
      }
      uint64_t v19 = HIDWORD(v16) - (int)v16;
LABEL_5:
      sub_100013D44(v16, v18);
      if (v19 >= 0xFFFF)
      {
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v41 = 0;
        *(void *)(v41 + 8) = 0;
        *(unsigned char *)(v41 + 16) = 2;
        swift_willThrow();
        sub_10000C970(v16, v18);
        sub_10000C970(v146, *((unint64_t *)&v146 + 1));
        uint64_t v42 = v16;
        goto LABEL_42;
      }
LABEL_6:
      uint64_t v122 = v4;
      uint64_t v22 = sub_100247790(270, v16, v18);
      unint64_t v24 = v23;
      sub_10000C970(v16, v18);
      Data.append(_:)();
      sub_10000C970(v22, v24);
      sub_10000C970(v16, v18);
      uint64_t v25 = *((void *)a1 + 16);
      if (v25 == 1)
      {
        __int16 v26 = 0;
        uint64_t v28 = v130;
        uint64_t v27 = v131;
        uint64_t v29 = v147;
LABEL_37:
        int v96 = a1[74];
        BOOL v97 = v96 != 2;
        BOOL v98 = v96 == 0;
        char v99 = *a1;
        if (v98) {
          v26 |= 0x10u;
        }
        __int16 v100 = *((_WORD *)a1 + 25);
        LOBYTE(v139) = 0;
        *(_WORD *)((char *)&v139 + 1) = v97;
        BYTE3(v139) = v99;
        *(void *)((char *)&v139 + 4) = 0;
        BYTE12(v139) = v137;
        BYTE13(v139) = v136;
        BYTE14(v139) = v135;
        HIBYTE(v139) = v134;
        char v140 = v133;
        char v141 = v132;
        int v142 = *(_DWORD *)(a1 + 46);
        __int16 v143 = v100;
        __int16 v144 = v26;
        int v145 = -65536;
        unint64_t v18 = *((void *)&v146 + 1);
        uint64_t v101 = v146;
        sub_100013D44(v146, *((unint64_t *)&v146 + 1));
        type metadata accessor for wl_nan_dp_resp(0);
        uint64_t v103 = v102;
        unint64_t v104 = sub_1000E4A78();
        uint64_t v105 = v138;
        uint64_t v106 = v29;
        uint64_t v107 = (void *)sub_10024CA34((uint64_t)&v139, 0, 30, v101, v18, v138, v103, (uint64_t)&type metadata for UInt16, v27, v28, v104);
        unint64_t v109 = v108;
        sub_10000C970(v101, v18);
        if (!v106)
        {
          uint64_t v111 = sub_10024177C(7233902, 0xE300000000000000, 1285, v107, v109, 0, v105, v27, *(void *)(v28 + 16));
          unint64_t v113 = v112;
          sub_10000C970((uint64_t)v107, v109);
          sub_10000C970((uint64_t)v111, v113);
        }
        uint64_t v42 = v101;
LABEL_42:
        unint64_t v87 = v18;
        return sub_10000C970(v42, v87);
      }
      uint64_t v31 = *((void *)a1 + 10);
      uint64_t v30 = *((void *)a1 + 11);
      unint64_t v33 = *((void *)a1 + 12);
      uint64_t v32 = *((void *)a1 + 13);
      unint64_t v34 = *((void *)a1 + 14);
      uint64_t v35 = *((void *)a1 + 15);
      uint64_t v36 = swift_allocObject();
      *(_OWORD *)(v36 + 16) = xmmword_1003B2450;
      uint64_t v121 = v31;
      *(unsigned char *)(v36 + 32) = v31 + 1;
      unint64_t v119 = v33 >> 62;
      uint64_t v129 = v30;
      sub_100013D44(v30, v33);
      sub_100038004(v32, v34);
      swift_bridgeObjectRetain();
      uint64_t v37 = sub_1001265EC(v36);
      unint64_t v39 = v38;
      swift_bridgeObjectRelease();
      switch(v39 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v37), v37)) {
            goto LABEL_48;
          }
          uint64_t v40 = HIDWORD(v37) - (int)v37;
LABEL_13:
          sub_100013D44(v37, v39);
          if (v40 >= 0xFFFF)
          {
            sub_10000F000();
            swift_allocError();
            *(void *)uint64_t v55 = 0;
            *(void *)(v55 + 8) = 0;
            *(unsigned char *)(v55 + 16) = 2;
            swift_willThrow();
            sub_10000C970(v37, v39);
            sub_10000C970(v37, v39);
            uint64_t v56 = v121;
            uint64_t v57 = v129;
            unint64_t v58 = v33;
            uint64_t v59 = v32;
            unint64_t v60 = v34;
            uint64_t v61 = v35;
            uint64_t v62 = v25;
LABEL_32:
            sub_1000CAB20(v56, v57, v58, v59, v60, v61, v62);
            unint64_t v87 = *((void *)&v146 + 1);
            uint64_t v42 = v146;
            return sub_10000C970(v42, v87);
          }
LABEL_14:
          uint64_t v120 = v32;
          unint64_t v118 = v34;
          uint64_t v117 = v25;
          uint64_t v45 = sub_100247790(264, v37, v39);
          unint64_t v47 = v46;
          sub_10000C970(v37, v39);
          Data.append(_:)();
          sub_10000C970(v45, v47);
          sub_10000C970(v37, v39);
          swift_bridgeObjectRetain();
          uint64_t v48 = v123;
          SHA256.init()();
          Swift::String v49 = String.lowercased()();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          uint64_t v50 = v147;
          sub_1001A5654(v49._countAndFlagsBits, (uint64_t)v49._object);
          swift_bridgeObjectRelease();
          uint64_t v51 = v125;
          SHA256.finalize()();
          SHA256Digest.withUnsafeBytes<A>(_:)();
          (*(void (**)(char *, uint64_t))(v127 + 8))(v51, v128);
          long long v52 = v139;
          (*(void (**)(char *, uint64_t))(v124 + 8))(v48, v126);
          uint64_t v53 = v129;
          switch(*((void *)&v52 + 1) >> 62)
          {
            case 1:
              if (__OFSUB__(DWORD1(v52), v52)) {
                goto LABEL_50;
              }
              uint64_t v54 = DWORD1(v52) - (int)v52;
LABEL_19:
              sub_100013D44(v52, *((unint64_t *)&v52 + 1));
              if (v54 >= 0xFFFF)
              {
                sub_10000F000();
                swift_allocError();
                *(void *)uint64_t v74 = 0;
                *(void *)(v74 + 8) = 0;
                *(unsigned char *)(v74 + 16) = 2;
                swift_willThrow();
                sub_10000C970(v52, *((unint64_t *)&v52 + 1));
                sub_10000C970(v146, *((unint64_t *)&v146 + 1));
                sub_10000C970(v52, *((unint64_t *)&v52 + 1));
                uint64_t v75 = v121;
                uint64_t v76 = v53;
                unint64_t v77 = v33;
                uint64_t v78 = v120;
                unint64_t v79 = v118;
              }
              else
              {
LABEL_20:
                uint64_t v65 = v35;
                unint64_t v66 = v33;
                uint64_t v67 = sub_100247790(263, v52, *((unint64_t *)&v52 + 1));
                unint64_t v69 = v68;
                sub_10000C970(v52, *((unint64_t *)&v52 + 1));
                Data.append(_:)();
                sub_10000C970(v67, v69);
                sub_10000C970(v52, *((unint64_t *)&v52 + 1));
                uint64_t v29 = v50;
                unint64_t v70 = v118;
                unint64_t v71 = v66;
                uint64_t v35 = v65;
                uint64_t v72 = v129;
                switch((int)v119)
                {
                  case 1:
                    if (__OFSUB__(HIDWORD(v129), v129)) {
                      goto LABEL_52;
                    }
                    uint64_t v73 = HIDWORD(v129) - (int)v129;
LABEL_25:
                    sub_100013D44(v129, v71);
                    sub_100013D44(v72, v71);
                    if (v73 >= 0xFFFF)
                    {
                      sub_10000F000();
                      swift_allocError();
                      *(void *)uint64_t v86 = 0;
                      *(void *)(v86 + 8) = 0;
                      *(unsigned char *)(v86 + 16) = 2;
                      swift_willThrow();
                      sub_10000C970(v72, v71);
                      sub_10000C970(v72, v71);
                      uint64_t v56 = v121;
                      uint64_t v57 = v72;
                      unint64_t v58 = v71;
                      uint64_t v59 = v120;
                      unint64_t v60 = v70;
                      uint64_t v61 = v35;
                      uint64_t v62 = v117;
                      goto LABEL_32;
                    }
LABEL_26:
                    uint64_t v82 = sub_100247790(265, v72, v71);
                    unint64_t v84 = v83;
                    sub_10000C970(v72, v71);
                    Data.append(_:)();
                    sub_10000C970(v82, v84);
                    sub_10000C970(v72, v71);
                    if (v70 >> 60 == 15)
                    {
                      sub_1000CAB20(v121, v72, v71, v120, v70, v35, v117);
LABEL_36:
                      __int16 v26 = 8;
                      uint64_t v28 = v130;
                      uint64_t v27 = v131;
                      goto LABEL_37;
                    }
                    switch(v70 >> 62)
                    {
                      case 1uLL:
                        if (__OFSUB__(HIDWORD(v120), v120)) {
                          goto LABEL_54;
                        }
                        uint64_t v85 = HIDWORD(v120) - (int)v120;
LABEL_34:
                        uint64_t v90 = v120;
                        sub_100038004(v120, v70);
                        sub_100038004(v90, v70);
                        sub_100013D44(v90, v70);
                        if (v85 < 0xFFFF)
                        {
LABEL_35:
                          uint64_t v147 = v35;
                          unint64_t v91 = v71;
                          uint64_t v92 = v120;
                          uint64_t v93 = sub_100247790(266, v120, v70);
                          unint64_t v95 = v94;
                          sub_10000C95C(v92, v70);
                          Data.append(_:)();
                          sub_10000C970(v93, v95);
                          sub_1000CAB20(v121, v72, v91, v92, v70, v147, v117);
                          sub_10000C95C(v92, v70);
                          sub_10000C95C(v92, v70);
                          goto LABEL_36;
                        }
                        sub_10000F000();
                        swift_allocError();
                        *(void *)uint64_t v114 = 0;
                        *(void *)(v114 + 8) = 0;
                        *(unsigned char *)(v114 + 16) = 2;
                        swift_willThrow();
                        uint64_t v115 = v120;
                        sub_10000C95C(v120, v70);
                        sub_10000C970(v146, *((unint64_t *)&v146 + 1));
                        sub_10000C95C(v115, v70);
                        sub_10000C95C(v115, v70);
                        uint64_t v75 = v121;
                        uint64_t v76 = v72;
                        unint64_t v77 = v71;
                        uint64_t v78 = v115;
                        unint64_t v79 = v70;
                        break;
                      case 2uLL:
                        uint64_t v89 = *(void *)(v120 + 16);
                        uint64_t v88 = *(void *)(v120 + 24);
                        uint64_t v85 = v88 - v89;
                        if (!__OFSUB__(v88, v89)) {
                          goto LABEL_34;
                        }
                        goto LABEL_55;
                      default:
                        goto LABEL_35;
                    }
                    break;
                  case 2:
                    uint64_t v81 = *(void *)(v129 + 16);
                    uint64_t v80 = *(void *)(v129 + 24);
                    uint64_t v73 = v80 - v81;
                    if (!__OFSUB__(v80, v81)) {
                      goto LABEL_25;
                    }
                    goto LABEL_53;
                  default:
                    goto LABEL_26;
                }
              }
              uint64_t result = sub_1000CAB20(v75, v76, v77, v78, v79, v35, v117);
              break;
            case 2:
              uint64_t v64 = *(void *)(v52 + 16);
              uint64_t v63 = *(void *)(v52 + 24);
              uint64_t v54 = v63 - v64;
              if (!__OFSUB__(v63, v64)) {
                goto LABEL_19;
              }
              goto LABEL_51;
            default:
              goto LABEL_20;
          }
          break;
        case 2uLL:
          uint64_t v44 = *(void *)(v37 + 16);
          uint64_t v43 = *(void *)(v37 + 24);
          uint64_t v40 = v43 - v44;
          if (!__OFSUB__(v43, v44)) {
            goto LABEL_13;
          }
          goto LABEL_49;
        default:
          goto LABEL_14;
      }
      return result;
    case 2uLL:
      uint64_t v21 = *(void *)(v16 + 16);
      uint64_t v20 = *(void *)(v16 + 24);
      uint64_t v19 = v20 - v21;
      if (!__OFSUB__(v20, v21)) {
        goto LABEL_5;
      }
      goto LABEL_47;
    default:
      goto LABEL_6;
  }
}

uint64_t sub_10023F2F4(unint64_t a1)
{
  return sub_10024855C(0x50Eu, a1 | ((HIBYTE(a1) != 2) << 8));
}

uint64_t BroadcomDriver<>.send(datapathConfirmation:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[0] = a1;
  v9[1] = HIBYTE(a1) != 2;
  __int16 v10 = 0;
  type metadata accessor for wl_nan_dp_conf(0);
  return sub_100248AF0(1294, (uint64_t)v9, a2, v7, a3, a4);
}

uint64_t sub_10023F3AC(uint64_t a1)
{
  return sub_10023F3D0(a1);
}

uint64_t sub_10023F3D0(uint64_t result)
{
  uint64_t v2 = v1;
  uint64_t v30 = *(void *)(result + 16);
  if (v30)
  {
    uint64_t v29 = result + 32;
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
    while (2)
    {
      uint64_t v4 = v29 + 16 * v3;
      __int16 v5 = *(_WORD *)(v4 + 2);
      uint64_t v6 = *(void *)(v4 + 8);
      long long v39 = xmmword_1003B2440;
      uint64_t v7 = *(void *)(v6 + 16);
      if (v7)
      {
        uint64_t v32 = v3;
        swift_bridgeObjectRetain_n();
        uint64_t v8 = (unsigned char *)(v6 + 80);
        uint64_t v31 = v7;
        while (1)
        {
          uint64_t v9 = *((void *)v8 - 5);
          uint64_t v10 = *((void *)v8 - 4);
          unint64_t v11 = *((void *)v8 - 3);
          char v12 = *v8;
          uint64_t v13 = *((void *)v8 - 1);
          char v14 = *(v8 - 16);
          LOWORD(v33) = *((_WORD *)v8 - 24);
          uint64_t v34 = v9;
          v35[0] = v10;
          v35[1] = v11;
          char v36 = v14;
          uint64_t v37 = v13;
          char v38 = v12;
          sub_10006E968(v9, v10, v11);
          swift_bridgeObjectRetain();
          sub_100249B4C((uint64_t)&v39, (uint64_t)&v33);
          if (v2) {
            break;
          }
          uint64_t v2 = 0;
          sub_10006E0D8(v9, v10, v11);
          swift_bridgeObjectRelease();
          v8 += 56;
          if (!--v7)
          {
            swift_bridgeObjectRelease_n();
            unint64_t v16 = *((void *)&v39 + 1);
            uint64_t v15 = v39;
            uint64_t v7 = v31;
            uint64_t v3 = v32;
            goto LABEL_9;
          }
        }
        sub_10000C970(v39, *((unint64_t *)&v39 + 1));
        sub_10006E0D8(v9, v10, v11);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        __break(1u);
        goto LABEL_32;
      }
      swift_bridgeObjectRetain();
      uint64_t v15 = 0;
      unint64_t v16 = 0xC000000000000000;
LABEL_9:
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      char v17 = sub_10008CA90(0, 4, v5);
      if (v2)
      {
LABEL_33:
        swift_unexpectedError();
        __break(1u);
        JUMPOUT(0x10023F7F8);
      }
      BYTE4(v33) = v17 & 0xF;
      if (*(void *)(v6 + 16) > 0xFFuLL)
      {
LABEL_32:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        goto LABEL_33;
      }
      BYTE6(v34) = *(void *)(v6 + 16);
      if ((v5 & 0x20) != 0) {
        WORD1(v33) |= 8u;
      }
      if ((v5 & 0x10) != 0) {
        WORD1(v33) |= 9u;
      }
      swift_bridgeObjectRelease();
      if (!v7) {
        WORD1(v33) |= 0x2000u;
      }
      ++v3;
      uint64_t v18 = 0;
      switch(v16 >> 62)
      {
        case 1uLL:
          LODWORD(v18) = HIDWORD(v15) - v15;
          if (__OFSUB__(HIDWORD(v15), v15)) {
            goto LABEL_29;
          }
          uint64_t v18 = (int)v18;
LABEL_22:
          BOOL v21 = __OFADD__(v18, 16);
          unint64_t v22 = v18 + 16;
          if (v21)
          {
            __break(1u);
LABEL_29:
            __break(1u);
LABEL_30:
            __break(1u);
          }
          if ((v22 & 0x8000000000000000) != 0 || v22 >= 0x10000) {
            goto LABEL_32;
          }
          LOWORD(v33) = v22;
          uint64_t v23 = sub_10011A9A8((uint64_t)&v33, (uint64_t)v35);
          unint64_t v25 = v24;
          *(void *)&long long v39 = v23;
          *((void *)&v39 + 1) = v24;
          sub_100013D44(v23, v24);
          sub_100013D44(v15, v16);
          sub_100125FAC(v15, v16);
          sub_10000C970(v15, v16);
          sub_10000C970(v23, v25);
          long long v26 = v39;
          uint64_t v27 = sub_100240C34(7233902, 0xE300000000000000, 274, v39, *((unint64_t *)&v39 + 1), 1);
          sub_10000C970(v27, v28);
          sub_10000C970(v26, *((unint64_t *)&v26 + 1));
          sub_10000C970(v15, v16);
          if (v3 != v30) {
            continue;
          }
          uint64_t result = swift_bridgeObjectRelease();
          break;
        case 2uLL:
          uint64_t v20 = *(void *)(v15 + 16);
          uint64_t v19 = *(void *)(v15 + 24);
          BOOL v21 = __OFSUB__(v19, v20);
          uint64_t v18 = v19 - v20;
          if (!v21) {
            goto LABEL_22;
          }
          goto LABEL_30;
        case 3uLL:
          goto LABEL_22;
        default:
          uint64_t v18 = BYTE6(v16);
          goto LABEL_22;
      }
      break;
    }
  }
  return result;
}

uint64_t BroadcomDriver<>.update(availability:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v27 = *(void *)(result + 16);
  if (v27)
  {
    uint64_t v26 = result + 32;
    swift_bridgeObjectRetain();
    uint64_t v6 = 0;
    while (2)
    {
      uint64_t v7 = v26 + 16 * v6;
      __int16 v8 = *(_WORD *)(v7 + 2);
      uint64_t v9 = *(void *)(v7 + 8);
      long long v40 = xmmword_1003B2440;
      uint64_t v10 = *(void *)(v9 + 16);
      if (v10)
      {
        uint64_t v33 = v6;
        swift_bridgeObjectRetain_n();
        unint64_t v11 = (unsigned char *)(v9 + 80);
        uint64_t v32 = v10;
        while (1)
        {
          uint64_t v13 = *((void *)v11 - 5);
          uint64_t v12 = *((void *)v11 - 4);
          unint64_t v14 = *((void *)v11 - 3);
          char v15 = *v11;
          uint64_t v16 = *((void *)v11 - 1);
          char v17 = *(v11 - 16);
          LOWORD(v34) = *((_WORD *)v11 - 24);
          uint64_t v35 = v13;
          v36[0] = v12;
          v36[1] = v14;
          char v37 = v17;
          uint64_t v38 = v16;
          char v39 = v15;
          sub_10006E968(v13, v12, v14);
          swift_bridgeObjectRetain();
          sub_100249B4C((uint64_t)&v40, (uint64_t)&v34);
          if (v5) {
            break;
          }
          uint64_t v5 = 0;
          sub_10006E0D8(v13, v12, v14);
          swift_bridgeObjectRelease();
          v11 += 56;
          if (!--v10)
          {
            swift_bridgeObjectRelease_n();
            unint64_t v18 = *((void *)&v40 + 1);
            uint64_t v19 = v40;
            uint64_t v10 = v32;
            uint64_t v6 = v33;
            goto LABEL_9;
          }
        }
        sub_10000C970(v40, *((unint64_t *)&v40 + 1));
        sub_10006E0D8(v13, v12, v14);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        __break(1u);
        goto LABEL_32;
      }
      swift_bridgeObjectRetain();
      uint64_t v19 = 0;
      unint64_t v18 = 0xC000000000000000;
LABEL_9:
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      char v20 = sub_10008CA90(0, 4, v8);
      if (v5)
      {
LABEL_33:
        swift_unexpectedError();
        __break(1u);
        JUMPOUT(0x10023FBC8);
      }
      BYTE4(v34) = v20 & 0xF;
      if (*(void *)(v9 + 16) > 0xFFuLL)
      {
LABEL_32:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        goto LABEL_33;
      }
      BYTE6(v35) = *(void *)(v9 + 16);
      if ((v8 & 0x20) != 0) {
        WORD1(v34) |= 8u;
      }
      if ((v8 & 0x10) != 0) {
        WORD1(v34) |= 9u;
      }
      swift_bridgeObjectRelease();
      if (!v10) {
        WORD1(v34) |= 0x2000u;
      }
      ++v6;
      uint64_t v21 = 0;
      switch(v18 >> 62)
      {
        case 1uLL:
          LODWORD(v21) = HIDWORD(v19) - v19;
          if (__OFSUB__(HIDWORD(v19), v19)) {
            goto LABEL_29;
          }
          uint64_t v21 = (int)v21;
LABEL_22:
          BOOL v24 = __OFADD__(v21, 16);
          unint64_t v25 = v21 + 16;
          if (v24)
          {
            __break(1u);
LABEL_29:
            __break(1u);
LABEL_30:
            __break(1u);
          }
          if ((v25 & 0x8000000000000000) != 0 || v25 >= 0x10000) {
            goto LABEL_32;
          }
          LOWORD(v34) = v25;
          sub_10024A3E8((uint64_t)&v34, (uint64_t)v36, v31, v19, v18, a2, a3, a4, &v40);
          uint64_t v5 = 0;
          sub_10000C970(v19, v18);
          if (v6 != v27) {
            continue;
          }
          uint64_t result = swift_bridgeObjectRelease();
          break;
        case 2uLL:
          uint64_t v23 = *(void *)(v19 + 16);
          uint64_t v22 = *(void *)(v19 + 24);
          BOOL v24 = __OFSUB__(v22, v23);
          uint64_t v21 = v22 - v23;
          if (!v24) {
            goto LABEL_22;
          }
          goto LABEL_30;
        case 3uLL:
          goto LABEL_22;
        default:
          uint64_t v21 = BYTE6(v18);
          goto LABEL_22;
      }
      break;
    }
  }
  return result;
}

uint64_t sub_10023FBD8(unint64_t a1, uint64_t a2)
{
  return sub_10023FBFC(a1, a2);
}

uint64_t sub_10023FBFC(unint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100240C34(7233902, 0xE300000000000000, 277, 0, 0x4000000000000uLL, 0);
  if (!v2)
  {
    uint64_t v7 = result;
    unint64_t v8 = v6;
    int v9 = sub_1002579EC(result, v6);
    sub_10000C970(v7, v8);
    sub_10024855C(0x115u, v9 & 0xFFEFFFFF | ((a2 != 0) << 20));
    if (a2) {
      unint64_t v10 = a1;
    }
    else {
      unint64_t v10 = 100;
    }
    if (v10 >= 0x10000)
    {
LABEL_52:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x100240350);
    }
    uint64_t result = sub_1002489DC(0x10Eu, v10);
    if (a2)
    {
      int64_t v11 = *(void *)(a2 + 16);
      if (v11)
      {
        unint64_t v58 = _swiftEmptyArrayStorage;
        sub_100083858(0, v11, 0);
        uint64_t v12 = (unint64_t *)(a2 + 56);
        while (2)
        {
          char v13 = *((unsigned char *)v12 - 24);
          uint64_t v14 = *(v12 - 1);
          unint64_t v15 = *v12;
          char v57 = 0;
          __int16 v56 = 0;
          char v55 = v13;
          uint64_t v16 = v12 + 4;
          LOBYTE(v17) = 0;
          switch(v15 >> 62)
          {
            case 1uLL:
              if (__OFSUB__(HIDWORD(v14), v14))
              {
                __break(1u);
LABEL_45:
                __break(1u);
LABEL_46:
                __break(1u);
LABEL_47:
                __break(1u);
LABEL_48:
                __break(1u);
LABEL_49:
                __break(1u);
LABEL_50:
                __break(1u);
LABEL_51:
                __break(1u);
              }
              unint64_t v17 = HIDWORD(v14) - (int)v14;
LABEL_16:
              sub_100013D44(v14, v15);
              if ((v17 & 0x8000000000000000) != 0 || v17 >= 0x100) {
                goto LABEL_52;
              }
LABEL_18:
              LOBYTE(v56) = v17;
              int v62 = 271;
              uint64_t v20 = sub_10011A9A8((uint64_t)&v55, (uint64_t)&v58);
              uint64_t v63 = v20;
              unint64_t v64 = v21;
              unint64_t v54 = v21;
              unint64_t v60 = &type metadata for Data;
              uint64_t v61 = &protocol witness table for Data;
              *(void *)&long long v59 = v14;
              *((void *)&v59 + 1) = v15;
              uint64_t v22 = sub_1000369C4(&v59, (uint64_t)&type metadata for Data);
              uint64_t v24 = *v22;
              unint64_t v23 = v22[1];
              long long v52 = v16;
              int64_t v53 = v11;
              switch(v23 >> 62)
              {
                case 1uLL:
                  uint64_t v51 = v20;
                  if (v24 >> 32 < (int)v24) {
                    goto LABEL_46;
                  }
                  sub_100013D44(v14, v15);
                  sub_100013D44(v20, v54);
                  sub_100013D44(v24, v23);
                  if (__DataStorage._bytes.getter() && __OFSUB__((int)v24, __DataStorage._offset.getter())) {
                    goto LABEL_51;
                  }
                  __DataStorage._length.getter();
                  Data._Representation.append(contentsOf:)();
                  sub_10000C970(v24, v23);
                  break;
                case 2uLL:
                  uint64_t v25 = v20;
                  uint64_t v26 = *(void *)(v24 + 16);
                  uint64_t v50 = *(void *)(v24 + 24);
                  sub_100013D44(v14, v15);
                  uint64_t v51 = v25;
                  sub_100013D44(v25, v54);
                  swift_retain();
                  swift_retain();
                  if (__DataStorage._bytes.getter() && __OFSUB__(v26, __DataStorage._offset.getter())) {
                    goto LABEL_50;
                  }
                  if (__OFSUB__(v50, v26)) {
                    goto LABEL_47;
                  }
                  __DataStorage._length.getter();
                  Data._Representation.append(contentsOf:)();
                  swift_release();
                  swift_release();
                  break;
                default:
                  sub_100013D44(v14, v15);
                  unint64_t v27 = v54;
                  sub_100013D44(v20, v54);
                  Data._Representation.append(contentsOf:)();
                  goto LABEL_29;
              }
              uint64_t v20 = v51;
              unint64_t v27 = v54;
LABEL_29:
              sub_100010754((uint64_t)&v59);
              sub_10000C970(v20, v27);
              sub_10000C970(v14, v15);
              int v28 = v62;
              uint64_t v29 = v63;
              unint64_t v30 = v64;
              uint64_t v31 = v58;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                sub_100083858(0, v31[2] + 1, 1);
                uint64_t v31 = v58;
              }
              unint64_t v33 = v31[2];
              unint64_t v32 = v31[3];
              if (v33 >= v32 >> 1)
              {
                sub_100083858(v32 > 1, v33 + 1, 1);
                uint64_t v31 = v58;
              }
              v31[2] = v33 + 1;
              uint64_t v34 = &v31[3 * v33];
              *((_DWORD *)v34 + 8) = v28;
              v34[5] = v29;
              v34[6] = v30;
              uint64_t v12 = v52;
              int64_t v11 = v53 - 1;
              if (v53 != 1) {
                continue;
              }
              long long v59 = xmmword_1003B2440;
              swift_retain();
              unint64_t v35 = v33 + 1;
              char v36 = v31 + 6;
              break;
            case 2uLL:
              uint64_t v19 = *(void *)(v14 + 16);
              uint64_t v18 = *(void *)(v14 + 24);
              unint64_t v17 = v18 - v19;
              if (!__OFSUB__(v18, v19)) {
                goto LABEL_16;
              }
              goto LABEL_45;
            case 3uLL:
              goto LABEL_18;
            default:
              LOBYTE(v17) = BYTE6(v15);
              goto LABEL_18;
          }
          break;
        }
        while (1)
        {
          unsigned int v43 = *((_DWORD *)v36 - 4);
          if (v43 >= 0x10000) {
            goto LABEL_52;
          }
          uint64_t v44 = *(v36 - 1);
          unint64_t v45 = *v36;
          v36 += 3;
          switch(v45 >> 62)
          {
            case 1uLL:
              if (__OFSUB__(HIDWORD(v44), v44)) {
                goto LABEL_49;
              }
              uint64_t v39 = HIDWORD(v44) - (int)v44;
LABEL_36:
              sub_100013D44(v44, v45);
              if (v39 >= 0xFFFF)
              {
                sub_10000F000();
                swift_allocError();
                *(void *)uint64_t v49 = 0;
                *(void *)(v49 + 8) = 0;
                *(unsigned char *)(v49 + 16) = 2;
                swift_willThrow();
                sub_10000C970(v44, v45);
                swift_release_n();
                return sub_10000C970(v59, *((unint64_t *)&v59 + 1));
              }
LABEL_37:
              sub_100013D44(v44, v45);
              uint64_t v40 = sub_100247790(v43, v44, v45);
              unint64_t v42 = v41;
              sub_10000C970(v44, v45);
              Data.append(_:)();
              sub_10000C970(v40, v42);
              sub_10000C970(v44, v45);
              if (!--v35)
              {
                swift_release_n();
                long long v46 = v59;
                uint64_t v47 = sub_100240C34(7233902, 0xE300000000000000, 284, v59, *((unint64_t *)&v59 + 1), 1);
                sub_10000C970(v47, v48);
                return sub_10000C970(v46, *((unint64_t *)&v46 + 1));
              }
              break;
            case 2uLL:
              uint64_t v38 = *(void *)(v44 + 16);
              uint64_t v37 = *(void *)(v44 + 24);
              uint64_t v39 = v37 - v38;
              if (!__OFSUB__(v37, v38)) {
                goto LABEL_36;
              }
              goto LABEL_48;
            default:
              goto LABEL_37;
          }
        }
      }
    }
  }
  return result;
}

uint64_t BroadcomDriver<>.update(discoveryBeaconTransmissionSchedule:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = sub_100248C48(0x115u, (uint64_t)&type metadata for UInt32, a3, (uint64_t)&type metadata for UInt32, a4, a5);
  if (v5) {
    return result;
  }
  unsigned int v61 = v61 & 0xFFEFFFFF | ((a2 != 0) << 20);
  LODWORD(v62) = v61;
  sub_100248AF0(277, (uint64_t)&v62, a3, (uint64_t)&type metadata for UInt32, a4, a5);
  unint64_t v12 = 100;
  if (a2) {
    unint64_t v12 = a1;
  }
  if (v12 >= 0x10000)
  {
LABEL_51:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x100240AFCLL);
  }
  LOWORD(v62) = v12;
  uint64_t result = sub_100248AF0(270, (uint64_t)&v62, a3, (uint64_t)&type metadata for UInt16, a4, a5);
  if (!a2) {
    return result;
  }
  int64_t v13 = *(void *)(a2 + 16);
  if (!v13) {
    return result;
  }
  uint64_t v52 = a5;
  uint64_t v53 = a3;
  uint64_t v54 = a4;
  unint64_t v60 = _swiftEmptyArrayStorage;
  sub_100083858(0, v13, 0);
  uint64_t v14 = (unint64_t *)(a2 + 56);
  while (2)
  {
    char v15 = *((unsigned char *)v14 - 24);
    uint64_t v16 = *(v14 - 1);
    unint64_t v17 = *v14;
    char v59 = 0;
    __int16 v58 = 0;
    char v57 = v15;
    v14 += 4;
    LOBYTE(v18) = 0;
    switch(v17 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v16), v16))
        {
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
        }
        unint64_t v18 = HIDWORD(v16) - (int)v16;
LABEL_15:
        sub_100013D44(v16, v17);
        if ((v18 & 0x8000000000000000) != 0 || v18 >= 0x100) {
          goto LABEL_51;
        }
LABEL_17:
        int64_t v56 = v13;
        LOBYTE(v58) = v18;
        int v65 = 271;
        uint64_t v21 = sub_10011A9A8((uint64_t)&v57, (uint64_t)&v60);
        unint64_t v23 = v22;
        uint64_t v66 = v21;
        unint64_t v67 = v22;
        uint64_t v63 = &type metadata for Data;
        unint64_t v64 = &protocol witness table for Data;
        *(void *)&long long v62 = v16;
        *((void *)&v62 + 1) = v17;
        uint64_t v24 = sub_1000369C4(&v62, (uint64_t)&type metadata for Data);
        uint64_t v25 = *v24;
        unint64_t v26 = v24[1];
        switch(v26 >> 62)
        {
          case 1uLL:
            if (v25 >> 32 < (int)v25) {
              goto LABEL_45;
            }
            sub_100013D44(v16, v17);
            sub_100013D44(v21, v23);
            sub_100013D44(v25, v26);
            if (__DataStorage._bytes.getter() && __OFSUB__((int)v25, __DataStorage._offset.getter())) {
              goto LABEL_50;
            }
            __DataStorage._length.getter();
            Data._Representation.append(contentsOf:)();
            sub_10000C970(v25, v26);
            break;
          case 2uLL:
            uint64_t v27 = *(void *)(v25 + 16);
            uint64_t v55 = *(void *)(v25 + 24);
            sub_100013D44(v16, v17);
            sub_100013D44(v21, v23);
            swift_retain();
            swift_retain();
            if (__DataStorage._bytes.getter() && __OFSUB__(v27, __DataStorage._offset.getter())) {
              goto LABEL_49;
            }
            if (__OFSUB__(v55, v27)) {
              goto LABEL_46;
            }
            __DataStorage._length.getter();
            Data._Representation.append(contentsOf:)();
            swift_release();
            swift_release();
            break;
          default:
            sub_100013D44(v16, v17);
            sub_100013D44(v21, v23);
            Data._Representation.append(contentsOf:)();
            break;
        }
        sub_100010754((uint64_t)&v62);
        sub_10000C970(v21, v23);
        sub_10000C970(v16, v17);
        int v28 = v65;
        uint64_t v29 = v66;
        unint64_t v30 = v67;
        uint64_t v31 = v60;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100083858(0, v31[2] + 1, 1);
          uint64_t v31 = v60;
        }
        unint64_t v33 = v31[2];
        unint64_t v32 = v31[3];
        if (v33 >= v32 >> 1)
        {
          sub_100083858(v32 > 1, v33 + 1, 1);
          uint64_t v31 = v60;
        }
        v31[2] = v33 + 1;
        uint64_t v34 = &v31[3 * v33];
        *((_DWORD *)v34 + 8) = v28;
        v34[5] = v29;
        v34[6] = v30;
        int64_t v13 = v56 - 1;
        if (v56 != 1) {
          continue;
        }
        long long v62 = xmmword_1003B2440;
        swift_retain();
        unint64_t v35 = v33 + 1;
        char v36 = v31 + 6;
        break;
      case 2uLL:
        uint64_t v20 = *(void *)(v16 + 16);
        uint64_t v19 = *(void *)(v16 + 24);
        unint64_t v18 = v19 - v20;
        if (!__OFSUB__(v19, v20)) {
          goto LABEL_15;
        }
        goto LABEL_44;
      case 3uLL:
        goto LABEL_17;
      default:
        LOBYTE(v18) = BYTE6(v17);
        goto LABEL_17;
    }
    break;
  }
  while (2)
  {
    unsigned int v43 = *((_DWORD *)v36 - 4);
    if (v43 >= 0x10000) {
      goto LABEL_51;
    }
    uint64_t v44 = *(v36 - 1);
    unint64_t v45 = *v36;
    v36 += 3;
    switch(v45 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v44), v44)) {
          goto LABEL_48;
        }
        uint64_t v39 = HIDWORD(v44) - (int)v44;
LABEL_34:
        sub_100013D44(v44, v45);
        if (v39 < 0xFFFF)
        {
LABEL_35:
          sub_100013D44(v44, v45);
          uint64_t v40 = sub_100247790(v43, v44, v45);
          unint64_t v42 = v41;
          sub_10000C970(v44, v45);
          Data.append(_:)();
          sub_10000C970(v40, v42);
          sub_10000C970(v44, v45);
          if (!--v35)
          {
            swift_release_n();
            unsigned long long v46 = v62;
            uint64_t v47 = sub_10024177C(7233902, 0xE300000000000000, 284, (void *)v62, *((unint64_t *)&v62 + 1), 1, v53, v54, *(void *)(v52 + 16));
            sub_10000C970((uint64_t)v47, v48);
            unint64_t v50 = v46 >> 64;
            uint64_t v49 = v46;
            return sub_10000C970(v49, v50);
          }
          continue;
        }
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v51 = 0;
        *(void *)(v51 + 8) = 0;
        *(unsigned char *)(v51 + 16) = 2;
        swift_willThrow();
        sub_10000C970(v44, v45);
        swift_release_n();
        unint64_t v50 = *((void *)&v62 + 1);
        uint64_t v49 = v62;
        return sub_10000C970(v49, v50);
      case 2uLL:
        uint64_t v38 = *(void *)(v44 + 16);
        uint64_t v37 = *(void *)(v44 + 24);
        uint64_t v39 = v37 - v38;
        if (!__OFSUB__(v37, v38)) {
          goto LABEL_34;
        }
        goto LABEL_47;
      default:
        goto LABEL_35;
    }
  }
}

uint64_t sub_100240B2C@<X0>(uint64_t *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9 = *a1;
  swift_allocObject();
  uint64_t result = AppleBroadcomDriver.init(device:role:name:)(v9, a2, a3, a4);
  *a5 = result;
  return result;
}

uint64_t sub_100240B98()
{
  return AppleBroadcomDriver.capabilities.getter();
}

uint64_t sub_100240BBC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC7CoreP2P19AppleBroadcomDriver_logger;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_100240C34(uint64_t a1, unint64_t a2, int a3, uint64_t a4, unint64_t a5, int a6)
{
  uint64_t v8 = v7;
  uint64_t v9 = v6;
  LODWORD(v95) = a6;
  int v92 = a3;
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v91 = *(void *)(v14 - 8);
  __chkstk_darwin();
  unint64_t v94 = (char *)&v85 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init(subsystem:category:)();
  uint64_t v16 = String.count.getter();
  uint64_t v17 = v16 + 1;
  if (__OFADD__(v16, 1))
  {
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  uint64_t v93 = a1;
  uint64_t v90 = v14;
  swift_getKeyPath();
  uint64_t v18 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  char v20 = v19;
  swift_release();
  if (v20)
  {
LABEL_76:
    __break(1u);
LABEL_77:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x100241738);
  }
  uint64_t v89 = v18;
  BOOL v21 = __OFADD__(v17, v18);
  uint64_t v22 = v17 + v18;
  if (v21) {
    goto LABEL_58;
  }
  unint64_t v23 = a5 >> 62;
  uint64_t v24 = 0;
  switch(a5 >> 62)
  {
    case 1uLL:
      LODWORD(v24) = HIDWORD(a4) - a4;
      if (__OFSUB__(HIDWORD(a4), a4)) {
        goto LABEL_67;
      }
      uint64_t v24 = (int)v24;
LABEL_9:
      BOOL v21 = __OFADD__(v24, 8);
      uint64_t v27 = v24 + 8;
      if (v21) {
        goto LABEL_59;
      }
      BOOL v21 = __OFADD__(v27, 3);
      uint64_t v28 = v27 + 3;
      if (v21) {
        goto LABEL_60;
      }
      unint64_t v29 = v28 & 0xFFFFFFFFFFFFFFFCLL;
      int64_t v30 = v22 + v29;
      if (__OFADD__(v22, v29)) {
        goto LABEL_61;
      }
      uint64_t v31 = (char *)swift_slowAlloc();
      if (v30 < 0) {
        goto LABEL_62;
      }
      unint64_t v32 = v31;
      int v96 = &v31[v30];
      BOOL v97 = v31;
      if (v30)
      {
        bzero(v31, v30);
        unint64_t v32 = v97;
      }
      swift_bridgeObjectRetain();
      sub_1002320A0(v93, a2, v32);
      uint64_t v33 = (uint64_t)v97;
      char v34 = v95 & 1;
      unint64_t v35 = &v97[v17];
      *(_WORD *)unint64_t v35 = 0x8000;
      void v35[2] = 1;
      v35[3] = v34;
      uint64_t v36 = 0;
      switch((int)v23)
      {
        case 1:
          LODWORD(v36) = HIDWORD(a4) - a4;
          if (__OFSUB__(HIDWORD(a4), a4)) {
            goto LABEL_69;
          }
          uint64_t v36 = (int)v36;
LABEL_20:
          BOOL v21 = __OFADD__(v36, 4);
          unint64_t v39 = v36 + 4;
          if (v21) {
            goto LABEL_63;
          }
          if ((v39 & 0x8000000000000000) != 0 || v39 >= 0x10000) {
            goto LABEL_77;
          }
          uint64_t v40 = v33 + v22;
          *(_WORD *)uint64_t v40 = v92;
          *(_WORD *)(v40 + 2) = v39;
          *(_DWORD *)(v40 + 4) = 1;
          *(unsigned char *)(v40 + 8) = 0;
          if (__OFADD__(v22, 8)) {
            goto LABEL_64;
          }
          break;
        case 2:
          uint64_t v38 = *(void *)(a4 + 16);
          uint64_t v37 = *(void *)(a4 + 24);
          BOOL v21 = __OFSUB__(v37, v38);
          uint64_t v36 = v37 - v38;
          if (!v21) {
            goto LABEL_20;
          }
          goto LABEL_70;
        case 3:
          goto LABEL_20;
        default:
          uint64_t v36 = BYTE6(a5);
          goto LABEL_20;
      }
      break;
    case 2uLL:
      uint64_t v26 = *(void *)(a4 + 16);
      uint64_t v25 = *(void *)(a4 + 24);
      BOOL v21 = __OFSUB__(v25, v26);
      uint64_t v24 = v25 - v26;
      if (!v21) {
        goto LABEL_9;
      }
      goto LABEL_68;
    case 3uLL:
      goto LABEL_9;
    default:
      uint64_t v24 = BYTE6(a5);
      goto LABEL_9;
  }
  switch((int)v23)
  {
    case 1:
      if (!__OFSUB__(HIDWORD(a4), a4)) {
        goto LABEL_28;
      }
      goto LABEL_71;
    case 2:
      if (!__OFSUB__(*(void *)(a4 + 24), *(void *)(a4 + 16))) {
        goto LABEL_28;
      }
      goto LABEL_72;
    default:
LABEL_28:
      uint64_t v41 = v33;
      Data.copyBytes(to:count:)();
      uint64_t v42 = *(void *)(v9 + 16);
      uint64_t v43 = *(void *)(v9 + 24);
      swift_retain();
      swift_bridgeObjectRetain();
      if ((v95 & 1) == 0)
      {
        AppleDevice.getRequest(requestType:data:on:)(0xFFFFFFFFuLL, v41, (uint64_t)v96, 0, v42, v43);
        if (!v8)
        {
          uint64_t v17 = 0;
          goto LABEL_40;
        }
LABEL_32:
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRetain();
        swift_errorRetain();
        swift_bridgeObjectRetain();
        swift_errorRetain();
        uint64_t v44 = v94;
        unint64_t v45 = Logger.logObject.getter();
        os_log_type_t v46 = static os_log_type_t.error.getter();
        int v47 = v46;
        if (os_log_type_enabled(v45, v46))
        {
          uint64_t v48 = swift_slowAlloc();
          int v88 = v47;
          uint64_t v49 = v48;
          unint64_t v50 = (void *)swift_slowAlloc();
          unint64_t v87 = v50;
          uint64_t v89 = swift_slowAlloc();
          uint64_t v99 = v89;
          *(_DWORD *)uint64_t v49 = 138413314;
          swift_errorRetain();
          uint64_t v51 = _swift_stdlib_bridgeErrorToNSError();
          uint64_t v98 = v51;
          os_log_t v86 = v45;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *unint64_t v50 = v51;
          swift_errorRelease();
          swift_errorRelease();
          *(_WORD *)(v49 + 12) = 2080;
          if (v95) {
            uint64_t v52 = 7628147;
          }
          else {
            uint64_t v52 = 7628135;
          }
          uint64_t v98 = sub_100010680(v52, 0xE300000000000000, &v99);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v49 + 22) = 2080;
          swift_bridgeObjectRetain();
          uint64_t v98 = sub_100010680(v93, a2, &v99);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v49 + 32) = 512;
          LOWORD(v98) = v92;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v49 + 36) = 2080;
          uint64_t v53 = sub_10011A9A8((uint64_t)v97, (uint64_t)v96);
          unint64_t v55 = v54;
          uint64_t v56 = sub_100036314(0, 0xE000000000000000, v53, v54);
          unint64_t v58 = v57;
          unint64_t v59 = v55;
          uint64_t v44 = v94;
          sub_10000C970(v53, v59);
          uint64_t v98 = sub_100010680(v56, v58, &v99);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          os_log_t v60 = v86;
          _os_log_impl((void *)&_mh_execute_header, v86, (os_log_type_t)v88, "Error %@ while sending %s %s: %hu %s", (uint8_t *)v49, 0x2Eu);
          sub_100010BCC(&qword_10047CC30);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_errorRelease();
          swift_errorRelease();
          swift_bridgeObjectRelease_n();
        }
        uint64_t v61 = v90;
        goto LABEL_47;
      }
      AppleDevice.setRequest(requestType:data:on:)(0xFFFFFFFFuLL, v41, (uint64_t)v96, 0, v42, v43);
      if (v8) {
        goto LABEL_32;
      }
LABEL_40:
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v62 = v17 + v89;
      if (__OFADD__(v17, v89))
      {
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
        goto LABEL_74;
      }
      uint64_t v63 = v62 + 8;
      if (__OFADD__(v62, 8)) {
        goto LABEL_66;
      }
      unint64_t v64 = &v97[v62];
      uint64_t v65 = *((unsigned int *)v64 + 1);
      if (v65)
      {
        uint64_t v44 = v94;
        uint64_t v66 = Logger.logObject.getter();
        os_log_type_t v67 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v66, v67))
        {
          uint64_t v68 = swift_slowAlloc();
          uint64_t v99 = swift_slowAlloc();
          *(_DWORD *)uint64_t v68 = 67109378;
          LODWORD(v98) = v65;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v68 + 8) = 2080;
          uint64_t v95 = v68 + 10;
          uint64_t v69 = sub_10011A9A8((uint64_t)v97, (uint64_t)v96);
          unint64_t v71 = v70;
          uint64_t v72 = sub_100036314(0, 0xE000000000000000, v69, v70);
          unint64_t v74 = v73;
          uint64_t v75 = v69;
          uint64_t v44 = v94;
          sub_10000C970(v75, v71);
          uint64_t v98 = sub_100010680(v72, v74, &v99);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v66, v67, "Error returned in command status: %u %s", (uint8_t *)v68, 0x12u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }

        uint64_t v61 = v90;
        if ((v65 & 0x80000000) == 0)
        {
          sub_10000F000();
          swift_allocError();
          *(void *)uint64_t v76 = v65;
          *(void *)(v76 + 8) = 0;
          *(unsigned char *)(v76 + 16) = 0;
LABEL_47:
          swift_willThrow();
          goto LABEL_48;
        }
        goto LABEL_73;
      }
      uint64_t v78 = *((unsigned __int16 *)v64 + 1);
      uint64_t v79 = v63 + v78;
      uint64_t v44 = v94;
      if (__OFADD__(v63, v78))
      {
LABEL_74:
        __break(1u);
        goto LABEL_75;
      }
      BOOL v21 = __OFSUB__(v79, 4);
      int64_t v80 = v79 - 4;
      if (v21)
      {
LABEL_75:
        __break(1u);
        goto LABEL_76;
      }
      if (v30 >= v80)
      {
        uint64_t v61 = sub_100260F60(&v97[v63], v78);
        swift_slowDealloc();
        (*(void (**)(char *, uint64_t))(v91 + 8))(v44, v90);
        return v61;
      }
      uint64_t v81 = Logger.logObject.getter();
      os_log_type_t v82 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v81, v82))
      {
        unint64_t v83 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)unint64_t v83 = 67109120;
        LODWORD(v99) = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v81, v82, "Error while parsing returned command: %u", v83, 8u);
        swift_slowDealloc();
      }

      sub_10000F000();
      swift_allocError();
      *(void *)uint64_t v84 = 0;
      *(void *)(v84 + 8) = 0;
      *(unsigned char *)(v84 + 16) = 2;
      swift_willThrow();
      uint64_t v61 = v90;
LABEL_48:
      swift_slowDealloc();
      (*(void (**)(char *, uint64_t))(v91 + 8))(v44, v61);
      return v61;
  }
}

NSObject *sub_10024177C(uint64_t a1, unint64_t a2, int a3, void *a4, unint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v101 = a6;
  unint64_t v105 = a5;
  __int16 v100 = a4;
  int v99 = a3;
  uint64_t v102 = a1;
  uint64_t v96 = a8;
  uint64_t v94 = *(void *)(a8 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v97 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v89 - v13;
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v92 = *(void *)(v15 - 8);
  __chkstk_darwin();
  uint64_t v106 = (char *)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void (**)(uint64_t, uint64_t))(a9 + 32);
  uint64_t v95 = v9;
  v17(a7, a9);
  Logger.init(subsystem:category:)();
  uint64_t v18 = String.count.getter();
  uint64_t v103 = v18 + 1;
  if (__OFADD__(v18, 1))
  {
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  uint64_t v98 = v10;
  swift_getKeyPath();
  uint64_t v19 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  char v21 = v20;
  swift_release();
  if (v21)
  {
LABEL_73:
    __break(1u);
LABEL_74:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x1002423D0);
  }
  uint64_t v22 = v103 + v19;
  if (__OFADD__(v103, v19)) {
    goto LABEL_55;
  }
  unint64_t v23 = v105 >> 62;
  uint64_t v24 = 0;
  switch(v105 >> 62)
  {
    case 1uLL:
      LODWORD(v24) = HIDWORD(v100) - v100;
      if (__OFSUB__(HIDWORD(v100), v100)) {
        goto LABEL_64;
      }
      uint64_t v24 = (int)v24;
LABEL_9:
      BOOL v27 = __OFADD__(v24, 8);
      uint64_t v28 = v24 + 8;
      if (v27) {
        goto LABEL_56;
      }
      BOOL v27 = __OFADD__(v28, 3);
      uint64_t v29 = v28 + 3;
      if (v27) {
        goto LABEL_57;
      }
      uint64_t v91 = v15;
      unint64_t v30 = v29 & 0xFFFFFFFFFFFFFFFCLL;
      int64_t v31 = v22 + v30;
      if (__OFADD__(v22, v30)) {
        goto LABEL_58;
      }
      uint64_t v90 = v19;
      unint64_t v32 = (unsigned char *)swift_slowAlloc();
      if (v31 < 0) {
        goto LABEL_59;
      }
      uint64_t v33 = (uint64_t)v32;
      unint64_t v104 = &v32[v31];
      uint64_t v107 = v32;
      if (v31)
      {
        bzero(v32, v31);
        uint64_t v33 = (uint64_t)v107;
      }
      swift_bridgeObjectRetain();
      char v34 = (char *)v33;
      uint64_t v35 = v98;
      sub_1002320A0(v102, a2, v34);
      uint64_t v36 = (uint64_t)v107;
      char v37 = v101 & 1;
      uint64_t v38 = &v107[v103];
      *(_WORD *)uint64_t v38 = 0x8000;
      v38[2] = 1;
      v38[3] = v37;
      uint64_t v39 = 0;
      uint64_t v40 = v100;
      switch((int)v23)
      {
        case 1:
          LODWORD(v39) = HIDWORD(v100) - v100;
          if (__OFSUB__(HIDWORD(v100), v100)) {
            goto LABEL_66;
          }
          uint64_t v39 = (int)v39;
LABEL_20:
          BOOL v27 = __OFADD__(v39, 4);
          unint64_t v43 = v39 + 4;
          if (v27) {
            goto LABEL_60;
          }
          if ((v43 & 0x8000000000000000) != 0 || v43 >= 0x10000) {
            goto LABEL_74;
          }
          uint64_t v44 = v36 + v22;
          *(_WORD *)uint64_t v44 = v99;
          *(_WORD *)(v44 + 2) = v43;
          *(_DWORD *)(v44 + 4) = 1;
          *(unsigned char *)(v44 + 8) = 0;
          if (__OFADD__(v22, 8)) {
            goto LABEL_61;
          }
          break;
        case 2:
          uint64_t v42 = v100[2];
          uint64_t v41 = v100[3];
          BOOL v27 = __OFSUB__(v41, v42);
          uint64_t v39 = v41 - v42;
          if (!v27) {
            goto LABEL_20;
          }
          goto LABEL_67;
        case 3:
          goto LABEL_20;
        default:
          uint64_t v39 = BYTE6(v105);
          goto LABEL_20;
      }
      break;
    case 2uLL:
      uint64_t v26 = v100[2];
      uint64_t v25 = v100[3];
      BOOL v27 = __OFSUB__(v25, v26);
      uint64_t v24 = v25 - v26;
      if (!v27) {
        goto LABEL_9;
      }
      goto LABEL_65;
    case 3uLL:
      goto LABEL_9;
    default:
      uint64_t v24 = BYTE6(v105);
      goto LABEL_9;
  }
  switch((int)v23)
  {
    case 1:
      if (!__OFSUB__(HIDWORD(v40), v40)) {
        goto LABEL_28;
      }
      goto LABEL_68;
    case 2:
      if (!__OFSUB__(v40[3], v40[2])) {
        goto LABEL_28;
      }
      goto LABEL_69;
    default:
LABEL_28:
      uint64_t v45 = v36;
      Data.copyBytes(to:count:)();
      (*(void (**)(uint64_t))(v94 + 56))(a7);
      uint64_t v46 = (*(uint64_t (**)(uint64_t, uint64_t))(a9 + 40))(a7, a9);
      uint64_t v48 = v47;
      uint64_t v49 = AssociatedTypeWitness;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      char v51 = v101;
      (*(void (**)(uint64_t, unsigned char *, void, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness
                                                                                           + 16))(v45, v104, v101 & 1, v46, v48, v49, AssociatedConformanceWitness);
      if (v35)
      {
        (*(void (**)(char *, uint64_t))(v97 + 8))(v14, v49);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        swift_errorRetain();
        swift_bridgeObjectRetain();
        swift_errorRetain();
        uint64_t v52 = Logger.logObject.getter();
        os_log_type_t v53 = static os_log_type_t.error.getter();
        int v54 = v53;
        if (os_log_type_enabled(v52, v53))
        {
          uint64_t v55 = swift_slowAlloc();
          LODWORD(v103) = v54;
          uint64_t v56 = v55;
          unint64_t v57 = (void *)swift_slowAlloc();
          __int16 v100 = v57;
          unint64_t v105 = swift_slowAlloc();
          unint64_t v109 = v105;
          *(_DWORD *)uint64_t v56 = 138413314;
          swift_errorRetain();
          uint64_t v58 = _swift_stdlib_bridgeErrorToNSError();
          uint64_t v108 = v58;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *unint64_t v57 = v58;
          swift_errorRelease();
          swift_errorRelease();
          *(_WORD *)(v56 + 12) = 2080;
          if (v51) {
            uint64_t v59 = 7628147;
          }
          else {
            uint64_t v59 = 7628135;
          }
          uint64_t v108 = sub_100010680(v59, 0xE300000000000000, (uint64_t *)&v109);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v56 + 22) = 2080;
          swift_bridgeObjectRetain();
          uint64_t v108 = sub_100010680(v102, a2, (uint64_t *)&v109);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v56 + 32) = 512;
          LOWORD(v108) = v99;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v56 + 36) = 2080;
          uint64_t v60 = sub_10011A9A8((uint64_t)v107, (uint64_t)v104);
          unint64_t v62 = v61;
          uint64_t v63 = sub_100036314(0, 0xE000000000000000, v60, v61);
          unint64_t v65 = v64;
          sub_10000C970(v60, v62);
          uint64_t v108 = sub_100010680(v63, v65, (uint64_t *)&v109);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v52, (os_log_type_t)v103, "Error %@ while sending %s %s: %hu %s", (uint8_t *)v56, 0x2Eu);
          sub_100010BCC(&qword_10047CC30);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_errorRelease();
          swift_errorRelease();
          swift_bridgeObjectRelease_n();
        }
        uint64_t v79 = v91;
        goto LABEL_45;
      }
      (*(void (**)(char *, uint64_t))(v97 + 8))(v14, v49);
      swift_bridgeObjectRelease();
      uint64_t v66 = v103;
      if ((v51 & 1) == 0) {
        uint64_t v66 = 0;
      }
      uint64_t v67 = v66 + v90;
      if (__OFADD__(v66, v90)) {
        goto LABEL_62;
      }
      uint64_t v68 = v67 + 8;
      if (__OFADD__(v67, 8)) {
        goto LABEL_63;
      }
      uint64_t v69 = &v107[v67];
      uint64_t v70 = *((unsigned int *)v69 + 1);
      if (v70)
      {
        uint64_t v52 = Logger.logObject.getter();
        os_log_type_t v71 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v52, v71))
        {
          uint64_t v72 = swift_slowAlloc();
          unint64_t v109 = swift_slowAlloc();
          *(_DWORD *)uint64_t v72 = 67109378;
          LODWORD(v108) = v70;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v72 + 8) = 2080;
          unint64_t v105 = v72 + 10;
          uint64_t v73 = sub_10011A9A8((uint64_t)v107, (uint64_t)v104);
          unint64_t v75 = v74;
          uint64_t v76 = sub_100036314(0, 0xE000000000000000, v73, v74);
          unint64_t v78 = v77;
          sub_10000C970(v73, v75);
          uint64_t v108 = sub_100010680(v76, v78, (uint64_t *)&v109);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v52, v71, "Error returned in command status: %u %s", (uint8_t *)v72, 0x12u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }

        uint64_t v79 = v91;
        if ((v70 & 0x80000000) == 0)
        {
          sub_10000F000();
          swift_allocError();
          *(void *)uint64_t v80 = v70;
          *(void *)(v80 + 8) = 0;
          *(unsigned char *)(v80 + 16) = 0;
          goto LABEL_45;
        }
        goto LABEL_70;
      }
      uint64_t v82 = *((unsigned __int16 *)v69 + 1);
      uint64_t v83 = v68 + v82;
      if (__OFADD__(v68, v82))
      {
LABEL_71:
        __break(1u);
        goto LABEL_72;
      }
      BOOL v27 = __OFSUB__(v83, 4);
      int64_t v84 = v83 - 4;
      if (v27)
      {
LABEL_72:
        __break(1u);
        goto LABEL_73;
      }
      if (v31 >= v84)
      {
        uint64_t v52 = sub_100260F60(&v107[v68], v82);
        swift_slowDealloc();
        (*(void (**)(char *, uint64_t))(v92 + 8))(v106, v91);
        return v52;
      }
      uint64_t v52 = Logger.logObject.getter();
      os_log_type_t v85 = static os_log_type_t.error.getter();
      BOOL v86 = os_log_type_enabled(v52, v85);
      uint64_t v79 = v91;
      if (v86)
      {
        unint64_t v87 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)unint64_t v87 = 67109120;
        LODWORD(v109) = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v52, v85, "Error while parsing returned command: %u", v87, 8u);
        swift_slowDealloc();
      }

      sub_10000F000();
      swift_allocError();
      *(void *)uint64_t v88 = 0;
      *(void *)(v88 + 8) = 0;
      *(unsigned char *)(v88 + 16) = 2;
LABEL_45:
      swift_willThrow();
      swift_slowDealloc();
      (*(void (**)(char *, uint64_t))(v92 + 8))(v106, v79);
      return v52;
  }
}

uint64_t sub_100242414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  type metadata accessor for String.Encoding();
  __chkstk_darwin();
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(a3 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.getRequest(requestType:data:on:)(0xFFFFFFFFuLL, a1, a2, 0, v8, v9);
  if (v4)
  {
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  if (!a1) {
    goto LABEL_11;
  }
  uint64_t v11 = a2 - a1 - 1;
  if (__OFSUB__(a2 - a1, 1))
  {
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }
  if (v11 < 0 || v11 >= a2 - a1) {
    goto LABEL_11;
  }
  UnsafeMutableRawBufferPointer.subscript.setter();
  swift_bridgeObjectRelease();
  static String.Encoding.utf8.getter();
  uint64_t result = String.init(cString:encoding:)();
  if (!v12) {
    return 0;
  }
  return result;
}

uint64_t sub_10024259C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v29 = a6;
  uint64_t v30 = a4;
  type metadata accessor for String.Encoding();
  __chkstk_darwin();
  v28[1] = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a4 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v16 = (char *)v28 - v15;
  long long v31 = xmmword_1003D3120;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  (*(void (**)(uint64_t, uint64_t))(v12 + 56))(a3, v12);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 40))(a3, a5);
  uint64_t v19 = v18;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v21 = v32;
  (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness
                                                                                       + 16))(a1, a2, 0, v17, v19, AssociatedTypeWitness, AssociatedConformanceWitness);
  if (v21)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
    return swift_bridgeObjectRelease();
  }
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v23 = v29;
  if (!a1) {
    goto LABEL_15;
  }
  uint64_t v24 = a2 - a1 - 1;
  if (__OFSUB__(a2 - a1, 1))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    return result;
  }
  if (v24 < 0 || v24 >= a2 - a1) {
    goto LABEL_15;
  }
  UnsafeMutableRawBufferPointer.subscript.setter();
  swift_bridgeObjectRelease();
  static String.Encoding.utf8.getter();
  uint64_t result = String.init(cString:encoding:)();
  if (v25) {
    uint64_t v26 = result;
  }
  else {
    uint64_t v26 = 0;
  }
  unint64_t v27 = 0xE000000000000000;
  if (v25) {
    unint64_t v27 = v25;
  }
  *unint64_t v23 = v26;
  v23[1] = v27;
  return result;
}

uint64_t sub_100242858(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v6 = *a1 == 0x7478655F747665 && a1[1] == 0xE700000000000000;
  if (!v6 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 1;
  }
  uint64_t v7 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(a4 + 40))(v10, a3, a4);
  *v8 |= 1uLL;
  v7(v10, 0);
  return 0;
}

uint64_t sub_100242938@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10024C754(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

void *static BroadcomDriver.parse(event:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v220 = v9;
  uint64_t v221 = v10;
  __chkstk_darwin();
  v222 = (char *)&v211 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init(subsystem:category:)();
  sub_100013D44(a1, a2);
  unint64_t v12 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for BinaryDecoder();
  uint64_t v13 = (void *)swift_allocObject();
  v13[5] = &_swiftEmptyDictionarySingleton;
  v13[2] = a1;
  v13[3] = a2;
  v218.i64[0] = a2;
  uint64_t v14 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v14 = (int)a1;
      break;
    case 2uLL:
      uint64_t v14 = *(void *)(a1 + 16);
      break;
    default:
      break;
  }
  v219.i64[0] = a1;
  v13[4] = v14;
  swift_beginAccess();
  v13[5] = v12;
  swift_bridgeObjectRelease();
  uint64_t v15 = (void *)swift_allocObject();
  void v15[5] = &type metadata for BinaryDecoder.UnkeyedContainer;
  v15[6] = sub_10008B64C();
  _OWORD v15[2] = v13;
  sub_100039448((uint64_t)(v15 + 2), (uint64_t)&type metadata for BinaryDecoder.UnkeyedContainer);
  sub_10024D434();
  swift_retain();
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  if ((LODWORD(v225[0]) - 100) <= 0x3B && ((1 << (LOBYTE(v225[0]) - 100)) & 0xC00000000000001) != 0)
  {
    switch(DWORD1(v225[0]))
    {
      case 5:
        LOBYTE(v225[0]) = 0;
        uint64_t v27 = sub_100247130(778, v13, (uint64_t)v15);
        uint64_t v111 = v110;
        v217.i64[0] = v27 & 0xFF00000000;
        uint64_t KeyPath = (char *)swift_getKeyPath();
        uint64_t v113 = swift_getKeyPath();
        unint64_t v114 = sub_1000E4A78();
        uint64_t v115 = sub_100246424((uint64_t)v225, 778, KeyPath, v113, (uint64_t)v15, a3, a4, v114);
        swift_release();
        swift_release();
        uint64_t v116 = type metadata accessor for DriverEvent(0);
        uint64_t v118 = v116;
        if (v217.i64[0] == 0x300000000) {
          uint64_t v111 = 0;
        }
        v117.i64[0] = *(void *)&v225[0];
        int16x8_t v219 = v117;
        sub_100010BCC(&qword_10047DC60);
        unint64_t v119 = (*(unsigned __int8 *)(*(void *)(v118 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v118 - 8) + 80);
        uint64_t v25 = swift_allocObject();
        *(_OWORD *)(v25 + 16) = xmmword_1003B2450;
        uint64_t v130 = v25 + v119;
        v120.i64[0] = v219.i64[0];
        v120.i64[1] = v219.i64[0];
        *(int8x8_t *)&v225[0] = vqtbl1_s8(v120, (int8x8_t)0x706050403020001);
        *((void *)&v225[0] + 1) = v111;
        *(void *)&v225[1] = v115;
        sub_10006ED24((uint64_t)v225);
        goto LABEL_56;
      case 6:
        LOBYTE(v225[0]) = 0;
        uint64_t v28 = sub_100247130(776, v13, (uint64_t)v15);
        uint64_t v122 = v121;
        v217.i64[0] = v28 & 0xFF00000000;
        unint64_t v123 = (char *)swift_getKeyPath();
        uint64_t v124 = swift_getKeyPath();
        unint64_t v125 = sub_1000E4A78();
        uint64_t v149 = sub_100246424((uint64_t)v225, 776, v123, v124, (uint64_t)v15, a3, a4, v125);
        swift_release();
        swift_release();
        uint64_t v150 = type metadata accessor for DriverEvent(0);
        if (v217.i64[0] == 0x300000000) {
          uint64_t v122 = 0;
        }
        int8x8_t v151 = *(int8x8_t *)&v225[0];
        sub_100010BCC(&qword_10047DC60);
        unint64_t v152 = (*(unsigned __int8 *)(*(void *)(v150 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v150 - 8) + 80);
        uint64_t v25 = swift_allocObject();
        *(_OWORD *)(v25 + 16) = xmmword_1003B2450;
        uint64_t v130 = v25 + v152;
        *(int8x8_t *)&v225[0] = vext_s8(v151, v151, 6uLL);
        *((void *)&v225[0] + 1) = v122;
        *(void *)&v225[1] = v149;
        sub_10006ED18((uint64_t)v225);
        goto LABEL_56;
      case 7:
        type metadata accessor for wl_nan_ev_terminated(0);
        sub_100244D18(775, v29, (uint64_t)v15, a3, v29);
        char v30 = BYTE2(v225[0]);
        if ((BYTE1(v225[0]) - 1) > 3u) {
          uint64_t v31 = 3;
        }
        else {
          uint64_t v31 = qword_1003D36A8[(char)(BYTE1(v225[0]) - 1)];
        }
        char v153 = v225[0];
        if (BYTE2(v225[0]) == 1)
        {
          sub_100010BCC(&qword_10047DC60);
          uint64_t v173 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
          unint64_t v174 = (*(unsigned __int8 *)(v173 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v173 + 80);
          uint64_t v25 = swift_allocObject();
          *(_OWORD *)(v25 + 16) = xmmword_1003B2450;
          uint64_t v39 = v25 + v174;
          LOBYTE(v225[0]) = v153;
          *((void *)&v225[0] + 1) = v31;
          sub_10006EC44((uint64_t)v225);
          goto LABEL_80;
        }
        if (!BYTE2(v225[0]))
        {
          sub_100010BCC(&qword_10047DC60);
          uint64_t v154 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
          unint64_t v155 = (*(unsigned __int8 *)(v154 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v154 + 80);
          uint64_t v25 = swift_allocObject();
          *(_OWORD *)(v25 + 16) = xmmword_1003B2450;
          uint64_t v39 = v25 + v155;
          LOBYTE(v225[0]) = v153;
          *((void *)&v225[0] + 1) = v31;
          sub_10006EC38((uint64_t)v225);
LABEL_80:
          sub_10006E544((uint64_t)v225, v39);
          goto LABEL_81;
        }
        uint64_t v175 = Logger.logObject.getter();
        os_log_type_t v176 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v175, v176))
        {
          uint64_t v177 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v177 = 16777472;
          LOBYTE(v225[0]) = v30;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v175, v176, "Failed to convert %hhu into service type", v177, 5u);
          swift_slowDealloc();
        }

        sub_10000F000();
        swift_allocError();
        *(_OWORD *)uint64_t v178 = xmmword_1003B00B0;
        *(unsigned char *)(v178 + 16) = 2;
        swift_willThrow();
        swift_release();
        swift_release();
        unint64_t v16 = v218.i64[0];
        uint64_t v17 = v219.i64[0];
LABEL_5:
        sub_100013D44(v17, v16);
        swift_errorRetain();
        sub_100013D44(v17, v16);
        swift_errorRetain();
        uint64_t v18 = Logger.logObject.getter();
        os_log_type_t v19 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v18, v19))
        {
          uint64_t v20 = swift_slowAlloc();
          v218.i64[0] = swift_slowAlloc();
          v219.i64[0] = swift_slowAlloc();
          *(void *)&v225[0] = v219.i64[0];
          *(_DWORD *)uint64_t v20 = 136315394;
          sub_100013D44(v17, v16);
          uint64_t v21 = sub_100036314(0, 0xE000000000000000, v17, v16);
          unint64_t v23 = v22;
          sub_10000C970(v17, v16);
          *(void *)&v223[0] = sub_100010680(v21, v23, (uint64_t *)v225);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10000C970(v17, v16);
          sub_10000C970(v17, v16);
          *(_WORD *)(v20 + 12) = 2112;
          swift_errorRetain();
          uint64_t v24 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)&v223[0] = v24;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(void *)v218.i64[0] = v24;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v18, v19, "Failed to parse event %s: %@", (uint8_t *)v20, 0x16u);
          sub_100010BCC(&qword_10047CC30);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          sub_10000C970(v17, v16);
          sub_10000C970(v17, v16);
          swift_errorRelease();
          swift_errorRelease();
        }
        swift_errorRelease();
        (*(void (**)(char *, uint64_t))(v221 + 8))(v222, v220);
        return _swiftEmptyArrayStorage;
      case 8:
        LOBYTE(v225[0]) = 0;
        sub_100247130(777, v13, (uint64_t)v15);
        uint64_t v32 = (char *)swift_getKeyPath();
        uint64_t v33 = swift_getKeyPath();
        unint64_t v34 = sub_1000E4A78();
        uint64_t v126 = sub_100246424((uint64_t)v223, 777, v32, v33, (uint64_t)v15, a3, a4, v34);
        swift_release();
        swift_release();
        uint64_t v127 = SBYTE8(v223[0]);
        sub_100010BCC(&qword_10047DC60);
        uint64_t v128 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
        unint64_t v129 = (*(unsigned __int8 *)(v128 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v128 + 80);
        uint64_t v25 = swift_allocObject();
        *(_OWORD *)(v25 + 16) = xmmword_1003B2450;
        uint64_t v130 = v25 + v129;
        *(int8x8_t *)&v225[0] = vext_s8(*(int8x8_t *)&v223[0], *(int8x8_t *)&v223[0], 6uLL);
        *((void *)&v225[0] + 1) = v127;
        *(void *)&v225[1] = v126;
        sub_10006EC2C((uint64_t)v225);
LABEL_56:
        sub_10006E544((uint64_t)v225, v130);
        goto LABEL_81;
      case 0xA:
        type metadata accessor for wl_nan_conf_status(0);
        sub_100244D18(261, v35, (uint64_t)v15, a3, v35);
        __int16 v36 = WORD6(v223[0]);
        sub_100010BCC(&qword_10047DC60);
        uint64_t v37 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
        unint64_t v38 = (*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
        uint64_t v25 = swift_allocObject();
        *(_OWORD *)(v25 + 16) = xmmword_1003B2450;
        uint64_t v39 = v25 + v38;
        LODWORD(v225[0]) = DWORD2(v223[0]);
        WORD2(v225[0]) = v36;
        sub_10006ED3C((uint64_t)v225);
        goto LABEL_80;
      case 0x14:
        uint64_t v40 = v219.i64[0];
        unint64_t v41 = v218.i64[0];
        sub_100013D44(v219.i64[0], v218.u64[0]);
        sub_100013D44(v40, v41);
        uint64_t v42 = Logger.logObject.getter();
        os_log_type_t v43 = static os_log_type_t.default.getter();
        __int32 v44 = v43;
        if (os_log_type_enabled(v42, v43))
        {
          v217.i64[0] = (uint64_t)v42;
          uint64_t v45 = (uint8_t *)swift_slowAlloc();
          v216.i64[0] = swift_slowAlloc();
          *(void *)&v225[0] = v216.i64[0];
          v215.i32[0] = v44;
          *(_DWORD *)uint64_t v45 = 136315138;
          v213 = v45 + 4;
          v214 = v45;
          sub_100013D44(v40, v41);
          uint64_t v212 = sub_100036314(0, 0xE000000000000000, v40, v41);
          unint64_t v47 = v46;
          sub_10000C970(v40, v41);
          *(void *)&v223[0] = sub_100010680(v212, v47, (uint64_t *)v225);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10000C970(v40, v41);
          sub_10000C970(v40, v41);
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v217.i64[0], (os_log_type_t)v215.i8[0], "Got DP Indication: %s", v214, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          sub_10000C970(v40, v41);
          sub_10000C970(v40, v41);
        }
        sub_100246E30((uint64_t)v15, a3, a4, (uint64_t)v225);
        char v141 = BYTE1(v225[0]);
        char v142 = BYTE2(v225[0]);
        int32x2_t v143 = *(int32x2_t *)((char *)v225 + 4);
        v219.i32[0] = BYTE8(v225[0]);
        v218.i32[0] = BYTE9(v225[0]);
        char v144 = v225[1];
        char v145 = BYTE1(v225[1]);
        int32x2_t v146 = *(int32x2_t *)((char *)&v225[1] + 2);
        v217.i64[0] = *((void *)&v225[2] + 1);
        sub_100010BCC(&qword_10047DC60);
        uint64_t v147 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
        unint64_t v148 = (*(unsigned __int8 *)(v147 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v147 + 80);
        uint64_t v25 = swift_allocObject();
        *(_OWORD *)(v25 + 16) = xmmword_1003B2450;
        uint64_t v39 = v25 + v148;
        LOBYTE(v225[0]) = v141;
        BYTE1(v225[0]) = v142;
        BYTE2(v225[0]) = v144;
        BYTE3(v225[0]) = v145;
        *(int32x2_t *)((char *)v225 + 4) = vzip1_s32(v146, v143);
        BYTE12(v225[0]) = v219.i8[0];
        BYTE13(v225[0]) = v218.i8[0];
        *(void *)&v225[1] = v217.i64[0];
        sub_10006ED0C((uint64_t)v225);
        goto LABEL_80;
      case 0x15:
        type metadata accessor for wl_nan_ev_datapath_cmn(0);
        sub_100244D18(1282, v48, (uint64_t)v15, a3, v48);
        int v49 = LOBYTE(v225[0]);
        v217.i32[0] = BYTE1(v225[0]);
        v218.i32[0] = WORD4(v225[0]);
        v219.i32[0] = HIWORD(v225[0]);
        uint64_t v50 = type metadata accessor for DriverEvent(0);
        BOOL v51 = v49 == 1;
        int v52 = DWORD1(v225[0]);
        int v53 = *(_DWORD *)((char *)v225 + 10);
        sub_100010BCC(&qword_10047DC60);
        unint64_t v54 = (*(unsigned __int8 *)(*(void *)(v50 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v50 - 8) + 80);
        uint64_t v25 = swift_allocObject();
        *(_OWORD *)(v25 + 16) = xmmword_1003B2450;
        uint64_t v39 = v25 + v54;
        LOBYTE(v225[0]) = v217.i8[0];
        *(_DWORD *)((char *)v225 + 1) = v52;
        *(_WORD *)((char *)v225 + 5) = v218.i16[0];
        BYTE7(v225[0]) = v51;
        DWORD2(v225[0]) = v53;
        WORD6(v225[0]) = v219.i16[0];
        sub_10006ECE8((uint64_t)v225);
        goto LABEL_80;
      case 0x17:
        type metadata accessor for wl_nan_ev_datapath_cmn(0);
        sub_100244D18(1282, v55, (uint64_t)v15, a3, v55);
        int v56 = LOBYTE(v225[0]);
        char v57 = BYTE1(v225[0]);
        __int16 v58 = WORD4(v225[0]);
        uint64_t v59 = type metadata accessor for DriverEvent(0);
        BOOL v60 = v56 == 1;
        int v61 = DWORD1(v225[0]);
        sub_100010BCC(&qword_10047DC60);
        unint64_t v62 = (*(unsigned __int8 *)(*(void *)(v59 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v59 - 8) + 80);
        uint64_t v25 = swift_allocObject();
        *(_OWORD *)(v25 + 16) = xmmword_1003B2450;
        uint64_t v39 = v25 + v62;
        LOBYTE(v225[0]) = v57;
        *(_DWORD *)((char *)v225 + 1) = v61;
        *(_WORD *)((char *)v225 + 5) = v58;
        BYTE7(v225[0]) = v60;
        uint64_t v63 = 2;
        goto LABEL_32;
      case 0x18:
        LOBYTE(v225[0]) = 1;
        uint64_t v64 = sub_100247130(0x100000000, v13, (uint64_t)v15);
        v215.i64[0] = v65;
        v216.i64[0] = v64;
        v217.i64[0] = v66;
        uint64_t v67 = (char *)swift_getKeyPath();
        uint64_t v68 = swift_getKeyPath();
        unint64_t v69 = sub_1000E4A78();
        sub_1002462AC((uint64_t)&v234, (char *)v223, 1025, v67, v68, (void (*)(void))sub_1002474B8, 0, (uint64_t)v15, a3, (uint64_t)&type metadata for IEEE80211Frame, a4, v69);
        __int32 v161 = v216.i32[0];
        v219.i64[0] = (unint64_t)v216.i64[0] >> 40;
        unint64_t v162 = HIDWORD(v216.i64[0]);
        swift_release();
        swift_release();
        uint64_t v163 = v234;
        sub_100010BCC(&qword_10047DC60);
        uint64_t v164 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
        unint64_t v165 = (*(unsigned __int8 *)(v164 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v164 + 80);
        uint64_t v25 = swift_allocObject();
        *(_OWORD *)(v25 + 16) = xmmword_1003B2450;
        uint64_t v39 = v25 + v165;
        v225[8] = v223[8];
        v225[9] = v223[9];
        v226[0] = v224[0];
        *(_OWORD *)((char *)v226 + 9) = *(_OWORD *)((char *)v224 + 9);
        v225[4] = v223[4];
        v225[5] = v223[5];
        v225[6] = v223[6];
        v225[7] = v223[7];
        v225[0] = v223[0];
        v225[1] = v223[1];
        v225[2] = v223[2];
        v225[3] = v223[3];
        uint64_t v227 = v215.i64[0];
        __int32 v228 = v161;
        char v229 = v162;
        __int8 v230 = v219.i8[0];
        uint64_t v231 = v217.i64[0];
        uint64_t v232 = v163;
        sub_10006EAE4((uint64_t)v225);
        goto LABEL_80;
      case 0x19:
        sub_100246E30((uint64_t)v15, a3, a4, (uint64_t)v225);
        int16x8_t v216 = *(int16x8_t *)((char *)v225 + 4);
        int16x8_t v217 = *(int16x8_t *)((char *)v225 + 1);
        int32x4_t v215 = *(int32x4_t *)((char *)v225 + 6);
        int16x8_t v219 = *(int16x8_t *)((char *)v225 + 10);
        int16x8_t v218 = (int16x8_t)vmovl_u8((uint8x8_t)__PAIR64__(*(unsigned int *)((char *)v225 + 14), *(unsigned int *)((char *)&v225[1] + 2)));
        uint64_t v70 = *((void *)&v225[2] + 1);
        sub_100010BCC(&qword_10047DC60);
        uint64_t v71 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
        unint64_t v72 = (*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
        uint64_t v25 = swift_allocObject();
        *(_OWORD *)(v25 + 16) = xmmword_1003B2450;
        uint64_t v39 = v25 + v72;
        *(void *)&long long v73 = vzip1q_s32((int32x4_t)vzip1q_s16(v217, v216), v215).u64[0];
        *((void *)&v73 + 1) = v219.i64[0];
        v225[0] = v73;
        LODWORD(v225[1]) = vmovn_s16(v218).u32[0];
        *((void *)&v225[1] + 1) = v70;
        sub_10006ED00((uint64_t)v225);
        goto LABEL_80;
      case 0x1A:
        sub_100246E30((uint64_t)v15, a3, a4, (uint64_t)v225);
        char v74 = BYTE1(v225[0]);
        v219.i32[0] = BYTE4(v225[0]);
        v218.i32[0] = BYTE5(v225[0]);
        int32x2_t v75 = *(int32x2_t *)((char *)v225 + 6);
        int32x2_t v76 = *(int32x2_t *)&v225[1];
        char v77 = BYTE4(v225[1]);
        v217.i32[0] = BYTE5(v225[1]);
        int v78 = BYTE6(v225[1]);
        uint64_t v79 = *((void *)&v225[2] + 1);
        sub_100010BCC(&qword_10047DC60);
        uint64_t v80 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
        unint64_t v81 = (*(unsigned __int8 *)(v80 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80);
        uint64_t v25 = swift_allocObject();
        *(_OWORD *)(v25 + 16) = xmmword_1003B2450;
        uint64_t v39 = v25 + v81;
        char v82 = v78 == 1;
        LOBYTE(v225[0]) = v74;
        if (v78 == 2) {
          char v82 = 2;
        }
        BYTE1(v225[0]) = v82;
        BYTE2(v225[0]) = v219.i8[0];
        BYTE3(v225[0]) = v218.i8[0];
        *(int32x2_t *)((char *)v225 + 4) = vzip1_s32(v75, v76);
        BYTE12(v225[0]) = v77;
        BYTE13(v225[0]) = v217.i8[0];
        *(void *)&v225[1] = v79;
        sub_10006ECF4((uint64_t)v225);
        goto LABEL_80;
      case 0x1F:
        LODWORD(v223[0]) = 308;
        uint64_t v83 = (uint64_t *)swift_getKeyPath();
        type metadata accessor for wl_nan_cmd_xtlv_id(0);
        unint64_t v85 = v84;
        unint64_t v86 = sub_10024DC6C(&qword_100483878, type metadata accessor for wl_nan_cmd_xtlv_id);
        unint64_t v87 = sub_1000E4A78();
        unint64_t v88 = sub_1000E4A24();
        uint64_t v131 = sub_10024687C((uint64_t)v225, (char *)v223, v83, (uint64_t)v15, a3, v85, a4, v86, v87, v88);
        swift_release();
        char v132 = v225[0];
        int v133 = BYTE4(v225[0]);
        if (LOBYTE(v225[0]) == 1) {
          goto LABEL_73;
        }
        char v134 = BYTE1(v225[0]);
        if (LOBYTE(v225[0]))
        {
          if (BYTE1(v225[0]) != 1)
          {
LABEL_85:
            swift_bridgeObjectRelease();
            unint64_t v179 = Logger.logObject.getter();
            os_log_type_t v180 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v179, v180))
            {
              uint64_t v181 = swift_slowAlloc();
              *(void *)&v225[0] = swift_slowAlloc();
              *(_DWORD *)uint64_t v181 = 16777986;
              LOBYTE(v223[0]) = v132;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v181 + 5) = 256;
              LOBYTE(v223[0]) = v134;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v181 + 8) = 2080;
              *(void *)&v223[0] = sub_100010680(0xD000000000000019, 0x80000001003DEA40, (uint64_t *)v225);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              _os_log_impl((void *)&_mh_execute_header, v179, v180, "Failed to convert status: %hhu, reason: %hhu into %s", (uint8_t *)v181, 0x12u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }

            unint64_t v16 = v218.i64[0];
            uint64_t v17 = v219.i64[0];
            sub_10000F000();
            swift_allocError();
            *(_OWORD *)uint64_t v182 = xmmword_1003B00B0;
            *(unsigned char *)(v182 + 16) = 2;
            swift_willThrow();
            swift_release();
            swift_release();
            goto LABEL_5;
          }
LABEL_73:
          int v135 = 0;
        }
        else
        {
          int v135 = BYTE1(v225[0]) - 1;
          if ((BYTE1(v225[0]) - 1) >= 4u) {
            goto LABEL_85;
          }
        }
        uint64_t v170 = *(void *)(v131 + 16);
        if (!v170)
        {
LABEL_92:
          swift_release();
          swift_bridgeObjectRelease();
          break;
        }
        BOOL v171 = (unint64_t *)(v131 + 48);
        uint64_t v172 = *(void *)(v131 + 16);
        while (*((_WORD *)v171 - 8) != 1284)
        {
          v171 += 3;
          if (!--v172)
          {
            uint64_t v185 = 0;
            uint64_t v186 = (unint64_t *)(v131 + 48);
            while (1)
            {
              uint64_t v187 = v185 + 1;
              if (__OFADD__(v185, 1))
              {
                __break(1u);
LABEL_108:
                __break(1u);
                JUMPOUT(0x100244C58);
              }
              if (*((_WORD *)v186 - 8) == 779) {
                break;
              }
              v186 += 3;
              ++v185;
              if (v187 == v170) {
                goto LABEL_92;
              }
            }
            uint64_t v188 = *(v186 - 1);
            unint64_t v189 = *v186;
            sub_100013D44(v188, *v186);
            __int16 v199 = sub_1002582B4(v188, v189);
            sub_10000C970(v188, v189);
            uint64_t v200 = 0;
            long long v201 = (unint64_t *)(v131 + 48);
            while (1)
            {
              uint64_t v202 = v200 + 1;
              if (__OFADD__(v200, 1)) {
                goto LABEL_108;
              }
              if (*((_WORD *)v201 - 8) == 787) {
                break;
              }
              v201 += 3;
              ++v200;
              if (v202 == v170) {
                goto LABEL_92;
              }
            }
            uint64_t v206 = *(v201 - 1);
            unint64_t v207 = *v201;
            sub_100013D44(v206, *v201);
            swift_bridgeObjectRelease();
            unint64_t v208 = sub_100232768(787, v206, v207);
            sub_10000C970(v206, v207);
            if ((v208 & 0x1000000000000) == 0)
            {
              v215.i64[0] = v208 >> 8;
              v216.i64[0] = v208 >> 16;
              v217.i64[0] = v208 >> 24;
              v218.i64[0] = HIDWORD(v208);
              v219.i64[0] = v208 >> 40;
              sub_100010BCC(&qword_10047DC60);
              uint64_t v209 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
              unint64_t v210 = (*(unsigned __int8 *)(v209 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v209 + 80);
              uint64_t v25 = swift_allocObject();
              *(_OWORD *)(v25 + 16) = xmmword_1003B2450;
              LOWORD(v225[0]) = v199;
              BYTE2(v225[0]) = v208;
              BYTE3(v225[0]) = v215.i8[0];
              BYTE4(v225[0]) = v216.i8[0];
              BYTE5(v225[0]) = v217.i8[0];
              BYTE6(v225[0]) = v218.i8[0];
              BYTE7(v225[0]) = v219.i8[0];
              BYTE8(v225[0]) = v135;
              sub_10006EC20((uint64_t)v225);
              sub_10006E544((uint64_t)v225, v25 + v210);
              goto LABEL_81;
            }
            goto LABEL_94;
          }
        }
        uint64_t v183 = *(v171 - 1);
        unint64_t v184 = *v171;
        sub_100013D44(v183, *v171);
        sub_10025B5F8(v183, v184, v225);
        int v190 = v133;
        v219.i32[0] = v135;
        swift_bridgeObjectRelease();
        sub_10000C970(v183, v184);
        char v191 = v225[0];
        v4.i32[0] = *(_DWORD *)((char *)v225 + 2);
        char v192 = BYTE6(v225[0]);
        char v193 = BYTE7(v225[0]);
        char v194 = v190;
        char v195 = sub_10024D714(v190);
        if (v195 != 15)
        {
          char v203 = v195;
          int16x8_t v218 = (int16x8_t)vmovl_u8(v4);
          sub_100010BCC(&qword_10047DC60);
          uint64_t v204 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
          unint64_t v205 = (*(unsigned __int8 *)(v204 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v204 + 80);
          uint64_t v25 = swift_allocObject();
          *(_OWORD *)(v25 + 16) = xmmword_1003B2450;
          LOBYTE(v225[0]) = v191;
          *(_DWORD *)((char *)v225 + 1) = vmovn_s16(v218).u32[0];
          BYTE5(v225[0]) = v192;
          BYTE6(v225[0]) = v193;
          BYTE7(v225[0]) = v203;
          BYTE8(v225[0]) = v219.i8[0];
          sub_10024D738((uint64_t)v225);
          sub_10006E544((uint64_t)v225, v25 + v205);
LABEL_81:
          swift_storeEnumTagMultiPayload();
          swift_release();
          (*(void (**)(char *, uint64_t))(v221 + 8))(v222, v220);
          swift_release();
          return (void *)v25;
        }
        uint64_t v196 = Logger.logObject.getter();
        os_log_type_t v197 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v196, v197))
        {
          uint64_t v198 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v198 = 16777472;
          LOBYTE(v225[0]) = v194;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v196, v197, "Failed to convert %hhu into a management frame type", v198, 5u);
          swift_slowDealloc();
        }
        swift_release();

        break;
      case 0x29:
        type metadata accessor for wl_nan_ev_datapath_cmn(0);
        sub_100244D18(1282, v89, (uint64_t)v15, a3, v89);
        if (BYTE6(v225[1]) != 6) {
          goto LABEL_94;
        }
        int v91 = LOBYTE(v225[0]);
        char v92 = BYTE1(v225[0]);
        v90.i32[0] = DWORD1(v225[0]);
        int16x8_t v219 = (int16x8_t)vmovl_u8(v90);
        char v93 = BYTE8(v225[0]);
        char v94 = BYTE9(v225[0]);
        sub_100010BCC(&qword_10047DC60);
        uint64_t v95 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
        unint64_t v96 = (*(unsigned __int8 *)(v95 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v95 + 80);
        uint64_t v25 = swift_allocObject();
        *(_OWORD *)(v25 + 16) = xmmword_1003B2450;
        uint64_t v39 = v25 + v96;
        LOBYTE(v225[0]) = v92;
        *(_DWORD *)((char *)v225 + 1) = vmovn_s16(v219).u32[0];
        BYTE5(v225[0]) = v93;
        BYTE6(v225[0]) = v94;
        BYTE7(v225[0]) = v91 == 1;
        uint64_t v63 = 1;
LABEL_32:
        *((void *)&v225[0] + 1) = v63;
        sub_10006EC5C((uint64_t)v225);
        goto LABEL_80;
      case 0x2C:
        type metadata accessor for wl_nan_host_assist_req(0);
        sub_100244D18(1538, v97, (uint64_t)v15, a3, v97);
        uint64_t v98 = *(void *)&v225[0];
        v99.i32[0] = DWORD2(v225[0]);
        char v100 = BYTE12(v225[0]);
        char v101 = HIBYTE(v225[0]);
        int16x8_t v219 = (int16x8_t)vmovl_u8(v99);
        if ((BYTE13(v225[0]) - 1) > 0xFu) {
          char v102 = 15;
        }
        else {
          char v102 = byte_1003D3130[(char)(BYTE13(v225[0]) - 1)];
        }
        if (BYTE14(v225[0]) == 9) {
          char v156 = 8;
        }
        else {
          char v156 = 9;
        }
        if (BYTE14(v225[0]) == 8) {
          char v157 = 7;
        }
        else {
          char v157 = v156;
        }
        if (BYTE14(v225[0]) - 1 >= 7) {
          char v158 = v157;
        }
        else {
          char v158 = BYTE14(v225[0]) - 1;
        }
        sub_100010BCC(&qword_10047DC60);
        uint64_t v159 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
        unint64_t v160 = (*(unsigned __int8 *)(v159 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v159 + 80);
        uint64_t v25 = swift_allocObject();
        *(_OWORD *)(v25 + 16) = xmmword_1003B2450;
        uint64_t v39 = v25 + v160;
        LOBYTE(v225[0]) = v100;
        BYTE1(v225[0]) = v101;
        *(void *)((char *)v225 + 2) = v98;
        *(_DWORD *)((char *)v225 + 10) = vmovn_s16(v219).u32[0];
        BYTE14(v225[0]) = v102;
        HIBYTE(v225[0]) = v158;
        sub_10006EC50((uint64_t)v225);
        goto LABEL_80;
      case 0x2F:
        type metadata accessor for wl_nan_event_oob_af_txs(0);
        sub_100244D18(2051, v103, (uint64_t)v15, a3, v103);
        __int16 v136 = WORD1(v225[0]);
        if (LOBYTE(v225[0]) <= 4uLL) {
          char v137 = 0x302010004uLL >> (8 * LOBYTE(v225[0]));
        }
        else {
          char v137 = 4;
        }
        if (BYTE1(v225[0]) <= 3u) {
          char v138 = 0x2010003u >> (8 * BYTE1(v225[0]));
        }
        else {
          char v138 = 3;
        }
        sub_100010BCC(&qword_10047DC60);
        uint64_t v139 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
        unint64_t v140 = (*(unsigned __int8 *)(v139 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v139 + 80);
        uint64_t v25 = swift_allocObject();
        *(_OWORD *)(v25 + 16) = xmmword_1003B2450;
        uint64_t v39 = v25 + v140;
        LOWORD(v225[0]) = v136;
        BYTE2(v225[0]) = v137;
        BYTE3(v225[0]) = v138;
        sub_10006E5EC((uint64_t)v225);
        goto LABEL_80;
      case 0x30:
        LOBYTE(v225[0]) = 0;
        sub_100247130(2051, v13, (uint64_t)v15);
        int v233 = 2051;
        unint64_t v104 = (char *)swift_getKeyPath();
        type metadata accessor for wl_nan_tlv(0);
        unint64_t v106 = v105;
        unint64_t v107 = sub_10024DC6C(&qword_100483870, type metadata accessor for wl_nan_tlv);
        unint64_t v108 = sub_1000E4A78();
        unint64_t v109 = sub_1000E4A24();
        sub_100244EBC((uint64_t)&v234, (char *)v223, (char *)&v233, v104, (char *)0x14, (void (*)(void))sub_100247640, 0, (uint64_t)v15, a3, v106, (uint64_t)&type metadata for IEEE80211Frame.Management.ActionFrame, a4, v107, v108, v109);
        swift_release();
        char v166 = v223[0];
        int16x8_t v219 = *(int16x8_t *)((char *)v223 + 8);
        uint64_t v167 = *((void *)&v223[1] + 1);
        sub_100010BCC(&qword_10047DC60);
        uint64_t v168 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
        unint64_t v169 = (*(unsigned __int8 *)(v168 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v168 + 80);
        uint64_t v25 = swift_allocObject();
        *(_OWORD *)(v25 + 16) = xmmword_1003B2450;
        uint64_t v39 = v25 + v169;
        *(void *)&v225[0] = v234;
        DWORD2(v225[0]) = v235;
        LOBYTE(v225[1]) = v166;
        *(int16x8_t *)((char *)&v225[1] + 8) = v219;
        *((void *)&v225[2] + 1) = v167;
        sub_10006E5E0((uint64_t)v225);
        goto LABEL_80;
      default:
        goto LABEL_94;
    }
  }
  else
  {
LABEL_94:
    swift_release();
  }
  (*(void (**)(char *, uint64_t))(v221 + 8))(v222, v220);
  swift_release();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100244D18(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = a3 + 16;
  uint64_t v9 = sub_100010BCC(&qword_10047E950);
  swift_beginAccess();
  sub_100039448(v8, *(void *)(a3 + 40));
  sub_10000F9CC(&qword_100483A38, &qword_10047E950);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t result = swift_endAccess();
  if (!v5)
  {
    if (v13 == a1)
    {
      uint64_t v11 = sub_10000F9CC(&qword_100483A40, &qword_10047E950);
      LengthValueHelper.load<A>(_:)(a5, v9, a5, v11);
    }
    else
    {
      sub_10000F000();
      swift_allocError();
      *(_OWORD *)uint64_t v12 = xmmword_1003B00B0;
      *(unsigned char *)(v12 + 16) = 2;
      swift_willThrow();
    }
    return sub_10000C970(v14, v15);
  }
  return result;
}

uint64_t sub_100244EBC(uint64_t a1, char *a2, char *a3, char *a4, char *a5, void (*a6)(void), char *a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v149 = a7;
  uint64_t v154 = a6;
  unint64_t v155 = a5;
  uint64_t v175 = (char *)a3;
  char v153 = a2;
  uint64_t v158 = a1;
  uint64_t v16 = *(void *)a4;
  char v166 = a4;
  uint64_t v164 = *(void *)(a14 + 8);
  uint64_t v17 = (void (**)(char *, char *))(v16 + class metadata base offset for KeyPath);
  uint64_t v18 = *(char **)(v16 + class metadata base offset for KeyPath + 8);
  uint64_t v146 = *(void *)(*(void *)(v164 + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  __chkstk_darwin();
  int32x2_t v143 = (char *)&v139 - v19;
  uint64_t v159 = v18;
  uint64_t v160 = *((void *)v18 - 1);
  __chkstk_darwin();
  char v145 = (char *)&v139 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v147 = (char *)&v139 - v21;
  __chkstk_darwin();
  uint64_t v150 = (char *)&v139 - v22;
  __chkstk_darwin();
  char v156 = (char *)&v139 - v23;
  __chkstk_darwin();
  int8x8_t v151 = (char *)&v139 - v24;
  __chkstk_darwin();
  unint64_t v148 = (char *)&v139 - v25;
  __chkstk_darwin();
  char v157 = (char *)&v139 - v26;
  __chkstk_darwin();
  __int32 v161 = (void (*)(void))((char *)&v139 - v27);
  uint64_t v168 = *v17;
  uint64_t v152 = *((void *)v168 - 1);
  uint64_t v167 = *(void *)(v152 + 64);
  __chkstk_darwin();
  unint64_t v165 = (char *)&v139 - v28;
  int64_t v172 = *(void *)(a15 + 8);
  uint64_t v29 = *(void *)(*(void *)(v172 + 24) + 16);
  unint64_t v173 = a13;
  unint64_t v174 = a10;
  swift_getAssociatedTypeWitness();
  uint64_t v171 = v29;
  uint64_t v163 = swift_getAssociatedTypeWitness();
  __chkstk_darwin();
  unint64_t v162 = (char *)&v139 - v30;
  uint64_t v31 = swift_checkMetadataState();
  uint64_t v169 = *(void *)(v31 - 8);
  uint64_t v170 = v31;
  __chkstk_darwin();
  uint64_t v33 = (char *)&v139 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v35 = (char *)&v139 - v34;
  __chkstk_darwin();
  uint64_t v37 = (char *)&v139 - v36;
  sub_100010BCC(&qword_10047E950);
  swift_beginAccess();
  sub_100039448(a8 + 16, *(void *)(a8 + 40));
  sub_10000F9CC(&qword_100483A38, &qword_10047E950);
  unint64_t v38 = v180;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  unint64_t v39 = v38;
  if (v38) {
    return swift_endAccess();
  }
  unint64_t v140 = v33;
  unint64_t v41 = v35;
  uint64_t v42 = v169;
  swift_endAccess();
  int v141 = (unsigned __int16)v177;
  uint64_t v142 = v178;
  unint64_t v180 = v179;
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v43 = v170;
  char v44 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v175 = v37;
  uint64_t v45 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if (v44)
  {
    uint64_t v46 = v42;
    if (v45 > 16)
    {
      LOWORD(v177) = v141;
      sub_1000C9760();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      unint64_t v47 = v175;
      char v48 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v50 = *(void (**)(char *, uint64_t))(v46 + 8);
      int v49 = (void (*)(char *, char *))(v46 + 8);
      v50(v41, v43);
      v50(v47, v43);
      uint64_t v51 = v142;
      unint64_t v52 = v180;
      if ((v48 & 1) == 0) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
    unint64_t v174 = 0;
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    char v57 = v175;
    char v58 = dispatch thunk of static Comparable.>= infix(_:_:)();
    uint64_t v59 = *(void (**)(char *, uint64_t))(v46 + 8);
    v59(v41, v43);
    BOOL v60 = *(void (**)(char *, void (*)(void, void), uint64_t))(v46 + 16);
    int v49 = (void (*)(char *, char *))(v46 + 16);
    int v61 = v140;
    v60(v140, (void (*)(void, void))v57, v43);
    if (v58)
    {
      unsigned __int16 v62 = dispatch thunk of BinaryInteger._lowWord.getter();
      v59(v61, v43);
      v59(v57, v43);
      unint64_t v39 = v174;
      unint64_t v52 = v180;
      uint64_t v51 = v142;
      if (v141 != v62) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
    v59(v61, v43);
    v59(v57, v43);
    unint64_t v52 = v180;
    uint64_t v51 = v142;
LABEL_17:
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v69 = xmmword_1003B00B0;
LABEL_25:
    *(unsigned char *)(v69 + 16) = 2;
    swift_willThrow();
LABEL_26:
    uint64_t v73 = v51;
    unint64_t v74 = v52;
    return sub_10000C970(v73, v74);
  }
  uint64_t v53 = v42;
  if (v45 >= 17)
  {
    LOWORD(v177) = v141;
    sub_1000C9760();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    unint64_t v54 = v175;
    char v55 = dispatch thunk of static Equatable.== infix(_:_:)();
    int v56 = *(void (**)(char *, uint64_t))(v53 + 8);
    int v49 = (void (*)(char *, char *))(v53 + 8);
    v56(v41, v43);
    v56(v54, v43);
    uint64_t v51 = v142;
    unint64_t v52 = v180;
    if ((v55 & 1) == 0) {
      goto LABEL_17;
    }
    goto LABEL_14;
  }
  uint64_t v63 = (void (*)(void, void))v175;
  unsigned __int16 v64 = dispatch thunk of BinaryInteger._lowWord.getter();
  int v49 = (void (*)(char *, char *))(v42 + 8);
  (*(void (**)(char *, uint64_t))(v42 + 8))((char *)v63, v43);
  uint64_t v51 = v142;
  unint64_t v52 = v180;
  if (v141 != v64) {
    goto LABEL_17;
  }
LABEL_14:
  uint64_t v65 = (char *)(v52 >> 62);
  unint64_t v66 = 0;
  uint64_t v67 = (uint64_t)v168;
  uint64_t v68 = v166;
  switch(v52 >> 62)
  {
    case 1uLL:
      LODWORD(v66) = HIDWORD(v51) - v51;
      if (__OFSUB__(HIDWORD(v51), v51)) {
        goto LABEL_90;
      }
      unint64_t v66 = (int)v66;
LABEL_21:
      if ((v66 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
        goto LABEL_92;
      }
      if (v66 >> 16) {
        goto LABEL_89;
      }
LABEL_23:
      if ((uint64_t)v66 < v167)
      {
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v69 = 0;
        *(void *)(v69 + 8) = 0;
        goto LABEL_25;
      }
      sub_100013D44(v51, v52);
      Data.load<A>(as:)(v67, v51, v52, v67);
      if (v39)
      {
        sub_10000C970(v51, v52);
        goto LABEL_26;
      }
      unint64_t v173 = v52 >> 62;
      unint64_t v174 = 0;
      int32x2_t v75 = v161;
      swift_getAtKeyPath();
      uint64_t v68 = v159;
      char v76 = dispatch thunk of static BinaryInteger.isSigned.getter();
      uint64_t v77 = v160;
      int v78 = v157;
      uint64_t v79 = *(void (**)(char *, void (*)(void), char *))(v160 + 16);
      v79(v157, v75, v68);
      if ((v76 & 1) == 0)
      {
        uint64_t v175 = *(char **)(v77 + 8);
        ((void (*)(char *, char *))v175)(v78, v68);
LABEL_37:
        uint64_t v82 = (uint64_t)v79;
        int v49 = v168;
        goto LABEL_38;
      }
      uint64_t v80 = dispatch thunk of BinaryInteger.bitWidth.getter();
      uint64_t v175 = *(char **)(v77 + 8);
      ((void (*)(char *, char *))v175)(v78, v68);
      if (v80 <= 64)
      {
        int32x2_t v75 = v161;
        goto LABEL_37;
      }
      unint64_t v81 = v148;
      uint64_t v82 = (uint64_t)v79;
      v79(v148, v161, v68);
      int64_t v177 = 0x8000000000000000;
      if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0) {
        goto LABEL_67;
      }
      uint64_t v83 = dispatch thunk of BinaryInteger.bitWidth.getter();
      int v49 = v168;
      if (v83 >= 64)
      {
        sub_10003AAFC();
        unint64_t v129 = v151;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        uint64_t v130 = v148;
        char v118 = dispatch thunk of static Comparable.< infix(_:_:)();
        uint64_t v131 = v129;
        char v132 = (void (*)(char *, char *))v175;
        ((void (*)(char *, char *))v175)(v131, v68);
        v132(v130, v68);
        goto LABEL_77;
      }
      uint64_t v84 = dispatch thunk of BinaryInteger._lowWord.getter();
      unint64_t v85 = v81;
      uint64_t v86 = v84;
      unint64_t v87 = v85;
LABEL_82:
      ((void (*)(char *, char *))v175)(v87, v68);
      BOOL v134 = v86 < v177;
LABEL_85:
      int32x2_t v75 = v161;
      if (v134) {
        goto LABEL_101;
      }
      while (1)
      {
LABEL_38:
        uint64_t v88 = dispatch thunk of BinaryInteger.bitWidth.getter();
        uint64_t v89 = v156;
        ((void (*)(char *, void (*)(void), char *))v82)(v156, v75, v68);
        if (v88 >= 65)
        {
          ((void (*)(char *, char *))v175)(v89, v68);
          uint8x8_t v90 = v161;
          goto LABEL_40;
        }
        uint64_t v98 = dispatch thunk of BinaryInteger.bitWidth.getter();
        ((void (*)(char *, char *))v175)(v89, v68);
        if (v98 != 64) {
          break;
        }
        char v99 = dispatch thunk of static BinaryInteger.isSigned.getter();
        uint8x8_t v90 = v161;
        if (v99) {
          goto LABEL_51;
        }
LABEL_40:
        int v91 = v150;
        ((void (*)(char *, void (*)(void), char *))v82)(v150, v90, v68);
        int64_t v177 = 0x7FFFFFFFFFFFFFFFLL;
        char v92 = dispatch thunk of static BinaryInteger.isSigned.getter();
        uint64_t v93 = dispatch thunk of BinaryInteger.bitWidth.getter();
        if (v92)
        {
          char v94 = v151;
          if (v93 <= 64) {
            goto LABEL_48;
          }
          sub_10003AAFC();
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
          char v95 = dispatch thunk of static Comparable.< infix(_:_:)();
          unint64_t v96 = v94;
          uint64_t v97 = (void (*)(char *, char *))v175;
          ((void (*)(char *, char *))v175)(v96, v68);
          v97(v91, v68);
          if ((v95 & 1) == 0) {
            goto LABEL_49;
          }
        }
        else
        {
          uint64_t v82 = (uint64_t)v151;
          if (v93 <= 63)
          {
LABEL_48:
            uint64_t v100 = dispatch thunk of BinaryInteger._lowWord.getter();
            ((void (*)(char *, char *))v175)(v91, v68);
            if (v177 >= v100) {
              goto LABEL_49;
            }
            goto LABEL_66;
          }
LABEL_65:
          uint64_t v176 = 0x7FFFFFFFFFFFFFFFLL;
          (*(void (**)(uint64_t, char *, char *))(v160 + 32))(v82, v91, v68);
          sub_10003AAFC();
          uint64_t v110 = v147;
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
          char v111 = dispatch thunk of static Comparable.< infix(_:_:)();
          unint64_t v112 = v110;
          uint64_t v113 = (void (*)(uint64_t, char *))v175;
          ((void (*)(char *, char *))v175)(v112, v68);
          v113(v82, v68);
          if ((v111 & 1) == 0)
          {
LABEL_49:
            uint64_t v68 = v159;
            goto LABEL_51;
          }
        }
LABEL_66:
        __break(1u);
LABEL_67:
        char v114 = dispatch thunk of static BinaryInteger.isSigned.getter();
        uint64_t v115 = dispatch thunk of BinaryInteger.bitWidth.getter();
        int v49 = v168;
        if (v114)
        {
          if (v115 <= 64)
          {
            uint64_t v68 = v159;
            swift_getAssociatedConformanceWitness();
            dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
            int v135 = v151;
            dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
            __int16 v136 = v148;
            LODWORD(v172) = dispatch thunk of static Comparable.< infix(_:_:)();
            char v137 = v135;
            int v49 = (void (*)(char *, char *))v175;
            ((void (*)(char *, char *))v175)(v137, v68);
            uint64_t v65 = v145;
            (*(void (**)(char *, char *, char *))(v160 + 32))(v145, v136, v68);
            if ((v172 & 1) == 0)
            {
              int64_t v172 = v177;
              uint64_t v138 = dispatch thunk of BinaryInteger._lowWord.getter();
              v49(v65, v68);
              BOOL v134 = v138 < v172;
              int v49 = v168;
              goto LABEL_85;
            }
LABEL_100:
            v49(v65, v68);
LABEL_101:
            __break(1u);
            JUMPOUT(0x10024627CLL);
          }
          sub_10003AAFC();
          uint64_t v116 = v151;
          uint64_t v68 = v159;
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
          int16x8_t v117 = v148;
          char v118 = dispatch thunk of static Comparable.< infix(_:_:)();
          unint64_t v119 = v116;
          int8x16_t v120 = (void (*)(char *, char *))v175;
          ((void (*)(char *, char *))v175)(v119, v68);
          v120(v117, v68);
LABEL_77:
          int32x2_t v75 = v161;
          if (v118) {
            goto LABEL_101;
          }
        }
        else
        {
          if (v115 < 64)
          {
            int v133 = v148;
            uint64_t v68 = v159;
            uint64_t v86 = dispatch thunk of BinaryInteger._lowWord.getter();
            unint64_t v87 = v133;
            goto LABEL_82;
          }
          uint64_t v68 = v159;
          ((void (*)(char *, char *))v175)(v148, v159);
          int32x2_t v75 = v161;
        }
      }
      uint8x8_t v90 = v161;
LABEL_51:
      uint64_t v82 = v142;
      uint64_t v101 = dispatch thunk of BinaryInteger._lowWord.getter();
      ((void (*)(void (*)(void), char *))v175)(v90, v68);
      uint64_t v68 = v155;
      uint64_t v65 = &v155[v101];
      if (__OFADD__(v155, v101))
      {
LABEL_92:
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
LABEL_95:
        __break(1u);
LABEL_96:
        __break(1u);
LABEL_97:
        __break(1u);
LABEL_98:
        __break(1u);
LABEL_99:
        __break(1u);
        goto LABEL_100;
      }
      uint64_t v102 = v173;
      uint8x8_t v90 = v154;
      int v91 = v153;
      uint64_t v103 = v152;
      uint64_t v104 = 0;
      switch((int)v173)
      {
        case 1:
          LODWORD(v104) = HIDWORD(v82) - v82;
          if (__OFSUB__(HIDWORD(v82), v82)) {
            goto LABEL_97;
          }
          uint64_t v104 = (int)v104;
LABEL_57:
          if (v104 < 0) {
            goto LABEL_93;
          }
          if ((unint64_t)v104 >> 16) {
            goto LABEL_94;
          }
LABEL_59:
          if (v104 < (uint64_t)v65)
          {
            sub_10000F000();
            swift_allocError();
            *(void *)uint64_t v107 = 0;
            *(void *)(v107 + 8) = 0;
            *(unsigned char *)(v107 + 16) = 2;
            swift_willThrow();
            unint64_t v108 = v180;
            sub_10000C970(v82, v180);
            sub_10000C970(v82, v108);
            return (*(uint64_t (**)(char *, void))(v103 + 8))(v165, v49);
          }
          (*(void (**)(uint64_t, char *, void (*)(char *, char *)))(v152 + 16))(v158, v165, v49);
          uint64_t v109 = 0;
          switch(v102)
          {
            case 1:
              uint64_t v109 = (int)v82;
              BOOL v72 = __OFADD__((int)v82, v68);
              v68 += (int)v82;
              if (!v72) {
                goto LABEL_71;
              }
              __break(1u);
              goto LABEL_65;
            case 2:
              uint64_t v109 = *(void *)(v82 + 16);
              BOOL v72 = __OFADD__(v109, v68);
              v68 += v109;
              if (!v72) {
                goto LABEL_71;
              }
              goto LABEL_99;
            default:
LABEL_71:
              uint64_t v121 = &v65[v109];
              if (__OFADD__(v109, v65)) {
                goto LABEL_95;
              }
              uint64_t v65 = v149;
              if ((uint64_t)v121 < (uint64_t)v68) {
                goto LABEL_96;
              }
              uint64_t v122 = v82;
              unint64_t v123 = v180;
              uint64_t v124 = Data._Representation.subscript.getter();
              unint64_t v126 = v125;
              unint64_t v127 = v174;
              v90();
              if (v127)
              {
                sub_10000C970(v124, v126);
                sub_10000C970(v122, v123);
                sub_10000C970(v122, v123);
                uint64_t v128 = *(void (**)(uint64_t, void))(v103 + 8);
                v128(v158, v49);
                return ((uint64_t (*)(char *, void))v128)(v165, v49);
              }
              (*(void (**)(char *, void))(v103 + 8))(v165, v49);
              sub_10000C970(v124, v126);
              sub_10000C970(v122, v123);
              uint64_t v73 = v122;
              unint64_t v74 = v123;
              break;
          }
          break;
        case 2:
          uint64_t v106 = *(void *)(v82 + 16);
          uint64_t v105 = *(void *)(v82 + 24);
          BOOL v72 = __OFSUB__(v105, v106);
          uint64_t v104 = v105 - v106;
          if (!v72) {
            goto LABEL_57;
          }
          goto LABEL_98;
        case 3:
          goto LABEL_59;
        default:
          uint64_t v104 = BYTE6(v180);
          goto LABEL_59;
      }
      return sub_10000C970(v73, v74);
    case 2uLL:
      uint64_t v71 = *(void *)(v51 + 16);
      uint64_t v70 = *(void *)(v51 + 24);
      BOOL v72 = __OFSUB__(v70, v71);
      unint64_t v66 = v70 - v71;
      if (!v72) {
        goto LABEL_21;
      }
      goto LABEL_91;
    case 3uLL:
      goto LABEL_23;
    default:
      unint64_t v66 = BYTE6(v52);
      goto LABEL_23;
  }
}

uint64_t sub_1002462AC(uint64_t a1, char *a2, int a3, char *a4, uint64_t a5, void (*a6)(void), char *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v19 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if (v20)
  {
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v26 = xmmword_1003B00B0;
    *(unsigned char *)(v26 + 16) = 2;
    return swift_willThrow();
  }
  else
  {
    uint64_t v21 = (char *)v19;
    int v28 = a3;
    type metadata accessor for wl_nan_tlv(0);
    unint64_t v27 = v22;
    unint64_t v23 = sub_10024DC6C(&qword_100483870, type metadata accessor for wl_nan_tlv);
    unint64_t v24 = sub_1000E4A24();
    return sub_100244EBC(a1, a2, (char *)&v28, a4, v21, a6, a7, a8, a9, v27, a10, a11, v23, a12, v24);
  }
}

uint64_t sub_100246424(uint64_t a1, int a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v17 = sub_100010BCC(&qword_10047DCD8);
  uint64_t result = sub_1002462AC(a1, (char *)&v19, a2, a3, a4, (void (*)(void))sub_1002464E4, 0, a5, a6, v17, a7, a8);
  if (!v8) {
    return v19;
  }
  return result;
}

uint64_t sub_1002464E4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  int v28 = a3;
  uint64_t v27 = *(void *)(type metadata accessor for NANAttribute(0) - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100013D44(a1, a2);
  unint64_t v9 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v10 = type metadata accessor for BinaryDecoder();
  uint64_t v11 = (void *)swift_allocObject();
  v11[5] = &_swiftEmptyDictionarySingleton;
  unsigned char v11[2] = a1;
  v11[3] = a2;
  uint64_t v12 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v12 = (int)a1;
      break;
    case 2uLL:
      uint64_t v12 = *(void *)(a1 + 16);
      break;
    default:
      break;
  }
  void v11[4] = v12;
  swift_beginAccess();
  v11[5] = v9;
  swift_bridgeObjectRelease();
  unint64_t v13 = v11[3];
  uint64_t v31 = v11[2];
  uint64_t v30 = v31 >> 32;
  uint64_t v14 = BYTE6(v13);
  uint64_t v29 = _swiftEmptyArrayStorage;
  unint64_t v15 = v13 >> 62;
  while (2)
  {
    uint64_t v16 = v11[4];
    uint64_t v17 = v14;
    switch(v15)
    {
      case 1uLL:
        uint64_t v17 = v30;
        goto LABEL_8;
      case 2uLL:
        uint64_t v17 = *(void *)(v31 + 24);
        goto LABEL_8;
      case 3uLL:
        if (v16 < 0) {
          goto LABEL_11;
        }
        goto LABEL_21;
      default:
LABEL_8:
        if (v16 >= v17)
        {
LABEL_21:
          uint64_t result = swift_release();
          *int v28 = v29;
          return result;
        }
LABEL_11:
        uint64_t v34 = v10;
        uint64_t v35 = sub_10024DC6C((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        v32[0] = (uint64_t)v11;
        swift_retain();
        NANAttribute.init(from:)(v32, (uint64_t)v8);
        if (!v4)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v29 = (void *)sub_1000C70B0(0, v29[2] + 1, 1, (unint64_t)v29);
          }
          unint64_t v19 = v29[2];
          unint64_t v18 = v29[3];
          unint64_t v20 = v19 + 1;
          if (v19 >= v18 >> 1)
          {
            unint64_t v25 = v29[2];
            unint64_t v26 = v19 + 1;
            unint64_t v22 = (void *)sub_1000C70B0(v18 > 1, v19 + 1, 1, (unint64_t)v29);
            unint64_t v19 = v25;
            unint64_t v20 = v26;
            uint64_t v29 = v22;
          }
          uint64_t v21 = v29;
          v29[2] = v20;
          sub_10024DCB4((uint64_t)v8, (uint64_t)v21+ ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80))+ *(void *)(v27 + 72) * v19);
          continue;
        }
        uint64_t v36 = v4;
        swift_errorRetain();
        sub_100010BCC((uint64_t *)&unk_1004843F0);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_23;
        }
        if (v33 == 2)
        {
          if ((v32[0] & 1) == 0) {
            goto LABEL_23;
          }
          swift_errorRelease();
          swift_errorRelease();
          uint64_t v4 = 0;
          continue;
        }
        sub_100012AA4(v32[0], v32[1], v33);
LABEL_23:
        swift_bridgeObjectRelease();
        swift_errorRelease();
        return swift_release();
    }
  }
}

uint64_t sub_10024687C(uint64_t a1, char *a2, uint64_t *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = sub_100246950(a3);
  if (v17)
  {
    __break(1u);
  }
  else
  {
    unint64_t v18 = (char *)result;
    uint64_t v19 = sub_100010BCC(&qword_100483A28);
    uint64_t result = sub_100244EBC(a1, (char *)&v23, a2, (char *)a3, v18, (void (*)(void))sub_1002469D8, 0, a4, a5, a6, v19, a7, a8, a9, a10);
    if (!v22) {
      return v23;
    }
  }
  return result;
}

uint64_t sub_100246950(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t result = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if ((v3 & 1) == 0)
  {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(class metadata base offset for KeyPath + v1 + 8) - 8) + 64);
    BOOL v5 = __OFADD__(result, v4);
    result += v4;
    if (v5) {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1002469D8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  sub_100010BCC(&qword_100483A30);
  uint64_t v7 = (int *)(sub_100010BCC(&qword_10047CEF8) - 8);
  unint64_t v8 = (*(unsigned __int8 *)(*(void *)v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v7 + 80);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1003B2450;
  unint64_t v10 = v9 + v8;
  unint64_t v11 = v10 + v7[14];
  sub_100013D44(a1, a2);
  if (qword_10047BFA8 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for CodingUserInfoKey();
  uint64_t v13 = sub_1000151B8(v12, (uint64_t)static CodingUserInfoKey.fourByteAlignedValue);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v13, v12);
  *(void *)(v11 + 24) = &type metadata for Bool;
  *(unsigned char *)unint64_t v11 = 1;
  unint64_t v14 = sub_1000201F8(v9);
  uint64_t v15 = type metadata accessor for BinaryDecoder();
  uint64_t v16 = (void *)swift_allocObject();
  void v16[5] = &_swiftEmptyDictionarySingleton;
  v16[2] = a1;
  v16[3] = a2;
  uint64_t v17 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v17 = (int)a1;
      break;
    case 2uLL:
      uint64_t v17 = *(void *)(a1 + 16);
      break;
    default:
      break;
  }
  void v16[4] = v17;
  swift_beginAccess();
  void v16[5] = v14;
  swift_bridgeObjectRelease();
  unint64_t v18 = v16[3];
  uint64_t v42 = v16[2];
  uint64_t v36 = v42 >> 32;
  uint64_t v19 = BYTE6(v18);
  unint64_t v20 = _swiftEmptyArrayStorage;
  unint64_t v21 = v18 >> 62;
  while (2)
  {
    uint64_t v22 = v16[4];
    uint64_t v23 = v19;
    switch(v21)
    {
      case 1uLL:
        uint64_t v23 = v36;
        goto LABEL_10;
      case 2uLL:
        uint64_t v23 = *(void *)(v42 + 24);
        goto LABEL_10;
      case 3uLL:
        if (v22 < 0) {
          goto LABEL_13;
        }
        goto LABEL_23;
      default:
LABEL_10:
        if (v22 >= v23)
        {
LABEL_23:
          uint64_t result = swift_release();
          *a3 = v20;
          return result;
        }
LABEL_13:
        uint64_t v39 = v15;
        uint64_t v40 = sub_10024DC6C((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        v37[0] = (uint64_t)v16;
        swift_retain();
        sub_10024A938(v37, (uint64_t)v41);
        if (!v4)
        {
          __int16 v34 = v41[0];
          uint64_t v32 = v41[2];
          uint64_t v33 = v41[1];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v20 = sub_1000C7304(0, v20[2] + 1, 1, v20);
          }
          uint64_t v24 = v20;
          unint64_t v25 = v20[2];
          unint64_t v26 = v24;
          unint64_t v27 = v24[3];
          unint64_t v28 = v25 + 1;
          if (v25 >= v27 >> 1)
          {
            uint64_t v30 = sub_1000C7304((void *)(v27 > 1), v25 + 1, 1, v26);
            unint64_t v28 = v25 + 1;
            unint64_t v26 = v30;
          }
          v26[2] = v28;
          uint64_t v29 = &v26[3 * v25];
          unint64_t v20 = v26;
          *((_WORD *)v29 + 16) = v34;
          v29[5] = v33;
          v29[6] = v32;
          continue;
        }
        v41[0] = v4;
        swift_errorRetain();
        sub_100010BCC((uint64_t *)&unk_1004843F0);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_25;
        }
        if (v38 == 2)
        {
          if ((v37[0] & 1) == 0) {
            goto LABEL_25;
          }
          swift_errorRelease();
          swift_errorRelease();
          uint64_t v4 = 0;
          continue;
        }
        sub_100012AA4(v37[0], v37[1], v38);
LABEL_25:
        swift_bridgeObjectRelease();
        swift_errorRelease();
        return swift_release();
    }
  }
}

uint64_t sub_100246E30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v38[0] = 1282;
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  type metadata accessor for wl_nan_tlv(0);
  unint64_t v11 = v10;
  unint64_t v12 = sub_10024DC6C(&qword_100483870, type metadata accessor for wl_nan_tlv);
  unint64_t v13 = sub_1000E4A78();
  unint64_t v14 = sub_1000E4A24();
  uint64_t v15 = sub_10024687C((uint64_t)&v35, (char *)v38, KeyPath, a1, a2, v11, a3, v12, v13, v14);
  uint64_t result = swift_release();
  if (!v4)
  {
    char v17 = v37;
    char v18 = BYTE1(v37);
    __int16 v19 = WORD1(v37);
    uint64_t v20 = *(void *)(v15 + 16);
    long long v33 = v36;
    long long v34 = v35;
    if (v20)
    {
      unint64_t v21 = (unint64_t *)(v15 + 48);
      while (*((_WORD *)v21 - 8) != 774)
      {
        v21 += 3;
        if (!--v20) {
          goto LABEL_6;
        }
      }
      int v39 = WORD1(v37);
      int v40 = BYTE1(v37);
      uint64_t v24 = *(v21 - 1);
      unint64_t v23 = *v21;
      unint64_t v25 = *v21 >> 62;
      sub_100013D44(v24, *v21);
      swift_bridgeObjectRelease();
      sub_100013D44(v24, v23);
      sub_100013D44(v24, v23);
      unint64_t v26 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v27 = type metadata accessor for BinaryDecoder();
      unint64_t v28 = (void *)swift_allocObject();
      v28[5] = &_swiftEmptyDictionarySingleton;
      void v28[2] = v24;
      v28[3] = v23;
      uint64_t v29 = 0;
      switch(v25)
      {
        case 1uLL:
          uint64_t v29 = (int)v24;
          break;
        case 2uLL:
          uint64_t v29 = *(void *)(v24 + 16);
          break;
        default:
          break;
      }
      v28[4] = v29;
      swift_beginAccess();
      v28[5] = v26;
      swift_bridgeObjectRelease();
      *((void *)&v36 + 1) = v27;
      uint64_t v37 = sub_10024DC6C((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
      *(void *)&long long v35 = v28;
      sub_10019F2B0(&v35);
      uint64_t v31 = v30;
      uint64_t v22 = v32;
      sub_10000C970(v24, v23);
      if ((v31 & 0xC0000000) != 0)
      {
        sub_10006DE90(v31);
        uint64_t result = sub_10000C970(v24, v23);
        uint64_t v22 = _swiftEmptyArrayStorage;
      }
      else
      {
        uint64_t result = sub_10000C970(v24, v23);
      }
      __int16 v19 = v39;
      char v18 = v40;
    }
    else
    {
LABEL_6:
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v22 = _swiftEmptyArrayStorage;
    }
    *(_OWORD *)a4 = v34;
    *(_OWORD *)(a4 + 16) = v33;
    *(unsigned char *)(a4 + 32) = v17;
    *(unsigned char *)(a4 + 33) = v18;
    *(_WORD *)(a4 + 34) = v19;
    *(void *)(a4 + 40) = v22;
  }
  return result;
}

uint64_t sub_100247130(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[4];
  uint64_t v7 = v6 + 2;
  if (__OFADD__(v6, 2))
  {
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x1002474A8);
  }
  uint64_t v9 = a3 + 16;
  uint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  switch(v11 >> 62)
  {
    case 1uLL:
      if (v10 >> 32 >= v7) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 2uLL:
      if (*(void *)(v10 + 24) >= v7) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      if (v7 >= 1) {
        goto LABEL_10;
      }
      goto LABEL_6;
    default:
      if (BYTE6(v11) < v7)
      {
LABEL_10:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v17 = 0;
        *(void *)(v17 + 8) = 0;
LABEL_11:
        *(unsigned char *)(v17 + 16) = 2;
        return swift_willThrow();
      }
LABEL_6:
      if (v7 < v6) {
        goto LABEL_26;
      }
      uint64_t v12 = Data._Representation.subscript.getter();
      unint64_t v14 = v13;
      unsigned int v15 = sub_100257908(v12, v13);
      if (v3) {
        return sub_10000C970(v12, v14);
      }
      unsigned int v18 = v15;
      sub_10000C970(v12, v14);
      if ((a1 & 0x100000000) != 0) {
        goto LABEL_17;
      }
      if ((a1 & 0xFFFF0000) != 0) {
        goto LABEL_27;
      }
      if ((unsigned __int16)v18 == (unsigned __int16)a1) {
        goto LABEL_22;
      }
LABEL_17:
      unsigned int v19 = bswap32(v18) >> 16;
      if (v19 == 1)
      {
        swift_beginAccess();
        uint64_t v27 = *(void *)(a3 + 40);
        sub_100039448(v9, v27);
        uint64_t v28 = UnkeyedDecodingContainer.decodeData(with:)(16, v27);
        unint64_t v30 = v29;
        swift_endAccess();
        unsigned int v31 = sub_10025B4B8(v28, v30);
        sub_10000C970(v28, v30);
        unint64_t v24 = sub_1001C7008((unsigned __int16)bswap32(v31));
        if ((v24 & 0xFF00000000) != 0x300000000)
        {
          unint64_t v26 = v24 & 0xFFFFFFFF00000000;
          unint64_t v25 = v24;
          return v26 & 0xFF00000000 | v24 | v25 & 0xFF0000000000;
        }
        goto LABEL_22;
      }
      if (v19 != 2) {
        goto LABEL_22;
      }
      swift_beginAccess();
      uint64_t v20 = *(void *)(a3 + 40);
      sub_100039448(v9, v20);
      uint64_t v21 = UnkeyedDecodingContainer.decodeData(with:)(24, v20);
      unint64_t v23 = v22;
      swift_endAccess();
      sub_10025B350(v21, v23, (uint64_t)v32);
      sub_10000C970(v21, v23);
      unint64_t v24 = sub_1001C7008(bswap32(v33) >> 16);
      if ((v24 & 0xFF00000000) == 0x300000000)
      {
LABEL_22:
        sub_10000F000();
        swift_allocError();
        *(_OWORD *)uint64_t v17 = xmmword_1003B00B0;
        goto LABEL_11;
      }
      unint64_t v25 = v24;
      unint64_t v26 = v24 & 0xFFFF00000000;
      return v26 & 0xFF00000000 | v24 | v25 & 0xFF0000000000;
  }
}

double sub_1002474B8@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  unint64_t v7 = a2 >> 62;
  sub_100013D44(a1, a2);
  unint64_t v8 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v9 = type metadata accessor for BinaryDecoder();
  uint64_t v10 = (void *)swift_allocObject();
  v10[5] = &_swiftEmptyDictionarySingleton;
  unsigned char v10[2] = a1;
  v10[3] = a2;
  uint64_t v11 = 0;
  switch(v7)
  {
    case 1uLL:
      uint64_t v11 = (int)a1;
      break;
    case 2uLL:
      uint64_t v11 = *(void *)(a1 + 16);
      break;
    default:
      break;
  }
  v10[4] = v11;
  swift_beginAccess();
  v10[5] = v8;
  swift_bridgeObjectRelease();
  v18[3] = v9;
  v18[4] = sub_10024DC6C((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
  v18[0] = v10;
  sub_10019E96C(v18, v19);
  if (!v3)
  {
    long long v13 = v27;
    a3[8] = v26;
    a3[9] = v13;
    a3[10] = v28[0];
    *(_OWORD *)((char *)a3 + 169) = *(_OWORD *)((char *)v28 + 9);
    long long v14 = v23;
    a3[4] = v22;
    a3[5] = v14;
    long long v15 = v25;
    a3[6] = v24;
    a3[7] = v15;
    long long v16 = v19[1];
    *a3 = v19[0];
    a3[1] = v16;
    double result = *(double *)&v20;
    long long v17 = v21;
    a3[2] = v20;
    a3[3] = v17;
  }
  return result;
}

uint64_t sub_100247640@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v7 = a2 >> 62;
  sub_100013D44(a1, a2);
  unint64_t v8 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v9 = type metadata accessor for BinaryDecoder();
  uint64_t v10 = (void *)swift_allocObject();
  v10[5] = &_swiftEmptyDictionarySingleton;
  unsigned char v10[2] = a1;
  v10[3] = a2;
  uint64_t v11 = 0;
  switch(v7)
  {
    case 1uLL:
      uint64_t v11 = (int)a1;
      break;
    case 2uLL:
      uint64_t v11 = *(void *)(a1 + 16);
      break;
    default:
      break;
  }
  v10[4] = v11;
  swift_beginAccess();
  v10[5] = v8;
  swift_bridgeObjectRelease();
  v16[3] = v9;
  void v16[4] = sub_10024DC6C((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
  v16[0] = v10;
  uint64_t result = sub_10019F2B0(v16);
  if (!v3)
  {
    *(unsigned char *)a3 = result;
    *(void *)(a3 + 8) = v13;
    *(void *)(a3 + 16) = v14;
    *(void *)(a3 + 24) = v15;
  }
  return result;
}

uint64_t sub_100247790(__int16 a1, uint64_t a2, unint64_t a3)
{
  __int16 __src = a1;
  unint64_t v3 = a3 >> 62;
  LOWORD(v6) = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      LODWORD(v6) = HIDWORD(a2) - a2;
      if (__OFSUB__(HIDWORD(a2), a2)) {
        goto LABEL_33;
      }
      unint64_t v6 = (int)v6;
LABEL_6:
      if ((v6 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
      }
      if (v6 >> 16) {
        goto LABEL_26;
      }
LABEL_8:
      __int16 v31 = v6;
      uint64_t v10 = sub_100260F60(&__src, 2);
      unint64_t v12 = v11;
      uint64_t v13 = sub_100260F60(&v31, 2);
      unint64_t v15 = v14;
      uint64_t v35 = v10;
      unint64_t v36 = v12;
      sub_100013D44(v10, v12);
      sub_100125FAC(v13, v15);
      sub_10000C970(v13, v15);
      sub_10000C970(v10, v12);
      uint64_t v16 = v35;
      unint64_t v17 = v36;
      uint64_t v33 = v35;
      unint64_t v34 = v36;
      sub_100013D44(a2, a3);
      sub_100013D44(v16, v17);
      sub_100125FAC(a2, a3);
      sub_10000C970(a2, a3);
      sub_10000C970(v16, v17);
      uint64_t v18 = v33;
      unint64_t v19 = v34;
      LOWORD(v20) = 0;
      switch((int)v3)
      {
        case 0:
          LOWORD(v20) = BYTE6(a3);
          goto LABEL_15;
        case 1:
          LODWORD(v20) = HIDWORD(a2) - a2;
          if (__OFSUB__(HIDWORD(a2), a2)) {
            goto LABEL_35;
          }
          unint64_t v20 = (int)v20;
LABEL_13:
          if ((v20 & 0x8000000000000000) != 0) {
            goto LABEL_27;
          }
          if (v20 >> 16) {
            goto LABEL_28;
          }
LABEL_15:
          int v23 = (unsigned __int16)v20 + 3;
          if ((v23 & 0x10000) != 0) {
            goto LABEL_29;
          }
          LOWORD(v24) = 0;
          switch((int)v3)
          {
            case 0:
              LOWORD(v24) = BYTE6(a3);
              goto LABEL_23;
            case 1:
              if (__OFSUB__(HIDWORD(a2), a2)) {
                goto LABEL_37;
              }
              unint64_t v24 = HIDWORD(a2) - (int)a2;
LABEL_21:
              if ((v24 & 0x8000000000000000) != 0) {
                goto LABEL_30;
              }
              if (v24 >> 16) {
                goto LABEL_31;
              }
LABEL_23:
              if ((((v23 & 0xFFFC) - (unsigned __int16)v24) & 0xFFFF0000) != 0) {
                goto LABEL_32;
              }
              uint64_t v27 = sub_100126710((unsigned __int16)((v23 & 0xFFFC) - v24));
              unint64_t v29 = v28;
              uint64_t v35 = v18;
              unint64_t v36 = v19;
              sub_100013D44(v18, v19);
              sub_100125FAC(v27, v29);
              sub_10000C970(v27, v29);
              sub_10000C970(v18, v19);
              return v35;
            case 2:
              uint64_t v26 = *(void *)(a2 + 16);
              uint64_t v25 = *(void *)(a2 + 24);
              BOOL v9 = __OFSUB__(v25, v26);
              unint64_t v24 = v25 - v26;
              if (!v9) {
                goto LABEL_21;
              }
              goto LABEL_38;
            case 3:
              goto LABEL_23;
            default:
              goto LABEL_39;
          }
        case 2:
          uint64_t v22 = *(void *)(a2 + 16);
          uint64_t v21 = *(void *)(a2 + 24);
          BOOL v9 = __OFSUB__(v21, v22);
          unint64_t v20 = v21 - v22;
          if (!v9) {
            goto LABEL_13;
          }
          goto LABEL_36;
        case 3:
          goto LABEL_15;
        default:
LABEL_39:
          JUMPOUT(0);
      }
    case 2uLL:
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v7 = *(void *)(a2 + 24);
      BOOL v9 = __OFSUB__(v7, v8);
      unint64_t v6 = v7 - v8;
      if (!v9) {
        goto LABEL_6;
      }
      goto LABEL_34;
    case 3uLL:
      goto LABEL_8;
    default:
      LOWORD(v6) = BYTE6(a3);
      goto LABEL_8;
  }
}

NSObject *sub_100247AA0(unsigned int a1, void *a2, unint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a1 < 0x10000) {
    return sub_10024177C(7233902, 0xE300000000000000, a1, a2, a3, a4 & 1, a5, a6, *(void *)(a7 + 16));
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100247B44(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = *(void *)(a4 - 8);
  __chkstk_darwin();
  unint64_t v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v13 + 16))(v15);
  uint64_t v21 = a3;
  uint64_t v22 = a4;
  uint64_t v23 = a5;
  uint64_t v24 = a6;
  uint64_t v25 = a2;
  uint64_t v26 = v6;
  int v27 = a1;
  uint64_t v16 = sub_100010BCC((uint64_t *)&unk_1004843F0);
  sub_1002322C0((uint64_t)v15, (uint64_t)sub_10024DD58, (uint64_t)v20, a4, v16, (uint64_t)&type metadata for () + 8, (uint64_t)&protocol self-conformance witness table for Error, (uint64_t)&v19);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, a4);
}

uint64_t sub_100247CE0(uint64_t a1, unsigned char *a2, uint64_t a3, unsigned int a4)
{
  unint64_t v20 = a2;
  uint64_t v5 = type metadata accessor for Data.Deallocator();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for Data.Deallocator.none(_:), v5);
  Data.Deallocator._deallocator.getter();
  type metadata accessor for __DataStorage();
  swift_allocObject();
  swift_retain();
  uint64_t v9 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
  uint64_t v10 = sub_100003D88(v9, 1);
  unint64_t v12 = v11;
  swift_release();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (a4 >= 0x10000)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v13 = v21;
    uint64_t v14 = sub_100240C34(7233902, 0xE300000000000000, a4, v10, v12, 1);
    unint64_t v16 = v15;
    uint64_t result = sub_10000C970(v10, v12);
    if (!v13)
    {
      char v18 = sub_100257954(v14, v16);
      uint64_t result = sub_10000C970(v14, v16);
      *unint64_t v20 = v18;
    }
  }
  return result;
}

uint64_t sub_100247F28(uint64_t a1, _DWORD *a2, uint64_t a3, unsigned int a4)
{
  unint64_t v20 = a2;
  uint64_t v5 = type metadata accessor for Data.Deallocator();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for Data.Deallocator.none(_:), v5);
  Data.Deallocator._deallocator.getter();
  type metadata accessor for __DataStorage();
  swift_allocObject();
  swift_retain();
  uint64_t v9 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
  uint64_t v10 = sub_100003D88(v9, 4);
  unint64_t v12 = v11;
  swift_release();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (a4 >= 0x10000)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v13 = v21;
    uint64_t v14 = sub_100240C34(7233902, 0xE300000000000000, a4, v10, v12, 1);
    unint64_t v16 = v15;
    uint64_t result = sub_10000C970(v10, v12);
    if (!v13)
    {
      int v18 = sub_10025B758(v14, v16);
      uint64_t result = sub_10000C970(v14, v16);
      *unint64_t v20 = v18;
    }
  }
  return result;
}

uint64_t sub_100248180(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v33 = a7;
  uint64_t v34 = a8;
  uint64_t v31 = a5;
  uint64_t v32 = a3;
  unsigned int v30 = a4;
  uint64_t v29 = a2;
  uint64_t v11 = type metadata accessor for Data.Deallocator();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = *(void *)(a6 - 8);
  uint64_t v15 = *(void *)(v28 + 64);
  __chkstk_darwin();
  unint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for Data.Deallocator.none(_:), v11);
  Data.Deallocator._deallocator.getter();
  if (v15)
  {
    type metadata accessor for __DataStorage();
    swift_allocObject();
    swift_retain();
    uint64_t v17 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
    int v18 = (void *)sub_100003D88(v17, v15);
    unint64_t v20 = v19;
    swift_release();
  }
  else
  {
    uint64_t v21 = (void (*)(uint64_t, void))Data.Deallocator._deallocator.getter();
    v21(a1, 0);
    swift_release();
    swift_release();
    int v18 = 0;
    unint64_t v20 = 0xC000000000000000;
  }
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v22 = v35;
  uint64_t v23 = sub_100247AA0(v30, v18, v20, 1, v31, v33, v34);
  unint64_t v25 = v24;
  uint64_t result = sub_10000C970((uint64_t)v18, v20);
  if (v22)
  {
    *a9 = v22;
  }
  else
  {
    Data.load<A>(as:)(a6, (uint64_t)v23, v25, a6);
    sub_10000C970((uint64_t)v23, v25);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 40))(v29, v16, a6);
  }
  return result;
}

uint64_t sub_100248448(unsigned int a1, char a2)
{
  char v11 = a2;
  uint64_t v4 = sub_10011A3BC((uint64_t)&v11, (uint64_t)&v12);
  if (a1 >= 0x10000)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v6 = v4;
    unint64_t v7 = v5;
    uint64_t v8 = sub_100240C34(7233902, 0xE300000000000000, a1, v4, v5, 1);
    if (!v2) {
      sub_10000C970(v8, v9);
    }
    return sub_10000C970(v6, v7);
  }
  return result;
}

uint64_t sub_10024855C(unsigned int a1, int a2)
{
  int v11 = a2;
  uint64_t v4 = sub_10011A3BC((uint64_t)&v11, (uint64_t)&v12);
  if (a1 >= 0x10000)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v6 = v4;
    unint64_t v7 = v5;
    uint64_t v8 = sub_100240C34(7233902, 0xE300000000000000, a1, v4, v5, 1);
    if (!v2) {
      sub_10000C970(v8, v9);
    }
    return sub_10000C970(v6, v7);
  }
  return result;
}

uint64_t sub_100248670(unsigned int a1, uint64_t a2)
{
  uint64_t v11 = a2;
  uint64_t v4 = sub_10011A3BC((uint64_t)&v11, (uint64_t)&v12);
  if (a1 >= 0x10000)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v6 = v4;
    unint64_t v7 = v5;
    uint64_t v8 = sub_100240C34(7233902, 0xE300000000000000, a1, v4, v5, 1);
    if (!v2) {
      sub_10000C970(v8, v9);
    }
    return sub_10000C970(v6, v7);
  }
  return result;
}

uint64_t sub_100248784(unsigned int a1, uint64_t a2)
{
  __int16 v11 = a2;
  char v12 = BYTE2(a2);
  char v13 = BYTE3(a2);
  char v14 = BYTE4(a2);
  char v15 = BYTE5(a2);
  uint64_t v4 = sub_10011A3BC((uint64_t)&v11, (uint64_t)&v16);
  if (a1 >= 0x10000)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v6 = v4;
    unint64_t v7 = v5;
    uint64_t v8 = sub_100240C34(7233902, 0xE300000000000000, a1, v4, v5, 1);
    if (!v2) {
      sub_10000C970(v8, v9);
    }
    return sub_10000C970(v6, v7);
  }
  return result;
}

uint64_t sub_1002488B8(unsigned int a1, int a2)
{
  int v11 = a2;
  uint64_t v4 = sub_10011A3BC((uint64_t)&v11, (uint64_t)&v12);
  if (a1 >= 0x10000)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v6 = v4;
    unint64_t v7 = v5;
    uint64_t v8 = sub_100240C34(7233902, 0xE300000000000000, a1, v4, v5, 1);
    if (!v2) {
      sub_10000C970(v8, v9);
    }
    return sub_10000C970(v6, v7);
  }
  return result;
}

uint64_t sub_1002489DC(unsigned int a1, __int16 a2)
{
  __int16 v11 = a2;
  uint64_t v4 = sub_10011A3BC((uint64_t)&v11, (uint64_t)&v12);
  if (a1 >= 0x10000)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v6 = v4;
    unint64_t v7 = v5;
    uint64_t v8 = sub_100240C34(7233902, 0xE300000000000000, a1, v4, v5, 1);
    if (!v2) {
      sub_10000C970(v8, v9);
    }
    return sub_10000C970(v6, v7);
  }
  return result;
}

uint64_t sub_100248AF0(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned char v10[2] = a3;
  v10[3] = a4;
  v10[4] = a5;
  v10[5] = a6;
  int v11 = a1;
  uint64_t v8 = sub_100010BCC((uint64_t *)&unk_1004843F0);
  return sub_100231FAC(a2, (uint64_t)sub_10024DD90, (uint64_t)v10, a4, v8, (uint64_t)&type metadata for () + 8, (uint64_t)&protocol self-conformance witness table for Error, (uint64_t)&v12);
}

uint64_t sub_100248B90(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  char v14 = (void *)sub_10011A3BC(a1, a2);
  unint64_t v16 = v15;
  uint64_t v17 = sub_100247AA0(a4, v14, v15, 1, a5, a7, a8);
  if (v9)
  {
    uint64_t result = sub_10000C970((uint64_t)v14, v16);
    *a9 = v9;
  }
  else
  {
    sub_10000C970((uint64_t)v17, v18);
    return sub_10000C970((uint64_t)v14, v16);
  }
  return result;
}

uint64_t sub_100248C48(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)sub_100126710(*(void *)(*(void *)(a4 - 8) + 64));
  unint64_t v14 = v13;
  unint64_t v15 = sub_100247AA0(a1, v12, v13, 0, a3, a5, a6);
  unint64_t v17 = v16;
  uint64_t result = sub_10000C970((uint64_t)v12, v14);
  if (!v6)
  {
    Data.load<A>(as:)(a4, (uint64_t)v15, v17, a4);
    return sub_10000C970((uint64_t)v15, v17);
  }
  return result;
}

uint64_t sub_100248D34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (!a1) {
    goto LABEL_22;
  }
  long long v7 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 16) = v7;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a3 + 32);
  if (a4)
  {
    unint64_t v8 = a6 >> 62;
    switch(a6 >> 62)
    {
      case 1uLL:
        LODWORD(v9) = HIDWORD(a5) - a5;
        if (__OFSUB__(HIDWORD(a5), a5)) {
          goto LABEL_20;
        }
        unint64_t v9 = (int)v9;
LABEL_8:
        if ((v9 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (!(v9 >> 16))
        {
LABEL_10:
          swift_retain();
          swift_setAtWritableKeyPath();
          swift_release();
          goto LABEL_11;
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
        break;
      case 2uLL:
        uint64_t v11 = *(void *)(a5 + 16);
        uint64_t v10 = *(void *)(a5 + 24);
        BOOL v12 = __OFSUB__(v10, v11);
        unint64_t v9 = v10 - v11;
        if (!v12) {
          goto LABEL_8;
        }
        goto LABEL_21;
      default:
        goto LABEL_10;
    }
LABEL_22:
    __break(1u);
    JUMPOUT(0x100248EA4);
  }
  unint64_t v8 = a6 >> 62;
LABEL_11:
  switch((int)v8)
  {
    case 0:
    case 3:
      return Data.copyBytes(to:count:)();
    case 1:
      if (!__OFSUB__(HIDWORD(a5), a5)) {
        return Data.copyBytes(to:count:)();
      }
      goto LABEL_18;
    case 2:
      if (__OFSUB__(*(void *)(a5 + 24), *(void *)(a5 + 16))) {
        goto LABEL_19;
      }
      return Data.copyBytes(to:count:)();
    default:
      JUMPOUT(0);
  }
}

uint64_t sub_100248EC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  if (!a1) {
    goto LABEL_22;
  }
  *(void *)a1 = a3;
  *(_WORD *)(a1 + 8) = a4;
  *(unsigned char *)(a1 + 10) = BYTE2(a4);
  *(unsigned char *)(a1 + 11) = BYTE3(a4);
  *(_WORD *)(a1 + 12) = WORD2(a4);
  if (a5)
  {
    unint64_t v8 = a7 >> 62;
    switch(a7 >> 62)
    {
      case 1uLL:
        LODWORD(v9) = HIDWORD(a6) - a6;
        if (__OFSUB__(HIDWORD(a6), a6)) {
          goto LABEL_20;
        }
        unint64_t v9 = (int)v9;
LABEL_8:
        if ((v9 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (!(v9 >> 16))
        {
LABEL_10:
          swift_retain();
          swift_setAtWritableKeyPath();
          swift_release();
          goto LABEL_11;
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
        break;
      case 2uLL:
        uint64_t v11 = *(void *)(a6 + 16);
        uint64_t v10 = *(void *)(a6 + 24);
        BOOL v12 = __OFSUB__(v10, v11);
        unint64_t v9 = v10 - v11;
        if (!v12) {
          goto LABEL_8;
        }
        goto LABEL_21;
      default:
        goto LABEL_10;
    }
LABEL_22:
    __break(1u);
    JUMPOUT(0x10024907CLL);
  }
  unint64_t v8 = a7 >> 62;
LABEL_11:
  switch((int)v8)
  {
    case 0:
    case 3:
      return Data.copyBytes(to:count:)();
    case 1:
      if (!__OFSUB__(HIDWORD(a6), a6)) {
        return Data.copyBytes(to:count:)();
      }
      goto LABEL_18;
    case 2:
      if (__OFSUB__(*(void *)(a6 + 24), *(void *)(a6 + 16))) {
        goto LABEL_19;
      }
      return Data.copyBytes(to:count:)();
    default:
      JUMPOUT(0);
  }
}

uint64_t sub_10024909C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  if (!a1) {
    goto LABEL_22;
  }
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = a5;
  *(_WORD *)(a1 + 24) = a6;
  *(unsigned char *)(a1 + 26) = BYTE2(a6);
  *(unsigned char *)(a1 + 27) = BYTE3(a6);
  *(_WORD *)(a1 + 28) = WORD2(a6);
  if (a7)
  {
    unint64_t v10 = a9 >> 62;
    switch(a9 >> 62)
    {
      case 1uLL:
        LODWORD(v11) = HIDWORD(a8) - a8;
        if (__OFSUB__(HIDWORD(a8), a8)) {
          goto LABEL_20;
        }
        unint64_t v11 = (int)v11;
LABEL_8:
        if ((v11 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (!(v11 >> 16))
        {
LABEL_10:
          swift_retain();
          swift_setAtWritableKeyPath();
          swift_release();
          goto LABEL_11;
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
        break;
      case 2uLL:
        uint64_t v13 = *(void *)(a8 + 16);
        uint64_t v12 = *(void *)(a8 + 24);
        BOOL v14 = __OFSUB__(v12, v13);
        unint64_t v11 = v12 - v13;
        if (!v14) {
          goto LABEL_8;
        }
        goto LABEL_21;
      default:
        goto LABEL_10;
    }
LABEL_22:
    __break(1u);
    JUMPOUT(0x1002492B4);
  }
  unint64_t v10 = a9 >> 62;
LABEL_11:
  switch((int)v10)
  {
    case 0:
    case 3:
      return Data.copyBytes(to:count:)();
    case 1:
      if (!__OFSUB__(HIDWORD(a8), a8)) {
        return Data.copyBytes(to:count:)();
      }
      goto LABEL_18;
    case 2:
      if (__OFSUB__(*(void *)(a8 + 24), *(void *)(a8 + 16))) {
        goto LABEL_19;
      }
      return Data.copyBytes(to:count:)();
    default:
      JUMPOUT(0);
  }
}

uint64_t sub_1002492D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12 = __chkstk_darwin();
  if (!v12) {
    goto LABEL_18;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a9 - 8) + 24))(v12, v13, a9);
  if (a4)
  {
    unint64_t v14 = a6 >> 62;
    switch(a6 >> 62)
    {
      case 1uLL:
        if (!__OFSUB__(HIDWORD(a5), a5)) {
          goto LABEL_8;
        }
        goto LABEL_16;
      case 2uLL:
        if (!__OFSUB__(*(void *)(a5 + 24), *(void *)(a5 + 16))) {
          goto LABEL_8;
        }
        goto LABEL_17;
      default:
LABEL_8:
        sub_10003AAFC();
        swift_retain();
        dispatch thunk of BinaryInteger.init<A>(_:)();
        swift_setAtWritableKeyPath();
        swift_release();
        break;
    }
  }
  else
  {
    unint64_t v14 = a6 >> 62;
  }
  switch((int)v14)
  {
    case 0:
    case 3:
      return Data.copyBytes(to:count:)();
    case 1:
      if (!__OFSUB__(HIDWORD(a5), a5)) {
        return Data.copyBytes(to:count:)();
      }
      __break(1u);
      goto LABEL_15;
    case 2:
      if (__OFSUB__(*(void *)(a5 + 24), *(void *)(a5 + 16)))
      {
LABEL_15:
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
        JUMPOUT(0x1002494F4);
      }
      return Data.copyBytes(to:count:)();
    default:
      JUMPOUT(0);
  }
}

uint64_t sub_100249514(uint64_t a1, uint64_t a2)
{
  long long v34 = xmmword_1003B2440;
  uint64_t v3 = *(void *)(a2 + 16);
  if (!v3) {
    return 0;
  }
  swift_bridgeObjectRetain_n();
  unint64_t v5 = (unint64_t *)(a2 + 40);
  while (2)
  {
    uint64_t v6 = *(v5 - 1);
    unint64_t v7 = *v5;
    unint64_t v8 = *v5 >> 62;
    unint64_t v9 = v5 + 2;
    switch(v8)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v6), v6)) {
          goto LABEL_37;
        }
        uint64_t v10 = HIDWORD(v6) - (int)v6;
LABEL_11:
        sub_100013D44(v6, v7);
        sub_100013D44(v6, v7);
        if (v10 >= 255)
        {
LABEL_33:
          sub_10000F000();
          swift_allocError();
          *(void *)uint64_t v26 = 0;
          *(void *)(v26 + 8) = 0;
          *(unsigned char *)(v26 + 16) = 2;
          swift_willThrow();
          sub_10000C970(v6, v7);
LABEL_34:
          sub_10000C970(v34, *((unint64_t *)&v34 + 1));
          sub_10000C970(v6, v7);
          return swift_bridgeObjectRelease_n();
        }
        else
        {
LABEL_12:
          uint64_t v29 = v9;
          uint64_t v30 = v3;
          unint64_t v13 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
          type metadata accessor for BinaryEncoder();
          uint64_t v14 = swift_allocObject();
          *(_OWORD *)(v14 + 16) = xmmword_1003B2440;
          *(void *)(v14 + 32) = v13;
          unint64_t v15 = &type metadata for BinaryEncoder.UnkeyedContainer;
          uint64_t v32 = &type metadata for BinaryEncoder.UnkeyedContainer;
          uint64_t v33 = (void *)sub_100088B84();
          v31[0] = v14;
          switch((int)v8)
          {
            case 0:
            case 3:
              goto LABEL_19;
            case 1:
              if (__OFSUB__(HIDWORD(v6), v6)) {
                goto LABEL_39;
              }
              unint64_t v16 = HIDWORD(v6) - (int)v6;
LABEL_16:
              sub_100013D44(v6, v7);
              if ((v16 & 0x8000000000000000) != 0)
              {
                __break(1u);
LABEL_36:
                __break(1u);
LABEL_37:
                __break(1u);
LABEL_38:
                __break(1u);
LABEL_39:
                __break(1u);
LABEL_40:
                __break(1u);
LABEL_41:
                __break(1u);
LABEL_42:
                __break(1u);
LABEL_43:
                __break(1u);
LABEL_44:
                __break(1u);
              }
              if (v16 > 0xFF) {
                goto LABEL_36;
              }
              unint64_t v15 = v32;
LABEL_19:
              sub_100039448((uint64_t)v31, (uint64_t)v15);
              swift_retain_n();
              dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
              if (v2)
              {
                sub_100010754((uint64_t)v31);
                swift_release();
                sub_10000C970(v6, v7);
                swift_release();
                sub_10000C970(v6, v7);
                goto LABEL_34;
              }
              sub_100039448((uint64_t)v31, (uint64_t)v32);
              sub_1000742DC();
              dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
              sub_100010754((uint64_t)v31);
              swift_release();
              sub_10000C970(v6, v7);
              swift_beginAccess();
              uint64_t v19 = *(void *)(v14 + 16);
              unint64_t v20 = *(void *)(v14 + 24);
              sub_100013D44(v19, v20);
              swift_release();
              sub_10000C970(v6, v7);
              uint64_t v32 = (ValueMetadata *)&type metadata for Data;
              uint64_t v33 = &protocol witness table for Data;
              v31[0] = v19;
              v31[1] = v20;
              uint64_t v21 = sub_1000369C4(v31, (uint64_t)&type metadata for Data);
              uint64_t v23 = *v21;
              unint64_t v22 = v21[1];
              switch(v22 >> 62)
              {
                case 1uLL:
                  uint64_t v28 = v6;
                  if (v23 >> 32 < (int)v23) {
                    goto LABEL_41;
                  }
                  sub_100013D44(v19, v20);
                  sub_100013D44(v23, v22);
                  if (__DataStorage._bytes.getter() && __OFSUB__((int)v23, __DataStorage._offset.getter())) {
                    goto LABEL_44;
                  }
                  __DataStorage._length.getter();
                  Data._Representation.append(contentsOf:)();
                  sub_10000C970(v23, v22);
                  break;
                case 2uLL:
                  uint64_t v28 = v6;
                  uint64_t v24 = *(void *)(v23 + 16);
                  uint64_t v27 = *(void *)(v23 + 24);
                  sub_100013D44(v19, v20);
                  swift_retain();
                  swift_retain();
                  if (__DataStorage._bytes.getter() && __OFSUB__(v24, __DataStorage._offset.getter())) {
                    goto LABEL_43;
                  }
                  if (__OFSUB__(v27, v24)) {
                    goto LABEL_42;
                  }
                  __DataStorage._length.getter();
                  Data._Representation.append(contentsOf:)();
                  swift_release();
                  swift_release();
                  break;
                default:
                  sub_100013D44(v19, v20);
                  Data._Representation.append(contentsOf:)();
                  goto LABEL_4;
              }
              uint64_t v6 = v28;
LABEL_4:
              unint64_t v5 = v29;
              sub_100010754((uint64_t)v31);
              sub_10000C970(v19, v20);
              sub_10000C970(v6, v7);
              uint64_t v3 = v30 - 1;
              if (v30 != 1) {
                continue;
              }
              swift_bridgeObjectRelease_n();
              uint64_t result = v34;
              break;
            case 2:
              uint64_t v18 = *(void *)(v6 + 16);
              uint64_t v17 = *(void *)(v6 + 24);
              unint64_t v16 = v17 - v18;
              if (!__OFSUB__(v17, v18)) {
                goto LABEL_16;
              }
              goto LABEL_40;
            default:
              JUMPOUT(0);
          }
        }
        return result;
      case 2uLL:
        uint64_t v12 = *(void *)(v6 + 16);
        uint64_t v11 = *(void *)(v6 + 24);
        uint64_t v10 = v11 - v12;
        if (!__OFSUB__(v11, v12)) {
          goto LABEL_11;
        }
        goto LABEL_38;
      case 3uLL:
        goto LABEL_12;
      default:
        if (BYTE6(v7) == 255) {
          goto LABEL_33;
        }
        goto LABEL_12;
    }
  }
}

uint64_t sub_100249B4C(uint64_t a1, uint64_t a2)
{
  __int16 v3 = *(_WORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v39 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 40);
  char v7 = *(unsigned char *)(a2 + 48);
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  if ((v3 & 2) != 0) {
    __int16 v8 = 2;
  }
  else {
    __int16 v8 = v3 & 1;
  }
  unint64_t v9 = sub_10008CC20(3, 2, v3, v3 & 1);
  if (v2) {
    goto LABEL_43;
  }
  char v10 = _s7CoreP2P20NANAvailabilityEntryV15UsagePreferenceO8rawValueAESgSi_tcfC_0(v9);
  if (v10 == 4)
  {
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v38 = xmmword_1003B00B0;
    *(unsigned char *)(v38 + 16) = 2;
    swift_willThrow();
LABEL_43:
    swift_unexpectedError();
    __break(1u);
    swift_unexpectedError();
    __break(1u);
    goto LABEL_44;
  }
  __int16 v48 = v8 & 0xFCFF | ((((v10 & 0x30) >> 4) & 3) << 8);
  uint64_t result = sub_10008CC20(8, 4, v3, (v10 & 0x30) >> 4);
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
LABEL_41:
    __break(1u);
  }
  if (result > 0x7FFFFFFF) {
    goto LABEL_41;
  }
  if ((result & 0xF000) != 0)
  {
LABEL_44:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v5 >> 60 == 15)
  {
    HIBYTE(v47) = 0;
    __int16 v12 = v48;
    if ((v7 & 1) == 0)
    {
LABEL_11:
      __int16 v48 = v12 | 0x100;
      uint64_t v13 = *(void *)(v6 + 16);
      if (!v13) {
        return result;
      }
      uint64_t v14 = (unsigned __int8 *)(v6 + 32);
      swift_bridgeObjectRetain();
      do
      {
        int v15 = *v14++;
        swift_beginAccess();
        HIDWORD(v46) = v15;
        char v44 = &type metadata for UnsafeMutableRawBufferPointer;
        uint64_t v45 = &protocol witness table for UnsafeMutableRawBufferPointer;
        uint64_t v42 = &v46;
        uint64_t v43 = v49;
        unint64_t v16 = (const void **)sub_1000369C4(&v42, (uint64_t)&type metadata for UnsafeMutableRawBufferPointer);
        uint64_t v17 = *v16;
        if (*v16 && (uint64_t v18 = v16[1], v19 = v18 - v17, v18 != v17))
        {
          if (v19 <= 14)
          {
            memset(__dst, 0, sizeof(__dst));
            unsigned __int8 v41 = (_BYTE)v18 - (_BYTE)v17;
            memcpy(__dst, v17, v18 - v17);
            uint64_t v20 = *(void *)__dst;
            unint64_t v21 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v41 << 48);
          }
          else
          {
            type metadata accessor for __DataStorage();
            swift_allocObject();
            uint64_t v22 = __DataStorage.init(bytes:length:)();
            uint64_t v23 = v22;
            if ((unint64_t)v19 >= 0x7FFFFFFF)
            {
              type metadata accessor for Data.RangeReference();
              uint64_t v20 = swift_allocObject();
              *(void *)(v20 + 16) = 0;
              *(void *)(v20 + 24) = v19;
              unint64_t v21 = v23 | 0x8000000000000000;
            }
            else
            {
              uint64_t v20 = v19 << 32;
              unint64_t v21 = v22 | 0x4000000000000000;
            }
          }
        }
        else
        {
          uint64_t v20 = 0;
          unint64_t v21 = 0xC000000000000000;
        }
        sub_100010754((uint64_t)&v42);
        Data.append(_:)();
        swift_endAccess();
        sub_10000C970(v20, v21);
        if (v5 >> 60 != 15)
        {
          sub_100013D44(v4, v5);
          Data.append(_:)();
          sub_10006E0D8(v39, v4, v5);
        }
        --v13;
      }
      while (v13);
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_100013D44(v4, v5);
    sub_10024A124((uint64_t)&v46, v39, v4, v5, v24);
    uint64_t result = sub_10006E0D8(v39, v4, v5);
    __int16 v12 = v48;
    if ((v7 & 1) == 0) {
      goto LABEL_11;
    }
  }
  __int16 v48 = v12 | 0x200;
  uint64_t v25 = *(void *)(v6 + 16);
  if (!v25) {
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t v26 = (unsigned __int8 *)(v6 + 36);
  do
  {
    int v27 = *(v26 - 4);
    int v28 = *(v26 - 1);
    int v29 = *v26;
    swift_beginAccess();
    HIDWORD(v46) = v27 | (v28 << 16) | (v29 << 24);
    char v44 = &type metadata for UnsafeMutableRawBufferPointer;
    uint64_t v45 = &protocol witness table for UnsafeMutableRawBufferPointer;
    uint64_t v42 = &v46;
    uint64_t v43 = v49;
    uint64_t v30 = (const void **)sub_1000369C4(&v42, (uint64_t)&type metadata for UnsafeMutableRawBufferPointer);
    uint64_t v31 = *v30;
    if (*v30 && (uint64_t v32 = v30[1], v33 = v32 - v31, v32 != v31))
    {
      if (v33 <= 14)
      {
        memset(__dst, 0, sizeof(__dst));
        unsigned __int8 v41 = (_BYTE)v32 - (_BYTE)v31;
        memcpy(__dst, v31, v32 - v31);
        uint64_t v34 = *(void *)__dst;
        unint64_t v35 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v41 << 48);
      }
      else
      {
        type metadata accessor for __DataStorage();
        swift_allocObject();
        uint64_t v36 = __DataStorage.init(bytes:length:)();
        uint64_t v37 = v36;
        if ((unint64_t)v33 >= 0x7FFFFFFF)
        {
          type metadata accessor for Data.RangeReference();
          uint64_t v34 = swift_allocObject();
          *(void *)(v34 + 16) = 0;
          *(void *)(v34 + 24) = v33;
          unint64_t v35 = v37 | 0x8000000000000000;
        }
        else
        {
          uint64_t v34 = v33 << 32;
          unint64_t v35 = v36 | 0x4000000000000000;
        }
      }
    }
    else
    {
      uint64_t v34 = 0;
      unint64_t v35 = 0xC000000000000000;
    }
    sub_100010754((uint64_t)&v42);
    Data.append(_:)();
    swift_endAccess();
    sub_10000C970(v34, v35);
    if (v5 >> 60 != 15)
    {
      sub_100013D44(v4, v5);
      Data.append(_:)();
      sub_10006E0D8(v39, v4, v5);
    }
    v26 += 10;
    --v25;
  }
  while (v25);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10024A124@<X0>(uint64_t a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X8>)
{
  unint64_t v9 = sub_10008C80C(6, 9, a2, a5);
  if ((v9 & 0x8000000000000000) != 0 || v9 >= 0x10000) {
    goto LABEL_28;
  }
  *(_WORD *)(a1 + 2) = v9;
  unint64_t v10 = sub_10008C940(3uLL, 3, a2);
  unint64_t v11 = a4 >> 62;
  char v12 = _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO0F9AlgorithmO8rawValueAISgs5UInt8V_tcfC_0(v10);
  if (v12 == 8)
  {
    *(unsigned char *)(a1 + 14) = 0;
    LOBYTE(v13) = 0;
    switch(v11)
    {
      case 1uLL:
        goto LABEL_7;
      case 2uLL:
        goto LABEL_9;
      case 3uLL:
        goto LABEL_12;
      default:
        goto LABEL_5;
    }
  }
  *(unsigned char *)(a1 + 14) = v12;
  LOBYTE(v13) = 0;
  switch(v11)
  {
    case 1uLL:
LABEL_7:
      LODWORD(v13) = HIDWORD(a3) - a3;
      if (__OFSUB__(HIDWORD(a3), a3)) {
        goto LABEL_24;
      }
      unint64_t v13 = (int)v13;
LABEL_10:
      if ((v13 & 0x8000000000000000) != 0 || v13 >= 0x100) {
        goto LABEL_28;
      }
      break;
    case 2uLL:
LABEL_9:
      uint64_t v15 = *(void *)(a3 + 16);
      uint64_t v14 = *(void *)(a3 + 24);
      BOOL v16 = __OFSUB__(v14, v15);
      unint64_t v13 = v14 - v15;
      if (!v16) {
        goto LABEL_10;
      }
      goto LABEL_25;
    case 3uLL:
      break;
    default:
LABEL_5:
      LOBYTE(v13) = BYTE6(a4);
      break;
  }
LABEL_12:
  *(unsigned char *)(a1 + 15) = v13;
  unint64_t v17 = sub_10008C940(0, 3, a2);
  uint64_t result = _s7CoreP2P19NANIntervalDurationO8rawValueACSgs5UInt8V_tcfC_0(v17);
  LOWORD(v19) = 0;
  switch(v11)
  {
    case 0uLL:
      LOWORD(v19) = BYTE6(a4);
      goto LABEL_19;
    case 1uLL:
      LODWORD(v19) = HIDWORD(a3) - a3;
      if (__OFSUB__(HIDWORD(a3), a3)) {
        goto LABEL_26;
      }
      unint64_t v19 = (int)v19;
LABEL_17:
      if ((v19 & 0x8000000000000000) != 0 || v19 >= 0x10000) {
        goto LABEL_28;
      }
LABEL_19:
      int v22 = (unsigned __int16)v19 + 18;
      if ((v22 & 0x10000) != 0)
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        swift_unexpectedError();
        __break(1u);
        JUMPOUT(0x10024A3B8);
      }
      int v23 = (unsigned __int16)v22 + 1;
      if ((v23 & 0x10000) != 0) {
        goto LABEL_23;
      }
      *(_WORD *)a1 = v23;
      return result;
    case 2uLL:
      uint64_t v21 = *(void *)(a3 + 16);
      uint64_t v20 = *(void *)(a3 + 24);
      BOOL v16 = __OFSUB__(v20, v21);
      unint64_t v19 = v20 - v21;
      if (!v16) {
        goto LABEL_17;
      }
      goto LABEL_27;
    case 3uLL:
      goto LABEL_19;
    default:
      JUMPOUT(0);
  }
}

uint64_t sub_10024A3E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v14 = (void *)sub_10011A9A8(a1, a2);
  unint64_t v16 = v15;
  unint64_t v20 = v15;
  sub_100013D44((uint64_t)v14, v15);
  sub_100013D44(a4, a5);
  sub_100125FAC(a4, a5);
  sub_10000C970(a4, a5);
  sub_10000C970((uint64_t)v14, v16);
  unint64_t v17 = sub_10024177C(7233902, 0xE300000000000000, 274, v14, v20, 1, a6, a7, *(void *)(a8 + 16));
  if (v21)
  {
    uint64_t result = sub_10000C970((uint64_t)v14, v20);
    *a9 = v21;
  }
  else
  {
    sub_10000C970((uint64_t)v17, v18);
    return sub_10000C970((uint64_t)v14, v20);
  }
  return result;
}

uint64_t sub_10024A500@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for CodingUserInfoKey();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  __int16 v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v2) {
    return sub_100010754((uint64_t)a1);
  }
  sub_100039448((uint64_t)v34, v35);
  UnkeyedDecodingContainer.inferredDecode<A>()();
  int v36 = v32;
  sub_100039448((uint64_t)v34, v35);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v31 = (unsigned __int16)v32;
  sub_1000369C4(a1, a1[3]);
  uint64_t v9 = dispatch thunk of Decoder.userInfo.getter();
  if (qword_10047BFA8 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_1000151B8(v5, (uint64_t)static CodingUserInfoKey.fourByteAlignedValue);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v10, v5);
  if (*(void *)(v9 + 16))
  {
    unint64_t v11 = sub_1000313F0((uint64_t)v8);
    uint64_t v12 = v31;
    if (v13)
    {
      sub_1000107A4(*(void *)(v9 + 56) + 32 * v11, (uint64_t)&v32);
    }
    else
    {
      long long v32 = 0u;
      long long v33 = 0u;
    }
  }
  else
  {
    long long v32 = 0u;
    long long v33 = 0u;
    uint64_t v12 = v31;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (*((void *)&v33 + 1))
  {
    char v14 = swift_dynamicCast();
    char v15 = v36;
    if (v14 & 1) != 0 && (v37)
    {
      uint64_t v16 = v35;
      sub_100039448((uint64_t)v34, v35);
      uint64_t v17 = UnkeyedDecodingContainer.decodeData(with:)((v12 + 3) & 0x1FFFC, v16);
      unint64_t v19 = v18;
      uint64_t v20 = v17;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      switch(v18 >> 62)
      {
        case 1uLL:
          uint64_t v22 = (int)v20;
          v12 += (int)v20;
          uint64_t v21 = v20 >> 32;
          goto LABEL_21;
        case 2uLL:
          uint64_t v22 = *(void *)(v20 + 16);
          BOOL v28 = __OFADD__(v22, v12);
          v12 += v22;
          if (v28) {
            goto LABEL_25;
          }
          uint64_t v21 = *(void *)(v20 + 24);
LABEL_21:
          if (v21 < v22 || v12 < v22)
          {
            __break(1u);
LABEL_25:
            __break(1u);
            JUMPOUT(0x10024A928);
          }
          uint64_t v25 = Data._Representation.subscript.getter();
          unint64_t v27 = v29;
          sub_10000C970(v20, v19);
          break;
        case 3uLL:
          goto LABEL_21;
        default:
          uint64_t v22 = 0;
          uint64_t v21 = BYTE6(v18);
          goto LABEL_21;
      }
      goto LABEL_17;
    }
  }
  else
  {
    sub_1000D4FD4((uint64_t)&v32);
    char v15 = v36;
  }
  uint64_t v23 = v35;
  sub_100039448((uint64_t)v34, v35);
  uint64_t v25 = UnkeyedDecodingContainer.decodeData(with:)(v12, v23);
  unint64_t v27 = v26;
LABEL_17:
  sub_100010754((uint64_t)v34);
  *(unsigned char *)a2 = v15;
  *(void *)(a2 + 8) = v25;
  *(void *)(a2 + 16) = v27;
  sub_100013D44(v25, v27);
  sub_100010754((uint64_t)a1);
  return sub_10000C970(v25, v27);
}

uint64_t sub_10024A938@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for CodingUserInfoKey();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  __int16 v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v2) {
    return sub_100010754((uint64_t)a1);
  }
  sub_100039448((uint64_t)v34, v35);
  UnkeyedDecodingContainer.inferredDecode<A>()();
  int v36 = (unsigned __int16)v32;
  sub_100039448((uint64_t)v34, v35);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v31 = (unsigned __int16)v32;
  sub_1000369C4(a1, a1[3]);
  uint64_t v9 = dispatch thunk of Decoder.userInfo.getter();
  if (qword_10047BFA8 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_1000151B8(v5, (uint64_t)static CodingUserInfoKey.fourByteAlignedValue);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v10, v5);
  if (*(void *)(v9 + 16))
  {
    unint64_t v11 = sub_1000313F0((uint64_t)v8);
    uint64_t v12 = v31;
    if (v13)
    {
      sub_1000107A4(*(void *)(v9 + 56) + 32 * v11, (uint64_t)&v32);
    }
    else
    {
      long long v32 = 0u;
      long long v33 = 0u;
    }
  }
  else
  {
    long long v32 = 0u;
    long long v33 = 0u;
    uint64_t v12 = v31;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (*((void *)&v33 + 1))
  {
    char v14 = swift_dynamicCast();
    __int16 v15 = v36;
    if (v14 & 1) != 0 && (v37)
    {
      uint64_t v16 = v35;
      sub_100039448((uint64_t)v34, v35);
      uint64_t v17 = UnkeyedDecodingContainer.decodeData(with:)((v12 + 3) & 0x1FFFC, v16);
      unint64_t v19 = v18;
      uint64_t v20 = v17;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      switch(v18 >> 62)
      {
        case 1uLL:
          uint64_t v22 = (int)v20;
          v12 += (int)v20;
          uint64_t v21 = v20 >> 32;
          goto LABEL_21;
        case 2uLL:
          uint64_t v22 = *(void *)(v20 + 16);
          BOOL v28 = __OFADD__(v22, v12);
          v12 += v22;
          if (v28) {
            goto LABEL_25;
          }
          uint64_t v21 = *(void *)(v20 + 24);
LABEL_21:
          if (v21 < v22 || v12 < v22)
          {
            __break(1u);
LABEL_25:
            __break(1u);
            JUMPOUT(0x10024AD60);
          }
          uint64_t v25 = Data._Representation.subscript.getter();
          unint64_t v27 = v29;
          sub_10000C970(v20, v19);
          break;
        case 3uLL:
          goto LABEL_21;
        default:
          uint64_t v22 = 0;
          uint64_t v21 = BYTE6(v18);
          goto LABEL_21;
      }
      goto LABEL_17;
    }
  }
  else
  {
    sub_1000D4FD4((uint64_t)&v32);
    __int16 v15 = v36;
  }
  uint64_t v23 = v35;
  sub_100039448((uint64_t)v34, v35);
  uint64_t v25 = UnkeyedDecodingContainer.decodeData(with:)(v12, v23);
  unint64_t v27 = v26;
LABEL_17:
  sub_100010754((uint64_t)v34);
  *(_WORD *)a2 = v15;
  *(void *)(a2 + 8) = v25;
  *(void *)(a2 + 16) = v27;
  sub_100013D44(v25, v27);
  sub_100010754((uint64_t)a1);
  return sub_10000C970(v25, v27);
}

uint64_t sub_10024AD70(void *a1, char a2, uint64_t a3, unint64_t a4)
{
  char v14 = a2;
  uint64_t v15 = a3;
  unint64_t v16 = a4;
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  sub_100039448((uint64_t)v12, v13);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v4)
  {
    switch(a4 >> 62)
    {
      case 1uLL:
        LODWORD(v7) = HIDWORD(a3) - a3;
        if (__OFSUB__(HIDWORD(a3), a3)) {
          goto LABEL_12;
        }
        unint64_t v7 = (int)v7;
LABEL_6:
        if ((v7 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (!(v7 >> 16))
        {
LABEL_8:
          sub_100039448((uint64_t)v12, v13);
          dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
          sub_100039448((uint64_t)v12, v13);
          sub_1000742DC();
          dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
          return sub_100010754((uint64_t)v12);
        }
        __break(1u);
LABEL_12:
        __break(1u);
LABEL_13:
        __break(1u);
        JUMPOUT(0x10024AF14);
      case 2uLL:
        uint64_t v9 = *(void *)(a3 + 16);
        uint64_t v8 = *(void *)(a3 + 24);
        BOOL v10 = __OFSUB__(v8, v9);
        unint64_t v7 = v8 - v9;
        if (!v10) {
          goto LABEL_6;
        }
        goto LABEL_13;
      default:
        goto LABEL_8;
    }
  }
  return sub_100010754((uint64_t)v12);
}

uint64_t sub_10024AF24(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = String.UTF8View._foreignIndex(_:offsetBy:)();
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

uint64_t sub_10024AFA0(uint64_t a1, char a2, uint64_t (*a3)(void *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  v50[3] = a4;
  if (a1 < 0) {
    goto LABEL_42;
  }
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = _swiftEmptyArrayStorage;
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = 15;
  uint64_t v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (uint64_t v12 = HIBYTE(a6) & 0xF) : (uint64_t v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0) {
      uint64_t v11 = a5 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v30 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0) {
      uint64_t v30 = 11;
    }
    sub_10024B444(v30 | (v11 << 16), v47, a2 & 1, v10);
    swift_bridgeObjectRelease();
    unint64_t v13 = *(void **)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_39:
    swift_release();
    return (uint64_t)v13;
  }
  uint64_t v42 = a1;
  uint64_t v43 = v10;
  unint64_t v48 = 4 * v12;
  unint64_t v13 = _swiftEmptyArrayStorage;
  unint64_t v14 = 15;
  unint64_t v15 = 15;
  unint64_t v16 = 15;
  while (1)
  {
    v50[0] = String.subscript.getter();
    v50[1] = v17;
    char v18 = a3(v50);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v13;
    }
    char v19 = v18;
    swift_bridgeObjectRelease();
    if (v19) {
      break;
    }
    unint64_t v14 = String.index(after:)();
LABEL_9:
    if (v48 == v14 >> 14) {
      goto LABEL_29;
    }
  }
  if (v15 >> 14 == v14 >> 14 && (a2 & 1) != 0)
  {
    unint64_t v14 = String.index(after:)();
    *(void *)(v47 + 16) = v14;
    unint64_t v15 = v14;
    unint64_t v16 = v14;
    goto LABEL_9;
  }
  if (v14 >> 14 < v15 >> 14) {
    goto LABEL_41;
  }
  uint64_t v20 = String.subscript.getter();
  uint64_t v44 = v21;
  uint64_t v45 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v13 = sub_1000C71F4(0, v13[2] + 1, 1, v13);
  }
  unint64_t v27 = v13[2];
  unint64_t v26 = v13[3];
  if (v27 >= v26 >> 1) {
    unint64_t v13 = sub_1000C71F4((void *)(v26 > 1), v27 + 1, 1, v13);
  }
  v13[2] = v27 + 1;
  BOOL v28 = &v13[4 * v27];
  v28[4] = v45;
  v28[5] = v23;
  v28[6] = v25;
  v28[7] = v44;
  *(void *)(v43 + 16) = v13;
  uint64_t v29 = String.index(after:)();
  unint64_t v14 = v29;
  *(void *)(v47 + 16) = v29;
  if (v13[2] != v42)
  {
    unint64_t v15 = v29;
    unint64_t v16 = v29;
    goto LABEL_9;
  }
  unint64_t v16 = v29;
  unint64_t v15 = v29;
LABEL_29:
  if (v48 == v15 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_38:
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_39;
  }
  if (v48 >= v16 >> 14)
  {
    uint64_t v31 = String.subscript.getter();
    uint64_t v33 = v32;
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v13 = sub_1000C71F4(0, v13[2] + 1, 1, v13);
    }
    unint64_t v39 = v13[2];
    unint64_t v38 = v13[3];
    if (v39 >= v38 >> 1) {
      unint64_t v13 = sub_1000C71F4((void *)(v38 > 1), v39 + 1, 1, v13);
    }
    v13[2] = v39 + 1;
    int v40 = &v13[4 * v39];
    v40[4] = v31;
    v40[5] = v33;
    v40[6] = v35;
    v40[7] = v37;
    *(void *)(v43 + 16) = v13;
    goto LABEL_38;
  }
LABEL_41:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_42:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10024B444(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a2 + 16) >> 14;
  int v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1) {
    return v5 ^ 1u;
  }
  if (a1 >> 14 >= v4)
  {
    uint64_t v7 = String.subscript.getter();
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    unint64_t v14 = *(void **)(a4 + 16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v14 = sub_1000C71F4(0, v14[2] + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    unint64_t v17 = v14[2];
    unint64_t v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      unint64_t v14 = sub_1000C71F4((void *)(v16 > 1), v17 + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    v14[2] = v17 + 1;
    char v18 = &v14[4 * v17];
    v18[4] = v7;
    void v18[5] = v9;
    v18[6] = v11;
    v18[7] = v13;
    return v5 ^ 1u;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_10024B5A0(void *(*a1)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  int v5 = v1;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)uint64_t v1 = xmmword_1003B2440;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = v4 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_16;
      }
      if (v11 < (int)v4) {
        goto LABEL_23;
      }
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v4, __DataStorage._offset.getter())) {
        goto LABEL_24;
      }
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v13 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      swift_release();
      uint64_t v9 = v13;
      uint64_t v11 = v4 >> 32;
LABEL_16:
      if (v11 < (int)v4)
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
      }
      uint64_t result = sub_10024C3CC((int)v4, v11, a1);
      unint64_t v12 = v9 | 0x4000000000000000;
      if (v2)
      {
        *int v5 = v4;
        goto LABEL_19;
      }
      *int v5 = v4;
      v5[1] = v12;
      break;
    case 2uLL:
      uint64_t v14 = *v1;
      uint64_t v15 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t result = sub_10024C3CC(*(void *)(v14 + 16), *(void *)(v14 + 24), a1);
      unint64_t v12 = v15 | 0x8000000000000000;
      if (v2)
      {
        *uint64_t v1 = v14;
LABEL_19:
        v5[1] = v12;
      }
      else
      {
        *uint64_t v1 = v14;
        v1[1] = v12;
      }
      break;
    case 3uLL:
      memset(v16, 0, 15);
      uint64_t result = (char *)a1(&v14, (char *)v16, (char *)v16);
      if (!v2) {
        return (char *)v14;
      }
      return result;
    default:
      v16[0] = *v1;
      LOWORD(v16[1]) = v3;
      BYTE2(v16[1]) = BYTE2(v3);
      BYTE3(v16[1]) = BYTE3(v3);
      BYTE4(v16[1]) = BYTE4(v3);
      BYTE5(v16[1]) = BYTE5(v3);
      BYTE6(v16[1]) = BYTE6(v3);
      uint64_t result = (char *)a1(&v14, (char *)v16, (char *)v16 + BYTE6(v3));
      if (!v2) {
        uint64_t result = (char *)v14;
      }
      unint64_t v8 = LODWORD(v16[1]) | ((unint64_t)BYTE4(v16[1]) << 32) | ((unint64_t)BYTE5(v16[1]) << 40) | ((unint64_t)BYTE6(v16[1]) << 48);
      *uint64_t v1 = v16[0];
      v1[1] = v8;
      return result;
  }
  return result;
}

uint64_t sub_10024B8A4(void *a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3 = a1[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      *(void *)uint64_t v34 = *a1;
      *(void *)&v34[8] = v3 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t result = sub_10024C1C4((int *)v34, a2, a3);
      uint64_t v13 = *(void *)v34;
      unint64_t v14 = *(void *)&v34[8] | 0x4000000000000000;
      goto LABEL_13;
    case 2uLL:
      *(void *)uint64_t v34 = *a1;
      *(void *)&v34[8] = v3 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t v16 = *(void *)v34;
      uint64_t v15 = *(void *)&v34[8];
      uint64_t v17 = *(void *)(*(void *)v34 + 16);
      uint64_t v18 = __DataStorage._bytes.getter();
      if (!v18)
      {
        __break(1u);
        JUMPOUT(0x10024BC3CLL);
      }
      uint64_t v19 = v18;
      uint64_t v20 = __DataStorage._offset.getter();
      if (__OFSUB__(v17, v20))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
      }
      uint64_t v21 = v19 + v17 - v20;
      __DataStorage._length.getter();
      __int16 v22 = *(_WORD *)(a2 + 10);
      __int16 v23 = *(_WORD *)(a2 + 20);
      uint64_t v24 = *(void *)(a2 + 12);
      uint64_t v25 = *(void *)(a2 + 2);
      char v26 = *(unsigned char *)(a2 + 22);
      *(_WORD *)uint64_t v21 = *(_WORD *)a2;
      *(void *)(v21 + 2) = v25;
      *(_WORD *)(v21 + 10) = v22;
      *(void *)(v21 + 12) = v24;
      *(_WORD *)(v21 + 20) = v23;
      *(unsigned char *)(v21 + 22) = v26;
      uint64_t v28 = *a3;
      unint64_t v27 = a3[1];
      switch(v27 >> 62)
      {
        case 1uLL:
          if (!__OFSUB__(HIDWORD(v28), v28)) {
            goto LABEL_22;
          }
          goto LABEL_30;
        case 2uLL:
          if (__OFSUB__(*(void *)(v28 + 24), *(void *)(v28 + 16))) {
            goto LABEL_31;
          }
LABEL_22:
          sub_100013D44(v28, v27);
LABEL_23:
          Data.copyBytes(to:count:)();
          uint64_t result = sub_10000C970(v28, v27);
          *a1 = v16;
          a1[1] = v15 | 0x8000000000000000;
          break;
        default:
          goto LABEL_23;
      }
      break;
    case 3uLL:
      __int16 v29 = *(_WORD *)(a2 + 10);
      __int16 v30 = *(_WORD *)(a2 + 20);
      *(_WORD *)uint64_t v34 = *(_WORD *)a2;
      char v31 = *(unsigned char *)(a2 + 22);
      *(void *)&v34[2] = *(void *)(a2 + 2);
      *(_WORD *)&v34[10] = v29;
      *(void *)&v34[12] = *(void *)(a2 + 12);
      __int16 v35 = v30;
      uint64_t v32 = *a3;
      unint64_t v33 = a3[1];
      char v36 = v31;
      switch(v33 >> 62)
      {
        case 1uLL:
          if (!__OFSUB__(HIDWORD(v32), v32)) {
            goto LABEL_17;
          }
          goto LABEL_28;
        case 2uLL:
          if (__OFSUB__(*(void *)(v32 + 24), *(void *)(v32 + 16))) {
            goto LABEL_29;
          }
LABEL_17:
          sub_100013D44(v32, v33);
LABEL_18:
          Data.copyBytes(to:count:)();
          uint64_t result = sub_10000C970(v32, v33);
          break;
        default:
          goto LABEL_18;
      }
      break;
    default:
      __int16 v7 = *(_WORD *)(a2 + 10);
      __int16 v8 = *(_WORD *)(a2 + 20);
      *(_WORD *)uint64_t v34 = *(_WORD *)a2;
      char v9 = *(unsigned char *)(a2 + 22);
      *(void *)&v34[2] = *(void *)(a2 + 2);
      *(_WORD *)&v34[10] = v7;
      *(void *)&v34[12] = *(void *)(a2 + 12);
      __int16 v35 = v8;
      uint64_t v10 = *a3;
      unint64_t v11 = a3[1];
      char v36 = v9;
      switch(v11 >> 62)
      {
        case 1uLL:
          if (!__OFSUB__(HIDWORD(v10), v10)) {
            goto LABEL_11;
          }
          goto LABEL_26;
        case 2uLL:
          if (__OFSUB__(*(void *)(v10 + 24), *(void *)(v10 + 16))) {
            goto LABEL_27;
          }
LABEL_11:
          sub_100013D44(v10, v11);
LABEL_12:
          Data.copyBytes(to:count:)();
          uint64_t result = sub_10000C970(v10, v11);
          uint64_t v13 = *(void *)v34;
          unint64_t v14 = *(unsigned int *)&v34[8] | ((unint64_t)v34[12] << 32) | ((unint64_t)v34[13] << 40) | ((unint64_t)v34[14] << 48);
          break;
        default:
          goto LABEL_12;
      }
LABEL_13:
      *a1 = v13;
      a1[1] = v14;
      break;
  }
  return result;
}

void sub_10024BC7C(void (*a1)(uint64_t, uint64_t))
{
  unint64_t v2 = v1[1];
  switch(v2 >> 62)
  {
    case 1uLL:
      *(void *)&long long v17 = *v1;
      *((void *)&v17 + 1) = v2 & 0x3FFFFFFFFFFFFFFFLL;
      sub_10024C31C(a1);
      uint64_t v3 = v17;
      unint64_t v4 = *((void *)&v17 + 1) | 0x4000000000000000;
      goto LABEL_4;
    case 2uLL:
      *(void *)&long long v17 = *v1;
      *((void *)&v17 + 1) = v2 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t v5 = *((void *)&v17 + 1);
      uint64_t v6 = *(void *)(v17 + 16);
      uint64_t v16 = *(void *)(v17 + 24);
      uint64_t v7 = __DataStorage._bytes.getter();
      if (!v7)
      {
        __break(1u);
        JUMPOUT(0x10024BEB8);
      }
      uint64_t v8 = v7;
      uint64_t v9 = __DataStorage._offset.getter();
      uint64_t v10 = v6 - v9;
      if (__OFSUB__(v6, v9))
      {
        __break(1u);
LABEL_15:
        __break(1u);
      }
      BOOL v11 = __OFSUB__(v16, v6);
      uint64_t v12 = v16 - v6;
      if (v11) {
        goto LABEL_15;
      }
      uint64_t v13 = __DataStorage._length.getter();
      if (v13 >= v12) {
        uint64_t v14 = v12;
      }
      else {
        uint64_t v14 = v13;
      }
      a1(v8 + v10, v8 + v10 + v14);
      *uint64_t v1 = v17;
      v1[1] = v5 | 0x8000000000000000;
      return;
    case 3uLL:
      *(void *)((char *)&v17 + 7) = 0;
      *(void *)&long long v17 = 0;
      a1((uint64_t)&v17, (uint64_t)&v17);
      return;
    default:
      *(void *)&long long v17 = *v1;
      WORD4(v17) = v2;
      BYTE10(v17) = BYTE2(v2);
      BYTE11(v17) = BYTE3(v2);
      BYTE12(v17) = BYTE4(v2);
      BYTE13(v17) = BYTE5(v2);
      BYTE14(v17) = BYTE6(v2);
      a1((uint64_t)&v17, (uint64_t)&v17 + BYTE6(v2));
      uint64_t v3 = v17;
      unint64_t v4 = DWORD2(v17) | ((unint64_t)BYTE12(v17) << 32) | ((unint64_t)BYTE13(v17) << 40) | ((unint64_t)BYTE14(v17) << 48);
LABEL_4:
      *uint64_t v1 = v3;
      v1[1] = v4;
      return;
  }
}

char *sub_10024BEC8(void *(*a1)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  uint64_t v5 = v1;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)uint64_t v1 = xmmword_1003B2440;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = v4 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_16;
      }
      if (v11 < (int)v4) {
        goto LABEL_23;
      }
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v4, __DataStorage._offset.getter())) {
        goto LABEL_24;
      }
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v13 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      swift_release();
      uint64_t v9 = v13;
      uint64_t v11 = v4 >> 32;
LABEL_16:
      if (v11 < (int)v4)
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
      }
      uint64_t result = sub_10024C480((int)v4, v11, a1);
      unint64_t v12 = v9 | 0x4000000000000000;
      if (v2)
      {
        *uint64_t v5 = v4;
        goto LABEL_19;
      }
      *uint64_t v5 = v4;
      v5[1] = v12;
      break;
    case 2uLL:
      uint64_t v15 = *v1;
      uint64_t v16 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t result = sub_10024C480(*(void *)(v15 + 16), *(void *)(v15 + 24), a1);
      unint64_t v12 = v16 | 0x8000000000000000;
      if (v2)
      {
        *uint64_t v1 = v15;
LABEL_19:
        v5[1] = v12;
      }
      else
      {
        *uint64_t v1 = v15;
        v1[1] = v12;
      }
      break;
    case 3uLL:
      memset(v14, 0, 15);
      uint64_t result = (char *)a1(&v15, (char *)v14, (char *)v14);
      if (!v2) {
        return (char *)v15;
      }
      return result;
    default:
      v14[0] = *v1;
      LOWORD(v14[1]) = v3;
      BYTE2(v14[1]) = BYTE2(v3);
      BYTE3(v14[1]) = BYTE3(v3);
      BYTE4(v14[1]) = BYTE4(v3);
      BYTE5(v14[1]) = BYTE5(v3);
      BYTE6(v14[1]) = BYTE6(v3);
      uint64_t result = (char *)a1(&v15, (char *)v14, (char *)v14 + BYTE6(v3));
      if (!v2) {
        uint64_t result = (char *)v15;
      }
      unint64_t v8 = LODWORD(v14[1]) | ((unint64_t)BYTE4(v14[1]) << 32) | ((unint64_t)BYTE5(v14[1]) << 40) | ((unint64_t)BYTE6(v14[1]) << 48);
      *uint64_t v1 = v14[0];
      v1[1] = v8;
      return result;
  }
  return result;
}

uint64_t sub_10024C1C4(int *a1, uint64_t a2, uint64_t *a3)
{
  Data.InlineSlice.ensureUniqueReference()();
  uint64_t v6 = *a1;
  if (a1[1] < (int)v6)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v7 = __DataStorage._bytes.getter();
  if (!v7) {
    goto LABEL_14;
  }
  uint64_t v8 = v7;
  uint64_t v9 = __DataStorage._offset.getter();
  if (__OFSUB__(v6, v9))
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    JUMPOUT(0x10024C30CLL);
  }
  uint64_t v10 = v8 + v6 - v9;
  __DataStorage._length.getter();
  __int16 v11 = *(_WORD *)(a2 + 10);
  __int16 v12 = *(_WORD *)(a2 + 20);
  uint64_t v13 = *(void *)(a2 + 12);
  uint64_t v14 = *(void *)(a2 + 2);
  char v15 = *(unsigned char *)(a2 + 22);
  *(_WORD *)uint64_t v10 = *(_WORD *)a2;
  *(void *)(v10 + 2) = v14;
  *(_WORD *)(v10 + 10) = v11;
  *(void *)(v10 + 12) = v13;
  *(_WORD *)(v10 + 20) = v12;
  *(unsigned char *)(v10 + 22) = v15;
  uint64_t v16 = *a3;
  unint64_t v17 = a3[1];
  switch(v17 >> 62)
  {
    case 1uLL:
      if (!__OFSUB__(HIDWORD(v16), v16)) {
        goto LABEL_8;
      }
      goto LABEL_12;
    case 2uLL:
      if (__OFSUB__(*(void *)(v16 + 24), *(void *)(v16 + 16))) {
        goto LABEL_13;
      }
LABEL_8:
      sub_100013D44(v16, v17);
LABEL_9:
      Data.copyBytes(to:count:)();
      return sub_10000C970(v16, v17);
    default:
      goto LABEL_9;
  }
}

void sub_10024C31C(void (*a1)(uint64_t, uint64_t))
{
  Data.InlineSlice.ensureUniqueReference()();
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  if ((int)v4 < (int)v3)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v5 = __DataStorage._bytes.getter();
  if (!v5)
  {
LABEL_10:
    __break(1u);
    return;
  }
  uint64_t v6 = v5;
  uint64_t v7 = __DataStorage._offset.getter();
  uint64_t v8 = v3 - v7;
  if (__OFSUB__(v3, v7))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v9 = v4 - v3;
  uint64_t v10 = __DataStorage._length.getter();
  if (v10 >= v9) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = v10;
  }
  a1(v6 + v8, v6 + v8 + v11);
}

char *sub_10024C3CC(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t result = (char *)__DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v8 = result;
  uint64_t result = (char *)__DataStorage._offset.getter();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

char *sub_10024C480(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t result = (char *)__DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v8 = result;
  uint64_t result = (char *)__DataStorage._offset.getter();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

uint64_t sub_10024C530(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_10024C558(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      return Data._Representation.append(contentsOf:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10024C5EC(unint64_t a1, unint64_t a2, void **a3, uint64_t *a4)
{
  return sub_100232910(a1, a2, a3, *a4);
}

uint64_t sub_10024C608@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_10024259C(a1, a2, v3[2], v3[3], v3[4], a3);
}

uint64_t sub_10024C628(void *a1)
{
  return sub_10024DE44(a1) & 1;
}

uint64_t sub_10024C644(void *a1)
{
  return sub_100242858(a1, v1[5], v1[2], v1[3]) & 1;
}

uint64_t sub_10024C668(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  BOOL v3 = *a1 == 0x7478655F747665 && a1[1] == 0xE700000000000000;
  if (!v3 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 1;
  }
  swift_beginAccess();
  uint64_t result = 0;
  *(void *)(v2 + 80) |= 1uLL;
  return result;
}

uint64_t sub_10024C708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  return sub_10024909C(a1, a2, *(void *)a3, *(void *)(a3 + 8), *(void *)(a3 + 16), *(unsigned int *)(a3 + 24) | ((unint64_t)*(unsigned __int16 *)(a3 + 28) << 32), a4, a5, a6);
}

uint64_t sub_10024C754(void *a1)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v1) {
    return sub_100010754((uint64_t)a1);
  }
  uint64_t v3 = v14;
  sub_100039448((uint64_t)v13, v14);
  uint64_t v4 = UnkeyedDecodingContainer.decodeData(with:)(48, v3);
  unint64_t v6 = v5;
  sub_100257CB4(v4, v5, (uint64_t)v10);
  sub_10000C970(v4, v6);
  uint64_t v7 = v12;
  uint64_t v8 = v11;
  sub_100010754((uint64_t)v13);
  sub_100010754((uint64_t)a1);
  return bswap64(v7 | (v8 << 32));
}

uint64_t sub_10024C850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  switch(a5 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(a4) - a4;
      if (__OFSUB__(HIDWORD(a4), a4)) {
        goto LABEL_16;
      }
      uint64_t v5 = (int)v5;
LABEL_5:
      if (v5 >= 0x10000) {
        goto LABEL_9;
      }
LABEL_6:
      if (a3 > 34)
      {
LABEL_9:
        sub_10000F000();
        swift_allocError();
        *(_OWORD *)uint64_t v10 = xmmword_1003B2F90;
        *(unsigned char *)(v10 + 16) = 0;
        return swift_willThrow();
      }
      else
      {
        uint64_t v9 = 0;
        switch(a5 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(a4), a4)) {
              goto LABEL_18;
            }
            uint64_t v9 = HIDWORD(a4) - (int)a4;
LABEL_13:
            if (__OFADD__(a3, v9))
            {
              __break(1u);
LABEL_16:
              __break(1u);
LABEL_17:
              __break(1u);
LABEL_18:
              __break(1u);
LABEL_19:
              __break(1u);
              JUMPOUT(0x10024CA14);
            }
            uint64_t v14 = sub_100126710(a3 + v9);
            __chkstk_darwin();
            sub_10024BC7C((void (*)(uint64_t, uint64_t))sub_10024DC2C);
            uint64_t result = v14;
            break;
          case 2uLL:
            uint64_t v13 = *(void *)(a4 + 16);
            uint64_t v12 = *(void *)(a4 + 24);
            BOOL v8 = __OFSUB__(v12, v13);
            uint64_t v9 = v12 - v13;
            if (!v8) {
              goto LABEL_13;
            }
            goto LABEL_19;
          case 3uLL:
            goto LABEL_13;
          default:
            uint64_t v9 = BYTE6(a5);
            goto LABEL_13;
        }
      }
      return result;
    case 2uLL:
      uint64_t v7 = *(void *)(a4 + 16);
      uint64_t v6 = *(void *)(a4 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_5;
      }
      goto LABEL_17;
    default:
      goto LABEL_6;
  }
}

uint64_t sub_10024CA34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v61 = a7;
  uint64_t v62 = a4;
  uint64_t v58 = a6;
  uint64_t v59 = a1;
  uint64_t v64 = a3;
  uint64_t v60 = a2;
  uint64_t v56 = a9;
  uint64_t v57 = a10;
  uint64_t v68 = a11;
  uint64_t v52 = *(void *)(*(void *)(*(void *)(a11 + 8) + 24) + 16);
  swift_getAssociatedTypeWitness();
  __chkstk_darwin();
  uint64_t v65 = *(void *)(a8 - 8);
  __chkstk_darwin();
  char v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v51 = (char *)&v50 - v16;
  __chkstk_darwin();
  uint64_t v18 = (char *)&v50 - v17;
  __chkstk_darwin();
  uint64_t v20 = (char *)&v50 - v19;
  uint64_t v21 = 0;
  switch(a5 >> 62)
  {
    case 1uLL:
      LODWORD(v21) = HIDWORD(v62) - v62;
      if (__OFSUB__(HIDWORD(v62), v62))
      {
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        JUMPOUT(0x10024D0D8);
      }
      uint64_t v21 = (int)v21;
LABEL_6:
      uint64_t v63 = v21;
      unint64_t v54 = a5 >> 62;
      unint64_t v55 = a5;
      dispatch thunk of static FixedWidthInteger.max.getter();
      char v25 = dispatch thunk of static BinaryInteger.isSigned.getter();
      uint64_t v53 = v11;
      if (v25)
      {
        if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64) {
          goto LABEL_16;
        }
        goto LABEL_11;
      }
      char v26 = dispatch thunk of static BinaryInteger.isSigned.getter();
      uint64_t v27 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if ((v26 & 1) == 0)
      {
        if (v27 < 64)
        {
LABEL_16:
          uint64_t v32 = dispatch thunk of BinaryInteger._lowWord.getter();
          (*(void (**)(char *, uint64_t))(v65 + 8))(v20, a8);
          goto LABEL_17;
        }
        uint64_t v41 = v65;
        (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v15, v20, a8);
        uint64_t v66 = v63;
        if (v63 <= 0)
        {
          int v49 = *(void (**)(char *, uint64_t))(v41 + 8);
          v49(v15, a8);
          v49(v20, a8);
          uint64_t v31 = v64;
          goto LABEL_18;
        }
        sub_10003AAFC();
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        char v28 = dispatch thunk of static Comparable.< infix(_:_:)();
        __int16 v29 = *(void (**)(char *, uint64_t))(v41 + 8);
        v29(v18, a8);
        __int16 v30 = v15;
LABEL_12:
        v29(v30, a8);
        v29(v20, a8);
        uint64_t v31 = v64;
        if (v28) {
          goto LABEL_23;
        }
        goto LABEL_18;
      }
      if (v27 > 64)
      {
LABEL_11:
        uint64_t v66 = v63;
        sub_10003AAFC();
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        char v28 = dispatch thunk of static Comparable.< infix(_:_:)();
        __int16 v29 = *(void (**)(char *, uint64_t))(v65 + 8);
        __int16 v30 = v18;
        goto LABEL_12;
      }
      swift_getAssociatedConformanceWitness();
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      char v35 = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v36 = v65;
      uint64_t v37 = *(void (**)(char *, uint64_t))(v65 + 8);
      v37(v18, a8);
      unint64_t v38 = v51;
      (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v51, v20, a8);
      if (v35)
      {
        v37(v38, a8);
        v37(v20, a8);
        goto LABEL_23;
      }
      uint64_t v32 = dispatch thunk of BinaryInteger._lowWord.getter();
      v37(v38, a8);
      v37(v20, a8);
LABEL_17:
      uint64_t v31 = v64;
      if (v32 < v63)
      {
LABEL_23:
        sub_10000F000();
        swift_allocError();
        *(_OWORD *)uint64_t v39 = xmmword_1003B2F90;
        *(unsigned char *)(v39 + 16) = 0;
        return swift_willThrow();
      }
LABEL_18:
      if (*(void *)(*(void *)(v61 - 8) + 64) < v31) {
        goto LABEL_23;
      }
      uint64_t v33 = v55;
      uint64_t v34 = 0;
      switch((int)v54)
      {
        case 1:
          LODWORD(v34) = HIDWORD(v62) - v62;
          if (__OFSUB__(HIDWORD(v62), v62)) {
            goto LABEL_36;
          }
          uint64_t v34 = (int)v34;
LABEL_30:
          if (__OFADD__(v31, v34)) {
            goto LABEL_35;
          }
          uint64_t v66 = sub_100126710(v31 + v34);
          uint64_t v67 = v44;
          __chkstk_darwin();
          uint64_t v45 = v61;
          *(&v50 - 12) = v58;
          *(&v50 - 11) = v45;
          uint64_t v46 = v56;
          *(&v50 - 10) = a8;
          *(&v50 - 9) = v46;
          uint64_t v47 = v68;
          *(&v50 - 8) = v57;
          *(&v50 - 7) = v47;
          uint64_t v48 = v60;
          *(&v50 - 6) = v59;
          *(&v50 - 5) = v48;
          *(&v50 - 4) = v62;
          *(&v50 - 3) = v33;
          *(&v50 - 2) = v31;
          sub_10024BC7C((void (*)(uint64_t, uint64_t))sub_10024DD18);
          uint64_t result = v66;
          break;
        case 2:
          uint64_t v43 = *(void *)(v62 + 16);
          uint64_t v42 = *(void *)(v62 + 24);
          BOOL v24 = __OFSUB__(v42, v43);
          uint64_t v34 = v42 - v43;
          if (!v24) {
            goto LABEL_30;
          }
          goto LABEL_37;
        case 3:
          goto LABEL_30;
        default:
          uint64_t v34 = BYTE6(v55);
          goto LABEL_30;
      }
      return result;
    case 2uLL:
      uint64_t v23 = *(void *)(v62 + 16);
      uint64_t v22 = *(void *)(v62 + 24);
      BOOL v24 = __OFSUB__(v22, v23);
      uint64_t v21 = v22 - v23;
      if (!v24) {
        goto LABEL_6;
      }
      goto LABEL_34;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v21 = BYTE6(a5);
      goto LABEL_6;
  }
}

uint64_t sub_10024D0F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  switch(a6 >> 62)
  {
    case 1uLL:
      LODWORD(v6) = HIDWORD(a5) - a5;
      if (__OFSUB__(HIDWORD(a5), a5)) {
        goto LABEL_16;
      }
      uint64_t v6 = (int)v6;
LABEL_5:
      if (v6 >= 0x10000) {
        goto LABEL_9;
      }
LABEL_6:
      if (a4 > 14)
      {
LABEL_9:
        sub_10000F000();
        swift_allocError();
        *(_OWORD *)uint64_t v11 = xmmword_1003B2F90;
        *(unsigned char *)(v11 + 16) = 0;
        return swift_willThrow();
      }
      else
      {
        uint64_t v10 = 0;
        switch(a6 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(a5), a5)) {
              goto LABEL_18;
            }
            uint64_t v10 = HIDWORD(a5) - (int)a5;
LABEL_13:
            if (__OFADD__(a4, v10))
            {
              __break(1u);
LABEL_16:
              __break(1u);
LABEL_17:
              __break(1u);
LABEL_18:
              __break(1u);
LABEL_19:
              __break(1u);
              JUMPOUT(0x10024D304);
            }
            uint64_t v15 = sub_100126710(a4 + v10);
            __chkstk_darwin();
            sub_10024BC7C((void (*)(uint64_t, uint64_t))sub_10024DBF8);
            uint64_t result = v15;
            break;
          case 2uLL:
            uint64_t v14 = *(void *)(a5 + 16);
            uint64_t v13 = *(void *)(a5 + 24);
            BOOL v9 = __OFSUB__(v13, v14);
            uint64_t v10 = v13 - v14;
            if (!v9) {
              goto LABEL_13;
            }
            goto LABEL_19;
          case 3uLL:
            goto LABEL_13;
          default:
            uint64_t v10 = BYTE6(a6);
            goto LABEL_13;
        }
      }
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a5 + 16);
      uint64_t v7 = *(void *)(a5 + 24);
      BOOL v9 = __OFSUB__(v7, v8);
      uint64_t v6 = v7 - v8;
      if (!v9) {
        goto LABEL_5;
      }
      goto LABEL_17;
    default:
      goto LABEL_6;
  }
}

uint64_t sub_10024D324(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = *a2;
  uint64_t result = sub_100246950(a2);
  if ((v18 & 1) == 0) {
    return sub_10024CA34(a1, (uint64_t)a2, result, a3, a4, a5, *(void *)(v16 + class metadata base offset for WritableKeyPath), *(void *)(v16 + class metadata base offset for WritableKeyPath + 8), a6, a7, a8);
  }
  __break(1u);
  return result;
}

uint64_t sub_10024D3FC()
{
  sub_100010754(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

unint64_t sub_10024D434()
{
  unint64_t result = qword_100483868;
  if (!qword_100483868)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483868);
  }
  return result;
}

uint64_t sub_10024D488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  switch(a8 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(a7) - a7;
      if (__OFSUB__(HIDWORD(a7), a7)) {
        goto LABEL_16;
      }
      uint64_t v8 = (int)v8;
LABEL_5:
      if (v8 >= 0x10000) {
        goto LABEL_9;
      }
LABEL_6:
      if (a6 > 30)
      {
LABEL_9:
        sub_10000F000();
        swift_allocError();
        *(_OWORD *)uint64_t v13 = xmmword_1003B2F90;
        *(unsigned char *)(v13 + 16) = 0;
        return swift_willThrow();
      }
      else
      {
        uint64_t v12 = 0;
        switch(a8 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(a7), a7)) {
              goto LABEL_18;
            }
            uint64_t v12 = HIDWORD(a7) - (int)a7;
LABEL_13:
            if (__OFADD__(a6, v12))
            {
              __break(1u);
LABEL_16:
              __break(1u);
LABEL_17:
              __break(1u);
LABEL_18:
              __break(1u);
LABEL_19:
              __break(1u);
              JUMPOUT(0x10024D6F4);
            }
            uint64_t v17 = sub_100126710(a6 + v12);
            __chkstk_darwin();
            sub_10024BC7C((void (*)(uint64_t, uint64_t))sub_10024DBD4);
            uint64_t result = v17;
            break;
          case 2uLL:
            uint64_t v16 = *(void *)(a7 + 16);
            uint64_t v15 = *(void *)(a7 + 24);
            BOOL v11 = __OFSUB__(v15, v16);
            uint64_t v12 = v15 - v16;
            if (!v11) {
              goto LABEL_13;
            }
            goto LABEL_19;
          case 3uLL:
            goto LABEL_13;
          default:
            uint64_t v12 = BYTE6(a8);
            goto LABEL_13;
        }
      }
      return result;
    case 2uLL:
      uint64_t v10 = *(void *)(a7 + 16);
      uint64_t v9 = *(void *)(a7 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_5;
      }
      goto LABEL_17;
    default:
      goto LABEL_6;
  }
}

uint64_t sub_10024D714(int a1)
{
  if ((a1 - 1) > 0x10) {
    return 15;
  }
  else {
    return byte_1003D36C8[a1 - 1];
  }
}

uint64_t sub_10024D738(uint64_t result)
{
  *(unsigned char *)(result + 361) = 4;
  return result;
}

unint64_t sub_10024D748()
{
  unint64_t result = qword_100483880;
  if (!qword_100483880)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483880);
  }
  return result;
}

unint64_t sub_10024D7A0()
{
  unint64_t result = qword_100483888;
  if (!qword_100483888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483888);
  }
  return result;
}

unint64_t sub_10024D7F8()
{
  unint64_t result = qword_100483890;
  if (!qword_100483890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483890);
  }
  return result;
}

unint64_t sub_10024D850()
{
  unint64_t result = qword_100483898;
  if (!qword_100483898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483898);
  }
  return result;
}

uint64_t sub_10024D8A4()
{
  return sub_10024DC6C(&qword_1004838A0, (void (*)(uint64_t))type metadata accessor for AppleDevice);
}

uint64_t sub_10024D8EC(uint64_t a1)
{
  uint64_t result = sub_10024DC6C(&qword_1004838D8, (void (*)(uint64_t))type metadata accessor for AppleBroadcomDriver);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for AppleBroadcomDriver()
{
  uint64_t result = qword_100483970;
  if (!qword_100483970) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10024D990()
{
  return sub_10024DC6C(&qword_10047D200, (void (*)(uint64_t))type metadata accessor for AppleDevice);
}

uint64_t sub_10024D9D8()
{
  return sub_10000F9CC(&qword_1004838E0, &qword_1004838E8);
}

uint64_t sub_10024DA14@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = AppleBroadcomDriver.capabilities.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10024DA40(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 72) = *a1;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

ValueMetadata *type metadata accessor for BroadcomCapabilities()
{
  return &type metadata for BroadcomCapabilities;
}

uint64_t sub_10024DA94()
{
  return type metadata accessor for AppleBroadcomDriver();
}

uint64_t sub_10024DA9C()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BroadcomEventMessage()
{
  return &type metadata for BroadcomEventMessage;
}

char *sub_10024DB80(char *result)
{
  uint64_t v2 = *(char **)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = result;
    size_t v4 = String.count.getter();
    return strncpy(v2, v3, v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10024DBD4(uint64_t a1, uint64_t a2)
{
  return sub_10024C708(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_10024DBF8(uint64_t a1, uint64_t a2)
{
  return sub_100248EC4(a1, a2, **(void **)(v2 + 16), *(unsigned int *)(*(void *)(v2 + 16) + 8) | ((unint64_t)*(unsigned __int16 *)(*(void *)(v2 + 16)+ 12) << 32), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_10024DC2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2[2];
  uint64_t v3 = v2[3];
  uint64_t v5 = v2[4];
  unint64_t v6 = v2[5];
  long long v7 = *(_OWORD *)(v4 + 16);
  v9[0] = *(_OWORD *)v4;
  v9[1] = v7;
  __int16 v10 = *(_WORD *)(v4 + 32);
  return sub_100248D34(a1, a2, (uint64_t)v9, v3, v5, v6);
}

uint64_t sub_10024DC6C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10024DCB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NANAttribute(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10024DD18(uint64_t a1, uint64_t a2)
{
  return sub_1002492D4(a1, a2, *(void *)(v2 + 64), *(void *)(v2 + 72), *(void *)(v2 + 80), *(void *)(v2 + 88), *(void *)(v2 + 96), *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_10024DD58(uint64_t a1, void *a2)
{
  return sub_100248180(a1, *(void *)(v2 + 48), *(void *)(v2 + 56), *(_DWORD *)(v2 + 64), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), a2);
}

uint64_t sub_10024DD90(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_100248B90(a1, a2, *(void *)(v3 + 48), *(_DWORD *)(v3 + 56), *(void *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), a3);
}

uint64_t sub_10024DDC8()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10024DE00()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10024DE10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_100242414(a1, a2, **(void **)(v3 + 16));
  if (!v4)
  {
    *a3 = result;
    a3[1] = v7;
  }
  return result;
}

uint64_t sub_10024DE44(void *a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

uint64_t sub_10024DE9C(void *a1)
{
  return sub_10024C668(a1, *(uint64_t **)(v1 + 16)) & 1;
}

uint64_t BroadcomDriver<>.elect(peer:)()
{
  return NANBitmap.Channel.operatingClass.getter();
}

uint64_t sub_10024DEDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = __chkstk_darwin(a1);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v16(v12, v12 + *(void *)(*(void *)(v15 - 8) + 64), v14);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  }
  return result;
}

uint64_t String.init<A>(cStyleString:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (*(uint64_t *)(*(void *)(a2 - 8) + 64) >= 2)
  {
    __chkstk_darwin();
    _OWORD v9[2] = v5;
    uint64_t v6 = sub_100010BCC(&qword_1004829B0);
    sub_10024DEDC(a1, (uint64_t)sub_10024EB10, (uint64_t)v9, a2, (uint64_t)&type metadata for Never, v6, (uint64_t)&protocol witness table for Never, v7);
    if (v11)
    {
      uint64_t result = v10;
      uint64_t v8 = HIBYTE(v11) & 0xF;
      if ((v11 & 0x2000000000000000) == 0) {
        uint64_t v8 = v10 & 0xFFFFFFFFFFFFLL;
      }
      if (!v8)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t String.copy<A, B, C>(to:destinationField:lengthField:)()
{
  uint64_t v0 = __chkstk_darwin();
  _sSS7CoreP2PE4copy2to16destinationFieldyxz_s15WritableKeyPathCyxq_Gtr0_lF_0(v0, v1, v2, v3);
  sub_10003AAFC();
  dispatch thunk of BinaryInteger.init<A>(_:)();
  return swift_setAtWritableKeyPath();
}

uint64_t String.hexData.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    v5._countAndFlagsBits = 30768;
    v5._object = (void *)0xE200000000000000;
    if (String.hasPrefix(_:)(v5))
    {
      swift_bridgeObjectRetain();
      unint64_t v6 = String.count.getter();
      sub_10024EF98(v6, a1, a2);
      swift_bridgeObjectRelease();
      uint64_t v7 = static String._fromSubstring(_:)();
      uint64_t v9 = v8;
      swift_bridgeObjectRelease();
      uint64_t v10 = String.hexData.getter(v7, v9);
LABEL_14:
      swift_bridgeObjectRelease();
      return v10;
    }
    sub_10001D82C();
    if (StringProtocol.contains<A>(_:)())
    {
      String.lowercased()();
      uint64_t v11 = StringProtocol.components<A>(separatedBy:)();
      swift_bridgeObjectRelease();
      uint64_t v12 = *(void *)(v11 + 16);
      if (!v12)
      {
LABEL_13:
        swift_bridgeObjectRelease();
        uint64_t v10 = sub_1001265EC((uint64_t)_swiftEmptyArrayStorage);
        goto LABEL_14;
      }
      swift_bridgeObjectRetain();
      uint64_t v13 = (unint64_t *)(v11 + 40);
      while (1)
      {
        uint64_t v14 = *(v13 - 1);
        unint64_t v15 = *v13;
        swift_bridgeObjectRetain();
        uint64_t v16 = sub_10024EC44(v14, v15);
        if (v16[2] != 1) {
          break;
        }
        v13 += 2;
        swift_bridgeObjectRetain();
        sub_1001DE944((uint64_t)v16);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (!--v12)
        {
          swift_bridgeObjectRelease();
          goto LABEL_13;
        }
      }
      swift_bridgeObjectRelease();
      sub_10000F000();
      swift_allocError();
      *(_OWORD *)uint64_t v17 = xmmword_1003B00B0;
      *(unsigned char *)(v17 + 16) = 2;
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_errorRelease();
    }
    return String.nonSeparatedHexData.getter();
  }
  return 0;
}

uint64_t sub_10024E4A8()
{
  uint64_t v0 = (void *)sub_100035E0C((uint64_t)&off_10044DD18);
  sub_100010BCC(&qword_100483A50);
  uint64_t result = swift_arrayDestroy();
  off_100483A48 = v0;
  return result;
}

uint64_t String.colonSeparatedHexData.getter()
{
  String.lowercased()();
  sub_10001D82C();
  uint64_t v0 = StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = (unint64_t *)(v0 + 40);
    while (1)
    {
      uint64_t v3 = *(v2 - 1);
      unint64_t v4 = *v2;
      swift_bridgeObjectRetain();
      Swift::String v5 = sub_10024EC44(v3, v4);
      if (v5[2] != 1) {
        break;
      }
      v2 += 2;
      swift_bridgeObjectRetain();
      sub_1001DE944((uint64_t)v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!--v1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v7 = xmmword_1003B00B0;
    *(unsigned char *)(v7 + 16) = 2;
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    return 0;
  }
  else
  {
LABEL_6:
    swift_bridgeObjectRelease();
    uint64_t v6 = sub_1001265EC((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t String.nonSeparatedHexData.getter()
{
  String.lowercased()();
  sub_10001D82C();
  uint64_t v0 = StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = (unint64_t *)(v0 + 40);
    do
    {
      uint64_t v3 = *(v2 - 1);
      unint64_t v4 = *v2;
      swift_bridgeObjectRetain();
      Swift::String v5 = sub_10024EC44(v3, v4);
      v2 += 2;
      swift_bridgeObjectRetain();
      sub_1001DE944((uint64_t)v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v6 = sub_1001265EC((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v8 = v7;
  swift_bridgeObjectRelease();
  switch(v8 >> 62)
  {
    case 1uLL:
      if ((int)v6 == v6 >> 32) {
        goto LABEL_11;
      }
      break;
    case 2uLL:
      if (*(void *)(v6 + 16) == *(void *)(v6 + 24)) {
        goto LABEL_11;
      }
      break;
    case 3uLL:
      goto LABEL_11;
    default:
      if ((v8 & 0xFF000000000000) == 0)
      {
LABEL_11:
        sub_10000C970(v6, v8);
        uint64_t v6 = 0;
      }
      break;
  }
  return v6;
}

uint64_t String.interfaceIdentifierData.getter()
{
  String.lowercased()();
  sub_10001D82C();
  uint64_t v0 = StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = (unint64_t *)(v0 + 40);
    while (1)
    {
      uint64_t v3 = *(v2 - 1);
      unint64_t v4 = *v2;
      swift_bridgeObjectRetain();
      Swift::String v5 = sub_10024EC44(v3, v4);
      if (v5[2] != 2) {
        break;
      }
      v2 += 2;
      swift_bridgeObjectRetain();
      sub_1001DE944((uint64_t)v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!--v1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v7 = xmmword_1003B00B0;
    *(unsigned char *)(v7 + 16) = 2;
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    return 0;
  }
  else
  {
LABEL_6:
    swift_bridgeObjectRelease();
    uint64_t v6 = sub_1001265EC((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease();
  }
  return v6;
}

void *_sSS7CoreP2PE4copy2to16destinationFieldyxz_s15WritableKeyPathCyxq_Gtr0_lF_0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(*(void *)(*(void *)(class metadata base offset for WritableKeyPath + *a2 + 8) - 8) + 64);
  v6[2] = a1;
  v6[3] = a2;
  v6[4] = v4;
  uint64_t result = sub_10000E350((uint64_t)sub_10024F048, (uint64_t)v6, a3, a4);
  if ((uint64_t)result >= v4)
  {
    uint64_t result = (void *)(v4 - 1);
    if (__OFSUB__(v4, 1)) {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_10024EB10@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  if (result)
  {
    uint64_t v4 = *(void *)(v2 + 16);
    BOOL v5 = __OFSUB__(v4, 1);
    uint64_t v6 = v4 - 1;
    if (!v5)
    {
      *(unsigned char *)(result + v6) = 0;
      uint64_t result = String.init(cString:)();
      *a2 = result;
      a2[1] = v7;
      return result;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10024EB5C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = *a3;
  unsigned char v10[2] = a1;
  v10[3] = a4;
  uint64_t v5 = v4;
  uint64_t v6 = (uint64_t (*)(unsigned char *, void))swift_modifyAtWritableKeyPath();
  sub_10024DEDC(v7, (uint64_t)sub_10024F068, (uint64_t)v10, *(void *)(class metadata base offset for WritableKeyPath + v5 + 8), (uint64_t)&type metadata for Never, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Never, v8);
  return v6(v11, 0);
}

void *sub_10024EC44(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v5 = 4 * v2;
  uint64_t v6 = _swiftEmptyArrayStorage;
  while (1)
  {
    unint64_t v7 = String.index(_:offsetBy:limitedBy:)();
    if ((v8 & 1) != 0 || v7 >> 14 == v5) {
      break;
    }
    if (qword_10047C2A8 != -1) {
      swift_once();
    }
    uint64_t v9 = off_100483A48;
    uint64_t v10 = String.subscript.getter();
    if (!v9[2]
      || (uint64_t v12 = sub_100031B60(v10, v11), (v13 & 1) == 0)
      || (char v14 = *(unsigned char *)(v9[7] + v12),
          swift_bridgeObjectRelease(),
          unint64_t v15 = off_100483A48,
          uint64_t v16 = String.subscript.getter(),
          !v15[2])
      || (uint64_t v18 = sub_100031B60(v16, v17), (v19 & 1) == 0))
    {
      swift_bridgeObjectRelease();
LABEL_20:
      swift_bridgeObjectRelease();
      sub_10000F000();
      swift_allocError();
      *(_OWORD *)uint64_t v23 = xmmword_1003B00B0;
      *(unsigned char *)(v23 + 16) = 2;
      swift_willThrow();
      return v6;
    }
    char v20 = *(unsigned char *)(v15[7] + v18);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v6 = sub_1000C568C(0, v6[2] + 1, 1, v6);
    }
    unint64_t v22 = v6[2];
    unint64_t v21 = v6[3];
    if (v22 >= v21 >> 1) {
      uint64_t v6 = sub_1000C568C((void *)(v21 > 1), v22 + 1, 1, v6);
    }
    v6[2] = v22 + 1;
    *((unsigned char *)v6 + v22 + 32) = v20 | (16 * v14);
    if (v5 == (unint64_t)String.index(_:offsetBy:)() >> 14) {
      return v6;
    }
  }
  if (String.count.getter() != 1) {
    goto LABEL_20;
  }
  if (qword_10047C2A8 != -1) {
    swift_once();
  }
  BOOL v24 = off_100483A48;
  swift_bridgeObjectRetain();
  uint64_t v25 = sub_10011AD60(a1, a2);
  uint64_t v27 = v26;
  uint64_t result = (void *)swift_bridgeObjectRelease();
  if (v27)
  {
    swift_bridgeObjectRelease();
    if (!v24[2]) {
      goto LABEL_20;
    }
    uint64_t v29 = sub_100031B60(v25, v27);
    if ((v30 & 1) == 0) {
      goto LABEL_20;
    }
    char v31 = *(unsigned char *)(v24[7] + v29);
    swift_bridgeObjectRelease();
    sub_100010BCC(&qword_10047BEF8);
    uint64_t v6 = (void *)swift_allocObject();
    *((_OWORD *)v6 + 1) = xmmword_1003B2450;
    *((unsigned char *)v6 + 32) = v31;
    return v6;
  }
  __break(1u);
  return result;
}

unint64_t sub_10024EF98(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v4 = 7;
  if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0) {
    uint64_t v4 = 11;
  }
  unint64_t v5 = v4 | (v3 << 16);
  uint64_t result = String.index(_:offsetBy:limitedBy:)();
  if (v6) {
    uint64_t result = v5;
  }
  if (4 * v3 < result >> 14) {
    goto LABEL_14;
  }

  return String.subscript.getter();
}

uint64_t sub_10024F048(uint64_t a1)
{
  return sub_10024EB5C(a1, *(void *)(v1 + 16), *(uint64_t **)(v1 + 24), *(void *)(v1 + 32));
}

size_t sub_10024F068@<X0>(char *a1@<X0>, size_t *a2@<X8>)
{
  size_t result = strlcpy(a1, *(const char **)(v2 + 16), *(void *)(v2 + 24));
  *a2 = result;
  return result;
}

uint64_t Logger.init(subsystem:category:)(uint64_t a1, char a2)
{
  LogCategory.rawValue.getter(a2);

  return Logger.init(subsystem:category:)();
}

uint64_t LogSubsystem.rawValue.getter(char a1)
{
  if (a1) {
    return 0x6C7070612E6D6F63;
  }
  else {
    return 0xD000000000000012;
  }
}

uint64_t sub_10024F1D8(char *a1, unsigned __int8 *a2)
{
  return sub_1000429F8(*a1, *a2);
}

Swift::Int sub_10024F1E4()
{
  return Hasher._finalize()();
}

uint64_t sub_10024F2A4()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10024F350()
{
  return Hasher._finalize()();
}

unint64_t sub_10024F40C@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = _s7CoreP2P12LogSubsystemO8rawValueACSgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_10024F43C(unint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0x80000001003D7B30;
  unint64_t v4 = 0xEE006C6477612E65;
  if (v2 != 1) {
    unint64_t v4 = 0xED00006E616E2E65;
  }
  BOOL v5 = v2 == 0;
  if (*v1) {
    unint64_t v6 = 0x6C7070612E6D6F63;
  }
  else {
    unint64_t v6 = 0xD000000000000012;
  }
  if (!v5) {
    unint64_t v3 = v4;
  }
  *a1 = v6;
  a1[1] = v3;
}

_UNKNOWN **static LogCategory.allCases.getter()
{
  return &off_100450770;
}

unint64_t LogCategory.rawValue.getter(char a1)
{
  unint64_t result = 1953066601;
  switch(a1)
  {
    case 1:
      unint64_t result = 1886221668;
      break;
    case 2:
      unint64_t result = 0x65696C4372657375;
      break;
    case 3:
      unint64_t result = 0x726576697264;
      break;
    case 4:
      unint64_t result = 0x656369766564;
      break;
    case 5:
      unint64_t result = 0x6361667265746E69;
      break;
    case 6:
      unint64_t result = 1919247728;
      break;
    case 7:
      unint64_t result = 0x6C6C6F72746E6F63;
      break;
    case 8:
      unint64_t result = 0x736E617254697073;
      break;
    case 9:
      unint64_t result = 6516856;
      break;
    case 10:
      unint64_t result = 0x416B726F7774656ELL;
      break;
    case 11:
      unint64_t result = 7564900;
      break;
    case 12:
      unint64_t result = 0x7265766F63736964;
      break;
    case 13:
      unint64_t result = 0x6269726373627573;
      break;
    case 14:
      unint64_t result = 0x6873696C627570;
      break;
    case 15:
    case 16:
    case 22:
      unint64_t result = 0xD000000000000011;
      break;
    case 17:
      unint64_t result = 0x694C656369766564;
      break;
    case 18:
      unint64_t result = 0x6E6F697463656C65;
      break;
    case 19:
      unint64_t result = 0x6E614D6172666E69;
      break;
    case 20:
      unint64_t result = 0x614D656C61636F6CLL;
      break;
    case 21:
      unint64_t result = 0x7365526F69646172;
      break;
    case 23:
      unint64_t result = 0x74656E7265746E69;
      break;
    case 24:
      unint64_t result = 0x4D79617765746167;
      break;
    case 25:
      unint64_t result = 0x676E6974756F72;
      break;
    case 26:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10024F808(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = LogCategory.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == LogCategory.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_10024F894@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = _s7CoreP2P11LogCategoryO8rawValueACSgSS_tcfC_0();
  *a1 = result;
  return result;
}

unint64_t sub_10024F8C4@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = LogCategory.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_10024F8F0(void *a1@<X8>)
{
  *a1 = &off_100450770;
}

Swift::Int sub_10024F900()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  LogCategory.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_10024F964()
{
  LogCategory.rawValue.getter(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10024F9B8()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  LogCategory.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_10024FA18()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10024FA78()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t _s7CoreP2P11LogCategoryO8rawValueACSgSS_tcfC_0()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x1B) {
    return 27;
  }
  else {
    return v0;
  }
}

unint64_t _s7CoreP2P12LogSubsystemO8rawValueACSgSS_tcfC_0(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10044E410, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

unint64_t sub_10024FB6C()
{
  unint64_t result = qword_100483A58;
  if (!qword_100483A58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483A58);
  }
  return result;
}

unint64_t sub_10024FBC4()
{
  unint64_t result = qword_100483A60;
  if (!qword_100483A60)
  {
    sub_100014434(&qword_100483A68);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483A60);
  }
  return result;
}

unint64_t sub_10024FC24()
{
  unint64_t result = qword_100483A70;
  if (!qword_100483A70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483A70);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for LogSubsystem(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10024FD44);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LogSubsystem()
{
  return &type metadata for LogSubsystem;
}

uint64_t getEnumTagSinglePayload for LogCategory(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE6) {
    goto LABEL_17;
  }
  if (a2 + 26 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 26) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 26;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 26;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 26;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1B;
  int v8 = v6 - 27;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for LogCategory(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 26 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 26) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE5)
  {
    unsigned int v6 = ((a2 - 230) >> 8) + 1;
    *unint64_t result = a2 + 26;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10024FED8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 26;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LogCategory()
{
  return &type metadata for LogCategory;
}

unint64_t sub_10024FF10()
{
  unint64_t result = qword_100483A78;
  if (!qword_100483A78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483A78);
  }
  return result;
}

uint64_t LengthValueHelper.inferredLoad<A>()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 32))(a1, a3);
  unint64_t v6 = v5;
  Data.load<A>(as:)(a2, v4, v5, a2);
  return sub_10000C970(v4, v6);
}

uint64_t TypeLengthValue.length.getter(uint64_t a1)
{
  int v2 = (uint64_t *)(v1 + *(int *)(a1 + 84));
  uint64_t v3 = *v2;
  switch((unint64_t)v2[1] >> 62)
  {
    case 1uLL:
      if (!__OFSUB__(HIDWORD(v3), v3)) {
        goto LABEL_5;
      }
      __break(1u);
LABEL_7:
      __break(1u);
      JUMPOUT(0x1002500B4);
    case 2uLL:
      if (!__OFSUB__(*(void *)(v3 + 24), *(void *)(v3 + 16))) {
        goto LABEL_5;
      }
      goto LABEL_7;
    default:
LABEL_5:
      sub_10003AAFC();
      return dispatch thunk of BinaryInteger.init<A>(_:)();
  }
}

uint64_t TypeLengthValue.valueData()(uint64_t a1)
{
  uint64_t v1 = sub_10025398C(a1);
  sub_100013D44(v1, v2);
  return v1;
}

uint64_t LengthValue.valueData()(uint64_t a1)
{
  uint64_t v1 = NANBitmap.Channel.operatingClass.getter(a1);
  sub_100013D44(v1, v2);
  return v1;
}

uint64_t LengthValue.init(data:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v70 = *(void *)(*(void *)(*(void *)(a6 + 8) + 24) + 16);
  swift_getAssociatedTypeWitness();
  __chkstk_darwin();
  uint64_t v79 = *(char **)(a3 - 8);
  __chkstk_darwin();
  uint64_t v68 = (char *)v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  __chkstk_darwin();
  int32x2_t v75 = (char *)v67 - v11;
  __chkstk_darwin();
  char v13 = (char *)v67 - v12;
  __chkstk_darwin();
  BOOL v72 = (char *)v67 - v14;
  __chkstk_darwin();
  unint64_t v74 = (char *)v67 - v15;
  __chkstk_darwin();
  uint64_t v17 = (char *)v67 - v16;
  uint64_t v18 = __chkstk_darwin();
  unint64_t v22 = (char *)v67 - v21;
  uint64_t v23 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v23) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        v80(v17, a3);
        __break(1u);
        JUMPOUT(0x1002509F4);
      }
      uint64_t v23 = (int)v23;
LABEL_6:
      uint64_t v69 = v20;
      v67[1] = v18;
      uint64_t v71 = v19;
      uint64_t v76 = v23;
      uint64_t v77 = a1;
      uint64_t v73 = v6;
      unint64_t v78 = a2;
      dispatch thunk of static FixedWidthInteger.max.getter();
      char v27 = dispatch thunk of static BinaryInteger.isSigned.getter();
      char v28 = v79;
      uint64_t v29 = (char *)*((void *)v79 + 2);
      ((void (*)(char *, char *, uint64_t))v29)(v17, v22, a3);
      if ((v27 & 1) == 0)
      {
        uint64_t v80 = (void (*)(char *, uint64_t))*((void *)v28 + 1);
        v80(v17, a3);
        goto LABEL_12;
      }
      uint64_t v30 = dispatch thunk of BinaryInteger.bitWidth.getter();
      uint64_t v80 = (void (*)(char *, uint64_t))*((void *)v28 + 1);
      v80(v17, a3);
      if (v30 <= 64) {
        goto LABEL_12;
      }
      v67[0] = v28 + 8;
      char v31 = v74;
      ((void (*)(char *, char *, uint64_t))v29)(v74, v22, a3);
      int64_t v82 = 0x8000000000000000;
      if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0) {
        goto LABEL_28;
      }
      if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64) {
        goto LABEL_30;
      }
      uint64_t v32 = dispatch thunk of BinaryInteger._lowWord.getter();
      uint64_t v33 = v31;
      uint64_t v34 = v32;
      char v35 = v33;
      break;
    case 2uLL:
      uint64_t v25 = *(void *)(a1 + 16);
      uint64_t v24 = *(void *)(a1 + 24);
      BOOL v26 = __OFSUB__(v24, v25);
      uint64_t v23 = v24 - v25;
      if (!v26) {
        goto LABEL_6;
      }
      goto LABEL_42;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v23 = BYTE6(a2);
      goto LABEL_6;
  }
LABEL_35:
  v80(v35, a3);
  if (v34 >= v82) {
    goto LABEL_12;
  }
  do
  {
LABEL_36:
    __break(1u);
LABEL_37:
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    uint64_t v60 = v72;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    char v61 = dispatch thunk of static Comparable.< infix(_:_:)();
    v80(v60, a3);
    uint64_t v17 = v68;
    (*((void (**)(char *, char *, uint64_t))v28 + 4))(v68, v74, a3);
    if (v61) {
      goto LABEL_43;
    }
    int64_t v62 = v82;
    uint64_t v63 = dispatch thunk of BinaryInteger._lowWord.getter();
    uint64_t v64 = v17;
    uint64_t v65 = v63;
    v80(v64, a3);
    BOOL v66 = v65 < v62;
    char v28 = v79;
  }
  while (v66);
  while (1)
  {
LABEL_12:
    uint64_t v36 = dispatch thunk of BinaryInteger.bitWidth.getter();
    ((void (*)(char *, char *, uint64_t))v29)(v13, v22, a3);
    if (v36 < 65)
    {
      uint64_t v44 = dispatch thunk of BinaryInteger.bitWidth.getter();
      uint64_t v45 = v13;
      char v13 = (char *)v80;
      v80(v45, a3);
      if (v44 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0) {
        goto LABEL_23;
      }
    }
    else
    {
      v80(v13, a3);
    }
    uint64_t v37 = v75;
    ((void (*)(char *, char *, uint64_t))v29)(v75, v22, a3);
    int64_t v82 = 0x7FFFFFFFFFFFFFFFLL;
    char v38 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v39 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v38)
    {
      uint64_t v29 = v79;
      if (v39 <= 64) {
        break;
      }
      sub_10003AAFC();
      int v40 = v72;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v41 = dispatch thunk of static Comparable.< infix(_:_:)();
      char v28 = v29 + 8;
      uint64_t v42 = (char *)v80;
      v80(v40, a3);
      uint64_t v43 = v37;
      char v13 = v42;
      ((void (*)(char *, uint64_t))v42)(v43, a3);
      if ((v41 & 1) == 0) {
        goto LABEL_23;
      }
      goto LABEL_27;
    }
    if (v39 <= 63) {
      break;
    }
    uint64_t v81 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v29 = v79 + 32;
    uint64_t v50 = v72;
    (*((void (**)(char *, char *, uint64_t))v79 + 4))(v72, v37, a3);
    sub_10003AAFC();
    uint64_t v51 = v71;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v52 = dispatch thunk of static Comparable.< infix(_:_:)();
    char v28 = v29 - 24;
    uint64_t v53 = v51;
    char v13 = (char *)v80;
    v80(v53, a3);
    ((void (*)(char *, uint64_t))v13)(v50, a3);
    if ((v52 & 1) == 0) {
      goto LABEL_23;
    }
LABEL_27:
    __break(1u);
LABEL_28:
    char v54 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v55 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v54)
    {
      if (v55 <= 64) {
        goto LABEL_37;
      }
LABEL_30:
      sub_10003AAFC();
      uint64_t v56 = v72;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      LODWORD(v70) = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v57 = v56;
      uint64_t v58 = v80;
      v80(v57, a3);
      v58(v74, a3);
      if (v70) {
        goto LABEL_36;
      }
    }
    else
    {
      if (v55 < 64)
      {
        uint64_t v59 = v74;
        uint64_t v34 = dispatch thunk of BinaryInteger._lowWord.getter();
        char v35 = v59;
        goto LABEL_35;
      }
      v80(v74, a3);
    }
  }
  dispatch thunk of BinaryInteger._lowWord.getter();
  uint64_t v46 = v37;
  char v13 = (char *)v80;
  v80(v46, a3);
LABEL_23:
  uint64_t v47 = dispatch thunk of BinaryInteger._lowWord.getter();
  ((void (*)(char *, uint64_t))v13)(v22, a3);
  if (v76 < v47) {
    return v77;
  }
  sub_10000F000();
  swift_allocError();
  *(void *)uint64_t v49 = 0;
  *(void *)(v49 + 8) = 0;
  *(unsigned char *)(v49 + 16) = 2;
  swift_willThrow();
  return sub_10000C970(v77, v78);
}

uint64_t LengthValueHelper.parseForOptional<A>()@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v18 = a2;
  uint64_t v4 = *(a1 - 1);
  uint64_t v5 = __chkstk_darwin();
  BOOL v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 32))(v5, v8);
  unint64_t v11 = v10;
  unint64_t v12 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for BinaryDecoder();
  char v13 = (void *)swift_allocObject();
  v13[5] = &_swiftEmptyDictionarySingleton;
  v13[2] = v9;
  v13[3] = v11;
  uint64_t v14 = 0;
  switch(v11 >> 62)
  {
    case 1uLL:
      uint64_t v14 = (int)v9;
      break;
    case 2uLL:
      uint64_t v14 = *(void *)(v9 + 16);
      break;
    default:
      break;
  }
  v13[4] = v14;
  swift_beginAccess();
  v13[5] = v12;
  swift_bridgeObjectRelease();
  v17[3] = &type metadata for BinaryDecoder.UnkeyedContainer;
  v17[4] = sub_10008B64C();
  v17[0] = v13;
  sub_100039448((uint64_t)v17, (uint64_t)&type metadata for BinaryDecoder.UnkeyedContainer);
  sub_1000E282C(a1);
  if (!v2)
  {
    uint64_t v15 = v18;
    (*(void (**)(uint64_t, char *, void *))(v4 + 32))(v18, v7, a1);
    (*(void (**)(uint64_t, void, uint64_t, void *))(v4 + 56))(v15, 0, 1, a1);
  }
  return sub_100010754((uint64_t)v17);
}

uint64_t LengthValueHelper.parse<A>()(uint64_t a1, void *a2, uint64_t a3)
{
  type metadata accessor for BinaryDecoder();
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 32))(a1, a3);
  unint64_t v8 = v7;
  static BinaryDecoder.decode<A>(_:data:)((uint64_t)a2, v6, v7, a2);
  return sub_10000C970(v6, v8);
}

uint64_t TypeLengthValue.init(type:data:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, int64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = v12;
  uint64_t v81 = a7;
  uint64_t v82 = a8;
  uint64_t v80 = a6;
  uint64_t v88 = a1;
  int64_t v89 = a4;
  uint64_t v83 = a9;
  uint64_t v79 = a11;
  uint64_t v78 = a10;
  uint64_t v90 = a12;
  int64_t v74 = *(void *)(*(void *)(*(void *)(a12 + 8) + 24) + 16);
  swift_getAssociatedTypeWitness();
  __chkstk_darwin();
  uint64_t v92 = *(void *)(a5 - 8);
  __chkstk_darwin();
  __chkstk_darwin();
  __chkstk_darwin();
  uint64_t v84 = (char *)v69 - v17;
  __chkstk_darwin();
  char v19 = (char *)v69 - v18;
  __chkstk_darwin();
  uint64_t v76 = (char *)v69 - v20;
  __chkstk_darwin();
  uint64_t v22 = (uint64_t)v69 - v21;
  __chkstk_darwin();
  uint64_t v24 = (char *)v69 - v23;
  uint64_t v25 = __chkstk_darwin();
  uint64_t v30 = (char *)v69 - v29;
  uint64_t v31 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      LODWORD(v31) = HIDWORD(a2) - a2;
      if (__OFSUB__(HIDWORD(a2), a2))
      {
        __break(1u);
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }
      uint64_t v31 = (int)v31;
LABEL_6:
      uint64_t v71 = v28;
      uint64_t v72 = v25;
      uint64_t v73 = v27;
      int32x2_t v75 = v26;
      uint64_t v85 = v31;
      uint64_t v86 = a2;
      unint64_t v87 = a3;
      uint64_t v77 = v12;
      dispatch thunk of static FixedWidthInteger.max.getter();
      char v35 = dispatch thunk of static BinaryInteger.isSigned.getter();
      uint64_t v36 = v92;
      int v91 = *(void (**)(char *, char *, uint64_t))(v92 + 16);
      v91(v24, v30, a5);
      if ((v35 & 1) == 0)
      {
        a3 = *(void *)(v36 + 8);
        char v41 = v24;
        uint64_t v42 = a5;
        goto LABEL_12;
      }
      uint64_t v37 = dispatch thunk of BinaryInteger.bitWidth.getter();
      uint64_t v38 = v36 + 8;
      a3 = *(void *)(v36 + 8);
      uint64_t v39 = v24;
      uint64_t v40 = v38;
      ((void (*)(char *, uint64_t))a3)(v39, a5);
      if (v37 > 64)
      {
        v91((char *)v22, v30, a5);
        int64_t v93 = 0x8000000000000000;
        if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0) {
          goto LABEL_29;
        }
        if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
        {
          sub_10003AAFC();
          uint64_t v70 = (void (*)(char *, uint64_t))a3;
          uint64_t v64 = v76;
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
          char v62 = dispatch thunk of static Comparable.< infix(_:_:)();
          uint64_t v65 = v64;
          a3 = (unint64_t)v70;
          v70(v65, a5);
          goto LABEL_33;
        }
LABEL_36:
        uint64_t v66 = dispatch thunk of BinaryInteger._lowWord.getter();
        ((void (*)(uint64_t, uint64_t))a3)(v22, a5);
        if (v66 >= v93) {
          goto LABEL_13;
        }
LABEL_37:
        while (1)
        {
          __break(1u);
LABEL_38:
          swift_getAssociatedConformanceWitness();
          dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
          uint64_t v67 = v76;
          dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
          LODWORD(v74) = dispatch thunk of static Comparable.< infix(_:_:)();
          uint64_t v68 = v67;
          a3 = (unint64_t)v70;
          v70(v68, a5);
          uint64_t v13 = v73;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v92 + 32))(v73, v22, a5);
          if (v74) {
            break;
          }
          int64_t v74 = v93;
          uint64_t v22 = dispatch thunk of BinaryInteger._lowWord.getter();
          ((void (*)(uint64_t, uint64_t))a3)(v13, a5);
          if (v22 >= v74) {
            goto LABEL_13;
          }
        }
LABEL_44:
        ((void (*)(uint64_t, uint64_t))a3)(v13, a5);
        __break(1u);
        JUMPOUT(0x100251750);
      }
      return result;
    case 2uLL:
      uint64_t v33 = *(void *)(a2 + 16);
      uint64_t v32 = *(void *)(a2 + 24);
      BOOL v34 = __OFSUB__(v32, v33);
      uint64_t v31 = v32 - v33;
      if (!v34) {
        goto LABEL_6;
      }
      goto LABEL_43;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v31 = BYTE6(a3);
      goto LABEL_6;
  }
  while (1)
  {
LABEL_13:
    uint64_t v43 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v91(v19, v30, a5);
    if (v43 < 65)
    {
      uint64_t v49 = dispatch thunk of BinaryInteger.bitWidth.getter();
      ((void (*)(char *, uint64_t))a3)(v19, a5);
      if (v49 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0) {
        goto LABEL_24;
      }
    }
    else
    {
      ((void (*)(char *, uint64_t))a3)(v19, a5);
    }
    char v19 = v84;
    v91(v84, v30, a5);
    int64_t v93 = 0x7FFFFFFFFFFFFFFFLL;
    char v44 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v45 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v44 & 1) == 0) {
      break;
    }
    if (v45 <= 64) {
      goto LABEL_23;
    }
    sub_10003AAFC();
    uint64_t v46 = (void (*)(char *, uint64_t))a3;
    uint64_t v47 = v76;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    uint64_t v22 = dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t v40 = v92 + 8;
    uint64_t v48 = v47;
    a3 = (unint64_t)v46;
    v46(v48, a5);
    v46(v19, a5);
    if ((v22 & 1) == 0) {
      goto LABEL_24;
    }
LABEL_28:
    __break(1u);
LABEL_29:
    v69[1] = v40;
    char v59 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v60 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v59)
    {
      uint64_t v70 = (void (*)(char *, uint64_t))a3;
      if (v60 <= 64) {
        goto LABEL_38;
      }
      sub_10003AAFC();
      char v61 = v76;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v62 = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v63 = v61;
      a3 = (unint64_t)v70;
      v70(v63, a5);
LABEL_33:
      ((void (*)(uint64_t, uint64_t))a3)(v22, a5);
      if (v62) {
        goto LABEL_37;
      }
    }
    else
    {
      if (v60 < 64) {
        goto LABEL_36;
      }
      char v41 = (char *)v22;
      uint64_t v42 = a5;
LABEL_12:
      ((void (*)(char *, uint64_t))a3)(v41, v42);
    }
  }
  if (v45 > 63)
  {
    uint64_t v101 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v70 = (void (*)(char *, uint64_t))a3;
    uint64_t v57 = v92 + 32;
    uint64_t v58 = v76;
    (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v76, v19, a5);
    sub_10003AAFC();
    char v19 = v75;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    uint64_t v22 = dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t v40 = v57 - 24;
    a3 = (unint64_t)v70;
    v70(v19, a5);
    ((void (*)(char *, uint64_t))a3)(v58, a5);
    if ((v22 & 1) == 0) {
      goto LABEL_24;
    }
    goto LABEL_28;
  }
LABEL_23:
  dispatch thunk of BinaryInteger._lowWord.getter();
  ((void (*)(char *, uint64_t))a3)(v19, a5);
LABEL_24:
  uint64_t v50 = dispatch thunk of BinaryInteger._lowWord.getter();
  ((void (*)(char *, uint64_t))a3)(v30, a5);
  if (v85 >= v50)
  {
    sub_10000F000();
    swift_allocError();
    *(void *)uint64_t v56 = 0;
    *(void *)(v56 + 8) = 0;
    *(unsigned char *)(v56 + 16) = 2;
    swift_willThrow();
    sub_10000C970(v86, v87);
    return (*(uint64_t (**)(uint64_t))(*(void *)(v89 - 8) + 8))(v88);
  }
  else
  {
    int64_t v51 = v89;
    uint64_t v52 = v83;
    (*(void (**)(uint64_t, uint64_t, int64_t))(*(void *)(v89 - 8) + 32))(v83, v88, v89);
    int64_t v93 = v51;
    uint64_t v94 = a5;
    uint64_t v95 = v80;
    uint64_t v96 = v81;
    uint64_t v97 = v82;
    uint64_t v98 = v78;
    uint64_t v99 = v79;
    uint64_t v100 = v90;
    uint64_t result = type metadata accessor for TypeLengthValue();
    char v54 = (void *)(v52 + *(int *)(result + 84));
    unint64_t v55 = v87;
    *char v54 = v86;
    v54[1] = v55;
  }
  return result;
}

uint64_t LengthValueHelper.load<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 32))(a2, a4);
  unint64_t v7 = v6;
  Data.load<A>(as:)(a3, v5, v6, a3);
  return sub_10000C970(v5, v7);
}

uint64_t TypeLengthValue.type.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t TypeLengthValue.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, void (*a6)(void, void)@<X5>, void (*a7)(void, void)@<X6>, char *a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v139 = a8;
  uint64_t v138 = a6;
  uint64_t v123 = a9;
  uint64_t v131 = *(void *)(a10 + 8);
  uint64_t v121 = *(void *)(*(void *)(v131 + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  __chkstk_darwin();
  char v118 = (char *)&v115 - v16;
  uint64_t v128 = type metadata accessor for CodingUserInfoKey();
  uint64_t v127 = *(void *)(v128 - 8);
  __chkstk_darwin();
  unint64_t v126 = (char *)&v115 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v132 = *((void *)a3 - 1);
  __chkstk_darwin();
  int8x16_t v120 = (char *)&v115 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v122 = (char *)&v115 - v19;
  __chkstk_darwin();
  uint64_t v130 = (char *)&v115 - v20;
  __chkstk_darwin();
  unint64_t v129 = (char *)&v115 - v21;
  __chkstk_darwin();
  unint64_t v125 = (char *)&v115 - v22;
  __chkstk_darwin();
  uint64_t v124 = (char *)&v115 - v23;
  __chkstk_darwin();
  uint64_t v25 = (char *)&v115 - v24;
  __chkstk_darwin();
  uint64_t v27 = (char *)&v115 - v26;
  uint64_t v134 = *(void *)(a2 - 8);
  __chkstk_darwin();
  int v135 = (char *)&v115 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __int16 v136 = a4;
  v143[0] = a2;
  v143[1] = a3;
  int v133 = a3;
  v143[2] = a4;
  uint64_t v144 = a5;
  char v145 = v138;
  uint64_t v146 = a7;
  uint64_t v137 = a2;
  uint64_t v138 = a7;
  uint64_t v147 = v139;
  uint64_t v148 = a10;
  uint64_t v29 = type metadata accessor for TypeLengthValue();
  uint64_t v30 = *(void *)(v29 - 8);
  __chkstk_darwin();
  uint64_t v32 = (char *)&v115 - v31;
  sub_1000369C4(a1, a1[3]);
  uint64_t v33 = v140;
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v33) {
    return sub_100010754((uint64_t)a1);
  }
  int16x8_t v117 = v25;
  unint64_t v140 = v27;
  uint64_t v116 = v30;
  uint64_t v139 = v32;
  sub_100039448((uint64_t)v143, v144);
  BOOL v34 = v135;
  uint64_t v35 = v137;
  UnkeyedDecodingContainer.inferredDecode<A>()();
  uint64_t v115 = v29;
  __int16 v136 = a1;
  (*(void (**)(char *, char *, uint64_t))(v134 + 32))(v139, v34, v35);
  sub_100039448((uint64_t)v143, v144);
  uint64_t v37 = v140;
  uint64_t v38 = v133;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  int v135 = 0;
  uint64_t v39 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v40 = v132;
  char v41 = *(void (**)(char *, char *, char *))(v132 + 16);
  uint64_t v42 = v117;
  v41(v117, v37, v38);
  if ((v39 & 1) == 0)
  {
    uint64_t v138 = *(void (**)(void, void))(v40 + 8);
    v138(v42, v38);
LABEL_13:
    uint64_t v46 = v130;
    goto LABEL_14;
  }
  uint64_t v43 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v40 = *(void *)(v40 + 8);
  ((void (*)(char *, char *))v40)(v42, v38);
  uint64_t v138 = (void (*)(void, void))v40;
  if (v43 <= 64)
  {
    uint64_t v37 = v140;
LABEL_12:
    uint64_t v40 = v132;
    goto LABEL_13;
  }
  char v44 = v124;
  v41(v124, v140, v38);
  *(void *)&long long v141 = 0x8000000000000000;
  if (dispatch thunk of static BinaryInteger.isSigned.getter())
  {
    uint64_t v45 = dispatch thunk of BinaryInteger.bitWidth.getter();
    uint64_t v46 = v130;
    if (v45 < 64)
    {
      uint64_t v47 = dispatch thunk of BinaryInteger._lowWord.getter();
      uint64_t v48 = v44;
      uint64_t v49 = v47;
      ((void (*)(char *, char *))v40)(v48, v38);
      uint64_t v37 = v140;
      uint64_t v50 = &v151;
      uint64_t v40 = v132;
      if (v49 >= (uint64_t)v141) {
        goto LABEL_14;
      }
      goto LABEL_56;
    }
    sub_10003AAFC();
    uint64_t v100 = v125;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v101 = dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t v102 = v100;
    uint64_t v103 = (void (*)(char *, char *))v138;
    v138(v102, v38);
    v103(v44, v38);
    uint64_t v37 = v140;
    uint64_t v50 = &v151;
    uint64_t v40 = v132;
    if (v101)
    {
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
  }
  else
  {
    char v93 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v94 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v93)
    {
      uint64_t v37 = v140;
      uint64_t v95 = v125;
      if (v94 > 64)
      {
        sub_10003AAFC();
        uint64_t v96 = v133;
        uint64_t v97 = (void (*)(char *, char *))v40;
        uint64_t v98 = v95;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        uint64_t v99 = v124;
        LODWORD(v121) = dispatch thunk of static Comparable.< infix(_:_:)();
        v97(v98, v96);
        v97(v99, v96);
        uint64_t v38 = v96;
        uint64_t v40 = v132;
        uint64_t v46 = v130;
        uint64_t v50 = (uint64_t *)v121;
        if (v121) {
          goto LABEL_56;
        }
        goto LABEL_14;
      }
      uint64_t v70 = v133;
      swift_getAssociatedConformanceWitness();
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      unint64_t v108 = v95;
      uint64_t v109 = v124;
      LODWORD(v121) = dispatch thunk of static Comparable.< infix(_:_:)();
      ((void (*)(char *, char *))v40)(v108, v70);
      unint64_t v66 = (unint64_t)v120;
      (*(void (**)(char *, char *, char *))(v132 + 32))(v120, v109, v70);
      if (v121)
      {
LABEL_67:
        ((void (*)(unint64_t, char *))v40)(v66, v70);
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
        JUMPOUT(0x1002527ACLL);
      }
      uint64_t v110 = v141;
      uint64_t v111 = dispatch thunk of BinaryInteger._lowWord.getter();
      ((void (*)(unint64_t, char *))v40)(v66, v70);
      BOOL v107 = v111 < v110;
      uint64_t v38 = v70;
      uint64_t v37 = v140;
    }
    else
    {
      uint64_t v37 = v140;
      uint64_t v50 = &v149;
      if (v94 >= 64)
      {
LABEL_57:
        unint64_t v112 = v133;
        ((void (*)(void, char *))v40)(*(v50 - 32), v133);
        uint64_t v38 = v112;
        goto LABEL_12;
      }
      uint64_t v104 = v124;
      uint64_t v105 = v133;
      uint64_t v106 = dispatch thunk of BinaryInteger._lowWord.getter();
      ((void (*)(char *, char *))v40)(v104, v105);
      BOOL v107 = v106 < (uint64_t)v141;
      uint64_t v38 = v105;
    }
    uint64_t v40 = v132;
    uint64_t v50 = &v150;
    uint64_t v46 = v130;
    if (v107) {
      goto LABEL_56;
    }
  }
LABEL_14:
  uint64_t v51 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v52 = v129;
  v41(v129, v37, v38);
  if (v51 < 65)
  {
    uint64_t v53 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v138(v52, v38);
    if (v53 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0) {
      goto LABEL_26;
    }
  }
  else
  {
    v138(v52, v38);
  }
  v41(v46, v140, v38);
  *(void *)&long long v141 = 0x7FFFFFFFFFFFFFFFLL;
  char v54 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v55 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v54 & 1) == 0)
  {
    if (v55 > 63) {
      goto LABEL_24;
    }
LABEL_22:
    uint64_t v60 = dispatch thunk of BinaryInteger._lowWord.getter();
    v138(v46, v38);
    if ((uint64_t)v141 < v60) {
      goto LABEL_23;
    }
    goto LABEL_26;
  }
  if (v55 <= 64) {
    goto LABEL_22;
  }
  sub_10003AAFC();
  uint64_t v56 = v125;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  char v57 = dispatch thunk of static Comparable.< infix(_:_:)();
  uint64_t v58 = (void (*)(char *, char *))v138;
  v138(v56, v38);
  for (i = v46; ; i = v62)
  {
    v58(i, v38);
    if ((v57 & 1) == 0) {
      break;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    uint64_t v149 = 0x7FFFFFFFFFFFFFFFLL;
    char v61 = *(void (**)(char *, char *, char *))(v40 + 32);
    v40 += 32;
    char v62 = v125;
    v61(v125, v46, v38);
    sub_10003AAFC();
    uint64_t v63 = v122;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v57 = dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t v58 = (void (*)(char *, char *))v138;
    v138(v63, v38);
  }
LABEL_26:
  uint64_t v64 = v140;
  uint64_t v65 = dispatch thunk of BinaryInteger._lowWord.getter();
  v138(v64, v38);
  sub_1000369C4(v136, v136[3]);
  unint64_t v66 = dispatch thunk of Decoder.userInfo.getter();
  if (qword_10047BFA8 != -1) {
    swift_once();
  }
  uint64_t v67 = v128;
  uint64_t v68 = sub_1000151B8(v128, (uint64_t)static CodingUserInfoKey.fourByteAlignedValue);
  uint64_t v69 = v127;
  uint64_t v40 = (uint64_t)v126;
  (*(void (**)(char *, uint64_t, uint64_t))(v127 + 16))(v126, v68, v67);
  uint64_t v70 = v139;
  uint64_t v71 = v135;
  if (*(void *)(v66 + 16) && (unint64_t v72 = sub_1000313F0(v40), (v73 & 1) != 0))
  {
    sub_1000107A4(*(void *)(v66 + 56) + 32 * v72, (uint64_t)&v141);
  }
  else
  {
    long long v141 = 0u;
    long long v142 = 0u;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v40, v67);
  if (*((void *)&v142 + 1))
  {
    if ((swift_dynamicCast() & 1) != 0 && v149 == 1)
    {
      if (__OFADD__(v65, 3))
      {
        __break(1u);
LABEL_66:
        __break(1u);
        goto LABEL_67;
      }
      int64_t v74 = v70;
      uint64_t v75 = v144;
      sub_100039448((uint64_t)v143, v144);
      uint64_t v76 = v71;
      uint64_t v77 = UnkeyedDecodingContainer.decodeData(with:)((v65 + 3) & 0xFFFFFFFFFFFFFFFCLL, v75);
      uint64_t v79 = v134;
      uint64_t v80 = v137;
      if (!v76)
      {
        unint64_t v66 = v78;
        uint64_t v81 = v77;
        uint64_t v70 = 0;
        uint64_t v82 = 0;
        uint64_t v83 = 0;
        uint64_t v84 = v123;
        uint64_t v40 = v116;
        switch(v78 >> 62)
        {
          case 1uLL:
            uint64_t v83 = (int)v81;
            BOOL v113 = __OFADD__((int)v81, v65);
            v65 += (int)v81;
            if (v113) {
              goto LABEL_68;
            }
            uint64_t v82 = v81 >> 32;
            break;
          case 2uLL:
            uint64_t v83 = *(void *)(v81 + 16);
            BOOL v113 = __OFADD__(v83, v65);
            v65 += v83;
            if (v113) {
              goto LABEL_69;
            }
            uint64_t v82 = *(void *)(v81 + 24);
            break;
          case 3uLL:
            break;
          default:
            uint64_t v83 = 0;
            uint64_t v82 = BYTE6(v78);
            break;
        }
        if (v82 >= v83 && v65 >= v83)
        {
          uint64_t v89 = Data._Representation.subscript.getter();
          uint64_t v90 = v114;
          sub_10000C970(v81, v66);
          goto LABEL_43;
        }
        goto LABEL_66;
      }
LABEL_41:
      sub_100010754((uint64_t)v143);
      sub_100010754((uint64_t)v136);
      return (*(uint64_t (**)(char *, uint64_t))(v79 + 8))(v70, v80);
    }
  }
  else
  {
    sub_1000D4FD4((uint64_t)&v141);
  }
  uint64_t v85 = v144;
  sub_100039448((uint64_t)v143, v144);
  uint64_t v86 = v71;
  uint64_t v87 = UnkeyedDecodingContainer.decodeData(with:)(v65, v85);
  uint64_t v79 = v134;
  uint64_t v80 = v137;
  if (v86) {
    goto LABEL_41;
  }
  uint64_t v89 = v87;
  uint64_t v90 = v88;
  int64_t v74 = v70;
  uint64_t v84 = v123;
  uint64_t v40 = v116;
LABEL_43:
  uint64_t v91 = v115;
  uint64_t v92 = (uint64_t *)&v74[*(int *)(v115 + 84)];
  *uint64_t v92 = v89;
  v92[1] = v90;
  sub_100010754((uint64_t)v143);
  (*(void (**)(uint64_t, char *, uint64_t))(v40 + 16))(v84, v74, v91);
  sub_100010754((uint64_t)v136);
  return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v74, v91);
}

uint64_t TypeLengthValue.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (void *)__chkstk_darwin();
  uint64_t v9 = &v12[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_1000369C4(v7, v7[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  sub_100039448((uint64_t)v12, v13);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v3)
  {
    TypeLengthValue.length.getter(a2);
    sub_100039448((uint64_t)v12, v13);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v9, v5);
    long long v11 = *(_OWORD *)(v2 + *(int *)(a2 + 84));
    sub_100039448((uint64_t)v12, v13);
    sub_1000742DC();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return sub_100010754((uint64_t)v12);
}

uint64_t sub_100252988@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return TypeLengthValue.init(from:)(a1, *(void *)(a2 + 16), *(char **)(a2 + 24), *(void **)(a2 + 32), *(void *)(a2 + 40), *(void (**)(void, void))(a2 + 48), *(void (**)(void, void))(a2 + 56), *(char **)(a2 + 64), a3, *(void *)(a2 + 72));
}

uint64_t sub_1002529C0(uint64_t a1, uint64_t a2)
{
  return TypeLengthValue.encode(to:)(a1, a2);
}

uint64_t LengthValue.length.getter(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      if (!__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_5;
      }
      __break(1u);
LABEL_7:
      __break(1u);
      JUMPOUT(0x100252A94);
    case 2uLL:
      if (!__OFSUB__(*(void *)(a1 + 24), *(void *)(a1 + 16))) {
        goto LABEL_5;
      }
      goto LABEL_7;
    default:
LABEL_5:
      sub_10003AAFC();
      return dispatch thunk of BinaryInteger.init<A>(_:)();
  }
}

void *LengthValue.init(from:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v96 = a3;
  uint64_t v94 = *(void *)(a5 + 8);
  uint64_t v88 = *(void *)(*(void *)(v94 + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  __chkstk_darwin();
  uint64_t v85 = (char *)&v81 - v7;
  uint64_t v91 = type metadata accessor for CodingUserInfoKey();
  uint64_t v93 = *(void *)(v91 - 8);
  __chkstk_darwin();
  uint64_t v92 = (char *)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = a2;
  uint64_t v95 = *(void *)(a2 - 8);
  __chkstk_darwin();
  uint64_t v87 = (char *)&v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v89 = (char *)&v81 - v10;
  __chkstk_darwin();
  uint64_t v90 = (char *)&v81 - v11;
  __chkstk_darwin();
  uint64_t v13 = (char *)&v81 - v12;
  __chkstk_darwin();
  uint64_t v15 = (char *)&v81 - v14;
  __chkstk_darwin();
  uint64_t v17 = (char *)&v81 - v16;
  __chkstk_darwin();
  uint64_t v19 = (char *)&v81 - v18;
  __chkstk_darwin();
  uint64_t v21 = (char *)&v81 - v20;
  sub_1000369C4(a1, a1[3]);
  uint64_t v22 = v98;
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v22) {
    goto LABEL_36;
  }
  uint64_t v83 = v19;
  uint64_t v81 = v17;
  uint64_t v84 = v13;
  uint64_t v82 = v15;
  uint64_t v98 = a1;
  sub_100039448((uint64_t)v101, v102);
  uint64_t v23 = v97;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v96 = 0;
  uint64_t v24 = v94;
  char v25 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v26 = v95;
  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v95 + 16);
  uint64_t v28 = v83;
  v27(v83, v21, v23);
  if ((v25 & 1) == 0)
  {
    uint64_t v31 = *(void (**)(char *, uint64_t))(v26 + 8);
    v31(v28, v23);
    uint64_t v32 = v84;
    goto LABEL_8;
  }
  uint64_t v29 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v30 = (char *)(v26 + 8);
  uint64_t v31 = *(void (**)(char *, uint64_t))v30;
  (*(void (**)(char *, uint64_t))v30)(v28, v23);
  uint64_t v32 = v84;
  if (v29 <= 64) {
    goto LABEL_8;
  }
  uint64_t v83 = v30;
  uint64_t v33 = v81;
  v27(v81, v21, v23);
  *(void *)&long long v99 = 0x8000000000000000;
  if (dispatch thunk of static BinaryInteger.isSigned.getter())
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
    {
      sub_10003AAFC();
      uint64_t v71 = v82;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      LODWORD(v88) = dispatch thunk of static Comparable.< infix(_:_:)();
      unint64_t v72 = v71;
      uint64_t v32 = v84;
      v31(v72, v23);
      v31(v33, v23);
      if (v88) {
        goto LABEL_50;
      }
      goto LABEL_8;
    }
    uint64_t v34 = dispatch thunk of BinaryInteger._lowWord.getter();
    uint64_t v35 = v33;
    uint64_t v36 = v34;
    uint64_t v37 = v35;
    goto LABEL_49;
  }
  char v66 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v67 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v66 & 1) == 0)
  {
    if (v67 >= 64)
    {
      v31(v81, v23);
      goto LABEL_8;
    }
    char v73 = v81;
    uint64_t v36 = dispatch thunk of BinaryInteger._lowWord.getter();
    uint64_t v37 = v73;
LABEL_49:
    v31(v37, v23);
    if (v36 < (uint64_t)v99) {
      goto LABEL_50;
    }
    goto LABEL_8;
  }
  if (v67 <= 64) {
    goto LABEL_51;
  }
  sub_10003AAFC();
  uint64_t v68 = v82;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  uint64_t v69 = v81;
  char v70 = dispatch thunk of static Comparable.< infix(_:_:)();
  v31(v68, v23);
  v31(v69, v23);
  uint64_t v32 = v84;
  if (v70)
  {
LABEL_50:
    while (1)
    {
      __break(1u);
LABEL_51:
      swift_getAssociatedConformanceWitness();
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      int64_t v74 = v82;
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      uint64_t v75 = v81;
      LODWORD(v88) = dispatch thunk of static Comparable.< infix(_:_:)();
      v31(v74, v23);
      uint64_t v48 = (uint64_t)v87;
      (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v87, v75, v23);
      if (v88) {
        break;
      }
      uint64_t v76 = v24;
      uint64_t v77 = v99;
      uint64_t v78 = dispatch thunk of BinaryInteger._lowWord.getter();
      v31((char *)v48, v23);
      BOOL v79 = v78 < v77;
      uint64_t v24 = v76;
      uint64_t v32 = v84;
      if (!v79) {
        goto LABEL_8;
      }
    }
LABEL_64:
    v31((char *)v48, v23);
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
    JUMPOUT(0x10025371CLL);
  }
LABEL_8:
  uint64_t v38 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v27(v32, v21, v23);
  if (v38 < 65)
  {
    uint64_t v39 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v31(v32, v23);
    if (v39 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0) {
      goto LABEL_20;
    }
  }
  else
  {
    v31(v32, v23);
  }
  uint64_t v40 = v90;
  v27(v90, v21, v23);
  char v41 = v40;
  *(void *)&long long v99 = 0x7FFFFFFFFFFFFFFFLL;
  LOBYTE(v40) = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v42 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v40 & 1) == 0)
  {
    uint64_t v43 = v82;
    if (v42 > 63) {
      goto LABEL_18;
    }
LABEL_16:
    uint64_t v46 = dispatch thunk of BinaryInteger._lowWord.getter();
    v31(v41, v23);
    if ((uint64_t)v99 < v46) {
      goto LABEL_17;
    }
    goto LABEL_20;
  }
  uint64_t v43 = v82;
  if (v42 <= 64) {
    goto LABEL_16;
  }
  sub_10003AAFC();
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  char v44 = dispatch thunk of static Comparable.< infix(_:_:)();
  v31(v43, v23);
  for (i = v41; ; i = v43)
  {
    v31(i, v23);
    if ((v44 & 1) == 0) {
      break;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    uint64_t v104 = 0x7FFFFFFFFFFFFFFFLL;
    (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v43, v41, v23);
    sub_10003AAFC();
    char v41 = v89;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v44 = dispatch thunk of static Comparable.< infix(_:_:)();
    v31(v41, v23);
  }
LABEL_20:
  uint64_t v47 = dispatch thunk of BinaryInteger._lowWord.getter();
  v31(v21, v23);
  sub_1000369C4(v98, v98[3]);
  uint64_t v48 = dispatch thunk of Decoder.userInfo.getter();
  if (qword_10047BFA8 != -1) {
    swift_once();
  }
  uint64_t v49 = v91;
  uint64_t v50 = sub_1000151B8(v91, (uint64_t)static CodingUserInfoKey.fourByteAlignedValue);
  uint64_t v23 = (uint64_t)v92;
  uint64_t v51 = v93;
  (*(void (**)(char *, uint64_t, uint64_t))(v93 + 16))(v92, v50, v49);
  uint64_t v52 = v96;
  if (*(void *)(v48 + 16) && (unint64_t v53 = sub_1000313F0(v23), (v54 & 1) != 0))
  {
    sub_1000107A4(*(void *)(v48 + 56) + 32 * v53, (uint64_t)&v99);
  }
  else
  {
    long long v99 = 0u;
    long long v100 = 0u;
  }
  swift_bridgeObjectRelease();
  uint64_t v55 = *(void (**)(uint64_t, uint64_t))(v51 + 8);
  uint64_t v31 = (void (*)(char *, uint64_t))(v51 + 8);
  v55(v23, v49);
  if (*((void *)&v100 + 1))
  {
    if ((swift_dynamicCast() & 1) != 0 && v104 == 1)
    {
      if (__OFADD__(v47, 3))
      {
        __break(1u);
LABEL_63:
        __break(1u);
        goto LABEL_64;
      }
      uint64_t v56 = v102;
      uint64_t v31 = v103;
      sub_100039448((uint64_t)v101, v102);
      uint64_t v57 = UnkeyedDecodingContainer.decodeData(with:)((v47 + 3) & 0xFFFFFFFFFFFFFFFCLL, v56);
      if (!v52)
      {
        unint64_t v59 = v58;
        uint64_t v48 = v57;
        uint64_t v60 = 0;
        uint64_t v61 = 0;
        char v62 = v98;
        switch(v58 >> 62)
        {
          case 1uLL:
            uint64_t v61 = (int)v48;
            BOOL v80 = __OFADD__((int)v48, v47);
            v47 += (int)v48;
            if (v80) {
              goto LABEL_65;
            }
            uint64_t v60 = v48 >> 32;
            break;
          case 2uLL:
            uint64_t v61 = *(void *)(v48 + 16);
            BOOL v80 = __OFADD__(v61, v47);
            v47 += v61;
            if (v80) {
              goto LABEL_66;
            }
            uint64_t v60 = *(void *)(v48 + 24);
            break;
          case 3uLL:
            break;
          default:
            uint64_t v61 = 0;
            uint64_t v60 = BYTE6(v58);
            break;
        }
        if (v60 >= v61 && v47 >= v61)
        {
          a1 = (void *)Data._Representation.subscript.getter();
          sub_10000C970(v48, v59);
          goto LABEL_39;
        }
        goto LABEL_63;
      }
      goto LABEL_35;
    }
  }
  else
  {
    sub_1000D4FD4((uint64_t)&v99);
  }
  uint64_t v63 = v102;
  sub_100039448((uint64_t)v101, v102);
  uint64_t v64 = UnkeyedDecodingContainer.decodeData(with:)(v47, v63);
  if (!v52)
  {
    a1 = (void *)v64;
    char v62 = v98;
LABEL_39:
    sub_100010754((uint64_t)v101);
    sub_100010754((uint64_t)v62);
    return a1;
  }
LABEL_35:
  sub_100010754((uint64_t)v101);
  a1 = v98;
LABEL_36:
  sub_100010754((uint64_t)a1);
  return a1;
}

uint64_t LengthValue.encode(to:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v17 = a6;
  uint64_t v9 = *(void *)(a4 - 8);
  uint64_t v10 = (void *)__chkstk_darwin();
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(v10, v10[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  uint64_t v16 = a2;
  LengthValue.length.getter(a2, a3);
  sub_100039448((uint64_t)v20, v21);
  uint64_t v13 = v22;
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, a4);
  if (!v13)
  {
    uint64_t v18 = v16;
    unint64_t v19 = a3;
    sub_100039448((uint64_t)v20, v21);
    sub_1000742DC();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return sub_100010754((uint64_t)v20);
}

void *sub_1002538D4@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t result = LengthValue.init(from:)(a1, a2[2], a2[3], a3, a2[5]);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
  }
  return result;
}

uint64_t sub_10025390C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return LengthValue.encode(to:)(a1, *(void *)v5, *(void *)(v5 + 8), *(void *)(a2 + 16), a5, *(void *)(a2 + 32));
}

uint64_t sub_100253934()
{
  return LengthValue.length.getter(*(void *)v0, *(void *)(v0 + 8));
}

uint64_t sub_100253948()
{
  uint64_t v1 = NANBitmap.Channel.operatingClass.getter(*v0);
  sub_100013D44(v1, v2);
  return v1;
}

uint64_t sub_10025398C(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 84));
}

uint64_t type metadata accessor for TypeLengthValue()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1002539B4(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 72);
}

uint64_t sub_1002539BC(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 40);
}

uint64_t sub_1002539C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 72);
}

uint64_t sub_1002539CC()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_100253A64(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = (uint64_t *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v12 = *v11;
    unint64_t v13 = v11[1];
    sub_100013D44(*v11, v13);
    void *v10 = v12;
    v10[1] = v13;
  }
  return v4;
}

uint64_t sub_100253B68(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  uint64_t v4 = (uint64_t *)((a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];

  return sub_10000C970(v5, v6);
}

uint64_t sub_100253BD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (uint64_t *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = *v8;
  unint64_t v10 = v8[1];
  sub_100013D44(*v8, v10);
  *int v7 = v9;
  v7[1] = v10;
  return a1;
}

uint64_t sub_100253C60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (uint64_t *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (uint64_t *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = *v8;
  unint64_t v10 = v8[1];
  sub_100013D44(*v8, v10);
  uint64_t v11 = *v7;
  unint64_t v12 = v7[1];
  *int v7 = v9;
  v7[1] = v10;
  sub_10000C970(v11, v12);
  return a1;
}

uint64_t sub_100253CF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  *(_OWORD *)((*(void *)(v5 + 32) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v5 + 32) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_100253D6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (uint64_t *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];
  *(_OWORD *)int v7 = *(_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  sub_10000C970(v8, v9);
  return a1;
}

uint64_t sub_100253DF0(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xC) {
    unsigned int v7 = 12;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x100253F48);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0xC) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  uint64_t v17 = *(void *)((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) >> 60;
  if (((4 * v17) & 0xC) != 0) {
    return 16 - ((4 * v17) & 0xC | (v17 >> 2));
  }
  else {
    return 0;
  }
}

void sub_100253F5C(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xC) {
    unsigned int v8 = 12;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      unsigned int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x100254148);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0xC)
        {
          uint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if (a2 > 0xC)
          {
            *uint64_t v18 = a2 - 13;
            v18[1] = 0;
          }
          else
          {
            *uint64_t v18 = 0;
            v18[1] = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
          }
        }
        else
        {
          uint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t type metadata accessor for LengthValue()
{
  return swift_getGenericMetadata();
}

uint64_t RSSI.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v49 = *(void *)(*(void *)(a3 + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  __chkstk_darwin();
  uint64_t v46 = (char *)&v44 - v5;
  uint64_t v6 = *(void *)(a2 - 8);
  __chkstk_darwin();
  uint64_t v48 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v50 = (char *)&v44 - v8;
  __chkstk_darwin();
  unint64_t v53 = (char *)&v44 - v9;
  __chkstk_darwin();
  unsigned int v11 = (char *)&v44 - v10;
  __chkstk_darwin();
  unsigned int v13 = (char *)&v44 - v12;
  __chkstk_darwin();
  uint64_t v52 = (char *)&v44 - v14;
  __chkstk_darwin();
  unsigned int v16 = (char *)&v44 - v15;
  __chkstk_darwin();
  uint64_t v18 = (char *)&v44 - v17;
  unint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  char v54 = (char *)a1;
  v19((char *)&v44 - v17, a1, a2);
  LOBYTE(a1) = dispatch thunk of static BinaryInteger.isSigned.getter();
  v19(v16, (uint64_t)v18, a2);
  uint64_t v51 = v13;
  if ((a1 & 1) == 0)
  {
    uint64_t v55 = *(void (**)(char *, uint64_t))(v6 + 8);
    v55(v16, a2);
    uint64_t v27 = v6;
    uint64_t v24 = v11;
    goto LABEL_20;
  }
  uint64_t v20 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v45 = v6;
  uint64_t v22 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v21 = v6 + 8;
  uint64_t v55 = v22;
  v22(v16, a2);
  if (v20 <= 64)
  {
    uint64_t v27 = v45;
    uint64_t v24 = v11;
    goto LABEL_20;
  }
  uint64_t v44 = v21;
  uint64_t v23 = v52;
  v19(v52, (uint64_t)v18, a2);
  int64_t v57 = 0x8000000000000000;
  uint64_t v24 = v11;
  if (dispatch thunk of static BinaryInteger.isSigned.getter())
  {
    uint64_t v25 = dispatch thunk of BinaryInteger.bitWidth.getter();
    uint64_t v26 = (uint64_t (*)(char *, uint64_t))v55;
    if (v25 >= 64)
    {
      sub_10003AAFC();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      goto LABEL_11;
    }
LABEL_16:
    uint64_t v32 = dispatch thunk of BinaryInteger._lowWord.getter();
    uint64_t result = v26(v23, a2);
    uint64_t v27 = v45;
    if (v32 < v57) {
      goto LABEL_35;
    }
    goto LABEL_20;
  }
  char v28 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v29 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v26 = (uint64_t (*)(char *, uint64_t))v55;
  if ((v28 & 1) == 0)
  {
    if (v29 >= 64)
    {
      v55(v52, a2);
      uint64_t v27 = v45;
      goto LABEL_20;
    }
    uint64_t v23 = v52;
    goto LABEL_16;
  }
  if (v29 > 64)
  {
    sub_10003AAFC();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    uint64_t v23 = v52;
LABEL_11:
    char v30 = dispatch thunk of static Comparable.< infix(_:_:)();
    v26(v13, a2);
    uint64_t result = v26(v23, a2);
    uint64_t v27 = v45;
    if (v30) {
      goto LABEL_35;
    }
    goto LABEL_20;
  }
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  uint64_t v33 = v52;
  LODWORD(v49) = dispatch thunk of static Comparable.< infix(_:_:)();
  v26(v13, a2);
  uint64_t v34 = (uint64_t)v48;
  (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v48, v33, a2);
  if (v49)
  {
LABEL_34:
    uint64_t result = v26((char *)v34, a2);
    goto LABEL_35;
  }
  uint64_t v52 = (char *)v57;
  uint64_t v35 = dispatch thunk of BinaryInteger._lowWord.getter();
  uint64_t result = v26((char *)v34, a2);
  uint64_t v27 = v45;
  if (v35 >= (uint64_t)v52)
  {
LABEL_20:
    uint64_t v36 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v19(v24, (uint64_t)v18, a2);
    if (v36 < 65)
    {
      uint64_t v42 = dispatch thunk of BinaryInteger.bitWidth.getter();
      uint64_t v26 = (uint64_t (*)(char *, uint64_t))v55;
      v55(v24, a2);
      if (v42 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0) {
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v26 = (uint64_t (*)(char *, uint64_t))v55;
      v55(v24, a2);
    }
    uint64_t v37 = v53;
    v19(v53, (uint64_t)v18, a2);
    int64_t v57 = 0x7FFFFFFFFFFFFFFFLL;
    char v38 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v39 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v38)
    {
      if (v39 > 64)
      {
        sub_10003AAFC();
        uint64_t v40 = v51;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        uint64_t v34 = dispatch thunk of static Comparable.< infix(_:_:)();
        char v41 = v37;
LABEL_31:
        v26(v40, a2);
        v26(v41, a2);
        if ((v34 & 1) == 0) {
          goto LABEL_32;
        }
        __break(1u);
        goto LABEL_34;
      }
    }
    else if (v39 > 63)
    {
      uint64_t v56 = 0x7FFFFFFFFFFFFFFFLL;
      char v41 = v51;
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v51, v37, a2);
      sub_10003AAFC();
      uint64_t v40 = v50;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      uint64_t v34 = dispatch thunk of static Comparable.< infix(_:_:)();
      goto LABEL_31;
    }
    dispatch thunk of BinaryInteger._lowWord.getter();
    v26(v37, a2);
LABEL_32:
    uint64_t v43 = dispatch thunk of BinaryInteger._lowWord.getter();
    v26(v18, a2);
    v26(v54, a2);
    return v43;
  }
LABEL_35:
  __break(1u);
  return result;
}

void *RSSI.invalid.unsafeMutableAddressor()
{
  return &static RSSI.invalid;
}

BOOL static RSSI.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 < a2;
}

void *RSSI.minimumDiscoveryThreshold.unsafeMutableAddressor()
{
  return &static RSSI.minimumDiscoveryThreshold;
}

uint64_t static RSSI.minimumDiscoveryThreshold.getter()
{
  return -75;
}

uint64_t RSSI.description.getter()
{
  uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter();
  v0._countAndFlagsBits = 1833067552;
  v0._object = (void *)0xE400000000000000;
  String.append(_:)(v0);
  return v2;
}

void RSSI.hash(into:)(int a1, Swift::UInt a2)
{
}

Swift::Int RSSI.hashValue.getter(Swift::UInt a1)
{
  return Hasher._finalize()();
}

unint64_t sub_100254A90()
{
  unint64_t result = qword_100483BD0;
  if (!qword_100483BD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483BD0);
  }
  return result;
}

BOOL sub_100254AE4(void *a1, void *a2)
{
  return *a1 < *a2;
}

BOOL sub_100254AF8(void *a1, void *a2)
{
  return *a2 >= *a1;
}

BOOL sub_100254B0C(void *a1, void *a2)
{
  return *a1 >= *a2;
}

BOOL sub_100254B20(void *a1, void *a2)
{
  return *a2 < *a1;
}

uint64_t sub_100254B34()
{
  uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter();
  v0._countAndFlagsBits = 1833067552;
  v0._object = (void *)0xE400000000000000;
  String.append(_:)(v0);
  return v2;
}

ValueMetadata *type metadata accessor for RSSI()
{
  return &type metadata for RSSI;
}

_UNKNOWN **static NANBloomFilter.Index.allCases.getter()
{
  return &off_1004507B0;
}

uint64_t sub_100254BC8()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100254C28()
{
  return RawRepresentable<>.encode(to:)();
}

void sub_100254C78(void *a1@<X8>)
{
  *a1 = &off_1004507D8;
}

uint64_t NANBloomFilter.include.getter(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return (a3 >> 8) & 1;
}

uint64_t NANBloomFilter.description.getter(uint64_t a1, unint64_t a2, unsigned __int16 a3)
{
  int v27 = a3;
  uint64_t v6 = type metadata accessor for Data.Iterator();
  uint64_t v26 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = 0;
  unint64_t v34 = 0xE000000000000000;
  _StringGuts.grow(_:)(32);
  v9._countAndFlagsBits = 0x6946206D6F6F6C42;
  v9._object = (void *)0xEE00283C7265746CLL;
  String.append(_:)(v9);
  if ((a3 & 0x100) != 0) {
    uint64_t v10 = 2125385;
  }
  else {
    uint64_t v10 = 0x206E4920746F4ELL;
  }
  if ((a3 & 0x100) != 0) {
    unint64_t v11 = 0xE300000000000000;
  }
  else {
    unint64_t v11 = 0xE700000000000000;
  }
  unint64_t v12 = v11;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 8250;
  v13._object = (void *)0xE200000000000000;
  String.append(_:)(v13);
  switch(a2 >> 62)
  {
    case 1uLL:
    case 2uLL:
      sub_100013D44(a1, a2);
      sub_100013D44(a1, a2);
      break;
    default:
      break;
  }
  Data.Iterator.init(_:at:)();
  sub_10000C970(a1, a2);
  sub_100039280();
  dispatch thunk of IteratorProtocol.next()();
  if (v32)
  {
    uint64_t v14 = 0;
    uint64_t v15 = (void *)0xE000000000000000;
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v15 = (void *)0xE000000000000000;
    long long v28 = xmmword_1003B2450;
    do
    {
      char v16 = v31;
      sub_100010BCC((uint64_t *)&unk_10047CF90);
      uint64_t v17 = swift_allocObject();
      *(_OWORD *)(v17 + 16) = v28;
      *(void *)(v17 + 56) = &type metadata for UInt8;
      *(void *)(v17 + 64) = &protocol witness table for UInt8;
      *(unsigned char *)(v17 + 32) = v16;
      uint64_t v18 = String.init(format:_:)();
      uint64_t v20 = v19;
      uint64_t v29 = v14;
      char v30 = v15;
      swift_bridgeObjectRetain();
      v21._countAndFlagsBits = v18;
      v21._object = v20;
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = v29;
      uint64_t v15 = v30;
      dispatch thunk of IteratorProtocol.next()();
    }
    while (v32 != 1);
  }
  (*(void (**)(char *, uint64_t))(v26 + 8))(v8, v6);
  v22._countAndFlagsBits = v14;
  v22._object = v15;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 0x3A7865646E69202CLL;
  v23._object = (void *)0xE900000000000020;
  String.append(_:)(v23);
  LOBYTE(v29) = v27;
  _print_unlocked<A, B>(_:_:)();
  v24._countAndFlagsBits = 62;
  v24._object = (void *)0xE100000000000000;
  String.append(_:)(v24);
  return v33;
}

void NANBloomFilter.hash(into:)(uint64_t a1, uint64_t a2, unint64_t a3, __int16 a4)
{
}

uint64_t static NANBloomFilter.__derived_struct_equals(_:_:)(uint64_t a1, unint64_t a2, __int16 a3, uint64_t a4, unint64_t a5, __int16 a6)
{
  return _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a1, a2, a4, a5) & (a3 == a6) & (((a3 & 0x100) == 0) ^ ((unsigned __int16)(a6 & 0x100) >> 8));
}

Swift::Int NANBloomFilter.hashValue.getter(uint64_t a1, unint64_t a2, __int16 a3)
{
  return Hasher._finalize()();
}

Swift::Int sub_100255130()
{
  uint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 17);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 16);
  Hasher.init(_seed:)();
  sub_100013D44(v1, v2);
  Data.hash(into:)();
  sub_10000C970(v1, v2);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_1002551C4()
{
  uint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 17);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 16);
  sub_100013D44(v1, v2);
  Data.hash(into:)();
  sub_10000C970(v1, v2);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v3);
}

Swift::Int sub_10025523C()
{
  uint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 17);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 16);
  Hasher.init(_seed:)();
  sub_100013D44(v1, v2);
  Data.hash(into:)();
  sub_10000C970(v1, v2);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t sub_1002552CC()
{
  if (*(unsigned char *)(v0 + 17)) {
    __int16 v1 = 256;
  }
  else {
    __int16 v1 = 0;
  }
  return NANBloomFilter.description.getter(*(void *)v0, *(void *)(v0 + 8), v1 | *(unsigned __int8 *)(v0 + 16));
}

uint64_t sub_1002552EC(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  int v3 = *(unsigned __int8 *)(a1 + 17);
  int v4 = *(unsigned __int8 *)(a2 + 16);
  int v5 = *(unsigned __int8 *)(a2 + 17);
  return _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & (v2 == v4) & (v3 ^ v5 ^ 1);
}

unint64_t sub_100255350()
{
  unint64_t result = qword_100483BD8;
  if (!qword_100483BD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483BD8);
  }
  return result;
}

unint64_t sub_1002553A8()
{
  unint64_t result = qword_100483BE0;
  if (!qword_100483BE0)
  {
    sub_100014434(&qword_100483BE8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483BE0);
  }
  return result;
}

unint64_t sub_100255408()
{
  unint64_t result = qword_100483BF0;
  if (!qword_100483BF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483BF0);
  }
  return result;
}

uint64_t sub_100255460(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_100013D44(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithCopy for NANBloomFilter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_100013D44(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  sub_10000C970(v6, v7);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  return a1;
}

uint64_t assignWithTake for NANBloomFilter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10000C970(v4, v5);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANBloomFilter(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 18)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 17);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANBloomFilter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 18) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 18) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 17) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANBloomFilter()
{
  return &type metadata for NANBloomFilter;
}

unsigned char *storeEnumTagSinglePayload for NANBloomFilter.Index(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002556C8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANBloomFilter.Index()
{
  return &type metadata for NANBloomFilter.Index;
}

unint64_t sub_100255700()
{
  unint64_t result = qword_100483BF8;
  if (!qword_100483BF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483BF8);
  }
  return result;
}

uint64_t WiFiError.init(ioctlReturn:)(uint64_t result)
{
  if (result == -1) {
    LODWORD(result) = errno.getter();
  }
  return result;
}

uint64_t static WiFiError.securityErrorMessage(from:)(OSStatus a1)
{
  CFStringRef v1 = SecCopyErrorMessageString(a1, 0);
  if (!v1) {
    return 0x6E776F6E6B6E75;
  }
  int v2 = (__CFString *)v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

char *static WiFiError.systemErrorMessage.getter()
{
  int v0 = errno.getter();
  unint64_t result = strerror(v0);
  if (result)
  {
    return (char *)String.init(cString:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WiFiError.apiError.getter(uint64_t result, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 1:
      return result;
    case 2:
    case 3:
LABEL_2:
      unint64_t result = 7;
      break;
    default:
      switch(result)
      {
        case 0xFFFFF0AC:
        case 0xFFFFF0AD:
          unint64_t result = 6;
          break;
        case 0xFFFFF0AE:
        case 0xFFFFF0AF:
        case 0xFFFFF0B0:
        case 0xFFFFF0B1:
        case 0xFFFFF0B2:
        case 0xFFFFF0B3:
        case 0xFFFFF0B4:
        case 0xFFFFF0B5:
        case 0xFFFFF0B6:
        case 0xFFFFF0B7:
        case 0xFFFFF0B8:
        case 0xFFFFF0B9:
        case 0xFFFFF0BA:
        case 0xFFFFF0BB:
        case 0xFFFFF0BC:
        case 0xFFFFF0BD:
        case 0xFFFFF0BE:
        case 0xFFFFF0BF:
        case 0xFFFFF0C1:
        case 0xFFFFF0C2:
          goto LABEL_2;
        case 0xFFFFF0C0:
        case 0xFFFFF0C4:
          unint64_t result = 2;
          break;
        case 0xFFFFF0C3:
          unint64_t result = 5;
          break;
        default:
          if (result) {
            goto LABEL_2;
          }
          unint64_t result = 0;
          break;
      }
      break;
  }
  return result;
}

uint64_t WiFiError.description.getter(int __errnum, uint64_t a2, char a3)
{
  LODWORD(v3) = __errnum;
  switch(a3)
  {
    case 1:
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease();
      strcpy((char *)v16, "<WiFiP2PError ");
      HIBYTE(v16[1]) = -18;
      v8._countAndFlagsBits = WiFiP2PError.description.getter();
      String.append(_:)(v8);
      goto LABEL_54;
    case 2:
      v16[0] = 0;
      v16[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      v7._countAndFlagsBits = 0x676E69737261503CLL;
      v7._object = (void *)0xEE0020726F727245;
      String.append(_:)(v7);
      goto LABEL_10;
    case 3:
      v16[0] = 0;
      v16[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      v9._countAndFlagsBits = 0x676E69747365543CLL;
      v9._object = (void *)0xEE0020726F727245;
      String.append(_:)(v9);
LABEL_10:
      _print_unlocked<A, B>(_:_:)();
      goto LABEL_55;
    default:
      if (!__errnum)
      {
        unsigned int v6 = (void *)0xE700000000000000;
        unint64_t v3 = 0x73736563637553;
        goto LABEL_53;
      }
      if (__errnum >= 1)
      {
        if (!strerror(__errnum))
        {
          __break(1u);
          JUMPOUT(0x100255E6CLL);
        }
        goto LABEL_5;
      }
      if (__errnum > -103)
      {
        if (__errnum > -101)
        {
          if (__errnum == -100)
          {
            unint64_t v3 = 0xD000000000000021;
            unint64_t v12 = "Invalid Authentication Parameters";
          }
          else
          {
            if (__errnum != -1)
            {
LABEL_62:
              uint64_t v4 = (uint64_t)_s7CoreP2P9WiFiErrorO06kernelE7Message4fromSSs5Int32V_tFZ_0(v3);
              goto LABEL_6;
            }
            int v11 = errno.getter();
            if (strerror(v11))
            {
LABEL_5:
              uint64_t v4 = String.init(cString:)();
LABEL_6:
              unint64_t v3 = v4;
              unsigned int v6 = v5;
              goto LABEL_53;
            }
            __break(1u);
LABEL_22:
            unint64_t v3 = 0xD000000000000015;
            unint64_t v12 = "Cipher Suite Rejected";
          }
        }
        else
        {
          if (__errnum != -102)
          {
            uint64_t v10 = "Invalid Open Parameters";
LABEL_60:
            unsigned int v6 = (void *)((unint64_t)(v10 - 32) | 0x8000000000000000);
            unint64_t v3 = 0xD000000000000017;
            goto LABEL_53;
          }
          unint64_t v3 = 0xD00000000000001CLL;
          unint64_t v12 = "Fatal Authentication Failure";
        }
LABEL_52:
        unsigned int v6 = (void *)((unint64_t)(v12 - 32) | 0x8000000000000000);
        goto LABEL_53;
      }
      unint64_t v3 = 0xD000000000000012;
      unsigned int v6 = (void *)0x80000001003DEEF0;
      switch(__errnum)
      {
        case -3933:
          unsigned int v6 = (void *)0xEF64657472617453;
          unint64_t v3 = 0x20746F4E204D5446;
          break;
        case -3932:
          unint64_t v12 = "Peer Not Rangeable";
          goto LABEL_52;
        case -3931:
          unsigned int v6 = (void *)0xED0000726F727245;
          unint64_t v3 = 0x20636972656E6547;
          break;
        case -3930:
          uint64_t v10 = "Operation Not Permitted";
          goto LABEL_60;
        case -3929:
          unsigned int v6 = (void *)0xEB00000000657275;
          unint64_t v3 = 0x6C69614620435049;
          break;
        case -3928:
          unint64_t v3 = 0xD000000000000013;
          unint64_t v12 = "Reference Not Bound";
          goto LABEL_52;
        case -3927:
          unint64_t v3 = 0xD000000000000027;
          unint64_t v12 = "Station Unsupported PCO Transition Time";
          goto LABEL_52;
        case -3926:
          unint64_t v3 = 0xD000000000000024;
          unint64_t v12 = "Station Unsupported 802.11n Features";
          goto LABEL_52;
        case -3925:
          unint64_t v12 = "Supplicant Timeout";
          goto LABEL_52;
        case -3924:
          unsigned int v6 = (void *)0xEB000000004B4D50;
          goto LABEL_58;
        case -3923:
          goto LABEL_22;
        case -3922:
          unint64_t v3 = 0xD000000000000018;
          unint64_t v12 = "Invalid RSN Capabilities";
          goto LABEL_52;
        case -3921:
          uint64_t v10 = "Unsupported RSN Version";
          goto LABEL_60;
        case -3920:
          unsigned int v6 = (void *)0xEC000000504D4B41;
          goto LABEL_58;
        case -3919:
          uint64_t v10 = "Invalid Pairwise Cipher";
          goto LABEL_60;
        case -3918:
          unint64_t v3 = 0xD000000000000014;
          unint64_t v12 = "Invalid Group Cipher";
          goto LABEL_52;
        case -3917:
          unsigned int v6 = (void *)0xEA00000000004549;
          goto LABEL_58;
        case -3916:
          unint64_t v3 = 0xD000000000000015;
          unint64_t v12 = "DSSS/OFDM Unsupported";
          goto LABEL_52;
        case -3915:
          unint64_t v3 = 0xD000000000000016;
          unint64_t v12 = "Short Slot Unsupported";
          goto LABEL_52;
        case -3914:
          unint64_t v3 = 0xD000000000000014;
          unint64_t v12 = "Unsupported Rate Set";
          goto LABEL_52;
        case -3913:
          unsigned int v6 = (void *)0xE700000000000000;
          unint64_t v3 = 0x6C6C7546205041;
          break;
        case -3912:
          unint64_t v3 = 0xD000000000000011;
          unint64_t v12 = "Challenge Failure";
          goto LABEL_52;
        case -3911:
          unint64_t v3 = 0xD000000000000026;
          unint64_t v12 = "Invalid Authentication Sequence Number";
          goto LABEL_52;
        case -3910:
          unint64_t v3 = 0xD000000000000024;
          unint64_t v12 = "Authentication Algorithm Unsupported";
          goto LABEL_52;
        case -3909:
          unint64_t v12 = "Association Denied";
          goto LABEL_52;
        case -3908:
          unint64_t v3 = 0xD000000000000014;
          unint64_t v12 = "Reassociation Denied";
          goto LABEL_52;
        case -3907:
          unint64_t v3 = 0xD000000000000018;
          unint64_t v12 = "Unsupported Capabilities";
          goto LABEL_52;
        case -3906:
          unint64_t v3 = 0xD000000000000013;
          unint64_t v12 = "Unspecified failure";
          goto LABEL_52;
        case -3905:
          unsigned int v6 = (void *)0xE700000000000000;
          unint64_t v3 = 0x74756F656D6954;
          break;
        case -3904:
          unsigned int v6 = (void *)0xEE0074616D726F46;
LABEL_58:
          unint64_t v3 = 0x2064696C61766E49;
          break;
        case -3903:
          uint64_t v10 = "Operation Not Supported";
          goto LABEL_60;
        case -3902:
          unsigned int v6 = (void *)0xE700000000000000;
          unint64_t v3 = 0x6E776F6E6B6E55;
          break;
        case -3901:
          unint64_t v3 = 0xD000000000000013;
          unint64_t v12 = "Insufficient Memory";
          goto LABEL_52;
        case -3900:
          break;
        default:
          goto LABEL_62;
      }
LABEL_53:
      _StringGuts.grow(_:)(20);
      swift_bridgeObjectRelease();
      v16[0] = 0xD000000000000011;
      v16[1] = 0x80000001003DEB60;
      v13._countAndFlagsBits = v3;
      v13._object = v6;
      String.append(_:)(v13);
LABEL_54:
      swift_bridgeObjectRelease();
LABEL_55:
      v14._countAndFlagsBits = 62;
      v14._object = (void *)0xE100000000000000;
      String.append(_:)(v14);
      return v16[0];
  }
}

uint64_t sub_100255F08()
{
  return WiFiError.description.getter(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

uint64_t Error.apiError.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  __chkstk_darwin(a1);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  if (swift_dynamicCast())
  {
    uint64_t v5 = v8;
    switch(v10)
    {
      case 1:
        break;
      case 2:
        goto LABEL_6;
      case 3:
        sub_100012AA4(v8, v9, 3);
        goto LABEL_6;
      default:
        switch(v8)
        {
          case 0xFFFFF0AC:
          case 0xFFFFF0AD:
            uint64_t v5 = 6;
            break;
          case 0xFFFFF0AE:
          case 0xFFFFF0AF:
          case 0xFFFFF0B0:
          case 0xFFFFF0B1:
          case 0xFFFFF0B2:
          case 0xFFFFF0B3:
          case 0xFFFFF0B4:
          case 0xFFFFF0B5:
          case 0xFFFFF0B6:
          case 0xFFFFF0B7:
          case 0xFFFFF0B8:
          case 0xFFFFF0B9:
          case 0xFFFFF0BA:
          case 0xFFFFF0BB:
          case 0xFFFFF0BC:
          case 0xFFFFF0BD:
          case 0xFFFFF0BE:
          case 0xFFFFF0BF:
          case 0xFFFFF0C1:
          case 0xFFFFF0C2:
            goto LABEL_6;
          case 0xFFFFF0C0:
          case 0xFFFFF0C4:
            uint64_t v5 = 2;
            break;
          case 0xFFFFF0C3:
            uint64_t v5 = 5;
            break;
          default:
            if (v8) {
              goto LABEL_6;
            }
            uint64_t v5 = 0;
            break;
        }
        break;
    }
  }
  else
  {
LABEL_6:
    uint64_t v5 = 7;
  }
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return v5;
}

CoreP2P::ParsingError_optional __swiftcall ParsingError.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10044E4C8, v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.value = CoreP2P_ParsingError_incorrectType;
  }
  else {
    v4.value = CoreP2P_ParsingError_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t ParsingError.rawValue.getter(char a1)
{
  if (a1) {
    return 0x636572726F636E69;
  }
  else {
    return 0xD000000000000011;
  }
}

uint64_t sub_1002561A8(char *a1, char *a2)
{
  return sub_100042680(*a1, *a2);
}

Swift::Int sub_1002561B4()
{
  return Hasher._finalize()();
}

uint64_t sub_100256248()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1002562C8()
{
  return Hasher._finalize()();
}

uint64_t sub_100256358@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10044E4C8, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_1002563B8(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0xD000000000000011;
  if (*v1) {
    unint64_t v2 = 0x636572726F636E69;
  }
  unint64_t v3 = 0x80000001003D8070;
  if (*v1) {
    unint64_t v3 = 0xED00006570795474;
  }
  *a1 = v2;
  a1[1] = v3;
}

char *_s7CoreP2P9WiFiErrorO06kernelE7Message4fromSSs5Int32V_tFZ_0(mach_error_t a1)
{
  uint64_t result = mach_error_string(a1);
  if (result)
  {
    uint64_t v2 = String.init(cString:)();
    v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    v4._countAndFlagsBits = 93;
    v4._object = (void *)0xE100000000000000;
    String.append(_:)(v4);
    swift_bridgeObjectRetain();
    v5._countAndFlagsBits = 91;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (char *)v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_1002564D8(int a1)
{
  if (a1 < 0)
  {
    __break(1u);
    JUMPOUT(0x10025662CLL);
  }
  unint64_t result = 0x73736563637553;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      unint64_t result = 0x2064696C61766E49;
      break;
    case 7:
      unint64_t result = 0x6874754120746F4ELL;
      break;
    case 8:
      unint64_t result = 0x44206E6F6974704FLL;
      break;
    case 9:
      unint64_t result = 0xD000000000000010;
      break;
    case 10:
      unint64_t result = 0x706E49206C6C754ELL;
      break;
    default:
      unint64_t result = 0x6E776F6E6B6E55;
      break;
  }
  return result;
}

unint64_t sub_10025665C()
{
  unint64_t result = qword_100483C00;
  if (!qword_100483C00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483C00);
  }
  return result;
}

uint64_t sub_1002566B0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 4) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t assignWithCopy for WiFiError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_100012A90(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_100012AA4(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for WiFiError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_100012AA4(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for WiFiError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for WiFiError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1002567F0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1002567F8(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for WiFiError()
{
  return &type metadata for WiFiError;
}

unsigned char *storeEnumTagSinglePayload for ParsingError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002568DCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParsingError()
{
  return &type metadata for ParsingError;
}

unint64_t destroy for TestingError(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s7CoreP2P12TestingErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for TestingError(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TestingError(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TestingError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFC && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483644);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 3;
  if (v4 >= 5) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for TestingError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFC) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 3;
    }
  }
  return result;
}

uint64_t sub_100256B34(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_100256B4C(void *result, int a2)
{
  if (a2 < 0)
  {
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for TestingError()
{
  return &type metadata for TestingError;
}

uint64_t AWDLWiFiDriver.version.getter()
{
  return 658;
}

uint64_t AWDLWiFiDriver.peerPreferredChannels.getter()
{
  return 0x300000000;
}

uint64_t AWDLWiFiDriver.statistics.getter@<X0>(uint64_t a1@<X8>)
{
  sub_1000CA398(v3);
  return sub_10006EC68((uint64_t)v3, a1, &qword_10047E7A8);
}

uint64_t AWDLWiFiDriver.lowLatencyStatistics.getter@<X0>(uint64_t a1@<X8>)
{
  sub_1000CA3D0(v3);
  return sub_10006EC68((uint64_t)v3, a1, &qword_10047E7B0);
}

unint64_t WiFiMACAddress.wifiAddress.getter()
{
  id v1 = [v0 data];
  uint64_t v2 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v4 = v3;

  switch(v4 >> 62)
  {
    case 1uLL:
      sub_10000C970(v2, v4);
      LODWORD(v5) = HIDWORD(v2) - v2;
      if (__OFSUB__(HIDWORD(v2), v2))
      {
        __break(1u);
LABEL_12:
        __break(1u);
        JUMPOUT(0x100256F1CLL);
      }
      uint64_t v5 = (int)v5;
LABEL_6:
      if (v5 == 6)
      {
        id v8 = [v0 data];
        uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v11 = v10;

        LOBYTE(v8) = Data.subscript.getter();
        sub_10000C970(v9, v11);
        id v12 = [v0 data];
        uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v15 = v14;

        LOBYTE(v12) = Data.subscript.getter();
        sub_10000C970(v13, v15);
        id v16 = [v0 data];
        uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v19 = v18;

        LOBYTE(v16) = Data.subscript.getter();
        sub_10000C970(v17, v19);
        id v20 = [v0 data];
        uint64_t v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v23 = v22;

        LOBYTE(v20) = Data.subscript.getter();
        sub_10000C970(v21, v23);
        id v24 = [v0 data];
        uint64_t v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v27 = v26;

        LOBYTE(v24) = Data.subscript.getter();
        sub_10000C970(v25, v27);
        id v28 = [v0 data];
        uint64_t v29 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v31 = v30;

        LOBYTE(v28) = Data.subscript.getter();
        sub_10000C970(v29, v31);
        unint64_t v32 = (unint64_t)v28 << 40;
        unint64_t v33 = (unint64_t)v24 << 32;
        unint64_t v34 = (unint64_t)v20 << 24;
        unint64_t v35 = (unint64_t)v16 << 16;
        unint64_t v36 = (unint64_t)v12 << 8;
        uint64_t v37 = v8;
      }
      else
      {
LABEL_9:
        uint64_t v37 = 0;
        unint64_t v36 = 0;
        unint64_t v35 = 0;
        unint64_t v34 = 0;
        unint64_t v33 = 0;
        unint64_t v32 = 0;
      }
      return v36 | v37 | v35 | v34 | v33 | v32;
    case 2uLL:
      uint64_t v7 = *(void *)(v2 + 16);
      uint64_t v6 = *(void *)(v2 + 24);
      sub_10000C970(v2, v4);
      uint64_t v5 = v6 - v7;
      if (!__OFSUB__(v6, v7)) {
        goto LABEL_6;
      }
      goto LABEL_12;
    case 3uLL:
      sub_10000C970(v2, v4);
      goto LABEL_9;
    default:
      sub_10000C970(v2, v4);
      uint64_t v5 = BYTE6(v4);
      goto LABEL_6;
  }
}

unint64_t WiFiAddress.ipv6LinkLocalAddress.getter(unint64_t a1)
{
  unint64_t v1 = a1 >> 8;
  unint64_t v2 = a1 >> 16;
  unint64_t v3 = a1 >> 24;
  unint64_t v4 = HIDWORD(a1);
  unint64_t v5 = a1 >> 40;
  uint64_t v6 = a1;
  type metadata accessor for __DataStorage();
  swift_allocObject();
  unint64_t v73 = 0x1000000000;
  unint64_t v74 = __DataStorage.init(length:)() | 0x4000000000000000;
  Data._Representation.subscript.setter();
  Data._Representation.subscript.setter();
  char v70 = (uint64_t *)sub_100010BCC(&qword_10047BEF8);
  uint64_t v7 = swift_allocObject();
  long long v72 = xmmword_1003B2F40;
  *(_OWORD *)(v7 + 16) = xmmword_1003B2F40;
  *(unsigned char *)(v7 + 32) = v6;
  *(unsigned char *)(v7 + 33) = v1;
  *(unsigned char *)(v7 + 34) = v2;
  *(unsigned char *)(v7 + 35) = v3;
  *(unsigned char *)(v7 + 36) = v4;
  *(unsigned char *)(v7 + 37) = v5;
  uint64_t v8 = sub_1001265EC(v7);
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  Data.subscript.getter();
  sub_10000C970(v8, v10);
  Data._Representation.subscript.setter();
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = v72;
  *(unsigned char *)(v11 + 32) = v6;
  v71.i64[0] = v6;
  *(unsigned char *)(v11 + 33) = v1;
  unint64_t v68 = v2;
  unint64_t v69 = v1;
  *(unsigned char *)(v11 + 34) = v2;
  *(unsigned char *)(v11 + 35) = v3;
  *(unsigned char *)(v11 + 36) = v4;
  *(unsigned char *)(v11 + 37) = v5;
  uint64_t v12 = sub_1001265EC(v11);
  unint64_t v14 = v13;
  swift_bridgeObjectRelease();
  Data.subscript.getter();
  sub_10000C970(v12, v14);
  Data._Representation.subscript.setter();
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = v72;
  *(unsigned char *)(v15 + 32) = v6;
  *(unsigned char *)(v15 + 33) = v1;
  *(unsigned char *)(v15 + 34) = v2;
  *(unsigned char *)(v15 + 35) = v3;
  *(unsigned char *)(v15 + 36) = v4;
  *(unsigned char *)(v15 + 37) = v5;
  uint64_t v16 = sub_1001265EC(v15);
  unint64_t v18 = v17;
  swift_bridgeObjectRelease();
  Data.subscript.getter();
  sub_10000C970(v16, v18);
  Data._Representation.subscript.setter();
  Data._Representation.subscript.setter();
  Data._Representation.subscript.setter();
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = v72;
  *(unsigned char *)(v19 + 32) = v71.i8[0];
  char v20 = v68;
  LOBYTE(v2) = v69;
  *(unsigned char *)(v19 + 33) = v69;
  *(unsigned char *)(v19 + 34) = v20;
  *(unsigned char *)(v19 + 35) = v3;
  *(unsigned char *)(v19 + 36) = v4;
  *(unsigned char *)(v19 + 37) = v5;
  uint64_t v21 = sub_1001265EC(v19);
  unint64_t v23 = v22;
  swift_bridgeObjectRelease();
  Data.subscript.getter();
  sub_10000C970(v21, v23);
  Data._Representation.subscript.setter();
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = v72;
  LOBYTE(v6) = v71.i8[0];
  *(unsigned char *)(v24 + 32) = v71.i8[0];
  *(unsigned char *)(v24 + 33) = v2;
  *(unsigned char *)(v24 + 34) = v20;
  *(unsigned char *)(v24 + 35) = v3;
  *(unsigned char *)(v24 + 36) = v4;
  *(unsigned char *)(v24 + 37) = v5;
  uint64_t v25 = sub_1001265EC(v24);
  unint64_t v27 = v26;
  swift_bridgeObjectRelease();
  Data.subscript.getter();
  sub_10000C970(v25, v27);
  Data._Representation.subscript.setter();
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = v72;
  *(unsigned char *)(v28 + 32) = v6;
  *(unsigned char *)(v28 + 33) = v2;
  *(unsigned char *)(v28 + 34) = v20;
  *(unsigned char *)(v28 + 35) = v3;
  *(unsigned char *)(v28 + 36) = v4;
  *(unsigned char *)(v28 + 37) = v5;
  uint64_t v29 = sub_1001265EC(v28);
  unint64_t v31 = v30;
  swift_bridgeObjectRelease();
  Data.subscript.getter();
  sub_10000C970(v29, v31);
  Data._Representation.subscript.setter();
  uint64_t v32 = v73;
  unint64_t v33 = v74;
  unint64_t v34 = v74 >> 62;
  switch(v74 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v73), v73))
      {
        __break(1u);
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
      uint64_t v35 = HIDWORD(v73) - (int)v73;
LABEL_6:
      sub_100013D44(v73, v74);
LABEL_7:
      if (v35 < 16)
      {
LABEL_24:
        sub_10000C970(v32, v33);
        __break(1u);
      }
      if (!v34)
      {
        uint64x2_t v49 = (uint64x2_t)vdupq_n_s64(v73);
        int32x4_t v50 = vuzp1q_s32((int32x4_t)vshlq_u64(v49, (uint64x2_t)xmmword_1003B2EB0), (int32x4_t)vshlq_u64(v49, (uint64x2_t)xmmword_1003B2EA0));
        *(int16x4_t *)v50.i8 = vmovn_s32(v50);
        long long v72 = (__int128)v50;
        unint64_t v46 = v73 >> 40;
        unint64_t v47 = HIWORD(v73);
        unint64_t v48 = HIBYTE(v73);
        uint64x2_t v51 = (uint64x2_t)vdupq_n_s64(v74);
        int32x4_t v52 = vuzp1q_s32((int32x4_t)vshlq_u64(v51, (uint64x2_t)xmmword_1003B2EB0), (int32x4_t)vshlq_u64(v51, (uint64x2_t)xmmword_1003B2EA0));
        *(int16x4_t *)v52.i8 = vmovn_s32(v52);
        uint16x8_t v71 = (uint16x8_t)v52;
        unsigned __int8 v43 = v73;
        goto LABEL_18;
      }
      char v70 = &v67;
      if (v34 != 1)
      {
        uint64_t v53 = *(void *)(v73 + 16);
        swift_retain();
        swift_retain();
        uint64_t v54 = __DataStorage._bytes.getter();
        if (!v54)
        {
LABEL_26:
          __DataStorage._length.getter();
          __break(1u);
          JUMPOUT(0x1002575F4);
        }
        uint64_t v55 = v54;
        uint64_t v56 = __DataStorage._offset.getter();
        BOOL v57 = __OFSUB__(v53, v56);
        uint64_t v58 = v53 - v56;
        if (!v57)
        {
          __DataStorage._length.getter();
          uint64_t v59 = v55 + v58;
          unsigned __int8 v43 = *(unsigned char *)(v55 + v58);
          v60.i32[0] = *(_DWORD *)(v59 + 1);
          uint16x8_t v61 = vmovl_u8(v60);
          long long v72 = (__int128)v61;
          LOBYTE(v46) = *(unsigned char *)(v59 + 5);
          LOBYTE(v47) = *(unsigned char *)(v59 + 6);
          unint64_t v48 = *(unsigned __int8 *)(v59 + 7);
          v61.i32[0] = *(_DWORD *)(v59 + 9);
          uint16x8_t v71 = vmovl_u8(*(uint8x8_t *)v61.i8);
          swift_release();
          swift_release();
          goto LABEL_18;
        }
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
      if ((int)v73 > (uint64_t)v73 >> 32)
      {
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
      sub_100013D44(v73, v74);
      uint64_t v38 = __DataStorage._bytes.getter();
      if (!v38)
      {
        __DataStorage._length.getter();
        __break(1u);
        goto LABEL_26;
      }
      uint64_t v39 = v38;
      uint64_t v40 = __DataStorage._offset.getter();
      uint64_t v41 = (int)v32 - v40;
      if (__OFSUB__((int)v32, v40))
      {
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
      __DataStorage._length.getter();
      uint64_t v42 = v39 + v41;
      unsigned __int8 v43 = *(unsigned char *)(v39 + v41);
      v44.i32[0] = *(_DWORD *)(v42 + 1);
      uint16x8_t v45 = vmovl_u8(v44);
      long long v72 = (__int128)v45;
      LOBYTE(v46) = *(unsigned char *)(v42 + 5);
      LOBYTE(v47) = *(unsigned char *)(v42 + 6);
      unint64_t v48 = *(unsigned __int8 *)(v42 + 7);
      v45.i32[0] = *(_DWORD *)(v42 + 9);
      uint16x8_t v71 = vmovl_u8(*(uint8x8_t *)v45.i8);
      sub_10000C970(v32, v33);
LABEL_18:
      sub_10000C970(v32, v33);
      sub_10000C970(v32, v33);
      uint32x4_t v62 = vmovl_u16((uint16x4_t)(v72 & 0xFF00FF00FF00FFLL));
      v63.i64[0] = v62.u32[0];
      v63.i64[1] = v62.u32[1];
      uint64x2_t v64 = v63;
      v63.i64[0] = v62.u32[2];
      v63.i64[1] = v62.u32[3];
      int8x16_t v65 = vorrq_s8((int8x16_t)vshlq_u64(v64, (uint64x2_t)xmmword_1003B2F80), (int8x16_t)vshlq_u64(v63, (uint64x2_t)xmmword_1003D3F00));
      return (*(void *)&vorr_s8(*(int8x8_t *)v65.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v65, v65, 8uLL)) | ((unint64_t)v46 << 40) | v43)
           + ((unint64_t)v47 << 48)
           + (v48 << 56);
    case 2uLL:
      uint64_t v37 = *(void *)(v73 + 16);
      uint64_t v36 = *(void *)(v73 + 24);
      uint64_t v35 = v36 - v37;
      if (!__OFSUB__(v36, v37)) {
        goto LABEL_6;
      }
      goto LABEL_20;
    case 3uLL:
      goto LABEL_24;
    default:
      uint64_t v35 = BYTE6(v74);
      goto LABEL_7;
  }
}

uint64_t static WiFiAddress.randomLinkLocalAddress()()
{
  return sub_1002623B8() & 0xFFFFFFFFFFFCLL | 2;
}

uint64_t WiFiAddress.init(_:)(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = sub_10000C6C4(a1, a2);
  return v2 & 0xFFFFFFFFFFFFLL | ((HIWORD(v2) & 1) << 48);
}

void __swiftcall WiFiAddress.init(_:)(CoreP2P::WiFiAddress_optional *__return_ptr retstr, sockaddr_dl *a2)
{
  uint64_t v6 = v2;
  int v7 = v3;
  uint64_t v4 = sub_100260F60((unsigned char *)&v6 + BYTE5(a2), BYTE6(a2));
  sub_10000C6C4(v4, v5);
}

uint64_t WiFiAddress.data.getter(unint64_t a1)
{
  char v1 = a1;
  unint64_t v2 = a1 >> 8;
  unint64_t v3 = a1 >> 16;
  unint64_t v4 = a1 >> 24;
  unint64_t v5 = HIDWORD(a1);
  unint64_t v6 = a1 >> 40;
  sub_100010BCC(&qword_10047BEF8);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1003B2F40;
  *(unsigned char *)(v7 + 32) = v1;
  *(unsigned char *)(v7 + 33) = v2;
  *(unsigned char *)(v7 + 34) = v3;
  *(unsigned char *)(v7 + 35) = v4;
  *(unsigned char *)(v7 + 36) = v5;
  *(unsigned char *)(v7 + 37) = v6;
  uint64_t v8 = sub_1001265EC(v7);
  swift_bridgeObjectRelease();
  return v8;
}

void *WiFiAddress.size.unsafeMutableAddressor()
{
  return &static WiFiAddress.size;
}

uint64_t sub_1002577C8(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v3) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
      }
      uint64_t v3 = (int)v3;
LABEL_6:
      if (v3 >= 16)
      {
        __chkstk_darwin();
        uint64_t result = sub_100261014(&v11, v9, v10, 0x10uLL);
        if (v2)
        {
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x1002578F8);
        }
      }
      else
      {
LABEL_7:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        *(unsigned char *)(v7 + 16) = 2;
        return swift_willThrow();
      }
      return result;
    case 2uLL:
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v4 = *(void *)(a1 + 24);
      BOOL v6 = __OFSUB__(v4, v5);
      uint64_t v3 = v4 - v5;
      if (!v6) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v3 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_100257908(uint64_t a1, unint64_t a2)
{
  return sub_10025B210(a1, a2);
}

uint64_t sub_100257954(uint64_t a1, unint64_t a2)
{
  return sub_100257A38(a1, a2);
}

uint64_t sub_1002579A0(uint64_t a1, unint64_t a2)
{
  return sub_10025B0D0(a1, a2);
}

uint64_t sub_1002579EC(uint64_t a1, unint64_t a2)
{
  return sub_100257B74(a1, a2);
}

uint64_t sub_100257A38(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v3) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_12:
        __break(1u);
      }
      uint64_t v3 = (int)v3;
LABEL_6:
      if (v3 < 1) {
        goto LABEL_9;
      }
      __chkstk_darwin();
      uint64_t result = sub_100261484(&v11, v7, v8, 1uLL);
      if (v2)
      {
        swift_willThrow();
        __break(1u);
LABEL_9:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v10 = 0;
        *(void *)(v10 + 8) = 0;
        *(unsigned char *)(v10 + 16) = 2;
        return swift_willThrow();
      }
      return result;
    case 2uLL:
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v4 = *(void *)(a1 + 24);
      BOOL v6 = __OFSUB__(v4, v5);
      uint64_t v3 = v4 - v5;
      if (!v6) {
        goto LABEL_6;
      }
      goto LABEL_12;
    case 3uLL:
      goto LABEL_9;
    default:
      uint64_t v3 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_100257B74(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v3) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
      }
      uint64_t v3 = (int)v3;
LABEL_6:
      if (v3 >= 4)
      {
        __chkstk_darwin();
        uint64_t result = sub_100261F4C(&v11, v9, v10, 4uLL);
        if (v2)
        {
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x100257CA4);
        }
      }
      else
      {
LABEL_7:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        *(unsigned char *)(v7 + 16) = 2;
        return swift_willThrow();
      }
      return result;
    case 2uLL:
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v4 = *(void *)(a1 + 24);
      BOOL v6 = __OFSUB__(v4, v5);
      uint64_t v3 = v4 - v5;
      if (!v6) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v3 = BYTE6(a2);
      goto LABEL_6;
  }
}

void sub_100257CB4(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
      }
      uint64_t v5 = (int)v5;
LABEL_6:
      if (v5 >= 48)
      {
        __chkstk_darwin();
        sub_10025BB1C(&v16, 0x30uLL, v10, v11, (uint64_t)&v17);
        if (v3)
        {
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x100257E24);
        }
        int v12 = v19;
        long long v13 = v20;
        uint64_t v14 = v21;
        long long v15 = v18;
        *(_DWORD *)a3 = v17;
        *(_OWORD *)(a3 + 4) = v15;
        *(_DWORD *)(a3 + 20) = v12;
        *(_OWORD *)(a3 + 24) = v13;
        *(void *)(a3 + 40) = v14;
      }
      else
      {
LABEL_7:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        *(unsigned char *)(v9 + 16) = 2;
        swift_willThrow();
      }
      return;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v5 = BYTE6(a2);
      goto LABEL_6;
  }
}

void sub_100257E34(uint64_t a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
      }
      uint64_t v5 = (int)v5;
LABEL_6:
      if (v5 >= 16)
      {
        __chkstk_darwin();
        sub_10025BD78(&v12, 0x10uLL, v10, v11, &v13);
        if (v3)
        {
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x100257F84);
        }
        *a3 = v13;
      }
      else
      {
LABEL_7:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        *(unsigned char *)(v9 + 16) = 2;
        swift_willThrow();
      }
      return;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v5 = BYTE6(a2);
      goto LABEL_6;
  }
}

void sub_100257F94(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
      }
      uint64_t v5 = (int)v5;
LABEL_6:
      if (v5 >= 72)
      {
        __chkstk_darwin();
        sub_10025BFB4(&v19, 0x48uLL, v10, v11, (uint64_t)&v20);
        if (v3)
        {
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x100258114);
        }
        uint64_t v12 = v25;
        long long v13 = v22;
        long long v14 = v23;
        uint64_t v15 = v24;
        int v16 = v21;
        int v17 = v26;
        int v18 = v27;
        *(void *)a3 = v20;
        *(_DWORD *)(a3 + 8) = v16;
        *(_OWORD *)(a3 + 12) = v13;
        *(_OWORD *)(a3 + 28) = v14;
        *(void *)(a3 + 44) = v15;
        *(void *)(a3 + 56) = v12;
        *(_DWORD *)(a3 + 64) = v17;
        *(_DWORD *)(a3 + 68) = v18;
      }
      else
      {
LABEL_7:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        *(unsigned char *)(v9 + 16) = 2;
        swift_willThrow();
      }
      return;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v5 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_100258124(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v3) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
      }
      uint64_t v3 = (int)v3;
LABEL_6:
      if (v3 >= 3)
      {
        __chkstk_darwin();
        uint64_t v11 = sub_100261250(&v12, v9, v10, 3uLL);
        if (v2)
        {
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x100258258);
        }
        return v11 & 0xFFFFFF;
      }
      else
      {
LABEL_7:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        *(unsigned char *)(v7 + 16) = 2;
        return swift_willThrow();
      }
    case 2uLL:
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v4 = *(void *)(a1 + 24);
      BOOL v6 = __OFSUB__(v4, v5);
      uint64_t v3 = v4 - v5;
      if (!v6) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v3 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_100258268(uint64_t a1, unint64_t a2)
{
  return sub_10025893C(a1, a2);
}

uint64_t sub_1002582B4(uint64_t a1, unint64_t a2)
{
  return sub_1002592FC(a1, a2);
}

void *sub_100258300@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_10:
        __break(1u);
      }
      uint64_t v5 = (int)v5;
LABEL_5:
      if (v5 >= 403)
      {
        __chkstk_darwin();
        sub_10025C228(&v13, 0x193uLL, v11, v12, v14);
        if (v3)
        {
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x10025845CLL);
        }
        return memcpy(a3, v14, 0x193uLL);
      }
      else
      {
LABEL_6:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        *(unsigned char *)(v9 + 16) = 2;
        return (void *)swift_willThrow();
      }
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_5;
      }
      goto LABEL_10;
    default:
      goto LABEL_6;
  }
}

uint64_t sub_10025846C(uint64_t a1, unint64_t a2)
{
  return sub_100258D84(a1, a2);
}

void sub_1002584B8(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
      }
      uint64_t v5 = (int)v5;
LABEL_6:
      if (v5 >= 104)
      {
        __chkstk_darwin();
        sub_10025C468(&v21, 0x68uLL, v10, v11, (uint64_t)&v22);
        if (v3)
        {
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x100258650);
        }
        __int16 v12 = v24;
        int v13 = v25;
        int v14 = v30;
        long long v15 = v26;
        long long v16 = v27;
        long long v17 = v28;
        long long v18 = v29;
        long long v19 = v31;
        int v20 = v23;
        *(void *)a3 = v22;
        *(_DWORD *)(a3 + 8) = v20;
        *(_WORD *)(a3 + 12) = v12;
        *(_DWORD *)(a3 + 16) = v13;
        *(_OWORD *)(a3 + 20) = v15;
        *(_OWORD *)(a3 + 36) = v16;
        *(_OWORD *)(a3 + 52) = v17;
        *(_OWORD *)(a3 + 68) = v18;
        *(_DWORD *)(a3 + 84) = v14;
        *(_OWORD *)(a3 + 88) = v19;
      }
      else
      {
LABEL_7:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        *(unsigned char *)(v9 + 16) = 2;
        swift_willThrow();
      }
      return;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v5 = BYTE6(a2);
      goto LABEL_6;
  }
}

void sub_100258660(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
      }
      uint64_t v5 = (int)v5;
LABEL_6:
      if (v5 >= 24)
      {
        __chkstk_darwin();
        sub_10025C6EC(&v14, 0x18uLL, v10, v11, (uint64_t)&v15);
        if (v3)
        {
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x1002587C0);
        }
        long long v12 = v16;
        int v13 = v17;
        *(_DWORD *)a3 = v15;
        *(_OWORD *)(a3 + 4) = v12;
        *(_DWORD *)(a3 + 20) = v13;
      }
      else
      {
LABEL_7:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        *(unsigned char *)(v9 + 16) = 2;
        swift_willThrow();
      }
      return;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v5 = BYTE6(a2);
      goto LABEL_6;
  }
}

void *sub_1002587D0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_10:
        __break(1u);
      }
      uint64_t v5 = (int)v5;
LABEL_5:
      if (v5 >= 460)
      {
        __chkstk_darwin();
        sub_10025C938(&v13, 0x1CCuLL, v11, v12, v14);
        if (v3)
        {
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x10025892CLL);
        }
        return memcpy(a3, v14, 0x1CCuLL);
      }
      else
      {
LABEL_6:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        *(unsigned char *)(v9 + 16) = 2;
        return (void *)swift_willThrow();
      }
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_5;
      }
      goto LABEL_10;
    default:
      goto LABEL_6;
  }
}

uint64_t sub_10025893C(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v3) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
      }
      uint64_t v3 = (int)v3;
LABEL_6:
      if (v3 >= 12)
      {
        __chkstk_darwin();
        uint64_t result = sub_100262178(&v11, v9, v10, 0xCuLL);
        if (v2)
        {
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x100258A6CLL);
        }
      }
      else
      {
LABEL_7:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        *(unsigned char *)(v7 + 16) = 2;
        return swift_willThrow();
      }
      return result;
    case 2uLL:
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v4 = *(void *)(a1 + 24);
      BOOL v6 = __OFSUB__(v4, v5);
      uint64_t v3 = v4 - v5;
      if (!v6) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v3 = BYTE6(a2);
      goto LABEL_6;
  }
}

void sub_100258A7C(uint64_t a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
      }
      uint64_t v5 = (int)v5;
LABEL_6:
      if (v5 >= 184)
      {
        __chkstk_darwin();
        sub_10025CB78(&v17, 0xB8uLL, v10, v11, v18);
        if (v3)
        {
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x100258BFCLL);
        }
        __n128 v12 = v18[9];
        a3[8] = v18[8];
        a3[9] = v12;
        a3[10] = v18[10];
        a3[11].n128_u64[0] = v19;
        __n128 v13 = v18[5];
        a3[4] = v18[4];
        a3[5] = v13;
        __n128 v14 = v18[7];
        a3[6] = v18[6];
        a3[7] = v14;
        __n128 v15 = v18[1];
        *a3 = v18[0];
        a3[1] = v15;
        __n128 v16 = v18[3];
        a3[2] = v18[2];
        a3[3] = v16;
      }
      else
      {
LABEL_7:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        *(unsigned char *)(v9 + 16) = 2;
        swift_willThrow();
      }
      return;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v5 = BYTE6(a2);
      goto LABEL_6;
  }
}

void sub_100258C0C(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
      }
      uint64_t v5 = (int)v5;
LABEL_6:
      if (v5 >= 40)
      {
        __chkstk_darwin();
        sub_10025CDE4(&v15, 0x28uLL, v10, v11, (uint64_t)&v16);
        if (v3)
        {
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x100258D74);
        }
        int v12 = v19;
        long long v13 = v17;
        long long v14 = v18;
        *(_DWORD *)a3 = v16;
        *(_OWORD *)(a3 + 4) = v13;
        *(_OWORD *)(a3 + 20) = v14;
        *(_DWORD *)(a3 + 36) = v12;
      }
      else
      {
LABEL_7:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        *(unsigned char *)(v9 + 16) = 2;
        swift_willThrow();
      }
      return;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v5 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_100258D84(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v3) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
      }
      uint64_t v3 = (int)v3;
LABEL_6:
      if (v3 >= 8)
      {
        __chkstk_darwin();
        uint64_t result = sub_100262D94(&v11, v9, v10, 8uLL);
        if (v2)
        {
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x100258EB4);
        }
      }
      else
      {
LABEL_7:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        *(unsigned char *)(v7 + 16) = 2;
        return swift_willThrow();
      }
      return result;
    case 2uLL:
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v4 = *(void *)(a1 + 24);
      BOOL v6 = __OFSUB__(v4, v5);
      uint64_t v3 = v4 - v5;
      if (!v6) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v3 = BYTE6(a2);
      goto LABEL_6;
  }
}

void *sub_100258EC4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_10:
        __break(1u);
      }
      uint64_t v5 = (int)v5;
LABEL_5:
      if (v5 >= 264)
      {
        __chkstk_darwin();
        sub_10025D038(&v13, 0x108uLL, v11, v12, v14);
        if (v3)
        {
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x100259020);
        }
        return memcpy(a3, v14, 0x108uLL);
      }
      else
      {
LABEL_6:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        *(unsigned char *)(v9 + 16) = 2;
        return (void *)swift_willThrow();
      }
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_5;
      }
      goto LABEL_10;
    default:
      goto LABEL_6;
  }
}

void sub_100259030(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
      }
      uint64_t v5 = (int)v5;
LABEL_6:
      if (v5 >= 68)
      {
        __chkstk_darwin();
        sub_10025D278(&v18, 0x44uLL, v10, v11, (uint64_t)v19);
        if (v3)
        {
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x1002591A8);
        }
        int v12 = v21;
        uint64_t v13 = v20;
        long long v14 = v22;
        long long v15 = v23;
        long long v16 = v24;
        int v17 = v19[1];
        *(_DWORD *)a3 = v19[0];
        *(_DWORD *)(a3 + 4) = v17;
        *(void *)(a3 + 8) = v13;
        *(_DWORD *)(a3 + 16) = v12;
        *(_OWORD *)(a3 + 20) = v14;
        *(_OWORD *)(a3 + 36) = v15;
        *(_OWORD *)(a3 + 52) = v16;
      }
      else
      {
LABEL_7:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        *(unsigned char *)(v9 + 16) = 2;
        swift_willThrow();
      }
      return;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v5 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_1002591B8(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v3) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
      }
      uint64_t v3 = (int)v3;
LABEL_6:
      if (v3 >= 16)
      {
        __chkstk_darwin();
        uint64_t result = sub_100261D0C(&v11, v9, v10, 0x10uLL);
        if (v2)
        {
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x1002592ECLL);
        }
      }
      else
      {
LABEL_7:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        *(unsigned char *)(v7 + 16) = 2;
        return swift_willThrow();
      }
      return result;
    case 2uLL:
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v4 = *(void *)(a1 + 24);
      BOOL v6 = __OFSUB__(v4, v5);
      uint64_t v3 = v4 - v5;
      if (!v6) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v3 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_1002592FC(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v3) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
      }
      uint64_t v3 = (int)v3;
LABEL_6:
      if (v3 >= 2)
      {
        __chkstk_darwin();
        uint64_t result = sub_100262B68(&v11, v9, v10, 2uLL);
        if (v2)
        {
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x10025942CLL);
        }
      }
      else
      {
LABEL_7:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        *(unsigned char *)(v7 + 16) = 2;
        return swift_willThrow();
      }
      return result;
    case 2uLL:
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v4 = *(void *)(a1 + 24);
      BOOL v6 = __OFSUB__(v4, v5);
      uint64_t v3 = v4 - v5;
      if (!v6) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v3 = BYTE6(a2);
      goto LABEL_6;
  }
}

void sub_10025943C(uint64_t a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
      }
      uint64_t v5 = (int)v5;
LABEL_6:
      if (v5 >= 208)
      {
        __chkstk_darwin();
        sub_10025D4DC(&v18, 0xD0uLL, v10, v11, v19);
        if (v3)
        {
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x1002595D4);
        }
        __n128 v12 = v19[11];
        a3[10] = v19[10];
        a3[11] = v12;
        a3[12] = v19[12];
        __n128 v13 = v19[7];
        a3[6] = v19[6];
        a3[7] = v13;
        __n128 v14 = v19[9];
        a3[8] = v19[8];
        a3[9] = v14;
        __n128 v15 = v19[3];
        a3[2] = v19[2];
        a3[3] = v15;
        __n128 v16 = v19[5];
        a3[4] = v19[4];
        a3[5] = v16;
        __n128 v17 = v19[1];
        *a3 = v19[0];
        a3[1] = v17;
      }
      else
      {
LABEL_7:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        *(unsigned char *)(v9 + 16) = 2;
        swift_willThrow();
      }
      return;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v5 = BYTE6(a2);
      goto LABEL_6;
  }
}

void *sub_1002595E4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v7) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_13:
        __break(1u);
      }
      uint64_t v7 = (int)v7;
LABEL_5:
      if (v7 < 1616)
      {
LABEL_6:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v11 = 0;
        *(void *)(v11 + 8) = 0;
        *(unsigned char *)(v11 + 16) = 2;
        return (void *)swift_willThrow();
      }
      if (swift_stdlib_isStackAllocationSafe())
      {
        __chkstk_darwin();
        sub_10025D748(&v14, 0x650uLL, a1, a2, v15);
        if (!v3) {
          return memcpy(a3, v15, 0x650uLL);
        }
        swift_willThrow();
        swift_errorRelease();
        __break(1u);
LABEL_15:
        swift_errorRelease();
        swift_slowDealloc();
        __break(1u);
        JUMPOUT(0x1002597F0);
      }
      __n128 v13 = (void *)swift_slowAlloc();
      sub_10025D748(v13, 0x650uLL, a1, a2, a3);
      if (v3) {
        goto LABEL_15;
      }
      return (void *)swift_slowDealloc();
    case 2uLL:
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t v8 = *(void *)(a1 + 24);
      BOOL v10 = __OFSUB__(v8, v9);
      uint64_t v7 = v8 - v9;
      if (!v10) {
        goto LABEL_5;
      }
      goto LABEL_13;
    default:
      goto LABEL_6;
  }
}

void *sub_100259800@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v7) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_13:
        __break(1u);
      }
      uint64_t v7 = (int)v7;
LABEL_5:
      if (v7 < 3872)
      {
LABEL_6:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v11 = 0;
        *(void *)(v11 + 8) = 0;
        *(unsigned char *)(v11 + 16) = 2;
        return (void *)swift_willThrow();
      }
      if (swift_stdlib_isStackAllocationSafe())
      {
        __chkstk_darwin();
        sub_10025D988(&v14, 0xF20uLL, a1, a2, v15);
        if (!v3) {
          return memcpy(a3, v15, 0xF20uLL);
        }
        swift_willThrow();
        swift_errorRelease();
        __break(1u);
LABEL_15:
        swift_errorRelease();
        swift_slowDealloc();
        __break(1u);
        JUMPOUT(0x100259A0CLL);
      }
      __n128 v13 = (void *)swift_slowAlloc();
      sub_10025D988(v13, 0xF20uLL, a1, a2, a3);
      if (v3) {
        goto LABEL_15;
      }
      return (void *)swift_slowDealloc();
    case 2uLL:
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t v8 = *(void *)(a1 + 24);
      BOOL v10 = __OFSUB__(v8, v9);
      uint64_t v7 = v8 - v9;
      if (!v10) {
        goto LABEL_5;
      }
      goto LABEL_13;
    default:
      goto LABEL_6;
  }
}

void sub_100259A1C(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
      }
      uint64_t v5 = (int)v5;
LABEL_6:
      if (v5 >= 28)
      {
        __chkstk_darwin();
        sub_10025DBC8(&v14, 0x1CuLL, v10, v11, (uint64_t)&v15);
        if (v3)
        {
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x100259B7CLL);
        }
        long long v12 = v16;
        uint64_t v13 = v17;
        *(_DWORD *)a3 = v15;
        *(_OWORD *)(a3 + 4) = v12;
        *(void *)(a3 + 20) = v13;
      }
      else
      {
LABEL_7:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        *(unsigned char *)(v9 + 16) = 2;
        swift_willThrow();
      }
      return;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v5 = BYTE6(a2);
      goto LABEL_6;
  }
}

void sub_100259B8C(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
      }
      uint64_t v5 = (int)v5;
LABEL_6:
      if (v5 >= 72)
      {
        __chkstk_darwin();
        sub_10025DE14(&v20, 0x48uLL, v10, v11, (uint64_t)v21);
        if (v3)
        {
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x100259D0CLL);
        }
        __int16 v12 = v22;
        char v13 = v23;
        int v14 = v26;
        int v15 = v27;
        __int16 v16 = v28;
        long long v17 = v24;
        uint64_t v18 = v25;
        long long v19 = v21[1];
        *(_OWORD *)a3 = v21[0];
        *(_OWORD *)(a3 + 16) = v19;
        *(_WORD *)(a3 + 32) = v12;
        *(unsigned char *)(a3 + 34) = v13;
        *(_OWORD *)(a3 + 36) = v17;
        *(void *)(a3 + 52) = v18;
        *(_DWORD *)(a3 + 60) = v14;
        *(_DWORD *)(a3 + 64) = v15;
        *(_WORD *)(a3 + 68) = v16;
      }
      else
      {
LABEL_7:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        *(unsigned char *)(v9 + 16) = 2;
        swift_willThrow();
      }
      return;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v5 = BYTE6(a2);
      goto LABEL_6;
  }
}

void *sub_100259D1C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_10:
        __break(1u);
      }
      uint64_t v5 = (int)v5;
LABEL_5:
      if (v5 >= 993)
      {
        __chkstk_darwin();
        sub_10025E080(&v13, 0x3E1uLL, v11, v12, v14);
        if (v3)
        {
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x100259E78);
        }
        return memcpy(a3, v14, 0x3E1uLL);
      }
      else
      {
LABEL_6:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        *(unsigned char *)(v9 + 16) = 2;
        return (void *)swift_willThrow();
      }
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_5;
      }
      goto LABEL_10;
    default:
      goto LABEL_6;
  }
}

uint64_t sub_100259E88(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v3) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
      }
      uint64_t v3 = (int)v3;
LABEL_6:
      if (v3 >= 10)
      {
        __chkstk_darwin();
        unint64_t v11 = sub_100261AC4(&v13, v9, v10, 0xAuLL);
        unint64_t v14 = v11;
        __int16 v15 = v12;
        if (v2)
        {
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x100259FE0);
        }
        LOWORD(v14) = v11;
        *(_DWORD *)((char *)&v14 + 2) = v11 >> 16;
        return v14;
      }
      else
      {
LABEL_7:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        *(unsigned char *)(v7 + 16) = 2;
        return swift_willThrow();
      }
    case 2uLL:
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v4 = *(void *)(a1 + 24);
      BOOL v6 = __OFSUB__(v4, v5);
      uint64_t v3 = v4 - v5;
      if (!v6) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v3 = BYTE6(a2);
      goto LABEL_6;
  }
}

void sub_100259FF0(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
      }
      uint64_t v5 = (int)v5;
LABEL_6:
      if (v5 >= 32)
      {
        __chkstk_darwin();
        sub_10025E2C0(&v15, 0x20uLL, v10, v11, (uint64_t)&v16);
        if (v3)
        {
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x10025A158);
        }
        char v12 = v17;
        __int16 v13 = v19;
        uint64_t v14 = v18;
        *(_OWORD *)a3 = v16;
        *(unsigned char *)(a3 + 16) = v12;
        *(void *)(a3 + 20) = v14;
        *(_WORD *)(a3 + 28) = v13;
      }
      else
      {
LABEL_7:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        *(unsigned char *)(v9 + 16) = 2;
        swift_willThrow();
      }
      return;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v5 = BYTE6(a2);
      goto LABEL_6;
  }
}

void sub_10025A168(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
      }
      uint64_t v5 = (int)v5;
LABEL_6:
      if (v5 >= 20)
      {
        __chkstk_darwin();
        sub_10025E514(&v15, 0x14uLL, v10, v11, (uint64_t)&v16);
        if (v3)
        {
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x10025A2D0);
        }
        __int16 v12 = v19;
        uint64_t v13 = v17;
        int v14 = v18;
        *(_WORD *)a3 = v16;
        *(void *)(a3 + 4) = v13;
        *(_DWORD *)(a3 + 12) = v14;
        *(_WORD *)(a3 + 16) = v12;
      }
      else
      {
LABEL_7:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        *(unsigned char *)(v9 + 16) = 2;
        swift_willThrow();
      }
      return;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v5 = BYTE6(a2);
      goto LABEL_6;
  }
}

void sub_10025A2E0(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

void sub_10025A32C(uint64_t a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
      }
      uint64_t v5 = (int)v5;
LABEL_6:
      if (v5 >= 20)
      {
        __chkstk_darwin();
        sub_10025E768(&v13, 0x14uLL, v10, v11, &v14);
        if (v3)
        {
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x10025A484);
        }
        unsigned __int32 v12 = v15;
        *a3 = v14;
        a3[1].n128_u32[0] = v12;
      }
      else
      {
LABEL_7:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        *(unsigned char *)(v9 + 16) = 2;
        swift_willThrow();
      }
      return;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v5 = BYTE6(a2);
      goto LABEL_6;
  }
}

void sub_10025A494(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
      }
      uint64_t v5 = (int)v5;
LABEL_6:
      if (v5 >= 28)
      {
        __chkstk_darwin();
        sub_10025E9AC(&v15, 0x1CuLL, v10, v11, (uint64_t)&v16);
        if (v3)
        {
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x10025A5FCLL);
        }
        int v12 = v17;
        __int16 v13 = v19;
        long long v14 = v18;
        *(_WORD *)a3 = v16;
        *(_DWORD *)(a3 + 4) = v12;
        *(_OWORD *)(a3 + 8) = v14;
        *(_WORD *)(a3 + 24) = v13;
      }
      else
      {
LABEL_7:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        *(unsigned char *)(v9 + 16) = 2;
        swift_willThrow();
      }
      return;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v5 = BYTE6(a2);
      goto LABEL_6;
  }
}

void *sub_10025A60C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v7) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_13:
        __break(1u);
      }
      uint64_t v7 = (int)v7;
LABEL_5:
      if (v7 < 2080)
      {
LABEL_6:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v11 = 0;
        *(void *)(v11 + 8) = 0;
        *(unsigned char *)(v11 + 16) = 2;
        return (void *)swift_willThrow();
      }
      if (swift_stdlib_isStackAllocationSafe())
      {
        __chkstk_darwin();
        sub_10025EC00(&v14, 0x820uLL, a1, a2, v15);
        if (!v3) {
          return memcpy(a3, v15, 0x820uLL);
        }
        swift_willThrow();
        swift_errorRelease();
        __break(1u);
LABEL_15:
        swift_errorRelease();
        swift_slowDealloc();
        __break(1u);
        JUMPOUT(0x10025A818);
      }
      __int16 v13 = (void *)swift_slowAlloc();
      sub_10025EC00(v13, 0x820uLL, a1, a2, a3);
      if (v3) {
        goto LABEL_15;
      }
      return (void *)swift_slowDealloc();
    case 2uLL:
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t v8 = *(void *)(a1 + 24);
      BOOL v10 = __OFSUB__(v8, v9);
      uint64_t v7 = v8 - v9;
      if (!v10) {
        goto LABEL_5;
      }
      goto LABEL_13;
    default:
      goto LABEL_6;
  }
}

void sub_10025A828(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
      }
      uint64_t v5 = (int)v5;
LABEL_6:
      if (v5 >= 16)
      {
        __chkstk_darwin();
        sub_10025EE40(&v14, 0x10uLL, v10, v11, (uint64_t)&v15);
        if (v3)
        {
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x10025A980);
        }
        int v13 = v16;
        int v12 = v17;
        *(void *)a3 = v15;
        *(_DWORD *)(a3 + 8) = v13;
        *(_DWORD *)(a3 + 12) = v12;
      }
      else
      {
LABEL_7:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        *(unsigned char *)(v9 + 16) = 2;
        swift_willThrow();
      }
      return;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v5 = BYTE6(a2);
      goto LABEL_6;
  }
}

void sub_10025A990(uint64_t a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
      }
      uint64_t v5 = (int)v5;
LABEL_6:
      if (v5 >= 22)
      {
        __chkstk_darwin();
        sub_10025F084(&v14, 0x16uLL, v10, v11, &v15);
        if (v3)
        {
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x10025AAF0);
        }
        unsigned __int16 v12 = v17;
        unsigned __int32 v13 = v16;
        *a3 = v15;
        a3[1].n128_u32[0] = v13;
        a3[1].n128_u16[2] = v12;
      }
      else
      {
LABEL_7:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        *(unsigned char *)(v9 + 16) = 2;
        swift_willThrow();
      }
      return;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v5 = BYTE6(a2);
      goto LABEL_6;
  }
}

void sub_10025AB00(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
      }
      uint64_t v5 = (int)v5;
LABEL_6:
      if (v5 >= 18)
      {
        __chkstk_darwin();
        sub_10025F2D0(&v16, 0x12uLL, v10, v11, (uint64_t)&v17);
        if (v3)
        {
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x10025AC70);
        }
        __int16 v12 = v19;
        char v13 = v20;
        __int16 v14 = v21;
        int v15 = v18;
        *(void *)a3 = v17;
        *(_DWORD *)(a3 + 8) = v15;
        *(_WORD *)(a3 + 12) = v12;
        *(unsigned char *)(a3 + 14) = v13;
        *(_WORD *)(a3 + 16) = v14;
      }
      else
      {
LABEL_7:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        *(unsigned char *)(v9 + 16) = 2;
        swift_willThrow();
      }
      return;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v5 = BYTE6(a2);
      goto LABEL_6;
  }
}

void sub_10025AC80(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
      }
      uint64_t v5 = (int)v5;
LABEL_6:
      if (v5 >= 28)
      {
        __chkstk_darwin();
        sub_10025F52C(&v16, 0x1CuLL, v10, v11, (uint64_t)&v17);
        if (v3)
        {
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x10025ADF0);
        }
        char v12 = v18;
        int v13 = v20;
        __int16 v14 = v21;
        uint64_t v15 = v19;
        *(void *)a3 = v17;
        *(unsigned char *)(a3 + 8) = v12;
        *(void *)(a3 + 12) = v15;
        *(_DWORD *)(a3 + 20) = v13;
        *(_WORD *)(a3 + 24) = v14;
      }
      else
      {
LABEL_7:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        *(unsigned char *)(v9 + 16) = 2;
        swift_willThrow();
      }
      return;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v5 = BYTE6(a2);
      goto LABEL_6;
  }
}

void sub_10025AE00(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
      }
      uint64_t v5 = (int)v5;
LABEL_6:
      if (v5 >= 28)
      {
        __chkstk_darwin();
        sub_10025F788(&v16, 0x1CuLL, v10, v11, (uint64_t)&v17);
        if (v3)
        {
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x10025AF70);
        }
        char v12 = v18;
        int v13 = v20;
        __int16 v14 = v21;
        uint64_t v15 = v19;
        *(void *)a3 = v17;
        *(unsigned char *)(a3 + 8) = v12;
        *(void *)(a3 + 12) = v15;
        *(_DWORD *)(a3 + 20) = v13;
        *(_WORD *)(a3 + 24) = v14;
      }
      else
      {
LABEL_7:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        *(unsigned char *)(v9 + 16) = 2;
        swift_willThrow();
      }
      return;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v5 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_10025AF80(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v3) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
      }
      uint64_t v3 = (int)v3;
LABEL_6:
      if (v3 >= 12)
      {
        __chkstk_darwin();
        uint64_t result = sub_100261894(&v11, v9, v10, 0xCuLL);
        if (v2)
        {
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x10025B0B0);
        }
      }
      else
      {
LABEL_7:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        *(unsigned char *)(v7 + 16) = 2;
        return swift_willThrow();
      }
      return result;
    case 2uLL:
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v4 = *(void *)(a1 + 24);
      BOOL v6 = __OFSUB__(v4, v5);
      uint64_t v3 = v4 - v5;
      if (!v6) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v3 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_10025B0D0(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v3) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
      }
      uint64_t v3 = (int)v3;
LABEL_6:
      if (v3 >= 8)
      {
        __chkstk_darwin();
        uint64_t result = sub_100262710(&v11, v9, v10, 8uLL);
        if (v2)
        {
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x10025B200);
        }
      }
      else
      {
LABEL_7:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        *(unsigned char *)(v7 + 16) = 2;
        return swift_willThrow();
      }
      return result;
    case 2uLL:
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v4 = *(void *)(a1 + 24);
      BOOL v6 = __OFSUB__(v4, v5);
      uint64_t v3 = v4 - v5;
      if (!v6) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v3 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_10025B210(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v3) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
      }
      uint64_t v3 = (int)v3;
LABEL_6:
      if (v3 >= 2)
      {
        __chkstk_darwin();
        uint64_t result = sub_1002624E4(&v11, v9, v10, 2uLL);
        if (v2)
        {
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x10025B340);
        }
      }
      else
      {
LABEL_7:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        *(unsigned char *)(v7 + 16) = 2;
        return swift_willThrow();
      }
      return result;
    case 2uLL:
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v4 = *(void *)(a1 + 24);
      BOOL v6 = __OFSUB__(v4, v5);
      uint64_t v3 = v4 - v5;
      if (!v6) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v3 = BYTE6(a2);
      goto LABEL_6;
  }
}

void sub_10025B350(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
      }
      uint64_t v5 = (int)v5;
LABEL_6:
      if (v5 >= 24)
      {
        __chkstk_darwin();
        sub_10025F9E4(&v15, 0x18uLL, v10, v11, (uint64_t)v16);
        if (v3)
        {
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x10025B4A8);
        }
        uint64_t v12 = v16[1];
        int v13 = v17;
        int v14 = v18;
        *(void *)a3 = v16[0];
        *(void *)(a3 + 8) = v12;
        *(_DWORD *)(a3 + 16) = v13;
        *(_DWORD *)(a3 + 20) = v14;
      }
      else
      {
LABEL_7:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        *(unsigned char *)(v9 + 16) = 2;
        swift_willThrow();
      }
      return;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v5 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_10025B4B8(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v3) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
      }
      uint64_t v3 = (int)v3;
LABEL_6:
      if (v3 >= 16)
      {
        __chkstk_darwin();
        uint64_t result = sub_10026293C(&v11, v9, v10, 0x10uLL);
        if (v2)
        {
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x10025B5E8);
        }
      }
      else
      {
LABEL_7:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        *(unsigned char *)(v7 + 16) = 2;
        return swift_willThrow();
      }
      return result;
    case 2uLL:
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v4 = *(void *)(a1 + 24);
      BOOL v6 = __OFSUB__(v4, v5);
      uint64_t v3 = v4 - v5;
      if (!v6) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v3 = BYTE6(a2);
      goto LABEL_6;
  }
}

void sub_10025B5F8(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
      }
      uint64_t v5 = (int)v5;
LABEL_6:
      if (v5 >= 8)
      {
        __chkstk_darwin();
        sub_10025FC30(&v12, 8uLL, v10, v11, &v13);
        if (v3)
        {
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x10025B748);
        }
        *a3 = v13;
      }
      else
      {
LABEL_7:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        *(unsigned char *)(v9 + 16) = 2;
        swift_willThrow();
      }
      return;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v5 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_10025B758(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v3) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
      }
      uint64_t v3 = (int)v3;
LABEL_6:
      if (v3 >= 4)
      {
        __chkstk_darwin();
        uint64_t result = sub_100262FC0(&v11, v9, v10, 4uLL);
        if (v2)
        {
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x10025B888);
        }
      }
      else
      {
LABEL_7:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        *(unsigned char *)(v7 + 16) = 2;
        return swift_willThrow();
      }
      return result;
    case 2uLL:
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v4 = *(void *)(a1 + 24);
      BOOL v6 = __OFSUB__(v4, v5);
      uint64_t v3 = v4 - v5;
      if (!v6) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v3 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_10025B898(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v3) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
      }
      uint64_t v3 = (int)v3;
LABEL_6:
      if (v3 >= 4)
      {
        __chkstk_darwin();
        uint64_t result = sub_1002631EC(&v11, v9, v10, 4uLL);
        if (v2)
        {
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x10025B9C8);
        }
      }
      else
      {
LABEL_7:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        *(unsigned char *)(v7 + 16) = 2;
        return swift_willThrow();
      }
      return result;
    case 2uLL:
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v4 = *(void *)(a1 + 24);
      BOOL v6 = __OFSUB__(v4, v5);
      uint64_t v3 = v4 - v5;
      if (!v6) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v3 = BYTE6(a2);
      goto LABEL_6;
  }
}

id WiFiAddress.apiAddress.getter(uint64_t a1)
{
  id v2 = objc_allocWithZone((Class)WiFiMACAddress);

  return [v2 initWithAddress:a1 & 0xFFFFFFFFFFFFLL];
}

uint64_t WiFiAddress.description.getter(unint64_t a1)
{
  char v1 = a1;
  unint64_t v2 = a1 >> 8;
  unint64_t v3 = a1 >> 16;
  unint64_t v4 = a1 >> 24;
  unint64_t v5 = HIDWORD(a1);
  unint64_t v6 = a1 >> 40;
  sub_100010BCC((uint64_t *)&unk_10047CF90);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1003B2F40;
  *(void *)(v7 + 56) = &type metadata for UInt8;
  *(void *)(v7 + 64) = &protocol witness table for UInt8;
  *(unsigned char *)(v7 + 32) = v1;
  *(void *)(v7 + 96) = &type metadata for UInt8;
  *(void *)(v7 + 104) = &protocol witness table for UInt8;
  *(unsigned char *)(v7 + 72) = v2;
  *(void *)(v7 + 136) = &type metadata for UInt8;
  *(void *)(v7 + 144) = &protocol witness table for UInt8;
  *(unsigned char *)(v7 + 112) = v3;
  *(void *)(v7 + 176) = &type metadata for UInt8;
  *(void *)(v7 + 184) = &protocol witness table for UInt8;
  *(unsigned char *)(v7 + 152) = v4;
  *(void *)(v7 + 216) = &type metadata for UInt8;
  *(void *)(v7 + 224) = &protocol witness table for UInt8;
  *(unsigned char *)(v7 + 192) = v5;
  *(void *)(v7 + 256) = &type metadata for UInt8;
  *(void *)(v7 + 264) = &protocol witness table for UInt8;
  *(unsigned char *)(v7 + 232) = v6;

  return String.init(format:_:)();
}

void __swiftcall WiFiAddress.init(_:_:_:_:_:_:)(CoreP2P::WiFiAddress *__return_ptr retstr, Swift::UInt8 a2, Swift::UInt8 a3, Swift::UInt8 a4, Swift::UInt8 a5, Swift::UInt8 a6, Swift::UInt8 a7)
{
}

double sub_10025BB1C@<D0>(char *__dst@<X0>, size_t __n@<X4>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  switch(a4 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v14 = *(void *)(a3 + 16);
      swift_retain();
      swift_retain();
      uint64_t v15 = __DataStorage._bytes.getter();
      if (!v15) {
        goto LABEL_21;
      }
      uint64_t v16 = v15;
      uint64_t v17 = __DataStorage._offset.getter();
      BOOL v18 = __OFSUB__(v14, v17);
      uint64_t v19 = v14 - v17;
      if (v18) {
        goto LABEL_17;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_22;
      }
      memcpy(__dst, (const void *)(v16 + v19), __n);
      swift_release();
      swift_release();
      goto LABEL_15;
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_23;
    default:
      __src[0]  = a3;
      LOWORD(__src[1])  = a4;
      BYTE2(__src[1])  = BYTE2(a4);
      BYTE3(__src[1])  = BYTE3(a4);
      BYTE4(__src[1])  = BYTE4(a4);
      BYTE5(__src[1])  = BYTE5(a4);
      if (__dst)
      {
LABEL_14:
        memcpy(__dst, __src, __n);
        goto LABEL_15;
      }
      __break(1u);
LABEL_4:
      if ((int)a3 > a3 >> 32)
      {
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      sub_100013D44(a3, a4);
      uint64_t v10 = __DataStorage._bytes.getter();
      if (!v10)
      {
        __DataStorage._length.getter();
        if (__dst) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
      uint64_t v11 = v10;
      uint64_t v12 = __DataStorage._offset.getter();
      uint64_t v13 = (int)a3 - v12;
      if (__OFSUB__((int)a3, v12)) {
LABEL_18:
      }
        __break(1u);
      __DataStorage._length.getter();
      if (!__dst)
      {
LABEL_20:
        __break(1u);
LABEL_21:
        __DataStorage._length.getter();
        if (__dst)
        {
LABEL_25:
          __break(1u);
          JUMPOUT(0x10025BD68);
        }
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      memcpy(__dst, (const void *)(v11 + v13), __n);
      sub_10000C970(a3, a4);
LABEL_15:
      int v20 = *((_DWORD *)__dst + 5);
      *(_DWORD *)a5  = *(_DWORD *)__dst;
      *(_OWORD *)(a5 + 4)  = *(_OWORD *)(__dst + 4);
      *(_DWORD *)(a5 + 20)  = v20;
      *(_OWORD *)(a5 + 24)  = *(_OWORD *)(__dst + 24);
      double result = *((double *)__dst + 5);
      *(double *)(a5 + 40)  = result;
      return result;
  }
}

__n128 sub_10025BD78@<Q0>(__n128 *__dst@<X0>, size_t __n@<X4>, uint64_t a3@<X2>, unint64_t a4@<X3>, __n128 *a5@<X8>)
{
  switch(a4 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v14 = *(void *)(a3 + 16);
      swift_retain();
      swift_retain();
      uint64_t v15 = __DataStorage._bytes.getter();
      if (!v15) {
        goto LABEL_21;
      }
      uint64_t v16 = v15;
      uint64_t v17 = __DataStorage._offset.getter();
      BOOL v18 = __OFSUB__(v14, v17);
      uint64_t v19 = v14 - v17;
      if (v18) {
        goto LABEL_17;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_22;
      }
      memcpy(__dst, (const void *)(v16 + v19), __n);
      swift_release();
      swift_release();
      goto LABEL_15;
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_23;
    default:
      __src[0]  = a3;
      LOWORD(__src[1])  = a4;
      BYTE2(__src[1])  = BYTE2(a4);
      BYTE3(__src[1])  = BYTE3(a4);
      BYTE4(__src[1])  = BYTE4(a4);
      BYTE5(__src[1])  = BYTE5(a4);
      if (__dst)
      {
LABEL_14:
        memcpy(__dst, __src, __n);
        goto LABEL_15;
      }
      __break(1u);
LABEL_4:
      if ((int)a3 > a3 >> 32)
      {
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      sub_100013D44(a3, a4);
      uint64_t v10 = __DataStorage._bytes.getter();
      if (!v10)
      {
        __DataStorage._length.getter();
        if (__dst) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
      uint64_t v11 = v10;
      uint64_t v12 = __DataStorage._offset.getter();
      uint64_t v13 = (int)a3 - v12;
      if (__OFSUB__((int)a3, v12)) {
LABEL_18:
      }
        __break(1u);
      __DataStorage._length.getter();
      if (!__dst)
      {
LABEL_20:
        __break(1u);
LABEL_21:
        __DataStorage._length.getter();
        if (__dst)
        {
LABEL_25:
          __break(1u);
          JUMPOUT(0x10025BFA4);
        }
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      memcpy(__dst, (const void *)(v11 + v13), __n);
      sub_10000C970(a3, a4);
LABEL_15:
      __n128 result = *__dst;
      *a5  = *__dst;
      return result;
  }
}

double sub_10025BFB4@<D0>(char *__dst@<X0>, size_t __n@<X4>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  switch(a4 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v14 = *(void *)(a3 + 16);
      swift_retain();
      swift_retain();
      uint64_t v15 = __DataStorage._bytes.getter();
      if (!v15) {
        goto LABEL_21;
      }
      uint64_t v16 = v15;
      uint64_t v17 = __DataStorage._offset.getter();
      BOOL v18 = __OFSUB__(v14, v17);
      uint64_t v19 = v14 - v17;
      if (v18) {
        goto LABEL_17;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_22;
      }
      memcpy(__dst, (const void *)(v16 + v19), __n);
      swift_release();
      swift_release();
      goto LABEL_15;
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_23;
    default:
      __src[0]  = a3;
      LOWORD(__src[1])  = a4;
      BYTE2(__src[1])  = BYTE2(a4);
      BYTE3(__src[1])  = BYTE3(a4);
      BYTE4(__src[1])  = BYTE4(a4);
      BYTE5(__src[1])  = BYTE5(a4);
      if (__dst)
      {
LABEL_14:
        memcpy(__dst, __src, __n);
        goto LABEL_15;
      }
      __break(1u);
LABEL_4:
      if ((int)a3 > a3 >> 32)
      {
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      sub_100013D44(a3, a4);
      uint64_t v10 = __DataStorage._bytes.getter();
      if (!v10)
      {
        __DataStorage._length.getter();
        if (__dst) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
      uint64_t v11 = v10;
      uint64_t v12 = __DataStorage._offset.getter();
      uint64_t v13 = (int)a3 - v12;
      if (__OFSUB__((int)a3, v12)) {
LABEL_18:
      }
        __break(1u);
      __DataStorage._length.getter();
      if (!__dst)
      {
LABEL_20:
        __break(1u);
LABEL_21:
        __DataStorage._length.getter();
        if (__dst)
        {
LABEL_25:
          __break(1u);
          JUMPOUT(0x10025C218);
        }
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      memcpy(__dst, (const void *)(v11 + v13), __n);
      sub_10000C970(a3, a4);
LABEL_15:
      uint64_t v20 = *((void *)__dst + 7);
      int v21 = *((_DWORD *)__dst + 16);
      *(void *)a5  = *(void *)__dst;
      *(_DWORD *)(a5 + 8)  = *((_DWORD *)__dst + 2);
      *(_OWORD *)(a5 + 12)  = *(_OWORD *)(__dst + 12);
      *(_OWORD *)(a5 + 28)  = *(_OWORD *)(__dst + 28);
      double result = *(double *)(__dst + 44);
      *(double *)(a5 + 44)  = result;
      *(void *)(a5 + 56)  = v20;
      *(_DWORD *)(a5 + 64)  = v21;
      *(_DWORD *)(a5 + 68)  = *((_DWORD *)__dst + 17);
      return result;
  }
}

void *sub_10025C228@<X0>(void *__dst@<X0>, size_t __n@<X4>, uint64_t a3@<X2>, unint64_t a4@<X3>, void *a5@<X8>)
{
  switch(a4 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v14 = *(void *)(a3 + 16);
      swift_retain();
      swift_retain();
      uint64_t v15 = __DataStorage._bytes.getter();
      if (!v15) {
        goto LABEL_23;
      }
      uint64_t v16 = v15;
      uint64_t v17 = __DataStorage._offset.getter();
      BOOL v18 = __OFSUB__(v14, v17);
      uint64_t v19 = v14 - v17;
      if (v18) {
        goto LABEL_19;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_24;
      }
      memcpy(__dst, (const void *)(v16 + v19), __n);
      swift_release();
      swift_release();
      goto LABEL_15;
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_25;
    default:
      __src[0]  = a3;
      LOWORD(__src[1])  = a4;
      BYTE2(__src[1])  = BYTE2(a4);
      BYTE3(__src[1])  = BYTE3(a4);
      BYTE4(__src[1])  = BYTE4(a4);
      BYTE5(__src[1])  = BYTE5(a4);
      if (!__dst)
      {
        __break(1u);
LABEL_4:
        if ((int)a3 > a3 >> 32)
        {
          __break(1u);
LABEL_19:
          __break(1u);
        }
        else
        {
          sub_100013D44(a3, a4);
          uint64_t v10 = __DataStorage._bytes.getter();
          if (!v10)
          {
            __DataStorage._length.getter();
            if (__dst) {
              goto LABEL_26;
            }
            goto LABEL_22;
          }
          uint64_t v11 = v10;
          uint64_t v12 = __DataStorage._offset.getter();
          uint64_t v13 = (int)a3 - v12;
          if (!__OFSUB__((int)a3, v12))
          {
            __DataStorage._length.getter();
            if (__dst)
            {
              memcpy(__dst, (const void *)(v11 + v13), __n);
              sub_10000C970(a3, a4);
              goto LABEL_15;
            }
LABEL_22:
            __break(1u);
LABEL_23:
            __DataStorage._length.getter();
            if (__dst)
            {
LABEL_27:
              __break(1u);
              JUMPOUT(0x10025C458);
            }
LABEL_24:
            __break(1u);
LABEL_25:
            __break(1u);
LABEL_26:
            __break(1u);
            goto LABEL_27;
          }
        }
        __break(1u);
      }
LABEL_14:
      memcpy(__dst, __src, __n);
LABEL_15:
      return memcpy(a5, __dst, 0x193uLL);
  }
}

__n128 sub_10025C468@<Q0>(char *__dst@<X0>, size_t __n@<X4>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  switch(a4 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v14 = *(void *)(a3 + 16);
      swift_retain();
      swift_retain();
      uint64_t v15 = __DataStorage._bytes.getter();
      if (!v15) {
        goto LABEL_21;
      }
      uint64_t v16 = v15;
      uint64_t v17 = __DataStorage._offset.getter();
      BOOL v18 = __OFSUB__(v14, v17);
      uint64_t v19 = v14 - v17;
      if (v18) {
        goto LABEL_17;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_22;
      }
      memcpy(__dst, (const void *)(v16 + v19), __n);
      swift_release();
      swift_release();
      goto LABEL_15;
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_23;
    default:
      __src[0]  = a3;
      LOWORD(__src[1])  = a4;
      BYTE2(__src[1])  = BYTE2(a4);
      BYTE3(__src[1])  = BYTE3(a4);
      BYTE4(__src[1])  = BYTE4(a4);
      BYTE5(__src[1])  = BYTE5(a4);
      if (__dst)
      {
LABEL_14:
        memcpy(__dst, __src, __n);
        goto LABEL_15;
      }
      __break(1u);
LABEL_4:
      if ((int)a3 > a3 >> 32)
      {
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      sub_100013D44(a3, a4);
      uint64_t v10 = __DataStorage._bytes.getter();
      if (!v10)
      {
        __DataStorage._length.getter();
        if (__dst) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
      uint64_t v11 = v10;
      uint64_t v12 = __DataStorage._offset.getter();
      uint64_t v13 = (int)a3 - v12;
      if (__OFSUB__((int)a3, v12)) {
LABEL_18:
      }
        __break(1u);
      __DataStorage._length.getter();
      if (!__dst)
      {
LABEL_20:
        __break(1u);
LABEL_21:
        __DataStorage._length.getter();
        if (__dst)
        {
LABEL_25:
          __break(1u);
          JUMPOUT(0x10025C6DCLL);
        }
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      memcpy(__dst, (const void *)(v11 + v13), __n);
      sub_10000C970(a3, a4);
LABEL_15:
      __int16 v20 = *((_WORD *)__dst + 6);
      int v21 = *((_DWORD *)__dst + 4);
      int v22 = *((_DWORD *)__dst + 21);
      __n128 result = *(__n128 *)(__dst + 20);
      long long v24 = *(_OWORD *)(__dst + 36);
      long long v25 = *(_OWORD *)(__dst + 52);
      long long v26 = *(_OWORD *)(__dst + 68);
      long long v27 = *(_OWORD *)(__dst + 88);
      *(void *)a5  = *(void *)__dst;
      *(_DWORD *)(a5 + 8)  = *((_DWORD *)__dst + 2);
      *(_WORD *)(a5 + 12)  = v20;
      *(_DWORD *)(a5 + 16)  = v21;
      *(__n128 *)(a5 + 20)  = result;
      *(_OWORD *)(a5 + 36)  = v24;
      *(_OWORD *)(a5 + 52)  = v25;
      *(_OWORD *)(a5 + 68)  = v26;
      *(_DWORD *)(a5 + 84)  = v22;
      *(_OWORD *)(a5 + 88)  = v27;
      return result;
  }
}

__n128 sub_10025C6EC@<Q0>(char *__dst@<X0>, size_t __n@<X4>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  switch(a4 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v14 = *(void *)(a3 + 16);
      swift_retain();
      swift_retain();
      uint64_t v15 = __DataStorage._bytes.getter();
      if (!v15) {
        goto LABEL_21;
      }
      uint64_t v16 = v15;
      uint64_t v17 = __DataStorage._offset.getter();
      BOOL v18 = __OFSUB__(v14, v17);
      uint64_t v19 = v14 - v17;
      if (v18) {
        goto LABEL_17;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_22;
      }
      memcpy(__dst, (const void *)(v16 + v19), __n);
      swift_release();
      swift_release();
      goto LABEL_15;
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_23;
    default:
      __src[0]  = a3;
      LOWORD(__src[1])  = a4;
      BYTE2(__src[1])  = BYTE2(a4);
      BYTE3(__src[1])  = BYTE3(a4);
      BYTE4(__src[1])  = BYTE4(a4);
      BYTE5(__src[1])  = BYTE5(a4);
      if (__dst)
      {
LABEL_14:
        memcpy(__dst, __src, __n);
        goto LABEL_15;
      }
      __break(1u);
LABEL_4:
      if ((int)a3 > a3 >> 32)
      {
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      sub_100013D44(a3, a4);
      uint64_t v10 = __DataStorage._bytes.getter();
      if (!v10)
      {
        __DataStorage._length.getter();
        if (__dst) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
      uint64_t v11 = v10;
      uint64_t v12 = __DataStorage._offset.getter();
      uint64_t v13 = (int)a3 - v12;
      if (__OFSUB__((int)a3, v12)) {
LABEL_18:
      }
        __break(1u);
      __DataStorage._length.getter();
      if (!__dst)
      {
LABEL_20:
        __break(1u);
LABEL_21:
        __DataStorage._length.getter();
        if (__dst)
        {
LABEL_25:
          __break(1u);
          JUMPOUT(0x10025C928);
        }
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      memcpy(__dst, (const void *)(v11 + v13), __n);
      sub_10000C970(a3, a4);
LABEL_15:
      *(_DWORD *)a5  = *(_DWORD *)__dst;
      __n128 result = *(__n128 *)(__dst + 4);
      *(__n128 *)(a5 + 4)  = result;
      *(_DWORD *)(a5 + 20)  = *((_DWORD *)__dst + 5);
      return result;
  }
}

void *sub_10025C938@<X0>(void *__dst@<X0>, size_t __n@<X4>, uint64_t a3@<X2>, unint64_t a4@<X3>, void *a5@<X8>)
{
  switch(a4 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v14 = *(void *)(a3 + 16);
      swift_retain();
      swift_retain();
      uint64_t v15 = __DataStorage._bytes.getter();
      if (!v15) {
        goto LABEL_23;
      }
      uint64_t v16 = v15;
      uint64_t v17 = __DataStorage._offset.getter();
      BOOL v18 = __OFSUB__(v14, v17);
      uint64_t v19 = v14 - v17;
      if (v18) {
        goto LABEL_19;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_24;
      }
      memcpy(__dst, (const void *)(v16 + v19), __n);
      swift_release();
      swift_release();
      goto LABEL_15;
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_25;
    default:
      __src[0]  = a3;
      LOWORD(__src[1])  = a4;
      BYTE2(__src[1])  = BYTE2(a4);
      BYTE3(__src[1])  = BYTE3(a4);
      BYTE4(__src[1])  = BYTE4(a4);
      BYTE5(__src[1])  = BYTE5(a4);
      if (!__dst)
      {
        __break(1u);
LABEL_4:
        if ((int)a3 > a3 >> 32)
        {
          __break(1u);
LABEL_19:
          __break(1u);
        }
        else
        {
          sub_100013D44(a3, a4);
          uint64_t v10 = __DataStorage._bytes.getter();
          if (!v10)
          {
            __DataStorage._length.getter();
            if (__dst) {
              goto LABEL_26;
            }
            goto LABEL_22;
          }
          uint64_t v11 = v10;
          uint64_t v12 = __DataStorage._offset.getter();
          uint64_t v13 = (int)a3 - v12;
          if (!__OFSUB__((int)a3, v12))
          {
            __DataStorage._length.getter();
            if (__dst)
            {
              memcpy(__dst, (const void *)(v11 + v13), __n);
              sub_10000C970(a3, a4);
              goto LABEL_15;
            }
LABEL_22:
            __break(1u);
LABEL_23:
            __DataStorage._length.getter();
            if (__dst)
            {
LABEL_27:
              __break(1u);
              JUMPOUT(0x10025CB68);
            }
LABEL_24:
            __break(1u);
LABEL_25:
            __break(1u);
LABEL_26:
            __break(1u);
            goto LABEL_27;
          }
        }
        __break(1u);
      }
LABEL_14:
      memcpy(__dst, __src, __n);
LABEL_15:
      return memcpy(a5, __dst, 0x1CCuLL);
  }
}

__n128 sub_10025CB78@<Q0>(__n128 *__dst@<X0>, size_t __n@<X4>, uint64_t a3@<X2>, unint64_t a4@<X3>, __n128 *a5@<X8>)
{
  switch(a4 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v14 = *(void *)(a3 + 16);
      swift_retain();
      swift_retain();
      uint64_t v15 = __DataStorage._bytes.getter();
      if (!v15) {
        goto LABEL_21;
      }
      uint64_t v16 = v15;
      uint64_t v17 = __DataStorage._offset.getter();
      BOOL v18 = __OFSUB__(v14, v17);
      uint64_t v19 = v14 - v17;
      if (v18) {
        goto LABEL_17;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_22;
      }
      memcpy(__dst, (const void *)(v16 + v19), __n);
      swift_release();
      swift_release();
      goto LABEL_15;
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_23;
    default:
      __src[0]  = a3;
      LOWORD(__src[1])  = a4;
      BYTE2(__src[1])  = BYTE2(a4);
      BYTE3(__src[1])  = BYTE3(a4);
      BYTE4(__src[1])  = BYTE4(a4);
      BYTE5(__src[1])  = BYTE5(a4);
      if (__dst)
      {
LABEL_14:
        memcpy(__dst, __src, __n);
        goto LABEL_15;
      }
      __break(1u);
LABEL_4:
      if ((int)a3 > a3 >> 32)
      {
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      sub_100013D44(a3, a4);
      uint64_t v10 = __DataStorage._bytes.getter();
      if (!v10)
      {
        __DataStorage._length.getter();
        if (__dst) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
      uint64_t v11 = v10;
      uint64_t v12 = __DataStorage._offset.getter();
      uint64_t v13 = (int)a3 - v12;
      if (__OFSUB__((int)a3, v12)) {
LABEL_18:
      }
        __break(1u);
      __DataStorage._length.getter();
      if (!__dst)
      {
LABEL_20:
        __break(1u);
LABEL_21:
        __DataStorage._length.getter();
        if (__dst)
        {
LABEL_25:
          __break(1u);
          JUMPOUT(0x10025CDD4);
        }
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      memcpy(__dst, (const void *)(v11 + v13), __n);
      sub_10000C970(a3, a4);
LABEL_15:
      __n128 v20 = __dst[9];
      a5[8]  = __dst[8];
      a5[9]  = v20;
      a5[10]  = __dst[10];
      a5[11].n128_u64[0]  = __dst[11].n128_u64[0];
      __n128 v21 = __dst[5];
      a5[4]  = __dst[4];
      a5[5]  = v21;
      __n128 v22 = __dst[7];
      a5[6]  = __dst[6];
      a5[7]  = v22;
      __n128 v23 = __dst[1];
      *a5  = *__dst;
      a5[1]  = v23;
      __n128 result = __dst[2];
      __n128 v25 = __dst[3];
      a5[2]  = result;
      a5[3]  = v25;
      return result;
  }
}

__n128 sub_10025CDE4@<Q0>(char *__dst@<X0>, size_t __n@<X4>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  switch(a4 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v14 = *(void *)(a3 + 16);
      swift_retain();
      swift_retain();
      uint64_t v15 = __DataStorage._bytes.getter();
      if (!v15) {
        goto LABEL_21;
      }
      uint64_t v16 = v15;
      uint64_t v17 = __DataStorage._offset.getter();
      BOOL v18 = __OFSUB__(v14, v17);
      uint64_t v19 = v14 - v17;
      if (v18) {
        goto LABEL_17;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_22;
      }
      memcpy(__dst, (const void *)(v16 + v19), __n);
      swift_release();
      swift_release();
      goto LABEL_15;
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_23;
    default:
      __src[0]  = a3;
      LOWORD(__src[1])  = a4;
      BYTE2(__src[1])  = BYTE2(a4);
      BYTE3(__src[1])  = BYTE3(a4);
      BYTE4(__src[1])  = BYTE4(a4);
      BYTE5(__src[1])  = BYTE5(a4);
      if (__dst)
      {
LABEL_14:
        memcpy(__dst, __src, __n);
        goto LABEL_15;
      }
      __break(1u);
LABEL_4:
      if ((int)a3 > a3 >> 32)
      {
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      sub_100013D44(a3, a4);
      uint64_t v10 = __DataStorage._bytes.getter();
      if (!v10)
      {
        __DataStorage._length.getter();
        if (__dst) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
      uint64_t v11 = v10;
      uint64_t v12 = __DataStorage._offset.getter();
      uint64_t v13 = (int)a3 - v12;
      if (__OFSUB__((int)a3, v12)) {
LABEL_18:
      }
        __break(1u);
      __DataStorage._length.getter();
      if (!__dst)
      {
LABEL_20:
        __break(1u);
LABEL_21:
        __DataStorage._length.getter();
        if (__dst)
        {
LABEL_25:
          __break(1u);
          JUMPOUT(0x10025D028);
        }
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      memcpy(__dst, (const void *)(v11 + v13), __n);
      sub_10000C970(a3, a4);
LABEL_15:
      int v20 = *((_DWORD *)__dst + 9);
      *(_DWORD *)a5  = *(_DWORD *)__dst;
      *(_OWORD *)(a5 + 4)  = *(_OWORD *)(__dst + 4);
      __n128 result = *(__n128 *)(__dst + 20);
      *(__n128 *)(a5 + 20)  = result;
      *(_DWORD *)(a5 + 36)  = v20;
      return result;
  }
}

void *sub_10025D038@<X0>(void *__dst@<X0>, size_t __n@<X4>, uint64_t a3@<X2>, unint64_t a4@<X3>, void *a5@<X8>)
{
  switch(a4 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v14 = *(void *)(a3 + 16);
      swift_retain();
      swift_retain();
      uint64_t v15 = __DataStorage._bytes.getter();
      if (!v15) {
        goto LABEL_23;
      }
      uint64_t v16 = v15;
      uint64_t v17 = __DataStorage._offset.getter();
      BOOL v18 = __OFSUB__(v14, v17);
      uint64_t v19 = v14 - v17;
      if (v18) {
        goto LABEL_19;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_24;
      }
      memcpy(__dst, (const void *)(v16 + v19), __n);
      swift_release();
      swift_release();
      goto LABEL_15;
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_25;
    default:
      __src[0]  = a3;
      LOWORD(__src[1])  = a4;
      BYTE2(__src[1])  = BYTE2(a4);
      BYTE3(__src[1])  = BYTE3(a4);
      BYTE4(__src[1])  = BYTE4(a4);
      BYTE5(__src[1])  = BYTE5(a4);
      if (!__dst)
      {
        __break(1u);
LABEL_4:
        if ((int)a3 > a3 >> 32)
        {
          __break(1u);
LABEL_19:
          __break(1u);
        }
        else
        {
          sub_100013D44(a3, a4);
          uint64_t v10 = __DataStorage._bytes.getter();
          if (!v10)
          {
            __DataStorage._length.getter();
            if (__dst) {
              goto LABEL_26;
            }
            goto LABEL_22;
          }
          uint64_t v11 = v10;
          uint64_t v12 = __DataStorage._offset.getter();
          uint64_t v13 = (int)a3 - v12;
          if (!__OFSUB__((int)a3, v12))
          {
            __DataStorage._length.getter();
            if (__dst)
            {
              memcpy(__dst, (const void *)(v11 + v13), __n);
              sub_10000C970(a3, a4);
              goto LABEL_15;
            }
LABEL_22:
            __break(1u);
LABEL_23:
            __DataStorage._length.getter();
            if (__dst)
            {
LABEL_27:
              __break(1u);
              JUMPOUT(0x10025D268);
            }
LABEL_24:
            __break(1u);
LABEL_25:
            __break(1u);
LABEL_26:
            __break(1u);
            goto LABEL_27;
          }
        }
        __break(1u);
      }
LABEL_14:
      memcpy(__dst, __src, __n);
LABEL_15:
      return memcpy(a5, __dst, 0x108uLL);
  }
}

double sub_10025D278@<D0>(char *__dst@<X0>, size_t __n@<X4>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  switch(a4 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v14 = *(void *)(a3 + 16);
      swift_retain();
      swift_retain();
      uint64_t v15 = __DataStorage._bytes.getter();
      if (!v15) {
        goto LABEL_21;
      }
      uint64_t v16 = v15;
      uint64_t v17 = __DataStorage._offset.getter();
      BOOL v18 = __OFSUB__(v14, v17);
      uint64_t v19 = v14 - v17;
      if (v18) {
        goto LABEL_17;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_22;
      }
      memcpy(__dst, (const void *)(v16 + v19), __n);
      swift_release();
      swift_release();
      goto LABEL_15;
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_23;
    default:
      __src[0]  = a3;
      LOWORD(__src[1])  = a4;
      BYTE2(__src[1])  = BYTE2(a4);
      BYTE3(__src[1])  = BYTE3(a4);
      BYTE4(__src[1])  = BYTE4(a4);
      BYTE5(__src[1])  = BYTE5(a4);
      if (__dst)
      {
LABEL_14:
        memcpy(__dst, __src, __n);
        goto LABEL_15;
      }
      __break(1u);
LABEL_4:
      if ((int)a3 > a3 >> 32)
      {
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      sub_100013D44(a3, a4);
      uint64_t v10 = __DataStorage._bytes.getter();
      if (!v10)
      {
        __DataStorage._length.getter();
        if (__dst) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
      uint64_t v11 = v10;
      uint64_t v12 = __DataStorage._offset.getter();
      uint64_t v13 = (int)a3 - v12;
      if (__OFSUB__((int)a3, v12)) {
LABEL_18:
      }
        __break(1u);
      __DataStorage._length.getter();
      if (!__dst)
      {
LABEL_20:
        __break(1u);
LABEL_21:
        __DataStorage._length.getter();
        if (__dst)
        {
LABEL_25:
          __break(1u);
          JUMPOUT(0x10025D4CCLL);
        }
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      memcpy(__dst, (const void *)(v11 + v13), __n);
      sub_10000C970(a3, a4);
LABEL_15:
      int v20 = *((_DWORD *)__dst + 4);
      double result = *((double *)__dst + 1);
      long long v22 = *(_OWORD *)(__dst + 20);
      long long v23 = *(_OWORD *)(__dst + 36);
      long long v24 = *(_OWORD *)(__dst + 52);
      int v25 = *((_DWORD *)__dst + 1);
      *(_DWORD *)a5  = *(_DWORD *)__dst;
      *(_DWORD *)(a5 + 4)  = v25;
      *(double *)(a5 + 8)  = result;
      *(_DWORD *)(a5 + 16)  = v20;
      *(_OWORD *)(a5 + 20)  = v22;
      *(_OWORD *)(a5 + 36)  = v23;
      *(_OWORD *)(a5 + 52)  = v24;
      return result;
  }
}

__n128 sub_10025D4DC@<Q0>(__n128 *__dst@<X0>, size_t __n@<X4>, uint64_t a3@<X2>, unint64_t a4@<X3>, __n128 *a5@<X8>)
{
  switch(a4 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v14 = *(void *)(a3 + 16);
      swift_retain();
      swift_retain();
      uint64_t v15 = __DataStorage._bytes.getter();
      if (!v15) {
        goto LABEL_21;
      }
      uint64_t v16 = v15;
      uint64_t v17 = __DataStorage._offset.getter();
      BOOL v18 = __OFSUB__(v14, v17);
      uint64_t v19 = v14 - v17;
      if (v18) {
        goto LABEL_17;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_22;
      }
      memcpy(__dst, (const void *)(v16 + v19), __n);
      swift_release();
      swift_release();
      goto LABEL_15;
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_23;
    default:
      __src[0]  = a3;
      LOWORD(__src[1])  = a4;
      BYTE2(__src[1])  = BYTE2(a4);
      BYTE3(__src[1])  = BYTE3(a4);
      BYTE4(__src[1])  = BYTE4(a4);
      BYTE5(__src[1])  = BYTE5(a4);
      if (__dst)
      {
LABEL_14:
        memcpy(__dst, __src, __n);
        goto LABEL_15;
      }
      __break(1u);
LABEL_4:
      if ((int)a3 > a3 >> 32)
      {
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      sub_100013D44(a3, a4);
      uint64_t v10 = __DataStorage._bytes.getter();
      if (!v10)
      {
        __DataStorage._length.getter();
        if (__dst) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
      uint64_t v11 = v10;
      uint64_t v12 = __DataStorage._offset.getter();
      uint64_t v13 = (int)a3 - v12;
      if (__OFSUB__((int)a3, v12)) {
LABEL_18:
      }
        __break(1u);
      __DataStorage._length.getter();
      if (!__dst)
      {
LABEL_20:
        __break(1u);
LABEL_21:
        __DataStorage._length.getter();
        if (__dst)
        {
LABEL_25:
          __break(1u);
          JUMPOUT(0x10025D738);
        }
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      memcpy(__dst, (const void *)(v11 + v13), __n);
      sub_10000C970(a3, a4);
LABEL_15:
      __n128 v20 = __dst[11];
      a5[10]  = __dst[10];
      a5[11]  = v20;
      a5[12]  = __dst[12];
      __n128 v21 = __dst[7];
      a5[6]  = __dst[6];
      a5[7]  = v21;
      __n128 v22 = __dst[9];
      a5[8]  = __dst[8];
      a5[9]  = v22;
      __n128 v23 = __dst[3];
      a5[2]  = __dst[2];
      a5[3]  = v23;
      __n128 v24 = __dst[5];
      a5[4]  = __dst[4];
      a5[5]  = v24;
      __n128 result = __dst[1];
      *a5  = *__dst;
      a5[1]  = result;
      return result;
  }
}

void *sub_10025D748@<X0>(void *__dst@<X0>, size_t __n@<X4>, uint64_t a3@<X2>, unint64_t a4@<X3>, void *a5@<X8>)
{
  switch(a4 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v14 = *(void *)(a3 + 16);
      swift_retain();
      swift_retain();
      uint64_t v15 = __DataStorage._bytes.getter();
      if (!v15) {
        goto LABEL_23;
      }
      uint64_t v16 = v15;
      uint64_t v17 = __DataStorage._offset.getter();
      BOOL v18 = __OFSUB__(v14, v17);
      uint64_t v19 = v14 - v17;
      if (v18) {
        goto LABEL_19;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_24;
      }
      memcpy(__dst, (const void *)(v16 + v19), __n);
      swift_release();
      swift_release();
      goto LABEL_15;
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_25;
    default:
      __src[0]  = a3;
      LOWORD(__src[1])  = a4;
      BYTE2(__src[1])  = BYTE2(a4);
      BYTE3(__src[1])  = BYTE3(a4);
      BYTE4(__src[1])  = BYTE4(a4);
      BYTE5(__src[1])  = BYTE5(a4);
      if (!__dst)
      {
        __break(1u);
LABEL_4:
        if ((int)a3 > a3 >> 32)
        {
          __break(1u);
LABEL_19:
          __break(1u);
        }
        else
        {
          sub_100013D44(a3, a4);
          uint64_t v10 = __DataStorage._bytes.getter();
          if (!v10)
          {
            __DataStorage._length.getter();
            if (__dst) {
              goto LABEL_26;
            }
            goto LABEL_22;
          }
          uint64_t v11 = v10;
          uint64_t v12 = __DataStorage._offset.getter();
          uint64_t v13 = (int)a3 - v12;
          if (!__OFSUB__((int)a3, v12))
          {
            __DataStorage._length.getter();
            if (__dst)
            {
              memcpy(__dst, (const void *)(v11 + v13), __n);
              sub_10000C970(a3, a4);
              goto LABEL_15;
            }
LABEL_22:
            __break(1u);
LABEL_23:
            __DataStorage._length.getter();
            if (__dst)
            {
LABEL_27:
              __break(1u);
              JUMPOUT(0x10025D978);
            }
LABEL_24:
            __break(1u);
LABEL_25:
            __break(1u);
LABEL_26:
            __break(1u);
            goto LABEL_27;
          }
        }
        __break(1u);
      }
LABEL_14:
      memcpy(__dst, __src, __n);
LABEL_15:
      return memcpy(a5, __dst, 0x650uLL);
  }
}

void *sub_10025D988@<X0>(void *__dst@<X0>, size_t __n@<X4>, uint64_t a3@<X2>, unint64_t a4@<X3>, void *a5@<X8>)
{
  switch(a4 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v14 = *(void *)(a3 + 16);
      swift_retain();
      swift_retain();
      uint64_t v15 = __DataStorage._bytes.getter();
      if (!v15) {
        goto LABEL_23;
      }
      uint64_t v16 = v15;
      uint64_t v17 = __DataStorage._offset.getter();
      BOOL v18 = __OFSUB__(v14, v17);
      uint64_t v19 = v14 - v17;
      if (v18) {
        goto LABEL_19;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_24;
      }
      memcpy(__dst, (const void *)(v16 + v19), __n);
      swift_release();
      swift_release();
      goto LABEL_15;
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_25;
    default:
      __src[0]  = a3;
      LOWORD(__src[1])  = a4;
      BYTE2(__src[1])  = BYTE2(a4);
      BYTE3(__src[1])  = BYTE3(a4);
      BYTE4(__src[1])  = BYTE4(a4);
      BYTE5(__src[1])  = BYTE5(a4);
      if (!__dst)
      {
        __break(1u);
LABEL_4:
        if ((int)a3 > a3 >> 32)
        {
          __break(1u);
LABEL_19:
          __break(1u);
        }
        else
        {
          sub_100013D44(a3, a4);
          uint64_t v10 = __DataStorage._bytes.getter();
          if (!v10)
          {
            __DataStorage._length.getter();
            if (__dst) {
              goto LABEL_26;
            }
            goto LABEL_22;
          }
          uint64_t v11 = v10;
          uint64_t v12 = __DataStorage._offset.getter();
          uint64_t v13 = (int)a3 - v12;
          if (!__OFSUB__((int)a3, v12))
          {
            __DataStorage._length.getter();
            if (__dst)
            {
              memcpy(__dst, (const void *)(v11 + v13), __n);
              sub_10000C970(a3, a4);
              goto LABEL_15;
            }
LABEL_22:
            __break(1u);
LABEL_23:
            __DataStorage._length.getter();
            if (__dst)
            {
LABEL_27:
              __break(1u);
              JUMPOUT(0x10025DBB8);
            }
LABEL_24:
            __break(1u);
LABEL_25:
            __break(1u);
LABEL_26:
            __break(1u);
            goto LABEL_27;
          }
        }
        __break(1u);
      }
LABEL_14:
      memcpy(__dst, __src, __n);
LABEL_15:
      return memcpy(a5, __dst, 0xF20uLL);
  }
}

double sub_10025DBC8@<D0>(char *__dst@<X0>, size_t __n@<X4>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  switch(a4 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v14 = *(void *)(a3 + 16);
      swift_retain();
      swift_retain();
      uint64_t v15 = __DataStorage._bytes.getter();
      if (!v15) {
        goto LABEL_21;
      }
      uint64_t v16 = v15;
      uint64_t v17 = __DataStorage._offset.getter();
      BOOL v18 = __OFSUB__(v14, v17);
      uint64_t v19 = v14 - v17;
      if (v18) {
        goto LABEL_17;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_22;
      }
      memcpy(__dst, (const void *)(v16 + v19), __n);
      swift_release();
      swift_release();
      goto LABEL_15;
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_23;
    default:
      __src[0]  = a3;
      LOWORD(__src[1])  = a4;
      BYTE2(__src[1])  = BYTE2(a4);
      BYTE3(__src[1])  = BYTE3(a4);
      BYTE4(__src[1])  = BYTE4(a4);
      BYTE5(__src[1])  = BYTE5(a4);
      if (__dst)
      {
LABEL_14:
        memcpy(__dst, __src, __n);
        goto LABEL_15;
      }
      __break(1u);
LABEL_4:
      if ((int)a3 > a3 >> 32)
      {
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      sub_100013D44(a3, a4);
      uint64_t v10 = __DataStorage._bytes.getter();
      if (!v10)
      {
        __DataStorage._length.getter();
        if (__dst) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
      uint64_t v11 = v10;
      uint64_t v12 = __DataStorage._offset.getter();
      uint64_t v13 = (int)a3 - v12;
      if (__OFSUB__((int)a3, v12)) {
LABEL_18:
      }
        __break(1u);
      __DataStorage._length.getter();
      if (!__dst)
      {
LABEL_20:
        __break(1u);
LABEL_21:
        __DataStorage._length.getter();
        if (__dst)
        {
LABEL_25:
          __break(1u);
          JUMPOUT(0x10025DE04);
        }
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      memcpy(__dst, (const void *)(v11 + v13), __n);
      sub_10000C970(a3, a4);
LABEL_15:
      *(_DWORD *)a5  = *(_DWORD *)__dst;
      *(_OWORD *)(a5 + 4)  = *(_OWORD *)(__dst + 4);
      double result = *(double *)(__dst + 20);
      *(double *)(a5 + 20)  = result;
      return result;
  }
}

double sub_10025DE14@<D0>(char *__dst@<X0>, size_t __n@<X4>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  switch(a4 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v14 = *(void *)(a3 + 16);
      swift_retain();
      swift_retain();
      uint64_t v15 = __DataStorage._bytes.getter();
      if (!v15) {
        goto LABEL_21;
      }
      uint64_t v16 = v15;
      uint64_t v17 = __DataStorage._offset.getter();
      BOOL v18 = __OFSUB__(v14, v17);
      uint64_t v19 = v14 - v17;
      if (v18) {
        goto LABEL_17;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_22;
      }
      memcpy(__dst, (const void *)(v16 + v19), __n);
      swift_release();
      swift_release();
      goto LABEL_15;
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_23;
    default:
      __src[0]  = a3;
      LOWORD(__src[1])  = a4;
      BYTE2(__src[1])  = BYTE2(a4);
      BYTE3(__src[1])  = BYTE3(a4);
      BYTE4(__src[1])  = BYTE4(a4);
      BYTE5(__src[1])  = BYTE5(a4);
      if (__dst)
      {
LABEL_14:
        memcpy(__dst, __src, __n);
        goto LABEL_15;
      }
      __break(1u);
LABEL_4:
      if ((int)a3 > a3 >> 32)
      {
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      sub_100013D44(a3, a4);
      uint64_t v10 = __DataStorage._bytes.getter();
      if (!v10)
      {
        __DataStorage._length.getter();
        if (__dst) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
      uint64_t v11 = v10;
      uint64_t v12 = __DataStorage._offset.getter();
      uint64_t v13 = (int)a3 - v12;
      if (__OFSUB__((int)a3, v12)) {
LABEL_18:
      }
        __break(1u);
      __DataStorage._length.getter();
      if (!__dst)
      {
LABEL_20:
        __break(1u);
LABEL_21:
        __DataStorage._length.getter();
        if (__dst)
        {
LABEL_25:
          __break(1u);
          JUMPOUT(0x10025E070);
        }
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      memcpy(__dst, (const void *)(v11 + v13), __n);
      sub_10000C970(a3, a4);
LABEL_15:
      __int16 v20 = *((_WORD *)__dst + 16);
      char v21 = __dst[34];
      int v22 = *((_DWORD *)__dst + 15);
      int v23 = *((_DWORD *)__dst + 16);
      __int16 v24 = *((_WORD *)__dst + 34);
      long long v25 = *((_OWORD *)__dst + 1);
      *(_OWORD *)a5  = *(_OWORD *)__dst;
      *(_OWORD *)(a5 + 16)  = v25;
      *(_WORD *)(a5 + 32)  = v20;
      *(unsigned char *)(a5 + 34)  = v21;
      *(_OWORD *)(a5 + 36)  = *(_OWORD *)(__dst + 36);
      double result = *(double *)(__dst + 52);
      *(double *)(a5 + 52)  = result;
      *(_DWORD *)(a5 + 60)  = v22;
      *(_DWORD *)(a5 + 64)  = v23;
      *(_WORD *)(a5 + 68)  = v24;
      return result;
  }
}

void *sub_10025E080@<X0>(void *__dst@<X0>, size_t __n@<X4>, uint64_t a3@<X2>, unint64_t a4@<X3>, void *a5@<X8>)
{
  switch(a4 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v14 = *(void *)(a3 + 16);
      swift_retain();
      swift_retain();
      uint64_t v15 = __DataStorage._bytes.getter();
      if (!v15) {
        goto LABEL_23;
      }
      uint64_t v16 = v15;
      uint64_t v17 = __DataStorage._offset.getter();
      BOOL v18 = __OFSUB__(v14, v17);
      uint64_t v19 = v14 - v17;
      if (v18) {
        goto LABEL_19;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_24;
      }
      memcpy(__dst, (const void *)(v16 + v19), __n);
      swift_release();
      swift_release();
      goto LABEL_15;
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_25;
    default:
      __src[0]  = a3;
      LOWORD(__src[1])  = a4;
      BYTE2(__src[1])  = BYTE2(a4);
      BYTE3(__src[1])  = BYTE3(a4);
      BYTE4(__src[1])  = BYTE4(a4);
      BYTE5(__src[1])  = BYTE5(a4);
      if (!__dst)
      {
        __break(1u);
LABEL_4:
        if ((int)a3 > a3 >> 32)
        {
          __break(1u);
LABEL_19:
          __break(1u);
        }
        else
        {
          sub_100013D44(a3, a4);
          uint64_t v10 = __DataStorage._bytes.getter();
          if (!v10)
          {
            __DataStorage._length.getter();
            if (__dst) {
              goto LABEL_26;
            }
            goto LABEL_22;
          }
          uint64_t v11 = v10;
          uint64_t v12 = __DataStorage._offset.getter();
          uint64_t v13 = (int)a3 - v12;
          if (!__OFSUB__((int)a3, v12))
          {
            __DataStorage._length.getter();
            if (__dst)
            {
              memcpy(__dst, (const void *)(v11 + v13), __n);
              sub_10000C970(a3, a4);
              goto LABEL_15;
            }
LABEL_22:
            __break(1u);
LABEL_23:
            __DataStorage._length.getter();
            if (__dst)
            {
LABEL_27:
              __break(1u);
              JUMPOUT(0x10025E2B0);
            }
LABEL_24:
            __break(1u);
LABEL_25:
            __break(1u);
LABEL_26:
            __break(1u);
            goto LABEL_27;
          }
        }
        __break(1u);
      }
LABEL_14:
      memcpy(__dst, __src, __n);
LABEL_15:
      return memcpy(a5, __dst, 0x3E1uLL);
  }
}

double sub_10025E2C0@<D0>(char *__dst@<X0>, size_t __n@<X4>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  switch(a4 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v14 = *(void *)(a3 + 16);
      swift_retain();
      swift_retain();
      uint64_t v15 = __DataStorage._bytes.getter();
      if (!v15) {
        goto LABEL_21;
      }
      uint64_t v16 = v15;
      uint64_t v17 = __DataStorage._offset.getter();
      BOOL v18 = __OFSUB__(v14, v17);
      uint64_t v19 = v14 - v17;
      if (v18) {
        goto LABEL_17;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_22;
      }
      memcpy(__dst, (const void *)(v16 + v19), __n);
      swift_release();
      swift_release();
      goto LABEL_15;
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_23;
    default:
      __src[0]  = a3;
      LOWORD(__src[1])  = a4;
      BYTE2(__src[1])  = BYTE2(a4);
      BYTE3(__src[1])  = BYTE3(a4);
      BYTE4(__src[1])  = BYTE4(a4);
      BYTE5(__src[1])  = BYTE5(a4);
      if (__dst)
      {
LABEL_14:
        memcpy(__dst, __src, __n);
        goto LABEL_15;
      }
      __break(1u);
LABEL_4:
      if ((int)a3 > a3 >> 32)
      {
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      sub_100013D44(a3, a4);
      uint64_t v10 = __DataStorage._bytes.getter();
      if (!v10)
      {
        __DataStorage._length.getter();
        if (__dst) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
      uint64_t v11 = v10;
      uint64_t v12 = __DataStorage._offset.getter();
      uint64_t v13 = (int)a3 - v12;
      if (__OFSUB__((int)a3, v12)) {
LABEL_18:
      }
        __break(1u);
      __DataStorage._length.getter();
      if (!__dst)
      {
LABEL_20:
        __break(1u);
LABEL_21:
        __DataStorage._length.getter();
        if (__dst)
        {
LABEL_25:
          __break(1u);
          JUMPOUT(0x10025E504);
        }
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      memcpy(__dst, (const void *)(v11 + v13), __n);
      sub_10000C970(a3, a4);
LABEL_15:
      char v20 = __dst[16];
      __int16 v21 = *((_WORD *)__dst + 14);
      *(_OWORD *)a5  = *(_OWORD *)__dst;
      *(unsigned char *)(a5 + 16)  = v20;
      double result = *(double *)(__dst + 20);
      *(double *)(a5 + 20)  = result;
      *(_WORD *)(a5 + 28)  = v21;
      return result;
  }
}

double sub_10025E514@<D0>(char *__dst@<X0>, size_t __n@<X4>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  switch(a4 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v14 = *(void *)(a3 + 16);
      swift_retain();
      swift_retain();
      uint64_t v15 = __DataStorage._bytes.getter();
      if (!v15) {
        goto LABEL_21;
      }
      uint64_t v16 = v15;
      uint64_t v17 = __DataStorage._offset.getter();
      BOOL v18 = __OFSUB__(v14, v17);
      uint64_t v19 = v14 - v17;
      if (v18) {
        goto LABEL_17;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_22;
      }
      memcpy(__dst, (const void *)(v16 + v19), __n);
      swift_release();
      swift_release();
      goto LABEL_15;
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_23;
    default:
      __src[0]  = a3;
      LOWORD(__src[1])  = a4;
      BYTE2(__src[1])  = BYTE2(a4);
      BYTE3(__src[1])  = BYTE3(a4);
      BYTE4(__src[1])  = BYTE4(a4);
      BYTE5(__src[1])  = BYTE5(a4);
      if (__dst)
      {
LABEL_14:
        memcpy(__dst, __src, __n);
        goto LABEL_15;
      }
      __break(1u);
LABEL_4:
      if ((int)a3 > a3 >> 32)
      {
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      sub_100013D44(a3, a4);
      uint64_t v10 = __DataStorage._bytes.getter();
      if (!v10)
      {
        __DataStorage._length.getter();
        if (__dst) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
      uint64_t v11 = v10;
      uint64_t v12 = __DataStorage._offset.getter();
      uint64_t v13 = (int)a3 - v12;
      if (__OFSUB__((int)a3, v12)) {
LABEL_18:
      }
        __break(1u);
      __DataStorage._length.getter();
      if (!__dst)
      {
LABEL_20:
        __break(1u);
LABEL_21:
        __DataStorage._length.getter();
        if (__dst)
        {
LABEL_25:
          __break(1u);
          JUMPOUT(0x10025E758);
        }
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      memcpy(__dst, (const void *)(v11 + v13), __n);
      sub_10000C970(a3, a4);
LABEL_15:
      __int16 v20 = *((_WORD *)__dst + 8);
      *(_WORD *)a5  = *(_WORD *)__dst;
      double result = *(double *)(__dst + 4);
      *(double *)(a5 + 4)  = result;
      *(_DWORD *)(a5 + 12)  = *((_DWORD *)__dst + 3);
      *(_WORD *)(a5 + 16)  = v20;
      return result;
  }
}

__n128 sub_10025E768@<Q0>(__n128 *__dst@<X0>, size_t __n@<X4>, uint64_t a3@<X2>, unint64_t a4@<X3>, __n128 *a5@<X8>)
{
  switch(a4 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v14 = *(void *)(a3 + 16);
      swift_retain();
      swift_retain();
      uint64_t v15 = __DataStorage._bytes.getter();
      if (!v15) {
        goto LABEL_21;
      }
      uint64_t v16 = v15;
      uint64_t v17 = __DataStorage._offset.getter();
      BOOL v18 = __OFSUB__(v14, v17);
      uint64_t v19 = v14 - v17;
      if (v18) {
        goto LABEL_17;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_22;
      }
      memcpy(__dst, (const void *)(v16 + v19), __n);
      swift_release();
      swift_release();
      goto LABEL_15;
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_23;
    default:
      __src[0]  = a3;
      LOWORD(__src[1])  = a4;
      BYTE2(__src[1])  = BYTE2(a4);
      BYTE3(__src[1])  = BYTE3(a4);
      BYTE4(__src[1])  = BYTE4(a4);
      BYTE5(__src[1])  = BYTE5(a4);
      if (__dst)
      {
LABEL_14:
        memcpy(__dst, __src, __n);
        goto LABEL_15;
      }
      __break(1u);
LABEL_4:
      if ((int)a3 > a3 >> 32)
      {
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      sub_100013D44(a3, a4);
      uint64_t v10 = __DataStorage._bytes.getter();
      if (!v10)
      {
        __DataStorage._length.getter();
        if (__dst) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
      uint64_t v11 = v10;
      uint64_t v12 = __DataStorage._offset.getter();
      uint64_t v13 = (int)a3 - v12;
      if (__OFSUB__((int)a3, v12)) {
LABEL_18:
      }
        __break(1u);
      __DataStorage._length.getter();
      if (!__dst)
      {
LABEL_20:
        __break(1u);
LABEL_21:
        __DataStorage._length.getter();
        if (__dst)
        {
LABEL_25:
          __break(1u);
          JUMPOUT(0x10025E99CLL);
        }
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      memcpy(__dst, (const void *)(v11 + v13), __n);
      sub_10000C970(a3, a4);
LABEL_15:
      unsigned __int32 v20 = __dst[1].n128_u32[0];
      __n128 result = *__dst;
      *a5  = *__dst;
      a5[1].n128_u32[0]  = v20;
      return result;
  }
}

__n128 sub_10025E9AC@<Q0>(char *__dst@<X0>, size_t __n@<X4>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  switch(a4 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v14 = *(void *)(a3 + 16);
      swift_retain();
      swift_retain();
      uint64_t v15 = __DataStorage._bytes.getter();
      if (!v15) {
        goto LABEL_21;
      }
      uint64_t v16 = v15;
      uint64_t v17 = __DataStorage._offset.getter();
      BOOL v18 = __OFSUB__(v14, v17);
      uint64_t v19 = v14 - v17;
      if (v18) {
        goto LABEL_17;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_22;
      }
      memcpy(__dst, (const void *)(v16 + v19), __n);
      swift_release();
      swift_release();
      goto LABEL_15;
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_23;
    default:
      __src[0]  = a3;
      LOWORD(__src[1])  = a4;
      BYTE2(__src[1])  = BYTE2(a4);
      BYTE3(__src[1])  = BYTE3(a4);
      BYTE4(__src[1])  = BYTE4(a4);
      BYTE5(__src[1])  = BYTE5(a4);
      if (__dst)
      {
LABEL_14:
        memcpy(__dst, __src, __n);
        goto LABEL_15;
      }
      __break(1u);
LABEL_4:
      if ((int)a3 > a3 >> 32)
      {
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      sub_100013D44(a3, a4);
      uint64_t v10 = __DataStorage._bytes.getter();
      if (!v10)
      {
        __DataStorage._length.getter();
        if (__dst) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
      uint64_t v11 = v10;
      uint64_t v12 = __DataStorage._offset.getter();
      uint64_t v13 = (int)a3 - v12;
      if (__OFSUB__((int)a3, v12)) {
LABEL_18:
      }
        __break(1u);
      __DataStorage._length.getter();
      if (!__dst)
      {
LABEL_20:
        __break(1u);
LABEL_21:
        __DataStorage._length.getter();
        if (__dst)
        {
LABEL_25:
          __break(1u);
          JUMPOUT(0x10025EBF0);
        }
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      memcpy(__dst, (const void *)(v11 + v13), __n);
      sub_10000C970(a3, a4);
LABEL_15:
      int v20 = *((_DWORD *)__dst + 1);
      __int16 v21 = *((_WORD *)__dst + 12);
      *(_WORD *)a5  = *(_WORD *)__dst;
      *(_DWORD *)(a5 + 4)  = v20;
      __n128 result = *(__n128 *)(__dst + 8);
      *(__n128 *)(a5 + 8)  = result;
      *(_WORD *)(a5 + 24)  = v21;
      return result;
  }
}

void *sub_10025EC00@<X0>(void *__dst@<X0>, size_t __n@<X4>, uint64_t a3@<X2>, unint64_t a4@<X3>, void *a5@<X8>)
{
  switch(a4 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v14 = *(void *)(a3 + 16);
      swift_retain();
      swift_retain();
      uint64_t v15 = __DataStorage._bytes.getter();
      if (!v15) {
        goto LABEL_23;
      }
      uint64_t v16 = v15;
      uint64_t v17 = __DataStorage._offset.getter();
      BOOL v18 = __OFSUB__(v14, v17);
      uint64_t v19 = v14 - v17;
      if (v18) {
        goto LABEL_19;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_24;
      }
      memcpy(__dst, (const void *)(v16 + v19), __n);
      swift_release();
      swift_release();
      goto LABEL_15;
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_25;
    default:
      __src[0]  = a3;
      LOWORD(__src[1])  = a4;
      BYTE2(__src[1])  = BYTE2(a4);
      BYTE3(__src[1])  = BYTE3(a4);
      BYTE4(__src[1])  = BYTE4(a4);
      BYTE5(__src[1])  = BYTE5(a4);
      if (!__dst)
      {
        __break(1u);
LABEL_4:
        if ((int)a3 > a3 >> 32)
        {
          __break(1u);
LABEL_19:
          __break(1u);
        }
        else
        {
          sub_100013D44(a3, a4);
          uint64_t v10 = __DataStorage._bytes.getter();
          if (!v10)
          {
            __DataStorage._length.getter();
            if (__dst) {
              goto LABEL_26;
            }
            goto LABEL_22;
          }
          uint64_t v11 = v10;
          uint64_t v12 = __DataStorage._offset.getter();
          uint64_t v13 = (int)a3 - v12;
          if (!__OFSUB__((int)a3, v12))
          {
            __DataStorage._length.getter();
            if (__dst)
            {
              memcpy(__dst, (const void *)(v11 + v13), __n);
              sub_10000C970(a3, a4);
              goto LABEL_15;
            }
LABEL_22:
            __break(1u);
LABEL_23:
            __DataStorage._length.getter();
            if (__dst)
            {
LABEL_27:
              __break(1u);
              JUMPOUT(0x10025EE30);
            }
LABEL_24:
            __break(1u);
LABEL_25:
            __break(1u);
LABEL_26:
            __break(1u);
            goto LABEL_27;
          }
        }
        __break(1u);
      }
LABEL_14:
      memcpy(__dst, __src, __n);
LABEL_15:
      return memcpy(a5, __dst, 0x820uLL);
  }
}

double sub_10025EE40@<D0>(double *__dst@<X0>, size_t __n@<X4>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  switch(a4 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v14 = *(void *)(a3 + 16);
      swift_retain();
      swift_retain();
      uint64_t v15 = __DataStorage._bytes.getter();
      if (!v15) {
        goto LABEL_21;
      }
      uint64_t v16 = v15;
      uint64_t v17 = __DataStorage._offset.getter();
      BOOL v18 = __OFSUB__(v14, v17);
      uint64_t v19 = v14 - v17;
      if (v18) {
        goto LABEL_17;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_22;
      }
      memcpy(__dst, (const void *)(v16 + v19), __n);
      swift_release();
      swift_release();
      goto LABEL_15;
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_23;
    default:
      __src[0]  = a3;
      LOWORD(__src[1])  = a4;
      BYTE2(__src[1])  = BYTE2(a4);
      BYTE3(__src[1])  = BYTE3(a4);
      BYTE4(__src[1])  = BYTE4(a4);
      BYTE5(__src[1])  = BYTE5(a4);
      if (__dst)
      {
LABEL_14:
        memcpy(__dst, __src, __n);
        goto LABEL_15;
      }
      __break(1u);
LABEL_4:
      if ((int)a3 > a3 >> 32)
      {
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      sub_100013D44(a3, a4);
      uint64_t v10 = __DataStorage._bytes.getter();
      if (!v10)
      {
        __DataStorage._length.getter();
        if (__dst) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
      uint64_t v11 = v10;
      uint64_t v12 = __DataStorage._offset.getter();
      uint64_t v13 = (int)a3 - v12;
      if (__OFSUB__((int)a3, v12)) {
LABEL_18:
      }
        __break(1u);
      __DataStorage._length.getter();
      if (!__dst)
      {
LABEL_20:
        __break(1u);
LABEL_21:
        __DataStorage._length.getter();
        if (__dst)
        {
LABEL_25:
          __break(1u);
          JUMPOUT(0x10025F074);
        }
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      memcpy(__dst, (const void *)(v11 + v13), __n);
      sub_10000C970(a3, a4);
LABEL_15:
      double result = *__dst;
      *(double *)a5  = *__dst;
      int v21 = *((_DWORD *)__dst + 3);
      *(_DWORD *)(a5 + 8)  = *((_DWORD *)__dst + 2);
      *(_DWORD *)(a5 + 12)  = v21;
      return result;
  }
}

__n128 sub_10025F084@<Q0>(__n128 *__dst@<X0>, size_t __n@<X4>, uint64_t a3@<X2>, unint64_t a4@<X3>, __n128 *a5@<X8>)
{
  switch(a4 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v14 = *(void *)(a3 + 16);
      swift_retain();
      swift_retain();
      uint64_t v15 = __DataStorage._bytes.getter();
      if (!v15) {
        goto LABEL_21;
      }
      uint64_t v16 = v15;
      uint64_t v17 = __DataStorage._offset.getter();
      BOOL v18 = __OFSUB__(v14, v17);
      uint64_t v19 = v14 - v17;
      if (v18) {
        goto LABEL_17;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_22;
      }
      memcpy(__dst, (const void *)(v16 + v19), __n);
      swift_release();
      swift_release();
      goto LABEL_15;
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_23;
    default:
      __src[0]  = a3;
      LOWORD(__src[1])  = a4;
      BYTE2(__src[1])  = BYTE2(a4);
      BYTE3(__src[1])  = BYTE3(a4);
      BYTE4(__src[1])  = BYTE4(a4);
      BYTE5(__src[1])  = BYTE5(a4);
      if (__dst)
      {
LABEL_14:
        memcpy(__dst, __src, __n);
        goto LABEL_15;
      }
      __break(1u);
LABEL_4:
      if ((int)a3 > a3 >> 32)
      {
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      sub_100013D44(a3, a4);
      uint64_t v10 = __DataStorage._bytes.getter();
      if (!v10)
      {
        __DataStorage._length.getter();
        if (__dst) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
      uint64_t v11 = v10;
      uint64_t v12 = __DataStorage._offset.getter();
      uint64_t v13 = (int)a3 - v12;
      if (__OFSUB__((int)a3, v12)) {
LABEL_18:
      }
        __break(1u);
      __DataStorage._length.getter();
      if (!__dst)
      {
LABEL_20:
        __break(1u);
LABEL_21:
        __DataStorage._length.getter();
        if (__dst)
        {
LABEL_25:
          __break(1u);
          JUMPOUT(0x10025F2C0);
        }
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      memcpy(__dst, (const void *)(v11 + v13), __n);
      sub_10000C970(a3, a4);
LABEL_15:
      unsigned __int16 v20 = __dst[1].n128_u16[2];
      __n128 result = *__dst;
      *a5  = *__dst;
      a5[1].n128_u32[0]  = __dst[1].n128_u32[0];
      a5[1].n128_u16[2]  = v20;
      return result;
  }
}

double sub_10025F2D0@<D0>(double *__dst@<X0>, size_t __n@<X4>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  switch(a4 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v14 = *(void *)(a3 + 16);
      swift_retain();
      swift_retain();
      uint64_t v15 = __DataStorage._bytes.getter();
      if (!v15) {
        goto LABEL_21;
      }
      uint64_t v16 = v15;
      uint64_t v17 = __DataStorage._offset.getter();
      BOOL v18 = __OFSUB__(v14, v17);
      uint64_t v19 = v14 - v17;
      if (v18) {
        goto LABEL_17;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_22;
      }
      memcpy(__dst, (const void *)(v16 + v19), __n);
      swift_release();
      swift_release();
      goto LABEL_15;
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_23;
    default:
      __src[0]  = a3;
      LOWORD(__src[1])  = a4;
      BYTE2(__src[1])  = BYTE2(a4);
      BYTE3(__src[1])  = BYTE3(a4);
      BYTE4(__src[1])  = BYTE4(a4);
      BYTE5(__src[1])  = BYTE5(a4);
      if (__dst)
      {
LABEL_14:
        memcpy(__dst, __src, __n);
        goto LABEL_15;
      }
      __break(1u);
LABEL_4:
      if ((int)a3 > a3 >> 32)
      {
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      sub_100013D44(a3, a4);
      uint64_t v10 = __DataStorage._bytes.getter();
      if (!v10)
      {
        __DataStorage._length.getter();
        if (__dst) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
      uint64_t v11 = v10;
      uint64_t v12 = __DataStorage._offset.getter();
      uint64_t v13 = (int)a3 - v12;
      if (__OFSUB__((int)a3, v12)) {
LABEL_18:
      }
        __break(1u);
      __DataStorage._length.getter();
      if (!__dst)
      {
LABEL_20:
        __break(1u);
LABEL_21:
        __DataStorage._length.getter();
        if (__dst)
        {
LABEL_25:
          __break(1u);
          JUMPOUT(0x10025F51CLL);
        }
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      memcpy(__dst, (const void *)(v11 + v13), __n);
      sub_10000C970(a3, a4);
LABEL_15:
      __int16 v20 = *((_WORD *)__dst + 6);
      char v21 = *((unsigned char *)__dst + 14);
      __int16 v22 = *((_WORD *)__dst + 8);
      double result = *__dst;
      *(double *)a5  = *__dst;
      *(_DWORD *)(a5 + 8)  = *((_DWORD *)__dst + 2);
      *(_WORD *)(a5 + 12)  = v20;
      *(unsigned char *)(a5 + 14)  = v21;
      *(_WORD *)(a5 + 16)  = v22;
      return result;
  }
}

double sub_10025F52C@<D0>(char *__dst@<X0>, size_t __n@<X4>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  switch(a4 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v14 = *(void *)(a3 + 16);
      swift_retain();
      swift_retain();
      uint64_t v15 = __DataStorage._bytes.getter();
      if (!v15) {
        goto LABEL_21;
      }
      uint64_t v16 = v15;
      uint64_t v17 = __DataStorage._offset.getter();
      BOOL v18 = __OFSUB__(v14, v17);
      uint64_t v19 = v14 - v17;
      if (v18) {
        goto LABEL_17;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_22;
      }
      memcpy(__dst, (const void *)(v16 + v19), __n);
      swift_release();
      swift_release();
      goto LABEL_15;
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_23;
    default:
      __src[0]  = a3;
      LOWORD(__src[1])  = a4;
      BYTE2(__src[1])  = BYTE2(a4);
      BYTE3(__src[1])  = BYTE3(a4);
      BYTE4(__src[1])  = BYTE4(a4);
      BYTE5(__src[1])  = BYTE5(a4);
      if (__dst)
      {
LABEL_14:
        memcpy(__dst, __src, __n);
        goto LABEL_15;
      }
      __break(1u);
LABEL_4:
      if ((int)a3 > a3 >> 32)
      {
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      sub_100013D44(a3, a4);
      uint64_t v10 = __DataStorage._bytes.getter();
      if (!v10)
      {
        __DataStorage._length.getter();
        if (__dst) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
      uint64_t v11 = v10;
      uint64_t v12 = __DataStorage._offset.getter();
      uint64_t v13 = (int)a3 - v12;
      if (__OFSUB__((int)a3, v12)) {
LABEL_18:
      }
        __break(1u);
      __DataStorage._length.getter();
      if (!__dst)
      {
LABEL_20:
        __break(1u);
LABEL_21:
        __DataStorage._length.getter();
        if (__dst)
        {
LABEL_25:
          __break(1u);
          JUMPOUT(0x10025F778);
        }
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      memcpy(__dst, (const void *)(v11 + v13), __n);
      sub_10000C970(a3, a4);
LABEL_15:
      char v20 = __dst[8];
      int v21 = *((_DWORD *)__dst + 5);
      __int16 v22 = *((_WORD *)__dst + 12);
      *(void *)a5  = *(void *)__dst;
      *(unsigned char *)(a5 + 8)  = v20;
      double result = *(double *)(__dst + 12);
      *(double *)(a5 + 12)  = result;
      *(_DWORD *)(a5 + 20)  = v21;
      *(_WORD *)(a5 + 24)  = v22;
      return result;
  }
}

double sub_10025F788@<D0>(char *__dst@<X0>, size_t __n@<X4>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  switch(a4 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v14 = *(void *)(a3 + 16);
      swift_retain();
      swift_retain();
      uint64_t v15 = __DataStorage._bytes.getter();
      if (!v15) {
        goto LABEL_21;
      }
      uint64_t v16 = v15;
      uint64_t v17 = __DataStorage._offset.getter();
      BOOL v18 = __OFSUB__(v14, v17);
      uint64_t v19 = v14 - v17;
      if (v18) {
        goto LABEL_17;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_22;
      }
      memcpy(__dst, (const void *)(v16 + v19), __n);
      swift_release();
      swift_release();
      goto LABEL_15;
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_23;
    default:
      __src[0]  = a3;
      LOWORD(__src[1])  = a4;
      BYTE2(__src[1])  = BYTE2(a4);
      BYTE3(__src[1])  = BYTE3(a4);
      BYTE4(__src[1])  = BYTE4(a4);
      BYTE5(__src[1])  = BYTE5(a4);
      if (__dst)
      {
LABEL_14:
        memcpy(__dst, __src, __n);
        goto LABEL_15;
      }
      __break(1u);
LABEL_4:
      if ((int)a3 > a3 >> 32)
      {
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      sub_100013D44(a3, a4);
      uint64_t v10 = __DataStorage._bytes.getter();
      if (!v10)
      {
        __DataStorage._length.getter();
        if (__dst) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
      uint64_t v11 = v10;
      uint64_t v12 = __DataStorage._offset.getter();
      uint64_t v13 = (int)a3 - v12;
      if (__OFSUB__((int)a3, v12)) {
LABEL_18:
      }
        __break(1u);
      __DataStorage._length.getter();
      if (!__dst)
      {
LABEL_20:
        __break(1u);
LABEL_21:
        __DataStorage._length.getter();
        if (__dst)
        {
LABEL_25:
          __break(1u);
          JUMPOUT(0x10025F9D4);
        }
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      memcpy(__dst, (const void *)(v11 + v13), __n);
      sub_10000C970(a3, a4);
LABEL_15:
      char v20 = __dst[8];
      int v21 = *((_DWORD *)__dst + 5);
      __int16 v22 = *((_WORD *)__dst + 12);
      *(void *)a5  = *(void *)__dst;
      *(unsigned char *)(a5 + 8)  = v20;
      double result = *(double *)(__dst + 12);
      *(double *)(a5 + 12)  = result;
      *(_DWORD *)(a5 + 20)  = v21;
      *(_WORD *)(a5 + 24)  = v22;
      return result;
  }
}

double sub_10025F9E4@<D0>(double *__dst@<X0>, size_t __n@<X4>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  switch(a4 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v14 = *(void *)(a3 + 16);
      swift_retain();
      swift_retain();
      uint64_t v15 = __DataStorage._bytes.getter();
      if (!v15) {
        goto LABEL_21;
      }
      uint64_t v16 = v15;
      uint64_t v17 = __DataStorage._offset.getter();
      BOOL v18 = __OFSUB__(v14, v17);
      uint64_t v19 = v14 - v17;
      if (v18) {
        goto LABEL_17;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_22;
      }
      memcpy(__dst, (const void *)(v16 + v19), __n);
      swift_release();
      swift_release();
      goto LABEL_15;
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_23;
    default:
      __src[0]  = a3;
      LOWORD(__src[1])  = a4;
      BYTE2(__src[1])  = BYTE2(a4);
      BYTE3(__src[1])  = BYTE3(a4);
      BYTE4(__src[1])  = BYTE4(a4);
      BYTE5(__src[1])  = BYTE5(a4);
      if (__dst)
      {
LABEL_14:
        memcpy(__dst, __src, __n);
        goto LABEL_15;
      }
      __break(1u);
LABEL_4:
      if ((int)a3 > a3 >> 32)
      {
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      sub_100013D44(a3, a4);
      uint64_t v10 = __DataStorage._bytes.getter();
      if (!v10)
      {
        __DataStorage._length.getter();
        if (__dst) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
      uint64_t v11 = v10;
      uint64_t v12 = __DataStorage._offset.getter();
      uint64_t v13 = (int)a3 - v12;
      if (__OFSUB__((int)a3, v12)) {
LABEL_18:
      }
        __break(1u);
      __DataStorage._length.getter();
      if (!__dst)
      {
LABEL_20:
        __break(1u);
LABEL_21:
        __DataStorage._length.getter();
        if (__dst)
        {
LABEL_25:
          __break(1u);
          JUMPOUT(0x10025FC20);
        }
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      memcpy(__dst, (const void *)(v11 + v13), __n);
      sub_10000C970(a3, a4);
LABEL_15:
      int v20 = *((_DWORD *)__dst + 4);
      double result = *__dst;
      uint64_t v22 = *((void *)__dst + 1);
      *(double *)a5  = *__dst;
      *(void *)(a5 + 8)  = v22;
      *(_DWORD *)(a5 + 16)  = v20;
      *(_DWORD *)(a5 + 20)  = *((_DWORD *)__dst + 5);
      return result;
  }
}

double sub_10025FC30@<D0>(double *__dst@<X0>, size_t __n@<X4>, uint64_t a3@<X2>, unint64_t a4@<X3>, void *a5@<X8>)
{
  switch(a4 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v14 = *(void *)(a3 + 16);
      swift_retain();
      swift_retain();
      uint64_t v15 = __DataStorage._bytes.getter();
      if (!v15) {
        goto LABEL_21;
      }
      uint64_t v16 = v15;
      uint64_t v17 = __DataStorage._offset.getter();
      BOOL v18 = __OFSUB__(v14, v17);
      uint64_t v19 = v14 - v17;
      if (v18) {
        goto LABEL_17;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_22;
      }
      memcpy(__dst, (const void *)(v16 + v19), __n);
      swift_release();
      swift_release();
      goto LABEL_15;
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_23;
    default:
      __src[0]  = a3;
      LOWORD(__src[1])  = a4;
      BYTE2(__src[1])  = BYTE2(a4);
      BYTE3(__src[1])  = BYTE3(a4);
      BYTE4(__src[1])  = BYTE4(a4);
      BYTE5(__src[1])  = BYTE5(a4);
      if (__dst)
      {
LABEL_14:
        memcpy(__dst, __src, __n);
        goto LABEL_15;
      }
      __break(1u);
LABEL_4:
      if ((int)a3 > a3 >> 32)
      {
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      sub_100013D44(a3, a4);
      uint64_t v10 = __DataStorage._bytes.getter();
      if (!v10)
      {
        __DataStorage._length.getter();
        if (__dst) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
      uint64_t v11 = v10;
      uint64_t v12 = __DataStorage._offset.getter();
      uint64_t v13 = (int)a3 - v12;
      if (__OFSUB__((int)a3, v12)) {
LABEL_18:
      }
        __break(1u);
      __DataStorage._length.getter();
      if (!__dst)
      {
LABEL_20:
        __break(1u);
LABEL_21:
        __DataStorage._length.getter();
        if (__dst)
        {
LABEL_25:
          __break(1u);
          JUMPOUT(0x10025FE5CLL);
        }
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      memcpy(__dst, (const void *)(v11 + v13), __n);
      sub_10000C970(a3, a4);
LABEL_15:
      double result = *__dst;
      *a5  = *(void *)__dst;
      return result;
  }
}

uint64_t sub_10025FE6C()
{
  return WiFiAddress.description.getter(*v0 | ((unint64_t)*(unsigned int *)(v0 + 1) << 16));
}

uint64_t WiFiAddress.customMirror.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2 = a1;
  v16[1]  = a2;
  unint64_t v3 = a1 >> 8;
  unint64_t v4 = a1 >> 16;
  unint64_t v5 = a1 >> 24;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = a1 >> 40;
  uint64_t v8 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100480650);
  __chkstk_darwin();
  uint64_t v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v17 = v2;
  char v18 = v3;
  char v19 = v4;
  char v20 = v5;
  char v21 = v6;
  char v22 = v7;
  void v16[2] = _swiftEmptyArrayStorage;
  uint64_t v14 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for Mirror.AncestorRepresentation.generated(_:), v8);
  sub_100010BCC(&qword_10047DC10);
  sub_100074578();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t sub_100260060()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  unint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100480650);
  __chkstk_darwin();
  unint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOWORD(v5)  = *((_WORD *)v0 + 2);
  int v10 = *v0;
  __int16 v11 = v5;
  uint64_t v9 = _swiftEmptyArrayStorage;
  uint64_t v7 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for Mirror.AncestorRepresentation.generated(_:), v1);
  sub_100010BCC(&qword_10047DC10);
  sub_100074578();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

BOOL static WiFiAddress.!= infix(_:_:)(uint64_t a1, uint64_t a2)
{
  LOBYTE(v5)  = BYTE4(a1);
  HIBYTE(v5)  = BYTE5(a1);
  LOBYTE(v4)  = BYTE4(a2);
  HIBYTE(v4)  = BYTE5(a2);
  return a1 != a2 || v5 != v4;
}

uint64_t static WiFiAddress.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  LOWORD(v8)  = a1;
  BYTE2(v8)  = BYTE2(a1);
  HIBYTE(v8)  = BYTE3(a1);
  LOBYTE(v9)  = BYTE4(a1);
  HIBYTE(v9)  = BYTE5(a1);
  LOWORD(v6)  = a2;
  BYTE2(v6)  = BYTE2(a2);
  HIBYTE(v6)  = BYTE3(a2);
  LOBYTE(v7)  = BYTE4(a2);
  HIBYTE(v7)  = BYTE5(a2);
  unsigned int v2 = bswap32(v8);
  unsigned int v3 = bswap32(v6);
  if (v2 == v3 && (v2 = bswap32(v9) >> 16, unsigned int v3 = bswap32(v7) >> 16, v2 == v3))
  {
    unsigned int v4 = 0;
  }
  else if (v2 < v3)
  {
    unsigned int v4 = -1;
  }
  else
  {
    unsigned int v4 = 1;
  }
  return v4 >> 31;
}

BOOL static WiFiAddress.> infix(_:_:)(uint64_t a1, uint64_t a2)
{
  LOWORD(v8)  = a1;
  BYTE2(v8)  = BYTE2(a1);
  HIBYTE(v8)  = BYTE3(a1);
  LOBYTE(v9)  = BYTE4(a1);
  HIBYTE(v9)  = BYTE5(a1);
  LOWORD(v6)  = a2;
  BYTE2(v6)  = BYTE2(a2);
  HIBYTE(v6)  = BYTE3(a2);
  LOBYTE(v7)  = BYTE4(a2);
  HIBYTE(v7)  = BYTE5(a2);
  unsigned int v2 = bswap32(v8);
  unsigned int v3 = bswap32(v6);
  if (v2 == v3 && (v2 = bswap32(v9) >> 16, unsigned int v3 = bswap32(v7) >> 16, v2 == v3))
  {
    int v4 = 0;
  }
  else if (v2 < v3)
  {
    int v4 = -1;
  }
  else
  {
    int v4 = 1;
  }
  return v4 > 0;
}

BOOL static WiFiAddress.<= infix(_:_:)(uint64_t a1, uint64_t a2)
{
  LOWORD(v8)  = a1;
  BYTE2(v8)  = BYTE2(a1);
  HIBYTE(v8)  = BYTE3(a1);
  LOBYTE(v9)  = BYTE4(a1);
  HIBYTE(v9)  = BYTE5(a1);
  LOWORD(v6)  = a2;
  BYTE2(v6)  = BYTE2(a2);
  HIBYTE(v6)  = BYTE3(a2);
  LOBYTE(v7)  = BYTE4(a2);
  HIBYTE(v7)  = BYTE5(a2);
  unsigned int v2 = bswap32(v8);
  unsigned int v3 = bswap32(v6);
  if (v2 == v3 && (v2 = bswap32(v9) >> 16, unsigned int v3 = bswap32(v7) >> 16, v2 == v3))
  {
    int v4 = 0;
  }
  else if (v2 < v3)
  {
    int v4 = -1;
  }
  else
  {
    int v4 = 1;
  }
  return v4 < 1;
}

BOOL static WiFiAddress.>= infix(_:_:)(uint64_t a1, uint64_t a2)
{
  LOWORD(v8)  = a1;
  BYTE2(v8)  = BYTE2(a1);
  HIBYTE(v8)  = BYTE3(a1);
  LOBYTE(v9)  = BYTE4(a1);
  HIBYTE(v9)  = BYTE5(a1);
  LOWORD(v6)  = a2;
  BYTE2(v6)  = BYTE2(a2);
  HIBYTE(v6)  = BYTE3(a2);
  LOBYTE(v7)  = BYTE4(a2);
  HIBYTE(v7)  = BYTE5(a2);
  unsigned int v2 = bswap32(v8);
  unsigned int v3 = bswap32(v6);
  if (v2 == v3 && (v2 = bswap32(v9) >> 16, unsigned int v3 = bswap32(v7) >> 16, v2 == v3))
  {
    int v4 = 0;
  }
  else if (v2 < v3)
  {
    int v4 = -1;
  }
  else
  {
    int v4 = 1;
  }
  return v4 >= 0;
}

uint64_t sub_100260674(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = bswap32(*(_DWORD *)a1);
  unsigned int v3 = bswap32(*(_DWORD *)a2);
  if (v2 == v3
    && (v2 = bswap32(*(unsigned __int16 *)(a1 + 4)) >> 16, unsigned int v3 = bswap32(*(unsigned __int16 *)(a2 + 4)) >> 16, v2 == v3))
  {
    unsigned int v4 = 0;
  }
  else if (v2 < v3)
  {
    unsigned int v4 = -1;
  }
  else
  {
    unsigned int v4 = 1;
  }
  return v4 >> 31;
}

BOOL sub_10026072C(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = bswap32(*(_DWORD *)a1);
  unsigned int v3 = bswap32(*(_DWORD *)a2);
  if (v2 == v3
    && (v2 = bswap32(*(unsigned __int16 *)(a1 + 4)) >> 16, unsigned int v3 = bswap32(*(unsigned __int16 *)(a2 + 4)) >> 16, v2 == v3))
  {
    int v4 = 0;
  }
  else if (v2 < v3)
  {
    int v4 = -1;
  }
  else
  {
    int v4 = 1;
  }
  return v4 < 1;
}

BOOL sub_1002607E8(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = bswap32(*(_DWORD *)a1);
  unsigned int v3 = bswap32(*(_DWORD *)a2);
  if (v2 == v3
    && (v2 = bswap32(*(unsigned __int16 *)(a1 + 4)) >> 16, unsigned int v3 = bswap32(*(unsigned __int16 *)(a2 + 4)) >> 16, v2 == v3))
  {
    int v4 = 0;
  }
  else if (v2 < v3)
  {
    int v4 = -1;
  }
  else
  {
    int v4 = 1;
  }
  return v4 >= 0;
}

BOOL sub_1002608A4(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = bswap32(*(_DWORD *)a1);
  unsigned int v3 = bswap32(*(_DWORD *)a2);
  if (v2 == v3
    && (v2 = bswap32(*(unsigned __int16 *)(a1 + 4)) >> 16, unsigned int v3 = bswap32(*(unsigned __int16 *)(a2 + 4)) >> 16, v2 == v3))
  {
    int v4 = 0;
  }
  else if (v2 < v3)
  {
    int v4 = -1;
  }
  else
  {
    int v4 = 1;
  }
  return v4 > 0;
}

uint64_t WiFiAddress.init(from:)(void *a1)
{
  return sub_1002616B0(a1) & 0xFFFFFFFFFFFFLL;
}

uint64_t WiFiAddress.encode(to:)(void *a1, unint64_t a2)
{
  char v2 = a2;
  unint64_t v3 = a2 >> 8;
  unint64_t v4 = a2 >> 16;
  unint64_t v5 = a2 >> 24;
  unint64_t v6 = HIDWORD(a2);
  unint64_t v7 = a2 >> 40;
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  sub_100010BCC(&qword_10047BEF8);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16)  = xmmword_1003B2F40;
  *(unsigned char *)(v8 + 32)  = v2;
  *(unsigned char *)(v8 + 33)  = v3;
  *(unsigned char *)(v8 + 34)  = v4;
  *(unsigned char *)(v8 + 35)  = v5;
  *(unsigned char *)(v8 + 36)  = v6;
  *(unsigned char *)(v8 + 37)  = v7;
  uint64_t v9 = sub_1001265EC(v8);
  unint64_t v11 = v10;
  swift_bridgeObjectRelease();
  sub_100039448((uint64_t)v13, v14);
  sub_1000742DC();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  sub_10000C970(v9, v11);
  return sub_100010754((uint64_t)v13);
}

uint64_t sub_100260AA4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1002616B0(a1);
  if (!v2)
  {
    *(_WORD *)a2  = result;
    *(unsigned char *)(a2 + 2)  = BYTE2(result);
    *(unsigned char *)(a2 + 3)  = BYTE3(result);
    *(unsigned char *)(a2 + 4)  = BYTE4(result);
    *(unsigned char *)(a2 + 5)  = BYTE5(result);
  }
  return result;
}

uint64_t sub_100260AF8(void *a1)
{
  return WiFiAddress.encode(to:)(a1, *v1 | ((unint64_t)*(unsigned int *)(v1 + 1) << 16));
}

Swift::Void __swiftcall WiFiAddress.makeLinkLocal()()
{
  *uint64_t v0 = *v0 & 0xFC | 2;
}

uint64_t static WiFiAddress.random()()
{
  return sub_1002623B8() & 0xFFFFFFFFFFFFLL;
}

id WiFiAddress.apiAddress(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v7 = objc_allocWithZone((Class)WiFiMACAddress);
  if (a4 == 1)
  {
    uint64_t v8 = "initWithAddress:";
  }
  else
  {
    uint64_t v8 = "initWithAddress:ipv6Address:";
  }
  return [v7 v8:a5 & 0xFFFFFFFFFFFFLL];
}

id static WiFiMACAddress.randomLinkLocalAddress()()
{
  uint64_t v0 = sub_1002623B8();
  id v1 = objc_allocWithZone((Class)WiFiMACAddress);

  return [v1 initWithAddress:v0 & 0xFFFFFFFFFFFCLL | 2];
}

uint64_t WiFiMACAddress.ipv6LinkLocalAddressString.getter()
{
  id v1 = [v0 ipv6LinkLocalAddress];
  uint64_t v2 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v4 = v3;

  uint64_t v5 = sub_1002577C8(v2, v4);
  uint64_t v7 = v6;
  sub_10000C970(v2, v4);
  uint64_t v8 = (char *)swift_slowAlloc();
  v14[0]  = v5;
  v14[1]  = v7;
  inet_ntop(30, v14, v8, 0x2Eu);
  uint64_t v9 = String.init(cString:)();
  unint64_t v11 = v10;
  swift_slowDealloc();
  v12._countAndFlagsBits  = v9;
  v12._object  = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_100260D8C()
{
  uint64_t v0 = sub_1001265EC((uint64_t)&off_100450800);
  unint64_t v2 = v1;
  uint64_t v3 = sub_1001265EC((uint64_t)&off_100450828);
  unint64_t v5 = v4;
  sub_100013D44(v0, v2);
  sub_100013D44(v3, v5);
  sub_100125FAC(v3, v5);
  sub_10000C970(v3, v5);
  sub_10000C970(v3, v5);
  sub_10000C970(v0, v2);
  uint64_t result = sub_10000C6C4(v0, v2);
  if ((result & 0x1000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    static WiFiAddress.defaultClusterID  = result;
    byte_10048877A  = BYTE2(result);
    byte_10048877B  = BYTE3(result);
    byte_10048877C  = BYTE4(result);
    byte_10048877D  = BYTE5(result);
  }
  return result;
}

__int16 *WiFiAddress.defaultClusterID.unsafeMutableAddressor()
{
  if (qword_10047C2B0 != -1) {
    swift_once();
  }
  return &static WiFiAddress.defaultClusterID;
}

unint64_t static WiFiAddress.defaultClusterID.getter()
{
  if (qword_10047C2B0 != -1) {
    swift_once();
  }
  return (unsigned __int16)static WiFiAddress.defaultClusterID | ((unint64_t)*(unsigned int *)&byte_10048877A << 16);
}

void *WiFiAddress.bonjourMulticastAddress.unsafeMutableAddressor()
{
  return &static WiFiAddress.bonjourMulticastAddress;
}

uint64_t static WiFiAddress.bonjourMulticastAddress.getter()
{
  return 0xFB0000803333;
}

void *WiFiAddress.multicastAddress.unsafeMutableAddressor()
{
  return &static WiFiAddress.multicastAddress;
}

uint64_t static WiFiAddress.multicastAddress.getter()
{
  return 0xFFFFFFFFFFFFLL;
}

uint64_t sub_100260F50(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16)  = a2;
  *(void *)(result + 24)  = 2 * a2;
  return result;
}

uint64_t sub_100260F60(unsigned char *__src, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 <= 14) {
    return sub_100013D9C(__src, &__src[a2]);
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  __DataStorage.init(bytes:length:)();
  if ((unint64_t)a2 < 0x7FFFFFFF) {
    return a2 << 32;
  }
  type metadata accessor for Data.RangeReference();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16)  = 0;
  *(void *)(result + 24)  = a2;
  return result;
}

uint64_t sub_100261014(void *__dst, uint64_t a2, unint64_t a3, size_t __n)
{
  switch(a3 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v12 = *(void *)(a2 + 16);
      swift_retain();
      swift_retain();
      uint64_t v13 = __DataStorage._bytes.getter();
      if (!v13) {
        goto LABEL_21;
      }
      uint64_t v14 = v13;
      uint64_t v15 = __DataStorage._offset.getter();
      BOOL v16 = __OFSUB__(v12, v15);
      uint64_t v17 = v12 - v15;
      if (v16) {
        goto LABEL_17;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_22;
      }
      memcpy(__dst, (const void *)(v14 + v17), __n);
      swift_release();
      swift_release();
      return *(void *)__dst;
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_23;
    default:
      __src[0]  = a2;
      LOWORD(__src[1])  = a3;
      BYTE2(__src[1])  = BYTE2(a3);
      BYTE3(__src[1])  = BYTE3(a3);
      BYTE4(__src[1])  = BYTE4(a3);
      BYTE5(__src[1])  = BYTE5(a3);
      if (__dst)
      {
LABEL_14:
        memcpy(__dst, __src, __n);
        return *(void *)__dst;
      }
      __break(1u);
LABEL_4:
      if ((int)a2 > a2 >> 32)
      {
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      sub_100013D44(a2, a3);
      uint64_t v8 = __DataStorage._bytes.getter();
      if (!v8)
      {
        __DataStorage._length.getter();
        if (__dst) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
      uint64_t v9 = v8;
      uint64_t v10 = __DataStorage._offset.getter();
      uint64_t v11 = (int)a2 - v10;
      if (__OFSUB__((int)a2, v10)) {
LABEL_18:
      }
        __break(1u);
      __DataStorage._length.getter();
      if (!__dst)
      {
LABEL_20:
        __break(1u);
LABEL_21:
        __DataStorage._length.getter();
        if (__dst)
        {
LABEL_25:
          __break(1u);
          JUMPOUT(0x100261230);
        }
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      memcpy(__dst, (const void *)(v9 + v11), __n);
      sub_10000C970(a2, a3);
      return *(void *)__dst;
  }
}

uint64_t sub_100261250(unsigned __int8 *__dst, uint64_t a2, unint64_t a3, size_t __n)
{
  switch(a3 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v12 = *(void *)(a2 + 16);
      swift_retain();
      swift_retain();
      uint64_t v13 = __DataStorage._bytes.getter();
      if (!v13) {
        goto LABEL_21;
      }
      uint64_t v14 = v13;
      uint64_t v15 = __DataStorage._offset.getter();
      BOOL v16 = __OFSUB__(v12, v15);
      uint64_t v17 = v12 - v15;
      if (v16) {
        goto LABEL_17;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_22;
      }
      memcpy(__dst, (const void *)(v14 + v17), __n);
      swift_release();
      swift_release();
      return *(unsigned __int16 *)__dst | (__dst[2] << 16);
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_23;
    default:
      __src[0]  = a2;
      LOWORD(__src[1])  = a3;
      BYTE2(__src[1])  = BYTE2(a3);
      BYTE3(__src[1])  = BYTE3(a3);
      BYTE4(__src[1])  = BYTE4(a3);
      BYTE5(__src[1])  = BYTE5(a3);
      if (__dst)
      {
LABEL_14:
        memcpy(__dst, __src, __n);
        return *(unsigned __int16 *)__dst | (__dst[2] << 16);
      }
      __break(1u);
LABEL_4:
      if ((int)a2 > a2 >> 32)
      {
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      sub_100013D44(a2, a3);
      uint64_t v8 = __DataStorage._bytes.getter();
      if (!v8)
      {
        __DataStorage._length.getter();
        if (__dst) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
      uint64_t v9 = v8;
      uint64_t v10 = __DataStorage._offset.getter();
      uint64_t v11 = (int)a2 - v10;
      if (__OFSUB__((int)a2, v10)) {
LABEL_18:
      }
        __break(1u);
      __DataStorage._length.getter();
      if (!__dst)
      {
LABEL_20:
        __break(1u);
LABEL_21:
        __DataStorage._length.getter();
        if (__dst)
        {
LABEL_25:
          __break(1u);
          JUMPOUT(0x100261474);
        }
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      memcpy(__dst, (const void *)(v9 + v11), __n);
      sub_10000C970(a2, a3);
      return *(unsigned __int16 *)__dst | (__dst[2] << 16);
  }
}

uint64_t sub_100261484(unsigned __int8 *__dst, uint64_t a2, unint64_t a3, size_t __n)
{
  switch(a3 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v12 = *(void *)(a2 + 16);
      swift_retain();
      swift_retain();
      uint64_t v13 = __DataStorage._bytes.getter();
      if (!v13) {
        goto LABEL_21;
      }
      uint64_t v14 = v13;
      uint64_t v15 = __DataStorage._offset.getter();
      BOOL v16 = __OFSUB__(v12, v15);
      uint64_t v17 = v12 - v15;
      if (v16) {
        goto LABEL_17;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_22;
      }
      memcpy(__dst, (const void *)(v14 + v17), __n);
      swift_release();
      swift_release();
      return *__dst;
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_23;
    default:
      __src[0]  = a2;
      LOWORD(__src[1])  = a3;
      BYTE2(__src[1])  = BYTE2(a3);
      BYTE3(__src[1])  = BYTE3(a3);
      BYTE4(__src[1])  = BYTE4(a3);
      BYTE5(__src[1])  = BYTE5(a3);
      if (__dst)
      {
LABEL_14:
        memcpy(__dst, __src, __n);
        return *__dst;
      }
      __break(1u);
LABEL_4:
      if ((int)a2 > a2 >> 32)
      {
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      sub_100013D44(a2, a3);
      uint64_t v8 = __DataStorage._bytes.getter();
      if (!v8)
      {
        __DataStorage._length.getter();
        if (__dst) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
      uint64_t v9 = v8;
      uint64_t v10 = __DataStorage._offset.getter();
      uint64_t v11 = (int)a2 - v10;
      if (__OFSUB__((int)a2, v10)) {
LABEL_18:
      }
        __break(1u);
      __DataStorage._length.getter();
      if (!__dst)
      {
LABEL_20:
        __break(1u);
LABEL_21:
        __DataStorage._length.getter();
        if (__dst)
        {
LABEL_25:
          __break(1u);
          JUMPOUT(0x1002616A0);
        }
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      memcpy(__dst, (const void *)(v9 + v11), __n);
      sub_10000C970(a2, a3);
      return *__dst;
  }
}

uint64_t sub_1002616B0(void *a1)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (!v1)
  {
    uint64_t v3 = v14;
    sub_100039448((uint64_t)v13, v14);
    uint64_t v4 = UnkeyedDecodingContainer.decodeData(with:)(6, v3);
    unint64_t v6 = v5;
    sub_100013D44(v4, v5);
    uint64_t v7 = sub_10000C6C4(v4, v6);
    if ((v7 & 0x1000000000000) == 0)
    {
      uint64_t v8 = v7;
      sub_10000C970(v4, v6);
      sub_100010754((uint64_t)v13);
      sub_100010754((uint64_t)a1);
      return v8 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v10 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v12 = v11;
    uint64_t v15 = (char *)v11 + *(int *)(sub_100010BCC(&qword_10047E090) + 48);
    *uint64_t v12 = &type metadata for WiFiAddress;
    sub_1000369C4(a1, a1[3]);
    dispatch thunk of Decoder.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v10 - 8) + 104))(v12, enum case for DecodingError.valueNotFound(_:), v10);
    swift_willThrow();
    sub_10000C970(v4, v6);
    sub_100010754((uint64_t)v13);
  }
  return sub_100010754((uint64_t)a1);
}

uint64_t sub_100261894(void *__dst, uint64_t a2, unint64_t a3, size_t __n)
{
  switch(a3 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v12 = *(void *)(a2 + 16);
      swift_retain();
      swift_retain();
      uint64_t v13 = __DataStorage._bytes.getter();
      if (!v13) {
        goto LABEL_21;
      }
      uint64_t v14 = v13;
      uint64_t v15 = __DataStorage._offset.getter();
      BOOL v16 = __OFSUB__(v12, v15);
      uint64_t v17 = v12 - v15;
      if (v16) {
        goto LABEL_17;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_22;
      }
      memcpy(__dst, (const void *)(v14 + v17), __n);
      swift_release();
      swift_release();
      return *(void *)__dst;
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_23;
    default:
      __src[0]  = a2;
      LOWORD(__src[1])  = a3;
      BYTE2(__src[1])  = BYTE2(a3);
      BYTE3(__src[1])  = BYTE3(a3);
      BYTE4(__src[1])  = BYTE4(a3);
      BYTE5(__src[1])  = BYTE5(a3);
      if (__dst)
      {
LABEL_14:
        memcpy(__dst, __src, __n);
        return *(void *)__dst;
      }
      __break(1u);
LABEL_4:
      if ((int)a2 > a2 >> 32)
      {
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      sub_100013D44(a2, a3);
      uint64_t v8 = __DataStorage._bytes.getter();
      if (!v8)
      {
        __DataStorage._length.getter();
        if (__dst) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
      uint64_t v9 = v8;
      uint64_t v10 = __DataStorage._offset.getter();
      uint64_t v11 = (int)a2 - v10;
      if (__OFSUB__((int)a2, v10)) {
LABEL_18:
      }
        __break(1u);
      __DataStorage._length.getter();
      if (!__dst)
      {
LABEL_20:
        __break(1u);
LABEL_21:
        __DataStorage._length.getter();
        if (__dst)
        {
LABEL_25:
          __break(1u);
          JUMPOUT(0x100261AB4);
        }
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      memcpy(__dst, (const void *)(v9 + v11), __n);
      sub_10000C970(a2, a3);
      return *(void *)__dst;
  }
}

uint64_t sub_100261AC4(char *__dst, uint64_t a2, unint64_t a3, size_t __n)
{
  switch(a3 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v12 = *(void *)(a2 + 16);
      swift_retain();
      swift_retain();
      uint64_t v13 = __DataStorage._bytes.getter();
      if (!v13) {
        goto LABEL_21;
      }
      uint64_t v14 = v13;
      uint64_t v15 = __DataStorage._offset.getter();
      BOOL v16 = __OFSUB__(v12, v15);
      uint64_t v17 = v12 - v15;
      if (v16) {
        goto LABEL_17;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_22;
      }
      memcpy(__dst, (const void *)(v14 + v17), __n);
      swift_release();
      swift_release();
      goto LABEL_15;
    case 3uLL:
      *(void *)((char *)__src + 6)  = 0;
      __src[0]  = 0;
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_23;
    default:
      __src[0]  = a2;
      LOWORD(__src[1])  = a3;
      BYTE2(__src[1])  = BYTE2(a3);
      BYTE3(__src[1])  = BYTE3(a3);
      BYTE4(__src[1])  = BYTE4(a3);
      BYTE5(__src[1])  = BYTE5(a3);
      if (__dst)
      {
LABEL_14:
        memcpy(__dst, __src, __n);
        goto LABEL_15;
      }
      __break(1u);
LABEL_4:
      if ((int)a2 > a2 >> 32)
      {
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      sub_100013D44(a2, a3);
      uint64_t v8 = __DataStorage._bytes.getter();
      if (!v8)
      {
        __DataStorage._length.getter();
        if (__dst) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
      uint64_t v9 = v8;
      uint64_t v10 = __DataStorage._offset.getter();
      uint64_t v11 = (int)a2 - v10;
      if (__OFSUB__((int)a2, v10)) {
LABEL_18:
      }
        __break(1u);
      __DataStorage._length.getter();
      if (!__dst)
      {
LABEL_20:
        __break(1u);
LABEL_21:
        __DataStorage._length.getter();
        if (__dst)
        {
LABEL_25:
          __break(1u);
          JUMPOUT(0x100261CFCLL);
        }
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      memcpy(__dst, (const void *)(v9 + v11), __n);
      sub_10000C970(a2, a3);
LABEL_15:
      unsigned int v18 = *(_DWORD *)(__dst + 2);
      unsigned int v19 = *(_DWORD *)(__dst + 6);
      LOWORD(__src[0])  = *(_WORD *)__dst;
      *(void *)((char *)__src + 2)  = __PAIR64__(v19, v18);
      return __src[0];
  }
}

uint64_t sub_100261D0C(void *__dst, uint64_t a2, unint64_t a3, size_t __n)
{
  switch(a3 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v12 = *(void *)(a2 + 16);
      swift_retain();
      swift_retain();
      uint64_t v13 = __DataStorage._bytes.getter();
      if (!v13) {
        goto LABEL_21;
      }
      uint64_t v14 = v13;
      uint64_t v15 = __DataStorage._offset.getter();
      BOOL v16 = __OFSUB__(v12, v15);
      uint64_t v17 = v12 - v15;
      if (v16) {
        goto LABEL_17;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_22;
      }
      memcpy(__dst, (const void *)(v14 + v17), __n);
      swift_release();
      swift_release();
      return *(void *)__dst;
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_23;
    default:
      __src[0]  = a2;
      LOWORD(__src[1])  = a3;
      BYTE2(__src[1])  = BYTE2(a3);
      BYTE3(__src[1])  = BYTE3(a3);
      BYTE4(__src[1])  = BYTE4(a3);
      BYTE5(__src[1])  = BYTE5(a3);
      if (__dst)
      {
LABEL_14:
        memcpy(__dst, __src, __n);
        return *(void *)__dst;
      }
      __break(1u);
LABEL_4:
      if ((int)a2 > a2 >> 32)
      {
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      sub_100013D44(a2, a3);
      uint64_t v8 = __DataStorage._bytes.getter();
      if (!v8)
      {
        __DataStorage._length.getter();
        if (__dst) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
      uint64_t v9 = v8;
      uint64_t v10 = __DataStorage._offset.getter();
      uint64_t v11 = (int)a2 - v10;
      if (__OFSUB__((int)a2, v10)) {
LABEL_18:
      }
        __break(1u);
      __DataStorage._length.getter();
      if (!__dst)
      {
LABEL_20:
        __break(1u);
LABEL_21:
        __DataStorage._length.getter();
        if (__dst)
        {
LABEL_25:
          __break(1u);
          JUMPOUT(0x100261F3CLL);
        }
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      memcpy(__dst, (const void *)(v9 + v11), __n);
      sub_10000C970(a2, a3);
      return *(void *)__dst;
  }
}

uint64_t sub_100261F4C(unsigned int *__dst, uint64_t a2, unint64_t a3, size_t __n)
{
  switch(a3 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v12 = *(void *)(a2 + 16);
      swift_retain();
      swift_retain();
      uint64_t v13 = __DataStorage._bytes.getter();
      if (!v13) {
        goto LABEL_21;
      }
      uint64_t v14 = v13;
      uint64_t v15 = __DataStorage._offset.getter();
      BOOL v16 = __OFSUB__(v12, v15);
      uint64_t v17 = v12 - v15;
      if (v16) {
        goto LABEL_17;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_22;
      }
      memcpy(__dst, (const void *)(v14 + v17), __n);
      swift_release();
      swift_release();
      return *__dst;
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_23;
    default:
      __src[0]  = a2;
      LOWORD(__src[1])  = a3;
      BYTE2(__src[1])  = BYTE2(a3);
      BYTE3(__src[1])  = BYTE3(a3);
      BYTE4(__src[1])  = BYTE4(a3);
      BYTE5(__src[1])  = BYTE5(a3);
      if (__dst)
      {
LABEL_14:
        memcpy(__dst, __src, __n);
        return *__dst;
      }
      __break(1u);
LABEL_4:
      if ((int)a2 > a2 >> 32)
      {
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      sub_100013D44(a2, a3);
      uint64_t v8 = __DataStorage._bytes.getter();
      if (!v8)
      {
        __DataStorage._length.getter();
        if (__dst) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
      uint64_t v9 = v8;
      uint64_t v10 = __DataStorage._offset.getter();
      uint64_t v11 = (int)a2 - v10;
      if (__OFSUB__((int)a2, v10)) {
LABEL_18:
      }
        __break(1u);
      __DataStorage._length.getter();
      if (!__dst)
      {
LABEL_20:
        __break(1u);
LABEL_21:
        __DataStorage._length.getter();
        if (__dst)
        {
LABEL_25:
          __break(1u);
          JUMPOUT(0x100262168);
        }
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      memcpy(__dst, (const void *)(v9 + v11), __n);
      sub_10000C970(a2, a3);
      return *__dst;
  }
}

uint64_t sub_100262178(void *__dst, uint64_t a2, unint64_t a3, size_t __n)
{
  switch(a3 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v12 = *(void *)(a2 + 16);
      swift_retain();
      swift_retain();
      uint64_t v13 = __DataStorage._bytes.getter();
      if (!v13) {
        goto LABEL_21;
      }
      uint64_t v14 = v13;
      uint64_t v15 = __DataStorage._offset.getter();
      BOOL v16 = __OFSUB__(v12, v15);
      uint64_t v17 = v12 - v15;
      if (v16) {
        goto LABEL_17;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_22;
      }
      memcpy(__dst, (const void *)(v14 + v17), __n);
      swift_release();
      swift_release();
      return *(void *)__dst;
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_23;
    default:
      __src[0]  = a2;
      LOWORD(__src[1])  = a3;
      BYTE2(__src[1])  = BYTE2(a3);
      BYTE3(__src[1])  = BYTE3(a3);
      BYTE4(__src[1])  = BYTE4(a3);
      BYTE5(__src[1])  = BYTE5(a3);
      if (__dst)
      {
LABEL_14:
        memcpy(__dst, __src, __n);
        return *(void *)__dst;
      }
      __break(1u);
LABEL_4:
      if ((int)a2 > a2 >> 32)
      {
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      sub_100013D44(a2, a3);
      uint64_t v8 = __DataStorage._bytes.getter();
      if (!v8)
      {
        __DataStorage._length.getter();
        if (__dst) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
      uint64_t v9 = v8;
      uint64_t v10 = __DataStorage._offset.getter();
      uint64_t v11 = (int)a2 - v10;
      if (__OFSUB__((int)a2, v10)) {
LABEL_18:
      }
        __break(1u);
      __DataStorage._length.getter();
      if (!__dst)
      {
LABEL_20:
        __break(1u);
LABEL_21:
        __DataStorage._length.getter();
        if (__dst)
        {
LABEL_25:
          __break(1u);
          JUMPOUT(0x100262398);
        }
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      memcpy(__dst, (const void *)(v9 + v11), __n);
      sub_10000C970(a2, a3);
      return *(void *)__dst;
  }
}

uint64_t sub_1002623B8()
{
  return 0;
}

unint64_t sub_100262480()
{
  unint64_t result = qword_100487B40;
  if (!qword_100487B40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100487B40);
  }
  return result;
}

ValueMetadata *type metadata accessor for WiFiAddress()
{
  return &type metadata for WiFiAddress;
}

uint64_t sub_1002624E4(unsigned __int16 *__dst, uint64_t a2, unint64_t a3, size_t __n)
{
  switch(a3 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v12 = *(void *)(a2 + 16);
      swift_retain();
      swift_retain();
      uint64_t v13 = __DataStorage._bytes.getter();
      if (!v13) {
        goto LABEL_21;
      }
      uint64_t v14 = v13;
      uint64_t v15 = __DataStorage._offset.getter();
      BOOL v16 = __OFSUB__(v12, v15);
      uint64_t v17 = v12 - v15;
      if (v16) {
        goto LABEL_17;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_22;
      }
      memcpy(__dst, (const void *)(v14 + v17), __n);
      swift_release();
      swift_release();
      return *__dst;
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_23;
    default:
      __src[0]  = a2;
      LOWORD(__src[1])  = a3;
      BYTE2(__src[1])  = BYTE2(a3);
      BYTE3(__src[1])  = BYTE3(a3);
      BYTE4(__src[1])  = BYTE4(a3);
      BYTE5(__src[1])  = BYTE5(a3);
      if (__dst)
      {
LABEL_14:
        memcpy(__dst, __src, __n);
        return *__dst;
      }
      __break(1u);
LABEL_4:
      if ((int)a2 > a2 >> 32)
      {
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      sub_100013D44(a2, a3);
      uint64_t v8 = __DataStorage._bytes.getter();
      if (!v8)
      {
        __DataStorage._length.getter();
        if (__dst) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
      uint64_t v9 = v8;
      uint64_t v10 = __DataStorage._offset.getter();
      uint64_t v11 = (int)a2 - v10;
      if (__OFSUB__((int)a2, v10)) {
LABEL_18:
      }
        __break(1u);
      __DataStorage._length.getter();
      if (!__dst)
      {
LABEL_20:
        __break(1u);
LABEL_21:
        __DataStorage._length.getter();
        if (__dst)
        {
LABEL_25:
          __break(1u);
          JUMPOUT(0x100262700);
        }
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      memcpy(__dst, (const void *)(v9 + v11), __n);
      sub_10000C970(a2, a3);
      return *__dst;
  }
}

uint64_t sub_100262710(void *__dst, uint64_t a2, unint64_t a3, size_t __n)
{
  switch(a3 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v12 = *(void *)(a2 + 16);
      swift_retain();
      swift_retain();
      uint64_t v13 = __DataStorage._bytes.getter();
      if (!v13) {
        goto LABEL_21;
      }
      uint64_t v14 = v13;
      uint64_t v15 = __DataStorage._offset.getter();
      BOOL v16 = __OFSUB__(v12, v15);
      uint64_t v17 = v12 - v15;
      if (v16) {
        goto LABEL_17;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_22;
      }
      memcpy(__dst, (const void *)(v14 + v17), __n);
      swift_release();
      swift_release();
      return *(void *)__dst;
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_23;
    default:
      __src[0]  = a2;
      LOWORD(__src[1])  = a3;
      BYTE2(__src[1])  = BYTE2(a3);
      BYTE3(__src[1])  = BYTE3(a3);
      BYTE4(__src[1])  = BYTE4(a3);
      BYTE5(__src[1])  = BYTE5(a3);
      if (__dst)
      {
LABEL_14:
        memcpy(__dst, __src, __n);
        return *(void *)__dst;
      }
      __break(1u);
LABEL_4:
      if ((int)a2 > a2 >> 32)
      {
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      sub_100013D44(a2, a3);
      uint64_t v8 = __DataStorage._bytes.getter();
      if (!v8)
      {
        __DataStorage._length.getter();
        if (__dst) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
      uint64_t v9 = v8;
      uint64_t v10 = __DataStorage._offset.getter();
      uint64_t v11 = (int)a2 - v10;
      if (__OFSUB__((int)a2, v10)) {
LABEL_18:
      }
        __break(1u);
      __DataStorage._length.getter();
      if (!__dst)
      {
LABEL_20:
        __break(1u);
LABEL_21:
        __DataStorage._length.getter();
        if (__dst)
        {
LABEL_25:
          __break(1u);
          JUMPOUT(0x10026292CLL);
        }
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      memcpy(__dst, (const void *)(v9 + v11), __n);
      sub_10000C970(a2, a3);
      return *(void *)__dst;
  }
}

uint64_t sub_10026293C(void *__dst, uint64_t a2, unint64_t a3, size_t __n)
{
  switch(a3 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v12 = *(void *)(a2 + 16);
      swift_retain();
      swift_retain();
      uint64_t v13 = __DataStorage._bytes.getter();
      if (!v13) {
        goto LABEL_21;
      }
      uint64_t v14 = v13;
      uint64_t v15 = __DataStorage._offset.getter();
      BOOL v16 = __OFSUB__(v12, v15);
      uint64_t v17 = v12 - v15;
      if (v16) {
        goto LABEL_17;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_22;
      }
      memcpy(__dst, (const void *)(v14 + v17), __n);
      swift_release();
      swift_release();
      return *(void *)__dst;
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_23;
    default:
      __src[0]  = a2;
      LOWORD(__src[1])  = a3;
      BYTE2(__src[1])  = BYTE2(a3);
      BYTE3(__src[1])  = BYTE3(a3);
      BYTE4(__src[1])  = BYTE4(a3);
      BYTE5(__src[1])  = BYTE5(a3);
      if (__dst)
      {
LABEL_14:
        memcpy(__dst, __src, __n);
        return *(void *)__dst;
      }
      __break(1u);
LABEL_4:
      if ((int)a2 > a2 >> 32)
      {
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      sub_100013D44(a2, a3);
      uint64_t v8 = __DataStorage._bytes.getter();
      if (!v8)
      {
        __DataStorage._length.getter();
        if (__dst) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
      uint64_t v9 = v8;
      uint64_t v10 = __DataStorage._offset.getter();
      uint64_t v11 = (int)a2 - v10;
      if (__OFSUB__((int)a2, v10)) {
LABEL_18:
      }
        __break(1u);
      __DataStorage._length.getter();
      if (!__dst)
      {
LABEL_20:
        __break(1u);
LABEL_21:
        __DataStorage._length.getter();
        if (__dst)
        {
LABEL_25:
          __break(1u);
          JUMPOUT(0x100262B58);
        }
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      memcpy(__dst, (const void *)(v9 + v11), __n);
      sub_10000C970(a2, a3);
      return *(void *)__dst;
  }
}

uint64_t sub_100262B68(unsigned __int16 *__dst, uint64_t a2, unint64_t a3, size_t __n)
{
  switch(a3 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v12 = *(void *)(a2 + 16);
      swift_retain();
      swift_retain();
      uint64_t v13 = __DataStorage._bytes.getter();
      if (!v13) {
        goto LABEL_21;
      }
      uint64_t v14 = v13;
      uint64_t v15 = __DataStorage._offset.getter();
      BOOL v16 = __OFSUB__(v12, v15);
      uint64_t v17 = v12 - v15;
      if (v16) {
        goto LABEL_17;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_22;
      }
      memcpy(__dst, (const void *)(v14 + v17), __n);
      swift_release();
      swift_release();
      return *__dst;
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_23;
    default:
      __src[0]  = a2;
      LOWORD(__src[1])  = a3;
      BYTE2(__src[1])  = BYTE2(a3);
      BYTE3(__src[1])  = BYTE3(a3);
      BYTE4(__src[1])  = BYTE4(a3);
      BYTE5(__src[1])  = BYTE5(a3);
      if (__dst)
      {
LABEL_14:
        memcpy(__dst, __src, __n);
        return *__dst;
      }
      __break(1u);
LABEL_4:
      if ((int)a2 > a2 >> 32)
      {
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      sub_100013D44(a2, a3);
      uint64_t v8 = __DataStorage._bytes.getter();
      if (!v8)
      {
        __DataStorage._length.getter();
        if (__dst) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
      uint64_t v9 = v8;
      uint64_t v10 = __DataStorage._offset.getter();
      uint64_t v11 = (int)a2 - v10;
      if (__OFSUB__((int)a2, v10)) {
LABEL_18:
      }
        __break(1u);
      __DataStorage._length.getter();
      if (!__dst)
      {
LABEL_20:
        __break(1u);
LABEL_21:
        __DataStorage._length.getter();
        if (__dst)
        {
LABEL_25:
          __break(1u);
          JUMPOUT(0x100262D84);
        }
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      memcpy(__dst, (const void *)(v9 + v11), __n);
      sub_10000C970(a2, a3);
      return *__dst;
  }
}

uint64_t sub_100262D94(void *__dst, uint64_t a2, unint64_t a3, size_t __n)
{
  switch(a3 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v12 = *(void *)(a2 + 16);
      swift_retain();
      swift_retain();
      uint64_t v13 = __DataStorage._bytes.getter();
      if (!v13) {
        goto LABEL_21;
      }
      uint64_t v14 = v13;
      uint64_t v15 = __DataStorage._offset.getter();
      BOOL v16 = __OFSUB__(v12, v15);
      uint64_t v17 = v12 - v15;
      if (v16) {
        goto LABEL_17;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_22;
      }
      memcpy(__dst, (const void *)(v14 + v17), __n);
      swift_release();
      swift_release();
      return *(void *)__dst;
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_23;
    default:
      __src[0]  = a2;
      LOWORD(__src[1])  = a3;
      BYTE2(__src[1])  = BYTE2(a3);
      BYTE3(__src[1])  = BYTE3(a3);
      BYTE4(__src[1])  = BYTE4(a3);
      BYTE5(__src[1])  = BYTE5(a3);
      if (__dst)
      {
LABEL_14:
        memcpy(__dst, __src, __n);
        return *(void *)__dst;
      }
      __break(1u);
LABEL_4:
      if ((int)a2 > a2 >> 32)
      {
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      sub_100013D44(a2, a3);
      uint64_t v8 = __DataStorage._bytes.getter();
      if (!v8)
      {
        __DataStorage._length.getter();
        if (__dst) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
      uint64_t v9 = v8;
      uint64_t v10 = __DataStorage._offset.getter();
      uint64_t v11 = (int)a2 - v10;
      if (__OFSUB__((int)a2, v10)) {
LABEL_18:
      }
        __break(1u);
      __DataStorage._length.getter();
      if (!__dst)
      {
LABEL_20:
        __break(1u);
LABEL_21:
        __DataStorage._length.getter();
        if (__dst)
        {
LABEL_25:
          __break(1u);
          JUMPOUT(0x100262FB0);
        }
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      memcpy(__dst, (const void *)(v9 + v11), __n);
      sub_10000C970(a2, a3);
      return *(void *)__dst;
  }
}

uint64_t sub_100262FC0(unsigned int *__dst, uint64_t a2, unint64_t a3, size_t __n)
{
  switch(a3 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v12 = *(void *)(a2 + 16);
      swift_retain();
      swift_retain();
      uint64_t v13 = __DataStorage._bytes.getter();
      if (!v13) {
        goto LABEL_21;
      }
      uint64_t v14 = v13;
      uint64_t v15 = __DataStorage._offset.getter();
      BOOL v16 = __OFSUB__(v12, v15);
      uint64_t v17 = v12 - v15;
      if (v16) {
        goto LABEL_17;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_22;
      }
      memcpy(__dst, (const void *)(v14 + v17), __n);
      swift_release();
      swift_release();
      return *__dst;
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_23;
    default:
      __src[0]  = a2;
      LOWORD(__src[1])  = a3;
      BYTE2(__src[1])  = BYTE2(a3);
      BYTE3(__src[1])  = BYTE3(a3);
      BYTE4(__src[1])  = BYTE4(a3);
      BYTE5(__src[1])  = BYTE5(a3);
      if (__dst)
      {
LABEL_14:
        memcpy(__dst, __src, __n);
        return *__dst;
      }
      __break(1u);
LABEL_4:
      if ((int)a2 > a2 >> 32)
      {
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      sub_100013D44(a2, a3);
      uint64_t v8 = __DataStorage._bytes.getter();
      if (!v8)
      {
        __DataStorage._length.getter();
        if (__dst) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
      uint64_t v9 = v8;
      uint64_t v10 = __DataStorage._offset.getter();
      uint64_t v11 = (int)a2 - v10;
      if (__OFSUB__((int)a2, v10)) {
LABEL_18:
      }
        __break(1u);
      __DataStorage._length.getter();
      if (!__dst)
      {
LABEL_20:
        __break(1u);
LABEL_21:
        __DataStorage._length.getter();
        if (__dst)
        {
LABEL_25:
          __break(1u);
          JUMPOUT(0x1002631DCLL);
        }
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      memcpy(__dst, (const void *)(v9 + v11), __n);
      sub_10000C970(a2, a3);
      return *__dst;
  }
}

uint64_t sub_1002631EC(unsigned int *__dst, uint64_t a2, unint64_t a3, size_t __n)
{
  switch(a3 >> 62)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      uint64_t v12 = *(void *)(a2 + 16);
      swift_retain();
      swift_retain();
      uint64_t v13 = __DataStorage._bytes.getter();
      if (!v13) {
        goto LABEL_21;
      }
      uint64_t v14 = v13;
      uint64_t v15 = __DataStorage._offset.getter();
      BOOL v16 = __OFSUB__(v12, v15);
      uint64_t v17 = v12 - v15;
      if (v16) {
        goto LABEL_17;
      }
      __DataStorage._length.getter();
      if (!__dst) {
        goto LABEL_22;
      }
      memcpy(__dst, (const void *)(v14 + v17), __n);
      swift_release();
      swift_release();
      return *__dst;
    case 3uLL:
      memset(__src, 0, 14);
      if (__dst) {
        goto LABEL_14;
      }
      goto LABEL_23;
    default:
      __src[0]  = a2;
      LOWORD(__src[1])  = a3;
      BYTE2(__src[1])  = BYTE2(a3);
      BYTE3(__src[1])  = BYTE3(a3);
      BYTE4(__src[1])  = BYTE4(a3);
      BYTE5(__src[1])  = BYTE5(a3);
      if (__dst)
      {
LABEL_14:
        memcpy(__dst, __src, __n);
        return *__dst;
      }
      __break(1u);
LABEL_4:
      if ((int)a2 > a2 >> 32)
      {
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      sub_100013D44(a2, a3);
      uint64_t v8 = __DataStorage._bytes.getter();
      if (!v8)
      {
        __DataStorage._length.getter();
        if (__dst) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
      uint64_t v9 = v8;
      uint64_t v10 = __DataStorage._offset.getter();
      uint64_t v11 = (int)a2 - v10;
      if (__OFSUB__((int)a2, v10)) {
LABEL_18:
      }
        __break(1u);
      __DataStorage._length.getter();
      if (!__dst)
      {
LABEL_20:
        __break(1u);
LABEL_21:
        __DataStorage._length.getter();
        if (__dst)
        {
LABEL_25:
          __break(1u);
          JUMPOUT(0x100263408);
        }
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      memcpy(__dst, (const void *)(v9 + v11), __n);
      sub_10000C970(a2, a3);
      return *__dst;
  }
}

unint64_t WiFiInterfaceRole.logSubsystem.getter(char a1)
{
  return 0x2020100uLL >> (8 * a1);
}

id WiFiInterfaceRole.queue.getter(unsigned __int8 a1)
{
  if (a1 - 2 >= 2)
  {
    if (a1 == 1)
    {
      if (qword_10047C170 != -1) {
        swift_once();
      }
      uint64_t v1 = &static OS_dispatch_queue.awdl;
    }
    else
    {
      if (qword_10047C178 != -1) {
        swift_once();
      }
      uint64_t v1 = &static OS_dispatch_queue.p2p;
    }
  }
  else
  {
    if (qword_10047C168 != -1) {
      swift_once();
    }
    uint64_t v1 = &static OS_dispatch_queue.nan;
  }
  unint64_t v2 = (void *)*v1;

  return v2;
}

uint64_t WiFiInterfaceRole.bsdNamePrefix.getter(char a1)
{
  uint64_t result = 28261;
  switch(a1)
  {
    case 1:
      uint64_t result = 1818523489;
      break;
    case 2:
      uint64_t result = 7233902;
      break;
    case 3:
      uint64_t result = 29289;
      break;
    case 4:
      uint64_t result = 7826540;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t WiFiInterface.driver.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 96);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v5(a1, v3, AssociatedTypeWitness);
}

uint64_t WiFiInterface.interfaceName.getter()
{
  uint64_t v1 = *(void *)(v0 + *(void *)(*(void *)v0 + 104));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t WiFiInterface.components.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 112);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v5(a1, v3, AssociatedTypeWitness);
}

uint64_t WiFiInterface.preferences.getter()
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v1 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 120);
  uint64_t v2 = swift_checkMetadataState();
  return v1(v2, AssociatedConformanceWitness);
}

uint64_t WiFiInterface.capabilities.getter()
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v1 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8);
  uint64_t v2 = swift_checkMetadataState();
  return v1(v2, AssociatedConformanceWitness);
}

uint64_t WiFiInterface.linkState.getter()
{
  uint64_t v1 = sub_100010BCC((uint64_t *)&unk_100487D20);
  uint64_t v2 = v1 - 8;
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = v0 + *(void *)(*(void *)v0 + 120);
  swift_beginAccess();
  sub_1000136F4(v5, (uint64_t)v4, (uint64_t *)&unk_100487D20);
  uint64_t v6 = v4[*(int *)(v2 + 48)];
  sub_1000380B4((uint64_t)v4, (uint64_t *)&unk_100487D20);
  return v6;
}

uint64_t MutableDriverProperty.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 40));
}

uint64_t WiFiInterface.linkState.setter(char a1)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 120);
  swift_beginAccess();
  char v4 = a1 & 1;
  char v10 = a1 & 1;
  uint64_t v5 = sub_100010BCC((uint64_t *)&unk_100487D20);
  uint64_t v6 = *(int *)(v5 + 40);
  if (((((a1 & 1) == 0) ^ *(unsigned __int8 *)(v3 + v6)) & 1) == 0)
  {
    uint64_t v7 = v5;
    (*(void (**)(char *))(v3 + *(int *)(v5 + 48)))(&v10);
    (*(void (**)(char *))(v3 + *(int *)(v7 + 44)))(&v10);
    *(unsigned char *)(v3 + v6)  = v4;
    uint64_t v8 = *(void (**)(char *))(v3 + *(int *)(v7 + 56));
    if (v8) {
      v8(&v10);
    }
    sub_10026B83C(0, v4);
  }
  return swift_endAccess();
}

uint64_t sub_100263BAC(char a1)
{
  uint64_t v2 = v1;
  char v3 = a1 & 1;
  char v10 = a1 & 1;
  BOOL v4 = (a1 & 1) == 0;
  uint64_t result = sub_100010BCC((uint64_t *)&unk_100487D20);
  uint64_t v6 = *(int *)(result + 40);
  if (((v4 ^ *(unsigned __int8 *)(v2 + v6)) & 1) == 0)
  {
    uint64_t v7 = result;
    uint64_t v8 = (void (**)(char *))(v2 + *(int *)(result + 48));
    if (*v8) {
      (*v8)(&v10);
    }
    (*(void (**)(char *))(v2 + *(int *)(v7 + 44)))(&v10);
    *(unsigned char *)(v2 + v6)  = v3;
    uint64_t v9 = *(void (**)(char *))(v2 + *(int *)(v7 + 56));
    if (v9) {
      v9(&v10);
    }
    return sub_10026B83C(0, v3);
  }
  return result;
}

uint64_t sub_100263D18(unint64_t a1)
{
  uint64_t v2 = v1;
  __int16 v16 = a1;
  unint64_t v4 = a1 >> 8;
  unint64_t v5 = a1 >> 16;
  unint64_t v6 = a1 >> 24;
  unint64_t v7 = HIDWORD(a1);
  char v17 = BYTE2(a1);
  char v18 = BYTE3(a1);
  unint64_t v8 = a1 >> 40;
  char v19 = BYTE4(a1);
  char v20 = BYTE5(a1);
  uint64_t result = sub_100010BCC((uint64_t *)&unk_100487CB0);
  char v10 = (unsigned char *)(v2 + *(int *)(result + 40));
  LOBYTE(v15)  = v7;
  HIBYTE(v15)  = v8;
  if (*(_DWORD *)v10 != a1 || *((unsigned __int16 *)v10 + 2) != v15)
  {
    uint64_t v12 = result;
    uint64_t v13 = (void (**)(__int16 *))(v2 + *(int *)(result + 48));
    if (*v13) {
      (*v13)(&v16);
    }
    (*(void (**)(__int16 *))(v2 + *(int *)(v12 + 44)))(&v16);
    unsigned char *v10 = a1;
    v10[1]  = v4;
    unsigned char v10[2] = v5;
    v10[3]  = v6;
    void v10[4] = v7;
    v10[5]  = v8;
    uint64_t v14 = (void (**)(__int16 *))(v2 + *(int *)(v12 + 56));
    if (*v14) {
      (*v14)(&v16);
    }
    return sub_10026BF3C(0, a1 & 0xFFFFFFFFFFFFLL);
  }
  return result;
}

uint64_t sub_100263F64(unint64_t a1)
{
  int v9 = a1;
  uint64_t v3 = HIDWORD(a1) & 1;
  char v10 = BYTE4(a1) & 1;
  uint64_t result = sub_100010BCC(&qword_100483C08);
  uint64_t v5 = result;
  uint64_t v6 = v1 + *(int *)(result + 40);
  if (*(unsigned char *)(v6 + 4))
  {
    if ((a1 & 0x100000000) != 0) {
      return result;
    }
  }
  else if ((a1 & 0x100000000) == 0 && *(_DWORD *)v6 == a1)
  {
    return result;
  }
  unint64_t v7 = (void (**)(int *))(v1 + *(int *)(result + 48));
  if (*v7) {
    (*v7)(&v9);
  }
  (*(void (**)(int *))(v1 + *(int *)(v5 + 44)))(&v9);
  *(_DWORD *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 4)  = v3;
  unint64_t v8 = (void (**)(int *))(v1 + *(int *)(v5 + 56));
  if (*v8) {
    (*v8)(&v9);
  }

  return sub_10026C6C4(0, a1 | (unint64_t)(v3 << 32));
}

uint64_t MutableDriverProperty.wrappedValue.setter(NSObject *a1, uint64_t a2)
{
  sub_100271CDC(a1, a2);
  unint64_t v4 = *(uint64_t (**))(*(void *)(*(void *)(a2 + 16) - 8) + 8);

  return v4(a1);
}

void (*WiFiInterface.linkState.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1  = v3;
  v3[3]  = v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 120);
  v3[4]  = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = sub_100010BCC((uint64_t *)&unk_100487D20);
  v3[5]  = v6;
  uint64_t v7 = *(int *)(v6 + 40);
  *((unsigned char *)v3 + 52)  = *(unsigned char *)(v5 + v7);
  *((_DWORD *)v3 + 12)  = v7;
  return sub_100264218;
}

void sub_100264218(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  int v3 = *(unsigned __int8 *)(*a1 + 52);
  if (a2)
  {
    sub_100263BAC(*(unsigned char *)(*a1 + 52));
  }
  else
  {
    uint64_t v4 = *(int *)(v2 + 48);
    uint64_t v6 = *(void *)(v2 + 24);
    uint64_t v5 = *(void *)(v2 + 32);
    v12[0]  = *(unsigned char *)(*a1 + 52);
    if (v3 != *(unsigned __int8 *)(v6 + v5 + v4))
    {
      uint64_t v7 = *(void *)(v2 + 40);
      unint64_t v8 = (void (**)(unsigned char *))(v6 + v5 + *(int *)(v7 + 48));
      if (*v8)
      {
        (*v8)(v12);
        uint64_t v5 = *(void *)(v2 + 32);
        uint64_t v7 = *(void *)(v2 + 40);
        uint64_t v6 = *(void *)(v2 + 24);
      }
      (*(void (**)(unsigned char *))(v6 + v5 + *(int *)(v7 + 44)))(v12);
      uint64_t v9 = *(void *)(v2 + 40);
      uint64_t v10 = *(void *)(v2 + 24) + *(void *)(v2 + 32);
      *(unsigned char *)(v10 + *(int *)(v2 + 48))  = v3;
      uint64_t v11 = (void (**)(unsigned char *))(v10 + *(int *)(v9 + 56));
      if (*v11) {
        (*v11)(v12);
      }
      sub_10026B83C(0, v3);
    }
  }
  swift_endAccess();

  free((void *)v2);
}

uint64_t WiFiInterface.$linkState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 120);
  swift_beginAccess();
  return sub_1000136F4(v3, a1, (uint64_t *)&unk_100487D20);
}

uint64_t WiFiInterface.$linkState.setter(uint64_t a1)
{
  sub_100010BCC((uint64_t *)&unk_100487D20);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000136F4(a1, (uint64_t)v4, (uint64_t *)&unk_100487D20);
  uint64_t v5 = v1 + *(void *)(*(void *)v1 + 120);
  swift_beginAccess();
  sub_1000380B4(v5, (uint64_t *)&unk_100487D20);
  sub_10006EC68((uint64_t)v4, v5, (uint64_t *)&unk_100487D20);
  swift_endAccess();
  return sub_1000380B4(a1, (uint64_t *)&unk_100487D20);
}

void (*WiFiInterface.$linkState.modify(void *a1))(uint64_t a1, char a2)
{
  *a1  = v1;
  size_t v3 = *(void *)(*(void *)(sub_100010BCC((uint64_t *)&unk_100487D20) - 8) + 64);
  a1[1]  = malloc(v3);
  uint64_t v4 = malloc(v3);
  a1[2]  = v4;
  WiFiInterface.$linkState.getter((uint64_t)v4);
  return sub_100264578;
}

void sub_100264578(uint64_t a1, char a2)
{
}

uint64_t WiFiInterface.macAddress.getter()
{
  uint64_t v1 = sub_100010BCC((uint64_t *)&unk_100487CB0);
  uint64_t v2 = v1 - 8;
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = v0 + *(void *)(*(void *)v0 + 128);
  swift_beginAccess();
  sub_1000136F4(v5, (uint64_t)v4, (uint64_t *)&unk_100487CB0);
  uint64_t v6 = &v4[*(int *)(v2 + 48)];
  uint64_t v7 = *(unsigned int *)(v6 + 2);
  uint64_t v8 = *(unsigned __int16 *)v6;
  sub_1000380B4((uint64_t)v4, (uint64_t *)&unk_100487CB0);
  return v8 | (v7 << 16);
}

uint64_t WiFiInterface.macAddress.setter(uint64_t a1)
{
  return swift_endAccess();
}

void (*WiFiInterface.macAddress.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1  = v3;
  v3[3]  = v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 128);
  v3[4]  = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = v5 + *(int *)(sub_100010BCC((uint64_t *)&unk_100487CB0) + 40);
  *((_DWORD *)v3 + 10)  = *(_DWORD *)v6;
  *((_WORD *)v3 + 22)  = *(_WORD *)(v6 + 4);
  return sub_100264780;
}

void sub_100264780(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  sub_100263D18(*(unsigned __int16 *)(*(void *)a1 + 40) | ((unint64_t)*(unsigned int *)(*(void *)a1 + 42) << 16));
  swift_endAccess();

  free(v1);
}

uint64_t WiFiInterface.$macAddress.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 128);
  swift_beginAccess();
  return sub_1000136F4(v3, a1, (uint64_t *)&unk_100487CB0);
}

uint64_t WiFiInterface.$macAddress.setter(uint64_t a1)
{
  uint64_t v3 = sub_100010BCC((uint64_t *)&unk_100487CB0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000136F4(a1, (uint64_t)v5, (uint64_t *)&unk_100487CB0);
  uint64_t v6 = v1 + *(void *)(*(void *)v1 + 128);
  swift_beginAccess();
  sub_1000380B4(v6, (uint64_t *)&unk_100487CB0);
  sub_10006EC68((uint64_t)v5, v6, (uint64_t *)&unk_100487CB0);
  swift_endAccess();
  return sub_1000380B4(a1, (uint64_t *)&unk_100487CB0);
}

void (*WiFiInterface.$macAddress.modify(void *a1))(uint64_t a1, char a2)
{
  *a1  = v1;
  size_t v3 = *(void *)(*(void *)(sub_100010BCC((uint64_t *)&unk_100487CB0) - 8) + 64);
  a1[1]  = malloc(v3);
  uint64_t v4 = malloc(v3);
  a1[2]  = v4;
  WiFiInterface.$macAddress.getter((uint64_t)v4);
  return sub_1002649BC;
}

void sub_1002649BC(uint64_t a1, char a2)
{
}

void sub_1002649DC(uint64_t a1, char a2, void (*a3)(void *), uint64_t *a4)
{
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t v6 = *(void **)(a1 + 16);
  if (a2)
  {
    sub_1000136F4(*(void *)(a1 + 16), (uint64_t)v5, a4);
    a3(v5);
    sub_1000380B4((uint64_t)v6, a4);
  }
  else
  {
    a3(*(void **)(a1 + 16));
  }
  free(v6);

  free(v5);
}

unint64_t WiFiInterface.ipv4Address.getter()
{
  uint64_t v1 = sub_100010BCC(&qword_100483C08) - 8;
  __chkstk_darwin();
  size_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = v0 + *(void *)(*(void *)v0 + 136);
  swift_beginAccess();
  sub_1000136F4(v4, (uint64_t)v3, &qword_100483C08);
  uint64_t v5 = &v3[*(int *)(v1 + 48)];
  uint64_t v6 = *(unsigned int *)v5;
  LOBYTE(v1)  = v5[4];
  sub_1000380B4((uint64_t)v3, &qword_100483C08);
  return v6 | ((unint64_t)v1 << 32);
}

uint64_t WiFiInterface.ipv4Address.setter(unint64_t a1)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 136);
  swift_beginAccess();
  int v9 = a1;
  char v10 = BYTE4(a1) & 1;
  uint64_t v4 = sub_100010BCC(&qword_100483C08);
  uint64_t v5 = v4;
  uint64_t v6 = v3 + *(int *)(v4 + 40);
  if (*(unsigned char *)(v6 + 4))
  {
    if ((a1 & 0x100000000) != 0) {
      return swift_endAccess();
    }
  }
  else if ((a1 & 0x100000000) == 0 && *(_DWORD *)v6 == a1)
  {
    return swift_endAccess();
  }
  (*(void (**)(int *))(v3 + *(int *)(v4 + 48)))(&v9);
  (*(void (**)(int *))(v3 + *(int *)(v5 + 44)))(&v9);
  *(_DWORD *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 4)  = BYTE4(a1) & 1;
  uint64_t v7 = (void (**)(int *))(v3 + *(int *)(v5 + 56));
  if (*v7) {
    (*v7)(&v9);
  }
  sub_10026C6C4(0, a1 | ((HIDWORD(a1) & 1) << 32));
  return swift_endAccess();
}

void (*WiFiInterface.ipv4Address.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1  = v3;
  v3[3]  = v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 136);
  v3[4]  = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = sub_100010BCC(&qword_100483C08);
  v3[5]  = v6;
  uint64_t v7 = *(int *)(v6 + 40);
  *((_DWORD *)v3 + 12)  = *(_DWORD *)(v5 + v7);
  v3 += 6;
  *((_DWORD *)v3 + 2)  = v7;
  *((unsigned char *)v3 + 4)  = *(unsigned char *)(v5 + v7 + 4);
  return sub_100264D94;
}

void sub_100264D94(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(unsigned int *)(*a1 + 48);
  int v4 = *(unsigned __int8 *)(*a1 + 52);
  if (a2)
  {
    LOBYTE(v15)  = *(unsigned char *)(*a1 + 52);
    sub_100263F64(v3 | ((unint64_t)v4 << 32));
    goto LABEL_15;
  }
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v5 = *(void *)(v2 + 32);
  uint64_t v7 = v6 + v5 + *(int *)(v2 + 56);
  int v15 = *(_DWORD *)(*a1 + 48);
  char v16 = v4;
  if (*(unsigned char *)(v7 + 4))
  {
    if (v4) {
      goto LABEL_15;
    }
  }
  else
  {
    if (*(_DWORD *)v7 == v3) {
      char v8 = v4;
    }
    else {
      char v8 = 1;
    }
    if ((v8 & 1) == 0) {
      goto LABEL_15;
    }
  }
  uint64_t v9 = *(void *)(v2 + 40);
  char v10 = (void (**)(int *))(v6 + v5 + *(int *)(v9 + 48));
  if (*v10)
  {
    (*v10)(&v15);
    uint64_t v5 = *(void *)(v2 + 32);
    uint64_t v9 = *(void *)(v2 + 40);
    uint64_t v6 = *(void *)(v2 + 24);
  }
  (*(void (**)(int *))(v6 + v5 + *(int *)(v9 + 44)))(&v15);
  uint64_t v11 = *(void *)(v2 + 40);
  uint64_t v12 = *(void *)(v2 + 24) + *(void *)(v2 + 32);
  uint64_t v13 = v12 + *(int *)(v2 + 56);
  *(_DWORD *)uint64_t v13 = v3;
  *(unsigned char *)(v13 + 4)  = v4;
  uint64_t v14 = (void (**)(int *))(v12 + *(int *)(v11 + 56));
  if (*v14) {
    (*v14)(&v15);
  }
  char v17 = v4;
  sub_10026C6C4(0, v3 | ((unint64_t)v4 << 32));
LABEL_15:
  swift_endAccess();

  free((void *)v2);
}

uint64_t WiFiInterface.$ipv4Address.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 136);
  swift_beginAccess();
  return sub_1000136F4(v3, a1, &qword_100483C08);
}

uint64_t WiFiInterface.$ipv4Address.setter(uint64_t a1)
{
  sub_100010BCC(&qword_100483C08);
  __chkstk_darwin();
  int v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000136F4(a1, (uint64_t)v4, &qword_100483C08);
  uint64_t v5 = v1 + *(void *)(*(void *)v1 + 136);
  swift_beginAccess();
  sub_1000380B4(v5, &qword_100483C08);
  sub_10006EC68((uint64_t)v4, v5, &qword_100483C08);
  swift_endAccess();
  return sub_1000380B4(a1, &qword_100483C08);
}

void (*WiFiInterface.$ipv4Address.modify(void *a1))(uint64_t a1, char a2)
{
  *a1  = v1;
  size_t v3 = *(void *)(*(void *)(sub_100010BCC(&qword_100483C08) - 8) + 64);
  a1[1]  = malloc(v3);
  int v4 = malloc(v3);
  a1[2]  = v4;
  WiFiInterface.$ipv4Address.getter((uint64_t)v4);
  return sub_10026513C;
}

void sub_10026513C(uint64_t a1, char a2)
{
}

uint64_t WiFiInterface.ipv6Addresses.getter()
{
  uint64_t v1 = sub_100010BCC(&qword_100483C10) - 8;
  __chkstk_darwin();
  size_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = v0 + *(void *)(*(void *)v0 + 144);
  swift_beginAccess();
  sub_1000136F4(v4, (uint64_t)v3, &qword_100483C10);
  uint64_t v5 = *(void *)&v3[*(int *)(v1 + 48)];
  swift_bridgeObjectRetain();
  sub_1000380B4((uint64_t)v3, &qword_100483C10);
  return v5;
}

uint64_t WiFiInterface.ipv6Addresses.setter(uint64_t a1)
{
  return swift_bridgeObjectRelease();
}

void (*WiFiInterface.ipv6Addresses.modify(void *a1))(uint64_t a1, char a2)
{
  size_t v3 = malloc(0x30uLL);
  *a1  = v3;
  v3[4]  = v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 144);
  v3[5]  = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  v3[3]  = *(void *)(v5 + *(int *)(sub_100010BCC(&qword_100483C10) + 40));
  swift_bridgeObjectRetain();
  return sub_100265348;
}

void sub_100265348(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  if (a2)
  {
    uint64_t v4 = swift_bridgeObjectRetain();
    sub_100271B40(v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
  else
  {
    sub_100271B40(v3);
    swift_endAccess();
    swift_bridgeObjectRelease();
  }

  free(v2);
}

uint64_t WiFiInterface.$ipv6Addresses.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 144);
  swift_beginAccess();
  return sub_1000136F4(v3, a1, &qword_100483C10);
}

uint64_t WiFiInterface.$ipv6Addresses.setter(uint64_t a1)
{
  sub_100010BCC(&qword_100483C10);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000136F4(a1, (uint64_t)v4, &qword_100483C10);
  uint64_t v5 = v1 + *(void *)(*(void *)v1 + 144);
  swift_beginAccess();
  sub_1000380B4(v5, &qword_100483C10);
  sub_10006EC68((uint64_t)v4, v5, &qword_100483C10);
  swift_endAccess();
  return sub_1000380B4(a1, &qword_100483C10);
}

void (*WiFiInterface.$ipv6Addresses.modify(void *a1))(uint64_t a1, char a2)
{
  *a1  = v1;
  size_t v3 = *(void *)(*(void *)(sub_100010BCC(&qword_100483C10) - 8) + 64);
  a1[1]  = malloc(v3);
  uint64_t v4 = malloc(v3);
  a1[2]  = v4;
  WiFiInterface.$ipv6Addresses.getter((uint64_t)v4);
  return sub_1002655B0;
}

void sub_1002655B0(uint64_t a1, char a2)
{
}

uint64_t WiFiInterface.neighborDiscoveryTable.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 152);
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for WiFiInterface.NeighborDiscoveryTable();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t WiFiInterface.neighborDiscoveryTable.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 152);
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for WiFiInterface.NeighborDiscoveryTable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t (*WiFiInterface.neighborDiscoveryTable.modify())()
{
  return j__swift_endAccess;
}

uint64_t WiFiInterface.logger.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 160);
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t WiFiInterface.__allocating_init(driver:components:logger:)(char *a1, uint64_t a2, uint64_t a3)
{
  return WiFiInterface.init(driver:components:logger:)(a1, a2, a3);
}

uint64_t WiFiInterface.init(driver:components:logger:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v162 = a3;
  uint64_t v158 = a2;
  uint64_t v6 = *(void *)(*(void *)v3 + 80);
  uint64_t v7 = *(void *)(*(void *)v3 + 88);
  uint64_t v8 = type metadata accessor for WiFiInterface.NeighborDiscoveryTable();
  uint64_t v148 = *(void *)(v8 - 8);
  uint64_t v149 = v8;
  __chkstk_darwin(v8);
  uint64_t v147 = (uint64_t)&v130 - v9;
  uint64_t v10 = sub_100010BCC(&qword_100483C10);
  __chkstk_darwin(v10 - 8);
  uint64_t v146 = (uint64_t *)((char *)&v130 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = sub_100010BCC(&qword_100483C08);
  __chkstk_darwin(v12 - 8);
  uint64_t v144 = (uint64_t *)((char *)&v130 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = sub_100010BCC((uint64_t *)&unk_100487CB0);
  __chkstk_darwin(v14 - 8);
  long long v142 = (uint64_t *)((char *)&v130 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = sub_100010BCC((uint64_t *)&unk_100487D20);
  __chkstk_darwin(v16 - 8);
  long long v141 = (uint64_t *)((char *)&v130 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v159 = v18;
  uint64_t v160 = v19;
  uint64_t v20 = __chkstk_darwin(v18);
  char v145 = (char *)&v130 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v152 = (char *)&v130 - v23;
  __chkstk_darwin(v22);
  long long v25 = (char *)&v130 - v24;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v27 = type metadata accessor for Optional();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = __chkstk_darwin(v27);
  long long v31 = (char *)&v130 - v30;
  uint64_t v32 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v33 = __chkstk_darwin(v29);
  int32x2_t v143 = (char *)&v130 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  char v153 = (char *)&v130 - v35;
  (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v31, a1, v27);
  uint64_t v154 = v32;
  int v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48))(v31, 1, AssociatedTypeWitness);
  uint64_t v156 = v27;
  uint64_t v157 = v6;
  if (v36 == 1)
  {
    uint64_t v37 = v162;
    uint64_t v38 = v160;
    uint64_t v39 = v28 + 8;
    uint64_t v40 = *(void (**)(char *, uint64_t))(v28 + 8);
    uint64_t v155 = v39;
    v40(v31, v27);
    Logger.init(subsystem:category:)();
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      unsigned __int8 v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unsigned __int8 v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Unable to create WiFiInterface because no Driver was provided", v43, 2u);
      swift_slowDealloc();
    }

    uint8x8_t v44 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
    uint64_t v45 = v37;
    uint64_t v46 = v159;
    v44(v45, v159);
    uint64_t v47 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v47 - 8) + 8))(v158, v47);
    v40(a1, v156);
    v44((uint64_t)v25, v46);
    type metadata accessor for WiFiInterface();
    swift_deallocPartialClassInstance();
    return 0;
  }
  else
  {
    uint64_t v155 = v28;
    uint64_t v137 = a1;
    uint64x2_t v49 = v153;
    uint64_t v48 = v154;
    (*(void (**)(char *, char *, uint64_t))(v154 + 32))(v153, v31, AssociatedTypeWitness);
    int32x4_t v50 = (char *)(v4 + *(void *)(*(void *)v4 + 96));
    uint64x2_t v51 = *(void (**)(char *, uint64_t, uint64_t))(v48 + 16);
    uint64_t v133 = v48 + 16;
    uint64_t v134 = v51;
    v51(v50, (uint64_t)v49, AssociatedTypeWitness);
    uint64_t v161 = AssociatedTypeWitness;
    uint64_t AssociatedConformanceWitness = (uint64_t (**)(void, void))swift_getAssociatedConformanceWitness();
    uint64_t v53 = AssociatedConformanceWitness[5](v161, AssociatedConformanceWitness);
    uint64_t v54 = (uint64_t *)(v4 + *(void *)(*(void *)v4 + 104));
    *uint64_t v54 = v53;
    v54[1]  = v55;
    uint64_t v57 = v160 + 16;
    uint64_t v56 = *(void (**)(uint64_t, uint64_t))(v160 + 16);
    uint64_t v58 = v7;
    uint64_t v59 = v159;
    v56(v4 + *(void *)(*(void *)v4 + 160), v162);
    uint64_t v150 = (void (*)(uint64_t, uint64_t, uint64_t))v56;
    uint64_t v60 = v4 + *(void *)(*(void *)v4 + 112);
    uint64_t v61 = swift_getAssociatedTypeWitness();
    uint64_t v135 = *(void *)(v61 - 8);
    uint32x4_t v62 = *(void (**)(uint64_t, uint64_t))(v135 + 16);
    uint64_t v136 = v61;
    v62(v60, v158);
    uint64x2_t v63 = (uint64_t **)(v4 + *(void *)(*(void *)v4 + 104));
    uint64x2_t v64 = v63[1];
    uint64_t v164 = *v63;
    unint64_t v165 = v64;
    swift_bridgeObjectRetain();
    v65._countAndFlagsBits  = 0x7473206B6E696C20;
    v65._object  = (void *)0xEB00000000657461;
    String.append(_:)(v65);
    uint64_t v66 = v6;
    uint64_t v131 = v164;
    uint64_t v151 = v58;
    uint64_t v130 = v165;
    uint64_t v67 = (uint64_t)v152;
    ((void (*)(char *, uint64_t, uint64_t))v56)(v152, v162, v59);
    uint64_t v132 = v57;
    uint64_t v68 = v4 + *(void *)(*(void *)v4 + 96);
    LOBYTE(v60)  = AssociatedConformanceWitness[6](v161, AssociatedConformanceWitness);
    uint64_t v69 = v66;
    char v70 = sub_100266978(v68, v66, v58);
    uint64_t v72 = v71;
    uint64_t v73 = swift_allocObject();
    *(void *)(v73 + 16)  = v70;
    *(void *)(v73 + 24)  = v72;
    unint64_t v74 = v141;
    sub_100266B88((uint64_t)v131, (unint64_t)v130, v67, v60, 0, (void (*)(char *))sub_100271F44, (void (*)(char *))v73, sub_100271AA0, v141, 0);
    sub_10006EC68((uint64_t)v74, v4 + *(void *)(*(void *)v4 + 120), (uint64_t *)&unk_100487D20);
    unint64_t v140 = v63;
    uint64_t v75 = v63[1];
    uint64_t v164 = *v63;
    unint64_t v165 = v75;
    swift_bridgeObjectRetain();
    v76._countAndFlagsBits  = 7234013692659060000;
    v76._object  = (void *)0xEC00000073736572;
    String.append(_:)(v76);
    long long v141 = v164;
    uint64_t v131 = v165;
    uint64_t v77 = v67;
    uint64_t v78 = v159;
    v150(v67, v162, v159);
    uint64_t v139 = AssociatedConformanceWitness;
    unint64_t v79 = AssociatedConformanceWitness[8](v161, AssociatedConformanceWitness);
    uint64_t v80 = sub_1002623B8();
    uint64_t v81 = v69;
    uint64_t v82 = v151;
    uint64_t v83 = sub_100269958(v68, v69, v151);
    uint64_t v84 = v78;
    uint64_t v86 = v85;
    uint64_t v87 = swift_allocObject();
    *(void *)(v87 + 16)  = v83;
    *(void *)(v87 + 24)  = v86;
    uint64_t v88 = v79 & 0xFFFFFFFFFFFFLL | ((HIWORD(v79) & 1) << 48);
    uint64_t v89 = v142;
    sub_100267378((uint64_t)v141, (unint64_t)v131, v77, v88, v80 & 0xFFFFFFFFFFFCLL | 2, (void (*)(__int16 *))sub_100271F70, (void (*)(__int16 *))v87, (uint64_t (*)(__int16 *))sub_100271A44, v142, 0);
    sub_10006EC68((uint64_t)v89, v4 + *(void *)(*(void *)v4 + 128), (uint64_t *)&unk_100487CB0);
    uint64_t v90 = v140[1];
    uint64_t v164 = *v140;
    unint64_t v165 = v90;
    swift_bridgeObjectRetain();
    v91._countAndFlagsBits  = 0x6461203476504920;
    v91._object  = (void *)0xED00007373657264;
    String.append(_:)(v91);
    long long v142 = v164;
    long long v141 = v165;
    uint64_t v92 = (void (*)(char *, char *, uint64_t))v150;
    v150(v77, v162, v84);
    uint64_t v93 = (uint64_t (*)(uint64_t))v139[10];
    uint64_t v138 = v68;
    unint64_t v94 = v93(v161);
    uint64_t v95 = sub_100269B68(v68, v81, v82);
    uint64_t v97 = v96;
    uint64_t v98 = swift_allocObject();
    *(void *)(v98 + 16)  = v95;
    *(void *)(v98 + 24)  = v97;
    uint64_t v99 = (uint64_t)v145;
    long long v100 = v152;
    uint64_t v101 = v159;
    v92(v145, v152, v159);
    LOBYTE(v164)  = 0;
    unint64_t v102 = v94 & (unint64_t)&_mh_execute_header & 0xFFFFFFFF00000000 | v94;
    unint64_t v103 = v94 | ((HIDWORD(v94) & 1) << 32);
    uint64_t v104 = v144;
    sub_100268514((uint64_t)v142, (unint64_t)v141, v99, v102, v103, (void (*)(int *))sub_100271FA4, (void (*)(int *))v98, sub_100269D88, v144, 0);
    uint64_t v105 = *(uint64_t **)(v160 + 8);
    v160 += 8;
    long long v142 = v105;
    uint64_t v106 = (uint64_t)v100;
    ((void (*)(char *, uint64_t))v105)(v100, v101);
    sub_10006EC68((uint64_t)v104, v4 + *(void *)(*(void *)v4 + 136), &qword_100483C08);
    BOOL v107 = v140[1];
    uint64_t v164 = *v140;
    unint64_t v165 = v107;
    swift_bridgeObjectRetain();
    v108._countAndFlagsBits  = 0x6461203676504920;
    v108._object  = (void *)0xED00007373657264;
    String.append(_:)(v108);
    uint64_t v144 = v164;
    long long v141 = v165;
    uint64_t v109 = v101;
    uint64_t v110 = v150;
    v150((uint64_t)v100, v162, v101);
    uint64_t v111 = v138;
    uint64_t v112 = ((uint64_t (*)(uint64_t))v139[12])(v161);
    BOOL v113 = sub_10026A0E0(v111, v157, v151);
    uint64_t v115 = v114;
    uint64_t v116 = swift_allocObject();
    *(void *)(v116 + 16)  = v113;
    *(void *)(v116 + 24)  = v115;
    v110(v99, v106, v109);
    swift_bridgeObjectRetain();
    int16x8_t v117 = v146;
    char v118 = (void (*)(uint64_t *))v116;
    uint64_t v119 = v162;
    sub_100267C28((uint64_t)v144, (unint64_t)v141, v99, v112, v112, (void (*)(uint64_t *))sub_100271FE0, v118, (uint64_t (*)(void *))sub_1002719E8, v146, 0);
    uint64_t v120 = v109;
    ((void (*)(uint64_t, uint64_t))v142)(v106, v109);
    sub_10006EC68((uint64_t)v117, v4 + *(void *)(*(void *)v4 + 144), &qword_100483C10);
    uint64_t v121 = (uint64_t)v143;
    uint64_t v122 = v161;
    v134(v143, v138, v161);
    v110(v106, v119, v120);
    uint64_t v123 = v147;
    sub_10026A2F0(v121, v106, v147);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v148 + 32))(v4 + *(void *)(*(void *)v4 + 152), v123, v149);
    swift_retain();
    uint64_t v124 = Logger.logObject.getter();
    os_log_type_t v125 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v124, v125))
    {
      unint64_t v126 = (uint8_t *)swift_slowAlloc();
      uint64_t v164 = (uint64_t *)swift_slowAlloc();
      *(_DWORD *)unint64_t v126 = 136315138;
      uint64_t v127 = WiFiInterface.description.getter();
      uint64_t v163 = sub_100010680(v127, v128, (uint64_t *)&v164);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v124, v125, "Created %s", v126, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release();
    }

    ((void (*)(uint64_t, uint64_t))v142)(v119, v159);
    (*(void (**)(uint64_t, uint64_t))(v135 + 8))(v158, v136);
    (*(void (**)(char *, uint64_t))(v155 + 8))(v137, v156);
    (*(void (**)(char *, uint64_t))(v154 + 8))(v153, v122);
  }
  return v4;
}

uint64_t (*sub_100266978(uint64_t a1, uint64_t a2, uint64_t a3))(char a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v9 = (char *)&v13 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v13 - v8, a1, AssociatedTypeWitness);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16)  = a2;
  *(void *)(v11 + 24)  = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, v9, AssociatedTypeWitness);
  return sub_1002764E0;
}

uint64_t sub_100266AC8(char a1)
{
  uint64_t v1 = a1 & 1;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 56);
  uint64_t v4 = swift_checkMetadataState();
  return v3(v1, v4, AssociatedConformanceWitness);
}

uint64_t sub_100266B88@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 a4@<W3>, char a5@<W4>, void (*a6)(char *)@<X5>, void (*a7)(char *)@<X6>, uint64_t (*a8)(unsigned char *)@<X7>, uint64_t *a9@<X8>, uint64_t a10)
{
  int v44 = a4;
  char v17 = a5 & 1;
  char v48 = a5 & 1;
  uint64_t v18 = (int *)sub_100010BCC((uint64_t *)&unk_100487D20);
  uint64_t v19 = (uint64_t *)((char *)a9 + v18[12]);
  *uint64_t v19 = 0;
  v19[1]  = 0;
  uint64_t v20 = (uint64_t *)((char *)a9 + v18[13]);
  *uint64_t v20 = 0;
  v20[1]  = 0;
  uint64_t v21 = (uint64_t *)((char *)a9 + v18[14]);
  *uint64_t v21 = 0;
  v21[1]  = 0;
  *a9  = a1;
  a9[1]  = a2;
  unint64_t v42 = a2;
  uint64_t v22 = (char *)a9 + v18[9];
  uint64_t v23 = type metadata accessor for Logger();
  uint64_t v43 = *(void *)(v23 - 8);
  uint64_t v41 = v23;
  (*(void (**)(char *, uint64_t))(v43 + 16))(v22, a3);
  uint64_t v24 = (uint64_t *)((char *)a9 + v18[15]);
  uint64_t v40 = a8;
  *uint64_t v24 = a8;
  v24[1]  = a10;
  long long v25 = (void (**)(char *))((char *)a9 + v18[11]);
  *long long v25 = a6;
  v25[1]  = a7;
  if (v44 == 2)
  {
    *((unsigned char *)a9 + v18[10])  = v17;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    a6(&v48);
    v47[0]  = v17;
    swift_retain_n();
    swift_bridgeObjectRetain();
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = swift_slowAlloc();
      uint64_t v46 = swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 136315394;
      swift_bridgeObjectRetain();
      sub_100010680(a1, v42, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v34 + 12)  = 2080;
      uint64_t v35 = v40(v47);
      sub_100010680(v35, v36, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "No initial value for %s set default to %s", (uint8_t *)v34, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 8))(a3, v41);
    }
    swift_bridgeObjectRelease_n();

    swift_release();
    swift_release_n();
    uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t))(v43 + 8);
    uint64_t v38 = a3;
    uint64_t v39 = v41;
  }
  else
  {
    *((unsigned char *)a9 + v18[10])  = a4 & 1;
    v47[0]  = a4 & 1;
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_retain();
    long long v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      uint64_t v46 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136315394;
      swift_bridgeObjectRetain();
      sub_100010680(a1, v42, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v28 + 12)  = 2080;
      uint64_t v29 = v40(v47);
      sub_100010680(v29, v30, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Initialized value for %s to %s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 8))(a3, v41);
    }
    swift_bridgeObjectRelease_n();

    swift_release();
    swift_release_n();
    uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t))(v43 + 8);
    uint64_t v38 = a3;
    uint64_t v39 = v41;
  }

  return v37(v38, v39);
}

uint64_t sub_100267378@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, void (*a6)(__int16 *)@<X5>, void (*a7)(__int16 *)@<X6>, uint64_t (*a8)(__int16 *)@<X7>, uint64_t *a9@<X8>, uint64_t (*a10)(__int16 *))
{
  char v12 = a5;
  __int16 v59 = a5;
  unint64_t v46 = a5 >> 8;
  char v60 = BYTE2(a5);
  unint64_t v43 = a5 >> 24;
  char v61 = BYTE3(a5);
  unint64_t v47 = a5 >> 16;
  *(void *)type  = HIDWORD(a5);
  char v62 = BYTE4(a5);
  unint64_t v44 = a5 >> 40;
  char v63 = BYTE5(a5);
  uint64_t v18 = (int *)sub_100010BCC((uint64_t *)&unk_100487CB0);
  uint64_t v19 = (uint64_t *)((char *)a9 + v18[12]);
  *uint64_t v19 = 0;
  v19[1]  = 0;
  uint64_t v20 = (uint64_t *)((char *)a9 + v18[13]);
  *uint64_t v20 = 0;
  v20[1]  = 0;
  uint64_t v21 = (uint64_t *)((char *)a9 + v18[14]);
  *uint64_t v21 = 0;
  v21[1]  = 0;
  uint64_t v45 = a1;
  *a9  = a1;
  a9[1]  = a2;
  unint64_t v49 = a2;
  uint64_t v22 = (char *)a9 + v18[9];
  uint64_t v23 = type metadata accessor for Logger();
  uint64_t v50 = *(void *)(v23 - 8);
  uint64_t v51 = v23;
  (*(void (**)(char *, uint64_t))(v50 + 16))(v22, a3);
  uint64_t v24 = (uint64_t (**)(__int16 *))((char *)a9 + v18[15]);
  *uint64_t v24 = a8;
  v24[1]  = a10;
  long long v25 = (void (**)(__int16 *))((char *)a9 + v18[11]);
  *long long v25 = a6;
  v25[1]  = a7;
  if ((a4 & 0x1000000000000) != 0)
  {
    uint64_t v29 = a3;
    os_log_type_t v33 = (char *)a9 + v18[10];
    *os_log_type_t v33 = v12;
    v33[1]  = v46;
    v33[2]  = v47;
    v33[3]  = v43;
    v33[4]  = type[0];
    v33[5]  = v44;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    a6(&v59);
    LOBYTE(v54)  = v12;
    HIBYTE(v54)  = v46;
    char v55 = v47;
    char v56 = v43;
    os_log_type_t v57 = type[0];
    char v58 = v44;
    swift_retain_n();
    swift_bridgeObjectRetain();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = swift_slowAlloc();
      uint64_t v53 = swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136315394;
      swift_bridgeObjectRetain();
      sub_100010680(v45, v49, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v36 + 12)  = 2080;
      uint64_t v37 = a8(&v54);
      sub_100010680(v37, v38, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "No initial value for %s set default to %s", (uint8_t *)v36, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
      goto LABEL_8;
    }
    swift_bridgeObjectRelease_n();

    swift_release();
    swift_release_n();
    uint64_t v41 = *(uint64_t (**)(uint64_t, uint64_t))(v50 + 8);
    uint64_t v42 = v29;
    uint64_t v40 = v51;
  }
  else
  {
    long long v26 = (char *)a9 + v18[10];
    *(_WORD *)long long v26 = a4;
    v26[2]  = BYTE2(a4);
    v26[3]  = BYTE3(a4);
    v26[4]  = BYTE4(a4);
    v26[5]  = BYTE5(a4);
    __int16 v54 = a4;
    char v55 = BYTE2(a4);
    char v56 = BYTE3(a4);
    os_log_type_t v57 = BYTE4(a4);
    char v58 = BYTE5(a4);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_retain();
    os_log_type_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    uint64_t v29 = a3;
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v30 = swift_slowAlloc();
      uint64_t v53 = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 136315394;
      swift_bridgeObjectRetain();
      sub_100010680(v45, v49, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v30 + 12)  = 2080;
      uint64_t v31 = a8(&v54);
      sub_100010680(v31, v32, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Initialized value for %s to %s", (uint8_t *)v30, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
LABEL_8:
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v50 + 8))(v29, v51);
    }
    swift_bridgeObjectRelease_n();

    swift_release();
    swift_release_n();
    uint64_t v40 = v51;
    uint64_t v41 = *(uint64_t (**)(uint64_t, uint64_t))(v50 + 8);
    uint64_t v42 = a3;
  }

  return v41(v42, v40);
}

uint64_t sub_100267C28@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t *)@<X5>, void (*a7)(uint64_t *)@<X6>, uint64_t (*a8)(void *)@<X7>, uint64_t *a9@<X8>, uint64_t a10)
{
  uint64_t v45 = a5;
  uint64_t v18 = (int *)sub_100010BCC(&qword_100483C10);
  uint64_t v19 = (uint64_t *)((char *)a9 + v18[12]);
  *uint64_t v19 = 0;
  v19[1]  = 0;
  uint64_t v20 = (uint64_t *)((char *)a9 + v18[13]);
  *uint64_t v20 = 0;
  v20[1]  = 0;
  uint64_t v21 = (uint64_t *)((char *)a9 + v18[14]);
  *uint64_t v21 = 0;
  v21[1]  = 0;
  uint64_t v38 = a1;
  *a9  = a1;
  a9[1]  = a2;
  unint64_t v22 = a2;
  uint64_t v23 = (char *)a9 + v18[9];
  uint64_t v40 = type metadata accessor for Logger();
  uint64_t v41 = *(void *)(v40 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v23, a3, v40);
  uint64_t v24 = (uint64_t *)((char *)a9 + v18[15]);
  uint64_t v39 = a8;
  *uint64_t v24 = a8;
  v24[1]  = a10;
  long long v25 = (void (**)(uint64_t *))((char *)a9 + v18[11]);
  *long long v25 = a6;
  v25[1]  = a7;
  if (a4)
  {
    *(uint64_t *)((char *)a9 + v18[10])  = a4;
    v44[0]  = a4;
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_retain();
    long long v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136315394;
      swift_bridgeObjectRetain();
      sub_100010680(v38, v22, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v28 + 12)  = 2080;
      uint64_t v29 = v39(v44);
      sub_100010680(v29, v30, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Initialized value for %s to %s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(a3, v40);
      return swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

      swift_release();
      swift_release_n();
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(a3, v40);
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    *(uint64_t *)((char *)a9 + v18[10])  = a5;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    a6(&v45);
    v44[0]  = a5;
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    unint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 136315394;
      swift_bridgeObjectRetain();
      sub_100010680(v38, v22, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v34 + 12)  = 2080;
      uint64_t v35 = a8(v44);
      sub_100010680(v35, v36, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "No initial value for %s set default to %s", (uint8_t *)v34, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 8))(a3, v40);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

      swift_release();
      swift_release_n();
      uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t))(v41 + 8);
      return v37(a3, v40);
    }
  }
}

uint64_t sub_100268514@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, void (*a6)(int *)@<X5>, void (*a7)(int *)@<X6>, uint64_t (*a8)(int *)@<X7>, uint64_t *a9@<X8>, uint64_t (*a10)(int *))
{
  int v13 = a5;
  int v49 = a5;
  uint64_t v40 = HIDWORD(a5) & 1;
  char v50 = BYTE4(a5) & 1;
  uint64_t v18 = (int *)sub_100010BCC(&qword_100483C08);
  uint64_t v19 = (uint64_t *)((char *)a9 + v18[12]);
  *uint64_t v19 = 0;
  v19[1]  = 0;
  uint64_t v20 = (uint64_t *)((char *)a9 + v18[13]);
  *uint64_t v20 = 0;
  v20[1]  = 0;
  uint64_t v21 = (uint64_t *)((char *)a9 + v18[14]);
  *uint64_t v21 = 0;
  v21[1]  = 0;
  *a9  = a1;
  a9[1]  = a2;
  unint64_t v42 = a2;
  unint64_t v22 = (char *)a9 + v18[9];
  uint64_t v43 = type metadata accessor for Logger();
  uint64_t v44 = *(void *)(v43 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v22, a3, v43);
  uint64_t v23 = (uint64_t (**)(int *))((char *)a9 + v18[15]);
  uint64_t v41 = a8;
  *uint64_t v23 = a8;
  v23[1]  = a10;
  uint64_t v24 = (void (**)(int *))((char *)a9 + v18[11]);
  *uint64_t v24 = a6;
  v24[1]  = a7;
  if ((a4 & 0x10000000000) != 0)
  {
    unint64_t v32 = (char *)a9 + v18[10];
    *(_DWORD *)unint64_t v32 = v13;
    unsigned char v32[4] = v40;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    a6(&v49);
    int v47 = v13;
    char v48 = v40;
    swift_retain_n();
    swift_bridgeObjectRetain();
    os_log_type_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = swift_slowAlloc();
      uint64_t v46 = swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 136315394;
      swift_bridgeObjectRetain();
      sub_100010680(a1, v42, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v35 + 12)  = 2080;
      uint64_t v29 = a3;
      uint64_t v36 = a8(&v47);
      sub_100010680(v36, v37, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "No initial value for %s set default to %s", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      goto LABEL_8;
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    long long v25 = (char *)a9 + v18[10];
    *(_DWORD *)long long v25 = a4;
    v25[4]  = BYTE4(a4) & 1;
    int v47 = a4;
    char v48 = BYTE4(a4) & 1;
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_retain();
    long long v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      uint64_t v46 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136315394;
      swift_bridgeObjectRetain();
      sub_100010680(a1, v42, &v46);
      uint64_t v29 = a3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v28 + 12)  = 2080;
      uint64_t v30 = v41(&v47);
      sub_100010680(v30, v31, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Initialized value for %s to %s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

LABEL_8:
      swift_release();
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 8))(v29, v43);
    }
    swift_bridgeObjectRelease_n();
  }
  swift_release();
  swift_release_n();
  uint64_t v39 = *(uint64_t (**)(uint64_t, uint64_t))(v44 + 8);

  return v39(a3, v43);
}

uint64_t MutableDriverProperty.init(name:logger:initialValue:defaultValue:updater:valueDescriber:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, char *a5@<X4>, void (*a6)(uint64_t)@<X5>, void (*a7)(uint64_t)@<X6>, uint64_t (*a8)(char *)@<X7>, uint64_t *a9@<X8>, uint64_t (*a10)(char *), uint64_t a11)
{
  Swift::String v91 = a6;
  uint64_t v92 = a8;
  uint64_t v90 = a5;
  uint64_t v94 = a4;
  uint64_t v97 = a7;
  uint64_t v98 = a10;
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v93 = *(void *)(v15 - 8);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v82 - v17;
  uint64_t v99 = *(void *)(a11 - 8);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v20 = __chkstk_darwin(v19);
  unint64_t v22 = (char *)&v82 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v85 = (char *)&v82 - v24;
  __chkstk_darwin(v23);
  uint64_t v86 = (char *)&v82 - v25;
  long long v26 = (int *)type metadata accessor for MutableDriverProperty();
  os_log_type_t v27 = (uint64_t *)((char *)a9 + v26[12]);
  *os_log_type_t v27 = 0;
  v27[1]  = 0;
  uint64_t v28 = (uint64_t *)((char *)a9 + v26[13]);
  *uint64_t v28 = 0;
  v28[1]  = 0;
  uint64_t v29 = (uint64_t *)((char *)a9 + v26[14]);
  *uint64_t v29 = 0;
  v29[1]  = 0;
  uint64_t v84 = a1;
  *a9  = a1;
  a9[1]  = a2;
  unint64_t v95 = a2;
  uint64_t v30 = (char *)a9 + v26[9];
  uint64_t v31 = type metadata accessor for Logger();
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v87 = v31;
  uint64_t v88 = v32;
  os_log_type_t v33 = v30;
  uint64_t v34 = v93;
  (*(void (**)(char *, void (*)(uint64_t)))(v32 + 16))(v33, a3);
  uint64_t v35 = (uint64_t (**)(char *))((char *)a9 + v26[15]);
  uint64_t v36 = v98;
  *uint64_t v35 = v92;
  v35[1]  = v36;
  unint64_t v37 = (void (**)(uint64_t))((char *)a9 + v26[11]);
  uint64_t v38 = v97;
  *unint64_t v37 = v91;
  v37[1]  = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v18, v94, v15);
  uint64_t v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v99 + 48);
  uint64_t v96 = a11;
  int v40 = v39(v18, 1, a11);
  uint64_t v89 = v15;
  if (v40 == 1)
  {
    uint64_t v41 = v22;
    uint64_t v43 = *(char **)(v34 + 8);
    uint64_t v42 = v34 + 8;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    uint64_t v86 = v43;
    ((void (*)(char *, uint64_t))v43)(v18, v15);
    uint64_t v44 = (char *)a9 + v26[10];
    uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t))(v99 + 16);
    uint64_t v46 = v90;
    v45(v44, (uint64_t)v90, v96);
    v91((uint64_t)v46);
    Swift::String v65 = v41;
    ((void (*)(char *))v45)(v41);
    swift_retain_n();
    swift_bridgeObjectRetain();
    uint64_t v66 = Logger.logObject.getter();
    os_log_type_t v67 = static os_log_type_t.default.getter();
    BOOL v68 = os_log_type_enabled(v66, v67);
    uint64_t v69 = v94;
    if (v68)
    {
      uint64_t v70 = swift_slowAlloc();
      os_log_t v83 = v66;
      uint64_t v71 = v70;
      uint64_t v72 = swift_slowAlloc();
      uint64_t v93 = v42;
      uint64_t v85 = (char *)v72;
      v101[0]  = v72;
      *(_DWORD *)uint64_t v71 = 136315394;
      unint64_t v73 = v95;
      swift_bridgeObjectRetain();
      uint64_t v100 = sub_100010680(v84, v73, v101);
      Swift::String v91 = a3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v71 + 12)  = 2080;
      uint64_t v74 = v99;
      uint64_t v75 = v92(v41);
      uint64_t v100 = sub_100010680(v75, v76, v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      uint64_t v77 = *(void (**)(char *, uint64_t))(v74 + 8);
      uint64_t v78 = v96;
      v77(v65, v96);
      os_log_t v79 = v83;
      _os_log_impl((void *)&_mh_execute_header, v83, v67, "No initial value for %s set default to %s", (uint8_t *)v71, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
      swift_release();
      v77(v90, v78);
      ((void (*)(uint64_t, uint64_t))v86)(v94, v89);
      return (*(uint64_t (**)(void (*)(uint64_t), uint64_t))(v88 + 8))(v91, v87);
    }
    else
    {

      swift_release();
      swift_release_n();
      uint64_t v80 = *(void (**)(char *, uint64_t))(v99 + 8);
      uint64_t v81 = v96;
      v80(v41, v96);
      swift_bridgeObjectRelease_n();
      v80(v46, v81);
      ((void (*)(uint64_t, uint64_t))v86)(v69, v89);
      return (*(uint64_t (**)(void (*)(uint64_t), uint64_t))(v88 + 8))(a3, v87);
    }
  }
  else
  {
    uint64_t v47 = v99;
    char v48 = v86;
    uint64_t v49 = v96;
    (*(void (**)(char *, char *, uint64_t))(v99 + 32))(v86, v18, v96);
    char v50 = (char *)a9 + v26[10];
    uint64_t v51 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
    v51(v50, v48, v49);
    v51(v85, v48, v49);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_retain();
    int32x4_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = swift_slowAlloc();
      v101[0]  = swift_slowAlloc();
      Swift::String v91 = a3;
      *(_DWORD *)uint64_t v54 = 136315394;
      unint64_t v55 = v95;
      swift_bridgeObjectRetain();
      uint64_t v100 = sub_100010680(v84, v55, v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v54 + 12)  = 2080;
      uint64_t v56 = v99;
      os_log_type_t v57 = v85;
      uint64_t v58 = v92(v85);
      uint64_t v100 = sub_100010680(v58, v59, v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      char v60 = *(void (**)(char *, uint64_t))(v56 + 8);
      uint64_t v61 = v96;
      v60(v57, v96);
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Initialized value for %s to %s", (uint8_t *)v54, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
      swift_release();
      v60(v90, v61);
      (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v94, v89);
      (*(void (**)(void (*)(uint64_t), uint64_t))(v88 + 8))(v91, v87);
      return ((uint64_t (*)(char *, uint64_t))v60)(v86, v61);
    }
    else
    {

      swift_release();
      swift_release_n();
      char v63 = *(void (**)(char *, uint64_t))(v99 + 8);
      uint64_t v64 = v96;
      v63(v85, v96);
      swift_bridgeObjectRelease_n();
      v63(v90, v64);
      (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v94, v89);
      (*(void (**)(void (*)(uint64_t), uint64_t))(v88 + 8))(a3, v87);
      return ((uint64_t (*)(char *, uint64_t))v63)(v86, v64);
    }
  }
}

uint64_t (*sub_100269958(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v9 = (char *)&v13 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v13 - v8, a1, AssociatedTypeWitness);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16)  = a2;
  *(void *)(v11 + 24)  = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, v9, AssociatedTypeWitness);
  return sub_1002763A0;
}

uint64_t sub_100269AA8(uint64_t a1)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 72);
  uint64_t v4 = swift_checkMetadataState();
  return v3(a1 & 0xFFFFFFFFFFFFLL, v4, AssociatedConformanceWitness);
}

uint64_t (*sub_100269B68(uint64_t a1, uint64_t a2, uint64_t a3))(unint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v9 = (char *)&v13 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v13 - v8, a1, AssociatedTypeWitness);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16)  = a2;
  *(void *)(v11 + 24)  = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, v9, AssociatedTypeWitness);
  return sub_1002762F4;
}

uint64_t sub_100269CB8(unint64_t a1)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 88);
  uint64_t v4 = swift_checkMetadataState();
  return v3(a1 | ((HIDWORD(a1) & 1) << 32), v4, AssociatedConformanceWitness);
}

uint64_t sub_100269D88(int *a1)
{
  if (a1[1]) {
    return 1701736302;
  }
  int v2 = *a1;
  uint64_t v9 = 0;
  unint64_t v10 = 0xE000000000000000;
  uint64_t v3 = (char *)swift_slowAlloc();
  int v8 = v2;
  inet_ntop(2, &v8, v3, 0x10u);
  uint64_t v4 = String.init(cString:)();
  uint64_t v6 = v5;
  swift_slowDealloc();
  v7._countAndFlagsBits  = v4;
  v7._object  = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t MutableDriverProperty.init(name:logger:initialValue:updater:valueDescriber:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t (*a7)(char *)@<X6>, uint64_t (*a8)(char *)@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v30 = a8;
  uint64_t v31 = a5;
  uint64_t v32 = a6;
  os_log_type_t v33 = a7;
  uint64_t v25 = a3;
  uint64_t v28 = a1;
  unint64_t v29 = a2;
  os_log_type_t v27 = a9;
  uint64_t v13 = *(void *)(a10 - 8);
  uint64_t v26 = a11;
  __chkstk_darwin();
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Optional();
  __chkstk_darwin();
  uint64_t v17 = (char *)&v24 - v16;
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin();
  uint64_t v21 = (void (*)(uint64_t))((char *)&v24 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(void (*)(uint64_t), uint64_t, uint64_t))(v19 + 16))(v21, a3, v18);
  unint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v22(v17, a4, a10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v17, 0, 1, a10);
  v22(v15, a4, a10);
  MutableDriverProperty.init(name:logger:initialValue:defaultValue:updater:valueDescriber:)(v28, v29, v21, (uint64_t)v17, v15, v31, v32, v33, v27, v30, a10);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a4, a10);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v25, v18);
}

uint64_t (*sub_10026A0E0(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v9 = (char *)&v13 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v13 - v8, a1, AssociatedTypeWitness);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16)  = a2;
  *(void *)(v11 + 24)  = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, v9, AssociatedTypeWitness);
  return sub_100276258;
}

uint64_t sub_10026A230(uint64_t a1)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 104);
  uint64_t v4 = swift_checkMetadataState();
  return v3(a1, v4, AssociatedConformanceWitness);
}

uint64_t sub_10026A2F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for WiFiInterface.NeighborDiscoveryTable();
  uint64_t v7 = *(int *)(v6 + 36);
  type metadata accessor for WiFiInterface.NeighborDiscoveryTable.Entry();
  swift_getWitnessTable();
  *(void *)(a3 + v7)  = Dictionary.init()();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a3, a1, AssociatedTypeWitness);
  uint64_t v9 = a3 + *(int *)(v6 + 40);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32);

  return v11(v9, a2, v10);
}

uint64_t WiFiInterface.deinit()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 96);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  uint64_t v3 = v0 + *(void *)(*(void *)v0 + 112);
  uint64_t v4 = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  sub_1000380B4(v0 + *(void *)(*(void *)v0 + 120), (uint64_t *)&unk_100487D20);
  sub_1000380B4(v0 + *(void *)(*(void *)v0 + 128), (uint64_t *)&unk_100487CB0);
  sub_1000380B4(v0 + *(void *)(*(void *)v0 + 136), &qword_100483C08);
  sub_1000380B4(v0 + *(void *)(*(void *)v0 + 144), &qword_100483C10);
  uint64_t v5 = v0 + *(void *)(*(void *)v0 + 152);
  uint64_t v6 = type metadata accessor for WiFiInterface.NeighborDiscoveryTable();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = v0 + *(void *)(*(void *)v0 + 160);
  uint64_t v8 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  return v0;
}

uint64_t WiFiInterface.__deallocating_deinit()
{
  WiFiInterface.deinit();

  return swift_deallocClassInstance();
}

uint64_t sub_10026A718()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 1);
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 2);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 3);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 5);
  Hasher._combine(_:)(*(unsigned char *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  long long v11 = *(_OWORD *)(v0 + 8);
  uint64_t v6 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_10011A3BC((uint64_t)&v11, (uint64_t)&v12);
  unint64_t v9 = v8;
  Data.hash(into:)();
  sub_10000C970(v7, v9);
  if (v6)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    sub_100272068(v0);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return sub_100272068(v0);
}

uint64_t sub_10026A858(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2 || *(unsigned __int16 *)(a1 + 4) != *(unsigned __int16 *)(a2 + 4)) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(a2 + 32);
  uint64_t v11 = *(void *)(a1 + 8);

  return _s7CoreP2P11IPv6AddressV2eeoiySbAC_ACtFZ_0(v11, v4, v5, v6, v7, v8, v9, v10);
}

Swift::Int sub_10026A914()
{
  return Hasher._finalize()();
}

Swift::Int sub_10026A95C()
{
  return sub_10026A914();
}

uint64_t sub_10026A998()
{
  return sub_10026A718();
}

Swift::Int sub_10026A9D4()
{
  return Hasher._finalize()();
}

uint64_t sub_10026AA2C(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0]  = *(_OWORD *)a1;
  v5[1]  = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0]  = *(_OWORD *)a2;
  v7[1]  = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return sub_10026A858((uint64_t)v5, (uint64_t)v7) & 1;
}

uint64_t WiFiInterface.NeighborDiscoveryTable.postPeerPresence(macAddress:ipv6Address:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v55 = type metadata accessor for Logger();
  uint64_t v54 = *(void *)(v55 - 8);
  __chkstk_darwin();
  os_log_type_t v53 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOWORD(v69)  = a1;
  BYTE2(v69)  = BYTE2(a1);
  BYTE3(v69)  = BYTE3(a1);
  BYTE4(v69)  = BYTE4(a1);
  BYTE5(v69)  = BYTE5(a1);
  uint64_t v57 = a3;
  *((void *)&v69 + 1)  = a2;
  *(void *)&long long v70 = a3;
  uint64_t v56 = a2;
  uint64_t v61 = *(int *)(a6 + 36);
  unint64_t v58 = a4;
  *((void *)&v70 + 1)  = a4;
  uint64_t v71 = a5;
  *(_OWORD *)os_log_type_t v67 = v69;
  *(_OWORD *)&v67[16]  = v70;
  uint64_t v68 = a5;
  swift_bridgeObjectRetain();
  sub_100272024((uint64_t)&v69);
  uint64_t v15 = type metadata accessor for WiFiInterface.NeighborDiscoveryTable.Entry();
  WitnessTable  = swift_getWitnessTable();
  uint64_t v60 = v15;
  Dictionary.subscript.getter();
  sub_100272068((uint64_t)&v69);
  if (v64 == 1)
  {
    swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 136);
    uint64_t v18 = swift_checkMetadataState();
    uint64_t v19 = v62;
    v17(a1 & 0xFFFFFFFFFFFFLL, v56, v57, v58, a5, v18, AssociatedConformanceWitness);
    uint64_t v62 = v19;
    if (v19) {
      return sub_100272068((uint64_t)&v69);
    }
    unint64_t v58 = a1 & 0xFFFFFFFFFFFFLL;
    uint64_t v57 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(v18, AssociatedConformanceWitness);
    unint64_t v22 = v21;
    uint64_t v23 = v54;
    uint64_t v24 = v53;
    uint64_t v25 = v55;
    (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v53, v7 + *(int *)(a6 + 40), v55);
    swift_bridgeObjectRetain();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      *(void *)os_log_type_t v67 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136315394;
      uint64_t v29 = WiFiAddress.description.getter(v58);
      uint64_t v63 = sub_100010680(v29, v30, (uint64_t *)v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 12)  = 2080;
      swift_bridgeObjectRetain();
      uint64_t v63 = sub_100010680(v57, v22, (uint64_t *)v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Posted peer presence for %s on %s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v54 + 8))(v53, v55);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v24, v25);
    }
  }
  uint64_t v31 = WitnessTable;
  *(_OWORD *)os_log_type_t v67 = v69;
  *(_OWORD *)&v67[16]  = v70;
  uint64_t v68 = v71;
  uint64_t v32 = v7;
  uint64_t v33 = v61;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v63 = *(void *)(v7 + v33);
  uint64_t v35 = v63;
  *(void *)(v7 + v33)  = 0x8000000000000000;
  uint64_t v36 = v60;
  unint64_t v37 = sub_100271804((uint64_t)v67, v60, v31);
  uint64_t v39 = *(void *)(v35 + 16);
  BOOL v40 = (v38 & 1) == 0;
  Swift::Int v41 = v39 + v40;
  if (__OFADD__(v39, v40))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v42 = v37;
  char v43 = v38;
  type metadata accessor for _NativeDictionary();
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v41))
  {
    unint64_t v44 = sub_100271804((uint64_t)v67, v36, v31);
    if ((v43 & 1) != (v45 & 1))
    {
LABEL_19:
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    unint64_t v42 = v44;
  }
  uint64_t v46 = v61;
  *(void *)(v32 + v61)  = v63;
  swift_bridgeObjectRelease();
  uint64_t v47 = *(void *)(v32 + v46);
  if (v43)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v72 = 0;
    swift_bridgeObjectRetain();
    LODWORD(v63)  = *(_DWORD *)v67;
    WORD2(v63)  = *(_WORD *)&v67[4];
    long long v64 = *(_OWORD *)&v67[8];
    uint64_t v65 = *(void *)&v67[24];
    uint64_t v66 = v68;
    swift_bridgeObjectRetain();
    _NativeDictionary._insert(at:key:value:)();
  }
  uint64_t v48 = *(void *)(v47 + 56);
  swift_bridgeObjectRelease();
  uint64_t v49 = *(void *)(v48 + 8 * v42);
  BOOL v50 = __OFADD__(v49, 1);
  uint64_t v51 = v49 + 1;
  if (v50)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  *(void *)(v48 + 8 * v42)  = v51;
  return swift_bridgeObjectRelease();
}

uint64_t WiFiInterface.NeighborDiscoveryTable.postPeerAbsence(macAddress:ipv6Address:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v35 = *(void *)(v13 - 8);
  uint64_t v36 = v13;
  __chkstk_darwin();
  uint64_t v34 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOWORD(v46)  = a1;
  BYTE2(v46)  = BYTE2(a1);
  BYTE3(v46)  = BYTE3(a1);
  BYTE4(v46)  = BYTE4(a1);
  BYTE5(v46)  = BYTE5(a1);
  uint64_t v37 = a2;
  uint64_t v38 = a3;
  *((void *)&v46 + 1)  = a2;
  *(void *)&long long v47 = a3;
  uint64_t v39 = a4;
  uint64_t v40 = v6;
  *((void *)&v47 + 1)  = a4;
  uint64_t v48 = a5;
  long long v41 = v46;
  long long v42 = v47;
  uint64_t v43 = a5;
  swift_bridgeObjectRetain();
  sub_100272024((uint64_t)&v46);
  type metadata accessor for WiFiInterface.NeighborDiscoveryTable.Entry();
  swift_getWitnessTable();
  Dictionary.subscript.getter();
  sub_100272068((uint64_t)&v46);
  if (v45 == 1 || v44 < 1) {
    return sub_100272068((uint64_t)&v46);
  }
  if (v44 == 1)
  {
    long long v41 = v46;
    long long v42 = v47;
    uint64_t v43 = v48;
    unint64_t v16 = a1 & 0xFFFFFFFFFFFFLL;
    type metadata accessor for Dictionary();
    Dictionary.removeValue(forKey:)();
    sub_100272068((uint64_t)&v46);
    swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v18 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 144);
    uint64_t v19 = swift_checkMetadataState();
    uint64_t v20 = v40;
    uint64_t v21 = v49;
    uint64_t result = v18(v16, v37, v38, v39, a5, v19, AssociatedConformanceWitness);
    if (!v21)
    {
      uint64_t v49 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(v19, AssociatedConformanceWitness);
      unint64_t v23 = v22;
      uint64_t v24 = v20 + *(int *)(a6 + 40);
      uint64_t v26 = v34;
      uint64_t v25 = v35;
      uint64_t v27 = v36;
      (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v34, v24, v36);
      swift_bridgeObjectRetain();
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = swift_slowAlloc();
        *(void *)&long long v41 = swift_slowAlloc();
        *(_DWORD *)uint64_t v30 = 136315394;
        uint64_t v31 = WiFiAddress.description.getter(v16);
        uint64_t v44 = sub_100010680(v31, v32, (uint64_t *)&v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v30 + 12)  = 2080;
        swift_bridgeObjectRetain();
        uint64_t v44 = sub_100010680(v49, v23, (uint64_t *)&v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Posted peer absence for %s on %s", (uint8_t *)v30, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v34, v36);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v26, v27);
      }
    }
  }
  else
  {
    --v44;
    char v45 = 0;
    long long v41 = v46;
    long long v42 = v47;
    uint64_t v43 = v48;
    type metadata accessor for Dictionary();
    return Dictionary.subscript.setter();
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> WiFiInterface.NeighborDiscoveryTable.clearAllPeerPresence()()
{
  type metadata accessor for WiFiInterface.NeighborDiscoveryTable.Entry();
  swift_getWitnessTable();
  type metadata accessor for Dictionary();
  Dictionary.removeAll(keepingCapacity:)(0);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  Swift::UInt8 v1 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 152);
  uint64_t v2 = swift_checkMetadataState();
  v1(v2, AssociatedConformanceWitness);
}

uint64_t MutableDriverProperty.willTryUpdatingProperty.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 48));
  sub_100037FF4(v2);
  return v2;
}

uint64_t MutableDriverProperty.willTryUpdatingProperty.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t *)(v3 + *(int *)(a3 + 48));
  uint64_t result = sub_100011E30(*v6);
  *uint64_t v6 = a1;
  v6[1]  = a2;
  return result;
}

uint64_t (*MutableDriverProperty.willTryUpdatingProperty.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t MutableDriverProperty.failedToUpdateProperty.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 52));
  sub_100037FF4(v2);
  return v2;
}

uint64_t MutableDriverProperty.failedToUpdateProperty.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t *)(v3 + *(int *)(a3 + 52));
  uint64_t result = sub_100011E30(*v6);
  *uint64_t v6 = a1;
  v6[1]  = a2;
  return result;
}

uint64_t (*MutableDriverProperty.failedToUpdateProperty.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t MutableDriverProperty.didUpdateProperty.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 56));
  sub_100037FF4(v2);
  return v2;
}

uint64_t MutableDriverProperty.didUpdateProperty.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t *)(v3 + *(int *)(a3 + 56));
  uint64_t result = sub_100011E30(*v6);
  *uint64_t v6 = a1;
  v6[1]  = a2;
  return result;
}

uint64_t (*MutableDriverProperty.didUpdateProperty.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t sub_10026B83C(uint64_t a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = (int *)sub_100010BCC((uint64_t *)&unk_100487D20);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (uint64_t *)((char *)&v48 - v10);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v48 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v48 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (uint64_t *)((char *)&v48 - v18);
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v21 = __chkstk_darwin(v20);
  unint64_t v23 = (char *)&v48 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v53 = v27;
  uint64_t v54 = v24;
  if (a1)
  {
    uint64_t v28 = (char *)&v48 - v25;
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))((char *)&v48 - v25, v2 + v5[9], v26);
    sub_1000136F4(v2, (uint64_t)v19, (uint64_t *)&unk_100487D20);
    sub_1000136F4(v2, (uint64_t)v17, (uint64_t *)&unk_100487D20);
    char v57 = v4;
    sub_1000136F4(v2, (uint64_t)v14, (uint64_t *)&unk_100487D20);
    swift_errorRetain();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v52 = (uint64_t)v28;
    os_log_type_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    int v31 = v30;
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v32 = swift_slowAlloc();
      uint64_t v49 = (void *)swift_slowAlloc();
      uint64_t v51 = swift_slowAlloc();
      uint64_t v56 = v51;
      *(_DWORD *)uint64_t v32 = 136315906;
      int v50 = v31;
      uint64_t v33 = *v19;
      unint64_t v34 = v19[1];
      swift_bridgeObjectRetain();
      uint64_t v55 = sub_100010680(v33, v34, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000380B4((uint64_t)v19, (uint64_t *)&unk_100487D20);
      *(_WORD *)(v32 + 12)  = 2080;
      uint64_t v35 = (*(uint64_t (**)(char *))&v17[v5[15]])(&v57);
      uint64_t v55 = sub_100010680(v35, v36, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000380B4((uint64_t)v17, (uint64_t *)&unk_100487D20);
      *(_WORD *)(v32 + 22)  = 2080;
      uint64_t v37 = (*(uint64_t (**)(char *))&v14[v5[15]])(&v14[v5[10]]);
      uint64_t v55 = sub_100010680(v37, v38, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000380B4((uint64_t)v14, (uint64_t *)&unk_100487D20);
      *(_WORD *)(v32 + 32)  = 2112;
      swift_errorRetain();
      uint64_t v39 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v55 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v49 = v39;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, (os_log_type_t)v50, "Failed to update %s to %s (from %s) because %@", (uint8_t *)v32, 0x2Au);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      sub_1000380B4((uint64_t)v19, (uint64_t *)&unk_100487D20);
      sub_1000380B4((uint64_t)v17, (uint64_t *)&unk_100487D20);
      sub_1000380B4((uint64_t)v14, (uint64_t *)&unk_100487D20);
      swift_errorRelease();
      swift_errorRelease();
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 8))(v52, v54);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v23, v2 + v5[9], v26);
    sub_1000136F4(v2, (uint64_t)v11, (uint64_t *)&unk_100487D20);
    sub_1000136F4(v2, (uint64_t)v8, (uint64_t *)&unk_100487D20);
    char v57 = v4;
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = swift_slowAlloc();
      uint64_t v52 = swift_slowAlloc();
      uint64_t v56 = v52;
      *(_DWORD *)uint64_t v42 = 136315394;
      uint64_t v44 = *v11;
      unint64_t v43 = v11[1];
      swift_bridgeObjectRetain();
      uint64_t v55 = sub_100010680(v44, v43, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000380B4((uint64_t)v11, (uint64_t *)&unk_100487D20);
      *(_WORD *)(v42 + 12)  = 2080;
      uint64_t v45 = (*(uint64_t (**)(char *))&v8[v5[15]])(&v57);
      uint64_t v55 = sub_100010680(v45, v46, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000380B4((uint64_t)v8, (uint64_t *)&unk_100487D20);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Successfully updated %s to %s", (uint8_t *)v42, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000380B4((uint64_t)v11, (uint64_t *)&unk_100487D20);
      sub_1000380B4((uint64_t)v8, (uint64_t *)&unk_100487D20);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v23, v54);
  }
}

uint64_t sub_10026BF3C(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v52 = sub_100010BCC((uint64_t *)&unk_100487CB0);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v9 = (uint64_t *)((char *)&v44 - v8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v44 - v10;
  __chkstk_darwin();
  unint64_t v51 = (unint64_t)&v44 - v12;
  __chkstk_darwin();
  os_log_t v50 = (os_log_t)((char *)&v44 - v13);
  type metadata accessor for Logger();
  __chkstk_darwin();
  uint64_t v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin();
  uint64_t v20 = (char *)&v44 - v17;
  uint64_t v48 = v19;
  uint64_t v49 = v16;
  if (a1)
  {
    long long v47 = (char *)(a2 >> 40);
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))((char *)&v44 - v17, v3 + *(int *)(v52 + 36), v18);
    sub_1000136F4(v3, (uint64_t)v50, (uint64_t *)&unk_100487CB0);
    sub_1000136F4(v3, v51, (uint64_t *)&unk_100487CB0);
    __int16 v55 = a2;
    char v56 = BYTE2(a2);
    char v57 = BYTE3(a2);
    char v58 = BYTE4(a2);
    char v59 = (char)v47;
    sub_1000136F4(v3, (uint64_t)v11, (uint64_t *)&unk_100487CB0);
    swift_errorRetain();
    swift_errorRetain();
    swift_errorRetain();
    long long v47 = v20;
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v45 = (void *)swift_slowAlloc();
      uint64_t v46 = swift_slowAlloc();
      uint64_t v54 = v46;
      *(_DWORD *)uint64_t v23 = 136315906;
      os_log_t v24 = v50;
      isa  = v50->isa;
      Class v26 = v50[1].isa;
      swift_bridgeObjectRetain();
      uint64_t v53 = sub_100010680((uint64_t)isa, (unint64_t)v26, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000380B4((uint64_t)v24, (uint64_t *)&unk_100487CB0);
      *(_WORD *)(v23 + 12)  = 2080;
      os_log_t v50 = v21;
      uint64_t v27 = (uint64_t)v11;
      uint64_t v29 = v51;
      uint64_t v28 = v52;
      uint64_t v30 = (*(uint64_t (**)(__int16 *))(v51 + *(int *)(v52 + 60)))(&v55);
      uint64_t v53 = sub_100010680(v30, v31, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000380B4(v29, (uint64_t *)&unk_100487CB0);
      *(_WORD *)(v23 + 22)  = 2080;
      uint64_t v32 = (*(uint64_t (**)(uint64_t))(v27 + *(int *)(v28 + 60)))(v27 + *(int *)(v28 + 40));
      uint64_t v53 = sub_100010680(v32, v33, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000380B4(v27, (uint64_t *)&unk_100487CB0);
      *(_WORD *)(v23 + 32)  = 2112;
      swift_errorRetain();
      uint64_t v34 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v53 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v45 = v34;
      swift_errorRelease();
      swift_errorRelease();
      os_log_t v35 = v50;
      _os_log_impl((void *)&_mh_execute_header, v50, v22, "Failed to update %s to %s (from %s) because %@", (uint8_t *)v23, 0x2Au);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      sub_1000380B4((uint64_t)v50, (uint64_t *)&unk_100487CB0);
      sub_1000380B4(v51, (uint64_t *)&unk_100487CB0);
      sub_1000380B4((uint64_t)v11, (uint64_t *)&unk_100487CB0);
      swift_errorRelease();
      swift_errorRelease();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v47, v49);
  }
  else
  {
    unint64_t v51 = a2 >> 40;
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v15, v3 + *(int *)(v52 + 36), v18);
    sub_1000136F4(v3, (uint64_t)v9, (uint64_t *)&unk_100487CB0);
    sub_1000136F4(v3, (uint64_t)v7, (uint64_t *)&unk_100487CB0);
    __int16 v55 = a2;
    char v56 = BYTE2(a2);
    char v57 = BYTE3(a2);
    char v58 = BYTE4(a2);
    char v59 = v51;
    unint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = swift_slowAlloc();
      uint64_t v54 = swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 136315394;
      uint64_t v39 = *v9;
      unint64_t v40 = v9[1];
      swift_bridgeObjectRetain();
      uint64_t v53 = sub_100010680(v39, v40, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000380B4((uint64_t)v9, (uint64_t *)&unk_100487CB0);
      *(_WORD *)(v38 + 12)  = 2080;
      uint64_t v41 = (*(uint64_t (**)(__int16 *))&v7[*(int *)(v52 + 60)])(&v55);
      uint64_t v53 = sub_100010680(v41, v42, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000380B4((uint64_t)v7, (uint64_t *)&unk_100487CB0);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Successfully updated %s to %s", (uint8_t *)v38, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000380B4((uint64_t)v9, (uint64_t *)&unk_100487CB0);
      sub_1000380B4((uint64_t)v7, (uint64_t *)&unk_100487CB0);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v15, v49);
  }
}

uint64_t sub_10026C6C4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (int *)sub_100010BCC(&qword_100483C08);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v9 = (uint64_t *)((char *)&v42 - v8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v42 - v10;
  __chkstk_darwin();
  uint64_t v13 = (char *)&v42 - v12;
  __chkstk_darwin();
  uint64_t v15 = (uint64_t *)((char *)&v42 - v14);
  type metadata accessor for Logger();
  __chkstk_darwin();
  uint64_t v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin();
  uint64_t v47 = v21;
  uint64_t v48 = v18;
  if (a1)
  {
    os_log_type_t v22 = (char *)&v42 - v19;
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))((char *)&v42 - v19, v2 + v5[9], v20);
    sub_1000136F4(v2, (uint64_t)v15, &qword_100483C08);
    sub_1000136F4(v2, (uint64_t)v13, &qword_100483C08);
    int v51 = a2;
    char v52 = BYTE4(a2) & 1;
    sub_1000136F4(v2, (uint64_t)v11, &qword_100483C08);
    swift_errorRetain();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v46 = (uint64_t)v22;
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      uint64_t v44 = (void *)swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      uint64_t v50 = v45;
      *(_DWORD *)uint64_t v25 = 136315906;
      os_log_t v43 = v23;
      uint64_t v26 = *v15;
      unint64_t v27 = v15[1];
      swift_bridgeObjectRetain();
      uint64_t v49 = sub_100010680(v26, v27, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000380B4((uint64_t)v15, &qword_100483C08);
      *(_WORD *)(v25 + 12)  = 2080;
      uint64_t v28 = (*(uint64_t (**)(int *))&v13[v5[15]])(&v51);
      uint64_t v49 = sub_100010680(v28, v29, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000380B4((uint64_t)v13, &qword_100483C08);
      *(_WORD *)(v25 + 22)  = 2080;
      uint64_t v30 = (*(uint64_t (**)(char *))&v11[v5[15]])(&v11[v5[10]]);
      uint64_t v49 = sub_100010680(v30, v31, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000380B4((uint64_t)v11, &qword_100483C08);
      *(_WORD *)(v25 + 32)  = 2112;
      swift_errorRetain();
      uint64_t v32 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v49 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v44 = v32;
      swift_errorRelease();
      swift_errorRelease();
      os_log_t v33 = v43;
      _os_log_impl((void *)&_mh_execute_header, v43, v24, "Failed to update %s to %s (from %s) because %@", (uint8_t *)v25, 0x2Au);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      sub_1000380B4((uint64_t)v15, &qword_100483C08);
      sub_1000380B4((uint64_t)v13, &qword_100483C08);
      sub_1000380B4((uint64_t)v11, &qword_100483C08);
      swift_errorRelease();
      swift_errorRelease();
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 8))(v46, v48);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v17, v2 + v5[9], v20);
    sub_1000136F4(v2, (uint64_t)v9, &qword_100483C08);
    sub_1000136F4(v2, (uint64_t)v7, &qword_100483C08);
    int v51 = a2;
    char v52 = BYTE4(a2) & 1;
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = swift_slowAlloc();
      uint64_t v46 = swift_slowAlloc();
      uint64_t v50 = v46;
      *(_DWORD *)uint64_t v36 = 136315394;
      uint64_t v38 = *v9;
      unint64_t v37 = v9[1];
      swift_bridgeObjectRetain();
      uint64_t v49 = sub_100010680(v38, v37, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000380B4((uint64_t)v9, &qword_100483C08);
      *(_WORD *)(v36 + 12)  = 2080;
      uint64_t v39 = (*(uint64_t (**)(int *))&v7[v5[15]])(&v51);
      uint64_t v49 = sub_100010680(v39, v40, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000380B4((uint64_t)v7, &qword_100483C08);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Successfully updated %s to %s", (uint8_t *)v36, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000380B4((uint64_t)v9, &qword_100483C08);
      sub_1000380B4((uint64_t)v7, &qword_100483C08);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v17, v48);
  }
}

uint64_t sub_10026CDD8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (int *)sub_100010BCC(&qword_100483C10);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (uint64_t *)((char *)&v50 - v10);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v50 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v50 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (uint64_t *)((char *)&v50 - v18);
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v55 = v27;
  uint64_t v56 = v24;
  if (a1)
  {
    uint64_t v28 = (char *)&v50 - v25;
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))((char *)&v50 - v25, v2 + v5[9], v26);
    sub_1000136F4(v2, (uint64_t)v19, &qword_100483C10);
    sub_1000136F4(v2, (uint64_t)v17, &qword_100483C10);
    uint64_t v59 = a2;
    sub_1000136F4(v2, (uint64_t)v14, &qword_100483C10);
    swift_errorRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    uint64_t v54 = (uint64_t)v28;
    unint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    int v31 = v30;
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v32 = swift_slowAlloc();
      int v51 = (void *)swift_slowAlloc();
      uint64_t v53 = swift_slowAlloc();
      uint64_t v58 = v53;
      *(_DWORD *)uint64_t v32 = 136315906;
      int v52 = v31;
      os_log_t v50 = v29;
      uint64_t v33 = *v19;
      unint64_t v34 = v19[1];
      swift_bridgeObjectRetain();
      uint64_t v57 = sub_100010680(v33, v34, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000380B4((uint64_t)v19, &qword_100483C10);
      *(_WORD *)(v32 + 12)  = 2080;
      uint64_t v35 = (*(uint64_t (**)(uint64_t *))&v17[v5[15]])(&v59);
      uint64_t v57 = sub_100010680(v35, v36, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000380B4((uint64_t)v17, &qword_100483C10);
      swift_bridgeObjectRelease();
      *(_WORD *)(v32 + 22)  = 2080;
      uint64_t v37 = (*(uint64_t (**)(char *))&v14[v5[15]])(&v14[v5[10]]);
      uint64_t v57 = sub_100010680(v37, v38, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000380B4((uint64_t)v14, &qword_100483C10);
      *(_WORD *)(v32 + 32)  = 2112;
      swift_errorRetain();
      uint64_t v39 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v57 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *int v51 = v39;
      swift_errorRelease();
      swift_errorRelease();
      os_log_t v40 = v50;
      _os_log_impl((void *)&_mh_execute_header, v50, (os_log_type_t)v52, "Failed to update %s to %s (from %s) because %@", (uint8_t *)v32, 0x2Au);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      sub_1000380B4((uint64_t)v19, &qword_100483C10);
      swift_bridgeObjectRelease();
      sub_1000380B4((uint64_t)v17, &qword_100483C10);
      swift_bridgeObjectRelease();
      sub_1000380B4((uint64_t)v14, &qword_100483C10);
      swift_errorRelease();
      swift_errorRelease();
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 8))(v54, v56);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v23, v2 + v5[9], v26);
    sub_1000136F4(v2, (uint64_t)v11, &qword_100483C10);
    sub_1000136F4(v2, (uint64_t)v8, &qword_100483C10);
    uint64_t v59 = a2;
    swift_bridgeObjectRetain_n();
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.default.getter();
    int v43 = v42;
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v44 = swift_slowAlloc();
      uint64_t v54 = swift_slowAlloc();
      uint64_t v58 = v54;
      *(_DWORD *)uint64_t v44 = 136315394;
      LODWORD(v53)  = v43;
      uint64_t v46 = *v11;
      unint64_t v45 = v11[1];
      swift_bridgeObjectRetain();
      uint64_t v57 = sub_100010680(v46, v45, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000380B4((uint64_t)v11, &qword_100483C10);
      *(_WORD *)(v44 + 12)  = 2080;
      uint64_t v47 = (*(uint64_t (**)(uint64_t *))&v8[v5[15]])(&v59);
      uint64_t v57 = sub_100010680(v47, v48, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000380B4((uint64_t)v8, &qword_100483C10);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v41, (os_log_type_t)v53, "Successfully updated %s to %s", (uint8_t *)v44, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000380B4((uint64_t)v11, &qword_100483C10);
      swift_bridgeObjectRelease();
      sub_1000380B4((uint64_t)v8, &qword_100483C10);

      swift_bridgeObjectRelease();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v23, v56);
  }
}

uint64_t sub_10026D544(uint64_t a1, NSObject *a2, uint64_t a3)
{
  os_log_t v73 = a2;
  uint64_t v78 = *(void *)(a3 + 16);
  uint64_t v77 = *(void *)(v78 - 8);
  uint64_t v6 = __chkstk_darwin(a1);
  uint64_t v72 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  unint64_t v76 = (char *)&v67 - v9;
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v8);
  uint64_t v14 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (uint64_t *)((char *)&v67 - v16);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v67 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (char *)&v67 - v22;
  __chkstk_darwin(v21);
  uint64_t v25 = (uint64_t *)((char *)&v67 - v24);
  uint64_t v26 = type metadata accessor for Logger();
  uint64_t v27 = __chkstk_darwin(v26);
  unint64_t v29 = (char *)&v67 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __chkstk_darwin(v27);
  uint64_t v74 = v33;
  uint64_t v75 = v30;
  if (a1)
  {
    unint64_t v34 = ((char *)&v67 - v31);
    (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))((char *)&v67 - v31, v3 + *(int *)(a3 + 36), v32);
    uint64_t v35 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v11 + 16);
    v35(v25, v3, a3);
    v35((uint64_t *)v23, v3, a3);
    (*(void (**)(char *, os_log_t, uint64_t))(v77 + 16))(v76, v73, v78);
    v35((uint64_t *)v20, v3, a3);
    swift_errorRetain();
    swift_errorRetain();
    swift_errorRetain();
    os_log_t v73 = v34;
    unint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    int v38 = v37;
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v39 = swift_slowAlloc();
      os_log_t v71 = v36;
      uint64_t v40 = v39;
      long long v69 = (void *)swift_slowAlloc();
      uint64_t v72 = (char *)swift_slowAlloc();
      uint64_t v80 = v72;
      *(_DWORD *)uint64_t v40 = 136315906;
      int v70 = v38;
      uint64_t v41 = *v25;
      unint64_t v42 = v25[1];
      swift_bridgeObjectRetain();
      uint64_t v79 = sub_100010680(v41, v42, (uint64_t *)&v80);
      os_log_type_t v67 = (uint64_t *)&v80;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      int v43 = *(void (**)(uint64_t *, uint64_t))(v11 + 8);
      v43(v25, a3);
      uint64_t v68 = v20;
      *(_WORD *)(v40 + 12)  = 2080;
      uint64_t v44 = v76;
      uint64_t v45 = (*(uint64_t (**)(char *))&v23[*(int *)(a3 + 60)])(v76);
      uint64_t v79 = sub_100010680(v45, v46, (uint64_t *)&v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v43((uint64_t *)v23, a3);
      (*(void (**)(char *, uint64_t))(v77 + 8))(v44, v78);
      *(_WORD *)(v40 + 22)  = 2080;
      uint64_t v47 = v68;
      uint64_t v48 = (*(uint64_t (**)(char *))&v68[*(int *)(a3 + 60)])(&v68[*(int *)(a3 + 40)]);
      uint64_t v79 = sub_100010680(v48, v49, (uint64_t *)&v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v43((uint64_t *)v47, a3);
      *(_WORD *)(v40 + 32)  = 2112;
      swift_errorRetain();
      uint64_t v50 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v79 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *long long v69 = v50;
      swift_errorRelease();
      swift_errorRelease();
      os_log_t v51 = v71;
      _os_log_impl((void *)&_mh_execute_header, v71, (os_log_type_t)v70, "Failed to update %s to %s (from %s) because %@", (uint8_t *)v40, 0x2Au);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      long long v64 = *(void (**)(uint64_t *, uint64_t))(v11 + 8);
      v64(v25, a3);
      v64((uint64_t *)v23, a3);
      (*(void (**)(char *, uint64_t))(v77 + 8))(v76, v78);
      v64((uint64_t *)v20, a3);
      swift_errorRelease();
      swift_errorRelease();
    }
    return (*(uint64_t (**)(os_log_t, uint64_t))(v74 + 8))(v73, v75);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v29, v3 + *(int *)(a3 + 36), v32);
    int v52 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v11 + 16);
    v52(v17, v3, a3);
    v52((uint64_t *)v14, v3, a3);
    (*(void (**)(char *, os_log_t, uint64_t))(v77 + 16))(v72, v73, v78);
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.default.getter();
    int v55 = v54;
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v56 = swift_slowAlloc();
      unint64_t v76 = (char *)swift_slowAlloc();
      uint64_t v80 = v76;
      *(_DWORD *)uint64_t v56 = 136315394;
      os_log_t v73 = v53;
      uint64_t v57 = *v17;
      unint64_t v58 = v17[1];
      swift_bridgeObjectRetain();
      uint64_t v79 = sub_100010680(v57, v58, (uint64_t *)&v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      LODWORD(v71)  = v55;
      uint64_t v59 = *(void (**)(uint64_t *, uint64_t))(v11 + 8);
      v59(v17, a3);
      *(_WORD *)(v56 + 12)  = 2080;
      uint64_t v60 = v72;
      uint64_t v61 = (*(uint64_t (**)(char *))&v14[*(int *)(a3 + 60)])(v72);
      uint64_t v79 = sub_100010680(v61, v62, (uint64_t *)&v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v59((uint64_t *)v14, a3);
      (*(void (**)(char *, uint64_t))(v77 + 8))(v60, v78);
      os_log_t v63 = v73;
      _os_log_impl((void *)&_mh_execute_header, v73, (os_log_type_t)v71, "Successfully updated %s to %s", (uint8_t *)v56, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v66 = *(void (**)(uint64_t *, uint64_t))(v11 + 8);
      v66(v17, a3);
      v66((uint64_t *)v14, a3);
      (*(void (**)(char *, uint64_t))(v77 + 8))(v72, v78);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v74 + 8))(v29, v75);
  }
}

void (*MutableDriverProperty.wrappedValue.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v5 = malloc(0x30uLL);
  *a1  = v5;
  *uint64_t v5 = a2;
  v5[1]  = v2;
  uint64_t v6 = *(void *)(a2 + 16);
  v5[2]  = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v5[3]  = v7;
  size_t v9 = *(void *)(v7 + 64);
  v5[4]  = malloc(v9);
  v5[5]  = malloc(v9);
  (*(void (**)(void))(v8 + 16))();
  return sub_10026DF14;
}

void sub_10026DF14(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[4];
  char v4 = (*a1)[5];
  uint64_t v5 = (*a1)[2];
  uint64_t v6 = (*a1)[3];
  uint64_t v7 = **a1;
  if (a2)
  {
    (*(void (**)(uint64_t, NSObject *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    sub_100271CDC(v3, v7);
    uint64_t v8 = *(void (**)(NSObject *, uint64_t))(v6 + 8);
    v8(v3, v5);
    v8(v4, v5);
  }
  else
  {
    sub_100271CDC((*a1)[5], v7);
    (*(void (**)(NSObject *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t MutableDriverProperty.updated(value:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  size_t v9 = (char *)&v14 - v8;
  uint64_t v10 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v5) == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v2 + *(int *)(a2 + 40), v5);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v9, v5);
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 40))(v2 + *(int *)(a2 + 40), v12, v5);
}

Swift::Void __swiftcall MutableDriverProperty.restore()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  char v4 = v0 - 2;
  uint64_t v5 = *((void *)v0 - 1);
  __chkstk_darwin();
  __chkstk_darwin();
  __chkstk_darwin();
  uint64_t v7 = (char *)&v26 - v6;
  __chkstk_darwin();
  size_t v9 = (uint64_t *)((char *)&v26 - v8);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v30 = *(void *)(v10 - 8);
  uint64_t v31 = v10;
  __chkstk_darwin();
  unint64_t v29 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v26 - v12;
  (*(void (**)(uint64_t))(v2 + v4[13]))(v2 + v4[12]);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v13, v2 + v3[9], v31);
  uint64_t v14 = *(void (**)(uint64_t *, uint64_t, int *))(v5 + 16);
  v14(v9, v2, v3);
  v14((uint64_t *)v7, v2, v3);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  int v17 = v16;
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v18 = swift_slowAlloc();
    LODWORD(v28)  = v17;
    uint64_t v19 = v18;
    unint64_t v29 = (char *)swift_slowAlloc();
    v33[0]  = (uint64_t)v29;
    *(_DWORD *)uint64_t v19 = 136315394;
    os_log_t v27 = v15;
    uint64_t v21 = *v9;
    unint64_t v20 = v9[1];
    swift_bridgeObjectRetain();
    uint64_t v32 = sub_100010680(v21, v20, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v22 = *(void (**)(uint64_t *, int *))(v5 + 8);
    v22(v9, v3);
    *(_WORD *)(v19 + 12)  = 2080;
    uint64_t v23 = (*(uint64_t (**)(char *))&v7[v3[15]])(&v7[v3[10]]);
    uint64_t v32 = sub_100010680(v23, v24, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v22((uint64_t *)v7, v3);
    uint64_t v15 = v27;
    _os_log_impl((void *)&_mh_execute_header, v27, (os_log_type_t)v28, "Successfully restored %s to %s after a reset", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v25 = *(void (**)(uint64_t *, int *))(v5 + 8);
    v25(v9, v3);
    v25((uint64_t *)v7, v3);
  }

  (*(void (**)(char *, uint64_t))(v30 + 8))(v13, v31);
}

uint64_t (*ObservableWiFiProperty.projectedValue.modify(void *a1, uint64_t a2))()
{
  uint64_t v5 = malloc(0x30uLL);
  *a1  = v5;
  *uint64_t v5 = a2;
  v5[1]  = v2;
  uint64_t v6 = *(void *)(a2 - 8);
  uint64_t v7 = v6;
  v5[2]  = v6;
  v5[3]  = v6;
  size_t v8 = *(void *)(v6 + 64);
  v5[4]  = malloc(v8);
  v5[5]  = malloc(v8);
  (*(void (**)(void))(v7 + 16))();
  return sub_10026E9BC;
}

uint64_t MutableDriverProperty.customMirror.getter(uint64_t a1)
{
  uint64_t v2 = v1 + *(int *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v3 = v7;
  char v4 = sub_1000382F0(v6);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(v4, v2, v3);
  return Mirror.init(reflecting:)();
}

uint64_t MutableDriverProperty<>.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_10026EA74()
{
  return MutableDriverProperty<>.description.getter();
}

uint64_t MutableDriverProperty<>.debugDescription.getter()
{
  return dispatch thunk of CustomDebugStringConvertible.debugDescription.getter();
}

uint64_t sub_10026EAA8()
{
  return MutableDriverProperty<>.debugDescription.getter();
}

uint64_t WiFiPropertyUpdateRegistration.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_id;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t WiFiPropertyUpdateRegistration.__allocating_init(cancellationHandler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  UUID.init()();
  uint64_t v5 = (void *)(v4 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_cancellationHandler);
  *uint64_t v5 = a1;
  v5[1]  = a2;
  return v4;
}

uint64_t WiFiPropertyUpdateRegistration.init(cancellationHandler:)(uint64_t a1, uint64_t a2)
{
  UUID.init()();
  uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_cancellationHandler);
  *uint64_t v5 = a1;
  v5[1]  = a2;
  return v2;
}

uint64_t WiFiPropertyUpdateRegistration.deinit()
{
  uint64_t v1 = v0;
  (*(void (**)(uint64_t))(v0 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_cancellationHandler))(v0);
  uint64_t v2 = v0 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_id;
  uint64_t v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_release();
  return v1;
}

uint64_t WiFiPropertyUpdateRegistration.__deallocating_deinit()
{
  (*(void (**)(uint64_t))(v0 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_cancellationHandler))(v0);
  uint64_t v1 = v0 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_id;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t WiFiPropertyUpdateRegistration.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t static WiFiPropertyUpdateRegistration.== infix(_:_:)()
{
  return static UUID.== infix(_:_:)();
}

Swift::Int WiFiPropertyUpdateRegistration.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t sub_10026EE68@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_id;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

Swift::Int sub_10026EEE0()
{
  return Hasher._finalize()();
}

uint64_t sub_10026EF78()
{
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int sub_10026F000()
{
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(**(void **)v0 + 104))(v2);
  return Hasher._finalize()();
}

uint64_t sub_10026F060()
{
  return static UUID.== infix(_:_:)();
}

void sub_10026F07C()
{
}

uint64_t sub_10026F0AC()
{
  return swift_release();
}

uint64_t sub_10026F0C0()
{
  uint64_t v1 = v0;
  (*(void (**)(uint64_t))(v0 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_cancellationHandler))(v0);
  uint64_t v2 = v0 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_id;
  uint64_t v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_10026F168()
{
  sub_10026F0C0();

  return swift_deallocClassInstance();
}

uint64_t sub_10026F1BC()
{
  return sub_10026F1F0();
}

uint64_t sub_10026F1F0()
{
  type metadata accessor for UUID();
  type metadata accessor for ObservableWiFiProperty.TokenRegistrations.WeakToken();
  sub_1002761AC(&qword_100487710, (void (*)(uint64_t))&type metadata accessor for UUID);
  *(void *)(v0 + 16)  = Dictionary.init()();
  return v0;
}

uint64_t sub_10026F2A4(int *a1)
{
  uint64_t v3 = *((void *)a1 - 1);
  __chkstk_darwin();
  uint64_t v5 = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v7 = (uint64_t (**)(char *))((char *)v30 - v6);
  __chkstk_darwin();
  size_t v9 = (char *)v30 - v8;
  uint64_t v10 = type metadata accessor for Logger();
  __chkstk_darwin();
  uint64_t v12 = (char *)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = v1 + a1[13];
  uint64_t v35 = v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v12, v13, v10);
  uint64_t v15 = *(void (**)(char *, uint64_t, int *))(v3 + 16);
  v15(v9, v1, a1);
  v15((char *)v7, v1, a1);
  v15(v5, v1, a1);
  os_log_type_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  int v18 = v17;
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    uint64_t v38 = v33;
    *(_DWORD *)uint64_t v19 = 136315650;
    os_log_t v32 = v16;
    unint64_t v20 = (uint64_t *)&v9[a1[12]];
    uint64_t v34 = v10;
    int v31 = v18;
    uint64_t v22 = *v20;
    unint64_t v21 = v20[1];
    swift_bridgeObjectRetain();
    uint64_t v37 = sub_100010680(v22, v21, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v23 = *(void (**)(char *, int *))(v3 + 8);
    v23(v9, a1);
    *(_WORD *)(v19 + 12)  = 2080;
    uint64_t v24 = (*v7)((char *)v7 + a1[11]);
    uint64_t v37 = sub_100010680(v24, v25, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v23((char *)v7, a1);
    *(_WORD *)(v19 + 22)  = 2048;
    v30[1]  = v19 + 24;
    swift_beginAccess();
    type metadata accessor for UUID();
    type metadata accessor for ObservableWiFiProperty.TokenRegistrations.WeakToken();
    sub_1002761AC(&qword_100487710, (void (*)(uint64_t))&type metadata accessor for UUID);
    swift_bridgeObjectRetain();
    uint64_t v26 = Dictionary.count.getter();
    swift_bridgeObjectRelease();
    v23(v5, a1);
    uint64_t v36 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    os_log_t v27 = v32;
    _os_log_impl((void *)&_mh_execute_header, v32, (os_log_type_t)v31, "Updated %s to %s, will notify %ld observers", (uint8_t *)v19, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v12, v34);
  }
  else
  {
    unint64_t v29 = *(void (**)(char *, int *))(v3 + 8);
    v29(v5, a1);
    v29(v9, a1);
    v29((char *)v7, a1);

    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v12, v10);
  }
}

uint64_t ObservableWiFiProperty.name.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 48));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t ObservableWiFiProperty.init(lock:defaultValue:name:logger:valueDescriber:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(char *)@<X5>, uint64_t (*a7)(char *)@<X6>, uint64_t a8@<X7>, uint64_t (**a9)(char *)@<X8>)
{
  uint64_t v40 = a6;
  uint64_t v41 = a5;
  unint64_t v34 = a4;
  uint64_t v15 = *(void *)(a8 - 8);
  __chkstk_darwin(a1);
  os_log_type_t v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ObservableWiFiProperty.TokenRegistrations();
  swift_allocObject();
  a9[2]  = (uint64_t (*)(char *))sub_10026F1F0();
  a9[3]  = a1;
  int v18 = (int *)type metadata accessor for ObservableWiFiProperty();
  uint64_t v19 = (uint64_t *)((char *)a9 + v18[12]);
  uint64_t v33 = a3;
  *uint64_t v19 = a3;
  unint64_t v20 = v34;
  v19[1]  = v34;
  unint64_t v21 = (char *)a9 + v18[13];
  uint64_t v22 = type metadata accessor for Logger();
  uint64_t v35 = *(void *)(v22 - 8);
  uint64_t v36 = v22;
  (*(void (**)(char *, uint64_t))(v35 + 16))(v21, v41);
  *a9  = v40;
  a9[1]  = a7;
  uint64_t v23 = (char *)a9 + v18[11];
  uint64_t v37 = v15;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v24(v23, a2, a8);
  uint64_t v39 = a2;
  v24(v17, a2, a8);
  uint64_t v38 = a7;
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_retain();
  unint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    uint64_t v43 = v32;
    *(_DWORD *)uint64_t v27 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v42 = sub_100010680(v33, v20, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v27 + 12)  = 2080;
    uint64_t v28 = v40(v17);
    uint64_t v42 = sub_100010680(v28, v29, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    uint64_t v30 = *(void (**)(char *, uint64_t))(v37 + 8);
    v30(v17, a8);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Initialized value for %s to %s", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_release();
    swift_release();
  }
  else
  {

    swift_release();
    swift_release_n();
    uint64_t v30 = *(void (**)(char *, uint64_t))(v37 + 8);
    v30(v17, a8);
    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v41, v36);
  return ((uint64_t (*)(uint64_t, uint64_t))v30)(v39, a8);
}

void ObservableWiFiProperty.wrappedValue.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  os_unfair_lock_lock(*(os_unfair_lock_t *)(*(void *)(v2 + 24) + 16));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 44));
  uint64_t v5 = *(os_unfair_lock_s **)(*(void *)(v2 + 24) + 16);

  os_unfair_lock_unlock(v5);
}

uint64_t ObservableWiFiProperty.wrappedValue.setter(char *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  size_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  os_log_type_t v26 = (char *)&v22 - v10;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(*(void *)(v3 + 24) + 16));
  uint64_t v11 = v3 + *(int *)(a2 + 44);
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v12(v9, v11, v6);
  uint64_t v13 = a1;
  uint64_t v23 = *(void *)(a2 + 24);
  LOBYTE(a1)  = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v24 = *(void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v25 = v7 + 8;
  v24(v9, v6);
  if (a1)
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(*(void *)(v3 + 24) + 16));
    return ((uint64_t (*)(char *, uint64_t))v24)(v13, v6);
  }
  else
  {
    v12(v26, v11, v6);
    uint64_t v15 = v13;
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 24))(v3 + *(int *)(a2 + 44), v13, v6);
    sub_10026F2A4((int *)a2);
    uint64_t v16 = *(void *)(v3 + 16);
    swift_beginAccess();
    uint64_t v17 = *(void *)(v16 + 16);
    type metadata accessor for UUID();
    uint64_t v18 = v23;
    type metadata accessor for ObservableWiFiProperty.TokenRegistrations.WeakToken();
    sub_1002761AC(&qword_100487710, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v27 = NANBitmap.Channel.operatingClass.getter(v17);
    __chkstk_darwin();
    *(&v22 - 2)  = v6;
    *(&v22 - 1)  = v18;
    type metadata accessor for Dictionary.Values();
    swift_getFunctionTypeMetadata2();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    uint64_t v19 = Sequence.compactMap<A>(_:)();
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(*(void *)(v3 + 24) + 16));
    uint64_t v27 = v19;
    __chkstk_darwin();
    *(&v22 - 4)  = v6;
    *(&v22 - 3)  = v18;
    unint64_t v20 = v26;
    *(&v22 - 2)  = (uint64_t)v26;
    *(&v22 - 1)  = (uint64_t)v15;
    type metadata accessor for Array();
    swift_getWitnessTable();
    Sequence.forEach(_:)();
    swift_bridgeObjectRelease();
    unint64_t v21 = (uint64_t (*)(char *, uint64_t))v24;
    v24(v15, v6);
    return v21(v20, v6);
  }
}

uint64_t (*sub_100270044@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t (**a3)()@<X8>))()
{
  uint64_t result = (uint64_t (*)())swift_weakLoadStrong();
  if (result)
  {
    uint64_t v8 = *(void *)((char *)result + qword_100483F40);
    uint64_t v7 = *(void *)((char *)result + qword_100483F40 + 8);
    swift_retain();
    swift_release();
    uint64_t result = (uint64_t (*)())swift_allocObject();
    *((void *)result + 2)  = a1;
    *((void *)result + 3)  = a2;
    *((void *)result + 4)  = v8;
    *((void *)result + 5)  = v7;
    size_t v9 = sub_10027622C;
  }
  else
  {
    size_t v9 = 0;
  }
  *a3  = v9;
  a3[1]  = result;
  return result;
}

void (*ObservableWiFiProperty.wrappedValue.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v5 = malloc(0x30uLL);
  *a1  = v5;
  *uint64_t v5 = a2;
  v5[1]  = v2;
  uint64_t v6 = *(void *)(a2 + 16);
  v5[2]  = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[3]  = v7;
  size_t v8 = *(void *)(v7 + 64);
  v5[4]  = malloc(v8);
  size_t v9 = malloc(v8);
  v5[5]  = v9;
  ObservableWiFiProperty.wrappedValue.getter(a2, (uint64_t)v9);
  return sub_1002701BC;
}

void sub_1002701BC(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (char *)(*a1)[4];
  uint64_t v4 = (void *)(*a1)[5];
  if (a2)
  {
    uint64_t v5 = v2[2];
    uint64_t v6 = v2[3];
    uint64_t v7 = *v2;
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    ObservableWiFiProperty.wrappedValue.setter(v3, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    ObservableWiFiProperty.wrappedValue.setter((char *)(*a1)[5], *v2);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t _s7CoreP2P22ObservableWiFiPropertyV14projectedValueACyxGvs_0(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(a2 - 8);
  (*(void (**)(uint64_t))(v7 + 8))(v2);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);

  return v5(v2, a1, a2);
}

void sub_100270334(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 32);
  uint64_t v4 = *(void **)(*(void *)a1 + 40);
  if (a2)
  {
    uint64_t v5 = v2[2];
    uint64_t v6 = v2[3];
    uint64_t v8 = *v2;
    uint64_t v7 = v2[1];
    (*(void (**)(void, void *, void))(v6 + 16))(*(void *)(*(void *)a1 + 32), v4, *v2);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
    (*(void (**)(uint64_t, void *, uint64_t))(v5 + 32))(v7, v3, v8);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v8);
  }
  else
  {
    uint64_t v9 = v2[1];
    uint64_t v10 = *v2;
    uint64_t v11 = v2[2];
    (*(void (**)(uint64_t, void))(v11 + 8))(v9, *v2);
    (*(void (**)(uint64_t, void *, uint64_t))(v11 + 32))(v9, v4, v10);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t ObservableWiFiProperty.registerForChanges(on:using:valueUpdateHandler:)@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v27 = a6;
  uint64_t v28 = a2;
  uint64_t v25 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v24 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = a5;
  uint64_t v14 = *(void *)(a5 + 16);
  uint64_t v15 = *(void *)(a5 + 24);
  v23[1]  = type metadata accessor for ObservableWiFiProperty.Token();
  uint64_t v16 = (void *)swift_allocObject();
  void v16[2] = v14;
  v16[3]  = v15;
  void v16[4] = a1;
  void v16[5] = a3;
  v16[6]  = a4;
  uint64_t v17 = *(void *)(v7 + 16);
  uint64_t v18 = *(void *)(v7 + 24);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16)  = v18;
  *(void *)(v19 + 24)  = v17;
  id v20 = a1;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v21 = sub_1002720C4((uint64_t)sub_100272218, (uint64_t)v16, (uint64_t)sub_100272268, v19);
  swift_release();
  os_unfair_lock_lock(*(os_unfair_lock_t *)(*(void *)(v7 + 24) + 16));
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v24, v21 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_id, v25);
  swift_retain();
  swift_weakInit();
  swift_release();
  char v29 = 0;
  swift_beginAccess();
  type metadata accessor for ObservableWiFiProperty.TokenRegistrations.WeakToken();
  sub_1002761AC(&qword_100487710, (void (*)(uint64_t))&type metadata accessor for UUID);
  type metadata accessor for Dictionary();
  Dictionary.subscript.setter();
  swift_endAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v27, v7 + *(int *)(v26 + 44), v14);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(*(void *)(v7 + 24) + 16));
  *uint64_t v28 = v21;
  return swift_release();
}

uint64_t sub_10027078C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v34 = a5;
  uint64_t v35 = a7;
  uint64_t v32 = a1;
  uint64_t v33 = a4;
  uint64_t v40 = a3;
  uint64_t v36 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v39 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v37 = *(void *)(v11 - 8);
  uint64_t v38 = v11;
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(a6 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  uint64_t v17 = __chkstk_darwin(v12);
  uint64_t v18 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  id v20 = (char *)&v32 - v19;
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v21((char *)&v32 - v19, v32, a6);
  v21(v18, a2, a6);
  uint64_t v22 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v23 = (v22 + 48) & ~v22;
  uint64_t v24 = (v16 + v22 + v23) & ~v22;
  uint64_t v25 = (char *)swift_allocObject();
  uint64_t v27 = v34;
  uint64_t v26 = v35;
  *((void *)v25 + 2)  = a6;
  *((void *)v25 + 3)  = v26;
  *((void *)v25 + 4)  = v33;
  *((void *)v25 + 5)  = v27;
  uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  v28(&v25[v23], v20, a6);
  v28(&v25[v24], v18, a6);
  aBlock[4]  = sub_10027611C;
  aBlock[5]  = v25;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256;
  aBlock[2]  = sub_10000E5D0;
  aBlock[3]  = &unk_100466CA8;
  char v29 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v41 = _swiftEmptyArrayStorage;
  sub_1002761AC((unint64_t *)&qword_1004807A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100010BCC((uint64_t *)&unk_10047D0F0);
  sub_1000143E0();
  uint64_t v30 = v36;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v29);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v10, v30);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v14, v38);
  return swift_release();
}

void sub_100270B54(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(a2 + 16);
  os_unfair_lock_lock(v2);
  swift_beginAccess();
  type metadata accessor for UUID();
  type metadata accessor for ObservableWiFiProperty.TokenRegistrations.WeakToken();
  sub_1002761AC(&qword_100487710, (void (*)(uint64_t))&type metadata accessor for UUID);
  type metadata accessor for Dictionary();
  Dictionary.removeValue(forKey:)();
  uint64_t v3 = type metadata accessor for Optional();
  (*(void (**)(unsigned char *, uint64_t))(*(void *)(v3 - 8) + 8))(v4, v3);
  swift_endAccess();
  os_unfair_lock_unlock(v2);
}

void ObservableWiFiProperty.registerForChangesIfNeeded(on:using:valueUpdateHandler:)(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  if (*a2) {
    ObservableWiFiProperty.wrappedValue.getter(a5, a6);
  }
  else {
    ObservableWiFiProperty.registerForChanges(on:using:valueUpdateHandler:)(a1, a2, a3, a4, a5, a6);
  }
}

uint64_t ObservableWiFiProperty.customMirror.getter(uint64_t a1)
{
  uint64_t v2 = v1 + *(int *)(a1 + 44);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v3 = v7;
  uint64_t v4 = sub_1000382F0(v6);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(v4, v2, v3);
  return Mirror.init(reflecting:)();
}

uint64_t ObservableWiFiProperty<>.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_100270D70()
{
  return ObservableWiFiProperty<>.description.getter();
}

uint64_t ObservableWiFiProperty<>.debugDescription.getter()
{
  return dispatch thunk of CustomDebugStringConvertible.debugDescription.getter();
}

uint64_t sub_100270DA4()
{
  return ObservableWiFiProperty<>.debugDescription.getter();
}

void *WiFiInterface.interfaceIndex.getter()
{
  uint64_t v1 = (void *)(v0 + *(void *)(*(void *)v0 + 104));
  uint64_t v2 = v1[1];
  if ((v2 & 0x1000000000000000) != 0 || !(v2 & 0x2000000000000000 | *v1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    return (void *)*(unsigned int *)v8;
  }
  else
  {
    __chkstk_darwin();
    if ((v4 & 0x2000000000000000) != 0)
    {
      *(void *)uint64_t v8 = v3;
      uint64_t v9 = v4 & 0xFFFFFFFFFFFFFFLL;
      return (void *)if_nametoindex(v8);
    }
    else
    {
      if ((v3 & 0x1000000000000000) != 0)
      {
        uint64_t v5 = (v4 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v6 = v3 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v5 = _StringObject.sharedUTF8.getter();
      }
      return sub_1000688B8(v5, v6, (void *(*)(uint64_t *__return_ptr))sub_100272270);
    }
  }
}

uint64_t WiFiInterface.description.getter()
{
  uint64_t v11 = _typeName(_:qualified:)();
  v1._countAndFlagsBits  = 91;
  v1._object  = (void *)0xE100000000000000;
  String.append(_:)(v1);
  uint64_t v2 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 104));
  uint64_t v3 = *v2;
  uint64_t v4 = (void *)v2[1];
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits  = v3;
  v5._object  = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits  = 15453;
  v6._object  = (void *)0xE200000000000000;
  String.append(_:)(v6);
  unint64_t v7 = WiFiInterface.macAddress.getter();
  v8._countAndFlagsBits  = WiFiAddress.description.getter(v7);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits  = 62;
  v9._object  = (void *)0xE100000000000000;
  String.append(_:)(v9);
  return v11;
}

uint64_t sub_100270FC4()
{
  return WiFiInterface.description.getter();
}

uint64_t WiFiInterfaceRole.description.getter(char a1)
{
  uint64_t result = 0x7274736172666E49;
  switch(a1)
  {
    case 1:
      uint64_t result = 1279547201;
      break;
    case 2:
      uint64_t result = 5128526;
      break;
    case 3:
      uint64_t result = 0x61746144204E414ELL;
      break;
    case 4:
      uint64_t result = 0x6574614C20776F4CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t WiFiInterfaceRole.rawValue.getter(char a1)
{
  uint64_t result = 0x7274736172666E69;
  switch(a1)
  {
    case 1:
      uint64_t result = 1818523489;
      break;
    case 2:
      uint64_t result = 0x67616E614D6E616ELL;
      break;
    case 3:
      uint64_t result = 0x617461446E616ELL;
      break;
    case 4:
      uint64_t result = 0x6E6574614C776F6CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100271164(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100041D5C(*a1, *a2);
}

Swift::Int sub_100271170()
{
  return Hasher._finalize()();
}

uint64_t sub_10027127C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100271370()
{
  return Hasher._finalize()();
}

unint64_t sub_100271478@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = _s7CoreP2P17WiFiInterfaceRoleO8rawValueACSgSS_tcfC_0(*a1);
  *a2  = result;
  return result;
}

void sub_1002714A8(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xEE00657275746375;
  uint64_t v3 = 0x7274736172666E69;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE400000000000000;
      uint64_t v3 = 1818523489;
      goto LABEL_3;
    case 2:
      strcpy((char *)a1, "nanManagement");
      *(_WORD *)(a1 + 14)  = -4864;
      break;
    case 3:
      *(void *)a1  = 0x617461446E616ELL;
      *(void *)(a1 + 8)  = 0xE700000000000000;
      break;
    case 4:
      *(void *)a1  = 0x6E6574614C776F6CLL;
      *(void *)(a1 + 8)  = 0xEA00000000007963;
      break;
    default:
LABEL_3:
      *(void *)a1  = v3;
      *(void *)(a1 + 8)  = v2;
      break;
  }
}

uint64_t sub_100271578()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1002715D8()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100271628()
{
  uint64_t result = 0x7274736172666E49;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1279547201;
      break;
    case 2:
      uint64_t result = 5128526;
      break;
    case 3:
      uint64_t result = 0x61746144204E414ELL;
      break;
    case 4:
      uint64_t result = 0x6574614C20776F4CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t WiFiInterfaceLinkState.description.getter(char a1)
{
  if (a1) {
    return 0x7055206B6E694CLL;
  }
  else {
    return 0x776F44206B6E694CLL;
  }
}

uint64_t sub_100271714()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100271774()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1002717C4()
{
  if (*v0) {
    return 0x7055206B6E694CLL;
  }
  else {
    return 0x776F44206B6E694CLL;
  }
}

unint64_t sub_100271804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return sub_100271860(a1, v6, a2, a3);
}

unint64_t sub_100271860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v21[1]  = a1;
  _OWORD v21[2] = a4;
  __chkstk_darwin();
  Swift::String v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = v4;
  uint64_t v9 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v11 = v10 & ~v9;
  v21[0]  = v4 + 64;
  if ((*(void *)(v4 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11))
  {
    uint64_t v12 = ~v9;
    uint64_t v15 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v13 = v6 + 16;
    uint64_t v14 = v15;
    uint64_t v16 = *(void *)(v13 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v13 - 8);
    do
    {
      uint64_t v18 = v13;
      v14(v8, *(void *)(v22 + 48) + v16 * v11, a3);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v17)(v8, a3);
      if (v19) {
        break;
      }
      unint64_t v11 = (v11 + 1) & v12;
      uint64_t v13 = v18;
    }
    while (((*(void *)(v21[0] + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  return v11;
}

uint64_t sub_1002719E8()
{
  return 0;
}

uint64_t sub_100271A44()
{
  return 0;
}

uint64_t sub_100271AA0(unsigned __int8 *a1)
{
  BYTE8(v2)  = 0;
  *(void *)&long long v2 = *a1;
  _print_unlocked<A, B>(_:_:)();
  return *(void *)((char *)&v2 + 1);
}

unint64_t _s7CoreP2P17WiFiInterfaceRoleO8rawValueACSgSS_tcfC_0(Swift::String string)
{
  object  = string._object;
  v2._countAndFlagsBits  = string._countAndFlagsBits;
  v2._object  = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10044F440, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

uint64_t sub_100271B40(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v11 = a1;
  uint64_t v4 = (int *)sub_100010BCC(&qword_100483C10);
  uint64_t v5 = v4[10];
  uint64_t v6 = swift_bridgeObjectRetain();
  char v7 = sub_10009BCA0(v6, a1);
  uint64_t result = swift_bridgeObjectRelease();
  if ((v7 & 1) == 0)
  {
    uint64_t v9 = (void (**)(uint64_t *))(v2 + v4[12]);
    if (*v9) {
      (*v9)(&v11);
    }
    (*(void (**)(uint64_t *))(v2 + v4[11]))(&v11);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v2 + v5)  = a1;
    uint64_t v10 = *(void (**)(uint64_t *))(v2 + v4[14]);
    if (v10) {
      v10(&v11);
    }
    return sub_10026CDD8(0, a1);
  }
  return result;
}

uint64_t sub_100271CDC(NSObject *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(a1);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = v2 + *(int *)(v10 + 40);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v11, v6);
  char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if ((v12 & 1) == 0)
  {
    uint64_t v14 = (void (**))(v3 + *(int *)(a2 + 48));
    if (*v14) {
      (*v14)(a1);
    }
    (*(void (**))(v3 + *(int *)(a2 + 44)))(a1);
    (*(void (**)(uint64_t, NSObject *, uint64_t))(v7 + 24))(v11, a1, v6);
    uint64_t v15 = *(void (**))(v3 + *(int *)(a2 + 56));
    if (v15) {
      v15(a1);
    }
    return sub_10026D544(0, a1, a2);
  }
  return result;
}

uint64_t type metadata accessor for WiFiInterface.NeighborDiscoveryTable()
{
  return sub_100038354();
}

uint64_t type metadata accessor for WiFiInterface()
{
  return sub_100038354();
}

uint64_t sub_100271F0C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100271F44(unsigned __int8 *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_100271F70(unsigned __int16 *a1)
{
  return (*(uint64_t (**)(unint64_t))(v1 + 16))(*a1 | ((unint64_t)*(unsigned int *)(a1 + 1) << 16));
}

uint64_t sub_100271FA4(unsigned int *a1)
{
  return (*(uint64_t (**)(unint64_t))(v1 + 16))(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32));
}

uint64_t sub_100271FE0(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t type metadata accessor for MutableDriverProperty()
{
  return sub_100038354();
}

uint64_t sub_100272024(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for WiFiInterface.NeighborDiscoveryTable.Entry()
{
  return sub_100038354();
}

uint64_t sub_100272068(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for ObservableWiFiProperty.TokenRegistrations()
{
  return sub_100038354();
}

uint64_t type metadata accessor for ObservableWiFiProperty()
{
  return sub_100038354();
}

uint64_t sub_1002720C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = (void *)(v8 + qword_100483F40);
  *uint64_t v9 = a1;
  v9[1]  = a2;
  swift_retain();
  UUID.init()();
  uint64_t v10 = (void *)(v8 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_cancellationHandler);
  void *v10 = a3;
  v10[1]  = a4;
  return v8;
}

uint64_t type metadata accessor for ObservableWiFiProperty.TokenRegistrations.WeakToken()
{
  return sub_100038354();
}

uint64_t (*sub_10027216C@<X0>(uint64_t (**a1)()@<X8>))()
{
  return sub_100270044(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_100272188(uint64_t (**a1)(void, void))
{
  return (*a1)(*(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t type metadata accessor for ObservableWiFiProperty.Token()
{
  return sub_100038354();
}

uint64_t sub_1002721D8()
{
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100272218(uint64_t a1, uint64_t a2)
{
  return sub_10027078C(a1, a2, v2[4], v2[5], v2[6], v2[2], v2[3]);
}

uint64_t sub_100272228()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100272268(uint64_t a1)
{
  sub_100270B54(a1, *(void *)(v1 + 16));
}

void *sub_100272270@<X0>(_DWORD *a1@<X8>)
{
  return sub_100068914(*(void *(**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

uint64_t sub_10027228C()
{
  return sub_1002761AC(&qword_100487710, (void (*)(uint64_t))&type metadata accessor for UUID);
}

uint64_t sub_1002722D4()
{
  return sub_1002761AC(&qword_100483C20, (void (*)(uint64_t))type metadata accessor for WiFiPropertyUpdateRegistration);
}

uint64_t type metadata accessor for WiFiPropertyUpdateRegistration()
{
  uint64_t result = qword_100483E20;
  if (!qword_100483E20) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_10027236C()
{
  unint64_t result = qword_100483C28;
  if (!qword_100483C28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100483C28);
  }
  return result;
}

unint64_t sub_1002723C4()
{
  unint64_t result = qword_100483C30[0];
  if (!qword_100483C30[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100483C30);
  }
  return result;
}

void sub_10027241C()
{
  swift_getAssociatedTypeWitness();
  if (v0 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    if (v1 <= 0x3F)
    {
      sub_1002726E0(319, &qword_100483CB8, (void (*)(void))sub_1002723C4);
      if (v2 <= 0x3F)
      {
        sub_1002726E0(319, &qword_100483CC0, (void (*)(void))sub_100262480);
        if (v3 <= 0x3F)
        {
          sub_100272740();
          if (v4 <= 0x3F)
          {
            sub_1002727E8();
            if (v5 <= 0x3F)
            {
              type metadata accessor for WiFiInterface.NeighborDiscoveryTable();
              if (v6 <= 0x3F)
              {
                type metadata accessor for Logger();
                if (v7 <= 0x3F) {
                  swift_initClassMetadata2();
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_1002726E0(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for MutableDriverProperty();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_100272740()
{
  if (!qword_100483CC8)
  {
    sub_100014434(&qword_100483CD0);
    sub_100272890(&qword_100483CD8, &qword_100483CD0, (void (*)(void))sub_100119600);
    unint64_t v0 = type metadata accessor for MutableDriverProperty();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100483CC8);
    }
  }
}

void sub_1002727E8()
{
  if (!qword_100483CE0)
  {
    sub_100014434(&qword_100483CE8);
    sub_100272890(qword_100483CF0, &qword_100483CE8, (void (*)(void))sub_100119658);
    unint64_t v0 = type metadata accessor for MutableDriverProperty();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100483CE0);
    }
  }
}

uint64_t sub_100272890(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100014434(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002728FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

uint64_t sub_100272904()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Logger();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1002729EC(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  unsigned int v10 = v9 | *(_DWORD *)(v5 + 80) & 0xF8;
  if (((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0
    || (((v9 + ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v9) + *(void *)(*(void *)(v7 - 8) + 64) <= 0x18
      ? (BOOL v11 = v10 > 7)
      : (BOOL v11 = 1),
        v11))
  {
    uint64_t v18 = *a2;
    *a1  = *a2;
    a1  = (uint64_t *)(v18 + (((v10 | 7) + 16) & ~(unint64_t)(v10 | 7)));
    swift_retain();
  }
  else
  {
    uint64_t v12 = v7;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    uint64_t v13 = (void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v14 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v13 = *v14;
    uint64_t v15 = ((unint64_t)v13 + v9 + 8) & ~v9;
    uint64_t v16 = ((unint64_t)v14 + v9 + 8) & ~v9;
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
    swift_bridgeObjectRetain();
    v17(v15, v16, v12);
  }
  return a1;
}

uint64_t sub_100272BC0(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8) + 8;
  (*(void (**)(uint64_t, uint64_t))v3)(a1, AssociatedTypeWitness);
  unint64_t v4 = (a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(uint64_t (**)(unint64_t, uint64_t))(v6 + 8);
  uint64_t v8 = v5;
  unint64_t v9 = (v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);

  return v7(v9, v8);
}

uint64_t sub_100272C9C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  BOOL v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = ((unint64_t)v7 + v12 + 8) & ~v12;
  uint64_t v14 = ((unint64_t)v8 + v12 + 8) & ~v12;
  swift_bridgeObjectRetain();
  v11(v13, v14, v9);
  return a1;
}

uint64_t sub_100272DAC(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 24))(((unint64_t)v7 + *(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), ((unint64_t)v8 + *(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), v9);
  return a1;
}

uint64_t sub_100272EA8(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 32))(((unint64_t)v7 + *(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), ((unint64_t)v8 + *(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), v9);
  return a1;
}

uint64_t sub_100272F94(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 40))(((unint64_t)v7 + *(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), ((unint64_t)v8 + *(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), v9);
  return a1;
}

uint64_t sub_100273088(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v5 + 64);
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  if (v6 <= *(_DWORD *)(v8 + 84)) {
    unsigned int v11 = *(_DWORD *)(v8 + 84);
  }
  else {
    unsigned int v11 = v6;
  }
  if (v11 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  else {
    unsigned int v12 = v11;
  }
  if (!a2) {
    return 0;
  }
  if (a2 <= v12) {
    goto LABEL_28;
  }
  unint64_t v13 = ((v10 + ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v10) + *(void *)(*(void *)(v7 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v17 = ((a2 - v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v17))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v17 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v17 < 2)
    {
LABEL_28:
      if (v6 == v12)
      {
        uint64_t v21 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v5 + 48);
        return v21(a1, v6, AssociatedTypeWitness);
      }
      else
      {
        uint64_t v22 = (unint64_t *)(((unint64_t)a1 + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((v11 & 0x80000000) != 0)
        {
          uint64_t v24 = *(uint64_t (**)(unint64_t))(v8 + 48);
          return v24(((unint64_t)v22 + v10 + 8) & ~v10);
        }
        else
        {
          unint64_t v23 = *v22;
          if (v23 >= 0xFFFFFFFF) {
            LODWORD(v23)  = -1;
          }
          return (v23 + 1);
        }
      }
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_28;
  }
LABEL_18:
  int v18 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v18 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v19 = v13;
    }
    else {
      int v19 = 4;
    }
    switch(v19)
    {
      case 2:
        int v20 = *a1;
        break;
      case 3:
        int v20 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v20 = *(_DWORD *)a1;
        break;
      default:
        int v20 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v20 = 0;
  }
  return v12 + (v20 | v18) + 1;
}

void sub_100273364(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v24 = v7;
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(type metadata accessor for Logger() - 8);
  uint64_t v10 = *(void *)(v7 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v8 <= *(_DWORD *)(v9 + 84)) {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v12 = v8;
  }
  if (v12 <= 0x7FFFFFFF) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  else {
    unsigned int v13 = v12;
  }
  size_t v14 = ((v11 + ((v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v11) + *(void *)(v9 + 64);
  if (a3 <= v13)
  {
    int v15 = 0;
  }
  else if (v14 <= 3)
  {
    unsigned int v18 = ((a3 - v13 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
    if (HIWORD(v18))
    {
      int v15 = 4;
    }
    else if (v18 >= 0x100)
    {
      int v15 = 2;
    }
    else
    {
      int v15 = v18 > 1;
    }
  }
  else
  {
    int v15 = 1;
  }
  if (v13 < a2)
  {
    unsigned int v16 = ~v13 + a2;
    if (v14 < 4)
    {
      int v17 = (v16 >> (8 * v14)) + 1;
      if (v14)
      {
        int v19 = v16 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1  = v19;
          a1[2]  = BYTE2(v19);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1  = v19;
        }
        else
        {
          *a1  = v19;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1  = v16;
      int v17 = 1;
    }
    switch(v15)
    {
      case 1:
        a1[v14]  = v17;
        return;
      case 2:
        *(_WORD *)&a1[v14]  = v17;
        return;
      case 3:
        goto LABEL_49;
      case 4:
        *(_DWORD *)&a1[v14]  = v17;
        return;
      default:
        return;
    }
  }
  switch(v15)
  {
    case 1:
      a1[v14]  = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v14]  = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_49:
      __break(1u);
      JUMPOUT(0x1002736C4);
    case 4:
      *(_DWORD *)&a1[v14]  = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if (v8 == v13)
        {
          int v20 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v24 + 56);
          v20(a1, a2, v8, AssociatedTypeWitness);
        }
        else
        {
          uint64_t v21 = (void *)((unint64_t)&a1[v10 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((v12 & 0x80000000) != 0)
          {
            unint64_t v23 = *(void (**)(unint64_t, uint64_t))(v9 + 56);
            v23(((unint64_t)v21 + v11 + 8) & ~v11, a2);
          }
          else
          {
            if ((a2 & 0x80000000) != 0) {
              uint64_t v22 = a2 ^ 0x80000000;
            }
            else {
              uint64_t v22 = (a2 - 1);
            }
            *uint64_t v21 = v22;
          }
        }
      }
      return;
  }
}

uint64_t sub_1002736EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 48);
}

uint64_t sub_1002736F4()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1002737E8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = *(_DWORD *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80);
  uint64_t v13 = *(void *)(v11 + 64) + 7;
  if ((v12 | v8) > 7
    || ((*(_DWORD *)(v11 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || ((((((((((v13 + ((v9 + ((v8 + 16) & ~v8) + v12) & ~v12)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
           + 23) & 0xFFFFFFFFFFFFFFF8)
         + 23) & 0xFFFFFFFFFFFFFFF8)
       + 23) & 0xFFFFFFFFFFFFFFF8)
     + 16 > 0x18)
  {
    uint64_t v16 = *a2;
    *a1  = *a2;
    int v17 = (uint64_t *)(v16 + (((v12 | v8) & 0xF8 ^ 0x1F8) & ((v12 | v8) + 16)));
  }
  else
  {
    uint64_t v18 = ~v8;
    uint64_t v42 = v6;
    uint64_t v43 = a1;
    uint64_t v19 = a2[1];
    *a1  = *a2;
    a1[1]  = v19;
    int v20 = (char *)a1 + v8;
    uint64_t v21 = (char *)a2 + v8;
    uint64_t v22 = (unint64_t)(v20 + 16) & v18;
    uint64_t v23 = (unint64_t)(v21 + 16) & v18;
    uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    swift_bridgeObjectRetain();
    v24(v22, v23, v42);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))((v22 + v9 + v12) & ~v12, (v23 + v9 + v12) & ~v12, v10);
    uint64_t v25 = (void *)((v13 + ((v22 + v9 + v12) & ~v12)) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v26 = (void *)((v13 + ((v23 + v9 + v12) & ~v12)) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v27 = v26[1];
    *uint64_t v25 = *v26;
    v25[1]  = v27;
    unint64_t v28 = ((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF8;
    char v29 = (unint64_t *)(((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v30 = *v29;
    swift_retain();
    if (v30 < 0xFFFFFFFF)
    {
      *(_OWORD *)unint64_t v28 = *(_OWORD *)v29;
    }
    else
    {
      unint64_t v31 = v29[1];
      *(void *)unint64_t v28 = v30;
      *(void *)(v28 + 8)  = v31;
      swift_retain();
    }
    unint64_t v32 = (v28 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v33 = ((unint64_t)v29 + 23) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v33 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v32 = *(_OWORD *)v33;
    }
    else
    {
      uint64_t v34 = *(void *)(v33 + 8);
      *(void *)unint64_t v32 = *(void *)v33;
      *(void *)(v32 + 8)  = v34;
      swift_retain();
    }
    unint64_t v35 = (v32 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v36 = (v33 + 23) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v36 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v35 = *(_OWORD *)v36;
    }
    else
    {
      uint64_t v37 = *(void *)(v36 + 8);
      *(void *)unint64_t v35 = *(void *)v36;
      *(void *)(v35 + 8)  = v37;
      swift_retain();
    }
    uint64_t v38 = (void *)((v36 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v39 = v38[1];
    uint64_t v40 = (void *)((v35 + 23) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v40 = *v38;
    v40[1]  = v39;
    int v17 = v43;
  }
  swift_retain();
  return v17;
}

uint64_t sub_100273AC4(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5 + 8;
  unint64_t v7 = (a1 + *(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v7, v4);
  unint64_t v8 = v7 + *(void *)(v6 + 56);
  uint64_t v9 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v10 = v9 + 8;
  unint64_t v11 = (v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  (*(void (**)(unint64_t))(v9 + 8))(v11);
  unint64_t v12 = (*(void *)(v10 + 56) + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  uint64_t v13 = (void *)((v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  if (*v13 >= 0xFFFFFFFFuLL) {
    swift_release();
  }
  size_t v14 = (void *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  if (*v14 >= 0xFFFFFFFFuLL) {
    swift_release();
  }
  if (*(void *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL) {
    swift_release();
  }

  return swift_release();
}

void *sub_100273C18(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1  = *a2;
  a1[1]  = v6;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  uint64_t v10 = v8 + 16;
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = ((unint64_t)a1 + v11 + 16) & ~v11;
  uint64_t v13 = ((unint64_t)a2 + v11 + 16) & ~v11;
  swift_bridgeObjectRetain();
  v9(v12, v13, v7);
  uint64_t v14 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v15 = v14 + 16;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = *(void *)(v10 + 48) + v16;
  uint64_t v18 = (v17 + v12) & ~v16;
  uint64_t v19 = (v17 + v13) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 16))(v18, v19);
  uint64_t v20 = *(void *)(v15 + 48) + 7;
  uint64_t v21 = (void *)((v20 + v18) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v22 = (void *)((v20 + v19) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v23 = v22[1];
  *uint64_t v21 = *v22;
  v21[1]  = v23;
  unint64_t v24 = ((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v25 = (unint64_t *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v26 = *v25;
  swift_retain();
  if (v26 < 0xFFFFFFFF)
  {
    *(_OWORD *)unint64_t v24 = *(_OWORD *)v25;
  }
  else
  {
    unint64_t v27 = v25[1];
    *(void *)unint64_t v24 = v26;
    *(void *)(v24 + 8)  = v27;
    swift_retain();
  }
  unint64_t v28 = (v24 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v29 = ((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v29 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v28 = *(_OWORD *)v29;
  }
  else
  {
    uint64_t v30 = *(void *)(v29 + 8);
    *(void *)unint64_t v28 = *(void *)v29;
    *(void *)(v28 + 8)  = v30;
    swift_retain();
  }
  unint64_t v31 = (v28 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v32 = (v29 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v32 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v31 = *(_OWORD *)v32;
  }
  else
  {
    uint64_t v33 = *(void *)(v32 + 8);
    *(void *)unint64_t v31 = *(void *)v32;
    *(void *)(v31 + 8)  = v33;
    swift_retain();
  }
  uint64_t v34 = (void *)((v32 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v35 = v34[1];
  unint64_t v36 = (void *)((v31 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v36 = *v34;
  v36[1]  = v35;
  swift_retain();
  return a1;
}

void *sub_100273DFC(void *a1, void *a2, uint64_t a3)
{
  *a1  = *a2;
  a1[1]  = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7 + 24;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = ((unint64_t)a1 + v9 + 16) & ~v9;
  uint64_t v11 = ((unint64_t)a2 + v9 + 16) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(v10, v11, v6);
  uint64_t v12 = *(void *)(v8 + 40);
  uint64_t v13 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v14 = v13 + 24;
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = v12 + v15;
  uint64_t v17 = (v16 + v10) & ~v15;
  uint64_t v18 = (v16 + v11) & ~v15;
  (*(void (**)(uint64_t, uint64_t))(v13 + 24))(v17, v18);
  uint64_t v19 = *(void *)(v14 + 40) + 7;
  uint64_t v20 = (void *)((v19 + v17) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = (void *)((v19 + v18) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v22 = v21[1];
  *uint64_t v20 = *v21;
  v20[1]  = v22;
  swift_retain();
  swift_release();
  uint64_t v23 = (void *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v24 = (unint64_t *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v25 = *v24;
  if (*v23 < 0xFFFFFFFFuLL)
  {
    if (v25 >= 0xFFFFFFFF)
    {
      unint64_t v27 = v24[1];
      *uint64_t v23 = v25;
      v23[1]  = v27;
      swift_retain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v25 >= 0xFFFFFFFF)
    {
      unint64_t v26 = v24[1];
      *uint64_t v23 = v25;
      v23[1]  = v26;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
LABEL_8:
  unint64_t v28 = (void *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v29 = (unint64_t *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v30 = *v29;
  if (*v28 < 0xFFFFFFFFuLL)
  {
    if (v30 >= 0xFFFFFFFF)
    {
      unint64_t v32 = v29[1];
      *unint64_t v28 = v30;
      v28[1]  = v32;
      swift_retain();
      goto LABEL_15;
    }
  }
  else
  {
    if (v30 >= 0xFFFFFFFF)
    {
      unint64_t v31 = v29[1];
      *unint64_t v28 = v30;
      v28[1]  = v31;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  *(_OWORD *)unint64_t v28 = *(_OWORD *)v29;
LABEL_15:
  uint64_t v33 = (void *)(((unint64_t)v28 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v34 = (unint64_t *)(((unint64_t)v29 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v35 = *v34;
  if (*v33 < 0xFFFFFFFFuLL)
  {
    if (v35 >= 0xFFFFFFFF)
    {
      unint64_t v37 = v34[1];
      *uint64_t v33 = v35;
      v33[1]  = v37;
      swift_retain();
      goto LABEL_22;
    }
LABEL_21:
    *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
    goto LABEL_22;
  }
  if (v35 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_21;
  }
  unint64_t v36 = v34[1];
  *uint64_t v33 = v35;
  v33[1]  = v36;
  swift_retain();
  swift_release();
LABEL_22:
  uint64_t v38 = (void *)(((unint64_t)v33 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v39 = (void *)(((unint64_t)v34 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v40 = v39[1];
  void *v38 = *v39;
  v38[1]  = v40;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_1002740BC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1  = *a2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7 + 32;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = ((unint64_t)a1 + v9 + 16) & ~v9;
  uint64_t v11 = ((unint64_t)a2 + v9 + 16) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v10, v11, v6);
  uint64_t v12 = *(void *)(v8 + 32);
  uint64_t v13 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v14 = v13 + 32;
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = v12 + v15;
  uint64_t v17 = (v16 + v10) & ~v15;
  uint64_t v18 = (v16 + v11) & ~v15;
  (*(void (**)(uint64_t, uint64_t))(v13 + 32))(v17, v18);
  uint64_t v19 = *(void *)(v14 + 32) + 7;
  uint64_t v20 = (_OWORD *)((v19 + v17) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = (_OWORD *)((v19 + v18) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v20 = *v21;
  unint64_t v22 = ((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = ((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v23 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v22 = *(_OWORD *)v23;
  }
  else
  {
    uint64_t v24 = *(void *)(v23 + 8);
    *(void *)unint64_t v22 = *(void *)v23;
    *(void *)(v22 + 8)  = v24;
  }
  unint64_t v25 = (v22 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v26 = (v23 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v26 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v25 = *(_OWORD *)v26;
  }
  else
  {
    uint64_t v27 = *(void *)(v26 + 8);
    *(void *)unint64_t v25 = *(void *)v26;
    *(void *)(v25 + 8)  = v27;
  }
  unint64_t v28 = (v25 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v29 = (v26 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v29 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v28 = *(_OWORD *)v29;
  }
  else
  {
    uint64_t v30 = *(void *)(v29 + 8);
    *(void *)unint64_t v28 = *(void *)v29;
    *(void *)(v28 + 8)  = v30;
  }
  *(_OWORD *)((v28 + 23) & 0xFFFFFFFFFFFFFFF8)  = *(_OWORD *)((v29 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *sub_100274270(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1  = *a2;
  a1[1]  = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = ((unint64_t)a1 + v10 + 16) & ~v10;
  uint64_t v12 = ((unint64_t)a2 + v10 + 16) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(v11, v12, v7);
  uint64_t v13 = *(void *)(v9 + 24);
  uint64_t v14 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v15 = v14 + 40;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (v17 + v11) & ~v16;
  uint64_t v19 = (v17 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 40))(v18, v19);
  uint64_t v20 = *(void *)(v15 + 24) + 7;
  uint64_t v21 = (_OWORD *)((v20 + v18) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v22 = v20 + v19;
  unint64_t v23 = (v22 & 0xFFFFFFFFFFFFFFF8) + 23;
  *uint64_t v21 = *(_OWORD *)(v22 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  uint64_t v24 = (void *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v25 = v23 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v26 = *(void *)(v23 & 0xFFFFFFFFFFFFFFF8);
  if (*v24 < 0xFFFFFFFFuLL)
  {
    if (v26 >= 0xFFFFFFFF)
    {
      uint64_t v28 = *(void *)(v25 + 8);
      *uint64_t v24 = v26;
      v24[1]  = v28;
      goto LABEL_8;
    }
  }
  else
  {
    if (v26 >= 0xFFFFFFFF)
    {
      uint64_t v27 = *(void *)(v25 + 8);
      *uint64_t v24 = v26;
      v24[1]  = v27;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
LABEL_8:
  unint64_t v29 = (void *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v30 = (unint64_t *)((v25 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v31 = *v30;
  if (*v29 < 0xFFFFFFFFuLL)
  {
    if (v31 >= 0xFFFFFFFF)
    {
      unint64_t v33 = v30[1];
      *unint64_t v29 = v31;
      v29[1]  = v33;
      goto LABEL_15;
    }
  }
  else
  {
    if (v31 >= 0xFFFFFFFF)
    {
      unint64_t v32 = v30[1];
      *unint64_t v29 = v31;
      v29[1]  = v32;
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  *(_OWORD *)unint64_t v29 = *(_OWORD *)v30;
LABEL_15:
  uint64_t v34 = (void *)(((unint64_t)v29 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v35 = (unint64_t *)(((unint64_t)v30 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v36 = *v35;
  if (*v34 < 0xFFFFFFFFuLL)
  {
    if (v36 >= 0xFFFFFFFF)
    {
      unint64_t v38 = v35[1];
      *uint64_t v34 = v36;
      v34[1]  = v38;
      goto LABEL_22;
    }
LABEL_21:
    *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
    goto LABEL_22;
  }
  if (v36 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_21;
  }
  unint64_t v37 = v35[1];
  *uint64_t v34 = v36;
  v34[1]  = v37;
  swift_release();
LABEL_22:
  *(_OWORD *)(((unint64_t)v34 + 23) & 0xFFFFFFFFFFFFFFF8)  = *(_OWORD *)(((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_1002744E8(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(type metadata accessor for Logger() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = *(void *)(v6 + 64);
  uint64_t v12 = *(unsigned __int8 *)(v8 + 80);
  if (v7 <= v9) {
    unsigned int v13 = *(_DWORD *)(v8 + 84);
  }
  else {
    unsigned int v13 = *(_DWORD *)(v6 + 84);
  }
  if (v13 <= 0x7FFFFFFF) {
    unsigned int v14 = 0x7FFFFFFF;
  }
  else {
    unsigned int v14 = v13;
  }
  if (!a2) {
    return 0;
  }
  if (v14 < a2)
  {
    unint64_t v15 = ((((((((((*(void *)(v8 + 64) + ((v11 + ((v10 + 16) & ~v10) + v12) & ~v12) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
              + 23) & 0xFFFFFFFFFFFFFFF8)
            + 23) & 0xFFFFFFFFFFFFFFF8)
          + 23) & 0xFFFFFFFFFFFFFFF8)
        + 16;
    if ((v15 & 0xFFFFFFF8) != 0) {
      unsigned int v16 = 2;
    }
    else {
      unsigned int v16 = a2 - v14 + 1;
    }
    if (v16 >= 0x10000) {
      unsigned int v17 = 4;
    }
    else {
      unsigned int v17 = 2;
    }
    if (v16 < 0x100) {
      unsigned int v17 = 1;
    }
    if (v16 >= 2) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    switch(v18)
    {
      case 1:
        int v19 = *((unsigned __int8 *)a1 + v15);
        if (!*((unsigned char *)a1 + v15)) {
          break;
        }
        goto LABEL_25;
      case 2:
        int v19 = *(unsigned __int16 *)((char *)a1 + v15);
        if (*(_WORD *)((char *)a1 + v15)) {
          goto LABEL_25;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x100274764);
      case 4:
        int v19 = *(int *)((char *)a1 + v15);
        if (!v19) {
          break;
        }
LABEL_25:
        int v21 = v19 - 1;
        if ((v15 & 0xFFFFFFF8) != 0)
        {
          int v21 = 0;
          int v22 = *a1;
        }
        else
        {
          int v22 = 0;
        }
        return v14 + (v22 | v21) + 1;
      default:
        break;
    }
  }
  if ((v13 & 0x80000000) != 0)
  {
    uint64_t v24 = ((unint64_t)a1 + v10 + 16) & ~v10;
    if (v7 == v14)
    {
      unint64_t v25 = *(uint64_t (**)(uint64_t))(v6 + 48);
      return v25(v24);
    }
    else
    {
      uint64_t v26 = (v24 + v11 + v12) & ~v12;
      uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 48);
      return v27(v26, v9);
    }
  }
  else
  {
    unint64_t v23 = *((void *)a1 + 1);
    if (v23 >= 0xFFFFFFFF) {
      LODWORD(v23)  = -1;
    }
    return (v23 + 1);
  }
}

void sub_100274778(void *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(type metadata accessor for Logger() - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v11 = *(unsigned int *)(v10 + 84);
  uint64_t v12 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v13 = *(void *)(v8 + 64);
  uint64_t v14 = *(unsigned __int8 *)(v10 + 80);
  if (v9 <= v11) {
    unsigned int v15 = *(_DWORD *)(v10 + 84);
  }
  else {
    unsigned int v15 = *(_DWORD *)(v8 + 84);
  }
  if (v15 <= 0x7FFFFFFF) {
    unsigned int v16 = 0x7FFFFFFF;
  }
  else {
    unsigned int v16 = v15;
  }
  size_t v17 = ((((((((((*(void *)(v10 + 64) + ((v13 + ((v12 + 16) & ~v12) + v14) & ~v14) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
            + 23) & 0xFFFFFFFFFFFFFFF8)
          + 23) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v16 >= a3)
  {
    int v20 = 0;
    int v21 = a2 - v16;
    if (a2 <= v16)
    {
LABEL_20:
      switch(v20)
      {
        case 1:
          *((unsigned char *)a1 + v17)  = 0;
          if (!a2) {
            return;
          }
          goto LABEL_33;
        case 2:
          *(_WORD *)((char *)a1 + v17)  = 0;
          if (!a2) {
            return;
          }
          goto LABEL_33;
        case 3:
          goto LABEL_49;
        case 4:
          *(_DWORD *)((char *)a1 + v17)  = 0;
          goto LABEL_32;
        default:
LABEL_32:
          if (a2)
          {
LABEL_33:
            if ((v15 & 0x80000000) != 0)
            {
              uint64_t v24 = ((unint64_t)a1 + v12 + 16) & ~v12;
              if (v9 == v16)
              {
                unint64_t v25 = *(void (**)(uint64_t, uint64_t))(v8 + 56);
                v25(v24, a2);
              }
              else
              {
                uint64_t v26 = (v24 + v13 + v14) & ~v14;
                uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 56);
                v27(v26, a2, v11);
              }
            }
            else if ((a2 & 0x80000000) != 0)
            {
              *a1  = a2 ^ 0x80000000;
              a1[1]  = 0;
            }
            else
            {
              a1[1]  = (a2 - 1);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (((((((((((*(_DWORD *)(v10 + 64)
                 + ((v13 + ((v12 + 16) & ~v12) + v14) & ~v14)
                 + 7) & 0xFFFFFFF8)
               + 23) & 0xFFFFFFF8)
             + 23) & 0xFFFFFFF8)
           + 23) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
      unsigned int v18 = a3 - v16 + 1;
    else {
      unsigned int v18 = 2;
    }
    if (v18 >= 0x10000) {
      int v19 = 4;
    }
    else {
      int v19 = 2;
    }
    if (v18 < 0x100) {
      int v19 = 1;
    }
    if (v18 >= 2) {
      int v20 = v19;
    }
    else {
      int v20 = 0;
    }
    int v21 = a2 - v16;
    if (a2 <= v16) {
      goto LABEL_20;
    }
  }
  if (((((((((((*(_DWORD *)(v10 + 64)
               + ((v13 + ((v12 + 16) & ~v12) + v14) & ~v14)
               + 7) & 0xFFFFFFF8)
             + 23) & 0xFFFFFFF8)
           + 23) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8)
       + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
    int v22 = v21;
  else {
    int v22 = 1;
  }
  if (((((((((((*(_DWORD *)(v10 + 64)
               + ((v13 + ((v12 + 16) & ~v12) + v14) & ~v14)
               + 7) & 0xFFFFFFF8)
             + 23) & 0xFFFFFFF8)
           + 23) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8)
       + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    int v23 = ~v16 + a2;
    bzero(a1, v17);
    *(_DWORD *)a1  = v23;
  }
  switch(v20)
  {
    case 1:
      *((unsigned char *)a1 + v17)  = v22;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v17)  = v22;
      break;
    case 3:
LABEL_49:
      __break(1u);
      JUMPOUT(0x100274A58);
    case 4:
      *(_DWORD *)((char *)a1 + v17)  = v22;
      break;
    default:
      return;
  }
}

uint64_t sub_100274A80()
{
  return type metadata accessor for WiFiPropertyUpdateRegistration();
}

uint64_t sub_100274A88()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100274B24()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Logger();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void *sub_100274C18(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64) + 7;
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(_DWORD *)(v10 + 80);
  uint64_t v12 = *a2;
  if ((v11 | (unint64_t)v7) > 7
    || ((*(_DWORD *)(v10 + 80) | v7) & 0x100000) != 0
    || ((v11
       + ((v8 + ((v7 + 32) & ~(unint64_t)v7)) & 0xFFFFFFFFFFFFFFF8)
       + 16) & ~v11)
     + *(void *)(*(void *)(v9 - 8) + 64) > 0x18)
  {
    *a1  = v12;
    a1  = (void *)(v12
                  + (((v11 | v7) & 0xF8 ^ 0x1F8) & ((v11 | v7) + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v15 = a2[1];
    *a1  = v12;
    a1[1]  = v15;
    unsigned int v16 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
    size_t v17 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v16 = *v17;
    unsigned int v18 = (void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
    int v19 = (void *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v18 = *v19;
    unint64_t v20 = ((unint64_t)v18 + v7 + 8) & ~(unint64_t)v7;
    unint64_t v21 = ((unint64_t)v19 + v7 + 8) & ~(unint64_t)v7;
    int v22 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
    uint64_t v29 = v9;
    swift_retain();
    swift_retain();
    swift_retain();
    v22(v20, v21, v5);
    int v23 = (void *)((v8 + v20) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v24 = (void *)((v8 + v21) & 0xFFFFFFFFFFFFFFF8);
    *int v23 = *v24;
    v23[1]  = v24[1];
    uint64_t v25 = ((unint64_t)v23 + v11 + 16) & ~v11;
    uint64_t v26 = ((unint64_t)v24 + v11 + 16) & ~v11;
    uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
    swift_bridgeObjectRetain();
    v27(v25, v26, v29);
  }
  return a1;
}

uint64_t sub_100274E60(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = v4 + 8;
  unint64_t v6 = (((((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v6);
  unint64_t v7 = (*(void *)(v5 + 56) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(uint64_t (**)(unint64_t, uint64_t))(v9 + 8);
  uint64_t v11 = v8;
  unint64_t v12 = (v7 + *(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);

  return v10(v12, v11);
}

void *sub_100274F5C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1  = *a2;
  a1[1]  = v4;
  uint64_t v5 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v6 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  unint64_t v7 = (void *)(((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)(((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v7 = *v8;
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  uint64_t v11 = *(void *)(v9 - 8) + 16;
  uint64_t v12 = *(unsigned __int8 *)(*(void *)(v9 - 8) + 80);
  uint64_t v13 = ((unint64_t)v7 + v12 + 8) & ~v12;
  uint64_t v14 = ((unint64_t)v8 + v12 + 8) & ~v12;
  swift_retain();
  swift_retain();
  swift_retain();
  v10(v13, v14, v9);
  uint64_t v15 = *(void *)(v11 + 48) + 7;
  unsigned int v16 = (void *)((v15 + v13) & 0xFFFFFFFFFFFFFFF8);
  size_t v17 = (void *)((v15 + v14) & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v16 = *v17;
  v16[1]  = v17[1];
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
  uint64_t v21 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v22 = ((unint64_t)v16 + v21 + 16) & ~v21;
  uint64_t v23 = ((unint64_t)v17 + v21 + 16) & ~v21;
  swift_bridgeObjectRetain();
  v20(v22, v23, v18);
  return a1;
}

void *sub_1002750B4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1  = *a2;
  a1[1]  = v6;
  swift_retain();
  swift_release();
  unint64_t v7 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v7 = *v8;
  swift_retain();
  swift_release();
  uint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v9 = *v10;
  swift_retain();
  swift_release();
  uint64_t v11 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v12 = v11 + 24;
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = ((unint64_t)v9 + v13 + 8) & ~v13;
  uint64_t v15 = ((unint64_t)v10 + v13 + 8) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v11 + 24))(v14, v15);
  uint64_t v16 = *(void *)(v12 + 40) + 7;
  size_t v17 = (void *)((v16 + v14) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v18 = (void *)((v16 + v15) & 0xFFFFFFFFFFFFFFF8);
  *size_t v17 = *v18;
  v17[1]  = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v19 = type metadata accessor for Logger();
  uint64_t v20 = *(void *)(v19 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v20 + 24))(((unint64_t)v17 + *(unsigned __int8 *)(v20 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80), ((unint64_t)v18 + *(unsigned __int8 *)(v20 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80), v19);
  return a1;
}

_OWORD *sub_100275220(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1  = *a2;
  uint64_t v4 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v4 = *v5;
  uint64_t v6 = (void *)(((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v7 = (void *)(((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v6 = *v7;
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = ((unint64_t)v6 + v10 + 8) & ~v10;
  uint64_t v12 = ((unint64_t)v7 + v10 + 8) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v11, v12);
  uint64_t v13 = *(void *)(v9 + 32) + 7;
  uint64_t v14 = (_OWORD *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (_OWORD *)((v13 + v12) & 0xFFFFFFFFFFFFFFF8);
  _OWORD *v14 = *v15;
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = *(void *)(v16 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v17 + 32))(((unint64_t)v14 + *(unsigned __int8 *)(v17 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), ((unint64_t)v15 + *(unsigned __int8 *)(v17 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), v16);
  return a1;
}

_OWORD *sub_100275330(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a2 + 23;
  *a1  = *a2;
  swift_release();
  uint64_t v6 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v5 &= 0xFFFFFFFFFFFFFFF8;
  *uint64_t v6 = *(void *)v5;
  swift_release();
  unint64_t v7 = (void *)(((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v5 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v7 = *v8;
  swift_release();
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = v9 + 40;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = ((unint64_t)v7 + v11 + 8) & ~v11;
  uint64_t v13 = ((unint64_t)v8 + v11 + 8) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v9 + 40))(v12, v13);
  uint64_t v14 = *(void *)(v10 + 24) + 7;
  uint64_t v15 = (void *)((v14 + v12) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = (void *)((v14 + v13) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v15 = *v16;
  v15[1]  = v16[1];
  swift_bridgeObjectRelease();
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = *(void *)(v17 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v18 + 40))(((unint64_t)v15 + *(unsigned __int8 *)(v18 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80), ((unint64_t)v16 + *(unsigned __int8 *)(v18 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80), v17);
  return a1;
}

uint64_t sub_100275478(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v7 <= *(_DWORD *)(v9 + 84)) {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v12 = v7;
  }
  if (v12 <= 0x7FFFFFFF) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  else {
    unsigned int v13 = v12;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v14 = *(void *)(v6 + 64) + 7;
  uint64_t v15 = v11 + 16;
  if (a2 <= v13) {
    goto LABEL_28;
  }
  unint64_t v16 = ((v15 + ((v14 + ((v10 + 32) & ~v10)) & 0xFFFFFFFFFFFFFFF8)) & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  char v17 = 8 * v16;
  if (v16 <= 3)
  {
    unsigned int v20 = ((a2 - v13 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v20))
    {
      int v18 = *(_DWORD *)((char *)a1 + v16);
      if (!v18) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v20 > 0xFF)
    {
      int v18 = *(unsigned __int16 *)((char *)a1 + v16);
      if (!*(unsigned __int16 *)((char *)a1 + v16)) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v20 < 2)
    {
LABEL_28:
      if ((v12 & 0x80000000) != 0)
      {
        unint64_t v25 = ((((((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v10 + 8) & ~v10;
        if (v7 == v13)
        {
          uint64_t v26 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
          return v26(v25, v7, v5);
        }
        else
        {
          unint64_t v27 = (v15 + ((v14 + v25) & 0xFFFFFFFFFFFFFFF8)) & ~v11;
          uint64_t v28 = *(uint64_t (**)(unint64_t))(v9 + 48);
          return v28(v27);
        }
      }
      else
      {
        uint64_t v24 = *(void *)a1;
        if (*(void *)a1 >= 0xFFFFFFFFuLL) {
          LODWORD(v24)  = -1;
        }
        return (v24 + 1);
      }
    }
  }
  int v18 = *((unsigned __int8 *)a1 + v16);
  if (!*((unsigned char *)a1 + v16)) {
    goto LABEL_28;
  }
LABEL_18:
  int v21 = (v18 - 1) << v17;
  if (v16 > 3) {
    int v21 = 0;
  }
  if (v16)
  {
    if (v16 <= 3) {
      int v22 = v16;
    }
    else {
      int v22 = 4;
    }
    switch(v22)
    {
      case 2:
        int v23 = *a1;
        break;
      case 3:
        int v23 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v23 = *(_DWORD *)a1;
        break;
      default:
        int v23 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v23 = 0;
  }
  return v13 + (v23 | v21) + 1;
}

void sub_10027575C(_WORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v31 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v13 = *(void *)(v8 + 64);
  uint64_t v14 = *(unsigned __int8 *)(v11 + 80);
  if (v9 <= *(_DWORD *)(v11 + 84)) {
    unsigned int v15 = *(_DWORD *)(v11 + 84);
  }
  else {
    unsigned int v15 = v9;
  }
  if (v15 <= 0x7FFFFFFF) {
    unsigned int v16 = 0x7FFFFFFF;
  }
  else {
    unsigned int v16 = v15;
  }
  uint64_t v17 = v13 + 7;
  uint64_t v18 = v14 + 16;
  size_t v19 = ((v14 + 16 + ((v13 + 7 + ((v12 + 32) & ~v12)) & 0xFFFFFFFFFFFFFFF8)) & ~v14)
      + *(void *)(*(void *)(v10 - 8) + 64);
  if (a3 <= v16)
  {
    int v20 = 0;
  }
  else if (v19 <= 3)
  {
    unsigned int v24 = ((a3 - v16 + ~(-1 << (8 * v19))) >> (8 * v19)) + 1;
    if (HIWORD(v24))
    {
      int v20 = 4;
    }
    else if (v24 >= 0x100)
    {
      int v20 = 2;
    }
    else
    {
      int v20 = v24 > 1;
    }
  }
  else
  {
    int v20 = 1;
  }
  if (v16 < a2)
  {
    unsigned int v21 = ~v16 + a2;
    if (v19 < 4)
    {
      int v22 = (v21 >> (8 * v19)) + 1;
      if (v19)
      {
        int v25 = v21 & ~(-1 << (8 * v19));
        bzero(a1, v19);
        if (v19 == 3)
        {
          *a1  = v25;
          *((unsigned char *)a1 + 2)  = BYTE2(v25);
        }
        else if (v19 == 2)
        {
          *a1  = v25;
        }
        else
        {
          *(unsigned char *)a1  = v25;
        }
      }
    }
    else
    {
      bzero(a1, v19);
      *(_DWORD *)a1  = v21;
      int v22 = 1;
    }
    switch(v20)
    {
      case 1:
        *((unsigned char *)a1 + v19)  = v22;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v19)  = v22;
        return;
      case 3:
        goto LABEL_49;
      case 4:
        *(_DWORD *)((char *)a1 + v19)  = v22;
        return;
      default:
        return;
    }
  }
  uint64_t v23 = ~v14;
  switch(v20)
  {
    case 1:
      *((unsigned char *)a1 + v19)  = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)((char *)a1 + v19)  = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_49:
      __break(1u);
      JUMPOUT(0x100275AC8);
    case 4:
      *(_DWORD *)((char *)a1 + v19)  = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if ((v15 & 0x80000000) != 0)
        {
          unint64_t v27 = ((((((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v12 + 8) & ~v12;
          if (v9 == v16)
          {
            uint64_t v28 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56);
            v28(v27, a2, v9, v7);
          }
          else
          {
            unint64_t v29 = (v18 + ((v17 + v27) & 0xFFFFFFFFFFFFFFF8)) & v23;
            uint64_t v30 = *(void (**)(unint64_t, uint64_t))(v11 + 56);
            v30(v29, a2);
          }
        }
        else
        {
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v26 = a2 ^ 0x80000000;
            *((void *)a1 + 1)  = 0;
          }
          else
          {
            uint64_t v26 = (a2 - 1);
          }
          *(void *)a1  = v26;
        }
      }
      return;
  }
}

uint64_t sub_100275AF0()
{
  return swift_initClassMetadata2();
}

uint64_t sub_100275B38()
{
  return swift_initClassMetadata2();
}

unsigned char *storeEnumTagSinglePayload for WiFiInterfaceRole(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100275C4CLL);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WiFiInterfaceRole()
{
  return &type metadata for WiFiInterfaceRole;
}

unsigned char *storeEnumTagSinglePayload for WiFiInterfaceLinkState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100275D50);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WiFiInterfaceLinkState()
{
  return &type metadata for WiFiInterfaceLinkState;
}

uint64_t sub_100275D9C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100275DA4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4)  = *(_WORD *)(a2 + 4);
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(void *)(a1 + 32)  = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100275DEC(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1)  = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2)  = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3)  = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(a1 + 4)  = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a1 + 5)  = *(unsigned char *)(a2 + 5);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = v3;
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100275E68(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4)  = *(_WORD *)(a2 + 4);
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(void *)(a1 + 32)  = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100275EB4(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3)  = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t sub_100275F10(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40)  = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40)  = 0;
    }
    if (a2) {
      *(void *)(result + 32)  = a2;
    }
  }
  return result;
}

uint64_t sub_100275F6C()
{
  return swift_getWitnessTable();
}

unint64_t sub_100275F88()
{
  unint64_t result = qword_100484148;
  if (!qword_100484148)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100484148);
  }
  return result;
}

unint64_t sub_100275FDC()
{
  unint64_t result = qword_100484150;
  if (!qword_100484150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100484150);
  }
  return result;
}

uint64_t sub_100276030()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  uint64_t v8 = v7 + v5;
  swift_release();
  uint64_t v9 = v0 + v4;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v10(v9, v1);
  v10(v0 + v7, v1);

  return _swift_deallocObject(v0, v8, v6);
}

uint64_t sub_10027611C()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 32))(v0 + ((v1 + 48) & ~v1), v0 + ((*(void *)(*(void *)(*(void *)(v0 + 16) - 8) + 64) + v1 + ((v1 + 48) & ~v1)) & ~v1));
}

uint64_t sub_1002761AC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002761F4()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10027622C()
{
  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t sub_100276258(uint64_t a1)
{
  return sub_10026A230(a1);
}

uint64_t sub_1002762F4(unint64_t a1)
{
  unint64_t v1 = a1 | ((HIDWORD(a1) & 1) << 32);
  swift_getAssociatedTypeWitness();
  return sub_100269CB8(v1);
}

uint64_t sub_1002763A0(uint64_t a1)
{
  uint64_t v1 = a1 & 0xFFFFFFFFFFFFLL;
  swift_getAssociatedTypeWitness();
  return sub_100269AA8(v1);
}

uint64_t sub_10027643C()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, AssociatedTypeWitness);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1002764E0(char a1)
{
  char v1 = a1 & 1;
  swift_getAssociatedTypeWitness();
  return sub_100266AC8(v1);
}

uint64_t NANState.rawValue.getter(char a1)
{
  if (a1) {
    return 0x64656C62616E65;
  }
  else {
    return 0x64656C6261736964;
  }
}

uint64_t NANState.actionDescription.getter()
{
  swift_bridgeObjectRelease();
  String.index(before:)();
  swift_bridgeObjectRelease();
  String.subscript.getter();
  swift_bridgeObjectRelease();
  uint64_t v0 = static String._fromSubstring(_:)();
  swift_bridgeObjectRelease();
  return v0;
}

CoreP2P::NANState_optional __swiftcall NANState.init(rawValue:)(Swift::String rawValue)
{
  object  = rawValue._object;
  v2._countAndFlagsBits  = rawValue._countAndFlagsBits;
  v2._object  = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10044FC50, v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.value  = CoreP2P_NANState_enabled;
  }
  else {
    v4.value  = CoreP2P_NANState_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t sub_1002766F4(char *a1, char *a2)
{
  return sub_100041B9C(*a1, *a2);
}

Swift::Int sub_100276700()
{
  return Hasher._finalize()();
}

uint64_t sub_100276784()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1002767F4()
{
  return Hasher._finalize()();
}

uint64_t sub_100276874@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10044FC50, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2  = v5;
  return result;
}

void sub_1002768D4(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x64656C6261736964;
  if (*v1) {
    uint64_t v2 = 0x64656C62616E65;
  }
  unint64_t v3 = 0xE800000000000000;
  if (*v1) {
    unint64_t v3 = 0xE700000000000000;
  }
  *a1  = v2;
  a1[1]  = v3;
}

uint64_t sub_100276914()
{
  if (*v0) {
    return 0x64656C62616E65;
  }
  else {
    return 0x64656C6261736964;
  }
}

void *NANDiscoveryWindowIndex.first.unsafeMutableAddressor()
{
  return &static NANDiscoveryWindowIndex.first;
}

void *NANDiscoveryWindowIndex.last.unsafeMutableAddressor()
{
  return &static NANDiscoveryWindowIndex.last;
}

CoreP2P::NANDiscoveryWindowIndex __swiftcall NANDiscoveryWindowIndex.next()()
{
  if (v0 == 15) {
    return 0;
  }
  BOOL v2 = __OFADD__(v0, 1);
  result.index  = v0 + 1;
  if (v2) {
    __break(1u);
  }
  return result;
}

CoreP2P::NANDiscoveryWindowIndex __swiftcall NANDiscoveryWindowIndex.previous()()
{
  if (!v0) {
    return (CoreP2P::NANDiscoveryWindowIndex)15;
  }
  BOOL v1 = __OFSUB__(v0, 1);
  result.index  = v0 - 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

unint64_t sub_1002769A8()
{
  unint64_t result = qword_100487B30;
  if (!qword_100487B30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100487B30);
  }
  return result;
}

unint64_t sub_100276A00()
{
  unint64_t result = qword_100484158;
  if (!qword_100484158)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100484158);
  }
  return result;
}

void *sub_100276A54()
{
  return &protocol witness table for Int;
}

unsigned char *storeEnumTagSinglePayload for NANState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100276B2CLL);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANState()
{
  return &type metadata for NANState;
}

ValueMetadata *type metadata accessor for NANDiscoveryWindowIndex()
{
  return &type metadata for NANDiscoveryWindowIndex;
}

uint64_t sub_100276B74()
{
  return swift_unownedRetainStrong();
}

uint64_t sub_100276B84@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + qword_100484170;
  swift_beginAccess();
  return sub_10027E64C(v3, a1);
}

uint64_t sub_100276BD8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + qword_100488788;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_100276C4C()
{
  Strong  = swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    long long v4 = 0u;
    long long v5 = 0u;
    goto LABEL_7;
  }
  uint64_t v1 = (void *)Strong;
  sub_1002AB15C((uint64_t)&v4);

  if (!*((void *)&v5 + 1))
  {
LABEL_7:
    sub_1000380B4((uint64_t)&v4, &qword_10047D0D0);
    return 0;
  }
  sub_100010BCC(&qword_100485290);
  if (swift_dynamicCast()) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t sub_100276CF4(uint64_t a1, unint64_t a2)
{
  if (!(a2 >> 62)) {
    return 0x69646E6F70736552;
  }
  if (a2 >> 62 == 1) {
    return 0x73696C6261747345;
  }
  uint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      uint64_t result = 0xD000000000000011;
      break;
    case 2:
      uint64_t result = 0xD000000000000016;
      break;
    case 3:
      uint64_t result = 0x74616E696D726554;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100276DD4(void *a1, unint64_t a2)
{
  type metadata accessor for Mirror.AncestorRepresentation();
  __chkstk_darwin();
  long long v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100480650);
  __chkstk_darwin();
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned char v10[2] = a1;
  v10[3]  = a2;
  v10[1]  = _swiftEmptyArrayStorage;
  uint64_t v8 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  _s17ResponderInstanceC5StateOMa();
  sub_100010BCC(&qword_10047DC10);
  sub_100074578();
  sub_100110BD8((uint64_t)v5);
  sub_10027E13C(a1, a2);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t sub_100276F70()
{
  return sub_100276CF4(*(void *)v0, *(void *)(v0 + 8));
}

uint64_t sub_100276F80()
{
  return sub_100276DD4(*(void **)v0, *(void *)(v0 + 8));
}

uint64_t sub_100276F90()
{
  uint64_t v1 = type metadata accessor for DispatchTime();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for P2PTimer();
  variable initialization expression of AWDLPeer.lastUpdated();
  uint64_t v5 = v0 + qword_100484180;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v2 + 40))(v5, v4, v1);
  return swift_endAccess();
}

unint64_t sub_100277098()
{
  uint64_t v1 = v0 + qword_100484170;
  swift_beginAccess();
  return *(unsigned __int16 *)(v1 + 2) | ((unint64_t)*(unsigned int *)(v1 + 4) << 16);
}

uint64_t sub_1002770E8()
{
  unint64_t v1 = *(void *)(v0 + qword_100484188 + 8);
  if (!(v1 >> 62)) {
    return 1;
  }
  if (v1 >> 62 == 2)
  {
    unint64_t v2 = *(void *)(v0 + qword_100484188);
    if ((__int128)__PAIR128__(v1, v2) < (__int128)__PAIR128__(0x8000000000000000, 4)) {
      return (0xBu >> (v2 & 0xF)) & 1;
    }
  }
  return 0;
}

uint64_t sub_100277140()
{
  if (*(void *)(v0 + qword_100484188 + 8) >> 62 == 1) {
    return swift_retain();
  }
  else {
    return 0;
  }
}

uint64_t sub_100277184(uint64_t a1)
{
  sub_100010BCC(&qword_10047DB90);
  __chkstk_darwin();
  uint64_t v4 = &v12[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  uint64_t v6 = &v12[-v5];
  uint64_t v7 = v1 + qword_1004887A8;
  swift_beginAccess();
  sub_1000136F4(v7, (uint64_t)v6, &qword_10047DB90);
  uint64_t v8 = type metadata accessor for DispatchTime();
  uint64_t v9 = *(void *)(v8 - 8);
  int v10 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8);
  uint64_t result = sub_1000380B4((uint64_t)v6, &qword_10047DB90);
  if (v10 == 1 || *(void *)(v1 + qword_1004887A0) != a1)
  {
    type metadata accessor for P2PTimer();
    variable initialization expression of AWDLPeer.lastUpdated();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v9 + 56))(v4, 0, 1, v8);
    swift_beginAccess();
    sub_10027ECE4((uint64_t)v4, v7);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_100277348()
{
  return *(void *)(v0 + qword_1004887A0);
}

uint64_t sub_100277358(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + qword_1004887A0);
  *(void *)(v1 + qword_1004887A0)  = a1;
  return sub_100277184(v2);
}

uint64_t sub_100277370@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + qword_1004887A8;
  swift_beginAccess();
  return sub_1000136F4(v3, a1, &qword_10047DB90);
}

NSObject *sub_1002773CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_10027EB70(a1, a2);
  swift_release();
  return v2;
}

id sub_100277400()
{
  uint64_t v1 = v0;
  ObjectType  = (objc_class *)swift_getObjectType();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v17 - v5;
  unint64_t v7 = *(void *)&v1[qword_100484188 + 8];
  if ((v7 & 0x8000000000000000) == 0
    || (unint64_t v8 = *(void *)&v1[qword_100484188],
        (__int128)__PAIR128__(v7, v8) < (__int128)__PAIR128__(0x8000000000000000, 2)))
  {
    uint64_t v9 = *(void *)&v1[qword_100484168];
    swift_unownedRetainStrong();
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v9 + *(void *)(*(void *)v9 + 96), AssociatedTypeWitness);
    swift_release();
    int v10 = &v1[qword_100484170];
    swift_beginAccess();
    uint64_t v11 = *(unsigned int *)(v10 + 10);
    uint64_t v12 = *((unsigned __int16 *)v10 + 4);
    uint64_t v13 = *v10;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 224))(v13, v12 | (v11 << 16), AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, AssociatedTypeWitness);
LABEL_4:
    sub_1002777F8(-1, 0x64657361656C6572, 0xE800000000000000);
    goto LABEL_5;
  }
  if (v7 == 0x8000000000000000 && v8 == 2) {
    goto LABEL_4;
  }
LABEL_5:
  sub_100277678(v1);
  v18.receiver  = v1;
  v18.super_class  = ObjectType;
  return [super dealloc];
}

void sub_100277678(void *a1)
{
  id v1 = a1;
  oslog  = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    id v5 = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v1;

    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "Destroyed %@", v3, 0xCu);
    sub_100010BCC(&qword_10047CC30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

uint64_t sub_1002777F8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  id v8 = v3;
  swift_bridgeObjectRetain_n();
  uint64_t v9 = (char *)v8;
  int v10 = Logger.logObject.getter();
  uint64_t v97 = a1;
  if (a1 == 2) {
    os_log_type_t v11 = static os_log_type_t.default.getter();
  }
  else {
    os_log_type_t v11 = static os_log_type_t.error.getter();
  }
  os_log_type_t v12 = v11;
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v92 = (void *)swift_slowAlloc();
    *(void *)&v98[0]  = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 138412546;
    v100[0]  = v9;
    uint64_t v14 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v92 = v4;

    *(_WORD *)(v13 + 12)  = 2080;
    swift_bridgeObjectRetain();
    v100[0]  = sub_100010680(a2, a3, (uint64_t *)v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v10, v12, "%@ was terminated because %s", (uint8_t *)v13, 0x16u);
    sub_100010BCC(&qword_10047CC30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  uint64_t v15 = qword_100484190;
  unsigned int v16 = &unk_100484000;
  if (v9[qword_100484190] == 1)
  {
    uint64_t v95 = qword_100484190;
    uint64_t v17 = sub_10027BFA4();
    objc_super v18 = (unsigned __int8 *)&v9[qword_100484170];
    swift_beginAccess();
    uint64_t v19 = v18[8];
    uint64_t v20 = v18[9];
    uint64_t v21 = v18[10];
    uint64_t v22 = v18[11];
    uint64_t v23 = v18[12];
    uint64_t v93 = v18;
    uint64_t v24 = v18[13];
    int v25 = (uint64_t *)&v9[qword_100484178];
    unint64_t v26 = *(void *)&v9[qword_100484178 + 8];
    uint64_t v90 = (uint64_t *)&v9[qword_100484178];
    if (v26 >> 60 == 15)
    {
      unint64_t v27 = v19 | (v20 << 8) | (v21 << 16) | (v22 << 24) | (v23 << 32) | (v24 << 40);
      unint64_t v28 = WiFiAddress.ipv6LinkLocalAddress.getter(v27);
      uint64_t v30 = v29;
      uint64_t v94 = v31;
      uint64_t v33 = v32;
    }
    else
    {
      uint64_t v34 = *v25;
      sub_100013D44(*v25, v26);
      uint64_t v84 = InterfaceIdentifier.ipv6Address.getter(v34, v26);
      uint64_t v86 = v35;
      uint64_t v94 = v36;
      uint64_t v88 = v9;
      unint64_t v37 = v17;
      uint64_t v39 = v38;
      sub_10000C95C(v34, v26);
      uint64_t v40 = v19 | (v20 << 8) | (v21 << 16) | (v22 << 24);
      uint64_t v33 = v39;
      uint64_t v17 = v37;
      uint64_t v9 = v88;
      unint64_t v27 = v40 | (v23 << 32) | (v24 << 40);
      unint64_t v28 = v84;
      uint64_t v30 = v86;
    }
    uint64_t v41 = (void (*)(long long *, void))(*(uint64_t (**)(long long *))(*v17 + 392))(v98);
    uint64_t v42 = type metadata accessor for WiFiInterface.NeighborDiscoveryTable();
    WiFiInterface.NeighborDiscoveryTable.postPeerAbsence(macAddress:ipv6Address:)(v27, v28, v30, v94, v33, v42);
    v41(v98, 0);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v43 = sub_10027BFA4();
    uint64_t v44 = *(void *)&v9[qword_100484168];
    swift_unownedRetainStrong();
    uint64_t v45 = *(void **)(v44 + *(void *)(*(void *)v44 + 448));
    swift_retain();
    swift_release();
    swift_release();
    unsigned int v16 = (void *)&unk_100484000;
    uint64_t v15 = v95;
    if (v45)
    {
      swift_release();
      if (v43 == v45)
      {
        uint64_t v96 = v42;
        swift_unownedRetainStrong();
        uint64_t v46 = v93[9];
        uint64_t v47 = v93[10];
        uint64_t v48 = v93[11];
        uint64_t v49 = v93[12];
        uint64_t v50 = v93[13];
        unint64_t v51 = v90[1];
        if (v51 >> 60 == 15)
        {
          unint64_t v52 = v93[8] | (unint64_t)(v46 << 8) | (v47 << 16) | (v48 << 24) | (v49 << 32) | (v50 << 40);
          unint64_t v53 = WiFiAddress.ipv6LinkLocalAddress.getter(v52);
          uint64_t v55 = v54;
          uint64_t v57 = v56;
          uint64_t v59 = v58;
        }
        else
        {
          uint64_t v74 = *v90;
          uint64_t v75 = *v90;
          unint64_t v76 = v90[1];
          uint64_t v91 = v93[8];
          sub_100013D44(v75, v76);
          uint64_t v77 = InterfaceIdentifier.ipv6Address.getter(v74, v51);
          uint64_t v87 = v78;
          unint64_t v89 = v77;
          uint64_t v85 = v79;
          uint64_t v81 = v80;
          sub_10000C95C(v74, v51);
          uint64_t v82 = v91 | (v46 << 8) | (v47 << 16) | (v48 << 24);
          unint64_t v53 = v89;
          uint64_t v83 = v82 | (v49 << 32);
          uint64_t v55 = v85;
          uint64_t v57 = v87;
          unint64_t v52 = v83 | (v50 << 40);
          uint64_t v59 = v81;
        }
        swift_beginAccess();
        WiFiInterface.NeighborDiscoveryTable.postPeerAbsence(macAddress:ipv6Address:)(v52, v53, v55, v57, v59, v96);
        swift_endAccess();
        swift_release();
        swift_bridgeObjectRelease();
        unsigned int v16 = &unk_100484000;
        uint64_t v15 = v95;
      }
    }
  }
  sub_10027E5B4((void *)3, 0x8000000000000000);
  if (v9[v15] == 1)
  {
    uint64_t v60 = sub_100276C4C();
    if (v60)
    {
      uint64_t v61 = (void *)v60;
      sub_10027E60C();
      unint64_t v62 = &v9[v16[46]];
      swift_beginAccess();
      id v63 = WiFiAwarePublisherDataSessionHandle.init(_:)(*v62 | ((unint64_t)v62[8] << 8) | ((unint64_t)v62[9] << 16) | ((unint64_t)*(unsigned int *)(v62 + 10) << 24));
      [v61 publishDataTerminatedForHandle:v63 reason:2];

      swift_unknownObjectRelease();
    }
  }
  Strong  = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v65 = (void *)Strong;
    swift_beginAccess();
    sub_1002AB218();
  }
  uint64_t v66 = (uint64_t *)&v9[qword_100488790];
  os_log_type_t v67 = *(void (**)(void))&v9[qword_100488790];
  if (v67)
  {
    swift_retain();
    v67(0);
    sub_100011E30((uint64_t)v67);
  }
  swift_unknownObjectWeakAssign();
  uint64_t v68 = *v66;
  uint64_t *v66 = 0;
  v66[1]  = 0;
  uint64_t result = sub_100011E30(v68);
  if (v97 != -1)
  {
    swift_unownedRetainStrong();
    sub_100354870();
    swift_release();
    sub_1002D8D24((uint64_t)v9);
    uint64_t result = swift_release();
  }
  uint64_t v70 = qword_100484198;
  if (v9[qword_100484198] == 1)
  {
    os_log_t v71 = &v9[v16[46]];
    swift_beginAccess();
    sub_1000136F4((uint64_t)(v71 + 136), (uint64_t)v98, (uint64_t *)&unk_100486320);
    if (v99 == 255)
    {
      return sub_1000380B4((uint64_t)v98, (uint64_t *)&unk_100486320);
    }
    else if (v99)
    {
      sub_10006EF50(v98, (uint64_t)v100);
      uint64_t v72 = v101;
      uint64_t v73 = v102;
      sub_1000369C4(v100, v101);
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v73 + 16))(*((unsigned __int16 *)v71 + 1) | ((unint64_t)*((unsigned int *)v71 + 1) << 16), v72, v73);
      v9[v70]  = 0;
      return sub_100010754((uint64_t)v100);
    }
    else
    {
      return sub_1001B7D50((uint64_t)v98);
    }
  }
  return result;
}

id sub_100278234(void *a1)
{
  id v1 = a1;
  return sub_100277400();
}

uint64_t sub_10027825C(uint64_t a1)
{
  swift_unownedRelease();
  sub_10027E6A8(a1 + qword_100484170);
  uint64_t v2 = a1 + qword_100488788;
  uint64_t v3 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  sub_10000C95C(*(void *)(a1 + qword_100484178), *(void *)(a1 + qword_100484178 + 8));
  sub_100011E30(*(void *)(a1 + qword_100488790));
  swift_unknownObjectWeakDestroy();
  uint64_t v4 = a1 + qword_100484180;
  uint64_t v5 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  sub_10027E190(*(void **)(a1 + qword_100484188), *(void *)(a1 + qword_100484188 + 8));
  return sub_1000380B4(a1 + qword_1004887A8, &qword_10047DB90);
}

uint64_t sub_100278388()
{
  uint64_t v2 = v0;
  v18[1]  = *(void *)((swift_isaMask & *v0) + 0x58);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)v18 - v4;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (void *)((char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  int v10 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  os_log_type_t v11 = (void *)*v10;
  *uint64_t v9 = *v10;
  (*(void (**)(uint64_t *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v12 = v11;
  LOBYTE(v11)  = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v7 + 8))(v9, v6);
  if (v11)
  {
    uint64_t v14 = *(void *)((char *)v2 + qword_100484168);
    swift_unownedRetainStrong();
    sub_1003546AC();
    uint64_t result = swift_release();
    if (!v1)
    {
      swift_unownedRetainStrong();
      uint64_t v15 = v20;
      (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v5, v14 + *(void *)(*(void *)v14 + 96), AssociatedTypeWitness);
      swift_release();
      uint64_t v16 = (uint64_t)v2 + qword_100484170;
      swift_beginAccess();
      sub_10027E64C(v16, (uint64_t)v19);
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 264))(v19, AssociatedTypeWitness, AssociatedConformanceWitness);
      sub_10027E6A8((uint64_t)v19);
      return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v5, AssociatedTypeWitness);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100278694()
{
  uint64_t v1 = v0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)v28 - v4;
  if (*(void *)&v0[qword_100484188 + 8] >> 62)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = *(void *)&v0[qword_100484188];
    Strong  = (unsigned __int8 *)swift_unknownObjectWeakLoadStrong();
    if (!Strong || (int v8 = Strong[qword_1004887F0], Strong, v8 != 1))
    {
      id v15 = v1;
      int v10 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v10, v16))
      {
        uint64_t v17 = (uint8_t *)swift_slowAlloc();
        objc_super v18 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v17 = 138412290;
        id v33 = v15;
        id v19 = v15;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *objc_super v18 = v1;

        _os_log_impl((void *)&_mh_execute_header, v10, v16, "%@ cannot retry response because the associated publisher is no longer active", v17, 0xCu);
        sub_100010BCC(&qword_10047CC30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      goto LABEL_13;
    }
    uint64_t v9 = v1;
    int v10 = Logger.logObject.getter();
    if ((v6 & 0x8000000000000000) == 0)
    {
      os_log_type_t v11 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v10, v11))
      {
        id v12 = (uint8_t *)swift_slowAlloc();
        uint64_t v13 = (void *)swift_slowAlloc();
        *(_DWORD *)id v12 = 138412290;
        id v33 = v9;
        uint64_t v14 = v9;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v13 = v1;

        _os_log_impl((void *)&_mh_execute_header, v10, v11, "%@ is being terminated because response retries exceeded", v12, 0xCu);
        sub_100010BCC(&qword_10047CC30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
LABEL_13:

      sub_100278D88();
      return;
    }
    os_log_type_t v20 = static os_log_type_t.default.getter();
    int v21 = v20;
    if (os_log_type_enabled(v10, v20))
    {
      uint64_t v32 = v9;
      uint64_t v22 = swift_slowAlloc();
      int v30 = v21;
      uint64_t v23 = (uint8_t *)v22;
      uint64_t v31 = (void *)swift_slowAlloc();
      uint64_t v29 = v23;
      *(_DWORD *)uint64_t v23 = 138412290;
      v28[1]  = v23 + 4;
      id v33 = v32;
      v28[0]  = &v34;
      uint64_t v24 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v31 = v1;

      uint64_t v9 = v32;
      _os_log_impl((void *)&_mh_execute_header, v10, (os_log_type_t)v30, "%@ is being retried", v29, 0xCu);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v25 = *(void *)&v9[qword_100484168];
    swift_unownedRetainStrong();
    sub_1003546AC();
    swift_release();
    swift_unownedRetainStrong();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v25 + *(void *)(*(void *)v25 + 96), AssociatedTypeWitness);
    swift_release();
    uint64_t v26 = (uint64_t)&v9[qword_100484170];
    swift_beginAccess();
    sub_10027E64C(v26, (uint64_t)&v33);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(id *, uint64_t, uint64_t))(AssociatedConformanceWitness + 264))(&v33, AssociatedTypeWitness, AssociatedConformanceWitness);
    sub_10027E6A8((uint64_t)&v33);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, AssociatedTypeWitness);
    sub_10027E5B4((void *)(v6 + 1), 0);
  }
}

void sub_100278D88()
{
  uint64_t v1 = v0;
  uint64_t v2 = swift_isaMask & *(void *)v0;
  uint64_t v41 = *(void *)(v2 + 0x58);
  uint64_t v40 = *(void *)(v2 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v37 - v5;
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  int v10 = (uint64_t *)((char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  os_log_type_t v11 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  id v12 = (void *)*v11;
  uint64_t *v10 = *v11;
  (*(void (**)(uint64_t *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  id v13 = v12;
  char v14 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v8 + 8))(v10, v7);
  if (v14)
  {
    unint64_t v15 = *(void *)&v1[qword_100484188 + 8];
    if ((v15 & 0x8000000000000000) != 0
      && (unint64_t v16 = *(void *)&v1[qword_100484188],
          (__int128)__PAIR128__(v15, v16) >= (__int128)__PAIR128__(0x8000000000000000, 2)))
    {
      if (v15 == 0x8000000000000000 && v16 == 2)
      {
        sub_1002777F8(2, 0x7165722072657375, 0xEC00000074736575);
      }
      else
      {
        int v30 = v1;
        uint64_t v31 = Logger.logObject.getter();
        os_log_type_t v32 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v31, v32))
        {
          uint64_t v34 = (uint8_t *)swift_slowAlloc();
          uint64_t v35 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v34 = 138412290;
          uint64_t v42 = v30;
          uint64_t v36 = v30;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v35 = v1;

          _os_log_impl((void *)&_mh_execute_header, v31, v32, "%@ was already in process of termination, ignoring request to terminate", v34, 0xCu);
          sub_100010BCC(&qword_10047CC30);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
      }
    }
    else
    {
      uint64_t v17 = v1;
      objc_super v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = swift_slowAlloc();
        uint64_t v39 = AssociatedTypeWitness;
        int v21 = (uint8_t *)v20;
        unint64_t v37 = (void *)swift_slowAlloc();
        uint64_t v38 = v6;
        *(_DWORD *)int v21 = 138412290;
        uint64_t v42 = v17;
        uint64_t v22 = v17;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *unint64_t v37 = v1;

        _os_log_impl((void *)&_mh_execute_header, v18, v19, "%@ will attempt to stop", v21, 0xCu);
        sub_100010BCC(&qword_10047CC30);
        swift_arrayDestroy();
        uint64_t v6 = v38;
        swift_slowDealloc();
        uint64_t AssociatedTypeWitness = v39;
        swift_slowDealloc();
      }
      else
      {
      }
      sub_10027E5B4((void *)3, 0x8000000000000000);
      uint64_t v23 = *(void *)&v17[qword_100484168];
      swift_unownedRetainStrong();
      sub_1003546AC();
      swift_release();
      swift_unownedRetainStrong();
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v23 + *(void *)(*(void *)v23 + 96), AssociatedTypeWitness);
      swift_release();
      uint64_t v24 = &v17[qword_100484170];
      swift_beginAccess();
      uint64_t v25 = *(unsigned int *)(v24 + 10);
      uint64_t v26 = *((unsigned __int16 *)v24 + 4);
      uint64_t v27 = *v24;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 224))(v27, v26 | (v25 << 16), AssociatedTypeWitness, AssociatedConformanceWitness);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, AssociatedTypeWitness);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1002793D4(uint64_t a1)
{
  v316  = a1;
  ObjectType  = (os_log_t)swift_getObjectType();
  uint64_t v2 = swift_isaMask & *(void *)v1;
  v317  = v1;
  v311  = v2;
  sub_100010BCC(&qword_100485280);
  __chkstk_darwin();
  v312  = (os_log_t)((char *)&v303 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v4 = type metadata accessor for DriverEvent(0);
  __chkstk_darwin();
  v318  = (uint64_t)&v303 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v315  = (uint64_t)&v303 - v6;
  __chkstk_darwin();
  uint64_t v8 = (char *)&v303 - v7;
  __chkstk_darwin();
  int v10 = (unsigned __int8 *)&v303 - v9;
  __chkstk_darwin();
  id v12 = (char *)&v303 - v11;
  __chkstk_darwin();
  char v14 = (char *)&v303 - v13;
  uint64_t v15 = type metadata accessor for DispatchPredicate();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin();
  os_log_t v18 = (os_log_t)((char *)&v303 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  os_log_type_t v19 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v20 = (void *)*v19;
  v18->isa  = (Class)*v19;
  (*(void (**)(os_log_t, void, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
  id v21 = v20;
  uint64_t v22 = _dispatchPreconditionTest(_:)();
  (*(void (**)(os_log_t, uint64_t))(v16 + 8))(v18, v15);
  if (v22)
  {
    uint64_t v24 = v316;
    sub_10027EC1C(v316, (uint64_t)v14, type metadata accessor for DriverEvent);
    EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
    uint64_t v26 = (uint64_t)v14;
    if (EnumCaseMultiPayload != 4)
    {
      uint64_t v27 = v317;
      uint64_t v28 = v318;
      if (!EnumCaseMultiPayload)
      {
        sub_10027EC1C((uint64_t)v14, (uint64_t)v12, type metadata accessor for DriverEvent);
        sub_10006E544((uint64_t)v12, (uint64_t)v325);
        sub_10006E544((uint64_t)v325, (uint64_t)v326);
        switch(sub_1001343E0((uint64_t)v326))
        {
          case 4u:
            v313  = v14;
            uint64_t v29 = NANBitmap.Channel.operatingClass.getter(v326);
            int v30 = *(unsigned __int8 *)(v29 + 7);
            int v31 = *(unsigned __int8 *)(v29 + 8);
            os_log_type_t v32 = &v27[qword_100484188];
            if (!(*(void *)&v27[qword_100484188 + 8] >> 62) && v30 == 5)
            {
              if (*(unsigned char *)(v29 + 8))
              {
                uint64_t v33 = *(void *)v32;
                uint64_t v34 = v27;
                uint64_t v35 = Logger.logObject.getter();
                os_log_type_t v36 = static os_log_type_t.error.getter();
                if (os_log_type_enabled(v35, v36))
                {
                  v315  = (uint64_t)v35;
                  v318  = v33;
                  uint64_t v37 = swift_slowAlloc();
                  uint64_t v38 = (void *)swift_slowAlloc();
                  v316  = swift_slowAlloc();
                  *(void *)&v319[0]  = v316;
                  *(_DWORD *)uint64_t v37 = 138412802;
                  v321[0]  = (uint64_t)v34;
                  uint64_t v39 = v34;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  void *v38 = v317;

                  *(_WORD *)(v37 + 12)  = 2080;
                  unint64_t v40 = 0xE700000000000000;
                  unint64_t v41 = 0x646570706F7264;
                  if (v31 != 2)
                  {
                    unint64_t v41 = 0xD000000000000010;
                    unint64_t v40 = 0x80000001003DC150;
                  }
                  if (v31 == 1) {
                    uint64_t v42 = 0x756F2064656D6974;
                  }
                  else {
                    uint64_t v42 = v41;
                  }
                  if (v31 == 1) {
                    unint64_t v43 = 0xE900000000000074;
                  }
                  else {
                    unint64_t v43 = v40;
                  }
                  v321[0]  = sub_100010680(v42, v43, (uint64_t *)v319);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease();
                  *(_WORD *)(v37 + 22)  = 2048;
                  v321[0]  = v318;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  uint64_t v35 = v315;
                  _os_log_impl((void *)&_mh_execute_header, (os_log_t)v315, v36, "%@ failed to send datapath response, with status %s, for retry #%ld", (uint8_t *)v37, 0x20u);
                  sub_100010BCC(&qword_10047CC30);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();
                }
                else
                {
                }
                uint64_t v26 = (uint64_t)v313;
                sub_100278694();
              }
              else
              {
                sub_10027E5B4((void *)1, 0x8000000000000000);
                uint64_t v26 = (uint64_t)v313;
              }
              return sub_10027EC84(v26, type metadata accessor for DriverEvent);
            }
            uint64_t v136 = v27;
            v318  = Logger.logObject.getter();
            if (v31)
            {
              int v137 = static os_log_type_t.error.getter();
              if (os_log_type_enabled((os_log_t)v318, (os_log_type_t)v137))
              {
                LODWORD(v315)  = v137;
                uint64_t v138 = swift_slowAlloc();
                uint64_t v139 = swift_slowAlloc();
                v316  = swift_slowAlloc();
                *(void *)&v319[0]  = v316;
                *(_DWORD *)uint64_t v138 = 138413058;
                v321[0]  = (uint64_t)v136;
                unint64_t v140 = v136;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                ObjectType  = v139;
                v139->isa  = (Class)v317;

                *(_WORD *)(v138 + 12)  = 2080;
                uint64_t v141 = NANManagementFrameType.description.getter(v30);
                v321[0]  = sub_100010680(v141, v142, (uint64_t *)v319);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                *(_WORD *)(v138 + 22)  = 2080;
                unint64_t v143 = 0xE700000000000000;
                unint64_t v144 = 0x646570706F7264;
                if (v31 != 2)
                {
                  unint64_t v144 = 0xD000000000000010;
                  unint64_t v143 = 0x80000001003DC150;
                }
                if (v31 == 1) {
                  uint64_t v145 = 0x756F2064656D6974;
                }
                else {
                  uint64_t v145 = v144;
                }
                if (v31 == 1) {
                  unint64_t v146 = 0xE900000000000074;
                }
                else {
                  unint64_t v146 = v143;
                }
                v321[0]  = sub_100010680(v145, v146, (uint64_t *)v319);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                *(_WORD *)(v138 + 32)  = 2080;
                uint64_t v147 = *(void **)v32;
                unint64_t v148 = *((void *)v32 + 1);
                sub_10027E13C(v147, v148);

                uint64_t v149 = sub_100276CF4((uint64_t)v147, v148);
                unint64_t v151 = v150;
                sub_10027E190(v147, v148);
                v321[0]  = sub_100010680(v149, v151, (uint64_t *)v319);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                swift_bridgeObjectRelease();
                uint64_t v82 = v318;
                _os_log_impl((void *)&_mh_execute_header, (os_log_t)v318, (os_log_type_t)v315, "%@ failed to transmit frame %s with status %s in %s", (uint8_t *)v138, 0x2Au);
                sub_100010BCC(&qword_10047CC30);
                swift_arrayDestroy();
                swift_slowDealloc();
LABEL_106:
                swift_arrayDestroy();
                swift_slowDealloc();
LABEL_107:
                swift_slowDealloc();

                uint64_t v26 = (uint64_t)v313;
                return sub_10027EC84(v26, type metadata accessor for DriverEvent);
              }
            }
            else
            {
              os_log_type_t v206 = static os_log_type_t.default.getter();
              int v207 = v206;
              if (os_log_type_enabled((os_log_t)v318, v206))
              {
                uint64_t v208 = swift_slowAlloc();
                uint64_t v209 = swift_slowAlloc();
                v315  = (uint64_t)v209;
                v316  = swift_slowAlloc();
                *(void *)&v319[0]  = v316;
                *(_DWORD *)uint64_t v208 = 138412802;
                v321[0]  = (uint64_t)v136;
                LODWORD(ObjectType)  = v207;
                unint64_t v210 = v136;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                v209->isa  = (Class)v317;

                *(_WORD *)(v208 + 12)  = 2080;
                uint64_t v211 = NANManagementFrameType.description.getter(v30);
                v321[0]  = sub_100010680(v211, v212, (uint64_t *)v319);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                *(_WORD *)(v208 + 22)  = 2080;
                v213  = *(void **)v32;
                v214  = *((void *)v32 + 1);
                sub_10027E13C(*(void **)v32, v214);

                uint64_t v215 = sub_100276CF4((uint64_t)v213, v214);
                unint64_t v217 = v216;
                sub_10027E190(v213, v214);
                v321[0]  = sub_100010680(v215, v217, (uint64_t *)v319);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                swift_bridgeObjectRelease();
                uint64_t v82 = v318;
                _os_log_impl((void *)&_mh_execute_header, (os_log_t)v318, (os_log_type_t)ObjectType, "%@ successfully transmitted frame %s in %s", (uint8_t *)v208, 0x20u);
                sub_100010BCC(&qword_10047CC30);
                swift_arrayDestroy();
                swift_slowDealloc();
                goto LABEL_106;
              }
            }

            uint64_t v26 = (uint64_t)v313;
            return sub_10027EC84(v26, type metadata accessor for DriverEvent);
          case 5u:
            v313  = v14;
            uint64_t v48 = NANBitmap.Channel.operatingClass.getter(v326);
            uint64_t v49 = *(unsigned __int8 *)(v48 + 8);
            uint64_t v50 = *(unsigned __int8 *)(v48 + 9);
            v318  = *(unsigned int *)(v48 + 10);
            uint64_t v51 = *(void *)(v48 + 16);
            unint64_t v52 = v27;
            sub_1001344F4((uint64_t)v325, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_100134598);
            unint64_t v53 = v52;
            sub_1001344F4((uint64_t)v325, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_100134598);
            uint64_t v54 = Logger.logObject.getter();
            os_log_type_t v55 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v54, v55))
            {
              uint64_t v56 = swift_slowAlloc();
              v311  = v49;
              uint64_t v57 = v56;
              uint64_t v58 = (void *)swift_slowAlloc();
              v315  = swift_slowAlloc();
              *(void *)&v319[0]  = v315;
              *(_DWORD *)uint64_t v57 = 138412546;
              v321[0]  = (uint64_t)v53;
              v316  = v51;
              uint64_t v59 = v53;
              ObjectType  = v54;
              uint64_t v60 = v50;
              uint64_t v61 = v53;
              unint64_t v62 = v59;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *uint64_t v58 = v317;

              unint64_t v53 = v61;
              *(_WORD *)(v57 + 12)  = 2080;
              uint64_t v63 = WiFiAddress.description.getter(v311 | (v60 << 8) | (v318 << 16));
              v321[0]  = sub_100010680(v63, v64, (uint64_t *)v319);
              uint64_t v51 = v316;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              sub_1001344F4((uint64_t)v325, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
              swift_bridgeObjectRelease();
              os_log_t v65 = ObjectType;
              _os_log_impl((void *)&_mh_execute_header, ObjectType, v55, "%@ received a new datapath request from %s", (uint8_t *)v57, 0x16u);
              sub_100010BCC(&qword_10047CC30);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              sub_1001344F4((uint64_t)v325, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
              swift_bridgeObjectRelease();
            }
            os_log_t v152 = v312;
            Array<A>.retrieve(attribute:)(41, v51, (uint64_t)v312);
            sub_1001344F4((uint64_t)v325, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
            uint64_t v153 = type metadata accessor for NANAttribute(0);
            int v154 = (*(uint64_t (**)(os_log_t, uint64_t, uint64_t))(*(void *)(v153 - 8) + 48))(v152, 1, v153);
            uint64_t v26 = (uint64_t)v313;
            if (v154 == 1)
            {
              sub_1000380B4((uint64_t)v152, &qword_100485280);
            }
            else if (swift_getEnumCaseMultiPayload() == 36)
            {
              isa  = (uint64_t)v152[3].isa;
              unint64_t v161 = (unint64_t)v152[4].isa;
              uint64_t v162 = v53;
              uint64_t v163 = (uint64_t)v152[5].isa;
              uint64_t v164 = (uint64_t)v152[6].isa;
              unint64_t v165 = (unint64_t)v152[7].isa;
              char v166 = (uint64_t *)&v162[qword_100484178];
              uint64_t v167 = *(void *)&v162[qword_100484178];
              unint64_t v168 = *(void *)&v162[qword_100484178 + 8];
              *char v166 = isa;
              v166[1]  = v161;
              sub_100038004(isa, v161);
              sub_10000C95C(v167, v168);
              sub_10000C95C(isa, v161);
              sub_1001331AC(v163, v164, v165);
            }
            else
            {
              sub_10027EC84((uint64_t)v152, type metadata accessor for NANAttribute);
            }
            unint64_t v205 = 0x8000000000000000;
            goto LABEL_102;
          case 7u:
            uint64_t v78 = NANBitmap.Channel.operatingClass.getter(v326);
            int v79 = *(unsigned __int8 *)(v78 + 1);
            uint64_t v80 = *(void *)(v78 + 16);
            uint64_t v81 = v27;
            sub_1001344F4((uint64_t)v325, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_100134598);
            uint64_t v82 = Logger.logObject.getter();
            os_log_type_t v83 = static os_log_type_t.default.getter();
            if (!os_log_type_enabled(v82, v83))
            {

              sub_1001344F4((uint64_t)v325, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
              swift_bridgeObjectRelease();
              return sub_10027EC84(v26, type metadata accessor for DriverEvent);
            }
            v318  = v80;
            v313  = (char *)v26;
            uint64_t v84 = swift_slowAlloc();
            uint64_t v85 = (void *)swift_slowAlloc();
            v316  = swift_slowAlloc();
            *(void *)&v319[0]  = v316;
            *(_DWORD *)uint64_t v84 = 138412546;
            v321[0]  = (uint64_t)v81;
            uint64_t v86 = v81;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *uint64_t v85 = v317;

            *(_WORD *)(v84 + 12)  = 2080;
            uint64_t v87 = 0x6465747065636361;
            if (v79 != 1) {
              uint64_t v87 = 0x64657463656A6572;
            }
            if (v79) {
              uint64_t v88 = v87;
            }
            else {
              uint64_t v88 = 0x65756E69746E6F63;
            }
            if (v79) {
              unint64_t v89 = 0xE800000000000000;
            }
            else {
              unint64_t v89 = 0xE900000000000064;
            }
            v321[0]  = sub_100010680(v88, v89, (uint64_t *)v319);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_1001344F4((uint64_t)v325, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v82, v83, "%@ received datapath confirmation with status %s", (uint8_t *)v84, 0x16u);
            sub_100010BCC(&qword_10047CC30);
            swift_arrayDestroy();
            swift_slowDealloc();
            goto LABEL_106;
          case 8u:
            uint64_t v90 = (unsigned __int8 *)NANBitmap.Channel.operatingClass.getter(v326);
            v305  = *v90;
            v316  = v90[1];
            v315  = v90[2];
            uint64_t v91 = v90[3];
            unint64_t v92 = v90[4];
            uint64_t v93 = v90[5];
            uint64_t v94 = v90[6];
            uint64_t v95 = &v27[qword_100488788];
            os_log_t v18 = v27;
            uint64_t v96 = Logger.logObject.getter();
            os_log_type_t v97 = static os_log_type_t.default.getter();
            LODWORD(v310)  = v97;
            BOOL v98 = os_log_type_enabled(v96, v97);
            v313  = (char *)v26;
            v308  = v93;
            v309  = v94;
            v318  = v92;
            v307  = v91;
            if (v98)
            {
              uint64_t v99 = swift_slowAlloc();
              uint64_t v100 = (void *)swift_slowAlloc();
              v304  = swift_slowAlloc();
              *(void *)&v319[0]  = v304;
              *(_DWORD *)uint64_t v99 = 138412546;
              v303  = v96;
              v321[0]  = (uint64_t)v18;
              v306  = v95;
              uint64_t v101 = v18;
              v312  = v18;
              uint64_t v102 = v101;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *uint64_t v100 = v317;

              *(_WORD *)(v99 + 12)  = 2080;
              uint64_t v103 = v316;
              uint64_t v104 = WiFiAddress.description.getter(v316 | (v315 << 8) | (v91 << 16) | (v318 << 24) | (v93 << 32) | (v94 << 40));
              v321[0]  = sub_100010680(v104, v105, (uint64_t *)v319);
              uint64_t v95 = v306;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              os_log_t v18 = v312;
              swift_bridgeObjectRelease();
              os_log_t v106 = v303;
              _os_log_impl((void *)&_mh_execute_header, v303, (os_log_type_t)v310, "%@ datapath established with %s", (uint8_t *)v99, 0x16u);
              sub_100010BCC(&qword_10047CC30);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_arrayDestroy();
              swift_slowDealloc();
              unint64_t v92 = v318;
              swift_slowDealloc();
            }
            else
            {

              uint64_t v103 = v316;
            }
            uint64_t v22 = (uint64_t)v18 + qword_100484170;
            swift_beginAccess();
            if (*(unsigned char *)(v22 + 74) == 2)
            {
              uint64_t v155 = Logger.logObject.getter();
              os_log_type_t v156 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v155, v156))
              {
                uint64_t v157 = swift_slowAlloc();
                *(void *)&v319[0]  = swift_slowAlloc();
                *(_DWORD *)uint64_t v157 = 136315394;
                uint64_t v158 = WiFiAddress.description.getter(v103 | (v315 << 8) | (v307 << 16) | (v92 << 24) | (v308 << 32) | (v309 << 40));
                v321[0]  = sub_100010680(v158, v159, (uint64_t *)v319);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                *(_WORD *)(v157 + 12)  = 256;
                LOBYTE(v321[0])  = v305;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                _os_log_impl((void *)&_mh_execute_header, v155, v156, "Established the datapath to %s[%hhu] even though we did not accept it in the datapath response. Force terminating it now", (uint8_t *)v157, 0xFu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }

              uint64_t v26 = (uint64_t)v313;
              sub_100278D88();
              return sub_10027EC84(v26, type metadata accessor for DriverEvent);
            }
            uint64_t v169 = *(void *)(v22 + 16);
            if (v169 == 4
              || (uint64_t v171 = *(void *)(v22 + 24),
                  unint64_t v170 = *(void *)(v22 + 32),
                  sub_100013D44(v171, v170),
                  int64_t v172 = NANServiceInfo.genericServiceProtocol.getter(v169, v171, v170),
                  sub_1001331AC(v169, v171, v170),
                  !v172))
            {
              id v173 = 0;
            }
            else
            {
              id v173 = NANGenericServiceProtocol.apiDatapathServiceSpecificInfo.getter((uint64_t)v172);
              swift_bridgeObjectRelease();
            }
            uint64_t v174 = *(uint64_t *)((char *)&v18->isa + qword_100484168);
            swift_unownedRetainStrong();
            uint64_t v175 = (char *)v173;
            sub_100354870();
            swift_release();
            uint64_t v176 = sub_1002D8B3C(*(unsigned __int16 *)(v22 + 2) | ((unint64_t)*(unsigned int *)(v22 + 4) << 16));
            swift_release();
            sub_10027E5B4(v173, v176 | 0x4000000000000000);
            swift_release();

            Strong  = swift_unknownObjectWeakLoadStrong();
            if (Strong)
            {
              uint64_t v178 = (void *)Strong;
              sub_1002AB1C4();
            }
            if (*((unsigned char *)&v18->isa + qword_100484190)) {
              goto LABEL_139;
            }
            v306  = v95;
            *((unsigned char *)&v18->isa + qword_100484190)  = 1;
            unint64_t v179 = sub_10027BFA4();
            unint64_t v180 = (uint64_t *)((char *)v18 + qword_100484178);
            unint64_t v181 = *(unint64_t *)((char *)&v18[1].isa + qword_100484178);
            v312  = v18;
            v317  = v175;
            v310  = (char *)v18 + qword_100484178;
            if (v181 >> 60 == 15)
            {
              uint64_t v182 = v103 | (v315 << 8) | (v307 << 16) | (v318 << 24) | (v308 << 32) | (v309 << 40);
              v316  = WiFiAddress.ipv6LinkLocalAddress.getter(v182);
              uint64_t v184 = v183;
              unint64_t v186 = v185;
              uint64_t v188 = v187;
            }
            else
            {
              v243  = *v180;
              sub_100013D44(*v180, v181);
              v316  = InterfaceIdentifier.ipv6Address.getter(v243, v181);
              uint64_t v184 = v244;
              v245  = v103;
              unint64_t v186 = v246;
              uint64_t v188 = v247;
              sub_10000C95C(v243, v181);
              uint64_t v182 = v245 | (v315 << 8) | (v307 << 16) | (v318 << 24) | (v308 << 32) | (v309 << 40);
            }
            v248  = (void (*)(long long *, void))(*(uint64_t (**)(long long *))(*v179 + 392))(v319);
            v249  = type metadata accessor for WiFiInterface.NeighborDiscoveryTable();
            v318  = v182;
            v250  = v184;
            v251  = v186;
            v252  = v249;
            uint64_t v15 = 0;
            WiFiInterface.NeighborDiscoveryTable.postPeerPresence(macAddress:ipv6Address:)(v182, v316, v250, v251, v188, v249);
            v248(v319, 0);
            swift_release();
            swift_bridgeObjectRelease();
            os_log_t v18 = v312;
            v260  = sub_10027BFA4();
            swift_unownedRetainStrong();
            v261  = *(void **)(v174 + *(void *)(*(void *)v174 + 448));
            swift_retain();
            swift_release();
            swift_release();
            uint64_t v175 = v317;
            if (!v261) {
              goto LABEL_133;
            }
            swift_release();
            if (v260 != v261) {
              goto LABEL_133;
            }
            v316  = v252;
            swift_unownedRetainStrong();
            uint64_t v23 = (uint64_t *)v310;
            unint64_t v4 = *((void *)v310 + 1);
            if (v4 >> 60 != 15) {
              goto LABEL_155;
            }
            v262  = v318;
            v315  = WiFiAddress.ipv6LinkLocalAddress.getter(v318);
            v264  = v263;
            v266  = v265;
            v268  = v267;
            goto LABEL_156;
          case 9u:
            v313  = v14;
            v318  = *(void *)(NANBitmap.Channel.operatingClass.getter(v326) + 8);
            BOOL v107 = &v27[qword_100484188];
            uint64_t v109 = *(void *)&v27[qword_100484188];
            unint64_t v108 = *(void *)&v27[qword_100484188 + 8];
            if (!(v108 >> 62))
            {
              unint64_t v189 = v27;
              int v190 = Logger.logObject.getter();
              os_log_type_t v191 = static os_log_type_t.error.getter();
              int v192 = v191;
              if (os_log_type_enabled(v190, v191))
              {
                uint64_t v193 = swift_slowAlloc();
                char v194 = (char *)swift_slowAlloc();
                v310  = v194;
                v315  = swift_slowAlloc();
                *(void *)&v319[0]  = v315;
                *(_DWORD *)uint64_t v193 = 138413058;
                LODWORD(ObjectType)  = v192;
                v312  = v190;
                v321[0]  = (uint64_t)v189;
                char v195 = v189;
                v316  = (uint64_t)v189;
                uint64_t v196 = v195;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                *(void *)char v194 = v27;

                *(_WORD *)(v193 + 12)  = 2080;
                unint64_t v197 = WiFiAwareTerminationReason.description.getter(v318);
                v321[0]  = sub_100010680(v197, v198, (uint64_t *)v319);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                *(_WORD *)(v193 + 22)  = 2080;
                __int16 v199 = *(void **)v107;
                unint64_t v200 = *((void *)v107 + 1);
                sub_10027E13C(v199, v200);

                uint64_t v201 = sub_100276CF4((uint64_t)v199, v200);
                unint64_t v203 = v202;
                sub_10027E190(v199, v200);
                v321[0]  = sub_100010680(v201, v203, (uint64_t *)v319);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                swift_bridgeObjectRelease();
                *(_WORD *)(v193 + 32)  = 2048;
                v321[0]  = v109;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                os_log_t v204 = v312;
                _os_log_impl((void *)&_mh_execute_header, v312, (os_log_type_t)ObjectType, "%@ got early termination (%s) when %s for retry #%ld", (uint8_t *)v193, 0x2Au);
                sub_100010BCC(&qword_10047CC30);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {
              }
              uint64_t v26 = (uint64_t)v313;
              sub_1002777F8(v318, 0xD00000000000001BLL, 0x80000001003DF280);
              return sub_10027EC84(v26, type metadata accessor for DriverEvent);
            }
            if (v108 >> 62 == 1 || (__int128)__PAIR128__(v108, v109) < (__int128)__PAIR128__(0x8000000000000000, 2))
            {
              uint64_t v110 = 3;
              uint64_t v111 = 0x7165722072656570;
            }
            else
            {
              if (v108 == 0x8000000000000000 && v109 == 2)
              {
                int16x8_t v219 = v27;
                uint64_t v82 = Logger.logObject.getter();
                os_log_type_t v220 = static os_log_type_t.info.getter();
                int v221 = v220;
                if (!os_log_type_enabled(v82, v220))
                {
LABEL_126:

                  uint64_t v26 = (uint64_t)v313;
                  return sub_10027EC84(v26, type metadata accessor for DriverEvent);
                }
                v222  = swift_slowAlloc();
                v223  = swift_slowAlloc();
                ObjectType  = v223;
                v316  = swift_slowAlloc();
                *(void *)&v319[0]  = v316;
                *(_DWORD *)v222  = 138412802;
                LODWORD(v315)  = v221;
                v321[0]  = (uint64_t)v219;
                v224  = v219;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                v223->isa  = (Class)v27;

                *(_WORD *)(v222 + 12)  = 2080;
                v225  = WiFiAwareTerminationReason.description.getter(v318);
                v321[0]  = sub_100010680(v225, v226, (uint64_t *)v319);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                *(_WORD *)(v222 + 22)  = 2080;
                uint64_t v227 = *(void **)v107;
                unint64_t v228 = *((void *)v107 + 1);
                sub_10027E13C(*(void **)v107, v228);

                uint64_t v229 = sub_100276CF4((uint64_t)v227, v228);
                unint64_t v231 = v230;
                sub_10027E190(v227, v228);
                v321[0]  = sub_100010680(v229, v231, (uint64_t *)v319);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v82, (os_log_type_t)v315, "%@ got early termination (%s) when %s, ignoring", (uint8_t *)v222, 0x20u);
                sub_100010BCC(&qword_10047CC30);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_arrayDestroy();
                swift_slowDealloc();
                goto LABEL_107;
              }
              uint64_t v111 = 0x7165722072657375;
              uint64_t v110 = 2;
            }
            sub_1002777F8(v110, v111, 0xEC00000074736575);
            uint64_t v26 = (uint64_t)v313;
            return sub_10027EC84(v26, type metadata accessor for DriverEvent);
          case 0xAu:
            v313  = v14;
            char v112 = *(unsigned char *)(NANBitmap.Channel.operatingClass.getter(v326) + 15);
            BOOL v113 = (unsigned __int8 *)swift_unknownObjectWeakLoadStrong();
            if (!v113 || (int v114 = v113[qword_1004887F0], v113, v114 != 1))
            {
              uint64_t v130 = v27;
              uint64_t v131 = Logger.logObject.getter();
              os_log_type_t v132 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v131, v132))
              {
                uint64_t v133 = (uint8_t *)swift_slowAlloc();
                uint64_t v134 = (void *)swift_slowAlloc();
                *(_DWORD *)uint64_t v133 = 138412290;
                *(void *)&v319[0]  = v130;
                uint64_t v135 = v130;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                *uint64_t v134 = v317;

                _os_log_impl((void *)&_mh_execute_header, v131, v132, "%@ cannot accept host assist request because the associated publisher is no longer active", v133, 0xCu);
                sub_100010BCC(&qword_10047CC30);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {
              }
              uint64_t v26 = (uint64_t)v313;

              sub_100278D88();
              return sub_10027EC84(v26, type metadata accessor for DriverEvent);
            }
            uint64_t v115 = (void **)&v27[qword_100484188];
            unint64_t v116 = *(void *)&v27[qword_100484188 + 8];
            if (!(v116 >> 62)
              || v116 >> 62 != 1
              && (__int128)__PAIR128__(v116, *v115) < (__int128)__PAIR128__(0x8000000000000000, 2))
            {
              int16x8_t v117 = &v27[qword_100484170];
              swift_beginAccess();
              if (v117[74] == 1)
              {
                if (((v112 - 1) & 0xF8) != 0) {
                  char v118 = 2;
                }
                else {
                  char v118 = 0x101020102020200uLL >> (8 * (v112 - 1));
                }
                v117[74]  = v118;
              }
              uint64_t v119 = v27;
              uint64_t v120 = Logger.logObject.getter();
              int v121 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v120, (os_log_type_t)v121))
              {
                LODWORD(v315)  = v121;
                v318  = (uint64_t)v120;
                uint64_t v122 = swift_slowAlloc();
                uint64_t v123 = swift_slowAlloc();
                v316  = swift_slowAlloc();
                v321[0]  = v316;
                *(_DWORD *)uint64_t v122 = 138412802;
                v324  = (uint64_t)v119;
                uint64_t v124 = v119;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                ObjectType  = v123;
                v123->isa  = (Class)v317;

                *(_WORD *)(v122 + 12)  = 2080;
                LOBYTE(v324)  = v112;
                uint64_t v125 = String.init<A>(describing:)();
                v324  = sub_100010680(v125, v126, v321);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                *(_WORD *)(v122 + 22)  = 2080;
                int v127 = v117[74];

                if (v127)
                {
                  if (v127 == 1)
                  {
                    unint64_t v128 = 0xE800000000000000;
                    uint64_t v129 = 0x747065636361;
                  }
                  else
                  {
                    unint64_t v128 = 0xE800000000000000;
                    uint64_t v129 = 0x7463656A6572;
                  }
                  v295  = v129 & 0xFFFFFFFFFFFFLL | 0x6465000000000000;
                }
                else
                {
                  v295  = 0x65756E69746E6F63;
                  unint64_t v128 = 0xE900000000000064;
                }
                uint64_t v26 = (uint64_t)v313;
                v296  = v318;
                v324  = sub_100010680(v295, v128, v321);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v296, (os_log_type_t)v315, "%@ received host assist request for %s. Responding with %s", (uint8_t *)v122, 0x20u);
                sub_100010BCC(&qword_10047CC30);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {

                uint64_t v26 = (uint64_t)v313;
              }
              sub_100278388();
              unint64_t v205 = 0;
LABEL_102:
              sub_10027E5B4(0, v205);
              return sub_10027EC84(v26, type metadata accessor for DriverEvent);
            }
            int16x8_t v219 = v27;
            uint64_t v82 = Logger.logObject.getter();
            os_log_type_t v232 = static os_log_type_t.error.getter();
            int v233 = v232;
            if (!os_log_type_enabled(v82, v232)) {
              goto LABEL_126;
            }
            uint64_t v234 = swift_slowAlloc();
            int v235 = (void *)swift_slowAlloc();
            v316  = (uint64_t)v235;
            v318  = swift_slowAlloc();
            *(void *)&v319[0]  = v318;
            *(_DWORD *)uint64_t v234 = 138412546;
            v321[0]  = (uint64_t)v219;
            v236  = v219;
            LODWORD(v315)  = v233;
            v237  = v236;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *int v235 = v317;

            *(_WORD *)(v234 + 12)  = 2080;
            v317  = (char *)(v234 + 14);
            v238  = *v115;
            v239  = (unint64_t)v115[1];
            sub_10027E13C(*v115, v239);

            v240  = sub_100276CF4((uint64_t)v238, v239);
            v242  = v241;
            sub_10027E190(v238, v239);
            v321[0]  = sub_100010680(v240, v242, (uint64_t *)v319);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v82, (os_log_type_t)v315, "%@ ignoring host assist request when %s", (uint8_t *)v234, 0x16u);
            sub_100010BCC(&qword_10047CC30);
            swift_arrayDestroy();
            swift_slowDealloc();
            goto LABEL_106;
          default:
            sub_1001344F4((uint64_t)v325, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
            break;
        }
      }
LABEL_28:
      sub_10027EC1C(v24, (uint64_t)v8, type metadata accessor for DriverEvent);
      os_log_t v66 = (os_log_t)v315;
      sub_10027EC1C((uint64_t)v8, v315, type metadata accessor for DriverEvent);
      sub_10027EBB4((uint64_t)v8, v28, type metadata accessor for DriverEvent);
      os_log_type_t v67 = v27;
      uint64_t v68 = Logger.logObject.getter();
      os_log_type_t v69 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v68, v69))
      {
        uint64_t v70 = v27;
        uint64_t v71 = swift_slowAlloc();
        uint64_t v72 = (void *)swift_slowAlloc();
        v316  = swift_slowAlloc();
        v326[0]  = v316;
        *(_DWORD *)uint64_t v71 = 138412546;
        v325[0]  = v67;
        v313  = v14;
        uint64_t v73 = v67;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v72 = v70;

        *(_WORD *)(v71 + 12)  = 2080;
        os_log_t v74 = (os_log_t)v315;
        uint64_t v75 = DriverEvent.description.getter();
        v325[0]  = sub_100010680(v75, v76, v326);
        uint64_t v26 = (uint64_t)v313;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10027EC84(v318, type metadata accessor for DriverEvent);
        sub_10027EC84((uint64_t)v74, type metadata accessor for DriverEvent);
        _os_log_impl((void *)&_mh_execute_header, v68, v69, "%@ received an unexpected %s", (uint8_t *)v71, 0x16u);
        sub_100010BCC(&qword_10047CC30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        sub_10027EC84(v28, type metadata accessor for DriverEvent);
        sub_10027EC84((uint64_t)v66, type metadata accessor for DriverEvent);
      }
      return sub_10027EC84(v26, type metadata accessor for DriverEvent);
    }
    sub_10027EC1C((uint64_t)v14, (uint64_t)v10, type metadata accessor for DriverEvent);
    int v44 = *v10;
    uint64_t v27 = v317;
    uint64_t v28 = v318;
    if (v44 != 1) {
      goto LABEL_28;
    }
    unint64_t v45 = *(void *)&v317[qword_100484188 + 8];
    if (v45 >> 62 == 2 && v45 == 0x8000000000000000 && *(void *)&v317[qword_100484188] == 3)
    {
      sub_1002777F8(2, 0xD00000000000002ALL, 0x80000001003DF250);
    }
    else
    {
      os_log_t v46 = ObjectType;
      WitnessTable  = swift_getWitnessTable();
      if (sub_1003019CC((uint64_t)v46, WitnessTable)) {
        sub_10027E5B4((void *)2, 0x8000000000000000);
      }
    }
  }
  else
  {
    __break(1u);
LABEL_155:
    v297  = v18;
    v298  = *v23;
    sub_100013D44(*v23, v4);
    v315  = InterfaceIdentifier.ipv6Address.getter(v298, v4);
    v264  = v299;
    v266  = v300;
    v268  = v301;
    v302  = v298;
    os_log_t v18 = v297;
    sub_10000C95C(v302, v4);
    v262  = v318;
LABEL_156:
    swift_beginAccess();
    WiFiInterface.NeighborDiscoveryTable.postPeerPresence(macAddress:ipv6Address:)(v262, v315, v264, v266, v268, v316);
    if (v15)
    {
      swift_endAccess();
      swift_release();
      swift_bridgeObjectRelease();
      swift_errorRetain();
      swift_errorRetain();
      v253  = Logger.logObject.getter();
      v254  = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v253, v254))
      {
        v255  = swift_slowAlloc();
        v256  = (void *)swift_slowAlloc();
        v316  = swift_slowAlloc();
        *(void *)&v319[0]  = v316;
        *(_DWORD *)v255  = 136315394;
        v257  = WiFiAddress.description.getter(v318);
        v321[0]  = sub_100010680(v257, v258, (uint64_t *)v319);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v255 + 12)  = 2112;
        swift_errorRetain();
        v259  = _swift_stdlib_bridgeErrorToNSError();
        v321[0]  = v259;
        os_log_t v18 = v312;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *v256  = v259;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v253, v254, "Failed to post peer presence for %s because %@", (uint8_t *)v255, 0x16u);
        sub_100010BCC(&qword_10047CC30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();

        swift_errorRelease();
        swift_errorRelease();
      }
    }
    else
    {
      swift_endAccess();
      swift_release();
      swift_bridgeObjectRelease();
    }
    uint64_t v175 = v317;
LABEL_133:
    sub_10027BFA4();
    v269  = WiFiInterface.interfaceIndex.getter();
    swift_release();
    v270  = sub_100276C4C();
    if (v270)
    {
      v271  = (void *)v270;
      v272  = *((void *)v310 + 1);
      if (v272 >> 60 == 15)
      {
        v273  = 0;
        v274  = 0;
        v275  = 0;
        v276  = 1;
      }
      else
      {
        v277  = *(void *)v310;
        sub_100013D44(*(void *)v310, *((void *)v310 + 1));
        v273  = InterfaceIdentifier.ipv6Address.getter(v277, v272);
        v274  = v278;
        v275  = v279;
        v276  = v280;
        sub_10000C95C(v277, v272);
      }
      v281  = WiFiAddress.apiAddress(with:)(v273, v274, v275, v276, v318);
      sub_1000CBC9C(v273, v274, v275, v276);
      v282  = objc_allocWithZone((Class)WiFiAwarePublisherDataSessionHandle);
      v283  = [v282 initWithDatapathID:v305 initiatorDataAddress:v281];

      uint64_t v175 = v317;
      [v271 publishDataConfirmedForHandle:v283 localInterfaceIndex:v269 serviceSpecificInfo:v317];

      swift_unknownObjectRelease();
      os_log_t v18 = v312;
    }
LABEL_139:
    v284  = qword_100484198;
    if (*((unsigned char *)&v18->isa + qword_100484198))
    {

      uint64_t v26 = (uint64_t)v313;
    }
    else
    {
      sub_1000136F4(v22 + 136, (uint64_t)v319, (uint64_t *)&unk_100486320);
      if (v320 == 255)
      {

        sub_1000380B4((uint64_t)v319, (uint64_t *)&unk_100486320);
        uint64_t v26 = (uint64_t)v313;
      }
      else if (v320)
      {
        v317  = v175;
        sub_10006EF50(v319, (uint64_t)v321);
        v312  = v18;
        *((unsigned char *)&v18->isa + v284)  = 1;
        v285  = v322;
        v286  = v323;
        v318  = (uint64_t)sub_1000369C4(v321, v322);
        v287  = *(unsigned __int8 *)(v22 + 2);
        v288  = *(unsigned __int8 *)(v22 + 3);
        v289  = (unint64_t)*(unsigned int *)(v22 + 4) << 16;
        if (*(void *)(v22 + 128) == 1)
        {
          v290  = 0;
          v291  = 0xF000000000000000;
        }
        else
        {
          v290  = *(void *)(v22 + 88);
          v291  = *(void *)(v22 + 96);
          sub_100013D44(v290, v291);
        }
        uint64_t v26 = (uint64_t)v313;
        v292  = ObjectType;
        v293  = swift_getWitnessTable();
        v294  = sub_100301864((uint64_t)v292, v293);
        (*(void (**)(unint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t))(v286 + 8))(v287 | (v288 << 8) | v289, v290, v291, v294 & 0xFFFFFFFFFFFFFFLL, v285, v286);

        sub_10000C95C(v290, v291);
        sub_100010754((uint64_t)v321);
      }
      else
      {

        sub_1001B7D50((uint64_t)v319);
        uint64_t v26 = (uint64_t)v313;
      }
    }
  }
  return sub_10027EC84(v26, type metadata accessor for DriverEvent);
}

void *sub_10027BFA4()
{
  uint64_t v1 = v0 + qword_100484170;
  swift_beginAccess();
  sub_1000136F4(v1 + 136, (uint64_t)v8, (uint64_t *)&unk_100486320);
  unsigned __int8 v2 = v9;
  if (v9 == 255)
  {
    sub_1000380B4((uint64_t)v8, (uint64_t *)&unk_100486320);
  }
  else
  {
    sub_1001B7D50((uint64_t)v8);
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void **)(v0 + qword_100484168);
      swift_unownedRetainStrong();
      uint64_t v4 = 57;
      goto LABEL_7;
    }
  }
  int v5 = *(unsigned __int8 *)(v1 + 72);
  uint64_t v3 = *(void **)(v0 + qword_100484168);
  swift_unownedRetainStrong();
  if (v5 != 2) {
    return v3;
  }
  uint64_t v4 = 56;
LABEL_7:
  uint64_t v6 = *(void *)((char *)v3 + *(void *)(*v3 + 8 * v4));
  swift_retain();
  swift_release();
  if (!v6)
  {
    swift_unownedRetainStrong();
    return v3;
  }
  return (void *)v6;
}

uint64_t sub_10027C0C0()
{
  uint64_t v1 = v0;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  unsigned __int8 v2 = type metadata accessor for Preferences();
  isa  = v2[-1].isa;
  os_log_t v129 = v2;
  __chkstk_darwin();
  int v127 = (char *)&v122 - v3;
  uint64_t v4 = type metadata accessor for DispatchTime();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v122 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unsigned __int8 v9 = (char *)&v122 - v8;
  uint64_t v10 = type metadata accessor for DispatchTimeInterval();
  uint64_t v134 = *(void **)(v10 - 8);
  uint64_t v11 = v134;
  __chkstk_darwin();
  uint64_t v125 = (char *)&v122 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v126 = (char *)&v122 - v13;
  __chkstk_darwin();
  uint64_t v124 = (char *)&v122 - v14;
  __chkstk_darwin();
  os_log_t v131 = (os_log_t)((char *)&v122 - v15);
  __chkstk_darwin();
  uint64_t v133 = (uint64_t *)((char *)&v122 - v16);
  __chkstk_darwin();
  uint64_t v123 = (char *)&v122 - v17;
  __chkstk_darwin();
  os_log_type_t v19 = (uint64_t *)((char *)&v122 - v18);
  __chkstk_darwin();
  id v21 = (char *)&v122 - v20;
  type metadata accessor for P2PTimer();
  variable initialization expression of AWDLPeer.lastUpdated();
  uint64_t v22 = (uint64_t)v0 + qword_100484180;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v22, v4);
  uint64_t v135 = v21;
  DispatchTime.distance(to:)();
  uint64_t v23 = *(void (**)(char *, uint64_t))(v5 + 8);
  v23(v7, v4);
  v23(v9, v4);
  *os_log_type_t v19 = 10;
  uint64_t v24 = enum case for DispatchTimeInterval.seconds(_:);
  os_log_type_t v132 = v11;
  uint64_t v25 = (void (*)(void *, void, uint64_t))v11[13];
  uint64_t v136 = v10;
  v25(v19, enum case for DispatchTimeInterval.seconds(_:), v10);
  uint64_t v26 = v1;
  uint64_t v27 = *(uint64_t *)((char *)&v1->isa + qword_100484188);
  unint64_t v28 = *(unint64_t *)((char *)&v1[1].isa + qword_100484188) >> 62;
  if (v28)
  {
    if (v28 == 1)
    {
      uint64_t v130 = v19;
      uint64_t v29 = v1;
      swift_unownedRetainStrong();
      int v30 = v127;
      WiFiInterface.preferences.getter();
      swift_release();
      os_log_t v31 = v129;
      uint64_t v32 = Preferences.enableUserspaceP2POptions.getter((uint64_t)v129);
      (*((void (**)(char *, os_log_t))isa + 1))(v30, v31);
      uint64_t v33 = *(void *)PreferenceDefaults.EnableUserspaceP2POptions.keepAliveTermination.unsafeMutableAddressor() & ~v32;
      uint64_t v35 = v134;
      uint64_t v34 = v135;
      os_log_type_t v36 = (void (*)(char *, char *, uint64_t))v134[2];
      uint64_t v37 = v126;
      v36(v126, v135, v136);
      if (v33)
      {
        uint64_t v42 = (void (*)(char *, uint64_t))v35[1];
        v42(v37, v136);
      }
      else
      {
        uint64_t v38 = NANConstants.keepAliveTimeout.unsafeMutableAddressor();
        uint64_t v39 = v133;
        uint64_t v40 = v136;
        v36((char *)v133, (char *)v38, v136);
        BOOL v41 = static DispatchTimeInterval.< infix(_:_:)();
        int v44 = (void (*)(char *, uint64_t))v35[1];
        unint64_t v43 = v35 + 1;
        uint64_t v42 = v44;
        v44((char *)v39, v40);
        v44(v37, v40);
        if (v41)
        {
          unint64_t v45 = v125;
          v36(v125, v34, v136);
          os_log_t v46 = v29;
          uint64_t v47 = Logger.logObject.getter();
          os_log_type_t v48 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v47, v48))
          {
            uint64_t v49 = swift_slowAlloc();
            isa  = (objc_class *)v29;
            uint64_t v50 = v49;
            uint64_t v51 = swift_slowAlloc();
            os_log_t v131 = v51;
            uint64_t v133 = (void *)swift_slowAlloc();
            int v137 = v133;
            *(_DWORD *)uint64_t v50 = 138412546;
            uint64_t v134 = v43;
            uint64_t v139 = (uint64_t)v46;
            unint64_t v52 = v46;
            os_log_t v129 = v47;
            unint64_t v53 = v52;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            v51->isa  = isa;

            *(_WORD *)(v50 + 12)  = 2080;
            uint64_t v54 = DispatchTimeInterval.description.getter();
            uint64_t v139 = sub_100010680(v54, v55, (uint64_t *)&v137);
            uint64_t v34 = v135;
            uint64_t v56 = v136;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            v42(v45, v56);
            os_log_t v57 = v129;
            _os_log_impl((void *)&_mh_execute_header, v129, v48, "%@ will be terminated because no keep alive was received for %s", (uint8_t *)v50, 0x16u);
            sub_100010BCC(&qword_10047CC30);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            v42(v45, v136);
          }
          os_log_type_t v19 = v130;
LABEL_33:
          sub_100278D88();
LABEL_34:
          uint64_t v121 = v136;
          v42((char *)v19, v136);
          return ((uint64_t (*)(char *, uint64_t))v42)(v34, v121);
        }
      }
      uint64_t v98 = v136;
      v42((char *)v130, v136);
      return ((uint64_t (*)(char *, uint64_t))v42)(v34, v98);
    }
    uint64_t v77 = v134;
    uint64_t v34 = v135;
    switch(v27)
    {
      case 1:
        if (!static DispatchTimeInterval.< infix(_:_:)()) {
          goto LABEL_27;
        }
        unint64_t v105 = v26;
        int v79 = v124;
        ((void (*)(char *, char *, uint64_t))v77[2])(v124, v34, v136);
        uint64_t v80 = v105;
        uint64_t v81 = Logger.logObject.getter();
        os_log_type_t v106 = static os_log_type_t.error.getter();
        int v107 = v106;
        if (!os_log_type_enabled(v81, v106)) {
          goto LABEL_32;
        }
        uint64_t v84 = swift_slowAlloc();
        unint64_t v108 = swift_slowAlloc();
        os_log_t v129 = v108;
        uint64_t v133 = (void *)swift_slowAlloc();
        int v137 = v133;
        *(_DWORD *)uint64_t v84 = 138412546;
        os_log_t v131 = v81;
        LODWORD(isa)  = v107;
        uint64_t v109 = v79;
        uint64_t v110 = v19;
        uint64_t v111 = v77;
        uint64_t v139 = (uint64_t)v80;
        char v112 = v80;
        uint64_t v130 = v110;
        BOOL v113 = v112;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v108->isa  = (Class)v105;

        *(_WORD *)(v84 + 12)  = 2080;
        uint64_t v114 = DispatchTimeInterval.description.getter();
        uint64_t v139 = sub_100010680(v114, v115, (uint64_t *)&v137);
        uint64_t v34 = v135;
        uint64_t v116 = v136;
        int16x8_t v117 = v130;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v42 = (void (*)(char *, uint64_t))v111[1];
        v42(v109, v116);
        os_log_type_t v19 = v117;
        uint64_t v95 = "%@ will be terminated because waiting after responding for %s";
        goto LABEL_26;
      case 2:
        if (!static DispatchTimeInterval.< infix(_:_:)()) {
          goto LABEL_27;
        }
        int v137 = 0;
        unint64_t v138 = 0xE000000000000000;
        _StringGuts.grow(_:)(40);
        swift_bridgeObjectRelease();
        int v137 = (void *)0xD000000000000026;
        unint64_t v138 = 0x80000001003DF1F0;
        v100._countAndFlagsBits  = DispatchTimeInterval.description.getter();
        String.append(_:)(v100);
        swift_bridgeObjectRelease();
        sub_1002777F8(1, (uint64_t)v137, v138);
        swift_bridgeObjectRelease();
        uint64_t v42 = (void (*)(char *, uint64_t))v77[1];
        goto LABEL_34;
      case 3:
        uint64_t v101 = NANConstants.serviceTerminateEventTimeout.unsafeMutableAddressor();
        uint64_t v102 = (char *)v133;
        uint64_t v103 = v136;
        ((void (*)(void *, uint64_t, uint64_t))v77[2])(v133, v101, v136);
        BOOL v104 = static DispatchTimeInterval.< infix(_:_:)();
        uint64_t v42 = (void (*)(char *, uint64_t))v77[1];
        v42(v102, v103);
        if (v104)
        {
          sub_1002777F8(2, 0xD000000000000026, 0x80000001003DF1C0);
          goto LABEL_34;
        }
        uint64_t v96 = v136;
        v42((char *)v19, v136);
        os_log_type_t v97 = v34;
        return ((uint64_t (*)(char *, uint64_t))v42)(v97, v96);
      default:
        if (!static DispatchTimeInterval.< infix(_:_:)())
        {
LABEL_27:
          uint64_t v119 = (void (*)(void *, uint64_t))v77[1];
          uint64_t v120 = v136;
          v119(v19, v136);
          return ((uint64_t (*)(char *, uint64_t))v119)(v34, v120);
        }
        uint64_t v78 = v26;
        int v79 = v123;
        ((void (*)(char *, char *, uint64_t))v77[2])(v123, v34, v136);
        uint64_t v80 = v78;
        uint64_t v81 = Logger.logObject.getter();
        os_log_type_t v82 = static os_log_type_t.error.getter();
        int v83 = v82;
        if (os_log_type_enabled(v81, v82))
        {
          uint64_t v84 = swift_slowAlloc();
          uint64_t v85 = swift_slowAlloc();
          os_log_t v129 = v85;
          uint64_t v133 = (void *)swift_slowAlloc();
          int v137 = v133;
          *(_DWORD *)uint64_t v84 = 138412546;
          os_log_t v131 = v81;
          LODWORD(isa)  = v83;
          uint64_t v86 = v79;
          uint64_t v87 = v19;
          uint64_t v88 = v77;
          uint64_t v139 = (uint64_t)v80;
          unint64_t v89 = v80;
          uint64_t v130 = v87;
          uint64_t v90 = v89;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v85->isa  = (Class)v78;

          *(_WORD *)(v84 + 12)  = 2080;
          uint64_t v91 = DispatchTimeInterval.description.getter();
          uint64_t v139 = sub_100010680(v91, v92, (uint64_t *)&v137);
          uint64_t v34 = v135;
          uint64_t v93 = v136;
          uint64_t v94 = v130;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v42 = (void (*)(char *, uint64_t))v88[1];
          v42(v86, v93);
          os_log_type_t v19 = v94;
          uint64_t v95 = "%@ will be terminated because waiting after request received for %s";
LABEL_26:
          os_log_t v118 = v131;
          _os_log_impl((void *)&_mh_execute_header, v131, (os_log_type_t)isa, v95, (uint8_t *)v84, 0x16u);
          sub_100010BCC(&qword_10047CC30);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
LABEL_32:

          uint64_t v42 = (void (*)(char *, uint64_t))v77[1];
          v42(v79, v136);
        }
        break;
    }
    goto LABEL_33;
  }
  os_log_t v58 = v131;
  uint64_t v130 = v19;
  uint64_t v59 = (char *)v133;
  *uint64_t v133 = 15;
  uint64_t v60 = v24;
  uint64_t v61 = v136;
  v25(v59, v60, v136);
  unint64_t v62 = v135;
  BOOL v63 = static DispatchTimeInterval.< infix(_:_:)();
  unint64_t v64 = v134;
  uint64_t v42 = (void (*)(char *, uint64_t))v134[1];
  v42(v59, v61);
  if (v63)
  {
    os_log_t v65 = v58;
    ((void (*)(os_log_t, char *, uint64_t))v64[2])(v58, v62, v136);
    os_log_t v66 = v26;
    os_log_type_t v67 = Logger.logObject.getter();
    os_log_type_t v68 = static os_log_type_t.error.getter();
    int v69 = v68;
    if (os_log_type_enabled(v67, v68))
    {
      uint64_t v70 = swift_slowAlloc();
      uint64_t v134 = (void *)swift_slowAlloc();
      uint64_t v133 = (void *)swift_slowAlloc();
      int v137 = v133;
      *(_DWORD *)uint64_t v70 = 138412802;
      LODWORD(v129)  = v69;
      uint64_t v139 = (uint64_t)v66;
      isa  = (objc_class *)v67;
      uint64_t v71 = v66;
      uint64_t v72 = v136;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v134 = v26;

      *(_WORD *)(v70 + 12)  = 2080;
      os_log_t v73 = v131;
      uint64_t v74 = DispatchTimeInterval.description.getter();
      uint64_t v139 = sub_100010680(v74, v75, (uint64_t *)&v137);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v42((char *)v73, v72);
      *(_WORD *)(v70 + 22)  = 2048;
      uint64_t v139 = v27;
      os_log_type_t v19 = v130;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      os_log_t v76 = (os_log_t)isa;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)isa, (os_log_type_t)v129, "%@ did not get the datapath response acknowledgement for %s, retry #%ld", (uint8_t *)v70, 0x20u);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      v42((char *)v65, v136);
      os_log_type_t v19 = v130;
    }
    sub_100278694();
    uint64_t v34 = v135;
    goto LABEL_34;
  }
  uint64_t v96 = v136;
  v42((char *)v130, v136);
  os_log_type_t v97 = v62;
  return ((uint64_t (*)(void, void))v42)(v97, v96);
}

uint64_t sub_10027D0F0(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (uint64_t *)((char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v8 = (void *)*v7;
  *uint64_t v6 = *v7;
  (*(void (**)(uint64_t *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v9 = v8;
  LOBYTE(v8)  = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v4 + 8))(v6, v3);
  if (v8)
  {
    uint64_t v11 = v1 + qword_100484170;
    swift_beginAccess();
    sub_10027E6FC(a1, v11);
    return swift_endAccess();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10027D238(uint64_t a1, unint64_t a2)
{
  id v5 = v2;
  swift_bridgeObjectRetain_n();
  id v6 = v5;
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 138412546;
    id v11 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v10 = v6;

    *(_WORD *)(v9 + 12)  = 2080;
    swift_bridgeObjectRetain();
    sub_100010680(a1, a2, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%@ will terminate because of unsatisfiable policy: %s", (uint8_t *)v9, 0x16u);
    sub_100010BCC(&qword_10047CC30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  sub_100278D88();
}

uint64_t sub_10027D444(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v30 = a1;
  ObjectType  = swift_getObjectType();
  sub_100010BCC((uint64_t *)&unk_100485B60);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  id v6 = (char *)&v28 - v5;
  uint64_t v7 = type metadata accessor for NANInternetSharingStatistics.Requester();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchTime();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t result = __chkstk_darwin();
  uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(v1 + qword_100484188 + 8) >> 62 == 1)
  {
    type metadata accessor for P2PTimer();
    variable initialization expression of AWDLPeer.lastUpdated();
    uint64_t v16 = v1 + qword_100484180;
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 40))(v16, v15, v11);
    swift_endAccess();
    uint64_t v17 = v2 + qword_100484170;
    swift_beginAccess();
    sub_1000136F4(v17 + 136, (uint64_t)v31, (uint64_t *)&unk_100486320);
    unsigned __int8 v18 = v32;
    if (v32 == 255)
    {
      return sub_1000380B4((uint64_t)v31, (uint64_t *)&unk_100486320);
    }
    else
    {
      uint64_t result = sub_1001B7D50((uint64_t)v31);
      if ((v18 & 1) == 0)
      {
        uint64_t v19 = v30 + *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation(0) + 28);
        uint64_t v20 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
        sub_1000136F4(v19 + *(int *)(v20 + 48), (uint64_t)v6, (uint64_t *)&unk_100485B60);
        uint64_t v21 = v8;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
        {
          return sub_1000380B4((uint64_t)v6, (uint64_t *)&unk_100485B60);
        }
        else
        {
          sub_10027EBB4((uint64_t)v6, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
          uint64_t v22 = *(void *)(v2 + qword_100484168);
          swift_unownedRetainStrong();
          uint64_t v23 = v22 + *(void *)(*(void *)v22 + 680);
          swift_beginAccess();
          if (*(void *)(v23 + 8))
          {
            uint64_t v24 = ObjectType;
            WitnessTable  = swift_getWitnessTable();
            unint64_t v26 = sub_100301864(v24, WitnessTable);
            sub_10027EC1C((uint64_t)v10, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v4, 0, 1, v7);
            sub_100354B90((uint64_t)v4, v26 & 0xFFFFFFFFFFFFFFLL);
          }
          swift_endAccess();
          swift_release();
          swift_unownedRetainStrong();
          sub_10027EC84((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
          uint64_t v27 = v22 + *(void *)(*(void *)v22 + 680);
          swift_beginAccess();
          if (*(void *)(v27 + 8)) {
            *(unsigned char *)uint64_t v27 = 0;
          }
          return swift_release();
        }
      }
    }
  }
  return result;
}

uint64_t sub_10027D89C()
{
  uint64_t v1 = v0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = __chkstk_darwin();
  id v6 = (char *)&v18 - v5;
  unint64_t v7 = *(void *)(v0 + qword_100484188 + 8);
  if ((v7 & 0x8000000000000000) != 0
    && (unint64_t v8 = *(void *)(v0 + qword_100484188),
        (__int128)__PAIR128__(v7, v8) >= (__int128)__PAIR128__(0x8000000000000000, 2)))
  {
    if (v7 == 0x8000000000000000 && v8 == 2)
    {
      return sub_1002777F8(1, 0xD000000000000030, 0x80000001003DF130);
    }
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + qword_100484168);
    swift_unownedRetainStrong();
    sub_1003546AC();
    swift_release();
    swift_unownedRetainStrong();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v9 + *(void *)(*(void *)v9 + 96), AssociatedTypeWitness);
    swift_release();
    uint64_t v10 = (unsigned __int8 *)(v1 + qword_100484170);
    swift_beginAccess();
    uint64_t v18 = *(unsigned int *)(v10 + 10);
    uint64_t v11 = *((unsigned __int16 *)v10 + 4);
    uint64_t v12 = *v10;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 224))(v12, v11 | (v18 << 16), AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, AssociatedTypeWitness);
    uint64_t result = sub_10027E5B4((void *)2, 0x8000000000000000);
    uint64_t v15 = qword_100484198;
    if (*(unsigned char *)(v1 + qword_100484198) == 1)
    {
      sub_1000136F4((uint64_t)(v10 + 136), (uint64_t)v19, (uint64_t *)&unk_100486320);
      if (v20 == 255)
      {
        return sub_1000380B4((uint64_t)v19, (uint64_t *)&unk_100486320);
      }
      else if (v20)
      {
        sub_10006EF50(v19, (uint64_t)v21);
        uint64_t v16 = v22;
        uint64_t v17 = v23;
        sub_1000369C4(v21, v22);
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v17 + 16))(*((unsigned __int16 *)v10 + 1) | ((unint64_t)*((unsigned int *)v10 + 1) << 16), v16, v17);
        *(unsigned char *)(v1 + v15)  = 0;
        return sub_100010754((uint64_t)v21);
      }
      else
      {
        return sub_1001B7D50((uint64_t)v19);
      }
    }
  }
  return result;
}

id sub_10027DC94(void *a1)
{
  id v1 = a1;
  sub_10027DCFC();

  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();

  return v2;
}

unint64_t sub_10027DCFC()
{
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + qword_100484170;
  swift_beginAccess();
  v2._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits  = 0x203A6F543C205DLL;
  v3._object  = (void *)0xE700000000000000;
  String.append(_:)(v3);
  v4._countAndFlagsBits  = WiFiAddress.description.getter(*(unsigned __int16 *)(v1 + 8) | ((unint64_t)*(unsigned int *)(v1 + 10) << 16));
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits  = 8254;
  v5._object  = (void *)0xE200000000000000;
  String.append(_:)(v5);
  uint64_t v7 = *(void *)(v1 + 56);
  id v6 = *(void **)(v1 + 64);
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits  = NANServiceName.description.getter(v7, v6);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD000000000000016;
}

void sub_10027DE40()
{
}

NSObject *sub_10027DEA0(uint64_t a1, uint64_t a2)
{
  return sub_1002773CC(a1, a2);
}

uint64_t sub_10027DECC()
{
  return sub_100278388();
}

uint64_t sub_10027DEE8(uint64_t a1)
{
  return sub_1000380B4(a1, &qword_10047D0D0);
}

uint64_t sub_10027DF10@<X0>(uint64_t a1@<X8>)
{
  return sub_100276BD8(a1);
}

void sub_10027DF34()
{
  type metadata accessor for Logger();
  if (v0 <= 0x3F)
  {
    type metadata accessor for DispatchTime();
    if (v1 <= 0x3F)
    {
      sub_10027E0A4();
      if (v2 <= 0x3F) {
        swift_initClassMetadata2();
      }
    }
  }
}

uint64_t _s17ResponderInstanceCMa()
{
  return sub_100038354();
}

void sub_10027E0A4()
{
  if (!qword_10047DA60)
  {
    type metadata accessor for DispatchTime();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10047DA60);
    }
  }
}

void *sub_10027E0FC(void *a1, uint64_t a2)
{
  Swift::String v3 = *(void **)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  sub_10027E13C(*(void **)a2, v4);
  *a1  = v3;
  a1[1]  = v4;
  return a1;
}

void *sub_10027E13C(void *result, unint64_t a2)
{
  if (a2 >> 62 == 1)
  {
    id v3 = result;
    return (void *)swift_retain();
  }
  return result;
}

void sub_10027E184(uint64_t a1)
{
}

void sub_10027E190(void *a1, unint64_t a2)
{
  if (a2 >> 62 == 1)
  {
    swift_release();
  }
}

uint64_t sub_10027E1DC(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  sub_10027E13C(*(void **)a2, v4);
  Swift::String v5 = *(void **)a1;
  unint64_t v6 = *(void *)(a1 + 8);
  *(void *)a1  = v3;
  *(void *)(a1 + 8)  = v4;
  sub_10027E190(v5, v6);
  return a1;
}

uint64_t sub_10027E224(uint64_t a1, _OWORD *a2)
{
  id v3 = *(void **)a1;
  unint64_t v4 = *(void *)(a1 + 8);
  *(_OWORD *)a1  = *a2;
  sub_10027E190(v3, v4);
  return a1;
}

uint64_t sub_10027E260(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7E && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 126);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 57) >> 5) | (4
                                                          * ((*(void *)(a1 + 8) >> 57) & 0x18 | *(void *)(a1 + 8) & 7))) ^ 0x7F;
  if (v3 >= 0x7D) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t sub_10027E2BC(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(void *)uint64_t result = a2 - 126;
    *(void *)(result + 8)  = 0;
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 16)  = 1;
    }
  }
  else
  {
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 16)  = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)uint64_t result = 0;
      *(void *)(result + 8)  = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_10027E30C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8) >> 62;
  if (v1 <= 1) {
    return v1;
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_10027E328(uint64_t result)
{
  *(void *)(result + 8) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

void *sub_10027E338(void *result, uint64_t a2)
{
  if (a2 < 2)
  {
    result[1]  = result[1] & 0xFFFFFFFFFFFFFF8 | (a2 << 62);
  }
  else
  {
    *uint64_t result = (a2 - 2);
    result[1]  = 0x8000000000000000;
  }
  return result;
}

uint64_t _s17ResponderInstanceC5StateOMa()
{
  return sub_100038354();
}

uint64_t sub_10027E378@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_1001DB6C0(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2  = v3;
  return result;
}

uint64_t sub_10027E3B8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10027E400()
{
  return sub_10027E3B8(&qword_100484328, type metadata accessor for WiFiP2PSPITransactionType);
}

uint64_t sub_10027E44C(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 88);
}

uint64_t sub_10027E454(uint64_t a1)
{
  *(void *)(a1 + 16)  = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 24)  = result;
  return result;
}

uint64_t sub_10027E4B4(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8)  = result;
  return result;
}

unint64_t sub_10027E4F4()
{
  unint64_t result = qword_100484380;
  if (!qword_100484380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100484380);
  }
  return result;
}

uint64_t sub_10027E548(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8)  = result;
  return result;
}

uint64_t sub_10027E584@<X0>(uint64_t (*a1)(void)@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = a1();
  *a2  = result;
  return result;
}

uint64_t sub_10027E5B4(void *a1, unint64_t a2)
{
  uint64_t v3 = (void *)(v2 + qword_100484188);
  unint64_t v4 = *(void **)(v2 + qword_100484188);
  unint64_t v5 = *(void *)(v2 + qword_100484188 + 8);
  *uint64_t v3 = a1;
  v3[1]  = a2;
  sub_10027E13C(a1, a2);
  sub_10027E190(v4, v5);

  return sub_100276F90();
}

unint64_t sub_10027E60C()
{
  unint64_t result = qword_100484400;
  if (!qword_100484400)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100484400);
  }
  return result;
}

uint64_t sub_10027E64C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10027E6A8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10027E6FC(uint64_t a1, uint64_t a2)
{
  return a2;
}

NSObject *sub_10027E758(uint64_t a1, uint64_t a2)
{
  ObjectType  = (objc_class *)swift_getObjectType();
  unint64_t v6 = v2;
  Logger.init(subsystem:category:)();
  *(_OWORD *)&v6[qword_100484178]  = xmmword_1003B4AC0;
  uint64_t v7 = &v6[qword_100488790];
  *uint64_t v7 = 0;
  v7[1]  = 0;
  swift_unknownObjectWeakInit();
  type metadata accessor for P2PTimer();
  variable initialization expression of AWDLPeer.lastUpdated();
  *(_OWORD *)&v6[qword_100484188]  = xmmword_1003D4920;
  v6[qword_100484190]  = 0;
  v6[qword_100484198]  = 0;
  *(void *)&v6[qword_1004887A0]  = 1;
  Swift::String v8 = &v6[qword_1004887A8];
  uint64_t v9 = type metadata accessor for DispatchTime();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *(void *)&v6[qword_100484168]  = a1;
  sub_10027E64C(a2, (uint64_t)&v6[qword_100484170]);
  swift_unownedRetain();

  v23.receiver  = v6;
  v23.super_class  = ObjectType;
  uint64_t v10 = [super init];
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 138412290;
    uint64_t v15 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v14 = v10;

    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Created %@", v13, 0xCu);
    sub_100010BCC(&qword_10047CC30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v11 = v10;
  }

  uint64_t v16 = v10;
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    unsigned __int8 v20 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 138412290;
    uint64_t v21 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unsigned __int8 v20 = v16;

    _os_log_impl((void *)&_mh_execute_header, v17, v18, "%@ was started", v19, 0xCu);
    sub_100010BCC(&qword_10047CC30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v17 = v16;
  }

  sub_10027E6A8(a2);
  return v16;
}

NSObject *sub_10027EB70(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return sub_10027E758(a1, a2);
}

uint64_t sub_10027EBB4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10027EC1C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10027EC84(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10027ECE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010BCC(&qword_10047DB90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_10027ED4C()
{
}

void type metadata accessor for WiFiP2PXPCResponderType(uint64_t a1)
{
}

void type metadata accessor for AWDLTrafficRegistrationOptions(uint64_t a1)
{
}

uint64_t sub_10027EDA4()
{
  return sub_10027E3B8(&qword_1004844A0, type metadata accessor for AWDLTrafficRegistrationOptions);
}

uint64_t sub_10027EDEC()
{
  return sub_10027E3B8(&qword_1004844A8, type metadata accessor for AWDLTrafficRegistrationOptions);
}

uint64_t sub_10027EE34()
{
  return sub_10027E3B8(&qword_1004844B0, type metadata accessor for AWDLTrafficRegistrationOptions);
}

uint64_t sub_10027EE7C()
{
  return sub_10027E3B8(&qword_1004844B8, type metadata accessor for AWDLTrafficRegistrationOptions);
}

uint64_t sub_10027EEC8(char a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  unint64_t v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16)  = v1;
  *(unsigned char *)(v12 + 24)  = a1;
  aBlock[4]  = sub_10027FCE8;
  aBlock[5]  = v12;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256;
  aBlock[2]  = sub_10000E5D0;
  aBlock[3]  = &unk_100467830;
  uint64_t v13 = _Block_copy(aBlock);
  id v14 = v11;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v16[1]  = _swiftEmptyArrayStorage;
  sub_100014390();
  sub_100010BCC((uint64_t *)&unk_10047D0F0);
  sub_1000143E0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release();
}

uint64_t sub_10027F144(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  unint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0]  = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v17[0] - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AWDLStatistics.LowLatencyStatistics(0);
  uint64_t v10 = swift_allocBox();
  sub_10027FBA8(a1, v11);
  uint64_t v12 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16)  = v10;
  *(void *)(v13 + 24)  = v1;
  aBlock[4]  = sub_10027FC4C;
  aBlock[5]  = v13;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256;
  aBlock[2]  = sub_10000E5D0;
  aBlock[3]  = &unk_1004677E0;
  id v14 = _Block_copy(aBlock);
  id v15 = v12;
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v17[1]  = _swiftEmptyArrayStorage;
  sub_100014390();
  sub_100010BCC((uint64_t *)&unk_10047D0F0);
  sub_1000143E0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, void))(v7 + 8))(v9, v17[0]);
  swift_release();
  return swift_release();
}

void sub_10027F3E8(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AWDLStatistics.LowLatencyStatistics(0);
  __chkstk_darwin();
  uint64_t v4 = &v10[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = swift_projectBox();
  LOBYTE(a2)  = *(unsigned char *)(a2 + 16);
  swift_beginAccess();
  *(unsigned char *)(v5 + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0) + 132))  = a2;
  NSString v6 = String._bridgeToObjectiveC()();
  IsEventUsed  = AnalyticsIsEventUsed();

  if (IsEventUsed)
  {
    NSString v8 = String._bridgeToObjectiveC()();
    swift_beginAccess();
    sub_10027FBA8(v5, (uint64_t)v4);
    AWDLStatistics.LowLatencyStatistics.eventPayload.getter();
    sub_10027FC54((uint64_t)v4);
    sub_10003715C();
    isa  = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    AnalyticsSendEvent();
  }
}

uint64_t sub_10027F554()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CoreAnalyticsCommunicator()
{
  return self;
}

uint64_t sub_10027F588(char a1)
{
  return sub_10027EEC8(a1);
}

void sub_10027F5AC()
{
  NSString v0 = String._bridgeToObjectiveC()();
  IsEventUsed  = AnalyticsIsEventUsed();

  if (IsEventUsed)
  {
    NSString v2 = String._bridgeToObjectiveC()();
    NANCoreAnalyticsMetrics.eventPayload.getter();
    sub_10003715C();
    isa  = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    AnalyticsSendEvent();
  }
}

void sub_10027F694()
{
  NSString v0 = String._bridgeToObjectiveC()();
  IsEventUsed  = AnalyticsIsEventUsed();

  if (IsEventUsed)
  {
    NSString v2 = String._bridgeToObjectiveC()();
    AWDLStatistics.ServiceRejection.eventPayload.getter();
    sub_10003715C();
    isa  = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    AnalyticsSendEvent();
  }
}

void sub_10027F794(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  NSString v8 = String._bridgeToObjectiveC()();
  IsEventUsed  = AnalyticsIsEventUsed();

  if (IsEventUsed)
  {
    NSString v10 = String._bridgeToObjectiveC()();
    AWDLStatistics.TrafficRegistrationStart.eventPayload.getter(a1, a2 & 0xFFFFFFFFFFFFLL, a3 & 0x101FFFFFFFFFFFFLL, a4);
    sub_10003715C();
    isa  = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    AnalyticsSendEvent();
  }
}

void sub_10027F8B4()
{
  NSString v0 = String._bridgeToObjectiveC()();
  IsEventUsed  = AnalyticsIsEventUsed();

  if (IsEventUsed)
  {
    NSString v2 = String._bridgeToObjectiveC()();
    AWDLStatistics.TrafficRegistrationStop.eventPayload.getter();
    sub_10003715C();
    isa  = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    AnalyticsSendEvent();
  }
}

void sub_10027F99C(uint64_t a1, char a2)
{
  NSString v4 = String._bridgeToObjectiveC()();
  IsEventUsed  = AnalyticsIsEventUsed();

  if (IsEventUsed)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    AWDLStatistics.Failure.eventPayload.getter(a1, a2);
    sub_10003715C();
    isa  = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    AnalyticsSendEvent();
  }
}

uint64_t sub_10027FA9C(uint64_t a1)
{
  return sub_10027F144(a1);
}

void sub_10027FAC0()
{
  NSString v0 = String._bridgeToObjectiveC()();
  IsEventUsed  = AnalyticsIsEventUsed();

  if (IsEventUsed)
  {
    NSString v2 = String._bridgeToObjectiveC()();
    AWDLStatistics.AirPlayStatistics.eventPayload.getter();
    sub_10003715C();
    isa  = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    AnalyticsSendEvent();
  }
}

uint64_t sub_10027FBA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AWDLStatistics.LowLatencyStatistics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10027FC0C()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10027FC4C()
{
  sub_10027F3E8(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10027FC54(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AWDLStatistics.LowLatencyStatistics(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10027FCB0()
{
  swift_release();

  return _swift_deallocObject(v0, 25, 7);
}

void sub_10027FCE8()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 16)  = *(unsigned char *)(v0 + 24);
}

uint64_t sub_10027FD00()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void sub_10027FDD0(uint64_t a1, void (*a2)(id *), uint64_t a3, char a4)
{
  if ((a4 & 1) == 0)
  {
    swift_getErrorValue();
    id v11 = (id)Error.apiError.getter(v10);
    a2(&v11);
    return;
  }
  uint64_t v14 = a1;
  swift_errorRetain();
  sub_100010BCC((uint64_t *)&unk_1004843F0);
  if (swift_dynamicCast())
  {
    if (v13 == 1)
    {
      id v6 = [self convertError:v11];
      goto LABEL_11;
    }
    sub_100012AA4((uint64_t)v11, v12, v13);
  }
  uint64_t v14 = a1;
  swift_errorRetain();
  if (swift_dynamicCast())
  {
    if (!v13)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v8 = objc_allocWithZone((Class)NSError);
      NSString v9 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v7 = [v8 initWithDomain:v9 code:(int)v11 userInfo:0];

      id v11 = v7;
      goto LABEL_12;
    }
    sub_100012AA4((uint64_t)v11, v12, v13);
  }
  id v6 = (id)_convertErrorToNSError(_:)();
LABEL_11:
  id v7 = v6;
  id v11 = v6;
LABEL_12:
  a2(&v11);
}

BOOL sub_10027FFA0(char *a1, char *a2)
{
  return static AWDLPeer.Reachability.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int sub_10027FFBC()
{
  return AWDLPeer.Reachability.hashValue.getter(*v0);
}

void sub_10027FFD0(uint64_t a1)
{
  AWDLPeer.Reachability.hash(into:)(a1, *v1);
}

Swift::Int sub_10027FFE4()
{
  Hasher.init(_seed:)();
  AWDLPeer.Reachability.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t sub_100280054(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)(a5 + 56);
    uint64_t v8 = *(unsigned __int8 *)(*(void *)(a5 + 48) + a2);
    uint64_t v9 = type metadata accessor for NANPeer.Service(0);
    sub_10029782C(v7 + *(void *)(*(void *)(v9 - 8) + 72) * a2, v6, type metadata accessor for NANPeer.Service);
    return v8;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_10028010C(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  if (a3 < 0 || 1 << *(unsigned char *)(a6 + 32) <= a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a6 + 8 * ((unint64_t)a3 >> 6) + 64) >> a3) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a6 + 36) == a4)
  {
    uint64_t v8 = *(void *)(a6 + 56);
    uint64_t v9 = *(void *)(a6 + 48) - a3 + 8 * a3;
    __int16 v10 = *(_WORD *)(v9 + 4);
    char v11 = *(unsigned char *)(v9 + 6);
    *(_DWORD *)uint64_t result = *(_DWORD *)v9;
    *(_WORD *)(result + 4)  = v10;
    *(unsigned char *)(result + 6)  = v11;
    uint64_t v12 = type metadata accessor for NANPeer.Service.AuthenticationStatus(0);
    return sub_10029782C(v8 + *(void *)(*(void *)(v12 - 8) + 72) * a3, a2, type metadata accessor for NANPeer.Service.AuthenticationStatus);
  }
LABEL_8:
  __break(1u);
  return result;
}

id sub_1002801DC(id result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (*(_DWORD *)(a5 + 36) != a3)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  id v7 = result;
  uint64_t v8 = *(void *)(a5 + 48);
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(id, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8 + *(void *)(*(void *)(v9 - 8) + 72) * a2, v9);
  __int16 v10 = *(void **)(*(void *)(a5 + 56) + 8 * a2);

  return v10;
}

uint64_t sub_1002802AC(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v53 = a2;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v54 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __int16 v10 = *(char **)(v4 + 8);
  char v11 = *(char **)v4;
  unint64_t v12 = *(void *)(v4 + 24);
  os_log_t v55 = *(os_log_t *)(v4 + 16);
  os_log_t v57 = *(void **)(v4 + 32);
  LODWORD(v56)  = *(unsigned __int8 *)(v4 + 40);
  id v13 = a1;
  uint64_t v14 = v13;
  switch(v12 >> 62)
  {
    case 1uLL:
      uint64_t v60 = v11;
      *(void *)(v4 + 8)  = 0;
      *(void *)(v4 + 16)  = 0;
      *(void *)uint64_t v4 = 0;
      *(_OWORD *)(v4 + 24)  = xmmword_1003D4F20;
      *(unsigned char *)(v4 + 40)  = 0;
      id v25 = v13;
      uint64_t v26 = sub_100367414((uint64_t)v25);
      if ((v27 & 1) == 0)
      {
        uint64_t v28 = v26;
        Logger.init(subsystem:category:)();
        id v29 = v25;
        unint64_t v30 = a3;
        swift_bridgeObjectRetain_n();
        id v31 = v29;
        unsigned __int8 v32 = Logger.logObject.getter();
        os_log_type_t v33 = static os_log_type_t.error.getter();
        int v34 = v33;
        if (os_log_type_enabled(v32, v33))
        {
          uint64_t v35 = swift_slowAlloc();
          os_log_t v55 = v32;
          os_log_type_t v36 = v31;
          uint64_t v37 = v35;
          uint64_t v38 = swift_slowAlloc();
          uint64_t v52 = v28;
          os_log_t v57 = (void *)v38;
          uint64_t v56 = (char *)swift_slowAlloc();
          uint64_t v59 = v56;
          *(_DWORD *)uint64_t v37 = 138412802;
          v50[1]  = v37 + 12;
          v50[2]  = v37 + 4;
          uint64_t v58 = (uint64_t)v36;
          id v39 = v36;
          int v51 = v34;
          id v40 = v39;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *os_log_t v57 = v36;

          *(_WORD *)(v37 + 12)  = 2080;
          swift_bridgeObjectRetain();
          uint64_t v58 = sub_100010680(v53, v30, (uint64_t *)&v59);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v37 + 22)  = 2048;
          uint64_t v58 = v52;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          os_log_t v41 = v55;
          _os_log_impl((void *)&_mh_execute_header, v55, (os_log_type_t)v51, "%@ invalidated with %s active count: %ld", (uint8_t *)v37, 0x20u);
          sub_100010BCC(&qword_10047CC30);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        (*(void (**)(char *, uint64_t))(v54 + 8))(v9, v7);
      }
      os_log_type_t v48 = v60;
      uint64_t v49 = *((void *)v60 + 2);

      if (v49)
      {
        uint64_t result = 0;
        *(void *)uint64_t v4 = v48;
        *(void *)(v4 + 8)  = 0;
        *(void *)(v4 + 16)  = 0;
        *(_OWORD *)(v4 + 24)  = xmmword_1003D4F30;
        *(unsigned char *)(v4 + 40)  = 0;
      }
      else
      {
        swift_bridgeObjectRelease();
        *(void *)uint64_t v4 = _swiftEmptyArrayStorage;
        *(void *)(v4 + 8)  = _swiftEmptyArrayStorage;
        *(_OWORD *)(v4 + 16)  = xmmword_1003D4F40;
        *(void *)(v4 + 32)  = 0;
        *(unsigned char *)(v4 + 40)  = -1;
        return 2;
      }
      return result;
    case 2uLL:
      uint64_t v59 = v10;
      uint64_t v60 = v11;
      id v42 = v13;
      uint64_t v43 = sub_10029664C(&v60, v42);
      int64_t v44 = *((void *)v60 + 2);
      if (v44 < v43) {
        goto LABEL_21;
      }
      sub_1002D7D38(v43, v44);
      id v45 = v42;
      uint64_t v46 = sub_10029664C(&v59, v45);
      int64_t v47 = *((void *)v59 + 2);
      if (v47 < v46) {
        goto LABEL_22;
      }
      sub_1002D7D38(v46, v47);

      uint64_t result = 0;
      objc_super v23 = v59;
      uint64_t v22 = v60;
      unint64_t v24 = v12 | 0x8000000000000000;
      goto LABEL_11;
    case 3uLL:

      return 0;
    default:
      uint64_t v59 = v10;
      uint64_t v60 = v11;
      id v15 = v13;
      uint64_t v16 = sub_10029664C(&v60, v15);
      int64_t v17 = *((void *)v60 + 2);
      if (v17 < v16)
      {
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
        JUMPOUT(0x10028082CLL);
      }
      sub_1002D7D38(v16, v17);
      id v18 = v15;
      uint64_t v19 = sub_10029664C(&v59, v18);
      int64_t v20 = *((void *)v59 + 2);
      if (v20 < v19) {
        goto LABEL_20;
      }
      sub_1002D7D38(v19, v20);

      uint64_t result = 0;
      objc_super v23 = v59;
      uint64_t v22 = v60;
      unint64_t v24 = v12;
LABEL_11:
      *(void *)uint64_t v4 = v22;
      *(void *)(v4 + 8)  = v23;
      *(void *)(v4 + 16)  = v55;
      *(void *)(v4 + 24)  = v24;
      *(void *)(v4 + 32)  = v57;
      *(unsigned char *)(v4 + 40)  = (_BYTE)v56;
      return result;
  }
}

uint64_t sub_10028083C()
{
  uint64_t v2 = *(void *)v0;
  unint64_t v1 = *(void **)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  unint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = *(void *)(v0 + 32);
  char v6 = *(unsigned char *)(v0 + 40);
  uint64_t result = 0;
  switch(v4 >> 62)
  {
    case 1uLL:
      sub_100010164(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
      uint64_t v3 = 0;
      uint64_t v5 = 0;
      uint64_t result = 2;
      char v6 = -1;
      unint64_t v23 = 0x80000000000000FFLL;
      unint64_t v1 = _swiftEmptyArrayStorage;
      goto LABEL_15;
    case 2uLL:
      *(void *)uint64_t v0 = 0;
      *(void *)(v0 + 8)  = 0;
      *(void *)(v0 + 16)  = 0;
      *(_OWORD *)(v0 + 24)  = xmmword_1003D4F20;
      *(unsigned char *)(v0 + 40)  = 0;
      uint64_t v24 = *(void *)(v2 + 16);
      if (v24)
      {
        char v40 = v4;
        id v42 = v1;
        uint64_t v44 = v5;
        uint64_t v46 = v3;
        sub_10000F000();
        swift_bridgeObjectRetain_n();
        id v25 = (char *)(v2 + 56);
        do
        {
          char v27 = (void *)*((void *)v25 - 3);
          uint64_t v26 = (void (*)(id *))*((void *)v25 - 2);
          uint64_t v28 = *((void *)v25 - 1);
          char v29 = *v25;
          v25 += 32;
          uint64_t v30 = swift_allocError();
          *(_OWORD *)uint64_t v31 = xmmword_1003D4F50;
          *(unsigned char *)(v31 + 16)  = 1;
          id v32 = v27;
          sub_1000131C8();
          sub_10027FDD0(v30, v26, v28, v29);
          swift_errorRelease();

          sub_1000131D0();
          --v24;
        }
        while (v24);
        swift_bridgeObjectRelease();
        uint64_t v33 = *(void *)v0;
        uint64_t v34 = *(void *)(v0 + 8);
        uint64_t v35 = *(void *)(v0 + 16);
        unint64_t v36 = *(void *)(v0 + 24);
        uint64_t v37 = *(void *)(v0 + 32);
        unsigned __int8 v38 = *(unsigned char *)(v0 + 40);
        uint64_t v5 = v44;
        uint64_t v3 = v46;
        LOBYTE(v4)  = v40;
        unint64_t v1 = v42;
      }
      else
      {
        swift_bridgeObjectRetain();
        unsigned __int8 v38 = 0;
        uint64_t v37 = 0;
        uint64_t v35 = 0;
        uint64_t v34 = 0;
        uint64_t v33 = 0;
        unint64_t v36 = 0xC000000000000000;
      }
      sub_100010164(v33, v34, v35, v36, v37, v38);
      swift_bridgeObjectRelease_n();
      uint64_t result = 0;
      unint64_t v23 = v4 | 0x8000000000000000;
      goto LABEL_15;
    case 3uLL:
      return result;
    default:
      *(void *)uint64_t v0 = 0;
      *(void *)(v0 + 8)  = 0;
      *(void *)(v0 + 16)  = 0;
      *(_OWORD *)(v0 + 24)  = xmmword_1003D4F20;
      *(unsigned char *)(v0 + 40)  = 0;
      uint64_t v8 = *(void *)(v2 + 16);
      if (v8)
      {
        char v39 = v4;
        os_log_t v41 = v1;
        char v43 = v6;
        uint64_t v45 = v3;
        sub_10000F000();
        swift_bridgeObjectRetain_n();
        uint64_t v9 = (char *)(v2 + 56);
        do
        {
          __int16 v10 = (void *)*((void *)v9 - 3);
          char v11 = (void (*)(id *))*((void *)v9 - 2);
          uint64_t v12 = *((void *)v9 - 1);
          char v13 = *v9;
          v9 += 32;
          uint64_t v14 = swift_allocError();
          *(_OWORD *)uint64_t v15 = xmmword_1003D4F50;
          *(unsigned char *)(v15 + 16)  = 1;
          id v16 = v10;
          sub_1000131C8();
          sub_10027FDD0(v14, v11, v12, v13);
          swift_errorRelease();

          sub_1000131D0();
          --v8;
        }
        while (v8);
        swift_bridgeObjectRelease();
        uint64_t v17 = *(void *)v0;
        uint64_t v18 = *(void *)(v0 + 8);
        uint64_t v19 = *(void *)(v0 + 16);
        unint64_t v20 = *(void *)(v0 + 24);
        uint64_t v21 = *(void *)(v0 + 32);
        unsigned __int8 v22 = *(unsigned char *)(v0 + 40);
        uint64_t v3 = v45;
        char v6 = v43;
        LOBYTE(v4)  = v39;
        unint64_t v1 = v41;
      }
      else
      {
        swift_bridgeObjectRetain();
        unsigned __int8 v22 = 0;
        uint64_t v21 = 0;
        uint64_t v19 = 0;
        uint64_t v18 = 0;
        uint64_t v17 = 0;
        unint64_t v20 = 0xC000000000000000;
      }
      sub_100010164(v17, v18, v19, v20, v21, v22);
      swift_bridgeObjectRelease_n();
      uint64_t result = 0;
      unint64_t v23 = v4;
LABEL_15:
      *(void *)uint64_t v0 = _swiftEmptyArrayStorage;
      *(void *)(v0 + 8)  = v1;
      *(void *)(v0 + 16)  = v3;
      *(void *)(v0 + 24)  = v23;
      *(void *)(v0 + 32)  = v5;
      *(unsigned char *)(v0 + 40)  = v6;
      return result;
  }
}

unint64_t sub_100280BA4(uint64_t a1)
{
  uint64_t v2 = sub_100010BCC((uint64_t *)&unk_100484AD0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100010BCC((uint64_t *)&unk_100484AC0);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1]  = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1000136F4(v12, (uint64_t)v5, (uint64_t *)&unk_100484AD0);
    long long v23 = *(_OWORD *)&v5[v9];
    unint64_t result = sub_1000316CC((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for UUID();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    *(_OWORD *)(v7[7] + 16 * v16)  = v23;
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2]  = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100280DA0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100010BCC((uint64_t *)&unk_1004882D0);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = (id)*(v4 - 1);
    unint64_t result = sub_100011CE0((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9)  = v6;
    *(void *)(v2[7] + v9)  = v5;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v4 += 2;
    v2[2]  = v12;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100280EA0@<X0>(unsigned __int8 *a1@<X0>, uint64_t *a2@<X1>, unsigned char *a3@<X8>, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  int v5 = *a1;
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  uint64_t v8 = a2[2];
  uint64_t v9 = *((unsigned __int8 *)a2 + 24);
  uint64_t v10 = _s16P2PActivityStateOMa();
  uint64_t result = a4(v6, v7, v8, v9, v10);
  if (v5)
  {
    if (v5 == 1)
    {
      if (result < 2u)
      {
        uint64_t result = 1;
        goto LABEL_8;
      }
    }
    else if (result != 1)
    {
      uint64_t result = 2;
      goto LABEL_8;
    }
    uint64_t result = 0;
  }
LABEL_8:
  *a3  = result;
  return result;
}

uint64_t sub_100280F74()
{
  unint64_t v1 = (void *)*v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  int v5 = (void *)((char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v7 = (void *)*v6;
  *int v5 = *v6;
  (*(void (**)(uint64_t *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = v7;
  LOBYTE(v7)  = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
  if (v7)
  {
    swift_beginAccess();
    __chkstk_darwin();
    uint64_t v10 = v1[10];
    uint64_t v11 = v1[11];
    v16[-6]  = v10;
    v16[-5]  = v11;
    uint64_t v12 = v1[12];
    uint64_t v13 = v1[13];
    v16[-4]  = v12;
    v16[-3]  = v13;
    uint64_t v14 = v1[14];
    v16[-2]  = v14;
    sub_10006F314(0, (unint64_t *)&unk_100484A40);
    swift_bridgeObjectRetain();
    v16[1]  = v10;
    void v16[2] = v11;
    v16[3]  = v12;
    void v16[4] = v13;
    void v16[5] = v14;
    _s16P2PActivityStateOMa();
    sub_100010BCC(&qword_100484B58);
    sub_100296BC4();
    uint64_t v15 = Dictionary.compactMapValues<A>(_:)();
    swift_bridgeObjectRelease();
    return v15;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1002811B8()
{
  Strong  = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    unint64_t v1 = (void *)Strong;
    NSString v2 = String._bridgeToObjectiveC()();
    [v1 configureNotificationsWithBundleIdentifier:v2];
    swift_unknownObjectRelease();
  }
}

uint64_t sub_100281254()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t (*sub_100281264(char a1, uint64_t a2, uint64_t a3))(uint64_t *a1)
{
  if ((a1 & 4) != 0)
  {
    uint64_t v9 = *v3;
    uint64_t v10 = swift_allocObject();
    swift_weakInit();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16)  = *(void *)(v9 + 80);
    *(void *)(v11 + 24)  = *(void *)(v9 + 88);
    *(_OWORD *)(v11 + 32)  = *(_OWORD *)(v9 + 96);
    *(void *)(v11 + 48)  = *(void *)(v9 + 112);
    *(void *)(v11 + 56)  = v10;
    *(void *)(v11 + 64)  = a2;
    uint64_t v7 = (void *)(v11 + 72);
    id v8 = sub_100297B14;
  }
  else
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16)  = a2;
    uint64_t v7 = (void *)(v6 + 24);
    id v8 = sub_100298D5C;
  }
  uint64_t v12 = v8;
  *uint64_t v7 = a3;
  swift_retain();
  return v12;
}

uint64_t sub_100281388(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v55 = a5;
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin();
  uint64_t v18 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *a1;
  if (v19)
  {
    uint64_t v54 = a6;
    aBlock[0]  = v19;
    swift_errorRetain();
    sub_100010BCC((uint64_t *)&unk_1004843F0);
    sub_10006F314(0, (unint64_t *)&unk_100484B90);
    if (swift_dynamicCast())
    {
      uint64_t v51 = a7;
      uint64_t v52 = a8;
      id v20 = v57;
      id v21 = [v57 localizedFailureReason];
      if (v21)
      {
        unsigned __int8 v22 = v21;
        uint64_t v53 = a2;
        id v23 = [v20 localizedRecoverySuggestion];
        if (v23)
        {
          uint64_t v24 = v23;
          uint64_t v25 = v53 + 16;
          swift_beginAccess();
          uint64_t v50 = v25;
          if (swift_weakLoadStrong()
            && (v49 = v16, uint64_t v26 = (void *)swift_unknownObjectWeakLoadStrong(), swift_release(), (v48 = v26) != 0))
          {
            id v47 = v20;
            NSString v27 = [v20 localizedDescription];
            if (!v27)
            {
              static String._unconditionallyBridgeFromObjectiveC(_:)();
              NSString v27 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
            }
            id v28 = [objc_allocWithZone((Class)UNMutableNotificationContent) init];
            [v28 setTitle:v27];

            [v28 setSubtitle:v22];
            [v28 setBody:v24];

            id v29 = [self defaultSound];
            [v28 setSound:v29];

            [v28 setShouldIgnoreDoNotDisturb:1];
            [v28 setShouldIgnoreDowntime:1];
            [v28 setShouldHideDate:1];
            [v28 setShouldHideTime:1];
            NSString v30 = String._bridgeToObjectiveC()();
            id v31 = [self iconNamed:v30];

            [v28 setIcon:v31];
            UUID.init()();
            uint64_t v32 = UUID.uuidString.getter();
            uint64_t v34 = v33;
            (*(void (**)(char *, uint64_t))(v49 + 8))(v18, v15);
            swift_bridgeObjectRetain();
            id v35 = v28;
            NSString v36 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            id v37 = [self requestWithIdentifier:v36 content:v35 trigger:0];

            swift_beginAccess();
            Strong  = swift_weakLoadStrong();
            if (Strong && (int v39 = *(unsigned __int8 *)(Strong + qword_1004887D8), swift_release(), v39 == 1))
            {
              char v40 = (void *)swift_allocObject();
              uint64_t v42 = v53;
              uint64_t v41 = v54;
              v40[2]  = v55;
              v40[3]  = v41;
              uint64_t v43 = v52;
              v40[4]  = v51;
              v40[5]  = v43;
              v40[6]  = a9;
              v40[7]  = v42;
              v40[8]  = v32;
              v40[9]  = v34;
              aBlock[4]  = sub_100297BB0;
              aBlock[5]  = v40;
              aBlock[0]  = _NSConcreteStackBlock;
              aBlock[1]  = 1107296256;
              aBlock[2]  = sub_1003712BC;
              aBlock[3]  = &unk_1004683C8;
              uint64_t v44 = _Block_copy(aBlock);
              swift_retain();
              swift_release();
              [v48 addNotificationRequest:v37 completionHandler:v44];
              swift_unknownObjectRelease();

              _Block_release(v44);
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_beginAccess();
              uint64_t v45 = swift_weakLoadStrong();
              swift_unknownObjectRelease();

              if (v45)
              {
                *(unsigned char *)(v45 + qword_1004887D8)  = 1;
                swift_release();
              }
            }
          }
          else
          {
          }
        }
        else
        {
        }
      }
      else
      {
      }
    }
  }
  return a3(v19);
}

uint64_t sub_100281930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v53 = a7;
  uint64_t v54 = a8;
  uint64_t v51 = a5;
  uint64_t v52 = a6;
  uint64_t v56 = a2;
  uint64_t v57 = a4;
  uint64_t v55 = a3;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v62 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v60 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = type metadata accessor for DispatchQoS();
  uint64_t v59 = *(void *)(v61 - 8);
  __chkstk_darwin();
  uint64_t v58 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for DispatchTime();
  uint64_t v13 = *(void *)(v63 - 8);
  __chkstk_darwin();
  uint64_t v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v17 = (char *)&v45 - v16;
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(void *)(v19 + 64);
  __chkstk_darwin();
  id v21 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  id v23 = (char *)&v45 - v22;
  Logger.init(subsystem:category:)();
  if (a1)
  {
    uint64_t v63 = v18;
    swift_errorRetain();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      NSString v27 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 138412290;
      swift_errorRetain();
      uint64_t v28 = _swift_stdlib_bridgeErrorToNSError();
      aBlock[0]  = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *NSString v27 = v28;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Failed to add notification request: %@", v26, 0xCu);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v43 = v63;
  }
  else
  {
    uint64_t v46 = a9;
    sub_10006F314(0, (unint64_t *)&qword_10047C320);
    uint64_t v47 = v10;
    uint64_t v48 = static OS_dispatch_queue.main.getter();
    static DispatchTime.now()();
    + infix(_:_:)();
    id v29 = *(void (**)(char *, uint64_t))(v13 + 8);
    uint64_t v49 = v13 + 8;
    uint64_t v50 = v29;
    v29(v15, v63);
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v21, v23, v18);
    unint64_t v30 = (*(unsigned __int8 *)(v19 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
    unint64_t v31 = (v20 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v32 = (char *)swift_allocObject();
    uint64_t v33 = v52;
    *((void *)v32 + 2)  = v51;
    *((void *)v32 + 3)  = v33;
    uint64_t v34 = v54;
    *((void *)v32 + 4)  = v53;
    *((void *)v32 + 5)  = v34;
    *((void *)v32 + 6)  = v46;
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(&v32[v30], v21, v18);
    uint64_t v35 = v55;
    *(void *)&v32[v31]  = v56;
    NSString v36 = &v32[(v31 + 15) & 0xFFFFFFFFFFFFFFF8];
    uint64_t v37 = v57;
    *(void *)NSString v36 = v35;
    *((void *)v36 + 1)  = v37;
    aBlock[4]  = sub_100297CA4;
    aBlock[5]  = v32;
    aBlock[0]  = _NSConcreteStackBlock;
    aBlock[1]  = 1107296256;
    aBlock[2]  = sub_10000E5D0;
    aBlock[3]  = &unk_100468418;
    unsigned __int8 v38 = _Block_copy(aBlock);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_release();
    int v39 = v58;
    static DispatchQoS.unspecified.getter();
    aBlock[0]  = _swiftEmptyArrayStorage;
    sub_10001011C((unint64_t *)&qword_1004807A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100010BCC((uint64_t *)&unk_10047D0F0);
    sub_10000F9CC((unint64_t *)&qword_1004807B0, (uint64_t *)&unk_10047D0F0);
    char v40 = v60;
    uint64_t v41 = v47;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v42 = (void *)v48;
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
    _Block_release(v38);

    (*(void (**)(char *, uint64_t))(v62 + 8))(v40, v41);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v39, v61);
    v50(v17, v63);
    uint64_t v43 = v18;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v23, v43);
}

uint64_t sub_100282014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Removing notification request in 5 seconds...", v8, 2u);
    swift_slowDealloc();
  }

  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    Strong  = (void *)swift_unknownObjectWeakLoadStrong();
    uint64_t result = swift_release();
    if (Strong)
    {
      sub_100010BCC((uint64_t *)&unk_100484BA0);
      uint64_t v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16)  = xmmword_1003B2450;
      *(void *)(v11 + 32)  = a3;
      *(void *)(v11 + 40)  = a4;
      swift_bridgeObjectRetain();
      isa  = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [Strong removeNotificationsWithIdentifiers:isa];

      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t sub_100282178()
{
  uint64_t v0 = swift_allocObject();
  sub_1002821B0();
  return v0;
}

uint64_t sub_1002821B0()
{
  Logger.init(subsystem:category:)();
  *(void *)(v0 + qword_1004887B8)  = &_swiftEmptySetSingleton;
  swift_weakInit();
  swift_unknownObjectWeakInit();
  uint64_t v1 = qword_1004887D0;
  type metadata accessor for XPCSession(0);
  _s22P2PActivityCoordinatorC25AirPlayActivityTranslatorVMa();
  sub_10001011C(&qword_100484BC8, (void (*)(uint64_t))type metadata accessor for XPCSession);
  *(void *)(v0 + v1)  = Dictionary.init()();
  *(unsigned char *)(v0 + qword_1004887D8)  = 1;
  *(void *)(v0 + qword_1004887E0)  = 0;
  uint64_t v2 = qword_1004845E0;
  sub_10006F314(0, (unint64_t *)&unk_100484A40);
  _s16P2PActivityStateOMa();
  sub_100296BC4();
  *(void *)(v0 + v2)  = Dictionary.init()();
  uint64_t v3 = qword_1004845E8;
  *(void *)(v0 + v3)  = Dictionary.init()();
  uint64_t v4 = v0 + qword_1004845F0;
  *(void *)uint64_t v4 = 0;
  *(void *)(v4 + 8)  = 0;
  *(void *)(v4 + 16)  = 0;
  *(_OWORD *)(v4 + 24)  = xmmword_1003D4F20;
  *(unsigned char *)(v4 + 40)  = 0;
  uint64_t v5 = qword_1004845F8;
  type metadata accessor for WiFiP2PSPITransactionType(0);
  sub_10001011C(&qword_100484A58, type metadata accessor for WiFiP2PSPITransactionType);
  *(void *)(v0 + v5)  = Dictionary.init()();
  return v0;
}

uint64_t sub_100282470(char *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v5 = (uint64_t)v4;
  uint64_t v103 = a1;
  BOOL v104 = a3;
  id v8 = (void *)*v4;
  uint64_t v9 = v8[12];
  uint64_t v10 = v8[10];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v11 = type metadata accessor for Preferences();
  uint64_t v96 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v92 - v12;
  uint64_t v14 = v8[11];
  uint64_t v15 = v8[13];
  uint64_t v16 = v8[14];
  uint64_t v100 = v14;
  uint64_t v101 = v10;
  uint64_t v105 = v10;
  uint64_t v106 = v14;
  uint64_t v17 = v15;
  uint64_t v102 = v9;
  uint64_t v107 = v9;
  uint64_t v108 = v15;
  uint64_t v109 = v16;
  uint64_t v18 = type metadata accessor for P2PController.Components();
  uint64_t v95 = *(void *)(v18 - 8);
  __chkstk_darwin();
  uint64_t v20 = (char *)&v92 - v19;
  type metadata accessor for DispatchPredicate();
  uint64_t v21 = __chkstk_darwin();
  id v23 = (uint64_t *)((char *)&v92 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v98 = v24;
  uint64_t v99 = v21;
  uint64_t v97 = v16;
  switch(a2)
  {
    case 0:
    case 1:
      sub_10006F314(0, (unint64_t *)&qword_10047C320);
      id v25 = v103;
      id v26 = *(id *)&v103[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_queue];
      NSString v27 = OS_dispatch_queue.p2p.unsafeMutableAddressor();
      id v28 = (id)*v27;
      char v29 = static NSObject.== infix(_:_:)();

      if ((v29 & 1) == 0) {
        goto LABEL_25;
      }
      id v30 = (id)*v27;
      *id v23 = (uint64_t)v30;
      uint64_t v32 = v98;
      uint64_t v31 = v99;
      (*(void (**)(uint64_t *, void, uint64_t))(v98 + 104))(v23, enum case for DispatchPredicate.onQueue(_:), v99);
      id v33 = v30;
      LOBYTE(v30)  = _dispatchPreconditionTest(_:)();
      (*(void (**)(uint64_t *, uint64_t))(v32 + 8))(v23, v31);
      if ((v30 & 1) == 0)
      {
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        JUMPOUT(0x100282F8CLL);
      }
      if (a2 == 1)
      {
        uint64_t v105 = v101;
        uint64_t v106 = v100;
        uint64_t v107 = v102;
        uint64_t v108 = v17;
        uint64_t v109 = v97;
        uint64_t v87 = (objc_class *)_s25P2PTrafficPolicyResponderCMa();
        uint64_t v88 = (char *)v25;
        swift_retain();
        id v89 = objc_allocWithZone(v87);
        uint64_t v37 = (void *)sub_100297FF0(v88, v5);
      }
      else
      {
        if (a2)
        {
LABEL_31:
          uint64_t v84 = 0;
          return v104(v84);
        }
        uint64_t v105 = v101;
        uint64_t v106 = v100;
        uint64_t v107 = v102;
        uint64_t v108 = v17;
        uint64_t v109 = v97;
        uint64_t v34 = (objc_class *)_s23P2PTransactionResponderCMa();
        id v35 = v25;
        swift_retain();
        id v36 = objc_allocWithZone(v34);
        uint64_t v37 = (void *)sub_100297DEC(v35, v5);
      }

      swift_release();
      goto LABEL_31;
    case 2:
      sub_10006F314(0, (unint64_t *)&qword_10047C320);
      id v41 = v103;
      id v42 = *(id *)&v103[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_queue];
      uint64_t v43 = OS_dispatch_queue.awdl.unsafeMutableAddressor();
      id v44 = (id)*v43;
      char v45 = static NSObject.== infix(_:_:)();

      if ((v45 & 1) == 0) {
        goto LABEL_25;
      }
      id v46 = (id)*v43;
      *id v23 = (uint64_t)v46;
      uint64_t v48 = v98;
      uint64_t v47 = v99;
      (*(void (**)(uint64_t *, void, uint64_t))(v98 + 104))(v23, enum case for DispatchPredicate.onQueue(_:), v99);
      id v49 = v46;
      LOBYTE(v46)  = _dispatchPreconditionTest(_:)();
      (*(void (**)(uint64_t *, uint64_t))(v48 + 8))(v23, v47);
      if ((v46 & 1) == 0) {
        goto LABEL_35;
      }
      uint64_t v50 = sub_1000112DC((uint64_t (*)(void))sub_10001132C);
      if (v50)
      {
        uint64_t v51 = v50;
        uint64_t v105 = v101;
        uint64_t v106 = v100;
        uint64_t v107 = v102;
        uint64_t v108 = v17;
        uint64_t v109 = v97;
        type metadata accessor for P2PController();
        swift_getWitnessTable();
        type metadata accessor for AWDLBonjourOffload();
        uint64_t v52 = (char *)v41;

        v104(0);
        return swift_release();
      }
      id v90 = objc_allocWithZone((Class)type metadata accessor for EmptyBonjourOffload());
      uint64_t v91 = (char *)v41;

      goto LABEL_31;
    case 3:
      uint64_t v93 = v17;
      uint64_t v94 = a4;
      sub_10006F314(0, (unint64_t *)&qword_10047C320);
      id v53 = *(id *)&v103[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_queue];
      uint64_t v54 = OS_dispatch_queue.nan.unsafeMutableAddressor();
      id v55 = (id)*v54;
      char v56 = static NSObject.== infix(_:_:)();

      if ((v56 & 1) == 0)
      {
        uint64_t v84 = 2;
        return v104(v84);
      }
      id v57 = (id)*v54;
      *id v23 = *v54;
      uint64_t v59 = v98;
      uint64_t v58 = v99;
      (*(void (**)(uint64_t *, void, uint64_t))(v98 + 104))(v23, enum case for DispatchPredicate.onQueue(_:), v99);
      id v60 = v57;
      LOBYTE(v57)  = _dispatchPreconditionTest(_:)();
      (*(void (**)(uint64_t *, uint64_t))(v59 + 8))(v23, v58);
      uint64_t v61 = v104;
      if ((v57 & 1) == 0) {
        goto LABEL_36;
      }
      Strong  = swift_weakLoadStrong();
      if (!Strong) {
        goto LABEL_27;
      }
      uint64_t v63 = v95;
      (*(void (**)(char *, uint64_t, uint64_t))(v95 + 16))(v20, Strong + *(void *)(*(void *)Strong + 128), v18);
      swift_release();
      uint64_t v64 = v96;
      (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v13, v20, v11);
      (*(void (**)(char *, uint64_t))(v63 + 8))(v20, v18);
      uint64_t v65 = Preferences.enableUserspaceP2POptions.getter(v11);
      (*(void (**)(char *, uint64_t))(v64 + 8))(v13, v11);
      if ((*(void *)PreferenceDefaults.EnableUserspaceP2POptions.awdlToWiFiAwareMigration.unsafeMutableAddressor() & ~v65) != 0) {
        goto LABEL_27;
      }
      uint64_t v66 = sub_1000112DC(sub_1003159B4);
      if (v66)
      {
        uint64_t v67 = v66;
        uint64_t v105 = v101;
        uint64_t v106 = v100;
        uint64_t v107 = v102;
        uint64_t v108 = v93;
        uint64_t v109 = v97;
        type metadata accessor for P2PController();
        swift_getWitnessTable();
        type metadata accessor for WiFiAwareBonjourOffload();
        os_log_type_t v68 = v103;

        v61(0);
        return swift_release();
      }
      else
      {
LABEL_27:
        id v85 = objc_allocWithZone((Class)type metadata accessor for EmptyBonjourOffload());
        uint64_t v86 = v103;

        return v61(0);
      }
    case 4:
      sub_10006F314(0, (unint64_t *)&qword_10047C320);
      id v70 = v103;
      id v71 = *(id *)&v103[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_queue];
      uint64_t v72 = OS_dispatch_queue.p2p.unsafeMutableAddressor();
      id v73 = (id)*v72;
      char v74 = static NSObject.== infix(_:_:)();

      if ((v74 & 1) == 0) {
        goto LABEL_25;
      }
      id v75 = (id)*v72;
      *id v23 = (uint64_t)v75;
      uint64_t v77 = v98;
      uint64_t v76 = v99;
      (*(void (**)(uint64_t *, void, uint64_t))(v98 + 104))(v23, enum case for DispatchPredicate.onQueue(_:), v99);
      id v78 = v75;
      LOBYTE(v75)  = _dispatchPreconditionTest(_:)();
      (*(void (**)(uint64_t *, uint64_t))(v77 + 8))(v23, v76);
      if ((v75 & 1) == 0) {
        goto LABEL_37;
      }
      uint64_t v105 = v101;
      uint64_t v106 = v100;
      uint64_t v107 = v102;
      uint64_t v108 = v17;
      uint64_t v109 = v97;
      int v79 = (objc_class *)_s16UIAgentResponderCMa();
      uint64_t v80 = (char *)v70;
      id v81 = objc_allocWithZone(v79);
      os_log_type_t v82 = sub_10028F3C4(v80);
      if (v82)
      {
        int v83 = v82;
        v104(0);
        swift_unknownObjectRetain();
        swift_unknownObjectWeakAssign();
        sub_1002811B8();

        return swift_unknownObjectRelease();
      }
LABEL_25:
      uint64_t v84 = 2;
      return v104(v84);
    default:
      unsigned __int8 v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v38, v39))
      {
        char v40 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)char v40 = 134217984;
        uint64_t v105 = a2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Unhandled XPC responder type: %lu", v40, 0xCu);
        swift_slowDealloc();
      }

      goto LABEL_25;
  }
}

char *sub_100282FA0(char *a1)
{
  id v3 = objc_allocWithZone(v1);
  return sub_10028F3C4(a1);
}

void sub_100282FD4(void *a1, unsigned int a2)
{
  int v5 = a2;
  uint64_t v6 = (void *)*v2;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DispatchQoS();
  uint64_t v11 = __chkstk_darwin();
  uint64_t v14 = (char *)v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v5)
  {
    uint64_t v71 = v7;
    unsigned int v65 = a2;
    uint64_t v66 = v14;
    uint64_t v67 = v12;
    os_log_type_t v68 = v10;
    uint64_t v69 = v11;
    uint64_t v70 = v8;
    uint64_t v15 = (void *)swift_allocObject();
    uint64_t v16 = v6[10];
    _OWORD v15[2] = v16;
    uint64_t v17 = v6[11];
    v15[3]  = v17;
    uint64_t v18 = v6[12];
    v15[4]  = v18;
    unint64_t v19 = v6[13];
    void v15[5] = v19;
    uint64_t v20 = v6[14];
    v15[6]  = v20;
    sub_10000F000();
    uint64_t v63 = swift_allocError();
    *(_OWORD *)uint64_t v21 = xmmword_1003B2F00;
    *(unsigned char *)(v21 + 16)  = 1;
    uint64_t v64 = v2;
    uint64_t v22 = (id *)((char *)v2 + qword_1004845E0);
    swift_beginAccess();
    id v23 = (void *)swift_allocObject();
    v23[2]  = v16;
    v23[3]  = v17;
    v23[4]  = v18;
    v23[5]  = v19;
    v23[6]  = v20;
    v23[7]  = sub_1000138A4;
    id v73 = v23;
    v23[8]  = v15;
    uint64_t v24 = a1;
    LODWORD(v62)  = swift_isUniquelyReferenced_nonNull_native();
    id v78 = *v22;
    id v25 = v78;
    *uint64_t v22 = (id)0x8000000000000000;
    unint64_t v72 = sub_10039F8DC((uint64_t)v24);
    uint64_t v27 = v25[2];
    BOOL v28 = (v26 & 1) == 0;
    BOOL v29 = __OFADD__(v27, v28);
    Swift::Int v30 = v27 + v28;
    if (v29)
    {
      __break(1u);
    }
    else
    {
      char v31 = v26;
      uint64_t v61 = v15;
      Swift::Int v32 = v30;
      uint64_t v33 = sub_10006F314(255, (unint64_t *)&unk_100484A40);
      uint64_t v60 = v16;
      aBlock  = v16;
      uint64_t v80 = v17;
      uint64_t v58 = v18;
      uint64_t v81 = v18;
      unint64_t v82 = v19;
      unint64_t v59 = v19;
      uint64_t v83 = v20;
      uint64_t v34 = (void *)_s16P2PActivityStateOMa();
      sub_100296BC4();
      v57[1]  = v33;
      type metadata accessor for _NativeDictionary();
      Swift::Bool v35 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v62, v32);
      id v36 = v78;
      if (!v35 || (unint64_t v72 = sub_10039F8DC((uint64_t)v24), (v31 & 1) == (v37 & 1)))
      {
        uint64_t v62 = v20;
        *uint64_t v22 = v36;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        if ((v31 & 1) == 0)
        {
          sub_1000138C4((uint64_t)&aBlock);
          id v78 = v24;
          id v44 = v24;
          _NativeDictionary._insert(at:key:value:)();
        }
        uint64_t v38 = v60;
        uint64_t v39 = v58;
        swift_bridgeObjectRelease();
        char v45 = v65;
        uint64_t v46 = sub_100011EC0(v65, v63, 1, v34);
        swift_endAccess();
        swift_errorRelease();

        sub_100282FD4(v24, v46);
        uint64_t v47 = (void *)*OS_dispatch_queue.awdl.unsafeMutableAddressor();
        uint64_t v48 = swift_allocObject();
        swift_weakInit();
        uint64_t v49 = swift_allocObject();
        *(void *)(v49 + 16)  = v38;
        *(void *)(v49 + 24)  = v17;
        unint64_t v50 = v59;
        *(void *)(v49 + 32)  = v39;
        *(void *)(v49 + 40)  = v50;
        *(void *)(v49 + 48)  = v62;
        *(void *)(v49 + 56)  = v48;
        *(unsigned char *)(v49 + 64)  = v45;
        *(void *)(v49 + 72)  = v24;
        uint64_t v83 = (uint64_t)sub_100296FA4;
        uint64_t v84 = v49;
        aBlock  = (uint64_t)_NSConcreteStackBlock;
        uint64_t v80 = 1107296256;
        uint64_t v81 = (uint64_t)sub_10000E5D0;
        unint64_t v82 = (unint64_t)&unk_1004680D0;
        uint64_t v51 = _Block_copy(&aBlock);
        uint64_t v52 = v24;
        id v53 = v47;
        swift_retain();
        uint64_t v54 = v66;
        static DispatchQoS.unspecified.getter();
        *(void *)&long long v74 = _swiftEmptyArrayStorage;
        sub_10001011C((unint64_t *)&qword_1004807A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_100010BCC((uint64_t *)&unk_10047D0F0);
        sub_10000F9CC((unint64_t *)&qword_1004807B0, (uint64_t *)&unk_10047D0F0);
        id v55 = v68;
        uint64_t v56 = v71;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v51);

        (*(void (**)(char *, uint64_t))(v70 + 8))(v55, v56);
        (*(void (**)(char *, uint64_t))(v67 + 8))(v54, v69);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        return;
      }
    }
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  char v40 = (char *)v2 + qword_1004845E0;
  swift_beginAccess();
  if (*(void *)(*(void *)v40 + 16))
  {
    swift_bridgeObjectRetain();
    sub_10039F8DC((uint64_t)a1);
    if (v41)
    {
      swift_bridgeObjectRelease();
      sub_10006F314(0, (unint64_t *)&unk_100484A40);
      uint64_t v42 = v6[14];
      swift_bridgeObjectRetain();
      long long v43 = *((_OWORD *)v6 + 6);
      long long v74 = *((_OWORD *)v6 + 5);
      long long v75 = v43;
      uint64_t v76 = v42;
      _s16P2PActivityStateOMa();
      sub_100296BC4();
      Dictionary.subscript.getter();
      swift_bridgeObjectRelease();

      if (v82 >> 62 != 3 || (_BYTE)v84 || v82 != 0xC000000000000000 || v80 | aBlock | v81 | v83)
      {
        sub_100010164(aBlock, v80, v81, v82, v83, v84);
      }
      else
      {
        swift_beginAccess();
        type metadata accessor for Dictionary();
        Dictionary.remove(at:)();
        swift_endAccess();
        sub_100010164(aBlock, v80, v81, v82, v83, v84);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_100283804(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v62 = a5;
  uint64_t v63 = a6;
  uint64_t v61 = a4;
  uint64_t v13 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v64 = v13;
  uint64_t v65 = v14;
  __chkstk_darwin();
  uint64_t v16 = (char *)v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = type metadata accessor for DispatchQoS();
  uint64_t v17 = *(void *)(v66 - 8);
  __chkstk_darwin();
  unint64_t v19 = (char *)v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return result;
  }
  uint64_t v21 = result;
  uint64_t v55 = a7;
  uint64_t v56 = a1;
  int v54 = a2;
  uint64_t v22 = sub_1000112DC((uint64_t (*)(void))sub_10001132C);
  uint64_t v59 = v17;
  uint64_t v60 = v16;
  uint64_t v57 = v21;
  uint64_t v58 = v19;
  if (a2 == 1)
  {
    if (v22)
    {
      sub_100371328(a3);
LABEL_7:
      swift_release();
    }
  }
  else if (v22)
  {
    sub_100371414((uint64_t)a3);
    goto LABEL_7;
  }
  uint64_t v53 = a8;
  id v23 = a3;
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    char v26 = v54;
    int v27 = v54;
    uint64_t v28 = swift_slowAlloc();
    uint64_t v52 = swift_slowAlloc();
    aBlock[0]  = v52;
    *(_DWORD *)uint64_t v28 = 136315394;
    if (v27 == 1) {
      uint64_t v29 = 0x6465767265736572;
    }
    else {
      uint64_t v29 = 0x7672657365726E75;
    }
    if (v27 == 1) {
      unint64_t v30 = 0xE800000000000000;
    }
    else {
      unint64_t v30 = 0xEA00000000006465;
    }
    uint64_t v67 = (void *)sub_100010680(v29, v30, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 12)  = 2080;
    v51[2]  = v28 + 14;
    id v31 = [v23 uniqueIdentifier];
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v33 = a3;
    unint64_t v35 = v34;

    uint64_t v67 = (void *)sub_100010680(v32, v35, aBlock);
    char v36 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a3  = v33;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Successfully %s traffic registrations for %s", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v37 = v53;
  }
  else
  {

    uint64_t v37 = v53;
    char v36 = v54;
  }
  uint64_t v39 = v62;
  uint64_t v38 = v63;
  uint64_t v40 = v61;
  char v41 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v42 = swift_allocObject();
  *(void *)(v42 + 16)  = v40;
  *(void *)(v42 + 24)  = v39;
  uint64_t v43 = v55;
  *(void *)(v42 + 32)  = v38;
  *(void *)(v42 + 40)  = v43;
  uint64_t v44 = v56;
  *(void *)(v42 + 48)  = v37;
  *(void *)(v42 + 56)  = v44;
  *(void *)(v42 + 64)  = a3;
  *(unsigned char *)(v42 + 72)  = v36;
  *(void *)(v42 + 80)  = 0;
  *(unsigned char *)(v42 + 88)  = 0;
  aBlock[4]  = (uint64_t)sub_10029700C;
  aBlock[5]  = v42;
  aBlock[0]  = (uint64_t)_NSConcreteStackBlock;
  aBlock[1]  = 1107296256;
  aBlock[2]  = (uint64_t)sub_10000E5D0;
  aBlock[3]  = (uint64_t)&unk_100468120;
  char v45 = _Block_copy(aBlock);
  id v46 = a3;
  id v47 = v41;
  swift_retain();
  sub_100012718(0, 0);
  uint64_t v48 = v58;
  static DispatchQoS.unspecified.getter();
  uint64_t v67 = _swiftEmptyArrayStorage;
  sub_10001011C((unint64_t *)&qword_1004807A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100010BCC((uint64_t *)&unk_10047D0F0);
  sub_10000F9CC((unint64_t *)&qword_1004807B0, (uint64_t *)&unk_10047D0F0);
  uint64_t v49 = v60;
  uint64_t v50 = v64;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v45);
  swift_release();

  sub_10001270C(0, 0);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v49, v50);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v48, v66);
  return swift_release();
}

uint64_t sub_1002840EC(uint64_t a1, void *a2, unsigned int a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return result;
  }
  uint64_t v18 = result;
  char v37 = a5;
  unsigned int v39 = a3;
  uint64_t v40 = a4;
  unint64_t v19 = (void *)swift_allocObject();
  long long v19[2] = a6;
  v19[3]  = a7;
  v19[4]  = a8;
  v19[5]  = a9;
  v19[6]  = a10;
  uint64_t v20 = (void **)(v18 + qword_1004845E0);
  swift_beginAccess();
  uint64_t v21 = (void *)swift_allocObject();
  _OWORD v21[2] = a6;
  v21[3]  = a7;
  v21[4]  = a8;
  v21[5]  = a9;
  v21[6]  = a10;
  v21[7]  = sub_1000138A4;
  v21[8]  = v19;
  id v22 = a2;
  isUnique  = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v43 = *v20;
  id v23 = v43;
  *uint64_t v20 = (void *)0x8000000000000000;
  char v41 = v22;
  sub_10039F8DC((uint64_t)v22);
  uint64_t v24 = v23[2];
  char v35 = v25;
  BOOL v26 = (v25 & 1) == 0;
  Swift::Int v27 = v24 + v26;
  if (__OFADD__(v24, v26))
  {
    __break(1u);
LABEL_11:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  sub_10006F314(255, (unint64_t *)&unk_100484A40);
  v42[0]  = a6;
  v42[1]  = a7;
  v42[2]  = a8;
  v42[3]  = a9;
  v42[4]  = a10;
  uint64_t v28 = (void *)_s16P2PActivityStateOMa();
  sub_100296BC4();
  type metadata accessor for _NativeDictionary();
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v27))
  {
    sub_10039F8DC((uint64_t)v41);
    if ((v35 & 1) != (v29 & 1)) {
      goto LABEL_11;
    }
  }
  char v38 = v37 & 1;
  *uint64_t v20 = v43;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if (v35)
  {
    uint64_t v30 = v40;
    uint64_t v31 = v39;
    uint64_t v32 = v41;
  }
  else
  {
    sub_1000138C4((uint64_t)v42);
    uint64_t v32 = v41;
    uint64_t v43 = v41;
    id v33 = v41;
    _NativeDictionary._insert(at:key:value:)();
    uint64_t v30 = v40;
    uint64_t v31 = v39;
  }
  swift_bridgeObjectRelease();
  uint64_t v34 = sub_100011E40(v31, v30, v38, v28);
  swift_endAccess();

  sub_100282FD4(v32, v34);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1002843CC(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  int v5 = v4;
  uint64_t v7 = (void *)*v4;
  uint64_t v8 = sub_100281264((char)[a1 options], a3, a4);
  uint64_t v33 = v9;
  uint64_t v34 = (void (*)(char **))v8;
  char v31 = v10;
  uint64_t v11 = (void *)swift_allocObject();
  uint64_t v12 = v7[10];
  unsigned char v11[2] = v12;
  uint64_t v13 = v7[11];
  v11[3]  = v13;
  uint64_t v14 = v7[12];
  void v11[4] = v14;
  uint64_t v15 = v7[13];
  v11[5]  = v15;
  uint64_t v16 = v7[14];
  v11[6]  = v16;
  uint64_t v17 = (void **)((char *)v5 + qword_1004845E0);
  swift_beginAccess();
  uint64_t v18 = (void *)swift_allocObject();
  void v18[2] = v12;
  v18[3]  = v13;
  v18[4]  = v14;
  void v18[5] = v15;
  v18[6]  = v16;
  v18[7]  = sub_1000138A4;
  v18[8]  = v11;
  unint64_t v19 = a1;
  isUnique  = swift_isUniquelyReferenced_nonNull_native();
  char v37 = *v17;
  uint64_t v20 = v37;
  *uint64_t v17 = (void *)0x8000000000000000;
  uint64_t v30 = v19;
  sub_10039F8DC((uint64_t)v19);
  uint64_t v21 = v20[2];
  char v35 = v22;
  BOOL v23 = (v22 & 1) == 0;
  Swift::Int v24 = v21 + v23;
  if (__OFADD__(v21, v23))
  {
    __break(1u);
LABEL_8:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  sub_10006F314(255, (unint64_t *)&unk_100484A40);
  v36[0]  = v12;
  v36[1]  = v13;
  void v36[2] = v14;
  v36[3]  = v15;
  v36[4]  = v16;
  _s16P2PActivityStateOMa();
  sub_100296BC4();
  type metadata accessor for _NativeDictionary();
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v24))
  {
    sub_10039F8DC((uint64_t)v30);
    if ((v35 & 1) != (v25 & 1)) {
      goto LABEL_8;
    }
  }
  *uint64_t v17 = v37;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if ((v35 & 1) == 0)
  {
    sub_1000138C4((uint64_t)v36);
    char v37 = v30;
    BOOL v26 = v30;
    _NativeDictionary._insert(at:key:value:)();
  }
  swift_bridgeObjectRelease();
  unsigned int v27 = sub_10000BB10(a2, v34, v33, v31 & 1);
  swift_endAccess();

  sub_100282FD4(v30, v27);
  sub_1000131D0();
  swift_release();
  return swift_release();
}

uint64_t sub_100284724(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (void *)*v4;
  uint64_t v8 = (void *)swift_allocObject();
  uint64_t v9 = v7[10];
  v8[2]  = v9;
  uint64_t v10 = v7[11];
  v8[3]  = v10;
  uint64_t v11 = v7[12];
  v8[4]  = v11;
  uint64_t v12 = v7[13];
  v8[5]  = v12;
  uint64_t v13 = v7[14];
  v8[6]  = v13;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16)  = a3;
  *(void *)(v14 + 24)  = a4;
  uint64_t v33 = v14;
  uint64_t v15 = (void **)((char *)v4 + qword_1004845E0);
  swift_beginAccess();
  uint64_t v16 = (void *)swift_allocObject();
  uint64_t v31 = v9;
  void v16[2] = v9;
  v16[3]  = v10;
  uint64_t v17 = v10;
  void v16[4] = v11;
  void v16[5] = v12;
  v16[6]  = v13;
  v16[7]  = sub_1000138A4;
  v16[8]  = v8;
  uint64_t v18 = a1;
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  char v37 = *v15;
  uint64_t v20 = v37;
  *uint64_t v15 = (void *)0x8000000000000000;
  uint64_t v32 = v18;
  sub_10039F8DC((uint64_t)v18);
  uint64_t v22 = v20[2];
  BOOL v23 = (v21 & 1) == 0;
  Swift::Int v24 = v22 + v23;
  if (__OFADD__(v22, v23))
  {
    __break(1u);
LABEL_8:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  char v25 = v21;
  sub_10006F314(255, (unint64_t *)&unk_100484A40);
  v36[0]  = v31;
  v36[1]  = v17;
  void v36[2] = v11;
  v36[3]  = v12;
  v36[4]  = v13;
  _s16P2PActivityStateOMa();
  sub_100296BC4();
  type metadata accessor for _NativeDictionary();
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v24))
  {
    sub_10039F8DC((uint64_t)v32);
    if ((v25 & 1) != (v26 & 1)) {
      goto LABEL_8;
    }
  }
  *uint64_t v15 = v37;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if ((v25 & 1) == 0)
  {
    sub_1000138C4((uint64_t)v36);
    char v37 = v32;
    unsigned int v27 = v32;
    _NativeDictionary._insert(at:key:value:)();
  }
  swift_bridgeObjectRelease();
  sub_10000CB30(a2, (void (*)(id *))sub_100298D5C, v33, 1);
  unsigned int v29 = v28;
  swift_endAccess();

  swift_release();
  sub_100282FD4(v32, v29);
  swift_release();
  return swift_release();
}

uint64_t sub_100284A78(void **a1, void *a2, void *a3)
{
  uint64_t v4 = (void *)*a2;
  int v5 = *a1;
  uint64_t v6 = (void *)swift_allocObject();
  uint64_t v7 = v4[10];
  v6[2]  = v7;
  unint64_t v28 = v4[11];
  v6[3]  = v28;
  uint64_t v8 = v4[12];
  v6[4]  = v8;
  uint64_t v27 = v4[13];
  v6[5]  = v27;
  uint64_t v9 = v4[14];
  void v6[6] = v9;
  uint64_t v29 = 0;
  unint64_t v30 = 0xE000000000000000;
  id v10 = v5;
  _StringGuts.grow(_:)(40);
  v11._object  = (void *)0x80000001003DF7D0;
  v11._countAndFlagsBits  = 0xD000000000000026;
  String.append(_:)(v11);
  id v34 = v10;
  sub_10006F314(0, (unint64_t *)&unk_100484A40);
  swift_getWitnessTable();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  uint64_t v12 = (void **)((char *)a2 + qword_1004845E0);
  swift_beginAccess();
  uint64_t v13 = (void *)swift_allocObject();
  v13[2]  = v7;
  v13[3]  = v28;
  v13[4]  = v8;
  v13[5]  = v27;
  v13[6]  = v9;
  v13[7]  = sub_1000138A4;
  v13[8]  = v6;
  isUnique  = swift_isUniquelyReferenced_nonNull_native();
  char v35 = *v12;
  uint64_t v14 = v35;
  *uint64_t v12 = (void *)0x8000000000000000;
  char v25 = v10;
  sub_10039F8DC((uint64_t)v10);
  uint64_t v16 = v14[2];
  BOOL v17 = (v15 & 1) == 0;
  Swift::Int v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
LABEL_8:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  char v19 = v15;
  uint64_t v29 = v7;
  unint64_t v30 = v28;
  uint64_t v31 = v8;
  uint64_t v32 = v27;
  uint64_t v33 = v9;
  _s16P2PActivityStateOMa();
  sub_100296BC4();
  type metadata accessor for _NativeDictionary();
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v18))
  {
    sub_10039F8DC((uint64_t)v25);
    if ((v19 & 1) != (v20 & 1)) {
      goto LABEL_8;
    }
  }
  *uint64_t v12 = v35;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if ((v19 & 1) == 0)
  {
    sub_1000138C4((uint64_t)&v29);
    char v35 = v25;
    char v21 = v25;
    _NativeDictionary._insert(at:key:value:)();
  }
  swift_bridgeObjectRelease();
  unsigned int v22 = sub_1002802AC(a3, 0, 0xE000000000000000);
  swift_endAccess();

  swift_bridgeObjectRelease();
  sub_100282FD4(v25, v22);
  swift_release();
  return swift_release();
}

void sub_100284E0C(void *a1, unsigned int a2, int a3)
{
  id v74 = a1;
  int v6 = a2;
  uint64_t v7 = (void *)*v3;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  Swift::String v11 = (char *)v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DispatchQoS();
  uint64_t v12 = __chkstk_darwin();
  char v15 = (char *)v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v6)
  {
    uint64_t v73 = v8;
    int v66 = a3;
    unsigned int v67 = a2;
    os_log_type_t v68 = v15;
    uint64_t v69 = v13;
    uint64_t v70 = v11;
    uint64_t v71 = v12;
    uint64_t v72 = v9;
    uint64_t v16 = (void *)swift_allocObject();
    uint64_t v17 = v7[10];
    void v16[2] = v17;
    uint64_t v18 = v7[11];
    v16[3]  = v18;
    uint64_t v19 = v7[12];
    void v16[4] = v19;
    unint64_t v20 = v7[13];
    void v16[5] = v20;
    uint64_t v21 = v7[14];
    v16[6]  = v21;
    sub_10000F000();
    uint64_t v64 = swift_allocError();
    *(_OWORD *)uint64_t v22 = xmmword_1003B2F00;
    *(unsigned char *)(v22 + 16)  = 1;
    uint64_t v65 = v3;
    BOOL v23 = (id *)((char *)v3 + qword_1004845E8);
    swift_beginAccess();
    Swift::Int v24 = (void *)swift_allocObject();
    _DWORD v24[2] = v17;
    v24[3]  = v18;
    v24[4]  = v19;
    v24[5]  = v20;
    v24[6]  = v21;
    v24[7]  = sub_1000138A4;
    long long v75 = v24;
    v24[8]  = v16;
    char v25 = v74;
    LODWORD(v63)  = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v80 = *v23;
    char v26 = v80;
    *BOOL v23 = (id)0x8000000000000000;
    id v74 = (id)sub_10039F8DC((uint64_t)v25);
    uint64_t v28 = v26[2];
    BOOL v29 = (v27 & 1) == 0;
    BOOL v30 = __OFADD__(v28, v29);
    Swift::Int v31 = v28 + v29;
    if (v30)
    {
      __break(1u);
    }
    else
    {
      char v32 = v27;
      uint64_t v62 = v16;
      Swift::Int v33 = v31;
      uint64_t v34 = sub_10006F314(255, (unint64_t *)&unk_100484A40);
      uint64_t v61 = v17;
      aBlock  = v17;
      uint64_t v82 = v18;
      uint64_t v59 = v19;
      uint64_t v83 = v19;
      unint64_t v84 = v20;
      unint64_t v60 = v20;
      uint64_t v85 = v21;
      char v35 = (void *)_s16P2PActivityStateOMa();
      sub_100296BC4();
      v58[1]  = v34;
      type metadata accessor for _NativeDictionary();
      Swift::Bool v36 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v63, v33);
      id v37 = v80;
      uint64_t v63 = v21;
      if (!v36 || (sub_10039F8DC((uint64_t)v25), (v32 & 1) == (v38 & 1)))
      {
        *BOOL v23 = v37;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        if ((v32 & 1) == 0)
        {
          sub_1000138C4((uint64_t)&aBlock);
          uint64_t v80 = v25;
          uint64_t v43 = v25;
          _NativeDictionary._insert(at:key:value:)();
        }
        uint64_t v44 = v61;
        uint64_t v45 = v59;
        swift_bridgeObjectRelease();
        char v46 = v67;
        uint64_t v47 = sub_100011EC0(v67, v64, 1, v35);
        swift_endAccess();
        swift_errorRelease();

        sub_100284E0C(v25, v47, 0);
        uint64_t v48 = (void *)*OS_dispatch_queue.awdl.unsafeMutableAddressor();
        uint64_t v49 = swift_allocObject();
        swift_weakInit();
        uint64_t v50 = swift_allocObject();
        *(void *)(v50 + 16)  = v44;
        *(void *)(v50 + 24)  = v18;
        unint64_t v51 = v60;
        *(void *)(v50 + 32)  = v45;
        *(void *)(v50 + 40)  = v51;
        *(void *)(v50 + 48)  = v63;
        *(void *)(v50 + 56)  = v49;
        *(unsigned char *)(v50 + 64)  = v66 & 1;
        *(unsigned char *)(v50 + 65)  = v46;
        *(void *)(v50 + 72)  = v25;
        uint64_t v85 = (uint64_t)sub_100296E60;
        uint64_t v86 = v50;
        aBlock  = (uint64_t)_NSConcreteStackBlock;
        uint64_t v82 = 1107296256;
        uint64_t v83 = (uint64_t)sub_10000E5D0;
        unint64_t v84 = (unint64_t)&unk_100467F40;
        uint64_t v52 = _Block_copy(&aBlock);
        uint64_t v53 = v25;
        id v54 = v48;
        swift_retain();
        uint64_t v55 = v68;
        static DispatchQoS.unspecified.getter();
        *(void *)&long long v76 = _swiftEmptyArrayStorage;
        sub_10001011C((unint64_t *)&qword_1004807A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_100010BCC((uint64_t *)&unk_10047D0F0);
        sub_10000F9CC((unint64_t *)&qword_1004807B0, (uint64_t *)&unk_10047D0F0);
        uint64_t v56 = v70;
        uint64_t v57 = v73;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v52);

        (*(void (**)(char *, uint64_t))(v72 + 8))(v56, v57);
        (*(void (**)(char *, uint64_t))(v69 + 8))(v55, v71);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        return;
      }
    }
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unsigned int v39 = (char *)v3 + qword_1004845E8;
  swift_beginAccess();
  if (*(void *)(*(void *)v39 + 16))
  {
    swift_bridgeObjectRetain();
    sub_10039F8DC((uint64_t)v74);
    if (v40)
    {
      swift_bridgeObjectRelease();
      sub_10006F314(0, (unint64_t *)&unk_100484A40);
      uint64_t v41 = v7[14];
      swift_bridgeObjectRetain();
      long long v42 = *((_OWORD *)v7 + 6);
      long long v76 = *((_OWORD *)v7 + 5);
      long long v77 = v42;
      uint64_t v78 = v41;
      _s16P2PActivityStateOMa();
      sub_100296BC4();
      Dictionary.subscript.getter();
      swift_bridgeObjectRelease();

      if (v84 >> 62 != 3 || (_BYTE)v86 || v84 != 0xC000000000000000 || v82 | aBlock | v83 | v85)
      {
        sub_100010164(aBlock, v82, v83, v84, v85, v86);
      }
      else
      {
        swift_beginAccess();
        type metadata accessor for Dictionary();
        Dictionary.remove(at:)();
        swift_endAccess();
        sub_100010164(aBlock, v82, v83, v84, v85, v86);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_10028564C(uint64_t a1, char a2, int a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v74 = a7;
  uint64_t v75 = a8;
  uint64_t v72 = a5;
  uint64_t v73 = a6;
  long long v77 = a4;
  int v76 = a3;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v14 = &v62[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = type metadata accessor for DispatchQoS();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin();
  uint64_t v18 = &v62[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v70 = v15;
    uint64_t v71 = v12;
    uint64_t v68 = result;
    uint64_t v69 = v16;
    uint64_t v67 = a1;
    uint64_t v66 = a9;
    uint64_t v65 = v14;
    uint64_t v64 = v18;
    if (a2)
    {
      if (sub_1000112DC((uint64_t (*)(void))sub_10001132C))
      {
        sub_1003714E4(v77);
        swift_release();
      }
      unint64_t v20 = v77;
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = swift_slowAlloc();
        aBlock[0]  = swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 136315394;
        id v24 = [v20 uniqueIdentifier];
        uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v27 = v26;

        uint64_t v78 = (void *)sub_100010680(v25, v27, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v23 + 12)  = 2080;
        id v28 = [v20 peerAddress];
        unint64_t v29 = WiFiMACAddress.wifiAddress.getter();

        uint64_t v30 = WiFiAddress.description.getter(v29 & 0xFFFFFFFFFFFFLL);
        uint64_t v78 = (void *)sub_100010680(v30, v31, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Successfully updated traffic registration options for %s to %s", (uint8_t *)v23, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      goto LABEL_25;
    }
    int v32 = v76;
    uint64_t v33 = sub_1000112DC((uint64_t (*)(void))sub_10001132C);
    if (v32 == 1)
    {
      if (v33)
      {
        sub_100371DFC(v77);
LABEL_13:
        swift_release();
      }
    }
    else if (v33)
    {
      sub_10037334C(v77);
      goto LABEL_13;
    }
    uint64_t v34 = v77;
    char v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v35, v36))
    {
      int v37 = v76;
      uint64_t v38 = swift_slowAlloc();
      uint64_t v63 = swift_slowAlloc();
      aBlock[0]  = v63;
      *(_DWORD *)uint64_t v38 = 136315650;
      if (v37 == 1) {
        uint64_t v39 = 7628147;
      }
      else {
        uint64_t v39 = 0x64657261656C63;
      }
      if (v37 == 1) {
        unint64_t v40 = 0xE300000000000000;
      }
      else {
        unint64_t v40 = 0xE700000000000000;
      }
      uint64_t v78 = (void *)sub_100010680(v39, v40, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v38 + 12)  = 2080;
      id v41 = [v34 uniqueIdentifier];
      uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v44 = v43;

      uint64_t v78 = (void *)sub_100010680(v42, v44, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v38 + 22)  = 2080;
      id v45 = [v34 peerAddress];
      unint64_t v46 = WiFiMACAddress.wifiAddress.getter();

      uint64_t v47 = WiFiAddress.description.getter(v46 & 0xFFFFFFFFFFFFLL);
      uint64_t v78 = (void *)sub_100010680(v47, v48, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Successfully %s traffic registration for %s to %s", (uint8_t *)v38, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
LABEL_25:
    uint64_t v50 = v74;
    uint64_t v49 = v75;
    uint64_t v51 = v73;
    uint64_t v52 = v72;
    uint64_t v53 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
    uint64_t v54 = swift_allocObject();
    *(void *)(v54 + 16)  = v52;
    *(void *)(v54 + 24)  = v51;
    *(void *)(v54 + 32)  = v50;
    *(void *)(v54 + 40)  = v49;
    uint64_t v55 = v67;
    *(void *)(v54 + 48)  = v66;
    *(void *)(v54 + 56)  = v55;
    uint64_t v56 = v77;
    *(void *)(v54 + 64)  = v77;
    *(unsigned char *)(v54 + 72)  = v76;
    *(void *)(v54 + 80)  = 0;
    *(unsigned char *)(v54 + 88)  = 0;
    aBlock[4]  = (uint64_t)sub_100296EA0;
    aBlock[5]  = v54;
    aBlock[0]  = (uint64_t)_NSConcreteStackBlock;
    aBlock[1]  = 1107296256;
    aBlock[2]  = (uint64_t)sub_10000E5D0;
    aBlock[3]  = (uint64_t)&unk_100467F90;
    uint64_t v57 = _Block_copy(aBlock);
    id v58 = v56;
    id v59 = v53;
    swift_retain();
    sub_100012718(0, 0);
    unint64_t v60 = v64;
    static DispatchQoS.unspecified.getter();
    uint64_t v78 = _swiftEmptyArrayStorage;
    sub_10001011C((unint64_t *)&qword_1004807A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100010BCC((uint64_t *)&unk_10047D0F0);
    sub_10000F9CC((unint64_t *)&qword_1004807B0, (uint64_t *)&unk_10047D0F0);
    uint64_t v61 = v65;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v57);
    swift_release();

    sub_10001270C(0, 0);
    (*(void (**)(unsigned char *, uint64_t))(v71 + 8))(v61, v11);
    (*(void (**)(unsigned char *, uint64_t))(v69 + 8))(v60, v70);
    return swift_release();
  }
  return result;
}

uint64_t sub_1002861DC(uint64_t a1, void *a2, unsigned int a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return result;
  }
  uint64_t v18 = result;
  char v37 = a5;
  unsigned int v39 = a3;
  uint64_t v40 = a4;
  uint64_t v19 = (void *)swift_allocObject();
  long long v19[2] = a6;
  v19[3]  = a7;
  v19[4]  = a8;
  v19[5]  = a9;
  v19[6]  = a10;
  unint64_t v20 = (void **)(v18 + qword_1004845E8);
  swift_beginAccess();
  uint64_t v21 = (void *)swift_allocObject();
  _OWORD v21[2] = a6;
  v21[3]  = a7;
  v21[4]  = a8;
  v21[5]  = a9;
  v21[6]  = a10;
  v21[7]  = sub_1000138A4;
  v21[8]  = v19;
  id v22 = a2;
  isUnique  = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v43 = *v20;
  uint64_t v23 = v43;
  *unint64_t v20 = (void *)0x8000000000000000;
  id v41 = v22;
  sub_10039F8DC((uint64_t)v22);
  uint64_t v24 = v23[2];
  char v35 = v25;
  BOOL v26 = (v25 & 1) == 0;
  Swift::Int v27 = v24 + v26;
  if (__OFADD__(v24, v26))
  {
    __break(1u);
LABEL_11:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  sub_10006F314(255, (unint64_t *)&unk_100484A40);
  v42[0]  = a6;
  v42[1]  = a7;
  v42[2]  = a8;
  v42[3]  = a9;
  v42[4]  = a10;
  id v28 = (void *)_s16P2PActivityStateOMa();
  sub_100296BC4();
  type metadata accessor for _NativeDictionary();
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v27))
  {
    sub_10039F8DC((uint64_t)v41);
    if ((v35 & 1) != (v29 & 1)) {
      goto LABEL_11;
    }
  }
  char v38 = v37 & 1;
  *unint64_t v20 = v43;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if (v35)
  {
    uint64_t v30 = v40;
    uint64_t v31 = v39;
    int v32 = v41;
  }
  else
  {
    sub_1000138C4((uint64_t)v42);
    int v32 = v41;
    unint64_t v43 = v41;
    id v33 = v41;
    _NativeDictionary._insert(at:key:value:)();
    uint64_t v30 = v40;
    uint64_t v31 = v39;
  }
  swift_bridgeObjectRelease();
  uint64_t v34 = sub_100011E40(v31, v30, v38, v28);
  swift_endAccess();

  sub_100284E0C(v32, v34, 0);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1002864C0(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  int v5 = v4;
  uint64_t v78 = a2;
  uint64_t v7 = *v4;
  uint64_t v8 = sub_100281264((char)[a1 options], a3, a4);
  uint64_t v10 = v9;
  int v12 = v11 & 1;
  id v13 = [a1 uniqueIdentifier];
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;
  if (v14 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v16 == v17)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0) {
      goto LABEL_10;
    }
  }
  id v20 = [a1 peerAddress];
  unint64_t v21 = WiFiMACAddress.wifiAddress.getter();

  id v22 = (unsigned __int16 *)WiFiAddress.zero.unsafeMutableAddressor();
  if (static NANClusterChangeEvent.__derived_struct_equals(_:_:)(v21 & 0xFFFFFFFFFFFFLL, *v22 | ((unint64_t)*(unsigned int *)(v22 + 1) << 16)))
  {
    uint64_t v83 = 0;
    v8(&v83);
    return sub_1000131D0();
  }
LABEL_10:
  uint64_t v23 = (void *)((char *)v5 + qword_1004845E8);
  swift_beginAccess();
  uint64_t v24 = *v23;
  uint64_t v25 = *(void *)(*v23 + 16);
  uint64_t v74 = (void (*)(char **))v8;
  uint64_t v73 = v5;
  int v75 = v12;
  long long v77 = v23;
  if (!v25) {
    goto LABEL_17;
  }
  swift_bridgeObjectRetain();
  sub_10039F8DC((uint64_t)a1);
  if (v26)
  {
    unint64_t v27 = *(unsigned int *)(v24 + 36);
    swift_bridgeObjectRelease();
    sub_10006F314(0, (unint64_t *)&unk_100484A40);
    uint64_t v28 = *(void *)(v7 + 112);
    swift_bridgeObjectRetain();
    long long v29 = *(_OWORD *)(v7 + 96);
    long long v80 = *(_OWORD *)(v7 + 80);
    long long v81 = v29;
    uint64_t v82 = v28;
    _s16P2PActivityStateOMa();
    sub_100296BC4();
    unint64_t v76 = v27;
    Dictionary.subscript.getter();
    swift_bridgeObjectRelease();

    uint64_t v30 = v83;
    uint64_t v31 = v84;
    unint64_t v33 = *((void *)&v85 + 1);
    uint64_t v32 = v85;
    uint64_t v34 = v86;
    unsigned __int8 v35 = v87;
    if (*((void *)&v85 + 1) >> 62 != 1)
    {
LABEL_15:
      sub_100010164(v30, (uint64_t)v31, v32, v33, v34, v35);
      uint64_t v23 = v77;
      goto LABEL_17;
    }
    uint64_t v68 = v83;
    uint64_t v69 = v84;
    long long v70 = v85;
    uint64_t v71 = v86;
    LODWORD(v72)  = v87;
    swift_bridgeObjectRetain();
    Dictionary.subscript.getter();
    swift_bridgeObjectRelease();
    sub_100010164(v83, (uint64_t)v84, v85, *((unint64_t *)&v85 + 1), v86, v87);
    unsigned __int8 v36 = [(id)v80 hasSimilarOptionsTo:a1];

    if (v36)
    {
      uint64_t v30 = v68;
      uint64_t v31 = v69;
      unint64_t v33 = *((void *)&v70 + 1);
      uint64_t v32 = v70;
      uint64_t v34 = v71;
      unsigned __int8 v35 = v72;
      goto LABEL_15;
    }
    swift_beginAccess();
    unint64_t v76 = type metadata accessor for Dictionary();
    Dictionary.remove(at:)();
    swift_endAccess();
    sub_100010164(v83, (uint64_t)v84, v85, *((unint64_t *)&v85 + 1), v86, v87);

    v67[1]  = v67;
    char v79 = 0;
    uint64_t v59 = v68;
    uint64_t v83 = v68;
    __chkstk_darwin();
    unint64_t v60 = v78;
    uint64_t v61 = v74;
    sub_100010BCC(&qword_100484B58);
    sub_100010BCC(&qword_100484A68);
    sub_10000F9CC((unint64_t *)&unk_100484B60, &qword_100484B58);
    swift_getWitnessTable();
    int v62 = v75;
    Sequence.flatMap<A>(_:)();
    sub_100010164(v59, (uint64_t)v69, v70, *((unint64_t *)&v70 + 1), v71, v72);
    if ((v79 & 1) == 0)
    {
      sub_100010BCC((uint64_t *)&unk_100484A80);
      uint64_t v63 = swift_allocObject();
      *(_OWORD *)(v63 + 16)  = xmmword_1003B2450;
      *(void *)(v63 + 32)  = v60;
      *(void *)(v63 + 40)  = v61;
      *(void *)(v63 + 48)  = v10;
      *(unsigned char *)(v63 + 56)  = v62 != 0;
      id v64 = v60;
      sub_1000131C8();
    }
    sub_100010BCC((uint64_t *)&unk_100485BA0);
    uint64_t v65 = static Array.+ infix(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v83 = v65;
    unint64_t v84 = _swiftEmptyArrayStorage;
    long long v85 = xmmword_1003D4F10;
    uint64_t v86 = 0;
    unsigned __int8 v87 = -1;
    id v88 = a1;
    swift_beginAccess();
    id v66 = a1;
    Dictionary.subscript.setter();
    swift_endAccess();
    sub_100284E0C(v66, 1u, 1);
    return sub_1000131D0();
  }
  swift_bridgeObjectRelease();
LABEL_17:
  uint64_t v72 = v10;
  char v37 = (void *)swift_allocObject();
  uint64_t v38 = *(void *)(v7 + 80);
  uint64_t v37[2] = v38;
  unsigned int v39 = *(void **)(v7 + 88);
  v37[3]  = v39;
  uint64_t v40 = *(void *)(v7 + 96);
  v37[4]  = v40;
  uint64_t v41 = *(void *)(v7 + 104);
  v37[5]  = v41;
  uint64_t v42 = *(void *)(v7 + 112);
  v37[6]  = v42;
  swift_beginAccess();
  unint64_t v43 = (void *)swift_allocObject();
  v43[2]  = v38;
  v43[3]  = v39;
  v43[4]  = v40;
  v43[5]  = v41;
  v43[6]  = v42;
  v43[7]  = sub_1000138A4;
  v43[8]  = v37;
  id v44 = a1;
  LODWORD(v71)  = swift_isUniquelyReferenced_nonNull_native();
  id v88 = (id)*v23;
  id v45 = v88;
  *uint64_t v23 = 0x8000000000000000;
  *((void *)&v70 + 1)  = v44;
  unint64_t v76 = sub_10039F8DC((uint64_t)v44);
  uint64_t v47 = v45[2];
  BOOL v48 = (v46 & 1) == 0;
  Swift::Int v49 = v47 + v48;
  if (__OFADD__(v47, v48))
  {
    __break(1u);
LABEL_28:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  char v50 = v46;
  uint64_t v51 = sub_10006F314(255, (unint64_t *)&unk_100484A40);
  uint64_t v83 = v38;
  unint64_t v84 = v39;
  *(void *)&long long v85 = v40;
  *((void *)&v85 + 1)  = v41;
  uint64_t v86 = v42;
  _s16P2PActivityStateOMa();
  sub_100296BC4();
  *(void *)&long long v70 = v51;
  type metadata accessor for _NativeDictionary();
  Swift::Bool v52 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v71, v49);
  uint64_t v53 = v72;
  uint64_t v54 = (void *)*((void *)&v70 + 1);
  if (v52)
  {
    unint64_t v76 = sub_10039F8DC(*((uint64_t *)&v70 + 1));
    if ((v50 & 1) != (v55 & 1)) {
      goto LABEL_28;
    }
  }
  *long long v77 = v88;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if ((v50 & 1) == 0)
  {
    sub_1000138C4((uint64_t)&v83);
    id v88 = v54;
    id v56 = v54;
    _NativeDictionary._insert(at:key:value:)();
  }
  swift_bridgeObjectRelease();
  unsigned int v57 = sub_10000BB10(v78, v74, v53, v75);
  swift_endAccess();

  sub_100284E0C(v54, v57, 0);
  sub_1000131D0();
  swift_release();
  return swift_release();
}

void sub_100286DF4(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v19 = v3;
    __chkstk_darwin();
    void v16[2] = v4;
    v16[3]  = v5;
    void v16[4] = v6;
    void v16[5] = v7;
    v16[6]  = v8;
    char v17 = v9 & 1;
    id v10 = v5;
    uint64_t v11 = sub_100010BCC(&qword_100484B70);
    uint64_t v12 = sub_100010BCC((uint64_t *)&unk_100485BA0);
    unint64_t v13 = sub_100297A2C();
    uint64_t v15 = sub_1003741D0((void (*)(char *, char *))sub_100297A00, (uint64_t)v16, v11, v12, (uint64_t)&type metadata for Never, v13, (uint64_t)&protocol witness table for Never, v14);

    *a2  = v15;
  }
}

id sub_100286F08@<X0>(void *a1@<X1>, void *a2@<X2>, unsigned char *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, char a6@<W6>, uint64_t a7@<X8>)
{
  sub_10006F314(0, (unint64_t *)&qword_10047DC50);
  if ((static NSObject.== infix(_:_:)() & 1) != 0 && (*a3 & 1) == 0)
  {
    *a3  = 1;
    *(void *)a7  = a1;
    *(void *)(a7 + 8)  = a4;
    *(void *)(a7 + 16)  = a5;
    *(unsigned char *)(a7 + 24)  = a6 & 1;
    id v15 = a1;
    return (id)sub_1000131C8();
  }
  else
  {
    *(void *)a7  = a2;
    *(void *)(a7 + 8)  = NANBitmap.Channel.operatingClass.getter;
    *(void *)(a7 + 16)  = 0;
    *(unsigned char *)(a7 + 24)  = 0;
    return a2;
  }
}

void sub_100286FF4(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return;
  }
  sub_10008345C(0, v1, 0);
  uint64_t v4 = sub_100374AE8(a1);
  uint64_t v5 = 0;
  uint64_t v6 = a1 + 64;
  int64_t v22 = v1;
  int v23 = v3;
  uint64_t v24 = a1 + 64;
  while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v9 = (unint64_t)v4 >> 6;
    if ((*(void *)(v6 + 8 * ((unint64_t)v4 >> 6)) & (1 << v4)) == 0) {
      goto LABEL_25;
    }
    if (*(_DWORD *)(a1 + 36) != v3) {
      goto LABEL_26;
    }
    uint64_t v25 = v5;
    id v10 = *(id *)(*(void *)(a1 + 48) + 8 * v4);
    swift_bridgeObjectRetain();
    id v11 = [v10 uniqueIdentifier];
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;
    swift_bridgeObjectRelease();

    unint64_t v15 = _swiftEmptyArrayStorage[2];
    unint64_t v14 = _swiftEmptyArrayStorage[3];
    if (v15 >= v14 >> 1) {
      sub_10008345C(v14 > 1, v15 + 1, 1);
    }
    _swiftEmptyArrayStorage[2]  = v15 + 1;
    uint64_t v16 = &_swiftEmptyArrayStorage[2 * v15];
    void v16[4] = v26;
    void v16[5] = v13;
    int64_t v7 = 1 << *(unsigned char *)(a1 + 32);
    if (v4 >= v7) {
      goto LABEL_27;
    }
    uint64_t v6 = a1 + 64;
    uint64_t v17 = *(void *)(v24 + 8 * v9);
    if ((v17 & (1 << v4)) == 0) {
      goto LABEL_28;
    }
    int v3 = v23;
    if (*(_DWORD *)(a1 + 36) != v23) {
      goto LABEL_29;
    }
    unint64_t v18 = v17 & (-2 << (v4 & 0x3F));
    if (v18)
    {
      int64_t v7 = __clz(__rbit64(v18)) | v4 & 0xFFFFFFFFFFFFFFC0;
      int64_t v8 = v22;
    }
    else
    {
      unint64_t v19 = v9 + 1;
      unint64_t v20 = (unint64_t)(v7 + 63) >> 6;
      int64_t v8 = v22;
      if (v9 + 1 < v20)
      {
        unint64_t v21 = *(void *)(v24 + 8 * v19);
        if (!v21)
        {
          unint64_t v19 = v9 + 2;
          if (v9 + 2 >= v20) {
            goto LABEL_4;
          }
          unint64_t v21 = *(void *)(v24 + 8 * v19);
          if (!v21)
          {
            while (v20 - 3 != v9)
            {
              unint64_t v21 = *(void *)(a1 + 88 + 8 * v9++);
              if (v21)
              {
                unint64_t v19 = v9 + 2;
                goto LABEL_17;
              }
            }
            goto LABEL_4;
          }
        }
LABEL_17:
        int64_t v7 = __clz(__rbit64(v21)) + (v19 << 6);
      }
    }
LABEL_4:
    uint64_t v5 = v25 + 1;
    uint64_t v4 = v7;
    if (v25 + 1 == v8) {
      return;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
}

void sub_100287264(void *a1, void *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  unint64_t v84 = a3;
  *(void *)(v8 + 16)  = a3;
  *(void *)(v8 + 24)  = a4;
  unint64_t v9 = (void *)(v4 + qword_1004845E8);
  swift_beginAccess();
  sub_10006F314(0, (unint64_t *)&unk_100484A40);
  swift_retain_n();
  id v10 = a1;
  _s16P2PActivityStateOMa();
  sub_100296BC4();
  Dictionary.subscript.getter();

  if (v92 >> 8 != 0xFFFFFFFF)
  {
    unint64_t v96 = v92;
    swift_endAccess();
    swift_release();
    sub_10000CB30(a2, (void (*)(id *))sub_100297934, v8, 1);
    unsigned int v86 = v21;
    swift_beginAccess();
    id v82 = v10;
    sub_100012724(v89, v90, v91, v92, v93, v94);
    type metadata accessor for Dictionary();
    Dictionary.subscript.setter();
    swift_endAccess();
    sub_100284E0C(v82, v86, 0);
    swift_release();
    sub_100010164(v89, v90, v91, v92, v93, v94);
    return;
  }
  swift_endAccess();
  id v11 = [v10 peerAddress];
  uint64_t v12 = v10;
  unint64_t v13 = WiFiMACAddress.wifiAddress.getter();

  unint64_t v14 = (unsigned __int16 *)WiFiAddress.zero.unsafeMutableAddressor();
  if (!static NANClusterChangeEvent.__derived_struct_equals(_:_:)(v13 & 0xFFFFFFFFFFFFLL, *v14 | ((unint64_t)*(unsigned int *)(v14 + 1) << 16)))
  {
    swift_release();
    id v22 = v12;
    id v23 = a2;
    id v24 = v22;
    id v25 = v23;
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      long long v29 = (void *)swift_slowAlloc();
      *(void *)&long long v95 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 138412802;
      id v30 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *long long v29 = v25;

      *(_WORD *)(v28 + 12)  = 2080;
      id v31 = [v24 uniqueIdentifier];
      uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v34 = v33;

      sub_100010680(v32, v34, (uint64_t *)&v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 22)  = 2080;
      id v35 = [v24 peerAddress];
      unint64_t v36 = WiFiMACAddress.wifiAddress.getter();

      uint64_t v37 = WiFiAddress.description.getter(v36 & 0xFFFFFFFFFFFFLL);
      sub_100010680(v37, v38, (uint64_t *)&v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "%@ failed to clear traffic registration for %s to %s because invalid peer address", (uint8_t *)v28, 0x20u);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      uint64_t v39 = v8;
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v39 = v8;
    }
    sub_10000F000();
    uint64_t v54 = swift_allocError();
    *(_OWORD *)uint64_t v55 = xmmword_1003B2F00;
    *(unsigned char *)(v55 + 16)  = 1;
    sub_10027FDD0(v54, (void (*)(id *))sub_100297934, v39, 1);
    swift_errorRelease();
    goto LABEL_28;
  }
  unint64_t v15 = v12;
  id v16 = [v12 uniqueIdentifier];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;
  if (v17 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v19 == v20)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v40 & 1) == 0)
    {
      id v68 = v15;
      id v69 = a2;
      id v70 = v68;
      id v71 = v69;
      uint64_t v72 = Logger.logObject.getter();
      os_log_type_t v73 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v72, v73))
      {
        uint64_t v74 = swift_slowAlloc();
        uint64_t v83 = (void *)swift_slowAlloc();
        *(void *)&long long v95 = swift_slowAlloc();
        *(_DWORD *)uint64_t v74 = 138412546;
        id v75 = v71;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v83 = v71;

        *(_WORD *)(v74 + 12)  = 2080;
        id v76 = [v70 uniqueIdentifier];
        uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v79 = v78;

        sub_100010680(v77, v79, (uint64_t *)&v95);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v72, v73, "%@ failed to clear traffic registration for %s because the peer address was empty; return success to maintain compatibility",
          (uint8_t *)v74,
          0x16u);
        sub_100010BCC(&qword_10047CC30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      goto LABEL_27;
    }
  }
  NANBitmap.Channel.operatingClass.getter(*v9);
  __chkstk_darwin();
  type metadata accessor for Dictionary.Keys();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  unint64_t v41 = Sequence.filter(_:)();
  *(void *)&long long v95 = v41;
  sub_100010BCC(&qword_100484A50);
  swift_getWitnessTable();
  if (Collection.isEmpty.getter())
  {
    swift_bridgeObjectRelease();
    id v42 = v15;
    id v43 = a2;
    id v44 = v42;
    id v45 = v43;
    char v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = swift_slowAlloc();
      unsigned __int8 v87 = (void *)swift_slowAlloc();
      *(void *)&long long v95 = swift_slowAlloc();
      *(_DWORD *)uint64_t v48 = 136315394;
      id v49 = [v44 uniqueIdentifier];
      uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v52 = v51;

      sub_100010680(v50, v52, (uint64_t *)&v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v48 + 12)  = 2112;
      id v53 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unsigned __int8 v87 = v45;

      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Ignoring request to clear all traffic registrations for %s from %@ because none were previously registered", (uint8_t *)v48, 0x16u);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    v84(0);
    swift_release();
    goto LABEL_28;
  }
  id v56 = v15;
  swift_bridgeObjectRetain_n();
  id v57 = a2;
  id v58 = v56;
  id v59 = v57;
  unint64_t v60 = Logger.logObject.getter();
  os_log_type_t v61 = static os_log_type_t.default.getter();
  id v88 = v60;
  if (os_log_type_enabled(v60, v61))
  {
    uint64_t v62 = swift_slowAlloc();
    long long v81 = (void *)swift_slowAlloc();
    *(void *)&long long v95 = swift_slowAlloc();
    *(_DWORD *)uint64_t v62 = 134218498;
    os_log_type_t v80 = v61;
    if (v41 >> 62)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v62 + 12)  = 2080;
    id v63 = [v58 uniqueIdentifier:v62 + 14];
    uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v66 = v65;

    sub_100010680(v64, v66, (uint64_t *)&v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v62 + 22)  = 2112;
    id v67 = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *long long v81 = v59;

    _os_log_impl((void *)&_mh_execute_header, v88, v80, "Clearing all (%ld total) traffic registrations for %s because %@ cleared with empty peer address", (uint8_t *)v62, 0x20u);
    sub_100010BCC(&qword_10047CC30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  *(void *)&long long v95 = v41;
  swift_getWitnessTable();
  Sequence.forEach(_:)();
  swift_bridgeObjectRelease();
LABEL_27:
  v84(0);
  swift_release();
LABEL_28:
  swift_release();
}

uint64_t sub_1002881D8(id *a1, void *a2)
{
  id v3 = [*a1 uniqueIdentifier];
  id v4 = [a2 uniqueIdentifier];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  if (v5 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v7 == v8) {
    char v10 = 1;
  }
  else {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v10 & 1;
}

uint64_t sub_1002882B0(void **a1, void *a2)
{
  uint64_t v2 = (void *)*a2;
  id v3 = *a1;
  id v4 = (void *)((char *)a2 + qword_1004845E8);
  swift_beginAccess();
  uint64_t v37 = v3;
  sub_10006F314(0, (unint64_t *)&unk_100484A40);
  uint64_t v5 = v2[10];
  uint64_t v6 = v2[11];
  uint64_t v7 = v2[12];
  uint64_t v8 = v2[13];
  uint64_t v9 = v2[14];
  id v10 = v3;
  uint64_t v29 = v5;
  uint64_t v11 = v6;
  uint64_t v12 = v9;
  _s16P2PActivityStateOMa();
  sub_100296BC4();
  Dictionary.subscript.getter();

  if (v33 >> 8 != 0xFFFFFFFF)
  {
    if (v33 >> 62 == 1)
    {
      swift_endAccess();
      id v13 = v10;
      id v14 = v10;
      sub_1002971CC(v30, (uint64_t)v14);

      id v10 = v13;
      uint64_t v12 = v9;
      sub_1002973F0(v30, v31, v32, v33, v34, v35);
      goto LABEL_6;
    }
    sub_1002973F0(v30, v31, v32, v33, v34, v35);
  }
  swift_endAccess();
LABEL_6:
  unint64_t v15 = (void *)swift_allocObject();
  _OWORD v15[2] = v29;
  v15[3]  = v11;
  v15[4]  = v7;
  void v15[5] = v8;
  v15[6]  = v12;
  swift_beginAccess();
  id v16 = (void *)swift_allocObject();
  void v16[2] = v29;
  v16[3]  = v11;
  void v16[4] = v7;
  void v16[5] = v8;
  v16[6]  = v12;
  v16[7]  = sub_1000138A4;
  v16[8]  = v15;
  id v17 = v10;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v30 = *v4;
  uint64_t v19 = v30;
  *id v4 = 0x8000000000000000;
  sub_10039F8DC((uint64_t)v17);
  uint64_t v21 = *(void *)(v19 + 16);
  BOOL v22 = (v20 & 1) == 0;
  Swift::Int v23 = v21 + v22;
  if (__OFADD__(v21, v22))
  {
    __break(1u);
LABEL_13:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  char v24 = v20;
  type metadata accessor for _NativeDictionary();
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v23))
  {
    sub_10039F8DC((uint64_t)v17);
    if ((v24 & 1) != (v25 & 1)) {
      goto LABEL_13;
    }
  }
  *id v4 = v30;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if ((v24 & 1) == 0)
  {
    sub_1000138C4((uint64_t)&v30);
    id v36 = v17;
    id v26 = v17;
    _NativeDictionary._insert(at:key:value:)();
  }
  swift_bridgeObjectRelease();
  unsigned int v27 = sub_10028083C();
  swift_endAccess();

  sub_100284E0C(v17, v27, 0);
  swift_release();
  return swift_release();
}

uint64_t sub_100288670(uint64_t a1, void *a2)
{
  id v3 = (uint64_t *)(v2 + *a2);
  swift_beginAccess();
  uint64_t v4 = *v3;
  sub_10006F314(0, (unint64_t *)&unk_100484A40);
  _s16P2PActivityStateOMa();
  sub_100296BC4();
  NANBitmap.Channel.operatingClass.getter(v4);
  type metadata accessor for Dictionary.Keys();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  Array.init<A>(_:)();
  sub_100010BCC(&qword_100484A50);
  swift_getWitnessTable();
  Sequence.forEach(_:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100288818(void **a1, void *a2, void *a3)
{
  uint64_t v4 = (void *)*a2;
  uint64_t v5 = *a1;
  uint64_t v6 = (void *)swift_allocObject();
  unint64_t v7 = v4[10];
  v6[2]  = v7;
  unint64_t v30 = v4[11];
  v6[3]  = v30;
  uint64_t v31 = v4[12];
  v6[4]  = v31;
  uint64_t v29 = v4[13];
  v6[5]  = v29;
  uint64_t v32 = v4[14];
  void v6[6] = v32;
  id v8 = v5;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  unint64_t v33 = 0xD000000000000019;
  unint64_t v34 = 0x80000001003DF800;
  id v9 = [v8 uniqueIdentifier];
  v10._countAndFlagsBits  = static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.append(_:)(v10);

  swift_bridgeObjectRelease();
  v11._countAndFlagsBits  = 544175136;
  v11._object  = (void *)0xE400000000000000;
  String.append(_:)(v11);
  id v12 = [v8 peerAddress];
  unint64_t v13 = WiFiMACAddress.wifiAddress.getter();

  v14._countAndFlagsBits  = WiFiAddress.description.getter(v13 & 0xFFFFFFFFFFFFLL);
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  unint64_t v15 = (id *)((char *)a2 + qword_1004845E8);
  swift_beginAccess();
  id v16 = (void *)swift_allocObject();
  void v16[2] = v7;
  v16[3]  = v30;
  void v16[4] = v31;
  void v16[5] = v29;
  v16[6]  = v32;
  v16[7]  = sub_1000138A4;
  v16[8]  = v6;
  isUnique  = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v38 = *v15;
  id v17 = v38;
  *unint64_t v15 = (id)0x8000000000000000;
  sub_10039F8DC((uint64_t)v8);
  uint64_t v19 = v17[2];
  BOOL v20 = (v18 & 1) == 0;
  Swift::Int v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
LABEL_8:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  char v22 = v18;
  sub_10006F314(255, (unint64_t *)&unk_100484A40);
  unint64_t v33 = v7;
  unint64_t v34 = v30;
  uint64_t v35 = v31;
  uint64_t v36 = v29;
  uint64_t v37 = v32;
  _s16P2PActivityStateOMa();
  sub_100296BC4();
  type metadata accessor for _NativeDictionary();
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v21))
  {
    sub_10039F8DC((uint64_t)v8);
    if ((v22 & 1) != (v23 & 1)) {
      goto LABEL_8;
    }
  }
  *unint64_t v15 = v38;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if ((v22 & 1) == 0)
  {
    sub_1000138C4((uint64_t)&v33);
    unint64_t v38 = v8;
    id v24 = v8;
    _NativeDictionary._insert(at:key:value:)();
  }
  swift_bridgeObjectRelease();
  unsigned int v25 = sub_1002802AC(a3, 0xD000000000000019, 0x80000001003DF800);
  swift_endAccess();

  swift_bridgeObjectRelease();
  sub_100284E0C(v8, v25, 0);
  swift_release();
  return swift_release();
}

void sub_100288C10(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  unint64_t v7 = (void *)((char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v8 = OS_dispatch_queue.p2p.unsafeMutableAddressor();
  id v9 = (void *)*v8;
  *unint64_t v7 = *v8;
  (*(void (**)(uint64_t *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = v9;
  LOBYTE(v9)  = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v5 + 8))(v7, v4);
  if (v9)
  {
    v19[5]  = a1;
    swift_beginAccess();
    sub_10006F314(255, (unint64_t *)&unk_100484A40);
    uint64_t v11 = *(void *)(v3 + 112);
    long long v12 = *(_OWORD *)(v3 + 96);
    long long v24 = *(_OWORD *)(v3 + 80);
    long long v25 = v12;
    uint64_t v26 = v11;
    _s16P2PActivityStateOMa();
    sub_100296BC4();
    type metadata accessor for Dictionary();
    Dictionary.removeValue(forKey:)();
    swift_endAccess();
    unint64_t v13 = *((void *)&v21 + 1);
    if (*((void *)&v21 + 1) >> 8 != 0xFFFFFFFFLL)
    {
      long long v14 = v20;
      uint64_t v15 = v21;
      uint64_t v16 = v22;
      unsigned __int8 v17 = v23;
      long long v24 = v20;
      long long v25 = v21;
      uint64_t v26 = v22;
      unsigned __int8 v27 = v23;
      if (*((void *)&v21 + 1) >> 62 == 1)
      {
        id v18 = a1;
        sub_1002973DC(v14, *((uint64_t *)&v14 + 1), v15, v13, v16, v17);
        sub_1002971CC(v14, (uint64_t)v18);

        sub_1002973F0(v14, *((uint64_t *)&v14 + 1), v15, v13, v16, v17);
      }
      sub_10028083C();
      sub_100010164(v24, *((uint64_t *)&v24 + 1), v25, *((unint64_t *)&v25 + 1), v26, v27);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100288E9C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (void *)*v2;
  uint64_t v5 = (void *)*v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v20 = *(void *)(v6 - 8);
  __chkstk_darwin();
  id v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v19 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v12 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v13 = swift_allocObject();
  swift_weakInit();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16)  = v4[10];
  *(void *)(v14 + 24)  = v4[11];
  *(_OWORD *)(v14 + 32)  = *((_OWORD *)v5 + 6);
  *(void *)(v14 + 48)  = v4[14];
  *(void *)(v14 + 56)  = v13;
  *(void *)(v14 + 64)  = a1;
  aBlock[4]  = sub_1002971B8;
  aBlock[5]  = v14;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256;
  aBlock[2]  = sub_10000E5D0;
  aBlock[3]  = &unk_100468260;
  uint64_t v15 = _Block_copy(aBlock);
  id v16 = v12;
  swift_retain();
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  long long v21 = _swiftEmptyArrayStorage;
  sub_10001011C((unint64_t *)&qword_1004807A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100010BCC((uint64_t *)&unk_10047D0F0);
  sub_10000F9CC((unint64_t *)&qword_1004807B0, (uint64_t *)&unk_10047D0F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v19);
  swift_release();
  return swift_release();
}

uint64_t sub_100289224(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    *(void *)(result + qword_1004887B8)  = a2;
    swift_bridgeObjectRetain();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1002892A4(uint64_t a1)
{
  int v3 = a1;
  uint64_t v4 = (void *)*v1;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  id v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DispatchQoS();
  uint64_t result = __chkstk_darwin();
  long long v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v3)
  {
    uint64_t v35 = v10;
    uint64_t v36 = result;
    uint64_t v31 = v12;
    sub_10000F000();
    uint64_t v13 = swift_allocError();
    *(_OWORD *)uint64_t v14 = xmmword_1003B2F00;
    *(unsigned char *)(v14 + 16)  = 1;
    swift_beginAccess();
    uint64_t v33 = v5;
    uint64_t v34 = v6;
    id v16 = (void **)v4[10];
    uint64_t v15 = v4[11];
    unsigned __int8 v17 = (uint64_t (*)(uint64_t))v4[12];
    uint64_t v18 = (void *)v4[13];
    uint64_t v32 = v8;
    uint64_t v19 = (uint64_t (*)())v4[14];
    aBlock  = v16;
    uint64_t v38 = v15;
    uint64_t v39 = v17;
    char v40 = v18;
    unint64_t v41 = v19;
    uint64_t v20 = (void *)_s16P2PActivityStateOMa();
    uint64_t v21 = sub_100011EC0(a1, v13, 1, v20);
    swift_endAccess();
    swift_errorRelease();
    sub_1002892A4(v21);
    uint64_t v22 = (void *)*OS_dispatch_queue.awdl.unsafeMutableAddressor();
    uint64_t v23 = swift_allocObject();
    swift_weakInit();
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16)  = v16;
    *(void *)(v24 + 24)  = v15;
    *(void *)(v24 + 32)  = v17;
    *(void *)(v24 + 40)  = v18;
    *(void *)(v24 + 48)  = v19;
    *(void *)(v24 + 56)  = v23;
    *(unsigned char *)(v24 + 64)  = a1;
    unint64_t v41 = sub_10029707C;
    uint64_t v42 = v24;
    aBlock  = _NSConcreteStackBlock;
    uint64_t v38 = 1107296256;
    uint64_t v39 = sub_10000E5D0;
    char v40 = &unk_1004681C0;
    long long v25 = _Block_copy(&aBlock);
    id v26 = v22;
    swift_retain();
    unsigned __int8 v27 = v31;
    static DispatchQoS.unspecified.getter();
    id v43 = _swiftEmptyArrayStorage;
    sub_10001011C((unint64_t *)&qword_1004807A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100010BCC((uint64_t *)&unk_10047D0F0);
    sub_10000F9CC((unint64_t *)&qword_1004807B0, (uint64_t *)&unk_10047D0F0);
    uint64_t v29 = v32;
    uint64_t v28 = v33;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v25);

    (*(void (**)(char *, uint64_t))(v34 + 8))(v29, v28);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v27, v36);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1002896A8(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v47 = a5;
  uint64_t v48 = a6;
  uint64_t v45 = a3;
  uint64_t v46 = a4;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v13 = &v37[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = type metadata accessor for DispatchQoS();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin();
  id v49 = &v37[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return result;
  }
  uint64_t v38 = v13;
  uint64_t v40 = a1;
  uint64_t v18 = sub_1000112DC((uint64_t (*)(void))sub_10001132C);
  uint64_t v43 = v11;
  uint64_t v44 = v10;
  uint64_t v41 = v15;
  uint64_t v42 = v14;
  uint64_t v39 = a7;
  if (a2 == 1)
  {
    if (v18)
    {
      sub_100374888();
LABEL_7:
      swift_release();
    }
  }
  else if (v18)
  {
    sub_1003749A4();
    goto LABEL_7;
  }
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 136315138;
    aBlock[0]  = v22;
    if (a2 == 1) {
      uint64_t v23 = 0x65646E6570737573;
    }
    else {
      uint64_t v23 = 0x64656D75736572;
    }
    if (a2 == 1) {
      unint64_t v24 = 0xE900000000000064;
    }
    else {
      unint64_t v24 = 0xE700000000000000;
    }
    uint64_t v50 = (void *)sub_100010680(v23, v24, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Successfully %s P2P activity", v21, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v25 = v48;
  }
  else
  {

    uint64_t v25 = v48;
  }
  id v26 = v38;
  uint64_t v28 = v46;
  uint64_t v27 = v47;
  uint64_t v29 = v45;
  uint64_t v30 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16)  = v29;
  *(void *)(v31 + 24)  = v28;
  *(void *)(v31 + 32)  = v27;
  *(void *)(v31 + 40)  = v25;
  uint64_t v32 = v40;
  *(void *)(v31 + 48)  = v39;
  *(void *)(v31 + 56)  = v32;
  *(unsigned char *)(v31 + 64)  = a2;
  *(void *)(v31 + 72)  = 0;
  *(unsigned char *)(v31 + 80)  = 0;
  aBlock[4]  = (uint64_t)sub_1002970D4;
  aBlock[5]  = v31;
  aBlock[0]  = (uint64_t)_NSConcreteStackBlock;
  aBlock[1]  = 1107296256;
  aBlock[2]  = (uint64_t)sub_10000E5D0;
  aBlock[3]  = (uint64_t)&unk_100468210;
  uint64_t v33 = _Block_copy(aBlock);
  id v34 = v30;
  swift_retain();
  sub_100012718(0, 0);
  uint64_t v35 = v49;
  static DispatchQoS.unspecified.getter();
  uint64_t v50 = _swiftEmptyArrayStorage;
  sub_10001011C((unint64_t *)&qword_1004807A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100010BCC((uint64_t *)&unk_10047D0F0);
  sub_10000F9CC((unint64_t *)&qword_1004807B0, (uint64_t *)&unk_10047D0F0);
  uint64_t v36 = v44;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v33);
  swift_release();

  sub_10001270C(0, 0);
  (*(void (**)(unsigned char *, uint64_t))(v43 + 8))(v26, v36);
  (*(void (**)(unsigned char *, uint64_t))(v41 + 8))(v35, v42);
  return swift_release();
}

uint64_t sub_100289DF0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_beginAccess();
    id v8 = (void *)_s16P2PActivityStateOMa();
    uint64_t v9 = sub_100011E40(a2, a3, a4 & 1, v8);
    swift_endAccess();
    sub_1002892A4(v9);
    return swift_release();
  }
  return result;
}

uint64_t sub_100289EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16)  = a2;
  *(void *)(v11 + 24)  = a3;
  swift_beginAccess();
  swift_retain();
  uint64_t v12 = _s16P2PActivityStateOMa();
  uint64_t v13 = a6(a1, a5, v11, 1, v12);
  swift_endAccess();
  swift_release();
  return sub_1002892A4(v13);
}

uint64_t sub_10028A024(void *a1)
{
  swift_beginAccess();
  _s16P2PActivityStateOMa();
  uint64_t v2 = sub_1002802AC(a1, 0x69736E6570737573, 0xEA00000000006E6FLL);
  swift_endAccess();
  return sub_1002892A4(v2);
}

uint64_t sub_10028A118()
{
  int64_t v1 = (uint64_t *)(v0 + qword_1004845F8);
  swift_beginAccess();
  uint64_t v2 = *v1;
  type metadata accessor for WiFiP2PSPITransactionType(0);
  _s16P2PActivityStateOMa();
  sub_10001011C(&qword_100484A58, type metadata accessor for WiFiP2PSPITransactionType);
  NANBitmap.Channel.operatingClass.getter(v2);
  type metadata accessor for Dictionary.Keys();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  Array.init<A>(_:)();
  sub_100010BCC(&qword_100484A60);
  swift_getWitnessTable();
  Sequence.forEach(_:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10028A2E8(Swift::UInt *a1, void *a2, void *a3)
{
  uint64_t v4 = (void *)*a2;
  Swift::UInt v5 = *a1;
  uint64_t v6 = (void *)swift_allocObject();
  uint64_t v7 = v4[10];
  v6[2]  = v7;
  unint64_t v28 = v4[11];
  v6[3]  = v28;
  uint64_t v8 = v4[12];
  v6[4]  = v8;
  uint64_t v9 = v4[13];
  v6[5]  = v9;
  uint64_t v10 = v4[14];
  void v6[6] = v10;
  uint64_t v29 = 0;
  unint64_t v30 = 0xE000000000000000;
  v11._countAndFlagsBits  = 0x746361736E617274;
  v11._object  = (void *)0xEC000000206E6F69;
  String.append(_:)(v11);
  Swift::UInt v34 = v5;
  type metadata accessor for WiFiP2PSPITransactionType(0);
  sub_10001011C(qword_100484BE0, type metadata accessor for WiFiP2PSPITransactionType);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  uint64_t v12 = (void *)((char *)a2 + qword_1004845F8);
  swift_beginAccess();
  uint64_t v13 = (void *)swift_allocObject();
  v13[2]  = v7;
  v13[3]  = v28;
  v13[4]  = v8;
  v13[5]  = v9;
  v13[6]  = v10;
  v13[7]  = sub_1000138A4;
  v13[8]  = v6;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  Swift::UInt v35 = *v12;
  Swift::UInt v15 = v35;
  *uint64_t v12 = 0x8000000000000000;
  Swift::UInt v27 = v5;
  sub_100010614(v5);
  uint64_t v17 = *(void *)(v15 + 16);
  BOOL v18 = (v16 & 1) == 0;
  BOOL v19 = __OFADD__(v17, v18);
  Swift::Int v20 = v17 + v18;
  if (v19)
  {
    __break(1u);
LABEL_8:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  char v21 = v16;
  uint64_t v29 = v7;
  unint64_t v30 = v28;
  uint64_t v31 = v8;
  uint64_t v32 = v9;
  uint64_t v33 = v10;
  Swift::Int v22 = v20;
  _s16P2PActivityStateOMa();
  sub_10001011C(&qword_100484A58, type metadata accessor for WiFiP2PSPITransactionType);
  type metadata accessor for _NativeDictionary();
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v22))
  {
    sub_100010614(v27);
    if ((v21 & 1) != (v23 & 1)) {
      goto LABEL_8;
    }
  }
  *uint64_t v12 = v35;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if ((v21 & 1) == 0)
  {
    sub_1000138C4((uint64_t)&v29);
    Swift::UInt v35 = v27;
    _NativeDictionary._insert(at:key:value:)();
  }
  swift_bridgeObjectRelease();
  int v24 = sub_1002802AC(a3, 0, 0xE000000000000000);
  swift_endAccess();
  swift_bridgeObjectRelease();
  sub_10000FA10(v27, v24);
  swift_release();
  return swift_release();
}

uint64_t sub_10028A698()
{
  uint64_t v1 = v0;
  swift_beginAccess();
  _s16P2PActivityStateOMa();
  uint64_t v2 = sub_10028083C();
  swift_endAccess();
  sub_1002892A4(v2);
  int v3 = (uint64_t *)(v1 + qword_1004845E0);
  swift_beginAccess();
  uint64_t v4 = *v3;
  sub_10006F314(0, (unint64_t *)&unk_100484A40);
  sub_100296BC4();
  NANBitmap.Channel.operatingClass.getter(v4);
  type metadata accessor for Dictionary.Keys();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  Array.init<A>(_:)();
  sub_100010BCC(&qword_100484A50);
  swift_getWitnessTable();
  Sequence.forEach(_:)();
  swift_bridgeObjectRelease();
  Swift::UInt v5 = (void *)(v1 + qword_1004845E8);
  swift_beginAccess();
  NANBitmap.Channel.operatingClass.getter(*v5);
  swift_bridgeObjectRetain();
  Array.init<A>(_:)();
  Sequence.forEach(_:)();
  swift_bridgeObjectRelease();
  uint64_t v6 = (uint64_t *)(v1 + qword_1004845F8);
  swift_beginAccess();
  uint64_t v7 = *v6;
  type metadata accessor for WiFiP2PSPITransactionType(0);
  sub_10001011C(&qword_100484A58, type metadata accessor for WiFiP2PSPITransactionType);
  NANBitmap.Channel.operatingClass.getter(v7);
  type metadata accessor for Dictionary.Keys();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  Array.init<A>(_:)();
  sub_100010BCC(&qword_100484A60);
  swift_getWitnessTable();
  Sequence.forEach(_:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10028AA3C(void **a1, void *a2)
{
  int v3 = (void *)*a2;
  id v26 = *a1;
  uint64_t v4 = (void *)swift_allocObject();
  uint64_t v5 = v3[10];
  unsigned char v4[2] = v5;
  uint64_t v6 = v3[11];
  v4[3]  = v6;
  uint64_t v7 = v3[12];
  v4[4]  = v7;
  uint64_t v8 = v3[13];
  v4[5]  = v8;
  uint64_t v9 = v3[14];
  v4[6]  = v9;
  uint64_t v10 = (void **)((char *)a2 + qword_1004845E0);
  swift_beginAccess();
  Swift::String v11 = (void *)swift_allocObject();
  uint64_t v23 = v5;
  unsigned char v11[2] = v5;
  v11[3]  = v6;
  void v11[4] = v7;
  v11[5]  = v8;
  v11[6]  = v9;
  v11[7]  = sub_1000138A4;
  v11[8]  = v4;
  uint64_t v12 = v26;
  isUnique  = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v28 = *v10;
  uint64_t v13 = v28;
  char *v10 = (void *)0x8000000000000000;
  uint64_t v25 = v12;
  sub_10039F8DC((uint64_t)v12);
  uint64_t v14 = v13[2];
  char v24 = v15;
  BOOL v16 = (v15 & 1) == 0;
  Swift::Int v17 = v14 + v16;
  if (__OFADD__(v14, v16))
  {
    __break(1u);
LABEL_8:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  sub_10006F314(255, (unint64_t *)&unk_100484A40);
  v27[0]  = v23;
  v27[1]  = v6;
  v27[2]  = v7;
  v27[3]  = v8;
  v27[4]  = v9;
  _s16P2PActivityStateOMa();
  sub_100296BC4();
  type metadata accessor for _NativeDictionary();
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v17))
  {
    sub_10039F8DC((uint64_t)v25);
    if ((v24 & 1) != (v18 & 1)) {
      goto LABEL_8;
    }
  }
  char *v10 = v28;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if ((v24 & 1) == 0)
  {
    sub_1000138C4((uint64_t)v27);
    unint64_t v28 = v25;
    BOOL v19 = v25;
    _NativeDictionary._insert(at:key:value:)();
  }
  swift_bridgeObjectRelease();
  unsigned int v20 = sub_10028083C();
  swift_endAccess();

  sub_100282FD4(v25, v20);
  swift_release();
  return swift_release();
}

uint64_t sub_10028AD40(void **a1, void *a2)
{
  int v3 = (void *)*a2;
  id v26 = *a1;
  uint64_t v4 = (void *)swift_allocObject();
  uint64_t v5 = v3[10];
  unsigned char v4[2] = v5;
  uint64_t v6 = v3[11];
  v4[3]  = v6;
  uint64_t v7 = v3[12];
  v4[4]  = v7;
  uint64_t v8 = v3[13];
  v4[5]  = v8;
  uint64_t v9 = v3[14];
  v4[6]  = v9;
  uint64_t v10 = (void **)((char *)a2 + qword_1004845E8);
  swift_beginAccess();
  Swift::String v11 = (void *)swift_allocObject();
  uint64_t v23 = v5;
  unsigned char v11[2] = v5;
  v11[3]  = v6;
  void v11[4] = v7;
  v11[5]  = v8;
  v11[6]  = v9;
  v11[7]  = sub_1000138A4;
  v11[8]  = v4;
  uint64_t v12 = v26;
  isUnique  = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v28 = *v10;
  uint64_t v13 = v28;
  char *v10 = (void *)0x8000000000000000;
  uint64_t v25 = v12;
  sub_10039F8DC((uint64_t)v12);
  uint64_t v14 = v13[2];
  char v24 = v15;
  BOOL v16 = (v15 & 1) == 0;
  Swift::Int v17 = v14 + v16;
  if (__OFADD__(v14, v16))
  {
    __break(1u);
LABEL_8:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  sub_10006F314(255, (unint64_t *)&unk_100484A40);
  v27[0]  = v23;
  v27[1]  = v6;
  v27[2]  = v7;
  v27[3]  = v8;
  v27[4]  = v9;
  _s16P2PActivityStateOMa();
  sub_100296BC4();
  type metadata accessor for _NativeDictionary();
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v17))
  {
    sub_10039F8DC((uint64_t)v25);
    if ((v24 & 1) != (v18 & 1)) {
      goto LABEL_8;
    }
  }
  char *v10 = v28;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if ((v24 & 1) == 0)
  {
    sub_1000138C4((uint64_t)v27);
    unint64_t v28 = v25;
    BOOL v19 = v25;
    _NativeDictionary._insert(at:key:value:)();
  }
  swift_bridgeObjectRelease();
  unsigned int v20 = sub_10028083C();
  swift_endAccess();

  sub_100284E0C(v25, v20, 0);
  swift_release();
  return swift_release();
}

uint64_t sub_10028B048(Swift::UInt *a1, void *a2)
{
  int v3 = (void *)*a2;
  Swift::UInt v24 = *a1;
  uint64_t v4 = (void *)swift_allocObject();
  uint64_t v5 = v3[10];
  unsigned char v4[2] = v5;
  uint64_t v6 = v3[11];
  v4[3]  = v6;
  uint64_t v7 = v3[12];
  v4[4]  = v7;
  uint64_t v8 = v3[13];
  v4[5]  = v8;
  uint64_t v9 = v3[14];
  v4[6]  = v9;
  uint64_t v10 = (void *)((char *)a2 + qword_1004845F8);
  swift_beginAccess();
  Swift::String v11 = (void *)swift_allocObject();
  unsigned char v11[2] = v5;
  v11[3]  = v6;
  void v11[4] = v7;
  v11[5]  = v8;
  v11[6]  = v9;
  v11[7]  = sub_1000138A4;
  v11[8]  = v4;
  isUnique  = swift_isUniquelyReferenced_nonNull_native();
  Swift::UInt v26 = *v10;
  Swift::UInt v12 = v26;
  Swift::UInt *v10 = 0x8000000000000000;
  sub_100010614(v24);
  uint64_t v13 = *(void *)(v12 + 16);
  char v23 = v14;
  BOOL v15 = (v14 & 1) == 0;
  BOOL v16 = __OFADD__(v13, v15);
  Swift::Int v17 = v13 + v15;
  if (v16)
  {
    __break(1u);
LABEL_8:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  capacity  = v17;
  type metadata accessor for WiFiP2PSPITransactionType(255);
  v25[0]  = v5;
  v25[1]  = v6;
  _DWORD v25[2] = v7;
  v25[3]  = v8;
  v25[4]  = v9;
  _s16P2PActivityStateOMa();
  sub_10001011C(&qword_100484A58, type metadata accessor for WiFiP2PSPITransactionType);
  type metadata accessor for _NativeDictionary();
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, capacity))
  {
    sub_100010614(v24);
    if ((v23 & 1) != (v18 & 1)) {
      goto LABEL_8;
    }
  }
  Swift::UInt *v10 = v26;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if ((v23 & 1) == 0)
  {
    sub_1000138C4((uint64_t)v25);
    Swift::UInt v26 = v24;
    _NativeDictionary._insert(at:key:value:)();
  }
  swift_bridgeObjectRelease();
  int v19 = sub_10028083C();
  swift_endAccess();
  sub_10000FA10(v24, v19);
  swift_release();
  return swift_release();
}

uint64_t sub_10028B348()
{
  uint64_t v1 = v0 + qword_1004887B0;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_weakDestroy();
  sub_100298728(v0 + qword_1004887C8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100010164(*(void *)(v0 + qword_1004845F0), *(void *)(v0 + qword_1004845F0 + 8), *(void *)(v0 + qword_1004845F0 + 16), *(void *)(v0 + qword_1004845F0 + 24), *(void *)(v0 + qword_1004845F0 + 32), *(unsigned char *)(v0 + qword_1004845F0 + 40));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10028B44C()
{
  sub_10028B348();

  return swift_deallocClassInstance();
}

uint64_t _s22P2PActivityCoordinatorCMa()
{
  return swift_getGenericMetadata();
}

uint64_t sub_10028B4BC()
{
  return swift_initClassMetadata2();
}

uint64_t sub_10028B510()
{
  return sub_100281254();
}

void sub_10028B534(void *a1)
{
}

uint64_t sub_10028B558(uint64_t a1)
{
  return sub_100288E9C(a1);
}

uint64_t (*sub_10028B57C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6))(uint64_t a1)
{
  swift_unownedRetainStrong();
  Swift::UInt v12 = (void *)swift_allocObject();
  v12[2]  = a1;
  v12[3]  = a2;
  v12[4]  = a5;
  v12[5]  = a6;
  v12[6]  = a3;
  v12[7]  = a4;
  id v13 = a6;
  swift_retain();
  sub_100037FF4(a3);
  return sub_100298484;
}

uint64_t sub_10028B624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v27 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v30 = *(void *)(v27 - 8);
  __chkstk_darwin();
  Swift::UInt v26 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  uint64_t v28 = *(void *)(v15 - 8);
  uint64_t v29 = v15;
  __chkstk_darwin();
  Swift::Int v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v18 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
  int v19 = (void *)swift_allocObject();
  long long v19[2] = a1;
  v19[3]  = a2;
  v19[4]  = a3;
  v19[5]  = a4;
  v19[6]  = a5;
  v19[7]  = a6;
  v19[8]  = a7;
  aBlock[4]  = sub_1002984F4;
  aBlock[5]  = v19;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256;
  aBlock[2]  = sub_10000E5D0;
  aBlock[3]  = &unk_1004687B0;
  unsigned int v20 = _Block_copy(aBlock);
  id v21 = v18;
  swift_errorRetain();
  swift_retain();
  swift_retain();
  id v22 = a5;
  sub_100037FF4(a6);
  static DispatchQoS.unspecified.getter();
  uint64_t v31 = _swiftEmptyArrayStorage;
  sub_10001011C((unint64_t *)&qword_1004807A0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100010BCC((uint64_t *)&unk_10047D0F0);
  sub_10000F9CC((unint64_t *)&qword_1004807B0, (uint64_t *)&unk_10047D0F0);
  char v23 = v26;
  uint64_t v24 = v27;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v30 + 8))(v23, v24);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v17, v29);
  return swift_release();
}

uint64_t sub_10028B93C(uint64_t a1, void (*a2)(unint64_t), uint64_t a3, void *a4, void *a5, void (*a6)(void))
{
  if (a1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    if (!a6)
    {
LABEL_4:
      sub_100011E30((uint64_t)v6);
      return sub_100011E30((uint64_t)v7);
    }
LABEL_3:
    a6();
    goto LABEL_4;
  }
  Swift::String v11 = (void *)*a4;
  uint64_t v32 = a6;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16)  = a4;
  *(void *)(v12 + 24)  = a5;
  id v13 = (void *)((char *)a4 + qword_1004887D0);
  swift_beginAccess();
  uint64_t v14 = (void *)swift_allocObject();
  void v14[2] = v11[10];
  v14[3]  = v11[11];
  v14[4]  = v11[12];
  v14[5]  = v11[13];
  v14[6]  = v11[14];
  v14[7]  = sub_100298548;
  v14[8]  = v12;
  id v15 = a5;
  swift_retain();
  isUnique  = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v16 = *v13;
  uint64_t v34 = *v13;
  *id v13 = 0x8000000000000000;
  uint64_t v30 = v15;
  unint64_t v29 = sub_100011CE0((uint64_t)v15);
  uint64_t v17 = *(void *)(v16 + 16);
  char v33 = v18;
  BOOL v19 = (v18 & 1) == 0;
  Swift::Int v20 = v17 + v19;
  if (__OFADD__(v17, v19))
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for XPCSession(255);
    _s22P2PActivityCoordinatorC25AirPlayActivityTranslatorVMa();
    sub_10001011C(&qword_100484BC8, (void (*)(uint64_t))type metadata accessor for XPCSession);
    type metadata accessor for _NativeDictionary();
    unint64_t v21 = v29;
    if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v20)) {
      goto LABEL_9;
    }
    unint64_t v22 = sub_100011CE0((uint64_t)v30);
    if ((v33 & 1) == (v23 & 1))
    {
      unint64_t v21 = v22;
LABEL_9:
      *id v13 = v34;
      swift_bridgeObjectRelease();
      uint64_t v24 = *v13;
      if (v33)
      {
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v25 = swift_bridgeObjectRetain();
        ((void (*)(uint64_t))v14[7])(v25);
        id v26 = v30;
        _NativeDictionary._insert(at:key:value:)();
      }
      uint64_t v27 = *(void *)(v24 + 56);
      swift_bridgeObjectRelease();
      a2(v27 + 32 * v21);
      swift_endAccess();

      uint64_t v7 = sub_1002985A4;
      uint64_t v6 = sub_100298548;
      a6  = v32;
      if (!v32) {
        goto LABEL_4;
      }
      goto LABEL_3;
    }
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_10028BC74(void *a1, int a2, void (*a3)(void), uint64_t a4, NSObject *a5)
{
  uint64_t v6 = v5;
  os_log_t v193 = a5;
  char v195 = a3;
  uint64_t v196 = a4;
  LODWORD(v197)  = a2;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v191 = *(void *)(v8 - 8);
  unint64_t v192 = v8;
  __chkstk_darwin();
  uint64_t v10 = (char *)v184 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v12 = (char *)v184 - v11;
  __chkstk_darwin();
  uint64_t v14 = (char *)v184 - v13;
  sub_10006F314(0, &qword_100484BD0);
  id v15 = [a1 peerAddress];
  id v16 = [self zeroAddress];
  char v17 = static NSObject.== infix(_:_:)();

  if ((v17 & 1) == 0)
  {
    uint64_t v37 = v12;
    uint64_t v38 = v10;
    id v39 = [a1 peerAddress];
    unint64_t v40 = WiFiMACAddress.wifiAddress.getter();

    char v194 = *(char **)(v6 + 24);
    uint64_t v41 = *((void *)v194 + 2);
    uint64_t v42 = a1;
    if (v197)
    {
      if (v41)
      {
        unint64_t v43 = v40 & 0xFFFFFFFFFFFFLL;
        unint64_t v44 = sub_100031214(v40 & 0xFFFFFFFFFFFFLL);
        if (v45)
        {
          id v46 = *(id *)(*((void *)v194 + 7) + 8 * v44);
          if ([a1 options] == v46)
          {
            uint64_t v48 = *(void *)v6;
            uint64_t v47 = *(void **)(v6 + 8);
            swift_unownedRetainStrong();
            swift_unownedRetain();
            swift_unownedRetain();
            id v49 = v47;
            swift_bridgeObjectRetain();
            swift_unownedRelease();
            uint64_t v50 = v191;
            unint64_t v51 = v37;
            unint64_t v52 = v37;
            unint64_t v53 = v192;
            (*(void (**)(char *, uint64_t, unint64_t))(v191 + 16))(v52, v48 + qword_1004887B0, v192);
            swift_release();
            id v54 = a1;
            swift_unownedRetain();
            id v55 = v49;
            id v56 = v54;
            swift_unownedRetain();
            id v57 = v55;
            swift_bridgeObjectRetain();
            id v58 = Logger.logObject.getter();
            os_log_type_t v59 = static os_log_type_t.default.getter();
            int v60 = v59;
            if (os_log_type_enabled(v58, v59))
            {
              uint64_t v61 = swift_slowAlloc();
              id v197 = v51;
              uint64_t v62 = v61;
              id v63 = (void *)swift_slowAlloc();
              unint64_t v189 = v63;
              os_log_t v193 = (os_log_t)swift_slowAlloc();
              uint64_t v198 = (uint64_t)v57;
              v199[0]  = (uint64_t)v193;
              *(_DWORD *)uint64_t v62 = 138412802;
              os_log_t v190 = v58;
              id v64 = v57;
              LODWORD(v188)  = v60;
              id v65 = v64;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *id v63 = v57;
              swift_unownedRelease();
              swift_bridgeObjectRelease();

              swift_unownedRelease();
              *(_WORD *)(v62 + 12)  = 2080;
              id v66 = [v56 uniqueIdentifier];
              uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              id v68 = v57;
              unint64_t v70 = v69;

              uint64_t v198 = sub_100010680(v67, v70, v199);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              id v57 = v68;
              swift_bridgeObjectRelease();
              *(_WORD *)(v62 + 22)  = 2080;
              uint64_t v71 = WiFiAddress.description.getter(v43);
              uint64_t v198 = sub_100010680(v71, v72, v199);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              os_log_t v73 = v190;
              _os_log_impl((void *)&_mh_execute_header, v190, (os_log_type_t)v188, "%@ setting traffic registration for %s to %s but already exists, returning success", (uint8_t *)v62, 0x20u);
              sub_100010BCC(&qword_10047CC30);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              (*(void (**)(id, unint64_t))(v191 + 8))(v197, v192);
            }
            else
            {
              swift_unownedRelease();
              swift_bridgeObjectRelease();

              swift_unownedRelease();
              (*(void (**)(void *, unint64_t))(v50 + 8))(v51, v53);
            }
            v195(0);
            swift_unownedRelease();
            swift_bridgeObjectRelease();

            return;
          }
        }
      }
      id v197 = (id)(v40 >> 40);
      unint64_t v192 = HIDWORD(v40);
      uint64_t v89 = *(void *)v6;
      swift_unownedRetainStrong();
      uint64_t v90 = *(void **)(v6 + 8);
      uint64_t v91 = swift_allocObject();
      char v93 = v192;
      os_log_t v92 = v193;
      isa  = v193[2].isa;
      Class v95 = v193[3].isa;
      *(void *)(v91 + 16)  = isa;
      *(void *)(v91 + 24)  = v95;
      Class v96 = v92[4].isa;
      Class v97 = v92[5].isa;
      *(void *)(v91 + 32)  = v96;
      *(void *)(v91 + 40)  = v97;
      Class v98 = v92[6].isa;
      *(void *)(v91 + 48)  = v98;
      *(_WORD *)(v91 + 56)  = v40;
      *(unsigned char *)(v91 + 58)  = BYTE2(v40);
      *(unsigned char *)(v91 + 59)  = BYTE3(v40);
      *(unsigned char *)(v91 + 60)  = v93;
      *(unsigned char *)(v91 + 61)  = (_BYTE)v197;
      *(void *)(v91 + 64)  = a1;
      Class v181 = v97;
      uint64_t v182 = (uint64_t)v98;
      unint64_t v179 = v95;
      Class v180 = v96;
      uint64_t v178 = isa;
      uint64_t v99 = sub_10028B57C((uint64_t)sub_100298318, v91, (uint64_t)v195, v196, v89, v90);
      uint64_t v101 = v100;
      id v102 = v90;
      id v103 = v42;
      swift_bridgeObjectRetain();
      id v88 = v102;
      swift_unownedRetain();
      swift_release();
      swift_unownedRelease();
      swift_bridgeObjectRelease();

      sub_1002864C0(v103, v88, (uint64_t)v99, v101);
    }
    else
    {
      if (!v41 || (sub_100031214(v40 & 0xFFFFFFFFFFFFLL), (v74 & 1) == 0))
      {
        uint64_t v105 = *(void *)v6;
        BOOL v104 = *(void **)(v6 + 8);
        swift_unownedRetainStrong();
        swift_unownedRetain();
        swift_bridgeObjectRetain();
        swift_unownedRetain();
        id v106 = v104;
        swift_unownedRelease();
        uint64_t v108 = v191;
        unint64_t v107 = v192;
        (*(void (**)(char *, uint64_t, unint64_t))(v191 + 16))(v38, v105 + qword_1004887B0, v192);
        swift_release();
        id v109 = v42;
        swift_bridgeObjectRetain();
        swift_unownedRetain();
        id v110 = v106;
        uint64_t v111 = v108;
        id v112 = v109;
        swift_bridgeObjectRetain();
        swift_unownedRetain();
        id v113 = v110;
        uint64_t v114 = Logger.logObject.getter();
        os_log_type_t v115 = static os_log_type_t.default.getter();
        int v116 = v115;
        if (os_log_type_enabled(v114, v115))
        {
          uint64_t v117 = swift_slowAlloc();
          os_log_t v193 = v114;
          uint64_t v118 = v117;
          uint64_t v119 = (void *)swift_slowAlloc();
          unint64_t v189 = v119;
          id v197 = (id)swift_slowAlloc();
          uint64_t v198 = (uint64_t)v113;
          v199[0]  = (uint64_t)v197;
          *(_DWORD *)uint64_t v118 = 138412802;
          LODWORD(v190)  = v116;
          Class v188 = (Class)v38;
          id v120 = v113;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v119 = v113;
          swift_unownedRelease();
          swift_bridgeObjectRelease();

          swift_unownedRelease();
          swift_bridgeObjectRelease();

          *(_WORD *)(v118 + 12)  = 2080;
          id v121 = [v112 uniqueIdentifier];
          uint64_t v122 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v124 = v123;

          uint64_t v198 = sub_100010680(v122, v124, v199);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v118 + 22)  = 2080;
          uint64_t v125 = WiFiAddress.description.getter(v40 & 0xFFFFFFFFFFFFLL);
          uint64_t v198 = sub_100010680(v125, v126, v199);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          os_log_t v127 = v193;
          _os_log_impl((void *)&_mh_execute_header, v193, (os_log_type_t)v190, "%@ clearing traffic registration for %s to %s but does not exist, returning success", (uint8_t *)v118, 0x20u);
          sub_100010BCC(&qword_10047CC30);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(Class, unint64_t))(v191 + 8))(v188, v192);
        }
        else
        {
          swift_unownedRelease();
          swift_bridgeObjectRelease();

          swift_unownedRelease();
          swift_bridgeObjectRelease();

          (*(void (**)(char *, unint64_t))(v111 + 8))(v38, v107);
        }
        v195(0);
        swift_unownedRelease();
        swift_bridgeObjectRelease();

        return;
      }
      id v197 = (id)(v40 >> 40);
      unint64_t v192 = HIDWORD(v40);
      uint64_t v75 = *(void *)v6;
      swift_unownedRetainStrong();
      id v76 = *(void **)(v6 + 8);
      uint64_t v77 = swift_allocObject();
      char v79 = v192;
      os_log_t v78 = v193;
      Class v80 = v193[2].isa;
      Class v81 = v193[3].isa;
      *(void *)(v77 + 16)  = v80;
      *(void *)(v77 + 24)  = v81;
      Class v82 = v78[4].isa;
      Class v83 = v78[5].isa;
      *(void *)(v77 + 32)  = v82;
      *(void *)(v77 + 40)  = v83;
      Class v84 = v78[6].isa;
      *(void *)(v77 + 48)  = v84;
      *(_WORD *)(v77 + 56)  = v40;
      *(unsigned char *)(v77 + 58)  = BYTE2(v40);
      *(unsigned char *)(v77 + 59)  = BYTE3(v40);
      *(unsigned char *)(v77 + 60)  = v79;
      *(unsigned char *)(v77 + 61)  = (_BYTE)v197;
      Class v181 = v83;
      uint64_t v182 = (uint64_t)v84;
      unint64_t v179 = v81;
      Class v180 = v82;
      uint64_t v178 = v80;
      long long v85 = sub_10028B57C((uint64_t)sub_1002982DC, v77, (uint64_t)v195, v196, v75, v76);
      uint64_t v87 = v86;
      id v88 = v76;
      swift_unownedRetain();
      swift_bridgeObjectRetain();
      swift_release();
      swift_unownedRelease();
      swift_bridgeObjectRelease();

      sub_100287264(v42, v88, (void (*)(void))v85, v87);
    }
    swift_release();

    goto LABEL_17;
  }
  char v18 = (char)v197;
  char v194 = v14;
  unsigned __int8 v19 = [a1 options];
  if (*(unsigned char *)(v6 + 16) == (v19 & 1))
  {
    v195(0);
    return;
  }
  uint64_t v20 = *(void *)v6;
  unint64_t v21 = *(void **)(v6 + 8);
  unint64_t v22 = (void *)v6;
  if (v19)
  {
    uint64_t v23 = swift_allocObject();
    os_log_t v24 = v193;
    Class v25 = v193[2].isa;
    Class v26 = v193[3].isa;
    *(void *)(v23 + 16)  = v25;
    *(void *)(v23 + 24)  = v26;
    Class v27 = v24[4].isa;
    Class v28 = v24[5].isa;
    *(void *)(v23 + 32)  = v27;
    *(void *)(v23 + 40)  = v28;
    Class v29 = v24[6].isa;
    *(void *)(v23 + 48)  = v29;
    *(unsigned char *)(v23 + 56)  = 1;
    Class v181 = v28;
    uint64_t v182 = (uint64_t)v29;
    unint64_t v179 = v26;
    Class v180 = v27;
    uint64_t v178 = v25;
    uint64_t v30 = sub_10028B57C((uint64_t)sub_100298384, v23, (uint64_t)v195, v196, v20, v21);
    uint64_t v32 = v31;
    swift_unownedRetain();
    id v33 = v21;
    swift_bridgeObjectRetain();
    swift_release();
    swift_unownedRelease();
    swift_bridgeObjectRelease();

    swift_unownedRetainStrong();
    uint64_t v34 = *(void **)(v6 + 8);
    uint64_t v35 = swift_allocObject();
    *(void *)(v35 + 16)  = v30;
    *(void *)(v35 + 24)  = v32;
    id v36 = v34;
    swift_retain();
    sub_10000CFDC(0x11uLL, v36, (uint64_t)sub_100298390, v35);
    swift_release();
    swift_release();

LABEL_17:
    swift_release();
    return;
  }
  unint64_t v128 = a1;
  uint64_t v129 = swift_allocObject();
  os_log_t v130 = v193;
  os_log_t v131 = v193[2].isa;
  os_log_type_t v132 = v193[3].isa;
  *(void *)(v129 + 16)  = v131;
  *(void *)(v129 + 24)  = v132;
  Class v133 = v130[4].isa;
  Class v134 = v130[5].isa;
  *(void *)(v129 + 32)  = v133;
  *(void *)(v129 + 40)  = v134;
  Class v135 = v130[6].isa;
  *(void *)(v129 + 48)  = v135;
  *(unsigned char *)(v129 + 56)  = 0;
  *(void *)(v129 + 64)  = a1;
  Class v187 = v135;
  uint64_t v182 = (uint64_t)v135;
  Class v188 = v134;
  Class v181 = v134;
  unint64_t v189 = v133;
  Class v180 = v133;
  os_log_t v190 = v132;
  unint64_t v179 = v132;
  os_log_t v193 = v131;
  uint64_t v178 = v131;
  uint64_t v136 = sub_10028B57C((uint64_t)sub_100298338, v129, (uint64_t)v195, v196, v20, v21);
  uint64_t v138 = v137;
  swift_unownedRetain();
  id v139 = v21;
  swift_bridgeObjectRetain();
  char v195 = v128;
  swift_release();
  swift_unownedRelease();
  swift_bridgeObjectRelease();

  swift_unownedRetainStrong();
  unint64_t v140 = v22;
  uint64_t v141 = (void *)v22[1];
  uint64_t v142 = swift_allocObject();
  *(void *)(v142 + 16)  = v136;
  *(void *)(v142 + 24)  = v138;
  id v143 = v141;
  uint64_t v196 = v138;
  swift_retain();
  sub_10000D330(0x11uLL, v143, (uint64_t)sub_100298DEC, v142);
  swift_release();

  swift_release();
  if (v18) {
    goto LABEL_17;
  }
  unint64_t v144 = v140;
  uint64_t v146 = *v140;
  uint64_t v145 = (void *)v140[1];
  uint64_t v147 = v144[3];
  swift_unownedRetainStrong();
  swift_unownedRetain();
  swift_unownedRetain();
  id v148 = v145;
  swift_bridgeObjectRetain();
  swift_unownedRelease();
  uint64_t v149 = v191;
  unint64_t v150 = v194;
  (*(void (**)(char *, uint64_t, unint64_t))(v191 + 16))(v194, v146 + qword_1004887B0, v192);
  swift_release();
  swift_unownedRetain();
  id v151 = v148;
  swift_unownedRetain();
  id v152 = v151;
  swift_bridgeObjectRetain();
  uint64_t v153 = v195;
  swift_unownedRetain();
  id v154 = v152;
  swift_bridgeObjectRetain();
  uint64_t v155 = v153;
  swift_unownedRetain();
  id v156 = v154;
  swift_bridgeObjectRetain();
  uint64_t v157 = Logger.logObject.getter();
  os_log_type_t v158 = static os_log_type_t.default.getter();
  BOOL v159 = os_log_type_enabled(v157, v158);
  id v197 = v156;
  if (v159)
  {
    uint64_t v160 = swift_slowAlloc();
    os_log_t v185 = v157;
    uint64_t v161 = v160;
    uint64_t v162 = (void *)swift_slowAlloc();
    v184[2]  = v162;
    uint64_t v186 = swift_slowAlloc();
    uint64_t v198 = (uint64_t)v156;
    v199[0]  = v186;
    *(_DWORD *)uint64_t v161 = 138412802;
    char v195 = (void (*)(void))v144;
    v184[0]  = v155;
    v184[1]  = v199;
    id v163 = v156;
    id v164 = v156;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v162 = v163;
    swift_unownedRelease();
    swift_bridgeObjectRelease();

    swift_unownedRelease();
    *(_WORD *)(v161 + 12)  = 2080;
    id v165 = v184[0];
    id v166 = [v184[0] uniqueIdentifier];
    uint64_t v167 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    LOBYTE(v162)  = v158;
    unint64_t v169 = v168;

    uint64_t v198 = sub_100010680(v167, v169, v199);
    unint64_t v144 = v195;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v161 + 22)  = 2048;
    uint64_t v170 = *(void *)(v147 + 16);
    swift_unownedRelease();
    swift_bridgeObjectRelease();

    uint64_t v198 = v170;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unownedRelease();
    swift_bridgeObjectRelease();

    os_log_t v171 = v185;
    _os_log_impl((void *)&_mh_execute_header, v185, (os_log_type_t)v162, "%@ cleared %s with empty peer address, will clear all (%ld) registrations", (uint8_t *)v161, 0x20u);
    sub_100010BCC(&qword_10047CC30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, unint64_t))(v191 + 8))(v194, v192);
  }
  else
  {
    swift_unownedRelease();

    swift_unownedRelease();
    swift_bridgeObjectRelease();

    swift_unownedRelease();
    swift_bridgeObjectRelease();

    swift_unownedRelease();
    swift_bridgeObjectRelease();

    (*(void (**)(char *, unint64_t))(v149 + 8))(v150, v192);
  }
  uint64_t v172 = v144[3];
  uint64_t v173 = __chkstk_darwin();
  uint64_t v178 = v174;
  unint64_t v179 = v175;
  Class v180 = v176;
  Class v181 = v177;
  uint64_t v182 = v173;
  uint64_t v183 = v144;
  swift_bridgeObjectRetain();
  sub_1003705B8((uint64_t (*)(int *))sub_100298350, (uint64_t)&v184[-8], v172);
  swift_unownedRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
}

uint64_t sub_10028CEDC(uint64_t a1, char a2, uint64_t a3)
{
  *(unsigned char *)(a1 + 16)  = a2;
  id v4 = [*(id *)(*(void *)(a1 + 8) + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection) remoteObjectProxy];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_100010BCC((uint64_t *)&unk_100484AA0);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    [v6 invalidatedActiveTrafficRegistration:a3];
    return swift_unknownObjectRelease();
  }
  return result;
}

void sub_10028CF90(uint64_t a1, void (*a2)(void))
{
  id v3 = [self convertError:a1];
  a2();
}

uint64_t sub_10028D00C(unsigned __int8 *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  uint64_t v10 = a1[5];
  uint64_t v11 = *((void *)a1 + 1);
  uint64_t v28 = a1[1];
  uint64_t v29 = *a1;
  uint64_t v27 = a1[2];
  id v12 = AWDLTrafficRegistrationServiceAirPlay;
  id v13 = WiFiAddress.apiAddress.getter(v29 | (v28 << 8) | (v27 << 16) | (v8 << 24) | (v9 << 32) | (v10 << 40));
  id v14 = [objc_allocWithZone((Class)AWDLTrafficRegistrationConfiguration) initWithUniqueIdentifier:v12 peerAddress:v13];

  id v15 = (char *)a2[1];
  id v16 = *(void **)&v15[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection];
  char v17 = v15;
  id v18 = [v16 remoteObjectProxy];
  _bridgeAnyObjectToAny(_:)();

  swift_unknownObjectRelease();
  sub_100010BCC((uint64_t *)&unk_100484AA0);
  if (swift_dynamicCast())
  {
    [v35 invalidatedActiveTrafficRegistration:v14];
    swift_unknownObjectRelease();
  }
  [v14 setOptions:v11];
  uint64_t v19 = *a2;
  swift_unownedRetainStrong();
  uint64_t v20 = (void *)a2[1];
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16)  = a3;
  *(void *)(v21 + 24)  = a4;
  *(void *)(v21 + 32)  = a5;
  *(void *)(v21 + 40)  = a6;
  *(void *)(v21 + 48)  = a7;
  *(unsigned char *)(v21 + 56)  = v29;
  *(unsigned char *)(v21 + 57)  = v28;
  *(unsigned char *)(v21 + 58)  = v27;
  *(unsigned char *)(v21 + 59)  = v8;
  *(unsigned char *)(v21 + 60)  = v9;
  *(unsigned char *)(v21 + 61)  = v10;
  unint64_t v22 = sub_10028B57C((uint64_t)sub_1002982DC, v21, 0, 0, v19, v20);
  uint64_t v24 = v23;
  id v25 = v20;
  swift_unownedRetain();
  swift_bridgeObjectRetain();
  swift_release();
  swift_unownedRelease();
  swift_bridgeObjectRelease();

  sub_100287264(v14, v25, (void (*)(void))v22, v24);
  swift_release();

  return swift_release();
}

uint64_t sub_10028D2AC(uint64_t a1, uint64_t a2, id a3)
{
  id v5 = [a3 options];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = *(void *)(a1 + 24);
  *(void *)(a1 + 24)  = 0x8000000000000000;
  sub_1002953A8((uint64_t)v5, a2 & 0xFFFFFFFFFFFFLL, isUniquelyReferenced_nonNull_native);
  *(void *)(a1 + 24)  = v8;

  return swift_bridgeObjectRelease();
}

uint64_t sub_10028D33C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_100031214(v3);
  char v6 = v5;
  uint64_t result = swift_bridgeObjectRelease();
  if (v6)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *(void *)(a1 + 24);
    *(void *)(a1 + 24)  = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native) {
      sub_1003A294C();
    }
    sub_1003A05F0(v4, v9);
    *(void *)(a1 + 24)  = v9;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10028D3DC()
{
  swift_release();

  return swift_bridgeObjectRelease();
}

id sub_10028D41C()
{
  uint64_t v1 = v0;
  ObjectType  = (objc_class *)swift_getObjectType();
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  char v6 = (uint64_t *)((char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v8 = (void *)*v7;
  *char v6 = *v7;
  (*(void (**)(uint64_t *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v9 = v8;
  LOBYTE(v8)  = _dispatchPreconditionTest(_:)();
  id result = (id)(*(uint64_t (**)(uint64_t *, uint64_t))(v4 + 8))(v6, v3);
  if (v8)
  {
    uint64_t v11 = *(void **)&v1[OBJC_IVAR____TtC12wifip2pdCore12XPCResponder_session];
    swift_retain();
    id v12 = v11;
    sub_10028A118();
    swift_release();

    v13.receiver  = v1;
    v13.super_class  = ObjectType;
    return [super dealloc];
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10028D58C(void *a1)
{
  id v1 = a1;
  return sub_10028D41C();
}

uint64_t sub_10028D5B4()
{
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t _s23P2PTransactionResponderCMa()
{
  return swift_getGenericMetadata();
}

uint64_t sub_10028D618()
{
  return sub_10028F2DC();
}

uint64_t sub_10028D628()
{
  return swift_release();
}

id sub_10028D638()
{
  id v1 = v0;
  ObjectType  = (objc_class *)swift_getObjectType();
  uint64_t v3 = swift_isaMask & *(void *)v0;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (uint64_t *)((char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = OS_dispatch_queue.p2p.unsafeMutableAddressor();
  id v9 = (void *)*v8;
  *uint64_t v7 = *v8;
  (*(void (**)(uint64_t *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = v9;
  LOBYTE(v9)  = _dispatchPreconditionTest(_:)();
  id result = (id)(*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 8))(v7, v4);
  if (v9)
  {
    uint64_t v12 = OBJC_IVAR____TtC12wifip2pdCore12XPCResponder_session;
    objc_super v13 = *(void **)&v1[OBJC_IVAR____TtC12wifip2pdCore12XPCResponder_session];
    swift_retain();
    id v14 = v13;
    sub_100288670((uint64_t)v14, &qword_1004845E8);
    swift_release();

    id v15 = *(void **)&v1[v12];
    swift_retain();
    id v16 = v15;
    sub_10028A024(v16);
    swift_release();

    char v17 = *(void **)&v1[v12];
    swift_retain();
    id v18 = v17;
    sub_100288670((uint64_t)v18, &qword_1004845E0);
    swift_release();

    uint64_t v27 = *(void **)&v1[v12];
    uint64_t v19 = v27;
    swift_beginAccess();
    type metadata accessor for XPCSession(255);
    uint64_t v20 = *(void *)(v3 + 136);
    id v21 = v19;
    long long v22 = *(_OWORD *)(v3 + 120);
    long long v24 = *(_OWORD *)(v3 + 104);
    long long v25 = v22;
    uint64_t v26 = v20;
    _s22P2PActivityCoordinatorC25AirPlayActivityTranslatorVMa();
    sub_10001011C(&qword_100484BC8, (void (*)(uint64_t))type metadata accessor for XPCSession);
    type metadata accessor for Dictionary();
    Dictionary.removeValue(forKey:)();
    swift_endAccess();

    sub_100298620(v24, *((void **)&v24 + 1));
    v23.receiver  = v1;
    v23.super_class  = ObjectType;
    return [super dealloc];
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10028D944(void *a1)
{
  id v1 = a1;
  return sub_10028D638();
}

uint64_t sub_10028D96C()
{
  return swift_release();
}

void sub_10028D97C(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  objc_super v13 = (void *)((char *)v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v14 = OS_dispatch_queue.p2p.unsafeMutableAddressor();
  id v15 = (void *)*v14;
  *objc_super v13 = *v14;
  (*(void (**)(uint64_t *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  id v16 = v15;
  char v17 = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v11 + 8))(v13, v10);
  if (v17)
  {
    id v18 = [a1 peerAddress];
    unint64_t v19 = WiFiMACAddress.wifiAddress.getter();

    uint64_t v20 = (unsigned __int16 *)WiFiAddress.zero.unsafeMutableAddressor();
    if (static NANClusterChangeEvent.__derived_struct_equals(_:_:)(v19 & 0xFFFFFFFFFFFFLL, *v20 | ((unint64_t)*(unsigned int *)(v20 + 1) << 16)))
    {
      uint64_t v67 = a3;
      id v21 = v5;
      id v22 = a1;
      objc_super v23 = (char *)v21;
      id v24 = v22;
      long long v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = swift_slowAlloc();
        uint64_t v28 = (void *)swift_slowAlloc();
        v63[1]  = v28;
        uint64_t v65 = swift_slowAlloc();
        uint64_t v69 = v65;
        *(_DWORD *)uint64_t v27 = 138412802;
        uint64_t v66 = a4;
        uint64_t v29 = *(void **)&v23[OBJC_IVAR____TtC12wifip2pdCore12XPCResponder_session];
        os_log_t v64 = v25;
        uint64_t v68 = (uint64_t)v29;
        id v30 = v29;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v28 = v29;

        *(_WORD *)(v27 + 12)  = 2080;
        if (a2) {
          uint64_t v31 = 0x6E69767265736572;
        }
        else {
          uint64_t v31 = 0x7672657365726E75;
        }
        if (a2) {
          unint64_t v32 = 0xE900000000000067;
        }
        else {
          unint64_t v32 = 0xEB00000000676E69;
        }
        uint64_t v68 = sub_100010680(v31, v32, &v69);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v27 + 22)  = 2080;
        id v33 = [v24 uniqueIdentifier];
        uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        char v35 = a2;
        unint64_t v37 = v36;

        uint64_t v38 = v34;
        a4  = v66;
        uint64_t v68 = sub_100010680(v38, v37, &v69);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        a2  = v35;
        swift_bridgeObjectRelease();
        long long v25 = v64;
        _os_log_impl((void *)&_mh_execute_header, v64, v26, "%@ %s traffic registrations for %s", (uint8_t *)v27, 0x20u);
        sub_100010BCC(&qword_10047CC30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v62 = *(void **)&v23[OBJC_IVAR____TtC12wifip2pdCore12XPCResponder_session];
      if (a2) {
        sub_1002843CC(v24, v62, v67, a4);
      }
      else {
        sub_100284724(v24, v62, v67, a4);
      }
    }
    else
    {
      char v39 = a2;
      id v40 = a1;
      id v41 = v5;
      id v42 = v40;
      unint64_t v43 = (char *)v41;
      id v44 = v42;
      char v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.error.getter();
      int v47 = v46;
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v48 = swift_slowAlloc();
        id v49 = (void *)swift_slowAlloc();
        uint64_t v65 = (uint64_t)v49;
        uint64_t v67 = swift_slowAlloc();
        uint64_t v69 = v67;
        *(_DWORD *)uint64_t v48 = 138413058;
        LODWORD(v66)  = v47;
        uint64_t v50 = *(void **)&v43[OBJC_IVAR____TtC12wifip2pdCore12XPCResponder_session];
        uint64_t v68 = (uint64_t)v50;
        id v51 = v50;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v49 = v50;

        *(_WORD *)(v48 + 12)  = 2080;
        if (v39) {
          uint64_t v52 = 0x65767265736572;
        }
        else {
          uint64_t v52 = 0x7672657365726E75;
        }
        if (v39) {
          unint64_t v53 = 0xE700000000000000;
        }
        else {
          unint64_t v53 = 0xE900000000000065;
        }
        uint64_t v68 = sub_100010680(v52, v53, &v69);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v48 + 22)  = 2080;
        id v54 = [v44 uniqueIdentifier];
        uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v57 = v56;

        uint64_t v68 = sub_100010680(v55, v57, &v69);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v48 + 32)  = 2080;
        id v58 = [v44 peerAddress];
        unint64_t v59 = WiFiMACAddress.wifiAddress.getter();

        uint64_t v60 = WiFiAddress.description.getter(v59 & 0xFFFFFFFFFFFFLL);
        uint64_t v68 = sub_100010680(v60, v61, &v69);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v45, (os_log_type_t)v66, "%@ incorrectly trying to %s traffic registrations for %s to a specific peer: %s", (uint8_t *)v48, 0x2Au);
        sub_100010BCC(&qword_10047CC30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10028E098(void *a1, int a2, void *a3, uint64_t a4, void *a5)
{
  return sub_10028E9AC(a1, a2, a3, a4, a5, (uint64_t)&unk_100468838, (uint64_t)sub_100298D58, (void (*)(id, uint64_t, uint64_t, uint64_t))sub_10028D97C);
}

void sub_10028E0CC(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v3 = 0;
  }
  id v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

void sub_10028E130(void *a1, int a2, NSObject *a3, uint64_t a4)
{
  int v84 = a2;
  unint64_t v8 = swift_isaMask & *v4;
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = (uint64_t *)((char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  objc_super v13 = OS_dispatch_queue.p2p.unsafeMutableAddressor();
  id v14 = (void *)*v13;
  *uint64_t v12 = *v13;
  (*(void (**)(uint64_t *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  id v15 = v14;
  LOBYTE(v14)  = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v10 + 8))(v12, v9);
  if ((v14 & 1) == 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  unint64_t v82 = v8;
  id v16 = a1;
  char v17 = v4;
  id v18 = v16;
  unint64_t v19 = v17;
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.info.getter();
  int v22 = v21;
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v23 = swift_slowAlloc();
    uint64_t v83 = a4;
    uint64_t v24 = v23;
    long long v25 = (void *)swift_slowAlloc();
    os_log_t v78 = v25;
    id v81 = (id)swift_slowAlloc();
    uint64_t v85 = (uint64_t)v81;
    *(_DWORD *)uint64_t v24 = 138413058;
    os_log_t v80 = v20;
    LODWORD(v79)  = v22;
    os_log_type_t v26 = *(void **)&v19[OBJC_IVAR____TtC12wifip2pdCore12XPCResponder_session];
    uint64_t v91 = (uint64_t)v26;
    id v27 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *long long v25 = v26;

    *(_WORD *)(v24 + 12)  = 2080;
    if (v84) {
      uint64_t v28 = 0x676E697472617473;
    }
    else {
      uint64_t v28 = 0x676E6970706F7473;
    }
    uint64_t v91 = sub_100010680(v28, 0xE800000000000000, &v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 22)  = 2080;
    id v29 = [v18 uniqueIdentifier];
    id v30 = a3;
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v33 = v32;

    uint64_t v34 = v31;
    a3  = v30;
    uint64_t v91 = sub_100010680(v34, v33, &v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 32)  = 2080;
    id v35 = [v18 peerAddress];
    unint64_t v36 = WiFiMACAddress.wifiAddress.getter();

    uint64_t v37 = WiFiAddress.description.getter(v36 & 0xFFFFFFFFFFFFLL);
    uint64_t v91 = sub_100010680(v37, v38, &v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    uint64_t v20 = v80;
    _os_log_impl((void *)&_mh_execute_header, v80, (os_log_type_t)v79, "%@ %s traffic registration for %s to %s", (uint8_t *)v24, 0x2Au);
    sub_100010BCC(&qword_10047CC30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    a4  = v83;
    swift_slowDealloc();
  }
  else
  {
  }
  id v39 = [v18 uniqueIdentifier];
  uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v42 = v41;
  if (v40 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v42 == v43)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v44 & 1) == 0) {
      goto LABEL_18;
    }
  }
  if (([v18 legacyUpgradeRequired] & 1) == 0)
  {
LABEL_18:
    unint64_t v70 = *(void **)&v19[OBJC_IVAR____TtC12wifip2pdCore12XPCResponder_session];
    if (v84) {
      sub_1002864C0(v18, v70, (uint64_t)a3, a4);
    }
    else {
      sub_100287264(v18, v70, a3, a4);
    }
    return;
  }
  uint64_t v83 = a4;
  uint64_t v45 = *(void *)&v19[qword_1004847D0];
  os_log_type_t v46 = *(void **)&v19[OBJC_IVAR____TtC12wifip2pdCore12XPCResponder_session];
  os_log_t v80 = a3;
  id v81 = v46;
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16)  = v19;
  uint64_t v48 = (id *)(v45 + qword_1004887D0);
  swift_beginAccess();
  id v49 = (void *)swift_allocObject();
  uint64_t v50 = (void *)v82;
  uint64_t v51 = *(void *)(v82 + 104);
  v49[2]  = v51;
  uint64_t v52 = v50[14];
  v49[3]  = v52;
  uint64_t v53 = v50[15];
  unsigned char v49[4] = v53;
  uint64_t v54 = v50[16];
  v49[5]  = v54;
  uint64_t v55 = v50[17];
  v49[6]  = v55;
  v49[7]  = sub_1002982B4;
  uint64_t v79 = v47;
  v49[8]  = v47;
  unint64_t v56 = v19;
  id v57 = v81;
  LODWORD(v78)  = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v90 = *v48;
  id v58 = v90;
  *uint64_t v48 = (id)0x8000000000000000;
  id v81 = v57;
  unint64_t v82 = sub_100011CE0((uint64_t)v57);
  uint64_t v59 = v58[2];
  int v77 = v60;
  BOOL v61 = (v60 & 1) == 0;
  Swift::Int v62 = v59 + v61;
  if (__OFADD__(v59, v61))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  type metadata accessor for XPCSession(255);
  uint64_t v85 = v51;
  uint64_t v86 = v52;
  uint64_t v87 = v53;
  uint64_t v88 = v54;
  uint64_t v89 = v55;
  id v63 = _s22P2PActivityCoordinatorC25AirPlayActivityTranslatorVMa();
  sub_10001011C(&qword_100484BC8, (void (*)(uint64_t))type metadata accessor for XPCSession);
  type metadata accessor for _NativeDictionary();
  Swift::Bool v64 = _NativeDictionary.ensureUnique(isUnique:capacity:)((Swift::Bool)v78, v62);
  id v65 = v90;
  os_log_t v66 = v80;
  uint64_t v67 = v81;
  char v68 = v77;
  if (v64)
  {
    unint64_t v82 = sub_100011CE0((uint64_t)v81);
    if ((v68 & 1) != (v69 & 1)) {
      goto LABEL_26;
    }
  }
  *uint64_t v48 = v65;
  swift_bridgeObjectRelease();
  if (v68)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v71 = swift_bridgeObjectRetain();
    uint64_t v85 = ((uint64_t (*)(uint64_t))v49[7])(v71);
    uint64_t v86 = v72;
    LOBYTE(v87)  = v73 & 1;
    uint64_t v88 = v74;
    uint64_t v90 = v67;
    uint64_t v75 = v67;
    _NativeDictionary._insert(at:key:value:)();
  }
  swift_bridgeObjectRelease();
  sub_10028BC74(v18, v84 & 1, v66, v83, v63);
  swift_endAccess();
  swift_release();
  swift_release();
}

uint64_t sub_10028E914(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + qword_1004847D0);
  uint64_t v2 = *(void **)(a1 + OBJC_IVAR____TtC12wifip2pdCore12XPCResponder_session);
  swift_unownedRetain();
  id v3 = v2;
  return v1;
}

uint64_t sub_10028E978(void *a1, int a2, void *a3, uint64_t a4, void *a5)
{
  return sub_10028E9AC(a1, a2, a3, a4, a5, (uint64_t)&unk_1004684F0, (uint64_t)sub_100298D58, (void (*)(id, uint64_t, uint64_t, uint64_t))sub_10028E130);
}

uint64_t sub_10028E9AC(void *a1, int a2, void *a3, uint64_t a4, void *aBlock, uint64_t a6, uint64_t a7, void (*a8)(id, uint64_t, uint64_t, uint64_t))
{
  objc_super v13 = _Block_copy(aBlock);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16)  = v13;
  id v15 = a3;
  id v16 = a1;
  a8(v15, a4, a7, v14);

  return swift_release();
}

uint64_t sub_10028EA64(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (uint64_t *)((char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v12 = (void *)*v11;
  uint64_t *v10 = *v11;
  (*(void (**)(uint64_t *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  id v13 = v12;
  char v14 = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v8 + 8))(v10, v7);
  if (v14)
  {
    id v16 = v3;
    char v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      uint64_t v34 = a2;
      os_log_t v32 = v17;
      os_log_type_t v21 = (void *)v20;
      uint64_t v22 = swift_slowAlloc();
      uint64_t v33 = v22;
      *(_DWORD *)uint64_t v19 = 138412546;
      uint64_t v23 = a3;
      uint64_t v24 = *(void **)&v16[OBJC_IVAR____TtC12wifip2pdCore12XPCResponder_session];
      uint64_t v35 = (uint64_t)v24;
      uint64_t v36 = v22;
      id v25 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v21 = v24;
      a3  = v23;

      *(_WORD *)(v19 + 12)  = 2080;
      if (a1) {
        uint64_t v26 = 0x69646E6570737573;
      }
      else {
        uint64_t v26 = 0x676E696D75736572;
      }
      if (a1) {
        unint64_t v27 = 0xEA0000000000676ELL;
      }
      else {
        unint64_t v27 = 0xE800000000000000;
      }
      uint64_t v35 = sub_100010680(v26, v27, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      os_log_t v28 = v32;
      _os_log_impl((void *)&_mh_execute_header, v32, v18, "%@ %s AWDL", (uint8_t *)v19, 0x16u);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      a2  = v34;
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    if (a1)
    {
      id v29 = &unk_1004684A0;
      id v30 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10000BB10;
    }
    else
    {
      id v29 = &unk_1004684C8;
      id v30 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10000CB30;
    }
    return sub_100289EF0(*(void *)&v16[OBJC_IVAR____TtC12wifip2pdCore12XPCResponder_session], a2, a3, (uint64_t)v29, (uint64_t)sub_100298D5C, v30);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10028EE10(void *a1, int a2, char a3, void *aBlock)
{
  uint64_t v6 = _Block_copy(aBlock);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16)  = v6;
  id v8 = a1;
  sub_10028EA64(a3, (uint64_t)sub_100298274, v7);

  return swift_release();
}

uint64_t sub_10028EEA4(void (*a1)(uint64_t, void), uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  id v8 = (void *)((char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v10 = (void *)*v9;
  *id v8 = *v9;
  (*(void (**)(uint64_t *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v11 = v10;
  LOBYTE(v10)  = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v6 + 8))(v8, v5);
  if (v10)
  {
    uint64_t v13 = *(void *)(v2 + qword_1004847D0);
    uint64_t v14 = sub_100280F74();
    sub_100286FF4(v14);
    uint64_t v16 = v15;
    swift_bridgeObjectRelease();
    uint64_t v17 = sub_1003AAE94(v16);
    swift_bridgeObjectRelease();
    os_log_type_t v18 = sub_1002C5478(v17);
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    char v44 = _swiftEmptyDictionarySingleton;
    sub_1002954C4((uint64_t)v18, 0xD000000000000023, 0x80000001003DF770, isUniquelyReferenced_nonNull_native);
    uint64_t v20 = v44;
    swift_bridgeObjectRelease();
    int64_t v21 = *(void *)(*(void *)(v13 + qword_1004887B8) + 16);
    uint64_t v22 = _swiftEmptyArrayStorage;
    if (!v21)
    {
LABEL_12:
      char v37 = swift_isUniquelyReferenced_nonNull_native();
      char v44 = v20;
      sub_1002954C4((uint64_t)v22, 0xD000000000000023, 0x80000001003DF7A0, v37);
      uint64_t v38 = (uint64_t)v44;
      swift_bridgeObjectRelease();
      uint64_t v39 = sub_1002C8E70(v38);
      swift_bridgeObjectRelease();
      a1(v39, 0);
      return swift_bridgeObjectRelease();
    }
    v40[0]  = v20;
    v40[1]  = a2;
    uint64_t v41 = a1;
    char v44 = _swiftEmptyArrayStorage;
    uint64_t v42 = swift_bridgeObjectRetain();
    sub_10008345C(0, v21, 0);
    uint64_t v23 = v42;
    uint64_t v22 = v44;
    uint64_t result = sub_100296A3C(v42);
    int64_t v24 = result;
    int v26 = v25;
    char v28 = v27 & 1;
    uint64_t v43 = v23 + 56;
    while ((v24 & 0x8000000000000000) == 0 && v24 < 1 << *(unsigned char *)(v23 + 32))
    {
      if (((*(void *)(v43 + (((unint64_t)v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v24) & 1) == 0) {
        goto LABEL_14;
      }
      if (*(_DWORD *)(v23 + 36) != v26) {
        goto LABEL_15;
      }
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v31 = v30;
      char v44 = v22;
      unint64_t v33 = v22[2];
      unint64_t v32 = v22[3];
      if (v33 >= v32 >> 1)
      {
        sub_10008345C(v32 > 1, v33 + 1, 1);
        uint64_t v23 = v42;
        uint64_t v22 = v44;
      }
      v22[2]  = v33 + 1;
      uint64_t v34 = &v22[2 * v33];
      v34[4]  = v29;
      v34[5]  = v31;
      uint64_t result = sub_100296AE0(v24, v26, v28 & 1, v23);
      int64_t v24 = result;
      int v26 = v35;
      char v28 = v36 & 1;
      if (!--v21)
      {
        sub_100038030(result, v35, v36 & 1);
        swift_bridgeObjectRelease();
        a1  = v41;
        uint64_t v20 = (void *)v40[0];
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10028F22C(void *a1, int a2, void *aBlock)
{
  id v4 = _Block_copy(aBlock);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16)  = v4;
  id v6 = a1;
  sub_10028EEA4(sub_100297DE4, v5);

  return swift_release();
}

uint64_t _s25P2PTrafficPolicyResponderCMa()
{
  return swift_getGenericMetadata();
}

uint64_t sub_10028F2D0()
{
  return sub_10028F2DC();
}

uint64_t sub_10028F2DC()
{
  return swift_initClassMetadata2();
}

void sub_10028F318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    v5.super.isa  = Dictionary._bridgeToObjectiveC()().super.isa;
    if (a2)
    {
LABEL_3:
      uint64_t v6 = _convertErrorToNSError(_:)();
      goto LABEL_6;
    }
  }
  else
  {
    v5.super.isa  = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  uint64_t v6 = 0;
LABEL_6:
  id v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, v5.super.isa);
}

char *sub_10028F3C4(char *a1)
{
  uint64_t v2 = v1;
  swift_getObjectType();
  type metadata accessor for Logger();
  __chkstk_darwin();
  NSDictionary v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection;
  id v7 = *(void **)&a1[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection];
  id v8 = v2;
  v9._countAndFlagsBits  = 0xD000000000000014;
  v9._object  = (void *)0x80000001003DF750;
  if (NSXPCConnection.has(entitlement:)(v9)
    && (id v10 = [self interfaceWithProtocol:&OBJC_PROTOCOL___WiFiP2PUIAgentXPCDelegate],
        [v7 setRemoteObjectInterface:v10],
        v10,
        id v11 = [*(id *)&a1[v6] remoteObjectProxy],
        _bridgeAnyObjectToAny(_:)(),
        swift_unknownObjectRelease(),
        sub_100010BCC(&qword_100484BB8),
        (swift_dynamicCast() & 1) != 0))
  {
    uint64_t v12 = v25;
    *(void *)&v8[qword_1004848B8]  = v25;
    swift_unknownObjectRetain();

    uint64_t v13 = a1;
    Logger.init(subsystem:category:)();
    uint64_t v14 = &OBJC_PROTOCOL___NSObject;
    uint64_t v15 = sub_1002BBB14(v13, (uint64_t)v5, (uint64_t)v14);

    uint64_t v16 = v13;
    uint64_t v17 = v15;
    os_log_type_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v24 = v12;
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      int64_t v21 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 138412290;
      int v26 = v16;
      uint64_t v22 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *int64_t v21 = v16;

      _os_log_impl((void *)&_mh_execute_header, v18, v19, "%@ is now the current UI agent", v20, 0xCu);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_unknownObjectRelease();
    }
    else
    {

      swift_unknownObjectRelease();
    }
  }
  else
  {

    swift_deallocPartialClassInstance();
    return 0;
  }
  return v17;
}

uint64_t sub_10028F760()
{
  return swift_unknownObjectRelease();
}

id sub_10028F770()
{
  ObjectType  = (objc_class *)swift_getObjectType();
  uint64_t v2 = v0;
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    NSDictionary v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)NSDictionary v5 = 138412290;
    Swift::String v9 = *(void **)&v2[OBJC_IVAR____TtC12wifip2pdCore12XPCResponder_session];
    id v7 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v9;

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%@ is no longer the UI agent", v5, 0xCu);
    sub_100010BCC(&qword_10047CC30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  v10.receiver  = v2;
  v10.super_class  = ObjectType;
  return [super dealloc];
}

id sub_10028F900(void *a1)
{
  id v1 = a1;
  return sub_10028F770();
}

uint64_t sub_10028F928()
{
  return swift_unknownObjectRelease();
}

uint64_t _s16UIAgentResponderCMa()
{
  return swift_getGenericMetadata();
}

void sub_10028F950(uint64_t a1)
{
}

uint64_t sub_10028F968(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  unsigned __int8 v8 = *(unsigned char *)(a2 + 40);
  sub_100012724(*(void *)a2, v4, v5, v6, v7, v8);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  unint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = *(void *)(a1 + 32);
  *(void *)a1  = v3;
  *(void *)(a1 + 8)  = v4;
  *(void *)(a1 + 16)  = v5;
  *(void *)(a1 + 24)  = v6;
  *(void *)(a1 + 32)  = v7;
  unsigned __int8 v14 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40)  = v8;
  sub_100010164(v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t sub_10028F9F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  char v4 = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16)  = v10;
  *(void *)(a1 + 32)  = v3;
  unsigned __int8 v11 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40)  = v4;
  sub_100010164(v5, v7, v6, v8, v9, v11);
  return a1;
}

uint64_t sub_10028FA48(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 41)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unsigned int v2 = *(_DWORD *)(a1 + 25);
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t sub_10028FA94(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(unsigned char *)(result + 40)  = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 41)  = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = 0;
      *(void *)(result + 8)  = 0;
      *(void *)(result + 16)  = 0;
      *(void *)(result + 24)  = (unint64_t)-a2 << 8;
      *(void *)(result + 32)  = 0;
      *(unsigned char *)(result + 40)  = 0;
      return result;
    }
    *(unsigned char *)(result + 41)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_10028FAF0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24) >> 62;
  if (v1 == 3) {
    return (*(_DWORD *)a1 + 3);
  }
  else {
    return v1;
  }
}

uint64_t sub_10028FB0C(uint64_t result)
{
  *(void *)(result + 24) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t sub_10028FB1C(uint64_t result, uint64_t a2)
{
  if (a2 < 3)
  {
    *(void *)(result + 24)  = *(unsigned __int8 *)(result + 24) | (unint64_t)(a2 << 62);
  }
  else
  {
    *(void *)(result + 8)  = 0;
    *(void *)(result + 16)  = 0;
    *(void *)uint64_t result = (a2 - 3);
    *(_OWORD *)(result + 24)  = xmmword_1003D4F20;
    *(unsigned char *)(result + 40)  = 0;
  }
  return result;
}

uint64_t sub_10028FB50(uint64_t a1)
{
  swift_unownedRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10028FB94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_unownedRetain();
  uint64_t v5 = *(void **)(a2 + 8);
  *(void *)a1  = v4;
  *(void *)(a1 + 8)  = v5;
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  id v6 = v5;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10028FBE8(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = swift_unownedRetain();
  swift_unownedRelease();
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8)  = v4;
  id v6 = v4;

  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10028FC64(uint64_t a1, uint64_t a2)
{
  swift_unownedRelease();
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1  = *(_OWORD *)a2;

  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10028FCBC(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10028FD04(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16)  = 0;
    *(void *)(result + 24)  = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8)  = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32)  = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8)  = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t _s22P2PActivityCoordinatorC25AirPlayActivityTranslatorVMa()
{
  return swift_getGenericMetadata();
}

uint64_t sub_10028FD5C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10028FD84(uint64_t a1, int a2)
{
  int v3 = v2;
  uint64_t v5 = type metadata accessor for NANAttribute(0);
  uint64_t v37 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_100010BCC((uint64_t *)&unk_100488380);
  int v38 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = result;
  if (*(void *)(v8 + 16))
  {
    int64_t v11 = 0;
    uint64_t v12 = *(void *)(v8 + 64);
    char v36 = (void *)(v8 + 64);
    uint64_t v13 = 1 << *(unsigned char *)(v8 + 32);
    if (v13 < 64) {
      uint64_t v14 = ~(-1 << v13);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v12;
    uint64_t v34 = v2;
    int64_t v35 = (unint64_t)(v13 + 63) >> 6;
    uint64_t v16 = result + 64;
    while (1)
    {
      if (v15)
      {
        unint64_t v18 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v19 = v18 | (v11 << 6);
      }
      else
      {
        int64_t v20 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v36;
        if (v20 >= v35) {
          goto LABEL_34;
        }
        unint64_t v21 = v36[v20];
        ++v11;
        if (!v21)
        {
          int64_t v11 = v20 + 1;
          if (v20 + 1 >= v35) {
            goto LABEL_34;
          }
          unint64_t v21 = v36[v11];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v35)
            {
LABEL_34:
              if ((v38 & 1) == 0)
              {
                uint64_t result = swift_release();
                int v3 = v34;
                goto LABEL_41;
              }
              uint64_t v33 = 1 << *(unsigned char *)(v8 + 32);
              if (v33 >= 64) {
                bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *char v36 = -1 << v33;
              }
              int v3 = v34;
              *(void *)(v8 + 16)  = 0;
              break;
            }
            unint64_t v21 = v36[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v11 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_43;
                }
                if (v11 >= v35) {
                  goto LABEL_34;
                }
                unint64_t v21 = v36[v11];
                ++v22;
                if (v21) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v11 = v22;
          }
        }
LABEL_21:
        unint64_t v15 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v11 << 6);
      }
      uint64_t v23 = *(char *)(*(void *)(v8 + 48) + v19);
      uint64_t v24 = *(void *)(v37 + 72);
      uint64_t v25 = *(void *)(v8 + 56) + v24 * v19;
      if (v38) {
        sub_100297894(v25, (uint64_t)v7, type metadata accessor for NANAttribute);
      }
      else {
        sub_10029782C(v25, (uint64_t)v7, type metadata accessor for NANAttribute);
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(byte_1003D525A[v23]);
      uint64_t result = Hasher._finalize()();
      uint64_t v26 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v27 = result & ~v26;
      unint64_t v28 = v27 >> 6;
      if (((-1 << v27) & ~*(void *)(v16 + 8 * (v27 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v16 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v29 = 0;
        unint64_t v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v31 = v28 == v30;
          if (v28 == v30) {
            unint64_t v28 = 0;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v16 + 8 * v28);
        }
        while (v32 == -1);
        unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(void *)(v16 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(unsigned char *)(*(void *)(v10 + 48) + v17)  = v23;
      uint64_t result = sub_100297894((uint64_t)v7, *(void *)(v10 + 56) + v24 * v17, type metadata accessor for NANAttribute);
      ++*(void *)(v10 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *int v3 = v10;
  return result;
}

uint64_t sub_100290130(uint64_t a1, char a2)
{
  int v3 = v2;
  uint64_t v5 = *v2;
  sub_100010BCC((uint64_t *)&unk_100488330);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    unint64_t v30 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v29 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        int64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v19 >= v29) {
          goto LABEL_33;
        }
        unint64_t v20 = v30[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v29) {
            goto LABEL_33;
          }
          unint64_t v20 = v30[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v29)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                int v3 = v2;
                goto LABEL_40;
              }
              uint64_t v28 = 1 << *(unsigned char *)(v5 + 32);
              if (v28 >= 64) {
                bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                void *v30 = -1 << v28;
              }
              int v3 = v2;
              *(void *)(v5 + 16)  = 0;
              break;
            }
            unint64_t v20 = v30[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v29) {
                  goto LABEL_33;
                }
                unint64_t v20 = v30[v8];
                ++v21;
                if (v20) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_30:
        unint64_t v11 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v26 = *(char *)(*(void *)(v5 + 48) + v18);
      uint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v18);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(byte_1003D525A[v26]);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v24 = v15 == v23;
          if (v15 == v23) {
            unint64_t v15 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v12 + 8 * v15);
        }
        while (v25 == -1);
        unint64_t v16 = __clz(__rbit64(~v25)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(unsigned char *)(*(void *)(v7 + 48) + v16)  = v26;
      *(void *)(*(void *)(v7 + 56) + 8 * v16)  = v27;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *int v3 = v7;
  return result;
}

uint64_t sub_10029040C(uint64_t a1, char a2)
{
  int v3 = v2;
  uint64_t v5 = *v2;
  sub_100010BCC((uint64_t *)&unk_100484AB0);
  char v40 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    int v38 = (void *)(v5 + 64);
    uint64_t v39 = v5;
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v37 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        uint64_t v41 = (v11 - 1) & v11;
        int64_t v42 = v8;
        unint64_t v18 = __clz(__rbit64(v11)) | (v8 << 6);
      }
      else
      {
        int64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v38;
        if (v19 >= v37) {
          goto LABEL_33;
        }
        unint64_t v20 = v38[v19];
        int64_t v21 = v8 + 1;
        if (!v20)
        {
          int64_t v21 = v19 + 1;
          if (v19 + 1 >= v37) {
            goto LABEL_33;
          }
          unint64_t v20 = v38[v21];
          if (!v20)
          {
            int64_t v22 = v19 + 2;
            if (v22 >= v37)
            {
LABEL_33:
              if ((v40 & 1) == 0)
              {
                uint64_t result = swift_release();
                int v3 = v2;
                goto LABEL_40;
              }
              uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
              if (v36 >= 64) {
                bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                void *v38 = -1 << v36;
              }
              int v3 = v2;
              *(void *)(v5 + 16)  = 0;
              break;
            }
            unint64_t v20 = v38[v22];
            if (!v20)
            {
              while (1)
              {
                int64_t v21 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v21 >= v37) {
                  goto LABEL_33;
                }
                unint64_t v20 = v38[v21];
                ++v22;
                if (v20) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v21 = v22;
          }
        }
LABEL_30:
        uint64_t v41 = (v20 - 1) & v20;
        int64_t v42 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v27 = *(void *)(v5 + 56);
      uint64_t v28 = (unsigned __int8 *)(*(void *)(v5 + 48) + 6 * v18);
      uint64_t v29 = *v28;
      uint64_t v30 = v28[1];
      uint64_t v31 = v28[2];
      uint64_t v32 = v28[3];
      uint64_t v33 = v28[4];
      uint64_t v34 = v28[5];
      uint64_t v35 = *(void *)(v27 + 8 * v18);
      if ((v40 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      NANClusterChangeEvent.hash(into:)((int)&v43, (v33 << 32) | (v34 << 40) | (v32 << 24) | (v31 << 16) | (v30 << 8) | v29);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      unint64_t v17 = (unsigned char *)(*(void *)(v7 + 48) + 6 * v16);
      *unint64_t v17 = v29;
      v17[1]  = v30;
      v17[2]  = v31;
      v17[3]  = v32;
      v17[4]  = v33;
      void v17[5] = v34;
      *(void *)(*(void *)(v7 + 56) + 8 * v16)  = v35;
      ++*(void *)(v7 + 16);
      uint64_t v5 = v39;
      unint64_t v11 = v41;
      int64_t v8 = v42;
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *int v3 = v7;
  return result;
}

uint64_t sub_100290748(uint64_t a1, char a2)
{
  int v3 = v2;
  uint64_t v5 = *v2;
  sub_100010BCC((uint64_t *)&unk_100488320);
  char v40 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    int v38 = (void *)(v5 + 64);
    uint64_t v39 = v5;
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v37 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        uint64_t v41 = (v11 - 1) & v11;
        int64_t v42 = v8;
        unint64_t v18 = __clz(__rbit64(v11)) | (v8 << 6);
      }
      else
      {
        int64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v38;
        if (v19 >= v37) {
          goto LABEL_33;
        }
        unint64_t v20 = v38[v19];
        int64_t v21 = v8 + 1;
        if (!v20)
        {
          int64_t v21 = v19 + 1;
          if (v19 + 1 >= v37) {
            goto LABEL_33;
          }
          unint64_t v20 = v38[v21];
          if (!v20)
          {
            int64_t v22 = v19 + 2;
            if (v22 >= v37)
            {
LABEL_33:
              if ((v40 & 1) == 0)
              {
                uint64_t result = swift_release();
                int v3 = v2;
                goto LABEL_40;
              }
              uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
              if (v36 >= 64) {
                bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                void *v38 = -1 << v36;
              }
              int v3 = v2;
              *(void *)(v5 + 16)  = 0;
              break;
            }
            unint64_t v20 = v38[v22];
            if (!v20)
            {
              while (1)
              {
                int64_t v21 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v21 >= v37) {
                  goto LABEL_33;
                }
                unint64_t v20 = v38[v21];
                ++v22;
                if (v20) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v21 = v22;
          }
        }
LABEL_30:
        uint64_t v41 = (v20 - 1) & v20;
        int64_t v42 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v27 = *(void *)(v5 + 56);
      uint64_t v28 = (unsigned __int8 *)(*(void *)(v5 + 48) + 6 * v18);
      uint64_t v29 = *v28;
      uint64_t v30 = v28[1];
      uint64_t v31 = v28[2];
      uint64_t v32 = v28[3];
      uint64_t v33 = v28[4];
      uint64_t v34 = v28[5];
      uint64_t v35 = *(void *)(v27 + 8 * v18);
      if ((v40 & 1) == 0) {
        swift_retain();
      }
      Hasher.init(_seed:)();
      NANClusterChangeEvent.hash(into:)((int)&v43, (v33 << 32) | (v34 << 40) | (v32 << 24) | (v31 << 16) | (v30 << 8) | v29);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      unint64_t v17 = (unsigned char *)(*(void *)(v7 + 48) + 6 * v16);
      *unint64_t v17 = v29;
      v17[1]  = v30;
      v17[2]  = v31;
      v17[3]  = v32;
      v17[4]  = v33;
      void v17[5] = v34;
      *(void *)(*(void *)(v7 + 56) + 8 * v16)  = v35;
      ++*(void *)(v7 + 16);
      uint64_t v5 = v39;
      unint64_t v11 = v41;
      int64_t v8 = v42;
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *int v3 = v7;
  return result;
}

uint64_t sub_100290A84(uint64_t a1, char a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = *v2;
  sub_100010BCC((uint64_t *)&unk_100488340);
  char v48 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = result;
  if (*(void *)(v6 + 16))
  {
    int64_t v9 = 0;
    uint64_t v45 = (void *)(v6 + 64);
    uint64_t v46 = v6;
    uint64_t v10 = 1 << *(unsigned char *)(v6 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v6 + 64);
    char v43 = v2;
    int64_t v44 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    uint64_t v47 = result;
    while (1)
    {
      if (v12)
      {
        uint64_t v49 = (v12 - 1) & v12;
        int64_t v50 = v9;
        unint64_t v22 = __clz(__rbit64(v12)) | (v9 << 6);
      }
      else
      {
        int64_t v23 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v45;
        if (v23 >= v44) {
          goto LABEL_33;
        }
        unint64_t v24 = v45[v23];
        int64_t v25 = v9 + 1;
        if (!v24)
        {
          int64_t v25 = v23 + 1;
          if (v23 + 1 >= v44) {
            goto LABEL_33;
          }
          unint64_t v24 = v45[v25];
          if (!v24)
          {
            int64_t v26 = v23 + 2;
            if (v26 >= v44)
            {
LABEL_33:
              if ((v48 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v4 = v43;
                goto LABEL_40;
              }
              uint64_t v42 = 1 << *(unsigned char *)(v6 + 32);
              if (v42 >= 64) {
                bzero(v45, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v45 = -1 << v42;
              }
              uint64_t v4 = v43;
              *(void *)(v6 + 16)  = 0;
              break;
            }
            unint64_t v24 = v45[v26];
            if (!v24)
            {
              while (1)
              {
                int64_t v25 = v26 + 1;
                if (__OFADD__(v26, 1)) {
                  goto LABEL_42;
                }
                if (v25 >= v44) {
                  goto LABEL_33;
                }
                unint64_t v24 = v45[v25];
                ++v26;
                if (v24) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v25 = v26;
          }
        }
LABEL_30:
        uint64_t v49 = (v24 - 1) & v24;
        int64_t v50 = v25;
        unint64_t v22 = __clz(__rbit64(v24)) + (v25 << 6);
      }
      uint64_t v31 = *(void *)(v6 + 56);
      uint64_t v32 = (unsigned __int8 *)(*(void *)(v6 + 48) + 6 * v22);
      uint64_t v33 = *v32;
      uint64_t v34 = v32[1];
      uint64_t v35 = v32[2];
      uint64_t v36 = v32[3];
      uint64_t v37 = v32[4];
      uint64_t v38 = v32[5];
      uint64_t v39 = v31 + 24 * v22;
      v3.i32[0]  = *(_DWORD *)v39;
      char v51 = *(unsigned char *)(v39 + 4);
      char v52 = *(unsigned char *)(v39 + 5);
      char v53 = *(unsigned char *)(v39 + 6);
      uint64_t v41 = *(void *)(v39 + 8);
      unint64_t v40 = *(void *)(v39 + 16);
      if ((v48 & 1) == 0) {
        sub_100038004(v41, v40);
      }
      uint64_t v8 = v47;
      Hasher.init(_seed:)();
      NANClusterChangeEvent.hash(into:)((int)&v54, (v37 << 32) | (v38 << 40) | (v36 << 24) | (v35 << 16) | (v34 << 8) | v33);
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v47 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
        unint64_t v18 = v40;
        uint64_t v19 = v41;
      }
      else
      {
        char v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v14) >> 6;
        unint64_t v18 = v40;
        uint64_t v19 = v41;
        do
        {
          if (++v16 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v29 = v16 == v28;
          if (v16 == v28) {
            unint64_t v16 = 0;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v13 + 8 * v16);
        }
        while (v30 == -1);
        unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      unint64_t v20 = (unsigned char *)(*(void *)(v47 + 48) + 6 * v17);
      *unint64_t v20 = v33;
      v20[1]  = v34;
      v20[2]  = v35;
      v20[3]  = v36;
      v20[4]  = v37;
      v20[5]  = v38;
      uint64_t v21 = *(void *)(v47 + 56) + 24 * v17;
      *(_DWORD *)uint64_t v21 = vmovn_s16((int16x8_t)vmovl_u8(v3)).u32[0];
      *(unsigned char *)(v21 + 4)  = v51;
      *(unsigned char *)(v21 + 5)  = v52;
      *(unsigned char *)(v21 + 6)  = v53;
      *(void *)(v21 + 8)  = v19;
      *(void *)(v21 + 16)  = v18;
      ++*(void *)(v47 + 16);
      uint64_t v6 = v46;
      unint64_t v12 = v49;
      int64_t v9 = v50;
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v4 = v8;
  return result;
}

uint64_t sub_100290E38(uint64_t a1, int a2)
{
  return sub_100293700(a1, a2, type metadata accessor for AWDLPeer, &qword_100484AE8, type metadata accessor for AWDLPeer, type metadata accessor for AWDLPeer);
}

uint64_t sub_100290E80(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v46 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v46 - 8);
  __chkstk_darwin();
  int64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v3;
  sub_100010BCC(a3);
  int v47 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v12 = v11;
  if (*(void *)(v10 + 16))
  {
    unint64_t v40 = v3;
    uint64_t v13 = 1 << *(unsigned char *)(v10 + 32);
    uint64_t v14 = *(void *)(v10 + 64);
    uint64_t v42 = (void *)(v10 + 64);
    if (v13 < 64) {
      uint64_t v15 = ~(-1 << v13);
    }
    else {
      uint64_t v15 = -1;
    }
    unint64_t v16 = v15 & v14;
    int64_t v41 = (unint64_t)(v13 + 63) >> 6;
    char v43 = (void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    char v48 = (void (**)(char *, unint64_t, uint64_t))(v7 + 32);
    uint64_t v17 = v11 + 64;
    uint64_t result = swift_retain();
    int64_t v19 = 0;
    uint64_t v44 = v10;
    uint64_t v45 = v9;
    while (1)
    {
      if (v16)
      {
        unint64_t v21 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        unint64_t v22 = v21 | (v19 << 6);
      }
      else
      {
        int64_t v23 = v19 + 1;
        if (__OFADD__(v19, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v23 >= v41) {
          goto LABEL_34;
        }
        unint64_t v24 = v42[v23];
        ++v19;
        if (!v24)
        {
          int64_t v19 = v23 + 1;
          if (v23 + 1 >= v41) {
            goto LABEL_34;
          }
          unint64_t v24 = v42[v19];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v41)
            {
LABEL_34:
              swift_release();
              uint64_t v5 = v40;
              if (v47)
              {
                uint64_t v38 = 1 << *(unsigned char *)(v10 + 32);
                if (v38 >= 64) {
                  bzero(v42, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v42 = -1 << v38;
                }
                *(void *)(v10 + 16)  = 0;
              }
              break;
            }
            unint64_t v24 = v42[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v19 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_41;
                }
                if (v19 >= v41) {
                  goto LABEL_34;
                }
                unint64_t v24 = v42[v19];
                ++v25;
                if (v24) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v19 = v25;
          }
        }
LABEL_21:
        unint64_t v16 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v19 << 6);
      }
      uint64_t v26 = v7;
      uint64_t v27 = *(void *)(v7 + 72);
      unint64_t v28 = *(void *)(v10 + 48) + v27 * v22;
      BOOL v29 = v45;
      uint64_t v30 = v46;
      if (v47)
      {
        (*v48)(v45, v28, v46);
        long long v49 = *(_OWORD *)(*(void *)(v10 + 56) + 16 * v22);
      }
      else
      {
        (*v43)(v45, v28, v46);
        long long v49 = *(_OWORD *)(*(void *)(v10 + 56) + 16 * v22);
        swift_retain();
      }
      sub_10001011C(&qword_100487710, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
      unint64_t v32 = result & ~v31;
      unint64_t v33 = v32 >> 6;
      if (((-1 << v32) & ~*(void *)(v17 + 8 * (v32 >> 6))) != 0)
      {
        unint64_t v20 = __clz(__rbit64((-1 << v32) & ~*(void *)(v17 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v34 = 0;
        unint64_t v35 = (unint64_t)(63 - v31) >> 6;
        do
        {
          if (++v33 == v35 && (v34 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v36 = v33 == v35;
          if (v33 == v35) {
            unint64_t v33 = 0;
          }
          v34 |= v36;
          uint64_t v37 = *(void *)(v17 + 8 * v33);
        }
        while (v37 == -1);
        unint64_t v20 = __clz(__rbit64(~v37)) + (v33 << 6);
      }
      *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v48)(*(void *)(v12 + 48) + v27 * v20, v29, v30);
      *(_OWORD *)(*(void *)(v12 + 56) + 16 * v20)  = v49;
      ++*(void *)(v12 + 16);
      uint64_t v7 = v26;
      uint64_t v10 = v44;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v5 = v12;
  return result;
}

uint64_t sub_1002912AC(uint64_t a1, char a2)
{
  uint8x8_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100010BCC(&qword_100484BD8);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v37 = a2;
    int64_t v8 = 0;
    uint64_t v39 = (void *)(v5 + 64);
    uint64_t v40 = v5;
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v38 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        int64_t v41 = v8;
        unint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        int64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v39;
        if (v17 >= v38) {
          goto LABEL_31;
        }
        unint64_t v18 = v39[v17];
        int64_t v19 = v8 + 1;
        if (!v18)
        {
          int64_t v19 = v17 + 1;
          if (v17 + 1 >= v38) {
            goto LABEL_31;
          }
          unint64_t v18 = v39[v19];
          if (!v18)
          {
            int64_t v20 = v17 + 2;
            if (v20 >= v38)
            {
LABEL_31:
              if ((v37 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint8x8_t v3 = v2;
                goto LABEL_38;
              }
              uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
              if (v36 >= 64) {
                bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v39 = -1 << v36;
              }
              uint8x8_t v3 = v2;
              *(void *)(v5 + 16)  = 0;
              break;
            }
            unint64_t v18 = v39[v20];
            if (!v18)
            {
              while (1)
              {
                int64_t v19 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_40;
                }
                if (v19 >= v38) {
                  goto LABEL_31;
                }
                unint64_t v18 = v39[v19];
                ++v20;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v19 = v20;
          }
        }
LABEL_21:
        unint64_t v11 = (v18 - 1) & v18;
        int64_t v41 = v19;
        unint64_t v16 = __clz(__rbit64(v18)) + (v19 << 6);
      }
      uint64_t v21 = *(void *)(v5 + 56);
      unint64_t v22 = (unsigned __int8 *)(*(void *)(v5 + 48) + 6 * v16);
      uint64_t v23 = v22[5];
      uint64_t v24 = v22[4];
      uint64_t v25 = v22[3];
      uint64_t v26 = v22[2];
      uint64_t v27 = v22[1];
      uint64_t v28 = *v22;
      uint64_t v42 = *(void *)(v21 + 8 * v16);
      Hasher.init(_seed:)();
      NANClusterChangeEvent.hash(into:)((int)&v43, (v23 << 40) | (v24 << 32) | (v25 << 24) | (v26 << 16) | (v27 << 8) | v28);
      uint64_t result = Hasher._finalize()();
      uint64_t v29 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v12 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v30) & ~*(void *)(v12 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v12 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v13 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      uint64_t v14 = (unsigned char *)(*(void *)(v7 + 48) + 6 * v13);
      unsigned char *v14 = v28;
      v14[1]  = v27;
      void v14[2] = v26;
      v14[3]  = v25;
      v14[4]  = v24;
      v14[5]  = v23;
      int64_t v8 = v41;
      *(void *)(*(void *)(v7 + 56) + 8 * v13)  = v42;
      ++*(void *)(v7 + 16);
      uint64_t v5 = v40;
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint8x8_t v3 = v7;
  return result;
}

uint64_t sub_1002915DC(uint64_t a1, char a2)
{
  uint8x8_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100010BCC(&qword_100484BC0);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1]  = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17)  = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16)  = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint8x8_t v3 = v7;
  return result;
}

uint64_t sub_1002918F4(uint64_t a1, char a2)
{
  return sub_100291924(a1, a2, (uint64_t *)&unk_100484B30);
}

uint64_t sub_100291900(uint64_t a1, char a2)
{
  return sub_100291924(a1, a2, &qword_100484B20);
}

uint64_t sub_10029190C(uint64_t a1, char a2)
{
  return sub_100291924(a1, a2, &qword_100484B28);
}

uint64_t sub_100291918(uint64_t a1, char a2)
{
  return sub_100291924(a1, a2, &qword_100484B18);
}

uint64_t sub_100291924(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_100010BCC(a3);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = result;
  if (*(void *)(v6 + 16))
  {
    int64_t v9 = 0;
    uint64_t v31 = (void *)(v6 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v6 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v6 + 64);
    int64_t v30 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v18 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v19 = v18 | (v9 << 6);
      }
      else
      {
        int64_t v20 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v6 + 64;
        if (v20 >= v30) {
          goto LABEL_33;
        }
        unint64_t v21 = v31[v20];
        ++v9;
        if (!v21)
        {
          int64_t v9 = v20 + 1;
          if (v20 + 1 >= v30) {
            goto LABEL_33;
          }
          unint64_t v21 = v31[v9];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v30)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v4 = v3;
                goto LABEL_40;
              }
              uint64_t v29 = 1 << *(unsigned char *)(v6 + 32);
              if (v29 >= 64) {
                bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v31 = -1 << v29;
              }
              uint64_t v4 = v3;
              *(void *)(v6 + 16)  = 0;
              break;
            }
            unint64_t v21 = v31[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v9 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v9 >= v30) {
                  goto LABEL_33;
                }
                unint64_t v21 = v31[v9];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v9 = v22;
          }
        }
LABEL_30:
        unint64_t v12 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v9 << 6);
      }
      Swift::UInt8 v27 = *(unsigned char *)(*(void *)(v6 + 48) + v19);
      uint64_t v28 = *(void *)(*(void *)(v6 + 56) + 8 * v19);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v25 = v16 == v24;
          if (v16 == v24) {
            unint64_t v16 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        unint64_t v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(unsigned char *)(*(void *)(v8 + 48) + v17)  = v27;
      *(void *)(*(void *)(v8 + 56) + 8 * v17)  = v28;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v4 = v8;
  return result;
}

uint64_t sub_100291BF4(uint64_t a1, char a2)
{
  uint8x8_t v3 = v2;
  uint64_t v37 = *(void *)(type metadata accessor for NANPeer.Service(0) - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v2;
  sub_100010BCC(&qword_100484B10);
  char v8 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = result;
  if (*(void *)(v7 + 16))
  {
    int64_t v34 = v3;
    int64_t v11 = 0;
    uint64_t v12 = *(void *)(v7 + 64);
    char v36 = (void *)(v7 + 64);
    uint64_t v13 = 1 << *(unsigned char *)(v7 + 32);
    if (v13 < 64) {
      uint64_t v14 = ~(-1 << v13);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v12;
    int64_t v35 = (unint64_t)(v13 + 63) >> 6;
    uint64_t v16 = result + 64;
    while (1)
    {
      if (v15)
      {
        unint64_t v18 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v19 = v18 | (v11 << 6);
      }
      else
      {
        int64_t v20 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v36;
        if (v20 >= v35) {
          goto LABEL_34;
        }
        unint64_t v21 = v36[v20];
        ++v11;
        if (!v21)
        {
          int64_t v11 = v20 + 1;
          if (v20 + 1 >= v35) {
            goto LABEL_34;
          }
          unint64_t v21 = v36[v11];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v35)
            {
LABEL_34:
              if ((v8 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint8x8_t v3 = v34;
                goto LABEL_41;
              }
              uint64_t v33 = 1 << *(unsigned char *)(v7 + 32);
              if (v33 >= 64) {
                bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *char v36 = -1 << v33;
              }
              uint8x8_t v3 = v34;
              *(void *)(v7 + 16)  = 0;
              break;
            }
            unint64_t v21 = v36[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v11 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_43;
                }
                if (v11 >= v35) {
                  goto LABEL_34;
                }
                unint64_t v21 = v36[v11];
                ++v22;
                if (v21) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v11 = v22;
          }
        }
LABEL_21:
        unint64_t v15 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v11 << 6);
      }
      char v23 = *(unsigned char *)(*(void *)(v7 + 48) + v19);
      uint64_t v24 = *(void *)(v37 + 72);
      uint64_t v25 = *(void *)(v7 + 56) + v24 * v19;
      if (v8) {
        sub_100297894(v25, (uint64_t)v6, type metadata accessor for NANPeer.Service);
      }
      else {
        sub_10029782C(v25, (uint64_t)v6, type metadata accessor for NANPeer.Service);
      }
      uint64_t result = static Hasher._hash(seed:bytes:count:)();
      uint64_t v26 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v27 = result & ~v26;
      unint64_t v28 = v27 >> 6;
      if (((-1 << v27) & ~*(void *)(v16 + 8 * (v27 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v16 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v29 = 0;
        unint64_t v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v31 = v28 == v30;
          if (v28 == v30) {
            unint64_t v28 = 0;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v16 + 8 * v28);
        }
        while (v32 == -1);
        unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(void *)(v16 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(unsigned char *)(*(void *)(v10 + 48) + v17)  = v23;
      uint64_t result = sub_100297894((uint64_t)v6, *(void *)(v10 + 56) + v24 * v17, type metadata accessor for NANPeer.Service);
      ++*(void *)(v10 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *uint8x8_t v3 = v10;
  return result;
}

uint64_t sub_100291F84(uint64_t a1, char a2)
{
  uint8x8_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100010BCC((uint64_t *)&unk_100488390);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v32 = a2;
    BOOL v31 = v3;
    int64_t v8 = 0;
    int64_t v9 = (void *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        int64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v18 >= v13) {
          goto LABEL_31;
        }
        unint64_t v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v19 = v9[v8];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_31:
              if ((v32 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint8x8_t v3 = v31;
                goto LABEL_38;
              }
              uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
              if (v30 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *int64_t v9 = -1 << v30;
              }
              uint8x8_t v3 = v31;
              *(void *)(v5 + 16)  = 0;
              break;
            }
            unint64_t v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v19 = v9[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v20;
          }
        }
LABEL_21:
        unint64_t v12 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      char v21 = *(unsigned char *)(*(void *)(v5 + 48) + v17);
      char v22 = *(unsigned char *)(*(void *)(v5 + 56) + v17);
      uint64_t result = static Hasher._hash(seed:bytes:count:)();
      uint64_t v23 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(unsigned char *)(*(void *)(v7 + 48) + v15)  = v21;
      *(unsigned char *)(*(void *)(v7 + 56) + v15)  = v22;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint8x8_t v3 = v7;
  return result;
}

uint64_t sub_100292238(uint64_t a1, char a2)
{
  uint8x8_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100010BCC(&qword_100484B40);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v33 = a2;
    int64_t v8 = 0;
    int64_t v35 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v34 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        int64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v34) {
          goto LABEL_31;
        }
        unint64_t v18 = v35[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v34) {
            goto LABEL_31;
          }
          unint64_t v18 = v35[v8];
          if (!v18)
          {
            int64_t v19 = v17 + 2;
            if (v19 >= v34)
            {
LABEL_31:
              if ((v33 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint8x8_t v3 = v2;
                goto LABEL_38;
              }
              uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
              if (v32 >= 64) {
                bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *int64_t v35 = -1 << v32;
              }
              uint8x8_t v3 = v2;
              *(void *)(v5 + 16)  = 0;
              break;
            }
            unint64_t v18 = v35[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v34) {
                  goto LABEL_31;
                }
                unint64_t v18 = v35[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      int64_t v20 = (unsigned int *)(*(void *)(v5 + 48) + 8 * v16);
      uint64_t v21 = *((unsigned __int8 *)v20 + 5);
      uint64_t v22 = *((unsigned __int8 *)v20 + 4);
      uint64_t v23 = *v20;
      char v24 = *(unsigned char *)(*(void *)(v5 + 56) + v16);
      Hasher.init(_seed:)();
      Channel.hash(into:)((int)&v36, (v21 << 40) | (v22 << 32) | v23);
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v12 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v26) & ~*(void *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v12 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v13 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      uint64_t v14 = *(void *)(v7 + 48) + 8 * v13;
      *(_DWORD *)uint64_t v14 = v23;
      *(unsigned char *)(v14 + 4)  = v22;
      *(unsigned char *)(v14 + 5)  = v21;
      *(unsigned char *)(*(void *)(v7 + 56) + v13)  = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint8x8_t v3 = v7;
  return result;
}

uint64_t sub_100292528(uint64_t a1, int a2)
{
  return sub_100292570(a1, a2, type metadata accessor for NANPeer.Service.AuthenticationStatus, (uint64_t *)&unk_100487CD0, type metadata accessor for NANPeer.Service.AuthenticationStatus, type metadata accessor for NANPeer.Service.AuthenticationStatus);
}

uint64_t sub_100292570(uint64_t a1, int a2, uint64_t (*a3)(void), uint64_t *a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v46 = a6;
  char v51 = a5;
  int64_t v8 = v6;
  uint64_t v49 = *(void *)(a3(0) - 8);
  __chkstk_darwin();
  uint64_t v55 = (uint64_t)&v44 - v10;
  uint64_t v11 = *v6;
  sub_100010BCC(a4);
  int v50 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = result;
  if (*(void *)(v11 + 16))
  {
    int64_t v14 = 0;
    uint64_t v15 = *(void *)(v11 + 64);
    uint64_t v44 = v6;
    uint64_t v45 = (void *)(v11 + 64);
    uint64_t v16 = 1 << *(unsigned char *)(v11 + 32);
    if (v16 < 64) {
      uint64_t v17 = ~(-1 << v16);
    }
    else {
      uint64_t v17 = -1;
    }
    unint64_t v18 = v17 & v15;
    int64_t v47 = (unint64_t)(v16 + 63) >> 6;
    uint64_t v48 = v11;
    uint64_t v19 = result + 64;
    while (1)
    {
      if (v18)
      {
        uint64_t v52 = (v18 - 1) & v18;
        unint64_t v22 = __clz(__rbit64(v18)) | (v14 << 6);
      }
      else
      {
        int64_t v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v45;
        if (v23 >= v47) {
          goto LABEL_34;
        }
        unint64_t v24 = v45[v23];
        ++v14;
        if (!v24)
        {
          int64_t v14 = v23 + 1;
          if (v23 + 1 >= v47) {
            goto LABEL_34;
          }
          unint64_t v24 = v45[v14];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v47)
            {
LABEL_34:
              if ((v50 & 1) == 0)
              {
                uint64_t result = swift_release();
                int64_t v8 = v44;
                goto LABEL_41;
              }
              uint64_t v43 = 1 << *(unsigned char *)(v11 + 32);
              if (v43 >= 64) {
                bzero(v45, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v45 = -1 << v43;
              }
              int64_t v8 = v44;
              *(void *)(v11 + 16)  = 0;
              break;
            }
            unint64_t v24 = v45[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v14 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_43;
                }
                if (v14 >= v47) {
                  goto LABEL_34;
                }
                unint64_t v24 = v45[v14];
                ++v25;
                if (v24) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v14 = v25;
          }
        }
LABEL_21:
        uint64_t v52 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      uint64_t v26 = *(void *)(v11 + 56);
      unint64_t v27 = (Swift::UInt8 *)(*(void *)(v11 + 48) - v22 + 8 * v22);
      Swift::UInt8 v28 = *v27;
      uint64_t v29 = v27[1];
      uint64_t v30 = v27[2];
      uint64_t v31 = v27[3];
      uint64_t v32 = v27[4];
      uint64_t v33 = v27[5];
      uint64_t v34 = v27[6];
      uint64_t v35 = v26 + *(void *)(v49 + 72) * v22;
      uint64_t v53 = *(void *)(v49 + 72);
      int64_t v54 = v14;
      if (v50) {
        sub_100297894(v35, v55, v51);
      }
      else {
        sub_10029782C(v35, v55, v46);
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v28);
      NANClusterChangeEvent.hash(into:)((int)&v56, (v33 << 32) | (v34 << 40) | (v32 << 24) | (v31 << 16) | (v30 << 8) | v29);
      uint64_t result = Hasher._finalize()();
      uint64_t v36 = -1 << *(unsigned char *)(v13 + 32);
      unint64_t v37 = result & ~v36;
      unint64_t v38 = v37 >> 6;
      if (((-1 << v37) & ~*(void *)(v19 + 8 * (v37 >> 6))) != 0)
      {
        unint64_t v20 = __clz(__rbit64((-1 << v37) & ~*(void *)(v19 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v39 = 0;
        unint64_t v40 = (unint64_t)(63 - v36) >> 6;
        do
        {
          if (++v38 == v40 && (v39 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v41 = v38 == v40;
          if (v38 == v40) {
            unint64_t v38 = 0;
          }
          v39 |= v41;
          uint64_t v42 = *(void *)(v19 + 8 * v38);
        }
        while (v42 == -1);
        unint64_t v20 = __clz(__rbit64(~v42)) + (v38 << 6);
      }
      *(void *)(v19 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      uint64_t v21 = (Swift::UInt8 *)(*(void *)(v13 + 48) - v20 + 8 * v20);
      *uint64_t v21 = v28;
      v21[1]  = v29;
      _OWORD v21[2] = v30;
      v21[3]  = v31;
      v21[4]  = v32;
      v21[5]  = v33;
      v21[6]  = v34;
      uint64_t result = sub_100297894(v55, *(void *)(v13 + 56) + v53 * v20, v51);
      ++*(void *)(v13 + 16);
      uint64_t v11 = v48;
      int64_t v14 = v54;
      unint64_t v18 = v52;
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *int64_t v8 = v13;
  return result;
}

uint64_t sub_10029297C(uint64_t a1, char a2)
{
  uint8x8_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100010BCC((uint64_t *)&unk_10047CFA0);
  char v42 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    unint64_t v40 = (void *)(v5 + 64);
    uint64_t v41 = v5;
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v39 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        uint64_t v43 = (v11 - 1) & v11;
        int64_t v44 = v8;
        unint64_t v19 = __clz(__rbit64(v11)) | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v40;
        if (v20 >= v39) {
          goto LABEL_33;
        }
        unint64_t v21 = v40[v20];
        int64_t v22 = v8 + 1;
        if (!v21)
        {
          int64_t v22 = v20 + 1;
          if (v20 + 1 >= v39) {
            goto LABEL_33;
          }
          unint64_t v21 = v40[v22];
          if (!v21)
          {
            int64_t v23 = v20 + 2;
            if (v23 >= v39)
            {
LABEL_33:
              if ((v42 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint8x8_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
              if (v38 >= 64) {
                bzero(v40, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *unint64_t v40 = -1 << v38;
              }
              uint8x8_t v3 = v2;
              *(void *)(v5 + 16)  = 0;
              break;
            }
            unint64_t v21 = v40[v23];
            if (!v21)
            {
              while (1)
              {
                int64_t v22 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_42;
                }
                if (v22 >= v39) {
                  goto LABEL_33;
                }
                unint64_t v21 = v40[v22];
                ++v23;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v22 = v23;
          }
        }
LABEL_30:
        uint64_t v43 = (v21 - 1) & v21;
        int64_t v44 = v22;
        unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
      }
      uint64_t v28 = *(void *)(v5 + 56);
      uint64_t v29 = (unsigned __int8 *)(*(void *)(v5 + 48) + 6 * v19);
      uint64_t v30 = *v29;
      uint64_t v31 = v29[1];
      uint64_t v32 = v29[2];
      uint64_t v33 = v29[3];
      uint64_t v34 = v29[4];
      uint64_t v35 = v29[5];
      uint64_t v36 = (uint64_t *)(v28 + 16 * v19);
      uint64_t v37 = v36[1];
      uint64_t v45 = *v36;
      if ((v42 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      NANClusterChangeEvent.hash(into:)((int)&v46, (v34 << 32) | (v35 << 40) | (v33 << 24) | (v32 << 16) | (v31 << 8) | v30);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v26 = v15 == v25;
          if (v15 == v25) {
            unint64_t v15 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v12 + 8 * v15);
        }
        while (v27 == -1);
        unint64_t v16 = __clz(__rbit64(~v27)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t v17 = (unsigned char *)(*(void *)(v7 + 48) + 6 * v16);
      *uint64_t v17 = v30;
      v17[1]  = v31;
      v17[2]  = v32;
      v17[3]  = v33;
      v17[4]  = v34;
      void v17[5] = v35;
      unint64_t v18 = (void *)(*(void *)(v7 + 56) + 16 * v16);
      int64_t v8 = v44;
      *unint64_t v18 = v45;
      v18[1]  = v37;
      ++*(void *)(v7 + 16);
      uint64_t v5 = v41;
      unint64_t v11 = v43;
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint8x8_t v3 = v7;
  return result;
}

uint64_t sub_100292CC8(uint64_t a1, char a2)
{
  uint8x8_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100010BCC((uint64_t *)&unk_100484B00);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v38 = a2;
    int64_t v8 = 0;
    unint64_t v40 = (void *)(v5 + 64);
    uint64_t v41 = v5;
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v39 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        int64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v40;
        if (v18 >= v39) {
          goto LABEL_31;
        }
        unint64_t v19 = v40[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v39) {
            goto LABEL_31;
          }
          unint64_t v19 = v40[v8];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v39)
            {
LABEL_31:
              if ((v38 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint8x8_t v3 = v2;
                goto LABEL_38;
              }
              uint64_t v37 = 1 << *(unsigned char *)(v5 + 32);
              if (v37 >= 64) {
                bzero(v40, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *unint64_t v40 = -1 << v37;
              }
              uint8x8_t v3 = v2;
              *(void *)(v5 + 16)  = 0;
              break;
            }
            unint64_t v19 = v40[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v39) {
                  goto LABEL_31;
                }
                unint64_t v19 = v40[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v20;
          }
        }
LABEL_21:
        unint64_t v11 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      uint64_t v21 = *(void *)(v5 + 56);
      int64_t v22 = (unsigned int *)(*(void *)(v5 + 48) + 8 * v17);
      uint64_t v23 = *((unsigned __int8 *)v22 + 5);
      uint64_t v24 = *((unsigned __int8 *)v22 + 4);
      uint64_t v25 = *v22;
      BOOL v26 = (uint64_t *)(v21 + 24 * v17);
      uint64_t v27 = v26[2];
      uint64_t v29 = *v26;
      uint64_t v28 = v26[1];
      Hasher.init(_seed:)();
      Channel.hash(into:)((int)&v42, (v23 << 40) | (v24 << 32) | v25);
      uint64_t result = Hasher._finalize()();
      uint64_t v30 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v31 = result & ~v30;
      unint64_t v32 = v31 >> 6;
      if (((-1 << v31) & ~*(void *)(v12 + 8 * (v31 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v31) & ~*(void *)(v12 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v33 = 0;
        unint64_t v34 = (unint64_t)(63 - v30) >> 6;
        do
        {
          if (++v32 == v34 && (v33 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v35 = v32 == v34;
          if (v32 == v34) {
            unint64_t v32 = 0;
          }
          v33 |= v35;
          uint64_t v36 = *(void *)(v12 + 8 * v32);
        }
        while (v36 == -1);
        unint64_t v13 = __clz(__rbit64(~v36)) + (v32 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      uint64_t v14 = *(void *)(v7 + 48) + 8 * v13;
      *(_DWORD *)uint64_t v14 = v25;
      *(unsigned char *)(v14 + 4)  = v24;
      *(unsigned char *)(v14 + 5)  = v23;
      unint64_t v15 = (void *)(*(void *)(v7 + 56) + 24 * v13);
      *unint64_t v15 = v29;
      v15[1]  = v28;
      _OWORD v15[2] = v27;
      ++*(void *)(v7 + 16);
      uint64_t v5 = v41;
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint8x8_t v3 = v7;
  return result;
}

uint64_t sub_100292FDC(uint64_t a1, char a2)
{
  uint8x8_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100010BCC(&qword_100484AE0);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v30 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v29 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        int64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v19 >= v29) {
          goto LABEL_33;
        }
        unint64_t v20 = v30[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v29) {
            goto LABEL_33;
          }
          unint64_t v20 = v30[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v29)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint8x8_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v28 = 1 << *(unsigned char *)(v5 + 32);
              if (v28 >= 64) {
                bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                void *v30 = -1 << v28;
              }
              uint8x8_t v3 = v2;
              *(void *)(v5 + 16)  = 0;
              break;
            }
            unint64_t v20 = v30[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v29) {
                  goto LABEL_33;
                }
                unint64_t v20 = v30[v8];
                ++v21;
                if (v20) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_30:
        unint64_t v11 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      Swift::UInt8 v26 = *(unsigned char *)(*(void *)(v5 + 48) + v18);
      uint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v18);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v26);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v24 = v15 == v23;
          if (v15 == v23) {
            unint64_t v15 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v12 + 8 * v15);
        }
        while (v25 == -1);
        unint64_t v16 = __clz(__rbit64(~v25)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(unsigned char *)(*(void *)(v7 + 48) + v16)  = v26;
      *(void *)(*(void *)(v7 + 56) + 8 * v16)  = v27;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint8x8_t v3 = v7;
  return result;
}

uint64_t sub_1002932B0(uint64_t a1, int a2)
{
  uint8x8_t v3 = v2;
  uint64_t v44 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v44 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_100010BCC(&qword_100484BB0);
  int v45 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  unint64_t v40 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v12;
  char v38 = v2;
  int64_t v39 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v41 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
  char v46 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
  uint64_t v15 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  uint64_t v42 = v8;
  uint64_t v43 = v7;
  while (1)
  {
    if (v14)
    {
      unint64_t v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v20 = v19 | (v17 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v39) {
      break;
    }
    char v22 = v40;
    unint64_t v23 = v40[v21];
    ++v17;
    if (!v23)
    {
      int64_t v17 = v21 + 1;
      if (v21 + 1 >= v39) {
        goto LABEL_34;
      }
      unint64_t v23 = v40[v17];
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v39)
        {
LABEL_34:
          swift_release();
          uint8x8_t v3 = v38;
          if ((v45 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = v40[v24];
        if (!v23)
        {
          while (1)
          {
            int64_t v17 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v39) {
              goto LABEL_34;
            }
            unint64_t v23 = v40[v17];
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v17 = v24;
      }
    }
LABEL_21:
    unint64_t v14 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_22:
    uint64_t v25 = v5;
    uint64_t v26 = *(void *)(v5 + 72);
    unint64_t v27 = *(void *)(v8 + 48) + v26 * v20;
    uint64_t v28 = v43;
    uint64_t v29 = v44;
    if (v45)
    {
      (*v46)(v43, v27, v44);
      sub_10006EF50((long long *)(*(void *)(v8 + 56) + 40 * v20), (uint64_t)v47);
    }
    else
    {
      (*v41)(v43, v27, v44);
      sub_100035FD4(*(void *)(v8 + 56) + 40 * v20, (uint64_t)v47);
    }
    sub_10001011C(&qword_100487710, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v30 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v31 = result & ~v30;
    unint64_t v32 = v31 >> 6;
    if (((-1 << v31) & ~*(void *)(v15 + 8 * (v31 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v31) & ~*(void *)(v15 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v33 = 0;
      unint64_t v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v35 = v32 == v34;
        if (v32 == v34) {
          unint64_t v32 = 0;
        }
        v33 |= v35;
        uint64_t v36 = *(void *)(v15 + 8 * v32);
      }
      while (v36 == -1);
      unint64_t v18 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    (*v46)((char *)(*(void *)(v10 + 48) + v26 * v18), (unint64_t)v28, v29);
    uint64_t result = sub_10006EF50(v47, *(void *)(v10 + 56) + 40 * v18);
    ++*(void *)(v10 + 16);
    uint64_t v5 = v25;
    uint64_t v8 = v42;
  }
  swift_release();
  uint8x8_t v3 = v38;
  char v22 = v40;
  if ((v45 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v37 = 1 << *(unsigned char *)(v8 + 32);
  if (v37 >= 64) {
    bzero(v22, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v22 = -1 << v37;
  }
  *(void *)(v8 + 16)  = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint8x8_t v3 = v10;
  return result;
}

uint64_t sub_100293700(uint64_t a1, int a2, uint64_t (*a3)(void), uint64_t *a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v48 = a6;
  int64_t v54 = a5;
  uint64_t v8 = v6;
  uint64_t v52 = *(void *)(a3(0) - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v45 - v10;
  uint64_t v12 = *v6;
  sub_100010BCC(a4);
  int v53 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v14 = result;
  if (*(void *)(v12 + 16))
  {
    int64_t v15 = 0;
    uint64_t v16 = *(void *)(v12 + 64);
    char v46 = v8;
    int64_t v47 = (void *)(v12 + 64);
    uint64_t v17 = 1 << *(unsigned char *)(v12 + 32);
    if (v17 < 64) {
      uint64_t v18 = ~(-1 << v17);
    }
    else {
      uint64_t v18 = -1;
    }
    unint64_t v19 = v18 & v16;
    int64_t v49 = (unint64_t)(v17 + 63) >> 6;
    uint64_t v50 = v12;
    uint64_t v20 = result + 64;
    char v51 = v11;
    while (1)
    {
      if (v19)
      {
        uint64_t v55 = (v19 - 1) & v19;
        unint64_t v23 = __clz(__rbit64(v19)) | (v15 << 6);
      }
      else
      {
        int64_t v24 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v47;
        if (v24 >= v49) {
          goto LABEL_34;
        }
        unint64_t v25 = v47[v24];
        ++v15;
        if (!v25)
        {
          int64_t v15 = v24 + 1;
          if (v24 + 1 >= v49) {
            goto LABEL_34;
          }
          unint64_t v25 = v47[v15];
          if (!v25)
          {
            int64_t v26 = v24 + 2;
            if (v26 >= v49)
            {
LABEL_34:
              if ((v53 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v8 = v46;
                goto LABEL_41;
              }
              uint64_t v44 = 1 << *(unsigned char *)(v12 + 32);
              if (v44 >= 64) {
                bzero(v47, ((unint64_t)(v44 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *int64_t v47 = -1 << v44;
              }
              uint64_t v8 = v46;
              *(void *)(v12 + 16)  = 0;
              break;
            }
            unint64_t v25 = v47[v26];
            if (!v25)
            {
              while (1)
              {
                int64_t v15 = v26 + 1;
                if (__OFADD__(v26, 1)) {
                  goto LABEL_43;
                }
                if (v15 >= v49) {
                  goto LABEL_34;
                }
                unint64_t v25 = v47[v15];
                ++v26;
                if (v25) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v15 = v26;
          }
        }
LABEL_21:
        uint64_t v55 = (v25 - 1) & v25;
        unint64_t v23 = __clz(__rbit64(v25)) + (v15 << 6);
      }
      uint64_t v27 = *(void *)(v12 + 56);
      uint64_t v28 = (unsigned __int8 *)(*(void *)(v12 + 48) + 6 * v23);
      uint64_t v29 = *v28;
      uint64_t v30 = v28[1];
      uint64_t v31 = v28[2];
      uint64_t v32 = v28[3];
      uint64_t v33 = v28[4];
      uint64_t v34 = v28[5];
      uint64_t v35 = *(void *)(v52 + 72);
      uint64_t v36 = v27 + v35 * v23;
      int64_t v56 = v15;
      if (v53) {
        sub_100297894(v36, (uint64_t)v11, v54);
      }
      else {
        sub_10029782C(v36, (uint64_t)v11, v48);
      }
      Hasher.init(_seed:)();
      NANClusterChangeEvent.hash(into:)((int)&v57, (v33 << 32) | (v34 << 40) | (v32 << 24) | (v31 << 16) | (v30 << 8) | v29);
      uint64_t result = Hasher._finalize()();
      uint64_t v37 = -1 << *(unsigned char *)(v14 + 32);
      unint64_t v38 = result & ~v37;
      unint64_t v39 = v38 >> 6;
      if (((-1 << v38) & ~*(void *)(v20 + 8 * (v38 >> 6))) != 0)
      {
        unint64_t v21 = __clz(__rbit64((-1 << v38) & ~*(void *)(v20 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0;
        uint64_t v11 = v51;
      }
      else
      {
        char v40 = 0;
        unint64_t v41 = (unint64_t)(63 - v37) >> 6;
        uint64_t v11 = v51;
        do
        {
          if (++v39 == v41 && (v40 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v42 = v39 == v41;
          if (v39 == v41) {
            unint64_t v39 = 0;
          }
          v40 |= v42;
          uint64_t v43 = *(void *)(v20 + 8 * v39);
        }
        while (v43 == -1);
        unint64_t v21 = __clz(__rbit64(~v43)) + (v39 << 6);
      }
      *(void *)(v20 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      char v22 = (unsigned char *)(*(void *)(v14 + 48) + 6 * v21);
      *char v22 = v29;
      v22[1]  = v30;
      v22[2]  = v31;
      void v22[3] = v32;
      v22[4]  = v33;
      v22[5]  = v34;
      uint64_t result = sub_100297894((uint64_t)v11, *(void *)(v14 + 56) + v35 * v21, v54);
      ++*(void *)(v14 + 16);
      uint64_t v12 = v50;
      unint64_t v19 = v55;
      int64_t v15 = v56;
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *uint64_t v8 = v14;
  return result;
}

uint64_t sub_100293B00(uint64_t a1, int a2)
{
  uint8x8_t v3 = v2;
  uint64_t v45 = *(void *)(sub_100010BCC((uint64_t *)&unk_100484A90) - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v2;
  sub_100010BCC((uint64_t *)&unk_100488300);
  int v46 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v9 = result;
  if (*(void *)(v7 + 16))
  {
    int64_t v10 = 0;
    uint64_t v11 = *(void *)(v7 + 64);
    char v40 = v3;
    unint64_t v41 = (void *)(v7 + 64);
    uint64_t v12 = 1 << *(unsigned char *)(v7 + 32);
    if (v12 < 64) {
      uint64_t v13 = ~(-1 << v12);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v14 = v13 & v11;
    int64_t v42 = (unint64_t)(v12 + 63) >> 6;
    uint64_t v43 = v7;
    uint64_t v15 = result + 64;
    uint64_t v44 = v6;
    while (1)
    {
      if (v14)
      {
        uint64_t v47 = (v14 - 1) & v14;
        unint64_t v18 = __clz(__rbit64(v14)) | (v10 << 6);
      }
      else
      {
        int64_t v19 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v41;
        if (v19 >= v42) {
          goto LABEL_34;
        }
        unint64_t v20 = v41[v19];
        ++v10;
        if (!v20)
        {
          int64_t v10 = v19 + 1;
          if (v19 + 1 >= v42) {
            goto LABEL_34;
          }
          unint64_t v20 = v41[v10];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v42)
            {
LABEL_34:
              if ((v46 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint8x8_t v3 = v40;
                goto LABEL_41;
              }
              uint64_t v39 = 1 << *(unsigned char *)(v7 + 32);
              if (v39 >= 64) {
                bzero(v41, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *unint64_t v41 = -1 << v39;
              }
              uint8x8_t v3 = v40;
              *(void *)(v7 + 16)  = 0;
              break;
            }
            unint64_t v20 = v41[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v10 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_43;
                }
                if (v10 >= v42) {
                  goto LABEL_34;
                }
                unint64_t v20 = v41[v10];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v10 = v21;
          }
        }
LABEL_21:
        uint64_t v47 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v10 << 6);
      }
      uint64_t v22 = *(void *)(v7 + 56);
      unint64_t v23 = (unsigned __int8 *)(*(void *)(v7 + 48) + 6 * v18);
      uint64_t v24 = *v23;
      uint64_t v25 = v23[1];
      uint64_t v26 = v23[2];
      uint64_t v27 = v23[3];
      uint64_t v28 = v23[4];
      uint64_t v29 = v23[5];
      uint64_t v30 = *(void *)(v45 + 72);
      uint64_t v31 = v22 + v30 * v18;
      int64_t v48 = v10;
      if (v46) {
        sub_100297110(v31, (uint64_t)v6);
      }
      else {
        sub_1000136F4(v31, (uint64_t)v6, (uint64_t *)&unk_100484A90);
      }
      Hasher.init(_seed:)();
      NANClusterChangeEvent.hash(into:)((int)&v49, (v28 << 32) | (v29 << 40) | (v27 << 24) | (v26 << 16) | (v25 << 8) | v24);
      uint64_t result = Hasher._finalize()();
      uint64_t v32 = -1 << *(unsigned char *)(v9 + 32);
      unint64_t v33 = result & ~v32;
      unint64_t v34 = v33 >> 6;
      if (((-1 << v33) & ~*(void *)(v15 + 8 * (v33 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v33) & ~*(void *)(v15 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
        uint64_t v6 = v44;
      }
      else
      {
        char v35 = 0;
        unint64_t v36 = (unint64_t)(63 - v32) >> 6;
        uint64_t v6 = v44;
        do
        {
          if (++v34 == v36 && (v35 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v37 = v34 == v36;
          if (v34 == v36) {
            unint64_t v34 = 0;
          }
          v35 |= v37;
          uint64_t v38 = *(void *)(v15 + 8 * v34);
        }
        while (v38 == -1);
        unint64_t v16 = __clz(__rbit64(~v38)) + (v34 << 6);
      }
      *(void *)(v15 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t v17 = (unsigned char *)(*(void *)(v9 + 48) + 6 * v16);
      *uint64_t v17 = v24;
      v17[1]  = v25;
      v17[2]  = v26;
      v17[3]  = v27;
      v17[4]  = v28;
      void v17[5] = v29;
      uint64_t result = sub_100297110((uint64_t)v6, *(void *)(v9 + 56) + v30 * v16);
      ++*(void *)(v9 + 16);
      uint64_t v7 = v43;
      unint64_t v14 = v47;
      int64_t v10 = v48;
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *uint8x8_t v3 = v9;
  return result;
}

uint64_t sub_100293EF4(uint64_t a1, int a2)
{
  uint8x8_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_100010BCC((uint64_t *)&unk_1004883B0);
  int v46 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  int64_t v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  char v40 = v3;
  int64_t v41 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v45 = v6;
  uint64_t v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    uint64_t v25 = v42;
    unint64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v26 = v42[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          uint8x8_t v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            unint64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v27;
      }
    }
LABEL_21:
    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v45 + 72);
    unint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      id v30 = *(id *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      id v30 = *(id *)(*(void *)(v11 + 56) + 8 * v23);
    }
    sub_10001011C(&qword_100487710, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21)  = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint8x8_t v3 = v40;
  uint64_t v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v25 = -1 << v38;
  }
  *(void *)(v11 + 16)  = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint8x8_t v3 = v12;
  return result;
}

uint64_t sub_100294318(uint64_t a1, int a2)
{
  uint8x8_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_100010BCC(&qword_100484B50);
  int v46 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  int64_t v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  char v40 = v3;
  int64_t v41 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v45 = v6;
  uint64_t v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    uint64_t v25 = v42;
    unint64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v26 = v42[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          uint8x8_t v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            unint64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v27;
      }
    }
LABEL_21:
    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v45 + 72);
    unint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
      swift_bridgeObjectRetain();
    }
    sub_10001011C(&qword_100487710, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21)  = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint8x8_t v3 = v40;
  uint64_t v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v25 = -1 << v38;
  }
  *(void *)(v11 + 16)  = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint8x8_t v3 = v12;
  return result;
}

uint64_t sub_10029473C(uint64_t a1, char a2)
{
  uint8x8_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100010BCC((uint64_t *)&unk_100484AF0);
  char v39 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v37 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v36 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    for (i = v5; ; uint64_t v5 = i)
    {
      if (v10)
      {
        unint64_t v19 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v20 = v19 | (v13 << 6);
      }
      else
      {
        int64_t v21 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v21 >= v36) {
          goto LABEL_33;
        }
        unint64_t v22 = v37[v21];
        ++v13;
        if (!v22)
        {
          int64_t v13 = v21 + 1;
          if (v21 + 1 >= v36) {
            goto LABEL_33;
          }
          unint64_t v22 = v37[v13];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v36)
            {
LABEL_33:
              swift_release();
              uint8x8_t v3 = v2;
              if (v39)
              {
                uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
                if (v35 >= 64) {
                  bzero(v37, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v35;
                }
                *(void *)(v5 + 16)  = 0;
              }
              break;
            }
            unint64_t v22 = v37[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v13 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_40;
                }
                if (v13 >= v36) {
                  goto LABEL_33;
                }
                unint64_t v22 = v37[v13];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v13 = v23;
          }
        }
LABEL_30:
        unint64_t v10 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v13 << 6);
      }
      uint64_t v28 = *(void *)(v5 + 56);
      uint64_t v29 = *(void *)(v5 + 48) + 24 * v20;
      uint64_t v31 = *(void *)v29;
      uint64_t v30 = *(void *)(v29 + 8);
      char v32 = *(unsigned char *)(v29 + 16);
      Swift::UInt8 v33 = *(unsigned char *)(v29 + 17);
      uint64_t v34 = *(void *)(v28 + 8 * v20);
      if ((v39 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.lowercased()();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(v33);
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v26 = v16 == v25;
          if (v16 == v25) {
            unint64_t v16 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v11 + 8 * v16);
        }
        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = *(void *)(v7 + 48) + 24 * v17;
      *(void *)uint64_t v18 = v31;
      *(void *)(v18 + 8)  = v30;
      *(unsigned char *)(v18 + 16)  = v32;
      *(unsigned char *)(v18 + 17)  = v33;
      *(void *)(*(void *)(v7 + 56) + 8 * v17)  = v34;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint8x8_t v3 = v7;
  return result;
}

uint64_t sub_100294AAC(uint64_t a1, char a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_10039F7B4(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    char v14 = v9;
    uint64_t v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      unint64_t v16 = *v4;
      if (v14)
      {
LABEL_8:
        uint64_t v17 = v16[7];
        uint64_t v18 = type metadata accessor for NANAttribute(0);
        return sub_1002977C4(a1, v17 + *(void *)(*(void *)(v18 - 8) + 72) * v10, type metadata accessor for NANAttribute);
      }
      return sub_1002960F4(v10, a2, a1, v16, type metadata accessor for NANAttribute, type metadata accessor for NANAttribute);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1003A1D1C();
      goto LABEL_7;
    }
    sub_10028FD84(v13, a3 & 1);
    unint64_t v20 = sub_10039F7B4(a2);
    if ((v14 & 1) == (v21 & 1))
    {
      unint64_t v10 = v20;
      unint64_t v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      return sub_1002960F4(v10, a2, a1, v16, type metadata accessor for NANAttribute, type metadata accessor for NANAttribute);
    }
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100294C08(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1002951E4(a1, a2, a3, a4, (void (*)(void))sub_1003A1D64, (uint64_t *)&unk_100484AC0);
}

unint64_t sub_100294C28(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  uint64_t v8 = a2 & 0xFFFFFFFFFFFFLL;
  unint64_t v10 = sub_100031214(a2 & 0xFFFFFFFFFFFFLL);
  uint64_t v11 = v7[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v7[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      unint64_t result = swift_release();
      *(void *)(v17 + 8 * v10)  = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_1003A20D0();
    goto LABEL_7;
  }
  sub_100290748(v13, a3 & 1);
  unint64_t v19 = sub_100031214(v8);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_15:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v19;
  unint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return sub_100295EDC(v10, v8, a1, v16);
}

unint64_t sub_100294D50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = (void **)v5;
  uint64_t v11 = (void *)*v5;
  uint64_t v12 = a4 & 0xFFFFFFFFFFFFLL;
  unint64_t v14 = sub_100031214(a4 & 0xFFFFFFFFFFFFLL);
  uint64_t v15 = v11[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v11[3];
  if (v19 >= v17 && (a5 & 1) != 0)
  {
LABEL_7:
    char v20 = *v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7] + 24 * v14;
      unint64_t result = sub_10000C95C(*(void *)(v21 + 8), *(void *)(v21 + 16));
      *(_WORD *)uint64_t v21 = a1;
      *(unsigned char *)(v21 + 2)  = BYTE2(a1);
      *(unsigned char *)(v21 + 3)  = BYTE3(a1);
      *(unsigned char *)(v21 + 4)  = BYTE4(a1);
      *(unsigned char *)(v21 + 5)  = BYTE5(a1);
      *(unsigned char *)(v21 + 6)  = BYTE6(a1);
      *(void *)(v21 + 8)  = a2;
      *(void *)(v21 + 16)  = a3;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1003A228C();
    goto LABEL_7;
  }
  sub_100290A84(v17, a5 & 1);
  unint64_t v23 = sub_100031214(v12);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_15:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  char v20 = *v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:

  return sub_100295F50(v14, v12, a1 & 0xFFFFFFFFFFFFFFLL, a2, a3, v20);
}

uint64_t sub_100294ECC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  uint64_t v8 = a2 & 0xFFFFFFFFFFFFFFLL;
  unint64_t v10 = sub_100031130(a2 & 0xFFFFFFFFFFFFFFLL);
  uint64_t v11 = v7[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    char v14 = v9;
    uint64_t v15 = v7[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      BOOL v16 = *v4;
      if (v14)
      {
LABEL_8:
        uint64_t v17 = v16[7];
        uint64_t v18 = type metadata accessor for NANInternetSharingStatistics.Requester();
        return sub_1002977C4(a1, v17 + *(void *)(*(void *)(v18 - 8) + 72) * v10, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
      }
      return sub_1002961C8(v10, v8, a1, v16, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1003A2468();
      goto LABEL_7;
    }
    sub_100292570(v13, a3 & 1, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester, &qword_10047CF18, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
    unint64_t v20 = sub_100031130(v8);
    if ((v14 & 1) == (v21 & 1))
    {
      unint64_t v10 = v20;
      BOOL v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      return sub_1002961C8(v10, v8, a1, v16, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
    }
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

id sub_10029506C(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_100011CE0((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  id result = (id)(v10 + v11);
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= (uint64_t)result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= (uint64_t)result && (a3 & 1) == 0)
  {
    id result = sub_1003A24B0();
LABEL_7:
    uint64_t v15 = (void *)*v4;
    if (v13)
    {
LABEL_8:
      *(void *)(v15[7] + 8 * v9)  = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_10000B45C((uint64_t)result, a3 & 1);
  id result = (id)sub_100011CE0((uint64_t)a2);
  if ((v13 & 1) != (v16 & 1))
  {
LABEL_17:
    type metadata accessor for XPCSession(0);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v9 = (unint64_t)result;
  uint64_t v15 = (void *)*v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  v15[(v9 >> 6) + 8] |= 1 << v9;
  uint64_t v17 = 8 * v9;
  *(void *)(v15[6] + v17)  = a2;
  *(void *)(v15[7] + v17)  = a1;
  uint64_t v18 = v15[2];
  BOOL v19 = __OFADD__(v18, 1);
  uint64_t v20 = v18 + 1;
  if (v19)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  _OWORD v15[2] = v20;

  return a2;
}

uint64_t sub_1002951C4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1002951E4(a1, a2, a3, a4, (void (*)(void))sub_1003A269C, (uint64_t *)&unk_1004883C0);
}

uint64_t sub_1002951E4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), uint64_t *a6)
{
  uint64_t v30 = a6;
  uint64_t v31 = a1;
  char v8 = (void **)v6;
  uint64_t v32 = a2;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (void *)*v6;
  unint64_t v17 = sub_1000316CC(a3);
  uint64_t v18 = v15[2];
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v21 = v16;
  uint64_t v22 = v15[3];
  if (v22 >= v20 && (a4 & 1) != 0)
  {
LABEL_7:
    unint64_t v23 = *v8;
    if (v21)
    {
LABEL_8:
      char v24 = (void *)(v23[7] + 16 * v17);
      uint64_t result = swift_release();
      uint64_t v26 = v32;
      *char v24 = v31;
      v24[1]  = v26;
      return result;
    }
    goto LABEL_11;
  }
  if (v22 >= v20 && (a4 & 1) == 0)
  {
    a5();
    goto LABEL_7;
  }
  sub_100290E80(v20, a4 & 1, v30);
  unint64_t v27 = sub_1000316CC(a3);
  if ((v21 & 1) != (v28 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v17 = v27;
  unint64_t v23 = *v8;
  if (v21) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a3, v11);
  return sub_100296008(v17, (uint64_t)v14, v31, v32, v23);
}

uint64_t sub_1002953A8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  uint64_t v8 = a2 & 0xFFFFFFFFFFFFLL;
  unint64_t v10 = sub_100031214(a2 & 0xFFFFFFFFFFFFLL);
  uint64_t v11 = v7[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v7[3];
  if (v15 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    char v16 = *v4;
    if (v14)
    {
LABEL_8:
      *(void *)(v16[7] + 8 * v10)  = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1003A294C();
    goto LABEL_7;
  }
  sub_1002912AC(result, a3 & 1);
  uint64_t result = sub_100031214(v8);
  if ((v14 & 1) != (v17 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = result;
  char v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return sub_100295EDC(v10, v8, a1, v16);
}

uint64_t sub_1002954C4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_10000DDE0(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1003A2AF4();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v19 + 8 * v12)  = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_1002915DC(v15, a4 & 1);
  uint64_t v21 = sub_10000DDE0(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  uint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  unint64_t v23 = (uint64_t *)(v18[6] + 16 * v12);
  *unint64_t v23 = a2;
  v23[1]  = a3;
  *(void *)(v18[7] + 8 * v12)  = a1;
  uint64_t v24 = v18[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v18[2] = v26;

  return swift_bridgeObjectRetain();
}

uint64_t sub_100295634(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  uint64_t v8 = a2 & 0xFFFFFFFFFFFFFFLL;
  unint64_t v10 = sub_100031130(a2 & 0xFFFFFFFFFFFFFFLL);
  uint64_t v11 = v7[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    char v14 = v9;
    uint64_t v15 = v7[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      char v16 = *v4;
      if (v14)
      {
LABEL_8:
        uint64_t v17 = v16[7];
        uint64_t v18 = type metadata accessor for NANPeer.Service.AuthenticationStatus(0);
        return sub_1002977C4(a1, v17 + *(void *)(*(void *)(v18 - 8) + 72) * v10, type metadata accessor for NANPeer.Service.AuthenticationStatus);
      }
      return sub_1002961C8(v10, v8, a1, v16, type metadata accessor for NANPeer.Service.AuthenticationStatus, type metadata accessor for NANPeer.Service.AuthenticationStatus);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1003A3444();
      goto LABEL_7;
    }
    sub_100292570(v13, a3 & 1, type metadata accessor for NANPeer.Service.AuthenticationStatus, (uint64_t *)&unk_100487CD0, type metadata accessor for NANPeer.Service.AuthenticationStatus, type metadata accessor for NANPeer.Service.AuthenticationStatus);
    unint64_t v20 = sub_100031130(v8);
    if ((v14 & 1) == (v21 & 1))
    {
      unint64_t v10 = v20;
      char v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      return sub_1002961C8(v10, v8, a1, v16, type metadata accessor for NANPeer.Service.AuthenticationStatus, type metadata accessor for NANPeer.Service.AuthenticationStatus);
    }
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1002957D4(long long *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v12 = (void *)*v3;
  unint64_t v14 = sub_1000316CC(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_1003A3C28();
      goto LABEL_7;
    }
    sub_1002932B0(v17, a3 & 1);
    unint64_t v23 = sub_1000316CC(a2);
    if ((v18 & 1) == (v24 & 1))
    {
      unint64_t v14 = v23;
      unint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_1002962A8(v14, (uint64_t)v11, a1, v20);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v21 = v20[7] + 40 * v14;
  sub_100010754(v21);

  return sub_10006EF50(a1, v21);
}

uint64_t sub_1002959B0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  uint64_t v8 = a2 & 0xFFFFFFFFFFFFLL;
  unint64_t v10 = sub_100031214(a2 & 0xFFFFFFFFFFFFLL);
  uint64_t v11 = v7[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    char v14 = v9;
    uint64_t v15 = v7[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      BOOL v16 = *v4;
      if (v14)
      {
LABEL_8:
        uint64_t v17 = v16[7];
        uint64_t v18 = type metadata accessor for NANPeer(0);
        return sub_1002977C4(a1, v17 + *(void *)(*(void *)(v18 - 8) + 72) * v10, type metadata accessor for NANPeer);
      }
      return sub_100296518(v10, v8, a1, v16, type metadata accessor for NANPeer, type metadata accessor for NANPeer);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1003A3ED4();
      goto LABEL_7;
    }
    sub_100293700(v13, a3 & 1, type metadata accessor for NANPeer, &qword_100487CC0, type metadata accessor for NANPeer, type metadata accessor for NANPeer);
    unint64_t v20 = sub_100031214(v8);
    if ((v14 & 1) == (v21 & 1))
    {
      unint64_t v10 = v20;
      BOOL v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      return sub_100296518(v10, v8, a1, v16, type metadata accessor for NANPeer, type metadata accessor for NANPeer);
    }
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_100295B50(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v12 = (void *)*v3;
  unint64_t v14 = sub_1000316CC(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];

      *(void *)(v21 + 8 * v14)  = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_1003A441C();
    goto LABEL_7;
  }
  sub_100293EF4(v17, a3 & 1);
  unint64_t v22 = sub_1000316CC(a2);
  if ((v18 & 1) != (v23 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v14 = v22;
  unint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  sub_100296434(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_100295CF8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  uint64_t v8 = a2 & 0xFFFFFFFFFFFFLL;
  unint64_t v10 = sub_100031214(a2 & 0xFFFFFFFFFFFFLL);
  uint64_t v11 = v7[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    char v14 = v9;
    uint64_t v15 = v7[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      BOOL v16 = *v4;
      if (v14)
      {
LABEL_8:
        uint64_t v17 = v16[7];
        uint64_t v18 = type metadata accessor for AWDLPeer(0);
        return sub_1002977C4(a1, v17 + *(void *)(*(void *)(v18 - 8) + 72) * v10, type metadata accessor for AWDLPeer);
      }
      return sub_100296518(v10, v8, a1, v16, type metadata accessor for AWDLPeer, type metadata accessor for AWDLPeer);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1003A2654();
      goto LABEL_7;
    }
    sub_100293700(v13, a3 & 1, type metadata accessor for AWDLPeer, &qword_100484AE8, type metadata accessor for AWDLPeer, type metadata accessor for AWDLPeer);
    unint64_t v20 = sub_100031214(v8);
    if ((v14 & 1) == (v21 & 1))
    {
      unint64_t v10 = v20;
      BOOL v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      return sub_100296518(v10, v8, a1, v16, type metadata accessor for AWDLPeer, type metadata accessor for AWDLPeer);
    }
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t sub_100295E98(unint64_t result, char a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(unsigned char *)(a4[6] + result)  = a2;
  *(void *)(a4[7] + 8 * result)  = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2]  = v6;
  }
  return result;
}

unint64_t sub_100295EDC(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  uint64_t v4 = a4[6] + 6 * result;
  *(_WORD *)uint64_t v4 = a2;
  *(unsigned char *)(v4 + 2)  = BYTE2(a2);
  *(unsigned char *)(v4 + 3)  = BYTE3(a2);
  *(unsigned char *)(v4 + 4)  = BYTE4(a2);
  *(unsigned char *)(v4 + 5)  = BYTE5(a2);
  *(void *)(a4[7] + 8 * result)  = a3;
  uint64_t v5 = a4[2];
  BOOL v6 = __OFADD__(v5, 1);
  uint64_t v7 = v5 + 1;
  if (v6) {
    __break(1u);
  }
  else {
    a4[2]  = v7;
  }
  return result;
}

unint64_t sub_100295F50(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  uint64_t v6 = a6[6] + 6 * result;
  *(_WORD *)uint64_t v6 = a2;
  *(unsigned char *)(v6 + 2)  = BYTE2(a2);
  *(unsigned char *)(v6 + 3)  = BYTE3(a2);
  *(unsigned char *)(v6 + 4)  = BYTE4(a2);
  *(unsigned char *)(v6 + 5)  = BYTE5(a2);
  uint64_t v7 = a6[7] + 24 * result;
  *(_WORD *)uint64_t v7 = a3;
  *(unsigned char *)(v7 + 2)  = BYTE2(a3);
  *(unsigned char *)(v7 + 3)  = BYTE3(a3);
  *(unsigned char *)(v7 + 4)  = BYTE4(a3);
  *(unsigned char *)(v7 + 5)  = BYTE5(a3);
  *(unsigned char *)(v7 + 6)  = BYTE6(a3);
  *(void *)(v7 + 8)  = a4;
  *(void *)(v7 + 16)  = a5;
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2]  = v10;
  }
  return result;
}

uint64_t sub_100296008(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v10 = a5[6];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a2, v11);
  uint64_t v13 = (void *)(a5[7] + 16 * a1);
  *uint64_t v13 = a3;
  v13[1]  = a4;
  uint64_t v14 = a5[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a5[2]  = v16;
  }
  return result;
}

uint64_t sub_1002960C8(unint64_t a1, char a2, uint64_t a3, void *a4)
{
  return sub_1002960F4(a1, a2, a3, a4, type metadata accessor for NANPeer.Service, type metadata accessor for NANPeer.Service);
}

uint64_t sub_1002960F4(unint64_t a1, char a2, uint64_t a3, void *a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(unsigned char *)(a4[6] + a1)  = a2;
  uint64_t v10 = a4[7];
  uint64_t v11 = a5(0);
  uint64_t result = sub_100297894(a3, v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a6);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2]  = v15;
  }
  return result;
}

uint64_t sub_10029619C(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_1002961C8(a1, a2, a3, a4, type metadata accessor for NANPeer.Service.AuthenticationStatus, type metadata accessor for NANPeer.Service.AuthenticationStatus);
}

uint64_t sub_1002961C8(unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v10 = a4[6] - a1 + 8 * a1;
  *(_WORD *)uint64_t v10 = a2;
  *(unsigned char *)(v10 + 2)  = BYTE2(a2);
  *(unsigned char *)(v10 + 3)  = BYTE3(a2);
  *(unsigned char *)(v10 + 4)  = BYTE4(a2);
  *(unsigned char *)(v10 + 5)  = BYTE5(a2);
  *(unsigned char *)(v10 + 6)  = BYTE6(a2);
  uint64_t v11 = a4[7];
  uint64_t v12 = a5(0);
  uint64_t result = sub_100297894(a3, v11 + *(void *)(*(void *)(v12 - 8) + 72) * a1, a6);
  uint64_t v14 = a4[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a4[2]  = v16;
  }
  return result;
}

uint64_t sub_1002962A8(unint64_t a1, uint64_t a2, long long *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t result = sub_10006EF50(a3, a4[7] + 40 * a1);
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2]  = v13;
  }
  return result;
}

uint64_t sub_10029636C(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v7 = a4[6] + 6 * a1;
  *(_WORD *)uint64_t v7 = a2;
  *(unsigned char *)(v7 + 2)  = BYTE2(a2);
  *(unsigned char *)(v7 + 3)  = BYTE3(a2);
  *(unsigned char *)(v7 + 4)  = BYTE4(a2);
  *(unsigned char *)(v7 + 5)  = BYTE5(a2);
  uint64_t v8 = a4[7];
  uint64_t v9 = sub_100010BCC((uint64_t *)&unk_100484A90);
  uint64_t result = sub_100297110(a3, v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1);
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2]  = v13;
  }
  return result;
}

uint64_t sub_100296434(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1)  = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2]  = v13;
  }
  return result;
}

uint64_t sub_1002964EC(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_100296518(a1, a2, a3, a4, type metadata accessor for AWDLPeer, type metadata accessor for AWDLPeer);
}

uint64_t sub_100296518(unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v10 = a4[6] + 6 * a1;
  *(_WORD *)uint64_t v10 = a2;
  *(unsigned char *)(v10 + 2)  = BYTE2(a2);
  *(unsigned char *)(v10 + 3)  = BYTE3(a2);
  *(unsigned char *)(v10 + 4)  = BYTE4(a2);
  *(unsigned char *)(v10 + 5)  = BYTE5(a2);
  uint64_t v11 = a4[7];
  uint64_t v12 = a5(0);
  uint64_t result = sub_100297894(a3, v11 + *(void *)(*(void *)(v12 - 8) + 72) * a1, a6);
  uint64_t v14 = a4[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a4[2]  = v16;
  }
  return result;
}

unint64_t sub_1002965F0(unint64_t result, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  uint64_t v6 = a6[6] + 24 * result;
  *(void *)uint64_t v6 = a2;
  *(void *)(v6 + 8)  = a3;
  *(unsigned char *)(v6 + 16)  = a4 & 1;
  *(unsigned char *)(v6 + 17)  = HIBYTE(a4);
  *(void *)(a6[7] + 8 * result)  = a5;
  uint64_t v7 = a6[2];
  BOOL v8 = __OFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8) {
    __break(1u);
  }
  else {
    a6[2]  = v9;
  }
  return result;
}

uint64_t sub_10029664C(char **a1, void *a2)
{
  unint64_t v2 = a2;
  *(void *)(swift_allocObject() + 16)  = a2;
  int64_t v36 = a1;
  uint64_t v4 = *a1;
  uint64_t v41 = *((void *)v4 + 2);
  if (v41)
  {
    sub_10006F314(0, (unint64_t *)&qword_10047DC50);
    uint64_t v44 = v2;
    id v5 = v2;
    swift_bridgeObjectRetain();
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    while (1)
    {
      id v45 = *(id *)&v4[v6 + 32];
      sub_1000131C8();
      char v8 = static NSObject.== infix(_:_:)();

      sub_1000131D0();
      if (v8) {
        break;
      }
      v6 += 32;
      if (v41 == ++v7)
      {
        swift_bridgeObjectRelease();
        unint64_t v9 = *((void *)v4 + 2);
LABEL_9:
        unint64_t v2 = v44;
        goto LABEL_10;
      }
    }
    uint64_t v11 = v4;
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v13 = v7 + 1;
    if (!__OFADD__(v7, 1))
    {
      unint64_t v9 = v7;
      unint64_t v14 = *((void *)v4 + 2);
      if (v13 == v14) {
        goto LABEL_9;
      }
      uint64_t v15 = v6;
      while (v13 < v14)
      {
        unint64_t v18 = v13;
        int v46 = v11;
        uint64_t v40 = v15;
        uint64_t v19 = &v11[v15];
        id v42 = *((id *)v19 + 8);
        sub_1000131C8();
        char v20 = static NSObject.== infix(_:_:)();

        uint64_t result = sub_1000131D0();
        if (v20)
        {
          unint64_t v2 = v44;
          uint64_t v11 = v46;
          uint64_t v16 = v40;
          unint64_t v17 = v18;
        }
        else
        {
          unint64_t v17 = v18;
          if (v18 == v9)
          {
            unint64_t v2 = v44;
            uint64_t v11 = v46;
            uint64_t v16 = v40;
            BOOL v21 = __OFADD__(v9++, 1);
            if (v21) {
              goto LABEL_30;
            }
          }
          else
          {
            if ((v9 & 0x8000000000000000) != 0) {
              goto LABEL_31;
            }
            unint64_t v22 = *((void *)v46 + 2);
            if (v9 >= v22) {
              goto LABEL_32;
            }
            if (v18 >= v22) {
              goto LABEL_33;
            }
            uint64_t v43 = 32 * v9;
            uint64_t v23 = (uint64_t)&v46[32 * v9 + 32];
            uint64_t v24 = *(void *)(v23 + 8);
            uint64_t v25 = *(void *)(v23 + 16);
            char v26 = *(unsigned char *)(v23 + 24);
            uint64_t v27 = *((void *)v19 + 9);
            char v39 = (void *)*((void *)v19 + 8);
            uint64_t v28 = *((void *)v19 + 10);
            char v29 = v19[88];
            id v30 = *(id *)v23;
            char v38 = v26;
            sub_1000131C8();
            id v31 = v39;
            sub_1000131C8();
            id v37 = v30;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              int v46 = sub_1003A4FCC((uint64_t)v46);
            }
            uint64_t v32 = &v46[v43];
            Swift::UInt8 v33 = *(void **)&v46[v43 + 32];
            *((void *)v32 + 4)  = v31;
            *((void *)v32 + 5)  = v27;
            uint64_t v11 = v46;
            *((void *)v32 + 6)  = v28;
            v32[56]  = v29;

            uint64_t result = sub_1000131D0();
            if (v18 >= *((void *)v46 + 2)) {
              goto LABEL_34;
            }
            uint64_t v16 = v40;
            uint64_t v34 = &v46[v40];
            uint64_t v35 = *(void **)&v46[v40 + 64];
            *((void *)v34 + 8)  = v37;
            *((void *)v34 + 9)  = v24;
            *((void *)v34 + 10)  = v25;
            v34[88]  = v38;

            uint64_t result = sub_1000131D0();
            unint64_t v17 = v18;
            *int64_t v36 = v46;
            unint64_t v2 = v44;
            BOOL v21 = __OFADD__(v9++, 1);
            if (v21) {
              goto LABEL_30;
            }
          }
        }
        unint64_t v13 = v17 + 1;
        unint64_t v14 = *((void *)v11 + 2);
        uint64_t v15 = v16 + 32;
        if (v13 == v14) {
          goto LABEL_10;
        }
      }
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    id v10 = v2;
    unint64_t v9 = 0;
LABEL_10:
    swift_release();

    return v9;
  }
  return result;
}

uint64_t sub_100296A3C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  unint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

int64_t sub_100296AE0(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

unint64_t sub_100296BC4()
{
  unint64_t result = qword_1004882B0;
  if (!qword_1004882B0)
  {
    sub_10006F314(255, (unint64_t *)&unk_100484A40);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004882B0);
  }
  return result;
}

uint64_t sub_100296C2C(void **a1)
{
  return sub_10028AA3C(a1, v1);
}

uint64_t sub_100296C48(void **a1)
{
  return sub_10028AD40(a1, v1);
}

uint64_t sub_100296C64(Swift::UInt *a1)
{
  return sub_10028B048(a1, v1);
}

uint64_t sub_100296C80()
{
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100296C90()
{
  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100296CA0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100296CD8()
{
  swift_release();

  return _swift_deallocObject(v0, 73, 7);
}

uint64_t sub_100296D10()
{
  swift_release();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100296D4C()
{
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100296D5C()
{
  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100296D6C@<X0>(unsigned __int8 *a1@<X0>, uint64_t *a2@<X1>, unsigned char *a3@<X8>)
{
  return sub_100296DC4(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10000CB30, a3);
}

uint64_t sub_100296D98@<X0>(unsigned __int8 *a1@<X0>, uint64_t *a2@<X1>, unsigned char *a3@<X8>)
{
  return sub_100296DC4(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10000BB10, a3);
}

uint64_t sub_100296DC4@<X0>(unsigned __int8 *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X2>, unsigned char *a4@<X8>)
{
  return sub_100280EA0(a1, a2, a4, a3);
}

uint64_t sub_100296DFC()
{
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100296E0C()
{
  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100296E1C()
{
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100296E2C()
{
  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100296E3C()
{
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100296E4C()
{
  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100296E60()
{
  return sub_10028564C(*(void *)(v0 + 56), *(unsigned char *)(v0 + 64), *(unsigned __int8 *)(v0 + 65), *(void **)(v0 + 72), *(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_100296EA0()
{
  return sub_100296EB8((uint64_t (*)(void, void, void, void, void, void, void, void, void, void))sub_1002861DC);
}

uint64_t sub_100296EB8(uint64_t (*a1)(void, void, void, void, void, void, void, void, void, void))
{
  return a1(*(void *)(v1 + 56), *(void *)(v1 + 64), *(unsigned __int8 *)(v1 + 72), *(void *)(v1 + 80), *(unsigned __int8 *)(v1 + 88), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_100296F00()
{
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100296F10()
{
  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100296F20()
{
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100296F30()
{
  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100296F40()
{
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100296F50()
{
  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100296F64()
{
  swift_release();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100296FA4()
{
  return sub_10000F090((uint64_t (*)(void, void, void, void, void, void, void, void))sub_100283804);
}

uint64_t sub_100296FC0()
{
  swift_release();

  sub_10001270C(*(void *)(v0 + 80), *(unsigned char *)(v0 + 88));

  return _swift_deallocObject(v0, 89, 7);
}

uint64_t sub_10029700C()
{
  return sub_100296EB8((uint64_t (*)(void, void, void, void, void, void, void, void, void, void))sub_1002840EC);
}

uint64_t sub_100297024()
{
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100297034()
{
  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100297044()
{
  swift_release();

  return _swift_deallocObject(v0, 65, 7);
}

uint64_t sub_10029707C()
{
  return sub_1002896A8(*(void *)(v0 + 56), *(unsigned char *)(v0 + 64), *(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_100297090()
{
  swift_release();
  sub_10001270C(*(void *)(v0 + 72), *(unsigned char *)(v0 + 80));

  return _swift_deallocObject(v0, 81, 7);
}

uint64_t sub_1002970D4()
{
  return sub_100289DF0(*(void *)(v0 + 56), *(unsigned __int8 *)(v0 + 64), *(void *)(v0 + 72), *(unsigned char *)(v0 + 80));
}

uint64_t sub_100297110(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010BCC((uint64_t *)&unk_100484A90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100297178()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1002971B8()
{
  return sub_100289224(*(void *)(v0 + 56), *(void *)(v0 + 64));
}

void sub_1002971CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v8 = 0;
  if (v6) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v11 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v11 < v7)
    {
      unint64_t v12 = *(void *)(v3 + 8 * v11);
      ++v8;
      if (v12) {
        goto LABEL_22;
      }
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v7) {
        goto LABEL_26;
      }
      unint64_t v12 = *(void *)(v3 + 8 * v8);
      if (v12) {
        goto LABEL_22;
      }
      int64_t v8 = v11 + 2;
      if (v11 + 2 >= v7) {
        goto LABEL_26;
      }
      unint64_t v12 = *(void *)(v3 + 8 * v8);
      if (v12) {
        goto LABEL_22;
      }
      int64_t v8 = v11 + 3;
      if (v11 + 3 >= v7) {
        goto LABEL_26;
      }
      unint64_t v12 = *(void *)(v3 + 8 * v8);
      if (v12)
      {
LABEL_22:
        unint64_t v6 = (v12 - 1) & v12;
        for (i  = __clz(__rbit64(v12)) + (v8 << 6); ; i  = v9 | (v8 << 6))
        {
          unint64_t v14 = *(char **)(*(void *)(a1 + 48) + 8 * i);
          uint64_t v15 = *(void **)&v14[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection];
          uint64_t v16 = v14;
          id v17 = [v15 remoteObjectProxy];
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
          sub_100010BCC((uint64_t *)&unk_100484AA0);
          if (swift_dynamicCast())
          {
            [v19 invalidatedActiveTrafficRegistration:a2];

            swift_unknownObjectRelease();
            if (!v6) {
              goto LABEL_7;
            }
          }
          else
          {

            if (!v6) {
              goto LABEL_7;
            }
          }
LABEL_6:
          unint64_t v9 = __clz(__rbit64(v6));
          v6 &= v6 - 1;
        }
      }
      int64_t v13 = v11 + 4;
      if (v13 < v7)
      {
        unint64_t v12 = *(void *)(v3 + 8 * v13);
        if (v12)
        {
          int64_t v8 = v13;
          goto LABEL_22;
        }
        while (1)
        {
          int64_t v8 = v13 + 1;
          if (__OFADD__(v13, 1)) {
            goto LABEL_28;
          }
          if (v8 >= v7) {
            break;
          }
          unint64_t v12 = *(void *)(v3 + 8 * v8);
          ++v13;
          if (v12) {
            goto LABEL_22;
          }
        }
      }
    }
LABEL_26:
    swift_release();
    return;
  }
  __break(1u);
LABEL_28:
  __break(1u);
}

void sub_1002973DC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  if (a4 >> 8 != 0xFFFFFFFF) {
    sub_100012724(a1, a2, a3, a4, a5, a6);
  }
}

void sub_1002973F0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  if (a4 >> 8 != 0xFFFFFFFF) {
    sub_100010164(a1, a2, a3, a4, a5, a6);
  }
}

unint64_t sub_100297404(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100010BCC(&qword_100484B40);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (i  = (char *)(a1 + 38); ; i += 8)
    {
      uint64_t v5 = *(unsigned int *)(i - 6);
      uint64_t v6 = *(i - 2);
      uint64_t v7 = *(i - 1);
      char v8 = *i;
      unint64_t result = sub_10039F82C(v5 | (v6 << 32) | (v7 << 40));
      if (v10) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v11 = v3[6] + 8 * result;
      *(_DWORD *)uint64_t v11 = v5;
      *(unsigned char *)(v11 + 4)  = v6;
      *(unsigned char *)(v11 + 5)  = v7;
      *(unsigned char *)(v3[7] + result)  = v8;
      uint64_t v12 = v3[2];
      BOOL v13 = __OFADD__(v12, 1);
      uint64_t v14 = v12 + 1;
      if (v13) {
        goto LABEL_10;
      }
      v3[2]  = v14;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_1002974FC(uint64_t a1)
{
  uint64_t v2 = sub_100010BCC(&qword_100484B48);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    sub_100010BCC((uint64_t *)&unk_100488380);
    uint64_t v7 = (void *)static _DictionaryStorage.allocate(capacity:)();
    uint64_t v8 = (uint64_t)&v5[*(int *)(v2 + 48)];
    uint64_t v9 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v10 = *(void *)(v3 + 72);
    while (1)
    {
      sub_1000136F4(v9, (uint64_t)v5, &qword_100484B48);
      char v11 = *v5;
      unint64_t result = sub_10039F7B4(*v5);
      if (v13) {
        break;
      }
      unint64_t v14 = result;
      *(void *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(unsigned char *)(v7[6] + result)  = v11;
      uint64_t v15 = v7[7];
      uint64_t v16 = type metadata accessor for NANAttribute(0);
      unint64_t result = sub_100297894(v8, v15 + *(void *)(*(void *)(v16 - 8) + 72) * v14, type metadata accessor for NANAttribute);
      uint64_t v17 = v7[2];
      BOOL v18 = __OFADD__(v17, 1);
      uint64_t v19 = v17 + 1;
      if (v18) {
        goto LABEL_10;
      }
      v7[2]  = v19;
      v9 += v10;
      if (!--v6) {
        return (unint64_t)v7;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_1002976C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_100010BCC((uint64_t *)&unk_100488330);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  char v4 = *(unsigned char *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  unint64_t result = sub_10039F7B4(v4);
  if (v7)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  uint64_t v8 = (void *)(a1 + 56);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(unsigned char *)(v3[6] + result)  = v4;
    *(void *)(v3[7] + 8 * result)  = v5;
    uint64_t v9 = v3[2];
    BOOL v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      break;
    }
    v3[2]  = v11;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v12 = v8 + 2;
    char v4 = *((unsigned char *)v8 - 8);
    uint64_t v13 = *v8;
    swift_bridgeObjectRetain();
    unint64_t result = sub_10039F7B4(v4);
    uint64_t v8 = v12;
    uint64_t v5 = v13;
    if (v14) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1002977C4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_10029782C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100297894(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002978FC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100297934(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_100297960(id *a1)
{
  return sub_1002881D8(a1, *(void **)(v1 + 16)) & 1;
}

uint64_t sub_100297980(void **a1)
{
  return sub_1002882B0(a1, v1);
}

uint64_t sub_10029799C()
{
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1002979AC()
{
  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1002979BC()
{
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1002979CC()
{
  return _swift_deallocObject(v0, 72, 7);
}

void sub_1002979DC(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
}

id sub_100297A00@<X0>(uint64_t a1@<X8>)
{
  return sub_100286F08(*(void **)(v1 + 16), *(void **)(v1 + 24), *(unsigned char **)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(unsigned char *)(v1 + 56), a1);
}

unint64_t sub_100297A2C()
{
  unint64_t result = qword_100484B78;
  if (!qword_100484B78)
  {
    sub_100014434(&qword_100484B70);
    sub_100297AA8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100484B78);
  }
  return result;
}

unint64_t sub_100297AA8()
{
  unint64_t result = qword_100484B80;
  if (!qword_100484B80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100484B80);
  }
  return result;
}

uint64_t sub_100297AFC()
{
  return sub_100297B60((void (*)(void))&_swift_release);
}

uint64_t sub_100297B14(uint64_t *a1)
{
  return sub_100281388(a1, *(void *)(v1 + 56), *(uint64_t (**)(uint64_t))(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_100297B48()
{
  return sub_100297B60((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_100297B60(void (*a1)(void))
{
  swift_release();
  a1(*(void *)(v1 + 72));

  return _swift_deallocObject(v1, 80, 7);
}

uint64_t sub_100297BB0(uint64_t a1)
{
  return sub_100281930(a1, v1[7], v1[8], v1[9], v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_100297BE4()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_100297CA4()
{
  uint64_t v1 = *(void *)(type metadata accessor for Logger() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100282014(v0 + v2, *(void *)(v0 + v3), *(void *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

void sub_100297D74()
{
  swift_unknownObjectWeakAssign();

  sub_1002811B8();
}

uint64_t sub_100297DAC()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100297DE4(uint64_t a1, uint64_t a2)
{
  sub_10028F318(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_100297DEC(void *a1, uint64_t a2)
{
  type metadata accessor for Logger();
  __chkstk_darwin();
  unint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  BOOL v10 = (uint64_t *)((char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(void *)&v2[qword_1004846E8]  = _swiftEmptyDictionarySingleton;
  uint64_t v11 = v2;
  uint64_t v12 = OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v13 = (void *)*v12;
  uint64_t *v10 = *v12;
  (*(void (**)(uint64_t *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  id v14 = v13;
  LOBYTE(v13)  = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v8 + 8))(v10, v7);
  if (v13)
  {
    *(void *)&v11[qword_1004846E0]  = a2;
    swift_retain();

    Logger.init(subsystem:category:)();
    uint64_t v16 = &OBJC_PROTOCOL___WiFiP2PSPITransactionResponderXPC;
    uint64_t v17 = sub_1002BBB14(a1, (uint64_t)v6, (uint64_t)v16);

    return (uint64_t)v17;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100297FF0(char *a1, uint64_t a2)
{
  type metadata accessor for Logger();
  __chkstk_darwin();
  unint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  BOOL v10 = (uint64_t *)((char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = v2;
  uint64_t v12 = OS_dispatch_queue.p2p.unsafeMutableAddressor();
  uint64_t v13 = (void *)*v12;
  uint64_t *v10 = *v12;
  (*(void (**)(uint64_t *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  id v14 = v13;
  LOBYTE(v13)  = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v8 + 8))(v10, v7);
  if (v13)
  {
    *(void *)&v11[qword_1004847D0]  = a2;
    swift_retain();

    id v16 = [self interfaceWithProtocol:&OBJC_PROTOCOL___AWDLServiceDiscoveryManagerXPCDelegate];
    [*(id *)&a1[OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection] setRemoteObjectInterface:v16];

    Logger.init(subsystem:category:)();
    uint64_t v17 = &OBJC_PROTOCOL___AWDLServiceDiscoveryManagerXPC;
    uint64_t v18 = sub_1002BBB14(a1, (uint64_t)v6, (uint64_t)v17);

    return (uint64_t)v18;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100298230@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (*(void *)(a1 + 24) >> 62 == 1) {
    uint64_t result = swift_bridgeObjectRetain();
  }
  else {
    uint64_t result = 0;
  }
  *a2  = result;
  return result;
}

void sub_100298274(uint64_t a1)
{
  sub_10028E0CC(a1, *(void *)(v1 + 16));
}

uint64_t sub_10029827C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002982B4()
{
  return sub_10028E914(*(void *)(v0 + 16));
}

uint64_t sub_1002982BC()
{
  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1002982CC()
{
  return _swift_deallocObject(v0, 62, 7);
}

uint64_t sub_1002982E0()
{
  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100298318(uint64_t a1)
{
  return sub_10028D2AC(a1, *(unsigned __int16 *)(v1 + 56) | ((unint64_t)*(unsigned int *)(v1 + 58) << 16), *(id *)(v1 + 64));
}

uint64_t sub_100298338(uint64_t a1)
{
  return sub_10028CEDC(a1, *(unsigned char *)(v1 + 56), *(void *)(v1 + 64));
}

uint64_t sub_100298350(unsigned __int8 *a1)
{
  return sub_10028D00C(a1, *(uint64_t **)(v1 + 56), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_100298374()
{
  return _swift_deallocObject(v0, 57, 7);
}

uint64_t sub_100298384(uint64_t result)
{
  *(unsigned char *)(result + 16)  = *(unsigned char *)(v1 + 56);
  return result;
}

void sub_100298390(uint64_t a1)
{
  sub_10028CF90(a1, *(void (**)(void))(v1 + 16));
}

uint64_t sub_1002983AC()
{
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1002983BC()
{
  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1002983CC()
{
  return _swift_deallocObject(v0, 62, 7);
}

uint64_t sub_1002983DC(uint64_t a1)
{
  return sub_10028D33C(a1, *(unsigned __int16 *)(v1 + 56) | ((unint64_t)*(unsigned int *)(v1 + 58) << 16));
}

uint64_t sub_10029840C()
{
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10029841C()
{
  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10029842C()
{
  swift_release();
  swift_release();

  if (*(void *)(v0 + 48)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100298484(uint64_t a1)
{
  return sub_10028B624(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t sub_100298494()
{
  swift_errorRelease();
  swift_release();
  swift_release();

  if (*(void *)(v0 + 56)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1002984F4()
{
  return sub_10028B93C(*(void *)(v0 + 16), *(void (**)(unint64_t))(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40), *(void **)(v0 + 48), *(void (**)(void))(v0 + 56));
}

uint64_t sub_100298508()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100298548()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void **)(v0 + 24);
  swift_unownedRetain();
  id v3 = v2;
  return v1;
}

uint64_t sub_100298594()
{
  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1002985A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 56))();
  *(void *)a1  = result;
  *(void *)(a1 + 8)  = v4;
  *(unsigned char *)(a1 + 16)  = v5 & 1;
  *(void *)(a1 + 24)  = v6;
  return result;
}

uint64_t sub_1002985E0()
{
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1002985F0()
{
  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100298600()
{
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100298610()
{
  return _swift_deallocObject(v0, 72, 7);
}

void sub_100298620(uint64_t a1, void *a2)
{
  if (a2)
  {
    swift_unownedRelease();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100298674(void **a1)
{
  return sub_100284A78(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_100298690()
{
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1002986A0()
{
  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1002986B0(void **a1)
{
  return sub_100288818(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1002986CC()
{
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1002986DC()
{
  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1002986EC(Swift::UInt *a1)
{
  return sub_10028A2E8(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_100298708()
{
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100298718()
{
  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100298728(uint64_t a1)
{
  return a1;
}

unsigned char *sub_100298750(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10029881CLL);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t sub_100298844(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 != 255) {
    uint64_t result = sub_10001270C(*(void *)(a1 + 16), v3 & 1);
  }
  int v4 = *(unsigned __int8 *)(a1 + 40);
  if (v4 != 255)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    return sub_10001270C(v5, v4 & 1);
  }
  return result;
}

uint64_t sub_1002988BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1  = *(void *)a2;
  *(void *)(a1 + 8)  = v4;
  uint64_t v5 = a2 + 16;
  int v6 = *(unsigned __int8 *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 == 255)
  {
    *(void *)(a1 + 16)  = *(void *)v5;
    *(unsigned char *)(a1 + 24)  = *(unsigned char *)(v5 + 8);
  }
  else
  {
    uint64_t v7 = *(void *)v5;
    sub_100012718(v7, v6 & 1);
    *(void *)(a1 + 16)  = v7;
    *(unsigned char *)(a1 + 24)  = v6 & 1;
  }
  uint64_t v8 = (uint64_t *)(a2 + 32);
  int v9 = *(unsigned __int8 *)(a2 + 40);
  if (v9 == 255)
  {
    *(void *)(a1 + 32)  = *v8;
    *(unsigned char *)(a1 + 40)  = *(unsigned char *)(a2 + 40);
  }
  else
  {
    char v10 = v9 & 1;
    uint64_t v11 = *v8;
    sub_100012718(*v8, v9 & 1);
    *(void *)(a1 + 32)  = v11;
    *(unsigned char *)(a1 + 40)  = v10;
  }
  return a1;
}

uint64_t sub_100298990(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (uint64_t *)(a1 + 16);
  uint64_t v5 = (uint64_t *)(a2 + 16);
  int v6 = *(unsigned __int8 *)(a2 + 24);
  if (*(unsigned __int8 *)(a1 + 24) == 255)
  {
    if (v6 == 255)
    {
      uint64_t v8 = *v5;
      *(unsigned char *)(a1 + 24)  = *(unsigned char *)(a2 + 24);
      *uint64_t v4 = v8;
    }
    else
    {
      char v13 = v6 & 1;
      uint64_t v14 = *v5;
      sub_100012718(v14, v6 & 1);
      *(void *)(a1 + 16)  = v14;
      *(unsigned char *)(a1 + 24)  = v13;
    }
  }
  else if (v6 == 255)
  {
    sub_100298B30(a1 + 16);
    char v7 = *(unsigned char *)(a2 + 24);
    *uint64_t v4 = *v5;
    *(unsigned char *)(a1 + 24)  = v7;
  }
  else
  {
    char v9 = v6 & 1;
    uint64_t v10 = *v5;
    sub_100012718(v10, v6 & 1);
    uint64_t v11 = *(void *)(a1 + 16);
    char v12 = *(unsigned char *)(a1 + 24);
    *(void *)(a1 + 16)  = v10;
    *(unsigned char *)(a1 + 24)  = v9;
    sub_10001270C(v11, v12);
  }
  uint64_t v15 = (uint64_t *)(a1 + 32);
  id v16 = (uint64_t *)(a2 + 32);
  int v17 = *(unsigned __int8 *)(a2 + 40);
  if (*(unsigned __int8 *)(a1 + 40) == 255)
  {
    if (v17 == 255)
    {
      uint64_t v19 = *v16;
      *(unsigned char *)(a1 + 40)  = *(unsigned char *)(a2 + 40);
      *uint64_t v15 = v19;
    }
    else
    {
      char v24 = v17 & 1;
      uint64_t v25 = *v16;
      sub_100012718(*v16, v17 & 1);
      *(void *)(a1 + 32)  = v25;
      *(unsigned char *)(a1 + 40)  = v24;
    }
  }
  else if (v17 == 255)
  {
    sub_100298B30(a1 + 32);
    char v18 = *(unsigned char *)(a2 + 40);
    *uint64_t v15 = *v16;
    *(unsigned char *)(a1 + 40)  = v18;
  }
  else
  {
    char v20 = v17 & 1;
    uint64_t v21 = *v16;
    sub_100012718(*v16, v17 & 1);
    uint64_t v22 = *(void *)(a1 + 32);
    char v23 = *(unsigned char *)(a1 + 40);
    *(void *)(a1 + 32)  = v21;
    *(unsigned char *)(a1 + 40)  = v20;
    sub_10001270C(v22, v23);
  }
  return a1;
}

uint64_t sub_100298B30(uint64_t a1)
{
  uint64_t v2 = sub_100010BCC(qword_100484C70);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100298B90(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)(a2 + 16);
  int v5 = *(unsigned __int8 *)(a1 + 24);
  if (v5 == 255) {
    goto LABEL_4;
  }
  int v6 = *(unsigned __int8 *)(a2 + 24);
  if (v6 == 255)
  {
    sub_100298B30(a1 + 16);
LABEL_4:
    *(void *)(a1 + 16)  = *v4;
    *(unsigned char *)(a1 + 24)  = *(unsigned char *)(a2 + 24);
    goto LABEL_6;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 16)  = *v4;
  *(unsigned char *)(a1 + 24)  = v6 & 1;
  sub_10001270C(v7, v5 & 1);
LABEL_6:
  uint64_t v8 = (void *)(a2 + 32);
  int v9 = *(unsigned __int8 *)(a1 + 40);
  if (v9 != 255)
  {
    int v10 = *(unsigned __int8 *)(a2 + 40);
    if (v10 != 255)
    {
      uint64_t v11 = *(void *)(a1 + 32);
      *(void *)(a1 + 32)  = *v8;
      *(unsigned char *)(a1 + 40)  = v10 & 1;
      sub_10001270C(v11, v9 & 1);
      return a1;
    }
    sub_100298B30(a1 + 32);
  }
  *(void *)(a1 + 32)  = *v8;
  *(unsigned char *)(a1 + 40)  = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t sub_100298C90(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 41)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100298CD8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(unsigned char *)(result + 40)  = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 41)  = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 41)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t _s16P2PActivityStateO16InProgressStatusVMa()
{
  return swift_getGenericMetadata();
}

uint64_t sub_100298D3C()
{
  return swift_getWitnessTable();
}

uint64_t *sub_100298DF0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v25 = *a2;
    *a1  = *a2;
    a1  = (uint64_t *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Logger();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    int v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(_DWORD *)int v10 = *(_DWORD *)v11;
    *((_WORD *)v10 + 2)  = *((_WORD *)v11 + 2);
    char v12 = (char *)a1 + v9;
    char v13 = (char *)a2 + v9;
    uint64_t v14 = type metadata accessor for DispatchTime();
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
    v15(v12, v13, v14);
    uint64_t v16 = a3[7];
    uint64_t v17 = a3[8];
    char v18 = (char *)a1 + v16;
    uint64_t v19 = (char *)a2 + v16;
    *(_DWORD *)char v18 = *(_DWORD *)v19;
    *((_WORD *)v18 + 2)  = *((_WORD *)v19 + 2);
    char v20 = (_DWORD *)((char *)a1 + v17);
    uint64_t v21 = (_DWORD *)((char *)a2 + v17);
    BeaconInformation  = type metadata accessor for NANPeer.LastBeaconInformation(0);
    uint64_t v23 = *(void *)(BeaconInformation - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v23 + 48))(v21, 1, BeaconInformation))
    {
      uint64_t v24 = sub_100010BCC(&qword_100484CF8);
      memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      *char v20 = *v21;
      *((_WORD *)v20 + 2)  = *((_WORD *)v21 + 2);
      *(_OWORD *)(v20 + 2)  = *(_OWORD *)(v21 + 2);
      *((void *)v20 + 3)  = *((void *)v21 + 3);
      v15((char *)v20 + *(int *)(BeaconInformation + 32), (char *)v21 + *(int *)(BeaconInformation + 32), v14);
      (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, BeaconInformation);
    }
    uint64_t v26 = a3[9];
    uint64_t v27 = a3[10];
    uint64_t v28 = (char *)a1 + v26;
    char v29 = (char *)a2 + v26;
    *(_WORD *)uint64_t v28 = *(_WORD *)v29;
    void v28[2] = v29[2];
    id v30 = (char *)a1 + v27;
    id v31 = (char *)a2 + v27;
    *(_OWORD *)id v30 = *(_OWORD *)v31;
    v30[16]  = v31[16];
    uint64_t v32 = a3[11];
    uint64_t v33 = a3[12];
    uint64_t v34 = (char *)a1 + v32;
    uint64_t v35 = (char *)a2 + v32;
    *(_WORD *)uint64_t v34 = *(_WORD *)v35;
    v34[2]  = v35[2];
    int64_t v36 = (char *)a1 + v33;
    id v37 = (char *)a2 + v33;
    void v36[2] = v37[2];
    *(_WORD *)int64_t v36 = *(_WORD *)v37;
    uint64_t v38 = a3[13];
    uint64_t v39 = a3[14];
    uint64_t v40 = (char *)a1 + v38;
    uint64_t v41 = (char *)a2 + v38;
    *(void *)uint64_t v40 = *(void *)v41;
    *((_DWORD *)v40 + 2)  = *((_DWORD *)v41 + 2);
    id v42 = (char *)a1 + v39;
    uint64_t v43 = (char *)a2 + v39;
    *(_DWORD *)id v42 = *(_DWORD *)v43;
    v42[4]  = v43[4];
    uint64_t v44 = a3[15];
    uint64_t v45 = a3[16];
    int v46 = (char *)a1 + v44;
    uint64_t v47 = (char *)a2 + v44;
    *(_DWORD *)int v46 = *(_DWORD *)v47;
    *((_WORD *)v46 + 2)  = *((_WORD *)v47 + 2);
    v46[6]  = v47[6];
    *((void *)v46 + 1)  = *((void *)v47 + 1);
    int64_t v48 = (char *)a1 + v45;
    char v49 = (char *)a2 + v45;
    uint64_t v50 = *(uint64_t *)((char *)a2 + v45 + 8);
    swift_bridgeObjectRetain();
    if (v50)
    {
      *int64_t v48 = *v49;
      uint64_t v51 = *((void *)v49 + 2);
      uint64_t v52 = *((void *)v49 + 3);
      *((void *)v48 + 1)  = v50;
      *((void *)v48 + 2)  = v51;
      uint64_t v53 = *((void *)v49 + 4);
      *((void *)v48 + 3)  = v52;
      *((void *)v48 + 4)  = v53;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v54 = *((_OWORD *)v49 + 1);
      *(_OWORD *)int64_t v48 = *(_OWORD *)v49;
      *((_OWORD *)v48 + 1)  = v54;
      *((void *)v48 + 4)  = *((void *)v49 + 4);
    }
    uint64_t v55 = a3[17];
    uint64_t v56 = a3[18];
    char v57 = (char *)a1 + v55;
    id v58 = (char *)a2 + v55;
    *(_OWORD *)char v57 = *(_OWORD *)v58;
    *((_DWORD *)v57 + 4)  = *((_DWORD *)v58 + 4);
    uint64_t v59 = (_DWORD *)((char *)a1 + v56);
    int v60 = (_DWORD *)((char *)a2 + v56);
    uint64_t v61 = type metadata accessor for NANAttribute.CustomDeviceInformation(0);
    uint64_t v62 = *(void *)(v61 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61))
    {
      uint64_t v63 = sub_100010BCC(&qword_100484D00);
      memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
    }
    else
    {
      uint64_t v118 = v62;
      uint64_t v119 = v61;
      *(_WORD *)uint64_t v59 = *(_WORD *)v60;
      v59[1]  = v60[1];
      uint64_t v64 = *(int *)(v61 + 28);
      id v65 = (char *)v59 + v64;
      os_log_t v66 = (char *)v60 + v64;
      *id v65 = *((unsigned char *)v60 + v64);
      *(_WORD *)(v65 + 1)  = *(_WORD *)((char *)v60 + v64 + 1);
      id v120 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
      uint64_t v67 = v120[6];
      char v68 = &v65[v67];
      char v69 = &v66[v67];
      uint64_t v70 = type metadata accessor for P256.KeyAgreement.PublicKey();
      uint64_t v71 = *(void *)(v70 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v69, 1, v70))
      {
        uint64_t v72 = sub_100010BCC((uint64_t *)&unk_1004852B0);
        memcpy(v68, v69, *(void *)(*(void *)(v72 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v68, v69, v70);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v71 + 56))(v68, 0, 1, v70);
      }
      uint64_t v73 = v120[7];
      uint64_t v74 = &v65[v73];
      uint64_t v75 = &v66[v73];
      unint64_t v76 = *((void *)v75 + 1);
      if (v76 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v74 = *(_OWORD *)v75;
      }
      else
      {
        uint64_t v77 = *(void *)v75;
        sub_100013D44(*(void *)v75, *((void *)v75 + 1));
        *(void *)uint64_t v74 = v77;
        *((void *)v74 + 1)  = v76;
      }
      uint64_t v78 = v120[8];
      uint64_t v79 = &v65[v78];
      os_log_t v80 = &v66[v78];
      unint64_t v81 = *((void *)v80 + 1);
      if (v81 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v79 = *(_OWORD *)v80;
      }
      else
      {
        uint64_t v82 = *(void *)v80;
        sub_100013D44(*(void *)v80, *((void *)v80 + 1));
        *(void *)uint64_t v79 = v82;
        *((void *)v79 + 1)  = v81;
      }
      uint64_t v83 = v120[9];
      int v84 = &v65[v83];
      uint64_t v85 = &v66[v83];
      unint64_t v86 = *((void *)v85 + 1);
      if (v86 >> 60 == 15)
      {
        *(_OWORD *)int v84 = *(_OWORD *)v85;
      }
      else
      {
        uint64_t v87 = *(void *)v85;
        sub_100013D44(*(void *)v85, *((void *)v85 + 1));
        *(void *)int v84 = v87;
        *((void *)v84 + 1)  = v86;
      }
      uint64_t v88 = v120[10];
      uint64_t v89 = &v65[v88];
      uint64_t v90 = &v66[v88];
      uint64_t v91 = type metadata accessor for UUID();
      uint64_t v92 = *(void *)(v91 - 8);
      uint64_t v117 = v59;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48))(v90, 1, v91))
      {
        uint64_t v93 = sub_100010BCC(&qword_1004862B0);
        memcpy(v89, v90, *(void *)(*(void *)(v93 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v92 + 16))(v89, v90, v91);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v92 + 56))(v89, 0, 1, v91);
      }
      *(void *)&v65[v120[11]]  = *(void *)&v66[v120[11]];
      uint64_t v94 = v120[12];
      __dst  = &v65[v94];
      Class v95 = &v66[v94];
      uint64_t v96 = type metadata accessor for NANInternetSharingStatistics.Requester();
      uint64_t v97 = *(void *)(v96 - 8);
      Class v98 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48);
      swift_bridgeObjectRetain();
      if (v98(v95, 1, v96))
      {
        uint64_t v99 = sub_100010BCC((uint64_t *)&unk_100485B60);
        memcpy(__dst, v95, *(void *)(*(void *)(v99 - 8) + 64));
      }
      else
      {
        uint64_t v100 = type metadata accessor for DispatchTimeInterval();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v100 - 8) + 16))(__dst, v95, v100);
        __dst[*(int *)(v96 + 20)]  = v95[*(int *)(v96 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v97 + 56))(__dst, 0, 1, v96);
      }
      uint64_t v101 = v120[13];
      id v102 = &v65[v101];
      id v103 = &v66[v101];
      *(_OWORD *)id v102 = *(_OWORD *)v103;
      *(_OWORD *)(v102 + 9)  = *(_OWORD *)(v103 + 9);
      (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v118 + 56))(v117, 0, 1, v119);
    }
    uint64_t v104 = a3[20];
    *(uint64_t *)((char *)a1 + a3[19])  = *(uint64_t *)((char *)a2 + a3[19]);
    uint64_t v105 = (char *)a1 + v104;
    id v106 = (char *)a2 + v104;
    uint64_t v107 = type metadata accessor for UUID();
    uint64_t v108 = *(void *)(v107 - 8);
    id v109 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48);
    swift_bridgeObjectRetain();
    if (v109(v106, 1, v107))
    {
      uint64_t v110 = sub_100010BCC(&qword_1004862B0);
      memcpy(v105, v106, *(void *)(*(void *)(v110 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v108 + 16))(v105, v106, v107);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v108 + 56))(v105, 0, 1, v107);
    }
    uint64_t v111 = a3[21];
    id v112 = (char *)a1 + v111;
    id v113 = (char *)a2 + v111;
    if (v109(v113, 1, v107))
    {
      uint64_t v114 = sub_100010BCC(&qword_1004862B0);
      memcpy(v112, v113, *(void *)(*(void *)(v114 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v108 + 16))(v112, v113, v107);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v108 + 56))(v112, 0, 1, v107);
    }
  }
  return a1;
}

uint64_t type metadata accessor for NANPeer.LastBeaconInformation(uint64_t a1)
{
  return sub_10000A7D0(a1, qword_100484E40);
}

uint64_t sub_1002997DC(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + a2[6];
  uint64_t v6 = type metadata accessor for DispatchTime();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  uint64_t v8 = a1 + a2[8];
  BeaconInformation  = type metadata accessor for NANPeer.LastBeaconInformation(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(BeaconInformation - 8) + 48))(v8, 1, BeaconInformation))v7(v8 + *(int *)(BeaconInformation + 32), v6); {
  swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + a2[16] + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v10 = a1 + a2[18];
  uint64_t v11 = type metadata accessor for NANAttribute.CustomDeviceInformation(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
  {
    uint64_t v12 = v10 + *(int *)(v11 + 28);
    char v13 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
    uint64_t v14 = v12 + v13[6];
    uint64_t v15 = type metadata accessor for P256.KeyAgreement.PublicKey();
    uint64_t v16 = *(void *)(v15 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15)) {
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
    }
    uint64_t v17 = (uint64_t *)(v12 + v13[7]);
    unint64_t v18 = v17[1];
    if (v18 >> 60 != 15) {
      sub_10000C970(*v17, v18);
    }
    uint64_t v19 = (uint64_t *)(v12 + v13[8]);
    unint64_t v20 = v19[1];
    if (v20 >> 60 != 15) {
      sub_10000C970(*v19, v20);
    }
    uint64_t v21 = (uint64_t *)(v12 + v13[9]);
    unint64_t v22 = v21[1];
    if (v22 >> 60 != 15) {
      sub_10000C970(*v21, v22);
    }
    uint64_t v23 = v12 + v13[10];
    uint64_t v24 = type metadata accessor for UUID();
    uint64_t v25 = *(void *)(v24 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24)) {
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v24);
    }
    swift_bridgeObjectRelease();
    uint64_t v26 = v12 + v13[12];
    uint64_t v27 = type metadata accessor for NANInternetSharingStatistics.Requester();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 48))(v26, 1, v27))
    {
      uint64_t v28 = type metadata accessor for DispatchTimeInterval();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8))(v26, v28);
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v29 = a1 + a2[20];
  uint64_t v30 = type metadata accessor for UUID();
  uint64_t v35 = *(void *)(v30 - 8);
  id v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
  if (!v31(v29, 1, v30)) {
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v29, v30);
  }
  uint64_t v32 = a1 + a2[21];
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v31)(v32, 1, v30);
  if (!result)
  {
    uint64_t v34 = *(uint64_t (**)(uint64_t, uint64_t))(v35 + 8);
    return v34(v32, v30);
  }
  return result;
}

uint64_t sub_100299C88(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(_WORD *)(v9 + 4)  = *(_WORD *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  uint64_t v13 = type metadata accessor for DispatchTime();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16);
  v14(v11, v12, v13);
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = a1 + v15;
  uint64_t v18 = a2 + v15;
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  *(_WORD *)(v17 + 4)  = *(_WORD *)(v18 + 4);
  uint64_t v19 = (_DWORD *)(a1 + v16);
  unint64_t v20 = (_DWORD *)(a2 + v16);
  BeaconInformation  = type metadata accessor for NANPeer.LastBeaconInformation(0);
  uint64_t v22 = *(void *)(BeaconInformation - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, BeaconInformation))
  {
    uint64_t v23 = sub_100010BCC(&qword_100484CF8);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    *uint64_t v19 = *v20;
    *((_WORD *)v19 + 2)  = *((_WORD *)v20 + 2);
    *(_OWORD *)(v19 + 2)  = *(_OWORD *)(v20 + 2);
    *((void *)v19 + 3)  = *((void *)v20 + 3);
    v14((uint64_t)v19 + *(int *)(BeaconInformation + 32), (uint64_t)v20 + *(int *)(BeaconInformation + 32), v13);
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, BeaconInformation);
  }
  uint64_t v24 = a3[9];
  uint64_t v25 = a3[10];
  uint64_t v26 = a1 + v24;
  uint64_t v27 = a2 + v24;
  *(_WORD *)uint64_t v26 = *(_WORD *)v27;
  *(unsigned char *)(v26 + 2)  = *(unsigned char *)(v27 + 2);
  uint64_t v28 = a1 + v25;
  uint64_t v29 = a2 + v25;
  *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
  *(unsigned char *)(v28 + 16)  = *(unsigned char *)(v29 + 16);
  uint64_t v30 = a3[11];
  uint64_t v31 = a3[12];
  uint64_t v32 = a1 + v30;
  uint64_t v33 = a2 + v30;
  *(_WORD *)uint64_t v32 = *(_WORD *)v33;
  *(unsigned char *)(v32 + 2)  = *(unsigned char *)(v33 + 2);
  uint64_t v34 = a1 + v31;
  uint64_t v35 = a2 + v31;
  *(unsigned char *)(v34 + 2)  = *(unsigned char *)(v35 + 2);
  *(_WORD *)uint64_t v34 = *(_WORD *)v35;
  uint64_t v36 = a3[13];
  uint64_t v37 = a3[14];
  uint64_t v38 = a1 + v36;
  uint64_t v39 = a2 + v36;
  *(void *)uint64_t v38 = *(void *)v39;
  *(_DWORD *)(v38 + 8)  = *(_DWORD *)(v39 + 8);
  uint64_t v40 = a1 + v37;
  uint64_t v41 = a2 + v37;
  *(_DWORD *)uint64_t v40 = *(_DWORD *)v41;
  *(unsigned char *)(v40 + 4)  = *(unsigned char *)(v41 + 4);
  uint64_t v42 = a3[15];
  uint64_t v43 = a3[16];
  uint64_t v44 = a1 + v42;
  uint64_t v45 = a2 + v42;
  *(_DWORD *)uint64_t v44 = *(_DWORD *)v45;
  *(_WORD *)(v44 + 4)  = *(_WORD *)(v45 + 4);
  *(unsigned char *)(v44 + 6)  = *(unsigned char *)(v45 + 6);
  *(void *)(v44 + 8)  = *(void *)(v45 + 8);
  uint64_t v46 = a1 + v43;
  uint64_t v47 = a2 + v43;
  uint64_t v48 = *(void *)(a2 + v43 + 8);
  swift_bridgeObjectRetain();
  if (v48)
  {
    *(unsigned char *)uint64_t v46 = *(unsigned char *)v47;
    uint64_t v49 = *(void *)(v47 + 16);
    uint64_t v50 = *(void *)(v47 + 24);
    *(void *)(v46 + 8)  = v48;
    *(void *)(v46 + 16)  = v49;
    uint64_t v51 = *(void *)(v47 + 32);
    *(void *)(v46 + 24)  = v50;
    *(void *)(v46 + 32)  = v51;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v52 = *(_OWORD *)(v47 + 16);
    *(_OWORD *)uint64_t v46 = *(_OWORD *)v47;
    *(_OWORD *)(v46 + 16)  = v52;
    *(void *)(v46 + 32)  = *(void *)(v47 + 32);
  }
  uint64_t v53 = a3[17];
  uint64_t v54 = a3[18];
  uint64_t v55 = a1 + v53;
  uint64_t v56 = a2 + v53;
  *(_OWORD *)uint64_t v55 = *(_OWORD *)v56;
  *(_DWORD *)(v55 + 16)  = *(_DWORD *)(v56 + 16);
  char v57 = (_DWORD *)(a1 + v54);
  id v58 = (_DWORD *)(a2 + v54);
  uint64_t v59 = type metadata accessor for NANAttribute.CustomDeviceInformation(0);
  uint64_t v60 = *(void *)(v59 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
  {
    uint64_t v61 = sub_100010BCC(&qword_100484D00);
    memcpy(v57, v58, *(void *)(*(void *)(v61 - 8) + 64));
  }
  else
  {
    uint64_t v115 = v60;
    uint64_t v116 = v59;
    *(_WORD *)char v57 = *(_WORD *)v58;
    v57[1]  = v58[1];
    uint64_t v62 = *(int *)(v59 + 28);
    uint64_t v63 = (char *)v57 + v62;
    uint64_t v64 = (char *)v58 + v62;
    *uint64_t v63 = *((unsigned char *)v58 + v62);
    *(_WORD *)(v63 + 1)  = *(_WORD *)((char *)v58 + v62 + 1);
    uint64_t v118 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
    uint64_t v65 = v118[6];
    os_log_t v66 = &v63[v65];
    uint64_t v67 = &v64[v65];
    uint64_t v68 = type metadata accessor for P256.KeyAgreement.PublicKey();
    uint64_t v69 = *(void *)(v68 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v67, 1, v68))
    {
      uint64_t v70 = sub_100010BCC((uint64_t *)&unk_1004852B0);
      memcpy(v66, v67, *(void *)(*(void *)(v70 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v66, v67, v68);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v69 + 56))(v66, 0, 1, v68);
    }
    uint64_t v71 = v118[7];
    uint64_t v72 = &v63[v71];
    uint64_t v73 = &v64[v71];
    unint64_t v74 = *((void *)v73 + 1);
    if (v74 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v72 = *(_OWORD *)v73;
    }
    else
    {
      uint64_t v75 = *(void *)v73;
      sub_100013D44(*(void *)v73, *((void *)v73 + 1));
      *(void *)uint64_t v72 = v75;
      *((void *)v72 + 1)  = v74;
    }
    uint64_t v76 = v118[8];
    uint64_t v77 = &v63[v76];
    uint64_t v78 = &v64[v76];
    unint64_t v79 = *((void *)v78 + 1);
    if (v79 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v77 = *(_OWORD *)v78;
    }
    else
    {
      uint64_t v80 = *(void *)v78;
      sub_100013D44(*(void *)v78, *((void *)v78 + 1));
      *(void *)uint64_t v77 = v80;
      *((void *)v77 + 1)  = v79;
    }
    uint64_t v81 = v118[9];
    uint64_t v82 = &v63[v81];
    uint64_t v83 = &v64[v81];
    unint64_t v84 = *((void *)v83 + 1);
    if (v84 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v82 = *(_OWORD *)v83;
    }
    else
    {
      uint64_t v85 = *(void *)v83;
      sub_100013D44(*(void *)v83, *((void *)v83 + 1));
      *(void *)uint64_t v82 = v85;
      *((void *)v82 + 1)  = v84;
    }
    uint64_t v86 = v118[10];
    uint64_t v87 = &v63[v86];
    uint64_t v88 = &v64[v86];
    uint64_t v89 = type metadata accessor for UUID();
    uint64_t v90 = *(void *)(v89 - 8);
    uint64_t v117 = v57;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v88, 1, v89))
    {
      uint64_t v91 = sub_100010BCC(&qword_1004862B0);
      memcpy(v87, v88, *(void *)(*(void *)(v91 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v87, v88, v89);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v90 + 56))(v87, 0, 1, v89);
    }
    *(void *)&v63[v118[11]]  = *(void *)&v64[v118[11]];
    uint64_t v92 = v118[12];
    __dst  = &v63[v92];
    uint64_t v93 = &v64[v92];
    uint64_t v94 = type metadata accessor for NANInternetSharingStatistics.Requester();
    uint64_t v95 = *(void *)(v94 - 8);
    uint64_t v96 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48);
    swift_bridgeObjectRetain();
    if (v96(v93, 1, v94))
    {
      uint64_t v97 = sub_100010BCC((uint64_t *)&unk_100485B60);
      memcpy(__dst, v93, *(void *)(*(void *)(v97 - 8) + 64));
    }
    else
    {
      uint64_t v98 = type metadata accessor for DispatchTimeInterval();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v98 - 8) + 16))(__dst, v93, v98);
      __dst[*(int *)(v94 + 20)]  = v93[*(int *)(v94 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v95 + 56))(__dst, 0, 1, v94);
    }
    uint64_t v99 = v118[13];
    uint64_t v100 = &v63[v99];
    uint64_t v101 = &v64[v99];
    *(_OWORD *)uint64_t v100 = *(_OWORD *)v101;
    *(_OWORD *)(v100 + 9)  = *(_OWORD *)(v101 + 9);
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v115 + 56))(v117, 0, 1, v116);
  }
  uint64_t v102 = a3[20];
  *(void *)(a1 + a3[19])  = *(void *)(a2 + a3[19]);
  id v103 = (void *)(a1 + v102);
  uint64_t v104 = (const void *)(a2 + v102);
  uint64_t v105 = type metadata accessor for UUID();
  uint64_t v106 = *(void *)(v105 - 8);
  uint64_t v107 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v106 + 48);
  swift_bridgeObjectRetain();
  if (v107(v104, 1, v105))
  {
    uint64_t v108 = sub_100010BCC(&qword_1004862B0);
    memcpy(v103, v104, *(void *)(*(void *)(v108 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v106 + 16))(v103, v104, v105);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v106 + 56))(v103, 0, 1, v105);
  }
  uint64_t v109 = a3[21];
  uint64_t v110 = (void *)(a1 + v109);
  uint64_t v111 = (const void *)(a2 + v109);
  if (v107(v111, 1, v105))
  {
    uint64_t v112 = sub_100010BCC(&qword_1004862B0);
    memcpy(v110, v111, *(void *)(*(void *)(v112 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v106 + 16))(v110, v111, v105);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v106 + 56))(v110, 0, 1, v105);
  }
  return a1;
}

uint64_t sub_10029A600(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (unsigned char *)(a1 + v7);
  uint64_t v9 = (unsigned char *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1]  = v9[1];
  v8[2]  = v9[2];
  v8[3]  = v9[3];
  v8[4]  = v9[4];
  v8[5]  = v9[5];
  uint64_t v10 = a3[6];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for DispatchTime();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v14 + 24);
  uint64_t v202 = v13;
  v15(v11, v12);
  uint64_t v16 = a3[7];
  uint64_t v17 = (unsigned char *)(a1 + v16);
  uint64_t v18 = (unsigned char *)(a2 + v16);
  *uint64_t v17 = *v18;
  v17[1]  = v18[1];
  v17[2]  = v18[2];
  v17[3]  = v18[3];
  v17[4]  = v18[4];
  void v17[5] = v18[5];
  uint64_t v205 = a1;
  os_log_type_t v206 = a3;
  uint64_t v19 = a3[8];
  uint64_t v20 = a1 + v19;
  uint64_t v204 = a2;
  uint64_t v21 = (int *)(a2 + v19);
  BeaconInformation  = type metadata accessor for NANPeer.LastBeaconInformation(0);
  uint64_t v23 = *(void *)(BeaconInformation - 8);
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
  int v25 = v24(v20, 1, BeaconInformation);
  int v26 = v24((uint64_t)v21, 1, BeaconInformation);
  if (v25)
  {
    if (!v26)
    {
      int v27 = *v21;
      *(_WORD *)(v20 + 4)  = *((_WORD *)v21 + 2);
      *(_DWORD *)uint64_t v20 = v27;
      *(void *)(v20 + 8)  = *((void *)v21 + 1);
      *(void *)(v20 + 16)  = *((void *)v21 + 2);
      *(void *)(v20 + 24)  = *((void *)v21 + 3);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v20 + *(int *)(BeaconInformation + 32), (uint64_t)v21 + *(int *)(BeaconInformation + 32), v202);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, BeaconInformation);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v26)
  {
    sub_10029B8A8(v20, type metadata accessor for NANPeer.LastBeaconInformation);
LABEL_6:
    uint64_t v28 = sub_100010BCC(&qword_100484CF8);
    memcpy((void *)v20, v21, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  *(_DWORD *)uint64_t v20 = *v21;
  *(unsigned char *)(v20 + 4)  = *((unsigned char *)v21 + 4);
  *(unsigned char *)(v20 + 5)  = *((unsigned char *)v21 + 5);
  *(void *)(v20 + 8)  = *((void *)v21 + 1);
  *(void *)(v20 + 16)  = *((void *)v21 + 2);
  *(void *)(v20 + 24)  = *((void *)v21 + 3);
  ((void (*)(uint64_t, char *, uint64_t))v15)(v20 + *(int *)(BeaconInformation + 32), (char *)v21 + *(int *)(BeaconInformation + 32), v202);
LABEL_7:
  uint64_t v29 = v206[9];
  uint64_t v30 = v205 + v29;
  uint64_t v31 = (__int16 *)(a2 + v29);
  __int16 v32 = *v31;
  *(unsigned char *)(v30 + 2)  = *((unsigned char *)v31 + 2);
  *(_WORD *)uint64_t v30 = v32;
  uint64_t v33 = v206[10];
  uint64_t v34 = v205 + v33;
  uint64_t v35 = (long long *)(a2 + v33);
  long long v36 = *v35;
  *(unsigned char *)(v34 + 16)  = *((unsigned char *)v35 + 16);
  *(_OWORD *)uint64_t v34 = v36;
  uint64_t v37 = v206[11];
  uint64_t v38 = v205 + v37;
  uint64_t v39 = (__int16 *)(a2 + v37);
  __int16 v40 = *v39;
  *(unsigned char *)(v38 + 2)  = *((unsigned char *)v39 + 2);
  *(_WORD *)uint64_t v38 = v40;
  uint64_t v41 = v206[12];
  uint64_t v42 = v205 + v41;
  uint64_t v43 = (__int16 *)(a2 + v41);
  __int16 v44 = *v43;
  *(unsigned char *)(v42 + 2)  = *((unsigned char *)v43 + 2);
  *(_WORD *)uint64_t v42 = v44;
  uint64_t v45 = v206[13];
  uint64_t v46 = v205 + v45;
  uint64_t v47 = (uint64_t *)(a2 + v45);
  uint64_t v48 = *v47;
  *(_DWORD *)(v46 + 8)  = *((_DWORD *)v47 + 2);
  *(void *)uint64_t v46 = v48;
  uint64_t v49 = v206[14];
  uint64_t v50 = v205 + v49;
  uint64_t v51 = a2 + v49;
  LODWORD(v48)  = *(_DWORD *)v51;
  *(unsigned char *)(v50 + 4)  = *(unsigned char *)(v51 + 4);
  *(_DWORD *)uint64_t v50 = v48;
  uint64_t v52 = v206[15];
  uint64_t v53 = v205 + v52;
  uint64_t v54 = a2 + v52;
  *(unsigned char *)uint64_t v53 = *(unsigned char *)v54;
  *(unsigned char *)(v53 + 1)  = *(unsigned char *)(v54 + 1);
  *(unsigned char *)(v53 + 2)  = *(unsigned char *)(v54 + 2);
  *(unsigned char *)(v53 + 3)  = *(unsigned char *)(v54 + 3);
  *(unsigned char *)(v53 + 4)  = *(unsigned char *)(v54 + 4);
  *(unsigned char *)(v53 + 5)  = *(unsigned char *)(v54 + 5);
  *(unsigned char *)(v53 + 6)  = *(unsigned char *)(v54 + 6);
  *(void *)(v53 + 8)  = *(void *)(v54 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v55 = v206[16];
  uint64_t v56 = v205 + v55;
  char v57 = (long long *)(a2 + v55);
  uint64_t v58 = *(void *)(v205 + v55 + 8);
  uint64_t v59 = *(void *)(a2 + v55 + 8);
  if (v58)
  {
    if (v59)
    {
      *(unsigned char *)uint64_t v56 = *(unsigned char *)v57;
      *(void *)(v56 + 8)  = *((void *)v57 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v56 + 16)  = *((void *)v57 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v56 + 24)  = *((void *)v57 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v56 + 32)  = *((void *)v57 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_10029B878(v56);
      uint64_t v60 = *((void *)v57 + 4);
      long long v61 = v57[1];
      *(_OWORD *)uint64_t v56 = *v57;
      *(_OWORD *)(v56 + 16)  = v61;
      *(void *)(v56 + 32)  = v60;
    }
  }
  else if (v59)
  {
    *(unsigned char *)uint64_t v56 = *(unsigned char *)v57;
    *(void *)(v56 + 8)  = *((void *)v57 + 1);
    *(void *)(v56 + 16)  = *((void *)v57 + 2);
    *(void *)(v56 + 24)  = *((void *)v57 + 3);
    *(void *)(v56 + 32)  = *((void *)v57 + 4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v62 = *v57;
    long long v63 = v57[1];
    *(void *)(v56 + 32)  = *((void *)v57 + 4);
    *(_OWORD *)uint64_t v56 = v62;
    *(_OWORD *)(v56 + 16)  = v63;
  }
  uint64_t v64 = v206;
  uint64_t v65 = v206[17];
  uint64_t v66 = v205 + v65;
  uint64_t v67 = (long long *)(a2 + v65);
  long long v68 = *v67;
  *(_DWORD *)(v66 + 16)  = *((_DWORD *)v67 + 4);
  *(_OWORD *)uint64_t v66 = v68;
  uint64_t v69 = v206[18];
  uint64_t v70 = v205 + v69;
  uint64_t v71 = a2 + v69;
  uint64_t v72 = type metadata accessor for NANAttribute.CustomDeviceInformation(0);
  uint64_t v73 = *(void *)(v72 - 8);
  unint64_t v74 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v73 + 48);
  int v75 = v74(v70, 1, v72);
  int v76 = v74(v71, 1, v72);
  if (!v75)
  {
    if (v76)
    {
      sub_10029B8A8(v70, type metadata accessor for NANAttribute.CustomDeviceInformation);
      goto LABEL_21;
    }
    *(unsigned char *)uint64_t v70 = *(unsigned char *)v71;
    *(unsigned char *)(v70 + 1)  = *(unsigned char *)(v71 + 1);
    *(_DWORD *)(v70 + 4)  = *(_DWORD *)(v71 + 4);
    uint64_t v90 = *(int *)(v72 + 28);
    uint64_t v91 = v70 + v90;
    uint64_t v92 = v71 + v90;
    *(unsigned char *)uint64_t v91 = *(unsigned char *)(v71 + v90);
    *(_WORD *)(v91 + 1)  = *(_WORD *)(v71 + v90 + 1);
    uint64_t v93 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
    uint64_t v94 = v93[6];
    uint64_t v95 = (void *)(v91 + v94);
    uint64_t v96 = (void *)(v92 + v94);
    uint64_t v97 = type metadata accessor for P256.KeyAgreement.PublicKey();
    uint64_t v98 = *(void *)(v97 - 8);
    uint64_t v99 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v98 + 48);
    int v100 = v99(v95, 1, v97);
    int v101 = v99(v96, 1, v97);
    if (v100)
    {
      if (!v101)
      {
        (*(void (**)(void *, void *, uint64_t))(v98 + 16))(v95, v96, v97);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v98 + 56))(v95, 0, 1, v97);
        goto LABEL_45;
      }
    }
    else
    {
      if (!v101)
      {
        (*(void (**)(void *, void *, uint64_t))(v98 + 24))(v95, v96, v97);
LABEL_45:
        uint64_t v136 = v93[7];
        uint64_t v137 = (uint64_t *)(v91 + v136);
        uint64_t v138 = (uint64_t *)(v92 + v136);
        unint64_t v139 = *(void *)(v92 + v136 + 8);
        if (*(void *)(v91 + v136 + 8) >> 60 == 15)
        {
          if (v139 >> 60 != 15)
          {
            uint64_t v140 = *v138;
            sub_100013D44(*v138, v139);
            uint64_t *v137 = v140;
            v137[1]  = v139;
            goto LABEL_52;
          }
        }
        else
        {
          if (v139 >> 60 != 15)
          {
            uint64_t v141 = *v138;
            sub_100013D44(*v138, v139);
            uint64_t v142 = *v137;
            unint64_t v143 = v137[1];
            uint64_t *v137 = v141;
            v137[1]  = v139;
            sub_10000C970(v142, v143);
LABEL_52:
            uint64_t v144 = v93[8];
            uint64_t v145 = (uint64_t *)(v91 + v144);
            uint64_t v146 = (uint64_t *)(v92 + v144);
            unint64_t v147 = *(void *)(v92 + v144 + 8);
            if (*(void *)(v91 + v144 + 8) >> 60 == 15)
            {
              if (v147 >> 60 != 15)
              {
                uint64_t v148 = *v146;
                sub_100013D44(*v146, v147);
                *uint64_t v145 = v148;
                v145[1]  = v147;
                goto LABEL_59;
              }
            }
            else
            {
              if (v147 >> 60 != 15)
              {
                uint64_t v149 = *v146;
                sub_100013D44(*v146, v147);
                uint64_t v150 = *v145;
                unint64_t v151 = v145[1];
                *uint64_t v145 = v149;
                v145[1]  = v147;
                sub_10000C970(v150, v151);
LABEL_59:
                uint64_t v152 = v93[9];
                uint64_t v153 = (uint64_t *)(v91 + v152);
                id v154 = (uint64_t *)(v92 + v152);
                unint64_t v155 = *(void *)(v92 + v152 + 8);
                if (*(void *)(v91 + v152 + 8) >> 60 == 15)
                {
                  if (v155 >> 60 != 15)
                  {
                    uint64_t v156 = *v154;
                    sub_100013D44(*v154, v155);
                    *uint64_t v153 = v156;
                    v153[1]  = v155;
                    goto LABEL_66;
                  }
                }
                else
                {
                  if (v155 >> 60 != 15)
                  {
                    uint64_t v157 = *v154;
                    sub_100013D44(*v154, v155);
                    uint64_t v158 = *v153;
                    unint64_t v159 = v153[1];
                    *uint64_t v153 = v157;
                    v153[1]  = v155;
                    sub_10000C970(v158, v159);
LABEL_66:
                    uint64_t v160 = v93[10];
                    uint64_t v161 = (void *)(v91 + v160);
                    uint64_t v162 = (void *)(v92 + v160);
                    uint64_t v163 = type metadata accessor for UUID();
                    uint64_t v164 = *(void *)(v163 - 8);
                    id v165 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v164 + 48);
                    int v166 = v165(v161, 1, v163);
                    int v167 = v165(v162, 1, v163);
                    if (v166)
                    {
                      if (!v167)
                      {
                        (*(void (**)(void *, void *, uint64_t))(v164 + 16))(v161, v162, v163);
                        (*(void (**)(void *, void, uint64_t, uint64_t))(v164 + 56))(v161, 0, 1, v163);
                        goto LABEL_72;
                      }
                    }
                    else
                    {
                      if (!v167)
                      {
                        (*(void (**)(void *, void *, uint64_t))(v164 + 24))(v161, v162, v163);
LABEL_72:
                        *(void *)(v91 + v93[11])  = *(void *)(v92 + v93[11]);
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRelease();
                        uint64_t v169 = v93[12];
                        uint64_t v170 = (unsigned char *)(v91 + v169);
                        os_log_t v171 = (unsigned char *)(v92 + v169);
                        uint64_t v172 = type metadata accessor for NANInternetSharingStatistics.Requester();
                        uint64_t v173 = *(void *)(v172 - 8);
                        uint64_t v174 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v173 + 48);
                        int v175 = v174(v170, 1, v172);
                        int v176 = v174(v171, 1, v172);
                        if (v175)
                        {
                          uint64_t v88 = v205;
                          uint64_t v64 = v206;
                          if (!v176)
                          {
                            uint64_t v177 = type metadata accessor for DispatchTimeInterval();
                            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v177 - 8) + 16))(v170, v171, v177);
                            v170[*(int *)(v172 + 20)]  = v171[*(int *)(v172 + 20)];
                            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v173 + 56))(v170, 0, 1, v172);
LABEL_78:
                            uint64_t v89 = v204;
                            uint64_t v179 = v93[13];
                            Class v180 = (_OWORD *)(v91 + v179);
                            Class v181 = (long long *)(v92 + v179);
                            long long v182 = *v181;
                            *(_OWORD *)((char *)v180 + 9)  = *(long long *)((char *)v181 + 9);
                            *Class v180 = v182;
                            goto LABEL_79;
                          }
                        }
                        else
                        {
                          uint64_t v88 = v205;
                          uint64_t v64 = v206;
                          if (!v176)
                          {
                            uint64_t v199 = type metadata accessor for DispatchTimeInterval();
                            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v199 - 8) + 24))(v170, v171, v199);
                            v170[*(int *)(v172 + 20)]  = v171[*(int *)(v172 + 20)];
                            goto LABEL_78;
                          }
                          sub_10029B8A8((uint64_t)v170, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
                        }
                        uint64_t v178 = sub_100010BCC((uint64_t *)&unk_100485B60);
                        memcpy(v170, v171, *(void *)(*(void *)(v178 - 8) + 64));
                        goto LABEL_78;
                      }
                      (*(void (**)(void *, uint64_t))(v164 + 8))(v161, v163);
                    }
                    uint64_t v168 = sub_100010BCC(&qword_1004862B0);
                    memcpy(v161, v162, *(void *)(*(void *)(v168 - 8) + 64));
                    goto LABEL_72;
                  }
                  sub_1001A21F0((uint64_t)v153);
                }
                *(_OWORD *)uint64_t v153 = *(_OWORD *)v154;
                goto LABEL_66;
              }
              sub_1001A21F0((uint64_t)v145);
            }
            *(_OWORD *)uint64_t v145 = *(_OWORD *)v146;
            goto LABEL_59;
          }
          sub_1001A21F0((uint64_t)v137);
        }
        *(_OWORD *)uint64_t v137 = *(_OWORD *)v138;
        goto LABEL_52;
      }
      (*(void (**)(void *, uint64_t))(v98 + 8))(v95, v97);
    }
    uint64_t v135 = sub_100010BCC((uint64_t *)&unk_1004852B0);
    memcpy(v95, v96, *(void *)(*(void *)(v135 - 8) + 64));
    goto LABEL_45;
  }
  if (v76)
  {
LABEL_21:
    uint64_t v87 = sub_100010BCC(&qword_100484D00);
    memcpy((void *)v70, (const void *)v71, *(void *)(*(void *)(v87 - 8) + 64));
    uint64_t v89 = v204;
    uint64_t v88 = v205;
    goto LABEL_79;
  }
  uint64_t v203 = v73;
  *(unsigned char *)uint64_t v70 = *(unsigned char *)v71;
  *(unsigned char *)(v70 + 1)  = *(unsigned char *)(v71 + 1);
  *(_DWORD *)(v70 + 4)  = *(_DWORD *)(v71 + 4);
  uint64_t v77 = *(int *)(v72 + 28);
  uint64_t v78 = v70 + v77;
  uint64_t v79 = v71 + v77;
  *(unsigned char *)uint64_t v78 = *(unsigned char *)v79;
  *(_WORD *)(v78 + 1)  = *(_WORD *)(v79 + 1);
  uint64_t v80 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  uint64_t v81 = v80[6];
  uint64_t v82 = (void *)(v78 + v81);
  uint64_t v83 = (const void *)(v79 + v81);
  uint64_t v84 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v85 = *(void *)(v84 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v85 + 48))(v83, 1, v84))
  {
    uint64_t v86 = sub_100010BCC((uint64_t *)&unk_1004852B0);
    memcpy(v82, v83, *(void *)(*(void *)(v86 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v85 + 16))(v82, v83, v84);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v85 + 56))(v82, 0, 1, v84);
  }
  uint64_t v102 = v80[7];
  uint64_t v103 = v78 + v102;
  uint64_t v104 = (uint64_t *)(v79 + v102);
  unint64_t v105 = v104[1];
  if (v105 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v103 = *(_OWORD *)v104;
  }
  else
  {
    uint64_t v106 = *v104;
    sub_100013D44(*v104, v104[1]);
    *(void *)uint64_t v103 = v106;
    *(void *)(v103 + 8)  = v105;
  }
  uint64_t v107 = v80[8];
  uint64_t v108 = v78 + v107;
  uint64_t v109 = (uint64_t *)(v79 + v107);
  unint64_t v110 = v109[1];
  if (v110 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v108 = *(_OWORD *)v109;
  }
  else
  {
    uint64_t v111 = *v109;
    sub_100013D44(*v109, v109[1]);
    *(void *)uint64_t v108 = v111;
    *(void *)(v108 + 8)  = v110;
  }
  uint64_t v112 = v80[9];
  uint64_t v113 = v78 + v112;
  uint64_t v114 = (uint64_t *)(v79 + v112);
  unint64_t v115 = v114[1];
  if (v115 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v113 = *(_OWORD *)v114;
  }
  else
  {
    uint64_t v116 = *v114;
    sub_100013D44(*v114, v114[1]);
    *(void *)uint64_t v113 = v116;
    *(void *)(v113 + 8)  = v115;
  }
  uint64_t v117 = v80[10];
  uint64_t v118 = (void *)(v78 + v117);
  uint64_t v119 = (const void *)(v79 + v117);
  uint64_t v120 = type metadata accessor for UUID();
  uint64_t v121 = *(void *)(v120 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v121 + 48))(v119, 1, v120))
  {
    uint64_t v122 = sub_100010BCC(&qword_1004862B0);
    memcpy(v118, v119, *(void *)(*(void *)(v122 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v121 + 16))(v118, v119, v120);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v121 + 56))(v118, 0, 1, v120);
  }
  *(void *)(v78 + v80[11])  = *(void *)(v79 + v80[11]);
  unint64_t v200 = v80;
  uint64_t v201 = v78;
  uint64_t v123 = v80[12];
  unint64_t v124 = (void *)(v78 + v123);
  uint64_t v125 = (const void *)(v79 + v123);
  uint64_t v126 = type metadata accessor for NANInternetSharingStatistics.Requester();
  uint64_t v127 = *(void *)(v126 - 8);
  unint64_t v128 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v127 + 48);
  swift_bridgeObjectRetain();
  if (v128(v125, 1, v126))
  {
    uint64_t v129 = sub_100010BCC((uint64_t *)&unk_100485B60);
    memcpy(v124, v125, *(void *)(*(void *)(v129 - 8) + 64));
  }
  else
  {
    uint64_t v130 = type metadata accessor for DispatchTimeInterval();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v130 - 8) + 16))(v124, v125, v130);
    *((unsigned char *)v124 + *(int *)(v126 + 20))  = *((unsigned char *)v125 + *(int *)(v126 + 20));
    (*(void (**)(void *, void, uint64_t, uint64_t))(v127 + 56))(v124, 0, 1, v126);
  }
  uint64_t v89 = v204;
  uint64_t v88 = v205;
  uint64_t v64 = v206;
  uint64_t v131 = v200[13];
  os_log_type_t v132 = (_OWORD *)(v201 + v131);
  Class v133 = (long long *)(v79 + v131);
  long long v134 = *v133;
  *(_OWORD *)((char *)v132 + 9)  = *(long long *)((char *)v133 + 9);
  *os_log_type_t v132 = v134;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v203 + 56))(v70, 0, 1, v72);
LABEL_79:
  *(void *)(v88 + v64[19])  = *(void *)(v89 + v64[19]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v183 = v64[20];
  uint64_t v184 = (void *)(v88 + v183);
  os_log_t v185 = (void *)(v89 + v183);
  uint64_t v186 = type metadata accessor for UUID();
  uint64_t v187 = *(void *)(v186 - 8);
  Class v188 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v187 + 48);
  int v189 = v188(v184, 1, v186);
  int v190 = v188(v185, 1, v186);
  if (v189)
  {
    if (!v190)
    {
      (*(void (**)(void *, void *, uint64_t))(v187 + 16))(v184, v185, v186);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v187 + 56))(v184, 0, 1, v186);
      goto LABEL_85;
    }
    goto LABEL_84;
  }
  if (v190)
  {
    (*(void (**)(void *, uint64_t))(v187 + 8))(v184, v186);
LABEL_84:
    uint64_t v191 = sub_100010BCC(&qword_1004862B0);
    memcpy(v184, v185, *(void *)(*(void *)(v191 - 8) + 64));
    goto LABEL_85;
  }
  (*(void (**)(void *, void *, uint64_t))(v187 + 24))(v184, v185, v186);
LABEL_85:
  uint64_t v192 = v64[21];
  os_log_t v193 = (void *)(v88 + v192);
  char v194 = (void *)(v89 + v192);
  int v195 = v188((void *)(v88 + v192), 1, v186);
  int v196 = v188(v194, 1, v186);
  if (!v195)
  {
    if (!v196)
    {
      (*(void (**)(void *, void *, uint64_t))(v187 + 24))(v193, v194, v186);
      return v88;
    }
    (*(void (**)(void *, uint64_t))(v187 + 8))(v193, v186);
    goto LABEL_90;
  }
  if (v196)
  {
LABEL_90:
    uint64_t v197 = sub_100010BCC(&qword_1004862B0);
    memcpy(v193, v194, *(void *)(*(void *)(v197 - 8) + 64));
    return v88;
  }
  (*(void (**)(void *, void *, uint64_t))(v187 + 16))(v193, v194, v186);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v187 + 56))(v193, 0, 1, v186);
  return v88;
}

uint64_t sub_10029B878(uint64_t a1)
{
  return a1;
}

uint64_t sub_10029B8A8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10029B908(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(_WORD *)(v9 + 4)  = *(_WORD *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  uint64_t v13 = type metadata accessor for DispatchTime();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32);
  v14(v11, v12, v13);
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = a1 + v15;
  uint64_t v18 = a2 + v15;
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  *(_WORD *)(v17 + 4)  = *(_WORD *)(v18 + 4);
  uint64_t v19 = (_DWORD *)(a1 + v16);
  uint64_t v20 = (_DWORD *)(a2 + v16);
  BeaconInformation  = type metadata accessor for NANPeer.LastBeaconInformation(0);
  uint64_t v22 = *(void *)(BeaconInformation - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, BeaconInformation))
  {
    uint64_t v23 = sub_100010BCC(&qword_100484CF8);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    *uint64_t v19 = *v20;
    *((_WORD *)v19 + 2)  = *((_WORD *)v20 + 2);
    *(_OWORD *)(v19 + 2)  = *(_OWORD *)(v20 + 2);
    *((void *)v19 + 3)  = *((void *)v20 + 3);
    v14((uint64_t)v19 + *(int *)(BeaconInformation + 32), (uint64_t)v20 + *(int *)(BeaconInformation + 32), v13);
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, BeaconInformation);
  }
  uint64_t v24 = a3[9];
  uint64_t v25 = a3[10];
  uint64_t v26 = a1 + v24;
  uint64_t v27 = a2 + v24;
  *(_WORD *)uint64_t v26 = *(_WORD *)v27;
  *(unsigned char *)(v26 + 2)  = *(unsigned char *)(v27 + 2);
  uint64_t v28 = a1 + v25;
  uint64_t v29 = a2 + v25;
  *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
  *(unsigned char *)(v28 + 16)  = *(unsigned char *)(v29 + 16);
  uint64_t v30 = a3[11];
  uint64_t v31 = a3[12];
  uint64_t v32 = a1 + v30;
  uint64_t v33 = a2 + v30;
  *(_WORD *)uint64_t v32 = *(_WORD *)v33;
  *(unsigned char *)(v32 + 2)  = *(unsigned char *)(v33 + 2);
  uint64_t v34 = a1 + v31;
  uint64_t v35 = a2 + v31;
  *(_WORD *)uint64_t v34 = *(_WORD *)v35;
  *(unsigned char *)(v34 + 2)  = *(unsigned char *)(v35 + 2);
  uint64_t v36 = a3[13];
  uint64_t v37 = a3[14];
  uint64_t v38 = a1 + v36;
  uint64_t v39 = a2 + v36;
  *(_DWORD *)(v38 + 8)  = *(_DWORD *)(v39 + 8);
  *(void *)uint64_t v38 = *(void *)v39;
  uint64_t v40 = a1 + v37;
  uint64_t v41 = a2 + v37;
  *(unsigned char *)(v40 + 4)  = *(unsigned char *)(v41 + 4);
  *(_DWORD *)uint64_t v40 = *(_DWORD *)v41;
  uint64_t v42 = a3[16];
  *(_OWORD *)(a1 + a3[15])  = *(_OWORD *)(a2 + a3[15]);
  uint64_t v43 = a1 + v42;
  uint64_t v44 = a2 + v42;
  *(void *)(v43 + 32)  = *(void *)(v44 + 32);
  long long v45 = *(_OWORD *)(v44 + 16);
  *(_OWORD *)uint64_t v43 = *(_OWORD *)v44;
  *(_OWORD *)(v43 + 16)  = v45;
  uint64_t v46 = a3[17];
  uint64_t v47 = a3[18];
  uint64_t v48 = a1 + v46;
  uint64_t v49 = (long long *)(a2 + v46);
  long long v50 = *v49;
  *(_DWORD *)(v48 + 16)  = *((_DWORD *)v49 + 4);
  uint64_t v51 = (_DWORD *)(a1 + v47);
  uint64_t v52 = (_DWORD *)(a2 + v47);
  *(_OWORD *)uint64_t v48 = v50;
  uint64_t v53 = type metadata accessor for NANAttribute.CustomDeviceInformation(0);
  uint64_t v54 = *(void *)(v53 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
  {
    uint64_t v55 = sub_100010BCC(&qword_100484D00);
    memcpy(v51, v52, *(void *)(*(void *)(v55 - 8) + 64));
  }
  else
  {
    uint64_t v91 = v54;
    uint64_t v92 = v51;
    *(_WORD *)uint64_t v51 = *(_WORD *)v52;
    v51[1]  = v52[1];
    uint64_t v56 = *(int *)(v53 + 28);
    char v57 = (char *)v51 + v56;
    uint64_t v58 = (char *)v52 + v56;
    *char v57 = *((unsigned char *)v52 + v56);
    *(_WORD *)(v57 + 1)  = *(_WORD *)((char *)v52 + v56 + 1);
    uint64_t v59 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
    uint64_t v60 = v59[6];
    __dst  = &v57[v60];
    long long v61 = &v58[v60];
    uint64_t v62 = type metadata accessor for P256.KeyAgreement.PublicKey();
    uint64_t v63 = *(void *)(v62 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v61, 1, v62))
    {
      uint64_t v64 = sub_100010BCC((uint64_t *)&unk_1004852B0);
      memcpy(__dst, v61, *(void *)(*(void *)(v64 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v63 + 32))(__dst, v61, v62);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v63 + 56))(__dst, 0, 1, v62);
    }
    *(_OWORD *)&v57[v59[7]]  = *(_OWORD *)&v58[v59[7]];
    *(_OWORD *)&v57[v59[8]]  = *(_OWORD *)&v58[v59[8]];
    *(_OWORD *)&v57[v59[9]]  = *(_OWORD *)&v58[v59[9]];
    uint64_t v65 = v59[10];
    __dsta  = &v57[v65];
    uint64_t v66 = &v58[v65];
    uint64_t v67 = type metadata accessor for UUID();
    uint64_t v68 = *(void *)(v67 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
    {
      uint64_t v69 = sub_100010BCC(&qword_1004862B0);
      memcpy(__dsta, v66, *(void *)(*(void *)(v69 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v68 + 32))(__dsta, v66, v67);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v68 + 56))(__dsta, 0, 1, v67);
    }
    *(void *)&v57[v59[11]]  = *(void *)&v58[v59[11]];
    uint64_t v70 = v59[12];
    __dstb  = &v57[v70];
    uint64_t v71 = &v58[v70];
    uint64_t v72 = type metadata accessor for NANInternetSharingStatistics.Requester();
    uint64_t v73 = *(void *)(v72 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v71, 1, v72))
    {
      uint64_t v74 = sub_100010BCC((uint64_t *)&unk_100485B60);
      memcpy(__dstb, v71, *(void *)(*(void *)(v74 - 8) + 64));
    }
    else
    {
      uint64_t v75 = type metadata accessor for DispatchTimeInterval();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v75 - 8) + 32))(__dstb, v71, v75);
      __dstb[*(int *)(v72 + 20)]  = v71[*(int *)(v72 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v73 + 56))(__dstb, 0, 1, v72);
    }
    uint64_t v76 = v59[13];
    uint64_t v77 = &v57[v76];
    uint64_t v78 = &v58[v76];
    *(_OWORD *)uint64_t v77 = *(_OWORD *)v78;
    *(_OWORD *)(v77 + 9)  = *(_OWORD *)(v78 + 9);
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v91 + 56))(v92, 0, 1, v53);
  }
  uint64_t v79 = a3[20];
  *(void *)(a1 + a3[19])  = *(void *)(a2 + a3[19]);
  uint64_t v80 = (void *)(a1 + v79);
  uint64_t v81 = (const void *)(a2 + v79);
  uint64_t v82 = type metadata accessor for UUID();
  uint64_t v83 = *(void *)(v82 - 8);
  uint64_t v84 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v83 + 48);
  if (v84(v81, 1, v82))
  {
    uint64_t v85 = sub_100010BCC(&qword_1004862B0);
    memcpy(v80, v81, *(void *)(*(void *)(v85 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v83 + 32))(v80, v81, v82);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v83 + 56))(v80, 0, 1, v82);
  }
  uint64_t v86 = a3[21];
  uint64_t v87 = (void *)(a1 + v86);
  uint64_t v88 = (const void *)(a2 + v86);
  if (v84(v88, 1, v82))
  {
    uint64_t v89 = sub_100010BCC(&qword_1004862B0);
    memcpy(v87, v88, *(void *)(*(void *)(v89 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v83 + 32))(v87, v88, v82);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v83 + 56))(v87, 0, 1, v82);
  }
  return a1;
}

uint64_t sub_10029C164(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(_WORD *)(v9 + 4)  = *(_WORD *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  uint64_t v13 = type metadata accessor for DispatchTime();
  uint64_t v164 = *(void *)(v13 - 8);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v164 + 40);
  v14(v11, v12, v13);
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v168 = a3;
  uint64_t v17 = a1 + v15;
  uint64_t v18 = a2 + v15;
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  *(_WORD *)(v17 + 4)  = *(_WORD *)(v18 + 4);
  uint64_t v166 = a1;
  uint64_t v167 = a2;
  uint64_t v19 = a1 + v16;
  uint64_t v20 = a2 + v16;
  BeaconInformation  = type metadata accessor for NANPeer.LastBeaconInformation(0);
  uint64_t v22 = *(void *)(BeaconInformation - 8);
  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  int v24 = v23(v19, 1, BeaconInformation);
  int v25 = v23(v20, 1, BeaconInformation);
  if (v24)
  {
    if (!v25)
    {
      *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
      *(_WORD *)(v19 + 4)  = *(_WORD *)(v20 + 4);
      *(_OWORD *)(v19 + 8)  = *(_OWORD *)(v20 + 8);
      *(void *)(v19 + 24)  = *(void *)(v20 + 24);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v164 + 32))(v19 + *(int *)(BeaconInformation + 32), v20 + *(int *)(BeaconInformation + 32), v13);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, BeaconInformation);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    sub_10029B8A8(v19, type metadata accessor for NANPeer.LastBeaconInformation);
LABEL_6:
    uint64_t v26 = sub_100010BCC(&qword_100484CF8);
    memcpy((void *)v19, (const void *)v20, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
  *(_WORD *)(v19 + 4)  = *(_WORD *)(v20 + 4);
  *(_OWORD *)(v19 + 8)  = *(_OWORD *)(v20 + 8);
  *(void *)(v19 + 24)  = *(void *)(v20 + 24);
  v14(v19 + *(int *)(BeaconInformation + 32), v20 + *(int *)(BeaconInformation + 32), v13);
LABEL_7:
  uint64_t v27 = a2;
  uint64_t v28 = v168;
  uint64_t v29 = v168[9];
  uint64_t v30 = v168[10];
  uint64_t v31 = v166 + v29;
  uint64_t v32 = a2 + v29;
  *(_WORD *)uint64_t v31 = *(_WORD *)v32;
  *(unsigned char *)(v31 + 2)  = *(unsigned char *)(v32 + 2);
  uint64_t v33 = v166 + v30;
  uint64_t v34 = a2 + v30;
  *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
  *(unsigned char *)(v33 + 16)  = *(unsigned char *)(v34 + 16);
  uint64_t v35 = v168[11];
  uint64_t v36 = v168[12];
  uint64_t v37 = v166 + v35;
  uint64_t v38 = a2 + v35;
  *(_WORD *)uint64_t v37 = *(_WORD *)v38;
  *(unsigned char *)(v37 + 2)  = *(unsigned char *)(v38 + 2);
  uint64_t v39 = v166 + v36;
  uint64_t v40 = a2 + v36;
  *(unsigned char *)(v39 + 2)  = *(unsigned char *)(v40 + 2);
  *(_WORD *)uint64_t v39 = *(_WORD *)v40;
  uint64_t v41 = v168[13];
  uint64_t v42 = v168[14];
  uint64_t v43 = v166 + v41;
  uint64_t v44 = a2 + v41;
  *(void *)uint64_t v43 = *(void *)v44;
  *(_DWORD *)(v43 + 8)  = *(_DWORD *)(v44 + 8);
  uint64_t v45 = v166 + v42;
  uint64_t v46 = a2 + v42;
  *(_DWORD *)uint64_t v45 = *(_DWORD *)v46;
  *(unsigned char *)(v45 + 4)  = *(unsigned char *)(v46 + 4);
  uint64_t v47 = v168[15];
  uint64_t v48 = v166 + v47;
  uint64_t v49 = a2 + v47;
  *(_DWORD *)uint64_t v48 = *(_DWORD *)v49;
  *(unsigned char *)(v48 + 4)  = *(unsigned char *)(v49 + 4);
  *(unsigned char *)(v48 + 5)  = *(unsigned char *)(v49 + 5);
  *(unsigned char *)(v48 + 6)  = *(unsigned char *)(v49 + 6);
  *(void *)(v48 + 8)  = *(void *)(v49 + 8);
  swift_bridgeObjectRelease();
  uint64_t v50 = v168[16];
  uint64_t v51 = v166 + v50;
  uint64_t v52 = a2 + v50;
  if (*(void *)(v166 + v50 + 8))
  {
    uint64_t v53 = *(void *)(v52 + 8);
    if (v53)
    {
      *(unsigned char *)uint64_t v51 = *(unsigned char *)v52;
      *(void *)(v51 + 8)  = v53;
      swift_bridgeObjectRelease();
      *(void *)(v51 + 16)  = *(void *)(v52 + 16);
      swift_bridgeObjectRelease();
      *(void *)(v51 + 24)  = *(void *)(v52 + 24);
      swift_bridgeObjectRelease();
      *(void *)(v51 + 32)  = *(void *)(v52 + 32);
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    sub_10029B878(v51);
  }
  long long v54 = *(_OWORD *)(v52 + 16);
  *(_OWORD *)uint64_t v51 = *(_OWORD *)v52;
  *(_OWORD *)(v51 + 16)  = v54;
  *(void *)(v51 + 32)  = *(void *)(v52 + 32);
LABEL_12:
  uint64_t v55 = v168[17];
  uint64_t v56 = v168[18];
  uint64_t v57 = v166 + v55;
  uint64_t v58 = v167 + v55;
  *(_OWORD *)uint64_t v57 = *(_OWORD *)v58;
  *(_DWORD *)(v57 + 16)  = *(_DWORD *)(v58 + 16);
  uint64_t v59 = (_DWORD *)(v166 + v56);
  uint64_t v60 = (_DWORD *)(v167 + v56);
  uint64_t v61 = type metadata accessor for NANAttribute.CustomDeviceInformation(0);
  uint64_t v62 = *(void *)(v61 - 8);
  uint64_t v63 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v62 + 48);
  int v64 = v63(v59, 1, v61);
  int v65 = v63(v60, 1, v61);
  if (!v64)
  {
    if (v65)
    {
      sub_10029B8A8((uint64_t)v59, type metadata accessor for NANAttribute.CustomDeviceInformation);
      goto LABEL_18;
    }
    *(_WORD *)uint64_t v59 = *(_WORD *)v60;
    v59[1]  = v60[1];
    uint64_t v77 = *(int *)(v61 + 28);
    uint64_t v78 = (char *)v59 + v77;
    uint64_t v79 = (char *)v60 + v77;
    *uint64_t v78 = *((unsigned char *)v60 + v77);
    *(_WORD *)(v78 + 1)  = *(_WORD *)((char *)v60 + v77 + 1);
    uint64_t v80 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
    uint64_t v81 = v80[6];
    uint64_t v82 = &v78[v81];
    uint64_t v83 = &v79[v81];
    uint64_t v84 = type metadata accessor for P256.KeyAgreement.PublicKey();
    uint64_t v85 = *(void *)(v84 - 8);
    uint64_t v86 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v85 + 48);
    int v87 = v86(v82, 1, v84);
    int v88 = v86(v83, 1, v84);
    if (v87)
    {
      if (!v88)
      {
        (*(void (**)(char *, char *, uint64_t))(v85 + 32))(v82, v83, v84);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v85 + 56))(v82, 0, 1, v84);
        goto LABEL_34;
      }
    }
    else
    {
      if (!v88)
      {
        (*(void (**)(char *, char *, uint64_t))(v85 + 40))(v82, v83, v84);
LABEL_34:
        uint64_t v104 = v80[7];
        unint64_t v105 = (uint64_t *)&v78[v104];
        uint64_t v106 = (uint64_t *)&v79[v104];
        unint64_t v107 = *(void *)&v78[v104 + 8];
        if (v107 >> 60 != 15)
        {
          unint64_t v108 = v106[1];
          if (v108 >> 60 != 15)
          {
            uint64_t v109 = *v105;
            *unint64_t v105 = *v106;
            v105[1]  = v108;
            sub_10000C970(v109, v107);
LABEL_39:
            uint64_t v110 = v80[8];
            uint64_t v111 = (uint64_t *)&v78[v110];
            uint64_t v112 = (uint64_t *)&v79[v110];
            unint64_t v113 = *(void *)&v78[v110 + 8];
            if (v113 >> 60 != 15)
            {
              unint64_t v114 = v112[1];
              if (v114 >> 60 != 15)
              {
                uint64_t v115 = *v111;
                *uint64_t v111 = *v112;
                v111[1]  = v114;
                sub_10000C970(v115, v113);
LABEL_44:
                uint64_t v116 = v80[9];
                uint64_t v117 = (uint64_t *)&v78[v116];
                uint64_t v118 = (uint64_t *)&v79[v116];
                unint64_t v119 = *(void *)&v78[v116 + 8];
                if (v119 >> 60 != 15)
                {
                  unint64_t v120 = v118[1];
                  if (v120 >> 60 != 15)
                  {
                    uint64_t v121 = *v117;
                    uint64_t *v117 = *v118;
                    v117[1]  = v120;
                    sub_10000C970(v121, v119);
LABEL_49:
                    uint64_t v122 = v80[10];
                    uint64_t v123 = &v78[v122];
                    unint64_t v124 = &v79[v122];
                    uint64_t v125 = type metadata accessor for UUID();
                    uint64_t v126 = *(void *)(v125 - 8);
                    uint64_t v127 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v126 + 48);
                    int v128 = v127(v123, 1, v125);
                    int v129 = v127(v124, 1, v125);
                    if (v128)
                    {
                      if (!v129)
                      {
                        (*(void (**)(char *, char *, uint64_t))(v126 + 32))(v123, v124, v125);
                        (*(void (**)(char *, void, uint64_t, uint64_t))(v126 + 56))(v123, 0, 1, v125);
                        goto LABEL_55;
                      }
                    }
                    else
                    {
                      if (!v129)
                      {
                        (*(void (**)(char *, char *, uint64_t))(v126 + 40))(v123, v124, v125);
LABEL_55:
                        *(void *)&v78[v80[11]]  = *(void *)&v79[v80[11]];
                        swift_bridgeObjectRelease();
                        uint64_t v131 = v80[12];
                        os_log_type_t v132 = &v78[v131];
                        Class v133 = &v79[v131];
                        uint64_t v134 = type metadata accessor for NANInternetSharingStatistics.Requester();
                        uint64_t v135 = *(void *)(v134 - 8);
                        uint64_t v136 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v135 + 48);
                        int v137 = v136(v132, 1, v134);
                        int v138 = v136(v133, 1, v134);
                        if (v137)
                        {
                          uint64_t v74 = v166;
                          uint64_t v27 = v167;
                          if (!v138)
                          {
                            uint64_t v139 = type metadata accessor for DispatchTimeInterval();
                            (*(void (**)(char *, char *, uint64_t))(*(void *)(v139 - 8) + 32))(v132, v133, v139);
                            v132[*(int *)(v134 + 20)]  = v133[*(int *)(v134 + 20)];
                            (*(void (**)(char *, void, uint64_t, uint64_t))(v135 + 56))(v132, 0, 1, v134);
LABEL_61:
                            uint64_t v28 = v168;
                            uint64_t v141 = v80[13];
                            uint64_t v142 = &v78[v141];
                            unint64_t v143 = &v79[v141];
                            *(_OWORD *)uint64_t v142 = *(_OWORD *)v143;
                            *(_OWORD *)(v142 + 9)  = *(_OWORD *)(v143 + 9);
                            goto LABEL_62;
                          }
                        }
                        else
                        {
                          uint64_t v74 = v166;
                          uint64_t v27 = v167;
                          if (!v138)
                          {
                            uint64_t v160 = type metadata accessor for DispatchTimeInterval();
                            (*(void (**)(char *, char *, uint64_t))(*(void *)(v160 - 8) + 40))(v132, v133, v160);
                            v132[*(int *)(v134 + 20)]  = v133[*(int *)(v134 + 20)];
                            goto LABEL_61;
                          }
                          sub_10029B8A8((uint64_t)v132, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
                        }
                        uint64_t v140 = sub_100010BCC((uint64_t *)&unk_100485B60);
                        memcpy(v132, v133, *(void *)(*(void *)(v140 - 8) + 64));
                        goto LABEL_61;
                      }
                      (*(void (**)(char *, uint64_t))(v126 + 8))(v123, v125);
                    }
                    uint64_t v130 = sub_100010BCC(&qword_1004862B0);
                    memcpy(v123, v124, *(void *)(*(void *)(v130 - 8) + 64));
                    goto LABEL_55;
                  }
                  sub_1001A21F0((uint64_t)v117);
                }
                *(_OWORD *)uint64_t v117 = *(_OWORD *)v118;
                goto LABEL_49;
              }
              sub_1001A21F0((uint64_t)v111);
            }
            *(_OWORD *)uint64_t v111 = *(_OWORD *)v112;
            goto LABEL_44;
          }
          sub_1001A21F0((uint64_t)v105);
        }
        *(_OWORD *)unint64_t v105 = *(_OWORD *)v106;
        goto LABEL_39;
      }
      (*(void (**)(char *, uint64_t))(v85 + 8))(v82, v84);
    }
    uint64_t v103 = sub_100010BCC((uint64_t *)&unk_1004852B0);
    memcpy(v82, v83, *(void *)(*(void *)(v103 - 8) + 64));
    goto LABEL_34;
  }
  if (v65)
  {
LABEL_18:
    uint64_t v76 = sub_100010BCC(&qword_100484D00);
    memcpy(v59, v60, *(void *)(*(void *)(v76 - 8) + 64));
    uint64_t v74 = v166;
    goto LABEL_62;
  }
  *(_WORD *)uint64_t v59 = *(_WORD *)v60;
  v59[1]  = v60[1];
  uint64_t v66 = *(int *)(v61 + 28);
  uint64_t v67 = (char *)v59 + v66;
  uint64_t v68 = (char *)v60 + v66;
  *uint64_t v67 = *v68;
  *(_WORD *)(v67 + 1)  = *(_WORD *)(v68 + 1);
  uint64_t v69 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  uint64_t v70 = *(int *)(v69 + 24);
  __dst  = &v67[v70];
  id v165 = (int *)v69;
  uint64_t v71 = &v68[v70];
  uint64_t v72 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v73 = *(void *)(v72 - 8);
  uint64_t v74 = v166;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v71, 1, v72))
  {
    uint64_t v75 = sub_100010BCC((uint64_t *)&unk_1004852B0);
    memcpy(__dst, v71, *(void *)(*(void *)(v75 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v73 + 32))(__dst, v71, v72);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v73 + 56))(__dst, 0, 1, v72);
  }
  *(_OWORD *)&v67[v165[7]]  = *(_OWORD *)&v68[v165[7]];
  *(_OWORD *)&v67[v165[8]]  = *(_OWORD *)&v68[v165[8]];
  *(_OWORD *)&v67[v165[9]]  = *(_OWORD *)&v68[v165[9]];
  uint64_t v89 = v165[10];
  __dsta  = &v67[v89];
  uint64_t v90 = &v68[v89];
  uint64_t v91 = type metadata accessor for UUID();
  uint64_t v92 = *(void *)(v91 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48))(v90, 1, v91))
  {
    uint64_t v93 = sub_100010BCC(&qword_1004862B0);
    memcpy(__dsta, v90, *(void *)(*(void *)(v93 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v92 + 32))(__dsta, v90, v91);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v92 + 56))(__dsta, 0, 1, v91);
  }
  *(void *)&v67[v165[11]]  = *(void *)&v68[v165[11]];
  uint64_t v94 = v165[12];
  __dstb  = &v67[v94];
  uint64_t v95 = &v68[v94];
  uint64_t v96 = type metadata accessor for NANInternetSharingStatistics.Requester();
  uint64_t v97 = *(void *)(v96 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48))(v95, 1, v96))
  {
    uint64_t v98 = sub_100010BCC((uint64_t *)&unk_100485B60);
    memcpy(__dstb, v95, *(void *)(*(void *)(v98 - 8) + 64));
  }
  else
  {
    uint64_t v99 = type metadata accessor for DispatchTimeInterval();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v99 - 8) + 32))(__dstb, v95, v99);
    __dstb[*(int *)(v96 + 20)]  = v95[*(int *)(v96 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v97 + 56))(__dstb, 0, 1, v96);
  }
  uint64_t v100 = v165[13];
  int v101 = &v67[v100];
  uint64_t v102 = &v68[v100];
  *(_OWORD *)int v101 = *(_OWORD *)v102;
  *(_OWORD *)(v101 + 9)  = *(_OWORD *)(v102 + 9);
  (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v62 + 56))(v59, 0, 1, v61);
  uint64_t v28 = v168;
LABEL_62:
  *(void *)(v74 + v28[19])  = *(void *)(v27 + v28[19]);
  swift_bridgeObjectRelease();
  uint64_t v144 = v28[20];
  uint64_t v145 = (void *)(v74 + v144);
  uint64_t v146 = (void *)(v27 + v144);
  uint64_t v147 = type metadata accessor for UUID();
  uint64_t v148 = *(void *)(v147 - 8);
  uint64_t v149 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v148 + 48);
  int v150 = v149(v145, 1, v147);
  int v151 = v149(v146, 1, v147);
  if (v150)
  {
    if (!v151)
    {
      (*(void (**)(void *, void *, uint64_t))(v148 + 32))(v145, v146, v147);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v148 + 56))(v145, 0, 1, v147);
      goto LABEL_68;
    }
    goto LABEL_67;
  }
  if (v151)
  {
    (*(void (**)(void *, uint64_t))(v148 + 8))(v145, v147);
LABEL_67:
    uint64_t v152 = sub_100010BCC(&qword_1004862B0);
    memcpy(v145, v146, *(void *)(*(void *)(v152 - 8) + 64));
    goto LABEL_68;
  }
  (*(void (**)(void *, void *, uint64_t))(v148 + 40))(v145, v146, v147);
LABEL_68:
  uint64_t v153 = v168[21];
  id v154 = (void *)(v74 + v153);
  unint64_t v155 = (void *)(v167 + v153);
  int v156 = v149((void *)(v74 + v153), 1, v147);
  int v157 = v149(v155, 1, v147);
  if (!v156)
  {
    if (!v157)
    {
      (*(void (**)(void *, void *, uint64_t))(v148 + 40))(v154, v155, v147);
      return v74;
    }
    (*(void (**)(void *, uint64_t))(v148 + 8))(v154, v147);
    goto LABEL_73;
  }
  if (v157)
  {
LABEL_73:
    uint64_t v158 = sub_100010BCC(&qword_1004862B0);
    memcpy(v154, v155, *(void *)(*(void *)(v158 - 8) + 64));
    return v74;
  }
  (*(void (**)(void *, void *, uint64_t))(v148 + 32))(v154, v155, v147);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v148 + 56))(v154, 0, 1, v147);
  return v74;
}

uint64_t sub_10029D18C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10029D1A0);
}

uint64_t sub_10029D1A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_10:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for DispatchTime();
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[6];
LABEL_9:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_10;
  }
  uint64_t v14 = sub_100010BCC(&qword_100484CF8);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[8];
    goto LABEL_9;
  }
  uint64_t v15 = sub_100010BCC(&qword_100484D00);
  if (*(_DWORD *)(*(void *)(v15 - 8) + 84) == a2)
  {
    uint64_t v8 = v15;
    uint64_t v12 = *(void *)(v15 - 8);
    uint64_t v13 = a3[18];
    goto LABEL_9;
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v17 = *(void *)(a1 + a3[19]);
    if (v17 >= 0xFFFFFFFF) {
      LODWORD(v17)  = -1;
    }
    return (v17 + 1);
  }
  else
  {
    uint64_t v18 = sub_100010BCC(&qword_1004862B0);
    uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48);
    uint64_t v20 = v18;
    uint64_t v21 = a1 + a3[20];
    return v19(v21, a2, v20);
  }
}

uint64_t sub_10029D3C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10029D3D8);
}

uint64_t sub_10029D3D8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_10:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = type metadata accessor for DispatchTime();
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a4[6];
LABEL_9:
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_10;
  }
  uint64_t v16 = sub_100010BCC(&qword_100484CF8);
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
  {
    uint64_t v10 = v16;
    uint64_t v14 = *(void *)(v16 - 8);
    uint64_t v15 = a4[8];
    goto LABEL_9;
  }
  uint64_t result = sub_100010BCC(&qword_100484D00);
  if (*(_DWORD *)(*(void *)(result - 8) + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v14 = *(void *)(result - 8);
    uint64_t v15 = a4[18];
    goto LABEL_9;
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[19])  = (a2 - 1);
  }
  else
  {
    uint64_t v18 = sub_100010BCC(&qword_1004862B0);
    uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v20 = v18;
    uint64_t v21 = a1 + a4[20];
    return v19(v21, a2, a2, v20);
  }
  return result;
}

uint64_t type metadata accessor for NANPeer(uint64_t a1)
{
  return sub_10000A7D0(a1, (uint64_t *)&unk_100484D60);
}

void sub_10029D61C()
{
  type metadata accessor for Logger();
  if (v0 <= 0x3F)
  {
    type metadata accessor for DispatchTime();
    if (v1 <= 0x3F)
    {
      sub_10029D850(319, &qword_100484D70, (void (*)(uint64_t))type metadata accessor for NANPeer.LastBeaconInformation);
      if (v2 <= 0x3F)
      {
        sub_10029D850(319, (unint64_t *)&unk_100484D78, (void (*)(uint64_t))type metadata accessor for NANAttribute.CustomDeviceInformation);
        if (v3 <= 0x3F)
        {
          sub_10029D850(319, (unint64_t *)&unk_100483170, (void (*)(uint64_t))&type metadata accessor for UUID);
          if (v4 <= 0x3F) {
            swift_initStructMetadata();
          }
        }
      }
    }
  }
}

void sub_10029D850(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t destroy for NANPeer.Availability()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NANPeer.Availability(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(void *)(a1 + 32)  = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NANPeer.Availability(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for NANPeer.Availability(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24)  = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NANPeer.Availability(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NANPeer.Availability(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40)  = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8)  = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANPeer.Availability()
{
  return &type metadata for NANPeer.Availability;
}

void *sub_10029DAE8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1  = *(_DWORD *)a2;
    *(_WORD *)(a1 + 4)  = *((_WORD *)a2 + 2);
    *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 1);
    *(void *)(a1 + 24)  = a2[3];
    uint64_t v5 = *(int *)(a3 + 32);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    uint64_t v8 = type metadata accessor for DispatchTime();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_10029DBCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 32);
  uint64_t v3 = type metadata accessor for DispatchTime();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

uint64_t sub_10029DC34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4)  = *(_WORD *)(a2 + 4);
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t sub_10029DCC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4)  = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a1 + 5)  = *(unsigned char *)(a2 + 5);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t sub_10029DD6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4)  = *(_WORD *)(a2 + 4);
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_10029DE00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4)  = *(_WORD *)(a2 + 4);
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_10029DE94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10029DEA8);
}

uint64_t sub_10029DEA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 253)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 4);
    if (v4 >= 3) {
      return v4 - 2;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for DispatchTime();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10029DF50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10029DF64);
}

uint64_t sub_10029DF64(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 253)
  {
    *(unsigned char *)(result + 4)  = a2 + 2;
  }
  else
  {
    uint64_t v7 = type metadata accessor for DispatchTime();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_10029E008()
{
  uint64_t result = type metadata accessor for DispatchTime();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_10029E0B0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *(void *)a2;
    *(void *)a1  = *(void *)a2;
    a1  = v11 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    unint64_t v8 = *(void *)(a2 + 8);
    sub_100013D44(*(void *)a2, v8);
    *(void *)a1  = v7;
    *(void *)(a1 + 8)  = v8;
    *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
    *(_WORD *)(a1 + 17)  = *(_WORD *)(a2 + 17);
    *(_WORD *)(a1 + 20)  = *(_WORD *)(a2 + 20);
    *(unsigned char *)(a1 + 22)  = *(unsigned char *)(a2 + 22);
    *(void *)(a1 + 24)  = *(void *)(a2 + 24);
    unsigned __int8 v9 = *(unsigned char *)(a2 + 50);
    int v10 = *(unsigned __int16 *)(a2 + 48);
    swift_bridgeObjectRetain();
    if (v9 == 255)
    {
      *(_OWORD *)(a1 + 32)  = *(_OWORD *)(a2 + 32);
      *(_DWORD *)(a1 + 47)  = *(_DWORD *)(a2 + 47);
    }
    else
    {
      uint64_t v12 = v10 & 0xFF00FFFF | (v9 << 16);
      uint64_t v13 = *(void *)(a2 + 32);
      unint64_t v14 = *(void *)(a2 + 40);
      sub_100214CE8(v13, v14, v12, BYTE2(v12) & 1);
      *(void *)(a1 + 32)  = v13;
      *(void *)(a1 + 40)  = v14;
      *(_WORD *)(a1 + 48)  = v12;
      *(unsigned char *)(a1 + 50)  = BYTE2(v12) & 1;
    }
    uint64_t v15 = *(unsigned __int8 *)(a2 + 56);
    if (v15 == 4)
    {
      *(_OWORD *)(a1 + 56)  = *(_OWORD *)(a2 + 56);
      *(void *)(a1 + 72)  = *(void *)(a2 + 72);
    }
    else
    {
      *(unsigned char *)(a1 + 56)  = v15;
      uint64_t v16 = *(void *)(a2 + 64);
      unint64_t v17 = *(void *)(a2 + 72);
      sub_100013D44(v16, v17);
      *(void *)(a1 + 64)  = v16;
      *(void *)(a1 + 72)  = v17;
    }
    uint64_t v18 = (long long *)(a2 + 96);
    uint64_t v19 = *(unsigned __int8 *)(a2 + 96);
    if (v19 == 5)
    {
      long long v20 = *v18;
      *(_OWORD *)(a1 + 80)  = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96)  = v20;
      *(void *)(a1 + 112)  = *(void *)(a2 + 112);
    }
    else
    {
      *(unsigned char *)(a1 + 80)  = *(unsigned char *)(a2 + 80);
      *(_WORD *)(a1 + 82)  = *(_WORD *)(a2 + 82);
      *(_DWORD *)(a1 + 84)  = *(_DWORD *)(a2 + 84);
      *(unsigned char *)(a1 + 88)  = *(unsigned char *)(a2 + 88);
      *(_WORD *)(a1 + 89)  = *(_WORD *)(a2 + 89);
      if (v19 == 4)
      {
        *(_OWORD *)(a1 + 96)  = *v18;
        *(void *)(a1 + 112)  = *(void *)(a2 + 112);
      }
      else
      {
        *(unsigned char *)(a1 + 96)  = v19;
        uint64_t v21 = *(void *)(a2 + 104);
        unint64_t v22 = *(void *)(a2 + 112);
        sub_100013D44(v21, v22);
        *(void *)(a1 + 104)  = v21;
        *(void *)(a1 + 112)  = v22;
      }
    }
    int v23 = *(unsigned __int8 *)(a2 + 144);
    if (v23 == 255)
    {
      *(_OWORD *)(a1 + 120)  = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 129)  = *(_OWORD *)(a2 + 129);
    }
    else
    {
      char v24 = v23 & 1;
      uint64_t v25 = *(void *)(a2 + 120);
      uint64_t v26 = *(void *)(a2 + 128);
      unint64_t v27 = *(void *)(a2 + 136);
      sub_10029E344(v25, v26, v27, v23 & 1);
      *(void *)(a1 + 120)  = v25;
      *(void *)(a1 + 128)  = v26;
      *(void *)(a1 + 136)  = v27;
      *(unsigned char *)(a1 + 144)  = v24;
    }
    uint64_t v28 = *(int *)(a3 + 28);
    uint64_t v29 = a1 + v28;
    uint64_t v30 = a2 + v28;
    uint64_t v31 = type metadata accessor for DispatchTime();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 16))(v29, v30, v31);
  }
  return a1;
}

uint64_t sub_10029E344(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  if (a4) {
    return sub_100013D44(a2, a3);
  }
  return result;
}

uint64_t sub_10029E358(uint64_t a1, uint64_t a2)
{
  sub_10000C970(*(void *)a1, *(void *)(a1 + 8));
  swift_bridgeObjectRelease();
  if (*(unsigned __int8 *)(a1 + 50) != 255)
  {
    uint64_t v4 = *(unsigned __int16 *)(a1 + 48) | (*(unsigned __int8 *)(a1 + 50) << 16);
    sub_1001331A0(*(void *)(a1 + 32), *(void *)(a1 + 40), v4, BYTE2(v4) & 1);
  }
  if (*(unsigned char *)(a1 + 56) != 4) {
    sub_10000C970(*(void *)(a1 + 64), *(void *)(a1 + 72));
  }
  if ((*(void *)(a1 + 96) & 0xFELL) != 4) {
    sub_10000C970(*(void *)(a1 + 104), *(void *)(a1 + 112));
  }
  int v5 = *(unsigned __int8 *)(a1 + 144);
  if (v5 != 255) {
    sub_10029E448(*(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), v5 & 1);
  }
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  uint64_t v7 = type metadata accessor for DispatchTime();
  unint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);

  return v8(v6, v7);
}

uint64_t sub_10029E448(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  if (a4) {
    return sub_10000C970(a2, a3);
  }
  return result;
}

uint64_t sub_10029E45C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  sub_100013D44(*(void *)a2, v7);
  *(void *)a1  = v6;
  *(void *)(a1 + 8)  = v7;
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  *(_WORD *)(a1 + 17)  = *(_WORD *)(a2 + 17);
  *(_WORD *)(a1 + 20)  = *(_WORD *)(a2 + 20);
  *(unsigned char *)(a1 + 22)  = *(unsigned char *)(a2 + 22);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  unsigned __int8 v8 = *(unsigned char *)(a2 + 50);
  int v9 = *(unsigned __int16 *)(a2 + 48);
  swift_bridgeObjectRetain();
  if (v8 == 255)
  {
    *(_OWORD *)(a1 + 32)  = *(_OWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 47)  = *(_DWORD *)(a2 + 47);
  }
  else
  {
    uint64_t v10 = v9 & 0xFF00FFFF | (v8 << 16);
    uint64_t v11 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40);
    sub_100214CE8(v11, v12, v10, BYTE2(v10) & 1);
    *(void *)(a1 + 32)  = v11;
    *(void *)(a1 + 40)  = v12;
    *(_WORD *)(a1 + 48)  = v10;
    *(unsigned char *)(a1 + 50)  = BYTE2(v10) & 1;
  }
  uint64_t v13 = *(unsigned __int8 *)(a2 + 56);
  if (v13 == 4)
  {
    *(_OWORD *)(a1 + 56)  = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72)  = *(void *)(a2 + 72);
  }
  else
  {
    *(unsigned char *)(a1 + 56)  = v13;
    uint64_t v14 = *(void *)(a2 + 64);
    unint64_t v15 = *(void *)(a2 + 72);
    sub_100013D44(v14, v15);
    *(void *)(a1 + 64)  = v14;
    *(void *)(a1 + 72)  = v15;
  }
  uint64_t v16 = (long long *)(a2 + 96);
  uint64_t v17 = *(unsigned __int8 *)(a2 + 96);
  if (v17 == 5)
  {
    long long v18 = *v16;
    *(_OWORD *)(a1 + 80)  = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96)  = v18;
    *(void *)(a1 + 112)  = *(void *)(a2 + 112);
  }
  else
  {
    *(unsigned char *)(a1 + 80)  = *(unsigned char *)(a2 + 80);
    *(_WORD *)(a1 + 82)  = *(_WORD *)(a2 + 82);
    *(_DWORD *)(a1 + 84)  = *(_DWORD *)(a2 + 84);
    *(unsigned char *)(a1 + 88)  = *(unsigned char *)(a2 + 88);
    *(_WORD *)(a1 + 89)  = *(_WORD *)(a2 + 89);
    if (v17 == 4)
    {
      *(_OWORD *)(a1 + 96)  = *v16;
      *(void *)(a1 + 112)  = *(void *)(a2 + 112);
    }
    else
    {
      *(unsigned char *)(a1 + 96)  = v17;
      uint64_t v19 = *(void *)(a2 + 104);
      unint64_t v20 = *(void *)(a2 + 112);
      sub_100013D44(v19, v20);
      *(void *)(a1 + 104)  = v19;
      *(void *)(a1 + 112)  = v20;
    }
  }
  int v21 = *(unsigned __int8 *)(a2 + 144);
  if (v21 == 255)
  {
    *(_OWORD *)(a1 + 120)  = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 129)  = *(_OWORD *)(a2 + 129);
  }
  else
  {
    char v22 = v21 & 1;
    uint64_t v23 = *(void *)(a2 + 120);
    uint64_t v24 = *(void *)(a2 + 128);
    unint64_t v25 = *(void *)(a2 + 136);
    sub_10029E344(v23, v24, v25, v21 & 1);
    *(void *)(a1 + 120)  = v23;
    *(void *)(a1 + 128)  = v24;
    *(void *)(a1 + 136)  = v25;
    *(unsigned char *)(a1 + 144)  = v22;
  }
  uint64_t v26 = *(int *)(a3 + 28);
  uint64_t v27 = a1 + v26;
  uint64_t v28 = a2 + v26;
  uint64_t v29 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16))(v27, v28, v29);
  return a1;
}

uint64_t sub_10029E6A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  sub_100013D44(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  unint64_t v9 = *(void *)(a1 + 8);
  *(void *)a1  = v6;
  *(void *)(a1 + 8)  = v7;
  sub_10000C970(v8, v9);
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17)  = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18)  = *(unsigned char *)(a2 + 18);
  __int16 v10 = *(_WORD *)(a2 + 20);
  *(unsigned char *)(a1 + 22)  = *(unsigned char *)(a2 + 22);
  *(_WORD *)(a1 + 20)  = v10;
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = (long long *)(a1 + 32);
  unint64_t v12 = (long long *)(a2 + 32);
  int v13 = *(unsigned __int16 *)(a2 + 48) | (*(unsigned __int8 *)(a2 + 50) << 16);
  if (*(unsigned __int8 *)(a1 + 50) == 255)
  {
    if (*(unsigned __int8 *)(a2 + 50) == 255)
    {
      long long v14 = *v12;
      *(_DWORD *)(a1 + 47)  = *(_DWORD *)(a2 + 47);
      *uint64_t v11 = v14;
    }
    else
    {
      uint64_t v16 = *(void *)(a2 + 32);
      unint64_t v17 = *(void *)(a2 + 40);
      sub_100214CE8(v16, v17, *(unsigned __int16 *)(a2 + 48) | (*(unsigned __int8 *)(a2 + 50) << 16), BYTE2(v13) & 1);
      *(void *)(a1 + 32)  = v16;
      *(void *)(a1 + 40)  = v17;
      *(_WORD *)(a1 + 48)  = v13;
      *(unsigned char *)(a1 + 50)  = BYTE2(v13) & 1;
    }
  }
  else if (*(unsigned __int8 *)(a2 + 50) == 255)
  {
    sub_1000380B4(a1 + 32, &qword_100483060);
    int v15 = *(_DWORD *)(a2 + 47);
    *uint64_t v11 = *v12;
    *(_DWORD *)(a1 + 47)  = v15;
  }
  else
  {
    uint64_t v18 = *(void *)(a2 + 32);
    unint64_t v19 = *(void *)(a2 + 40);
    sub_100214CE8(v18, v19, *(unsigned __int16 *)(a2 + 48) | (*(unsigned __int8 *)(a2 + 50) << 16), BYTE2(v13) & 1);
    uint64_t v20 = *(void *)(a1 + 32);
    unint64_t v21 = *(void *)(a1 + 40);
    char v22 = *(unsigned char *)(a1 + 50);
    *(void *)(a1 + 32)  = v18;
    *(void *)(a1 + 40)  = v19;
    uint64_t v23 = *(unsigned __int16 *)(a1 + 48);
    *(_WORD *)(a1 + 48)  = v13;
    *(unsigned char *)(a1 + 50)  = BYTE2(v13) & 1;
    sub_1001331A0(v20, v21, v23, v22);
  }
  uint64_t v24 = (long long *)(a1 + 56);
  uint64_t v26 = (long long *)(a2 + 56);
  uint64_t v25 = *(unsigned __int8 *)(a2 + 56);
  if (*(unsigned char *)(a1 + 56) == 4)
  {
    if (v25 == 4)
    {
      long long v27 = *v26;
      *(void *)(a1 + 72)  = *(void *)(a2 + 72);
      *uint64_t v24 = v27;
    }
    else
    {
      *(unsigned char *)(a1 + 56)  = v25;
      uint64_t v29 = *(void *)(a2 + 64);
      unint64_t v30 = *(void *)(a2 + 72);
      sub_100013D44(v29, v30);
      *(void *)(a1 + 64)  = v29;
      *(void *)(a1 + 72)  = v30;
    }
  }
  else if (v25 == 4)
  {
    sub_1001B9F44(a1 + 56);
    uint64_t v28 = *(void *)(a2 + 72);
    *uint64_t v24 = *v26;
    *(void *)(a1 + 72)  = v28;
  }
  else
  {
    *(unsigned char *)(a1 + 56)  = v25;
    uint64_t v31 = *(void *)(a2 + 64);
    unint64_t v32 = *(void *)(a2 + 72);
    sub_100013D44(v31, v32);
    uint64_t v33 = *(void *)(a1 + 64);
    unint64_t v34 = *(void *)(a1 + 72);
    *(void *)(a1 + 64)  = v31;
    *(void *)(a1 + 72)  = v32;
    sub_10000C970(v33, v34);
  }
  uint64_t v36 = (_OWORD *)(a1 + 96);
  uint64_t v35 = *(unsigned __int8 *)(a1 + 96);
  uint64_t v37 = (_OWORD *)(a1 + 80);
  uint64_t v39 = (_OWORD *)(a2 + 96);
  uint64_t v38 = *(unsigned __int8 *)(a2 + 96);
  uint64_t v40 = (_OWORD *)(a2 + 80);
  if (v35 != 5)
  {
    if (v38 == 5)
    {
      sub_10029EB04(a1 + 80);
      uint64_t v43 = *(void *)(a2 + 112);
      long long v44 = *(_OWORD *)(a2 + 96);
      *uint64_t v37 = *v40;
      *(_OWORD *)(a1 + 96)  = v44;
      *(void *)(a1 + 112)  = v43;
      goto LABEL_30;
    }
    *(unsigned char *)(a1 + 80)  = *(unsigned char *)(a2 + 80);
    *(_WORD *)(a1 + 82)  = *(_WORD *)(a2 + 82);
    int v47 = *(_DWORD *)(a2 + 84);
    *(unsigned char *)(a1 + 88)  = *(unsigned char *)(a2 + 88);
    *(_DWORD *)(a1 + 84)  = v47;
    *(_WORD *)(a1 + 89)  = *(_WORD *)(a2 + 89);
    uint64_t v48 = *(unsigned __int8 *)(a2 + 96);
    if (v35 != 4)
    {
      if (v48 == 4)
      {
        sub_1001B9F44(a1 + 96);
        uint64_t v50 = *(void *)(a2 + 112);
        *uint64_t v36 = *v39;
        *(void *)(a1 + 112)  = v50;
      }
      else
      {
        *(unsigned char *)(a1 + 96)  = v48;
        uint64_t v53 = *(void *)(a2 + 104);
        unint64_t v54 = *(void *)(a2 + 112);
        sub_100013D44(v53, v54);
        uint64_t v55 = *(void *)(a1 + 104);
        unint64_t v56 = *(void *)(a1 + 112);
        *(void *)(a1 + 104)  = v53;
        *(void *)(a1 + 112)  = v54;
        sub_10000C970(v55, v56);
      }
      goto LABEL_30;
    }
    if (v48 != 4)
    {
      *(unsigned char *)(a1 + 96)  = v48;
      goto LABEL_28;
    }
LABEL_24:
    long long v49 = *v39;
    *(void *)(a1 + 112)  = *(void *)(a2 + 112);
    *uint64_t v36 = v49;
    goto LABEL_30;
  }
  if (v38 == 5)
  {
    long long v41 = *v40;
    long long v42 = *(_OWORD *)(a2 + 96);
    *(void *)(a1 + 112)  = *(void *)(a2 + 112);
    *uint64_t v37 = v41;
    *(_OWORD *)(a1 + 96)  = v42;
    goto LABEL_30;
  }
  *(unsigned char *)(a1 + 80)  = *(unsigned char *)(a2 + 80);
  *(_WORD *)(a1 + 82)  = *(_WORD *)(a2 + 82);
  int v45 = *(_DWORD *)(a2 + 84);
  *(unsigned char *)(a1 + 88)  = *(unsigned char *)(a2 + 88);
  *(_DWORD *)(a1 + 84)  = v45;
  *(_WORD *)(a1 + 89)  = *(_WORD *)(a2 + 89);
  uint64_t v46 = *(unsigned __int8 *)(a2 + 96);
  if (v46 == 4) {
    goto LABEL_24;
  }
  *(unsigned char *)(a1 + 96)  = v46;
LABEL_28:
  uint64_t v51 = *(void *)(a2 + 104);
  unint64_t v52 = *(void *)(a2 + 112);
  sub_100013D44(v51, v52);
  *(void *)(a1 + 104)  = v51;
  *(void *)(a1 + 112)  = v52;
LABEL_30:
  uint64_t v57 = (long long *)(a1 + 120);
  uint64_t v58 = (long long *)(a2 + 120);
  int v59 = *(unsigned __int8 *)(a2 + 144);
  if (*(unsigned __int8 *)(a1 + 144) == 255)
  {
    if (v59 == 255)
    {
      long long v61 = *v58;
      *(_OWORD *)(a1 + 129)  = *(_OWORD *)(a2 + 129);
      *uint64_t v57 = v61;
    }
    else
    {
      char v70 = v59 & 1;
      uint64_t v71 = *(void *)(a2 + 120);
      uint64_t v72 = *(void *)(a2 + 128);
      unint64_t v73 = *(void *)(a2 + 136);
      sub_10029E344(v71, v72, v73, v59 & 1);
      *(void *)(a1 + 120)  = v71;
      *(void *)(a1 + 128)  = v72;
      *(void *)(a1 + 136)  = v73;
      *(unsigned char *)(a1 + 144)  = v70;
    }
  }
  else if (v59 == 255)
  {
    sub_1000380B4(a1 + 120, &qword_100484E88);
    long long v60 = *(_OWORD *)(a2 + 129);
    *uint64_t v57 = *v58;
    *(_OWORD *)(a1 + 129)  = v60;
  }
  else
  {
    char v62 = v59 & 1;
    uint64_t v63 = *(void *)(a2 + 120);
    uint64_t v64 = *(void *)(a2 + 128);
    unint64_t v65 = *(void *)(a2 + 136);
    sub_10029E344(v63, v64, v65, v59 & 1);
    uint64_t v66 = *(void *)(a1 + 120);
    uint64_t v67 = *(void *)(a1 + 128);
    unint64_t v68 = *(void *)(a1 + 136);
    char v69 = *(unsigned char *)(a1 + 144);
    *(void *)(a1 + 120)  = v63;
    *(void *)(a1 + 128)  = v64;
    *(void *)(a1 + 136)  = v65;
    *(unsigned char *)(a1 + 144)  = v62;
    sub_10029E448(v66, v67, v68, v69);
  }
  uint64_t v74 = *(int *)(a3 + 28);
  uint64_t v75 = a1 + v74;
  uint64_t v76 = a2 + v74;
  uint64_t v77 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 24))(v75, v76, v77);
  return a1;
}

uint64_t sub_10029EB04(uint64_t a1)
{
  return a1;
}

uint64_t sub_10029EB58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32)  = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48)  = v4;
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16)  = v5;
  long long v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64)  = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80)  = v6;
  *(_OWORD *)(a1 + 96)  = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112)  = *(void *)(a2 + 112);
  long long v7 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 129)  = *(_OWORD *)(a2 + 129);
  uint64_t v8 = *(int *)(a3 + 28);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(_OWORD *)(a1 + 120)  = v7;
  uint64_t v11 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  return a1;
}

uint64_t sub_10029EC04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  sub_10000C970(v6, v7);
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  *(_WORD *)(a1 + 17)  = *(_WORD *)(a2 + 17);
  *(_WORD *)(a1 + 20)  = *(_WORD *)(a2 + 20);
  *(unsigned char *)(a1 + 22)  = *(unsigned char *)(a2 + 22);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v8 = (_OWORD *)(a2 + 32);
  if (*(unsigned __int8 *)(a1 + 50) == 255) {
    goto LABEL_4;
  }
  unsigned int v9 = *(unsigned __int16 *)(a2 + 48) | (*(unsigned __int8 *)(a2 + 50) << 16);
  if (HIWORD(v9) > 0xFEu)
  {
    sub_1000380B4(a1 + 32, &qword_100483060);
LABEL_4:
    *(_OWORD *)(a1 + 32)  = *v8;
    *(_DWORD *)(a1 + 47)  = *(_DWORD *)(a2 + 47);
    goto LABEL_6;
  }
  uint64_t v10 = *(unsigned __int16 *)(a1 + 48) | (*(unsigned __int8 *)(a1 + 50) << 16);
  uint64_t v11 = *(void *)(a1 + 32);
  unint64_t v12 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32)  = *v8;
  *(_WORD *)(a1 + 48)  = v9;
  *(unsigned char *)(a1 + 50)  = BYTE2(v9) & 1;
  sub_1001331A0(v11, v12, v10, BYTE2(v10) & 1);
LABEL_6:
  uint64_t v13 = *(unsigned __int8 *)(a2 + 56);
  if (*(unsigned char *)(a1 + 56) == 4)
  {
LABEL_9:
    *(_OWORD *)(a1 + 56)  = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72)  = *(void *)(a2 + 72);
    goto LABEL_11;
  }
  if (v13 == 4)
  {
    sub_1001B9F44(a1 + 56);
    goto LABEL_9;
  }
  *(unsigned char *)(a1 + 56)  = v13;
  uint64_t v14 = *(void *)(a1 + 64);
  unint64_t v15 = *(void *)(a1 + 72);
  *(_OWORD *)(a1 + 64)  = *(_OWORD *)(a2 + 64);
  sub_10000C970(v14, v15);
LABEL_11:
  uint64_t v16 = *(unsigned __int8 *)(a1 + 96);
  uint64_t v17 = *(unsigned __int8 *)(a2 + 96);
  if (v16 == 5)
  {
LABEL_14:
    long long v18 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80)  = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96)  = v18;
    *(void *)(a1 + 112)  = *(void *)(a2 + 112);
    goto LABEL_20;
  }
  if (v17 == 5)
  {
    sub_10029EB04(a1 + 80);
    goto LABEL_14;
  }
  *(unsigned char *)(a1 + 80)  = *(unsigned char *)(a2 + 80);
  *(_WORD *)(a1 + 82)  = *(_WORD *)(a2 + 82);
  *(_DWORD *)(a1 + 84)  = *(_DWORD *)(a2 + 84);
  *(unsigned char *)(a1 + 88)  = *(unsigned char *)(a2 + 88);
  *(_WORD *)(a1 + 89)  = *(_WORD *)(a2 + 89);
  if (v16 == 4) {
    goto LABEL_18;
  }
  if (v17 == 4)
  {
    sub_1001B9F44(a1 + 96);
LABEL_18:
    *(_OWORD *)(a1 + 96)  = *(_OWORD *)(a2 + 96);
    *(void *)(a1 + 112)  = *(void *)(a2 + 112);
    goto LABEL_20;
  }
  *(unsigned char *)(a1 + 96)  = v17;
  uint64_t v19 = *(void *)(a1 + 104);
  unint64_t v20 = *(void *)(a1 + 112);
  *(_OWORD *)(a1 + 104)  = *(_OWORD *)(a2 + 104);
  sub_10000C970(v19, v20);
LABEL_20:
  int v21 = *(unsigned __int8 *)(a1 + 144);
  if (v21 != 255)
  {
    int v22 = *(unsigned __int8 *)(a2 + 144);
    if (v22 != 255)
    {
      char v23 = v21 & 1;
      uint64_t v24 = *(void *)(a2 + 136);
      uint64_t v25 = *(void *)(a1 + 120);
      uint64_t v26 = *(void *)(a1 + 128);
      unint64_t v27 = *(void *)(a1 + 136);
      *(_OWORD *)(a1 + 120)  = *(_OWORD *)(a2 + 120);
      *(void *)(a1 + 136)  = v24;
      *(unsigned char *)(a1 + 144)  = v22 & 1;
      sub_10029E448(v25, v26, v27, v23);
      goto LABEL_25;
    }
    sub_1000380B4(a1 + 120, &qword_100484E88);
  }
  *(_OWORD *)(a1 + 120)  = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 129)  = *(_OWORD *)(a2 + 129);
LABEL_25:
  uint64_t v28 = *(int *)(a3 + 28);
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  uint64_t v31 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 40))(v29, v30, v31);
  return a1;
}

uint64_t sub_10029EEB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10029EECC);
}

uint64_t sub_10029EECC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4)  = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = type metadata accessor for DispatchTime();
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 28);
    return v10(v12, a2, v11);
  }
}

uint64_t sub_10029EF88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10029EF9C);
}

uint64_t sub_10029EF9C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 24)  = a2;
  }
  else
  {
    uint64_t v7 = type metadata accessor for DispatchTime();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for NANPeer.Service(uint64_t a1)
{
  return sub_10000A7D0(a1, qword_100484EE8);
}

uint64_t sub_10029F064()
{
  uint64_t result = type metadata accessor for DispatchTime();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_10029F110(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    uint64_t v7 = type metadata accessor for NANPeer.Service.AuthenticationStatus.State(0);
    EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v19 = *a2;
      unint64_t v20 = a2[1];
      sub_100013D44(*a2, v20);
      *a1  = v19;
      a1[1]  = v20;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *a1  = *a2;
      swift_bridgeObjectRetain();
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
LABEL_13:
        uint64_t v21 = *(int *)(a3 + 20);
        int v22 = (char *)a1 + v21;
        char v23 = (char *)a2 + v21;
        uint64_t v24 = type metadata accessor for DispatchTime();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16))(v22, v23, v24);
        return a1;
      }
      uint64_t v9 = type metadata accessor for SymmetricKey();
      uint64_t v10 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16);
      v10(a1, a2, v9);
      uint64_t v11 = (int *)type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0);
      v10((uint64_t *)((char *)a1 + v11[5]), (uint64_t *)((char *)a2 + v11[5]), v9);
      v10((uint64_t *)((char *)a1 + v11[6]), (uint64_t *)((char *)a2 + v11[6]), v9);
      uint64_t v12 = v11[7];
      uint64_t v13 = (char *)a1 + v12;
      uint64_t v14 = (char *)a2 + v12;
      uint64_t v15 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
      uint64_t v16 = *(void *)(v15 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
      {
        uint64_t v17 = sub_100010BCC(&qword_1004808F8);
        memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      }
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_13;
  }
  uint64_t v18 = *a2;
  *a1  = *a2;
  a1  = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return a1;
}

uint64_t type metadata accessor for NANPeer.Service.AuthenticationStatus.State(uint64_t a1)
{
  return sub_10000A7D0(a1, qword_100485028);
}

uint64_t sub_10029F408(uint64_t a1, uint64_t a2)
{
  type metadata accessor for NANPeer.Service.AuthenticationStatus.State(0);
  EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      sub_10000C970(*(void *)a1, *(void *)(a1 + 8));
      break;
    case 1:
      swift_bridgeObjectRelease();
      break;
    case 0:
      uint64_t v5 = type metadata accessor for SymmetricKey();
      uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
      v6(a1, v5);
      uint64_t v7 = (int *)type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0);
      v6(a1 + v7[5], v5);
      v6(a1 + v7[6], v5);
      uint64_t v8 = a1 + v7[7];
      uint64_t v9 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
      uint64_t v10 = *(void *)(v9 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
        (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
      }
      break;
  }
  uint64_t v11 = a1 + *(int *)(a2 + 20);
  uint64_t v12 = type metadata accessor for DispatchTime();
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8);

  return v13(v11, v12);
}

uint64_t *sub_10029F5BC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for NANPeer.Service.AuthenticationStatus.State(0);
  EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      uint64_t v17 = *a2;
      unint64_t v18 = a2[1];
      sub_100013D44(*a2, v18);
      *a1  = v17;
      a1[1]  = v18;
LABEL_10:
      swift_storeEnumTagMultiPayload();
      goto LABEL_11;
    case 1:
      *a1  = *a2;
      swift_bridgeObjectRetain();
      goto LABEL_10;
    case 0:
      uint64_t v8 = type metadata accessor for SymmetricKey();
      uint64_t v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16);
      v9(a1, a2, v8);
      uint64_t v10 = (int *)type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0);
      v9((uint64_t *)((char *)a1 + v10[5]), (uint64_t *)((char *)a2 + v10[5]), v8);
      v9((uint64_t *)((char *)a1 + v10[6]), (uint64_t *)((char *)a2 + v10[6]), v8);
      uint64_t v11 = v10[7];
      uint64_t v12 = (char *)a1 + v11;
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        uint64_t v16 = sub_100010BCC(&qword_1004808F8);
        memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
      goto LABEL_10;
  }
  memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
LABEL_11:
  uint64_t v19 = *(int *)(a3 + 20);
  unint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  uint64_t v22 = type metadata accessor for DispatchTime();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
  return a1;
}

uint64_t *sub_10029F844(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 == a2) {
    goto LABEL_12;
  }
  sub_10029B8A8((uint64_t)a1, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
  uint64_t v6 = type metadata accessor for NANPeer.Service.AuthenticationStatus.State(0);
  EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      uint64_t v17 = *a2;
      unint64_t v18 = a2[1];
      sub_100013D44(*a2, v18);
      *a1  = v17;
      a1[1]  = v18;
LABEL_11:
      swift_storeEnumTagMultiPayload();
      goto LABEL_12;
    case 1:
      *a1  = *a2;
      swift_bridgeObjectRetain();
      goto LABEL_11;
    case 0:
      uint64_t v8 = type metadata accessor for SymmetricKey();
      uint64_t v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16);
      v9(a1, a2, v8);
      uint64_t v10 = (int *)type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0);
      v9((uint64_t *)((char *)a1 + v10[5]), (uint64_t *)((char *)a2 + v10[5]), v8);
      v9((uint64_t *)((char *)a1 + v10[6]), (uint64_t *)((char *)a2 + v10[6]), v8);
      uint64_t v11 = v10[7];
      uint64_t v12 = (char *)a1 + v11;
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        uint64_t v16 = sub_100010BCC(&qword_1004808F8);
        memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
      goto LABEL_11;
  }
  memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
LABEL_12:
  uint64_t v19 = *(int *)(a3 + 20);
  unint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  uint64_t v22 = type metadata accessor for DispatchTime();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 24))(v20, v21, v22);
  return a1;
}

char *sub_10029FAF0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for NANPeer.Service.AuthenticationStatus.State(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    uint64_t v7 = type metadata accessor for SymmetricKey();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32);
    v8(a1, a2, v7);
    uint64_t v9 = (int *)type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0);
    v8(&a1[v9[5]], &a2[v9[5]], v7);
    v8(&a1[v9[6]], &a2[v9[6]], v7);
    uint64_t v10 = v9[7];
    uint64_t v11 = &a1[v10];
    uint64_t v12 = &a2[v10];
    uint64_t v13 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
    uint64_t v14 = *(void *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      uint64_t v15 = sub_100010BCC(&qword_1004808F8);
      memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v16 = *(int *)(a3 + 20);
  uint64_t v17 = &a1[v16];
  unint64_t v18 = &a2[v16];
  uint64_t v19 = type metadata accessor for DispatchTime();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
  return a1;
}

char *sub_10029FD28(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10029B8A8((uint64_t)a1, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
    uint64_t v6 = type metadata accessor for NANPeer.Service.AuthenticationStatus.State(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    else
    {
      uint64_t v7 = type metadata accessor for SymmetricKey();
      uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32);
      v8(a1, a2, v7);
      uint64_t v9 = (int *)type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0);
      v8(&a1[v9[5]], &a2[v9[5]], v7);
      v8(&a1[v9[6]], &a2[v9[6]], v7);
      uint64_t v10 = v9[7];
      uint64_t v11 = &a1[v10];
      uint64_t v12 = &a2[v10];
      uint64_t v13 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
      uint64_t v14 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      {
        uint64_t v15 = sub_100010BCC(&qword_1004808F8);
        memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  uint64_t v16 = *(int *)(a3 + 20);
  uint64_t v17 = &a1[v16];
  unint64_t v18 = &a2[v16];
  uint64_t v19 = type metadata accessor for DispatchTime();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 40))(v17, v18, v19);
  return a1;
}

uint64_t sub_10029FF84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10029FF98);
}

uint64_t sub_10029FF98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for NANPeer.Service.AuthenticationStatus.State(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = type metadata accessor for DispatchTime();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_1002A0090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002A00A4);
}

uint64_t sub_1002A00A4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for NANPeer.Service.AuthenticationStatus.State(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = type metadata accessor for DispatchTime();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t type metadata accessor for NANPeer.Service.AuthenticationStatus(uint64_t a1)
{
  return sub_10000A7D0(a1, qword_100484F80);
}

uint64_t sub_1002A01C8()
{
  uint64_t result = type metadata accessor for NANPeer.Service.AuthenticationStatus.State(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for DispatchTime();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1002A0290(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1  = *a2;
    a1  = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v20 = *a2;
      unint64_t v19 = a2[1];
      sub_100013D44(v20, v19);
      *a1  = v20;
      a1[1]  = v19;
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *a1  = *a2;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v8 = type metadata accessor for SymmetricKey();
      uint64_t v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16);
      v9(a1, a2, v8);
      uint64_t v10 = (int *)type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0);
      v9((uint64_t *)((char *)a1 + v10[5]), (uint64_t *)((char *)a2 + v10[5]), v8);
      v9((uint64_t *)((char *)a1 + v10[6]), (uint64_t *)((char *)a2 + v10[6]), v8);
      uint64_t v11 = v10[7];
      uint64_t v12 = (char *)a1 + v11;
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        uint64_t v16 = sub_100010BCC(&qword_1004808F8);
        memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_1002A0510(uint64_t *a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch(result)
  {
    case 2:
      uint64_t v8 = *a1;
      unint64_t v9 = a1[1];
      return sub_10000C970(v8, v9);
    case 1:
      return swift_bridgeObjectRelease();
    case 0:
      uint64_t v3 = type metadata accessor for SymmetricKey();
      unint64_t v4 = *(void (**)(uint64_t *, uint64_t))(*(void *)(v3 - 8) + 8);
      v4(a1, v3);
      int v5 = (int *)type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0);
      v4((uint64_t *)((char *)a1 + v5[5]), v3);
      v4((uint64_t *)((char *)a1 + v5[6]), v3);
      uint64_t v6 = (char *)a1 + v5[7];
      uint64_t v7 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
      uint64_t v11 = *(void *)(v7 - 8);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v7);
      if (!result)
      {
        uint64_t v10 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
        return v10(v6, v7);
      }
      break;
  }
  return result;
}

uint64_t *sub_1002A06D4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      uint64_t v17 = *a2;
      unint64_t v16 = a2[1];
      sub_100013D44(v17, v16);
      *a1  = v17;
      a1[1]  = v16;
LABEL_10:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 1:
      *a1  = *a2;
      swift_bridgeObjectRetain();
      goto LABEL_10;
    case 0:
      uint64_t v7 = type metadata accessor for SymmetricKey();
      uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
      v8(a1, a2, v7);
      unint64_t v9 = (int *)type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0);
      v8((uint64_t *)((char *)a1 + v9[5]), (uint64_t *)((char *)a2 + v9[5]), v7);
      v8((uint64_t *)((char *)a1 + v9[6]), (uint64_t *)((char *)a2 + v9[6]), v7);
      uint64_t v10 = v9[7];
      uint64_t v11 = (char *)a1 + v10;
      uint64_t v12 = (char *)a2 + v10;
      uint64_t v13 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
      uint64_t v14 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      {
        uint64_t v15 = sub_100010BCC(&qword_1004808F8);
        memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      }
      goto LABEL_10;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

uint64_t *sub_1002A0908(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 == a2) {
    return a1;
  }
  sub_10029B8A8((uint64_t)a1, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
  EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      uint64_t v17 = *a2;
      unint64_t v16 = a2[1];
      sub_100013D44(v17, v16);
      *a1  = v17;
      a1[1]  = v16;
LABEL_11:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 1:
      *a1  = *a2;
      swift_bridgeObjectRetain();
      goto LABEL_11;
    case 0:
      uint64_t v7 = type metadata accessor for SymmetricKey();
      uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
      v8(a1, a2, v7);
      unint64_t v9 = (int *)type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0);
      v8((uint64_t *)((char *)a1 + v9[5]), (uint64_t *)((char *)a2 + v9[5]), v7);
      v8((uint64_t *)((char *)a1 + v9[6]), (uint64_t *)((char *)a2 + v9[6]), v7);
      uint64_t v10 = v9[7];
      uint64_t v11 = (char *)a1 + v10;
      uint64_t v12 = (char *)a2 + v10;
      uint64_t v13 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
      uint64_t v14 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      {
        uint64_t v15 = sub_100010BCC(&qword_1004808F8);
        memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      }
      goto LABEL_11;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

char *sub_1002A0B60(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for SymmetricKey();
    uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32);
    v7(a1, a2, v6);
    uint64_t v8 = (int *)type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0);
    v7(&a1[v8[5]], &a2[v8[5]], v6);
    v7(&a1[v8[6]], &a2[v8[6]], v6);
    uint64_t v9 = v8[7];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = sub_100010BCC(&qword_1004808F8);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *sub_1002A0D44(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10029B8A8((uint64_t)a1, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for SymmetricKey();
      uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32);
      v7(a1, a2, v6);
      uint64_t v8 = (int *)type metadata accessor for LongTermPairingKeys.AuthenticationKeys(0);
      v7(&a1[v8[5]], &a2[v8[5]], v6);
      v7(&a1[v8[6]], &a2[v8[6]], v6);
      uint64_t v9 = v8[7];
      uint64_t v10 = &a1[v9];
      uint64_t v11 = &a2[v9];
      uint64_t v12 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
      uint64_t v13 = *(void *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
        uint64_t v14 = sub_100010BCC(&qword_1004808F8);
        memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_1002A0F4C()
{
  uint64_t result = type metadata accessor for LongTermPairingKeys.AuthenticationKeys(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

Swift::Int sub_1002A0FEC()
{
  Hasher.init(_seed:)();
  Channel.hash(into:)((int)&v3, *v0 | ((unint64_t)*((unsigned __int8 *)v0 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v0 + 5) << 40));
  Hasher._combine(_:)(*((void *)v0 + 1));
  Hasher._combine(_:)(*((void *)v0 + 2));
  Hasher._combine(_:)(*((void *)v0 + 3));
  Swift::UInt64 v1 = DispatchTime.rawValue.getter();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1002A1088(int a1)
{
  Channel.hash(into:)(a1, *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v1 + 5) << 40));
  Hasher._combine(_:)(*((void *)v1 + 1));
  Hasher._combine(_:)(*((void *)v1 + 2));
  Hasher._combine(_:)(*((void *)v1 + 3));
  Swift::UInt64 v2 = DispatchTime.rawValue.getter();
  Hasher._combine(_:)(v2);
}

Swift::Int sub_1002A1100()
{
  Hasher.init(_seed:)();
  Channel.hash(into:)((int)&v3, *v0 | ((unint64_t)*((unsigned __int8 *)v0 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v0 + 5) << 40));
  Hasher._combine(_:)(*((void *)v0 + 1));
  Hasher._combine(_:)(*((void *)v0 + 2));
  Hasher._combine(_:)(*((void *)v0 + 3));
  Swift::UInt64 v1 = DispatchTime.rawValue.getter();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_1002A119C()
{
  return sub_1002A82B0(&qword_100485060, (void (*)(uint64_t))type metadata accessor for NANPeer.LastBeaconInformation);
}

BOOL sub_1002A11E4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchTime();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  int v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchTimeInterval();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v18 - v10;
  type metadata accessor for NANPeer.Service.AuthenticationStatus.State(0);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002A90E4(v1, (uint64_t)v13, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
  BOOL v14 = 0;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 2u:
      sub_10000C970(*(void *)v13, *((void *)v13 + 1));
      return 0;
    case 3u:
      return v14;
    case 4u:
      goto LABEL_5;
    default:
      sub_10029B8A8((uint64_t)v13, type metadata accessor for LongTermPairingKeys.AuthenticationKeys);
LABEL_5:
      type metadata accessor for P2PTimer();
      variable initialization expression of AWDLPeer.lastUpdated();
      type metadata accessor for NANPeer.Service.AuthenticationStatus(0);
      DispatchTime.distance(to:)();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      uint64_t v15 = NANConstants.authenticationRequestTimeout.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v15, v6);
      BOOL v14 = static DispatchTimeInterval.< infix(_:_:)();
      unint64_t v16 = *(void (**)(char *, uint64_t))(v7 + 8);
      v16(v9, v6);
      v16(v11, v6);
      return v14;
  }
}

uint64_t sub_1002A14D0()
{
  int v1 = *(unsigned __int8 *)(v0 + 144);
  if (v1 != 255)
  {
    uint64_t v2 = *(void *)(v0 + 120);
    uint64_t v3 = *(void *)(v0 + 128);
    unint64_t v4 = *(void *)(v0 + 136);
    int v5 = v1 & 1;
    uint64_t v6 = *(void *)(v0 + 96);
    if (v6 == 5)
    {
      uint64_t v7 = *(void *)(v0 + 56);
      if (v7 != 4)
      {
        BOOL v8 = v5 != 0;
        uint64_t v11 = v0 + 64;
        uint64_t v9 = *(void *)(v0 + 64);
        unint64_t v10 = *(void *)(v11 + 8);
        uint64_t v25 = v7;
        uint64_t v26 = v9;
        unint64_t v27 = v10;
        char v28 = 1;
        uint64_t v21 = v2;
        uint64_t v22 = v3;
        unint64_t v23 = v4;
        BOOL v24 = v8;
        sub_10013316C(v7, v9, v10);
        sub_100013D44(v9, v10);
        unint64_t v12 = sub_1001B2DDC();
        char v13 = static Either<>.== infix(_:_:)((uint64_t)&v25, (uint64_t)&v21, (uint64_t)&type metadata for UInt8, (uint64_t)&type metadata for NANServiceInfo, (uint64_t)&protocol witness table for UInt8, v12);
        sub_10029E448(v25, v26, v27, v28);
        sub_1001331AC(v7, v9, v10);
LABEL_12:
        char v14 = v13 ^ 1;
        return v14 & 1;
      }
      goto LABEL_8;
    }
    uint64_t v15 = *(void *)(v0 + 88);
    if ((v15 & 0x10000) != 0)
    {
      if (v6 == 4)
      {
LABEL_8:
        sub_10029E344(*(void *)(v0 + 120), *(void *)(v0 + 128), *(void *)(v0 + 136), v5);
        sub_1002A914C(0, 0, 0, 0xFFu);
        sub_1002A914C(v2, v3, v4, v5);
        char v14 = 1;
        return v14 & 1;
      }
      uint64_t v16 = *(void *)(v0 + 104);
      unint64_t v17 = *(void *)(v0 + 112);
      sub_10013316C(*(void *)(v0 + 96), v16, v17);
      unsigned __int8 v18 = 1;
    }
    else
    {
      uint64_t v16 = 0;
      unint64_t v17 = 0;
      unsigned __int8 v18 = 0;
      uint64_t v6 = BYTE1(v15);
    }
    uint64_t v25 = v6;
    uint64_t v26 = v16;
    unint64_t v27 = v17;
    char v28 = v18;
    uint64_t v21 = v2;
    uint64_t v22 = v3;
    unint64_t v23 = v4;
    BOOL v24 = v5 != 0;
    sub_10029E344(v6, v16, v17, BYTE2(v15) & 1);
    unint64_t v19 = sub_1001B2DDC();
    char v13 = static Either<>.== infix(_:_:)((uint64_t)&v25, (uint64_t)&v21, (uint64_t)&type metadata for UInt8, (uint64_t)&type metadata for NANServiceInfo, (uint64_t)&protocol witness table for UInt8, v19);
    sub_10029E448(v25, v26, v27, v28);
    sub_1002A914C(v6, v16, v17, v18);
    goto LABEL_12;
  }
  char v14 = 0;
  return v14 & 1;
}

BOOL sub_1002A16F8()
{
  uint64_t v1 = type metadata accessor for NANAttribute.CustomDeviceInformation(0);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  unint64_t v4 = (unsigned __int8 *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_100484D00);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for NANPeer(0);
  sub_1002A82F8(v0 + *(int *)(v7 + 72), (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v6, 1, v1) == 1) {
    return 0;
  }
  sub_1002A86AC((uint64_t)v6, (uint64_t)v4, type metadata accessor for NANAttribute.CustomDeviceInformation);
  unsigned int v9 = *v4;
  BOOL v10 = (v9 & 0xFC) != 4 || (v9 & 3) != 0;
  BOOL v8 = v9 >= 4 && v10;
  sub_10029B8A8((uint64_t)v4, type metadata accessor for NANAttribute.CustomDeviceInformation);
  return v8;
}

uint64_t sub_1002A1890@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2 = a1;
  unint64_t v4 = a1 >> 8;
  unint64_t v5 = a1 >> 16;
  unint64_t v6 = a1 >> 24;
  unint64_t v29 = HIDWORD(a1);
  unint64_t v30 = a1 >> 40;
  Logger.init(subsystem:category:)();
  uint64_t v7 = (int *)type metadata accessor for NANPeer(0);
  uint64_t v8 = a2 + v7[7];
  unsigned int v9 = WiFiAddress.defaultClusterID.unsafeMutableAddressor();
  __int16 v10 = v9[2];
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(_WORD *)(v8 + 4)  = v10;
  uint64_t v11 = a2 + v7[8];
  BeaconInformation  = type metadata accessor for NANPeer.LastBeaconInformation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(BeaconInformation - 8) + 56))(v11, 1, 1, BeaconInformation);
  uint64_t v13 = a2 + v7[9];
  *(_WORD *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 2)  = 1;
  uint64_t v14 = a2 + v7[10];
  *(void *)uint64_t v14 = 0;
  *(void *)(v14 + 8)  = 0;
  *(unsigned char *)(v14 + 16)  = 1;
  uint64_t v15 = a2 + v7[11];
  *(_WORD *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 2)  = 1;
  uint64_t v16 = a2 + v7[12];
  *(_WORD *)uint64_t v16 = 0;
  *(unsigned char *)(v16 + 2)  = 1;
  uint64_t v17 = a2 + v7[13];
  *(void *)uint64_t v17 = 0;
  *(_DWORD *)(v17 + 8)  = 0x1000000;
  uint64_t v18 = a2 + v7[14];
  *(_DWORD *)uint64_t v18 = 0;
  *(unsigned char *)(v18 + 4)  = 1;
  unint64_t v19 = (void *)(a2 + v7[15]);
  *unint64_t v19 = 0;
  v19[1]  = 0;
  uint64_t v20 = a2 + v7[16];
  *(void *)(v20 + 32)  = 0;
  *(_OWORD *)uint64_t v20 = 0u;
  *(_OWORD *)(v20 + 16)  = 0u;
  uint64_t v21 = a2 + v7[17];
  *(_OWORD *)uint64_t v21 = xmmword_1003D5290;
  *(_DWORD *)(v21 + 16)  = 0;
  uint64_t v22 = a2 + v7[18];
  uint64_t v23 = type metadata accessor for NANAttribute.CustomDeviceInformation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 1, 1, v23);
  *(void *)(a2 + v7[19])  = &_swiftEmptyDictionarySingleton;
  uint64_t v24 = a2 + v7[20];
  uint64_t v25 = type metadata accessor for UUID();
  uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56);
  v26(v24, 1, 1, v25);
  v26(a2 + v7[21], 1, 1, v25);
  unint64_t v27 = (unsigned char *)(a2 + v7[5]);
  *unint64_t v27 = v2;
  v27[1]  = v4;
  v27[2]  = v5;
  v27[3]  = v6;
  v27[4]  = v29;
  v27[5]  = v30;
  type metadata accessor for P2PTimer();
  return variable initialization expression of AWDLPeer.lastUpdated();
}

Swift::Int sub_1002A1B3C(uint64_t a1)
{
  Hasher.init(_seed:)();
  NANClusterChangeEvent.hash(into:)((int)&v4, *(unsigned __int16 *)(v1 + *(int *)(a1 + 20)) | ((unint64_t)*(unsigned int *)(v1 + *(int *)(a1 + 20) + 2) << 16));
  return Hasher._finalize()();
}

void sub_1002A1B94(int a1, uint64_t a2)
{
  NANClusterChangeEvent.hash(into:)(a1, *(unsigned __int16 *)(v2 + *(int *)(a2 + 20)) | ((unint64_t)*(unsigned int *)(v2 + *(int *)(a2 + 20) + 2) << 16));
}

Swift::Int sub_1002A1BAC(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  NANClusterChangeEvent.hash(into:)((int)&v5, *(unsigned __int16 *)(v2 + *(int *)(a2 + 20)) | ((unint64_t)*(unsigned int *)(v2 + *(int *)(a2 + 20) + 2) << 16));
  return Hasher._finalize()();
}

BOOL sub_1002A1C00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static NANClusterChangeEvent.__derived_struct_equals(_:_:)(*(unsigned __int16 *)(a1 + *(int *)(a3 + 20)) | ((unint64_t)*(unsigned int *)(a1+ *(int *)(a3 + 20)+ 2) << 16), *(unsigned __int16 *)(a2 + *(int *)(a3 + 20)) | ((unint64_t)*(unsigned int *)(a2+ *(int *)(a3 + 20)+ 2) << 16));
}

uint64_t sub_1002A1C28(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v12 = a8;
  char v13 = a6;
  unint64_t v16 = a6 >> 8;
  unint64_t v17 = a6 >> 16;
  unint64_t v18 = a6 >> 24;
  unint64_t v47 = HIDWORD(a6);
  uint64_t v48 = (char *)a7;
  unint64_t v51 = a6 >> 40;
  unint64_t v44 = HIDWORD(a8);
  unint64_t v45 = a8 >> 40;
  uint64_t v46 = a10;
  uint64_t v19 = type metadata accessor for DispatchTime();
  uint64_t v53 = *(void *)(v19 - 8);
  uint64_t v54 = v19;
  __chkstk_darwin();
  unint64_t v52 = (char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  BeaconInformation  = type metadata accessor for NANPeer.LastBeaconInformation(0);
  uint64_t v50 = *(void *)(BeaconInformation - 8);
  __chkstk_darwin();
  uint64_t v23 = (char *)&v44 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for NANPeer(0);
  uint64_t v24 = *(int *)(v49 + 28);
  uint64_t v55 = v11;
  uint64_t v25 = (unsigned char *)(v11 + v24);
  *uint64_t v25 = v13;
  v25[1]  = v16;
  _DWORD v25[2] = v17;
  v25[3]  = v18;
  v25[4]  = v47;
  v25[5]  = v51;
  uint64_t v26 = type metadata accessor for P2PTimer();
  unint64_t v51 = BeaconInformation;
  unint64_t v47 = v26;
  variable initialization expression of AWDLPeer.lastUpdated();
  *(_DWORD *)uint64_t v23 = v12;
  v23[4]  = v44;
  v23[5]  = v45;
  *((void *)v23 + 1)  = v48;
  *((void *)v23 + 2)  = a1;
  unint64_t v45 = a1;
  uint64_t v48 = v23;
  *((void *)v23 + 3)  = v46;
  uint64_t v27 = *(void *)(a3 + 16);
  if (v27)
  {
    swift_bridgeObjectRetain();
    uint64_t v46 = a3;
    char v28 = (unsigned __int8 *)(a3 + 80);
    unint64_t v29 = (unsigned __int8 *)(a3 + 80);
    do
    {
      int v30 = *v29;
      v29 += 56;
      if (v30 == 7)
      {
        uint64_t v31 = *((void *)v28 - 2);
        unint64_t v32 = *((void *)v28 - 1);
        unint64_t v33 = *((void *)v28 - 4);
        uint64_t v34 = *((void *)v28 - 3);
        uint64_t v35 = *((void *)v28 - 6);
        unint64_t v36 = *((void *)v28 - 5);
        uint64_t v37 = swift_bridgeObjectRetain();
        sub_1002A1F5C(v37, a11);
        sub_10006E108(v35, v36, v33, v34, v31, v32, 7);
      }
      char v28 = v29;
      --v27;
    }
    while (v27);
    swift_bridgeObjectRelease();
  }
  uint64_t v38 = v49;
  uint64_t v39 = v55 + *(int *)(v49 + 40);
  if ((*(unsigned char *)(v39 + 16) & 1) == 0 && !*(unsigned char *)(v39 + 8)) {
    *(_DWORD *)(v39 + 12)  = v45;
  }
  uint64_t v40 = v55;
  uint64_t v41 = v55 + *(int *)(v38 + 32);
  sub_1000380B4(v41, &qword_100484CF8);
  sub_1002A86AC((uint64_t)v48, v41, type metadata accessor for NANPeer.LastBeaconInformation);
  (*(void (**)(uint64_t, void, uint64_t, unint64_t))(v50 + 56))(v41, 0, 1, v51);
  long long v42 = v52;
  variable initialization expression of AWDLPeer.lastUpdated();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v53 + 40))(v40 + *(int *)(v38 + 24), v42, v54);
}

uint64_t sub_1002A1F5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  v331  = a2;
  sub_100010BCC(&qword_100484D00);
  __chkstk_darwin();
  v330  = (char *)&v322 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v344  = type metadata accessor for DispatchTime();
  uint64_t v6 = *(void *)(v344 - 8);
  __chkstk_darwin();
  v343  = (char *)&v322 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v345  = type metadata accessor for NANPeer.Service(0);
  uint64_t v8 = *(void *)(v345 - 8);
  __chkstk_darwin();
  v361  = (uint64_t *)((char *)&v322 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  uint64_t v11 = (char *)&v322 - v10;
  v346  = type metadata accessor for NANAttribute(0);
  v340  = *(void *)(v346 - 8);
  __chkstk_darwin();
  v357  = (unsigned __int8 *)&v322 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100010BCC(&qword_100485078);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin();
  v339  = (char *)&v322 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_100485080);
  __chkstk_darwin();
  v347  = (unint64_t *)((char *)&v322 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  v350  = (uint64_t *)((char *)&v322 - v17);
  v349  = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  v348  = (unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v14 + 48);
  v363  = v8;
  unint64_t v18 = *(void *)(a1 + 16);
  v328  = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  v342  = (void (**)(unint64_t, char *, uint64_t))(v6 + 40);
  v326  = v11 + 80;
  v325  = v11 + 120;
  v327  = v11;
  v324  = v11 + 104;
  unint64_t v19 = v18;
  v341  = a1;
  swift_bridgeObjectRetain();
  v335  = 0;
  v334  = 0;
  v333  = 0;
  v332  = 0;
  unint64_t v20 = 0;
  v329  = 0;
  v337  = _swiftEmptyArrayStorage;
  v336  = &_swiftEmptyDictionarySingleton;
  v360  = v3;
  v355  = v13;
  v338  = v19;
  BOOL v21 = v19 == 0;
  if (!v19) {
    goto LABEL_7;
  }
LABEL_2:
  if (v21) {
    goto LABEL_311;
  }
  unint64_t v22 = v20 + 1;
  unint64_t v23 = v20;
  uint64_t v24 = (uint64_t)&v339[*(int *)(v13 + 48)];
  sub_1002A90E4(v341+ ((*(unsigned __int8 *)(v340 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v340 + 80))+ *(void *)(v340 + 72) * v20, v24, type metadata accessor for NANAttribute);
  uint64_t v25 = (uint64_t)v347;
  uint64_t v26 = (uint64_t)v347 + *(int *)(v13 + 48);
  *v347  = v23;
  sub_1002A86AC(v24, v26, type metadata accessor for NANAttribute);
  uint64_t v27 = 0;
  v356  = v22;
  while (1)
  {
    (*v349)(v25, v27, 1, v13);
    uint64_t v31 = v350;
    sub_1002A93F8(v25, (uint64_t)v350);
    if ((*v348)(v31, 1, v13) == 1) {
      break;
    }
    uint64_t v32 = *v31;
    sub_1002A86AC((uint64_t)v31 + *(int *)(v13 + 48), (uint64_t)v357, type metadata accessor for NANAttribute);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        __int16 v28 = *(_WORD *)v357;
        uint64_t v29 = *(int *)(type metadata accessor for NANPeer(0) + 36);
        goto LABEL_5;
      case 1u:
        uint64_t v194 = *(void *)v357;
        unint64_t v195 = v357[8] | ((unint64_t)*((unsigned int *)v357 + 3) << 32);
        uint64_t v196 = v3 + *(int *)(type metadata accessor for NANPeer(0) + 40);
        *(void *)uint64_t v196 = v194;
        *(void *)(v196 + 8)  = v195;
        *(unsigned char *)(v196 + 16)  = 0;
        goto LABEL_6;
      case 2u:
      case 0x23u:
        unint64_t v33 = *(void *)v357;
        uint64_t v34 = *(int *)(type metadata accessor for NANPeer(0) + 76);
        unint64_t v35 = sub_100374AE8(*(void *)(v3 + v34));
        if (v37) {
          goto LABEL_326;
        }
        uint64_t v38 = v36;
        v354  = v33 + 40;
        v353  = v33;
        v362  = v34;
        while (2)
        {
          uint64_t v39 = *(void *)(v3 + v34);
          if (*(_DWORD *)(v39 + 36) != v38) {
            goto LABEL_290;
          }
          uint64_t v40 = v38;
          v352  = v38;
LABEL_14:
          int64_t v41 = 1 << *(unsigned char *)(v39 + 32);
          if (v35 != v41)
          {
            uint64_t v42 = *(void *)(v33 + 16);
            uint64_t v43 = v35 >> 6;
            v367  = v35 >> 6;
            if (!v42) {
              goto LABEL_135;
            }
            if ((v35 & 0x8000000000000000) != 0) {
              goto LABEL_295;
            }
            v368  = v35;
            v366  = 1 << v35;
            swift_bridgeObjectRetain_n();
            unint64_t v44 = (unint64_t *)v354;
            v365  = v38;
LABEL_21:
            uint64_t v45 = *(void *)(v3 + v34);
            if (v368 >= 1 << *(unsigned char *)(v45 + 32))
            {
              __break(1u);
LABEL_284:
              __break(1u);
LABEL_285:
              __break(1u);
LABEL_286:
              __break(1u);
LABEL_287:
              __break(1u);
LABEL_288:
              __break(1u);
LABEL_289:
              __break(1u);
LABEL_290:
              __break(1u);
LABEL_291:
              __break(1u);
            }
            else
            {
              if ((*(void *)(v45 + 8 * v43 + 64) & v366) == 0) {
                goto LABEL_284;
              }
              if (*(_DWORD *)(v45 + 36) != v38) {
                goto LABEL_285;
              }
              uint64_t v46 = v3;
              uint64_t v47 = *(v44 - 1);
              unint64_t v48 = *v44;
              v44 += 2;
              uint64_t v49 = *(void *)(v45 + 56);
              v364  = *(void *)(v363 + 72) * v368;
              uint64_t v50 = v361;
              sub_1002A90E4(v49 + v364, (uint64_t)v361, type metadata accessor for NANPeer.Service);
              uint64_t v51 = *v50;
              unint64_t v52 = v50[1];
              sub_100013D44(v47, v48);
              unint64_t v53 = v52 >> 62;
              sub_100013D44(v51, v52);
              sub_10029B8A8((uint64_t)v50, type metadata accessor for NANPeer.Service);
              uint64_t v54 = 0;
              switch(v48 >> 62)
              {
                case 1uLL:
                  LODWORD(v54)  = HIDWORD(v47) - v47;
                  if (__OFSUB__(HIDWORD(v47), v47)) {
                    goto LABEL_286;
                  }
                  uint64_t v54 = (int)v54;
                  break;
                case 2uLL:
                  uint64_t v56 = *(void *)(v47 + 16);
                  uint64_t v55 = *(void *)(v47 + 24);
                  BOOL v57 = __OFSUB__(v55, v56);
                  uint64_t v54 = v55 - v56;
                  if (!v57) {
                    break;
                  }
                  goto LABEL_287;
                case 3uLL:
                  break;
                default:
                  uint64_t v54 = BYTE6(v48);
                  break;
              }
              switch((int)v53)
              {
                case 1:
                  if (__OFSUB__(HIDWORD(v51), v51)) {
                    goto LABEL_289;
                  }
                  if (v54 == HIDWORD(v51) - v51) {
                    goto LABEL_37;
                  }
                  goto LABEL_19;
                case 2:
                  uint64_t v59 = *(void *)(v51 + 16);
                  uint64_t v58 = *(void *)(v51 + 24);
                  BOOL v57 = __OFSUB__(v58, v59);
                  uint64_t v60 = v58 - v59;
                  if (v57) {
                    goto LABEL_288;
                  }
                  if (v54 == v60)
                  {
LABEL_37:
                    if (v54 < 1)
                    {
LABEL_155:
                      sub_10000C970(v51, v52);
                      sub_10000C970(v47, v48);
                      uint64_t v3 = v46;
                      uint64_t v43 = v367;
LABEL_156:
                      unint64_t v33 = v353;
                      swift_bridgeObjectRelease_n();
                      uint64_t v34 = v362;
                      uint64_t v119 = *(void *)(v3 + v362);
                      *(void *)(v3 + v362)  = 0x8000000000000000;
                      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                      int v121 = v365;
                      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                      {
                        __s1[0]  = v119;
                        sub_1003A2E78();
                        uint64_t v43 = v367;
                        uint64_t v119 = __s1[0];
                        swift_bridgeObjectRelease();
                      }
                      uint64_t v13 = v355;
                      uint64_t v122 = v368;
                      if (v368 < 1 << *(unsigned char *)(v119 + 32))
                      {
                        if ((*(void *)(v119 + 8 * v43 + 64) & v366) != 0)
                        {
                          if (*(_DWORD *)(v119 + 36) == v121)
                          {
                            unint64_t v123 = *(void *)(v119 + 56) + v364;
                            type metadata accessor for P2PTimer();
                            unint64_t v124 = v343;
                            variable initialization expression of AWDLPeer.lastUpdated();
                            (*v342)(v123 + *(int *)(v345 + 28), v124, v344);
                            *(void *)(v3 + v34)  = v119;
                            swift_bridgeObjectRetain();
                            uint64_t v125 = sub_1002A8714(v122, v121, 0, v119);
                            uint64_t v38 = v126;
                            char v128 = v127;
                            swift_bridgeObjectRelease();
                            unint64_t v35 = v125;
                            if (v128)
                            {
LABEL_326:
                              __break(1u);
LABEL_327:
                              __break(1u);
LABEL_328:
                              __break(1u);
LABEL_329:
                              __break(1u);
LABEL_330:
                              __DataStorage._length.getter();
                              __break(1u);
LABEL_331:
                              __DataStorage._length.getter();
                              __break(1u);
LABEL_332:
                              __break(1u);
LABEL_333:
                              __break(1u);
LABEL_334:
                              __break(1u);
LABEL_335:
                              __break(1u);
LABEL_336:
                              __break(1u);
LABEL_337:
                              __break(1u);
LABEL_338:
                              __break(1u);
LABEL_339:
                              __break(1u);
LABEL_340:
                              __break(1u);
                            }
                            continue;
                          }
LABEL_300:
                          __break(1u);
LABEL_301:
                          __break(1u);
LABEL_302:
                          __break(1u);
LABEL_303:
                          __break(1u);
LABEL_304:
                          __break(1u);
LABEL_305:
                          __break(1u);
LABEL_306:
                          __break(1u);
LABEL_307:
                          __break(1u);
LABEL_308:
                          __break(1u);
LABEL_309:
                          __break(1u);
LABEL_310:
                          __break(1u);
LABEL_311:
                          __break(1u);
LABEL_312:
                          __break(1u);
LABEL_313:
                          __break(1u);
LABEL_314:
                          __break(1u);
LABEL_315:
                          __break(1u);
LABEL_316:
                          __break(1u);
LABEL_317:
                          __break(1u);
LABEL_318:
                          __break(1u);
LABEL_319:
                          __break(1u);
LABEL_320:
                          __break(1u);
LABEL_321:
                          __break(1u);
LABEL_322:
                          __break(1u);
LABEL_323:
                          __break(1u);
LABEL_324:
                          __break(1u);
LABEL_325:
                          __break(1u);
                          goto LABEL_326;
                        }
LABEL_299:
                        __break(1u);
                        goto LABEL_300;
                      }
LABEL_298:
                      __break(1u);
                      goto LABEL_299;
                    }
                    switch(v48 >> 62)
                    {
                      case 1uLL:
                        if ((int)v47 > v47 >> 32) {
                          goto LABEL_291;
                        }
                        sub_100013D44(v47, v48);
                        uint64_t v79 = __DataStorage._bytes.getter();
                        if (v79)
                        {
                          uint64_t v80 = v79;
                          uint64_t v81 = __DataStorage._offset.getter();
                          if (__OFSUB__((int)v47, v81)) {
                            goto LABEL_297;
                          }
                          v359  = v80 + (int)v47 - v81;
                        }
                        else
                        {
                          v359  = 0;
                        }
                        __DataStorage._length.getter();
                        uint64_t v69 = v360;
                        if (v53)
                        {
                          if (v53 == 1)
                          {
                            if (v51 >> 32 < (int)v51) {
                              goto LABEL_309;
                            }
                            swift_retain();
                            uint64_t v82 = (char *)__DataStorage._bytes.getter();
                            if (v82)
                            {
                              uint64_t v83 = __DataStorage._offset.getter();
                              if (__OFSUB__((int)v51, v83)) {
                                goto LABEL_317;
                              }
                              v82 += (int)v51 - v83;
                            }
                            uint64_t v84 = __DataStorage._length.getter();
                            if (v84 >= (v51 >> 32) - (int)v51) {
                              size_t v85 = (v51 >> 32) - (int)v51;
                            }
                            else {
                              size_t v85 = v84;
                            }
                            uint64_t v3 = v360;
                            if (!v359) {
                              goto LABEL_334;
                            }
                            uint64_t v43 = v367;
                            if (!v82) {
                              goto LABEL_336;
                            }
                            int v86 = memcmp((const void *)v359, v82, v85);
                            sub_10000C970(v51, v52);
                            sub_10000C970(v47, v48);
                            sub_10000C970(v51, v52);
                            sub_10000C970(v47, v48);
                            if (!v86) {
                              goto LABEL_156;
                            }
                          }
                          else
                          {
                            uint64_t v104 = *(void *)(v51 + 16);
                            v358  = *(void *)(v51 + 24);
                            swift_retain();
                            swift_retain();
                            unint64_t v105 = (char *)__DataStorage._bytes.getter();
                            if (v105)
                            {
                              uint64_t v106 = __DataStorage._offset.getter();
                              if (__OFSUB__(v104, v106)) {
                                goto LABEL_315;
                              }
                              v105 += v104 - v106;
                            }
                            BOOL v57 = __OFSUB__(v358, v104);
                            unint64_t v107 = (char *)(v358 - v104);
                            if (v57) {
                              goto LABEL_310;
                            }
                            uint64_t v108 = __DataStorage._length.getter();
                            if (v108 >= (uint64_t)v107) {
                              size_t v109 = (size_t)v107;
                            }
                            else {
                              size_t v109 = v108;
                            }
                            if (!v359) {
                              goto LABEL_338;
                            }
                            if (!v105) {
                              goto LABEL_339;
                            }
                            uint64_t v3 = v69;
                            int v74 = memcmp((const void *)v359, v105, v109);
                            swift_release();
                            swift_release();
                            sub_10000C970(v47, v48);
                            sub_10000C970(v51, v52);
                            sub_10000C970(v47, v48);
LABEL_106:
                            uint64_t v43 = v367;
                            if (!v74) {
                              goto LABEL_156;
                            }
                          }
                        }
                        else
                        {
                          __s1[0]  = v51;
                          LOWORD(__s1[1])  = v52;
                          BYTE2(__s1[1])  = BYTE2(v52);
                          BYTE3(__s1[1])  = BYTE3(v52);
                          BYTE4(__s1[1])  = BYTE4(v52);
                          BYTE5(__s1[1])  = BYTE5(v52);
                          uint64_t v43 = v367;
                          if (!v359) {
                            goto LABEL_329;
                          }
                          int v97 = memcmp((const void *)v359, __s1, BYTE6(v52));
                          sub_10000C970(v47, v48);
LABEL_122:
                          sub_10000C970(v51, v52);
                          sub_10000C970(v47, v48);
                          uint64_t v3 = v69;
                          if (!v97) {
                            goto LABEL_156;
                          }
                        }
                        break;
                      case 2uLL:
                        uint64_t v66 = *(void *)(v47 + 16);
                        swift_retain();
                        swift_retain();
                        uint64_t v67 = (char *)__DataStorage._bytes.getter();
                        v359  = v48 & 0x3FFFFFFFFFFFFFFFLL;
                        if (!v67) {
                          goto LABEL_49;
                        }
                        uint64_t v68 = __DataStorage._offset.getter();
                        if (__OFSUB__(v66, v68)) {
                          goto LABEL_296;
                        }
                        v67 += v66 - v68;
LABEL_49:
                        __DataStorage._length.getter();
                        uint64_t v69 = v360;
                        if (!v53)
                        {
                          __s1[0]  = v51;
                          LOWORD(__s1[1])  = v52;
                          BYTE2(__s1[1])  = BYTE2(v52);
                          BYTE3(__s1[1])  = BYTE3(v52);
                          BYTE4(__s1[1])  = BYTE4(v52);
                          BYTE5(__s1[1])  = BYTE5(v52);
                          uint64_t v43 = v367;
                          if (!v67) {
                            goto LABEL_327;
                          }
                          int v97 = memcmp(v67, __s1, BYTE6(v52));
                          swift_release();
                          swift_release();
                          goto LABEL_122;
                        }
                        v358  = (unint64_t)v67;
                        if (v53 == 1)
                        {
                          if (v51 >> 32 < (int)v51) {
                            goto LABEL_303;
                          }
                          swift_retain();
                          char v70 = (char *)__DataStorage._bytes.getter();
                          if (v70)
                          {
                            uint64_t v71 = __DataStorage._offset.getter();
                            if (__OFSUB__((int)v51, v71)) {
                              goto LABEL_316;
                            }
                            v70 += (int)v51 - v71;
                          }
                          uint64_t v72 = __DataStorage._length.getter();
                          if (v72 >= (v51 >> 32) - (int)v51) {
                            size_t v73 = (v51 >> 32) - (int)v51;
                          }
                          else {
                            size_t v73 = v72;
                          }
                          uint64_t v46 = v360;
                          if (!v358) {
                            goto LABEL_333;
                          }
                          if (!v70) {
                            goto LABEL_335;
                          }
                          int v74 = memcmp((const void *)v358, v70, v73);
                          sub_10000C970(v51, v52);
                          swift_release();
                          swift_release();
LABEL_75:
                          sub_10000C970(v51, v52);
                          sub_10000C970(v47, v48);
                          uint64_t v3 = v46;
                        }
                        else
                        {
                          uint64_t v98 = *(void *)(v51 + 16);
                          v351  = *(void *)(v51 + 24);
                          swift_retain();
                          swift_retain();
                          uint64_t v99 = (char *)__DataStorage._bytes.getter();
                          if (v99)
                          {
                            uint64_t v100 = __DataStorage._offset.getter();
                            if (__OFSUB__(v98, v100)) {
                              goto LABEL_314;
                            }
                            v99 += v98 - v100;
                          }
                          BOOL v57 = __OFSUB__(v351, v98);
                          int64_t v101 = v351 - v98;
                          if (v57) {
                            goto LABEL_308;
                          }
                          uint64_t v102 = __DataStorage._length.getter();
                          if (v102 >= v101) {
                            size_t v103 = v101;
                          }
                          else {
                            size_t v103 = v102;
                          }
                          if (!v358) {
                            goto LABEL_337;
                          }
                          if (!v99) {
                            goto LABEL_340;
                          }
                          int v74 = memcmp((const void *)v358, v99, v103);
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          sub_10000C970(v51, v52);
                          sub_10000C970(v47, v48);
                          uint64_t v3 = v69;
                        }
                        goto LABEL_106;
                      case 3uLL:
                        memset(__s1, 0, 14);
                        if (!v53) {
                          goto LABEL_74;
                        }
                        if (v53 == 1)
                        {
                          uint64_t v61 = (v51 >> 32) - (int)v51;
                          if (v51 >> 32 < (int)v51) {
                            goto LABEL_301;
                          }
                          sub_100013D44(v51, v52);
                          uint64_t v75 = __DataStorage._bytes.getter();
                          if (!v75) {
                            goto LABEL_330;
                          }
                          uint64_t v63 = v75;
                          uint64_t v76 = __DataStorage._offset.getter();
                          uint64_t v65 = (int)v51 - v76;
                          if (__OFSUB__((int)v51, v76)) {
                            goto LABEL_307;
                          }
                          goto LABEL_66;
                        }
                        uint64_t v87 = *(void *)(v51 + 16);
                        uint64_t v88 = *(void *)(v51 + 24);
                        swift_retain();
                        swift_retain();
                        uint64_t v89 = (char *)__DataStorage._bytes.getter();
                        if (v89)
                        {
                          uint64_t v90 = __DataStorage._offset.getter();
                          if (__OFSUB__(v87, v90)) {
                            goto LABEL_313;
                          }
                          v89 += v87 - v90;
                        }
                        BOOL v57 = __OFSUB__(v88, v87);
                        int64_t v91 = v88 - v87;
                        if (v57) {
                          goto LABEL_304;
                        }
                        uint64_t v92 = __DataStorage._length.getter();
                        if (!v89) {
                          goto LABEL_328;
                        }
                        goto LABEL_101;
                      default:
                        __s1[0]  = v47;
                        LOWORD(__s1[1])  = v48;
                        BYTE2(__s1[1])  = BYTE2(v48);
                        BYTE3(__s1[1])  = BYTE3(v48);
                        BYTE4(__s1[1])  = BYTE4(v48);
                        BYTE5(__s1[1])  = BYTE5(v48);
                        if (!v53)
                        {
LABEL_74:
                          __s2  = v51;
                          v370  = v52;
                          v371  = BYTE2(v52);
                          v372  = BYTE3(v52);
                          v373  = BYTE4(v52);
                          v374  = BYTE5(v52);
                          int v74 = memcmp(__s1, &__s2, BYTE6(v52));
                          goto LABEL_75;
                        }
                        if (v53 == 1)
                        {
                          uint64_t v61 = (v51 >> 32) - (int)v51;
                          if (v51 >> 32 < (int)v51) {
                            goto LABEL_302;
                          }
                          sub_100013D44(v51, v52);
                          uint64_t v62 = __DataStorage._bytes.getter();
                          if (!v62) {
                            goto LABEL_331;
                          }
                          uint64_t v63 = v62;
                          uint64_t v64 = __DataStorage._offset.getter();
                          uint64_t v65 = (int)v51 - v64;
                          if (__OFSUB__((int)v51, v64)) {
                            goto LABEL_306;
                          }
LABEL_66:
                          uint64_t v77 = __DataStorage._length.getter();
                          if (v77 >= v61) {
                            size_t v78 = v61;
                          }
                          else {
                            size_t v78 = v77;
                          }
                          int v74 = memcmp(__s1, (const void *)(v63 + v65), v78);
                          sub_10000C970(v51, v52);
                        }
                        else
                        {
                          uint64_t v93 = *(void *)(v51 + 16);
                          uint64_t v94 = *(void *)(v51 + 24);
                          swift_retain();
                          swift_retain();
                          uint64_t v89 = (char *)__DataStorage._bytes.getter();
                          if (v89)
                          {
                            uint64_t v95 = __DataStorage._offset.getter();
                            if (__OFSUB__(v93, v95)) {
                              goto LABEL_312;
                            }
                            v89 += v93 - v95;
                          }
                          BOOL v57 = __OFSUB__(v94, v93);
                          int64_t v91 = v94 - v93;
                          if (v57) {
                            goto LABEL_305;
                          }
                          uint64_t v92 = __DataStorage._length.getter();
                          if (!v89) {
                            goto LABEL_332;
                          }
LABEL_101:
                          if (v92 >= v91) {
                            size_t v96 = v91;
                          }
                          else {
                            size_t v96 = v92;
                          }
                          int v74 = memcmp(__s1, v89, v96);
                          swift_release();
                          swift_release();
                        }
                        sub_10000C970(v51, v52);
                        sub_10000C970(v47, v48);
                        uint64_t v3 = v360;
                        goto LABEL_106;
                    }
                  }
                  else
                  {
LABEL_19:
                    sub_10000C970(v51, v52);
                    sub_10000C970(v47, v48);
                    uint64_t v3 = v46;
                    uint64_t v43 = v367;
                  }
                  --v42;
                  uint64_t v34 = v362;
                  uint64_t v38 = v365;
                  if (v42) {
                    goto LABEL_21;
                  }
                  unint64_t v33 = v353;
                  swift_bridgeObjectRelease_n();
                  uint64_t v39 = *(void *)(v3 + v34);
                  int64_t v41 = 1 << *(unsigned char *)(v39 + 32);
                  uint64_t v13 = v355;
                  unint64_t v35 = v368;
                  uint64_t v40 = v352;
                  break;
                case 3:
                  if (v54) {
                    goto LABEL_19;
                  }
                  goto LABEL_155;
                default:
                  if (v54 == BYTE6(v52)) {
                    goto LABEL_37;
                  }
                  goto LABEL_19;
              }
LABEL_135:
              if ((v35 & 0x8000000000000000) == 0 && (uint64_t)v35 < v41)
              {
                uint64_t v110 = v39 + 64;
                unint64_t v111 = *(void *)(v39 + 64 + 8 * v43);
                if (((v111 >> v35) & 1) == 0) {
                  goto LABEL_293;
                }
                if (*(_DWORD *)(v39 + 36) == v38)
                {
                  unint64_t v112 = v111 & (-2 << (v35 & 0x3F));
                  if (v112)
                  {
                    int64_t v41 = __clz(__rbit64(v112)) | v35 & 0xFFFFFFFFFFFFFFC0;
                    goto LABEL_144;
                  }
                  uint64_t v113 = v43 + 1;
                  unint64_t v114 = (unint64_t)(v41 + 63) >> 6;
                  if (v43 + 1 < v114)
                  {
                    unint64_t v115 = *(void *)(v110 + 8 * v113);
                    if (v115) {
                      goto LABEL_143;
                    }
                    uint64_t v113 = v367 + 2;
                    if (v367 + 2 < v114)
                    {
                      unint64_t v115 = *(void *)(v110 + 8 * v113);
                      if (v115) {
                        goto LABEL_143;
                      }
                      uint64_t v113 = v367 + 3;
                      if (v367 + 3 >= v114) {
                        goto LABEL_144;
                      }
                      unint64_t v115 = *(void *)(v110 + 8 * v113);
                      if (v115)
                      {
LABEL_143:
                        int64_t v41 = __clz(__rbit64(v115)) + (v113 << 6);
                        goto LABEL_144;
                      }
                      uint64_t v117 = v39 + 96;
                      uint64_t v118 = v367;
                      while (v114 - 4 != v118)
                      {
                        unint64_t v115 = *(void *)(v117 + 8 * v118++);
                        if (v115)
                        {
                          sub_100038030(v35, v38, 0);
                          uint64_t v113 = v118 + 3;
                          goto LABEL_143;
                        }
                      }
                      sub_100038030(v35, v38, 0);
                    }
                  }
LABEL_144:
                  uint64_t v39 = *(void *)(v3 + v34);
                  unint64_t v35 = v41;
                  BOOL v116 = *(_DWORD *)(v39 + 36) == v38;
                  uint64_t v38 = v40;
                  if (!v116) {
                    goto LABEL_290;
                  }
                  goto LABEL_14;
                }
LABEL_294:
                __break(1u);
LABEL_295:
                __break(1u);
LABEL_296:
                __break(1u);
LABEL_297:
                __break(1u);
                goto LABEL_298;
              }
            }
            __break(1u);
LABEL_293:
            __break(1u);
            goto LABEL_294;
          }
          break;
        }
        swift_bridgeObjectRelease();
        goto LABEL_280;
      case 3u:
        long long v164 = *((_OWORD *)v357 + 3);
        v378  = *((_OWORD *)v357 + 2);
        v379  = v164;
        v380  = *((_OWORD *)v357 + 4);
        long long v165 = *((_OWORD *)v357 + 1);
        v376  = *(_OWORD *)v357;
        v377  = v165;
        char v166 = NANAttribute.ServiceDescriptor.Control.type.getter(BYTE2(v165));
        unsigned __int8 v167 = v377;
        if (v166 != 2)
        {
          unint64_t v217 = (_OWORD *)swift_allocObject();
          long long v218 = v379;
          v217[3]  = v378;
          v217[4]  = v218;
          v217[5]  = v380;
          long long v219 = v377;
          v217[1]  = v376;
          v217[2]  = v219;
          sub_10021ABA8((uint64_t)&v376);
          sub_10021ABA8((uint64_t)&v376);
          sub_100011E30((uint64_t)v335);
          uint64_t v220 = *(int *)(type metadata accessor for NANPeer(0) + 76);
          sub_10021ABA8((uint64_t)&v376);
          char v221 = swift_isUniquelyReferenced_nonNull_native();
          v222  = v3;
          v223  = v221;
          __s1[0]  = *(void *)(v222 + v220);
          v224  = __s1[0];
          v225  = v222;
          *(void *)(v222 + v220)  = 0x8000000000000000;
          unint64_t v227 = sub_10039F964(v167);
          uint64_t v228 = *(void *)(v224 + 16);
          BOOL v229 = (v226 & 1) == 0;
          uint64_t v230 = v228 + v229;
          if (__OFADD__(v228, v229)) {
            goto LABEL_320;
          }
          char v231 = v226;
          if (*(void *)(v224 + 24) >= v230)
          {
            if ((v223 & 1) == 0)
            {
              sub_1003A2E78();
              v224  = __s1[0];
            }
          }
          else
          {
            sub_100291BF4(v230, v223);
            v224  = __s1[0];
            unint64_t v232 = sub_10039F964(v167);
            if ((v231 & 1) != (v233 & 1)) {
              goto LABEL_341;
            }
            unint64_t v227 = v232;
          }
          *(void *)(v225 + v220)  = v224;
          swift_bridgeObjectRelease();
          v251  = *(void **)(v225 + v220);
          v368  = (int64_t)v217;
          if (v231)
          {
            sub_10013F060((uint64_t)&v376);
            swift_bridgeObjectRetain();
          }
          else
          {
            v268  = v325;
            *v325  = 0;
            v268[1]  = 0;
            v268[2]  = 0;
            v269  = (uint64_t)v327;
            v327[144]  = -1;
            v270  = v379;
            *(_OWORD *)(v269 + 32)  = v378;
            *(_OWORD *)(v269 + 48)  = v270;
            *(_OWORD *)(v269 + 64)  = v380;
            v271  = v377;
            *(_OWORD *)v269  = v376;
            *(_OWORD *)(v269 + 16)  = v271;
            v272  = v326;
            *v326  = 0;
            v272[1]  = 0;
            *(void *)(v269 + 96)  = 5;
            type metadata accessor for P2PTimer();
            v273  = v324;
            *v324  = 0;
            v273[1]  = 0;
            swift_bridgeObjectRetain();
            variable initialization expression of AWDLPeer.lastUpdated();
            v251[(v227 >> 6) + 8] |= 1 << v227;
            *(unsigned char *)(v251[6] + v227)  = v167;
            sub_1002A86AC(v269, v251[7] + *(void *)(v363 + 72) * v227, type metadata accessor for NANPeer.Service);
            v274  = v251[2];
            BOOL v57 = __OFADD__(v274, 1);
            v275  = v274 + 1;
            if (v57) {
              goto LABEL_322;
            }
            v251[2]  = v275;
          }
          v276  = v251[7];
          swift_bridgeObjectRelease();
          v277  = v276 + *(void *)(v363 + 72) * v227;
          v278  = *(void *)v277;
          v279  = *(void *)(v277 + 8);
          v280  = *(void *)(v277 + 32);
          v281  = *(void *)(v277 + 40);
          v282  = *(unsigned __int16 *)(v277 + 48) | (*(unsigned __int8 *)(v277 + 50) << 16);
          v283  = *(void *)(v277 + 56);
          v284  = *(void *)(v277 + 64);
          v285  = *(void *)(v277 + 72);
          sub_10021ABA8((uint64_t)&v376);
          sub_10000C970(v278, v279);
          swift_bridgeObjectRelease();
          sub_100133188(v280, v281, v282);
          sub_1001331AC(v283, v284, v285);
          *(_OWORD *)v277  = v376;
          v286  = v377;
          v287  = v378;
          v288  = v380;
          *(_OWORD *)(v277 + 48)  = v379;
          *(_OWORD *)(v277 + 64)  = v288;
          *(_OWORD *)(v277 + 16)  = v286;
          *(_OWORD *)(v277 + 32)  = v287;
          type metadata accessor for P2PTimer();
          v289  = v343;
          variable initialization expression of AWDLPeer.lastUpdated();
          (*v342)(v277 + *(int *)(v345 + 28), v289, v344);
          sub_10013F060((uint64_t)&v376);
          sub_10013F060((uint64_t)&v376);
          v335  = sub_1002AA160;
          v334  = v368;
LABEL_278:
          uint64_t v3 = v360;
          goto LABEL_279;
        }
        uint64_t v168 = v3;
        uint64_t v169 = v336;
        char v170 = swift_isUniquelyReferenced_nonNull_native();
        __s1[0]  = v169;
        unint64_t v172 = sub_10039F964(v167);
        uint64_t v173 = v169[2];
        BOOL v174 = (v171 & 1) == 0;
        uint64_t v175 = v173 + v174;
        if (__OFADD__(v173, v174)) {
          goto LABEL_319;
        }
        char v176 = v171;
        if (v169[3] >= v175)
        {
          if ((v170 & 1) == 0) {
            sub_1003A3118();
          }
        }
        else
        {
          sub_100291F84(v175, v170);
          unint64_t v177 = sub_10039F964(v167);
          if ((v176 & 1) != (v178 & 1)) {
            goto LABEL_342;
          }
          unint64_t v172 = v177;
        }
        v250  = (void *)__s1[0];
        v336  = (void *)__s1[0];
        if (v176)
        {
          *(unsigned char *)(*(void *)(__s1[0] + 56) + v172)  = 1;
        }
        else
        {
          *(void *)(__s1[0] + 8 * (v172 >> 6) + 64) |= 1 << v172;
          *(unsigned char *)(v250[6] + v172)  = v167;
          *(unsigned char *)(v250[7] + v172)  = 1;
          v252  = v250[2];
          BOOL v57 = __OFADD__(v252, 1);
          v253  = v252 + 1;
          if (v57) {
            goto LABEL_323;
          }
          v250[2]  = v253;
        }
        swift_bridgeObjectRelease();
        v254  = (_OWORD *)swift_allocObject();
        v255  = v379;
        v254[3]  = v378;
        v254[4]  = v255;
        v254[5]  = v380;
        v256  = v377;
        v254[1]  = v376;
        v254[2]  = v256;
        sub_10021ABA8((uint64_t)&v376);
        sub_10021ABA8((uint64_t)&v376);
        sub_100011E30((uint64_t)v333);
        v257  = *(int *)(type metadata accessor for NANPeer(0) + 76);
        v258  = swift_isUniquelyReferenced_nonNull_native();
        __s1[0]  = *(void *)(v168 + v257);
        v259  = __s1[0];
        *(void *)(v168 + v257)  = 0x8000000000000000;
        v261  = sub_10039F964(v167);
        v262  = *(void *)(v259 + 16);
        v263  = (v260 & 1) == 0;
        v264  = v262 + v263;
        if (__OFADD__(v262, v263)) {
          goto LABEL_321;
        }
        v265  = v260;
        if (*(void *)(v259 + 24) >= v264)
        {
          if ((v258 & 1) == 0)
          {
            sub_1003A2E78();
            v259  = __s1[0];
          }
        }
        else
        {
          sub_100291BF4(v264, v258);
          v259  = __s1[0];
          v266  = sub_10039F964(v167);
          if ((v265 & 1) != (v267 & 1))
          {
LABEL_341:
            sub_10013F060((uint64_t)&v376);
LABEL_342:
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            JUMPOUT(0x1002A472CLL);
          }
          v261  = v266;
        }
        *(void *)(v168 + v257)  = v259;
        swift_bridgeObjectRelease();
        v290  = *(void **)(v168 + v257);
        if (v265)
        {
          sub_10013F060((uint64_t)&v376);
          swift_bridgeObjectRetain();
        }
        else
        {
          v291  = v325;
          *v325  = 0;
          v291[1]  = 0;
          v291[2]  = 0;
          v292  = (uint64_t)v327;
          v327[144]  = -1;
          v293  = v379;
          *(_OWORD *)(v292 + 32)  = v378;
          *(_OWORD *)(v292 + 48)  = v293;
          *(_OWORD *)(v292 + 64)  = v380;
          v294  = v377;
          *(_OWORD *)v292  = v376;
          *(_OWORD *)(v292 + 16)  = v294;
          v295  = v326;
          *v326  = 0;
          v295[1]  = 0;
          *(void *)(v292 + 96)  = 5;
          type metadata accessor for P2PTimer();
          v296  = v324;
          *v324  = 0;
          v296[1]  = 0;
          swift_bridgeObjectRetain();
          variable initialization expression of AWDLPeer.lastUpdated();
          v290[(v261 >> 6) + 8] |= 1 << v261;
          *(unsigned char *)(v290[6] + v261)  = v167;
          sub_1002A86AC(v292, v290[7] + *(void *)(v363 + 72) * v261, type metadata accessor for NANPeer.Service);
          v297  = v290[2];
          BOOL v57 = __OFADD__(v297, 1);
          v298  = v297 + 1;
          if (v57) {
            goto LABEL_324;
          }
          v290[2]  = v298;
        }
        unint64_t v19 = v338;
        v299  = v290[7];
        swift_bridgeObjectRelease();
        v300  = v299 + *(void *)(v363 + 72) * v261;
        type metadata accessor for P2PTimer();
        v301  = v343;
        variable initialization expression of AWDLPeer.lastUpdated();
        (*v342)(v300 + *(int *)(v345 + 28), v301, v344);
        sub_10013F060((uint64_t)&v376);
        v333  = sub_1002A9568;
        v332  = v254;
        unint64_t v20 = v356;
        uint64_t v3 = v168;
        BOOL v21 = v356 >= v19;
        if (v356 == v19) {
          goto LABEL_7;
        }
        goto LABEL_2;
      case 4u:
        __int16 v28 = *(_WORD *)v357;
        uint64_t v29 = *(int *)(type metadata accessor for NANPeer(0) + 48);
        goto LABEL_5;
      case 0xBu:
        __int16 v28 = *(_WORD *)v357;
        uint64_t v29 = *(int *)(type metadata accessor for NANPeer(0) + 44);
LABEL_5:
        uint64_t v30 = v3 + v29;
        *(_WORD *)uint64_t v30 = v28;
        *(unsigned char *)(v30 + 2)  = 0;
        goto LABEL_6;
      case 0xEu:
        uint64_t v141 = *v357;
        uint64_t v142 = *((unsigned __int16 *)v357 + 1);
        uint64_t v143 = *((unsigned int *)v357 + 1);
        uint64_t v144 = v357[8];
        uint64_t v145 = v357[9];
        int v146 = v357[10];
        uint64_t v147 = *((void *)v357 + 2);
        int64_t v148 = *((void *)v357 + 4);
        v367  = *((void *)v357 + 3);
        v368  = v148;
        uint64_t v149 = v336;
        if (!v336[2] || (unint64_t v150 = sub_10039F964(v141), (v151 & 1) == 0) || (*(unsigned char *)(v149[7] + v150) & 1) == 0)
        {
          type metadata accessor for NANPeer(0);
          uint64_t v197 = sub_100355AFC(__s1, v141);
          uint64_t v199 = v198;
          if ((*v328)(v198, 1, v345))
          {
            ((void (*)(void *, void))v197)(__s1, 0);
            uint64_t v200 = v147;
            uint64_t v201 = v367;
            unint64_t v202 = v368;
LABEL_277:
            sub_1001331AC(v200, v201, v202);
            goto LABEL_278;
          }
          uint64_t v234 = v141 | (v142 << 16) | (v143 << 32);
          uint64_t v235 = 0x10000;
          if (!v146) {
            uint64_t v235 = 0;
          }
          v236  = v144 | (v145 << 8) | v235;
          v237  = *(void *)(v199 + 80);
          v238  = *(void *)(v199 + 88);
          v239  = *(void *)(v199 + 96);
          v240  = *(void *)(v199 + 104);
          v365  = *(void *)(v199 + 112);
          *(void *)(v199 + 80)  = v234;
          *(void *)(v199 + 88)  = v236;
          v241  = v147;
          v242  = v367;
          *(void *)(v199 + 96)  = v147;
          *(void *)(v199 + 104)  = v242;
          v243  = v368;
          *(void *)(v199 + 112)  = v368;
          v366  = v239;
          v244  = v239;
          v364  = (unint64_t)v197;
          if (v239 == 5) {
            goto LABEL_271;
          }
          if ((v238 & 0x10000) == 0)
          {
            v354  = BYTE1(v238);
            v245  = *(void *)(v199 + 120);
            v246  = *(void *)(v199 + 128);
            v247  = v240;
            v248  = *(void *)(v199 + 136);
            LODWORD(v353)  = *(unsigned __int8 *)(v199 + 144);
            sub_10013316C(v241, v242, v243);
            v249  = v248;
            v240  = v247;
            sub_1002A914C(v245, v246, v249, v353);
            *(void *)(v199 + 128)  = 0;
            *(void *)(v199 + 136)  = 0;
            *(void *)(v199 + 120)  = v354;
            *(unsigned char *)(v199 + 144)  = 0;
            goto LABEL_275;
          }
          if (v239 == 4)
          {
LABEL_271:
            v306  = *(void *)(v199 + 64);
            v307  = *(void *)(v199 + 72);
            v353  = *(void *)(v199 + 56);
            v308  = v353;
            v362  = v237;
            v359  = v238;
            v358  = v240;
            v323  = v307;
            if (v353 == 4)
            {
              v308  = 0;
              v352  = 0;
              v351  = 0;
              LODWORD(v354)  = 255;
            }
            else
            {
              LODWORD(v354)  = 1;
              v352  = v306;
              v351  = v307;
            }
            v310  = *(void *)(v199 + 120);
            v309  = *(void *)(v199 + 128);
            v311  = *(void *)(v199 + 136);
            v312  = *(unsigned char *)(v199 + 144);
            sub_10013316C(v241, v242, v243);
            sub_10013316C(v353, v306, v323);
            sub_1002A914C(v310, v309, v311, v312);
            v313  = v352;
            *(void *)(v199 + 120)  = v308;
            *(void *)(v199 + 128)  = v313;
            *(void *)(v199 + 136)  = v351;
            *(unsigned char *)(v199 + 144)  = v354;
            v237  = v362;
            v238  = v359;
            v240  = v358;
LABEL_275:
            v314  = v365;
          }
          else
          {
            v316  = *(void *)(v199 + 128);
            v354  = *(void *)(v199 + 120);
            v353  = *(void *)(v199 + 136);
            LODWORD(v352)  = *(unsigned __int8 *)(v199 + 144);
            sub_10013316C(v241, v242, v243);
            v317  = v365;
            sub_1002A94C8(v237, v238, v366, v240, v365);
            sub_1002A914C(v354, v316, v353, v352);
            *(void *)(v199 + 120)  = v244;
            *(void *)(v199 + 128)  = v240;
            v314  = v317;
            *(void *)(v199 + 136)  = v317;
            *(unsigned char *)(v199 + 144)  = 1;
          }
          type metadata accessor for P2PTimer();
          v315  = v343;
          variable initialization expression of AWDLPeer.lastUpdated();
          (*v342)(v199 + *(int *)(v345 + 28), v315, v344);
          sub_10013F040(v237, v238, v366, v240, v314);
          ((void (*)(void *, void))v364)(__s1, 0);
          uint64_t v200 = v241;
          uint64_t v201 = v242;
          unint64_t v202 = v243;
          goto LABEL_277;
        }
        type metadata accessor for NANPeer(0);
        uint64_t v152 = sub_100355AFC(__s1, v141);
        uint64_t v154 = v153;
        uint64_t v155 = v345;
        if (!(*v328)(v153, 1, v345))
        {
          type metadata accessor for P2PTimer();
          int v156 = v343;
          variable initialization expression of AWDLPeer.lastUpdated();
          (*v342)(v154 + *(int *)(v155 + 28), v156, v344);
        }
        ((void (*)(void *, void))v152)(__s1, 0);
        sub_1001331AC(v147, v367, v368);
LABEL_279:
        uint64_t v13 = v355;
LABEL_280:
        unint64_t v19 = v338;
LABEL_6:
        unint64_t v20 = v356;
        BOOL v21 = v356 >= v19;
        if (v356 != v19) {
          goto LABEL_2;
        }
LABEL_7:
        uint64_t v27 = 1;
        v356  = v19;
        uint64_t v25 = (uint64_t)v347;
        break;
      case 0xFu:
        __int16 v159 = *((_WORD *)v357 + 4);
        unsigned __int8 v160 = v357[10];
        uint64_t v161 = 256;
        if (!v357[1]) {
          uint64_t v161 = 0;
        }
        unint64_t v162 = v161 | *v357 | ((unint64_t)*((unsigned __int16 *)v357 + 1) << 16) | ((unint64_t)v357[4] << 32) | ((unint64_t)v357[5] << 40) | ((unint64_t)v357[6] << 48);
        uint64_t v163 = v3 + *(int *)(type metadata accessor for NANPeer(0) + 52);
        *(void *)uint64_t v163 = v162;
        *(unsigned char *)(v163 + 10)  = v160;
        *(_WORD *)(v163 + 8)  = v159;
        *(unsigned char *)(v163 + 11)  = 0;
        goto LABEL_6;
      case 0x11u:
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v337  = sub_1000C5D5C(0, v337[2] + 1, 1, v337);
        }
        unint64_t v130 = v337[2];
        unint64_t v129 = v337[3];
        if (v130 >= v129 >> 1) {
          v337  = sub_1000C5D5C((void *)(v129 > 1), v130 + 1, 1, v337);
        }
        uint64_t v131 = v337;
        v337[2]  = v130 + 1;
        v131[v130 + 4]  = v32;
        goto LABEL_6;
      case 0x14u:
        int v157 = *v357 | (*((unsigned __int16 *)v357 + 1) << 16);
        uint64_t v158 = v3 + *(int *)(type metadata accessor for NANPeer(0) + 56);
        *(_DWORD *)uint64_t v158 = v157;
        *(unsigned char *)(v158 + 4)  = 0;
        goto LABEL_6;
      case 0x1Au:
        uint64_t v181 = *v357;
        uint64_t v182 = v357[1];
        v368  = v357[2];
        v367  = v357[3];
        v366  = v357[4];
        v365  = v357[5];
        v364  = v357[6];
        v362  = v357[7];
        uint64_t v183 = v357[8];
        uint64_t v184 = v357[9];
        v358  = v357[10];
        v353  = v357[11];
        LODWORD(v351)  = v357[12];
        v359  = v357[13];
        v354  = v357[14];
        v352  = v357[15];
        int v185 = *((unsigned __int16 *)v357 + 8);
        uint64_t v186 = v3;
        int v187 = *((unsigned __int16 *)v357 + 9);
        uint64_t v188 = v186 + *(int *)(type metadata accessor for NANPeer(0) + 68);
        uint64_t v189 = v181 | (v182 << 8);
        uint64_t v190 = *(void *)(v188 + 8);
        uint64_t v191 = v183 | (v184 << 8);
        int v192 = v185 | (v187 << 16);
        if ((v190 & 0xFF00000000) != 0x200000000)
        {
          os_log_t v193 = &_mh_execute_header;
          if (!v351) {
            os_log_t v193 = 0;
          }
          if (static NANAttribute.ExtendedWLANInfrastructure.__derived_struct_equals(_:_:)(*(void *)v188, v190 & 0xFFFFFF01FFFFFFFFLL, *(_DWORD *)(v188 + 16), v189 | (v368 << 16) | (v367 << 24) | (v366 << 32) | (v365 << 40) | (v364 << 48) | (v362 << 56), v191 | (v358 << 16) | (v353 << 24) | (unint64_t)v193 | (v359 << 40) | (v354 << 48) | (v352 << 56), v185 | (v187 << 16)))
          {
            unint64_t v19 = v338;
            uint64_t v3 = v186;
            goto LABEL_267;
          }
        }
        uint64_t v203 = v331;
        unint64_t v19 = v338;
        uint64_t v3 = v186;
        if (!*(void *)(v331 + 16)) {
          goto LABEL_267;
        }
        unint64_t v204 = sub_10039F7B4(30);
        if ((v205 & 1) == 0) {
          goto LABEL_267;
        }
        uint64_t v206 = *(void *)(*(void *)(v203 + 56) + 8 * v204);
        uint64_t v207 = v206 + 64;
        uint64_t v208 = 1 << *(unsigned char *)(v206 + 32);
        if (v208 < 64) {
          uint64_t v209 = ~(-1 << v208);
        }
        else {
          uint64_t v209 = -1;
        }
        unint64_t v210 = v209 & *(void *)(v206 + 64);
        int64_t v211 = (unint64_t)(v208 + 63) >> 6;
        swift_bridgeObjectRetain_n();
        int64_t v212 = 0;
        while (2)
        {
          if (v210)
          {
            v213  = __clz(__rbit64(v210));
            v210 &= v210 - 1;
            v214  = v213 | (v212 << 6);
            goto LABEL_206;
          }
          BOOL v57 = __OFADD__(v212++, 1);
          if (v57) {
            goto LABEL_318;
          }
          if (v212 >= v211)
          {
            uint64_t v3 = v360;
          }
          else
          {
            unint64_t v215 = *(void *)(v207 + 8 * v212);
            if (v215) {
              goto LABEL_222;
            }
            int64_t v216 = v212 + 1;
            if (v212 + 1 < v211)
            {
              unint64_t v215 = *(void *)(v207 + 8 * v216);
              if (v215) {
                goto LABEL_221;
              }
              int64_t v216 = v212 + 2;
              if (v212 + 2 < v211)
              {
                unint64_t v215 = *(void *)(v207 + 8 * v216);
                if (v215) {
                  goto LABEL_221;
                }
                int64_t v216 = v212 + 3;
                if (v212 + 3 < v211)
                {
                  unint64_t v215 = *(void *)(v207 + 8 * v216);
                  if (v215) {
                    goto LABEL_221;
                  }
                  int64_t v216 = v212 + 4;
                  if (v212 + 4 < v211)
                  {
                    unint64_t v215 = *(void *)(v207 + 8 * v216);
                    if (v215) {
                      goto LABEL_221;
                    }
                    int64_t v216 = v212 + 5;
                    if (v212 + 5 < v211)
                    {
                      unint64_t v215 = *(void *)(v207 + 8 * v216);
                      if (v215)
                      {
LABEL_221:
                        int64_t v212 = v216;
LABEL_222:
                        unint64_t v210 = (v215 - 1) & v215;
                        v214  = __clz(__rbit64(v215)) + (v212 << 6);
LABEL_206:
                        (*(void (**)(void))(*(void *)(v206 + 56) + 16 * v214))();
                        continue;
                      }
                      while (1)
                      {
                        int64_t v212 = v216 + 1;
                        if (__OFADD__(v216, 1)) {
                          goto LABEL_325;
                        }
                        if (v212 >= v211) {
                          break;
                        }
                        unint64_t v215 = *(void *)(v207 + 8 * v212);
                        ++v216;
                        if (v215) {
                          goto LABEL_222;
                        }
                      }
                    }
                  }
                }
              }
            }
            uint64_t v3 = v360;
          }
          break;
        }
        swift_release();
        swift_bridgeObjectRelease();
        unint64_t v19 = v338;
LABEL_267:
        v304  = &_mh_execute_header;
        if (!v351) {
          v304  = 0;
        }
        v305  = v191 | (v358 << 16) | (v353 << 24) | (unint64_t)v304 | (v359 << 40) | (v354 << 48) | (v352 << 56);
        *(void *)uint64_t v188 = v189 | (v368 << 16) | (v367 << 24) | (v366 << 32) | (v365 << 40) | (v364 << 48) | (v362 << 56);
        *(void *)(v188 + 8)  = v305;
        *(_DWORD *)(v188 + 16)  = v192;
        uint64_t v13 = v355;
        goto LABEL_6;
      case 0x28u:
        uint64_t v179 = v3 + *(int *)(type metadata accessor for NANPeer(0) + 72);
        sub_1000380B4(v179, &qword_100484D00);
        sub_1002A86AC((uint64_t)v357, v179, type metadata accessor for NANAttribute.CustomDeviceInformation);
        uint64_t v180 = type metadata accessor for NANAttribute.CustomDeviceInformation(0);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v180 - 8) + 56))(v179, 0, 1, v180);
        goto LABEL_6;
      case 0x29u:
        int v132 = v357[2];
        uint64_t v133 = *((void *)v357 + 1);
        unint64_t v134 = *((void *)v357 + 2);
        int v135 = *(unsigned __int16 *)v357;
        uint64_t v136 = (unsigned __int16 *)OUI.apple.unsafeMutableAddressor();
        if (static OUI.== infix(_:_:)(v135 | (v132 << 16), *v136 | (*((unsigned __int8 *)v136 + 2) << 16)))
        {
          uint64_t v137 = v3;
          type metadata accessor for BinaryDecoder();
          int v138 = (void *)type metadata accessor for NANAttribute.CustomDeviceInformation(0);
          sub_100013D44(v133, v134);
          sub_1002A82B0(&qword_100485088, (void (*)(uint64_t))type metadata accessor for NANAttribute.CustomDeviceInformation);
          uint64_t v139 = v329;
          static BinaryDecoder.decode<A>(_:data:)((uint64_t)v138, v133, v134, v138);
          if (v139)
          {
            swift_errorRelease();
            v329  = 0;
            uint64_t v140 = 1;
          }
          else
          {
            v329  = 0;
            uint64_t v140 = 0;
          }
          sub_10000C970(v133, v134);
          sub_10000C970(v133, v134);
          v302  = (uint64_t)v330;
          (*(void (**)(char *, uint64_t, uint64_t, void *))(*(v138 - 1) + 56))(v330, v140, 1, v138);
          v303  = type metadata accessor for NANPeer(0);
          uint64_t v3 = v137;
          sub_1002A9460(v302, v137 + *(int *)(v303 + 72));
        }
        else
        {
          sub_10000C970(v133, v134);
        }
        goto LABEL_6;
      default:
        sub_10029B8A8((uint64_t)v357, type metadata accessor for NANAttribute);
        goto LABEL_6;
    }
  }
  v318  = v341;
  swift_bridgeObjectRelease();
  sub_1002A4804((void (*)(void *@<X8>))v337, v318, v331);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for P2PTimer();
  v319  = v343;
  variable initialization expression of AWDLPeer.lastUpdated();
  v320  = type metadata accessor for NANPeer(0);
  (*v342)(v3 + *(int *)(v320 + 24), v319, v344);
  sub_100011E30((uint64_t)v335);
  return sub_100011E30((uint64_t)v333);
}

uint64_t sub_1002A4804(void (*a1)(void *a1@<X8>), uint64_t a2, uint64_t a3)
{
  v363  = type metadata accessor for NANAttribute(0);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v321 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v10 = (unsigned __int8 *)&v321 - v9;
  __chkstk_darwin();
  uint64_t v13 = (unsigned __int8 *)&v321 - v12;
  uint64_t v14 = (void *)*((void *)a1 + 2);
  if (!v14) {
    goto LABEL_23;
  }
  unint64_t v15 = *((void *)a1 + 4);
  if ((v15 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_287;
  }
  v362  = *(void *)(a2 + 16);
  if (v15 >= v362)
  {
LABEL_287:
    __break(1u);
LABEL_288:
    __break(1u);
LABEL_289:
    __break(1u);
LABEL_290:
    __break(1u);
LABEL_291:
    __break(1u);
LABEL_292:
    __break(1u);
LABEL_293:
    __break(1u);
LABEL_294:
    __break(1u);
LABEL_295:
    __break(1u);
LABEL_296:
    __break(1u);
LABEL_297:
    __break(1u);
LABEL_298:
    __break(1u);
LABEL_299:
    __break(1u);
LABEL_300:
    __break(1u);
LABEL_301:
    __break(1u);
LABEL_302:
    __break(1u);
LABEL_303:
    __break(1u);
LABEL_304:
    __break(1u);
LABEL_305:
    __break(1u);
LABEL_306:
    __break(1u);
LABEL_307:
    __break(1u);
LABEL_308:
    __break(1u);
LABEL_309:
    __break(1u);
LABEL_310:
    __break(1u);
LABEL_311:
    __break(1u);
    goto LABEL_312;
  }
  uint64_t v16 = a2 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  uint64_t v17 = *(void *)(v11 + 72);
  v361  = v16;
  v360  = v17;
  sub_1002A90E4(v16 + v17 * v15, (uint64_t)&v321 - v12, type metadata accessor for NANAttribute);
  if (swift_getEnumCaseMultiPayload() != 17)
  {
    sub_10029B8A8((uint64_t)v13, type metadata accessor for NANAttribute);
    goto LABEL_23;
  }
  v345  = (char *)a1 + 32;
  v344  = v8;
  v342  = a3;
  v358  = *v13;
  __int16 v18 = *((_WORD *)v13 + 1);
  v356  = *((void *)v13 + 1);
  swift_bridgeObjectRetain();
  unint64_t v19 = 0;
  v359  = a1;
  for (i = v14; i != v19; uint64_t v14 = i)
  {
    unint64_t v20 = *((void *)a1 + (void)v19 + 4);
    if (v20 >= v362)
    {
      __break(1u);
LABEL_284:
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_285;
    }
    sub_1002A90E4(v361 + v20 * v360, (uint64_t)v10, type metadata accessor for NANAttribute);
    if (swift_getEnumCaseMultiPayload() != 17)
    {
      sub_10029B8A8((uint64_t)v10, type metadata accessor for NANAttribute);
LABEL_21:
      swift_bridgeObjectRelease();
LABEL_22:
      swift_bridgeObjectRelease();
      goto LABEL_23;
    }
    if (!*(void *)(*((void *)v10 + 1) + 16)
      || (int v21 = *v10, v22 = *((_WORD *)v10 + 1), v20 != v15)
      && (int v23 = NANAttribute.Availability.Control.mapID.getter(*((_WORD *)v10 + 1)),
          v23 == NANAttribute.Availability.Control.mapID.getter(v18)))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_22;
    }
    uint64_t v13 = (unsigned __int8 *)NANAttribute.Availability.Control.scheduleChangeFlags.getter(v22);
    unint64_t v24 = NANAttribute.Availability.Control.scheduleChangeFlags.getter(v18);
    swift_bridgeObjectRelease();
    if ((unsigned __int16)v13 != (unsigned __int16)v24) {
      goto LABEL_21;
    }
    BOOL v25 = v21 == v358;
    a1  = v359;
    if (!v25) {
      goto LABEL_21;
    }
    unint64_t v19 = (void *)((char *)v19 + 1);
  }
  swift_bridgeObjectRelease();
  uint64_t v26 = (unsigned __int8 *)(v3 + *(int *)(type metadata accessor for NANPeer(0) + 64));
  if (!*((void *)v26 + 1))
  {
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  if (v358 == *v26) {
    goto LABEL_22;
  }
  int v29 = *(unsigned __int16 *)NANAttribute.Availability.Control.committedChange.unsafeMutableAddressor();
  int v30 = *(unsigned __int16 *)NANAttribute.Availability.Control.potentialChange.unsafeMutableAddressor();
  swift_bridgeObjectRelease();
  if (!v29)
  {
    if (v30) {
      goto LABEL_30;
    }
LABEL_23:
    uint64_t v27 = 0;
    a1  = 0;
    uint64_t v13 = 0;
    goto LABEL_24;
  }
  if ((v30 & ~v29) != 0) {
LABEL_30:
  }
    v29 |= v30;
  if ((v29 & v13) == 0) {
    goto LABEL_23;
  }
LABEL_32:
  v323  = (uint64_t *)v26;
  swift_bridgeObjectRetain();
  v336  = 0;
  v335  = 0;
  v334  = 0;
  v326  = 0;
  v328  = 0;
  v333  = 0;
  v329  = 0;
  v337  = 0;
  uint64_t v31 = 0;
  uint64_t v32 = &_swiftEmptyDictionarySingleton;
  v327  = &_swiftEmptyDictionarySingleton;
  unint64_t v33 = &_swiftEmptyDictionarySingleton;
  v338  = &_swiftEmptyDictionarySingleton;
  do
  {
    if (v31 == v14) {
      goto LABEL_293;
    }
    v343  = v33;
    unint64_t v34 = *(void *)&v345[8 * (void)v31];
    if (v34 >= v362) {
      goto LABEL_294;
    }
    uint64_t v35 = (uint64_t)v344;
    sub_1002A90E4(v361 + v34 * v360, (uint64_t)v344, type metadata accessor for NANAttribute);
    if (swift_getEnumCaseMultiPayload() == 17)
    {
      v325  = v31;
      uint64_t v36 = *(void *)(v35 + 8);
      v352  = NANAttribute.Availability.Control.mapID.getter(*(_WORD *)(v35 + 2));
      v339  = *(void *)(v36 + 16);
      if (v339)
      {
        unint64_t v37 = 0;
        v341  = v36 + 32;
        v340  = v36;
        do
        {
          if (v37 >= *(void *)(v36 + 16)) {
            goto LABEL_290;
          }
          v347  = v24;
          v349  = v32;
          v346  = v37;
          unint64_t v44 = (unsigned __int16 *)(v341 + 56 * v37);
          uint64_t v45 = *((void *)v44 + 1);
          uint64_t v46 = *((void *)v44 + 2);
          unint64_t v47 = *((void *)v44 + 3);
          v348  = *((unsigned __int8 *)v44 + 48);
          uint64_t v48 = *((void *)v44 + 5);
          unsigned int v49 = *v44;
          sub_10006E968(v45, v46, v47);
          uint64_t v50 = v48;
          swift_bridgeObjectRetain();
          int v51 = (unsigned __int16)(*(_WORD *)NANAvailabilityEntry.Control.committed.unsafeMutableAddressor() & ~(_WORD)v49);
          int v52 = *(unsigned __int16 *)NANAvailabilityEntry.Control.potential.unsafeMutableAddressor();
          int v53 = v52 & v49;
          int v54 = *(unsigned __int16 *)NANAvailabilityEntry.Control.conditional.unsafeMutableAddressor();
          int v55 = v54 & v49;
          v353  = v45;
          v354  = v46;
          v355  = v47;
          sub_10006E968(v45, v46, v47);
          v351  = NANAvailabilityEntry.Control.usagePreference.getter(v49);
          v350  = NANAvailabilityEntry.Control.rxNSS.getter(v49);
          double v56 = NANAvailabilityEntry.Control.utilization.getter(v49);
          if (v51)
          {
            if (v53 != v52)
            {
              uint64_t v32 = v349;
              if (v55 != v54) {
                goto LABEL_278;
              }
              if (!v348)
              {
LABEL_279:
                swift_bridgeObjectRetain();
LABEL_280:
                v317  = v353;
                v318  = v354;
                v319  = v355;
                sub_10006E0D8(v353, v354, v355);
                swift_bridgeObjectRelease();
                sub_10006E0D8(v317, v318, v319);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
LABEL_281:
                swift_bridgeObjectRelease();
                sub_100011E30(v336);
                sub_100011E30((uint64_t)v335);
                sub_100011E30((uint64_t)v334);
                sub_100011E30(v326);
                sub_100011E30(v328);
                a1  = v329;
                uint64_t v13 = v337;
LABEL_282:
                uint64_t v27 = v333;
LABEL_24:
                sub_100011E30((uint64_t)v27);
                sub_100011E30((uint64_t)a1);
                return sub_100011E30((uint64_t)v13);
              }
              if (*(void *)(v50 + 16) != 1
                || (unint64_t v105 = v330 & 0xFF000000FF00 | *(unsigned __int8 *)(v50 + 32) | ((unint64_t)*(unsigned __int16 *)(v50 + 34) << 16) | ((unint64_t)*(unsigned __int8 *)(v50 + 36) << 32) | ((unint64_t)*(unsigned __int16 *)(v50 + 38) << 48),
                    unint64_t v106 = NANBitmap.Channel.channel.getter(v105),
                    (v106 & 0xFF00000000) == 0x300000000))
              {
LABEL_278:
                v314  = v353;
                v315  = v354;
                v316  = v355;
                sub_10006E0D8(v353, v354, v355);
                swift_bridgeObjectRelease();
                sub_10006E0D8(v314, v315, v316);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_281;
              }
              unint64_t v107 = v106;
              sub_10006E968(v353, v354, v355);
              sub_100011E30((uint64_t)v337);
              uint64_t v108 = v338;
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v367  = v108;
              unint64_t v111 = sub_10039F748(v352);
              uint64_t v112 = v108[2];
              BOOL v113 = (v110 & 1) == 0;
              uint64_t v114 = v112 + v113;
              if (__OFADD__(v112, v113)) {
                goto LABEL_297;
              }
              char v115 = v110;
              BOOL v116 = v108[3] < v114;
              unint64_t v24 = v347;
              v330  = v105;
              if (v116)
              {
                sub_1002918F4(v114, isUniquelyReferenced_nonNull_native);
                unint64_t v117 = sub_10039F748(v352);
                if ((v115 & 1) != (v118 & 1)) {
                  goto LABEL_314;
                }
                unint64_t v111 = v117;
              }
              else if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                sub_1003A2CAC();
              }
              char v128 = v367;
              swift_bridgeObjectRelease();
              if (v115)
              {
                uint64_t v129 = swift_bridgeObjectRetain();
              }
              else
              {
                v128[(v111 >> 6) + 8] |= 1 << v111;
                *(unsigned char *)(v128[6] + v111)  = v352;
                *(void *)(v128[7] + 8 * v111)  = _swiftEmptyArrayStorage;
                uint64_t v168 = v128[2];
                uint64_t v169 = v168 + 1;
                BOOL v170 = __OFADD__(v168, 1);
                swift_bridgeObjectRetain();
                if (v170) {
                  goto LABEL_303;
                }
                v128[2]  = v169;
                uint64_t v129 = (uint64_t)v128;
              }
              uint64_t v171 = *(void *)(v129 + 56);
              v338  = (void *)v129;
              swift_bridgeObjectRelease();
              unint64_t v172 = *(void **)(v171 + 8 * v111);
              char v173 = swift_isUniquelyReferenced_nonNull_native();
              *(void *)(v171 + 8 * v111)  = v172;
              if ((v173 & 1) == 0)
              {
                unint64_t v172 = sub_100330294(0, v172[2] + 1, 1, v172);
                *(void *)(v171 + 8 * v111)  = v172;
              }
              unint64_t v175 = v172[2];
              unint64_t v174 = v172[3];
              if (v175 >= v174 >> 1)
              {
                unint64_t v172 = sub_100330294((void *)(v174 > 1), v175 + 1, 1, v172);
                *(void *)(v171 + 8 * v111)  = v172;
              }
              unint64_t v38 = v346;
              v172[2]  = v175 + 1;
              char v176 = &v172[7 * v175];
              *((_DWORD *)v176 + 8)  = v107;
              *((unsigned char *)v176 + 36)  = BYTE4(v107);
              *((unsigned char *)v176 + 37)  = BYTE5(v107);
              uint64_t v177 = v353;
              uint64_t v178 = v354;
              v176[5]  = v353;
              v176[6]  = v178;
              unint64_t v179 = v355;
              v176[7]  = v355;
              *((unsigned char *)v176 + 64)  = v351;
              v176[9]  = v350;
              *((double *)v176 + 10)  = v56;
              sub_10006E0D8(v177, v178, v179);
              sub_10006E0D8(v177, v178, v179);
              swift_bridgeObjectRelease();
              uint64_t v43 = &v366;
              goto LABEL_39;
            }
            uint64_t v32 = v349;
            uint64_t v74 = v50;
            if (v55 != v54)
            {
              uint64_t v119 = *(void *)(v50 + 16);
              unint64_t v24 = v347;
              if (v348)
              {
                if (v119)
                {
                  swift_bridgeObjectRetain();
                  uint64_t v120 = v74 + 40;
                  int v121 = _swiftEmptyArrayStorage;
                  unint64_t v122 = v322;
                  do
                  {
                    unint64_t v122 = v122 & 0xFF000000FF00 | *(unsigned __int8 *)(v120 - 8) | ((unint64_t)*(unsigned __int16 *)(v120 - 6) << 16) | ((unint64_t)*(unsigned __int8 *)(v120 - 4) << 32) | ((unint64_t)*(unsigned __int16 *)(v120 - 2) << 48);
                    unint64_t v124 = NANBitmap.Channel.channel.getter(v122);
                    if ((v124 & 0xFF00000000) != 0x300000000)
                    {
                      unint64_t v125 = v124;
                      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                        int v121 = sub_1000C5C4C(0, v121[2] + 1, 1, v121);
                      }
                      unint64_t v127 = v121[2];
                      unint64_t v126 = v121[3];
                      if (v127 >= v126 >> 1) {
                        int v121 = sub_1000C5C4C((void *)(v126 > 1), v127 + 1, 1, v121);
                      }
                      v121[2]  = v127 + 1;
                      unint64_t v123 = &v121[v127];
                      *((_DWORD *)v123 + 8)  = v125;
                      *((unsigned char *)v123 + 36)  = BYTE4(v125);
                      *((unsigned char *)v123 + 37)  = BYTE5(v125);
                    }
                    v120 += 10;
                    --v119;
                  }
                  while (v119);
                  v322  = v122;
                  swift_bridgeObjectRelease();
                }
                else
                {
                  int v121 = _swiftEmptyArrayStorage;
                }
                sub_10006E968(v353, v354, v355);
                sub_100011E30(v328);
                v252  = v343;
                v253  = swift_isUniquelyReferenced_nonNull_native();
                v367  = v252;
                v255  = sub_10039F748(v352);
                v256  = v252[2];
                v257  = (v254 & 1) == 0;
                v258  = v256 + v257;
                if (__OFADD__(v256, v257)) {
                  goto LABEL_306;
                }
                v259  = v254;
                if (v252[3] >= v258)
                {
                  if ((v253 & 1) == 0) {
                    sub_1003A2CC4();
                  }
                }
                else
                {
                  sub_10029190C(v258, v253);
                  v260  = sub_10039F748(v352);
                  if ((v259 & 1) != (v261 & 1)) {
                    goto LABEL_314;
                  }
                  v255  = v260;
                }
                v262  = v367;
                swift_bridgeObjectRelease();
                if (v259)
                {
                  v263  = swift_bridgeObjectRetain();
                }
                else
                {
                  v262[(v255 >> 6) + 8] |= 1 << v255;
                  *(unsigned char *)(v262[6] + v255)  = v352;
                  *(void *)(v262[7] + 8 * v255)  = _swiftEmptyArrayStorage;
                  v264  = v262[2];
                  v265  = v264 + 1;
                  v266  = __OFADD__(v264, 1);
                  swift_bridgeObjectRetain();
                  if (v266) {
                    goto LABEL_310;
                  }
                  v262[2]  = v265;
                  v263  = (uint64_t)v262;
                }
                v267  = *(void *)(v263 + 56);
                v343  = (void *)v263;
                swift_bridgeObjectRelease();
                v268  = *(void **)(v267 + 8 * v255);
                v269  = swift_isUniquelyReferenced_nonNull_native();
                *(void *)(v267 + 8 * v255)  = v268;
                if ((v269 & 1) == 0)
                {
                  v268  = sub_1003302BC(0, v268[2] + 1, 1, v268);
                  *(void *)(v267 + 8 * v255)  = v268;
                }
                v271  = v268[2];
                v270  = v268[3];
                if (v271 >= v270 >> 1)
                {
                  v268  = sub_1003302BC((void *)(v270 > 1), v271 + 1, 1, v268);
                  *(void *)(v267 + 8 * v255)  = v268;
                }
                unint64_t v38 = v346;
                v268[2]  = v271 + 1;
                v272  = &v268[7 * v271];
                v273  = v353;
                v272[4]  = v121;
                v272[5]  = v273;
                v274  = v354;
                v275  = v355;
                v272[6]  = v354;
                v272[7]  = v275;
                *((unsigned char *)v272 + 64)  = v351;
                v272[9]  = v350;
                *((double *)v272 + 10)  = v56;
                sub_10006E0D8(v273, v274, v275);
                sub_10006E0D8(v273, v274, v275);
                swift_bridgeObjectRelease();
                uint64_t v43 = (char *)&v361;
LABEL_39:
                *((void *)v43 - 32)  = sub_100074C2C;
                uint64_t v36 = v340;
                goto LABEL_40;
              }
              if (!v119)
              {
                uint64_t v194 = _swiftEmptyArrayStorage;
LABEL_231:
                sub_10006E968(v353, v354, v355);
                sub_100011E30(v326);
                v276  = v327;
                v277  = swift_isUniquelyReferenced_nonNull_native();
                v367  = v276;
                v279  = sub_10039F748(v352);
                v280  = v276[2];
                v281  = (v278 & 1) == 0;
                v282  = v280 + v281;
                if (__OFADD__(v280, v281)) {
                  goto LABEL_308;
                }
                v283  = v278;
                if (v276[3] >= v282)
                {
                  if ((v277 & 1) == 0) {
                    sub_1003A2CB8();
                  }
                }
                else
                {
                  sub_100291900(v282, v277);
                  v284  = sub_10039F748(v352);
                  if ((v283 & 1) != (v285 & 1)) {
                    goto LABEL_314;
                  }
                  v279  = v284;
                }
                v286  = v367;
                swift_bridgeObjectRelease();
                if (v283)
                {
                  swift_bridgeObjectRetain();
                }
                else
                {
                  v286[(v279 >> 6) + 8] |= 1 << v279;
                  *(unsigned char *)(v286[6] + v279)  = v352;
                  *(void *)(v286[7] + 8 * v279)  = _swiftEmptyArrayStorage;
                  v287  = v286[2];
                  v288  = v287 + 1;
                  v289  = __OFADD__(v287, 1);
                  swift_bridgeObjectRetain();
                  if (v289) {
                    goto LABEL_311;
                  }
                  v286[2]  = v288;
                }
                v290  = v286[7];
                v327  = v286;
                swift_bridgeObjectRelease();
                v291  = *(void **)(v290 + 8 * v279);
                v292  = swift_isUniquelyReferenced_nonNull_native();
                *(void *)(v290 + 8 * v279)  = v291;
                if ((v292 & 1) == 0)
                {
                  v291  = sub_1003302A8(0, v291[2] + 1, 1, v291);
                  *(void *)(v290 + 8 * v279)  = v291;
                }
                v294  = v291[2];
                v293  = v291[3];
                if (v294 >= v293 >> 1)
                {
                  v291  = sub_1003302A8((void *)(v293 > 1), v294 + 1, 1, v291);
                  *(void *)(v290 + 8 * v279)  = v291;
                }
                unint64_t v38 = v346;
                v291[2]  = v294 + 1;
                v295  = &v291[7 * v294];
                v296  = v353;
                v295[4]  = v194;
                v295[5]  = v296;
                v297  = v354;
                v298  = v355;
                v295[6]  = v354;
                v295[7]  = v298;
                *((unsigned char *)v295 + 64)  = v351;
                v295[9]  = v350;
                *((double *)v295 + 10)  = v56;
                sub_10006E0D8(v296, v297, v298);
                sub_10006E0D8(v296, v297, v298);
                swift_bridgeObjectRelease();
                uint64_t v43 = (char *)&v359;
                goto LABEL_39;
              }
              swift_bridgeObjectRetain();
              uint64_t v193 = 0;
              uint64_t v194 = _swiftEmptyArrayStorage;
              while (2)
              {
                uint64_t v195 = NANBitmap.Band.bands.getter(*(unsigned __int8 *)(v74 + v193 + 32));
                int64_t v196 = *(void *)(v195 + 16);
                int64_t v197 = v194[2];
                int64_t v198 = v197 + v196;
                if (__OFADD__(v197, v196)) {
                  goto LABEL_288;
                }
                uint64_t v199 = v195;
                uint64_t v200 = (void *)swift_isUniquelyReferenced_nonNull_native();
                if (v200 && v198 <= v194[3] >> 1)
                {
                  if (!*(void *)(v199 + 16))
                  {
LABEL_153:
                    if (v196) {
                      goto LABEL_289;
                    }
                    goto LABEL_154;
                  }
                }
                else
                {
                  if (v197 <= v198) {
                    int64_t v201 = v197 + v196;
                  }
                  else {
                    int64_t v201 = v197;
                  }
                  uint64_t v194 = sub_1000C65C8(v200, v201, 1, v194);
                  if (!*(void *)(v199 + 16)) {
                    goto LABEL_153;
                  }
                }
                uint64_t v202 = v194[2];
                if ((v194[3] >> 1) - v202 < v196) {
                  goto LABEL_291;
                }
                uint64_t v203 = (char *)v194 + v202 + 32;
                if (v199 + 32 < (unint64_t)&v203[v196] && (unint64_t)v203 < v199 + 32 + v196) {
                  goto LABEL_313;
                }
                memcpy(v203, (const void *)(v199 + 32), v196);
                if (v196)
                {
                  uint64_t v205 = v194[2];
                  BOOL v206 = __OFADD__(v205, v196);
                  uint64_t v207 = v205 + v196;
                  if (v206) {
                    goto LABEL_292;
                  }
                  v194[2]  = v207;
                }
LABEL_154:
                ++v193;
                swift_bridgeObjectRelease();
                if (v119 == v193)
                {
                  swift_bridgeObjectRelease();
                  uint64_t v32 = v349;
                  goto LABEL_231;
                }
                continue;
              }
            }
            unint64_t v24 = v347;
            if (!v348) {
              goto LABEL_279;
            }
            v367  = (void *)v74;
            if (!*(void *)(v74 + 16)) {
              goto LABEL_279;
            }
            uint64_t v75 = *(unsigned __int8 *)(v74 + 32);
            uint64_t v76 = *(unsigned __int16 *)(v74 + 34);
            uint64_t v77 = *(unsigned __int8 *)(v74 + 36);
            uint64_t v78 = *(unsigned __int16 *)(v74 + 38);
            swift_bridgeObjectRetain();
            unint64_t v79 = v324 & 0xFF000000FF00 | v75 | (v76 << 16) | (v77 << 32) | (v78 << 48);
            unint64_t v80 = NANBitmap.Channel.channel.getter(v79);
            if ((v80 & 0xFF00000000) == 0x300000000) {
              goto LABEL_280;
            }
            unint64_t v81 = v80;
            sub_10006E968(v353, v354, v355);
            sub_100011E30((uint64_t)v333);
            uint64_t v82 = v338;
            char v83 = swift_isUniquelyReferenced_nonNull_native();
            v364  = v82;
            unint64_t v85 = sub_10039F748(v352);
            uint64_t v86 = v82[2];
            BOOL v87 = (v84 & 1) == 0;
            uint64_t v88 = v86 + v87;
            if (__OFADD__(v86, v87)) {
              goto LABEL_300;
            }
            char v89 = v84;
            if (v82[3] >= v88)
            {
              if ((v83 & 1) == 0) {
                sub_1003A2CAC();
              }
            }
            else
            {
              sub_1002918F4(v88, v83);
              unint64_t v90 = sub_10039F748(v352);
              if ((v89 & 1) != (v91 & 1)) {
                goto LABEL_314;
              }
              unint64_t v85 = v90;
            }
            uint64_t v208 = v364;
            swift_bridgeObjectRelease();
            if (v89)
            {
              uint64_t v209 = swift_bridgeObjectRetain();
            }
            else
            {
              v208[(v85 >> 6) + 8] |= 1 << v85;
              *(unsigned char *)(v208[6] + v85)  = v352;
              *(void *)(v208[7] + 8 * v85)  = _swiftEmptyArrayStorage;
              uint64_t v210 = v208[2];
              uint64_t v211 = v210 + 1;
              BOOL v212 = __OFADD__(v210, 1);
              swift_bridgeObjectRetain();
              if (v212) {
                goto LABEL_309;
              }
              v208[2]  = v211;
              uint64_t v209 = (uint64_t)v208;
            }
            v213  = *(void *)(v209 + 56);
            v338  = (void *)v209;
            swift_bridgeObjectRelease();
            v214  = *(void **)(v213 + 8 * v85);
            char v215 = swift_isUniquelyReferenced_nonNull_native();
            *(void *)(v213 + 8 * v85)  = v214;
            v324  = v79;
            if ((v215 & 1) == 0)
            {
              v214  = sub_100330294(0, v214[2] + 1, 1, v214);
              *(void *)(v213 + 8 * v85)  = v214;
            }
            unint64_t v217 = v214[2];
            unint64_t v216 = v214[3];
            if (v217 >= v216 >> 1)
            {
              v214  = sub_100330294((void *)(v216 > 1), v217 + 1, 1, v214);
              *(void *)(v213 + 8 * v85)  = v214;
            }
            v214[2]  = v217 + 1;
            long long v218 = &v214[7 * v217];
            *((_DWORD *)v218 + 8)  = v81;
            *((unsigned char *)v218 + 36)  = BYTE4(v81);
            *((unsigned char *)v218 + 37)  = BYTE5(v81);
            uint64_t v219 = v354;
            v218[5]  = v353;
            v218[6]  = v219;
            v218[7]  = v355;
            *((unsigned char *)v218 + 64)  = v351;
            v218[9]  = v350;
            *((double *)v218 + 10)  = v56;
            if (!v367[2]) {
              goto LABEL_301;
            }
            sub_1002D7EB4(0, 1);
            uint64_t v220 = v367;
            uint64_t v221 = v367[2];
            if (v221)
            {
              swift_bridgeObjectRetain();
              v222  = v220 + 5;
              v223  = _swiftEmptyArrayStorage;
              do
              {
                v356  = v356 & 0xFF000000FF00 | *((unsigned __int8 *)v222 - 8) | ((unint64_t)*((unsigned __int16 *)v222 - 3) << 16) | ((unint64_t)*((unsigned __int8 *)v222 - 4) << 32) | ((unint64_t)*((unsigned __int16 *)v222 - 1) << 48);
                v225  = NANBitmap.Channel.channel.getter(v356);
                if ((v225 & 0xFF00000000) != 0x300000000)
                {
                  v226  = v225;
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    v223  = sub_1000C5C4C(0, v223[2] + 1, 1, v223);
                  }
                  unint64_t v228 = v223[2];
                  unint64_t v227 = v223[3];
                  if (v228 >= v227 >> 1) {
                    v223  = sub_1000C5C4C((void *)(v227 > 1), v228 + 1, 1, v223);
                  }
                  v223[2]  = v228 + 1;
                  v224  = &v223[v228];
                  *((_DWORD *)v224 + 8)  = v226;
                  *((unsigned char *)v224 + 36)  = BYTE4(v226);
                  *((unsigned char *)v224 + 37)  = BYTE5(v226);
                }
                v222  = (void *)((char *)v222 + 10);
                --v221;
              }
              while (v221);
              swift_bridgeObjectRelease_n();
              sub_10006E968(v353, v354, v355);
              sub_100011E30((uint64_t)v329);
              BOOL v229 = v343;
              char v230 = swift_isUniquelyReferenced_nonNull_native();
              v364  = v229;
              unint64_t v232 = sub_10039F748(v352);
              uint64_t v233 = v229[2];
              BOOL v234 = (v231 & 1) == 0;
              uint64_t v235 = v233 + v234;
              if (__OFADD__(v233, v234)) {
                goto LABEL_305;
              }
              v236  = v231;
              if (v229[3] >= v235)
              {
                if ((v230 & 1) == 0) {
                  sub_1003A2CC4();
                }
              }
              else
              {
                sub_10029190C(v235, v230);
                v237  = sub_10039F748(v352);
                if ((v236 & 1) != (v238 & 1)) {
                  goto LABEL_314;
                }
                unint64_t v232 = v237;
              }
              v242  = v364;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              if ((v236 & 1) == 0) {
                sub_100295E98(v232, v352, (uint64_t)_swiftEmptyArrayStorage, v242);
              }
              v243  = v242[7];
              v343  = v242;
              swift_bridgeObjectRelease();
              v244  = (void **)(v243 + 8 * v232);
              v245  = *v244;
              v246  = swift_isUniquelyReferenced_nonNull_native();
              *v244  = v245;
              if ((v246 & 1) == 0)
              {
                v245  = sub_1003302BC(0, v245[2] + 1, 1, v245);
                *v244  = v245;
              }
              unint64_t v38 = v346;
              v372[0]  = v223;
              v247  = v353;
              v248  = v354;
              v372[1]  = v353;
              v372[2]  = v354;
              v249  = v355;
              v372[3]  = v355;
              v373  = v351;
              v374  = v350;
              v375  = v56;
              v250  = (void *)v245[2];
              sub_1002A8794(v250);
              sub_100353504((uint64_t)v250, (uint64_t)v372);
              NANBitmap.Channel.operatingClass.getter(v251);
              sub_10006E0D8(v247, v248, v249);
              sub_10006E0D8(v247, v248, v249);
              swift_bridgeObjectRelease();
              v329  = sub_100074C2C;
              uint64_t v36 = v340;
            }
            else
            {
              swift_bridgeObjectRelease();
              v239  = v353;
              v240  = v354;
              v241  = v355;
              sub_10006E0D8(v353, v354, v355);
              sub_10006E0D8(v239, v240, v241);
              swift_bridgeObjectRelease();
              uint64_t v36 = v340;
              unint64_t v38 = v346;
            }
            v333  = sub_100074C2C;
          }
          else
          {
            if (v53 != v52)
            {
              uint64_t v92 = v349;
              if (v55 == v54) {
                goto LABEL_278;
              }
              if (!v348) {
                goto LABEL_279;
              }
              if (*(void *)(v50 + 16) != 1) {
                goto LABEL_278;
              }
              unint64_t v93 = v332 & 0xFF000000FF00 | *(unsigned __int8 *)(v50 + 32) | ((unint64_t)*(unsigned __int16 *)(v50 + 34) << 16) | ((unint64_t)*(unsigned __int8 *)(v50 + 36) << 32) | ((unint64_t)*(unsigned __int16 *)(v50 + 38) << 48);
              unint64_t v94 = NANBitmap.Channel.channel.getter(v93);
              if ((v94 & 0xFF00000000) == 0x300000000) {
                goto LABEL_278;
              }
              unint64_t v95 = v94;
              sub_10006E968(v353, v354, v355);
              sub_100011E30(v336);
              char v96 = swift_isUniquelyReferenced_nonNull_native();
              v367  = v92;
              unint64_t v98 = sub_10039F748(v352);
              uint64_t v99 = v92[2];
              BOOL v100 = (v97 & 1) == 0;
              uint64_t v101 = v99 + v100;
              if (__OFADD__(v99, v100)) {
                goto LABEL_296;
              }
              char v102 = v97;
              unint64_t v24 = v347;
              if (v92[3] >= v101)
              {
                if ((v96 & 1) == 0) {
                  sub_1003A2CD0();
                }
              }
              else
              {
                sub_100291918(v101, v96);
                unint64_t v103 = sub_10039F748(v352);
                if ((v102 & 1) != (v104 & 1)) {
                  goto LABEL_314;
                }
                unint64_t v98 = v103;
              }
              uint64_t v32 = v367;
              swift_bridgeObjectRelease();
              v332  = v93;
              if (v102)
              {
                swift_bridgeObjectRetain();
              }
              else
              {
                v32[(v98 >> 6) + 8] |= 1 << v98;
                *(unsigned char *)(v32[6] + v98)  = v352;
                *(void *)(v32[7] + 8 * v98)  = _swiftEmptyArrayStorage;
                uint64_t v160 = v32[2];
                uint64_t v161 = v160 + 1;
                BOOL v162 = __OFADD__(v160, 1);
                swift_bridgeObjectRetain();
                if (v162) {
                  goto LABEL_302;
                }
                uint64_t v32[2] = v161;
              }
              uint64_t v163 = v32[7];
              swift_bridgeObjectRelease();
              long long v164 = *(void **)(v163 + 8 * v98);
              char v165 = swift_isUniquelyReferenced_nonNull_native();
              *(void *)(v163 + 8 * v98)  = v164;
              if ((v165 & 1) == 0)
              {
                long long v164 = sub_100330408(0, v164[2] + 1, 1, v164);
                *(void *)(v163 + 8 * v98)  = v164;
              }
              unint64_t v167 = v164[2];
              unint64_t v166 = v164[3];
              if (v167 >= v166 >> 1)
              {
                long long v164 = sub_100330408((void *)(v166 > 1), v167 + 1, 1, v164);
                *(void *)(v163 + 8 * v98)  = v164;
              }
              unint64_t v38 = v346;
              v164[2]  = v167 + 1;
              uint64_t v39 = &v164[7 * v167];
              *((_DWORD *)v39 + 8)  = v95;
              *((unsigned char *)v39 + 36)  = BYTE4(v95);
              *((unsigned char *)v39 + 37)  = BYTE5(v95);
              uint64_t v40 = v353;
              uint64_t v41 = v354;
              v39[5]  = v353;
              v39[6]  = v41;
              unint64_t v42 = v355;
              v39[7]  = v355;
              *((unsigned char *)v39 + 64)  = v351;
              v39[9]  = v350;
              *((double *)v39 + 10)  = v56;
              sub_10006E0D8(v40, v41, v42);
              sub_10006E0D8(v40, v41, v42);
              swift_bridgeObjectRelease();
              uint64_t v43 = &v365;
              goto LABEL_39;
            }
            BOOL v57 = v349;
            if (v55 == v54) {
              goto LABEL_278;
            }
            if (!v348) {
              goto LABEL_279;
            }
            v367  = (void *)v50;
            if (!*(void *)(v50 + 16)) {
              goto LABEL_279;
            }
            uint64_t v58 = *(unsigned __int8 *)(v50 + 32);
            uint64_t v59 = *(unsigned __int16 *)(v50 + 34);
            uint64_t v60 = *(unsigned __int8 *)(v50 + 36);
            uint64_t v61 = *(unsigned __int16 *)(v50 + 38);
            swift_bridgeObjectRetain();
            unint64_t v62 = v331 & 0xFF000000FF00 | v58 | (v59 << 16) | (v60 << 32) | (v61 << 48);
            unint64_t v63 = NANBitmap.Channel.channel.getter(v62);
            if ((v63 & 0xFF00000000) == 0x300000000) {
              goto LABEL_280;
            }
            unint64_t v64 = v63;
            sub_10006E968(v353, v354, v355);
            sub_100011E30((uint64_t)v335);
            char v65 = swift_isUniquelyReferenced_nonNull_native();
            v364  = v57;
            unint64_t v67 = sub_10039F748(v352);
            uint64_t v68 = v57[2];
            BOOL v69 = (v66 & 1) == 0;
            uint64_t v70 = v68 + v69;
            if (__OFADD__(v68, v69)) {
              goto LABEL_295;
            }
            char v71 = v66;
            unint64_t v24 = v347;
            if (v57[3] >= v70)
            {
              if ((v65 & 1) == 0) {
                sub_1003A2CD0();
              }
            }
            else
            {
              sub_100291918(v70, v65);
              unint64_t v72 = sub_10039F748(v352);
              if ((v71 & 1) != (v73 & 1)) {
                goto LABEL_314;
              }
              unint64_t v67 = v72;
            }
            uint64_t v32 = v364;
            swift_bridgeObjectRelease();
            v331  = v62;
            if (v71)
            {
              swift_bridgeObjectRetain();
            }
            else
            {
              v32[(v67 >> 6) + 8] |= 1 << v67;
              *(unsigned char *)(v32[6] + v67)  = v352;
              *(void *)(v32[7] + 8 * v67)  = _swiftEmptyArrayStorage;
              uint64_t v130 = v32[2];
              uint64_t v131 = v130 + 1;
              BOOL v132 = __OFADD__(v130, 1);
              swift_bridgeObjectRetain();
              if (v132) {
                goto LABEL_304;
              }
              uint64_t v32[2] = v131;
            }
            uint64_t v133 = v32[7];
            swift_bridgeObjectRelease();
            unint64_t v134 = *(void **)(v133 + 8 * v67);
            char v135 = swift_isUniquelyReferenced_nonNull_native();
            *(void *)(v133 + 8 * v67)  = v134;
            if ((v135 & 1) == 0)
            {
              unint64_t v134 = sub_100330408(0, v134[2] + 1, 1, v134);
              *(void *)(v133 + 8 * v67)  = v134;
            }
            unint64_t v137 = v134[2];
            unint64_t v136 = v134[3];
            if (v137 >= v136 >> 1)
            {
              unint64_t v134 = sub_100330408((void *)(v136 > 1), v137 + 1, 1, v134);
              *(void *)(v133 + 8 * v67)  = v134;
            }
            v134[2]  = v137 + 1;
            int v138 = &v134[7 * v137];
            *((_DWORD *)v138 + 8)  = v64;
            *((unsigned char *)v138 + 36)  = BYTE4(v64);
            *((unsigned char *)v138 + 37)  = BYTE5(v64);
            uint64_t v139 = v354;
            v138[5]  = v353;
            v138[6]  = v139;
            v138[7]  = v355;
            *((unsigned char *)v138 + 64)  = v351;
            v138[9]  = v350;
            *((double *)v138 + 10)  = v56;
            if (!v367[2]) {
              goto LABEL_298;
            }
            sub_1002D7EB4(0, 1);
            uint64_t v140 = v367;
            uint64_t v141 = v367[2];
            if (v141)
            {
              v364  = _swiftEmptyArrayStorage;
              swift_bridgeObjectRetain();
              uint64_t v142 = v140 + 5;
              do
              {
                unint64_t v24 = v24 & 0xFF000000FF00 | *((unsigned __int8 *)v142 - 8) | ((unint64_t)*((unsigned __int16 *)v142 - 3) << 16) | ((unint64_t)*((unsigned __int8 *)v142 - 4) << 32) | ((unint64_t)*((unsigned __int16 *)v142 - 1) << 48);
                unint64_t v144 = NANBitmap.Channel.channel.getter(v24);
                if ((v144 & 0xFF00000000) != 0x300000000)
                {
                  unint64_t v145 = v144;
                  int v146 = v364;
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  {
                    int v146 = sub_1000C5C4C(0, v146[2] + 1, 1, v146);
                    v364  = v146;
                  }
                  unint64_t v148 = v146[2];
                  unint64_t v147 = v146[3];
                  if (v148 >= v147 >> 1) {
                    v364  = sub_1000C5C4C((void *)(v147 > 1), v148 + 1, 1, v146);
                  }
                  uint64_t v143 = sub_1003534DC(v148, v145 & 0xFFFFFFFFFFFFLL);
                  NANBitmap.Channel.operatingClass.getter(v143);
                }
                uint64_t v142 = (void *)((char *)v142 + 10);
                --v141;
              }
              while (v141);
              swift_bridgeObjectRelease_n();
              uint64_t v149 = v364;
              sub_10006E968(v353, v354, v355);
              sub_100011E30((uint64_t)v334);
              unint64_t v150 = v343;
              char v151 = swift_isUniquelyReferenced_nonNull_native();
              v364  = v150;
              unint64_t v153 = sub_10039F748(v352);
              uint64_t v154 = v150[2];
              BOOL v155 = (v152 & 1) == 0;
              uint64_t v156 = v154 + v155;
              if (__OFADD__(v154, v155)) {
                goto LABEL_299;
              }
              char v157 = v152;
              if (v150[3] >= v156)
              {
                if ((v151 & 1) == 0) {
                  sub_1003A2CC4();
                }
              }
              else
              {
                sub_10029190C(v156, v151);
                unint64_t v158 = sub_10039F748(v352);
                if ((v157 & 1) != (v159 & 1)) {
                  goto LABEL_314;
                }
                unint64_t v153 = v158;
              }
              uint64_t v183 = v364;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              if ((v157 & 1) == 0) {
                sub_100295E98(v153, v352, (uint64_t)_swiftEmptyArrayStorage, v183);
              }
              uint64_t v184 = v183[7];
              v343  = v183;
              swift_bridgeObjectRelease();
              int v185 = (void **)(v184 + 8 * v153);
              uint64_t v186 = *v185;
              char v187 = swift_isUniquelyReferenced_nonNull_native();
              *int v185 = v186;
              if ((v187 & 1) == 0)
              {
                uint64_t v186 = sub_1003302BC(0, v186[2] + 1, 1, v186);
                *int v185 = v186;
              }
              unint64_t v38 = v346;
              uint64_t v188 = v353;
              v368[0]  = v149;
              v368[1]  = v353;
              uint64_t v189 = v354;
              unint64_t v190 = v355;
              v368[2]  = v354;
              v368[3]  = v355;
              v369  = v351;
              v370  = v350;
              v371  = v56;
              uint64_t v191 = (void *)v186[2];
              sub_1002A8794(v191);
              sub_100353504((uint64_t)v191, (uint64_t)v368);
              NANBitmap.Channel.operatingClass.getter(v192);
              sub_10006E0D8(v188, v189, v190);
              sub_10006E0D8(v188, v189, v190);
              swift_bridgeObjectRelease();
              v334  = sub_100074C2C;
              uint64_t v36 = v340;
            }
            else
            {
              swift_bridgeObjectRelease();
              uint64_t v180 = v353;
              uint64_t v181 = v354;
              unint64_t v182 = v355;
              sub_10006E0D8(v353, v354, v355);
              sub_10006E0D8(v180, v181, v182);
              swift_bridgeObjectRelease();
              uint64_t v36 = v340;
              unint64_t v38 = v346;
            }
            v335  = sub_100074C2C;
          }
LABEL_40:
          unint64_t v37 = v38 + 1;
        }
        while (v37 != v339);
      }
      swift_bridgeObjectRelease();
      uint64_t v31 = v325;
    }
    else
    {
      sub_10029B8A8(v35, type metadata accessor for NANAttribute);
    }
    uint64_t v31 = (void *)((char *)v31 + 1);
    uint64_t v14 = i;
    unint64_t v33 = v343;
  }
  while (v31 != i);
  uint64_t v14 = v32;
  swift_bridgeObjectRelease();
  v299  = v342;
  a1  = v329;
  uint64_t v13 = v337;
  unint64_t v20 = (unint64_t)v327;
  if (!*(void *)(v342 + 16) || (v300  = sub_10039F7B4(18), (v301 & 1) == 0))
  {
LABEL_285:
    v320  = v323;
    sub_1002A9584(*v323, v323[1]);
    sub_100011E30(v336);
    sub_100011E30((uint64_t)v335);
    sub_100011E30((uint64_t)v334);
    sub_100011E30(v326);
    sub_100011E30(v328);
    *v320  = v358;
    v320[1]  = (uint64_t)v14;
    v320[2]  = (uint64_t)v343;
    v320[3]  = v20;
    v320[4]  = (uint64_t)v338;
    goto LABEL_282;
  }
  v302  = *(void *)(*(void *)(v299 + 56) + 8 * v300);
  v303  = v302 + 64;
  v304  = 1 << *(unsigned char *)(v302 + 32);
  v305  = -1;
  if (v304 < 64) {
    v305  = ~(-1 << v304);
  }
  v306  = v305 & *(void *)(v302 + 64);
  v307  = (unint64_t)(v304 + 63) >> 6;
  swift_bridgeObjectRetain_n();
  v308  = 0;
  while (2)
  {
    if (v306)
    {
      v309  = __clz(__rbit64(v306));
      v306 &= v306 - 1;
      v310  = v309 | (v308 << 6);
LABEL_258:
      (*(void (**)(void))(*(void *)(v302 + 56) + 16 * v310))();
      continue;
    }
    break;
  }
  v311  = v308 + 1;
  if (__OFADD__(v308, 1)) {
    goto LABEL_307;
  }
  if (v311 >= v307) {
    goto LABEL_284;
  }
  v312  = *(void *)(v303 + 8 * v311);
  ++v308;
  if (v312) {
    goto LABEL_277;
  }
  v308  = v311 + 1;
  if (v311 + 1 >= v307) {
    goto LABEL_284;
  }
  v312  = *(void *)(v303 + 8 * v308);
  if (v312) {
    goto LABEL_277;
  }
  v308  = v311 + 2;
  if (v311 + 2 >= v307) {
    goto LABEL_284;
  }
  v312  = *(void *)(v303 + 8 * v308);
  if (v312) {
    goto LABEL_277;
  }
  v308  = v311 + 3;
  if (v311 + 3 >= v307) {
    goto LABEL_284;
  }
  v312  = *(void *)(v303 + 8 * v308);
  if (v312) {
    goto LABEL_277;
  }
  v308  = v311 + 4;
  if (v311 + 4 >= v307) {
    goto LABEL_284;
  }
  v312  = *(void *)(v303 + 8 * v308);
  if (v312)
  {
LABEL_277:
    v306  = (v312 - 1) & v312;
    v310  = __clz(__rbit64(v312)) + (v308 << 6);
    goto LABEL_258;
  }
  v313  = v311 + 5;
  if (v313 >= v307) {
    goto LABEL_284;
  }
  v312  = *(void *)(v303 + 8 * v313);
  if (v312)
  {
    v308  = v313;
    goto LABEL_277;
  }
  while (1)
  {
    v308  = v313 + 1;
    if (__OFADD__(v313, 1)) {
      break;
    }
    if (v308 >= v307) {
      goto LABEL_284;
    }
    v312  = *(void *)(v303 + 8 * v308);
    ++v313;
    if (v312) {
      goto LABEL_277;
    }
  }
LABEL_312:
  __break(1u);
LABEL_313:
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_314:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1002A6BBC@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 120)  = 0;
  *(void *)(a2 + 128)  = 0;
  *(void *)(a2 + 136)  = 0;
  *(unsigned char *)(a2 + 144)  = -1;
  long long v4 = a1[3];
  *(_OWORD *)(a2 + 32)  = a1[2];
  *(_OWORD *)(a2 + 48)  = v4;
  *(_OWORD *)(a2 + 64)  = a1[4];
  long long v5 = a1[1];
  *(_OWORD *)a2  = *a1;
  *(_OWORD *)(a2 + 16)  = v5;
  *(void *)(a2 + 80)  = 0;
  *(void *)(a2 + 88)  = 0;
  *(void *)(a2 + 96)  = 5;
  type metadata accessor for P2PTimer();
  type metadata accessor for NANPeer.Service(0);
  *(void *)(a2 + 104)  = 0;
  *(void *)(a2 + 112)  = 0;
  sub_10021ABA8((uint64_t)a1);
  return variable initialization expression of AWDLPeer.lastUpdated();
}

uint64_t sub_1002A6C50@<X0>(unsigned __int8 a1@<W2>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for NANPeer.Service(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v10 = (uint64_t *)((char *)&v22 - v9);
  uint64_t v11 = *(void *)(v2 + *(int *)(type metadata accessor for NANPeer(0) + 76));
  if (!*(void *)(v11 + 16)) {
    goto LABEL_6;
  }
  unint64_t v12 = sub_10039F964(a1);
  if ((v13 & 1) == 0) {
    goto LABEL_6;
  }
  sub_1002A90E4(*(void *)(v11 + 56) + *(void *)(v6 + 72) * v12, (uint64_t)v8, type metadata accessor for NANPeer.Service);
  sub_1002A86AC((uint64_t)v8, (uint64_t)v10, type metadata accessor for NANPeer.Service);
  uint64_t v14 = *v10;
  unint64_t v15 = v10[1];
  sub_100013D44(*v10, v15);
  uint64_t v16 = NANServiceName.hash.getter();
  unint64_t v18 = v17;
  char v19 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v14, v15, v16, v17);
  sub_10000C970(v16, v18);
  sub_10000C970(v14, v15);
  if ((v19 & 1) == 0)
  {
    sub_10029B8A8((uint64_t)v10, type metadata accessor for NANPeer.Service);
LABEL_6:
    uint64_t v20 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
  }
  sub_1002A86AC((uint64_t)v10, a2, type metadata accessor for NANPeer.Service);
  uint64_t v20 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
}

uint64_t sub_1002A6E60(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  type metadata accessor for NANPeer.Service(0);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v8 = (uint64_t *)((char *)&v21 - v7);
  uint64_t result = type metadata accessor for NANPeer(0);
  uint64_t v10 = (uint64_t *)(v3 + *(int *)(result + 76));
  uint64_t v11 = *v10;
  if (*(void *)(*v10 + 16))
  {
    uint64_t result = sub_10039F964(a3);
    if (v12)
    {
      unint64_t v13 = result;
      int v14 = *(_DWORD *)(v11 + 36);
      sub_100280054((uint64_t)v8, result, v14, 0, v11);
      uint64_t v15 = *v8;
      unint64_t v16 = v8[1];
      sub_100013D44(*v8, v16);
      sub_10029B8A8((uint64_t)v8, type metadata accessor for NANPeer.Service);
      uint64_t v17 = NANServiceName.hash.getter();
      unint64_t v19 = v18;
      char v20 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v15, v16, v17, v18);
      sub_10000C970(v17, v19);
      uint64_t result = sub_10000C970(v15, v16);
      if (v20)
      {
        sub_1003A4CA4((uint64_t)v6, v13, v14);
        return sub_10029B8A8((uint64_t)v6, type metadata accessor for NANPeer.Service);
      }
    }
  }
  return result;
}

Swift::Int sub_1002A7000()
{
  Hasher.init(_seed:)();
  unint64_t v1 = *(void *)(v0 + 16);
  if (v1 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v2 = *(void *)(v0 + 8);
    Swift::UInt16 v3 = *(_WORD *)v0;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
    sub_100013D44(v2, v1);
    Data.hash(into:)();
    sub_1000A3298(v0);
  }
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + 24));
  Hasher._combine(_:)(*(void *)(v0 + 32));
  if ((*(void *)(v0 + 40) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = *(void *)(v0 + 40);
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

Swift::Int sub_1002A70DC()
{
  unint64_t v1 = v0;
  Hasher.init(_seed:)();
  uint64_t v2 = *v0;
  Swift::UInt v3 = *(void *)(*v0 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    Swift::UInt64 v4 = (unsigned __int8 *)(v2 + 37);
    do
    {
      uint64_t v5 = *(unsigned int *)(v4 - 5);
      uint64_t v6 = *(v4 - 1);
      unsigned int v7 = *v4;
      v4 += 8;
      Channel.hash(into:)((int)&v12, v5 | (v6 << 32) | ((unint64_t)v7 << 40));
      --v3;
    }
    while (v3);
  }
  long long v8 = *(_OWORD *)(v1 + 3);
  long long v13 = *(_OWORD *)(v1 + 1);
  *(_OWORD *)int v14 = v8;
  *(_OWORD *)uint64_t v15 = *(_OWORD *)(v1 + 5);
  if ((unint64_t)v8 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt16 v9 = v13;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v9);
    sub_1000A3214((uint64_t)&v13);
    Data.hash(into:)();
  }
  Hasher._combine(_:)(LOBYTE(v14[1]));
  Hasher._combine(_:)(v15[0]);
  if ((v15[1] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v10 = v15[1];
  }
  else {
    Swift::UInt64 v10 = 0;
  }
  Hasher._combine(_:)(v10);
  sub_1000A3298((uint64_t)&v13);
  return Hasher._finalize()();
}

Swift::Int sub_1002A7200()
{
  Hasher.init(_seed:)();
  uint64_t v1 = *v0;
  Swift::UInt v2 = *(void *)(*v0 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    Swift::UInt v3 = (char *)(v1 + 32);
    do
    {
      char v4 = *v3++;
      Hasher._combine(_:)(0x801004u >> (8 * v4));
      --v2;
    }
    while (v2);
  }
  long long v5 = *(_OWORD *)(v0 + 3);
  long long v8 = *(_OWORD *)(v0 + 1);
  *(_OWORD *)Swift::UInt16 v9 = v5;
  *(_OWORD *)Swift::UInt64 v10 = *(_OWORD *)(v0 + 5);
  if ((unint64_t)v5 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v8);
    sub_1000A3214((uint64_t)&v8);
    Data.hash(into:)();
  }
  Hasher._combine(_:)(LOBYTE(v9[1]));
  Hasher._combine(_:)(v10[0]);
  if ((v10[1] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v6 = v10[1];
  }
  else {
    Swift::UInt64 v6 = 0;
  }
  Hasher._combine(_:)(v6);
  sub_1000A3298((uint64_t)&v8);
  return Hasher._finalize()();
}

Swift::Int sub_1002A732C(void (*a1)(unsigned int *), void (*a2)(unsigned int *))
{
  Hasher.init(_seed:)();
  Channel.hash(into:)((int)&v11, *v2 | ((unint64_t)*((unsigned __int8 *)v2 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v2 + 5) << 40));
  Swift::UInt v5 = *((unsigned __int8 *)v2 + 32);
  Swift::UInt v6 = *((void *)v2 + 5);
  Swift::UInt64 v7 = *((void *)v2 + 6);
  if (*((void *)v2 + 3) >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt16 v8 = *((_WORD *)v2 + 4);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v8);
    a1(v2);
    Data.hash(into:)();
  }
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v9 = v7;
  }
  else {
    Swift::UInt64 v9 = 0;
  }
  Hasher._combine(_:)(v9);
  a2(v2);
  return Hasher._finalize()();
}

Swift::Int sub_1002A7444()
{
  return sub_1002A7000();
}

void sub_1002A7480()
{
  unint64_t v1 = *(void *)(v0 + 16);
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 24);
  Swift::UInt v3 = *(void *)(v0 + 32);
  Swift::UInt64 v4 = *(void *)(v0 + 40);
  if (v1 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v6 = *(void *)v0;
    uint64_t v5 = *(void *)(v0 + 8);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6);
    sub_100013D44(v5, v1);
    Data.hash(into:)();
    sub_10006E0D8(v6, v5, v1);
  }
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = v4;
  }
  else {
    Swift::UInt64 v7 = 0;
  }
  Hasher._combine(_:)(v7);
}

Swift::Int sub_1002A753C()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  unint64_t v3 = *(void *)(v0 + 16);
  Swift::UInt v4 = *(unsigned __int8 *)(v0 + 24);
  Swift::UInt v5 = *(void *)(v0 + 32);
  Swift::UInt64 v6 = *(void *)(v0 + 40);
  Hasher.init(_seed:)();
  if (v3 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
    sub_100013D44(v2, v3);
    Data.hash(into:)();
    sub_10006E0D8(v1, v2, v3);
  }
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = v6;
  }
  else {
    Swift::UInt64 v7 = 0;
  }
  Hasher._combine(_:)(v7);
  return Hasher._finalize()();
}

BOOL sub_1002A761C(_OWORD *a1, long long *a2)
{
  long long v2 = a1[1];
  v7[0]  = *a1;
  v7[1]  = v2;
  long long v3 = *a2;
  long long v4 = a2[1];
  v7[2]  = a1[2];
  v8[0]  = v3;
  long long v5 = a2[2];
  v8[1]  = v4;
  v8[2]  = v5;
  return sub_1002A9164((uint64_t)v7, (uint64_t)v8);
}

Swift::Int sub_1002A7664()
{
  return sub_1002A732C((void (*)(unsigned int *))sub_1002A9DEC, (void (*)(unsigned int *))sub_1002A9E1C);
}

uint64_t sub_1002A76E0(int a1)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v5 = v1[2];
  unint64_t v6 = v1[3];
  Swift::UInt v7 = *((unsigned __int8 *)v1 + 32);
  Swift::UInt v8 = v1[5];
  Swift::UInt64 v9 = v1[6];
  Swift::UInt v10 = *(void *)(*v1 + 16);
  Hasher._combine(_:)(v10);
  if (v10)
  {
    char v11 = (unsigned __int8 *)(v4 + 37);
    do
    {
      uint64_t v12 = *(unsigned int *)(v11 - 5);
      uint64_t v13 = *(v11 - 1);
      unsigned int v14 = *v11;
      v11 += 8;
      Channel.hash(into:)(a1, v12 | (v13 << 32) | ((unint64_t)v14 << 40));
      --v10;
    }
    while (v10);
  }
  if (v6 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
    sub_10006E968(v3, v5, v6);
    Data.hash(into:)();
  }
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  if ((v9 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v15 = v9;
  }
  else {
    Swift::UInt64 v15 = 0;
  }
  Hasher._combine(_:)(v15);

  return sub_10006E0D8(v3, v5, v6);
}

Swift::Int sub_1002A77F8()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  uint64_t v3 = v0[2];
  unint64_t v4 = v0[3];
  Swift::UInt v5 = *((unsigned __int8 *)v0 + 32);
  Swift::UInt v6 = v0[5];
  Swift::UInt64 v7 = v0[6];
  Hasher.init(_seed:)();
  Swift::UInt v8 = *(void *)(v2 + 16);
  Hasher._combine(_:)(v8);
  if (v8)
  {
    Swift::UInt64 v9 = (unsigned __int8 *)(v2 + 37);
    do
    {
      uint64_t v10 = *(unsigned int *)(v9 - 5);
      uint64_t v11 = *(v9 - 1);
      unsigned int v12 = *v9;
      v9 += 8;
      Channel.hash(into:)((int)&v15, v10 | (v11 << 32) | ((unint64_t)v12 << 40));
      --v8;
    }
    while (v8);
  }
  if (v4 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
    sub_10006E968(v1, v3, v4);
    Data.hash(into:)();
  }
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v13 = v7;
  }
  else {
    Swift::UInt64 v13 = 0;
  }
  Hasher._combine(_:)(v13);
  sub_10006E0D8(v1, v3, v4);
  return Hasher._finalize()();
}

BOOL sub_1002A7920(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1002A7B84(a1, a2, a3, a4, _s7CoreP2P19InfraScanStartEventV23__derived_struct_equalsySbAC_ACtFZ_0);
}

uint64_t sub_1002A793C()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  uint64_t v3 = v0[2];
  unint64_t v4 = v0[3];
  Swift::UInt v5 = *((unsigned __int8 *)v0 + 32);
  Swift::UInt v6 = v0[5];
  Swift::UInt64 v7 = v0[6];
  Swift::UInt v8 = *(void *)(*v0 + 16);
  Hasher._combine(_:)(v8);
  if (v8)
  {
    Swift::UInt64 v9 = (char *)(v2 + 32);
    do
    {
      char v10 = *v9++;
      Hasher._combine(_:)(0x801004u >> (8 * v10));
      --v8;
    }
    while (v8);
  }
  if (v4 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
    sub_10006E968(v1, v3, v4);
    Data.hash(into:)();
  }
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v11 = v7;
  }
  else {
    Swift::UInt64 v11 = 0;
  }
  Hasher._combine(_:)(v11);

  return sub_10006E0D8(v1, v3, v4);
}

Swift::Int sub_1002A7A44()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  uint64_t v3 = v0[2];
  unint64_t v4 = v0[3];
  Swift::UInt v5 = *((unsigned __int8 *)v0 + 32);
  Swift::UInt v6 = v0[5];
  Swift::UInt64 v7 = v0[6];
  Hasher.init(_seed:)();
  Swift::UInt v8 = *(void *)(v2 + 16);
  Hasher._combine(_:)(v8);
  if (v8)
  {
    Swift::UInt64 v9 = (char *)(v2 + 32);
    do
    {
      char v10 = *v9++;
      Hasher._combine(_:)(0x801004u >> (8 * v10));
      --v8;
    }
    while (v8);
  }
  if (v4 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
    sub_10006E968(v1, v3, v4);
    Data.hash(into:)();
  }
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v11 = v7;
  }
  else {
    Swift::UInt64 v11 = 0;
  }
  Hasher._combine(_:)(v11);
  sub_10006E0D8(v1, v3, v4);
  return Hasher._finalize()();
}

BOOL sub_1002A7B6C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1002A7B84(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))sub_10039E5D0);
}

BOOL sub_1002A7B84(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v5 = *a1;
  long long v6 = *(_OWORD *)(a1 + 3);
  v13[0]  = *(_OWORD *)(a1 + 1);
  v13[1]  = v6;
  uint64_t v7 = *a2;
  long long v8 = *(_OWORD *)(a2 + 1);
  long long v9 = *(_OWORD *)(a2 + 3);
  v13[2]  = *(_OWORD *)(a1 + 5);
  v14[0]  = v8;
  long long v10 = *(_OWORD *)(a2 + 5);
  v14[1]  = v9;
  Swift::UInt v14[2] = v10;
  return (a5(v5, v7) & 1) != 0 && sub_1002A9164((uint64_t)v13, (uint64_t)v14);
}

Swift::Int sub_1002A7BF8()
{
  return sub_1002A732C((void (*)(unsigned int *))sub_1002AA164, (void (*)(unsigned int *))sub_1002AA168);
}

uint64_t sub_1002A7C64(int a1)
{
  uint64_t v2 = *((void *)v1 + 1);
  uint64_t v3 = *((void *)v1 + 2);
  unint64_t v4 = *((void *)v1 + 3);
  Swift::UInt v5 = *((unsigned __int8 *)v1 + 32);
  Swift::UInt v6 = *((void *)v1 + 5);
  Swift::UInt64 v7 = *((void *)v1 + 6);
  Channel.hash(into:)(a1, *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v1 + 5) << 40));
  if (v4 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
    sub_10006E968(v2, v3, v4);
    Data.hash(into:)();
  }
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v8 = v7;
  }
  else {
    Swift::UInt64 v8 = 0;
  }
  Hasher._combine(_:)(v8);

  return sub_10006E0D8(v2, v3, v4);
}

Swift::Int sub_1002A7D48()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *((unsigned __int8 *)v0 + 4);
  uint64_t v3 = *((unsigned __int8 *)v0 + 5);
  uint64_t v4 = *((void *)v0 + 1);
  uint64_t v5 = *((void *)v0 + 2);
  unint64_t v6 = *((void *)v0 + 3);
  Swift::UInt v7 = *((unsigned __int8 *)v0 + 32);
  Swift::UInt v8 = *((void *)v0 + 5);
  Swift::UInt64 v9 = *((void *)v0 + 6);
  Hasher.init(_seed:)();
  Channel.hash(into:)((int)&v12, v1 | (v2 << 32) | (v3 << 40));
  if (v6 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
    sub_10006E968(v4, v5, v6);
    Data.hash(into:)();
  }
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  if ((v9 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v10 = v9;
  }
  else {
    Swift::UInt64 v10 = 0;
  }
  Hasher._combine(_:)(v10);
  sub_10006E0D8(v4, v5, v6);
  return Hasher._finalize()();
}

BOOL sub_1002A7E50(unsigned int *a1, unsigned int *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned __int8 *)a1 + 4);
  uint64_t v4 = *((unsigned __int8 *)a1 + 5);
  long long v5 = *(_OWORD *)(a1 + 6);
  v14[0]  = *(_OWORD *)(a1 + 2);
  v14[1]  = v5;
  uint64_t v6 = *a2;
  uint64_t v7 = *((unsigned __int8 *)a2 + 4);
  uint64_t v8 = *((unsigned __int8 *)a2 + 5);
  long long v9 = *(_OWORD *)(a2 + 2);
  long long v10 = *(_OWORD *)(a2 + 6);
  Swift::UInt v14[2] = *(_OWORD *)(a1 + 10);
  v15[0]  = v9;
  long long v11 = *(_OWORD *)(a2 + 10);
  v15[1]  = v10;
  Swift::UInt v15[2] = v11;
  return (sub_1001C6DD8(v2 | (v3 << 32) | (v4 << 40), v6 | (v7 << 32) | (v8 << 40)) & 1) != 0
      && sub_1002A9164((uint64_t)v14, (uint64_t)v15);
}

Swift::Int sub_1002A7ED8()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  Swift::UInt8 v5 = *(unsigned char *)v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  swift_bridgeObjectRetain();
  sub_1002A8E38((uint64_t)v7, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1002A8B0C((uint64_t)v7, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1002A87D8((uint64_t)v7, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1002A8E38((uint64_t)v7, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1002A7FA8(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  Hasher._combine(_:)(*(unsigned char *)v1);
  swift_bridgeObjectRetain();
  sub_1002A8E38(a1, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1002A8B0C(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1002A87D8(a1, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1002A8E38(a1, v6);

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1002A8068()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  Swift::UInt8 v5 = *(unsigned char *)v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  swift_bridgeObjectRetain();
  sub_1002A8E38((uint64_t)v7, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1002A8B0C((uint64_t)v7, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1002A87D8((uint64_t)v7, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1002A8E38((uint64_t)v7, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1002A8134(uint64_t *a1, uint64_t *a2)
{
  if (*(unsigned __int8 *)a1 == *(unsigned __int8 *)a2
    && (uint64_t v3 = a1[3],
        uint64_t v2 = a1[4],
        uint64_t v5 = a2[3],
        uint64_t v4 = a2[4],
        uint64_t v6 = a2[2],
        uint64_t v7 = a1[2],
        (sub_1002A8360(a1[1], a2[1], sub_10039DCD0) & 1) != 0)
    && (sub_1002A8360(v7, v6, sub_10039E670) & 1) != 0
    && (sub_1002A8360(v3, v5, sub_10039DD28) & 1) != 0)
  {
    char v8 = sub_1002A8360(v2, v4, sub_10039DCD0);
  }
  else
  {
    char v8 = 0;
  }
  return v8 & 1;
}

unint64_t sub_1002A8214()
{
  unint64_t result = qword_100485068;
  if (!qword_100485068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100485068);
  }
  return result;
}

uint64_t sub_1002A8268()
{
  return sub_1002A82B0(&qword_100485070, (void (*)(uint64_t))type metadata accessor for NANPeer);
}

uint64_t sub_1002A82B0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002A82F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010BCC(&qword_100484D00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002A8360(uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v5 = 0;
  uint64_t v6 = result + 64;
  uint64_t v7 = 1 << *(unsigned char *)(result + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(result + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v12 = v11 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v13 >= v10) {
      return 1;
    }
    unint64_t v14 = *(void *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      int64_t v5 = v13 + 1;
      if (v13 + 1 >= v10) {
        return 1;
      }
      unint64_t v14 = *(void *)(v6 + 8 * v5);
      if (!v14)
      {
        int64_t v5 = v13 + 2;
        if (v13 + 2 >= v10) {
          return 1;
        }
        unint64_t v14 = *(void *)(v6 + 8 * v5);
        if (!v14)
        {
          int64_t v5 = v13 + 3;
          if (v13 + 3 >= v10) {
            return 1;
          }
          unint64_t v14 = *(void *)(v6 + 8 * v5);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_24:
    uint64_t v16 = *(void *)(*(void *)(v3 + 56) + 8 * v12);
    sub_10039F748(*(unsigned char *)(*(void *)(v3 + 48) + v12));
    if (v17)
    {
      swift_bridgeObjectRetain();
      uint64_t v18 = swift_bridgeObjectRetain();
      char v19 = a3(v18, v16);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (v19) {
        continue;
      }
    }
    return 0;
  }
  int64_t v15 = v13 + 4;
  if (v15 >= v10) {
    return 1;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14)
  {
    int64_t v5 = v15;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v5 >= v10) {
      return 1;
    }
    unint64_t v14 = *(void *)(v6 + 8 * v5);
    ++v15;
    if (v14) {
      goto LABEL_23;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1002A8518(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_24;
    }
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v12 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13)
        {
          int64_t v4 = v12 + 3;
          if (v12 + 3 >= v9) {
            return 1;
          }
          unint64_t v13 = *(void *)(v5 + 8 * v4);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_24:
    int v15 = *(unsigned __int8 *)(*(void *)(v3 + 56) + v11);
    uint64_t result = sub_10039F82C(*(unsigned int *)(*(void *)(v3 + 48) + 8 * v11) | ((unint64_t)*(unsigned __int8 *)(*(void *)(v3 + 48) + 8 * v11 + 4) << 32) | ((unint64_t)*(unsigned __int8 *)(*(void *)(v3 + 48) + 8 * v11 + 5) << 40));
    if ((v16 & 1) == 0 || *(unsigned __int8 *)(*(void *)(a2 + 56) + result) != v15) {
      return 0;
    }
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v9) {
    return 1;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_23;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1002A86AC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002A8714(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || -(-1 << *(unsigned char *)(a4 + 32)) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a4 + 64 + (((unint64_t)result >> 3) & 0x1FFFFFFFFFFFFFF8)) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    return _HashTable.occupiedBucket(after:)();
  }
LABEL_8:
  __break(1u);
  return result;
}

void *sub_1002A8794(void *result)
{
  unint64_t v2 = (*v1)[3];
  if ((uint64_t)result + 1 > (uint64_t)(v2 >> 1))
  {
    uint64_t result = sub_1003302BC((void *)(v2 > 1), (int64_t)result + 1, 1, *v1);
    *uint64_t v1 = result;
  }
  return result;
}

void sub_1002A87D8(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = a2 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a2 + 64);
  int64_t v25 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  Swift::UInt v5 = 0;
  for (i  = 0; ; i  = v29)
  {
    if (v4)
    {
      uint64_t v28 = (v4 - 1) & v4;
      int64_t v29 = i;
      unint64_t v7 = __clz(__rbit64(v4)) | (i << 6);
    }
    else
    {
      int64_t v8 = i + 1;
      if (__OFADD__(i, 1)) {
        goto LABEL_35;
      }
      if (v8 >= v25)
      {
LABEL_33:
        swift_release();
        Hasher._combine(_:)(v5);
        return;
      }
      unint64_t v9 = *(void *)(v24 + 8 * v8);
      int64_t v10 = i + 1;
      if (!v9)
      {
        int64_t v10 = i + 2;
        if (i + 2 >= v25) {
          goto LABEL_33;
        }
        unint64_t v9 = *(void *)(v24 + 8 * v10);
        if (!v9)
        {
          uint64_t v11 = i + 3;
          if (i + 3 >= v25) {
            goto LABEL_33;
          }
          unint64_t v9 = *(void *)(v24 + 8 * v11);
          if (!v9)
          {
            while (1)
            {
              int64_t v10 = v11 + 1;
              if (__OFADD__(v11, 1)) {
                goto LABEL_36;
              }
              if (v10 >= v25) {
                goto LABEL_33;
              }
              unint64_t v9 = *(void *)(v24 + 8 * v10);
              ++v11;
              if (v9) {
                goto LABEL_19;
              }
            }
          }
          int64_t v10 = i + 3;
        }
      }
LABEL_19:
      uint64_t v28 = (v9 - 1) & v9;
      int64_t v29 = v10;
      unint64_t v7 = __clz(__rbit64(v9)) + (v10 << 6);
    }
    uint64_t v12 = *(void *)(*(void *)(a2 + 56) + 8 * v7);
    Hasher._combine(_:)(*(unsigned char *)(*(void *)(a2 + 48) + v7));
    Hasher._combine(_:)(*(void *)(v12 + 16));
    uint64_t v32 = *(void *)(v12 + 16);
    if (v32) {
      break;
    }
LABEL_5:
    v5 ^= Hasher._finalize()();
    unint64_t v4 = v28;
  }
  Swift::UInt v27 = v5;
  uint64_t v31 = v12 + 32;
  swift_bridgeObjectRetain();
  unint64_t v13 = 0;
  uint64_t v30 = v12;
  while (v13 < *(void *)(v12 + 16))
  {
    int v15 = (uint64_t *)(v31 + 56 * v13);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    uint64_t v18 = v15[2];
    unint64_t v19 = v15[3];
    Swift::UInt v33 = *((unsigned __int8 *)v15 + 32);
    Swift::UInt64 v20 = v15[6];
    Swift::UInt v34 = v15[5];
    Hasher._combine(_:)(*(void *)(*v15 + 16));
    uint64_t v21 = *(void *)(v17 + 16);
    if (v21)
    {
      uint64_t v22 = (char *)(v17 + 32);
      do
      {
        char v23 = *v22++;
        Hasher._combine(_:)(0x801004u >> (8 * v23));
        --v21;
      }
      while (v21);
    }
    if (v19 >> 60 == 15)
    {
      Hasher._combine(_:)(0);
      swift_bridgeObjectRetain();
      sub_10006E968(v16, v18, v19);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v16);
      swift_bridgeObjectRetain();
      sub_10006E968(v16, v18, v19);
      sub_10006E968(v16, v18, v19);
      Data.hash(into:)();
    }
    uint64_t v12 = v30;
    ++v13;
    Hasher._combine(_:)(v33);
    Hasher._combine(_:)(v34);
    if ((v20 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v14 = v20;
    }
    else {
      Swift::UInt64 v14 = 0;
    }
    Hasher._combine(_:)(v14);
    sub_10006E0D8(v16, v18, v19);
    swift_bridgeObjectRelease();
    sub_10006E0D8(v16, v18, v19);
    if (v13 == v32)
    {
      swift_bridgeObjectRelease();
      Swift::UInt v5 = v27;
      goto LABEL_5;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

void sub_1002A8B0C(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = a2 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a2 + 64);
  int64_t v32 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  Swift::UInt v5 = 0;
  int64_t v6 = 0;
  while (1)
  {
    if (v4)
    {
      uint64_t v37 = (v4 - 1) & v4;
      unint64_t v7 = __clz(__rbit64(v4)) | (v6 << 6);
    }
    else
    {
      int64_t v8 = v6 + 1;
      if (__OFADD__(v6, 1)) {
        goto LABEL_35;
      }
      if (v8 >= v32)
      {
LABEL_33:
        swift_release();
        Hasher._combine(_:)(v5);
        return;
      }
      unint64_t v9 = *(void *)(v31 + 8 * v8);
      ++v6;
      if (!v9)
      {
        int64_t v6 = v8 + 1;
        if (v8 + 1 >= v32) {
          goto LABEL_33;
        }
        unint64_t v9 = *(void *)(v31 + 8 * v6);
        if (!v9)
        {
          int64_t v10 = v8 + 2;
          if (v10 >= v32) {
            goto LABEL_33;
          }
          unint64_t v9 = *(void *)(v31 + 8 * v10);
          if (!v9)
          {
            while (1)
            {
              int64_t v6 = v10 + 1;
              if (__OFADD__(v10, 1)) {
                goto LABEL_36;
              }
              if (v6 >= v32) {
                goto LABEL_33;
              }
              unint64_t v9 = *(void *)(v31 + 8 * v6);
              ++v10;
              if (v9) {
                goto LABEL_19;
              }
            }
          }
          int64_t v6 = v10;
        }
      }
LABEL_19:
      uint64_t v37 = (v9 - 1) & v9;
      unint64_t v7 = __clz(__rbit64(v9)) + (v6 << 6);
    }
    uint64_t v11 = *(void *)(*(void *)(a2 + 56) + 8 * v7);
    Swift::UInt8 v12 = *(unsigned char *)(*(void *)(a2 + 48) + v7);
    uint64_t v13 = *(void *)(a1 + 64);
    long long v14 = *(_OWORD *)(a1 + 16);
    v41[0]  = *(_OWORD *)a1;
    v41[1]  = v14;
    long long v15 = *(_OWORD *)(a1 + 48);
    v41[2]  = *(_OWORD *)(a1 + 32);
    void v41[3] = v15;
    uint64_t v42 = v13;
    Hasher._combine(_:)(v12);
    Hasher._combine(_:)(*(void *)(v11 + 16));
    uint64_t v40 = *(void *)(v11 + 16);
    if (v40) {
      break;
    }
LABEL_5:
    v5 ^= Hasher._finalize()();
    unint64_t v4 = v37;
  }
  int64_t v35 = v6;
  Swift::UInt v36 = v5;
  uint64_t v39 = v11 + 32;
  swift_bridgeObjectRetain();
  unint64_t v16 = 0;
  uint64_t v38 = v11;
  while (v16 < *(void *)(v11 + 16))
  {
    uint64_t v18 = (uint64_t *)(v39 + 56 * v16);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    uint64_t v21 = v18[2];
    unint64_t v22 = v18[3];
    Swift::UInt v23 = *((unsigned __int8 *)v18 + 32);
    Swift::UInt v25 = v18[5];
    Swift::UInt64 v24 = v18[6];
    Hasher._combine(_:)(*(void *)(*v18 + 16));
    uint64_t v26 = *(void *)(v20 + 16);
    if (v26)
    {
      Swift::UInt v27 = (unsigned __int8 *)(v20 + 37);
      do
      {
        uint64_t v28 = *(unsigned int *)(v27 - 5);
        uint64_t v29 = *(v27 - 1);
        unsigned int v30 = *v27;
        v27 += 8;
        Channel.hash(into:)((int)v41, v28 | (v29 << 32) | ((unint64_t)v30 << 40));
        --v26;
      }
      while (v26);
    }
    if (v22 >> 60 == 15)
    {
      Hasher._combine(_:)(0);
      swift_bridgeObjectRetain();
      sub_10006E968(v19, v21, v22);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v19);
      swift_bridgeObjectRetain();
      sub_10006E968(v19, v21, v22);
      sub_10006E968(v19, v21, v22);
      Data.hash(into:)();
    }
    uint64_t v11 = v38;
    ++v16;
    Hasher._combine(_:)(v23);
    Hasher._combine(_:)(v25);
    if ((v24 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v17 = v24;
    }
    else {
      Swift::UInt64 v17 = 0;
    }
    Hasher._combine(_:)(v17);
    sub_10006E0D8(v19, v21, v22);
    swift_bridgeObjectRelease();
    sub_10006E0D8(v19, v21, v22);
    if (v16 == v40)
    {
      swift_bridgeObjectRelease();
      int64_t v6 = v35;
      Swift::UInt v5 = v36;
      goto LABEL_5;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

void sub_1002A8E38(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = a2 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a2 + 64);
  int64_t v27 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  Swift::UInt v5 = 0;
  int64_t v6 = 0;
  while (1)
  {
    if (v4)
    {
      unint64_t v7 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      unint64_t v8 = v7 | (v6 << 6);
      goto LABEL_20;
    }
    int64_t v9 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v9 >= v27) {
      goto LABEL_29;
    }
    unint64_t v10 = *(void *)(v26 + 8 * v9);
    ++v6;
    if (!v10)
    {
      int64_t v6 = v9 + 1;
      if (v9 + 1 >= v27) {
        goto LABEL_29;
      }
      unint64_t v10 = *(void *)(v26 + 8 * v6);
      if (!v10) {
        break;
      }
    }
LABEL_19:
    unint64_t v4 = (v10 - 1) & v10;
    unint64_t v8 = __clz(__rbit64(v10)) + (v6 << 6);
LABEL_20:
    uint64_t v12 = *(void *)(*(void *)(a2 + 56) + 8 * v8);
    Swift::UInt8 v13 = *(unsigned char *)(*(void *)(a2 + 48) + v8);
    uint64_t v14 = *(void *)(a1 + 64);
    long long v15 = *(_OWORD *)(a1 + 16);
    v33[0]  = *(_OWORD *)a1;
    v33[1]  = v15;
    long long v16 = *(_OWORD *)(a1 + 48);
    v33[2]  = *(_OWORD *)(a1 + 32);
    v33[3]  = v16;
    uint64_t v34 = v14;
    Hasher._combine(_:)(v13);
    Hasher._combine(_:)(*(void *)(v12 + 16));
    uint64_t v17 = *(void *)(v12 + 16);
    if (v17)
    {
      unint64_t v30 = v4;
      int64_t v31 = v6;
      Swift::UInt v32 = v5;
      swift_bridgeObjectRetain();
      uint64_t v18 = v12 + 40;
      do
      {
        uint64_t v20 = *(void *)v18;
        uint64_t v21 = *(void *)(v18 + 8);
        unint64_t v22 = *(void *)(v18 + 16);
        Swift::UInt v23 = *(unsigned __int8 *)(v18 + 24);
        Swift::UInt v25 = *(void *)(v18 + 32);
        Swift::UInt64 v24 = *(void *)(v18 + 40);
        Channel.hash(into:)((int)v33, *(unsigned int *)(v18 - 8) | ((unint64_t)*(unsigned __int8 *)(v18 - 4) << 32) | ((unint64_t)*(unsigned __int8 *)(v18 - 3) << 40));
        if (v22 >> 60 == 15)
        {
          Hasher._combine(_:)(0);
        }
        else
        {
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(v20);
          sub_10006E968(v20, v21, v22);
          sub_10006E968(v20, v21, v22);
          Data.hash(into:)();
        }
        v18 += 56;
        Hasher._combine(_:)(v23);
        Hasher._combine(_:)(v25);
        if ((v24 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
          Swift::UInt64 v19 = v24;
        }
        else {
          Swift::UInt64 v19 = 0;
        }
        Hasher._combine(_:)(v19);
        sub_10006E0D8(v20, v21, v22);
        sub_10006E0D8(v20, v21, v22);
        --v17;
      }
      while (v17);
      swift_bridgeObjectRelease();
      int64_t v6 = v31;
      Swift::UInt v5 = v32;
      unint64_t v4 = v30;
    }
    v5 ^= Hasher._finalize()();
  }
  int64_t v11 = v9 + 2;
  if (v11 >= v27)
  {
LABEL_29:
    swift_release();
    Hasher._combine(_:)(v5);
    return;
  }
  unint64_t v10 = *(void *)(v26 + 8 * v11);
  if (v10)
  {
    int64_t v6 = v11;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v6 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v6 >= v27) {
      goto LABEL_29;
    }
    unint64_t v10 = *(void *)(v26 + 8 * v6);
    ++v11;
    if (v10) {
      goto LABEL_19;
    }
  }
LABEL_31:
  __break(1u);
}

uint64_t sub_1002A90E4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002A914C(uint64_t result, uint64_t a2, unint64_t a3, unsigned __int8 a4)
{
  if (a4 != 255) {
    return sub_10029E448(result, a2, a3, a4 & 1);
  }
  return result;
}

BOOL sub_1002A9164(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  unint64_t v9 = *(void *)(a2 + 16);
  if (v6 >> 60 != 15)
  {
    if (v9 >> 60 != 15)
    {
      if ((unsigned __int16)*(void *)a1 != (unsigned __int16)v8) {
        return 0;
      }
      sub_1000A3214(a2);
      sub_1000A3214(a1);
      char v11 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v4, v6, v7, v9);
      sub_1000A3298(a2);
      sub_1000A3298(a1);
      if ((v11 & 1) == 0) {
        return 0;
      }
      goto LABEL_4;
    }
LABEL_8:
    sub_1000A3214(a2);
    sub_1000A3214(a1);
    sub_10006E0D8(v5, v4, v6);
    sub_10006E0D8(v8, v7, v9);
    return 0;
  }
  if (v9 >> 60 != 15) {
    goto LABEL_8;
  }
  sub_1000A3214(a2);
LABEL_4:
  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24) && *(void *)(a1 + 32) == *(void *)(a2 + 32)) {
    return *(double *)(a1 + 40) == *(double *)(a2 + 40);
  }
  return 0;
}

uint64_t sub_1002A9290(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2
    || ((0x801004u >> (8 * *(unsigned char *)(a1 + 4))) & 0xFFC) != ((0x801004u >> (8 * *(unsigned char *)(a2 + 4))) & 0xFFC))
  {
    return 0;
  }
  int v4 = *(unsigned __int8 *)(a2 + 5);
  switch(*(unsigned char *)(a1 + 5))
  {
    case 2:
      if (v4 != 2) {
        return 0;
      }
      break;
    case 3:
      if (v4 != 3) {
        return 0;
      }
      break;
    case 4:
      if (v4 != 4) {
        return 0;
      }
      break;
    case 5:
      if (v4 != 5) {
        return 0;
      }
      break;
    case 6:
      if (v4 != 6) {
        return 0;
      }
      break;
    default:
      if ((v4 - 2) < 5 || ((((*(unsigned char *)(a1 + 5) & 1) == 0) ^ v4) & 1) == 0) {
        return 0;
      }
      break;
  }
  if (*(void *)(a1 + 8) != *(void *)(a2 + 8)
    || *(void *)(a1 + 16) != *(void *)(a2 + 16)
    || *(void *)(a1 + 24) != *(void *)(a2 + 24))
  {
    return 0;
  }
  uint64_t v5 = *(int *)(type metadata accessor for NANPeer.LastBeaconInformation(0) + 32);

  return static DispatchTime.== infix(_:_:)(a1 + v5, a2 + v5);
}

uint64_t sub_1002A93F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010BCC(&qword_100485080);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002A9460(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010BCC(&qword_100484D00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002A94C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a3 != 5) {
    return sub_10013316C(a3, a4, a5);
  }
  return result;
}

uint64_t sub_1002A94F0()
{
  sub_10000C970(*(void *)(v0 + 16), *(void *)(v0 + 24));
  swift_bridgeObjectRelease();
  if (*(unsigned __int8 *)(v0 + 66) != 255)
  {
    uint64_t v1 = *(unsigned __int16 *)(v0 + 64) | (*(unsigned __int8 *)(v0 + 66) << 16);
    sub_1001331A0(*(void *)(v0 + 48), *(void *)(v0 + 56), v1, BYTE2(v1) & 1);
  }
  if (*(unsigned char *)(v0 + 72) != 4) {
    sub_10000C970(*(void *)(v0 + 80), *(void *)(v0 + 88));
  }

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t sub_1002A9568@<X0>(uint64_t a1@<X8>)
{
  return sub_1002A6BBC((_OWORD *)(v1 + 16), a1);
}

uint64_t sub_1002A9584(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

ValueMetadata *type metadata accessor for NANPeer.Availability.ConditionalEntry()
{
  return &type metadata for NANPeer.Availability.ConditionalEntry;
}

ValueMetadata *type metadata accessor for NANPeer.Availability.PotentialBandEntry()
{
  return &type metadata for NANPeer.Availability.PotentialBandEntry;
}

uint64_t _s12wifip2pdCore7NANPeerV12AvailabilityV21PotentialChannelEntryVwxx_0(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >> 60 != 15)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    return sub_10000C970(v4, v3);
  }
  return result;
}

uint64_t _s12wifip2pdCore7NANPeerV12AvailabilityV21PotentialChannelEntryVwcp_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  unint64_t v5 = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  if (v5 >> 60 == 15)
  {
    *uint64_t v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  }
  else
  {
    *(_WORD *)(a1 + 8)  = *(_WORD *)(a2 + 8);
    uint64_t v6 = *(void *)(a2 + 16);
    sub_100013D44(v6, v5);
    *(void *)(a1 + 16)  = v6;
    *(void *)(a1 + 24)  = v5;
  }
  *(unsigned char *)(a1 + 32)  = *(unsigned char *)(a2 + 32);
  *(_OWORD *)(a1 + 40)  = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t _s12wifip2pdCore7NANPeerV12AvailabilityV21PotentialChannelEntryVwca_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (long long *)(a1 + 8);
  unint64_t v5 = (long long *)(a2 + 8);
  if (*(void *)(a1 + 24) >> 60 == 15)
  {
    if (*(void *)(a2 + 24) >> 60 == 15)
    {
      long long v6 = *v5;
      *(void *)(a1 + 24)  = *(void *)(a2 + 24);
      *uint64_t v4 = v6;
    }
    else
    {
      *(_WORD *)(a1 + 8)  = *(_WORD *)(a2 + 8);
      uint64_t v8 = *(void *)(a2 + 16);
      unint64_t v9 = *(void *)(a2 + 24);
      sub_100013D44(v8, v9);
      *(void *)(a1 + 16)  = v8;
      *(void *)(a1 + 24)  = v9;
    }
  }
  else if (*(void *)(a2 + 24) >> 60 == 15)
  {
    sub_1000A4C6C(a1 + 8);
    uint64_t v7 = *(void *)(a2 + 24);
    *uint64_t v4 = *v5;
    *(void *)(a1 + 24)  = v7;
  }
  else
  {
    *(_WORD *)(a1 + 8)  = *(_WORD *)(a2 + 8);
    uint64_t v10 = *(void *)(a2 + 16);
    unint64_t v11 = *(void *)(a2 + 24);
    sub_100013D44(v10, v11);
    uint64_t v12 = *(void *)(a1 + 16);
    unint64_t v13 = *(void *)(a1 + 24);
    *(void *)(a1 + 16)  = v10;
    *(void *)(a1 + 24)  = v11;
    sub_10000C970(v12, v13);
  }
  *(unsigned char *)(a1 + 32)  = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  *(void *)(a1 + 48)  = *(void *)(a2 + 48);
  return a1;
}

uint64_t _s12wifip2pdCore7NANPeerV12AvailabilityV21PotentialChannelEntryVwta_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  swift_bridgeObjectRelease();
  unint64_t v4 = *(void *)(a1 + 24);
  if (v4 >> 60 != 15)
  {
    unint64_t v5 = *(void *)(a2 + 24);
    if (v5 >> 60 != 15)
    {
      *(_WORD *)(a1 + 8)  = *(_WORD *)(a2 + 8);
      uint64_t v6 = *(void *)(a1 + 16);
      *(void *)(a1 + 16)  = *(void *)(a2 + 16);
      *(void *)(a1 + 24)  = v5;
      sub_10000C970(v6, v4);
      goto LABEL_6;
    }
    sub_1000A4C6C(a1 + 8);
  }
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
LABEL_6:
  *(unsigned char *)(a1 + 32)  = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  *(void *)(a1 + 48)  = *(void *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for RadioResourceSchedule(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RadioResourceSchedule(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56)  = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANPeer.Availability.PotentialChannelEntry()
{
  return &type metadata for NANPeer.Availability.PotentialChannelEntry;
}

uint64_t destroy for NANPeer.Availability.CommittedEntry(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 24);
  if (v1 >> 60 != 15) {
    return sub_10000C970(*(void *)(result + 16), v1);
  }
  return result;
}

uint64_t _s12wifip2pdCore7NANPeerV12AvailabilityV14CommittedEntryVwcp_0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4)  = *(_WORD *)(a2 + 4);
  unint64_t v4 = *(void *)(a2 + 24);
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  }
  else
  {
    *(_WORD *)(a1 + 8)  = *(_WORD *)(a2 + 8);
    uint64_t v5 = *(void *)(a2 + 16);
    sub_100013D44(v5, v4);
    *(void *)(a1 + 16)  = v5;
    *(void *)(a1 + 24)  = v4;
  }
  *(unsigned char *)(a1 + 32)  = *(unsigned char *)(a2 + 32);
  *(_OWORD *)(a1 + 40)  = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t _s12wifip2pdCore7NANPeerV12AvailabilityV14CommittedEntryVwca_0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4)  = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a1 + 5)  = *(unsigned char *)(a2 + 5);
  uint64_t v4 = a1 + 8;
  uint64_t v5 = (long long *)(a2 + 8);
  if (*(void *)(a1 + 24) >> 60 == 15)
  {
    if (*(void *)(a2 + 24) >> 60 == 15)
    {
      long long v6 = *v5;
      *(void *)(a1 + 24)  = *(void *)(a2 + 24);
      *(_OWORD *)uint64_t v4 = v6;
    }
    else
    {
      *(_WORD *)(a1 + 8)  = *(_WORD *)(a2 + 8);
      uint64_t v8 = *(void *)(a2 + 16);
      unint64_t v9 = *(void *)(a2 + 24);
      sub_100013D44(v8, v9);
      *(void *)(a1 + 16)  = v8;
      *(void *)(a1 + 24)  = v9;
    }
  }
  else if (*(void *)(a2 + 24) >> 60 == 15)
  {
    sub_1000A4C6C(a1 + 8);
    uint64_t v7 = *((void *)v5 + 2);
    *(_OWORD *)uint64_t v4 = *v5;
    *(void *)(v4 + 16)  = v7;
  }
  else
  {
    *(_WORD *)(a1 + 8)  = *(_WORD *)(a2 + 8);
    uint64_t v10 = *(void *)(a2 + 16);
    unint64_t v11 = *(void *)(a2 + 24);
    sub_100013D44(v10, v11);
    uint64_t v12 = *(void *)(a1 + 16);
    unint64_t v13 = *(void *)(a1 + 24);
    *(void *)(a1 + 16)  = v10;
    *(void *)(a1 + 24)  = v11;
    sub_10000C970(v12, v13);
  }
  *(unsigned char *)(a1 + 32)  = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  *(void *)(a1 + 48)  = *(void *)(a2 + 48);
  return a1;
}

uint64_t _s12wifip2pdCore7NANPeerV12AvailabilityV14CommittedEntryVwta_0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4)  = *(_WORD *)(a2 + 4);
  uint64_t v4 = a1 + 8;
  uint64_t v5 = a2 + 8;
  unint64_t v6 = *(void *)(a1 + 24);
  if (v6 >> 60 != 15)
  {
    unint64_t v7 = *(void *)(a2 + 24);
    if (v7 >> 60 != 15)
    {
      *(_WORD *)(a1 + 8)  = *(_WORD *)(a2 + 8);
      uint64_t v8 = *(void *)(a1 + 16);
      *(void *)(a1 + 16)  = *(void *)(a2 + 16);
      *(void *)(a1 + 24)  = v7;
      sub_10000C970(v8, v6);
      goto LABEL_6;
    }
    sub_1000A4C6C(a1 + 8);
  }
  *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
  *(void *)(v4 + 16)  = *(void *)(v5 + 16);
LABEL_6:
  *(unsigned char *)(a1 + 32)  = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  *(void *)(a1 + 48)  = *(void *)(a2 + 48);
  return a1;
}

uint64_t _s12wifip2pdCore7NANPeerV12AvailabilityV14CommittedEntryVwet_0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 4);
  BOOL v4 = v3 >= 3;
  int v5 = v3 - 3;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t _s12wifip2pdCore7NANPeerV12AvailabilityV14CommittedEntryVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 56)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 56)  = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 4)  = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANPeer.Availability.CommittedEntry()
{
  return &type metadata for NANPeer.Availability.CommittedEntry;
}

unint64_t sub_1002A9C90()
{
  unint64_t result = qword_100485090;
  if (!qword_100485090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100485090);
  }
  return result;
}

unint64_t sub_1002A9CE8()
{
  unint64_t result = qword_100485098;
  if (!qword_100485098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100485098);
  }
  return result;
}

unint64_t sub_1002A9D40()
{
  unint64_t result = qword_1004850A0;
  if (!qword_1004850A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004850A0);
  }
  return result;
}

unint64_t sub_1002A9D98()
{
  unint64_t result = qword_1004850A8;
  if (!qword_1004850A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004850A8);
  }
  return result;
}

uint64_t sub_1002A9DEC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002A9E1C(uint64_t a1)
{
  return a1;
}

uint64_t destroy for NANPeer.Availability.EntryAttributes(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 16);
  if (v1 >> 60 != 15) {
    return sub_10000C970(*(void *)(result + 8), v1);
  }
  return result;
}

uint64_t initializeWithCopy for NANPeer.Availability.EntryAttributes(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)a1  = *(_OWORD *)a2;
    *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  }
  else
  {
    *(_WORD *)a1  = *(_WORD *)a2;
    uint64_t v5 = *(void *)(a2 + 8);
    sub_100013D44(v5, v4);
    *(void *)(a1 + 8)  = v5;
    *(void *)(a1 + 16)  = v4;
  }
  *(unsigned char *)(a1 + 24)  = *(unsigned char *)(a2 + 24);
  *(_OWORD *)(a1 + 32)  = *(_OWORD *)(a2 + 32);
  return a1;
}

uint64_t assignWithCopy for NANPeer.Availability.EntryAttributes(uint64_t a1, long long *a2)
{
  if (*(void *)(a1 + 16) >> 60 == 15)
  {
    if (*((void *)a2 + 2) >> 60 == 15)
    {
      long long v4 = *a2;
      *(void *)(a1 + 16)  = *((void *)a2 + 2);
      *(_OWORD *)a1  = v4;
    }
    else
    {
      *(_WORD *)a1  = *(_WORD *)a2;
      uint64_t v6 = *((void *)a2 + 1);
      unint64_t v7 = *((void *)a2 + 2);
      sub_100013D44(v6, v7);
      *(void *)(a1 + 8)  = v6;
      *(void *)(a1 + 16)  = v7;
    }
  }
  else if (*((void *)a2 + 2) >> 60 == 15)
  {
    sub_1000A4C6C(a1);
    uint64_t v5 = *((void *)a2 + 2);
    *(_OWORD *)a1  = *a2;
    *(void *)(a1 + 16)  = v5;
  }
  else
  {
    *(_WORD *)a1  = *(_WORD *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    unint64_t v9 = *((void *)a2 + 2);
    sub_100013D44(v8, v9);
    uint64_t v10 = *(void *)(a1 + 8);
    unint64_t v11 = *(void *)(a1 + 16);
    *(void *)(a1 + 8)  = v8;
    *(void *)(a1 + 16)  = v9;
    sub_10000C970(v10, v11);
  }
  *(unsigned char *)(a1 + 24)  = *((unsigned char *)a2 + 24);
  *(void *)(a1 + 32)  = *((void *)a2 + 4);
  *(void *)(a1 + 40)  = *((void *)a2 + 5);
  return a1;
}

uint64_t assignWithTake for NANPeer.Availability.EntryAttributes(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >> 60 != 15)
  {
    unint64_t v5 = *(void *)(a2 + 16);
    if (v5 >> 60 != 15)
    {
      *(_WORD *)a1  = *(_WORD *)a2;
      uint64_t v6 = *(void *)(a1 + 8);
      *(void *)(a1 + 8)  = *(void *)(a2 + 8);
      *(void *)(a1 + 16)  = v5;
      sub_10000C970(v6, v4);
      goto LABEL_6;
    }
    sub_1000A4C6C(a1);
  }
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
LABEL_6:
  *(unsigned char *)(a1 + 24)  = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANPeer.Availability.EntryAttributes(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  BOOL v4 = v3 >= 4;
  int v5 = v3 - 4;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANPeer.Availability.EntryAttributes(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 40)  = 0;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)unint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 48)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 48)  = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24)  = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANPeer.Availability.EntryAttributes()
{
  return &type metadata for NANPeer.Availability.EntryAttributes;
}

unint64_t sub_1002AA108()
{
  unint64_t result = qword_1004850B0;
  if (!qword_1004850B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004850B0);
  }
  return result;
}

uint64_t sub_1002AA170(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1  = *(void *)a2;
  *(void *)(a1 + 8)  = v3;
  *(_WORD *)(a1 + 16)  = *(_WORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s9GeneratorVwca(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8)  = v4;
  *(unsigned char *)(a1 + 17)  = *(unsigned char *)(a2 + 17);
  return a1;
}

uint64_t _s9GeneratorVwta(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16)  = *(_WORD *)(a2 + 16);
  return a1;
}

uint64_t _s9GeneratorVwet(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 18)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t _s9GeneratorVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + 16)  = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8)  = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 18)  = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 18)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *_s9GeneratorVMa()
{
  return &_s9GeneratorVN;
}

uint64_t sub_1002AA2E8(uint64_t a1, uint64_t a2, __int16 a3)
{
  char v3 = a3;
  size_t v4 = a2;
  if (a3)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    uint64_t v7 = (unsigned __int128)(v6 * (__int128)5) >> 64;
    uint64_t v8 = 5 * v6;
    if (v7 != v8 >> 63) {
      goto LABEL_41;
    }
    BOOL v9 = __OFADD__(v8, 7);
    unint64_t v10 = v8 + 7;
    if (v9)
    {
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    if (v10 < 0x208)
    {
      uint64_t v11 = v10 >> 3;
      if (v11 <= 6) {
        size_t v4 = 6;
      }
      else {
        size_t v4 = v11;
      }
    }
    else
    {
      size_t v4 = 64;
    }
  }
  unsigned int v38 = HIBYTE(a3);
  if (HIBYTE(a3) != 4)
  {
LABEL_14:
    long long v15 = (unsigned char *)swift_slowAlloc();
    if ((v4 & 0x8000000000000000) != 0) {
      goto LABEL_40;
    }
    long long v16 = v15;
    if (v4) {
      bzero(v15, v4);
    }
    uint64_t v34 = v4;
    uint64_t v35 = a1 + 56;
    uint64_t v17 = 1 << *(unsigned char *)(a1 + 32);
    uint64_t v18 = -1;
    if (v17 < 64) {
      uint64_t v18 = ~(-1 << v17);
    }
    unint64_t v19 = v18 & *(void *)(a1 + 56);
    int64_t v36 = (unint64_t)(v17 + 63) >> 6;
    char v20 = v3;
    swift_bridgeObjectRetain();
    int64_t v21 = 0;
    while (1)
    {
      if (v19)
      {
        unint64_t v22 = __clz(__rbit64(v19));
        v19 &= v19 - 1;
        unint64_t v23 = v22 | (v21 << 6);
      }
      else
      {
        int64_t v30 = v21 + 1;
        if (__OFADD__(v21, 1))
        {
          __break(1u);
          goto LABEL_39;
        }
        if (v30 >= v36) {
          goto LABEL_37;
        }
        unint64_t v31 = *(void *)(v35 + 8 * v30);
        ++v21;
        if (!v31)
        {
          int64_t v21 = v30 + 1;
          if (v30 + 1 >= v36) {
            goto LABEL_37;
          }
          unint64_t v31 = *(void *)(v35 + 8 * v21);
          if (!v31)
          {
            int64_t v21 = v30 + 2;
            if (v30 + 2 >= v36) {
              goto LABEL_37;
            }
            unint64_t v31 = *(void *)(v35 + 8 * v21);
            if (!v31)
            {
              int64_t v32 = v30 + 3;
              if (v32 >= v36)
              {
LABEL_37:
                swift_release();
                sub_100260F60(v16, v34);
                swift_slowDealloc();
                return v38;
              }
              unint64_t v31 = *(void *)(v35 + 8 * v32);
              if (!v31)
              {
                while (1)
                {
                  int64_t v21 = v32 + 1;
                  if (__OFADD__(v32, 1)) {
                    break;
                  }
                  if (v21 >= v36) {
                    goto LABEL_37;
                  }
                  unint64_t v31 = *(void *)(v35 + 8 * v21);
                  ++v32;
                  if (v31) {
                    goto LABEL_36;
                  }
                }
LABEL_39:
                __break(1u);
LABEL_40:
                __break(1u);
LABEL_41:
                __break(1u);
                goto LABEL_42;
              }
              int64_t v21 = v32;
            }
          }
        }
LABEL_36:
        unint64_t v19 = (v31 - 1) & v31;
        unint64_t v23 = __clz(__rbit64(v31)) + (v21 << 6);
      }
      unint64_t v24 = sub_1002AA624(*(unsigned __int16 *)(*(void *)(a1 + 48) + 6 * v23) | ((unint64_t)*(unsigned int *)(*(void *)(a1 + 48) + 6 * v23 + 2) << 16), v38, a1, a2, v20 & 1);
      int v26 = v25;
      unint64_t v27 = HIDWORD(v24);
      unint64_t v28 = HIDWORD(v25);
      v39[0]  = v24;
      unint64_t v29 = sub_1002AAB20();
      UnsafeMutablePointer<A>.set<A>(bit:)((uint64_t)v39, (uint64_t)v16, (char *)&type metadata for UInt32, v29);
      v39[0]  = v27;
      UnsafeMutablePointer<A>.set<A>(bit:)((uint64_t)v39, (uint64_t)v16, (char *)&type metadata for UInt32, v29);
      v39[0]  = v26;
      UnsafeMutablePointer<A>.set<A>(bit:)((uint64_t)v39, (uint64_t)v16, (char *)&type metadata for UInt32, v29);
      v39[0]  = v28;
      UnsafeMutablePointer<A>.set<A>(bit:)((uint64_t)v39, (uint64_t)v16, (char *)&type metadata for UInt32, v29);
    }
  }
  uint64_t v12 = static NANBloomFilter.Index.allCases.getter();
  unint64_t v13 = (unint64_t)v12[2];
  if (v13)
  {
    unint64_t v14 = sub_1002AAA94(v13);
    if ((v14 & 0x8000000000000000) == 0)
    {
      if (v14 < (unint64_t)v12[2])
      {
        unsigned int v38 = *((unsigned __int8 *)v12 + v14 + 32);
        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
      goto LABEL_44;
    }
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
  }
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_1002AA624(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) == 0) {
    goto LABEL_9;
  }
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = (unsigned __int128)(v6 * (__int128)5) >> 64;
  uint64_t v8 = 5 * v6;
  if (v7 != v8 >> 63)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  BOOL v9 = __OFADD__(v8, 7);
  unint64_t v10 = v8 + 7;
  if (!v9)
  {
    if (v10 > 0x207)
    {
      unint64_t v11 = 512;
      goto LABEL_11;
    }
    uint64_t v12 = v10 >> 3;
    if (v12 <= 6) {
      a4  = 6;
    }
    else {
      a4  = v12;
    }
LABEL_9:
    if ((unint64_t)(a4 - 0x1000000000000000) >> 61 != 7)
    {
      __break(1u);
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
    unint64_t v11 = 8 * a4;
LABEL_11:
    unint64_t v13 = a1 & 0xFFFFFFFFFFFFLL;
    uint64_t v14 = WiFiAddress.data.getter(a1 & 0xFFFFFFFFFFFFLL);
    unint64_t v16 = v15;
    unsigned int v17 = sub_1002AAB74(4 * a2, v14, v15);
    if ((v11 & 0x8000000000000000) != 0 || HIDWORD(v11)) {
      goto LABEL_19;
    }
    unsigned int v18 = v17;
    sub_10000C970(v14, v16);
    if (v11)
    {
      uint64_t v19 = v18 % v11;
      uint64_t v20 = WiFiAddress.data.getter(v13);
      unint64_t v22 = v21;
      unsigned int v23 = sub_1002AAB74((4 * a2) | 1u, v20, v21);
      sub_10000C970(v20, v22);
      uint64_t v24 = v23 % v11;
      uint64_t v25 = WiFiAddress.data.getter(v13);
      unint64_t v27 = v26;
      sub_1002AAB74((4 * a2) | 2, v25, v26);
      sub_10000C970(v25, v27);
      uint64_t v28 = WiFiAddress.data.getter(v13);
      unint64_t v30 = v29;
      sub_1002AAB74((4 * a2) | 3, v28, v29);
      sub_10000C970(v28, v30);
      return v19 | (v24 << 32);
    }
    goto LABEL_16;
  }
LABEL_18:
  __break(1u);
LABEL_19:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002AA86C(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain_n();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    int64_t v16 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v16 >= v6) {
      goto LABEL_25;
    }
    unint64_t v17 = *(void *)(v2 + 8 * v16);
    ++v8;
    if (!v17)
    {
      int64_t v8 = v16 + 1;
      if (v16 + 1 >= v6) {
        goto LABEL_25;
      }
      unint64_t v17 = *(void *)(v2 + 8 * v8);
      if (!v17)
      {
        int64_t v8 = v16 + 2;
        if (v16 + 2 >= v6) {
          goto LABEL_25;
        }
        unint64_t v17 = *(void *)(v2 + 8 * v8);
        if (!v17)
        {
          int64_t v8 = v16 + 3;
          if (v16 + 3 >= v6) {
            goto LABEL_25;
          }
          unint64_t v17 = *(void *)(v2 + 8 * v8);
          if (!v17)
          {
            int64_t v8 = v16 + 4;
            if (v16 + 4 >= v6) {
              goto LABEL_25;
            }
            unint64_t v17 = *(void *)(v2 + 8 * v8);
            if (!v17) {
              break;
            }
          }
        }
      }
    }
LABEL_24:
    unint64_t v5 = (v17 - 1) & v17;
    unint64_t v10 = __clz(__rbit64(v17)) + (v8 << 6);
LABEL_5:
    unint64_t v11 = (unsigned __int16 *)(*(void *)(a1 + 48) + 6 * v10);
    uint64_t v12 = *(unsigned int *)(v11 + 1);
    uint64_t v13 = *v11;
    swift_bridgeObjectRetain();
    v14._countAndFlagsBits  = 32;
    v14._object  = (void *)0xE100000000000000;
    String.append(_:)(v14);
    v15._countAndFlagsBits  = WiFiAddress.description.getter(v13 | (v12 << 16));
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v18 = v16 + 5;
  if (v18 >= v6)
  {
LABEL_25:
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v19._countAndFlagsBits  = 62;
    v19._object  = (void *)0xE100000000000000;
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    return 0xD000000000000016;
  }
  unint64_t v17 = *(void *)(v2 + 8 * v18);
  if (v17)
  {
    int64_t v8 = v18;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v8 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_25;
    }
    unint64_t v17 = *(void *)(v2 + 8 * v8);
    ++v18;
    if (v17) {
      goto LABEL_24;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1002AAA78()
{
  return sub_1002AA86C(*v0);
}

void sub_1002AAA80()
{
  off_1004850B8  = &off_100467080;
}

unint64_t sub_1002AAA94(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    swift_stdlib_random();
    uint64_t result = (0 * (unsigned __int128)v1) >> 64;
    if (-(uint64_t)v1 % v1)
    {
      while (1)
        swift_stdlib_random();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_1002AAB20()
{
  unint64_t result = qword_1004850C0;
  if (!qword_1004850C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004850C0);
  }
  return result;
}

uint64_t sub_1002AAB74(char a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = type metadata accessor for Data.Iterator();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  unint64_t v9 = (char *)&v25[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_10047BEF8);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16)  = xmmword_1003B2450;
  *(unsigned char *)(v10 + 32)  = a1;
  long long v26 = xmmword_1003B2440;
  uint64_t v11 = v10;
  uint64_t v12 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      LODWORD(v12)  = HIDWORD(a2) - a2;
      if (__OFSUB__(HIDWORD(a2), a2)) {
        goto LABEL_22;
      }
      uint64_t v12 = (int)v12;
LABEL_6:
      if (__OFADD__(v12, 1)) {
        goto LABEL_21;
      }
      Data._Representation.reserveCapacity(_:)(v12 + 1);
      uint64_t v16 = sub_100010BCC(&qword_10047E7D0);
      v25[3]  = v16;
      v25[4]  = sub_1002AAF84();
      v25[0]  = v11;
      sub_1000369C4(v25, v16);
      swift_bridgeObjectRetain();
      Data._Representation.append(contentsOf:)();
      sub_100010754((uint64_t)v25);
      sub_100013D44(a2, a3);
      sub_100125FAC(a2, a3);
      sub_10000C970(a2, a3);
      swift_bridgeObjectRelease();
      long long v17 = v26;
      switch(*((void *)&v26 + 1) >> 62)
      {
        case 1:
        case 2:
          sub_100013D44(v26, *((unint64_t *)&v26 + 1));
          sub_100013D44(v17, *((unint64_t *)&v17 + 1));
          break;
        default:
          break;
      }
      Data.Iterator.init(_:at:)();
      sub_10000C970(v17, *((unint64_t *)&v17 + 1));
      sub_100039280();
      dispatch thunk of IteratorProtocol.next()();
      if ((v25[0] & 0x100) != 0)
      {
        uint64_t v18 = 0xFFFFLL;
      }
      else
      {
        uint64_t v24 = v7;
        unsigned int v19 = -1;
        do
        {
          int v20 = LOBYTE(v25[0]);
          if (qword_100484160 != -1) {
            swift_once();
          }
          unint64_t v21 = *((void *)off_1004850B8 + 2);
          if (!v21 || v21 >= 0x100000001) {
            goto LABEL_24;
          }
          unint64_t v22 = (v21 - 1) & (v19 ^ v20);
          if (v21 <= v22)
          {
            __break(1u);
LABEL_21:
            __break(1u);
LABEL_22:
            __break(1u);
LABEL_23:
            __break(1u);
LABEL_24:
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            JUMPOUT(0x1002AAF64);
          }
          unsigned int v19 = *((_DWORD *)off_1004850B8 + v22 + 8) ^ (v19 >> 8);
          dispatch thunk of IteratorProtocol.next()();
        }
        while (BYTE1(v25[0]) != 1);
        uint64_t v18 = (unsigned __int16)v19;
        uint64_t v7 = v24;
      }
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      sub_10000C970(v17, *((unint64_t *)&v17 + 1));
      return v18;
    case 2uLL:
      uint64_t v14 = *(void *)(a2 + 16);
      uint64_t v13 = *(void *)(a2 + 24);
      BOOL v15 = __OFSUB__(v13, v14);
      uint64_t v12 = v13 - v14;
      if (!v15) {
        goto LABEL_6;
      }
      goto LABEL_23;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v12 = BYTE6(a3);
      goto LABEL_6;
  }
}

unint64_t sub_1002AAF84()
{
  unint64_t result = qword_10047FEA0;
  if (!qword_10047FEA0)
  {
    sub_100014434(&qword_10047E7D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FEA0);
  }
  return result;
}

void sub_1002AAFE0()
{
  type metadata accessor for NANPublish.Configuration();
  if (v0 <= 0x3F)
  {
    type metadata accessor for DispatchTime();
    if (v1 <= 0x3F)
    {
      type metadata accessor for Logger();
      if (v2 <= 0x3F)
      {
        sub_1002B673C();
        if (v3 <= 0x3F) {
          swift_initClassMetadata2();
        }
      }
    }
  }
}

uint64_t sub_1002AB15C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + qword_1004850E8);
  if (v3)
  {
    *(void *)(a1 + 24)  = swift_getObjectType();
    *(void *)a1  = v3;
  }
  else
  {
    *(_OWORD *)a1  = 0u;
    *(_OWORD *)(a1 + 16)  = 0u;
  }

  return swift_unknownObjectRetain();
}

uint64_t sub_1002AB1C4()
{
  uint64_t v1 = v0 + qword_1004887E8;
  swift_beginAccess();
  uint64_t result = type metadata accessor for NANPublish.Configuration();
  *(unsigned char *)(v1 + *(int *)(result + 80))  = 0;
  return result;
}

uint64_t sub_1002AB218()
{
  uint64_t v1 = (uint64_t *)(v0 + qword_100488808);
  swift_beginAccess();
  uint64_t v3 = *v1;
  _s17ResponderInstanceCMa();
  sub_1001B8154();
  type metadata accessor for Dictionary();
  swift_bridgeObjectRetain();
  Dictionary.removeValue(forKey:)();

  return sub_1002ACB3C(v3);
}

uint64_t sub_1002AB33C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)(a2 + 16) && (unint64_t v5 = sub_100031130(a1 & 0xFFFFFFFFFFFFFFLL), (v6 & 1) != 0))
  {
    unint64_t v7 = v5;
    uint64_t v8 = *(void *)(a2 + 56);
    uint64_t v9 = type metadata accessor for NANPeer.Service.AuthenticationStatus(0);
    uint64_t v16 = *(void *)(v9 - 8);
    sub_1002B9098(v8 + *(void *)(v16 + 72) * v7, a3, type metadata accessor for NANPeer.Service.AuthenticationStatus);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
    uint64_t v11 = a3;
    uint64_t v12 = 0;
    uint64_t v13 = v9;
  }
  else
  {
    uint64_t v14 = type metadata accessor for NANPeer.Service.AuthenticationStatus(0);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
    uint64_t v13 = v14;
    uint64_t v11 = a3;
    uint64_t v12 = 1;
  }

  return v10(v11, v12, 1, v13);
}

uint64_t sub_1002AB468(uint64_t a1)
{
  uint64_t v60 = type metadata accessor for NANPeer.Service.AuthenticationStatus.State(0);
  __chkstk_darwin();
  uint64_t v59 = (uint64_t *)((char *)&v48 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v62 = sub_100010BCC(&qword_1004852C8);
  __chkstk_darwin();
  unsigned int v49 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v5 = (char *)&v48 - v4;
  __chkstk_darwin();
  unint64_t v7 = (char *)&v48 - v6;
  __chkstk_darwin();
  uint64_t v9 = (char *)&v48 - v8;
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v57 = a1 + 64;
  uint64_t v11 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & v10;
  int64_t v58 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v61 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v15 = 0;
  double v56 = _swiftEmptyArrayStorage;
  if (!v13) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v16 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  int64_t v63 = v15;
  for (i  = v16 | (v15 << 6); ; i  = __clz(__rbit64(v31)) + (v32 << 6))
  {
    uint64_t v18 = *(void *)(v61 + 56);
    uint64_t v19 = *(void *)(v61 + 48) - i + 8 * i;
    __int16 v20 = *(_WORD *)(v19 + 4);
    char v21 = *(unsigned char *)(v19 + 6);
    uint64_t v22 = v18
        + *(void *)(*(void *)(type metadata accessor for NANPeer.Service.AuthenticationStatus(0) - 8) + 72) * i;
    uint64_t v23 = v62;
    int v24 = *(_DWORD *)v19;
    sub_1002B9098(v22, (uint64_t)&v9[*(int *)(v62 + 48)], type metadata accessor for NANPeer.Service.AuthenticationStatus);
    *(_DWORD *)uint64_t v9 = v24;
    *((_WORD *)v9 + 2)  = v20;
    void v9[6] = v21;
    sub_10006EC68((uint64_t)v9, (uint64_t)v7, &qword_1004852C8);
    uint64_t v25 = *(int *)(v23 + 48);
    uint64_t v26 = (uint64_t)&v5[v25];
    uint64_t v27 = (uint64_t)&v7[v25];
    LOWORD(v25)  = *((_WORD *)v7 + 2);
    char v28 = v7[6];
    *(_DWORD *)unint64_t v5 = *(_DWORD *)v7;
    *((_WORD *)v5 + 2)  = v25;
    v5[6]  = v28;
    sub_1002B9098(v27, v26, type metadata accessor for NANPeer.Service.AuthenticationStatus);
    unint64_t v29 = v59;
    sub_1002B9098(v26, (uint64_t)v59, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
    sub_1002B910C(v26, type metadata accessor for NANPeer.Service.AuthenticationStatus);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v55 = *v29;
      uint64_t v34 = v49;
      uint64_t v35 = (uint64_t)&v49[*(int *)(v62 + 48)];
      char v36 = *v7;
      char v37 = v7[1];
      int v38 = v7[2];
      int v39 = v7[3];
      int v40 = v7[4];
      int v41 = v7[5];
      int v42 = v7[6];
      unsigned char *v49 = *v7;
      char v43 = v37;
      v34[1]  = v37;
      int v53 = v39;
      int v54 = v38;
      v34[2]  = v38;
      v34[3]  = v39;
      int v51 = v41;
      int v52 = v40;
      v34[4]  = v40;
      v34[5]  = v41;
      int v50 = v42;
      v34[6]  = v42;
      sub_1002B9098(v27, v35, type metadata accessor for NANPeer.Service.AuthenticationStatus);
      sub_1002B910C(v35, type metadata accessor for NANPeer.Service.AuthenticationStatus);
      sub_1000380B4((uint64_t)v7, &qword_1004852C8);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_100330538(0, v56[2] + 1, 1, v56);
        double v56 = (void *)result;
      }
      unint64_t v45 = v56[2];
      unint64_t v44 = v56[3];
      if (v45 >= v44 >> 1)
      {
        uint64_t result = (uint64_t)sub_100330538((void *)(v44 > 1), v45 + 1, 1, v56);
        double v56 = (void *)result;
      }
      uint64_t v46 = v56;
      v56[2]  = v45 + 1;
      unint64_t v47 = &v46[2 * v45];
      *((unsigned char *)v47 + 32)  = v36;
      *((unsigned char *)v47 + 33)  = v43;
      *((unsigned char *)v47 + 34)  = v54;
      *((unsigned char *)v47 + 35)  = v53;
      *((unsigned char *)v47 + 36)  = v52;
      *((unsigned char *)v47 + 37)  = v51;
      *((unsigned char *)v47 + 38)  = v50;
      v47[5]  = v55;
      int64_t v15 = v63;
      if (v13) {
        goto LABEL_4;
      }
    }
    else
    {
      sub_1002B910C((uint64_t)v29, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
      uint64_t result = sub_1000380B4((uint64_t)v7, &qword_1004852C8);
      int64_t v15 = v63;
      if (v13) {
        goto LABEL_4;
      }
    }
LABEL_7:
    int64_t v30 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v30 >= v58) {
      goto LABEL_29;
    }
    unint64_t v31 = *(void *)(v57 + 8 * v30);
    int64_t v32 = v15 + 1;
    if (!v31)
    {
      int64_t v32 = v15 + 2;
      if (v15 + 2 >= v58) {
        goto LABEL_29;
      }
      unint64_t v31 = *(void *)(v57 + 8 * v32);
      if (!v31)
      {
        int64_t v32 = v15 + 3;
        if (v15 + 3 >= v58) {
          goto LABEL_29;
        }
        unint64_t v31 = *(void *)(v57 + 8 * v32);
        if (!v31)
        {
          int64_t v32 = v15 + 4;
          if (v15 + 4 >= v58) {
            goto LABEL_29;
          }
          unint64_t v31 = *(void *)(v57 + 8 * v32);
          if (!v31) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v13 = (v31 - 1) & v31;
    int64_t v63 = v32;
  }
  uint64_t v33 = v15 + 5;
  if (v15 + 5 >= v58)
  {
LABEL_29:
    swift_release();
    return (uint64_t)v56;
  }
  unint64_t v31 = *(void *)(v57 + 8 * v33);
  if (v31)
  {
    int64_t v32 = v15 + 5;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v32 = v33 + 1;
    if (__OFADD__(v33, 1)) {
      break;
    }
    if (v32 >= v58) {
      goto LABEL_29;
    }
    unint64_t v31 = *(void *)(v57 + 8 * v32);
    ++v33;
    if (v31) {
      goto LABEL_22;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1002AB9B4()
{
  return swift_unownedRetainStrong();
}

uint64_t sub_1002AB9C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + qword_1004887E8;
  swift_beginAccess();
  return sub_1002B9098(v3, a1, (uint64_t (*)(void))type metadata accessor for NANPublish.Configuration);
}

uint64_t sub_1002ABA2C(uint64_t a1)
{
  if (!*(void *)(a1 + 24))
  {
    sub_1000380B4(a1, &qword_10047D0D0);
    goto LABEL_5;
  }
  sub_100010BCC(&qword_100485290);
  if (!swift_dynamicCast())
  {
LABEL_5:
    uint64_t v2 = 0;
    goto LABEL_6;
  }
  uint64_t v2 = v4;
LABEL_6:
  *(void *)(v1 + qword_1004850E8)  = v2;
  return swift_unknownObjectRelease();
}

uint64_t sub_1002ABABC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + qword_1004887F8;
  uint64_t v4 = type metadata accessor for Logger();
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_1002ABB30()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)v19 - v3;
  uint64_t v5 = v0 + qword_1004887E8;
  swift_beginAccess();
  uint64_t v6 = type metadata accessor for NANPublish.Configuration();
  sub_1000136F4(v5 + *(int *)(v6 + 88), (uint64_t)v21, (uint64_t *)&unk_100486320);
  unsigned __int8 v7 = v22;
  if (v22 == 255) {
    return sub_1000380B4((uint64_t)v21, (uint64_t *)&unk_100486320);
  }
  uint64_t result = sub_1001B7D50((uint64_t)v21);
  if ((v7 & 1) == 0)
  {
    uint64_t v20 = v2;
    _s17ResponderInstanceCMa();
    sub_1001B8154();
    if ((Dictionary.isEmpty.getter() & 1) != 0
      && (swift_beginAccess(),
          swift_bridgeObjectRetain(),
          char v9 = Dictionary.isEmpty.getter(),
          swift_bridgeObjectRelease(),
          (v9 & 1) == 0))
    {
      sub_1002ABFCC();
    }
    else if ((Dictionary.isEmpty.getter() & 1) == 0)
    {
      uint64_t v10 = v0 + qword_100488808;
      swift_beginAccess();
      v19[1]  = v10;
      swift_bridgeObjectRetain();
      LOBYTE(v10)  = Dictionary.isEmpty.getter();
      swift_bridgeObjectRelease();
      if (v10)
      {
        uint64_t v11 = *(void *)(v0 + qword_1004850D0);
        swift_unownedRetainStrong();
        uint64_t v12 = v20;
        (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v4, v11 + *(void *)(*(void *)v11 + 96), AssociatedTypeWitness);
        swift_release();
        swift_bridgeObjectRetain();
        uint64_t v13 = Dictionary.count.getter();
        swift_bridgeObjectRelease();
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedConformanceWitness + 8) + 16))(v13, AssociatedTypeWitness);
        (*(void (**)(char *, uint64_t))(v12 + 8))(v4, AssociatedTypeWitness);
        return sub_1002AC70C();
      }
    }
    uint64_t v15 = *(void *)(v0 + qword_1004850D0);
    swift_unownedRetainStrong();
    uint64_t v16 = v20;
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v4, v15 + *(void *)(*(void *)v15 + 96), AssociatedTypeWitness);
    swift_release();
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v17 = Dictionary.count.getter();
    swift_bridgeObjectRelease();
    uint64_t v18 = swift_getAssociatedConformanceWitness();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 + 8) + 16))(v17, AssociatedTypeWitness);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v4, AssociatedTypeWitness);
  }
  return result;
}

uint64_t sub_1002ABFCC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)((swift_isaMask & *v0) + 0x58);
  uint64_t v3 = *(void *)((swift_isaMask & *v0) + 0x50);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  unsigned __int8 v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  char v9 = (char *)&v45 - v8;
  uint64_t v10 = (char *)v0 + qword_1004887E8;
  swift_beginAccess();
  uint64_t v11 = type metadata accessor for NANPublish.Configuration();
  sub_1000136F4((uint64_t)&v10[*(int *)(v11 + 88)], (uint64_t)v61, (uint64_t *)&unk_100486320);
  if (v63 == 255) {
    return sub_1000380B4((uint64_t)v61, (uint64_t *)&unk_100486320);
  }
  if (v63) {
    return sub_1001B7D50((uint64_t)v61);
  }
  unint64_t v13 = v61[1];
  uint64_t v57 = v61[0];
  unsigned int v51 = v62;
  uint64_t v14 = sub_1002AEC50();
  (*(void (**)(uint64_t))(*v14 + 192))(1);
  swift_release();
  uint64_t v15 = sub_1002AEC50();
  uint64_t v16 = (void *)((char *)v15 + *(void *)(*v15 + 104));
  uint64_t v17 = v16[1];
  uint64_t v58 = *v16;
  swift_bridgeObjectRetain();
  swift_release();
  unint64_t v55 = v17;
  swift_bridgeObjectRetain_n();
  id v18 = v1;
  swift_bridgeObjectRetain_n();
  uint64_t v19 = (char *)v18;
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  LODWORD(v56)  = v21;
  BOOL v22 = os_log_type_enabled(v20, v21);
  int v52 = v7;
  int v54 = v9;
  if (v22)
  {
    uint64_t v23 = swift_slowAlloc();
    os_log_t v47 = v20;
    uint64_t v24 = v23;
    int v50 = (void (*)(char *, uint64_t, uint64_t))swift_slowAlloc();
    uint64_t v48 = (void (*)(uint64_t, unint64_t, uint64_t, unint64_t, void, void (*)(uint64_t), void *, uint64_t (*)(__int16), void *, uint64_t, uint64_t))swift_slowAlloc();
    v61[0]  = (uint64_t)v48;
    *(_DWORD *)uint64_t v24 = 138412802;
    uint64_t v49 = AssociatedTypeWitness;
    uint64_t v46 = v3;
    uint64_t v59 = (uint64_t)v19;
    unint64_t v45 = &v60;
    uint64_t v25 = v19;
    uint64_t v3 = v46;
    uint64_t AssociatedTypeWitness = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(void *)int v50 = v1;

    *(_WORD *)(v24 + 12)  = 2080;
    swift_bridgeObjectRetain();
    uint64_t v59 = sub_100010680(v57, v13, v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v24 + 22)  = 2080;
    unint64_t v26 = v55;
    swift_bridgeObjectRetain();
    uint64_t v59 = sub_100010680(v58, v26, v61);
    char v9 = v54;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    os_log_t v27 = v47;
    _os_log_impl((void *)&_mh_execute_header, v47, (os_log_type_t)v56, "%@ is attempting to starting sharing internet from %s to %s", (uint8_t *)v24, 0x20u);
    sub_100010BCC(&qword_10047CC30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v28 = v57;
  uint64_t v53 = v5;
  uint64_t v29 = *(void *)&v19[qword_1004850D0];
  swift_unownedRetainStrong();
  uint64_t v30 = v29 + *(void *)(*(void *)v29 + 96);
  unint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v49 = v5 + 16;
  int v50 = v31;
  v31(v9, v30, AssociatedTypeWitness);
  swift_release();
  uint64_t v32 = swift_allocObject();
  uint64_t v56 = v32;
  swift_unknownObjectWeakInit();
  uint64_t v33 = (void *)swift_allocObject();
  v33[2]  = v3;
  v33[3]  = v2;
  v33[4]  = v32;
  v33[5]  = v28;
  uint64_t v34 = v58;
  v33[6]  = v13;
  v33[7]  = v34;
  unint64_t v35 = v55;
  v33[8]  = v55;
  uint64_t v36 = swift_allocObject();
  swift_unknownObjectWeakInit();
  char v37 = (void *)swift_allocObject();
  uint64_t v37[2] = v3;
  v37[3]  = v2;
  v37[4]  = v36;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v39 = *(void *)(AssociatedConformanceWitness + 8);
  uint64_t v48 = *(void (**)(uint64_t, unint64_t, uint64_t, unint64_t, void, void (*)(uint64_t), void *, uint64_t (*)(__int16), void *, uint64_t, uint64_t))(v39 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v44 = v39;
  int v40 = v54;
  v48(v57, v13, v58, v35, v51, sub_1002B8514, v33, sub_1002B8644, v37, AssociatedTypeWitness, v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v41 = v53;
  swift_release();
  int v42 = *(void (**)(char *, uint64_t))(v41 + 8);
  v42(v40, AssociatedTypeWitness);
  swift_release();
  swift_release();
  swift_unownedRetainStrong();
  char v43 = v52;
  v50(v52, v29 + *(void *)(*(void *)v29 + 96), AssociatedTypeWitness);
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 320))(1, AssociatedTypeWitness, AssociatedConformanceWitness);
  return ((uint64_t (*)(char *, uint64_t))v42)(v43, AssociatedTypeWitness);
}

uint64_t sub_1002AC70C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)((swift_isaMask & *v0) + 0x58);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v29 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v28 = (char *)&v24 - v6;
  unsigned __int8 v7 = v0;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v26 = v2;
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    os_log_t v24 = v8;
    uint64_t v12 = (void *)v11;
    uint64_t v27 = v4;
    *(_DWORD *)uint64_t v10 = 138412290;
    uint64_t v30 = v7;
    unint64_t v13 = v7;
    uint64_t v25 = v7;
    id v14 = v13;
    uint64_t v4 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v12 = v1;

    uint64_t v8 = v24;
    unsigned __int8 v7 = v25;
    _os_log_impl((void *)&_mh_execute_header, v24, v9, "%@ is attempting to stop sharing internet", v10, 0xCu);
    sub_100010BCC(&qword_10047CC30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v15 = *(void *)((char *)v7 + qword_1004850D0);
  swift_unownedRetainStrong();
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  uint64_t v17 = v28;
  v16(v28, v15 + *(void *)(*(void *)v15 + 96), AssociatedTypeWitness);
  swift_release();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t))(*(void *)(AssociatedConformanceWitness + 8) + 24))(AssociatedTypeWitness);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v4 + 8);
  v19(v17, AssociatedTypeWitness);
  swift_unownedRetainStrong();
  uint64_t v20 = v29;
  v16(v29, v15 + *(void *)(*(void *)v15 + 96), AssociatedTypeWitness);
  swift_release();
  (*(void (**)(void, uint64_t, uint64_t))(AssociatedConformanceWitness + 320))(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  v19(v20, AssociatedTypeWitness);
  swift_unownedRetainStrong();
  uint64_t v21 = v15 + *(void *)(*(void *)v15 + 680);
  swift_beginAccess();
  *(unsigned char *)(v21 + 16)  = 0;
  *(void *)uint64_t v21 = 0;
  *(void *)(v21 + 8)  = 0;
  swift_release();
  swift_bridgeObjectRelease();
  BOOL v22 = sub_1002AEC50();
  (*(void (**)(void))(*v22 + 192))(0);
  return swift_release();
}

uint64_t sub_1002ACB3C(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + qword_100488808);
  swift_beginAccess();
  *uint64_t v3 = a1;
  sub_1002ABB30();
  return swift_bridgeObjectRelease();
}

NSObject *sub_1002ACBA4(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return sub_1002ACBF0(a1, a2);
}

NSObject *sub_1002ACBF0(uint64_t a1, uint64_t a2)
{
  uint64_t v86 = a1;
  uint64_t v87 = a2;
  ObjectType  = (objc_class *)swift_getObjectType();
  uint64_t v3 = swift_isaMask & *v2;
  uint64_t v4 = type metadata accessor for LongTermPairingKeys(0);
  uint64_t v82 = *(void *)(v4 - 8);
  uint64_t v83 = v4;
  __chkstk_darwin();
  uint64_t v74 = (uint64_t)v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = *(void *)(v3 + 88);
  uint64_t v6 = *(void *)(v85 + 8);
  uint64_t v81 = *(void *)(v3 + 80);
  uint64_t v77 = v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v78 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v79 = AssociatedTypeWitness;
  __chkstk_darwin();
  uint64_t v75 = (char *)v61 - v8;
  sub_100010BCC(&qword_1004852C0);
  __chkstk_darwin();
  uint64_t v80 = (uint64_t)v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v76 = (char *)v61 - v10;
  uint64_t v11 = type metadata accessor for DispatchTimeInterval();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  id v14 = (char *)v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchTime();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin();
  id v18 = (char *)v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((unsigned char *)v2 + qword_1004887F0)  = 0;
  uint64_t v19 = (char *)v2 + qword_1004850D8;
  type metadata accessor for P2PTimer();
  char v71 = v2;
  uint64_t v20 = v2;
  variable initialization expression of AWDLPeer.lastUpdated();
  uint64_t v21 = NANConstants.maximumServiceRetryRate.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v21, v11);
  uint64_t v70 = v19;
  - infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  BOOL v22 = *(void (**)(char *, uint64_t))(v16 + 8);
  uint64_t v72 = v16 + 8;
  uint64_t v73 = v15;
  unint64_t v67 = v22;
  v22(v18, v15);
  uint64_t v65 = qword_1004850E0;
  *(void *)((char *)v20 + qword_1004850E0)  = 0;
  uint64_t v23 = qword_1004850E8;
  *(void *)((char *)v20 + qword_1004850E8)  = 0;
  uint64_t v66 = qword_1004850F0;
  *(void *)((char *)v20 + qword_1004850F0)  = 0;
  os_log_t v24 = (char *)v20 + qword_1004887F8;
  Logger.init(subsystem:category:)();
  uint64_t v68 = qword_1004850F8;
  *(void *)((char *)v20 + qword_1004850F8)  = 0;
  uint64_t v25 = qword_100488800;
  *(void *)((char *)v20 + qword_100488800)  = _swiftEmptyDictionarySingleton;
  *(_DWORD *)((char *)v20 + qword_100485108)  = -1;
  uint64_t v26 = qword_100488808;
  uint64_t v27 = v81;
  uint64_t v28 = v87;
  _s17ResponderInstanceCMa();
  sub_1001B8154();
  uint64_t v29 = v86;
  uint64_t v30 = Dictionary.init()();
  uint64_t v69 = v26;
  *(void *)((char *)v20 + v26)  = v30;
  uint64_t v63 = qword_1004850D0;
  *(void *)((char *)v20 + qword_1004850D0)  = v29;
  uint64_t v64 = (uint64_t)v20 + qword_1004887E8;
  sub_1002B9098(v28, (uint64_t)v20 + qword_1004887E8, (uint64_t (*)(void))type metadata accessor for NANPublish.Configuration);
  uint64_t v31 = *(int *)(type metadata accessor for NANPublish.Configuration() + 96);
  if (*(unsigned char *)(v28 + v31))
  {
    uint64_t v32 = v27;
    uint64_t v34 = v82;
    uint64_t v33 = v83;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v82 + 56))((uint64_t)v20 + qword_100485100, 1, 1, v83);
    swift_unownedRetain();
  }
  else
  {
    v61[0]  = v23;
    v61[1]  = v25;
    unsigned __int8 v62 = v24;
    swift_unownedRetainStrong();
    uint64_t v36 = v78;
    uint64_t v35 = v79;
    char v37 = v75;
    (*(void (**)(char *, uint64_t, uint64_t))(v78 + 16))(v75, v29 + *(void *)(*(void *)v29 + 112), v79);
    swift_unownedRetain();
    swift_release();
    uint64_t v32 = v27;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 128))(v35, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v35);
    uint64_t v40 = (uint64_t)v76;
    (*(void (**)(void, void, BOOL))(*(void *)v39 + 136))(*(void *)(v28 + 8), *(void *)(v28 + 16), (*(unsigned char *)(v28 + v31) & 1) == 0);
    swift_release();
    uint64_t v41 = (uint64_t)v20 + qword_100485100;
    uint64_t v42 = v28;
    sub_10006EC68(v40, (uint64_t)v20 + qword_100485100, &qword_1004852C0);
    uint64_t v43 = v80;
    sub_1000136F4(v41, v80, &qword_1004852C0);
    uint64_t v34 = v82;
    uint64_t v33 = v83;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v82 + 48))(v43, 1, v83) == 1)
    {
      sub_1000380B4(v43, &qword_1004852C0);
      sub_10000F000();
      swift_allocError();
      *(_OWORD *)uint64_t v44 = xmmword_1003D5850;
      *(unsigned char *)(v44 + 16)  = 1;
      swift_willThrow();
      swift_release();
      sub_1002B910C(v42, (uint64_t (*)(void))type metadata accessor for NANPublish.Configuration);
      swift_unownedRelease();
      sub_1002B910C(v64, (uint64_t (*)(void))type metadata accessor for NANPublish.Configuration);
      v67(v70, v73);
      swift_release();
      swift_unknownObjectRelease();

      uint64_t v45 = type metadata accessor for Logger();
      (*(void (**)(char *, uint64_t))(*(void *)(v45 - 8) + 8))(v62, v45);
      swift_release();
      sub_1000380B4(v41, &qword_1004852C0);
      swift_bridgeObjectRelease();
      uint64_t v46 = *(NSObject **)((char *)v20 + v69);

      swift_bridgeObjectRelease();
      swift_deallocPartialClassInstance();
      return v46;
    }

    sub_1000380B4(v43, &qword_1004852C0);
  }
  v88.receiver  = v20;
  v88.super_class  = ObjectType;
  id v47 = [super init];
  uint64_t v48 = (uint64_t)v47 + qword_100485100;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))((uint64_t)v47 + qword_100485100, 1, v33))
  {
    id v49 = v47;
  }
  else
  {
    uint64_t v50 = v74;
    sub_1002B9098(v48, v74, type metadata accessor for LongTermPairingKeys);
    uint64_t v51 = swift_allocObject();
    swift_unknownObjectWeakInit();
    int v52 = (void *)swift_allocObject();
    uint64_t v53 = v85;
    v52[2]  = v32;
    v52[3]  = v53;
    v52[4]  = v51;
    id v54 = v47;
    swift_retain();
    LongTermPairingKeys.updatedPairedDevicesHandler.setter((uint64_t)sub_1002B9100, (uint64_t)v52);
    sub_1002B910C(v50, type metadata accessor for LongTermPairingKeys);
    swift_release();
  }
  uint64_t v46 = v47;
  unint64_t v55 = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v55, v56))
  {
    uint64_t v57 = (uint8_t *)swift_slowAlloc();
    uint64_t v58 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v57 = 138412290;
    char v89 = v46;
    uint64_t v59 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v58 = v46;

    _os_log_impl((void *)&_mh_execute_header, v55, v56, "Created %@", v57, 0xCu);
    sub_100010BCC(&qword_10047CC30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    unint64_t v55 = v46;
  }

  swift_release();
  sub_1002B910C(v87, (uint64_t (*)(void))type metadata accessor for NANPublish.Configuration);
  return v46;
}

void sub_1002AD6D8()
{
  swift_beginAccess();
  Strong  = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    if (*(unsigned char *)(Strong + qword_1004887F0) == 1) {
      sub_1002AD740();
    }
  }
}

uint64_t sub_1002AD740()
{
  uint64_t v1 = (uint64_t *)(v0 + qword_100488800);
  swift_beginAccess();
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = sub_1002B8658(v2);
  swift_bridgeObjectRelease();
  *uint64_t v1 = v3;
  swift_bridgeObjectRelease();
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = sub_1002AB468(v4);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    unsigned __int8 v7 = (unsigned __int8 *)(v5 + 32);
    swift_bridgeObjectRetain();
    do
    {
      unint64_t v8 = (unint64_t)*(unsigned int *)(v7 + 3) << 24;
      uint64_t v9 = v7[2];
      uint64_t v10 = v7[1];
      unsigned int v11 = *v7;
      v7 += 16;
      unint64_t v12 = v8 | (v9 << 16) | v11 | (v10 << 8);
      uint64_t v13 = swift_bridgeObjectRetain();
      sub_1002B6A50(v13, v12);
      swift_bridgeObjectRelease();
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

id sub_1002AD844()
{
  uint64_t v1 = v0;
  ObjectType  = swift_getObjectType();
  sub_100010BCC(&qword_1004852C0);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  unsigned __int8 v7 = (char *)&v34 - v6;
  unint64_t v8 = (int *)&v0[qword_100485108];
  swift_beginAccess();
  if (notify_is_valid_token(*v8))
  {
    uint32_t v9 = notify_cancel(*v8);
    *unint64_t v8 = -1;
    if (v9)
    {
      int v10 = v9;
      unsigned int v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v11, v12))
      {
        char v37 = (uint8_t *)swift_slowAlloc();
        uint64_t v36 = swift_slowAlloc();
        v42[0]  = v36;
        os_log_t v35 = v11;
        uint64_t v13 = v37;
        *(_DWORD *)char v37 = 136315138;
        uint64_t v34 = v13 + 4;
        unint64_t v14 = static WiFiError.notifyErrorMessage(from:)(v10);
        uint64_t v39 = sub_100010680(v14, v15, v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        os_log_t v16 = v35;
        _os_log_impl((void *)&_mh_execute_header, v35, v12, "Failed to cancel monitoring statistic reset events with error: %s", v37, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
    }
  }
  if (v1[qword_1004887F0] == 1)
  {
    uint64_t v17 = *(void *)&v1[qword_1004850D0];
    swift_unownedRetainStrong();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v17 + *(void *)(*(void *)v17 + 96), AssociatedTypeWitness);
    swift_release();
    id v18 = &v1[qword_1004887E8];
    swift_beginAccess();
    uint64_t v19 = *v18;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 240))(v19, AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  }
  uint64_t v21 = &v1[qword_100488808];
  swift_beginAccess();
  uint64_t v22 = *(void *)v21;
  _s17ResponderInstanceCMa();
  sub_1001B8154();
  uint64_t v41 = NANBitmap.Channel.operatingClass.getter(v22);
  __chkstk_darwin();
  *(&v34 - 2)  = v1;
  type metadata accessor for Dictionary.Keys();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  Sequence.forEach(_:)();
  swift_bridgeObjectRelease();
  uint64_t v23 = qword_1004850E8;
  os_log_t v24 = *(void **)&v1[qword_1004850E8];
  if (v24) {
    [v24 publishTerminatedWithReason:-1];
  }
  *(void *)&v1[v23]  = 0;
  swift_unknownObjectRelease();
  sub_1000136F4((uint64_t)&v1[qword_100485100], (uint64_t)v3, &qword_1004852C0);
  uint64_t v25 = type metadata accessor for LongTermPairingKeys(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v3, 1, v25) == 1)
  {
    sub_1000380B4((uint64_t)v3, &qword_1004852C0);
  }
  else
  {
    LongTermPairingKeys.updatedPairedDevicesHandler.setter(0, 0);
    sub_1002B910C((uint64_t)v3, type metadata accessor for LongTermPairingKeys);
  }
  uint64_t v26 = v1;
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v29 = 138412290;
    uint64_t v41 = (uint64_t)v26;
    uint64_t v31 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v30 = v1;

    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Destroyed %@", v29, 0xCu);
    sub_100010BCC(&qword_10047CC30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v27 = v26;
  }
  uint64_t v32 = (objc_class *)ObjectType;

  v40.receiver  = v26;
  v40.super_class  = v32;
  return [super dealloc];
}

unsigned __int8 *sub_1002ADF04(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + qword_1004850E8);
  if (v2)
  {
    unint64_t v3 = (unint64_t)*(unsigned int *)(result + 3) << 24;
    uint64_t v4 = result[2];
    uint64_t v5 = result[1];
    uint64_t v6 = *result;
    sub_10027E60C();
    swift_unknownObjectRetain();
    id v7 = WiFiAwarePublisherDataSessionHandle.init(_:)(v3 | (v4 << 16) | (v5 << 8) | v6);
    [v2 publishDataTerminatedForHandle:v7 reason:-1];

    return (unsigned __int8 *)swift_unknownObjectRelease();
  }
  return result;
}

id sub_1002ADFB4(void *a1)
{
  id v1 = a1;
  return sub_1002AD844();
}

uint64_t sub_1002ADFDC(uint64_t a1)
{
  swift_unownedRelease();
  sub_1002B910C(a1 + qword_1004887E8, (uint64_t (*)(void))type metadata accessor for NANPublish.Configuration);
  uint64_t v2 = a1 + qword_1004850D8;
  uint64_t v3 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_release();
  swift_unknownObjectRelease();

  uint64_t v4 = a1 + qword_1004887F8;
  uint64_t v5 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_release();
  sub_1000380B4(a1 + qword_100485100, &qword_1004852C0);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1002AE13C()
{
  uint64_t v2 = v0;
  uint64_t v3 = swift_isaMask & *v0;
  uint64_t v86 = type metadata accessor for NANPublish.Configuration();
  __chkstk_darwin();
  uint64_t v5 = (char *)v76 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v3 + 88);
  uint64_t v7 = *(void *)(v3 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  unsigned int v11 = (char *)v76 - v10;
  type metadata accessor for OWEKeys();
  __chkstk_darwin();
  uint64_t v13 = (char *)v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_1004852C0);
  uint64_t result = __chkstk_darwin();
  if (*((unsigned char *)v2 + qword_1004887F0)) {
    return result;
  }
  uint64_t v82 = (uint64_t)v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = v13;
  v76[1]  = v7;
  v76[2]  = v6;
  uint64_t v77 = v11;
  uint64_t v78 = v9;
  uint64_t v79 = AssociatedTypeWitness;
  uint64_t v80 = v5;
  v76[0]  = qword_1004887F0;
  uint64_t v81 = v1;
  uint64_t v16 = *(void *)((char *)v2 + qword_1004850D0);
  swift_unownedRetainStrong();
  uint64_t v17 = WiFiInterface.macAddress.getter();
  uint64_t v85 = v16;
  swift_release();
  id v18 = (unsigned __int8 *)v2 + qword_1004887E8;
  swift_beginAccess();
  *((_WORD *)v18 + 39)  = v17;
  v18[80]  = BYTE2(v17);
  v18[81]  = BYTE3(v17);
  v18[82]  = BYTE4(v17);
  uint64_t v19 = v18;
  v18[83]  = BYTE5(v17);
  char v84 = v2;
  uint64_t v20 = sub_1002AEC50();
  uint64_t v21 = (*(uint64_t (**)(void *))(*v20 + 232))(v20);
  uint64_t result = swift_release();
  *((_WORD *)v18 + 42)  = v21;
  v18[86]  = BYTE2(v21);
  v18[87]  = BYTE3(v21);
  v18[88]  = BYTE4(v21);
  v18[89]  = BYTE5(v21);
  uint64_t v22 = *(void *)&v18[*(int *)(v86 + 84) + 16];
  uint64_t v87 = *(void *)(v22 + 16);
  if (!v87)
  {
LABEL_12:
    uint64_t v45 = v84;
    uint64_t v46 = v82;
    sub_1000136F4((uint64_t)v84 + qword_100485100, v82, &qword_1004852C0);
    uint64_t v47 = type metadata accessor for LongTermPairingKeys(0);
    int v48 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 48))(v46, 1, v47);
    uint64_t v49 = (uint64_t)v83;
    if (v48 == 1)
    {
      sub_1000380B4(v46, &qword_1004852C0);
      uint64_t v50 = 0;
      unint64_t v51 = 0xF000000000000000;
      uint64_t v52 = v81;
      uint64_t v53 = v85;
    }
    else
    {
      sub_1002B9098((uint64_t)&v19[*(int *)(v86 + 92)], (uint64_t)v83, (uint64_t (*)(void))type metadata accessor for OWEKeys);
      uint64_t v53 = v85;
      swift_unownedRetainStrong();
      uint64_t v54 = WiFiInterface.macAddress.getter();
      swift_release();
      uint64_t v50 = LongTermPairingKeys.authenticationToken(using:on:)(v49, v54 & 0xFFFFFFFFFFFFLL);
      unint64_t v51 = v55;
      sub_1002B910C(v49, (uint64_t (*)(void))type metadata accessor for OWEKeys);
      sub_1002B910C(v46, type metadata accessor for LongTermPairingKeys);
      uint64_t v52 = v81;
    }
    swift_beginAccess();
    uint64_t v94 = *((void *)v19 + 3);
    swift_bridgeObjectRetain();
    NANGenericServiceProtocol.publisherAuthenticationToken.setter(v50, v51);
    NANPublish.Configuration.serviceSpecificInfo.setter(v94);
    swift_endAccess();
    v19[77]  = sub_1002AED84();
    sub_1002AEF04();
    swift_unownedRetainStrong();
    sub_1003546AC();
    if (v52)
    {
      swift_release();
      uint64_t v94 = v52;
      swift_errorRetain();
      sub_100010BCC((uint64_t *)&unk_1004843F0);
      if (!swift_dynamicCast()) {
        return swift_errorRelease();
      }
      if (v93 != 1)
      {
        sub_100012AA4((uint64_t)v91, v92, v93);
        return swift_errorRelease();
      }
      if (v91 != (id)7) {
        return swift_errorRelease();
      }
      swift_errorRelease();
      swift_unownedRetainStrong();
      char v61 = sub_100355DD4();
      swift_release();
      if (v61)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v62 & 1) == 0)
        {
          sub_10000F000();
          swift_allocError();
          *(_OWORD *)uint64_t v63 = xmmword_1003B0090;
          *(unsigned char *)(v63 + 16)  = 1;
          swift_willThrow();
          return swift_errorRelease();
        }
      }
      char v89 = v19;
      id v64 = v45;
      uint64_t v65 = Logger.logObject.getter();
      os_log_type_t v66 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v65, v66))
      {
        unint64_t v67 = (uint8_t *)swift_slowAlloc();
        uint64_t v68 = (void *)swift_slowAlloc();
        *(_DWORD *)unint64_t v67 = 138412290;
        id v90 = v64;
        id v69 = v64;
        uint64_t v45 = v84;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v68 = v45;

        _os_log_impl((void *)&_mh_execute_header, v65, v66, "%@ faking start until NAN becomes available", v67, 0xCu);
        sub_100010BCC(&qword_10047CC30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v19 = v89;

      swift_errorRelease();
    }
    else
    {
      swift_release();
      swift_unownedRetainStrong();
      os_log_type_t v56 = v77;
      uint64_t v57 = v78;
      uint64_t v58 = v79;
      (*(void (**)(char *, uint64_t, uint64_t))(v78 + 16))(v77, v53 + *(void *)(*(void *)v53 + 96), v79);
      swift_release();
      uint64_t v59 = (uint64_t)v80;
      sub_1002B9098((uint64_t)v19, (uint64_t)v80, (uint64_t (*)(void))type metadata accessor for NANPublish.Configuration);
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 192))(v59, v58, AssociatedConformanceWitness);
      sub_1002B910C(v59, (uint64_t (*)(void))type metadata accessor for NANPublish.Configuration);
      (*(void (**)(char *, uint64_t))(v57 + 8))(v56, v58);
    }
    *((unsigned char *)v45 + v76[0])  = 1;
    uint64_t v70 = v45;
    char v71 = Logger.logObject.getter();
    os_log_type_t v72 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v71, v72))
    {
      uint64_t v73 = swift_slowAlloc();
      char v89 = v19;
      uint64_t v74 = (uint8_t *)v73;
      objc_super v88 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v74 = 138412290;
      id v91 = v70;
      uint64_t v75 = v70;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *objc_super v88 = v84;

      _os_log_impl((void *)&_mh_execute_header, v71, v72, "%@ was started", v74, 0xCu);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v19 = v89;
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t result = *(void *)&v70[qword_1004850E8];
    if (result) {
      return (uint64_t)[(id)result publishStartedWithInstanceID:*v19];
    }
    return result;
  }
  uint64_t v23 = 0;
  unint64_t v24 = 0;
  uint64_t v25 = v18 + 16;
  while (v24 < *(void *)(v22 + 16))
  {
    uint64_t v26 = v22 + v23 * 8;
    uint64_t v27 = *(void *)(v22 + v23 * 8 + 80);
    if (v27)
    {
      uint64_t v28 = *(void *)(v26 + 72);
      uint64_t v29 = *((void *)v19 + 2);
      objc_super v88 = (void *)*((void *)v19 + 1);
      char v89 = (unsigned __int8 *)v28;
      uint64_t v30 = v19;
      char v31 = *(unsigned char *)(v26 + 32);
      swift_unownedRetainStrong();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v32 = v25;
      uint64_t v33 = WiFiInterface.macAddress.getter();
      swift_release();
      char v34 = v31;
      uint64_t v19 = v30;
      uint64_t v35 = NANPassphrase.pmk(for:serviceName:publisherAddress:)(v34, (uint64_t)v88, v29, v33 & 0xFFFFFFFFFFFFLL, (uint64_t)v89, v27);
      uint64_t v37 = v36;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      uint64_t v38 = *(int *)(v86 + 84);
      uint64_t v39 = *(void **)&v32[v38];
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v25 = v32;
      *(void *)&v32[v38]  = v39;
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_1003A4FB8(v39);
        uint64_t v39 = (void *)result;
        *(void *)&v32[v38]  = result;
      }
      if (v24 >= v39[2]) {
        goto LABEL_38;
      }
      objc_super v40 = &v39[v23];
      uint64_t v41 = v39[v23 + 5];
      unint64_t v42 = v39[v23 + 6];
      v40[5]  = v35;
      v40[6]  = v37;
      uint64_t result = sub_10000C970(v41, v42);
      uint64_t v43 = *(void *)&v32[v38];
      if (v24 >= *(void *)(v43 + 16)) {
        goto LABEL_39;
      }
      uint64_t v44 = v43 + v23 * 8;
      *(void *)(v44 + 72)  = 0;
      *(void *)(v44 + 80)  = 0;
      uint64_t v22 = *(void *)&v32[v38];
      swift_endAccess();
      uint64_t result = swift_bridgeObjectRelease();
    }
    ++v24;
    v23 += 7;
    if (v87 == v24) {
      goto LABEL_12;
    }
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
  return result;
}

void *sub_1002AEC50()
{
  uint64_t v1 = v0 + qword_1004887E8;
  swift_beginAccess();
  uint64_t v2 = type metadata accessor for NANPublish.Configuration();
  sub_1000136F4(v1 + *(int *)(v2 + 88), (uint64_t)v9, (uint64_t *)&unk_100486320);
  unsigned __int8 v3 = v10;
  if (v10 == 255)
  {
    sub_1000380B4((uint64_t)v9, (uint64_t *)&unk_100486320);
  }
  else
  {
    sub_1001B7D50((uint64_t)v9);
    if ((v3 & 1) == 0)
    {
      uint64_t v4 = *(void **)(v0 + qword_1004850D0);
      swift_unownedRetainStrong();
      uint64_t v5 = 57;
      goto LABEL_7;
    }
  }
  int v6 = *(unsigned __int8 *)(v1 + *(int *)(v2 + 84) + 2);
  uint64_t v4 = *(void **)(v0 + qword_1004850D0);
  swift_unownedRetainStrong();
  if (v6 != 2) {
    return v4;
  }
  uint64_t v5 = 56;
LABEL_7:
  uint64_t v7 = *(void *)((char *)v4 + *(void *)(*v4 + 8 * v5));
  swift_retain();
  swift_release();
  if (!v7)
  {
    swift_unownedRetainStrong();
    return v4;
  }
  return (void *)v7;
}

uint64_t sub_1002AED84()
{
  uint64_t v1 = v0 + qword_1004887E8;
  swift_beginAccess();
  if (*(unsigned char *)(v1 + *(int *)(type metadata accessor for NANPublish.Configuration() + 96)) != 1) {
    return 2;
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = (uint64_t *)NANGenericServiceProtocol.AttributeFilter.all.unsafeMutableAddressor();
  uint64_t v3 = NANGenericServiceProtocol.packetData(for:)(*v2);
  unint64_t v5 = v4;
  swift_bridgeObjectRelease();
  if (v5 >> 60 == 15) {
    return 2;
  }
  switch(v5 >> 62)
  {
    case 1uLL:
      LODWORD(v7)  = HIDWORD(v3) - v3;
      if (__OFSUB__(HIDWORD(v3), v3))
      {
        __break(1u);
LABEL_13:
        __break(1u);
        JUMPOUT(0x1002AEEF4);
      }
      uint64_t v7 = (int)v7;
LABEL_9:
      if (v7 > 99)
      {
        swift_bridgeObjectRetain();
        unsigned int v11 = (uint64_t *)NANGenericServiceProtocol.AttributeFilter.standardizedAttributes.unsafeMutableAddressor();
        uint64_t v12 = NANGenericServiceProtocol.packetData(for:)(*v11);
        unint64_t v14 = v13;
        sub_10000C95C(v3, v5);
        swift_bridgeObjectRelease();
        sub_10000C95C(v12, v14);
        uint64_t result = 2 * (v14 >> 60 == 15);
      }
      else
      {
LABEL_10:
        sub_10000C95C(v3, v5);
        uint64_t result = 2;
      }
      break;
    case 2uLL:
      uint64_t v9 = *(void *)(v3 + 16);
      uint64_t v8 = *(void *)(v3 + 24);
      BOOL v10 = __OFSUB__(v8, v9);
      uint64_t v7 = v8 - v9;
      if (!v10) {
        goto LABEL_9;
      }
      goto LABEL_13;
    case 3uLL:
      goto LABEL_10;
    default:
      uint64_t v7 = BYTE6(v5);
      goto LABEL_9;
  }
  return result;
}

uint64_t sub_1002AEF04()
{
  uint64_t v1 = v0;
  uint64_t v2 = swift_isaMask & *v0;
  uint64_t v3 = type metadata accessor for DispatchTimeInterval();
  uint64_t v28 = *(void *)(v3 - 8);
  uint64_t v29 = v3;
  __chkstk_darwin();
  char v31 = (uint64_t *)((char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  uint64_t v30 = (char *)&v27 - v5;
  __chkstk_darwin();
  uint64_t v7 = (char *)&v27 - v6;
  uint64_t v27 = *(void *)(v2 + 88);
  uint64_t v8 = *(void *)(v2 + 80);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v9 = type metadata accessor for Preferences();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v14 = (char *)&v27 - v13;
  swift_unownedRetainStrong();
  WiFiInterface.preferences.getter();
  swift_release();
  LOBYTE(v2)  = Preferences.unsolicitedPublishOnUpdate.getter();
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
  uint64_t result = v15(v14, v9);
  if (v2)
  {
    uint64_t v17 = (char *)v1 + qword_1004887E8;
    swift_beginAccess();
    uint64_t result = type metadata accessor for NANPublish.Configuration();
    if (v17[*(int *)(result + 108)] == 1)
    {
      v17[72]  = 0;
      *(void *)((char *)v1 + qword_1004850F8)  = 0;
      swift_release();
      swift_unownedRetainStrong();
      WiFiInterface.preferences.getter();
      swift_release();
      unsigned int v18 = Preferences.unsolicitedPublishSeconds.getter();
      v15(v12, v9);
      *(void *)uint64_t v7 = v18;
      uint64_t v19 = v29;
      uint64_t v20 = *(void (**)(char *, void, uint64_t))(v28 + 104);
      v20(v7, enum case for DispatchTimeInterval.seconds(_:), v29);
      uint64_t v21 = (void *)*OS_dispatch_queue.nan.unsafeMutableAddressor();
      uint64_t v22 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v23 = (void *)swift_allocObject();
      uint64_t v24 = v27;
      v23[2]  = v8;
      v23[3]  = v24;
      v23[4]  = v22;
      uint64_t v25 = (uint64_t)v30;
      v20(v30, enum case for DispatchTimeInterval.never(_:), v19);
      uint64_t v26 = (uint64_t)v31;
      *char v31 = 100;
      v20((char *)v26, enum case for DispatchTimeInterval.milliseconds(_:), v19);
      type metadata accessor for P2PTimer();
      swift_allocObject();
      *(void *)((char *)v1 + qword_1004850F8)  = P2PTimer.init(deadlineAfter:on:repeating:leeway:_:)((uint64_t)v7, v21, v25, v26, (uint64_t)sub_1002B9010, (uint64_t)v23);
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1002AF38C(uint64_t a1)
{
  ObjectType  = swift_getObjectType();
  uint64_t v3 = swift_isaMask & *v1;
  v288  = type metadata accessor for NANPublish.Configuration();
  __chkstk_darwin();
  uint64_t v5 = (char *)&v272 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v286  = (uint64_t)&v272 - v6;
  v303  = *(void *)(v3 + 88);
  v305  = v1;
  uint64_t v7 = *(void **)(v3 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v297  = *(void *)(AssociatedTypeWitness - 8);
  v298  = AssociatedTypeWitness;
  __chkstk_darwin();
  uint64_t v10 = (char *)&v272 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v287  = (char *)&v272 - v11;
  uint64_t v12 = type metadata accessor for DispatchTime();
  v300  = *(void *)(v12 - 8);
  v301  = (char *)v12;
  __chkstk_darwin();
  v291  = (uint64_t)&v272 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v299  = (unint64_t)&v272 - v14;
  uint64_t v15 = type metadata accessor for DispatchTimeInterval();
  v293  = *(void *)(v15 - 8);
  v294  = v15;
  __chkstk_darwin();
  v292  = (char *)&v272 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v290  = (uint64_t)&v272 - v17;
  swift_getAssociatedTypeWitness();
  v302  = v7;
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v18 = type metadata accessor for Preferences();
  v284  = *(void *)(v18 - 8);
  v285  = v18;
  __chkstk_darwin();
  v283  = (uint64_t)&v272 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v282  = (char *)&v272 - v20;
  type metadata accessor for NANDriverCapabilities();
  __chkstk_darwin();
  v281  = (uint64_t)&v272 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_100485280);
  __chkstk_darwin();
  v289  = (unsigned __int8 *)&v272 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v296  = (unsigned __int8 *)&v272 - v23;
  type metadata accessor for DriverEvent(0);
  __chkstk_darwin();
  uint64_t v25 = (char *)&v272 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v27 = (char *)&v272 - v26;
  __chkstk_darwin();
  uint64_t v29 = (char *)&v272 - v28;
  __chkstk_darwin();
  char v31 = (char *)&v272 - v30;
  __chkstk_darwin();
  uint64_t v33 = (char *)&v272 - v32;
  sub_1002B9098(a1, (uint64_t)&v272 - v32, type metadata accessor for DriverEvent);
  EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 4)
  {
    uint64_t v35 = (uint64_t)v5;
    v301  = v25;
    sub_1002B9098((uint64_t)v33, (uint64_t)v29, type metadata accessor for DriverEvent);
    if (*v29 == 1)
    {
      uint64_t v36 = qword_1004887F0;
      uint64_t v37 = v305;
      if (*((unsigned char *)v305 + qword_1004887F0) != 1) {
        return sub_1002B910C((uint64_t)v33, type metadata accessor for DriverEvent);
      }
      v304  = v33;
      uint64_t v38 = *(void *)((char *)v305 + qword_1004850D0);
      swift_unownedRetainStrong();
      sub_1003546AC();
      v300  = v36;
      swift_release();
      swift_unownedRetainStrong();
      uint64_t v99 = v297;
      uint64_t v98 = v298;
      (*(void (**)(char *, uint64_t, uint64_t))(v297 + 16))(v10, v38 + *(void *)(*(void *)v38 + 96), v298);
      swift_release();
      uint64_t v100 = (uint64_t)v37 + qword_1004887E8;
      swift_beginAccess();
      sub_1002B9098(v100, v35, (uint64_t (*)(void))type metadata accessor for NANPublish.Configuration);
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 192))(v35, v98, AssociatedConformanceWitness);
      sub_1002B910C(v35, (uint64_t (*)(void))type metadata accessor for NANPublish.Configuration);
      (*(void (**)(char *, uint64_t))(v99 + 8))(v10, v98);
LABEL_23:
      uint64_t v33 = v304;
      return sub_1002B910C((uint64_t)v33, type metadata accessor for DriverEvent);
    }
LABEL_9:
    v304  = v33;
    uint64_t v39 = v305;
    sub_1002B9098(a1, (uint64_t)v27, type metadata accessor for DriverEvent);
    id v40 = v39;
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = swift_slowAlloc();
      v302  = (void *)swift_slowAlloc();
      v303  = swift_slowAlloc();
      v324[0]  = v303;
      *(_DWORD *)uint64_t v43 = 138412546;
      v323[0]  = v40;
      id v44 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v302  = v39;

      *(_WORD *)(v43 + 12)  = 2080;
      uint64_t v45 = DriverEvent.description.getter();
      v323[0]  = sub_100010680(v45, v46, v324);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1002B910C((uint64_t)v27, type metadata accessor for DriverEvent);
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "%@ received an unexpected %s", (uint8_t *)v43, 0x16u);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_1002B910C((uint64_t)v27, type metadata accessor for DriverEvent);
    }
    goto LABEL_23;
  }
  if (EnumCaseMultiPayload) {
    goto LABEL_9;
  }
  sub_1002B9098((uint64_t)v33, (uint64_t)v31, type metadata accessor for DriverEvent);
  sub_10006E544((uint64_t)v31, (uint64_t)v323);
  sub_10006E544((uint64_t)v323, (uint64_t)v324);
  switch(sub_1001343E0((uint64_t)v324))
  {
    case 3u:
      NANBitmap.Channel.operatingClass.getter(v324);
      goto LABEL_22;
    case 5u:
      uint64_t v47 = (unsigned __int8 *)NANBitmap.Channel.operatingClass.getter(v324);
      uint64_t v48 = *v47;
      uint64_t v49 = v47[2];
      unint64_t v50 = v47[3];
      uint64_t v51 = v47[4];
      uint64_t v52 = v47[5];
      unint64_t v53 = v47[6];
      unint64_t v54 = v47[7];
      uint64_t v55 = v47[8];
      uint64_t v56 = v47[9];
      uint64_t v57 = v47[10];
      uint64_t v58 = v47[11];
      uint64_t v59 = v47[12];
      uint64_t v60 = v47[13];
      uint64_t v61 = (uint64_t)v305;
      int v62 = *((unsigned __int8 *)v305 + qword_1004887F0);
      v304  = v33;
      v300  = v49;
      v301  = (char *)v48;
      v298  = v51;
      v299  = v50;
      v297  = v52;
      v293  = v54;
      v294  = v53;
      if (v62 == 1)
      {
        v286  = v47[1];
        ObjectType  = *((void *)v47 + 2);
        LOBYTE(v321)  = v55;
        HIBYTE(v321)  = v56;
        LOBYTE(v322)  = v57;
        BYTE1(v322)  = v58;
        BYTE2(v322)  = v59;
        HIBYTE(v322)  = v60;
        uint64_t v63 = (v51 << 16) | (v50 << 8) | (v52 << 24) | (v53 << 32) | (v54 << 40) | v49;
        uint64_t v64 = WiFiAddress.description.getter(v63);
        v291  = v63;
        v292  = (char *)v64;
        unint64_t v66 = v65;
        unint64_t v67 = v55 | (v56 << 8) | (v57 << 16) | (v58 << 24) | (v59 << 32) | (v60 << 40);
        if (static NANClusterChangeEvent.__derived_struct_equals(_:_:)(v63, v67))
        {
          uint64_t v68 = 0;
          id v69 = (void *)0xE000000000000000;
        }
        else
        {
          v319  = 0x203A49444E5BLL;
          v320  = (void *)0xE600000000000000;
          v103._countAndFlagsBits  = WiFiAddress.description.getter(v67);
          String.append(_:)(v103);
          swift_bridgeObjectRelease();
          v104._countAndFlagsBits  = 93;
          v104._object  = (void *)0xE100000000000000;
          String.append(_:)(v104);
          uint64_t v68 = v319;
          id v69 = v320;
        }
        unint64_t v105 = v305;
        v319  = (uint64_t)v292;
        v320  = (void *)v66;
        swift_bridgeObjectRetain();
        v106._countAndFlagsBits  = v68;
        v106._object  = v69;
        String.append(_:)(v106);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v107 = v319;
        unint64_t v108 = (unint64_t)v320;
        size_t v109 = (char *)v105 + qword_1004887F8;
        swift_bridgeObjectRetain_n();
        char v110 = Logger.logObject.getter();
        os_log_type_t v111 = static os_log_type_t.default.getter();
        BOOL v112 = os_log_type_enabled(v110, v111);
        v279  = v107;
        v287  = v109;
        if (v112)
        {
          BOOL v113 = (uint8_t *)swift_slowAlloc();
          v319  = swift_slowAlloc();
          *(_DWORD *)BOOL v113 = 136315138;
          swift_bridgeObjectRetain();
          v315[0]  = sub_100010680(v107, v108, &v319);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v110, v111, "Received a new datapath request from peer: %s", v113, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

        uint64_t v114 = ObjectType;
        char v115 = v289;
        sub_10006E544((uint64_t)v323, (uint64_t)&v319);
        NANBitmap.Channel.operatingClass.getter(&v319);
        swift_bridgeObjectRetain();
        BOOL v116 = v296;
        Array<A>.retrieve(attribute:)(41, v114, (uint64_t)v296);
        sub_1001344F4((uint64_t)v323, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
        uint64_t v117 = type metadata accessor for NANAttribute(0);
        char v118 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v117 - 8) + 48);
        int v119 = v118(v116, 1, v117);
        uint64_t v120 = (char *)v305;
        v280  = v108;
        if (v119 == 1)
        {
          sub_1000380B4((uint64_t)v116, &qword_100485280);
        }
        else
        {
          if (swift_getEnumCaseMultiPayload() == 36)
          {
            v278  = v67;
            v273  = *v116;
            int v121 = v116[3];
            int v122 = v116[4];
            int v123 = v116[5];
            unsigned int v124 = v116[6];
            uint64_t v125 = v116[7];
            unint64_t v126 = v116;
            uint64_t v127 = v116[8];
            LODWORD(v275)  = v116[10];
            uint64_t v128 = *((void *)v116 + 3);
            unint64_t v129 = *((void *)v116 + 4);
            uint64_t v130 = *((void *)v116 + 5);
            uint64_t v131 = *((void *)v116 + 6);
            unint64_t v132 = *((void *)v126 + 7);
            LODWORD(v296)  = v121;
            LOBYTE(v321)  = v121;
            LODWORD(v292)  = v122;
            HIBYTE(v321)  = v122;
            LODWORD(v289)  = v123;
            LOBYTE(v322)  = v123;
            BYTE1(v322)  = v124;
            BYTE2(v322)  = v125;
            HIBYTE(v322)  = v127;
            sub_10013316C(v130, v131, v132);
            int v133 = *(unsigned __int8 *)NANAttribute.DatapathExtension.Control.security.unsafeMutableAddressor();
            sub_10000C95C(v128, v129);
            v276  = v132;
            v277  = v130;
            v290  = v131;
            sub_1001331AC(v130, v131, v132);
            BOOL v134 = (v133 & ~v275) == 0;
            char v135 = (char *)v305;
            goto LABEL_39;
          }
          sub_1002B910C((uint64_t)v116, type metadata accessor for NANAttribute);
        }
        sub_10006E544((uint64_t)v323, (uint64_t)v315);
        NANBitmap.Channel.operatingClass.getter(v315);
        swift_bridgeObjectRetain();
        Array<A>.retrieve(attribute:)(16, v114, (uint64_t)v115);
        sub_1001344F4((uint64_t)v323, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
        char v135 = v120;
        if (v118(v115, 1, v117) == 1)
        {
          swift_bridgeObjectRelease();
          sub_1000380B4((uint64_t)v115, &qword_100485280);
LABEL_46:
          swift_unownedRetainStrong();
          sub_100354870();
          swift_release();
          sub_1002D946C((uint64_t)v301, v67, v291, 0xD00000000000002FLL, 0x80000001003DF9B0);
          sub_1001344F4((uint64_t)v323, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
          swift_release();
          goto LABEL_23;
        }
        if (swift_getEnumCaseMultiPayload() != 16)
        {
          swift_bridgeObjectRelease();
          sub_1002B910C((uint64_t)v115, type metadata accessor for NANAttribute);
          goto LABEL_46;
        }
        v278  = v67;
        v273  = *v115;
        int v137 = v115[3];
        int v138 = v115[4];
        int v139 = v115[5];
        unsigned int v124 = v115[6];
        uint64_t v125 = v115[7];
        uint64_t v127 = v115[8];
        int v140 = v115[10];
        uint64_t v141 = *((void *)v115 + 3);
        uint64_t v142 = *((void *)v115 + 4);
        unint64_t v143 = *((void *)v115 + 5);
        LODWORD(v296)  = v137;
        LOBYTE(v321)  = v137;
        LODWORD(v292)  = v138;
        HIBYTE(v321)  = v138;
        LODWORD(v289)  = v139;
        LOBYTE(v322)  = v139;
        BYTE1(v322)  = v124;
        BYTE2(v322)  = v125;
        HIBYTE(v322)  = v127;
        sub_10013316C(v141, v142, v143);
        int v144 = *(unsigned __int8 *)NANAttribute.Datapath.Control.security.unsafeMutableAddressor();
        v276  = v143;
        v277  = v141;
        v290  = v142;
        sub_1001331AC(v141, v142, v143);
        BOOL v134 = (v144 & ~v140) == 0;
LABEL_39:
        int v145 = v134;
        v272  = v145;
        BOOL v146 = static WiFiAddress.!= infix(_:_:)((v125 << 32) | (v127 << 40) | ((unint64_t)v124 << 24) | ((unint64_t)v289 << 16) | ((unint64_t)v292 << 8) | v296, v278);
        unint64_t v147 = (int *)v288;
        if (v146)
        {
          sub_1001344F4((uint64_t)v323, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_100134598);
          unint64_t v148 = v135;
          sub_1001344F4((uint64_t)v323, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_100134598);
          uint64_t v149 = v148;
          unint64_t v150 = Logger.logObject.getter();
          os_log_type_t v151 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v150, v151))
          {
            uint64_t v152 = swift_slowAlloc();
            unint64_t v153 = (void *)swift_slowAlloc();
            v315[0]  = swift_slowAlloc();
            *(_DWORD *)uint64_t v152 = 138412802;
            *(void *)&v325  = v149;
            uint64_t v154 = v149;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *unint64_t v153 = v305;

            *(_WORD *)(v152 + 12)  = 2080;
            uint64_t v155 = WiFiAddress.description.getter(v278);
            *(void *)&v325  = sub_100010680(v155, v156, v315);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_1001344F4((uint64_t)v323, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
            sub_1001344F4((uint64_t)v323, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
            *(_WORD *)(v152 + 22)  = 2080;
            char v135 = (char *)v305;
            swift_beginAccess();
            uint64_t v157 = WiFiAddress.description.getter(v321 | ((unint64_t)v322 << 16));
            *(void *)&v325  = sub_100010680(v157, v158, v315);
            unint64_t v147 = (int *)v288;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v150, v151, "%@ bad initiator data address in the event %s compared to attributes %s", (uint8_t *)v152, 0x20u);
            sub_100010BCC(&qword_10047CC30);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            sub_1001344F4((uint64_t)v323, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
            sub_1001344F4((uint64_t)v323, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
          }
        }
        char v159 = &v135[qword_1004887E8];
        swift_beginAccess();
        uint64_t v160 = v147[22];
        v292  = v159;
        sub_1000136F4((uint64_t)&v159[v160], (uint64_t)v315, (uint64_t *)&unk_100486320);
        if (v318 == 255)
        {
          uint64_t v161 = (uint64_t *)&unk_100486320;
          BOOL v162 = v315;
LABEL_62:
          sub_1000380B4((uint64_t)v162, v161);
LABEL_63:
          uint64_t v182 = *(void *)&v292[v147[21] + 16];
          if (!*(void *)(v182 + 16))
          {
            swift_unownedRetainStrong();
            uint64_t v193 = v283;
            WiFiInterface.preferences.getter();
            swift_release();
            uint64_t v194 = v285;
            char v195 = Preferences.automaticallyUseEncryption.getter();
            (*(void (**)(uint64_t, uint64_t))(v284 + 8))(v193, v194);
            v300  = 1;
            if (v195)
            {
              v289  = 0;
              uint64_t v179 = 0;
              unint64_t v167 = 0;
              v296  = 0;
              unint64_t v180 = 0;
              int v196 = 2;
            }
            else
            {
              v289  = 0;
              uint64_t v179 = 0;
              unint64_t v167 = 0;
              v296  = 0;
              unint64_t v180 = 0;
              if (v292[v147[24]]) {
                int v196 = 1;
              }
              else {
                int v196 = 2;
              }
            }
            LODWORD(v285)  = v196;
            goto LABEL_100;
          }
          uint64_t v183 = *(unsigned __int8 *)(v182 + 32);
          uint64_t v179 = *(void *)(v182 + 40);
          unint64_t v167 = *(void *)(v182 + 48);
          uint64_t v185 = *(void *)(v182 + 56);
          unint64_t v184 = *(void *)(v182 + 64);
          char v186 = v292[v147[24]];
          v289  = (unsigned __int8 *)v183;
          v296  = (unsigned __int8 *)v185;
          if (v186)
          {
            type metadata accessor for __DataStorage();
            swift_allocObject();
            sub_100013D44(v179, v167);
            uint64_t v187 = v185;
            unint64_t v188 = v184;
            sub_100038004(v187, v184);
            swift_bridgeObjectRetain();
            uint64_t v189 = __DataStorage.init(length:)();
            char v190 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v179, v167, 0x2000000000, v189 | 0x4000000000000000);
            swift_release();
            uint64_t v191 = (uint64_t)v301;
            if ((v190 & 1) == 0)
            {
              unint64_t v180 = v188;
              if (v188 >> 60 == 15)
              {
                sub_100013D44(v179, v167);
                sub_10000C970(v179, v167);
                uint64_t v192 = (uint64_t)v296;
              }
              else
              {
                v224  = (uint64_t)v296;
                sub_100038004((uint64_t)v296, v188);
                sub_100013D44(v179, v167);
                sub_10000C970(v179, v167);
                uint64_t v192 = v224;
              }
              sub_10000C95C(v192, v188);
              swift_bridgeObjectRelease();
              int v201 = 1;
              goto LABEL_98;
            }
          }
          else
          {
            sub_100013D44(v179, v167);
            uint64_t v197 = v185;
            unint64_t v188 = v184;
            sub_100038004(v197, v184);
            swift_bridgeObjectRetain();
            uint64_t v191 = (uint64_t)v301;
          }
          uint64_t v198 = sub_1002B2058(v191 | (v286 << 8) | (v300 << 16) | (v299 << 24) | (v298 << 32) | (v297 << 40) | (v294 << 48) | (v293 << 56), v278, ObjectType, v277, v290, v276);
          if (v199 >> 60 != 15)
          {
            uint64_t v202 = v198;
            unint64_t v203 = v199;
            sub_10000C970(v179, v167);
            sub_10000C95C((uint64_t)v296, v188);
            swift_bridgeObjectRelease();
            v296  = 0;
            LODWORD(v285)  = 1;
            uint64_t v179 = v202;
            unint64_t v180 = 0xF000000000000000;
            unint64_t v167 = v203;
LABEL_99:
            v300  = 0;
LABEL_100:
            v225  = v280;
LABEL_101:
            v294  = v167;
            swift_bridgeObjectRetain();
            v226  = Logger.logObject.getter();
            os_log_type_t v227 = static os_log_type_t.default.getter();
            BOOL v228 = os_log_type_enabled(v226, v227);
            v293  = v180;
            uint64_t v229 = v179;
            if (v228)
            {
              uint64_t v230 = swift_slowAlloc();
              v315[0]  = swift_slowAlloc();
              *(_DWORD *)uint64_t v230 = 136315394;
              swift_bridgeObjectRetain();
              *(void *)&v325  = sub_100010680(v279, v225, v315);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v230 + 12)  = 2080;
              if (v285 == 2) {
                uint64_t v231 = 0x64657463656A6572;
              }
              else {
                uint64_t v231 = 0x6465747065636361;
              }
              *(void *)&v325  = sub_100010680(v231, 0xE800000000000000, v315);
              unint64_t v147 = (int *)v288;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v226, v227, "Configuring datapath responder for peer: %s, with status: %s", (uint8_t *)v230, 0x16u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {
              swift_bridgeObjectRelease_n();
            }

            swift_beginAccess();
            uint64_t v232 = v321;
            uint64_t v233 = HIBYTE(v321);
            unint64_t v234 = v322;
            v298  = BYTE1(v322);
            v297  = BYTE2(v322);
            ObjectType  = HIBYTE(v322);
            swift_unownedRetainStrong();
            v287  = (char *)sub_100354870();
            swift_release();
            swift_unownedRetainStrong();
            uint64_t v235 = WiFiInterface.macAddress.getter();
            swift_release();
            v236  = v292[84];
            v237  = v292[85];
            v238  = (unint64_t)*(unsigned int *)(v292 + 86) << 16;
            v239  = *((void *)v292 + 1);
            v240  = *((void *)v292 + 2);
            v241  = v292[v147[21] + 2];
            v242  = v300;
            v288  = v233;
            v299  = v234;
            v283  = v239;
            v284  = v232;
            LODWORD(v282)  = v241;
            v280  = v236;
            v281  = v235;
            v279  = v237;
            v274  = v240;
            v275  = v238;
            if (v300)
            {
              if (v272)
              {
                type metadata accessor for __DataStorage();
                swift_allocObject();
                swift_bridgeObjectRetain();
                v243  = __DataStorage.init(length:)();
                v244  = 0;
                v245  = 0;
                v246  = 0;
                v247  = v243 | 0x4000000000000000;
                v248  = 0xF000000000000000;
                v249  = 0x2000000000;
              }
              else
              {
                swift_bridgeObjectRetain();
                v244  = 0;
                v249  = 0;
                v247  = 0;
                v245  = 0;
                v248  = 0;
                v246  = 1;
              }
              v251  = v229;
              v254  = v293;
              v252  = v294;
              v250  = (uint64_t)v289;
              v253  = (uint64_t)v296;
            }
            else
            {
              swift_bridgeObjectRetain();
              v246  = 0;
              v244  = (uint64_t)v289;
              v250  = (uint64_t)v289;
              v251  = v229;
              v249  = v229;
              v248  = v293;
              v252  = v294;
              v247  = v294;
              v245  = (uint64_t)v296;
              v253  = (uint64_t)v296;
              v254  = v293;
            }
            *(void *)&v325  = v244;
            *((void *)&v325 + 1)  = v249;
            *(void *)&v326  = v247;
            *((void *)&v326 + 1)  = v245;
            v327  = v248;
            v328  = 0;
            v329  = v246;
            v255  = v292;
            sub_1000136F4((uint64_t)&v292[v147[22]], (uint64_t)v314, (uint64_t *)&unk_100486320);
            v256  = v147[27];
            v257  = &v255[v147[26]];
            v258  = *(unsigned int *)v257 | ((unint64_t)*((unsigned __int16 *)v257 + 2) << 32);
            v259  = v257[6];
            LOBYTE(v255)  = v255[v256];
            v289  = (unsigned __int8 *)v250;
            v278  = v251;
            v296  = (unsigned __int8 *)v253;
            sub_1001BA2CC(v250, v251, v252, v253, v254, 0, v242);
            v300  = v242;
            v261  = v276;
            v260  = v277;
            v262  = v290;
            sub_10013316C(v277, v290, v276);
            v263  = v284;
            v264  = v288;
            LOBYTE(v315[0])  = v259;
            v271  = v258 | ((unint64_t)v259 << 48);
            BYTE2(v270)  = v285;
            BYTE1(v270)  = v273;
            LOBYTE(v270)  = (_BYTE)v282;
            v265  = (char)v301;
            v266  = v260;
            NANDatapath.ResponseConfiguration.init(instanceID:publishID:initiatorManagementAddress:initiatorDataAddress:initiatorServiceInfo:responderManagementAddress:responderDataAddress:serviceName:serviceType:dialogToken:status:securityConfiguration:internetSharingConfiguration:multicastAddress:multicastServiceType:)((char)v301, v286, v291, v284 | (v288 << 8) | (v299 << 16) | (v298 << 24) | (v297 << 32) | (ObjectType << 40), v260, v262, v261, v281 & 0xFFFFFFFFFFFFLL, (uint64_t)v315, v280 | (v279 << 8) | v275, v283, v274, v270, (uint64_t)&v325, (uint64_t)v314, v271, SWORD2(v271), SBYTE6(v271), SHIBYTE(v271),
              (char)v255);
            sub_1001344F4((uint64_t)v323, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
            v267  = v305;
            v268  = sub_1002D9A28((uint64_t)v315);
            swift_release();
            sub_10027E6A8((uint64_t)v315);
            v314[0]  = (uint64_t)v268;
            v307  = v265;
            v308  = v263;
            v309  = v264;
            v310  = v299;
            v311  = v298;
            v312  = v297;
            v313  = ObjectType;
            v269  = (void *)((char *)v267 + qword_100488808);
            swift_beginAccess();
            v306  = *v269;
            _s17ResponderInstanceCMa();
            sub_1001B8154();
            type metadata accessor for Dictionary();
            swift_bridgeObjectRetain();
            Dictionary.subscript.setter();
            sub_1002ACB3C(v306);
            sub_1001331AC(v266, v290, v261);
            sub_1000CAB20((uint64_t)v289, v278, v294, (uint64_t)v296, v293, 0, v300);
            goto LABEL_23;
          }
          type metadata accessor for __DataStorage();
          swift_allocObject();
          uint64_t v200 = __DataStorage.init(length:)();
          sub_10000C970(v179, v167);
          sub_10000C95C((uint64_t)v296, v188);
          swift_bridgeObjectRelease();
          v296  = 0;
          unint64_t v167 = v200 | 0x4000000000000000;
          uint64_t v179 = 0x2000000000;
          unint64_t v180 = 0xF000000000000000;
          int v201 = 2;
LABEL_98:
          LODWORD(v285)  = v201;
          goto LABEL_99;
        }
        if (v318)
        {
          sub_1001B7D50((uint64_t)v315);
          goto LABEL_63;
        }
        swift_bridgeObjectRelease();
        if (*(void *)&v135[qword_1004850E8]
          && (v314[0]  = *(void *)&v135[qword_1004850E8],
              swift_unknownObjectRetain(),
              sub_100010BCC(&qword_100485290),
              sub_100010BCC(&qword_100485298),
              (swift_dynamicCast() & 1) != 0))
        {
          if (*((void *)&v326 + 1))
          {
            sub_10006EF50(&v325, (uint64_t)v315);
            uint64_t v163 = v316;
            uint64_t v164 = v317;
            sub_1000369C4(v315, v316);
            uint64_t v165 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v164 + 24))(v291, v163, v164);
            if (v166 >> 60 != 15)
            {
              unint64_t v167 = v166;
              uint64_t v168 = v165;
              uint64_t v169 = *(void *)&v135[qword_1004850D0];
              swift_unownedRetainStrong();
              uint64_t v170 = v169 + *(void *)(*(void *)v169 + 656);
              swift_beginAccess();
              uint64_t v171 = v281;
              sub_1002B9098(v170, v281, (uint64_t (*)(void))type metadata accessor for NANDriverCapabilities);
              swift_release();
              uint64_t v172 = *(void *)(v171 + 8);
              swift_bridgeObjectRetain();
              sub_1002B910C(v171, (uint64_t (*)(void))type metadata accessor for NANDriverCapabilities);
              *(void *)&v325  = v172;
              uint64_t v173 = sub_100010BCC((uint64_t *)&unk_1004852A0);
              sub_100111D34();
              unsigned __int8 v174 = Collection<>.strongestSupportedSharedKeySuite.getter(v173);
              swift_bridgeObjectRelease();
              if (v174 != 8)
              {
                v300  = 0;
                uint64_t v178 = v174;
                LODWORD(v285)  = 1;
                uint64_t v179 = v168;
                unint64_t v180 = 0xF000000000000000;
LABEL_119:
                v225  = v280;
                v289  = (unsigned __int8 *)v178;
                sub_100010754((uint64_t)v315);
                v296  = 0;
                goto LABEL_101;
              }
              sub_10000C95C(v168, v167);
            }
            swift_unownedRetainStrong();
            unint64_t v175 = v282;
            WiFiInterface.preferences.getter();
            swift_release();
            uint64_t v176 = v285;
            char v177 = Preferences.automaticallyUseEncryption.getter();
            (*(void (**)(char *, uint64_t))(v284 + 8))(v175, v176);
            v300  = 1;
            uint64_t v178 = 0;
            uint64_t v179 = 0;
            unint64_t v167 = 0;
            unint64_t v180 = 0;
            if (v177)
            {
              int v181 = 2;
            }
            else if (v292[v147[24]])
            {
              int v181 = 1;
            }
            else
            {
              int v181 = 2;
            }
            LODWORD(v285)  = v181;
            goto LABEL_119;
          }
        }
        else
        {
          v327  = 0;
          v325  = 0u;
          v326  = 0u;
        }
        uint64_t v161 = (uint64_t *)&unk_100485288;
        BOOL v162 = (uint64_t *)&v325;
        goto LABEL_62;
      }
      swift_unownedRetainStrong();
      sub_100354870();
      swift_release();
      v319  = 0;
      v320  = (void *)0xE000000000000000;
      v315[0]  = v61;
      swift_getWitnessTable();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v97._countAndFlagsBits  = 0x63616E6920736920;
      v97._object  = (void *)0xEC00000065766974;
      String.append(_:)(v97);
      sub_1002D946C((uint64_t)v301, v55 | (v56 << 8) | (v57 << 16) | (v58 << 24) | (v59 << 32) | (v60 << 40), v300 | (v299 << 8) | (v298 << 16) | (v297 << 24) | (v294 << 32) | (v293 << 40), v319, (unint64_t)v320);
      uint64_t v33 = v304;
      swift_release();
      swift_bridgeObjectRelease();
LABEL_22:
      sub_1001344F4((uint64_t)v323, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
      break;
    case 0xCu:
      v304  = v33;
      uint64_t v70 = *(void *)(NANBitmap.Channel.operatingClass.getter(v324) + 8);
      char v71 = v305;
      ObjectType  = qword_1004887F0;
      v296  = (unsigned __int8 *)v70;
      if (*((unsigned char *)v305 + qword_1004887F0) != 1) {
        goto LABEL_84;
      }
      uint64_t v72 = type metadata accessor for P2PTimer();
      uint64_t v73 = (char *)v299;
      v288  = v72;
      variable initialization expression of AWDLPeer.lastUpdated();
      uint64_t v74 = (uint64_t)v71 + qword_1004850D8;
      swift_beginAccess();
      uint64_t v75 = v300;
      uint64_t v76 = (uint64_t)v301;
      uint64_t v77 = *(void (**)(uint64_t, uint64_t, char *))(v300 + 16);
      uint64_t v78 = v291;
      v289  = (unsigned __int8 *)v74;
      v77(v291, v74, v301);
      uint64_t v79 = v290;
      DispatchTime.distance(to:)();
      uint64_t v80 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
      v80(v78, v76);
      uint64_t v81 = v73;
      uint64_t v82 = (void *)&unk_100485000;
      v80((uint64_t)v81, v76);
      uint64_t v83 = NANConstants.maximumServiceRetryRate.unsafeMutableAddressor();
      uint64_t v85 = v292;
      unint64_t v84 = v293;
      unint64_t v86 = v294;
      (*(void (**)(char *, uint64_t, unint64_t))(v293 + 16))(v292, v83, v294);
      LOBYTE(v74)  = static DispatchTimeInterval.< infix(_:_:)();
      uint64_t v87 = *(void (**)(char *, unint64_t))(v84 + 8);
      v87(v85, v86);
      v87((char *)v79, v86);
      if (v74)
      {
        objc_super v88 = v71;
        char v89 = Logger.logObject.getter();
        os_log_type_t v90 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v89, v90))
        {
          uint64_t v91 = swift_slowAlloc();
          unint64_t v92 = (void *)swift_slowAlloc();
          v293  = swift_slowAlloc();
          v319  = v293;
          *(_DWORD *)uint64_t v91 = 138412546;
          *(void *)&v325  = v88;
          v294  = (unint64_t)v88;
          char v93 = v88;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *unint64_t v92 = v305;

          *(_WORD *)(v91 + 12)  = 2080;
          uint64_t v94 = 0xD000000000000011;
          unint64_t v95 = 0x80000001003DC2D0;
          switch((unint64_t)v296)
          {
            case 0xFFFFFFFFFFFFFFFFLL:
              break;
            case 1uLL:
              uint64_t v94 = 0x754F2064656D6954;
              unint64_t v95 = 0xE900000000000074;
              break;
            case 2uLL:
              uint64_t v94 = 0x7165522072657355;
              unint64_t v95 = 0xEE00646574736575;
              break;
            case 3uLL:
              uint64_t v94 = 0x6961462070696843;
              unint64_t v95 = 0xEC0000006572756CLL;
              break;
            case 4uLL:
              uint64_t v94 = 0xD000000000000018;
              unint64_t v95 = 0x80000001003DC230;
              break;
            default:
              unint64_t v95 = 0xE700000000000000;
              uint64_t v94 = 0x6E776F6E6B6E55;
              break;
          }
          *(void *)&v325  = sub_100010680(v94, v95, &v319);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v89, v90, "%@ got an early termination with reason: %s. Retrying", (uint8_t *)v91, 0x16u);
          sub_100010BCC(&qword_10047CC30);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v82 = &unk_100485000;
          unint64_t v136 = v287;
          objc_super v88 = (char *)v294;
        }
        else
        {

          unint64_t v136 = v287;
        }
        unint64_t v204 = (char *)v299;
        variable initialization expression of AWDLPeer.lastUpdated();
        uint64_t v205 = (uint64_t)v289;
        swift_beginAccess();
        (*(void (**)(uint64_t, char *, char *))(v300 + 40))(v205, v204, v301);
        swift_endAccess();
        uint64_t v206 = *(void *)&v88[v82[26]];
        swift_unownedRetainStrong();
        sub_1003546AC();
        swift_release();
        swift_unownedRetainStrong();
        uint64_t v208 = v297;
        uint64_t v207 = v298;
        (*(void (**)(char *, uint64_t, uint64_t))(v297 + 16))(v136, v206 + *(void *)(*(void *)v206 + 96), v298);
        swift_release();
        uint64_t v209 = (uint64_t)&v88[qword_1004887E8];
        swift_beginAccess();
        uint64_t v210 = v286;
        sub_1002B9098(v209, v286, (uint64_t (*)(void))type metadata accessor for NANPublish.Configuration);
        uint64_t v211 = swift_getAssociatedConformanceWitness();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v211 + 192))(v210, v207, v211);
        sub_1002B910C(v210, (uint64_t (*)(void))type metadata accessor for NANPublish.Configuration);
        (*(void (**)(char *, uint64_t))(v208 + 8))(v136, v207);
      }
      else
      {
LABEL_84:
        BOOL v212 = v71;
        v213  = Logger.logObject.getter();
        v214  = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v213, v214))
        {
          uint64_t v215 = swift_slowAlloc();
          unint64_t v216 = (void *)swift_slowAlloc();
          v301  = (char *)swift_slowAlloc();
          v319  = (uint64_t)v301;
          *(_DWORD *)uint64_t v215 = 138412546;
          v314[0]  = (uint64_t)v212;
          unint64_t v217 = v212;
          long long v218 = v305;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *unint64_t v216 = v218;

          *(_WORD *)(v215 + 12)  = 2080;
          uint64_t v219 = 0xD000000000000011;
          unint64_t v220 = 0x80000001003DC2D0;
          switch((unint64_t)v296)
          {
            case 0xFFFFFFFFFFFFFFFFLL:
              break;
            case 1uLL:
              uint64_t v219 = 0x754F2064656D6954;
              unint64_t v220 = 0xE900000000000074;
              break;
            case 2uLL:
              uint64_t v219 = 0x7165522072657355;
              unint64_t v220 = 0xEE00646574736575;
              break;
            case 3uLL:
              uint64_t v219 = 0x6961462070696843;
              unint64_t v220 = 0xEC0000006572756CLL;
              break;
            case 4uLL:
              uint64_t v219 = 0xD000000000000018;
              unint64_t v220 = 0x80000001003DC230;
              break;
            default:
              unint64_t v220 = 0xE700000000000000;
              uint64_t v219 = 0x6E776F6E6B6E55;
              break;
          }
          v314[0]  = sub_100010680(v219, v220, &v319);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v213, v214, "%@ was terminated with reason %s", (uint8_t *)v215, 0x16u);
          sub_100010BCC(&qword_10047CC30);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          long long v218 = v71;
        }
        v218[ObjectType]  = 0;
        *(void *)&v212[qword_1004850E0]  = 0;
        swift_release();
        uint64_t v221 = qword_1004850E8;
        v222  = *(void **)&v212[qword_1004850E8];
        if (v222) {
          [v222 publishTerminatedWithReason:v296];
        }
        *(void *)&v212[v221]  = 0;
        swift_unknownObjectRelease();
        v223  = (uint64_t *)&v212[qword_100488808];
        swift_beginAccess();
        v314[0]  = *v223;
        _s17ResponderInstanceCMa();
        sub_1001B8154();
        type metadata accessor for Dictionary();
        swift_bridgeObjectRetain();
        Dictionary.removeAll(keepingCapacity:)(0);
        sub_1002ACB3C(v314[0]);
        swift_unownedRetainStrong();
        sub_100354870();
        swift_release();
        sub_1002D9C04((uint64_t)v212);
        swift_release();
      }
      goto LABEL_23;
    case 0xDu:
      uint64_t v96 = NANBitmap.Channel.operatingClass.getter(v324);
      sub_1002B2B30(*(void *)v96, *(void *)(v96 + 8), *(void *)(v96 + 16));
      goto LABEL_22;
    default:
      sub_1001344F4((uint64_t)v323, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_10006DC3C);
      goto LABEL_9;
  }
  return sub_1002B910C((uint64_t)v33, type metadata accessor for DriverEvent);
}

uint64_t sub_1002B2058(unint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v71 = a3;
  unsigned __int8 v9 = BYTE2(a1);
  unint64_t v69 = a1 >> 40;
  unint64_t v70 = HIDWORD(a1);
  unint64_t v68 = HIWORD(a1);
  unint64_t v66 = a1 >> 24;
  unint64_t v67 = HIBYTE(a1);
  type metadata accessor for OWEKeys();
  __chkstk_darwin();
  uint64_t v11 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_1004852B0);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin();
  unint64_t v65 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_1004862F0);
  __chkstk_darwin();
  uint64_t v18 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for NANPeer.Service.AuthenticationStatus.State(0);
  __chkstk_darwin();
  uint64_t v20 = (char *)&v62 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a4 == 4 || (uint64_t v21 = NANServiceInfo.genericServiceProtocol.getter(a4, a5, a6)) == 0)
  {
LABEL_9:
    swift_bridgeObjectRetain_n();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      char v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      *(_DWORD *)char v31 = 136315138;
      v75[0]  = v36;
      uint64_t v37 = WiFiAddress.description.getter((v67 << 40) | ((unint64_t)v68 << 32) | (v69 << 24) | ((unint64_t)v70 << 16) | ((unint64_t)v66 << 8) | v9);
      v73[0]  = sub_100010680(v37, v38, v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      uint64_t v35 = "Rejecting datapath request from %s because invalid service specific info was provided in the datapath request";
      goto LABEL_11;
    }
LABEL_28:
    swift_bridgeObjectRelease_n();
    goto LABEL_29;
  }
  uint64_t v22 = (uint64_t)v21;
  uint64_t v23 = NANGenericServiceProtocol.datapathSubscribeID.getter((uint64_t)v21);
  if ((v23 & 0x100) != 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  uint64_t v63 = v23;
  uint64_t v24 = v72;
  uint64_t v25 = v72 + qword_1004887E8;
  swift_beginAccess();
  uint64_t v26 = type metadata accessor for NANPublish.Configuration();
  if ((*(unsigned char *)(v25 + *(int *)(v26 + 96)) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v39 = (uint64_t *)(v24 + qword_100488800);
    swift_beginAccess();
    uint64_t v40 = *v39;
    if (*(void *)(v40 + 16))
    {
      unsigned __int8 v41 = v66;
      unint64_t v42 = sub_100031130((v67 << 48) | ((unint64_t)v68 << 40) | ((unint64_t)v69 << 32) | (v70 << 24) | ((unint64_t)v66 << 16) | ((unint64_t)v9 << 8) | v63);
      if (v43)
      {
        unint64_t v44 = v42;
        uint64_t v45 = *(void *)(v40 + 56);
        uint64_t v46 = type metadata accessor for NANPeer.Service.AuthenticationStatus(0);
        uint64_t v47 = *(void *)(v46 - 8);
        sub_1002B9098(v45 + *(void *)(v47 + 72) * v44, (uint64_t)v18, type metadata accessor for NANPeer.Service.AuthenticationStatus);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v18, 0, 1, v46);
      }
      else
      {
        uint64_t v46 = type metadata accessor for NANPeer.Service.AuthenticationStatus(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v18, 1, 1, v46);
      }
    }
    else
    {
      uint64_t v46 = type metadata accessor for NANPeer.Service.AuthenticationStatus(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v18, 1, 1, v46);
      unsigned __int8 v41 = v66;
    }
    type metadata accessor for NANPeer.Service.AuthenticationStatus(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v46 - 8) + 48))(v18, 1, v46))
    {
      sub_1000380B4((uint64_t)v18, (uint64_t *)&unk_1004862F0);
      swift_endAccess();
    }
    else
    {
      sub_1002B9098((uint64_t)v18, (uint64_t)v20, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
      sub_1000380B4((uint64_t)v18, (uint64_t *)&unk_1004862F0);
      swift_endAccess();
      if (swift_getEnumCaseMultiPayload() == 2) {
        return *(void *)v20;
      }
      sub_1002B910C((uint64_t)v20, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
    }
    swift_bridgeObjectRetain_n();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      char v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v58 = swift_slowAlloc();
      *(_DWORD *)char v31 = 136315138;
      v73[0]  = v58;
      uint64_t v59 = WiFiAddress.description.getter((v67 << 40) | ((unint64_t)v68 << 32) | (v69 << 24) | ((unint64_t)v70 << 16) | ((unint64_t)v41 << 8) | v9);
      uint64_t v74 = sub_100010680(v59, v60, v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      uint64_t v35 = "Rejecting datapath request from %s because no authenticated PMK was found for the subscribe but authentication is required";
      goto LABEL_11;
    }
    goto LABEL_28;
  }
  uint64_t v27 = v26;
  NANGenericServiceProtocol.publicKey.getter(v22, (uint64_t)v13);
  swift_bridgeObjectRelease();
  uint64_t v28 = v14;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_1000380B4((uint64_t)v13, (uint64_t *)&unk_1004852B0);
    swift_bridgeObjectRetain_n();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      char v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      *(_DWORD *)char v31 = 136315138;
      v73[0]  = v32;
      uint64_t v33 = WiFiAddress.description.getter((v67 << 40) | ((unint64_t)v68 << 32) | (v69 << 24) | ((unint64_t)v70 << 16) | ((unint64_t)v66 << 8) | v9);
      uint64_t v74 = sub_100010680(v33, v34, v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      uint64_t v35 = "Rejecting datapath request from %s because no OWE public key was found in the service specific info";
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v29, v30, v35, v31, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
LABEL_29:

      return 0;
    }
    goto LABEL_28;
  }
  uint64_t v48 = (uint64_t)v65;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v65, v13, v28);
  sub_1002B9098(v25 + *(int *)(v27 + 92), (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OWEKeys);
  uint64_t v49 = OWEKeys.generatePMK(for:asClient:)(v48, 0);
  unint64_t v51 = v50;
  sub_1002B910C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OWEKeys);
  if (v51 >> 60 == 15)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v52, v53))
    {
      unint64_t v54 = (uint8_t *)swift_slowAlloc();
      uint64_t v55 = swift_slowAlloc();
      uint64_t v72 = v28;
      v73[0]  = v55;
      *(_DWORD *)unint64_t v54 = 136315138;
      uint64_t v56 = WiFiAddress.description.getter((v67 << 40) | ((unint64_t)v68 << 32) | (v69 << 24) | ((unint64_t)v70 << 16) | ((unint64_t)v66 << 8) | v9);
      uint64_t v74 = sub_100010680(v56, v57, v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Rejecting datapath request from %s because of a failure to generate the PMK using the OWE keys", v54, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v48, v72);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v48, v28);
    }
    return 0;
  }
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v48, v28);
  return v49;
}

void sub_1002B2B30(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = a1;
  uint64_t v47 = a1 >> 8;
  unint64_t v48 = HIBYTE(a1);
  unint64_t v49 = HIWORD(a1);
  uint64_t v7 = (unsigned __int8 *)(v3 + qword_1004887E8);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  NANConstants.csaMatterServiceName.unsafeMutableAddressor();
  Swift::String v8 = String.lowercased()();
  Swift::String v9 = String.lowercased()();
  if (v8._countAndFlagsBits == v9._countAndFlagsBits && v8._object == v9._object)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = BYTE2(v6);
      goto LABEL_10;
    }
  }
  uint64_t v12 = BYTE2(v6);
  uint64_t v13 = NANFollowUpReceivedEvent.serviceInfo.getter(v6, a2, a3);
  if (v13 != 4)
  {
    uint64_t v16 = v13;
    uint64_t v17 = v14;
    unint64_t v18 = v15;
    uint64_t v19 = NANServiceInfo.csaMatterPayload.getter(v13, v14, v15);
    unint64_t v21 = v20;
    sub_1001331AC(v16, v17, v18);
    if (v21 >> 60 != 15)
    {
      uint64_t v35 = *(void **)(v51 + qword_1004850E8);
      if (v35)
      {
        swift_unknownObjectRetain();
        isa  = Data._bridgeToObjectiveC()().super.isa;
        id v37 = WiFiAddress.apiAddress.getter((v48 << 40) | ((unint64_t)v49 << 32) | ((v6 >> 40) << 24) | ((unint64_t)BYTE4(v6) << 16) | ((unint64_t)BYTE3(v6) << 8) | BYTE2(v6));
        [v35 publishReceivedMessage:isa fromSubscriberID:v47 subscriberAddress:v37];
        sub_10000C95C(v19, v21);

        swift_unknownObjectRelease();
      }
      else
      {
        sub_10000C95C(v19, v21);
      }
      return;
    }
  }
LABEL_10:
  uint64_t v22 = NANFollowUpReceivedEvent.followUpMessage.getter(v6 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)v49 << 48), a2, a3);
  if (v22)
  {
    uint64_t v23 = (uint64_t)v22;
    unint64_t v50 = v7;
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    unint64_t v26 = v48 << 48;
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v52 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136315138;
      uint64_t v28 = NANPeerServiceIdentifier.description.getter((v48 << 48) | ((unint64_t)BYTE6(v6) << 40) | ((unint64_t)BYTE5(v6) << 32) | ((unint64_t)BYTE4(v6) << 24) | ((unint64_t)BYTE3(v6) << 16) | (v12 << 8) | BYTE1(v6));
      sub_100010680(v28, v29, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Received a follow up message from %s", v27, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      unint64_t v26 = v48 << 48;
      swift_slowDealloc();
    }

    if ((NANGenericServiceProtocol.furtherServiceDiscoveryFollowUp.getter(v23) & 1) != 0
      && v50[*(int *)(type metadata accessor for NANPublish.Configuration() + 96)] == 1)
    {
      int v30 = v50[77];
      if (v30 != 2)
      {
        if ((v30 & 1) == 0)
        {
          swift_bridgeObjectRelease();
LABEL_25:
          swift_bridgeObjectRelease();
          swift_unownedRetainStrong();
          sub_100354870();
          swift_release();
          swift_retain();
          swift_release();
          uint64_t v39 = *((void *)v50 + 3);
          swift_bridgeObjectRetain();
          uint64_t v40 = (uint64_t *)NANGenericServiceProtocol.AttributeFilter.standardizedAttributes.unsafeMutableAddressor();
          int v41 = NANServiceInfo.init(information:filter:)(v39, *v40);
          uint64_t v43 = v42;
          uint64_t v44 = v12;
          unint64_t v46 = v45;
          sub_100301B48(v41, v42, v45, (v48 << 40) | ((unint64_t)BYTE6(v6) << 32) | ((unint64_t)BYTE5(v6) << 24) | ((unint64_t)BYTE4(v6) << 16) | ((unint64_t)BYTE3(v6) << 8) | v44, v47, *v50);
          sub_10000C970(v43, v46);
          swift_release();
          return;
        }
        char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v38) {
          goto LABEL_25;
        }
      }
    }
    sub_1002B6A50(v23, v26 | ((unint64_t)BYTE6(v6) << 40) | ((unint64_t)BYTE5(v6) << 32) | ((unint64_t)BYTE4(v6) << 24) | ((unint64_t)BYTE3(v6) << 16) | (v12 << 8) | BYTE1(v6));
    sub_1002B7BDC(v23, v51, v26 | ((unint64_t)BYTE6(v6) << 40) | ((unint64_t)BYTE5(v6) << 32) | ((unint64_t)BYTE4(v6) << 24) | ((unint64_t)BYTE3(v6) << 16) | (v12 << 8) | BYTE1(v6));
    swift_bridgeObjectRelease();
  }
  else
  {
    char v31 = Logger.logObject.getter();
    LOBYTE(v6)  = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, (os_log_type_t)v6))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v52 = swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 136315138;
      uint64_t v33 = NANPeerServiceIdentifier.description.getter((v48 << 48) | ((unint64_t)BYTE6(v6) << 40) | ((unint64_t)BYTE5(v6) << 32) | ((unint64_t)BYTE4(v6) << 24) | ((unint64_t)BYTE3(v6) << 16) | (v12 << 8) | BYTE1(v6));
      sub_100010680(v33, v34, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v6, "Failed to parse the follow up received from %s", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1002B31A4(uint64_t a1)
{
  uint64_t v3 = v1 + qword_1004887E8;
  swift_beginAccess();
  sub_1002B8FA8(a1, v3, (uint64_t (*)(void))type metadata accessor for NANPublish.Configuration);
  return swift_endAccess();
}

uint64_t sub_1002B3214()
{
  uint64_t v1 = v0;
  uint64_t v2 = swift_isaMask & *(void *)v0;
  uint64_t v3 = *(void *)(v2 + 0x58);
  id v4 = *(id *)(v2 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v46 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v47 = AssociatedTypeWitness;
  __chkstk_darwin();
  unint64_t v45 = (char *)&v35 - v6;
  type metadata accessor for DispatchTimeInterval();
  __chkstk_darwin();
  __chkstk_darwin();
  uint64_t result = __chkstk_darwin();
  uint64_t v12 = qword_1004887F0;
  if (v1[qword_1004887F0] == 1)
  {
    uint64_t v39 = v11;
    uint64_t v40 = (char *)&v35 - v8;
    uint64_t v41 = result;
    uint64_t v42 = v10;
    uint64_t v43 = v9;
    uint64_t v44 = v3;
    uint64_t v13 = &v1[qword_1004887F8];
    uint64_t v14 = v1;
    id v37 = v13;
    unint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      id v38 = v4;
      unint64_t v18 = (uint8_t *)v17;
      uint64_t v35 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v18 = 138412290;
      unint64_t v48 = v14;
      os_log_t v36 = v15;
      uint64_t v19 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v35 = v1;

      unint64_t v15 = v36;
      _os_log_impl((void *)&_mh_execute_header, v36, v16, "%@ will attempt to stop", v18, 0xCu);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      swift_slowDealloc();
      id v4 = v38;
      swift_slowDealloc();
    }
    else
    {
    }
    v1[v12]  = 0;
    uint64_t v20 = NANConstants.serviceTerminateEventTimeout.unsafeMutableAddressor();
    uint64_t v21 = v39;
    uint64_t v22 = (uint64_t)v40;
    uint64_t v23 = v41;
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v40, v20, v41);
    id v38 = (id)*OS_dispatch_queue.nan.unsafeMutableAddressor();
    uint64_t v24 = swift_allocObject();
    swift_unknownObjectWeakInit();
    os_log_type_t v25 = (void *)swift_allocObject();
    uint64_t v26 = v44;
    _DWORD v25[2] = v4;
    v25[3]  = v26;
    v25[4]  = v24;
    uint64_t v27 = *(void (**)(uint64_t, void, uint64_t))(v21 + 104);
    uint64_t v28 = v42;
    v27(v42, enum case for DispatchTimeInterval.never(_:), v23);
    uint64_t v29 = (uint64_t)v43;
    *uint64_t v43 = 100;
    v27(v29, enum case for DispatchTimeInterval.milliseconds(_:), v23);
    type metadata accessor for P2PTimer();
    swift_allocObject();
    *(void *)&v14[qword_1004850E0]  = P2PTimer.init(deadlineAfter:on:repeating:leeway:_:)(v22, v38, v28, v29, (uint64_t)sub_1002B8F34, (uint64_t)v25);
    swift_release();
    uint64_t v30 = *(void *)&v14[qword_1004850D0];
    swift_unownedRetainStrong();
    sub_1003546AC();
    swift_release();
    swift_unownedRetainStrong();
    uint64_t v31 = v47;
    (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v45, v30 + *(void *)(*(void *)v30 + 96), v47);
    swift_release();
    uint64_t v32 = &v14[qword_1004887E8];
    swift_beginAccess();
    uint64_t v33 = *v32;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 240))(v33, v31, AssociatedConformanceWitness);
    return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v45, v47);
  }
  return result;
}

void *sub_1002B3964()
{
  swift_beginAccess();
  uint64_t result = (void *)swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result;
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v6 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 138412290;
      uint64_t v7 = v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v6 = v1;

      _os_log_impl((void *)&_mh_execute_header, v3, v4, "%@ timed out while waiting for terminate event", v5, 0xCu);
      sub_100010BCC(&qword_10047CC30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v8 = qword_1004850E8;
    Swift::String v9 = *(void **)&v2[qword_1004850E8];
    if (v9) {
      [v9 publishTerminatedWithReason:2];
    }
    *(void *)&v2[v8]  = 0;
    swift_unknownObjectRelease();
    swift_unownedRetainStrong();
    sub_100354870();
    swift_release();
    sub_1002D9C04((uint64_t)v2);

    return (void *)swift_release();
  }
  return result;
}

uint64_t sub_1002B3B4C()
{
  id v1 = v0;
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    os_log_type_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v4 = 138412290;
    *(void *)&v8[0]  = v1;
    id v6 = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v1;

    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Terminating %@ because it's client was invalidated", v4, 0xCu);
    sub_100010BCC(&qword_10047CC30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  memset(v8, 0, sizeof(v8));
  sub_1002ABA2C((uint64_t)v8);
  return sub_1002B3214();
}

uint64_t sub_1002B3CC0()
{
  uint64_t v0 = type metadata accessor for DispatchPredicate();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  os_log_type_t v3 = (uint64_t *)((char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  os_log_type_t v4 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v5 = (void *)*v4;
  *os_log_type_t v3 = *v4;
  (*(void (**)(uint64_t *, void, uint64_t))(v1 + 104))(v3, enum case for DispatchPredicate.onQueue(_:), v0);
  id v6 = v5;
  LOBYTE(v5)  = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v1 + 8))(v3, v0);
  if (v5) {
    return sub_1002B3214();
  }
  __break(1u);
  return result;
}

void sub_1002B3DD0(void *a1)
{
  id v1 = a1;
  sub_1002B3CC0();
}

void sub_1002B3E18(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  Swift::String v9 = (uint64_t *)((char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v11 = (void *)*v10;
  *Swift::String v9 = *v10;
  (*(void (**)(uint64_t *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v12 = v11;
  LOBYTE(v11)  = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v7 + 8))(v9, v6);
  if (v11)
  {
    if (*(unsigned char *)(v3 + qword_1004887F0) == 1)
    {
      uint64_t v24 = a2;
      unint64_t v13 = WiFiAwarePublisherDataSessionHandle.peerServiceIdentifier.getter();
      char v14 = v13;
      unint64_t v15 = v13 >> 8;
      unint64_t v16 = v13 >> 16;
      unint64_t v17 = v13 >> 24;
      unint64_t v18 = HIDWORD(v13);
      unint64_t v19 = v13 >> 40;
      unint64_t v20 = HIWORD(v13);
      swift_beginAccess();
      char v25 = v14;
      char v26 = v15;
      char v27 = v16;
      char v28 = v17;
      char v29 = v18;
      char v30 = v19;
      char v31 = v20;
      _s17ResponderInstanceCMa();
      sub_1001B8154();
      Dictionary.subscript.getter();
      uint64_t v21 = v32;
      if (v32)
      {
        swift_endAccess();
        uint64_t v22 = &v21[qword_100488790];
        uint64_t v23 = *(void *)&v21[qword_100488790];
        *(void *)uint64_t v22 = v24;
        *((void *)v22 + 1)  = a3;
        sub_100011E30(v23);
        swift_retain();
        sub_100278D88();

        return;
      }
      swift_endAccess();
      a2  = v24;
    }
    a2(3);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1002B408C(void *a1, int a2, void *a3, void *a4)
{
  return sub_1002B5FA0(a1, a2, a3, a4, (uint64_t)&unk_100469250, (uint64_t)sub_100013164, (void (*)(id, uint64_t, uint64_t))sub_1002B3E18);
}

uint64_t sub_1002B40C0(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = v5;
  uint64_t v37 = a3;
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  char v14 = (uint64_t *)((char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v15 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  unint64_t v16 = (void *)*v15;
  uint64_t *v14 = *v15;
  (*(void (**)(uint64_t *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  id v17 = v16;
  LOBYTE(v16)  = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v12 + 8))(v14, v11);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    return result;
  }
  if (*(unsigned char *)(v6 + qword_1004887F0) != 1) {
    return a5(3);
  }
  unsigned int v35 = a4;
  os_log_t v36 = a5;
  unint64_t v19 = (unsigned __int8 *)(v6 + qword_1004887E8);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  NANConstants.csaMatterServiceName.unsafeMutableAddressor();
  Swift::String v20 = String.lowercased()();
  Swift::String v21 = String.lowercased()();
  if (v20._countAndFlagsBits == v21._countAndFlagsBits && v20._object == v21._object)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    goto LABEL_11;
  }
  char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v23)
  {
LABEL_11:
    int v26 = NANServiceInfo.init(csaMatterPayload:)();
    uint64_t v28 = v31;
    unint64_t v30 = v32;
    sub_100013D44(a1, a2);
    goto LABEL_12;
  }
  rawValue  = NANGenericServiceProtocol.init()().attributes._rawValue;
  sub_100013D44(a1, a2);
  NANGenericServiceProtocol.blob.setter(a1, a2);
  uint64_t v24 = (uint64_t)rawValue;
  char v25 = (uint64_t *)NANGenericServiceProtocol.AttributeFilter.all.unsafeMutableAddressor();
  int v26 = NANServiceInfo.init(information:filter:)(v24, *v25);
  uint64_t v28 = v27;
  unint64_t v30 = v29;
LABEL_12:
  swift_unownedRetainStrong();
  sub_100354870();
  swift_release();
  swift_retain();
  swift_release();
  unint64_t v33 = WiFiMACAddress.wifiAddress.getter();
  sub_100301B48(v26, v28, v30, v33 & 0xFFFFFFFFFFFFLL, v35, *v19);
  swift_release();
  v36(0);
  return sub_10000C970(v28, v30);
}

void sub_1002B43E4(void *a1, int a2, void *a3, void *a4, unsigned int a5, void *aBlock)
{
  uint64_t v10 = _Block_copy(aBlock);
  id v11 = a3;
  id v12 = a4;
  id v16 = a1;
  uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v15 = v14;

  *(void *)(swift_allocObject() + 16)  = v10;
  sub_1002B40C0(v13, v15, (uint64_t)v12, a5, (uint64_t (*)(uint64_t))sub_100013164);
  swift_release();
  sub_10000C970(v13, v15);
}

uint64_t sub_1002B44E0(uint64_t a1, uint64_t a2)
{
  if (a2) {
    rawValue  = WiFiAwarePublishDatapathServiceSpecificInfo.genericServiceProtocol.getter();
  }
  else {
    rawValue  = (unint64_t)NANGenericServiceProtocol.init()().attributes._rawValue;
  }
  unint64_t v4 = rawValue;
  uint64_t v5 = a1 + qword_1004887E8;
  swift_beginAccess();
  *(void *)(v5 + *(int *)(type metadata accessor for NANPublish.Configuration() + 84) + 8)  = v4;
  swift_bridgeObjectRelease();
  return sub_1002AEF04();
}

uint64_t sub_1002B4574(void *a1, int a2, void *a3, void *a4)
{
  return sub_1002B49B8(a1, a2, a3, a4, (uint64_t)&unk_100469200, (uint64_t (*)(uint64_t))sub_100013164, (void (*)(uint64_t))sub_1002B922C);
}

uint64_t sub_1002B45A8(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  return sub_1002B45C0(a1, a2, a3, (void (*)(uint64_t))sub_1002B907C);
}

uint64_t sub_1002B45C0(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, void (*a4)(uint64_t))
{
  ObjectType  = swift_getObjectType();
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  id v12 = (uint64_t *)((char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  unint64_t v14 = (void *)*v13;
  *id v12 = *v13;
  (*(void (**)(uint64_t *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  id v15 = v14;
  LOBYTE(v14)  = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v10 + 8))(v12, v9);
  if (v14)
  {
    if (*(unsigned char *)(v4 + qword_1004887F0) == 1)
    {
      __chkstk_darwin();
      *(&v19 - 2)  = v4;
      *(&v19 - 1)  = a1;
      WitnessTable  = swift_getWitnessTable();
      sub_100301F7C(a4, (uint64_t)(&v19 - 4), ObjectType, WitnessTable);
      uint64_t v18 = 0;
    }
    else
    {
      uint64_t v18 = 3;
    }
    return a2(v18);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002B47C0(uint64_t a1, void *a2)
{
  uint64_t v3 = a1 + qword_1004887E8;
  swift_beginAccess();
  uint64_t v19 = *(void *)(v3 + 24);
  if (!a2)
  {
    swift_bridgeObjectRetain();
    NANGenericServiceProtocol.blob.setter(0, 0xF000000000000000);
    NANGenericServiceProtocol.textInfo.setter(0, 0xF000000000000000);
LABEL_12:
    uint64_t v17 = 0;
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  id v4 = [a2 blob];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v8 = 0xF000000000000000;
  }
  NANGenericServiceProtocol.blob.setter(v6, v8);
  id v9 = [a2 txtRecordData];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v13 = v12;
  }
  else
  {
    uint64_t v11 = 0;
    unint64_t v13 = 0xF000000000000000;
  }
  NANGenericServiceProtocol.textInfo.setter(v11, v13);
  id v14 = [a2 instanceName];
  if (!v14)
  {
    a2  = 0;
    goto LABEL_12;
  }
  id v15 = v14;
  a2  = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v16;

LABEL_13:
  NANGenericServiceProtocol.instanceName.setter((uint64_t)a2, v17);
  swift_beginAccess();
  NANPublish.Configuration.serviceSpecificInfo.setter(v19);
  swift_endAccess();
  *(unsigned char *)(v3 + 77)  = sub_1002AED84();
  return sub_1002AEF04();
}

uint64_t sub_1002B4984(void *a1, int a2, void *a3, void *a4)
{
  return sub_1002B49B8(a1, a2, a3, a4, (uint64_t)&unk_1004691D8, sub_100012A00, (void (*)(uint64_t))sub_1002B907C);
}

uint64_t sub_1002B49B8(void *a1, int a2, void *a3, void *aBlock, uint64_t a5, uint64_t (*a6)(uint64_t), void (*a7)(uint64_t))
{
  uint64_t v11 = _Block_copy(aBlock);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16)  = v11;
  id v13 = a3;
  id v14 = a1;
  sub_1002B45C0((uint64_t)a3, a6, v12, a7);

  return swift_release();
}

void sub_1002B4A60(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = swift_isaMask & *v2;
  uint64_t v37 = *(void *)(v6 + 0x58);
  uint64_t v38 = *(void *)(v6 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v33 - v9;
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  id v14 = (uint64_t *)((char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v15 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v16 = (void *)*v15;
  uint64_t *v14 = *v15;
  (*(void (**)(uint64_t *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  id v17 = v16;
  LOBYTE(v16)  = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v12 + 8))(v14, v11);
  if (v16)
  {
    unint64_t v33 = v10;
    uint64_t v34 = v8;
    uint64_t v35 = a2;
    uint64_t v36 = a1;
    unint64_t v18 = WiFiAwarePublisherDataSessionHandle.peerServiceIdentifier.getter();
    char v19 = v18;
    unint64_t v20 = v18 >> 8;
    unint64_t v21 = v18 >> 16;
    unint64_t v22 = v18 >> 24;
    unint64_t v23 = HIDWORD(v18);
    unint64_t v24 = v18 >> 40;
    unint64_t v25 = HIWORD(v18);
    swift_beginAccess();
    char v39 = v19;
    char v40 = v20;
    char v41 = v21;
    char v42 = v22;
    char v43 = v23;
    char v44 = v24;
    char v45 = v25;
    _s17ResponderInstanceCMa();
    sub_1001B8154();
    Dictionary.subscript.getter();
    int v26 = v46;
    if (v46)
    {
      swift_endAccess();
      uint64_t v27 = v36;
      sub_100277358(v36);
      uint64_t v28 = *(void *)((char *)v3 + qword_1004850D0);
      swift_unownedRetainStrong();
      sub_100354870();
      swift_release();
      sub_1002D9C18();
      swift_release();
      swift_unownedRetainStrong();
      sub_100354870();
      swift_release();
      sub_1002D9C44();
      swift_release();
      swift_unownedRetainStrong();
      unint64_t v30 = v33;
      uint64_t v29 = v34;
      (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v33, v28 + *(void *)(*(void *)v28 + 96), AssociatedTypeWitness);
      swift_release();
      uint64_t v31 = WiFiAwarePublisherDataSessionHandle.peerServiceIdentifier.getter();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 312))(v27, v31 & 0xFFFFFFFFFFFFFFLL, AssociatedTypeWitness, AssociatedConformanceWitness);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v30, AssociatedTypeWitness);
    }
    else
    {
      swift_endAccess();
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1002B5070(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  id v7 = a1;
  sub_1002B4A60(a3, (uint64_t)v6);
}

void sub_1002B50E0(void *a1, void (*a2)(void, void), uint64_t a3)
{
  id v4 = (char *)v3;
  uint64_t v75 = a3;
  id v76 = a1;
  uint64_t v6 = *(void *)((swift_isaMask & *v3) + 0x58);
  uint64_t v7 = *(void *)((swift_isaMask & *v3) + 0x50);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v71 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v68 - v8;
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v13 = (uint64_t *)((char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v14 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  id v15 = (void *)*v14;
  *uint64_t v13 = *v14;
  (*(void (**)(uint64_t *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  id v16 = v15;
  LOBYTE(v15)  = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v11 + 8))(v13, v10);
  if (v15)
  {
    unint64_t v70 = v9;
    unint64_t v69 = (void **)v14;
    uint64_t v74 = a2;
    unint64_t v17 = WiFiAwarePublisherDataSessionHandle.peerServiceIdentifier.getter();
    char v18 = v17;
    unint64_t v19 = v17 >> 8;
    unint64_t v20 = v17 >> 16;
    uint64_t v21 = v6;
    unint64_t v22 = v17 >> 24;
    unint64_t v23 = v4;
    unint64_t v24 = HIDWORD(v17);
    unint64_t v25 = v17 >> 40;
    unint64_t v26 = HIWORD(v17);
    uint64_t v73 = v23;
    swift_beginAccess();
    char v83 = v18;
    char v84 = v19;
    char v85 = v20;
    char v86 = v22;
    uint64_t v27 = v21;
    uint64_t v28 = v7;
    char v87 = v24;
    char v88 = v25;
    char v89 = v26;
    _s17ResponderInstanceCMa();
    sub_1001B8154();
    Dictionary.subscript.getter();
    id v29 = (id)v90[0];
    if (v90[0])
    {
      swift_endAccess();
      unint64_t v30 = WiFiAwarePublisherDataSessionHandle.peerServiceIdentifier.getter();
      uint64_t v31 = v73;
      uint64_t v32 = *(void *)&v73[qword_1004850D0];
      swift_unownedRetainStrong();
      unint64_t v33 = v71;
      uint64_t v34 = v70;
      uint64_t v35 = AssociatedTypeWitness;
      (*(void (**)(char *, uint64_t, uint64_t))(v71 + 16))(v70, v32 + *(void *)(*(void *)v32 + 96), AssociatedTypeWitness);
      swift_release();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      char v44 = (void *)(*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 336))((v30 >> 8) & 0xFFFFFFFFFFFFLL, v35, AssociatedConformanceWitness);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v35);
      char v45 = &v31[qword_1004887E8];
      swift_beginAccess();
      uint64_t v46 = type metadata accessor for NANPublish.Configuration();
      sub_1000136F4((uint64_t)&v45[*(int *)(v46 + 88)], (uint64_t)&aBlock, (uint64_t *)&unk_100486320);
      if (v82 == 255)
      {
        sub_1000380B4((uint64_t)&aBlock, (uint64_t *)&unk_100486320);
      }
      else if (v82)
      {
        sub_10006EF50(&aBlock, (uint64_t)v90);
        uint64_t v47 = v91;
        uint64_t v48 = v92;
        sub_1000369C4(v90, v91);
        [v44 setInfraRelayOperationStatus:((*(uint64_t (**)(uint64_t, uint64_t))(v48 + 24))(v47, v48) & 1)];
        sub_100010754((uint64_t)v90);
      }
      else
      {
        sub_1001B7D50((uint64_t)&aBlock);
      }
      unint64_t v49 = *(void **)&v31[qword_1004850F0];
      if (v49)
      {
        id v50 = v49;
        WiFiAwareDataSessionStatisticsReport.difference(from:)(v50);
      }
      else
      {
        *(void *)&v31[qword_1004850F0]  = v44;
        uint64_t v51 = (int *)&v31[qword_100485108];
        id v52 = v44;
        swift_beginAccess();
        if (!notify_is_valid_token(*v51))
        {
          uint64_t AssociatedTypeWitness = HIWORD(v30);
          unint64_t v71 = v30 >> 40;
          unint64_t v70 = (char *)HIDWORD(v30);
          id v76 = v29;
          os_log_type_t v53 = *v69;
          unint64_t v54 = v44;
          uint64_t v55 = swift_allocObject();
          swift_unknownObjectWeakInit();
          uint64_t v56 = swift_allocObject();
          *(void *)(v56 + 16)  = v28;
          *(void *)(v56 + 24)  = v27;
          *(void *)(v56 + 32)  = v55;
          *(unsigned char *)(v56 + 40)  = BYTE1(v30);
          *(unsigned char *)(v56 + 41)  = BYTE2(v30);
          *(unsigned char *)(v56 + 42)  = BYTE3(v30);
          *(unsigned char *)(v56 + 43)  = (_BYTE)v70;
          *(unsigned char *)(v56 + 44)  = v71;
          *(unsigned char *)(v56 + 45)  = AssociatedTypeWitness;
          uint64_t v81 = sub_1002B9214;
          uint64_t v82 = v56;
          *(void *)&aBlock  = _NSConcreteStackBlock;
          *((void *)&aBlock + 1)  = 1107296256;
          uint64_t v79 = sub_100163154;
          uint64_t v80 = &unk_1004691A0;
          unint64_t v57 = _Block_copy(&aBlock);
          uint64_t v58 = v53;
          id v29 = v76;
          uint64_t v59 = v58;
          swift_release();
          swift_beginAccess();
          uint32_t v60 = notify_register_dispatch("com.apple.airplay.isPlayingAmbientAudioChanged", v51, v59, v57);
          swift_endAccess();
          uint64_t v61 = v57;
          char v44 = v54;
          _Block_release(v61);

          if (v60)
          {
            uint64_t v62 = Logger.logObject.getter();
            os_log_type_t v63 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v62, v63))
            {
              uint64_t v64 = (uint8_t *)swift_slowAlloc();
              *(void *)&aBlock  = swift_slowAlloc();
              *(_DWORD *)uint64_t v64 = 136315138;
              unint64_t v65 = static WiFiError.notifyErrorMessage(from:)(v60);
              uint64_t v77 = sub_100010680(v65, v66, (uint64_t *)&aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v62, v63, "Failed to start monitoring statistic reset events with error: %s", v64, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }

            char v44 = v54;
          }
        }
      }
      id v67 = v44;
      v74(0, v44);
    }
    else
    {
      swift_endAccess();
      id v37 = v76;
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v38, v39))
      {
        char v40 = (uint8_t *)swift_slowAlloc();
        *(void *)&aBlock  = swift_slowAlloc();
        *(_DWORD *)char v40 = 136315138;
        uint64_t v41 = WiFiAwarePublisherDataSessionHandle.peerServiceIdentifier.getter();
        uint64_t v42 = NANPeerServiceIdentifier.description.getter(v41 & 0xFFFFFFFFFFFFFFLL);
        v90[0]  = sub_100010680(v42, v43, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Unable to generate data session statistics for %s because the publish or datapath responder referenced doesn't exist", v40, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      v74(3, 0);
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1002B5BDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v14 - v6;
  swift_beginAccess();
  Strong  = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v9 = (char *)Strong;
    uint64_t v10 = *(void *)(Strong + qword_1004850D0);
    swift_unownedRetainStrong();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v10 + *(void *)(*(void *)v10 + 96), AssociatedTypeWitness);
    swift_release();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 336))(a3 & 0xFFFFFFFFFFFFLL, AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
    uint64_t v13 = *(void **)&v9[qword_1004850F0];
    *(void *)&v9[qword_1004850F0]  = v12;
  }
}

uint64_t sub_1002B5F6C(void *a1, int a2, void *a3, void *a4)
{
  return sub_1002B5FA0(a1, a2, a3, a4, (uint64_t)&unk_100469160, (uint64_t)sub_1002B91D4, (void (*)(id, uint64_t, uint64_t))sub_1002B50E0);
}

uint64_t sub_1002B5FA0(void *a1, int a2, void *a3, void *aBlock, uint64_t a5, uint64_t a6, void (*a7)(id, uint64_t, uint64_t))
{
  uint64_t v11 = _Block_copy(aBlock);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16)  = v11;
  id v13 = a3;
  id v14 = a1;
  a7(v13, a6, v12);

  return swift_release();
}

uint64_t sub_1002B6048(char *a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (uint64_t *)((char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = OS_dispatch_queue.nan.unsafeMutableAddressor();
  uint64_t v8 = (void *)*v7;
  *uint64_t v6 = *v7;
  (*(void (**)(uint64_t *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v9 = v8;
  LOBYTE(v8)  = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v4 + 8))(v6, v3);
  if (v8)
  {
    if (*(unsigned char *)(v1 + qword_1004887F0) == 1)
    {
      char v44 = a1;
      unint64_t v11 = WiFiAwarePublisherDataSessionHandle.peerServiceIdentifier.getter();
      char v12 = v11;
      unint64_t v13 = v11 >> 8;
      unint64_t v14 = v11 >> 16;
      unint64_t v15 = v11 >> 24;
      unint64_t v16 = HIDWORD(v11);
      unint64_t v17 = v11 >> 40;
      unint64_t v18 = HIWORD(v11);
      swift_beginAccess();
      char v47 = v12;
      char v48 = v13;
      char v49 = v14;
      char v50 = v15;
      char v51 = v16;
      char v52 = v17;
      char v53 = v18;
      _s17ResponderInstanceCMa();
      sub_1001B8154();
      Dictionary.subscript.getter();
      unint64_t v19 = v45;
      if (v45)
      {
        swift_endAccess();
        id v20 = v19;
        uint64_t v21 = v44;
        unint64_t v22 = (char *)v20;
        unint64_t v23 = v21;
        unint64_t v24 = Logger.logObject.getter();
        os_log_type_t v25 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v24, v25))
        {
          uint64_t v26 = swift_slowAlloc();
          uint64_t v27 = swift_slowAlloc();
          char v44 = v22;
          uint64_t v28 = (void *)v27;
          *(_DWORD *)uint64_t v26 = 138412546;
          unint64_t v54 = v44;
          id v29 = v44;
          unint64_t v43 = v24;
          unint64_t v30 = v23;
          uint64_t v31 = v29;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v28 = v19;

          *(_WORD *)(v26 + 12)  = 2112;
          unint64_t v54 = v30;
          uint64_t v32 = v30;
          unint64_t v23 = v30;
          unint64_t v24 = v43;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v28[1]  = v23;

          _os_log_impl((void *)&_mh_execute_header, v24, v25, "%@ got an issue report %@", (uint8_t *)v26, 0x16u);
          sub_100010BCC(&qword_10047CC30);
          swift_arrayDestroy();
          unint64_t v22 = v44;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        swift_unownedRetainStrong();
        unint64_t v33 = &v22[qword_100484170];
        swift_beginAccess();
        char v45 = (void *)NANPeerServiceIdentifier.description.getter(*v33 | ((unint64_t)v33[8] << 8) | ((unint64_t)v33[9] << 16) | ((unint64_t)*(unsigned int *)(v33 + 10) << 24));
        uint64_t v46 = v34;
        v35._countAndFlagsBits  = 0x686374696C47203ALL;
        v35._object  = (void *)0xE900000000000020;
        String.append(_:)(v35);
        id v36 = [v23 rtpSequenceNumber];
        if (v36)
        {
          id v37 = v36;
          id v38 = [v36 description];

          uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v41 = v40;
        }
        else
        {
          uint64_t v39 = 0;
          uint64_t v41 = (void *)0xE000000000000000;
        }
        v42._countAndFlagsBits  = v39;
        v42._object  = v41;
        String.append(_:)(v42);
        swift_bridgeObjectRelease();
        sub_100355E38((uint64_t)v45, v46);

        swift_release();
        return swift_bridgeObjectRelease();
      }
      else
      {
        return swift_endAccess();
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1002B6514(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v6 = a3;
  id v7 = a4;
  id v8 = a1;
  sub_1002B6048(v6);
}

id sub_1002B6590(void *a1)
{
  id v1 = a1;
  sub_1002B65F8();

  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();

  return v2;
}

uint64_t sub_1002B65F8()
{
  strcpy((char *)v8, "NANPublish [");
  BYTE5(v8[1])  = 0;
  HIWORD(v8[1])  = -5120;
  uint64_t v1 = v0 + qword_1004887E8;
  swift_beginAccess();
  v2._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits  = 8285;
  v3._object  = (void *)0xE200000000000000;
  String.append(_:)(v3);
  uint64_t v5 = *(void *)(v1 + 8);
  uint64_t v4 = *(void **)(v1 + 16);
  swift_bridgeObjectRetain();
  v6._countAndFlagsBits  = NANServiceName.description.getter(v5, v4);
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8[0];
}

void sub_1002B66E0()
{
}

uint64_t _s8InstanceCMa_0()
{
  return sub_100038354();
}

void sub_1002B673C()
{
  if (!qword_1004851F0)
  {
    type metadata accessor for LongTermPairingKeys(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1004851F0);
    }
  }
}

NSObject *sub_1002B6794(uint64_t a1, uint64_t a2)
{
  return sub_1002ACBA4(a1, a2);
}

uint64_t sub_1002B67B0()
{
  return sub_1002AE13C();
}

uint64_t sub_1002B67DC@<X0>(uint64_t a1@<X8>)
{
  return sub_1002ABABC(a1);
}

uint64_t sub_1002B6800()
{
  return sub_1001BFF20(&qword_100481E48);
}

uint64_t sub_1002B6834(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8)  = result;
  return result;
}

uint64_t sub_1002B6870()
{
  return sub_1001BFF20(&qword_100485248);
}

uint64_t sub_1002B68A4(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8)  = result;
  return result;
}

uint64_t sub_1002B68E0()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1002B6918()
{
  swift_beginAccess();
  Strong  = (char *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    if (Strong[qword_1004887F0] == 1)
    {
      *(void *)&Strong[qword_1004850F8]  = 0;
      swift_release();
      __chkstk_darwin();
      unsigned char v4[2] = v1;
      uint64_t v2 = _s8InstanceCMa_0();
      WitnessTable  = swift_getWitnessTable();
      sub_100301F7C((void (*)(uint64_t))sub_1002B901C, (uint64_t)v4, v2, WitnessTable);
    }
    else
    {
    }
  }
}

uint64_t sub_1002B6A50(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v137 = a1;
  unint64_t v138 = a2;
  sub_100010BCC((uint64_t *)&unk_1004862F0);
  __chkstk_darwin();
  uint64_t v124 = (uint64_t)&v111 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v127 = (char *)&v111 - v5;
  uint64_t v6 = type metadata accessor for DispatchTime();
  uint64_t v129 = *(void *)(v6 - 8);
  uint64_t v130 = v6;
  __chkstk_darwin();
  uint64_t v128 = (char *)&v111 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for NANPeer.Service.AuthenticationStatus(0);
  uint64_t v133 = *(void *)(v8 - 8);
  uint64_t v134 = v8;
  __chkstk_darwin();
  uint64_t v123 = (uint64_t)&v111 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v126 = (uint64_t)&v111 - v10;
  uint64_t v132 = type metadata accessor for NANPeer.Service.AuthenticationStatus.State(0);
  __chkstk_darwin();
  uint64_t v125 = (uint64_t *)((char *)&v111 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  uint64_t v131 = (uint64_t)&v111 - v12;
  type metadata accessor for OWEKeys();
  __chkstk_darwin();
  uint64_t v14 = (uint64_t)&v111 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_1004852B0);
  __chkstk_darwin();
  unint64_t v16 = (char *)&v111 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin();
  uint64_t v135 = (uint64_t)&v111 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_1004852C0);
  __chkstk_darwin();
  uint64_t v21 = (char *)&v111 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for LongTermPairingKeys(0);
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin();
  os_log_type_t v25 = (char *)&v111 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v136 = v3;
  sub_1000136F4(v3 + qword_100485100, (uint64_t)v21, &qword_1004852C0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1) {
    return sub_1000380B4((uint64_t)v21, &qword_1004852C0);
  }
  sub_1002B8F40((uint64_t)v21, (uint64_t)v25, type metadata accessor for LongTermPairingKeys);
  NANGenericServiceProtocol.publicKey.getter(v137, (uint64_t)v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    unint64_t v27 = v138;
    sub_1000380B4((uint64_t)v16, (uint64_t *)&unk_1004852B0);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      unint64_t v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v141 = swift_slowAlloc();
      *(_DWORD *)unint64_t v30 = 136315138;
      uint64_t v31 = NANPeerServiceIdentifier.description.getter(v27 & 0xFFFFFFFFFFFFFFLL);
      v140[0]  = sub_100010680(v31, v32, &v141);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Failed to authenticate %s because missing public key in the authentication request", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v33 = (uint64_t)v25;
    return sub_1002B910C(v33, type metadata accessor for LongTermPairingKeys);
  }
  unint64_t v34 = HIWORD(v138);
  int v122 = v25;
  unint64_t v35 = HIDWORD(v138);
  unint64_t v36 = v138 >> 24;
  unint64_t v116 = v138 >> 16;
  uint64_t v115 = v18;
  id v37 = *(void (**)(uint64_t, char *, uint64_t))(v18 + 32);
  uint64_t v121 = v17;
  v37(v135, v16, v17);
  unint64_t v38 = v136;
  uint64_t v39 = (unsigned __int8 *)(v136 + qword_1004887E8);
  swift_beginAccess();
  uint64_t v114 = type metadata accessor for NANPublish.Configuration();
  sub_1002B9098((uint64_t)&v39[*(int *)(v114 + 92)], v14, (uint64_t (*)(void))type metadata accessor for OWEKeys);
  uint64_t v40 = *(void *)(v38 + qword_1004850D0);
  swift_unownedRetainStrong();
  uint64_t v41 = WiFiInterface.macAddress.getter();
  uint64_t v113 = v40;
  swift_release();
  uint64_t v42 = *((void *)v39 + 3);
  uint64_t v120 = BYTE6(v138);
  uint64_t v117 = BYTE5(v138);
  unint64_t v43 = ((unint64_t)BYTE5(v138) << 32) & 0xFFFF00FFFFFFFFFFLL | ((unint64_t)v34 << 40);
  int v44 = v138;
  uint64_t v119 = BYTE4(v138);
  uint64_t v118 = BYTE3(v138);
  unint64_t v45 = v43 & 0xFFFFFFFF000000FFLL | ((unint64_t)v35 << 24) | ((unint64_t)v36 << 16) | ((unint64_t)v116 << 8);
  uint64_t v46 = BYTE1(v138);
  unint64_t v47 = v45 & 0xFFFFFFFFFFFFFF00 | BYTE1(v138);
  swift_bridgeObjectRetain();
  uint64_t v48 = LongTermPairingKeys.authenticationResponse(forPeer:with:using:on:myServiceSpecificInfo:)(v47, v137, (uint64_t (*)(uint64_t))v14, v41 & 0xFFFFFFFFFFFFLL, v42);
  swift_bridgeObjectRelease();
  sub_1002B910C(v14, (uint64_t (*)(void))type metadata accessor for OWEKeys);
  unint64_t v116 = v48;
  if (!v48)
  {
    uint64_t v123 = BYTE1(v44);
    uint64_t v131 = BYTE2(v44);
    unint64_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      uint64_t v59 = (uint8_t *)swift_slowAlloc();
      v140[0]  = swift_slowAlloc();
      *(_DWORD *)uint64_t v59 = 136315138;
      uint64_t v60 = NANPeerServiceIdentifier.description.getter((v117 << 40) | (v120 << 48) | (v119 << 32) | (v118 << 24) | (v131 << 16) | (v123 << 8) | v138);
      uint64_t v139 = sub_100010680(v60, v61, v140);
      unint64_t v62 = v136;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "Failed to authenticate %s because authentication response generation failed", v59, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      unint64_t v62 = v38;
    }

    uint64_t v76 = v115;
    uint64_t v77 = v121;
    uint64_t v79 = v133;
    uint64_t v78 = v134;
    uint64_t v80 = (uint64_t)v127;
    unint64_t v81 = v62 + qword_100488800;
    swift_beginAccess();
    uint64_t v82 = *(void *)v81;
    if (*(void *)(*(void *)v81 + 16))
    {
      uint64_t v83 = v123;
      unint64_t v84 = sub_100031130((v117 << 40) | (v120 << 48) | (v119 << 32) | (v118 << 24) | (v131 << 16) | (v123 << 8) | v138);
      if (v85)
      {
        sub_1002B9098(*(void *)(v82 + 56) + *(void *)(v79 + 72) * v84, v80, type metadata accessor for NANPeer.Service.AuthenticationStatus);
        char v86 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v79 + 56);
        v86(v80, 0, 1, v78);
      }
      else
      {
        char v86 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v79 + 56);
        v86(v80, 1, 1, v78);
      }
    }
    else
    {
      char v86 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v79 + 56);
      v86(v80, 1, 1, v78);
      uint64_t v83 = v123;
    }
    swift_endAccess();
    int v106 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v79 + 48))(v80, 1, v78);
    sub_1000380B4(v80, (uint64_t *)&unk_1004862F0);
    if (v106 == 1)
    {
      uint64_t v107 = (uint64_t)v125;
      void *v125 = v137;
      swift_storeEnumTagMultiPayload();
      uint64_t v108 = v126;
      sub_1002B9098(v107, v126, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
      type metadata accessor for P2PTimer();
      swift_bridgeObjectRetain();
      size_t v109 = v128;
      variable initialization expression of AWDLPeer.lastUpdated();
      sub_1002B910C(v107, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
      (*(void (**)(uint64_t, char *, uint64_t))(v129 + 32))(v108 + *(int *)(v78 + 20), v109, v130);
      uint64_t v110 = v124;
      sub_1002B8F40(v108, v124, type metadata accessor for NANPeer.Service.AuthenticationStatus);
      v86(v110, 0, 1, v78);
      swift_beginAccess();
      sub_100354D90(v110, (v117 << 40) | (v120 << 48) | (v119 << 32) | (v118 << 24) | (v131 << 16) | (v83 << 8) | v138);
      swift_endAccess();
      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v135, v121);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v135, v77);
    }
    goto LABEL_32;
  }
  swift_bridgeObjectRelease();
  sub_1002B9098((uint64_t)&v39[*(int *)(v114 + 92)], v14, (uint64_t (*)(void))type metadata accessor for OWEKeys);
  uint64_t v49 = v135;
  uint64_t v50 = OWEKeys.generatePMK(for:asClient:)(v135, 0);
  unint64_t v52 = v51;
  sub_1002B910C(v14, (uint64_t (*)(void))type metadata accessor for OWEKeys);
  if (v52 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
    char v53 = Logger.logObject.getter();
    LOBYTE(v44)  = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v53, (os_log_type_t)v44))
    {
      unint64_t v54 = (uint8_t *)swift_slowAlloc();
      v140[0]  = swift_slowAlloc();
      *(_DWORD *)unint64_t v54 = 136315138;
      uint64_t v55 = NANPeerServiceIdentifier.description.getter((v117 << 40) | (v120 << 48) | (v119 << 32) | (v118 << 24) | ((unint64_t)BYTE2(v44) << 16) | (v46 << 8) | v138);
      uint64_t v139 = sub_100010680(v55, v56, v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v53, (os_log_type_t)v44, "Failed to authenticate %s because PMK generation failed", v54, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v49, v121);
    goto LABEL_32;
  }
  uint64_t v63 = v131;
  *(void *)uint64_t v131 = v50;
  *(void *)(v63 + 8)  = v52;
  swift_storeEnumTagMultiPayload();
  uint64_t v64 = (uint64_t *)(v136 + qword_100488800);
  swift_beginAccess();
  unint64_t v136 = v52;
  uint64_t v137 = v50;
  sub_100013D44(v50, v52);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v139 = *v64;
  uint64_t v66 = v139;
  *uint64_t v64 = 0x8000000000000000;
  unint64_t v67 = (v117 << 40) | (v120 << 48) | (v119 << 32) | (v118 << 24) | ((unint64_t)BYTE2(v44) << 16) | ((unint64_t)BYTE1(v44) << 8) | v44;
  unint64_t v69 = sub_100031130(v67);
  uint64_t v70 = *(void *)(v66 + 16);
  BOOL v71 = (v68 & 1) == 0;
  uint64_t v72 = v70 + v71;
  if (__OFADD__(v70, v71))
  {
    __break(1u);
    goto LABEL_35;
  }
  LOBYTE(v14)  = v68;
  uint64_t v73 = *(void *)(v66 + 24);
  BOOL v112 = v39;
  if (v73 >= v72)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_23;
    }
LABEL_35:
    sub_1003A3444();
    uint64_t v66 = v139;
    goto LABEL_23;
  }
  sub_100292528(v72, isUniquelyReferenced_nonNull_native);
  uint64_t v66 = v139;
  unint64_t v74 = sub_100031130(v67);
  if ((v14 & 1) == (v75 & 1))
  {
    unint64_t v69 = v74;
LABEL_23:
    uint64_t v88 = v129;
    uint64_t v87 = v130;
    char v89 = v128;
    *uint64_t v64 = v66;
    swift_bridgeObjectRelease();
    os_log_type_t v90 = (void *)*v64;
    if (v14)
    {
      swift_bridgeObjectRetain();
      uint64_t v91 = v134;
    }
    else
    {
      uint64_t v92 = (uint64_t)v125;
      swift_storeEnumTagMultiPayload();
      uint64_t v132 = v69;
      uint64_t v93 = v123;
      sub_1002B9098(v92, v123, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
      type metadata accessor for P2PTimer();
      swift_bridgeObjectRetain();
      variable initialization expression of AWDLPeer.lastUpdated();
      sub_1002B910C(v92, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
      uint64_t v91 = v134;
      (*(void (**)(uint64_t, char *, uint64_t))(v88 + 32))(v93 + *(int *)(v134 + 20), v89, v87);
      uint64_t v94 = v93;
      unint64_t v69 = v132;
      uint64_t v95 = v126;
      sub_1002B8F40(v94, v126, type metadata accessor for NANPeer.Service.AuthenticationStatus);
      sub_10029619C(v69, v67, v95, v90);
    }
    uint64_t v96 = v90[7];
    swift_bridgeObjectRelease();
    uint64_t v97 = v96 + *(void *)(v133 + 72) * v69;
    uint64_t v98 = v131;
    sub_1002B8FA8(v131, v97, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
    type metadata accessor for P2PTimer();
    variable initialization expression of AWDLPeer.lastUpdated();
    (*(void (**)(uint64_t, char *, uint64_t))(v88 + 40))(v97 + *(int *)(v91 + 20), v89, v87);
    sub_1002B910C(v98, type metadata accessor for NANPeer.Service.AuthenticationStatus.State);
    swift_endAccess();
    swift_unownedRetainStrong();
    sub_100354870();
    swift_release();
    swift_retain();
    swift_release();
    uint64_t v99 = v112;
    uint64_t v100 = Optional<A>.attributeFilter.getter(v112[*(int *)(v114 + 96)]);
    int v101 = NANServiceInfo.init(information:filter:)(v116, v100);
    uint64_t v103 = v102;
    unint64_t v105 = v104;
    sub_100301B48(v101, v102, v104, v47, v138, *v99);
    sub_10000C970(v103, v105);
    swift_release();
    sub_10000C95C(v137, v136);
    (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v135, v121);
LABEL_32:
    uint64_t v33 = (uint64_t)v122;
    return sub_1002B910C(v33, type metadata accessor for LongTermPairingKeys);
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}