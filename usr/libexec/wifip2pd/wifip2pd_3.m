BOOL _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO11PASNRequestV23__derived_struct_equalsySbAI_AItFZ_0(char *a1, char *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  BOOL result;
  long long v13;
  long long v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _OWORD v57[3];
  _OWORD v58[3];
  void v59[6];
  char v60;
  void v61[6];
  char v62;

  if (word_1003C4618[*a1] != word_1003C4618[*a2]) {
    return 0;
  }
  if (*((unsigned __int16 *)a1 + 4) != *((unsigned __int16 *)a2 + 4)) {
    return 0;
  }
  if (byte_1003C4684[a1[10]] != byte_1003C4684[a2[10]]) {
    return 0;
  }
  v4 = *((void *)a1 + 3);
  v5 = *((unsigned __int16 *)a1 + 16);
  v6 = *((void *)a1 + 5);
  v54 = a1[48];
  v7 = *((void *)a2 + 3);
  v8 = *((unsigned __int16 *)a2 + 16);
  v9 = *((void *)a2 + 5);
  v10 = a2[48];
  if (!sub_1000997E0(*((void *)a1 + 2), *((void *)a2 + 2))) {
    return 0;
  }
  v11 = sub_1000956AC(v4, v7);
  result = 0;
  if ((v11 & 1) != 0 && v5 == v8)
  {
    if ((_s7CoreP2P12NANAttributeO13ServiceIDListV23__derived_struct_equalsySbAE_AEtFZ_0(v6, v9) & 1) != 0
      && byte_1003C4684[v54] == byte_1003C4684[v10]
      && (sub_1000956AC(*((void *)a1 + 7), *((void *)a2 + 7)) & 1) != 0)
    {
      v13 = *((_OWORD *)a1 + 5);
      v58[0] = *((_OWORD *)a1 + 4);
      v58[1] = v13;
      v58[2] = *((_OWORD *)a1 + 6);
      v14 = *((_OWORD *)a2 + 5);
      v57[0] = *((_OWORD *)a2 + 4);
      v57[1] = v14;
      v57[2] = *((_OWORD *)a2 + 6);
      if (_s7CoreP2P27IEEE80211InformationElementO43PreAssociationSecurityNegotiationParametersV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t *)v58, (uint64_t *)v57))
      {
        v16 = *((void *)a1 + 14);
        v15 = *((void *)a1 + 15);
        v18 = *((void *)a1 + 16);
        v17 = *((void *)a1 + 17);
        v20 = *((void *)a1 + 18);
        v19 = *((void *)a1 + 19);
        v21 = a1[160];
        v23 = *((void *)a2 + 14);
        v22 = *((void *)a2 + 15);
        v25 = *((void *)a2 + 16);
        v24 = *((void *)a2 + 17);
        v27 = *((void *)a2 + 18);
        v26 = *((void *)a2 + 19);
        v28 = a2[160];
        if (v21 == 255)
        {
          if (v28 == 255) {
            return 1;
          }
        }
        else if (v28 != 255)
        {
          v59[0] = v16;
          v59[1] = v15;
          v59[2] = v18;
          v59[3] = v17;
          v59[4] = v20;
          v59[5] = v19;
          v60 = v21;
          v61[0] = v23;
          v61[1] = v22;
          v29 = v22;
          v61[2] = v25;
          v61[3] = v24;
          v61[4] = v27;
          v61[5] = v26;
          v62 = v28;
          v30 = v16;
          v52 = v16;
          v55 = v15;
          v31 = v15;
          v32 = v18;
          v48 = v18;
          v49 = v17;
          v33 = v25;
          v34 = v17;
          v35 = v24;
          v36 = v27;
          v37 = v26;
          sub_10006E984(v30, v31, v32, v34, v20, v19, v21);
          sub_10006E984(v23, v29, v33, v35, v36, v37, v28);
          v47 = _s7CoreP2P27IEEE80211InformationElementO21__derived_enum_equalsySbAC_ACtFZ_0((uint64_t)v59, (uint64_t)v61);
          sub_10006E0F4(v23, v29, v33, v35, v36, v37, v28);
          sub_10006E0F4(v52, v55, v48, v49, v20, v19, v21);
          return (v47 & 1) != 0;
        }
        v38 = v16;
        v53 = v16;
        v56 = v15;
        v39 = v15;
        v40 = v25;
        v41 = v24;
        v42 = v20;
        v51 = v20;
        v43 = v27;
        v44 = v19;
        v50 = v19;
        v45 = v22;
        v46 = v26;
        sub_10006E984(v38, v39, v18, v17, v42, v44, v21);
        sub_10006E984(v23, v45, v40, v41, v43, v46, v28);
        sub_10006E0F4(v53, v56, v18, v17, v51, v50, v21);
        sub_10006E0F4(v23, v45, v40, v41, v43, v46, v28);
      }
    }
    return 0;
  }
  return result;
}

uint64_t _s7CoreP2P14IEEE80211FrameV10ManagementO06ActionD0V8ContentsO21__derived_enum_equalsySbAI_AItFZ_0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1 >> 30)
  {
    if (a1 >> 30 == 1)
    {
      if ((a4 & 0xC0000000) == 0x40000000
        && a1 == a4
        && HIDWORD(a1) == HIDWORD(a4)
        && ((a1 >> 8) & 1) != ((a4 & 0x100) == 0)
        && BYTE2(a1) == BYTE2(a4)
        && a2 == a5
        && (sub_10009A2D4(a3, a6) & 1) != 0)
      {
        return 1;
      }
    }
    else if ((a4 & 0xC0000000) == 0x80000000 && a4 == 0x80000000 && !(a6 | a5))
    {
      return 1;
    }
  }
  else if ((a4 & 0xC0000000) == 0)
  {
    if (a1 == 14)
    {
      if (a4 != 14) {
        return 0;
      }
    }
    else if (a4 == 14 || byte_1003C4691[(char)a1] != byte_1003C4691[(char)a4])
    {
      return 0;
    }
    if (_s7CoreP2P21NANInformationElementV23__derived_struct_equalsySbAC_ACtFZ_0(a2, a5)) {
      return 1;
    }
  }
  return 0;
}

uint64_t _s7CoreP2P14IEEE80211FrameV10ManagementO06ActionD0V23__derived_struct_equalsySbAG_AGtFZ_0(char a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (((0x7F7E0907060504uLL >> (8 * a1)) & 0x7F) != ((0x7F7E0907060504uLL >> (8 * a5)) & 0x7F)) {
    return 0;
  }
  if (a2 >> 30)
  {
    if (a2 >> 30 == 1)
    {
      if ((a6 & 0xC0000000) == 0x40000000
        && a2 == a6
        && ((a2 >> 8) & 1) != ((a6 & 0x100) == 0)
        && BYTE2(a2) == BYTE2(a6)
        && HIDWORD(a2) == HIDWORD(a6)
        && a3 == a7
        && (sub_10009A2D4(a4, a8) & 1) != 0)
      {
        return 1;
      }
    }
    else if ((a6 & 0xC0000000) == 0x80000000 && a6 == 0x80000000 && !(a8 | a7))
    {
      return 1;
    }
  }
  else if ((a6 & 0xC0000000) == 0)
  {
    if (a2 == 14)
    {
      if (a6 != 14) {
        return 0;
      }
    }
    else if (a6 == 14 || byte_1003C4691[(char)a2] != byte_1003C4691[(char)a6])
    {
      return 0;
    }
    if (_s7CoreP2P21NANInformationElementV23__derived_struct_equalsySbAC_ACtFZ_0(a3, a7)) {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_10019C990(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  LOBYTE(v4) = *(unsigned char *)(a1 + 184);
  sub_10019CA0C(*(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144), *(void *)(a1 + 152), *(void *)(a1 + 160), *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    v4,
    a2);
  return a1;
}

uint64_t sub_10019CA0C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t (*a22)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  BOOL v23 = a5 >> 16 == 4294967293 || a5 >> 17 == 0x7FFFFFFF;
  if (!v23 || (a12 & 0x3FFFFFFFFFFFFFFELL) != 0)
  {
    return a22(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  }
  return result;
}

uint64_t _s7CoreP2P14IEEE80211FrameV0D4TypeO010ManagementE0O8rawValueAGSgs5UInt8V_tcfC_0(unsigned __int8 a1)
{
  if (a1 > 0xEu) {
    return 14;
  }
  else {
    return byte_1003C469F[(char)a1];
  }
}

unint64_t sub_10019CAD0()
{
  unint64_t result = qword_100481490;
  if (!qword_100481490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481490);
  }
  return result;
}

unint64_t sub_10019CB24()
{
  unint64_t result = qword_100481498;
  if (!qword_100481498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481498);
  }
  return result;
}

uint64_t _s7CoreP2P14IEEE80211FrameV10ManagementO06ActionD0V8CategoryO8rawValueAISgs5UInt8V_tcfC_0(unsigned __int8 a1)
{
  int v1 = a1;
  int v2 = a1 - 4;
  uint64_t result = 1;
  switch(v2)
  {
    case 0:
      uint64_t result = 0;
      break;
    case 1:
      return result;
    case 2:
      uint64_t result = 2;
      break;
    case 3:
      uint64_t result = 3;
      break;
    case 4:
      goto LABEL_6;
    case 5:
      uint64_t result = 4;
      break;
    default:
      if (v1 == 126)
      {
        uint64_t result = 5;
      }
      else if (v1 == 127)
      {
        uint64_t result = 6;
      }
      else
      {
LABEL_6:
        uint64_t result = 7;
      }
      break;
  }
  return result;
}

uint64_t sub_10019CC0C(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_1004817B8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[3];
  sub_1000369C4(a1, v7);
  sub_10019E068();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100010754((uint64_t)a1);
  }
  else
  {
    LOBYTE(v12) = 0;
    sub_1001A5418();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v14 = 1;
    sub_10008B6F4();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v7 = v12;
    unint64_t v9 = v13;
    char v14 = 2;
    sub_100013D44(v12, v13);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v10 = v12;
    unint64_t v11 = v13;
    sub_100013D44(v7, v9);
    sub_100013D44(v10, v11);
    sub_10000C970(v7, v9);
    sub_100010754((uint64_t)a1);
    sub_10000C970(v7, v9);
    sub_10000C970(v10, v11);
  }
  return v7;
}

uint64_t sub_10019CE90(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_1004817B0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[3];
  sub_1000369C4(a1, v7);
  sub_10019E110();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    v9[16] = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    v9[15] = 1;
    sub_10008B6F4();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  }
  sub_100010754((uint64_t)a1);
  return v7;
}

uint64_t sub_10019D050@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100010BCC(&qword_100481778);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_10019E76C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100010754((uint64_t)a1);
  }
  char v21 = 0;
  sub_1001A4FF0();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  char v9 = v16;
  char v21 = 1;
  sub_1001A51EC();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  long long v15 = v16;
  uint64_t v10 = v17;
  char v11 = v18;
  uint64_t v12 = v19;
  uint64_t v13 = v20;
  uint64_t result = sub_100010754((uint64_t)a1);
  *(unsigned char *)a2 = v9;
  *(_OWORD *)(a2 + 8) = v15;
  *(void *)(a2 + 24) = v10;
  *(unsigned char *)(a2 + 32) = v11;
  *(void *)(a2 + 40) = v12;
  *(void *)(a2 + 48) = v13;
  return result;
}

uint64_t sub_10019D250@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v64 = a4;
  uint64_t v65 = sub_100010BCC(a2);
  uint64_t v7 = *(void *)(v65 - 8);
  __chkstk_darwin();
  char v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a1[3];
  v67 = a1;
  sub_1000369C4(a1, v10);
  a3();
  unint64_t v66 = (unint64_t)v9;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v4)
  {
    sub_100010754((uint64_t)v67);
    return sub_10006E0F4(0, 0, 0, 0, 0, 0, 255);
  }
  else
  {
    uint64_t v11 = v7;
    LOBYTE(v68) = 0;
    sub_1001A4FF0();
    uint64_t v12 = v65;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    int v13 = v79;
    LOBYTE(v68) = 1;
    sub_1001A5240();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    int v58 = BYTE2(v79);
    int v59 = v13;
    uint64_t v14 = v80;
    unint64_t v15 = v81;
    int v56 = (unsigned __int16)v82;
    int v57 = (unsigned __int16)v79;
    uint64_t v16 = v83;
    int v55 = v84;
    LOBYTE(v68) = 2;
    sub_1001A5294();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    unint64_t v63 = v16;
    unint64_t v17 = v15;
    unint64_t v54 = v14;
    uint64_t v18 = v79;
    LOBYTE(v68) = 3;
    sub_1001A51EC();
    swift_bridgeObjectRetain();
    unint64_t v19 = v66;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v52 = v18;
    unint64_t v20 = v81;
    uint64_t v21 = v83;
    unint64_t v22 = v84;
    int v50 = v82;
    char v107 = v82;
    char v108 = 4;
    uint64_t v53 = v79;
    uint64_t v51 = v80;
    sub_10006E968(v79, v80, v81);
    uint64_t v62 = v21;
    sub_100038004(v21, v22);
    sub_1001A52E8();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    unint64_t v60 = v22;
    unint64_t v61 = v20;
    (*(void (**)(unint64_t, uint64_t))(v11 + 8))(v19, v12);
    uint64_t v23 = v100;
    unint64_t v24 = v102;
    uint64_t v65 = v103;
    unint64_t v66 = v101;
    unint64_t v25 = v105;
    uint64_t v49 = v104;
    unint64_t v26 = v22;
    LODWORD(v22) = v106;
    sub_10006E984(v100, v101, v102, v103, v104, v105, v106);
    sub_10006E0F4(0, 0, 0, 0, 0, 0, 255);
    LOBYTE(v68) = v59;
    WORD4(v68) = v57;
    BYTE10(v68) = v58;
    *(void *)&long long v69 = v54;
    *((void *)&v69 + 1) = v17;
    unint64_t v44 = v17;
    LOWORD(v70) = v56;
    *((void *)&v70 + 1) = v63;
    LOBYTE(v71) = v55;
    *((void *)&v71 + 1) = v52;
    *(void *)&long long v72 = v53;
    *((void *)&v72 + 1) = v51;
    *(void *)&long long v73 = v20;
    BYTE8(v73) = v50;
    *(void *)&long long v74 = v62;
    *((void *)&v74 + 1) = v26;
    unint64_t v47 = v24;
    uint64_t v48 = v23;
    uint64_t v27 = v65;
    unint64_t v28 = v66;
    *(void *)&long long v75 = v23;
    *((void *)&v75 + 1) = v66;
    *(void *)&long long v76 = v24;
    *((void *)&v76 + 1) = v65;
    uint64_t v29 = v49;
    *(void *)&long long v77 = v49;
    *((void *)&v77 + 1) = v25;
    unint64_t v46 = v25;
    int v45 = v22;
    char v78 = v22;
    sub_10019E890((uint64_t)&v68);
    sub_10006E0F4(v23, v28, v24, v27, v29, v25, v22);
    uint64_t v30 = v51;
    sub_10006E0D8(v53, v51, v61);
    uint64_t v31 = v62;
    unint64_t v32 = v60;
    sub_10000C95C(v62, v60);
    unint64_t v33 = v63;
    swift_bridgeObjectRelease();
    unint64_t v34 = v44;
    swift_bridgeObjectRelease();
    unint64_t v35 = v54;
    swift_bridgeObjectRelease();
    uint64_t v36 = v52;
    swift_bridgeObjectRelease();
    sub_100010754((uint64_t)v67);
    LOBYTE(v79) = v59;
    LOWORD(v80) = v57;
    BYTE2(v80) = v58;
    unint64_t v81 = v35;
    unint64_t v82 = v34;
    LOWORD(v83) = v56;
    unint64_t v84 = v33;
    char v85 = v55;
    uint64_t v86 = v36;
    uint64_t v87 = v53;
    uint64_t v88 = v30;
    unint64_t v89 = v61;
    char v90 = v107;
    uint64_t v91 = v31;
    unint64_t v92 = v32;
    uint64_t v93 = v48;
    unint64_t v94 = v66;
    unint64_t v95 = v47;
    uint64_t v96 = v65;
    uint64_t v97 = v49;
    unint64_t v98 = v46;
    char v99 = v45;
    uint64_t result = sub_1001A533C((uint64_t)&v79);
    long long v38 = v77;
    uint64_t v39 = v64;
    *(_OWORD *)(v64 + 128) = v76;
    *(_OWORD *)(v39 + 144) = v38;
    *(unsigned char *)(v39 + 160) = v78;
    long long v40 = v73;
    *(_OWORD *)(v39 + 64) = v72;
    *(_OWORD *)(v39 + 80) = v40;
    long long v41 = v75;
    *(_OWORD *)(v39 + 96) = v74;
    *(_OWORD *)(v39 + 112) = v41;
    long long v42 = v69;
    *(_OWORD *)uint64_t v39 = v68;
    *(_OWORD *)(v39 + 16) = v42;
    long long v43 = v71;
    *(_OWORD *)(v39 + 32) = v70;
    *(_OWORD *)(v39 + 48) = v43;
  }
  return result;
}

uint64_t sub_10019D910(void *a1)
{
  uint64_t v2 = sub_100010BCC(&qword_1004817C8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = &v8[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_10019DFC0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v8[31] = 0;
  uint64_t v6 = KeyedDecodingContainer.decode(_:forKey:)();
  v8[30] = 1;
  KeyedDecodingContainer.decode(_:forKey:)();
  v8[29] = 2;
  KeyedDecodingContainer.decode(_:forKey:)();
  sub_100010BCC(&qword_1004814B0);
  v8[28] = 3;
  sub_1001A546C(&qword_1004817D0, (void (*)(void))sub_1001A52E8);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  sub_100010754((uint64_t)a1);
  return v6;
}

unint64_t sub_10019DB64(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_1004817D8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_10019CAD0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return sub_100010754((uint64_t)a1);
  }
  char v18 = 0;
  sub_1001A54DC();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v7 = (unsigned __int16)v15;
  LOBYTE(v15) = 1;
  unsigned __int16 v8 = KeyedDecodingContainer.decode(_:forKey:)();
  char v18 = 2;
  sub_10003FE54();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v14 = v15;
  uint64_t v13 = BYTE1(v15);
  uint64_t v12 = BYTE2(v15);
  uint64_t v11 = HIBYTE(v15);
  v10[11] = v16;
  v10[10] = v17;
  char v18 = 3;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v10[9] = v15;
  v10[8] = BYTE1(v15);
  v10[7] = BYTE2(v15);
  v10[6] = HIBYTE(v15);
  v10[5] = v16;
  v10[4] = v17;
  char v18 = 4;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v10[3] = v15;
  v10[1] = v16;
  v10[2] = v17;
  LOBYTE(v15) = 5;
  KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100010754((uint64_t)a1);
  return v7 & 0xFFFFFFFF0000FFFFLL | ((unint64_t)v8 << 16) | (v14 << 32) | (v13 << 40) | (v12 << 48) | (v11 << 56);
}

uint64_t sub_10019DEDC(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  LOBYTE(v4) = *(unsigned char *)(a1 + 160);
  sub_10019CA0C(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    v4,
    a2);
  return a1;
}

uint64_t sub_10019DF50(uint64_t *a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10019DF88(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_10019DFC0()
{
  unint64_t result = qword_1004814A8;
  if (!qword_1004814A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004814A8);
  }
  return result;
}

unint64_t sub_10019E014()
{
  unint64_t result = qword_1004814C0;
  if (!qword_1004814C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004814C0);
  }
  return result;
}

unint64_t sub_10019E068()
{
  unint64_t result = qword_1004814D0;
  if (!qword_1004814D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004814D0);
  }
  return result;
}

unint64_t sub_10019E0BC()
{
  unint64_t result = qword_1004814D8;
  if (!qword_1004814D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004814D8);
  }
  return result;
}

unint64_t sub_10019E110()
{
  unint64_t result = qword_1004814E8;
  if (!qword_1004814E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004814E8);
  }
  return result;
}

uint64_t sub_10019E164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  if ((a4 & 0x2000000000000000) != 0)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))a5)(a2, a3);
  }
  else
  {
    a5();
    return ((uint64_t (*)(uint64_t, uint64_t))a5)(a3, a4);
  }
}

uint64_t sub_10019E1F0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10019E24C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10019E2A8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10019E304(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10019E360(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010BCC(&qword_1004814F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10019E3C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010BCC(&qword_1004814F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10019E430(uint64_t a1)
{
  return a1;
}

uint64_t sub_10019E47C(uint64_t a1)
{
  return a1;
}

void *sub_10019E4C4(void *a1, void (*a2)(void, void, void), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[5];
  a2(*a1, a1[1], a1[2]);
  a3(v5, v6);
  return a1;
}

unint64_t sub_10019E51C()
{
  unint64_t result = qword_100481508;
  if (!qword_100481508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481508);
  }
  return result;
}

unint64_t sub_10019E570()
{
  unint64_t result = qword_100481510;
  if (!qword_100481510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481510);
  }
  return result;
}

unint64_t sub_10019E5C4()
{
  unint64_t result = qword_100481518;
  if (!qword_100481518)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481518);
  }
  return result;
}

unint64_t sub_10019E618()
{
  unint64_t result = qword_100481520;
  if (!qword_100481520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481520);
  }
  return result;
}

unint64_t sub_10019E66C()
{
  unint64_t result = qword_100481528;
  if (!qword_100481528)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481528);
  }
  return result;
}

unint64_t sub_10019E6C0()
{
  unint64_t result = qword_100481538;
  if (!qword_100481538)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481538);
  }
  return result;
}

void *sub_10019E714(void *a1, void (*a2)(void, void, void), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  a2(a1[1], a1[2], a1[3]);
  a3(v5, v6);
  return a1;
}

unint64_t sub_10019E76C()
{
  unint64_t result = qword_100481548;
  if (!qword_100481548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481548);
  }
  return result;
}

uint64_t sub_10019E7C0(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[2];
  *(_OWORD *)(a2 + 16) = a1[1];
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)a2 = v2;
  long long v4 = a1[3];
  long long v5 = a1[4];
  long long v6 = a1[6];
  *(_OWORD *)(a2 + 80) = a1[5];
  *(_OWORD *)(a2 + 96) = v6;
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 64) = v5;
  long long v7 = a1[7];
  long long v8 = a1[8];
  long long v9 = a1[9];
  *(unsigned char *)(a2 + 160) = *((unsigned char *)a1 + 160);
  *(_OWORD *)(a2 + 128) = v8;
  *(_OWORD *)(a2 + 144) = v9;
  *(_OWORD *)(a2 + 112) = v7;
  return a2;
}

uint64_t sub_10019E800(uint64_t a1)
{
  return *(void *)(a1 + 88) >> 62;
}

uint64_t sub_10019E80C(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 160);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    v4);
  return a1;
}

uint64_t sub_10019E880(uint64_t result)
{
  *(void *)(result + 88) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t sub_10019E890(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 72);
  unint64_t v4 = *(void *)(a1 + 80);
  uint64_t v5 = *(void *)(a1 + 96);
  unint64_t v6 = *(void *)(a1 + 104);
  uint64_t v7 = *(void *)(a1 + 112);
  unint64_t v13 = *(void *)(a1 + 128);
  unint64_t v14 = *(void *)(a1 + 120);
  uint64_t v11 = *(void *)(a1 + 144);
  uint64_t v12 = *(void *)(a1 + 136);
  unint64_t v10 = *(void *)(a1 + 152);
  char v9 = *(unsigned char *)(a1 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10006E968(v2, v3, v4);
  sub_100038004(v5, v6);
  sub_10006E984(v7, v14, v13, v12, v11, v10, v9);
  return a1;
}

uint64_t sub_10019E96C@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v2) {
    return sub_100010754((uint64_t)a1);
  }
  sub_100039448((uint64_t)v45, v46);
  sub_1001A4D40();
  UnkeyedDecodingContainer.inferredDecode<A>()();
  __int16 v6 = v42;
  __int16 v7 = WORD1(v42);
  char v8 = BYTE4(v42);
  char v9 = BYTE5(v42);
  char v10 = BYTE6(v42);
  long long v47 = v42;
  int v50 = BYTE7(v42);
  char v33 = BYTE9(v42);
  char v34 = BYTE8(v42);
  char v31 = BYTE11(v42);
  char v32 = BYTE10(v42);
  char v29 = BYTE13(v42);
  char v30 = BYTE12(v42);
  char v27 = HIBYTE(v42);
  char v28 = BYTE14(v42);
  char v25 = BYTE1(v43[0]);
  char v26 = v43[0];
  uint64_t v48 = *(void *)&v43[0];
  char v23 = BYTE3(v43[0]);
  char v24 = BYTE2(v43[0]);
  char v21 = BYTE5(v43[0]);
  char v22 = BYTE4(v43[0]);
  int v11 = sub_10008CA90(2uLL, 2, v42);
  int v51 = WORD3(v43[0]);
  switch(v11)
  {
    case 0:
      char v12 = IEEE80211Frame.Header.FrameControl.managementSubtype.getter(v42);
      switch(v12)
      {
        case 7:
          sub_100039448((uint64_t)v45, v46);
          sub_1001A4F30();
          UnkeyedDecodingContainer.inferredDecode<A>()();
          uint64_t v39 = v36;
          LODWORD(v40) = v37;
          *((void *)&v40 + 1) = *((void *)&v37 + 1);
          sub_1001A4F84((uint64_t)&v39);
          break;
        case 10:
          sub_100039448((uint64_t)v45, v46);
          sub_1001A4EC0();
          UnkeyedDecodingContainer.inferredDecode<A>()();
          sub_10019E7C0(&v42, (uint64_t)v35);
          sub_10019E7C0(v35, (uint64_t)&v36);
          sub_1001A4F14((uint64_t)&v36);
          sub_10019E7C0((long long *)&v36, (uint64_t)&v39);
          NANBitmap.Channel.operatingClass.getter(&v39);
          unint64_t v13 = (long long *)&v39;
          goto LABEL_16;
        case 12:
          sub_100039448((uint64_t)v45, v46);
          sub_1001A4E50();
          UnkeyedDecodingContainer.inferredDecode<A>()();
          LOBYTE(v39) = v36;
          long long v40 = v37;
          uint64_t v41 = v38;
          sub_1001A4EA4((uint64_t)&v39);
          break;
        case 14:
          sub_10000F000();
          swift_allocError();
          *(_OWORD *)uint64_t v14 = xmmword_1003B00B0;
          *(unsigned char *)(v14 + 16) = 2;
          swift_willThrow();
          sub_100010754((uint64_t)v45);
          return sub_100010754((uint64_t)a1);
        default:
          LOBYTE(v39) = v12;
          sub_1001A4E34((uint64_t)&v39);
          break;
      }
      sub_10019E7C0((long long *)&v39, (uint64_t)&v42);
      NANBitmap.Channel.operatingClass.getter(&v42);
      break;
    case 1:
      sub_1001A4E00((uint64_t)&v42);
      break;
    case 2:
      sub_1001A4DCC((uint64_t)&v42);
      break;
    case 3:
      sub_1001A4D94((uint64_t)&v42);
      break;
    default:
      sub_10000F000();
      swift_allocError();
      *(_OWORD *)uint64_t v20 = xmmword_1003B00B0;
      *(unsigned char *)(v20 + 16) = 2;
      swift_willThrow();
      swift_unexpectedError();
      __break(1u);
      JUMPOUT(0x10019EEF4);
  }
  unint64_t v13 = &v42;
LABEL_16:
  sub_10019E7C0(v13, (uint64_t)v49);
  sub_100010754((uint64_t)v45);
  sub_10019E7C0(v49, (uint64_t)&v39);
  LOWORD(v42) = v6;
  WORD1(v42) = v7;
  BYTE4(v42) = v8;
  BYTE5(v42) = v9;
  BYTE6(v42) = v10;
  BYTE7(v42) = v50;
  BYTE8(v42) = v34;
  BYTE9(v42) = v33;
  BYTE10(v42) = v32;
  BYTE11(v42) = v31;
  BYTE12(v42) = v30;
  BYTE13(v42) = v29;
  BYTE14(v42) = v28;
  HIBYTE(v42) = v27;
  LOBYTE(v43[0]) = v26;
  BYTE1(v43[0]) = v25;
  BYTE2(v43[0]) = v24;
  BYTE3(v43[0]) = v23;
  BYTE4(v43[0]) = v22;
  BYTE5(v43[0]) = v21;
  WORD3(v43[0]) = v51;
  sub_10019E7C0((long long *)&v39, (uint64_t)v43 + 8);
  uint64_t result = sub_100010754((uint64_t)a1);
  long long v15 = v43[8];
  a2[8] = v43[7];
  a2[9] = v15;
  a2[10] = v44[0];
  *(_OWORD *)((char *)a2 + 169) = *(_OWORD *)((char *)v44 + 9);
  long long v16 = v43[4];
  a2[4] = v43[3];
  a2[5] = v16;
  long long v17 = v43[6];
  a2[6] = v43[5];
  a2[7] = v17;
  long long v18 = v43[0];
  *a2 = v42;
  a2[1] = v18;
  long long v19 = v43[2];
  a2[2] = v43[1];
  a2[3] = v19;
  return result;
}

uint64_t sub_10019EF24@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v2) {
    return sub_100010754((uint64_t)a1);
  }
  sub_100039448((uint64_t)v29, v30);
  sub_1001A4F9C();
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  sub_100039448((uint64_t)v29, v30);
  __int16 v5 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
  sub_100039448((uint64_t)v29, v30);
  sub_1001A4FF0();
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  if (((1 << SLOBYTE(v27[0])) & 0x77) == 0)
  {
    if (LOBYTE(v27[0]) == 3)
    {
      v18[0] = 3;
      goto LABEL_6;
    }
    switch(v5)
    {
      case 3:
        sub_100039448((uint64_t)v29, v30);
        sub_1001A5070();
        UnkeyedDecodingContainer.inferredDecode<A>()();
        v18[0] = v9[0];
        *(_OWORD *)&v18[8] = *(_OWORD *)&v9[8];
        *(void *)&v18[24] = *(void *)&v9[24];
        LOBYTE(v19[0]) = v10[0];
        *(_OWORD *)((char *)v19 + 8) = *(_OWORD *)&v10[8];
        sub_1001A50C4((uint64_t)v18);
        goto LABEL_7;
      case 2:
        sub_100039448((uint64_t)v29, v30);
        sub_1001A50F0();
        UnkeyedDecodingContainer.inferredDecode<A>()();
        long long v15 = v24;
        long long v16 = v25;
        char v17 = v26;
        long long v11 = v20;
        long long v12 = v21;
        long long v13 = v22;
        long long v14 = v23;
        *(_OWORD *)char v9 = *(_OWORD *)v18;
        *(_OWORD *)&v9[16] = *(_OWORD *)&v18[16];
        *(_OWORD *)char v10 = v19[0];
        *(_OWORD *)&v10[16] = v19[1];
        sub_1001A5144((uint64_t)v9);
        goto LABEL_17;
      case 1:
        sub_100039448((uint64_t)v29, v30);
        sub_1001A5170();
        UnkeyedDecodingContainer.inferredDecode<A>()();
        long long v15 = v24;
        long long v16 = v25;
        char v17 = v26;
        long long v11 = v20;
        long long v12 = v21;
        long long v13 = v22;
        long long v14 = v23;
        *(_OWORD *)char v9 = *(_OWORD *)v18;
        *(_OWORD *)&v9[16] = *(_OWORD *)&v18[16];
        *(_OWORD *)char v10 = v19[0];
        *(_OWORD *)&v10[16] = v19[1];
        sub_1001A51C4((uint64_t)v9);
LABEL_17:
        __int16 v7 = (long long *)v9;
        goto LABEL_8;
    }
    sub_10000F000();
    swift_allocError();
    *(void *)uint64_t v8 = 0;
    *(void *)(v8 + 8) = 0;
    *(unsigned char *)(v8 + 16) = 2;
    swift_willThrow();
    sub_100010754((uint64_t)v29);
    return sub_100010754((uint64_t)a1);
  }
  v18[0] = v27[0];
LABEL_6:
  *(_WORD *)&v18[2] = v5;
  v18[4] = v28;
  sub_1001A5044((uint64_t)v18);
LABEL_7:
  __int16 v7 = (long long *)v18;
LABEL_8:
  sub_10019E7C0(v7, (uint64_t)v27);
  sub_100010754((uint64_t)v29);
  sub_100010754((uint64_t)a1);
  return sub_10019E7C0(v27, a2);
}

uint64_t sub_10019F2B0(void *a1)
{
  uint64_t v3 = a1[3];
  sub_1000369C4(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v1)
  {
    sub_100010754((uint64_t)a1);
  }
  else
  {
    sub_100039448((uint64_t)v7, v8);
    sub_1001A5530();
    UnkeyedDecodingContainer.inferredDecode<A>()();
    uint64_t v3 = v5;
    if (((1 << v5) & 0xE) == 0)
    {
      if (((1 << v5) & 0x11) != 0)
      {
        sub_100039448((uint64_t)v7, v8);
        if (dispatch thunk of UnkeyedDecodingContainer.decode(_:)() == 9)
        {
          sub_100039448((uint64_t)v7, v8);
          sub_10008B6A0();
          dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
          if (sub_10003916C(v5 | (v6 << 16), 0x9A6F50u))
          {
            sub_100039448((uint64_t)v7, v8);
            sub_1001A55D8();
            UnkeyedDecodingContainer.inferredDecode<A>()();
          }
        }
      }
      else
      {
        sub_100039448((uint64_t)v7, v8);
        sub_10008B6A0();
        dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
        if (sub_10003916C(v5 | (v6 << 16), 0xF21700u))
        {
          sub_100039448((uint64_t)v7, v8);
          sub_1001A5584();
          UnkeyedDecodingContainer.inferredDecode<A>()();
        }
      }
    }
    sub_100010754((uint64_t)v7);
    sub_100010754((uint64_t)a1);
  }
  return v3;
}

unint64_t sub_10019F594()
{
  unint64_t result = qword_100481550;
  if (!qword_100481550)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481550);
  }
  return result;
}

unint64_t sub_10019F5E8()
{
  unint64_t result = qword_100481558;
  if (!qword_100481558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481558);
  }
  return result;
}

unint64_t sub_10019F63C()
{
  unint64_t result = qword_100481560;
  if (!qword_100481560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481560);
  }
  return result;
}

unint64_t sub_10019F690()
{
  unint64_t result = qword_100481568;
  if (!qword_100481568)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481568);
  }
  return result;
}

unint64_t sub_10019F6E4()
{
  unint64_t result = qword_100481570;
  if (!qword_100481570)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481570);
  }
  return result;
}

uint64_t sub_10019F738(uint64_t a1)
{
  return (*(void *)(a1 + 88) >> 60) & 3;
}

uint64_t sub_10019F744(uint64_t result)
{
  *(void *)(result + 88) &= 0xCFFFFFFFFFFFFFFFLL;
  return result;
}

unint64_t sub_10019F754()
{
  unint64_t result = qword_100481578;
  if (!qword_100481578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481578);
  }
  return result;
}

unint64_t sub_10019F7A8()
{
  unint64_t result = qword_100481580;
  if (!qword_100481580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481580);
  }
  return result;
}

unint64_t sub_10019F7FC()
{
  unint64_t result = qword_100481588;
  if (!qword_100481588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481588);
  }
  return result;
}

unint64_t sub_10019F850()
{
  unint64_t result = qword_100481590;
  if (!qword_100481590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481590);
  }
  return result;
}

unint64_t sub_10019F8A8()
{
  unint64_t result = qword_100481598;
  if (!qword_100481598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481598);
  }
  return result;
}

unint64_t sub_10019F900()
{
  unint64_t result = qword_1004815A0;
  if (!qword_1004815A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004815A0);
  }
  return result;
}

unint64_t sub_10019F958()
{
  unint64_t result = qword_1004815A8;
  if (!qword_1004815A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004815A8);
  }
  return result;
}

unint64_t sub_10019F9B0()
{
  unint64_t result = qword_1004815B0;
  if (!qword_1004815B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004815B0);
  }
  return result;
}

unint64_t sub_10019FA08()
{
  unint64_t result = qword_1004815B8;
  if (!qword_1004815B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004815B8);
  }
  return result;
}

unint64_t sub_10019FA60()
{
  unint64_t result = qword_1004815C0;
  if (!qword_1004815C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004815C0);
  }
  return result;
}

unint64_t sub_10019FAB8()
{
  unint64_t result = qword_1004815C8;
  if (!qword_1004815C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004815C8);
  }
  return result;
}

unint64_t sub_10019FB10()
{
  unint64_t result = qword_1004815D0;
  if (!qword_1004815D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004815D0);
  }
  return result;
}

unint64_t sub_10019FB68()
{
  unint64_t result = qword_1004815D8;
  if (!qword_1004815D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004815D8);
  }
  return result;
}

unint64_t sub_10019FBC0()
{
  unint64_t result = qword_1004815E0;
  if (!qword_1004815E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004815E0);
  }
  return result;
}

unint64_t sub_10019FC18()
{
  unint64_t result = qword_1004815E8;
  if (!qword_1004815E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004815E8);
  }
  return result;
}

unint64_t sub_10019FC70()
{
  unint64_t result = qword_1004815F0;
  if (!qword_1004815F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004815F0);
  }
  return result;
}

unint64_t sub_10019FCC8()
{
  unint64_t result = qword_1004815F8;
  if (!qword_1004815F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004815F8);
  }
  return result;
}

unint64_t sub_10019FD20()
{
  unint64_t result = qword_100481600;
  if (!qword_100481600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481600);
  }
  return result;
}

unint64_t sub_10019FD78()
{
  unint64_t result = qword_100481608;
  if (!qword_100481608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481608);
  }
  return result;
}

unint64_t sub_10019FDD0()
{
  unint64_t result = qword_100481610;
  if (!qword_100481610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481610);
  }
  return result;
}

unint64_t sub_10019FE28()
{
  unint64_t result = qword_100481618;
  if (!qword_100481618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481618);
  }
  return result;
}

unint64_t sub_10019FE80()
{
  unint64_t result = qword_100481620;
  if (!qword_100481620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481620);
  }
  return result;
}

unint64_t sub_10019FED8()
{
  unint64_t result = qword_100481628;
  if (!qword_100481628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481628);
  }
  return result;
}

unint64_t sub_10019FF30()
{
  unint64_t result = qword_100481630;
  if (!qword_100481630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481630);
  }
  return result;
}

unint64_t sub_10019FF88()
{
  unint64_t result = qword_100481638;
  if (!qword_100481638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481638);
  }
  return result;
}

unint64_t sub_10019FFE0()
{
  unint64_t result = qword_100481640;
  if (!qword_100481640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481640);
  }
  return result;
}

unint64_t sub_1001A0038()
{
  unint64_t result = qword_100481648;
  if (!qword_100481648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481648);
  }
  return result;
}

unint64_t sub_1001A0090()
{
  unint64_t result = qword_100481650;
  if (!qword_100481650)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481650);
  }
  return result;
}

unint64_t sub_1001A00E8()
{
  unint64_t result = qword_100481658;
  if (!qword_100481658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481658);
  }
  return result;
}

void destroy for IEEE80211Frame(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  unint64_t v2 = *(void *)(a1 + 112);
  if (v1 >> 16 != 4294967293 && v1 >> 17 != 0x7FFFFFFF || (v2 & 0x3FFFFFFFFFFFFFFELL) != 0) {
    sub_10006DEB0(*(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), v1, *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), v2, *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144), *(void *)(a1 + 152), *(void *)(a1 + 160), *(void *)(a1 + 168),
  }
      *(void *)(a1 + 176),
      *(unsigned char *)(a1 + 184));
}

uint64_t initializeWithCopy for IEEE80211Frame(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  unint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(void *)(a2 + 112);
  if ((v3 >> 16 == 4294967293 || v3 >> 17 == 0x7FFFFFFF) && (v4 & 0x3FFFFFFFFFFFFFFELL) == 0)
  {
    long long v14 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = v14;
    *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
    long long v15 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v15;
    long long v16 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v16;
    long long v17 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v17;
    long long v18 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v18;
  }
  else
  {
    uint64_t v7 = *(void *)(a2 + 24);
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v10 = *(void *)(a2 + 40);
    unint64_t v9 = *(void *)(a2 + 48);
    uint64_t v11 = *(void *)(a2 + 64);
    unint64_t v12 = *(void *)(a2 + 72);
    uint64_t v20 = *(void *)(a2 + 88);
    uint64_t v21 = *(void *)(a2 + 96);
    unint64_t v22 = *(void *)(a2 + 104);
    uint64_t v23 = *(void *)(a2 + 120);
    unint64_t v24 = *(void *)(a2 + 128);
    uint64_t v25 = *(void *)(a2 + 136);
    unint64_t v26 = *(void *)(a2 + 144);
    unint64_t v27 = *(void *)(a2 + 152);
    uint64_t v28 = *(void *)(a2 + 160);
    uint64_t v29 = *(void *)(a2 + 168);
    unint64_t v30 = *(void *)(a2 + 176);
    char v31 = *(unsigned char *)(a2 + 184);
    uint64_t v13 = *(void *)(a2 + 80);
    sub_10006E740(v7, v8, v10, v9, v3, v11, v12, v13, v20, v21, v22, v4, v23, v24, v25, v26, v27, v28, v29, v30, v31);
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 32) = v8;
    *(void *)(a1 + 40) = v10;
    *(void *)(a1 + 48) = v9;
    *(void *)(a1 + 56) = v3;
    *(void *)(a1 + 64) = v11;
    *(void *)(a1 + 72) = v12;
    *(void *)(a1 + 80) = v13;
    *(void *)(a1 + 88) = v20;
    *(void *)(a1 + 96) = v21;
    *(void *)(a1 + 104) = v22;
    *(void *)(a1 + 112) = v4;
    *(void *)(a1 + 120) = v23;
    *(void *)(a1 + 128) = v24;
    *(void *)(a1 + 136) = v25;
    *(void *)(a1 + 144) = v26;
    *(void *)(a1 + 152) = v27;
    *(void *)(a1 + 160) = v28;
    *(void *)(a1 + 168) = v29;
    *(void *)(a1 + 176) = v30;
    *(unsigned char *)(a1 + 184) = v31;
  }
  return a1;
}

uint64_t assignWithCopy for IEEE80211Frame(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a1 + 5) = *(unsigned char *)(a2 + 5);
  *(unsigned char *)(a1 + 6) = *(unsigned char *)(a2 + 6);
  *(unsigned char *)(a1 + 7) = *(unsigned char *)(a2 + 7);
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  *(unsigned char *)(a1 + 11) = *(unsigned char *)(a2 + 11);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  *(unsigned char *)(a1 + 13) = *(unsigned char *)(a2 + 13);
  *(unsigned char *)(a1 + 14) = *(unsigned char *)(a2 + 14);
  *(unsigned char *)(a1 + 15) = *(unsigned char *)(a2 + 15);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(unsigned char *)(a1 + 19) = *(unsigned char *)(a2 + 19);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(unsigned char *)(a1 + 21) = *(unsigned char *)(a2 + 21);
  *(_WORD *)(a1 + 22) = *(_WORD *)(a2 + 22);
  uint64_t v3 = a1 + 24;
  unint64_t v4 = (long long *)(a2 + 24);
  unint64_t v5 = *(void *)(a1 + 56);
  unint64_t v6 = v5 >> 17;
  unint64_t v7 = v5 >> 16;
  unint64_t v8 = *(void *)(a2 + 56);
  unint64_t v9 = *(void *)(a2 + 112);
  BOOL v11 = v8 >> 17 == 0x7FFFFFFF || v8 >> 16 == 4294967293;
  if ((v9 & 0x3FFFFFFFFFFFFFFELL) != 0) {
    BOOL v11 = 0;
  }
  BOOL v12 = v7 == 4294967293 || v6 == 0x7FFFFFFF;
  if (!v12 || (*(void *)(a1 + 112) & 0x3FFFFFFFFFFFFFFELL) != 0)
  {
    if (v11)
    {
      sub_1001A0784(a1 + 24);
      long long v22 = v4[1];
      long long v21 = v4[2];
      *(_OWORD *)uint64_t v3 = *v4;
      *(_OWORD *)(v3 + 16) = v22;
      *(_OWORD *)(v3 + 32) = v21;
      long long v23 = v4[6];
      long long v25 = v4[3];
      long long v24 = v4[4];
      *(_OWORD *)(v3 + 80) = v4[5];
      *(_OWORD *)(v3 + 96) = v23;
      *(_OWORD *)(v3 + 48) = v25;
      *(_OWORD *)(v3 + 64) = v24;
      long long v27 = v4[8];
      long long v26 = v4[9];
      long long v28 = v4[7];
      *(unsigned char *)(v3 + 160) = *((unsigned char *)v4 + 160);
      *(_OWORD *)(v3 + 128) = v27;
      *(_OWORD *)(v3 + 144) = v26;
      *(_OWORD *)(v3 + 112) = v28;
    }
    else
    {
      uint64_t v29 = *(void *)(a2 + 24);
      uint64_t v30 = *(void *)(a2 + 32);
      uint64_t v31 = *(void *)(a2 + 40);
      unint64_t v32 = *(void *)(a2 + 48);
      uint64_t v33 = *(void *)(a2 + 64);
      unint64_t v34 = *(void *)(a2 + 72);
      uint64_t v35 = *(void *)(a2 + 80);
      uint64_t v60 = *(void *)(a2 + 88);
      uint64_t v62 = *(void *)(a2 + 96);
      unint64_t v64 = *(void *)(a2 + 104);
      uint64_t v66 = *(void *)(a2 + 120);
      unint64_t v68 = *(void *)(a2 + 128);
      uint64_t v70 = *(void *)(a2 + 136);
      unint64_t v72 = *(void *)(a2 + 144);
      unint64_t v74 = *(void *)(a2 + 152);
      uint64_t v76 = *(void *)(a2 + 160);
      uint64_t v78 = *(void *)(a2 + 168);
      unint64_t v80 = *(void *)(a2 + 176);
      char v82 = *(unsigned char *)(a2 + 184);
      sub_10006E740(v29, v30, v31, v32, v8, v33, v34, v35, v60, v62, v64, v9, v66, v68, v70, v72, v74, v76, v78,
        v80,
        v82);
      uint64_t v36 = *(void *)(a1 + 24);
      uint64_t v37 = *(void *)(a1 + 32);
      *(void *)(a1 + 24) = v29;
      *(void *)(a1 + 32) = v30;
      uint64_t v38 = *(void *)(a1 + 40);
      unint64_t v39 = *(void *)(a1 + 48);
      *(void *)(a1 + 40) = v31;
      *(void *)(a1 + 48) = v32;
      uint64_t v40 = *(void *)(a1 + 56);
      uint64_t v41 = *(void *)(a1 + 64);
      *(void *)(a1 + 56) = v8;
      *(void *)(a1 + 64) = v33;
      unint64_t v42 = *(void *)(a1 + 72);
      uint64_t v43 = *(void *)(a1 + 80);
      *(void *)(a1 + 72) = v34;
      *(void *)(a1 + 80) = v35;
      long long v44 = *(_OWORD *)(a1 + 88);
      *(void *)(a1 + 88) = v60;
      *(void *)(a1 + 96) = v62;
      long long v45 = *(_OWORD *)(a1 + 104);
      *(void *)(a1 + 104) = v64;
      *(void *)(a1 + 112) = v9;
      long long v46 = *(_OWORD *)(a1 + 120);
      *(void *)(a1 + 120) = v66;
      *(void *)(a1 + 128) = v68;
      long long v47 = *(_OWORD *)(a1 + 136);
      *(void *)(a1 + 136) = v70;
      *(void *)(a1 + 144) = v72;
      long long v48 = *(_OWORD *)(a1 + 152);
      *(void *)(a1 + 152) = v74;
      *(void *)(a1 + 160) = v76;
      uint64_t v49 = *(void *)(a1 + 168);
      unint64_t v50 = *(void *)(a1 + 176);
      *(void *)(a1 + 168) = v78;
      *(void *)(a1 + 176) = v80;
      char v51 = *(unsigned char *)(a1 + 184);
      *(unsigned char *)(a1 + 184) = v82;
      sub_10006DEB0(v36, v37, v38, v39, v40, v41, v42, v43, v44, *((uint64_t *)&v44 + 1), v45, *((unint64_t *)&v45 + 1), v46, *((unint64_t *)&v46 + 1), v47, *((unint64_t *)&v47 + 1), v48, *((uint64_t *)&v48 + 1), v49,
        v50,
        v51);
    }
  }
  else if (v11)
  {
    long long v13 = *v4;
    long long v14 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v14;
    *(_OWORD *)uint64_t v3 = v13;
    long long v15 = *(_OWORD *)(a2 + 72);
    long long v16 = *(_OWORD *)(a2 + 88);
    long long v17 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v17;
    *(_OWORD *)(a1 + 72) = v15;
    *(_OWORD *)(a1 + 88) = v16;
    long long v18 = *(_OWORD *)(a2 + 136);
    long long v19 = *(_OWORD *)(a2 + 152);
    long long v20 = *(_OWORD *)(a2 + 168);
    *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
    *(_OWORD *)(a1 + 152) = v19;
    *(_OWORD *)(a1 + 168) = v20;
    *(_OWORD *)(a1 + 136) = v18;
  }
  else
  {
    uint64_t v52 = *(void *)(a2 + 24);
    uint64_t v53 = *(void *)(a2 + 32);
    uint64_t v55 = *(void *)(a2 + 40);
    unint64_t v54 = *(void *)(a2 + 48);
    uint64_t v56 = *(void *)(a2 + 64);
    unint64_t v57 = *(void *)(a2 + 72);
    uint64_t v61 = *(void *)(a2 + 88);
    uint64_t v63 = *(void *)(a2 + 96);
    unint64_t v65 = *(void *)(a2 + 104);
    uint64_t v67 = *(void *)(a2 + 120);
    unint64_t v69 = *(void *)(a2 + 128);
    uint64_t v71 = *(void *)(a2 + 136);
    unint64_t v73 = *(void *)(a2 + 144);
    unint64_t v75 = *(void *)(a2 + 152);
    uint64_t v77 = *(void *)(a2 + 160);
    uint64_t v79 = *(void *)(a2 + 168);
    unint64_t v81 = *(void *)(a2 + 176);
    char v83 = *(unsigned char *)(a2 + 184);
    uint64_t v58 = *(void *)(a2 + 80);
    sub_10006E740(v52, v53, v55, v54, v8, v56, v57, v58, v61, v63, v65, v9, v67, v69, v71, v73, v75, v77, v79, v81, v83);
    *(void *)(a1 + 24) = v52;
    *(void *)(a1 + 32) = v53;
    *(void *)(a1 + 40) = v55;
    *(void *)(a1 + 48) = v54;
    *(void *)(a1 + 56) = v8;
    *(void *)(a1 + 64) = v56;
    *(void *)(a1 + 72) = v57;
    *(void *)(a1 + 80) = v58;
    *(void *)(a1 + 88) = v61;
    *(void *)(a1 + 96) = v63;
    *(void *)(a1 + 104) = v65;
    *(void *)(a1 + 112) = v9;
    *(void *)(a1 + 120) = v67;
    *(void *)(a1 + 128) = v69;
    *(void *)(a1 + 136) = v71;
    *(void *)(a1 + 144) = v73;
    *(void *)(a1 + 152) = v75;
    *(void *)(a1 + 160) = v77;
    *(void *)(a1 + 168) = v79;
    *(void *)(a1 + 176) = v81;
    *(unsigned char *)(a1 + 184) = v83;
  }
  return a1;
}

uint64_t sub_1001A0784(uint64_t a1)
{
  return a1;
}

__n128 initializeWithTake for IEEE80211Frame(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  long long v9 = a2[9];
  long long v10 = a2[10];
  *(_OWORD *)(a1 + 169) = *(long long *)((char *)a2 + 169);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t assignWithTake for IEEE80211Frame(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 4) = *(_OWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  uint64_t v3 = a1 + 24;
  uint64_t v4 = a2 + 24;
  unint64_t v5 = *(void *)(a1 + 56);
  unint64_t v6 = *(void *)(a1 + 112);
  if ((v5 >> 16 == 4294967293 || v5 >> 17 == 0x7FFFFFFF) && (v6 & 0x3FFFFFFFFFFFFFFELL) == 0) {
    goto LABEL_17;
  }
  unint64_t v9 = *(void *)(a2 + 56);
  uint64_t v10 = *(void *)(a2 + 112);
  if (((v9 & 0xFFFFFFFFFFFF0000) == 0xFFFFFFFD0000 || v9 >> 17 == 0x7FFFFFFF) && (v10 & 0x3FFFFFFFFFFFFFFELL) == 0)
  {
    sub_1001A0784(a1 + 24);
LABEL_17:
    long long v30 = *(_OWORD *)(v4 + 144);
    *(_OWORD *)(v3 + 128) = *(_OWORD *)(v4 + 128);
    *(_OWORD *)(v3 + 144) = v30;
    *(unsigned char *)(v3 + 160) = *(unsigned char *)(v4 + 160);
    long long v31 = *(_OWORD *)(v4 + 80);
    *(_OWORD *)(v3 + 64) = *(_OWORD *)(v4 + 64);
    *(_OWORD *)(v3 + 80) = v31;
    long long v32 = *(_OWORD *)(v4 + 112);
    *(_OWORD *)(v3 + 96) = *(_OWORD *)(v4 + 96);
    *(_OWORD *)(v3 + 112) = v32;
    long long v33 = *(_OWORD *)(v4 + 16);
    *(_OWORD *)uint64_t v3 = *(_OWORD *)v4;
    *(_OWORD *)(v3 + 16) = v33;
    long long v34 = *(_OWORD *)(v4 + 48);
    *(_OWORD *)(v3 + 32) = *(_OWORD *)(v4 + 32);
    *(_OWORD *)(v3 + 48) = v34;
    return a1;
  }
  char v13 = *(unsigned char *)(a2 + 184);
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v15 = *(void *)(a1 + 32);
  uint64_t v16 = *(void *)(a1 + 40);
  unint64_t v17 = *(void *)(a1 + 48);
  uint64_t v18 = *(void *)(a1 + 64);
  unint64_t v19 = *(void *)(a1 + 72);
  uint64_t v20 = *(void *)(a1 + 80);
  long long v21 = *(_OWORD *)(a1 + 88);
  unint64_t v22 = *(void *)(a1 + 104);
  long long v23 = *(_OWORD *)(a1 + 120);
  long long v24 = *(_OWORD *)(a1 + 136);
  long long v25 = *(_OWORD *)(a1 + 152);
  uint64_t v26 = *(void *)(a1 + 168);
  unint64_t v27 = *(void *)(a1 + 176);
  char v28 = *(unsigned char *)(a1 + 184);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = v9;
  long long v29 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v29;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = v10;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(unsigned char *)(a1 + 184) = v13;
  sub_10006DEB0(v14, v15, v16, v17, v5, v18, v19, v20, v21, *((uint64_t *)&v21 + 1), v22, v6, v23, *((unint64_t *)&v23 + 1), v24, *((unint64_t *)&v24 + 1), v25, *((uint64_t *)&v25 + 1), v26,
    v27,
    v28);
  return a1;
}

uint64_t getEnumTagSinglePayload for IEEE80211Frame(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFD && *(unsigned char *)(a1 + 185)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  unsigned int v3 = *(_DWORD *)(a1 + 58);
  int v4 = -4 - v3;
  if ((int)(-4 - v3) < 0) {
    int v4 = -1;
  }
  if (v3 <= 0x80000000) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for IEEE80211Frame(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFC)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 184) = 0;
    *(void *)__n128 result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 185) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 185) = 0;
    }
    if (a2)
    {
      *(_OWORD *)(result + 40) = 0u;
      *(_OWORD *)(result + 24) = 0u;
      *(void *)(result + 56) = (unint64_t)(-3 - a2) << 16;
      *(_OWORD *)(result + 64) = 0u;
      *(_OWORD *)(result + 80) = 0u;
      *(_OWORD *)(result + 96) = 0u;
      *(_OWORD *)(result + 112) = 0u;
      *(_OWORD *)(result + 128) = 0u;
      *(_OWORD *)(result + 144) = 0u;
      *(_OWORD *)(result + 160) = 0u;
      *(_OWORD *)(result + 169) = 0u;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame()
{
  return &type metadata for IEEE80211Frame;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.FrameType()
{
  return &type metadata for IEEE80211Frame.FrameType;
}

unsigned char *storeEnumTagSinglePayload for IEEE80211Frame.FrameType.ManagementType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF2)
  {
    unsigned int v6 = ((a2 - 243) >> 8) + 1;
    *__n128 result = a2 + 13;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001A0B80);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 13;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.FrameType.ManagementType()
{
  return &type metadata for IEEE80211Frame.FrameType.ManagementType;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Header()
{
  return &type metadata for IEEE80211Frame.Header;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Header.FrameControl()
{
  return &type metadata for IEEE80211Frame.Header.FrameControl;
}

void destroy for IEEE80211Frame.Contents(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 32);
  if ((v1 >> 16) <= 0x80000000) {
    sub_10006DEB0(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), v1, *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
  }
      *(void *)(a1 + 152),
      *(unsigned char *)(a1 + 160));
}

uint64_t initializeWithCopy for IEEE80211Frame.Contents(uint64_t a1, uint64_t *a2)
{
  unint64_t v3 = a2[4];
  if ((v3 >> 16) > 0x80000000)
  {
    long long v12 = *((_OWORD *)a2 + 9);
    *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
    *(_OWORD *)(a1 + 144) = v12;
    *(unsigned char *)(a1 + 160) = *((unsigned char *)a2 + 160);
    long long v13 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 80) = v13;
    long long v14 = *((_OWORD *)a2 + 7);
    *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
    *(_OWORD *)(a1 + 112) = v14;
    long long v15 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v15;
    long long v16 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 48) = v16;
  }
  else
  {
    uint64_t v4 = a2[1];
    uint64_t v5 = a2[2];
    unint64_t v6 = a2[3];
    uint64_t v7 = a2[5];
    unint64_t v8 = a2[6];
    uint64_t v9 = a2[8];
    uint64_t v18 = a2[9];
    unint64_t v19 = a2[10];
    unint64_t v20 = a2[11];
    uint64_t v21 = a2[12];
    unint64_t v22 = a2[13];
    uint64_t v23 = a2[14];
    unint64_t v24 = a2[15];
    unint64_t v25 = a2[16];
    uint64_t v26 = a2[17];
    uint64_t v27 = a2[18];
    unint64_t v28 = a2[19];
    char v29 = *((unsigned char *)a2 + 160);
    uint64_t v10 = *a2;
    uint64_t v11 = a2[7];
    sub_10006E740(*a2, v4, v5, v6, v3, v7, v8, v11, v9, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29);
    *(void *)a1 = v10;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v5;
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 32) = v3;
    *(void *)(a1 + 40) = v7;
    *(void *)(a1 + 48) = v8;
    *(void *)(a1 + 56) = v11;
    *(void *)(a1 + 64) = v9;
    *(void *)(a1 + 72) = v18;
    *(void *)(a1 + 80) = v19;
    *(void *)(a1 + 88) = v20;
    *(void *)(a1 + 96) = v21;
    *(void *)(a1 + 104) = v22;
    *(void *)(a1 + 112) = v23;
    *(void *)(a1 + 120) = v24;
    *(void *)(a1 + 128) = v25;
    *(void *)(a1 + 136) = v26;
    *(void *)(a1 + 144) = v27;
    *(void *)(a1 + 152) = v28;
    *(unsigned char *)(a1 + 160) = v29;
  }
  return a1;
}

uint64_t assignWithCopy for IEEE80211Frame.Contents(uint64_t a1, long long *a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  unint64_t v5 = *((void *)a2 + 4);
  unint64_t v6 = v5 >> 16;
  if ((v4 >> 16) > 0x80000000)
  {
    if (v6 <= 0x80000000)
    {
      uint64_t v31 = *(void *)a2;
      uint64_t v32 = *((void *)a2 + 1);
      uint64_t v33 = *((void *)a2 + 2);
      unint64_t v34 = *((void *)a2 + 3);
      uint64_t v35 = *((void *)a2 + 5);
      unint64_t v36 = *((void *)a2 + 6);
      uint64_t v49 = *((void *)a2 + 9);
      unint64_t v51 = *((void *)a2 + 10);
      unint64_t v53 = *((void *)a2 + 11);
      uint64_t v55 = *((void *)a2 + 12);
      unint64_t v57 = *((void *)a2 + 13);
      uint64_t v59 = *((void *)a2 + 14);
      unint64_t v61 = *((void *)a2 + 15);
      unint64_t v63 = *((void *)a2 + 16);
      uint64_t v65 = *((void *)a2 + 17);
      uint64_t v67 = *((void *)a2 + 18);
      unint64_t v69 = *((void *)a2 + 19);
      char v71 = *((unsigned char *)a2 + 160);
      uint64_t v37 = *((void *)a2 + 8);
      uint64_t v38 = *((void *)a2 + 7);
      sub_10006E740(*(void *)a2, v32, v33, v34, v5, v35, v36, v38, v37, v49, v51, v53, v55, v57, v59, v61, v63, v65, v67,
        v69,
        v71);
      *(void *)a1 = v31;
      *(void *)(a1 + 8) = v32;
      *(void *)(a1 + 16) = v33;
      *(void *)(a1 + 24) = v34;
      *(void *)(a1 + 32) = v5;
      *(void *)(a1 + 40) = v35;
      *(void *)(a1 + 48) = v36;
      *(void *)(a1 + 56) = v38;
      *(void *)(a1 + 64) = v37;
      *(void *)(a1 + 72) = v49;
      *(void *)(a1 + 80) = v51;
      *(void *)(a1 + 88) = v53;
      *(void *)(a1 + 96) = v55;
      *(void *)(a1 + 104) = v57;
      *(void *)(a1 + 112) = v59;
      *(void *)(a1 + 120) = v61;
      *(void *)(a1 + 128) = v63;
      *(void *)(a1 + 136) = v65;
      *(void *)(a1 + 144) = v67;
      *(void *)(a1 + 152) = v69;
      *(unsigned char *)(a1 + 160) = v71;
      return a1;
    }
LABEL_7:
    long long v39 = *a2;
    long long v40 = a2[2];
    *(_OWORD *)(a1 + 16) = a2[1];
    *(_OWORD *)(a1 + 32) = v40;
    *(_OWORD *)a1 = v39;
    long long v41 = a2[3];
    long long v42 = a2[4];
    long long v43 = a2[6];
    *(_OWORD *)(a1 + 80) = a2[5];
    *(_OWORD *)(a1 + 96) = v43;
    *(_OWORD *)(a1 + 48) = v41;
    *(_OWORD *)(a1 + 64) = v42;
    long long v44 = a2[7];
    long long v45 = a2[8];
    long long v46 = a2[9];
    *(unsigned char *)(a1 + 160) = *((unsigned char *)a2 + 160);
    *(_OWORD *)(a1 + 128) = v45;
    *(_OWORD *)(a1 + 144) = v46;
    *(_OWORD *)(a1 + 112) = v44;
    return a1;
  }
  if (v6 > 0x80000000)
  {
    sub_10006DEB0(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), v4, *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
      *(void *)(a1 + 152),
      *(unsigned char *)(a1 + 160));
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)a2;
  uint64_t v8 = *((void *)a2 + 1);
  uint64_t v9 = *((void *)a2 + 2);
  unint64_t v10 = *((void *)a2 + 3);
  uint64_t v11 = *((void *)a2 + 5);
  unint64_t v12 = *((void *)a2 + 6);
  uint64_t v13 = *((void *)a2 + 7);
  uint64_t v48 = *((void *)a2 + 8);
  uint64_t v50 = *((void *)a2 + 9);
  unint64_t v52 = *((void *)a2 + 10);
  unint64_t v54 = *((void *)a2 + 11);
  uint64_t v56 = *((void *)a2 + 12);
  unint64_t v58 = *((void *)a2 + 13);
  uint64_t v60 = *((void *)a2 + 14);
  unint64_t v62 = *((void *)a2 + 15);
  unint64_t v64 = *((void *)a2 + 16);
  uint64_t v66 = *((void *)a2 + 17);
  uint64_t v68 = *((void *)a2 + 18);
  unint64_t v70 = *((void *)a2 + 19);
  char v14 = *((unsigned char *)a2 + 160);
  sub_10006E740(*(void *)a2, v8, v9, v10, v5, v11, v12, v13, v48, v50, v52, v54, v56, v58, v60, v62, v64, v66, v68,
    v70,
    v14);
  uint64_t v15 = *(void *)a1;
  uint64_t v16 = *(void *)(a1 + 8);
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  uint64_t v17 = *(void *)(a1 + 16);
  unint64_t v18 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = v10;
  uint64_t v19 = *(void *)(a1 + 32);
  uint64_t v20 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v11;
  unint64_t v21 = *(void *)(a1 + 48);
  uint64_t v22 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v12;
  *(void *)(a1 + 56) = v13;
  long long v23 = *(_OWORD *)(a1 + 64);
  long long v24 = *(_OWORD *)(a1 + 80);
  *(void *)(a1 + 64) = v48;
  *(void *)(a1 + 72) = v50;
  *(void *)(a1 + 80) = v52;
  *(void *)(a1 + 88) = v54;
  long long v25 = *(_OWORD *)(a1 + 96);
  long long v26 = *(_OWORD *)(a1 + 112);
  *(void *)(a1 + 96) = v56;
  *(void *)(a1 + 104) = v58;
  *(void *)(a1 + 112) = v60;
  *(void *)(a1 + 120) = v62;
  long long v27 = *(_OWORD *)(a1 + 128);
  *(void *)(a1 + 128) = v64;
  *(void *)(a1 + 136) = v66;
  uint64_t v28 = *(void *)(a1 + 144);
  unint64_t v29 = *(void *)(a1 + 152);
  *(void *)(a1 + 144) = v68;
  *(void *)(a1 + 152) = v70;
  char v30 = *(unsigned char *)(a1 + 160);
  *(unsigned char *)(a1 + 160) = v14;
  sub_10006DEB0(v15, v16, v17, v18, v19, v20, v21, v22, v23, *((uint64_t *)&v23 + 1), v24, *((unint64_t *)&v24 + 1), v25, *((unint64_t *)&v25 + 1), v26, *((unint64_t *)&v26 + 1), v27, *((uint64_t *)&v27 + 1), v28,
    v29,
    v30);
  return a1;
}

__n128 initializeWithTake for IEEE80211Frame.Contents(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  long long v8 = a2[8];
  long long v9 = a2[9];
  *(unsigned char *)(a1 + 160) = *((unsigned char *)a2 + 160);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for IEEE80211Frame.Contents(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if ((v4 >> 16) > 0x80000000) {
    goto LABEL_5;
  }
  unint64_t v5 = *(void *)(a2 + 32);
  if ((v5 >> 16) > 0x80000000)
  {
    sub_10006DEB0(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), v4, *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
      *(void *)(a1 + 152),
      *(unsigned char *)(a1 + 160));
LABEL_5:
    long long v24 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v24;
    *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
    long long v25 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v25;
    long long v26 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v26;
    long long v27 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v27;
    long long v28 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v28;
    return a1;
  }
  uint64_t v6 = *(void *)(a2 + 152);
  char v7 = *(unsigned char *)(a2 + 160);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  unint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = *(void *)(a1 + 40);
  unint64_t v13 = *(void *)(a1 + 48);
  uint64_t v14 = *(void *)(a1 + 56);
  long long v15 = *(_OWORD *)(a1 + 64);
  long long v16 = *(_OWORD *)(a1 + 80);
  long long v17 = *(_OWORD *)(a1 + 96);
  long long v18 = *(_OWORD *)(a1 + 112);
  long long v19 = *(_OWORD *)(a1 + 128);
  uint64_t v20 = *(void *)(a1 + 144);
  unint64_t v21 = *(void *)(a1 + 152);
  char v22 = *(unsigned char *)(a1 + 160);
  long long v23 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v23;
  *(void *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = v6;
  *(unsigned char *)(a1 + 160) = v7;
  sub_10006DEB0(v8, v9, v10, v11, v4, v12, v13, v14, v15, *((uint64_t *)&v15 + 1), v16, *((unint64_t *)&v16 + 1), v17, *((unint64_t *)&v17 + 1), v18, *((unint64_t *)&v18 + 1), v19, *((uint64_t *)&v19 + 1), v20,
    v21,
    v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for IEEE80211Frame.Contents(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFD && *(unsigned char *)(a1 + 161)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  unsigned int v3 = *(_DWORD *)(a1 + 34);
  if (v3 > 0x80000000) {
    unsigned int v4 = -v3;
  }
  else {
    unsigned int v4 = 0;
  }
  if (v4 >= 4) {
    return v4 - 3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for IEEE80211Frame.Contents(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(unsigned char *)(result + 160) = 0;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 161) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 161) = 0;
    }
    if (a2)
    {
      *(_OWORD *)__n128 result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(void *)(result + 32) = (unint64_t)(-3 - a2) << 16;
      *(_OWORD *)(result + 40) = 0u;
      *(_OWORD *)(result + 56) = 0u;
      *(_OWORD *)(result + 72) = 0u;
      *(_OWORD *)(result + 88) = 0u;
      *(_OWORD *)(result + 104) = 0u;
      *(_OWORD *)(result + 120) = 0u;
      *(_OWORD *)(result + 136) = 0u;
      *(_OWORD *)(result + 145) = 0u;
    }
  }
  return result;
}

double sub_1001A1364(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 152) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(unsigned char *)(a1 + 160) = 0;
    *(void *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(void *)(a1 + 32) = (unint64_t)-a2 << 16;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 145) = 0u;
  }
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Contents()
{
  return &type metadata for IEEE80211Frame.Contents;
}

uint64_t destroy for IEEE80211Frame.Management(uint64_t a1, uint64_t a2)
{
  return sub_1001A167C(a1, a2, (uint64_t (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_10006DEB0);
}

uint64_t initializeWithCopy for IEEE80211Frame.Management(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_1001A16F8(a1, a2, a3, (void (*)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10006E740);
}

uint64_t *assignWithCopy for IEEE80211Frame.Management(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1001A1864(a1, a2, a3, (void (*)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_10006E740, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void, void, void, uint64_t, uint64_t, int))sub_10006DEB0);
}

uint64_t *assignWithTake for IEEE80211Frame.Management(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_1001A1A0C(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void, void, void, uint64_t, uint64_t, char))sub_10006DEB0);
}

uint64_t getEnumTagSinglePayload for IEEE80211Frame.Management(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 161)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unsigned int v2 = *(_DWORD *)(a1 + 34);
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for IEEE80211Frame.Management(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 152) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(unsigned char *)(a1 + 160) = 0;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 161) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(void *)(a1 + 32) = (unint64_t)-a2 << 16;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 56) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 104) = 0u;
      *(_OWORD *)(a1 + 120) = 0u;
      *(_OWORD *)(a1 + 136) = 0u;
      *(_OWORD *)(a1 + 145) = 0u;
      return result;
    }
    *(unsigned char *)(a1 + 161) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_1001A1548(uint64_t result, char a2)
{
  unint64_t v2 = *(void *)(result + 88) & 0xC000000000000001 | ((unint64_t)(a2 & 3) << 60);
  *(void *)(result + 32) = *(unsigned __int16 *)(result + 32);
  *(void *)(result + 88) = v2;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management()
{
  return &type metadata for IEEE80211Frame.Management;
}

uint64_t sub_1001A157C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for IEEE80211Frame.Management.Beacon(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_WORD *)(a1 + 10) = *(_WORD *)(a2 + 10);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for IEEE80211Frame.Management.Beacon(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Beacon()
{
  return &type metadata for IEEE80211Frame.Management.Beacon;
}

uint64_t destroy for IEEE80211Frame.Management.Authentication(uint64_t a1, uint64_t a2)
{
  return sub_1001A167C(a1, a2, (uint64_t (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_10006DF78);
}

uint64_t sub_1001A167C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 160);
  return a3(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
           *(void *)(a1 + 152),
           v4);
}

uint64_t initializeWithCopy for IEEE80211Frame.Management.Authentication(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_1001A16F8(a1, a2, a3, (void (*)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10006E808);
}

uint64_t sub_1001A16F8(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = a2[3];
  uint64_t v6 = a2[4];
  uint64_t v7 = a2[5];
  uint64_t v8 = a2[6];
  uint64_t v9 = a2[7];
  uint64_t v15 = a2[9];
  uint64_t v16 = a2[10];
  uint64_t v17 = a2[11];
  uint64_t v18 = a2[12];
  uint64_t v19 = a2[13];
  uint64_t v20 = a2[14];
  uint64_t v21 = a2[15];
  uint64_t v22 = a2[16];
  uint64_t v23 = a2[17];
  uint64_t v24 = a2[18];
  uint64_t v25 = a2[19];
  char v26 = *((unsigned char *)a2 + 160);
  uint64_t v10 = a2[8];
  uint64_t v11 = *a2;
  uint64_t v12 = a2[1];
  uint64_t v13 = a2[2];
  a4(*a2, v12, v13, v5, v6, v7, v8, v9, v10, v15, v16, v17, v18);
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v12;
  *(void *)(a1 + 16) = v13;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  *(void *)(a1 + 64) = v10;
  *(void *)(a1 + 72) = v15;
  *(void *)(a1 + 80) = v16;
  *(void *)(a1 + 88) = v17;
  *(void *)(a1 + 96) = v18;
  *(void *)(a1 + 104) = v19;
  *(void *)(a1 + 112) = v20;
  *(void *)(a1 + 120) = v21;
  *(void *)(a1 + 128) = v22;
  *(void *)(a1 + 136) = v23;
  *(void *)(a1 + 144) = v24;
  *(void *)(a1 + 152) = v25;
  *(unsigned char *)(a1 + 160) = v26;
  return a1;
}

uint64_t *assignWithCopy for IEEE80211Frame.Management.Authentication(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1001A1864(a1, a2, a3, (void (*)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char))sub_10006E808, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void, void, void, uint64_t, uint64_t, int))sub_10006DF78);
}

uint64_t *sub_1001A1864(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void, void, void, uint64_t, uint64_t, int))
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  uint64_t v10 = a2[4];
  uint64_t v11 = a2[5];
  uint64_t v12 = a2[6];
  uint64_t v13 = a2[7];
  uint64_t v14 = a2[8];
  uint64_t v33 = a2[9];
  uint64_t v34 = a2[10];
  uint64_t v35 = a2[11];
  uint64_t v36 = a2[12];
  uint64_t v37 = a2[13];
  uint64_t v38 = a2[14];
  uint64_t v39 = a2[15];
  uint64_t v40 = a2[16];
  uint64_t v41 = a2[17];
  uint64_t v42 = a2[18];
  uint64_t v43 = a2[19];
  char v44 = *((unsigned char *)a2 + 160);
  a4(*a2, v7, v8, v9, v10, v11, v12, v13, v14, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44);
  uint64_t v15 = *a1;
  uint64_t v16 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  uint64_t v17 = a1[2];
  uint64_t v18 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  uint64_t v19 = a1[4];
  uint64_t v20 = a1[5];
  a1[4] = v10;
  a1[5] = v11;
  uint64_t v21 = a1[6];
  uint64_t v22 = a1[7];
  a1[6] = v12;
  a1[7] = v13;
  long long v23 = *((_OWORD *)a1 + 4);
  long long v24 = *((_OWORD *)a1 + 5);
  a1[8] = v14;
  a1[9] = v33;
  a1[10] = v34;
  a1[11] = v35;
  long long v25 = *((_OWORD *)a1 + 6);
  long long v26 = *((_OWORD *)a1 + 7);
  a1[12] = v36;
  a1[13] = v37;
  a1[14] = v38;
  a1[15] = v39;
  long long v27 = *((_OWORD *)a1 + 8);
  a1[16] = v40;
  a1[17] = v41;
  uint64_t v28 = a1[18];
  uint64_t v29 = a1[19];
  a1[18] = v42;
  a1[19] = v43;
  char v30 = *((unsigned char *)a1 + 160);
  *((unsigned char *)a1 + 160) = v44;
  LOBYTE(v32) = v30;
  a5(v15, v16, v17, v18, v19, v20, v21, v22, v23, *((void *)&v23 + 1), v24, *((void *)&v24 + 1), v25, *((void *)&v25 + 1), v26, *((void *)&v26 + 1), v27, *((void *)&v27 + 1), v28,
    v29,
    v32);
  return a1;
}

uint64_t *assignWithTake for IEEE80211Frame.Management.Authentication(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_1001A1A0C(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void, void, void, uint64_t, uint64_t, char))sub_10006DF78);
}

uint64_t *sub_1001A1A0C(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void, void, void, uint64_t, uint64_t, char))
{
  char v6 = *(unsigned char *)(a2 + 160);
  uint64_t v7 = *a1;
  uint64_t v9 = a1[1];
  uint64_t v8 = a1[2];
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  uint64_t v12 = a1[5];
  uint64_t v13 = a1[6];
  uint64_t v14 = a1[7];
  long long v15 = *((_OWORD *)a1 + 4);
  long long v16 = *((_OWORD *)a1 + 5);
  long long v17 = *((_OWORD *)a1 + 6);
  long long v18 = *((_OWORD *)a1 + 7);
  long long v19 = *((_OWORD *)a1 + 8);
  uint64_t v20 = a1[18];
  uint64_t v21 = a1[19];
  char v22 = *((unsigned char *)a1 + 160);
  long long v23 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v23;
  long long v24 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)a1 + 3) = v24;
  long long v25 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)a1 + 4) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)a1 + 5) = v25;
  long long v26 = *(_OWORD *)(a2 + 112);
  *((_OWORD *)a1 + 6) = *(_OWORD *)(a2 + 96);
  *((_OWORD *)a1 + 7) = v26;
  long long v27 = *(_OWORD *)(a2 + 144);
  *((_OWORD *)a1 + 8) = *(_OWORD *)(a2 + 128);
  *((_OWORD *)a1 + 9) = v27;
  *((unsigned char *)a1 + 160) = v6;
  char v29 = v22;
  a4(v7, v9, v8, v10, v11, v12, v13, v14, v15, *((void *)&v15 + 1), v16, *((void *)&v16 + 1), v17, *((void *)&v17 + 1), v18, *((void *)&v18 + 1), v19, *((void *)&v19 + 1), v20,
    v21,
    v29);
  return a1;
}

uint64_t getEnumTagSinglePayload for IEEE80211Frame.Management.Authentication(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 161)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unsigned int v2 = (*(void *)a1 >> 28) & 0xFFFFFC00 | ((unsigned __int16)*(void *)a1 >> 6);
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for IEEE80211Frame.Management.Authentication(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 152) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(unsigned char *)(a1 + 160) = 0;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 161) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)a1 = (((unint64_t)-a2 << 6) | ((unint64_t)-a2 << 28)) & 0xFFFFFFC00000FFFFLL;
      double result = 0.0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 56) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 104) = 0u;
      *(_OWORD *)(a1 + 120) = 0u;
      *(_OWORD *)(a1 + 136) = 0u;
      *(_OWORD *)(a1 + 145) = 0u;
      return result;
    }
    *(unsigned char *)(a1 + 161) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_1001A1BAC(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int16 *)(result + 32);
  uint64_t v3 = *(void *)(result + 88) & 1 | (a2 << 62);
  *(void *)result &= 0x3FFFFF003FuLL;
  *(void *)(result + 32) = v2;
  *(void *)(result + 88) = v3;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication()
{
  return &type metadata for IEEE80211Frame.Management.Authentication;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication.FiniteCyclicGroup()
{
  return &type metadata for IEEE80211Frame.Management.Authentication.FiniteCyclicGroup;
}

unsigned char *storeEnumTagSinglePayload for IEEE80211Frame.Management.Authentication.AuthenticationAlgorithm(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *double result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001A1CC8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication.AuthenticationAlgorithm()
{
  return &type metadata for IEEE80211Frame.Management.Authentication.AuthenticationAlgorithm;
}

uint64_t destroy for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals(uint64_t *a1)
{
  return sub_10019E164(*a1, a1[1], a1[2], a1[3], (void (*)(void))sub_10000C970);
}

uint64_t *initializeWithCopy for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  sub_10019E164(*a2, v4, v5, v6, (void (*)(void))sub_100013D44);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return a1;
}

uint64_t *assignWithCopy for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  sub_10019E164(*a2, v4, v5, v6, (void (*)(void))sub_100013D44);
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  uint64_t v10 = a1[3];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  sub_10019E164(v7, v8, v9, v10, (void (*)(void))sub_10000C970);
  return a1;
}

uint64_t *assignWithTake for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v6 = a1[3];
  long long v7 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v7;
  sub_10019E164(v3, v5, v4, v6, (void (*)(void))sub_10000C970);
  return a1;
}

uint64_t getEnumTagSinglePayload for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 3 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 3);
  }
  unsigned int v3 = ((2 * ((*(void *)(a1 + 24) & 0x1000000000000000) != 0)) | ((*(void *)(a1 + 24) >> 60) >> 1) & 1) ^ 3;
  if (v3 >= 2) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)double result = a2 - 3;
    *(void *)(result + 8) = 0;
    if (a3 >= 3) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 3) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2)
    {
      *(void *)double result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = (unint64_t)((2 * (a2 & 1)) | 1) << 60;
    }
  }
  return result;
}

uint64_t sub_1001A1F28(uint64_t a1)
{
  return (*(void *)(a1 + 24) >> 61) & 1;
}

uint64_t sub_1001A1F34(uint64_t result)
{
  *(void *)(result + 24) &= ~0x2000000000000000uLL;
  return result;
}

uint64_t sub_1001A1F44(uint64_t result, char a2)
{
  *(void *)(result + 24) = *(void *)(result + 24) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 1) << 61);
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals()
{
  return &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.MessageType()
{
  return &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.MessageType;
}

uint64_t destroy for NANAttribute.PairingIdentityResolution(uint64_t *a1)
{
  sub_10000C970(*a1, a1[1]);
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];

  return sub_10000C970(v2, v3);
}

uint64_t *initializeWithCopy for NANAttribute.PairingIdentityResolution(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_100013D44(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v7 = a2[2];
  unint64_t v6 = a2[3];
  sub_100013D44(v7, v6);
  a1[2] = v7;
  a1[3] = v6;
  return a1;
}

uint64_t *assignWithCopy for NANAttribute.PairingIdentityResolution(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_100013D44(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10000C970(v6, v7);
  uint64_t v9 = a2[2];
  unint64_t v8 = a2[3];
  sub_100013D44(v9, v8);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2] = v9;
  a1[3] = v8;
  sub_10000C970(v10, v11);
  return a1;
}

uint64_t *assignWithTake for NANAttribute.PairingIdentityResolution(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10000C970(v4, v5);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_10000C970(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute.PairingIdentityResolution(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for NANAttribute.PairingIdentityResolution(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)double result = a2 - 13;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2)
    {
      *(void *)double result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit()
{
  return &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Confirm()
{
  return &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Confirm;
}

uint64_t sub_1001A219C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001A21F0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001A2244(uint64_t a1)
{
  return a1;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication.PASNRequest()
{
  return &type metadata for IEEE80211Frame.Management.Authentication.PASNRequest;
}

uint64_t _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO11PASNRequestVwxx_0(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v3 = *(void *)(a1 + 80);
  if (v3 >> 60 != 15) {
    uint64_t result = sub_10000C970(*(void *)(a1 + 72), v3);
  }
  unint64_t v4 = *(void *)(a1 + 104);
  if (v4 >> 60 != 15) {
    uint64_t result = sub_10000C970(*(void *)(a1 + 96), v4);
  }
  int v5 = *(unsigned __int8 *)(a1 + 160);
  if (v5 != 255)
  {
    uint64_t v6 = *(void *)(a1 + 112);
    unint64_t v7 = *(void *)(a1 + 120);
    unint64_t v8 = *(void *)(a1 + 128);
    uint64_t v9 = *(void *)(a1 + 136);
    uint64_t v10 = *(void *)(a1 + 144);
    unint64_t v11 = *(void *)(a1 + 152);
    return sub_10006E108(v6, v7, v8, v9, v10, v11, v5);
  }
  return result;
}

uint64_t _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO11PASNRequestVwcp_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  unint64_t v5 = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v5 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
  }
  else
  {
    *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
    uint64_t v6 = *(void *)(a2 + 72);
    sub_100013D44(v6, v5);
    *(void *)(a1 + 72) = v6;
    *(void *)(a1 + 80) = v5;
  }
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  unint64_t v7 = (uint64_t *)(a2 + 96);
  unint64_t v8 = *(void *)(a2 + 104);
  if (v8 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)v7;
  }
  else
  {
    uint64_t v9 = *v7;
    sub_100013D44(*v7, *(void *)(a2 + 104));
    *(void *)(a1 + 96) = v9;
    *(void *)(a1 + 104) = v8;
  }
  int v10 = *(unsigned __int8 *)(a2 + 160);
  if (v10 == 255)
  {
    long long v17 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v17;
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  }
  else
  {
    uint64_t v11 = *(void *)(a2 + 112);
    unint64_t v12 = *(void *)(a2 + 120);
    unint64_t v13 = *(void *)(a2 + 128);
    uint64_t v14 = *(void *)(a2 + 136);
    uint64_t v16 = *(void *)(a2 + 144);
    unint64_t v15 = *(void *)(a2 + 152);
    sub_10006E998(v11, v12, v13, v14, v16, v15, v10);
    *(void *)(a1 + 112) = v11;
    *(void *)(a1 + 120) = v12;
    *(void *)(a1 + 128) = v13;
    *(void *)(a1 + 136) = v14;
    *(void *)(a1 + 144) = v16;
    *(void *)(a1 + 152) = v15;
    *(unsigned char *)(a1 + 160) = v10;
  }
  return a1;
}

uint64_t _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO11PASNRequestVwca_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (long long *)(a1 + 64);
  unint64_t v5 = (long long *)(a2 + 64);
  if (*(void *)(a1 + 80) >> 60 == 15)
  {
    if (*(void *)(a2 + 80) >> 60 == 15)
    {
      long long v6 = *v5;
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *uint64_t v4 = v6;
    }
    else
    {
      *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
      uint64_t v8 = *(void *)(a2 + 72);
      unint64_t v9 = *(void *)(a2 + 80);
      sub_100013D44(v8, v9);
      *(void *)(a1 + 72) = v8;
      *(void *)(a1 + 80) = v9;
    }
  }
  else if (*(void *)(a2 + 80) >> 60 == 15)
  {
    sub_1001A219C(a1 + 64);
    uint64_t v7 = *(void *)(a2 + 80);
    *uint64_t v4 = *v5;
    *(void *)(a1 + 80) = v7;
  }
  else
  {
    *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
    uint64_t v10 = *(void *)(a2 + 72);
    unint64_t v11 = *(void *)(a2 + 80);
    sub_100013D44(v10, v11);
    uint64_t v12 = *(void *)(a1 + 72);
    unint64_t v13 = *(void *)(a1 + 80);
    *(void *)(a1 + 72) = v10;
    *(void *)(a1 + 80) = v11;
    sub_10000C970(v12, v13);
  }
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  uint64_t v14 = (uint64_t *)(a2 + 96);
  unint64_t v15 = *(void *)(a2 + 104);
  if (*(void *)(a1 + 104) >> 60 == 15)
  {
    if (v15 >> 60 != 15)
    {
      uint64_t v16 = *v14;
      sub_100013D44(*v14, *(void *)(a2 + 104));
      *(void *)(a1 + 96) = v16;
      *(void *)(a1 + 104) = v15;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v15 >> 60 == 15)
  {
    sub_1001A21F0(a1 + 96);
LABEL_13:
    *(_OWORD *)(a1 + 96) = *(_OWORD *)v14;
    goto LABEL_15;
  }
  uint64_t v17 = *v14;
  sub_100013D44(*v14, *(void *)(a2 + 104));
  uint64_t v18 = *(void *)(a1 + 96);
  unint64_t v19 = *(void *)(a1 + 104);
  *(void *)(a1 + 96) = v17;
  *(void *)(a1 + 104) = v15;
  sub_10000C970(v18, v19);
LABEL_15:
  uint64_t v20 = (_OWORD *)(a1 + 112);
  uint64_t v21 = (long long *)(a2 + 112);
  int v22 = *(unsigned __int8 *)(a2 + 160);
  if (*(unsigned __int8 *)(a1 + 160) == 255)
  {
    if (v22 == 255)
    {
      long long v45 = *v21;
      long long v46 = *(_OWORD *)(a2 + 128);
      long long v47 = *(_OWORD *)(a2 + 144);
      *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
      *(_OWORD *)(a1 + 128) = v46;
      *(_OWORD *)(a1 + 144) = v47;
      *uint64_t v20 = v45;
    }
    else
    {
      uint64_t v36 = *(void *)(a2 + 112);
      unint64_t v37 = *(void *)(a2 + 120);
      unint64_t v38 = *(void *)(a2 + 128);
      uint64_t v39 = *(void *)(a2 + 136);
      uint64_t v41 = *(void *)(a2 + 144);
      unint64_t v40 = *(void *)(a2 + 152);
      sub_10006E998(v36, v37, v38, v39, v41, v40, v22);
      *(void *)(a1 + 112) = v36;
      *(void *)(a1 + 120) = v37;
      *(void *)(a1 + 128) = v38;
      *(void *)(a1 + 136) = v39;
      *(void *)(a1 + 144) = v41;
      *(void *)(a1 + 152) = v40;
      *(unsigned char *)(a1 + 160) = v22;
    }
  }
  else if (v22 == 255)
  {
    sub_1001A2244(a1 + 112);
    long long v43 = *(_OWORD *)(a2 + 128);
    long long v42 = *(_OWORD *)(a2 + 144);
    long long v44 = *v21;
    *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
    *(_OWORD *)(a1 + 128) = v43;
    *(_OWORD *)(a1 + 144) = v42;
    *uint64_t v20 = v44;
  }
  else
  {
    uint64_t v23 = *(void *)(a2 + 112);
    unint64_t v24 = *(void *)(a2 + 120);
    unint64_t v25 = *(void *)(a2 + 128);
    uint64_t v26 = *(void *)(a2 + 136);
    uint64_t v28 = *(void *)(a2 + 144);
    unint64_t v27 = *(void *)(a2 + 152);
    sub_10006E998(v23, v24, v25, v26, v28, v27, v22);
    uint64_t v29 = *(void *)(a1 + 112);
    unint64_t v30 = *(void *)(a1 + 120);
    unint64_t v31 = *(void *)(a1 + 128);
    uint64_t v32 = *(void *)(a1 + 136);
    uint64_t v33 = *(void *)(a1 + 144);
    unint64_t v34 = *(void *)(a1 + 152);
    *(void *)(a1 + 112) = v23;
    *(void *)(a1 + 120) = v24;
    *(void *)(a1 + 128) = v25;
    *(void *)(a1 + 136) = v26;
    *(void *)(a1 + 144) = v28;
    *(void *)(a1 + 152) = v27;
    char v35 = *(unsigned char *)(a1 + 160);
    *(unsigned char *)(a1 + 160) = v22;
    sub_10006E108(v29, v30, v31, v32, v33, v34, v35);
  }
  return a1;
}

uint64_t _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO11PASNRequestVwta_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  unint64_t v4 = *(void *)(a1 + 80);
  if (v4 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v5 = *(void *)(a2 + 80);
  if (v5 >> 60 == 15)
  {
    sub_1001A219C(a1 + 64);
LABEL_4:
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    goto LABEL_6;
  }
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  uint64_t v6 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v5;
  sub_10000C970(v6, v4);
LABEL_6:
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  uint64_t v7 = (_OWORD *)(a2 + 96);
  unint64_t v8 = *(void *)(a1 + 104);
  if (v8 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 96) = *v7;
    goto LABEL_11;
  }
  unint64_t v9 = *(void *)(a2 + 104);
  if (v9 >> 60 == 15)
  {
    sub_1001A21F0(a1 + 96);
    goto LABEL_9;
  }
  uint64_t v10 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = *(void *)v7;
  *(void *)(a1 + 104) = v9;
  sub_10000C970(v10, v8);
LABEL_11:
  int v11 = *(unsigned __int8 *)(a1 + 160);
  if (v11 == 255)
  {
LABEL_15:
    long long v20 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v20;
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
    return a1;
  }
  int v12 = *(unsigned __int8 *)(a2 + 160);
  if (v12 == 255)
  {
    sub_1001A2244(a1 + 112);
    goto LABEL_15;
  }
  uint64_t v13 = *(void *)(a1 + 112);
  unint64_t v14 = *(void *)(a1 + 120);
  unint64_t v15 = *(void *)(a1 + 128);
  uint64_t v16 = *(void *)(a1 + 136);
  uint64_t v17 = *(void *)(a1 + 144);
  unint64_t v18 = *(void *)(a1 + 152);
  long long v19 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v19;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 160) = v12;
  sub_10006E108(v13, v14, v15, v16, v17, v18, v11);
  return a1;
}

uint64_t _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO11PASNRequestVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 161)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1001A29C8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 160) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 161) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 161) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication.PASNResponse()
{
  return &type metadata for IEEE80211Frame.Management.Authentication.PASNResponse;
}

uint64_t destroy for IEEE80211Frame.Management.Authentication.PASNConfirm(uint64_t result)
{
  uint64_t v1 = result;
  unint64_t v2 = *(void *)(result + 24);
  if (v2 >> 60 != 15) {
    uint64_t result = sub_10000C970(*(void *)(result + 16), v2);
  }
  unint64_t v3 = *(void *)(v1 + 48);
  if (v3 >> 60 != 15)
  {
    uint64_t v4 = *(void *)(v1 + 40);
    return sub_10000C970(v4, v3);
  }
  return result;
}

uint64_t initializeWithCopy for IEEE80211Frame.Management.Authentication.PASNConfirm(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 24);
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
  }
  else
  {
    *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
    uint64_t v5 = *(void *)(a2 + 16);
    sub_100013D44(v5, v4);
    *(void *)(a1 + 16) = v5;
    *(void *)(a1 + 24) = v4;
  }
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v6 = (uint64_t *)(a2 + 40);
  unint64_t v7 = *(void *)(a2 + 48);
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)v6;
  }
  else
  {
    uint64_t v8 = *v6;
    sub_100013D44(*v6, v7);
    *(void *)(a1 + 40) = v8;
    *(void *)(a1 + 48) = v7;
  }
  return a1;
}

uint64_t assignWithCopy for IEEE80211Frame.Management.Authentication.PASNConfirm(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = a1 + 8;
  uint64_t v5 = (long long *)(a2 + 8);
  if (*(void *)(a1 + 24) >> 60 == 15)
  {
    if (*(void *)(a2 + 24) >> 60 == 15)
    {
      long long v6 = *v5;
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(_OWORD *)uint64_t v4 = v6;
    }
    else
    {
      *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
      uint64_t v8 = *(void *)(a2 + 16);
      unint64_t v9 = *(void *)(a2 + 24);
      sub_100013D44(v8, v9);
      *(void *)(a1 + 16) = v8;
      *(void *)(a1 + 24) = v9;
    }
  }
  else if (*(void *)(a2 + 24) >> 60 == 15)
  {
    sub_1001A219C(a1 + 8);
    uint64_t v7 = *((void *)v5 + 2);
    *(_OWORD *)uint64_t v4 = *v5;
    *(void *)(v4 + 16) = v7;
  }
  else
  {
    *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
    uint64_t v10 = *(void *)(a2 + 16);
    unint64_t v11 = *(void *)(a2 + 24);
    sub_100013D44(v10, v11);
    uint64_t v12 = *(void *)(a1 + 16);
    unint64_t v13 = *(void *)(a1 + 24);
    *(void *)(a1 + 16) = v10;
    *(void *)(a1 + 24) = v11;
    sub_10000C970(v12, v13);
  }
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  unint64_t v14 = (uint64_t *)(a2 + 40);
  unint64_t v15 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48) >> 60 != 15)
  {
    if (v15 >> 60 != 15)
    {
      uint64_t v17 = *v14;
      sub_100013D44(*v14, v15);
      uint64_t v18 = *(void *)(a1 + 40);
      unint64_t v19 = *(void *)(a1 + 48);
      *(void *)(a1 + 40) = v17;
      *(void *)(a1 + 48) = v15;
      sub_10000C970(v18, v19);
      return a1;
    }
    sub_1001A21F0(a1 + 40);
    goto LABEL_13;
  }
  if (v15 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)v14;
    return a1;
  }
  uint64_t v16 = *v14;
  sub_100013D44(*v14, v15);
  *(void *)(a1 + 40) = v16;
  *(void *)(a1 + 48) = v15;
  return a1;
}

uint64_t assignWithTake for IEEE80211Frame.Management.Authentication.PASNConfirm(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = a1 + 8;
  uint64_t v5 = a2 + 8;
  unint64_t v6 = *(void *)(a1 + 24);
  if (v6 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v7 = *(void *)(a2 + 24);
  if (v7 >> 60 == 15)
  {
    sub_1001A219C(a1 + 8);
LABEL_4:
    *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
    *(void *)(v4 + 16) = *(void *)(v5 + 16);
    goto LABEL_6;
  }
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  sub_10000C970(v8, v6);
LABEL_6:
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  unint64_t v9 = (void *)(a2 + 40);
  unint64_t v10 = *(void *)(a1 + 48);
  if (v10 >> 60 != 15)
  {
    unint64_t v11 = *(void *)(a2 + 48);
    if (v11 >> 60 != 15)
    {
      uint64_t v12 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = *v9;
      *(void *)(a1 + 48) = v11;
      sub_10000C970(v12, v10);
      return a1;
    }
    sub_1001A21F0(a1 + 40);
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)v9;
  return a1;
}

uint64_t getEnumTagSinglePayload for IEEE80211Frame.Management.Authentication.PASNConfirm(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xCB && a1[56]) {
    return (*(_DWORD *)a1 + 203);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 0x36;
  int v5 = v3 - 54;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for IEEE80211Frame.Management.Authentication.PASNConfirm(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xCA)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 203;
    if (a3 >= 0xCB) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0xCB) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2) {
      *(unsigned char *)uint64_t result = a2 + 53;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication.PASNConfirm()
{
  return &type metadata for IEEE80211Frame.Management.Authentication.PASNConfirm;
}

uint64_t destroy for IEEE80211Frame.Management.ActionFrame(uint64_t a1)
{
  return sub_10006DE90(*(void *)(a1 + 8));
}

uint64_t initializeWithCopy for IEEE80211Frame.Management.ActionFrame(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  sub_10006EAC4(v3);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  return a1;
}

uint64_t assignWithCopy for IEEE80211Frame.Management.ActionFrame(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  sub_10006EAC4(v3);
  uint64_t v6 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  sub_10006DE90(v6);
  return a1;
}

uint64_t assignWithTake for IEEE80211Frame.Management.ActionFrame(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v3;
  sub_10006DE90(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for IEEE80211Frame.Management.ActionFrame(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFE && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 32766);
  }
  HIDWORD(v3) = (*(_DWORD *)(a1 + 8) >> 17) & 0x1F80 | ((unsigned __int16)*(_DWORD *)(a1 + 8) >> 9);
  LODWORD(v3) = *(_DWORD *)(a1 + 8);
  unsigned int v4 = (v3 >> 30) ^ 0x7FFF;
  if (v4 >= 0x7FFD) {
    unsigned int v4 = -1;
  }
  return v4 + 1;
}

uint64_t storeEnumTagSinglePayload for IEEE80211Frame.Management.ActionFrame(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFD)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 32766;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFE) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFE) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2)
    {
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = 0;
      *(void *)(result + 8) = ((-(__int16)a2 & 0x7FFF) << 7) & 0xFE00 | ((((-a2 >> 2) & 0x1FFF) - (a2 << 13)) << 17) & 0xFF00FFFF;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.ActionFrame()
{
  return &type metadata for IEEE80211Frame.Management.ActionFrame;
}

unsigned char *storeEnumTagSinglePayload for IEEE80211Frame.Management.ActionFrame.Category(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001A311CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.ActionFrame.Category()
{
  return &type metadata for IEEE80211Frame.Management.ActionFrame.Category;
}

unsigned char *_s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO17FiniteCyclicGroupOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1001A31F0);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.ActionFrame.PublicActionField()
{
  return &type metadata for IEEE80211Frame.Management.ActionFrame.PublicActionField;
}

uint64_t destroy for IEEE80211Frame.Management.ActionFrame.Contents(uint64_t *a1)
{
  return sub_10006DE90(*a1);
}

uint64_t *_s7CoreP2P14IEEE80211FrameV10ManagementO11ActionFrameV8ContentsOwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  sub_10006EAC4(*a2);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return a1;
}

uint64_t *assignWithCopy for IEEE80211Frame.Management.ActionFrame.Contents(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  sub_10006EAC4(*a2);
  uint64_t v6 = *a1;
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  sub_10006DE90(v6);
  return a1;
}

uint64_t *assignWithTake for IEEE80211Frame.Management.ActionFrame.Contents(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *a1;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v3;
  sub_10006DE90(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for IEEE80211Frame.Management.ActionFrame.Contents(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFE && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 32766);
  }
  HIDWORD(v3) = (*(_DWORD *)a1 >> 17) & 0x1F80 | ((unsigned __int16)*(_DWORD *)a1 >> 9);
  LODWORD(v3) = *(_DWORD *)a1;
  unsigned int v4 = (v3 >> 30) ^ 0x7FFF;
  if (v4 >= 0x7FFD) {
    unsigned int v4 = -1;
  }
  return v4 + 1;
}

uint64_t storeEnumTagSinglePayload for IEEE80211Frame.Management.ActionFrame.Contents(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFD)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 32766;
    if (a3 >= 0x7FFE) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFE) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2)
    {
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 0;
      *(void *)uint64_t result = ((-(__int16)a2 & 0x7FFF) << 7) & 0xFE00 | ((((-a2 >> 2) & 0x1FFF) - (a2 << 13)) << 17) & 0xFF00FFFF;
    }
  }
  return result;
}

uint64_t sub_1001A33FC(void *a1)
{
  if ((int)*a1 >= 0) {
    return *a1 >> 30;
  }
  else {
    return (*a1 & 0x1FF | (BYTE2(*a1) << 9) | (*a1 >> 15) & 0xFFFE0000) + 2;
  }
}

void *sub_1001A342C(void *result)
{
  *result &= 0xFFFFFFFF3FFFFFFFLL;
  return result;
}

unint64_t *sub_1001A343C(unint64_t *result, unsigned int a2)
{
  if (a2 < 2)
  {
    *uint64_t result = *result & 0xFFFFFFFF00FF01FFLL | (a2 << 30);
  }
  else
  {
    result[1] = 0;
    result[2] = 0;
    *uint64_t result = ((a2 - 2) << 7) & 0xFF0000 | (a2 - 2) & 0x1FFLL | ((unint64_t)((a2 - 2) >> 17) << 32) | 0x80000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.ActionFrame.Contents()
{
  return &type metadata for IEEE80211Frame.Management.ActionFrame.Contents;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication.PASNConfirm.CodingKeys()
{
  return &type metadata for IEEE80211Frame.Management.Authentication.PASNConfirm.CodingKeys;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication.PASNResponse.CodingKeys()
{
  return &type metadata for IEEE80211Frame.Management.Authentication.PASNResponse.CodingKeys;
}

unsigned char *_s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO12PASNResponseV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001A358CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication.PASNRequest.CodingKeys()
{
  return &type metadata for IEEE80211Frame.Management.Authentication.PASNRequest.CodingKeys;
}

unsigned char *_s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO34SimulatenousAuthenticationOfEqualsO11MessageTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001A3690);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Confirm.CodingKeys()
{
  return &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Confirm.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001A3794);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.CodingKeys()
{
  return &type metadata for IEEE80211Frame.Management.Authentication.SimulatenousAuthenticationOfEquals.Commit.CodingKeys;
}

unsigned char *_s7CoreP2P14IEEE80211FrameV9FrameTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001A3898);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Management.Beacon.CodingKeys()
{
  return &type metadata for IEEE80211Frame.Management.Beacon.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for IEEE80211Frame.Header.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001A399CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Frame.Header.CodingKeys()
{
  return &type metadata for IEEE80211Frame.Header.CodingKeys;
}

unint64_t sub_1001A39D8()
{
  unint64_t result = qword_100481660;
  if (!qword_100481660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481660);
  }
  return result;
}

unint64_t sub_1001A3A30()
{
  unint64_t result = qword_100481668;
  if (!qword_100481668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481668);
  }
  return result;
}

unint64_t sub_1001A3A88()
{
  unint64_t result = qword_100481670;
  if (!qword_100481670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481670);
  }
  return result;
}

unint64_t sub_1001A3AE0()
{
  unint64_t result = qword_100481678;
  if (!qword_100481678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481678);
  }
  return result;
}

unint64_t sub_1001A3B38()
{
  unint64_t result = qword_100481680;
  if (!qword_100481680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481680);
  }
  return result;
}

unint64_t sub_1001A3B90()
{
  unint64_t result = qword_100481688;
  if (!qword_100481688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481688);
  }
  return result;
}

unint64_t sub_1001A3BE8()
{
  unint64_t result = qword_100481690;
  if (!qword_100481690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481690);
  }
  return result;
}

unint64_t sub_1001A3C40()
{
  unint64_t result = qword_100481698;
  if (!qword_100481698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481698);
  }
  return result;
}

unint64_t sub_1001A3C98()
{
  unint64_t result = qword_1004816A0;
  if (!qword_1004816A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004816A0);
  }
  return result;
}

unint64_t sub_1001A3CF0()
{
  unint64_t result = qword_1004816A8;
  if (!qword_1004816A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004816A8);
  }
  return result;
}

unint64_t sub_1001A3D48()
{
  unint64_t result = qword_1004816B0;
  if (!qword_1004816B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004816B0);
  }
  return result;
}

unint64_t sub_1001A3DA0()
{
  unint64_t result = qword_1004816B8;
  if (!qword_1004816B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004816B8);
  }
  return result;
}

unint64_t sub_1001A3DF8()
{
  unint64_t result = qword_1004816C0;
  if (!qword_1004816C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004816C0);
  }
  return result;
}

unint64_t sub_1001A3E50()
{
  unint64_t result = qword_1004816C8;
  if (!qword_1004816C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004816C8);
  }
  return result;
}

unint64_t sub_1001A3EA8()
{
  unint64_t result = qword_1004816D0;
  if (!qword_1004816D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004816D0);
  }
  return result;
}

unint64_t sub_1001A3F00()
{
  unint64_t result = qword_1004816D8;
  if (!qword_1004816D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004816D8);
  }
  return result;
}

unint64_t sub_1001A3F58()
{
  unint64_t result = qword_1004816E0;
  if (!qword_1004816E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004816E0);
  }
  return result;
}

unint64_t sub_1001A3FB0()
{
  unint64_t result = qword_1004816E8;
  if (!qword_1004816E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004816E8);
  }
  return result;
}

unint64_t sub_1001A4008()
{
  unint64_t result = qword_1004816F0;
  if (!qword_1004816F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004816F0);
  }
  return result;
}

unint64_t sub_1001A4060()
{
  unint64_t result = qword_1004816F8;
  if (!qword_1004816F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004816F8);
  }
  return result;
}

unint64_t sub_1001A40B8()
{
  unint64_t result = qword_100481700;
  if (!qword_100481700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481700);
  }
  return result;
}

uint64_t sub_1001A410C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F43656D617266 && a2 == 0xEC0000006C6F7274;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7265766965636572 && a2 == 0xEF73736572646441 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001003DE2D0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001003DE2F0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x65636E6575716573 && a2 == 0xEF6C6F72746E6F43)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_1001A43E0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E496E6F63616562 && a2 == 0xEE006C6176726574 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x696C696261706163 && a2 == 0xEC00000073656974 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x73746E656D656C65 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_1001A45E4(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x80000001003DE310
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x72616C616373 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001003DE330)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1001A472C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x666E6F43646E6573 && a2 == 0xEB000000006D7269;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D7269666E6F63 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1001A4838(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6F43737574617473 && a2 == 0xEA00000000006564;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x62617061436E7372 && a2 == 0xED00007974696C69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001003DE350 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD00000000000002BLL && a2 == 0x80000001003DE370 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7053726F646E6576 && a2 == 0xEE00636966696365)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_1001A4AA0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6F43737574617473 && a2 == 0xEA00000000006564;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000002BLL && a2 == 0x80000001003DE370)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unint64_t sub_1001A4B9C()
{
  unint64_t result = qword_100481708;
  if (!qword_100481708)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481708);
  }
  return result;
}

unint64_t sub_1001A4BF0()
{
  unint64_t result = qword_100481710;
  if (!qword_100481710)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481710);
  }
  return result;
}

unint64_t sub_1001A4C44()
{
  unint64_t result = qword_100481718;
  if (!qword_100481718)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481718);
  }
  return result;
}

unint64_t sub_1001A4C98()
{
  unint64_t result = qword_100481720;
  if (!qword_100481720)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481720);
  }
  return result;
}

unint64_t sub_1001A4CEC()
{
  unint64_t result = qword_100481728;
  if (!qword_100481728)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481728);
  }
  return result;
}

unint64_t sub_1001A4D40()
{
  unint64_t result = qword_100481730;
  if (!qword_100481730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481730);
  }
  return result;
}

double sub_1001A4D94(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0xFFFFFFFD0000;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 145) = 0u;
  return result;
}

double sub_1001A4DCC(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0xFFFFFFFE0000;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 145) = 0u;
  return result;
}

double sub_1001A4E00(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0xFFFFFFFF0000;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 145) = 0u;
  return result;
}

uint64_t sub_1001A4E34(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 88) & 0xC000000000000001 | 0x3000000000000000;
  *(void *)(result + 32) = *(unsigned __int16 *)(result + 32);
  *(void *)(result + 88) = v1;
  return result;
}

unint64_t sub_1001A4E50()
{
  unint64_t result = qword_100481738;
  if (!qword_100481738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481738);
  }
  return result;
}

uint64_t sub_1001A4EA4(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 88) & 0xC000000000000001 | 0x2000000000000000;
  *(void *)(result + 32) = *(unsigned __int16 *)(result + 32);
  *(void *)(result + 88) = v1;
  return result;
}

unint64_t sub_1001A4EC0()
{
  unint64_t result = qword_100481740;
  if (!qword_100481740)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481740);
  }
  return result;
}

uint64_t sub_1001A4F14(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 88) & 0xC000000000000001 | 0x1000000000000000;
  *(void *)(result + 32) = *(unsigned __int16 *)(result + 32);
  *(void *)(result + 88) = v1;
  return result;
}

unint64_t sub_1001A4F30()
{
  unint64_t result = qword_100481748;
  if (!qword_100481748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481748);
  }
  return result;
}

uint64_t sub_1001A4F84(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 88) & 0xC000000000000001;
  *(void *)(result + 32) = *(unsigned __int16 *)(result + 32);
  *(void *)(result + 88) = v1;
  return result;
}

unint64_t sub_1001A4F9C()
{
  unint64_t result = qword_100481750;
  if (!qword_100481750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481750);
  }
  return result;
}

unint64_t sub_1001A4FF0()
{
  unint64_t result = qword_100481758;
  if (!qword_100481758)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481758);
  }
  return result;
}

uint64_t sub_1001A5044(uint64_t result)
{
  uint64_t v1 = *(unsigned __int16 *)(result + 32);
  unint64_t v2 = *(void *)(result + 88) & 1 | 0xC000000000000000;
  *(void *)result &= 0x3FFFFF003FuLL;
  *(void *)(result + 32) = v1;
  *(void *)(result + 88) = v2;
  return result;
}

unint64_t sub_1001A5070()
{
  unint64_t result = qword_100481760;
  if (!qword_100481760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481760);
  }
  return result;
}

uint64_t sub_1001A50C4(uint64_t result)
{
  uint64_t v1 = *(unsigned __int16 *)(result + 32);
  unint64_t v2 = *(void *)(result + 88) & 1 | 0x8000000000000000;
  *(void *)result &= 0x3FFFFF003FuLL;
  *(void *)(result + 32) = v1;
  *(void *)(result + 88) = v2;
  return result;
}

unint64_t sub_1001A50F0()
{
  unint64_t result = qword_100481768;
  if (!qword_100481768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481768);
  }
  return result;
}

uint64_t sub_1001A5144(uint64_t result)
{
  uint64_t v1 = *(unsigned __int16 *)(result + 32);
  uint64_t v2 = *(void *)(result + 88) & 1 | 0x4000000000000000;
  *(void *)result &= 0x3FFFFF003FuLL;
  *(void *)(result + 32) = v1;
  *(void *)(result + 88) = v2;
  return result;
}

unint64_t sub_1001A5170()
{
  unint64_t result = qword_100481770;
  if (!qword_100481770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481770);
  }
  return result;
}

uint64_t sub_1001A51C4(uint64_t result)
{
  uint64_t v1 = *(unsigned __int16 *)(result + 32);
  uint64_t v2 = *(void *)(result + 88) & 1;
  *(void *)result &= 0x3FFFFF003FuLL;
  *(void *)(result + 32) = v1;
  *(void *)(result + 88) = v2;
  return result;
}

unint64_t sub_1001A51EC()
{
  unint64_t result = qword_100481780;
  if (!qword_100481780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481780);
  }
  return result;
}

unint64_t sub_1001A5240()
{
  unint64_t result = qword_100481790;
  if (!qword_100481790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481790);
  }
  return result;
}

unint64_t sub_1001A5294()
{
  unint64_t result = qword_100481798;
  if (!qword_100481798)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481798);
  }
  return result;
}

unint64_t sub_1001A52E8()
{
  unint64_t result = qword_1004817A0;
  if (!qword_1004817A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004817A0);
  }
  return result;
}

uint64_t sub_1001A533C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 72);
  unint64_t v4 = *(void *)(a1 + 80);
  uint64_t v5 = *(void *)(a1 + 96);
  unint64_t v6 = *(void *)(a1 + 104);
  uint64_t v7 = *(void *)(a1 + 112);
  unint64_t v13 = *(void *)(a1 + 128);
  unint64_t v14 = *(void *)(a1 + 120);
  uint64_t v11 = *(void *)(a1 + 144);
  uint64_t v12 = *(void *)(a1 + 136);
  unint64_t v10 = *(void *)(a1 + 152);
  char v9 = *(unsigned char *)(a1 + 160);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10006E0D8(v2, v3, v4);
  sub_10000C95C(v5, v6);
  sub_10006E0F4(v7, v14, v13, v12, v11, v10, v9);
  return a1;
}

unint64_t sub_1001A5418()
{
  unint64_t result = qword_1004817C0;
  if (!qword_1004817C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004817C0);
  }
  return result;
}

uint64_t sub_1001A546C(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100014434(&qword_1004814B0);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001A54DC()
{
  unint64_t result = qword_1004817E0;
  if (!qword_1004817E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004817E0);
  }
  return result;
}

unint64_t sub_1001A5530()
{
  unint64_t result = qword_1004817E8;
  if (!qword_1004817E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004817E8);
  }
  return result;
}

unint64_t sub_1001A5584()
{
  unint64_t result = qword_1004817F0;
  if (!qword_1004817F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004817F0);
  }
  return result;
}

unint64_t sub_1001A55D8()
{
  unint64_t result = qword_1004817F8;
  if (!qword_1004817F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004817F8);
  }
  return result;
}

uint64_t sub_1001A5654(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    return swift_bridgeObjectRelease();
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      uint64_t v3 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v3 = _StringObject.sharedUTF8.getter();
    }
    sub_10024C530(v3, v4, (uint64_t (*)(void))sub_1001A7DD8);
    return swift_bridgeObjectRelease();
  }
  v6[0] = a1;
  v6[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  sub_1001A5E2C(v6);
  return swift_bridgeObjectRelease();
}

uint64_t NANServiceName.hash.getter()
{
  uint64_t v0 = type metadata accessor for SHA256Digest();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for SHA256();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  SHA256.init()();
  Swift::String v8 = String.lowercased()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1001A5654(v8._countAndFlagsBits, (uint64_t)v8._object);
  swift_bridgeObjectRelease();
  SHA256.finalize()();
  SHA256Digest.withUnsafeBytes<A>(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t v9 = v11[1];
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v9;
}

void *NANServiceName.Hash.size.unsafeMutableAddressor()
{
  return &static NANServiceName.Hash.size;
}

uint64_t static NANServiceName.== infix(_:_:)()
{
  Swift::String v0 = String.lowercased()();
  Swift::String v1 = String.lowercased()();
  if (v0._countAndFlagsBits == v1._countAndFlagsBits && v0._object == v1._object) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1001A5A34(uint64_t (*a1)(void *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  v17[3] = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) != 0) {
    uint64_t v5 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v5)
  {
    uint64_t v16 = a4 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain();
    uint64_t v9 = 0;
    while (1)
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        int v10 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          v17[0] = a3;
          v17[1] = v16;
        }
        else if ((a3 & 0x1000000000000000) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }
        int v10 = _decodeScalar(_:startingAt:)();
      }
      uint64_t v12 = v11;
      LODWORD(v17[0]) = v10;
      char v13 = a1(v17);
      if (v4)
      {
        swift_bridgeObjectRelease();
        return v14 & 1;
      }
      if ((v13 & 1) == 0) {
        break;
      }
      v9 += v12;
      if (v9 >= v5)
      {
        swift_bridgeObjectRelease();
        char v14 = 1;
        return v14 & 1;
      }
    }
    swift_bridgeObjectRelease();
    char v14 = 0;
  }
  else
  {
    char v14 = 1;
  }
  return v14 & 1;
}

Swift::Bool __swiftcall NANServiceName.contains(_:)(CoreP2P::NANServiceName a1)
{
  return StringProtocol.localizedCaseInsensitiveContains<A>(_:)() & 1;
}

uint64_t NANServiceName.hash(into:)()
{
  String.lowercased()();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t static NANServiceName.Hash.size.getter()
{
  return 6;
}

uint64_t NANServiceName.Hash.init(serviceName:)()
{
  uint64_t v0 = type metadata accessor for SHA256Digest();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for SHA256();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  SHA256.init()();
  Swift::String v8 = String.lowercased()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1001A5654(v8._countAndFlagsBits, (uint64_t)v8._object);
  swift_bridgeObjectRelease();
  SHA256.finalize()();
  SHA256Digest.withUnsafeBytes<A>(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t v9 = v11[1];
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v9;
}

uint64_t sub_1001A5E2C(unsigned char *a1)
{
  uint64_t v3 = String.count.getter();
  uint64_t v4 = sub_100260F60(a1, v3);
  uint64_t v6 = v4;
  unint64_t v7 = v5;
  switch(v5 >> 62)
  {
    case 1uLL:
      if (v4 >> 32 < (int)v4) {
        __break(1u);
      }
      sub_100013D44(v4, v5);
      sub_1001A7444((int)v6, v6 >> 32);
      goto LABEL_7;
    case 2uLL:
      uint64_t v8 = *(void *)(v4 + 16);
      uint64_t v9 = *(void *)(v4 + 24);
      sub_100013D44(v4, v5);
      swift_retain();
      swift_retain();
      sub_1001A7444(v8, v9);
      if (v1)
      {
        swift_release();
        swift_release();
        __break(1u);
        JUMPOUT(0x1001A6108);
      }
      swift_release();
      swift_release();
LABEL_7:
      sub_10000C970(v6, v7);
      uint64_t result = sub_10000C970(v6, v7);
      break;
    default:
      type metadata accessor for SHA256();
      sub_1001A7DF8(&qword_10047DF50, (void (*)(uint64_t))&type metadata accessor for SHA256);
      dispatch thunk of HashFunction.update(bufferPointer:)();
      sub_10000C970(v6, v7);
      uint64_t result = sub_10000C970(v6, v7);
      break;
  }
  return result;
}

uint64_t sub_1001A6118@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = sub_100010BCC(&qword_10047DC88);
  v11[3] = v6;
  v11[4] = sub_10006E400();
  uint64_t v7 = swift_allocObject();
  v11[0] = v7;
  *(_OWORD *)(v7 + 16) = xmmword_1003C46B0;
  *(void *)(v7 + 32) = a1;
  *(void *)(v7 + 40) = a2;
  sub_1000369C4(v11, v6);
  Slice<>.withUnsafeBytes<A>(_:)();
  uint64_t result = sub_100010754((uint64_t)v11);
  *a3 = v9;
  a3[1] = v10;
  return result;
}

uint64_t NANServiceName.Hash.init(_:_:_:_:_:_:)(char a1, char a2, char a3, char a4, char a5, char a6)
{
  sub_100010BCC(&qword_10047BEF8);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1003B2F40;
  *(unsigned char *)(v12 + 32) = a1;
  *(unsigned char *)(v12 + 33) = a2;
  *(unsigned char *)(v12 + 34) = a3;
  *(unsigned char *)(v12 + 35) = a4;
  *(unsigned char *)(v12 + 36) = a5;
  *(unsigned char *)(v12 + 37) = a6;
  uint64_t v13 = sub_1001265EC(v12);
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t NANServiceName.Hash.description.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Data.Iterator();
  uint64_t v17 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(a2 >> 62)
  {
    case 1uLL:
    case 2uLL:
      sub_100013D44(a1, a2);
      sub_100013D44(a1, a2);
      break;
    default:
      break;
  }
  Data.Iterator.init(_:at:)();
  sub_10000C970(a1, a2);
  sub_1001A7DF8((unint64_t *)&qword_10047DC30, (void (*)(uint64_t))&type metadata accessor for Data.Iterator);
  dispatch thunk of IteratorProtocol.next()();
  if (v22)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0xE000000000000000;
    long long v18 = xmmword_1003B2450;
    do
    {
      char v9 = v21;
      sub_100010BCC((uint64_t *)&unk_10047CF90);
      uint64_t v10 = swift_allocObject();
      *(_OWORD *)(v10 + 16) = v18;
      *(void *)(v10 + 56) = &type metadata for UInt8;
      *(void *)(v10 + 64) = &protocol witness table for UInt8;
      *(unsigned char *)(v10 + 32) = v9;
      uint64_t v11 = String.init(format:_:)();
      uint64_t v13 = v12;
      uint64_t v19 = v7;
      unint64_t v20 = v8;
      swift_bridgeObjectRetain();
      v14._countAndFlagsBits = v11;
      v14._object = v13;
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v7 = v19;
      unint64_t v8 = v20;
      dispatch thunk of IteratorProtocol.next()();
    }
    while (v22 != 1);
  }
  (*(void (**)(char *, uint64_t))(v17 + 8))(v6, v4);
  return v7;
}

uint64_t NANServiceName.Hash.init(from:)(void *a1)
{
  return sub_1001A77CC(a1);
}

uint64_t sub_1001A6548(uint64_t a1)
{
  unint64_t v2 = sub_1001A7924();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001A6584(uint64_t a1)
{
  unint64_t v2 = sub_1001A7924();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANServiceName.Hash.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100010BCC(&qword_100481800);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  char v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_1001A7924();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[0] = a2;
  v11[1] = a3;
  sub_1000742DC();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1001A6710@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1001A77CC(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1001A673C(void *a1)
{
  return NANServiceName.Hash.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_1001A6758()
{
  return NANServiceName.Hash.description.getter(*(void *)v0, *(void *)(v0 + 8));
}

uint64_t sub_1001A6760()
{
  return 0x676E69727473;
}

uint64_t sub_1001A6774@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x676E69727473 && a2 == 0xE600000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1001A6804(uint64_t a1)
{
  unint64_t v2 = sub_1001A7978();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001A6840(uint64_t a1)
{
  unint64_t v2 = sub_1001A7978();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANServiceName.encode(to:)(void *a1)
{
  uint64_t v2 = sub_100010BCC(&qword_100481810);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_1001A7978();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int NANServiceName.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t NANServiceName.init(from:)(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_100481820);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (uint64_t)sub_1000369C4(a1, a1[3]);
  sub_1001A7978();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  sub_100010754((uint64_t)a1);
  return v7;
}

Swift::Int sub_1001A6B7C()
{
  return Hasher._finalize()();
}

uint64_t sub_1001A6BE4()
{
  String.lowercased()();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001A6C38()
{
  return Hasher._finalize()();
}

uint64_t sub_1001A6C9C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100010BCC(&qword_100481820);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_1001A7978();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100010754((uint64_t)a1);
  }
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = sub_100010754((uint64_t)a1);
  *a2 = v9;
  a2[1] = v11;
  return result;
}

uint64_t sub_1001A6E14(void *a1)
{
  uint64_t v2 = sub_100010BCC(&qword_100481810);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_1001A7978();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_1001A6F4C()
{
  Swift::String v0 = String.lowercased()();
  Swift::String v1 = String.lowercased()();
  if (v0._countAndFlagsBits == v1._countAndFlagsBits && v0._object == v1._object) {
    char v3 = 1;
  }
  else {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t NANServiceName.description.getter(uint64_t a1, void *a2)
{
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 39;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return 39;
}

uint64_t NANServiceName.customMirror.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100480650);
  __chkstk_darwin();
  uint64_t v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[2] = a1;
  v12[3] = a2;
  v12[1] = _swiftEmptyArrayStorage;
  uint64_t v10 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for Mirror.AncestorRepresentation.generated(_:), v4);
  swift_bridgeObjectRetain();
  sub_100010BCC(&qword_10047DC10);
  sub_100074578();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t sub_1001A7218()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (void *)v0[1];
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 39;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 39;
}

uint64_t sub_1001A7288()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  Swift::String v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100480650);
  __chkstk_darwin();
  uint64_t v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v0;
  uint64_t v8 = v0[1];
  void v11[2] = v7;
  v11[3] = v8;
  v11[1] = _swiftEmptyArrayStorage;
  uint64_t v9 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v6, 1, 1, v9);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for Mirror.AncestorRepresentation.generated(_:), v1);
  swift_bridgeObjectRetain();
  sub_100010BCC(&qword_10047DC10);
  sub_100074578();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t sub_1001A7444(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      type metadata accessor for SHA256();
      sub_1001A7DF8(&qword_10047DF50, (void (*)(uint64_t))&type metadata accessor for SHA256);
      return dispatch thunk of HashFunction.update(bufferPointer:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t _s7CoreP2P14NANServiceNameVyACSgSScfC_0(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for CharacterSet();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  uint64_t v9 = &v18[-v8];
  __chkstk_darwin();
  uint64_t v11 = &v18[-v10];
  __chkstk_darwin();
  uint64_t v13 = &v18[-v12];
  if ((a2 & 0x2000000000000000) != 0) {
    unint64_t v14 = HIBYTE(a2) & 0xF;
  }
  else {
    unint64_t v14 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v14) {
    goto LABEL_9;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    if (String.UTF8View._foreignCount()() > 254) {
      goto LABEL_9;
    }
    if (String.UTF8View._foreignCount()() != 1) {
      return a1;
    }
LABEL_8:
    static CharacterSet.letters.getter();
    static CharacterSet.decimalDigits.getter();
    CharacterSet.union(_:)();
    unint64_t v15 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
    v15(v7, v4);
    v15(v9, v4);
    CharacterSet.init(charactersIn:)();
    CharacterSet.union(_:)();
    v15(v9, v4);
    v15(v11, v4);
    __chkstk_darwin();
    *(void *)&v18[-16] = v13;
    swift_bridgeObjectRetain();
    char v16 = sub_1001A5A34((uint64_t (*)(void *))sub_1001A7D94, (uint64_t)&v18[-32], a1, a2);
    swift_bridgeObjectRelease();
    v15(v13, v4);
    if ((v16 & 1) == 0) {
      goto LABEL_9;
    }
    return a1;
  }
  if (v14 >= 0xFF)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (v14 == 1) {
    goto LABEL_8;
  }
  return a1;
}

uint64_t sub_1001A77CC(void *a1)
{
  uint64_t v3 = a1[4];
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v1)
  {
    sub_100010754((uint64_t)a1);
  }
  else
  {
    uint64_t v4 = v12;
    sub_100039448((uint64_t)v11, v12);
    uint64_t v5 = UnkeyedDecodingContainer.decodeData(with:)(6, v4);
    unint64_t v8 = v6;
    uint64_t v9 = v5;
    switch(v6 >> 62)
    {
      case 1uLL:
        uint64_t v5 = (int)v5;
        uint64_t v10 = v9 >> 32;
        goto LABEL_8;
      case 2uLL:
        uint64_t v5 = *(void *)(v5 + 16);
        uint64_t v10 = *(void *)(v9 + 24);
LABEL_8:
        if (v10 < v5)
        {
          __break(1u);
          JUMPOUT(0x1001A7914);
        }
        return result;
      default:
        break;
    }
    uint64_t v3 = Data.subdata(in:)();
    sub_10000C970(v9, v8);
    sub_100010754((uint64_t)v11);
    sub_100010754((uint64_t)a1);
  }
  return v3;
}

unint64_t sub_1001A7924()
{
  unint64_t result = qword_100481808;
  if (!qword_100481808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481808);
  }
  return result;
}

unint64_t sub_1001A7978()
{
  unint64_t result = qword_100481818;
  if (!qword_100481818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481818);
  }
  return result;
}

unint64_t sub_1001A79D0()
{
  unint64_t result = qword_100481828;
  if (!qword_100481828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481828);
  }
  return result;
}

unint64_t sub_1001A7A28()
{
  unint64_t result = qword_100481830;
  if (!qword_100481830)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481830);
  }
  return result;
}

ValueMetadata *type metadata accessor for NANServiceName()
{
  return &type metadata for NANServiceName;
}

ValueMetadata *type metadata accessor for NANServiceName.Hash()
{
  return &type metadata for NANServiceName.Hash;
}

ValueMetadata *type metadata accessor for NANServiceName.CodingKeys()
{
  return &type metadata for NANServiceName.CodingKeys;
}

unsigned char *_s7CoreP2P14NANServiceNameV10CodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1001A7B4CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for NANServiceName.Hash.CodingKeys()
{
  return &type metadata for NANServiceName.Hash.CodingKeys;
}

unint64_t sub_1001A7B88()
{
  unint64_t result = qword_100481838;
  if (!qword_100481838)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481838);
  }
  return result;
}

unint64_t sub_1001A7BE0()
{
  unint64_t result = qword_100481840;
  if (!qword_100481840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481840);
  }
  return result;
}

unint64_t sub_1001A7C38()
{
  unint64_t result = qword_100481848;
  if (!qword_100481848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481848);
  }
  return result;
}

unint64_t sub_1001A7C90()
{
  unint64_t result = qword_100481850;
  if (!qword_100481850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481850);
  }
  return result;
}

unint64_t sub_1001A7CE8()
{
  unint64_t result = qword_100481858;
  if (!qword_100481858)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481858);
  }
  return result;
}

unint64_t sub_1001A7D40()
{
  unint64_t result = qword_100481860;
  if (!qword_100481860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481860);
  }
  return result;
}

uint64_t sub_1001A7D94()
{
  return CharacterSet.contains(_:)() & 1;
}

uint64_t sub_1001A7DC8()
{
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001A7DD8(unsigned char *a1)
{
  return sub_1001A5E2C(a1);
}

uint64_t sub_1001A7DF8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001A7E40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = __chkstk_darwin(a1);
  unint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v16(v12, v12 + *(void *)(*(void *)(v15 - 8) + 64), v14);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  }
  return result;
}

double BinaryEncoder.__allocating_init(userInfo:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v2 + 16) = xmmword_1003B2440;
  *(void *)(v2 + 32) = a1;
  return result;
}

uint64_t static BinaryEncoder.encode<A>(_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v7 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for BinaryEncoder();
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1003B2440;
  uint64_t v9 = v8 + 16;
  *(void *)(v8 + 32) = v7;
  BinaryEncoder.encode<A>(_:)(a1, a2, a3);
  if (!v3)
  {
    swift_beginAccess();
    uint64_t v9 = *(void *)(v8 + 16);
    sub_100013D44(v9, *(void *)(v8 + 24));
  }
  swift_release();
  return v9;
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;

  unint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(a2 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v10, a2);
    uint64_t v15 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for BinaryEncoder();
    char v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_1003B2440;
    *(void *)(v16 + 32) = v15;
    uint64_t v17 = a3;
    unint64_t v14 = v16;
    BinaryEncoder.encode<A>(_:)((uint64_t)v13, a2, v17);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, a2);
    if (!v3)
    {
      swift_beginAccess();
      unint64_t v14 = *(void *)(v16 + 16);
      sub_100013D44(v14, *(void *)(v16 + 24));
    }
    swift_release();
  }
  return v14;
}

uint64_t sub_1001A82CC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = *a2;
  swift_beginAccess();
  uint64_t v5 = *(void *)(v4 + 16);
  unint64_t v6 = *(void *)(v4 + 24);
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v3;
  sub_100013D44(v2, v3);
  return sub_10000C970(v5, v6);
}

uint64_t BinaryEncoder.data.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 16);
  sub_100013D44(v1, *(void *)(v0 + 24));
  return v1;
}

uint64_t BinaryEncoder.userInfo.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t BinaryEncoder.userInfo.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 32) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*BinaryEncoder.userInfo.modify())()
{
  return j__swift_endAccess;
}

uint64_t BinaryEncoder.init(userInfo:)(uint64_t a1)
{
  *(_OWORD *)(v1 + 16) = xmmword_1003B2440;
  *(void *)(v1 + 32) = a1;
  return v1;
}

Swift::Void __swiftcall BinaryEncoder.reserveCapacity(_:)(Swift::Int a1)
{
}

uint64_t sub_1001A84C8@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  a2[3] = type metadata accessor for BinaryEncoder();
  a2[4] = sub_1001AA5D4();
  *a2 = a1;

  return swift_retain();
}

uint64_t sub_1001A8514@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  a2[3] = type metadata accessor for BinaryEncoder();
  a2[4] = sub_1001AA5D4();
  *a2 = a1;

  return swift_retain();
}

uint64_t sub_1001A8560()
{
  return BinaryEncoder.container<A>(keyedBy:)();
}

uint64_t sub_1001A858C@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  a2[3] = &type metadata for BinaryEncoder.UnkeyedContainer;
  a2[4] = sub_100088B84();
  *a2 = a1;

  return swift_retain();
}

uint64_t sub_1001A85DC(char a1, uint64_t a2, uint64_t a3)
{
  char v5 = a1;
  return sub_1001AA6B4((uint64_t)&v5, *v3, *(void *)(a3 + 16), (uint64_t)&type metadata for Bool, *(void *)(a3 + 24), (unint64_t)&protocol witness table for Bool);
}

uint64_t sub_1001A8620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = a1;
  v6[1] = a2;
  return sub_1001AA6B4((uint64_t)v6, *v4, *(void *)(a4 + 16), (uint64_t)&type metadata for String, *(void *)(a4 + 24), (unint64_t)&protocol witness table for String);
}

uint64_t sub_1001A8660(double a1, uint64_t a2, uint64_t a3)
{
  double v5 = a1;
  return sub_1001AA6B4((uint64_t)&v5, *v3, *(void *)(a3 + 16), (uint64_t)&type metadata for Double, *(void *)(a3 + 24), (unint64_t)&protocol witness table for Double);
}

uint64_t sub_1001A86A4(float a1, uint64_t a2, uint64_t a3)
{
  float v5 = a1;
  return sub_1001AA6B4((uint64_t)&v5, *v3, *(void *)(a3 + 16), (uint64_t)&type metadata for Float, *(void *)(a3 + 24), (unint64_t)&protocol witness table for Float);
}

uint64_t sub_1001A86E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001A8AC0(a1, a2, a3, a4, (void (*)(void))sub_1000E4CC4, (uint64_t)&type metadata for Int);
}

uint64_t sub_1001A8724(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001A88A4(a1, a2, a3, a4, (void (*)(void))sub_1000E4C70, (uint64_t)&type metadata for Int8);
}

uint64_t sub_1001A8760(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001A8958(a1, a2, a3, a4, (void (*)(void))sub_1000E4C1C, (uint64_t)&type metadata for Int16);
}

uint64_t sub_1001A879C(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001A8A0C(a1, a2, a3, a4, (void (*)(void))sub_1000E4BC8, (uint64_t)&type metadata for Int32);
}

uint64_t sub_1001A87D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001A8AC0(a1, a2, a3, a4, (void (*)(void))sub_1000E4B74, (uint64_t)&type metadata for Int64);
}

uint64_t sub_1001A8814()
{
  return KeyedEncodingContainerProtocol.encode(_:forKey:)();
}

uint64_t sub_1001A882C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001A8AC0(a1, a2, a3, a4, (void (*)(void))sub_1000E4B20, (uint64_t)&type metadata for UInt);
}

uint64_t sub_1001A8868(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001A88A4(a1, a2, a3, a4, (void (*)(void))sub_1000E4ACC, (uint64_t)&type metadata for UInt8);
}

uint64_t sub_1001A88A4(char a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  char v11 = a1;
  uint64_t v8 = *v6;
  uint64_t v9 = *(void *)(a3 + 16);
  a5();
  return sub_1001AA688((uint64_t)&v11, v8, v9, a6);
}

uint64_t sub_1001A891C(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001A8958(a1, a2, a3, a4, (void (*)(void))sub_1000E4A78, (uint64_t)&type metadata for UInt16);
}

uint64_t sub_1001A8958(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  __int16 v11 = a1;
  uint64_t v8 = *v6;
  uint64_t v9 = *(void *)(a3 + 16);
  a5();
  return sub_1001AA688((uint64_t)&v11, v8, v9, a6);
}

uint64_t sub_1001A89D0(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001A8A0C(a1, a2, a3, a4, (void (*)(void))sub_1000E4A24, (uint64_t)&type metadata for UInt32);
}

uint64_t sub_1001A8A0C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  int v11 = a1;
  uint64_t v8 = *v6;
  uint64_t v9 = *(void *)(a3 + 16);
  a5();
  return sub_1001AA688((uint64_t)&v11, v8, v9, a6);
}

uint64_t sub_1001A8A84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001A8AC0(a1, a2, a3, a4, (void (*)(void))sub_1000E49D0, (uint64_t)&type metadata for UInt64);
}

uint64_t sub_1001A8AC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  uint64_t v11 = a1;
  uint64_t v8 = *v6;
  uint64_t v9 = *(void *)(a3 + 16);
  a5();
  return sub_1001AA688((uint64_t)&v11, v8, v9, a6);
}

uint64_t sub_1001A8B38()
{
  return KeyedEncodingContainerProtocol.encode(_:forKey:)();
}

uint64_t sub_1001A8B50(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  return sub_1001AA6B4(a1, *v5, *(void *)(a5 + 16), a3, *(void *)(a5 + 24), a4);
}

uint64_t sub_1001A8B78()
{
  return KeyedEncodingContainerProtocol.encodeConditional<A>(_:forKey:)();
}

uint64_t sub_1001A8BA4()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

uint64_t sub_1001A8BBC()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

uint64_t sub_1001A8BD4()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

uint64_t sub_1001A8BF0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001A8DE4(a1, a2, a3, a4, (uint64_t (*)(uint64_t))&KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

uint64_t sub_1001A8C1C()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

uint64_t sub_1001A8C38(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001A8D3C(a1, a2, a3, a4, (uint64_t (*)(void))&KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

uint64_t sub_1001A8C64(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001A8D90(a1, a2, a3, a4, (uint64_t (*)(void))&KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

uint64_t sub_1001A8C90(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001A8DE4(a1, a2, a3, a4, (uint64_t (*)(uint64_t))&KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

uint64_t sub_1001A8CBC()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

uint64_t sub_1001A8CD8()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

uint64_t sub_1001A8CF4()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

uint64_t sub_1001A8D10(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001A8D3C(a1, a2, a3, a4, (uint64_t (*)(void))&KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

uint64_t sub_1001A8D3C(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5(a1 & 0x1FF);
}

uint64_t sub_1001A8D64(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001A8D90(a1, a2, a3, a4, (uint64_t (*)(void))&KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

uint64_t sub_1001A8D90(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5(a1 & 0x1FFFF);
}

uint64_t sub_1001A8DB8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001A8DE4(a1, a2, a3, a4, (uint64_t (*)(uint64_t))&KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

uint64_t sub_1001A8DE4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  return a5(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t sub_1001A8E14()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

uint64_t sub_1001A8E30()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

uint64_t sub_1001A8E4C()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent<A>(_:forKey:)();
}

uint64_t sub_1001A8E78()
{
  return sub_1001A8560();
}

uint64_t sub_1001A8E90@<X0>(void *a1@<X8>)
{
  return sub_1001A858C(*v1, a1);
}

uint64_t sub_1001A8EA0@<X0>(void *a1@<X8>)
{
  return sub_1001A8514(*v1, a1);
}

uint64_t sub_1001A8EB0@<X0>(void *a1@<X8>)
{
  return sub_1001A84C8(*v1, a1);
}

uint64_t sub_1001A8EC0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return BinaryEncoder.encode<A>(_:)(a1, a3, a4);
}

uint64_t sub_1001A8EEC()
{
  return BinaryEncoder.container<A>(keyedBy:)();
}

uint64_t sub_1001A8F18()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 24);
  uint64_t result = 0;
  switch(v3 >> 62)
  {
    case 1uLL:
      BOOL v5 = __OFSUB__(HIDWORD(v2), v2);
      int v6 = HIDWORD(v2) - v2;
      if (v5)
      {
        __break(1u);
LABEL_8:
        __break(1u);
        JUMPOUT(0x1001A8FB0);
      }
      return v6;
    case 2uLL:
      uint64_t v9 = v2 + 16;
      uint64_t v7 = *(void *)(v2 + 16);
      uint64_t v8 = *(void *)(v9 + 8);
      uint64_t result = v8 - v7;
      if (!__OFSUB__(v8, v7)) {
        return result;
      }
      goto LABEL_8;
    case 3uLL:
      return result;
    default:
      return BYTE6(v3);
  }
}

uint64_t sub_1001A8FC0()
{
  return sub_1001A95D4();
}

uint64_t sub_1001A8FD8()
{
  return sub_1001A9648();
}

uint64_t sub_1001A8FF0(double a1)
{
  return sub_1001A96D4(a1);
}

uint64_t sub_1001A903C()
{
  return sub_1001A978C();
}

uint64_t sub_1001A9054(uint64_t a1)
{
  return sub_1001A9A88(a1);
}

uint64_t sub_1001A90A0(char a1)
{
  return sub_1001A9860(a1);
}

uint64_t sub_1001A90EC(__int16 a1)
{
  return sub_1001A9918(a1);
}

uint64_t sub_1001A9138(int a1)
{
  return sub_1001A99D0(a1);
}

uint64_t sub_1001A9184()
{
  return SingleValueEncodingContainer<>.encode(_:)();
}

uint64_t sub_1001A91E4()
{
  return SingleValueEncodingContainer<>.encode(_:)();
}

uint64_t sub_1001A9244()
{
  return UnkeyedEncodingContainer.encodeConditional<A>(_:)();
}

uint64_t sub_1001A9270()
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

uint64_t sub_1001A929C()
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

uint64_t sub_1001A92C8()
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

uint64_t sub_1001A92F4()
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

uint64_t sub_1001A9320()
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

uint64_t sub_1001A934C()
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

uint64_t sub_1001A9378()
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

uint64_t sub_1001A93A4()
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

uint64_t sub_1001A93D0()
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

uint64_t sub_1001A93FC()
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

uint64_t sub_1001A9428()
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

uint64_t sub_1001A9454()
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

uint64_t sub_1001A9480()
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

uint64_t sub_1001A94AC()
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

uint64_t sub_1001A94D8()
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

uint64_t sub_1001A9504()
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

uint64_t sub_1001A9530()
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

uint64_t sub_1001A9564()
{
  return sub_1001A8EEC();
}

uint64_t sub_1001A9574@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *v3;
  a3[3] = a1;
  a3[4] = a2;
  *a3 = v4;
  return swift_retain();
}

uint64_t sub_1001A9588@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  a1[3] = type metadata accessor for BinaryEncoder();
  a1[4] = sub_1001AA5D4();
  *a1 = v3;

  return swift_retain();
}

uint64_t sub_1001A95D4()
{
  uint64_t v1 = *v0;
  v3[3] = type metadata accessor for BinaryEncoder();
  v3[4] = sub_1001AA5D4();
  v3[0] = v1;
  swift_retain();
  Bool.encode(to:)();
  return sub_100010754((uint64_t)v3);
}

uint64_t sub_1001A9648()
{
  uint64_t v1 = *v0;
  v3[3] = type metadata accessor for BinaryEncoder();
  v3[4] = sub_1001AA5D4();
  v3[0] = v1;
  swift_bridgeObjectRetain();
  swift_retain();
  String.encode(to:)();
  sub_100010754((uint64_t)v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001A96D4(double a1)
{
  double v5 = a1;
  uint64_t v1 = sub_10011A3BC((uint64_t)&v5, (uint64_t)v6);
  unint64_t v3 = v2;
  swift_beginAccess();
  sub_100125FAC(v1, v3);
  swift_endAccess();
  return sub_10000C970(v1, v3);
}

uint64_t sub_1001A978C()
{
  uint64_t v1 = *v0;
  v3[3] = type metadata accessor for BinaryEncoder();
  v3[4] = sub_1001AA5D4();
  v3[0] = v1;
  swift_retain();
  Float.encode(to:)();
  return sub_100010754((uint64_t)v3);
}

uint64_t sub_1001A9800()
{
  return SingleValueEncodingContainer<>.encode(_:)();
}

uint64_t sub_1001A9860(char a1)
{
  char v5 = a1;
  uint64_t v1 = sub_10011A3BC((uint64_t)&v5, (uint64_t)v6);
  unint64_t v3 = v2;
  swift_beginAccess();
  sub_100125FAC(v1, v3);
  swift_endAccess();
  return sub_10000C970(v1, v3);
}

uint64_t sub_1001A9918(__int16 a1)
{
  __int16 v5 = a1;
  uint64_t v1 = sub_10011A3BC((uint64_t)&v5, (uint64_t)v6);
  unint64_t v3 = v2;
  swift_beginAccess();
  sub_100125FAC(v1, v3);
  swift_endAccess();
  return sub_10000C970(v1, v3);
}

uint64_t sub_1001A99D0(int a1)
{
  int v5 = a1;
  uint64_t v1 = sub_10011A3BC((uint64_t)&v5, (uint64_t)v6);
  unint64_t v3 = v2;
  swift_beginAccess();
  sub_100125FAC(v1, v3);
  swift_endAccess();
  return sub_10000C970(v1, v3);
}

uint64_t sub_1001A9A88(uint64_t a1)
{
  uint64_t v5 = a1;
  uint64_t v1 = sub_10011A3BC((uint64_t)&v5, (uint64_t)v6);
  unint64_t v3 = v2;
  swift_beginAccess();
  sub_100125FAC(v1, v3);
  swift_endAccess();
  return sub_10000C970(v1, v3);
}

uint64_t sub_1001A9B40()
{
  return SingleValueEncodingContainer<>.encode(_:)();
}

uint64_t sub_1001A9BA0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_1001A8EC0(a1, *v3, a2, a3);
}

uint64_t BinaryEncoder.container<A>(keyedBy:)()
{
  return KeyedEncodingContainer.init<A>(_:)();
}

uint64_t BinaryEncoder.unkeyedContainer()@<X0>(void *a1@<X8>)
{
  return sub_1001A9C74((uint64_t (*)(void))sub_100088B84, a1);
}

uint64_t BinaryEncoder.singleValueContainer()@<X0>(void *a1@<X8>)
{
  return sub_1001A9C74((uint64_t (*)(void))sub_1001AA560, a1);
}

uint64_t sub_1001A9C74@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X8>)
{
  a2[3] = &type metadata for BinaryEncoder.UnkeyedContainer;
  a2[4] = a1();
  *a2 = v2;

  return swift_retain();
}

uint64_t BinaryEncoder.encode(_:)(uint64_t a1, unint64_t a2)
{
  return sub_10000C970(a1, a2);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> BinaryEncoder.encode(_:)(Swift::Double a1)
{
  Swift::Double v4 = a1;
  uint64_t v1 = sub_10011A3BC((uint64_t)&v4, (uint64_t)v5);
  unint64_t v3 = v2;
  swift_beginAccess();
  sub_100125FAC(v1, v3);
  swift_endAccess();
  sub_10000C970(v1, v3);
}

uint64_t BinaryEncoder.encode<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  __chkstk_darwin();
  int v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of FixedWidthInteger.littleEndian.getter();
  sub_1001A7E40((uint64_t)v6, (uint64_t)sub_1001AA5B4, v2, a2, (uint64_t)&type metadata for Never, (uint64_t)&type metadata for () + 8, (uint64_t)&protocol witness table for Never, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a2);
}

uint64_t sub_1001A9F48(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_10011A3BC(a1, a2);
  unint64_t v4 = v3;
  swift_beginAccess();
  sub_100125FAC(v2, v4);
  swift_endAccess();
  return sub_10000C970(v2, v4);
}

uint64_t BinaryEncoder.encode<A>(_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v36 = a3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v37 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v35 - v9;
  __chkstk_darwin();
  uint64_t v12 = (char *)&v35 - v11;
  uint64_t v13 = *(void *)(a2 - 8);
  __chkstk_darwin();
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, a2);
  if (swift_dynamicCast())
  {
    uint64_t v16 = v47[3];
    unint64_t v17 = v47[4];
    swift_beginAccess();
    sub_100013D44(v16, v17);
    sub_100125FAC(v16, v17);
    swift_endAccess();
    sub_10000C970(v16, v17);
    uint64_t v18 = v16;
    unint64_t v19 = v17;
  }
  else
  {
    uint64_t v35 = v3;
    if (!swift_dynamicCast())
    {
      v47[1] = type metadata accessor for BinaryEncoder();
      v47[2] = sub_1001AA5D4();
      uint64_t v38 = v35;
      swift_retain();
      dispatch thunk of Encodable.encode(to:)();
      sub_100010754((uint64_t)&v38);
      return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, a2);
    }
    uint64_t v20 = v37;
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v10, v12, v6);
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v8, v10, v6);
    uint64_t v38 = UUID.uuid.getter();
    char v39 = v21;
    char v40 = v22;
    char v41 = v23;
    char v42 = v24;
    char v43 = v25;
    char v44 = v26;
    char v45 = v27;
    char v46 = v28;
    uint64_t v29 = sub_10011A3BC((uint64_t)&v38, (uint64_t)v47);
    uint64_t v30 = v20 + 8;
    unint64_t v31 = *(void (**)(char *, uint64_t))(v20 + 8);
    unint64_t v36 = v32;
    uint64_t v37 = v30;
    v31(v8, v6);
    swift_beginAccess();
    unint64_t v33 = v36;
    sub_100125FAC(v29, v36);
    swift_endAccess();
    v31(v10, v6);
    uint64_t v18 = v29;
    unint64_t v19 = v33;
  }
  sub_10000C970(v18, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, a2);
}

uint64_t BinaryEncoder.deinit()
{
  sub_10000C970(*(void *)(v0 + 16), *(void *)(v0 + 24));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t BinaryEncoder.__deallocating_deinit()
{
  sub_10000C970(*(void *)(v0 + 16), *(void *)(v0 + 24));
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1001AA438()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1001AA47C()
{
  return BinaryEncoder.container<A>(keyedBy:)();
}

uint64_t sub_1001AA4A0@<X0>(void *a1@<X8>)
{
  return sub_1001AA4D0((uint64_t (*)(void))sub_100088B84, a1);
}

uint64_t sub_1001AA4B8@<X0>(void *a1@<X8>)
{
  return sub_1001AA4D0((uint64_t (*)(void))sub_1001AA560, a1);
}

uint64_t sub_1001AA4D0@<X0>(uint64_t (*a1)(void)@<X2>, void *a2@<X8>)
{
  uint64_t v4 = *v2;
  a2[3] = &type metadata for BinaryEncoder.UnkeyedContainer;
  a2[4] = a1();
  *a2 = v4;

  return swift_retain();
}

uint64_t type metadata accessor for BinaryEncoder()
{
  return self;
}

uint64_t type metadata accessor for BinaryEncoder.KeyedContainer()
{
  return sub_100038354();
}

unint64_t sub_1001AA560()
{
  unint64_t result = qword_100481868;
  if (!qword_100481868)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481868);
  }
  return result;
}

uint64_t sub_1001AA5B4(uint64_t a1, uint64_t a2)
{
  return sub_1001A9F48(a1, a2);
}

unint64_t sub_1001AA5D4()
{
  unint64_t result = qword_10047E308;
  if (!qword_10047E308)
  {
    type metadata accessor for BinaryEncoder();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E308);
  }
  return result;
}

uint64_t sub_1001AA628@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 16);
  unint64_t v5 = *(void *)(v3 + 24);
  *a2 = v4;
  a2[1] = v5;
  return sub_100013D44(v4, v5);
}

ValueMetadata *type metadata accessor for BinaryEncoder.UnkeyedContainer()
{
  return &type metadata for BinaryEncoder.UnkeyedContainer;
}

uint64_t sub_1001AA688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return BinaryEncoder.encode<A>(_:)(a1, a4);
}

uint64_t sub_1001AA6B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  return BinaryEncoder.encode<A>(_:)(a1, a4, a6);
}

uint64_t sub_1001AA6E0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_1001A9BA0(a1, a2, a3);
}

char *Socket.__allocating_init(domain:type:proto:)(int a1, int a2, int a3)
{
  return Socket.init(domain:type:proto:)(a1, a2, a3);
}

uint64_t RoutingSocket.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for RoutingSocket();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  unint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init(subsystem:category:)();
  *(_DWORD *)&v5[*(int *)(v2 + 20)] = 0;
  type metadata accessor for Socket();
  swift_allocObject();
  uint64_t v6 = Socket.init(domain:type:proto:)(17, 3, 0);
  if (!v6) {
    goto LABEL_4;
  }
  uint64_t v7 = v6;
  Swift::Int32 v8 = *((_DWORD *)v6 + 4);
  Swift::Int32 v9 = fcntl(_:_:)(v8, 3);
  if (fcntl(_:_:_:)(v8, 4, v9 | 4))
  {
    swift_release();
LABEL_4:
    uint64_t v10 = type metadata accessor for Logger();
    (*(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8))(v5, v10);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(a1, 1, 1, v2);
  }
  *(void *)&v5[*(int *)(v2 + 24)] = v7;
  sub_1001ABDD8((uint64_t)v5, a1);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(a1, 0, 1, v2);
  return sub_1001ABE3C((uint64_t)v5);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> RoutingSocket.clearNeighborDiscoveryTable(for:with:interfaceIndex:)(Swift::String a1, CoreP2P::WiFiAddress_optional *with, Swift::UInt32 interfaceIndex)
{
}

uint64_t RoutingSocket.updateNeighborDiscoveryTable(macAddress:ipv6Address:for:interfaceIndex:command:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, unsigned int a9)
{
  return sub_1001ACC60(a1 & 0xFFFFFFFFFFFFLL, a2, a3, a8, a9);
}

uint64_t RoutingSocket.macAddress(for:)(uint64_t a1)
{
  long long v84 = xmmword_1003B2440;
  int v75 = 0;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  int v81 = 0;
  int v73 = 1029;
  uint64_t v74 = 0x1100000807;
  uint64_t v4 = *(int *)(type metadata accessor for RoutingSocket() + 20);
  int v76 = *(_DWORD *)(v1 + v4) + 1;
  *(_DWORD *)(v1 + v4) = v76;
  sub_10006EC68(a1, (uint64_t)v87, &qword_10047DBA0);
  if (v87[32]) {
    __int16 v5 = 140;
  }
  else {
    __int16 v5 = 128;
  }
  __int16 v72 = v5;
  Data._Representation.append(contentsOf:)();
  sub_10006EC68(a1, (uint64_t)&v85, &qword_10047DBA0);
  if (v86)
  {
    int v83 = 0;
    *(void *)char v82 = 7708;
    *(_OWORD *)&v82[8] = v85;
  }
  else
  {
    *(void *)&v82[8] = 0;
    *(_DWORD *)char v82 = 528;
    *(_DWORD *)&v82[4] = v85;
  }
  Data._Representation.append(contentsOf:)();
  *(void *)&v82[7] = 0;
  *(void *)&v82[12] = 0;
  *(_DWORD *)char v82 = 4628;
  *(_WORD *)&v82[4] = 6;
  v82[6] = 6;
  Data._Representation.append(contentsOf:)();
  sub_1001ABE98(&v84, v1);
  if (v2) {
    return sub_10000C970(v84, *((unint64_t *)&v84 + 1));
  }
  unint64_t v6 = *((void *)&v84 + 1);
  uint64_t v7 = v84;
  switch(*((void *)&v84 + 1) >> 62)
  {
    case 1:
      uint64_t v21 = ((uint64_t)v84 >> 32) - (int)v84;
      if ((uint64_t)v84 >> 32 < (int)v84) {
        goto LABEL_109;
      }
      swift_retain();
      uint64_t v22 = __DataStorage._bytes.getter();
      if (!v22) {
        goto LABEL_72;
      }
      uint64_t v23 = v22;
      uint64_t v24 = __DataStorage._offset.getter();
      if (__OFSUB__((int)v7, v24)) {
        goto LABEL_110;
      }
      uint64_t v25 = v23 + (int)v7 - v24;
      goto LABEL_73;
    case 2:
      uint64_t v26 = *(void *)(v84 + 16);
      uint64_t v27 = *(void *)(v84 + 24);
      sub_100013D44(v84, *((unint64_t *)&v84 + 1));
      swift_retain();
      swift_retain();
      uint64_t v28 = __DataStorage._bytes.getter();
      if (v28)
      {
        uint64_t v29 = v28;
        uint64_t v30 = __DataStorage._offset.getter();
        if (__OFSUB__(v26, v30)) {
          goto LABEL_111;
        }
        uint64_t v21 = v29 + v26 - v30;
        BOOL v13 = __OFSUB__(v27, v26);
        uint64_t v31 = v27 - v26;
        if (!v13)
        {
LABEL_41:
          uint64_t v32 = __DataStorage._length.getter();
          if (v32 >= v31) {
            uint64_t v33 = v31;
          }
          else {
            uint64_t v33 = v32;
          }
          uint64_t v34 = 92;
          uint64_t v35 = 108;
          while (v21 && v33 >= v35)
          {
            uint64_t v37 = v21 + v34;
            uint64_t v38 = *(unsigned __int8 *)(v21 + v34);
            if (*(unsigned char *)(v21 + v34 + 1) != 18) {
              goto LABEL_45;
            }
            if (__OFADD__(v34, v38)) {
              goto LABEL_103;
            }
            if (v38 != 20 || v33 < v34 + v38)
            {
LABEL_45:
              if (v38 <= 0x10) {
                uint64_t v36 = 16;
              }
              else {
                uint64_t v36 = *(unsigned __int8 *)(v21 + v34);
              }
              BOOL v13 = __OFADD__(v34, v36);
              v34 += v36;
              if (v13) {
                goto LABEL_100;
              }
            }
            else
            {
              uint64_t v40 = *(unsigned __int8 *)(v37 + 5);
              size_t v41 = *(unsigned __int8 *)(v37 + 6);
              uint64_t v42 = *(void *)(v37 + 8);
              int v43 = *(_DWORD *)(v37 + 16);
              uint64_t v67 = v42;
              int v68 = v43;
              if (v41)
              {
                if (v41 <= 0xE)
                {
                  memset(__dst, 0, sizeof(__dst));
                  unsigned __int8 v71 = v41;
                  memcpy(__dst, (char *)&v67 + v40, v41);
                  uint64_t v45 = *(void *)__dst;
                  unint64_t v46 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v71 << 48);
                }
                else
                {
                  type metadata accessor for __DataStorage();
                  swift_allocObject();
                  uint64_t v44 = __DataStorage.init(bytes:length:)();
                  uint64_t v45 = v41 << 32;
                  unint64_t v46 = v44 | 0x4000000000000000;
                }
              }
              else
              {
                uint64_t v45 = 0;
                unint64_t v46 = 0xC000000000000000;
              }
              uint64_t v47 = sub_10000C6C4(v45, v46);
              BOOL v13 = __OFADD__(v34, 20);
              v34 += 20;
              if (v13) {
                goto LABEL_106;
              }
              uint64_t v20 = v47;
              if ((v47 & 0x1000000000000) == 0)
              {
                swift_release();
                swift_release();
                goto LABEL_96;
              }
            }
            uint64_t v35 = v34 + 16;
            if (__OFADD__(v34, 16))
            {
              __break(1u);
LABEL_98:
              __break(1u);
LABEL_99:
              __break(1u);
LABEL_100:
              __break(1u);
LABEL_101:
              __break(1u);
LABEL_102:
              __break(1u);
LABEL_103:
              __break(1u);
LABEL_104:
              __break(1u);
LABEL_105:
              __break(1u);
LABEL_106:
              __break(1u);
LABEL_107:
              __break(1u);
LABEL_108:
              __break(1u);
LABEL_109:
              __break(1u);
LABEL_110:
              __break(1u);
LABEL_111:
              __break(1u);
            }
          }
          swift_release();
          swift_release();
LABEL_67:
          sub_10000C970(v7, v6);
          sub_10000F000();
          swift_allocError();
          *(void *)uint64_t v48 = 0;
          *(void *)(v48 + 8) = 0;
          *(unsigned char *)(v48 + 16) = 2;
          swift_willThrow();
          return sub_10000C970(v84, *((unint64_t *)&v84 + 1));
        }
      }
      else
      {
        uint64_t v21 = 0;
        BOOL v13 = __OFSUB__(v27, v26);
        uint64_t v31 = v27 - v26;
        if (!v13) {
          goto LABEL_41;
        }
      }
      __break(1u);
LABEL_72:
      uint64_t v25 = 0;
LABEL_73:
      uint64_t v50 = __DataStorage._length.getter();
      if (v50 < v21) {
        uint64_t v21 = v50;
      }
      uint64_t v51 = 92;
      uint64_t v52 = 108;
      break;
    case 3:
      goto LABEL_67;
    default:
      uint64_t v67 = v84;
      int v68 = DWORD2(v84);
      __int16 v69 = WORD6(v84);
      if (BYTE14(v84) < 0x6CuLL) {
        goto LABEL_67;
      }
      uint64_t v8 = 92;
      do
      {
        Swift::Int32 v9 = (char *)&v67 + v8;
        uint64_t v10 = *((unsigned __int8 *)&v67 + v8);
        if (*((unsigned char *)&v67 + v8 + 1) != 18) {
          goto LABEL_18;
        }
        if (__OFADD__(v8, v10)) {
          goto LABEL_105;
        }
        if (v10 != 20 || BYTE6(v6) < v8 + v10)
        {
LABEL_18:
          if (v10 <= 0x10) {
            uint64_t v12 = 16;
          }
          else {
            uint64_t v12 = *((unsigned __int8 *)&v67 + v8);
          }
          BOOL v13 = __OFADD__(v8, v12);
          v8 += v12;
          if (v13) {
            goto LABEL_102;
          }
        }
        else
        {
          uint64_t v14 = v9[5];
          size_t v15 = v9[6];
          uint64_t v65 = *((void *)v9 + 1);
          int v66 = *((_DWORD *)v9 + 4);
          if (v15)
          {
            if (v15 <= 0xE)
            {
              memset(__dst, 0, sizeof(__dst));
              unsigned __int8 v71 = v15;
              memcpy(__dst, (char *)&v65 + v14, v15);
              uint64_t v17 = *(void *)__dst;
              unint64_t v18 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v71 << 48);
            }
            else
            {
              type metadata accessor for __DataStorage();
              swift_allocObject();
              uint64_t v16 = __DataStorage.init(bytes:length:)();
              uint64_t v17 = v15 << 32;
              unint64_t v18 = v16 | 0x4000000000000000;
            }
          }
          else
          {
            uint64_t v17 = 0;
            unint64_t v18 = 0xC000000000000000;
          }
          uint64_t v19 = sub_10000C6C4(v17, v18);
          BOOL v13 = __OFADD__(v8, 20);
          v8 += 20;
          if (v13) {
            goto LABEL_108;
          }
          uint64_t v20 = v19;
          if ((v19 & 0x1000000000000) == 0) {
            goto LABEL_96;
          }
        }
        if (__OFADD__(v8, 16)) {
          goto LABEL_99;
        }
      }
      while (BYTE6(v6) >= v8 + 16);
      goto LABEL_67;
  }
  while (1)
  {
    if (!v25 || v21 < v52) {
      goto LABEL_67;
    }
    uint64_t v54 = v25 + v51;
    uint64_t v55 = *(unsigned __int8 *)(v25 + v51);
    if (*(unsigned char *)(v25 + v51 + 1) != 18) {
      goto LABEL_76;
    }
    if (__OFADD__(v51, v55)) {
      goto LABEL_104;
    }
    if (v55 != 20 || v21 < v51 + v55)
    {
LABEL_76:
      if (v55 <= 0x10) {
        uint64_t v53 = 16;
      }
      else {
        uint64_t v53 = *(unsigned __int8 *)(v25 + v51);
      }
      BOOL v13 = __OFADD__(v51, v53);
      v51 += v53;
      if (v13) {
        goto LABEL_101;
      }
      goto LABEL_80;
    }
    uint64_t v57 = *(unsigned __int8 *)(v54 + 5);
    size_t v58 = *(unsigned __int8 *)(v54 + 6);
    uint64_t v59 = *(void *)(v54 + 8);
    int v60 = *(_DWORD *)(v54 + 16);
    uint64_t v67 = v59;
    int v68 = v60;
    if (v58)
    {
      if (v58 <= 0xE)
      {
        memset(__dst, 0, sizeof(__dst));
        unsigned __int8 v71 = v58;
        memcpy(__dst, (char *)&v67 + v57, v58);
        uint64_t v62 = *(void *)__dst;
        unint64_t v63 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v71 << 48);
      }
      else
      {
        type metadata accessor for __DataStorage();
        swift_allocObject();
        uint64_t v61 = __DataStorage.init(bytes:length:)();
        uint64_t v62 = v58 << 32;
        unint64_t v63 = v61 | 0x4000000000000000;
      }
    }
    else
    {
      uint64_t v62 = 0;
      unint64_t v63 = 0xC000000000000000;
    }
    uint64_t v64 = sub_10000C6C4(v62, v63);
    BOOL v13 = __OFADD__(v51, 20);
    v51 += 20;
    if (v13) {
      goto LABEL_107;
    }
    uint64_t v20 = v64;
    if ((v64 & 0x1000000000000) == 0) {
      break;
    }
LABEL_80:
    uint64_t v52 = v51 + 16;
    if (__OFADD__(v51, 16)) {
      goto LABEL_98;
    }
  }
LABEL_96:
  sub_10000C970(v7, v6);
  sub_10000C970(v7, v6);
  LOBYTE(v72) = 0;
  return v20 & 0xFFFFFFFFFFFFLL;
}

Swift::Bool __swiftcall NSXPCConnection.has(entitlement:)(Swift::String entitlement)
{
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 valueForEntitlement:v2];

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_10006EC68((uint64_t)v6, (uint64_t)v7, &qword_10047D0D0);
  if (v8)
  {
    if (swift_dynamicCast()) {
      return v5;
    }
  }
  else
  {
    sub_1000380B4((uint64_t)v7, &qword_10047D0D0);
  }
  return 0;
}

uint64_t NWConnection.send<A>(_:errorHandler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for NWConnection.SendCompletion();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (uint64_t *)((char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  uint64_t v9 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v11 = v10;
  uint64_t v25 = a2;
  swift_release();
  unint64_t v12 = 0;
  uint64_t v13 = v5;
  switch(v11 >> 62)
  {
    case 1uLL:
      LODWORD(v12) = HIDWORD(v9) - v9;
      if (__OFSUB__(HIDWORD(v9), v9))
      {
        __break(1u);
LABEL_9:
        __break(1u);
      }
      unint64_t v12 = (int)v12;
LABEL_6:
      if ((v12 & 0x8000000000000000) != 0)
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x1001AB4ECLL);
      }
LABEL_7:
      unint64_t v26 = bswap64(v12);
      uint64_t v17 = sub_10011A3BC((uint64_t)&v26, (uint64_t)&v27);
      unint64_t v19 = v18;
      uint64_t v24 = v17;
      uint64_t v28 = v17;
      unint64_t v29 = v18;
      sub_100013D44(v17, v18);
      sub_100013D44(v9, v11);
      sub_100125FAC(v9, v11);
      sub_10000C970(v9, v11);
      uint64_t v21 = v28;
      unint64_t v20 = v29;
      uint64_t v22 = swift_allocObject();
      *(void *)(v22 + 16) = v25;
      *(void *)(v22 + 24) = a3;
      void *v8 = sub_1001AD674;
      v8[1] = v22;
      (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for NWConnection.SendCompletion.contentProcessed(_:), v13);
      type metadata accessor for NWConnection.ContentContext();
      swift_retain();
      static NWConnection.ContentContext.defaultMessage.getter();
      NWConnection.send(content:contentContext:isComplete:completion:)();
      swift_release();
      sub_10000C970(v21, v20);
      sub_10000C970(v24, v19);
      sub_10000C970(v9, v11);
      return (*(uint64_t (**)(void *, uint64_t))(v6 + 8))(v8, v13);
    case 2uLL:
      uint64_t v15 = *(void *)(v9 + 16);
      uint64_t v14 = *(void *)(v9 + 24);
      BOOL v16 = __OFSUB__(v14, v15);
      unint64_t v12 = v14 - v15;
      if (!v16) {
        goto LABEL_6;
      }
      goto LABEL_9;
    case 3uLL:
      goto LABEL_7;
    default:
      unint64_t v12 = BYTE6(v11);
      goto LABEL_7;
  }
}

uint64_t NWConnection.send(_:errorHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for NWConnection.SendCompletion();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (uint64_t (**)(uint64_t))((char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a3;
  *(void *)(v10 + 24) = a4;
  *uint64_t v9 = sub_1001AD0F4;
  v9[1] = (uint64_t (*)(uint64_t))v10;
  (*(void (**)(uint64_t (**)(uint64_t), void, uint64_t))(v7 + 104))(v9, enum case for NWConnection.SendCompletion.contentProcessed(_:), v6);
  type metadata accessor for NWConnection.ContentContext();
  swift_retain();
  static NWConnection.ContentContext.defaultMessage.getter();
  NWConnection.send(content:contentContext:isComplete:completion:)();
  swift_release();
  return (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1001AB670(uint64_t a1, void (*a2)(uint64_t))
{
  sub_100010BCC(&qword_100481B50);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for NWError();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001AD5B0(a1, (uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1) {
    return sub_1000380B4((uint64_t)v5, &qword_100481B50);
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
  sub_1001AD618();
  uint64_t v11 = Error.localizedDescription.getter();
  a2(v11);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

char *Socket.init(domain:type:proto:)(int a1, int a2, int a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v12 = socket(a1, a2, a3);
  *(_DWORD *)(v4 + 16) = v12;
  if ((v12 & 0x80000000) == 0) {
    return (char *)v4;
  }
  swift_release();
  Logger.init(subsystem:category:)();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v13, v14))
  {
LABEL_5:

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return 0;
  }
  uint64_t v15 = (uint8_t *)swift_slowAlloc();
  uint64_t v21 = swift_slowAlloc();
  *(_DWORD *)uint64_t v15 = 136315138;
  int v16 = errno.getter();
  unint64_t result = strerror(v16);
  if (result)
  {
    uint64_t v18 = String.init(cString:)();
    uint64_t v20 = sub_100010680(v18, v19, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Failed to create socket: %s", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t Socket.__allocating_init(rawValue:)(int a1)
{
  uint64_t result = swift_allocObject();
  if (a1 < 0) {
    __break(1u);
  }
  else {
    *(_DWORD *)(result + 16) = a1;
  }
  return result;
}

uint64_t Socket.init(rawValue:)(uint64_t result)
{
  if ((result & 0x80000000) != 0)
  {
    __break(1u);
  }
  else
  {
    *(_DWORD *)(v1 + 16) = result;
    return v1;
  }
  return result;
}

uint64_t Socket.deinit()
{
  close(*(_DWORD *)(v0 + 16));
  return v0;
}

uint64_t Socket.__deallocating_deinit()
{
  close(*(_DWORD *)(v0 + 16));

  return swift_deallocClassInstance();
}

uint64_t sub_1001ABB00(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = type metadata accessor for RoutingSocket();
  if (!a1) {
    goto LABEL_16;
  }
  uint64_t v7 = result;
  uint64_t v8 = *(int *)(result + 24);
  size_t v9 = a2 - (void)a1;
  uint64_t result = write(*(_DWORD *)(*(void *)(a3 + v8) + 16), a1, v9);
  if (result < 0)
  {
LABEL_10:
    if ((unint64_t)result >= 0xFFFFFFFF80000000)
    {
LABEL_11:
      uint64_t v11 = result;
      if (result == 0xFFFFFFFFLL) {
        uint64_t v11 = errno.getter();
      }
      sub_10000F000();
      swift_allocError();
      *(void *)uint64_t v12 = v11;
      *(void *)(v12 + 8) = 0;
      *(unsigned char *)(v12 + 16) = 0;
      return swift_willThrow();
    }
    __break(1u);
LABEL_16:
    __break(1u);
    return result;
  }
  uint64_t result = read(*(_DWORD *)(*(void *)(a3 + v8) + 16), a1, v9);
  if (result < 1)
  {
LABEL_7:
    if ((result & 0x8000000000000000) == 0) {
      return result;
    }
    if ((unint64_t)result >= 0xFFFFFFFF80000000) {
      goto LABEL_11;
    }
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v10 = *(int *)(v7 + 20);
  while (a1[5] != *(_DWORD *)(a3 + v10))
  {
    uint64_t result = read(*(_DWORD *)(*(void *)(a3 + v8) + 16), a1, v9);
    if (result < 1) {
      goto LABEL_7;
    }
  }
  return result;
}

uint64_t sub_1001ABC2C(_DWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result = type metadata accessor for RoutingSocket();
  if (!a1) {
    goto LABEL_24;
  }
  uint64_t v9 = result;
  uint64_t v10 = *(int *)(result + 24);
  size_t v11 = a2 - (void)a1;
  ssize_t v12 = write(*(_DWORD *)(*(void *)(a3 + v10) + 16), a1, v11);
  if (v12 < 0)
  {
    unint64_t v13 = v12;
    if (errno.getter() != 3 || a4 != 2)
    {
      uint64_t result = errno.getter();
      if (result != 17 || a4 != 1)
      {
        if (v13 >= 0xFFFFFFFF80000000)
        {
          uint64_t v16 = v13;
          goto LABEL_18;
        }
        __break(1u);
        goto LABEL_23;
      }
    }
  }
  uint64_t result = read(*(_DWORD *)(*(void *)(a3 + v10) + 16), a1, v11);
  if (result < 1)
  {
LABEL_11:
    unint64_t v15 = result;
    if ((result & 0x8000000000000000) == 0) {
      return result;
    }
    uint64_t result = errno.getter();
    if (result == 35) {
      return result;
    }
    uint64_t result = errno.getter();
    if (result == 35) {
      return result;
    }
    if (v15 >= 0xFFFFFFFF80000000)
    {
      uint64_t v16 = v15;
LABEL_18:
      if (v16 == 0xFFFFFFFFLL) {
        uint64_t v16 = errno.getter();
      }
      sub_10000F000();
      swift_allocError();
      *(void *)uint64_t v17 = v16;
      *(void *)(v17 + 8) = 0;
      *(unsigned char *)(v17 + 16) = 0;
      return swift_willThrow();
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    return result;
  }
  uint64_t v14 = *(int *)(v9 + 20);
  while (a1[5] != *(_DWORD *)(a3 + v14))
  {
    uint64_t result = read(*(_DWORD *)(*(void *)(a3 + v10) + 16), a1, v11);
    if (result < 1) {
      goto LABEL_11;
    }
  }
  return result;
}

uint64_t type metadata accessor for Socket()
{
  return self;
}

uint64_t sub_1001ABDD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RoutingSocket();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001ABE3C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RoutingSocket();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1001ABE98(void *a1, uint64_t a2)
{
  unint64_t v2 = a1[1];
  switch(v2 >> 62)
  {
    case 1uLL:
      *(void *)&long long v18 = *a1;
      *((void *)&v18 + 1) = v2 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1001AC184((int *)&v18, a2);
      uint64_t v5 = v18;
      unint64_t v6 = *((void *)&v18 + 1) | 0x4000000000000000;
      goto LABEL_4;
    case 2uLL:
      *(void *)&long long v18 = *a1;
      *((void *)&v18 + 1) = v2 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t v7 = *((void *)&v18 + 1);
      uint64_t v8 = *(void *)(v18 + 16);
      uint64_t v17 = *(void *)(v18 + 24);
      uint64_t v9 = __DataStorage._bytes.getter();
      if (!v9)
      {
        __break(1u);
        JUMPOUT(0x1001AC0C0);
      }
      uint64_t v10 = v9;
      uint64_t v11 = __DataStorage._offset.getter();
      uint64_t v12 = v8 - v11;
      if (__OFSUB__(v8, v11))
      {
        __break(1u);
LABEL_15:
        __break(1u);
      }
      BOOL v13 = __OFSUB__(v17, v8);
      uint64_t v14 = v17 - v8;
      if (v13) {
        goto LABEL_15;
      }
      uint64_t v15 = __DataStorage._length.getter();
      if (v15 >= v14) {
        uint64_t v16 = v14;
      }
      else {
        uint64_t v16 = v15;
      }
      sub_1001ABB00((_DWORD *)(v10 + v12), v10 + v12 + v16, a2);
      *a1 = v18;
      a1[1] = v7 | 0x8000000000000000;
      return;
    case 3uLL:
      *(void *)((char *)&v18 + 7) = 0;
      *(void *)&long long v18 = 0;
      sub_1001ABB00(&v18, (uint64_t)&v18, a2);
      return;
    default:
      *(void *)&long long v18 = *a1;
      WORD4(v18) = v2;
      BYTE10(v18) = BYTE2(v2);
      BYTE11(v18) = BYTE3(v2);
      BYTE12(v18) = BYTE4(v2);
      BYTE13(v18) = BYTE5(v2);
      BYTE14(v18) = BYTE6(v2);
      sub_1001ABB00(&v18, (uint64_t)&v18 + BYTE6(v2), a2);
      uint64_t v5 = v18;
      unint64_t v6 = DWORD2(v18) | ((unint64_t)BYTE12(v18) << 32) | ((unint64_t)BYTE13(v18) << 40) | ((unint64_t)BYTE14(v18) << 48);
LABEL_4:
      *a1 = v5;
      a1[1] = v6;
      return;
  }
}

void sub_1001AC0D0(int *a1, uint64_t a2, int a3)
{
  Data.InlineSlice.ensureUniqueReference()();
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if ((int)v7 < (int)v6)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v8 = __DataStorage._bytes.getter();
  if (!v8)
  {
LABEL_10:
    __break(1u);
    return;
  }
  uint64_t v9 = v8;
  uint64_t v10 = __DataStorage._offset.getter();
  uint64_t v11 = v6 - v10;
  if (__OFSUB__(v6, v10))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v12 = v7 - v6;
  uint64_t v13 = __DataStorage._length.getter();
  if (v13 >= v12) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = v13;
  }
  sub_1001ABC2C((_DWORD *)(v9 + v11), v9 + v11 + v14, a2, a3);
}

void sub_1001AC184(int *a1, uint64_t a2)
{
  Data.InlineSlice.ensureUniqueReference()();
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if ((int)v5 < (int)v4)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v6 = __DataStorage._bytes.getter();
  if (!v6)
  {
LABEL_10:
    __break(1u);
    return;
  }
  uint64_t v7 = v6;
  uint64_t v8 = __DataStorage._offset.getter();
  uint64_t v9 = v4 - v8;
  if (__OFSUB__(v4, v8))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v10 = v5 - v4;
  uint64_t v11 = __DataStorage._length.getter();
  if (v11 >= v10) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = v11;
  }
  sub_1001ABB00((_DWORD *)(v7 + v9), v7 + v9 + v12, a2);
}

void sub_1001AC228(uint64_t a1, unsigned int a2)
{
  unsigned int v88 = a2;
  uint64_t v86 = a1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_10047E9C8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003B2F40;
  *(_OWORD *)(inited + 32) = xmmword_1003C4F50;
  *(void *)(inited + 48) = 1;
  size_t v89 = 0;
  int v9 = sysctl((int *)(inited + 32), 6u, 0, &v89, 0, 0);
  if (v9 < 0)
  {
    unsigned int v16 = v9;
    swift_bridgeObjectRelease();
    sub_10000F000();
    swift_allocError();
    *(void *)uint64_t v17 = v16;
    *(void *)(v17 + 8) = 0;
LABEL_11:
    *(unsigned char *)(v17 + 16) = 0;
    swift_willThrow();
    return;
  }
  uint64_t v10 = (char *)malloc(v89);
  if (!v10)
  {
    swift_bridgeObjectRelease();
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v17 = xmmword_1003B2F60;
    goto LABEL_11;
  }
  uint64_t v11 = v10;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t inited = (uint64_t)sub_1000C5F98(0, 6, 0, (char *)inited);
  }
  int v12 = sysctl((int *)(inited + 32), 6u, v11, &v89, 0, 0);
  if (v12 < 0)
  {
    unsigned int v18 = v12;
    swift_bridgeObjectRelease();
    sub_10000F000();
    swift_allocError();
    *(void *)uint64_t v19 = v18;
    *(void *)(v19 + 8) = 0;
    *(unsigned char *)(v19 + 16) = 0;
    swift_willThrow();
    free(v11);
    return;
  }
  uint64_t v87 = v11;
  uint64_t v74 = v3;
  int64_t v14 = v89;
  if (v89 >= 0x5C)
  {
    __int16 v72 = v7;
    uint64_t v73 = v4;
    uint64_t v76 = v2;
    int64_t v20 = 0;
    unsigned int v75 = bswap32(v88) >> 16;
    unsigned __int8 v71 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    unint64_t v70 = (void (**)(char *, uint64_t))(v5 + 8);
    *(void *)&long long v13 = 136315394;
    long long v69 = v13;
    v68[1] = (char *)&type metadata for Any + 8;
    uint64_t v15 = v87;
    uint64_t v78 = inited;
    size_t v79 = v89;
    while (1)
    {
      uint64_t v21 = &v15[v20];
      size_t v22 = *(unsigned __int16 *)&v15[v20];
      BOOL v23 = __OFADD__(v20, v22);
      v20 += v22;
      if (v23)
      {
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
      }
      if (v14 < v20) {
        goto LABEL_8;
      }
      if (v22 < 0x8C) {
        goto LABEL_42;
      }
      char v24 = v21[2];
      __int16 v25 = *((_WORD *)v21 + 2);
      uint64_t v26 = *((void *)v21 + 1);
      int v27 = *((_DWORD *)v21 + 4);
      int v28 = *((_DWORD *)v21 + 22);
      __chkstk_darwin();
      *(_OWORD *)((char *)&v66 - 4) = *(_OWORD *)&v15[v33 + 12];
      long long v65 = *(_OWORD *)&v15[v33];
      BOOL v23 = __OFADD__(v33, 28);
      uint64_t v34 = v33 + 28;
      if (v23) {
        goto LABEL_63;
      }
      uint64_t v77 = v66;
      uint64_t v85 = *((void *)&v65 + 1);
      uint64_t v35 = &v15[v34];
      uint64_t v36 = v15[v34 + 5];
      size_t v37 = v35[6];
      uint64_t v91 = *((void *)v35 + 1);
      int v92 = *((_DWORD *)v35 + 4);
      long long v84 = v29;
      long long v83 = v30;
      long long v82 = v31;
      long long v81 = v32;
      if (v37)
      {
        int v80 = v28;
        if (v37 <= 0xE)
        {
          *(void *)((char *)&__dst + 6) = 0;
          *(void *)&long long __dst = 0;
          BYTE14(__dst) = v37;
          memcpy(&__dst, (char *)&v91 + v36, v37);
          uint64_t v39 = __dst;
          unint64_t v40 = DWORD2(__dst) | ((unint64_t)BYTE12(__dst) << 32) | ((unint64_t)BYTE13(__dst) << 40) | ((unint64_t)BYTE14(__dst) << 48);
        }
        else
        {
          type metadata accessor for __DataStorage();
          swift_allocObject();
          uint64_t v38 = __DataStorage.init(bytes:length:)();
          uint64_t v39 = v37 << 32;
          unint64_t v40 = v38 | 0x4000000000000000;
        }
        int v28 = v80;
      }
      else
      {
        uint64_t v39 = 0;
        unint64_t v40 = 0xC000000000000000;
      }
      uint64_t v41 = sub_10000C6C4(v39, v40);
      if (v67 != v88)
      {
        if (v88 >= 0x10000)
        {
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return;
        }
        if (v75 != WORD1(v85)) {
          break;
        }
      }
      if ((v86 & 0x1000000000000) != 0)
      {
        if ((v41 & 0x1000000000000) != 0) {
          break;
        }
      }
      else if ((v41 & 0x1000000000000) == 0)
      {
        LODWORD(__dst) = v86;
        WORD2(__dst) = WORD2(v86);
        LODWORD(v91) = v41;
        BYTE4(v91) = BYTE4(v41);
        BYTE5(v91) = BYTE5(v41);
        if (v86 == v41 && WORD2(v86) == WORD2(v91)) {
          break;
        }
      }
      uint64_t v43 = type metadata accessor for RoutingSocket();
      uint64_t v44 = *(int *)(v43 + 20);
      uint64_t v45 = v76;
      int v46 = *(_DWORD *)(v76 + v44) + 1;
      *(_DWORD *)(v76 + v44) = v46;
      *(_WORD *)uint64_t v21 = v22;
      v21[2] = v24;
      v21[3] = 2;
      *((_WORD *)v21 + 2) = v25;
      *((void *)v21 + 1) = v26;
      *((_DWORD *)v21 + 4) = v27;
      *((_DWORD *)v21 + 5) = v46;
      *(_OWORD *)(v21 + 24) = v84;
      *(_OWORD *)(v21 + 40) = v83;
      *(_OWORD *)(v21 + 56) = v82;
      *(_OWORD *)(v21 + 72) = v81;
      *((_DWORD *)v21 + 22) = v28;
      int v47 = *(_DWORD *)(*(void *)(v45 + *(int *)(v43 + 24)) + 16);
      ssize_t v48 = write(v47, v21, v22);
      if (v48 < 0)
      {
        unint64_t v49 = v48;
        if (errno.getter() != 3)
        {
          if (v49 < 0xFFFFFFFF80000000) {
            goto LABEL_64;
          }
          unint64_t v49 = v49;
          uint64_t v53 = v73;
          uint64_t v54 = v72;
          int64_t v14 = v79;
          if (v49 == 0xFFFFFFFFLL) {
            unint64_t v49 = errno.getter();
          }
          sub_10000F000();
          swift_allocError();
          *(void *)uint64_t v55 = v49;
          goto LABEL_51;
        }
      }
      ssize_t v50 = read(v47, v21, v22);
      if (v50 >= 1)
      {
        int64_t v14 = v79;
        if (*((_DWORD *)v21 + 5) == v46) {
          goto LABEL_42;
        }
        while (1)
        {
          ssize_t v51 = read(v47, v21, v22);
          if (v51 < 1) {
            break;
          }
          if (*((_DWORD *)v21 + 5) == v46) {
            goto LABEL_42;
          }
        }
        unint64_t v52 = v51;
        if ((v51 & 0x8000000000000000) == 0) {
          goto LABEL_42;
        }
LABEL_54:
        if (errno.getter() == 35 || errno.getter() == 35) {
          goto LABEL_42;
        }
        if (v52 < 0xFFFFFFFF80000000) {
          goto LABEL_65;
        }
        unint64_t v52 = v52;
        if (v52 == 0xFFFFFFFFLL) {
          unint64_t v52 = errno.getter();
        }
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v55 = v52;
        uint64_t v53 = v73;
        uint64_t v54 = v72;
LABEL_51:
        *(void *)(v55 + 8) = 0;
        *(unsigned char *)(v55 + 16) = 0;
        swift_willThrow();
        uint64_t v74 = 0;
        (*v71)(v54, v76, v53);
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v56 = Logger.logObject.getter();
        os_log_type_t v57 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v56, v57))
        {
          uint64_t v58 = swift_slowAlloc();
          *(void *)&long long v83 = swift_slowAlloc();
          *(void *)&long long v84 = swift_slowAlloc();
          uint64_t v91 = v84;
          *(_DWORD *)uint64_t v58 = v69;
          uint64_t v59 = (char *)swift_slowAlloc();
          *(void *)&long long __dst = v85;
          *((void *)&__dst + 1) = v77;
          inet_ntop(30, &__dst, v59, 0x2Eu);
          os_log_type_t v60 = v57;
          uint64_t v61 = String.init(cString:)();
          unint64_t v63 = v62;
          swift_slowDealloc();
          *(void *)(v58 + 4) = sub_100010680(v61, v63, &v91);
          swift_bridgeObjectRelease();
          *(_WORD *)(v58 + 12) = 2112;
          swift_errorRetain();
          uint64_t v64 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v58 + 14) = v64;
          *(void *)long long v83 = v64;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v56, v60, "Failed to remove from NDP entry for %s because %@", (uint8_t *)v58, 0x16u);
          sub_100010BCC(&qword_10047CC30);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
          int64_t v14 = v79;
          (*v70)(v72, v73);
        }
        else
        {
          swift_errorRelease();
          swift_errorRelease();
          swift_errorRelease();

          (*v70)(v54, v53);
        }
        goto LABEL_42;
      }
      unint64_t v52 = v50;
      int64_t v14 = v79;
      if (v50 < 0) {
        goto LABEL_54;
      }
LABEL_42:
      if (__OFADD__(v20, 92)) {
        goto LABEL_62;
      }
      uint64_t v15 = v87;
      if (v14 < v20 + 92) {
        goto LABEL_8;
      }
    }
    int64_t v14 = v79;
    goto LABEL_42;
  }
  uint64_t v15 = v87;
LABEL_8:
  swift_bridgeObjectRelease();
  free(v15);
}

uint64_t sub_1001ACC60(unint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  int v26 = 327680;
  __int16 v27 = 0;
  uint64_t v30 = 0;
  uint64_t v29 = 0;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  uint64_t v35 = 0;
  int v31 = 4;
  uint64_t v28 = 0x300000804;
  uint64_t v37 = 7708;
  unsigned int v43 = a4;
  if (a4 >= 0x10000) {
    goto LABEL_5;
  }
  uint64_t v6 = v5;
  char v7 = a1;
  __int16 v38 = a2;
  __int16 v39 = bswap32(a4) >> 16;
  __int16 v40 = WORD2(a2);
  __int16 v41 = HIWORD(a2);
  unint64_t v8 = a1 >> 40;
  uint64_t v42 = a3;
  unint64_t v9 = HIDWORD(a1);
  memset(v25, 0, sizeof(v25));
  unint64_t v10 = a1 >> 24;
  unint64_t v11 = a1 >> 16;
  __int16 v21 = 4628;
  unint64_t v12 = a1 >> 8;
  __int16 v23 = 6;
  char v24 = 6;
  __int16 v22 = a4;
  sub_100010BCC(&qword_10047BEF8);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1003B2F40;
  *(unsigned char *)(v13 + 32) = v7;
  *(unsigned char *)(v13 + 33) = v12;
  *(unsigned char *)(v13 + 34) = v11;
  *(unsigned char *)(v13 + 35) = v10;
  *(unsigned char *)(v13 + 36) = v9;
  *(unsigned char *)(v13 + 37) = v8;
  uint64_t v14 = sub_1001265EC(v13);
  unint64_t v16 = v15;
  swift_bridgeObjectRelease();
  *(void *)&long long v36 = v14;
  *((void *)&v36 + 1) = v16;
  sub_100074B70();
  DataProtocol.copyBytes(to:)();
  sub_10000C970(v14, v16);
  LOWORD(v26) = 140;
  uint64_t v17 = *(int *)(type metadata accessor for RoutingSocket() + 20);
  HIDWORD(v29) = *(_DWORD *)(v6 + v17) + 1;
  *(_DWORD *)(v6 + v17) = HIDWORD(v29);
  if ((a5 & 0x80000000) != 0 || a5 >= 0x100)
  {
LABEL_5:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x1001AD0ACLL);
  }
  HIBYTE(v26) = a5;
  long long v36 = xmmword_1003B2440;
  Data._Representation.append(contentsOf:)();
  Data._Representation.append(contentsOf:)();
  Data._Representation.append(contentsOf:)();
  memset(v20, 0, 15);
  return sub_1001ABC2C(v20, (uint64_t)v20, v6, a5);
}

uint64_t sub_1001AD0BC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001AD0F4(uint64_t a1)
{
  return sub_1001AB670(a1, *(void (**)(uint64_t))(v1 + 16));
}

uint64_t *initializeBufferWithCopyOfBuffer for RoutingSocket(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for Logger();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 24);
    *(_DWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 20));
    *(uint64_t *)((char *)a1 + v8) = *(uint64_t *)((char *)a2 + v8);
  }
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for RoutingSocket(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for RoutingSocket(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for RoutingSocket(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  swift_release();
  return a1;
}

uint64_t sub_1001AD38C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1001AD44C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1001AD508()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1001AD5B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010BCC(&qword_100481B50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001AD618()
{
  unint64_t result = qword_100481B58;
  if (!qword_100481B58)
  {
    type metadata accessor for NWError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481B58);
  }
  return result;
}

uint64_t static DispatchTime.- infix(_:_:)()
{
  return DispatchTime.distance(to:)();
}

BOOL sub_1001AD69C()
{
  uint64_t v0 = type metadata accessor for DispatchTimeInterval();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = enum case for DispatchTimeInterval.never(_:);
  int v5 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 104);
  v5(v3, enum case for DispatchTimeInterval.never(_:), v0);
  char v6 = static DispatchTimeInterval.== infix(_:_:)();
  uint64_t v7 = *(void (**)(char *, uint64_t))(v1 + 8);
  v7(v3, v0);
  if (v6) {
    return 1;
  }
  v5(v3, v4, v0);
  char v9 = static DispatchTimeInterval.== infix(_:_:)();
  v7(v3, v0);
  if (v9) {
    return 0;
  }
  uint64_t v10 = sub_1001ADA80();
  return v10 >= sub_1001ADA80();
}

uint64_t sub_1001AD81C(unsigned __int8 a1, char a2)
{
  int v4 = a1;
  sub_100010BCC(&qword_10047EEE0);
  if (v4 == 2) {
    return 1;
  }
  if (a2 == 2) {
    return 0;
  }
  if (a1 == 3) {
    return 1;
  }
  if (a2 == 3) {
    return 0;
  }
  if ((a1 - 2) >= 5u && (a1 & 1) == 0) {
    return 1;
  }
  if ((a2 - 2) >= 5u && (a2 & 1) == 0) {
    return 0;
  }
  if (a1 - 2) >= 5u && (a1) {
    return 1;
  }
  if (a2 - 2) >= 5u && (a2) {
    return 0;
  }
  if (a1 == 4) {
    return 1;
  }
  if (a2 == 4) {
    return 0;
  }
  if (a1 == 5) {
    return 1;
  }
  if (a2 == 5) {
    return 0;
  }
  if (a1 == 6) {
    return 1;
  }
  if (a2 == 6) {
    return 0;
  }
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

BOOL sub_1001AD92C(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x100000000) != 0) {
    LODWORD(a2) = dword_1003C5150[(int)a2];
  }
  if ((a1 & 0x100000000) != 0) {
    LODWORD(a1) = dword_1003C5150[(int)a1];
  }
  return a2 >= a1;
}

uint64_t DispatchTimeInterval.nanDiscoveryWindowCount.getter()
{
  uint64_t v0 = type metadata accessor for DispatchTimeInterval();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (uint64_t *)((char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = sub_1001ADA80();
  *uint64_t v3 = 0x80000;
  (*(void (**)(void *, void, uint64_t))(v1 + 104))(v3, enum case for DispatchTimeInterval.microseconds(_:), v0);
  uint64_t v5 = sub_1001ADA80();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v1 + 8))(v3, v0);
  if (v5)
  {
    if (v4 != 0x8000000000000000 || v5 != -1) {
      return v4 / v5;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001ADA80()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  int v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for DispatchTimeInterval.seconds(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 96))(v5, v2);
    uint64_t v7 = *(void *)v5;
    uint64_t v8 = 1000000000;
LABEL_7:
    uint64_t v9 = v7 * v8;
    uint64_t v10 = (unsigned __int128)(v7 * (__int128)v8) >> 64;
    BOOL v11 = v7 <= 0;
    unint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    if (v11) {
      unint64_t v12 = 0x8000000000000000;
    }
    if (v10 == v9 >> 63) {
      return v9;
    }
    else {
      return v12;
    }
  }
  if (v6 == enum case for DispatchTimeInterval.milliseconds(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 96))(v5, v2);
    uint64_t v7 = *(void *)v5;
    uint64_t v8 = 1000000;
    goto LABEL_7;
  }
  if (v6 == enum case for DispatchTimeInterval.microseconds(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 96))(v5, v2);
    uint64_t v7 = *(void *)v5;
    uint64_t v8 = 1000;
    goto LABEL_7;
  }
  if (v6 == enum case for DispatchTimeInterval.nanoseconds(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 96))(v5, v2);
    return *(void *)v5;
  }
  else
  {
    if (v6 != enum case for DispatchTimeInterval.never(_:)) {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
    return 0x7FFFFFFFFFFFFFFFLL;
  }
}

uint64_t DispatchTimeInterval.rawSeconds.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (uint64_t *)((char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  int v6 = (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for DispatchTimeInterval.seconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    uint64_t v7 = *v5;
    uint64_t v8 = 1000000000;
  }
  else if (v6 == enum case for DispatchTimeInterval.milliseconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    uint64_t v7 = *v5;
    uint64_t v8 = 1000000;
  }
  else
  {
    if (v6 != enum case for DispatchTimeInterval.microseconds(_:))
    {
      if (v6 != enum case for DispatchTimeInterval.nanoseconds(_:))
      {
        if (v6 != enum case for DispatchTimeInterval.never(_:)) {
          (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
        }
        return 0x7FFFFFFFFFFFFFFFLL;
      }
      (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
      uint64_t v9 = *v5;
      goto LABEL_12;
    }
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    uint64_t v7 = *v5;
    uint64_t v8 = 1000;
  }
  uint64_t v9 = v7 * v8;
  if ((unsigned __int128)(v7 * (__int128)v8) >> 64 != (v7 * v8) >> 63)
  {
    if (v7 <= 0) {
      return 0x8000000000000000;
    }
    return 0x7FFFFFFFFFFFFFFFLL;
  }
LABEL_12:
  if (v9 > 0x1DCD64FFFFFFFFFFLL) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  if (v9 <= -2147483649000000000) {
    return 0x8000000000000000;
  }
  return v9 / 1000000000;
}

void DispatchTime.hash(into:)()
{
  Swift::UInt64 v0 = DispatchTime.rawValue.getter();
  Hasher._combine(_:)(v0);
}

uint64_t static DispatchTime.+= infix(_:_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchTime();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  + infix(_:_:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v5, v2);
}

Swift::Int DispatchTime.hashValue.getter()
{
  Hasher.init(_seed:)();
  Swift::UInt64 v0 = DispatchTime.rawValue.getter();
  Hasher._combine(_:)(v0);
  return Hasher._finalize()();
}

Swift::Int sub_1001AE054()
{
  Hasher.init(_seed:)();
  Swift::UInt64 v0 = DispatchTime.rawValue.getter();
  Hasher._combine(_:)(v0);
  return Hasher._finalize()();
}

uint64_t DispatchTime.description.getter()
{
  uint64_t v0 = type metadata accessor for DispatchTimeInterval();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchTime();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10047BFF0 != -1) {
    swift_once();
  }
  (*(void (**)(void))(*(void *)algn_100488568 + 8))();
  sub_1001B0B50(&qword_100481B60, (void (*)(uint64_t))&type metadata accessor for DispatchTime);
  if (dispatch thunk of static Comparable.< infix(_:_:)())
  {
    DispatchTime.distance(to:)();
    uint64_t v14 = DispatchTimeInterval.description.getter();
    uint64_t v15 = v8;
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    uint64_t v9 = 1869046048;
    unint64_t v10 = 0xE400000000000000;
  }
  else
  {
    if ((static DispatchTime.< infix(_:_:)() & 1) == 0)
    {
      uint64_t v12 = 7827310;
      goto LABEL_9;
    }
    DispatchTime.distance(to:)();
    uint64_t v14 = DispatchTimeInterval.description.getter();
    uint64_t v15 = v11;
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    uint64_t v9 = 0x726574616C20;
    unint64_t v10 = 0xE600000000000000;
  }
  String.append(_:)(*(Swift::String *)&v9);
  uint64_t v12 = v14;
LABEL_9:
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v12;
}

uint64_t DispatchTime.customMirror.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100480650);
  __chkstk_darwin();
  uint64_t v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchTime();
  __chkstk_darwin();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v1, v8);
  v13[1] = _swiftEmptyArrayStorage;
  uint64_t v11 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v7, 1, 1, v11);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for Mirror.AncestorRepresentation.generated(_:), v2);
  sub_100010BCC(&qword_10047DC10);
  sub_10000F9CC((unint64_t *)&qword_100484470, &qword_10047DC10);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t sub_1001AE5A8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100480650);
  __chkstk_darwin();
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v1, a1);
  v13[1] = _swiftEmptyArrayStorage;
  uint64_t v11 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v8, 1, 1, v11);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for Mirror.AncestorRepresentation.generated(_:), v3);
  sub_100010BCC(&qword_10047DC10);
  sub_10000F9CC((unint64_t *)&qword_100484470, &qword_10047DC10);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t static DispatchTimeInterval.hours(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if ((unsigned __int128)(result * (__int128)3600) >> 64 == (3600 * result) >> 63)
  {
    *a2 = 3600 * result;
    uint64_t v3 = enum case for DispatchTimeInterval.seconds(_:);
    uint64_t v4 = type metadata accessor for DispatchTimeInterval();
    uint64_t v5 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 104);
    return v5(a2, v3, v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static DispatchTimeInterval.zero.getter@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  uint64_t v2 = enum case for DispatchTimeInterval.nanoseconds(_:);
  uint64_t v3 = type metadata accessor for DispatchTimeInterval();
  uint64_t v4 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

uint64_t DispatchTimeInterval.description.getter()
{
  uint64_t v0 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy();
  uint64_t v21 = *(void *)(v0 - 8);
  uint64_t v22 = v0;
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy();
  uint64_t v19 = *(void *)(v3 - 8);
  uint64_t v20 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Duration.UnitsFormatStyle.UnitWidth();
  uint64_t v6 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Duration.UnitsFormatStyle();
  uint64_t v18 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1001ADA80();
  v15[1] = ((v11 >> 63) & 0xFFFFFFFFC4653600) + (((unint64_t)v11 * (unsigned __int128)0x3B9ACA00uLL) >> 64);
  v15[2] = 1000000000 * v11;
  sub_100010BCC(&qword_100480950);
  type metadata accessor for Duration.UnitsFormatStyle.Unit();
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1003C1880;
  static Duration.UnitsFormatStyle.Unit.days.getter();
  static Duration.UnitsFormatStyle.Unit.hours.getter();
  static Duration.UnitsFormatStyle.Unit.minutes.getter();
  static Duration.UnitsFormatStyle.Unit.seconds.getter();
  static Duration.UnitsFormatStyle.Unit.milliseconds.getter();
  static Duration.UnitsFormatStyle.Unit.microseconds.getter();
  static Duration.UnitsFormatStyle.Unit.nanoseconds.getter();
  sub_1000174B4(v12);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  static Duration.UnitsFormatStyle.UnitWidth.wide.getter();
  static Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.hide.getter();
  static Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.hide.getter();
  static FormatStyle<>.units(allowed:width:maximumUnitCount:zeroValueUnits:valueLength:fractionalPart:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v2, v22);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v20);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v17);
  sub_1001B0B50(&qword_100480958, (void (*)(uint64_t))&type metadata accessor for Duration.UnitsFormatStyle);
  uint64_t v13 = v16;
  Duration.formatted<A>(_:)();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v10, v13);
  return v23;
}

void DispatchTimeInterval.hash(into:)()
{
  uint64_t v1 = type metadata accessor for DispatchTimeInterval();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = (Swift::UInt64 *)((char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(Swift::UInt64 *, uint64_t, uint64_t))(v2 + 16))(v4, v0, v1);
  int v5 = (*(uint64_t (**)(Swift::UInt64 *, uint64_t))(v2 + 88))(v4, v1);
  if (v5 == enum case for DispatchTimeInterval.seconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v2 + 96))(v4, v1);
    int64_t v6 = *v4;
    uint64_t v7 = 1000000000;
LABEL_7:
    Swift::UInt64 v8 = v6 * v7;
    BOOL v9 = (unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63;
    BOOL v10 = v6 <= 0;
    unint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    if (v10) {
      unint64_t v11 = 0x8000000000000000;
    }
    if (v9) {
      Swift::UInt64 v12 = v11;
    }
    else {
      Swift::UInt64 v12 = v8;
    }
    goto LABEL_12;
  }
  if (v5 == enum case for DispatchTimeInterval.milliseconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v2 + 96))(v4, v1);
    int64_t v6 = *v4;
    uint64_t v7 = 1000000;
    goto LABEL_7;
  }
  if (v5 == enum case for DispatchTimeInterval.microseconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v2 + 96))(v4, v1);
    int64_t v6 = *v4;
    uint64_t v7 = 1000;
    goto LABEL_7;
  }
  if (v5 == enum case for DispatchTimeInterval.nanoseconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v2 + 96))(v4, v1);
    Swift::UInt64 v12 = *v4;
  }
  else
  {
    if (v5 != enum case for DispatchTimeInterval.never(_:)) {
      (*(void (**)(Swift::UInt64 *, uint64_t))(v2 + 8))(v4, v1);
    }
    Swift::UInt64 v12 = 0x7FFFFFFFFFFFFFFFLL;
  }
LABEL_12:
  Hasher._combine(_:)(v12);
}

BOOL static DispatchTimeInterval.< infix(_:_:)()
{
  uint64_t v0 = type metadata accessor for DispatchTimeInterval();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = enum case for DispatchTimeInterval.never(_:);
  int v5 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 104);
  v5(v3, enum case for DispatchTimeInterval.never(_:), v0);
  char v6 = static DispatchTimeInterval.== infix(_:_:)();
  uint64_t v7 = *(void (**)(char *, uint64_t))(v1 + 8);
  v7(v3, v0);
  if (v6) {
    return 0;
  }
  v5(v3, v4, v0);
  char v9 = static DispatchTimeInterval.== infix(_:_:)();
  v7(v3, v0);
  if (v9) {
    return 1;
  }
  uint64_t v10 = sub_1001ADA80();
  return v10 < sub_1001ADA80();
}

uint64_t static DispatchTimeInterval.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v23 = a3;
  uint64_t v24 = a2;
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  char v9 = (char *)&v21 - v8;
  uint64_t v10 = *(void (**)(char *))(v5 + 104);
  unsigned int v22 = enum case for DispatchTimeInterval.never(_:);
  v10((char *)&v21 - v8);
  sub_1001B0B50(&qword_1004862A0, (void (*)(uint64_t))&type metadata accessor for DispatchTimeInterval);
  uint64_t v21 = a1;
  LOBYTE(a1) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v9, v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v24, v4);
  if (a1)
  {
    v11(v7, v4);
    uint64_t v12 = v22;
LABEL_4:
    uint64_t v15 = v23;
    return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))v10)(v15, v12, v4);
  }
  uint64_t v13 = v22;
  ((void (*)(char *, void, uint64_t))v10)(v9, v22, v4);
  char v14 = dispatch thunk of static Equatable.== infix(_:_:)();
  v11(v9, v4);
  v11(v7, v4);
  uint64_t v12 = v13;
  if (v14) {
    goto LABEL_4;
  }
  uint64_t v17 = v13;
  uint64_t v18 = sub_1001ADA80();
  uint64_t v19 = sub_1001ADA80();
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    uint64_t v15 = v23;
    uint64_t v12 = v17;
  }
  else
  {
    uint64_t v15 = v23;
    *uint64_t v23 = v20;
    uint64_t v12 = enum case for DispatchTimeInterval.nanoseconds(_:);
  }
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))v10)(v15, v12, v4);
}

uint64_t static DispatchTimeInterval.- infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v23 = a3;
  uint64_t v24 = a2;
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  char v9 = (char *)&v21 - v8;
  uint64_t v10 = *(void (**)(char *))(v5 + 104);
  unsigned int v22 = enum case for DispatchTimeInterval.never(_:);
  v10((char *)&v21 - v8);
  sub_1001B0B50(&qword_1004862A0, (void (*)(uint64_t))&type metadata accessor for DispatchTimeInterval);
  uint64_t v21 = a1;
  LOBYTE(a1) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v9, v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v24, v4);
  if (a1)
  {
    v11(v7, v4);
    uint64_t v12 = v22;
LABEL_4:
    uint64_t v15 = v23;
    return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))v10)(v15, v12, v4);
  }
  uint64_t v13 = v22;
  ((void (*)(char *, void, uint64_t))v10)(v9, v22, v4);
  char v14 = dispatch thunk of static Equatable.== infix(_:_:)();
  v11(v9, v4);
  v11(v7, v4);
  uint64_t v12 = v13;
  if (v14) {
    goto LABEL_4;
  }
  uint64_t v17 = v13;
  uint64_t v18 = sub_1001ADA80();
  uint64_t v19 = sub_1001ADA80();
  uint64_t v20 = v18 - v19;
  if (__OFSUB__(v18, v19))
  {
    uint64_t v15 = v23;
    uint64_t v12 = v17;
  }
  else
  {
    uint64_t v15 = v23;
    *uint64_t v23 = v20;
    uint64_t v12 = enum case for DispatchTimeInterval.nanoseconds(_:);
  }
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))v10)(v15, v12, v4);
}

double DispatchTimeInterval.timeInterval.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (uint64_t *)((char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  int v6 = (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for DispatchTimeInterval.seconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    uint64_t v7 = *v5;
    uint64_t v8 = 1000000000;
LABEL_7:
    uint64_t v9 = v7 * v8;
    BOOL v10 = (unsigned __int128)(v7 * (__int128)v8) >> 64 != (v7 * v8) >> 63;
    BOOL v11 = v7 <= 0;
    uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    if (v11) {
      uint64_t v12 = 0x8000000000000000;
    }
    if (!v10) {
      uint64_t v12 = v9;
    }
    return (double)v12 / 1000000000.0;
  }
  if (v6 == enum case for DispatchTimeInterval.milliseconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    uint64_t v7 = *v5;
    uint64_t v8 = 1000000;
    goto LABEL_7;
  }
  if (v6 == enum case for DispatchTimeInterval.microseconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    uint64_t v7 = *v5;
    uint64_t v8 = 1000;
    goto LABEL_7;
  }
  if (v6 == enum case for DispatchTimeInterval.nanoseconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    uint64_t v12 = *v5;
  }
  else
  {
    if (v6 != enum case for DispatchTimeInterval.never(_:)) {
      (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
    }
    uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
  }
  return (double)v12 / 1000000000.0;
}

Swift::Int DispatchTimeInterval.hashValue.getter()
{
  return Hasher._finalize()();
}

BOOL sub_1001AF87C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  __chkstk_darwin();
  int v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = enum case for DispatchTimeInterval.never(_:);
  uint64_t v8 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 104);
  ((void (*)(char *, void))v8)(v6, enum case for DispatchTimeInterval.never(_:));
  char v9 = static DispatchTimeInterval.== infix(_:_:)();
  BOOL v10 = *(void (**)(char *, uint64_t))(v4 + 8);
  v10(v6, a3);
  if (v9) {
    return 0;
  }
  v8(v6, v7, a3);
  char v12 = static DispatchTimeInterval.== infix(_:_:)();
  v10(v6, a3);
  if (v12) {
    return 1;
  }
  uint64_t v13 = sub_1001ADA80();
  return v13 < sub_1001ADA80();
}

BOOL sub_1001AF9F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  __chkstk_darwin();
  int v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = enum case for DispatchTimeInterval.never(_:);
  uint64_t v8 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 104);
  ((void (*)(char *, void))v8)(v6, enum case for DispatchTimeInterval.never(_:));
  char v9 = static DispatchTimeInterval.== infix(_:_:)();
  BOOL v10 = *(void (**)(char *, uint64_t))(v4 + 8);
  v10(v6, a3);
  if (v9) {
    return 0;
  }
  v8(v6, v7, a3);
  char v12 = static DispatchTimeInterval.== infix(_:_:)();
  v10(v6, a3);
  if (v12) {
    return 1;
  }
  uint64_t v13 = sub_1001ADA80();
  return v13 < sub_1001ADA80();
}

uint64_t sub_1001AFB6C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  return (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(a1 - 8) + 104))(a2, enum case for DispatchTimeInterval.nanoseconds(_:), a1);
}

uint64_t sub_1001AFBB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001AFBE4(a1, a2, a3);
}

uint64_t sub_1001AFBCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001AFBE4(a1, a2, a3);
}

uint64_t sub_1001AFBE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  uint64_t v6 = __chkstk_darwin(a1);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9(v6);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a1, v8, a3);
}

Swift::Int sub_1001AFCCC()
{
  return Hasher._finalize()();
}

uint64_t sub_1001AFD08(uint64_t a1)
{
  return sub_1001AFD84(a1, "wifip2pd.nan", 0xD000000000000011, 0x80000001003DE490, &static OS_dispatch_queue.nan);
}

id static OS_dispatch_queue.nan.getter()
{
  return sub_1001B0058(&qword_10047C168, (void **)&static OS_dispatch_queue.nan);
}

uint64_t sub_1001AFD58(uint64_t a1)
{
  return sub_1001AFD84(a1, "wifip2pd.awdl", 0xD000000000000012, 0x80000001003DE460, &static OS_dispatch_queue.awdl);
}

uint64_t sub_1001AFD84(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  v14[3] = a4;
  uint64_t v15 = a5;
  v14[2] = a3;
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  char v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v10);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v11 - 8);
  v14[1] = sub_100017264();
  static DispatchQoS.userInteractive.getter();
  char v12 = sub_1003ABD38(a2);
  uint64_t v16 = &_swiftEmptyArrayStorage;
  sub_1001B0B50((unint64_t *)&unk_100488060, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100010BCC((uint64_t *)&unk_10047C330);
  sub_10000F9CC(qword_100488070, (uint64_t *)&unk_10047C330);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v6);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *uint64_t v15 = result;
  return result;
}

id static OS_dispatch_queue.awdl.getter()
{
  return sub_1001B0058(&qword_10047C170, (void **)&static OS_dispatch_queue.awdl);
}

uint64_t sub_1001B0008(uint64_t a1)
{
  return sub_1001AFD84(a1, "wifip2pd.p2p", 0xD000000000000011, 0x80000001003DE4B0, &static OS_dispatch_queue.p2p);
}

id static OS_dispatch_queue.p2p.getter()
{
  return sub_1001B0058(&qword_10047C178, (void **)&static OS_dispatch_queue.p2p);
}

id sub_1001B0058(void *a1, void **a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = *a2;

  return v3;
}

uint64_t sub_1001B00A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v21 = a4;
  uint64_t v22 = a1;
  uint64_t v20 = a6;
  sub_100014434((uint64_t *)&unk_1004843F0);
  uint64_t v8 = type metadata accessor for Result();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  char v12 = (char *)&v20 - v11;
  uint64_t v13 = swift_allocBox();
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v8 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, 1, 1, v8);
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = a5;
  v17[3] = a3;
  uint64_t v18 = v22;
  void v17[4] = v21;
  sub_1001B02F8((uint64_t)sub_1001B0ADC, (uint64_t)v17, v18, v23, v13, v24, a5);
  LOBYTE(a3) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (a3)
  {
    __break(1u);
  }
  else
  {
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v15, v9);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v12, 1, v8);
    if (result != 1)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v20, v12, v8);
      return swift_release();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1001B02F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v21[1] = a6;
  uint64_t v13 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin();
  uint64_t v16 = (char *)v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DispatchQoS();
  __chkstk_darwin();
  (*(void (**)(char *, uint64_t))(v18 + 16))((char *)v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a4, v13);
  uint64_t v19 = (void *)swift_allocObject();
  _OWORD v19[2] = a7;
  v19[3] = a5;
  v19[4] = a1;
  v19[5] = a2;
  aBlock[4] = sub_1001B0B44;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000E5D0;
  aBlock[3] = &unk_10045FDD8;
  _Block_copy(aBlock);
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  swift_retain();
  swift_retain();
  DispatchWorkItem.init(qos:flags:block:)();
  swift_release();
  OS_dispatch_queue.asyncAndWait(execute:)();
  return swift_release();
}

uint64_t sub_1001B0558(uint64_t a1, void (*a2)(void))
{
  sub_100014434((uint64_t *)&unk_1004843F0);
  uint64_t v3 = type metadata accessor for Result();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  __chkstk_darwin();
  uint64_t v7 = &v10[-v6];
  uint64_t v8 = swift_projectBox();
  a2();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v7, 0, 1, v3);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v5 + 40))(v8, v7, v4);
}

uint64_t OS_dispatch_queue.asyncAndWait<A>(qos:flags:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  sub_100014434((uint64_t *)&unk_1004843F0);
  uint64_t v12 = type metadata accessor for Result();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin();
  uint64_t v15 = (char *)&v17 - v14;
  sub_1001B00A4(a1, a2, a3, a4, a5, (uint64_t)&v17 - v14);
  if (swift_getEnumCaseMultiPayload() != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(a5 - 8) + 32))(a6, v15, a5);
  }
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v11;
  char *v12;
  uint64_t v14;
  uint64_t v15;

  uint64_t v15 = a6;
  sub_100014434((uint64_t *)&unk_1004843F0);
  type metadata accessor for Result();
  __chkstk_darwin();
  uint64_t v12 = (char *)&v14 - v11;
  sub_1001B00A4(a1, a2, a3, a4, a5, (uint64_t)&v14 - v11);
  if (swift_getEnumCaseMultiPayload() == 1) {
    return swift_willThrow();
  }
  else {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(a5 - 8) + 32))(v15, v12, a5);
  }
}

uint64_t sub_1001B0A3C()
{
  return sub_1001B0B50(&qword_100481B68, (void (*)(uint64_t))&type metadata accessor for DispatchTime);
}

uint64_t sub_1001B0A84()
{
  return sub_1001B0B50(&qword_1004862A0, (void (*)(uint64_t))&type metadata accessor for DispatchTimeInterval);
}

uint64_t sub_1001B0ACC()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001B0ADC()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t sub_1001B0B04()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001B0B44()
{
  return sub_1001B0558(*(void *)(v0 + 24), *(void (**)(void))(v0 + 32));
}

uint64_t sub_1001B0B50(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t static OWEKeys.== infix(_:_:)()
{
  uint64_t v0 = P256.KeyAgreement.PrivateKey.rawRepresentation.getter();
  unint64_t v2 = v1;
  uint64_t v3 = P256.KeyAgreement.PrivateKey.rawRepresentation.getter();
  unint64_t v5 = v4;
  char v6 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v0, v2, v3, v4);
  sub_10000C970(v3, v5);
  sub_10000C970(v0, v2);
  return v6 & 1;
}

uint64_t OWEKeys.init(privateKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);

  return v5(a2, a1, v4);
}

uint64_t sub_1001B0C8C()
{
  uint64_t result = sub_10011A478(0xD000000000000012, 0x80000001003DE4D0);
  *(void *)&xmmword_100488610 = result;
  *((void *)&xmmword_100488610 + 1) = v1;
  return result;
}

uint64_t sub_1001B0CC8()
{
  uint64_t result = sub_1001265EC((uint64_t)&off_100450450);
  qword_100481B70 = result;
  *(void *)algn_100481B78 = v1;
  return result;
}

uint64_t OWEKeys.generatePMK(for:asClient:)(uint64_t a1, int a2)
{
  int v61 = a2;
  uint64_t v4 = type metadata accessor for SymmetricKey();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v59 = v4;
  uint64_t v60 = v5;
  __chkstk_darwin();
  uint64_t v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v58 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_1004808F0);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for SharedSecret();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin();
  uint64_t v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = a1;
  P256.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)();
  uint64_t v53 = 0;
  uint64_t v54 = v8;
  char v18 = v61;
  uint64_t v55 = v2;
  uint64_t v56 = v7;
  uint64_t v52 = v17;
  os_log_type_t v57 = v16;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_1001B1844((uint64_t)v12);
    return 0;
  }
  else
  {
    uint64_t v51 = v14;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v57, v12, v13);
    if (v18)
    {
      P256.KeyAgreement.PrivateKey.publicKey.getter();
      uint64_t v21 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
      unint64_t v23 = v22;
      (*(void (**)(char *, uint64_t))(v58 + 8))(v10, v54);
      uint64_t v24 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
      unint64_t v26 = v25;
      uint64_t v65 = v21;
      unint64_t v66 = v23;
      sub_100013D44(v21, v23);
      sub_100125FAC(v24, v26);
      sub_10000C970(v24, v26);
      uint64_t v27 = v21;
      unint64_t v28 = v23;
    }
    else
    {
      uint64_t v29 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
      unint64_t v31 = v30;
      P256.KeyAgreement.PrivateKey.publicKey.getter();
      uint64_t v32 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
      unint64_t v34 = v33;
      (*(void (**)(char *, uint64_t))(v58 + 8))(v10, v54);
      uint64_t v65 = v29;
      unint64_t v66 = v31;
      sub_100013D44(v29, v31);
      sub_100013D44(v32, v34);
      sub_100125FAC(v32, v34);
      sub_10000C970(v32, v34);
      sub_10000C970(v32, v34);
      uint64_t v27 = v29;
      unint64_t v28 = v31;
    }
    sub_10000C970(v27, v28);
    uint64_t v35 = v65;
    unint64_t v36 = v66;
    type metadata accessor for SHA256();
    if (qword_10047C188 != -1) {
      swift_once();
    }
    uint64_t v37 = qword_100481B70;
    unint64_t v38 = *(void *)algn_100481B78;
    uint64_t v65 = v35;
    unint64_t v66 = v36;
    sub_100013D44(qword_100481B70, *(unint64_t *)algn_100481B78);
    sub_100013D44(v35, v36);
    sub_100125FAC(v37, v38);
    sub_10000C970(v37, v38);
    uint64_t v39 = v65;
    unint64_t v40 = v66;
    uint64_t v63 = v65;
    unint64_t v64 = v66;
    if (qword_10047C180 != -1) {
      swift_once();
    }
    long long v62 = xmmword_100488610;
    sub_1001B1938(&qword_10047DF50, (void (*)(uint64_t))&type metadata accessor for SHA256);
    sub_100074B70();
    __int16 v41 = v56;
    SharedSecret.hkdfDerivedSymmetricKey<A, B, C>(using:salt:sharedInfo:outputByteCount:)();
    uint64_t v42 = v41;
    sub_10000C970(v39, v40);
    SymmetricKey.withUnsafeBytes<A>(_:)();
    uint64_t v19 = v65;
    uint64_t v43 = v59;
    uint64_t v44 = v60;
    uint64_t v45 = v57;
    switch(v66 >> 62)
    {
      case 1uLL:
        LODWORD(v46) = HIDWORD(v65) - v65;
        if (__OFSUB__(HIDWORD(v65), v65))
        {
          __break(1u);
LABEL_20:
          __break(1u);
          JUMPOUT(0x1001B131CLL);
        }
        uint64_t v46 = (int)v46;
LABEL_16:
        if (v46 != 32)
        {
LABEL_17:
          sub_10000C970(v65, v66);
          uint64_t v19 = 0;
        }
        sub_10000C970(v35, v36);
        (*(void (**)(char *, uint64_t))(v44 + 8))(v42, v43);
        (*(void (**)(char *, uint64_t))(v51 + 8))(v45, v13);
        break;
      case 2uLL:
        uint64_t v48 = *(void *)(v65 + 16);
        uint64_t v47 = *(void *)(v65 + 24);
        BOOL v49 = __OFSUB__(v47, v48);
        uint64_t v46 = v47 - v48;
        if (!v49) {
          goto LABEL_16;
        }
        goto LABEL_20;
      case 3uLL:
        goto LABEL_17;
      default:
        uint64_t v46 = BYTE6(v66);
        goto LABEL_16;
    }
  }
  return v19;
}

uint64_t OWEKeys.customMirror.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100480650);
  __chkstk_darwin();
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OWEKeys();
  __chkstk_darwin();
  sub_10014E868(v1, (uint64_t)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11[1] = _swiftEmptyArrayStorage;
  uint64_t v9 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v7, 1, 1, v9);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for Mirror.AncestorRepresentation.generated(_:), v2);
  sub_100010BCC(&qword_10047DC10);
  sub_100074578();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t OWEKeys.hash(into:)()
{
  uint64_t v0 = P256.KeyAgreement.PrivateKey.rawRepresentation.getter();
  unint64_t v2 = v1;
  Data.hash(into:)();

  return sub_10000C970(v0, v2);
}

Swift::Int OWEKeys.hashValue.getter()
{
  Hasher.init(_seed:)();
  uint64_t v0 = P256.KeyAgreement.PrivateKey.rawRepresentation.getter();
  unint64_t v2 = v1;
  Data.hash(into:)();
  sub_10000C970(v0, v2);
  return Hasher._finalize()();
}

Swift::Int sub_1001B15EC()
{
  Hasher.init(_seed:)();
  uint64_t v0 = P256.KeyAgreement.PrivateKey.rawRepresentation.getter();
  unint64_t v2 = v1;
  Data.hash(into:)();
  sub_10000C970(v0, v2);
  return Hasher._finalize()();
}

uint64_t sub_1001B1648()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100480650);
  __chkstk_darwin();
  uint64_t v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  sub_10014E868(v0, (uint64_t)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10[1] = _swiftEmptyArrayStorage;
  uint64_t v8 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v6, 1, 1, v8);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for Mirror.AncestorRepresentation.generated(_:), v1);
  sub_100010BCC(&qword_10047DC10);
  sub_100074578();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t sub_1001B1844(uint64_t a1)
{
  uint64_t v2 = sub_100010BCC(&qword_1004808F0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for OWEKeys()
{
  uint64_t result = qword_100481BE0;
  if (!qword_100481BE0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001B18F0()
{
  return sub_1001B1938(&qword_100481B80, (void (*)(uint64_t))type metadata accessor for OWEKeys);
}

uint64_t sub_1001B1938(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for OWEKeys(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t destroy for OWEKeys(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t initializeWithCopy for OWEKeys(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for OWEKeys(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for OWEKeys(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for OWEKeys(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for OWEKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001B1BF4);
}

uint64_t sub_1001B1BF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for OWEKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001B1C74);
}

uint64_t sub_1001B1C74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t sub_1001B1CE4()
{
  uint64_t result = type metadata accessor for P256.KeyAgreement.PrivateKey();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *NANServiceInfo.genericServiceProtocol.getter(char a1, uint64_t a2, unint64_t a3)
{
  if (a1 != 2) {
    return 0;
  }
  sub_100013D44(a2, a3);
  return _s7CoreP2P25NANGenericServiceProtocolVyACSg10Foundation4DataVcfC_0(a2, a3);
}

uint64_t NANServiceInfo.init(csaMatterPayload:)()
{
  return 3;
}

uint64_t NANServiceInfo.init(information:filter:)(uint64_t a1, uint64_t a2)
{
  return 2;
}

uint64_t sub_1001B1E38()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001B1E98()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1001B1EE8()
{
  uint64_t result = 0x6465767265736552;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x72756F6A6E6F42;
      break;
    case 2:
      uint64_t result = 0x20636972656E6547;
      break;
    case 3:
      uint64_t result = 0x7474614D20415343;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t NANServiceInfo.csaMatterPayload.getter(char a1, uint64_t a2, unint64_t a3)
{
  if (a1 != 3) {
    return 0;
  }
  uint64_t v3 = a2;
  sub_100013D44(a2, a3);
  return v3;
}

uint64_t NANServiceInfo.hash(into:)(int a1, Swift::UInt8 a2, uint64_t a3, unint64_t a4)
{
  Hasher._combine(_:)(a2);
  sub_100013D44(a3, a4);
  Data.hash(into:)();

  return sub_10000C970(a3, a4);
}

uint64_t static NANServiceInfo.__derived_struct_equals(_:_:)(char a1, uint64_t a2, unint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if (a1 == a4) {
    return _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a2, a3, a5, a6);
  }
  else {
    return 0;
  }
}

Swift::Int NANServiceInfo.hashValue.getter(Swift::UInt8 a1, uint64_t a2, unint64_t a3)
{
  return Hasher._finalize()();
}

Swift::Int sub_1001B20EC()
{
  uint64_t v1 = *(void *)(v0 + 8);
  unint64_t v2 = *(void *)(v0 + 16);
  Swift::UInt8 v3 = *(unsigned char *)v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  sub_100013D44(v1, v2);
  Data.hash(into:)();
  sub_10000C970(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1001B2168()
{
  uint64_t v1 = *(void *)(v0 + 8);
  unint64_t v2 = *(void *)(v0 + 16);
  Hasher._combine(_:)(*(unsigned char *)v0);
  sub_100013D44(v1, v2);
  Data.hash(into:)();

  return sub_10000C970(v1, v2);
}

Swift::Int sub_1001B21D4()
{
  uint64_t v1 = *(void *)(v0 + 8);
  unint64_t v2 = *(void *)(v0 + 16);
  Swift::UInt8 v3 = *(unsigned char *)v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  sub_100013D44(v1, v2);
  Data.hash(into:)();
  sub_10000C970(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1001B224C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2) {
    return _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*((void *)a1 + 1), *((void *)a1 + 2), *((void *)a2 + 1), *((void *)a2 + 2));
  }
  else {
    return 0;
  }
}

uint64_t NANServiceInfo.init(from:)(void *a1)
{
  return sub_1001B2958(a1);
}

void *NANServiceInfo.encode(to:)(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  switch(a4 >> 62)
  {
    case 1uLL:
      if ((int)a3 != a3 >> 32) {
        goto LABEL_7;
      }
      break;
    case 2uLL:
      if (*(void *)(a3 + 16) != *(void *)(a3 + 24)) {
        goto LABEL_7;
      }
      break;
    case 3uLL:
      return result;
    default:
      if ((a4 & 0xFF000000000000) != 0)
      {
LABEL_7:
        sub_1000369C4(result, result[3]);
        dispatch thunk of Encoder.unkeyedContainer()();
        sub_100039448((uint64_t)v5, v6);
        sub_10019F5E8();
        dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
        if (!v4)
        {
          sub_100039448((uint64_t)v5, v6);
          sub_1001B2D84();
          dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
          sub_100039448((uint64_t)v5, v6);
          sub_1000742DC();
          dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
        }
        uint64_t result = (void *)sub_100010754((uint64_t)v5);
      }
      break;
  }
  return result;
}

uint64_t sub_1001B2440@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = NANServiceInfo.init(from:)(a1);
  if (!v2)
  {
    *(unsigned char *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(void *)(a2 + 16) = v6;
  }
  return result;
}

void *sub_1001B2470(void *a1)
{
  return NANServiceInfo.encode(to:)(a1, *v1, *((void *)v1 + 1), *((void *)v1 + 2));
}

uint64_t NANServiceInfo.customMirror.getter(unsigned __int8 a1, uint64_t a2, unint64_t a3)
{
  int v6 = a1;
  uint64_t v7 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100480650);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v6 == 2
    && (sub_100013D44(a2, a3), (uint64_t v13 = _s7CoreP2P25NANGenericServiceProtocolVyACSg10Foundation4DataVcfC_0(a2, a3)) != 0))
  {
    uint64_t v14 = v13;
    char v23 = 2;
    uint64_t v24 = a2;
    unint64_t v25 = a3;
    sub_100010BCC(qword_10047DD00);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_1003B2450;
    *(void *)(v15 + 32) = 0x636972656E6567;
    *(void *)(v15 + 40) = 0xE700000000000000;
    *(void *)(v15 + 72) = &type metadata for NANGenericServiceProtocol;
    *(void *)(v15 + 48) = v14;
    uint64_t v16 = type metadata accessor for Mirror.DisplayStyle();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v12, 1, 1, v16);
    (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for Mirror.AncestorRepresentation.generated(_:), v7);
    sub_100013D44(a2, a3);
  }
  else
  {
    char v23 = a1;
    uint64_t v24 = a2;
    unint64_t v25 = a3;
    sub_100010BCC(qword_10047DD00);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_1003B2450;
    *(void *)(v17 + 32) = 1635017060;
    *(void *)(v17 + 40) = 0xE400000000000000;
    sub_100013D44(a2, a3);
    uint64_t v18 = sub_100036314(0, 0xE000000000000000, a2, a3);
    *(void *)(v17 + 72) = &type metadata for String;
    *(void *)(v17 + 48) = v18;
    *(void *)(v17 + 56) = v19;
    uint64_t v20 = type metadata accessor for Mirror.DisplayStyle();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v12, 1, 1, v20);
    (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for Mirror.AncestorRepresentation.generated(_:), v7);
  }
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t NANServiceInfo.description.getter(char a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4 = 0xE800000000000000;
  uint64_t v5 = 0x6465767265736552;
  switch(a1)
  {
    case 1:
      unint64_t v4 = 0xE700000000000000;
      uint64_t v5 = 0x72756F6A6E6F42;
      break;
    case 2:
      unint64_t v4 = 0xEF65636976726553;
      uint64_t v5 = 0x20636972656E6547;
      break;
    case 3:
      unint64_t v4 = 0xEA00000000007265;
      uint64_t v5 = 0x7474614D20415343;
      break;
    default:
      break;
  }
  unint64_t v8 = v4;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 32;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  switch(a3 >> 62)
  {
    case 1uLL:
      if (!__OFSUB__(HIDWORD(a2), a2)) {
        goto LABEL_9;
      }
      __break(1u);
LABEL_11:
      __break(1u);
      JUMPOUT(0x1001B292CLL);
    case 2uLL:
      if (!__OFSUB__(*(void *)(a2 + 24), *(void *)(a2 + 16))) {
        goto LABEL_9;
      }
      goto LABEL_11;
    default:
LABEL_9:
      v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v10);
      swift_bridgeObjectRelease();
      v11._countAndFlagsBits = 0x736574796220;
      v11._object = (void *)0xE600000000000000;
      String.append(_:)(v11);
      return 0;
  }
}

uint64_t sub_1001B294C()
{
  return NANServiceInfo.customMirror.getter(*(unsigned char *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
}

uint64_t sub_1001B2958(void *a1)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (!v1)
  {
    sub_100039448((uint64_t)v22, v23);
    sub_10008B6F4();
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    unint64_t v5 = v21 >> 62;
    uint64_t v6 = 0;
    switch(v21 >> 62)
    {
      case 1uLL:
        uint64_t v6 = (int)v20;
        uint64_t v7 = v20 >> 32;
        goto LABEL_9;
      case 2uLL:
        uint64_t v6 = *(void *)(v20 + 16);
        uint64_t v7 = *(void *)(v20 + 24);
LABEL_9:
        if (v7 >= v6) {
          goto LABEL_10;
        }
        __break(1u);
LABEL_41:
        __break(1u);
        goto LABEL_42;
      case 3uLL:
        goto LABEL_10;
      default:
        uint64_t v6 = 0;
LABEL_10:
        uint64_t v8 = Data._Representation.subscript.getter();
        unint64_t v10 = v9;
        int v11 = sub_100258124(v8, v9);
        sub_10000C970(v8, v10);
        uint64_t v12 = v6 + 3;
        if (__OFADD__(v6, 3))
        {
LABEL_42:
          __break(1u);
        }
        else
        {
          uint64_t v13 = 0;
          uint64_t v14 = 0;
          switch((int)v5)
          {
            case 1:
              uint64_t v14 = (int)v20;
              uint64_t v13 = v20 >> 32;
              break;
            case 2:
              uint64_t v14 = *(void *)(v20 + 16);
              uint64_t v13 = *(void *)(v20 + 24);
              break;
            case 3:
              break;
            default:
              uint64_t v14 = 0;
              uint64_t v13 = BYTE6(v21);
              break;
          }
          if (v13 >= v12 && v12 >= v14)
          {
            if ((sub_10003916C(v11 & 0xFFFFFF, 0x9A6F50u) & 1) == 0)
            {
LABEL_29:
              sub_10000F000();
              swift_allocError();
              *(_OWORD *)uint64_t v16 = xmmword_1003B00B0;
LABEL_30:
              *(unsigned char *)(v16 + 16) = 2;
              swift_willThrow();
              switch((int)v5)
              {
                case 0:
                case 3:
                  goto LABEL_34;
                case 1:
                  uint64_t v18 = (int)v20;
                  uint64_t v19 = v20 >> 32;
                  goto LABEL_33;
                case 2:
                  uint64_t v18 = *(void *)(v20 + 16);
                  uint64_t v19 = *(void *)(v20 + 24);
LABEL_33:
                  if (v19 < v18) {
                    goto LABEL_41;
                  }
LABEL_34:
                  Data.subdata(in:)();
                  sub_10000C970(v20, v21);
                  swift_errorRelease();
                  uint64_t v2 = 0;
                  break;
                default:
                  JUMPOUT(0);
              }
              goto LABEL_35;
            }
            switch((int)v5)
            {
              case 1:
                uint64_t v15 = v20 >> 32;
                goto LABEL_22;
              case 2:
                uint64_t v15 = *(void *)(v20 + 24);
                goto LABEL_22;
              case 3:
                if (v6 != -3) {
                  goto LABEL_25;
                }
                goto LABEL_23;
              default:
                uint64_t v15 = BYTE6(v21);
LABEL_22:
                if (v12 == v15)
                {
LABEL_23:
                  sub_10000F000();
                  swift_allocError();
                  *(void *)uint64_t v16 = 0;
                  *(void *)(v16 + 8) = 0;
                  goto LABEL_30;
                }
LABEL_25:
                uint64_t v2 = Data.subscript.getter();
                if (__OFADD__(v12, 1)) {
                  goto LABEL_44;
                }
                if (v2 >= 4u) {
                  goto LABEL_29;
                }
                uint64_t v17 = 0;
                switch((int)v5)
                {
                  case 1:
                    uint64_t v17 = v20 >> 32;
                    break;
                  case 2:
                    uint64_t v17 = *(void *)(v20 + 24);
                    break;
                  case 3:
                    break;
                  default:
                    uint64_t v17 = BYTE6(v21);
                    break;
                }
                if (v17 >= v6 + 4)
                {
                  Data.subdata(in:)();
                  sub_10000C970(v20, v21);
LABEL_35:
                  sub_100010754((uint64_t)v22);
                  sub_100010754((uint64_t)a1);
                  return v2;
                }
                break;
            }
LABEL_45:
            __break(1u);
            JUMPOUT(0x1001B2D34);
          }
        }
        __break(1u);
LABEL_44:
        __break(1u);
        goto LABEL_45;
    }
  }
  sub_100010754((uint64_t)a1);
  return v2;
}

unint64_t sub_1001B2D84()
{
  unint64_t result = qword_100481C18;
  if (!qword_100481C18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481C18);
  }
  return result;
}

unint64_t sub_1001B2DDC()
{
  unint64_t result = qword_100481C20;
  if (!qword_100481C20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481C20);
  }
  return result;
}

uint64_t sub_1001B2E34(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  sub_100013D44(v3, v4);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithCopy for NANServiceInfo(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  sub_100013D44(v3, v4);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  sub_10000C970(v5, v6);
  return a1;
}

uint64_t assignWithTake for NANServiceInfo(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_10000C970(v3, v4);
  return a1;
}

ValueMetadata *type metadata accessor for NANServiceInfo()
{
  return &type metadata for NANServiceInfo;
}

unsigned char *storeEnumTagSinglePayload for NANServiceInfo.ServiceProtocolType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001B2FECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANServiceInfo.ServiceProtocolType()
{
  return &type metadata for NANServiceInfo.ServiceProtocolType;
}

unint64_t sub_1001B3028()
{
  unint64_t result = qword_100481C28;
  if (!qword_100481C28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481C28);
  }
  return result;
}

unint64_t sub_1001B307C()
{
  unint64_t result = qword_100481C30;
  if (!qword_100481C30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481C30);
  }
  return result;
}

uint64_t sub_1001B30D0(uint64_t result, unsigned char *a2, uint64_t a3, uint64_t a4, char a5)
{
  if (!a2)
  {
    uint64_t v5 = 0;
    a3 = 0;
    goto LABEL_30;
  }
  if (!a3)
  {
    uint64_t v5 = 0;
    goto LABEL_30;
  }
  if (a3 < 0) {
    goto LABEL_33;
  }
  if (!a4)
  {
    a3 = 0;
    uint64_t v5 = 0;
    goto LABEL_30;
  }
  if (a4 >= 1)
  {
    *a2 = a5;
    if (a3 == 1)
    {
      uint64_t v5 = 1;
LABEL_30:
      *(void *)unint64_t result = a4;
      *(unsigned char *)(result + 8) = a5;
      *(void *)(result + 16) = v5;
      return a3;
    }
    unint64_t v6 = a4 - 1;
    if (a4 == 1)
    {
      a3 = 1;
      uint64_t v5 = 1;
      goto LABEL_30;
    }
    unint64_t v7 = a4 - 2;
    if (a4 - 2 >= (unint64_t)(a3 - 2)) {
      unint64_t v7 = a3 - 2;
    }
    if (v7 < v6) {
      unint64_t v6 = v7;
    }
    unint64_t v8 = v6 + 1;
    if (v8 >= 0x11)
    {
      uint64_t v12 = v8 & 0xF;
      if ((v8 & 0xF) == 0) {
        uint64_t v12 = 16;
      }
      unint64_t v13 = v8 - v12;
      uint64_t v10 = v8 - v12 + 1;
      int v11 = &a2[v13];
      uint64_t v9 = v13 + 2;
      int8x16_t v14 = vdupq_n_s8(a5);
      uint64_t v15 = (int8x16_t *)(a2 + 1);
      do
      {
        *v15++ = v14;
        v13 -= 16;
      }
      while (v13);
    }
    else
    {
      uint64_t v9 = 2;
      uint64_t v10 = 1;
      int v11 = a2;
    }
    uint64_t v16 = 0;
    uint64_t v17 = v10 - a4;
    uint64_t v18 = v11 + 1;
    while (v17 + v16)
    {
      v18[v16] = a5;
      if (!(v9 - a3 + v16))
      {
        uint64_t v5 = v10 + v16 + 1;
        goto LABEL_30;
      }
      if (v10 - a3 + v16 == -1) {
        goto LABEL_32;
      }
      ++v16;
      if (!(v17 + v16))
      {
        a3 = v9 + v16 - 1;
        uint64_t v5 = a4;
        goto LABEL_30;
      }
    }
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001B3210(uint64_t result, unsigned char *a2, uint64_t a3, unsigned __int8 a4)
{
  int v4 = a4;
  if (!a2)
  {
LABEL_26:
    uint64_t v5 = 0;
    uint64_t v12 = 0;
    goto LABEL_29;
  }
  if (!a3)
  {
    uint64_t v5 = 0;
LABEL_28:
    uint64_t v12 = a3;
    goto LABEL_29;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 1;
LABEL_5:
    if (v5 < -8)
    {
LABEL_17:
      int v11 = 1 << v5;
      if ((unint64_t)v5 >= 9) {
        LOBYTE(v11) = 0;
      }
      BOOL v7 = __OFADD__(v5++, 1);
      if (!v7) {
        goto LABEL_20;
      }
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    while (1)
    {
      if (v5 < 0)
      {
        int v8 = 0;
        BOOL v10 = __OFADD__(v5, 8);
        if ((unint64_t)v5 <= 0xFFFFFFFFFFFFFFF8)
        {
          LOBYTE(v11) = 0;
          uint64_t v5 = -7;
          if (v10) {
            goto LABEL_25;
          }
          goto LABEL_20;
        }
      }
      else
      {
        BOOL v7 = __OFSUB__(v5, 8);
        if ((unint64_t)v5 >= 8)
        {
          LOBYTE(v11) = 0;
          uint64_t v5 = 9;
          if (v7) {
            goto LABEL_25;
          }
LABEL_20:
          *a2 = v11;
          if (v6 == a3) {
            goto LABEL_28;
          }
          ++a2;
          uint64_t v12 = v6++;
          if (v5 > 7)
          {
LABEL_29:
            *(unsigned char *)unint64_t result = v4;
            *(void *)(result + 8) = v5;
            return v12;
          }
          goto LABEL_5;
        }
        int v8 = 1 << v5;
      }
      if ((v8 & ~v4) == 0) {
        goto LABEL_17;
      }
      uint64_t v9 = v5 + 1;
      if (__OFADD__(v5, 1))
      {
        __break(1u);
        break;
      }
      ++v5;
      if ((unint64_t)(v9 - 9) < 0xFFFFFFFFFFFFFFEFLL)
      {
        uint64_t v5 = v9;
        goto LABEL_17;
      }
    }
  }
  __break(1u);
  return result;
}

void *sub_1001B3304(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2)
  {
    uint64_t v4 = 0;
    a3 = 0;
LABEL_17:
    *unint64_t result = a4;
    result[1] = v4;
    return (void *)a3;
  }
  if (!a3)
  {
    uint64_t v4 = 0;
    goto LABEL_17;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v4 = *(void *)(a4 + 16);
    if (v4)
    {
      int v5 = *(_DWORD *)(a4 + 32);
      *(_WORD *)(a2 + 4) = *(_WORD *)(a4 + 36);
      *(_DWORD *)a2 = v5;
      if (a3 == 1)
      {
        uint64_t v4 = 1;
      }
      else if (v4 == 1)
      {
        a3 = 1;
      }
      else
      {
        uint64_t v6 = 0;
        BOOL v7 = (int *)(a4 + 40);
        uint64_t v8 = a2 + 8;
        while (1)
        {
          int v9 = *v7;
          *(_WORD *)(v8 + 4) = *((_WORD *)v7 + 2);
          *(_DWORD *)uint64_t v8 = v9;
          if (a3 - 2 == v6) {
            break;
          }
          ++v6;
          v7 += 2;
          v8 += 8;
          if (v4 - 1 == v6)
          {
            a3 = v6 + 1;
            goto LABEL_17;
          }
        }
        uint64_t v4 = v6 + 2;
      }
    }
    else
    {
      a3 = 0;
    }
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t *ChannelSequence.empty.unsafeMutableAddressor()
{
  if (qword_10047C190 != -1) {
    swift_once();
  }
  return &static ChannelSequence.empty;
}

void sub_1001B3414()
{
  static ChannelSequence.empty = (uint64_t)&_swiftEmptyArrayStorage;
}

uint64_t static ChannelSequence.empty.getter()
{
  return sub_100075A04(&qword_10047C190);
}

void *ChannelSequence.slotDuration.unsafeMutableAddressor()
{
  return &static ChannelSequence.slotDuration;
}

uint64_t ChannelSequence.endIndex.getter(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

Swift::Int __swiftcall ChannelSequence.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall ChannelSequence.index(before:)(Swift::Int before)
{
  BOOL v1 = __OFSUB__(before, 1);
  Swift::Int result = before - 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

unint64_t ChannelSequence.subscript.getter(unint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(a2 + 16) > result)
  {
    return *(unsigned int *)(a2 + 8 * result + 32) | ((unint64_t)*(unsigned __int16 *)(a2 + 8 * result + 36) << 32);
  }
  __break(1u);
  return result;
}

void ChannelSequence.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = (unsigned int *)(a2 + 32);
    do
    {
      unint64_t v6 = *v4 | ((unint64_t)*((unsigned __int16 *)v4 + 2) << 32);
      if ((v6 & 0xFF00000000) == 0x300000000)
      {
        Swift::UInt8 v5 = 0;
LABEL_4:
        Hasher._combine(_:)(v5);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v6);
        Hasher._combine(_:)(0x801004u >> ((v6 >> 29) & 0xF8));
        switch(v6 >> 40)
        {
          case 2uLL:
            Hasher._combine(_:)(0);
            break;
          case 3uLL:
            Hasher._combine(_:)(1uLL);
            break;
          case 4uLL:
            Hasher._combine(_:)(3uLL);
            break;
          case 5uLL:
            Hasher._combine(_:)(4uLL);
            break;
          case 6uLL:
            Hasher._combine(_:)(5uLL);
            break;
          default:
            Hasher._combine(_:)(2uLL);
            Swift::UInt8 v5 = BYTE5(v6) & 1;
            goto LABEL_4;
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
}

void sub_1001B35E8(uint64_t a1)
{
  ChannelSequence.hash(into:)(a1, *v1);
}

Swift::Int sub_1001B35F0()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  ChannelSequence.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void *sub_1001B3634@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFSUB__(*result, 1)) {
    __break(1u);
  }
  else {
    *a2 = *result - 1;
  }
  return result;
}

void *sub_1001B364C(void *result)
{
  if (__OFSUB__(*result, 1)) {
    __break(1u);
  }
  else {
    --*result;
  }
  return result;
}

uint64_t sub_1001B3664@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_1001B427C(*a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001B3694(uint64_t *a1, uint64_t *a2)
{
  return sub_1001B41F8(*a1, *a2);
}

uint64_t sub_1001B36A0@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void sub_1001B36A8(void *a1@<X8>)
{
  *a1 = *(void *)(*(void *)v1 + 16);
}

uint64_t (*sub_1001B36B8(uint64_t (*result)(), unint64_t *a2))()
{
  unint64_t v3 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v3 < *(void *)(*(void *)v2 + 16))
  {
    uint64_t v4 = *(void *)v2 + 8 * v3;
    int v5 = *(_DWORD *)(v4 + 32);
    *((_WORD *)result + 2) = *(_WORD *)(v4 + 36);
    *(_DWORD *)uint64_t result = v5;
    return NANBitmap.Channel.operatingClass.getter;
  }
  __break(1u);
  return result;
}

uint64_t *sub_1001B3710@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *result;
  if (*result < 0 || (uint64_t v4 = result[1], result = *v2, (*v2)[2] < v4))
  {
    __break(1u);
  }
  else
  {
    *a2 = v3;
    a2[1] = v4;
    a2[2] = result;
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1001B373C@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 16);
  *a1 = *(void *)v1;
  a1[1] = 0;
  a1[2] = v2;
  return swift_bridgeObjectRetain();
}

BOOL sub_1001B3750()
{
  return *(void *)(*(void *)v0 + 16) == 0;
}

uint64_t sub_1001B3764@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = sub_1001B42D4(*a1, a2, *a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t *sub_1001B379C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = a2[1];
  if (*result >= *a2)
  {
    BOOL v5 = __OFSUB__(v2, v3);
    BOOL v4 = v2 - v3 < 0;
  }
  else
  {
    BOOL v5 = 0;
    BOOL v4 = 0;
  }
  if (v4 == v5) {
    __break(1u);
  }
  return result;
}

void *sub_1001B37B8(void *result, void *a2)
{
  if (*result < *a2 || a2[1] < *result) {
    __break(1u);
  }
  return result;
}

void *sub_1001B37D4(void *result, void *a2)
{
  if (*result < *a2 || a2[1] < result[1]) {
    __break(1u);
  }
  return result;
}

void *sub_1001B37F0@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    *a2 = *result + 1;
  }
  return result;
}

void *sub_1001B3808(void *result)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

void sub_1001B3820(void *a1@<X8>)
{
  *a1 = *v1;
  a1[1] = 0;
}

uint64_t sub_1001B382C()
{
  return *(void *)(*(void *)v0 + 16);
}

void *sub_1001B3838()
{
  uint64_t v1 = sub_10009CD20(*v0);
  swift_bridgeObjectRelease();
  return v1;
}

void *sub_1001B3870(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1001B3304(a1, a2, a3, *v3);
}

uint64_t sub_1001B3878()
{
  sub_100010BCC(&qword_10047E1E0);
  uint64_t result = swift_allocObject();
  uint64_t v1 = result;
  *(_OWORD *)(result + 16) = xmmword_1003C5440;
  if (qword_10047C1E0 != -1) {
    uint64_t result = swift_once();
  }
  int v2 = static Channel.awdlSocial5GHz;
  unint64_t v3 = static Channel.awdlSocial5GHz | ((unint64_t)byte_100488654 << 32) | ((unint64_t)byte_100488655 << 40);
  *(_DWORD *)(v1 + 32) = static Channel.awdlSocial5GHz;
  *(_WORD *)(v1 + 36) = WORD2(v3);
  *(_DWORD *)(v1 + 40) = v2;
  *(_WORD *)(v1 + 44) = WORD2(v3);
  *(_DWORD *)(v1 + 48) = v2;
  *(_WORD *)(v1 + 52) = WORD2(v3);
  *(_DWORD *)(v1 + 56) = v2;
  *(_WORD *)(v1 + 60) = WORD2(v3);
  *(_DWORD *)(v1 + 64) = 0;
  *(_WORD *)(v1 + 68) = 3;
  *(_DWORD *)(v1 + 72) = 0;
  *(_WORD *)(v1 + 76) = 3;
  *(_DWORD *)(v1 + 80) = 0;
  *(_WORD *)(v1 + 84) = 3;
  *(_DWORD *)(v1 + 88) = 0;
  *(_WORD *)(v1 + 92) = 3;
  if (qword_10047C1D8 != -1)
  {
    uint64_t result = swift_once();
    unint64_t v3 = static Channel.awdlSocial5GHz | ((unint64_t)byte_100488654 << 32) | ((unint64_t)byte_100488655 << 40);
  }
  unint64_t v4 = ((unint64_t)byte_10048864D << 40) | ((unint64_t)byte_10048864C << 32);
  *(_DWORD *)(v1 + 96) = static Channel.awdlSocial2GHz;
  *(_WORD *)(v1 + 100) = WORD2(v4);
  *(_DWORD *)(v1 + 104) = v3;
  *(_WORD *)(v1 + 108) = WORD2(v3);
  *(_DWORD *)(v1 + 112) = v3;
  *(_WORD *)(v1 + 116) = WORD2(v3);
  *(_DWORD *)(v1 + 120) = v3;
  *(_WORD *)(v1 + 124) = WORD2(v3);
  *(_DWORD *)(v1 + 128) = 0;
  *(_WORD *)(v1 + 132) = 3;
  *(_DWORD *)(v1 + 136) = 0;
  *(_WORD *)(v1 + 140) = 3;
  *(_DWORD *)(v1 + 144) = 0;
  *(_WORD *)(v1 + 148) = 3;
  *(_DWORD *)(v1 + 152) = 0;
  *(_WORD *)(v1 + 156) = 3;
  static ChannelSequence.awdlDiscoveryMode = v1;
  return result;
}

uint64_t *ChannelSequence.awdlDiscoveryMode.unsafeMutableAddressor()
{
  if (qword_10047C198 != -1) {
    swift_once();
  }
  return &static ChannelSequence.awdlDiscoveryMode;
}

uint64_t static ChannelSequence.awdlDiscoveryMode.getter()
{
  return sub_100075A04(&qword_10047C198);
}

uint64_t sub_1001B3A74()
{
  sub_100010BCC(&qword_10047E1E0);
  uint64_t result = swift_allocObject();
  uint64_t v1 = result;
  *(_OWORD *)(result + 16) = xmmword_1003C5440;
  if (qword_10047C1E0 != -1) {
    uint64_t result = swift_once();
  }
  int v2 = static Channel.awdlSocial5GHz;
  unint64_t v3 = static Channel.awdlSocial5GHz | ((unint64_t)byte_100488654 << 32) | ((unint64_t)byte_100488655 << 40);
  *(_DWORD *)(v1 + 32) = static Channel.awdlSocial5GHz;
  *(_WORD *)(v1 + 36) = WORD2(v3);
  *(_DWORD *)(v1 + 40) = v2;
  *(_WORD *)(v1 + 44) = WORD2(v3);
  *(_DWORD *)(v1 + 48) = v2;
  *(_WORD *)(v1 + 52) = WORD2(v3);
  *(_DWORD *)(v1 + 56) = 0;
  *(_WORD *)(v1 + 60) = 3;
  *(_DWORD *)(v1 + 64) = 0;
  *(_WORD *)(v1 + 68) = 3;
  *(_DWORD *)(v1 + 72) = 0;
  *(_WORD *)(v1 + 76) = 3;
  *(_DWORD *)(v1 + 80) = 0;
  *(_WORD *)(v1 + 84) = 3;
  *(_DWORD *)(v1 + 88) = 0;
  *(_WORD *)(v1 + 92) = 3;
  if (qword_10047C1D8 != -1)
  {
    uint64_t result = swift_once();
    unint64_t v3 = static Channel.awdlSocial5GHz | ((unint64_t)byte_100488654 << 32) | ((unint64_t)byte_100488655 << 40);
  }
  unint64_t v4 = ((unint64_t)byte_10048864D << 40) | ((unint64_t)byte_10048864C << 32);
  *(_DWORD *)(v1 + 96) = static Channel.awdlSocial2GHz;
  *(_WORD *)(v1 + 100) = WORD2(v4);
  *(_DWORD *)(v1 + 104) = v3;
  *(_WORD *)(v1 + 108) = WORD2(v3);
  *(_DWORD *)(v1 + 112) = v3;
  *(_WORD *)(v1 + 116) = WORD2(v3);
  *(_DWORD *)(v1 + 120) = 0;
  *(_WORD *)(v1 + 124) = 3;
  *(_DWORD *)(v1 + 128) = 0;
  *(_WORD *)(v1 + 132) = 3;
  *(_DWORD *)(v1 + 136) = 0;
  *(_WORD *)(v1 + 140) = 3;
  *(_DWORD *)(v1 + 144) = 0;
  *(_WORD *)(v1 + 148) = 3;
  *(_DWORD *)(v1 + 152) = 0;
  *(_WORD *)(v1 + 156) = 3;
  static ChannelSequence.awdlIdleMode = v1;
  return result;
}

uint64_t *ChannelSequence.awdlIdleMode.unsafeMutableAddressor()
{
  if (qword_10047C1A0 != -1) {
    swift_once();
  }
  return &static ChannelSequence.awdlIdleMode;
}

uint64_t static ChannelSequence.awdlIdleMode.getter()
{
  return sub_100075A04(&qword_10047C1A0);
}

uint64_t sub_1001B3C70()
{
  sub_100010BCC(&qword_10047E1E0);
  uint64_t result = swift_allocObject();
  uint64_t v1 = result;
  *(_OWORD *)(result + 16) = xmmword_1003C5440;
  if (qword_10047C1E0 != -1) {
    uint64_t result = swift_once();
  }
  unint64_t v2 = static Channel.awdlSocial5GHz | ((unint64_t)byte_100488654 << 32) | ((unint64_t)byte_100488655 << 40);
  *(_DWORD *)(v1 + 32) = static Channel.awdlSocial5GHz;
  *(_WORD *)(v1 + 36) = WORD2(v2);
  *(_DWORD *)(v1 + 40) = 0;
  *(_WORD *)(v1 + 44) = 3;
  *(_DWORD *)(v1 + 48) = 0;
  *(_WORD *)(v1 + 52) = 3;
  *(_DWORD *)(v1 + 56) = 0;
  *(_WORD *)(v1 + 60) = 3;
  *(_DWORD *)(v1 + 64) = 0;
  *(_WORD *)(v1 + 68) = 3;
  *(_DWORD *)(v1 + 72) = 0;
  *(_WORD *)(v1 + 76) = 3;
  *(_DWORD *)(v1 + 80) = 0;
  *(_WORD *)(v1 + 84) = 3;
  *(_DWORD *)(v1 + 88) = 0;
  *(_WORD *)(v1 + 92) = 3;
  if (qword_10047C1D8 != -1)
  {
    uint64_t result = swift_once();
    unint64_t v2 = static Channel.awdlSocial5GHz | ((unint64_t)byte_100488654 << 32) | ((unint64_t)byte_100488655 << 40);
  }
  unint64_t v3 = ((unint64_t)byte_10048864D << 40) | ((unint64_t)byte_10048864C << 32);
  *(_DWORD *)(v1 + 96) = static Channel.awdlSocial2GHz;
  *(_WORD *)(v1 + 100) = WORD2(v3);
  *(_DWORD *)(v1 + 104) = v2;
  *(_WORD *)(v1 + 108) = WORD2(v2);
  *(_DWORD *)(v1 + 112) = v2;
  *(_WORD *)(v1 + 116) = WORD2(v2);
  *(_DWORD *)(v1 + 120) = 0;
  *(_WORD *)(v1 + 124) = 3;
  *(_DWORD *)(v1 + 128) = 0;
  *(_WORD *)(v1 + 132) = 3;
  *(_DWORD *)(v1 + 136) = 0;
  *(_WORD *)(v1 + 140) = 3;
  *(_DWORD *)(v1 + 144) = 0;
  *(_WORD *)(v1 + 148) = 3;
  *(_DWORD *)(v1 + 152) = 0;
  *(_WORD *)(v1 + 156) = 3;
  static ChannelSequence.awdlLowPowerMode = v1;
  return result;
}

uint64_t *ChannelSequence.awdlLowPowerMode.unsafeMutableAddressor()
{
  if (qword_10047C1A8 != -1) {
    swift_once();
  }
  return &static ChannelSequence.awdlLowPowerMode;
}

uint64_t static ChannelSequence.awdlLowPowerMode.getter()
{
  return sub_100075A04(&qword_10047C1A8);
}

void sub_1001B3E6C()
{
  static ChannelSequence.none = (uint64_t)&off_100450478;
}

uint64_t *ChannelSequence.none.unsafeMutableAddressor()
{
  if (qword_10047C1B0 != -1) {
    swift_once();
  }
  return &static ChannelSequence.none;
}

uint64_t static ChannelSequence.none.getter()
{
  return sub_100075A04(&qword_10047C1B0);
}

unint64_t sub_1001B3EF4()
{
  unint64_t result = qword_100481C38;
  if (!qword_100481C38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481C38);
  }
  return result;
}

unint64_t sub_1001B3F4C()
{
  unint64_t result = qword_100481C40;
  if (!qword_100481C40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481C40);
  }
  return result;
}

uint64_t sub_1001B3FA0()
{
  return sub_1001B406C(&qword_100481C48, &qword_100481C50);
}

unint64_t sub_1001B3FDC()
{
  unint64_t result = qword_100481C58;
  if (!qword_100481C58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481C58);
  }
  return result;
}

uint64_t sub_1001B4030()
{
  return sub_1001B406C(&qword_100481C60, &qword_100481C68);
}

uint64_t sub_1001B406C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100014434(a2);
    sub_1001B3FDC();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001B40D4()
{
  unint64_t result = qword_100481C70;
  if (!qword_100481C70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481C70);
  }
  return result;
}

void *sub_1001B4128()
{
  return &protocol witness table for Int;
}

uint64_t sub_1001B4134()
{
  return sub_10000F9CC(&qword_100481C78, &qword_100481C50);
}

uint64_t sub_1001B4170()
{
  return sub_10000F9CC(&qword_100481C80, &qword_100481C68);
}

uint64_t sub_1001B41AC()
{
  return sub_10000F9CC(&qword_100481C88, &qword_100481C90);
}

ValueMetadata *type metadata accessor for ChannelSequence()
{
  return &type metadata for ChannelSequence;
}

uint64_t sub_1001B41F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 - a1;
  BOOL v3 = a2 < a1;
  if (a2 <= a1)
  {
    uint64_t result = 0;
    if (!v3) {
      return result;
    }
    unint64_t v7 = ~a2 + a1;
    unint64_t v8 = a1 ^ 0x8000000000000000;
    if (v7 >= v8) {
      unint64_t v7 = v8;
    }
    unint64_t v9 = 0x8000000000000000;
    if (v7 < 0x8000000000000000) {
      unint64_t v9 = v7;
    }
    while ((v7 & 0x8000000000000000) == 0)
    {
      if (v8 == v9) {
        goto LABEL_18;
      }
      if (v4 == --result) {
        return result;
      }
    }
  }
  else
  {
    uint64_t result = 0;
    unint64_t v6 = ~a1 + a2;
    while (v6 <= 0x7FFFFFFFFFFFFFFELL)
    {
      if (v4 == ++result) {
        return result;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1001B427C(uint64_t result, uint64_t a2)
{
  if (a2 < 0)
  {
    uint64_t v4 = 0;
    while ((result ^ 0x8000000000000000) > ~a2)
    {
      if (--v4 <= a2)
      {
        result += v4;
        return result;
      }
    }
    goto LABEL_12;
  }
  if (a2)
  {
    unint64_t v2 = result ^ 0x7FFFFFFFFFFFFFFFLL;
    unint64_t v3 = a2 - 1;
    while (v2 > v3)
    {
      ++result;
      if (!--a2) {
        return result;
      }
    }
    __break(1u);
LABEL_12:
    __break(1u);
  }
  return result;
}

uint64_t sub_1001B42D4(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 < 0)
  {
    uint64_t v7 = 0;
    while (result - a3 + v7)
    {
      uint64_t v8 = result + v7 - 1;
      if (__OFSUB__(result + v7, 1))
      {
        __break(1u);
LABEL_27:
        __break(1u);
        return result;
      }
      if (--v7 <= a2) {
        return v8;
      }
    }
    return 0;
  }
  if (a2)
  {
    unint64_t v3 = a3 - result;
    if (a3 - result >= (unint64_t)(a2 - 1)) {
      unint64_t v3 = a2 - 1;
    }
    if (v3 >= (result ^ 0x7FFFFFFFFFFFFFFFuLL)) {
      unint64_t v3 = result ^ 0x7FFFFFFFFFFFFFFFLL;
    }
    unint64_t v4 = v3 + 1;
    if (v4 >= 5)
    {
      uint64_t v9 = v4 & 3;
      if ((v4 & 3) == 0) {
        uint64_t v9 = 4;
      }
      unint64_t v5 = v4 - v9;
      int64x2_t v10 = 0uLL;
      v11.i64[0] = 0;
      v11.i64[1] = result;
      int64x2_t v12 = vdupq_n_s64(1uLL);
      unint64_t v13 = v5;
      do
      {
        int64x2_t v10 = vaddq_s64(v10, v12);
        int64x2_t v11 = vaddq_s64(v11, v12);
        v13 -= 4;
      }
      while (v13);
      uint64_t v6 = vaddvq_s64(vaddq_s64(vzip1q_s64(v11, v10), vzip2q_s64(v11, v10)));
    }
    else
    {
      unint64_t v5 = 0;
      uint64_t v6 = result;
    }
    uint64_t v14 = v5 + result - 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v15 = v5 + result - a3;
    unint64_t v16 = a2 - v5;
    uint64_t result = v6;
    while (v15)
    {
      if (!v14) {
        goto LABEL_27;
      }
      ++result;
      ++v14;
      ++v15;
      if (!--v16) {
        return result;
      }
    }
    return 0;
  }
  return result;
}

uint64_t NANDatapath.Configuration.serviceInfo.getter()
{
  return 2;
}

void *NANDatapath.DatapathType.defaultValue.unsafeMutableAddressor()
{
  return &static NANDatapath.DatapathType.defaultValue;
}

uint64_t NANDatapath.DatapathType.rawValue.getter(char a1)
{
  if (a1) {
    return 0x73616369746C756DLL;
  }
  else {
    return 0x74736163696E75;
  }
}

CoreP2P::NANDatapath::DatapathType_optional __swiftcall NANDatapath.DatapathType.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &off_10044E320;
  return (CoreP2P::NANDatapath::DatapathType_optional)sub_1001B4D90(rawValue, v1);
}

uint64_t sub_1001B44B8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100042BA8(*a1, *a2);
}

uint64_t sub_1001B44C4@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_10044E320;
  return sub_100185AB0(v2, a1, a2);
}

void sub_1001B44D0(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x74736163696E75;
  if (*v1) {
    uint64_t v2 = 0x73616369746C756DLL;
  }
  unint64_t v3 = 0xE700000000000000;
  if (*v1) {
    unint64_t v3 = 0xE900000000000074;
  }
  *a1 = v2;
  a1[1] = v3;
}

Swift::Int sub_1001B4514()
{
  return Hasher._finalize()();
}

uint64_t sub_1001B459C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001B4610()
{
  return Hasher._finalize()();
}

uint64_t sub_1001B4694()
{
  if (*v0) {
    return 0x73616369746C756DLL;
  }
  else {
    return 0x74736163696E75;
  }
}

void *NANDatapath.ServiceType.defaultValue.unsafeMutableAddressor()
{
  return &static NANDatapath.ServiceType.defaultValue;
}

uint64_t NANDatapath.ServiceType.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x6576697470616461;
  }
  if (a1 == 1) {
    return 0x656D69746C616572;
  }
  return 0x6E6574614C776F6CLL;
}

uint64_t static NANDatapath.ServiceType.< infix(_:_:)(char a1, unsigned __int8 a2)
{
  if (a1)
  {
    if (a1 == 1 && a2 == 2) {
      return 1;
    }
  }
  else if (a2 - 1 < 2)
  {
    return 1;
  }
  return 0;
}

_UNKNOWN **static NANDatapath.ServiceType.allCases.getter()
{
  return &off_100450518;
}

uint64_t sub_1001B478C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100042BAC(*a1, *a2);
}

unint64_t sub_1001B4798@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = _s7CoreP2P11NANDatapathO11ServiceTypeO8rawValueAESgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_1001B47C8(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE800000000000000;
  unint64_t v4 = 0xE800000000000000;
  uint64_t v5 = 0x656D69746C616572;
  if (v2 != 1)
  {
    uint64_t v5 = 0x6E6574614C776F6CLL;
    unint64_t v4 = 0xEA00000000007963;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x6576697470616461;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

void sub_1001B482C(void *a1@<X8>)
{
  *a1 = &off_100450540;
}

Swift::Int sub_1001B483C()
{
  return Hasher._finalize()();
}

uint64_t sub_1001B48E4()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001B4978()
{
  return Hasher._finalize()();
}

uint64_t sub_1001B4A1C(unsigned char *a1, unsigned __int8 *a2)
{
  int v2 = *a2;
  if (*a1)
  {
    if (*a1 != 1 || v2 != 2) {
      return 0;
    }
  }
  else if ((v2 - 1) >= 2)
  {
    return 0;
  }
  return 1;
}

uint64_t sub_1001B4A50(unsigned __int8 *a1, unsigned char *a2)
{
  int v2 = *a1;
  if (*a2)
  {
    if (*a2 != 1 || v2 != 2) {
      return 1;
    }
  }
  else if ((v2 - 1) >= 2)
  {
    return 1;
  }
  return 0;
}

uint64_t sub_1001B4A84(unsigned char *a1, unsigned __int8 *a2)
{
  int v2 = *a2;
  if (*a1)
  {
    if (*a1 != 1 || v2 != 2) {
      return 1;
    }
  }
  else if ((v2 - 1) >= 2)
  {
    return 1;
  }
  return 0;
}

uint64_t sub_1001B4AB8(unsigned __int8 *a1, unsigned char *a2)
{
  int v2 = *a1;
  if (*a2)
  {
    if (*a2 != 1 || v2 != 2) {
      return 0;
    }
  }
  else if ((v2 - 1) >= 2)
  {
    return 0;
  }
  return 1;
}

uint64_t sub_1001B4AEC()
{
  uint64_t v1 = 0x656D69746C616572;
  if (*v0 != 1) {
    uint64_t v1 = 0x6E6574614C776F6CLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6576697470616461;
  }
}

void *NANDatapath.ParametersType.defaultValue.unsafeMutableAddressor()
{
  return &static NANDatapath.ParametersType.defaultValue;
}

uint64_t NANDatapath.ParametersType.rawValue.getter(char a1)
{
  if (a1) {
    return 1735617902;
  }
  else {
    return 7365742;
  }
}

CoreP2P::NANDatapath::ParametersType_optional __swiftcall NANDatapath.ParametersType.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &off_10044E370;
  return (CoreP2P::NANDatapath::ParametersType_optional)sub_1001B4D90(rawValue, v1);
}

uint64_t sub_1001B4B8C(char *a1, char *a2)
{
  return sub_100042B10(*a1, *a2);
}

uint64_t sub_1001B4B98@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_10044E370;
  return sub_100185AB0(v2, a1, a2);
}

void sub_1001B4BA4(uint64_t *a1@<X8>)
{
  uint64_t v2 = 7365742;
  if (*v1) {
    uint64_t v2 = 1735617902;
  }
  unint64_t v3 = 0xE300000000000000;
  if (*v1) {
    unint64_t v3 = 0xE400000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

Swift::Int sub_1001B4BD4()
{
  return Hasher._finalize()();
}

uint64_t sub_1001B4C48()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001B4CA8()
{
  return Hasher._finalize()();
}

uint64_t sub_1001B4D18()
{
  if (*v0) {
    return 1735617902;
  }
  else {
    return 7365742;
  }
}

uint64_t NANDatapath.ParametersMulticastType.rawValue.getter(char a1)
{
  if (a1) {
    return 0x614D6F54796E616DLL;
  }
  else {
    return 0x6E614D6F54656E6FLL;
  }
}

CoreP2P::NANDatapath::ParametersMulticastType_optional __swiftcall NANDatapath.ParametersMulticastType.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &off_10044E3C0;
  return (CoreP2P::NANDatapath::ParametersMulticastType_optional)sub_1001B4D90(rawValue, v1);
}

uint64_t sub_1001B4D90(Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease();
  if (v5 == 1) {
    unsigned int v6 = 1;
  }
  else {
    unsigned int v6 = 2;
  }
  if (v5) {
    return v6;
  }
  else {
    return 0;
  }
}

uint64_t sub_1001B4DE0(char *a1, char *a2)
{
  return sub_100043010(*a1, *a2);
}

uint64_t sub_1001B4DEC@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_10044E3C0;
  return sub_100185AB0(v2, a1, a2);
}

void sub_1001B4DF8(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x6E614D6F54656E6FLL;
  if (*v1) {
    uint64_t v2 = 0x614D6F54796E616DLL;
  }
  unint64_t v3 = 0xE900000000000079;
  if (*v1) {
    unint64_t v3 = 0xEA0000000000796ELL;
  }
  *a1 = v2;
  a1[1] = v3;
}

Swift::Int sub_1001B4E40()
{
  return Hasher._finalize()();
}

uint64_t sub_1001B4ECC()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001B4F44()
{
  return Hasher._finalize()();
}

uint64_t sub_1001B4FCC()
{
  if (*v0) {
    return 0x614D6F54796E616DLL;
  }
  else {
    return 0x6E614D6F54656E6FLL;
  }
}

uint64_t static NANDatapath.InternetSharingConfiguration.== infix(_:_:)(long long *a1, long long *a2)
{
  sub_1001B7B7C(a1, (uint64_t)v4);
  sub_1001B7B7C(a2, (uint64_t)v5);
  if (!v4[3])
  {
    if (!v6) {
      goto LABEL_6;
    }
LABEL_5:
    sub_1000380B4((uint64_t)v4, &qword_100481C98);
    return 0;
  }
  if (!v6) {
    goto LABEL_5;
  }
  sub_1001B7BFC((uint64_t)v5);
LABEL_6:
  sub_1001B7BFC((uint64_t)v4);
  return 1;
}

void NANDatapath.InternetSharingConfiguration.hash(into:)()
{
  sub_1001B7B7C(v0, (uint64_t)v2);
  Swift::UInt8 v1 = v3 == 0;
  sub_1001B7BFC((uint64_t)v2);
  Hasher._combine(_:)(v1);
}

Swift::Int NANDatapath.InternetSharingConfiguration.hashValue.getter()
{
  Hasher.init(_seed:)();
  sub_1001B7B7C(v0, (uint64_t)v3);
  Swift::UInt8 v1 = v3[3] == 0;
  sub_1001B7BFC((uint64_t)v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_1001B5150()
{
  Hasher.init(_seed:)();
  sub_1001B7B7C(v0, (uint64_t)v3);
  Swift::UInt8 v1 = v3[3] == 0;
  sub_1001B7BFC((uint64_t)v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t IEEE80211InformationElement.HighThroughputOperation.operation.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  sub_100013D44(v1, *(void *)(v0 + 16));
  return v1;
}

uint64_t NANAttribute.DatapathExtension.interfaceIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  sub_100038004(v1, *(void *)(v0 + 32));
  return v1;
}

uint64_t NANAttribute.DatapathExtension.interfaceIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10000C95C(*(void *)(v2 + 24), *(void *)(v2 + 32));
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return result;
}

uint64_t NANDatapath.SecurityConfiguration.init(cipherSuite:key:pmkID:passphrase:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  *(unsigned char *)a8 = result;
  *(void *)(a8 + 8) = a2;
  *(void *)(a8 + 16) = a3;
  *(void *)(a8 + 24) = a4;
  *(void *)(a8 + 32) = a5;
  *(void *)(a8 + 40) = a6;
  *(void *)(a8 + 48) = a7;
  return result;
}

void NANDatapath.SecurityConfiguration.hash(into:)()
{
  Hasher._combine(_:)(*(unsigned char *)v0 + 1);
  long long v3 = *(_OWORD *)(v0 + 8);
  sub_1001B7C38((uint64_t)&v3);
  Data.hash(into:)();
  sub_1001B7C68((uint64_t)&v3);
  unint64_t v1 = *(void *)(v0 + 32);
  if (v1 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
    if (*(void *)(v0 + 48))
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v2 = *(void *)(v0 + 24);
    Hasher._combine(_:)(1u);
    sub_100013D44(v2, v1);
    Data.hash(into:)();
    sub_10000C95C(v2, v1);
    if (*(void *)(v0 + 48)) {
      goto LABEL_3;
    }
  }
  Hasher._combine(_:)(0);
}

Swift::Int NANDatapath.SecurityConfiguration.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_1001B53AC()
{
  return Hasher._finalize()();
}

uint64_t sub_1001B53E8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  return _s7CoreP2P11NANDatapathO21SecurityConfigurationV23__derived_struct_equalsySbAE_AEtFZ_0(v5, v7) & 1;
}

unint64_t NANDatapath.Configuration.identifier.getter()
{
  return *v0 | ((unint64_t)*((unsigned __int8 *)v0 + 2) << 16) | ((unint64_t)*(unsigned int *)((char *)v0 + 3) << 24);
}

uint64_t NANDatapath.Configuration.initiatorSubscribeID.getter()
{
  return *(unsigned __int8 *)(v0 + 7);
}

unint64_t NANDatapath.Configuration.responderManagementAddress.getter()
{
  return *(unsigned __int16 *)(v0 + 25) | ((unint64_t)*(unsigned int *)(v0 + 27) << 16);
}

uint64_t NANDatapath.Configuration.type.getter()
{
  return *(unsigned __int8 *)(v0 + 31);
}

uint64_t NANDatapath.Configuration.type.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 31) = result & 1;
  return result;
}

uint64_t (*NANDatapath.Configuration.type.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANDatapath.Configuration.securityConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000136F4(v1 + 48, a1, &qword_100481CA0);
}

uint64_t NANDatapath.Configuration.securityConfiguration.setter(uint64_t a1)
{
  return sub_10006D1A4(a1, v1 + 48, &qword_100481CA0);
}

uint64_t NANDatapath.Configuration.internetSharingConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000136F4(v1 + 104, a1, (uint64_t *)&unk_100485B50);
}

uint64_t NANDatapath.Configuration.internetSharingConfiguration.setter(uint64_t a1)
{
  return sub_10006D1A4(a1, v1 + 104, (uint64_t *)&unk_100485B50);
}

unint64_t NANDatapath.Configuration.multicastAddress.getter()
{
  return *(unsigned int *)(v0 + 144) | ((unint64_t)*(unsigned __int16 *)(v0 + 148) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 150) << 48);
}

uint64_t NANDatapath.Configuration.multicastAddress.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 144) = result;
  *(_WORD *)(v1 + 148) = WORD2(result);
  *(unsigned char *)(v1 + 150) = BYTE6(result) & 1;
  return result;
}

uint64_t NANDatapath.Configuration.multicastServiceType.getter()
{
  return *(unsigned __int8 *)(v0 + 151);
}

uint64_t NANDatapath.Configuration.multicastServiceType.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 151) = result & 1;
  return result;
}

uint64_t (*NANDatapath.Configuration.multicastServiceType.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

void NANDatapath.Configuration.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Hasher._combine(_:)(*(unsigned char *)v1);
  Swift::UInt8 v4 = *(unsigned char *)(v1 + 2);
  Swift::UInt8 v5 = *(unsigned char *)(v1 + 3);
  Swift::UInt8 v6 = *(unsigned char *)(v1 + 4);
  Swift::UInt8 v7 = *(unsigned char *)(v1 + 5);
  Swift::UInt8 v8 = *(unsigned char *)(v1 + 6);
  Hasher._combine(_:)(*(unsigned char *)(v1 + 1));
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(*(unsigned char *)(v1 + 7));
  String.lowercased()();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(unsigned char *)(v1 + 24));
  Swift::UInt8 v9 = *(unsigned char *)(v1 + 26);
  Swift::UInt8 v10 = *(unsigned char *)(v1 + 27);
  Swift::UInt8 v11 = *(unsigned char *)(v1 + 28);
  Swift::UInt8 v12 = *(unsigned char *)(v1 + 29);
  Swift::UInt8 v13 = *(unsigned char *)(v1 + 30);
  Hasher._combine(_:)(*(unsigned char *)(v1 + 25));
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(v1 + 40);
  swift_bridgeObjectRetain();
  sub_1000867E0(a1, v14);
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(v2 + 96);
  if (v15 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    unint64_t v17 = *(void *)(v2 + 80);
    uint64_t v16 = *(void *)(v2 + 88);
    unint64_t v19 = *(void *)(v2 + 64);
    uint64_t v18 = *(void *)(v2 + 72);
    uint64_t v21 = *(void *)(v2 + 48);
    uint64_t v20 = *(void *)(v2 + 56);
    char v35 = v21;
    uint64_t v36 = v20;
    unint64_t v37 = v19;
    uint64_t v38 = v18;
    unint64_t v39 = v17;
    uint64_t v40 = v16;
    uint64_t v41 = v15;
    Hasher._combine(_:)(1u);
    sub_100013D44(v20, v19);
    sub_100038004(v18, v17);
    swift_bridgeObjectRetain();
    NANDatapath.SecurityConfiguration.hash(into:)();
    sub_1000CAB20(v21, v20, v19, v18, v17, v16, v15);
  }
  sub_1000136F4(v2 + 104, (uint64_t)&v33, (uint64_t *)&unk_100485B50);
  if (v34 == 1)
  {
    Hasher._combine(_:)(0);
    if ((*(unsigned char *)(v2 + 150) & 1) == 0)
    {
LABEL_6:
      unsigned int v22 = *(unsigned __int16 *)(v2 + 148);
      unsigned int v23 = *(_DWORD *)(v2 + 144);
      unint64_t v24 = v23 | ((unint64_t)*(unsigned __int16 *)(v2 + 148) << 32);
      unint64_t v25 = v24 >> 8;
      unint64_t v26 = v24 >> 16;
      unint64_t v27 = v24 >> 24;
      unsigned int v28 = v22 >> 8;
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v23);
      Hasher._combine(_:)(v25);
      Hasher._combine(_:)(v26);
      Hasher._combine(_:)(v27);
      Hasher._combine(_:)(v22);
      goto LABEL_9;
    }
  }
  else
  {
    sub_10006EF50(&v33, (uint64_t)v32);
    Hasher._combine(_:)(1u);
    sub_1001B7B7C(v32, (uint64_t)v30);
    Swift::UInt8 v29 = v31 == 0;
    sub_1001B7BFC((uint64_t)v30);
    Hasher._combine(_:)(v29);
    sub_1001B7BFC((uint64_t)v32);
    if ((*(unsigned char *)(v2 + 150) & 1) == 0) {
      goto LABEL_6;
    }
  }
  LOBYTE(v28) = 0;
LABEL_9:
  Hasher._combine(_:)(v28);
  if (*(unsigned char *)(v2 + 151) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
  }
}

Swift::Int NANDatapath.Configuration.hashValue.getter()
{
  Hasher.init(_seed:)();
  NANDatapath.Configuration.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

void sub_1001B59D0(uint64_t a1@<X8>)
{
  __int16 v2 = *(_WORD *)(v1 + 4);
  char v3 = *(unsigned char *)(v1 + 6);
  *(_DWORD *)a1 = *(_DWORD *)v1;
  *(_WORD *)(a1 + 4) = v2;
  *(unsigned char *)(a1 + 6) = v3;
}

Swift::Int sub_1001B59F0()
{
  Hasher.init(_seed:)();
  NANDatapath.Configuration.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

unint64_t NANDatapath.ResponseConfiguration.identifier.getter()
{
  return *v0 | ((unint64_t)v0[8] << 8) | ((unint64_t)v0[9] << 16) | ((unint64_t)*(unsigned int *)(v0 + 10) << 24);
}

uint64_t NANAttribute.ServiceDescriptorExtension.serviceInfo.getter()
{
  uint64_t v1 = v0[2];
  sub_10013316C(v1, v0[3], v0[4]);
  return v1;
}

unint64_t NANDatapath.ResponseConfiguration.responderManagementAddress.getter()
{
  return *(unsigned __int16 *)(v0 + 40) | ((unint64_t)*(unsigned int *)(v0 + 42) << 16);
}

unint64_t NANDatapath.ResponseConfiguration.responderDataAddress.getter()
{
  return *(unsigned __int16 *)(v0 + 46) | ((unint64_t)*(unsigned int *)(v0 + 48) << 16);
}

uint64_t NANDatapath.ResponseConfiguration.serviceName.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NANDatapath.ResponseConfiguration.dialogToken.getter()
{
  return *(unsigned __int8 *)(v0 + 73);
}

uint64_t NANDatapath.ResponseConfiguration.status.getter()
{
  return *(unsigned __int8 *)(v0 + 74);
}

uint64_t NANDatapath.ResponseConfiguration.status.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 74) = result;
  return result;
}

uint64_t (*NANDatapath.ResponseConfiguration.status.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANDatapath.ResponseConfiguration.securityConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000136F4(v1 + 80, a1, &qword_100481CA0);
}

uint64_t NANDatapath.ResponseConfiguration.securityConfiguration.setter(uint64_t a1)
{
  return sub_10006D1A4(a1, v1 + 80, &qword_100481CA0);
}

uint64_t NANDatapath.ResponseConfiguration.internetSharingConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000136F4(v1 + 136, a1, (uint64_t *)&unk_100486320);
}

uint64_t NANDatapath.ResponseConfiguration.internetSharingConfiguration.setter(uint64_t a1)
{
  return sub_10006D1A4(a1, v1 + 136, (uint64_t *)&unk_100486320);
}

unint64_t NANDatapath.ResponseConfiguration.multicastAddress.getter()
{
  return *(unsigned int *)(v0 + 177) | ((unint64_t)*(unsigned __int16 *)(v0 + 181) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 183) << 48);
}

uint64_t NANDatapath.ResponseConfiguration.multicastAddress.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 177) = result;
  *(_WORD *)(v1 + 181) = WORD2(result);
  *(unsigned char *)(v1 + 183) = BYTE6(result) & 1;
  return result;
}

uint64_t (*NANDatapath.ResponseConfiguration.multicastAddress.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANDatapath.ResponseConfiguration.multicastServiceType.getter()
{
  return *(unsigned __int8 *)(v0 + 184);
}

uint64_t NANDatapath.ResponseConfiguration.multicastServiceType.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 184) = result & 1;
  return result;
}

uint64_t NANDatapath.ResponseConfiguration.init(instanceID:publishID:initiatorManagementAddress:initiatorDataAddress:initiatorServiceInfo:responderManagementAddress:responderDataAddress:serviceName:serviceType:dialogToken:status:securityConfiguration:internetSharingConfiguration:multicastAddress:multicastServiceType:)@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  *(unsigned char *)(a9 + 176) = -1;
  *(unsigned char *)a9 = a1;
  *(unsigned char *)(a9 + 1) = a2;
  *(unsigned char *)(a9 + 3) = BYTE1(a3);
  *(unsigned char *)(a9 + 4) = BYTE2(a3);
  *(unsigned char *)(a9 + 5) = BYTE3(a3);
  *(void *)(a9 + 177) = 0x101000000000000;
  uint64_t v21 = a9 + 177;
  *(unsigned char *)(a9 + 6) = BYTE4(a3);
  *(unsigned char *)(a9 + 2) = a3;
  *(unsigned char *)(a9 + 7) = BYTE5(a3);
  *(unsigned char *)(a9 + 9) = BYTE1(a4);
  *(unsigned char *)(a9 + 10) = BYTE2(a4);
  *(unsigned char *)(a9 + 11) = BYTE3(a4);
  *(unsigned char *)(a9 + 12) = BYTE4(a4);
  *(unsigned char *)(a9 + 8) = a4;
  *(unsigned char *)(a9 + 13) = BYTE5(a4);
  *(void *)(a9 + 16) = a5;
  *(void *)(a9 + 24) = a6;
  *(void *)(a9 + 32) = a7;
  *(unsigned char *)(a9 + 41) = BYTE1(a8);
  *(unsigned char *)(a9 + 42) = BYTE2(a8);
  *(unsigned char *)(a9 + 43) = BYTE3(a8);
  *(unsigned char *)(a9 + 40) = a8;
  *(unsigned char *)(a9 + 44) = BYTE4(a8);
  *(unsigned char *)(a9 + 45) = BYTE5(a8);
  *(_DWORD *)(a9 + 47) = *(_DWORD *)((char *)&a10 + 1);
  *(unsigned char *)(a9 + 46) = a10;
  *(unsigned char *)(a9 + 51) = BYTE5(a10);
  *(void *)(a9 + 56) = a11;
  *(void *)(a9 + 64) = a12;
  *(unsigned char *)(a9 + 72) = a13;
  *(void *)(a9 + 168) = 0;
  *(_OWORD *)(a9 + 152) = 0u;
  *(_WORD *)(a9 + 73) = *(_WORD *)((char *)&a13 + 1);
  *(_OWORD *)(a9 + 136) = 0u;
  sub_10006EC68(a14, a9 + 80, &qword_100481CA0);
  uint64_t result = sub_10006D1A4(a15, a9 + 136, (uint64_t *)&unk_100486320);
  *(_WORD *)(v21 + 4) = a17;
  *(_DWORD *)uint64_t v21 = a16;
  *(unsigned char *)(a9 + 183) = a18 & 1;
  *(unsigned char *)(a9 + 184) = a20 & 1;
  return result;
}

void NANDatapath.ResponseConfiguration.hash(into:)()
{
  Hasher._combine(_:)(*(unsigned char *)v0);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 1));
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 3);
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 5);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 6);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 7);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 2));
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 9);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 10);
  Swift::UInt8 v8 = *(unsigned char *)(v0 + 11);
  Swift::UInt8 v9 = *(unsigned char *)(v0 + 12);
  Swift::UInt8 v10 = *(unsigned char *)(v0 + 13);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 8));
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  uint64_t v11 = *(void *)(v0 + 16);
  if (v11 == 4)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v13 = *(void *)(v0 + 24);
    unint64_t v12 = *(void *)(v0 + 32);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v11);
    sub_100013D44(v13, v12);
    Data.hash(into:)();
    sub_1001331AC(v11, v13, v12);
  }
  Swift::UInt8 v14 = *(unsigned char *)(v0 + 41);
  Swift::UInt8 v15 = *(unsigned char *)(v0 + 42);
  Swift::UInt8 v16 = *(unsigned char *)(v0 + 43);
  Swift::UInt8 v17 = *(unsigned char *)(v0 + 44);
  Swift::UInt8 v18 = *(unsigned char *)(v0 + 45);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 40));
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  Hasher._combine(_:)(v16);
  Hasher._combine(_:)(v17);
  Hasher._combine(_:)(v18);
  Swift::UInt8 v19 = *(unsigned char *)(v0 + 47);
  Swift::UInt8 v20 = *(unsigned char *)(v0 + 48);
  Swift::UInt8 v21 = *(unsigned char *)(v0 + 49);
  Swift::UInt8 v22 = *(unsigned char *)(v0 + 50);
  Swift::UInt8 v23 = *(unsigned char *)(v0 + 51);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 46));
  Hasher._combine(_:)(v19);
  Hasher._combine(_:)(v20);
  Hasher._combine(_:)(v21);
  Hasher._combine(_:)(v22);
  Hasher._combine(_:)(v23);
  String.lowercased()();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(unsigned char *)(v0 + 73));
  Hasher._combine(_:)(*(unsigned char *)(v0 + 74));
  uint64_t v24 = *(void *)(v0 + 128);
  if (v24 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    unint64_t v26 = *(void *)(v0 + 112);
    uint64_t v25 = *(void *)(v0 + 120);
    unint64_t v28 = *(void *)(v0 + 96);
    uint64_t v27 = *(void *)(v0 + 104);
    uint64_t v30 = *(void *)(v0 + 80);
    uint64_t v29 = *(void *)(v0 + 88);
    v43[48] = v30;
    uint64_t v44 = v29;
    unint64_t v45 = v28;
    uint64_t v46 = v27;
    unint64_t v47 = v26;
    uint64_t v48 = v25;
    uint64_t v49 = v24;
    Hasher._combine(_:)(1u);
    sub_100013D44(v29, v28);
    sub_100038004(v27, v26);
    swift_bridgeObjectRetain();
    NANDatapath.SecurityConfiguration.hash(into:)();
    sub_1000CAB20(v30, v29, v28, v27, v26, v25, v24);
  }
  sub_1000136F4(v0 + 136, (uint64_t)v43, (uint64_t *)&unk_100486320);
  if (v43[40] != 255)
  {
    sub_1001B7C98((uint64_t)v43, (uint64_t)v42);
    Hasher._combine(_:)(1u);
    sub_1001B7CF4((uint64_t)v42, (uint64_t)&v39);
    if (v41)
    {
      sub_1001B7D50((uint64_t)&v39);
      Swift::UInt8 v31 = 0;
    }
    else
    {
      Swift::UInt8 v31 = v40;
      Hasher._combine(_:)(1u);
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    Hasher._combine(_:)(v31);
    sub_1001B7D50((uint64_t)v42);
    if (*(unsigned char *)(v0 + 183)) {
      goto LABEL_14;
    }
LABEL_11:
    unsigned int v32 = *(unsigned __int16 *)(v0 + 181);
    unsigned int v33 = *(_DWORD *)(v0 + 177);
    unint64_t v34 = v33 | ((unint64_t)*(unsigned __int16 *)(v0 + 181) << 32);
    unint64_t v35 = v34 >> 8;
    unint64_t v36 = v34 >> 16;
    unint64_t v37 = v34 >> 24;
    unsigned int v38 = v32 >> 8;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v33);
    Hasher._combine(_:)(v35);
    Hasher._combine(_:)(v36);
    Hasher._combine(_:)(v37);
    Hasher._combine(_:)(v32);
    goto LABEL_15;
  }
  Hasher._combine(_:)(0);
  if ((*(unsigned char *)(v0 + 183) & 1) == 0) {
    goto LABEL_11;
  }
LABEL_14:
  LOBYTE(v38) = 0;
LABEL_15:
  Hasher._combine(_:)(v38);
  if (*(unsigned char *)(v0 + 184) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
  }
}

Swift::Int NANDatapath.ResponseConfiguration.hashValue.getter()
{
  return Hasher._finalize()();
}

void sub_1001B6284(uint64_t a1@<X8>)
{
  __int16 v2 = *(_WORD *)(v1 + 12);
  *(unsigned char *)a1 = *(unsigned char *)v1;
  *(_DWORD *)(a1 + 1) = *(_DWORD *)(v1 + 8);
  *(_WORD *)(a1 + 5) = v2;
}

Swift::Int sub_1001B62A4()
{
  return Hasher._finalize()();
}

void __swiftcall NANDatapath.ConfirmationConfiguration.init(instanceID:initiatorDataAddress:status:)(CoreP2P::NANDatapath::ConfirmationConfiguration *__return_ptr retstr, Swift::UInt8 instanceID, CoreP2P::WiFiAddress *initiatorDataAddress, CoreP2P::NANAttribute::Datapath::Status status)
{
}

BOOL sub_1001B62FC(unint64_t *a1, unint64_t *a2)
{
  return _s7CoreP2P11NANDatapathO25ConfirmationConfigurationV23__derived_struct_equalsySbAE_AEtFZ_0(*a1, *a2);
}

uint64_t NANDatapath.Configuration.init(instanceID:serviceName:responderPublishID:responderManagementAddress:initiatorDataAddress:initiatorSubscribeID:publicOWEKey:protocolType:port:hostname:serviceType:securityConfiguration:internetSharingConfiguration:multicastAddress:multicastServiceType:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, unint64_t a5@<X4>, unint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, uint64_t a11, uint64_t a12, unint64_t a13, unsigned __int8 a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned __int8 a18)
{
  uint64_t v70 = a8;
  unint64_t v71 = a5;
  int v65 = a7;
  int v66 = a4;
  unint64_t v59 = a6;
  uint64_t v63 = a2;
  uint64_t v64 = a3;
  int v62 = a1;
  uint64_t v68 = a16;
  uint64_t v69 = a17;
  uint64_t v67 = a15;
  uint64_t v56 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  uint64_t v58 = (uint64_t)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_1004852B0);
  __chkstk_darwin();
  Swift::UInt8 v21 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_10047CEF0);
  __chkstk_darwin();
  Swift::UInt8 v23 = (char *)&v45 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_10047CF68);
  __chkstk_darwin();
  uint64_t v60 = (uint64_t)&v45 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v26 = (uint64_t *)((char *)&v45 - v25);
  __chkstk_darwin();
  unint64_t v28 = (char *)&v45 - v27;
  __chkstk_darwin();
  uint64_t v30 = (char *)&v45 - v29;
  unint64_t v72 = sub_100035C48((uint64_t)_swiftEmptyArrayStorage);
  if (a10 == 2)
  {
    uint64_t v31 = type metadata accessor for NANGenericServiceProtocol.Attribute();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v30, 1, 1, v31);
  }
  else
  {
    *uint64_t v30 = a10 & 1;
    uint64_t v32 = type metadata accessor for NANGenericServiceProtocol.Attribute();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v30, 0, 1, v32);
  }
  int v57 = a18;
  int v55 = a14;
  sub_1000136F4((uint64_t)v30, (uint64_t)v28, &qword_10047CF68);
  sub_100027C1C((uint64_t)v28, 1);
  sub_1000380B4((uint64_t)v30, &qword_10047CF68);
  sub_1000136F4(a11, (uint64_t)v23, &qword_10047CEF0);
  NANGenericServiceProtocol.port.setter((uint64_t)v23);
  uint64_t v61 = a11;
  if (a13 && (uint64_t v33 = _s7CoreP2P14NANServiceNameVyACSgSScfC_0(a12, a13), v34))
  {
    *unint64_t v26 = v33;
    v26[1]  = v34;
    uint64_t v35 = type metadata accessor for NANGenericServiceProtocol.Attribute();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v26, 0, 1, v35);
  }
  else
  {
    uint64_t v35 = type metadata accessor for NANGenericServiceProtocol.Attribute();
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v26, 1, 1, v35);
  }
  char v36 = v59;
  unint64_t v50 = v59 >> 40;
  unint64_t v48 = HIDWORD(v59);
  unint64_t v47 = v59 >> 24;
  unint64_t v46 = v59 >> 16;
  unint64_t v45 = v59 >> 8;
  unint64_t v53 = HIDWORD(v71);
  unint64_t v54 = v71 >> 40;
  unint64_t v51 = v71 >> 16;
  unint64_t v52 = v71 >> 24;
  unint64_t v49 = v71 >> 8;
  sub_1000136F4((uint64_t)v26, (uint64_t)v28, &qword_10047CF68);
  sub_100027C1C((uint64_t)v28, 2);
  sub_1000380B4((uint64_t)v26, &qword_10047CF68);
  sub_1000136F4(v70, (uint64_t)v21, (uint64_t *)&unk_1004852B0);
  uint64_t v37 = v58;
  sub_10007FCA4(v72, v58);
  sub_100087760((uint64_t)v21, v37 + *(int *)(v56 + 24));
  sub_1001B7DA4(v37, (uint64_t)v28);
  type metadata accessor for NANGenericServiceProtocol.Attribute();
  swift_storeEnumTagMultiPayload();
  unsigned int v38 = *(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56);
  v38(v28, 0, 1, v35);
  uint64_t v39 = v60;
  sub_1000136F4((uint64_t)v28, v60, &qword_10047CF68);
  sub_100027C1C(v39, 7);
  sub_1001B7E08(v37);
  sub_1000380B4((uint64_t)v28, &qword_10047CF68);
  sub_1000380B4((uint64_t)v21, (uint64_t *)&unk_1004852B0);
  sub_10007FCA4(v72, v37);
  char v40 = v65;
  *(_WORD *)(v37 + 1)  = v65;
  sub_1001B7DA4(v37, (uint64_t)v28);
  swift_storeEnumTagMultiPayload();
  v38(v28, 0, 1, v35);
  sub_1000136F4((uint64_t)v28, v39, &qword_10047CF68);
  sub_100027C1C(v39, 7);
  sub_1001B7E08(v37);
  sub_1000380B4((uint64_t)v28, &qword_10047CF68);
  sub_1000380B4(v61, &qword_10047CEF0);
  sub_1000380B4(v70, (uint64_t *)&unk_1004852B0);
  unint64_t v41 = v72;
  *(unsigned char *)a9  = v62;
  *(unsigned char *)(a9 + 1)  = v36;
  *(unsigned char *)(a9 + 2)  = v45;
  *(unsigned char *)(a9 + 3)  = v46;
  *(unsigned char *)(a9 + 4)  = v47;
  *(unsigned char *)(a9 + 5)  = v48;
  *(unsigned char *)(a9 + 6)  = v50;
  *(unsigned char *)(a9 + 7)  = v40;
  uint64_t v42 = v64;
  *(void *)(a9 + 8)  = v63;
  *(void *)(a9 + 16)  = v42;
  *(unsigned char *)(a9 + 24)  = v66;
  *(unsigned char *)(a9 + 25)  = v71;
  *(unsigned char *)(a9 + 26)  = v49;
  *(unsigned char *)(a9 + 27)  = v51;
  *(unsigned char *)(a9 + 28)  = v52;
  *(unsigned char *)(a9 + 29)  = v53;
  *(_WORD *)(a9 + 30)  = v54;
  *(unsigned char *)(a9 + 32)  = v55;
  *(void *)(a9 + 40)  = v41;
  sub_10006EC68(v67, a9 + 48, &qword_100481CA0);
  uint64_t result = sub_10006EC68(v68, a9 + 104, (uint64_t *)&unk_100485B50);
  uint64_t v44 = v69;
  *(_WORD *)(a9 + 148)  = WORD2(v69);
  *(_DWORD *)(a9 + 144)  = v44;
  *(unsigned char *)(a9 + 150)  = BYTE6(v44) & 1;
  *(unsigned char *)(a9 + 151)  = v57 & 1;
  return result;
}

uint64_t NANDatapath.ServiceType.init(apiServiceType:)(uint64_t a1)
{
  if (a1 == 2) {
    return 2;
  }
  else {
    return a1 == 1;
  }
}

uint64_t _s7CoreP2P11NANDatapathO21SecurityConfigurationV23__derived_struct_equalsySbAE_AEtFZ_0(void *a1, void *a2)
{
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2
    || (_s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a1[1], a1[2], a2[1], a2[2]) & 1) == 0)
  {
    return 0;
  }
  uint64_t v4 = a1[3];
  unint64_t v5 = a1[4];
  uint64_t v6 = a2[3];
  unint64_t v7 = a2[4];
  if (v5 >> 60 != 15)
  {
    if (v7 >> 60 != 15)
    {
      sub_100038004(a1[3], a1[4]);
      sub_100038004(v6, v7);
      char v8 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v4, v5, v6, v7);
      sub_10000C95C(v6, v7);
      sub_10000C95C(v4, v5);
      if ((v8 & 1) == 0) {
        return 0;
      }
      goto LABEL_9;
    }
LABEL_7:
    sub_100038004(a1[3], a1[4]);
    sub_100038004(v6, v7);
    sub_10000C95C(v4, v5);
    sub_10000C95C(v6, v7);
    return 0;
  }
  if (v7 >> 60 != 15) {
    goto LABEL_7;
  }
LABEL_9:
  uint64_t v9 = a1[6];
  uint64_t v10 = a2[6];
  if (v9)
  {
    if (v10 && (a1[5] == a2[5] && v9 == v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)) {
      return 1;
    }
  }
  else if (!v10)
  {
    return 1;
  }
  return 0;
}

uint64_t _s7CoreP2P11NANDatapathO21ResponseConfigurationV23__derived_struct_equalsySbAE_AEtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2 || a1[1] != a2[1]) {
    return 0;
  }
  int v4 = *((unsigned __int16 *)a1 + 3);
  int v5 = *((unsigned __int16 *)a2 + 3);
  *(_DWORD *)long long v82 = *(_DWORD *)(a1 + 2);
  *(_WORD *)&v82[4]  = v4;
  if (*(_DWORD *)v82 != *(_DWORD *)(a2 + 2) || v4 != v5) {
    return 0;
  }
  int v7 = *((unsigned __int16 *)a1 + 6);
  int v8 = *((unsigned __int16 *)a2 + 6);
  *(_DWORD *)long long v82 = *((_DWORD *)a1 + 2);
  *(_WORD *)&v82[4]  = v7;
  if (*(_DWORD *)v82 != *((_DWORD *)a2 + 2) || v7 != v8) {
    return 0;
  }
  uint64_t v10 = *((void *)a1 + 2);
  uint64_t v11 = *((void *)a1 + 3);
  unint64_t v12 = *((void *)a1 + 4);
  uint64_t v13 = *((void *)a2 + 2);
  uint64_t v14 = *((void *)a2 + 3);
  unint64_t v15 = *((void *)a2 + 4);
  if (v10 == 4)
  {
    if (v13 == 4) {
      goto LABEL_20;
    }
LABEL_17:
    sub_10013316C(*((void *)a1 + 2), *((void *)a1 + 3), *((void *)a1 + 4));
    sub_10013316C(v13, v14, v15);
    sub_1001331AC(v10, v11, v12);
    sub_1001331AC(v13, v14, v15);
    return 0;
  }
  if (v13 == 4) {
    goto LABEL_17;
  }
  if (v10 != v13) {
    return 0;
  }
  sub_10013316C(*((void *)a1 + 2), *((void *)a1 + 3), *((void *)a1 + 4));
  sub_10013316C(v13, v14, v15);
  char v16 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v11, v12, v14, v15);
  sub_1001331AC(v13, v14, v15);
  sub_1001331AC(v10, v11, v12);
  if ((v16 & 1) == 0) {
    return 0;
  }
LABEL_20:
  int v17 = *((unsigned __int16 *)a1 + 22);
  int v18 = *((unsigned __int16 *)a2 + 22);
  *(_DWORD *)long long v82 = *((_DWORD *)a1 + 10);
  *(_WORD *)&v82[4]  = v17;
  if (*(_DWORD *)v82 != *((_DWORD *)a2 + 10) || v17 != v18) {
    return 0;
  }
  int v20 = *((unsigned __int16 *)a1 + 25);
  int v21 = *((unsigned __int16 *)a2 + 25);
  *(_DWORD *)long long v82 = *(_DWORD *)(a1 + 46);
  *(_WORD *)&v82[4]  = v20;
  if (*(_DWORD *)v82 != *(_DWORD *)(a2 + 46) || v20 != v21) {
    return 0;
  }
  Swift::String v24 = String.lowercased()();
  Swift::String v25 = String.lowercased()();
  if (v24._countAndFlagsBits == v25._countAndFlagsBits && v24._object == v25._object)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    if ((v26 & 1) == 0) {
      return result;
    }
  }
  uint64_t v27 = 0x6576697470616461;
  if (a1[72])
  {
    if (a1[72] == 1)
    {
      unint64_t v28 = 0xE800000000000000;
      uint64_t v29 = 0x656D69746C616572;
    }
    else
    {
      uint64_t v29 = 0x6E6574614C776F6CLL;
      unint64_t v28 = 0xEA00000000007963;
    }
  }
  else
  {
    unint64_t v28 = 0xE800000000000000;
    uint64_t v29 = 0x6576697470616461;
  }
  if (a2[72])
  {
    if (a2[72] == 1)
    {
      unint64_t v30 = 0xE800000000000000;
      uint64_t v27 = 0x656D69746C616572;
    }
    else
    {
      uint64_t v27 = 0x6E6574614C776F6CLL;
      unint64_t v30 = 0xEA00000000007963;
    }
  }
  else
  {
    unint64_t v30 = 0xE800000000000000;
  }
  if (v29 == v27 && v28 == v30)
  {
    swift_bridgeObjectRelease_n();
LABEL_49:
    if (a1[73] != a2[73] || a1[74] != a2[74]) {
      return 0;
    }
    uint64_t v32 = *((void *)a1 + 10);
    uint64_t v33 = *((void *)a1 + 11);
    unint64_t v34 = *((void *)a1 + 12);
    uint64_t v35 = *((void *)a1 + 13);
    unint64_t v37 = *((void *)a1 + 14);
    uint64_t v36 = *((void *)a1 + 15);
    uint64_t v38 = *((void *)a1 + 16);
    uint64_t v39 = *((void *)a2 + 10);
    uint64_t v40 = *((void *)a2 + 11);
    unint64_t v41 = *((void *)a2 + 12);
    uint64_t v42 = *((void *)a2 + 13);
    unint64_t v44 = *((void *)a2 + 14);
    uint64_t v43 = *((void *)a2 + 15);
    uint64_t v45 = *((void *)a2 + 16);
    if (v38 == 1)
    {
      if (v45 == 1) {
        goto LABEL_57;
      }
    }
    else if (v45 != 1)
    {
      LOBYTE(v88[0])  = *((void *)a1 + 10);
      v88[1]  = v33;
      v88[2]  = v34;
      v88[3]  = v35;
      v88[4]  = v37;
      v88[5]  = v36;
      v88[6]  = v38;
      LOBYTE(v89[0])  = v39;
      v89[1]  = v40;
      v89[2]  = v41;
      v89[3]  = v42;
      v89[4]  = v44;
      v89[5]  = v43;
      v89[6]  = v45;
      uint64_t v77 = v38;
      uint64_t v79 = v32;
      uint64_t v69 = v33;
      unint64_t v70 = v34;
      uint64_t v52 = v33;
      unint64_t v53 = v34;
      uint64_t v54 = v35;
      uint64_t v55 = v35;
      unint64_t v71 = v37;
      uint64_t v72 = v36;
      unint64_t v56 = v44;
      uint64_t v57 = v43;
      uint64_t v58 = v45;
      sub_1001BA2CC(v32, v52, v53, v55, v37, v36, v38);
      sub_1001BA2CC(v39, v40, v41, v42, v56, v57, v58);
      char v75 = _s7CoreP2P11NANDatapathO21SecurityConfigurationV23__derived_struct_equalsySbAE_AEtFZ_0(v88, v89);
      sub_1000CAB20(v39, v40, v41, v42, v56, v57, v58);
      sub_1000CAB20(v79, v69, v70, v54, v71, v72, v77);
      if ((v75 & 1) == 0) {
        return 0;
      }
LABEL_57:
      sub_1000136F4((uint64_t)(a1 + 136), (uint64_t)v87, (uint64_t *)&unk_100486320);
      sub_1000136F4((uint64_t)(a2 + 136), (uint64_t)v86, (uint64_t *)&unk_100486320);
      sub_1000136F4((uint64_t)v87, (uint64_t)v82, (uint64_t *)&unk_100486320);
      sub_1000136F4((uint64_t)v86, (uint64_t)v84, (uint64_t *)&unk_100486320);
      if (v83 == 255)
      {
        sub_1000380B4((uint64_t)v86, (uint64_t *)&unk_100486320);
        sub_1000380B4((uint64_t)v87, (uint64_t *)&unk_100486320);
        if (v85 == 255)
        {
          sub_1000380B4((uint64_t)v82, (uint64_t *)&unk_100486320);
LABEL_63:
          if (a1[183])
          {
            if (!a2[183]) {
              return 0;
            }
          }
          else
          {
            if (a2[183]) {
              return 0;
            }
            unint64_t v60 = *(unsigned int *)(a1 + 177) | ((unint64_t)*(unsigned __int16 *)(a1 + 181) << 32);
            unint64_t v61 = *(unsigned int *)(a2 + 177) | ((unint64_t)*(unsigned __int16 *)(a2 + 181) << 32);
            v62.i64[0]  = 0xFFFFFFFFFFFFLL;
            v62.i64[1]  = 0xFFFFFFFFFFFFLL;
            uint64x2_t v63 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v60), v62);
            int16x8_t v64 = (int16x8_t)vshlq_u64(v63, (uint64x2_t)xmmword_1003B2EB0);
            uint64x2_t v65 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v61), v62);
            int64x2_t v66 = (int64x2_t)vshlq_u64(v65, (uint64x2_t)xmmword_1003B2EB0);
            int16x8_t v67 = (int16x8_t)vshlq_u64(v65, (uint64x2_t)xmmword_1003B2EA0);
            v82[0]  = *(_DWORD *)(a1 + 177);
            *(int32x2_t *)v63.i8  = vmovn_s64((int64x2_t)vshlq_u64(v63, (uint64x2_t)xmmword_1003B2EA0));
            *(int32x2_t *)v64.i8  = vmovn_s64((int64x2_t)v64);
            v64.i16[1]  = v64.i16[2];
            v64.i16[2]  = v63.i16[0];
            v64.i16[3]  = v63.i16[2];
            *(_DWORD *)&v82[1]  = vmovn_s16(v64).u32[0];
            v82[5]  = BYTE5(v60);
            v87[0]  = v61;
            *(int32x2_t *)v63.i8  = vmovn_s64((int64x2_t)v67);
            *(int32x2_t *)v67.i8  = vmovn_s64(v66);
            v67.i16[1]  = v67.i16[2];
            v67.i16[2]  = v63.i16[0];
            v67.i16[3]  = v63.i16[2];
            *(_DWORD *)&v87[1]  = vmovn_s16(v67).u32[0];
            v87[5]  = BYTE5(v61);
            if (*(_DWORD *)v82 != *(_DWORD *)v87 || *(unsigned __int16 *)&v82[4] != *(unsigned __int16 *)&v87[4]) {
              return 0;
            }
          }
          if (a1[184])
          {
            if (a2[184]) {
              return 1;
            }
          }
          else if ((a2[184] & 1) == 0)
          {
            return 1;
          }
          return 0;
        }
      }
      else
      {
        sub_1000136F4((uint64_t)v82, (uint64_t)v81, (uint64_t *)&unk_100486320);
        if (v85 != 255)
        {
          sub_1001B7C98((uint64_t)v84, (uint64_t)v80);
          char v59 = _s7CoreP2P10NANPublishO28InternetSharingConfigurationO2eeoiySbAE_AEtFZ_0((uint64_t)v81, (uint64_t)v80);
          sub_1001B7D50((uint64_t)v80);
          sub_1000380B4((uint64_t)v86, (uint64_t *)&unk_100486320);
          sub_1000380B4((uint64_t)v87, (uint64_t *)&unk_100486320);
          sub_1001B7D50((uint64_t)v81);
          sub_1000380B4((uint64_t)v82, (uint64_t *)&unk_100486320);
          if ((v59 & 1) == 0) {
            return 0;
          }
          goto LABEL_63;
        }
        sub_1000380B4((uint64_t)v86, (uint64_t *)&unk_100486320);
        sub_1000380B4((uint64_t)v87, (uint64_t *)&unk_100486320);
        sub_1001B7D50((uint64_t)v81);
      }
      sub_1000380B4((uint64_t)v82, &qword_100481DA8);
      return 0;
    }
    uint64_t v46 = *((void *)a1 + 10);
    uint64_t v76 = *((void *)a1 + 16);
    uint64_t v78 = v46;
    uint64_t v73 = *((void *)a2 + 11);
    unint64_t v74 = *((void *)a2 + 14);
    unint64_t v47 = *((void *)a2 + 12);
    unint64_t v48 = *((void *)a1 + 14);
    uint64_t v49 = *((void *)a1 + 15);
    uint64_t v50 = v43;
    uint64_t v51 = v45;
    sub_1001BA2CC(v46, v33, v34, v35, v37, v36, v38);
    sub_1001BA2CC(v39, v73, v47, v42, v74, v50, v51);
    sub_1000CAB20(v78, v33, v34, v35, v48, v49, v76);
    sub_1000CAB20(v39, v73, v47, v42, v74, v50, v51);
    return 0;
  }
  char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = 0;
  if (v31) {
    goto LABEL_49;
  }
  return result;
}

BOOL _s7CoreP2P11NANDatapathO25ConfirmationConfigurationV23__derived_struct_equalsySbAE_AEtFZ_0(unint64_t a1, unint64_t a2)
{
  if (a1 != a2) {
    return 0;
  }
  LOBYTE(v7)  = BYTE1(a1);
  BYTE1(v7)  = BYTE2(a1);
  BYTE2(v7)  = BYTE3(a1);
  HIBYTE(v7)  = BYTE4(a1);
  LOBYTE(v8)  = BYTE5(a1);
  HIBYTE(v8)  = BYTE6(a1);
  LOBYTE(v5)  = BYTE1(a2);
  BYTE1(v5)  = BYTE2(a2);
  BYTE2(v5)  = BYTE3(a2);
  HIBYTE(v5)  = BYTE4(a2);
  LOBYTE(v6)  = BYTE5(a2);
  HIBYTE(v6)  = BYTE6(a2);
  return v7 == v5 && v8 == v6 && HIBYTE(a1) == HIBYTE(a2);
}

uint64_t _s7CoreP2P11NANDatapathO13ConfigurationV23__derived_struct_equalsySbAE_AEtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  int v4 = *(unsigned __int16 *)(a1 + 5);
  int v5 = *(unsigned __int16 *)(a2 + 5);
  *(_DWORD *)uint64_t v73 = *(_DWORD *)(a1 + 1);
  *(_WORD *)&v73[4]  = v4;
  BOOL v6 = *(_DWORD *)v73 == *(_DWORD *)(a2 + 1) && v4 == v5;
  if (!v6 || a1[7] != a2[7]) {
    return 0;
  }
  Swift::String v7 = String.lowercased()();
  Swift::String v8 = String.lowercased()();
  if (v7._countAndFlagsBits == v8._countAndFlagsBits && v7._object == v8._object)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    if ((v9 & 1) == 0) {
      return result;
    }
  }
  if (a1[24] != a2[24]) {
    return 0;
  }
  int v11 = *(unsigned __int16 *)(a1 + 29);
  int v12 = *(unsigned __int16 *)(a2 + 29);
  *(_DWORD *)uint64_t v73 = *(_DWORD *)(a1 + 25);
  *(_WORD *)&v73[4]  = v11;
  if (*(_DWORD *)v73 != *(_DWORD *)(a2 + 25) || v11 != v12) {
    return 0;
  }
  if (a1[31]) {
    uint64_t v14 = 0x73616369746C756DLL;
  }
  else {
    uint64_t v14 = 0x74736163696E75;
  }
  if (a1[31]) {
    unint64_t v15 = 0xE900000000000074;
  }
  else {
    unint64_t v15 = 0xE700000000000000;
  }
  if (a2[31]) {
    uint64_t v16 = 0x73616369746C756DLL;
  }
  else {
    uint64_t v16 = 0x74736163696E75;
  }
  if (a2[31]) {
    unint64_t v17 = 0xE900000000000074;
  }
  else {
    unint64_t v17 = 0xE700000000000000;
  }
  if (v14 == v16 && v15 == v17)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    if ((v18 & 1) == 0) {
      return result;
    }
  }
  uint64_t v19 = 0x6576697470616461;
  if (a1[32])
  {
    if (a1[32] == 1)
    {
      unint64_t v20 = 0xE800000000000000;
      uint64_t v21 = 0x656D69746C616572;
    }
    else
    {
      uint64_t v21 = 0x6E6574614C776F6CLL;
      unint64_t v20 = 0xEA00000000007963;
    }
  }
  else
  {
    unint64_t v20 = 0xE800000000000000;
    uint64_t v21 = 0x6576697470616461;
  }
  if (a2[32])
  {
    if (a2[32] == 1)
    {
      unint64_t v22 = 0xE800000000000000;
      uint64_t v19 = 0x656D69746C616572;
    }
    else
    {
      uint64_t v19 = 0x6E6574614C776F6CLL;
      unint64_t v22 = 0xEA00000000007963;
    }
  }
  else
  {
    unint64_t v22 = 0xE800000000000000;
  }
  if (v21 == v19 && v20 == v22)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_49;
  }
  char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = 0;
  if (v23)
  {
LABEL_49:
    if ((sub_100081B6C(*((void *)a1 + 5), *((void *)a2 + 5)) & 1) == 0) {
      return 0;
    }
    uint64_t v24 = *((void *)a1 + 6);
    uint64_t v25 = *((void *)a1 + 7);
    unint64_t v27 = *((void *)a1 + 8);
    uint64_t v26 = *((void *)a1 + 9);
    unint64_t v29 = *((void *)a1 + 10);
    uint64_t v28 = *((void *)a1 + 11);
    uint64_t v30 = *((void *)a1 + 12);
    uint64_t v31 = *((void *)a2 + 6);
    uint64_t v32 = *((void *)a2 + 7);
    unint64_t v33 = *((void *)a2 + 8);
    uint64_t v34 = *((void *)a2 + 9);
    unint64_t v36 = *((void *)a2 + 10);
    uint64_t v35 = *((void *)a2 + 11);
    uint64_t v37 = *((void *)a2 + 12);
    if (v30 == 1)
    {
      if (v37 == 1) {
        goto LABEL_56;
      }
    }
    else if (v37 != 1)
    {
      LOBYTE(v79[0])  = *((void *)a1 + 6);
      v79[1]  = v25;
      v79[2]  = v27;
      v79[3]  = v26;
      v79[4]  = v29;
      v79[5]  = v28;
      v79[6]  = v30;
      LOBYTE(v80[0])  = v31;
      v80[1]  = v32;
      v80[2]  = v33;
      v80[3]  = v34;
      v80[4]  = v36;
      v80[5]  = v35;
      v80[6]  = v37;
      uint64_t v56 = v25;
      uint64_t v57 = v24;
      uint64_t v61 = v32;
      uint64_t v62 = v31;
      uint64_t v41 = v24;
      uint64_t v42 = v25;
      unint64_t v43 = v33;
      uint64_t v44 = v34;
      uint64_t v64 = v28;
      unint64_t v66 = v29;
      uint64_t v45 = v30;
      sub_1001BA2CC(v41, v42, v27, v26, v29, v28, v30);
      sub_1001BA2CC(v62, v61, v43, v44, v36, v35, v37);
      char v59 = _s7CoreP2P11NANDatapathO21SecurityConfigurationV23__derived_struct_equalsySbAE_AEtFZ_0(v79, v80);
      sub_1000CAB20(v62, v61, v43, v44, v36, v35, v37);
      sub_1000CAB20(v57, v56, v27, v26, v66, v64, v45);
      if ((v59 & 1) == 0) {
        return 0;
      }
LABEL_56:
      sub_1000136F4((uint64_t)(a1 + 104), (uint64_t)v78, (uint64_t *)&unk_100485B50);
      sub_1000136F4((uint64_t)(a2 + 104), (uint64_t)v77, (uint64_t *)&unk_100485B50);
      sub_1000136F4((uint64_t)v78, (uint64_t)v73, (uint64_t *)&unk_100485B50);
      sub_1000136F4((uint64_t)v77, (uint64_t)&v75, (uint64_t *)&unk_100485B50);
      if (v74 == 1)
      {
        sub_1000380B4((uint64_t)v77, (uint64_t *)&unk_100485B50);
        sub_1000380B4((uint64_t)v78, (uint64_t *)&unk_100485B50);
        if (v76 == 1)
        {
          sub_1000380B4((uint64_t)v73, (uint64_t *)&unk_100485B50);
LABEL_69:
          if (a1[150])
          {
            if (!a2[150]) {
              return 0;
            }
          }
          else
          {
            if (a2[150]) {
              return 0;
            }
            unint64_t v47 = *((unsigned int *)a1 + 36) | ((unint64_t)*((unsigned __int16 *)a1 + 74) << 32);
            unint64_t v48 = *((unsigned int *)a2 + 36) | ((unint64_t)*((unsigned __int16 *)a2 + 74) << 32);
            v49.i64[0]  = 0xFFFFFFFFFFFFLL;
            v49.i64[1]  = 0xFFFFFFFFFFFFLL;
            uint64x2_t v50 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v47), v49);
            int16x8_t v51 = (int16x8_t)vshlq_u64(v50, (uint64x2_t)xmmword_1003B2EB0);
            uint64x2_t v52 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v48), v49);
            int64x2_t v53 = (int64x2_t)vshlq_u64(v52, (uint64x2_t)xmmword_1003B2EB0);
            int16x8_t v54 = (int16x8_t)vshlq_u64(v52, (uint64x2_t)xmmword_1003B2EA0);
            v73[0]  = *((_DWORD *)a1 + 36);
            *(int32x2_t *)v50.i8  = vmovn_s64((int64x2_t)vshlq_u64(v50, (uint64x2_t)xmmword_1003B2EA0));
            *(int32x2_t *)v51.i8  = vmovn_s64((int64x2_t)v51);
            v51.i16[1]  = v51.i16[2];
            v51.i16[2]  = v50.i16[0];
            v51.i16[3]  = v50.i16[2];
            *(_DWORD *)&v73[1]  = vmovn_s16(v51).u32[0];
            v73[5]  = BYTE5(v47);
            v67[0]  = v48;
            *(int32x2_t *)v50.i8  = vmovn_s64((int64x2_t)v54);
            *(int32x2_t *)v54.i8  = vmovn_s64(v53);
            v54.i16[1]  = v54.i16[2];
            v54.i16[2]  = v50.i16[0];
            v54.i16[3]  = v50.i16[2];
            *(_DWORD *)&v67[1]  = vmovn_s16(v54).u32[0];
            v67[5]  = BYTE5(v48);
            if (*(_DWORD *)v73 != *(_DWORD *)v67 || *(unsigned __int16 *)&v73[4] != *(unsigned __int16 *)&v67[4]) {
              return 0;
            }
          }
          if (a1[151])
          {
            if (a2[151]) {
              return 1;
            }
          }
          else if ((a2[151] & 1) == 0)
          {
            return 1;
          }
          return 0;
        }
LABEL_61:
        sub_1000380B4((uint64_t)v73, &qword_100481DB0);
        return 0;
      }
      sub_1000136F4((uint64_t)v73, (uint64_t)v72, (uint64_t *)&unk_100485B50);
      if (v76 == 1)
      {
        sub_1000380B4((uint64_t)v77, (uint64_t *)&unk_100485B50);
        sub_1000380B4((uint64_t)v78, (uint64_t *)&unk_100485B50);
        sub_1001B7BFC((uint64_t)v72);
        goto LABEL_61;
      }
      sub_10006EF50(&v75, (uint64_t)v71);
      sub_1001B7B7C(v72, (uint64_t)v67);
      sub_1001B7B7C(v71, (uint64_t)v69);
      if (v68)
      {
        if (v70)
        {
          sub_1001B7BFC((uint64_t)v69);
LABEL_67:
          sub_1001B7BFC((uint64_t)v67);
          char v46 = 1;
LABEL_68:
          sub_1001B7BFC((uint64_t)v71);
          sub_1000380B4((uint64_t)v77, (uint64_t *)&unk_100485B50);
          sub_1000380B4((uint64_t)v78, (uint64_t *)&unk_100485B50);
          sub_1001B7BFC((uint64_t)v72);
          sub_1000380B4((uint64_t)v73, (uint64_t *)&unk_100485B50);
          if ((v46 & 1) == 0) {
            return 0;
          }
          goto LABEL_69;
        }
      }
      else if (!v70)
      {
        goto LABEL_67;
      }
      sub_1000380B4((uint64_t)v67, &qword_100481C98);
      char v46 = 0;
      goto LABEL_68;
    }
    uint64_t v38 = *((void *)a2 + 6);
    uint64_t v60 = *((void *)a2 + 7);
    unint64_t v39 = *((void *)a2 + 8);
    uint64_t v58 = v37;
    uint64_t v63 = v28;
    unint64_t v65 = v29;
    uint64_t v40 = v30;
    sub_1001BA2CC(v24, v25, v27, v26, v29, v28, v30);
    sub_1001BA2CC(v38, v60, v39, v34, v36, v35, v58);
    sub_1000CAB20(v24, v25, v27, v26, v65, v63, v40);
    sub_1000CAB20(v38, v60, v39, v34, v36, v35, v58);
    return 0;
  }
  return result;
}

unint64_t _s7CoreP2P11NANDatapathO11ServiceTypeO8rawValueAESgSS_tcfC_0(Swift::String string)
{
  object  = string._object;
  v2._countAndFlagsBits  = string._countAndFlagsBits;
  v2._object  = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10044E2B8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t sub_1001B7B7C(long long *a1, uint64_t a2)
{
  unint64_t v3 = *((void *)a1 + 3);
  if (v3 < 0xFFFFFFFF)
  {
    long long v5 = *a1;
    long long v6 = a1[1];
    *(void *)(a2 + 32)  = *((void *)a1 + 4);
    *(_OWORD *)a2  = v5;
    *(_OWORD *)(a2 + 16)  = v6;
  }
  else
  {
    uint64_t v4 = *((void *)a1 + 4);
    *(void *)(a2 + 24)  = v3;
    *(void *)(a2 + 32)  = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a2);
  }
  return a2;
}

uint64_t sub_1001B7BFC(uint64_t a1)
{
  if (*(void *)(a1 + 24) >= 0xFFFFFFFFuLL) {
    sub_100010754(a1);
  }
  return a1;
}

uint64_t sub_1001B7C38(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001B7C68(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001B7C98(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1001B7CF4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1001B7D50(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001B7DA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001B7E08(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1001B7E68()
{
  unint64_t result = qword_100481CA8;
  if (!qword_100481CA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481CA8);
  }
  return result;
}

unint64_t sub_1001B7EC0()
{
  unint64_t result = qword_100481CB0;
  if (!qword_100481CB0)
  {
    sub_100014434(&qword_100481CB8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481CB0);
  }
  return result;
}

unint64_t sub_1001B7F20()
{
  unint64_t result = qword_100481CC0;
  if (!qword_100481CC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481CC0);
  }
  return result;
}

unint64_t sub_1001B7F78()
{
  unint64_t result = qword_100481CC8;
  if (!qword_100481CC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481CC8);
  }
  return result;
}

unint64_t sub_1001B7FD0()
{
  unint64_t result = qword_100481CD0;
  if (!qword_100481CD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481CD0);
  }
  return result;
}

unint64_t sub_1001B8028()
{
  unint64_t result = qword_100481CD8;
  if (!qword_100481CD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481CD8);
  }
  return result;
}

unint64_t sub_1001B8080()
{
  unint64_t result = qword_100481CE0;
  if (!qword_100481CE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481CE0);
  }
  return result;
}

unint64_t sub_1001B80D4(uint64_t a1)
{
  unint64_t result = sub_1001B80FC();
  *(void *)(a1 + 8)  = result;
  return result;
}

unint64_t sub_1001B80FC()
{
  unint64_t result = qword_100481CE8;
  if (!qword_100481CE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481CE8);
  }
  return result;
}

unint64_t sub_1001B8154()
{
  unint64_t result = qword_100485270;
  if (!qword_100485270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100485270);
  }
  return result;
}

uint64_t sub_1001B81A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001B837C(a1, a2, a3, (uint64_t (*)(void))sub_1001B81D4, (uint64_t (*)(void))sub_1001B8228);
}

unint64_t sub_1001B81D4()
{
  unint64_t result = qword_100481D30;
  if (!qword_100481D30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481D30);
  }
  return result;
}

unint64_t sub_1001B8228()
{
  unint64_t result = qword_100481D38;
  if (!qword_100481D38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481D38);
  }
  return result;
}

unint64_t sub_1001B8280()
{
  unint64_t result = qword_100481D40;
  if (!qword_100481D40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481D40);
  }
  return result;
}

unint64_t sub_1001B82D4(uint64_t a1)
{
  unint64_t result = sub_1001B82FC();
  *(void *)(a1 + 8)  = result;
  return result;
}

unint64_t sub_1001B82FC()
{
  unint64_t result = qword_100484330;
  if (!qword_100484330)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100484330);
  }
  return result;
}

uint64_t sub_1001B8350(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001B837C(a1, a2, a3, (uint64_t (*)(void))sub_1001B83B8, (uint64_t (*)(void))sub_1001B840C);
}

uint64_t sub_1001B837C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  *(void *)(a1 + 8)  = a4();
  uint64_t result = a5();
  *(void *)(a1 + 16)  = result;
  return result;
}

unint64_t sub_1001B83B8()
{
  unint64_t result = qword_100481D88;
  if (!qword_100481D88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481D88);
  }
  return result;
}

unint64_t sub_1001B840C()
{
  unint64_t result = qword_100481D90;
  if (!qword_100481D90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481D90);
  }
  return result;
}

unint64_t sub_1001B8464()
{
  unint64_t result = qword_100481D98;
  if (!qword_100481D98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481D98);
  }
  return result;
}

unint64_t sub_1001B84BC()
{
  unint64_t result = qword_100481DA0;
  if (!qword_100481DA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481DA0);
  }
  return result;
}

ValueMetadata *type metadata accessor for NANDatapath()
{
  return &type metadata for NANDatapath;
}

ValueMetadata *type metadata accessor for NANDatapath.DatapathType()
{
  return &type metadata for NANDatapath.DatapathType;
}

unsigned char *storeEnumTagSinglePayload for NANDatapath.ServiceType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001B8600);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANDatapath.ServiceType()
{
  return &type metadata for NANDatapath.ServiceType;
}

ValueMetadata *type metadata accessor for NANDatapath.ParametersType()
{
  return &type metadata for NANDatapath.ParametersType;
}

unsigned char *_s7CoreP2P11NANDatapathO12DatapathTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001B8714);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANDatapath.ParametersMulticastType()
{
  return &type metadata for NANDatapath.ParametersMulticastType;
}

uint64_t destroy for NANDatapath.InternetSharingConfiguration(uint64_t a1)
{
  if (*(void *)(a1 + 24) >= 0xFFFFFFFFuLL) {
    return sub_100010754(a1);
  }
  return a1;
}

uint64_t initializeWithCopy for NANDatapath.InternetSharingConfiguration(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 24);
  if (v3 < 0xFFFFFFFF)
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1  = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16)  = v5;
    *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  }
  else
  {
    uint64_t v4 = *(void *)(a2 + 32);
    *(void *)(a1 + 24)  = v3;
    *(void *)(a1 + 32)  = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
  }
  return a1;
}

uint64_t assignWithCopy for NANDatapath.InternetSharingConfiguration(uint64_t a1, long long *a2)
{
  unint64_t v4 = *((void *)a2 + 3);
  if (*(void *)(a1 + 24) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *(void *)(a1 + 24)  = v4;
      *(void *)(a1 + 32)  = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v4 - 8))(a1, a2);
      return a1;
    }
LABEL_7:
    long long v5 = *a2;
    long long v6 = a2[1];
    *(void *)(a1 + 32)  = *((void *)a2 + 4);
    *(_OWORD *)a1  = v5;
    *(_OWORD *)(a1 + 16)  = v6;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    sub_100010754(a1);
    goto LABEL_7;
  }
  sub_1001B8898((uint64_t *)a1, (uint64_t *)a2);
  return a1;
}

uint64_t *sub_1001B8898(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    unint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        unint64_t result = (uint64_t *)swift_release();
        *unint64_t v3 = v12;
      }
      else
      {
        int v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3]  = v5;
      result[4]  = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *unint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *unint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

uint64_t assignWithTake for NANDatapath.InternetSharingConfiguration(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24) >= 0xFFFFFFFFuLL) {
    sub_100010754(a1);
  }
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16)  = v4;
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANDatapath.InternetSharingConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3)  = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for NANDatapath.InternetSharingConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 32)  = 0;
    *(_OWORD *)unint64_t result = 0u;
    *(_OWORD *)(result + 16)  = 0u;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40)  = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40)  = 0;
    }
    if (a2) {
      *(void *)(result + 24)  = a2;
    }
  }
  return result;
}

uint64_t sub_1001B8BC4(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1)  = -1;
  }
  return (v1 + 1);
}

double sub_1001B8BDC(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 8)  = 0u;
    *(_OWORD *)(a1 + 24)  = 0u;
    *(void *)a1  = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(void *)(a1 + 24)  = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for NANDatapath.InternetSharingConfiguration()
{
  return &type metadata for NANDatapath.InternetSharingConfiguration;
}

uint64_t destroy for NANDatapath.SecurityConfiguration(void *a1)
{
  sub_10000C970(a1[1], a1[2]);
  unint64_t v2 = a1[4];
  if (v2 >> 60 != 15) {
    sub_10000C970(a1[3], v2);
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NANDatapath.SecurityConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  sub_100013D44(v4, v5);
  *(void *)(a1 + 8)  = v4;
  *(void *)(a1 + 16)  = v5;
  uint64_t v6 = (uint64_t *)(a2 + 24);
  unint64_t v7 = *(void *)(a2 + 32);
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 24)  = *(_OWORD *)v6;
  }
  else
  {
    uint64_t v8 = *v6;
    sub_100013D44(*v6, *(void *)(a2 + 32));
    *(void *)(a1 + 24)  = v8;
    *(void *)(a1 + 32)  = v7;
  }
  uint64_t v9 = *(void *)(a2 + 48);
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  *(void *)(a1 + 48)  = v9;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NANDatapath.SecurityConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  sub_100013D44(v4, v5);
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 8)  = v4;
  *(void *)(a1 + 16)  = v5;
  sub_10000C970(v6, v7);
  uint64_t v8 = (uint64_t *)(a2 + 24);
  unint64_t v9 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32) >> 60 != 15)
  {
    if (v9 >> 60 != 15)
    {
      uint64_t v11 = *v8;
      sub_100013D44(*v8, *(void *)(a2 + 32));
      uint64_t v12 = *(void *)(a1 + 24);
      unint64_t v13 = *(void *)(a1 + 32);
      *(void *)(a1 + 24)  = v11;
      *(void *)(a1 + 32)  = v9;
      sub_10000C970(v12, v13);
      goto LABEL_8;
    }
    sub_1001B8DF8(a1 + 24);
    goto LABEL_6;
  }
  if (v9 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 24)  = *(_OWORD *)v8;
    goto LABEL_8;
  }
  uint64_t v10 = *v8;
  sub_100013D44(*v8, *(void *)(a2 + 32));
  *(void *)(a1 + 24)  = v10;
  *(void *)(a1 + 32)  = v9;
LABEL_8:
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  *(void *)(a1 + 48)  = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001B8DF8(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for NANDatapath.SecurityConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  sub_10000C970(v4, v5);
  uint64_t v6 = (void *)(a2 + 24);
  unint64_t v7 = *(void *)(a1 + 32);
  if (v7 >> 60 != 15)
  {
    unint64_t v8 = *(void *)(a2 + 32);
    if (v8 >> 60 != 15)
    {
      uint64_t v9 = *(void *)(a1 + 24);
      *(void *)(a1 + 24)  = *v6;
      *(void *)(a1 + 32)  = v8;
      sub_10000C970(v9, v7);
      goto LABEL_6;
    }
    sub_1001B8DF8(a1 + 24);
  }
  *(_OWORD *)(a1 + 24)  = *(_OWORD *)v6;
LABEL_6:
  uint64_t v10 = *(void *)(a2 + 48);
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  *(void *)(a1 + 48)  = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NANDatapath.SecurityConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3)  = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NANDatapath.SecurityConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)double result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56)  = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56)  = 0;
    }
    if (a2) {
      *(void *)(result + 48)  = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANDatapath.SecurityConfiguration()
{
  return &type metadata for NANDatapath.SecurityConfiguration;
}

uint64_t destroy for NANDatapath.Configuration(void *a1)
{
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (a1[12] != 1)
  {
    sub_10000C970(a1[7], a1[8]);
    unint64_t v3 = a1[10];
    if (v3 >> 60 != 15) {
      sub_10000C970(a1[9], v3);
    }
    uint64_t result = swift_bridgeObjectRelease();
  }
  if (a1[16] >= 2uLL)
  {
    return sub_100010754((uint64_t)(a1 + 13));
  }
  return result;
}

uint64_t initializeWithCopy for NANDatapath.Configuration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 1)  = *(_DWORD *)(a2 + 1);
  *(_WORD *)(a1 + 5)  = *(_WORD *)(a2 + 5);
  *(unsigned char *)(a1 + 7)  = *(unsigned char *)(a2 + 7);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = v4;
  *(unsigned char *)(a1 + 24)  = *(unsigned char *)(a2 + 24);
  *(_WORD *)(a1 + 29)  = *(_WORD *)(a2 + 29);
  *(_DWORD *)(a1 + 25)  = *(_DWORD *)(a2 + 25);
  *(unsigned char *)(a1 + 31)  = *(unsigned char *)(a2 + 31);
  *(unsigned char *)(a1 + 32)  = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v5 == 1)
  {
    long long v6 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48)  = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64)  = v6;
    *(_OWORD *)(a1 + 80)  = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96)  = *(void *)(a2 + 96);
  }
  else
  {
    *(unsigned char *)(a1 + 48)  = *(unsigned char *)(a2 + 48);
    uint64_t v7 = *(void *)(a2 + 56);
    unint64_t v8 = *(void *)(a2 + 64);
    sub_100013D44(v7, v8);
    *(void *)(a1 + 56)  = v7;
    *(void *)(a1 + 64)  = v8;
    uint64_t v9 = (uint64_t *)(a2 + 72);
    unint64_t v10 = *(void *)(a2 + 80);
    if (v10 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 72)  = *(_OWORD *)v9;
    }
    else
    {
      uint64_t v11 = *v9;
      sub_100013D44(*v9, *(void *)(a2 + 80));
      *(void *)(a1 + 72)  = v11;
      *(void *)(a1 + 80)  = v10;
    }
    *(void *)(a1 + 88)  = *(void *)(a2 + 88);
    *(void *)(a1 + 96)  = v5;
    swift_bridgeObjectRetain();
  }
  uint64_t v12 = (_OWORD *)(a1 + 104);
  unint64_t v13 = (_OWORD *)(a2 + 104);
  unint64_t v14 = *(void *)(a2 + 128);
  if (v14 > 1)
  {
    uint64_t v16 = *(void *)(a2 + 136);
    *(void *)(a1 + 128)  = v14;
    *(void *)(a1 + 136)  = v16;
    (**(void (***)(_OWORD *, _OWORD *))(v14 - 8))(v12, v13);
  }
  else
  {
    long long v15 = *(_OWORD *)(a2 + 120);
    *uint64_t v12 = *v13;
    *(_OWORD *)(a1 + 120)  = v15;
    *(void *)(a1 + 136)  = *(void *)(a2 + 136);
  }
  *(_DWORD *)(a1 + 144)  = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 147)  = *(_DWORD *)(a2 + 147);
  *(unsigned char *)(a1 + 151)  = *(unsigned char *)(a2 + 151);
  return a1;
}

uint64_t assignWithCopy for NANDatapath.Configuration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1)  = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2)  = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3)  = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(a1 + 4)  = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a1 + 5)  = *(unsigned char *)(a2 + 5);
  *(unsigned char *)(a1 + 6)  = *(unsigned char *)(a2 + 6);
  *(unsigned char *)(a1 + 7)  = *(unsigned char *)(a2 + 7);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24)  = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25)  = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26)  = *(unsigned char *)(a2 + 26);
  *(unsigned char *)(a1 + 27)  = *(unsigned char *)(a2 + 27);
  *(unsigned char *)(a1 + 28)  = *(unsigned char *)(a2 + 28);
  *(unsigned char *)(a1 + 29)  = *(unsigned char *)(a2 + 29);
  *(unsigned char *)(a1 + 30)  = *(unsigned char *)(a2 + 30);
  *(unsigned char *)(a1 + 31)  = *(unsigned char *)(a2 + 31);
  *(unsigned char *)(a1 + 32)  = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (_OWORD *)(a1 + 48);
  uint64_t v5 = (long long *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 96);
  if (*(void *)(a1 + 96) != 1)
  {
    if (v6 == 1)
    {
      sub_1001B9558((void *)(a1 + 48));
      long long v11 = *(_OWORD *)(a2 + 64);
      long long v10 = *(_OWORD *)(a2 + 80);
      long long v12 = *v5;
      *(void *)(a1 + 96)  = *(void *)(a2 + 96);
      *(_OWORD *)(a1 + 64)  = v11;
      *(_OWORD *)(a1 + 80)  = v10;
      *uint64_t v4 = v12;
      goto LABEL_18;
    }
    *(unsigned char *)(a1 + 48)  = *(unsigned char *)(a2 + 48);
    uint64_t v17 = *(void *)(a2 + 56);
    unint64_t v18 = *(void *)(a2 + 64);
    sub_100013D44(v17, v18);
    uint64_t v19 = *(void *)(a1 + 56);
    unint64_t v20 = *(void *)(a1 + 64);
    *(void *)(a1 + 56)  = v17;
    *(void *)(a1 + 64)  = v18;
    sub_10000C970(v19, v20);
    uint64_t v21 = (uint64_t *)(a2 + 72);
    unint64_t v22 = *(void *)(a2 + 80);
    if (*(void *)(a1 + 80) >> 60 == 15)
    {
      if (v22 >> 60 != 15)
      {
        uint64_t v23 = *v21;
        sub_100013D44(*v21, *(void *)(a2 + 80));
        *(void *)(a1 + 72)  = v23;
        *(void *)(a1 + 80)  = v22;
LABEL_17:
        *(void *)(a1 + 88)  = *(void *)(a2 + 88);
        *(void *)(a1 + 96)  = *(void *)(a2 + 96);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_18;
      }
    }
    else
    {
      if (v22 >> 60 != 15)
      {
        uint64_t v25 = *v21;
        sub_100013D44(*v21, *(void *)(a2 + 80));
        uint64_t v26 = *(void *)(a1 + 72);
        unint64_t v27 = *(void *)(a1 + 80);
        *(void *)(a1 + 72)  = v25;
        *(void *)(a1 + 80)  = v22;
        sub_10000C970(v26, v27);
        goto LABEL_17;
      }
      sub_1001B8DF8(a1 + 72);
    }
    *(_OWORD *)(a1 + 72)  = *(_OWORD *)v21;
    goto LABEL_17;
  }
  if (v6 == 1)
  {
    long long v7 = *v5;
    long long v8 = *(_OWORD *)(a2 + 64);
    long long v9 = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96)  = *(void *)(a2 + 96);
    *(_OWORD *)(a1 + 64)  = v8;
    *(_OWORD *)(a1 + 80)  = v9;
    *uint64_t v4 = v7;
  }
  else
  {
    *(unsigned char *)(a1 + 48)  = *(unsigned char *)(a2 + 48);
    uint64_t v13 = *(void *)(a2 + 56);
    unint64_t v14 = *(void *)(a2 + 64);
    sub_100013D44(v13, v14);
    *(void *)(a1 + 56)  = v13;
    *(void *)(a1 + 64)  = v14;
    long long v15 = (uint64_t *)(a2 + 72);
    unint64_t v16 = *(void *)(a2 + 80);
    if (v16 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 72)  = *(_OWORD *)v15;
    }
    else
    {
      uint64_t v24 = *v15;
      sub_100013D44(*v15, *(void *)(a2 + 80));
      *(void *)(a1 + 72)  = v24;
      *(void *)(a1 + 80)  = v16;
    }
    *(void *)(a1 + 88)  = *(void *)(a2 + 88);
    *(void *)(a1 + 96)  = *(void *)(a2 + 96);
    swift_bridgeObjectRetain();
  }
LABEL_18:
  uint64_t v28 = (_OWORD *)(a1 + 104);
  unint64_t v29 = (_OWORD *)(a2 + 104);
  uint64_t v30 = *(void *)(a1 + 128);
  unint64_t v31 = *(void *)(a2 + 128);
  if (v30 == 1)
  {
    if (v31 >= 2) {
      goto LABEL_27;
    }
    goto LABEL_29;
  }
  if (v31 == 1)
  {
    sub_1001B7BFC(a1 + 104);
    uint64_t v32 = *(void *)(a2 + 136);
    long long v33 = *(_OWORD *)(a2 + 120);
    *uint64_t v28 = *v29;
    *(_OWORD *)(a1 + 120)  = v33;
    *(void *)(a1 + 136)  = v32;
  }
  else
  {
    if (!v30)
    {
      if (v31)
      {
LABEL_27:
        *(void *)(a1 + 128)  = v31;
        *(void *)(a1 + 136)  = *(void *)(a2 + 136);
        (**(void (***)(uint64_t, uint64_t))(v31 - 8))(a1 + 104, a2 + 104);
        goto LABEL_30;
      }
LABEL_29:
      long long v34 = *v29;
      long long v35 = *(_OWORD *)(a2 + 120);
      *(void *)(a1 + 136)  = *(void *)(a2 + 136);
      *uint64_t v28 = v34;
      *(_OWORD *)(a1 + 120)  = v35;
      goto LABEL_30;
    }
    if (!v31)
    {
      sub_100010754(a1 + 104);
      goto LABEL_29;
    }
    sub_1001B8898((uint64_t *)(a1 + 104), (uint64_t *)(a2 + 104));
  }
LABEL_30:
  int v36 = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 147)  = *(_DWORD *)(a2 + 147);
  *(_DWORD *)(a1 + 144)  = v36;
  *(unsigned char *)(a1 + 151)  = *(unsigned char *)(a2 + 151);
  return a1;
}

void *sub_1001B9558(void *a1)
{
  return a1;
}

__n128 initializeWithTake for NANDatapath.Configuration(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16)  = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64)  = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80)  = v5;
  *(_OWORD *)(a1 + 32)  = v3;
  *(_OWORD *)(a1 + 48)  = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144)  = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 112)  = v7;
  *(_OWORD *)(a1 + 128)  = v8;
  *(__n128 *)(a1 + 96)  = result;
  return result;
}

uint64_t assignWithTake for NANDatapath.Configuration(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24)  = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 28)  = *(unsigned char *)(a2 + 28);
  *(_WORD *)(a1 + 29)  = *(_WORD *)(a2 + 29);
  *(unsigned char *)(a1 + 31)  = *(unsigned char *)(a2 + 31);
  *(unsigned char *)(a1 + 32)  = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 96) == 1) {
    goto LABEL_4;
  }
  uint64_t v5 = *(void *)(a2 + 96);
  if (v5 == 1)
  {
    sub_1001B9558((void *)(a1 + 48));
LABEL_4:
    long long v6 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48)  = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64)  = v6;
    *(_OWORD *)(a1 + 80)  = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96)  = *(void *)(a2 + 96);
    goto LABEL_11;
  }
  *(unsigned char *)(a1 + 48)  = *(unsigned char *)(a2 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  unint64_t v8 = *(void *)(a1 + 64);
  *(_OWORD *)(a1 + 56)  = *(_OWORD *)(a2 + 56);
  sub_10000C970(v7, v8);
  long long v9 = (void *)(a2 + 72);
  unint64_t v10 = *(void *)(a1 + 80);
  if (v10 >> 60 != 15)
  {
    unint64_t v11 = *(void *)(a2 + 80);
    if (v11 >> 60 != 15)
    {
      uint64_t v12 = *(void *)(a1 + 72);
      *(void *)(a1 + 72)  = *v9;
      *(void *)(a1 + 80)  = v11;
      sub_10000C970(v12, v10);
      goto LABEL_10;
    }
    sub_1001B8DF8(a1 + 72);
  }
  *(_OWORD *)(a1 + 72)  = *(_OWORD *)v9;
LABEL_10:
  *(void *)(a1 + 88)  = *(void *)(a2 + 88);
  *(void *)(a1 + 96)  = v5;
  swift_bridgeObjectRelease();
LABEL_11:
  uint64_t v13 = *(void *)(a1 + 128);
  if (v13 != 1)
  {
    if (*(void *)(a2 + 128) == 1)
    {
      sub_1001B7BFC(a1 + 104);
    }
    else if (v13)
    {
      sub_100010754(a1 + 104);
    }
  }
  long long v14 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104)  = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120)  = v14;
  *(void *)(a1 + 136)  = *(void *)(a2 + 136);
  *(_DWORD *)(a1 + 144)  = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 147)  = *(_DWORD *)(a2 + 147);
  *(unsigned char *)(a1 + 151)  = *(unsigned char *)(a2 + 151);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANDatapath.Configuration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 152)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NANDatapath.Configuration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136)  = 0u;
    *(_OWORD *)(result + 120)  = 0u;
    *(_OWORD *)(result + 104)  = 0u;
    *(_OWORD *)(result + 88)  = 0u;
    *(_OWORD *)(result + 72)  = 0u;
    *(_OWORD *)(result + 56)  = 0u;
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 152)  = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16)  = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 152)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANDatapath.Configuration()
{
  return &type metadata for NANDatapath.Configuration;
}

uint64_t destroy for NANDatapath.ResponseConfiguration(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16) != 4) {
    sub_10000C970(*(void *)(a1 + 24), *(void *)(a1 + 32));
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(a1 + 128) != 1)
  {
    sub_10000C970(*(void *)(a1 + 88), *(void *)(a1 + 96));
    unint64_t v3 = *(void *)(a1 + 112);
    if (v3 >> 60 != 15) {
      sub_10000C970(*(void *)(a1 + 104), v3);
    }
    uint64_t result = swift_bridgeObjectRelease();
  }
  int v4 = *(unsigned __int8 *)(a1 + 176);
  if (v4 != 255)
  {
    if (v4)
    {
      return sub_100010754(a1 + 136);
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t initializeWithCopy for NANDatapath.ResponseConfiguration(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  *(_DWORD *)(a1 + 2)  = *(_DWORD *)(a2 + 2);
  *(_WORD *)(a1 + 6)  = *(_WORD *)(a2 + 6);
  *(_DWORD *)(a1 + 8)  = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12)  = *(_WORD *)(a2 + 12);
  uint64_t v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 == 4)
  {
    *(_OWORD *)(a1 + 16)  = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  }
  else
  {
    *(unsigned char *)(a1 + 16)  = v4;
    uint64_t v5 = *(void *)(a2 + 24);
    unint64_t v6 = *(void *)(a2 + 32);
    sub_100013D44(v5, v6);
    *(void *)(a1 + 24)  = v5;
    *(void *)(a1 + 32)  = v6;
  }
  *(_DWORD *)(a1 + 40)  = *(_DWORD *)(a2 + 40);
  *(_WORD *)(a1 + 44)  = *(_WORD *)(a2 + 44);
  *(_DWORD *)(a1 + 46)  = *(_DWORD *)(a2 + 46);
  *(_WORD *)(a1 + 50)  = *(_WORD *)(a2 + 50);
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56)  = *(void *)(a2 + 56);
  *(void *)(a1 + 64)  = v7;
  *(_WORD *)(a1 + 72)  = *(_WORD *)(a2 + 72);
  *(unsigned char *)(a1 + 74)  = *(unsigned char *)(a2 + 74);
  uint64_t v8 = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  if (v8 == 1)
  {
    long long v9 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80)  = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96)  = v9;
    *(_OWORD *)(a1 + 112)  = *(_OWORD *)(a2 + 112);
    *(void *)(a1 + 128)  = *(void *)(a2 + 128);
  }
  else
  {
    *(unsigned char *)(a1 + 80)  = *(unsigned char *)(a2 + 80);
    uint64_t v10 = *(void *)(a2 + 88);
    unint64_t v11 = *(void *)(a2 + 96);
    sub_100013D44(v10, v11);
    *(void *)(a1 + 88)  = v10;
    *(void *)(a1 + 96)  = v11;
    uint64_t v12 = (uint64_t *)(a2 + 104);
    unint64_t v13 = *(void *)(a2 + 112);
    if (v13 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 104)  = *(_OWORD *)v12;
    }
    else
    {
      uint64_t v14 = *v12;
      sub_100013D44(*v12, *(void *)(a2 + 112));
      *(void *)(a1 + 104)  = v14;
      *(void *)(a1 + 112)  = v13;
    }
    *(void *)(a1 + 120)  = *(void *)(a2 + 120);
    *(void *)(a1 + 128)  = v8;
    swift_bridgeObjectRetain();
  }
  long long v15 = (_OWORD *)(a1 + 136);
  unint64_t v16 = (_OWORD *)(a2 + 136);
  int v17 = *(unsigned __int8 *)(a2 + 176);
  if (v17 == 255)
  {
    long long v18 = *(_OWORD *)(a2 + 152);
    *long long v15 = *v16;
    *(_OWORD *)(a1 + 152)  = v18;
    *(_OWORD *)(a1 + 161)  = *(_OWORD *)(a2 + 161);
  }
  else if (v17)
  {
    long long v20 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 160)  = v20;
    (**(void (***)(_OWORD *, _OWORD *))(v20 - 8))(v15, v16);
    *(unsigned char *)(a1 + 176)  = 1;
  }
  else
  {
    uint64_t v19 = *(void *)(a2 + 144);
    *(void *)(a1 + 136)  = *(void *)(a2 + 136);
    *(void *)(a1 + 144)  = v19;
    *(unsigned char *)(a1 + 152)  = *(unsigned char *)(a2 + 152);
    *(unsigned char *)(a1 + 176)  = 0;
    swift_bridgeObjectRetain();
  }
  *(_DWORD *)(a1 + 177)  = *(_DWORD *)(a2 + 177);
  *(_DWORD *)(a1 + 180)  = *(_DWORD *)(a2 + 180);
  *(unsigned char *)(a1 + 184)  = *(unsigned char *)(a2 + 184);
  return a1;
}

uint64_t assignWithCopy for NANDatapath.ResponseConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1)  = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2)  = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3)  = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(a1 + 4)  = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a1 + 5)  = *(unsigned char *)(a2 + 5);
  *(unsigned char *)(a1 + 6)  = *(unsigned char *)(a2 + 6);
  *(unsigned char *)(a1 + 7)  = *(unsigned char *)(a2 + 7);
  *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9)  = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(a1 + 10)  = *(unsigned char *)(a2 + 10);
  *(unsigned char *)(a1 + 11)  = *(unsigned char *)(a2 + 11);
  *(unsigned char *)(a1 + 12)  = *(unsigned char *)(a2 + 12);
  *(unsigned char *)(a1 + 13)  = *(unsigned char *)(a2 + 13);
  uint64_t v4 = a1 + 16;
  unint64_t v6 = (long long *)(a2 + 16);
  uint64_t v5 = *(unsigned __int8 *)(a2 + 16);
  if (*(unsigned char *)(a1 + 16) == 4)
  {
    if (v5 == 4)
    {
      long long v7 = *v6;
      *(void *)(a1 + 32)  = *(void *)(a2 + 32);
      *(_OWORD *)uint64_t v4 = v7;
    }
    else
    {
      *(unsigned char *)(a1 + 16)  = v5;
      uint64_t v9 = *(void *)(a2 + 24);
      unint64_t v10 = *(void *)(a2 + 32);
      sub_100013D44(v9, v10);
      *(void *)(a1 + 24)  = v9;
      *(void *)(a1 + 32)  = v10;
    }
  }
  else if (v5 == 4)
  {
    sub_1001B9F44(a1 + 16);
    uint64_t v8 = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v4 = *v6;
    *(void *)(v4 + 16)  = v8;
  }
  else
  {
    *(unsigned char *)(a1 + 16)  = v5;
    uint64_t v11 = *(void *)(a2 + 24);
    unint64_t v12 = *(void *)(a2 + 32);
    sub_100013D44(v11, v12);
    uint64_t v13 = *(void *)(a1 + 24);
    unint64_t v14 = *(void *)(a1 + 32);
    *(void *)(a1 + 24)  = v11;
    *(void *)(a1 + 32)  = v12;
    sub_10000C970(v13, v14);
  }
  *(unsigned char *)(a1 + 40)  = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41)  = *(unsigned char *)(a2 + 41);
  *(unsigned char *)(a1 + 42)  = *(unsigned char *)(a2 + 42);
  *(unsigned char *)(a1 + 43)  = *(unsigned char *)(a2 + 43);
  *(unsigned char *)(a1 + 44)  = *(unsigned char *)(a2 + 44);
  *(unsigned char *)(a1 + 45)  = *(unsigned char *)(a2 + 45);
  *(unsigned char *)(a1 + 46)  = *(unsigned char *)(a2 + 46);
  *(unsigned char *)(a1 + 47)  = *(unsigned char *)(a2 + 47);
  *(unsigned char *)(a1 + 48)  = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 49)  = *(unsigned char *)(a2 + 49);
  *(unsigned char *)(a1 + 50)  = *(unsigned char *)(a2 + 50);
  *(unsigned char *)(a1 + 51)  = *(unsigned char *)(a2 + 51);
  *(void *)(a1 + 56)  = *(void *)(a2 + 56);
  *(void *)(a1 + 64)  = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72)  = *(unsigned char *)(a2 + 72);
  *(unsigned char *)(a1 + 73)  = *(unsigned char *)(a2 + 73);
  *(unsigned char *)(a1 + 74)  = *(unsigned char *)(a2 + 74);
  long long v15 = (_OWORD *)(a1 + 80);
  unint64_t v16 = (long long *)(a2 + 80);
  uint64_t v17 = *(void *)(a2 + 128);
  if (*(void *)(a1 + 128) != 1)
  {
    if (v17 == 1)
    {
      sub_1001B9558((void *)(a1 + 80));
      long long v22 = *(_OWORD *)(a2 + 96);
      long long v21 = *(_OWORD *)(a2 + 112);
      long long v23 = *v16;
      *(void *)(a1 + 128)  = *(void *)(a2 + 128);
      *(_OWORD *)(a1 + 96)  = v22;
      *(_OWORD *)(a1 + 112)  = v21;
      *long long v15 = v23;
      goto LABEL_25;
    }
    *(unsigned char *)(a1 + 80)  = *(unsigned char *)(a2 + 80);
    uint64_t v28 = *(void *)(a2 + 88);
    unint64_t v29 = *(void *)(a2 + 96);
    sub_100013D44(v28, v29);
    uint64_t v30 = *(void *)(a1 + 88);
    unint64_t v31 = *(void *)(a1 + 96);
    *(void *)(a1 + 88)  = v28;
    *(void *)(a1 + 96)  = v29;
    sub_10000C970(v30, v31);
    uint64_t v32 = (uint64_t *)(a2 + 104);
    unint64_t v33 = *(void *)(a2 + 112);
    if (*(void *)(a1 + 112) >> 60 == 15)
    {
      if (v33 >> 60 != 15)
      {
        uint64_t v34 = *v32;
        sub_100013D44(*v32, *(void *)(a2 + 112));
        *(void *)(a1 + 104)  = v34;
        *(void *)(a1 + 112)  = v33;
LABEL_24:
        *(void *)(a1 + 120)  = *(void *)(a2 + 120);
        *(void *)(a1 + 128)  = *(void *)(a2 + 128);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
    }
    else
    {
      if (v33 >> 60 != 15)
      {
        uint64_t v36 = *v32;
        sub_100013D44(*v32, *(void *)(a2 + 112));
        uint64_t v37 = *(void *)(a1 + 104);
        unint64_t v38 = *(void *)(a1 + 112);
        *(void *)(a1 + 104)  = v36;
        *(void *)(a1 + 112)  = v33;
        sub_10000C970(v37, v38);
        goto LABEL_24;
      }
      sub_1001B8DF8(a1 + 104);
    }
    *(_OWORD *)(a1 + 104)  = *(_OWORD *)v32;
    goto LABEL_24;
  }
  if (v17 == 1)
  {
    long long v18 = *v16;
    long long v19 = *(_OWORD *)(a2 + 96);
    long long v20 = *(_OWORD *)(a2 + 112);
    *(void *)(a1 + 128)  = *(void *)(a2 + 128);
    *(_OWORD *)(a1 + 96)  = v19;
    *(_OWORD *)(a1 + 112)  = v20;
    *long long v15 = v18;
  }
  else
  {
    *(unsigned char *)(a1 + 80)  = *(unsigned char *)(a2 + 80);
    uint64_t v24 = *(void *)(a2 + 88);
    unint64_t v25 = *(void *)(a2 + 96);
    sub_100013D44(v24, v25);
    *(void *)(a1 + 88)  = v24;
    *(void *)(a1 + 96)  = v25;
    uint64_t v26 = (uint64_t *)(a2 + 104);
    unint64_t v27 = *(void *)(a2 + 112);
    if (v27 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 104)  = *(_OWORD *)v26;
    }
    else
    {
      uint64_t v35 = *v26;
      sub_100013D44(*v26, *(void *)(a2 + 112));
      *(void *)(a1 + 104)  = v35;
      *(void *)(a1 + 112)  = v27;
    }
    *(void *)(a1 + 120)  = *(void *)(a2 + 120);
    *(void *)(a1 + 128)  = *(void *)(a2 + 128);
    swift_bridgeObjectRetain();
  }
LABEL_25:
  unint64_t v39 = (long long *)(a1 + 136);
  uint64_t v40 = (long long *)(a2 + 136);
  int v41 = *(unsigned __int8 *)(a2 + 176);
  if (*(unsigned __int8 *)(a1 + 176) == 255)
  {
    if (v41 == 255)
    {
      long long v44 = *v40;
      long long v45 = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a1 + 161)  = *(_OWORD *)(a2 + 161);
      *unint64_t v39 = v44;
      *(_OWORD *)(a1 + 152)  = v45;
      goto LABEL_35;
    }
    if (v41)
    {
LABEL_32:
      uint64_t v46 = *(void *)(a2 + 160);
      *(void *)(a1 + 160)  = v46;
      *(void *)(a1 + 168)  = *(void *)(a2 + 168);
      (**(void (***)(uint64_t, uint64_t))(v46 - 8))(a1 + 136, a2 + 136);
      *(unsigned char *)(a1 + 176)  = 1;
      goto LABEL_35;
    }
LABEL_34:
    *(void *)(a1 + 136)  = *(void *)(a2 + 136);
    *(void *)(a1 + 144)  = *(void *)(a2 + 144);
    *(unsigned char *)(a1 + 152)  = *(unsigned char *)(a2 + 152);
    *(unsigned char *)(a1 + 176)  = 0;
    swift_bridgeObjectRetain();
    goto LABEL_35;
  }
  if (v41 != 255)
  {
    if (a1 == a2) {
      goto LABEL_35;
    }
    sub_1001B7D50(a1 + 136);
    if (*(unsigned char *)(a2 + 176)) {
      goto LABEL_32;
    }
    goto LABEL_34;
  }
  sub_1001B7D50(a1 + 136);
  long long v42 = *(_OWORD *)(a2 + 161);
  long long v43 = *(_OWORD *)(a2 + 152);
  *unint64_t v39 = *v40;
  *(_OWORD *)(a1 + 152)  = v43;
  *(_OWORD *)(a1 + 161)  = v42;
LABEL_35:
  int v47 = *(_DWORD *)(a2 + 177);
  *(_DWORD *)(a1 + 180)  = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 177)  = v47;
  *(unsigned char *)(a1 + 184)  = *(unsigned char *)(a2 + 184);
  return a1;
}

uint64_t sub_1001B9F44(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for NANDatapath.ResponseConfiguration(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  *(_DWORD *)(a1 + 8)  = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12)  = *(_WORD *)(a2 + 12);
  uint64_t v4 = a1 + 16;
  uint64_t v6 = a2 + 16;
  uint64_t v5 = *(unsigned __int8 *)(a2 + 16);
  if (*(unsigned char *)(a1 + 16) == 4) {
    goto LABEL_4;
  }
  if (v5 == 4)
  {
    sub_1001B9F44(a1 + 16);
LABEL_4:
    *(_OWORD *)uint64_t v4 = *(_OWORD *)v6;
    *(void *)(v4 + 16)  = *(void *)(v6 + 16);
    goto LABEL_6;
  }
  *(unsigned char *)(a1 + 16)  = v5;
  uint64_t v7 = *(void *)(a1 + 24);
  unint64_t v8 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24)  = *(_OWORD *)(a2 + 24);
  sub_10000C970(v7, v8);
LABEL_6:
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48)  = *(_DWORD *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 64);
  *(void *)(a1 + 56)  = *(void *)(a2 + 56);
  *(void *)(a1 + 64)  = v9;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72)  = *(unsigned char *)(a2 + 72);
  *(_WORD *)(a1 + 73)  = *(_WORD *)(a2 + 73);
  if (*(void *)(a1 + 128) == 1)
  {
LABEL_9:
    long long v10 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80)  = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96)  = v10;
    *(_OWORD *)(a1 + 112)  = *(_OWORD *)(a2 + 112);
    *(void *)(a1 + 128)  = *(void *)(a2 + 128);
    goto LABEL_16;
  }
  if (*(void *)(a2 + 128) == 1)
  {
    sub_1001B9558((void *)(a1 + 80));
    goto LABEL_9;
  }
  *(unsigned char *)(a1 + 80)  = *(unsigned char *)(a2 + 80);
  uint64_t v11 = *(void *)(a1 + 88);
  unint64_t v12 = *(void *)(a1 + 96);
  *(_OWORD *)(a1 + 88)  = *(_OWORD *)(a2 + 88);
  sub_10000C970(v11, v12);
  uint64_t v13 = (void *)(a2 + 104);
  unint64_t v14 = *(void *)(a1 + 112);
  if (v14 >> 60 != 15)
  {
    unint64_t v15 = *(void *)(a2 + 112);
    if (v15 >> 60 != 15)
    {
      uint64_t v16 = *(void *)(a1 + 104);
      *(void *)(a1 + 104)  = *v13;
      *(void *)(a1 + 112)  = v15;
      sub_10000C970(v16, v14);
      goto LABEL_15;
    }
    sub_1001B8DF8(a1 + 104);
  }
  *(_OWORD *)(a1 + 104)  = *(_OWORD *)v13;
LABEL_15:
  uint64_t v17 = *(void *)(a2 + 128);
  *(void *)(a1 + 120)  = *(void *)(a2 + 120);
  *(void *)(a1 + 128)  = v17;
  swift_bridgeObjectRelease();
LABEL_16:
  if (*(unsigned __int8 *)(a1 + 176) == 255)
  {
LABEL_20:
    long long v18 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136)  = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152)  = v18;
    *(_OWORD *)(a1 + 161)  = *(_OWORD *)(a2 + 161);
    goto LABEL_21;
  }
  if (*(unsigned __int8 *)(a2 + 176) == 255 || a1 != a2)
  {
    sub_1001B7D50(a1 + 136);
    goto LABEL_20;
  }
LABEL_21:
  *(_DWORD *)(a1 + 177)  = *(_DWORD *)(a2 + 177);
  *(_DWORD *)(a1 + 180)  = *(_DWORD *)(a2 + 180);
  *(unsigned char *)(a1 + 184)  = *(unsigned char *)(a2 + 184);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANDatapath.ResponseConfiguration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 185)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NANDatapath.ResponseConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168)  = 0u;
    *(_OWORD *)(result + 152)  = 0u;
    *(_OWORD *)(result + 136)  = 0u;
    *(_OWORD *)(result + 120)  = 0u;
    *(_OWORD *)(result + 104)  = 0u;
    *(_OWORD *)(result + 88)  = 0u;
    *(_OWORD *)(result + 72)  = 0u;
    *(_OWORD *)(result + 56)  = 0u;
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(unsigned char *)(result + 184)  = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 185)  = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 64)  = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 185)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANDatapath.ResponseConfiguration()
{
  return &type metadata for NANDatapath.ResponseConfiguration;
}

uint64_t getEnumTagSinglePayload for NANDatapath.ConfirmationConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 7);
  BOOL v4 = v3 >= 3;
  int v5 = v3 - 3;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANDatapath.ConfirmationConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 8)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 8)  = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 7)  = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANDatapath.ConfirmationConfiguration()
{
  return &type metadata for NANDatapath.ConfirmationConfiguration;
}

uint64_t sub_1001BA2CC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a7 != 1)
  {
    sub_100013D44(a2, a3);
    sub_100038004(a4, a5);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t static NANActionFrame.__derived_struct_equals(_:_:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if (a1 != 14)
  {
    if (a3 == 14 || byte_1003C5FEE[a1] != byte_1003C5FEE[a3]) {
      return 0;
    }
    return _s7CoreP2P21NANInformationElementV23__derived_struct_equalsySbAC_ACtFZ_0(a2, a4);
  }
  if (a3 == 14) {
    return _s7CoreP2P21NANInformationElementV23__derived_struct_equalsySbAC_ACtFZ_0(a2, a4);
  }
  return 0;
}

uint64_t NANActionFrame.init(customDeviceInformation:)(uint64_t a1)
{
  sub_100010BCC(&qword_100485620);
  uint64_t v2 = *(void *)(type metadata accessor for NANAttribute(0) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16)  = xmmword_1003B2450;
  sub_1001BADE0(a1, v4 + v3);
  swift_storeEnumTagMultiPayload();
  sub_1001BAE44(a1, type metadata accessor for NANAttribute.CustomDeviceInformation);
  return 13;
}

uint64_t NANActionFrame.init(customAttributes:)(uint64_t a1)
{
  sub_100010BCC(&qword_100485620);
  uint64_t v2 = *(void *)(type metadata accessor for NANAttribute(0) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16)  = xmmword_1003B2450;
  unint64_t v5 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v6 = type metadata accessor for BinaryEncoder();
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16)  = xmmword_1003B2440;
  *(void *)(v7 + 32)  = v5;
  v17[3]  = v6;
  void v17[4] = sub_1001BB5B0((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
  v17[0]  = v7;
  swift_retain();
  NANAttribute.CustomDeviceInformation.CustomAttributes.encode(to:)(v17);
  sub_100010754((uint64_t)v17);
  swift_beginAccess();
  uint64_t v8 = *(void *)(v7 + 16);
  unint64_t v9 = *(void *)(v7 + 24);
  sub_100013D44(v8, v9);
  swift_release();
  switch(v9 >> 62)
  {
    case 1uLL:
      uint64_t v10 = (int)v8;
      uint64_t v11 = v8 >> 32;
      goto LABEL_4;
    case 2uLL:
      uint64_t v10 = *(void *)(v8 + 16);
      uint64_t v11 = *(void *)(v8 + 24);
LABEL_4:
      if (v11 < v10)
      {
        __break(1u);
        swift_release();
        swift_unexpectedError();
        __break(1u);
        JUMPOUT(0x1001BA70CLL);
      }
      return result;
    default:
      break;
  }
  unint64_t v12 = v4 + v3;
  uint64_t v13 = Data.subdata(in:)();
  uint64_t v15 = v14;
  sub_10000C970(v8, v9);
  *(_WORD *)unint64_t v12 = 5888;
  *(unsigned char *)(v12 + 2)  = -14;
  *(void *)(v12 + 8)  = v13;
  *(void *)(v12 + 16)  = v15;
  swift_storeEnumTagMultiPayload();
  sub_1001BAE44(a1, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  return 13;
}

void NANActionFrame.hash(into:)(uint64_t a1, char a2, uint64_t a3)
{
  if (a2 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(byte_1003C5FEE[a2]);
  }
  Swift::UInt v6 = *(void *)(a3 + 16);
  Hasher._combine(_:)(v6);
  if (v6)
  {
    uint64_t v7 = *(void *)(type metadata accessor for NANAttribute(0) - 8);
    uint64_t v8 = a3 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v9 = *(void *)(v7 + 72);
    swift_bridgeObjectRetain();
    do
    {
      NANAttribute.hash(into:)(a1);
      v8 += v9;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1001BA840()
{
  if (*v0) {
    return 0x7475626972747461;
  }
  else {
    return 1701869940;
  }
}

uint64_t sub_1001BA878@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001BB3D8(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001BA8A0(uint64_t a1)
{
  unint64_t v2 = sub_1001BAEA4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001BA8DC(uint64_t a1)
{
  unint64_t v2 = sub_1001BAEA4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANActionFrame.encode(to:)(void *a1, char a2, uint64_t a3)
{
  uint64_t v7 = sub_100010BCC(&qword_100481DB8);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_1001BAEA4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v15 = a2;
  char v14 = 0;
  sub_1001BAEF8();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v3)
  {
    v12[1]  = a3;
    char v13 = 1;
    sub_100010BCC(&qword_10047DCD8);
    sub_1001BB51C((unint64_t *)&qword_100481DD0, &qword_10047E7B8);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int NANActionFrame.hashValue.getter(unsigned __int8 a1, uint64_t a2)
{
  int v4 = a1;
  Hasher.init(_seed:)();
  if (v4 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(byte_1003C5FEE[(char)a1]);
  }
  Swift::UInt v5 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v5);
  if (v5)
  {
    uint64_t v6 = *(void *)(type metadata accessor for NANAttribute(0) - 8);
    uint64_t v7 = a2 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v8 = *(void *)(v6 + 72);
    swift_bridgeObjectRetain();
    do
    {
      NANAttribute.hash(into:)((uint64_t)v10);
      v7 += v8;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

uint64_t NANActionFrame.init(from:)(void *a1)
{
  return sub_1001BAF4C(a1);
}

Swift::Int sub_1001BAC20()
{
  return NANActionFrame.hashValue.getter(*(unsigned char *)v0, *(void *)(v0 + 8));
}

void sub_1001BAC2C(uint64_t a1)
{
  NANActionFrame.hash(into:)(a1, *(unsigned char *)v1, *(void *)(v1 + 8));
}

Swift::Int sub_1001BAC38()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *((void *)v0 + 1);
  Hasher.init(_seed:)();
  if (v1 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(byte_1003C5FEE[v1]);
  }
  Swift::UInt v3 = *(void *)(v2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = *(void *)(type metadata accessor for NANAttribute(0) - 8);
    uint64_t v5 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v6 = *(void *)(v4 + 72);
    swift_bridgeObjectRetain();
    do
    {
      NANAttribute.hash(into:)((uint64_t)v8);
      v5 += v6;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

uint64_t sub_1001BAD40@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1001BAF4C(a1);
  if (!v2)
  {
    *(unsigned char *)a2  = result;
    *(void *)(a2 + 8)  = v5;
  }
  return result;
}

uint64_t sub_1001BAD70(void *a1)
{
  return NANActionFrame.encode(to:)(a1, *(unsigned char *)v1, *(void *)(v1 + 8));
}

uint64_t sub_1001BAD90(char *a1, char *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((void *)a1 + 1);
  uint64_t v4 = *a2;
  uint64_t v5 = *((void *)a2 + 1);
  if (v2 != 14)
  {
    if (v4 == 14 || byte_1003C5FEE[v2] != byte_1003C5FEE[v4]) {
      return 0;
    }
    return _s7CoreP2P21NANInformationElementV23__derived_struct_equalsySbAC_ACtFZ_0(v3, v5);
  }
  if (v4 == 14) {
    return _s7CoreP2P21NANInformationElementV23__derived_struct_equalsySbAC_ACtFZ_0(v3, v5);
  }
  return 0;
}

uint64_t sub_1001BADE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NANAttribute.CustomDeviceInformation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001BAE44(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_1001BAEA4()
{
  unint64_t result = qword_100481DC0;
  if (!qword_100481DC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481DC0);
  }
  return result;
}

unint64_t sub_1001BAEF8()
{
  unint64_t result = qword_100481DC8;
  if (!qword_100481DC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481DC8);
  }
  return result;
}

uint64_t sub_1001BAF4C(void *a1)
{
  uint64_t v2 = sub_100010BCC(&qword_100481DF8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = &v8[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_1001BAEA4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v8[30]  = 0;
  sub_1001BB4C8();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v6 = v8[31];
  sub_100010BCC(&qword_10047DCD8);
  v8[15]  = 1;
  sub_1001BB51C((unint64_t *)&qword_10047E790, &qword_10047E798);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  sub_100010754((uint64_t)a1);
  return v6;
}

unint64_t sub_1001BB168()
{
  unint64_t result = qword_100481DD8;
  if (!qword_100481DD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481DD8);
  }
  return result;
}

ValueMetadata *type metadata accessor for NANActionFrame()
{
  return &type metadata for NANActionFrame;
}

unsigned char *storeEnumTagSinglePayload for NANActionFrame.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001BB298);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANActionFrame.CodingKeys()
{
  return &type metadata for NANActionFrame.CodingKeys;
}

unint64_t sub_1001BB2D4()
{
  unint64_t result = qword_100481DE0;
  if (!qword_100481DE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481DE0);
  }
  return result;
}

unint64_t sub_1001BB32C()
{
  unint64_t result = qword_100481DE8;
  if (!qword_100481DE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481DE8);
  }
  return result;
}

unint64_t sub_1001BB384()
{
  unint64_t result = qword_100481DF0;
  if (!qword_100481DF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481DF0);
  }
  return result;
}

uint64_t sub_1001BB3D8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7475626972747461 && a2 == 0xEA00000000007365)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unint64_t sub_1001BB4C8()
{
  unint64_t result = qword_100481E00;
  if (!qword_100481E00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481E00);
  }
  return result;
}

uint64_t sub_1001BB51C(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100014434(&qword_10047DCD8);
    sub_1001BB5B0(a2, (void (*)(uint64_t))type metadata accessor for NANAttribute);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001BB5B0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001BB5F8()
{
  sub_100010BCC(&qword_100481FC0);
  uint64_t v0 = String.init<A>(describing:)();
  v1._countAndFlagsBits  = 32;
  v1._object  = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  swift_bridgeObjectRetain();
  v2._countAndFlagsBits  = 0;
  v2._object  = (void *)0xE000000000000000;
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1001BB6E4()
{
  sub_100010BCC(&qword_100481FB8);
  uint64_t v1 = String.init<A>(describing:)();
  WORD4(v5)  = 0;
  v2._countAndFlagsBits  = 32;
  v2._object  = (void *)0xE100000000000000;
  String.append(_:)(v2);
  *(void *)&long long v5 = *(unsigned __int16 *)(v0 + 12);
  _print_unlocked<A, B>(_:_:)();
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits  = *(void *)((char *)&v5 + 2);
  v3._object  = (void *)0xE000000000000000;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1001BB7D0()
{
  return sub_1001BB7F0((void (*)(void))type metadata accessor for NANSubscribe.Configuration, &qword_100481FC8);
}

uint64_t sub_1001BB7F0(void (*a1)(void), uint64_t *a2)
{
  a1(0);
  sub_100010BCC(a2);
  uint64_t v4 = String.init<A>(describing:)();
  BYTE8(v8)  = 0;
  v5._countAndFlagsBits  = 32;
  v5._object  = (void *)0xE100000000000000;
  String.append(_:)(v5);
  *(void *)&long long v8 = *v2;
  _print_unlocked<A, B>(_:_:)();
  swift_bridgeObjectRetain();
  v6._countAndFlagsBits  = *(void *)((char *)&v8 + 1);
  v6._object  = (void *)0xE000000000000000;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t NANPublish.Configuration.serviceInfo.getter()
{
  if (qword_10047C278 != -1) {
    swift_once();
  }
  Swift::String v1 = String.lowercased()();
  Swift::String v2 = String.lowercased()();
  if (v1._countAndFlagsBits == v2._countAndFlagsBits && v1._object == v2._object)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v4 & 1) == 0) {
      goto LABEL_11;
    }
  }
  NANGenericServiceProtocol.blob.getter(*(void *)(v0 + 24));
  if (v5 >> 60 != 15) {
    return 3;
  }
LABEL_11:
  int v6 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANPublish.Configuration() + 96));
  BOOL v7 = *(unsigned __int8 *)(v0 + 77) == 2;
  uint64_t v8 = 2;
  if ((v6 & v7) != 0) {
    uint64_t v9 = 3;
  }
  else {
    uint64_t v9 = 2;
  }
  swift_bridgeObjectRetain();
  NANGenericServiceProtocol.packetData(for:)(v9);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t NANPublish.Configuration.controlFlag.getter()
{
  if (*(void *)(*(void *)(v0 + *(int *)(type metadata accessor for NANPublish.Configuration() + 84) + 16) + 16)) {
    int v1 = 580;
  }
  else {
    int v1 = 516;
  }
  int v2 = *(unsigned __int8 *)(v0 + 77);
  if (v2) {
    int v3 = 3;
  }
  else {
    int v3 = 1;
  }
  if (v2 == 2) {
    int v4 = 0;
  }
  else {
    int v4 = v3;
  }
  return v4 | v1;
}

uint64_t NANPublish.DatapathConfiguration.serviceInfo.getter()
{
  return 2;
}

uint64_t NANPublish.FurtherServiceDiscoveryFunction.apiFunction.getter(char a1)
{
  if (a1) {
    return 2;
  }
  else {
    return 1;
  }
}

void *NANPublish.PublishType.defaultValue.unsafeMutableAddressor()
{
  return &static NANPublish.PublishType.defaultValue;
}

uint64_t NANPublish.PublishType.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x6963696C6F736E75;
  }
  if (a1 == 1) {
    return 0x65746963696C6F73;
  }
  return 0xD000000000000017;
}

uint64_t sub_1001BBB88(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100043168(*a1, *a2);
}

unint64_t sub_1001BBB94@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = _s7CoreP2P10NANPublishO11PublishTypeO8rawValueAESgSS_tcfC_0(*a1);
  *a2  = result;
  return result;
}

void sub_1001BBBC4(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xEB00000000646574;
  unint64_t v4 = 0xE900000000000064;
  unint64_t v5 = 0x65746963696C6F73;
  if (v2 != 1)
  {
    unint64_t v5 = 0xD000000000000017;
    unint64_t v4 = 0x80000001003D7E70;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x6963696C6F736E75;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1  = v7;
  a1[1]  = v3;
}

Swift::Int sub_1001BBC34()
{
  return Hasher._finalize()();
}

uint64_t sub_1001BBCE8()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001BBD88()
{
  return Hasher._finalize()();
}

uint64_t sub_1001BBE38()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001BBE98()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1001BBEE8()
{
  unint64_t v1 = 0x65746963696C6F73;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000017;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6963696C6F736E75;
  }
}

void *NANPublish.SolicitedTransmissionType.defaultValue.unsafeMutableAddressor()
{
  return &static NANPublish.SolicitedTransmissionType.defaultValue;
}

CoreP2P::NANPublish::SolicitedTransmissionType_optional __swiftcall NANPublish.SolicitedTransmissionType.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue  = &off_10044DF70;
  return (CoreP2P::NANPublish::SolicitedTransmissionType_optional)sub_1001B4D90(rawValue, v1);
}

uint64_t sub_1001BBF6C@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue  = &off_10044DF70;
  return sub_100185AB0(v2, a1, a2);
}

uint64_t sub_1001BBF78()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001BBFD8()
{
  return RawRepresentable<>.encode(to:)();
}

void *NANPublish.EventCondition.defaultValue.unsafeMutableAddressor()
{
  return &static NANPublish.EventCondition.defaultValue;
}

uint64_t NANPublish.EventCondition.rawValue.getter(char a1)
{
  if (a1) {
    return 0x65746963696C6F73;
  }
  else {
    return 1701736302;
  }
}

CoreP2P::NANPublish::EventCondition_optional __swiftcall NANPublish.EventCondition.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue  = &off_10044DF20;
  return (CoreP2P::NANPublish::EventCondition_optional)sub_1001B4D90(rawValue, v1);
}

uint64_t sub_1001BC078(char *a1, char *a2)
{
  return sub_1000430C0(*a1, *a2);
}

uint64_t sub_1001BC084@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue  = &off_10044DF20;
  return sub_100185AB0(v2, a1, a2);
}

void sub_1001BC090(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1701736302;
  if (*v1) {
    uint64_t v2 = 0x65746963696C6F73;
  }
  unint64_t v3 = 0xE400000000000000;
  if (*v1) {
    unint64_t v3 = 0xEB00000000785464;
  }
  *a1  = v2;
  a1[1]  = v3;
}

Swift::Int sub_1001BC0D0()
{
  return Hasher._finalize()();
}

uint64_t sub_1001BC154()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001BC1C4()
{
  return Hasher._finalize()();
}

uint64_t sub_1001BC244()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001BC2A4()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1001BC2F4()
{
  if (*v0) {
    return 0x65746963696C6F73;
  }
  else {
    return 1701736302;
  }
}

uint64_t NANPublish.FurtherServiceDiscoveryFunction.controlFlag.getter(char a1)
{
  if (a1) {
    return 3;
  }
  else {
    return 1;
  }
}

uint64_t NANPublish.FurtherServiceDiscoveryFunction.rawValue.getter(char a1)
{
  if (a1) {
    return 7561575;
  }
  else {
    return 0x7055776F6C6C6F66;
  }
}

CoreP2P::NANPublish::FurtherServiceDiscoveryFunction_optional __swiftcall NANPublish.FurtherServiceDiscoveryFunction.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue  = &off_10044DFC0;
  return (CoreP2P::NANPublish::FurtherServiceDiscoveryFunction_optional)sub_1001B4D90(rawValue, v1);
}

_UNKNOWN **static NANPublish.FurtherServiceDiscoveryFunction.allCases.getter()
{
  return &off_100450568;
}

uint64_t sub_1001BC388(char *a1, char *a2)
{
  return sub_100042EC4(*a1, *a2);
}

uint64_t sub_1001BC394@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue  = &off_10044DFC0;
  return sub_100185AB0(v2, a1, a2);
}

void sub_1001BC3A0(uint64_t *a1@<X8>)
{
  uint64_t v2 = 7561575;
  if (!*v1) {
    uint64_t v2 = 0x7055776F6C6C6F66;
  }
  unint64_t v3 = 0xE800000000000000;
  if (*v1) {
    unint64_t v3 = 0xE300000000000000;
  }
  *a1  = v2;
  a1[1]  = v3;
}

void sub_1001BC3D8(void *a1@<X8>)
{
  *a1  = &off_100450590;
}

Swift::Int sub_1001BC3E8()
{
  return Hasher._finalize()();
}

uint64_t sub_1001BC464()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001BC4CC()
{
  return Hasher._finalize()();
}

uint64_t sub_1001BC544()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001BC5A4()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1001BC5F4()
{
  if (*v0) {
    return 7561575;
  }
  else {
    return 0x7055776F6C6C6F66;
  }
}

void NANPublish.InternetSharingConfiguration.hash(into:)()
{
  sub_1001B7CF4(v0, (uint64_t)&v2);
  if (v4)
  {
    sub_1001B7D50((uint64_t)&v2);
    Swift::UInt8 v1 = 0;
  }
  else
  {
    Swift::UInt8 v1 = v3;
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  Hasher._combine(_:)(v1);
}

Swift::Int NANPublish.InternetSharingConfiguration.hashValue.getter()
{
  Hasher.init(_seed:)();
  sub_1001B7CF4(v0, (uint64_t)&v3);
  if (v5)
  {
    sub_1001B7D50((uint64_t)&v3);
    Swift::UInt8 v1 = 0;
  }
  else
  {
    Swift::UInt8 v1 = v4;
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_1001BC754()
{
  Hasher.init(_seed:)();
  sub_1001B7CF4(v0, (uint64_t)&v3);
  if (v5)
  {
    sub_1001B7D50((uint64_t)&v3);
    Swift::UInt8 v1 = 0;
  }
  else
  {
    Swift::UInt8 v1 = v4;
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t NANInternetSharingStatistics.Provider.sharingMode.setter(uint64_t result)
{
  *Swift::UInt8 v1 = result & 1;
  return result;
}

CoreP2P::NANPublish::DatapathConfiguration __swiftcall NANPublish.DatapathConfiguration.init(serviceType:serviceSpecificInfo:securityConfiguration:)(CoreP2P::NANDatapath::ServiceType serviceType, CoreP2P::NANGenericServiceProtocol serviceSpecificInfo, Swift::OpaquePointer securityConfiguration)
{
  int v3 = (serviceType << 16) | 0x200;
  result.securityConfiguration  = securityConfiguration;
  result.serviceSpecificInfo  = serviceSpecificInfo;
  result.parametersType  = v3;
  result.multicastType  = (CoreP2P::NANDatapath::ParametersMulticastType_optional)SBYTE1(v3);
  result.serviceType  = BYTE2(v3);
  return result;
}

uint64_t NANPublish.DatapathConfiguration.hash(into:)(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4)
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if ((a2 & 0xFF00) == 0x200)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1000867E0(a1, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_10009F4E4(a1, a4);

  return swift_bridgeObjectRelease();
}

uint64_t static NANPublish.DatapathConfiguration.__derived_struct_equals(_:_:)(int a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  return sub_1001BEE40(a1 & 0xFFFF01, a2, a3, a4 & 0xFFFF01, a5, a6);
}

Swift::Int NANPublish.DatapathConfiguration.hashValue.getter(__int16 a1, uint64_t a2, uint64_t a3)
{
  Hasher.init(_seed:)();
  NANPublish.DatapathConfiguration.hash(into:)((uint64_t)v7, a1 & 0xFF01, a2, a3);
  return Hasher._finalize()();
}

Swift::Int sub_1001BCA18()
{
  __int16 v1 = *v0;
  __int16 v2 = v0[1];
  uint64_t v3 = *((void *)v0 + 1);
  uint64_t v4 = *((void *)v0 + 2);
  Hasher.init(_seed:)();
  NANPublish.DatapathConfiguration.hash(into:)((uint64_t)v6, v1 | (v2 << 8), v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_1001BCA88(uint64_t a1)
{
  return NANPublish.DatapathConfiguration.hash(into:)(a1, *v1 | (unsigned __int16)(v1[1] << 8), *((void *)v1 + 1), *((void *)v1 + 2));
}

Swift::Int sub_1001BCAA4()
{
  __int16 v1 = *v0;
  __int16 v2 = v0[1];
  uint64_t v3 = *((void *)v0 + 1);
  uint64_t v4 = *((void *)v0 + 2);
  Hasher.init(_seed:)();
  NANPublish.DatapathConfiguration.hash(into:)((uint64_t)v6, v1 | (v2 << 8), v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_1001BCB10(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1001BEE40(*a1 | (a1[1] << 8) | (a1[2] << 16), *((void *)a1 + 1), *((void *)a1 + 2), *a2 | (a2[1] << 8) | (a2[2] << 16), *((void *)a2 + 1), *((void *)a2 + 2));
}

uint64_t NANPublish.Configuration.serviceSpecificInfo.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24)  = a1;
  ++*(unsigned char *)(v1 + 32);
  return result;
}

uint64_t (*NANPublish.Configuration.serviceSpecificInfo.modify(void *a1))(uint64_t result, char a2)
{
  *a1  = v1;
  return sub_1001BCBA4;
}

uint64_t sub_1001BCBA4(uint64_t result, char a2)
{
  if ((a2 & 1) == 0) {
    ++*(unsigned char *)(*(void *)result + 32);
  }
  return result;
}

uint64_t NANPublish.Configuration.matchingFilterTx.getter()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NANPublish.Configuration.matchingFilterTx.setter(char a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(unsigned char *)(v2 + 40)  = a1;
  *(void *)(v2 + 48)  = a2;
  return result;
}

uint64_t NANPublish.Configuration.matchingFilterRx.getter()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NANPublish.Configuration.matchingFilterRx.setter(char a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(unsigned char *)(v2 + 56)  = a1;
  *(void *)(v2 + 64)  = a2;
  return result;
}

uint64_t NANPublish.Configuration.solicitedTransmissionType.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 73)  = result & 1;
  return result;
}

uint64_t (*NANPublish.Configuration.solicitedTransmissionType.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANPublish.Configuration.eventCondition.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 74)  = result & 1;
  return result;
}

uint64_t NANPublish.Configuration.matchingFilterCondition.getter()
{
  return *(unsigned __int8 *)(v0 + 75);
}

uint64_t NANPublish.Configuration.matchingFilterCondition.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 75)  = result & 1;
  return result;
}

uint64_t (*NANPublish.Configuration.matchingFilterCondition.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANPublish.Configuration.rangingRequired.getter()
{
  return *(unsigned __int8 *)(v0 + 76);
}

uint64_t NANPublish.Configuration.rangingRequired.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 76)  = result;
  return result;
}

uint64_t (*NANPublish.Configuration.rangingRequired.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

unint64_t NANPublish.Configuration.managementAddress.getter()
{
  return *(unsigned __int16 *)(v0 + 78) | ((unint64_t)*(unsigned int *)(v0 + 80) << 16);
}

uint64_t NANPublish.Configuration.managementAddress.setter(uint64_t result)
{
  *(_WORD *)(v1 + 78)  = result;
  *(unsigned char *)(v1 + 80)  = BYTE2(result);
  *(unsigned char *)(v1 + 81)  = BYTE3(result);
  *(unsigned char *)(v1 + 82)  = BYTE4(result);
  *(unsigned char *)(v1 + 83)  = BYTE5(result);
  return result;
}

unint64_t NANPublish.Configuration.responderAddress.getter()
{
  return *(unsigned __int16 *)(v0 + 84) | ((unint64_t)*(unsigned int *)(v0 + 86) << 16);
}

uint64_t NANPublish.Configuration.responderAddress.setter(uint64_t result)
{
  *(_WORD *)(v1 + 84)  = result;
  *(unsigned char *)(v1 + 86)  = BYTE2(result);
  *(unsigned char *)(v1 + 87)  = BYTE3(result);
  *(unsigned char *)(v1 + 88)  = BYTE4(result);
  *(unsigned char *)(v1 + 89)  = BYTE5(result);
  return result;
}

uint64_t NANPublish.Configuration.announcementPeriod.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for NANPublish.Configuration() + 72);
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  char v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t NANPublish.Configuration.announcementPeriod.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for NANPublish.Configuration() + 72);
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  char v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*NANPublish.Configuration.announcementPeriod.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANPublish.Configuration.awakeDWInterval.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANPublish.Configuration() + 76));
}

uint64_t NANPublish.Configuration.awakeDWInterval.setter(char a1)
{
  uint64_t result = type metadata accessor for NANPublish.Configuration();
  *(unsigned char *)(v1 + *(int *)(result + 76))  = a1;
  return result;
}

uint64_t (*NANPublish.Configuration.awakeDWInterval.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANPublish.Configuration.enableFastDiscovery.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANPublish.Configuration() + 80));
}

uint64_t NANPublish.Configuration.enableFastDiscovery.setter(char a1)
{
  uint64_t result = type metadata accessor for NANPublish.Configuration();
  *(unsigned char *)(v1 + *(int *)(result + 80))  = a1;
  return result;
}

uint64_t (*NANPublish.Configuration.enableFastDiscovery.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANPublish.Configuration.datapathConfiguration.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANPublish.Configuration() + 84));
  uint64_t v2 = *v1 | (v1[1] << 8) | (v1[2] << 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t NANPublish.Configuration.datapathConfiguration.setter(unsigned int a1, uint64_t a2, uint64_t a3)
{
  char v6 = a1;
  unsigned int v7 = a1 >> 8;
  unsigned int v8 = HIWORD(a1);
  uint64_t v9 = v3 + *(int *)(type metadata accessor for NANPublish.Configuration() + 84);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(unsigned char *)uint64_t v9 = v6 & 1;
  *(unsigned char *)(v9 + 1)  = v7;
  *(unsigned char *)(v9 + 2)  = v8;
  *(void *)(v9 + 8)  = a2;
  *(void *)(v9 + 16)  = a3;
  return result;
}

uint64_t (*NANPublish.Configuration.datapathConfiguration.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANPublish.Configuration.internetSharingConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for NANPublish.Configuration();
  return sub_1000136F4(v1 + *(int *)(v3 + 88), a1, (uint64_t *)&unk_100486320);
}

uint64_t NANPublish.Configuration.internetSharingConfiguration.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for NANPublish.Configuration() + 88);

  return sub_1001BFA3C(a1, v3);
}

uint64_t (*NANPublish.Configuration.internetSharingConfiguration.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t sub_1001BD218()
{
  uint64_t v1 = v0;
  sub_100010BCC(&qword_10047CF68);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  char v5 = (char *)&v17 - v4;
  uint64_t v6 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0) - 8;
  __chkstk_darwin();
  unsigned int v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OWEKeys();
  __chkstk_darwin();
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_1004852B0);
  __chkstk_darwin();
  unint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for NANPublish.Configuration();
  sub_1001BFB08(v1 + *(int *)(v13 + 92), (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for OWEKeys);
  P256.KeyAgreement.PrivateKey.publicKey.getter();
  sub_1001BFB70((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for OWEKeys);
  uint64_t v14 = type metadata accessor for P256.KeyAgreement.PublicKey();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v12, 0, 1, v14);
  sub_10007FCA4(*(void *)(v1 + 24), (uint64_t)v8);
  sub_100087760((uint64_t)v12, (uint64_t)&v8[*(int *)(v6 + 32)]);
  sub_1001BFB08((uint64_t)v8, (uint64_t)v5, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  uint64_t v15 = type metadata accessor for NANGenericServiceProtocol.Attribute();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v5, 0, 1, v15);
  sub_1000136F4((uint64_t)v5, (uint64_t)v3, &qword_10047CF68);
  sub_100027C1C((uint64_t)v3, 7);
  sub_1001BFB70((uint64_t)v8, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  sub_1000380B4((uint64_t)v5, &qword_10047CF68);
  uint64_t result = sub_1000380B4((uint64_t)v12, (uint64_t *)&unk_1004852B0);
  ++*(unsigned char *)(v1 + 32);
  return result;
}

uint64_t NANPublish.Configuration.oweKeys.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for NANPublish.Configuration();
  return sub_1001BFB08(v1 + *(int *)(v3 + 92), a1, (uint64_t (*)(void))type metadata accessor for OWEKeys);
}

uint64_t NANPublish.Configuration.oweKeys.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for NANPublish.Configuration();
  sub_1001BFAA4(a1, v1 + *(int *)(v3 + 92));
  sub_1001BD218();
  return sub_1001BFB70(a1, (uint64_t (*)(void))type metadata accessor for OWEKeys);
}

uint64_t (*NANPublish.Configuration.oweKeys.modify(void *a1))(uint64_t a1, char a2)
{
  *a1  = v1;
  type metadata accessor for NANPublish.Configuration();
  return sub_1001BD5F8;
}

uint64_t sub_1001BD5F8(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return sub_1001BD218();
  }
  return result;
}

uint64_t NANPublish.Configuration.authenticationType.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANPublish.Configuration() + 96));
}

BOOL NANPublish.Configuration.requiresAuthentication.getter()
{
  return (*(unsigned char *)(v0 + *(int *)(type metadata accessor for NANPublish.Configuration() + 96)) & 1) == 0;
}

uint64_t NANPublish.Configuration.pairingBootstrappingMethod.getter()
{
  uint64_t v1 = type metadata accessor for NANPublish.Configuration();
  return *(unsigned __int16 *)(v0 + *(int *)(v1 + 100)) | (*(unsigned __int8 *)(v0 + *(int *)(v1 + 100) + 2) << 16);
}

uint64_t NANPublish.Configuration.pairingBootstrappingMethod.setter(int a1)
{
  uint64_t result = type metadata accessor for NANPublish.Configuration();
  uint64_t v4 = v1 + *(int *)(result + 100);
  *(_WORD *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 2)  = BYTE2(a1) & 1;
  return result;
}

uint64_t (*NANPublish.Configuration.pairingBootstrappingMethod.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

unint64_t NANPublish.Configuration.multicastAddress.getter()
{
  uint64_t v1 = (unsigned int *)(v0 + *(int *)(type metadata accessor for NANPublish.Configuration() + 104));
  return *v1 | ((unint64_t)*((unsigned __int16 *)v1 + 2) << 32) | ((unint64_t)*((unsigned __int8 *)v1 + 6) << 48);
}

uint64_t NANPublish.Configuration.multicastAddress.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for NANPublish.Configuration();
  uint64_t v4 = v1 + *(int *)(result + 104);
  *(_WORD *)(v4 + 4)  = WORD2(a1);
  *(_DWORD *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 6)  = BYTE6(a1) & 1;
  return result;
}

uint64_t (*NANPublish.Configuration.multicastAddress.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANPublish.Configuration.multicastServiceType.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANPublish.Configuration() + 108));
}

uint64_t NANPublish.Configuration.multicastServiceType.setter(char a1)
{
  uint64_t result = type metadata accessor for NANPublish.Configuration();
  *(unsigned char *)(v1 + *(int *)(result + 108))  = a1 & 1;
  return result;
}

uint64_t (*NANPublish.Configuration.multicastServiceType.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

void NANPublish.Configuration.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v50 = type metadata accessor for DispatchTimeInterval();
  uint64_t v4 = *(void *)(v50 - 8);
  __chkstk_darwin();
  uint64_t v6 = (Swift::UInt64 *)((char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  Hasher._combine(_:)(*(unsigned char *)v1);
  String.lowercased()();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(v1 + 24);
  swift_bridgeObjectRetain();
  sub_1000867E0(a1, v7);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(unsigned char *)(v2 + 32));
  uint64_t v8 = *(void *)(v2 + 48);
  uint64_t v9 = *(unsigned __int8 *)(v2 + 40);
  swift_bridgeObjectRetain();
  NANMatchingFilter.hash(into:)(a1, v9, v8);
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(v2 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v2 + 56);
  swift_bridgeObjectRetain();
  NANMatchingFilter.hash(into:)(a1, v11, v10);
  swift_bridgeObjectRelease();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(unsigned char *)(v2 + 76));
  if (*(unsigned char *)(v2 + 77) == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  Swift::UInt8 v12 = *(unsigned char *)(v2 + 79);
  Swift::UInt8 v13 = *(unsigned char *)(v2 + 80);
  Swift::UInt8 v14 = *(unsigned char *)(v2 + 81);
  Swift::UInt8 v15 = *(unsigned char *)(v2 + 82);
  Swift::UInt8 v16 = *(unsigned char *)(v2 + 83);
  Hasher._combine(_:)(*(unsigned char *)(v2 + 78));
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  Hasher._combine(_:)(v16);
  Swift::UInt8 v17 = *(unsigned char *)(v2 + 85);
  Swift::UInt8 v18 = *(unsigned char *)(v2 + 86);
  Swift::UInt8 v19 = *(unsigned char *)(v2 + 87);
  Swift::UInt8 v20 = *(unsigned char *)(v2 + 88);
  Swift::UInt8 v21 = *(unsigned char *)(v2 + 89);
  Hasher._combine(_:)(*(unsigned char *)(v2 + 84));
  Hasher._combine(_:)(v17);
  Hasher._combine(_:)(v18);
  Hasher._combine(_:)(v19);
  Hasher._combine(_:)(v20);
  Hasher._combine(_:)(v21);
  long long v22 = (int *)type metadata accessor for NANPublish.Configuration();
  uint64_t v23 = v50;
  (*(void (**)(Swift::UInt64 *, uint64_t, uint64_t))(v4 + 16))(v6, v2 + v22[18], v50);
  int v24 = (*(uint64_t (**)(Swift::UInt64 *, uint64_t))(v4 + 88))(v6, v23);
  if (v24 == enum case for DispatchTimeInterval.seconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v4 + 96))(v6, v23);
    int64_t v25 = *v6;
    uint64_t v26 = 1000000000;
LABEL_10:
    Swift::UInt64 v27 = v25 * v26;
    BOOL v28 = (unsigned __int128)(v25 * (__int128)v26) >> 64 != (v25 * v26) >> 63;
    BOOL v29 = v25 <= 0;
    unint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
    if (v29) {
      unint64_t v30 = 0x8000000000000000;
    }
    if (v28) {
      Swift::UInt64 v31 = v30;
    }
    else {
      Swift::UInt64 v31 = v27;
    }
    goto LABEL_15;
  }
  if (v24 == enum case for DispatchTimeInterval.milliseconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v4 + 96))(v6, v23);
    int64_t v25 = *v6;
    uint64_t v26 = 1000000;
    goto LABEL_10;
  }
  if (v24 == enum case for DispatchTimeInterval.microseconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v4 + 96))(v6, v23);
    int64_t v25 = *v6;
    uint64_t v26 = 1000;
    goto LABEL_10;
  }
  if (v24 == enum case for DispatchTimeInterval.nanoseconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v4 + 96))(v6, v23);
    Swift::UInt64 v31 = *v6;
  }
  else
  {
    if (v24 != enum case for DispatchTimeInterval.never(_:)) {
      (*(void (**)(Swift::UInt64 *, uint64_t))(v4 + 8))(v6, v23);
    }
    Swift::UInt64 v31 = 0x7FFFFFFFFFFFFFFFLL;
  }
LABEL_15:
  Hasher._combine(_:)(v31);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(unsigned char *)(v2 + v22[20]));
  uint64_t v32 = (unsigned __int8 *)(v2 + v22[21]);
  uint64_t v33 = *((void *)v32 + 1);
  uint64_t v34 = *((void *)v32 + 2);
  __int16 v35 = *v32 | (v32[1] << 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  NANPublish.DatapathConfiguration.hash(into:)(a1, v35, v33, v34);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000136F4(v2 + v22[22], (uint64_t)v55, (uint64_t *)&unk_100486320);
  if (v55[40] == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    sub_1001B7C98((uint64_t)v55, (uint64_t)v54);
    Hasher._combine(_:)(1u);
    sub_1001B7CF4((uint64_t)v54, (uint64_t)&v51);
    if (v53)
    {
      sub_1001B7D50((uint64_t)&v51);
      Swift::UInt8 v36 = 0;
    }
    else
    {
      Swift::UInt8 v36 = v52;
      Hasher._combine(_:)(1u);
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    Hasher._combine(_:)(v36);
    sub_1001B7D50((uint64_t)v54);
  }
  uint64_t v37 = P256.KeyAgreement.PrivateKey.rawRepresentation.getter();
  unint64_t v39 = v38;
  Data.hash(into:)();
  sub_10000C970(v37, v39);
  if (*(unsigned char *)(v2 + v22[24]) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
  }
  uint64_t v40 = v2 + v22[25];
  if (*(unsigned char *)(v40 + 2) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt16 v41 = *(_WORD *)v40;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v41);
  }
  long long v42 = (unsigned int *)(v2 + v22[26]);
  if (*((unsigned char *)v42 + 6))
  {
    LOBYTE(v43)  = 0;
  }
  else
  {
    unsigned int v44 = *((unsigned __int16 *)v42 + 2);
    int v45 = *v42;
    unint64_t v46 = *v42 | ((unint64_t)*((unsigned __int16 *)v42 + 2) << 32);
    unint64_t v47 = v46 >> 8;
    unint64_t v48 = v46 >> 16;
    unint64_t v49 = v46 >> 24;
    unsigned int v43 = v44 >> 8;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v45);
    Hasher._combine(_:)(v47);
    Hasher._combine(_:)(v48);
    Hasher._combine(_:)(v49);
    Hasher._combine(_:)(v44);
  }
  Hasher._combine(_:)(v43);
  if (*(unsigned char *)(v2 + v22[27]) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
  }
}

Swift::Int NANPublish.Configuration.hashValue.getter()
{
  Hasher.init(_seed:)();
  NANPublish.Configuration.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_1001BE190@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, char a11, char a12, char a13, char a14, char a15, char a16, int a17, __int16 a18, uint64_t a19, uint64_t a20,char a21,char a22,int a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,__int16 a29,__int16 a30,char a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  *(unsigned char *)a9  = a1;
  *(void *)(a9 + 8)  = a2;
  *(void *)(a9 + 16)  = a3;
  *(void *)(a9 + 24)  = a4;
  *(unsigned char *)(a9 + 32)  = a5;
  *(unsigned char *)(a9 + 40)  = a6;
  *(void *)(a9 + 48)  = a7;
  *(unsigned char *)(a9 + 56)  = a8;
  *(void *)(a9 + 64)  = a10;
  *(unsigned char *)(a9 + 72)  = a11;
  *(unsigned char *)(a9 + 73)  = a12 & 1;
  *(unsigned char *)(a9 + 74)  = a13 & 1;
  *(unsigned char *)(a9 + 75)  = a14 & 1;
  *(unsigned char *)(a9 + 76)  = a15;
  *(unsigned char *)(a9 + 77)  = a16;
  *(_DWORD *)(a9 + 78)  = a17;
  *(_WORD *)(a9 + 82)  = a18;
  *(_WORD *)(a9 + 85)  = *(_WORD *)((char *)&a19 + 1);
  *(unsigned char *)(a9 + 84)  = a19;
  *(_WORD *)(a9 + 87)  = *(_WORD *)((char *)&a19 + 3);
  *(unsigned char *)(a9 + 89)  = BYTE5(a19);
  uint64_t v37 = (int *)type metadata accessor for NANPublish.Configuration();
  uint64_t v38 = a9 + v37[18];
  uint64_t v39 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 32))(v38, a20, v39);
  *(unsigned char *)(a9 + v37[19])  = a21;
  *(unsigned char *)(a9 + v37[20])  = a22;
  uint64_t v40 = a9 + v37[21];
  *(unsigned char *)uint64_t v40 = a23 & 1;
  *(_WORD *)(v40 + 1)  = *(_WORD *)((char *)&a23 + 1);
  *(void *)(v40 + 8)  = a24;
  *(void *)(v40 + 16)  = a25;
  sub_1001C1A44(a26, a9 + v37[22]);
  uint64_t result = sub_1001C1AAC(a27, a9 + v37[23]);
  *(unsigned char *)(a9 + v37[24])  = a28 & 1;
  uint64_t v42 = a9 + v37[25];
  *(_WORD *)uint64_t v42 = a30;
  *(unsigned char *)(v42 + 2)  = a31 & 1;
  uint64_t v43 = a9 + v37[26];
  *(_WORD *)(v43 + 4)  = a33;
  *(_DWORD *)uint64_t v43 = a32;
  *(unsigned char *)(v43 + 6)  = a34 & 1;
  *(unsigned char *)(a9 + v37[27])  = a36 & 1;
  return result;
}

Swift::Int sub_1001BE3E4()
{
  Hasher.init(_seed:)();
  NANPublish.Configuration.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_1001BE420()
{
  return sub_1001BB7F0((void (*)(void))type metadata accessor for NANPublish.Configuration, &qword_100481F90);
}

uint64_t NANPublish.Configuration.init(instanceID:serviceName:instanceName:blob:txtRecordData:managementAddress:responderAddress:datapathConfiguration:announcementPeriod:furtherServiceDiscoveryFunction:enableFastDiscovery:authenticationType:internetSharingConfiguration:pairingBootstrappingMethod:publisherType:multicastAddress:multicastServiceType:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, unint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned __int8 a17, unsigned __int8 a18, char a19, uint64_t a20,unsigned __int16 a21,unsigned __int8 a22,unint64_t a23,char a24)
{
  uint64_t v92 = a6;
  unint64_t v93 = a7;
  uint64_t v90 = a2;
  int v89 = a1;
  uint64_t v88 = a9;
  type metadata accessor for OWEKeys();
  __chkstk_darwin();
  uint64_t v87 = (char *)&v65 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  uint64_t v86 = (uint64_t)&v65 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_1004852B0);
  __chkstk_darwin();
  uint64_t v32 = (char *)&v65 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_10047CF68);
  __chkstk_darwin();
  uint64_t v83 = (uint64_t)&v65 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  __int16 v35 = (uint64_t *)((char *)&v65 - v34);
  __chkstk_darwin();
  uint64_t v37 = (uint64_t *)((char *)&v65 - v36);
  __chkstk_darwin();
  uint64_t v39 = (char *)&v65 - v38;
  __chkstk_darwin();
  Swift::UInt16 v41 = (uint64_t *)((char *)&v65 - v40);
  uint64_t v42 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  uint64_t v84 = *(void *)(v42 - 8);
  uint64_t v85 = v42;
  __chkstk_darwin();
  long long v82 = (char *)&v65 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  P256.KeyAgreement.PrivateKey.init()();
  unint64_t v95 = sub_100035C48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v66 = v29;
  if (a5)
  {
    *Swift::UInt16 v41 = a4;
    v41[1]  = a5;
    uint64_t v44 = type metadata accessor for NANGenericServiceProtocol.Attribute();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v41, 0, 1, v44);
  }
  else
  {
    uint64_t v45 = type metadata accessor for NANGenericServiceProtocol.Attribute();
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v41, 1, 1, v45);
  }
  sub_1000136F4((uint64_t)v41, (uint64_t)v39, &qword_10047CF68);
  sub_100027C1C((uint64_t)v39, 3);
  sub_1000380B4((uint64_t)v41, &qword_10047CF68);
  unint64_t v46 = v93;
  uint64_t v91 = a3;
  uint64_t v65 = a8;
  if (v93 >> 60 == 15)
  {
    uint64_t v47 = type metadata accessor for NANGenericServiceProtocol.Attribute();
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v37, 1, 1, v47);
    uint64_t v48 = v92;
  }
  else
  {
    uint64_t v48 = v92;
    *uint64_t v37 = v92;
    v37[1]  = v46;
    uint64_t v49 = type metadata accessor for NANGenericServiceProtocol.Attribute();
    swift_storeEnumTagMultiPayload();
    uint64_t v50 = *(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56);
    uint64_t v51 = v49;
    unint64_t v46 = v93;
    v50(v37, 0, 1, v51);
  }
  unint64_t v74 = a23;
  int v81 = a22;
  int v73 = a21;
  int v78 = a18;
  int v80 = a17;
  uint64_t v79 = a16;
  uint64_t v76 = a15;
  uint64_t v77 = a20;
  uint64_t v75 = a14;
  int v72 = a13;
  uint64_t v71 = a12;
  uint64_t v70 = a11;
  sub_1000136F4((uint64_t)v37, (uint64_t)v39, &qword_10047CF68);
  sub_100038004(v48, v46);
  sub_100027C1C((uint64_t)v39, 6);
  sub_1000380B4((uint64_t)v37, &qword_10047CF68);
  if (a10 >> 60 == 15)
  {
    uint64_t v52 = type metadata accessor for NANGenericServiceProtocol.Attribute();
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v35, 1, 1, v52);
    uint64_t v53 = v65;
  }
  else
  {
    uint64_t v53 = v65;
    *__int16 v35 = v65;
    v35[1]  = a10;
    uint64_t v52 = type metadata accessor for NANGenericServiceProtocol.Attribute();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v35, 0, 1, v52);
  }
  uint64_t v54 = v66;
  int v68 = a24 & 1;
  int v69 = a19 & 1;
  sub_1000136F4((uint64_t)v35, (uint64_t)v39, &qword_10047CF68);
  sub_100038004(v53, a10);
  unint64_t v67 = a10;
  sub_100027C1C((uint64_t)v39, 4);
  sub_1000380B4((uint64_t)v35, &qword_10047CF68);
  uint64_t v55 = v82;
  P256.KeyAgreement.PrivateKey.publicKey.getter();
  uint64_t v56 = type metadata accessor for P256.KeyAgreement.PublicKey();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v32, 0, 1, v56);
  uint64_t v57 = v86;
  sub_10007FCA4(v95, v86);
  sub_100087760((uint64_t)v32, v57 + *(int *)(v54 + 24));
  sub_1001BFB08(v57, (uint64_t)v39, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  type metadata accessor for NANGenericServiceProtocol.Attribute();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v39, 0, 1, v52);
  uint64_t v58 = v83;
  sub_1000136F4((uint64_t)v39, v83, &qword_10047CF68);
  sub_100027C1C(v58, 7);
  sub_1001BFB70(v57, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  sub_1000380B4((uint64_t)v39, &qword_10047CF68);
  sub_1000380B4((uint64_t)v32, (uint64_t *)&unk_1004852B0);
  uint64_t v59 = v95;
  uint64_t v94 = 0;
  swift_stdlib_random();
  sub_10000C95C(v53, v67);
  sub_10000C95C(v92, v93);
  char v60 = v94;
  uint64_t v61 = (uint64_t)v87;
  (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v87, v55, v85);
  uint64_t v64 = v74 & 0xFFFFFFFFFFFFLL | ((HIWORD(v74) & 1) << 48);
  return sub_1001BE190(v89, v90, v91, v59, v60, 2, (uint64_t)_swiftEmptyArrayStorage, 3, v88, (uint64_t)_swiftEmptyArrayStorage, v81, 1, 0, 0, 0, v80, v70, (v70 & 0xFFFFFFFFFFFFuLL) >> 32, v71 & 0xFFFFFFFFFFFFLL,
           v79,
           1,
           v78 & 1,
           v72 & 0xFFFF01,
           v75,
           v76,
           v77,
           v61,
           v69,
           v63,
           v73,
           0,
           v64,
           SWORD2(v64),
           SBYTE6(v64),
           SHIBYTE(v64),
           v68);
}

uint64_t type metadata accessor for NANPublish.Configuration()
{
  uint64_t result = qword_100481F00;
  if (!qword_100481F00) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t _s7CoreP2P10NANPublishO28InternetSharingConfigurationO2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  sub_1001B7CF4(a1, (uint64_t)v10);
  sub_1001B7CF4(a2, (uint64_t)v11);
  if ((v10[40] & 1) == 0)
  {
    sub_1001B7CF4((uint64_t)v10, (uint64_t)v8);
    if (v13)
    {
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    int v4 = v9;
    int v5 = v12;
    if (v8[0] == v11[0] && v8[1] == v11[1])
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = 0;
      if ((v6 & 1) == 0)
      {
LABEL_12:
        sub_1001B7D50((uint64_t)v10);
        return v3;
      }
    }
    uint64_t v3 = v4 ^ v5 ^ 1u;
    goto LABEL_12;
  }
  if (v13 != 1)
  {
LABEL_6:
    sub_1000380B4((uint64_t)v10, &qword_100481FD0);
    return 0;
  }
  sub_1001B7D50((uint64_t)v11);
  sub_1001B7D50((uint64_t)v10);
  return 1;
}

uint64_t sub_1001BEE40(int a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  BOOL v12 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v13 = 1735617902;
  }
  else {
    uint64_t v13 = 7365742;
  }
  if (v12) {
    unint64_t v14 = 0xE300000000000000;
  }
  else {
    unint64_t v14 = 0xE400000000000000;
  }
  if (a4) {
    uint64_t v15 = 1735617902;
  }
  else {
    uint64_t v15 = 7365742;
  }
  if (a4) {
    unint64_t v16 = 0xE400000000000000;
  }
  else {
    unint64_t v16 = 0xE300000000000000;
  }
  if (v13 == v15 && v14 == v16)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v17 & 1) == 0) {
      return 0;
    }
  }
  int v18 = a4 & 0xFF00;
  if ((a1 & 0xFF00) == 0x200)
  {
    if (v18 != 512) {
      return 0;
    }
  }
  else
  {
    if (v18 == 512) {
      return 0;
    }
    if ((a1 & 0x100) != 0) {
      uint64_t v19 = 0x614D6F54796E616DLL;
    }
    else {
      uint64_t v19 = 0x6E614D6F54656E6FLL;
    }
    if ((a1 & 0x100) != 0) {
      unint64_t v20 = 0xEA0000000000796ELL;
    }
    else {
      unint64_t v20 = 0xE900000000000079;
    }
    if ((a4 & 0x100) != 0) {
      uint64_t v21 = 0x614D6F54796E616DLL;
    }
    else {
      uint64_t v21 = 0x6E614D6F54656E6FLL;
    }
    if ((a4 & 0x100) != 0) {
      unint64_t v22 = 0xEA0000000000796ELL;
    }
    else {
      unint64_t v22 = 0xE900000000000079;
    }
    if (v19 == v21 && v20 == v22)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v23 & 1) == 0) {
        return 0;
      }
    }
  }
  if (BYTE2(a1))
  {
    if (BYTE2(a1) == 1) {
      uint64_t v24 = 0x656D69746C616572;
    }
    else {
      uint64_t v24 = 0x6E6574614C776F6CLL;
    }
    if (BYTE2(a1) == 1) {
      unint64_t v25 = 0xE800000000000000;
    }
    else {
      unint64_t v25 = 0xEA00000000007963;
    }
  }
  else
  {
    unint64_t v25 = 0xE800000000000000;
    uint64_t v24 = 0x6576697470616461;
  }
  unint64_t v26 = 0xE800000000000000;
  uint64_t v27 = 0x656D69746C616572;
  if (BYTE2(a4) != 1)
  {
    uint64_t v27 = 0x6E6574614C776F6CLL;
    unint64_t v26 = 0xEA00000000007963;
  }
  if (BYTE2(a4)) {
    uint64_t v28 = v27;
  }
  else {
    uint64_t v28 = 0x6576697470616461;
  }
  if (BYTE2(a4)) {
    unint64_t v29 = v26;
  }
  else {
    unint64_t v29 = 0xE800000000000000;
  }
  if (v24 == v28 && v25 == v29)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_57;
  }
  char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v30 & 1) == 0) {
    return 0;
  }
LABEL_57:
  if ((sub_100081B6C(a2, a5) & 1) == 0) {
    return 0;
  }

  return sub_10009A4B4(a3, a6);
}

uint64_t _s7CoreP2P10NANPublishO13ConfigurationV23__derived_struct_equalsySbAE_AEtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  Swift::String v4 = String.lowercased()();
  Swift::String v5 = String.lowercased()();
  if (v4._countAndFlagsBits == v5._countAndFlagsBits && v4._object == v5._object)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    if ((v7 & 1) == 0) {
      return result;
    }
  }
  if ((sub_100081B6C(*((void *)a1 + 3), *((void *)a2 + 3)) & 1) == 0) {
    return 0;
  }
  if (a1[32] != a2[32]) {
    return 0;
  }
  uint64_t v9 = *((void *)a1 + 6);
  uint64_t v10 = *((void *)a2 + 6);
  if ((sub_100041E14(a1[40], a2[40]) & 1) == 0) {
    return 0;
  }
  if ((sub_1000965CC(v9, v10) & 1) == 0) {
    return 0;
  }
  uint64_t v11 = *((void *)a1 + 8);
  uint64_t v12 = *((void *)a2 + 8);
  if ((sub_100041E14(a1[56], a2[56]) & 1) == 0 || (sub_1000965CC(v11, v12) & 1) == 0) {
    return 0;
  }
  unint64_t v13 = 0xEB00000000646574;
  unint64_t v14 = 0x6963696C6F736E75;
  if (a1[72])
  {
    if (a1[72] == 1)
    {
      unint64_t v15 = 0x65746963696C6F73;
      unint64_t v16 = 0xE900000000000064;
    }
    else
    {
      unint64_t v16 = 0x80000001003D7E70;
      unint64_t v15 = 0xD000000000000017;
    }
  }
  else
  {
    unint64_t v15 = 0x6963696C6F736E75;
    unint64_t v16 = 0xEB00000000646574;
  }
  if (a2[72])
  {
    if (a2[72] == 1)
    {
      unint64_t v14 = 0x65746963696C6F73;
      unint64_t v13 = 0xE900000000000064;
    }
    else
    {
      unint64_t v13 = 0x80000001003D7E70;
      unint64_t v14 = 0xD000000000000017;
    }
  }
  if (v15 == v14 && v16 == v13)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    if ((v17 & 1) == 0) {
      return result;
    }
  }
  uint64_t v18 = a1[73] ? 0x73616369746C756DLL : 0x74736163696E75;
  unint64_t v19 = a1[73] ? 0xE900000000000074 : 0xE700000000000000;
  uint64_t v20 = a2[73] ? 0x73616369746C756DLL : 0x74736163696E75;
  unint64_t v21 = a2[73] ? 0xE900000000000074 : 0xE700000000000000;
  if (v18 == v20 && v19 == v21)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    if ((v22 & 1) == 0) {
      return result;
    }
  }
  uint64_t v23 = a1[74] ? 0x65746963696C6F73 : 1701736302;
  unint64_t v24 = a1[74] ? 0xEB00000000785464 : 0xE400000000000000;
  uint64_t v25 = a2[74] ? 0x65746963696C6F73 : 1701736302;
  unint64_t v26 = a2[74] ? 0xEB00000000785464 : 0xE400000000000000;
  if (v23 == v25 && v24 == v26)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    if ((v27 & 1) == 0) {
      return result;
    }
  }
  uint64_t v28 = a1[75] ? 0x757145746F4E7874 : 0x526C617571457874;
  unint64_t v29 = a1[75] ? 0xEC00000078526C61 : 0xE900000000000078;
  uint64_t v30 = a2[75] ? 0x757145746F4E7874 : 0x526C617571457874;
  unint64_t v31 = a2[75] ? 0xEC00000078526C61 : 0xE900000000000078;
  if (v28 == v30 && v29 == v31)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    if ((v32 & 1) == 0) {
      return result;
    }
  }
  if (a1[76] != a2[76]) {
    return 0;
  }
  int v33 = a1[77];
  int v34 = a2[77];
  if (v33 == 2)
  {
    if (v34 != 2) {
      return 0;
    }
  }
  else
  {
    if (v34 == 2) {
      return 0;
    }
    if (v33) {
      uint64_t v35 = 7561575;
    }
    else {
      uint64_t v35 = 0x7055776F6C6C6F66;
    }
    if (v33) {
      unint64_t v36 = 0xE300000000000000;
    }
    else {
      unint64_t v36 = 0xE800000000000000;
    }
    if (v34) {
      uint64_t v37 = 7561575;
    }
    else {
      uint64_t v37 = 0x7055776F6C6C6F66;
    }
    if (v34) {
      unint64_t v38 = 0xE300000000000000;
    }
    else {
      unint64_t v38 = 0xE800000000000000;
    }
    if (v35 == v37 && v36 == v38)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = 0;
      if ((v39 & 1) == 0) {
        return result;
      }
    }
  }
  int v40 = *((unsigned __int16 *)a1 + 41);
  int v41 = *((unsigned __int16 *)a2 + 41);
  *(_DWORD *)uint64_t v88 = *(_DWORD *)(a1 + 78);
  *(_WORD *)&v88[4]  = v40;
  if (*(_DWORD *)v88 != *(_DWORD *)(a2 + 78) || v40 != v41) {
    return 0;
  }
  int v43 = *((unsigned __int16 *)a1 + 44);
  int v44 = *((unsigned __int16 *)a2 + 44);
  *(_DWORD *)uint64_t v88 = *((_DWORD *)a1 + 21);
  *(_WORD *)&v88[4]  = v43;
  if (*(_DWORD *)v88 != *((_DWORD *)a2 + 21) || v43 != v44) {
    return 0;
  }
  unint64_t v46 = (int *)type metadata accessor for NANPublish.Configuration();
  if ((static DispatchTimeInterval.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  if ((sub_100041D58(a1[v46[19]], a2[v46[19]]) & 1) == 0) {
    return 0;
  }
  if (a1[v46[20]] != a2[v46[20]]) {
    return 0;
  }
  uint64_t v47 = v46[21];
  int v48 = a1[v47];
  int v49 = a1[v47 + 1];
  int v50 = a1[v47 + 2];
  uint64_t v51 = *(void *)&a1[v47 + 8];
  uint64_t v52 = *(void *)&a1[v47 + 16];
  uint64_t v53 = &a2[v47];
  if ((sub_1001BEE40(v48 | (v49 << 8) | (v50 << 16), v51, v52, *v53 | (v53[1] << 8) | (v53[2] << 16), *((void *)v53 + 1), *((void *)v53 + 2)) & 1) == 0)return 0; {
  sub_1000136F4((uint64_t)&a1[v46[22]], (uint64_t)v93, (uint64_t *)&unk_100486320);
  }
  sub_1000136F4((uint64_t)&a2[v46[22]], (uint64_t)v92, (uint64_t *)&unk_100486320);
  sub_1000136F4((uint64_t)v93, (uint64_t)v88, (uint64_t *)&unk_100486320);
  sub_1000136F4((uint64_t)v92, (uint64_t)v90, (uint64_t *)&unk_100486320);
  if (v89 == 255)
  {
    sub_1000380B4((uint64_t)v92, (uint64_t *)&unk_100486320);
    sub_1000380B4((uint64_t)v93, (uint64_t *)&unk_100486320);
    if (v91 == 255)
    {
      sub_1000380B4((uint64_t)v88, (uint64_t *)&unk_100486320);
      goto LABEL_117;
    }
LABEL_122:
    sub_1000380B4((uint64_t)v88, &qword_100481DA8);
    return 0;
  }
  sub_1000136F4((uint64_t)v88, (uint64_t)v87, (uint64_t *)&unk_100486320);
  if (v91 == 255)
  {
    sub_1000380B4((uint64_t)v92, (uint64_t *)&unk_100486320);
    sub_1000380B4((uint64_t)v93, (uint64_t *)&unk_100486320);
    sub_1001B7D50((uint64_t)v87);
    goto LABEL_122;
  }
  sub_1001B7C98((uint64_t)v90, (uint64_t)v86);
  char v54 = _s7CoreP2P10NANPublishO28InternetSharingConfigurationO2eeoiySbAE_AEtFZ_0((uint64_t)v87, (uint64_t)v86);
  sub_1001B7D50((uint64_t)v86);
  sub_1000380B4((uint64_t)v92, (uint64_t *)&unk_100486320);
  sub_1000380B4((uint64_t)v93, (uint64_t *)&unk_100486320);
  sub_1001B7D50((uint64_t)v87);
  sub_1000380B4((uint64_t)v88, (uint64_t *)&unk_100486320);
  if ((v54 & 1) == 0) {
    return 0;
  }
LABEL_117:
  uint64_t v55 = P256.KeyAgreement.PrivateKey.rawRepresentation.getter();
  unint64_t v57 = v56;
  uint64_t v58 = P256.KeyAgreement.PrivateKey.rawRepresentation.getter();
  unint64_t v60 = v59;
  char v61 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v55, v57, v58, v59);
  sub_10000C970(v58, v60);
  sub_10000C970(v55, v57);
  if (v61)
  {
    uint64_t v62 = v46[24];
    unsigned __int8 v63 = a1[v62];
    int v64 = a2[v62];
    if (v63)
    {
      if (!v64) {
        return 0;
      }
    }
    else if (v64)
    {
      return 0;
    }
    uint64_t v65 = v46[25];
    uint64_t v66 = &a1[v65];
    unsigned __int8 v67 = a1[v65 + 2];
    int v68 = &a2[v65];
    int v69 = a2[v65 + 2];
    if (v67)
    {
      if (!v69) {
        return 0;
      }
    }
    else
    {
      if (*(unsigned __int16 *)v66 != *(unsigned __int16 *)v68) {
        LOBYTE(v69)  = 1;
      }
      if (v69) {
        return 0;
      }
    }
    uint64_t v70 = v46[26];
    uint64_t v71 = &a1[v70];
    unsigned __int8 v72 = a1[v70 + 6];
    int v73 = &a2[v70];
    if (v72)
    {
      if (!v73[6]) {
        return 0;
      }
    }
    else
    {
      if (v73[6]) {
        return 0;
      }
      unint64_t v74 = *(unsigned int *)v71 | ((unint64_t)*((unsigned __int16 *)v71 + 2) << 32);
      unint64_t v75 = *(unsigned int *)v73 | ((unint64_t)*((unsigned __int16 *)v73 + 2) << 32);
      v76.i64[0]  = 0xFFFFFFFFFFFFLL;
      v76.i64[1]  = 0xFFFFFFFFFFFFLL;
      uint64x2_t v77 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v74), v76);
      int16x8_t v78 = (int16x8_t)vshlq_u64(v77, (uint64x2_t)xmmword_1003B2EB0);
      uint64x2_t v79 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v75), v76);
      int64x2_t v80 = (int64x2_t)vshlq_u64(v79, (uint64x2_t)xmmword_1003B2EB0);
      int16x8_t v81 = (int16x8_t)vshlq_u64(v79, (uint64x2_t)xmmword_1003B2EA0);
      v88[0]  = v74;
      *(int32x2_t *)v77.i8  = vmovn_s64((int64x2_t)vshlq_u64(v77, (uint64x2_t)xmmword_1003B2EA0));
      *(int32x2_t *)v78.i8  = vmovn_s64((int64x2_t)v78);
      v78.i16[1]  = v78.i16[2];
      v78.i16[2]  = v77.i16[0];
      v78.i16[3]  = v77.i16[2];
      *(_DWORD *)&v88[1]  = vmovn_s16(v78).u32[0];
      v88[5]  = BYTE5(v74);
      v93[0]  = v75;
      *(int32x2_t *)v77.i8  = vmovn_s64((int64x2_t)v81);
      *(int32x2_t *)v81.i8  = vmovn_s64(v80);
      v81.i16[1]  = v81.i16[2];
      v81.i16[2]  = v77.i16[0];
      v81.i16[3]  = v77.i16[2];
      *(_DWORD *)&v93[1]  = vmovn_s16(v81).u32[0];
      v93[5]  = BYTE5(v75);
      if (*(_DWORD *)v88 != *(_DWORD *)v93 || *(unsigned __int16 *)&v88[4] != *(unsigned __int16 *)&v93[4]) {
        return 0;
      }
    }
    uint64_t v83 = v46[27];
    unsigned __int8 v84 = a1[v83];
    unsigned __int8 v85 = a2[v83];
    if (v84)
    {
      if (v85) {
        return 1;
      }
    }
    else if ((v85 & 1) == 0)
    {
      return 1;
    }
  }
  return 0;
}

unint64_t _s7CoreP2P10NANPublishO11PublishTypeO8rawValueAESgSS_tcfC_0(Swift::String string)
{
  object  = string._object;
  v2._countAndFlagsBits  = string._countAndFlagsBits;
  v2._object  = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10044DEB8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t sub_1001BFA3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010BCC((uint64_t *)&unk_100486320);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001BFAA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OWEKeys();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001BFB08(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001BFB70(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_1001BFBD4()
{
  unint64_t result = qword_100481E08;
  if (!qword_100481E08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481E08);
  }
  return result;
}

unint64_t sub_1001BFC2C()
{
  unint64_t result = qword_100481E10;
  if (!qword_100481E10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481E10);
  }
  return result;
}

unint64_t sub_1001BFC84()
{
  unint64_t result = qword_100481E18;
  if (!qword_100481E18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481E18);
  }
  return result;
}

unint64_t sub_1001BFCDC()
{
  unint64_t result = qword_100481E20;
  if (!qword_100481E20)
  {
    sub_100014434(&qword_100481E28);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481E20);
  }
  return result;
}

unint64_t sub_1001BFD3C()
{
  unint64_t result = qword_100481E30;
  if (!qword_100481E30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481E30);
  }
  return result;
}

unint64_t sub_1001BFD94()
{
  unint64_t result = qword_100481E38;
  if (!qword_100481E38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481E38);
  }
  return result;
}

unint64_t sub_1001BFDEC()
{
  unint64_t result = qword_100481E40;
  if (!qword_100481E40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481E40);
  }
  return result;
}

uint64_t sub_1001BFE40(uint64_t a1)
{
  uint64_t result = sub_1001BFF20(&qword_100481E48);
  *(void *)(a1 + 8)  = result;
  return result;
}

uint64_t sub_1001BFE84(uint64_t a1)
{
  *(void *)(a1 + 8)  = sub_1001BFF20(&qword_100481E90);
  uint64_t result = sub_1001BFF20(&qword_100481E98);
  *(void *)(a1 + 16)  = result;
  return result;
}

uint64_t sub_1001BFEEC()
{
  return sub_1001BFF20(&qword_100481EA0);
}

uint64_t sub_1001BFF20(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for NANPublish.Configuration();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for NANPublish()
{
  return &type metadata for NANPublish;
}

unsigned char *storeEnumTagSinglePayload for NANPublish.PublishType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001C0040);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANPublish.PublishType()
{
  return &type metadata for NANPublish.PublishType;
}

ValueMetadata *type metadata accessor for NANPublish.SolicitedTransmissionType()
{
  return &type metadata for NANPublish.SolicitedTransmissionType;
}

ValueMetadata *type metadata accessor for NANPublish.EventCondition()
{
  return &type metadata for NANPublish.EventCondition;
}

unsigned char *_s7CoreP2P10NANPublishO25SolicitedTransmissionTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001C0168);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANPublish.FurtherServiceDiscoveryFunction()
{
  return &type metadata for NANPublish.FurtherServiceDiscoveryFunction;
}

uint64_t destroy for NANPublish.InternetSharingConfiguration(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 2) {
    unsigned int v1 = *(_DWORD *)a1 + 2;
  }
  if (v1 == 1) {
    return sub_100010754(a1);
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t initializeWithCopy for NANPublish.InternetSharingConfiguration(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2) {
    unsigned int v3 = *(_DWORD *)a2 + 2;
  }
  if (v3 == 1)
  {
    long long v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24)  = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    char v5 = 1;
  }
  else
  {
    uint64_t v6 = *(void *)(a2 + 8);
    *(void *)a1  = *(void *)a2;
    *(void *)(a1 + 8)  = v6;
    *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
    swift_bridgeObjectRetain();
    char v5 = 0;
  }
  *(unsigned char *)(a1 + 40)  = v5;
  return a1;
}

uint64_t assignWithCopy for NANPublish.InternetSharingConfiguration(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {
      sub_100010754(a1);
    }
    else {
      swift_bridgeObjectRelease();
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      uint64_t v6 = *(void *)(a2 + 24);
      *(void *)(a1 + 24)  = v6;
      *(void *)(a1 + 32)  = *(void *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40)  = 1;
    }
    else
    {
      *(void *)a1  = *(void *)a2;
      *(void *)(a1 + 8)  = *(void *)(a2 + 8);
      *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
      *(unsigned char *)(a1 + 40)  = 0;
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

uint64_t assignWithTake for NANPublish.InternetSharingConfiguration(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {
      sub_100010754(a1);
    }
    else {
      swift_bridgeObjectRelease();
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1  = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16)  = v6;
      *(void *)(a1 + 32)  = *(void *)(a2 + 32);
      char v7 = 1;
    }
    else
    {
      char v7 = 0;
      *(_OWORD *)a1  = *(_OWORD *)a2;
      *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
    }
    *(unsigned char *)(a1 + 40)  = v7;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for NANPublish.InternetSharingConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 2) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for NANPublish.InternetSharingConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 25)  = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16)  = 0u;
    *(_DWORD *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41)  = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40)  = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1001C0480(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 2) {
    return (*(_DWORD *)a1 + 2);
  }
  return result;
}

uint64_t sub_1001C049C(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(void *)(result + 32)  = 0;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16)  = 0u;
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2)  = 2;
  }
  *(unsigned char *)(result + 40)  = a2;
  return result;
}

ValueMetadata *type metadata accessor for NANPublish.InternetSharingConfiguration()
{
  return &type metadata for NANPublish.InternetSharingConfiguration;
}

uint64_t destroy for NANPublish.DatapathConfiguration()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t _s7CoreP2P10NANPublishO21DatapathConfigurationVwCP_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NANPublish.DatapathConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1)  = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2)  = *(unsigned char *)(a2 + 2);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for NANPublish.DatapathConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NANPublish.DatapathConfiguration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NANPublish.DatapathConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8)  = 0;
    *(void *)(result + 16)  = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24)  = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8)  = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANPublish.DatapathConfiguration()
{
  return &type metadata for NANPublish.DatapathConfiguration;
}

void *initializeBufferWithCopyOfBuffer for NANPublish.Configuration(uint64_t a1, uint64_t *a2, int *a3)
{
  unsigned int v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (void *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1  = *(unsigned char *)a2;
    uint64_t v7 = a2[2];
    *(void *)(a1 + 8)  = a2[1];
    *(void *)(a1 + 16)  = v7;
    *(void *)(a1 + 24)  = a2[3];
    *(unsigned char *)(a1 + 32)  = *((unsigned char *)a2 + 32);
    *(unsigned char *)(a1 + 40)  = *((unsigned char *)a2 + 40);
    *(void *)(a1 + 48)  = a2[6];
    *(unsigned char *)(a1 + 56)  = *((unsigned char *)a2 + 56);
    uint64_t v8 = a2[8];
    *(unsigned char *)(a1 + 72)  = *((unsigned char *)a2 + 72);
    *(unsigned char *)(a1 + 73)  = *((unsigned char *)a2 + 73);
    *(unsigned char *)(a1 + 74)  = *((unsigned char *)a2 + 74);
    *(unsigned char *)(a1 + 75)  = *((unsigned char *)a2 + 75);
    *(_WORD *)(a1 + 76)  = *((_WORD *)a2 + 38);
    *(_DWORD *)(a1 + 78)  = *(_DWORD *)((char *)a2 + 78);
    *(_WORD *)(a1 + 82)  = *((_WORD *)a2 + 41);
    *(_DWORD *)(a1 + 84)  = *((_DWORD *)a2 + 21);
    *(_WORD *)(a1 + 88)  = *((_WORD *)a2 + 44);
    uint64_t v9 = a3[18];
    uint64_t v37 = (uint64_t)a2 + v9;
    uint64_t v38 = a1 + v9;
    *(void *)(a1 + 64)  = v8;
    uint64_t v10 = type metadata accessor for DispatchTimeInterval();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v38, v37, v10);
    uint64_t v12 = a3[20];
    *((unsigned char *)v4 + a3[19])  = *((unsigned char *)a2 + a3[19]);
    *((unsigned char *)v4 + v12)  = *((unsigned char *)a2 + v12);
    uint64_t v13 = a3[21];
    uint64_t v14 = a3[22];
    unint64_t v15 = (char *)v4 + v13;
    unint64_t v16 = (char *)a2 + v13;
    *unint64_t v15 = *v16;
    *(_WORD *)(v15 + 1)  = *(_WORD *)(v16 + 1);
    uint64_t v17 = *((void *)v16 + 2);
    *((void *)v15 + 1)  = *((void *)v16 + 1);
    *((void *)v15 + 2)  = v17;
    uint64_t v18 = (char *)v4 + v14;
    uint64_t v19 = (uint64_t)a2 + v14;
    int v20 = *((unsigned __int8 *)a2 + v14 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v20 == 255)
    {
      long long v21 = *(_OWORD *)(v19 + 16);
      *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
      *((_OWORD *)v18 + 1)  = v21;
      *(_OWORD *)(v18 + 25)  = *(_OWORD *)(v19 + 25);
    }
    else if (v20)
    {
      long long v24 = *(_OWORD *)(v19 + 24);
      *(_OWORD *)(v18 + 24)  = v24;
      (**(void (***)(char *, uint64_t))(v24 - 8))(v18, v19);
      v18[40]  = 1;
    }
    else
    {
      uint64_t v23 = *(void *)(v19 + 8);
      *(void *)uint64_t v18 = *(void *)v19;
      *((void *)v18 + 1)  = v23;
      unsigned char v18[16] = *(unsigned char *)(v19 + 16);
      v18[40]  = 0;
      swift_bridgeObjectRetain();
    }
    uint64_t v25 = a3[23];
    unint64_t v26 = (char *)v4 + v25;
    uint64_t v27 = (uint64_t)a2 + v25;
    uint64_t v28 = type metadata accessor for P256.KeyAgreement.PrivateKey();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
    uint64_t v29 = a3[25];
    *((unsigned char *)v4 + a3[24])  = *((unsigned char *)a2 + a3[24]);
    uint64_t v30 = (char *)v4 + v29;
    uint64_t v31 = (uint64_t)a2 + v29;
    *(_WORD *)uint64_t v30 = *(_WORD *)v31;
    v30[2]  = *(unsigned char *)(v31 + 2);
    uint64_t v32 = a3[26];
    uint64_t v33 = a3[27];
    int v34 = (_DWORD *)((char *)v4 + v32);
    uint64_t v35 = (_DWORD *)((char *)a2 + v32);
    *int v34 = *v35;
    *(_DWORD *)((char *)v34 + 3)  = *(_DWORD *)((char *)v35 + 3);
    *((unsigned char *)v4 + v33)  = *((unsigned char *)a2 + v33);
  }
  return v4;
}

uint64_t destroy for NANPublish.Configuration(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[18];
  uint64_t v5 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + a2[22];
  int v7 = *(unsigned __int8 *)(v6 + 40);
  if (v7 != 255)
  {
    if (v7) {
      sub_100010754(v6);
    }
    else {
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v8 = a1 + a2[23];
  uint64_t v9 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);

  return v10(v8, v9);
}

uint64_t initializeWithCopy for NANPublish.Configuration(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = v6;
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32)  = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 40)  = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48)  = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56)  = *(unsigned char *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72)  = *(unsigned char *)(a2 + 72);
  *(unsigned char *)(a1 + 73)  = *(unsigned char *)(a2 + 73);
  *(unsigned char *)(a1 + 74)  = *(unsigned char *)(a2 + 74);
  *(unsigned char *)(a1 + 75)  = *(unsigned char *)(a2 + 75);
  *(_WORD *)(a1 + 76)  = *(_WORD *)(a2 + 76);
  *(_DWORD *)(a1 + 78)  = *(_DWORD *)(a2 + 78);
  *(_WORD *)(a1 + 82)  = *(_WORD *)(a2 + 82);
  *(_DWORD *)(a1 + 84)  = *(_DWORD *)(a2 + 84);
  *(_WORD *)(a1 + 88)  = *(_WORD *)(a2 + 88);
  uint64_t v8 = a3[18];
  uint64_t v35 = a2 + v8;
  uint64_t v36 = a1 + v8;
  *(void *)(a1 + 64)  = v7;
  uint64_t v9 = type metadata accessor for DispatchTimeInterval();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v36, v35, v9);
  uint64_t v11 = a3[20];
  *(unsigned char *)(a1 + a3[19])  = *(unsigned char *)(a2 + a3[19]);
  *(unsigned char *)(a1 + v11)  = *(unsigned char *)(a2 + v11);
  uint64_t v12 = a3[21];
  uint64_t v13 = a3[22];
  uint64_t v14 = a1 + v12;
  uint64_t v15 = a2 + v12;
  *(unsigned char *)uint64_t v14 = *(unsigned char *)v15;
  *(_WORD *)(v14 + 1)  = *(_WORD *)(v15 + 1);
  uint64_t v16 = *(void *)(v15 + 16);
  *(void *)(v14 + 8)  = *(void *)(v15 + 8);
  *(void *)(v14 + 16)  = v16;
  uint64_t v17 = a1 + v13;
  uint64_t v18 = a2 + v13;
  int v19 = *(unsigned __int8 *)(a2 + v13 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v19 == 255)
  {
    long long v20 = *(_OWORD *)(v18 + 16);
    *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
    *(_OWORD *)(v17 + 16)  = v20;
    *(_OWORD *)(v17 + 25)  = *(_OWORD *)(v18 + 25);
  }
  else if (v19)
  {
    long long v22 = *(_OWORD *)(v18 + 24);
    *(_OWORD *)(v17 + 24)  = v22;
    (**(void (***)(uint64_t, uint64_t))(v22 - 8))(v17, v18);
    *(unsigned char *)(v17 + 40)  = 1;
  }
  else
  {
    uint64_t v21 = *(void *)(v18 + 8);
    *(void *)uint64_t v17 = *(void *)v18;
    *(void *)(v17 + 8)  = v21;
    *(unsigned char *)(v17 + 16)  = *(unsigned char *)(v18 + 16);
    *(unsigned char *)(v17 + 40)  = 0;
    swift_bridgeObjectRetain();
  }
  uint64_t v23 = a3[23];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  uint64_t v26 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16))(v24, v25, v26);
  uint64_t v27 = a3[25];
  *(unsigned char *)(a1 + a3[24])  = *(unsigned char *)(a2 + a3[24]);
  uint64_t v28 = a1 + v27;
  uint64_t v29 = a2 + v27;
  *(_WORD *)uint64_t v28 = *(_WORD *)v29;
  *(unsigned char *)(v28 + 2)  = *(unsigned char *)(v29 + 2);
  uint64_t v30 = a3[26];
  uint64_t v31 = a3[27];
  uint64_t v32 = (_DWORD *)(a1 + v30);
  uint64_t v33 = (_DWORD *)(a2 + v30);
  *uint64_t v32 = *v33;
  *(_DWORD *)((char *)v32 + 3)  = *(_DWORD *)((char *)v33 + 3);
  *(unsigned char *)(a1 + v31)  = *(unsigned char *)(a2 + v31);
  return a1;
}

uint64_t assignWithCopy for NANPublish.Configuration(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32)  = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 40)  = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48)  = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56)  = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64)  = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72)  = *(unsigned char *)(a2 + 72);
  *(unsigned char *)(a1 + 73)  = *(unsigned char *)(a2 + 73);
  *(unsigned char *)(a1 + 74)  = *(unsigned char *)(a2 + 74);
  *(unsigned char *)(a1 + 75)  = *(unsigned char *)(a2 + 75);
  *(unsigned char *)(a1 + 76)  = *(unsigned char *)(a2 + 76);
  *(unsigned char *)(a1 + 77)  = *(unsigned char *)(a2 + 77);
  *(unsigned char *)(a1 + 78)  = *(unsigned char *)(a2 + 78);
  *(unsigned char *)(a1 + 79)  = *(unsigned char *)(a2 + 79);
  *(unsigned char *)(a1 + 80)  = *(unsigned char *)(a2 + 80);
  *(unsigned char *)(a1 + 81)  = *(unsigned char *)(a2 + 81);
  *(unsigned char *)(a1 + 82)  = *(unsigned char *)(a2 + 82);
  *(unsigned char *)(a1 + 83)  = *(unsigned char *)(a2 + 83);
  *(unsigned char *)(a1 + 84)  = *(unsigned char *)(a2 + 84);
  *(unsigned char *)(a1 + 85)  = *(unsigned char *)(a2 + 85);
  *(unsigned char *)(a1 + 86)  = *(unsigned char *)(a2 + 86);
  *(unsigned char *)(a1 + 87)  = *(unsigned char *)(a2 + 87);
  *(unsigned char *)(a1 + 88)  = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 89)  = *(unsigned char *)(a2 + 89);
  uint64_t v6 = a3[18];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *(unsigned char *)(a1 + a3[19])  = *(unsigned char *)(a2 + a3[19]);
  *(unsigned char *)(a1 + a3[20])  = *(unsigned char *)(a2 + a3[20]);
  uint64_t v10 = a3[21];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(unsigned char *)uint64_t v11 = *(unsigned char *)(a2 + v10);
  *(unsigned char *)(v11 + 1)  = *(unsigned char *)(a2 + v10 + 1);
  *(unsigned char *)(v11 + 2)  = *(unsigned char *)(a2 + v10 + 2);
  *(void *)(v11 + 8)  = *(void *)(a2 + v10 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v11 + 16)  = *(void *)(v12 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[22];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = (long long *)(a2 + v13);
  int v16 = *(unsigned __int8 *)(a1 + v13 + 40);
  int v17 = *(unsigned __int8 *)(a2 + v13 + 40);
  if (v16 == 255)
  {
    if (v17 == 255)
    {
      long long v20 = *v15;
      long long v21 = v15[1];
      *(_OWORD *)(v14 + 25)  = *(long long *)((char *)v15 + 25);
      *(_OWORD *)uint64_t v14 = v20;
      *(_OWORD *)(v14 + 16)  = v21;
      goto LABEL_11;
    }
    if (v17)
    {
LABEL_8:
      uint64_t v22 = *((void *)v15 + 3);
      *(void *)(v14 + 24)  = v22;
      *(void *)(v14 + 32)  = *((void *)v15 + 4);
      (**(void (***)(uint64_t, long long *))(v22 - 8))(v14, v15);
      *(unsigned char *)(v14 + 40)  = 1;
      goto LABEL_11;
    }
LABEL_10:
    *(void *)uint64_t v14 = *(void *)v15;
    *(void *)(v14 + 8)  = *((void *)v15 + 1);
    *(unsigned char *)(v14 + 16)  = *((unsigned char *)v15 + 16);
    *(unsigned char *)(v14 + 40)  = 0;
    swift_bridgeObjectRetain();
    goto LABEL_11;
  }
  if (v17 != 255)
  {
    if (a1 == a2) {
      goto LABEL_11;
    }
    sub_1001B7D50(v14);
    if (*((unsigned char *)v15 + 40)) {
      goto LABEL_8;
    }
    goto LABEL_10;
  }
  sub_1001B7D50(v14);
  long long v18 = *(long long *)((char *)v15 + 25);
  long long v19 = v15[1];
  *(_OWORD *)uint64_t v14 = *v15;
  *(_OWORD *)(v14 + 16)  = v19;
  *(_OWORD *)(v14 + 25)  = v18;
LABEL_11:
  uint64_t v23 = a3[23];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  uint64_t v26 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 24))(v24, v25, v26);
  *(unsigned char *)(a1 + a3[24])  = *(unsigned char *)(a2 + a3[24]);
  uint64_t v27 = a3[25];
  uint64_t v28 = a1 + v27;
  uint64_t v29 = a2 + v27;
  char v30 = *(unsigned char *)(v29 + 2);
  *(_WORD *)uint64_t v28 = *(_WORD *)v29;
  *(unsigned char *)(v28 + 2)  = v30;
  uint64_t v31 = a3[26];
  uint64_t v32 = (_DWORD *)(a1 + v31);
  uint64_t v33 = (_DWORD *)(a2 + v31);
  int v34 = *(_DWORD *)((char *)v33 + 3);
  *uint64_t v32 = *v33;
  *(_DWORD *)((char *)v32 + 3)  = v34;
  *(unsigned char *)(a1 + a3[27])  = *(unsigned char *)(a2 + a3[27]);
  return a1;
}

uint64_t initializeWithTake for NANPublish.Configuration(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32)  = *(unsigned char *)(a2 + 32);
  *(_OWORD *)(a1 + 40)  = *(_OWORD *)(a2 + 40);
  long long v6 = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72)  = *(unsigned char *)(a2 + 72);
  *(unsigned char *)(a1 + 73)  = *(unsigned char *)(a2 + 73);
  *(unsigned char *)(a1 + 74)  = *(unsigned char *)(a2 + 74);
  *(unsigned char *)(a1 + 75)  = *(unsigned char *)(a2 + 75);
  *(_WORD *)(a1 + 76)  = *(_WORD *)(a2 + 76);
  *(_DWORD *)(a1 + 78)  = *(_DWORD *)(a2 + 78);
  *(_WORD *)(a1 + 82)  = *(_WORD *)(a2 + 82);
  *(_DWORD *)(a1 + 84)  = *(_DWORD *)(a2 + 84);
  *(_WORD *)(a1 + 88)  = *(_WORD *)(a2 + 88);
  uint64_t v7 = a3[18];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_OWORD *)(a1 + 56)  = v6;
  uint64_t v10 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[20];
  *(unsigned char *)(a1 + a3[19])  = *(unsigned char *)(a2 + a3[19]);
  *(unsigned char *)(a1 + v11)  = *(unsigned char *)(a2 + v11);
  uint64_t v12 = a3[21];
  uint64_t v13 = a3[22];
  uint64_t v14 = a1 + v12;
  uint64_t v15 = (long long *)(a2 + v12);
  long long v16 = *v15;
  *(void *)(v14 + 16)  = *((void *)v15 + 2);
  *(_OWORD *)uint64_t v14 = v16;
  int v17 = (_OWORD *)(a1 + v13);
  long long v18 = (_OWORD *)(a2 + v13);
  long long v19 = v18[1];
  *int v17 = *v18;
  v17[1]  = v19;
  *(_OWORD *)((char *)v17 + 25)  = *(_OWORD *)((char *)v18 + 25);
  uint64_t v20 = a3[23];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
  uint64_t v24 = a3[25];
  *(unsigned char *)(a1 + a3[24])  = *(unsigned char *)(a2 + a3[24]);
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  *(_WORD *)uint64_t v25 = *(_WORD *)v26;
  *(unsigned char *)(v25 + 2)  = *(unsigned char *)(v26 + 2);
  uint64_t v27 = a3[26];
  uint64_t v28 = a3[27];
  uint64_t v29 = (_DWORD *)(a1 + v27);
  char v30 = (_DWORD *)(a2 + v27);
  *uint64_t v29 = *v30;
  *(_DWORD *)((char *)v29 + 3)  = *(_DWORD *)((char *)v30 + 3);
  *(unsigned char *)(a1 + v28)  = *(unsigned char *)(a2 + v28);
  return a1;
}

uint64_t assignWithTake for NANPublish.Configuration(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32)  = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 40)  = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48)  = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56)  = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64)  = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72)  = *(unsigned char *)(a2 + 72);
  *(unsigned char *)(a1 + 73)  = *(unsigned char *)(a2 + 73);
  *(unsigned char *)(a1 + 74)  = *(unsigned char *)(a2 + 74);
  *(unsigned char *)(a1 + 75)  = *(unsigned char *)(a2 + 75);
  *(unsigned char *)(a1 + 76)  = *(unsigned char *)(a2 + 76);
  *(void *)(a1 + 77)  = *(void *)(a2 + 77);
  *(_DWORD *)(a1 + 85)  = *(_DWORD *)(a2 + 85);
  *(unsigned char *)(a1 + 89)  = *(unsigned char *)(a2 + 89);
  uint64_t v7 = a3[18];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[20];
  *(unsigned char *)(a1 + a3[19])  = *(unsigned char *)(a2 + a3[19]);
  *(unsigned char *)(a1 + v11)  = *(unsigned char *)(a2 + v11);
  uint64_t v12 = a3[21];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(unsigned char *)uint64_t v13 = *(unsigned char *)(a2 + v12);
  *(_WORD *)(v13 + 1)  = *(_WORD *)(a2 + v12 + 1);
  *(void *)(v13 + 8)  = *(void *)(a2 + v12 + 8);
  swift_bridgeObjectRelease();
  *(void *)(v13 + 16)  = *(void *)(v14 + 16);
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[22];
  long long v16 = (_OWORD *)(a1 + v15);
  uint64_t v17 = a2 + v15;
  if (*(unsigned __int8 *)(a1 + v15 + 40) == 255) {
    goto LABEL_5;
  }
  if (*(unsigned __int8 *)(v17 + 40) == 255 || a1 != a2)
  {
    sub_1001B7D50((uint64_t)v16);
LABEL_5:
    long long v18 = *(_OWORD *)(v17 + 16);
    *long long v16 = *(_OWORD *)v17;
    v16[1]  = v18;
    *(_OWORD *)((char *)v16 + 25)  = *(_OWORD *)(v17 + 25);
  }
  uint64_t v19 = a3[23];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  uint64_t v22 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 40))(v20, v21, v22);
  uint64_t v23 = a3[25];
  *(unsigned char *)(a1 + a3[24])  = *(unsigned char *)(a2 + a3[24]);
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  *(_WORD *)uint64_t v24 = *(_WORD *)v25;
  *(unsigned char *)(v24 + 2)  = *(unsigned char *)(v25 + 2);
  uint64_t v26 = a3[26];
  uint64_t v27 = a3[27];
  uint64_t v28 = (_DWORD *)(a1 + v26);
  uint64_t v29 = (_DWORD *)(a2 + v26);
  *uint64_t v28 = *v29;
  *(_DWORD *)((char *)v28 + 3)  = *(_DWORD *)((char *)v29 + 3);
  *(unsigned char *)(a1 + v27)  = *(unsigned char *)(a2 + v27);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANPublish.Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001C1528);
}

uint64_t sub_1001C1528(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4)  = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for DispatchTimeInterval();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 72);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for OWEKeys();
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 92);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for NANPublish.Configuration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001C1668);
}

uint64_t sub_1001C1668(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16)  = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for DispatchTimeInterval();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 72);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for OWEKeys();
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 92);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t sub_1001C1794()
{
  uint64_t result = type metadata accessor for DispatchTimeInterval();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for P256.KeyAgreement.PrivateKey();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t sub_1001C18F4()
{
  unint64_t result = qword_100481F98;
  if (!qword_100481F98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481F98);
  }
  return result;
}

unint64_t sub_1001C1948()
{
  unint64_t result = qword_100481FA0;
  if (!qword_100481FA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481FA0);
  }
  return result;
}

unint64_t sub_1001C199C()
{
  unint64_t result = qword_100481FA8;
  if (!qword_100481FA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481FA8);
  }
  return result;
}

unint64_t sub_1001C19F0()
{
  unint64_t result = qword_100481FB0;
  if (!qword_100481FB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481FB0);
  }
  return result;
}

uint64_t sub_1001C1A44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010BCC((uint64_t *)&unk_100486320);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001C1AAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OWEKeys();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001C1B10(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  if (*(_DWORD *)(a2 + 32) == result) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (i  = 9; ; ++i)
  {
    uint64_t v4 = i - 7;
    if (__OFADD__(i - 8, 1)) {
      break;
    }
    BOOL v6 = *(_DWORD *)(a2 + 4 * i) == result;
    BOOL v5 = v6;
    BOOL v6 = v6 || v4 == v2;
    if (v6) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

uint64_t static Channel.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1001C6DD8(a1 & 0xFFFFFFFFFFFFLL, a2 & 0xFFFFFFFFFFFFLL);
}

CoreP2P::Channel::Band_optional __swiftcall Channel.Band.init(rawValue:)(Swift::UInt8 rawValue)
{
  if (rawValue == 128) {
    char v1 = 2;
  }
  else {
    char v1 = 3;
  }
  if (rawValue == 16) {
    v2.value  = CoreP2P_Channel_Band_fiveGHz;
  }
  else {
    v2.value  = v1;
  }
  if (rawValue == 4) {
    return 0;
  }
  else {
    return v2;
  }
}

unint64_t NANBitmap.Channel.channel.getter(unint64_t a1)
{
  if (qword_10047C208 != -1) {
    goto LABEL_89;
  }
LABEL_2:
  uint64_t v2 = *((void *)off_100481FF8 + 2);
  if (!v2) {
    return 0x300000000;
  }
  if (*((unsigned __int8 *)off_100481FF8 + 32) == a1)
  {
    uint64_t v3 = (uint64_t *)((char *)off_100481FF8 + 40);
    uint64_t v4 = (unsigned __int8 *)off_100481FF8 + 34;
    BOOL v5 = (unsigned __int8 *)off_100481FF8 + 33;
    goto LABEL_12;
  }
  if (v2 == 1) {
    return 0x300000000;
  }
  uint64_t v3 = (uint64_t *)((char *)off_100481FF8 + 56);
  for (i  = 1; ; ++i)
  {
    uint64_t v7 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
LABEL_89:
      swift_once();
      goto LABEL_2;
    }
    if (*((unsigned __int8 *)v3 - 8) == a1) {
      break;
    }
    v3 += 2;
    if (v7 == v2) {
      return 0x300000000;
    }
  }
  BOOL v5 = (unsigned __int8 *)v3 - 7;
  uint64_t v4 = (unsigned __int8 *)v3 - 6;
LABEL_12:
  unint64_t v8 = HIDWORD(a1);
  uint64_t v9 = *v3;
  unsigned int v10 = *v4;
  unsigned __int8 v11 = *v5;
  swift_bridgeObjectRetain();
  if (a1 >= 0x83u)
  {
    if ((BYTE4(a1) & (BYTE4(a1) - 1)) == 0 && (a1 & 0xFF000000) == 0x1000000)
    {
      unint64_t v8 = __clz(__rbit32(HIDWORD(a1) | 0x100));
      if (a1 == 132) {
        uint64_t v14 = v8 == 1;
      }
      else {
        uint64_t v14 = v10;
      }
      if (qword_10047C210 != -1) {
        goto LABEL_92;
      }
      goto LABEL_29;
    }
    goto LABEL_86;
  }
  if ((WORD1(a1) & ((a1 >> 16) - 1)) != 0 || WORD1(a1) == 0) {
    goto LABEL_86;
  }
  if ((BYTE4(a1) & (BYTE4(a1) - 1)) != 0) {
    goto LABEL_86;
  }
  unint64_t v13 = __clz(__rbit32((a1 >> 16) | 0x10000));
  if (*(void *)(v9 + 16) <= v13) {
    goto LABEL_86;
  }
  LODWORD(a1)  = *(_DWORD *)(v9 + 4 * v13 + 32);
  if (qword_10047C210 != -1) {
    swift_once();
  }
  uint64_t v14 = *((void *)off_100482000 + 2);
  if (!v14)
  {
LABEL_52:
    unsigned int v37 = a1;
LABEL_53:
    sub_1001C4000();
    swift_bridgeObjectRelease();
    return v37 | ((unint64_t)v11 << 32) | ((unint64_t)v10 << 40);
  }
  uint64_t v15 = 0;
  uint64_t v16 = (char *)off_100482000 + 32;
  while (1)
  {
    uint64_t v26 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (((0x801004u >> (8 * v11)) & 0xFFC) == (0x801004u >> (8 * *v16)))
    {
      switch(v16[1])
      {
        case 2:
          if (v10 == 2) {
            goto LABEL_69;
          }
          goto LABEL_55;
        case 3:
          if (v10 == 3) {
            goto LABEL_69;
          }
          goto LABEL_55;
        case 4:
          if (v10 == 4) {
            goto LABEL_69;
          }
          goto LABEL_55;
        case 5:
          if (v10 == 5) {
            goto LABEL_69;
          }
          goto LABEL_55;
        case 6:
          if (v10 != 6) {
            goto LABEL_55;
          }
          goto LABEL_69;
        default:
          if ((v10 - 2) < 5u || ((v10 ^ ((v16[1] & 1) == 0)) & 1) == 0) {
            goto LABEL_55;
          }
LABEL_69:
          uint64_t v27 = *((void *)v16 + 1);
          uint64_t v28 = *(void *)(v27 + 16);
          if (!v28) {
            goto LABEL_86;
          }
          if (*(_DWORD *)(v27 + 32) == a1)
          {
            uint64_t v29 = (void *)(v27 + 40);
LABEL_72:
            uint64_t v30 = *v29;
            unint64_t v31 = __clz(__rbit32(v8 | 0x100));
            if (*(void *)(v30 + 16) > v31)
            {
              uint64_t v24 = v30 + 4 * v31;
              goto LABEL_74;
            }
            goto LABEL_86;
          }
          if (v28 == 1) {
            goto LABEL_86;
          }
          uint64_t v29 = (void *)(v27 + 56);
          uint64_t v34 = 1;
          while (1)
          {
            uint64_t v35 = v34 + 1;
            if (__OFADD__(v34, 1)) {
              break;
            }
            if (*((_DWORD *)v29 - 2) == a1) {
              goto LABEL_72;
            }
            v29 += 2;
            ++v34;
            if (v35 == v28) {
              goto LABEL_86;
            }
          }
          break;
      }
LABEL_94:
      __break(1u);
      JUMPOUT(0x1001C20A8);
    }
LABEL_55:
    v16 += 16;
    ++v15;
    if (v26 == v14) {
      goto LABEL_52;
    }
  }
  while (1)
  {
    __break(1u);
LABEL_92:
    uint64_t v36 = v14;
    swift_once();
    uint64_t v14 = v36;
LABEL_29:
    a1  = BYTE2(a1);
    uint64_t v17 = *((void *)off_100482000 + 2);
    if (!v17)
    {
LABEL_51:
      if ((sub_1001C1B10(a1, v9) & 1) == 0) {
        goto LABEL_86;
      }
      goto LABEL_52;
    }
    uint64_t v18 = 0;
    uint64_t v19 = (char *)off_100482000 + 32;
LABEL_33:
    uint64_t v20 = v18 + 1;
    if (!__OFADD__(v18, 1)) {
      break;
    }
    __break(1u);
  }
  if (((0x801004u >> (8 * v11)) & 0xFFC) != (0x801004u >> (8 * *v19)))
  {
LABEL_32:
    v19 += 16;
    ++v18;
    if (v20 == v17) {
      goto LABEL_51;
    }
    goto LABEL_33;
  }
  switch(v19[1])
  {
    case 2:
      if (v14 == 2) {
        goto LABEL_46;
      }
      goto LABEL_32;
    case 3:
      if (v14 == 3) {
        goto LABEL_46;
      }
      goto LABEL_32;
    case 4:
      if (v14 == 4) {
        goto LABEL_46;
      }
      goto LABEL_32;
    case 5:
      if (v14 == 5) {
        goto LABEL_46;
      }
      goto LABEL_32;
    case 6:
      if (v14 != 6) {
        goto LABEL_32;
      }
      goto LABEL_46;
    default:
      if ((v14 - 2) < 5u || ((v14 ^ ((v19[1] & 1) == 0)) & 1) == 0) {
        goto LABEL_32;
      }
LABEL_46:
      uint64_t v21 = *((void *)v19 + 1);
      uint64_t v22 = *(void *)(v21 + 16);
      if (!v22) {
        goto LABEL_86;
      }
      if (*(_DWORD *)(v21 + 32) != a1)
      {
        if (v22 == 1) {
          goto LABEL_86;
        }
        uint64_t v23 = v21 + 56;
        uint64_t v32 = 1;
        while (1)
        {
          uint64_t v33 = v32 + 1;
          if (__OFADD__(v32, 1)) {
            break;
          }
          if (*(_DWORD *)(v23 - 8) == a1) {
            goto LABEL_49;
          }
          v23 += 16;
          ++v32;
          if (v33 == v22) {
            goto LABEL_86;
          }
        }
        __break(1u);
        goto LABEL_94;
      }
      uint64_t v23 = v21 + 40;
LABEL_49:
      if (*(void *)(*(void *)v23 + 16) > v8)
      {
        uint64_t v24 = *(void *)v23 + 4 * v8;
LABEL_74:
        unsigned int v37 = *(_DWORD *)(v24 + 32);
        goto LABEL_53;
      }
LABEL_86:
      swift_bridgeObjectRelease();
      return 0x300000000;
  }
}

unint64_t NANBitmap.Channel.init(channel:)(uint64_t a1)
{
  return sub_1001C74A0(a1 & 0xFFFFFFFFFFFFLL);
}

BOOL Channel.is2_4GHz.getter(uint64_t a1)
{
  return (a1 & 0x700000000) == 0;
}

uint64_t Channel.init<A>(_:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = *(void *)(*(void *)(a3 + 24) + 16);
  AssociatedTypeWitness  = swift_getAssociatedTypeWitness();
  __chkstk_darwin();
  uint64_t v30 = (char *)&v27 - v5;
  BOOL v6 = *(char **)(a2 - 8);
  __chkstk_darwin();
  unint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v33 = (char *)&v27 - v9;
  __chkstk_darwin();
  unsigned __int8 v11 = (char *)&v27 - v10;
  __chkstk_darwin();
  unint64_t v13 = (char *)&v27 - v12;
  uint64_t v14 = (void (*)(char *, uint64_t, uint64_t))*((void *)v6 + 2);
  v14((char *)&v27 - v12, (uint64_t)a1, a2);
  if (dispatch thunk of static BinaryInteger.isSigned.getter())
  {
    uint64_t v28 = v6;
    uint64_t v29 = v13;
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    BOOL v6 = v28;
    unint64_t v13 = v29;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    char v15 = dispatch thunk of static Comparable.>= infix(_:_:)();
    (*((void (**)(char *, uint64_t))v6 + 1))(v11, a2);
    if ((v15 & 1) == 0) {
      goto LABEL_16;
    }
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter() < 32)
  {
LABEL_14:
    unsigned int v23 = dispatch thunk of BinaryInteger._lowWord.getter();
    uint64_t v24 = (void (*)(char *, uint64_t))*((void *)v6 + 1);
    v24(v13, a2);
    unint64_t v25 = sub_1001C7008(v23);
    v24(a1, a2);
    return v25 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v27 = v8;
  uint64_t v28 = a1;
  v14(v33, (uint64_t)v13, a2);
  int v34 = -1;
  char v16 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v17 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v16 & 1) == 0)
  {
    if (v17 < 33)
    {
      dispatch thunk of BinaryInteger._lowWord.getter();
      uint64_t v18 = (void (*)(char *, uint64_t))*((void *)v6 + 1);
      goto LABEL_13;
    }
LABEL_10:
    sub_1001C79A0();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v22 = dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t v18 = (void (*)(char *, uint64_t))*((void *)v6 + 1);
    v18(v11, a2);
    if (v22) {
      goto LABEL_16;
    }
    goto LABEL_13;
  }
  if (v17 > 32) {
    goto LABEL_10;
  }
  uint64_t v29 = v13;
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  LODWORD(v32)  = dispatch thunk of static Comparable.> infix(_:_:)();
  uint64_t v18 = (void (*)(char *, uint64_t))*((void *)v6 + 1);
  v18(v11, a2);
  unsigned int v19 = v34;
  uint64_t v20 = v27;
  v14(v27, (uint64_t)v33, a2);
  if ((v32 & 1) == 0)
  {
    v18(v20, a2);
    unint64_t v13 = v29;
    goto LABEL_13;
  }
  unsigned int v21 = dispatch thunk of BinaryInteger._lowWord.getter();
  v18(v20, a2);
  unint64_t v13 = v29;
  if (v19 >= v21)
  {
LABEL_13:
    v18(v33, a2);
    a1  = v28;
    goto LABEL_14;
  }
LABEL_16:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

int *Channel.nanPrimary.unsafeMutableAddressor()
{
  if (qword_10047C1F0 != -1) {
    swift_once();
  }
  return &static Channel.nanPrimary;
}

unint64_t Optional<A>.init(integerLiteral:)(unsigned int a1)
{
  return sub_1001C7008(a1) & 0xFFFFFFFFFFFFLL;
}

int *Channel.awdlSocial2GHz.unsafeMutableAddressor()
{
  if (qword_10047C1D8 != -1) {
    swift_once();
  }
  return &static Channel.awdlSocial2GHz;
}

unint64_t Channel.init(_:band:bandwidth:)(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3)
{
  return a1 | ((unint64_t)a2 << 32) | ((unint64_t)a3 << 40);
}

BOOL Channel.isDFS.getter(int a1)
{
  if (qword_10047C1B8 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_100481FD8;

  return sub_1000AD3B4(a1, v2);
}

uint64_t Channel.init<A, B>(channel:operatingClass:)(uint64_t a1, char *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v92 = a2;
  uint64_t v90 = *(void *)(a6 + 8);
  uint64_t v86 = *(void *)(*(void *)(v90 + 24) + 16);
  AssociatedTypeWitness  = swift_getAssociatedTypeWitness();
  __chkstk_darwin();
  unsigned __int8 v84 = (char *)&v80 - v10;
  unint64_t v101 = *(void *)(a4 - 8);
  __chkstk_darwin();
  uint64_t v83 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v93 = (char *)&v80 - v12;
  uint64_t v99 = *(void *)(*(void *)(*(void *)(a5 + 8) + 24) + 16);
  swift_getAssociatedTypeWitness();
  __chkstk_darwin();
  unint64_t v98 = (char *)&v80 - v13;
  uint64_t v14 = *((void *)a3 - 1);
  __chkstk_darwin();
  char v16 = (void (*)(char *, uint64_t))((char *)&v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  unint64_t v102 = (char *)&v80 - v17;
  __chkstk_darwin();
  unsigned int v19 = (char *)&v80 - v18;
  __chkstk_darwin();
  unsigned int v21 = (char *)&v80 - v20;
  uint64_t v100 = v14;
  char v22 = *(void (**)(void, void, void))(v14 + 16);
  uint64_t v88 = a1;
  uint64_t v97 = v22;
  v22((char *)&v80 - v20, a1, a3);
  if (dispatch thunk of static BinaryInteger.isSigned.getter())
  {
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    char v23 = dispatch thunk of static Comparable.>= infix(_:_:)();
    (*(void (**)(char *, char *))(v100 + 8))(v19, a3);
    if ((v23 & 1) == 0) {
      goto LABEL_95;
    }
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter() < 32) {
    goto LABEL_14;
  }
  uint64_t v96 = v16;
  v97(v102, v21, a3);
  v109  = -1;
  char v24 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v25 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if (v24)
  {
    if (v25 <= 32)
    {
      swift_getAssociatedConformanceWitness();
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      LODWORD(v99)  = dispatch thunk of static Comparable.> infix(_:_:)();
      uint64_t v26 = *(void (**)(void, void))(v100 + 8);
      v26(v19, a3);
      unsigned int v27 = v109;
      uint64_t v28 = v96;
      v97(v96, v102, a3);
      if (v99)
      {
        unsigned int v29 = dispatch thunk of BinaryInteger._lowWord.getter();
        v26(v28, a3);
        if (v27 < v29)
        {
LABEL_95:
          uint64_t result = _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
      }
      else
      {
        v26(v28, a3);
      }
      goto LABEL_13;
    }
    goto LABEL_10;
  }
  if (v25 >= 33)
  {
LABEL_10:
    sub_1001C79A0();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v30 = dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t v26 = *(void (**)(void, void))(v100 + 8);
    v26(v19, a3);
    if (v30) {
      goto LABEL_95;
    }
    goto LABEL_13;
  }
  dispatch thunk of BinaryInteger._lowWord.getter();
  uint64_t v26 = *(void (**)(void, void))(v100 + 8);
LABEL_13:
  v26(v102, a3);
LABEL_14:
  uint64_t v94 = dispatch thunk of BinaryInteger._lowWord.getter();
  unint64_t v31 = *(void *)(v100 + 8);
  v100 += 8;
  ((void (*)(char *, char *))v31)(v21, a3);
  unint64_t v32 = v101;
  if (qword_10047C208 != -1) {
    goto LABEL_94;
  }
  while (1)
  {
    uint64_t v33 = off_100481FF8;
    int v34 = v92;
    uint64_t v35 = v93;
    uint64_t v95 = *((void *)off_100481FF8 + 2);
    if (!v95) {
      break;
    }
    long long v82 = (void (*)(void, void))v31;
    unint64_t v98 = (char *)off_100481FF8 + 32;
    uint64_t v36 = (void (**)(char *, uint64_t))(v32 + 8);
    unsigned __int8 v91 = (void (**)(char *, uint64_t, uint64_t))(v32 + 16);
    swift_bridgeObjectRetain();
    unint64_t v32 = 0;
    uint64_t v87 = a3;
    uint64_t v97 = (void (*)(void, void, void))v33;
    while (1)
    {
      if (v32 >= *((void *)v33 + 2)) {
        goto LABEL_92;
      }
      unsigned int v37 = &v98[16 * v32];
      unint64_t v31 = *v37;
      uint64_t v99 = v37[1];
      LODWORD(v102)  = v37[2];
      unint64_t v38 = *((void *)v37 + 1);
      swift_bridgeObjectRetain();
      if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
      {
        if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 8)
        {
          char v108 = v31;
          sub_1001C79F4();
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
          char v45 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v96 = *v36;
          v96(v35, a4);
          if ((v45 & 1) == 0) {
            goto LABEL_52;
          }
        }
        else
        {
          (*v91)(v35, (uint64_t)v34, a4);
          unsigned __int8 v42 = dispatch thunk of BinaryInteger._lowWord.getter();
          uint64_t v96 = *v36;
          v96(v35, a4);
          if (v31 != v42) {
            goto LABEL_52;
          }
        }
        goto LABEL_35;
      }
      unint64_t v101 = v38;
      char v39 = v34;
      char v40 = dispatch thunk of static BinaryInteger.isSigned.getter();
      uint64_t v41 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if (v40)
      {
        if (v41 <= 8)
        {
          swift_getAssociatedConformanceWitness();
          unint64_t v46 = v36;
          uint64_t v47 = v35;
          dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
          int v48 = v83;
          dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
          int v34 = v39;
          char v49 = dispatch thunk of static Comparable.>= infix(_:_:)();
          int v50 = *v46;
          uint64_t v51 = v47;
          uint64_t v36 = v46;
          (*v46)(v51, a4);
          (*v91)(v48, (uint64_t)v34, a4);
          uint64_t v96 = v50;
          if ((v49 & 1) == 0)
          {
            v50(v48, a4);
            uint64_t v35 = v93;
            a3  = v87;
LABEL_52:
            swift_bridgeObjectRelease();
            goto LABEL_53;
          }
          unsigned __int8 v52 = dispatch thunk of BinaryInteger._lowWord.getter();
          v50(v48, a4);
          BOOL v44 = v31 == v52;
          uint64_t v35 = v93;
          a3  = v87;
          goto LABEL_32;
        }
        char v103 = v31;
        sub_1001C79F4();
      }
      else
      {
        if (v41 < 8)
        {
          int v34 = v39;
          (*v91)(v35, (uint64_t)v39, a4);
          unsigned __int8 v43 = dispatch thunk of BinaryInteger._lowWord.getter();
          uint64_t v96 = *v36;
          v96(v35, a4);
          BOOL v44 = v31 == v43;
LABEL_32:
          unint64_t v38 = v101;
          if (!v44) {
            goto LABEL_52;
          }
          goto LABEL_35;
        }
        char v104 = v31;
        sub_1001C79F4();
      }
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      int v34 = v39;
      char v53 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v96 = *v36;
      v96(v35, a4);
      unint64_t v38 = v101;
      if ((v53 & 1) == 0) {
        goto LABEL_52;
      }
LABEL_35:
      if ((v102 - 4) > 2)
      {
        uint64_t v58 = *(void *)(v38 + 16);
        if (v58)
        {
          if (*(_DWORD *)(v38 + 32) == v94) {
            goto LABEL_88;
          }
          if (v58 != 1)
          {
            if (*(_DWORD *)(v38 + 36) == v94) {
              goto LABEL_88;
            }
            if (v58 != 2)
            {
              uint64_t v59 = 10;
              while (1)
              {
                uint64_t v60 = v59 - 7;
                if (__OFADD__(v59 - 8, 1)) {
                  goto LABEL_93;
                }
                if (*(_DWORD *)(v38 + 4 * v59) == v94) {
                  break;
                }
                ++v59;
                if (v60 == v58) {
                  goto LABEL_52;
                }
              }
LABEL_88:
              swift_bridgeObjectRelease();
              int v73 = v82;
              unsigned __int8 v72 = v34;
LABEL_85:
              unint64_t v74 = v96;
              unsigned int v105 = v94;
              unsigned __int8 v106 = v99;
              unsigned __int8 v107 = v102;
              sub_1001C4000();
              swift_bridgeObjectRelease();
              uint64_t v75 = v105;
              uint64_t v76 = v106;
              uint64_t v77 = v107;
              v74(v72, a4);
              v73(v88, a3);
              return v75 | (v76 << 32) | (v77 << 40);
            }
          }
        }
        goto LABEL_52;
      }
      if (qword_10047C210 != -1) {
        swift_once();
      }
      unsigned __int8 v89 = (char *)off_100482000;
      unint64_t v31 = *((void *)off_100482000 + 2);
      if (v31) {
        break;
      }
      swift_bridgeObjectRelease();
      a3  = v87;
LABEL_53:
      ++v32;
      uint64_t v33 = v97;
      if (v32 == v95)
      {
        unint64_t v31 = (unint64_t)v82;
        uint64x2_t v79 = v96;
        goto LABEL_87;
      }
    }
    unint64_t v101 = v38;
    char v54 = v34;
    unsigned int v55 = 0x801004u >> (8 * v99);
    a3  = v89 + 32;
    swift_bridgeObjectRetain_n();
    int v56 = (int)v102;
    unint64_t v57 = 0;
    while (1)
    {
      char v61 = v57 + 1;
      if (__OFADD__(v57, 1)) {
        break;
      }
      if ((0x801004u >> (8 * a3[16 * (void)v57])) == v55)
      {
        uint64_t v62 = &a3[16 * (void)v57];
        int v63 = v62[1];
        uint64_t v64 = *((void *)v62 + 1);
        if (v63 == 6)
        {
          if (v56 != 6) {
            goto LABEL_56;
          }
        }
        else if (v63 == 5)
        {
          if (v56 != 5) {
            goto LABEL_56;
          }
        }
        else if (v63 != 4 || v56 != 4)
        {
          goto LABEL_56;
        }
        uint64_t v66 = *(void *)(v64 + 16);
        if (v66)
        {
          int16x8_t v81 = v36;
          swift_bridgeObjectRetain_n();
          uint64_t v67 = 0;
          while (1)
          {
            uint64_t v68 = *(void *)(v64 + 32 + 16 * v67 + 8);
            uint64_t v69 = *(void *)(v68 + 16);
            if (v69)
            {
              if (*(_DWORD *)(v68 + 32) == v94) {
                goto LABEL_84;
              }
              if (v69 != 1)
              {
                if (*(_DWORD *)(v68 + 36) == v94)
                {
LABEL_84:
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease_n();
                  swift_bridgeObjectRelease();
                  a3  = v87;
                  unsigned __int8 v72 = v92;
                  int v73 = v82;
                  goto LABEL_85;
                }
                if (v69 != 2) {
                  break;
                }
              }
            }
LABEL_72:
            if (++v67 == v66)
            {
              swift_bridgeObjectRelease_n();
              char v54 = v92;
              uint64_t v36 = v81;
              int v56 = (int)v102;
              goto LABEL_56;
            }
          }
          uint64_t v70 = 10;
          while (1)
          {
            uint64_t v71 = v70 - 7;
            if (__OFADD__(v70 - 8, 1)) {
              break;
            }
            if (*(_DWORD *)(v68 + 4 * v70) == v94) {
              goto LABEL_84;
            }
            ++v70;
            if (v71 == v69) {
              goto LABEL_72;
            }
          }
          __break(1u);
          break;
        }
      }
LABEL_56:
      unint64_t v57 = v61;
      if (v61 == (char *)v31)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        a3  = v87;
        uint64_t v35 = v93;
        int v34 = v54;
        goto LABEL_53;
      }
    }
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
LABEL_94:
    swift_once();
  }
  uint64x2_t v79 = *(void (**)(char *, uint64_t))(v32 + 8);
  swift_bridgeObjectRetain();
LABEL_87:
  v79(v34, a4);
  ((void (*)(uint64_t, char *))v31)(v88, a3);
  swift_bridgeObjectRelease();
  return 0x300000000;
}

uint64_t Channel.operatingClass.getter(unint64_t a1)
{
  int v2 = BYTE5(a1);
  if (qword_10047C210 != -1) {
LABEL_69:
  }
    swift_once();
  uint64_t v3 = *((void *)off_100482000 + 2);
  int v4 = a1;
  if (v3)
  {
    uint64_t v5 = 0;
    BOOL v6 = (char *)off_100482000 + 32;
    while (1)
    {
      uint64_t v7 = v5 + 1;
      if (__OFADD__(v5, 1))
      {
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
        goto LABEL_69;
      }
      if ((0x801004u >> (8 * BYTE4(a1))) == (0x801004u >> (8 * *v6))) {
        break;
      }
LABEL_5:
      v6 += 16;
      ++v5;
      if (v7 == v3)
      {
LABEL_32:
        int v4 = a1;
        goto LABEL_33;
      }
    }
    switch(v6[1])
    {
      case 2:
        if (v2 != 2) {
          goto LABEL_5;
        }
        break;
      case 3:
        if (v2 != 3) {
          goto LABEL_5;
        }
        break;
      case 4:
        if (v2 != 4) {
          goto LABEL_5;
        }
        break;
      case 5:
        if (v2 != 5) {
          goto LABEL_5;
        }
        break;
      case 6:
        if (v2 != 6) {
          goto LABEL_5;
        }
        break;
      default:
        if ((v2 - 2) < 5 || ((a1 >> 40) & 1) == ((v6[1] & 1) == 0)) {
          goto LABEL_5;
        }
        break;
    }
    uint64_t v8 = *((void *)v6 + 1);
    uint64_t v9 = *(void *)(v8 + 16);
    int v4 = a1;
    if (v9)
    {
      uint64_t v10 = 0;
      uint64_t v11 = v8 + 32;
      while (1)
      {
        uint64_t v12 = *(void *)(v11 + 16 * v10 + 8);
        uint64_t v13 = *(void *)(v12 + 16);
        if (v13)
        {
          if (*(_DWORD *)(v12 + 32) == a1) {
            goto LABEL_64;
          }
          if (v13 != 1)
          {
            if (*(_DWORD *)(v12 + 36) == a1)
            {
LABEL_64:
              int v4 = *(_DWORD *)(v11 + 16 * v10);
              goto LABEL_33;
            }
            if (v13 != 2) {
              break;
            }
          }
        }
LABEL_21:
        if (++v10 == v9) {
          goto LABEL_32;
        }
      }
      uint64_t v14 = 10;
      while (1)
      {
        uint64_t v15 = v14 - 7;
        if (__OFADD__(v14 - 8, 1)) {
          goto LABEL_68;
        }
        if (*(_DWORD *)(v12 + 4 * v14) == a1) {
          goto LABEL_64;
        }
        ++v14;
        if (v15 == v13) {
          goto LABEL_21;
        }
      }
    }
  }
LABEL_33:
  if (qword_10047C208 != -1) {
    swift_once();
  }
  uint64_t v16 = *((void *)off_100481FF8 + 2);
  if (!v16)
  {
LABEL_70:
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._countAndFlagsBits  = 32;
    v28._object  = (void *)0xE100000000000000;
    String.append(_:)(v28);
    if (BYTE4(a1))
    {
      if (BYTE4(a1) == 1) {
        uint64_t v29 = 0x7A48472035;
      }
      else {
        uint64_t v29 = 0x7A48472036;
      }
      unint64_t v30 = 0xE500000000000000;
    }
    else
    {
      unint64_t v30 = 0xE700000000000000;
      uint64_t v29 = 0x7A484720342E32;
    }
    unint64_t v31 = v30;
    String.append(_:)(*(Swift::String *)&v29);
    swift_bridgeObjectRelease();
    v32._countAndFlagsBits  = 32;
    v32._object  = (void *)0xE100000000000000;
    String.append(_:)(v32);
    uint64_t v33 = 0x7A484D203031;
    unint64_t v34 = 0xE600000000000000;
    switch(v2)
    {
      case 2:
        break;
      case 3:
        uint64_t v33 = 0x7A484D203032;
        break;
      case 4:
        uint64_t v33 = 0x7A484D203038;
        break;
      case 5:
        uint64_t v33 = 0x7A484D20303631;
        unint64_t v34 = 0xE700000000000000;
        break;
      case 6:
        unint64_t v34 = 0xE700000000000000;
        uint64_t v33 = 0x7A484D20303233;
        break;
      default:
        uint64_t v33 = 0x7A484D202D3034;
        unint64_t v34 = 0xE700000000000000;
        break;
    }
    unint64_t v35 = v34;
    String.append(_:)(*(Swift::String *)&v33);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x1001C3B48);
  }
  uint64_t v17 = 0;
  uint64_t v18 = (char *)off_100481FF8 + 32;
  while (1)
  {
    uint64_t v19 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }
    uint64_t v20 = &v18[16 * v17];
    if ((0x801004u >> (8 * BYTE4(a1))) == (0x801004u >> (8 * v20[1]))) {
      break;
    }
LABEL_37:
    ++v17;
    if (v19 == v16) {
      goto LABEL_70;
    }
  }
  int v21 = v20[2];
  uint64_t v22 = *((void *)v20 + 1);
  switch(v21)
  {
    case 2:
      if (v2 != 2) {
        goto LABEL_37;
      }
      goto LABEL_53;
    case 3:
      if (v2 == 3) {
        goto LABEL_53;
      }
      goto LABEL_37;
    case 4:
      if (v2 == 4) {
        goto LABEL_53;
      }
      goto LABEL_37;
    case 5:
      if (v2 == 5) {
        goto LABEL_53;
      }
      goto LABEL_37;
    case 6:
      if (v2 == 6) {
        goto LABEL_53;
      }
      goto LABEL_37;
    default:
      if ((v2 - 2) < 5 || ((a1 >> 40) & 1) == ((v21 & 1) == 0)) {
        goto LABEL_37;
      }
LABEL_53:
      uint64_t v23 = *(void *)(v22 + 16);
      if (!v23) {
        goto LABEL_37;
      }
      if (*(_DWORD *)(v22 + 32) == v4) {
        return v18[16 * v17];
      }
      if (v23 == 1) {
        goto LABEL_37;
      }
      if (*(_DWORD *)(v22 + 36) == v4) {
        return v18[16 * v17];
      }
      if (v23 == 2) {
        goto LABEL_37;
      }
      uint64_t v24 = 10;
      break;
  }
  while (1)
  {
    uint64_t v25 = v24 - 7;
    if (__OFADD__(v24 - 8, 1)) {
      goto LABEL_66;
    }
    if (*(_DWORD *)(v22 + 4 * v24) == v4) {
      return v18[16 * v17];
    }
    ++v24;
    if (v25 == v23) {
      goto LABEL_37;
    }
  }
}

BOOL Channel.is6GHz.getter(uint64_t a1)
{
  return (a1 & 0xFE00000000) != 0;
}

uint64_t static Channel.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1001C6EDC(a1 & 0xFFFFFFFFFFFFLL, a2 & 0xFFFFFFFFFFFFLL);
}

int *Channel.awdlSocial5GHz.unsafeMutableAddressor()
{
  if (qword_10047C1E0 != -1) {
    swift_once();
  }
  return &static Channel.awdlSocial5GHz;
}

uint64_t Channel.Band.maximumBandwidth.getter(int a1)
{
  return (a1 + 3);
}

BOOL static Channel.Band.< infix(_:_:)(char a1, char a2)
{
  return ((0x801004u >> (8 * a1)) & 0xFFC) < ((0x801004u >> (8 * a2)) & 0xFFC);
}

uint64_t Channel.Band.rawValue.getter(char a1)
{
  return 0x801004u >> (8 * a1);
}

uint64_t Channel.Band.description.getter(char a1)
{
  if (!a1) {
    return 0x7A484720342E32;
  }
  if (a1 == 1) {
    return 0x7A48472035;
  }
  return 0x7A48472036;
}

_UNKNOWN **static Channel.Band.allCases.getter()
{
  return &off_1004505B8;
}

BOOL sub_1001C3C8C(unsigned char *a1, unsigned char *a2)
{
  return ((0x801004u >> (8 * *a1)) & 0xFFC) == ((0x801004u >> (8 * *a2)) & 0xFFC);
}

unsigned __int8 *sub_1001C3CC0@<X0>(unsigned __int8 *result@<X0>, char *a2@<X8>)
{
  int v2 = *result;
  if (v2 == 4) {
    char v3 = 0;
  }
  else {
    char v3 = 3;
  }
  if (v2 == 16) {
    char v4 = 1;
  }
  else {
    char v4 = v3;
  }
  if (v2 == 128) {
    char v5 = 2;
  }
  else {
    char v5 = v4;
  }
  *a2  = v5;
  return result;
}

void sub_1001C3CF0(unsigned char *a1@<X8>)
{
  *a1  = 0x801004u >> (8 * *v1);
}

Swift::Int sub_1001C3D0C()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0x801004u >> (8 * v1));
  return Hasher._finalize()();
}

void sub_1001C3D60()
{
  Hasher._combine(_:)(0x801004u >> (8 * *v0));
}

Swift::Int sub_1001C3D9C()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0x801004u >> (8 * v1));
  return Hasher._finalize()();
}

void sub_1001C3DEC(void *a1@<X8>)
{
  *a1  = &off_1004505E0;
}

uint64_t sub_1001C3DFC()
{
  int v1 = *v0;
  uint64_t v2 = 0x7A48472035;
  if (v1 != 1) {
    uint64_t v2 = 0x7A48472036;
  }
  if (*v0) {
    return v2;
  }
  else {
    return 0x7A484720342E32;
  }
}

uint64_t sub_1001C3E44()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001C3EA4()
{
  return RawRepresentable<>.encode(to:)();
}

BOOL sub_1001C3EF4(unsigned char *a1, unsigned char *a2)
{
  return ((0x801004u >> (8 * *a1)) & 0xFFC) < ((0x801004u >> (8 * *a2)) & 0xFFC);
}

BOOL sub_1001C3F28(unsigned char *a1, unsigned char *a2)
{
  return ((0x801004u >> (8 * *a2)) & 0xFFC) >= ((0x801004u >> (8 * *a1)) & 0xFFC);
}

BOOL sub_1001C3F5C(unsigned char *a1, unsigned char *a2)
{
  return ((0x801004u >> (8 * *a1)) & 0xFFC) >= ((0x801004u >> (8 * *a2)) & 0xFFC);
}

BOOL sub_1001C3F90(unsigned char *a1, unsigned char *a2)
{
  return ((0x801004u >> (8 * *a2)) & 0xFFC) < ((0x801004u >> (8 * *a1)) & 0xFFC);
}

BOOL Optional<A>.is5GHz.getter(uint64_t a1)
{
  return (a1 & 0xFF00000000) == (void)&_mh_execute_header;
}

uint64_t sub_1001C3FD8()
{
  uint64_t result = sub_100017394((uint64_t)&off_1004500D0);
  qword_100481FD8  = result;
  return result;
}

void sub_1001C4000()
{
  int v1 = *((unsigned __int8 *)v0 + 5);
  int v2 = v1 - 2;
  if ((v1 - 2) < 5) {
    return;
  }
  unsigned __int8 v3 = (v1 & 1) == 0;
  int v4 = *((unsigned __int8 *)v0 + 4);
  if (v4 == 2)
  {
    if (qword_10047C210 != -1) {
      goto LABEL_78;
    }
    goto LABEL_4;
  }
  if (qword_10047C208 != -1)
  {
    swift_once();
    int v2 = v1 - 2;
  }
  uint64_t v8 = *((void *)off_100481FF8 + 2);
  if (!v8)
  {
LABEL_79:
    int v41 = v2;
    _StringGuts.grow(_:)(58);
    v42._object  = (void *)0x80000001003DE560;
    v42._countAndFlagsBits  = 0xD00000000000002CLL;
    String.append(_:)(v42);
    v43._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v43);
    swift_bridgeObjectRelease();
    v44._countAndFlagsBits  = 32;
    v44._object  = (void *)0xE100000000000000;
    String.append(_:)(v44);
    if (v4) {
      uint64_t v45 = 0x7A48472035;
    }
    else {
      uint64_t v45 = 0x7A484720342E32;
    }
    if (v4) {
      unint64_t v46 = 0xE500000000000000;
    }
    else {
      unint64_t v46 = 0xE700000000000000;
    }
    unint64_t v47 = v46;
    String.append(_:)(*(Swift::String *)&v45);
    swift_bridgeObjectRelease();
    v48._countAndFlagsBits  = 32;
    v48._object  = (void *)0xE100000000000000;
    String.append(_:)(v48);
    uint64_t v49 = 0x7A484D203031;
    unint64_t v50 = 0xE600000000000000;
    switch(v41)
    {
      case 0:
        break;
      case 1:
        uint64_t v49 = 0x7A484D203032;
        break;
      case 2:
        uint64_t v49 = 0x7A484D203038;
        break;
      case 3:
        uint64_t v49 = 0x7A484D20303631;
        unint64_t v50 = 0xE700000000000000;
        break;
      case 4:
        unint64_t v50 = 0xE700000000000000;
        uint64_t v49 = 0x7A484D20303233;
        break;
      default:
        if (v1) {
          uint64_t v49 = 0x7A484D202B3034;
        }
        else {
          uint64_t v49 = 0x7A484D202D3034;
        }
        unint64_t v50 = 0xE700000000000000;
        break;
    }
    unint64_t v51 = v50;
    String.append(_:)(*(Swift::String *)&v49);
    swift_bridgeObjectRelease();
    v52._countAndFlagsBits  = 544370464;
    v52._object  = (void *)0xE400000000000000;
    String.append(_:)(v52);
    if (v1) {
      uint64_t v53 = 0x7A484D202D3034;
    }
    else {
      uint64_t v53 = 0x7A484D202B3034;
    }
    unint64_t v54 = 0xE700000000000000;
    String.append(_:)(*(Swift::String *)&v53);
    swift_bridgeObjectRelease();
    goto LABEL_98;
  }
  uint64_t v9 = 0;
  if (v4) {
    int v10 = 16;
  }
  else {
    int v10 = 4;
  }
  uint64_t v11 = (char *)off_100481FF8 + 32;
  do
  {
    uint64_t v12 = &v11[16 * v9];
    int v13 = v12[2];
    uint64_t v14 = *((void *)v12 + 1);
    int v15 = v12[1];
    if (v15)
    {
      if (v15 != 1 || v10 != 16) {
        goto LABEL_13;
      }
    }
    else if (v10 != 4)
    {
      goto LABEL_13;
    }
    if ((v13 - 2) >= 5 && (v1 & 1) != ((v13 & 1) == 0))
    {
      uint64_t v16 = *(void *)(v14 + 16);
      if (v16)
      {
        int v17 = *v0;
        if (*(_DWORD *)(v14 + 32) == *v0) {
          return;
        }
        if (v16 != 1)
        {
          if (*(_DWORD *)(v14 + 36) == v17) {
            return;
          }
          if (v16 != 2)
          {
            uint64_t v18 = 10;
            do
            {
              uint64_t v19 = v18 - 7;
              if (__OFADD__(v18 - 8, 1)) {
                goto LABEL_77;
              }
              if (*(_DWORD *)(v14 + 4 * v18) == v17) {
                return;
              }
              ++v18;
            }
            while (v19 != v16);
          }
        }
      }
    }
LABEL_13:
    ++v9;
  }
  while (v9 != v8);
  uint64_t v20 = 0;
  while (1)
  {
    int v21 = &v11[16 * v20];
    int v22 = v21[2];
    uint64_t v23 = *((void *)v21 + 1);
    int v24 = v21[1];
    if (v24) {
      break;
    }
    if (v10 == 4) {
      goto LABEL_38;
    }
LABEL_32:
    if (++v20 == v8) {
      goto LABEL_79;
    }
  }
  if (v24 != 1 || v10 != 16) {
    goto LABEL_32;
  }
LABEL_38:
  BOOL v32 = (v22 - 2) >= 5;
  int v25 = v22 & 1;
  if (!v32 || (v1 & 1) == v25) {
    goto LABEL_32;
  }
  uint64_t v27 = *(void *)(v23 + 16);
  if (!v27) {
    goto LABEL_32;
  }
  int v28 = *v0;
  if (*(_DWORD *)(v23 + 32) == *v0) {
    goto LABEL_73;
  }
  if (v27 == 1) {
    goto LABEL_32;
  }
  if (*(_DWORD *)(v23 + 36) == v28) {
    goto LABEL_73;
  }
  if (v27 == 2) {
    goto LABEL_32;
  }
  uint64_t v29 = 10;
  while (1)
  {
    uint64_t v30 = v29 - 7;
    if (__OFADD__(v29 - 8, 1)) {
      break;
    }
    if (*(_DWORD *)(v23 + 4 * v29) == v28) {
      goto LABEL_73;
    }
    ++v29;
    if (v30 == v27) {
      goto LABEL_32;
    }
  }
  while (2)
  {
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    swift_once();
LABEL_4:
    uint64_t v5 = *((void *)off_100482000 + 2);
    if (!v5) {
      goto LABEL_100;
    }
    BOOL v6 = (char *)off_100482000 + 32;
    swift_bridgeObjectRetain_n();
    uint64_t v7 = 0;
    while (1)
    {
      unint64_t v31 = &v6[16 * v7];
      unsigned __int8 v3 = v31[1];
      BOOL v32 = *v31 >= 2u && (v3 - 2) >= 5u;
      if (v32)
      {
        uint64_t v33 = *((void *)v31 + 1);
        uint64_t v34 = *(void *)(v33 + 16);
        if (v34) {
          break;
        }
      }
LABEL_53:
      if (++v7 == v5)
      {
        while (1)
        {
          swift_bridgeObjectRelease_n();
LABEL_100:
          _StringGuts.grow(_:)(58);
          v55._object  = (void *)0x80000001003DE560;
          v55._countAndFlagsBits  = 0xD00000000000002CLL;
          String.append(_:)(v55);
          v56._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v56);
          swift_bridgeObjectRelease();
          v57._countAndFlagsBits  = 32;
          v57._object  = (void *)0xE100000000000000;
          String.append(_:)(v57);
          v58._countAndFlagsBits  = 0x7A48472036;
          v58._object  = (void *)0xE500000000000000;
          String.append(_:)(v58);
          v59._countAndFlagsBits  = 32;
          v59._object  = (void *)0xE100000000000000;
          String.append(_:)(v59);
          if (v1) {
            uint64_t v60 = 0x7A484D202B3034;
          }
          else {
            uint64_t v60 = 0x7A484D202D3034;
          }
          if (v1) {
            uint64_t v61 = 0x7A484D202D3034;
          }
          else {
            uint64_t v61 = 0x7A484D202B3034;
          }
          unint64_t v62 = 0xE700000000000000;
          String.append(_:)(*(Swift::String *)&v60);
          swift_bridgeObjectRelease();
          v63._countAndFlagsBits  = 544370464;
          v63._object  = (void *)0xE400000000000000;
          String.append(_:)(v63);
          v64._countAndFlagsBits  = v61;
          v64._object  = (void *)0xE700000000000000;
          String.append(_:)(v64);
          swift_bridgeObjectRelease();
LABEL_98:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
      }
    }
    int v35 = *v0;
    swift_bridgeObjectRetain_n();
    uint64_t v36 = 0;
    while (2)
    {
      uint64_t v37 = *(void *)(v33 + 32 + 16 * v36 + 8);
      uint64_t v38 = *(void *)(v37 + 16);
      if (!v38) {
        goto LABEL_61;
      }
      if (*(_DWORD *)(v37 + 32) == v35) {
        goto LABEL_72;
      }
      if (v38 == 1)
      {
LABEL_61:
        if (++v36 == v34)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_53;
        }
        continue;
      }
      break;
    }
    if (*(_DWORD *)(v37 + 36) != v35)
    {
      if (v38 != 2)
      {
        uint64_t v39 = 10;
        while (1)
        {
          uint64_t v40 = v39 - 7;
          if (__OFADD__(v39 - 8, 1)) {
            break;
          }
          if (*(_DWORD *)(v37 + 4 * v39) == v35) {
            goto LABEL_72;
          }
          ++v39;
          if (v40 == v38) {
            goto LABEL_61;
          }
        }
        __break(1u);
        continue;
      }
      goto LABEL_61;
    }
    break;
  }
LABEL_72:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
LABEL_73:
  *((unsigned char *)v0 + 5)  = v3;
}

unint64_t Channel.init(_:maximumBandwidthOnBand:)(unsigned int a1, unsigned __int8 a2)
{
  unsigned __int8 v5 = a2 + 3;
  sub_1001C4000();
  return a1 | ((unint64_t)a2 << 32) | ((unint64_t)v5 << 40);
}

void *sub_1001C4730()
{
  uint64_t result = (void *)sub_100017394((uint64_t)&off_10044C408);
  off_100481FE0  = result;
  return result;
}

void *sub_1001C4758()
{
  uint64_t result = (void *)sub_100017394((uint64_t)&off_10044C460);
  off_100481FE8  = result;
  return result;
}

void *sub_1001C4780()
{
  uint64_t result = (void *)sub_100017394((uint64_t)&off_10044C4F0);
  off_100481FF0  = result;
  return result;
}

unint64_t sub_1001C47A8(uint64_t a1)
{
  return sub_1001C4964(a1, &static Channel.awdlSocial2GHz, &byte_10048864C, &byte_10048864D);
}

unint64_t static Channel.awdlSocial2GHz.getter()
{
  if (qword_10047C1D8 != -1) {
    swift_once();
  }
  return static Channel.awdlSocial2GHz | ((unint64_t)byte_10048864C << 32) | ((unint64_t)byte_10048864D << 40);
}

unint64_t sub_1001C481C(uint64_t a1)
{
  return sub_1001C4A38(a1, &static Channel.awdlSocial5GHz, &byte_100488654, &byte_100488655);
}

unint64_t static Channel.awdlSocial5GHz.getter()
{
  if (qword_10047C1E0 != -1) {
    swift_once();
  }
  return static Channel.awdlSocial5GHz | ((unint64_t)byte_100488654 << 32) | ((unint64_t)byte_100488655 << 40);
}

unint64_t sub_1001C4890(uint64_t a1)
{
  return sub_1001C4B58(a1, &static Channel.awdlAlternateSocial5GHz, &byte_10048865C, &byte_10048865D);
}

int *Channel.awdlAlternateSocial5GHz.unsafeMutableAddressor()
{
  if (qword_10047C1E8 != -1) {
    swift_once();
  }
  return &static Channel.awdlAlternateSocial5GHz;
}

unint64_t static Channel.awdlAlternateSocial5GHz.getter()
{
  if (qword_10047C1E8 != -1) {
    swift_once();
  }
  return static Channel.awdlAlternateSocial5GHz | ((unint64_t)byte_10048865C << 32) | ((unint64_t)byte_10048865D << 40);
}

unint64_t sub_1001C4950(uint64_t a1)
{
  return sub_1001C4964(a1, &static Channel.nanPrimary, &byte_100488664, &byte_100488665);
}

unint64_t sub_1001C4964(uint64_t a1, _DWORD *a2, unsigned char *a3, unsigned char *a4)
{
  unint64_t result = sub_1001C7008(6u);
  if ((result & 0xFF00000000) == 0x300000000)
  {
    __break(1u);
  }
  else
  {
    *a2  = result;
    *a3  = BYTE4(result);
    *a4  = BYTE5(result);
  }
  return result;
}

unint64_t static Channel.nanPrimary.getter()
{
  if (qword_10047C1F0 != -1) {
    swift_once();
  }
  return static Channel.nanPrimary | ((unint64_t)byte_100488664 << 32) | ((unint64_t)byte_100488665 << 40);
}

unint64_t sub_1001C4A24(uint64_t a1)
{
  return sub_1001C4A38(a1, &static Channel.nanSecondary, &byte_10048866C, &byte_10048866D);
}

unint64_t sub_1001C4A38(uint64_t a1, _DWORD *a2, unsigned char *a3, unsigned char *a4)
{
  unint64_t result = sub_1001C7008(0x95u);
  if ((result & 0xFF00000000) == 0x300000000)
  {
    __break(1u);
  }
  else
  {
    *a2  = result;
    *a3  = BYTE4(result);
    *a4  = BYTE5(result);
  }
  return result;
}

int *Channel.nanSecondary.unsafeMutableAddressor()
{
  if (qword_10047C1F8 != -1) {
    swift_once();
  }
  return &static Channel.nanSecondary;
}

unint64_t static Channel.nanSecondary.getter()
{
  if (qword_10047C1F8 != -1) {
    swift_once();
  }
  return static Channel.nanSecondary | ((unint64_t)byte_10048866C << 32) | ((unint64_t)byte_10048866D << 40);
}

unint64_t sub_1001C4B44(uint64_t a1)
{
  return sub_1001C4B58(a1, &static Channel.nanAlternateSecondary, &byte_100488674, &byte_100488675);
}

unint64_t sub_1001C4B58(uint64_t a1, _DWORD *a2, unsigned char *a3, unsigned char *a4)
{
  unint64_t result = sub_1001C7008(0x2Cu);
  if ((result & 0xFF00000000) == 0x300000000)
  {
    __break(1u);
  }
  else
  {
    *a2  = result;
    *a3  = BYTE4(result);
    *a4  = BYTE5(result);
  }
  return result;
}

int *Channel.nanAlternateSecondary.unsafeMutableAddressor()
{
  if (qword_10047C200 != -1) {
    swift_once();
  }
  return &static Channel.nanAlternateSecondary;
}

unint64_t static Channel.nanAlternateSecondary.getter()
{
  if (qword_10047C200 != -1) {
    swift_once();
  }
  return static Channel.nanAlternateSecondary | ((unint64_t)byte_100488674 << 32) | ((unint64_t)byte_100488675 << 40);
}

uint64_t Channel.description.getter(uint64_t a1)
{
  unsigned __int8 v1 = BYTE5(a1);
  uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
  int v2 = v1 - 2;
  unint64_t v3 = 0xE200000000000000;
  uint64_t v4 = 11051;
  switch(v2)
  {
    case 0:
    case 1:
      uint64_t v4 = 0;
      unint64_t v3 = 0xE000000000000000;
      break;
    case 2:
      break;
    case 3:
      uint64_t v4 = 30840;
      break;
    case 4:
      uint64_t v4 = 31097;
      break;
    default:
      uint64_t v4 = 45;
      unint64_t v3 = 0xE100000000000000;
      break;
  }
  unint64_t v5 = v3;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  return v7;
}

void Channel.hash(into:)(int a1, unint64_t a2)
{
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(0x801004u >> ((a2 >> 29) & 0xF8));
  switch(BYTE5(a2))
  {
    case 2:
      Swift::UInt v3 = 0;
      goto LABEL_8;
    case 3:
      Swift::UInt v3 = 1;
      goto LABEL_8;
    case 4:
      Swift::UInt v3 = 3;
      goto LABEL_8;
    case 5:
      Swift::UInt v3 = 4;
      goto LABEL_8;
    case 6:
      Swift::UInt v3 = 5;
LABEL_8:
      Hasher._combine(_:)(v3);
      break;
    default:
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(BYTE5(a2) & 1);
      break;
  }
}

uint64_t sub_1001C4E04()
{
  uint64_t v1 = 1684955490;
  if (*v0 != 1) {
    uint64_t v1 = 0x74646977646E6162;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6C656E6E616863;
  }
}

uint64_t sub_1001C4E5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001C7E90(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001C4E84(uint64_t a1)
{
  unint64_t v2 = sub_1001C7A48();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001C4EC0(uint64_t a1)
{
  unint64_t v2 = sub_1001C7A48();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Channel.encode(to:)(void *a1, uint64_t a2)
{
  __int16 v3 = WORD2(a2);
  uint64_t v5 = sub_100010BCC(&qword_100482018);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_1001C7A48();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[15]  = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v10[14]  = v3;
    v10[13]  = 1;
    sub_1001C7A9C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    void v10[12] = HIBYTE(v3);
    v10[11]  = 2;
    sub_1001C7AF0();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int Channel.hashValue.getter(unint64_t a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(0x801004u >> ((a1 >> 29) & 0xF8));
  switch(BYTE5(a1))
  {
    case 2:
      Swift::UInt v2 = 0;
      goto LABEL_8;
    case 3:
      Swift::UInt v2 = 1;
      goto LABEL_8;
    case 4:
      Swift::UInt v2 = 3;
      goto LABEL_8;
    case 5:
      Swift::UInt v2 = 4;
      goto LABEL_8;
    case 6:
      Swift::UInt v2 = 5;
LABEL_8:
      Hasher._combine(_:)(v2);
      break;
    default:
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(BYTE5(a1) & 1);
      break;
  }
  return Hasher._finalize()();
}

uint64_t Channel.init(from:)(void *a1)
{
  return sub_1001C72A4(a1) & 0xFFFFFFFFFFFFLL;
}

Swift::Int sub_1001C51D0()
{
  return Channel.hashValue.getter(*v0 | ((unint64_t)*((unsigned __int8 *)v0 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v0 + 5) << 40));
}

void sub_1001C51E8(int a1)
{
  Channel.hash(into:)(a1, *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v1 + 5) << 40));
}

Swift::Int sub_1001C5200()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  char v2 = *(unsigned char *)(v0 + 4);
  int v3 = *(unsigned __int8 *)(v0 + 5);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(0x801004u >> (8 * v2));
  switch(v3)
  {
    case 2:
      Swift::UInt v4 = 0;
      goto LABEL_8;
    case 3:
      Swift::UInt v4 = 1;
      goto LABEL_8;
    case 4:
      Swift::UInt v4 = 3;
      goto LABEL_8;
    case 5:
      Swift::UInt v4 = 4;
      goto LABEL_8;
    case 6:
      Swift::UInt v4 = 5;
LABEL_8:
      Hasher._combine(_:)(v4);
      break;
    default:
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(v3 & 1);
      break;
  }
  return Hasher._finalize()();
}

uint64_t sub_1001C5308()
{
  return Channel.description.getter(*v0 | ((unint64_t)*((unsigned __int8 *)v0 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v0 + 5) << 40));
}

uint64_t sub_1001C5320@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1001C72A4(a1);
  if (!v2)
  {
    *(_DWORD *)a2  = result;
    *(unsigned char *)(a2 + 4)  = BYTE4(result);
    *(unsigned char *)(a2 + 5)  = BYTE5(result);
  }
  return result;
}

uint64_t sub_1001C535C(void *a1)
{
  return Channel.encode(to:)(a1, *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v1 + 5) << 40));
}

uint64_t sub_1001C5388(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_1001C5474(a1, a2, a3, a4, sub_1001C6EDC);
}

BOOL sub_1001C53A0(unsigned int *a1, unsigned int *a2)
{
  return (sub_1001C6EDC(*a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 40), *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 5) << 40)) & 1) == 0;
}

BOOL sub_1001C53E8(unsigned int *a1, unsigned int *a2)
{
  return (sub_1001C6EDC(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 5) << 40), *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 40)) & 1) == 0;
}

uint64_t sub_1001C5430(unsigned int *a1, unsigned int *a2)
{
  return sub_1001C6EDC(*a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 40), *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 5) << 40));
}

uint64_t sub_1001C545C(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_1001C5474(a1, a2, a3, a4, sub_1001C6DD8);
}

uint64_t sub_1001C5474(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(unint64_t, unint64_t))
{
  return a5(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 5) << 40), *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 40));
}

uint64_t Optional<A>.description.getter(uint64_t a1)
{
  if ((a1 & 0xFF00000000) == 0x300000000) {
    return 48;
  }
  else {
    return Channel.description.getter(a1 & 0xFFFFFFFFFFFFLL);
  }
}

BOOL Optional<A>.is2_4GHz.getter(uint64_t a1)
{
  return (a1 & 0x700000000) == 0 && (a1 & 0xFF00000000) != 0x300000000;
}

BOOL Optional<A>.is6GHz.getter(uint64_t a1)
{
  return (a1 & 0xFE00000000) != 0 && (a1 & 0xFF00000000) != 0x300000000;
}

BOOL Optional<A>.isDFS.getter(uint64_t a1)
{
  if ((a1 & 0xFF00000000) == 0x300000000) {
    return 0;
  }
  int v3 = a1;
  if (qword_10047C1B8 != -1) {
    swift_once();
  }
  uint64_t v4 = qword_100481FD8;
  return sub_1000AD3B4(v3, v4);
}

id Optional<A>.apiChannel.getter(uint64_t a1)
{
  if ((a1 & 0xFF00000000) == 0x300000000)
  {
    LOBYTE(v4)  = 0;
    return [objc_allocWithZone((Class)WiFiChannel) initWithChannelNumber:0 bandwidth:1 is2_4GHz:0 is5GHz:0 is6GHz:0 isDFS:0 extensionChannelAbove:0];
  }
  else
  {
    unint64_t v3 = a1 & 0xFFFFFFFFFFFFLL;
    return Channel.apiChannel.getter(v3);
  }
}

id Channel.apiChannel.getter(unint64_t a1)
{
  unint64_t v2 = a1 >> 40;
  if ((BYTE5(a1) - 2) > 4u) {
    uint64_t v3 = 2;
  }
  else {
    uint64_t v3 = qword_1003C6CD0[(char)(BYTE5(a1) - 2)];
  }
  if (qword_10047C1B8 != -1) {
    swift_once();
  }
  LOBYTE(v5)  = v2 & ((v2 - 7) < 0xFBu);
  return [objc_allocWithZone((Class)WiFiChannel) initWithChannelNumber:a1 bandwidth:v3 is2_4GHz:(a1 & 0x700000000) == 0 is5GHz:(HIDWORD(a1) & 1) is6GHz:(a1 & 0x700000000) == 0x200000000 isDFS:sub_1000AD3B4(a1, qword_100481FD8) extensionChannelAbove:v5];
}

unint64_t sub_1001C5718@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_1001C7008(*a1);
  *(_DWORD *)a2  = result;
  *(_WORD *)(a2 + 4)  = WORD2(result);
  return result;
}

uint64_t sub_1001C574C()
{
  unint64_t v1 = *v0 | ((unint64_t)*((unsigned __int16 *)v0 + 2) << 32);
  if ((v1 & 0xFF00000000) == 0x300000000) {
    return 48;
  }
  else {
    return Channel.description.getter(v1);
  }
}

unint64_t Channel.init(apiChannel:)(void *a1)
{
  unsigned int v2 = [a1 channelNumber];
  int v3 = 2;
  switch((unint64_t)[a1 bandwidth])
  {
    case 0uLL:
      goto LABEL_7;
    case 1uLL:
      int v3 = 3;
      goto LABEL_7;
    case 2uLL:
      int v3 = [a1 extensionChannelAbove];
      goto LABEL_7;
    case 3uLL:
      int v3 = 4;
      goto LABEL_7;
    case 4uLL:
      int v3 = 5;
      goto LABEL_7;
    case 5uLL:
      int v3 = 6;
LABEL_7:
      if (!objc_msgSend(a1, "is2_4GHz")
        || ([a1 is5GHz] & 1) != 0
        || [a1 is6GHz])
      {
        if ((objc_msgSend(a1, "is2_4GHz") & 1) != 0
          || ![a1 is5GHz]
          || [a1 is6GHz])
        {
          if ((objc_msgSend(a1, "is2_4GHz") & 1) != 0
            || ([a1 is5GHz] & 1) != 0
            || ([a1 is6GHz] & 1) == 0)
          {
            goto LABEL_21;
          }
          unsigned __int8 v4 = 2;
        }
        else
        {
          unsigned __int8 v4 = 1;
        }
      }
      else
      {
        unsigned __int8 v4 = 0;
      }
      if (_s7CoreP2P7ChannelV7isValid7channel2on4withSbs6UInt32V_AC4BandOAA9BandwidthOtFZ_0(v2, v4, v3))
      {
        sub_1001C4000();

        return v2 | ((unint64_t)v4 << 32) | ((unint64_t)v3 << 40);
      }
LABEL_21:

      return 0x300000000;
    default:
      goto LABEL_21;
  }
}

void *sub_1001C5968()
{
  unint64_t result = sub_1001C5988();
  off_100481FF8  = result;
  return result;
}

void *sub_1001C5988()
{
  uint64_t v0 = sub_1000C557C(0, 1, 1, _swiftEmptyArrayStorage);
  unint64_t v2 = v0[2];
  unint64_t v1 = v0[3];
  unint64_t v3 = v1 >> 1;
  unint64_t v4 = v2 + 1;
  if (v1 >> 1 <= v2)
  {
    uint64_t v0 = sub_1000C557C((void *)(v1 > 1), v2 + 1, 1, v0);
    unint64_t v1 = v0[3];
    unint64_t v3 = v1 >> 1;
  }
  v0[2]  = v4;
  uint64_t v5 = &v0[2 * v2];
  *((_WORD *)v5 + 16)  = 81;
  *((unsigned char *)v5 + 34)  = 3;
  v5[5]  = &off_10044D580;
  int64_t v6 = v2 + 2;
  if (v3 <= v4) {
    uint64_t v0 = sub_1000C557C((void *)(v1 > 1), v6, 1, v0);
  }
  v0[2]  = v6;
  uint64_t v7 = &v0[2 * v4];
  *((_WORD *)v7 + 16)  = 82;
  *((unsigned char *)v7 + 34)  = 3;
  v7[5]  = &off_10044D5D8;
  unint64_t v9 = v0[2];
  unint64_t v8 = v0[3];
  unint64_t v10 = v8 >> 1;
  unint64_t v11 = v9 + 1;
  if (v8 >> 1 <= v9)
  {
    uint64_t v0 = sub_1000C557C((void *)(v8 > 1), v9 + 1, 1, v0);
    unint64_t v8 = v0[3];
    unint64_t v10 = v8 >> 1;
  }
  v0[2]  = v11;
  uint64_t v12 = &v0[2 * v9];
  *((_WORD *)v12 + 16)  = 83;
  *((unsigned char *)v12 + 34)  = 0;
  v12[5]  = &off_10044D600;
  int64_t v13 = v9 + 2;
  if (v10 <= v11) {
    uint64_t v0 = sub_1000C557C((void *)(v8 > 1), v13, 1, v0);
  }
  v0[2]  = v13;
  uint64_t v14 = &v0[2 * v11];
  *((_WORD *)v14 + 16)  = 84;
  *((unsigned char *)v14 + 34)  = 1;
  v14[5]  = &off_10044D648;
  unint64_t v16 = v0[2];
  unint64_t v15 = v0[3];
  unint64_t v17 = v15 >> 1;
  unint64_t v18 = v16 + 1;
  if (v15 >> 1 <= v16)
  {
    uint64_t v0 = sub_1000C557C((void *)(v15 > 1), v16 + 1, 1, v0);
    unint64_t v15 = v0[3];
    unint64_t v17 = v15 >> 1;
  }
  v0[2]  = v18;
  uint64_t v19 = &v0[2 * v16];
  *((_WORD *)v19 + 16)  = 371;
  *((unsigned char *)v19 + 34)  = 3;
  v19[5]  = &off_10044D690;
  int64_t v20 = v16 + 2;
  if (v17 <= v18) {
    uint64_t v0 = sub_1000C557C((void *)(v15 > 1), v20, 1, v0);
  }
  v0[2]  = v20;
  int v21 = &v0[2 * v18];
  *((_WORD *)v21 + 16)  = 372;
  *((unsigned char *)v21 + 34)  = 0;
  v21[5]  = &off_10044D6C0;
  unint64_t v23 = v0[2];
  unint64_t v22 = v0[3];
  unint64_t v24 = v22 >> 1;
  unint64_t v25 = v23 + 1;
  if (v22 >> 1 <= v23)
  {
    uint64_t v0 = sub_1000C557C((void *)(v22 > 1), v23 + 1, 1, v0);
    unint64_t v22 = v0[3];
    unint64_t v24 = v22 >> 1;
  }
  v0[2]  = v25;
  uint64_t v26 = &v0[2 * v23];
  *((_WORD *)v26 + 16)  = 373;
  *((unsigned char *)v26 + 34)  = 1;
  v26[5]  = &off_10044D6E8;
  int64_t v27 = v23 + 2;
  if (v24 <= v25) {
    uint64_t v0 = sub_1000C557C((void *)(v22 > 1), v27, 1, v0);
  }
  v0[2]  = v27;
  int v28 = &v0[2 * v25];
  *((_WORD *)v28 + 16)  = 374;
  *((unsigned char *)v28 + 34)  = 3;
  v28[5]  = &off_10044D710;
  unint64_t v30 = v0[2];
  unint64_t v29 = v0[3];
  unint64_t v31 = v29 >> 1;
  unint64_t v32 = v30 + 1;
  if (v29 >> 1 <= v30)
  {
    uint64_t v0 = sub_1000C557C((void *)(v29 > 1), v30 + 1, 1, v0);
    unint64_t v29 = v0[3];
    unint64_t v31 = v29 >> 1;
  }
  v0[2]  = v32;
  uint64_t v33 = &v0[2 * v30];
  *((_WORD *)v33 + 16)  = 375;
  *((unsigned char *)v33 + 34)  = 0;
  v33[5]  = &off_10044D740;
  int64_t v34 = v30 + 2;
  if (v31 <= v32) {
    uint64_t v0 = sub_1000C557C((void *)(v29 > 1), v34, 1, v0);
  }
  v0[2]  = v34;
  int v35 = &v0[2 * v32];
  *((_WORD *)v35 + 16)  = 376;
  *((unsigned char *)v35 + 34)  = 1;
  v35[5]  = &off_10044D768;
  unint64_t v37 = v0[2];
  unint64_t v36 = v0[3];
  unint64_t v38 = v36 >> 1;
  unint64_t v39 = v37 + 1;
  if (v36 >> 1 <= v37)
  {
    uint64_t v0 = sub_1000C557C((void *)(v36 > 1), v37 + 1, 1, v0);
    unint64_t v36 = v0[3];
    unint64_t v38 = v36 >> 1;
  }
  v0[2]  = v39;
  uint64_t v40 = &v0[2 * v37];
  *((_WORD *)v40 + 16)  = 377;
  *((unsigned char *)v40 + 34)  = 3;
  v40[5]  = &off_10044D790;
  int64_t v41 = v37 + 2;
  if (v38 <= v39) {
    uint64_t v0 = sub_1000C557C((void *)(v36 > 1), v41, 1, v0);
  }
  v0[2]  = v41;
  Swift::String v42 = &v0[2 * v39];
  *((_WORD *)v42 + 16)  = 378;
  *((unsigned char *)v42 + 34)  = 0;
  v42[5]  = &off_10044D7E0;
  unint64_t v44 = v0[2];
  unint64_t v43 = v0[3];
  unint64_t v45 = v43 >> 1;
  unint64_t v46 = v44 + 1;
  if (v43 >> 1 <= v44)
  {
    uint64_t v0 = sub_1000C557C((void *)(v43 > 1), v44 + 1, 1, v0);
    unint64_t v43 = v0[3];
    unint64_t v45 = v43 >> 1;
  }
  v0[2]  = v46;
  unint64_t v47 = &v0[2 * v44];
  *((_WORD *)v47 + 16)  = 379;
  *((unsigned char *)v47 + 34)  = 1;
  void v47[5] = &off_10044D818;
  int64_t v48 = v44 + 2;
  if (v45 <= v46) {
    uint64_t v0 = sub_1000C557C((void *)(v43 > 1), v48, 1, v0);
  }
  v0[2]  = v48;
  uint64_t v49 = &v0[2 * v46];
  *((_WORD *)v49 + 16)  = 380;
  *((unsigned char *)v49 + 34)  = 3;
  v49[5]  = &off_10044D850;
  unint64_t v51 = v0[2];
  unint64_t v50 = v0[3];
  unint64_t v52 = v50 >> 1;
  unint64_t v53 = v51 + 1;
  if (v50 >> 1 <= v51)
  {
    uint64_t v0 = sub_1000C557C((void *)(v50 > 1), v51 + 1, 1, v0);
    unint64_t v50 = v0[3];
    unint64_t v52 = v50 >> 1;
  }
  v0[2]  = v53;
  unint64_t v54 = &v0[2 * v51];
  *((_WORD *)v54 + 16)  = 381;
  *((unsigned char *)v54 + 34)  = 3;
  v54[5]  = &off_10044D880;
  if (v52 <= v53) {
    uint64_t v0 = sub_1000C557C((void *)(v50 > 1), v51 + 2, 1, v0);
  }
  v0[2]  = v51 + 2;
  Swift::String v55 = &v0[2 * v53];
  *((_WORD *)v55 + 16)  = 382;
  *((unsigned char *)v55 + 34)  = 0;
  v55[5]  = &off_10044D8C0;
  unint64_t v57 = v0[2];
  unint64_t v56 = v0[3];
  unint64_t v58 = v56 >> 1;
  unint64_t v59 = v57 + 1;
  if (v56 >> 1 <= v57)
  {
    uint64_t v0 = sub_1000C557C((void *)(v56 > 1), v57 + 1, 1, v0);
    unint64_t v56 = v0[3];
    unint64_t v58 = v56 >> 1;
  }
  v0[2]  = v59;
  uint64_t v60 = &v0[2 * v57];
  *((_WORD *)v60 + 16)  = 383;
  *((unsigned char *)v60 + 34)  = 1;
  v60[5]  = &off_10044D8F0;
  int64_t v61 = v57 + 2;
  if (v58 <= v59) {
    uint64_t v0 = sub_1000C557C((void *)(v56 > 1), v61, 1, v0);
  }
  v0[2]  = v61;
  unint64_t v62 = &v0[2 * v59];
  *((_WORD *)v62 + 16)  = 384;
  *((unsigned char *)v62 + 34)  = 4;
  v62[5]  = &off_10044D920;
  unint64_t v64 = v0[2];
  unint64_t v63 = v0[3];
  unint64_t v65 = v63 >> 1;
  unint64_t v66 = v64 + 1;
  if (v63 >> 1 <= v64)
  {
    uint64_t v0 = sub_1000C557C((void *)(v63 > 1), v64 + 1, 1, v0);
    unint64_t v63 = v0[3];
    unint64_t v65 = v63 >> 1;
  }
  v0[2]  = v66;
  uint64_t v67 = &v0[2 * v64];
  *((_WORD *)v67 + 16)  = 385;
  *((unsigned char *)v67 + 34)  = 5;
  v67[5]  = &off_10044D960;
  int64_t v68 = v64 + 2;
  if (v65 <= v66) {
    uint64_t v0 = sub_1000C557C((void *)(v63 > 1), v68, 1, v0);
  }
  v0[2]  = v68;
  uint64_t v69 = &v0[2 * v66];
  *((_WORD *)v69 + 16)  = 386;
  *((unsigned char *)v69 + 34)  = 4;
  v69[5]  = &off_10044D990;
  unint64_t v71 = v0[2];
  unint64_t v70 = v0[3];
  unint64_t v72 = v70 >> 1;
  unint64_t v73 = v71 + 1;
  if (v70 >> 1 <= v71)
  {
    uint64_t v0 = sub_1000C557C((void *)(v70 > 1), v71 + 1, 1, v0);
    unint64_t v70 = v0[3];
    unint64_t v72 = v70 >> 1;
  }
  v0[2]  = v73;
  unint64_t v74 = &v0[2 * v71];
  *((_WORD *)v74 + 16)  = 643;
  *((unsigned char *)v74 + 34)  = 3;
  v74[5]  = &off_10044D9C8;
  int64_t v75 = v71 + 2;
  if (v72 <= v73) {
    uint64_t v0 = sub_1000C557C((void *)(v70 > 1), v75, 1, v0);
  }
  v0[2]  = v75;
  uint64_t v76 = &v0[2 * v73];
  *((_WORD *)v76 + 16)  = 644;
  *((unsigned char *)v76 + 34)  = 1;
  v76[5]  = &off_10044DAD8;
  unint64_t v78 = v0[2];
  unint64_t v77 = v0[3];
  unint64_t v79 = v77 >> 1;
  unint64_t v80 = v78 + 1;
  if (v77 >> 1 <= v78)
  {
    uint64_t v0 = sub_1000C557C((void *)(v77 > 1), v78 + 1, 1, v0);
    unint64_t v77 = v0[3];
    unint64_t v79 = v77 >> 1;
  }
  v0[2]  = v80;
  int16x8_t v81 = &v0[2 * v78];
  *((_WORD *)v81 + 16)  = 645;
  *((unsigned char *)v81 + 34)  = 4;
  v81[5]  = &off_10044DB70;
  int64_t v82 = v78 + 2;
  if (v79 <= v80) {
    uint64_t v0 = sub_1000C557C((void *)(v77 > 1), v82, 1, v0);
  }
  v0[2]  = v82;
  uint64_t v83 = &v0[2 * v80];
  *((_WORD *)v83 + 16)  = 646;
  *((unsigned char *)v83 + 34)  = 5;
  v83[5]  = &off_10044DBC8;
  unsigned __int8 v84 = sub_1001E28A0((uint64_t)v0);
  swift_bridgeObjectRelease();
  return v84;
}

void *sub_1001C6204()
{
  unint64_t result = sub_1001C6224();
  off_100482000  = result;
  return result;
}

void *sub_1001C6224()
{
  sub_100010BCC(&qword_100482088);
  uint64_t v0 = swift_allocObject();
  *(_DWORD *)(v0 + 32)  = 42;
  *(void *)(v0 + 40)  = &off_10044C600;
  *(_DWORD *)(v0 + 48)  = 58;
  *(void *)(v0 + 56)  = &off_10044C630;
  *(_DWORD *)(v0 + 64)  = 106;
  *(void *)(v0 + 72)  = &off_10044C660;
  *(_DWORD *)(v0 + 80)  = 122;
  *(void *)(v0 + 88)  = &off_10044C690;
  *(_DWORD *)(v0 + 96)  = 138;
  *(_OWORD *)(v0 + 16)  = xmmword_1003C1880;
  *(void *)(v0 + 104)  = &off_10044C6C0;
  *(_DWORD *)(v0 + 112)  = 155;
  *(void *)(v0 + 120)  = &off_10044C6F0;
  *(_DWORD *)(v0 + 128)  = 171;
  *(void *)(v0 + 136)  = &off_10044C720;
  unint64_t v1 = sub_1000C57A8(0, 1, 1, _swiftEmptyArrayStorage);
  unint64_t v3 = v1[2];
  unint64_t v2 = v1[3];
  unint64_t v4 = v3 + 1;
  if (v3 >= v2 >> 1) {
    unint64_t v1 = sub_1000C57A8((void *)(v2 > 1), v3 + 1, 1, v1);
  }
  v1[2]  = v4;
  uint64_t v5 = &v1[2 * v3];
  *((_WORD *)v5 + 16)  = 1025;
  v5[5]  = v0;
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16)  = xmmword_1003B2760;
  *(_DWORD *)(v6 + 32)  = 50;
  *(void *)(v6 + 40)  = &off_10044C750;
  *(_DWORD *)(v6 + 48)  = 114;
  *(void *)(v6 + 56)  = &off_10044C790;
  *(_DWORD *)(v6 + 64)  = 163;
  *(void *)(v6 + 72)  = &off_10044C7D0;
  unint64_t v7 = v1[3];
  int64_t v8 = v3 + 2;
  if (v4 >= v7 >> 1) {
    unint64_t v1 = sub_1000C57A8((void *)(v7 > 1), v8, 1, v1);
  }
  v1[2]  = v8;
  unint64_t v9 = &v1[2 * v4];
  *((_WORD *)v9 + 16)  = 1281;
  v9[5]  = v6;
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16)  = xmmword_1003C67D0;
  *(_DWORD *)(v10 + 32)  = 3;
  *(void *)(v10 + 40)  = &off_10044C810;
  *(_DWORD *)(v10 + 48)  = 11;
  *(void *)(v10 + 56)  = &off_10044C838;
  *(_DWORD *)(v10 + 64)  = 19;
  *(void *)(v10 + 72)  = &off_10044C860;
  *(_DWORD *)(v10 + 80)  = 27;
  *(void *)(v10 + 88)  = &off_10044C888;
  *(_DWORD *)(v10 + 96)  = 35;
  *(void *)(v10 + 104)  = &off_10044C8B0;
  *(_DWORD *)(v10 + 112)  = 43;
  *(void *)(v10 + 120)  = &off_10044C8D8;
  *(_DWORD *)(v10 + 128)  = 51;
  *(void *)(v10 + 136)  = &off_10044C900;
  *(_DWORD *)(v10 + 144)  = 59;
  *(void *)(v10 + 152)  = &off_10044C928;
  *(_DWORD *)(v10 + 160)  = 67;
  *(void *)(v10 + 168)  = &off_10044C950;
  *(_DWORD *)(v10 + 176)  = 75;
  *(void *)(v10 + 184)  = &off_10044C978;
  *(_DWORD *)(v10 + 192)  = 83;
  *(void *)(v10 + 200)  = &off_10044C9A0;
  *(_DWORD *)(v10 + 208)  = 91;
  *(void *)(v10 + 216)  = &off_10044C9C8;
  *(_DWORD *)(v10 + 224)  = 99;
  *(void *)(v10 + 232)  = &off_10044C9F0;
  *(_DWORD *)(v10 + 240)  = 107;
  *(void *)(v10 + 248)  = &off_10044CA18;
  *(_DWORD *)(v10 + 256)  = 115;
  *(void *)(v10 + 264)  = &off_10044CA40;
  *(_DWORD *)(v10 + 272)  = 123;
  *(void *)(v10 + 280)  = &off_10044CA68;
  *(_DWORD *)(v10 + 288)  = 131;
  *(void *)(v10 + 296)  = &off_10044CA90;
  *(_DWORD *)(v10 + 304)  = 139;
  *(void *)(v10 + 312)  = &off_10044CAB8;
  *(_DWORD *)(v10 + 320)  = 147;
  *(void *)(v10 + 328)  = &off_10044CAE0;
  *(_DWORD *)(v10 + 336)  = 155;
  *(void *)(v10 + 344)  = &off_10044CB08;
  *(_DWORD *)(v10 + 352)  = 163;
  *(void *)(v10 + 360)  = &off_10044CB30;
  *(_DWORD *)(v10 + 368)  = 171;
  *(void *)(v10 + 376)  = &off_10044CB58;
  *(_DWORD *)(v10 + 384)  = 179;
  *(void *)(v10 + 392)  = &off_10044CB80;
  *(_DWORD *)(v10 + 400)  = 187;
  *(void *)(v10 + 408)  = &off_10044CBA8;
  *(_DWORD *)(v10 + 416)  = 195;
  *(void *)(v10 + 424)  = &off_10044CBD0;
  *(_DWORD *)(v10 + 432)  = 203;
  *(void *)(v10 + 440)  = &off_10044CBF8;
  *(_DWORD *)(v10 + 448)  = 211;
  *(void *)(v10 + 456)  = &off_10044CC20;
  *(_DWORD *)(v10 + 464)  = 219;
  *(void *)(v10 + 472)  = &off_10044CC48;
  *(_DWORD *)(v10 + 480)  = 227;
  *(void *)(v10 + 488)  = &off_10044CC70;
  unint64_t v12 = v1[2];
  unint64_t v11 = v1[3];
  if (v12 >= v11 >> 1) {
    unint64_t v1 = sub_1000C57A8((void *)(v11 > 1), v12 + 1, 1, v1);
  }
  v1[2]  = v12 + 1;
  int64_t v13 = &v1[2 * v12];
  *((_WORD *)v13 + 16)  = 2;
  v13[5]  = v10;
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16)  = xmmword_1003C67D0;
  *(_DWORD *)(v14 + 32)  = 3;
  *(void *)(v14 + 40)  = &off_10044CC98;
  *(_DWORD *)(v14 + 48)  = 11;
  *(void *)(v14 + 56)  = &off_10044CCC0;
  *(_DWORD *)(v14 + 64)  = 19;
  *(void *)(v14 + 72)  = &off_10044CCE8;
  *(_DWORD *)(v14 + 80)  = 27;
  *(void *)(v14 + 88)  = &off_10044CD10;
  *(_DWORD *)(v14 + 96)  = 35;
  *(void *)(v14 + 104)  = &off_10044CD38;
  *(_DWORD *)(v14 + 112)  = 43;
  *(void *)(v14 + 120)  = &off_10044CD60;
  *(_DWORD *)(v14 + 128)  = 51;
  *(void *)(v14 + 136)  = &off_10044CD88;
  *(_DWORD *)(v14 + 144)  = 59;
  *(void *)(v14 + 152)  = &off_10044CDB0;
  *(_DWORD *)(v14 + 160)  = 67;
  *(void *)(v14 + 168)  = &off_10044CDD8;
  *(_DWORD *)(v14 + 176)  = 75;
  *(void *)(v14 + 184)  = &off_10044CE00;
  *(_DWORD *)(v14 + 192)  = 83;
  *(void *)(v14 + 200)  = &off_10044CE28;
  *(_DWORD *)(v14 + 208)  = 91;
  *(void *)(v14 + 216)  = &off_10044CE50;
  *(_DWORD *)(v14 + 224)  = 99;
  *(void *)(v14 + 232)  = &off_10044CE78;
  *(_DWORD *)(v14 + 240)  = 107;
  *(void *)(v14 + 248)  = &off_10044CEA0;
  *(_DWORD *)(v14 + 256)  = 115;
  *(void *)(v14 + 264)  = &off_10044CEC8;
  *(_DWORD *)(v14 + 272)  = 123;
  *(void *)(v14 + 280)  = &off_10044CEF0;
  *(_DWORD *)(v14 + 288)  = 131;
  *(void *)(v14 + 296)  = &off_10044CF18;
  *(_DWORD *)(v14 + 304)  = 139;
  *(void *)(v14 + 312)  = &off_10044CF40;
  *(_DWORD *)(v14 + 320)  = 147;
  *(void *)(v14 + 328)  = &off_10044CF68;
  *(_DWORD *)(v14 + 336)  = 155;
  *(void *)(v14 + 344)  = &off_10044CF90;
  *(_DWORD *)(v14 + 352)  = 163;
  *(void *)(v14 + 360)  = &off_10044CFB8;
  *(_DWORD *)(v14 + 368)  = 171;
  *(void *)(v14 + 376)  = &off_10044CFE0;
  *(_DWORD *)(v14 + 384)  = 179;
  *(void *)(v14 + 392)  = &off_10044D008;
  *(_DWORD *)(v14 + 400)  = 187;
  *(void *)(v14 + 408)  = &off_10044D030;
  *(_DWORD *)(v14 + 416)  = 195;
  *(void *)(v14 + 424)  = &off_10044D058;
  *(_DWORD *)(v14 + 432)  = 203;
  *(void *)(v14 + 440)  = &off_10044D080;
  *(_DWORD *)(v14 + 448)  = 211;
  *(void *)(v14 + 456)  = &off_10044D0A8;
  *(_DWORD *)(v14 + 464)  = 219;
  *(void *)(v14 + 472)  = &off_10044D0D0;
  *(_DWORD *)(v14 + 480)  = 227;
  *(void *)(v14 + 488)  = &off_10044D0F8;
  unint64_t v16 = v1[2];
  unint64_t v15 = v1[3];
  if (v16 >= v15 >> 1) {
    unint64_t v1 = sub_1000C57A8((void *)(v15 > 1), v16 + 1, 1, v1);
  }
  v1[2]  = v16 + 1;
  unint64_t v17 = &v1[2 * v16];
  *((_WORD *)v17 + 16)  = 258;
  v17[5]  = v14;
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16)  = xmmword_1003C67E0;
  *(_DWORD *)(v18 + 32)  = 7;
  *(void *)(v18 + 40)  = &off_10044D120;
  *(_DWORD *)(v18 + 48)  = 23;
  *(void *)(v18 + 56)  = &off_10044D150;
  *(_DWORD *)(v18 + 64)  = 39;
  *(void *)(v18 + 72)  = &off_10044D180;
  *(_DWORD *)(v18 + 80)  = 55;
  *(void *)(v18 + 88)  = &off_10044D1B0;
  *(_DWORD *)(v18 + 96)  = 71;
  *(void *)(v18 + 104)  = &off_10044D1E0;
  *(_DWORD *)(v18 + 112)  = 87;
  *(void *)(v18 + 120)  = &off_10044D210;
  *(_DWORD *)(v18 + 128)  = 103;
  *(void *)(v18 + 136)  = &off_10044D240;
  *(_DWORD *)(v18 + 144)  = 119;
  *(void *)(v18 + 152)  = &off_10044D270;
  *(_DWORD *)(v18 + 160)  = 135;
  *(void *)(v18 + 168)  = &off_10044D2A0;
  *(_DWORD *)(v18 + 176)  = 151;
  *(void *)(v18 + 184)  = &off_10044D2D0;
  *(_DWORD *)(v18 + 192)  = 167;
  *(void *)(v18 + 200)  = &off_10044D300;
  *(_DWORD *)(v18 + 208)  = 183;
  *(void *)(v18 + 216)  = &off_10044D330;
  *(_DWORD *)(v18 + 224)  = 199;
  *(void *)(v18 + 232)  = &off_10044D360;
  *(_DWORD *)(v18 + 240)  = 215;
  *(void *)(v18 + 248)  = &off_10044D390;
  unint64_t v20 = v1[2];
  unint64_t v19 = v1[3];
  if (v20 >= v19 >> 1) {
    unint64_t v1 = sub_1000C57A8((void *)(v19 > 1), v20 + 1, 1, v1);
  }
  v1[2]  = v20 + 1;
  int v21 = &v1[2 * v20];
  *((_WORD *)v21 + 16)  = 1026;
  v21[5]  = v18;
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16)  = xmmword_1003C1880;
  *(_DWORD *)(v22 + 32)  = 15;
  *(void *)(v22 + 40)  = &off_10044D3C0;
  *(_DWORD *)(v22 + 48)  = 47;
  *(void *)(v22 + 56)  = &off_10044D400;
  *(_DWORD *)(v22 + 64)  = 79;
  *(void *)(v22 + 72)  = &off_10044D440;
  *(_DWORD *)(v22 + 80)  = 111;
  *(void *)(v22 + 88)  = &off_10044D480;
  *(_DWORD *)(v22 + 96)  = 143;
  *(void *)(v22 + 104)  = &off_10044D4C0;
  *(_DWORD *)(v22 + 112)  = 175;
  *(void *)(v22 + 120)  = &off_10044D500;
  *(_DWORD *)(v22 + 128)  = 207;
  *(void *)(v22 + 136)  = &off_10044D540;
  unint64_t v24 = v1[2];
  unint64_t v23 = v1[3];
  if (v24 >= v23 >> 1) {
    unint64_t v1 = sub_1000C57A8((void *)(v23 > 1), v24 + 1, 1, v1);
  }
  v1[2]  = v24 + 1;
  unint64_t v25 = &v1[2 * v24];
  *((_WORD *)v25 + 16)  = 1282;
  v25[5]  = v22;
  return v1;
}

Swift::Int sub_1001C6BC8(Swift::UInt32 a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::UInt v4 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    uint64_t v5 = (Swift::UInt32 *)(a2 + 32);
    do
    {
      Swift::UInt32 v6 = *v5++;
      Hasher._combine(_:)(v6);
      --v4;
    }
    while (v4);
  }
  return Hasher._finalize()();
}

Swift::Int sub_1001C6C48()
{
  return sub_1001C6BC8(*(_DWORD *)v0, *(void *)(v0 + 8));
}

void sub_1001C6C54()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher._combine(_:)(*(_DWORD *)v0);
  Swift::UInt v2 = *(void *)(v1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    unint64_t v3 = (Swift::UInt32 *)(v1 + 32);
    do
    {
      Swift::UInt32 v4 = *v3++;
      Hasher._combine(_:)(v4);
      --v2;
    }
    while (v2);
  }
}

Swift::Int sub_1001C6CB0()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Swift::UInt v3 = *(void *)(v2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    Swift::UInt32 v4 = (Swift::UInt32 *)(v2 + 32);
    do
    {
      Swift::UInt32 v5 = *v4++;
      Hasher._combine(_:)(v5);
      --v3;
    }
    while (v3);
  }
  return Hasher._finalize()();
}

BOOL sub_1001C6D2C(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2 && sub_1000956B0(*(void *)(a1 + 8), *(void *)(a2 + 8));
}

uint64_t NonNANOperatingChannelInformation.init(channel:)(uint64_t a1)
{
  int v1 = a1;
  unsigned __int8 v2 = Channel.operatingClass.getter(a1 & 0xFFFFFFFFFFFFLL);
  if ((v1 & 0xFFFFFF00) == 0) {
    return v2 | (v1 << 8);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001C6DD8(unint64_t a1, unint64_t a2)
{
  if (a1 != a2
    || ((0x801004u >> ((a1 >> 29) & 0xF8)) & 0xFFC) != ((0x801004u >> ((a2 >> 29) & 0xF8)) & 0xFFC))
  {
    return 0;
  }
  switch(BYTE5(a1))
  {
    case 2:
      if (BYTE5(a2) != 2) {
        return 0;
      }
      uint64_t result = 1;
      break;
    case 3:
      if (BYTE5(a2) != 3) {
        return 0;
      }
      uint64_t result = 1;
      break;
    case 4:
      if (BYTE5(a2) != 4) {
        return 0;
      }
      uint64_t result = 1;
      break;
    case 5:
      if (BYTE5(a2) != 5) {
        return 0;
      }
      uint64_t result = 1;
      break;
    case 6:
      if (BYTE5(a2) != 6) {
        return 0;
      }
      uint64_t result = 1;
      break;
    default:
      if (BYTE5(a2) - 2 < 5 || ((a1 & 0x10000000000) == 0) == ((a2 >> 40) & 1)) {
        return 0;
      }
      uint64_t result = 1;
      break;
  }
  return result;
}

uint64_t sub_1001C6EDC(unint64_t a1, unint64_t a2)
{
  if (((0x801004u >> ((a1 >> 29) & 0xF8)) & 0xFFC) < ((0x801004u >> ((a2 >> 29) & 0xF8)) & 0xFFC)
    || a1 < a2)
  {
    return 1;
  }
  int v6 = BYTE5(a2);
  sub_100010BCC(&qword_10047EEE0);
  if (v6 == 2) {
    return 0;
  }
  if (BYTE5(a1) == 2) {
    return 1;
  }
  if (v6 == 3) {
    return 0;
  }
  if (BYTE5(a1) == 3) {
    return 1;
  }
  if ((BYTE5(a2) - 2) >= 5u && (a2 & 0x10000000000) == 0) {
    return 0;
  }
  if ((a1 & 0x10000000000) == 0 && (BYTE5(a1) - 2) > 4u) {
    return 1;
  }
  if ((BYTE5(a2) - 2) >= 5u && (a2 & 0x10000000000) != 0) {
    return 0;
  }
  if ((a1 & 0x10000000000) != 0 && (BYTE5(a1) - 2) > 4u) {
    return 1;
  }
  if (v6 == 4) {
    return 0;
  }
  if (BYTE5(a1) == 4) {
    return 1;
  }
  if (v6 == 5) {
    return 0;
  }
  if (BYTE5(a1) == 5) {
    return 1;
  }
  if (v6 == 6) {
    return 0;
  }
  if (BYTE5(a1) == 6) {
    return 1;
  }
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

unint64_t sub_1001C7008(unsigned int a1)
{
  if (qword_10047C1C0 != -1) {
    swift_once();
  }
  if (sub_1000AD3B4(a1, (uint64_t)off_100481FE0))
  {
    char v2 = 0;
    char v3 = 3;
LABEL_13:
    unsigned __int8 v5 = v2;
    unsigned __int8 v6 = v3;
    sub_1001C4000();
    return a1 | ((unint64_t)v5 << 32) | ((unint64_t)v6 << 40);
  }
  if (qword_10047C1C8 != -1) {
    swift_once();
  }
  if (sub_1000AD3B4(a1, (uint64_t)off_100481FE8))
  {
    char v2 = 1;
    char v3 = 4;
    goto LABEL_13;
  }
  if (qword_10047C1D0 != -1) {
    swift_once();
  }
  if (sub_1000AD3B4(a1, (uint64_t)off_100481FF0))
  {
    char v2 = 2;
    char v3 = 5;
    goto LABEL_13;
  }
  return 0x300000000;
}

uint64_t _s7CoreP2P7ChannelV7isValid7channel2on4withSbs6UInt32V_AC4BandOAA9BandwidthOtFZ_0(int a1, char a2, int a3)
{
  if (a2)
  {
    if (a2 == 1)
    {
      if (qword_10047C1C8 != -1) {
        swift_once();
      }
      unsigned __int8 v5 = (uint64_t *)&off_100481FE8;
      unsigned __int8 v6 = &off_10044FCF0;
    }
    else
    {
      if (qword_10047C1D0 != -1) {
        swift_once();
      }
      unsigned __int8 v5 = (uint64_t *)&off_100481FF0;
      unsigned __int8 v6 = &off_10044FD18;
    }
  }
  else
  {
    if (qword_10047C1C0 != -1) {
      swift_once();
    }
    unsigned __int8 v5 = (uint64_t *)&off_100481FE0;
    unsigned __int8 v6 = &off_10044FCC8;
  }
  uint64_t v7 = *v5;
  int64_t v8 = sub_1000178CC((uint64_t)v6);
  swift_bridgeObjectRetain();
  BOOL v9 = sub_1000AD3B4(a1, v7);
  swift_bridgeObjectRelease();
  if (v9) {
    char v10 = sub_1000AD484(a3, (uint64_t)v8);
  }
  else {
    char v10 = 0;
  }
  swift_bridgeObjectRelease();
  return v10 & 1;
}

uint64_t sub_1001C72A4(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_100482070);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  unsigned __int8 v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_1001C7A48();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return sub_100010754((uint64_t)a1);
  }
  v11[15]  = 0;
  unsigned int v7 = KeyedDecodingContainer.decode(_:forKey:)();
  v11[13]  = 1;
  sub_1001C8038();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v8 = v11[14];
  v11[11]  = 2;
  sub_1001C808C();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v9 = v11[12];
  sub_100010754((uint64_t)a1);
  return v7 | (unint64_t)(v8 << 32) | (v9 << 40);
}

unint64_t sub_1001C74A0(unint64_t a1)
{
  if (qword_10047C208 != -1) {
LABEL_85:
  }
    swift_once();
  uint64_t v2 = *((void *)off_100481FF8 + 2);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = 0;
  unsigned int v4 = (0x801004u >> (8 * BYTE4(a1))) & 0xFFC;
  for (i  = (unsigned __int8 *)off_100481FF8 + 32; ; i += 16)
  {
    uint64_t v6 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_85;
    }
    if (v4 == (0x801004u >> (8 * i[1]))) {
      break;
    }
LABEL_4:
    ++v3;
    if (v6 == v2) {
      return 0;
    }
  }
  int v7 = i[2];
  switch(BYTE5(a1))
  {
    case 2:
      if (v7 == 2) {
        goto LABEL_22;
      }
      goto LABEL_20;
    case 3:
      if (v7 == 3) {
        goto LABEL_22;
      }
      goto LABEL_20;
    case 4:
      if (v7 == 4) {
        goto LABEL_22;
      }
      goto LABEL_20;
    case 5:
      if (v7 == 5) {
        goto LABEL_22;
      }
      goto LABEL_20;
    case 6:
      if (v7 == 6) {
        goto LABEL_22;
      }
      goto LABEL_20;
    default:
      if ((v7 - 2) < 5) {
        goto LABEL_4;
      }
      if ((((a1 & 0x10000000000) == 0) ^ v7)) {
        goto LABEL_22;
      }
LABEL_20:
      if ((3u >> (BYTE4(a1) & 7)) & 1 | (a1 >> 40) & 1 | (BYTE5(a1) - 2 < 5) | ((v7 - 2) < 5)
        || (v7 & 1) == 0)
      {
        goto LABEL_4;
      }
LABEL_22:
      unint64_t v8 = *i;
      uint64_t v9 = *((void *)i + 1);
      uint64_t v10 = qword_10047C210;
      swift_bridgeObjectRetain();
      if (v10 != -1) {
        swift_once();
      }
      uint64_t v11 = *((void *)off_100482000 + 2);
      if (!v11) {
        goto LABEL_65;
      }
      uint64_t v12 = 0;
      break;
  }
  while (1)
  {
    int64_t v13 = (char *)off_100482000 + 16 * v12 + 32;
    if (v4 == (0x801004u >> (8 * *v13))) {
      break;
    }
LABEL_26:
    if (++v12 == v11)
    {
LABEL_65:
      uint64_t v33 = sub_10013FF78(a1, v9);
      char v35 = v34;
      swift_bridgeObjectRelease();
      unint64_t result = 0;
      if ((v35 & 1) != 0 || v33 >= 16) {
        return result;
      }
      if (v8 < 0x83)
      {
        LOBYTE(v36)  = 0;
        if (v33 >= 0) {
          uint64_t v22 = 1 << v33;
        }
        else {
          LODWORD(v22)  = 0;
        }
        return ((v22 << 16) | v8) & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v36 << 32);
      }
      if (a1 < 0x100)
      {
        LOBYTE(v36)  = 0;
        LODWORD(v22)  = a1;
        return ((v22 << 16) | v8) & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v36 << 32);
      }
LABEL_86:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x1001C7978);
    }
  }
  int v14 = v13[1];
  uint64_t v15 = *((void *)v13 + 1);
  switch(BYTE5(a1))
  {
    case 2:
      if (v14 == 2) {
        goto LABEL_41;
      }
      goto LABEL_26;
    case 3:
      if (v14 == 3) {
        goto LABEL_41;
      }
      goto LABEL_26;
    case 4:
      if (v14 == 4) {
        goto LABEL_41;
      }
      goto LABEL_26;
    case 5:
      if (v14 == 5) {
        goto LABEL_41;
      }
      goto LABEL_26;
    case 6:
      if (v14 == 6) {
        goto LABEL_41;
      }
      goto LABEL_26;
    default:
      if ((v14 - 2) < 5 || ((((a1 & 0x10000000000) == 0) ^ v14) & 1) == 0) {
        goto LABEL_26;
      }
LABEL_41:
      uint64_t v16 = *(void *)(v15 + 16);
      if (!v16) {
        goto LABEL_26;
      }
      uint64_t v17 = 0;
      uint64_t v18 = v15 + 32;
      break;
  }
  while (1)
  {
    uint64_t v19 = v18 + 16 * v17;
    uint64_t v20 = *(void *)(v19 + 8);
    uint64_t v21 = *(void *)(v20 + 16);
    if (v21)
    {
      LODWORD(v22)  = *(_DWORD *)v19;
      if (*(_DWORD *)(v20 + 32) == a1)
      {
        char v23 = 0;
      }
      else
      {
        if (v21 == 1) {
          goto LABEL_43;
        }
        if (*(_DWORD *)(v20 + 36) == a1)
        {
          char v23 = 1;
        }
        else
        {
          unint64_t v28 = 0;
          uint64_t v29 = v21 - 2;
          uint64_t v30 = v20 + 40;
          do
          {
            if (v29 == v28) {
              goto LABEL_43;
            }
            int v31 = *(_DWORD *)(v30 + 4 * v28++);
          }
          while (v31 != a1);
          if (v28 > 6) {
            goto LABEL_43;
          }
          char v23 = v28 + 1;
        }
      }
      uint64_t v24 = *(void *)(v9 + 16);
      if (v24)
      {
        if (*(_DWORD *)(v9 + 32) == v22)
        {
          swift_bridgeObjectRelease();
          if (v8 < 0x83)
          {
            char v37 = 0;
            goto LABEL_79;
          }
          goto LABEL_80;
        }
        if (v24 != 1) {
          break;
        }
      }
    }
LABEL_43:
    if (++v17 == v16) {
      goto LABEL_26;
    }
  }
  if (*(_DWORD *)(v9 + 36) == v22)
  {
    swift_bridgeObjectRelease();
    if (v8 < 0x83)
    {
      char v37 = 1;
      goto LABEL_79;
    }
LABEL_80:
    if (v22 < 0x100)
    {
      uint64_t v36 = 1 << v23;
      return ((v22 << 16) | v8) & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v36 << 32);
    }
    goto LABEL_86;
  }
  unint64_t v25 = 0;
  uint64_t v26 = v24 - 2;
  do
  {
    if (v26 == v25) {
      goto LABEL_43;
    }
    int v27 = *(_DWORD *)(v9 + 4 * v25++ + 40);
  }
  while (v27 != v22);
  if (v25 > 0xE) {
    goto LABEL_43;
  }
  swift_bridgeObjectRelease();
  if (v8 >= 0x83) {
    goto LABEL_80;
  }
  char v37 = v25 + 1;
LABEL_79:
  uint64_t v22 = 1 << v37;
  uint64_t v36 = 1 << v23;
  return ((v22 << 16) | v8) & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v36 << 32);
}

unint64_t sub_1001C79A0()
{
  unint64_t result = qword_100482008;
  if (!qword_100482008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482008);
  }
  return result;
}

unint64_t sub_1001C79F4()
{
  unint64_t result = qword_100482010;
  if (!qword_100482010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482010);
  }
  return result;
}

unint64_t sub_1001C7A48()
{
  unint64_t result = qword_100482020;
  if (!qword_100482020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482020);
  }
  return result;
}

unint64_t sub_1001C7A9C()
{
  unint64_t result = qword_100482028;
  if (!qword_100482028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482028);
  }
  return result;
}

unint64_t sub_1001C7AF0()
{
  unint64_t result = qword_100482030;
  if (!qword_100482030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482030);
  }
  return result;
}

unint64_t sub_1001C7B48()
{
  unint64_t result = qword_100482038;
  if (!qword_100482038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482038);
  }
  return result;
}

unint64_t sub_1001C7BA0()
{
  unint64_t result = qword_100482040;
  if (!qword_100482040)
  {
    sub_100014434(&qword_100482048);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482040);
  }
  return result;
}

unint64_t sub_1001C7C00()
{
  unint64_t result = qword_100487B80;
  if (!qword_100487B80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100487B80);
  }
  return result;
}

void *sub_1001C7C54()
{
  return &protocol witness table for UInt32;
}

ValueMetadata *type metadata accessor for Channel()
{
  return &type metadata for Channel;
}

ValueMetadata *type metadata accessor for Channel.Band()
{
  return &type metadata for Channel.Band;
}

unsigned char *_s7CoreP2P7ChannelV4BandOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001C7D50);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Channel.CodingKeys()
{
  return &type metadata for Channel.CodingKeys;
}

unint64_t sub_1001C7D8C()
{
  unint64_t result = qword_100482050;
  if (!qword_100482050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482050);
  }
  return result;
}

unint64_t sub_1001C7DE4()
{
  unint64_t result = qword_100482058;
  if (!qword_100482058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482058);
  }
  return result;
}

unint64_t sub_1001C7E3C()
{
  unint64_t result = qword_100482060;
  if (!qword_100482060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482060);
  }
  return result;
}

uint64_t sub_1001C7E90(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6C656E6E616863 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1684955490 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x74646977646E6162 && a2 == 0xE900000000000068)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

unint64_t sub_1001C7FE4()
{
  unint64_t result = qword_100482068;
  if (!qword_100482068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482068);
  }
  return result;
}

unint64_t sub_1001C8038()
{
  unint64_t result = qword_100482078;
  if (!qword_100482078)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482078);
  }
  return result;
}

unint64_t sub_1001C808C()
{
  unint64_t result = qword_100482080;
  if (!qword_100482080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482080);
  }
  return result;
}

uint64_t assignWithCopy for Channel.ChannelBitmap(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Channel.ChannelBitmap()
{
  return &type metadata for Channel.ChannelBitmap;
}

unint64_t sub_1001C8138()
{
  unint64_t result = qword_100482090;
  if (!qword_100482090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482090);
  }
  return result;
}

uint64_t sub_1001C818C(uint64_t a1, unint64_t *a2)
{
  uint64_t v5 = sub_100010BCC(&qword_100482170);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  unint64_t v8 = (void *)((char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100010BCC(&qword_100482178);
  __chkstk_darwin();
  uint64_t v10 = (void *)((char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v13 = ~v11;
  uint64_t v14 = -v11;
  v18[0]  = a1;
  v18[1]  = a1 + 64;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  else {
    uint64_t v15 = -1;
  }
  v18[2]  = v13;
  v18[3]  = 0;
  v18[4]  = v15 & v12;
  v18[5]  = 0;
  swift_bridgeObjectRetain();
  sub_1001C86C4(v10);
  uint64_t v16 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v6 + 48);
  while (v16(v10, 1, v5) != 1)
  {
    sub_10006EC68((uint64_t)v10, (uint64_t)v8, &qword_100482170);
    sub_1001CA6B0(v8, a2);
    sub_1000380B4((uint64_t)v8, &qword_100482170);
    if (v2) {
      break;
    }
    sub_1001C86C4(v10);
  }
  return sub_10006D44C();
}

uint64_t sub_1001C838C(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v22 = a1 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v23 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v6 = 0;
  uint64_t v24 = _swiftEmptyArrayStorage;
  if (v4) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v9 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    if (v9 < v23)
    {
      unint64_t v10 = *(void *)(v22 + 8 * v9);
      ++v6;
      if (v10) {
        goto LABEL_22;
      }
      int64_t v6 = v9 + 1;
      if (v9 + 1 >= v23) {
        goto LABEL_30;
      }
      unint64_t v10 = *(void *)(v22 + 8 * v6);
      if (v10) {
        goto LABEL_22;
      }
      int64_t v6 = v9 + 2;
      if (v9 + 2 >= v23) {
        goto LABEL_30;
      }
      unint64_t v10 = *(void *)(v22 + 8 * v6);
      if (v10) {
        goto LABEL_22;
      }
      int64_t v6 = v9 + 3;
      if (v9 + 3 >= v23) {
        goto LABEL_30;
      }
      unint64_t v10 = *(void *)(v22 + 8 * v6);
      if (v10)
      {
LABEL_22:
        unint64_t v4 = (v10 - 1) & v10;
        for (i  = __clz(__rbit64(v10)) + (v6 << 6); ; i  = v7 | (v6 << 6))
        {
          char v12 = *(unsigned char *)(*(void *)(v1 + 48) + i);
          sub_1000107A4(*(void *)(v1 + 56) + 32 * i, (uint64_t)v29 + 8);
          LOBYTE(v29[0])  = v12;
          v27[0]  = v29[0];
          v27[1]  = v29[1];
          uint64_t v28 = v30;
          v25[0]  = v12;
          sub_1000107A4((uint64_t)v27 + 8, (uint64_t)v26);
          sub_10003715C();
          if (swift_dynamicCast())
          {
            uint64_t v13 = v1;
            uint64_t v14 = v31;
            char v15 = v27[0];
            v25[0]  = v27[0];
            sub_1000107A4((uint64_t)v27 + 8, (uint64_t)v26);
            unint64_t v16 = sub_1001C9034(v15);
            uint64_t v18 = v17;
            sub_100010754((uint64_t)v26);
            sub_1000380B4((uint64_t)v27, &qword_100482180);
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)sub_1000C6D50(0, v24[2] + 1, 1, v24);
              uint64_t v24 = (void *)result;
            }
            unint64_t v20 = v24[2];
            unint64_t v19 = v24[3];
            if (v20 >= v19 >> 1)
            {
              uint64_t result = (uint64_t)sub_1000C6D50((void *)(v19 > 1), v20 + 1, 1, v24);
              uint64_t v24 = (void *)result;
            }
            v24[2]  = v20 + 1;
            uint64_t v21 = &v24[3 * v20];
            v21[4]  = v16;
            v21[5]  = v18;
            v21[6]  = v14;
            uint64_t v1 = v13;
            if (!v4) {
              goto LABEL_7;
            }
          }
          else
          {
            v25[0]  = v27[0];
            sub_1000107A4((uint64_t)v27 + 8, (uint64_t)v26);
            sub_1000380B4((uint64_t)v25, &qword_100482180);
            uint64_t result = sub_1000380B4((uint64_t)v27, &qword_100482180);
            if (!v4) {
              goto LABEL_7;
            }
          }
LABEL_6:
          unint64_t v7 = __clz(__rbit64(v4));
          v4 &= v4 - 1;
        }
      }
      int64_t v11 = v9 + 4;
      if (v11 < v23)
      {
        unint64_t v10 = *(void *)(v22 + 8 * v11);
        if (v10)
        {
          int64_t v6 = v11;
          goto LABEL_22;
        }
        while (1)
        {
          int64_t v6 = v11 + 1;
          if (__OFADD__(v11, 1)) {
            goto LABEL_32;
          }
          if (v6 >= v23) {
            break;
          }
          unint64_t v10 = *(void *)(v22 + 8 * v6);
          ++v11;
          if (v10) {
            goto LABEL_22;
          }
        }
      }
    }
LABEL_30:
    swift_release();
    return (uint64_t)v24;
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_1001C86C4@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_100010BCC(&qword_100482170);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  int64_t v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(type metadata accessor for NANInternetSharingStatistics.Requester() - 8);
  __chkstk_darwin();
  int64_t v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_10047E230);
  __chkstk_darwin();
  int64_t v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = sub_100010BCC(&qword_10047E238);
  uint64_t v12 = *(void *)(v49 - 8);
  uint64_t result = __chkstk_darwin();
  char v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *v1;
  uint64_t v17 = v1[1];
  uint64_t v19 = v1[2];
  int64_t v18 = v1[3];
  int64_t v20 = v18;
  unint64_t v21 = v1[4];
  unint64_t v44 = v15;
  unint64_t v45 = v6;
  uint64_t v50 = v19;
  uint64_t v51 = v17;
  if (v21)
  {
    unint64_t v47 = a1;
    uint64_t v48 = v4;
    uint64_t v46 = v3;
    uint64_t v22 = (v21 - 1) & v21;
    unint64_t v23 = __clz(__rbit64(v21)) | (v18 << 6);
LABEL_3:
    uint64_t v24 = *(void *)(v16 + 48) - v23 + 8 * v23;
    __int16 v25 = *(_WORD *)(v24 + 4);
    char v26 = *(unsigned char *)(v24 + 6);
    uint64_t v27 = *(void *)(v16 + 56) + *(void *)(v7 + 72) * v23;
    int v28 = *(_DWORD *)v24;
    uint64_t v29 = v16;
    sub_1001CCA9C(v27, (uint64_t)v9);
    uint64_t v30 = v49;
    uint64_t v31 = (uint64_t)&v11[*(int *)(v49 + 48)];
    *(_DWORD *)int64_t v11 = v28;
    *((_WORD *)v11 + 2)  = v25;
    v11[6]  = v26;
    uint64_t v32 = (uint64_t)v9;
    uint64_t v33 = v30;
    sub_1001CE188(v32, v31);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v11, 0, 1, v33);
    uint64_t v3 = v46;
    a1  = v47;
    uint64_t v4 = v48;
    goto LABEL_23;
  }
  int64_t v34 = v18 + 1;
  if (__OFADD__(v18, 1))
  {
LABEL_29:
    __break(1u);
    return result;
  }
  int64_t v35 = (unint64_t)(v19 + 64) >> 6;
  if (v34 < v35)
  {
    unint64_t v36 = *(void *)(v17 + 8 * v34);
    if (v36)
    {
LABEL_7:
      unint64_t v47 = a1;
      uint64_t v48 = v4;
      uint64_t v46 = v3;
      uint64_t v22 = (v36 - 1) & v36;
      unint64_t v23 = __clz(__rbit64(v36)) + (v34 << 6);
      int64_t v20 = v34;
      goto LABEL_3;
    }
    int64_t v37 = v18 + 2;
    int64_t v20 = v18 + 1;
    if (v18 + 2 < v35)
    {
      unint64_t v36 = *(void *)(v17 + 8 * v37);
      if (v36)
      {
LABEL_10:
        int64_t v34 = v37;
        goto LABEL_7;
      }
      int64_t v20 = v18 + 2;
      if (v18 + 3 < v35)
      {
        unint64_t v36 = *(void *)(v17 + 8 * (v18 + 3));
        if (v36)
        {
          int64_t v34 = v18 + 3;
          goto LABEL_7;
        }
        int64_t v37 = v18 + 4;
        int64_t v20 = v18 + 3;
        if (v18 + 4 < v35)
        {
          unint64_t v36 = *(void *)(v17 + 8 * v37);
          if (v36) {
            goto LABEL_10;
          }
          int64_t v34 = v18 + 5;
          int64_t v20 = v18 + 4;
          if (v18 + 5 < v35)
          {
            unint64_t v36 = *(void *)(v17 + 8 * v34);
            if (v36) {
              goto LABEL_7;
            }
            int64_t v20 = v35 - 1;
            int64_t v38 = v18 + 6;
            while (v35 != v38)
            {
              unint64_t v36 = *(void *)(v17 + 8 * v38++);
              if (v36)
              {
                int64_t v34 = v38 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v33 = v49;
  uint64_t v29 = v16;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v11, 1, 1, v49);
  uint64_t v22 = 0;
LABEL_23:
  uint64_t v39 = v51;
  *uint64_t v1 = v29;
  v1[1]  = v39;
  v1[2]  = v50;
  v1[3]  = v20;
  v1[4]  = v22;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v33) == 1)
  {
    sub_1000380B4((uint64_t)v11, &qword_10047E230);
    return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(v4 + 56))(a1, 1, 1, v3);
  }
  uint64_t v40 = (uint64_t)v44;
  sub_10006EC68((uint64_t)v11, (uint64_t)v44, &qword_10047E238);
  uint64_t v41 = (uint64_t)&v45[*(int *)(v3 + 48)];
  uint64_t v42 = v1[5];
  uint64_t result = sub_10006EC68(v40, v41, &qword_10047E238);
  if (__OFADD__(v42, 1))
  {
    __break(1u);
    goto LABEL_29;
  }
  v1[5]  = v42 + 1;
  uint64_t v43 = (uint64_t)a1 + *(int *)(v3 + 48);
  *a1  = v42;
  sub_10006EC68(v41, v43, &qword_10047E238);
  return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(v4 + 56))(a1, 0, 1, v3);
}

unint64_t NANCoreAnalyticsMetrics.peerAddress.getter()
{
  return *(unsigned __int16 *)(v0 + 33) | ((unint64_t)*(unsigned int *)(v0 + 35) << 16);
}

uint64_t NANCoreAnalyticsMetrics.peerAddress.setter(uint64_t result)
{
  *(_WORD *)(v1 + 33)  = result;
  *(unsigned char *)(v1 + 35)  = BYTE2(result);
  *(unsigned char *)(v1 + 36)  = BYTE3(result);
  *(unsigned char *)(v1 + 37)  = BYTE4(result);
  *(unsigned char *)(v1 + 38)  = BYTE5(result);
  return result;
}

uint64_t NANCoreAnalyticsMetrics.internetSharingStatistics.getter()
{
  uint64_t v1 = *(void *)(v0 + 344);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NANCoreAnalyticsMetrics.internetSharingStatistics.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v3 + 344)  = a1;
  *(void *)(v3 + 352)  = a2;
  *(unsigned char *)(v3 + 360)  = a3;
  return result;
}

uint64_t (*NANCoreAnalyticsMetrics.internetSharingStatistics.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

void NANCoreAnalyticsMetrics.hash(into:)(long long *a1)
{
  uint64_t v2 = v1;
  Hasher._combine(_:)(*(_DWORD *)v2);
  Hasher._combine(_:)(*(unsigned char *)(v2 + 4) & 1);
  Hasher._combine(_:)(*(unsigned char *)(v2 + 5) & 1);
  Hasher._combine(_:)(*(unsigned char *)(v2 + 6) & 1);
  Hasher._combine(_:)(*(_DWORD *)(v2 + 8));
  Hasher._combine(_:)(*(_DWORD *)(v2 + 12));
  Hasher._combine(_:)(*(unsigned char *)(v2 + 16));
  Hasher._combine(_:)(*(unsigned char *)(v2 + 17));
  Hasher._combine(_:)(*(unsigned char *)(v2 + 18));
  Hasher._combine(_:)(*(unsigned char *)(v2 + 19));
  Hasher._combine(_:)(*(_DWORD *)(v2 + 20));
  Hasher._combine(_:)(*(_DWORD *)(v2 + 24));
  Hasher._combine(_:)(*(_DWORD *)(v2 + 28));
  Hasher._combine(_:)(*(unsigned char *)(v2 + 32));
  Swift::UInt8 v4 = *(unsigned char *)(v2 + 34);
  Swift::UInt8 v5 = *(unsigned char *)(v2 + 35);
  Swift::UInt8 v6 = *(unsigned char *)(v2 + 36);
  Swift::UInt8 v7 = *(unsigned char *)(v2 + 37);
  Swift::UInt8 v8 = *(unsigned char *)(v2 + 38);
  Hasher._combine(_:)(*(unsigned char *)(v2 + 33));
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(*(_DWORD *)(v2 + 40));
  Hasher._combine(_:)(*(_DWORD *)(v2 + 44));
  Hasher._combine(_:)(*(_DWORD *)(v2 + 48));
  Hasher._combine(_:)(*(void *)(v2 + 56));
  Hasher._combine(_:)(*(void *)(v2 + 64));
  Hasher._combine(_:)(*(void *)(v2 + 72));
  Hasher._combine(_:)(*(void *)(v2 + 80));
  Hasher._combine(_:)(*(void *)(v2 + 88));
  Hasher._combine(_:)(*(void *)(v2 + 96));
  Hasher._combine(_:)(*(void *)(v2 + 104));
  Hasher._combine(_:)(*(void *)(v2 + 112));
  Hasher._combine(_:)(*(void *)(v2 + 120));
  Hasher._combine(_:)(*(void *)(v2 + 128));
  Hasher._combine(_:)(*(void *)(v2 + 136));
  Hasher._combine(_:)(*(void *)(v2 + 144));
  Hasher._combine(_:)(*(void *)(v2 + 152));
  Hasher._combine(_:)(*(void *)(v2 + 160));
  Hasher._combine(_:)(*(void *)(v2 + 168));
  Hasher._combine(_:)(*(void *)(v2 + 176));
  Hasher._combine(_:)(*(void *)(v2 + 184));
  Hasher._combine(_:)(*(void *)(v2 + 192));
  Hasher._combine(_:)(*(void *)(v2 + 200));
  Hasher._combine(_:)(*(void *)(v2 + 208));
  Hasher._combine(_:)(*(void *)(v2 + 216));
  Hasher._combine(_:)(*(void *)(v2 + 224));
  sub_10009EBD8((uint64_t)a1, *(void *)(v2 + 232));
  sub_10009EBD8((uint64_t)a1, *(void *)(v2 + 240));
  sub_10009EBD8((uint64_t)a1, *(void *)(v2 + 248));
  sub_10009EBD8((uint64_t)a1, *(void *)(v2 + 256));
  sub_10009EBD8((uint64_t)a1, *(void *)(v2 + 264));
  sub_10009EBD8((uint64_t)a1, *(void *)(v2 + 272));
  sub_10009EBD8((uint64_t)a1, *(void *)(v2 + 280));
  sub_10009EBD8((uint64_t)a1, *(void *)(v2 + 288));
  sub_10009EBD8((uint64_t)a1, *(void *)(v2 + 296));
  sub_10009EBD8((uint64_t)a1, *(void *)(v2 + 304));
  sub_10009EBD8((uint64_t)a1, *(void *)(v2 + 312));
  sub_10009EBD8((uint64_t)a1, *(void *)(v2 + 320));
  sub_10009EBD8((uint64_t)a1, *(void *)(v2 + 328));
  sub_10009EBD8((uint64_t)a1, *(void *)(v2 + 336));
  uint64_t v9 = *(void *)(v2 + 352);
  if (v9)
  {
    uint64_t v10 = *(void *)(v2 + 344);
    Swift::UInt8 v11 = *(unsigned char *)(v2 + 360) & 1;
    Hasher._combine(_:)(1u);
    if (v10 == 2)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v10 & 1);
    }
    Hasher._combine(_:)((BYTE1(v10) & 1) + 1);
    Hasher._combine(_:)(BYTE2(v10) & 1);
    swift_bridgeObjectRetain();
    sub_100086000(a1, v9);
    Hasher._combine(_:)(v11);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int NANCoreAnalyticsMetrics.hashValue.getter()
{
  Hasher.init(_seed:)();
  NANCoreAnalyticsMetrics.hash(into:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_1001C8FA0()
{
  Hasher.init(_seed:)();
  NANCoreAnalyticsMetrics.hash(into:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_1001C8FDC(void *__src, const void *a2)
{
  memcpy(v4, __src, 0x169uLL);
  memcpy(__dst, a2, 0x169uLL);
  return _s7CoreP2P23NANCoreAnalyticsMetricsV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t)v4, (uint64_t)__dst) & 1;
}

unint64_t sub_1001C9034(char a1)
{
  unint64_t result = 0x5F5050485F4E414ELL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000019;
      break;
    case 3:
      unint64_t result = 0xD000000000000017;
      break;
    case 4:
      unint64_t result = 0xD000000000000017;
      break;
    case 5:
      unint64_t result = 0xD000000000000011;
      break;
    case 6:
      unint64_t result = 0xD000000000000014;
      break;
    case 7:
      unint64_t result = 0xD000000000000021;
      break;
    case 8:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 9:
    case 21:
    case 25:
    case 33:
    case 38:
    case 41:
    case 47:
    case 50:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 10:
      unint64_t result = 0xD000000000000012;
      break;
    case 11:
      unint64_t result = 0xD000000000000018;
      break;
    case 12:
      unint64_t result = 0xD000000000000017;
      break;
    case 13:
      unint64_t result = 0xD000000000000015;
      break;
    case 14:
      unint64_t result = 0xD000000000000020;
      break;
    case 15:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 16:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 17:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 18:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 19:
      unint64_t result = 0xD000000000000019;
      break;
    case 20:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 22:
      unint64_t result = 0xD000000000000023;
      break;
    case 23:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 24:
      unint64_t result = 0xD000000000000023;
      break;
    case 26:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 27:
      unint64_t result = 0xD000000000000023;
      break;
    case 28:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 29:
      unint64_t result = 0xD000000000000025;
      break;
    case 30:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 31:
      unint64_t result = 0xD000000000000014;
      break;
    case 32:
      unint64_t result = 0xD000000000000014;
      break;
    case 34:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 35:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 36:
      unint64_t result = 0xD000000000000021;
      break;
    case 37:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 39:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 40:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 42:
      unint64_t result = 0xD000000000000017;
      break;
    case 43:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 44:
      unint64_t result = 0xD000000000000025;
      break;
    case 45:
      unint64_t result = 0xD000000000000029;
      break;
    case 46:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 48:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 49:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 51:
      unint64_t result = 0xD000000000000014;
      break;
    case 52:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 53:
      unint64_t result = 0xD000000000000019;
      break;
    case 54:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 55:
      unint64_t result = 0xD000000000000020;
      break;
    case 56:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 57:
      unint64_t result = 0x535F52495F4E414ELL;
      break;
    case 58:
      unint64_t result = 0xD000000000000018;
      break;
    case 59:
      unint64_t result = 0xD000000000000014;
      break;
    case 60:
      unint64_t result = 0xD000000000000017;
      break;
    case 61:
      unint64_t result = 0xD000000000000017;
      break;
    case 62:
      unint64_t result = 0xD000000000000015;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t NANCoreAnalyticsMetrics.eventPayload.getter()
{
  uint64_t v1 = v0;
  int v2 = *v0;
  v109  = &type metadata for UInt32;
  LODWORD(v108)  = v2;
  sub_10003803C(&v108, &v106);
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
  sub_100035788(&v106, 0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  char v4 = *((unsigned char *)v0 + 4);
  v109  = &type metadata for Bool;
  LOBYTE(v108)  = v4;
  sub_10003803C(&v108, &v106);
  char v5 = swift_isUniquelyReferenced_nonNull_native();
  sub_100035788(&v106, 1, v5);
  swift_bridgeObjectRelease();
  char v6 = *((unsigned char *)v0 + 5);
  v109  = &type metadata for Bool;
  LOBYTE(v108)  = v6;
  sub_10003803C(&v108, &v106);
  char v7 = swift_isUniquelyReferenced_nonNull_native();
  sub_100035788(&v106, 2, v7);
  swift_bridgeObjectRelease();
  char v8 = *((unsigned char *)v0 + 6);
  v109  = &type metadata for Bool;
  LOBYTE(v108)  = v8;
  sub_10003803C(&v108, &v106);
  char v9 = swift_isUniquelyReferenced_nonNull_native();
  sub_100035788(&v106, 3, v9);
  swift_bridgeObjectRelease();
  int v10 = v0[2];
  v109  = &type metadata for UInt32;
  LODWORD(v108)  = v10;
  sub_10003803C(&v108, &v106);
  char v11 = swift_isUniquelyReferenced_nonNull_native();
  sub_100035788(&v106, 5, v11);
  swift_bridgeObjectRelease();
  int v12 = v0[3];
  v109  = &type metadata for UInt32;
  LODWORD(v108)  = v12;
  sub_10003803C(&v108, &v106);
  char v13 = swift_isUniquelyReferenced_nonNull_native();
  sub_100035788(&v106, 6, v13);
  swift_bridgeObjectRelease();
  char v14 = *((unsigned char *)v0 + 16);
  v109  = &type metadata for UInt8;
  LOBYTE(v108)  = v14;
  sub_10003803C(&v108, &v106);
  char v15 = swift_isUniquelyReferenced_nonNull_native();
  sub_100035788(&v106, 7, v15);
  swift_bridgeObjectRelease();
  char v16 = *((unsigned char *)v0 + 17);
  v109  = &type metadata for UInt8;
  LOBYTE(v108)  = v16;
  sub_10003803C(&v108, &v106);
  char v17 = swift_isUniquelyReferenced_nonNull_native();
  sub_100035788(&v106, 8, v17);
  swift_bridgeObjectRelease();
  char v18 = *((unsigned char *)v0 + 32);
  v109  = &type metadata for UInt8;
  LOBYTE(v108)  = v18;
  sub_10003803C(&v108, &v106);
  char v19 = swift_isUniquelyReferenced_nonNull_native();
  sub_100035788(&v106, 10, v19);
  swift_bridgeObjectRelease();
  uint64_t v20 = WiFiAddress.description.getter(*(unsigned __int16 *)((char *)v1 + 33) | ((unint64_t)*(unsigned int *)((char *)v1 + 35) << 16));
  v109  = &type metadata for String;
  *(void *)&long long v108 = v20;
  *((void *)&v108 + 1)  = v21;
  sub_10003803C(&v108, &v106);
  char v22 = swift_isUniquelyReferenced_nonNull_native();
  sub_100035788(&v106, 11, v22);
  swift_bridgeObjectRelease();
  int v23 = v0[10];
  v109  = &type metadata for Int32;
  LODWORD(v108)  = v23;
  sub_10003803C(&v108, &v106);
  char v24 = swift_isUniquelyReferenced_nonNull_native();
  sub_100035788(&v106, 12, v24);
  swift_bridgeObjectRelease();
  int v25 = v0[11];
  v109  = &type metadata for Int32;
  LODWORD(v108)  = v25;
  sub_10003803C(&v108, &v106);
  char v26 = swift_isUniquelyReferenced_nonNull_native();
  sub_100035788(&v106, 13, v26);
  swift_bridgeObjectRelease();
  int v27 = v0[12];
  v109  = &type metadata for UInt32;
  LODWORD(v108)  = v27;
  sub_10003803C(&v108, &v106);
  char v28 = swift_isUniquelyReferenced_nonNull_native();
  sub_100035788(&v106, 56, v28);
  swift_bridgeObjectRelease();
  uint64_t v29 = *((void *)v0 + 7);
  v109  = &type metadata for UInt64;
  *(void *)&long long v108 = v29;
  sub_10003803C(&v108, &v106);
  char v30 = swift_isUniquelyReferenced_nonNull_native();
  sub_100035788(&v106, 15, v30);
  swift_bridgeObjectRelease();
  uint64_t v31 = *((void *)v0 + 8);
  v109  = &type metadata for UInt64;
  *(void *)&long long v108 = v31;
  sub_10003803C(&v108, &v106);
  char v32 = swift_isUniquelyReferenced_nonNull_native();
  sub_100035788(&v106, 16, v32);
  swift_bridgeObjectRelease();
  uint64_t v33 = *((void *)v0 + 9);
  v109  = &type metadata for UInt64;
  *(void *)&long long v108 = v33;
  sub_10003803C(&v108, &v106);
  char v34 = swift_isUniquelyReferenced_nonNull_native();
  sub_100035788(&v106, 17, v34);
  swift_bridgeObjectRelease();
  uint64_t v35 = *((void *)v0 + 10);
  v109  = &type metadata for UInt64;
  *(void *)&long long v108 = v35;
  sub_10003803C(&v108, &v106);
  char v36 = swift_isUniquelyReferenced_nonNull_native();
  sub_100035788(&v106, 18, v36);
  swift_bridgeObjectRelease();
  uint64_t v37 = *((void *)v0 + 11);
  v109  = &type metadata for UInt64;
  *(void *)&long long v108 = v37;
  sub_10003803C(&v108, &v106);
  char v38 = swift_isUniquelyReferenced_nonNull_native();
  sub_100035788(&v106, 19, v38);
  swift_bridgeObjectRelease();
  uint64_t v39 = *((void *)v0 + 12);
  v109  = &type metadata for UInt64;
  *(void *)&long long v108 = v39;
  sub_10003803C(&v108, &v106);
  char v40 = swift_isUniquelyReferenced_nonNull_native();
  sub_100035788(&v106, 20, v40);
  swift_bridgeObjectRelease();
  uint64_t v41 = *((void *)v0 + 13);
  v109  = &type metadata for UInt64;
  *(void *)&long long v108 = v41;
  sub_10003803C(&v108, &v106);
  char v42 = swift_isUniquelyReferenced_nonNull_native();
  sub_100035788(&v106, 21, v42);
  swift_bridgeObjectRelease();
  uint64_t v43 = *((void *)v0 + 14);
  v109  = &type metadata for UInt64;
  *(void *)&long long v108 = v43;
  sub_10003803C(&v108, &v106);
  char v44 = swift_isUniquelyReferenced_nonNull_native();
  sub_100035788(&v106, 22, v44);
  swift_bridgeObjectRelease();
  uint64_t v45 = *((void *)v0 + 15);
  v109  = &type metadata for UInt64;
  *(void *)&long long v108 = v45;
  sub_10003803C(&v108, &v106);
  char v46 = swift_isUniquelyReferenced_nonNull_native();
  sub_100035788(&v106, 23, v46);
  swift_bridgeObjectRelease();
  uint64_t v47 = *((void *)v0 + 16);
  v109  = &type metadata for UInt64;
  *(void *)&long long v108 = v47;
  sub_10003803C(&v108, &v106);
  char v48 = swift_isUniquelyReferenced_nonNull_native();
  sub_100035788(&v106, 24, v48);
  swift_bridgeObjectRelease();
  uint64_t v49 = *((void *)v0 + 17);
  v109  = &type metadata for UInt64;
  *(void *)&long long v108 = v49;
  sub_10003803C(&v108, &v106);
  char v50 = swift_isUniquelyReferenced_nonNull_native();
  sub_100035788(&v106, 25, v50);
  swift_bridgeObjectRelease();
  uint64_t v51 = *((void *)v0 + 18);
  v109  = &type metadata for UInt64;
  *(void *)&long long v108 = v51;
  sub_10003803C(&v108, &v106);
  char v52 = swift_isUniquelyReferenced_nonNull_native();
  sub_100035788(&v106, 26, v52);
  swift_bridgeObjectRelease();
  uint64_t v53 = *((void *)v0 + 19);
  v109  = &type metadata for UInt64;
  *(void *)&long long v108 = v53;
  sub_10003803C(&v108, &v106);
  char v54 = swift_isUniquelyReferenced_nonNull_native();
  sub_100035788(&v106, 27, v54);
  swift_bridgeObjectRelease();
  uint64_t v55 = *((void *)v0 + 20);
  v109  = &type metadata for UInt64;
  *(void *)&long long v108 = v55;
  sub_10003803C(&v108, &v106);
  char v56 = swift_isUniquelyReferenced_nonNull_native();
  sub_100035788(&v106, 28, v56);
  swift_bridgeObjectRelease();
  uint64_t v57 = *((void *)v0 + 21);
  v109  = &type metadata for UInt64;
  *(void *)&long long v108 = v57;
  sub_10003803C(&v108, &v106);
  char v58 = swift_isUniquelyReferenced_nonNull_native();
  sub_100035788(&v106, 29, v58);
  swift_bridgeObjectRelease();
  uint64_t v59 = *((void *)v0 + 22);
  v109  = &type metadata for UInt64;
  *(void *)&long long v108 = v59;
  sub_10003803C(&v108, &v106);
  char v60 = swift_isUniquelyReferenced_nonNull_native();
  sub_100035788(&v106, 30, v60);
  swift_bridgeObjectRelease();
  uint64_t v61 = *((void *)v0 + 23);
  v109  = &type metadata for UInt64;
  *(void *)&long long v108 = v61;
  sub_10003803C(&v108, &v106);
  char v62 = swift_isUniquelyReferenced_nonNull_native();
  sub_100035788(&v106, 31, v62);
  swift_bridgeObjectRelease();
  uint64_t v63 = *((void *)v0 + 24);
  v109  = &type metadata for UInt64;
  *(void *)&long long v108 = v63;
  sub_10003803C(&v108, &v106);
  char v64 = swift_isUniquelyReferenced_nonNull_native();
  sub_100035788(&v106, 32, v64);
  swift_bridgeObjectRelease();
  uint64_t v65 = *((void *)v0 + 25);
  v109  = &type metadata for UInt64;
  *(void *)&long long v108 = v65;
  sub_10003803C(&v108, &v106);
  char v66 = swift_isUniquelyReferenced_nonNull_native();
  sub_100035788(&v106, 33, v66);
  swift_bridgeObjectRelease();
  uint64_t v67 = *((void *)v0 + 26);
  v109  = &type metadata for UInt64;
  *(void *)&long long v108 = v67;
  sub_10003803C(&v108, &v106);
  char v68 = swift_isUniquelyReferenced_nonNull_native();
  sub_100035788(&v106, 34, v68);
  swift_bridgeObjectRelease();
  uint64_t v69 = *((void *)v0 + 27);
  v109  = &type metadata for UInt64;
  *(void *)&long long v108 = v69;
  sub_10003803C(&v108, &v106);
  char v70 = swift_isUniquelyReferenced_nonNull_native();
  sub_100035788(&v106, 35, v70);
  swift_bridgeObjectRelease();
  uint64_t v71 = *((void *)v0 + 28);
  v109  = &type metadata for UInt64;
  *(void *)&long long v108 = v71;
  sub_10003803C(&v108, &v106);
  char v72 = swift_isUniquelyReferenced_nonNull_native();
  sub_100035788(&v106, 36, v72);
  swift_bridgeObjectRelease();
  char v73 = *((unsigned char *)v0 + 18);
  v109  = &type metadata for UInt8;
  LOBYTE(v108)  = v73;
  sub_10003803C(&v108, &v106);
  char v74 = swift_isUniquelyReferenced_nonNull_native();
  sub_100035788(&v106, 52, v74);
  swift_bridgeObjectRelease();
  int v75 = v0[5];
  v109  = &type metadata for UInt32;
  LODWORD(v108)  = v75;
  sub_10003803C(&v108, &v106);
  char v76 = swift_isUniquelyReferenced_nonNull_native();
  sub_100035788(&v106, 51, v76);
  swift_bridgeObjectRelease();
  int v77 = v0[6];
  v109  = &type metadata for UInt32;
  LODWORD(v108)  = v77;
  sub_10003803C(&v108, &v106);
  char v78 = swift_isUniquelyReferenced_nonNull_native();
  sub_100035788(&v106, 54, v78);
  swift_bridgeObjectRelease();
  int v79 = v0[7];
  v109  = &type metadata for UInt32;
  LODWORD(v108)  = v79;
  sub_10003803C(&v108, &v106);
  char v80 = swift_isUniquelyReferenced_nonNull_native();
  sub_100035788(&v106, 55, v80);
  swift_bridgeObjectRelease();
  char v81 = *((unsigned char *)v0 + 19);
  v109  = &type metadata for UInt8;
  LOBYTE(v108)  = v81;
  sub_10003803C(&v108, &v106);
  char v82 = swift_isUniquelyReferenced_nonNull_native();
  sub_100035788(&v106, 53, v82);
  swift_bridgeObjectRelease();
  uint64_t v84 = *((void *)v0 + 43);
  uint64_t v83 = *((void *)v0 + 44);
  BOOL v85 = v83 && *((void *)v0 + 43) != 2 && (v84 & 1) == 0;
  v109  = &type metadata for Int;
  *(void *)&long long v108 = v85;
  sub_10003803C(&v108, &v106);
  char v86 = swift_isUniquelyReferenced_nonNull_native();
  sub_100035788(&v106, 57, v86);
  swift_bridgeObjectRelease();
  if (v83)
  {
    v109  = &type metadata for Bool;
    LOBYTE(v108)  = BYTE2(v84) & 1;
    sub_10003803C(&v108, &v106);
    char v87 = swift_isUniquelyReferenced_nonNull_native();
    sub_100035788(&v106, 58, v87);
    swift_bridgeObjectRelease();
    v109  = &type metadata for UInt8;
    LOBYTE(v108)  = (BYTE1(v84) & 1) + 1;
    sub_10003803C(&v108, &v106);
    char v88 = swift_isUniquelyReferenced_nonNull_native();
    sub_100035788(&v106, 59, v88);
    swift_bridgeObjectRelease();
    uint64_t v89 = *(void *)(v83 + 16);
    v109  = &type metadata for Int;
    *(void *)&long long v108 = v89;
    sub_10003803C(&v108, &v106);
    char v90 = swift_isUniquelyReferenced_nonNull_native();
    sub_100035788(&v106, 60, v90);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    unint64_t v91 = sub_100031AA8(58);
    char v93 = v92;
    swift_bridgeObjectRelease();
    if (v93)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_100172680();
      }
      sub_10003803C((_OWORD *)(_swiftEmptyDictionarySingleton[7] + 32 * v91), &v106);
      sub_100170204(v91, (uint64_t)_swiftEmptyDictionarySingleton);
      swift_bridgeObjectRelease();
    }
    else
    {
      long long v106 = 0u;
      long long v107 = 0u;
    }
    sub_1000380B4((uint64_t)&v106, &qword_10047D0D0);
    swift_bridgeObjectRetain();
    unint64_t v94 = sub_100031AA8(59);
    char v96 = v95;
    swift_bridgeObjectRelease();
    if (v96)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_100172680();
      }
      sub_10003803C((_OWORD *)(_swiftEmptyDictionarySingleton[7] + 32 * v94), &v106);
      sub_100170204(v94, (uint64_t)_swiftEmptyDictionarySingleton);
      swift_bridgeObjectRelease();
    }
    else
    {
      long long v106 = 0u;
      long long v107 = 0u;
    }
    sub_1000380B4((uint64_t)&v106, &qword_10047D0D0);
    swift_bridgeObjectRetain();
    unint64_t v97 = sub_100031AA8(60);
    char v99 = v98;
    swift_bridgeObjectRelease();
    if (v99)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_100172680();
      }
      sub_10003803C((_OWORD *)(_swiftEmptyDictionarySingleton[7] + 32 * v97), &v106);
      sub_100170204(v97, (uint64_t)_swiftEmptyDictionarySingleton);
      swift_bridgeObjectRelease();
    }
    else
    {
      long long v106 = 0u;
      long long v107 = 0u;
    }
    sub_1000380B4((uint64_t)&v106, &qword_10047D0D0);
  }
  uint64_t v100 = swift_bridgeObjectRetain();
  uint64_t v101 = sub_1001C838C(v100);
  swift_bridgeObjectRelease();
  if (*(void *)(v101 + 16))
  {
    sub_100010BCC(&qword_100481078);
    unint64_t v102 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    unint64_t v102 = _swiftEmptyDictionarySingleton;
  }
  *(void *)&long long v108 = v102;
  char v103 = (void *)swift_bridgeObjectRetain();
  sub_10018AE84(v103, 1, &v108);
  swift_bridgeObjectRelease();
  if (v83)
  {
    uint64_t v104 = swift_bridgeObjectRetain();
    sub_1001C818C(v104, (unint64_t *)&v108);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  sub_1001CC7A8(*((void *)v1 + 29), 37, &v108);
  sub_1001CC7A8(*((void *)v1 + 30), 38, &v108);
  sub_1001CC7A8(*((void *)v1 + 31), 39, &v108);
  sub_1001CC7A8(*((void *)v1 + 32), 40, &v108);
  sub_1001CC7A8(*((void *)v1 + 33), 41, &v108);
  sub_1001CC7A8(*((void *)v1 + 34), 42, &v108);
  sub_1001CC7A8(*((void *)v1 + 35), 43, &v108);
  sub_1001CC7A8(*((void *)v1 + 36), 44, &v108);
  sub_1001CC7A8(*((void *)v1 + 37), 45, &v108);
  sub_1001CC7A8(*((void *)v1 + 38), 46, &v108);
  sub_1001CC7A8(*((void *)v1 + 39), 47, &v108);
  sub_1001CC7A8(*((void *)v1 + 40), 48, &v108);
  sub_1001CC7A8(*((void *)v1 + 41), 49, &v108);
  sub_1001CC7A8(*((void *)v1 + 42), 50, &v108);
  return v108;
}

uint64_t sub_1001CA6B0(void *a1, unint64_t *a2)
{
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  char v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100010BCC(&qword_100482170);
  __chkstk_darwin();
  uint64_t v45 = (uint64_t *)((char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v46 = 0;
  unint64_t v47 = 0xE000000000000000;
  _StringGuts.grow(_:)(25);
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v46 = 0xD000000000000017;
  unint64_t v47 = 0x80000001003D9620;
  char v11 = a1;
  uint64_t v12 = *a1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v41 = v7;
    uint64_t v42 = v5;
    uint64_t v43 = v4;
    uint64_t v48 = v12 + 1;
    v13._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    uint64_t v14 = v47;
    unint64_t v44 = v46;
    uint64_t v40 = v8;
    uint64_t v15 = *(int *)(v8 + 48);
    char v16 = v45;
    char v17 = (char *)v45 + v15;
    uint64_t v39 = sub_100010BCC(&qword_10047E238);
    uint64_t v18 = *(int *)(v39 + 48);
    uint64_t v19 = (uint64_t)&v17[v18];
    uint64_t v20 = v11;
    uint64_t v21 = (char *)v11 + v15;
    *char v16 = v12;
    uint64_t v22 = (uint64_t)&v21[v18];
    LOWORD(v18)  = *((_WORD *)v21 + 2);
    char v23 = v21[6];
    *(_DWORD *)char v17 = *(_DWORD *)v21;
    *((_WORD *)v17 + 2)  = v18;
    v17[6]  = v23;
    sub_1001CCA9C(v22, v19);
    type metadata accessor for NANInternetSharingStatistics.Requester();
    sub_1001CCB00(v19);
    isa  = UInt8._bridgeToObjectiveC()().super.super.isa;
    isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v46 = *a2;
    *a2  = 0x8000000000000000;
    sub_1000358F4((uint64_t)isa, v44, v14, isUniquelyReferenced_nonNull_native);
    *a2  = v46;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v46 = 0;
    unint64_t v47 = 0xE000000000000000;
    _StringGuts.grow(_:)(23);
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v46 = 0xD000000000000015;
    unint64_t v47 = 0x80000001003D9640;
    uint64_t v26 = *v20;
    if (!__OFADD__(*v20, 1))
    {
      uint64_t v48 = *v20 + 1;
      v27._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      uint64_t v28 = v46;
      uint64_t v29 = v47;
      char v30 = (char *)v45 + *(int *)(v40 + 48);
      uint64_t v31 = (uint64_t)&v30[*(int *)(v39 + 48)];
      *uint64_t v45 = v26;
      __int16 v32 = *((_WORD *)v21 + 2);
      char v33 = v21[6];
      *(_DWORD *)char v30 = *(_DWORD *)v21;
      *((_WORD *)v30 + 2)  = v32;
      v30[6]  = v33;
      sub_1001CCA9C(v22, v31);
      uint64_t v35 = v41;
      uint64_t v34 = v42;
      uint64_t v36 = v43;
      (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v41, v31, v43);
      sub_1001CCB00(v31);
      DispatchTimeInterval.rawSeconds.getter();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v36);
      Class v37 = Int._bridgeToObjectiveC()().super.super.isa;
      char v38 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v46 = *a2;
      *a2  = 0x8000000000000000;
      sub_1000358F4((uint64_t)v37, v28, v29, v38);
      *a2  = v46;
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1001CAA94(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_1001C9034(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_1001C9034(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_1001CAB20()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_1001C9034(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1001CAB84()
{
  sub_1001C9034(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001CABD8()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_1001C9034(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1001CAC38@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1001CC740();
  *a1  = result;
  return result;
}

unint64_t sub_1001CAC68@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1001C9034(*v1);
  *a1  = result;
  a1[1]  = v4;
  return result;
}

CoreP2P::NANInternetSharingStatistics::Provider::SharingMode_optional __swiftcall NANInternetSharingStatistics.Provider.SharingMode.init(rawValue:)(Swift::UInt8 rawValue)
{
  if (rawValue == 2) {
    v1.value  = CoreP2P_NANInternetSharingStatistics_Provider_SharingMode_dhcpServer;
  }
  else {
    v1.value  = CoreP2P_NANInternetSharingStatistics_Provider_SharingMode_unknownDefault;
  }
  if (rawValue == 1) {
    return 0;
  }
  else {
    return v1;
  }
}

unsigned __int8 *sub_1001CACB0@<X0>(unsigned __int8 *result@<X0>, char *a2@<X8>)
{
  int v2 = *result;
  if (v2 == 2) {
    char v3 = 1;
  }
  else {
    char v3 = 2;
  }
  if (v2 == 1) {
    char v4 = 0;
  }
  else {
    char v4 = v3;
  }
  *a2  = v4;
  return result;
}

void sub_1001CACD0(char *a1@<X8>)
{
  if (*v1) {
    char v2 = 2;
  }
  else {
    char v2 = 1;
  }
  *a1  = v2;
}

Swift::Int sub_1001CACE8()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1) {
    Swift::UInt8 v2 = 2;
  }
  else {
    Swift::UInt8 v2 = 1;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_1001CAD38()
{
  if (*v0) {
    Swift::UInt8 v1 = 2;
  }
  else {
    Swift::UInt8 v1 = 1;
  }
  Hasher._combine(_:)(v1);
}

Swift::Int sub_1001CAD70()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1) {
    Swift::UInt8 v2 = 2;
  }
  else {
    Swift::UInt8 v2 = 1;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void NANInternetSharingStatistics.Provider.hash(into:)(uint64_t a1, __int16 a2)
{
  char v2 = HIBYTE(a2);
  if (a2) {
    Swift::UInt8 v3 = 2;
  }
  else {
    Swift::UInt8 v3 = 1;
  }
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v2 & 1);
}

BOOL static NANInternetSharingStatistics.Provider.__derived_struct_equals(_:_:)(int a1, unsigned int a2)
{
  return ((a1 ^ a2 | ((a1 ^ a2) >> 8)) & 1) == 0;
}

Swift::Int NANInternetSharingStatistics.Provider.hashValue.getter(__int16 a1)
{
  Hasher.init(_seed:)();
  if (a1) {
    Swift::UInt8 v2 = 2;
  }
  else {
    Swift::UInt8 v2 = 1;
  }
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(HIBYTE(a1) & 1);
  return Hasher._finalize()();
}

Swift::Int sub_1001CAE68()
{
  int v1 = *v0;
  Swift::UInt8 v2 = v0[1];
  Hasher.init(_seed:)();
  if (v1) {
    Swift::UInt8 v3 = 2;
  }
  else {
    Swift::UInt8 v3 = 1;
  }
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_1001CAED0()
{
  Swift::UInt8 v1 = v0[1];
  if (*v0) {
    Swift::UInt8 v2 = 2;
  }
  else {
    Swift::UInt8 v2 = 1;
  }
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v1);
}

Swift::Int sub_1001CAF1C()
{
  int v1 = *v0;
  Swift::UInt8 v2 = v0[1];
  Hasher.init(_seed:)();
  if (v1) {
    Swift::UInt8 v3 = 2;
  }
  else {
    Swift::UInt8 v3 = 1;
  }
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL sub_1001CAF80(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2 | a2[1] ^ a1[1]) & 1) == 0;
}

uint64_t NANInternetSharingStatistics.Requester.InternetSharingPolicyChannelState.init(apiValue:)(unint64_t a1)
{
  if (a1 >= 4) {
    return 0;
  }
  else {
    return 0x3040102u >> (8 * a1);
  }
}

uint64_t sub_1001CAFC8@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = _s7CoreP2P28NANInternetSharingStatisticsV9RequesterV08InternetD18PolicyChannelStateO8rawValueAGSgs5UInt8V_tcfC_0(*a1);
  *a2  = result;
  return result;
}

uint64_t sub_1001CAFF4()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t NANInternetSharingStatistics.Requester.dhcpDelay.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchTimeInterval();
  char v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t NANInternetSharingStatistics.Requester.policy.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANInternetSharingStatistics.Requester() + 20));
}

uint64_t NANInternetSharingStatistics.Requester.policy.setter(char a1)
{
  uint64_t result = type metadata accessor for NANInternetSharingStatistics.Requester();
  *(unsigned char *)(v1 + *(int *)(result + 20))  = a1;
  return result;
}

uint64_t (*NANInternetSharingStatistics.Requester.policy.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANInternetSharingStatistics.Requester.init(dhcpDelay:policy:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a3, a1, v6);
  uint64_t result = type metadata accessor for NANInternetSharingStatistics.Requester();
  *(unsigned char *)(a3 + *(int *)(result + 20))  = a2;
  return result;
}

uint64_t NANInternetSharingStatistics.Requester.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  uint64_t v20 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v6 = (uint64_t *)((char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for NANInternetSharingStatistics.Requester();
  __chkstk_darwin();
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v2) {
    return sub_100010754((uint64_t)a1);
  }
  uint64_t v17 = v7;
  uint64_t v18 = v9;
  uint64_t v10 = v20;
  sub_100039448((uint64_t)v21, v22);
  void *v6 = (int)dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
  uint64_t v11 = v10;
  uint64_t v12 = *(void (**)(void *, void, uint64_t))(v10 + 104);
  uint64_t v13 = v4;
  v12(v6, enum case for DispatchTimeInterval.seconds(_:), v4);
  uint64_t v14 = (uint64_t)v18;
  (*(void (**)(char *, void *, uint64_t))(v11 + 32))(v18, v6, v13);
  sub_100039448((uint64_t)v21, v22);
  sub_1001CCA48();
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  *(unsigned char *)(v14 + *(int *)(v17 + 20))  = v23;
  sub_100010754((uint64_t)v21);
  sub_1001CCA9C(v14, v19);
  sub_100010754((uint64_t)a1);
  return sub_1001CCB00(v14);
}

uint64_t NANInternetSharingStatistics.Requester.encode(to:)(void *a1)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  uint64_t result = DispatchTimeInterval.rawSeconds.getter();
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (result > 0x7FFFFFFF)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  sub_100039448((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  if (!v1)
  {
    type metadata accessor for NANInternetSharingStatistics.Requester();
    sub_100039448((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  }
  return sub_100010754((uint64_t)v3);
}

void NANInternetSharingStatistics.Requester.hash(into:)()
{
  uint64_t v1 = type metadata accessor for DispatchTimeInterval();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = (Swift::UInt64 *)((char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(Swift::UInt64 *, uint64_t, uint64_t))(v2 + 16))(v4, v0, v1);
  int v5 = (*(uint64_t (**)(Swift::UInt64 *, uint64_t))(v2 + 88))(v4, v1);
  if (v5 == enum case for DispatchTimeInterval.seconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v2 + 96))(v4, v1);
    int64_t v6 = *v4;
    uint64_t v7 = 1000000000;
LABEL_7:
    Swift::UInt64 v8 = v6 * v7;
    BOOL v9 = (unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63;
    BOOL v10 = v6 <= 0;
    unint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    if (v10) {
      unint64_t v11 = 0x8000000000000000;
    }
    if (v9) {
      Swift::UInt64 v12 = v11;
    }
    else {
      Swift::UInt64 v12 = v8;
    }
    goto LABEL_12;
  }
  if (v5 == enum case for DispatchTimeInterval.milliseconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v2 + 96))(v4, v1);
    int64_t v6 = *v4;
    uint64_t v7 = 1000000;
    goto LABEL_7;
  }
  if (v5 == enum case for DispatchTimeInterval.microseconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v2 + 96))(v4, v1);
    int64_t v6 = *v4;
    uint64_t v7 = 1000;
    goto LABEL_7;
  }
  if (v5 == enum case for DispatchTimeInterval.nanoseconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v2 + 96))(v4, v1);
    Swift::UInt64 v12 = *v4;
  }
  else
  {
    if (v5 != enum case for DispatchTimeInterval.never(_:)) {
      (*(void (**)(Swift::UInt64 *, uint64_t))(v2 + 8))(v4, v1);
    }
    Swift::UInt64 v12 = 0x7FFFFFFFFFFFFFFFLL;
  }
LABEL_12:
  Hasher._combine(_:)(v12);
  uint64_t v13 = type metadata accessor for NANInternetSharingStatistics.Requester();
  Hasher._combine(_:)(*(unsigned char *)(v0 + *(int *)(v13 + 20)));
}

BOOL static NANInternetSharingStatistics.Requester.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((static DispatchTimeInterval.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = type metadata accessor for NANInternetSharingStatistics.Requester();
  return *(unsigned __int8 *)(a1 + *(int *)(v4 + 20)) == *(unsigned __int8 *)(a2 + *(int *)(v4 + 20));
}

Swift::Int NANInternetSharingStatistics.Requester.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_1001CB838()
{
  return Hasher._finalize()();
}

uint64_t sub_1001CB874@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return NANInternetSharingStatistics.Requester.init(from:)(a1, a2);
}

uint64_t sub_1001CB88C(void *a1)
{
  return NANInternetSharingStatistics.Requester.encode(to:)(a1);
}

BOOL sub_1001CB8A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (static DispatchTimeInterval.== infix(_:_:)() & 1) != 0
      && *(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) == *(unsigned __int8 *)(a2 + *(int *)(a3 + 20));
}

uint64_t NANInternetSharingStatistics.provider.getter(unsigned int a1)
{
  return (a1 >> 8) & 0x101;
}

uint64_t NANInternetSharingStatistics.provider.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 1)  = result & 1;
  *(unsigned char *)(v1 + 2)  = BYTE1(result) & 1;
  return result;
}

uint64_t NANInternetSharingStatistics.init(provider:)(__int16 a1)
{
  sub_10001FF94((uint64_t)_swiftEmptyArrayStorage);
  if (a1) {
    int v2 = 258;
  }
  else {
    int v2 = 2;
  }
  return v2 & 0xFFFEFFFF | ((((unsigned __int16)(a1 & 0x100) >> 8) & 1) << 16);
}

void NANInternetSharingStatistics.hash(into:)(long long *a1, int a2, uint64_t a3, char a4)
{
  if (a2 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a2 & 1);
  }
  if ((a2 & 0x100) != 0) {
    Swift::UInt8 v8 = 2;
  }
  else {
    Swift::UInt8 v8 = 1;
  }
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(BYTE2(a2) & 1);
  swift_bridgeObjectRetain();
  sub_100086000(a1, a3);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(a4 & 1);
}

uint64_t static NANInternetSharingStatistics.__derived_struct_equals(_:_:)(int a1, uint64_t a2, char a3, int a4, uint64_t a5, char a6)
{
  return sub_1001CC24C(a1 & 0x101FF, a2, a3, a4 & 0x101FF, a5, a6);
}

Swift::Int NANInternetSharingStatistics.hashValue.getter(int a1, uint64_t a2, char a3)
{
  Hasher.init(_seed:)();
  if (a1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a1 & 1);
  }
  if ((a1 & 0x100) != 0) {
    Swift::UInt8 v6 = 2;
  }
  else {
    Swift::UInt8 v6 = 1;
  }
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(BYTE2(a1) & 1);
  swift_bridgeObjectRetain();
  sub_100086000(v8, a2);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(a3 & 1);
  return Hasher._finalize()();
}

Swift::Int sub_1001CBAF4()
{
  if (v0[1]) {
    int v1 = 256;
  }
  else {
    int v1 = 0;
  }
  int v2 = v1 | *v0;
  if (v0[2]) {
    int v3 = 0x10000;
  }
  else {
    int v3 = 0;
  }
  return NANInternetSharingStatistics.hashValue.getter(v2 | v3, *((void *)v0 + 1), v0[16]);
}

void sub_1001CBB2C(long long *a1)
{
  if (v1[1]) {
    int v2 = 256;
  }
  else {
    int v2 = 0;
  }
  int v3 = v2 | *v1;
  if (v1[2]) {
    int v4 = 0x10000;
  }
  else {
    int v4 = 0;
  }
  NANInternetSharingStatistics.hash(into:)(a1, v3 | v4, *((void *)v1 + 1), v1[16]);
}

Swift::Int sub_1001CBB64()
{
  int v1 = *v0;
  int v2 = v0[1];
  Swift::UInt8 v3 = v0[2];
  uint64_t v4 = *((void *)v0 + 1);
  Swift::UInt8 v5 = v0[16];
  Hasher.init(_seed:)();
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 & 1);
  }
  if (v2) {
    Swift::UInt8 v6 = 2;
  }
  else {
    Swift::UInt8 v6 = 1;
  }
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v3);
  swift_bridgeObjectRetain();
  sub_100086000(v8, v4);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

uint64_t sub_1001CBC38(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *((void *)a1 + 1);
  char v3 = a1[16];
  if (a1[1]) {
    int v4 = 256;
  }
  else {
    int v4 = 0;
  }
  int v5 = v4 | *a1;
  if (a1[2]) {
    int v6 = 0x10000;
  }
  else {
    int v6 = 0;
  }
  int v7 = v5 | v6;
  if (a2[1]) {
    int v8 = 256;
  }
  else {
    int v8 = 0;
  }
  int v9 = v8 | *a2;
  if (a2[2]) {
    int v10 = 0x10000;
  }
  else {
    int v10 = 0;
  }
  return sub_1001CC24C(v7, v2, v3, v9 | v10, *((void *)a2 + 1), a2[16]);
}

uint64_t sub_1001CBCA0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    unint64_t v11 = *(void **)(*(void *)(v3 + 48) + 8 * v10);
    sub_1000107A4(*(void *)(v3 + 56) + 32 * v10, (uint64_t)v24 + 8);
    *(void *)&v24[0]  = v11;
    id v12 = v11;
    goto LABEL_23;
  }
  int64_t v13 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  int64_t v14 = (unint64_t)(v6 + 64) >> 6;
  if (v13 < v14)
  {
    unint64_t v15 = *(void *)(v4 + 8 * v13);
    if (v15)
    {
LABEL_7:
      uint64_t v9 = (v15 - 1) & v15;
      unint64_t v10 = __clz(__rbit64(v15)) + (v13 << 6);
      int64_t v7 = v13;
      goto LABEL_3;
    }
    int64_t v16 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v14)
    {
      unint64_t v15 = *(void *)(v4 + 8 * v16);
      if (v15)
      {
LABEL_10:
        int64_t v13 = v16;
        goto LABEL_7;
      }
      int64_t v7 = v5 + 2;
      if (v5 + 3 < v14)
      {
        unint64_t v15 = *(void *)(v4 + 8 * (v5 + 3));
        if (v15)
        {
          int64_t v13 = v5 + 3;
          goto LABEL_7;
        }
        int64_t v16 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v14)
        {
          unint64_t v15 = *(void *)(v4 + 8 * v16);
          if (v15) {
            goto LABEL_10;
          }
          int64_t v13 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v14)
          {
            unint64_t v15 = *(void *)(v4 + 8 * v13);
            if (v15) {
              goto LABEL_7;
            }
            int64_t v7 = v14 - 1;
            int64_t v17 = v5 + 6;
            while (v14 != v17)
            {
              unint64_t v15 = *(void *)(v4 + 8 * v17++);
              if (v15)
              {
                int64_t v13 = v17 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v9 = 0;
  uint64_t v25 = 0;
  memset(v24, 0, sizeof(v24));
LABEL_23:
  *int v1 = v3;
  v1[1]  = v4;
  v1[2]  = v6;
  v1[3]  = v7;
  v1[4]  = v9;
  uint64_t v18 = (void (*)(_OWORD *))v1[5];
  uint64_t result = sub_10006EC68((uint64_t)v24, (uint64_t)v22, &qword_100482190);
  if (*(void *)&v22[0])
  {
    v20[0]  = v22[0];
    v20[1]  = v22[1];
    uint64_t v21 = v23;
    v18(v20);
    return sub_1000380B4((uint64_t)v20, &qword_100482198);
  }
  else
  {
    *(void *)(a1 + 32)  = 0;
    *(_OWORD *)a1  = 0u;
    *(_OWORD *)(a1 + 16)  = 0u;
  }
  return result;
}

void sub_1001CBE80()
{
  void (*v11)(uint64_t *__return_ptr, void *);
  id v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  void v20[3];

  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    int64_t v7 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v6);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    unint64_t v10 = *(void **)(*(void *)(v1 + 56) + 8 * v6);
    v0[3]  = v4;
    v0[4]  = v5;
    unint64_t v11 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v20[0]  = v8;
    v20[1]  = v9;
    _OWORD v20[2] = v10;
    swift_bridgeObjectRetain();
    id v12 = v10;
    v11(&v19, v20);

    swift_bridgeObjectRelease();
    return;
  }
  int64_t v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    int64_t v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      unint64_t v15 = v0[1];
      int64_t v16 = *(void *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        uint64_t v5 = (v16 - 1) & v16;
        unint64_t v6 = __clz(__rbit64(v16)) + (v13 << 6);
        int64_t v4 = v13;
        goto LABEL_3;
      }
      int64_t v17 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        int64_t v16 = *(void *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          int64_t v13 = v17;
          goto LABEL_7;
        }
        int64_t v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          int64_t v16 = *(void *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            int64_t v13 = v3 + 3;
            goto LABEL_7;
          }
          int64_t v17 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            int64_t v16 = *(void *)(v15 + 8 * v17);
            if (v16) {
              goto LABEL_10;
            }
            int64_t v13 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              int64_t v16 = *(void *)(v15 + 8 * v13);
              if (v16) {
                goto LABEL_7;
              }
              int64_t v4 = v14 - 1;
              uint64_t v18 = v3 + 6;
              while (v14 != v18)
              {
                int64_t v16 = *(void *)(v15 + 8 * v18++);
                if (v16)
                {
                  int64_t v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v0[3]  = v4;
    v0[4]  = 0;
  }
}

uint64_t sub_1001CC014@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    unint64_t v11 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v10);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    sub_1000107A4(*(void *)(v3 + 56) + 32 * v10, (uint64_t)v24);
    *(void *)&long long v23 = v13;
    *((void *)&v23 + 1)  = v12;
    swift_bridgeObjectRetain();
    goto LABEL_23;
  }
  int64_t v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  int64_t v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    unint64_t v16 = *(void *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      uint64_t v9 = (v16 - 1) & v16;
      unint64_t v10 = __clz(__rbit64(v16)) + (v14 << 6);
      int64_t v7 = v14;
      goto LABEL_3;
    }
    int64_t v17 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      unint64_t v16 = *(void *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        int64_t v14 = v17;
        goto LABEL_7;
      }
      int64_t v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        unint64_t v16 = *(void *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          int64_t v14 = v5 + 3;
          goto LABEL_7;
        }
        int64_t v17 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          unint64_t v16 = *(void *)(v4 + 8 * v17);
          if (v16) {
            goto LABEL_10;
          }
          int64_t v14 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            unint64_t v16 = *(void *)(v4 + 8 * v14);
            if (v16) {
              goto LABEL_7;
            }
            int64_t v7 = v15 - 1;
            int64_t v18 = v5 + 6;
            while (v15 != v18)
            {
              unint64_t v16 = *(void *)(v4 + 8 * v18++);
              if (v16)
              {
                int64_t v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v9 = 0;
  memset(v24, 0, sizeof(v24));
  long long v23 = 0u;
LABEL_23:
  *uint64_t v1 = v3;
  v1[1]  = v4;
  v1[2]  = v6;
  v1[3]  = v7;
  v1[4]  = v9;
  uint64_t v19 = (void (*)(_OWORD *))v1[5];
  uint64_t result = sub_10006EC68((uint64_t)&v23, (uint64_t)v22, &qword_100482188);
  if (*((void *)&v22[0] + 1))
  {
    v21[0]  = v22[0];
    v21[1]  = v22[1];
    void v21[2] = v22[2];
    v19(v21);
    return sub_1000380B4((uint64_t)v21, &qword_1004813D8);
  }
  else
  {
    a1[1]  = 0u;
    a1[2]  = 0u;
    *a1  = 0u;
  }
  return result;
}

id sub_1001CC200@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  id v4 = (id)a1[2];
  *a2  = *a1;
  a2[1]  = v2;
  a2[2]  = v4;
  swift_bridgeObjectRetain();

  return v4;
}

uint64_t sub_1001CC24C(int a1, uint64_t a2, char a3, int a4, uint64_t a5, char a6)
{
  if (a1 == 2)
  {
    if (a4 != 2)
    {
      char v8 = 0;
      return v8 & 1;
    }
  }
  else
  {
    char v8 = 0;
    if a4 == 2 || ((a4 ^ a1)) {
      return v8 & 1;
    }
  }
  char v8 = 0;
  if (((a1 ^ a4) & 0x100) == 0 && ((a1 ^ a4) & 0x10000) == 0)
  {
    char v9 = sub_10008200C(a2, a5);
    char v8 = a3 ^ a6 ^ 1;
    if ((v9 & 1) == 0) {
      char v8 = 0;
    }
  }
  return v8 & 1;
}

uint64_t _s7CoreP2P23NANCoreAnalyticsMetricsV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == *(_DWORD *)a2
    && ((*(unsigned __int8 *)(a1 + 4) ^ *(unsigned __int8 *)(a2 + 4)) & 1) == 0
    && ((*(unsigned __int8 *)(a1 + 5) ^ *(unsigned __int8 *)(a2 + 5)) & 1) == 0
    && ((*(unsigned __int8 *)(a1 + 6) ^ *(unsigned __int8 *)(a2 + 6)) & 1) == 0
    && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16)
    && *(unsigned __int8 *)(a1 + 17) == *(unsigned __int8 *)(a2 + 17)
    && *(unsigned __int8 *)(a1 + 18) == *(unsigned __int8 *)(a2 + 18)
    && *(unsigned __int8 *)(a1 + 19) == *(unsigned __int8 *)(a2 + 19)
    && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
    && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
    && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)
    && *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32))
  {
    BOOL v2 = *(_DWORD *)(a1 + 33) == *(_DWORD *)(a2 + 33)
      && *(unsigned __int16 *)(a1 + 37) == *(unsigned __int16 *)(a2 + 37);
    if (v2
      && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40)
      && *(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44)
      && *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48)
      && *(void *)(a1 + 56) == *(void *)(a2 + 56)
      && *(void *)(a1 + 64) == *(void *)(a2 + 64)
      && *(void *)(a1 + 72) == *(void *)(a2 + 72)
      && *(void *)(a1 + 80) == *(void *)(a2 + 80)
      && *(void *)(a1 + 88) == *(void *)(a2 + 88)
      && *(void *)(a1 + 96) == *(void *)(a2 + 96)
      && *(void *)(a1 + 104) == *(void *)(a2 + 104)
      && *(void *)(a1 + 112) == *(void *)(a2 + 112)
      && *(void *)(a1 + 120) == *(void *)(a2 + 120)
      && *(void *)(a1 + 128) == *(void *)(a2 + 128)
      && *(void *)(a1 + 136) == *(void *)(a2 + 136)
      && *(void *)(a1 + 144) == *(void *)(a2 + 144)
      && *(void *)(a1 + 152) == *(void *)(a2 + 152)
      && *(void *)(a1 + 160) == *(void *)(a2 + 160)
      && *(void *)(a1 + 168) == *(void *)(a2 + 168)
      && *(void *)(a1 + 176) == *(void *)(a2 + 176)
      && *(void *)(a1 + 184) == *(void *)(a2 + 184)
      && *(void *)(a1 + 192) == *(void *)(a2 + 192)
      && *(void *)(a1 + 200) == *(void *)(a2 + 200)
      && *(void *)(a1 + 208) == *(void *)(a2 + 208)
      && *(void *)(a1 + 216) == *(void *)(a2 + 216)
      && *(void *)(a1 + 224) == *(void *)(a2 + 224)
      && sub_100099730(*(void *)(a1 + 232), *(void *)(a2 + 232))
      && sub_100099730(*(void *)(a1 + 240), *(void *)(a2 + 240))
      && sub_100099730(*(void *)(a1 + 248), *(void *)(a2 + 248))
      && sub_100099730(*(void *)(a1 + 256), *(void *)(a2 + 256))
      && sub_100099730(*(void *)(a1 + 264), *(void *)(a2 + 264))
      && sub_100099730(*(void *)(a1 + 272), *(void *)(a2 + 272))
      && sub_100099730(*(void *)(a1 + 280), *(void *)(a2 + 280))
      && sub_100099730(*(void *)(a1 + 288), *(void *)(a2 + 288))
      && sub_100099730(*(void *)(a1 + 296), *(void *)(a2 + 296))
      && sub_100099730(*(void *)(a1 + 304), *(void *)(a2 + 304))
      && sub_100099730(*(void *)(a1 + 312), *(void *)(a2 + 312))
      && sub_100099730(*(void *)(a1 + 320), *(void *)(a2 + 320))
      && sub_100099730(*(void *)(a1 + 328), *(void *)(a2 + 328))
      && sub_100099730(*(void *)(a1 + 336), *(void *)(a2 + 336)))
    {
      uint64_t v5 = *(void *)(a1 + 352);
      uint64_t v6 = *(void *)(a2 + 352);
      if (v5)
      {
        if (v6)
        {
          uint64_t v7 = *(void *)(a2 + 344);
          char v8 = *(unsigned char *)(a2 + 360);
          uint64_t v9 = *(void *)(a1 + 344) & 0x101FFLL;
          char v10 = *(unsigned char *)(a1 + 360) & 1;
          int v11 = v7 & 0x101FF;
          char v12 = v8 & 1;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          LOBYTE(v9)  = sub_1001CC24C(v9, v5, v10, v11, v6, v12);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v9) {
            return 1;
          }
        }
      }
      else if (!v6)
      {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_1001CC740()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x3F) {
    return 63;
  }
  else {
    return v0;
  }
}

uint64_t _s7CoreP2P28NANInternetSharingStatisticsV9RequesterV08InternetD18PolicyChannelStateO8rawValueAGSgs5UInt8V_tcfC_0(uint64_t result)
{
  if (result >= 5u) {
    return 5;
  }
  else {
    return result;
  }
}

uint64_t sub_1001CC7A8(uint64_t a1, char a2, void *a3)
{
  uint64_t v28 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain();
  sub_1000837BC(0, 0, 0);
  uint64_t v5 = _swiftEmptyArrayStorage;
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    uint64_t v25 = a3;
    swift_bridgeObjectRetain();
    uint64_t v7 = 0;
    do
    {
      unint64_t v8 = sub_1001C9034(a2);
      char v10 = v9;
      sub_10003AAFC();
      uint64_t v11 = BinaryInteger.description.getter();
      uint64_t v13 = v12;
      v27[0]  = v8;
      v27[1]  = v10;
      swift_bridgeObjectRetain();
      v14._countAndFlagsBits  = v11;
      v14._object  = v13;
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int64_t v15 = (objc_class *)v8;
      v16.super.super.isa  = Double._bridgeToObjectiveC()().super.super.isa;
      uint64_t v28 = v5;
      unint64_t v18 = v5[2];
      unint64_t v17 = v5[3];
      if (v18 >= v17 >> 1)
      {
        sub_1000837BC(v17 > 1, v18 + 1, 1);
        uint64_t v5 = v28;
      }
      ++v7;
      v5[2]  = v18 + 1;
      uint64_t v19 = (NSNumber *)&v5[3 * v18];
      v19[4].super.super.isa  = v15;
      v19[5].super.super.isa  = v10;
      v19[6].super.super.isa  = v16.super.super.isa;
    }
    while (v6 != v7);
    swift_bridgeObjectRelease_n();
    a3  = v25;
    if (v5[2]) {
      goto LABEL_7;
    }
LABEL_9:
    uint64_t v20 = &_swiftEmptyDictionarySingleton;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  if (!_swiftEmptyArrayStorage[2]) {
    goto LABEL_9;
  }
LABEL_7:
  sub_100010BCC(&qword_100481078);
  uint64_t v20 = (void *)static _DictionaryStorage.allocate(capacity:)();
LABEL_10:
  v27[0]  = v20;
  uint64_t v21 = (void *)swift_bridgeObjectRetain();
  sub_10018AE84(v21, 1, v27);
  swift_release();
  uint64_t v22 = v27[0];
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
  v27[0]  = *a3;
  *a3  = 0x8000000000000000;
  sub_10018B214(v22, (uint64_t)sub_1001CC200, 0, isUniquelyReferenced_nonNull_native, v27);
  *a3  = v27[0];
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for NANInternetSharingStatistics.Requester()
{
  uint64_t result = qword_100482130;
  if (!qword_100482130) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_1001CCA48()
{
  unint64_t result = qword_100482098;
  if (!qword_100482098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482098);
  }
  return result;
}

uint64_t sub_1001CCA9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NANInternetSharingStatistics.Requester();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001CCB00(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NANInternetSharingStatistics.Requester();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1001CCB60()
{
  unint64_t result = qword_1004820A0;
  if (!qword_1004820A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004820A0);
  }
  return result;
}

unint64_t sub_1001CCBB8()
{
  unint64_t result = qword_1004820A8;
  if (!qword_1004820A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004820A8);
  }
  return result;
}

unint64_t sub_1001CCC10()
{
  unint64_t result = qword_1004820B0;
  if (!qword_1004820B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004820B0);
  }
  return result;
}

unint64_t sub_1001CCC68()
{
  unint64_t result = qword_1004820B8;
  if (!qword_1004820B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004820B8);
  }
  return result;
}

unint64_t sub_1001CCCC0()
{
  unint64_t result = qword_1004820C0;
  if (!qword_1004820C0)
  {
    type metadata accessor for NANInternetSharingStatistics.Requester();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004820C0);
  }
  return result;
}

unint64_t sub_1001CCD1C()
{
  unint64_t result = qword_1004820C8;
  if (!qword_1004820C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004820C8);
  }
  return result;
}

unint64_t sub_1001CCD74()
{
  unint64_t result = qword_1004820D0;
  if (!qword_1004820D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004820D0);
  }
  return result;
}

uint64_t destroy for NANCoreAnalyticsMetrics()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NANCoreAnalyticsMetrics(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4)  = *(unsigned char *)(a2 + 4);
  *(_WORD *)(a1 + 5)  = *(_WORD *)(a2 + 5);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16)  = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 20)  = *(void *)(a2 + 20);
  *(_DWORD *)(a1 + 28)  = *(_DWORD *)(a2 + 28);
  *(unsigned char *)(a1 + 32)  = *(unsigned char *)(a2 + 32);
  int v3 = *(_DWORD *)(a2 + 33);
  *(_WORD *)(a1 + 37)  = *(_WORD *)(a2 + 37);
  *(_DWORD *)(a1 + 33)  = v3;
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48)  = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56)  = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72)  = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88)  = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104)  = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120)  = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136)  = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152)  = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168)  = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184)  = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200)  = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216)  = *(_OWORD *)(a2 + 216);
  uint64_t v4 = *(void *)(a2 + 240);
  *(void *)(a1 + 232)  = *(void *)(a2 + 232);
  *(void *)(a1 + 240)  = v4;
  uint64_t v5 = *(void *)(a2 + 256);
  *(void *)(a1 + 248)  = *(void *)(a2 + 248);
  *(void *)(a1 + 256)  = v5;
  uint64_t v6 = *(void *)(a2 + 272);
  *(void *)(a1 + 264)  = *(void *)(a2 + 264);
  *(void *)(a1 + 272)  = v6;
  uint64_t v7 = *(void *)(a2 + 288);
  *(void *)(a1 + 280)  = *(void *)(a2 + 280);
  *(void *)(a1 + 288)  = v7;
  uint64_t v8 = *(void *)(a2 + 304);
  *(void *)(a1 + 296)  = *(void *)(a2 + 296);
  *(void *)(a1 + 304)  = v8;
  uint64_t v9 = *(void *)(a2 + 320);
  *(void *)(a1 + 312)  = *(void *)(a2 + 312);
  *(void *)(a1 + 320)  = v9;
  uint64_t v10 = *(void *)(a2 + 336);
  *(void *)(a1 + 328)  = *(void *)(a2 + 328);
  *(void *)(a1 + 336)  = v10;
  *(unsigned char *)(a1 + 344)  = *(unsigned char *)(a2 + 344);
  *(_WORD *)(a1 + 345)  = *(_WORD *)(a2 + 345);
  *(void *)(a1 + 352)  = *(void *)(a2 + 352);
  *(unsigned char *)(a1 + 360)  = *(unsigned char *)(a2 + 360);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NANCoreAnalyticsMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 345;
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4)  = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a1 + 5)  = *(unsigned char *)(a2 + 5);
  *(unsigned char *)(a1 + 6)  = *(unsigned char *)(a2 + 6);
  *(_DWORD *)(a1 + 8)  = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12)  = *(_DWORD *)(a2 + 12);
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17)  = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18)  = *(unsigned char *)(a2 + 18);
  *(unsigned char *)(a1 + 19)  = *(unsigned char *)(a2 + 19);
  *(_DWORD *)(a1 + 20)  = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24)  = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28)  = *(_DWORD *)(a2 + 28);
  *(unsigned char *)(a1 + 32)  = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33)  = *(unsigned char *)(a2 + 33);
  *(unsigned char *)(a1 + 34)  = *(unsigned char *)(a2 + 34);
  *(unsigned char *)(a1 + 35)  = *(unsigned char *)(a2 + 35);
  *(unsigned char *)(a1 + 36)  = *(unsigned char *)(a2 + 36);
  *(unsigned char *)(a1 + 37)  = *(unsigned char *)(a2 + 37);
  *(unsigned char *)(a1 + 38)  = *(unsigned char *)(a2 + 38);
  *(_DWORD *)(a1 + 40)  = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44)  = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48)  = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56)  = *(void *)(a2 + 56);
  *(void *)(a1 + 64)  = *(void *)(a2 + 64);
  *(void *)(a1 + 72)  = *(void *)(a2 + 72);
  *(void *)(a1 + 80)  = *(void *)(a2 + 80);
  *(void *)(a1 + 88)  = *(void *)(a2 + 88);
  *(void *)(a1 + 96)  = *(void *)(a2 + 96);
  *(void *)(a1 + 104)  = *(void *)(a2 + 104);
  *(void *)(a1 + 112)  = *(void *)(a2 + 112);
  *(void *)(a1 + 120)  = *(void *)(a2 + 120);
  *(void *)(a1 + 128)  = *(void *)(a2 + 128);
  *(void *)(a1 + 136)  = *(void *)(a2 + 136);
  *(void *)(a1 + 144)  = *(void *)(a2 + 144);
  *(void *)(a1 + 152)  = *(void *)(a2 + 152);
  *(void *)(a1 + 160)  = *(void *)(a2 + 160);
  *(void *)(a1 + 168)  = *(void *)(a2 + 168);
  *(void *)(a1 + 176)  = *(void *)(a2 + 176);
  *(void *)(a1 + 184)  = *(void *)(a2 + 184);
  *(void *)(a1 + 192)  = *(void *)(a2 + 192);
  *(void *)(a1 + 200)  = *(void *)(a2 + 200);
  *(void *)(a1 + 208)  = *(void *)(a2 + 208);
  *(void *)(a1 + 216)  = *(void *)(a2 + 216);
  *(void *)(a1 + 224)  = *(void *)(a2 + 224);
  *(void *)(a1 + 232)  = *(void *)(a2 + 232);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 240)  = *(void *)(a2 + 240);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 248)  = *(void *)(a2 + 248);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 256)  = *(void *)(a2 + 256);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 264)  = *(void *)(a2 + 264);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 272)  = *(void *)(a2 + 272);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 280)  = *(void *)(a2 + 280);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 288)  = *(void *)(a2 + 288);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 296)  = *(void *)(a2 + 296);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 304)  = *(void *)(a2 + 304);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 312)  = *(void *)(a2 + 312);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 320)  = *(void *)(a2 + 320);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 328)  = *(void *)(a2 + 328);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 336)  = *(void *)(a2 + 336);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 344)  = *(unsigned char *)(a2 + 344);
  *(unsigned char *)(a1 + 345)  = *(unsigned char *)(a2 + 345);
  *(unsigned char *)(a1 + 346)  = *(unsigned char *)(v4 + 1);
  *(void *)(a1 + 352)  = *(void *)(a2 + 352);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 360)  = *(unsigned char *)(v4 + 15);
  return a1;
}

void *initializeWithTake for NANCoreAnalyticsMetrics(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x169uLL);
}

uint64_t assignWithTake for NANCoreAnalyticsMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 345;
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4)  = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a1 + 5)  = *(unsigned char *)(a2 + 5);
  *(unsigned char *)(a1 + 6)  = *(unsigned char *)(a2 + 6);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16)  = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 20)  = *(void *)(a2 + 20);
  *(_DWORD *)(a1 + 28)  = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32)  = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 36)  = *(unsigned char *)(a2 + 36);
  *(unsigned char *)(a1 + 37)  = *(unsigned char *)(a2 + 37);
  *(unsigned char *)(a1 + 38)  = *(unsigned char *)(a2 + 38);
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48)  = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56)  = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72)  = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88)  = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104)  = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120)  = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136)  = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152)  = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168)  = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184)  = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200)  = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216)  = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 232)  = *(void *)(a2 + 232);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 240)  = *(void *)(a2 + 240);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 248)  = *(void *)(a2 + 248);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 256)  = *(void *)(a2 + 256);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 264)  = *(void *)(a2 + 264);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 272)  = *(void *)(a2 + 272);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 280)  = *(void *)(a2 + 280);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 288)  = *(void *)(a2 + 288);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 296)  = *(void *)(a2 + 296);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 304)  = *(void *)(a2 + 304);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 312)  = *(void *)(a2 + 312);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 320)  = *(void *)(a2 + 320);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 328)  = *(void *)(a2 + 328);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 336)  = *(void *)(a2 + 336);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 344)  = *(unsigned char *)(a2 + 344);
  *(unsigned char *)(a1 + 345)  = *(unsigned char *)(a2 + 345);
  *(unsigned char *)(a1 + 346)  = *(unsigned char *)(v4 + 1);
  *(void *)(a1 + 352)  = *(void *)(a2 + 352);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 360)  = *(unsigned char *)(v4 + 15);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANCoreAnalyticsMetrics(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 361)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 232);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NANCoreAnalyticsMetrics(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248)  = 0u;
    *(_OWORD *)(result + 232)  = 0u;
    *(_OWORD *)(result + 216)  = 0u;
    *(_OWORD *)(result + 200)  = 0u;
    *(_OWORD *)(result + 184)  = 0u;
    *(_OWORD *)(result + 168)  = 0u;
    *(_OWORD *)(result + 152)  = 0u;
    *(_OWORD *)(result + 136)  = 0u;
    *(_OWORD *)(result + 120)  = 0u;
    *(_OWORD *)(result + 104)  = 0u;
    *(_OWORD *)(result + 88)  = 0u;
    *(_OWORD *)(result + 72)  = 0u;
    *(_OWORD *)(result + 56)  = 0u;
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(unsigned char *)(result + 360)  = 0;
    *(_OWORD *)(result + 344)  = 0u;
    *(_OWORD *)(result + 328)  = 0u;
    *(_OWORD *)(result + 312)  = 0u;
    *(_OWORD *)(result + 296)  = 0u;
    *(_OWORD *)(result + 280)  = 0u;
    *(_OWORD *)(result + 264)  = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 361)  = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 232)  = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 361)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANCoreAnalyticsMetrics()
{
  return &type metadata for NANCoreAnalyticsMetrics;
}

uint64_t sub_1001CD68C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NANInternetSharingStatistics(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1)  = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2)  = *(unsigned char *)(a2 + 2);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for NANInternetSharingStatistics(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1)  = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2)  = *(unsigned char *)(a2 + 2);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANInternetSharingStatistics(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NANInternetSharingStatistics(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16)  = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8)  = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17)  = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8)  = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANInternetSharingStatistics()
{
  return &type metadata for NANInternetSharingStatistics;
}

uint64_t getEnumTagSinglePayload for NANInternetSharingStatistics.Provider(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 65281 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65281 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65281;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
LABEL_17:
  unsigned int v6 = *(unsigned __int8 *)a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NANInternetSharingStatistics.Provider(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2)  = v6;
        break;
      case 2:
        *(_WORD *)(result + 2)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001CD98CLL);
      case 4:
        *(_DWORD *)(result + 2)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANInternetSharingStatistics.Provider()
{
  return &type metadata for NANInternetSharingStatistics.Provider;
}

ValueMetadata *type metadata accessor for NANInternetSharingStatistics.Provider.SharingMode()
{
  return &type metadata for NANInternetSharingStatistics.Provider.SharingMode;
}

void *initializeBufferWithCopyOfBuffer for NANInternetSharingStatistics.Requester(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1  = *a2;
    a1  = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for DispatchTimeInterval();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *((unsigned char *)a1 + *(int *)(a3 + 20))  = *((unsigned char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t destroy for NANInternetSharingStatistics.Requester(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  int v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t initializeWithCopy for NANInternetSharingStatistics.Requester(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20))  = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithCopy for NANInternetSharingStatistics.Requester(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20))  = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for NANInternetSharingStatistics.Requester(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20))  = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for NANInternetSharingStatistics.Requester(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20))  = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for NANInternetSharingStatistics.Requester(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001CDD0C);
}

uint64_t sub_1001CDD0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTimeInterval();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 5) {
      return v10 - 4;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for NANInternetSharingStatistics.Requester(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001CDDDC);
}

uint64_t sub_1001CDDDC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for DispatchTimeInterval();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20))  = a2 + 4;
  }
  return result;
}

uint64_t sub_1001CDE98()
{
  uint64_t result = type metadata accessor for DispatchTimeInterval();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for NANInternetSharingStatistics.Requester.InternetSharingPolicyChannelState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001CDFF8);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANInternetSharingStatistics.Requester.InternetSharingPolicyChannelState()
{
  return &type metadata for NANInternetSharingStatistics.Requester.InternetSharingPolicyChannelState;
}

unsigned char *_s7CoreP2P28NANInternetSharingStatisticsV6StatusOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001CE0FCLL);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANInternetSharingStatistics.Status()
{
  return &type metadata for NANInternetSharingStatistics.Status;
}

unint64_t sub_1001CE134()
{
  unint64_t result = qword_100482168;
  if (!qword_100482168)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482168);
  }
  return result;
}

uint64_t sub_1001CE188(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NANInternetSharingStatistics.Requester();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for NANCoreAnalyticsMetrics.Key(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xC2) {
    goto LABEL_17;
  }
  if (a2 + 62 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 62) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 62;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 62;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 62;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x3F;
  int v8 = v6 - 63;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for NANCoreAnalyticsMetrics.Key(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 62 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 62) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xC2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xC1)
  {
    unsigned int v6 = ((a2 - 194) >> 8) + 1;
    *unint64_t result = a2 + 62;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001CE348);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 62;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANCoreAnalyticsMetrics.Key()
{
  return &type metadata for NANCoreAnalyticsMetrics.Key;
}

unint64_t sub_1001CE384()
{
  unint64_t result = qword_1004821A0;
  if (!qword_1004821A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004821A0);
  }
  return result;
}

void NANMulticastLinkCondition.per.setter(double a1)
{
  *unint64_t v1 = a1;
}

double NANMulticastLinkCondition.snr.getter(double a1, double a2)
{
  return a2;
}

void NANMulticastLinkCondition.snr.setter(double a1)
{
  *(double *)(v1 + 8)  = a1;
}

double NANMulticastLinkCondition.cca.getter(double a1, double a2, double a3)
{
  return a3;
}

void NANMulticastLinkCondition.cca.setter(double a1)
{
  *(double *)(v1 + 16)  = a1;
}

double NANMulticastLinkCondition.init(from:)(void *a1)
{
  return sub_1001CE840(a1);
}

uint64_t NANMulticastLinkCondition.encode(to:)(void *a1)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  sub_100039448((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  if (!v1)
  {
    sub_100039448((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    sub_100039448((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  }
  return sub_100010754((uint64_t)v3);
}

void NANMulticastLinkCondition.hash(into:)(double a1, double a2, double a3)
{
  if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = *(void *)&a1;
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v6 = *(void *)&a2;
  }
  else {
    Swift::UInt64 v6 = 0;
  }
  Hasher._combine(_:)(v6);
  if ((*(void *)&a3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = *(void *)&a3;
  }
  else {
    Swift::UInt64 v7 = 0;
  }
  Hasher._combine(_:)(v7);
}

BOOL static NANMulticastLinkCondition.__derived_struct_equals(_:_:)(double a1, double a2, double a3, double a4, double a5, double a6)
{
  BOOL v6 = a1 == a4;
  if (a2 != a5) {
    BOOL v6 = 0;
  }
  return a3 == a6 && v6;
}

Swift::Int NANMulticastLinkCondition.hashValue.getter(double a1, double a2, double a3)
{
  return Hasher._finalize()();
}

Swift::Int sub_1001CE610()
{
  double v1 = *v0;
  double v2 = v0[1];
  double v3 = v0[2];
  Hasher.init(_seed:)();
  NANMulticastLinkCondition.hash(into:)(v1, v2, v3);
  return Hasher._finalize()();
}

void sub_1001CE674()
{
  NANMulticastLinkCondition.hash(into:)(*v0, v0[1], v0[2]);
}

Swift::Int sub_1001CE680()
{
  double v1 = *v0;
  double v2 = v0[1];
  double v3 = v0[2];
  Hasher.init(_seed:)();
  NANMulticastLinkCondition.hash(into:)(v1, v2, v3);
  return Hasher._finalize()();
}

void sub_1001CE6E0(void *a1@<X0>, uint64_t a2@<X8>)
{
  double v4 = sub_1001CE840(a1);
  if (!v2)
  {
    *(double *)a2  = v4;
    *(void *)(a2 + 8)  = v5;
    *(void *)(a2 + 16)  = v6;
  }
}

uint64_t sub_1001CE710(void *a1)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  sub_100039448((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  if (!v1)
  {
    sub_100039448((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    sub_100039448((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  }
  return sub_100010754((uint64_t)v3);
}

BOOL sub_1001CE810(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

double sub_1001CE840(void *a1)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (!v1)
  {
    sub_100039448((uint64_t)v6, v7);
    UnkeyedDecodingContainer.inferredDecode<A>()();
    double v2 = v5;
    sub_100039448((uint64_t)v6, v7);
    UnkeyedDecodingContainer.inferredDecode<A>()();
    sub_100039448((uint64_t)v6, v7);
    UnkeyedDecodingContainer.inferredDecode<A>()();
    sub_100010754((uint64_t)v6);
  }
  sub_100010754((uint64_t)a1);
  return v2;
}

unint64_t sub_1001CE9C8()
{
  unint64_t result = qword_1004821A8;
  if (!qword_1004821A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004821A8);
  }
  return result;
}

ValueMetadata *type metadata accessor for NANMulticastLinkCondition()
{
  return &type metadata for NANMulticastLinkCondition;
}

char *sub_1001CEA2C(char *result, uint64_t a2, uint64_t a3)
{
  unsigned int v10 = result;
  uint64_t v4 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (!v4) {
    return (char *)_swiftEmptyArrayStorage;
  }
  unint64_t result = (char *)sub_1000834E4(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v6 = (char *)a2;
    if (a2 <= (uint64_t)v10) {
      uint64_t v6 = v10;
    }
    for (i  = v6 - v10; ; --i)
    {
      sub_100039448(a3, *(void *)(a3 + 24));
      unint64_t result = (char *)UnkeyedDecodingContainer.inferredDecode<A>()();
      if (v3)
      {
        swift_release();
        return (char *)_swiftEmptyArrayStorage;
      }
      unint64_t v9 = _swiftEmptyArrayStorage[2];
      unint64_t v8 = _swiftEmptyArrayStorage[3];
      if (v9 >= v8 >> 1) {
        unint64_t result = (char *)sub_1000834E4(v8 > 1, v9 + 1, 1);
      }
      _swiftEmptyArrayStorage[2]  = v9 + 1;
      *((unsigned char *)&_swiftEmptyArrayStorage[4] + v9)  = v12;
      if (a2 < (uint64_t)v10) {
        break;
      }
      if (!i) {
        goto LABEL_17;
      }
      if (!--v4) {
        return (char *)_swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_19:
  __break(1u);
  return result;
}

void *sub_1001CEB90(unsigned int a1, uint64_t a2, uint64_t (*a3)(BOOL, uint64_t, uint64_t), void (*a4)(void))
{
  uint64_t v5 = (unsigned __int16)(HIWORD(a1) - a1);
  unsigned int v15 = HIWORD(a1);
  unsigned __int16 v16 = a1;
  if (HIWORD(a1) < (unsigned __int16)a1) {
    uint64_t v6 = -(uint64_t)(unsigned __int16)(a1 - HIWORD(a1));
  }
  else {
    uint64_t v6 = (unsigned __int16)(HIWORD(a1) - a1);
  }
  if (!v6) {
    return _swiftEmptyArrayStorage;
  }
  unint64_t result = (void *)a3(0, v6 & ~(v6 >> 63), 0);
  if ((v6 & 0x8000000000000000) == 0)
  {
    LODWORD(v9)  = v15 - v16;
    if (v15 >= v16) {
      uint64_t v9 = v9;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = -v9;
    while (v6)
    {
      sub_100039448(a2, *(void *)(a2 + 24));
      a4();
      unint64_t result = (void *)UnkeyedDecodingContainer.inferredDecode<A>()();
      if (v4)
      {
        swift_release();
        return _swiftEmptyArrayStorage;
      }
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      unint64_t v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1) {
        unint64_t result = (void *)a3(v11 > 1, v12 + 1, 1);
      }
      _swiftEmptyArrayStorage[2]  = v12 + 1;
      *((unsigned char *)&_swiftEmptyArrayStorage[4] + v12)  = v17;
      if (v15 < v16) {
        goto LABEL_21;
      }
      if (!v10) {
        goto LABEL_22;
      }
      ++v10;
      --v6;
      if (!--v5) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_1001CED24(unsigned int a1, uint64_t a2)
{
  uint64_t v3 = (unsigned __int16)(HIWORD(a1) - a1);
  unsigned int v12 = HIWORD(a1);
  unsigned __int16 v13 = a1;
  if (HIWORD(a1) < (unsigned __int16)a1) {
    uint64_t v4 = -(uint64_t)(unsigned __int16)(a1 - HIWORD(a1));
  }
  else {
    uint64_t v4 = (unsigned __int16)(HIWORD(a1) - a1);
  }
  if (!v4) {
    return _swiftEmptyArrayStorage;
  }
  unint64_t result = (void *)sub_10008350C(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000) == 0)
  {
    LODWORD(v7)  = v12 - v13;
    if (v12 >= v13) {
      uint64_t v7 = v7;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = -v7;
    while (v4)
    {
      sub_100039448(a2, *(void *)(a2 + 24));
      sub_1001DBF9C();
      unint64_t result = (void *)UnkeyedDecodingContainer.inferredDecode<A>()();
      if (v2)
      {
        swift_release();
        return _swiftEmptyArrayStorage;
      }
      long long v9 = v14;
      unint64_t v11 = _swiftEmptyArrayStorage[2];
      unint64_t v10 = _swiftEmptyArrayStorage[3];
      if (v11 >= v10 >> 1)
      {
        unint64_t result = (void *)sub_10008350C(v10 > 1, v11 + 1, 1);
        long long v9 = v14;
      }
      _swiftEmptyArrayStorage[2]  = v11 + 1;
      *(_OWORD *)&_swiftEmptyArrayStorage[2 * v11 + 4]  = v9;
      if (v12 < v13) {
        goto LABEL_21;
      }
      if (!v8) {
        goto LABEL_22;
      }
      ++v8;
      --v4;
      if (!--v3) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static IEEE80211InformationElement.HighThroughputCapability.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if ((a1 & 0xFFFFFFFFFFLL) == (a4 & 0xFFFFFFFFFFLL)) {
    return _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a2, a3, a5, a6);
  }
  else {
    return 0;
  }
}

uint64_t IEEE80211InformationElement.HighThroughputCapability.hash(into:)(int a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v6 = a2 >> 16;
  unint64_t v7 = HIDWORD(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  sub_100013D44(a3, a4);
  Data.hash(into:)();

  return sub_10000C970(a3, a4);
}

uint64_t sub_1001CEF68()
{
  uint64_t result = 1802401130;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1868983913;
      break;
    case 2:
      uint64_t result = 0x7261507564706D61;
      break;
    case 3:
      uint64_t result = 7562093;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001CEFE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001DB6F8(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001CF010(uint64_t a1)
{
  unint64_t v2 = sub_1001D6C2C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001CF04C(uint64_t a1)
{
  unint64_t v2 = sub_1001D6C2C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211InformationElement.HighThroughputCapability.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = a4;
  uint64_t v7 = sub_100010BCC(&qword_1004821B0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  unint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_1001D6C2C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v16)  = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v4)
  {
    uint64_t v11 = a3;
    uint64_t v12 = v15;
    LOBYTE(v16)  = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v16)  = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v16 = v11;
    uint64_t v17 = v12;
    char v18 = 3;
    sub_1000742DC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int IEEE80211InformationElement.HighThroughputCapability.hashValue.getter(unint64_t a1, uint64_t a2, unint64_t a3)
{
  Swift::UInt16 v5 = a1;
  unint64_t v6 = a1 >> 16;
  unint64_t v7 = HIDWORD(a1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  sub_100013D44(a2, a3);
  Data.hash(into:)();
  sub_10000C970(a2, a3);
  return Hasher._finalize()();
}

unint64_t IEEE80211InformationElement.HighThroughputCapability.init(from:)(void *a1)
{
  return sub_1001D6D74(a1) & 0xFFFFFFFFFFLL;
}

Swift::Int sub_1001CF338()
{
  uint64_t v1 = *(void *)(v0 + 8);
  unint64_t v2 = *(void *)(v0 + 16);
  Swift::UInt16 v3 = *(_WORD *)v0;
  Swift::UInt16 v4 = *(_WORD *)(v0 + 2);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 4);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  sub_100013D44(v1, v2);
  Data.hash(into:)();
  sub_10000C970(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1001CF3DC()
{
  uint64_t v1 = *(void *)(v0 + 8);
  unint64_t v2 = *(void *)(v0 + 16);
  Swift::UInt16 v3 = *(_WORD *)(v0 + 2);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 4);
  Hasher._combine(_:)(*(_WORD *)v0);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  sub_100013D44(v1, v2);
  Data.hash(into:)();

  return sub_10000C970(v1, v2);
}

Swift::Int sub_1001CF468()
{
  uint64_t v1 = *(void *)(v0 + 8);
  unint64_t v2 = *(void *)(v0 + 16);
  Swift::UInt16 v3 = *(_WORD *)v0;
  Swift::UInt16 v4 = *(_WORD *)(v0 + 2);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 4);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  sub_100013D44(v1, v2);
  Data.hash(into:)();
  sub_10000C970(v1, v2);
  return Hasher._finalize()();
}

unint64_t sub_1001CF508@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_1001D6D74(a1);
  if (!v2)
  {
    *(_DWORD *)a2  = result;
    *(unsigned char *)(a2 + 4)  = BYTE4(result);
    *(void *)(a2 + 8)  = v5;
    *(void *)(a2 + 16)  = v6;
  }
  return result;
}

uint64_t sub_1001CF548(void *a1)
{
  return IEEE80211InformationElement.HighThroughputCapability.encode(to:)(a1, *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32), *((void *)v1 + 1), *((void *)v1 + 2));
}

uint64_t sub_1001CF570(unsigned __int16 *a1, unsigned __int16 *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1] && *((unsigned __int8 *)a1 + 4) == *((unsigned __int8 *)a2 + 4)) {
    return _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*((void *)a1 + 1), *((void *)a1 + 2), *((void *)a2 + 1), *((void *)a2 + 2));
  }
  else {
    return 0;
  }
}

uint64_t IEEE80211InformationElement.HighThroughputOperation.mcs.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  sub_100013D44(v1, *(void *)(v0 + 32));
  return v1;
}

uint64_t IEEE80211InformationElement.HighThroughputOperation.mcs.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10000C970(*(void *)(v2 + 24), *(void *)(v2 + 32));
  *(void *)(v2 + 24)  = a1;
  *(void *)(v2 + 32)  = a2;
  return result;
}

double IEEE80211InformationElement.HighThroughputOperation.init(from:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1001D7A48(a1, (uint64_t)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2  = v6[0];
    *(_OWORD *)(a2 + 16)  = v5;
    *(void *)(a2 + 32)  = v7;
  }
  return result;
}

uint64_t IEEE80211InformationElement.HighThroughputOperation.hash(into:)()
{
  Hasher._combine(_:)(*(unsigned char *)v0);
  uint64_t v1 = *(void *)(v0 + 8);
  unint64_t v2 = *(void *)(v0 + 16);
  sub_100013D44(v1, v2);
  Data.hash(into:)();
  sub_10000C970(v1, v2);
  uint64_t v4 = *(void *)(v0 + 24);
  unint64_t v3 = *(void *)(v0 + 32);
  sub_100013D44(v4, v3);
  Data.hash(into:)();

  return sub_10000C970(v4, v3);
}

uint64_t static IEEE80211InformationElement.HighThroughputOperation.__derived_struct_equals(_:_:)(void *a1, void *a2)
{
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2
    || (_s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a1[1], a1[2], a2[1], a2[2]) & 1) == 0)
  {
    return 0;
  }
  uint64_t v4 = a1[3];
  unint64_t v5 = a1[4];
  uint64_t v6 = a2[3];
  unint64_t v7 = a2[4];

  return _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v4, v5, v6, v7);
}

uint64_t sub_1001CF768()
{
  uint64_t v1 = 0x6F6974617265706FLL;
  if (*v0 != 1) {
    uint64_t v1 = 7562093;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x437972616D697270;
  }
}

uint64_t sub_1001CF7CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001DB8A8(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001CF7F4(uint64_t a1)
{
  unint64_t v2 = sub_1001D7C3C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001CF830(uint64_t a1)
{
  unint64_t v2 = sub_1001D7C3C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211InformationElement.HighThroughputOperation.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100010BCC(&qword_1004821C0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_1001D7C3C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12)  = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    long long v12 = *(_OWORD *)(v3 + 8);
    char v11 = 1;
    sub_1000742DC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(_OWORD *)(v3 + 24);
    char v11 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int IEEE80211InformationElement.HighThroughputOperation.hashValue.getter()
{
  uint64_t v1 = v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(unsigned char *)v0);
  uint64_t v2 = v0[1];
  unint64_t v3 = v1[2];
  sub_100013D44(v1[1], v3);
  Data.hash(into:)();
  sub_10000C970(v2, v3);
  uint64_t v5 = v1[3];
  unint64_t v4 = v1[4];
  sub_100013D44(v5, v4);
  Data.hash(into:)();
  sub_10000C970(v5, v4);
  return Hasher._finalize()();
}

Swift::Int sub_1001CFACC()
{
  uint64_t v1 = *(void *)(v0 + 8);
  unint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  unint64_t v4 = *(void *)(v0 + 32);
  Swift::UInt8 v5 = *(unsigned char *)v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  sub_100013D44(v1, v2);
  Data.hash(into:)();
  sub_10000C970(v1, v2);
  sub_100013D44(v3, v4);
  Data.hash(into:)();
  sub_10000C970(v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_1001CFB7C()
{
  uint64_t v1 = *(void *)(v0 + 8);
  unint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  unint64_t v4 = *(void *)(v0 + 32);
  Hasher._combine(_:)(*(unsigned char *)v0);
  sub_100013D44(v1, v2);
  Data.hash(into:)();
  sub_10000C970(v1, v2);
  sub_100013D44(v3, v4);
  Data.hash(into:)();

  return sub_10000C970(v3, v4);
}

Swift::Int sub_1001CFC1C()
{
  uint64_t v1 = *(void *)(v0 + 8);
  unint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  unint64_t v4 = *(void *)(v0 + 32);
  Swift::UInt8 v5 = *(unsigned char *)v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  sub_100013D44(v1, v2);
  Data.hash(into:)();
  sub_10000C970(v1, v2);
  sub_100013D44(v3, v4);
  Data.hash(into:)();
  sub_10000C970(v3, v4);
  return Hasher._finalize()();
}

double sub_1001CFCC8@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  double result = IEEE80211InformationElement.HighThroughputOperation.init(from:)(a1, (uint64_t)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2  = v6[0];
    *(_OWORD *)(a2 + 16)  = v5;
    *(void *)(a2 + 32)  = v7;
  }
  return result;
}

uint64_t sub_1001CFD10(void *a1)
{
  return IEEE80211InformationElement.HighThroughputOperation.encode(to:)(a1);
}

uint64_t sub_1001CFD28(void *a1, void *a2)
{
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2) {
    return 0;
  }
  uint64_t v2 = a1[3];
  unint64_t v3 = a1[4];
  uint64_t v4 = a2[3];
  unint64_t v5 = a2[4];
  if ((_s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a1[1], a1[2], a2[1], a2[2]) & 1) == 0) {
    return 0;
  }

  return _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v2, v3, v4, v5);
}

void IEEE80211InformationElement.VeryHighThroughputCapability.hash(into:)(int a1, unint64_t a2, unsigned int a3)
{
  Swift::UInt16 v3 = a3;
  unint64_t v4 = HIDWORD(a2);
  unint64_t v5 = HIWORD(a2);
  unsigned int v6 = HIWORD(a3);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v6);
}

BOOL static IEEE80211InformationElement.VeryHighThroughputCapability.__derived_struct_equals(_:_:)(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  BOOL v4 = (unsigned __int16)a2 == (unsigned __int16)a4 && HIWORD(a2) == HIWORD(a4);
  return a1 == a3 && v4;
}

uint64_t sub_1001CFE34()
{
  uint64_t result = 1868983913;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x70614D53434D7872;
      break;
    case 2:
      uint64_t result = 0x474C686769487872;
      break;
    case 3:
      uint64_t result = 0x70614D53434D7874;
      break;
    case 4:
      uint64_t result = 0x474C686769487874;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001CFEE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001DBA20(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001CFF10(uint64_t a1)
{
  unint64_t v2 = sub_1001D7C90();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001CFF4C(uint64_t a1)
{
  unint64_t v2 = sub_1001D7C90();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211InformationElement.VeryHighThroughputCapability.encode(to:)(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_1004821D0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  unsigned int v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_1001D7C90();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v13 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    char v12 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v11 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v10 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v9 = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int IEEE80211InformationElement.VeryHighThroughputCapability.hashValue.getter(unint64_t a1, unsigned int a2)
{
  Swift::UInt16 v2 = a2;
  Swift::UInt32 v3 = a1;
  unint64_t v4 = HIDWORD(a1);
  unint64_t v5 = HIWORD(a1);
  unsigned int v6 = HIWORD(a2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

unint64_t IEEE80211InformationElement.VeryHighThroughputCapability.init(from:)(void *a1)
{
  return sub_1001D6F94(a1);
}

unint64_t sub_1001D0218@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_1001D6F94(a1);
  if (!v2)
  {
    *(void *)a2  = result;
    *(_DWORD *)(a2 + 8)  = v5;
  }
  return result;
}

uint64_t sub_1001D0260(void *a1)
{
  return IEEE80211InformationElement.VeryHighThroughputCapability.encode(to:)(a1);
}

Swift::Int sub_1001D0280()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  Swift::UInt16 v2 = *(_WORD *)(v0 + 4);
  Swift::UInt16 v3 = *(_WORD *)(v0 + 6);
  Swift::UInt16 v4 = *(_WORD *)(v0 + 8);
  Swift::UInt16 v5 = *(_WORD *)(v0 + 10);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

void sub_1001D0318()
{
  Swift::UInt16 v1 = *(_WORD *)(v0 + 4);
  Swift::UInt16 v2 = *(_WORD *)(v0 + 6);
  Swift::UInt16 v3 = *(_WORD *)(v0 + 8);
  Swift::UInt16 v4 = *(_WORD *)(v0 + 10);
  Hasher._combine(_:)(*(_DWORD *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
}

Swift::Int sub_1001D0384()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  Swift::UInt16 v2 = *(_WORD *)(v0 + 4);
  Swift::UInt16 v3 = *(_WORD *)(v0 + 6);
  Swift::UInt16 v4 = *(_WORD *)(v0 + 8);
  Swift::UInt16 v5 = *(_WORD *)(v0 + 10);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

BOOL sub_1001D0418(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2
      && *(unsigned __int16 *)(a1 + 4) == *(unsigned __int16 *)(a2 + 4)
      && *(unsigned __int16 *)(a1 + 6) == *(unsigned __int16 *)(a2 + 6)
      && *(unsigned __int16 *)(a1 + 8) == *(unsigned __int16 *)(a2 + 8)
      && *(unsigned __int16 *)(a1 + 10) == *(unsigned __int16 *)(a2 + 10);
}

uint64_t sub_1001D0468(uint64_t a1)
{
  unint64_t v2 = sub_1001D7CE4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001D04A4(uint64_t a1)
{
  unint64_t v2 = sub_1001D7CE4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211InformationElement.VeryHighThroughputOperation.encode(to:)(void *a1)
{
  return sub_1001D2A50(a1, &qword_1004821E0, (void (*)(void))sub_1001D7CE4);
}

uint64_t sub_1001D0520(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1001D2BAC(a1, a2, a3, &qword_1004821E0, (void (*)(void))sub_1001D7CE4);
}

void *IEEE80211InformationElement.RSNCapability.Capabilities.rsnPreAuthentication.unsafeMutableAddressor()
{
  return &static IEEE80211InformationElement.RSNCapability.Capabilities.rsnPreAuthentication;
}

void *IEEE80211InformationElement.RSNCapability.Capabilities.noPairwiseCapabilities.unsafeMutableAddressor()
{
  return &static IEEE80211InformationElement.RSNCapability.Capabilities.noPairwiseCapabilities;
}

uint64_t IEEE80211InformationElement.RSNCapability.Capabilities.ptksaReplayCounters.getter@<X0>(__int16 a1@<W0>, unint64_t a2@<X8>)
{
  return sub_1001D058C(a1, 2, a2);
}

uint64_t IEEE80211InformationElement.RSNCapability.Capabilities.gtksaReplayCounters.getter@<X0>(__int16 a1@<W0>, unint64_t a2@<X8>)
{
  return sub_1001D058C(a1, 4, a2);
}

uint64_t sub_1001D058C@<X0>(__int16 a1@<W0>, uint64_t a2@<X1>, unint64_t a3@<X8>)
{
  return sub_10008CC20(a2, 2, a1, a3);
}

void *IEEE80211InformationElement.RSNCapability.Capabilities.mfpr.unsafeMutableAddressor()
{
  return &static IEEE80211InformationElement.RSNCapability.Capabilities.mfpr;
}

void *IEEE80211InformationElement.RSNCapability.Capabilities.mfpc.unsafeMutableAddressor()
{
  return &static IEEE80211InformationElement.RSNCapability.Capabilities.mfpc;
}

void *IEEE80211InformationElement.RSNCapability.Capabilities.jointMultiBandRSNAuthentication.unsafeMutableAddressor()
{
  return &static IEEE80211InformationElement.RSNCapability.Capabilities.jointMultiBandRSNAuthentication;
}

void *IEEE80211InformationElement.RSNCapability.Capabilities.peerKeyEnabled.unsafeMutableAddressor()
{
  return &static IEEE80211InformationElement.RSNCapability.Capabilities.peerKeyEnabled;
}

void *IEEE80211InformationElement.RSNCapability.Capabilities.extendedKeyIDForIndviduallyAddressedFrames.unsafeMutableAddressor()
{
  return &static IEEE80211InformationElement.RSNCapability.Capabilities.extendedKeyIDForIndviduallyAddressedFrames;
}

void *IEEE80211InformationElement.RSNCapability.Capabilities.ocvc.unsafeMutableAddressor()
{
  return &static IEEE80211InformationElement.RSNCapability.Capabilities.ocvc;
}

uint64_t sub_1001D063C()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001D069C()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1001D06EC@<X0>(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  __int16 v3 = sub_1001DB650(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2  = v3;
  return result;
}

void *IEEE80211InformationElement.RSNCapability.defaultVersion.unsafeMutableAddressor()
{
  return &static IEEE80211InformationElement.RSNCapability.defaultVersion;
}

uint64_t IEEE80211InformationElement.RSNCapability.groupCipherSuite.getter()
{
  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t IEEE80211InformationElement.RSNCapability.groupManagementCipherSuite.getter()
{
  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t IEEE80211InformationElement.RSNCapability.groupManagementCipherSuite.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 40)  = result;
  return result;
}

void IEEE80211InformationElement.RSNCapability.hash(into:)()
{
  Hasher._combine(_:)(*(_WORD *)v0);
  Hasher._combine(_:)(byte_1003C8EEF[*(char *)(v0 + 2)]);
  uint64_t v1 = *(void *)(v0 + 8);
  Swift::UInt v2 = *(void *)(v1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    __int16 v3 = (char *)(v1 + 32);
    do
    {
      uint64_t v4 = *v3++;
      Hasher._combine(_:)(byte_1003C8EEF[v4]);
      --v2;
    }
    while (v2);
  }
  uint64_t v5 = *(void *)(v0 + 16);
  Swift::UInt v6 = *(void *)(v5 + 16);
  Hasher._combine(_:)(v6);
  if (v6)
  {
    uint64_t v7 = (char *)(v5 + 32);
    do
    {
      char v8 = *v7++;
      Hasher._combine(_:)(v8 + 1);
      --v6;
    }
    while (v6);
  }
  Hasher._combine(_:)(*(_WORD *)(v0 + 24));
  uint64_t v9 = *(void *)(v0 + 32);
  uint64_t v14 = v9;
  Swift::UInt v10 = *(void *)(v9 + 16);
  Hasher._combine(_:)(v10);
  if (v10)
  {
    swift_bridgeObjectRetain();
    char v11 = (unint64_t *)(v9 + 40);
    do
    {
      uint64_t v12 = *(v11 - 1);
      unint64_t v13 = *v11;
      sub_100013D44(v12, *v11);
      Data.hash(into:)();
      sub_10000C970(v12, v13);
      v11 += 2;
      --v10;
    }
    while (v10);
    sub_1001D7D38((uint64_t)&v14);
  }
  Hasher._combine(_:)(byte_1003C8EEF[*(char *)(v0 + 40)]);
}

Swift::Int IEEE80211InformationElement.RSNCapability.hashValue.getter()
{
  return Hasher._finalize()();
}

double sub_1001D08C0@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  double result = IEEE80211InformationElement.RSNCapability.init(from:)(a1, &v6);
  if (!v2)
  {
    long long v5 = v7[0];
    *a2  = v6;
    a2[1]  = v5;
    double result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 25)  = *(_OWORD *)((char *)v7 + 9);
  }
  return result;
}

double IEEE80211InformationElement.RSNCapability.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1001D7E88(a1, (uint64_t)&v6);
  if (!v2)
  {
    long long v5 = v7[0];
    *a2  = v6;
    a2[1]  = v5;
    double result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 25)  = *(_OWORD *)((char *)v7 + 9);
  }
  return result;
}

uint64_t sub_1001D0948(void *a1)
{
  return IEEE80211InformationElement.RSNCapability.encode(to:)(a1);
}

uint64_t IEEE80211InformationElement.RSNCapability.encode(to:)(void *a1)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  sub_100039448((uint64_t)v4, v5);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  if (v2) {
    return sub_100010754((uint64_t)v4);
  }
  sub_100039448((uint64_t)v4, v5);
  sub_1001D828C();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (*(void *)(*(void *)(v1 + 8) + 16) < 0x10000uLL)
  {
    sub_100039448((uint64_t)v4, v5);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    sub_100039448((uint64_t)v4, v5);
    sub_100010BCC(&qword_1004821F8);
    sub_1001D8448(&qword_100482200, &qword_1004821F8, (void (*)(void))sub_1001D828C);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    return sub_100010754((uint64_t)v4);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int sub_1001D0B5C()
{
  return Hasher._finalize()();
}

BOOL sub_1001D0B98(long long *a1, long long *a2)
{
  long long v2 = a1[1];
  long long v5 = *a1;
  v6[0]  = v2;
  *(_OWORD *)((char *)v6 + 9)  = *(long long *)((char *)a1 + 25);
  long long v3 = a2[1];
  long long v7 = *a2;
  v8[0]  = v3;
  *(_OWORD *)((char *)v8 + 9)  = *(long long *)((char *)a2 + 25);
  return _s7CoreP2P27IEEE80211InformationElementO13RSNCapabilityV23__derived_struct_equalsySbAE_AEtFZ_0((unsigned __int16 *)&v5, (unsigned __int16 *)&v7);
}

uint64_t sub_1001D0BE4()
{
  uint64_t result = sub_1001E1A6C(4);
  static IEEE80211InformationElement.ExtendedRSNCapability.protectedTWTOperationsSupport  = result;
  return result;
}

uint64_t *IEEE80211InformationElement.ExtendedRSNCapability.protectedTWTOperationsSupport.unsafeMutableAddressor()
{
  if (qword_10047C218 != -1) {
    swift_once();
  }
  return &static IEEE80211InformationElement.ExtendedRSNCapability.protectedTWTOperationsSupport;
}

uint64_t static IEEE80211InformationElement.ExtendedRSNCapability.protectedTWTOperationsSupport.getter()
{
  return sub_100075A04(&qword_10047C218);
}

uint64_t sub_1001D0C78()
{
  uint64_t result = sub_1001E1A6C(5);
  static IEEE80211InformationElement.ExtendedRSNCapability.saeHashToElement  = result;
  return result;
}

uint64_t *IEEE80211InformationElement.ExtendedRSNCapability.saeHashToElement.unsafeMutableAddressor()
{
  if (qword_10047C220 != -1) {
    swift_once();
  }
  return &static IEEE80211InformationElement.ExtendedRSNCapability.saeHashToElement;
}

uint64_t static IEEE80211InformationElement.ExtendedRSNCapability.saeHashToElement.getter()
{
  return sub_100075A04(&qword_10047C220);
}

uint64_t sub_1001D0D0C()
{
  uint64_t result = sub_1001E1A6C(8);
  static IEEE80211InformationElement.ExtendedRSNCapability.secureLTFSupported  = result;
  return result;
}

uint64_t *IEEE80211InformationElement.ExtendedRSNCapability.secureLTFSupported.unsafeMutableAddressor()
{
  if (qword_10047C228 != -1) {
    swift_once();
  }
  return &static IEEE80211InformationElement.ExtendedRSNCapability.secureLTFSupported;
}

uint64_t static IEEE80211InformationElement.ExtendedRSNCapability.secureLTFSupported.getter()
{
  return sub_100075A04(&qword_10047C228);
}

uint64_t sub_1001D0DA0()
{
  uint64_t result = sub_1001E1A6C(9);
  static IEEE80211InformationElement.ExtendedRSNCapability.secureRTTSupported  = result;
  return result;
}

uint64_t *IEEE80211InformationElement.ExtendedRSNCapability.secureRTTSupported.unsafeMutableAddressor()
{
  if (qword_10047C230 != -1) {
    swift_once();
  }
  return &static IEEE80211InformationElement.ExtendedRSNCapability.secureRTTSupported;
}

uint64_t static IEEE80211InformationElement.ExtendedRSNCapability.secureRTTSupported.getter()
{
  return sub_100075A04(&qword_10047C230);
}

uint64_t sub_1001D0E34()
{
  uint64_t result = sub_1001E1A6C(10);
  static IEEE80211InformationElement.ExtendedRSNCapability.urnmMFPR  = result;
  return result;
}

uint64_t *IEEE80211InformationElement.ExtendedRSNCapability.urnmMFPR.unsafeMutableAddressor()
{
  if (qword_10047C238 != -1) {
    swift_once();
  }
  return &static IEEE80211InformationElement.ExtendedRSNCapability.urnmMFPR;
}

uint64_t static IEEE80211InformationElement.ExtendedRSNCapability.urnmMFPR.getter()
{
  return sub_100075A04(&qword_10047C238);
}

uint64_t sub_1001D0EC8()
{
  uint64_t result = sub_1001E1A6C(11);
  static IEEE80211InformationElement.ExtendedRSNCapability.protectedAnnounceSupport  = result;
  return result;
}

uint64_t *IEEE80211InformationElement.ExtendedRSNCapability.protectedAnnounceSupport.unsafeMutableAddressor()
{
  if (qword_10047C240 != -1) {
    swift_once();
  }
  return &static IEEE80211InformationElement.ExtendedRSNCapability.protectedAnnounceSupport;
}

uint64_t static IEEE80211InformationElement.ExtendedRSNCapability.protectedAnnounceSupport.getter()
{
  return sub_100075A04(&qword_10047C240);
}

void *IEEE80211InformationElement.ExtendedRSNCapability.init(from:)(void *a1)
{
  return sub_1001D7D64(a1);
}

uint64_t sub_1001D0F74(uint64_t a1)
{
  unint64_t v2 = sub_1001D82E0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001D0FB0(uint64_t a1)
{
  unint64_t v2 = sub_1001D82E0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211InformationElement.ExtendedRSNCapability.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100010BCC(&qword_100482208);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  long long v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_1001D82E0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1]  = a2;
  sub_100010BCC(&qword_10047E7D0);
  sub_1001D8334();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void *sub_1001D113C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = IEEE80211InformationElement.ExtendedRSNCapability.init(from:)(a1);
  if (!v2) {
    *a2  = result;
  }
  return result;
}

uint64_t sub_1001D1168(void *a1)
{
  return IEEE80211InformationElement.ExtendedRSNCapability.encode(to:)(a1, *v1);
}

uint64_t sub_1001D1184()
{
  return sub_1001E1514(0, *v0);
}

void sub_1001D1190()
{
  uint64_t v1 = *v0;
  Swift::UInt v2 = *(void *)(*v0 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    long long v3 = (Swift::UInt8 *)(v1 + 32);
    do
    {
      Swift::UInt8 v4 = *v3++;
      Hasher._combine(_:)(v4);
      --v2;
    }
    while (v2);
  }
}

uint64_t sub_1001D11E4(uint64_t a1)
{
  return sub_1001E1514(a1, *v1);
}

uint64_t sub_1001D11F0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_1001D1280(a1, (void (*)(uint64_t))sub_1000AD6A4, a2);
}

uint64_t sub_1001D1208@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v6 = *v2;
  swift_bridgeObjectRetain();
  sub_1001E19A0(v4);
  uint64_t result = swift_bridgeObjectRelease();
  *a2  = v6;
  return result;
}

uint64_t sub_1001D1268@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_1001D1280(a1, (void (*)(uint64_t))sub_1001E1A54, a2);
}

uint64_t sub_1001D1280@<X0>(uint64_t *a1@<X0>, void (*a2)(uint64_t)@<X3>, void *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v8 = *v3;
  swift_bridgeObjectRetain();
  a2(v6);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a3  = v8;
  return result;
}

BOOL sub_1001D12F8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v9 = *v2;
  swift_bridgeObjectRetain();
  sub_1001E19A0(v4);
  uint64_t v5 = v9;
  char v6 = sub_1000956AC(v9, v4);
  if ((v6 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = swift_bridgeObjectRetain();
    sub_1000AD6A4(v7);
    uint64_t v5 = v4;
  }
  *a1  = v5;
  swift_bridgeObjectRelease();
  return (v6 & 1) == 0;
}

uint64_t sub_1001D1398@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1001E188C(*a1);
  *a2  = result;
  return result;
}

uint64_t sub_1001D13C4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v8 = *v2;
  swift_bridgeObjectRetain();
  sub_1001E19A0(v4);
  uint64_t v5 = v8;
  sub_1000AD6A4(v4);
  char v6 = sub_1000956AC(v8, _swiftEmptyArrayStorage);
  uint64_t result = swift_bridgeObjectRelease();
  if (v6)
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v5 = 0;
  }
  *a2  = v5;
  return result;
}

uint64_t sub_1001D145C(uint64_t *a1)
{
  sub_1000AD6A4(*a1);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001D1498(uint64_t *a1)
{
  return sub_1001E19A0(*a1);
}

uint64_t sub_1001D14A0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *v2;
  uint64_t v7 = *v2;
  swift_bridgeObjectRetain_n();
  sub_1001E1A54(v4);
  sub_1001E19A0(v7);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2  = v5;
  return result;
}

uint64_t sub_1001D1520(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *v1;
  uint64_t v6 = *v1;
  swift_bridgeObjectRetain();
  sub_1001E19A0(v2);
  char v4 = sub_1000956AC(v6, v3);
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t sub_1001D158C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v5 = *v1;
  swift_bridgeObjectRetain();
  sub_1001E19A0(v2);
  char v3 = sub_1000956AC(v5, _swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_1001D15F0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *v1;
  uint64_t v5 = *a1;
  swift_bridgeObjectRetain();
  sub_1001E19A0(v3);
  LOBYTE(v2)  = sub_1000956AC(v5, v2);
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1001D165C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v4 = *v1;
  swift_bridgeObjectRetain();
  sub_1001E1A54(v2);
  sub_1001E19A0(v4);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001D16CC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_10022B9BC(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2  = v3;
  return result;
}

uint64_t IEEE80211InformationElement.IEEE80211CipherSuite.init(from:)(void *a1)
{
  return sub_1001D75F8(a1);
}

uint64_t IEEE80211InformationElement.IEEE80211CipherSuite.encode(to:)(void *a1)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  sub_100039448((uint64_t)v3, v4);
  sub_10019F5E8();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v1)
  {
    sub_100039448((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  }
  return sub_100010754((uint64_t)v3);
}

uint64_t IEEE80211InformationElement.IEEE80211CipherSuite.rawValue.getter(char a1)
{
  return byte_1003C8EEF[a1];
}

BOOL sub_1001D182C(char *a1, char *a2)
{
  return byte_1003C8EEF[*a1] == byte_1003C8EEF[*a2];
}

uint64_t sub_1001D1850@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = _s7CoreP2P27IEEE80211InformationElementO0C11CipherSuiteO8rawValueAESgs5UInt8V_tcfC_0(*a1);
  *a2  = result;
  return result;
}

void sub_1001D187C(unsigned char *a1@<X8>)
{
  *a1  = byte_1003C8EEF[*v1];
}

Swift::Int sub_1001D1894()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(byte_1003C8EEF[v1]);
  return Hasher._finalize()();
}

void sub_1001D18E4()
{
  Hasher._combine(_:)(byte_1003C8EEF[*v0]);
}

Swift::Int sub_1001D191C()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(byte_1003C8EEF[v1]);
  return Hasher._finalize()();
}

uint64_t sub_1001D1968@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1001D75F8(a1);
  if (!v2) {
    *a2  = result;
  }
  return result;
}

uint64_t sub_1001D1994(void *a1)
{
  return IEEE80211InformationElement.IEEE80211CipherSuite.encode(to:)(a1);
}

uint64_t sub_1001D19B0()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001D1A10()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1001D1A60@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  char v3 = sub_1001DB618(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2  = v3;
  return result;
}

uint64_t sub_1001D1AA0()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001D1B00()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1001D1B50()
{
  if (*v0) {
    return 0x65696B6F6F63;
  }
  else {
    return 0x6B636162656D6F63;
  }
}

uint64_t sub_1001D1B94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001DBC40(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001D1BBC(uint64_t a1)
{
  unint64_t v2 = sub_1001D83A0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001D1BF8(uint64_t a1)
{
  unint64_t v2 = sub_1001D83A0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = a4;
  uint64_t v7 = sub_100010BCC(&qword_100482218);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  Swift::UInt v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_1001D83A0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v14)  = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v4)
  {
    uint64_t v14 = a3;
    uint64_t v15 = v13;
    char v16 = 1;
    sub_1000742DC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1001D1DBC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1001D7338(a1);
  if (!v2)
  {
    *(_WORD *)a2  = result;
    *(void *)(a2 + 8)  = v5;
    *(void *)(a2 + 16)  = v6;
  }
  return result;
}

uint64_t IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback.init(from:)(void *a1)
{
  return sub_1001D7338(a1);
}

uint64_t sub_1001D1E10(void *a1)
{
  return IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback.encode(to:)(a1, *v1, *((void *)v1 + 1), *((void *)v1 + 2));
}

uint64_t IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.comeback.getter()
{
  uint64_t v1 = *(void *)v0;
  sub_10006E968(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
  return v1;
}

uint64_t IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.comeback.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_10006E0D8(*(void *)v3, *(void *)(v3 + 8), *(void *)(v3 + 16));
  *(void *)uint64_t v3 = a1;
  *(void *)(v3 + 8)  = a2;
  *(void *)(v3 + 16)  = a3;
  return result;
}

uint64_t IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.finiteCylicGroupID.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 24)  = result & 1;
  return result;
}

uint64_t IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.ephemeralPublicKey.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  sub_100038004(v1, *(void *)(v0 + 40));
  return v1;
}

uint64_t IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.ephemeralPublicKey.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10000C95C(*(void *)(v2 + 32), *(void *)(v2 + 40));
  *(void *)(v2 + 32)  = a1;
  *(void *)(v2 + 40)  = a2;
  return result;
}

void IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.hash(into:)()
{
  unint64_t v1 = v0[2];
  if (v1 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v3 = *v0;
    uint64_t v2 = v0[1];
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
    sub_100013D44(v2, v1);
    Data.hash(into:)();
    sub_10006E0D8(v3, v2, v1);
  }
  sub_10006EC68((uint64_t)(v0 + 3), (uint64_t)&v6, &qword_1004814F8);
  sub_10006EC68((uint64_t)&v6, (uint64_t)&v7, &qword_1004814F8);
  if (v7 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(0x13u);
  }
  unint64_t v4 = v0[5];
  if (v4 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v5 = v0[4];
    Hasher._combine(_:)(1u);
    sub_100013D44(v5, v4);
    Data.hash(into:)();
    sub_10000C95C(v5, v4);
  }
}

Swift::Int IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_1001D20AC()
{
  return Hasher._finalize()();
}

void sub_1001D2100()
{
}

Swift::Int sub_1001D213C()
{
  return Hasher._finalize()();
}

double sub_1001D218C@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  double result = IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.init(from:)(a1, v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2  = v6[0];
    a2[1]  = v5;
    double result = *(double *)&v7;
    a2[2]  = v7;
  }
  return result;
}

double IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1001D7768(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2  = v6[0];
    a2[1]  = v5;
    double result = *(double *)&v7;
    a2[2]  = v7;
  }
  return result;
}

uint64_t sub_1001D2214(void *a1)
{
  return IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.encode(to:)(a1);
}

uint64_t IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.encode(to:)(void *a1)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  sub_10006EC68(v1, (uint64_t)v10, &qword_100482228);
  sub_10006EC68((uint64_t)v10, (uint64_t)v11, &qword_100482228);
  char v3 = v12 >> 60 != 15;
  sub_10006EC68(v1 + 24, (uint64_t)&v15, &qword_1004814F8);
  sub_10006EC68((uint64_t)&v15, (uint64_t)&v16, &qword_1004814F8);
  if ((v16 & 1) == 0)
  {
    sub_10006EC68(v1 + 32, (uint64_t)v9, &qword_100482250);
    sub_10006EC68((uint64_t)v9, (uint64_t)v13, &qword_100482250);
    if (v14 >> 60 != 15) {
      v3 |= 2u;
    }
  }
  v5[0]  = v3;
  sub_100039448((uint64_t)v6, v7);
  sub_1001D83F4();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v2)
  {
    sub_10006EC68((uint64_t)v10, (uint64_t)v5, &qword_100482228);
    sub_100039448((uint64_t)v6, v7);
    sub_100010BCC(&qword_100482228);
    sub_1001D8448(&qword_100482238, &qword_100482228, (void (*)(void))sub_1001D84B4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    sub_10006EC68((uint64_t)&v15, (uint64_t)v5, &qword_1004814F8);
    sub_100039448((uint64_t)v6, v7);
    sub_100010BCC(&qword_1004814F8);
    sub_1001D8448(&qword_100482248, &qword_1004814F8, (void (*)(void))sub_10019E0BC);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    sub_10006EC68(v1 + 32, (uint64_t)v8, &qword_100482250);
    sub_10006EC68((uint64_t)v8, (uint64_t)v5, &qword_100482250);
    sub_100039448((uint64_t)v6, v7);
    sub_100010BCC(&qword_100482250);
    sub_1001D8448(&qword_100482258, &qword_100482250, (void (*)(void))sub_1000742DC);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return sub_100010754((uint64_t)v6);
}

BOOL sub_1001D2578(_OWORD *a1, long long *a2)
{
  long long v2 = a1[1];
  v7[0]  = *a1;
  v7[1]  = v2;
  long long v3 = *a2;
  long long v4 = a2[1];
  v7[2]  = a1[2];
  v8[0]  = v3;
  long long v5 = a2[2];
  v8[1]  = v4;
  v8[2]  = v5;
  return _s7CoreP2P27IEEE80211InformationElementO43PreAssociationSecurityNegotiationParametersV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t *)v7, (uint64_t *)v8);
}

uint64_t IEEE80211InformationElement.AuthenticationKeyManagementSuite.init(from:)(void *a1)
{
  return sub_1001D7488(a1);
}

uint64_t IEEE80211InformationElement.AuthenticationKeyManagementSuite.encode(to:)(void *a1)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  sub_100039448((uint64_t)v2, v3);
  sub_10019F5E8();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  return sub_100010754((uint64_t)v2);
}

uint64_t sub_1001D2684@<X0>(char *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = _s7CoreP2P27IEEE80211InformationElementO32AuthenticationKeyManagementSuiteO8rawValueAESgs5UInt8V_tcfC_0(*a1);
  *a2  = result;
  return result;
}

uint64_t sub_1001D26B0@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1001D7488(a1);
  if (!v2) {
    *a2  = result;
  }
  return result;
}

uint64_t sub_1001D26DC()
{
  return 1701080931;
}

uint64_t sub_1001D26EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 1701080931 && a2 == 0xE400000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3  = v7 & 1;
  return result;
}

uint64_t sub_1001D2774(uint64_t a1)
{
  unint64_t v2 = sub_1001D8508();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001D27B0(uint64_t a1)
{
  unint64_t v2 = sub_1001D8508();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211InformationElement.MessageIntegrityCode.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100010BCC(&qword_100482260);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_1001D8508();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[0]  = a2;
  v11[1]  = a3;
  sub_1000742DC();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void *IEEE80211InformationElement.MessageIntegrityCode.init(from:)(void *a1)
{
  return sub_1001D71C8(a1);
}

void *sub_1001D2954@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1001D71C8(a1);
  if (!v2)
  {
    *a2  = result;
    a2[1]  = v5;
  }
  return result;
}

uint64_t sub_1001D2980(void *a1)
{
  return IEEE80211InformationElement.MessageIntegrityCode.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_1001D299C(uint64_t a1)
{
  unint64_t v2 = sub_1001D855C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001D29D8(uint64_t a1)
{
  unint64_t v2 = sub_1001D855C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211InformationElement.WrappedData.encode(to:)(void *a1)
{
  return sub_1001D2A50(a1, &qword_100482270, (void (*)(void))sub_1001D855C);
}

uint64_t sub_1001D2A50(void *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v5 = sub_100010BCC(a2);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  a3();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001D2B70(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1001D2BAC(a1, a2, a3, &qword_100482270, (void (*)(void))sub_1001D855C);
}

uint64_t sub_1001D2BAC(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(void))
{
  uint64_t v7 = sub_100010BCC(a4);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  a5();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

BOOL sub_1001D2CCC(char *a1, char *a2)
{
  return byte_1003C8EE6[*a1] == byte_1003C8EE6[*a2];
}

Swift::Int sub_1001D2CF0()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(byte_1003C8EE6[v1]);
  return Hasher._finalize()();
}

void sub_1001D2D40()
{
  Hasher._combine(_:)(byte_1003C8EE6[*v0]);
}

Swift::Int sub_1001D2D78()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(byte_1003C8EE6[v1]);
  return Hasher._finalize()();
}

uint64_t sub_1001D2DC4@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1001D6CA8(*a1);
  *a2  = result;
  return result;
}

void sub_1001D2DF0(unsigned char *a1@<X8>)
{
  *a1  = byte_1003C8EE6[*v1];
}

uint64_t sub_1001D2E08()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001D2E68()
{
  return RawRepresentable<>.encode(to:)();
}

unsigned __int8 *sub_1001D2EB8@<X0>(unsigned __int8 *result@<X0>, char *a2@<X8>)
{
  int v2 = *result;
  if (v2 == 100) {
    char v3 = 1;
  }
  else {
    char v3 = 2;
  }
  if (v2 == 8) {
    char v4 = 0;
  }
  else {
    char v4 = v3;
  }
  *a2  = v4;
  return result;
}

void sub_1001D2ED8(char *a1@<X8>)
{
  if (*v1) {
    char v2 = 100;
  }
  else {
    char v2 = 8;
  }
  *a1  = v2;
}

Swift::Int sub_1001D2EF4()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1) {
    Swift::UInt8 v2 = 100;
  }
  else {
    Swift::UInt8 v2 = 8;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_1001D2F48()
{
  if (*v0) {
    Swift::UInt8 v1 = 100;
  }
  else {
    Swift::UInt8 v1 = 8;
  }
  Hasher._combine(_:)(v1);
}

Swift::Int sub_1001D2F84()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1) {
    Swift::UInt8 v2 = 100;
  }
  else {
    Swift::UInt8 v2 = 8;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_1001D2FD4()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001D3034()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1001D3084()
{
  sub_1000A66D8(v0, (uint64_t)v6);
  int v1 = 2;
  int v2 = 1;
  switch(v9)
  {
    case 1:
      int v2 = 7;
      break;
    case 2:
      int v2 = 0;
      break;
    case 3:
      int v2 = 2;
      break;
    case 4:
      int v2 = 4;
      break;
    case 5:
      int v1 = 1;
      int v2 = 8;
      break;
    case 6:
      int v2 = 3;
      break;
    case 7:
    case 8:
      int v2 = 6;
      break;
    case 9:
      int8x16_t v3 = vorrq_s8(v7, v8);
      BOOL v4 = (*(void *)&vorr_s8(*(int8x8_t *)v3.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL)) | v6[0] | v6[1]) == 0;
      if (v4) {
        int v2 = 5;
      }
      else {
        int v2 = 8;
      }
      int v1 = 2 * v4;
      break;
    default:
      return v2 | (v1 << 8);
  }
  return v2 | (v1 << 8);
}

uint64_t IEEE80211InformationElement.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1001D85B0(a1, (uint64_t)v5);
  if (!v2) {
    return sub_1000A66D8((uint64_t)v5, a2);
  }
  return result;
}

uint64_t sub_1001D31C4@<X0>(uint64_t a1@<X0>, char a2@<W1>, _OWORD *a3@<X8>)
{
  sub_100010BCC(&qword_1004824C8);
  swift_beginAccess();
  sub_100039448(a1, *(void *)(a1 + 24));
  sub_10000F9CC(&qword_1004824D0, &qword_1004824C8);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t result = swift_endAccess();
  if (!v3)
  {
    uint64_t v8 = v19;
    unint64_t v9 = v20;
    char v10 = sub_1001D6CA8(v18);
    int v11 = 45;
    switch(v10)
    {
      case 1:
        int v11 = 48;
        goto LABEL_11;
      case 2:
        int v11 = 61;
        goto LABEL_11;
      case 3:
        int v11 = 140;
        goto LABEL_11;
      case 4:
        int v11 = 191;
        goto LABEL_11;
      case 5:
        int v11 = 192;
        goto LABEL_11;
      case 6:
        int v11 = 221;
        goto LABEL_11;
      case 7:
        int v11 = 244;
        goto LABEL_11;
      case 8:
        int v11 = 255;
        goto LABEL_11;
      case 9:
        goto LABEL_14;
      default:
LABEL_11:
        if (v11 == byte_1003C8EE6[a2])
        {
          sub_100013D44(v19, v20);
          sub_100013D44(v19, v20);
          unint64_t v12 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
          uint64_t v13 = type metadata accessor for BinaryDecoder();
          unint64_t v14 = (void *)swift_allocObject();
          v14[5]  = &_swiftEmptyDictionarySingleton;
          v14[2]  = v8;
          v14[3]  = v9;
          uint64_t v15 = 0;
          switch(v9 >> 62)
          {
            case 1uLL:
              uint64_t v15 = (int)v8;
              break;
            case 2uLL:
              uint64_t v15 = *(void *)(v8 + 16);
              break;
            default:
              break;
          }
          void v14[4] = v15;
          swift_beginAccess();
          v14[5]  = v12;
          swift_bridgeObjectRelease();
          uint64_t v21 = v13;
          uint64_t v22 = sub_1001DC044((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
          char v18 = v14;
          sub_1001D7E88(&v18, (uint64_t)&v23);
          sub_10000C970(v8, v9);
          uint64_t result = sub_10000C970(v8, v9);
          long long v17 = v24[0];
          *a3  = v23;
          a3[1]  = v17;
          *(_OWORD *)((char *)a3 + 25)  = *(_OWORD *)((char *)v24 + 9);
        }
        else
        {
LABEL_14:
          sub_10000F000();
          swift_allocError();
          *(_OWORD *)uint64_t v16 = xmmword_1003B00B0;
          *(unsigned char *)(v16 + 16)  = 2;
          swift_willThrow();
          uint64_t result = sub_10000C970(v8, v9);
        }
        break;
    }
  }
  return result;
}

void *sub_1001D34DC(uint64_t a1, void *a2)
{
  sub_100010BCC(&qword_1004824C8);
  swift_beginAccess();
  sub_100039448(a1, *(void *)(a1 + 24));
  sub_10000F9CC(&qword_1004824D0, &qword_1004824C8);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  swift_endAccess();
  if (!v2)
  {
    uint64_t v5 = v16;
    unint64_t v6 = v17;
    char v7 = sub_1001D6CA8(v15);
    int v8 = 45;
    switch(v7)
    {
      case 1:
        int v8 = 48;
        goto LABEL_11;
      case 2:
        int v8 = 61;
        goto LABEL_11;
      case 3:
        int v8 = 140;
        goto LABEL_11;
      case 4:
        int v8 = 191;
        goto LABEL_11;
      case 5:
        int v8 = 192;
        goto LABEL_11;
      case 6:
        int v8 = 221;
        goto LABEL_11;
      case 7:
        int v8 = 244;
        goto LABEL_11;
      case 8:
        int v8 = 255;
        goto LABEL_11;
      case 9:
        goto LABEL_14;
      default:
LABEL_11:
        if (v8 == byte_1003C8EE6[(char)a2])
        {
          sub_100013D44(v16, v17);
          sub_100013D44(v16, v17);
          unint64_t v9 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
          uint64_t v10 = type metadata accessor for BinaryDecoder();
          int v11 = (void *)swift_allocObject();
          void v11[5] = &_swiftEmptyDictionarySingleton;
          void v11[2] = v5;
          v11[3]  = v6;
          uint64_t v12 = 0;
          switch(v6 >> 62)
          {
            case 1uLL:
              uint64_t v12 = (int)v5;
              break;
            case 2uLL:
              uint64_t v12 = *(void *)(v5 + 16);
              break;
            default:
              break;
          }
          void v11[4] = v12;
          swift_beginAccess();
          void v11[5] = v9;
          swift_bridgeObjectRelease();
          uint64_t v18 = v10;
          uint64_t v19 = sub_1001DC044((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
          uint64_t v15 = v11;
          a2  = sub_1001D7D64(&v15);
          sub_10000C970(v5, v6);
          sub_10000C970(v5, v6);
        }
        else
        {
LABEL_14:
          sub_10000F000();
          swift_allocError();
          *(_OWORD *)uint64_t v13 = xmmword_1003B00B0;
          *(unsigned char *)(v13 + 16)  = 2;
          swift_willThrow();
          sub_10000C970(v5, v6);
        }
        break;
    }
  }
  return a2;
}

uint64_t sub_1001D37E4@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  sub_100010BCC(&qword_1004824C8);
  swift_beginAccess();
  sub_100039448(a1, *(void *)(a1 + 24));
  sub_10000F9CC(&qword_1004824D0, &qword_1004824C8);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t result = swift_endAccess();
  if (!v3)
  {
    uint64_t v9 = v26;
    unint64_t v8 = v27;
    char v10 = sub_1001D6CA8(v25);
    int v11 = 45;
    switch(v10)
    {
      case 1:
        int v11 = 48;
        goto LABEL_11;
      case 2:
        int v11 = 61;
        goto LABEL_11;
      case 3:
        int v11 = 140;
        goto LABEL_11;
      case 4:
        int v11 = 191;
        goto LABEL_11;
      case 5:
        int v11 = 192;
        goto LABEL_11;
      case 6:
        int v11 = 221;
        goto LABEL_11;
      case 7:
        int v11 = 244;
        goto LABEL_11;
      case 8:
        int v11 = 255;
        goto LABEL_11;
      case 9:
        goto LABEL_14;
      default:
LABEL_11:
        if (v11 == byte_1003C8EE6[a2])
        {
          sub_100013D44(v26, v27);
          sub_100013D44(v26, v27);
          unint64_t v12 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
          uint64_t v13 = type metadata accessor for BinaryDecoder();
          unint64_t v14 = (void *)swift_allocObject();
          v14[5]  = &_swiftEmptyDictionarySingleton;
          v14[2]  = v9;
          v14[3]  = v8;
          uint64_t v15 = 0;
          switch(v8 >> 62)
          {
            case 1uLL:
              uint64_t v15 = (int)v9;
              break;
            case 2uLL:
              uint64_t v15 = *(void *)(v9 + 16);
              break;
            default:
              break;
          }
          void v14[4] = v15;
          swift_beginAccess();
          v14[5]  = v12;
          swift_bridgeObjectRelease();
          uint64_t v28 = v13;
          uint64_t v29 = sub_1001DC044((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
          uint64_t v25 = v14;
          unint64_t v17 = sub_1001D6D74(&v25);
          __int16 v18 = v17;
          uint64_t v20 = v19;
          uint64_t v22 = v21;
          unint64_t v23 = HIDWORD(v17);
          unint64_t v24 = v17 >> 16;
          sub_10000C970(v9, v8);
          uint64_t result = sub_10000C970(v9, v8);
          *(_WORD *)a3  = v18;
          *(_WORD *)(a3 + 2)  = v24;
          *(unsigned char *)(a3 + 4)  = v23;
          *(void *)(a3 + 8)  = v20;
          *(void *)(a3 + 16)  = v22;
        }
        else
        {
LABEL_14:
          sub_10000F000();
          swift_allocError();
          *(_OWORD *)uint64_t v16 = xmmword_1003B00B0;
          *(unsigned char *)(v16 + 16)  = 2;
          swift_willThrow();
          uint64_t result = sub_10000C970(v9, v8);
        }
        break;
    }
  }
  return result;
}

uint64_t sub_1001D3B24@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  sub_100010BCC(&qword_1004824C8);
  swift_beginAccess();
  sub_100039448(a1, *(void *)(a1 + 24));
  sub_10000F9CC(&qword_1004824D0, &qword_1004824C8);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t result = swift_endAccess();
  if (!v3)
  {
    uint64_t v8 = v19;
    unint64_t v9 = v20;
    char v10 = sub_1001D6CA8(v18);
    int v11 = 45;
    switch(v10)
    {
      case 1:
        int v11 = 48;
        goto LABEL_11;
      case 2:
        int v11 = 61;
        goto LABEL_11;
      case 3:
        int v11 = 140;
        goto LABEL_11;
      case 4:
        int v11 = 191;
        goto LABEL_11;
      case 5:
        int v11 = 192;
        goto LABEL_11;
      case 6:
        int v11 = 221;
        goto LABEL_11;
      case 7:
        int v11 = 244;
        goto LABEL_11;
      case 8:
        int v11 = 255;
        goto LABEL_11;
      case 9:
        goto LABEL_14;
      default:
LABEL_11:
        if (v11 == byte_1003C8EE6[a2])
        {
          sub_100013D44(v19, v20);
          sub_100013D44(v19, v20);
          unint64_t v12 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
          uint64_t v13 = type metadata accessor for BinaryDecoder();
          unint64_t v14 = (void *)swift_allocObject();
          v14[5]  = &_swiftEmptyDictionarySingleton;
          v14[2]  = v8;
          v14[3]  = v9;
          uint64_t v15 = 0;
          switch(v9 >> 62)
          {
            case 1uLL:
              uint64_t v15 = (int)v8;
              break;
            case 2uLL:
              uint64_t v15 = *(void *)(v8 + 16);
              break;
            default:
              break;
          }
          void v14[4] = v15;
          swift_beginAccess();
          v14[5]  = v12;
          swift_bridgeObjectRelease();
          uint64_t v21 = v13;
          uint64_t v22 = sub_1001DC044((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
          __int16 v18 = v14;
          sub_1001D7A48(&v18, (uint64_t)v23);
          sub_10000C970(v8, v9);
          uint64_t result = sub_10000C970(v8, v9);
          long long v17 = v23[1];
          *(_OWORD *)a3  = v23[0];
          *(_OWORD *)(a3 + 16)  = v17;
          *(void *)(a3 + 32)  = v24;
        }
        else
        {
LABEL_14:
          sub_10000F000();
          swift_allocError();
          *(_OWORD *)uint64_t v16 = xmmword_1003B00B0;
          *(unsigned char *)(v16 + 16)  = 2;
          swift_willThrow();
          uint64_t result = sub_10000C970(v8, v9);
        }
        break;
    }
  }
  return result;
}

unint64_t sub_1001D3E40(uint64_t a1, unint64_t a2)
{
  sub_100010BCC(&qword_1004824C8);
  swift_beginAccess();
  sub_100039448(a1, *(void *)(a1 + 24));
  sub_10000F9CC(&qword_1004824D0, &qword_1004824C8);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  swift_endAccess();
  if (!v2)
  {
    uint64_t v5 = v16;
    unint64_t v6 = v17;
    char v7 = sub_1001D6CA8(v15);
    int v8 = 45;
    switch(v7)
    {
      case 1:
        int v8 = 48;
        goto LABEL_11;
      case 2:
        int v8 = 61;
        goto LABEL_11;
      case 3:
        int v8 = 140;
        goto LABEL_11;
      case 4:
        int v8 = 191;
        goto LABEL_11;
      case 5:
        int v8 = 192;
        goto LABEL_11;
      case 6:
        int v8 = 221;
        goto LABEL_11;
      case 7:
        int v8 = 244;
        goto LABEL_11;
      case 8:
        int v8 = 255;
        goto LABEL_11;
      case 9:
        goto LABEL_14;
      default:
LABEL_11:
        if (v8 == byte_1003C8EE6[(char)a2])
        {
          sub_100013D44(v16, v17);
          sub_100013D44(v16, v17);
          unint64_t v9 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
          uint64_t v10 = type metadata accessor for BinaryDecoder();
          int v11 = (void *)swift_allocObject();
          void v11[5] = &_swiftEmptyDictionarySingleton;
          void v11[2] = v5;
          v11[3]  = v6;
          uint64_t v12 = 0;
          switch(v6 >> 62)
          {
            case 1uLL:
              uint64_t v12 = (int)v5;
              break;
            case 2uLL:
              uint64_t v12 = *(void *)(v5 + 16);
              break;
            default:
              break;
          }
          void v11[4] = v12;
          swift_beginAccess();
          void v11[5] = v9;
          swift_bridgeObjectRelease();
          uint64_t v18 = v10;
          uint64_t v19 = sub_1001DC044((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
          uint64_t v15 = v11;
          a2  = sub_1001D6F94(&v15);
          sub_10000C970(v5, v6);
          sub_10000C970(v5, v6);
        }
        else
        {
LABEL_14:
          sub_10000F000();
          swift_allocError();
          *(_OWORD *)uint64_t v13 = xmmword_1003B00B0;
          *(unsigned char *)(v13 + 16)  = 2;
          swift_willThrow();
          sub_10000C970(v5, v6);
        }
        break;
    }
  }
  return a2;
}

uint64_t sub_1001D4150(uint64_t a1, char a2)
{
  sub_100010BCC(&qword_1004824C8);
  swift_beginAccess();
  sub_100039448(a1, *(void *)(a1 + 24));
  sub_10000F9CC(&qword_1004824D0, &qword_1004824C8);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t result = swift_endAccess();
  if (!v2)
  {
    char v6 = sub_1001D6CA8(v9);
    int v7 = 45;
    switch(v6)
    {
      case 1:
        int v7 = 48;
        goto LABEL_11;
      case 2:
        int v7 = 61;
        goto LABEL_11;
      case 3:
        int v7 = 140;
        goto LABEL_11;
      case 4:
        int v7 = 191;
        goto LABEL_11;
      case 5:
        int v7 = 192;
        goto LABEL_11;
      case 6:
        int v7 = 221;
        goto LABEL_11;
      case 7:
        int v7 = 244;
        goto LABEL_11;
      case 8:
        int v7 = 255;
        goto LABEL_11;
      case 9:
        goto LABEL_13;
      default:
LABEL_11:
        if (v7 == byte_1003C8EE6[a2])
        {
          sub_100013D44(v10, v11);
          sub_100013D44(v10, v11);
          sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
          swift_beginAccess();
          swift_bridgeObjectRelease();
          sub_10000C970(v10, v11);
          swift_bridgeObjectRelease();
          sub_10000C970(v10, v11);
        }
        else
        {
LABEL_13:
          sub_10000F000();
          swift_allocError();
          *(_OWORD *)uint64_t v8 = xmmword_1003B00B0;
          *(unsigned char *)(v8 + 16)  = 2;
          swift_willThrow();
        }
        uint64_t result = sub_10000C970(v10, v11);
        break;
    }
  }
  return result;
}

uint64_t sub_1001D439C@<X0>(uint64_t a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  sub_100010BCC(&qword_1004824C8);
  swift_beginAccess();
  sub_100039448(a1, *(void *)(a1 + 24));
  sub_10000F9CC(&qword_1004824D0, &qword_1004824C8);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t result = swift_endAccess();
  if (!v3)
  {
    uint64_t v9 = v21;
    unint64_t v8 = v22;
    char v10 = sub_1001D6CA8(v20);
    int v11 = 45;
    switch(v10)
    {
      case 1:
        int v11 = 48;
        goto LABEL_11;
      case 2:
        int v11 = 61;
        goto LABEL_11;
      case 3:
        int v11 = 140;
        goto LABEL_11;
      case 4:
        int v11 = 191;
        goto LABEL_11;
      case 5:
        int v11 = 192;
        goto LABEL_11;
      case 6:
        int v11 = 221;
        goto LABEL_11;
      case 7:
        int v11 = 244;
        goto LABEL_11;
      case 8:
        int v11 = 255;
        goto LABEL_11;
      case 9:
        goto LABEL_14;
      default:
LABEL_11:
        if (v11 == byte_1003C8EE6[a2])
        {
          sub_100013D44(v21, v22);
          sub_100013D44(v21, v22);
          unint64_t v12 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
          uint64_t v13 = type metadata accessor for BinaryDecoder();
          unint64_t v14 = (void *)swift_allocObject();
          v14[5]  = &_swiftEmptyDictionarySingleton;
          v14[2]  = v9;
          v14[3]  = v8;
          uint64_t v15 = 0;
          switch(v8 >> 62)
          {
            case 1uLL:
              uint64_t v15 = (int)v9;
              break;
            case 2uLL:
              uint64_t v15 = *(void *)(v9 + 16);
              break;
            default:
              break;
          }
          void v14[4] = v15;
          swift_beginAccess();
          v14[5]  = v12;
          swift_bridgeObjectRelease();
          uint64_t v23 = v13;
          uint64_t v24 = sub_1001DC044((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
          unint64_t v20 = v14;
          unint64_t v17 = sub_1001D71C8(&v20);
          uint64_t v19 = v18;
          sub_10000C970(v9, v8);
          uint64_t result = sub_10000C970(v9, v8);
          *a3  = v17;
          a3[1]  = v19;
        }
        else
        {
LABEL_14:
          sub_10000F000();
          swift_allocError();
          *(_OWORD *)uint64_t v16 = xmmword_1003B00B0;
          *(unsigned char *)(v16 + 16)  = 2;
          swift_willThrow();
          uint64_t result = sub_10000C970(v9, v8);
        }
        break;
    }
  }
  return result;
}

uint64_t IEEE80211InformationElement.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100010BCC(&qword_100482260);
  unint64_t v64 = *(void *)(v4 - 8);
  unint64_t v65 = v4;
  __chkstk_darwin();
  uint64_t v63 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100010BCC(&qword_100482270);
  uint64_t v60 = *(void *)(v6 - 8);
  uint64_t v61 = v6;
  __chkstk_darwin();
  uint64_t v59 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100010BCC(&qword_1004821E0);
  uint64_t v58 = *(void *)(v8 - 8);
  __chkstk_darwin();
  char v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100010BCC(&qword_100482208);
  uint64_t v62 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  unint64_t v14 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v15 = (ValueMetadata *)type metadata accessor for BinaryEncoder();
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16)  = xmmword_1003B2440;
  uint64_t v66 = v16 + 16;
  uint64_t v94 = v16;
  *(void *)(v16 + 32)  = v14;
  uint64_t v67 = v2;
  sub_1000A66D8(v2, (uint64_t)&v75);
  uint64_t v17 = v75;
  switch(v77)
  {
    case 1:
      uint64_t v31 = v94;
      *(void *)&long long v70 = v94;
      uint64_t v32 = v67;
      sub_1000A6734(v67, (void (*)(void, void, void, void, void, void, void))sub_10006E998);
      swift_retain();
      sub_100010BCC(&qword_1004822D0);
      sub_10000F9CC(&qword_1004822D8, &qword_1004822D0);
      KeyedEncodingContainer.init<A>(_:)();
      *(void *)&long long v70 = v17;
      sub_100010BCC(&qword_10047E7D0);
      sub_1001D8334();
      uint64_t v33 = v68;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v21 = v33;
      if (v33)
      {
        (*(void (**)(char *, uint64_t))(v62 + 8))(v13, v11);
        sub_1000A6734(v32, (void (*)(void, void, void, void, void, void, void))sub_10006E108);
        goto LABEL_44;
      }
      (*(void (**)(char *, uint64_t))(v62 + 8))(v13, v11);
      sub_1000A6734(v32, (void (*)(void, void, void, void, void, void, void))sub_10006E108);
      uint64_t v18 = v31;
      goto LABEL_35;
    case 2:
      uint64_t v24 = *((void *)&v75 + 1);
      uint64_t v25 = *(void *)&v76[0];
      uint64_t v71 = v15;
      unint64_t v72 = sub_1001DC044((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      uint64_t v18 = v94;
      *(void *)&long long v70 = v94;
      uint64_t v26 = v67;
      sub_1000A6734(v67, (void (*)(void, void, void, void, void, void, void))sub_10006E998);
      swift_retain();
      uint64_t v27 = v68;
      IEEE80211InformationElement.HighThroughputCapability.encode(to:)(&v70, v17 & 0xFFFFFFFFFFLL, v24, v25);
      uint64_t v21 = v27;
      if (!v27) {
        goto LABEL_33;
      }
      goto LABEL_11;
    case 3:
      v79[2]  = v75;
      v79[3]  = v76[0];
      uint64_t v80 = *(void *)&v76[1];
      uint64_t v71 = v15;
      unint64_t v72 = sub_1001DC044((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      uint64_t v18 = v94;
      *(void *)&long long v70 = v94;
      uint64_t v26 = v67;
      sub_1000A6734(v67, (void (*)(void, void, void, void, void, void, void))sub_10006E998);
      swift_retain();
      uint64_t v28 = v68;
      IEEE80211InformationElement.HighThroughputOperation.encode(to:)(&v70);
      uint64_t v21 = v28;
      if (!v28) {
        goto LABEL_33;
      }
LABEL_11:
      sub_100010754((uint64_t)&v70);
      goto LABEL_25;
    case 4:
      uint64_t v71 = v15;
      unint64_t v72 = sub_1001DC044((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      uint64_t v18 = v94;
      *(void *)&long long v70 = v94;
      swift_retain();
      uint64_t v22 = v68;
      IEEE80211InformationElement.VeryHighThroughputCapability.encode(to:)(&v70);
      uint64_t v21 = v22;
      if (v22) {
        goto LABEL_14;
      }
      sub_100010754((uint64_t)&v70);
      goto LABEL_35;
    case 5:
      long long v81 = v75;
      long long v82 = v76[0];
      long long v83 = v76[1];
      uint64_t v71 = &type metadata for BinaryEncoder.UnkeyedContainer;
      unint64_t v72 = sub_100088B84();
      uint64_t v18 = v94;
      *(void *)&long long v70 = v94;
      sub_10006EC68((uint64_t)&v81, (uint64_t)v85, &qword_100482228);
      sub_10006EC68((uint64_t)v85, (uint64_t)v92, &qword_100482228);
      char v34 = v93 >> 60 != 15;
      sub_10006EC68((uint64_t)&v82 + 8, (uint64_t)&v86, &qword_1004814F8);
      sub_10006EC68((uint64_t)&v86, (uint64_t)&v91, &qword_1004814F8);
      if ((v91 & 1) == 0)
      {
        sub_10006EC68((uint64_t)&v83, (uint64_t)v87, &qword_100482250);
        sub_10006EC68((uint64_t)v87, (uint64_t)v89, &qword_100482250);
        if (v90 >> 60 != 15) {
          v34 |= 2u;
        }
      }
      LOBYTE(v69[0])  = v34;
      sub_100039448((uint64_t)&v70, (uint64_t)v71);
      uint64_t v35 = v67;
      sub_1000A6734(v67, (void (*)(void, void, void, void, void, void, void))sub_10006E998);
      sub_1001D83F4();
      swift_retain();
      uint64_t v36 = v68;
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      uint64_t v21 = v36;
      if (!v36)
      {
        sub_10006EC68((uint64_t)v85, (uint64_t)v69, &qword_100482228);
        sub_100039448((uint64_t)&v70, (uint64_t)v71);
        sub_100010BCC(&qword_100482228);
        sub_1001D8448(&qword_100482238, &qword_100482228, (void (*)(void))sub_1001D84B4);
        dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
        sub_10006EC68((uint64_t)&v86, (uint64_t)v69, &qword_1004814F8);
        sub_100039448((uint64_t)&v70, (uint64_t)v71);
        sub_100010BCC(&qword_1004814F8);
        sub_1001D8448(&qword_100482248, &qword_1004814F8, (void (*)(void))sub_10019E0BC);
        dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
        sub_10006EC68((uint64_t)&v83, (uint64_t)v88, &qword_100482250);
        sub_10006EC68((uint64_t)v88, (uint64_t)v69, &qword_100482250);
        sub_100039448((uint64_t)&v70, (uint64_t)v71);
        sub_100010BCC(&qword_100482250);
        sub_1001D8448(&qword_100482258, &qword_100482250, (void (*)(void))sub_1000742DC);
        dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
        sub_100010754((uint64_t)&v70);
        uint64_t v26 = v67;
LABEL_34:
        sub_1000A6734(v26, (void (*)(void, void, void, void, void, void, void))sub_10006E108);
LABEL_35:
        __int16 v47 = sub_1001D3084();
        swift_beginAccess();
        uint64_t v48 = *(void *)(v18 + 16);
        unint64_t v49 = *(void *)(v18 + 24);
        unint64_t v50 = 0;
        switch(v49 >> 62)
        {
          case 1uLL:
            BOOL v51 = __OFSUB__(HIDWORD(v48), v48);
            int v52 = HIDWORD(v48) - v48;
            if (v51)
            {
              __break(1u);
LABEL_47:
              __break(1u);
            }
            else
            {
              unint64_t v50 = v52;
LABEL_40:
              LOBYTE(v69[0])  = v47;
              sub_100039448((uint64_t)v73, v74);
              sub_1001D8F60();
              dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
              if (v21) {
                goto LABEL_44;
              }
              if ((v50 & 0x8000000000000000) == 0 && v50 < 0x100)
              {
                sub_100039448((uint64_t)v73, v74);
                dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
                LOBYTE(v69[0])  = HIBYTE(v47);
                sub_100039448((uint64_t)v73, v74);
                sub_100010BCC(&qword_100482288);
                sub_1001D8448(&qword_100482290, &qword_100482288, (void (*)(void))sub_1001D8FB4);
                dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
                v69[0]  = *(_OWORD *)(v18 + 16);
                sub_100039448((uint64_t)v73, v74);
                sub_1000742DC();
                dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
                goto LABEL_44;
              }
            }
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            JUMPOUT(0x1001D58F8);
          case 2uLL:
            uint64_t v55 = v48 + 16;
            uint64_t v53 = *(void *)(v48 + 16);
            uint64_t v54 = *(void *)(v55 + 8);
            unint64_t v50 = v54 - v53;
            if (!__OFSUB__(v54, v53)) {
              goto LABEL_40;
            }
            goto LABEL_47;
          case 3uLL:
            goto LABEL_40;
          default:
            unint64_t v50 = BYTE6(v49);
            goto LABEL_40;
        }
      }
      sub_100010754((uint64_t)&v70);
      swift_release();
      sub_1000A6734(v35, (void (*)(void, void, void, void, void, void, void))sub_10006E108);
      break;
    case 6:
      long long v84 = v75;
      uint64_t v18 = v94;
      *(void *)&long long v70 = v94;
      uint64_t v26 = v67;
      sub_1000A6734(v67, (void (*)(void, void, void, void, void, void, void))sub_10006E998);
      swift_retain();
      sub_100010BCC(&qword_1004822A0);
      sub_10000F9CC(&qword_1004822A8, &qword_1004822A0);
      Class v37 = v63;
      KeyedEncodingContainer.init<A>(_:)();
      long long v70 = v84;
      sub_1000742DC();
      unint64_t v38 = v65;
      uint64_t v39 = v68;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v21 = v39;
      if (!v39)
      {
        (*(void (**)(char *, unint64_t))(v64 + 8))(v37, v38);
        goto LABEL_34;
      }
      (*(void (**)(char *, unint64_t))(v64 + 8))(v37, v38);
LABEL_25:
      swift_release();
      sub_1000A6734(v26, (void (*)(void, void, void, void, void, void, void))sub_10006E108);
      break;
    case 7:
      uint64_t v71 = &type metadata for BinaryEncoder.UnkeyedContainer;
      unint64_t v29 = sub_100088B84();
      unint64_t v72 = v29;
      uint64_t v18 = v94;
      *(void *)&long long v70 = v94;
      sub_100039448((uint64_t)&v70, (uint64_t)&type metadata for BinaryEncoder.UnkeyedContainer);
      swift_retain();
      uint64_t v30 = v68;
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
      uint64_t v21 = v30;
      if (v30)
      {
LABEL_14:
        sub_100010754((uint64_t)&v70);
LABEL_44:
        swift_release();
        return sub_100010754((uint64_t)v73);
      }
      sub_100039448((uint64_t)&v70, (uint64_t)v71);
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
      sub_100039448((uint64_t)&v70, (uint64_t)v71);
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
      sub_100010754((uint64_t)&v70);
      uint64_t v71 = &type metadata for BinaryEncoder.UnkeyedContainer;
      unint64_t v72 = v29;
      *(void *)&long long v70 = v18;
      sub_100039448((uint64_t)&v70, (uint64_t)&type metadata for BinaryEncoder.UnkeyedContainer);
      uint64_t v26 = v67;
      sub_1000A6734(v67, (void (*)(void, void, void, void, void, void, void))sub_10006E998);
      swift_retain();
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
      *(void *)&v69[0]  = v17;
      sub_100039448((uint64_t)&v70, (uint64_t)v71);
      sub_100010BCC(&qword_10047DCD8);
      sub_1001D9008();
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
LABEL_33:
      sub_100010754((uint64_t)&v70);
      goto LABEL_34;
    case 8:
      unint64_t v65 = (unint64_t)v75 >> 16;
      uint64_t v41 = *((void *)&v75 + 1);
      unint64_t v40 = *(void *)&v76[0];
      uint64_t v71 = &type metadata for BinaryEncoder.UnkeyedContainer;
      unint64_t v72 = sub_100088B84();
      *(void *)&long long v70 = v94;
      sub_100039448((uint64_t)&v70, (uint64_t)&type metadata for BinaryEncoder.UnkeyedContainer);
      sub_1000A6734(v67, (void (*)(void, void, void, void, void, void, void))sub_10006E998);
      swift_retain();
      uint64_t v42 = v68;
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
      uint64_t v21 = v42;
      if (v42)
      {
        uint64_t v43 = v67;
        sub_100010754((uint64_t)&v70);
        sub_1000A6734(v43, (void (*)(void, void, void, void, void, void, void))sub_10006E108);
        goto LABEL_44;
      }
      unint64_t v64 = v40;
      uint64_t v68 = v41;
      sub_100039448((uint64_t)&v70, (uint64_t)v71);
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
      sub_100039448((uint64_t)&v70, (uint64_t)v71);
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
      uint64_t v18 = v94;
      sub_100010754((uint64_t)&v70);
      swift_beginAccess();
      uint64_t v44 = v68;
      unint64_t v45 = v64;
      sub_100013D44(v68, v64);
      sub_100125FAC(v44, v45);
      swift_endAccess();
      uint64_t v46 = v67;
      sub_1000A6734(v67, (void (*)(void, void, void, void, void, void, void))sub_10006E108);
      sub_1000A6734(v46, (void (*)(void, void, void, void, void, void, void))sub_10006E108);
      goto LABEL_35;
    case 9:
      uint64_t v18 = v94;
      *(void *)&long long v70 = v94;
      if (*(void *)&v76[1] | *((void *)&v76[1] + 1) | (unint64_t)v75 | *((void *)&v76[0] + 1) | *(void *)&v76[0] | *((void *)&v75 + 1))
      {
        swift_retain();
        sub_100010BCC(&qword_1004822B0);
        sub_10000F9CC(&qword_1004822B8, &qword_1004822B0);
        uint64_t v23 = v59;
        KeyedEncodingContainer.init<A>(_:)();
        (*(void (**)(char *, uint64_t))(v60 + 8))(v23, v61);
      }
      else
      {
        swift_retain();
        sub_100010BCC(&qword_1004822C0);
        sub_10000F9CC(&qword_1004822C8, &qword_1004822C0);
        KeyedEncodingContainer.init<A>(_:)();
        (*(void (**)(char *, uint64_t))(v58 + 8))(v10, v8);
      }
      uint64_t v21 = v68;
      goto LABEL_35;
    default:
      long long v78 = v75;
      v79[0]  = v76[0];
      *(_OWORD *)((char *)v79 + 9)  = *(_OWORD *)((char *)v76 + 9);
      uint64_t v71 = v15;
      unint64_t v72 = sub_1001DC044((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      uint64_t v18 = v94;
      *(void *)&long long v70 = v94;
      uint64_t v19 = v67;
      sub_1000A6734(v67, (void (*)(void, void, void, void, void, void, void))sub_10006E998);
      swift_retain();
      uint64_t v20 = v68;
      IEEE80211InformationElement.RSNCapability.encode(to:)(&v70);
      uint64_t v21 = v20;
      sub_100010754((uint64_t)&v70);
      sub_1000A6734(v19, (void (*)(void, void, void, void, void, void, void))sub_10006E108);
      if (!v20) {
        goto LABEL_35;
      }
      goto LABEL_44;
  }
  return sub_100010754((uint64_t)v73);
}

void IEEE80211InformationElement.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_1000A66D8(v1, (uint64_t)v33);
  uint64_t v4 = v33[0];
  unint64_t v5 = v33[1];
  unint64_t v6 = v33[2];
  uint64_t v7 = v33[4];
  unint64_t v8 = v33[5];
  sub_1000A66D8(v1, (uint64_t)&v34);
  uint64_t v9 = v34;
  switch(v36)
  {
    case 1:
      Hasher._combine(_:)(1uLL);
      Swift::UInt v10 = *(void *)(v9 + 16);
      Hasher._combine(_:)(v10);
      if (v10)
      {
        uint64_t v11 = (Swift::UInt8 *)(v9 + 32);
        do
        {
          Swift::UInt8 v12 = *v11++;
          Hasher._combine(_:)(v12);
          --v10;
        }
        while (v10);
      }
      return;
    case 2:
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(v9);
      Hasher._combine(_:)(WORD1(v9));
      Hasher._combine(_:)(BYTE4(v9));
      sub_100013D44(v5, v6);
      goto LABEL_18;
    case 3:
      uint64_t v13 = *((void *)&v34 + 1);
      long long v15 = *(_OWORD *)v35;
      unint64_t v14 = *(void *)&v35[16];
      Hasher._combine(_:)(3uLL);
      Hasher._combine(_:)(v9);
      sub_1000A6734(v1, (void (*)(void, void, void, void, void, void, void))sub_10006E998);
      sub_100013D44(v13, v15);
      Data.hash(into:)();
      sub_10000C970(v13, v15);
      sub_100013D44(*((uint64_t *)&v15 + 1), v14);
      Data.hash(into:)();
      sub_10000C970(*((uint64_t *)&v15 + 1), v14);
      goto LABEL_19;
    case 4:
      Swift::UInt16 v16 = WORD4(v34);
      Swift::UInt16 v17 = WORD5(v34);
      Hasher._combine(_:)(4uLL);
      Hasher._combine(_:)(v9);
      Hasher._combine(_:)(WORD2(v9));
      Hasher._combine(_:)(HIWORD(v9));
      Hasher._combine(_:)(v16);
      Hasher._combine(_:)(v17);
      return;
    case 5:
      long long v37 = v34;
      *(_OWORD *)unint64_t v38 = *(_OWORD *)v35;
      *(_OWORD *)&v38[16]  = *(_OWORD *)&v35[16];
      Hasher._combine(_:)(7uLL);
      unint64_t v18 = *(void *)v38;
      if (*(void *)v38 >> 60 == 15)
      {
        Hasher._combine(_:)(0);
        sub_10006E968(v4, v5, v6);
        sub_100038004(v7, v8);
      }
      else
      {
        long long v30 = v37;
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v30);
        sub_1000A6734(v1, (void (*)(void, void, void, void, void, void, void))sub_10006E998);
        sub_10006E968(v30, *((uint64_t *)&v30 + 1), v18);
        Data.hash(into:)();
        sub_10006E0D8(v30, *((uint64_t *)&v30 + 1), v18);
      }
      sub_10006EC68((uint64_t)&v38[8], (uint64_t)&v39, &qword_1004814F8);
      sub_10006EC68((uint64_t)&v39, (uint64_t)v40, &qword_1004814F8);
      if (v40[0] == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(0x13u);
      }
      unint64_t v31 = *(void *)&v38[24];
      if (*(void *)&v38[24] >> 60 == 15)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        uint64_t v32 = *(void *)&v38[16];
        Hasher._combine(_:)(1u);
        sub_100013D44(v32, v31);
        Data.hash(into:)();
        sub_10000C95C(v32, v31);
      }
      goto LABEL_19;
    case 6:
      Hasher._combine(_:)(8uLL);
      sub_100013D44(v4, v5);
      goto LABEL_18;
    case 7:
      Hasher._combine(_:)(9uLL);
      Swift::UInt v19 = *(void *)(v9 + 16);
      Hasher._combine(_:)(v19);
      if (!v19) {
        return;
      }
      uint64_t v20 = *(void *)(type metadata accessor for NANAttribute(0) - 8);
      uint64_t v21 = v9 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
      uint64_t v22 = *(void *)(v20 + 72);
      swift_bridgeObjectRetain();
      do
      {
        NANAttribute.hash(into:)(a1);
        v21 += v22;
        --v19;
      }
      while (v19);
      goto LABEL_19;
    case 8:
      unint64_t v23 = (unint64_t)v34 >> 16;
      unint64_t v24 = (unint64_t)v34 >> 8;
      Hasher._combine(_:)(0xAuLL);
      sub_100010BCC(&qword_10047BEF8);
      uint64_t v25 = swift_allocObject();
      *(_OWORD *)(v25 + 16)  = xmmword_1003B2760;
      *(unsigned char *)(v25 + 32)  = v9;
      *(unsigned char *)(v25 + 33)  = v24;
      *(unsigned char *)(v25 + 34)  = v23;
      sub_1000A6734(v2, (void (*)(void, void, void, void, void, void, void))sub_10006E998);
      uint64_t v26 = sub_1001265EC(v25);
      unint64_t v28 = v27;
      swift_bridgeObjectRelease();
      Data.hash(into:)();
      sub_10000C970(v26, v28);
LABEL_18:
      Data.hash(into:)();
LABEL_19:
      sub_1000A6734(v2, (void (*)(void, void, void, void, void, void, void))sub_10006E108);
      break;
    case 9:
      if (*(void *)&v35[16] | *(void *)&v35[24] | (unint64_t)v34 | *(void *)&v35[8] | *(void *)v35 | *((void *)&v34 + 1)) {
        Swift::UInt v29 = 6;
      }
      else {
        Swift::UInt v29 = 5;
      }
      Hasher._combine(_:)(v29);
      break;
    default:
      long long v37 = v34;
      *(_OWORD *)unint64_t v38 = *(_OWORD *)v35;
      *(_OWORD *)&v38[9]  = *(_OWORD *)&v35[9];
      Hasher._combine(_:)(0);
      IEEE80211InformationElement.RSNCapability.hash(into:)();
      break;
  }
}

Swift::Int IEEE80211InformationElement.hashValue.getter()
{
  Hasher.init(_seed:)();
  IEEE80211InformationElement.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_1001D5EF4()
{
  sub_1000A66D8(v0, (uint64_t)v3);
  Hasher.init(_seed:)();
  IEEE80211InformationElement.hash(into:)((uint64_t)&v2);
  return Hasher._finalize()();
}

void sub_1001D5F44(uint64_t a1)
{
  sub_1000A66D8(v1, (uint64_t)v3);
  IEEE80211InformationElement.hash(into:)(a1);
}

Swift::Int sub_1001D5F84()
{
  sub_1000A66D8(v0, (uint64_t)v3);
  Hasher.init(_seed:)();
  IEEE80211InformationElement.hash(into:)((uint64_t)&v2);
  return Hasher._finalize()();
}

uint64_t sub_1001D5FD8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IEEE80211InformationElement.init(from:)(a1, (uint64_t)v5);
  if (!v2) {
    return sub_1000A66D8((uint64_t)v5, a2);
  }
  return result;
}

uint64_t sub_1001D6020(void *a1)
{
  sub_1000A66D8(v1, (uint64_t)v4);
  return IEEE80211InformationElement.encode(to:)(a1);
}

uint64_t sub_1001D6070(uint64_t a1, uint64_t a2)
{
  sub_1000A66D8(a1, (uint64_t)v4);
  sub_1000A66D8(a2, (uint64_t)v5);
  return static IEEE80211InformationElement.__derived_enum_equals(_:_:)((uint64_t)v4, (uint64_t)v5) & 1;
}

BOOL _s7CoreP2P27IEEE80211InformationElementO43PreAssociationSecurityNegotiationParametersV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[2];
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  unint64_t v9 = a2[2];
  if (v6 >> 60 != 15)
  {
    if (v9 >> 60 != 15)
    {
      if ((unsigned __int16)*a1 != (unsigned __int16)v7) {
        return 0;
      }
      sub_10006E968(*a1, v5, v6);
      sub_10006E968(v7, v8, v9);
      char v10 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v5, v6, v8, v9);
      sub_10006E0D8(v7, v8, v9);
      sub_10006E0D8(v4, v5, v6);
      if ((v10 & 1) == 0) {
        return 0;
      }
      goto LABEL_3;
    }
LABEL_7:
    sub_10006E968(*a1, v5, v6);
    sub_10006E968(v7, v8, v9);
    sub_10006E0D8(v4, v5, v6);
    sub_10006E0D8(v7, v8, v9);
    return 0;
  }
  if (v9 >> 60 != 15) {
    goto LABEL_7;
  }
LABEL_3:
  sub_10006EC68((uint64_t)(a1 + 3), (uint64_t)&v18, &qword_1004814F8);
  sub_10006EC68((uint64_t)(a2 + 3), (uint64_t)&v17, &qword_1004814F8);
  sub_10006EC68((uint64_t)&v18, (uint64_t)&v19, &qword_1004814F8);
  if (v19)
  {
    sub_10006EC68((uint64_t)&v17, (uint64_t)&v21, &qword_1004814F8);
    if (v21 != 1) {
      return 0;
    }
  }
  else
  {
    sub_10006EC68((uint64_t)&v17, (uint64_t)&v20, &qword_1004814F8);
    if (v20) {
      return 0;
    }
  }
  uint64_t v12 = a1[4];
  unint64_t v11 = a1[5];
  uint64_t v14 = a2[4];
  unint64_t v13 = a2[5];
  if (v11 >> 60 == 15)
  {
    if (v13 >> 60 == 15) {
      return 1;
    }
    goto LABEL_16;
  }
  if (v13 >> 60 == 15)
  {
LABEL_16:
    sub_100038004(v12, v11);
    sub_100038004(v14, v13);
    sub_10000C95C(v12, v11);
    sub_10000C95C(v14, v13);
    return 0;
  }
  sub_100038004(v12, v11);
  sub_100038004(v14, v13);
  char v15 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v12, v11, v14, v13);
  sub_10000C95C(v14, v13);
  sub_10000C95C(v12, v11);
  return (v15 & 1) != 0;
}

BOOL _s7CoreP2P27IEEE80211InformationElementO13RSNCapabilityV23__derived_struct_equalsySbAE_AEtFZ_0(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2
      && byte_1003C8EEF[*((char *)a1 + 2)] == byte_1003C8EEF[*((char *)a2 + 2)]
      && sub_1000997E0(*((void *)a1 + 1), *((void *)a2 + 1))
      && (sub_1000956AC(*((void *)a1 + 2), *((void *)a2 + 2)) & 1) != 0
      && a1[12] == a2[12]
      && (_s7CoreP2P12NANAttributeO13ServiceIDListV23__derived_struct_equalsySbAE_AEtFZ_0(*((void *)a1 + 4), *((void *)a2 + 4)) & 1) != 0&& byte_1003C8EEF[*((char *)a1 + 40)] == byte_1003C8EEF[*((char *)a2 + 40)];
}

uint64_t _s7CoreP2P27IEEE80211InformationElementO21__derived_enum_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  sub_1000A66D8(a1, (uint64_t)&v70);
  unint64_t v4 = v70;
  unint64_t v5 = (unint64_t)v70 >> 16;
  int v6 = (unsigned __int16)v70;
  switch(v73)
  {
    case 1:
      sub_1000A66D8(a2, (uint64_t)&v66);
      if (v69 != 1) {
        goto LABEL_77;
      }
      char v16 = sub_1000956AC(v4, v66);
      return v16 & 1;
    case 2:
      uint64_t v17 = *((void *)&v70 + 1);
      unint64_t v18 = v71;
      sub_1000A66D8(a2, (uint64_t)&v66);
      if (v69 != 2 || (unsigned __int16)v66 != v6 || WORD1(v66) != (unsigned __int16)v5 || BYTE4(v66) != BYTE4(v4)) {
        goto LABEL_77;
      }
      uint64_t v20 = *((void *)&v66 + 1);
      uint64_t v19 = v67.i64[0];
      sub_1000A6734(a1, (void (*)(void, void, void, void, void, void, void))sub_10006E998);
      sub_1000A6734(a2, (void (*)(void, void, void, void, void, void, void))sub_10006E998);
      uint64_t v21 = v17;
      unint64_t v22 = v18;
      uint64_t v23 = v20;
      unint64_t v24 = v19;
      goto LABEL_22;
    case 3:
      uint64_t v25 = *((void *)&v70 + 1);
      long long v27 = v71;
      unint64_t v26 = v72;
      sub_1000A66D8(a2, (uint64_t)&v66);
      if (v69 != 3 || v66 != v4) {
        goto LABEL_77;
      }
      uint64_t v28 = v68.i64[0];
      uint64_t v63 = v67.i64[1];
      uint64_t v30 = *((void *)&v66 + 1);
      unint64_t v29 = v67.i64[0];
      sub_1000A6734(a1, (void (*)(void, void, void, void, void, void, void))sub_10006E998);
      sub_1000A6734(a2, (void (*)(void, void, void, void, void, void, void))sub_10006E998);
      if ((_s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v25, v27, v30, v29) & 1) == 0) {
        goto LABEL_76;
      }
      uint64_t v21 = *((void *)&v27 + 1);
      unint64_t v22 = v26;
      uint64_t v23 = v63;
      unint64_t v24 = v28;
LABEL_22:
      char v31 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v21, v22, v23, v24);
      sub_1000A6734(a2, (void (*)(void, void, void, void, void, void, void))sub_10006E108);
      sub_1000A6734(a1, (void (*)(void, void, void, void, void, void, void))sub_10006E108);
      if (v31) {
        goto LABEL_23;
      }
      goto LABEL_77;
    case 4:
      int v32 = WORD4(v70);
      int v33 = WORD5(v70);
      sub_1000A66D8(a2, (uint64_t)&v66);
      if (v69 != 4) {
        goto LABEL_77;
      }
      char v16 = v66 == v4
         && WORD2(v66) == WORD2(v4)
         && WORD3(v66) == HIWORD(v4)
         && v32 == WORD4(v66)
         && v33 == WORD5(v66);
      return v16 & 1;
    case 5:
      long long v74 = v70;
      long long v75 = v71;
      long long v76 = v72;
      sub_1000A66D8(a2, (uint64_t)&v66);
      if (v69 != 5) {
        goto LABEL_77;
      }
      *((void *)&v64 + 1)  = v67.i64[1];
      int8x16_t v65 = v68;
      long long v38 = v74;
      unint64_t v39 = v75;
      long long v40 = v66;
      unint64_t v41 = v67.i64[0];
      if ((unint64_t)v75 >> 60 == 15)
      {
        if ((unint64_t)v67.i64[0] >> 60 == 15)
        {
          sub_1000A6734(a1, (void (*)(void, void, void, void, void, void, void))sub_10006E998);
          sub_1000A6734(a2, (void (*)(void, void, void, void, void, void, void))sub_10006E998);
          goto LABEL_44;
        }
LABEL_66:
        sub_10006E968(v74, *((uint64_t *)&v74 + 1), v75);
        sub_10006E968(v40, *((uint64_t *)&v40 + 1), v41);
        sub_10006E0D8(v38, *((uint64_t *)&v38 + 1), v39);
        sub_10006E0D8(v40, *((uint64_t *)&v40 + 1), v41);
        goto LABEL_77;
      }
      if ((unint64_t)v67.i64[0] >> 60 == 15) {
        goto LABEL_66;
      }
      if ((unsigned __int16)v74 != (unsigned __int16)v66)
      {
LABEL_77:
        char v16 = 0;
        return v16 & 1;
      }
      sub_1000A6734(a1, (void (*)(void, void, void, void, void, void, void))sub_10006E998);
      sub_1000A6734(a2, (void (*)(void, void, void, void, void, void, void))sub_10006E998);
      sub_10006E968(v38, *((uint64_t *)&v38 + 1), v39);
      sub_10006E968(v40, *((uint64_t *)&v40 + 1), v41);
      char v58 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*((uint64_t *)&v38 + 1), v39, *((uint64_t *)&v40 + 1), v41);
      sub_10006E0D8(v40, *((uint64_t *)&v40 + 1), v41);
      sub_10006E0D8(v38, *((uint64_t *)&v38 + 1), v39);
      if ((v58 & 1) == 0) {
        goto LABEL_76;
      }
LABEL_44:
      sub_10006EC68((uint64_t)&v75 + 8, (uint64_t)&v77, &qword_1004814F8);
      sub_10006EC68((uint64_t)&v64 + 8, (uint64_t)&v78, &qword_1004814F8);
      sub_10006EC68((uint64_t)&v77, (uint64_t)v80, &qword_1004814F8);
      if ((v80[0] & 1) == 0)
      {
        sub_10006EC68((uint64_t)&v78, (uint64_t)&v79, &qword_1004814F8);
        if ((v79 & 1) == 0) {
          goto LABEL_71;
        }
LABEL_76:
        sub_1000A6734(a2, (void (*)(void, void, void, void, void, void, void))sub_10006E108);
        sub_1000A6734(a1, (void (*)(void, void, void, void, void, void, void))sub_10006E108);
        goto LABEL_77;
      }
      sub_10006EC68((uint64_t)&v78, (uint64_t)&v79, &qword_1004814F8);
      if ((v79 & 1) == 0) {
        goto LABEL_76;
      }
LABEL_71:
      long long v59 = v76;
      int8x16_t v60 = v65;
      if (*((void *)&v76 + 1) >> 60 != 15)
      {
        if ((unint64_t)v65.i64[1] >> 60 != 15)
        {
          sub_100038004(v76, *((unint64_t *)&v76 + 1));
          sub_100038004(v60.i64[0], v60.u64[1]);
          char v62 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v59, *((unint64_t *)&v59 + 1), v60.i64[0], v60.u64[1]);
          sub_10000C95C(v60.i64[0], v60.u64[1]);
          sub_10000C95C(v59, *((unint64_t *)&v59 + 1));
          sub_1000A6734(a2, (void (*)(void, void, void, void, void, void, void))sub_10006E108);
          sub_1000A6734(a1, (void (*)(void, void, void, void, void, void, void))sub_10006E108);
          if (v62)
          {
LABEL_23:
            char v16 = 1;
            return v16 & 1;
          }
          goto LABEL_77;
        }
        goto LABEL_75;
      }
      if ((unint64_t)v65.i64[1] >> 60 != 15)
      {
LABEL_75:
        sub_100038004(v76, *((unint64_t *)&v76 + 1));
        sub_100038004(v60.i64[0], v60.u64[1]);
        sub_10000C95C(v59, *((unint64_t *)&v59 + 1));
        sub_10000C95C(v60.i64[0], v60.u64[1]);
        goto LABEL_76;
      }
      sub_1000A6734(a2, (void (*)(void, void, void, void, void, void, void))sub_10006E108);
      sub_1000A6734(a1, (void (*)(void, void, void, void, void, void, void))sub_10006E108);
      char v16 = 1;
      return v16 & 1;
    case 6:
      unint64_t v42 = *((void *)&v70 + 1);
      sub_1000A66D8(a2, (uint64_t)&v66);
      if (v69 != 6) {
        goto LABEL_77;
      }
      long long v43 = v66;
      sub_1000A6734(a1, (void (*)(void, void, void, void, void, void, void))sub_10006E998);
      sub_1000A6734(a2, (void (*)(void, void, void, void, void, void, void))sub_10006E998);
      uint64_t v44 = v4;
      unint64_t v45 = v42;
      unint64_t v47 = *((void *)&v43 + 1);
      uint64_t v46 = v43;
      goto LABEL_54;
    case 7:
      sub_1000A66D8(a2, (uint64_t)&v66);
      if (v69 != 7) {
        goto LABEL_77;
      }
      char v16 = _s7CoreP2P21NANInformationElementV23__derived_struct_equalsySbAC_ACtFZ_0(v4, v66);
      return v16 & 1;
    case 8:
      uint64_t v48 = *((void *)&v70 + 1);
      unint64_t v49 = v71;
      sub_1000A66D8(a2, (uint64_t)&v66);
      if (v69 != 8) {
        goto LABEL_77;
      }
      int v50 = BYTE2(v66);
      uint64_t v51 = *((void *)&v66 + 1);
      uint64_t v52 = v67.i64[0];
      int v53 = (unsigned __int16)v66;
      sub_1000A6734(a1, (void (*)(void, void, void, void, void, void, void))sub_10006E998);
      sub_1000A6734(a2, (void (*)(void, void, void, void, void, void, void))sub_10006E998);
      if ((sub_10003916C(v4 & 0xFFFFFF, v53 | (v50 << 16)) & 1) == 0) {
        goto LABEL_76;
      }
      uint64_t v44 = v48;
      unint64_t v45 = v49;
      uint64_t v46 = v51;
      unint64_t v47 = v52;
LABEL_54:
      char v16 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v44, v45, v46, v47);
      sub_1000A6734(a2, (void (*)(void, void, void, void, void, void, void))sub_10006E108);
      sub_1000A6734(a1, (void (*)(void, void, void, void, void, void, void))sub_10006E108);
      return v16 & 1;
    case 9:
      if ((unint64_t)v72 | *((void *)&v72 + 1) | (unint64_t)v70 | *((void *)&v71 + 1) | (unint64_t)v71 | *((void *)&v70 + 1))
      {
        sub_1000A66D8(a2, (uint64_t)&v66);
        if (v69 != 9) {
          goto LABEL_77;
        }
        int8x16_t v54 = vorrq_s8(v67, v68);
        uint64_t v55 = *(void *)&vorr_s8(*(int8x8_t *)v54.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL)) | *((void *)&v66 + 1);
        char v16 = (void)v66 == 1 && v55 == 0;
      }
      else
      {
        sub_1000A66D8(a2, (uint64_t)&v66);
        if (v69 != 9) {
          goto LABEL_77;
        }
        int8x16_t v57 = vorrq_s8(v67, v68);
        char v16 = (*(void *)&vorr_s8(*(int8x8_t *)v57.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v57, v57, 8uLL)) | *((void *)&v66 + 1) | (unint64_t)v66) == 0;
      }
      return v16 & 1;
    default:
      uint64_t v8 = *((void *)&v70 + 1);
      uint64_t v7 = v71;
      int v9 = WORD4(v71);
      uint64_t v10 = v72;
      uint64_t v11 = SBYTE8(v72);
      sub_1000A66D8(a2, (uint64_t)&v66);
      if (!v69 && (unsigned __int16)v66 == v6 && byte_1003C8EEF[(char)v5] == byte_1003C8EEF[SBYTE2(v66)])
      {
        uint64_t v12 = v67.i64[0];
        int v13 = v67.u16[4];
        uint64_t v14 = v68.i64[0];
        uint64_t v15 = v68.i8[8];
        if (sub_1000997E0(v8, *((uint64_t *)&v66 + 1))
          && (sub_1000956AC(v7, v12) & 1) != 0
          && v9 == v13
          && (_s7CoreP2P12NANAttributeO13ServiceIDListV23__derived_struct_equalsySbAE_AEtFZ_0(v10, v14) & 1) != 0
          && byte_1003C8EEF[v11] == byte_1003C8EEF[v15])
        {
          goto LABEL_23;
        }
      }
      goto LABEL_77;
  }
}

unint64_t sub_1001D6C2C()
{
  unint64_t result = qword_1004821B8;
  if (!qword_1004821B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004821B8);
  }
  return result;
}

uint64_t _s7CoreP2P27IEEE80211InformationElementO0C11CipherSuiteO8rawValueAESgs5UInt8V_tcfC_0(unsigned __int8 a1)
{
  if (a1 > 0xDu) {
    return 13;
  }
  else {
    return byte_1003C8EFC[(char)a1];
  }
}

uint64_t sub_1001D6CA8(unsigned __int8 a1)
{
  if (a1 <= 0xBEu)
  {
    if (a1 > 0x3Cu)
    {
      if (a1 == 61) {
        return 2;
      }
      if (a1 == 140) {
        return 3;
      }
    }
    else
    {
      if (a1 == 45) {
        return 0;
      }
      if (a1 == 48) {
        return 1;
      }
    }
  }
  else if (a1 <= 0xDCu)
  {
    if (a1 == 191) {
      return 4;
    }
    if (a1 == 192) {
      return 5;
    }
  }
  else
  {
    switch(a1)
    {
      case 0xDDu:
        return 6;
      case 0xF4u:
        return 7;
      case 0xFFu:
        return 8;
    }
  }
  return 9;
}

uint64_t _s7CoreP2P27IEEE80211InformationElementO32AuthenticationKeyManagementSuiteO8rawValueAESgs5UInt8V_tcfC_0(char a1)
{
  if ((a1 - 1) >= 0x19u) {
    return 25;
  }
  else {
    return (a1 - 1);
  }
}

unint64_t sub_1001D6D74(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_1004824C0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  int v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_1001D6C2C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return sub_100010754((uint64_t)a1);
  }
  LOBYTE(v11)  = 0;
  unsigned __int16 v7 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v11)  = 1;
  unsigned __int16 v8 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v11)  = 2;
  unsigned __int8 v9 = KeyedDecodingContainer.decode(_:forKey:)();
  char v12 = 3;
  sub_10008B6F4();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100010754((uint64_t)a1);
  return v7 | ((unint64_t)v8 << 16) | ((unint64_t)v9 << 32);
}

unint64_t sub_1001D6F94(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_1004824B8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  int v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_1001D7C90();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return sub_100010754((uint64_t)a1);
  }
  char v16 = 0;
  unsigned int v7 = KeyedDecodingContainer.decode(_:forKey:)();
  char v15 = 1;
  unsigned __int16 v8 = KeyedDecodingContainer.decode(_:forKey:)();
  char v14 = 2;
  uint64_t v11 = KeyedDecodingContainer.decode(_:forKey:)();
  char v13 = 3;
  KeyedDecodingContainer.decode(_:forKey:)();
  char v12 = 4;
  KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100010754((uint64_t)a1);
  return v7 | ((unint64_t)v8 << 32) | (v11 << 48);
}

void *sub_1001D71C8(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_100482478);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  int v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v7 = sub_1000369C4(a1, a1[3]);
  sub_1001D8508();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100010754((uint64_t)a1);
  }
  else
  {
    sub_10008B6F4();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    unsigned int v7 = v9;
    sub_100010754((uint64_t)a1);
  }
  return v7;
}

uint64_t sub_1001D7338(void *a1)
{
  uint64_t v3 = a1[3];
  sub_1000369C4(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (!v1)
  {
    sub_100039448((uint64_t)v8, v9);
    UnkeyedDecodingContainer.inferredDecode<A>()();
    uint64_t v3 = v7;
    sub_100039448((uint64_t)v8, v9);
    uint64_t v4 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    uint64_t v5 = v9;
    sub_100039448((uint64_t)v8, v9);
    UnkeyedDecodingContainer.decodeData(with:)(v4, v5);
    sub_100010754((uint64_t)v8);
  }
  sub_100010754((uint64_t)a1);
  return v3;
}

uint64_t sub_1001D7488(void *a1)
{
  uint64_t v3 = (uint64_t)sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (!v1)
  {
    uint64_t v3 = sub_100039448((uint64_t)v8, v9);
    sub_10008B6A0();
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    if (sub_10003916C(v10 | (v11 << 16), 0xAC0F00u))
    {
      uint64_t v3 = sub_100039448((uint64_t)v8, v9);
      char v4 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
      uint64_t v5 = _s7CoreP2P27IEEE80211InformationElementO32AuthenticationKeyManagementSuiteO8rawValueAESgs5UInt8V_tcfC_0(v4);
      if (v5 != 25)
      {
        uint64_t v3 = v5;
        sub_100010754((uint64_t)v8);
        sub_100010754((uint64_t)a1);
        return v3;
      }
    }
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v6 = xmmword_1003B00B0;
    *(unsigned char *)(v6 + 16)  = 2;
    swift_willThrow();
    sub_100010754((uint64_t)v8);
  }
  sub_100010754((uint64_t)a1);
  return v3;
}

uint64_t sub_1001D75F8(void *a1)
{
  uint64_t v3 = (uint64_t)sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (!v1)
  {
    uint64_t v3 = sub_100039448((uint64_t)v8, v9);
    sub_10008B6A0();
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    if (sub_10003916C(v10 | (v11 << 16), 0xAC0F00u))
    {
      uint64_t v3 = sub_100039448((uint64_t)v8, v9);
      unsigned __int8 v4 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
      uint64_t v5 = _s7CoreP2P27IEEE80211InformationElementO0C11CipherSuiteO8rawValueAESgs5UInt8V_tcfC_0(v4);
      if (v5 != 13)
      {
        uint64_t v3 = v5;
        sub_100010754((uint64_t)v8);
        sub_100010754((uint64_t)a1);
        return v3;
      }
    }
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v6 = xmmword_1003B00B0;
    *(unsigned char *)(v6 + 16)  = 2;
    swift_willThrow();
    sub_100010754((uint64_t)v8);
  }
  sub_100010754((uint64_t)a1);
  return v3;
}

uint64_t sub_1001D7768@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v2)
  {
    sub_100010754((uint64_t)a1);
    sub_10006E0D8(0, 0, 0xF000000000000000);
    return sub_10000C95C(0, 0xF000000000000000);
  }
  sub_100039448((uint64_t)v17, v18);
  sub_1001DBDF8();
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  sub_100039448((uint64_t)v17, v18);
  sub_1001DBE4C();
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  if (v14)
  {
    sub_100039448((uint64_t)v17, v18);
    sub_1001DBEA0();
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    uint64_t v7 = v14;
    uint64_t v6 = v15;
    unint64_t v8 = v16;
    if ((v14 & 2) == 0) {
      goto LABEL_6;
    }
LABEL_9:
    uint64_t v20 = v19;
    sub_100039448((uint64_t)v17, v18);
    sub_1001A5418();
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    uint64_t v20 = v19;
    sub_100039448((uint64_t)v17, v18);
    uint64_t v11 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    uint64_t v12 = v18;
    uint64_t v20 = v19;
    sub_100039448((uint64_t)v17, v18);
    uint64_t v9 = UnkeyedDecodingContainer.decodeData(with:)(v11, v12);
    unint64_t v10 = v13;
    goto LABEL_7;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  unint64_t v8 = 0xF000000000000000;
  if ((v14 & 2) != 0) {
    goto LABEL_9;
  }
LABEL_6:
  uint64_t v9 = 0;
  unint64_t v10 = 0xF000000000000000;
LABEL_7:
  sub_100010754((uint64_t)v17);
  sub_10006E968(v7, v6, v8);
  sub_100038004(v9, v10);
  sub_100010754((uint64_t)a1);
  sub_10006E0D8(v7, v6, v8);
  uint64_t result = sub_10000C95C(v9, v10);
  *(void *)a2  = v7;
  *(void *)(a2 + 8)  = v6;
  *(void *)(a2 + 16)  = v8;
  *(unsigned char *)(a2 + 24)  = (v14 & 2) == 0;
  *(void *)(a2 + 32)  = v9;
  *(void *)(a2 + 40)  = v10;
  return result;
}

uint64_t sub_1001D7A48@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v2) {
    return sub_100010754((uint64_t)a1);
  }
  sub_100039448((uint64_t)v15, v16);
  UnkeyedDecodingContainer.inferredDecode<A>()();
  char v5 = v17;
  uint64_t v6 = v16;
  sub_100039448((uint64_t)v15, v16);
  uint64_t v7 = UnkeyedDecodingContainer.decodeData(with:)(5, v6);
  unint64_t v9 = v8;
  uint64_t v10 = v16;
  sub_100039448((uint64_t)v15, v16);
  sub_100013D44(v7, v9);
  uint64_t v11 = UnkeyedDecodingContainer.decodeData(with:)(16, v10);
  unint64_t v13 = v12;
  sub_100013D44(v11, v12);
  sub_100010754((uint64_t)v15);
  sub_100013D44(v7, v9);
  sub_100013D44(v11, v13);
  sub_10000C970(v11, v13);
  sub_10000C970(v7, v9);
  sub_100010754((uint64_t)a1);
  sub_10000C970(v7, v9);
  uint64_t result = sub_10000C970(v11, v13);
  *(unsigned char *)a2  = v5;
  *(void *)(a2 + 8)  = v7;
  *(void *)(a2 + 16)  = v9;
  *(void *)(a2 + 24)  = v11;
  *(void *)(a2 + 32)  = v13;
  return result;
}

unint64_t sub_1001D7C3C()
{
  unint64_t result = qword_1004821C8;
  if (!qword_1004821C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004821C8);
  }
  return result;
}

unint64_t sub_1001D7C90()
{
  unint64_t result = qword_1004821D8;
  if (!qword_1004821D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004821D8);
  }
  return result;
}

unint64_t sub_1001D7CE4()
{
  unint64_t result = qword_1004821E8;
  if (!qword_1004821E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004821E8);
  }
  return result;
}

uint64_t sub_1001D7D38(uint64_t a1)
{
  return a1;
}

void *sub_1001D7D64(void *a1)
{
  uint64_t v3 = sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (!v1)
  {
    sub_100039448((uint64_t)v8, v9);
    char v4 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    sub_100010BCC(&qword_10047BEF8);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16)  = xmmword_1003B2450;
    *(unsigned char *)(v5 + 32)  = v4;
    uint64_t v6 = sub_1001CEA2C(0, v4 & 0xF, (uint64_t)v8);
    uint64_t v10 = (void *)v5;
    sub_1001DE944((uint64_t)v6);
    uint64_t v3 = v10;
    sub_100010754((uint64_t)v8);
  }
  sub_100010754((uint64_t)a1);
  return v3;
}

uint64_t sub_1001D7E88@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v2) {
    return sub_100010754((uint64_t)a1);
  }
  sub_100039448((uint64_t)v16, v17);
  UnkeyedDecodingContainer.inferredDecode<A>()();
  __int16 v5 = v19;
  sub_100039448((uint64_t)v16, v17);
  sub_1001DBEF4();
  UnkeyedDecodingContainer.inferredDecode<A>()();
  int v6 = v19;
  sub_100039448((uint64_t)v16, v17);
  int v7 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
  unint64_t v8 = sub_1001CEB90(v7 << 16, (uint64_t)v16, (uint64_t (*)(BOOL, uint64_t, uint64_t))sub_100083554, (void (*)(void))sub_1001DBEF4);
  int v18 = v6;
  sub_100039448((uint64_t)v16, v17);
  swift_bridgeObjectRetain();
  int v9 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
  uint64_t v10 = sub_1001CEB90(v9 << 16, (uint64_t)v16, (uint64_t (*)(BOOL, uint64_t, uint64_t))sub_10008352C, (void (*)(void))sub_1001DBFF0);
  sub_100039448((uint64_t)v16, v17);
  sub_1001DBF48();
  swift_bridgeObjectRetain();
  UnkeyedDecodingContainer.inferredDecode<A>()();
  __int16 v15 = v19;
  sub_100039448((uint64_t)v16, v17);
  int v11 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
  unint64_t v12 = sub_1001CED24(v11 << 16, (uint64_t)v16);
  sub_100039448((uint64_t)v16, v17);
  swift_bridgeObjectRetain();
  UnkeyedDecodingContainer.inferredDecode<A>()();
  char v13 = v19;
  sub_100010754((uint64_t)v16);
  sub_100010754((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(_WORD *)a2  = v5;
  *(unsigned char *)(a2 + 2)  = v18;
  *(void *)(a2 + 8)  = v8;
  *(void *)(a2 + 16)  = v10;
  *(_WORD *)(a2 + 24)  = v15;
  *(void *)(a2 + 32)  = v12;
  *(unsigned char *)(a2 + 40)  = v13;
  return result;
}

unint64_t sub_1001D828C()
{
  unint64_t result = qword_1004821F0;
  if (!qword_1004821F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004821F0);
  }
  return result;
}

unint64_t sub_1001D82E0()
{
  unint64_t result = qword_100482210;
  if (!qword_100482210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482210);
  }
  return result;
}

unint64_t sub_1001D8334()
{
  unint64_t result = qword_10047F268;
  if (!qword_10047F268)
  {
    sub_100014434(&qword_10047E7D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F268);
  }
  return result;
}

unint64_t sub_1001D83A0()
{
  unint64_t result = qword_100482220;
  if (!qword_100482220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482220);
  }
  return result;
}

unint64_t sub_1001D83F4()
{
  unint64_t result = qword_100482230;
  if (!qword_100482230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482230);
  }
  return result;
}

uint64_t sub_1001D8448(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100014434(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001D84B4()
{
  unint64_t result = qword_100482240;
  if (!qword_100482240)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482240);
  }
  return result;
}

unint64_t sub_1001D8508()
{
  unint64_t result = qword_100482268;
  if (!qword_100482268)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482268);
  }
  return result;
}

unint64_t sub_1001D855C()
{
  unint64_t result = qword_100482278;
  if (!qword_100482278)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482278);
  }
  return result;
}

uint64_t sub_1001D85B0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = a1[4];
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v2) {
    return sub_100010754((uint64_t)a1);
  }
  sub_100035FD4((uint64_t)a1, (uint64_t)&v53);
  sub_100010BCC(&qword_10047E720);
  uint64_t v6 = type metadata accessor for BinaryDecoder();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_29:
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v25 = xmmword_1003B00B0;
LABEL_30:
    *(unsigned char *)(v25 + 16)  = 2;
    swift_willThrow();
LABEL_31:
    sub_100010754((uint64_t)v60);
    return sub_100010754((uint64_t)a1);
  }
  uint64_t v7 = v58[4];
  uint64_t v8 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
LABEL_38:
    int v29 = 0;
LABEL_39:
    uint64_t v39 = (v5 - 1);
    uint64_t v40 = v61;
    sub_100039448((uint64_t)v60, v61);
    uint64_t v41 = UnkeyedDecodingContainer.decodeData(with:)(v39, v40);
    unint64_t v50 = v42;
    uint64_t v52 = v41;
    if (v29)
    {
      sub_100013D44(v41, v42);
      unint64_t v43 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v44 = (void *)swift_allocObject();
      v44[5]  = &_swiftEmptyDictionarySingleton;
      _OWORD v44[2] = v52;
      v44[3]  = v50;
      uint64_t v45 = 0;
      switch(v50 >> 62)
      {
        case 1uLL:
          uint64_t v45 = (int)v52;
          break;
        case 2uLL:
          uint64_t v45 = *(void *)(v52 + 16);
          break;
        default:
          break;
      }
      v44[4]  = v45;
      swift_beginAccess();
      v44[5]  = v43;
      swift_bridgeObjectRelease();
      uint64_t v55 = v6;
      uint64_t v56 = sub_1001DC044((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
      *(void *)&long long v53 = v44;
      sub_1001D7768(&v53, (uint64_t)v62);
      uint64_t v20 = v62[0];
      uint64_t v18 = v62[1];
      unint64_t v19 = v62[2];
      uint64_t v66 = v63;
      uint64_t v16 = v64;
      uint64_t v17 = v65;
      sub_10000C970(v52, v50);
      char v21 = 5;
    }
    else
    {
      sub_100013D44(v41, v42);
      sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
      long long v59 = &_swiftEmptyDictionarySingleton;
      uint64_t v20 = 1;
      swift_beginAccess();
      swift_bridgeObjectRelease();
      sub_10000C970(v52, v50);
      swift_bridgeObjectRelease();
      sub_10000C970(v52, v50);
LABEL_20:
      uint64_t v18 = 0;
      unint64_t v19 = 0;
      uint64_t v66 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      char v21 = 9;
    }
  }
  else
  {
    uint64_t v9 = v58[2];
    unint64_t v10 = v58[3];
    switch(v10 >> 62)
    {
      case 1uLL:
        uint64_t v11 = v9 >> 32;
        goto LABEL_8;
      case 2uLL:
        uint64_t v11 = *(void *)(v9 + 24);
        goto LABEL_8;
      case 3uLL:
        if (v8 >= 1) {
          goto LABEL_14;
        }
        goto LABEL_9;
      default:
        uint64_t v11 = BYTE6(v10);
LABEL_8:
        if (v11 < v8)
        {
LABEL_14:
          sub_10000F000();
          swift_allocError();
          *(void *)uint64_t v22 = 0;
          *(void *)(v22 + 8)  = 0;
          *(unsigned char *)(v22 + 16)  = 2;
          swift_willThrow();
          swift_release();
          goto LABEL_31;
        }
LABEL_9:
        if (v8 < v7)
        {
          __break(1u);
LABEL_43:
          uint64_t v66 = 0;
          uint64_t v16 = 0;
          uint64_t v17 = 0;
          unint64_t v19 = v48;
          uint64_t v20 = v49 | (v46 << 8) | (v47 << 16);
          char v21 = 8;
          uint64_t v18 = v51;
        }
        else
        {
          uint64_t v12 = Data._Representation.subscript.getter();
          unint64_t v14 = v13;
          swift_release();
          __int16 v15 = sub_10011ADA8(v12, v14);
          sub_10000C970(v12, v14);
          if ((v15 & 0x100) != 0) {
            goto LABEL_29;
          }
          switch(sub_1001D6CA8(v15))
          {
            case 1u:
              sub_1001D31C4((uint64_t)v60, 1, &v53);
              char v21 = 0;
              uint64_t v18 = *((void *)&v53 + 1);
              unint64_t v19 = v54;
              uint64_t v66 = (unsigned __int16)v55;
              uint64_t v16 = v56;
              uint64_t v17 = v57;
              uint64_t v20 = (unsigned __int16)v53 | ((unint64_t)BYTE2(v53) << 16);
              goto LABEL_24;
            case 2u:
              sub_1001D3B24((uint64_t)v60, 2, (uint64_t)&v53);
              uint64_t v17 = 0;
              uint64_t v20 = v53;
              uint64_t v18 = *((void *)&v53 + 1);
              unint64_t v19 = v54;
              char v21 = 3;
              uint64_t v16 = v56;
              uint64_t v66 = v55;
              goto LABEL_24;
            case 3u:
              sub_1001D439C((uint64_t)v60, 3, &v53);
              unint64_t v19 = 0;
              uint64_t v66 = 0;
              uint64_t v16 = 0;
              uint64_t v17 = 0;
              uint64_t v18 = *((void *)&v53 + 1);
              uint64_t v20 = v53;
              char v21 = 6;
              goto LABEL_24;
            case 4u:
              uint64_t v20 = sub_1001D3E40((uint64_t)v60, 4uLL);
              unint64_t v19 = 0;
              uint64_t v66 = 0;
              uint64_t v16 = 0;
              uint64_t v17 = 0;
              char v21 = 4;
              uint64_t v18 = v23;
              goto LABEL_24;
            case 5u:
              sub_1001D4150((uint64_t)v60, 5);
              uint64_t v20 = 0;
              goto LABEL_20;
            case 6u:
              sub_100039448((uint64_t)v60, v61);
              dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
              sub_100039448((uint64_t)v60, v61);
              unsigned __int8 v24 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
              if (v24 < 3u)
              {
                sub_10000F000();
                swift_allocError();
                *(void *)uint64_t v25 = 0;
                *(void *)(v25 + 8)  = 0;
                goto LABEL_30;
              }
              sub_100039448((uint64_t)v60, v61);
              sub_10008B6A0();
              dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
              uint64_t v49 = v53;
              uint64_t v30 = BYTE1(v53);
              uint64_t v31 = BYTE2(v53);
              uint64_t v32 = v24 - 3;
              uint64_t v33 = v61;
              sub_100039448((uint64_t)v60, v61);
              uint64_t v51 = UnkeyedDecodingContainer.decodeData(with:)(v32, v33);
              unint64_t v48 = v34;
              uint64_t v46 = v30;
              uint64_t v47 = v31;
              if ((sub_10003916C(v49 | (v30 << 8) | (v31 << 16), 0x9A6F50u) & 1) == 0) {
                goto LABEL_43;
              }
              sub_100013D44(v51, v48);
              __int16 v35 = sub_10011ADA8(v51, v48);
              sub_10000C970(v51, v48);
              if ((v35 & 0x1FF) != 0x13) {
                goto LABEL_43;
              }
              sub_100013D44(v51, v48);
              unint64_t v36 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
              long long v37 = (void *)swift_allocObject();
              v37[5]  = &_swiftEmptyDictionarySingleton;
              v37[2]  = v51;
              v37[3]  = v48;
              uint64_t v38 = 0;
              switch(v48 >> 62)
              {
                case 1uLL:
                  uint64_t v38 = (int)v51;
                  break;
                case 2uLL:
                  uint64_t v38 = *(void *)(v51 + 16);
                  break;
                default:
                  break;
              }
              v37[4]  = v38;
              swift_beginAccess();
              v37[5]  = v36;
              swift_bridgeObjectRelease();
              uint64_t v55 = v6;
              uint64_t v56 = sub_1001DC044((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
              *(void *)&long long v53 = v37;
              uint64_t v20 = sub_100231438(&v53);
              sub_10000C970(v51, v48);
              uint64_t v18 = 0;
              unint64_t v19 = 0;
              uint64_t v66 = 0;
              uint64_t v16 = 0;
              uint64_t v17 = 0;
              char v21 = 7;
              break;
            case 7u:
              uint64_t v20 = (uint64_t)sub_1001D34DC((uint64_t)v60, (void *)7);
              uint64_t v18 = 0;
              unint64_t v19 = 0;
              uint64_t v66 = 0;
              uint64_t v16 = 0;
              uint64_t v17 = 0;
              char v21 = 1;
              goto LABEL_24;
            case 8u:
              sub_100039448((uint64_t)v60, v61);
              dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
              sub_100039448((uint64_t)v60, v61);
              LOBYTE(v5)  = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
              if (!(_BYTE)v5) {
                goto LABEL_29;
              }
              sub_100039448((uint64_t)v60, v61);
              char v28 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
              if (v28 == 8) {
                goto LABEL_38;
              }
              if (v28 != 100) {
                goto LABEL_29;
              }
              int v29 = 1;
              goto LABEL_39;
            case 9u:
              goto LABEL_29;
            default:
              sub_1001D37E4((uint64_t)v60, 0, (uint64_t)&v53);
              uint64_t v66 = 0;
              uint64_t v16 = 0;
              uint64_t v17 = 0;
              uint64_t v18 = *((void *)&v53 + 1);
              unint64_t v19 = v54;
              uint64_t v20 = v53 | ((unint64_t)BYTE4(v53) << 32);
              char v21 = 2;
              goto LABEL_24;
          }
        }
        break;
    }
  }
LABEL_24:
  sub_100010754((uint64_t)v60);
  uint64_t result = sub_100010754((uint64_t)a1);
  *(void *)a2  = v20;
  *(void *)(a2 + 8)  = v18;
  uint64_t v27 = v66;
  *(void *)(a2 + 16)  = v19;
  *(void *)(a2 + 24)  = v27;
  *(void *)(a2 + 32)  = v16;
  *(void *)(a2 + 40)  = v17;
  *(unsigned char *)(a2 + 48)  = v21;
  return result;
}

unint64_t sub_1001D8F60()
{
  unint64_t result = qword_100482280;
  if (!qword_100482280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482280);
  }
  return result;
}

unint64_t sub_1001D8FB4()
{
  unint64_t result = qword_100482298;
  if (!qword_100482298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482298);
  }
  return result;
}

unint64_t sub_1001D9008()
{
  unint64_t result = qword_100481DD0;
  if (!qword_100481DD0)
  {
    sub_100014434(&qword_10047DCD8);
    sub_1001DC044(&qword_10047E7B8, (void (*)(uint64_t))type metadata accessor for NANAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100481DD0);
  }
  return result;
}

unint64_t sub_1001D90B0()
{
  unint64_t result = qword_1004822E0;
  if (!qword_1004822E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004822E0);
  }
  return result;
}

unint64_t sub_1001D9108()
{
  unint64_t result = qword_1004822E8;
  if (!qword_1004822E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004822E8);
  }
  return result;
}

unint64_t sub_1001D9160()
{
  unint64_t result = qword_1004822F0;
  if (!qword_1004822F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004822F0);
  }
  return result;
}

unint64_t sub_1001D91B8()
{
  unint64_t result = qword_1004822F8;
  if (!qword_1004822F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004822F8);
  }
  return result;
}

unint64_t sub_1001D9210()
{
  unint64_t result = qword_100482300;
  if (!qword_100482300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482300);
  }
  return result;
}

unint64_t sub_1001D9268()
{
  unint64_t result = qword_100482308;
  if (!qword_100482308)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482308);
  }
  return result;
}

unint64_t sub_1001D92C0()
{
  unint64_t result = qword_100482310;
  if (!qword_100482310)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482310);
  }
  return result;
}

unint64_t sub_1001D9318()
{
  unint64_t result = qword_100482318;
  if (!qword_100482318)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482318);
  }
  return result;
}

unint64_t sub_1001D9370()
{
  unint64_t result = qword_100482320;
  if (!qword_100482320)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482320);
  }
  return result;
}

unint64_t sub_1001D93C8()
{
  unint64_t result = qword_100482328;
  if (!qword_100482328)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482328);
  }
  return result;
}

unint64_t sub_1001D941C(uint64_t a1)
{
  unint64_t result = sub_1001D9444();
  *(void *)(a1 + 8)  = result;
  return result;
}

unint64_t sub_1001D9444()
{
  unint64_t result = qword_100482330;
  if (!qword_100482330)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482330);
  }
  return result;
}

unint64_t sub_1001D949C()
{
  unint64_t result = qword_100482338;
  if (!qword_100482338)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482338);
  }
  return result;
}

unint64_t sub_1001D94F4()
{
  unint64_t result = qword_100482340;
  if (!qword_100482340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482340);
  }
  return result;
}

unint64_t sub_1001D954C()
{
  unint64_t result = qword_100482348;
  if (!qword_100482348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482348);
  }
  return result;
}

unint64_t sub_1001D95A4()
{
  unint64_t result = qword_100482350;
  if (!qword_100482350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482350);
  }
  return result;
}

unint64_t sub_1001D95FC()
{
  unint64_t result = qword_100482358;
  if (!qword_100482358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482358);
  }
  return result;
}

unint64_t sub_1001D9654()
{
  unint64_t result = qword_100482360;
  if (!qword_100482360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482360);
  }
  return result;
}

unint64_t sub_1001D96AC()
{
  unint64_t result = qword_100482368;
  if (!qword_100482368)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482368);
  }
  return result;
}

unint64_t sub_1001D9704()
{
  unint64_t result = qword_100482370;
  if (!qword_100482370)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482370);
  }
  return result;
}

unint64_t sub_1001D975C()
{
  unint64_t result = qword_100482378;
  if (!qword_100482378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482378);
  }
  return result;
}

unint64_t sub_1001D97B4()
{
  unint64_t result = qword_100482380;
  if (!qword_100482380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482380);
  }
  return result;
}

uint64_t destroy for IEEE80211InformationElement(uint64_t a1)
{
  return sub_10006E108(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned char *)(a1 + 48));
}

uint64_t initializeWithCopy for IEEE80211InformationElement(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  char v9 = *(unsigned char *)(a2 + 48);
  sub_10006E998(*(void *)a2, v4, v5, v6, v7, v8, v9);
  *(void *)a1  = v3;
  *(void *)(a1 + 8)  = v4;
  *(void *)(a1 + 16)  = v5;
  *(void *)(a1 + 24)  = v6;
  *(void *)(a1 + 32)  = v7;
  *(void *)(a1 + 40)  = v8;
  *(unsigned char *)(a1 + 48)  = v9;
  return a1;
}

uint64_t assignWithCopy for IEEE80211InformationElement(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  char v9 = *(unsigned char *)(a2 + 48);
  sub_10006E998(*(void *)a2, v4, v5, v6, v7, v8, v9);
  uint64_t v10 = *(void *)a1;
  unint64_t v11 = *(void *)(a1 + 8);
  unint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  unint64_t v15 = *(void *)(a1 + 40);
  *(void *)a1  = v3;
  *(void *)(a1 + 8)  = v4;
  *(void *)(a1 + 16)  = v5;
  *(void *)(a1 + 24)  = v6;
  *(void *)(a1 + 32)  = v7;
  *(void *)(a1 + 40)  = v8;
  char v16 = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(a1 + 48)  = v9;
  sub_10006E108(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

uint64_t assignWithTake for IEEE80211InformationElement(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 48);
  uint64_t v4 = *(void *)a1;
  unint64_t v6 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  unint64_t v9 = *(void *)(a1 + 40);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16)  = v10;
  *(_OWORD *)(a1 + 32)  = *(_OWORD *)(a2 + 32);
  char v11 = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(a1 + 48)  = v3;
  sub_10006E108(v4, v6, v5, v7, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for IEEE80211InformationElement(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF7 && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 247);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 <= 9) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IEEE80211InformationElement(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF6)
  {
    *(void *)(result + 40)  = 0;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(unsigned char *)(result + 48)  = 0;
    *(void *)unint64_t result = a2 - 247;
    if (a3 >= 0xF7) {
      *(unsigned char *)(result + 49)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xF7) {
      *(unsigned char *)(result + 49)  = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 48)  = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1001D9A20(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 48) <= 8u) {
    return *(unsigned __int8 *)(a1 + 48);
  }
  else {
    return (*(_DWORD *)a1 + 9);
  }
}

uint64_t sub_1001D9A38(uint64_t result, unsigned int a2)
{
  if (a2 >= 9)
  {
    *(void *)unint64_t result = a2 - 9;
    *(_OWORD *)(result + 8)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(void *)(result + 40)  = 0;
    LOBYTE(a2)  = 9;
  }
  *(unsigned char *)(result + 48)  = a2;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement()
{
  return &type metadata for IEEE80211InformationElement;
}

uint64_t sub_1001D9A74(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4)  = *(unsigned char *)(a2 + 4);
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  sub_100013D44(v3, v4);
  *(void *)(a1 + 8)  = v3;
  *(void *)(a1 + 16)  = v4;
  return a1;
}

uint64_t assignWithCopy for IEEE80211InformationElement.HighThroughputCapability(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  *(_WORD *)(a1 + 2)  = *(_WORD *)(a2 + 2);
  *(unsigned char *)(a1 + 4)  = *(unsigned char *)(a2 + 4);
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  sub_100013D44(v3, v4);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 8)  = v3;
  *(void *)(a1 + 16)  = v4;
  sub_10000C970(v5, v6);
  return a1;
}

uint64_t assignWithTake for IEEE80211InformationElement.HighThroughputCapability(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4)  = *(unsigned char *)(a2 + 4);
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  sub_10000C970(v3, v4);
  return a1;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.HighThroughputCapability()
{
  return &type metadata for IEEE80211InformationElement.HighThroughputCapability;
}

uint64_t destroy for IEEE80211InformationElement.HighThroughputOperation(void *a1)
{
  sub_10000C970(a1[1], a1[2]);
  uint64_t v2 = a1[3];
  unint64_t v3 = a1[4];

  return sub_10000C970(v2, v3);
}

uint64_t initializeWithCopy for IEEE80211InformationElement.HighThroughputOperation(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  sub_100013D44(v4, v5);
  *(void *)(a1 + 8)  = v4;
  *(void *)(a1 + 16)  = v5;
  uint64_t v7 = *(void *)(a2 + 24);
  unint64_t v6 = *(void *)(a2 + 32);
  sub_100013D44(v7, v6);
  *(void *)(a1 + 24)  = v7;
  *(void *)(a1 + 32)  = v6;
  return a1;
}

uint64_t assignWithCopy for IEEE80211InformationElement.HighThroughputOperation(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  sub_100013D44(v4, v5);
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 8)  = v4;
  *(void *)(a1 + 16)  = v5;
  sub_10000C970(v6, v7);
  uint64_t v9 = *(void *)(a2 + 24);
  unint64_t v8 = *(void *)(a2 + 32);
  sub_100013D44(v9, v8);
  uint64_t v10 = *(void *)(a1 + 24);
  unint64_t v11 = *(void *)(a1 + 32);
  *(void *)(a1 + 24)  = v9;
  *(void *)(a1 + 32)  = v8;
  sub_10000C970(v10, v11);
  return a1;
}

uint64_t assignWithTake for IEEE80211InformationElement.HighThroughputOperation(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  sub_10000C970(v4, v5);
  uint64_t v6 = *(void *)(a1 + 24);
  unint64_t v7 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24)  = *(_OWORD *)(a2 + 24);
  sub_10000C970(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for IEEE80211InformationElement.HighThroughputOperation(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 16) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 16) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for IEEE80211InformationElement.HighThroughputOperation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 8)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(void *)unint64_t result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 40)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 40)  = 0;
    }
    if (a2)
    {
      *(void *)(result + 8)  = 0;
      *(void *)(result + 16)  = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.HighThroughputOperation()
{
  return &type metadata for IEEE80211InformationElement.HighThroughputOperation;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.VeryHighThroughputCapability()
{
  return &type metadata for IEEE80211InformationElement.VeryHighThroughputCapability;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.VeryHighThroughputOperation()
{
  return &type metadata for IEEE80211InformationElement.VeryHighThroughputOperation;
}

uint64_t destroy for IEEE80211InformationElement.RSNCapability()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for IEEE80211InformationElement.RSNCapability(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2)  = *(unsigned char *)(a2 + 2);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = v3;
  *(_WORD *)(a1 + 24)  = *(_WORD *)(a2 + 24);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40)  = *(unsigned char *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for IEEE80211InformationElement.RSNCapability(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2)  = *(unsigned char *)(a2 + 2);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 24)  = *(_WORD *)(a2 + 24);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40)  = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for IEEE80211InformationElement.RSNCapability(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2)  = *(unsigned char *)(a2 + 2);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 24)  = *(_WORD *)(a2 + 24);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40)  = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for IEEE80211InformationElement.RSNCapability(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 41)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IEEE80211InformationElement.RSNCapability(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(unsigned char *)(result + 40)  = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 41)  = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8)  = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 41)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.RSNCapability()
{
  return &type metadata for IEEE80211InformationElement.RSNCapability;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.RSNCapability.Capabilities()
{
  return &type metadata for IEEE80211InformationElement.RSNCapability.Capabilities;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.ExtendedRSNCapability()
{
  return &type metadata for IEEE80211InformationElement.ExtendedRSNCapability;
}

unsigned char *storeEnumTagSinglePayload for IEEE80211InformationElement.IEEE80211CipherSuite(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF3)
  {
    unsigned int v6 = ((a2 - 244) >> 8) + 1;
    *unint64_t result = a2 + 12;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001DA114);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 12;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.IEEE80211CipherSuite()
{
  return &type metadata for IEEE80211InformationElement.IEEE80211CipherSuite;
}

uint64_t destroy for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters(uint64_t result)
{
  uint64_t v1 = result;
  unint64_t v2 = *(void *)(result + 16);
  if (v2 >> 60 != 15) {
    unint64_t result = sub_10000C970(*(void *)(result + 8), v2);
  }
  unint64_t v3 = *(void *)(v1 + 40);
  if (v3 >> 60 != 15)
  {
    uint64_t v4 = *(void *)(v1 + 32);
    return sub_10000C970(v4, v3);
  }
  return result;
}

uint64_t initializeWithCopy for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)a1  = *(_OWORD *)a2;
    *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  }
  else
  {
    *(_WORD *)a1  = *(_WORD *)a2;
    uint64_t v5 = *(void *)(a2 + 8);
    sub_100013D44(v5, v4);
    *(void *)(a1 + 8)  = v5;
    *(void *)(a1 + 16)  = v4;
  }
  *(unsigned char *)(a1 + 24)  = *(unsigned char *)(a2 + 24);
  unsigned int v6 = (uint64_t *)(a2 + 32);
  unint64_t v7 = *(void *)(a2 + 40);
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 32)  = *(_OWORD *)v6;
  }
  else
  {
    uint64_t v8 = *v6;
    sub_100013D44(*v6, v7);
    *(void *)(a1 + 32)  = v8;
    *(void *)(a1 + 40)  = v7;
  }
  return a1;
}

uint64_t assignWithCopy for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters(uint64_t a1, long long *a2)
{
  if (*(void *)(a1 + 16) >> 60 == 15)
  {
    if (*((void *)a2 + 2) >> 60 == 15)
    {
      long long v4 = *a2;
      *(void *)(a1 + 16)  = *((void *)a2 + 2);
      *(_OWORD *)a1  = v4;
    }
    else
    {
      *(_WORD *)a1  = *(_WORD *)a2;
      uint64_t v6 = *((void *)a2 + 1);
      unint64_t v7 = *((void *)a2 + 2);
      sub_100013D44(v6, v7);
      *(void *)(a1 + 8)  = v6;
      *(void *)(a1 + 16)  = v7;
    }
  }
  else if (*((void *)a2 + 2) >> 60 == 15)
  {
    sub_1001A219C(a1);
    uint64_t v5 = *((void *)a2 + 2);
    *(_OWORD *)a1  = *a2;
    *(void *)(a1 + 16)  = v5;
  }
  else
  {
    *(_WORD *)a1  = *(_WORD *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    unint64_t v9 = *((void *)a2 + 2);
    sub_100013D44(v8, v9);
    uint64_t v10 = *(void *)(a1 + 8);
    unint64_t v11 = *(void *)(a1 + 16);
    *(void *)(a1 + 8)  = v8;
    *(void *)(a1 + 16)  = v9;
    sub_10000C970(v10, v11);
  }
  *(unsigned char *)(a1 + 24)  = *((unsigned char *)a2 + 24);
  unint64_t v12 = (uint64_t *)(a2 + 2);
  unint64_t v13 = *((void *)a2 + 5);
  if (*(void *)(a1 + 40) >> 60 != 15)
  {
    if (v13 >> 60 != 15)
    {
      uint64_t v15 = *v12;
      sub_100013D44(*v12, v13);
      uint64_t v16 = *(void *)(a1 + 32);
      unint64_t v17 = *(void *)(a1 + 40);
      *(void *)(a1 + 32)  = v15;
      *(void *)(a1 + 40)  = v13;
      sub_10000C970(v16, v17);
      return a1;
    }
    sub_1001A21F0(a1 + 32);
    goto LABEL_13;
  }
  if (v13 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)(a1 + 32)  = *(_OWORD *)v12;
    return a1;
  }
  uint64_t v14 = *v12;
  sub_100013D44(*v12, v13);
  *(void *)(a1 + 32)  = v14;
  *(void *)(a1 + 40)  = v13;
  return a1;
}

uint64_t assignWithTake for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v5 = *(void *)(a2 + 16);
  if (v5 >> 60 == 15)
  {
    sub_1001A219C(a1);
LABEL_4:
    *(_OWORD *)a1  = *(_OWORD *)a2;
    *(void *)(a1 + 16)  = *(void *)(a2 + 16);
    goto LABEL_6;
  }
  *(_WORD *)a1  = *(_WORD *)a2;
  uint64_t v6 = *(void *)(a1 + 8);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = v5;
  sub_10000C970(v6, v4);
LABEL_6:
  *(unsigned char *)(a1 + 24)  = *(unsigned char *)(a2 + 24);
  unint64_t v7 = (void *)(a2 + 32);
  unint64_t v8 = *(void *)(a1 + 40);
  if (v8 >> 60 != 15)
  {
    unint64_t v9 = *(void *)(a2 + 40);
    if (v9 >> 60 != 15)
    {
      uint64_t v10 = *(void *)(a1 + 32);
      *(void *)(a1 + 32)  = *v7;
      *(void *)(a1 + 40)  = v9;
      sub_10000C970(v10, v8);
      return a1;
    }
    sub_1001A21F0(a1 + 32);
  }
  *(_OWORD *)(a1 + 32)  = *(_OWORD *)v7;
  return a1;
}

uint64_t getEnumTagSinglePayload for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xC && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 12);
  }
  uint64_t v3 = *(void *)(a1 + 16) >> 60;
  if (((4 * v3) & 0xC) != 0) {
    int v4 = 14 - ((4 * v3) & 0xC | (v3 >> 2));
  }
  else {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xB)
  {
    *(void *)(result + 40)  = 0;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)unint64_t result = a2 - 12;
    if (a3 >= 0xC) {
      *(unsigned char *)(result + 48)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xC) {
      *(unsigned char *)(result + 48)  = 0;
    }
    if (a2)
    {
      *(void *)(result + 8)  = 0;
      *(void *)(result + 16)  = (unint64_t)((4 * (a2 ^ 0xF)) | ((a2 ^ 0xF) >> 2)) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters()
{
  return &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback()
{
  return &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback;
}

uint64_t getEnumTagSinglePayload for IEEE80211InformationElement.AuthenticationKeyManagementSuite(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE8) {
    goto LABEL_17;
  }
  if (a2 + 24 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 24) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 24;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 24;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 24;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x19;
  int v8 = v6 - 25;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for IEEE80211InformationElement.AuthenticationKeyManagementSuite(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 24 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 24) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE7)
  {
    unsigned int v6 = ((a2 - 232) >> 8) + 1;
    *unint64_t result = a2 + 24;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001DA6C0);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 24;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.AuthenticationKeyManagementSuite()
{
  return &type metadata for IEEE80211InformationElement.AuthenticationKeyManagementSuite;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.MessageIntegrityCode()
{
  return &type metadata for IEEE80211InformationElement.MessageIntegrityCode;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.WrappedData()
{
  return &type metadata for IEEE80211InformationElement.WrappedData;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.ExtendedElementID()
{
  return &type metadata for IEEE80211InformationElement.ExtendedElementID;
}

unsigned char *storeEnumTagSinglePayload for IEEE80211InformationElement.ElementType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001DA7F8);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.ElementType()
{
  return &type metadata for IEEE80211InformationElement.ElementType;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.WrappedData.CodingKeys()
{
  return &type metadata for IEEE80211InformationElement.WrappedData.CodingKeys;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.MessageIntegrityCode.CodingKeys()
{
  return &type metadata for IEEE80211InformationElement.MessageIntegrityCode.CodingKeys;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Control()
{
  return &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Control;
}

unsigned char *_s7CoreP2P27IEEE80211InformationElementO17ExtendedElementIDOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001DA930);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback.CodingKeys()
{
  return &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback.CodingKeys;
}

unsigned char *_s7CoreP2P27IEEE80211InformationElementO20MessageIntegrityCodeV10CodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1001DAA04);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.ExtendedRSNCapability.CodingKeys()
{
  return &type metadata for IEEE80211InformationElement.ExtendedRSNCapability.CodingKeys;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.VeryHighThroughputOperation.CodingKeys()
{
  return &type metadata for IEEE80211InformationElement.VeryHighThroughputOperation.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for IEEE80211InformationElement.VeryHighThroughputCapability.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001DAB18);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.VeryHighThroughputCapability.CodingKeys()
{
  return &type metadata for IEEE80211InformationElement.VeryHighThroughputCapability.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for IEEE80211InformationElement.HighThroughputOperation.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001DAC1CLL);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.HighThroughputOperation.CodingKeys()
{
  return &type metadata for IEEE80211InformationElement.HighThroughputOperation.CodingKeys;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.HighThroughputCapability.CodingKeys()
{
  return &type metadata for IEEE80211InformationElement.HighThroughputCapability.CodingKeys;
}

unint64_t sub_1001DAC6C()
{
  unint64_t result = qword_100482388;
  if (!qword_100482388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482388);
  }
  return result;
}

unint64_t sub_1001DACC4()
{
  unint64_t result = qword_100482390;
  if (!qword_100482390)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482390);
  }
  return result;
}

unint64_t sub_1001DAD1C()
{
  unint64_t result = qword_100482398;
  if (!qword_100482398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482398);
  }
  return result;
}

unint64_t sub_1001DAD74()
{
  unint64_t result = qword_1004823A0;
  if (!qword_1004823A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004823A0);
  }
  return result;
}

unint64_t sub_1001DADCC()
{
  unint64_t result = qword_1004823A8;
  if (!qword_1004823A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004823A8);
  }
  return result;
}

unint64_t sub_1001DAE24()
{
  unint64_t result = qword_1004823B0;
  if (!qword_1004823B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004823B0);
  }
  return result;
}

unint64_t sub_1001DAE7C()
{
  unint64_t result = qword_1004823B8;
  if (!qword_1004823B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004823B8);
  }
  return result;
}

unint64_t sub_1001DAED4()
{
  unint64_t result = qword_1004823C0;
  if (!qword_1004823C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004823C0);
  }
  return result;
}

unint64_t sub_1001DAF2C()
{
  unint64_t result = qword_1004823C8;
  if (!qword_1004823C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004823C8);
  }
  return result;
}

unint64_t sub_1001DAF84()
{
  unint64_t result = qword_1004823D0;
  if (!qword_1004823D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004823D0);
  }
  return result;
}

unint64_t sub_1001DAFDC()
{
  unint64_t result = qword_1004823D8;
  if (!qword_1004823D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004823D8);
  }
  return result;
}

unint64_t sub_1001DB034()
{
  unint64_t result = qword_1004823E0;
  if (!qword_1004823E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004823E0);
  }
  return result;
}

unint64_t sub_1001DB08C()
{
  unint64_t result = qword_1004823E8;
  if (!qword_1004823E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004823E8);
  }
  return result;
}

unint64_t sub_1001DB0E4()
{
  unint64_t result = qword_1004823F0;
  if (!qword_1004823F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004823F0);
  }
  return result;
}

unint64_t sub_1001DB13C()
{
  unint64_t result = qword_1004823F8;
  if (!qword_1004823F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004823F8);
  }
  return result;
}

unint64_t sub_1001DB194()
{
  unint64_t result = qword_100482400;
  if (!qword_100482400)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482400);
  }
  return result;
}

unint64_t sub_1001DB1EC()
{
  unint64_t result = qword_100482408;
  if (!qword_100482408)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482408);
  }
  return result;
}

unint64_t sub_1001DB244()
{
  unint64_t result = qword_100482410;
  if (!qword_100482410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482410);
  }
  return result;
}

unint64_t sub_1001DB29C()
{
  unint64_t result = qword_100482418;
  if (!qword_100482418)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482418);
  }
  return result;
}

unint64_t sub_1001DB2F4()
{
  unint64_t result = qword_100482420;
  if (!qword_100482420)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482420);
  }
  return result;
}

unint64_t sub_1001DB34C()
{
  unint64_t result = qword_100482428;
  if (!qword_100482428)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482428);
  }
  return result;
}

unint64_t sub_1001DB3A4()
{
  unint64_t result = qword_100482430;
  if (!qword_100482430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482430);
  }
  return result;
}

unint64_t sub_1001DB3FC()
{
  unint64_t result = qword_100482438;
  if (!qword_100482438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482438);
  }
  return result;
}

unint64_t sub_1001DB454()
{
  unint64_t result = qword_100482440;
  if (!qword_100482440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482440);
  }
  return result;
}

unint64_t sub_1001DB4AC()
{
  unint64_t result = qword_100482448;
  if (!qword_100482448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482448);
  }
  return result;
}

unint64_t sub_1001DB504()
{
  unint64_t result = qword_100482450;
  if (!qword_100482450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482450);
  }
  return result;
}

unint64_t sub_1001DB55C()
{
  unint64_t result = qword_100482458;
  if (!qword_100482458)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482458);
  }
  return result;
}

unint64_t sub_1001DB5B4()
{
  unint64_t result = qword_100482460;
  if (!qword_100482460)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482460);
  }
  return result;
}

uint64_t sub_1001DB618(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = result;
  LODWORD(result)  = 0;
  int v3 = (unsigned __int8 *)(v2 + 32);
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if ((v5 & ~result) == 0) {
      int v4 = 0;
    }
    unint64_t result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_1001DB650(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = result;
  LODWORD(result)  = 0;
  int v3 = (unsigned __int16 *)(v2 + 32);
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if ((v5 & ~result) == 0) {
      int v4 = 0;
    }
    unint64_t result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_1001DB688(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = result;
  LODWORD(result)  = 0;
  int v3 = (int *)(v2 + 32);
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if ((v5 & ~result) == 0) {
      int v4 = 0;
    }
    unint64_t result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_1001DB6C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  int v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_1001DB6F8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1802401130 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1868983913 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7261507564706D61 && a2 == 0xEF73726574656D61 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 7562093 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_1001DB8A8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x437972616D697270 && a2 == 0xEE006C656E6E6168;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F6974617265706FLL && a2 == 0xE90000000000006ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 7562093 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1001DBA20(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1868983913 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x70614D53434D7872 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x474C686769487872 && a2 == 0xED00006574615249 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x70614D53434D7874 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x474C686769487874 && a2 == 0xED00006574615249)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_1001DBC40(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6B636162656D6F63 && a2 == 0xED00007265746641;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65696B6F6F63 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unint64_t sub_1001DBD50()
{
  unint64_t result = qword_100482468;
  if (!qword_100482468)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482468);
  }
  return result;
}

unint64_t sub_1001DBDA4()
{
  unint64_t result = qword_100482470;
  if (!qword_100482470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482470);
  }
  return result;
}

unint64_t sub_1001DBDF8()
{
  unint64_t result = qword_100482480;
  if (!qword_100482480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482480);
  }
  return result;
}

unint64_t sub_1001DBE4C()
{
  unint64_t result = qword_100482488;
  if (!qword_100482488)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482488);
  }
  return result;
}

unint64_t sub_1001DBEA0()
{
  unint64_t result = qword_100482490;
  if (!qword_100482490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482490);
  }
  return result;
}

unint64_t sub_1001DBEF4()
{
  unint64_t result = qword_100482498;
  if (!qword_100482498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482498);
  }
  return result;
}

unint64_t sub_1001DBF48()
{
  unint64_t result = qword_1004824A0;
  if (!qword_1004824A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004824A0);
  }
  return result;
}

unint64_t sub_1001DBF9C()
{
  unint64_t result = qword_1004824A8;
  if (!qword_1004824A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004824A8);
  }
  return result;
}

unint64_t sub_1001DBFF0()
{
  unint64_t result = qword_1004824B0;
  if (!qword_1004824B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004824B0);
  }
  return result;
}

uint64_t sub_1001DC044(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *_s7CoreP2P27IEEE80211InformationElementO24HighThroughputCapabilityV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001DC158);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.WrappedDataFormat()
{
  return &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.WrappedDataFormat;
}

unint64_t sub_1001DC194()
{
  unint64_t result = qword_1004824D8;
  if (!qword_1004824D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004824D8);
  }
  return result;
}

unint64_t sub_1001DC1E8()
{
  unint64_t result = qword_1004824E0;
  if (!qword_1004824E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004824E0);
  }
  return result;
}

uint64_t sub_1001DC244@<X0>(CoreP2P::WiFiInterfaceRole a1@<W0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result = sub_1001DC278(a1, a2, a3, a4 & 0xFFFFFFFFFFFFLL);
  if (!v5) {
    *a5  = result;
  }
  return result;
}

uint64_t sub_1001DC278(CoreP2P::WiFiInterfaceRole a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (a1)
  {
    BOOL v7 = (CoreP2P::WiFiAddress *)(a4 & 0xFFFFFFFFFFFFLL);
    swift_retain();
    v8._countAndFlagsBits  = a2;
    v8._object  = a3;
    Swift::String_optional v9 = AppleDevice.findOrCreateInterface(for:on:with:)(a1, v8, v7);
    swift_release();
    if (v9.value._object)
    {
      swift_allocObject();
      uint64_t v10 = swift_retain();
      return AppleIO80211Driver.init(device:role:name:)(v10, a1, v9.value._countAndFlagsBits, (uint64_t)v9.value._object);
    }
    sub_10000F000();
    swift_allocError();
    uint64_t v13 = 7;
  }
  else
  {
    sub_10000F000();
    swift_allocError();
    uint64_t v13 = 2;
  }
  *(void *)uint64_t v12 = v13;
  *(void *)(v12 + 8)  = 0;
  *(unsigned char *)(v12 + 16)  = 1;
  return swift_willThrow();
}

uint64_t sub_1001DC3B4(CoreP2P::WiFiInterfaceRole a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (a1 == CoreP2P_WiFiInterfaceRole_infrastructure)
  {
    sub_10000F000();
    swift_allocError();
    uint64_t v13 = 2;
    goto LABEL_6;
  }
  BOOL v7 = (CoreP2P::WiFiAddress *)(a4 & 0xFFFFFFFFFFFFLL);
  swift_retain();
  v8._countAndFlagsBits  = a2;
  v8._object  = a3;
  Swift::String_optional v9 = AppleDevice.findOrCreateInterface(for:on:with:)(a1, v8, v7);
  swift_release();
  if (!v9.value._object
    || (swift_allocObject(),
        uint64_t v10 = swift_retain(),
        (uint64_t result = AppleBroadcomDriver.init(device:role:name:)(v10, a1, v9.value._countAndFlagsBits, (uint64_t)v9.value._object)) == 0))
  {
    sub_10000F000();
    swift_allocError();
    uint64_t v13 = 7;
LABEL_6:
    *(void *)uint64_t v12 = v13;
    *(void *)(v12 + 8)  = 0;
    *(unsigned char *)(v12 + 16)  = 1;
    return swift_willThrow();
  }
  return result;
}

uint64_t WiFiDriver<>.createInterface(for:on:macAddress:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v34 = a3;
  uint64_t v33 = a2;
  unsigned int v35 = a1;
  int v12 = a1;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v30 = *(void *)(v13 - 8);
  uint64_t v31 = v13;
  __chkstk_darwin();
  uint64_t v32 = (char *)v29 - v14;
  AssociatedTypeWitness  = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v18 = (char *)v29 - v17;
  if (!v12)
  {
    sub_10000F000();
    swift_allocError();
    uint64_t v27 = 2;
    goto LABEL_7;
  }
  v29[0]  = a7;
  v29[1]  = v7;
  unint64_t v19 = *(void (**)(uint64_t, uint64_t))(a6 + 56);
  v19(a5, a6);
  AssociatedConformanceWitness  = swift_getAssociatedConformanceWitness();
  uint64_t v21 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness
                                                                                       + 72))(v35, v33, v34, a4 & 0xFFFFFFFFFFFFLL, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v23 = v22;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
  if (!v23)
  {
LABEL_5:
    sub_10000F000();
    swift_allocError();
    uint64_t v27 = 7;
LABEL_7:
    *(void *)uint64_t v26 = v27;
    *(void *)(v26 + 8)  = 0;
    *(unsigned char *)(v26 + 16)  = 1;
    return swift_willThrow();
  }
  v19(a5, a6);
  unsigned __int8 v24 = v32;
  (*(void (**)(char *, void, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 48))(v18, v35, v21, v23, a5, a6);
  uint64_t v25 = *(void *)(a5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v24, 1, a5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v24, v31);
    goto LABEL_5;
  }
  return (*(uint64_t (**)(void, char *, uint64_t))(v25 + 32))(v29[0], v24, a5);
}

uint64_t sub_1001DC844@<X0>(CoreP2P::WiFiInterfaceRole a1@<W0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result = sub_1001DC3B4(a1, a2, a3, a4 & 0xFFFFFFFFFFFFLL);
  if (!v5) {
    *a5  = result;
  }
  return result;
}

void *InterfaceIdentifier.size.unsafeMutableAddressor()
{
  return &static InterfaceIdentifier.size;
}

uint64_t InterfaceIdentifier.ipv6Address.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_1001265EC((uint64_t)&off_100450608);
  unint64_t v6 = v5;
  unint64_t v10 = v5;
  sub_100013D44(a1, a2);
  sub_100013D44(v4, v6);
  sub_100125FAC(a1, a2);
  sub_10000C970(a1, a2);
  sub_10000C970(v4, v6);
  uint64_t v7 = v4;
  uint64_t v8 = sub_1002577C8(v4, v10);
  sub_10000C970(v7, v10);
  return v8;
}

uint64_t InterfaceIdentifier.description.getter(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2 >> 62;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v4 = (int)a1;
      uint64_t v5 = a1 >> 32;
      goto LABEL_5;
    case 2uLL:
      uint64_t v4 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      goto LABEL_5;
    case 3uLL:
      return 0x3A30386566;
    default:
      uint64_t v4 = 0;
      uint64_t v5 = BYTE6(a2);
LABEL_5:
      uint64_t result = 0x3A30386566;
      uint64_t v43 = 0x3A30386566;
      unint64_t v44 = 0xE500000000000000;
      if (v4 >= v5) {
        return result;
      }
      uint64_t v35 = a1 >> 32;
      uint64_t v33 = BYTE6(a2);
      unint64_t v31 = a2 >> 8;
      unint64_t v29 = a2 >> 24;
      unint64_t v30 = a2 >> 16;
      char v32 = a2;
      unint64_t v27 = a2 >> 40;
      unint64_t v28 = HIDWORD(a2);
      uint64_t v34 = v5;
      break;
  }
  while (1)
  {
    uint64_t v9 = __OFADD__(v4, 2) ? 0x7FFFFFFFFFFFFFFFLL : v4 + 2;
    sub_100010BCC((uint64_t *)&unk_10047CF90);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16)  = xmmword_1003B2450;
    if (v2) {
      break;
    }
    if (v4 >= v33) {
      goto LABEL_41;
    }
    uint64_t v36 = a1;
    char v37 = v32;
    char v38 = v31;
    char v39 = v30;
    char v40 = v29;
    char v41 = v28;
    uint64_t v20 = v4 + 1;
    char v42 = v27;
    if (v4 + 1 >= v33) {
      goto LABEL_44;
    }
    uint64_t v15 = *((unsigned __int8 *)&v36 + v4);
    uint64_t v36 = a1;
    char v37 = v32;
    char v38 = v31;
    char v39 = v30;
    char v40 = v29;
    char v41 = v28;
    char v42 = v27;
    uint64_t v7 = *((unsigned __int8 *)&v36 + v20);
LABEL_8:
    *(void *)(v10 + 56)  = &type metadata for Int;
    *(void *)(v10 + 64)  = &protocol witness table for Int;
    *(void *)(v10 + 32)  = v7 | (v15 << 8);
    v8._countAndFlagsBits  = String.init(format:_:)();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    uint64_t v4 = v9;
    if (v9 >= v5) {
      return v43;
    }
  }
  if (v2 == 1)
  {
    if (v4 < (int)a1 || v4 >= v35)
    {
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
    }
    uint64_t v11 = __DataStorage._bytes.getter();
    if (!v11) {
      goto LABEL_51;
    }
    uint64_t v12 = v11;
    uint64_t v13 = __DataStorage._offset.getter();
    if (__OFSUB__(v4, v13)) {
      goto LABEL_43;
    }
    uint64_t v14 = v4 + 1;
    if (v4 + 1 < (int)a1 || v14 >= v35) {
      goto LABEL_46;
    }
    uint64_t v15 = *(unsigned __int8 *)(v12 + v4 - v13);
    uint64_t v16 = __DataStorage._bytes.getter();
    if (!v16) {
      goto LABEL_52;
    }
    uint64_t v17 = v16;
    uint64_t v18 = __DataStorage._offset.getter();
    uint64_t v19 = v14 - v18;
    if (__OFSUB__(v14, v18)) {
      goto LABEL_48;
    }
    goto LABEL_7;
  }
  if (v4 < *(void *)(a1 + 16)) {
    goto LABEL_42;
  }
  if (v4 >= *(void *)(a1 + 24)) {
    goto LABEL_45;
  }
  uint64_t v21 = __DataStorage._bytes.getter();
  if (!v21) {
    goto LABEL_53;
  }
  uint64_t v22 = v21;
  uint64_t v23 = __DataStorage._offset.getter();
  if (__OFSUB__(v4, v23)) {
    goto LABEL_47;
  }
  uint64_t v24 = v4 + 1;
  if (v4 + 1 < *(void *)(a1 + 16)) {
    goto LABEL_49;
  }
  if (v24 >= *(void *)(a1 + 24)) {
    goto LABEL_50;
  }
  uint64_t v15 = *(unsigned __int8 *)(v22 + v4 - v23);
  uint64_t v25 = __DataStorage._bytes.getter();
  if (!v25) {
    goto LABEL_54;
  }
  uint64_t v17 = v25;
  uint64_t v26 = __DataStorage._offset.getter();
  uint64_t v19 = v24 - v26;
  if (!__OFSUB__(v24, v26))
  {
LABEL_7:
    uint64_t v7 = *(unsigned __int8 *)(v17 + v19);
    uint64_t v5 = v34;
    goto LABEL_8;
  }
  __break(1u);
  return v43;
}

uint64_t sub_1001DCD60()
{
  return InterfaceIdentifier.description.getter(*(void *)v0, *(void *)(v0 + 8));
}

uint64_t InterfaceIdentifier.customMirror.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100480650);
  __chkstk_darwin();
  uint64_t v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[2]  = a1;
  v12[3]  = a2;
  v12[1]  = _swiftEmptyArrayStorage;
  uint64_t v10 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for Mirror.AncestorRepresentation.generated(_:), v4);
  sub_100013D44(a1, a2);
  sub_100010BCC(&qword_10047DC10);
  sub_100074578();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t sub_1001DCF2C()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100480650);
  __chkstk_darwin();
  uint64_t v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v0;
  unint64_t v7 = v0[1];
  void v11[2] = v8;
  v11[3]  = v7;
  v11[1]  = _swiftEmptyArrayStorage;
  uint64_t v9 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v6, 1, 1, v9);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for Mirror.AncestorRepresentation.generated(_:), v1);
  sub_100013D44(v8, v7);
  sub_100010BCC(&qword_10047DC10);
  sub_100074578();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t InterfaceIdentifier.init(from:)(void *a1)
{
  return sub_1001DD1C8(a1);
}

uint64_t InterfaceIdentifier.init(_:)(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
  {
    switch(a2 >> 62)
    {
      case 1uLL:
        LODWORD(v2)  = HIDWORD(result) - result;
        if (__OFSUB__(HIDWORD(result), result))
        {
          __break(1u);
LABEL_12:
          __break(1u);
          JUMPOUT(0x1001DD18CLL);
        }
        uint64_t v2 = (int)v2;
LABEL_7:
        if (v2 == 8) {
          return result;
        }
LABEL_8:
        sub_10000C95C(result, a2);
        break;
      case 2uLL:
        uint64_t v4 = *(void *)(result + 16);
        uint64_t v3 = *(void *)(result + 24);
        BOOL v5 = __OFSUB__(v3, v4);
        uint64_t v2 = v3 - v4;
        if (!v5) {
          goto LABEL_7;
        }
        goto LABEL_12;
      case 3uLL:
        goto LABEL_8;
      default:
        uint64_t v2 = BYTE6(a2);
        goto LABEL_7;
    }
  }
  return 0;
}

uint64_t sub_1001DD19C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1001DD1C8(a1);
  if (!v2)
  {
    *a2  = result;
    a2[1]  = v5;
  }
  return result;
}

uint64_t sub_1001DD1C8(void *a1)
{
  uint64_t v3 = a1[3];
  sub_1000369C4(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (!v1)
  {
    uint64_t v4 = v17;
    sub_100039448((uint64_t)v16, v17);
    uint64_t v5 = UnkeyedDecodingContainer.decodeData(with:)(8, v4);
    unint64_t v7 = v6;
    uint64_t v3 = v5;
    switch(v6 >> 62)
    {
      case 1uLL:
        LODWORD(v8)  = HIDWORD(v5) - v5;
        if (__OFSUB__(HIDWORD(v5), v5))
        {
          __break(1u);
LABEL_15:
          __break(1u);
          JUMPOUT(0x1001DD3E8);
        }
        uint64_t v8 = (int)v8;
LABEL_8:
        if (v8 == 8)
        {
          sub_100010754((uint64_t)v16);
          sub_100010754((uint64_t)a1);
          return v3;
        }
LABEL_10:
        uint64_t v12 = type metadata accessor for DecodingError();
        swift_allocError();
        uint64_t v14 = v13;
        uint64_t v18 = (char *)v13 + *(int *)(sub_100010BCC(&qword_10047E090) + 48);
        *uint64_t v14 = &type metadata for Data;
        sub_1000369C4(a1, a1[3]);
        dispatch thunk of Decoder.codingPath.getter();
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(void *, void, uint64_t))(*(void *)(v12 - 8) + 104))(v14, enum case for DecodingError.valueNotFound(_:), v12);
        swift_willThrow();
        sub_10000C970(v3, v7);
        sub_100010754((uint64_t)v16);
        break;
      case 2uLL:
        uint64_t v10 = *(void *)(v5 + 16);
        uint64_t v9 = *(void *)(v5 + 24);
        BOOL v11 = __OFSUB__(v9, v10);
        uint64_t v8 = v9 - v10;
        if (!v11) {
          goto LABEL_8;
        }
        goto LABEL_15;
      case 3uLL:
        goto LABEL_10;
      default:
        uint64_t v8 = BYTE6(v6);
        goto LABEL_8;
    }
  }
  sub_100010754((uint64_t)a1);
  return v3;
}

unint64_t sub_1001DD3FC()
{
  unint64_t result = qword_1004824E8;
  if (!qword_1004824E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004824E8);
  }
  return result;
}

ValueMetadata *type metadata accessor for InterfaceIdentifier()
{
  return &type metadata for InterfaceIdentifier;
}

uint64_t ExtendableOptionSet.init()()
{
  return dispatch thunk of OptionSet.init(rawValue:)();
}

uint64_t ExtendableOptionSet.formUnion(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001DD690(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))sub_1001DF554);
}

uint64_t ExtendableOptionSet.formIntersection(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  dispatch thunk of RawRepresentable.rawValue.getter();
  unint64_t v5 = *(void *)(v14[0] + 16);
  swift_bridgeObjectRelease();
  dispatch thunk of RawRepresentable.rawValue.getter();
  unint64_t v6 = *(void *)(v15 + 16);
  swift_bridgeObjectRelease();
  if (v6 < v5)
  {
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v7 = *(void *)(v14[0] + 16);
    swift_bridgeObjectRelease();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v8 = *(void *)(v15 + 16);
    swift_bridgeObjectRelease();
    uint64_t v9 = (void (*)(void *, void))(*(uint64_t (**)(void *, uint64_t, uint64_t))(a3 + 24))(v14, a2, a3);
    sub_1001DF560(v7 - v8);
    v9(v14, 0);
  }
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v10 = *(void *)(v14[0] + 16);
  swift_bridgeObjectRelease();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v11 = *(void *)(v15 + 16);
  uint64_t v12 = swift_bridgeObjectRelease();
  __chkstk_darwin(v12);
  return sub_1001DFDD4(0, v10, 0, v11, (uint64_t (*)(uint64_t, uint64_t))sub_1001E0040);
}

uint64_t ExtendableOptionSet.formSymmetricDifference(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001DD690(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))sub_1001E004C);
}

uint64_t sub_1001DD690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v7 = *(void *)(v17[0] + 16);
  swift_bridgeObjectRelease();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v8 = *(void *)(v18 + 16);
  swift_bridgeObjectRelease();
  sub_1001DFDD4(0, v7, 0, v8, a4);
  dispatch thunk of RawRepresentable.rawValue.getter();
  unint64_t v9 = *(void *)(v17[0] + 16);
  swift_bridgeObjectRelease();
  dispatch thunk of RawRepresentable.rawValue.getter();
  unint64_t v10 = *(void *)(v18 + 16);
  uint64_t result = swift_bridgeObjectRelease();
  if (v9 < v10)
  {
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v12 = v18;
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    swift_bridgeObjectRelease();
    dispatch thunk of RawRepresentable.rawValue.getter();
    unint64_t v13 = *(void *)(v17[4] + 16);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v14 = *(void *)(v18 + 16);
    if (v14 < v13)
    {
      __break(1u);
    }
    else
    {
      unint64_t v15 = (2 * v14) | 1;
      uint64_t v16 = (uint64_t (*)(void *, void))(*(uint64_t (**)(void *, uint64_t, uint64_t))(a3 + 24))(v17, a2, a3);
      sub_1001DFEA8(v12, v12 + 32, v13, v15);
      swift_bridgeObjectRelease();
      return v16(v17, 0);
    }
  }
  return result;
}

uint64_t ExtendableOptionSet.init(bitOffset:)(unint64_t a1)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    char v1 = a1;
    unint64_t v3 = a1 >> 3;
    uint64_t v2 = sub_1001DE55C(0, (a1 >> 3) + 1);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result) {
      goto LABEL_3;
    }
  }
  uint64_t result = (uint64_t)sub_1001DFD70(v2);
  uint64_t v2 = (void *)result;
LABEL_3:
  if (v3 >= v2[2])
  {
    __break(1u);
  }
  else
  {
    *((unsigned char *)v2 + v3 + 32) |= 1 << (v1 & 7);
    return dispatch thunk of OptionSet.init(rawValue:)();
  }
  return result;
}

uint64_t static OptionSet<>.withValue<A>(_:at:withBitCount:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v10 = v9;
  char v103 = a1;
  uint64_t v94 = a9;
  uint64_t v96 = a6;
  uint64_t v95 = a4;
  AssociatedTypeWitness  = swift_getAssociatedTypeWitness();
  __chkstk_darwin();
  unint64_t v93 = (char *)v84 - v17;
  uint64_t v86 = *(void *)(*(void *)(*(void *)(a7 + 8) + 24) + 16);
  swift_getAssociatedTypeWitness();
  __chkstk_darwin();
  uint64_t v102 = *(void *)(a5 - 8);
  __chkstk_darwin();
  char v88 = (char *)v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  __chkstk_darwin();
  __chkstk_darwin();
  char v99 = (char *)v84 - v19;
  __chkstk_darwin();
  char v98 = (char *)v84 - v20;
  __chkstk_darwin();
  uint64_t v100 = (char *)v84 - v21;
  __chkstk_darwin();
  uint64_t v89 = (char *)v84 - v22;
  __chkstk_darwin();
  uint64_t v24 = (char *)v84 - v23;
  uint64_t v25 = __chkstk_darwin();
  unint64_t v31 = (char *)v84 - v30;
  uint64_t v97 = a2;
  BOOL v32 = __OFADD__(a2, a3);
  uint64_t v33 = a2 + a3;
  if (v32)
  {
    __break(1u);
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  v84[1]  = v29;
  v84[2]  = v25;
  uint64_t v85 = v28;
  uint64_t v87 = v27;
  uint64_t v90 = v9;
  uint64_t v91 = AssociatedTypeWitness;
  uint64_t v92 = a8;
  if (dispatch thunk of static FixedWidthInteger.bitWidth.getter() < v33) {
    goto LABEL_3;
  }
  if (a3 < 0) {
    goto LABEL_65;
  }
  uint64_t v36 = 0;
  if (a3)
  {
    unint64_t v37 = 0;
    uint64_t v38 = v102;
    while (1)
    {
      if (v37 <= 0x3F) {
        v36 |= 1 << v37;
      }
      if (a3 - 1 == v37) {
        break;
      }
      if (a3 == ++v37)
      {
        __break(1u);
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:
    uint64_t v38 = v102;
  }
  char v39 = *(void (**)(char *, uint64_t, uint64_t))(v38 + 16);
  v39(v31, (uint64_t)v103, a5);
  char v40 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v101 = (void (*)(char *, char *, uint64_t))v39;
  v39(v24, (uint64_t)v31, a5);
  if ((v40 & 1) == 0)
  {
    uint64_t v10 = *(void *)(v38 + 8);
    uint64_t v47 = v24;
    uint64_t v48 = a5;
    goto LABEL_19;
  }
  uint64_t v41 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v10 = *(void *)(v38 + 8);
  ((void (*)(char *, uint64_t))v10)(v24, a5);
  if (v41 <= 64) {
    goto LABEL_20;
  }
  v84[0]  = v38 + 8;
  char v42 = v89;
  v101(v89, v31, a5);
  int64_t v105 = 0x8000000000000000;
  if (dispatch thunk of static BinaryInteger.isSigned.getter())
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
    {
      sub_10003AAFC();
      char v78 = v100;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      LODWORD(v86)  = dispatch thunk of static Comparable.< infix(_:_:)();
      ((void (*)(char *, uint64_t))v10)(v78, a5);
      ((void (*)(char *, uint64_t))v10)(v42, a5);
      if (v86) {
        goto LABEL_60;
      }
      goto LABEL_20;
    }
    uint64_t v43 = dispatch thunk of BinaryInteger._lowWord.getter();
    unint64_t v44 = v42;
    uint64_t v45 = v43;
    uint64_t v46 = v44;
LABEL_59:
    ((void (*)(char *, uint64_t))v10)(v46, a5);
    if (v45 < v105) {
      goto LABEL_60;
    }
LABEL_20:
    uint64_t v49 = dispatch thunk of BinaryInteger.bitWidth.getter();
    unint64_t v50 = v98;
    v101(v98, v31, a5);
    uint64_t v89 = (char *)v10;
    if (v49 < 65)
    {
      uint64_t v58 = dispatch thunk of BinaryInteger.bitWidth.getter();
      ((void (*)(char *, uint64_t))v10)(v50, a5);
      if (v58 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
      {
LABEL_32:
        uint64_t v62 = dispatch thunk of BinaryInteger._lowWord.getter();
        ((void (*)(char *, uint64_t))v10)(v31, a5);
        uint64_t v10 = v62 & v36;
        LOBYTE(v62)  = dispatch thunk of static BinaryInteger.isSigned.getter();
        uint64_t v63 = dispatch thunk of BinaryInteger.bitWidth.getter();
        if (v62)
        {
          if (v63 > 64)
          {
            int64_t v105 = v10;
            sub_10003AAFC();
            uint64_t v64 = v100;
            dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
            char v65 = dispatch thunk of static Equatable.== infix(_:_:)();
            ((void (*)(char *, uint64_t))v89)(v64, a5);
            if ((v65 & 1) == 0) {
              goto LABEL_3;
            }
            goto LABEL_41;
          }
        }
        else if (v63 > 63)
        {
          int64_t v105 = v10;
          int8x16_t v68 = v88;
          v101(v88, v103, a5);
          if (v10 < 0)
          {
            ((void (*)(char *, uint64_t))v89)(v68, a5);
            goto LABEL_3;
          }
          sub_10003AAFC();
          char v69 = v100;
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
          char v70 = dispatch thunk of static Equatable.== infix(_:_:)();
          long long v71 = (void (*)(char *, uint64_t))v89;
          ((void (*)(char *, uint64_t))v89)(v69, a5);
          v71(v68, a5);
          if ((v70 & 1) == 0)
          {
LABEL_3:
            sub_10000F000();
            swift_allocError();
            *(void *)uint64_t v34 = 0;
            *(void *)(v34 + 8)  = 0;
            *(unsigned char *)(v34 + 16)  = 2;
            return swift_willThrow();
          }
          goto LABEL_41;
        }
        uint64_t v66 = v100;
        v101(v100, v103, a5);
        uint64_t v67 = dispatch thunk of BinaryInteger._lowWord.getter();
        ((void (*)(char *, uint64_t))v89)(v66, a5);
        if (v10 != v67) {
          goto LABEL_3;
        }
LABEL_41:
        unint64_t v26 = v97;
        if (v97 <= -65)
        {
LABEL_42:
          uint64_t v72 = v10 >> 63;
LABEL_52:
          int64_t v105 = v72;
          sub_10003AAFC();
          dispatch thunk of BinaryInteger.init<A>(_:)();
          return dispatch thunk of OptionSet.init(rawValue:)();
        }
        if (v97 > 64)
        {
          uint64_t v72 = 0;
          goto LABEL_52;
        }
        if ((v97 & 0x8000000000000000) == 0)
        {
          uint64_t v72 = v10 << v97;
          if ((unint64_t)v97 >= 0x40) {
            uint64_t v72 = 0;
          }
          goto LABEL_52;
        }
LABEL_67:
        if (v26 > 0xFFFFFFFFFFFFFFC0)
        {
          uint64_t v72 = v10 >> -(char)v97;
          goto LABEL_52;
        }
        goto LABEL_42;
      }
    }
    else
    {
      ((void (*)(char *, uint64_t))v10)(v50, a5);
    }
    v101(v99, v31, a5);
    int64_t v105 = 0x7FFFFFFFFFFFFFFFLL;
    char v51 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v52 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v51)
    {
      if (v52 > 64)
      {
        sub_10003AAFC();
        long long v53 = v100;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        unint64_t v54 = v99;
        char v55 = dispatch thunk of static Comparable.< infix(_:_:)();
        uint64_t v56 = v53;
        uint64_t v10 = (uint64_t)v89;
        ((void (*)(char *, uint64_t))v89)(v56, a5);
        unsigned __int8 v57 = v54;
        goto LABEL_31;
      }
    }
    else if (v52 > 63)
    {
      uint64_t v104 = 0x7FFFFFFFFFFFFFFFLL;
      int8x16_t v60 = v100;
      (*(void (**)(char *, char *, uint64_t))(v102 + 32))(v100, v99, a5);
      sub_10003AAFC();
      uint64_t v61 = v87;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v55 = dispatch thunk of static Comparable.< infix(_:_:)();
      ((void (*)(uint64_t, uint64_t))v89)(v61, a5);
      unsigned __int8 v57 = v60;
      uint64_t v10 = (uint64_t)v89;
LABEL_31:
      ((void (*)(char *, uint64_t))v10)(v57, a5);
      if ((v55 & 1) == 0) {
        goto LABEL_32;
      }
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }
    long long v59 = v99;
    dispatch thunk of BinaryInteger._lowWord.getter();
    ((void (*)(char *, uint64_t))v10)(v59, a5);
    goto LABEL_32;
  }
  char v73 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v74 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v73 & 1) == 0)
  {
    if (v74 < 64)
    {
      char v79 = v89;
      uint64_t v45 = dispatch thunk of BinaryInteger._lowWord.getter();
      uint64_t v46 = v79;
      goto LABEL_59;
    }
    uint64_t v47 = v89;
    uint64_t v48 = a5;
LABEL_19:
    ((void (*)(char *, uint64_t))v10)(v47, v48);
    goto LABEL_20;
  }
  if (v74 <= 64) {
    goto LABEL_61;
  }
  sub_10003AAFC();
  long long v75 = v100;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  long long v76 = v89;
  char v77 = dispatch thunk of static Comparable.< infix(_:_:)();
  ((void (*)(char *, uint64_t))v10)(v75, a5);
  ((void (*)(char *, uint64_t))v10)(v76, a5);
  if ((v77 & 1) == 0) {
    goto LABEL_20;
  }
LABEL_60:
  while (1)
  {
    __break(1u);
LABEL_61:
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    uint64_t v80 = v100;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    long long v81 = v89;
    LODWORD(v86)  = dispatch thunk of static Comparable.< infix(_:_:)();
    ((void (*)(char *, uint64_t))v10)(v80, a5);
    uint64_t v82 = v85;
    (*(void (**)(uint64_t, char *, uint64_t))(v102 + 32))(v85, v81, a5);
    if (v86) {
      break;
    }
    uint64_t v89 = (char *)v105;
    uint64_t v83 = dispatch thunk of BinaryInteger._lowWord.getter();
    ((void (*)(uint64_t, uint64_t))v10)(v82, a5);
    if (v83 >= (uint64_t)v89) {
      goto LABEL_20;
    }
  }
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v10)(v82, a5);
  __break(1u);
  return result;
}

void *sub_1001DE55C(int a1, size_t a2)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (!a2) {
      return _swiftEmptyArrayStorage;
    }
    uint64_t v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v4 + 16)  = a2;
    memset((void *)(v4 + 32), a1, a2);
    return (void *)v4;
  }
  return result;
}

uint64_t static OptionSet<>.withValue<A>(_:at:withBitCount:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X7>, uint64_t a6@<X8>, uint64_t a7)
{
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  uint64_t v15 = a7;
  uint64_t v16 = a3;
  AssociatedTypeWitness  = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  unint64_t v13 = (char *)&v15 - v12;
  dispatch thunk of RawRepresentable.rawValue.getter();
  static OptionSet<>.withValue<A>(_:at:withBitCount:)(v13, a1, a2, v16, AssociatedTypeWitness, v17, v15, v18, a6);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
}

uint64_t static OptionSet<>.withBool(_:at:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v13 = a1 & 1;
  unint64_t v11 = sub_1000E4CC4();
  return static OptionSet<>.withValue<A>(_:at:withBitCount:)((char *)&v13, a2, 1, a3, (uint64_t)&type metadata for Int, a4, v11, a5, a6);
}

uint64_t sub_1001DE7F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native  = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  unint64_t v3 = sub_1000C5698(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2]  = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001DE944(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native  = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  unint64_t v3 = sub_1000C568C(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (char *)v3 + v8 + 32;
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2]  = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001DEA8C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native  = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  unint64_t v3 = sub_1000C5C4C(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = &v3[v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + 8 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 8 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2]  = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001DEBD4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native  = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  unint64_t v3 = sub_1000C6B30(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2]  = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *Dictionary<>.serializeForCoreAnalytics()(void *a1)
{
  int64_t v4 = a1;
  type metadata accessor for Dictionary();
  sub_100010BCC(&qword_10047E248);
  swift_getWitnessTable();
  if (*(void *)(Sequence.compactMap<A>(_:)() + 16))
  {
    sub_100010BCC(&qword_100481078);
    uint64_t v1 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v1 = &_swiftEmptyDictionarySingleton;
  }
  int64_t v4 = v1;
  uint64_t v2 = (void *)swift_bridgeObjectRetain();
  sub_10018AE84(v2, 1, &v4);
  swift_bridgeObjectRelease();
  return v4;
}

{
  void *v1;
  void *v2;
  void *v4;

  int64_t v4 = a1;
  type metadata accessor for Dictionary();
  sub_100010BCC(&qword_10047E248);
  swift_getWitnessTable();
  if (*(void *)(Sequence.compactMap<A>(_:)() + 16))
  {
    sub_100010BCC(&qword_100481078);
    uint64_t v1 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v1 = &_swiftEmptyDictionarySingleton;
  }
  int64_t v4 = v1;
  uint64_t v2 = (void *)swift_bridgeObjectRetain();
  sub_10018AE84(v2, 1, &v4);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1001DEF70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, void *a5@<X8>)
{
  uint64_t v30 = a4;
  uint64_t v33 = a5;
  uint64_t v31 = *(void *)(swift_getTupleTypeMetadata2() - 8);
  __chkstk_darwin();
  uint64_t v29 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin();
  uint64_t v11 = (char *)&v26 - v10;
  uint64_t v27 = v9;
  uint64_t v12 = *(int *)(v9 + 48);
  uint64_t v13 = (char *)&v26 + v12 - v10;
  uint64_t v14 = a1 + v12;
  uint64_t v15 = *(void *)(a2 - 8);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  uint64_t v32 = a1;
  unint64_t v26 = v16;
  v16((char *)&v26 - v10, a1, a2);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16);
  uint64_t v28 = v14;
  v17(v13, v14, a3);
  sub_10003715C();
  if (swift_dynamicCast())
  {
    uint64_t v18 = v34;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v11, a2);
    uint64_t result = dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v20 = v34;
    uint64_t v21 = v35;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v11, a2);
    uint64_t v22 = v27;
    uint64_t v23 = v29;
    uint64_t v24 = &v29[*(int *)(v27 + 48)];
    v26(v29, v32, a2);
    v17(v24, v28, a3);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v23, v22);
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v18 = 0;
  }
  uint64_t v25 = v33;
  *uint64_t v33 = v20;
  v25[1]  = v21;
  v25[2]  = v18;
  return result;
}

uint64_t sub_1001DF1FC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v30 = a3;
  TupleTypeMetadata2  = swift_getTupleTypeMetadata2();
  uint64_t v29 = *(void *)(TupleTypeMetadata2 - 8);
  __chkstk_darwin();
  uint64_t v7 = (uint64_t *)((char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = __chkstk_darwin();
  uint64_t v10 = (uint64_t *)((char *)&v28 - v9);
  uint64_t v11 = *(int *)(v8 + 48);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = a1[1];
  *uint64_t v10 = *a1;
  v10[1]  = v13;
  uint64_t v14 = *(void *)(a2 - 8);
  uint64_t v15 = *(void (**)(void))(v14 + 16);
  ((void (*)(char *, char *, uint64_t))v15)((char *)&v28 + v11 - v9, (char *)a1 + v11, a2);
  sub_10003715C();
  if (swift_dynamicCast())
  {
    uint64_t v29 = v31;
    uint64_t v16 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v18 = *a1;
    uint64_t v17 = a1[1];
    *uint64_t v7 = *a1;
    v7[1]  = v17;
    uint64_t v19 = (char *)v7 + v16;
    v15();
    uint64_t v20 = *(uint64_t (**)(char *, uint64_t))(v14 + 8);
    swift_bridgeObjectRetain();
    uint64_t result = v20(v19, a2);
    uint64_t v22 = v29;
  }
  else
  {
    uint64_t v23 = (char *)v7 + *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v24 = *a1;
    uint64_t v25 = a1[1];
    *uint64_t v7 = v24;
    v7[1]  = v25;
    ((void (*)(char *, char *, uint64_t))v15)(v23, v12, a2);
    unint64_t v26 = *(uint64_t (**)(void *, uint64_t))(v29 + 8);
    swift_bridgeObjectRetain();
    uint64_t result = v26(v7, TupleTypeMetadata2);
    uint64_t v18 = 0;
    uint64_t v17 = 0;
    uint64_t v22 = 0;
  }
  uint64_t v27 = v30;
  *uint64_t v30 = v18;
  v27[1]  = v17;
  v27[2]  = v22;
  return result;
}

uint64_t sub_1001DF438(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t (*a4)(unsigned char *, void), uint64_t *a5, uint64_t a6)
{
  dispatch thunk of RawRepresentable.rawValue.getter();
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (*(void *)(v14 + 16) <= a2)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  LOBYTE(a2)  = *(unsigned char *)(v14 + a2 + 32);
  swift_bridgeObjectRelease();
  a4  = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t))(a6 + 24))(v13, a5, a6);
  a5  = v11;
  a6  = *v11;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *a5  = a6;
  if (result)
  {
    if ((a1 & 0x8000000000000000) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
LABEL_9:
  uint64_t result = (uint64_t)sub_1001DFD70((void *)a6);
  a6  = result;
  *a5  = result;
  if ((a1 & 0x8000000000000000) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if (*(void *)(a6 + 16) > a1)
  {
    *(unsigned char *)(a6 + a1 + 32) |= a2;
    return a4(v13, 0);
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1001DF554(unint64_t a1, unint64_t a2)
{
  return sub_1001DF438(a1, a2, *(void *)(v2 + 32), *(uint64_t (**)(unsigned char *, void))(v2 + 40), *(uint64_t **)(v2 + 16), *(void *)(v2 + 24));
}

unint64_t sub_1001DF560(unint64_t result)
{
  if (result)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      unint64_t v2 = *(void *)(*(void *)v1 + 16);
      BOOL v3 = v2 >= result;
      uint64_t result = v2 - result;
      if (v3) {
        return (unint64_t)sub_10022B294(result, v2);
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1001DF588(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t (*a4)(unsigned char *, void), uint64_t *a5, uint64_t a6)
{
  dispatch thunk of RawRepresentable.rawValue.getter();
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (*(void *)(v14 + 16) <= a2)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  LOBYTE(a2)  = *(unsigned char *)(v14 + a2 + 32);
  swift_bridgeObjectRelease();
  a4  = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t))(a6 + 24))(v13, a5, a6);
  a5  = v11;
  a6  = *v11;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *a5  = a6;
  if (result)
  {
    if ((a1 & 0x8000000000000000) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
LABEL_9:
  uint64_t result = (uint64_t)sub_1001DFD70((void *)a6);
  a6  = result;
  *a5  = result;
  if ((a1 & 0x8000000000000000) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if (*(void *)(a6 + 16) > a1)
  {
    *(unsigned char *)(a6 + a1 + 32) &= a2;
    return a4(v13, 0);
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1001DF6A4(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t (*a4)(void *, void), uint64_t *a5, uint64_t a6)
{
  dispatch thunk of RawRepresentable.rawValue.getter();
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (*(void *)(v13[0] + 16) <= a2)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  LOBYTE(a2)  = *(unsigned char *)(v13[0] + a2 + 32);
  swift_bridgeObjectRelease();
  a4  = (uint64_t (*)(void *, void))(*(uint64_t (**)(void *, uint64_t *, uint64_t))(a6 + 24))(v13, a5, a6);
  a5  = v11;
  a6  = *v11;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *a5  = a6;
  if (result)
  {
    if ((a1 & 0x8000000000000000) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
LABEL_9:
  uint64_t result = (uint64_t)sub_1001DFD70((void *)a6);
  a6  = result;
  *a5  = result;
  if ((a1 & 0x8000000000000000) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if (*(void *)(a6 + 16) > a1)
  {
    *(unsigned char *)(a6 + a1 + 32) &= ~(_BYTE)a2;
    return a4(v13, 0);
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t ExtendableOptionSet.init<A>(bitOffset:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v38 = a2;
  uint64_t v39 = a4;
  uint64_t v37 = a6;
  uint64_t v36 = *(void *)(*(void *)(*(void *)(a5 + 8) + 24) + 16);
  swift_getAssociatedTypeWitness();
  __chkstk_darwin();
  uint64_t v35 = (char *)v32 - v10;
  uint64_t v11 = *(void *)(a3 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v41 = (char *)v32 - v14;
  __chkstk_darwin();
  uint64_t v16 = (char *)v32 - v15;
  __chkstk_darwin();
  uint64_t v18 = (char *)v32 - v17;
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  char v40 = a1;
  uint64_t v34 = v19;
  v19((char *)v32 - v17, a1, a3);
  char v20 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v33 = v13;
  if (v20)
  {
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    char v21 = dispatch thunk of static Comparable.>= infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, a3);
    if ((v21 & 1) == 0) {
      goto LABEL_16;
    }
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
  {
LABEL_14:
    unint64_t v29 = dispatch thunk of BinaryInteger._lowWord.getter();
    uint64_t v30 = *(void (**)(char *, uint64_t))(v11 + 8);
    v30(v18, a3);
    ExtendableOptionSet.init(bitOffset:)(v29);
    return ((uint64_t (*)(char *, uint64_t))v30)(v40, a3);
  }
  v32[1]  = v7;
  v34(v41, v18, a3);
  uint64_t v42 = -1;
  char v22 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v23 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v22 & 1) == 0)
  {
    if (v23 < 65)
    {
      dispatch thunk of BinaryInteger._lowWord.getter();
      uint64_t v24 = *(void (**)(char *, uint64_t))(v11 + 8);
      goto LABEL_13;
    }
LABEL_10:
    sub_100192254();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v28 = dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t v24 = *(void (**)(char *, uint64_t))(v11 + 8);
    v24(v16, a3);
    if (v28) {
      goto LABEL_16;
    }
    goto LABEL_13;
  }
  if (v23 > 64) {
    goto LABEL_10;
  }
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  LODWORD(v36)  = dispatch thunk of static Comparable.> infix(_:_:)();
  uint64_t v24 = *(void (**)(char *, uint64_t))(v11 + 8);
  v24(v16, a3);
  unint64_t v25 = v42;
  unint64_t v26 = v33;
  v34(v33, v41, a3);
  if ((v36 & 1) == 0)
  {
    v24(v26, a3);
    goto LABEL_13;
  }
  unint64_t v27 = dispatch thunk of BinaryInteger._lowWord.getter();
  v24(v26, a3);
  if (v25 >= v27)
  {
LABEL_13:
    v24(v41, a3);
    goto LABEL_14;
  }
LABEL_16:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_1001DFD48(void *a1)
{
  return sub_1000C5698(0, a1[2], 0, a1);
}

void *sub_1001DFD5C(void *a1)
{
  return sub_1000C5E6C(0, a1[2], 0, a1);
}

void *sub_1001DFD70(void *a1)
{
  return sub_1000C568C(0, a1[2], 0, a1);
}

void *sub_1001DFD84(void *a1)
{
  return sub_1000C67EC(0, a1[2], 0, a1);
}

void *sub_1001DFD98(void *a1)
{
  return sub_1000C6B30(0, a1[2], 0, a1);
}

void *sub_1001DFDAC(void *a1)
{
  return sub_1000C6C40(0, a1[2], 0, a1);
}

uint64_t sub_1001DFDC0(unint64_t a1)
{
  return sub_1000C70B0(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_1001DFDD4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (result != a2)
  {
    uint64_t v6 = result;
    if (a2 < result)
    {
LABEL_15:
      __break(1u);
      goto LABEL_16;
    }
    if (result >= a2)
    {
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
    uint64_t v8 = a3;
    if (a3 != a4)
    {
      if (a4 < a3)
      {
LABEL_17:
        __break(1u);
        return result;
      }
      uint64_t v10 = result + 1;
      while (v8 < a4)
      {
        uint64_t result = a5(v10 - 1, v8);
        if (a2 == v10) {
          return result;
        }
        if (v10 < v6 || v10 >= a2) {
          goto LABEL_14;
        }
        ++v8;
        ++v10;
        if (a4 == v8) {
          return result;
        }
      }
      __break(1u);
LABEL_14:
      __break(1u);
      goto LABEL_15;
    }
  }
  return result;
}

void *sub_1001DFEA8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5 = a4 >> 1;
  int64_t v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v7 = *(void **)v4;
  int64_t v8 = *(void *)(*(void *)v4 + 16);
  int64_t v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!result || v9 > v7[3] >> 1) {
    goto LABEL_8;
  }
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9) {
        int64_t v13 = v8 + v6;
      }
      else {
        int64_t v13 = v8;
      }
      uint64_t result = sub_1000C568C(result, v13, 1, v7);
      uint64_t v7 = result;
      if (v5 != a3) {
        goto LABEL_12;
      }
    }
    goto LABEL_22;
  }
LABEL_12:
  uint64_t v14 = v7[2];
  if ((v7[3] >> 1) - v14 < v6) {
    goto LABEL_25;
  }
  if (v6 < 0) {
    goto LABEL_27;
  }
  uint64_t v15 = (char *)v7 + v14 + 32;
  if (a2 + a3 < (unint64_t)&v15[v6] && (unint64_t)v15 < a2 + a3 + v6) {
    goto LABEL_27;
  }
  uint64_t result = memcpy(v15, (const void *)(a2 + a3), v6);
  if (!v6)
  {
LABEL_22:
    *(void *)uint64_t v4 = v7;
    return result;
  }
  uint64_t v17 = v7[2];
  BOOL v18 = __OFADD__(v17, v6);
  uint64_t v19 = v17 + v6;
  if (!v18)
  {
    v7[2]  = v19;
    goto LABEL_22;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001E0040(unint64_t a1, unint64_t a2)
{
  return sub_1001DF588(a1, a2, *(void *)(v2 + 32), *(uint64_t (**)(unsigned char *, void))(v2 + 40), *(uint64_t **)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1001E004C(unint64_t a1, unint64_t a2)
{
  return sub_1001DF6A4(a1, a2, *(void *)(v2 + 32), *(uint64_t (**)(void *, void))(v2 + 40), *(uint64_t **)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1001E0058@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1001DEF70(a1, v2[2], v2[3], v2[5], a2);
}

uint64_t sub_1001E0078@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_1001DF1FC(a1, *(void *)(v2 + 16), a2);
}

void *InfraStatistics.none.unsafeMutableAddressor()
{
  return &static InfraStatistics.none;
}

uint64_t TrafficClass.description.getter(char a1)
{
  uint64_t result = 0x756F72676B636142;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6666452074736542;
      break;
    case 2:
      uint64_t result = 0x6563696F56;
      break;
    case 3:
      uint64_t result = 0x6F65646956;
      break;
    default:
      return result;
  }
  return result;
}

_UNKNOWN **static TrafficClass.allCases.getter()
{
  return &off_100450630;
}

uint64_t TrafficClass.rawValue.getter(char a1)
{
  return *(void *)&aBk_0[8 * a1];
}

uint64_t sub_1001E0160(char *a1, char *a2)
{
  return sub_100042618(*a1, *a2);
}

unint64_t sub_1001E016C@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = _s7CoreP2P12TrafficClassO8rawValueACSgSS_tcfC_0(*a1);
  *a2  = result;
  return result;
}

void sub_1001E019C(void *a1@<X8>)
{
  *a1  = *(void *)&aBk_0[8 * *v1];
  a1[1]  = 0xE200000000000000;
}

Swift::Int sub_1001E01B8()
{
  return Hasher._finalize()();
}

uint64_t sub_1001E0214()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001E0254()
{
  return Hasher._finalize()();
}

void sub_1001E02AC(void *a1@<X8>)
{
  *a1  = &off_100450658;
}

uint64_t sub_1001E02BC()
{
  uint64_t result = 0x756F72676B636142;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6666452074736542;
      break;
    case 2:
      uint64_t result = 0x6563696F56;
      break;
    case 3:
      uint64_t result = 0x6F65646956;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001E0350()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001E03B0()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t TrafficType.description.getter(char a1)
{
  uint64_t result = 1701736270;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6D6974206C616552;
      break;
    case 2:
      uint64_t result = 0x6E696D6165727453;
      break;
    case 3:
      uint64_t result = 0x746164206B6C7542;
      break;
    default:
      return result;
  }
  return result;
}

_UNKNOWN **static TrafficType.allCases.getter()
{
  return &off_100450680;
}

void sub_1001E04AC(void *a1@<X8>)
{
  *a1  = &off_1004506A8;
}

uint64_t sub_1001E04BC()
{
  uint64_t result = 1701736270;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6D6974206C616552;
      break;
    case 2:
      uint64_t result = 0x6E696D6165727453;
      break;
    case 3:
      uint64_t result = 0x746164206B6C7542;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t TrafficState.description.getter(char a1)
{
  uint64_t result = 1701602377;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6D6974206C616552;
      break;
    case 2:
      uint64_t result = 0x6E696D6165727453;
      break;
    case 3:
      uint64_t result = 0x746164206B6C7542;
      break;
    case 4:
      uint64_t result = 0x697469736E617254;
      break;
    default:
      return result;
  }
  return result;
}

_UNKNOWN **static TrafficState.allCases.getter()
{
  return &off_1004506D0;
}

void sub_1001E062C(void *a1@<X8>)
{
  *a1  = &off_1004506F8;
}

uint64_t sub_1001E063C()
{
  uint64_t result = 1701602377;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6D6974206C616552;
      break;
    case 2:
      uint64_t result = 0x6E696D6165727453;
      break;
    case 3:
      uint64_t result = 0x746164206B6C7542;
      break;
    case 4:
      uint64_t result = 0x697469736E617254;
      break;
    default:
      return result;
  }
  return result;
}

double InfrastructureQualityOfService.availabilityPercentage.getter(char a1)
{
  return dbl_1003C96B8[a1];
}

uint64_t InfrastructureQualityOfService.description.getter()
{
  v0._countAndFlagsBits  = 0x2072656954;
  v0._object  = (void *)0xE500000000000000;
  String.append(_:)(v0);
  v1._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits  = 10272;
  v2._object  = (void *)0xE200000000000000;
  String.append(_:)(v2);
  Double.write<A>(to:)();
  v3._countAndFlagsBits  = 10533;
  v3._object  = (void *)0xE200000000000000;
  String.append(_:)(v3);
  return 0;
}

BOOL static InfrastructureQualityOfService.> infix(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  return a2 < a1;
}

Swift::Int sub_1001E07FC()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

void sub_1001E0844()
{
  Hasher._combine(_:)(*v0 + 1);
}

Swift::Int sub_1001E0874()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

uint64_t sub_1001E08B8@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = _s7CoreP2P30InfrastructureQualityOfServiceO8rawValueACSgSi_tcfC_0(*a1);
  *a2  = result;
  return result;
}

void sub_1001E08E4(void *a1@<X8>)
{
  *a1  = *v1 + 1;
}

uint64_t sub_1001E08F4()
{
  return InfrastructureQualityOfService.description.getter();
}

double NANQualityOfService.availabilityPercentage.getter(char a1)
{
  return dbl_1003C9700[a1];
}

uint64_t NANQualityOfService.description.getter(char a1)
{
  switch(a1)
  {
    case 5:
      v6._countAndFlagsBits  = 0x656D69546C616552;
      v6._object  = (void *)0xEA00000000002820;
      String.append(_:)(v6);
      break;
    default:
      v1._countAndFlagsBits  = 0x2072656954;
      v1._object  = (void *)0xE500000000000000;
      String.append(_:)(v1);
      v2._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v2);
      swift_bridgeObjectRelease();
      v3._countAndFlagsBits  = 10272;
      v3._object  = (void *)0xE200000000000000;
      String.append(_:)(v3);
      break;
  }
  Double.write<A>(to:)();
  v4._countAndFlagsBits  = 10533;
  v4._object  = (void *)0xE200000000000000;
  String.append(_:)(v4);
  return 0;
}

BOOL static NANQualityOfService.< infix(_:_:)(char a1, char a2)
{
  return dbl_1003C9700[a1] < dbl_1003C9700[a2];
}

_UNKNOWN **static NANQualityOfService.allCases.getter()
{
  return &off_100450720;
}

void sub_1001E0AB0(void *a1@<X8>)
{
  *a1  = &off_100450720;
}

uint64_t sub_1001E0AC0()
{
  return NANQualityOfService.description.getter(*v0);
}

BOOL sub_1001E0AC8(char *a1, char *a2)
{
  return dbl_1003C9700[*a1] < dbl_1003C9700[*a2];
}

BOOL sub_1001E0AEC(char *a1, char *a2)
{
  return dbl_1003C9700[*a2] >= dbl_1003C9700[*a1];
}

BOOL sub_1001E0B10(char *a1, char *a2)
{
  return dbl_1003C9700[*a1] >= dbl_1003C9700[*a2];
}

BOOL sub_1001E0B34(char *a1, char *a2)
{
  return dbl_1003C9700[*a2] < dbl_1003C9700[*a1];
}

void *InfraStatistics.infraRealtimePacketThreshold.unsafeMutableAddressor()
{
  return &static InfraStatistics.infraRealtimePacketThreshold;
}

void *InfraStatistics.infraStreamingPacketLengthThreshold.unsafeMutableAddressor()
{
  return &static InfraStatistics.infraStreamingPacketLengthThreshold;
}

uint64_t static InfraStatistics.infraStreamingPacketLengthThreshold.getter()
{
  return 1400;
}

void *InfraStatistics.infraEstimatedOverhead.unsafeMutableAddressor()
{
  return &static InfraStatistics.infraEstimatedOverhead;
}

double static InfraStatistics.infraEstimatedOverhead.getter()
{
  return 0.7;
}

void *InfraStatistics.infra5GHzBulkDataUtilizationThreshold.unsafeMutableAddressor()
{
  return &static InfraStatistics.infra5GHzBulkDataUtilizationThreshold;
}

double static InfraStatistics.infra5GHzBulkDataUtilizationThreshold.getter()
{
  return 0.8;
}

void *InfraStatistics.infra2_4GHzBulkDataUtilizationThreshold.unsafeMutableAddressor()
{
  return &static InfraStatistics.infra2_4GHzBulkDataUtilizationThreshold;
}

double static InfraStatistics.infra2_4GHzBulkDataUtilizationThreshold.getter()
{
  return 0.5;
}

unint64_t _s7CoreP2P12TrafficClassO8rawValueACSgSS_tcfC_0(Swift::String string)
{
  object  = string._object;
  v2._countAndFlagsBits  = string._countAndFlagsBits;
  v2._object  = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10044E518, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t _s7CoreP2P30InfrastructureQualityOfServiceO8rawValueACSgSi_tcfC_0(unint64_t a1)
{
  if (a1 >= 5) {
    return 4;
  }
  else {
    return (0x302010004uLL >> (8 * a1));
  }
}

unint64_t sub_1001E0C34()
{
  unint64_t result = qword_1004824F0;
  if (!qword_1004824F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004824F0);
  }
  return result;
}

uint64_t sub_1001E0C88()
{
  return sub_100071B44(&qword_1004824F8, &qword_100482500);
}

unint64_t sub_1001E0CB4()
{
  unint64_t result = qword_100482508;
  if (!qword_100482508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482508);
  }
  return result;
}

uint64_t sub_1001E0D08()
{
  return sub_100071B44(&qword_100482510, &qword_100482518);
}

unint64_t sub_1001E0D34()
{
  unint64_t result = qword_100482520;
  if (!qword_100482520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482520);
  }
  return result;
}

uint64_t sub_1001E0D88()
{
  return sub_100071B44(&qword_100482528, &qword_100482530);
}

unint64_t sub_1001E0DB4()
{
  unint64_t result = qword_100482538;
  if (!qword_100482538)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482538);
  }
  return result;
}

unint64_t sub_1001E0E0C()
{
  unint64_t result = qword_100482540;
  if (!qword_100482540)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482540);
  }
  return result;
}

uint64_t sub_1001E0E60()
{
  return sub_100071B44(&qword_100482548, &qword_100482550);
}

ValueMetadata *type metadata accessor for TrafficClass()
{
  return &type metadata for TrafficClass;
}

ValueMetadata *type metadata accessor for TrafficType()
{
  return &type metadata for TrafficType;
}

unsigned char *storeEnumTagSinglePayload for TrafficState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001E0F78);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TrafficState()
{
  return &type metadata for TrafficState;
}

unsigned char *_s7CoreP2P12TrafficClassOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001E107CLL);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InfrastructureQualityOfService()
{
  return &type metadata for InfrastructureQualityOfService;
}

unsigned char *storeEnumTagSinglePayload for NANQualityOfService(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001E1180);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANQualityOfService()
{
  return &type metadata for NANQualityOfService;
}

uint64_t getEnumTagSinglePayload for InfraStatistics(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 112)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for InfraStatistics(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 104)  = 0;
    *(_OWORD *)(result + 88)  = 0u;
    *(_OWORD *)(result + 72)  = 0u;
    *(_OWORD *)(result + 56)  = 0u;
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 112)  = v3;
  return result;
}

ValueMetadata *type metadata accessor for InfraStatistics()
{
  return &type metadata for InfraStatistics;
}

unint64_t sub_1001E1230()
{
  unint64_t result = qword_100482558;
  if (!qword_100482558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482558);
  }
  return result;
}

void *NANAttribute.DeviceCapability.OperationMode.vht.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceCapability.OperationMode.vht;
}

CoreP2P::NANAttribute::DeviceCapability::AnntenaCount __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NANAttribute.DeviceCapability.AnntenaCount.init(txAnntenaCount:rxAnntenaCount:)(Swift::Int txAnntenaCount, Swift::Int rxAnntenaCount)
{
  sub_100010BCC(&qword_10047C930);
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 24)  = 4;
  char v6 = sub_1001E1DC0(txAnntenaCount, 0, 4);
  if (v2)
  {
    *(void *)(inited + 16)  = 0;
    swift_release();
  }
  else
  {
    *(unsigned char *)(inited + 32)  = v6;
    unsigned __int8 v7 = sub_1001E1DC0(rxAnntenaCount, 4, 4);
    *(unsigned char *)(inited + 33)  = v7;
    char v9 = *(unsigned char *)(inited + 32);
    if ((v7 & ~v9) != 0) {
      unsigned __int8 v10 = v7;
    }
    else {
      unsigned __int8 v10 = 0;
    }
    LOBYTE(rxAnntenaCount)  = v10 | v9;
    swift_setDeallocating();
  }
  return (CoreP2P::NANAttribute::DeviceCapability::AnntenaCount)rxAnntenaCount;
}

void *NANAttribute.CustomDeviceInformation.Version.latest.unsafeMutableAddressor()
{
  return &static NANAttribute.CustomDeviceInformation.Version.latest;
}

void *sub_1001E1368(__int16 a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = (HIBYTE(a1) - a1);
  unsigned int v14 = HIBYTE(a1);
  unsigned __int8 v15 = a1;
  if (HIBYTE(a1) < a1) {
    uint64_t v5 = -(uint64_t)(a1 - HIBYTE(a1));
  }
  else {
    uint64_t v5 = (HIBYTE(a1) - a1);
  }
  if (!v5) {
    return _swiftEmptyArrayStorage;
  }
  unint64_t result = (void *)sub_10008349C(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    LODWORD(v7)  = v14 - v15;
    if (v14 >= v15) {
      uint64_t v7 = v7;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = -v7;
    while (v5)
    {
      sub_100039448(a2, *(void *)(a2 + 24));
      sub_10022F0A4();
      unint64_t result = (void *)UnkeyedDecodingContainer.inferredDecode<A>()();
      if (v3)
      {
        swift_release();
        return _swiftEmptyArrayStorage;
      }
      char v9 = v19;
      unint64_t v11 = _swiftEmptyArrayStorage[2];
      unint64_t v10 = _swiftEmptyArrayStorage[3];
      if (v11 >= v10 >> 1)
      {
        unint64_t result = (void *)sub_10008349C(v10 > 1, v11 + 1, 1);
        char v9 = v19;
      }
      _swiftEmptyArrayStorage[2]  = v11 + 1;
      uint64_t v12 = &_swiftEmptyArrayStorage[2 * v11];
      *((_DWORD *)v12 + 8)  = v16;
      *(void *)((char *)v12 + 36)  = v17;
      *((unsigned char *)v12 + 44)  = v18;
      *((unsigned char *)v12 + 45)  = v9;
      if (v14 < v15) {
        goto LABEL_21;
      }
      if (!v8) {
        goto LABEL_22;
      }
      ++v8;
      --v5;
      --v4;
      uint64_t v3 = 0;
      if (!v4) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::Int sub_1001E1518()
{
  return Hasher._finalize()();
}

Swift::Int sub_1001E163C()
{
  return Hasher._finalize()();
}

Swift::Int sub_1001E1764(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = (Swift::UInt8 *)(a2 + 32);
    do
    {
      Swift::UInt8 v5 = *v4++;
      Hasher._combine(_:)(v5);
      --v3;
    }
    while (v3);
  }
  return Hasher._finalize()();
}

BOOL sub_1001E17D0(unint64_t a1, __int16 a2, unint64_t a3, __int16 a4)
{
  if ((a2 & 0x100) == 0) {
    return (a4 & 0x100) == 0 && a1 == a3;
  }
  BOOL result = 0;
  if ((a4 & 0x100) != 0
    && a1 == a3
    && WORD1(a1) == WORD1(a3)
    && BYTE4(a1) == BYTE4(a3))
  {
    if (a2)
    {
      if (a4) {
        return 1;
      }
    }
    else if ((a4 & 1) == 0 && HIWORD(a1) == HIWORD(a3))
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1001E1860(uint64_t a1)
{
  return sub_1001E18B8(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10022ED90, (uint64_t (*)(uint64_t, uint64_t))sub_10022FEC4);
}

uint64_t sub_1001E188C(uint64_t a1)
{
  return sub_1001E18B8(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10022FEC8, (uint64_t (*)(uint64_t, uint64_t))sub_10022FEC4);
}

uint64_t sub_1001E18B8(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v7 = *v3;
  uint64_t v10 = *v3;
  swift_bridgeObjectRetain();
  sub_1001E19B8(a1, a2);
  uint64_t v8 = v10;
  if (sub_1000956AC(v10, _swiftEmptyArrayStorage))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_1000AD6BC(a1, a3);
    sub_1001E19B8(v7, a2);
    swift_bridgeObjectRelease();
  }
  return v8;
}

uint64_t sub_1001E1988(uint64_t a1)
{
  return sub_1001E19B8(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10022ED90);
}

uint64_t sub_1001E19A0(uint64_t a1)
{
  return sub_1001E19B8(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10022FEC8);
}

uint64_t sub_1001E19B8(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  unint64_t v4 = *(void *)(*(void *)v2 + 16);
  unint64_t v5 = *(void *)(a1 + 16);
  if (v4 > v5) {
    sub_1001DF560(v4 - v5);
  }
  __chkstk_darwin();
  return sub_1001DFDD4(0, v6, 0, v5, a2);
}

uint64_t sub_1001E1A54(uint64_t a1)
{
  return sub_1000AD6BC(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10022FEC4);
}

uint64_t sub_1001E1A70(unint64_t a1)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    char v1 = a1;
    unint64_t v3 = a1 >> 3;
    uint64_t v2 = sub_1001DE55C(0, (a1 >> 3) + 1);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result) {
      goto LABEL_3;
    }
  }
  uint64_t result = (uint64_t)sub_1001DFD70(v2);
  uint64_t v2 = (void *)result;
LABEL_3:
  if (v3 >= v2[2])
  {
    __break(1u);
  }
  else
  {
    *((unsigned char *)v2 + v3 + 32) |= 1 << (v1 & 7);
    return (uint64_t)v2;
  }
  return result;
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.init()@<X0>(uint64_t a1@<X8>)
{
  *(_WORD *)a1  = 0;
  *(unsigned char *)(a1 + 2)  = 1;
  uint64_t v2 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  uint64_t v3 = a1 + v2[6];
  uint64_t v4 = type metadata accessor for P256.KeyAgreement.PublicKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(_OWORD *)(a1 + v2[7])  = xmmword_1003B4AC0;
  *(_OWORD *)(a1 + v2[8])  = xmmword_1003B4AC0;
  *(_OWORD *)(a1 + v2[9])  = xmmword_1003B4AC0;
  uint64_t v5 = a1 + v2[10];
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *(void *)(a1 + v2[11])  = _swiftEmptyArrayStorage;
  uint64_t v7 = a1 + v2[12];
  uint64_t v8 = type metadata accessor for NANInternetSharingStatistics.Requester();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v10 = a1 + v2[13];
  *(void *)uint64_t v10 = 0;
  *(void *)(v10 + 8)  = 0;
  *(void *)(v10 + 16)  = 0;
  *(unsigned char *)(v10 + 24)  = 1;
  return result;
}

void *NANAttribute.CustomDeviceInformation.Flags.furtherServiceDiscoveryFollowUp.unsafeMutableAddressor()
{
  return &static NANAttribute.CustomDeviceInformation.Flags.furtherServiceDiscoveryFollowUp;
}

uint64_t sub_1001E1C64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001E1DC0(a1, a2, a3);
}

unint64_t sub_1001E1C7C(unsigned __int8 a1, unint64_t a2, uint64_t a3)
{
  return sub_1001E2020(a1, a2, a3);
}

unint64_t sub_1001E1C94(unsigned __int8 a1, unint64_t a2, uint64_t a3)
{
  return sub_1001E1F14(a1, a2, a3);
}

unint64_t sub_1001E1CAC(unint64_t result, unint64_t a2, uint64_t a3)
{
  if (__OFADD__(a2, a3)) {
    goto LABEL_22;
  }
  if ((uint64_t)(a2 + a3) > 16) {
    goto LABEL_15;
  }
  if (a3 < 0) {
    goto LABEL_23;
  }
  uint64_t v3 = 0;
  if (a3)
  {
    unint64_t v4 = 0;
    while (1)
    {
      if (v4 < 0x40) {
        v3 |= 1 << v4;
      }
      if (a3 - 1 == v4) {
        break;
      }
      if (a3 == ++v4)
      {
        __break(1u);
        break;
      }
    }
  }
  if ((result & 0x8000000000000000) != 0) {
    goto LABEL_24;
  }
  if ((result & ~v3) != 0)
  {
LABEL_15:
    sub_10000F000();
    swift_allocError();
    *(void *)uint64_t v5 = 0;
    *(void *)(v5 + 8)  = 0;
    *(unsigned char *)(v5 + 16)  = 2;
    return swift_willThrow();
  }
  else
  {
    if (a2 - 65 < 0xFFFFFFFFFFFFFF7FLL) {
      return 0;
    }
    if ((a2 & 0x8000000000000000) != 0) {
      goto LABEL_26;
    }
    if (a2 >= 0x40) {
      return 0;
    }
    result <<= a2;
    if ((result & 0x8000000000000000) != 0) {
      goto LABEL_25;
    }
    if (result >> 16)
    {
      while (1)
      {
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        if (a2 <= 0xFFFFFFFFFFFFFFC0) {
          break;
        }
        result >>= -(char)a2;
        if (!(result >> 16)) {
          return result;
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1001E1DC0(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (__OFADD__(a2, a3)) {
    goto LABEL_31;
  }
  if (a2 + a3 > 8) {
    goto LABEL_18;
  }
  if (a3 < 0) {
    goto LABEL_32;
  }
  if (a3)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    while (1)
    {
      if (v4 < 0x40) {
        v3 |= 1 << v4;
      }
      if (a3 - 1 == v4) {
        break;
      }
      if (a3 == ++v4)
      {
        __break(1u);
        break;
      }
    }
    if ((result & ~v3) == 0)
    {
      if (a2 <= -65) {
        goto LABEL_22;
      }
      if (a2 > 64) {
        return 0;
      }
      if (a2 < 0) {
        goto LABEL_33;
      }
      if ((unint64_t)a2 >= 0x40) {
        return 0;
      }
      goto LABEL_28;
    }
    goto LABEL_18;
  }
  if (result)
  {
LABEL_18:
    sub_10000F000();
    swift_allocError();
    *(void *)uint64_t v5 = 0;
    *(void *)(v5 + 8)  = 0;
    *(unsigned char *)(v5 + 16)  = 2;
    swift_willThrow();
    return v6;
  }
  if (a2 < -64)
  {
    uint64_t result = 0;
    goto LABEL_22;
  }
  if (a2 > 64) {
    return 0;
  }
  unint64_t v6 = 0;
  uint64_t result = 0;
  if (a2 < 0)
  {
    if ((unint64_t)a2 > 0xFFFFFFFFFFFFFFC0) {
      goto LABEL_36;
    }
    return v6;
  }
  if ((unint64_t)a2 >= 0x40) {
    return v6;
  }
LABEL_28:
  unint64_t v6 = result << a2;
  if (((result << a2) & 0x8000000000000000) == 0)
  {
    while (v6 > 0xFF)
    {
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      if ((unint64_t)a2 > 0xFFFFFFFFFFFFFFC0)
      {
LABEL_36:
        unint64_t v6 = result >> -(char)a2;
        if ((v6 & 0x8000000000000000) != 0) {
          goto LABEL_37;
        }
      }
      else
      {
LABEL_22:
        unint64_t v6 = result >> 63;
        if (result >> 63 < 0) {
          goto LABEL_37;
        }
      }
    }
    return v6;
  }
LABEL_37:
  __break(1u);
  return result;
}

unint64_t sub_1001E1F14(unsigned __int8 a1, unint64_t a2, uint64_t a3)
{
  if (__OFADD__(a2, a3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if ((uint64_t)(a2 + a3) > 16) {
    goto LABEL_14;
  }
  if (a3 < 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v4 = 0;
  if (a3)
  {
    unint64_t v5 = 0;
    while (1)
    {
      if (v5 < 0x40) {
        v4 |= 1 << v5;
      }
      if (a3 - 1 == v5) {
        break;
      }
      if (a3 == ++v5)
      {
        __break(1u);
        break;
      }
    }
  }
  unint64_t v3 = a1;
  if ((~(_BYTE)v4 & a1) != 0)
  {
LABEL_14:
    sub_10000F000();
    swift_allocError();
    *(void *)uint64_t v7 = 0;
    *(void *)(v7 + 8)  = 0;
    *(unsigned char *)(v7 + 16)  = 2;
    return swift_willThrow();
  }
  if (a2 - 65 < 0xFFFFFFFFFFFFFF7FLL) {
    return 0;
  }
  if ((a2 & 0x8000000000000000) != 0) {
    goto LABEL_24;
  }
  if (a2 >= 0x40) {
    return 0;
  }
  unint64_t result = (unint64_t)a1 << a2;
  if (((v3 << a2) & 0x8000000000000000) == 0)
  {
    if (!(result >> 16)) {
      return result;
    }
    __break(1u);
    goto LABEL_21;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  if (a2 <= 0xFFFFFFFFFFFFFFC0) {
    return 0;
  }
  else {
    return v3 >> -(char)a2;
  }
}

unint64_t sub_1001E2020(unsigned __int8 a1, unint64_t a2, uint64_t a3)
{
  if (__OFADD__(a2, a3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if ((uint64_t)(a2 + a3) > 8) {
    goto LABEL_14;
  }
  if (a3 < 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v4 = 0;
  if (a3)
  {
    unint64_t v5 = 0;
    while (1)
    {
      if (v5 < 0x40) {
        v4 |= 1 << v5;
      }
      if (a3 - 1 == v5) {
        break;
      }
      if (a3 == ++v5)
      {
        __break(1u);
        break;
      }
    }
  }
  unint64_t v3 = a1;
  if ((~(_BYTE)v4 & a1) != 0)
  {
LABEL_14:
    sub_10000F000();
    swift_allocError();
    *(void *)uint64_t v7 = 0;
    *(void *)(v7 + 8)  = 0;
    *(unsigned char *)(v7 + 16)  = 2;
    return swift_willThrow();
  }
  if (a2 - 65 < 0xFFFFFFFFFFFFFF7FLL) {
    return 0;
  }
  if ((a2 & 0x8000000000000000) != 0) {
    goto LABEL_24;
  }
  if (a2 >= 0x40) {
    return 0;
  }
  unint64_t result = (unint64_t)a1 << a2;
  if (((v3 << a2) & 0x8000000000000000) == 0)
  {
    if (result <= 0xFF) {
      return result;
    }
    __break(1u);
    goto LABEL_21;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  if (a2 <= 0xFFFFFFFFFFFFFFC0) {
    return 0;
  }
  else {
    return v3 >> -(char)a2;
  }
}

unint64_t NANAttribute.Availability.Control.mapID.getter(__int16 a1)
{
  return sub_10008CA90(0, 4, a1) & 0xF;
}

void *NANAttribute.Availability.Control.potentialChange.unsafeMutableAddressor()
{
  return &static NANAttribute.Availability.Control.potentialChange;
}

CoreP2P::NANAttribute::Availability::Control __swiftcall NANAttribute.Availability.Control.init(mapID:with:)(CoreP2P::NANMapID mapID, CoreP2P::NANAttribute::Availability::Control with)
{
  return (CoreP2P::NANAttribute::Availability::Control)(sub_1001E1F14(mapID.rawValue, 0, 4) | with.rawValue & 0x3F0);
}

CoreP2P::NANAttribute::Availability __swiftcall NANAttribute.Availability.init(sequenceID:control:availabilityEntries:)(Swift::UInt8 sequenceID, CoreP2P::NANAttribute::Availability::Control control, Swift::OpaquePointer availabilityEntries)
{
  int v3 = sequenceID | (*(_DWORD *)&control << 16);
  result.availabilityEntries  = availabilityEntries;
  result.sequenceID  = v3;
  result.control  = *(CoreP2P::NANAttribute::Availability::Control *)((char *)&v3 + 2);
  return result;
}

void *NANAttribute.Availability.Control.committedChange.unsafeMutableAddressor()
{
  return &static NANAttribute.Availability.Control.committedChange;
}

void *sub_1001E2220()
{
  unint64_t v1 = v0[3];
  uint64_t v28 = v0[2];
  uint64_t v2 = BYTE6(v1);
  unsigned int v29 = enum case for DecodingError.valueNotFound(_:);
  unint64_t v3 = v1 >> 62;
  unint64_t v27 = _swiftEmptyArrayStorage;
  while (2)
  {
    uint64_t v4 = v0[4];
    uint64_t v5 = v2;
    switch(v3)
    {
      case 1uLL:
        uint64_t v5 = v28 >> 32;
        goto LABEL_4;
      case 2uLL:
        if (v4 >= *(void *)(v28 + 24)) {
          return v27;
        }
        goto LABEL_9;
      case 3uLL:
        if (v4 < 0) {
          goto LABEL_9;
        }
        return v27;
      default:
LABEL_4:
        if (v4 >= v5) {
          return v27;
        }
LABEL_9:
        uint64_t v32 = &type metadata for BinaryDecoder.UnkeyedContainer;
        unint64_t v33 = sub_10008B64C();
        v30[0]  = (uint64_t)v0;
        uint64_t v6 = sub_100039448((uint64_t)v30, (uint64_t)&type metadata for BinaryDecoder.UnkeyedContainer);
        uint64_t v7 = *(void **)v6;
        uint64_t v8 = *(void *)(*(void *)v6 + 32);
        uint64_t v9 = v8 + 6;
        if (__OFADD__(v8, 6))
        {
          __break(1u);
LABEL_35:
          __break(1u);
          JUMPOUT(0x1001E263CLL);
        }
        return result;
    }
    uint64_t v10 = v7[2];
    unint64_t v11 = v7[3];
    switch(v11 >> 62)
    {
      case 1uLL:
        if (v10 >> 32 >= v9) {
          goto LABEL_16;
        }
        goto LABEL_20;
      case 2uLL:
        if (*(void *)(v10 + 24) >= v9) {
          goto LABEL_16;
        }
        goto LABEL_20;
      case 3uLL:
        if (v9 >= 1) {
          goto LABEL_20;
        }
        goto LABEL_16;
      default:
        if (BYTE6(v11) >= v9)
        {
LABEL_16:
          if (v9 < v8) {
            goto LABEL_35;
          }
          swift_retain();
          swift_retain();
          uint64_t v12 = Data._Representation.subscript.getter();
          unint64_t v14 = v13;
          v7[4]  = v9;
          swift_release();
          sub_100013D44(v12, v14);
          uint64_t v15 = sub_10000C6C4(v12, v14);
          if ((v15 & 0x1000000000000) != 0)
          {
            uint64_t v16 = type metadata accessor for DecodingError();
            uint64_t v17 = swift_allocError();
            char v19 = v18;
            sub_100010BCC(&qword_10047E090);
            *char v19 = &type metadata for WiFiAddress;
            DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
            (*(void (**)(void *, void, uint64_t))(*(void *)(v16 - 8) + 104))(v19, v29, v16);
            swift_willThrow();
            sub_10000C970(v12, v14);
            goto LABEL_21;
          }
          uint64_t v21 = v15;
          sub_10000C970(v12, v14);
          sub_100010754((uint64_t)v30);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v27 = sub_1000C5B28(0, v27[2] + 1, 1, v27);
          }
          unint64_t v23 = v27[2];
          unint64_t v22 = v27[3];
          if (v23 >= v22 >> 1) {
            unint64_t v27 = sub_1000C5B28((void *)(v22 > 1), v23 + 1, 1, v27);
          }
          v27[2]  = v23 + 1;
          uint64_t v24 = (char *)v27 + 6 * v23;
          *((_WORD *)v24 + 16)  = v21;
          v24[34]  = BYTE2(v21);
          v24[35]  = BYTE3(v21);
          v24[36]  = BYTE4(v21);
          v24[37]  = BYTE5(v21);
          continue;
        }
LABEL_20:
        sub_10000F000();
        uint64_t v17 = swift_allocError();
        *(void *)uint64_t v20 = 0;
        *(void *)(v20 + 8)  = 0;
        *(unsigned char *)(v20 + 16)  = 2;
        swift_retain();
        swift_willThrow();
LABEL_21:
        sub_100010754((uint64_t)v30);
        uint64_t v34 = v17;
        swift_errorRetain();
        sub_100010BCC((uint64_t *)&unk_1004843F0);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_32;
        }
        if (v31 == 2)
        {
          if ((v30[0] & 1) == 0) {
            goto LABEL_32;
          }
          swift_errorRelease();
          swift_errorRelease();
          continue;
        }
        sub_100012AA4(v30[0], v30[1], v31);
LABEL_32:
        unint64_t v25 = v27;
        swift_bridgeObjectRelease();
        swift_errorRelease();
        return v25;
    }
  }
}

BOOL static NANAttribute.Cluster.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10020D248(a1, a2 & 0xFFFFFFFF000000FFLL, a3, a4 & 0xFFFFFFFF000000FFLL);
}

uint64_t Array<A>.retrieve(attribute:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for NANAttribute(0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10)
  {
    uint64_t v18 = a3;
    int v11 = byte_1003D2CB2[a1];
    uint64_t v12 = a2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t result = swift_bridgeObjectRetain();
    for (i  = 0; ; ++i)
    {
      uint64_t v15 = i + 1;
      if (__OFADD__(i, 1)) {
        break;
      }
      sub_10021A510(v12 + *(void *)(v7 + 72) * i, (uint64_t)v9, type metadata accessor for NANAttribute);
      if (byte_1003D2CB2[(char)NANAttribute.attributeType.getter()] == v11)
      {
        swift_bridgeObjectRelease();
        a3  = v18;
        sub_10021A578((uint64_t)v9, v18, type metadata accessor for NANAttribute);
        uint64_t v16 = 0;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a3, v16, 1, v6);
      }
      uint64_t result = sub_10021A4B0((uint64_t)v9, type metadata accessor for NANAttribute);
      if (v15 == v10)
      {
        swift_bridgeObjectRelease();
        uint64_t v16 = 1;
        a3  = v18;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a3, v16, 1, v6);
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v16 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a3, v16, 1, v6);
  }
  return result;
}

uint64_t NANAttribute.ServiceDescriptorExtension.Control.furtherServiceDiscoveryFunction.getter(unsigned int a1)
{
  if (a1) {
    return (a1 >> 1) & 1;
  }
  else {
    return 2;
  }
}

uint64_t NANAttribute.ServiceDescriptorExtension.Control.datapathType.getter(unsigned int a1)
{
  if ((a1 & 4) != 0) {
    return (a1 >> 3) & 1;
  }
  else {
    return 2;
  }
}

void *NANAttribute.ServiceDescriptorExtension.Control.securityRequired.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptorExtension.Control.securityRequired;
}

void *NANAttribute.ServiceDescriptorExtension.Control.furtherServiceDiscoveryRequired.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptorExtension.Control.furtherServiceDiscoveryRequired;
}

void *NANAttribute.ServiceDescriptorExtension.Control.gasForFurtherServiceDiscovery.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptorExtension.Control.gasForFurtherServiceDiscovery;
}

void *NANAttribute.ServiceDescriptorExtension.Control.datapathRequired.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptorExtension.Control.datapathRequired;
}

void *NANAttribute.ServiceDescriptorExtension.Control.serviceUpdateIndicator.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptorExtension.Control.serviceUpdateIndicator;
}

void *sub_1001E28A0(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_10008343C(0, v1, 0);
    uint64_t v3 = a1 + 32;
    do
    {
      swift_bridgeObjectRetain_n();
      sub_100010BCC(&qword_10047E9B0);
      sub_100010BCC(&qword_10047E2B0);
      swift_dynamicCast();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_10008343C(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v5 = _swiftEmptyArrayStorage[2];
      unint64_t v4 = _swiftEmptyArrayStorage[3];
      if (v5 >= v4 >> 1) {
        sub_10008343C(v4 > 1, v5 + 1, 1);
      }
      _swiftEmptyArrayStorage[2]  = v5 + 1;
      uint64_t v6 = &_swiftEmptyArrayStorage[2 * v5];
      *((unsigned char *)v6 + 32)  = v8;
      *((unsigned char *)v6 + 33)  = v9;
      *((unsigned char *)v6 + 34)  = v10;
      v6[5]  = v11;
      v3 += 16;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

void *sub_1001E2A10(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
    sub_1000837DC(0, v1, 0);
    uint64_t v4 = a1 + 32;
    uint64_t v2 = _swiftEmptyArrayStorage;
    do
    {
      sub_1000136F4(v4, (uint64_t)v11, &qword_10047CF60);
      sub_100010BCC(&qword_10047CF60);
      sub_100010BCC(&qword_10047E1F8);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000837DC(0, v2[2] + 1, 1);
        uint64_t v2 = v15;
      }
      unint64_t v6 = v2[2];
      unint64_t v5 = v2[3];
      if (v6 >= v5 >> 1)
      {
        sub_1000837DC(v5 > 1, v6 + 1, 1);
        uint64_t v2 = v15;
      }
      v2[2]  = v6 + 1;
      uint64_t v7 = &v2[6 * v6];
      long long v8 = v12;
      long long v9 = v14;
      _OWORD v7[3] = v13;
      v7[4]  = v9;
      v7[2]  = v8;
      v4 += 48;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1001E2B58(unint64_t a1, unint64_t a2, void **a3, uint64_t a4)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (*(void *)(a4 + 16) <= a2)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = a3;
  unint64_t v5 = a1;
  char v7 = *(unsigned char *)(a4 + a2 + 32);
  unint64_t v6 = *a3;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v4 = v6;
  if (result)
  {
    if ((v5 & 0x8000000000000000) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
LABEL_9:
  uint64_t result = (uint64_t)sub_1001DFD70(v6);
  unint64_t v6 = (void *)result;
  if ((v5 & 0x8000000000000000) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if (v6[2] > v5)
  {
    *((unsigned char *)v6 + v5 + 32) &= v7;
    *uint64_t v4 = v6;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1001E2BF4(unint64_t a1, unint64_t a2, void **a3, uint64_t a4)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (*(void *)(a4 + 16) <= a2)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = a3;
  unint64_t v5 = a1;
  char v7 = *(unsigned char *)(a4 + a2 + 32);
  unint64_t v6 = *a3;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v4 = v6;
  if (result)
  {
    if ((v5 & 0x8000000000000000) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
LABEL_9:
  uint64_t result = (uint64_t)sub_1001DFD70(v6);
  unint64_t v6 = (void *)result;
  if ((v5 & 0x8000000000000000) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if (v6[2] > v5)
  {
    *((unsigned char *)v6 + v5 + 32) &= ~v7;
    *uint64_t v4 = v6;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1001E2C90()
{
  if (*v0) {
    return 0x61466D6F646E6172;
  }
  else {
    return 0xD000000000000010;
  }
}

uint64_t sub_1001E2CD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10022BF44(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001E2D00(uint64_t a1)
{
  unint64_t v2 = sub_10020D358();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001E2D3C(uint64_t a1)
{
  unint64_t v2 = sub_10020D358();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.MasterIndication.encode(to:)(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_100482568);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  unint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_10020D358();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15]  = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14]  = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t NANAttribute.MasterIndication.init(from:)(void *a1)
{
  return sub_1002123D0(a1);
}

uint64_t sub_1001E2EF0@<X0>(_WORD *a1@<X8>)
{
  return sub_1001F6944((uint64_t (*)(void))sub_1002123D0, a1);
}

uint64_t sub_1001E2F1C(void *a1)
{
  return NANAttribute.MasterIndication.encode(to:)(a1);
}

void NANAttribute.Cluster.hash(into:)(int a1, unint64_t a2, unint64_t a3)
{
  Swift::UInt8 v3 = a3;
  unint64_t v4 = a2 >> 8;
  unint64_t v5 = a2 >> 16;
  unint64_t v6 = a2 >> 24;
  unint64_t v7 = HIDWORD(a2);
  unint64_t v8 = a2 >> 40;
  unint64_t v9 = HIWORD(a2);
  unint64_t v10 = HIBYTE(a2);
  unint64_t v11 = HIDWORD(a3);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v11);
}

unint64_t sub_1001E2FEC()
{
  unint64_t v1 = 0x746E756F43706F68;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000022;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD000000000000010;
  }
}

uint64_t sub_1001E304C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10022C04C(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001E3074(uint64_t a1)
{
  unint64_t v2 = sub_100212574();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001E30B0(uint64_t a1)
{
  unint64_t v2 = sub_100212574();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.Cluster.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v5 = sub_100010BCC(&qword_100482578);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  unint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_100212574();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v11 = a2;
  v10[15]  = 0;
  sub_1002125C8();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v10[14]  = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[13]  = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int NANAttribute.Cluster.hashValue.getter(unint64_t a1, unint64_t a2)
{
  Swift::UInt8 v2 = a2;
  Swift::UInt8 v3 = a1;
  unint64_t v4 = a1 >> 8;
  unint64_t v5 = a1 >> 16;
  unint64_t v6 = a1 >> 24;
  unint64_t v7 = HIDWORD(a1);
  unint64_t v8 = a1 >> 40;
  unint64_t v9 = HIWORD(a1);
  unint64_t v10 = HIBYTE(a1);
  *(void *)long long v12 = HIDWORD(a2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v12[0]);
  return Hasher._finalize()();
}

unint64_t NANAttribute.Cluster.init(from:)(void *a1)
{
  unint64_t result = sub_100214A44(a1);
  if (v1) {
    return v3 & 0xFFFFFFFF000000FFLL;
  }
  return result;
}

Swift::Int sub_1001E33B8()
{
  Swift::UInt32 v11 = *(_DWORD *)(v0 + 12);
  Swift::UInt8 v1 = *(unsigned char *)v0;
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 1);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 2);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 3);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 5);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 6);
  Swift::UInt8 v8 = *(unsigned char *)(v0 + 7);
  Swift::UInt8 v9 = *(unsigned char *)(v0 + 8);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v11);
  return Hasher._finalize()();
}

void sub_1001E34B4()
{
  Swift::UInt32 v9 = *(_DWORD *)(v0 + 12);
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 1);
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 2);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 3);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 5);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 6);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 7);
  Swift::UInt8 v8 = *(unsigned char *)(v0 + 8);
  Hasher._combine(_:)(*(unsigned char *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
}

Swift::Int sub_1001E3578()
{
  Swift::UInt32 v11 = *(_DWORD *)(v0 + 12);
  Swift::UInt8 v1 = *(unsigned char *)v0;
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 1);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 2);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 3);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 5);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 6);
  Swift::UInt8 v8 = *(unsigned char *)(v0 + 7);
  Swift::UInt8 v9 = *(unsigned char *)(v0 + 8);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v11);
  return Hasher._finalize()();
}

uint64_t sub_1001E3670@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100214A44(a1);
  if (!v2)
  {
    *(void *)a2  = result;
    *(unsigned char *)(a2 + 8)  = v5;
    *(_DWORD *)(a2 + 12)  = v6;
  }
  return result;
}

uint64_t sub_1001E36E0(void *a1)
{
  return NANAttribute.Cluster.encode(to:)(a1, *v1);
}

BOOL sub_1001E3708(uint64_t a1, uint64_t a2)
{
  return sub_10020D248(*(void *)a1, *(unsigned __int8 *)(a1 + 8) | ((unint64_t)*(unsigned int *)(a1 + 12) << 32), *(void *)a2, *(unsigned __int8 *)(a2 + 8) | ((unint64_t)*(unsigned int *)(a2 + 12) << 32));
}

void NANAttribute.ServiceIDList.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    swift_bridgeObjectRetain();
    Swift::UInt8 v4 = (unint64_t *)(a2 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      unint64_t v6 = *v4;
      sub_100013D44(v5, *v4);
      Data.hash(into:)();
      sub_10000C970(v5, v6);
      v4 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1001E37E8()
{
  return 0x7365636976726573;
}

uint64_t sub_1001E3800@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x7365636976726573 && a2 == 0xE800000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3  = v7 & 1;
  return result;
}

uint64_t sub_1001E3898(uint64_t a1)
{
  unint64_t v2 = sub_100214C28();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001E38D4(uint64_t a1)
{
  unint64_t v2 = sub_100214C28();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.ServiceIDList.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100010BCC(&qword_100482590);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  char v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_100214C28();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1]  = a2;
  sub_100010BCC(&qword_1004825A0);
  sub_100217A38(&qword_1004825A8, &qword_1004825A0, (void (*)(void))sub_100214C7C);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int NANAttribute.ServiceIDList.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  Swift::UInt v2 = *(void *)(a1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    swift_bridgeObjectRetain();
    Swift::UInt v3 = (unint64_t *)(a1 + 40);
    do
    {
      uint64_t v4 = *(v3 - 1);
      unint64_t v5 = *v3;
      sub_100013D44(v4, *v3);
      Data.hash(into:)();
      sub_10000C970(v4, v5);
      v3 += 2;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

void *NANAttribute.ServiceIDList.init(from:)(void *a1)
{
  return sub_1002118F4(a1);
}

Swift::Int sub_1001E3B5C()
{
  return NANAttribute.ServiceIDList.hashValue.getter(*v0);
}

void sub_1001E3B64(uint64_t a1)
{
  NANAttribute.ServiceIDList.hash(into:)(a1, *v1);
}

Swift::Int sub_1001E3B6C()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Swift::UInt v2 = *(void *)(v1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    swift_bridgeObjectRetain();
    Swift::UInt v3 = (unint64_t *)(v1 + 40);
    do
    {
      uint64_t v4 = *(v3 - 1);
      unint64_t v5 = *v3;
      sub_100013D44(v4, *v3);
      Data.hash(into:)();
      sub_10000C970(v4, v5);
      v3 += 2;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

void *sub_1001E3C14@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1002118F4(a1);
  if (!v2) {
    *a2  = result;
  }
  return result;
}

uint64_t sub_1001E3C40(void *a1)
{
  return NANAttribute.ServiceIDList.encode(to:)(a1, *v1);
}

uint64_t sub_1001E3C5C(uint64_t *a1, uint64_t *a2)
{
  return _s7CoreP2P12NANAttributeO13ServiceIDListV23__derived_struct_equalsySbAE_AEtFZ_0(*a1, *a2);
}

uint64_t NANAttribute.ServiceDescriptor.Control.type.getter(uint64_t a1)
{
  return sub_1001F053C(a1, (uint64_t (*)(void, uint64_t, uint64_t))sub_10008CAA8);
}

void *NANAttribute.ServiceDescriptor.Control.matchingFilter.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptor.Control.matchingFilter;
}

void *NANAttribute.ServiceDescriptor.Control.serviceResponseFilter.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptor.Control.serviceResponseFilter;
}

void *NANAttribute.ServiceDescriptor.Control.serviceInfo.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptor.Control.serviceInfo;
}

void *NANAttribute.ServiceDescriptor.Control.discoveryRangeLimited.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptor.Control.discoveryRangeLimited;
}

void *NANAttribute.ServiceDescriptor.Control.bindingBitmap.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptor.Control.bindingBitmap;
}

void *NANAttribute.ServiceDescriptor.Control.reserved.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptor.Control.reserved;
}

uint64_t sub_1001E3CCC()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001E3D2C()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t NANAttribute.ServiceDescriptor.ServiceResponseFilterControl.type.getter(uint64_t a1)
{
  return sub_1001F6084(a1, (unsigned __int8 (*)(void, uint64_t, uint64_t))sub_10008CAA8);
}

BOOL NANAttribute.ServiceDescriptor.ServiceResponseFilterControl.include.getter@<W0>(char a1@<W0>, unint64_t a2@<X8>)
{
  return sub_10008CAC0(1, 1, a1, a2) != 0;
}

uint64_t NANAttribute.ServiceDescriptor.ServiceResponseFilterControl.bloomFilterIndex.getter(char a1)
{
  unint64_t v1 = sub_10008CAA8(2uLL, 2, a1);
  uint64_t result = _s7CoreP2P19NANIntervalDurationO8rawValueACSgs5UInt8V_tcfC_0(v1);
  if (result == 4)
  {
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v3 = xmmword_1003B00B0;
    *(unsigned char *)(v3 + 16)  = 2;
    swift_willThrow();
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

CoreP2P::NANAttribute::ServiceDescriptor::ServiceResponseFilterControl __swiftcall NANAttribute.ServiceDescriptor.ServiceResponseFilterControl.init(type:include:bloomFilterIndex:)(CoreP2P::NANAttribute::ServiceDescriptor::ServiceResponseFilterControl::FilterType type, Swift::Bool include, CoreP2P::NANBloomFilter::Index bloomFilterIndex)
{
  char v5 = sub_1001E2020(type & 1, 0, 1);
  unsigned __int8 v6 = sub_1001E1DC0(include, 1, 1);
  unsigned __int8 v7 = sub_1001E2020(bloomFilterIndex, 2uLL, 2);
  if ((v6 & ~v5) != 0) {
    unsigned __int8 v8 = v6;
  }
  else {
    unsigned __int8 v8 = 0;
  }
  char v9 = v8 | v5;
  if ((v7 & ~v9) != 0) {
    unsigned __int8 v10 = v7;
  }
  else {
    unsigned __int8 v10 = 0;
  }
  return (CoreP2P::NANAttribute::ServiceDescriptor::ServiceResponseFilterControl)(v10 | v9);
}

uint64_t sub_1001E3F98()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001E3FF8()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t NANAttribute.ServiceDescriptor.ServiceFilterControl.include.getter(uint64_t a1, char a2)
{
  return a2 & 1;
}

void NANAttribute.ServiceDescriptor.ServiceFilterControl.hash(into:)(uint64_t a1, uint64_t a2, char a3)
{
  Swift::UInt v5 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v5);
  if (v5)
  {
    unsigned __int8 v6 = (Swift::UInt8 *)(a2 + 37);
    do
    {
      Swift::UInt8 v7 = *(v6 - 5);
      Swift::UInt8 v8 = *(v6 - 4);
      Swift::UInt8 v9 = *(v6 - 3);
      Swift::UInt8 v10 = *(v6 - 2);
      Swift::UInt8 v11 = *(v6 - 1);
      Swift::UInt8 v12 = *v6;
      v6 += 6;
      Hasher._combine(_:)(v7);
      Hasher._combine(_:)(v8);
      Hasher._combine(_:)(v9);
      Hasher._combine(_:)(v10);
      Hasher._combine(_:)(v11);
      Hasher._combine(_:)(v12);
      --v5;
    }
    while (v5);
  }
  Hasher._combine(_:)(a3 & 1);
}

uint64_t static NANAttribute.ServiceDescriptor.ServiceFilterControl.__derived_struct_equals(_:_:)(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return _s7CoreP2P15AWDLActionFrameV12SyncTreePathV23__derived_struct_equalsySbAE_AEtFZ_0(a1, a3) & ~(a2 ^ a4) & 1;
}

uint64_t sub_1001E4138()
{
  if (*v0) {
    return 0x6564756C636E69;
  }
  else {
    return 0x6573736572646461;
  }
}

uint64_t sub_1001E4178@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10022C19C(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001E41A0(uint64_t a1)
{
  unint64_t v2 = sub_10022FA30();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001E41DC(uint64_t a1)
{
  unint64_t v2 = sub_10022FA30();

  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int NANAttribute.ServiceDescriptor.ServiceFilterControl.hashValue.getter(uint64_t a1, char a2)
{
  Hasher.init(_seed:)();
  NANAttribute.ServiceDescriptor.ServiceFilterControl.hash(into:)((uint64_t)v5, a1, a2);
  return Hasher._finalize()();
}

uint64_t NANAttribute.ServiceDescriptor.ServiceFilterControl.init(from:)(void *a1)
{
  return sub_10021261C(a1);
}

Swift::Int sub_1001E4284()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  Hasher.init(_seed:)();
  NANAttribute.ServiceDescriptor.ServiceFilterControl.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

void sub_1001E42D4(uint64_t a1)
{
  NANAttribute.ServiceDescriptor.ServiceFilterControl.hash(into:)(a1, *(void *)v1, *(unsigned char *)(v1 + 8));
}

Swift::Int sub_1001E42E0()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  Hasher.init(_seed:)();
  NANAttribute.ServiceDescriptor.ServiceFilterControl.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1001E432C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10021261C(a1);
  if (!v2)
  {
    *(void *)a2  = result;
    *(unsigned char *)(a2 + 8)  = v5 & 1;
  }
  return result;
}

uint64_t sub_1001E4360(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 8);
  int v3 = *(unsigned __int8 *)(a2 + 8);
  return _s7CoreP2P15AWDLActionFrameV12SyncTreePathV23__derived_struct_equalsySbAE_AEtFZ_0(*(void *)a1, *(void *)a2) & ~(v2 ^ v3) & 1;
}

uint64_t NANAttribute.ServiceDescriptor.serviceID.getter()
{
  uint64_t v1 = *(void *)v0;
  sub_100013D44(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t NANAttribute.ServiceDescriptor.bindingBitmap.getter()
{
  return *(unsigned __int16 *)(v0 + 20) | (*(unsigned __int8 *)(v0 + 22) << 16);
}

uint64_t NANAttribute.ServiceDescriptor.bindingBitmap.setter(uint64_t result)
{
  *(_WORD *)(v1 + 20)  = result;
  *(unsigned char *)(v1 + 22)  = BYTE2(result) & 1;
  char v2 = *(unsigned char *)(v1 + 18);
  if ((result & 0x10000) != 0)
  {
    if ((*(unsigned char *)(v1 + 18) & 0x40) == 0) {
      return result;
    }
    char v3 = v2 & 0xBF;
  }
  else
  {
    if ((*(unsigned char *)(v1 + 18) & 0x40) != 0) {
      return result;
    }
    char v3 = v2 | 0x40;
  }
  *(unsigned char *)(v1 + 18)  = v3;
  return result;
}

uint64_t *(*NANAttribute.ServiceDescriptor.bindingBitmap.modify(void *a1))(uint64_t *result, char a2)
{
  *a1  = v1;
  return sub_1001E4444;
}

uint64_t *sub_1001E4444(uint64_t *result, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v2 = *result;
    char v3 = *(unsigned char *)(*result + 18);
    if (*(unsigned char *)(*result + 22))
    {
      if ((*(unsigned char *)(*result + 18) & 0x40) != 0) {
        *(unsigned char *)(v2 + 18)  = v3 & 0xBF;
      }
    }
    else if ((*(unsigned char *)(*result + 18) & 0x40) == 0)
    {
      *(unsigned char *)(v2 + 18)  = v3 | 0x40;
    }
  }
  return result;
}

uint64_t NANAttribute.ServiceDescriptor.matchingFilters.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24)  = a1;
  char v4 = *(unsigned char *)(v1 + 18);
  if (a1)
  {
    if ((*(unsigned char *)(v1 + 18) & 4) != 0) {
      return result;
    }
    char v5 = v4 | 4;
  }
  else
  {
    if ((*(unsigned char *)(v1 + 18) & 4) == 0) {
      return result;
    }
    char v5 = v4 & 0xFB;
  }
  *(unsigned char *)(v1 + 18)  = v5;
  return result;
}

uint64_t *(*NANAttribute.ServiceDescriptor.matchingFilters.modify(void *a1))(uint64_t *result, char a2)
{
  *a1  = v1;
  return sub_1001E44E8;
}

uint64_t *sub_1001E44E8(uint64_t *result, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v2 = *result;
    char v3 = *(unsigned char *)(*result + 18);
    if (*(void *)(*result + 24))
    {
      if ((*(unsigned char *)(*result + 18) & 4) == 0) {
        *(unsigned char *)(v2 + 18)  = v3 | 4;
      }
    }
    else if ((*(unsigned char *)(*result + 18) & 4) != 0)
    {
      *(unsigned char *)(v2 + 18)  = v3 & 0xFB;
    }
  }
  return result;
}

uint64_t NANAttribute.ServiceDescriptor.serviceFilterControl.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  sub_100214CD0(v1, *(void *)(v0 + 40), *(unsigned __int16 *)(v0 + 48) | (*(unsigned __int8 *)(v0 + 50) << 16));
  return v1;
}

uint64_t NANAttribute.ServiceDescriptor.serviceFilterControl.setter(uint64_t a1, uint64_t a2, int a3)
{
  int v8 = *(unsigned __int16 *)(v3 + 48);
  uint64_t v7 = v3 + 48;
  uint64_t result = sub_100133188(*(void *)(v7 - 16), *(void *)(v7 - 8), v8 | (*(unsigned __int8 *)(v7 + 2) << 16));
  *(void *)(v7 - 16)  = a1;
  *(void *)(v7 - 8)  = a2;
  *(unsigned char *)(v7 + 2)  = BYTE2(a3);
  *(_WORD *)uint64_t v7 = a3;
  return result;
}

uint64_t NANAttribute.ServiceDescriptor.serviceInfo.getter()
{
  uint64_t v1 = v0[7];
  sub_10013316C(v1, v0[8], v0[9]);
  return v1;
}

uint64_t NANAttribute.ServiceDescriptor.serviceInfo.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1001331AC(*(void *)(v3 + 56), *(void *)(v3 + 64), *(void *)(v3 + 72));
  *(void *)(v3 + 56)  = a1;
  *(void *)(v3 + 64)  = a2;
  *(void *)(v3 + 72)  = a3;
  return result;
}

void NANAttribute.ServiceDescriptor.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  long long v17 = *v2;
  sub_1001B7C38((uint64_t)&v17);
  Data.hash(into:)();
  sub_1001B7C68((uint64_t)&v17);
  Hasher._combine(_:)(*((unsigned char *)v2 + 16));
  Hasher._combine(_:)(*((unsigned char *)v2 + 17));
  Hasher._combine(_:)(*((unsigned char *)v2 + 18));
  if (*((unsigned char *)v2 + 22) == 1)
  {
    Hasher._combine(_:)(0);
    uint64_t v4 = *((void *)v2 + 3);
    if (v4) {
      goto LABEL_3;
    }
LABEL_8:
    Hasher._combine(_:)(0);
    goto LABEL_9;
  }
  Swift::UInt16 v9 = *((_WORD *)v2 + 10);
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v9);
  uint64_t v4 = *((void *)v2 + 3);
  if (!v4) {
    goto LABEL_8;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  Swift::UInt v5 = *(void *)(v4 + 16);
  Hasher._combine(_:)(v5);
  if (v5)
  {
    swift_bridgeObjectRetain();
    unsigned __int8 v6 = (unint64_t *)(v4 + 40);
    do
    {
      uint64_t v7 = *(v6 - 1);
      unint64_t v8 = *v6;
      sub_100013D44(v7, *v6);
      Data.hash(into:)();
      sub_10000C970(v7, v8);
      v6 += 2;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
LABEL_9:
  uint64_t v10 = *((void *)v2 + 4);
  unint64_t v11 = *((void *)v2 + 5);
  uint64_t v12 = *((unsigned __int16 *)v2 + 24) | (*((unsigned __int8 *)v2 + 50) << 16);
  sub_100214CD0(v10, v11, v12);
  sub_10020B3F4(a1, v10, v11, v12);
  sub_100133188(v10, v11, v12);
  uint64_t v13 = *((void *)v2 + 7);
  if (v13 == 4)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v16 = v2 + 4;
    uint64_t v14 = *((void *)v2 + 8);
    unint64_t v15 = *((void *)v16 + 1);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v13);
    sub_100013D44(v14, v15);
    Data.hash(into:)();
    sub_1001331AC(v13, v14, v15);
  }
}

Swift::Int NANAttribute.ServiceDescriptor.hashValue.getter()
{
  Hasher.init(_seed:)();
  NANAttribute.ServiceDescriptor.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_1001E4868()
{
  Hasher.init(_seed:)();
  NANAttribute.ServiceDescriptor.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

__n128 NANAttribute.ServiceDescriptor.init(from:)@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100216B98(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v6[3];
    *(_OWORD *)(a2 + 32)  = v6[2];
    *(_OWORD *)(a2 + 48)  = v5;
    *(_OWORD *)(a2 + 64)  = v6[4];
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2  = v6[0];
    *(__n128 *)(a2 + 16)  = result;
  }
  return result;
}

uint64_t sub_1001E48F0(void *a1)
{
  return NANAttribute.ServiceDescriptor.encode(to:)(a1);
}

uint64_t NANAttribute.ServiceDescriptor.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  long long v56 = *v1;
  sub_100039448((uint64_t)v59, v60);
  sub_100214C7C();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v2)
  {
    sub_100039448((uint64_t)v59, v60);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    sub_100039448((uint64_t)v59, v60);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    char v4 = *((unsigned char *)v1 + 18);
    LOBYTE(v56)  = v4;
    sub_100039448((uint64_t)v59, v60);
    sub_100217990();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    sub_10006EC68((uint64_t)v1 + 20, (uint64_t)v62, &qword_10047E770);
    sub_10006EC68((uint64_t)v62, (uint64_t)&v63, &qword_10047E770);
    if ((v64 & 1) == 0 && (v4 & 0x40) != 0)
    {
      sub_100039448((uint64_t)v59, v60);
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    }
    sub_10006EC68((uint64_t)v1 + 24, (uint64_t)v61, &qword_1004825C0);
    sub_10006EC68((uint64_t)v61, (uint64_t)&v65, &qword_1004825C0);
    uint64_t v6 = v65;
    if (v65 && (v4 & 4) != 0)
    {
      int64_t v7 = *(void *)(v65 + 16);
      if (v7)
      {
        *(void *)&long long v56 = _swiftEmptyArrayStorage;
        sub_100083664(0, v7, 0);
        unint64_t v8 = _swiftEmptyArrayStorage;
        Swift::UInt16 v9 = (long long *)(v6 + 32);
        while (1)
        {
          long long v10 = *v9;
          unint64_t v11 = *((void *)v9 + 1);
          long long v54 = *v9;
          switch(v11 >> 62)
          {
            case 1uLL:
              uint64_t v13 = *(void *)v9;
              if (__OFSUB__(DWORD1(v10), v10))
              {
                __break(1u);
LABEL_49:
                __break(1u);
LABEL_50:
                __break(1u);
LABEL_51:
                __break(1u);
LABEL_52:
                __break(1u);
LABEL_53:
                __break(1u);
                goto LABEL_54;
              }
              uint64_t v12 = DWORD1(v10) - (int)v10;
LABEL_16:
              sub_100013D44(v13, v11);
              sub_100013D44(v13, v11);
              *(void *)&long long v10 = v54;
LABEL_17:
              if (v12 >= 255)
              {
                sub_10000F000();
                swift_allocError();
                *(void *)uint64_t v26 = 0;
                *(void *)(v26 + 8)  = 0;
                *(unsigned char *)(v26 + 16)  = 2;
                swift_willThrow();
                sub_10000C970(v54, v11);
                sub_10000C970(v54, v11);
                swift_release();
                return sub_100010754((uint64_t)v59);
              }
LABEL_18:
              sub_10000C970(v10, v11);
              *(void *)&long long v56 = v8;
              unint64_t v17 = v8[2];
              unint64_t v16 = v8[3];
              if (v17 >= v16 >> 1)
              {
                sub_100083664(v16 > 1, v17 + 1, 1);
                unint64_t v8 = (void *)v56;
              }
              v8[2]  = v17 + 1;
              *(_OWORD *)&v8[2 * v17 + 4]  = v54;
              ++v9;
              if (!--v7) {
                goto LABEL_21;
              }
              break;
            case 2uLL:
              uint64_t v13 = *(void *)v9;
              uint64_t v15 = *(void *)(v10 + 16);
              uint64_t v14 = *(void *)(v10 + 24);
              uint64_t v12 = v14 - v15;
              if (!__OFSUB__(v14, v15)) {
                goto LABEL_16;
              }
              goto LABEL_49;
            case 3uLL:
              goto LABEL_18;
            default:
              uint64_t v12 = BYTE6(v11);
              goto LABEL_17;
          }
        }
      }
LABEL_21:
      unint64_t v18 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v19 = type metadata accessor for BinaryEncoder();
      uint64_t v20 = swift_allocObject();
      *(_OWORD *)(v20 + 16)  = xmmword_1003B2440;
      *(void *)(v20 + 32)  = v18;
      uint64_t v57 = v19;
      uint64_t v58 = sub_10021A5E0((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      *(void *)&long long v56 = v20;
      swift_bridgeObjectRetain();
      swift_retain();
      sub_100010BCC(&qword_10047E210);
      sub_10000F9CC(&qword_10047E348, &qword_10047E210);
      Array<A>.encode(to:)();
      sub_100010754((uint64_t)&v56);
      swift_bridgeObjectRelease();
      swift_beginAccess();
      uint64_t v21 = *(void *)(v20 + 16);
      unint64_t v22 = *(void *)(v20 + 24);
      sub_100013D44(v21, v22);
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v23 = sub_10008D950(v21, v22);
      unint64_t v25 = v24;
      *(void *)&long long v56 = v23;
      *((void *)&v56 + 1)  = v24;
      sub_100039448((uint64_t)v59, v60);
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      sub_10000C970(v23, v25);
    }
    if (*((unsigned __int8 *)v3 + 50) != 255 && (v4 & 8) != 0)
    {
      uint64_t v33 = *((void *)v3 + 4);
      unint64_t v34 = *((void *)v3 + 5);
      unsigned int v55 = *((unsigned __int16 *)v3 + 24) | (*((unsigned __int8 *)v3 + 50) << 16);
      if (((*((unsigned __int8 *)v3 + 50) << 16) & 0x10000) != 0)
      {
        uint64_t v43 = 0;
        switch(v34 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(v33), v33)) {
              goto LABEL_52;
            }
            uint64_t v43 = HIDWORD(v33) - (int)v33;
LABEL_37:
            sub_100214CE8(v33, v34, *((unsigned __int16 *)v3 + 24) | (*((unsigned __int8 *)v3 + 50) << 16), 1);
LABEL_38:
            BOOL v46 = __OFADD__(v43, 1);
            unint64_t v47 = v43 + 1;
            if (v46) {
              goto LABEL_51;
            }
            if ((v47 & 0x8000000000000000) != 0 || v47 >= 0x100) {
              goto LABEL_54;
            }
            sub_100039448((uint64_t)v59, v60);
            sub_100214CE8(v33, v34, v55, 1);
            dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
            char v48 = sub_1001E2020(1u, 0, 1);
            unsigned __int8 v49 = sub_1001E1DC0((v55 >> 8) & 1, 1, 1);
            unsigned __int8 v50 = sub_1001E2020(v55, 2uLL, 2);
            if ((v49 & ~v48) != 0) {
              unsigned __int8 v51 = v49;
            }
            else {
              unsigned __int8 v51 = 0;
            }
            char v52 = v51 | v48;
            if ((v50 & ~v52) != 0) {
              unsigned __int8 v53 = v50;
            }
            else {
              unsigned __int8 v53 = 0;
            }
            LOBYTE(v56)  = v53 | v52;
            sub_100039448((uint64_t)v59, v60);
            sub_1002179E4();
            dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
            *(void *)&long long v56 = v33;
            *((void *)&v56 + 1)  = v34;
            sub_100039448((uint64_t)v59, v60);
            sub_1000742DC();
            dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
            sub_100133188(v33, v34, v55);
            sub_100133188(v33, v34, v55);
            break;
          case 2uLL:
            uint64_t v45 = *(void *)(v33 + 16);
            uint64_t v44 = *(void *)(v33 + 24);
            uint64_t v43 = v44 - v45;
            if (!__OFSUB__(v44, v45)) {
              goto LABEL_37;
            }
            goto LABEL_53;
          case 3uLL:
            goto LABEL_38;
          default:
            uint64_t v43 = BYTE6(v34);
            goto LABEL_38;
        }
      }
      else
      {
        uint64_t v35 = *(void *)(v33 + 16);
        uint64_t v36 = (unsigned __int128)(v35 * (__int128)6) >> 64;
        uint64_t v37 = 6 * v35;
        if (v36 != v37 >> 63) {
          goto LABEL_50;
        }
        if ((v37 | 1uLL) >= 0x100)
        {
LABEL_54:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          swift_unexpectedError();
          __break(1u);
          swift_unexpectedError();
          __break(1u);
          JUMPOUT(0x1001E55C0);
        }
        sub_100039448((uint64_t)v59, v60);
        sub_100214CE8(v33, v34, v55, 0);
        sub_100214CE8(v33, v34, v55, 0);
        dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
        LOBYTE(v56)  = sub_1001E1DC0(v34 & 1, 1, 1);
        sub_100039448((uint64_t)v59, v60);
        sub_1002179E4();
        dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
        *(void *)&long long v56 = v33;
        sub_100039448((uint64_t)v59, v60);
        sub_100010BCC(&qword_10047F2E8);
        sub_100217A38(&qword_10047F2F0, &qword_10047F2E8, (void (*)(void))sub_10003F27C);
        dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
        sub_100133188(v33, v34, v55);
        sub_100133188(v33, v34, v55);
      }
    }
    uint64_t v27 = *((void *)v3 + 7);
    if (v27 != 4 && (v4 & 0x10) != 0)
    {
      uint64_t v29 = *((void *)v3 + 8);
      unint64_t v28 = *((void *)v3 + 9);
      sub_100013D44(v29, v28);
      unint64_t v30 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v31 = type metadata accessor for BinaryEncoder();
      uint64_t v32 = swift_allocObject();
      *(_OWORD *)(v32 + 16)  = xmmword_1003B2440;
      *(void *)(v32 + 32)  = v30;
      uint64_t v57 = v31;
      uint64_t v58 = sub_10021A5E0((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      *(void *)&long long v56 = v32;
      sub_10013316C(v27, v29, v28);
      swift_retain();
      NANServiceInfo.encode(to:)(&v56, v27, v29, v28);
      sub_100010754((uint64_t)&v56);
      sub_1001331AC(v27, v29, v28);
      swift_beginAccess();
      uint64_t v38 = *(void *)(v32 + 16);
      unint64_t v39 = *(void *)(v32 + 24);
      sub_100013D44(v38, v39);
      swift_release();
      uint64_t v40 = sub_10008D950(v38, v39);
      unint64_t v42 = v41;
      sub_100039448((uint64_t)v59, v60);
      sub_100010BCC(&qword_10047E210);
      sub_10000F9CC(&qword_10047E348, &qword_10047E210);
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      sub_10000C970(v40, v42);
      sub_1001331AC(v27, v29, v28);
    }
  }
  return sub_100010754((uint64_t)v59);
}

BOOL sub_1001E55E0(_OWORD *a1, long long *a2)
{
  long long v2 = a1[3];
  v8[2]  = a1[2];
  v8[3]  = v2;
  long long v3 = a1[4];
  long long v4 = a1[1];
  v8[0]  = *a1;
  v8[1]  = v4;
  long long v5 = a2[3];
  v9[2]  = a2[2];
  v9[3]  = v5;
  v9[4]  = a2[4];
  long long v6 = *a2;
  v9[1]  = a2[1];
  v8[4]  = v3;
  v9[0]  = v6;
  return _s7CoreP2P12NANAttributeO17ServiceDescriptorV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)v8, (uint64_t)v9);
}

void *NANAttribute.ServiceDescriptorExtension.Control.datapathTypeIsMulticast.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptorExtension.Control.datapathTypeIsMulticast;
}

uint64_t NANAttribute.ServiceDescriptorExtension.Control.multicastType.getter(unsigned int a1)
{
  if ((~a1 & 0xC) != 0) {
    return 2;
  }
  else {
    return (a1 >> 4) & 1;
  }
}

void *NANAttribute.ServiceDescriptorExtension.Control.multicastType.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptorExtension.Control.multicastType;
}

void *NANAttribute.ServiceDescriptorExtension.Control.qosRequired.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptorExtension.Control.qosRequired;
}

void *NANAttribute.ServiceDescriptorExtension.Control.rangingRequired.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptorExtension.Control.rangingRequired;
}

void *NANAttribute.ServiceDescriptorExtension.Control.rangeLimit.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptorExtension.Control.rangeLimit;
}

uint64_t sub_1001E5690()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001E56F0()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t sub_1001E5740()
{
  if (*v0) {
    return 0xD000000000000010;
  }
  else {
    return 0xD000000000000011;
  }
}

uint64_t sub_1001E5780@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10022C29C(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001E57A8(uint64_t a1)
{
  unint64_t v2 = sub_100217AA4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001E57E4(uint64_t a1)
{
  unint64_t v2 = sub_100217AA4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.ServiceDescriptorExtension.RangeLimit.encode(to:)(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_1004825D0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  long long v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_100217AA4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15]  = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14]  = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t NANAttribute.ServiceDescriptorExtension.RangeLimit.init(from:)(void *a1)
{
  return sub_10021404C(a1);
}

uint64_t sub_1001E5998@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = sub_10021404C(a1);
  if (!v2) {
    *a2  = result;
  }
  return result;
}

uint64_t sub_1001E59C4(void *a1)
{
  return NANAttribute.ServiceDescriptorExtension.RangeLimit.encode(to:)(a1);
}

unint64_t NANAttribute.ServiceDescriptorExtension.rangeLimit.getter()
{
  return *(unsigned int *)(v0 + 4) | ((unint64_t)*(unsigned __int8 *)(v0 + 8) << 32);
}

uint64_t NANAttribute.ServiceDescriptorExtension.rangeLimit.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 4)  = result;
  *(unsigned char *)(v1 + 8)  = BYTE4(result) & 1;
  return result;
}

uint64_t NANAttribute.ServiceDescriptorExtension.serviceUpdateIndicator.getter()
{
  return *(unsigned __int8 *)(v0 + 9) | (*(unsigned __int8 *)(v0 + 10) << 8);
}

uint64_t NANAttribute.ServiceDescriptorExtension.serviceUpdateIndicator.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 9)  = result;
  *(unsigned char *)(v1 + 10)  = BYTE1(result) & 1;
  return result;
}

uint64_t (*NANAttribute.Datapath.datapathID.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANAttribute.ServiceDescriptorExtension.serviceInfo.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1001331AC(*(void *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32));
  *(void *)(v3 + 16)  = a1;
  *(void *)(v3 + 24)  = a2;
  *(void *)(v3 + 32)  = a3;
  return result;
}

uint64_t NANAttribute.ServiceDescriptorExtension.hash(into:)()
{
  Hasher._combine(_:)(*(unsigned char *)v0);
  Hasher._combine(_:)(*(_WORD *)(v0 + 2));
  if (*(unsigned char *)(v0 + 8) == 1)
  {
    Hasher._combine(_:)(0);
    if ((*(unsigned char *)(v0 + 10) & 1) == 0)
    {
LABEL_3:
      Swift::UInt8 v1 = *(unsigned char *)(v0 + 9);
      Hasher._combine(_:)(1u);
      goto LABEL_6;
    }
  }
  else
  {
    int v2 = *(_DWORD *)(v0 + 4);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
    Hasher._combine(_:)(HIWORD(v2));
    if ((*(unsigned char *)(v0 + 10) & 1) == 0) {
      goto LABEL_3;
    }
  }
  Swift::UInt8 v1 = 0;
LABEL_6:
  Hasher._combine(_:)(v1);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 16);
  if (v3 == 4)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
    sub_100217AF8(v0);
    Data.hash(into:)();
  }

  return sub_100217B28(v0);
}

Swift::Int NANAttribute.ServiceDescriptorExtension.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(unsigned char *)v0);
  Hasher._combine(_:)(*(_WORD *)(v0 + 2));
  if (*(unsigned char *)(v0 + 8) == 1)
  {
    Hasher._combine(_:)(0);
    if ((*(unsigned char *)(v0 + 10) & 1) == 0)
    {
LABEL_3:
      Swift::UInt8 v1 = *(unsigned char *)(v0 + 9);
      Hasher._combine(_:)(1u);
      goto LABEL_6;
    }
  }
  else
  {
    int v2 = *(_DWORD *)(v0 + 4);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
    Hasher._combine(_:)(HIWORD(v2));
    if ((*(unsigned char *)(v0 + 10) & 1) == 0) {
      goto LABEL_3;
    }
  }
  Swift::UInt8 v1 = 0;
LABEL_6:
  Hasher._combine(_:)(v1);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 16);
  if (v3 == 4)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
    sub_100217AF8(v0);
    Data.hash(into:)();
  }
  sub_100217B28(v0);
  return Hasher._finalize()();
}

Swift::Int sub_1001E5CD0()
{
  return NANAttribute.ServiceDescriptorExtension.hashValue.getter();
}

uint64_t sub_1001E5D0C()
{
  return NANAttribute.ServiceDescriptorExtension.hash(into:)();
}

Swift::Int sub_1001E5D48()
{
  int v1 = *(_DWORD *)(v0 + 4);
  int v2 = *(unsigned __int8 *)(v0 + 8);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 9);
  char v4 = *(unsigned char *)(v0 + 10);
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v6 = *(void *)(v0 + 24);
  unint64_t v7 = *(void *)(v0 + 32);
  Swift::UInt8 v8 = *(unsigned char *)v0;
  Swift::UInt16 v9 = *(_WORD *)(v0 + 2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      goto LABEL_6;
    }
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
    Hasher._combine(_:)(HIWORD(v1));
    if ((v4 & 1) == 0) {
      goto LABEL_3;
    }
  }
  Swift::UInt8 v3 = 0;
LABEL_6:
  Hasher._combine(_:)(v3);
  if (v5 == 4)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5);
    sub_10013316C(v5, v6, v7);
    Data.hash(into:)();
  }
  sub_1001331AC(v5, v6, v7);
  return Hasher._finalize()();
}

double NANAttribute.ServiceDescriptorExtension.init(from:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10021548C(a1, (uint64_t)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2  = v6[0];
    *(_OWORD *)(a2 + 16)  = v5;
    *(void *)(a2 + 32)  = v7;
  }
  return result;
}

uint64_t sub_1001E5EE0(void *a1)
{
  return NANAttribute.ServiceDescriptorExtension.encode(to:)(a1);
}

uint64_t NANAttribute.ServiceDescriptorExtension.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  sub_100039448((uint64_t)v18, v19);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  if (!v2)
  {
    __int16 v4 = *(_WORD *)(v1 + 2);
    LOWORD(v17[0])  = v4;
    sub_100039448((uint64_t)v18, v19);
    sub_100217B58();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    sub_10006EC68(v1 + 4, (uint64_t)v22, &qword_1004825E8);
    sub_10006EC68((uint64_t)v22, (uint64_t)&v26, &qword_1004825E8);
    if ((v27 & 1) == 0 && (v4 & 0x100) != 0)
    {
      LODWORD(v17[0])  = v26;
      sub_100039448((uint64_t)v18, v19);
      sub_100217BAC();
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    }
    sub_10006EC68(v1 + 9, (uint64_t)v21, &qword_1004825F0);
    sub_10006EC68((uint64_t)v21, (uint64_t)v28, &qword_1004825F0);
    if ((v28[1] & 1) == 0 && (v4 & 0x200) != 0)
    {
      sub_100039448((uint64_t)v18, v19);
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    }
    sub_10006EC68(v1 + 16, (uint64_t)v20, (uint64_t *)&unk_100485B70);
    sub_10006EC68((uint64_t)v20, (uint64_t)v23, (uint64_t *)&unk_100485B70);
    uint64_t v6 = v23[0];
    if (v23[0] != 4)
    {
      uint64_t v7 = v24;
      unint64_t v8 = v25;
      sub_100217AF8(v1);
      unint64_t v9 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v10 = type metadata accessor for BinaryEncoder();
      uint64_t v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16)  = xmmword_1003B2440;
      *(void *)(v11 + 32)  = v9;
      v17[3]  = v10;
      void v17[4] = sub_10021A5E0((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      v17[0]  = v11;
      sub_100217AF8(v3);
      swift_retain();
      NANServiceInfo.encode(to:)(v17, v6, v7, v8);
      sub_100010754((uint64_t)v17);
      sub_100217B28(v3);
      swift_beginAccess();
      uint64_t v12 = *(void *)(v11 + 16);
      unint64_t v13 = *(void *)(v11 + 24);
      sub_100013D44(v12, v13);
      swift_release();
      uint64_t v14 = sub_10008DA38(v12, v13);
      unint64_t v16 = v15;
      sub_100039448((uint64_t)v18, v19);
      sub_100010BCC(&qword_10047E6F8);
      sub_10000F9CC(&qword_1004825F8, &qword_10047E6F8);
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      sub_10000C970(v14, v16);
      sub_100217B28(v3);
    }
  }
  return sub_100010754((uint64_t)v18);
}

uint64_t sub_1001E62DC(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0]  = *(_OWORD *)a1;
  v5[1]  = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0]  = *(_OWORD *)a2;
  v7[1]  = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return _s7CoreP2P12NANAttributeO26ServiceDescriptorExtensionV23__derived_struct_equalsySbAE_AEtFZ_0((unsigned __int8 *)v5, (unsigned __int8 *)v7) & 1;
}

void *NANAttribute.ConnectionCapability.wifiDirect.unsafeMutableAddressor()
{
  return &static NANAttribute.ConnectionCapability.wifiDirect;
}

void *NANAttribute.ConnectionCapability.p2ps.unsafeMutableAddressor()
{
  return &static NANAttribute.ConnectionCapability.p2ps;
}

void *NANAttribute.ConnectionCapability.tdls.unsafeMutableAddressor()
{
  return &static NANAttribute.ConnectionCapability.tdls;
}

void *NANAttribute.ConnectionCapability.wlanInfrastructure.unsafeMutableAddressor()
{
  return &static NANAttribute.ConnectionCapability.wlanInfrastructure;
}

void *NANAttribute.ConnectionCapability.ibss.unsafeMutableAddressor()
{
  return &static NANAttribute.ConnectionCapability.ibss;
}

void *NANAttribute.ConnectionCapability.mesh.unsafeMutableAddressor()
{
  return &static NANAttribute.ConnectionCapability.mesh;
}

uint64_t sub_1001E6370()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001E63D0()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1001E6420()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001E6480()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t NANAttribute.IBSS.availability.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 18);
  uint64_t v2 = *(void *)(v0 + 24);
  unint64_t v3 = *(void *)(v0 + 32);
  int v4 = *(unsigned __int16 *)(v0 + 16);
  sub_100013D44(v2, v3);
  if (v1) {
    int v5 = 0x10000;
  }
  else {
    int v5 = 0;
  }
  return v4 | v5;
}

uint64_t NANAttribute.IBSS.availability.setter(unsigned int a1, uint64_t a2, uint64_t a3)
{
  unsigned int v7 = a1 >> 8;
  uint64_t result = sub_10000C970(*(void *)(v3 + 24), *(void *)(v3 + 32));
  *(unsigned char *)(v3 + 16)  = a1;
  *(unsigned char *)(v3 + 17)  = v7;
  *(unsigned char *)(v3 + 18)  = BYTE2(a1) & 1;
  *(void *)(v3 + 24)  = a2;
  *(void *)(v3 + 32)  = a3;
  return result;
}

uint64_t NANAttribute.WLANInfrastructure.role.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 40)  = result & 1;
  return result;
}

void NANAttribute.WLANInfrastructure.hash(into:)()
{
  Swift::UInt8 v1 = v0[1];
  Swift::UInt8 v2 = v0[2];
  Swift::UInt8 v3 = v0[3];
  Swift::UInt8 v4 = v0[4];
  Swift::UInt8 v5 = v0[5];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Swift::UInt8 v6 = v0[7];
  Swift::UInt8 v7 = v0[8];
  Swift::UInt8 v8 = v0[9];
  Swift::UInt8 v9 = v0[10];
  Swift::UInt8 v10 = v0[11];
  Hasher._combine(_:)(v0[6]);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Swift::UInt8 v11 = v0[18];
  Swift::UInt8 v12 = v0[17];
  Hasher._combine(_:)(v0[16]);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v11 & 1);
  sub_100217C00((uint64_t)v0);
  Data.hash(into:)();
  sub_100217C30((uint64_t)v0);
  Hasher._combine(_:)(v0[40]);
}

unint64_t sub_1001E669C()
{
  unint64_t result = 0xD000000000000010;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000018;
      break;
    case 2:
      unint64_t result = 0x6962616C69617661;
      break;
    case 3:
      unint64_t result = 1701605234;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001E6730@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10022C388(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001E6758(uint64_t a1)
{
  unint64_t v2 = sub_100217C60();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001E6794(uint64_t a1)
{
  unint64_t v2 = sub_100217C60();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.WLANInfrastructure.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100010BCC(&qword_100482608);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  Swift::UInt8 v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_100217C60();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LODWORD(v10)  = *(_DWORD *)v3;
  WORD2(v10)  = *(_WORD *)(v3 + 4);
  char v12 = 0;
  sub_10003F27C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LODWORD(v10)  = *(_DWORD *)(v3 + 6);
    WORD2(v10)  = *(_WORD *)(v3 + 10);
    char v12 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v10 = *(_OWORD *)(v3 + 16);
    uint64_t v11 = *(void *)(v3 + 32);
    char v12 = 2;
    sub_100217CB4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v10)  = *(unsigned char *)(v3 + 40);
    char v12 = 3;
    sub_100217D08();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int NANAttribute.WLANInfrastructure.hashValue.getter()
{
  Hasher.init(_seed:)();
  Swift::UInt8 v1 = v0[1];
  Swift::UInt8 v2 = v0[2];
  Swift::UInt8 v3 = v0[3];
  Swift::UInt8 v4 = v0[4];
  Swift::UInt8 v5 = v0[5];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Swift::UInt8 v6 = v0[7];
  Swift::UInt8 v7 = v0[8];
  Swift::UInt8 v8 = v0[9];
  Swift::UInt8 v9 = v0[10];
  Swift::UInt8 v10 = v0[11];
  Hasher._combine(_:)(v0[6]);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Swift::UInt8 v11 = v0[18];
  Swift::UInt8 v12 = v0[17];
  Hasher._combine(_:)(v0[16]);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v11 & 1);
  sub_100217C00((uint64_t)v0);
  Data.hash(into:)();
  sub_100217C30((uint64_t)v0);
  Hasher._combine(_:)(v0[40]);
  return Hasher._finalize()();
}

double NANAttribute.WLANInfrastructure.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1002129F4(a1, (uint64_t)&v6);
  if (!v2)
  {
    long long v5 = v7[0];
    *a2  = v6;
    a2[1]  = v5;
    double result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 25)  = *(_OWORD *)((char *)v7 + 9);
  }
  return result;
}

Swift::Int sub_1001E6BA4()
{
  return NANAttribute.WLANInfrastructure.hashValue.getter();
}

void sub_1001E6BE0()
{
}

Swift::Int sub_1001E6C1C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  unint64_t v2 = *(void *)(v0 + 32);
  Swift::UInt8 v18 = *(unsigned char *)(v0 + 18);
  Swift::UInt8 v19 = *(unsigned char *)(v0 + 40);
  Swift::UInt8 v3 = *(unsigned char *)v0;
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 1);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 2);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 3);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v8 = *(unsigned char *)(v0 + 5);
  Swift::UInt8 v9 = *(unsigned char *)(v0 + 6);
  Swift::UInt8 v11 = *(unsigned char *)(v0 + 7);
  Swift::UInt8 v12 = *(unsigned char *)(v0 + 8);
  Swift::UInt8 v13 = *(unsigned char *)(v0 + 9);
  Swift::UInt8 v14 = *(unsigned char *)(v0 + 10);
  Swift::UInt8 v15 = *(unsigned char *)(v0 + 11);
  Swift::UInt8 v16 = *(unsigned char *)(v0 + 16);
  Swift::UInt8 v17 = *(unsigned char *)(v0 + 17);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  Hasher._combine(_:)(v16);
  Hasher._combine(_:)(v17);
  Hasher._combine(_:)(v18);
  sub_100013D44(v1, v2);
  Data.hash(into:)();
  sub_10000C970(v1, v2);
  Hasher._combine(_:)(v19);
  return Hasher._finalize()();
}

uint64_t sub_1001E6DB0(void *a1)
{
  return NANAttribute.WLANInfrastructure.encode(to:)(a1);
}

uint64_t sub_1001E6DC8(long long *a1, long long *a2)
{
  long long v2 = a1[1];
  long long v5 = *a1;
  v6[0]  = v2;
  *(_OWORD *)((char *)v6 + 9)  = *(long long *)((char *)a1 + 25);
  long long v3 = a2[1];
  long long v7 = *a2;
  v8[0]  = v3;
  *(_OWORD *)((char *)v8 + 9)  = *(long long *)((char *)a2 + 25);
  return _s7CoreP2P12NANAttributeO18WLANInfrastructureV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)&v5, (uint64_t)&v7) & 1;
}

void *NANAttribute.P2POperation.DeviceRole.device.unsafeMutableAddressor()
{
  return &static NANAttribute.P2POperation.DeviceRole.device;
}

void *NANAttribute.P2POperation.DeviceRole.groupOwner.unsafeMutableAddressor()
{
  return &static NANAttribute.P2POperation.DeviceRole.groupOwner;
}

void *NANAttribute.P2POperation.DeviceRole.client.unsafeMutableAddressor()
{
  return &static NANAttribute.P2POperation.DeviceRole.client;
}

uint64_t sub_1001E6E38()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001E6E98()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t NANAttribute.P2POperation.availability.getter(uint64_t a1, int a2, uint64_t a3, unint64_t a4)
{
  return a2 & 0x1FFFF;
}

uint64_t NANAttribute.Mesh.availability.setter(unsigned int a1, uint64_t a2, uint64_t a3)
{
  unsigned int v7 = a1 >> 8;
  uint64_t result = sub_10000C970(*(void *)(v3 + 16), *(void *)(v3 + 24));
  *(unsigned char *)(v3 + 8)  = a1;
  *(unsigned char *)(v3 + 9)  = v7;
  *(unsigned char *)(v3 + 10)  = BYTE2(a1) & 1;
  *(void *)(v3 + 16)  = a2;
  *(void *)(v3 + 24)  = a3;
  return result;
}

uint64_t NANAttribute.P2POperation.hash(into:)(int a1, unint64_t a2, unsigned int a3, uint64_t a4, unint64_t a5)
{
  *(_DWORD *)Swift::UInt8 v15 = a3 >> 8;
  unint64_t v8 = a2 >> 8;
  unint64_t v9 = a2 >> 16;
  unint64_t v10 = a2 >> 24;
  unint64_t v11 = HIDWORD(a2);
  unint64_t v12 = a2 >> 40;
  unint64_t v13 = HIWORD(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(a3);
  Hasher._combine(_:)(v15[0]);
  Hasher._combine(_:)(BYTE2(a3) & 1);
  sub_100013D44(a4, a5);
  Data.hash(into:)();

  return sub_10000C970(a4, a5);
}

BOOL static NANAttribute.P2POperation.__derived_struct_equals(_:_:)(uint64_t a1, int a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6, uint64_t a7, unint64_t a8)
{
  return sub_10020CB08(a1 & 0xFFFFFFFFFFFFFFLL, a2 & 0x1FFFF, a3, a4, a5 & 0xFFFFFFFFFFFFFFLL, a6 & 0x1FFFF, a7, a8);
}

uint64_t sub_1001E7094()
{
  uint64_t v1 = 0x657264644163616DLL;
  if (*v0 != 1) {
    uint64_t v1 = 0x6962616C69617661;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1701605234;
  }
}

uint64_t sub_1001E70F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10022C544(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001E711C(uint64_t a1)
{
  unint64_t v2 = sub_100217D5C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001E7158(uint64_t a1)
{
  unint64_t v2 = sub_100217D5C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.P2POperation.encode(to:)(void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v9 = sub_100010BCC(&qword_100482628);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  unint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_100217D5C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v20)  = a2;
  char v27 = 0;
  sub_100217DB0();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v5)
  {
    int v13 = a3;
    uint64_t v14 = v18;
    uint64_t v15 = v19;
    LOBYTE(v20)  = BYTE1(a2);
    HIBYTE(v20)  = BYTE2(a2);
    char v21 = BYTE3(a2);
    char v22 = BYTE4(a2);
    char v23 = BYTE5(a2);
    char v24 = BYTE6(a2);
    char v27 = 1;
    sub_10003F27C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    __int16 v20 = v13;
    char v21 = BYTE2(v13) & 1;
    uint64_t v25 = v14;
    uint64_t v26 = v15;
    char v27 = 2;
    sub_100217CB4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

Swift::Int NANAttribute.P2POperation.hashValue.getter(unint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4)
{
  Swift::UInt8 v7 = a1;
  *(_DWORD *)uint64_t v15 = a2 >> 8;
  unint64_t v8 = a1 >> 8;
  unint64_t v9 = a1 >> 16;
  unint64_t v10 = a1 >> 24;
  unint64_t v11 = HIDWORD(a1);
  unint64_t v12 = a1 >> 40;
  *(void *)uint64_t v14 = HIWORD(a1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v14[0]);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v15[0]);
  Hasher._combine(_:)(BYTE2(a2) & 1);
  sub_100013D44(a3, a4);
  Data.hash(into:)();
  sub_10000C970(a3, a4);
  return Hasher._finalize()();
}

uint64_t NANAttribute.P2POperation.init(from:)(void *a1)
{
  return sub_100210AC0(a1) & 0xFFFFFFFFFFFFFFLL;
}

Swift::Int sub_1001E7510()
{
  if (*((unsigned char *)v0 + 10)) {
    int v1 = 0x10000;
  }
  else {
    int v1 = 0;
  }
  return NANAttribute.P2POperation.hashValue.getter(*v0 | ((unint64_t)*((unsigned __int8 *)v0 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v0 + 5) << 40) | ((unint64_t)*((unsigned __int8 *)v0 + 6) << 48), *((unsigned __int16 *)v0 + 4) | v1, *((void *)v0 + 2), *((void *)v0 + 3));
}

uint64_t sub_1001E754C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 1);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 2);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 3);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 5);
  Swift::UInt8 v8 = *(unsigned char *)(v0 + 6);
  Swift::UInt8 v9 = *(unsigned char *)(v0 + 8);
  Swift::UInt8 v11 = *(unsigned char *)(v0 + 9);
  Swift::UInt8 v12 = *(unsigned char *)(v0 + 10);
  Hasher._combine(_:)(*(unsigned char *)v0);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  sub_100013D44(v1, v2);
  Data.hash(into:)();

  return sub_10000C970(v1, v2);
}

Swift::Int sub_1001E7648()
{
  uint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  Swift::UInt8 v3 = *(unsigned char *)v0;
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 1);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 2);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 3);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v8 = *(unsigned char *)(v0 + 5);
  Swift::UInt8 v9 = *(unsigned char *)(v0 + 6);
  Swift::UInt8 v11 = *(unsigned char *)(v0 + 8);
  Swift::UInt8 v12 = *(unsigned char *)(v0 + 9);
  Swift::UInt8 v13 = *(unsigned char *)(v0 + 10);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  sub_100013D44(v1, v2);
  Data.hash(into:)();
  sub_10000C970(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1001E7770@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100210AC0(a1);
  if (!v2)
  {
    *(_WORD *)a2  = result;
    *(unsigned char *)(a2 + 2)  = BYTE2(result);
    *(unsigned char *)(a2 + 3)  = BYTE3(result);
    *(unsigned char *)(a2 + 4)  = BYTE4(result);
    *(unsigned char *)(a2 + 5)  = BYTE5(result);
    *(unsigned char *)(a2 + 6)  = BYTE6(result);
    *(_WORD *)(a2 + 8)  = v5;
    *(unsigned char *)(a2 + 10)  = BYTE2(v5) & 1;
    *(void *)(a2 + 16)  = v6;
    *(void *)(a2 + 24)  = v7;
  }
  return result;
}

uint64_t sub_1001E77E4(void *a1)
{
  if (*((unsigned char *)v1 + 10)) {
    int v2 = 0x10000;
  }
  else {
    int v2 = 0;
  }
  return NANAttribute.P2POperation.encode(to:)(a1, *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v1 + 5) << 40) | ((unint64_t)*((unsigned __int8 *)v1 + 6) << 48), *((unsigned __int16 *)v1 + 4) | v2, *((void *)v1 + 2), *((void *)v1 + 3));
}

BOOL sub_1001E7834(unsigned int *a1, unsigned int *a2)
{
  if (*((unsigned char *)a1 + 10)) {
    int v2 = 0x10000;
  }
  else {
    int v2 = 0;
  }
  if (*((unsigned char *)a2 + 10)) {
    int v3 = 0x10000;
  }
  else {
    int v3 = 0;
  }
  return sub_10020CB08(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 5) << 40) | ((unint64_t)*((unsigned __int8 *)a1 + 6) << 48), *((unsigned __int16 *)a1 + 4) | v2, *((void *)a1 + 2), *((void *)a1 + 3), *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 40) | ((unint64_t)*((unsigned __int8 *)a2 + 6) << 48), *((unsigned __int16 *)a2 + 4) | v3, *((void *)a2 + 2), *((void *)a2 + 3));
}

uint64_t NANAttribute.IBSS.hash(into:)()
{
  Swift::UInt8 v1 = v0[1];
  Swift::UInt8 v2 = v0[2];
  Swift::UInt8 v3 = v0[3];
  Swift::UInt8 v4 = v0[4];
  Swift::UInt8 v5 = v0[5];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Swift::UInt8 v6 = v0[7];
  Swift::UInt8 v7 = v0[8];
  Swift::UInt8 v8 = v0[9];
  Swift::UInt8 v9 = v0[10];
  Swift::UInt8 v10 = v0[11];
  Hasher._combine(_:)(v0[6]);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Swift::UInt8 v11 = v0[18];
  Swift::UInt8 v12 = v0[17];
  Hasher._combine(_:)(v0[16]);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v11 & 1);
  sub_100217C00((uint64_t)v0);
  Data.hash(into:)();

  return sub_100217C30((uint64_t)v0);
}

uint64_t sub_1001E79C4()
{
  uint64_t v1 = 0x657264644163616DLL;
  if (*v0 != 1) {
    uint64_t v1 = 0x6962616C69617661;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x4953534273736269;
  }
}

uint64_t sub_1001E7A30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10022C6B0(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001E7A58(uint64_t a1)
{
  unint64_t v2 = sub_100217E04();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001E7A94(uint64_t a1)
{
  unint64_t v2 = sub_100217E04();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.IBSS.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100010BCC(&qword_100482640);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  Swift::UInt8 v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_100217E04();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LODWORD(v10)  = *(_DWORD *)v3;
  WORD2(v10)  = *(_WORD *)(v3 + 4);
  char v12 = 0;
  sub_10003F27C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LODWORD(v10)  = *(_DWORD *)(v3 + 6);
    WORD2(v10)  = *(_WORD *)(v3 + 10);
    char v12 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v10 = *(_OWORD *)(v3 + 16);
    uint64_t v11 = *(void *)(v3 + 32);
    char v12 = 2;
    sub_100217CB4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int NANAttribute.IBSS.hashValue.getter()
{
  Hasher.init(_seed:)();
  Swift::UInt8 v1 = v0[1];
  Swift::UInt8 v2 = v0[2];
  Swift::UInt8 v3 = v0[3];
  Swift::UInt8 v4 = v0[4];
  Swift::UInt8 v5 = v0[5];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Swift::UInt8 v6 = v0[7];
  Swift::UInt8 v7 = v0[8];
  Swift::UInt8 v8 = v0[9];
  Swift::UInt8 v9 = v0[10];
  Swift::UInt8 v10 = v0[11];
  Hasher._combine(_:)(v0[6]);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Swift::UInt8 v11 = v0[18];
  Swift::UInt8 v12 = v0[17];
  Hasher._combine(_:)(v0[16]);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v11 & 1);
  sub_100217C00((uint64_t)v0);
  Data.hash(into:)();
  sub_100217C30((uint64_t)v0);
  return Hasher._finalize()();
}

double NANAttribute.IBSS.init(from:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1002144B8(a1, (uint64_t)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2  = v6[0];
    *(_OWORD *)(a2 + 16)  = v5;
    *(void *)(a2 + 32)  = v7;
  }
  return result;
}

Swift::Int sub_1001E7E5C()
{
  return NANAttribute.IBSS.hashValue.getter();
}

uint64_t sub_1001E7E98()
{
  return NANAttribute.IBSS.hash(into:)();
}

Swift::Int sub_1001E7ED4()
{
  Swift::UInt8 v18 = *(unsigned char *)(v0 + 18);
  uint64_t v1 = *(void *)(v0 + 24);
  unint64_t v2 = *(void *)(v0 + 32);
  Swift::UInt8 v3 = *(unsigned char *)v0;
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 1);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 2);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 3);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v8 = *(unsigned char *)(v0 + 5);
  Swift::UInt8 v9 = *(unsigned char *)(v0 + 6);
  Swift::UInt8 v11 = *(unsigned char *)(v0 + 7);
  Swift::UInt8 v12 = *(unsigned char *)(v0 + 8);
  Swift::UInt8 v13 = *(unsigned char *)(v0 + 9);
  Swift::UInt8 v14 = *(unsigned char *)(v0 + 10);
  Swift::UInt8 v15 = *(unsigned char *)(v0 + 11);
  Swift::UInt8 v16 = *(unsigned char *)(v0 + 16);
  Swift::UInt8 v17 = *(unsigned char *)(v0 + 17);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  Hasher._combine(_:)(v16);
  Hasher._combine(_:)(v17);
  Hasher._combine(_:)(v18);
  sub_100013D44(v1, v2);
  Data.hash(into:)();
  sub_10000C970(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1001E8058(void *a1)
{
  return NANAttribute.IBSS.encode(to:)(a1);
}

BOOL sub_1001E8070(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0]  = *(_OWORD *)a1;
  v5[1]  = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0]  = *(_OWORD *)a2;
  v7[1]  = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return _s7CoreP2P12NANAttributeO4IBSSV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)v5, (uint64_t)v7);
}

uint64_t NANAttribute.Mesh.availability.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 10);
  uint64_t v2 = *(void *)(v0 + 16);
  unint64_t v3 = *(void *)(v0 + 24);
  int v4 = *(unsigned __int16 *)(v0 + 8);
  sub_100013D44(v2, v3);
  if (v1) {
    int v5 = 0x10000;
  }
  else {
    int v5 = 0;
  }
  return v4 | v5;
}

uint64_t NANAttribute.Mesh.meshID.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  sub_100013D44(v1, *(void *)(v0 + 40));
  return v1;
}

uint64_t NANAttribute.Mesh.meshID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10000C970(*(void *)(v2 + 32), *(void *)(v2 + 40));
  *(void *)(v2 + 32)  = a1;
  *(void *)(v2 + 40)  = a2;
  return result;
}

uint64_t NANAttribute.Mesh.hash(into:)()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 1);
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 2);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 3);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 5);
  Hasher._combine(_:)(*(unsigned char *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)(v0 + 8);
  uint64_t v9 = *(void *)(v0 + 24);
  Hasher._combine(_:)(v8[0]);
  Hasher._combine(_:)(v8[1]);
  Hasher._combine(_:)(v8[2] & 1);
  sub_10013F0EC((uint64_t)v8);
  Data.hash(into:)();
  sub_1000A4C6C((uint64_t)v8);
  long long v7 = *(_OWORD *)(v0 + 32);
  sub_1001B7C38((uint64_t)&v7);
  Data.hash(into:)();
  return sub_1001B7C68((uint64_t)&v7);
}

uint64_t sub_1001E8284()
{
  uint64_t v1 = 0x6962616C69617661;
  if (*v0 != 1) {
    uint64_t v1 = 0x44496873656DLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x657264644163616DLL;
  }
}

uint64_t sub_1001E82E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10022C838(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001E8310(uint64_t a1)
{
  unint64_t v2 = sub_100217E58();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001E834C(uint64_t a1)
{
  unint64_t v2 = sub_100217E58();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.Mesh.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100010BCC(&qword_100482650);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_100217E58();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LODWORD(v10)  = *(_DWORD *)v3;
  WORD2(v10)  = *(_WORD *)(v3 + 4);
  char v12 = 0;
  sub_10003F27C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    long long v10 = *(_OWORD *)(v3 + 8);
    uint64_t v11 = *(void *)(v3 + 24);
    char v12 = 1;
    sub_100217CB4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v10 = *(_OWORD *)(v3 + 32);
    char v12 = 2;
    sub_100217EAC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int NANAttribute.Mesh.hashValue.getter()
{
  Hasher.init(_seed:)();
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 1);
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 2);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 3);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 5);
  Hasher._combine(_:)(*(unsigned char *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)(v0 + 8);
  uint64_t v9 = *(void *)(v0 + 24);
  Hasher._combine(_:)(v8[0]);
  Hasher._combine(_:)(v8[1]);
  Hasher._combine(_:)(v8[2] & 1);
  sub_10013F0EC((uint64_t)v8);
  Data.hash(into:)();
  sub_1000A4C6C((uint64_t)v8);
  long long v7 = *(_OWORD *)(v0 + 32);
  sub_1001B7C38((uint64_t)&v7);
  Data.hash(into:)();
  sub_1001B7C68((uint64_t)&v7);
  return Hasher._finalize()();
}

double NANAttribute.Mesh.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100214740(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2  = v6[0];
    a2[1]  = v5;
    double result = *(double *)&v7;
    a2[2]  = v7;
  }
  return result;
}

uint64_t sub_1001E86E8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  unint64_t v4 = *(void *)(v0 + 40);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 1);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 2);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 3);
  Swift::UInt8 v8 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v9 = *(unsigned char *)(v0 + 5);
  Swift::UInt8 v11 = *(unsigned char *)(v0 + 8);
  Swift::UInt8 v12 = *(unsigned char *)(v0 + 9);
  Swift::UInt8 v13 = *(unsigned char *)(v0 + 10);
  Hasher._combine(_:)(*(unsigned char *)v0);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  sub_100013D44(v1, v2);
  Data.hash(into:)();
  sub_10000C970(v1, v2);
  sub_100013D44(v3, v4);
  Data.hash(into:)();

  return sub_10000C970(v3, v4);
}

Swift::Int sub_1001E8808()
{
  uint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  unint64_t v4 = *(void *)(v0 + 40);
  Swift::UInt8 v5 = *(unsigned char *)v0;
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 1);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 2);
  Swift::UInt8 v8 = *(unsigned char *)(v0 + 3);
  Swift::UInt8 v9 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v11 = *(unsigned char *)(v0 + 5);
  Swift::UInt8 v12 = *(unsigned char *)(v0 + 8);
  Swift::UInt8 v13 = *(unsigned char *)(v0 + 9);
  Swift::UInt8 v14 = *(unsigned char *)(v0 + 10);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  sub_100013D44(v1, v2);
  Data.hash(into:)();
  sub_10000C970(v1, v2);
  sub_100013D44(v3, v4);
  Data.hash(into:)();
  sub_10000C970(v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_1001E894C(void *a1)
{
  return NANAttribute.Mesh.encode(to:)(a1);
}

uint64_t sub_1001E8964(_OWORD *a1, long long *a2)
{
  long long v2 = a1[1];
  v7[0]  = *a1;
  v7[1]  = v2;
  long long v3 = *a2;
  long long v4 = a2[1];
  v7[2]  = a1[2];
  v8[0]  = v3;
  long long v5 = a2[2];
  v8[1]  = v4;
  v8[2]  = v5;
  return _s7CoreP2P12NANAttributeO4MeshV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)v7, (uint64_t)v8) & 1;
}

uint64_t NANAttribute.FurtherServiceDiscovery.availability.getter(int a1, uint64_t a2, unint64_t a3)
{
  return a1 & 0x1FFFF;
}

uint64_t NANAttribute.FurtherServiceDiscovery.availability.setter(unsigned int a1, uint64_t a2, uint64_t a3)
{
  unsigned int v7 = a1 >> 8;
  uint64_t result = sub_10000C970(*(void *)(v3 + 8), *(void *)(v3 + 16));
  *(unsigned char *)uint64_t v3 = a1;
  *(unsigned char *)(v3 + 1)  = v7;
  *(unsigned char *)(v3 + 2)  = BYTE2(a1) & 1;
  *(void *)(v3 + 8)  = a2;
  *(void *)(v3 + 16)  = a3;
  return result;
}

BOOL static NANAttribute.FurtherServiceDiscovery.__derived_struct_equals(_:_:)(int a1, uint64_t a2, unint64_t a3, int a4, uint64_t a5, unint64_t a6)
{
  return (unsigned __int16)a1 == (unsigned __int16)a4
      && ((a1 ^ a4) & 0x10000) == 0
      && (_s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a2, a3, a5, a6) & 1) != 0;
}

uint64_t sub_1001E8AA0()
{
  return 0x6962616C69617661;
}

uint64_t sub_1001E8AC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6962616C69617661 && a2 == 0xEC0000007974696CLL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3  = v7 & 1;
  return result;
}

uint64_t sub_1001E8B70(uint64_t a1)
{
  unint64_t v2 = sub_100217F00();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001E8BAC(uint64_t a1)
{
  unint64_t v2 = sub_100217F00();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.FurtherServiceDiscovery.encode(to:)(void *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = a4;
  unsigned int v7 = a2 >> 8;
  uint64_t v8 = sub_100010BCC(&qword_100482668);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  Swift::UInt8 v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_100217F00();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = a2;
  char v15 = v7;
  char v16 = BYTE2(a2) & 1;
  uint64_t v17 = a3;
  uint64_t v18 = v13;
  sub_100217CB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t NANAttribute.FurtherServiceDiscovery.init(from:)(void *a1)
{
  return sub_1002135AC(a1) & 0x1FFFF;
}

uint64_t sub_1001E8D80@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1002135AC(a1);
  if (!v2)
  {
    *(_WORD *)a2  = result;
    *(unsigned char *)(a2 + 2)  = BYTE2(result) & 1;
    *(void *)(a2 + 8)  = v5;
    *(void *)(a2 + 16)  = v6;
  }
  return result;
}

uint64_t sub_1001E8DC0(void *a1)
{
  if (*((unsigned char *)v1 + 2)) {
    int v2 = 0x10000;
  }
  else {
    int v2 = 0;
  }
  return NANAttribute.FurtherServiceDiscovery.encode(to:)(a1, *v1 | v2, *((void *)v1 + 1), *((void *)v1 + 2));
}

BOOL sub_1001E8DF4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  BOOL v2 = *a1 == *a2 && a1[1] == a2[1];
  return v2
      && ((a1[2] ^ a2[2]) & 1) == 0
      && (_s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*((void *)a1 + 1), *((void *)a1 + 2), *((void *)a2 + 1), *((void *)a2 + 2)) & 1) != 0;
}

uint64_t NANAttribute.FurtherAvailabilityMap.hash(into:)(uint64_t a1, Swift::UInt8 a2, uint64_t a3)
{
  Hasher._combine(_:)(a2);
  swift_bridgeObjectRetain();
  sub_10009F38C(a1, a3);

  return swift_bridgeObjectRelease();
}

uint64_t static NANAttribute.FurtherAvailabilityMap.__derived_struct_equals(_:_:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_1001F6A10(a1, a2, a3, a4, sub_100096F8C);
}

uint64_t sub_1001E8EC0()
{
  if (*v0) {
    return 0xD000000000000013;
  }
  else {
    return 0x444970616DLL;
  }
}

uint64_t sub_1001E8EFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10022C9AC(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001E8F24(uint64_t a1)
{
  unint64_t v2 = sub_100217F54();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001E8F60(uint64_t a1)
{
  unint64_t v2 = sub_100217F54();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.FurtherAvailabilityMap.encode(to:)(void *a1, char a2, uint64_t a3)
{
  uint64_t v7 = sub_100010BCC(&qword_100482678);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_100217F54();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v15 = a2;
  char v14 = 0;
  sub_1000A331C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v3)
  {
    v12[1]  = a3;
    char v13 = 1;
    sub_100010BCC(&qword_100482688);
    sub_100217A38(&qword_100482690, &qword_100482688, (void (*)(void))sub_100217FA8);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int NANAttribute.FurtherAvailabilityMap.hashValue.getter(Swift::UInt8 a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  swift_bridgeObjectRetain();
  sub_10009F38C((uint64_t)v5, a2);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t NANAttribute.FurtherAvailabilityMap.init(from:)(void *a1)
{
  return sub_1002132C8(a1);
}

Swift::Int sub_1001E91FC()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Swift::UInt8 v2 = *(unsigned char *)v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  swift_bridgeObjectRetain();
  sub_10009F38C((uint64_t)v4, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1001E926C(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  Hasher._combine(_:)(*(unsigned char *)v1);
  swift_bridgeObjectRetain();
  sub_10009F38C(a1, v3);

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001E92CC()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Swift::UInt8 v2 = *(unsigned char *)v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  swift_bridgeObjectRetain();
  sub_10009F38C((uint64_t)v4, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1001E9338@<X0>(uint64_t a1@<X8>)
{
  return sub_1001F6E2C((uint64_t (*)(void))sub_1002132C8, a1);
}

uint64_t sub_1001E9364(void *a1)
{
  return NANAttribute.FurtherAvailabilityMap.encode(to:)(a1, *(unsigned char *)v1, *(void *)(v1 + 8));
}

uint64_t sub_1001E9384(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1001F6E98(a1, a2, a3, a4, sub_100096F8C);
}

uint64_t NANAttribute.Ranging.hash(into:)(int a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v6 = a2 >> 8;
  unint64_t v7 = a2 >> 16;
  unint64_t v8 = a2 >> 24;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = a2 >> 40;
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  sub_100013D44(a3, a4);
  Data.hash(into:)();

  return sub_10000C970(a3, a4);
}

uint64_t static NANAttribute.Ranging.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  LOBYTE(v9)  = BYTE4(a1);
  HIBYTE(v9)  = BYTE5(a1);
  LOBYTE(v8)  = BYTE4(a4);
  HIBYTE(v8)  = BYTE5(a4);
  if (a1 != a4 || v9 != v8) {
    return 0;
  }

  return _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a2, a3, a5, a6);
}

uint64_t sub_1001E952C()
{
  if (*v0) {
    return 1635017060;
  }
  else {
    return 0x657264644163616DLL;
  }
}

uint64_t sub_1001E9564@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10022CA94(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001E958C(uint64_t a1)
{
  unint64_t v2 = sub_100217FFC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001E95C8(uint64_t a1)
{
  unint64_t v2 = sub_100217FFC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.Ranging.encode(to:)(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  char v4 = a2;
  unint64_t v6 = a2 >> 8;
  unint64_t v7 = a2 >> 16;
  unint64_t v16 = a2 >> 24;
  unint64_t v17 = HIDWORD(a2);
  unint64_t v18 = a2 >> 40;
  uint64_t v8 = sub_100010BCC(&qword_1004826A0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  Swift::UInt8 v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_100217FFC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v20)  = v4;
  BYTE1(v20)  = v6;
  BYTE2(v20)  = v7;
  BYTE3(v20)  = v16;
  BYTE4(v20)  = v17;
  BYTE5(v20)  = v18;
  char v22 = 0;
  sub_10003F27C();
  uint64_t v12 = v19;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v12)
  {
    uint64_t v20 = v14;
    uint64_t v21 = v15;
    char v22 = 1;
    sub_100217EAC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

Swift::Int NANAttribute.Ranging.hashValue.getter(unint64_t a1, uint64_t a2, unint64_t a3)
{
  Swift::UInt8 v5 = a1;
  unint64_t v6 = a1 >> 8;
  unint64_t v7 = a1 >> 16;
  unint64_t v8 = a1 >> 24;
  unint64_t v9 = HIDWORD(a1);
  unint64_t v10 = a1 >> 40;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  sub_100013D44(a2, a3);
  Data.hash(into:)();
  sub_10000C970(a2, a3);
  return Hasher._finalize()();
}

uint64_t NANAttribute.Ranging.init(from:)(void *a1)
{
  return sub_100214CF4(a1) & 0xFFFFFFFFFFFFLL;
}

Swift::Int sub_1001E98EC()
{
  uint64_t v1 = *(void *)(v0 + 8);
  unint64_t v2 = *(void *)(v0 + 16);
  Swift::UInt8 v3 = *(unsigned char *)v0;
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 1);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 2);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 3);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v8 = *(unsigned char *)(v0 + 5);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  sub_100013D44(v1, v2);
  Data.hash(into:)();
  sub_10000C970(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1001E99D0()
{
  uint64_t v1 = *(void *)(v0 + 8);
  unint64_t v2 = *(void *)(v0 + 16);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 1);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 2);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 3);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 5);
  Hasher._combine(_:)(*(unsigned char *)v0);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  sub_100013D44(v1, v2);
  Data.hash(into:)();

  return sub_10000C970(v1, v2);
}

Swift::Int sub_1001E9A90()
{
  uint64_t v1 = *(void *)(v0 + 8);
  unint64_t v2 = *(void *)(v0 + 16);
  Swift::UInt8 v3 = *(unsigned char *)v0;
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 1);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 2);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 3);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v8 = *(unsigned char *)(v0 + 5);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  sub_100013D44(v1, v2);
  Data.hash(into:)();
  sub_10000C970(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1001E9B70@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100214CF4(a1);
  if (!v2)
  {
    *(_WORD *)a2  = result;
    *(unsigned char *)(a2 + 2)  = BYTE2(result);
    *(unsigned char *)(a2 + 3)  = BYTE3(result);
    *(unsigned char *)(a2 + 4)  = BYTE4(result);
    *(unsigned char *)(a2 + 5)  = BYTE5(result);
    *(void *)(a2 + 8)  = v5;
    *(void *)(a2 + 16)  = v6;
  }
  return result;
}

uint64_t sub_1001E9BC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001EA5A4(a1, a2, a3, (uint64_t (*)(uint64_t, unint64_t, void, void))NANAttribute.Ranging.encode(to:));
}

uint64_t sub_1001E9BF4(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int16 *)(a1 + 4);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = *(void *)(a2 + 16);
  if (*(_DWORD *)a1 != *(_DWORD *)a2 || v4 != *(unsigned __int16 *)(a2 + 4)) {
    return 0;
  }

  return _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v5, v6, v7, v8);
}

void NANAttribute.ClusterDiscovery.hash(into:)(int a1, unint64_t a2, Swift::UInt64 a3, unint64_t a4)
{
  Swift::UInt8 v4 = a4;
  unint64_t v6 = a2 >> 8;
  unint64_t v7 = a2 >> 16;
  unint64_t v8 = a2 >> 24;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = a2 >> 40;
  unint64_t v11 = a4 >> 8;
  unint64_t v12 = a4 >> 16;
  *(void *)char v13 = a4 >> 24;
  *(void *)uint64_t v14 = HIDWORD(a4);
  *(void *)uint64_t v15 = a4 >> 40;
  *(void *)unint64_t v16 = HIWORD(a4);
  *(void *)unint64_t v17 = HIBYTE(a4);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(a3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13[0]);
  Hasher._combine(_:)(v14[0]);
  Hasher._combine(_:)(v15[0]);
  Hasher._combine(_:)(v16[0]);
  Hasher._combine(_:)(v17[0]);
}

BOOL static NANAttribute.ClusterDiscovery.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_10020B9AC(a1 & 0xFFFFFFFFFFFFLL, a2, a3, a4 & 0xFFFFFFFFFFFFLL, a5, a6);
}

uint64_t sub_1001E9DBC()
{
  unint64_t v1 = 0x7366664F656D6974;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000010;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x4972657473756C63;
  }
}

uint64_t sub_1001E9E24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10022CB84(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001E9E4C(uint64_t a1)
{
  unint64_t v2 = sub_100218050();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001E9E88(uint64_t a1)
{
  unint64_t v2 = sub_100218050();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.ClusterDiscovery.encode(to:)(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = a4;
  uint64_t v17 = a3;
  char v4 = a2;
  unint64_t v6 = a2 >> 8;
  unint64_t v7 = a2 >> 16;
  unint64_t v18 = a2 >> 24;
  unint64_t v19 = HIDWORD(a2);
  unint64_t v20 = a2 >> 40;
  uint64_t v8 = sub_100010BCC(&qword_1004826B0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  unint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_100218050();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v22)  = v4;
  BYTE1(v22)  = v6;
  BYTE2(v22)  = v7;
  BYTE3(v22)  = v18;
  BYTE4(v22)  = v19;
  BYTE5(v22)  = v20;
  char v23 = 0;
  sub_10003F27C();
  uint64_t v12 = v21;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v12)
  {
    uint64_t v13 = v16;
    LOBYTE(v22)  = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v22 = v13;
    char v23 = 2;
    sub_1002125C8();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

Swift::Int NANAttribute.ClusterDiscovery.hashValue.getter(unint64_t a1, Swift::UInt64 a2, unint64_t a3)
{
  Swift::UInt8 v3 = a3;
  Swift::UInt8 v5 = a1;
  unint64_t v6 = a1 >> 8;
  unint64_t v7 = a1 >> 16;
  unint64_t v8 = a1 >> 24;
  unint64_t v9 = HIDWORD(a1);
  unint64_t v10 = a1 >> 40;
  unint64_t v11 = a3 >> 8;
  *(void *)uint64_t v13 = a3 >> 16;
  *(void *)uint64_t v14 = a3 >> 24;
  *(void *)uint64_t v15 = HIDWORD(a3);
  *(void *)uint64_t v16 = a3 >> 40;
  *(void *)uint64_t v17 = HIWORD(a3);
  *(void *)unint64_t v18 = HIBYTE(a3);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v13[0]);
  Hasher._combine(_:)(v14[0]);
  Hasher._combine(_:)(v15[0]);
  Hasher._combine(_:)(v16[0]);
  Hasher._combine(_:)(v17[0]);
  Hasher._combine(_:)(v18[0]);
  return Hasher._finalize()();
}

uint64_t NANAttribute.ClusterDiscovery.init(from:)(void *a1)
{
  return sub_100211C90(a1) & 0xFFFFFFFFFFFFLL;
}

Swift::Int sub_1001EA270()
{
  return NANAttribute.ClusterDiscovery.hashValue.getter(*v0 | ((unint64_t)*((unsigned __int8 *)v0 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v0 + 5) << 40), *((void *)v0 + 1), *((void *)v0 + 2));
}

void sub_1001EA28C()
{
  Swift::UInt64 v1 = *(void *)(v0 + 8);
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 1);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 2);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 3);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 5);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 16);
  Swift::UInt8 v8 = *(unsigned char *)(v0 + 17);
  Swift::UInt8 v9 = *(unsigned char *)(v0 + 18);
  Swift::UInt8 v10 = *(unsigned char *)(v0 + 19);
  Swift::UInt8 v11 = *(unsigned char *)(v0 + 20);
  Swift::UInt8 v12 = *(unsigned char *)(v0 + 21);
  Swift::UInt8 v13 = *(unsigned char *)(v0 + 22);
  Swift::UInt8 v14 = *(unsigned char *)(v0 + 23);
  Hasher._combine(_:)(*(unsigned char *)v0);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
}

Swift::Int sub_1001EA394()
{
  Swift::UInt64 v1 = *(void *)(v0 + 8);
  Swift::UInt8 v2 = *(unsigned char *)v0;
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 1);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 2);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 3);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 5);
  Swift::UInt8 v8 = *(unsigned char *)(v0 + 16);
  Swift::UInt8 v9 = *(unsigned char *)(v0 + 17);
  Swift::UInt8 v11 = *(unsigned char *)(v0 + 18);
  Swift::UInt8 v12 = *(unsigned char *)(v0 + 19);
  Swift::UInt8 v13 = *(unsigned char *)(v0 + 20);
  Swift::UInt8 v14 = *(unsigned char *)(v0 + 21);
  Swift::UInt8 v15 = *(unsigned char *)(v0 + 22);
  Swift::UInt8 v16 = *(unsigned char *)(v0 + 23);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  Hasher._combine(_:)(v16);
  return Hasher._finalize()();
}

uint64_t sub_1001EA4E4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100211C90(a1);
  if (!v2)
  {
    *(_WORD *)a2  = result;
    *(unsigned char *)(a2 + 2)  = BYTE2(result);
    *(unsigned char *)(a2 + 3)  = BYTE3(result);
    *(unsigned char *)(a2 + 4)  = BYTE4(result);
    *(unsigned char *)(a2 + 5)  = BYTE5(result);
    *(void *)(a2 + 8)  = v5;
    *(void *)(a2 + 16)  = v6;
  }
  return result;
}

uint64_t sub_1001EA578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001EA5A4(a1, a2, a3, (uint64_t (*)(uint64_t, unint64_t, void, void))NANAttribute.ClusterDiscovery.encode(to:));
}

uint64_t sub_1001EA5A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, unint64_t, void, void))
{
  return a4(a1, *v4 | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v4 + 5) << 40), *((void *)v4 + 1), *((void *)v4 + 2));
}

BOOL sub_1001EA5DC(unsigned int *a1, unsigned int *a2)
{
  return sub_10020B9AC(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 5) << 40), *((void *)a1 + 1), *((void *)a1 + 2), *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 40), *((void *)a2 + 1), *((void *)a2 + 2));
}

void NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation.hash(into:)(int a1, Swift::UInt16 a2)
{
}

uint64_t sub_1001EA640(uint64_t a1)
{
  unint64_t v2 = sub_1002180A4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001EA67C(uint64_t a1)
{
  unint64_t v2 = sub_1002180A4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation.encode(to:)(void *a1)
{
  uint64_t v2 = sub_100010BCC(&qword_1004826C0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_1002180A4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation.hashValue.getter(Swift::UInt16 a1)
{
  return Hasher._finalize()();
}

uint64_t NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation.init(from:)(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_1004826D0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (uint64_t)sub_1000369C4(a1, a1[3]);
  sub_1002180A4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  sub_100010754((uint64_t)a1);
  return v7;
}

uint64_t sub_1001EA97C@<X0>(void *a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t v5 = sub_100010BCC(&qword_1004826D0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  Swift::UInt8 v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_1002180A4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100010754((uint64_t)a1);
  }
  __int16 v9 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = sub_100010754((uint64_t)a1);
  *a2  = v9;
  return result;
}

uint64_t sub_1001EAAD8(void *a1)
{
  uint64_t v2 = sub_100010BCC(&qword_1004826C0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_1002180A4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void *NANAttribute.DeviceCapability.OperationMode.vht80_80.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceCapability.OperationMode.vht80_80;
}

void *NANAttribute.DeviceCapability.OperationMode.vht_160.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceCapability.OperationMode.vht_160;
}

void *NANAttribute.DeviceCapability.OperationMode.ndlPaging.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceCapability.OperationMode.ndlPaging;
}

uint64_t sub_1001EAC30()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001EAC90()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t NANAttribute.DeviceCapability.AnntenaCount.txAntennaCount.getter(uint64_t a1)
{
  return sub_1001F0628(a1, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10008CAC0);
}

uint64_t NANAttribute.DeviceCapability.AnntenaCount.rxAntennaCount.getter(uint64_t a1)
{
  return sub_1001F0628(a1, 4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10008CAC0);
}

uint64_t sub_1001EAD20()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001EAD80()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(uint64_t a1)
{
  return sub_10000A7D0(a1, (uint64_t *)&unk_100483158);
}

void *NANAttribute.DeviceCapability.Capabilities.dfsMaster.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceCapability.Capabilities.dfsMaster;
}

void *NANAttribute.DeviceCapability.Capabilities.extendedIDKey.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceCapability.Capabilities.extendedIDKey;
}

void *NANAttribute.DeviceCapability.Capabilities.simultaneousDatapathReception.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceCapability.Capabilities.simultaneousDatapathReception;
}

void *NANAttribute.DeviceCapability.Capabilities.extendedNANDatapath.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceCapability.Capabilities.extendedNANDatapath;
}

void *NANAttribute.DeviceCapability.Capabilities.s3Capable.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceCapability.Capabilities.s3Capable;
}

uint64_t sub_1001EAE2C()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001EAE8C()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t NANAttribute.ElementContainer.mapIDs.setter(uint64_t result)
{
  *uint64_t v1 = result;
  v1[1]  = BYTE1(result) & 1;
  return result;
}

uint64_t NANAttribute.DeviceCapability.maximumChannelSwitchTime.getter@<X0>(unsigned __int16 a1@<W1>, void *a2@<X8>)
{
  *a2  = a1;
  uint64_t v3 = enum case for DispatchTimeInterval.microseconds(_:);
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  uint64_t v5 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 104);

  return v5(a2, v3, v4);
}

uint64_t NANAttribute.Datapath.control.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 10)  = result;
  return result;
}

void NANAttribute.DeviceCapability.hash(into:)(uint64_t a1, unint64_t a2, unsigned int a3)
{
  Swift::UInt16 v3 = a3;
  unsigned int v4 = HIWORD(a3);
  unint64_t v5 = HIWORD(a2);
  unint64_t v6 = a2 >> 40;
  if ((a2 & 0x100) != 0) {
    Swift::UInt8 v7 = 1;
  }
  else {
    Swift::UInt8 v7 = 2 * a2;
  }
  unint64_t v8 = HIDWORD(a2);
  unint64_t v9 = a2 >> 16;
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
}

BOOL static NANAttribute.DeviceCapability.__derived_struct_equals(_:_:)(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return sub_10020BC4C(a1 & 0xFFFFFFFFFF00FFLL | ((unint64_t)(BYTE1(a1) & 1) << 8), a2 & 0xFFFFFF, a3 & 0xFFFFFFFFFF00FFLL | ((unint64_t)(BYTE1(a3) & 1) << 8), a4 & 0xFFFFFF);
}

unint64_t sub_1001EB044(char a1)
{
  unint64_t result = 0x444970616DLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000023;
      break;
    case 2:
      unint64_t result = 0x6574726F70707573;
      break;
    case 3:
      unint64_t result = 1701080941;
      break;
    case 4:
      unint64_t result = 0xD000000000000010;
      break;
    case 5:
      unint64_t result = 0xD000000000000024;
      break;
    case 6:
      unint64_t result = 0x696C696261706163;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1001EB140()
{
  return sub_1001EB044(*v0);
}

uint64_t sub_1001EB148@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10022CCF0(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001EB170(uint64_t a1)
{
  unint64_t v2 = sub_1002180F8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001EB1AC(uint64_t a1)
{
  unint64_t v2 = sub_1002180F8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.DeviceCapability.encode(to:)(void *a1, uint64_t a2, int a3)
{
  char v4 = BYTE2(a3);
  uint64_t v7 = sub_100010BCC(&qword_1004826D8);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  Swift::UInt8 v10 = &v12[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_1002180F8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __int16 v16 = a2 & 0x1FF;
  char v15 = 0;
  sub_10021814C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v3)
  {
    __int16 v13 = WORD1(a2);
    char v14 = 1;
    sub_1002181A0();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v12[25]  = BYTE4(a2);
    v12[24]  = 2;
    sub_1000A30BC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v12[15]  = BYTE5(a2);
    v12[14]  = 3;
    sub_1002181F4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v12[13]  = BYTE6(a2);
    v12[12]  = 4;
    sub_100218248();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v12[11]  = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    v12[10]  = v4;
    v12[9]  = 6;
    sub_10021829C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int NANAttribute.DeviceCapability.hashValue.getter(uint64_t a1, int a2)
{
  Hasher.init(_seed:)();
  if ((a1 & 0x100) != 0) {
    Swift::UInt8 v4 = 1;
  }
  else {
    Swift::UInt8 v4 = 2 * a1;
  }
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(WORD1(a1));
  Hasher._combine(_:)(BYTE4(a1));
  Hasher._combine(_:)(BYTE5(a1));
  Hasher._combine(_:)(BYTE6(a1));
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(BYTE2(a2));
  return Hasher._finalize()();
}

unint64_t NANAttribute.DeviceCapability.init(from:)(void *a1)
{
  unint64_t result = sub_100211EB4(a1);
  if (!v1) {
    return result & 0xFFFFFFFFFF00FFLL | ((unint64_t)(BYTE1(result) & 1) << 8);
  }
  return result;
}

Swift::Int sub_1001EB5BC()
{
  char v1 = *v0;
  int v2 = v0[1];
  Swift::UInt16 v3 = *((_WORD *)v0 + 1);
  Swift::UInt8 v4 = v0[4];
  Swift::UInt8 v5 = v0[5];
  Swift::UInt8 v6 = v0[6];
  Swift::UInt16 v7 = *((_WORD *)v0 + 4);
  Swift::UInt8 v8 = v0[10];
  Hasher.init(_seed:)();
  if (v2) {
    Swift::UInt8 v9 = 1;
  }
  else {
    Swift::UInt8 v9 = 2 * v1;
  }
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  return Hasher._finalize()();
}

void sub_1001EB690()
{
  Swift::UInt16 v1 = *(_WORD *)(v0 + 2);
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 5);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 6);
  Swift::UInt16 v5 = *(_WORD *)(v0 + 8);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 10);
  if (*(unsigned char *)(v0 + 1)) {
    Swift::UInt8 v7 = 1;
  }
  else {
    Swift::UInt8 v7 = 2 * *(unsigned char *)v0;
  }
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
}

Swift::Int sub_1001EB730()
{
  char v1 = *v0;
  int v2 = v0[1];
  Swift::UInt16 v3 = *((_WORD *)v0 + 1);
  Swift::UInt8 v4 = v0[4];
  Swift::UInt8 v5 = v0[5];
  Swift::UInt8 v6 = v0[6];
  Swift::UInt16 v7 = *((_WORD *)v0 + 4);
  Swift::UInt8 v8 = v0[10];
  Hasher.init(_seed:)();
  if (v2) {
    Swift::UInt8 v9 = 1;
  }
  else {
    Swift::UInt8 v9 = 2 * v1;
  }
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  return Hasher._finalize()();
}

unint64_t sub_1001EB800@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_100211EB4(a1);
  if (!v2)
  {
    *(unsigned char *)a2  = result;
    *(unsigned char *)(a2 + 1)  = BYTE1(result) & 1;
    *(_WORD *)(a2 + 2)  = WORD1(result);
    *(unsigned char *)(a2 + 4)  = BYTE4(result);
    *(unsigned char *)(a2 + 5)  = BYTE5(result);
    *(unsigned char *)(a2 + 6)  = BYTE6(result);
    *(_WORD *)(a2 + 8)  = v5;
    *(unsigned char *)(a2 + 10)  = BYTE2(v5);
  }
  return result;
}

uint64_t sub_1001EB860(void *a1)
{
  return NANAttribute.DeviceCapability.encode(to:)(a1, *v1 | ((unint64_t)*((unsigned __int16 *)v1 + 1) << 16) | ((unint64_t)v1[4] << 32) | ((unint64_t)v1[5] << 40) | ((unint64_t)v1[6] << 48) | ((unint64_t)v1[1] << 8), *((unsigned __int16 *)v1 + 4) | (v1[10] << 16));
}

BOOL sub_1001EB8C0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10020BC4C(*a1 | ((unint64_t)*((unsigned __int16 *)a1 + 1) << 16) | ((unint64_t)a1[4] << 32) | ((unint64_t)a1[5] << 40) | ((unint64_t)a1[6] << 48) | ((unint64_t)a1[1] << 8), *((unsigned __int16 *)a1 + 4) | (a1[10] << 16), *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 1) << 16) | ((unint64_t)a2[4] << 32) | ((unint64_t)a2[5] << 40) | ((unint64_t)a2[6] << 48) | ((unint64_t)a2[1] << 8), *((unsigned __int16 *)a2 + 4) | (a2[10] << 16));
}

uint64_t sub_1001EB950()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001EB9B0()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1001EBA00()
{
  uint64_t result = sub_1001E1A70(0);
  qword_100482560  = result;
  return result;
}

uint64_t NANAttribute.DeviceCapabilityExtension.regulatoryInformationForSixGHz.getter(uint64_t a1)
{
  if (qword_10047C248 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_100482560;
  uint64_t v6 = qword_100482560;
  swift_bridgeObjectRetain_n();
  sub_1001E19B8(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10022F68C);
  char v3 = sub_1000956AC(v6, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) == 0 || !*(void *)(a1 + 16)) {
    return 5;
  }
  unsigned int v4 = (*(unsigned __int8 *)(a1 + 32) >> 1) & 7;
  if (v4 >= 5) {
    return 5;
  }
  else {
    return v4;
  }
}

uint64_t sub_1001EBB08()
{
  uint64_t result = sub_1001E1A70(8uLL);
  static NANAttribute.DeviceCapabilityExtension.pairingSetupEnabled  = result;
  return result;
}

uint64_t *NANAttribute.DeviceCapabilityExtension.pairingSetupEnabled.unsafeMutableAddressor()
{
  if (qword_10047C250 != -1) {
    swift_once();
  }
  return &static NANAttribute.DeviceCapabilityExtension.pairingSetupEnabled;
}

uint64_t static NANAttribute.DeviceCapabilityExtension.pairingSetupEnabled.getter()
{
  return sub_100075A04(&qword_10047C250);
}

uint64_t sub_1001EBB9C()
{
  uint64_t result = sub_1001E1A70(9uLL);
  static NANAttribute.DeviceCapabilityExtension.pairingCachingEnabled  = result;
  return result;
}

uint64_t *NANAttribute.DeviceCapabilityExtension.pairingCachingEnabled.unsafeMutableAddressor()
{
  if (qword_10047C258 != -1) {
    swift_once();
  }
  return &static NANAttribute.DeviceCapabilityExtension.pairingCachingEnabled;
}

uint64_t static NANAttribute.DeviceCapabilityExtension.pairingCachingEnabled.getter()
{
  return sub_100075A04(&qword_10047C258);
}

uint64_t sub_1001EBC30(uint64_t a1)
{
  unint64_t v2 = sub_1002182F0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001EBC6C(uint64_t a1)
{
  unint64_t v2 = sub_1002182F0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.DeviceCapabilityExtension.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100010BCC(&qword_100482710);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  Swift::UInt16 v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_1002182F0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1]  = a2;
  sub_100010BCC(&qword_10047E7D0);
  sub_10010E990((unint64_t *)&qword_10047F268);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void *NANAttribute.DeviceCapabilityExtension.init(from:)(void *a1)
{
  return sub_1002139F8(a1);
}

Swift::Int sub_1001EBE34()
{
  return sub_1001E1764(0, *v0);
}

Swift::Int sub_1001EBE54(uint64_t a1)
{
  return sub_1001E1764(a1, *v1);
}

void *sub_1001EBE70@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1002139F8(a1);
  if (!v2) {
    *a2  = result;
  }
  return result;
}

uint64_t sub_1001EBE9C(void *a1)
{
  return NANAttribute.DeviceCapabilityExtension.encode(to:)(a1, *v1);
}

uint64_t sub_1001EBEBC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v6 = *v2;
  swift_bridgeObjectRetain();
  sub_1000AD6A4(v4);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2  = v6;
  return result;
}

uint64_t sub_1001EBF24@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v6 = *v2;
  swift_bridgeObjectRetain();
  sub_1001E19B8(v4, (uint64_t (*)(uint64_t, uint64_t))sub_10022F68C);
  uint64_t result = swift_bridgeObjectRelease();
  *a2  = v6;
  return result;
}

uint64_t sub_1001EBF98@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v6 = *v2;
  swift_bridgeObjectRetain();
  sub_1000AD6BC(v4, (uint64_t (*)(uint64_t, uint64_t))sub_10022ECC8);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2  = v6;
  return result;
}

BOOL sub_1001EC014(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v9 = *v2;
  swift_bridgeObjectRetain();
  sub_1001E19B8(v4, (uint64_t (*)(uint64_t, uint64_t))sub_10022F68C);
  uint64_t v5 = v9;
  char v6 = sub_1000956AC(v9, v4);
  if ((v6 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = swift_bridgeObjectRetain();
    sub_1000AD6A4(v7);
    uint64_t v5 = v4;
  }
  *a1  = v5;
  swift_bridgeObjectRelease();
  return (v6 & 1) == 0;
}

uint64_t sub_1001EC0C8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1001E18B8(*a1, (uint64_t (*)(uint64_t, uint64_t))sub_10022F68C, (uint64_t (*)(uint64_t, uint64_t))sub_10022ECC8);
  *a2  = result;
  return result;
}

uint64_t sub_1001EC11C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v8 = *v2;
  swift_bridgeObjectRetain();
  sub_1001E19B8(v4, (uint64_t (*)(uint64_t, uint64_t))sub_10022F68C);
  uint64_t v5 = v8;
  sub_1000AD6A4(v4);
  char v6 = sub_1000956AC(v8, _swiftEmptyArrayStorage);
  uint64_t result = swift_bridgeObjectRelease();
  if (v6)
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v5 = 0;
  }
  *a2  = v5;
  return result;
}

uint64_t sub_1001EC1C8(uint64_t *a1)
{
  return sub_1001E19B8(*a1, (uint64_t (*)(uint64_t, uint64_t))sub_10022F68C);
}

uint64_t sub_1001EC1F8(uint64_t *a1)
{
  sub_1000AD6BC(*a1, (uint64_t (*)(uint64_t, uint64_t))sub_10022ECC8);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001EC248@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *v2;
  uint64_t v7 = *v2;
  swift_bridgeObjectRetain_n();
  sub_1000AD6BC(v4, (uint64_t (*)(uint64_t, uint64_t))sub_10022ECC8);
  sub_1001E19B8(v7, (uint64_t (*)(uint64_t, uint64_t))sub_10022F68C);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2  = v5;
  return result;
}

uint64_t sub_1001EC2F0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *v1;
  uint64_t v6 = *v1;
  swift_bridgeObjectRetain();
  sub_1001E19B8(v2, (uint64_t (*)(uint64_t, uint64_t))sub_10022F68C);
  char v4 = sub_1000956AC(v6, v3);
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t sub_1001EC370(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v5 = *v1;
  swift_bridgeObjectRetain();
  sub_1001E19B8(v2, (uint64_t (*)(uint64_t, uint64_t))sub_10022F68C);
  char v3 = sub_1000956AC(v5, _swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_1001EC3E8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *v1;
  uint64_t v5 = *a1;
  swift_bridgeObjectRetain();
  sub_1001E19B8(v3, (uint64_t (*)(uint64_t, uint64_t))sub_10022F68C);
  LOBYTE(v2)  = sub_1000956AC(v5, v2);
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1001EC468(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v4 = *v1;
  swift_bridgeObjectRetain();
  sub_1000AD6BC(v2, (uint64_t (*)(uint64_t, uint64_t))sub_10022ECC8);
  sub_1001E19B8(v4, (uint64_t (*)(uint64_t, uint64_t))sub_10022F68C);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001EC500@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_10022BC7C(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2  = v3;
  return result;
}

uint64_t sub_1001EC540()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001EC5A0()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t NANAttribute.Datapath.Status.description.getter(char a1)
{
  if (!a1) {
    return 0x65756E69746E6F63;
  }
  if (a1 == 1) {
    return 0x6465747065636361;
  }
  return 0x64657463656A6572;
}

uint64_t sub_1001EC64C()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001EC6AC()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1001EC6FC()
{
  uint64_t v1 = 0x6465747065636361;
  if (*v0 != 1) {
    uint64_t v1 = 0x64657463656A6572;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x65756E69746E6F63;
  }
}

void *NANAttribute.Datapath.Control.confirmRequired.unsafeMutableAddressor()
{
  return &static NANAttribute.Datapath.Control.confirmRequired;
}

void *NANAttribute.Datapath.Control.security.unsafeMutableAddressor()
{
  return &static NANAttribute.Datapath.Control.security;
}

void *NANAttribute.Datapath.Control.publishID.unsafeMutableAddressor()
{
  return &static NANAttribute.Datapath.Control.publishID;
}

void *NANAttribute.Datapath.Control.responderDatapathInterfaceAddress.unsafeMutableAddressor()
{
  return &static NANAttribute.Datapath.Control.responderDatapathInterfaceAddress;
}

void *NANAttribute.Datapath.Control.serviceSpecificInfo.unsafeMutableAddressor()
{
  return &static NANAttribute.Datapath.Control.serviceSpecificInfo;
}

uint64_t sub_1001EC798()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001EC7F8()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t NANAttribute.Datapath.type.getter()
{
  unsigned int v1 = sub_10008CAA8(0, 4, *(unsigned char *)(v0 + 1));
  if (v1 >= 5) {
    return 5;
  }
  else {
    return v1;
  }
}

unint64_t NANAttribute.Datapath.status.getter()
{
  unint64_t result = sub_10008CAA8(4uLL, 4, *(unsigned char *)(v0 + 1));
  if (result >= 3u) {
    return 3;
  }
  return result;
}

unint64_t NANAttribute.Datapath.initiatorDatapathInterfaceAddress.getter()
{
  return *(unsigned __int16 *)(v0 + 3) | ((unint64_t)*(unsigned int *)(v0 + 5) << 16);
}

uint64_t NANAttribute.Datapath.initiatorDatapathInterfaceAddress.setter(uint64_t result)
{
  *(_WORD *)(v1 + 3)  = result;
  *(unsigned char *)(v1 + 5)  = BYTE2(result);
  *(unsigned char *)(v1 + 6)  = BYTE3(result);
  *(unsigned char *)(v1 + 7)  = BYTE4(result);
  *(unsigned char *)(v1 + 8)  = BYTE5(result);
  return result;
}

uint64_t (*NANAttribute.Datapath.initiatorDatapathInterfaceAddress.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANAttribute.Datapath.datapathID.getter()
{
  return *(unsigned __int8 *)(v0 + 9);
}

uint64_t NANAttribute.Datapath.datapathID.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 9)  = result;
  return result;
}

uint64_t NANAttribute.Datapath.control.getter()
{
  return *(unsigned __int8 *)(v0 + 10);
}

uint64_t NANAttribute.Datapath.publishID.getter()
{
  return *(unsigned __int8 *)(v0 + 11) | (*(unsigned __int8 *)(v0 + 12) << 8);
}

uint64_t NANAttribute.Datapath.publishID.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 11)  = result;
  *(unsigned char *)(v1 + 12)  = BYTE1(result) & 1;
  return result;
}

uint64_t (*NANAttribute.Datapath.publishID.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

unint64_t NANAttribute.Datapath.responderDatapathInterfaceAddress.getter()
{
  return *(unsigned int *)(v0 + 13) | ((unint64_t)*(unsigned __int16 *)(v0 + 17) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 19) << 48);
}

uint64_t NANAttribute.Datapath.responderDatapathInterfaceAddress.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 13)  = result;
  *(_WORD *)(v1 + 17)  = WORD2(result);
  *(unsigned char *)(v1 + 19)  = BYTE6(result) & 1;
  return result;
}

uint64_t (*NANAttribute.Datapath.responderDatapathInterfaceAddress.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANAttribute.Datapath.serviceInfo.getter()
{
  uint64_t v1 = v0[3];
  sub_10013316C(v1, v0[4], v0[5]);
  return v1;
}

uint64_t NANAttribute.Datapath.serviceInfo.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1001331AC(*(void *)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40));
  *(void *)(v3 + 24)  = a1;
  *(void *)(v3 + 32)  = a2;
  *(void *)(v3 + 40)  = a3;
  return result;
}

uint64_t NANAttribute.Datapath.hash(into:)()
{
  Hasher._combine(_:)(*(unsigned char *)v0);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 1));
  Hasher._combine(_:)(*(unsigned char *)(v0 + 2));
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 5);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 6);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 7);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 8);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 3));
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 9));
  Hasher._combine(_:)(*(unsigned char *)(v0 + 10));
  if (*(unsigned char *)(v0 + 12))
  {
    Swift::UInt8 v6 = 0;
  }
  else
  {
    Swift::UInt8 v6 = *(unsigned char *)(v0 + 11);
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v6);
  if (*(unsigned char *)(v0 + 19))
  {
    LOBYTE(v7)  = 0;
  }
  else
  {
    unsigned int v8 = *(unsigned __int16 *)(v0 + 17);
    unsigned int v9 = *(_DWORD *)(v0 + 13);
    unint64_t v10 = v9 | ((unint64_t)*(unsigned __int16 *)(v0 + 17) << 32);
    unint64_t v11 = v10 >> 8;
    unint64_t v12 = v10 >> 16;
    unint64_t v13 = v10 >> 24;
    unsigned int v7 = v8 >> 8;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v9);
    Hasher._combine(_:)(v11);
    Hasher._combine(_:)(v12);
    Hasher._combine(_:)(v13);
    Hasher._combine(_:)(v8);
  }
  Hasher._combine(_:)(v7);
  uint64_t v14 = *(unsigned __int8 *)(v0 + 24);
  if (v14 == 4)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v14);
    sub_100218344(v0);
    Data.hash(into:)();
  }

  return sub_100218374(v0);
}

Swift::Int NANAttribute.Datapath.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(unsigned char *)v0);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 1));
  Hasher._combine(_:)(*(unsigned char *)(v0 + 2));
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 5);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 6);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 7);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 8);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 3));
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 9));
  Hasher._combine(_:)(*(unsigned char *)(v0 + 10));
  if (*(unsigned char *)(v0 + 12))
  {
    Swift::UInt8 v6 = 0;
  }
  else
  {
    Swift::UInt8 v6 = *(unsigned char *)(v0 + 11);
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v6);
  if (*(unsigned char *)(v0 + 19))
  {
    LOBYTE(v7)  = 0;
  }
  else
  {
    unsigned int v8 = *(unsigned __int16 *)(v0 + 17);
    unsigned int v9 = *(_DWORD *)(v0 + 13);
    unint64_t v10 = v9 | ((unint64_t)*(unsigned __int16 *)(v0 + 17) << 32);
    unint64_t v11 = v10 >> 8;
    unint64_t v12 = v10 >> 16;
    unint64_t v13 = v10 >> 24;
    unsigned int v7 = v8 >> 8;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v9);
    Hasher._combine(_:)(v11);
    Hasher._combine(_:)(v12);
    Hasher._combine(_:)(v13);
    Hasher._combine(_:)(v8);
  }
  Hasher._combine(_:)(v7);
  uint64_t v14 = *(unsigned __int8 *)(v0 + 24);
  if (v14 == 4)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v14);
    sub_100218344(v0);
    Data.hash(into:)();
  }
  sub_100218374(v0);
  return Hasher._finalize()();
}

Swift::Int sub_1001ECE2C()
{
  return NANAttribute.Datapath.hashValue.getter();
}

uint64_t sub_1001ECE68()
{
  return NANAttribute.Datapath.hash(into:)();
}

Swift::Int sub_1001ECEA4()
{
  return Hasher._finalize()();
}

double NANAttribute.Datapath.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100214EDC(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2  = v6[0];
    a2[1]  = v5;
    double result = *(double *)&v7;
    a2[2]  = v7;
  }
  return result;
}

uint64_t sub_1001ECF38(void *a1)
{
  return NANAttribute.Datapath.encode(to:)(a1);
}

uint64_t NANAttribute.Datapath.encode(to:)(void *a1)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  sub_100039448((uint64_t)v5, v6);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  if (!v2)
  {
    sub_100039448((uint64_t)v5, v6);
    sub_100010BCC(&qword_100482720);
    sub_10000F9CC(&qword_100482728, &qword_100482720);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    sub_100039448((uint64_t)v5, v6);
    sub_1002183A4();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    sub_100039448((uint64_t)v5, v6);
    sub_10003F27C();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    sub_100039448((uint64_t)v5, v6);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    char v3 = *(unsigned char *)(v1 + 10);
    sub_100039448((uint64_t)v5, v6);
    sub_1002183F8();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    sub_10006EC68(v1 + 11, (uint64_t)v9, &qword_1004825F0);
    sub_10006EC68((uint64_t)v9, (uint64_t)v10, &qword_1004825F0);
    if ((v10[1] & 1) == 0 && (v3 & 8) != 0)
    {
      sub_100039448((uint64_t)v5, v6);
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    }
    sub_10006EC68(v1 + 13, (uint64_t)v8, &qword_100482740);
    sub_10006EC68((uint64_t)v8, (uint64_t)&v12, &qword_100482740);
    if ((v13 & 1) == 0 && (v3 & 0x10) != 0)
    {
      sub_100039448((uint64_t)v5, v6);
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    }
    sub_10006EC68(v1 + 24, (uint64_t)v7, (uint64_t *)&unk_100485B70);
    sub_10006EC68((uint64_t)v7, (uint64_t)&v11, (uint64_t *)&unk_100485B70);
    if (v11 != 4 && (v3 & 0x20) != 0)
    {
      sub_100039448((uint64_t)v5, v6);
      sub_10021844C();
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    }
  }
  return sub_100010754((uint64_t)v5);
}

uint64_t sub_1001ED324(_OWORD *a1, long long *a2)
{
  long long v2 = a1[1];
  v7[0]  = *a1;
  v7[1]  = v2;
  long long v3 = *a2;
  long long v4 = a2[1];
  v7[2]  = a1[2];
  v8[0]  = v3;
  long long v5 = a2[2];
  v8[1]  = v4;
  v8[2]  = v5;
  return _s7CoreP2P12NANAttributeO8DatapathV23__derived_struct_equalsySbAE_AEtFZ_0((unsigned __int8 *)v7, (unsigned __int8 *)v8) & 1;
}

void *NANAttribute.DatapathExtension.Control.confirmRequired.unsafeMutableAddressor()
{
  return &static NANAttribute.DatapathExtension.Control.confirmRequired;
}

void *NANAttribute.DatapathExtension.Control.security.unsafeMutableAddressor()
{
  return &static NANAttribute.DatapathExtension.Control.security;
}

void *NANAttribute.DatapathExtension.Control.publishID.unsafeMutableAddressor()
{
  return &static NANAttribute.DatapathExtension.Control.publishID;
}

void *NANAttribute.DatapathExtension.Control.responderDatapathInterfaceAddress.unsafeMutableAddressor()
{
  return &static NANAttribute.DatapathExtension.Control.responderDatapathInterfaceAddress;
}

uint64_t sub_1001ED39C()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001ED3FC()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t NANAttribute.DatapathExtension.serviceInfo.getter()
{
  uint64_t v1 = v0[5];
  sub_10013316C(v1, v0[6], v0[7]);
  return v1;
}

uint64_t NANAttribute.DatapathExtension.serviceInfo.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1001331AC(*(void *)(v3 + 40), *(void *)(v3 + 48), *(void *)(v3 + 56));
  *(void *)(v3 + 40)  = a1;
  *(void *)(v3 + 48)  = a2;
  *(void *)(v3 + 56)  = a3;
  return result;
}

uint64_t sub_1001ED4D8()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001ED538()
{
  return RawRepresentable<>.encode(to:)();
}

void NANAttribute.DatapathExtension.hash(into:)()
{
  Hasher._combine(_:)(*(unsigned char *)v0);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 1));
  Hasher._combine(_:)(*(unsigned char *)(v0 + 2));
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 5);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 6);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 7);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 8);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 3));
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 9));
  Hasher._combine(_:)(*(unsigned char *)(v0 + 10));
  if (*(unsigned char *)(v0 + 12))
  {
    Swift::UInt8 v6 = 0;
  }
  else
  {
    Swift::UInt8 v6 = *(unsigned char *)(v0 + 11);
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v6);
  if (*(unsigned char *)(v0 + 19))
  {
    LOBYTE(v7)  = 0;
  }
  else
  {
    unsigned int v8 = *(unsigned __int16 *)(v0 + 17);
    unsigned int v9 = *(_DWORD *)(v0 + 13);
    unint64_t v10 = v9 | ((unint64_t)*(unsigned __int16 *)(v0 + 17) << 32);
    unint64_t v11 = v10 >> 8;
    unint64_t v12 = v10 >> 16;
    unint64_t v13 = v10 >> 24;
    unsigned int v7 = v8 >> 8;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v9);
    Hasher._combine(_:)(v11);
    Hasher._combine(_:)(v12);
    Hasher._combine(_:)(v13);
    Hasher._combine(_:)(v8);
  }
  Hasher._combine(_:)(v7);
  unint64_t v14 = *(void *)(v0 + 32);
  if (v14 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v15 = *(void *)(v0 + 24);
    Hasher._combine(_:)(1u);
    sub_100013D44(v15, v14);
    Data.hash(into:)();
    sub_10000C95C(v15, v14);
  }
  uint64_t v16 = *(void *)(v0 + 40);
  if (v16 == 4)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v17 = *(void *)(v0 + 48);
    unint64_t v18 = *(void *)(v0 + 56);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v16);
    sub_100013D44(v17, v18);
    Data.hash(into:)();
    sub_1001331AC(v16, v17, v18);
  }
}

Swift::Int NANAttribute.DatapathExtension.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_1001ED7D0()
{
  return Hasher._finalize()();
}

double NANAttribute.DatapathExtension.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1002184A0(a1, (uint64_t)v7);
  if (!v2)
  {
    long long v5 = v7[1];
    *a2  = v7[0];
    a2[1]  = v5;
    double result = *(double *)&v8;
    long long v6 = v9;
    a2[2]  = v8;
    a2[3]  = v6;
  }
  return result;
}

uint64_t sub_1001ED850(void *a1)
{
  return NANAttribute.DatapathExtension.encode(to:)(a1);
}

uint64_t NANAttribute.DatapathExtension.encode(to:)(void *a1)
{
  Swift::UInt8 v3 = (void *)v1;
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  sub_100039448((uint64_t)v32, v33);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  if (!v2)
  {
    LOBYTE(v29[0])  = *(unsigned char *)(v1 + 1);
    sub_100039448((uint64_t)v32, v33);
    sub_100010BCC(&qword_100482720);
    sub_10000F9CC(&qword_100482728, &qword_100482720);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    LOBYTE(v29[0])  = *(unsigned char *)(v1 + 2);
    sub_100039448((uint64_t)v32, v33);
    sub_1002183A4();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    LODWORD(v29[0])  = *(_DWORD *)(v1 + 3);
    WORD2(v29[0])  = *(_WORD *)(v1 + 7);
    sub_100039448((uint64_t)v32, v33);
    sub_10003F27C();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    sub_100039448((uint64_t)v32, v33);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    char v4 = *(unsigned char *)(v1 + 10);
    LOBYTE(v29[0])  = v4;
    sub_100039448((uint64_t)v32, v33);
    sub_100218F88();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    sub_10006EC68(v1 + 11, (uint64_t)v36, &qword_1004825F0);
    sub_10006EC68((uint64_t)v36, (uint64_t)v37, &qword_1004825F0);
    if ((v37[1] & 1) == 0 && (v4 & 8) != 0)
    {
      sub_100039448((uint64_t)v32, v33);
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    }
    sub_10006EC68(v1 + 13, (uint64_t)v35, &qword_100482740);
    sub_10006EC68((uint64_t)v35, (uint64_t)&v38, &qword_100482740);
    if ((v40 & 1) == 0 && (v4 & 0x10) != 0)
    {
      LODWORD(v29[0])  = v38;
      WORD2(v29[0])  = v39;
      sub_100039448((uint64_t)v32, v33);
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    }
    unint64_t v6 = *(void *)(v1 + 32);
    if (v6 >> 60 == 15)
    {
LABEL_17:
      uint64_t v16 = v3[5];
      if (v16 != 4)
      {
        uint64_t v18 = v3[6];
        unint64_t v17 = v3[7];
        sub_100013D44(v18, v17);
        unint64_t v19 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        uint64_t v20 = type metadata accessor for BinaryEncoder();
        uint64_t v21 = swift_allocObject();
        *(_OWORD *)(v21 + 16)  = xmmword_1003B2440;
        *(void *)(v21 + 32)  = v19;
        unint64_t v30 = (ValueMetadata *)v20;
        unint64_t v31 = sub_10021A5E0((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
        v29[0]  = v21;
        sub_10013316C(v16, v18, v17);
        swift_retain();
        NANServiceInfo.encode(to:)(v29, v16, v18, v17);
        sub_100010754((uint64_t)v29);
        sub_1001331AC(v16, v18, v17);
        swift_beginAccess();
        uint64_t v23 = *(void *)(v21 + 16);
        unint64_t v24 = *(void *)(v21 + 24);
        sub_100013D44(v23, v24);
        swift_release();
        switch(v24 >> 62)
        {
          case 1uLL:
            LODWORD(v25)  = HIDWORD(v23) - v23;
            if (__OFSUB__(HIDWORD(v23), v23)) {
              goto LABEL_30;
            }
            uint64_t v25 = (int)v25;
LABEL_24:
            if (v25 >= 0xFFFF)
            {
              sub_10000F000();
              swift_allocError();
              *(void *)uint64_t v28 = 0;
              *(void *)(v28 + 8)  = 0;
              *(unsigned char *)(v28 + 16)  = 2;
              swift_willThrow();
            }
            else
            {
LABEL_25:
              uint64_t v41 = v34;
              sub_100039448((uint64_t)v32, v33);
              sub_100010BCC(&qword_10047E2D8);
              sub_10000F9CC(&qword_100482758, &qword_10047E2D8);
              dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
            }
            sub_10000C970(v23, v24);
            sub_1001331AC(v16, v18, v17);
            break;
          case 2uLL:
            uint64_t v27 = *(void *)(v23 + 16);
            uint64_t v26 = *(void *)(v23 + 24);
            BOOL v15 = __OFSUB__(v26, v27);
            uint64_t v25 = v26 - v27;
            if (!v15) {
              goto LABEL_24;
            }
            goto LABEL_31;
          default:
            goto LABEL_25;
        }
      }
    }
    else
    {
      uint64_t v7 = *(void *)(v1 + 24);
      sub_100013D44(v7, *(void *)(v1 + 32));
      unint64_t v8 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for BinaryEncoder();
      uint64_t v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16)  = xmmword_1003B2440;
      *(void *)(v9 + 32)  = v8;
      unint64_t v30 = &type metadata for BinaryEncoder.UnkeyedContainer;
      unint64_t v31 = sub_1001AA560();
      v29[0]  = v9;
      sub_100039448((uint64_t)v29, (uint64_t)&type metadata for BinaryEncoder.UnkeyedContainer);
      swift_beginAccess();
      sub_100038004(v7, v6);
      swift_retain();
      sub_100125FAC(v7, v6);
      swift_endAccess();
      sub_100010754((uint64_t)v29);
      sub_10000C95C(v7, v6);
      swift_beginAccess();
      uint64_t v10 = *(void *)(v9 + 16);
      unint64_t v11 = *(void *)(v9 + 24);
      sub_100013D44(v10, v11);
      swift_release();
      switch(v11 >> 62)
      {
        case 1uLL:
          LODWORD(v12)  = HIDWORD(v10) - v10;
          if (__OFSUB__(HIDWORD(v10), v10))
          {
            __break(1u);
LABEL_29:
            __break(1u);
LABEL_30:
            __break(1u);
LABEL_31:
            __break(1u);
            JUMPOUT(0x1001EE078);
          }
          uint64_t v12 = (int)v12;
LABEL_15:
          if (v12 < 0xFFFF)
          {
LABEL_16:
            uint64_t v41 = v7;
            LOBYTE(v29[0])  = 0;
            v29[1]  = v10;
            v29[2]  = v11;
            sub_100039448((uint64_t)v32, v33);
            sub_100010BCC(&qword_10047E2D8);
            sub_10000F9CC(&qword_100482758, &qword_10047E2D8);
            dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
            sub_10000C970(v10, v11);
            sub_10000C95C(v41, v6);
            goto LABEL_17;
          }
          sub_10000F000();
          swift_allocError();
          *(void *)uint64_t v22 = 0;
          *(void *)(v22 + 8)  = 0;
          *(unsigned char *)(v22 + 16)  = 2;
          swift_willThrow();
          sub_10000C970(v10, v11);
          sub_10000C95C(v7, v6);
          break;
        case 2uLL:
          uint64_t v14 = *(void *)(v10 + 16);
          uint64_t v13 = *(void *)(v10 + 24);
          BOOL v15 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (!v15) {
            goto LABEL_15;
          }
          goto LABEL_29;
        default:
          goto LABEL_16;
      }
    }
  }
  return sub_100010754((uint64_t)v32);
}

BOOL sub_1001EE098(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  v7[0]  = *a1;
  v7[1]  = v2;
  long long v3 = a1[3];
  v7[2]  = a1[2];
  _OWORD v7[3] = v3;
  long long v4 = a2[1];
  v8[0]  = *a2;
  v8[1]  = v4;
  long long v5 = a2[3];
  v8[2]  = a2[2];
  v8[3]  = v5;
  return _s7CoreP2P12NANAttributeO17DatapathExtensionV23__derived_struct_equalsySbAE_AEtFZ_0((unsigned __int8 *)v7, (unsigned __int8 *)v8);
}

void *NANAttribute.Availability.Control.publicAvailabilityChange.unsafeMutableAddressor()
{
  return &static NANAttribute.Availability.Control.publicAvailabilityChange;
}

void *NANAttribute.Availability.Control.dataClusterChange.unsafeMutableAddressor()
{
  return &static NANAttribute.Availability.Control.dataClusterChange;
}

void *NANAttribute.Availability.Control.multicastScheduleChange.unsafeMutableAddressor()
{
  return &static NANAttribute.Availability.Control.multicastScheduleChange;
}

void *NANAttribute.Availability.Control.multicastScheduleChangeChanged.unsafeMutableAddressor()
{
  return &static NANAttribute.Availability.Control.multicastScheduleChangeChanged;
}

uint64_t NANAttribute.Availability.Control.scheduleChangeFlags.getter(__int16 a1)
{
  return a1 & 0x3F0;
}

uint64_t sub_1001EE11C()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001EE17C()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t NANAttribute.Availability.hash(into:)(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v5 = HIWORD(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v5);
  swift_bridgeObjectRetain();
  sub_10009F1A8(a1, a3);

  return swift_bridgeObjectRelease();
}

uint64_t static NANAttribute.Availability.__derived_struct_equals(_:_:)(unsigned int a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a1 == a3 && HIWORD(a1) == HIWORD(a3)) {
    return sub_100097980(a2, a4);
  }
  else {
    return 0;
  }
}

uint64_t sub_1001EE264()
{
  unint64_t v1 = 0x6C6F72746E6F63;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000013;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x65636E6575716573;
  }
}

uint64_t sub_1001EE2C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10022CFE4(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001EE2F0(uint64_t a1)
{
  unint64_t v2 = sub_100218FDC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001EE32C(uint64_t a1)
{
  unint64_t v2 = sub_100218FDC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.Availability.encode(to:)(void *a1, int a2, uint64_t a3)
{
  __int16 v5 = HIWORD(a2);
  uint64_t v7 = sub_100010BCC(&qword_100482760);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_100218FDC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v16 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v3)
  {
    __int16 v14 = v5;
    char v15 = 1;
    sub_100219030();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v12[1]  = a3;
    char v13 = 2;
    sub_100010BCC(&qword_100482778);
    sub_100217A38(&qword_100482780, &qword_100482778, (void (*)(void))sub_100219084);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int NANAttribute.Availability.hashValue.getter(unsigned int a1, uint64_t a2)
{
  Swift::UInt8 v3 = a1;
  unsigned int v4 = HIWORD(a1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  swift_bridgeObjectRetain();
  sub_10009F1A8((uint64_t)v6, a2);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t NANAttribute.Availability.init(from:)(void *a1)
{
  return sub_100210FB0(a1) & 0xFFFF00FFLL;
}

Swift::Int sub_1001EE614()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Swift::UInt8 v2 = *(unsigned char *)v0;
  Swift::UInt16 v3 = *(_WORD *)(v0 + 2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  swift_bridgeObjectRetain();
  sub_10009F1A8((uint64_t)v5, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1001EE694(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  Swift::UInt16 v4 = *(_WORD *)(v1 + 2);
  Hasher._combine(_:)(*(unsigned char *)v1);
  Hasher._combine(_:)(v4);
  swift_bridgeObjectRetain();
  sub_10009F1A8(a1, v3);

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001EE700()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Swift::UInt8 v2 = *(unsigned char *)v0;
  Swift::UInt16 v3 = *(_WORD *)(v0 + 2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  swift_bridgeObjectRetain();
  sub_10009F1A8((uint64_t)v5, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1001EE77C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100210FB0(a1);
  if (!v2)
  {
    *(unsigned char *)a2  = result;
    *(_WORD *)(a2 + 2)  = WORD1(result);
    *(void *)(a2 + 8)  = v5;
  }
  return result;
}

uint64_t sub_1001EE7B4(void *a1)
{
  return NANAttribute.Availability.encode(to:)(a1, *v1 | (*((unsigned __int16 *)v1 + 1) << 16), *((void *)v1 + 1));
}

uint64_t sub_1001EE7DC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2 && *((unsigned __int16 *)a1 + 1) == *((unsigned __int16 *)a2 + 1)) {
    return sub_100097980(*((void *)a1 + 1), *((void *)a2 + 1));
  }
  else {
    return 0;
  }
}

void *NANAttribute.DataCluster.Control.selectedDataCluster.unsafeMutableAddressor()
{
  return &static NANAttribute.DataCluster.Control.selectedDataCluster;
}

uint64_t sub_1001EE818()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001EE878()
{
  return RawRepresentable<>.encode(to:)();
}

void __swiftcall NANAttribute.DataCluster.init(clusterID:control:scheduleEntries:)(CoreP2P::NANAttribute::DataCluster *__return_ptr retstr, CoreP2P::WiFiAddress *clusterID, CoreP2P::NANAttribute::DataCluster::Control control, Swift::OpaquePointer scheduleEntries)
{
}

uint64_t sub_1001EE8DC()
{
  sub_100010BCC((uint64_t *)&unk_100486240);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16)  = xmmword_1003B2450;
  if (NANIntervalDuration.timeUnits.getter(0))
  {
    __int16 v1 = sub_1001E1F14(3u, 3uLL, 3);
    uint64_t result = sub_1001265EC((uint64_t)&off_100450748);
    *(unsigned char *)(v0 + 32)  = 0;
    *(_WORD *)(v0 + 40)  = v1;
    *(void *)(v0 + 48)  = result;
    *(void *)(v0 + 56)  = v3;
    static NANAttribute.DataCluster.empty  = 0;
    *(int *)((char *)&static NANAttribute.DataCluster.empty + 3)  = 0;
    qword_1004886C0  = v0;
  }
  else
  {
    __break(1u);
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

int *NANAttribute.DataCluster.empty.unsafeMutableAddressor()
{
  if (qword_10047C260 != -1) {
    swift_once();
  }
  return &static NANAttribute.DataCluster.empty;
}

unint64_t static NANAttribute.DataCluster.empty.getter()
{
  if (qword_10047C260 != -1) {
    swift_once();
  }
  unint64_t v0 = static NANAttribute.DataCluster.empty | ((unint64_t)byte_1004886BC << 32) | ((unint64_t)byte_1004886BD << 40) | ((unint64_t)byte_1004886BE << 48);
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t NANAttribute.DataCluster.hash(into:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = a2 >> 8;
  unint64_t v6 = a2 >> 16;
  unint64_t v7 = a2 >> 24;
  unint64_t v8 = HIDWORD(a2);
  unint64_t v9 = a2 >> 40;
  unint64_t v10 = HIWORD(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  swift_bridgeObjectRetain();
  sub_10009E960(a1, a3);

  return swift_bridgeObjectRelease();
}

uint64_t static NANAttribute.DataCluster.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10020CC14(a1 & 0xFFFFFFFFFFFFFFLL, a2, a3 & 0xFFFFFFFFFFFFFFLL, a4);
}

uint64_t sub_1001EEB38()
{
  uint64_t v1 = 0x6C6F72746E6F63;
  if (*v0 != 1) {
    uint64_t v1 = 0x656C756465686373;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x4972657473756C63;
  }
}

uint64_t sub_1001EEBA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10022D144(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001EEBCC(uint64_t a1)
{
  unint64_t v2 = sub_1002190D8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001EEC08(uint64_t a1)
{
  unint64_t v2 = sub_1002190D8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.DataCluster.encode(to:)(void *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = a2 >> 8;
  unint64_t v6 = a2 >> 16;
  uint64_t v14 = a3;
  unint64_t v15 = a2 >> 24;
  unint64_t v16 = HIDWORD(a2);
  unint64_t v17 = a2 >> 40;
  uint64_t v7 = sub_100010BCC(&qword_100482790);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  unint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_1002190D8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v19)  = a2;
  BYTE1(v19)  = v5;
  BYTE2(v19)  = v6;
  BYTE3(v19)  = v15;
  BYTE4(v19)  = v16;
  BYTE5(v19)  = v17;
  char v20 = 0;
  sub_10003F27C();
  uint64_t v11 = v18;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v11)
  {
    uint64_t v12 = v14;
    LOBYTE(v19)  = BYTE6(a2);
    char v20 = 1;
    sub_10021912C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v19 = v12;
    char v20 = 2;
    sub_100010BCC(&qword_1004827A8);
    sub_100217A38(&qword_1004827B0, &qword_1004827A8, (void (*)(void))sub_100219180);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int NANAttribute.DataCluster.hashValue.getter(unint64_t a1, uint64_t a2)
{
  Swift::UInt8 v3 = a1;
  unint64_t v4 = a1 >> 8;
  unint64_t v5 = a1 >> 16;
  unint64_t v6 = a1 >> 24;
  unint64_t v7 = HIDWORD(a1);
  unint64_t v8 = a1 >> 40;
  unint64_t v9 = HIWORD(a1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  swift_bridgeObjectRetain();
  sub_10009E960((uint64_t)v11, a2);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t NANAttribute.DataCluster.init(from:)(void *a1)
{
  return sub_100210D3C(a1) & 0xFFFFFFFFFFFFFFLL;
}

Swift::Int sub_1001EEFC8()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Swift::UInt8 v2 = *(unsigned char *)v0;
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 1);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 2);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 3);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 5);
  Swift::UInt8 v8 = *(unsigned char *)(v0 + 6);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  swift_bridgeObjectRetain();
  sub_10009E960((uint64_t)v10, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1001EF0B0(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  Swift::UInt8 v4 = *(unsigned char *)(v1 + 1);
  Swift::UInt8 v5 = *(unsigned char *)(v1 + 2);
  Swift::UInt8 v6 = *(unsigned char *)(v1 + 3);
  Swift::UInt8 v7 = *(unsigned char *)(v1 + 4);
  Swift::UInt8 v8 = *(unsigned char *)(v1 + 5);
  Swift::UInt8 v9 = *(unsigned char *)(v1 + 6);
  Hasher._combine(_:)(*(unsigned char *)v1);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  swift_bridgeObjectRetain();
  sub_10009E960(a1, v3);

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001EF170()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Swift::UInt8 v2 = *(unsigned char *)v0;
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 1);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 2);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 3);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 5);
  Swift::UInt8 v8 = *(unsigned char *)(v0 + 6);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  swift_bridgeObjectRetain();
  sub_10009E960((uint64_t)v10, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1001EF254@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100210D3C(a1);
  if (!v2)
  {
    *(_WORD *)a2  = result;
    *(unsigned char *)(a2 + 2)  = BYTE2(result);
    *(unsigned char *)(a2 + 3)  = BYTE3(result);
    *(unsigned char *)(a2 + 4)  = BYTE4(result);
    *(unsigned char *)(a2 + 5)  = BYTE5(result);
    *(unsigned char *)(a2 + 6)  = BYTE6(result);
    *(void *)(a2 + 8)  = v5;
  }
  return result;
}

uint64_t sub_1001EF2B4(void *a1)
{
  return NANAttribute.DataCluster.encode(to:)(a1, *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v1 + 5) << 40) | ((unint64_t)*((unsigned __int8 *)v1 + 6) << 48), *((void *)v1 + 1));
}

uint64_t sub_1001EF2EC(unsigned int *a1, unsigned int *a2)
{
  return sub_10020CC14(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 5) << 40) | ((unint64_t)*((unsigned __int8 *)a1 + 6) << 48), *((void *)a1 + 1), *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 40) | ((unint64_t)*((unsigned __int8 *)a2 + 6) << 48), *((void *)a2 + 1));
}

void *NANAttribute.DeviceLink.Control.peerID.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceLink.Control.peerID;
}

void *NANAttribute.DeviceLink.Control.immutableSchedule.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceLink.Control.immutableSchedule;
}

void *NANAttribute.DeviceLink.Control.dataCluster.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceLink.Control.dataCluster;
}

void *NANAttribute.DeviceLink.Control.qos.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceLink.Control.qos;
}

void *NANAttribute.DeviceLink.Control.maximumIdlePeriod.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceLink.Control.maximumIdlePeriod;
}

void *NANAttribute.DeviceLink.Control.linkType.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceLink.Control.linkType;
}

uint64_t NANAttribute.DeviceLink.Control.setupReason.getter(char a1)
{
  char v1 = sub_10008CAA8(6uLL, 2, a1);
  if (v1 == 1) {
    unsigned int v2 = 1;
  }
  else {
    unsigned int v2 = 2;
  }
  if (v1) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t sub_1001EF3E0()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001EF440()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1001EF490()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001EF4F0()
{
  return RawRepresentable<>.encode(to:)();
}

CoreP2P::NANAttribute::DeviceLink::Status_optional __swiftcall NANAttribute.DeviceLink.Status.init(rawValue:)(CoreP2P::NANAttribute::DeviceLink::Status_optional rawValue)
{
  if (rawValue.value >= CoreP2P_NANAttribute_DeviceLink_Status_unknownDefault) {
    return (CoreP2P::NANAttribute::DeviceLink::Status_optional)3;
  }
  return rawValue;
}

unsigned __int8 *sub_1001EF554@<X0>(unsigned __int8 *result@<X0>, unsigned char *a2@<X8>)
{
  unsigned int v2 = *result;
  if (v2 >= 3) {
    LOBYTE(v2)  = 3;
  }
  *a2  = v2;
  return result;
}

uint64_t sub_1001EF56C()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001EF5CC()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t NANAttribute.DeviceLink.type.getter(__int16 a1)
{
  unsigned int v1 = sub_10008CAA8(0, 4, SHIBYTE(a1));
  if (v1 >= 5) {
    return 5;
  }
  else {
    return v1;
  }
}

unint64_t NANAttribute.DeviceLink.status.getter(__int16 a1)
{
  unint64_t result = sub_10008CAA8(4uLL, 4, SHIBYTE(a1));
  if (result >= 3u) {
    return 3;
  }
  return result;
}

unint64_t NANAttribute.RangingSetup.control.getter(unint64_t a1)
{
  return a1 >> 24;
}

uint64_t NANAttribute.RangingSetup.control.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 3)  = result;
  return result;
}

unint64_t NANAttribute.DeviceLink.peerID.getter(unint64_t a1)
{
  return BYTE4(a1) | (((a1 >> 40) & 1) << 8);
}

uint64_t NANAttribute.DeviceLink.peerID.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 4)  = result;
  *(unsigned char *)(v1 + 5)  = BYTE1(result) & 1;
  return result;
}

uint64_t NANAttribute.DeviceLink.maximumIdlePeriod.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t NANAttribute.DeviceLink.maximumIdlePeriod.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 8)  = result;
  *(unsigned char *)(v2 + 16)  = a2 & 1;
  return result;
}

uint64_t NANAttribute.DeviceLink.hash(into:)(uint64_t a1, unint64_t a2, Swift::UInt64 a3, char a4, uint64_t a5)
{
  unint64_t v10 = a2 >> 8;
  unint64_t v11 = a2 >> 16;
  unint64_t v12 = a2 >> 24;
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  if ((a2 & 0x10000000000) != 0)
  {
    LOBYTE(v13)  = 0;
  }
  else
  {
    unint64_t v13 = HIDWORD(a2);
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v13);
  if (a4)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a3);
  }
  swift_bridgeObjectRetain();
  sub_10009E960(a1, a5);

  return swift_bridgeObjectRelease();
}

uint64_t static NANAttribute.DeviceLink.__derived_struct_equals(_:_:)(unint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  return sub_10020BF88(a1 & 0xFFFFFFFFFFLL | (((a1 >> 40) & 1) << 40), a2, a3 & 1, a4, a5 & 0xFFFFFFFFFFLL | (((a5 >> 40) & 1) << 40), a6, a7 & 1, a8);
}

Swift::Int NANAttribute.DeviceLink.hashValue.getter(unint64_t a1, Swift::UInt64 a2, char a3, uint64_t a4)
{
  unint64_t v8 = a1 >> 8;
  unint64_t v9 = a1 >> 16;
  unint64_t v10 = a1 >> 24;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  if ((a1 & 0x10000000000) != 0)
  {
    LOBYTE(v11)  = 0;
  }
  else
  {
    unint64_t v11 = HIDWORD(a1);
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v11);
  if (a3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a2);
  }
  swift_bridgeObjectRetain();
  sub_10009E960((uint64_t)v13, a4);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int sub_1001EF94C()
{
  return NANAttribute.DeviceLink.hashValue.getter(*v0 | ((unint64_t)*((unsigned __int8 *)v0 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v0 + 5) << 40), *((void *)v0 + 1), *((unsigned char *)v0 + 16), *((void *)v0 + 3));
}

uint64_t sub_1001EF984(uint64_t a1)
{
  return NANAttribute.DeviceLink.hash(into:)(a1, *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v1 + 5) << 40), *((void *)v1 + 1), *((unsigned char *)v1 + 16), *((void *)v1 + 3));
}

Swift::Int sub_1001EF9BC()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 4);
  char v2 = *(unsigned char *)(v0 + 5);
  Swift::UInt64 v3 = *(void *)(v0 + 8);
  int v4 = *(unsigned __int8 *)(v0 + 16);
  uint64_t v5 = *(void *)(v0 + 24);
  Swift::UInt8 v6 = *(unsigned char *)v0;
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 1);
  Swift::UInt8 v8 = *(unsigned char *)(v0 + 2);
  Swift::UInt8 v9 = *(unsigned char *)(v0 + 3);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  if (v2) {
    Swift::UInt8 v1 = 0;
  }
  else {
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v1);
  if (v4)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }
  swift_bridgeObjectRetain();
  sub_10009E960((uint64_t)v11, v5);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_1001EFACC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_100219658(a1);
  if (!v2)
  {
    *(_WORD *)a2  = result;
    *(unsigned char *)(a2 + 2)  = BYTE2(result);
    *(unsigned char *)(a2 + 3)  = BYTE3(result);
    *(unsigned char *)(a2 + 4)  = BYTE4(result);
    *(unsigned char *)(a2 + 5)  = BYTE5(result) & 1;
    *(void *)(a2 + 8)  = v5;
    *(unsigned char *)(a2 + 16)  = v6 & 1;
    *(void *)(a2 + 24)  = v7;
  }
  return result;
}

unint64_t NANAttribute.DeviceLink.init(from:)(void *a1)
{
  unint64_t result = sub_100219658(a1);
  if (!v1) {
    return result & 0xFFFFFFFFFFLL | (((result >> 40) & 1) << 40);
  }
  return result;
}

uint64_t sub_1001EFB70(void *a1)
{
  return NANAttribute.DeviceLink.encode(to:)(a1, *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v1 + 5) << 40), *((void *)v1 + 1), *((unsigned char *)v1 + 16), *((void *)v1 + 3));
}

uint64_t NANAttribute.DeviceLink.encode(to:)(void *a1, uint64_t a2, unint64_t a3, char a4, uint64_t a5)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  sub_100039448((uint64_t)v11, v12);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  if (v5) {
    return sub_100010754((uint64_t)v11);
  }
  LOBYTE(v13)  = BYTE1(a2);
  sub_100039448((uint64_t)v11, v12);
  sub_100010BCC(&qword_1004827C0);
  sub_10000F9CC(&qword_1004827C8, &qword_1004827C0);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  LOBYTE(v13)  = BYTE2(a2);
  sub_100039448((uint64_t)v11, v12);
  sub_1002183A4();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  LOBYTE(v13)  = BYTE3(a2);
  sub_100039448((uint64_t)v11, v12);
  sub_1002199C0();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if ((a2 & 0x10000000000) == 0 && (a2 & 0x1000000) != 0)
  {
    sub_100039448((uint64_t)v11, v12);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  }
  if ((a4 & 1) != 0 || (a2 & 0x10000000) == 0)
  {
LABEL_13:
    if (*(void *)(a5 + 16))
    {
      if ((a2 & 0x2000000) != 0)
      {
        uint64_t v13 = a5;
        sub_100039448((uint64_t)v11, v12);
        sub_100010BCC(&qword_1004827A8);
        sub_100217A38(&qword_1004827B0, &qword_1004827A8, (void (*)(void))sub_100219180);
        dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      }
    }
    return sub_100010754((uint64_t)v11);
  }
  if (!(a3 >> 26))
  {
    sub_100039448((uint64_t)v11, v12);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    goto LABEL_13;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001EFEF4(unsigned int *a1, unsigned int *a2)
{
  return sub_10020BF88(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 5) << 40), *((void *)a1 + 1), *((unsigned char *)a1 + 16), *((void *)a1 + 3), *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 40), *((void *)a2 + 1), *((unsigned char *)a2 + 16), *((void *)a2 + 3));
}

void NANAttribute.DeviceLinkQoS.hash(into:)(int a1, unsigned int a2)
{
  unsigned int v2 = HIWORD(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v2);
}

BOOL static NANAttribute.DeviceLinkQoS.__derived_struct_equals(_:_:)(unsigned int a1, unsigned int a2)
{
  return a1 == a2 && HIWORD(a1) == HIWORD(a2);
}

uint64_t sub_1001EFFAC()
{
  if (*v0) {
    return 0x4C6D756D6978616DLL;
  }
  else {
    return 0xD000000000000010;
  }
}

uint64_t sub_1001EFFF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10022D2CC(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001F0020(uint64_t a1)
{
  unint64_t v2 = sub_100219A14();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001F005C(uint64_t a1)
{
  unint64_t v2 = sub_100219A14();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.DeviceLinkQoS.encode(to:)(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_1004827D8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  char v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_100219A14();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15]  = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14]  = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int NANAttribute.DeviceLinkQoS.hashValue.getter(unsigned int a1)
{
  Swift::UInt8 v1 = a1;
  unsigned int v2 = HIWORD(a1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t NANAttribute.DeviceLinkQoS.init(from:)(void *a1)
{
  return sub_100211750(a1) & 0xFFFF00FFLL;
}

Swift::Int sub_1001F0274()
{
  Swift::UInt8 v1 = *(unsigned char *)v0;
  Swift::UInt16 v2 = *(_WORD *)(v0 + 2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_1001F02D4()
{
  Swift::UInt16 v1 = *(_WORD *)(v0 + 2);
  Hasher._combine(_:)(*(unsigned char *)v0);
  Hasher._combine(_:)(v1);
}

Swift::Int sub_1001F0314()
{
  Swift::UInt8 v1 = *(unsigned char *)v0;
  Swift::UInt16 v2 = *(_WORD *)(v0 + 2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_1001F0370@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100211750(a1);
  if (!v2)
  {
    *(unsigned char *)a2  = result;
    *(_WORD *)(a2 + 2)  = WORD1(result);
  }
  return result;
}

uint64_t sub_1001F03A4(void *a1)
{
  return NANAttribute.DeviceLinkQoS.encode(to:)(a1);
}

BOOL sub_1001F03C8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && *((unsigned __int16 *)a1 + 1) == *((unsigned __int16 *)a2 + 1);
}

void *NANAttribute.UnalignedSchedule.UnalignedWindowOverwrite.overwriteAll.unsafeMutableAddressor()
{
  return &static NANAttribute.UnalignedSchedule.UnalignedWindowOverwrite.overwriteAll;
}

unint64_t NANAttribute.UnalignedSchedule.UnalignedWindowOverwrite.mapID.getter(char a1)
{
  if (a1) {
    return 256;
  }
  else {
    return sub_10008CAA8(1uLL, 4, a1) & 0xF;
  }
}

uint64_t sub_1001F0470()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001F04D0()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t NANAttribute.UnalignedSchedule.UnalignedWindowControl.entryType.getter(uint64_t a1)
{
  return sub_1001F053C(a1, (uint64_t (*)(void, uint64_t, uint64_t))sub_10008CAA8);
}

uint64_t sub_1001F053C(uint64_t a1, uint64_t (*a2)(void, uint64_t, uint64_t))
{
  uint64_t result = a2(0, 2, a1);
  if (result > 3u)
  {
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v3 = xmmword_1003B00B0;
    *(unsigned char *)(v3 + 16)  = 2;
    swift_willThrow();
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

void *NANAttribute.UnalignedSchedule.UnalignedWindowControl.availableOnEntry.unsafeMutableAddressor()
{
  return &static NANAttribute.UnalignedSchedule.UnalignedWindowControl.availableOnEntry;
}

uint64_t NANAttribute.UnalignedSchedule.UnalignedWindowControl.rxNSS.getter(uint64_t a1)
{
  return sub_1001F0628(a1, 3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10008CAC0);
}

uint64_t sub_1001F0628(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  return a3(a2, 4, a1);
}

uint64_t sub_1001F0698()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001F06F8()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t NANAttribute.UnalignedSchedule.unalignedWindowOverwrite.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return a3 >> 8;
}

uint64_t NANAttribute.UnalignedSchedule.unalignedWindowControl.getter(uint64_t a1, uint64_t a2, int a3)
{
  return BYTE2(a3) | ((HIBYTE(a3) & 1) << 8);
}

uint64_t NANAttribute.UnalignedSchedule.unalignedWindowControl.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 18)  = result;
  *(unsigned char *)(v1 + 19)  = BYTE1(result) & 1;
  return result;
}

unint64_t NANAttribute.UnalignedSchedule.entry.getter(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  return __PAIR64__(a4, HIDWORD(a3));
}

uint64_t NANAttribute.UnalignedSchedule.entry.setter(uint64_t result, __int16 a2)
{
  *(void *)(v2 + 20)  = result;
  *(_WORD *)(v2 + 28)  = a2;
  return result;
}

void NANAttribute.UnalignedSchedule.hash(into:)(int a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  Swift::UInt32 v6 = a3;
  int v15 = HIDWORD(a4);
  int v16 = a5;
  unint64_t v7 = a2 >> 8;
  unint64_t v8 = HIDWORD(a2);
  unint64_t v9 = HIDWORD(a3);
  unint64_t v10 = a4 >> 8;
  char v11 = BYTE3(a4);
  unsigned int v12 = WORD2(a5);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(a4);
  Hasher._combine(_:)(v10);
  if (v11)
  {
    LOBYTE(v13)  = 0;
  }
  else
  {
    unint64_t v13 = a4 >> 16;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v13);
  if (v12 >> 8 >= 0xFF)
  {
LABEL_9:
    Swift::UInt8 v14 = 0;
    goto LABEL_10;
  }
  Hasher._combine(_:)(1u);
  if ((v12 & 0x100) != 0)
  {
    Hasher._combine(_:)(v15);
    Hasher._combine(_:)(HIWORD(v15));
    Hasher._combine(_:)(v16);
    if ((v12 & 1) == 0)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(HIWORD(v16));
      return;
    }
    goto LABEL_9;
  }
  Swift::UInt8 v14 = v15;
LABEL_10:
  Hasher._combine(_:)(v14);
}

uint64_t static NANAttribute.UnalignedSchedule.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_DWORD *)&var10[4]  = HIDWORD(a7);
  *(void *)&var10[8]  = a8;
  uint64_t v8 = *(void *)&var10[4];
  *(_WORD *)var10  = a3;
  var10[2]  = BYTE2(a3);
  var10[3]  = BYTE3(a3);
  *(void *)&var10[4]  = __PAIR64__(a4, HIDWORD(a3));
  *(_WORD *)&var10[12]  = WORD2(a4);
  uint64_t v9 = *(void *)var10;
  uint64_t v10 = *(void *)&var10[8];
  *(_WORD *)var10  = a7;
  var10[2]  = BYTE2(a7);
  var10[3]  = BYTE3(a7);
  *(void *)&var10[4]  = v8;
  *(_WORD *)&var10[12]  = WORD2(a8);
  return sub_10020BFDC(a1 & 0xFFFFFFFF0000FFFFLL, a2, v9, v10, a5 & 0xFFFFFFFF0000FFFFLL, a6, *(uint64_t *)var10, *(uint64_t *)&var10[8]);
}

Swift::Int NANAttribute.UnalignedSchedule.hashValue.getter(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  char v4 = a3;
  *(void *)&long long v13 = a3;
  *((void *)&v13 + 1)  = a4;
  unint64_t v7 = a3 >> 8;
  unint64_t v8 = a3 >> 16;
  char v9 = BYTE3(a3);
  unint64_t v10 = HIDWORD(a4);
  Hasher.init(_seed:)();
  LOBYTE(v12)  = v4;
  BYTE1(v12)  = v7;
  BYTE2(v12)  = v8;
  BYTE3(v12)  = v9;
  *(void *)((char *)&v12 + 4)  = *(void *)((char *)&v13 + 4);
  WORD6(v12)  = v10;
  NANAttribute.UnalignedSchedule.hash(into:)((int)&v13, a1 & 0xFFFFFFFF0000FFFFLL, a2, v12, *((uint64_t *)&v12 + 1));
  return Hasher._finalize()();
}

Swift::Int sub_1001F09D8()
{
  unint64_t v1 = *((void *)v0 + 1);
  unsigned __int16 v2 = v0[8];
  char v3 = *((unsigned char *)v0 + 18);
  char v4 = *((unsigned char *)v0 + 19);
  uint64_t v5 = *(void *)(v0 + 10);
  unsigned __int16 v6 = v0[14];
  uint64_t v7 = *v0;
  uint64_t v8 = *((unsigned int *)v0 + 1);
  Hasher.init(_seed:)();
  LOWORD(v10)  = v2;
  BYTE2(v10)  = v3;
  BYTE3(v10)  = v4;
  *(void *)((char *)&v10 + 4)  = v5;
  WORD6(v10)  = v6;
  NANAttribute.UnalignedSchedule.hash(into:)((int)&v11, v7 | (v8 << 32), v1, v10, *((uint64_t *)&v10 + 1));
  return Hasher._finalize()();
}

void sub_1001F0A70(int a1)
{
  BYTE2(v2)  = *((unsigned char *)v1 + 18);
  BYTE3(v2)  = *((unsigned char *)v1 + 19);
  *(void *)((char *)&v2 + 4)  = *(void *)(v1 + 10);
  WORD6(v2)  = v1[14];
  NANAttribute.UnalignedSchedule.hash(into:)(a1, *v1 | ((unint64_t)*((unsigned int *)v1 + 1) << 32), *((void *)v1 + 1), v2, *((uint64_t *)&v2 + 1));
}

Swift::Int sub_1001F0AB0()
{
  unint64_t v1 = *((void *)v0 + 1);
  unsigned __int16 v2 = v0[8];
  char v3 = *((unsigned char *)v0 + 18);
  char v4 = *((unsigned char *)v0 + 19);
  uint64_t v5 = *(void *)(v0 + 10);
  unsigned __int16 v6 = v0[14];
  uint64_t v7 = *v0;
  uint64_t v8 = *((unsigned int *)v0 + 1);
  Hasher.init(_seed:)();
  LOWORD(v10)  = v2;
  BYTE2(v10)  = v3;
  BYTE3(v10)  = v4;
  *(void *)((char *)&v10 + 4)  = v5;
  WORD6(v10)  = v6;
  NANAttribute.UnalignedSchedule.hash(into:)((int)&v11, v7 | (v8 << 32), v1, v10, *((uint64_t *)&v10 + 1));
  return Hasher._finalize()();
}

uint64_t sub_1001F0B44@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100216248(a1);
  if (!v2)
  {
    *(_WORD *)a2  = result;
    *(_DWORD *)(a2 + 4)  = HIDWORD(result);
    *(void *)(a2 + 8)  = v5;
    *(_WORD *)(a2 + 16)  = v6;
    *(unsigned char *)(a2 + 18)  = BYTE2(v6);
    *(unsigned char *)(a2 + 19)  = BYTE3(v6);
    *(void *)(a2 + 20)  = __PAIR64__(v7, HIDWORD(v6));
    *(_WORD *)(a2 + 28)  = WORD2(v7);
  }
  return result;
}

uint64_t NANAttribute.UnalignedSchedule.init(from:)(void *a1)
{
  uint64_t result = sub_100216248(a1);
  if (!v1) {
    return result & 0xFFFFFFFF0000FFFFLL;
  }
  return result;
}

uint64_t sub_1001F0C20(void *a1)
{
  LOWORD(v3)  = v1[8];
  BYTE2(v3)  = *((unsigned char *)v1 + 18);
  BYTE3(v3)  = *((unsigned char *)v1 + 19);
  *(void *)((char *)&v3 + 4)  = *(void *)(v1 + 10);
  WORD6(v3)  = v1[14];
  return NANAttribute.UnalignedSchedule.encode(to:)(a1, *v1 | ((unint64_t)*((unsigned int *)v1 + 1) << 32), *((void *)v1 + 1), v3, *((uint64_t *)&v3 + 1));
}

uint64_t NANAttribute.UnalignedSchedule.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int16 v6 = WORD2(a5);
  char v7 = BYTE2(a4);
  *(void *)&long long v15 = a4;
  *((void *)&v15 + 1)  = a5;
  char v8 = BYTE3(a4);
  uint64_t v17 = *(void *)((char *)&v15 + 4);
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  sub_100039448((uint64_t)&v15, v16);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  if (v5) {
    return sub_100010754((uint64_t)&v15);
  }
  sub_100039448((uint64_t)&v15, v16);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  sub_100039448((uint64_t)&v15, v16);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  sub_100039448((uint64_t)&v15, v16);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  sub_100039448((uint64_t)&v15, v16);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  sub_100039448((uint64_t)&v15, v16);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  sub_100039448((uint64_t)&v15, v16);
  sub_100219A68();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  char v9 = HIBYTE(v6) > 0xFEu ? 1 : v8;
  if (v9) {
    return sub_100010754((uint64_t)&v15);
  }
  if ((v6 & 0x100) != 0)
  {
    int v11 = sub_10008CAA8(0, 2, v7);
    if ((v11 - 2) >= 2 && v11)
    {
      if (v11 != 1) {
        goto LABEL_20;
      }
    }
    else
    {
      unsigned int v12 = sub_10008CAA8(0, 2, v7);
      if (v12 < 2) {
        return sub_100010754((uint64_t)&v15);
      }
      if (v12 != 2)
      {
        if (v12 != 3) {
          goto LABEL_20;
        }
        return sub_100010754((uint64_t)&v15);
      }
    }
    sub_100039448((uint64_t)&v15, v16);
    sub_1000A3068();
    goto LABEL_18;
  }
  unsigned __int8 v10 = sub_10008CAA8(0, 2, v7);
  if (v10 - 1 < 3) {
    return sub_100010754((uint64_t)&v15);
  }
  if (!v10)
  {
    sub_100039448((uint64_t)&v15, v16);
    sub_100219ABC();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    sub_100039448((uint64_t)&v15, v16);
    sub_1000A30BC();
LABEL_18:
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    return sub_100010754((uint64_t)&v15);
  }
LABEL_20:
  sub_10000F000();
  swift_allocError();
  *(_OWORD *)uint64_t v14 = xmmword_1003B00B0;
  *(unsigned char *)(v14 + 16)  = 2;
  swift_willThrow();
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_1001F1070(unsigned __int16 *a1, unsigned __int16 *a2)
{
  BYTE2(v4)  = *((unsigned char *)a1 + 18);
  BYTE3(v4)  = *((unsigned char *)a1 + 19);
  *(void *)((char *)&v4 + 4)  = *(void *)(a1 + 10);
  WORD6(v4)  = a1[14];
  long long v2 = v4;
  LOWORD(v4)  = a2[8];
  BYTE2(v4)  = *((unsigned char *)a2 + 18);
  BYTE3(v4)  = *((unsigned char *)a2 + 19);
  *(void *)((char *)&v4 + 4)  = *(void *)(a2 + 10);
  WORD6(v4)  = a2[14];
  return sub_10020BFDC(*a1 | ((unint64_t)*((unsigned int *)a1 + 1) << 32), *((void *)a1 + 1), v2, *((uint64_t *)&v2 + 1), *a2 | ((unint64_t)*((unsigned int *)a2 + 1) << 32), *((void *)a2 + 1), v4, *((uint64_t *)&v4 + 1));
}

void *NANAttribute.RangingInformation.LocationInformation.localCoordinates.unsafeMutableAddressor()
{
  return &static NANAttribute.RangingInformation.LocationInformation.localCoordinates;
}

void *NANAttribute.RangingInformation.LocationInformation.geospatial.unsafeMutableAddressor()
{
  return &static NANAttribute.RangingInformation.LocationInformation.geospatial;
}

void *NANAttribute.RangingInformation.LocationInformation.civic.unsafeMutableAddressor()
{
  return &static NANAttribute.RangingInformation.LocationInformation.civic;
}

void *NANAttribute.RangingInformation.LocationInformation.lastMovementIndication.unsafeMutableAddressor()
{
  return &static NANAttribute.RangingInformation.LocationInformation.lastMovementIndication;
}

uint64_t sub_1001F1120()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001F1180()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t NANAttribute.RangingInformation.lastMovementIndication.getter(uint64_t a1)
{
  return (a1 & 0x1FFFFFFFFuLL) >> 16;
}

uint64_t NANAttribute.RangingInformation.lastMovementIndication.setter(uint64_t result)
{
  *((_WORD *)v1 + 1)  = result;
  v1[4]  = BYTE2(result) & 1;
  char v2 = *v1;
  if ((result & 0x10000) != 0)
  {
    if ((*v1 & 8) == 0) {
      return result;
    }
    char v3 = v2 & 0xF7;
  }
  else
  {
    if ((*v1 & 8) != 0) {
      return result;
    }
    char v3 = v2 | 8;
  }
  *uint64_t v1 = v3;
  return result;
}

char **(*NANAttribute.RangingInformation.lastMovementIndication.modify(void *a1))(char **result, char a2)
{
  *a1  = v1;
  return sub_1001F1240;
}

char **sub_1001F1240(char **result, char a2)
{
  if ((a2 & 1) == 0)
  {
    char v2 = *result;
    char v3 = **result;
    if ((*result)[4])
    {
      if ((**result & 8) != 0) {
        *char v2 = v3 & 0xF7;
      }
    }
    else if ((**result & 8) == 0)
    {
      *char v2 = v3 | 8;
    }
  }
  return result;
}

void NANAttribute.RangingInformation.hash(into:)(int a1, uint64_t a2)
{
  if ((a2 & 0x100000000) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(WORD1(a2));
  }
}

uint64_t static NANAttribute.RangingInformation.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
  {
    if ((a1 & 0x100000000) != 0)
    {
      if ((a2 & 0x100000000) != 0) {
        return 1;
      }
    }
    else if (WORD1(a1) == WORD1(a2) && (a2 & 0x100000000) == 0)
    {
      return 1;
    }
  }
  return 0;
}

Swift::Int NANAttribute.RangingInformation.hashValue.getter(uint64_t a1)
{
  if ((a1 & 0x100000000) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(WORD1(a1));
  }
  return Hasher._finalize()();
}

Swift::Int sub_1001F1378()
{
  Swift::UInt16 v1 = *(_WORD *)(v0 + 2);
  int v2 = *(unsigned __int8 *)(v0 + 4);
  Swift::UInt8 v3 = *(unsigned char *)v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  return Hasher._finalize()();
}

void sub_1001F13FC()
{
  Swift::UInt16 v1 = *(_WORD *)(v0 + 2);
  int v2 = *(unsigned __int8 *)(v0 + 4);
  Hasher._combine(_:)(*(unsigned char *)v0);
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
}

Swift::Int sub_1001F145C()
{
  Swift::UInt16 v1 = *(_WORD *)(v0 + 2);
  int v2 = *(unsigned __int8 *)(v0 + 4);
  Swift::UInt8 v3 = *(unsigned char *)v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  return Hasher._finalize()();
}

unint64_t sub_1001F14DC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_100216114(a1);
  if (!v2)
  {
    *(unsigned char *)a2  = result;
    *(_WORD *)(a2 + 2)  = WORD1(result);
    *(unsigned char *)(a2 + 4)  = BYTE4(result) & 1;
  }
  return result;
}

uint64_t NANAttribute.RangingInformation.init(from:)(void *a1)
{
  unint64_t v1 = sub_100216114(a1);
  return v1 & 0xFFFF00FF | ((HIDWORD(v1) & 1) << 32);
}

uint64_t sub_1001F1550(void *a1)
{
  return NANAttribute.RangingInformation.encode(to:)(a1, *v1 | ((unint64_t)*((unsigned __int16 *)v1 + 1) << 16) | ((unint64_t)v1[4] << 32));
}

uint64_t NANAttribute.RangingInformation.encode(to:)(void *a1, uint64_t a2)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  char v7 = a2;
  sub_100039448((uint64_t)v5, v6);
  sub_100219B10();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v2 && (a2 & 0x100000000) == 0 && (a2 & 8) != 0)
  {
    sub_100039448((uint64_t)v5, v6);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  }
  return sub_100010754((uint64_t)v5);
}

uint64_t sub_1001F1678(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2)
  {
    char v2 = a2[4];
    if (a1[4])
    {
      if (a2[4]) {
        return 1;
      }
    }
    else
    {
      if (*((unsigned __int16 *)a1 + 1) != *((unsigned __int16 *)a2 + 1)) {
        char v2 = 1;
      }
      if ((v2 & 1) == 0) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_1001F16BC()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001F171C()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1001F176C()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001F17CC()
{
  return RawRepresentable<>.encode(to:)();
}

void *NANAttribute.RangingSetup.Control.rangingReportRequired.unsafeMutableAddressor()
{
  return &static NANAttribute.RangingSetup.Control.rangingReportRequired;
}

void *NANAttribute.RangingSetup.Control.fineTimingMeasurementParameters.unsafeMutableAddressor()
{
  return &static NANAttribute.RangingSetup.Control.fineTimingMeasurementParameters;
}

void *NANAttribute.RangingSetup.Control.scheduleEntries.unsafeMutableAddressor()
{
  return &static NANAttribute.RangingSetup.Control.scheduleEntries;
}

uint64_t sub_1001F1840()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001F18A0()
{
  return RawRepresentable<>.encode(to:)();
}

void *NANAttribute.RangingSetup.FineTimingMeasurementParameters.init(from:)(void *a1)
{
  return sub_1002194E4(a1);
}

unint64_t NANAttribute.RangingSetup.FineTimingMeasurementParameters.maximumBurstDuration.getter(unsigned int a1)
{
  return sub_1001F1948(a1, 0, 4);
}

unint64_t NANAttribute.RangingSetup.FineTimingMeasurementParameters.minimumDeltaFineTimingMeasurement.getter(unsigned int a1)
{
  return sub_1001F1948(a1, 4uLL, 6);
}

unint64_t NANAttribute.RangingSetup.FineTimingMeasurementParameters.maximumFineTimingMeasurementsPerBurst.getter(unsigned int a1)
{
  return sub_1001F1948(a1, 9uLL, 5);
}

unint64_t NANAttribute.RangingSetup.FineTimingMeasurementParameters.fineTimingMeasurementFormatAndBandwidth.getter(unsigned int a1)
{
  return sub_1001F1948(a1, 0xDuLL, 6);
}

unint64_t sub_1001F1948(unsigned int a1, unint64_t a2, uint64_t a3)
{
  return sub_10008CEA0(a2, a3, a1);
}

void *sub_1001F19B4@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  unint64_t result = sub_1002194E4(a1);
  if (!v2) {
    *a2  = result;
  }
  return result;
}

uint64_t sub_1001F19E0(void *a1)
{
  return OUI.encode(to:)(a1);
}

unint64_t NANAttribute.RangingSetup.type.getter(__int16 a1)
{
  unint64_t result = sub_10008CAA8(0, 4, SHIBYTE(a1));
  if (result >= 3u) {
    return 3;
  }
  return result;
}

uint64_t NANAttribute.RangingSetup.status.getter(__int16 a1)
{
  char v1 = sub_10008CAA8(4uLL, 4, SHIBYTE(a1));
  if (v1 == 1) {
    unsigned int v2 = 1;
  }
  else {
    unsigned int v2 = 2;
  }
  if (v1) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t NANAttribute.RangingSetup.fineTimingMeasurementParameters.getter(uint64_t a1, char a2)
{
  *((void *)&v3 + 1)  = a2 & 1;
  *(void *)&long long v3 = a1;
  return v3 >> 32;
}

uint64_t NANAttribute.RangingSetup.hash(into:)(uint64_t a1, unint64_t a2, char a3, uint64_t a4)
{
  Swift::UInt32 v6 = HIDWORD(a2);
  unint64_t v8 = a2 >> 8;
  unint64_t v9 = a2 >> 16;
  unint64_t v10 = a2 >> 24;
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  if (a3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6);
  }
  swift_bridgeObjectRetain();
  sub_10009E960(a1, a4);

  return swift_bridgeObjectRelease();
}

uint64_t static NANAttribute.RangingSetup.__derived_struct_equals(_:_:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  return sub_10020C100(a1, a2 & 1, a3, a4, a5 & 1, a6);
}

Swift::Int NANAttribute.RangingSetup.hashValue.getter(unint64_t a1, char a2, uint64_t a3)
{
  unint64_t v6 = a1 >> 8;
  unint64_t v7 = a1 >> 16;
  unint64_t v8 = a1 >> 24;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  if (a2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(HIDWORD(a1));
  }
  swift_bridgeObjectRetain();
  sub_10009E960((uint64_t)v10, a3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int sub_1001F1C88()
{
  return NANAttribute.RangingSetup.hashValue.getter(*(void *)v0, *(unsigned char *)(v0 + 8), *(void *)(v0 + 16));
}

uint64_t sub_1001F1CA0(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::UInt32 v4 = *(_DWORD *)(v2 + 4);
  int v5 = *(unsigned __int8 *)(v2 + 8);
  uint64_t v6 = *(void *)(v2 + 16);
  Swift::UInt8 v7 = *(unsigned char *)(v2 + 1);
  Swift::UInt8 v8 = *(unsigned char *)(v2 + 2);
  Swift::UInt8 v9 = *(unsigned char *)(v2 + 3);
  Hasher._combine(_:)(*(unsigned char *)v2);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  if (v5 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
  }
  swift_bridgeObjectRetain();
  sub_10009E960(a1, v6);

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001F1D60()
{
  Swift::UInt32 v1 = *(_DWORD *)(v0 + 4);
  int v2 = *(unsigned __int8 *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  Swift::UInt8 v4 = *(unsigned char *)v0;
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 1);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 2);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 3);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  swift_bridgeObjectRetain();
  sub_10009E960((uint64_t)v9, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_1001F1E40@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_1002191D4(a1);
  if (!v2)
  {
    *(void *)a2  = result;
    *(unsigned char *)(a2 + 8)  = v5 & 1;
    *(void *)(a2 + 16)  = v6;
  }
  return result;
}

unint64_t NANAttribute.RangingSetup.init(from:)(void *a1)
{
  unint64_t result = sub_1002191D4(a1);
  if (v1) {
    return v3 & 1;
  }
  return result;
}

uint64_t sub_1001F1ECC(void *a1)
{
  return NANAttribute.RangingSetup.encode(to:)(a1, *(void *)v1, *(unsigned char *)(v1 + 8), *(void *)(v1 + 16));
}

uint64_t NANAttribute.RangingSetup.encode(to:)(void *a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  sub_100039448((uint64_t)v9, v10);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  if (!v4)
  {
    LOBYTE(v11)  = BYTE1(a2);
    sub_100039448((uint64_t)v9, v10);
    sub_100010BCC(&qword_100482800);
    sub_10000F9CC(&qword_100482808, &qword_100482800);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    LOBYTE(v11)  = BYTE2(a2);
    sub_100039448((uint64_t)v9, v10);
    sub_1002183A4();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    LOBYTE(v11)  = BYTE3(a2);
    sub_100039448((uint64_t)v9, v10);
    sub_100219B64();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    if ((a3 & 1) == 0 && (a2 & 0x2000000) != 0)
    {
      LODWORD(v11)  = HIDWORD(a2);
      sub_100039448((uint64_t)v9, v10);
      sub_100219BB8();
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    }
    if (*(void *)(a4 + 16) && (a2 & 0x4000000) != 0)
    {
      uint64_t v11 = a4;
      sub_100039448((uint64_t)v9, v10);
      sub_100010BCC(&qword_1004827A8);
      sub_100217A38(&qword_1004827B0, &qword_1004827A8, (void (*)(void))sub_100219180);
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    }
  }
  return sub_100010754((uint64_t)v9);
}

uint64_t sub_1001F2194(uint64_t a1, uint64_t a2)
{
  return sub_10020C100(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)(a1 + 16), *(void *)a2, *(unsigned char *)(a2 + 8), *(void *)(a2 + 16));
}

uint64_t NANAttribute.ElementContainer.hash(into:)(uint64_t a1, __int16 a2, uint64_t a3, unint64_t a4)
{
  if ((a2 & 0x100) != 0) {
    Swift::UInt8 v6 = 1;
  }
  else {
    Swift::UInt8 v6 = 2 * a2;
  }
  Hasher._combine(_:)(v6);
  sub_100013D44(a3, a4);
  Data.hash(into:)();

  return sub_10000C970(a3, a4);
}

uint64_t static NANAttribute.ElementContainer.__derived_struct_equals(_:_:)(unsigned __int16 a1, uint64_t a2, unint64_t a3, unsigned __int16 a4, uint64_t a5, unint64_t a6)
{
  if ((a4 & 0x100) != 0)
  {
    if ((a1 & 0x100) != 0) {
      return _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a2, a3, a5, a6);
    }
  }
  else if (!(a1 & 0x100 | (a4 ^ a1) & 0x7F))
  {
    return _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a2, a3, a5, a6);
  }
  return 0;
}

uint64_t sub_1001F226C()
{
  if (*v0) {
    return 1635017060;
  }
  else {
    return 0x73444970616DLL;
  }
}

uint64_t sub_1001F229C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10022D3E0(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001F22C4(uint64_t a1)
{
  unint64_t v2 = sub_100219C0C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001F2300(uint64_t a1)
{
  unint64_t v2 = sub_100219C0C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.ElementContainer.encode(to:)(void *a1, __int16 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = a4;
  uint64_t v8 = sub_100010BCC(&qword_100482820);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_100219C0C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOWORD(v15)  = a2 & 0x1FF;
  char v17 = 0;
  sub_10021814C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v4)
  {
    uint64_t v15 = a3;
    uint64_t v16 = v14;
    char v17 = 1;
    sub_100217EAC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

Swift::Int NANAttribute.ElementContainer.hashValue.getter(__int16 a1, uint64_t a2, unint64_t a3)
{
  Hasher.init(_seed:)();
  if ((a1 & 0x100) != 0) {
    Swift::UInt8 v6 = 1;
  }
  else {
    Swift::UInt8 v6 = 2 * a1;
  }
  Hasher._combine(_:)(v6);
  sub_100013D44(a2, a3);
  Data.hash(into:)();
  sub_10000C970(a2, a3);
  return Hasher._finalize()();
}

uint64_t NANAttribute.ElementContainer.init(from:)(void *a1)
{
  return sub_1002121F4(a1) & 0x1FF;
}

Swift::Int sub_1001F259C()
{
  char v1 = *v0;
  int v2 = v0[1];
  uint64_t v3 = *((void *)v0 + 1);
  unint64_t v4 = *((void *)v0 + 2);
  Hasher.init(_seed:)();
  if (v2) {
    Swift::UInt8 v5 = 1;
  }
  else {
    Swift::UInt8 v5 = 2 * v1;
  }
  Hasher._combine(_:)(v5);
  sub_100013D44(v3, v4);
  Data.hash(into:)();
  sub_10000C970(v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_1001F262C()
{
  uint64_t v1 = *(void *)(v0 + 8);
  unint64_t v2 = *(void *)(v0 + 16);
  if (*(unsigned char *)(v0 + 1)) {
    Swift::UInt8 v3 = 1;
  }
  else {
    Swift::UInt8 v3 = 2 * *(unsigned char *)v0;
  }
  Hasher._combine(_:)(v3);
  sub_100013D44(v1, v2);
  Data.hash(into:)();

  return sub_10000C970(v1, v2);
}

Swift::Int sub_1001F26AC()
{
  char v1 = *v0;
  int v2 = v0[1];
  uint64_t v3 = *((void *)v0 + 1);
  unint64_t v4 = *((void *)v0 + 2);
  Hasher.init(_seed:)();
  if (v2) {
    Swift::UInt8 v5 = 1;
  }
  else {
    Swift::UInt8 v5 = 2 * v1;
  }
  Hasher._combine(_:)(v5);
  sub_100013D44(v3, v4);
  Data.hash(into:)();
  sub_10000C970(v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_1001F2738@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1002121F4(a1);
  if (!v2)
  {
    *(unsigned char *)a2  = result;
    *(unsigned char *)(a2 + 1)  = BYTE1(result) & 1;
    *(void *)(a2 + 8)  = v5;
    *(void *)(a2 + 16)  = v6;
  }
  return result;
}

uint64_t sub_1001F2770(void *a1)
{
  return NANAttribute.ElementContainer.encode(to:)(a1, *v1 | (unsigned __int16)(v1[1] << 8), *((void *)v1 + 1), *((void *)v1 + 2));
}

uint64_t sub_1001F27A0(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a1 + 1);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  if (v4)
  {
    if (!*(unsigned char *)(a2 + 1)) {
      return 0;
    }
  }
  else
  {
    if (((*(unsigned char *)a1 ^ *(unsigned char *)a2) & 0x7F) != 0) {
      char v8 = 1;
    }
    else {
      char v8 = *(unsigned char *)(a2 + 1);
    }
    if (v8) {
      return 0;
    }
  }
  return _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v5, v6, *(void *)(a2 + 8), *(void *)(a2 + 16));
}

uint64_t NANAttribute.ExtendedWLANInfrastructure.role.getter(uint64_t a1, unint64_t a2)
{
  return HIDWORD(a2) & 1;
}

uint64_t NANAttribute.ExtendedWLANInfrastructure.role.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 12)  = result & 1;
  return result;
}

unint64_t NANAttribute.FineTimingMeasurementRangeReport.Entry.maximumRangeErrorExponent.getter(uint64_t a1, unint64_t a2)
{
  return a2 >> 40;
}

uint64_t NANAttribute.ExtendedWLANInfrastructure.operatingChannelInformation.setter(uint64_t result)
{
  *(_WORD *)(v1 + 13)  = result;
  *(unsigned char *)(v1 + 15)  = BYTE2(result);
  return result;
}

void __swiftcall NANAttribute.ExtendedWLANInfrastructure.init(accessPointBSSID:infrastructureMACAddress:role:operatingChannelInformation:beaconInformation:)(CoreP2P::NANAttribute::ExtendedWLANInfrastructure *__return_ptr retstr, CoreP2P::WiFiAddress *accessPointBSSID, CoreP2P::WiFiAddress *infrastructureMACAddress, CoreP2P::NANAttribute::WLANInfrastructure::DeviceRole role, CoreP2P::NonNANOperatingChannelInformation operatingChannelInformation, CoreP2P::NonNANBeaconInformation beaconInformation)
{
}

uint64_t NANAttribute.ExtendedWLANInfrastructure.init(network:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = a4;
  Channel.operatingClass.getter(a4 & 0xFFFFFFFFFFFFLL);
  if ((v4 & 0xFFFFFF00) != 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return result;
}

uint64_t NANAttribute.ExtendedWLANInfrastructure.encode(to:)(void *a1, unint64_t a2, uint64_t a3, int a4)
{
  unint64_t v5 = a2 >> 8;
  unint64_t v6 = a2 >> 16;
  unint64_t v7 = a2 >> 24;
  unint64_t v8 = HIDWORD(a2);
  unint64_t v9 = a2 >> 40;
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  v16[0]  = a2;
  v16[1]  = v5;
  v16[2]  = v6;
  v16[3]  = v7;
  v16[4]  = v8;
  v16[5]  = v9;
  sub_100039448((uint64_t)v14, v15);
  sub_10003F27C();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v13)
  {
    v16[0]  = BYTE6(a2);
    v16[1]  = HIBYTE(a2);
    *(_DWORD *)&v16[2]  = a3;
    sub_100039448((uint64_t)v14, v15);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    v16[0]  = BYTE4(a3) & 1;
    sub_100039448((uint64_t)v14, v15);
    sub_100217D08();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    *(_WORD *)uint64_t v16 = *(_WORD *)((char *)&a3 + 5);
    v16[2]  = HIBYTE(a3);
    sub_100039448((uint64_t)v14, v15);
    sub_100219C60();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    *(_DWORD *)uint64_t v16 = a4;
    sub_100039448((uint64_t)v14, v15);
    sub_100219CB4();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return sub_100010754((uint64_t)v14);
}

void NANAttribute.ExtendedWLANInfrastructure.hash(into:)(int a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  Swift::UInt16 v4 = a4;
  *(void *)uint64_t v13 = a3 >> 8;
  *(void *)uint64_t v14 = a3 >> 16;
  *(void *)uint64_t v15 = a3 >> 24;
  *(void *)uint64_t v16 = a3 >> 40;
  *(void *)char v17 = HIWORD(a3);
  *(void *)uint64_t v18 = HIBYTE(a3);
  unint64_t v6 = a2 >> 8;
  unint64_t v7 = a2 >> 16;
  unint64_t v8 = a2 >> 24;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = a2 >> 40;
  unint64_t v11 = HIWORD(a2);
  unint64_t v12 = HIBYTE(a2);
  *(_DWORD *)uint64_t v19 = HIWORD(a4);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(a3);
  Hasher._combine(_:)(v13[0]);
  Hasher._combine(_:)(v14[0]);
  Hasher._combine(_:)(v15[0]);
  Hasher._combine(_:)(BYTE4(a3) & 1);
  Hasher._combine(_:)(v16[0]);
  Hasher._combine(_:)(v17[0]);
  Hasher._combine(_:)(v18[0]);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v19[0]);
}

uint64_t static NANAttribute.ExtendedWLANInfrastructure.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  return sub_10020C138(a1, a2 & 0xFFFFFF01FFFFFFFFLL, a3, a4, a5 & 0xFFFFFF01FFFFFFFFLL, a6);
}

unint64_t sub_1001F2C70(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000018;
      break;
    case 2:
      unint64_t result = 1701605234;
      break;
    case 3:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 4:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1001F2D0C()
{
  return sub_1001F2C70(*v0);
}

uint64_t sub_1001F2D14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10022D4BC(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001F2D3C(uint64_t a1)
{
  unint64_t v2 = sub_10022F1F4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001F2D78(uint64_t a1)
{
  unint64_t v2 = sub_10022F1F4();

  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int NANAttribute.ExtendedWLANInfrastructure.hashValue.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  Swift::UInt16 v18 = a3;
  Swift::UInt8 v4 = a1;
  *(void *)uint64_t v13 = a2 >> 8;
  *(void *)uint64_t v14 = a2 >> 16;
  *(void *)uint64_t v15 = a2 >> 24;
  *(void *)uint64_t v16 = a2 >> 40;
  *(void *)char v17 = HIWORD(a2);
  *(void *)uint64_t v19 = HIBYTE(a2);
  unint64_t v5 = a1 >> 8;
  unint64_t v6 = a1 >> 16;
  unint64_t v7 = a1 >> 24;
  unint64_t v8 = HIDWORD(a1);
  unint64_t v9 = a1 >> 40;
  unint64_t v10 = HIWORD(a1);
  unint64_t v11 = HIBYTE(a1);
  *(_DWORD *)char v20 = HIWORD(a3);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v13[0]);
  Hasher._combine(_:)(v14[0]);
  Hasher._combine(_:)(v15[0]);
  Hasher._combine(_:)(BYTE4(a2) & 1);
  Hasher._combine(_:)(v16[0]);
  Hasher._combine(_:)(v17[0]);
  Hasher._combine(_:)(v19[0]);
  Hasher._combine(_:)(v18);
  Hasher._combine(_:)(v20[0]);
  return Hasher._finalize()();
}

unint64_t NANAttribute.ExtendedWLANInfrastructure.init(from:)(void *a1)
{
  unint64_t result = sub_100213B94(a1);
  if (v1) {
    return v3 & 0xFFFFFF01FFFFFFFFLL;
  }
  return result;
}

Swift::Int sub_1001F2F68()
{
  uint64_t v1 = &_mh_execute_header;
  if (!*(unsigned char *)(v0 + 12)) {
    uint64_t v1 = 0;
  }
  return NANAttribute.ExtendedWLANInfrastructure.hashValue.getter(*(void *)v0, (unint64_t)v1 | *(unsigned int *)(v0 + 8) | ((unint64_t)*(unsigned __int8 *)(v0 + 13) << 40) | ((unint64_t)*(unsigned __int8 *)(v0 + 14) << 48) | ((unint64_t)*(unsigned __int8 *)(v0 + 15) << 56), *(_DWORD *)(v0 + 16));
}

void sub_1001F2FA4(int a1)
{
  unint64_t v2 = &_mh_execute_header;
  if (!*(unsigned char *)(v1 + 12)) {
    unint64_t v2 = 0;
  }
  NANAttribute.ExtendedWLANInfrastructure.hash(into:)(a1, *(void *)v1, (unint64_t)v2 | *(unsigned int *)(v1 + 8) | ((unint64_t)*(unsigned __int8 *)(v1 + 13) << 40) | ((unint64_t)*(unsigned __int8 *)(v1 + 14) << 48) | ((unint64_t)*(unsigned __int8 *)(v1 + 15) << 56), *(_DWORD *)(v1 + 16));
}

Swift::Int sub_1001F2FE0()
{
  Swift::UInt8 v17 = *(unsigned char *)(v0 + 12);
  Swift::UInt8 v1 = *(unsigned char *)v0;
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 1);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 2);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 3);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 5);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 6);
  Swift::UInt8 v8 = *(unsigned char *)(v0 + 7);
  Swift::UInt8 v9 = *(unsigned char *)(v0 + 8);
  Swift::UInt8 v11 = *(unsigned char *)(v0 + 9);
  Swift::UInt8 v12 = *(unsigned char *)(v0 + 10);
  Swift::UInt8 v13 = *(unsigned char *)(v0 + 11);
  Swift::UInt8 v14 = *(unsigned char *)(v0 + 13);
  Swift::UInt8 v15 = *(unsigned char *)(v0 + 14);
  Swift::UInt8 v16 = *(unsigned char *)(v0 + 15);
  Swift::UInt16 v18 = *(_WORD *)(v0 + 16);
  Swift::UInt16 v19 = *(_WORD *)(v0 + 18);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v17);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  Hasher._combine(_:)(v16);
  Hasher._combine(_:)(v18);
  Hasher._combine(_:)(v19);
  return Hasher._finalize()();
}

uint64_t sub_1001F3168@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100213B94(a1);
  if (!v2)
  {
    *(void *)a2  = result;
    *(_WORD *)(a2 + 8)  = v5;
    *(unsigned char *)(a2 + 10)  = BYTE2(v5);
    *(unsigned char *)(a2 + 11)  = BYTE3(v5);
    *(unsigned char *)(a2 + 12)  = BYTE4(v5) & 1;
    *(unsigned char *)(a2 + 13)  = BYTE5(v5);
    *(unsigned char *)(a2 + 14)  = BYTE6(v5);
    *(unsigned char *)(a2 + 15)  = HIBYTE(v5);
    *(_DWORD *)(a2 + 16)  = v6;
  }
  return result;
}

uint64_t sub_1001F3214(void *a1)
{
  uint64_t v2 = &_mh_execute_header;
  if (!*(unsigned char *)(v1 + 12)) {
    uint64_t v2 = 0;
  }
  return NANAttribute.ExtendedWLANInfrastructure.encode(to:)(a1, *(void *)v1, (unint64_t)v2 | *(unsigned int *)(v1 + 8) | ((unint64_t)*(unsigned __int8 *)(v1 + 13) << 40) | ((unint64_t)*(unsigned __int8 *)(v1 + 14) << 48) | ((unint64_t)*(unsigned __int8 *)(v1 + 15) << 56), *(_DWORD *)(v1 + 16));
}

uint64_t sub_1001F3264(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = &_mh_execute_header;
  if (*(unsigned char *)(a1 + 12)) {
    Swift::UInt8 v3 = &_mh_execute_header;
  }
  else {
    Swift::UInt8 v3 = 0;
  }
  if (!*(unsigned char *)(a2 + 12)) {
    uint64_t v2 = 0;
  }
  return sub_10020C138(*(void *)a1, (unint64_t)v3 | *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 13) << 40) | ((unint64_t)*(unsigned __int8 *)(a1 + 14) << 48) | ((unint64_t)*(unsigned __int8 *)(a1 + 15) << 56), *(_DWORD *)(a1 + 16), *(void *)a2, (unint64_t)v2 | *(unsigned int *)(a2 + 8) | ((unint64_t)*(unsigned __int8 *)(a2 + 13) << 40) | ((unint64_t)*(unsigned __int8 *)(a2 + 14) << 48) | ((unint64_t)*(unsigned __int8 *)(a2 + 15) << 56), *(_DWORD *)(a2 + 16));
}

uint64_t NANAttribute.ExtendedP2POperation.operatingChannelInformation.getter(uint64_t a1, unsigned __int16 a2)
{
  return HIBYTE(a1) | (a2 << 8);
}

uint64_t NANAttribute.ExtendedP2POperation.operatingChannelInformation.setter(uint64_t result)
{
  *(_WORD *)(v1 + 7)  = result;
  *(unsigned char *)(v1 + 9)  = BYTE2(result);
  return result;
}

uint64_t NANAttribute.ExtendedMesh.beaconInformation.getter(uint64_t a1, unsigned int a2)
{
  return HIWORD(a2);
}

uint64_t NANAttribute.ExtendedMesh.beaconInformation.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 10)  = result;
  return result;
}

void NANAttribute.ExtendedP2POperation.hash(into:)(int a1, unint64_t a2, unint64_t a3)
{
  Swift::UInt8 v3 = a3;
  unint64_t v4 = a2 >> 8;
  unint64_t v5 = a2 >> 16;
  unint64_t v6 = a2 >> 24;
  unint64_t v7 = HIDWORD(a2);
  unint64_t v8 = a2 >> 40;
  unint64_t v9 = HIWORD(a2);
  unint64_t v10 = HIBYTE(a2);
  unint64_t v11 = a3 >> 8;
  *(void *)Swift::UInt8 v12 = a3 >> 16;
  *(void *)Swift::UInt8 v13 = HIDWORD(a3);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12[0]);
  Hasher._combine(_:)(v13[0]);
}

BOOL static NANAttribute.ExtendedP2POperation.__derived_struct_equals(_:_:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return sub_10020C9E4(a1, a2 & 0xFFFFFFFFFFFFLL, a3, a4 & 0xFFFFFFFFFFFFLL);
}

unint64_t sub_1001F33FC()
{
  unint64_t result = 1701605234;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x657264644163616DLL;
      break;
    case 2:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 3:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001F3498@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10022D6AC(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001F34C0(uint64_t a1)
{
  unint64_t v2 = sub_100219D08();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001F34FC(uint64_t a1)
{
  unint64_t v2 = sub_100219D08();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.ExtendedP2POperation.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_100010BCC(&qword_100482840);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  unint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_100219D08();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13)  = a2;
  char v16 = 0;
  sub_100217DB0();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v3)
  {
    LOBYTE(v13)  = BYTE1(a2);
    BYTE1(v13)  = BYTE2(a2);
    BYTE2(v13)  = BYTE3(a2);
    HIBYTE(v13)  = BYTE4(a2);
    char v14 = BYTE5(a2);
    char v15 = BYTE6(a2);
    char v16 = 1;
    sub_10003F27C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13)  = HIBYTE(a2);
    *(_WORD *)((char *)&v13 + 1)  = a3;
    char v16 = 2;
    sub_100219C60();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOWORD(v13)  = WORD1(a3);
    HIWORD(v13)  = WORD2(a3);
    char v16 = 3;
    sub_100219CB4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int NANAttribute.ExtendedP2POperation.hashValue.getter(unint64_t a1, unint64_t a2)
{
  Swift::UInt8 v2 = a2;
  Swift::UInt8 v3 = a1;
  unint64_t v4 = a1 >> 8;
  unint64_t v5 = a1 >> 16;
  unint64_t v6 = a1 >> 24;
  unint64_t v7 = HIDWORD(a1);
  unint64_t v8 = a1 >> 40;
  unint64_t v9 = HIWORD(a1);
  unint64_t v10 = HIBYTE(a1);
  *(void *)uint64_t v12 = a2 >> 8;
  *(void *)int v13 = a2 >> 16;
  *(void *)char v14 = HIDWORD(a2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v12[0]);
  Hasher._combine(_:)(v13[0]);
  Hasher._combine(_:)(v14[0]);
  return Hasher._finalize()();
}

uint64_t NANAttribute.ExtendedP2POperation.init(from:)(void *a1)
{
  uint64_t result = sub_1002107F8(a1);
  if (v1) {
    return v3 & 0xFFFFFFFFFFFFLL;
  }
  return result;
}

Swift::Int sub_1001F38D0()
{
  Swift::UInt8 v1 = *(unsigned char *)v0;
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 1);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 2);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 3);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 5);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 6);
  Swift::UInt8 v8 = *(unsigned char *)(v0 + 7);
  Swift::UInt8 v9 = *(unsigned char *)(v0 + 8);
  Swift::UInt8 v11 = *(unsigned char *)(v0 + 9);
  Swift::UInt16 v12 = *(_WORD *)(v0 + 10);
  Swift::UInt16 v13 = *(_WORD *)(v0 + 12);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  return Hasher._finalize()();
}

void sub_1001F39F0()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 1);
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 2);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 3);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 5);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 6);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 7);
  Swift::UInt8 v8 = *(unsigned char *)(v0 + 8);
  Swift::UInt8 v9 = *(unsigned char *)(v0 + 9);
  Swift::UInt16 v10 = *(_WORD *)(v0 + 10);
  Swift::UInt16 v11 = *(_WORD *)(v0 + 12);
  Hasher._combine(_:)(*(unsigned char *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
}

Swift::Int sub_1001F3ACC()
{
  Swift::UInt8 v1 = *(unsigned char *)v0;
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 1);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 2);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 3);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 5);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 6);
  Swift::UInt8 v8 = *(unsigned char *)(v0 + 7);
  Swift::UInt8 v9 = *(unsigned char *)(v0 + 8);
  Swift::UInt8 v11 = *(unsigned char *)(v0 + 9);
  Swift::UInt16 v12 = *(_WORD *)(v0 + 10);
  Swift::UInt16 v13 = *(_WORD *)(v0 + 12);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  return Hasher._finalize()();
}

uint64_t sub_1001F3BE8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1002107F8(a1);
  if (!v2)
  {
    *(void *)a2  = result;
    *(_DWORD *)(a2 + 8)  = v5;
    *(_WORD *)(a2 + 12)  = WORD2(v5);
  }
  return result;
}

uint64_t sub_1001F3C68(void *a1)
{
  return NANAttribute.ExtendedP2POperation.encode(to:)(a1, *(void *)v1, *(unsigned int *)(v1 + 8) | ((unint64_t)*(unsigned __int16 *)(v1 + 12) << 32));
}

BOOL sub_1001F3C90(uint64_t a1, uint64_t a2)
{
  return sub_10020C9E4(*(void *)a1, *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int16 *)(a1 + 12) << 32), *(void *)a2, *(unsigned int *)(a2 + 8) | ((unint64_t)*(unsigned __int16 *)(a2 + 12) << 32));
}

uint64_t NANAttribute.ExtendedIBSS.operatingChannelInformation.getter(uint64_t a1, unint64_t a2)
{
  return HIDWORD(a2) & 0xFFFFFF;
}

uint64_t NANAttribute.ExtendedIBSS.operatingChannelInformation.setter(uint64_t result)
{
  *(_WORD *)(v1 + 12)  = result;
  *(unsigned char *)(v1 + 14)  = BYTE2(result);
  return result;
}

void NANAttribute.ExtendedIBSS.hash(into:)(int a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  Swift::UInt16 v18 = a4;
  Swift::UInt8 v4 = a3;
  unint64_t v5 = a2 >> 8;
  unint64_t v6 = a2 >> 16;
  unint64_t v7 = a2 >> 24;
  unint64_t v8 = HIDWORD(a2);
  unint64_t v9 = a2 >> 40;
  unint64_t v10 = HIWORD(a2);
  unint64_t v11 = HIBYTE(a2);
  unint64_t v12 = a3 >> 8;
  *(void *)Swift::UInt16 v13 = a3 >> 16;
  *(void *)char v14 = a3 >> 24;
  *(void *)char v15 = HIDWORD(a3);
  *(void *)char v16 = a3 >> 40;
  *(void *)Swift::UInt8 v17 = HIWORD(a3);
  *(_DWORD *)Swift::UInt16 v19 = HIWORD(a4);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13[0]);
  Hasher._combine(_:)(v14[0]);
  Hasher._combine(_:)(v15[0]);
  Hasher._combine(_:)(v16[0]);
  Hasher._combine(_:)(v17[0]);
  Hasher._combine(_:)(v18);
  Hasher._combine(_:)(v19[0]);
}

BOOL static NANAttribute.ExtendedIBSS.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  return sub_10020C29C(a1, a2 & 0xFFFFFFFFFFFFFFLL, a3, a4, a5 & 0xFFFFFFFFFFFFFFLL, a6);
}

unint64_t sub_1001F3E08()
{
  unint64_t result = 0x4953534273736269;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x657264644163616DLL;
      break;
    case 2:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 3:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001F3EB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10022D85C(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001F3ED8(uint64_t a1)
{
  unint64_t v2 = sub_100219D5C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001F3F14(uint64_t a1)
{
  unint64_t v2 = sub_100219D5C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.ExtendedIBSS.encode(to:)(void *a1, unint64_t a2, uint64_t a3, int a4)
{
  HIDWORD(v16)  = a4;
  unint64_t v6 = a2 >> 8;
  unint64_t v7 = a2 >> 16;
  uint64_t v17 = a3;
  unint64_t v18 = a2 >> 24;
  unint64_t v19 = HIDWORD(a2);
  unint64_t v20 = a2 >> 40;
  uint64_t v8 = sub_100010BCC(&qword_100482850);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  unint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_100219D5C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v23[0]  = a2;
  v23[1]  = v6;
  v23[2]  = v7;
  v23[3]  = v18;
  v23[4]  = v19;
  v23[5]  = v20;
  char v22 = 0;
  sub_10003F27C();
  uint64_t v12 = v21;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v12)
  {
    int v13 = HIDWORD(v16);
    v23[0]  = BYTE6(a2);
    v23[1]  = HIBYTE(a2);
    int v14 = HIDWORD(v17);
    *(_DWORD *)&v23[2]  = v17;
    char v22 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v23[0]  = v14;
    v23[1]  = BYTE1(v14);
    v23[2]  = BYTE2(v14);
    char v22 = 2;
    sub_100219C60();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(_DWORD *)uint64_t v23 = v13;
    char v22 = 3;
    sub_100219CB4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

Swift::Int NANAttribute.ExtendedIBSS.hashValue.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  Swift::UInt16 v19 = a3;
  Swift::UInt8 v3 = a2;
  Swift::UInt8 v4 = a1;
  unint64_t v5 = a1 >> 8;
  unint64_t v6 = a1 >> 16;
  unint64_t v7 = a1 >> 24;
  unint64_t v8 = HIDWORD(a1);
  unint64_t v9 = a1 >> 40;
  unint64_t v10 = HIWORD(a1);
  unint64_t v11 = HIBYTE(a1);
  *(void *)int v13 = a2 >> 8;
  *(void *)int v14 = a2 >> 16;
  *(void *)char v15 = a2 >> 24;
  *(void *)uint64_t v16 = HIDWORD(a2);
  *(void *)uint64_t v17 = a2 >> 40;
  *(void *)unint64_t v18 = HIWORD(a2);
  *(_DWORD *)unint64_t v20 = HIWORD(a3);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v13[0]);
  Hasher._combine(_:)(v14[0]);
  Hasher._combine(_:)(v15[0]);
  Hasher._combine(_:)(v16[0]);
  Hasher._combine(_:)(v17[0]);
  Hasher._combine(_:)(v18[0]);
  Hasher._combine(_:)(v19);
  Hasher._combine(_:)(v20[0]);
  return Hasher._finalize()();
}

uint64_t NANAttribute.ExtendedIBSS.init(from:)(void *a1)
{
  uint64_t result = sub_1002111F8(a1);
  if (v1) {
    return v3 & 0xFFFFFFFFFFFFFFLL;
  }
  return result;
}

Swift::Int sub_1001F4380()
{
  return NANAttribute.ExtendedIBSS.hashValue.getter(*(void *)v0, *(unsigned int *)(v0 + 8) | ((unint64_t)*(unsigned __int8 *)(v0 + 12) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 13) << 40) | ((unint64_t)*(unsigned __int8 *)(v0 + 14) << 48), *(_DWORD *)(v0 + 16));
}

void sub_1001F43A8()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 1);
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 2);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 3);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 5);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 6);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 7);
  Swift::UInt8 v8 = *(unsigned char *)(v0 + 8);
  Swift::UInt8 v9 = *(unsigned char *)(v0 + 9);
  Swift::UInt8 v10 = *(unsigned char *)(v0 + 10);
  Swift::UInt8 v11 = *(unsigned char *)(v0 + 11);
  Swift::UInt8 v12 = *(unsigned char *)(v0 + 12);
  Swift::UInt8 v13 = *(unsigned char *)(v0 + 13);
  Swift::UInt8 v14 = *(unsigned char *)(v0 + 14);
  Swift::UInt16 v15 = *(_WORD *)(v0 + 16);
  Swift::UInt16 v16 = *(_WORD *)(v0 + 18);
  Hasher._combine(_:)(*(unsigned char *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  Hasher._combine(_:)(v16);
}

Swift::Int sub_1001F44CC()
{
  Swift::UInt8 v1 = *(unsigned char *)v0;
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 1);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 2);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 3);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 5);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 6);
  Swift::UInt8 v8 = *(unsigned char *)(v0 + 7);
  Swift::UInt8 v9 = *(unsigned char *)(v0 + 8);
  Swift::UInt8 v11 = *(unsigned char *)(v0 + 9);
  Swift::UInt8 v12 = *(unsigned char *)(v0 + 10);
  Swift::UInt8 v13 = *(unsigned char *)(v0 + 11);
  Swift::UInt8 v14 = *(unsigned char *)(v0 + 12);
  Swift::UInt8 v15 = *(unsigned char *)(v0 + 13);
  Swift::UInt8 v16 = *(unsigned char *)(v0 + 14);
  Swift::UInt16 v17 = *(_WORD *)(v0 + 16);
  Swift::UInt16 v18 = *(_WORD *)(v0 + 18);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  Hasher._combine(_:)(v16);
  Hasher._combine(_:)(v17);
  Hasher._combine(_:)(v18);
  return Hasher._finalize()();
}

uint64_t sub_1001F4640@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1002111F8(a1);
  if (!v2)
  {
    *(void *)a2  = result;
    *(_WORD *)(a2 + 8)  = v5;
    *(unsigned char *)(a2 + 10)  = BYTE2(v5);
    *(unsigned char *)(a2 + 11)  = BYTE3(v5);
    *(unsigned char *)(a2 + 12)  = BYTE4(v5);
    *(unsigned char *)(a2 + 13)  = BYTE5(v5);
    *(unsigned char *)(a2 + 14)  = BYTE6(v5);
    *(_DWORD *)(a2 + 16)  = v6;
  }
  return result;
}

uint64_t sub_1001F46E4(void *a1)
{
  return NANAttribute.ExtendedIBSS.encode(to:)(a1, *(void *)v1, *(unsigned int *)(v1 + 8) | ((unint64_t)*(unsigned __int8 *)(v1 + 12) << 32) | ((unint64_t)*(unsigned __int8 *)(v1 + 13) << 40) | ((unint64_t)*(unsigned __int8 *)(v1 + 14) << 48), *(_DWORD *)(v1 + 16));
}

BOOL sub_1001F4720(uint64_t a1, uint64_t a2)
{
  return sub_10020C29C(*(void *)a1, *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 13) << 40) | ((unint64_t)*(unsigned __int8 *)(a1 + 14) << 48), *(_DWORD *)(a1 + 16), *(void *)a2, *(unsigned int *)(a2 + 8) | ((unint64_t)*(unsigned __int8 *)(a2 + 12) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 13) << 40) | ((unint64_t)*(unsigned __int8 *)(a2 + 14) << 48), *(_DWORD *)(a2 + 16));
}

uint64_t NANAttribute.ExtendedMesh.operatingChannelInformation.getter(uint64_t a1, unsigned __int8 a2)
{
  return HIWORD(a1) | (a2 << 16);
}

uint64_t NANAttribute.ExtendedMesh.operatingChannelInformation.setter(uint64_t result)
{
  *(_WORD *)(v1 + 6)  = result;
  *(unsigned char *)(v1 + 8)  = BYTE2(result);
  return result;
}

uint64_t NANAttribute.ExtendedMesh.hash(into:)(int a1, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  Swift::UInt8 v7 = a3;
  unint64_t v8 = a2 >> 8;
  unint64_t v9 = a2 >> 16;
  unint64_t v10 = a2 >> 24;
  unint64_t v11 = HIDWORD(a2);
  unint64_t v12 = a2 >> 40;
  unint64_t v13 = HIWORD(a2);
  *(void *)Swift::UInt8 v15 = HIBYTE(a2);
  *(void *)Swift::UInt8 v16 = a3 >> 16;
  *(void *)Swift::UInt16 v17 = HIDWORD(a3);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v15[0]);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v16[0]);
  Hasher._combine(_:)(v17[0]);
  sub_100013D44(a4, a5);
  Data.hash(into:)();

  return sub_10000C970(a4, a5);
}

uint64_t static NANAttribute.ExtendedMesh.__derived_struct_equals(_:_:)(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  return sub_10020C3D4(a1, a2 & 0xFFFFFFFF00FFLL, a3, a4, a5, a6 & 0xFFFFFFFF00FFLL, a7, a8);
}

unint64_t sub_1001F48B4()
{
  unint64_t result = 0x657264644163616DLL;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 2:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0x44496873656DLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001F4954@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10022DA28(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001F497C(uint64_t a1)
{
  unint64_t v2 = sub_100219DB0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001F49B8(uint64_t a1)
{
  unint64_t v2 = sub_100219DB0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.ExtendedMesh.encode(to:)(void *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  unint64_t v7 = a2 >> 8;
  unint64_t v8 = a2 >> 16;
  uint64_t v21 = a3;
  unint64_t v22 = a2 >> 24;
  unint64_t v23 = HIDWORD(a2);
  unint64_t v24 = a2 >> 40;
  uint64_t v9 = sub_100010BCC(&qword_100482860);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  unint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_100219DB0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v26)  = a2;
  BYTE1(v26)  = v7;
  BYTE2(v26)  = v8;
  BYTE3(v26)  = v22;
  BYTE4(v26)  = v23;
  BYTE5(v26)  = v24;
  char v28 = 0;
  sub_10003F27C();
  uint64_t v13 = v25;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v13)
  {
    uint64_t v15 = v19;
    uint64_t v14 = v20;
    LOBYTE(v26)  = BYTE6(a2);
    BYTE1(v26)  = HIBYTE(a2);
    uint64_t v16 = v21;
    BYTE2(v26)  = v21;
    char v28 = 1;
    sub_100219C60();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOWORD(v26)  = WORD1(v16);
    WORD1(v26)  = WORD2(v16);
    char v28 = 2;
    sub_100219CB4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v26 = v15;
    uint64_t v27 = v14;
    char v28 = 3;
    sub_100217EAC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

Swift::Int NANAttribute.ExtendedMesh.hashValue.getter(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  Swift::UInt8 v6 = a2;
  Swift::UInt8 v7 = a1;
  unint64_t v8 = a1 >> 8;
  unint64_t v9 = a1 >> 16;
  unint64_t v10 = a1 >> 24;
  unint64_t v11 = HIDWORD(a1);
  unint64_t v12 = a1 >> 40;
  *(void *)uint64_t v14 = HIWORD(a1);
  *(void *)uint64_t v15 = HIBYTE(a1);
  *(void *)uint64_t v16 = a2 >> 16;
  *(void *)Swift::UInt16 v17 = HIDWORD(a2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v14[0]);
  Hasher._combine(_:)(v15[0]);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v16[0]);
  Hasher._combine(_:)(v17[0]);
  sub_100013D44(a3, a4);
  Data.hash(into:)();
  sub_10000C970(a3, a4);
  return Hasher._finalize()();
}

uint64_t NANAttribute.ExtendedMesh.init(from:)(void *a1)
{
  uint64_t result = sub_1002114A8(a1);
  if (v1) {
    return v3 & 0xFFFFFFFF00FFLL;
  }
  return result;
}

Swift::Int sub_1001F4DD4()
{
  return NANAttribute.ExtendedMesh.hashValue.getter(*(void *)v0, *(unsigned __int8 *)(v0 + 8) | ((unint64_t)*(unsigned __int16 *)(v0 + 10) << 16) | ((unint64_t)*(unsigned __int16 *)(v0 + 12) << 32), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1001F4DF4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 1);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 2);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 3);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 5);
  Swift::UInt8 v8 = *(unsigned char *)(v0 + 6);
  Swift::UInt8 v9 = *(unsigned char *)(v0 + 7);
  Swift::UInt8 v11 = *(unsigned char *)(v0 + 8);
  Swift::UInt16 v12 = *(_WORD *)(v0 + 10);
  Swift::UInt16 v13 = *(_WORD *)(v0 + 12);
  Hasher._combine(_:)(*(unsigned char *)v0);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  sub_100013D44(v1, v2);
  Data.hash(into:)();

  return sub_10000C970(v1, v2);
}

Swift::Int sub_1001F4F00()
{
  uint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  Swift::UInt8 v3 = *(unsigned char *)v0;
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 1);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 2);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 3);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v8 = *(unsigned char *)(v0 + 5);
  Swift::UInt8 v9 = *(unsigned char *)(v0 + 6);
  Swift::UInt8 v11 = *(unsigned char *)(v0 + 7);
  Swift::UInt8 v12 = *(unsigned char *)(v0 + 8);
  Swift::UInt16 v13 = *(_WORD *)(v0 + 10);
  Swift::UInt16 v14 = *(_WORD *)(v0 + 12);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  sub_100013D44(v1, v2);
  Data.hash(into:)();
  sub_10000C970(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1001F5038@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1002114A8(a1);
  if (!v2)
  {
    *(void *)a2  = result;
    *(unsigned char *)(a2 + 8)  = v5;
    *(_WORD *)(a2 + 10)  = v6;
    *(_WORD *)(a2 + 12)  = v7;
    *(void *)(a2 + 16)  = v8;
    *(void *)(a2 + 24)  = v9;
  }
  return result;
}

uint64_t sub_1001F50B4(void *a1)
{
  return NANAttribute.ExtendedMesh.encode(to:)(a1, *(void *)v1, *(unsigned __int8 *)(v1 + 8) | ((unint64_t)*(unsigned __int16 *)(v1 + 10) << 16) | ((unint64_t)*(unsigned __int16 *)(v1 + 12) << 32), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1001F50E8(uint64_t a1, uint64_t a2)
{
  return sub_10020C3D4(*(void *)a1, *(unsigned __int8 *)(a1 + 8) | ((unint64_t)*(unsigned __int16 *)(a1 + 10) << 16) | ((unint64_t)*(unsigned __int16 *)(a1 + 12) << 32), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)a2, *(unsigned __int8 *)(a2 + 8) | ((unint64_t)*(unsigned __int16 *)(a2 + 10) << 16) | ((unint64_t)*(unsigned __int16 *)(a2 + 12) << 32), *(void *)(a2 + 16), *(void *)(a2 + 24));
}

unint64_t NANAttribute.FineTimingMeasurementRangeReport.Entry.rangeEntry2.getter(uint64_t a1, unint64_t a2)
{
  return a2 >> 24;
}

uint64_t NANAttribute.FineTimingMeasurementRangeReport.Entry.rangeEntry2.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 11)  = result;
  return result;
}

uint64_t NANAttribute.FineTimingMeasurementRangeReport.Entry.rangeEntry3.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 12)  = result;
  return result;
}

uint64_t NANAttribute.FineTimingMeasurementRangeReport.Entry.maximumRangeErrorExponent.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 13)  = result;
  return result;
}

void NANAttribute.FineTimingMeasurementRangeReport.Entry.hash(into:)(int a1, unint64_t a2, unint64_t a3)
{
  Swift::UInt8 v3 = a3;
  unint64_t v4 = HIDWORD(a2);
  unint64_t v5 = a2 >> 40;
  unint64_t v6 = HIWORD(a2);
  unint64_t v7 = HIBYTE(a2);
  unint64_t v8 = a3 >> 8;
  unint64_t v9 = a3 >> 16;
  unint64_t v10 = a3 >> 24;
  unint64_t v11 = HIDWORD(a3);
  *(void *)Swift::UInt8 v12 = a3 >> 40;
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12[0]);
}

BOOL static NANAttribute.FineTimingMeasurementRangeReport.Entry.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10020CF60(a1, a2 & 0xFFFFFFFFFFFFLL, a3, a4 & 0xFFFFFFFFFFFFLL);
}

unint64_t sub_1001F5220()
{
  unint64_t result = 0x6D69547472617473;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6469737362;
      break;
    case 2:
      unint64_t result = 0x746E4565676E6172;
      break;
    case 3:
      unint64_t result = 0x746E4565676E6172;
      break;
    case 4:
      unint64_t result = 0x746E4565676E6172;
      break;
    case 5:
      unint64_t result = 0xD000000000000019;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001F530C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10022DBDC(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001F5334(uint64_t a1)
{
  unint64_t v2 = sub_100219E04();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001F5370(uint64_t a1)
{
  unint64_t v2 = sub_100219E04();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.FineTimingMeasurementRangeReport.Entry.encode(to:)(void *a1, uint64_t a2, __int16 a3)
{
  int v5 = HIDWORD(a2);
  uint64_t v7 = sub_100010BCC(&qword_100482870);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  unint64_t v10 = &v12[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_100219E04();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v15 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v3)
  {
    int v13 = v5;
    __int16 v14 = a3;
    v12[24]  = 1;
    sub_10003F27C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v12[15]  = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v12[14]  = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v12[13]  = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    v12[12]  = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int NANAttribute.FineTimingMeasurementRangeReport.Entry.hashValue.getter(unint64_t a1, unint64_t a2)
{
  Swift::UInt8 v2 = a2;
  Swift::UInt32 v3 = a1;
  unint64_t v4 = HIDWORD(a1);
  unint64_t v5 = a1 >> 40;
  unint64_t v6 = HIWORD(a1);
  unint64_t v7 = HIBYTE(a1);
  unint64_t v8 = a2 >> 8;
  unint64_t v9 = a2 >> 16;
  unint64_t v10 = a2 >> 24;
  *(void *)Swift::UInt8 v12 = HIDWORD(a2);
  *(void *)int v13 = a2 >> 40;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v12[0]);
  Hasher._combine(_:)(v13[0]);
  return Hasher._finalize()();
}

uint64_t NANAttribute.FineTimingMeasurementRangeReport.Entry.init(from:)(void *a1)
{
  uint64_t result = sub_1002141F0(a1);
  if (v1) {
    return v3 & 0xFFFFFFFFFFFFLL;
  }
  return result;
}

Swift::Int sub_1001F5728()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 5);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 6);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 7);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 8);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 9);
  Swift::UInt8 v8 = *(unsigned char *)(v0 + 10);
  Swift::UInt8 v9 = *(unsigned char *)(v0 + 11);
  Swift::UInt8 v11 = *(unsigned char *)(v0 + 12);
  Swift::UInt8 v12 = *(unsigned char *)(v0 + 13);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  return Hasher._finalize()();
}

void sub_1001F5834()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 5);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 6);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 7);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 8);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 9);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 10);
  Swift::UInt8 v8 = *(unsigned char *)(v0 + 11);
  Swift::UInt8 v9 = *(unsigned char *)(v0 + 12);
  Swift::UInt8 v10 = *(unsigned char *)(v0 + 13);
  Hasher._combine(_:)(*(_DWORD *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
}

Swift::Int sub_1001F5904()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 5);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 6);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 7);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 8);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 9);
  Swift::UInt8 v8 = *(unsigned char *)(v0 + 10);
  Swift::UInt8 v9 = *(unsigned char *)(v0 + 11);
  Swift::UInt8 v11 = *(unsigned char *)(v0 + 12);
  Swift::UInt8 v12 = *(unsigned char *)(v0 + 13);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  return Hasher._finalize()();
}

uint64_t sub_1001F5A0C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1002141F0(a1);
  if (!v2)
  {
    *(void *)a2  = result;
    *(_WORD *)(a2 + 8)  = v5;
    *(unsigned char *)(a2 + 10)  = BYTE2(v5);
    *(unsigned char *)(a2 + 11)  = BYTE3(v5);
    *(unsigned char *)(a2 + 12)  = BYTE4(v5);
    *(unsigned char *)(a2 + 13)  = BYTE5(v5);
  }
  return result;
}

uint64_t sub_1001F5A84(void *a1)
{
  return NANAttribute.FineTimingMeasurementRangeReport.Entry.encode(to:)(a1, *(void *)v1, *(_DWORD *)(v1 + 8));
}

BOOL sub_1001F5AB4(uint64_t a1, uint64_t a2)
{
  return sub_10020CF60(*(void *)a1, *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 13) << 40), *(void *)a2, *(unsigned int *)(a2 + 8) | ((unint64_t)*(unsigned __int8 *)(a2 + 12) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 13) << 40));
}

uint64_t sub_1001F5AF0()
{
  return 0x73656972746E65;
}

uint64_t sub_1001F5B08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x73656972746E65 && a2 == 0xE700000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3  = v7 & 1;
  return result;
}

uint64_t sub_1001F5BA0(uint64_t a1)
{
  unint64_t v2 = sub_100219E58();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001F5BDC(uint64_t a1)
{
  unint64_t v2 = sub_100219E58();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.FineTimingMeasurementRangeReport.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100010BCC(&qword_100482880);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  char v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_100219E58();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1]  = a2;
  sub_100010BCC(&qword_100482890);
  sub_100217A38(&qword_100482898, &qword_100482890, (void (*)(void))sub_100219EAC);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int NANAttribute.FineTimingMeasurementRangeReport.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  NANAttribute.FineTimingMeasurementRangeReport.hash(into:)((uint64_t)v3, a1);
  return Hasher._finalize()();
}

Swift::Int sub_1001F5DE8()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  NANAttribute.FineTimingMeasurementRangeReport.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_1001F5E30(uint64_t a1)
{
  NANAttribute.FineTimingMeasurementRangeReport.hash(into:)(a1, *v1);
}

Swift::Int sub_1001F5E38()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  NANAttribute.FineTimingMeasurementRangeReport.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t sub_1001F5E7C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v2) {
    return sub_100010754((uint64_t)a1);
  }
  sub_100039448((uint64_t)v8, v9);
  __int16 v5 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
  uint64_t v6 = sub_1001E1368(v5 << 8, (uint64_t)v8);
  sub_100010754((uint64_t)v8);
  uint64_t result = sub_100010754((uint64_t)a1);
  *a2  = v6;
  return result;
}

void *NANAttribute.FineTimingMeasurementRangeReport.init(from:)(void *a1)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  sub_100039448((uint64_t)v5, v6);
  __int16 v2 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
  Swift::UInt8 v3 = sub_1001E1368(v2 << 8, (uint64_t)v5);
  sub_100010754((uint64_t)v5);
  sub_100010754((uint64_t)a1);
  return v3;
}

uint64_t sub_1001F6040(void *a1)
{
  return NANAttribute.FineTimingMeasurementRangeReport.encode(to:)(a1, *v1);
}

uint64_t sub_1001F605C(uint64_t *a1, uint64_t *a2, uint8x8_t a3, uint8x8_t a4)
{
  return _s7CoreP2P12NANAttributeO32FineTimingMeasurementRangeReportV23__derived_struct_equalsySbAE_AEtFZ_0(*a1, *a2, a3, a4);
}

uint64_t NANAttribute.CipherSuiteInformation.Capabilities.replayCounters.getter(uint64_t a1)
{
  return sub_1001F6084(a1, (unsigned __int8 (*)(void, uint64_t, uint64_t))sub_10008CAA8);
}

uint64_t sub_1001F6084(uint64_t a1, unsigned __int8 (*a2)(void, uint64_t, uint64_t))
{
  int v2 = a2(0, 1, a1);
  if (v2 == 1) {
    return 1;
  }
  if (!v2) {
    return 0;
  }
  sub_10000F000();
  swift_allocError();
  *(_OWORD *)uint64_t v4 = xmmword_1003B00B0;
  *(unsigned char *)(v4 + 16)  = 2;
  swift_willThrow();
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

unint64_t NANAttribute.CipherSuiteInformation.Capabilities.groupKeySupport.getter(char a1)
{
  unint64_t result = sub_10008CAA8(1uLL, 2, a1);
  if (result > 3u)
  {
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v2 = xmmword_1003B00B0;
    *(unsigned char *)(v2 + 16)  = 2;
    swift_willThrow();
    unint64_t result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t NANAttribute.CipherSuiteInformation.Capabilities.gtksaReplayCounters.getter(char a1)
{
  int v2 = sub_10008CAA8(1uLL, 2, a1);
  if ((v2 - 1) >= 2)
  {
    uint64_t result = 2;
    if (v2 && v2 != 3)
    {
      sub_10000F000();
      swift_allocError();
      *(_OWORD *)uint64_t v5 = xmmword_1003B00B0;
      *(unsigned char *)(v5 + 16)  = 2;
      swift_willThrow();
      uint64_t result = swift_unexpectedError();
      __break(1u);
    }
  }
  else
  {
    char v3 = sub_10008CAA8(3uLL, 1, a1);
    if (v3 == 1) {
      unsigned int v6 = 1;
    }
    else {
      unsigned int v6 = 2;
    }
    if (v3) {
      return v6;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t NANAttribute.CipherSuiteInformation.Capabilities.broadcastIntegrityProtocol.getter(char a1)
{
  unsigned int v2 = sub_10008CAA8(1uLL, 2, a1);
  uint64_t result = 2;
  if (v2 >= 2)
  {
    if (v2 == 2)
    {
      uint64_t result = sub_10008CAA8(4uLL, 1, a1);
      if ((_BYTE)result)
      {
        if (result == 1) {
          return 1;
        }
        goto LABEL_9;
      }
    }
    else if (v2 != 3)
    {
      sub_10000F000();
      swift_allocError();
      *(_OWORD *)uint64_t v4 = xmmword_1003B00B0;
      *(unsigned char *)(v4 + 16)  = 2;
      swift_willThrow();
      swift_unexpectedError();
      __break(1u);
LABEL_9:
      sub_10000F000();
      swift_allocError();
      *(_OWORD *)uint64_t v5 = xmmword_1003B00B0;
      *(unsigned char *)(v5 + 16)  = 2;
      swift_willThrow();
      uint64_t result = swift_unexpectedError();
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1001F6460()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001F64C0()
{
  return RawRepresentable<>.encode(to:)();
}

void NANAttribute.CipherSuiteInformation.CipherSuite.hash(into:)(uint64_t a1, __int16 a2)
{
  Swift::UInt8 v2 = HIBYTE(a2);
  Hasher._combine(_:)(a2 + 1);
  Hasher._combine(_:)(v2);
}

uint64_t sub_1001F6544()
{
  if (*v0) {
    return 0x496873696C627570;
  }
  else {
    return 0x7553726568706963;
  }
}

uint64_t sub_1001F658C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10022DE58(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001F65B4(uint64_t a1)
{
  unint64_t v2 = sub_100219F00();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001F65F0(uint64_t a1)
{
  unint64_t v2 = sub_100219F00();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.CipherSuiteInformation.CipherSuite.encode(to:)(void *a1, char a2)
{
  uint64_t v5 = sub_100010BCC(&qword_1004828A8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  Swift::UInt8 v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_100219F00();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[15]  = a2;
  v10[14]  = 0;
  sub_100219F54();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v10[13]  = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int NANAttribute.CipherSuiteInformation.CipherSuite.hashValue.getter(__int16 a1)
{
  char v1 = a1;
  Swift::UInt8 v2 = HIBYTE(a1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t NANAttribute.CipherSuiteInformation.CipherSuite.init(from:)(void *a1)
{
  return sub_100212EF8(a1);
}

Swift::Int sub_1001F6818()
{
  char v1 = *v0;
  Swift::UInt8 v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_1001F6878()
{
  Swift::UInt8 v1 = v0[1];
  Hasher._combine(_:)(*v0 + 1);
  Hasher._combine(_:)(v1);
}

Swift::Int sub_1001F68BC()
{
  char v1 = *v0;
  Swift::UInt8 v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_1001F6918@<X0>(_WORD *a1@<X8>)
{
  return sub_1001F6944((uint64_t (*)(void))sub_100212EF8, a1);
}

uint64_t sub_1001F6944@<X0>(uint64_t (*a1)(void)@<X3>, _WORD *a2@<X8>)
{
  uint64_t result = a1();
  if (!v2) {
    *a2  = result;
  }
  return result;
}

uint64_t sub_1001F6974(void *a1)
{
  return NANAttribute.CipherSuiteInformation.CipherSuite.encode(to:)(a1, *v1);
}

void NANAttribute.CipherSuiteInformation.hash(into:)(int a1, Swift::UInt8 a2, uint64_t a3)
{
  Hasher._combine(_:)(a2);
  Swift::UInt v4 = *(void *)(a3 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    uint64_t v5 = (Swift::UInt8 *)(a3 + 33);
    do
    {
      Swift::UInt8 v6 = *(v5 - 1) + 1;
      Swift::UInt8 v7 = *v5;
      v5 += 2;
      Hasher._combine(_:)(v6);
      Hasher._combine(_:)(v7);
      --v4;
    }
    while (v4);
  }
}

uint64_t static NANAttribute.CipherSuiteInformation.__derived_struct_equals(_:_:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_1001F6A10(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))sub_10009884C);
}

uint64_t sub_1001F6A10(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (a1 == a3) {
    return a5(a2, a4);
  }
  else {
    return 0;
  }
}

uint64_t sub_1001F6A34()
{
  if (*v0) {
    return 0x7553726568706963;
  }
  else {
    return 0x696C696261706163;
  }
}

uint64_t sub_1001F6A78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10022DF70(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001F6AA0(uint64_t a1)
{
  unint64_t v2 = sub_100219FA8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001F6ADC(uint64_t a1)
{
  unint64_t v2 = sub_100219FA8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.CipherSuiteInformation.encode(to:)(void *a1, char a2, uint64_t a3)
{
  uint64_t v7 = sub_100010BCC(&qword_1004828C0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  Swift::UInt8 v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_100219FA8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v15 = a2;
  char v14 = 0;
  sub_100219FFC();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v3)
  {
    v12[1]  = a3;
    char v13 = 1;
    sub_100010BCC(&qword_1004828D8);
    sub_100217A38(&qword_1004828E0, &qword_1004828D8, (void (*)(void))sub_10021A050);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int NANAttribute.CipherSuiteInformation.hashValue.getter(Swift::UInt8 a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::UInt v4 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    uint64_t v5 = (Swift::UInt8 *)(a2 + 33);
    do
    {
      Swift::UInt8 v6 = *(v5 - 1) + 1;
      Swift::UInt8 v7 = *v5;
      v5 += 2;
      Hasher._combine(_:)(v6);
      Hasher._combine(_:)(v7);
      --v4;
    }
    while (v4);
  }
  return Hasher._finalize()();
}

uint64_t NANAttribute.CipherSuiteInformation.init(from:)(void *a1)
{
  return sub_1002130B0(a1);
}

Swift::Int sub_1001F6D9C()
{
  return NANAttribute.CipherSuiteInformation.hashValue.getter(*(unsigned char *)v0, *(void *)(v0 + 8));
}

void sub_1001F6DA8(int a1)
{
  NANAttribute.CipherSuiteInformation.hash(into:)(a1, *(unsigned char *)v1, *(void *)(v1 + 8));
}

Swift::Int sub_1001F6DB4()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Swift::UInt8 v2 = *(unsigned char *)v0;
  Hasher.init(_seed:)();
  NANAttribute.CipherSuiteInformation.hash(into:)((int)&v4, v2, v1);
  return Hasher._finalize()();
}

uint64_t sub_1001F6E00@<X0>(uint64_t a1@<X8>)
{
  return sub_1001F6E2C((uint64_t (*)(void))sub_1002130B0, a1);
}

uint64_t sub_1001F6E2C@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t a2@<X8>)
{
  uint64_t result = a1();
  if (!v2)
  {
    *(unsigned char *)a2  = result;
    *(void *)(a2 + 8)  = v5;
  }
  return result;
}

uint64_t sub_1001F6E60(void *a1)
{
  return NANAttribute.CipherSuiteInformation.encode(to:)(a1, *(unsigned char *)v1, *(void *)(v1 + 8));
}

uint64_t sub_1001F6E80(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1001F6E98(a1, a2, a3, a4, (uint64_t (*)(void, void))sub_10009884C);
}

uint64_t sub_1001F6E98(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void))
{
  if (*a1 == *a2) {
    return a5(*((void *)a1 + 1), *((void *)a2 + 1));
  }
  else {
    return 0;
  }
}

BOOL NANAttribute.SecurityContextInformation.SecurityContextIdentifier.IdentifierType.init(rawValue:)(char a1)
{
  return a1 != 1;
}

unsigned char *sub_1001F6ED0@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  *a2  = *result != 1;
  return result;
}

Swift::Int sub_1001F6EE4(uint64_t a1, uint64_t a2)
{
  return sub_1001F8B18(a1, a2, 1u);
}

void sub_1001F6EEC()
{
}

Swift::Int sub_1001F6F14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001F8B90(a1, a2, a3, 1u);
}

uint64_t sub_1001F6F1C()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001F6F7C()
{
  return RawRepresentable<>.encode(to:)();
}

BOOL NANAttribute.SecurityContextInformation.SecurityContextIdentifier.type.getter(__int16 a1)
{
  return (a1 & 0xFF00) != 256;
}

uint64_t NANAttribute.SecurityContextInformation.SecurityContextIdentifier.hash(into:)(int a1, __int16 a2, uint64_t a3, unint64_t a4)
{
  Swift::UInt8 v6 = HIBYTE(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v6);
  sub_100013D44(a3, a4);
  Data.hash(into:)();

  return sub_10000C970(a3, a4);
}

Swift::Int NANAttribute.SecurityContextInformation.SecurityContextIdentifier.hashValue.getter(__int16 a1, uint64_t a2, unint64_t a3)
{
  Swift::UInt8 v5 = a1;
  Swift::UInt8 v6 = HIBYTE(a1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  sub_100013D44(a2, a3);
  Data.hash(into:)();
  sub_10000C970(a2, a3);
  return Hasher._finalize()();
}

Swift::Int sub_1001F70EC()
{
  uint64_t v1 = *(void *)(v0 + 8);
  unint64_t v2 = *(void *)(v0 + 16);
  Swift::UInt8 v3 = *(unsigned char *)v0;
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  sub_100013D44(v1, v2);
  Data.hash(into:)();
  sub_10000C970(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1001F7180()
{
  uint64_t v1 = *(void *)(v0 + 8);
  unint64_t v2 = *(void *)(v0 + 16);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 1);
  Hasher._combine(_:)(*(unsigned char *)v0);
  Hasher._combine(_:)(v3);
  sub_100013D44(v1, v2);
  Data.hash(into:)();

  return sub_10000C970(v1, v2);
}

Swift::Int sub_1001F7200()
{
  uint64_t v1 = *(void *)(v0 + 8);
  unint64_t v2 = *(void *)(v0 + 16);
  Swift::UInt8 v3 = *(unsigned char *)v0;
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  sub_100013D44(v1, v2);
  Data.hash(into:)();
  sub_10000C970(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1001F7290@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1002158A8(a1);
  if (!v2)
  {
    *(_WORD *)a2  = result;
    *(void *)(a2 + 8)  = v5;
    *(void *)(a2 + 16)  = v6;
  }
  return result;
}

uint64_t NANAttribute.SecurityContextInformation.SecurityContextIdentifier.init(from:)(void *a1)
{
  return sub_1002158A8(a1);
}

uint64_t sub_1001F72EC(void *a1)
{
  return NANAttribute.SecurityContextInformation.SecurityContextIdentifier.encode(to:)(a1, *v1, *((void *)v1 + 1), *((void *)v1 + 2));
}

uint64_t NANAttribute.SecurityContextInformation.SecurityContextIdentifier.encode(to:)(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  switch(a4 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a3), a3))
      {
        __break(1u);
LABEL_11:
        __break(1u);
LABEL_12:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x1001F7548);
      }
      unint64_t v7 = HIDWORD(a3) - (int)a3;
LABEL_5:
      if ((v7 & 0x8000000000000000) != 0 || v7 >= 0x10000) {
        goto LABEL_12;
      }
LABEL_7:
      sub_100039448((uint64_t)v11, v12);
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
      if (!v4)
      {
        sub_100039448((uint64_t)v11, v12);
        dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
        sub_100039448((uint64_t)v11, v12);
        dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
        sub_100039448((uint64_t)v11, v12);
        sub_1000742DC();
        dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      }
      return sub_100010754((uint64_t)v11);
    case 2uLL:
      uint64_t v9 = *(void *)(a3 + 16);
      uint64_t v8 = *(void *)(a3 + 24);
      unint64_t v7 = v8 - v9;
      if (!__OFSUB__(v8, v9)) {
        goto LABEL_5;
      }
      goto LABEL_11;
    default:
      goto LABEL_7;
  }
}

uint64_t sub_1001F7558(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*((void *)a1 + 1), *((void *)a1 + 2), *((void *)a2 + 1), *((void *)a2 + 2));
  }
  else {
    return 0;
  }
}

void NANAttribute.SecurityContextInformation.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = a2 + 32;
    swift_bridgeObjectRetain();
    do
    {
      uint64_t v5 = *(void *)(v4 + 8);
      unint64_t v6 = *(void *)(v4 + 16);
      Swift::UInt8 v7 = *(unsigned char *)(v4 + 1);
      Hasher._combine(_:)(*(unsigned char *)v4);
      Hasher._combine(_:)(v7);
      sub_100013D44(v5, v6);
      Data.hash(into:)();
      sub_10000C970(v5, v6);
      v4 += 24;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
}

unint64_t sub_1001F765C()
{
  return 0xD000000000000012;
}

uint64_t sub_1001F7678@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10022E080(a1, a2);
  *a3  = result & 1;
  return result;
}

uint64_t sub_1001F76A4(uint64_t a1)
{
  unint64_t v2 = sub_10021A0A4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001F76E0(uint64_t a1)
{
  unint64_t v2 = sub_10021A0A4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.SecurityContextInformation.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100010BCC(&qword_1004828F0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  Swift::UInt8 v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_10021A0A4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1]  = a2;
  sub_100010BCC(&qword_100482900);
  sub_100217A38(&qword_100482908, &qword_100482900, (void (*)(void))sub_10021A0F8);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int NANAttribute.SecurityContextInformation.hashValue.getter(uint64_t a1)
{
  return sub_1001F88D8(a1, (void (*)(unsigned char *, uint64_t))sub_10009F024);
}

void *NANAttribute.SecurityContextInformation.init(from:)(void *a1)
{
  return sub_100213E9C(a1);
}

Swift::Int sub_1001F78D4(uint64_t a1, uint64_t a2)
{
  return sub_1001F8968(a1, a2, (void (*)(unsigned char *, uint64_t))sub_10009F024);
}

void sub_1001F78EC(uint64_t a1)
{
  NANAttribute.SecurityContextInformation.hash(into:)(a1, *v1);
}

Swift::Int sub_1001F78F4()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Swift::UInt v2 = *(void *)(v1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    swift_bridgeObjectRetain();
    do
    {
      uint64_t v4 = *(void *)(v3 + 8);
      unint64_t v5 = *(void *)(v3 + 16);
      Swift::UInt8 v6 = *(unsigned char *)(v3 + 1);
      Hasher._combine(_:)(*(unsigned char *)v3);
      Hasher._combine(_:)(v6);
      sub_100013D44(v4, v5);
      Data.hash(into:)();
      sub_10000C970(v4, v5);
      v3 += 24;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

void *sub_1001F79C0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_100213E9C(a1);
  if (!v2) {
    *a2  = result;
  }
  return result;
}

uint64_t sub_1001F79EC(void *a1)
{
  return NANAttribute.SecurityContextInformation.encode(to:)(a1, *v1);
}

uint64_t sub_1001F7A08(uint64_t *a1, uint64_t *a2)
{
  return _s7CoreP2P12NANAttributeO26SecurityContextInformationV23__derived_struct_equalsySbAE_AEtFZ_0(*a1, *a2);
}

uint64_t sub_1001F7A14()
{
  if (*v0) {
    return 1635017060;
  }
  else {
    return 0x496873696C627570;
  }
}

uint64_t sub_1001F7A4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10022E108(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001F7A74(uint64_t a1)
{
  unint64_t v2 = sub_10021A14C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001F7AB0(uint64_t a1)
{
  unint64_t v2 = sub_10021A14C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.SharedKeyDescriptor.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = a4;
  uint64_t v7 = sub_100010BCC(&qword_100482918);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  Swift::UInt8 v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_10021A14C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v14)  = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v4)
  {
    uint64_t v14 = a3;
    uint64_t v15 = v13;
    char v16 = 1;
    sub_100217EAC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t NANAttribute.SharedKeyDescriptor.init(from:)(void *a1)
{
  return sub_100212D38(a1);
}

uint64_t sub_1001F7C98@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100212D38(a1);
  if (!v2)
  {
    *(unsigned char *)a2  = result;
    *(void *)(a2 + 8)  = v5;
    *(void *)(a2 + 16)  = v6;
  }
  return result;
}

uint64_t sub_1001F7CC8(void *a1)
{
  return NANAttribute.SharedKeyDescriptor.encode(to:)(a1, *v1, *((void *)v1 + 1), *((void *)v1 + 2));
}

void *NANAttribute.MulticastScheduleChange.Control.accepted.unsafeMutableAddressor()
{
  return &static NANAttribute.MulticastScheduleChange.Control.accepted;
}

void *NANAttribute.MulticastScheduleChange.Control.request.unsafeMutableAddressor()
{
  return &static NANAttribute.MulticastScheduleChange.Control.request;
}

void *NANAttribute.MulticastScheduleChange.Control.response.unsafeMutableAddressor()
{
  return &static NANAttribute.MulticastScheduleChange.Control.response;
}

uint64_t sub_1001F7D0C()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001F7D6C()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t NANAttribute.MulticastScheduleChange.reason.getter(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return HIWORD(a3);
}

uint64_t NANAttribute.MulticastScheduleChange.hash(into:)(uint64_t a1, Swift::UInt64 a2, Swift::UInt64 a3, unsigned int a4, uint64_t a5)
{
  Swift::UInt16 v6 = a4;
  unsigned int v9 = HIWORD(a4);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(a3);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v9);
  swift_bridgeObjectRetain();
  sub_10009E960(a1, a5);

  return swift_bridgeObjectRelease();
}

uint64_t static NANAttribute.MulticastScheduleChange.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  if (a1 == a5 && a2 == a6 && (unsigned __int16)a3 == (unsigned __int16)a7 && BYTE2(a3) == BYTE2(a7)) {
    return _s7CoreP2P12NANAttributeO18PublicAvailabilityV23__derived_struct_equalsySbAE_AEtFZ_0(a4, a8);
  }
  else {
    return 0;
  }
}

unint64_t sub_1001F7E90(char a1)
{
  unint64_t result = 0x444967736D6ELL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000012;
      break;
    case 2:
      unint64_t result = 0x6C6F72746E6F63;
      break;
    case 3:
      unint64_t result = 0x6E6F73616572;
      break;
    case 4:
      unint64_t result = 0xD00000000000001ELL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1001F7F40()
{
  return sub_1001F7E90(*v0);
}

uint64_t sub_1001F7F48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10022E1F8(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001F7F70(uint64_t a1)
{
  unint64_t v2 = sub_10021A1A0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001F7FAC(uint64_t a1)
{
  unint64_t v2 = sub_10021A1A0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.MulticastScheduleChange.encode(to:)(void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v16 = a5;
  uint64_t v17 = a3;
  uint64_t v8 = sub_100010BCC(&qword_100482928);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  Swift::UInt8 v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_10021A1A0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v18)  = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v5)
  {
    int v12 = a4;
    uint64_t v13 = v16;
    LOBYTE(v18)  = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOWORD(v18)  = v12;
    char v19 = 2;
    sub_10021A1F4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v18)  = BYTE2(v12);
    char v19 = 3;
    sub_1002183A4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v18 = v13;
    char v19 = 4;
    sub_100010BCC(&qword_1004827A8);
    sub_100217A38(&qword_1004827B0, &qword_1004827A8, (void (*)(void))sub_100219180);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

Swift::Int NANAttribute.MulticastScheduleChange.hashValue.getter(Swift::UInt64 a1, Swift::UInt64 a2, unsigned int a3, uint64_t a4)
{
  Swift::UInt16 v5 = a3;
  unsigned int v8 = HIWORD(a3);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v8);
  swift_bridgeObjectRetain();
  sub_10009E960((uint64_t)v10, a4);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t NANAttribute.MulticastScheduleChange.init(from:)(void *a1)
{
  uint64_t result = sub_100213734(a1);
  if (v1) {
    return v3 & 0xFFFFFF;
  }
  return result;
}

Swift::Int sub_1001F8330()
{
  Swift::UInt64 v1 = *(void *)v0;
  Swift::UInt64 v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 24);
  Swift::UInt16 v4 = *(_WORD *)(v0 + 16);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 18);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  swift_bridgeObjectRetain();
  sub_10009E960((uint64_t)v7, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1001F83D4(uint64_t a1)
{
  Swift::UInt64 v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 24);
  Swift::UInt16 v5 = *(_WORD *)(v1 + 16);
  Swift::UInt8 v6 = *(unsigned char *)(v1 + 18);
  Hasher._combine(_:)(*(void *)v1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  swift_bridgeObjectRetain();
  sub_10009E960(a1, v4);

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001F845C()
{
  Swift::UInt64 v1 = *(void *)v0;
  Swift::UInt64 v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 24);
  Swift::UInt16 v4 = *(_WORD *)(v0 + 16);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 18);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  swift_bridgeObjectRetain();
  sub_10009E960((uint64_t)v7, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1001F84FC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100213734(a1);
  if (!v2)
  {
    *(void *)a2  = result;
    *(void *)(a2 + 8)  = v5;
    *(_WORD *)(a2 + 16)  = v6;
    *(unsigned char *)(a2 + 18)  = BYTE2(v6);
    *(void *)(a2 + 24)  = v7;
  }
  return result;
}

uint64_t sub_1001F8538(void *a1)
{
  return NANAttribute.MulticastScheduleChange.encode(to:)(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned __int16 *)(v1 + 16) | (*(unsigned __int8 *)(v1 + 18) << 16), *(void *)(v1 + 24));
}

uint64_t sub_1001F8564(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 == *(void *)a2
    && *(void *)(a1 + 8) == *(void *)(a2 + 8)
    && *(unsigned __int16 *)(a1 + 16) == *(unsigned __int16 *)(a2 + 16)
    && *(unsigned __int8 *)(a1 + 18) == *(unsigned __int8 *)(a2 + 18))
  {
    return _s7CoreP2P12NANAttributeO18PublicAvailabilityV23__derived_struct_equalsySbAE_AEtFZ_0(*(void *)(a1 + 24), *(void *)(a2 + 24));
  }
  else
  {
    return 0;
  }
}

void NANAttribute.PublicAvailability.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    swift_bridgeObjectRetain();
    Swift::UInt16 v4 = (unint64_t *)(a2 + 56);
    do
    {
      uint64_t v5 = *(v4 - 1);
      unint64_t v6 = *v4;
      Swift::UInt16 v7 = *((_WORD *)v4 - 8);
      Hasher._combine(_:)(*((unsigned char *)v4 - 24));
      Hasher._combine(_:)(v7);
      sub_100013D44(v5, v6);
      Data.hash(into:)();
      sub_10000C970(v5, v6);
      v4 += 4;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
}

unint64_t sub_1001F8678()
{
  return 0xD000000000000021;
}

uint64_t sub_1001F8694@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10022E3FC(a1, a2);
  *a3  = result & 1;
  return result;
}

uint64_t sub_1001F86C0(uint64_t a1)
{
  unint64_t v2 = sub_10021A248();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001F86FC(uint64_t a1)
{
  unint64_t v2 = sub_10021A248();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.PublicAvailability.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100010BCC(&qword_100482940);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  Swift::UInt16 v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_10021A248();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1]  = a2;
  sub_100010BCC(&qword_1004827A8);
  sub_100217A38(&qword_1004827B0, &qword_1004827A8, (void (*)(void))sub_100219180);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int NANAttribute.PublicAvailability.hashValue.getter(uint64_t a1)
{
  return sub_1001F88D8(a1, (void (*)(unsigned char *, uint64_t))sub_10009E960);
}

Swift::Int sub_1001F88D8(uint64_t a1, void (*a2)(unsigned char *, uint64_t))
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  a2(v5, a1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void *NANAttribute.PublicAvailability.init(from:)(void *a1)
{
  return sub_100212844(a1);
}

Swift::Int sub_1001F8950(uint64_t a1, uint64_t a2)
{
  return sub_1001F8968(a1, a2, (void (*)(unsigned char *, uint64_t))sub_10009E960);
}

Swift::Int sub_1001F8968(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t))
{
  uint64_t v5 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  a3(v7, v5);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void sub_1001F89C8(uint64_t a1)
{
  NANAttribute.PublicAvailability.hash(into:)(a1, *v1);
}

Swift::Int sub_1001F89D0()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Swift::UInt v2 = *(void *)(v1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    swift_bridgeObjectRetain();
    Swift::UInt v3 = (unint64_t *)(v1 + 56);
    do
    {
      uint64_t v4 = *(v3 - 1);
      unint64_t v5 = *v3;
      Swift::UInt16 v6 = *((_WORD *)v3 - 8);
      Hasher._combine(_:)(*((unsigned char *)v3 - 24));
      Hasher._combine(_:)(v6);
      sub_100013D44(v4, v5);
      Data.hash(into:)();
      sub_10000C970(v4, v5);
      v3 += 4;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

void *sub_1001F8A9C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_100212844(a1);
  if (!v2) {
    *a2  = result;
  }
  return result;
}

uint64_t sub_1001F8AC8(void *a1)
{
  return NANAttribute.PublicAvailability.encode(to:)(a1, *v1);
}

uint64_t sub_1001F8AE4(uint64_t *a1, uint64_t *a2)
{
  return _s7CoreP2P12NANAttributeO18PublicAvailabilityV23__derived_struct_equalsySbAE_AEtFZ_0(*a1, *a2);
}

BOOL NANAttribute.PairingIdentityResolution.CipherVersion.init(rawValue:)(char a1)
{
  return a1 != 0;
}

unsigned char *sub_1001F8AFC@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  *a2  = *result != 0;
  return result;
}

Swift::Int sub_1001F8B10(uint64_t a1, uint64_t a2)
{
  return sub_1001F8B18(a1, a2, 0);
}

Swift::Int sub_1001F8B18(uint64_t a1, uint64_t a2, Swift::UInt8 a3)
{
  return Hasher._finalize()();
}

void sub_1001F8B60()
{
}

Swift::Int sub_1001F8B88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001F8B90(a1, a2, a3, 0);
}

Swift::Int sub_1001F8B90(uint64_t a1, uint64_t a2, uint64_t a3, Swift::UInt8 a4)
{
  return Hasher._finalize()();
}

uint64_t sub_1001F8BD4()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001F8C34()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t NANAttribute.PairingIdentityResolution.init(nonce:tag:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8)  = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
        JUMPOUT(0x1001F8DDCLL);
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      if (v8 == 8)
      {
        switch(a4 >> 62)
        {
          case 1uLL:
            LODWORD(v12)  = HIDWORD(a3) - a3;
            if (__OFSUB__(HIDWORD(a3), a3)) {
              goto LABEL_17;
            }
            uint64_t v12 = (int)v12;
LABEL_12:
            if (v12 != 8) {
              break;
            }
            return a1;
          case 2uLL:
            uint64_t v14 = *(void *)(a3 + 16);
            uint64_t v13 = *(void *)(a3 + 24);
            BOOL v11 = __OFSUB__(v13, v14);
            uint64_t v12 = v13 - v14;
            if (!v11) {
              goto LABEL_12;
            }
            goto LABEL_18;
          case 3uLL:
            break;
          default:
            uint64_t v12 = BYTE6(a4);
            goto LABEL_12;
        }
      }
LABEL_13:
      sub_10000F000();
      swift_allocError();
      *(void *)uint64_t v15 = 0;
      *(void *)(v15 + 8)  = 0;
      *(unsigned char *)(v15 + 16)  = 2;
      swift_willThrow();
      sub_10000C970(a3, a4);
      sub_10000C970(a1, a2);
      return a1;
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_16;
    case 3uLL:
      goto LABEL_13;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t NANAttribute.PairingIdentityResolution.init(from:)(void *a1)
{
  uint64_t result = sub_100215AF0(a1);
  if (v1) {
    return v3;
  }
  return result;
}

uint64_t NANAttribute.PairingIdentityResolution.hash(into:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  Hasher._combine(_:)(0);
  sub_100013D44(a2, a3);
  Data.hash(into:)();
  sub_10000C970(a2, a3);
  sub_100013D44(a4, a5);
  Data.hash(into:)();

  return sub_10000C970(a4, a5);
}

uint64_t sub_1001F8ECC()
{
  uint64_t v1 = 0x65636E6F6ELL;
  if (*v0 != 1) {
    uint64_t v1 = 6775156;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6556726568706963;
  }
}

uint64_t sub_1001F8F28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10022E484(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001F8F50(uint64_t a1)
{
  unint64_t v2 = sub_10021A29C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001F8F8C(uint64_t a1)
{
  unint64_t v2 = sub_10021A29C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.PairingIdentityResolution.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = a5;
  uint64_t v16 = a3;
  uint64_t v9 = sub_100010BCC(&qword_100482950);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_10021A29C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v17)  = 0;
  sub_10021A2F0();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v5)
  {
    uint64_t v13 = v15;
    uint64_t v17 = a2;
    uint64_t v18 = v16;
    char v19 = 1;
    sub_1000742DC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v17 = a4;
    uint64_t v18 = v13;
    char v19 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

Swift::Int NANAttribute.PairingIdentityResolution.hashValue.getter(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  return Hasher._finalize()();
}

Swift::Int sub_1001F9250()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  unint64_t v4 = v0[3];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  sub_100013D44(v1, v2);
  Data.hash(into:)();
  sub_10000C970(v1, v2);
  sub_100013D44(v3, v4);
  Data.hash(into:)();
  sub_10000C970(v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_1001F92FC()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  unint64_t v4 = v0[3];
  Hasher._combine(_:)(0);
  sub_100013D44(v1, v2);
  Data.hash(into:)();
  sub_10000C970(v1, v2);
  sub_100013D44(v3, v4);
  Data.hash(into:)();

  return sub_10000C970(v3, v4);
}

Swift::Int sub_1001F939C()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  unint64_t v4 = v0[3];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  sub_100013D44(v1, v2);
  Data.hash(into:)();
  sub_10000C970(v1, v2);
  sub_100013D44(v3, v4);
  Data.hash(into:)();
  sub_10000C970(v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_1001F9444@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100215AF0(a1);
  if (!v2)
  {
    *a2  = result;
    a2[1]  = v5;
    a2[2]  = v6;
    a2[3]  = v7;
  }
  return result;
}

uint64_t sub_1001F9474(void *a1)
{
  return NANAttribute.PairingIdentityResolution.encode(to:)(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_1001F9494()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001F94F4()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1001F9544()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001F95A4()
{
  return RawRepresentable<>.encode(to:)();
}

void *NANAttribute.PairingBootstrapping.Method.opportunistic.unsafeMutableAddressor()
{
  return &static NANAttribute.PairingBootstrapping.Method.opportunistic;
}

void *NANAttribute.PairingBootstrapping.Method.pinCode.unsafeMutableAddressor()
{
  return &static NANAttribute.PairingBootstrapping.Method.pinCode;
}

void *NANAttribute.PairingBootstrapping.Method.passphrase.unsafeMutableAddressor()
{
  return &static NANAttribute.PairingBootstrapping.Method.passphrase;
}

void *NANAttribute.PairingBootstrapping.Method.qrCode.unsafeMutableAddressor()
{
  return &static NANAttribute.PairingBootstrapping.Method.qrCode;
}

void *NANAttribute.PairingBootstrapping.Method.nfcTag.unsafeMutableAddressor()
{
  return &static NANAttribute.PairingBootstrapping.Method.nfcTag;
}

void *NANAttribute.PairingBootstrapping.Method.keypadPinCode.unsafeMutableAddressor()
{
  return &static NANAttribute.PairingBootstrapping.Method.keypadPinCode;
}

void *NANAttribute.PairingBootstrapping.Method.keypadPassphrase.unsafeMutableAddressor()
{
  return &static NANAttribute.PairingBootstrapping.Method.keypadPassphrase;
}

void *NANAttribute.PairingBootstrapping.Method.qrCodeScan.unsafeMutableAddressor()
{
  return &static NANAttribute.PairingBootstrapping.Method.qrCodeScan;
}

void *NANAttribute.PairingBootstrapping.Method.nfcReader.unsafeMutableAddressor()
{
  return &static NANAttribute.PairingBootstrapping.Method.nfcReader;
}

void *NANAttribute.PairingBootstrapping.Method.bootstrapManagedByService.unsafeMutableAddressor()
{
  return &static NANAttribute.PairingBootstrapping.Method.bootstrapManagedByService;
}

void *NANAttribute.PairingBootstrapping.Method.bootstrapHandshakeSkipped.unsafeMutableAddressor()
{
  return &static NANAttribute.PairingBootstrapping.Method.bootstrapHandshakeSkipped;
}

void *NANAttribute.PairingBootstrapping.Method.validAdvertiseMethods.unsafeMutableAddressor()
{
  return &static NANAttribute.PairingBootstrapping.Method.validAdvertiseMethods;
}

uint64_t static NANAttribute.PairingBootstrapping.Method.validAdvertiseMethods.getter()
{
  return 31;
}

uint64_t sub_1001F968C()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001F96EC()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t NANAttribute.PairingBootstrapping.Comeback.comebackAfter.setter(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 8)  = a2 & 1;
  return result;
}

uint64_t NANAttribute.PairingBootstrapping.Comeback.hash(into:)(uint64_t a1, Swift::UInt64 a2, char a3, uint64_t a4, unint64_t a5)
{
  if (a3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a2);
  }
  sub_100013D44(a4, a5);
  Data.hash(into:)();

  return sub_10000C970(a4, a5);
}

uint64_t static NANAttribute.PairingBootstrapping.Comeback.__derived_struct_equals(_:_:)(uint64_t a1, char a2, uint64_t a3, unint64_t a4, uint64_t a5, char a6, uint64_t a7, unint64_t a8)
{
  if (a2)
  {
    if (a6) {
      return _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a3, a4, a7, a8);
    }
  }
  else if ((a6 & 1) == 0 && a1 == a5)
  {
    return _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a3, a4, a7, a8);
  }
  return 0;
}

Swift::Int NANAttribute.PairingBootstrapping.Comeback.hashValue.getter(Swift::UInt64 a1, char a2, uint64_t a3, unint64_t a4)
{
  if (a2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a1);
  }
  sub_100013D44(a3, a4);
  Data.hash(into:)();
  sub_10000C970(a3, a4);
  return Hasher._finalize()();
}

Swift::Int sub_1001F98B0()
{
  Swift::UInt64 v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  unint64_t v4 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  sub_100013D44(v3, v4);
  Data.hash(into:)();
  sub_10000C970(v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_1001F9958()
{
  uint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  if (*(unsigned char *)(v0 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt64 v3 = *(void *)v0;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }
  sub_100013D44(v1, v2);
  Data.hash(into:)();

  return sub_10000C970(v1, v2);
}

Swift::Int sub_1001F99F4()
{
  Swift::UInt64 v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  unint64_t v4 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  sub_100013D44(v3, v4);
  Data.hash(into:)();
  sub_10000C970(v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_1001F9A98(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = *(void *)(a1 + 24);
  if (v4)
  {
    if (!*(unsigned char *)(a2 + 8)) {
      return 0;
    }
  }
  else
  {
    if (*(void *)a1 == *(void *)a2) {
      char v8 = *(unsigned char *)(a2 + 8);
    }
    else {
      char v8 = 1;
    }
    if (v8) {
      return 0;
    }
  }
  return _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v5, v6, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

unint64_t NANAttribute.PairingBootstrapping.type.getter()
{
  unint64_t result = sub_10008CAA8(0, 4, *(unsigned char *)(v0 + 1));
  if (result >= 3u) {
    return 3;
  }
  return result;
}

uint64_t NANAttribute.PairingBootstrapping.comeback.getter()
{
  uint64_t v1 = v0[1];
  sub_1001450E0(v1, v0[2], v0[3], v0[4]);
  return v1;
}

uint64_t NANAttribute.PairingBootstrapping.comeback.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_10014CC74(*(void *)(v4 + 8), *(void *)(v4 + 16), *(void *)(v4 + 24), *(void *)(v4 + 32));
  *(void *)(v4 + 8)  = a1;
  *(void *)(v4 + 16)  = a2;
  *(void *)(v4 + 24)  = a3;
  *(void *)(v4 + 32)  = a4;
  return result;
}

void NANAttribute.PairingBootstrapping.hash(into:)()
{
  Hasher._combine(_:)(*(unsigned char *)v0);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 1));
  Hasher._combine(_:)(*(unsigned char *)(v0 + 2));
  if (*(void *)(v0 + 32) >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v1 = *(void *)(v0 + 16);
    Swift::UInt64 v2 = *(void *)(v0 + 8);
    Hasher._combine(_:)(1u);
    if (v1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v2);
    }
    sub_10021A344(v0);
    Data.hash(into:)();
  }
  sub_10021A378(v0);
  Hasher._combine(_:)(*(_WORD *)(v0 + 40));
}

Swift::Int NANAttribute.PairingBootstrapping.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(unsigned char *)v0);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 1));
  Hasher._combine(_:)(*(unsigned char *)(v0 + 2));
  if (*(void *)(v0 + 32) >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v1 = *(void *)(v0 + 16);
    Swift::UInt64 v2 = *(void *)(v0 + 8);
    Hasher._combine(_:)(1u);
    if (v1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v2);
    }
    sub_10021A344(v0);
    Data.hash(into:)();
  }
  sub_10021A378(v0);
  Hasher._combine(_:)(*(_WORD *)(v0 + 40));
  return Hasher._finalize()();
}

Swift::Int sub_1001F9D90()
{
  return NANAttribute.PairingBootstrapping.hashValue.getter();
}

void sub_1001F9DCC()
{
}

Swift::Int sub_1001F9E08()
{
  Swift::UInt64 v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  unint64_t v4 = *(void *)(v0 + 32);
  Swift::UInt16 v5 = *(_WORD *)(v0 + 40);
  Swift::UInt8 v6 = *(unsigned char *)v0;
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 1);
  Swift::UInt8 v8 = *(unsigned char *)(v0 + 2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  if (v4 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if (v2)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v1);
    }
    sub_1001450E0(v1, v2, v3, v4);
    Data.hash(into:)();
  }
  sub_10014CC74(v1, v2, v3, v4);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

double NANAttribute.PairingBootstrapping.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100215CD4(a1, (uint64_t)&v6);
  if (!v2)
  {
    long long v5 = v7[0];
    *a2  = v6;
    a2[1]  = v5;
    double result = *(double *)((char *)v7 + 10);
    *(_OWORD *)((char *)a2 + 26)  = *(_OWORD *)((char *)v7 + 10);
  }
  return result;
}

uint64_t sub_1001F9F6C(void *a1)
{
  return NANAttribute.PairingBootstrapping.encode(to:)(a1);
}

uint64_t NANAttribute.PairingBootstrapping.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  sub_100039448((uint64_t)v8, v9);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  if (!v2)
  {
    sub_100039448((uint64_t)v8, v9);
    sub_100010BCC(&qword_100482968);
    sub_10000F9CC(&qword_100482970, &qword_100482968);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    sub_100039448((uint64_t)v8, v9);
    sub_1002183A4();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    sub_10006EC68(v1 + 8, (uint64_t)v10, &qword_100482978);
    sub_10006EC68((uint64_t)v10, (uint64_t)&v11, &qword_100482978);
    if (*((void *)&v12 + 1) >> 60 == 15)
    {
LABEL_3:
      sub_100039448((uint64_t)v8, v9);
      sub_10021A3AC();
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      return sub_100010754((uint64_t)v8);
    }
    long long v13 = v11;
    long long v14 = v12;
    sub_10006EC68((uint64_t)&v13, (uint64_t)v15, &qword_100482988);
    sub_10006EC68((uint64_t)v15, (uint64_t)&v20, &qword_100482988);
    if (v21 == 1)
    {
      sub_10021A344(v1);
    }
    else
    {
      if (v20 >= 0x10000) {
        goto LABEL_19;
      }
      sub_100039448((uint64_t)v8, v9);
      sub_10021A344(v1);
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    }
    long long v16 = v14;
    sub_10021A400((uint64_t)&v16, (uint64_t)v17);
    sub_10021A400((uint64_t)v17, (uint64_t)&v18);
    switch(v19 >> 62)
    {
      case 1uLL:
        v19 &= 0x3FFFFFFFFFFFFFFFuLL;
        if (__OFSUB__(HIDWORD(v18), v18))
        {
          __break(1u);
LABEL_18:
          __break(1u);
        }
        else
        {
          unint64_t v4 = HIDWORD(v18) - (int)v18;
LABEL_13:
          if ((v4 & 0x8000000000000000) == 0 && v4 < 0x100)
          {
LABEL_15:
            sub_100039448((uint64_t)v8, v9);
            dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
            sub_100039448((uint64_t)v8, v9);
            sub_1000742DC();
            dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
            sub_10021A378(v3);
            goto LABEL_3;
          }
        }
        break;
      case 2uLL:
        v19 &= 0x3FFFFFFFFFFFFFFFuLL;
        uint64_t v5 = *(void *)(v18 + 16);
        uint64_t v6 = *(void *)(v18 + 24);
        unint64_t v4 = v6 - v5;
        if (!__OFSUB__(v6, v5)) {
          goto LABEL_13;
        }
        goto LABEL_18;
      case 3uLL:
        goto LABEL_15;
      default:
        v19 &= 0x3FFFFFFFFFFFFFFFuLL;
        goto LABEL_15;
    }
LABEL_19:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x1001FA3D8);
  }
  return sub_100010754((uint64_t)v8);
}

BOOL sub_1001FA3E8(long long *a1, long long *a2)
{
  long long v2 = a1[1];
  long long v5 = *a1;
  v6[0]  = v2;
  *(_OWORD *)((char *)v6 + 10)  = *(long long *)((char *)a1 + 26);
  long long v3 = a2[1];
  long long v7 = *a2;
  v8[0]  = v3;
  *(_OWORD *)((char *)v8 + 10)  = *(long long *)((char *)a2 + 26);
  return _s7CoreP2P12NANAttributeO20PairingBootstrappingV23__derived_struct_equalsySbAE_AEtFZ_0((unsigned __int8 *)&v5, (unsigned __int8 *)&v7);
}

uint64_t NANAttribute.VendorSpecific.oui.getter(int a1)
{
  return a1 & 0xFFFFFF;
}

uint64_t NANAttribute.VendorSpecific.oui.setter(uint64_t result)
{
  *(_WORD *)uint64_t v1 = result;
  *(unsigned char *)(v1 + 2)  = BYTE2(result);
  return result;
}

uint64_t NANAttribute.VendorSpecific.hash(into:)(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4)
{
  char v6 = a2;
  unsigned int v7 = a2 >> 8;
  unsigned int v8 = HIWORD(a2);
  sub_100010BCC(&qword_10047BEF8);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16)  = xmmword_1003B2760;
  *(unsigned char *)(v9 + 32)  = v6;
  *(unsigned char *)(v9 + 33)  = v7;
  *(unsigned char *)(v9 + 34)  = v8;
  uint64_t v10 = sub_1001265EC(v9);
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  Data.hash(into:)();
  sub_10000C970(v10, v12);
  sub_100013D44(a3, a4);
  Data.hash(into:)();

  return sub_10000C970(a3, a4);
}

uint64_t static NANAttribute.VendorSpecific.__derived_struct_equals(_:_:)(int a1, uint64_t a2, unint64_t a3, int a4, uint64_t a5, unint64_t a6)
{
  return sub_10020CCF4(a1 & 0xFFFFFF, a2, a3, a4 & 0xFFFFFF, a5, a6);
}

uint64_t sub_1001FA544()
{
  if (*v0) {
    return 1635017060;
  }
  else {
    return 6911343;
  }
}

uint64_t sub_1001FA570@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10022E5E8(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1001FA598(uint64_t a1)
{
  unint64_t v2 = sub_10021A45C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001FA5D4(uint64_t a1)
{
  unint64_t v2 = sub_10021A45C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.VendorSpecific.encode(to:)(void *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = a4;
  uint64_t v15 = a3;
  char v4 = a2;
  unsigned int v6 = a2 >> 8;
  unsigned int v7 = HIWORD(a2);
  uint64_t v8 = sub_100010BCC(&qword_100482990);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  unint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_10021A45C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v18)  = v4;
  BYTE1(v18)  = v6;
  BYTE2(v18)  = v7;
  char v20 = 0;
  sub_10019F5E8();
  uint64_t v12 = v17;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v12)
  {
    uint64_t v18 = v15;
    uint64_t v19 = v16;
    char v20 = 1;
    sub_100217EAC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

Swift::Int NANAttribute.VendorSpecific.hashValue.getter(unsigned int a1, uint64_t a2, unint64_t a3)
{
  char v5 = a1;
  unsigned int v6 = a1 >> 8;
  unsigned int v7 = HIWORD(a1);
  Hasher.init(_seed:)();
  sub_100010BCC(&qword_10047BEF8);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16)  = xmmword_1003B2760;
  *(unsigned char *)(v8 + 32)  = v5;
  *(unsigned char *)(v8 + 33)  = v6;
  *(unsigned char *)(v8 + 34)  = v7;
  uint64_t v9 = sub_1001265EC(v8);
  unint64_t v11 = v10;
  swift_bridgeObjectRelease();
  Data.hash(into:)();
  sub_10000C970(v9, v11);
  sub_100013D44(a2, a3);
  Data.hash(into:)();
  sub_10000C970(a2, a3);
  return Hasher._finalize()();
}

uint64_t NANAttribute.VendorSpecific.init(from:)(void *a1)
{
  return sub_100211AA4(a1) & 0xFFFFFF;
}

Swift::Int sub_1001FA8D0()
{
  return NANAttribute.VendorSpecific.hashValue.getter(*v0 | (*((unsigned __int8 *)v0 + 2) << 16), *((void *)v0 + 1), *((void *)v0 + 2));
}

uint64_t sub_1001FA8E4()
{
  __int16 v1 = *v0;
  char v2 = *((unsigned char *)v0 + 2);
  uint64_t v4 = *((void *)v0 + 1);
  unint64_t v3 = *((void *)v0 + 2);
  sub_100010BCC(&qword_10047BEF8);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16)  = xmmword_1003B2760;
  *(_WORD *)(v5 + 32)  = v1;
  *(unsigned char *)(v5 + 34)  = v2;
  uint64_t v6 = sub_1001265EC(v5);
  unint64_t v8 = v7;
  swift_bridgeObjectRelease();
  Data.hash(into:)();
  sub_10000C970(v6, v8);
  sub_100013D44(v4, v3);
  Data.hash(into:)();

  return sub_10000C970(v4, v3);
}

Swift::Int sub_1001FA9B4()
{
  __int16 v1 = *v0;
  char v2 = *((unsigned char *)v0 + 2);
  uint64_t v3 = *((void *)v0 + 1);
  unint64_t v4 = *((void *)v0 + 2);
  Hasher.init(_seed:)();
  sub_100010BCC(&qword_10047BEF8);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16)  = xmmword_1003B2760;
  *(_WORD *)(v5 + 32)  = v1;
  *(unsigned char *)(v5 + 34)  = v2;
  uint64_t v6 = sub_1001265EC(v5);
  unint64_t v8 = v7;
  swift_bridgeObjectRelease();
  Data.hash(into:)();
  sub_10000C970(v6, v8);
  sub_100013D44(v3, v4);
  Data.hash(into:)();
  sub_10000C970(v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_1001FAA8C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100211AA4(a1);
  if (!v2)
  {
    *(_WORD *)a2  = result;
    *(unsigned char *)(a2 + 2)  = BYTE2(result);
    *(void *)(a2 + 8)  = v5;
    *(void *)(a2 + 16)  = v6;
  }
  return result;
}

uint64_t sub_1001FAACC(void *a1)
{
  return NANAttribute.VendorSpecific.encode(to:)(a1, *v1 | (*((unsigned __int8 *)v1 + 2) << 16), *((void *)v1 + 1), *((void *)v1 + 2));
}

uint64_t sub_1001FAAF4(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return sub_10020CCF4(*a1 | (*((unsigned __int8 *)a1 + 2) << 16), *((void *)a1 + 1), *((void *)a1 + 2), *a2 | (*((unsigned __int8 *)a2 + 2) << 16), *((void *)a2 + 1), *((void *)a2 + 2));
}

uint64_t (*NANAttribute.CustomDeviceInformation.CustomAttributes.flags.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1  = v1;
  *(_DWORD *)(a1 + 8)  = *v1;
  return sub_1001FAB48;
}

uint64_t sub_1001FAB48(uint64_t result)
{
  **(unsigned char **)uint64_t result = *(_DWORD *)(result + 8);
  return result;
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.datapathSubscribeID.getter()
{
  return *(unsigned __int8 *)(v0 + 1) | (*(unsigned __int8 *)(v0 + 2) << 8);
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.datapathSubscribeID.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 1)  = result;
  *(unsigned char *)(v1 + 2)  = BYTE1(result) & 1;
  return result;
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.publicKey.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  return sub_1000136F4(v1 + *(int *)(v3 + 24), a1, (uint64_t *)&unk_1004852B0);
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.publicKey.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  return sub_10006D1A4(a1, v1 + *(int *)(v3 + 24), (uint64_t *)&unk_1004852B0);
}

uint64_t (*NANAttribute.CustomDeviceInformation.CustomAttributes.publicKey.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.publisherAuthenticationToken.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0) + 28);
  uint64_t v2 = *(void *)v1;
  sub_100038004(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.publisherAuthenticationToken.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0) + 28);
  uint64_t result = sub_10000C95C(*(void *)v5, *(void *)(v5 + 8));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8)  = a2;
  return result;
}

uint64_t (*NANAttribute.CustomDeviceInformation.CustomAttributes.publisherAuthenticationToken.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.encryptedSignature.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0) + 32);
  uint64_t v2 = *(void *)v1;
  sub_100038004(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.encryptedSignature.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0) + 32);
  uint64_t result = sub_10000C95C(*(void *)v5, *(void *)(v5 + 8));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8)  = a2;
  return result;
}

uint64_t (*NANAttribute.CustomDeviceInformation.CustomAttributes.encryptedSignature.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.encryptedExtraServiceSpecificInfo.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0) + 36);
  uint64_t v2 = *(void *)v1;
  sub_100038004(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.encryptedExtraServiceSpecificInfo.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0) + 36);
  uint64_t result = sub_10000C95C(*(void *)v5, *(void *)(v5 + 8));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8)  = a2;
  return result;
}

uint64_t (*NANAttribute.CustomDeviceInformation.CustomAttributes.encryptedExtraServiceSpecificInfo.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.keepAliveUUID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  return sub_1000136F4(v1 + *(int *)(v3 + 40), a1, &qword_1004862B0);
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.keepAliveUUID.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  return sub_10006D1A4(a1, v1 + *(int *)(v3 + 40), &qword_1004862B0);
}

uint64_t (*NANAttribute.CustomDeviceInformation.CustomAttributes.keepAliveUUID.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.keepAliveDatapathIdentifiers.getter()
{
  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);

  return swift_bridgeObjectRetain();
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.keepAliveDatapathIdentifiers.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0) + 44);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3)  = a1;
  return result;
}

uint64_t (*NANAttribute.CustomDeviceInformation.CustomAttributes.keepAliveDatapathIdentifiers.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.internetSharingStatistics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  return sub_1000136F4(v1 + *(int *)(v3 + 48), a1, (uint64_t *)&unk_100485B60);
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.internetSharingStatistics.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  return sub_10006D1A4(a1, v1 + *(int *)(v3 + 48), (uint64_t *)&unk_100485B60);
}

uint64_t (*NANAttribute.CustomDeviceInformation.CustomAttributes.internetSharingStatistics.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.multicastLinkConditionResponse.getter()
{
  return *(void *)(v0
                   + *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0) + 52));
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.multicastLinkConditionResponse.setter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  uint64_t v10 = v4 + *(int *)(result + 52);
  *(void *)uint64_t v10 = a1;
  *(void *)(v10 + 8)  = a2;
  *(void *)(v10 + 16)  = a3;
  *(unsigned char *)(v10 + 24)  = a4 & 1;
  return result;
}

uint64_t (*NANAttribute.CustomDeviceInformation.CustomAttributes.multicastLinkConditionResponse.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  v210  = a1;
  v185  = a2;
  v203  = type metadata accessor for DispatchTimeInterval();
  v184  = *(void *)(v203 - 8);
  __chkstk_darwin();
  v202  = (uint64_t *)((char *)&v159 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v3 = type metadata accessor for NANInternetSharingStatistics.Requester();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  v201  = (char *)&v159 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v191  = (uint64_t)&v159 - v6;
  sub_100010BCC((uint64_t *)&unk_100485B60);
  __chkstk_darwin();
  v190  = (uint64_t)&v159 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_1004862B0);
  __chkstk_darwin();
  v197  = (char *)&v159 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  v199  = (char *)&v159 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v198  = (char *)&v159 - v12;
  sub_100010BCC((uint64_t *)&unk_1004852B0);
  __chkstk_darwin();
  v188  = (char *)&v159 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (int *)(type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0) - 8);
  __chkstk_darwin();
  uint64_t v16 = (char *)&v159 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_WORD *)uint64_t v16 = 0;
  v16[2]  = 1;
  uint64_t v17 = (uint64_t)&v16[v14[8]];
  v206  = v10;
  uint64_t v19 = *(void (**)(void))(v10 + 56);
  uint64_t v18 = v10 + 56;
  v186  = v19;
  v187  = v17;
  v189  = v9;
  v19();
  char v20 = (uint64_t *)&v16[v14[9]];
  *(_OWORD *)char v20 = xmmword_1003B4AC0;
  v207  = (uint64_t *)&v16[v14[10]];
  *(_OWORD *)v207  = xmmword_1003B4AC0;
  char v21 = &v16[v14[11]];
  v204  = v20;
  v205  = (uint64_t *)v21;
  *(_OWORD *)char v21 = xmmword_1003B4AC0;
  uint64_t v22 = (uint64_t)&v16[v14[12]];
  uint64_t v23 = type metadata accessor for UUID();
  uint64_t v24 = *(void *)(v23 - 8);
  v195  = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56);
  v196  = v22;
  v194  = v24 + 56;
  v195(v22, 1, 1, v23);
  v200  = v14[13];
  *(void *)&v16[v200]  = _swiftEmptyArrayStorage;
  uint64_t v25 = (uint64_t)&v16[v14[14]];
  uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v192  = v4 + 56;
  v193  = v3;
  v26(v25, 1, 1, v3);
  uint64_t v27 = v14[15];
  v209  = v16;
  char v28 = &v16[v27];
  *(void *)char v28 = 0;
  *((void *)v28 + 1)  = 0;
  *((void *)v28 + 2)  = 0;
  v28[24]  = 1;
  sub_1000369C4(v210, v210[3]);
  uint64_t v29 = v208;
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v29)
  {
    unint64_t v30 = v209;
LABEL_3:
    unint64_t v31 = v210;
    goto LABEL_5;
  }
  v178  = v28;
  v179  = v18;
  v180  = v26;
  v181  = v25;
  v182  = v23;
  sub_100010BCC(&qword_10047E2C0);
  sub_100039448((uint64_t)v218, v219);
  sub_10008B550();
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v32 = 0;
  uint64_t v34 = *(void *)(v215[0] + 16);
  v177  = v215[0];
  if (!v34)
  {
LABEL_83:
    swift_bridgeObjectRelease();
    sub_100010754((uint64_t)v218);
    unint64_t v30 = v209;
    sub_10021A510((uint64_t)v209, v185, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
    goto LABEL_3;
  }
  v165  = (void (**)(void *, void, uint64_t))(v184 + 104);
  v164  = enum case for DispatchTimeInterval.seconds(_:);
  v163  = (void (**)(char *, void *, uint64_t))(v184 + 32);
  uint64_t v35 = v207;
  v161  = (void (**)(char *, char *, uint64_t))(v206 + 32);
  uint64_t v36 = (unint64_t *)(v215[0] + 48);
  v162  = &type metadata for Any[8];
  while (1)
  {
    unint64_t v42 = *(v36 - 1);
    unint64_t v41 = *v36;
    switch(*((unsigned char *)v36 - 16))
    {
      case 0:
        v206  = v34;
        v208  = v32;
        unint64_t v43 = v41;
        uint64_t v44 = type metadata accessor for BinaryDecoder();
        uint64_t v45 = (void *)swift_allocObject();
        v45[5]  = &_swiftEmptyDictionarySingleton;
        v45[2]  = v42;
        v45[3]  = v43;
        BOOL v46 = v45;
        uint64_t v47 = 0;
        switch(v43 >> 62)
        {
          case 1uLL:
            uint64_t v47 = (int)v42;
            goto LABEL_46;
          case 2uLL:
            uint64_t v47 = *(void *)(v42 + 16);
LABEL_46:
            sub_100013D44(v42, v43);
            sub_100013D44(v42, v43);
            break;
          default:
            break;
        }
        v46[4]  = v47;
        swift_beginAccess();
        v46[5]  = &_swiftEmptyDictionarySingleton;
        sub_100013D44(v42, v43);
        swift_bridgeObjectRelease();
        v216  = (ValueMetadata *)v44;
        v217  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        v215[0]  = v46;
        swift_retain();
        v111  = v208;
        v112  = UInt8.init(from:)();
        uint64_t v32 = v111;
        swift_release();
        sub_10000C970(v42, v43);
        if (v111)
        {
          swift_bridgeObjectRelease();
          v156  = v42;
          v157  = v43;
          goto LABEL_95;
        }
        sub_10000C970(v42, v43);
        *v209  = v112;
        break;
      case 1:
        v206  = v34;
        v208  = v32;
        uint64_t v48 = v42;
        unint64_t v49 = v41;
        unsigned __int8 v50 = (ValueMetadata *)type metadata accessor for BinaryDecoder();
        unsigned __int8 v51 = (void *)swift_allocObject();
        v51[5]  = &_swiftEmptyDictionarySingleton;
        v183  = v48;
        v51[2]  = v48;
        v51[3]  = v49;
        char v52 = v51;
        uint64_t v53 = 0;
        switch(v49 >> 62)
        {
          case 1uLL:
            uint64_t v54 = v183;
            uint64_t v53 = (int)v183;
            goto LABEL_50;
          case 2uLL:
            uint64_t v54 = v183;
            uint64_t v53 = *(void *)(v183 + 16);
LABEL_50:
            sub_100013D44(v54, v49);
            sub_100013D44(v54, v49);
            break;
          default:
            break;
        }
        v52[4]  = v53;
        swift_beginAccess();
        v52[5]  = &_swiftEmptyDictionarySingleton;
        swift_bridgeObjectRelease();
        v216  = &type metadata for BinaryDecoder.UnkeyedContainer;
        v217  = sub_10008B64C();
        v215[0]  = v52;
        v113  = *(void *)sub_100039448((uint64_t)v215, (uint64_t)&type metadata for BinaryDecoder.UnkeyedContainer);
        v213  = v50;
        v214  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        v212[0]  = v113;
        swift_retain();
        v114  = v208;
        v115  = UInt8.init(from:)();
        uint64_t v32 = v114;
        sub_100010754((uint64_t)v215);
        if (v114)
        {
          swift_bridgeObjectRelease();
          v156  = v183;
LABEL_88:
          v157  = v49;
          goto LABEL_95;
        }
        sub_10000C970(v183, v49);
        v116  = v209;
        v209[1]  = v115;
        v116[2]  = 0;
        break;
      case 2:
        v208  = v32;
        v206  = v34;
        unint64_t v55 = v41 >> 62;
        unint64_t v56 = v41;
        sub_100013D44(v42, v41);
        sub_100013D44(v42, v56);
        unint64_t v57 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for BinaryDecoder();
        uint64_t v58 = (void *)swift_allocObject();
        v58[5]  = &_swiftEmptyDictionarySingleton;
        v58[2]  = v42;
        v58[3]  = v56;
        v183  = v56;
        uint64_t v59 = 0;
        uint64_t v60 = v42;
        switch(v55)
        {
          case 1uLL:
            uint64_t v59 = (int)v42;
            break;
          case 2uLL:
            uint64_t v59 = *(void *)(v42 + 16);
            break;
          default:
            break;
        }
        v58[4]  = v59;
        swift_beginAccess();
        v58[5]  = v57;
        swift_bridgeObjectRelease();
        v216  = &type metadata for BinaryDecoder.UnkeyedContainer;
        v217  = sub_10008B64C();
        v215[0]  = v58;
        v117  = sub_100039448((uint64_t)v215, (uint64_t)&type metadata for BinaryDecoder.UnkeyedContainer);
        v118  = *(void *)v117;
        v120  = *(void *)(*(void *)v117 + 24);
        v119  = *(void *)(*(void *)v117 + 32);
        v121  = *(void *)(*(void *)v117 + 16);
        v122  = v120 >> 62;
        switch(v120 >> 62)
        {
          case 1uLL:
            v123  = v121 >> 32;
            goto LABEL_68;
          case 2uLL:
            v123  = *(void *)(v121 + 24);
            goto LABEL_68;
          case 3uLL:
            if (!v119) {
              goto LABEL_90;
            }
            v143  = 0;
            goto LABEL_76;
          default:
            v123  = BYTE6(v120);
LABEL_68:
            if (v119 == v123)
            {
LABEL_90:
              sub_10000F000();
              swift_allocError();
              *(void *)v158  = 0;
              *(void *)(v158 + 8)  = 0;
              *(unsigned char *)(v158 + 16)  = 2;
              swift_willThrow();
              goto LABEL_92;
            }
            if (v122)
            {
              if (v122 == 1) {
                v143  = v121 >> 32;
              }
              else {
                v143  = *(void *)(v121 + 24);
              }
            }
            else
            {
              v143  = BYTE6(v120);
            }
LABEL_76:
            if (v143 < v119)
            {
              __break(1u);
LABEL_97:
              __break(1u);
LABEL_98:
              __break(1u);
LABEL_99:
              __break(1u);
LABEL_100:
              __break(1u);
LABEL_101:
              __break(1u);
            }
            swift_retain_n();
            v144  = Data._Representation.subscript.getter();
            v146  = 0;
            v147  = v198;
            switch((int)v122)
            {
              case 1:
                v146  = v121 >> 32;
                break;
              case 2:
                v146  = *(void *)(v121 + 24);
                break;
              case 3:
                break;
              default:
                v146  = BYTE6(v120);
                break;
            }
            *(void *)(v118 + 32)  = v146;
            v212[0]  = v144;
            v212[1]  = v145;
            v148  = v199;
            v149  = v208;
            P256.KeyAgreement.PublicKey.init<A>(rawRepresentation:)();
            if (!v149)
            {
              swift_release();
              v150  = *v161;
              v151  = v148;
              v152  = v189;
              (*v161)(v147, v151, v189);
              swift_release();
              v153  = (uint64_t)v188;
              v150(v188, v147, v152);
              ((void (*)(uint64_t, void, uint64_t, uint64_t))v186)(v153, 0, 1, v152);
              sub_100010754((uint64_t)v215);
              sub_10000C970(v42, v183);
              sub_10006D1A4(v153, v187, (uint64_t *)&unk_1004852B0);
              uint64_t v34 = v206;
              uint64_t v35 = v207;
              uint64_t v32 = 0;
              goto LABEL_9;
            }
            swift_release_n();
LABEL_92:
            sub_100010754((uint64_t)v215);
            swift_bridgeObjectRelease();
            v156  = v60;
LABEL_94:
            v157  = v183;
LABEL_95:
            sub_10000C970(v156, v157);
            sub_100010754((uint64_t)v218);
            unint64_t v30 = v209;
            unint64_t v31 = v210;
LABEL_5:
            sub_100010754((uint64_t)v31);
            return sub_10021A4B0((uint64_t)v30, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
        }
      case 3:
        uint64_t v61 = v204;
        uint64_t v62 = *v204;
        unint64_t v63 = v204[1];
        uint64_t v64 = *(v36 - 1);
        v183  = *v36;
        sub_100013D44(v64, v41);
        sub_10000C95C(v62, v63);
        uint64_t v65 = v183;
        *uint64_t v61 = v42;
        v61[1]  = v65;
        goto LABEL_9;
      case 4:
        uint64_t v66 = *v35;
        unint64_t v67 = v35[1];
        unint64_t v68 = *v36;
        sub_100013D44(*(v36 - 1), v41);
        sub_10000C95C(v66, v67);
        *uint64_t v35 = v42;
        v35[1]  = v68;
        goto LABEL_9;
      case 5:
        unint64_t v69 = *v36;
        uint64_t v70 = *v205;
        unint64_t v71 = v205[1];
        sub_100013D44(*(v36 - 1), v41);
        uint64_t v72 = v70;
        char v73 = (unint64_t *)v205;
        sub_10000C95C(v72, v71);
        *char v73 = v42;
        v73[1]  = v69;
        goto LABEL_9;
      case 6:
        unint64_t v74 = v41 >> 62;
        switch(v41 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(v42), v42)) {
              goto LABEL_97;
            }
            uint64_t v75 = HIDWORD(v42) - (int)v42;
LABEL_31:
            unint64_t v94 = *v36;
            sub_100013D44(*(v36 - 1), v41);
            sub_100013D44(v42, v94);
            unint64_t v41 = v94;
LABEL_32:
            if (v75 < 16)
            {
LABEL_84:
              v154  = v41;
              sub_10000F000();
              swift_allocError();
              *(void *)v155  = 0;
              *(void *)(v155 + 8)  = 0;
              *(unsigned char *)(v155 + 16)  = 2;
              swift_willThrow();
              swift_bridgeObjectRelease();
              sub_10000C970(v42, v154);
              v156  = v42;
              v157  = v154;
              goto LABEL_95;
            }
            v208  = v32;
            if (v74)
            {
              v159  = (uint64_t)&v159;
              v206  = v34;
              v183  = v42;
              if (v74 == 1)
              {
                uint64_t v95 = (int)v183;
                if ((int)v183 > v183 >> 32) {
                  goto LABEL_99;
                }
                unint64_t v96 = v41;
                sub_100013D44(v183, v41);
                uint64_t v97 = __DataStorage._bytes.getter();
                if (!v97) {
                  goto LABEL_104;
                }
                uint64_t v98 = v97;
                uint64_t v99 = __DataStorage._offset.getter();
                BOOL v100 = __OFSUB__(v95, v99);
                uint64_t v101 = v95 - v99;
                if (v100) {
                  goto LABEL_101;
                }
                __DataStorage._length.getter();
                v171  = *(unsigned __int8 *)(v98 + v101);
                v176  = *(unsigned __int8 *)(v98 + v101 + 1);
                v175  = *(unsigned __int8 *)(v98 + v101 + 2);
                v174  = *(unsigned __int8 *)(v98 + v101 + 3);
                v173  = *(unsigned __int8 *)(v98 + v101 + 4);
                v172  = *(unsigned __int8 *)(v98 + v101 + 5);
                v170  = *(unsigned __int8 *)(v98 + v101 + 6);
                v169  = *(unsigned __int8 *)(v98 + v101 + 7);
                v168  = *(unsigned __int8 *)(v98 + v101 + 8);
                v167  = *(unsigned __int8 *)(v98 + v101 + 11);
                v166  = *(unsigned __int8 *)(v98 + v101 + 12);
                v160  = *(unsigned __int8 *)(v98 + v101 + 14);
                uint64_t v102 = v183;
                sub_10000C970(v183, v96);
                unint64_t v41 = v96;
                unint64_t v42 = v102;
              }
              else
              {
                unint64_t v103 = v41;
                uint64_t v104 = *(void *)(v183 + 16);
                swift_retain();
                swift_retain();
                uint64_t v105 = __DataStorage._bytes.getter();
                if (!v105) {
                  goto LABEL_103;
                }
                uint64_t v106 = v105;
                uint64_t v107 = __DataStorage._offset.getter();
                BOOL v100 = __OFSUB__(v104, v107);
                uint64_t v108 = v104 - v107;
                if (v100) {
                  goto LABEL_100;
                }
                __DataStorage._length.getter();
                v171  = *(unsigned __int8 *)(v106 + v108);
                v176  = *(unsigned __int8 *)(v106 + v108 + 1);
                v175  = *(unsigned __int8 *)(v106 + v108 + 2);
                v174  = *(unsigned __int8 *)(v106 + v108 + 3);
                v173  = *(unsigned __int8 *)(v106 + v108 + 4);
                v172  = *(unsigned __int8 *)(v106 + v108 + 5);
                v170  = *(unsigned __int8 *)(v106 + v108 + 6);
                v169  = *(unsigned __int8 *)(v106 + v108 + 7);
                v168  = *(unsigned __int8 *)(v106 + v108 + 8);
                v167  = *(unsigned __int8 *)(v106 + v108 + 11);
                v166  = *(unsigned __int8 *)(v106 + v108 + 12);
                v160  = *(unsigned __int8 *)(v106 + v108 + 14);
                swift_release();
                unint64_t v42 = v183;
                swift_release();
                unint64_t v41 = v103;
              }
              uint64_t v34 = v206;
            }
            else
            {
              v175  = v42 >> 16;
              v176  = v42 >> 8;
              v173  = HIDWORD(v42);
              v174  = v42 >> 24;
              v172  = v42 >> 40;
              v169  = HIBYTE(v42);
              v170  = HIWORD(v42);
              v166  = HIDWORD(v41);
              v167  = v41 >> 24;
              v171  = v42;
              v168  = v41;
            }
            v109  = v41;
            sub_10000C970(v42, v41);
            v110  = (uint64_t)v197;
            UUID.init(uuid:)();
            sub_10000C970(v42, v109);
            v195(v110, 0, 1, v182);
            sub_10006D1A4(v110, v196, &qword_1004862B0);
            uint64_t v35 = v207;
            uint64_t v32 = v208;
            break;
          case 2uLL:
            uint64_t v93 = *(void *)(v42 + 16);
            uint64_t v92 = *(void *)(v42 + 24);
            uint64_t v75 = v92 - v93;
            if (!__OFSUB__(v92, v93)) {
              goto LABEL_31;
            }
            goto LABEL_98;
          case 3uLL:
            goto LABEL_84;
          default:
            uint64_t v75 = BYTE6(v41);
            goto LABEL_32;
        }
        goto LABEL_9;
      case 7:
        v206  = v34;
        unint64_t v76 = v41 >> 62;
        unint64_t v77 = v41;
        sub_100013D44(v42, v41);
        sub_100013D44(v42, v77);
        sub_100013D44(v42, v77);
        unint64_t v78 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for BinaryDecoder();
        char v79 = (void *)swift_allocObject();
        v79[5]  = &_swiftEmptyDictionarySingleton;
        v79[2]  = v42;
        v79[3]  = v77;
        uint64_t v80 = 0;
        uint64_t v81 = v42;
        unint64_t v49 = v77;
        switch(v76)
        {
          case 1uLL:
            uint64_t v80 = (int)v81;
            break;
          case 2uLL:
            uint64_t v80 = *(void *)(v81 + 16);
            break;
          default:
            break;
        }
        v79[4]  = v80;
        swift_beginAccess();
        v79[5]  = v78;
        swift_bridgeObjectRelease();
        v124  = sub_100010BCC(&qword_1004829A0);
        v125  = swift_conformsToProtocol2();
        if (!v125)
        {
          __break(1u);
LABEL_103:
          __DataStorage._length.getter();
          __break(1u);
LABEL_104:
          __DataStorage._length.getter();
          __break(1u);
          JUMPOUT(0x1001FC914);
        }
        (*(void (**)(void *__return_ptr, void *, uint64_t, uint64_t))(v125 + 8))(v215, v79, v124, v125);
        if (v32)
        {
          swift_release();
          sub_10000C970(v81, v77);
          swift_bridgeObjectRelease();
          v156  = v81;
          goto LABEL_88;
        }
        swift_dynamicCast();
        v126  = v212[0];
        swift_release();
        sub_10000C970(v81, v77);
        sub_10000C970(v81, v77);
        v127  = v200;
        v128  = v209;
        swift_bridgeObjectRelease();
        *(void *)&v128[v127]  = v126;
        break;
      case 8:
        v208  = v32;
        v206  = v34;
        unint64_t v82 = v41 >> 62;
        unint64_t v83 = v41;
        sub_100013D44(v42, v41);
        sub_100013D44(v42, v83);
        unint64_t v84 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for BinaryDecoder();
        uint64_t v85 = (void *)swift_allocObject();
        v85[5]  = &_swiftEmptyDictionarySingleton;
        v85[2]  = v42;
        v85[3]  = v83;
        v183  = v83;
        uint64_t v86 = 0;
        uint64_t v60 = v42;
        switch(v82)
        {
          case 1uLL:
            uint64_t v86 = (int)v42;
            break;
          case 2uLL:
            uint64_t v86 = *(void *)(v42 + 16);
            break;
          default:
            break;
        }
        v85[4]  = v86;
        swift_beginAccess();
        v85[5]  = v84;
        swift_bridgeObjectRelease();
        v216  = &type metadata for BinaryDecoder.UnkeyedContainer;
        v129  = sub_10008B64C();
        v217  = v129;
        v215[0]  = v85;
        v130  = *(void *)sub_100039448((uint64_t)v215, (uint64_t)&type metadata for BinaryDecoder.UnkeyedContainer);
        v213  = &type metadata for BinaryDecoder.UnkeyedContainer;
        v214  = v129;
        v212[0]  = v130;
        sub_100039448((uint64_t)v212, (uint64_t)&type metadata for BinaryDecoder.UnkeyedContainer);
        swift_retain_n();
        v131  = v208;
        v132  = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
        if (v131)
        {
          sub_100010754((uint64_t)v212);
          swift_release();
          goto LABEL_92;
        }
        v134  = v202;
        v133  = v203;
        *v202  = v132;
        (*v165)(v134, v164, v133);
        v135  = (uint64_t)v201;
        (*v163)(v201, v134, v133);
        sub_100039448((uint64_t)v212, (uint64_t)v213);
        sub_1001CCA48();
        dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
        uint64_t v32 = 0;
        uint64_t v37 = v193;
        *(unsigned char *)(v135 + *(int *)(v193 + 20))  = v211;
        sub_100010754((uint64_t)v212);
        uint64_t v38 = v191;
        sub_10021A510(v135, v191, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
        swift_release();
        sub_10021A4B0(v135, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
        uint64_t v39 = v38;
        uint64_t v40 = v190;
        sub_10021A578(v39, v190, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
        v180(v40, 0, 1, v37);
        sub_100010754((uint64_t)v215);
        sub_10000C970(v60, v183);
        sub_10006D1A4(v40, v181, (uint64_t *)&unk_100485B60);
        break;
      case 9:
        v208  = v32;
        unint64_t v87 = v41 >> 62;
        unint64_t v88 = v41;
        sub_100013D44(v42, v41);
        sub_100013D44(v42, v88);
        unint64_t v89 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for BinaryDecoder();
        uint64_t v90 = (void *)swift_allocObject();
        v90[5]  = &_swiftEmptyDictionarySingleton;
        v90[2]  = v42;
        v90[3]  = v88;
        v183  = v88;
        uint64_t v91 = 0;
        switch(v87)
        {
          case 1uLL:
            uint64_t v91 = (int)v42;
            break;
          case 2uLL:
            uint64_t v91 = *(void *)(v42 + 16);
            break;
          default:
            break;
        }
        v90[4]  = v91;
        swift_beginAccess();
        v90[5]  = v89;
        swift_bridgeObjectRelease();
        v216  = &type metadata for BinaryDecoder.UnkeyedContainer;
        v136  = sub_10008B64C();
        v217  = v136;
        v215[0]  = v90;
        v137  = *(void *)sub_100039448((uint64_t)v215, (uint64_t)&type metadata for BinaryDecoder.UnkeyedContainer);
        v213  = &type metadata for BinaryDecoder.UnkeyedContainer;
        v214  = v136;
        v212[0]  = v137;
        sub_100039448((uint64_t)v212, (uint64_t)&type metadata for BinaryDecoder.UnkeyedContainer);
        swift_retain_n();
        v138  = v208;
        UnkeyedDecodingContainer.inferredDecode<A>()();
        if (v138)
        {
          sub_100010754((uint64_t)v212);
          swift_release();
          sub_100010754((uint64_t)v215);
          swift_bridgeObjectRelease();
          v156  = v42;
          goto LABEL_94;
        }
        v208  = v137;
        v206  = v211;
        sub_100039448((uint64_t)v212, (uint64_t)v213);
        UnkeyedDecodingContainer.inferredDecode<A>()();
        v139  = v34;
        v140  = v211;
        sub_100039448((uint64_t)v212, (uint64_t)v213);
        UnkeyedDecodingContainer.inferredDecode<A>()();
        v141  = v211;
        sub_100010754((uint64_t)v212);
        swift_release();
        sub_100010754((uint64_t)v215);
        sub_10000C970(v42, v183);
        v142  = v178;
        uint64_t v35 = v207;
        *(void *)v178  = v206;
        *((void *)v142 + 1)  = v140;
        *((void *)v142 + 2)  = v141;
        v142[24]  = 0;
        uint64_t v34 = v139;
        uint64_t v32 = 0;
        goto LABEL_9;
      default:
        goto LABEL_9;
    }
    uint64_t v34 = v206;
    uint64_t v35 = v207;
LABEL_9:
    v36 += 3;
    if (!--v34) {
      goto LABEL_83;
    }
  }
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.encode(to:)(void *a1)
{
  uint64_t v3 = v2;
  unint64_t v4 = v1;
  sub_100010BCC((uint64_t *)&unk_100485B60);
  __chkstk_darwin();
  uint64_t v106 = (uint64_t)&v104 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v108 = type metadata accessor for NANInternetSharingStatistics.Requester();
  uint64_t v105 = *(void *)(v108 - 8);
  __chkstk_darwin();
  uint64_t v107 = (uint64_t)&v104 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_1004862B0);
  __chkstk_darwin();
  v111  = (uint64_t)&v104 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  v113  = *(void *)(v9 - 8);
  __chkstk_darwin();
  v109  = (char *)&v104 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v110  = (char *)&v104 - v11;
  sub_100010BCC((uint64_t *)&unk_1004852B0);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v104 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for P256.KeyAgreement.PublicKey();
  v117  = *(int **)(v14 - 8);
  __chkstk_darwin();
  v115  = (char *)&v104 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  int v16 = *(unsigned __int8 *)v4;
  v116  = v4;
  v112  = v9;
  if (v16)
  {
    sub_100010BCC(&qword_10047BEF8);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16)  = xmmword_1003B2450;
    *(unsigned char *)(v17 + 32)  = v16;
    uint64_t v18 = sub_1001265EC(v17);
    unint64_t v20 = v19;
    swift_bridgeObjectRelease();
    switch(v20 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v18), v18))
        {
          __break(1u);
LABEL_105:
          __break(1u);
LABEL_106:
          uint64_t v102 = *(void *)(v3 + 16);
          uint64_t v101 = *(void *)(v3 + 24);
          uint64_t v100 = v101 - v102;
          if (!__OFSUB__(v101, v102)) {
            goto LABEL_107;
          }
          goto LABEL_132;
        }
        uint64_t v21 = HIDWORD(v18) - (int)v18;
LABEL_6:
        sub_100013D44(v18, v20);
        if (v21 >= 0xFFFF) {
          goto LABEL_17;
        }
LABEL_7:
        v114  = v14;
        LOBYTE(v121)  = 0;
        v122  = v18;
        v123  = v20;
        swift_beginAccess();
        sub_100039448((uint64_t)v126, v127);
        sub_100010BCC(&qword_10047E2D8);
        sub_10000F9CC(&qword_100482758, &qword_10047E2D8);
        dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
        uint64_t v3 = v2;
        if (v2)
        {
LABEL_16:
          swift_endAccess();
LABEL_18:
          sub_10000C970(v18, v20);
          sub_10000C970(v18, v20);
          return sub_100010754((uint64_t)v126);
        }
        swift_endAccess();
        sub_10000C970(v18, v20);
        sub_10000C970(v18, v20);
        unint64_t v4 = v116;
        uint64_t v14 = v114;
        break;
      case 2uLL:
        uint64_t v23 = *(void *)(v18 + 16);
        uint64_t v22 = *(void *)(v18 + 24);
        uint64_t v21 = v22 - v23;
        if (!__OFSUB__(v22, v23)) {
          goto LABEL_6;
        }
        goto LABEL_105;
      default:
        goto LABEL_7;
    }
  }
  if ((*(unsigned char *)(v4 + 2) & 1) == 0)
  {
    char v24 = *(unsigned char *)(v4 + 1);
    sub_100010BCC(&qword_10047BEF8);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16)  = xmmword_1003B2450;
    *(unsigned char *)(v25 + 32)  = v24;
    uint64_t v18 = sub_1001265EC(v25);
    unint64_t v20 = v26;
    swift_bridgeObjectRelease();
    switch(v20 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v18), v18))
        {
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
          goto LABEL_123;
        }
        uint64_t v27 = HIDWORD(v18) - (int)v18;
LABEL_14:
        sub_100013D44(v18, v20);
        if (v27 >= 0xFFFF)
        {
LABEL_17:
          sub_10000F000();
          swift_allocError();
          *(void *)uint64_t v30 = 0;
          *(void *)(v30 + 8)  = 0;
          *(unsigned char *)(v30 + 16)  = 2;
          swift_willThrow();
          goto LABEL_18;
        }
LABEL_15:
        v114  = v14;
        LOBYTE(v121)  = 1;
        v122  = v18;
        v123  = v20;
        swift_beginAccess();
        sub_100039448((uint64_t)v126, v127);
        sub_100010BCC(&qword_10047E2D8);
        sub_10000F9CC(&qword_100482758, &qword_10047E2D8);
        dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
        if (v3) {
          goto LABEL_16;
        }
        swift_endAccess();
        sub_10000C970(v18, v20);
        sub_10000C970(v18, v20);
        unint64_t v4 = v116;
        uint64_t v14 = v114;
        break;
      case 2uLL:
        uint64_t v29 = *(void *)(v18 + 16);
        uint64_t v28 = *(void *)(v18 + 24);
        uint64_t v27 = v28 - v29;
        if (!__OFSUB__(v28, v29)) {
          goto LABEL_14;
        }
        goto LABEL_114;
      default:
        goto LABEL_15;
    }
  }
  unint64_t v31 = v117;
  uint64_t v32 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  sub_1000136F4(v4 + v32[6], (uint64_t)v13, (uint64_t *)&unk_1004852B0);
  if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v31 + 6))(v13, 1, v14) == 1)
  {
    sub_1000380B4((uint64_t)v13, (uint64_t *)&unk_1004852B0);
    goto LABEL_30;
  }
  (*((void (**)(char *, char *, uint64_t))v31 + 4))(v115, v13, v14);
  uint64_t v33 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  uint64_t v35 = v33;
  unint64_t v36 = v34;
  switch(v34 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v33), v33)) {
        goto LABEL_115;
      }
      uint64_t v37 = HIDWORD(v33) - (int)v33;
LABEL_26:
      sub_100013D44(v33, v34);
      if (v37 >= 0xFFFF)
      {
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v44 = 0;
        *(void *)(v44 + 8)  = 0;
        *(unsigned char *)(v44 + 16)  = 2;
        swift_willThrow();
        sub_10000C970(v35, v36);
        goto LABEL_35;
      }
LABEL_27:
      v114  = v14;
      LOBYTE(v121)  = 2;
      v122  = v35;
      v123  = v36;
      swift_beginAccess();
      sub_100039448((uint64_t)v126, v127);
      sub_100010BCC(&qword_10047E2D8);
      sub_10000F9CC(&qword_100482758, &qword_10047E2D8);
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      if (v3)
      {
        swift_endAccess();
        sub_10000C970(v35, v36);
        uint64_t v14 = v114;
LABEL_35:
        (*((void (**)(char *, uint64_t))v117 + 1))(v115, v14);
        sub_10000C970(v35, v36);
        return sub_100010754((uint64_t)v126);
      }
      swift_endAccess();
      sub_10000C970(v35, v36);
      (*((void (**)(char *, uint64_t))v117 + 1))(v115, v114);
      sub_10000C970(v35, v36);
      unint64_t v4 = v116;
LABEL_30:
      uint64_t v40 = (uint64_t *)(v4 + v32[7]);
      unint64_t v41 = v40[1];
      if (v41 >> 60 == 15) {
        goto LABEL_40;
      }
      uint64_t v42 = *v40;
      switch(v41 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v42), v42)) {
            goto LABEL_117;
          }
          uint64_t v43 = HIDWORD(v42) - (int)v42;
LABEL_37:
          sub_100038004(v42, v41);
          sub_100013D44(v42, v41);
          if (v43 >= 0xFFFF)
          {
LABEL_56:
            sub_10000F000();
            swift_allocError();
            *(void *)uint64_t v55 = 0;
            *(void *)(v55 + 8)  = 0;
            *(unsigned char *)(v55 + 16)  = 2;
            swift_willThrow();
            goto LABEL_57;
          }
LABEL_38:
          LOBYTE(v121)  = 3;
          v122  = v42;
          v123  = v41;
          swift_beginAccess();
          sub_100039448((uint64_t)v126, v127);
          sub_100010BCC(&qword_10047E2D8);
          sub_10000F9CC(&qword_100482758, &qword_10047E2D8);
          dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
          if (v3)
          {
LABEL_55:
            swift_endAccess();
LABEL_57:
            sub_10000C95C(v42, v41);
            sub_10000C95C(v42, v41);
            return sub_100010754((uint64_t)v126);
          }
          swift_endAccess();
          sub_10000C95C(v42, v41);
          sub_10000C95C(v42, v41);
          unint64_t v4 = v116;
LABEL_40:
          uint64_t v47 = (uint64_t *)(v4 + v32[8]);
          unint64_t v41 = v47[1];
          if (v41 >> 60 != 15)
          {
            uint64_t v42 = *v47;
            switch(v41 >> 62)
            {
              case 1uLL:
                if (__OFSUB__(HIDWORD(v42), v42)) {
                  goto LABEL_119;
                }
                uint64_t v48 = HIDWORD(v42) - (int)v42;
LABEL_45:
                sub_100038004(v42, v41);
                sub_100013D44(v42, v41);
                if (v48 >= 0xFFFF) {
                  goto LABEL_56;
                }
LABEL_46:
                LOBYTE(v121)  = 4;
                v122  = v42;
                v123  = v41;
                swift_beginAccess();
                sub_100039448((uint64_t)v126, v127);
                sub_100010BCC(&qword_10047E2D8);
                sub_10000F9CC(&qword_100482758, &qword_10047E2D8);
                dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
                if (v3) {
                  goto LABEL_55;
                }
                swift_endAccess();
                sub_10000C95C(v42, v41);
                sub_10000C95C(v42, v41);
                unint64_t v4 = v116;
                break;
              case 2uLL:
                uint64_t v50 = *(void *)(v42 + 16);
                uint64_t v49 = *(void *)(v42 + 24);
                uint64_t v48 = v49 - v50;
                if (!__OFSUB__(v49, v50)) {
                  goto LABEL_45;
                }
                goto LABEL_120;
              default:
                goto LABEL_46;
            }
          }
          unsigned __int8 v51 = (uint64_t *)(v4 + v32[9]);
          unint64_t v41 = v51[1];
          if (v41 >> 60 != 15)
          {
            uint64_t v42 = *v51;
            switch(v41 >> 62)
            {
              case 1uLL:
                if (__OFSUB__(HIDWORD(v42), v42)) {
                  goto LABEL_121;
                }
                uint64_t v52 = HIDWORD(v42) - (int)v42;
LABEL_53:
                sub_100038004(v42, v41);
                sub_100013D44(v42, v41);
                if (v52 >= 0xFFFF) {
                  goto LABEL_56;
                }
LABEL_54:
                LOBYTE(v121)  = 5;
                v122  = v42;
                v123  = v41;
                swift_beginAccess();
                sub_100039448((uint64_t)v126, v127);
                sub_100010BCC(&qword_10047E2D8);
                sub_10000F9CC(&qword_100482758, &qword_10047E2D8);
                dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
                if (v3) {
                  goto LABEL_55;
                }
                swift_endAccess();
                sub_10000C95C(v42, v41);
                sub_10000C95C(v42, v41);
                unint64_t v4 = v116;
                break;
              case 2uLL:
                uint64_t v54 = *(void *)(v42 + 16);
                uint64_t v53 = *(void *)(v42 + 24);
                uint64_t v52 = v53 - v54;
                if (!__OFSUB__(v53, v54)) {
                  goto LABEL_53;
                }
                goto LABEL_122;
              default:
                goto LABEL_54;
            }
          }
          uint64_t v57 = v111;
          sub_1000136F4(v4 + v32[10], v111, &qword_1004862B0);
          uint64_t v58 = v113;
          uint64_t v59 = v112;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v113 + 48))(v57, 1, v112) != 1)
          {
            uint64_t v61 = v110;
            (*(void (**)(char *, uint64_t, uint64_t))(v58 + 32))(v110, v57, v59);
            uint64_t v62 = v109;
            (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v109, v61, v59);
            v121  = UUID.uuid.getter();
            LOWORD(v122)  = v63;
            BYTE2(v122)  = v64;
            BYTE3(v122)  = v65;
            BYTE4(v122)  = v66;
            BYTE5(v122)  = v67;
            BYTE6(v122)  = v68;
            HIBYTE(v122)  = v69;
            uint64_t v70 = sub_10011A3BC((uint64_t)&v121, (uint64_t)&v123);
            uint64_t v71 = v58;
            uint64_t v72 = v70;
            unint64_t v74 = v73;
            uint64_t v75 = *(void (**)(char *, uint64_t))(v71 + 8);
            v113  = v71 + 8;
            v75(v62, v59);
            switch(v74 >> 62)
            {
              case 1uLL:
                if (__OFSUB__(HIDWORD(v72), v72)) {
                  goto LABEL_125;
                }
                uint64_t v76 = HIDWORD(v72) - (int)v72;
LABEL_66:
                sub_100013D44(v72, v74);
                if (v76 >= 0xFFFF)
                {
                  sub_10000F000();
                  swift_allocError();
                  *(void *)uint64_t v83 = 0;
                  *(void *)(v83 + 8)  = 0;
                  *(unsigned char *)(v83 + 16)  = 2;
                  swift_willThrow();
                }
                else
                {
LABEL_67:
                  v117  = v32;
                  LOBYTE(v121)  = 6;
                  v122  = v72;
                  v123  = v74;
                  swift_beginAccess();
                  sub_100039448((uint64_t)v126, v127);
                  sub_100010BCC(&qword_10047E2D8);
                  sub_10000F9CC(&qword_100482758, &qword_10047E2D8);
                  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
                  if (!v3)
                  {
                    uint64_t v60 = 0;
                    swift_endAccess();
                    sub_10000C970(v72, v74);
                    v75(v110, v112);
                    sub_10000C970(v72, v74);
                    unint64_t v4 = v116;
                    goto LABEL_70;
                  }
                  swift_endAccess();
                }
                sub_10000C970(v72, v74);
                v75(v110, v112);
LABEL_93:
                sub_10000C970(v72, v74);
                return sub_100010754((uint64_t)v126);
              case 2uLL:
                uint64_t v78 = *(void *)(v72 + 16);
                uint64_t v77 = *(void *)(v72 + 24);
                uint64_t v76 = v77 - v78;
                if (!__OFSUB__(v77, v78)) {
                  goto LABEL_66;
                }
                goto LABEL_126;
              default:
                goto LABEL_67;
            }
          }
          v117  = v32;
          uint64_t v60 = v3;
          sub_1000380B4(v57, &qword_1004862B0);
LABEL_70:
          if (!*(void *)(*(void *)(v4 + v117[11]) + 16)) {
            goto LABEL_81;
          }
          swift_bridgeObjectRetain();
          unint64_t v79 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
          uint64_t v80 = (ValueMetadata *)type metadata accessor for BinaryEncoder();
          uint64_t v81 = swift_allocObject();
          *(_OWORD *)(v81 + 16)  = xmmword_1003B2440;
          *(void *)(v81 + 32)  = v79;
          v124  = v80;
          v125  = sub_10021A5E0((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
          v121  = v81;
          sub_10021A628();
          swift_bridgeObjectRetain();
          swift_retain();
          Array<A>.encode(to:)();
          if (v60)
          {
            sub_100010754((uint64_t)&v121);
            swift_release();
            swift_bridgeObjectRelease_n();
            return sub_100010754((uint64_t)v126);
          }
          sub_100010754((uint64_t)&v121);
          swift_bridgeObjectRelease();
          swift_beginAccess();
          uint64_t v72 = *(void *)(v81 + 16);
          unint64_t v74 = *(void *)(v81 + 24);
          sub_100013D44(v72, v74);
          swift_bridgeObjectRelease();
          swift_release();
          switch(v74 >> 62)
          {
            case 1uLL:
              if (__OFSUB__(HIDWORD(v72), v72)) {
                goto LABEL_127;
              }
              uint64_t v82 = HIDWORD(v72) - (int)v72;
LABEL_79:
              sub_100013D44(v72, v74);
              if (v82 >= 0xFFFF)
              {
                sub_10000F000();
                swift_allocError();
                *(void *)uint64_t v93 = 0;
                *(void *)(v93 + 8)  = 0;
                *(unsigned char *)(v93 + 16)  = 2;
                swift_willThrow();
                sub_10000C970(v72, v74);
                goto LABEL_93;
              }
LABEL_80:
              LOBYTE(v121)  = 7;
              v122  = v72;
              v123  = v74;
              swift_beginAccess();
              sub_100039448((uint64_t)v126, v127);
              sub_100010BCC(&qword_10047E2D8);
              sub_10000F9CC(&qword_100482758, &qword_10047E2D8);
              dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
              uint64_t v60 = 0;
              swift_endAccess();
              sub_10000C970(v72, v74);
              sub_10000C970(v72, v74);
              unint64_t v4 = v116;
LABEL_81:
              uint64_t v86 = v106;
              sub_1000136F4(v4 + v117[12], v106, (uint64_t *)&unk_100485B60);
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v105 + 48))(v86, 1, v108) != 1)
              {
                sub_10021A578(v86, v107, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
                unint64_t v90 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
                type metadata accessor for BinaryEncoder();
                uint64_t v91 = swift_allocObject();
                *(_OWORD *)(v91 + 16)  = xmmword_1003B2440;
                *(void *)(v91 + 32)  = v90;
                v124  = &type metadata for BinaryEncoder.UnkeyedContainer;
                v125  = sub_100088B84();
                v121  = v91;
                swift_retain();
                uint64_t v92 = DispatchTimeInterval.rawSeconds.getter();
                if (v92 >= (uint64_t)0xFFFFFFFF80000000)
                {
                  if (v92 <= 0x7FFFFFFF)
                  {
                    sub_100039448((uint64_t)&v121, (uint64_t)v124);
                    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
                    if (v60)
                    {
                      sub_100010754((uint64_t)&v121);
                      swift_release();
                      sub_10021A4B0(v107, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
                      return sub_100010754((uint64_t)v126);
                    }
                    sub_100039448((uint64_t)&v121, (uint64_t)v124);
                    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
                    sub_100010754((uint64_t)&v121);
                    swift_beginAccess();
                    uint64_t v94 = *(void *)(v91 + 16);
                    unint64_t v95 = *(void *)(v91 + 24);
                    sub_100013D44(v94, v95);
                    swift_release();
                    switch(v95 >> 62)
                    {
                      case 1uLL:
                        if (!__OFSUB__(HIDWORD(v94), v94))
                        {
                          uint64_t v96 = HIDWORD(v94) - (int)v94;
LABEL_98:
                          sub_100013D44(v94, v95);
                          if (v96 >= 0xFFFF)
                          {
                            sub_10000F000();
                            swift_allocError();
                            *(void *)uint64_t v99 = 0;
                            *(void *)(v99 + 8)  = 0;
                            *(unsigned char *)(v99 + 16)  = 2;
                            swift_willThrow();
                            sub_10000C970(v94, v95);
                            sub_10021A4B0(v107, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
                            sub_10000C970(v94, v95);
                            return sub_100010754((uint64_t)v126);
                          }
LABEL_99:
                          LOBYTE(v121)  = 8;
                          v122  = v94;
                          v123  = v95;
                          swift_beginAccess();
                          sub_100039448((uint64_t)v126, v127);
                          sub_100010BCC(&qword_10047E2D8);
                          sub_10000F9CC(&qword_100482758, &qword_10047E2D8);
                          dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
                          uint64_t v87 = 0;
                          swift_endAccess();
                          sub_10000C970(v94, v95);
                          sub_10021A4B0(v107, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
                          sub_10000C970(v94, v95);
                          unint64_t v4 = v116;
                          goto LABEL_83;
                        }
                        __break(1u);
LABEL_130:
                        __break(1u);
LABEL_131:
                        __break(1u);
                        break;
                      case 2uLL:
                        uint64_t v98 = *(void *)(v94 + 16);
                        uint64_t v97 = *(void *)(v94 + 24);
                        uint64_t v96 = v97 - v98;
                        if (!__OFSUB__(v97, v98)) {
                          goto LABEL_98;
                        }
                        goto LABEL_130;
                      default:
                        goto LABEL_99;
                    }
LABEL_132:
                    __break(1u);
                    JUMPOUT(0x1001FE3F4);
                  }
LABEL_124:
                  __break(1u);
LABEL_125:
                  __break(1u);
LABEL_126:
                  __break(1u);
LABEL_127:
                  __break(1u);
LABEL_128:
                  __break(1u);
                }
LABEL_123:
                __break(1u);
                goto LABEL_124;
              }
              sub_1000380B4(v86, (uint64_t *)&unk_100485B60);
              uint64_t v87 = v60;
LABEL_83:
              if (*(unsigned char *)(v4 + v117[13] + 24)) {
                return sub_100010754((uint64_t)v126);
              }
              unint64_t v88 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
              type metadata accessor for BinaryEncoder();
              uint64_t v89 = swift_allocObject();
              *(_OWORD *)(v89 + 16)  = xmmword_1003B2440;
              *(void *)(v89 + 32)  = v88;
              v124  = &type metadata for BinaryEncoder.UnkeyedContainer;
              v125  = sub_100088B84();
              v121  = v89;
              sub_100039448((uint64_t)&v121, (uint64_t)&type metadata for BinaryEncoder.UnkeyedContainer);
              swift_retain();
              dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
              if (v87)
              {
                sub_100010754((uint64_t)&v121);
                swift_release();
                return sub_100010754((uint64_t)v126);
              }
              sub_100039448((uint64_t)&v121, (uint64_t)v124);
              dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
              sub_100039448((uint64_t)&v121, (uint64_t)v124);
              dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
              unint64_t v20 = 0;
              sub_100010754((uint64_t)&v121);
              swift_beginAccess();
              uint64_t v3 = *(void *)(v89 + 16);
              unint64_t v4 = *(void *)(v89 + 24);
              sub_100013D44(v3, v4);
              swift_release();
              switch(v4 >> 62)
              {
                case 1uLL:
                  if (__OFSUB__(HIDWORD(v3), v3)) {
                    goto LABEL_131;
                  }
                  uint64_t v100 = HIDWORD(v3) - (int)v3;
                  break;
                case 2uLL:
                  goto LABEL_106;
                default:
                  goto LABEL_108;
              }
LABEL_107:
              sub_100013D44(v3, v4);
              if (v100 >= 0xFFFF)
              {
                sub_10000F000();
                swift_allocError();
                *(void *)uint64_t v103 = 0;
                *(void *)(v103 + 8)  = 0;
                *(unsigned char *)(v103 + 16)  = 2;
                swift_willThrow();
              }
              else
              {
LABEL_108:
                v118  = 9;
                v119  = v3;
                v120  = v4;
                swift_beginAccess();
                sub_100039448((uint64_t)v126, v127);
                sub_100010BCC(&qword_10047E2D8);
                sub_10000F9CC(&qword_100482758, &qword_10047E2D8);
                dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
                if (!v20)
                {
                  swift_endAccess();
                  sub_10000C970(v3, v4);
                  sub_10000C970(v3, v4);
                  return sub_100010754((uint64_t)v126);
                }
                swift_endAccess();
              }
              sub_10000C970(v3, v4);
              sub_10000C970(v3, v4);
              return sub_100010754((uint64_t)v126);
            case 2uLL:
              uint64_t v85 = *(void *)(v72 + 16);
              uint64_t v84 = *(void *)(v72 + 24);
              uint64_t v82 = v84 - v85;
              if (!__OFSUB__(v84, v85)) {
                goto LABEL_79;
              }
              goto LABEL_128;
            default:
              goto LABEL_80;
          }
        case 2uLL:
          uint64_t v46 = *(void *)(v42 + 16);
          uint64_t v45 = *(void *)(v42 + 24);
          uint64_t v43 = v45 - v46;
          if (!__OFSUB__(v45, v46)) {
            goto LABEL_37;
          }
          goto LABEL_118;
        default:
          goto LABEL_38;
      }
    case 2uLL:
      uint64_t v39 = *(void *)(v33 + 16);
      uint64_t v38 = *(void *)(v33 + 24);
      uint64_t v37 = v38 - v39;
      if (!__OFSUB__(v38, v39)) {
        goto LABEL_26;
      }
      goto LABEL_116;
    default:
      goto LABEL_27;
  }
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v98 = a1;
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v95 = *(void *)(v3 - 8);
  uint64_t v96 = v3;
  __chkstk_darwin();
  uint64_t v97 = (char *)&v84 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100480650);
  __chkstk_darwin();
  uint64_t v94 = (char *)&v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for NANInternetSharingStatistics.Requester();
  uint64_t v91 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v85 = (uint64_t)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100485B60);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v89 - 8);
  __chkstk_darwin();
  uint64_t v84 = (char *)&v84 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_1004862B0);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_1004852B0);
  __chkstk_darwin();
  uint64_t v15 = (char *)&v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v16 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  uint64_t v93 = (uint64_t)&v84 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10021A510((uint64_t)v2, v93, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  v114  = xmmword_1003B2F40;
  if (*v2)
  {
    LODWORD(v117)  = *v2;
    uint64_t v18 = &type metadata for NANAttribute.CustomDeviceInformation.Flags;
    unint64_t v19 = 0xE500000000000000;
    uint64_t v20 = 0x7367616C66;
  }
  else
  {
    uint64_t v20 = 0;
    unint64_t v19 = 0;
    uint64_t v18 = 0;
    v117  = 0;
    v118  = 0;
    v119  = 0;
  }
  v115  = v20;
  v116  = v19;
  v120  = v18;
  unsigned __int8 v21 = v2[2];
  uint64_t v92 = v6;
  unint64_t v90 = v9;
  uint64_t v87 = v13;
  if (v21)
  {
    unint64_t v22 = 0;
    unint64_t v23 = 0;
    char v24 = 0;
    v123  = 0;
    v124  = 0;
    v125  = 0;
  }
  else
  {
    LOBYTE(v123)  = v2[1];
    unint64_t v23 = 0x80000001003DE680;
    char v24 = &type metadata for UInt8;
    unint64_t v22 = 0xD000000000000013;
  }
  uint64_t v88 = v10;
  v121  = v22;
  v122  = v23;
  v126  = v24;
  v127  = 0x7974697275636573;
  v128  = 0xE800000000000000;
  long long v105 = xmmword_1003B7330;
  sub_1000136F4((uint64_t)&v2[v16[6]], (uint64_t)v15, (uint64_t *)&unk_1004852B0);
  uint64_t v25 = type metadata accessor for P256.KeyAgreement.PublicKey();
  int v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v15, 1, v25);
  uint64_t v27 = 0;
  unint64_t v28 = 0;
  if (v26 != 1)
  {
    sub_1000380B4((uint64_t)v15, (uint64_t *)&unk_1004852B0);
    unint64_t v28 = 0xEE0079654B204557;
    uint64_t v27 = 0x4F2063696C627550;
  }
  uint64_t v106 = v27;
  unint64_t v107 = v28;
  uint64_t v29 = v2;
  unint64_t v30 = *(void *)&v2[v16[7] + 8] >> 60;
  if (v30 == 15) {
    unint64_t v31 = 0;
  }
  else {
    unint64_t v31 = 0xD000000000000014;
  }
  unint64_t v86 = (unint64_t)"Encrypted Signature";
  unint64_t v32 = 0x80000001003DE660;
  if (v30 > 0xE) {
    unint64_t v32 = 0;
  }
  unint64_t v108 = v31;
  v109  = v32;
  unint64_t v33 = *(void *)&v2[v16[8] + 8] >> 60;
  if (v33 == 15) {
    unint64_t v34 = 0;
  }
  else {
    unint64_t v34 = 0xD000000000000013;
  }
  if (v33 <= 0xE) {
    unint64_t v35 = 0x80000001003DE640;
  }
  else {
    unint64_t v35 = 0;
  }
  v110  = v34;
  v111  = v35;
  unint64_t v36 = v29;
  int32x2_t v37 = vdup_n_s32(*(void *)&v29[v16[9] + 8] >> 60 == 15);
  v38.i64[0]  = v37.u32[0];
  v38.i64[1]  = v37.u32[1];
  v112  = vandq_s8((int8x16_t)vcgezq_s64(vshlq_n_s64(v38, 0x3FuLL)), (int8x16_t)xmmword_1003C9730);
  uint64_t v99 = v16;
  if (v26 == 1)
  {
    uint64_t v39 = _swiftEmptyArrayStorage;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v39 = sub_1000C5698(0, 1, 1, _swiftEmptyArrayStorage);
    unint64_t v41 = v39[2];
    unint64_t v40 = v39[3];
    if (v41 >= v40 >> 1) {
      uint64_t v39 = sub_1000C5698((void *)(v40 > 1), v41 + 1, 1, v39);
    }
    v39[2]  = v41 + 1;
    uint64_t v42 = &v39[2 * v41];
    v42[4]  = v27;
    v42[5]  = v28;
    int v16 = v99;
  }
  if (v30 > 0xE)
  {
    uint64_t v43 = v36;
    uint64_t v44 = v88;
    if (!v35) {
      goto LABEL_38;
    }
    goto LABEL_33;
  }
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v43 = v36;
  uint64_t v44 = v88;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v39 = sub_1000C5698(0, v39[2] + 1, 1, v39);
  }
  unint64_t v47 = v39[2];
  unint64_t v46 = v39[3];
  if (v47 >= v46 >> 1) {
    uint64_t v39 = sub_1000C5698((void *)(v46 > 1), v47 + 1, 1, v39);
  }
  v39[2]  = v47 + 1;
  uint64_t v48 = &v39[2 * v47];
  unint64_t v49 = v86 | 0x8000000000000000;
  v48[4]  = 0xD000000000000014;
  v48[5]  = v49;
  unint64_t v34 = v110;
  unint64_t v35 = v111;
  if (v111)
  {
LABEL_33:
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v39 = sub_1000C5698(0, v39[2] + 1, 1, v39);
    }
    unint64_t v51 = v39[2];
    unint64_t v50 = v39[3];
    if (v51 >= v50 >> 1) {
      uint64_t v39 = sub_1000C5698((void *)(v50 > 1), v51 + 1, 1, v39);
    }
    v39[2]  = v51 + 1;
    uint64_t v52 = &v39[2 * v51];
    v52[4]  = v34;
    v52[5]  = v35;
  }
LABEL_38:
  uint64_t v53 = v112.i64[1];
  if (v112.i64[1])
  {
    uint64_t v54 = v112.i64[0];
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v39 = sub_1000C5698(0, v39[2] + 1, 1, v39);
    }
    unint64_t v56 = v39[2];
    unint64_t v55 = v39[3];
    if (v56 >= v55 >> 1) {
      uint64_t v39 = sub_1000C5698((void *)(v55 > 1), v56 + 1, 1, v39);
    }
    v39[2]  = v56 + 1;
    uint64_t v57 = &v39[2 * v56];
    v57[4]  = v54;
    v57[5]  = v53;
  }
  sub_100010BCC(&qword_1004829B0);
  swift_arrayDestroy();
  v104[0]  = v39;
  sub_100010BCC((uint64_t *)&unk_100488360);
  sub_10000F9CC(&qword_100487D40, (uint64_t *)&unk_100488360);
  uint64_t v58 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v60 = v59;
  swift_bridgeObjectRelease();
  v131  = &type metadata for String;
  v129  = v58;
  v130  = v60;
  uint64_t v61 = (uint64_t)v87;
  sub_1000136F4((uint64_t)&v43[v16[10]], (uint64_t)v87, &qword_1004862B0);
  uint64_t v62 = v89;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v61, 1, v89) == 1)
  {
    v133  = 0u;
    v134  = 0u;
    v132  = 0u;
  }
  else
  {
    __int16 v63 = v84;
    (*(void (**)(char *, uint64_t, uint64_t))(v44 + 32))(v84, v61, v62);
    strcpy((char *)&v132, "keepAliveUUID");
    HIWORD(v132)  = -4864;
    uint64_t v64 = UUID.uuidString.getter();
    *((void *)&v134 + 1)  = &type metadata for String;
    *(void *)&v133  = v64;
    *((void *)&v133 + 1)  = v65;
    (*(void (**)(char *, uint64_t))(v44 + 8))(v63, v62);
  }
  uint64_t v66 = *(void *)&v43[v16[11]];
  if (*(void *)(v66 + 16))
  {
    v135  = 0xD00000000000001CLL;
    v136  = 0x80000001003DE600;
    uint64_t v67 = sub_100010BCC(&qword_1004829A0);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v66 = 0;
    uint64_t v67 = 0;
    v135  = 0;
    v136  = 0;
    v139  = 0;
    v138  = 0;
  }
  v137  = v66;
  v140  = v67;
  uint64_t v68 = (uint64_t)&v43[v16[12]];
  uint64_t v69 = (uint64_t)v90;
  sub_1000136F4(v68, (uint64_t)v90, (uint64_t *)&unk_100485B60);
  uint64_t v70 = v92;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v91 + 48))(v69, 1, v92) == 1)
  {
    v142  = 0u;
    v143  = 0u;
    v141  = 0u;
  }
  else
  {
    uint64_t v71 = v69;
    uint64_t v72 = v85;
    sub_10021A578(v71, v85, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
    *(void *)&v141  = 0xD000000000000019;
    *((void *)&v141 + 1)  = 0x80000001003DE620;
    *((void *)&v143 + 1)  = v70;
    unint64_t v73 = sub_1000382F0((uint64_t *)&v142);
    sub_10021A578(v72, (uint64_t)v73, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
  }
  unint64_t v74 = _swiftEmptyArrayStorage;
  for (i  = 32; i != 320; i += 48)
  {
    sub_1000136F4((uint64_t)&v113[i], (uint64_t)v104, &qword_1004829B8);
    sub_10006EC68((uint64_t)v104, (uint64_t)v103, &qword_1004829B8);
    if (*((void *)&v103[0] + 1))
    {
      long long v100 = v103[0];
      long long v101 = v103[1];
      long long v102 = v103[2];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v74 = sub_1000C6F88(0, v74[2] + 1, 1, v74);
      }
      unint64_t v77 = v74[2];
      unint64_t v76 = v74[3];
      if (v77 >= v76 >> 1) {
        unint64_t v74 = sub_1000C6F88((void *)(v76 > 1), v77 + 1, 1, v74);
      }
      v74[2]  = v77 + 1;
      uint64_t v78 = &v74[6 * v77];
      long long v79 = v100;
      long long v80 = v102;
      v78[3]  = v101;
      v78[4]  = v80;
      v78[2]  = v79;
    }
    else
    {
      sub_1000380B4((uint64_t)v103, &qword_1004829B8);
    }
  }
  sub_100010BCC(&qword_1004829B8);
  swift_arrayDestroy();
  uint64_t v81 = sub_1001E2A10((uint64_t)v74);
  swift_bridgeObjectRelease();
  v104[0]  = v81;
  uint64_t v82 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v82 - 8) + 56))(v94, 1, 1, v82);
  (*(void (**)(char *, void, uint64_t))(v95 + 104))(v97, enum case for Mirror.AncestorRepresentation.generated(_:), v96);
  sub_100010BCC(&qword_10047DC10);
  sub_10000F9CC((unint64_t *)&qword_100484470, &qword_10047DC10);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

void NANAttribute.CustomDeviceInformation.CustomAttributes.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for NANInternetSharingStatistics.Requester();
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  __chkstk_darwin();
  uint64_t v40 = (uint64_t)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100485B60);
  __chkstk_darwin();
  uint64_t v42 = (uint64_t)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v41 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v39 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_1004862B0);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_1004852B0);
  __chkstk_darwin();
  int v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher._combine(_:)(*v1);
  if (v1[2])
  {
    Swift::UInt8 v17 = 0;
  }
  else
  {
    Swift::UInt8 v17 = v1[1];
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v17);
  uint64_t v18 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  sub_1000136F4((uint64_t)&v1[v18[6]], (uint64_t)v16, (uint64_t *)&unk_1004852B0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v16, 1, v11) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v16, v11);
    Hasher._combine(_:)(1u);
    uint64_t v19 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
    unint64_t v21 = v20;
    Data.hash(into:)();
    sub_10000C970(v19, v21);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  unint64_t v22 = (uint64_t *)&v2[v18[7]];
  unint64_t v23 = v22[1];
  if (v23 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v24 = *v22;
    Hasher._combine(_:)(1u);
    sub_100013D44(v24, v23);
    Data.hash(into:)();
    sub_10000C95C(v24, v23);
  }
  uint64_t v25 = (uint64_t *)&v2[v18[8]];
  unint64_t v26 = v25[1];
  if (v26 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v27 = *v25;
    Hasher._combine(_:)(1u);
    sub_100013D44(v27, v26);
    Data.hash(into:)();
    sub_10000C95C(v27, v26);
  }
  unint64_t v28 = (uint64_t *)&v2[v18[9]];
  unint64_t v29 = v28[1];
  if (v29 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v30 = *v28;
    Hasher._combine(_:)(1u);
    sub_100013D44(v30, v29);
    Data.hash(into:)();
    sub_10000C95C(v30, v29);
  }
  sub_1000136F4((uint64_t)&v2[v18[10]], (uint64_t)v10, &qword_1004862B0);
  uint64_t v31 = v41;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v10, 1, v7) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    unint64_t v32 = v39;
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v39, v10, v7);
    Hasher._combine(_:)(1u);
    sub_10021A5E0(&qword_100487710, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v7);
  }
  sub_10009F434(a1, *(void *)&v2[v18[11]]);
  uint64_t v33 = v42;
  sub_1000136F4((uint64_t)&v2[v18[12]], v42, (uint64_t *)&unk_100485B60);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v33, 1, v44) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v34 = v40;
    sub_10021A578(v33, v40, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
    Hasher._combine(_:)(1u);
    NANInternetSharingStatistics.Requester.hash(into:)();
    sub_10021A4B0(v34, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
  }
  unint64_t v35 = &v2[v18[13]];
  if (v35[24] == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    double v37 = *((double *)v35 + 1);
    double v36 = *((double *)v35 + 2);
    double v38 = *(double *)v35;
    Hasher._combine(_:)(1u);
    NANMulticastLinkCondition.hash(into:)(v38, v37, v36);
  }
}

Swift::Int NANAttribute.CustomDeviceInformation.CustomAttributes.hashValue.getter()
{
  return sub_10020ABD4((void (*)(unsigned char *))NANAttribute.CustomDeviceInformation.CustomAttributes.hash(into:));
}

Swift::Int sub_1001FF790(uint64_t a1, uint64_t a2)
{
  return sub_10020AC34(a1, a2, (void (*)(unsigned char *))NANAttribute.CustomDeviceInformation.CustomAttributes.hash(into:));
}

Swift::Int sub_1001FF7AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10020AC98(a1, a2, a3, (void (*)(unsigned char *))NANAttribute.CustomDeviceInformation.CustomAttributes.hash(into:));
}

uint64_t sub_1001FF7C4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return NANAttribute.CustomDeviceInformation.CustomAttributes.init(from:)(a1, a2);
}

uint64_t sub_1001FF7DC(void *a1)
{
  return NANAttribute.CustomDeviceInformation.CustomAttributes.encode(to:)(a1);
}

unint64_t NANAttribute.CustomDeviceInformation.PlatformType.init(from:)(void *a1)
{
  return sub_1002134E0(a1);
}

uint64_t sub_1001FF818@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = _s7CoreP2P12NANAttributeO23CustomDeviceInformationV12PlatformTypeO8rawValueAGSgs5UInt8V_tcfC_0(*a1);
  *a2  = result;
  return result;
}

unint64_t sub_1001FF844@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1002134E0(a1);
  if (!v2) {
    *a2  = result;
  }
  return result;
}

uint64_t sub_1001FF870()
{
  return RawRepresentable<>.encode(to:)();
}

void *NANAttribute.CustomDeviceInformation.Flags.doesNotSupportSimultaneousDualBand.unsafeMutableAddressor()
{
  return &static NANAttribute.CustomDeviceInformation.Flags.doesNotSupportSimultaneousDualBand;
}

void *NANAttribute.CustomDeviceInformation.Flags.triggeredWatchdogReset.unsafeMutableAddressor()
{
  return &static NANAttribute.CustomDeviceInformation.Flags.triggeredWatchdogReset;
}

void *NANAttribute.CustomDeviceInformation.Flags.linkConditionFeedbackRequest.unsafeMutableAddressor()
{
  return &static NANAttribute.CustomDeviceInformation.Flags.linkConditionFeedbackRequest;
}

uint64_t NANAttribute.CustomDeviceInformation.Flags.description.getter(char a1)
{
  if (a1)
  {
    uint64_t v2 = sub_1000C5698(0, 1, 1, _swiftEmptyArrayStorage);
    unint64_t v4 = v2[2];
    unint64_t v3 = v2[3];
    if (v4 >= v3 >> 1) {
      uint64_t v2 = sub_1000C5698((void *)(v3 > 1), v4 + 1, 1, v2);
    }
    v2[2]  = v4 + 1;
    uint64_t v5 = (char *)&v2[2 * v4];
    strcpy(v5 + 32, "No SDB Support");
    v5[47]  = -18;
  }
  else
  {
    uint64_t v2 = _swiftEmptyArrayStorage;
  }
  if ((a1 & 2) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_1000C5698(0, v2[2] + 1, 1, v2);
    }
    unint64_t v7 = v2[2];
    unint64_t v6 = v2[3];
    if (v7 >= v6 >> 1) {
      uint64_t v2 = sub_1000C5698((void *)(v6 > 1), v7 + 1, 1, v2);
    }
    v2[2]  = v7 + 1;
    uint64_t v8 = &v2[2 * v7];
    v8[4]  = 0xD000000000000018;
    v8[5]  = 0x80000001003DE6F0;
    if ((a1 & 4) == 0)
    {
LABEL_8:
      if ((a1 & 8) == 0) {
        goto LABEL_25;
      }
      goto LABEL_20;
    }
  }
  else if ((a1 & 4) == 0)
  {
    goto LABEL_8;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1000C5698(0, v2[2] + 1, 1, v2);
  }
  unint64_t v10 = v2[2];
  unint64_t v9 = v2[3];
  if (v10 >= v9 >> 1) {
    uint64_t v2 = sub_1000C5698((void *)(v9 > 1), v10 + 1, 1, v2);
  }
  v2[2]  = v10 + 1;
  uint64_t v11 = &v2[2 * v10];
  void v11[4] = 0xD000000000000021;
  void v11[5] = 0x80000001003DE6C0;
  if ((a1 & 8) != 0)
  {
LABEL_20:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_1000C5698(0, v2[2] + 1, 1, v2);
    }
    unint64_t v13 = v2[2];
    unint64_t v12 = v2[3];
    if (v13 >= v12 >> 1) {
      uint64_t v2 = sub_1000C5698((void *)(v12 > 1), v13 + 1, 1, v2);
    }
    v2[2]  = v13 + 1;
    uint64_t v14 = &v2[2 * v13];
    Swift::UInt16 v14[4] = 0xD00000000000001FLL;
    v14[5]  = 0x80000001003DE6A0;
  }
LABEL_25:
  sub_100010BCC((uint64_t *)&unk_100488360);
  sub_10000F9CC(&qword_100487D40, (uint64_t *)&unk_100488360);
  uint64_t v15 = BidirectionalCollection<>.joined(separator:)();
  Swift::UInt8 v17 = v16;
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits  = v15;
  v18._object  = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits  = 93;
  v19._object  = (void *)0xE100000000000000;
  String.append(_:)(v19);
  return 91;
}

uint64_t NANAttribute.CustomDeviceInformation.Flags.customMirror.getter(int a1)
{
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100480650);
  __chkstk_darwin();
  unint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v11 = a1;
  unint64_t v10 = _swiftEmptyArrayStorage;
  uint64_t v8 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for Mirror.AncestorRepresentation.generated(_:), v2);
  sub_100010BCC(&qword_10047DC10);
  sub_10000F9CC((unint64_t *)&qword_100484470, &qword_10047DC10);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t sub_1001FFDA0()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001FFE00()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1001FFE50()
{
  return NANAttribute.CustomDeviceInformation.Flags.description.getter(*v0);
}

uint64_t sub_1001FFE58()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100480650);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v10 = *v0;
  unint64_t v9 = _swiftEmptyArrayStorage;
  uint64_t v7 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for Mirror.AncestorRepresentation.generated(_:), v1);
  sub_100010BCC(&qword_10047DC10);
  sub_10000F9CC((unint64_t *)&qword_100484470, &qword_10047DC10);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t NANAttribute.CustomDeviceInformation.Version.majorVersion.getter(unsigned __int8 a1)
{
  return a1 >> 2;
}

uint64_t NANAttribute.CustomDeviceInformation.Version.minorVersion.getter(char a1)
{
  return a1 & 3;
}

uint64_t static NANAttribute.CustomDeviceInformation.Version.< infix(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  unsigned int v2 = a1 >> 2;
  unsigned int v3 = a2 >> 2;
  BOOL v4 = (a1 & 3u) < (a2 & 3u);
  if (v2 != v3) {
    BOOL v4 = 0;
  }
  return v2 < v3 || v4;
}

uint64_t NANAttribute.CustomDeviceInformation.Version.description.getter()
{
  v0._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits  = 46;
  v1._object  = (void *)0xE100000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits  = 93;
  v3._object  = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0x5B6E6F6973726556;
}

BOOL NANAttribute.CustomDeviceInformation.Version.supportsCustomDeviceInformation.getter(unsigned __int8 a1)
{
  BOOL v1 = (a1 & 0xFC) != 4 || (a1 & 3) != 0;
  return a1 >= 4u && v1;
}

uint64_t sub_100200178(uint64_t a1)
{
  unint64_t v2 = sub_10021A67C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002001B4(uint64_t a1)
{
  unint64_t v2 = sub_10021A67C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.CustomDeviceInformation.Version.encode(to:)(void *a1)
{
  uint64_t v2 = sub_100010BCC(&qword_1004829C0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_10021A67C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t NANAttribute.CustomDeviceInformation.Version.init(from:)(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_1004829D0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (uint64_t)sub_1000369C4(a1, a1[3]);
  sub_10021A67C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  sub_100010754((uint64_t)a1);
  return v7;
}

uint64_t sub_10020046C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  unsigned int v4 = v2 >> 2;
  BOOL v5 = (v2 & 3) < (v3 & 3);
  if (v4 != v3 >> 2) {
    BOOL v5 = 0;
  }
  return v4 < v3 >> 2 || v5;
}

uint64_t sub_1002004A0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  unsigned int v4 = v2 >> 2;
  if (v3 >> 2 < v2 >> 2) {
    return 0;
  }
  BOOL v6 = (v3 & 3) >= (v2 & 3);
  return v3 >> 2 != v4 || v6;
}

uint64_t sub_1002004E0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  unsigned int v4 = v2 >> 2;
  if (v2 >> 2 < v3 >> 2) {
    return 0;
  }
  BOOL v6 = (v2 & 3) >= (v3 & 3);
  return v4 != v3 >> 2 || v6;
}

uint64_t sub_100200520(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  unsigned int v4 = v2 >> 2;
  BOOL v5 = (v3 & 3) < (v2 & 3);
  if (v3 >> 2 != v4) {
    BOOL v5 = 0;
  }
  return v3 >> 2 < v4 || v5;
}

uint64_t sub_100200554@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = sub_100010BCC(&qword_1004829D0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_10021A67C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100010754((uint64_t)a1);
  }
  char v9 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = sub_100010754((uint64_t)a1);
  *a2  = v9;
  return result;
}

uint64_t sub_1002006B0(void *a1)
{
  uint64_t v2 = sub_100010BCC(&qword_1004829C0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_10021A67C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_1002007E4()
{
  return NANAttribute.CustomDeviceInformation.Version.description.getter();
}

uint64_t NANAttribute.CustomDeviceInformation.flags.getter()
{
  return *(unsigned int *)(v0 + 4);
}

uint64_t NANAttribute.CustomDeviceInformation.customAttributes.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for NANAttribute.CustomDeviceInformation(0);
  return sub_10021A510(v1 + *(int *)(v3 + 28), a1, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
}

uint64_t NANAttribute.CustomDeviceInformation.customAttributes.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation(0) + 28);

  return sub_10021A6F0(a1, v3);
}

uint64_t (*NANAttribute.CustomDeviceInformation.customAttributes.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANAttribute.CustomDeviceInformation.init(version:platformType:flags:customAttributes:)@<X0>(char a1@<W0>, char a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(unsigned char *)a5  = a1;
  *(unsigned char *)(a5 + 1)  = a2;
  *(_DWORD *)(a5 + 4)  = a3;
  uint64_t v7 = type metadata accessor for NANAttribute.CustomDeviceInformation(0);
  return sub_10021A578(a4, a5 + *(int *)(v7 + 28), type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
}

void NANAttribute.CustomDeviceInformation.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Hasher._combine(_:)(*(unsigned char *)v2);
  Hasher._combine(_:)(*(unsigned char *)(v2 + 1));
  Hasher._combine(_:)(*(_DWORD *)(v2 + 4));
  type metadata accessor for NANAttribute.CustomDeviceInformation(0);
  NANAttribute.CustomDeviceInformation.CustomAttributes.hash(into:)(a1);
}

unint64_t sub_100200984()
{
  unint64_t result = 0x6E6F6973726576;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6D726F6674616C70;
      break;
    case 2:
      unint64_t result = 0x7367616C66;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100200A1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10022E6BC(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_100200A44(uint64_t a1)
{
  unint64_t v2 = sub_10021A754();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100200A80(uint64_t a1)
{
  unint64_t v2 = sub_10021A754();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.CustomDeviceInformation.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100010BCC(&qword_1004829D8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_10021A754();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v15 = *v3;
  char v14 = 0;
  sub_10021A7A8();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    char v13 = v3[1];
    char v12 = 1;
    sub_10021A7FC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    int v11 = *((_DWORD *)v3 + 1);
    v10[7]  = 2;
    sub_10021A850();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    type metadata accessor for NANAttribute.CustomDeviceInformation(0);
    v10[6]  = 3;
    type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
    sub_10021A5E0(&qword_100482A00, (void (*)(uint64_t))type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int NANAttribute.CustomDeviceInformation.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(unsigned char *)v0);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 1));
  Hasher._combine(_:)(*(_DWORD *)(v0 + 4));
  type metadata accessor for NANAttribute.CustomDeviceInformation(0);
  NANAttribute.CustomDeviceInformation.CustomAttributes.hash(into:)((uint64_t)v2);
  return Hasher._finalize()();
}

uint64_t NANAttribute.CustomDeviceInformation.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = a2;
  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100010BCC(&qword_100482A08);
  uint64_t v19 = *(void *)(v5 - 8);
  uint64_t v20 = v5;
  __chkstk_darwin();
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for NANAttribute.CustomDeviceInformation(0);
  __chkstk_darwin();
  int v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_10021A754();
  unint64_t v21 = v7;
  uint64_t v11 = v22;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v11)
  {
    uint64_t v12 = v19;
    uint64_t v13 = (uint64_t)v4;
    char v28 = 0;
    sub_10021A8A4();
    uint64_t v14 = v20;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *int v10 = v29;
    char v26 = 1;
    sub_10021A8F8();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v10[1]  = v27;
    char v24 = 2;
    sub_10021A94C();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *((_DWORD *)v10 + 1)  = v25;
    char v23 = 3;
    sub_10021A5E0((unint64_t *)&unk_100486410, (void (*)(uint64_t))type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
    int v16 = v21;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v14);
    uint64_t v17 = v18;
    sub_10021A578(v13, (uint64_t)&v10[*(int *)(v8 + 28)], type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
    sub_10021A578((uint64_t)v10, v17, type metadata accessor for NANAttribute.CustomDeviceInformation);
  }
  return sub_100010754((uint64_t)a1);
}

Swift::Int sub_1002010EC()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(unsigned char *)v0);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 1));
  Hasher._combine(_:)(*(_DWORD *)(v0 + 4));
  NANAttribute.CustomDeviceInformation.CustomAttributes.hash(into:)((uint64_t)v2);
  return Hasher._finalize()();
}

void sub_100201168(uint64_t a1)
{
  uint64_t v2 = v1;
  Hasher._combine(_:)(*(unsigned char *)v2);
  Hasher._combine(_:)(*(unsigned char *)(v2 + 1));
  Hasher._combine(_:)(*(_DWORD *)(v2 + 4));
  NANAttribute.CustomDeviceInformation.CustomAttributes.hash(into:)(a1);
}

Swift::Int sub_1002011C4()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(unsigned char *)v0);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 1));
  Hasher._combine(_:)(*(_DWORD *)(v0 + 4));
  NANAttribute.CustomDeviceInformation.CustomAttributes.hash(into:)((uint64_t)v2);
  return Hasher._finalize()();
}

uint64_t sub_10020123C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return NANAttribute.CustomDeviceInformation.init(from:)(a1, a2);
}

uint64_t sub_100201254(void *a1)
{
  return NANAttribute.CustomDeviceInformation.encode(to:)(a1);
}

uint64_t NANAttribute.AttributeType.customMirror.getter(char a1)
{
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100480650);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v13 = a1;
  uint64_t v12 = _swiftEmptyArrayStorage;
  uint64_t v8 = enum case for Mirror.DisplayStyle.enum(_:);
  uint64_t v9 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 104))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for Mirror.AncestorRepresentation.generated(_:), v2);
  sub_100010BCC(&qword_10047DC10);
  sub_10000F9CC((unint64_t *)&qword_100484470, &qword_10047DC10);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t NANAttribute.AttributeType.rawValue.getter(char a1)
{
  return byte_1003D2CB2[a1];
}

BOOL sub_1002014A0(char *a1, char *a2)
{
  return byte_1003D2CB2[*a1] == byte_1003D2CB2[*a2];
}

uint64_t sub_1002014C4@<X0>(char *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = _s7CoreP2P12NANAttributeO13AttributeTypeO8rawValueAESgs5UInt8V_tcfC_0(*a1);
  *a2  = result;
  return result;
}

void sub_1002014F0(unsigned char *a1@<X8>)
{
  *a1  = byte_1003D2CB2[*v1];
}

uint64_t sub_100201508()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100201568()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int sub_1002015B8()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(byte_1003D2CB2[v1]);
  return Hasher._finalize()();
}

void sub_100201608()
{
  Hasher._combine(_:)(byte_1003D2CB2[*v0]);
}

Swift::Int sub_100201640()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(byte_1003D2CB2[v1]);
  return Hasher._finalize()();
}

uint64_t sub_10020168C()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100480650);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v12 = *v0;
  uint64_t v11 = _swiftEmptyArrayStorage;
  uint64_t v7 = enum case for Mirror.DisplayStyle.enum(_:);
  uint64_t v8 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 104))(v6, v7, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for Mirror.AncestorRepresentation.generated(_:), v1);
  sub_100010BCC(&qword_10047DC10);
  sub_10000F9CC((unint64_t *)&qword_100484470, &qword_10047DC10);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t NANAttribute.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  v594  = a2;
  v595  = type metadata accessor for NANAttribute(0);
  __chkstk_darwin();
  v554  = (char *)&v547 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v593  = (char *)&v547 - v4;
  __chkstk_darwin();
  v575  = (uint64_t *)((char *)&v547 - v5);
  __chkstk_darwin();
  v592  = (char *)&v547 - v6;
  __chkstk_darwin();
  v576  = (_OWORD *)((char *)&v547 - v7);
  __chkstk_darwin();
  v597  = (char *)&v547 - v8;
  __chkstk_darwin();
  v596  = (char *)&v547 - v9;
  __chkstk_darwin();
  v591  = (char *)&v547 - v10;
  __chkstk_darwin();
  v573  = (uint64_t *)((char *)&v547 - v11);
  __chkstk_darwin();
  v570  = (uint64_t *)((char *)&v547 - v12);
  __chkstk_darwin();
  v590  = (char *)&v547 - v13;
  __chkstk_darwin();
  v589  = (char *)&v547 - v14;
  __chkstk_darwin();
  v572  = (uint64_t *)((char *)&v547 - v15);
  __chkstk_darwin();
  v574  = (uint64_t *)((char *)&v547 - v16);
  __chkstk_darwin();
  v569  = (uint64_t *)((char *)&v547 - v17);
  __chkstk_darwin();
  v571  = (char *)&v547 - v18;
  __chkstk_darwin();
  v568  = (uint64_t *)((char *)&v547 - v19);
  __chkstk_darwin();
  v553  = (char *)&v547 - v20;
  __chkstk_darwin();
  v567  = (uint64_t *)((char *)&v547 - v21);
  __chkstk_darwin();
  v588  = (char *)&v547 - v22;
  __chkstk_darwin();
  v587  = (char *)&v547 - v23;
  __chkstk_darwin();
  v586  = (char *)&v547 - v24;
  __chkstk_darwin();
  v566  = (uint64_t *)((char *)&v547 - v25);
  __chkstk_darwin();
  v585  = (char *)&v547 - v26;
  __chkstk_darwin();
  v584  = (char *)&v547 - v27;
  __chkstk_darwin();
  v565  = (uint64_t *)((char *)&v547 - v28);
  __chkstk_darwin();
  v564  = (uint64_t *)((char *)&v547 - v29);
  __chkstk_darwin();
  v562  = (uint64_t *)((char *)&v547 - v30);
  __chkstk_darwin();
  v583  = (char *)&v547 - v31;
  __chkstk_darwin();
  v560  = (_OWORD *)((char *)&v547 - v32);
  __chkstk_darwin();
  v561  = (uint64_t *)((char *)&v547 - v33);
  __chkstk_darwin();
  v559  = (_OWORD *)((char *)&v547 - v34);
  __chkstk_darwin();
  v563  = (uint64_t *)((char *)&v547 - v35);
  __chkstk_darwin();
  v558  = (uint64_t *)((char *)&v547 - v36);
  __chkstk_darwin();
  v582  = (char *)&v547 - v37;
  __chkstk_darwin();
  v581  = (char *)&v547 - v38;
  __chkstk_darwin();
  v556  = (uint64_t *)((char *)&v547 - v39);
  __chkstk_darwin();
  v580  = (char *)&v547 - v40;
  __chkstk_darwin();
  v579  = (char *)&v547 - v41;
  __chkstk_darwin();
  v557  = (uint64_t *)((char *)&v547 - v42);
  __chkstk_darwin();
  v578  = (char *)&v547 - v43;
  __chkstk_darwin();
  v577  = (char *)&v547 - v44;
  __chkstk_darwin();
  v555  = (char *)&v547 - v45;
  __chkstk_darwin();
  unint64_t v47 = (char *)&v547 - v46;
  __chkstk_darwin();
  unint64_t v49 = (char *)&v547 - v48;
  __chkstk_darwin();
  unint64_t v51 = (char *)&v547 - v50;
  __chkstk_darwin();
  uint64_t v53 = (char *)&v547 - v52;
  sub_1000369C4(a1, a1[3]);
  uint64_t v54 = v629;
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v54)
  {
    uint64_t v55 = (uint64_t)a1;
  }
  else
  {
    v550  = v51;
    v551  = v47;
    v549  = (uint64_t *)v49;
    uint64_t v57 = v596;
    unint64_t v56 = v597;
    v552  = v53;
    v629  = a1;
    sub_100010BCC(&qword_10047E2D8);
    sub_100039448((uint64_t)v602, v602[3]);
    sub_10000F9CC(&qword_10047E2D0, &qword_10047E2D8);
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    unint64_t v58 = *(void *)v626;
    v548  = *((void *)&v625 + 1);
    char v59 = _s7CoreP2P12NANAttributeO13AttributeTypeO8rawValueAESgs5UInt8V_tcfC_0(v625);
    uint64_t v55 = (uint64_t)v629;
    switch(v59)
    {
      case 1:
        unint64_t v65 = v58;
        unint64_t v66 = v58 >> 62;
        uint64_t v67 = v548;
        sub_100013D44(v548, v65);
        sub_100013D44(v67, v65);
        unint64_t v68 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        uint64_t v69 = type metadata accessor for BinaryDecoder();
        uint64_t v70 = (void *)swift_allocObject();
        v70[5]  = &_swiftEmptyDictionarySingleton;
        v70[2]  = v67;
        v70[3]  = v65;
        uint64_t v71 = 0;
        switch(v66)
        {
          case 1uLL:
            uint64_t v71 = (int)v548;
            break;
          case 2uLL:
            uint64_t v71 = *(void *)(v548 + 16);
            break;
          default:
            break;
        }
        v70[4]  = v71;
        swift_beginAccess();
        v70[5]  = v68;
        swift_bridgeObjectRelease();
        *(void *)&v626[8]  = v69;
        *(void *)&v626[16]  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        *(void *)&v625  = v70;
        v307  = sub_100214A44(&v625);
        v308  = v307;
        v310  = v309;
        v596  = (char *)HIDWORD(v309);
        v597  = 0;
        v592  = (char *)HIWORD(v307);
        v593  = (char *)HIBYTE(v307);
        v591  = (char *)(v307 >> 40);
        v311  = HIDWORD(v307);
        v312  = v307 >> 24;
        v313  = v307 >> 16;
        v314  = v307 >> 8;
        v315  = v548;
        sub_10000C970(v548, v65);
        sub_10000C970(v315, v65);
        v316  = v549;
        *(unsigned char *)v549  = v308;
        *((unsigned char *)v316 + 1)  = v314;
        *((unsigned char *)v316 + 2)  = v313;
        *((unsigned char *)v316 + 3)  = v312;
        *((unsigned char *)v316 + 4)  = v311;
        uint64_t v55 = (uint64_t)v629;
        *((unsigned char *)v316 + 5)  = (_BYTE)v591;
        *((unsigned char *)v316 + 6)  = (_BYTE)v592;
        v306  = v594;
        *((unsigned char *)v316 + 7)  = (_BYTE)v593;
        *((unsigned char *)v316 + 8)  = v310;
        *((_DWORD *)v316 + 3)  = v596;
        goto LABEL_174;
      case 2:
        uint64_t v72 = v548;
        sub_100013D44(v548, v58);
        sub_100013D44(v72, v58);
        v597  = (char *)sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        uint64_t v73 = type metadata accessor for BinaryDecoder();
        unint64_t v74 = (void *)swift_allocObject();
        v74[5]  = &_swiftEmptyDictionarySingleton;
        v74[2]  = v72;
        v74[3]  = v58;
        uint64_t v75 = 0;
        uint64_t v64 = v551;
        switch(v58 >> 62)
        {
          case 1uLL:
            uint64_t v75 = (int)v548;
            break;
          case 2uLL:
            uint64_t v75 = *(void *)(v548 + 16);
            break;
          default:
            break;
        }
        v74[4]  = v75;
        swift_beginAccess();
        v74[5]  = v597;
        swift_bridgeObjectRelease();
        *(void *)&v626[8]  = v73;
        *(void *)&v626[16]  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        *(void *)&v625  = v74;
        v317  = sub_1002118F4(&v625);
        v318  = v594;
        v319  = v317;
        v320  = v548;
        sub_10000C970(v548, v58);
        v321  = v320;
        v306  = v318;
        sub_10000C970(v321, v58);
        *uint64_t v64 = v319;
        goto LABEL_103;
      case 3:
        v596  = (char *)(v58 >> 62);
        uint64_t v76 = v548;
        sub_100013D44(v548, v58);
        sub_100013D44(v76, v58);
        v597  = (char *)sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        uint64_t v77 = type metadata accessor for BinaryDecoder();
        uint64_t v78 = (void *)swift_allocObject();
        v78[5]  = &_swiftEmptyDictionarySingleton;
        v78[2]  = v76;
        v78[3]  = v58;
        uint64_t v79 = 0;
        switch((unint64_t)v596)
        {
          case 1uLL:
            uint64_t v79 = (int)v548;
            break;
          case 2uLL:
            uint64_t v79 = *(void *)(v548 + 16);
            break;
          default:
            break;
        }
        v78[4]  = v79;
        swift_beginAccess();
        v78[5]  = v597;
        swift_bridgeObjectRelease();
        v599  = v77;
        v600  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        v598[0]  = v78;
        sub_100216B98(v598, (uint64_t)&v625);
        v605  = *(_OWORD *)&v626[16];
        v606  = v627;
        v607  = v628;
        v603  = v625;
        v604  = *(_OWORD *)v626;
        v323  = v548;
        sub_10000C970(v548, v58);
        sub_10000C970(v323, v58);
        v324  = v606;
        v325  = v555;
        *((_OWORD *)v555 + 2)  = v605;
        v325[3]  = v324;
        v325[4]  = v607;
        v326  = v604;
        *v325  = v603;
        v325[1]  = v326;
        goto LABEL_186;
      case 4:
        uint64_t v80 = v548;
        sub_100013D44(v548, v58);
        sub_100013D44(v80, v58);
        unint64_t v81 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        uint64_t v82 = type metadata accessor for BinaryDecoder();
        uint64_t v83 = (void *)swift_allocObject();
        v83[5]  = &_swiftEmptyDictionarySingleton;
        v83[2]  = v80;
        v83[3]  = v58;
        uint64_t v84 = 0;
        switch(v58 >> 62)
        {
          case 1uLL:
            uint64_t v84 = (int)v80;
            break;
          case 2uLL:
            uint64_t v84 = *(void *)(v80 + 16);
            break;
          default:
            break;
        }
        v83[4]  = v84;
        swift_beginAccess();
        v83[5]  = v81;
        swift_bridgeObjectRelease();
        *(void *)&v626[8]  = v82;
        *(void *)&v626[16]  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        *(void *)&v625  = v83;
        sub_10021A9F4();
        dispatch thunk of Decodable.init(from:)();
        v327  = v577;
        sub_10000C970(v80, v58);
        sub_10000C970(v80, v58);
        *(_WORD *)v327  = v601;
        goto LABEL_197;
      case 5:
        uint64_t v85 = v548;
        sub_100013D44(v548, v58);
        sub_100013D44(v85, v58);
        unint64_t v86 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        uint64_t v87 = type metadata accessor for BinaryDecoder();
        uint64_t v88 = (void *)swift_allocObject();
        v88[5]  = &_swiftEmptyDictionarySingleton;
        v88[2]  = v85;
        v88[3]  = v58;
        uint64_t v89 = 0;
        switch(v58 >> 62)
        {
          case 1uLL:
            uint64_t v89 = (int)v548;
            break;
          case 2uLL:
            uint64_t v89 = *(void *)(v548 + 16);
            break;
          default:
            break;
        }
        v88[4]  = v89;
        swift_beginAccess();
        v88[5]  = v86;
        swift_bridgeObjectRelease();
        *(void *)&v626[8]  = v87;
        *(void *)&v626[16]  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        *(void *)&v625  = v88;
        sub_1002129F4(&v625, (uint64_t)&v608);
        v306  = v594;
        v328  = v578;
        v329  = v548;
        sub_10000C970(v548, v58);
        sub_10000C970(v329, v58);
        v330  = v609[0];
        *v328  = v608;
        v328[1]  = v330;
        *(_OWORD *)((char *)v328 + 25)  = *(_OWORD *)((char *)v609 + 9);
        swift_storeEnumTagMultiPayload();
        v322  = (uint64_t)v328;
        goto LABEL_175;
      case 6:
        uint64_t v90 = v548;
        sub_100013D44(v548, v58);
        sub_100013D44(v90, v58);
        unint64_t v91 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        uint64_t v92 = type metadata accessor for BinaryDecoder();
        uint64_t v93 = (void *)swift_allocObject();
        v93[5]  = &_swiftEmptyDictionarySingleton;
        v93[2]  = v90;
        v93[3]  = v58;
        uint64_t v94 = 0;
        switch(v58 >> 62)
        {
          case 1uLL:
            uint64_t v94 = (int)v90;
            break;
          case 2uLL:
            uint64_t v94 = *(void *)(v90 + 16);
            break;
          default:
            break;
        }
        v93[4]  = v94;
        swift_beginAccess();
        v93[5]  = v91;
        swift_bridgeObjectRelease();
        *(void *)&v626[8]  = v92;
        *(void *)&v626[16]  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        *(void *)&v625  = v93;
        v331  = sub_100210AC0(&v625);
        v332  = v331;
        v334  = v333;
        v336  = v335;
        v338  = v337;
        v596  = (char *)HIWORD(v331);
        v597  = 0;
        v593  = (char *)(v331 >> 40);
        v590  = (char *)(v331 >> 24);
        v591  = (char *)HIDWORD(v331);
        v339  = v331 >> 16;
        v340  = v331 >> 8;
        LODWORD(v592)  = v333 >> 8;
        sub_10000C970(v90, v58);
        sub_10000C970(v90, v58);
        v316  = v557;
        *(unsigned char *)v557  = v332;
        *((unsigned char *)v316 + 1)  = v340;
        *((unsigned char *)v316 + 2)  = v339;
        *((unsigned char *)v316 + 3)  = (_BYTE)v590;
        uint64_t v55 = (uint64_t)v629;
        *((unsigned char *)v316 + 4)  = (_BYTE)v591;
        v341  = v594;
        *((unsigned char *)v316 + 5)  = (_BYTE)v593;
        *((unsigned char *)v316 + 6)  = (_BYTE)v596;
        *((unsigned char *)v316 + 8)  = v334;
        *((unsigned char *)v316 + 9)  = (_BYTE)v592;
        *((unsigned char *)v316 + 10)  = BYTE2(v334) & 1;
        v316[2]  = v336;
        v316[3]  = v338;
        v306  = v341;
        goto LABEL_174;
      case 7:
        uint64_t v95 = v548;
        sub_100013D44(v548, v58);
        sub_100013D44(v95, v58);
        unint64_t v96 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        uint64_t v97 = type metadata accessor for BinaryDecoder();
        uint64_t v98 = (void *)swift_allocObject();
        v98[5]  = &_swiftEmptyDictionarySingleton;
        v98[2]  = v95;
        v98[3]  = v58;
        uint64_t v99 = 0;
        switch(v58 >> 62)
        {
          case 1uLL:
            uint64_t v99 = (int)v95;
            break;
          case 2uLL:
            uint64_t v99 = *(void *)(v95 + 16);
            break;
          default:
            break;
        }
        v98[4]  = v99;
        swift_beginAccess();
        v98[5]  = v96;
        swift_bridgeObjectRelease();
        *(void *)&v626[8]  = v97;
        *(void *)&v626[16]  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        *(void *)&v625  = v98;
        sub_1002144B8(&v625, (uint64_t)v610);
        v327  = v579;
        sub_10000C970(v95, v58);
        sub_10000C970(v95, v58);
        v342  = v610[1];
        *(_OWORD *)v327  = v610[0];
        *((_OWORD *)v327 + 1)  = v342;
        *((void *)v327 + 4)  = v611;
        goto LABEL_197;
      case 8:
        unint64_t v100 = v58;
        unint64_t v101 = v58 >> 62;
        uint64_t v102 = v548;
        sub_100013D44(v548, v58);
        sub_100013D44(v102, v58);
        unint64_t v103 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        uint64_t v104 = type metadata accessor for BinaryDecoder();
        long long v105 = (void *)swift_allocObject();
        v105[5]  = &_swiftEmptyDictionarySingleton;
        v105[2]  = v102;
        v105[3]  = v100;
        uint64_t v106 = 0;
        switch(v101)
        {
          case 1uLL:
            uint64_t v106 = (int)v548;
            break;
          case 2uLL:
            uint64_t v106 = *(void *)(v548 + 16);
            break;
          default:
            break;
        }
        v105[4]  = v106;
        swift_beginAccess();
        v105[5]  = v103;
        swift_bridgeObjectRelease();
        *(void *)&v626[8]  = v104;
        *(void *)&v626[16]  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        *(void *)&v625  = v105;
        sub_100214740(&v625, (uint64_t)v612);
        unint64_t v56 = v580;
        v343  = v548;
        sub_10000C970(v548, v100);
        sub_10000C970(v343, v100);
        v344  = v612[1];
        *unint64_t v56 = v612[0];
        v56[1]  = v344;
        v56[2]  = v612[2];
        goto LABEL_189;
      case 9:
        uint64_t v107 = v548;
        sub_100013D44(v548, v58);
        sub_100013D44(v107, v58);
        unint64_t v108 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        v109  = type metadata accessor for BinaryDecoder();
        v110  = (void *)swift_allocObject();
        v110[5]  = &_swiftEmptyDictionarySingleton;
        v110[2]  = v107;
        v110[3]  = v58;
        v111  = 0;
        switch(v58 >> 62)
        {
          case 1uLL:
            v111  = (int)v107;
            break;
          case 2uLL:
            v111  = *(void *)(v107 + 16);
            break;
          default:
            break;
        }
        v110[4]  = v111;
        swift_beginAccess();
        v110[5]  = v108;
        swift_bridgeObjectRelease();
        *(void *)&v626[8]  = v109;
        *(void *)&v626[16]  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        *(void *)&v625  = v110;
        v345  = sub_1002135AC(&v625);
        v347  = v346;
        v349  = v348;
        sub_10000C970(v107, v58);
        sub_10000C970(v107, v58);
        v350  = v556;
        *(_WORD *)v556  = v345;
        *((unsigned char *)v350 + 2)  = BYTE2(v345) & 1;
        v350[1]  = v347;
        v350[2]  = v349;
        goto LABEL_192;
      case 10:
        v112  = v548;
        sub_100013D44(v548, v58);
        sub_100013D44(v112, v58);
        v113  = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        v114  = type metadata accessor for BinaryDecoder();
        v115  = (void *)swift_allocObject();
        v115[5]  = &_swiftEmptyDictionarySingleton;
        v115[2]  = v112;
        v115[3]  = v58;
        v116  = 0;
        switch(v58 >> 62)
        {
          case 1uLL:
            v116  = (int)v112;
            break;
          case 2uLL:
            v116  = *(void *)(v112 + 16);
            break;
          default:
            break;
        }
        v115[4]  = v116;
        swift_beginAccess();
        v115[5]  = v113;
        swift_bridgeObjectRelease();
        *(void *)&v626[8]  = v114;
        *(void *)&v626[16]  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        *(void *)&v625  = v115;
        v351  = sub_1002132C8(&v625);
        uint64_t v57 = v581;
        v352  = v351;
        v354  = v353;
        sub_10000C970(v112, v58);
        sub_10000C970(v112, v58);
        *uint64_t v57 = v352;
        *((void *)v57 + 1)  = v354;
        goto LABEL_179;
      case 11:
        v117  = v548;
        sub_100013D44(v548, v58);
        sub_100013D44(v117, v58);
        v118  = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        v119  = type metadata accessor for BinaryDecoder();
        v120  = (void *)swift_allocObject();
        v120[5]  = &_swiftEmptyDictionarySingleton;
        v120[2]  = v117;
        v120[3]  = v58;
        v121  = 0;
        switch(v58 >> 62)
        {
          case 1uLL:
            v121  = (int)v117;
            break;
          case 2uLL:
            v121  = *(void *)(v117 + 16);
            break;
          default:
            break;
        }
        v120[4]  = v121;
        swift_beginAccess();
        v120[5]  = v118;
        swift_bridgeObjectRelease();
        *(void *)&v626[8]  = v119;
        *(void *)&v626[16]  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        *(void *)&v625  = v120;
        v355  = sub_1001563F0(&v625);
        unint64_t v56 = v582;
        v356  = v355;
        sub_10000C970(v117, v58);
        sub_10000C970(v117, v58);
        *(_WORD *)unint64_t v56 = v356;
        goto LABEL_189;
      case 12:
        v122  = v58;
        v123  = v58 >> 62;
        v124  = v548;
        sub_100013D44(v548, v122);
        sub_100013D44(v124, v122);
        v125  = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        v126  = type metadata accessor for BinaryDecoder();
        v127  = (void *)swift_allocObject();
        v127[5]  = &_swiftEmptyDictionarySingleton;
        v127[2]  = v124;
        v127[3]  = v122;
        v128  = 0;
        switch(v123)
        {
          case 1uLL:
            v128  = (int)v548;
            break;
          case 2uLL:
            v128  = *(void *)(v548 + 16);
            break;
          default:
            break;
        }
        v127[4]  = v128;
        swift_beginAccess();
        v127[5]  = v125;
        swift_bridgeObjectRelease();
        *(void *)&v626[8]  = v126;
        *(void *)&v626[16]  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        *(void *)&v625  = v127;
        v357  = sub_100214CF4(&v625);
        v358  = v357;
        v360  = v359;
        v362  = v361;
        v596  = (char *)HIDWORD(v357);
        v597  = (char *)(v357 >> 40);
        v593  = (char *)(v357 >> 24);
        v363  = v122;
        v364  = v357 >> 16;
        v365  = v357 >> 8;
        v366  = v548;
        sub_10000C970(v548, v363);
        sub_10000C970(v366, v363);
        v316  = v558;
        *(unsigned char *)v558  = v358;
        *((unsigned char *)v316 + 1)  = v365;
        uint64_t v55 = (uint64_t)v629;
        *((unsigned char *)v316 + 2)  = v364;
        *((unsigned char *)v316 + 3)  = (_BYTE)v593;
        v367  = (char)v597;
        *((unsigned char *)v316 + 4)  = (_BYTE)v596;
        v368  = v594;
        *((unsigned char *)v316 + 5)  = v367;
        v316[1]  = v360;
        v316[2]  = v362;
        v306  = v368;
        goto LABEL_174;
      case 13:
        v129  = v548;
        sub_100013D44(v548, v58);
        sub_100013D44(v129, v58);
        v130  = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        v131  = type metadata accessor for BinaryDecoder();
        v132  = (void *)swift_allocObject();
        v132[5]  = &_swiftEmptyDictionarySingleton;
        v132[2]  = v129;
        v132[3]  = v58;
        v133  = 0;
        switch(v58 >> 62)
        {
          case 1uLL:
            v133  = (int)v129;
            break;
          case 2uLL:
            v133  = *(void *)(v129 + 16);
            break;
          default:
            break;
        }
        v132[4]  = v133;
        swift_beginAccess();
        v132[5]  = v130;
        swift_bridgeObjectRelease();
        *(void *)&v626[8]  = v131;
        *(void *)&v626[16]  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        *(void *)&v625  = v132;
        v369  = sub_100211C90(&v625);
        v370  = v369;
        v372  = v371;
        v374  = v373;
        v596  = (char *)HIBYTE(v373);
        v597  = 0;
        v592  = (char *)(v373 >> 40);
        v593  = (char *)HIWORD(v373);
        v590  = (char *)(v373 >> 24);
        v591  = (char *)HIDWORD(v373);
        v588  = (char *)(v373 >> 8);
        v589  = (char *)(v373 >> 16);
        v586  = (char *)HIDWORD(v369);
        v587  = (char *)(v369 >> 40);
        v375  = v369 >> 24;
        v376  = v369 >> 16;
        v377  = v369 >> 8;
        sub_10000C970(v129, v58);
        sub_10000C970(v129, v58);
        v316  = v563;
        *(unsigned char *)v563  = v370;
        *((unsigned char *)v316 + 1)  = v377;
        v378  = v594;
        *((unsigned char *)v316 + 2)  = v376;
        *((unsigned char *)v316 + 3)  = v375;
        uint64_t v55 = (uint64_t)v629;
        *((unsigned char *)v316 + 4)  = (_BYTE)v586;
        *((unsigned char *)v316 + 5)  = (_BYTE)v587;
        v316[1]  = v372;
        v306  = v378;
        *((unsigned char *)v316 + 16)  = v374;
        *((unsigned char *)v316 + 17)  = (_BYTE)v588;
        *((unsigned char *)v316 + 18)  = (_BYTE)v589;
        *((unsigned char *)v316 + 19)  = (_BYTE)v590;
        *((unsigned char *)v316 + 20)  = (_BYTE)v591;
        *((unsigned char *)v316 + 21)  = (_BYTE)v592;
        *((unsigned char *)v316 + 22)  = (_BYTE)v593;
        *((unsigned char *)v316 + 23)  = (_BYTE)v596;
        goto LABEL_174;
      case 14:
        v596  = (char *)(v58 >> 62);
        v134  = v548;
        sub_100013D44(v548, v58);
        sub_100013D44(v134, v58);
        v597  = (char *)sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        v135  = type metadata accessor for BinaryDecoder();
        v136  = (void *)swift_allocObject();
        v136[5]  = &_swiftEmptyDictionarySingleton;
        v136[2]  = v134;
        v136[3]  = v58;
        v137  = 0;
        switch((unint64_t)v596)
        {
          case 1uLL:
            v137  = (int)v548;
            break;
          case 2uLL:
            v137  = *(void *)(v548 + 16);
            break;
          default:
            break;
        }
        v136[4]  = v137;
        swift_beginAccess();
        v136[5]  = v597;
        swift_bridgeObjectRelease();
        v599  = v135;
        v600  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        v598[0]  = v136;
        sub_10021548C(v598, (uint64_t)&v625);
        v613  = v625;
        v614  = *(_OWORD *)v626;
        v615  = *(void *)&v626[16];
        v379  = v548;
        sub_10000C970(v548, v58);
        sub_10000C970(v379, v58);
        v380  = v614;
        v325  = v559;
        *v559  = v613;
        v325[1]  = v380;
        *((void *)v325 + 4)  = v615;
        goto LABEL_186;
      case 15:
        v138  = v58;
        v139  = v58 >> 62;
        v140  = v548;
        sub_100013D44(v548, v138);
        sub_100013D44(v140, v138);
        v141  = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        v142  = type metadata accessor for BinaryDecoder();
        v143  = (void *)swift_allocObject();
        v143[5]  = &_swiftEmptyDictionarySingleton;
        v143[2]  = v140;
        v143[3]  = v138;
        v144  = 0;
        switch(v139)
        {
          case 1uLL:
            v144  = (int)v548;
            break;
          case 2uLL:
            v144  = *(void *)(v548 + 16);
            break;
          default:
            break;
        }
        v143[4]  = v144;
        swift_beginAccess();
        v143[5]  = v141;
        swift_bridgeObjectRelease();
        *(void *)&v626[8]  = v142;
        *(void *)&v626[16]  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        *(void *)&v625  = v143;
        v381  = sub_100211EB4(&v625);
        v382  = v381;
        v384  = v383;
        LODWORD(v597)  = HIWORD(v383);
        v596  = (char *)HIWORD(v381);
        v593  = (char *)(v381 >> 40);
        v385  = HIDWORD(v381);
        v386  = v138;
        v387  = v381 >> 16;
        v388  = v548;
        sub_10000C970(v548, v386);
        sub_10000C970(v388, v386);
        v316  = v561;
        *(unsigned char *)v561  = v382;
        *((unsigned char *)v316 + 1)  = HIBYTE(v382) & 1;
        *((_WORD *)v316 + 1)  = v387;
        *((unsigned char *)v316 + 4)  = v385;
        v306  = v594;
        *((unsigned char *)v316 + 5)  = (_BYTE)v593;
        *((unsigned char *)v316 + 6)  = (_BYTE)v596;
        *((_WORD *)v316 + 4)  = v384;
        *((unsigned char *)v316 + 10)  = (_BYTE)v597;
        goto LABEL_174;
      case 16:
        v596  = (char *)(v58 >> 62);
        v145  = v548;
        sub_100013D44(v548, v58);
        sub_100013D44(v145, v58);
        v597  = (char *)sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        v146  = type metadata accessor for BinaryDecoder();
        v147  = (void *)swift_allocObject();
        v147[5]  = &_swiftEmptyDictionarySingleton;
        v147[2]  = v145;
        v147[3]  = v58;
        v148  = 0;
        switch((unint64_t)v596)
        {
          case 1uLL:
            v148  = (int)v548;
            break;
          case 2uLL:
            v148  = *(void *)(v548 + 16);
            break;
          default:
            break;
        }
        v147[4]  = v148;
        swift_beginAccess();
        v147[5]  = v597;
        swift_bridgeObjectRelease();
        v599  = v146;
        v600  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        v598[0]  = v147;
        sub_100214EDC(v598, (uint64_t)&v625);
        v616  = v625;
        v617  = *(_OWORD *)v626;
        v618  = *(_OWORD *)&v626[16];
        v389  = v548;
        sub_10000C970(v548, v58);
        sub_10000C970(v389, v58);
        v390  = v617;
        v325  = v560;
        *v560  = v616;
        v325[1]  = v390;
        v325[2]  = v618;
        goto LABEL_186;
      case 17:
        v149  = v548;
        sub_100013D44(v548, v58);
        sub_100013D44(v149, v58);
        v150  = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        v151  = type metadata accessor for BinaryDecoder();
        v152  = (void *)swift_allocObject();
        v152[5]  = &_swiftEmptyDictionarySingleton;
        v152[2]  = v149;
        v152[3]  = v58;
        v153  = 0;
        switch(v58 >> 62)
        {
          case 1uLL:
            v153  = (int)v149;
            break;
          case 2uLL:
            v153  = *(void *)(v149 + 16);
            break;
          default:
            break;
        }
        v152[4]  = v153;
        swift_beginAccess();
        v152[5]  = v150;
        swift_bridgeObjectRelease();
        *(void *)&v626[8]  = v151;
        *(void *)&v626[16]  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        *(void *)&v625  = v152;
        v391  = sub_1000E47F4(&v625);
        uint64_t v57 = v583;
        v392  = v391;
        v394  = v393;
        sub_10000C970(v149, v58);
        sub_10000C970(v149, v58);
        v395  = 17;
        goto LABEL_178;
      case 18:
        v154  = v548;
        sub_100013D44(v548, v58);
        sub_100013D44(v154, v58);
        v155  = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        v156  = type metadata accessor for BinaryDecoder();
        v157  = (void *)swift_allocObject();
        v157[5]  = &_swiftEmptyDictionarySingleton;
        v157[2]  = v154;
        v157[3]  = v58;
        v158  = 0;
        switch(v58 >> 62)
        {
          case 1uLL:
            v158  = (int)v154;
            break;
          case 2uLL:
            v158  = *(void *)(v154 + 16);
            break;
          default:
            break;
        }
        v157[4]  = v158;
        swift_beginAccess();
        v157[5]  = v155;
        swift_bridgeObjectRelease();
        *(void *)&v626[8]  = v156;
        *(void *)&v626[16]  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        *(void *)&v625  = v157;
        v396  = sub_100210FB0(&v625);
        v397  = v396;
        v399  = v398;
        v400  = HIWORD(v396);
        sub_10000C970(v154, v58);
        sub_10000C970(v154, v58);
        v350  = v562;
        *(unsigned char *)v562  = v397;
        *((_WORD *)v350 + 1)  = v400;
        v350[1]  = v399;
        goto LABEL_192;
      case 19:
        v159  = v58;
        v160  = v58 >> 62;
        v161  = v548;
        sub_100013D44(v548, v159);
        sub_100013D44(v161, v159);
        v162  = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        v163  = type metadata accessor for BinaryDecoder();
        v164  = (void *)swift_allocObject();
        v164[5]  = &_swiftEmptyDictionarySingleton;
        v164[2]  = v161;
        v164[3]  = v159;
        v165  = 0;
        switch(v160)
        {
          case 1uLL:
            v165  = (int)v548;
            break;
          case 2uLL:
            v165  = *(void *)(v548 + 16);
            break;
          default:
            break;
        }
        v164[4]  = v165;
        swift_beginAccess();
        v164[5]  = v162;
        swift_bridgeObjectRelease();
        *(void *)&v626[8]  = v163;
        *(void *)&v626[16]  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        *(void *)&v625  = v164;
        v401  = sub_100210D3C(&v625);
        v402  = v401;
        v404  = v403;
        v596  = (char *)(v401 >> 40);
        v597  = (char *)HIWORD(v401);
        v593  = (char *)HIDWORD(v401);
        v405  = v401 >> 24;
        v406  = v159;
        v407  = v401 >> 16;
        v408  = v401 >> 8;
        v409  = v548;
        sub_10000C970(v548, v406);
        sub_10000C970(v409, v406);
        v316  = v564;
        *(unsigned char *)v564  = v402;
        *((unsigned char *)v316 + 1)  = v408;
        uint64_t v55 = (uint64_t)v629;
        *((unsigned char *)v316 + 2)  = v407;
        *((unsigned char *)v316 + 3)  = v405;
        v306  = v594;
        *((unsigned char *)v316 + 4)  = (_BYTE)v593;
        *((unsigned char *)v316 + 5)  = (_BYTE)v596;
        *((unsigned char *)v316 + 6)  = (_BYTE)v597;
        v316[1]  = v404;
        goto LABEL_174;
      case 20:
        v166  = v58;
        v167  = v58 >> 62;
        v168  = v548;
        sub_100013D44(v548, v166);
        sub_100013D44(v168, v166);
        v169  = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        v170  = type metadata accessor for BinaryDecoder();
        v171  = (void *)swift_allocObject();
        v171[5]  = &_swiftEmptyDictionarySingleton;
        v171[2]  = v168;
        v171[3]  = v166;
        v172  = 0;
        switch(v167)
        {
          case 1uLL:
            v172  = (int)v548;
            break;
          case 2uLL:
            v172  = *(void *)(v548 + 16);
            break;
          default:
            break;
        }
        v171[4]  = v172;
        swift_beginAccess();
        v171[5]  = v169;
        swift_bridgeObjectRelease();
        *(void *)&v626[8]  = v170;
        *(void *)&v626[16]  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        *(void *)&v625  = v171;
        v410  = NANAttribute.DeviceLink.init(from:)(&v625);
        v412  = v411;
        v414  = v413;
        v416  = v415;
        v596  = (char *)HIDWORD(v410);
        v597  = 0;
        v593  = (char *)(v410 >> 24);
        v417  = v548;
        sub_10000C970(v548, v166);
        sub_10000C970(v417, v166);
        v316  = v565;
        *(_WORD *)v565  = v410;
        uint64_t v55 = (uint64_t)v629;
        *((unsigned char *)v316 + 2)  = BYTE2(v410);
        v418  = v594;
        *((unsigned char *)v316 + 3)  = (_BYTE)v593;
        *((unsigned char *)v316 + 4)  = (_BYTE)v596;
        *((unsigned char *)v316 + 5)  = BYTE5(v410) & 1;
        v316[1]  = v412;
        v306  = v418;
        *((unsigned char *)v316 + 16)  = v414 & 1;
        v316[3]  = v416;
        goto LABEL_174;
      case 21:
        v173  = v548;
        sub_100013D44(v548, v58);
        sub_100013D44(v173, v58);
        v174  = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        v175  = type metadata accessor for BinaryDecoder();
        v176  = (void *)swift_allocObject();
        v176[5]  = &_swiftEmptyDictionarySingleton;
        v176[2]  = v173;
        v176[3]  = v58;
        v177  = 0;
        switch(v58 >> 62)
        {
          case 1uLL:
            v177  = (int)v173;
            break;
          case 2uLL:
            v177  = *(void *)(v173 + 16);
            break;
          default:
            break;
        }
        v176[4]  = v177;
        swift_beginAccess();
        v176[5]  = v174;
        swift_bridgeObjectRelease();
        *(void *)&v626[8]  = v175;
        *(void *)&v626[16]  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        *(void *)&v625  = v176;
        v419  = sub_100211750(&v625);
        uint64_t v57 = v584;
        v420  = v419;
        v421  = HIWORD(v419);
        sub_10000C970(v173, v58);
        sub_10000C970(v173, v58);
        *uint64_t v57 = v420;
        *((_WORD *)v57 + 1)  = v421;
        goto LABEL_179;
      case 22:
        v178  = v548;
        sub_100013D44(v548, v58);
        sub_100013D44(v178, v58);
        v179  = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        v180  = type metadata accessor for BinaryDecoder();
        v181  = (void *)swift_allocObject();
        v181[5]  = &_swiftEmptyDictionarySingleton;
        v181[2]  = v178;
        v181[3]  = v58;
        v182  = 0;
        switch(v58 >> 62)
        {
          case 1uLL:
            v182  = (int)v178;
            break;
          case 2uLL:
            v182  = *(void *)(v178 + 16);
            break;
          default:
            break;
        }
        v181[4]  = v182;
        swift_beginAccess();
        v181[5]  = v179;
        swift_bridgeObjectRelease();
        *(void *)&v626[8]  = v180;
        *(void *)&v626[16]  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        *(void *)&v625  = v181;
        v422  = sub_1000E47F4(&v625);
        uint64_t v57 = v585;
        v392  = v422;
        v394  = v423;
        sub_10000C970(v178, v58);
        sub_10000C970(v178, v58);
        v395  = 22;
        goto LABEL_178;
      case 23:
        v183  = v548;
        sub_100013D44(v548, v58);
        sub_100013D44(v183, v58);
        v184  = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        v185  = type metadata accessor for BinaryDecoder();
        v186  = (void *)swift_allocObject();
        v186[5]  = &_swiftEmptyDictionarySingleton;
        v186[2]  = v183;
        v186[3]  = v58;
        v187  = 0;
        switch(v58 >> 62)
        {
          case 1uLL:
            v187  = (int)v183;
            break;
          case 2uLL:
            v187  = *(void *)(v183 + 16);
            break;
          default:
            break;
        }
        v186[4]  = v187;
        swift_beginAccess();
        v186[5]  = v184;
        swift_bridgeObjectRelease();
        *(void *)&v626[8]  = v185;
        *(void *)&v626[16]  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        *(void *)&v625  = v186;
        v424  = NANAttribute.UnalignedSchedule.init(from:)(&v625);
        *(void *)&v601  = v425;
        *((void *)&v601 + 1)  = v426;
        v427  = v424;
        v429  = v428;
        v430  = v425;
        LODWORD(v593)  = BYTE3(v425);
        v596  = (char *)HIDWORD(v426);
        v597  = 0;
        v591  = (char *)(v425 >> 16);
        v592  = *(char **)((char *)&v601 + 4);
        v590  = (char *)(v425 >> 8);
        v431  = HIDWORD(v428);
        v432  = HIDWORD(v424);
        v433  = v424 >> 8;
        sub_10000C970(v183, v58);
        sub_10000C970(v183, v58);
        v316  = v566;
        *(unsigned char *)v566  = v427;
        *((unsigned char *)v316 + 1)  = v433;
        *((_DWORD *)v316 + 1)  = v432;
        *((_DWORD *)v316 + 2)  = v429;
        *((_DWORD *)v316 + 3)  = v431;
        v306  = v594;
        *((unsigned char *)v316 + 16)  = v430;
        *((unsigned char *)v316 + 17)  = (_BYTE)v590;
        uint64_t v55 = (uint64_t)v629;
        *((unsigned char *)v316 + 18)  = (_BYTE)v591;
        *((unsigned char *)v316 + 19)  = (_BYTE)v593;
        *(uint64_t *)((char *)v316 + 20)  = (uint64_t)v592;
        *((_WORD *)v316 + 14)  = (_WORD)v596;
        goto LABEL_174;
      case 24:
        v188  = v548;
        sub_100013D44(v548, v58);
        sub_100013D44(v188, v58);
        v189  = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        v190  = type metadata accessor for BinaryDecoder();
        v191  = (void *)swift_allocObject();
        v191[5]  = &_swiftEmptyDictionarySingleton;
        v191[2]  = v188;
        v191[3]  = v58;
        v192  = 0;
        switch(v58 >> 62)
        {
          case 1uLL:
            v192  = (int)v188;
            break;
          case 2uLL:
            v192  = *(void *)(v188 + 16);
            break;
          default:
            break;
        }
        v191[4]  = v192;
        swift_beginAccess();
        v191[5]  = v189;
        swift_bridgeObjectRelease();
        *(void *)&v626[8]  = v190;
        *(void *)&v626[16]  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        *(void *)&v625  = v191;
        v434  = sub_1000E47F4(&v625);
        uint64_t v57 = v586;
        v392  = v434;
        v394  = v435;
        sub_10000C970(v188, v58);
        sub_10000C970(v188, v58);
        v395  = 24;
        goto LABEL_178;
      case 25:
        v193  = v548;
        sub_100013D44(v548, v58);
        sub_100013D44(v193, v58);
        v194  = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        v195  = type metadata accessor for BinaryDecoder();
        v196  = (void *)swift_allocObject();
        v196[5]  = &_swiftEmptyDictionarySingleton;
        v196[2]  = v193;
        v196[3]  = v58;
        v197  = 0;
        switch(v58 >> 62)
        {
          case 1uLL:
            v197  = (int)v193;
            break;
          case 2uLL:
            v197  = *(void *)(v193 + 16);
            break;
          default:
            break;
        }
        v196[4]  = v197;
        swift_beginAccess();
        v196[5]  = v194;
        swift_bridgeObjectRelease();
        *(void *)&v626[8]  = v195;
        *(void *)&v626[16]  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        *(void *)&v625  = v196;
        v436  = sub_1000E47F4(&v625);
        uint64_t v57 = v587;
        v392  = v436;
        v394  = v437;
        sub_10000C970(v193, v58);
        sub_10000C970(v193, v58);
        v395  = 25;
        goto LABEL_178;
      case 26:
        v198  = v548;
        sub_100013D44(v548, v58);
        sub_100013D44(v198, v58);
        v199  = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        v200  = type metadata accessor for BinaryDecoder();
        v201  = (void *)swift_allocObject();
        v201[5]  = &_swiftEmptyDictionarySingleton;
        v201[2]  = v198;
        v201[3]  = v58;
        v202  = 0;
        switch(v58 >> 62)
        {
          case 1uLL:
            v202  = (int)v198;
            break;
          case 2uLL:
            v202  = *(void *)(v198 + 16);
            break;
          default:
            break;
        }
        v201[4]  = v202;
        swift_beginAccess();
        v201[5]  = v199;
        swift_bridgeObjectRelease();
        *(void *)&v626[8]  = v200;
        *(void *)&v626[16]  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        *(void *)&v625  = v201;
        v438  = NANAttribute.RangingInformation.init(from:)(&v625);
        uint64_t v57 = v588;
        v439  = v438;
        v440  = v438 >> 16;
        sub_10000C970(v198, v58);
        sub_10000C970(v198, v58);
        *uint64_t v57 = v439;
        *((_WORD *)v57 + 1)  = v440;
        v57[4]  = BYTE4(v439) & 1;
        goto LABEL_179;
      case 27:
        v203  = v58;
        v204  = v58 >> 62;
        v205  = v548;
        sub_100013D44(v548, v203);
        sub_100013D44(v205, v203);
        v206  = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        v207  = type metadata accessor for BinaryDecoder();
        v208  = (void *)swift_allocObject();
        v208[5]  = &_swiftEmptyDictionarySingleton;
        v208[2]  = v205;
        v208[3]  = v203;
        v209  = 0;
        switch(v204)
        {
          case 1uLL:
            v209  = (int)v548;
            break;
          case 2uLL:
            v209  = *(void *)(v548 + 16);
            break;
          default:
            break;
        }
        v208[4]  = v209;
        swift_beginAccess();
        v208[5]  = v206;
        swift_bridgeObjectRelease();
        *(void *)&v626[8]  = v207;
        *(void *)&v626[16]  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        *(void *)&v625  = v208;
        v441  = NANAttribute.RangingSetup.init(from:)(&v625);
        v442  = v441;
        v444  = v443;
        v446  = v445;
        v596  = (char *)(v441 >> 24);
        v597  = (char *)HIDWORD(v441);
        v593  = (char *)(v441 >> 16);
        v447  = v203;
        v448  = v441 >> 8;
        v449  = v548;
        sub_10000C970(v548, v447);
        sub_10000C970(v449, v447);
        v316  = v567;
        *(unsigned char *)v567  = v442;
        *((unsigned char *)v316 + 1)  = v448;
        v450  = v594;
        *((unsigned char *)v316 + 2)  = (_BYTE)v593;
        *((unsigned char *)v316 + 3)  = (_BYTE)v596;
        *((_DWORD *)v316 + 1)  = v597;
        v451  = v444 & 1;
        v306  = v450;
        *((unsigned char *)v316 + 8)  = v451;
        v316[2]  = v446;
        goto LABEL_174;
      case 28:
        v210  = v548;
        sub_100013D44(v548, v58);
        sub_100013D44(v210, v58);
        v211  = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for BinaryDecoder();
        v212  = (void *)swift_allocObject();
        v212[5]  = &_swiftEmptyDictionarySingleton;
        v212[2]  = v210;
        v212[3]  = v58;
        v213  = 0;
        switch(v58 >> 62)
        {
          case 1uLL:
            v213  = (int)v210;
            break;
          case 2uLL:
            v213  = *(void *)(v210 + 16);
            break;
          default:
            break;
        }
        v212[4]  = v213;
        swift_beginAccess();
        v212[5]  = v211;
        swift_bridgeObjectRelease();
        *(void *)&v626[8]  = &type metadata for BinaryDecoder.UnkeyedContainer;
        *(void *)&v626[16]  = sub_10008B64C();
        *(void *)&v625  = v212;
        sub_100039448((uint64_t)&v625, (uint64_t)&type metadata for BinaryDecoder.UnkeyedContainer);
        swift_retain();
        v452  = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
        v542  = sub_1001E1368(v452 << 8, (uint64_t)&v625);
        sub_100010754((uint64_t)&v625);
        swift_release();
        sub_10000C970(v210, v58);
        sub_10000C970(v210, v58);
        v327  = v553;
        *(void *)v553  = v542;
LABEL_197:
        swift_storeEnumTagMultiPayload();
        v524  = (uint64_t)v327;
        goto LABEL_198;
      case 29:
        v214  = v548;
        sub_100013D44(v548, v58);
        sub_100013D44(v214, v58);
        v215  = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        v216  = type metadata accessor for BinaryDecoder();
        v217  = (void *)swift_allocObject();
        v217[5]  = &_swiftEmptyDictionarySingleton;
        v217[2]  = v214;
        v217[3]  = v58;
        v218  = 0;
        switch(v58 >> 62)
        {
          case 1uLL:
            v218  = (int)v214;
            break;
          case 2uLL:
            v218  = *(void *)(v214 + 16);
            break;
          default:
            break;
        }
        v217[4]  = v218;
        swift_beginAccess();
        v217[5]  = v215;
        swift_bridgeObjectRelease();
        *(void *)&v626[8]  = v216;
        *(void *)&v626[16]  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        *(void *)&v625  = v217;
        v453  = sub_1002121F4(&v625);
        v455  = v454;
        v457  = v456;
        sub_10000C970(v214, v58);
        sub_10000C970(v214, v58);
        v350  = v568;
        *(unsigned char *)v568  = v453;
        *((unsigned char *)v350 + 1)  = HIBYTE(v453) & 1;
        v350[1]  = v455;
        v350[2]  = v457;
        goto LABEL_192;
      case 30:
        v219  = v58;
        v220  = v58 >> 62;
        v221  = v548;
        sub_100013D44(v548, v219);
        sub_100013D44(v221, v219);
        v222  = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        v223  = type metadata accessor for BinaryDecoder();
        v224  = (void *)swift_allocObject();
        v224[5]  = &_swiftEmptyDictionarySingleton;
        v224[2]  = v221;
        v224[3]  = v219;
        v225  = 0;
        switch(v220)
        {
          case 1uLL:
            v225  = (int)v548;
            break;
          case 2uLL:
            v225  = *(void *)(v548 + 16);
            break;
          default:
            break;
        }
        v224[4]  = v225;
        swift_beginAccess();
        v224[5]  = v222;
        swift_bridgeObjectRelease();
        *(void *)&v626[8]  = v223;
        *(void *)&v626[16]  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        *(void *)&v625  = v224;
        v458  = sub_100213B94(&v625);
        v459  = v458;
        v461  = v460;
        v463  = v462;
        LODWORD(v596)  = HIWORD(v462);
        v584  = (char *)HIDWORD(v458);
        v464  = v458 >> 24;
        v465  = v458 >> 16;
        v466  = v458 >> 8;
        v593  = (char *)HIBYTE(v460);
        v592  = (char *)HIWORD(v460);
        v590  = (char *)HIBYTE(v458);
        v591  = (char *)(v460 >> 40);
        v588  = (char *)HIWORD(v458);
        v589  = (char *)(v460 >> 24);
        v586  = (char *)(v458 >> 40);
        v587  = (char *)(v460 >> 16);
        v597  = 0;
        v585  = (char *)(v460 >> 8);
        v467  = v548;
        sub_10000C970(v548, v219);
        sub_10000C970(v467, v219);
        v468  = v571;
        *v571  = v459;
        v468[1]  = v466;
        v468[2]  = v465;
        v469  = v594;
        v468[3]  = v464;
        v468[4]  = (_BYTE)v584;
        uint64_t v55 = (uint64_t)v629;
        v468[5]  = (_BYTE)v586;
        v468[6]  = (_BYTE)v588;
        v468[7]  = (_BYTE)v590;
        v468[8]  = v461;
        v468[9]  = (_BYTE)v585;
        v468[10]  = (_BYTE)v587;
        v468[11]  = (_BYTE)v589;
        v470  = HIDWORD(v461) & 1;
        v306  = v469;
        v468[12]  = v470;
        v468[13]  = (_BYTE)v591;
        v468[14]  = (_BYTE)v592;
        v468[15]  = (_BYTE)v593;
        *((_WORD *)v468 + 8)  = v463;
        *((_WORD *)v468 + 9)  = (_WORD)v596;
        swift_storeEnumTagMultiPayload();
        v322  = (uint64_t)v468;
        goto LABEL_175;
      case 31:
        v226  = v548;
        sub_100013D44(v548, v58);
        sub_100013D44(v226, v58);
        v227  = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        v228  = type metadata accessor for BinaryDecoder();
        v229  = (void *)swift_allocObject();
        v229[5]  = &_swiftEmptyDictionarySingleton;
        v229[2]  = v226;
        v229[3]  = v58;
        v230  = 0;
        switch(v58 >> 62)
        {
          case 1uLL:
            v230  = (int)v226;
            break;
          case 2uLL:
            v230  = *(void *)(v226 + 16);
            break;
          default:
            break;
        }
        v229[4]  = v230;
        swift_beginAccess();
        v229[5]  = v227;
        swift_bridgeObjectRelease();
        *(void *)&v626[8]  = v228;
        *(void *)&v626[16]  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        *(void *)&v625  = v229;
        v471  = sub_1002107F8(&v625);
        v472  = v471;
        v474  = v473;
        v596  = (char *)HIDWORD(v473);
        v597  = 0;
        v592  = (char *)(v473 >> 8);
        v593  = (char *)(v473 >> 16);
        v590  = (char *)HIWORD(v471);
        v591  = (char *)HIBYTE(v471);
        v589  = (char *)(v471 >> 40);
        v475  = HIDWORD(v471);
        v476  = v471 >> 24;
        v477  = v471 >> 16;
        v478  = v471 >> 8;
        sub_10000C970(v226, v58);
        sub_10000C970(v226, v58);
        v316  = v569;
        *(unsigned char *)v569  = v472;
        *((unsigned char *)v316 + 1)  = v478;
        *((unsigned char *)v316 + 2)  = v477;
        *((unsigned char *)v316 + 3)  = v476;
        *((unsigned char *)v316 + 4)  = v475;
        *((unsigned char *)v316 + 5)  = (_BYTE)v589;
        uint64_t v55 = (uint64_t)v629;
        *((unsigned char *)v316 + 6)  = (_BYTE)v590;
        *((unsigned char *)v316 + 7)  = (_BYTE)v591;
        *((unsigned char *)v316 + 8)  = v474;
        *((unsigned char *)v316 + 9)  = (_BYTE)v592;
        v306  = v594;
        *((_WORD *)v316 + 5)  = (_WORD)v593;
        *((_WORD *)v316 + 6)  = (_WORD)v596;
        goto LABEL_174;
      case 32:
        v231  = v58;
        v232  = v58 >> 62;
        v233  = v548;
        sub_100013D44(v548, v231);
        sub_100013D44(v233, v231);
        v234  = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        v235  = type metadata accessor for BinaryDecoder();
        v236  = (void *)swift_allocObject();
        v236[5]  = &_swiftEmptyDictionarySingleton;
        v236[2]  = v233;
        v236[3]  = v231;
        v237  = 0;
        switch(v232)
        {
          case 1uLL:
            v237  = (int)v548;
            break;
          case 2uLL:
            v237  = *(void *)(v548 + 16);
            break;
          default:
            break;
        }
        v236[4]  = v237;
        swift_beginAccess();
        v236[5]  = v234;
        swift_bridgeObjectRelease();
        *(void *)&v626[8]  = v235;
        *(void *)&v626[16]  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        *(void *)&v625  = v236;
        v479  = sub_1002111F8(&v625);
        v480  = v479;
        v482  = v481;
        v484  = v483;
        LODWORD(v597)  = HIWORD(v483);
        v596  = (char *)HIWORD(v481);
        v592  = (char *)HIDWORD(v481);
        v593  = (char *)(v481 >> 40);
        v590  = (char *)(v481 >> 16);
        v591  = (char *)(v481 >> 24);
        v588  = (char *)HIBYTE(v479);
        v589  = (char *)(v481 >> 8);
        v586  = (char *)(v479 >> 40);
        v587  = (char *)HIWORD(v479);
        v584  = (char *)(v479 >> 24);
        v585  = (char *)HIDWORD(v479);
        v485  = v479 >> 16;
        v486  = v231;
        v487  = v479 >> 8;
        v488  = v548;
        sub_10000C970(v548, v486);
        sub_10000C970(v488, v486);
        v316  = v574;
        *(unsigned char *)v574  = v480;
        *((unsigned char *)v316 + 1)  = v487;
        *((unsigned char *)v316 + 2)  = v485;
        v489  = (char)v585;
        *((unsigned char *)v316 + 3)  = (_BYTE)v584;
        v490  = v594;
        *((unsigned char *)v316 + 4)  = v489;
        *((unsigned char *)v316 + 5)  = (_BYTE)v586;
        uint64_t v55 = (uint64_t)v629;
        *((unsigned char *)v316 + 6)  = (_BYTE)v587;
        *((unsigned char *)v316 + 7)  = (_BYTE)v588;
        *((unsigned char *)v316 + 8)  = v482;
        v306  = v490;
        *((unsigned char *)v316 + 9)  = (_BYTE)v589;
        *((unsigned char *)v316 + 10)  = (_BYTE)v590;
        *((unsigned char *)v316 + 11)  = (_BYTE)v591;
        *((unsigned char *)v316 + 12)  = (_BYTE)v592;
        *((unsigned char *)v316 + 13)  = (_BYTE)v593;
        *((unsigned char *)v316 + 14)  = (_BYTE)v596;
        *((_WORD *)v316 + 8)  = v484;
        *((_WORD *)v316 + 9)  = (_WORD)v597;
        goto LABEL_174;
      case 33:
        v238  = v548;
        sub_100013D44(v548, v58);
        sub_100013D44(v238, v58);
        v239  = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        v240  = type metadata accessor for BinaryDecoder();
        v241  = (void *)swift_allocObject();
        v241[5]  = &_swiftEmptyDictionarySingleton;
        v241[2]  = v238;
        v241[3]  = v58;
        v242  = 0;
        switch(v58 >> 62)
        {
          case 1uLL:
            v242  = (int)v238;
            break;
          case 2uLL:
            v242  = *(void *)(v238 + 16);
            break;
          default:
            break;
        }
        v241[4]  = v242;
        swift_beginAccess();
        v241[5]  = v239;
        swift_bridgeObjectRelease();
        *(void *)&v626[8]  = v240;
        *(void *)&v626[16]  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        *(void *)&v625  = v241;
        v491  = sub_1002114A8(&v625);
        v492  = v491;
        v494  = v493;
        v496  = v495;
        v498  = v497;
        v596  = (char *)HIDWORD(v493);
        v597  = 0;
        v592  = (char *)HIBYTE(v491);
        v593  = (char *)(v493 >> 16);
        v590  = (char *)(v491 >> 40);
        v591  = (char *)HIWORD(v491);
        v588  = (char *)(v491 >> 24);
        v589  = (char *)HIDWORD(v491);
        v499  = v491 >> 16;
        v500  = v491 >> 8;
        sub_10000C970(v238, v58);
        sub_10000C970(v238, v58);
        v316  = v572;
        *(unsigned char *)v572  = v492;
        *((unsigned char *)v316 + 1)  = v500;
        *((unsigned char *)v316 + 2)  = v499;
        uint64_t v55 = (uint64_t)v629;
        *((unsigned char *)v316 + 3)  = (_BYTE)v588;
        *((unsigned char *)v316 + 4)  = (_BYTE)v589;
        *((unsigned char *)v316 + 5)  = (_BYTE)v590;
        *((unsigned char *)v316 + 6)  = (_BYTE)v591;
        *((unsigned char *)v316 + 7)  = (_BYTE)v592;
        *((unsigned char *)v316 + 8)  = v494;
        v501  = v594;
        *((_WORD *)v316 + 5)  = (_WORD)v593;
        *((_WORD *)v316 + 6)  = (_WORD)v596;
        v316[2]  = v496;
        v316[3]  = v498;
        v306  = v501;
        goto LABEL_174;
      case 34:
        v243  = v548;
        sub_100013D44(v548, v58);
        sub_100013D44(v243, v58);
        v244  = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        v245  = type metadata accessor for BinaryDecoder();
        v246  = (void *)swift_allocObject();
        v246[5]  = &_swiftEmptyDictionarySingleton;
        v246[2]  = v243;
        v246[3]  = v58;
        v247  = 0;
        switch(v58 >> 62)
        {
          case 1uLL:
            v247  = (int)v243;
            break;
          case 2uLL:
            v247  = *(void *)(v243 + 16);
            break;
          default:
            break;
        }
        v246[4]  = v247;
        swift_beginAccess();
        v246[5]  = v244;
        swift_bridgeObjectRelease();
        *(void *)&v626[8]  = v245;
        *(void *)&v626[16]  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        *(void *)&v625  = v246;
        v502  = sub_1002130B0(&v625);
        uint64_t v57 = v589;
        v503  = v502;
        v505  = v504;
        sub_10000C970(v243, v58);
        sub_10000C970(v243, v58);
        *uint64_t v57 = v503;
        *((void *)v57 + 1)  = v505;
        goto LABEL_179;
      case 35:
        v248  = v548;
        sub_100013D44(v548, v58);
        sub_100013D44(v248, v58);
        v249  = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        v250  = type metadata accessor for BinaryDecoder();
        v251  = (void *)swift_allocObject();
        v251[5]  = &_swiftEmptyDictionarySingleton;
        v251[2]  = v248;
        v251[3]  = v58;
        v252  = 0;
        switch(v58 >> 62)
        {
          case 1uLL:
            v252  = (int)v248;
            break;
          case 2uLL:
            v252  = *(void *)(v248 + 16);
            break;
          default:
            break;
        }
        v251[4]  = v252;
        swift_beginAccess();
        v251[5]  = v249;
        swift_bridgeObjectRelease();
        *(void *)&v626[8]  = v250;
        *(void *)&v626[16]  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        *(void *)&v625  = v251;
        v506  = sub_100213E9C(&v625);
        unint64_t v56 = v590;
        v507  = v506;
        sub_10000C970(v248, v58);
        sub_10000C970(v248, v58);
        *(void *)unint64_t v56 = v507;
        goto LABEL_189;
      case 36:
        v253  = v548;
        sub_100013D44(v548, v58);
        sub_100013D44(v253, v58);
        v254  = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        v255  = type metadata accessor for BinaryDecoder();
        v256  = (void *)swift_allocObject();
        v256[5]  = &_swiftEmptyDictionarySingleton;
        v256[2]  = v253;
        v256[3]  = v58;
        v257  = 0;
        switch(v58 >> 62)
        {
          case 1uLL:
            v257  = (int)v253;
            break;
          case 2uLL:
            v257  = *(void *)(v253 + 16);
            break;
          default:
            break;
        }
        v256[4]  = v257;
        swift_beginAccess();
        v256[5]  = v254;
        swift_bridgeObjectRelease();
        *(void *)&v626[8]  = v255;
        *(void *)&v626[16]  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        *(void *)&v625  = v256;
        v508  = sub_100212D38(&v625);
        v510  = v509;
        v512  = v511;
        sub_10000C970(v253, v58);
        sub_10000C970(v253, v58);
        v350  = v570;
        *(unsigned char *)v570  = v508;
        v350[1]  = v510;
        v350[2]  = v512;
        goto LABEL_192;
      case 37:
        v258  = v58;
        v259  = v58 >> 62;
        v260  = v548;
        sub_100013D44(v548, v258);
        sub_100013D44(v260, v258);
        v261  = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        v262  = type metadata accessor for BinaryDecoder();
        v263  = (void *)swift_allocObject();
        v263[5]  = &_swiftEmptyDictionarySingleton;
        v263[2]  = v260;
        v263[3]  = v258;
        v264  = 0;
        switch(v259)
        {
          case 1uLL:
            v264  = (int)v548;
            break;
          case 2uLL:
            v264  = *(void *)(v548 + 16);
            break;
          default:
            break;
        }
        v263[4]  = v264;
        swift_beginAccess();
        v263[5]  = v261;
        swift_bridgeObjectRelease();
        *(void *)&v626[8]  = v262;
        *(void *)&v626[16]  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        *(void *)&v625  = v263;
        v513  = sub_100213734(&v625);
        v515  = v514;
        v517  = v516;
        v519  = v518;
        LODWORD(v597)  = HIWORD(v516);
        v520  = v548;
        sub_10000C970(v548, v258);
        sub_10000C970(v520, v258);
        v316  = v573;
        *v573  = v513;
        v316[1]  = v515;
        *((_WORD *)v316 + 8)  = v517;
        *((unsigned char *)v316 + 18)  = (_BYTE)v597;
        v306  = v594;
        v316[3]  = v519;
LABEL_174:
        swift_storeEnumTagMultiPayload();
        v322  = (uint64_t)v316;
        goto LABEL_175;
      case 38:
        v265  = v548;
        sub_100013D44(v548, v58);
        sub_100013D44(v265, v58);
        v266  = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        v267  = type metadata accessor for BinaryDecoder();
        v268  = (void *)swift_allocObject();
        v268[5]  = &_swiftEmptyDictionarySingleton;
        v268[2]  = v265;
        v268[3]  = v58;
        v269  = 0;
        switch(v58 >> 62)
        {
          case 1uLL:
            v269  = (int)v265;
            break;
          case 2uLL:
            v269  = *(void *)(v265 + 16);
            break;
          default:
            break;
        }
        v268[4]  = v269;
        swift_beginAccess();
        v268[5]  = v266;
        swift_bridgeObjectRelease();
        *(void *)&v626[8]  = v267;
        *(void *)&v626[16]  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        *(void *)&v625  = v268;
        v522  = sub_1000E47F4(&v625);
        uint64_t v57 = v591;
        v392  = v522;
        v394  = v523;
        sub_10000C970(v265, v58);
        sub_10000C970(v265, v58);
        v395  = 38;
LABEL_178:
        *uint64_t v57 = v395;
        *((void *)v57 + 1)  = v392;
        *((void *)v57 + 2)  = v394;
        goto LABEL_179;
      case 39:
        v270  = v548;
        sub_100013D44(v548, v58);
        sub_100013D44(v270, v58);
        v597  = (char *)sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        v271  = type metadata accessor for BinaryDecoder();
        v272  = (void *)swift_allocObject();
        v272[5]  = &_swiftEmptyDictionarySingleton;
        v272[2]  = v270;
        v272[3]  = v58;
        v273  = 0;
        switch(v58 >> 62)
        {
          case 1uLL:
            v273  = (int)v270;
            break;
          case 2uLL:
            v273  = *(void *)(v270 + 16);
            break;
          default:
            break;
        }
        v272[4]  = v273;
        swift_beginAccess();
        v272[5]  = v597;
        swift_bridgeObjectRelease();
        *(void *)&v626[8]  = v271;
        *(void *)&v626[16]  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        *(void *)&v625  = v272;
        v525  = sub_100212844(&v625);
        sub_10000C970(v270, v58);
        sub_10000C970(v270, v58);
        *(void *)uint64_t v57 = v525;
        goto LABEL_179;
      case 40:
        v274  = v548;
        sub_100013D44(v548, v58);
        sub_100013D44(v274, v58);
        v596  = (char *)sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        v275  = type metadata accessor for BinaryDecoder();
        v276  = (void *)swift_allocObject();
        v276[5]  = &_swiftEmptyDictionarySingleton;
        v276[2]  = v274;
        v276[3]  = v58;
        v277  = 0;
        switch(v58 >> 62)
        {
          case 1uLL:
            v277  = (int)v274;
            break;
          case 2uLL:
            v277  = *(void *)(v274 + 16);
            break;
          default:
            break;
        }
        v276[4]  = v277;
        swift_beginAccess();
        v276[5]  = v596;
        swift_bridgeObjectRelease();
        *(void *)&v626[8]  = v275;
        *(void *)&v626[16]  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        *(void *)&v625  = v276;
        v526  = sub_1002118F4(&v625);
        sub_10000C970(v274, v58);
        sub_10000C970(v274, v58);
        *(void *)unint64_t v56 = v526;
        goto LABEL_189;
      case 41:
        v596  = (char *)(v58 >> 62);
        v278  = v548;
        sub_100013D44(v548, v58);
        sub_100013D44(v278, v58);
        v597  = (char *)sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        v279  = type metadata accessor for BinaryDecoder();
        v280  = (void *)swift_allocObject();
        v280[5]  = &_swiftEmptyDictionarySingleton;
        v280[2]  = v278;
        v280[3]  = v58;
        v281  = 0;
        switch((unint64_t)v596)
        {
          case 1uLL:
            v281  = (int)v548;
            break;
          case 2uLL:
            v281  = *(void *)(v548 + 16);
            break;
          default:
            break;
        }
        v280[4]  = v281;
        swift_beginAccess();
        v280[5]  = v597;
        swift_bridgeObjectRelease();
        v599  = v279;
        v600  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        v598[0]  = v280;
        sub_1002184A0(v598, (uint64_t)&v625);
        v619  = v625;
        v620  = *(_OWORD *)v626;
        v621  = *(_OWORD *)&v626[16];
        v622  = v627;
        v527  = v548;
        sub_10000C970(v548, v58);
        sub_10000C970(v527, v58);
        v528  = v620;
        v325  = v576;
        *v576  = v619;
        v325[1]  = v528;
        v529  = v622;
        v325[2]  = v621;
        v325[3]  = v529;
LABEL_186:
        swift_storeEnumTagMultiPayload();
        v524  = (uint64_t)v325;
        goto LABEL_198;
      case 42:
        v282  = v548;
        sub_100013D44(v548, v58);
        sub_100013D44(v282, v58);
        v283  = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        v284  = type metadata accessor for BinaryDecoder();
        v285  = (void *)swift_allocObject();
        v285[5]  = &_swiftEmptyDictionarySingleton;
        v285[2]  = v282;
        v285[3]  = v58;
        v286  = 0;
        switch(v58 >> 62)
        {
          case 1uLL:
            v286  = (int)v282;
            break;
          case 2uLL:
            v286  = *(void *)(v282 + 16);
            break;
          default:
            break;
        }
        v285[4]  = v286;
        swift_beginAccess();
        v285[5]  = v283;
        swift_bridgeObjectRelease();
        *(void *)&v626[8]  = v284;
        *(void *)&v626[16]  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        *(void *)&v625  = v285;
        v530  = sub_1002139F8(&v625);
        unint64_t v56 = v592;
        v531  = v530;
        sub_10000C970(v282, v58);
        sub_10000C970(v282, v58);
        *(void *)unint64_t v56 = v531;
LABEL_189:
        swift_storeEnumTagMultiPayload();
        v524  = (uint64_t)v56;
        goto LABEL_198;
      case 43:
        v287  = v548;
        sub_100013D44(v548, v58);
        sub_100013D44(v287, v58);
        v288  = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        v289  = type metadata accessor for BinaryDecoder();
        v290  = (void *)swift_allocObject();
        v290[5]  = &_swiftEmptyDictionarySingleton;
        v290[2]  = v287;
        v290[3]  = v58;
        v291  = 0;
        switch(v58 >> 62)
        {
          case 1uLL:
            v291  = (int)v287;
            break;
          case 2uLL:
            v291  = *(void *)(v287 + 16);
            break;
          default:
            break;
        }
        v290[4]  = v291;
        swift_beginAccess();
        v290[5]  = v288;
        swift_bridgeObjectRelease();
        *(void *)&v626[8]  = v289;
        *(void *)&v626[16]  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        *(void *)&v625  = v290;
        v532  = sub_100215AF0(&v625);
        v534  = v533;
        v536  = v535;
        v538  = v537;
        sub_10000C970(v287, v58);
        sub_10000C970(v287, v58);
        v350  = v575;
        *v575  = v532;
        v350[1]  = v534;
        v350[2]  = v536;
        v350[3]  = v538;
LABEL_192:
        swift_storeEnumTagMultiPayload();
        v524  = (uint64_t)v350;
        goto LABEL_198;
      case 44:
        v596  = (char *)(v58 >> 62);
        v292  = v548;
        sub_100013D44(v548, v58);
        sub_100013D44(v292, v58);
        v597  = (char *)sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        v293  = type metadata accessor for BinaryDecoder();
        v294  = (void *)swift_allocObject();
        v294[5]  = &_swiftEmptyDictionarySingleton;
        v294[2]  = v292;
        v294[3]  = v58;
        v295  = 0;
        uint64_t v57 = v593;
        switch((unint64_t)v596)
        {
          case 1uLL:
            v295  = (int)v548;
            break;
          case 2uLL:
            v295  = *(void *)(v548 + 16);
            break;
          default:
            break;
        }
        v294[4]  = v295;
        swift_beginAccess();
        v294[5]  = v597;
        swift_bridgeObjectRelease();
        v599  = v293;
        v600  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        v598[0]  = v294;
        sub_100215CD4(v598, (uint64_t)&v625);
        v623  = v625;
        v624[0]  = *(_OWORD *)v626;
        *(_OWORD *)((char *)v624 + 10)  = *(_OWORD *)&v626[10];
        v539  = v548;
        sub_10000C970(v548, v58);
        sub_10000C970(v539, v58);
        v540  = v624[0];
        *(_OWORD *)uint64_t v57 = v623;
        *((_OWORD *)v57 + 1)  = v540;
        *(_OWORD *)(v57 + 26)  = *(_OWORD *)((char *)v624 + 10);
LABEL_179:
        swift_storeEnumTagMultiPayload();
        v524  = (uint64_t)v57;
LABEL_198:
        v521  = (uint64_t)v552;
        sub_10021A578(v524, (uint64_t)v552, type metadata accessor for NANAttribute);
        goto LABEL_199;
      case 45:
        v296  = v548;
        sub_100013D44(v548, v58);
        v297  = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        type metadata accessor for BinaryDecoder();
        v298  = (void *)swift_allocObject();
        v298[5]  = &_swiftEmptyDictionarySingleton;
        v298[2]  = v296;
        v298[3]  = v58;
        v299  = 0;
        switch(v58 >> 62)
        {
          case 1uLL:
            v299  = (int)v548;
            break;
          case 2uLL:
            v299  = *(void *)(v548 + 16);
            break;
          default:
            break;
        }
        v298[4]  = v299;
        swift_beginAccess();
        v298[5]  = v297;
        swift_bridgeObjectRelease();
        *(void *)&v626[8]  = &type metadata for BinaryDecoder.UnkeyedContainer;
        *(void *)&v626[16]  = sub_10008B64C();
        *(void *)&v625  = v298;
        sub_100039448((uint64_t)&v625, (uint64_t)&type metadata for BinaryDecoder.UnkeyedContainer);
        sub_10008B6A0();
        swift_retain();
        dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
        LODWORD(v597)  = v601;
        LODWORD(v596)  = BYTE1(v601);
        v541  = BYTE2(v601);
        sub_100039448((uint64_t)&v625, *(uint64_t *)&v626[8]);
        sub_10021A9A0();
        UnkeyedDecodingContainer.inferredDecode<A>()();
        swift_release();
        sub_10000C970(v548, v58);
        v544  = v601;
        v545  = v554;
        *v554  = (_BYTE)v597;
        v545[1]  = (_BYTE)v596;
        v545[2]  = v541;
        *(_OWORD *)(v545 + 8)  = v544;
        swift_storeEnumTagMultiPayload();
        v546  = (uint64_t)v545;
        v521  = (uint64_t)v552;
        sub_10021A578(v546, (uint64_t)v552, type metadata accessor for NANAttribute);
        sub_100010754((uint64_t)&v625);
LABEL_199:
        v306  = v594;
        goto LABEL_200;
      case 46:
        sub_10000F000();
        swift_allocError();
        *(_OWORD *)v300  = xmmword_1003B00B0;
        *(unsigned char *)(v300 + 16)  = 2;
        swift_willThrow();
        sub_10000C970(v548, v58);
        sub_100010754((uint64_t)v602);
        return sub_100010754(v55);
      default:
        uint64_t v60 = v548;
        sub_100013D44(v548, v58);
        sub_100013D44(v60, v58);
        v597  = (char *)sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
        uint64_t v61 = type metadata accessor for BinaryDecoder();
        uint64_t v62 = (void *)swift_allocObject();
        v62[5]  = &_swiftEmptyDictionarySingleton;
        v62[2]  = v60;
        v62[3]  = v58;
        uint64_t v63 = 0;
        uint64_t v64 = v550;
        switch(v58 >> 62)
        {
          case 1uLL:
            uint64_t v63 = (int)v548;
            break;
          case 2uLL:
            uint64_t v63 = *(void *)(v548 + 16);
            break;
          default:
            break;
        }
        v62[4]  = v63;
        swift_beginAccess();
        v62[5]  = v597;
        swift_bridgeObjectRelease();
        *(void *)&v626[8]  = v61;
        *(void *)&v626[16]  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
        *(void *)&v625  = v62;
        v301  = sub_1002123D0(&v625);
        v302  = v594;
        v303  = v301;
        v304  = v548;
        sub_10000C970(v548, v58);
        v305  = v304;
        v306  = v302;
        sub_10000C970(v305, v58);
        *(_WORD *)uint64_t v64 = v303;
LABEL_103:
        swift_storeEnumTagMultiPayload();
        v322  = (uint64_t)v64;
LABEL_175:
        v521  = (uint64_t)v552;
        sub_10021A578(v322, (uint64_t)v552, type metadata accessor for NANAttribute);
LABEL_200:
        sub_100010754((uint64_t)v602);
        sub_10021A578(v521, v306, type metadata accessor for NANAttribute);
        break;
    }
  }
  return sub_100010754(v55);
}

void *NANAttribute.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  v198  = a1;
  type metadata accessor for NANAttribute.CustomDeviceInformation(0);
  __chkstk_darwin();
  v194  = (uint64_t)&v181 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v193  = sub_100010BCC(&qword_100482710);
  v185  = *(void *)(v193 - 8);
  __chkstk_darwin();
  v192  = (char *)&v181 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v191  = sub_100010BCC(&qword_100482940);
  v184  = *(void *)(v191 - 8);
  __chkstk_darwin();
  v190  = (char *)&v181 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v189  = sub_100010BCC(&qword_1004828F0);
  v183  = *(void *)(v189 - 8);
  __chkstk_darwin();
  v188  = (char *)&v181 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v187  = sub_100010BCC(&qword_100482880);
  v182  = *(void *)(v187 - 8);
  __chkstk_darwin();
  v186  = (char *)&v181 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100010BCC(&qword_100482668);
  v181  = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v181 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100010BCC(&qword_100482590);
  v195  = *(void *)(v11 - 8);
  v196  = v11;
  __chkstk_darwin();
  uint64_t v13 = (char *)&v181 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v15 = (char *)&v181 - v14;
  type metadata accessor for NANAttribute(0);
  __chkstk_darwin();
  uint64_t v17 = (unsigned int *)((char *)&v181 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v18 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
  v200  = (ValueMetadata *)type metadata accessor for BinaryEncoder();
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16)  = xmmword_1003B2440;
  v197  = (long long *)(v19 + 16);
  v201  = v19;
  *(void *)(v19 + 32)  = v18;
  v199  = v2;
  sub_10021A510(v2, (uint64_t)v17, type metadata accessor for NANAttribute);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v85 = *(void *)v17;
      v205  = v200;
      v206  = sub_10021A5E0((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      uint64_t v20 = v201;
      v204[0]  = v201;
      swift_retain();
      uint64_t v21 = v219;
      NANAttribute.Cluster.encode(to:)(v204, v85);
      goto LABEL_84;
    case 2u:
      uint64_t v68 = *(void *)v17;
      uint64_t v20 = v201;
      v204[0]  = v201;
      swift_retain();
      swift_bridgeObjectRetain();
      sub_100010BCC(&qword_100482A50);
      sub_10000F9CC(&qword_100482A58, &qword_100482A50);
      KeyedEncodingContainer.init<A>(_:)();
      v204[0]  = v68;
      sub_100010BCC(&qword_1004825A0);
      sub_100217A38(&qword_1004825A8, &qword_1004825A0, (void (*)(void))sub_100214C7C);
      uint64_t v39 = v196;
      uint64_t v69 = v219;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v26 = v69;
      if (v69)
      {
        uint64_t v70 = *(void (**)(char *, uint64_t))(v195 + 8);
        uint64_t v71 = v15;
LABEL_40:
        v70(v71, v39);
        goto LABEL_70;
      }
      (*(void (**)(char *, uint64_t))(v195 + 8))(v15, v39);
      goto LABEL_102;
    case 3u:
      long long v79 = *((_OWORD *)v17 + 2);
      long long v80 = *((_OWORD *)v17 + 4);
      v207[3]  = *((_OWORD *)v17 + 3);
      v207[4]  = v80;
      long long v81 = *(_OWORD *)v17;
      v207[1]  = *((_OWORD *)v17 + 1);
      v207[2]  = v79;
      v207[0]  = v81;
      v205  = v200;
      v206  = sub_10021A5E0((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      uint64_t v20 = v201;
      v204[0]  = v201;
      swift_retain();
      sub_10021ABA8((uint64_t)v207);
      uint64_t v82 = v219;
      NANAttribute.ServiceDescriptor.encode(to:)(v204);
      uint64_t v26 = v82;
      if (v82)
      {
        sub_100010754((uint64_t)v204);
        sub_10013F060((uint64_t)v207);
        swift_release();
        return (void *)sub_10013F060((uint64_t)v207);
      }
      sub_100010754((uint64_t)v204);
      sub_10013F060((uint64_t)v207);
      sub_10013F060((uint64_t)v207);
      goto LABEL_109;
    case 4u:
      LOWORD(v203)  = *(_WORD *)v17;
      v205  = v200;
      v206  = sub_10021A5E0((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      uint64_t v20 = v201;
      v204[0]  = v201;
      sub_10021AB54();
      swift_retain();
      uint64_t v21 = v219;
      dispatch thunk of Encodable.encode(to:)();
      goto LABEL_84;
    case 5u:
      long long v97 = *((_OWORD *)v17 + 1);
      v208  = *(_OWORD *)v17;
      v209[0]  = v97;
      *(_OWORD *)((char *)v209 + 9)  = *(_OWORD *)((char *)v17 + 25);
      v205  = v200;
      v206  = sub_10021A5E0((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      uint64_t v20 = v201;
      v204[0]  = v201;
      swift_retain();
      sub_100217C00((uint64_t)&v208);
      uint64_t v98 = v219;
      NANAttribute.WLANInfrastructure.encode(to:)(v204);
      uint64_t v26 = v98;
      if (v98)
      {
        sub_100010754((uint64_t)v204);
        sub_100217C30((uint64_t)&v208);
        swift_release();
        return (void *)sub_100217C30((uint64_t)&v208);
      }
      sub_100010754((uint64_t)v204);
      sub_100217C30((uint64_t)&v208);
      sub_100217C30((uint64_t)&v208);
      goto LABEL_109;
    case 6u:
      v196  = *v17;
      v111  = *((unsigned __int8 *)v17 + 4);
      v112  = *((unsigned __int8 *)v17 + 5);
      v113  = *((unsigned __int8 *)v17 + 6);
      v114  = *((unsigned __int8 *)v17 + 10);
      uint64_t v93 = *((void *)v17 + 2);
      unint64_t v94 = *((void *)v17 + 3);
      v115  = *((unsigned __int16 *)v17 + 4);
      v205  = v200;
      v206  = sub_10021A5E0((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      uint64_t v20 = v201;
      v204[0]  = v201;
      swift_retain();
      sub_100013D44(v93, v94);
      if (v114) {
        v116  = 0x10000;
      }
      else {
        v116  = 0;
      }
      uint64_t v96 = v219;
      NANAttribute.P2POperation.encode(to:)(v204, v196 | (v111 << 32) | (v112 << 40) | (v113 << 48), v115 | v116, v93, v94);
      goto LABEL_59;
    case 7u:
      long long v83 = *((_OWORD *)v17 + 1);
      v210[0]  = *(_OWORD *)v17;
      v210[1]  = v83;
      v211  = *((void *)v17 + 4);
      v205  = v200;
      v206  = sub_10021A5E0((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      uint64_t v20 = v201;
      v204[0]  = v201;
      swift_retain();
      sub_100217C00((uint64_t)v210);
      uint64_t v84 = v219;
      NANAttribute.IBSS.encode(to:)(v204);
      uint64_t v26 = v84;
      if (v84)
      {
        sub_100010754((uint64_t)v204);
        sub_100217C30((uint64_t)v210);
        swift_release();
        return (void *)sub_100217C30((uint64_t)v210);
      }
      sub_100010754((uint64_t)v204);
      sub_100217C30((uint64_t)v210);
      sub_100217C30((uint64_t)v210);
      goto LABEL_109;
    case 8u:
      v117  = *((_OWORD *)v17 + 1);
      v212[0]  = *(_OWORD *)v17;
      v212[1]  = v117;
      v212[2]  = *((_OWORD *)v17 + 2);
      v205  = v200;
      v206  = sub_10021A5E0((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      uint64_t v20 = v201;
      v204[0]  = v201;
      swift_retain();
      sub_10021AB00(v212, (void (*)(uint64_t, uint64_t))sub_100013D44);
      v118  = v219;
      NANAttribute.Mesh.encode(to:)(v204);
      uint64_t v26 = v118;
      if (v118)
      {
        sub_100010754((uint64_t)v204);
        sub_10021AB00(v212, (void (*)(uint64_t, uint64_t))sub_10000C970);
        swift_release();
        return sub_10021AB00(v212, (void (*)(uint64_t, uint64_t))sub_10000C970);
      }
      sub_100010754((uint64_t)v204);
      sub_10021AB00(v212, (void (*)(uint64_t, uint64_t))sub_10000C970);
      sub_10021AB00(v212, (void (*)(uint64_t, uint64_t))sub_10000C970);
      goto LABEL_109;
    case 9u:
      LODWORD(v200)  = *(unsigned __int16 *)v17;
      char v60 = *((unsigned char *)v17 + 2);
      uint64_t v61 = *((void *)v17 + 1);
      unint64_t v62 = *((void *)v17 + 2);
      uint64_t v20 = v201;
      v204[0]  = v201;
      swift_retain();
      sub_100013D44(v61, v62);
      sub_100010BCC(&qword_100482A90);
      sub_10000F9CC(&qword_100482A98, &qword_100482A90);
      KeyedEncodingContainer.init<A>(_:)();
      LOWORD(v204[0])  = (_WORD)v200;
      BYTE2(v204[0])  = v60;
      v204[1]  = v61;
      v204[2]  = v62;
      sub_100217CB4();
      uint64_t v63 = v219;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v26 = v63;
      if (v63)
      {
        (*(void (**)(char *, uint64_t))(v181 + 8))(v10, v8);
        sub_10000C970(v61, v62);
        swift_release();
        return (void *)sub_10000C970(v61, v62);
      }
      (*(void (**)(char *, uint64_t))(v181 + 8))(v10, v8);
      sub_10000C970(v61, v62);
      v129  = v61;
      v130  = v62;
      goto LABEL_108;
    case 0xAu:
      v119  = *((void *)v17 + 1);
      v120  = *(unsigned char *)v17;
      v205  = v200;
      v206  = sub_10021A5E0((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      uint64_t v20 = v201;
      v204[0]  = v201;
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v89 = v219;
      NANAttribute.FurtherAvailabilityMap.encode(to:)(v204, v120, v119);
      goto LABEL_68;
    case 0xBu:
      v205  = v200;
      v206  = sub_10021A5E0((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      uint64_t v20 = v201;
      v204[0]  = v201;
      swift_retain();
      uint64_t v21 = v219;
      CountryCode.encode(to:)(v204);
      goto LABEL_84;
    case 0xCu:
      uint64_t v52 = *v17;
      uint64_t v53 = *((unsigned __int8 *)v17 + 4);
      uint64_t v54 = *((unsigned __int8 *)v17 + 5);
      uint64_t v56 = *((void *)v17 + 1);
      unint64_t v55 = *((void *)v17 + 2);
      v205  = v200;
      v206  = sub_10021A5E0((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      uint64_t v20 = v201;
      v204[0]  = v201;
      swift_retain();
      sub_100013D44(v56, v55);
      uint64_t v57 = v219;
      NANAttribute.Ranging.encode(to:)(v204, v52 | (v53 << 32) | (v54 << 40), v56, v55);
      goto LABEL_75;
    case 0xDu:
      uint64_t v99 = *v17;
      uint64_t v100 = *((unsigned __int8 *)v17 + 4);
      uint64_t v101 = *((unsigned __int8 *)v17 + 5);
      uint64_t v103 = *((void *)v17 + 1);
      uint64_t v102 = *((void *)v17 + 2);
      v205  = v200;
      v206  = sub_10021A5E0((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      uint64_t v20 = v201;
      v204[0]  = v201;
      swift_retain();
      uint64_t v21 = v219;
      NANAttribute.ClusterDiscovery.encode(to:)(v204, v99 | (v100 << 32) | (v101 << 40), v103, v102);
      goto LABEL_84;
    case 0xEu:
      long long v44 = *((_OWORD *)v17 + 1);
      v213[0]  = *(_OWORD *)v17;
      v213[1]  = v44;
      v214  = *((void *)v17 + 4);
      v205  = v200;
      v206  = sub_10021A5E0((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      uint64_t v20 = v201;
      v204[0]  = v201;
      swift_retain();
      sub_100217AF8((uint64_t)v213);
      uint64_t v45 = v219;
      NANAttribute.ServiceDescriptorExtension.encode(to:)(v204);
      uint64_t v26 = v45;
      if (v45)
      {
        sub_100010754((uint64_t)v204);
        sub_100217B28((uint64_t)v213);
        swift_release();
        return (void *)sub_100217B28((uint64_t)v213);
      }
      sub_100010754((uint64_t)v204);
      sub_100217B28((uint64_t)v213);
      sub_100217B28((uint64_t)v213);
      goto LABEL_109;
    case 0xFu:
      v196  = *(unsigned __int8 *)v17;
      unsigned __int8 v72 = *((unsigned char *)v17 + 1);
      uint64_t v73 = *((unsigned __int16 *)v17 + 1);
      uint64_t v74 = *((unsigned __int8 *)v17 + 4);
      uint64_t v75 = *((unsigned __int8 *)v17 + 5);
      uint64_t v76 = *((unsigned __int8 *)v17 + 6);
      int v77 = *((unsigned __int16 *)v17 + 4);
      int v78 = *((unsigned __int8 *)v17 + 10);
      v205  = v200;
      v206  = sub_10021A5E0((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      uint64_t v20 = v201;
      v204[0]  = v201;
      swift_retain();
      LOBYTE(v203)  = v72;
      uint64_t v21 = v219;
      NANAttribute.DeviceCapability.encode(to:)(v204, v196 | (v73 << 16) | (v74 << 32) | (v75 << 40) | (v76 << 48) | ((unint64_t)v72 << 8), v77 | (v78 << 16));
      goto LABEL_84;
    case 0x10u:
      long long v42 = *((_OWORD *)v17 + 1);
      v215[0]  = *(_OWORD *)v17;
      v215[1]  = v42;
      v215[2]  = *((_OWORD *)v17 + 2);
      v205  = v200;
      v206  = sub_10021A5E0((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      uint64_t v20 = v201;
      v204[0]  = v201;
      swift_retain();
      sub_100218344((uint64_t)v215);
      uint64_t v43 = v219;
      NANAttribute.Datapath.encode(to:)(v204);
      uint64_t v26 = v43;
      if (v43)
      {
        sub_100010754((uint64_t)v204);
        sub_100218374((uint64_t)v215);
        swift_release();
        return (void *)sub_100218374((uint64_t)v215);
      }
      sub_100010754((uint64_t)v204);
      sub_100218374((uint64_t)v215);
      sub_100218374((uint64_t)v215);
      goto LABEL_109;
    case 0x11u:
      int v86 = *(unsigned __int8 *)v17;
      uint64_t v87 = *((void *)v17 + 1);
      int v88 = *((unsigned __int16 *)v17 + 1);
      v205  = v200;
      v206  = sub_10021A5E0((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      uint64_t v20 = v201;
      v204[0]  = v201;
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v89 = v219;
      NANAttribute.Availability.encode(to:)(v204, v86 | (v88 << 16), v87);
      goto LABEL_68;
    case 0x12u:
      v121  = *v17;
      v122  = *((unsigned __int8 *)v17 + 4);
      v123  = *((unsigned __int8 *)v17 + 5);
      v124  = *((unsigned __int8 *)v17 + 6);
      v125  = *((void *)v17 + 1);
      v205  = v200;
      v206  = sub_10021A5E0((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      uint64_t v20 = v201;
      v204[0]  = v201;
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v51 = v219;
      NANAttribute.DataCluster.encode(to:)(v204, v121 | (v122 << 32) | (v123 << 40) | (v124 << 48), v125);
      goto LABEL_55;
    case 0x13u:
      v134  = *((unsigned __int8 *)v17 + 4);
      v135  = *((unsigned char *)v17 + 5);
      v136  = *((void *)v17 + 1);
      v137  = *((unsigned char *)v17 + 16);
      v138  = *((void *)v17 + 3);
      v139  = *v17;
      v205  = v200;
      v206  = sub_10021A5E0((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      uint64_t v20 = v201;
      v204[0]  = v201;
      swift_retain();
      swift_bridgeObjectRetain();
      LOBYTE(v203)  = v135;
      LOBYTE(v202)  = v137;
      uint64_t v89 = v219;
      NANAttribute.DeviceLink.encode(to:)(v204, v139 | (v134 << 32) | ((unint64_t)v135 << 40), v136, v137, v138);
      goto LABEL_68;
    case 0x14u:
      v205  = v200;
      v206  = sub_10021A5E0((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      uint64_t v20 = v201;
      v204[0]  = v201;
      swift_retain();
      uint64_t v21 = v219;
      NANAttribute.DeviceLinkQoS.encode(to:)(v204);
      goto LABEL_84;
    case 0x15u:
      v196  = *((void *)v17 + 1);
      __int16 v104 = *((_WORD *)v17 + 8);
      char v105 = *((unsigned char *)v17 + 18);
      char v106 = *((unsigned char *)v17 + 19);
      uint64_t v107 = *(void *)(v17 + 5);
      __int16 v108 = *((_WORD *)v17 + 14);
      v109  = *(unsigned __int16 *)v17;
      v110  = v17[1];
      v205  = v200;
      v206  = sub_10021A5E0((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      uint64_t v20 = v201;
      v204[0]  = v201;
      swift_retain();
      LOWORD(v203)  = v104;
      BYTE2(v203)  = v105;
      BYTE3(v203)  = v106;
      *(void *)((char *)&v203 + 4)  = v107;
      WORD6(v203)  = v108;
      uint64_t v21 = v219;
      NANAttribute.UnalignedSchedule.encode(to:)(v204, v109 | (v110 << 32), v196, v203, *((uint64_t *)&v203 + 1));
      goto LABEL_84;
    case 0x16u:
      v131  = *(unsigned __int8 *)v17;
      v132  = *((unsigned __int16 *)v17 + 1);
      v133  = *((unsigned char *)v17 + 4);
      v205  = v200;
      v206  = sub_10021A5E0((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      uint64_t v20 = v201;
      v204[0]  = v201;
      swift_retain();
      LOBYTE(v203)  = v133;
      uint64_t v21 = v219;
      NANAttribute.RangingInformation.encode(to:)(v204, v131 | (v132 << 16) | ((unint64_t)v133 << 32));
      goto LABEL_84;
    case 0x17u:
      v144  = *((unsigned char *)v17 + 8);
      v145  = *((void *)v17 + 2);
      v146  = *(void *)v17;
      v205  = v200;
      v206  = sub_10021A5E0((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      uint64_t v20 = v201;
      v204[0]  = v201;
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v89 = v219;
      NANAttribute.RangingSetup.encode(to:)(v204, v146, v144, v145);
      goto LABEL_68;
    case 0x18u:
      uint64_t v64 = *(void *)v17;
      uint64_t v20 = v201;
      v204[0]  = v201;
      swift_retain();
      swift_bridgeObjectRetain();
      sub_100010BCC(&qword_100482A80);
      sub_10000F9CC(&qword_100482A88, &qword_100482A80);
      uint64_t v38 = v186;
      KeyedEncodingContainer.init<A>(_:)();
      v204[0]  = v64;
      sub_100010BCC(&qword_100482890);
      sub_100217A38(&qword_100482898, &qword_100482890, (void (*)(void))sub_100219EAC);
      uint64_t v39 = v187;
      uint64_t v65 = v219;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v26 = v65;
      if (v65)
      {
        uint64_t v41 = v182;
        goto LABEL_39;
      }
      v173  = v182;
      goto LABEL_101;
    case 0x19u:
      __int16 v66 = *(unsigned __int8 *)v17;
      __int16 v67 = *((unsigned __int8 *)v17 + 1);
      uint64_t v56 = *((void *)v17 + 1);
      unint64_t v55 = *((void *)v17 + 2);
      v205  = v200;
      v206  = sub_10021A5E0((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      uint64_t v20 = v201;
      v204[0]  = v201;
      swift_retain();
      sub_100013D44(v56, v55);
      uint64_t v57 = v219;
      NANAttribute.ElementContainer.encode(to:)(v204, v66 | (v67 << 8), v56, v55);
      goto LABEL_75;
    case 0x1Au:
      v162  = *(void *)v17;
      v163  = v17[2];
      v164  = *((unsigned __int8 *)v17 + 12);
      v165  = *((unsigned __int8 *)v17 + 13);
      v166  = *((unsigned __int8 *)v17 + 14);
      v167  = v17[4];
      v168  = *((unsigned __int8 *)v17 + 15);
      v205  = v200;
      v206  = sub_10021A5E0((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      v204[0]  = v201;
      v169  = &_mh_execute_header;
      if (!v164) {
        v169  = 0;
      }
      v170  = (unint64_t)v169 | v163 | (v165 << 40) | (v166 << 48);
      uint64_t v20 = v201;
      v171  = v170 | (v168 << 56);
      swift_retain();
      v172  = v171;
      uint64_t v21 = v219;
      NANAttribute.ExtendedWLANInfrastructure.encode(to:)(v204, v162, v172, v167);
      goto LABEL_84;
    case 0x1Bu:
      uint64_t v34 = *(void *)v17;
      uint64_t v35 = *((unsigned __int16 *)v17 + 6);
      uint64_t v36 = v17[2];
      v205  = v200;
      v206  = sub_10021A5E0((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      uint64_t v20 = v201;
      v204[0]  = v201;
      swift_retain();
      uint64_t v21 = v219;
      NANAttribute.ExtendedP2POperation.encode(to:)(v204, v34, v36 | (v35 << 32));
      goto LABEL_84;
    case 0x1Cu:
      v147  = *(void *)v17;
      v148  = v17[2];
      v149  = *((unsigned __int8 *)v17 + 12);
      v150  = *((unsigned __int8 *)v17 + 13);
      v151  = *((unsigned __int8 *)v17 + 14);
      v152  = v17[4];
      v205  = v200;
      v206  = sub_10021A5E0((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      uint64_t v20 = v201;
      v204[0]  = v201;
      swift_retain();
      uint64_t v21 = v219;
      NANAttribute.ExtendedIBSS.encode(to:)(v204, v147, v148 | (v149 << 32) | (v150 << 40) | (v151 << 48), v152);
      goto LABEL_84;
    case 0x1Du:
      v153  = *(void *)v17;
      v154  = *((unsigned __int8 *)v17 + 8);
      v155  = *((unsigned __int16 *)v17 + 5);
      v156  = *((unsigned __int16 *)v17 + 6);
      uint64_t v56 = *((void *)v17 + 2);
      unint64_t v55 = *((void *)v17 + 3);
      v205  = v200;
      v206  = sub_10021A5E0((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      uint64_t v20 = v201;
      v204[0]  = v201;
      swift_retain();
      sub_100013D44(v56, v55);
      uint64_t v57 = v219;
      NANAttribute.ExtendedMesh.encode(to:)(v204, v153, v154 | (v155 << 16) | (v156 << 32), v56, v55);
LABEL_75:
      uint64_t v26 = v57;
      if (v57)
      {
        sub_100010754((uint64_t)v204);
        sub_10000C970(v56, v55);
        swift_release();
        return (void *)sub_10000C970(v56, v55);
      }
      sub_100010754((uint64_t)v204);
      v157  = v56;
      v158  = v55;
      goto LABEL_107;
    case 0x1Eu:
      v126  = *((void *)v17 + 1);
      v127  = *(unsigned char *)v17;
      v205  = v200;
      v206  = sub_10021A5E0((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      uint64_t v20 = v201;
      v204[0]  = v201;
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v89 = v219;
      NANAttribute.CipherSuiteInformation.encode(to:)(v204, v127, v126);
LABEL_68:
      uint64_t v26 = v89;
      if (!v89) {
        goto LABEL_88;
      }
      sub_100010754((uint64_t)v204);
      goto LABEL_70;
    case 0x1Fu:
      uint64_t v90 = *(void *)v17;
      uint64_t v20 = v201;
      v204[0]  = v201;
      swift_retain();
      swift_bridgeObjectRetain();
      sub_100010BCC(&qword_100482A70);
      sub_10000F9CC(&qword_100482A78, &qword_100482A70);
      uint64_t v38 = v188;
      KeyedEncodingContainer.init<A>(_:)();
      v204[0]  = v90;
      sub_100010BCC(&qword_100482900);
      sub_100217A38(&qword_100482908, &qword_100482900, (void (*)(void))sub_10021A0F8);
      uint64_t v39 = v189;
      uint64_t v91 = v219;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v26 = v91;
      if (v91)
      {
        uint64_t v41 = v183;
        goto LABEL_39;
      }
      v173  = v183;
      goto LABEL_101;
    case 0x20u:
      uint64_t v93 = *((void *)v17 + 1);
      unint64_t v94 = *((void *)v17 + 2);
      v128  = *(unsigned __int8 *)v17;
      v205  = v200;
      v206  = sub_10021A5E0((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      uint64_t v20 = v201;
      v204[0]  = v201;
      swift_retain();
      sub_100013D44(v93, v94);
      uint64_t v96 = v219;
      NANAttribute.SharedKeyDescriptor.encode(to:)(v204, v128, v93, v94);
      goto LABEL_59;
    case 0x21u:
      uint64_t v46 = *(void *)v17;
      uint64_t v47 = *((void *)v17 + 1);
      int v48 = *((unsigned __int16 *)v17 + 8);
      int v49 = *((unsigned __int8 *)v17 + 18);
      uint64_t v50 = *((void *)v17 + 3);
      v205  = v200;
      v206  = sub_10021A5E0((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      uint64_t v20 = v201;
      v204[0]  = v201;
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v51 = v219;
      NANAttribute.MulticastScheduleChange.encode(to:)(v204, v46, v47, v48 | (v49 << 16), v50);
LABEL_55:
      uint64_t v26 = v51;
      if (v51)
      {
        sub_100010754((uint64_t)v204);
        swift_release();
        return (void *)swift_bridgeObjectRelease_n();
      }
LABEL_88:
      sub_100010754((uint64_t)v204);
      goto LABEL_102;
    case 0x22u:
      uint64_t v37 = *(void *)v17;
      uint64_t v20 = v201;
      v204[0]  = v201;
      swift_retain();
      swift_bridgeObjectRetain();
      sub_100010BCC(&qword_100482A60);
      sub_10000F9CC(&qword_100482A68, &qword_100482A60);
      uint64_t v38 = v190;
      KeyedEncodingContainer.init<A>(_:)();
      v204[0]  = v37;
      sub_100010BCC(&qword_1004827A8);
      sub_100217A38(&qword_1004827B0, &qword_1004827A8, (void (*)(void))sub_100219180);
      uint64_t v39 = v191;
      uint64_t v40 = v219;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v26 = v40;
      if (v40)
      {
        uint64_t v41 = v184;
LABEL_39:
        uint64_t v70 = *(void (**)(char *, uint64_t))(v41 + 8);
        uint64_t v71 = v38;
        goto LABEL_40;
      }
      v173  = v184;
LABEL_101:
      (*(void (**)(char *, uint64_t))(v173 + 8))(v38, v39);
      goto LABEL_102;
    case 0x23u:
      uint64_t v27 = *(void *)v17;
      uint64_t v20 = v201;
      v204[0]  = v201;
      swift_retain();
      swift_bridgeObjectRetain();
      sub_100010BCC(&qword_100482A50);
      sub_10000F9CC(&qword_100482A58, &qword_100482A50);
      KeyedEncodingContainer.init<A>(_:)();
      v204[0]  = v27;
      sub_100010BCC(&qword_1004825A0);
      sub_100217A38(&qword_1004825A8, &qword_1004825A0, (void (*)(void))sub_100214C7C);
      uint64_t v28 = v196;
      uint64_t v29 = v219;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v26 = v29;
      if (v29)
      {
        (*(void (**)(char *, uint64_t))(v195 + 8))(v13, v28);
        swift_release();
        return (void *)swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v195 + 8))(v13, v28);
LABEL_102:
      swift_bridgeObjectRelease_n();
      goto LABEL_109;
    case 0x24u:
      long long v30 = *((_OWORD *)v17 + 1);
      v216[0]  = *(_OWORD *)v17;
      v216[1]  = v30;
      long long v31 = *((_OWORD *)v17 + 3);
      v216[2]  = *((_OWORD *)v17 + 2);
      v216[3]  = v31;
      v205  = v200;
      v206  = sub_10021A5E0((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      uint64_t v20 = v201;
      v204[0]  = v201;
      swift_retain();
      sub_10021AA9C(v216, (void (*)(void, void))sub_10022FE9C, (void (*)(uint64_t, uint64_t, uint64_t))sub_10013316C);
      uint64_t v32 = v219;
      NANAttribute.DatapathExtension.encode(to:)(v204);
      uint64_t v26 = v32;
      if (v32)
      {
        sub_100010754((uint64_t)v204);
        sub_10021AA9C(v216, (void (*)(void, void))sub_10022FEA0, (void (*)(uint64_t, uint64_t, uint64_t))sub_1001331AC);
        swift_release();
        return sub_10021AA9C(v216, (void (*)(void, void))sub_10022FEA0, (void (*)(uint64_t, uint64_t, uint64_t))sub_1001331AC);
      }
      sub_100010754((uint64_t)v204);
      sub_10021AA9C(v216, (void (*)(void, void))sub_10022FEA0, (void (*)(uint64_t, uint64_t, uint64_t))sub_1001331AC);
      sub_10021AA9C(v216, (void (*)(void, void))sub_10022FEA0, (void (*)(uint64_t, uint64_t, uint64_t))sub_1001331AC);
      goto LABEL_109;
    case 0x25u:
      uint64_t v22 = *(void *)v17;
      uint64_t v20 = v201;
      v204[0]  = v201;
      swift_retain();
      swift_bridgeObjectRetain();
      sub_100010BCC(&qword_100482A40);
      sub_10000F9CC(&qword_100482A48, &qword_100482A40);
      uint64_t v23 = v192;
      KeyedEncodingContainer.init<A>(_:)();
      v204[0]  = v22;
      sub_100010BCC(&qword_10047E7D0);
      sub_10010E990((unint64_t *)&qword_10047F268);
      uint64_t v24 = v193;
      uint64_t v25 = v219;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v26 = v25;
      if (v25)
      {
        (*(void (**)(char *, uint64_t))(v185 + 8))(v23, v24);
LABEL_70:
        swift_release();
        return (void *)swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v185 + 8))(v23, v24);
      goto LABEL_102;
    case 0x26u:
      v159  = *(void *)v17;
      v160  = *((void *)v17 + 1);
      uint64_t v56 = *((void *)v17 + 2);
      unint64_t v55 = *((void *)v17 + 3);
      v205  = v200;
      v206  = sub_10021A5E0((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      uint64_t v20 = v201;
      v204[0]  = v201;
      swift_retain();
      sub_100013D44(v159, v160);
      sub_100013D44(v56, v55);
      v161  = v219;
      NANAttribute.PairingIdentityResolution.encode(to:)(v204, v159, v160, v56, v55);
      uint64_t v26 = v161;
      if (v161)
      {
        sub_100010754((uint64_t)v204);
        sub_10000C970(v159, v160);
        sub_10000C970(v56, v55);
        swift_release();
        sub_10000C970(v159, v160);
        return (void *)sub_10000C970(v56, v55);
      }
      sub_100010754((uint64_t)v204);
      sub_10000C970(v159, v160);
      sub_10000C970(v56, v55);
      v157  = v159;
      v158  = v160;
LABEL_107:
      sub_10000C970(v157, v158);
      v129  = v56;
      v130  = v55;
LABEL_108:
      sub_10000C970(v129, v130);
      goto LABEL_109;
    case 0x27u:
      v140  = *((_OWORD *)v17 + 1);
      v217  = *(_OWORD *)v17;
      *(_OWORD *)v218  = v140;
      *(_OWORD *)&v218[10]  = *(_OWORD *)((char *)v17 + 26);
      v205  = v200;
      v206  = sub_10021A5E0((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      uint64_t v20 = v201;
      v204[0]  = v201;
      swift_retain();
      sub_10021A344((uint64_t)&v217);
      v141  = v219;
      NANAttribute.PairingBootstrapping.encode(to:)(v204);
      uint64_t v26 = v141;
      if (v141)
      {
        sub_100010754((uint64_t)v204);
        sub_10021A378((uint64_t)&v217);
        swift_release();
        return (void *)sub_10021A378((uint64_t)&v217);
      }
      sub_100010754((uint64_t)v204);
      sub_10021A378((uint64_t)&v217);
      sub_10021A378((uint64_t)&v217);
      goto LABEL_109;
    case 0x28u:
      uint64_t v58 = v194;
      sub_10021A578((uint64_t)v17, v194, type metadata accessor for NANAttribute.CustomDeviceInformation);
      v205  = &type metadata for BinaryEncoder.UnkeyedContainer;
      v206  = sub_100088B84();
      uint64_t v20 = v201;
      v204[0]  = v201;
      sub_100039448((uint64_t)v204, (uint64_t)&type metadata for BinaryEncoder.UnkeyedContainer);
      swift_retain();
      uint64_t v59 = v219;
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
      uint64_t v26 = v59;
      if (!v59)
      {
        sub_100039448((uint64_t)v204, (uint64_t)v205);
        dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
        sub_100039448((uint64_t)v204, (uint64_t)v205);
        dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
        sub_100010754((uint64_t)v204);
        v205  = v200;
        v206  = sub_10021A5E0((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
        v204[0]  = v20;
        swift_retain();
        NANAttribute.CustomDeviceInformation.encode(to:)(v204);
        sub_100010754((uint64_t)v204);
        sub_10021A4B0(v58, type metadata accessor for NANAttribute.CustomDeviceInformation);
        goto LABEL_109;
      }
      sub_100010754((uint64_t)v204);
      sub_10021A4B0(v58, type metadata accessor for NANAttribute.CustomDeviceInformation);
      return (void *)swift_release();
    case 0x29u:
      int v92 = *((unsigned __int8 *)v17 + 2);
      uint64_t v93 = *((void *)v17 + 1);
      unint64_t v94 = *((void *)v17 + 2);
      int v95 = *(unsigned __int16 *)v17;
      v205  = v200;
      v206  = sub_10021A5E0((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      uint64_t v20 = v201;
      v204[0]  = v201;
      swift_retain();
      sub_100013D44(v93, v94);
      uint64_t v96 = v219;
      NANAttribute.VendorSpecific.encode(to:)(v204, v95 | (v92 << 16), v93, v94);
LABEL_59:
      uint64_t v26 = v96;
      if (v96)
      {
        sub_100010754((uint64_t)v204);
        sub_10000C970(v93, v94);
        swift_release();
        return (void *)sub_10000C970(v93, v94);
      }
      sub_100010754((uint64_t)v204);
      sub_10000C970(v93, v94);
      v129  = v93;
      v130  = v94;
      goto LABEL_108;
    case 0x2Au:
      v142  = *((void *)v17 + 1);
      v143  = *((void *)v17 + 2);
      v205  = &type metadata for BinaryEncoder.UnkeyedContainer;
      v206  = sub_1001AA560();
      uint64_t v20 = v201;
      v204[0]  = v201;
      sub_100039448((uint64_t)v204, (uint64_t)&type metadata for BinaryEncoder.UnkeyedContainer);
      swift_beginAccess();
      swift_retain();
      sub_100013D44(v142, v143);
      sub_100125FAC(v142, v143);
      swift_endAccess();
      sub_100010754((uint64_t)v204);
      sub_10000C970(v142, v143);
      sub_10000C970(v142, v143);
      uint64_t v26 = v219;
      goto LABEL_109;
    default:
      v205  = v200;
      v206  = sub_10021A5E0((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      uint64_t v20 = v201;
      v204[0]  = v201;
      swift_retain();
      uint64_t v21 = v219;
      NANAttribute.MasterIndication.encode(to:)(v204);
LABEL_84:
      uint64_t v26 = v21;
      if (v21)
      {
        sub_100010754((uint64_t)v204);
        return (void *)swift_release();
      }
      sub_100010754((uint64_t)v204);
LABEL_109:
      sub_1000369C4(v198, v198[3]);
      dispatch thunk of Encoder.unkeyedContainer()();
      LOBYTE(v203)  = NANAttribute.attributeType.getter();
      sub_100039448((uint64_t)v204, (uint64_t)v205);
      sub_10021AA48();
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      if (!v26)
      {
        swift_beginAccess();
        v174  = *(void *)(v20 + 16);
        switch(*(void *)(v20 + 24) >> 62)
        {
          case 1:
            v175  = __OFSUB__(HIDWORD(v174), v174);
            v176  = HIDWORD(v174) - v174;
            if (v175)
            {
              __break(1u);
LABEL_119:
              __break(1u);
            }
            else
            {
              v177  = v176;
LABEL_114:
              if ((v177 & 0x8000000000000000) == 0 && v177 < 0x10000)
              {
LABEL_116:
                sub_100039448((uint64_t)v204, (uint64_t)v205);
                dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
                v202  = *v197;
                sub_100039448((uint64_t)v204, (uint64_t)v205);
                sub_1000742DC();
                dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
                break;
              }
            }
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            JUMPOUT(0x100209030);
          case 2:
            v180  = v174 + 16;
            v178  = *(void *)(v174 + 16);
            v179  = *(void *)(v180 + 8);
            v177  = v179 - v178;
            if (!__OFSUB__(v179, v178)) {
              goto LABEL_114;
            }
            goto LABEL_119;
          default:
            goto LABEL_116;
        }
      }
      swift_release();
      return (void *)sub_100010754((uint64_t)v204);
  }
}

uint64_t NANAttribute.attributeType.getter()
{
  uint64_t v1 = v0;
  type metadata accessor for NANAttribute(0);
  __chkstk_darwin();
  uint64_t v3 = (unsigned __int8 *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10021A510(v1, (uint64_t)v3, type metadata accessor for NANAttribute);
  uint64_t v4 = 0;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v4 = 1;
      break;
    case 2u:
      sub_10021A4B0((uint64_t)v3, type metadata accessor for NANAttribute);
      uint64_t v4 = 2;
      break;
    case 3u:
      sub_10021A4B0((uint64_t)v3, type metadata accessor for NANAttribute);
      uint64_t v4 = 3;
      break;
    case 4u:
      uint64_t v4 = 4;
      break;
    case 5u:
      sub_10021A4B0((uint64_t)v3, type metadata accessor for NANAttribute);
      uint64_t v4 = 5;
      break;
    case 6u:
      sub_10021A4B0((uint64_t)v3, type metadata accessor for NANAttribute);
      uint64_t v4 = 6;
      break;
    case 7u:
      sub_10021A4B0((uint64_t)v3, type metadata accessor for NANAttribute);
      uint64_t v4 = 7;
      break;
    case 8u:
      sub_10021A4B0((uint64_t)v3, type metadata accessor for NANAttribute);
      uint64_t v4 = 8;
      break;
    case 9u:
      sub_10021A4B0((uint64_t)v3, type metadata accessor for NANAttribute);
      uint64_t v4 = 9;
      break;
    case 0xAu:
      sub_10021A4B0((uint64_t)v3, type metadata accessor for NANAttribute);
      uint64_t v4 = 10;
      break;
    case 0xBu:
      uint64_t v4 = 11;
      break;
    case 0xCu:
      sub_10021A4B0((uint64_t)v3, type metadata accessor for NANAttribute);
      uint64_t v4 = 12;
      break;
    case 0xDu:
      uint64_t v4 = 13;
      break;
    case 0xEu:
      sub_10021A4B0((uint64_t)v3, type metadata accessor for NANAttribute);
      uint64_t v4 = 14;
      break;
    case 0xFu:
      uint64_t v4 = 15;
      break;
    case 0x10u:
      sub_10021A4B0((uint64_t)v3, type metadata accessor for NANAttribute);
      uint64_t v4 = 16;
      break;
    case 0x11u:
      sub_10021A4B0((uint64_t)v3, type metadata accessor for NANAttribute);
      uint64_t v4 = 18;
      break;
    case 0x12u:
      sub_10021A4B0((uint64_t)v3, type metadata accessor for NANAttribute);
      uint64_t v4 = 19;
      break;
    case 0x13u:
      sub_10021A4B0((uint64_t)v3, type metadata accessor for NANAttribute);
      uint64_t v4 = 20;
      break;
    case 0x14u:
      uint64_t v4 = 21;
      break;
    case 0x15u:
      uint64_t v4 = 23;
      break;
    case 0x16u:
      uint64_t v4 = 26;
      break;
    case 0x17u:
      sub_10021A4B0((uint64_t)v3, type metadata accessor for NANAttribute);
      uint64_t v4 = 27;
      break;
    case 0x18u:
      sub_10021A4B0((uint64_t)v3, type metadata accessor for NANAttribute);
      uint64_t v4 = 28;
      break;
    case 0x19u:
      sub_10021A4B0((uint64_t)v3, type metadata accessor for NANAttribute);
      uint64_t v4 = 29;
      break;
    case 0x1Au:
      uint64_t v4 = 30;
      break;
    case 0x1Bu:
      uint64_t v4 = 31;
      break;
    case 0x1Cu:
      uint64_t v4 = 32;
      break;
    case 0x1Du:
      sub_10021A4B0((uint64_t)v3, type metadata accessor for NANAttribute);
      uint64_t v4 = 33;
      break;
    case 0x1Eu:
      sub_10021A4B0((uint64_t)v3, type metadata accessor for NANAttribute);
      uint64_t v4 = 34;
      break;
    case 0x1Fu:
      sub_10021A4B0((uint64_t)v3, type metadata accessor for NANAttribute);
      uint64_t v4 = 35;
      break;
    case 0x20u:
      sub_10021A4B0((uint64_t)v3, type metadata accessor for NANAttribute);
      uint64_t v4 = 36;
      break;
    case 0x21u:
      sub_10021A4B0((uint64_t)v3, type metadata accessor for NANAttribute);
      uint64_t v4 = 37;
      break;
    case 0x22u:
      sub_10021A4B0((uint64_t)v3, type metadata accessor for NANAttribute);
      uint64_t v4 = 39;
      break;
    case 0x23u:
      sub_10021A4B0((uint64_t)v3, type metadata accessor for NANAttribute);
      uint64_t v4 = 40;
      break;
    case 0x24u:
      sub_10021A4B0((uint64_t)v3, type metadata accessor for NANAttribute);
      uint64_t v4 = 41;
      break;
    case 0x25u:
      sub_10021A4B0((uint64_t)v3, type metadata accessor for NANAttribute);
      uint64_t v4 = 42;
      break;
    case 0x26u:
      sub_10021A4B0((uint64_t)v3, type metadata accessor for NANAttribute);
      uint64_t v4 = 43;
      break;
    case 0x27u:
      sub_10021A4B0((uint64_t)v3, type metadata accessor for NANAttribute);
      uint64_t v4 = 44;
      break;
    case 0x28u:
    case 0x29u:
      sub_10021A4B0((uint64_t)v3, type metadata accessor for NANAttribute);
      uint64_t v4 = 45;
      break;
    case 0x2Au:
      uint64_t v4 = *v3;
      sub_10000C970(*((void *)v3 + 1), *((void *)v3 + 2));
      break;
    default:
      return v4;
  }
  return v4;
}

void NANAttribute.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  type metadata accessor for NANAttribute.CustomDeviceInformation(0);
  __chkstk_darwin();
  uint64_t v5 = &v241[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for NANAttribute(0);
  __chkstk_darwin();
  uint64_t v7 = (unsigned __int16 *)&v241[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10021A510(v2, (uint64_t)v7, type metadata accessor for NANAttribute);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      int v11 = *((_DWORD *)v7 + 3);
      Swift::UInt8 v12 = *(unsigned char *)v7;
      Swift::UInt8 v13 = *((unsigned char *)v7 + 1);
      Swift::UInt8 v14 = *((unsigned char *)v7 + 2);
      Swift::UInt8 v15 = *((unsigned char *)v7 + 3);
      Swift::UInt8 v16 = *((unsigned char *)v7 + 4);
      Swift::UInt8 v17 = *((unsigned char *)v7 + 5);
      Swift::UInt8 v18 = *((unsigned char *)v7 + 6);
      Swift::UInt8 v19 = *((unsigned char *)v7 + 7);
      v250  = *((unsigned __int8 *)v7 + 8);
      LODWORD(v251)  = v11;
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(v12);
      Hasher._combine(_:)(v13);
      Hasher._combine(_:)(v14);
      Hasher._combine(_:)(v15);
      Hasher._combine(_:)(v16);
      Hasher._combine(_:)(v17);
      Hasher._combine(_:)(v18);
      Hasher._combine(_:)(v19);
      Hasher._combine(_:)(v250);
      Hasher._combine(_:)(v251);
      return;
    case 2u:
      uint64_t v20 = *(void *)v7;
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(*(void *)(v20 + 16));
      uint64_t v21 = *(void *)(v20 + 16);
      if (!v21) {
        goto LABEL_55;
      }
      swift_bridgeObjectRetain();
      uint64_t v22 = (unint64_t *)(v20 + 40);
      do
      {
        uint64_t v23 = *(v22 - 1);
        unint64_t v24 = *v22;
        sub_100013D44(v23, *v22);
        Data.hash(into:)();
        sub_10000C970(v23, v24);
        v22 += 2;
        --v21;
      }
      while (v21);
      goto LABEL_93;
    case 3u:
      long long v25 = *((_OWORD *)v7 + 3);
      v254  = *((_OWORD *)v7 + 2);
      v255  = v25;
      v256  = *((_OWORD *)v7 + 4);
      long long v26 = *((_OWORD *)v7 + 1);
      v252  = *(_OWORD *)v7;
      v253  = v26;
      Hasher._combine(_:)(3uLL);
      NANAttribute.ServiceDescriptor.hash(into:)(a1);
      sub_10013F060((uint64_t)&v252);
      return;
    case 4u:
      Swift::UInt16 v27 = *v7;
      Hasher._combine(_:)(4uLL);
      goto LABEL_80;
    case 5u:
      uint64_t v28 = *((void *)v7 + 3);
      unint64_t v29 = *((void *)v7 + 4);
      int v30 = *((unsigned __int8 *)v7 + 40);
      v250  = *((unsigned __int8 *)v7 + 18);
      LODWORD(v251)  = v30;
      Swift::UInt8 v31 = *(unsigned char *)v7;
      Swift::UInt8 v32 = *((unsigned char *)v7 + 1);
      Swift::UInt8 v33 = *((unsigned char *)v7 + 2);
      Swift::UInt8 v34 = *((unsigned char *)v7 + 3);
      Swift::UInt8 v35 = *((unsigned char *)v7 + 4);
      Swift::UInt8 v36 = *((unsigned char *)v7 + 5);
      int v37 = *((unsigned __int8 *)v7 + 7);
      v242  = *((unsigned __int8 *)v7 + 6);
      v243  = v37;
      int v38 = *((unsigned __int8 *)v7 + 9);
      v244  = *((unsigned __int8 *)v7 + 8);
      v245  = v38;
      int v39 = *((unsigned __int8 *)v7 + 11);
      v246  = *((unsigned __int8 *)v7 + 10);
      v247  = v39;
      int v40 = *((unsigned __int8 *)v7 + 17);
      v248  = *((unsigned __int8 *)v7 + 16);
      v249  = v40;
      Hasher._combine(_:)(5uLL);
      Hasher._combine(_:)(v31);
      Hasher._combine(_:)(v32);
      Hasher._combine(_:)(v33);
      Hasher._combine(_:)(v34);
      Hasher._combine(_:)(v35);
      Hasher._combine(_:)(v36);
      Hasher._combine(_:)(v242);
      Hasher._combine(_:)(v243);
      Hasher._combine(_:)(v244);
      Hasher._combine(_:)(v245);
      Hasher._combine(_:)(v246);
      Hasher._combine(_:)(v247);
      Hasher._combine(_:)(v248);
      Hasher._combine(_:)(v249);
      Hasher._combine(_:)(v250);
      sub_100013D44(v28, v29);
      Data.hash(into:)();
      sub_10000C970(v28, v29);
      Hasher._combine(_:)(v251);
      goto LABEL_74;
    case 6u:
      int v41 = *((unsigned __int8 *)v7 + 10);
      uint64_t v28 = *((void *)v7 + 2);
      unint64_t v29 = *((void *)v7 + 3);
      Swift::UInt8 v42 = *(unsigned char *)v7;
      Swift::UInt8 v43 = *((unsigned char *)v7 + 1);
      Swift::UInt8 v44 = *((unsigned char *)v7 + 2);
      Swift::UInt8 v45 = *((unsigned char *)v7 + 3);
      Swift::UInt8 v46 = *((unsigned char *)v7 + 4);
      Swift::UInt8 v47 = *((unsigned char *)v7 + 5);
      int v48 = *((unsigned __int8 *)v7 + 8);
      v248  = *((unsigned __int8 *)v7 + 6);
      v249  = v48;
      v250  = *((unsigned __int8 *)v7 + 9);
      LODWORD(v251)  = v41;
      Hasher._combine(_:)(6uLL);
      Hasher._combine(_:)(v42);
      Hasher._combine(_:)(v43);
      Hasher._combine(_:)(v44);
      Hasher._combine(_:)(v45);
      Hasher._combine(_:)(v46);
      Swift::UInt8 v49 = v47;
      goto LABEL_13;
    case 7u:
      LODWORD(v251)  = *((unsigned __int8 *)v7 + 18);
      uint64_t v28 = *((void *)v7 + 3);
      unint64_t v29 = *((void *)v7 + 4);
      Swift::UInt8 v50 = *(unsigned char *)v7;
      Swift::UInt8 v51 = *((unsigned char *)v7 + 1);
      Swift::UInt8 v52 = *((unsigned char *)v7 + 2);
      Swift::UInt8 v53 = *((unsigned char *)v7 + 3);
      Swift::UInt8 v54 = *((unsigned char *)v7 + 4);
      Swift::UInt8 v55 = *((unsigned char *)v7 + 5);
      int v56 = *((unsigned __int8 *)v7 + 7);
      v243  = *((unsigned __int8 *)v7 + 6);
      v244  = v56;
      int v57 = *((unsigned __int8 *)v7 + 9);
      v245  = *((unsigned __int8 *)v7 + 8);
      v246  = v57;
      int v58 = *((unsigned __int8 *)v7 + 11);
      v247  = *((unsigned __int8 *)v7 + 10);
      v248  = v58;
      unsigned int v59 = *((unsigned __int8 *)v7 + 17);
      v249  = *((unsigned __int8 *)v7 + 16);
      v250  = v59;
      Hasher._combine(_:)(7uLL);
      Hasher._combine(_:)(v50);
      Hasher._combine(_:)(v51);
      Hasher._combine(_:)(v52);
      Hasher._combine(_:)(v53);
      Hasher._combine(_:)(v54);
      Hasher._combine(_:)(v55);
      Hasher._combine(_:)(v243);
      Hasher._combine(_:)(v244);
      Hasher._combine(_:)(v245);
      Hasher._combine(_:)(v246);
      Swift::UInt8 v49 = v247;
LABEL_13:
      Hasher._combine(_:)(v49);
      Hasher._combine(_:)(v248);
      Hasher._combine(_:)(v249);
      Hasher._combine(_:)(v250);
      Swift::UInt8 v60 = v251;
      goto LABEL_71;
    case 8u:
      int v61 = *((unsigned __int8 *)v7 + 10);
      uint64_t v62 = *((void *)v7 + 2);
      unint64_t v63 = *((void *)v7 + 3);
      uint64_t v28 = *((void *)v7 + 4);
      unint64_t v29 = *((void *)v7 + 5);
      Swift::UInt8 v64 = *(unsigned char *)v7;
      Swift::UInt8 v65 = *((unsigned char *)v7 + 1);
      Swift::UInt8 v66 = *((unsigned char *)v7 + 2);
      Swift::UInt8 v67 = *((unsigned char *)v7 + 3);
      int v68 = *((unsigned __int8 *)v7 + 5);
      v247  = *((unsigned __int8 *)v7 + 4);
      v248  = v68;
      v249  = *((unsigned __int8 *)v7 + 8);
      v250  = *((unsigned __int8 *)v7 + 9);
      LODWORD(v251)  = v61;
      Hasher._combine(_:)(8uLL);
      Hasher._combine(_:)(v64);
      Hasher._combine(_:)(v65);
      Hasher._combine(_:)(v66);
      Hasher._combine(_:)(v67);
      Hasher._combine(_:)(v247);
      Hasher._combine(_:)(v248);
      Hasher._combine(_:)(v249);
      Hasher._combine(_:)(v250);
      Hasher._combine(_:)(v251);
      sub_100013D44(v62, v63);
      Data.hash(into:)();
      sub_10000C970(v62, v63);
      sub_100013D44(v28, v29);
      Data.hash(into:)();
      sub_10000C970(v28, v29);
      uint64_t v69 = v62;
      unint64_t v70 = v63;
      goto LABEL_73;
    case 9u:
      Swift::UInt8 v71 = *((unsigned char *)v7 + 2);
      uint64_t v72 = *((void *)v7 + 1);
      unint64_t v73 = *((void *)v7 + 2);
      Swift::UInt8 v74 = *(unsigned char *)v7;
      Swift::UInt8 v75 = *((unsigned char *)v7 + 1);
      Hasher._combine(_:)(9uLL);
      Hasher._combine(_:)(v74);
      Hasher._combine(_:)(v75);
      Hasher._combine(_:)(v71);
      sub_100013D44(v72, v73);
      Data.hash(into:)();
      sub_10000C970(v72, v73);
      uint64_t v76 = v72;
      unint64_t v77 = v73;
      goto LABEL_75;
    case 0xAu:
      uint64_t v78 = *((void *)v7 + 1);
      Swift::UInt8 v79 = *(unsigned char *)v7;
      Hasher._combine(_:)(0xAuLL);
      Hasher._combine(_:)(v79);
      swift_bridgeObjectRetain();
      sub_10009F38C(a1, v78);
      goto LABEL_93;
    case 0xBu:
      Swift::UInt8 v8 = *(unsigned char *)v7;
      Swift::UInt8 v9 = *((unsigned char *)v7 + 1);
      Swift::UInt v10 = 11;
      goto LABEL_18;
    case 0xCu:
      uint64_t v28 = *((void *)v7 + 1);
      unint64_t v29 = *((void *)v7 + 2);
      Swift::UInt8 v80 = *(unsigned char *)v7;
      Swift::UInt8 v81 = *((unsigned char *)v7 + 1);
      Swift::UInt8 v82 = *((unsigned char *)v7 + 2);
      Swift::UInt8 v83 = *((unsigned char *)v7 + 3);
      Swift::UInt8 v84 = *((unsigned char *)v7 + 4);
      Swift::UInt8 v85 = *((unsigned char *)v7 + 5);
      Hasher._combine(_:)(0xCuLL);
      Hasher._combine(_:)(v80);
      Hasher._combine(_:)(v81);
      Hasher._combine(_:)(v82);
      Hasher._combine(_:)(v83);
      Hasher._combine(_:)(v84);
      Swift::UInt8 v60 = v85;
      goto LABEL_71;
    case 0xDu:
      Swift::UInt64 v86 = *((void *)v7 + 1);
      Swift::UInt8 v87 = *(unsigned char *)v7;
      Swift::UInt8 v88 = *((unsigned char *)v7 + 1);
      Swift::UInt8 v89 = *((unsigned char *)v7 + 2);
      Swift::UInt8 v90 = *((unsigned char *)v7 + 3);
      Swift::UInt8 v91 = *((unsigned char *)v7 + 4);
      Swift::UInt8 v92 = *((unsigned char *)v7 + 5);
      Swift::UInt8 v93 = *((unsigned char *)v7 + 16);
      int v94 = *((unsigned __int8 *)v7 + 18);
      v245  = *((unsigned __int8 *)v7 + 17);
      v246  = v94;
      int v95 = *((unsigned __int8 *)v7 + 20);
      v247  = *((unsigned __int8 *)v7 + 19);
      v248  = v95;
      unsigned int v96 = *((unsigned __int8 *)v7 + 22);
      v249  = *((unsigned __int8 *)v7 + 21);
      v250  = v96;
      LODWORD(v251)  = *((unsigned __int8 *)v7 + 23);
      Hasher._combine(_:)(0xDuLL);
      Hasher._combine(_:)(v87);
      Hasher._combine(_:)(v88);
      Hasher._combine(_:)(v89);
      Hasher._combine(_:)(v90);
      Hasher._combine(_:)(v91);
      Hasher._combine(_:)(v92);
      Hasher._combine(_:)(v86);
      Hasher._combine(_:)(v93);
      Hasher._combine(_:)(v245);
      Hasher._combine(_:)(v246);
      Hasher._combine(_:)(v247);
      Hasher._combine(_:)(v248);
      Hasher._combine(_:)(v249);
      Hasher._combine(_:)(v250);
      Hasher._combine(_:)(v251);
      return;
    case 0xEu:
      int v97 = *((_DWORD *)v7 + 1);
      int v98 = *((unsigned __int8 *)v7 + 8);
      Swift::UInt8 v99 = *((unsigned char *)v7 + 9);
      LODWORD(v251)  = *((unsigned __int8 *)v7 + 10);
      uint64_t v101 = *((void *)v7 + 2);
      uint64_t v100 = *((void *)v7 + 3);
      unint64_t v102 = *((void *)v7 + 4);
      Swift::UInt8 v103 = *(unsigned char *)v7;
      Swift::UInt16 v104 = v7[1];
      Hasher._combine(_:)(0xEuLL);
      Hasher._combine(_:)(v103);
      Hasher._combine(_:)(v104);
      if (v98 == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v97);
        Hasher._combine(_:)(HIWORD(v97));
      }
      if (v251) {
        Swift::UInt8 v99 = 0;
      }
      else {
        Hasher._combine(_:)(1u);
      }
      Hasher._combine(_:)(v99);
      if (v101 == 4)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v101);
        sub_10013316C(v101, v100, v102);
        Data.hash(into:)();
      }
      sub_1001331AC(v101, v100, v102);
      sub_1001331AC(v101, v100, v102);
      return;
    case 0xFu:
      char v105 = *(unsigned char *)v7;
      int v106 = *((unsigned __int8 *)v7 + 1);
      Swift::UInt16 v107 = v7[1];
      Swift::UInt8 v108 = *((unsigned char *)v7 + 4);
      v109  = *((unsigned char *)v7 + 5);
      v110  = *((unsigned char *)v7 + 6);
      v111  = v7[4];
      v112  = *((unsigned char *)v7 + 10);
      Hasher._combine(_:)(0xFuLL);
      if (v106) {
        v113  = 1;
      }
      else {
        v113  = 2 * v105;
      }
      Hasher._combine(_:)(v113);
      Hasher._combine(_:)(v107);
      Hasher._combine(_:)(v108);
      Hasher._combine(_:)(v109);
      Hasher._combine(_:)(v110);
      Hasher._combine(_:)(v111);
      Hasher._combine(_:)(v112);
      return;
    case 0x10u:
      v114  = *((_OWORD *)v7 + 1);
      v252  = *(_OWORD *)v7;
      v253  = v114;
      v254  = *((_OWORD *)v7 + 2);
      Hasher._combine(_:)(0x10uLL);
      NANAttribute.Datapath.hash(into:)();
      sub_100218374((uint64_t)&v252);
      return;
    case 0x11u:
      v115  = *((void *)v7 + 1);
      v116  = *(unsigned char *)v7;
      v117  = v7[1];
      Hasher._combine(_:)(0x11uLL);
      Hasher._combine(_:)(v116);
      Hasher._combine(_:)(v117);
      swift_bridgeObjectRetain();
      sub_10009F1A8(a1, v115);
      goto LABEL_93;
    case 0x12u:
      v118  = *((void *)v7 + 1);
      v119  = *(unsigned char *)v7;
      v120  = *((unsigned char *)v7 + 1);
      v121  = *((unsigned char *)v7 + 2);
      v122  = *((unsigned char *)v7 + 3);
      v123  = *((unsigned char *)v7 + 4);
      v124  = *((unsigned char *)v7 + 5);
      v125  = *((unsigned char *)v7 + 6);
      Hasher._combine(_:)(0x12uLL);
      Hasher._combine(_:)(v119);
      Hasher._combine(_:)(v120);
      Hasher._combine(_:)(v121);
      Hasher._combine(_:)(v122);
      Hasher._combine(_:)(v123);
      Hasher._combine(_:)(v124);
      Hasher._combine(_:)(v125);
      goto LABEL_92;
    case 0x13u:
      v182  = *((unsigned char *)v7 + 4);
      v183  = *((unsigned char *)v7 + 5);
      v251  = *((void *)v7 + 1);
      v184  = *((unsigned __int8 *)v7 + 16);
      v118  = *((void *)v7 + 3);
      v185  = *(unsigned char *)v7;
      v186  = *((unsigned char *)v7 + 1);
      v187  = *((unsigned char *)v7 + 2);
      v188  = *((unsigned char *)v7 + 3);
      Hasher._combine(_:)(0x13uLL);
      Hasher._combine(_:)(v185);
      Hasher._combine(_:)(v186);
      Hasher._combine(_:)(v187);
      Hasher._combine(_:)(v188);
      if (v183) {
        v182  = 0;
      }
      else {
        Hasher._combine(_:)(1u);
      }
      Hasher._combine(_:)(v182);
      if (v184) {
        goto LABEL_90;
      }
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v251);
      goto LABEL_92;
    case 0x14u:
      v126  = *(unsigned char *)v7;
      v127  = v7[1];
      Hasher._combine(_:)(0x14uLL);
      Hasher._combine(_:)(v126);
      Hasher._combine(_:)(v127);
      return;
    case 0x15u:
      v128  = *((void *)v7 + 1);
      v129  = v7[8];
      v130  = *((unsigned char *)v7 + 18);
      v131  = *((unsigned char *)v7 + 19);
      v132  = *(void *)(v7 + 10);
      v133  = v7[14];
      v134  = *v7;
      v135  = *((unsigned int *)v7 + 1);
      Hasher._combine(_:)(0x15uLL);
      LOWORD(v252)  = v129;
      BYTE2(v252)  = v130;
      BYTE3(v252)  = v131;
      *(void *)((char *)&v252 + 4)  = v132;
      WORD6(v252)  = v133;
      NANAttribute.UnalignedSchedule.hash(into:)(a1, v134 | (v135 << 32), v128, v252, *((uint64_t *)&v252 + 1));
      return;
    case 0x16u:
      Swift::UInt16 v27 = v7[1];
      v136  = *((unsigned __int8 *)v7 + 4);
      v137  = *(unsigned char *)v7;
      Hasher._combine(_:)(0x16uLL);
      Hasher._combine(_:)(v137);
      if (v136 == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
LABEL_80:
        Hasher._combine(_:)(v27);
      }
      return;
    case 0x17u:
      v189  = *((_DWORD *)v7 + 1);
      v190  = *((unsigned __int8 *)v7 + 8);
      v118  = *((void *)v7 + 2);
      v191  = *(unsigned char *)v7;
      v192  = *((unsigned char *)v7 + 1);
      v193  = *((unsigned char *)v7 + 2);
      v194  = *((unsigned char *)v7 + 3);
      Hasher._combine(_:)(0x17uLL);
      Hasher._combine(_:)(v191);
      Hasher._combine(_:)(v192);
      Hasher._combine(_:)(v193);
      Hasher._combine(_:)(v194);
      if (v190 == 1)
      {
LABEL_90:
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v189);
      }
      goto LABEL_92;
    case 0x18u:
      v138  = *(void *)v7;
      Hasher._combine(_:)(0x18uLL);
      NANAttribute.FineTimingMeasurementRangeReport.hash(into:)(a1, v138);
      goto LABEL_55;
    case 0x19u:
      v139  = *(unsigned char *)v7;
      v140  = *((unsigned __int8 *)v7 + 1);
      uint64_t v28 = *((void *)v7 + 1);
      unint64_t v29 = *((void *)v7 + 2);
      Hasher._combine(_:)(0x19uLL);
      if (v140) {
        Swift::UInt8 v60 = 1;
      }
      else {
        Swift::UInt8 v60 = 2 * v139;
      }
      goto LABEL_71;
    case 0x1Au:
      v249  = *((unsigned __int8 *)v7 + 12);
      v195  = *(unsigned char *)v7;
      v196  = *((unsigned char *)v7 + 1);
      v197  = *((unsigned char *)v7 + 2);
      v198  = *((unsigned char *)v7 + 3);
      v199  = *((unsigned char *)v7 + 4);
      v200  = *((unsigned char *)v7 + 5);
      v201  = *((unsigned char *)v7 + 6);
      v202  = *((unsigned char *)v7 + 7);
      v203  = *((unsigned __int8 *)v7 + 9);
      v242  = *((unsigned __int8 *)v7 + 8);
      v243  = v203;
      v204  = *((unsigned __int8 *)v7 + 11);
      v244  = *((unsigned __int8 *)v7 + 10);
      v245  = v204;
      v205  = *((unsigned __int8 *)v7 + 14);
      v246  = *((unsigned __int8 *)v7 + 13);
      v247  = v205;
      v248  = *((unsigned __int8 *)v7 + 15);
      v206  = v7[9];
      v250  = v7[8];
      LODWORD(v251)  = v206;
      Hasher._combine(_:)(0x1AuLL);
      Hasher._combine(_:)(v195);
      Hasher._combine(_:)(v196);
      Hasher._combine(_:)(v197);
      Hasher._combine(_:)(v198);
      Hasher._combine(_:)(v199);
      Hasher._combine(_:)(v200);
      Hasher._combine(_:)(v201);
      Hasher._combine(_:)(v202);
      Hasher._combine(_:)(v242);
      Hasher._combine(_:)(v243);
      Hasher._combine(_:)(v244);
      Hasher._combine(_:)(v245);
      Hasher._combine(_:)(v249);
      Hasher._combine(_:)(v246);
      Hasher._combine(_:)(v247);
      v207  = v248;
      goto LABEL_65;
    case 0x1Bu:
      v141  = *(unsigned char *)v7;
      v142  = *((unsigned char *)v7 + 1);
      v143  = *((unsigned char *)v7 + 2);
      v144  = *((unsigned char *)v7 + 3);
      v145  = *((unsigned char *)v7 + 4);
      v146  = *((unsigned char *)v7 + 5);
      v147  = *((unsigned char *)v7 + 6);
      v148  = *((unsigned char *)v7 + 7);
      v149  = *((unsigned __int8 *)v7 + 9);
      v248  = *((unsigned __int8 *)v7 + 8);
      v249  = v149;
      v150  = v7[6];
      v250  = v7[5];
      LODWORD(v251)  = v150;
      Hasher._combine(_:)(0x1BuLL);
      Hasher._combine(_:)(v141);
      Hasher._combine(_:)(v142);
      Hasher._combine(_:)(v143);
      Hasher._combine(_:)(v144);
      Hasher._combine(_:)(v145);
      Hasher._combine(_:)(v146);
      Hasher._combine(_:)(v147);
      v151  = v148;
      goto LABEL_64;
    case 0x1Cu:
      v208  = *(unsigned char *)v7;
      v209  = *((unsigned char *)v7 + 1);
      v210  = *((unsigned char *)v7 + 2);
      v211  = *((unsigned char *)v7 + 3);
      v212  = *((unsigned char *)v7 + 4);
      v213  = *((unsigned char *)v7 + 5);
      v214  = *((unsigned char *)v7 + 6);
      v215  = *((unsigned char *)v7 + 7);
      v216  = *((unsigned __int8 *)v7 + 9);
      v243  = *((unsigned __int8 *)v7 + 8);
      v244  = v216;
      v217  = *((unsigned __int8 *)v7 + 11);
      v245  = *((unsigned __int8 *)v7 + 10);
      v246  = v217;
      v218  = *((unsigned __int8 *)v7 + 13);
      v247  = *((unsigned __int8 *)v7 + 12);
      v248  = v218;
      v219  = v7[8];
      v249  = *((unsigned __int8 *)v7 + 14);
      v250  = v219;
      LODWORD(v251)  = v7[9];
      Hasher._combine(_:)(0x1CuLL);
      Hasher._combine(_:)(v208);
      Hasher._combine(_:)(v209);
      Hasher._combine(_:)(v210);
      Hasher._combine(_:)(v211);
      Hasher._combine(_:)(v212);
      Hasher._combine(_:)(v213);
      Hasher._combine(_:)(v214);
      Hasher._combine(_:)(v215);
      Hasher._combine(_:)(v243);
      Hasher._combine(_:)(v244);
      Hasher._combine(_:)(v245);
      Hasher._combine(_:)(v246);
      v151  = v247;
LABEL_64:
      Hasher._combine(_:)(v151);
      Hasher._combine(_:)(v248);
      v207  = v249;
LABEL_65:
      Hasher._combine(_:)(v207);
      Hasher._combine(_:)(v250);
      Hasher._combine(_:)(v251);
      return;
    case 0x1Du:
      uint64_t v28 = *((void *)v7 + 2);
      unint64_t v29 = *((void *)v7 + 3);
      v220  = *(unsigned char *)v7;
      v221  = *((unsigned char *)v7 + 1);
      v222  = *((unsigned char *)v7 + 2);
      v223  = *((unsigned char *)v7 + 3);
      v224  = *((unsigned char *)v7 + 4);
      v225  = *((unsigned char *)v7 + 5);
      v226  = *((unsigned __int8 *)v7 + 7);
      v247  = *((unsigned __int8 *)v7 + 6);
      v248  = v226;
      v227  = v7[5];
      v249  = *((unsigned __int8 *)v7 + 8);
      v250  = v227;
      LODWORD(v251)  = v7[6];
      Hasher._combine(_:)(0x1DuLL);
      Hasher._combine(_:)(v220);
      Hasher._combine(_:)(v221);
      Hasher._combine(_:)(v222);
      Hasher._combine(_:)(v223);
      Hasher._combine(_:)(v224);
      Hasher._combine(_:)(v225);
      Hasher._combine(_:)(v247);
      Hasher._combine(_:)(v248);
      Hasher._combine(_:)(v249);
      Hasher._combine(_:)(v250);
      Hasher._combine(_:)(v251);
      goto LABEL_72;
    case 0x1Eu:
      v152  = *((void *)v7 + 1);
      v153  = *(unsigned char *)v7;
      Hasher._combine(_:)(0x1EuLL);
      Hasher._combine(_:)(v153);
      Hasher._combine(_:)(*(void *)(v152 + 16));
      v154  = *(void *)(v152 + 16);
      if (v154)
      {
        v155  = (Swift::UInt8 *)(v152 + 33);
        do
        {
          v156  = *(v155 - 1) + 1;
          v157  = *v155;
          v155 += 2;
          Hasher._combine(_:)(v156);
          Hasher._combine(_:)(v157);
          --v154;
        }
        while (v154);
      }
      goto LABEL_55;
    case 0x1Fu:
      v158  = *(void *)v7;
      Hasher._combine(_:)(0x1FuLL);
      swift_bridgeObjectRetain();
      sub_10009F024(a1, v158);
      goto LABEL_93;
    case 0x20u:
      uint64_t v28 = *((void *)v7 + 1);
      unint64_t v29 = *((void *)v7 + 2);
      v159  = *(unsigned char *)v7;
      Hasher._combine(_:)(0x20uLL);
      Swift::UInt8 v60 = v159;
      goto LABEL_71;
    case 0x21u:
      v160  = *(void *)v7;
      v161  = *((void *)v7 + 1);
      v162  = *((void *)v7 + 3);
      v163  = v7[8];
      v164  = *((unsigned char *)v7 + 18);
      Hasher._combine(_:)(0x21uLL);
      Hasher._combine(_:)(v160);
      Hasher._combine(_:)(v161);
      Hasher._combine(_:)(v163);
      Hasher._combine(_:)(v164);
      swift_bridgeObjectRetain();
      sub_10009E960(a1, v162);
      goto LABEL_93;
    case 0x22u:
      v118  = *(void *)v7;
      Hasher._combine(_:)(0x22uLL);
LABEL_92:
      swift_bridgeObjectRetain();
      sub_10009E960(a1, v118);
      goto LABEL_93;
    case 0x23u:
      v165  = *(void *)v7;
      Hasher._combine(_:)(0x23uLL);
      Hasher._combine(_:)(*(void *)(v165 + 16));
      v166  = *(void *)(v165 + 16);
      if (!v166) {
        goto LABEL_55;
      }
      swift_bridgeObjectRetain();
      v167  = (unint64_t *)(v165 + 40);
      do
      {
        v168  = *(v167 - 1);
        v169  = *v167;
        sub_100013D44(v168, *v167);
        Data.hash(into:)();
        sub_10000C970(v168, v169);
        v167 += 2;
        --v166;
      }
      while (v166);
LABEL_93:
      swift_bridgeObjectRelease_n();
      return;
    case 0x24u:
      v170  = *((_OWORD *)v7 + 1);
      v252  = *(_OWORD *)v7;
      v253  = v170;
      v171  = *((_OWORD *)v7 + 3);
      v254  = *((_OWORD *)v7 + 2);
      v255  = v171;
      Hasher._combine(_:)(0x24uLL);
      NANAttribute.DatapathExtension.hash(into:)();
      sub_10021AA9C(&v252, (void (*)(void, void))sub_10022FEA0, (void (*)(uint64_t, uint64_t, uint64_t))sub_1001331AC);
      return;
    case 0x25u:
      v172  = *(void *)v7;
      Hasher._combine(_:)(0x25uLL);
      Hasher._combine(_:)(*(void *)(v172 + 16));
      v173  = *(void *)(v172 + 16);
      if (v173)
      {
        for (i  = 0; i != v173; ++i)
        {
          v175  = v172 + i;
          Hasher._combine(_:)(*(unsigned char *)(v175 + 32));
        }
      }
LABEL_55:
      swift_bridgeObjectRelease();
      return;
    case 0x26u:
      v228  = *(void *)v7;
      v229  = *((void *)v7 + 1);
      v230  = *((void *)v7 + 2);
      v231  = *((void *)v7 + 3);
      Hasher._combine(_:)(0x26uLL);
      Hasher._combine(_:)(0);
      sub_100013D44(v228, v229);
      Data.hash(into:)();
      sub_10000C970(v228, v229);
      sub_100013D44(v230, v231);
      Data.hash(into:)();
      sub_10000C970(v230, v231);
      sub_10000C970(v228, v229);
      uint64_t v76 = v230;
      unint64_t v77 = v231;
      goto LABEL_75;
    case 0x27u:
      v232  = *((void *)v7 + 1);
      v233  = *((void *)v7 + 2);
      v234  = *((void *)v7 + 3);
      v235  = *((void *)v7 + 4);
      v236  = v7[20];
      v237  = *(unsigned char *)v7;
      v238  = *((unsigned char *)v7 + 1);
      v239  = *((unsigned char *)v7 + 2);
      Hasher._combine(_:)(0x27uLL);
      Hasher._combine(_:)(v237);
      Hasher._combine(_:)(v238);
      Hasher._combine(_:)(v239);
      if (v235 >> 60 == 15)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        if (v233)
        {
          Hasher._combine(_:)(0);
        }
        else
        {
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(v232);
        }
        sub_1001450E0(v232, v233, v234, v235);
        Data.hash(into:)();
      }
      sub_10014CC74(v232, v233, v234, v235);
      Hasher._combine(_:)(v236);
      sub_10014CC74(v232, v233, v234, v235);
      return;
    case 0x28u:
      sub_10021A578((uint64_t)v7, (uint64_t)v5, type metadata accessor for NANAttribute.CustomDeviceInformation);
      Hasher._combine(_:)(0x28uLL);
      Hasher._combine(_:)(*v5);
      Hasher._combine(_:)(v5[1]);
      Hasher._combine(_:)(*((_DWORD *)v5 + 1));
      NANAttribute.CustomDeviceInformation.CustomAttributes.hash(into:)(a1);
      sub_10021A4B0((uint64_t)v5, type metadata accessor for NANAttribute.CustomDeviceInformation);
      return;
    case 0x29u:
      v176  = *v7;
      v177  = *((unsigned char *)v7 + 2);
      uint64_t v28 = *((void *)v7 + 1);
      unint64_t v29 = *((void *)v7 + 2);
      Hasher._combine(_:)(0x29uLL);
      sub_100010BCC(&qword_10047BEF8);
      v178  = swift_allocObject();
      *(_OWORD *)(v178 + 16)  = xmmword_1003B2760;
      *(_WORD *)(v178 + 32)  = v176;
      *(unsigned char *)(v178 + 34)  = v177;
      v179  = sub_1001265EC(v178);
      v181  = v180;
      swift_bridgeObjectRelease();
      Data.hash(into:)();
      sub_10000C970(v179, v181);
      goto LABEL_72;
    case 0x2Au:
      v240  = *(char *)v7;
      uint64_t v28 = *((void *)v7 + 1);
      unint64_t v29 = *((void *)v7 + 2);
      Hasher._combine(_:)(0x2AuLL);
      Swift::UInt8 v60 = byte_1003D2CB2[v240];
LABEL_71:
      Hasher._combine(_:)(v60);
LABEL_72:
      sub_100013D44(v28, v29);
      Data.hash(into:)();
      uint64_t v69 = v28;
      unint64_t v70 = v29;
LABEL_73:
      sub_10000C970(v69, v70);
LABEL_74:
      uint64_t v76 = v28;
      unint64_t v77 = v29;
LABEL_75:
      sub_10000C970(v76, v77);
      break;
    default:
      Swift::UInt8 v8 = *(unsigned char *)v7;
      Swift::UInt8 v9 = *((unsigned char *)v7 + 1);
      Swift::UInt v10 = 0;
LABEL_18:
      Hasher._combine(_:)(v10);
      Hasher._combine(_:)(v8);
      Hasher._combine(_:)(v9);
      break;
  }
}

Swift::Int NANAttribute.hashValue.getter()
{
  return sub_10020ABD4((void (*)(unsigned char *))NANAttribute.hash(into:));
}

Swift::Int sub_10020ABD4(void (*a1)(unsigned char *))
{
  Hasher.init(_seed:)();
  a1(v3);
  return Hasher._finalize()();
}

Swift::Int sub_10020AC1C(uint64_t a1, uint64_t a2)
{
  return sub_10020AC34(a1, a2, (void (*)(unsigned char *))NANAttribute.hash(into:));
}

Swift::Int sub_10020AC34(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *))
{
  Hasher.init(_seed:)();
  a3(v5);
  return Hasher._finalize()();
}

Swift::Int sub_10020AC80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10020AC98(a1, a2, a3, (void (*)(unsigned char *))NANAttribute.hash(into:));
}

Swift::Int sub_10020AC98(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  Hasher.init(_seed:)();
  a4(v6);
  return Hasher._finalize()();
}

uint64_t sub_10020ACDC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return NANAttribute.init(from:)(a1, a2);
}

void *sub_10020ACF4(void *a1)
{
  return NANAttribute.encode(to:)(a1);
}

void *Array<A>.retrieve(allAttributes:)(char a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(type metadata accessor for NANAttribute(0) - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  Swift::UInt8 v8 = (char *)&v19 - v7;
  Swift::UInt8 v9 = _swiftEmptyArrayStorage;
  uint64_t v22 = _swiftEmptyArrayStorage;
  uint64_t v10 = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  if (v10)
  {
    uint64_t v11 = *(unsigned __int8 *)(v4 + 80);
    uint64_t v12 = *(void *)(v4 + 72);
    uint64_t v19 = a2;
    uint64_t v20 = v12;
    uint64_t v21 = (v11 + 32) & ~v11;
    uint64_t v13 = a2 + v21;
    do
    {
      sub_10021A510(v13, (uint64_t)v8, type metadata accessor for NANAttribute);
      if (byte_1003D2CB2[(char)NANAttribute.attributeType.getter()] == byte_1003D2CB2[a1])
      {
        uint64_t v14 = (uint64_t)v6;
        sub_10021A578((uint64_t)v8, (uint64_t)v6, type metadata accessor for NANAttribute);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000837FC(0, v9[2] + 1, 1);
        }
        Swift::UInt8 v9 = v22;
        unint64_t v16 = v22[2];
        unint64_t v15 = v22[3];
        if (v16 >= v15 >> 1)
        {
          sub_1000837FC(v15 > 1, v16 + 1, 1);
          Swift::UInt8 v9 = v22;
        }
        v9[2]  = v16 + 1;
        uint64_t v12 = v20;
        uint64_t v17 = (uint64_t)v9 + v21 + v16 * v20;
        uint64_t v6 = (char *)v14;
        sub_10021A578(v14, v17, type metadata accessor for NANAttribute);
      }
      else
      {
        sub_10021A4B0((uint64_t)v8, type metadata accessor for NANAttribute);
      }
      v13 += v12;
      --v10;
    }
    while (v10);
    Swift::UInt8 v9 = v22;
  }
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t Array<A>.modify(attribute:using:)(char a1, uint64_t (*a2)(unint64_t), uint64_t a3)
{
  type metadata accessor for NANAttribute(0);
  uint64_t result = __chkstk_darwin();
  uint64_t v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = *v3;
  uint64_t v13 = *(void *)(*v3 + 16);
  if (v13)
  {
    v20[1]  = a3;
    uint64_t v21 = a2;
    uint64_t v22 = v3;
    uint64_t v23 = v4;
    int v14 = byte_1003D2CB2[a1];
    unint64_t v15 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    unint64_t v16 = *(unint64_t **)(v9 + 72);
    swift_bridgeObjectRetain();
    for (i  = 0; ; ++i)
    {
      sub_10021A510(v12 + v15, (uint64_t)v11, type metadata accessor for NANAttribute);
      int v18 = byte_1003D2CB2[(char)NANAttribute.attributeType.getter()];
      sub_10021A4B0((uint64_t)v11, type metadata accessor for NANAttribute);
      if (v18 == v14) {
        break;
      }
      unint64_t v19 = i + 1;
      if (__OFADD__(i, 1))
      {
        __break(1u);
LABEL_13:
        uint64_t result = sub_1001DFDC0(v12);
        unint64_t v12 = result;
        if ((i & 0x8000000000000000) != 0) {
          goto LABEL_14;
        }
        goto LABEL_9;
      }
      v15 += (unint64_t)v16;
      if (v19 == v13) {
        return swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v16 = v22;
    unint64_t v12 = *v22;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0) {
      goto LABEL_13;
    }
    if ((i & 0x8000000000000000) != 0)
    {
LABEL_14:
      __break(1u);
      goto LABEL_15;
    }
LABEL_9:
    if (i < *(void *)(v12 + 16))
    {
      uint64_t result = v21(v12 + v15);
      *unint64_t v16 = v12;
      return result;
    }
LABEL_15:
    __break(1u);
  }
  return result;
}

uint64_t sub_10020B150()
{
  uint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  unint64_t v3 = v2 >> 62;
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v4 = (int)v1;
      uint64_t v5 = v1 >> 32;
      goto LABEL_5;
    case 2uLL:
      uint64_t v4 = *(void *)(v1 + 16);
      uint64_t v5 = *(void *)(v1 + 24);
      goto LABEL_5;
    case 3uLL:
      goto LABEL_17;
    default:
      uint64_t v4 = 0;
      uint64_t v5 = BYTE6(v2);
LABEL_5:
      if (v4 == v5) {
        goto LABEL_17;
      }
      uint64_t v6 = sub_10011ADA8(*(void *)v0, *(void *)(v0 + 8));
      if ((v6 & 0x100) != 0) {
        goto LABEL_16;
      }
      uint64_t v7 = v6;
      if (v3)
      {
        if (v3 == 1)
        {
          uint64_t v8 = (int)v1 + 1;
          uint64_t v9 = v1 >> 32;
        }
        else
        {
          uint64_t v10 = *(void *)(v1 + 16);
          uint64_t v8 = v10 + 1;
          if (__OFADD__(v10, 1))
          {
            __break(1u);
LABEL_16:
            __break(1u);
LABEL_17:
            __break(1u);
LABEL_18:
            __break(1u);
            JUMPOUT(0x10020B258);
          }
          uint64_t v9 = *(void *)(v1 + 24);
        }
      }
      else
      {
        uint64_t v9 = BYTE6(v2);
        uint64_t v8 = 1;
      }
      if (v9 < v8) {
        goto LABEL_18;
      }
      uint64_t v11 = Data._Representation.subscript.getter();
      uint64_t v13 = v12;
      sub_10000C970(v1, v2);
      *(void *)uint64_t v0 = v11;
      *(void *)(v0 + 8)  = v13;
      return v7;
  }
}

CoreP2P::NANAttribute::ServiceDescriptor::Control __swiftcall NANAttribute.ServiceDescriptor.Control.init(type:_:)(CoreP2P::NANAttribute::ServiceDescriptor::Control::ControlType type, CoreP2P::NANAttribute::ServiceDescriptor::Control _)
{
  return (CoreP2P::NANAttribute::ServiceDescriptor::Control)(_.rawValue | type);
}

char *sub_10020B270(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v6 = *(void **)v4;
  int64_t v7 = *(void *)(*(void *)v4 + 16);
  if (v7 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v10 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v11 = v7 + v10;
  if (__OFADD__(v7, v10))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native  = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v11 > v6[3] >> 1)
  {
    if (v7 <= v11) {
      int64_t v15 = v7 + v10;
    }
    else {
      int64_t v15 = v7;
    }
    uint64_t v6 = sub_1000C5698(isUniquelyReferenced_nonNull_native, v15, 1, v6);
  }
  unint64_t v16 = &v6[2 * a1 + 4];
  uint64_t result = (char *)swift_arrayDestroy();
  if (!v10) {
    goto LABEL_20;
  }
  uint64_t v18 = v6[2];
  BOOL v19 = __OFSUB__(v18, a2);
  uint64_t v20 = v18 - a2;
  if (v19) {
    goto LABEL_26;
  }
  if ((v20 & 0x8000000000000000) == 0)
  {
    uint64_t result = (char *)(v16 + 2);
    uint64_t v21 = &v6[2 * a2 + 4];
    if (v16 + 2 != v21 || result >= (char *)&v21[2 * v20]) {
      uint64_t result = (char *)memmove(result, v21, 16 * v20);
    }
    uint64_t v22 = v6[2];
    BOOL v19 = __OFADD__(v22, v10);
    uint64_t v23 = v22 + v10;
    if (!v19)
    {
      _OWORD v6[2] = v23;
LABEL_20:
      *unint64_t v16 = a3;
      v16[1]  = a4;
      *(void *)uint64_t v4 = v6;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_10020B3F4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if ((a4 & 0xFFFFFF) >= 0xFF0000)
  {
    Swift::UInt8 v4 = 0;
LABEL_8:
    Hasher._combine(_:)(v4);
    return;
  }
  Hasher._combine(_:)(1u);
  if ((a4 & 0x10000) == 0)
  {
    Swift::UInt v8 = *(void *)(a2 + 16);
    Hasher._combine(_:)(v8);
    if (v8)
    {
      uint64_t v9 = (Swift::UInt8 *)(a2 + 37);
      do
      {
        Swift::UInt8 v10 = *(v9 - 5);
        Swift::UInt8 v11 = *(v9 - 4);
        Swift::UInt8 v12 = *(v9 - 3);
        Swift::UInt8 v13 = *(v9 - 2);
        Swift::UInt8 v14 = *(v9 - 1);
        Swift::UInt8 v15 = *v9;
        v9 += 6;
        Hasher._combine(_:)(v10);
        Hasher._combine(_:)(v11);
        Hasher._combine(_:)(v12);
        Hasher._combine(_:)(v13);
        Hasher._combine(_:)(v14);
        Hasher._combine(_:)(v15);
        --v8;
      }
      while (v8);
    }
    Swift::UInt8 v4 = a3 & 1;
    goto LABEL_8;
  }
  sub_100013D44(a2, a3);
  Data.hash(into:)();
  Hasher._combine(_:)(a4);
  Hasher._combine(_:)(BYTE1(a4) & 1);

  sub_100133188(a2, a3, a4);
}

uint64_t sub_10020B52C(unint64_t a1, unint64_t a2, void **a3, uint64_t a4)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (*(void *)(*(void *)a4 + 16) <= a2)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  Swift::UInt8 v4 = a3;
  unint64_t v5 = a1;
  char v7 = *(unsigned char *)(*(void *)a4 + a2 + 32);
  uint64_t v6 = *a3;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *Swift::UInt8 v4 = v6;
  if (result)
  {
    if ((v5 & 0x8000000000000000) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
LABEL_9:
  uint64_t result = (uint64_t)sub_1001DFD70(v6);
  uint64_t v6 = (void *)result;
  if ((v5 & 0x8000000000000000) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if (v6[2] > v5)
  {
    *((unsigned char *)v6 + v5 + 32) &= v7;
    *Swift::UInt8 v4 = v6;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10020B5CC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_10023290C(a1, a2, a3, *a4);
}

BOOL _s7CoreP2P12NANAttributeO17ServiceDescriptorV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  if ((_s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) == 0|| *(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16)|| *(unsigned __int8 *)(a1 + 17) != *(unsigned __int8 *)(a2 + 17)|| *(unsigned __int8 *)(a1 + 18) != *(unsigned __int8 *)(a2 + 18))
  {
    return 0;
  }
  char v4 = *(unsigned char *)(a2 + 22);
  if (*(unsigned char *)(a1 + 22))
  {
    if (!*(unsigned char *)(a2 + 22)) {
      return 0;
    }
  }
  else
  {
    if (*(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20)) {
      char v4 = 1;
    }
    if (v4) {
      return 0;
    }
  }
  uint64_t v5 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24))
  {
    if (!v5) {
      return 0;
    }
    swift_bridgeObjectRetain();
    uint64_t v6 = swift_bridgeObjectRetain();
    char v7 = sub_1000965CC(v6, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v7 & 1) == 0) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v9 = *(void *)(a1 + 32);
  unint64_t v8 = *(void *)(a1 + 40);
  uint64_t v10 = *(unsigned __int16 *)(a1 + 48) | (*(unsigned __int8 *)(a1 + 50) << 16);
  uint64_t v12 = *(void *)(a2 + 32);
  unint64_t v11 = *(void *)(a2 + 40);
  uint64_t v13 = *(unsigned __int16 *)(a2 + 48) | (*(unsigned __int8 *)(a2 + 50) << 16);
  if (*(unsigned __int8 *)(a1 + 50) == 255)
  {
    if (*(unsigned __int8 *)(a2 + 50) == 255)
    {
LABEL_18:
      uint64_t v14 = *(void *)(a1 + 56);
      uint64_t v15 = *(void *)(a1 + 64);
      unint64_t v16 = *(void *)(a1 + 72);
      uint64_t v17 = *(void *)(a2 + 56);
      uint64_t v18 = *(void *)(a2 + 64);
      unint64_t v19 = *(void *)(a2 + 72);
      if (v14 == 4)
      {
        if (v17 == 4) {
          return 1;
        }
      }
      else if (v17 != 4)
      {
        if (v14 != v17) {
          return 0;
        }
        sub_10013316C(v14, v15, v16);
        sub_10013316C(v17, v18, v19);
        char v24 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v15, v16, v18, v19);
        sub_1001331AC(v17, v18, v19);
        sub_1001331AC(v14, v15, v16);
        return (v24 & 1) != 0;
      }
      sub_10013316C(v14, v15, v16);
      sub_10013316C(v17, v18, v19);
      sub_1001331AC(v14, v15, v16);
      sub_1001331AC(v17, v18, v19);
      return 0;
    }
    goto LABEL_22;
  }
  if (*(unsigned __int8 *)(a2 + 50) == 255)
  {
LABEL_22:
    sub_100214CD0(*(void *)(a2 + 32), *(void *)(a2 + 40), *(unsigned __int16 *)(a2 + 48) | (*(unsigned __int8 *)(a2 + 50) << 16));
    sub_100214CD0(v9, v8, v10);
    sub_100133188(v9, v8, v10);
    uint64_t v20 = v12;
    unint64_t v21 = v11;
    uint64_t v22 = v13;
LABEL_23:
    sub_100133188(v20, v21, v22);
    return 0;
  }
  if (((*(unsigned __int8 *)(a1 + 50) << 16) & 0x10000) == 0)
  {
    if ((v13 & 0x10000) == 0)
    {
      sub_100214CD0(*(void *)(a2 + 32), *(void *)(a2 + 40), *(unsigned __int16 *)(a2 + 48) | (*(unsigned __int8 *)(a2 + 50) << 16));
      sub_100214CD0(v9, v8, v10);
      BOOL v25 = _s7CoreP2P15AWDLActionFrameV12SyncTreePathV23__derived_struct_equalsySbAE_AEtFZ_0(v9, v12);
      sub_100133188(v12, v11, v13);
      sub_100133188(v9, v8, v10);
      BOOL result = 0;
      if (v25 && ((((v8 & 1) == 0) ^ v11) & 1) != 0) {
        goto LABEL_18;
      }
      return result;
    }
LABEL_33:
    sub_100214CD0(*(void *)(a2 + 32), *(void *)(a2 + 40), *(unsigned __int16 *)(a2 + 48) | (*(unsigned __int8 *)(a2 + 50) << 16));
    sub_100214CD0(v9, v8, v10);
    sub_1001331A0(v9, v8, v10, BYTE2(v10) & 1);
    sub_1001331A0(v12, v11, v13, BYTE2(v13) & 1);
    return 0;
  }
  if ((v13 & 0x10000) == 0) {
    goto LABEL_33;
  }
  sub_100214CD0(*(void *)(a2 + 32), *(void *)(a2 + 40), *(unsigned __int16 *)(a2 + 48) | (*(unsigned __int8 *)(a2 + 50) << 16));
  sub_100214CD0(v9, v8, v10);
  if ((_s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v9, v8, v12, v11) & 1) == 0)
  {
    sub_100133188(v12, v11, v13);
    uint64_t v20 = v9;
    unint64_t v21 = v8;
    uint64_t v22 = v10;
    goto LABEL_23;
  }
  sub_100133188(v12, v11, v13);
  sub_100133188(v9, v8, v10);
  BOOL result = 0;
  if (v10 == v13
    && ((((v10 & 0x100) == 0) ^ ((unsigned __int16)(v13 & 0x100) >> 8)) & 1) != 0)
  {
    goto LABEL_18;
  }
  return result;
}

BOOL sub_10020B9AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  LOBYTE(v15)  = BYTE4(a1);
  HIBYTE(v15)  = BYTE5(a1);
  LOBYTE(v12)  = BYTE4(a4);
  HIBYTE(v12)  = BYTE5(a4);
  BOOL v8 = a1 == a4 && v15 == v12 && a2 == a5;
  if (!v8 || (unsigned __int16)a3 != (unsigned __int16)a6) {
    return 0;
  }
  LOBYTE(v14)  = BYTE2(a3);
  BYTE1(v14)  = BYTE3(a3);
  BYTE2(v14)  = BYTE4(a3);
  HIBYTE(v14)  = BYTE5(a3);
  LOBYTE(v16)  = BYTE6(a3);
  HIBYTE(v16)  = HIBYTE(a3);
  LOBYTE(v11)  = BYTE2(a6);
  BYTE1(v11)  = BYTE3(a6);
  BYTE2(v11)  = BYTE4(a6);
  HIBYTE(v11)  = BYTE5(a6);
  LOBYTE(v13)  = BYTE6(a6);
  HIBYTE(v13)  = HIBYTE(a6);
  return v14 == v11 && v16 == v13;
}

uint64_t _s7CoreP2P12NANAttributeO26ServiceDescriptorExtensionV23__derived_struct_equalsySbAE_AEtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2 || *((unsigned __int16 *)a1 + 1) != *((unsigned __int16 *)a2 + 1)) {
    return 0;
  }
  char v4 = a2[8];
  if (a1[8])
  {
    if (!a2[8]) {
      return 0;
    }
  }
  else
  {
    if (*((_DWORD *)a1 + 1) != *((_DWORD *)a2 + 1)) {
      char v4 = 1;
    }
    if (v4) {
      return 0;
    }
  }
  char v5 = a2[10];
  if (a1[10])
  {
    if (!a2[10]) {
      return 0;
    }
  }
  else
  {
    if (a1[9] != a2[9]) {
      char v5 = 1;
    }
    if (v5) {
      return 0;
    }
  }
  uint64_t v7 = *((void *)a1 + 2);
  uint64_t v6 = *((void *)a1 + 3);
  unint64_t v8 = *((void *)a1 + 4);
  uint64_t v10 = *((void *)a2 + 2);
  uint64_t v9 = *((void *)a2 + 3);
  unint64_t v11 = *((void *)a2 + 4);
  if (v7 == 4)
  {
    if (v10 == 4)
    {
      sub_100217AF8((uint64_t)a2);
      return 1;
    }
    goto LABEL_19;
  }
  if (v10 == 4)
  {
LABEL_19:
    sub_100217AF8((uint64_t)a2);
    sub_100217AF8((uint64_t)a1);
    sub_1001331AC(v7, v6, v8);
    sub_1001331AC(v10, v9, v11);
    return 0;
  }
  if (v7 == v10)
  {
    sub_100217AF8((uint64_t)a2);
    sub_100217AF8((uint64_t)a1);
    char v13 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v8, v9, v11);
    sub_100217B28((uint64_t)a2);
    sub_100217B28((uint64_t)a1);
    if (v13) {
      return 1;
    }
  }
  return 0;
}

BOOL sub_10020BC4C(uint64_t a1, int a2, uint64_t a3, int a4)
{
  __int16 v4 = a1;
  int v5 = WORD1(a1);
  int v6 = BYTE4(a1);
  int v7 = BYTE5(a1);
  int v8 = BYTE6(a1);
  BOOL result = 0;
  if ((a3 & 0x100) != 0)
  {
    if ((v4 & 0x100) == 0) {
      return result;
    }
  }
  else if ((v4 & 0x100) != 0 || ((a3 ^ v4) & 0x7F) != 0)
  {
    return result;
  }
  if (v5 == WORD1(a3)
    && v6 == BYTE4(a3)
    && v7 == BYTE5(a3)
    && v8 == BYTE6(a3)
    && (unsigned __int16)a2 == (unsigned __int16)a4)
  {
    return BYTE2(a2) == BYTE2(a4);
  }
  return result;
}

uint64_t _s7CoreP2P12NANAttributeO8DatapathV23__derived_struct_equalsySbAE_AEtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2 || a1[1] != a2[1] || a1[2] != a2[2]) {
    return 0;
  }
  BOOL v3 = *(_DWORD *)(a1 + 3) == *(_DWORD *)(a2 + 3) && *(unsigned __int16 *)(a1 + 7) == *(unsigned __int16 *)(a2 + 7);
  if (!v3 || a1[9] != a2[9] || a1[10] != a2[10]) {
    return 0;
  }
  char v4 = a2[12];
  if (a1[12])
  {
    if (!a2[12]) {
      return 0;
    }
  }
  else
  {
    if (a1[11] != a2[11]) {
      char v4 = 1;
    }
    if (v4) {
      return 0;
    }
  }
  if (a1[19])
  {
    if (!a2[19]) {
      return 0;
    }
  }
  else
  {
    if (a2[19]) {
      return 0;
    }
    v5.i64[0]  = 0xFFFFFFFFFFFFLL;
    v5.i64[1]  = 0xFFFFFFFFFFFFLL;
    uint64x2_t v6 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(*(unsigned int *)(a1 + 13) | ((unint64_t)*(unsigned __int16 *)(a1 + 17) << 32)), v5);
    int16x8_t v7 = (int16x8_t)vshlq_u64(v6, (uint64x2_t)xmmword_1003B2EB0);
    uint64x2_t v8 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(*(unsigned int *)(a2 + 13) | ((unint64_t)*(unsigned __int16 *)(a2 + 17) << 32)), v5);
    int64x2_t v9 = (int64x2_t)vshlq_u64(v8, (uint64x2_t)xmmword_1003B2EB0);
    int16x8_t v10 = (int16x8_t)vshlq_u64(v8, (uint64x2_t)xmmword_1003B2EA0);
    v22[0]  = *(_DWORD *)(a1 + 13);
    *(int32x2_t *)v6.i8  = vmovn_s64((int64x2_t)vshlq_u64(v6, (uint64x2_t)xmmword_1003B2EA0));
    *(int32x2_t *)v7.i8  = vmovn_s64((int64x2_t)v7);
    v7.i16[1]  = v7.i16[2];
    v7.i16[2]  = v6.i16[0];
    v7.i16[3]  = v6.i16[2];
    *(_DWORD *)&v22[1]  = vmovn_s16(v7).u32[0];
    v21[0]  = *(_DWORD *)(a2 + 13);
    *(int32x2_t *)v6.i8  = vmovn_s64((int64x2_t)v10);
    *(int32x2_t *)v10.i8  = vmovn_s64(v9);
    v10.i16[1]  = v10.i16[2];
    v10.i16[2]  = v6.i16[0];
    v10.i16[3]  = v6.i16[2];
    *(_DWORD *)&v21[1]  = vmovn_s16(v10).u32[0];
    if (*(_DWORD *)v22 == *(_DWORD *)v21)
    {
      v21[5]  = HIBYTE(*(_WORD *)(a2 + 17));
      v22[5]  = HIBYTE(*(_WORD *)(a1 + 17));
      BOOL v11 = *(unsigned __int16 *)&v22[4] == *(unsigned __int16 *)&v21[4];
    }
    else
    {
      BOOL v11 = 0;
    }
    if (!v11) {
      return 0;
    }
  }
  uint64_t v13 = *((void *)a1 + 3);
  uint64_t v12 = *((void *)a1 + 4);
  unint64_t v14 = *((void *)a1 + 5);
  uint64_t v16 = *((void *)a2 + 3);
  uint64_t v15 = *((void *)a2 + 4);
  unint64_t v17 = *((void *)a2 + 5);
  if (v13 == 4)
  {
    if (v16 == 4)
    {
      sub_100218344((uint64_t)a2);
      return 1;
    }
    goto LABEL_30;
  }
  if (v16 == 4)
  {
LABEL_30:
    sub_100218344((uint64_t)a2);
    sub_100218344((uint64_t)a1);
    sub_1001331AC(v13, v12, v14);
    sub_1001331AC(v16, v15, v17);
    return 0;
  }
  if (v13 == v16)
  {
    sub_100218344((uint64_t)a2);
    sub_100218344((uint64_t)a1);
    char v20 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v12, v14, v15, v17);
    sub_100218374((uint64_t)a2);
    sub_100218374((uint64_t)a1);
    if (v20) {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_10020BF88(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  if (a1 != a5) {
    return 0;
  }
  if ((a1 & 0x10000000000) != 0)
  {
    if ((a5 & 0x10000000000) == 0) {
      return 0;
    }
  }
  else if ((a5 & 0x10000000000) != 0 || BYTE4(a1) != BYTE4(a5))
  {
    return 0;
  }
  if (a3)
  {
    if (a7) {
      return _s7CoreP2P12NANAttributeO18PublicAvailabilityV23__derived_struct_equalsySbAE_AEtFZ_0(a4, a8);
    }
  }
  else if ((a7 & 1) == 0 && a2 == a6)
  {
    return _s7CoreP2P12NANAttributeO18PublicAvailabilityV23__derived_struct_equalsySbAE_AEtFZ_0(a4, a8);
  }
  return 0;
}

uint64_t sub_10020BFDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 0;
  if ((unsigned __int16)a1 == (unsigned __int16)a5
    && HIDWORD(a1) == HIDWORD(a5)
    && a2 == a6
    && a3 == a7
    && BYTE1(a3) == BYTE1(a7))
  {
    char v9 = BYTE3(a7);
    if ((a3 & 0x1000000) != 0)
    {
      if (!BYTE3(a7)) {
        return 0;
      }
    }
    else
    {
      if (BYTE2(a3) != BYTE2(a7)) {
        char v9 = 1;
      }
      if (v9) {
        return 0;
      }
    }
    if (BYTE5(a4) == 255)
    {
      if (BYTE5(a8) != 255) {
        return 0;
      }
    }
    else if (BYTE5(a8) == 255 {
           || !sub_1001E17D0(__PAIR64__(a4, HIDWORD(a3)), BYTE4(a4) | (((HIDWORD(a4) >> 8) & 1) << 8), __PAIR64__(a8, HIDWORD(a7)), BYTE4(a8) | (((HIDWORD(a8) >> 8) & 1) << 8)))
    }
    {
      return 0;
    }
    return 1;
  }
  return v8;
}

uint64_t sub_10020C100(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  if (a1 == a4)
  {
    if (a2)
    {
      if (a5) {
        return _s7CoreP2P12NANAttributeO18PublicAvailabilityV23__derived_struct_equalsySbAE_AEtFZ_0(a3, a6);
      }
    }
    else if (HIDWORD(a1) == HIDWORD(a4) && (a5 & 1) == 0)
    {
      return _s7CoreP2P12NANAttributeO18PublicAvailabilityV23__derived_struct_equalsySbAE_AEtFZ_0(a3, a6);
    }
  }
  return 0;
}

uint64_t sub_10020C138(uint64_t a1, unint64_t a2, int a3, uint64_t a4, unint64_t a5, int a6)
{
  LOBYTE(v15)  = BYTE4(a1);
  HIBYTE(v15)  = BYTE5(a1);
  LOBYTE(v12)  = BYTE4(a4);
  HIBYTE(v12)  = BYTE5(a4);
  if (a1 != a4 || v15 != v12) {
    return 0;
  }
  LOBYTE(v14)  = BYTE6(a1);
  BYTE1(v14)  = HIBYTE(a1);
  HIWORD(v14)  = a2;
  LOBYTE(v16)  = BYTE2(a2);
  HIBYTE(v16)  = BYTE3(a2);
  LOBYTE(v11)  = BYTE6(a4);
  BYTE1(v11)  = HIBYTE(a4);
  HIWORD(v11)  = a5;
  LOBYTE(v13)  = BYTE2(a5);
  HIBYTE(v13)  = BYTE3(a5);
  BOOL v9 = v14 == v11 && v16 == v13;
  unsigned int v10 = v9 & (((a2 & (unint64_t)&_mh_execute_header) == 0) ^ HIDWORD(a5));
  if (BYTE5(a2) != BYTE5(a5)) {
    unsigned int v10 = 0;
  }
  if (BYTE6(a2) != BYTE6(a5)) {
    unsigned int v10 = 0;
  }
  if (HIBYTE(a2) != HIBYTE(a5)) {
    unsigned int v10 = 0;
  }
  if (a3 == a6) {
    return v10;
  }
  else {
    return 0;
  }
}

BOOL sub_10020C29C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  LOBYTE(v17)  = BYTE4(a1);
  HIBYTE(v17)  = BYTE5(a1);
  LOBYTE(v14)  = BYTE4(a4);
  HIBYTE(v14)  = BYTE5(a4);
  if (a1 != a4 || v17 != v14) {
    return 0;
  }
  LOBYTE(v16)  = BYTE6(a1);
  BYTE1(v16)  = HIBYTE(a1);
  HIWORD(v16)  = a2;
  LOBYTE(v18)  = BYTE2(a2);
  HIBYTE(v18)  = BYTE3(a2);
  LOBYTE(v13)  = BYTE6(a4);
  BYTE1(v13)  = HIBYTE(a4);
  HIWORD(v13)  = a5;
  LOBYTE(v15)  = BYTE2(a5);
  HIBYTE(v15)  = BYTE3(a5);
  return v16 == v13
      && v18 == v15
      && BYTE4(a2) == BYTE4(a5)
      && BYTE5(a2) == BYTE5(a5)
      && BYTE6(a2) == BYTE6(a5)
      && a3 == a6;
}

uint64_t sub_10020C3D4(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  LOBYTE(v11)  = BYTE4(a1);
  HIBYTE(v11)  = BYTE5(a1);
  LOBYTE(v10)  = BYTE4(a5);
  HIBYTE(v10)  = BYTE5(a5);
  BOOL v8 = a1 == a5 && v11 == v10;
  if (!v8
    || BYTE6(a1) != BYTE6(a5)
    || HIBYTE(a1) != HIBYTE(a5)
    || a2 != a6
    || WORD1(a2) != WORD1(a6)
    || WORD2(a2) != WORD2(a6))
  {
    return 0;
  }

  return _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a3, a4, a7, a8);
}

BOOL _s7CoreP2P12NANAttributeO17DatapathExtensionV23__derived_struct_equalsySbAE_AEtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2 || a1[1] != a2[1] || a1[2] != a2[2]) {
    return 0;
  }
  BOOL v4 = *(_DWORD *)(a1 + 3) == *(_DWORD *)(a2 + 3) && *(unsigned __int16 *)(a1 + 7) == *(unsigned __int16 *)(a2 + 7);
  if (!v4 || a1[9] != a2[9] || a1[10] != a2[10]) {
    return 0;
  }
  char v5 = a2[12];
  if (a1[12])
  {
    if (!a2[12]) {
      return 0;
    }
  }
  else
  {
    if (a1[11] != a2[11]) {
      char v5 = 1;
    }
    if (v5) {
      return 0;
    }
  }
  if (a1[19])
  {
    if (!a2[19]) {
      return 0;
    }
  }
  else
  {
    if (a2[19]) {
      return 0;
    }
    v6.i64[0]  = 0xFFFFFFFFFFFFLL;
    v6.i64[1]  = 0xFFFFFFFFFFFFLL;
    uint64x2_t v7 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(*(unsigned int *)(a1 + 13) | ((unint64_t)*(unsigned __int16 *)(a1 + 17) << 32)), v6);
    int16x8_t v8 = (int16x8_t)vshlq_u64(v7, (uint64x2_t)xmmword_1003B2EB0);
    uint64x2_t v9 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(*(unsigned int *)(a2 + 13) | ((unint64_t)*(unsigned __int16 *)(a2 + 17) << 32)), v6);
    int64x2_t v10 = (int64x2_t)vshlq_u64(v9, (uint64x2_t)xmmword_1003B2EB0);
    int16x8_t v11 = (int16x8_t)vshlq_u64(v9, (uint64x2_t)xmmword_1003B2EA0);
    v27[0]  = *(_DWORD *)(a1 + 13);
    *(int32x2_t *)v7.i8  = vmovn_s64((int64x2_t)vshlq_u64(v7, (uint64x2_t)xmmword_1003B2EA0));
    *(int32x2_t *)v8.i8  = vmovn_s64((int64x2_t)v8);
    v8.i16[1]  = v8.i16[2];
    v8.i16[2]  = v7.i16[0];
    v8.i16[3]  = v7.i16[2];
    *(_DWORD *)&v27[1]  = vmovn_s16(v8).u32[0];
    v26[0]  = *(_DWORD *)(a2 + 13);
    *(int32x2_t *)v7.i8  = vmovn_s64((int64x2_t)v11);
    *(int32x2_t *)v11.i8  = vmovn_s64(v10);
    v11.i16[1]  = v11.i16[2];
    v11.i16[2]  = v7.i16[0];
    v11.i16[3]  = v7.i16[2];
    *(_DWORD *)&v26[1]  = vmovn_s16(v11).u32[0];
    if (*(_DWORD *)v27 == *(_DWORD *)v26)
    {
      v26[5]  = HIBYTE(*(_WORD *)(a2 + 17));
      v27[5]  = HIBYTE(*(_WORD *)(a1 + 17));
      BOOL v12 = *(unsigned __int16 *)&v27[4] == *(unsigned __int16 *)&v26[4];
    }
    else
    {
      BOOL v12 = 0;
    }
    if (!v12) {
      return 0;
    }
  }
  uint64_t v13 = *((void *)a1 + 3);
  unint64_t v14 = *((void *)a1 + 4);
  uint64_t v15 = *((void *)a2 + 3);
  unint64_t v16 = *((void *)a2 + 4);
  if (v14 >> 60 != 15)
  {
    if (v16 >> 60 != 15)
    {
      sub_100038004(*((void *)a1 + 3), *((void *)a1 + 4));
      sub_100038004(v15, v16);
      char v17 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v13, v14, v15, v16);
      sub_10000C95C(v15, v16);
      sub_10000C95C(v13, v14);
      if ((v17 & 1) == 0) {
        return 0;
      }
      goto LABEL_32;
    }
LABEL_30:
    sub_100038004(*((void *)a1 + 3), *((void *)a1 + 4));
    sub_100038004(v15, v16);
    sub_10000C95C(v13, v14);
    sub_10000C95C(v15, v16);
    return 0;
  }
  if (v16 >> 60 != 15) {
    goto LABEL_30;
  }
LABEL_32:
  uint64_t v18 = *((void *)a1 + 5);
  uint64_t v19 = *((void *)a1 + 6);
  unint64_t v20 = *((void *)a1 + 7);
  uint64_t v21 = *((void *)a2 + 5);
  uint64_t v22 = *((void *)a2 + 6);
  unint64_t v23 = *((void *)a2 + 7);
  if (v18 == 4)
  {
    if (v21 == 4) {
      return 1;
    }
  }
  else if (v21 != 4)
  {
    if (v18 != v21) {
      return 0;
    }
    sub_10013316C(v18, v19, v20);
    sub_10013316C(v21, v22, v23);
    char v24 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v19, v20, v22, v23);
    sub_1001331AC(v21, v22, v23);
    sub_1001331AC(v18, v19, v20);
    return (v24 & 1) != 0;
  }
  sub_10013316C(v18, v19, v20);
  sub_10013316C(v21, v22, v23);
  sub_1001331AC(v18, v19, v20);
  sub_1001331AC(v21, v22, v23);
  return 0;
}

BOOL _s7CoreP2P12NANAttributeO20PairingBootstrappingV23__derived_struct_equalsySbAE_AEtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2 || a1[1] != a2[1] || a1[2] != a2[2]) {
    return 0;
  }
  uint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = *((void *)a1 + 2);
  uint64_t v6 = *((void *)a1 + 3);
  unint64_t v7 = *((void *)a1 + 4);
  uint64_t v9 = *((void *)a2 + 1);
  uint64_t v8 = *((void *)a2 + 2);
  uint64_t v10 = *((void *)a2 + 3);
  unint64_t v11 = *((void *)a2 + 4);
  if (v7 >> 60 == 15)
  {
    if (v11 >> 60 == 15)
    {
      sub_10021A344((uint64_t)a2);
      return *((unsigned __int16 *)a1 + 20) == *((unsigned __int16 *)a2 + 20);
    }
    goto LABEL_9;
  }
  if (v11 >> 60 == 15)
  {
LABEL_9:
    sub_10021A344((uint64_t)a2);
    sub_10021A344((uint64_t)a1);
    sub_10014CC74(v4, v5, v6, v7);
    sub_10014CC74(v9, v8, v10, v11);
    return 0;
  }
  if (v5)
  {
    if ((v8 & 1) == 0) {
      return 0;
    }
LABEL_17:
    sub_10021A344((uint64_t)a2);
    sub_10021A344((uint64_t)a1);
    char v13 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v7, v10, v11);
    sub_10021A378((uint64_t)a2);
    sub_10021A378((uint64_t)a1);
    if (v13) {
      return *((unsigned __int16 *)a1 + 20) == *((unsigned __int16 *)a2 + 20);
    }
    return 0;
  }
  BOOL result = 0;
  if ((v8 & 1) == 0 && v4 == v9) {
    goto LABEL_17;
  }
  return result;
}

BOOL sub_10020C9E4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if (a1 != a3) {
    return 0;
  }
  BOOL result = 0;
  unint64_t v6 = HIBYTE(a1);
  LOBYTE(v11)  = BYTE1(a1);
  BYTE1(v11)  = BYTE2(a1);
  BYTE2(v11)  = BYTE3(a1);
  HIBYTE(v11)  = BYTE4(a1);
  LOBYTE(v12)  = BYTE5(a1);
  HIBYTE(v12)  = BYTE6(a1);
  LOBYTE(v9)  = BYTE1(a3);
  BYTE1(v9)  = BYTE2(a3);
  BYTE2(v9)  = BYTE3(a3);
  HIBYTE(v9)  = BYTE4(a3);
  LOBYTE(v10)  = BYTE5(a3);
  HIBYTE(v10)  = BYTE6(a3);
  BOOL v8 = v11 != v9 || v12 != v10;
  if (v6 == HIBYTE(a3) && !v8 && a2 == a4 && BYTE1(a2) == BYTE1(a4)) {
    return (a2 >> 16) == (a4 >> 16);
  }
  return result;
}

BOOL sub_10020CB08(uint64_t a1, int a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6, uint64_t a7, unint64_t a8)
{
  if (a1 != a5) {
    return 0;
  }
  LOBYTE(v12)  = BYTE1(a1);
  BYTE1(v12)  = BYTE2(a1);
  BYTE2(v12)  = BYTE3(a1);
  HIBYTE(v12)  = BYTE4(a1);
  LOBYTE(v13)  = BYTE5(a1);
  HIBYTE(v13)  = BYTE6(a1);
  LOBYTE(v10)  = BYTE1(a5);
  BYTE1(v10)  = BYTE2(a5);
  BYTE2(v10)  = BYTE3(a5);
  HIBYTE(v10)  = BYTE4(a5);
  LOBYTE(v11)  = BYTE5(a5);
  HIBYTE(v11)  = BYTE6(a5);
  BOOL v8 = v12 == v10 && v13 == v11;
  return v8
      && (unsigned __int16)a2 == (unsigned __int16)a6
      && ((a2 ^ a6) & 0x10000) == 0
      && (_s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a3, a4, a7, a8) & 1) != 0;
}

uint64_t sub_10020CC14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  LOBYTE(v7)  = BYTE4(a1);
  HIBYTE(v7)  = BYTE5(a1);
  LOBYTE(v6)  = BYTE4(a3);
  HIBYTE(v6)  = BYTE5(a3);
  BOOL v4 = a1 == a3 && v7 == v6;
  if (!v4 || BYTE6(a1) != BYTE6(a3)) {
    return 0;
  }

  return _s7CoreP2P12NANAttributeO18PublicAvailabilityV23__derived_struct_equalsySbAE_AEtFZ_0(a2, a4);
}

uint64_t sub_10020CCF4(unsigned int a1, uint64_t a2, unint64_t a3, unsigned int a4, uint64_t a5, unint64_t a6)
{
  char v6 = a4;
  char v9 = a1;
  unsigned int v10 = a1 >> 8;
  unsigned int v11 = HIWORD(a1);
  unsigned int v12 = a4 >> 8;
  unsigned int v13 = HIWORD(a4);
  sub_100010BCC(&qword_10047BEF8);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16)  = xmmword_1003B2760;
  *(unsigned char *)(v14 + 32)  = v9;
  *(unsigned char *)(v14 + 33)  = v10;
  *(unsigned char *)(v14 + 34)  = v11;
  uint64_t v15 = sub_1001265EC(v14);
  unint64_t v17 = v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16)  = xmmword_1003B2760;
  *(unsigned char *)(v18 + 32)  = v6;
  *(unsigned char *)(v18 + 33)  = v12;
  *(unsigned char *)(v18 + 34)  = v13;
  uint64_t v19 = sub_1001265EC(v18);
  unint64_t v21 = v20;
  swift_bridgeObjectRelease();
  char v22 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v15, v17, v19, v21);
  sub_10000C970(v19, v21);
  sub_10000C970(v15, v17);
  if ((v22 & 1) == 0) {
    return 0;
  }

  return _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a2, a3, a5, a6);
}

uint64_t _s7CoreP2P12NANAttributeO18WLANInfrastructureV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2 || *(unsigned __int16 *)(a1 + 4) != *(unsigned __int16 *)(a2 + 4))
  {
LABEL_5:
    char v3 = 0;
    return v3 & 1;
  }
  char v3 = 0;
  BOOL v6 = *(_DWORD *)(a1 + 6) == *(_DWORD *)(a2 + 6) && *(unsigned __int16 *)(a1 + 10) == *(unsigned __int16 *)(a2 + 10);
  if (v6
    && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16)
    && *(unsigned __int8 *)(a1 + 17) == *(unsigned __int8 *)(a2 + 17))
  {
    if (((*(unsigned __int8 *)(a1 + 18) ^ *(unsigned __int8 *)(a2 + 18)) & 1) == 0
      && (_s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a2 + 24), *(void *)(a2 + 32)) & 1) != 0)
    {
      char v3 = *(unsigned char *)(a1 + 40) ^ *(unsigned char *)(a2 + 40) ^ 1;
      return v3 & 1;
    }
    goto LABEL_5;
  }
  return v3 & 1;
}

BOOL sub_10020CF60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a3) {
    return 0;
  }
  LOBYTE(v11)  = BYTE4(a1);
  BYTE1(v11)  = BYTE5(a1);
  BYTE2(v11)  = BYTE6(a1);
  HIBYTE(v11)  = HIBYTE(a1);
  LOBYTE(v10)  = BYTE4(a3);
  BYTE1(v10)  = BYTE5(a3);
  BYTE2(v10)  = BYTE6(a3);
  HIBYTE(v10)  = HIBYTE(a3);
  return v11 == v10
      && (unsigned __int16)a2 == (unsigned __int16)a4
      && BYTE2(a2) == BYTE2(a4)
      && BYTE3(a2) == BYTE3(a4)
      && BYTE4(a2) == BYTE4(a4)
      && BYTE5(a2) == BYTE5(a4);
}

BOOL _s7CoreP2P12NANAttributeO4IBSSV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = *(_DWORD *)a1 == *(_DWORD *)a2 && *(unsigned __int16 *)(a1 + 4) == *(unsigned __int16 *)(a2 + 4);
  BOOL result = 0;
  if (v2)
  {
    BOOL v3 = *(_DWORD *)(a1 + 6) == *(_DWORD *)(a2 + 6) && *(unsigned __int16 *)(a1 + 10) == *(unsigned __int16 *)(a2 + 10);
    if (v3
      && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16)
      && *(unsigned __int8 *)(a1 + 17) == *(unsigned __int8 *)(a2 + 17)
      && ((*(unsigned __int8 *)(a1 + 18) ^ *(unsigned __int8 *)(a2 + 18)) & 1) == 0
      && (_s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a2 + 24), *(void *)(a2 + 32)) & 1) != 0)
    {
      return 1;
    }
  }
  return result;
}

uint64_t _s7CoreP2P12NANAttributeO4MeshV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = *(_DWORD *)a1 == *(_DWORD *)a2 && *(unsigned __int16 *)(a1 + 4) == *(unsigned __int16 *)(a2 + 4);
  if (!v2
    || *(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8)
    || *(unsigned __int8 *)(a1 + 9) != *(unsigned __int8 *)(a2 + 9)
    || ((*(unsigned __int8 *)(a1 + 10) ^ *(unsigned __int8 *)(a2 + 10)) & 1) != 0
    || (_s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a2 + 16), *(void *)(a2 + 24)) & 1) == 0)
  {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  unint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);

  return _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v7, v8, v9);
}

BOOL sub_10020D248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((unsigned __int16)a1 != (unsigned __int16)a3) {
    return 0;
  }
  LOBYTE(v10)  = BYTE2(a1);
  BYTE1(v10)  = BYTE3(a1);
  BYTE2(v10)  = BYTE4(a1);
  HIBYTE(v10)  = BYTE5(a1);
  LOBYTE(v11)  = BYTE6(a1);
  HIBYTE(v11)  = HIBYTE(a1);
  LOBYTE(v8)  = BYTE2(a3);
  BYTE1(v8)  = BYTE3(a3);
  BYTE2(v8)  = BYTE4(a3);
  HIBYTE(v8)  = BYTE5(a3);
  LOBYTE(v9)  = BYTE6(a3);
  HIBYTE(v9)  = HIBYTE(a3);
  return v10 == v8 && v11 == v9 && a2 == a4 && HIDWORD(a2) == HIDWORD(a4);
}

uint64_t type metadata accessor for NANAttribute(uint64_t a1)
{
  return sub_10000A7D0(a1, qword_100483028);
}

unint64_t sub_10020D358()
{
  unint64_t result = qword_100482570;
  if (!qword_100482570)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482570);
  }
  return result;
}

uint64_t _s7CoreP2P12NANAttributeO23CustomDeviceInformationV23__derived_struct_equalsySbAE_AEtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2 || a1[1] != a2[1] || *((_DWORD *)a1 + 1) != *((_DWORD *)a2 + 1)) {
    return 0;
  }
  uint64_t v4 = *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation(0) + 28);

  return _s7CoreP2P12NANAttributeO23CustomDeviceInformationV0D10AttributesV23__derived_struct_equalsySbAG_AGtFZ_0(&a1[v4], &a2[v4]);
}

uint64_t _s7CoreP2P12NANAttributeO21__derived_enum_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  v419  = (char *)a1;
  *(void *)&v420  = a2;
  v379  = type metadata accessor for NANAttribute.CustomDeviceInformation(0);
  __chkstk_darwin();
  v380  = (unsigned __int8 *)&v378 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v418  = type metadata accessor for NANAttribute(0);
  __chkstk_darwin();
  v416  = (char *)&v378 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v415  = (uint64_t)&v378 - v5;
  __chkstk_darwin();
  v417  = (unsigned __int8 *)&v378 - v6;
  __chkstk_darwin();
  v414  = (long long *)((char *)&v378 - v7);
  __chkstk_darwin();
  v413  = (uint64_t *)((char *)&v378 - v8);
  __chkstk_darwin();
  v412  = (uint64_t *)((char *)&v378 - v9);
  __chkstk_darwin();
  v411  = (long long *)((char *)&v378 - v10);
  __chkstk_darwin();
  v410  = (uint64_t *)((char *)&v378 - v11);
  __chkstk_darwin();
  v408  = (uint64_t *)((char *)&v378 - v12);
  __chkstk_darwin();
  v409  = (uint64_t)&v378 - v13;
  __chkstk_darwin();
  v407  = (unsigned __int8 *)&v378 - v14;
  __chkstk_darwin();
  v404  = (uint64_t *)((char *)&v378 - v15);
  __chkstk_darwin();
  v406  = (unsigned __int8 *)&v378 - v16;
  __chkstk_darwin();
  v405  = (uint64_t)&v378 - v17;
  __chkstk_darwin();
  v403  = (uint64_t)&v378 - v18;
  __chkstk_darwin();
  v401  = (unsigned __int8 *)&v378 - v19;
  __chkstk_darwin();
  v402  = (uint64_t)&v378 - v20;
  __chkstk_darwin();
  v400  = (uint64_t)&v378 - v21;
  __chkstk_darwin();
  v397  = (uint64_t *)((char *)&v378 - v22);
  __chkstk_darwin();
  v399  = (uint64_t)&v378 - v23;
  __chkstk_darwin();
  v396  = (unsigned __int8 *)&v378 - v24;
  __chkstk_darwin();
  v398  = (unsigned __int8 *)&v378 - v25;
  __chkstk_darwin();
  v394  = (unsigned __int8 *)&v378 - v26;
  __chkstk_darwin();
  v395  = (unsigned __int8 *)&v378 - v27;
  __chkstk_darwin();
  v393  = (uint64_t)&v378 - v28;
  __chkstk_darwin();
  v392  = (unsigned __int8 *)&v378 - v29;
  __chkstk_darwin();
  v390  = (long long *)((char *)&v378 - v30);
  __chkstk_darwin();
  v391  = (unsigned __int8 *)&v378 - v31;
  __chkstk_darwin();
  v388  = (uint64_t)&v378 - v32;
  __chkstk_darwin();
  v389  = (unsigned int *)((char *)&v378 - v33);
  __chkstk_darwin();
  v387  = (uint64_t)&v378 - v34;
  __chkstk_darwin();
  v386  = (unsigned __int8 *)&v378 - v35;
  __chkstk_darwin();
  v384  = (unsigned __int8 *)&v378 - v36;
  __chkstk_darwin();
  v383  = (unsigned __int8 *)&v378 - v37;
  __chkstk_darwin();
  v385  = (uint64_t)&v378 - v38;
  __chkstk_darwin();
  v382  = (uint64_t)&v378 - v39;
  __chkstk_darwin();
  int v41 = (unsigned __int8 *)&v378 - v40;
  __chkstk_darwin();
  v381  = (uint64_t)&v378 - v42;
  __chkstk_darwin();
  Swift::UInt8 v44 = (unsigned __int16 *)((char *)&v378 - v43);
  __chkstk_darwin();
  Swift::UInt8 v46 = (long long *)((char *)&v378 - v45);
  __chkstk_darwin();
  int v48 = (uint64_t *)((char *)&v378 - v47);
  __chkstk_darwin();
  Swift::UInt8 v50 = (unsigned __int8 *)&v378 - v49;
  __chkstk_darwin();
  Swift::UInt8 v52 = (unsigned __int8 *)&v378 - v51;
  sub_100010BCC(&qword_100483568);
  uint64_t v53 = __chkstk_darwin();
  Swift::UInt8 v55 = (char *)&v378 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = (uint64_t)&v55[*(int *)(v53 + 56)];
  sub_10021A510((uint64_t)v419, (uint64_t)v55, type metadata accessor for NANAttribute);
  uint64_t v57 = v420;
  *(void *)&v420  = v56;
  sub_10021A510(v57, v56, type metadata accessor for NANAttribute);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_10021A510((uint64_t)v55, (uint64_t)v50, type metadata accessor for NANAttribute);
      v2.i32[0]  = *(_DWORD *)(v50 + 2);
      unsigned __int8 v59 = v50[6];
      unsigned __int8 v60 = v50[7];
      int v61 = v50[8];
      int v62 = *((_DWORD *)v50 + 3);
      unint64_t v63 = (unsigned __int8 *)v420;
      if (swift_getEnumCaseMultiPayload() != 1) {
        goto LABEL_201;
      }
      if (*v50 == *v63 && v50[1] == v63[1])
      {
        int v64 = *((_DWORD *)v63 + 3);
        int v65 = v63[8];
        int v66 = *((unsigned __int16 *)v63 + 3);
        LODWORD(v425)  = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
        BYTE4(v425)  = v59;
        BYTE5(v425)  = v60;
        BOOL v67 = v425 == *(_DWORD *)(v63 + 2) && WORD2(v425) == v66;
        if (v67 && v61 == v65 && v62 == v64) {
          goto LABEL_153;
        }
      }
      goto LABEL_209;
    case 2u:
      sub_10021A510((uint64_t)v55, (uint64_t)v48, type metadata accessor for NANAttribute);
      uint64_t v68 = *v48;
      uint64_t v69 = (uint64_t *)v420;
      if (swift_getEnumCaseMultiPayload() != 2) {
        goto LABEL_167;
      }
      goto LABEL_159;
    case 3u:
      sub_10021A510((uint64_t)v55, (uint64_t)v46, type metadata accessor for NANAttribute);
      long long v70 = v46[3];
      v422[1]  = v46[2];
      v423  = v70;
      v424  = v46[4];
      long long v71 = v46[1];
      v421  = *v46;
      v422[0]  = v71;
      uint64_t v72 = (long long *)v420;
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        long long v73 = v72[3];
        *(_OWORD *)&v426[16]  = v72[2];
        v427  = v73;
        v428  = v72[4];
        long long v74 = v72[1];
        v425  = *v72;
        *(_OWORD *)v426  = v74;
        char v75 = _s7CoreP2P12NANAttributeO17ServiceDescriptorV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)&v421, (uint64_t)&v425);
        sub_10013F060((uint64_t)&v425);
        sub_10013F060((uint64_t)&v421);
        goto LABEL_162;
      }
      sub_10013F060((uint64_t)&v421);
      goto LABEL_201;
    case 4u:
      sub_10021A510((uint64_t)v55, (uint64_t)v44, type metadata accessor for NANAttribute);
      uint64_t v76 = (unsigned __int16 *)v420;
      if (swift_getEnumCaseMultiPayload() != 4) {
        goto LABEL_201;
      }
      BOOL v77 = *v44 == *v76;
      goto LABEL_94;
    case 5u:
      uint64_t v78 = v55;
      uint64_t v79 = v381;
      sub_10021A510((uint64_t)v55, v381, type metadata accessor for NANAttribute);
      v2.i32[0]  = *(_DWORD *)(v79 + 6);
      char v80 = *(unsigned char *)(v79 + 10);
      char v81 = *(unsigned char *)(v79 + 11);
      int v82 = *(unsigned __int8 *)(v79 + 16);
      LODWORD(v419)  = *(unsigned __int8 *)(v79 + 17);
      LODWORD(v417)  = *(unsigned __int8 *)(v79 + 18);
      uint64_t v84 = *(void *)(v79 + 24);
      unint64_t v83 = *(void *)(v79 + 32);
      LODWORD(v416)  = *(unsigned __int8 *)(v79 + 40);
      uint64_t v85 = v420;
      if (swift_getEnumCaseMultiPayload() != 5)
      {
        sub_10000C970(v84, v83);
        Swift::UInt8 v55 = v78;
LABEL_201:
        sub_1000380B4((uint64_t)v55, &qword_100483568);
LABEL_211:
        char v75 = 0;
        return v75 & 1;
      }
      int v87 = *(unsigned __int16 *)(v79 + 4);
      int v88 = *(unsigned __int16 *)(v85 + 4);
      v86.i32[0]  = *(_DWORD *)(v85 + 6);
      char v89 = *(unsigned char *)(v85 + 10);
      char v90 = *(unsigned char *)(v85 + 11);
      int v91 = *(unsigned __int8 *)(v85 + 16);
      int v92 = *(unsigned __int8 *)(v85 + 17);
      int v93 = *(unsigned __int8 *)(v85 + 18);
      int v94 = (_DWORD *)v79;
      uint64_t v95 = *(void *)(v85 + 24);
      unint64_t v96 = *(void *)(v85 + 32);
      int v97 = *(unsigned __int8 *)(v85 + 40);
      LODWORD(v425)  = *v94;
      WORD2(v425)  = v87;
      BOOL v98 = v425 == *(_DWORD *)v85 && v87 == v88;
      if (!v98
        || (LODWORD(v425)  = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0],
            BYTE4(v425)  = v80,
            BYTE5(v425)  = v81,
            BYTE4(v421)  = v89,
            BYTE5(v421)  = v90,
            v425 ^ vmovn_s16((int16x8_t)vmovl_u8(v86)).u32[0] | WORD2(v425) ^ WORD2(v421))
        || v82 != v91
        || v419 != v92
        || ((v417 ^ v93) & 1) != 0)
      {
        sub_10000C970(v95, v96);
        sub_10000C970(v84, v83);
LABEL_27:
        uint64_t v99 = (uint64_t)v78;
        goto LABEL_210;
      }
      v375  = v95;
      v376  = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v84, v83, v95, v96);
      sub_10000C970(v375, v96);
      sub_10000C970(v84, v83);
      if (v376 & 1) == 0 || ((v416 ^ v97)) {
        goto LABEL_27;
      }
      uint64_t v99 = (uint64_t)v78;
LABEL_154:
      sub_10021A4B0(v99, type metadata accessor for NANAttribute);
      char v75 = 1;
      return v75 & 1;
    case 6u:
      v419  = v55;
      sub_10021A510((uint64_t)v55, (uint64_t)v41, type metadata accessor for NANAttribute);
      v2.i32[0]  = *(_DWORD *)(v41 + 1);
      unsigned __int8 v100 = v41[5];
      unsigned __int8 v101 = v41[6];
      int v102 = v41[8];
      int v103 = v41[9];
      int v104 = v41[10];
      uint64_t v106 = *((void *)v41 + 2);
      unint64_t v105 = *((void *)v41 + 3);
      Swift::UInt16 v107 = (unsigned __int8 *)v420;
      if (swift_getEnumCaseMultiPayload() != 6)
      {
        sub_10000C970(v106, v105);
        Swift::UInt8 v55 = v419;
        goto LABEL_201;
      }
      int v108 = *v41;
      v110  = *((void *)v107 + 2);
      v109  = *((void *)v107 + 3);
      if (v108 != *v107
        || (v111  = v107[10],
            v112  = v107[9],
            v113  = v107[8],
            v114  = *(unsigned __int16 *)(v107 + 5),
            LODWORD(v425)  = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0],
            BYTE4(v425)  = v100,
            BYTE5(v425)  = v101,
            v425 ^ *(_DWORD *)(v107 + 1) | WORD2(v425) ^ v114)
        || v102 != v113
        || v103 != v112
        || ((v104 ^ v111) & 1) != 0)
      {
        sub_10000C970(v110, v109);
        v372  = v106;
        v373  = v105;
        goto LABEL_218;
      }
      v115  = v109;
      v116  = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v106, v105, v110, v109);
      sub_10000C970(v110, v115);
      sub_10000C970(v106, v105);
      if (v116) {
        goto LABEL_171;
      }
      goto LABEL_219;
    case 7u:
      v117  = v55;
      v118  = v382;
      sub_10021A510((uint64_t)v55, v382, type metadata accessor for NANAttribute);
      v2.i32[0]  = *(_DWORD *)(v118 + 6);
      v119  = *(unsigned char *)(v118 + 10);
      v120  = *(unsigned char *)(v118 + 11);
      v121  = *(unsigned __int8 *)(v118 + 16);
      LODWORD(v419)  = *(unsigned __int8 *)(v118 + 17);
      LODWORD(v417)  = *(unsigned __int8 *)(v118 + 18);
      v123  = *(void *)(v118 + 24);
      v122  = *(void *)(v118 + 32);
      v124  = v420;
      if (swift_getEnumCaseMultiPayload() == 7)
      {
        v126  = *(unsigned __int16 *)(v118 + 4);
        v127  = *(unsigned __int16 *)(v124 + 4);
        v125.i32[0]  = *(_DWORD *)(v124 + 6);
        v128  = *(unsigned char *)(v124 + 10);
        v129  = *(unsigned char *)(v124 + 11);
        v130  = *(unsigned __int8 *)(v124 + 16);
        v131  = *(unsigned __int8 *)(v124 + 17);
        v132  = *(unsigned __int8 *)(v124 + 18);
        v133  = (_DWORD *)v118;
        v134  = *(void *)(v124 + 24);
        v135  = *(void *)(v124 + 32);
        LODWORD(v425)  = *v133;
        WORD2(v425)  = v126;
        v136  = v425 == *(_DWORD *)v124 && v126 == v127;
        if (v136
          && (LODWORD(v425)  = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0],
              BYTE4(v425)  = v119,
              BYTE5(v425)  = v120,
              BYTE4(v421)  = v128,
              BYTE5(v421)  = v129,
              !(v425 ^ vmovn_s16((int16x8_t)vmovl_u8(v125)).u32[0] | WORD2(v425) ^ WORD2(v421)))
          && v121 == v130
          && v419 == v131
          && ((v417 ^ v132) & 1) == 0)
        {
          v377  = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v123, v122, v134, v135);
          sub_10000C970(v134, v135);
          sub_10000C970(v123, v122);
          if (v377)
          {
            uint64_t v99 = (uint64_t)v117;
            goto LABEL_154;
          }
        }
        else
        {
          sub_10000C970(v134, v135);
          sub_10000C970(v123, v122);
        }
        uint64_t v99 = (uint64_t)v117;
        goto LABEL_210;
      }
      sub_10000C970(v123, v122);
      Swift::UInt8 v55 = v117;
      goto LABEL_201;
    case 8u:
      v137  = v385;
      sub_10021A510((uint64_t)v55, v385, type metadata accessor for NANAttribute);
      v139  = *(void *)(v137 + 16);
      v138  = *(void *)(v137 + 24);
      v141  = *(void *)(v137 + 32);
      v140  = *(void *)(v137 + 40);
      v142  = v420;
      if (swift_getEnumCaseMultiPayload() != 8)
      {
        sub_10000C970(v139, v138);
LABEL_192:
        v370  = v141;
        goto LABEL_199;
      }
      v143  = *(unsigned __int8 *)(v137 + 10);
      v144  = *(unsigned __int8 *)(v137 + 9);
      v145  = *(unsigned __int8 *)(v137 + 8);
      v146  = *(unsigned __int16 *)(v137 + 4);
      v147  = *(unsigned __int16 *)(v142 + 4);
      v148  = *(unsigned __int8 *)(v142 + 8);
      v149  = *(unsigned __int8 *)(v142 + 9);
      v150  = *(unsigned __int8 *)(v142 + 10);
      v151  = *(void *)(v142 + 16);
      v152  = *(void *)(v142 + 24);
      v153  = v142;
      v154  = *(void *)(v142 + 32);
      v155  = (_DWORD *)v137;
      v156  = *(void *)(v153 + 40);
      LODWORD(v425)  = *v155;
      WORD2(v425)  = v146;
      if (v425 ^ *(_DWORD *)v153 | v146 ^ v147
        || v145 != v148
        || v144 != v149
        || ((v143 ^ v150) & 1) != 0
        || (_s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v139, v138, v151, v152) & 1) == 0)
      {
        sub_10000C970(v151, v152);
        sub_10000C970(v154, v156);
LABEL_207:
        sub_10000C970(v139, v138);
        v180  = v141;
        goto LABEL_208;
      }
      LODWORD(v420)  = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v141, v140, v154, v156);
      sub_10000C970(v151, v152);
      sub_10000C970(v154, v156);
      sub_10000C970(v139, v138);
      sub_10000C970(v141, v140);
      if (v420) {
        goto LABEL_153;
      }
      goto LABEL_209;
    case 9u:
      v157  = v383;
      sub_10021A510((uint64_t)v55, (uint64_t)v383, type metadata accessor for NANAttribute);
      v158  = v157[1];
      v159  = v157[2];
      v160  = *((void *)v157 + 1);
      v140  = *((void *)v157 + 2);
      v161  = (unsigned __int8 *)v420;
      if (swift_getEnumCaseMultiPayload() != 9) {
        goto LABEL_198;
      }
      v162  = *v157;
      v163  = *((void *)v161 + 1);
      v164  = *((void *)v161 + 2);
      if (v162 != *v161 || v158 != v161[1] || ((v159 ^ v161[2]) & 1) != 0) {
        goto LABEL_66;
      }
      goto LABEL_144;
    case 0xAu:
      v165  = v384;
      sub_10021A510((uint64_t)v55, (uint64_t)v384, type metadata accessor for NANAttribute);
      v166  = *((void *)v165 + 1);
      v167  = (unsigned __int8 *)v420;
      if (swift_getEnumCaseMultiPayload() != 10) {
        goto LABEL_167;
      }
      v168  = *v167;
      v169  = *((void *)v167 + 1);
      if (*v165 != v168) {
        goto LABEL_155;
      }
      v170  = sub_100096F8C(v166, v169);
      goto LABEL_152;
    case 0xBu:
      Swift::UInt8 v52 = v386;
      sub_10021A510((uint64_t)v55, (uint64_t)v386, type metadata accessor for NANAttribute);
      int v58 = (unsigned __int8 *)v420;
      if (swift_getEnumCaseMultiPayload() == 11) {
        goto LABEL_60;
      }
      goto LABEL_201;
    case 0xCu:
      v175  = v387;
      sub_10021A510((uint64_t)v55, v387, type metadata accessor for NANAttribute);
      v160  = *(void *)(v175 + 8);
      v140  = *(void *)(v175 + 16);
      v176  = v420;
      if (swift_getEnumCaseMultiPayload() != 12) {
        goto LABEL_198;
      }
      v177  = *(unsigned __int16 *)(v175 + 4);
      v178  = *(unsigned __int16 *)(v176 + 4);
      v163  = *(void *)(v176 + 8);
      v164  = *(void *)(v176 + 16);
      LODWORD(v425)  = *(_DWORD *)v175;
      WORD2(v425)  = v177;
      if (v425 != *(_DWORD *)v176 || v177 != v178) {
        goto LABEL_66;
      }
      goto LABEL_144;
    case 0xDu:
      v181  = v389;
      sub_10021A510((uint64_t)v55, (uint64_t)v389, type metadata accessor for NANAttribute);
      v182  = (unsigned int *)v420;
      if (swift_getEnumCaseMultiPayload() != 13) {
        goto LABEL_201;
      }
      char v75 = sub_10020B9AC(((unint64_t)*((unsigned __int8 *)v181 + 5) << 40) | ((unint64_t)*((unsigned __int8 *)v181 + 4) << 32) | *v181, *((void *)v181 + 1), *((void *)v181 + 2), *v182 | ((unint64_t)*((unsigned __int8 *)v182 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v182 + 5) << 40), *((void *)v182 + 1), *((void *)v182 + 2));
      goto LABEL_162;
    case 0xEu:
      v183  = v388;
      sub_10021A510((uint64_t)v55, v388, type metadata accessor for NANAttribute);
      v184  = *(_OWORD *)(v183 + 16);
      v421  = *(_OWORD *)v183;
      v422[0]  = v184;
      *(void *)&v422[1]  = *(void *)(v183 + 32);
      v185  = (long long *)v420;
      if (swift_getEnumCaseMultiPayload() == 14)
      {
        v186  = v185[1];
        v425  = *v185;
        *(_OWORD *)v426  = v186;
        *(void *)&v426[16]  = *((void *)v185 + 4);
        char v75 = _s7CoreP2P12NANAttributeO26ServiceDescriptorExtensionV23__derived_struct_equalsySbAE_AEtFZ_0((unsigned __int8 *)&v421, (unsigned __int8 *)&v425);
        sub_100217B28((uint64_t)&v425);
        sub_100217B28((uint64_t)&v421);
        goto LABEL_162;
      }
      sub_100217B28((uint64_t)&v421);
      goto LABEL_201;
    case 0xFu:
      v187  = v391;
      sub_10021A510((uint64_t)v55, (uint64_t)v391, type metadata accessor for NANAttribute);
      v188  = (unsigned __int8 *)v420;
      if (swift_getEnumCaseMultiPayload() != 15) {
        goto LABEL_201;
      }
      v189  = *v188;
      v190  = *((unsigned __int16 *)v188 + 1);
      v191  = *((unsigned __int16 *)v187 + 4) | (v187[10] << 16);
      v192  = v188[4];
      v193  = v188[5];
      v194  = v188[6];
      v195  = *((unsigned __int16 *)v188 + 4);
      v196  = v188[10];
      v197  = ((unint64_t)v187[6] << 48) | ((unint64_t)v187[5] << 40) | ((unint64_t)v187[4] << 32) | ((unint64_t)*((unsigned __int16 *)v187 + 1) << 16) | *v187 | ((unint64_t)v187[1] << 8);
      LOBYTE(v425)  = v188[1];
      char v75 = sub_10020BC4C(v197, v191, v189 | (v190 << 16) | (v192 << 32) | (v193 << 40) | (v194 << 48) | ((unint64_t)v425 << 8), v195 | (v196 << 16));
      goto LABEL_162;
    case 0x10u:
      v198  = v390;
      sub_10021A510((uint64_t)v55, (uint64_t)v390, type metadata accessor for NANAttribute);
      v199  = v198[1];
      v421  = *v198;
      v422[0]  = v199;
      v422[1]  = v198[2];
      v200  = (long long *)v420;
      if (swift_getEnumCaseMultiPayload() == 16)
      {
        v201  = v200[1];
        v425  = *v200;
        *(_OWORD *)v426  = v201;
        *(_OWORD *)&v426[16]  = v200[2];
        char v75 = _s7CoreP2P12NANAttributeO8DatapathV23__derived_struct_equalsySbAE_AEtFZ_0((unsigned __int8 *)&v421, (unsigned __int8 *)&v425);
        sub_100218374((uint64_t)&v425);
        sub_100218374((uint64_t)&v421);
        goto LABEL_162;
      }
      sub_100218374((uint64_t)&v421);
      goto LABEL_201;
    case 0x11u:
      v202  = v392;
      sub_10021A510((uint64_t)v55, (uint64_t)v392, type metadata accessor for NANAttribute);
      v203  = *((unsigned __int16 *)v202 + 1);
      v204  = *((void *)v202 + 1);
      v205  = (unsigned __int8 *)v420;
      if (swift_getEnumCaseMultiPayload() != 17) {
        goto LABEL_167;
      }
      if (*v202 != *v205 || v203 != *((unsigned __int16 *)v205 + 1)) {
        goto LABEL_155;
      }
      v170  = sub_100097980(v204, *((void *)v205 + 1));
      goto LABEL_152;
    case 0x12u:
      v206  = v393;
      sub_10021A510((uint64_t)v55, v393, type metadata accessor for NANAttribute);
      v207  = *(void *)(v206 + 8);
      v208  = v420;
      if (swift_getEnumCaseMultiPayload() != 18) {
        goto LABEL_167;
      }
      v209  = *(unsigned __int8 *)(v206 + 6);
      v210  = *(unsigned __int16 *)(v206 + 4);
      v211  = *(unsigned __int16 *)(v208 + 4);
      v212  = *(unsigned __int8 *)(v208 + 6);
      v213  = *(void *)(v208 + 8);
      LODWORD(v425)  = *(_DWORD *)v206;
      WORD2(v425)  = v210;
      v214  = v425 == *(_DWORD *)v208 && v210 == v211;
      if (!v214 || v209 != v212) {
        goto LABEL_155;
      }
      goto LABEL_151;
    case 0x13u:
      v215  = v395;
      sub_10021A510((uint64_t)v55, (uint64_t)v395, type metadata accessor for NANAttribute);
      v216  = *((void *)v215 + 3);
      v217  = (unsigned int *)v420;
      if (swift_getEnumCaseMultiPayload() != 19) {
        goto LABEL_167;
      }
      v218  = v215[16];
      v219  = *((void *)v215 + 1);
      v220  = v215[5];
      v221  = v215[4];
      v222  = v215[3];
      v223  = v215[2];
      v224  = v215[1];
      v225  = *v215;
      v226  = *((unsigned __int8 *)v217 + 4);
      v227  = *((void *)v217 + 1);
      v228  = *((unsigned char *)v217 + 16);
      v229  = *((void *)v217 + 3);
      v230  = *v217;
      LOBYTE(v425)  = *((unsigned char *)v217 + 5);
      LOBYTE(v421)  = v228;
      v231  = sub_10020BF88((v221 << 32) | (v222 << 24) | (v223 << 16) | (v224 << 8) | v225 | ((unint64_t)v220 << 40), v219, v218, v216, v230 | (v226 << 32) | ((unint64_t)v425 << 40), v227, v228, v229);
      goto LABEL_160;
    case 0x14u:
      v232  = v394;
      sub_10021A510((uint64_t)v55, (uint64_t)v394, type metadata accessor for NANAttribute);
      v233  = (unsigned __int8 *)v420;
      if (swift_getEnumCaseMultiPayload() != 20) {
        goto LABEL_201;
      }
      v171  = *((unsigned __int16 *)v232 + 1);
      v172  = *v232;
      v173  = *v233;
      v174  = *((unsigned __int16 *)v233 + 1);
      goto LABEL_91;
    case 0x15u:
      v234  = v398;
      sub_10021A510((uint64_t)v55, (uint64_t)v398, type metadata accessor for NANAttribute);
      v235  = (unsigned __int16 *)v420;
      if (swift_getEnumCaseMultiPayload() != 21) {
        goto LABEL_201;
      }
      v236  = *((_WORD *)v234 + 14);
      v237  = *(void *)(v234 + 20);
      v238  = v234[19];
      v239  = v234[18];
      v240  = *((void *)v234 + 1);
      v241  = *((void *)v235 + 1);
      v242  = v235[8];
      v243  = *((unsigned char *)v235 + 18);
      v244  = *((unsigned char *)v235 + 19);
      v245  = *(void *)(v235 + 10);
      v246  = v235[14];
      v247  = *v235;
      v248  = *((unsigned int *)v235 + 1);
      v249  = *v234 | ((unint64_t)*((unsigned int *)v234 + 1) << 32) | ((unint64_t)v234[1] << 8);
      LOWORD(v425)  = *((_WORD *)v234 + 8);
      BYTE2(v425)  = v239;
      BYTE3(v425)  = v238;
      *(void *)((char *)&v425 + 4)  = v237;
      WORD6(v425)  = v236;
      v250  = v425;
      LOWORD(v425)  = v242;
      BYTE2(v425)  = v243;
      BYTE3(v425)  = v244;
      *(void *)((char *)&v425 + 4)  = v245;
      WORD6(v425)  = v246;
      char v75 = sub_10020BFDC(v249, v240, v250, *((uint64_t *)&v250 + 1), v247 | (v248 << 32), v241, v425, *((uint64_t *)&v425 + 1));
      goto LABEL_162;
    case 0x16u:
      v251  = v396;
      sub_10021A510((uint64_t)v55, (uint64_t)v396, type metadata accessor for NANAttribute);
      v252  = *((unsigned __int16 *)v251 + 1);
      v253  = v251[4];
      v254  = (unsigned __int8 *)v420;
      if (swift_getEnumCaseMultiPayload() != 22) {
        goto LABEL_201;
      }
      if (*v251 != *v254) {
        goto LABEL_209;
      }
      v255  = v254[4];
      if (v253)
      {
        if (v254[4]) {
          goto LABEL_153;
        }
      }
      else
      {
        if (v252 != *((unsigned __int16 *)v254 + 1)) {
          v255  = 1;
        }
        if ((v255 & 1) == 0) {
          goto LABEL_153;
        }
      }
      goto LABEL_209;
    case 0x17u:
      v256  = v399;
      sub_10021A510((uint64_t)v55, v399, type metadata accessor for NANAttribute);
      v257  = *(void *)(v256 + 16);
      v258  = v420;
      if (swift_getEnumCaseMultiPayload() != 23) {
        goto LABEL_167;
      }
      v231  = sub_10020C100(*(void *)v256, *(unsigned char *)(v256 + 8), v257, *(void *)v258, *(unsigned char *)(v258 + 8), *(void *)(v258 + 16));
      goto LABEL_160;
    case 0x18u:
      v259  = v397;
      sub_10021A510((uint64_t)v55, (uint64_t)v397, type metadata accessor for NANAttribute);
      v260  = *v259;
      v261  = (uint64_t *)v420;
      if (swift_getEnumCaseMultiPayload() != 24) {
        goto LABEL_167;
      }
      v231  = _s7CoreP2P12NANAttributeO32FineTimingMeasurementRangeReportV23__derived_struct_equalsySbAE_AEtFZ_0(v260, *v261, v262, v263);
      goto LABEL_160;
    case 0x19u:
      v264  = v400;
      sub_10021A510((uint64_t)v55, v400, type metadata accessor for NANAttribute);
      v160  = *(void *)(v264 + 8);
      v140  = *(void *)(v264 + 16);
      v265  = v420;
      if (swift_getEnumCaseMultiPayload() != 25) {
        goto LABEL_198;
      }
      v266  = *(unsigned char *)(v264 + 1);
      v163  = *(void *)(v265 + 8);
      v164  = *(void *)(v265 + 16);
      if (*(unsigned char *)(v265 + 1) == 1)
      {
        if (*(unsigned char *)(v264 + 1)) {
          goto LABEL_144;
        }
      }
      else
      {
        if (((*(unsigned char *)v265 ^ *(unsigned char *)v264) & 0x7F) != 0) {
          v266  = 1;
        }
        if ((v266 & 1) == 0)
        {
LABEL_144:
          v310  = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v160, v140, v163, v164);
          sub_10000C970(v163, v164);
          sub_10000C970(v160, v140);
          if (v310) {
            goto LABEL_153;
          }
LABEL_209:
          uint64_t v99 = (uint64_t)v55;
LABEL_210:
          sub_10021A4B0(v99, type metadata accessor for NANAttribute);
          goto LABEL_211;
        }
      }
LABEL_66:
      sub_10000C970(v163, v164);
      v180  = v160;
LABEL_208:
      sub_10000C970(v180, v140);
      goto LABEL_209;
    case 0x1Au:
      v267  = v402;
      sub_10021A510((uint64_t)v55, v402, type metadata accessor for NANAttribute);
      v268  = v420;
      if (swift_getEnumCaseMultiPayload() != 26) {
        goto LABEL_201;
      }
      if (*(unsigned char *)(v267 + 12)) {
        v269  = &_mh_execute_header;
      }
      else {
        v269  = 0;
      }
      if (*(unsigned char *)(v268 + 12)) {
        v270  = &_mh_execute_header;
      }
      else {
        v270  = 0;
      }
      char v75 = sub_10020C138(*(void *)v267, (unint64_t)v269 | *(unsigned int *)(v267 + 8) | ((unint64_t)*(unsigned __int8 *)(v267 + 13) << 40) | ((unint64_t)*(unsigned __int8 *)(v267 + 14) << 48) | ((unint64_t)*(unsigned __int8 *)(v267 + 15) << 56), *(_DWORD *)(v267 + 16), *(void *)v268, (unint64_t)v270 | *(unsigned int *)(v268 + 8) | ((unint64_t)*(unsigned __int8 *)(v268 + 13) << 40) | ((unint64_t)*(unsigned __int8 *)(v268 + 14) << 48) | ((unint64_t)*(unsigned __int8 *)(v268 + 15) << 56), *(_DWORD *)(v268 + 16));
      goto LABEL_162;
    case 0x1Bu:
      v271  = v401;
      sub_10021A510((uint64_t)v55, (uint64_t)v401, type metadata accessor for NANAttribute);
      v2.i32[0]  = *(_DWORD *)(v271 + 1);
      v272  = v271[5];
      v273  = v271[6];
      v274  = v271[7];
      v275  = v271[8];
      v276  = v271[9];
      v277  = *((unsigned __int16 *)v271 + 5);
      LODWORD(v419)  = *((unsigned __int16 *)v271 + 6);
      v278  = (unsigned __int8 *)v420;
      if (swift_getEnumCaseMultiPayload() != 27) {
        goto LABEL_201;
      }
      if (*v271 != *v278) {
        goto LABEL_209;
      }
      v279  = *((unsigned __int16 *)v278 + 6);
      v280  = *((unsigned __int16 *)v278 + 5);
      v281  = v278[9];
      v282  = v278[8];
      v283  = v278[7];
      v284  = *(unsigned __int16 *)(v278 + 5);
      LODWORD(v425)  = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
      BYTE4(v425)  = v272;
      BYTE5(v425)  = v273;
      v285  = v425 == *(_DWORD *)(v278 + 1) && WORD2(v425) == v284;
      if (!v285 || v274 != v283 || v275 != v282 || v276 != v281 || v277 != v280 || v419 != v279) {
        goto LABEL_209;
      }
      goto LABEL_153;
    case 0x1Cu:
      v286  = v403;
      sub_10021A510((uint64_t)v55, v403, type metadata accessor for NANAttribute);
      v287  = v420;
      if (swift_getEnumCaseMultiPayload() != 28) {
        goto LABEL_201;
      }
      char v75 = sub_10020C29C(*(void *)v286, ((unint64_t)*(unsigned __int8 *)(v286 + 14) << 48) | ((unint64_t)*(unsigned __int8 *)(v286 + 13) << 40) | ((unint64_t)*(unsigned __int8 *)(v286 + 12) << 32) | *(unsigned int *)(v286 + 8), *(_DWORD *)(v286 + 16), *(void *)v287, *(unsigned int *)(v287 + 8) | ((unint64_t)*(unsigned __int8 *)(v287 + 12) << 32) | ((unint64_t)*(unsigned __int8 *)(v287 + 13) << 40) | ((unint64_t)*(unsigned __int8 *)(v287 + 14) << 48), *(_DWORD *)(v287 + 16));
      goto LABEL_162;
    case 0x1Du:
      v288  = v405;
      sub_10021A510((uint64_t)v55, v405, type metadata accessor for NANAttribute);
      v289  = *(void *)(v288 + 16);
      v290  = *(void *)(v288 + 24);
      v291  = v420;
      if (swift_getEnumCaseMultiPayload() == 29)
      {
        v292  = *(unsigned __int16 *)(v288 + 12);
        v293  = *(unsigned __int16 *)(v288 + 10);
        v294  = *(unsigned __int8 *)(v288 + 8);
        v295  = *(void *)v288;
        v296  = *(void *)(v291 + 16);
        v297  = *(void *)(v291 + 24);
        char v75 = sub_10020C3D4(v295, v294 | (v292 << 32) | (v293 << 16), v289, v290, *(void *)v291, *(unsigned __int8 *)(v291 + 8) | ((unint64_t)*(unsigned __int16 *)(v291 + 10) << 16) | ((unint64_t)*(unsigned __int16 *)(v291 + 12) << 32), v296, v297);
        sub_10000C970(v296, v297);
        sub_10000C970(v289, v290);
        goto LABEL_162;
      }
      v370  = v289;
      v371  = v290;
      goto LABEL_200;
    case 0x1Eu:
      v298  = v406;
      sub_10021A510((uint64_t)v55, (uint64_t)v406, type metadata accessor for NANAttribute);
      v299  = *((void *)v298 + 1);
      v300  = (unsigned __int8 *)v420;
      if (swift_getEnumCaseMultiPayload() != 30) {
        goto LABEL_167;
      }
      v301  = *v300;
      v302  = *((void *)v300 + 1);
      if (*v298 != v301) {
        goto LABEL_155;
      }
      v170  = sub_10009884C(v299, v302);
      goto LABEL_152;
    case 0x1Fu:
      v303  = v404;
      sub_10021A510((uint64_t)v55, (uint64_t)v404, type metadata accessor for NANAttribute);
      v304  = *v303;
      v305  = (uint64_t *)v420;
      if (swift_getEnumCaseMultiPayload() != 31) {
        goto LABEL_167;
      }
      v231  = _s7CoreP2P12NANAttributeO26SecurityContextInformationV23__derived_struct_equalsySbAE_AEtFZ_0(v304, *v305);
      goto LABEL_160;
    case 0x20u:
      v306  = v407;
      sub_10021A510((uint64_t)v55, (uint64_t)v407, type metadata accessor for NANAttribute);
      v160  = *((void *)v306 + 1);
      v140  = *((void *)v306 + 2);
      v307  = (unsigned __int8 *)v420;
      if (swift_getEnumCaseMultiPayload() != 32) {
        goto LABEL_198;
      }
      v308  = *v306;
      v309  = *v307;
      v163  = *((void *)v307 + 1);
      v164  = *((void *)v307 + 2);
      if (v308 == v309) {
        goto LABEL_144;
      }
      goto LABEL_66;
    case 0x21u:
      v311  = v409;
      sub_10021A510((uint64_t)v55, v409, type metadata accessor for NANAttribute);
      v312  = *(void *)(v311 + 8);
      v313  = *(unsigned __int16 *)(v311 + 16);
      v314  = *(unsigned __int8 *)(v311 + 18);
      v207  = *(void *)(v311 + 24);
      v315  = v420;
      if (swift_getEnumCaseMultiPayload() != 33) {
        goto LABEL_167;
      }
      v316  = *(void *)v311;
      v213  = *(void *)(v315 + 24);
      if (v316 != *(void *)v315
        || v312 != *(void *)(v315 + 8)
        || v313 != *(unsigned __int16 *)(v315 + 16)
        || v314 != *(unsigned __int8 *)(v315 + 18))
      {
LABEL_155:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_209;
      }
LABEL_151:
      v170  = _s7CoreP2P12NANAttributeO18PublicAvailabilityV23__derived_struct_equalsySbAE_AEtFZ_0(v207, v213);
LABEL_152:
      v317  = v170;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v317) {
        goto LABEL_153;
      }
      goto LABEL_209;
    case 0x22u:
      v318  = v408;
      sub_10021A510((uint64_t)v55, (uint64_t)v408, type metadata accessor for NANAttribute);
      v319  = *v318;
      v320  = (uint64_t *)v420;
      if (swift_getEnumCaseMultiPayload() != 34) {
        goto LABEL_167;
      }
      v231  = _s7CoreP2P12NANAttributeO18PublicAvailabilityV23__derived_struct_equalsySbAE_AEtFZ_0(v319, *v320);
      goto LABEL_160;
    case 0x23u:
      v321  = v410;
      sub_10021A510((uint64_t)v55, (uint64_t)v410, type metadata accessor for NANAttribute);
      uint64_t v68 = *v321;
      uint64_t v69 = (uint64_t *)v420;
      if (swift_getEnumCaseMultiPayload() != 35) {
        goto LABEL_167;
      }
LABEL_159:
      v231  = _s7CoreP2P12NANAttributeO13ServiceIDListV23__derived_struct_equalsySbAE_AEtFZ_0(v68, *v69);
LABEL_160:
      char v75 = v231;
      swift_bridgeObjectRelease();
      goto LABEL_161;
    case 0x24u:
      v322  = v411;
      sub_10021A510((uint64_t)v55, (uint64_t)v411, type metadata accessor for NANAttribute);
      v323  = v322[1];
      v421  = *v322;
      v422[0]  = v323;
      v324  = v322[3];
      v422[1]  = v322[2];
      v423  = v324;
      v325  = (long long *)v420;
      if (swift_getEnumCaseMultiPayload() == 36)
      {
        v326  = v325[1];
        v425  = *v325;
        *(_OWORD *)v426  = v326;
        v327  = v325[3];
        *(_OWORD *)&v426[16]  = v325[2];
        v427  = v327;
        char v75 = _s7CoreP2P12NANAttributeO17DatapathExtensionV23__derived_struct_equalsySbAE_AEtFZ_0((unsigned __int8 *)&v421, (unsigned __int8 *)&v425);
        sub_10021AA9C(&v425, (void (*)(void, void))sub_10022FEA0, (void (*)(uint64_t, uint64_t, uint64_t))sub_1001331AC);
        sub_10021AA9C(&v421, (void (*)(void, void))sub_10022FEA0, (void (*)(uint64_t, uint64_t, uint64_t))sub_1001331AC);
        goto LABEL_162;
      }
      sub_10021AA9C(&v421, (void (*)(void, void))sub_10022FEA0, (void (*)(uint64_t, uint64_t, uint64_t))sub_1001331AC);
      goto LABEL_201;
    case 0x25u:
      v328  = v412;
      sub_10021A510((uint64_t)v55, (uint64_t)v412, type metadata accessor for NANAttribute);
      v329  = *v328;
      v330  = (void *)v420;
      if (swift_getEnumCaseMultiPayload() != 37)
      {
LABEL_167:
        swift_bridgeObjectRelease();
        goto LABEL_201;
      }
      char v75 = sub_1000956AC(v329, *v330);
      swift_bridgeObjectRelease();
LABEL_161:
      swift_bridgeObjectRelease();
      goto LABEL_162;
    case 0x26u:
      v331  = v413;
      sub_10021A510((uint64_t)v55, (uint64_t)v413, type metadata accessor for NANAttribute);
      v333  = *v331;
      v332  = v331[1];
      v160  = v331[2];
      v140  = v331[3];
      v334  = (uint64_t *)v420;
      if (swift_getEnumCaseMultiPayload() != 38)
      {
        sub_10000C970(v333, v332);
LABEL_198:
        v370  = v160;
LABEL_199:
        v371  = v140;
LABEL_200:
        sub_10000C970(v370, v371);
        goto LABEL_201;
      }
      v419  = v55;
      v335  = *v334;
      v336  = v334[1];
      v337  = v334;
      v338  = v334[2];
      v339  = v337[3];
      if (_s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v333, v332, v335, v336))
      {
        v340  = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v160, v140, v338, v339);
        sub_10000C970(v335, v336);
        sub_10000C970(v338, v339);
        sub_10000C970(v333, v332);
        sub_10000C970(v160, v140);
        if (v340)
        {
LABEL_171:
          uint64_t v99 = (uint64_t)v419;
          goto LABEL_154;
        }
      }
      else
      {
        sub_10000C970(v335, v336);
        sub_10000C970(v338, v339);
        sub_10000C970(v333, v332);
        v372  = v160;
        v373  = v140;
LABEL_218:
        sub_10000C970(v372, v373);
      }
LABEL_219:
      uint64_t v99 = (uint64_t)v419;
      goto LABEL_210;
    case 0x27u:
      v341  = v414;
      sub_10021A510((uint64_t)v55, (uint64_t)v414, type metadata accessor for NANAttribute);
      v342  = v341[1];
      v421  = *v341;
      v422[0]  = v342;
      *(_OWORD *)((char *)v422 + 10)  = *(long long *)((char *)v341 + 26);
      v343  = (long long *)v420;
      if (swift_getEnumCaseMultiPayload() != 39)
      {
        sub_10021A378((uint64_t)&v421);
        goto LABEL_201;
      }
      v344  = v343[1];
      v425  = *v343;
      *(_OWORD *)v426  = v344;
      *(_OWORD *)&v426[10]  = *(long long *)((char *)v343 + 26);
      char v75 = _s7CoreP2P12NANAttributeO20PairingBootstrappingV23__derived_struct_equalsySbAE_AEtFZ_0((unsigned __int8 *)&v421, (unsigned __int8 *)&v425);
      sub_10021A378((uint64_t)&v425);
      sub_10021A378((uint64_t)&v421);
LABEL_162:
      sub_10021A4B0((uint64_t)v55, type metadata accessor for NANAttribute);
      return v75 & 1;
    case 0x28u:
      v345  = v417;
      sub_10021A510((uint64_t)v55, (uint64_t)v417, type metadata accessor for NANAttribute);
      v346  = v420;
      if (swift_getEnumCaseMultiPayload() != 40)
      {
        sub_10021A4B0((uint64_t)v345, type metadata accessor for NANAttribute.CustomDeviceInformation);
        goto LABEL_201;
      }
      v347  = v380;
      sub_10021A578(v346, (uint64_t)v380, type metadata accessor for NANAttribute.CustomDeviceInformation);
      if (*v345 != *v347
        || v345[1] != v347[1]
        || *((_DWORD *)v345 + 1) != *((_DWORD *)v347 + 1)
        || (_s7CoreP2P12NANAttributeO23CustomDeviceInformationV0D10AttributesV23__derived_struct_equalsySbAG_AGtFZ_0(&v345[*(int *)(v379 + 28)], &v347[*(int *)(v379 + 28)]) & 1) == 0)
      {
        sub_10021A4B0((uint64_t)v347, type metadata accessor for NANAttribute.CustomDeviceInformation);
        sub_10021A4B0((uint64_t)v345, type metadata accessor for NANAttribute.CustomDeviceInformation);
        goto LABEL_209;
      }
      sub_10021A4B0((uint64_t)v347, type metadata accessor for NANAttribute.CustomDeviceInformation);
      sub_10021A4B0((uint64_t)v345, type metadata accessor for NANAttribute.CustomDeviceInformation);
LABEL_153:
      uint64_t v99 = (uint64_t)v55;
      goto LABEL_154;
    case 0x29u:
      v348  = v415;
      sub_10021A510((uint64_t)v55, v415, type metadata accessor for NANAttribute);
      v160  = *(void *)(v348 + 8);
      v140  = *(void *)(v348 + 16);
      v349  = (__int16 *)v420;
      if (swift_getEnumCaseMultiPayload() != 41) {
        goto LABEL_198;
      }
      v419  = v55;
      v350  = *(unsigned char *)(v348 + 2);
      v351  = v349;
      v352  = *(_WORD *)v348;
      v353  = *v349;
      v354  = *((unsigned char *)v349 + 2);
      v355  = *((void *)v351 + 2);
      v418  = *((void *)v351 + 1);
      sub_100010BCC(&qword_10047BEF8);
      v356  = swift_allocObject();
      v420  = xmmword_1003B2760;
      *(_OWORD *)(v356 + 16)  = xmmword_1003B2760;
      *(_WORD *)(v356 + 32)  = v352;
      *(unsigned char *)(v356 + 34)  = v350;
      v357  = sub_1001265EC(v356);
      v359  = v358;
      swift_bridgeObjectRelease();
      v360  = swift_allocObject();
      *(_OWORD *)(v360 + 16)  = v420;
      *(_WORD *)(v360 + 32)  = v353;
      *(unsigned char *)(v360 + 34)  = v354;
      v361  = sub_1001265EC(v360);
      v363  = v362;
      swift_bridgeObjectRelease();
      v364  = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v357, v359, v361, v363);
      sub_10000C970(v361, v363);
      sub_10000C970(v357, v359);
      if ((v364 & 1) == 0)
      {
        sub_10000C970(v418, v355);
        sub_10000C970(v160, v140);
        uint64_t v99 = (uint64_t)v419;
        goto LABEL_210;
      }
      v365  = v418;
      v366  = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v160, v140, v418, v355);
      sub_10000C970(v365, v355);
      sub_10000C970(v160, v140);
      uint64_t v99 = (uint64_t)v419;
      if ((v366 & 1) == 0) {
        goto LABEL_210;
      }
      goto LABEL_154;
    case 0x2Au:
      v367  = v416;
      sub_10021A510((uint64_t)v55, (uint64_t)v416, type metadata accessor for NANAttribute);
      v141  = *((void *)v367 + 1);
      v140  = *((void *)v367 + 2);
      v368  = (char *)v420;
      if (swift_getEnumCaseMultiPayload() != 42) {
        goto LABEL_192;
      }
      v369  = *v367;
      v139  = *((void *)v368 + 1);
      v138  = *((void *)v368 + 2);
      if (byte_1003D2CB2[v369] != byte_1003D2CB2[*v368]) {
        goto LABEL_207;
      }
      char v75 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v141, v140, *((void *)v368 + 1), *((void *)v368 + 2));
      sub_10000C970(v139, v138);
      sub_10000C970(v141, v140);
      goto LABEL_162;
    default:
      sub_10021A510((uint64_t)v55, (uint64_t)v52, type metadata accessor for NANAttribute);
      int v58 = (unsigned __int8 *)v420;
      if (swift_getEnumCaseMultiPayload()) {
        goto LABEL_201;
      }
LABEL_60:
      v171  = v52[1];
      v172  = *v52;
      v173  = *v58;
      v174  = v58[1];
LABEL_91:
      BOOL v77 = v172 == v173 && v171 == v174;
LABEL_94:
      char v75 = v77;
      goto LABEL_162;
  }
}

uint64_t _s7CoreP2P12NANAttributeO23CustomDeviceInformationV0D10AttributesV23__derived_struct_equalsySbAG_AGtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v98 = type metadata accessor for NANInternetSharingStatistics.Requester();
  uint64_t v103 = *(void *)(v98 - 8);
  __chkstk_darwin();
  uint64_t v95 = &v88[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v97 = sub_100010BCC(&qword_100483570);
  __chkstk_darwin();
  uint64_t v99 = &v88[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100010BCC((uint64_t *)&unk_100485B60);
  __chkstk_darwin();
  unint64_t v96 = &v88[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  v109  = &v88[-v7];
  __chkstk_darwin();
  unsigned __int8 v101 = &v88[-v8];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v107 = *(void *)(v9 - 8);
  __chkstk_darwin();
  unsigned __int8 v100 = &v88[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v104 = sub_100010BCC((uint64_t *)&unk_100486400);
  __chkstk_darwin();
  int v108 = &v88[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100010BCC(&qword_1004862B0);
  __chkstk_darwin();
  int v102 = &v88[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  unint64_t v105 = &v88[-v13];
  __chkstk_darwin();
  uint64_t v106 = &v88[-v14];
  uint64_t v15 = type metadata accessor for P256.KeyAgreement.PublicKey();
  v110  = *(void *)(v15 - 8);
  __chkstk_darwin();
  uint64_t v17 = &v88[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = sub_100010BCC(&qword_100483578);
  __chkstk_darwin();
  uint64_t v20 = &v88[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100010BCC((uint64_t *)&unk_1004852B0);
  __chkstk_darwin();
  uint64_t v22 = &v88[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  uint64_t v24 = &v88[-v23];
  __chkstk_darwin();
  uint64_t v26 = &v88[-v25];
  if (*a1 != *a2) {
    return 0;
  }
  char v27 = a2[2];
  if (a1[2])
  {
    if (!a2[2]) {
      return 0;
    }
  }
  else
  {
    if (a1[1] != a2[1]) {
      char v27 = 1;
    }
    if (v27) {
      return 0;
    }
  }
  uint64_t v91 = v9;
  uint64_t v28 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  uint64_t v29 = *(int *)(v28 + 24);
  int v92 = a1;
  sub_1000136F4((uint64_t)&a1[v29], (uint64_t)v26, (uint64_t *)&unk_1004852B0);
  int v93 = a2;
  int v94 = (int *)v28;
  sub_1000136F4((uint64_t)&a2[*(int *)(v28 + 24)], (uint64_t)v24, (uint64_t *)&unk_1004852B0);
  uint64_t v30 = (uint64_t)&v20[*(int *)(v18 + 48)];
  sub_1000136F4((uint64_t)v26, (uint64_t)v20, (uint64_t *)&unk_1004852B0);
  sub_1000136F4((uint64_t)v24, v30, (uint64_t *)&unk_1004852B0);
  uint64_t v31 = v110;
  uint64_t v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v110 + 48);
  if (v32((uint64_t)v20, 1, v15) == 1)
  {
    sub_1000380B4((uint64_t)v24, (uint64_t *)&unk_1004852B0);
    sub_1000380B4((uint64_t)v26, (uint64_t *)&unk_1004852B0);
    if (v32(v30, 1, v15) == 1)
    {
      sub_1000380B4((uint64_t)v20, (uint64_t *)&unk_1004852B0);
      goto LABEL_15;
    }
LABEL_13:
    sub_1000380B4((uint64_t)v20, &qword_100483578);
    return 0;
  }
  sub_1000136F4((uint64_t)v20, (uint64_t)v22, (uint64_t *)&unk_1004852B0);
  if (v32(v30, 1, v15) == 1)
  {
    sub_1000380B4((uint64_t)v24, (uint64_t *)&unk_1004852B0);
    sub_1000380B4((uint64_t)v26, (uint64_t *)&unk_1004852B0);
    (*(void (**)(unsigned char *, uint64_t))(v31 + 8))(v22, v15);
    goto LABEL_13;
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v31 + 32))(v17, v30, v15);
  uint64_t v90 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  unint64_t v34 = v33;
  uint64_t v35 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  unint64_t v37 = v36;
  int v89 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v90, v34, v35, v36);
  sub_10000C970(v35, v37);
  sub_10000C970(v90, v34);
  uint64_t v38 = *(void (**)(unsigned char *, uint64_t))(v31 + 8);
  v38(v17, v15);
  sub_1000380B4((uint64_t)v24, (uint64_t *)&unk_1004852B0);
  sub_1000380B4((uint64_t)v26, (uint64_t *)&unk_1004852B0);
  v38(v22, v15);
  sub_1000380B4((uint64_t)v20, (uint64_t *)&unk_1004852B0);
  if ((v89 & 1) == 0) {
    return 0;
  }
LABEL_15:
  uint64_t v39 = v93;
  uint64_t v40 = v94;
  uint64_t v41 = v94[7];
  uint64_t v42 = v92;
  uint64_t v43 = *(void *)&v92[v41];
  unint64_t v44 = *(void *)&v92[v41 + 8];
  uint64_t v45 = (uint64_t *)&v93[v41];
  uint64_t v46 = *v45;
  unint64_t v47 = v45[1];
  if (v44 >> 60 == 15)
  {
    uint64_t v48 = (uint64_t)v109;
    if (v47 >> 60 != 15) {
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v48 = (uint64_t)v109;
    if (v47 >> 60 == 15) {
      goto LABEL_29;
    }
    sub_100038004(v43, v44);
    sub_100038004(v46, v47);
    char v49 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v43, v44, v46, v47);
    sub_10000C95C(v46, v47);
    sub_10000C95C(v43, v44);
    if ((v49 & 1) == 0) {
      return 0;
    }
  }
  uint64_t v50 = v40[8];
  uint64_t v43 = *(void *)&v42[v50];
  unint64_t v44 = *(void *)&v42[v50 + 8];
  uint64_t v51 = (uint64_t *)&v39[v50];
  uint64_t v46 = *v51;
  unint64_t v47 = v51[1];
  if (v44 >> 60 == 15)
  {
    if (v47 >> 60 != 15) {
      goto LABEL_29;
    }
  }
  else
  {
    if (v47 >> 60 == 15) {
      goto LABEL_29;
    }
    sub_100038004(v43, v44);
    sub_100038004(v46, v47);
    char v52 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v43, v44, v46, v47);
    sub_10000C95C(v46, v47);
    sub_10000C95C(v43, v44);
    if ((v52 & 1) == 0) {
      return 0;
    }
  }
  uint64_t v53 = v40[9];
  uint64_t v43 = *(void *)&v42[v53];
  unint64_t v44 = *(void *)&v42[v53 + 8];
  uint64_t v54 = (uint64_t *)&v39[v53];
  uint64_t v46 = *v54;
  unint64_t v47 = v54[1];
  if (v44 >> 60 == 15)
  {
    if (v47 >> 60 == 15) {
      goto LABEL_32;
    }
LABEL_29:
    sub_100038004(v43, v44);
    sub_100038004(v46, v47);
    sub_10000C95C(v43, v44);
    sub_10000C95C(v46, v47);
    return 0;
  }
  if (v47 >> 60 == 15) {
    goto LABEL_29;
  }
  sub_100038004(v43, v44);
  sub_100038004(v46, v47);
  char v56 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v43, v44, v46, v47);
  sub_10000C95C(v46, v47);
  sub_10000C95C(v43, v44);
  if ((v56 & 1) == 0) {
    return 0;
  }
LABEL_32:
  uint64_t v57 = v106;
  sub_1000136F4((uint64_t)&v42[v40[10]], (uint64_t)v106, &qword_1004862B0);
  int v58 = v105;
  sub_1000136F4((uint64_t)&v39[v40[10]], (uint64_t)v105, &qword_1004862B0);
  unsigned __int8 v59 = v108;
  uint64_t v60 = (uint64_t)&v108[*(int *)(v104 + 48)];
  sub_1000136F4((uint64_t)v57, (uint64_t)v108, &qword_1004862B0);
  v110  = v60;
  sub_1000136F4((uint64_t)v58, v60, &qword_1004862B0);
  int v61 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v107 + 48);
  uint64_t v62 = v91;
  if (v61((uint64_t)v59, 1, v91) == 1)
  {
    sub_1000380B4((uint64_t)v58, &qword_1004862B0);
    sub_1000380B4((uint64_t)v57, &qword_1004862B0);
    int v63 = v61(v110, 1, v62);
    uint64_t v64 = v103;
    if (v63 == 1)
    {
      sub_1000380B4((uint64_t)v108, &qword_1004862B0);
      uint64_t v65 = (uint64_t)v101;
      goto LABEL_39;
    }
LABEL_37:
    sub_1000380B4((uint64_t)v108, (uint64_t *)&unk_100486400);
    return 0;
  }
  int v66 = v102;
  sub_1000136F4((uint64_t)v59, (uint64_t)v102, &qword_1004862B0);
  if (v61(v110, 1, v62) == 1)
  {
    sub_1000380B4((uint64_t)v105, &qword_1004862B0);
    sub_1000380B4((uint64_t)v106, &qword_1004862B0);
    (*(void (**)(unsigned char *, uint64_t))(v107 + 8))(v66, v62);
    goto LABEL_37;
  }
  uint64_t v67 = v107;
  uint64_t v68 = v100;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v107 + 32))(v100, v110, v62);
  sub_10021A5E0(&qword_10047CF30, (void (*)(uint64_t))&type metadata accessor for UUID);
  char v69 = dispatch thunk of static Equatable.== infix(_:_:)();
  long long v70 = *(void (**)(unsigned char *, uint64_t))(v67 + 8);
  v70(v68, v62);
  sub_1000380B4((uint64_t)v105, &qword_1004862B0);
  sub_1000380B4((uint64_t)v106, &qword_1004862B0);
  v70(v66, v62);
  uint64_t v64 = v103;
  sub_1000380B4((uint64_t)v108, &qword_1004862B0);
  uint64_t v65 = (uint64_t)v101;
  if ((v69 & 1) == 0) {
    return 0;
  }
LABEL_39:
  if ((sub_1000992B4(*(void *)&v42[v40[11]], *(void *)&v39[v40[11]]) & 1) == 0) {
    return 0;
  }
  sub_1000136F4((uint64_t)&v42[v40[12]], v65, (uint64_t *)&unk_100485B60);
  sub_1000136F4((uint64_t)&v39[v40[12]], v48, (uint64_t *)&unk_100485B60);
  long long v71 = v99;
  uint64_t v72 = (uint64_t)&v99[*(int *)(v97 + 48)];
  sub_1000136F4(v65, (uint64_t)v99, (uint64_t *)&unk_100485B60);
  sub_1000136F4(v48, v72, (uint64_t *)&unk_100485B60);
  uint64_t v73 = v65;
  long long v74 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48);
  uint64_t v75 = v98;
  if (v74((uint64_t)v71, 1, v98) == 1)
  {
    sub_1000380B4(v48, (uint64_t *)&unk_100485B60);
    sub_1000380B4(v73, (uint64_t *)&unk_100485B60);
    if (v74(v72, 1, v75) == 1)
    {
      sub_1000380B4((uint64_t)v71, (uint64_t *)&unk_100485B60);
      goto LABEL_43;
    }
LABEL_48:
    sub_1000380B4((uint64_t)v71, &qword_100483570);
    return 0;
  }
  char v80 = v96;
  sub_1000136F4((uint64_t)v71, (uint64_t)v96, (uint64_t *)&unk_100485B60);
  if (v74(v72, 1, v75) == 1)
  {
    sub_1000380B4(v48, (uint64_t *)&unk_100485B60);
    sub_1000380B4(v73, (uint64_t *)&unk_100485B60);
    sub_10021A4B0((uint64_t)v80, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
    goto LABEL_48;
  }
  char v81 = v95;
  sub_10021A578(v72, (uint64_t)v95, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
  if ((static DispatchTimeInterval.== infix(_:_:)() & 1) == 0)
  {
    sub_10021A4B0((uint64_t)v81, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
    sub_1000380B4(v48, (uint64_t *)&unk_100485B60);
    sub_1000380B4(v73, (uint64_t *)&unk_100485B60);
    sub_10021A4B0((uint64_t)v80, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
    sub_1000380B4((uint64_t)v71, (uint64_t *)&unk_100485B60);
    return 0;
  }
  uint64_t v82 = *(int *)(v75 + 20);
  uint64_t v83 = (uint64_t)v80;
  uint64_t v84 = (uint64_t)v81;
  int v85 = v80[v82];
  uint64_t v86 = (uint64_t)v71;
  int v87 = *(unsigned __int8 *)(v84 + v82);
  sub_10021A4B0(v84, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
  sub_1000380B4(v48, (uint64_t *)&unk_100485B60);
  sub_1000380B4(v73, (uint64_t *)&unk_100485B60);
  sub_10021A4B0(v83, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
  sub_1000380B4(v86, (uint64_t *)&unk_100485B60);
  if (v85 != v87) {
    return 0;
  }
LABEL_43:
  uint64_t v76 = v94[13];
  BOOL v77 = (double *)&v42[v76];
  unsigned __int8 v78 = v42[v76 + 24];
  uint64_t v79 = &v39[v76];
  if (v78)
  {
    if ((v79[24] & 1) == 0) {
      return 0;
    }
  }
  else if ((v79[24] & 1) != 0 {
         || *v77 != *(double *)v79
  }
         || v77[1] != *((double *)v79 + 1)
         || v77[2] != *((double *)v79 + 2))
  {
    return 0;
  }
  return 1;
}

uint64_t _s7CoreP2P12NANAttributeO13AttributeTypeO8rawValueAESgs5UInt8V_tcfC_0(char a1)
{
  if ((a1 + 35) > 0x4Fu) {
    return 46;
  }
  else {
    return asc_1003D2CE0[(char)(a1 + 35)];
  }
}

uint64_t _s7CoreP2P12NANAttributeO23CustomDeviceInformationV12PlatformTypeO8rawValueAGSgs5UInt8V_tcfC_0(uint64_t result)
{
  if (result >= 6u) {
    return 6;
  }
  else {
    return result;
  }
}

uint64_t sub_1002107F8(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_100483650);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_100219D08();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return sub_100010754((uint64_t)a1);
  }
  char v27 = 0;
  sub_10022F1A0();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v7 = v21;
  char v27 = 1;
  sub_10003FE54();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v19 = v21;
  uint64_t v17 = v7;
  uint64_t v18 = v22;
  uint64_t v20 = v23;
  uint64_t v8 = v24;
  uint64_t v9 = v25;
  uint64_t v10 = v26;
  char v27 = 2;
  sub_10022F0F8();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v14 = v10;
  uint64_t v15 = v9;
  uint64_t v16 = v8;
  uint64_t v11 = v21;
  char v27 = 3;
  sub_10022F14C();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100010754((uint64_t)a1);
  return v17 | (v19 << 8) | (v18 << 16) | (v20 << 24) | (v16 << 32) | (v15 << 40) | (v14 << 48) | (v11 << 56);
}

uint64_t sub_100210AC0(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_1004837A8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_100217D5C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return sub_100010754((uint64_t)a1);
  }
  char v22 = 0;
  sub_10022F1A0();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v7 = v16;
  char v22 = 1;
  sub_10003FE54();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v8 = v16;
  uint64_t v9 = v17;
  uint64_t v15 = v18;
  uint64_t v14 = v19;
  uint64_t v13 = v20;
  uint64_t v12 = v21;
  char v22 = 2;
  sub_10022F88C();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100010754((uint64_t)a1);
  return v7 | (v8 << 8) | (v9 << 16) | (v15 << 24) | (v14 << 32) | (v13 << 40) | (v12 << 48);
}

uint64_t sub_100210D3C(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_1004836E0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_1002190D8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return sub_100010754((uint64_t)a1);
  }
  char v17 = 0;
  sub_10003FE54();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v7 = v14;
  uint64_t v8 = v15;
  uint64_t v9 = v16;
  char v17 = 1;
  sub_10022F4E8();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v12 = v14;
  uint64_t v13 = v7;
  sub_100010BCC(&qword_1004827A8);
  char v17 = 2;
  sub_100217A38(&qword_1004835B0, &qword_1004827A8, (void (*)(void))sub_10022EEAC);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100010754((uint64_t)a1);
  return v13 | (v8 << 32) | (v9 << 40) | (v12 << 48);
}

uint64_t sub_100210FB0(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_1004836F0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_100218FDC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return sub_100010754((uint64_t)a1);
  }
  char v13 = 0;
  unsigned __int8 v7 = KeyedDecodingContainer.decode(_:forKey:)();
  char v12 = 1;
  sub_10022F53C();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v8 = v11;
  sub_100010BCC(&qword_100482778);
  v10[27]  = 2;
  sub_100217A38(&qword_100483700, &qword_100482778, (void (*)(void))sub_10022F590);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100010754((uint64_t)a1);
  return v7 | (v8 << 16);
}

uint64_t sub_1002111F8(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_100483648);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_100219D5C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return sub_100010754((uint64_t)a1);
  }
  char v20 = 0;
  sub_10003FE54();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v18 = *(unsigned int *)v19;
  uint64_t v7 = v19[4];
  uint64_t v8 = v19[5];
  char v20 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v16 = v7;
  uint64_t v17 = v8;
  uint64_t v9 = v19[0];
  uint64_t v10 = v19[1];
  uint64_t v11 = *(unsigned int *)&v19[2];
  char v20 = 2;
  sub_10022F0F8();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v13 = v10;
  uint64_t v14 = v9;
  uint64_t v15 = v11;
  char v20 = 3;
  sub_10022F14C();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100010754((uint64_t)a1);
  return v18 | (v16 << 32) | (v17 << 40) | (v14 << 48) | (v13 << 56);
}

uint64_t sub_1002114A8(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_100483630);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_100219DB0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return sub_100010754((uint64_t)a1);
  }
  char v23 = 0;
  sub_10003FE54();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v7 = v20;
  uint64_t v8 = v21;
  uint64_t v9 = v22;
  char v23 = 1;
  sub_10022F0F8();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v17 = v9;
  uint64_t v18 = v8;
  uint64_t v19 = v7;
  uint64_t v10 = v20;
  uint64_t v11 = BYTE1(v20);
  uint64_t v12 = BYTE2(v20);
  char v23 = 2;
  sub_10022F14C();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v14 = v12;
  uint64_t v15 = v11;
  uint64_t v16 = v10;
  char v23 = 3;
  sub_10021A9A0();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100010754((uint64_t)a1);
  return v19 | (v18 << 32) | (v17 << 40) | (v16 << 48) | (v15 << 56);
}

uint64_t sub_100211750(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_1004836C8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_100219A14();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return sub_100010754((uint64_t)a1);
  }
  v10[15]  = 0;
  unsigned __int8 v7 = KeyedDecodingContainer.decode(_:forKey:)();
  v10[14]  = 1;
  int v8 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100010754((uint64_t)a1);
  return v7 | (v8 << 16);
}

void *sub_1002118F4(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_1004837F8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned __int8 v7 = sub_1000369C4(a1, a1[3]);
  sub_100214C28();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100010754((uint64_t)a1);
  }
  else
  {
    sub_100010BCC(&qword_1004825A0);
    sub_100217A38(&qword_100483800, &qword_1004825A0, (void (*)(void))sub_10022F988);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    unsigned __int8 v7 = (void *)v9[1];
    sub_100010754((uint64_t)a1);
  }
  return v7;
}

uint64_t sub_100211AA4(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_100483580);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_10021A45C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return sub_100010754((uint64_t)a1);
  }
  char v12 = 0;
  sub_10008B6A0();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v7 = v11[0];
  int v8 = v11[1];
  int v9 = v11[2];
  char v12 = 1;
  sub_10021A9A0();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100010754((uint64_t)a1);
  return v7 | (v8 << 8) | (v9 << 16);
}

uint64_t sub_100211C90(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_100483758);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_100218050();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return sub_100010754((uint64_t)a1);
  }
  char v16 = 0;
  sub_10003FE54();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v12 = v13;
  uint64_t v7 = v14;
  uint64_t v8 = v15;
  LOBYTE(v13)  = 1;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v10 = v7;
  uint64_t v11 = v8;
  char v16 = 2;
  sub_10022F7E4();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100010754((uint64_t)a1);
  return v12 | (v10 << 32) | (v11 << 40);
}

unint64_t sub_100211EB4(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_100483730);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_1002180F8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return sub_100010754((uint64_t)a1);
  }
  char v19 = 0;
  sub_10022F29C();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v7 = v20;
  unsigned __int8 v8 = HIBYTE(v20);
  char v19 = 1;
  sub_10022F694();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v9 = v20;
  char v19 = 2;
  sub_1000A6AF8();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v17 = v9;
  uint64_t v10 = v20;
  char v19 = 3;
  sub_10022F6E8();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v16 = v10;
  uint64_t v11 = v20;
  char v19 = 4;
  sub_10022F73C();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v15 = v11;
  uint64_t v12 = v20;
  LOBYTE(v20)  = 5;
  int v18 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v14 = v12;
  char v19 = 6;
  sub_10022F790();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100010754((uint64_t)a1);
  return v7 | (v17 << 16) | (v16 << 32) | (v15 << 40) | (v14 << 48) | ((unint64_t)v8 << 8);
}

uint64_t sub_1002121F4(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_100483678);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_100219C0C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return sub_100010754((uint64_t)a1);
  }
  char v11 = 0;
  sub_10022F29C();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v7 = v10[8];
  int v8 = v10[9];
  char v11 = 1;
  sub_10021A9A0();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100010754((uint64_t)a1);
  return v7 | (v8 << 8);
}

uint64_t sub_1002123D0(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_100483810);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[3];
  sub_1000369C4(a1, v7);
  sub_10020D358();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100010754((uint64_t)a1);
  }
  else
  {
    v11[15]  = 0;
    unsigned __int8 v8 = KeyedDecodingContainer.decode(_:forKey:)();
    v11[14]  = 1;
    int v9 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    sub_100010754((uint64_t)a1);
    return v8 | (v9 << 8);
  }
  return v7;
}

unint64_t sub_100212574()
{
  unint64_t result = qword_100482580;
  if (!qword_100482580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482580);
  }
  return result;
}

unint64_t sub_1002125C8()
{
  unint64_t result = qword_100482588;
  if (!qword_100482588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482588);
  }
  return result;
}

uint64_t sub_10021261C(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_1004837E8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[3];
  sub_1000369C4(a1, v7);
  sub_10022FA30();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100010754((uint64_t)a1);
  }
  else
  {
    sub_100010BCC(&qword_10047F2E8);
    v9[7]  = 0;
    sub_100217A38(&qword_10047FBD8, &qword_10047F2E8, (void (*)(void))sub_10003FE54);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v7 = v10;
    v9[6]  = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    sub_100010754((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return v7;
}

void *sub_100212844(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_1004835A8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000369C4(a1, a1[3]);
  sub_10021A248();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100010754((uint64_t)a1);
  }
  else
  {
    sub_100010BCC(&qword_1004827A8);
    sub_100217A38(&qword_1004835B0, &qword_1004827A8, (void (*)(void))sub_10022EEAC);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = (void *)v9[1];
    sub_100010754((uint64_t)a1);
  }
  return v7;
}

uint64_t sub_1002129F4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v7 = sub_100010BCC(&qword_1004837B0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = &v18.i8[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_100217C60();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100010754((uint64_t)a1);
  }
  char v32 = 0;
  sub_10003FE54();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v3.i32[0]  = v26;
  int v31 = v27;
  int v11 = v28;
  char v32 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v25 = v11;
  v4.i32[0]  = v26;
  int v12 = v27;
  int v13 = v28;
  char v32 = 2;
  sub_10022F88C();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v23 = v12;
  int v24 = v13;
  int v21 = BYTE1(v26);
  int v22 = v26;
  int v20 = BYTE2(v26);
  uint64_t v14 = v29;
  char v32 = 3;
  unint64_t v15 = v30;
  sub_100013D44(v29, v30);
  sub_10022F248();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int16x8_t v18 = (int16x8_t)vmovl_u8(v3);
  int16x8_t v19 = (int16x8_t)vmovl_u8(v4);
  (*(void (**)(__int8 *, uint64_t))(v8 + 8))(v10, v7);
  char v16 = v26;
  sub_100010754((uint64_t)a1);
  uint64_t result = sub_10000C970(v14, v15);
  *(_DWORD *)a2  = vmovn_s16(v18).u32[0];
  *(unsigned char *)(a2 + 4)  = v31;
  *(unsigned char *)(a2 + 5)  = v25;
  *(_DWORD *)(a2 + 6)  = vmovn_s16(v19).u32[0];
  *(unsigned char *)(a2 + 10)  = v23;
  *(unsigned char *)(a2 + 11)  = v24;
  *(unsigned char *)(a2 + 16)  = v22;
  *(unsigned char *)(a2 + 17)  = v21;
  *(unsigned char *)(a2 + 18)  = v20;
  *(void *)(a2 + 24)  = v14;
  *(void *)(a2 + 32)  = v15;
  *(unsigned char *)(a2 + 40)  = v16;
  return result;
}

uint64_t sub_100212D38(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_1004835D0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[3];
  sub_1000369C4(a1, v7);
  sub_10021A14C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    v9[16]  = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    v9[15]  = 1;
    sub_10021A9A0();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  }
  sub_100010754((uint64_t)a1);
  return v7;
}

uint64_t sub_100212EF8(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_100483610);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_100219F00();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return sub_100010754((uint64_t)a1);
  }
  v10[14]  = 0;
  sub_10022F050();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v7 = v10[15];
  v10[13]  = 1;
  int v8 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100010754((uint64_t)a1);
  return v7 | (v8 << 8);
}

uint64_t sub_1002130B0(void *a1)
{
  uint64_t v2 = sub_100010BCC(&qword_1004835F0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = &v8[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_100219FA8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v8[30]  = 0;
  sub_10022EFA8();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v6 = v8[31];
  sub_100010BCC(&qword_1004828D8);
  v8[15]  = 1;
  sub_100217A38(&qword_100483600, &qword_1004828D8, (void (*)(void))sub_10022EFFC);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  sub_100010754((uint64_t)a1);
  return v6;
}

uint64_t sub_1002132C8(void *a1)
{
  uint64_t v2 = sub_100010BCC(&qword_100483770);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = &v8[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_100217F54();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v8[30]  = 0;
  sub_1000A68EC();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v6 = v8[31];
  sub_100010BCC(&qword_100482688);
  v8[15]  = 1;
  sub_100217A38(&qword_100483778, &qword_100482688, (void (*)(void))sub_10022F838);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  sub_100010754((uint64_t)a1);
  return v6;
}

unint64_t sub_1002134E0(void *a1)
{
  unint64_t v3 = (unint64_t)sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v1)
  {
    sub_100010754((uint64_t)a1);
  }
  else
  {
    sub_100039448((uint64_t)v6, v7);
    unsigned int v4 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    if (v4 >= 6u) {
      unint64_t v3 = 0;
    }
    else {
      unint64_t v3 = v4;
    }
    sub_100010754((uint64_t)v6);
    sub_100010754((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_1002135AC(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_100483788);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_100217F00();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return sub_100010754((uint64_t)a1);
  }
  sub_10022F88C();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  int v8 = v12;
  int v9 = v11[4];
  sub_100010754((uint64_t)a1);
  if (v8) {
    int v10 = 0x10000;
  }
  else {
    int v10 = 0;
  }
  return v9 | v10;
}

uint64_t sub_100213734(void *a1)
{
  uint64_t v2 = sub_100010BCC(&qword_1004835C0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_10021A1A0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  LOBYTE(v10)  = 0;
  uint64_t v6 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v10)  = 1;
  KeyedDecodingContainer.decode(_:forKey:)();
  char v12 = 2;
  sub_10022EF00();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v7 = (unsigned __int16)v10;
  char v12 = 3;
  sub_10022EDB0();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v11 = v7;
  v9[1]  = v10;
  sub_100010BCC(&qword_1004827A8);
  char v12 = 4;
  sub_100217A38(&qword_1004835B0, &qword_1004827A8, (void (*)(void))sub_10022EEAC);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_100010754((uint64_t)a1);
  return v6;
}

void *sub_1002139F8(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_100483728);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v7 = sub_1000369C4(a1, a1[3]);
  sub_1002182F0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100010754((uint64_t)a1);
  }
  else
  {
    sub_100010BCC(&qword_10047E7D0);
    sub_10010E990(&qword_10047FBC0);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    int v7 = (void *)v9[1];
    sub_100010754((uint64_t)a1);
  }
  return v7;
}

uint64_t sub_100213B94(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_100483660);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_10022F1F4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return sub_100010754((uint64_t)a1);
  }
  char v21 = 0;
  sub_10003FE54();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v19 = *(unsigned int *)v20;
  uint64_t v7 = v20[4];
  uint64_t v8 = v20[5];
  char v21 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v17 = v7;
  uint64_t v18 = v8;
  uint64_t v9 = v20[0];
  uint64_t v10 = v20[1];
  uint64_t v11 = *(unsigned int *)&v20[2];
  char v21 = 2;
  sub_10022F248();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v14 = v9;
  uint64_t v15 = v11;
  uint64_t v16 = v10;
  char v21 = 3;
  sub_10022F0F8();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v13[1]  = v20[2];
  char v21 = 4;
  sub_10022F14C();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100010754((uint64_t)a1);
  return v19 | (v17 << 32) | (v18 << 40) | (v14 << 48) | (v16 << 56);
}

void *sub_100213E9C(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_1004835D8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000369C4(a1, a1[3]);
  sub_10021A0A4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100010754((uint64_t)a1);
  }
  else
  {
    sub_100010BCC(&qword_100482900);
    sub_100217A38(&qword_1004835E0, &qword_100482900, (void (*)(void))sub_10022EF54);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = (void *)v9[1];
    sub_100010754((uint64_t)a1);
  }
  return v7;
}

uint64_t sub_10021404C(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_1004837C8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[3];
  sub_1000369C4(a1, v7);
  sub_100217AA4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100010754((uint64_t)a1);
  }
  else
  {
    v11[15]  = 0;
    unsigned __int16 v8 = KeyedDecodingContainer.decode(_:forKey:)();
    v11[14]  = 1;
    unsigned __int16 v9 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    sub_100010754((uint64_t)a1);
    return v8 | (v9 << 16);
  }
  return v7;
}

uint64_t sub_1002141F0(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_100483628);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_100219E04();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return sub_100010754((uint64_t)a1);
  }
  char v27 = 0;
  unsigned int v7 = KeyedDecodingContainer.decode(_:forKey:)();
  char v20 = 1;
  sub_10003FE54();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v15 = v21;
  uint64_t v14 = v22;
  uint64_t v13 = v23;
  uint64_t v12 = v24;
  uint64_t v8 = v25;
  uint64_t v9 = v26;
  char v19 = 2;
  v11[0]  = KeyedDecodingContainer.decode(_:forKey:)();
  v11[1]  = v9;
  void v11[2] = v8;
  char v18 = 3;
  KeyedDecodingContainer.decode(_:forKey:)();
  char v17 = 4;
  KeyedDecodingContainer.decode(_:forKey:)();
  char v16 = 5;
  KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100010754((uint64_t)a1);
  return v7 | (unint64_t)(v15 << 32) | (v14 << 40) | (v13 << 48) | (v12 << 56);
}

uint64_t sub_1002144B8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v7 = sub_100010BCC(&qword_1004837A0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = &v18.i8[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_100217E04();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100010754((uint64_t)a1);
  }
  char v28 = 0;
  sub_10003FE54();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v3.i32[0]  = v22;
  int v27 = v23;
  unsigned __int8 v11 = v24;
  char v28 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  char v12 = v27;
  v4.i32[0]  = v22;
  int v20 = v24;
  int v21 = v23;
  char v28 = 2;
  sub_10022F88C();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(__int8 *, uint64_t))(v8 + 8))(v10, v7);
  int16x8_t v18 = (int16x8_t)vmovl_u8(v3);
  int16x8_t v19 = (int16x8_t)vmovl_u8(v4);
  __int16 v13 = v22;
  char v14 = BYTE2(v22);
  uint64_t v15 = v25;
  uint64_t v16 = v26;
  uint64_t result = sub_100010754((uint64_t)a1);
  *(_DWORD *)a2  = vmovn_s16(v18).u32[0];
  *(unsigned char *)(a2 + 4)  = v12;
  *(unsigned char *)(a2 + 5)  = v11;
  *(_DWORD *)(a2 + 6)  = vmovn_s16(v19).u32[0];
  *(unsigned char *)(a2 + 10)  = v21;
  *(unsigned char *)(a2 + 11)  = v20;
  *(_WORD *)(a2 + 16)  = v13;
  *(unsigned char *)(a2 + 18)  = v14;
  *(void *)(a2 + 24)  = v15;
  *(void *)(a2 + 32)  = v16;
  return result;
}

uint64_t sub_100214740@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = sub_100010BCC(&qword_100483798);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = &v17.i8[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_100217E58();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100010754((uint64_t)a1);
  }
  char v26 = 0;
  sub_10003FE54();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v3.i32[0]  = v23;
  int v10 = BYTE4(v23);
  int v11 = BYTE5(v23);
  char v26 = 1;
  sub_10022F88C();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v21 = v11;
  int v22 = v10;
  int v19 = BYTE1(v23);
  int v20 = v23;
  int v18 = BYTE2(v23);
  uint64_t v12 = v24;
  unint64_t v13 = v25;
  char v26 = 2;
  sub_100013D44(v24, v25);
  sub_10021A9A0();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int16x8_t v17 = (int16x8_t)vmovl_u8(v3);
  (*(void (**)(__int8 *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v14 = v23;
  unint64_t v15 = v24;
  sub_100013D44(v12, v13);
  sub_100013D44(v14, v15);
  sub_10000C970(v12, v13);
  sub_100010754((uint64_t)a1);
  sub_10000C970(v12, v13);
  uint64_t result = sub_10000C970(v14, v15);
  *(_DWORD *)a2  = vmovn_s16(v17).u32[0];
  *(unsigned char *)(a2 + 4)  = v22;
  *(unsigned char *)(a2 + 5)  = v21;
  *(unsigned char *)(a2 + 8)  = v20;
  *(unsigned char *)(a2 + 9)  = v19;
  *(unsigned char *)(a2 + 10)  = v18;
  *(void *)(a2 + 16)  = v12;
  *(void *)(a2 + 24)  = v13;
  *(void *)(a2 + 32)  = v14;
  *(void *)(a2 + 40)  = v15;
  return result;
}

uint64_t sub_100214A44(void *a1)
{
  uint64_t v2 = sub_100010BCC(&qword_100483808);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = &v8[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_100212574();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v8[7]  = 0;
  sub_10022F7E4();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v6 = v9;
  v8[6]  = 1;
  KeyedDecodingContainer.decode(_:forKey:)();
  v8[5]  = 2;
  KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  sub_100010754((uint64_t)a1);
  return v6;
}

unint64_t sub_100214C28()
{
  unint64_t result = qword_100482598;
  if (!qword_100482598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482598);
  }
  return result;
}

unint64_t sub_100214C7C()
{
  unint64_t result = qword_1004825B0;
  if (!qword_1004825B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004825B0);
  }
  return result;
}

uint64_t sub_100214CD0(uint64_t result, unint64_t a2, uint64_t a3)
{
  if (BYTE2(a3) != 255) {
    return sub_100214CE8(result, a2, a3, BYTE2(a3) & 1);
  }
  return result;
}

uint64_t sub_100214CE8(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    return sub_100013D44(a1, a2);
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_100214CF4(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_100483768);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_100217FFC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return sub_100010754((uint64_t)a1);
  }
  char v14 = 0;
  sub_10003FE54();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v7 = v11;
  uint64_t v8 = v12;
  uint64_t v9 = v13;
  char v14 = 1;
  sub_10021A9A0();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100010754((uint64_t)a1);
  return v7 | (v8 << 32) | (v9 << 40);
}

uint64_t sub_100214EDC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v2)
  {
    sub_100010754((uint64_t)a1);
    return sub_1001331AC(4, 0, 0);
  }
  else
  {
    sub_100039448((uint64_t)v36, v37);
    UnkeyedDecodingContainer.inferredDecode<A>()();
    char v6 = v33[0];
    sub_100039448((uint64_t)v36, v37);
    sub_100010BCC(&qword_100482720);
    sub_10000F9CC(&qword_100483710, &qword_100482720);
    UnkeyedDecodingContainer.inferredDecode<A>()();
    sub_100039448((uint64_t)v36, v37);
    sub_10022EDB0();
    UnkeyedDecodingContainer.inferredDecode<A>()();
    char v32 = v33[0];
    sub_100039448((uint64_t)v36, v37);
    sub_10003FE54();
    UnkeyedDecodingContainer.inferredDecode<A>()();
    char v31 = v33[0];
    v3.i32[0]  = v33[0];
    sub_100039448((uint64_t)v36, v37);
    UnkeyedDecodingContainer.inferredDecode<A>()();
    char v29 = BYTE4(v33[0]);
    char v30 = BYTE5(v33[0]);
    sub_100039448((uint64_t)v36, v37);
    sub_10022F638();
    UnkeyedDecodingContainer.inferredDecode<A>()();
    char v28 = v33[0];
    char v8 = v33[0];
    if ((v33[0] & 8) != 0)
    {
      sub_100039448((uint64_t)v36, v37);
      char v27 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
      char v8 = v33[0];
    }
    else
    {
      char v27 = 0;
    }
    if ((v8 & 0x10) != 0)
    {
      sub_100039448((uint64_t)v36, v37);
      dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
      unint64_t v9 = LODWORD(v33[0]) | ((unint64_t)BYTE4(v33[0]) << 32) | ((unint64_t)BYTE5(v33[0]) << 40);
    }
    else
    {
      unint64_t v9 = 0;
    }
    if ((v8 & 0x20) != 0)
    {
      sub_100039448((uint64_t)v36, v37);
      sub_10008B6F4();
      dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
      unint64_t v26 = v9;
      uint64_t v14 = v34;
      unint64_t v13 = v35;
      unint64_t v22 = v35 >> 62;
      sub_100013D44(v34, v35);
      unint64_t v24 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v15 = type metadata accessor for BinaryDecoder();
      uint64_t v16 = (void *)swift_allocObject();
      v16[5]  = &_swiftEmptyDictionarySingleton;
      v16[2]  = v14;
      v16[3]  = v13;
      uint64_t v17 = 0;
      switch(v22)
      {
        case 1uLL:
          uint64_t v17 = (int)v14;
          break;
        case 2uLL:
          uint64_t v17 = *(void *)(v14 + 16);
          break;
        default:
          break;
      }
      v16[4]  = v17;
      swift_beginAccess();
      v16[5]  = v24;
      swift_bridgeObjectRelease();
      v33[3]  = v15;
      v33[4]  = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
      v33[0]  = v16;
      unsigned __int8 v18 = NANServiceInfo.init(from:)(v33);
      uint64_t v25 = v19;
      unint64_t v23 = v20;
      unsigned __int8 v21 = v18;
      sub_10000C970(v14, v13);
      uint64_t v12 = v21;
      uint64_t v10 = v25;
      unint64_t v11 = v23;
    }
    else
    {
      unint64_t v26 = v9;
      uint64_t v10 = 0;
      unint64_t v11 = 0;
      uint64_t v12 = 4;
    }
    sub_100010754((uint64_t)v36);
    sub_10013316C(v12, v10, v11);
    sub_100010754((uint64_t)a1);
    uint64_t result = sub_1001331AC(v12, v10, v11);
    *(unsigned char *)a2  = v6;
    *(unsigned char *)(a2 + 1)  = v32;
    *(unsigned char *)(a2 + 2)  = v31;
    *(_DWORD *)(a2 + 3)  = vmovn_s16((int16x8_t)vmovl_u8(v3)).u32[0];
    *(unsigned char *)(a2 + 7)  = v29;
    *(unsigned char *)(a2 + 8)  = v30;
    *(unsigned char *)(a2 + 9)  = v28;
    *(unsigned char *)(a2 + 10)  = v8;
    *(unsigned char *)(a2 + 11)  = v27;
    *(unsigned char *)(a2 + 12)  = (v8 & 8) == 0;
    *(_WORD *)(a2 + 17)  = WORD2(v26);
    *(_DWORD *)(a2 + 13)  = v26;
    *(unsigned char *)(a2 + 19)  = (v8 & 0x10) == 0;
    *(void *)(a2 + 24)  = v12;
    *(void *)(a2 + 32)  = v10;
    *(void *)(a2 + 40)  = v11;
  }
  return result;
}

uint64_t sub_10021548C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v2)
  {
    sub_100010754((uint64_t)a1);
    return sub_1001331AC(4, 0, 0);
  }
  sub_100039448((uint64_t)v30, v31);
  UnkeyedDecodingContainer.inferredDecode<A>()();
  sub_100039448((uint64_t)v30, v31);
  sub_10022F8E0();
  UnkeyedDecodingContainer.inferredDecode<A>()();
  if ((v26 & 0x100) != 0)
  {
    sub_100039448((uint64_t)v30, v31);
    sub_10022F934();
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    int v6 = v26;
    if ((v26 & 0x200) == 0) {
      goto LABEL_6;
    }
LABEL_8:
    sub_100039448((uint64_t)v30, v31);
    char v7 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    int v25 = v6;
    int v32 = (unsigned __int16)v26;
    int v33 = v26;
    goto LABEL_9;
  }
  int v6 = 0;
  if ((v26 & 0x200) != 0) {
    goto LABEL_8;
  }
LABEL_6:
  int v25 = v6;
  int v32 = (unsigned __int16)v26;
  int v33 = v26;
  char v7 = 0;
LABEL_9:
  sub_100010BCC(&qword_10047E6F8);
  sub_100039448((uint64_t)v30, v31);
  sub_10000F9CC(&qword_10047E700, &qword_10047E6F8);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  char v24 = v7;
  uint64_t v8 = v26;
  unint64_t v9 = v27;
  unint64_t v10 = v27 >> 62;
  sub_100013D44(v26, v27);
  unint64_t v23 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v11 = type metadata accessor for BinaryDecoder();
  uint64_t v12 = (void *)swift_allocObject();
  v12[5]  = &_swiftEmptyDictionarySingleton;
  v12[2]  = v8;
  v12[3]  = v9;
  uint64_t v13 = 0;
  switch(v10)
  {
    case 1uLL:
      uint64_t v13 = (int)v8;
      break;
    case 2uLL:
      uint64_t v13 = *(void *)(v8 + 16);
      break;
    default:
      break;
  }
  Swift::UInt16 v12[4] = v13;
  swift_beginAccess();
  v12[5]  = v23;
  swift_bridgeObjectRelease();
  uint64_t v28 = v11;
  uint64_t v29 = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
  uint64_t v26 = (uint64_t)v12;
  unsigned __int8 v17 = NANServiceInfo.init(from:)(&v26);
  uint64_t v19 = v18;
  unint64_t v21 = v20;
  sub_10000C970(v8, v9);
  uint64_t v22 = v17;
  __int16 v14 = v32;
  BOOL v15 = (v32 & 0x200) == 0;
  BOOL v16 = (v32 & 0x100) == 0;
  sub_10013316C(v22, v19, v21);
  sub_100010754((uint64_t)v30);
  sub_100010754((uint64_t)a1);
  uint64_t result = sub_1001331AC(v22, v19, v21);
  *(unsigned char *)a2  = v33;
  *(_WORD *)(a2 + 2)  = v14;
  *(_DWORD *)(a2 + 4)  = v25;
  *(unsigned char *)(a2 + 8)  = v16;
  *(unsigned char *)(a2 + 9)  = v24;
  *(unsigned char *)(a2 + 10)  = v15;
  *(void *)(a2 + 16)  = v22;
  *(void *)(a2 + 24)  = v19;
  *(void *)(a2 + 32)  = v21;
  return result;
}

uint64_t sub_1002158A8(void *a1)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v1) {
    return sub_100010754((uint64_t)a1);
  }
  sub_100039448((uint64_t)v18, v19);
  unsigned __int16 v3 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
  sub_100039448((uint64_t)v18, v19);
  int v4 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
  sub_100039448((uint64_t)v18, v19);
  UnkeyedDecodingContainer.inferredDecode<A>()();
  uint64_t v5 = v3;
  uint64_t v6 = v19;
  sub_100039448((uint64_t)v18, v19);
  uint64_t v7 = UnkeyedDecodingContainer.decodeData(with:)(v5, v6);
  unint64_t v10 = v8;
  uint64_t v11 = v7;
  switch(v8 >> 62)
  {
    case 1uLL:
      uint64_t v12 = (int)v7;
      uint64_t v13 = v7 >> 32;
      goto LABEL_7;
    case 2uLL:
      uint64_t v12 = *(void *)(v7 + 16);
      uint64_t v13 = *(void *)(v7 + 24);
LABEL_7:
      sub_100013D44(v7, v8);
      if (v13 < v12)
      {
        __break(1u);
        JUMPOUT(0x100215AE0);
      }
      return result;
    default:
      break;
  }
  uint64_t v14 = Data.subdata(in:)();
  unint64_t v16 = v15;
  sub_10000C970(v11, v10);
  sub_100013D44(v14, v16);
  sub_10000C970(v11, v10);
  sub_100010754((uint64_t)v18);
  sub_100010754((uint64_t)a1);
  sub_10000C970(v14, v16);
  return v17 | (v4 << 8);
}

uint64_t sub_100215AF0(void *a1)
{
  uint64_t v3 = a1[3];
  sub_1000369C4(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v1)
  {
    sub_100010754((uint64_t)a1);
  }
  else
  {
    sub_100039448((uint64_t)v12, v13);
    sub_10022EE58();
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    uint64_t v4 = v13;
    sub_100039448((uint64_t)v12, v13);
    uint64_t v3 = UnkeyedDecodingContainer.decodeData(with:)(8, v4);
    unint64_t v7 = v6;
    uint64_t v8 = v13;
    sub_100039448((uint64_t)v12, v13);
    sub_100013D44(v3, v7);
    uint64_t v9 = UnkeyedDecodingContainer.decodeData(with:)(8, v8);
    unint64_t v11 = v10;
    sub_100013D44(v9, v10);
    sub_100010754((uint64_t)v12);
    sub_100013D44(v3, v7);
    sub_100013D44(v9, v11);
    sub_10000C970(v9, v11);
    sub_10000C970(v3, v7);
    sub_100010754((uint64_t)a1);
    sub_10000C970(v3, v7);
    sub_10000C970(v9, v11);
  }
  return v3;
}

uint64_t sub_100215CD4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v2)
  {
    sub_100010754((uint64_t)a1);
    return sub_10014CC74(0, 0, 0, 0xF000000000000000);
  }
  else
  {
    sub_100039448((uint64_t)v23, v24);
    UnkeyedDecodingContainer.inferredDecode<A>()();
    char v5 = v26;
    sub_100039448((uint64_t)v23, v24);
    sub_100010BCC(&qword_100482968);
    sub_10000F9CC(&qword_100483588, &qword_100482968);
    UnkeyedDecodingContainer.inferredDecode<A>()();
    char v6 = v26;
    sub_100039448((uint64_t)v23, v24);
    sub_10022EDB0();
    UnkeyedDecodingContainer.inferredDecode<A>()();
    int v8 = v26;
    if (sub_10008CAA8(4uLL, 4, v6) == 2)
    {
      char v9 = sub_10008CAA8(0, 4, v6);
      if (v9 == 2)
      {
        int v25 = v8;
        sub_100039448((uint64_t)v23, v24);
        LOWORD(v10)  = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
        sub_100039448((uint64_t)v23, v24);
        char v21 = v6;
        char v22 = v5;
        uint64_t v15 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
        uint64_t v16 = v24;
        sub_100039448((uint64_t)v23, v24);
        uint64_t v12 = UnkeyedDecodingContainer.decodeData(with:)(v15, v16);
        unint64_t v13 = v17;
        uint64_t v11 = 0;
        uint64_t v10 = (unsigned __int16)v10;
      }
      else
      {
        sub_100039448((uint64_t)v23, v24);
        uint64_t v18 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
        uint64_t v19 = v24;
        sub_100039448((uint64_t)v23, v24);
        uint64_t v12 = UnkeyedDecodingContainer.decodeData(with:)(v18, v19);
        unint64_t v13 = v20;
        int v25 = v8;
        char v21 = v6;
        char v22 = v5;
        uint64_t v10 = 0;
        uint64_t v11 = 1;
      }
    }
    else
    {
      int v25 = v8;
      char v21 = v6;
      char v22 = v5;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      unint64_t v13 = 0xF000000000000000;
    }
    sub_100039448((uint64_t)v23, v24);
    sub_10022EE04();
    UnkeyedDecodingContainer.inferredDecode<A>()();
    __int16 v14 = v26;
    sub_100010754((uint64_t)v23);
    sub_1001450E0(v10, v11, v12, v13);
    sub_100010754((uint64_t)a1);
    uint64_t result = sub_10014CC74(v10, v11, v12, v13);
    *(unsigned char *)a2  = v22;
    *(unsigned char *)(a2 + 1)  = v21;
    *(unsigned char *)(a2 + 2)  = v25;
    *(void *)(a2 + 8)  = v10;
    *(void *)(a2 + 16)  = v11;
    *(void *)(a2 + 24)  = v12;
    *(void *)(a2 + 32)  = v13;
    *(_WORD *)(a2 + 40)  = v14;
  }
  return result;
}

unint64_t sub_100216114(void *a1)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v1) {
    return sub_100010754((uint64_t)a1);
  }
  sub_100039448((uint64_t)v6, v7);
  sub_10022F398();
  UnkeyedDecodingContainer.inferredDecode<A>()();
  if ((v5 & 8) != 0)
  {
    sub_100039448((uint64_t)v6, v7);
    unsigned __int16 v4 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
  }
  else
  {
    unsigned __int16 v4 = 0;
  }
  sub_100010754((uint64_t)v6);
  sub_100010754((uint64_t)a1);
  return ((unint64_t)v4 << 16) | ((unint64_t)((v5 & 8) == 0) << 32) | v5;
}

uint64_t sub_100216248(void *a1)
{
  uint64_t v3 = type metadata accessor for CodingUserInfoKey();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  char v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  int v8 = (char *)v29 - v7;
  char v51 = 1;
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v1) {
    return sub_100010754((uint64_t)a1);
  }
  sub_100039448((uint64_t)v46, v48);
  UnkeyedDecodingContainer.inferredDecode<A>()();
  uint64_t v9 = v41;
  sub_100039448((uint64_t)v46, v48);
  UnkeyedDecodingContainer.inferredDecode<A>()();
  uint64_t v39 = v9;
  uint64_t v10 = v41;
  sub_100039448((uint64_t)v46, v48);
  UnkeyedDecodingContainer.inferredDecode<A>()();
  uint64_t v38 = v10;
  uint64_t v11 = v41;
  sub_100039448((uint64_t)v46, v48);
  UnkeyedDecodingContainer.inferredDecode<A>()();
  uint64_t v37 = v11;
  uint64_t v12 = v41;
  sub_100039448((uint64_t)v46, v48);
  UnkeyedDecodingContainer.inferredDecode<A>()();
  uint64_t v36 = v12;
  uint64_t v13 = v41;
  sub_100039448((uint64_t)v46, v48);
  UnkeyedDecodingContainer.inferredDecode<A>()();
  uint64_t v34 = v13;
  LODWORD(v13)  = v41;
  uint64_t v35 = v49;
  sub_100039448((uint64_t)v46, v48);
  sub_10022F3EC();
  UnkeyedDecodingContainer.inferredDecode<A>()();
  int v50 = v13;
  char v14 = v41;
  uint64_t v35 = v49;
  sub_100039448((uint64_t)v46, v48);
  sub_10022F440();
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  int v33 = v8;
  int v15 = v41;
  char v51 = 0;
  char v16 = sub_10008CAA8(0, 2, v41);
  LODWORD(v35)  = v15;
  char v17 = 0;
  unint64_t v18 = 0;
  __int16 v19 = -256;
  switch(v16)
  {
    case 0:
      sub_100039448((uint64_t)v46, v48);
      sub_1000A6AF8();
      UnkeyedDecodingContainer.inferredDecode<A>()();
      char v17 = 0;
      __int16 v19 = 0;
      unint64_t v18 = v41;
      break;
    case 1:
      sub_100039448((uint64_t)v46, v48);
      sub_1000A6B4C();
      UnkeyedDecodingContainer.inferredDecode<A>()();
      char v17 = 0;
      unint64_t v18 = v41 | ((unint64_t)HIWORD(v41) << 16) | ((unint64_t)v42 << 32) | ((unint64_t)v43 << 48);
      __int16 v19 = v44 | 0x100;
      break;
    case 2:
      sub_1000369C4(a1, a1[3]);
      uint64_t v21 = dispatch thunk of Decoder.userInfo.getter();
      if (qword_10047BFB0 != -1) {
        swift_once();
      }
      uint64_t v22 = sub_1000151B8(v3, (uint64_t)static CodingUserInfoKey.channelInformationHasAuxillaryBitmap);
      unint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
      uint64_t v31 = v22;
      uint64_t v32 = v4 + 16;
      char v30 = v23;
      ((void (*)(char *))v23)(v33);
      if (*(void *)(v21 + 16) && (unint64_t v24 = sub_1000313F0((uint64_t)v33), (v25 & 1) != 0)) {
        sub_1000107A4(*(void *)(v21 + 56) + 32 * v24, (uint64_t)v45);
      }
      else {
        memset(v45, 0, sizeof(v45));
      }
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v33, v3);
      sub_100035FD4((uint64_t)a1, (uint64_t)&v41);
      uint64_t v26 = sub_100010BCC(&qword_10047E720);
      uint64_t v27 = type metadata accessor for BinaryDecoder();
      int v33 = (char *)v26;
      v29[1]  = v27;
      if (swift_dynamicCast())
      {
        v30(v6, v31, v3);
        v40[3]  = &type metadata for Bool;
        LOBYTE(v40[0])  = 1;
        swift_beginAccess();
        sub_100027AFC((uint64_t)v40, (uint64_t)v6);
        swift_endAccess();
        swift_release();
      }
      sub_100039448((uint64_t)v46, v48);
      sub_1000A6B4C();
      UnkeyedDecodingContainer.inferredDecode<A>()();
      unint64_t v18 = v41 | ((unint64_t)HIWORD(v41) << 16) | ((unint64_t)v42 << 32) | ((unint64_t)v43 << 48);
      __int16 v19 = v44 | 0x100;
      sub_100035FD4((uint64_t)a1, (uint64_t)&v41);
      if (swift_dynamicCast())
      {
        v30(v6, v31, v3);
        sub_1000136F4((uint64_t)v45, (uint64_t)v40, &qword_10047D0D0);
        swift_beginAccess();
        sub_100027AFC((uint64_t)v40, (uint64_t)v6);
        swift_endAccess();
        swift_release();
      }
      sub_1000380B4((uint64_t)v45, &qword_10047D0D0);
      char v17 = v51;
      break;
    case 3:
      break;
    default:
      sub_10000F000();
      swift_allocError();
      *(_OWORD *)uint64_t v28 = xmmword_1003B00B0;
      *(unsigned char *)(v28 + 16)  = 2;
      swift_willThrow();
      swift_unexpectedError();
      __break(1u);
      JUMPOUT(0x100216B88);
  }
  sub_100010754((uint64_t)v46);
  sub_100010754((uint64_t)a1);
  uint64_t result = v39 | (v38 << 8) | (v37 << 32);
  LOBYTE(v46[0])  = v50;
  BYTE1(v46[0])  = v14;
  BYTE2(v46[0])  = v35;
  HIBYTE(v46[0])  = v17;
  *(void *)&v46[1]  = v18;
  __int16 v47 = v19;
  return result;
}

uint64_t sub_100216B98@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v2)
  {
    sub_100010754((uint64_t)a1);
    goto LABEL_4;
  }
  sub_100039448((uint64_t)v87, v88);
  sub_10022F988();
  UnkeyedDecodingContainer.inferredDecode<A>()();
  sub_100039448((uint64_t)v87, v88);
  sub_100013D44(v81, v82);
  UnkeyedDecodingContainer.inferredDecode<A>()();
  unint64_t v89 = v82;
  uint64_t v80 = v81;
  char v79 = v81;
  sub_100039448((uint64_t)v87, v88);
  UnkeyedDecodingContainer.inferredDecode<A>()();
  sub_100039448((uint64_t)v87, v88);
  sub_10022F9DC();
  UnkeyedDecodingContainer.inferredDecode<A>()();
  char v6 = v81;
  if ((v81 & 0x40) != 0)
  {
    sub_100039448((uint64_t)v87, v88);
    __int16 v72 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
  }
  else
  {
    __int16 v72 = 0;
  }
  uint64_t v74 = a2;
  char v73 = v81;
  char v75 = v81;
  if ((v81 & 4) == 0)
  {
    uint64_t v7 = 0;
    if ((v81 & 8) == 0) {
      goto LABEL_10;
    }
LABEL_29:
    sub_100010BCC(&qword_10047E210);
    sub_100039448((uint64_t)v87, v88);
    sub_10000F9CC(&qword_10047E768, &qword_10047E210);
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    uint64_t v81 = v85;
    unint64_t v82 = v86;
    switch(v86 >> 62)
    {
      case 1uLL:
        uint64_t v43 = (int)v85;
        uint64_t v44 = v85 >> 32;
        goto LABEL_36;
      case 2uLL:
        uint64_t v43 = *(void *)(v85 + 16);
        uint64_t v44 = *(void *)(v85 + 24);
LABEL_36:
        if (v43 == v44) {
          goto LABEL_37;
        }
        goto LABEL_31;
      case 3uLL:
        goto LABEL_37;
      default:
        if ((v86 & 0xFF000000000000) != 0)
        {
LABEL_31:
          char v35 = sub_10020B150();
          char v36 = sub_10008CAA8(0, 1, v35);
          if (!v36)
          {
            uint64_t v37 = v81;
            unint64_t v38 = v82;
            unint64_t v39 = v82 >> 62;
            sub_100013D44(v81, v82);
            sub_100013D44(v37, v38);
            unint64_t v40 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
            type metadata accessor for BinaryDecoder();
            unsigned int v41 = (void *)swift_allocObject();
            v41[5]  = &_swiftEmptyDictionarySingleton;
            v41[2]  = v37;
            v41[3]  = v38;
            uint64_t v42 = 0;
            switch(v39)
            {
              case 1uLL:
                uint64_t v42 = (int)v37;
                break;
              case 2uLL:
                uint64_t v42 = *(void *)(v37 + 16);
                break;
              default:
                break;
            }
            v41[4]  = v42;
            swift_beginAccess();
            v41[5]  = v40;
            swift_bridgeObjectRelease();
            uint64_t v8 = (uint64_t)sub_1001E2220();
            swift_release();
            sub_10000C970(v37, v38);
            uint64_t v57 = sub_10008CAC0(1, 1, v35, v49);
            sub_10000C970(v37, v38);
            unint64_t v9 = v57 != 0;
            uint64_t v10 = 0;
            goto LABEL_47;
          }
          if (v36 == 1)
          {
            uint64_t v47 = v81;
            unint64_t v48 = v82;
            switch(v82 >> 62)
            {
              case 1uLL:
                uint64_t v50 = (int)v81;
                uint64_t v51 = v81 >> 32;
                goto LABEL_44;
              case 2uLL:
                uint64_t v50 = *(void *)(v81 + 16);
                uint64_t v51 = *(void *)(v81 + 24);
LABEL_44:
                sub_100013D44(v81, v82);
                if (v51 >= v50) {
                  goto LABEL_45;
                }
                goto LABEL_53;
              default:
LABEL_45:
                uint64_t v8 = Data.subdata(in:)();
                unint64_t v9 = v52;
                sub_10000C970(v47, v48);
                unint64_t v53 = sub_10008CAA8(2uLL, 2, v35);
                unsigned __int8 v54 = _s7CoreP2P19NANIntervalDurationO8rawValueACSgs5UInt8V_tcfC_0(v53);
                if (v54 == 4) {
                  goto LABEL_56;
                }
                unsigned __int8 v55 = v54;
                uint64_t v56 = sub_10008CAC0(1, 1, v35, v54);
                sub_10000C970(v47, v48);
                uint64_t v10 = ((v56 != 0) << 8) | v55 | 0x10000u;
                break;
            }
LABEL_47:
            char v6 = v75;
            if ((v75 & 0x10) == 0) {
              goto LABEL_11;
            }
LABEL_48:
            sub_100010BCC(&qword_10047E210);
            sub_100039448((uint64_t)v87, v88);
            sub_10000F9CC(&qword_10047E768, &qword_10047E210);
            dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
            uint64_t v59 = v81;
            unint64_t v58 = v82;
            unint64_t v68 = v82 >> 62;
            sub_100013D44(v81, v82);
            unint64_t v78 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
            uint64_t v71 = type metadata accessor for BinaryDecoder();
            uint64_t v60 = (void *)swift_allocObject();
            v60[5]  = &_swiftEmptyDictionarySingleton;
            v60[2]  = v59;
            v60[3]  = v58;
            uint64_t v61 = 0;
            switch(v68)
            {
              case 1uLL:
                uint64_t v61 = (int)v59;
                break;
              case 2uLL:
                uint64_t v61 = *(void *)(v59 + 16);
                break;
              default:
                break;
            }
            v60[4]  = v61;
            swift_beginAccess();
            v60[5]  = v78;
            swift_bridgeObjectRelease();
            uint64_t v83 = v71;
            uint64_t v84 = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
            uint64_t v81 = (uint64_t)v60;
            LOBYTE(v11)  = NANServiceInfo.init(from:)(&v81);
            uint64_t v76 = v62;
            unint64_t v69 = v63;
            sub_10000C970(v59, v58);
            uint64_t v11 = v11;
            char v6 = v75;
            goto LABEL_12;
          }
LABEL_55:
          sub_10000F000();
          swift_allocError();
          *(_OWORD *)uint64_t v64 = xmmword_1003B00B0;
          *(unsigned char *)(v64 + 16)  = 2;
          swift_willThrow();
          swift_unexpectedError();
          __break(1u);
LABEL_56:
          sub_10000F000();
          swift_allocError();
          *(_OWORD *)uint64_t v65 = xmmword_1003B00B0;
          *(unsigned char *)(v65 + 16)  = 2;
          swift_willThrow();
          swift_unexpectedError();
          __break(1u);
          JUMPOUT(0x100217930);
        }
LABEL_37:
        unint64_t v45 = v89;
        sub_10000C970(v80, v89);
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v46 = 0;
        *(void *)(v46 + 8)  = 0;
        *(unsigned char *)(v46 + 16)  = 2;
        swift_willThrow();
        sub_10000C970(v81, v82);
        sub_100010754((uint64_t)v87);
        sub_100010754((uint64_t)a1);
        sub_10000C970(v80, v45);
        break;
    }
LABEL_4:
    swift_bridgeObjectRelease();
    sub_100133188(0, 0, 16711680);
    return sub_1001331AC(4, 0, 0);
  }
  sub_100010BCC(&qword_10047E210);
  sub_100039448((uint64_t)v87, v88);
  sub_10000F9CC(&qword_10047E768, &qword_10047E210);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v13 = v81;
  unint64_t v14 = v82;
  unint64_t v15 = v82 >> 62;
  sub_100013D44(v81, v82);
  sub_100013D44(v81, v82);
  uint64_t v7 = _swiftEmptyArrayStorage;
  unint64_t v16 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for BinaryDecoder();
  char v17 = (void *)swift_allocObject();
  v17[5]  = &_swiftEmptyDictionarySingleton;
  v17[2]  = v13;
  v17[3]  = v14;
  uint64_t v18 = 0;
  switch(v15)
  {
    case 1uLL:
      uint64_t v18 = (int)v13;
      break;
    case 2uLL:
      uint64_t v18 = *(void *)(v13 + 16);
      break;
    default:
      break;
  }
  Swift::UInt16 v17[4] = v18;
  swift_beginAccess();
  v17[5]  = v16;
  swift_bridgeObjectRelease();
  uint64_t v19 = sub_100010BCC(&qword_1004837E0);
  uint64_t v20 = swift_conformsToProtocol2();
  if (!v20)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  (*(void (**)(uint64_t *__return_ptr, void *, uint64_t, uint64_t))(v20 + 8))(&v81, v17, v19, v20);
  swift_dynamicCast();
  uint64_t v21 = v85;
  swift_release();
  sub_10000C970(v13, v14);
  int64_t v22 = *(void *)(v21 + 16);
  if (v22)
  {
    uint64_t v67 = v13;
    unint64_t v70 = v14;
    uint64_t v81 = (uint64_t)_swiftEmptyArrayStorage;
    sub_100083604(0, v22, 0);
    uint64_t v7 = (void *)v81;
    unint64_t v23 = (unint64_t *)(v21 + 40);
    while (2)
    {
      int64_t v77 = v22;
      uint64_t v24 = *(v23 - 1);
      unint64_t v25 = *v23;
      unint64_t v26 = *v23 >> 62;
      v23 += 2;
      switch(v26)
      {
        case 1uLL:
          uint64_t v27 = (int)v24;
          uint64_t v28 = v24 >> 32;
          goto LABEL_22;
        case 2uLL:
          uint64_t v27 = *(void *)(v24 + 16);
          uint64_t v28 = *(void *)(v24 + 24);
LABEL_22:
          sub_100013D44(v24, v25);
          sub_100013D44(v24, v25);
          if (v28 >= v27) {
            goto LABEL_23;
          }
          __break(1u);
LABEL_53:
          __break(1u);
          goto LABEL_54;
        default:
LABEL_23:
          uint64_t v29 = Data.subdata(in:)();
          uint64_t v31 = v30;
          sub_10000C970(v24, v25);
          sub_10000C970(v24, v25);
          uint64_t v81 = (uint64_t)v7;
          unint64_t v33 = v7[2];
          unint64_t v32 = v7[3];
          if (v33 >= v32 >> 1)
          {
            sub_100083604(v32 > 1, v33 + 1, 1);
            uint64_t v7 = (void *)v81;
          }
          v7[2]  = v33 + 1;
          uint64_t v34 = &v7[2 * v33];
          v34[4]  = v29;
          v34[5]  = v31;
          int64_t v22 = v77 - 1;
          if (v77 != 1) {
            continue;
          }
          sub_10000C970(v67, v70);
          break;
      }
      break;
    }
  }
  else
  {
    sub_10000C970(v13, v14);
  }
  swift_bridgeObjectRelease();
  char v6 = v75;
  if ((v75 & 8) != 0) {
    goto LABEL_29;
  }
LABEL_10:
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  uint64_t v10 = 16711680;
  if ((v6 & 0x10) != 0) {
    goto LABEL_48;
  }
LABEL_11:
  uint64_t v76 = 0;
  unint64_t v69 = 0;
  uint64_t v11 = 4;
LABEL_12:
  BOOL v66 = (v6 & 0x40) == 0;
  sub_100010754((uint64_t)v87);
  unint64_t v12 = v89;
  sub_100013D44(v80, v89);
  swift_bridgeObjectRetain();
  sub_100214CD0(v8, v9, v10);
  sub_10013316C(v11, v76, v69);
  sub_10000C970(v80, v12);
  sub_100010754((uint64_t)a1);
  sub_10000C970(v80, v12);
  swift_bridgeObjectRelease();
  sub_100133188(v8, v9, v10);
  uint64_t result = sub_1001331AC(v11, v76, v69);
  *(void *)uint64_t v74 = v80;
  *(void *)(v74 + 8)  = v12;
  *(unsigned char *)(v74 + 16)  = v79;
  *(unsigned char *)(v74 + 17)  = v73;
  *(unsigned char *)(v74 + 18)  = v75;
  *(_WORD *)(v74 + 20)  = v72;
  *(unsigned char *)(v74 + 22)  = v66;
  *(void *)(v74 + 24)  = v7;
  *(void *)(v74 + 32)  = v8;
  *(void *)(v74 + 40)  = v9;
  *(unsigned char *)(v74 + 50)  = BYTE2(v10);
  *(_WORD *)(v74 + 48)  = v10;
  *(void *)(v74 + 56)  = v11;
  *(void *)(v74 + 64)  = v76;
  *(void *)(v74 + 72)  = v69;
  return result;
}

unint64_t sub_100217990()
{
  unint64_t result = qword_1004825B8;
  if (!qword_1004825B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004825B8);
  }
  return result;
}

unint64_t sub_1002179E4()
{
  unint64_t result = qword_1004825C8;
  if (!qword_1004825C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004825C8);
  }
  return result;
}

uint64_t sub_100217A38(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100014434(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100217AA4()
{
  unint64_t result = qword_1004825D8;
  if (!qword_1004825D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004825D8);
  }
  return result;
}

uint64_t sub_100217AF8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100217B28(uint64_t a1)
{
  return a1;
}

unint64_t sub_100217B58()
{
  unint64_t result = qword_1004825E0;
  if (!qword_1004825E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004825E0);
  }
  return result;
}

unint64_t sub_100217BAC()
{
  unint64_t result = qword_100482600;
  if (!qword_100482600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482600);
  }
  return result;
}

uint64_t sub_100217C00(uint64_t a1)
{
  return a1;
}

uint64_t sub_100217C30(uint64_t a1)
{
  return a1;
}

unint64_t sub_100217C60()
{
  unint64_t result = qword_100482610;
  if (!qword_100482610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482610);
  }
  return result;
}

unint64_t sub_100217CB4()
{
  unint64_t result = qword_100482618;
  if (!qword_100482618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482618);
  }
  return result;
}

unint64_t sub_100217D08()
{
  unint64_t result = qword_100482620;
  if (!qword_100482620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482620);
  }
  return result;
}

unint64_t sub_100217D5C()
{
  unint64_t result = qword_100482630;
  if (!qword_100482630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482630);
  }
  return result;
}

unint64_t sub_100217DB0()
{
  unint64_t result = qword_100482638;
  if (!qword_100482638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482638);
  }
  return result;
}

unint64_t sub_100217E04()
{
  unint64_t result = qword_100482648;
  if (!qword_100482648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482648);
  }
  return result;
}

unint64_t sub_100217E58()
{
  unint64_t result = qword_100482658;
  if (!qword_100482658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482658);
  }
  return result;
}

unint64_t sub_100217EAC()
{
  unint64_t result = qword_100482660;
  if (!qword_100482660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482660);
  }
  return result;
}

unint64_t sub_100217F00()
{
  unint64_t result = qword_100482670;
  if (!qword_100482670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482670);
  }
  return result;
}

unint64_t sub_100217F54()
{
  unint64_t result = qword_100482680;
  if (!qword_100482680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482680);
  }
  return result;
}

unint64_t sub_100217FA8()
{
  unint64_t result = qword_100482698;
  if (!qword_100482698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482698);
  }
  return result;
}

unint64_t sub_100217FFC()
{
  unint64_t result = qword_1004826A8;
  if (!qword_1004826A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004826A8);
  }
  return result;
}

unint64_t sub_100218050()
{
  unint64_t result = qword_1004826B8;
  if (!qword_1004826B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004826B8);
  }
  return result;
}

unint64_t sub_1002180A4()
{
  unint64_t result = qword_1004826C8;
  if (!qword_1004826C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004826C8);
  }
  return result;
}

unint64_t sub_1002180F8()
{
  unint64_t result = qword_1004826E0;
  if (!qword_1004826E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004826E0);
  }
  return result;
}

unint64_t sub_10021814C()
{
  unint64_t result = qword_1004826E8;
  if (!qword_1004826E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004826E8);
  }
  return result;
}

unint64_t sub_1002181A0()
{
  unint64_t result = qword_1004826F0;
  if (!qword_1004826F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004826F0);
  }
  return result;
}

unint64_t sub_1002181F4()
{
  unint64_t result = qword_1004826F8;
  if (!qword_1004826F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004826F8);
  }
  return result;
}

unint64_t sub_100218248()
{
  unint64_t result = qword_100482700;
  if (!qword_100482700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482700);
  }
  return result;
}

unint64_t sub_10021829C()
{
  unint64_t result = qword_100482708;
  if (!qword_100482708)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482708);
  }
  return result;
}

unint64_t sub_1002182F0()
{
  unint64_t result = qword_100482718;
  if (!qword_100482718)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482718);
  }
  return result;
}

uint64_t sub_100218344(uint64_t a1)
{
  return a1;
}

uint64_t sub_100218374(uint64_t a1)
{
  return a1;
}

unint64_t sub_1002183A4()
{
  unint64_t result = qword_100482730;
  if (!qword_100482730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482730);
  }
  return result;
}

unint64_t sub_1002183F8()
{
  unint64_t result = qword_100482738;
  if (!qword_100482738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482738);
  }
  return result;
}

unint64_t sub_10021844C()
{
  unint64_t result = qword_100482748;
  if (!qword_100482748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482748);
  }
  return result;
}

uint64_t sub_1002184A0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  char v81 = 1;
  char v80 = 1;
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v2)
  {
    sub_100010754((uint64_t)a1);
    sub_10000C95C(0, 0xF000000000000000);
    return sub_1001331AC(4, 0, 0);
  }
  else
  {
    sub_100039448((uint64_t)v77, v78);
    UnkeyedDecodingContainer.inferredDecode<A>()();
    sub_100039448((uint64_t)v77, v78);
    sub_100010BCC(&qword_100482720);
    sub_10000F9CC(&qword_100483710, &qword_100482720);
    UnkeyedDecodingContainer.inferredDecode<A>()();
    sub_100039448((uint64_t)v77, v78);
    sub_10022EDB0();
    UnkeyedDecodingContainer.inferredDecode<A>()();
    char v72 = v74[0];
    sub_100039448((uint64_t)v77, v78);
    sub_10003FE54();
    UnkeyedDecodingContainer.inferredDecode<A>()();
    char v67 = v74[0];
    v3.i32[0]  = v74[0];
    sub_100039448((uint64_t)v77, v78);
    UnkeyedDecodingContainer.inferredDecode<A>()();
    char v63 = BYTE5(v74[0]);
    char v64 = BYTE4(v74[0]);
    sub_100039448((uint64_t)v77, v78);
    sub_10022F5E4();
    UnkeyedDecodingContainer.inferredDecode<A>()();
    char v52 = v74[0];
    BOOL v70 = (v74[0] & 8) == 0;
    if ((v74[0] & 8) != 0)
    {
      sub_100039448((uint64_t)v77, v78);
      char v7 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
      char v81 = 0;
    }
    else
    {
      char v7 = 0;
    }
    char v51 = v7;
    BOOL v68 = (v74[0] & 0x10) == 0;
    if ((v74[0] & 0x10) != 0)
    {
      sub_100039448((uint64_t)v77, v78);
      dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
      char v50 = v74[0];
      unint64_t v49 = LODWORD(v74[0]) | ((unint64_t)BYTE4(v74[0]) << 32) | ((unint64_t)BYTE5(v74[0]) << 40);
      char v80 = 0;
    }
    else
    {
      char v50 = v74[0];
      unint64_t v49 = 0;
    }
    uint64_t v8 = v78;
    uint64_t v9 = v79;
    sub_100039448((uint64_t)v77, v78);
    uint64_t v10 = (void *)sub_100010BCC(&qword_10047E2D8);
    uint64_t v11 = sub_10000F9CC(&qword_10047E2D0, &qword_10047E2D8);
    uint64_t v12 = UnkeyedDecodingContainer.inferredArrayDecode<A>()(v8, v10, v9, v11);
    char v47 = v74[0];
    uint64_t v13 = *(void *)(v12 + 16);
    if (v13)
    {
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      unint64_t v16 = 0;
      unint64_t v57 = 0;
      uint64_t v58 = 0;
      uint64_t v60 = 0;
      unsigned int v48 = enum case for DecodingError.valueNotFound(_:);
      char v17 = (unint64_t *)(v12 + 48);
      unint64_t v18 = 0xF000000000000000;
      uint64_t v19 = 4;
      unint64_t v59 = 0xF000000000000000;
      while (1)
      {
        uint64_t v69 = *(v17 - 1);
        unint64_t v71 = *v17;
        if (*((unsigned char *)v17 - 16))
        {
          if (*((unsigned char *)v17 - 16) != 1) {
            goto LABEL_17;
          }
          uint64_t v65 = v17;
          uint64_t v66 = v13;
          uint64_t v61 = type metadata accessor for BinaryDecoder();
          uint64_t v21 = (void *)swift_allocObject();
          v21[5]  = &_swiftEmptyDictionarySingleton;
          unsigned char v21[2] = v69;
          v21[3]  = v71;
          uint64_t v22 = 0;
          switch(v71 >> 62)
          {
            case 1uLL:
              uint64_t v23 = v69;
              uint64_t v24 = (int)v69;
              goto LABEL_25;
            case 2uLL:
              uint64_t v23 = v69;
              uint64_t v24 = *(void *)(v69 + 16);
LABEL_25:
              uint64_t v53 = v24;
              sub_100013D44(v23, v71);
              sub_100013D44(v69, v71);
              sub_100013D44(v69, v71);
              uint64_t v22 = v53;
              break;
            default:
              break;
          }
          v21[4]  = v22;
          swift_beginAccess();
          v21[5]  = &_swiftEmptyDictionarySingleton;
          swift_bridgeObjectRelease();
          char v75 = (ValueMetadata *)v61;
          uint64_t v76 = sub_10021A5E0((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
          v74[0]  = v21;
          swift_retain();
          unsigned __int8 v54 = sub_1001B2958(v74);
          uint64_t v55 = v29;
          unint64_t v62 = v30;
          swift_release();
          sub_10000C970(v69, v71);
          sub_10000C970(v69, v71);
          sub_1001331AC(v19, v58, v57);
          uint64_t v19 = v54;
          uint64_t v15 = v55;
          unint64_t v16 = v62;
          unint64_t v57 = v62;
          uint64_t v58 = v55;
        }
        else
        {
          uint64_t v65 = v17;
          uint64_t v66 = v13;
          type metadata accessor for BinaryDecoder();
          unint64_t v25 = (void *)swift_allocObject();
          v25[5]  = &_swiftEmptyDictionarySingleton;
          v25[2]  = v69;
          v25[3]  = v71;
          unint64_t v26 = v25;
          uint64_t v27 = 0;
          switch(v71 >> 62)
          {
            case 1uLL:
              uint64_t v28 = v69;
              uint64_t v27 = (int)v69;
              goto LABEL_28;
            case 2uLL:
              uint64_t v28 = v69;
              uint64_t v27 = *(void *)(v69 + 16);
LABEL_28:
              sub_100013D44(v28, v71);
              break;
            default:
              break;
          }
          v26[4]  = v27;
          swift_beginAccess();
          v26[5]  = &_swiftEmptyDictionarySingleton;
          sub_100013D44(v69, v71);
          swift_bridgeObjectRelease();
          char v75 = &type metadata for BinaryDecoder.UnkeyedContainer;
          unint64_t v31 = sub_10008B64C();
          uint64_t v76 = v31;
          v74[0]  = v26;
          uint64_t v32 = *(void *)sub_100039448((uint64_t)v74, (uint64_t)&type metadata for BinaryDecoder.UnkeyedContainer);
          v73[3]  = &type metadata for BinaryDecoder.UnkeyedContainer;
          v73[4]  = v31;
          v73[0]  = v32;
          uint64_t v33 = sub_100039448((uint64_t)v73, (uint64_t)&type metadata for BinaryDecoder.UnkeyedContainer);
          uint64_t v34 = *(void **)v33;
          uint64_t v35 = *(void *)(*(void *)v33 + 32);
          uint64_t v36 = v35 + 8;
          if (__OFADD__(v35, 8))
          {
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
            JUMPOUT(0x100218F48);
          }
          uint64_t v38 = v34[2];
          unint64_t v37 = v34[3];
          switch(v37 >> 62)
          {
            case 1uLL:
              uint64_t v39 = v38 >> 32;
              goto LABEL_34;
            case 2uLL:
              uint64_t v39 = *(void *)(v38 + 24);
              goto LABEL_34;
            case 3uLL:
              if (v36 >= 1) {
                goto LABEL_13;
              }
              goto LABEL_35;
            default:
              uint64_t v39 = BYTE6(v37);
LABEL_34:
              if (v39 < v36)
              {
LABEL_13:
                sub_10000F000();
                swift_allocError();
                *(void *)uint64_t v20 = 0;
                *(void *)(v20 + 8)  = 0;
                *(unsigned char *)(v20 + 16)  = 2;
                swift_retain_n();
                swift_willThrow();
              }
              else
              {
LABEL_35:
                if (v36 < v35) {
                  goto LABEL_48;
                }
                swift_retain_n();
                swift_retain();
                uint64_t v14 = Data._Representation.subscript.getter();
                unint64_t v18 = v40;
                v34[4]  = v35 + 8;
                swift_release();
                switch(v18 >> 62)
                {
                  case 1uLL:
                    LODWORD(v41)  = HIDWORD(v14) - v14;
                    if (__OFSUB__(HIDWORD(v14), v14)) {
                      goto LABEL_49;
                    }
                    uint64_t v41 = (int)v41;
LABEL_41:
                    if (v41 == 8)
                    {
                      sub_100010754((uint64_t)v73);
                      swift_release();
                      sub_100010754((uint64_t)v74);
                      goto LABEL_15;
                    }
LABEL_43:
                    uint64_t v56 = type metadata accessor for DecodingError();
                    swift_allocError();
                    uint64_t v46 = v45;
                    sub_100010BCC(&qword_10047E090);
                    *uint64_t v46 = &type metadata for Data;
                    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
                    (*(void (**)(void *, void))(*(void *)(v56 - 8) + 104))(v46, v48);
                    swift_willThrow();
                    sub_10000C970(v14, v18);
                    break;
                  case 2uLL:
                    uint64_t v43 = *(void *)(v14 + 16);
                    uint64_t v42 = *(void *)(v14 + 24);
                    BOOL v44 = __OFSUB__(v42, v43);
                    uint64_t v41 = v42 - v43;
                    if (!v44) {
                      goto LABEL_41;
                    }
                    goto LABEL_50;
                  case 3uLL:
                    goto LABEL_43;
                  default:
                    uint64_t v41 = BYTE6(v18);
                    goto LABEL_41;
                }
              }
              sub_100010754((uint64_t)v73);
              swift_release();
              sub_100010754((uint64_t)v74);
              swift_errorRelease();
              uint64_t v14 = 0;
              unint64_t v18 = 0xF000000000000000;
LABEL_15:
              sub_10000C970(v69, v71);
              sub_10000C95C(v60, v59);
              unint64_t v59 = v18;
              uint64_t v60 = v14;
              break;
          }
        }
        char v17 = v65;
        uint64_t v13 = v66;
LABEL_17:
        v17 += 3;
        if (!--v13)
        {
          swift_bridgeObjectRelease();
          BOOL v70 = v81;
          BOOL v68 = v80;
          goto LABEL_46;
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    unint64_t v18 = 0xF000000000000000;
    uint64_t v19 = 4;
LABEL_46:
    sub_100010754((uint64_t)v77);
    sub_100038004(v14, v18);
    sub_10013316C(v19, v15, v16);
    sub_100010754((uint64_t)a1);
    sub_10000C95C(v14, v18);
    uint64_t result = sub_1001331AC(v19, v15, v16);
    *(unsigned char *)a2  = v47;
    *(unsigned char *)(a2 + 1)  = v72;
    *(unsigned char *)(a2 + 2)  = v67;
    *(_DWORD *)(a2 + 3)  = vmovn_s16((int16x8_t)vmovl_u8(v3)).u32[0];
    *(unsigned char *)(a2 + 7)  = v64;
    *(unsigned char *)(a2 + 8)  = v63;
    *(unsigned char *)(a2 + 9)  = v52;
    *(unsigned char *)(a2 + 10)  = v50;
    *(unsigned char *)(a2 + 11)  = v51;
    *(unsigned char *)(a2 + 12)  = v70;
    *(_WORD *)(a2 + 17)  = WORD2(v49);
    *(_DWORD *)(a2 + 13)  = v49;
    *(unsigned char *)(a2 + 19)  = v68;
    *(void *)(a2 + 24)  = v14;
    *(void *)(a2 + 32)  = v18;
    *(void *)(a2 + 40)  = v19;
    *(void *)(a2 + 48)  = v15;
    *(void *)(a2 + 56)  = v16;
  }
  return result;
}

unint64_t sub_100218F88()
{
  unint64_t result = qword_100482750;
  if (!qword_100482750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482750);
  }
  return result;
}

unint64_t sub_100218FDC()
{
  unint64_t result = qword_100482768;
  if (!qword_100482768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482768);
  }
  return result;
}

unint64_t sub_100219030()
{
  unint64_t result = qword_100482770;
  if (!qword_100482770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482770);
  }
  return result;
}

unint64_t sub_100219084()
{
  unint64_t result = qword_100482788;
  if (!qword_100482788)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482788);
  }
  return result;
}

unint64_t sub_1002190D8()
{
  unint64_t result = qword_100482798;
  if (!qword_100482798)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482798);
  }
  return result;
}

unint64_t sub_10021912C()
{
  unint64_t result = qword_1004827A0;
  if (!qword_1004827A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004827A0);
  }
  return result;
}

unint64_t sub_100219180()
{
  unint64_t result = qword_1004827B8;
  if (!qword_1004827B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004827B8);
  }
  return result;
}

unint64_t sub_1002191D4(void *a1)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v1) {
    return sub_100010754((uint64_t)a1);
  }
  sub_100039448((uint64_t)v10, v11);
  UnkeyedDecodingContainer.inferredDecode<A>()();
  sub_100039448((uint64_t)v10, v11);
  sub_100010BCC(&qword_100482800);
  sub_10000F9CC(&qword_100483688, &qword_100482800);
  UnkeyedDecodingContainer.inferredDecode<A>()();
  sub_100039448((uint64_t)v10, v11);
  sub_10022EDB0();
  UnkeyedDecodingContainer.inferredDecode<A>()();
  sub_100039448((uint64_t)v10, v11);
  sub_10022F2F0();
  UnkeyedDecodingContainer.inferredDecode<A>()();
  if ((v9 & 2) != 0)
  {
    sub_100039448((uint64_t)v10, v11);
    sub_100010BCC(&qword_100483698);
    sub_100217A38(&qword_1004836A0, &qword_100483698, (void (*)(void))sub_10022F344);
    UnkeyedDecodingContainer.inferredDecode<A>()();
    unint64_t v4 = (unint64_t)v9 << 32;
  }
  else
  {
    unint64_t v4 = 0;
  }
  if ((v9 & 4) != 0)
  {
    unint64_t v8 = v4;
    uint64_t v5 = v11;
    uint64_t v6 = v12;
    sub_100039448((uint64_t)v10, v11);
    unint64_t v7 = sub_10022EEAC();
    UnkeyedDecodingContainer.inferredArrayDecode<A>()(v5, &type metadata for NANScheduleEntry, v6, v7);
    unint64_t v4 = v8;
  }
  sub_100010754((uint64_t)v10);
  sub_100010754((uint64_t)a1);
  return v9 | ((unint64_t)v9 << 8) | ((unint64_t)v9 << 16) | ((unint64_t)v9 << 24) | v4;
}

void *sub_1002194E4(void *a1)
{
  uint8x8_t v3 = sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (!v1)
  {
    sub_100039448((uint64_t)v6, v7);
    UnkeyedDecodingContainer.inferredDecode<A>()();
    sub_100039448((uint64_t)v6, v7);
    UnkeyedDecodingContainer.inferredDecode<A>()();
    sub_100039448((uint64_t)v6, v7);
    UnkeyedDecodingContainer.inferredDecode<A>()();
    uint8x8_t v3 = (void *)(v5 | (v5 << 8) | (v5 << 16));
    sub_100010754((uint64_t)v6);
  }
  sub_100010754((uint64_t)a1);
  return v3;
}

unint64_t sub_100219658(void *a1)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v1) {
    return sub_100010754((uint64_t)a1);
  }
  sub_100039448((uint64_t)v9, v10);
  UnkeyedDecodingContainer.inferredDecode<A>()();
  uint64_t v3 = v11;
  sub_100039448((uint64_t)v9, v10);
  sub_100010BCC(&qword_1004827C0);
  sub_10000F9CC(&qword_1004836D0, &qword_1004827C0);
  UnkeyedDecodingContainer.inferredDecode<A>()();
  uint64_t v4 = v11;
  sub_100039448((uint64_t)v9, v10);
  sub_10022EDB0();
  UnkeyedDecodingContainer.inferredDecode<A>()();
  uint64_t v5 = v11;
  sub_100039448((uint64_t)v9, v10);
  sub_10022F494();
  UnkeyedDecodingContainer.inferredDecode<A>()();
  uint64_t v7 = v11;
  if (v11)
  {
    sub_100039448((uint64_t)v9, v10);
    unint64_t v8 = (unint64_t)dispatch thunk of UnkeyedDecodingContainer.decode(_:)() << 32;
  }
  else
  {
    unint64_t v8 = 0;
  }
  if ((v7 & 0x10) != 0)
  {
    sub_100039448((uint64_t)v9, v10);
    dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
  }
  sub_100010754((uint64_t)v9);
  swift_bridgeObjectRetain();
  sub_100010754((uint64_t)a1);
  swift_bridgeObjectRelease();
  return v8 | ((unint64_t)((v7 & 1) == 0) << 40) | (v7 << 24) | (v5 << 16) | (v4 << 8) | v3;
}

unint64_t sub_1002199C0()
{
  unint64_t result = qword_1004827D0;
  if (!qword_1004827D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004827D0);
  }
  return result;
}

unint64_t sub_100219A14()
{
  unint64_t result = qword_1004827E0;
  if (!qword_1004827E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004827E0);
  }
  return result;
}

unint64_t sub_100219A68()
{
  unint64_t result = qword_1004827E8;
  if (!qword_1004827E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004827E8);
  }
  return result;
}

unint64_t sub_100219ABC()
{
  unint64_t result = qword_1004827F0;
  if (!qword_1004827F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004827F0);
  }
  return result;
}

unint64_t sub_100219B10()
{
  unint64_t result = qword_1004827F8;
  if (!qword_1004827F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004827F8);
  }
  return result;
}

unint64_t sub_100219B64()
{
  unint64_t result = qword_100482810;
  if (!qword_100482810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482810);
  }
  return result;
}

unint64_t sub_100219BB8()
{
  unint64_t result = qword_100482818;
  if (!qword_100482818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482818);
  }
  return result;
}

unint64_t sub_100219C0C()
{
  unint64_t result = qword_100482828;
  if (!qword_100482828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482828);
  }
  return result;
}

unint64_t sub_100219C60()
{
  unint64_t result = qword_100482830;
  if (!qword_100482830)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482830);
  }
  return result;
}

unint64_t sub_100219CB4()
{
  unint64_t result = qword_100482838;
  if (!qword_100482838)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482838);
  }
  return result;
}

unint64_t sub_100219D08()
{
  unint64_t result = qword_100482848;
  if (!qword_100482848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482848);
  }
  return result;
}

unint64_t sub_100219D5C()
{
  unint64_t result = qword_100482858;
  if (!qword_100482858)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482858);
  }
  return result;
}

unint64_t sub_100219DB0()
{
  unint64_t result = qword_100482868;
  if (!qword_100482868)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482868);
  }
  return result;
}

unint64_t sub_100219E04()
{
  unint64_t result = qword_100482878;
  if (!qword_100482878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482878);
  }
  return result;
}

unint64_t sub_100219E58()
{
  unint64_t result = qword_100482888;
  if (!qword_100482888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482888);
  }
  return result;
}

unint64_t sub_100219EAC()
{
  unint64_t result = qword_1004828A0;
  if (!qword_1004828A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004828A0);
  }
  return result;
}

unint64_t sub_100219F00()
{
  unint64_t result = qword_1004828B0;
  if (!qword_1004828B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004828B0);
  }
  return result;
}

unint64_t sub_100219F54()
{
  unint64_t result = qword_1004828B8;
  if (!qword_1004828B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004828B8);
  }
  return result;
}

unint64_t sub_100219FA8()
{
  unint64_t result = qword_1004828C8;
  if (!qword_1004828C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004828C8);
  }
  return result;
}

unint64_t sub_100219FFC()
{
  unint64_t result = qword_1004828D0;
  if (!qword_1004828D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004828D0);
  }
  return result;
}

unint64_t sub_10021A050()
{
  unint64_t result = qword_1004828E8;
  if (!qword_1004828E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004828E8);
  }
  return result;
}

unint64_t sub_10021A0A4()
{
  unint64_t result = qword_1004828F8;
  if (!qword_1004828F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004828F8);
  }
  return result;
}

unint64_t sub_10021A0F8()
{
  unint64_t result = qword_100482910;
  if (!qword_100482910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482910);
  }
  return result;
}

unint64_t sub_10021A14C()
{
  unint64_t result = qword_100482920;
  if (!qword_100482920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482920);
  }
  return result;
}

unint64_t sub_10021A1A0()
{
  unint64_t result = qword_100482930;
  if (!qword_100482930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482930);
  }
  return result;
}

unint64_t sub_10021A1F4()
{
  unint64_t result = qword_100482938;
  if (!qword_100482938)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482938);
  }
  return result;
}

unint64_t sub_10021A248()
{
  unint64_t result = qword_100482948;
  if (!qword_100482948)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482948);
  }
  return result;
}

unint64_t sub_10021A29C()
{
  unint64_t result = qword_100482958;
  if (!qword_100482958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482958);
  }
  return result;
}

unint64_t sub_10021A2F0()
{
  unint64_t result = qword_100482960;
  if (!qword_100482960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482960);
  }
  return result;
}

uint64_t sub_10021A344(uint64_t a1)
{
  return a1;
}

uint64_t sub_10021A378(uint64_t a1)
{
  return a1;
}

unint64_t sub_10021A3AC()
{
  unint64_t result = qword_100482980;
  if (!qword_100482980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482980);
  }
  return result;
}

uint64_t sub_10021A400(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_10021A45C()
{
  unint64_t result = qword_100482998;
  if (!qword_100482998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482998);
  }
  return result;
}

uint64_t sub_10021A4B0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10021A510(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10021A578(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10021A5E0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10021A628()
{
  unint64_t result = qword_1004829A8;
  if (!qword_1004829A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004829A8);
  }
  return result;
}

unint64_t sub_10021A67C()
{
  unint64_t result = qword_1004829C8;
  if (!qword_1004829C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004829C8);
  }
  return result;
}

uint64_t type metadata accessor for NANAttribute.CustomDeviceInformation(uint64_t a1)
{
  return sub_10000A7D0(a1, qword_1004830C0);
}

uint64_t sub_10021A6F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_10021A754()
{
  unint64_t result = qword_1004829E0;
  if (!qword_1004829E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004829E0);
  }
  return result;
}

unint64_t sub_10021A7A8()
{
  unint64_t result = qword_1004829E8;
  if (!qword_1004829E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004829E8);
  }
  return result;
}

unint64_t sub_10021A7FC()
{
  unint64_t result = qword_1004829F0;
  if (!qword_1004829F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004829F0);
  }
  return result;
}

unint64_t sub_10021A850()
{
  unint64_t result = qword_1004829F8;
  if (!qword_1004829F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004829F8);
  }
  return result;
}

unint64_t sub_10021A8A4()
{
  unint64_t result = qword_100482A10;
  if (!qword_100482A10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482A10);
  }
  return result;
}

unint64_t sub_10021A8F8()
{
  unint64_t result = qword_100482A18;
  if (!qword_100482A18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482A18);
  }
  return result;
}

unint64_t sub_10021A94C()
{
  unint64_t result = qword_100482A20;
  if (!qword_100482A20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482A20);
  }
  return result;
}

unint64_t sub_10021A9A0()
{
  unint64_t result = qword_100482A28;
  if (!qword_100482A28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482A28);
  }
  return result;
}

unint64_t sub_10021A9F4()
{
  unint64_t result = qword_100482A30;
  if (!qword_100482A30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482A30);
  }
  return result;
}

unint64_t sub_10021AA48()
{
  unint64_t result = qword_100482A38;
  if (!qword_100482A38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482A38);
  }
  return result;
}

void *sub_10021AA9C(void *a1, void (*a2)(void, void), void (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  uint64_t v7 = a1[7];
  a2(a1[3], a1[4]);
  a3(v5, v6, v7);
  return a1;
}

void *sub_10021AB00(void *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  a2(a1[2], a1[3]);
  a2(v4, v5);
  return a1;
}

unint64_t sub_10021AB54()
{
  unint64_t result = qword_100482AA0;
  if (!qword_100482AA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482AA0);
  }
  return result;
}

uint64_t sub_10021ABA8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned __int16 *)(a1 + 48) | (*(unsigned __int8 *)(a1 + 50) << 16);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  unint64_t v7 = *(void *)(a1 + 72);
  sub_100013D44(*(void *)a1, *(void *)(a1 + 8));
  swift_bridgeObjectRetain();
  sub_100214CD0(v2, v3, v4);
  sub_10013316C(v5, v6, v7);
  return a1;
}

unint64_t sub_10021AC38()
{
  unint64_t result = qword_100487B50;
  if (!qword_100487B50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100487B50);
  }
  return result;
}

unint64_t sub_10021AC90()
{
  unint64_t result = qword_100482AA8;
  if (!qword_100482AA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482AA8);
  }
  return result;
}

unint64_t sub_10021ACE8()
{
  unint64_t result = qword_100482AB0;
  if (!qword_100482AB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482AB0);
  }
  return result;
}

unint64_t sub_10021AD40()
{
  unint64_t result = qword_100482AB8;
  if (!qword_100482AB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482AB8);
  }
  return result;
}

unint64_t sub_10021AD98()
{
  unint64_t result = qword_100482AC0;
  if (!qword_100482AC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482AC0);
  }
  return result;
}

unint64_t sub_10021ADF0()
{
  unint64_t result = qword_100482AC8;
  if (!qword_100482AC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482AC8);
  }
  return result;
}

unint64_t sub_10021AE48()
{
  unint64_t result = qword_100482AD0;
  if (!qword_100482AD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482AD0);
  }
  return result;
}

unint64_t sub_10021AEA0()
{
  unint64_t result = qword_100482AD8;
  if (!qword_100482AD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482AD8);
  }
  return result;
}

unint64_t sub_10021AEF8()
{
  unint64_t result = qword_100482AE0;
  if (!qword_100482AE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482AE0);
  }
  return result;
}

unint64_t sub_10021AF50()
{
  unint64_t result = qword_100482AE8;
  if (!qword_100482AE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482AE8);
  }
  return result;
}

unint64_t sub_10021AFA8()
{
  unint64_t result = qword_100482AF0;
  if (!qword_100482AF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482AF0);
  }
  return result;
}

unint64_t sub_10021B000()
{
  unint64_t result = qword_100482AF8;
  if (!qword_100482AF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482AF8);
  }
  return result;
}

unint64_t sub_10021B058()
{
  unint64_t result = qword_100482B00;
  if (!qword_100482B00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482B00);
  }
  return result;
}

unint64_t sub_10021B0B0()
{
  unint64_t result = qword_100482B08;
  if (!qword_100482B08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482B08);
  }
  return result;
}

unint64_t sub_10021B108()
{
  unint64_t result = qword_100482B10;
  if (!qword_100482B10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482B10);
  }
  return result;
}

unint64_t sub_10021B160()
{
  unint64_t result = qword_100482B18;
  if (!qword_100482B18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482B18);
  }
  return result;
}

unint64_t sub_10021B1B8()
{
  unint64_t result = qword_100482B20;
  if (!qword_100482B20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482B20);
  }
  return result;
}

unint64_t sub_10021B210()
{
  unint64_t result = qword_100482B28;
  if (!qword_100482B28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482B28);
  }
  return result;
}

unint64_t sub_10021B268()
{
  unint64_t result = qword_100482B30;
  if (!qword_100482B30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482B30);
  }
  return result;
}

unint64_t sub_10021B2C0()
{
  unint64_t result = qword_100482B38;
  if (!qword_100482B38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482B38);
  }
  return result;
}

unint64_t sub_10021B318()
{
  unint64_t result = qword_100482B40;
  if (!qword_100482B40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482B40);
  }
  return result;
}

unint64_t sub_10021B370()
{
  unint64_t result = qword_100482B48;
  if (!qword_100482B48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482B48);
  }
  return result;
}

unint64_t sub_10021B3C8()
{
  unint64_t result = qword_100482B50;
  if (!qword_100482B50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482B50);
  }
  return result;
}

unint64_t sub_10021B420()
{
  unint64_t result = qword_100482B58;
  if (!qword_100482B58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482B58);
  }
  return result;
}

unint64_t sub_10021B478()
{
  unint64_t result = qword_100482B60;
  if (!qword_100482B60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482B60);
  }
  return result;
}

unint64_t sub_10021B4D0()
{
  unint64_t result = qword_100482B68;
  if (!qword_100482B68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482B68);
  }
  return result;
}

unint64_t sub_10021B528()
{
  unint64_t result = qword_100482B70;
  if (!qword_100482B70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482B70);
  }
  return result;
}

unint64_t sub_10021B580()
{
  unint64_t result = qword_100482B78;
  if (!qword_100482B78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482B78);
  }
  return result;
}

unint64_t sub_10021B5D8()
{
  unint64_t result = qword_100482B80;
  if (!qword_100482B80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482B80);
  }
  return result;
}

unint64_t sub_10021B630()
{
  unint64_t result = qword_100482B88;
  if (!qword_100482B88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482B88);
  }
  return result;
}

unint64_t sub_10021B688()
{
  unint64_t result = qword_100482B90;
  if (!qword_100482B90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482B90);
  }
  return result;
}

unint64_t sub_10021B6E0()
{
  unint64_t result = qword_100482B98;
  if (!qword_100482B98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482B98);
  }
  return result;
}

unint64_t sub_10021B738()
{
  unint64_t result = qword_100482BA0;
  if (!qword_100482BA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482BA0);
  }
  return result;
}

unint64_t sub_10021B790()
{
  unint64_t result = qword_100482BA8;
  if (!qword_100482BA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482BA8);
  }
  return result;
}

unint64_t sub_10021B7E8()
{
  unint64_t result = qword_100482BB0;
  if (!qword_100482BB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482BB0);
  }
  return result;
}

unint64_t sub_10021B840()
{
  unint64_t result = qword_100482BB8;
  if (!qword_100482BB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482BB8);
  }
  return result;
}

unint64_t sub_10021B898()
{
  unint64_t result = qword_100482BC0;
  if (!qword_100482BC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482BC0);
  }
  return result;
}

unint64_t sub_10021B8F0()
{
  unint64_t result = qword_100482BC8;
  if (!qword_100482BC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482BC8);
  }
  return result;
}

unint64_t sub_10021B948()
{
  unint64_t result = qword_100482BD0;
  if (!qword_100482BD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482BD0);
  }
  return result;
}

unint64_t sub_10021B9A0()
{
  unint64_t result = qword_100482BD8;
  if (!qword_100482BD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482BD8);
  }
  return result;
}

unint64_t sub_10021B9F8()
{
  unint64_t result = qword_100482BE0;
  if (!qword_100482BE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482BE0);
  }
  return result;
}

unint64_t sub_10021BA50()
{
  unint64_t result = qword_100482BE8;
  if (!qword_100482BE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482BE8);
  }
  return result;
}

unint64_t sub_10021BAA8()
{
  unint64_t result = qword_100482BF0;
  if (!qword_100482BF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482BF0);
  }
  return result;
}

unint64_t sub_10021BB00()
{
  unint64_t result = qword_100482BF8;
  if (!qword_100482BF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482BF8);
  }
  return result;
}

unint64_t sub_10021BB58()
{
  unint64_t result = qword_100482C00;
  if (!qword_100482C00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482C00);
  }
  return result;
}

unint64_t sub_10021BBB0()
{
  unint64_t result = qword_100482C08;
  if (!qword_100482C08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482C08);
  }
  return result;
}

unint64_t sub_10021BC08()
{
  unint64_t result = qword_100482C10;
  if (!qword_100482C10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482C10);
  }
  return result;
}

unint64_t sub_10021BC60()
{
  unint64_t result = qword_100482C18;
  if (!qword_100482C18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482C18);
  }
  return result;
}

unint64_t sub_10021BCB8()
{
  unint64_t result = qword_100482C20;
  if (!qword_100482C20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482C20);
  }
  return result;
}

unint64_t sub_10021BD10()
{
  unint64_t result = qword_100482C28;
  if (!qword_100482C28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482C28);
  }
  return result;
}

unint64_t sub_10021BD68()
{
  unint64_t result = qword_100482C30;
  if (!qword_100482C30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482C30);
  }
  return result;
}

unint64_t sub_10021BDC0()
{
  unint64_t result = qword_100482C38;
  if (!qword_100482C38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482C38);
  }
  return result;
}

unint64_t sub_10021BE18()
{
  unint64_t result = qword_100482C40;
  if (!qword_100482C40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482C40);
  }
  return result;
}

unint64_t sub_10021BE70()
{
  unint64_t result = qword_100482C48;
  if (!qword_100482C48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482C48);
  }
  return result;
}

unint64_t sub_10021BEC4(uint64_t a1)
{
  unint64_t result = sub_10021BEEC();
  *(void *)(a1 + 8)  = result;
  return result;
}

unint64_t sub_10021BEEC()
{
  unint64_t result = qword_100482C50;
  if (!qword_100482C50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482C50);
  }
  return result;
}

unint64_t sub_10021BF44()
{
  unint64_t result = qword_100482C58;
  if (!qword_100482C58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482C58);
  }
  return result;
}

unint64_t sub_10021BF9C()
{
  unint64_t result = qword_100482C60;
  if (!qword_100482C60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482C60);
  }
  return result;
}

unint64_t sub_10021BFF4()
{
  unint64_t result = qword_100482C68;
  if (!qword_100482C68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482C68);
  }
  return result;
}

unint64_t sub_10021C04C()
{
  unint64_t result = qword_100482C70;
  if (!qword_100482C70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482C70);
  }
  return result;
}

unint64_t sub_10021C0A4()
{
  unint64_t result = qword_100482C78;
  if (!qword_100482C78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482C78);
  }
  return result;
}

unint64_t sub_10021C0FC()
{
  unint64_t result = qword_100482C80;
  if (!qword_100482C80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482C80);
  }
  return result;
}

unint64_t sub_10021C154()
{
  unint64_t result = qword_100482C88;
  if (!qword_100482C88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482C88);
  }
  return result;
}

unint64_t sub_10021C1AC()
{
  unint64_t result = qword_100482C90;
  if (!qword_100482C90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482C90);
  }
  return result;
}

unint64_t sub_10021C204()
{
  unint64_t result = qword_100482C98;
  if (!qword_100482C98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482C98);
  }
  return result;
}

unint64_t sub_10021C25C()
{
  unint64_t result = qword_100482CA0;
  if (!qword_100482CA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482CA0);
  }
  return result;
}

unint64_t sub_10021C2B4()
{
  unint64_t result = qword_100482CA8;
  if (!qword_100482CA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482CA8);
  }
  return result;
}

unint64_t sub_10021C30C()
{
  unint64_t result = qword_100482CB0;
  if (!qword_100482CB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482CB0);
  }
  return result;
}

unint64_t sub_10021C364()
{
  unint64_t result = qword_100482CB8;
  if (!qword_100482CB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482CB8);
  }
  return result;
}

unint64_t sub_10021C3BC()
{
  unint64_t result = qword_100482CC0;
  if (!qword_100482CC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482CC0);
  }
  return result;
}

unint64_t sub_10021C414()
{
  unint64_t result = qword_100482CC8;
  if (!qword_100482CC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482CC8);
  }
  return result;
}

unint64_t sub_10021C46C()
{
  unint64_t result = qword_100482CD0;
  if (!qword_100482CD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482CD0);
  }
  return result;
}

unint64_t sub_10021C4C4()
{
  unint64_t result = qword_100482CD8;
  if (!qword_100482CD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482CD8);
  }
  return result;
}

unint64_t sub_10021C51C()
{
  unint64_t result = qword_100482CE0;
  if (!qword_100482CE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482CE0);
  }
  return result;
}

unint64_t sub_10021C574()
{
  unint64_t result = qword_100482CE8;
  if (!qword_100482CE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482CE8);
  }
  return result;
}

unint64_t sub_10021C5CC()
{
  unint64_t result = qword_100482CF0;
  if (!qword_100482CF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482CF0);
  }
  return result;
}

unint64_t sub_10021C624()
{
  unint64_t result = qword_100482CF8;
  if (!qword_100482CF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482CF8);
  }
  return result;
}

unint64_t sub_10021C67C()
{
  unint64_t result = qword_100482D00;
  if (!qword_100482D00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482D00);
  }
  return result;
}

unint64_t sub_10021C6D4()
{
  unint64_t result = qword_100482D08;
  if (!qword_100482D08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482D08);
  }
  return result;
}

unint64_t sub_10021C72C()
{
  unint64_t result = qword_100482D10;
  if (!qword_100482D10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482D10);
  }
  return result;
}

unint64_t sub_10021C784()
{
  unint64_t result = qword_100482D18;
  if (!qword_100482D18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482D18);
  }
  return result;
}

unint64_t sub_10021C7DC()
{
  unint64_t result = qword_100482D20;
  if (!qword_100482D20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482D20);
  }
  return result;
}

unint64_t sub_10021C834()
{
  unint64_t result = qword_100482D28;
  if (!qword_100482D28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482D28);
  }
  return result;
}

unint64_t sub_10021C88C()
{
  unint64_t result = qword_100482D30;
  if (!qword_100482D30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482D30);
  }
  return result;
}

unint64_t sub_10021C8E4()
{
  unint64_t result = qword_100482D38;
  if (!qword_100482D38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482D38);
  }
  return result;
}

unint64_t sub_10021C93C()
{
  unint64_t result = qword_100482D40;
  if (!qword_100482D40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482D40);
  }
  return result;
}

unint64_t sub_10021C994()
{
  unint64_t result = qword_100482D48;
  if (!qword_100482D48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482D48);
  }
  return result;
}

unint64_t sub_10021C9EC()
{
  unint64_t result = qword_100482D50;
  if (!qword_100482D50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482D50);
  }
  return result;
}

unint64_t sub_10021CA44()
{
  unint64_t result = qword_100482D58;
  if (!qword_100482D58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482D58);
  }
  return result;
}

unint64_t sub_10021CA9C()
{
  unint64_t result = qword_100482D60;
  if (!qword_100482D60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482D60);
  }
  return result;
}

unint64_t sub_10021CAF4()
{
  unint64_t result = qword_100482D68;
  if (!qword_100482D68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482D68);
  }
  return result;
}

unint64_t sub_10021CB4C()
{
  unint64_t result = qword_100482D70;
  if (!qword_100482D70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482D70);
  }
  return result;
}

unint64_t sub_10021CBA4()
{
  unint64_t result = qword_100482D78;
  if (!qword_100482D78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482D78);
  }
  return result;
}

unint64_t sub_10021CBFC()
{
  unint64_t result = qword_100482D80;
  if (!qword_100482D80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482D80);
  }
  return result;
}

unint64_t sub_10021CC54()
{
  unint64_t result = qword_100482D88;
  if (!qword_100482D88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482D88);
  }
  return result;
}

unint64_t sub_10021CCAC()
{
  unint64_t result = qword_100482D90;
  if (!qword_100482D90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482D90);
  }
  return result;
}

unint64_t sub_10021CD04()
{
  unint64_t result = qword_100482D98;
  if (!qword_100482D98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482D98);
  }
  return result;
}

unint64_t sub_10021CD5C()
{
  unint64_t result = qword_100482DA0;
  if (!qword_100482DA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482DA0);
  }
  return result;
}

unint64_t sub_10021CDB4()
{
  unint64_t result = qword_100482DA8;
  if (!qword_100482DA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482DA8);
  }
  return result;
}

unint64_t sub_10021CE0C()
{
  unint64_t result = qword_100482DB0;
  if (!qword_100482DB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482DB0);
  }
  return result;
}

unint64_t sub_10021CE64()
{
  unint64_t result = qword_100482DB8;
  if (!qword_100482DB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482DB8);
  }
  return result;
}

unint64_t sub_10021CEBC()
{
  unint64_t result = qword_100482DC0;
  if (!qword_100482DC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482DC0);
  }
  return result;
}

unint64_t sub_10021CF14()
{
  unint64_t result = qword_100482DC8;
  if (!qword_100482DC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482DC8);
  }
  return result;
}

unint64_t sub_10021CF6C()
{
  unint64_t result = qword_100482DD0;
  if (!qword_100482DD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482DD0);
  }
  return result;
}

unint64_t sub_10021CFC4()
{
  unint64_t result = qword_100482DD8;
  if (!qword_100482DD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482DD8);
  }
  return result;
}

unint64_t sub_10021D01C()
{
  unint64_t result = qword_100482DE0;
  if (!qword_100482DE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482DE0);
  }
  return result;
}

unint64_t sub_10021D074()
{
  unint64_t result = qword_100482DE8;
  if (!qword_100482DE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482DE8);
  }
  return result;
}

unint64_t sub_10021D0CC()
{
  unint64_t result = qword_100482DF0;
  if (!qword_100482DF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482DF0);
  }
  return result;
}

unint64_t sub_10021D124()
{
  unint64_t result = qword_100482DF8;
  if (!qword_100482DF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482DF8);
  }
  return result;
}

unint64_t sub_10021D17C()
{
  unint64_t result = qword_100482E00;
  if (!qword_100482E00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482E00);
  }
  return result;
}

unint64_t sub_10021D1D4()
{
  unint64_t result = qword_100482E08;
  if (!qword_100482E08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482E08);
  }
  return result;
}

unint64_t sub_10021D22C()
{
  unint64_t result = qword_100482E10;
  if (!qword_100482E10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482E10);
  }
  return result;
}

unint64_t sub_10021D284()
{
  unint64_t result = qword_100482E18;
  if (!qword_100482E18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482E18);
  }
  return result;
}

unint64_t sub_10021D2DC()
{
  unint64_t result = qword_100482E20;
  if (!qword_100482E20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482E20);
  }
  return result;
}

unint64_t sub_10021D334()
{
  unint64_t result = qword_100482E28;
  if (!qword_100482E28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482E28);
  }
  return result;
}

unint64_t sub_10021D38C()
{
  unint64_t result = qword_100482E30;
  if (!qword_100482E30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482E30);
  }
  return result;
}

unint64_t sub_10021D3E4()
{
  unint64_t result = qword_100482E38;
  if (!qword_100482E38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482E38);
  }
  return result;
}

unint64_t sub_10021D43C()
{
  unint64_t result = qword_100482E40;
  if (!qword_100482E40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482E40);
  }
  return result;
}

unint64_t sub_10021D494()
{
  unint64_t result = qword_100482E48;
  if (!qword_100482E48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482E48);
  }
  return result;
}

unint64_t sub_10021D4EC()
{
  unint64_t result = qword_100482E50;
  if (!qword_100482E50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482E50);
  }
  return result;
}

unint64_t sub_10021D544()
{
  unint64_t result = qword_100482E58;
  if (!qword_100482E58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482E58);
  }
  return result;
}

unint64_t sub_10021D59C()
{
  unint64_t result = qword_100482E60;
  if (!qword_100482E60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482E60);
  }
  return result;
}

unint64_t sub_10021D5F4()
{
  unint64_t result = qword_100482E68;
  if (!qword_100482E68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482E68);
  }
  return result;
}

unint64_t sub_10021D64C()
{
  unint64_t result = qword_100482E70;
  if (!qword_100482E70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482E70);
  }
  return result;
}

unint64_t sub_10021D6A4()
{
  unint64_t result = qword_100482E78;
  if (!qword_100482E78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482E78);
  }
  return result;
}

unint64_t sub_10021D6FC()
{
  unint64_t result = qword_100482E80;
  if (!qword_100482E80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482E80);
  }
  return result;
}

unint64_t sub_10021D754()
{
  unint64_t result = qword_100482E88;
  if (!qword_100482E88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482E88);
  }
  return result;
}

unint64_t sub_10021D7AC()
{
  unint64_t result = qword_100482E90;
  if (!qword_100482E90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482E90);
  }
  return result;
}

unint64_t sub_10021D804()
{
  unint64_t result = qword_100482E98;
  if (!qword_100482E98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482E98);
  }
  return result;
}

unint64_t sub_10021D85C()
{
  unint64_t result = qword_100482EA0;
  if (!qword_100482EA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482EA0);
  }
  return result;
}

unint64_t sub_10021D8B4()
{
  unint64_t result = qword_100482EA8;
  if (!qword_100482EA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482EA8);
  }
  return result;
}

unint64_t sub_10021D90C()
{
  unint64_t result = qword_100482EB0;
  if (!qword_100482EB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482EB0);
  }
  return result;
}

unint64_t sub_10021D964()
{
  unint64_t result = qword_100482EB8;
  if (!qword_100482EB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482EB8);
  }
  return result;
}

unint64_t sub_10021D9BC()
{
  unint64_t result = qword_100482EC0;
  if (!qword_100482EC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482EC0);
  }
  return result;
}

unint64_t sub_10021DA14()
{
  unint64_t result = qword_100482EC8;
  if (!qword_100482EC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482EC8);
  }
  return result;
}

unint64_t sub_10021DA6C()
{
  unint64_t result = qword_100482ED0;
  if (!qword_100482ED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482ED0);
  }
  return result;
}

unint64_t sub_10021DAC4()
{
  unint64_t result = qword_100482ED8;
  if (!qword_100482ED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482ED8);
  }
  return result;
}

unint64_t sub_10021DB1C()
{
  unint64_t result = qword_100482EE0;
  if (!qword_100482EE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482EE0);
  }
  return result;
}

unint64_t sub_10021DB74()
{
  unint64_t result = qword_100482EE8;
  if (!qword_100482EE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482EE8);
  }
  return result;
}

unint64_t sub_10021DBCC()
{
  unint64_t result = qword_100482EF0;
  if (!qword_100482EF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482EF0);
  }
  return result;
}

unint64_t sub_10021DC24()
{
  unint64_t result = qword_100482EF8;
  if (!qword_100482EF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482EF8);
  }
  return result;
}

unint64_t sub_10021DC7C()
{
  unint64_t result = qword_100482F00;
  if (!qword_100482F00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482F00);
  }
  return result;
}

unint64_t sub_10021DCD4()
{
  unint64_t result = qword_100482F08;
  if (!qword_100482F08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482F08);
  }
  return result;
}

unint64_t sub_10021DD2C()
{
  unint64_t result = qword_100482F10;
  if (!qword_100482F10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482F10);
  }
  return result;
}

unint64_t sub_10021DD84()
{
  unint64_t result = qword_100482F18;
  if (!qword_100482F18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482F18);
  }
  return result;
}

unint64_t sub_10021DDDC()
{
  unint64_t result = qword_100482F20;
  if (!qword_100482F20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482F20);
  }
  return result;
}

unint64_t sub_10021DE34()
{
  unint64_t result = qword_100482F28;
  if (!qword_100482F28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482F28);
  }
  return result;
}

unint64_t sub_10021DE8C()
{
  unint64_t result = qword_100482F30;
  if (!qword_100482F30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482F30);
  }
  return result;
}

unint64_t sub_10021DEE4()
{
  unint64_t result = qword_100482F38;
  if (!qword_100482F38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482F38);
  }
  return result;
}

unint64_t sub_10021DF3C()
{
  unint64_t result = qword_100482F40;
  if (!qword_100482F40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482F40);
  }
  return result;
}

unint64_t sub_10021DF94()
{
  unint64_t result = qword_100482F48;
  if (!qword_100482F48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482F48);
  }
  return result;
}

unint64_t sub_10021DFEC()
{
  unint64_t result = qword_100482F50;
  if (!qword_100482F50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482F50);
  }
  return result;
}

unint64_t sub_10021E044()
{
  unint64_t result = qword_100482F58;
  if (!qword_100482F58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482F58);
  }
  return result;
}

unint64_t sub_10021E09C()
{
  unint64_t result = qword_100482F60;
  if (!qword_100482F60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482F60);
  }
  return result;
}

uint64_t sub_10021E0F0()
{
  return sub_10021A5E0(&qword_100482F68, (void (*)(uint64_t))type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
}

unint64_t sub_10021E13C()
{
  unint64_t result = qword_100482F70;
  if (!qword_100482F70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482F70);
  }
  return result;
}

unint64_t sub_10021E194()
{
  unint64_t result = qword_100482F78;
  if (!qword_100482F78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482F78);
  }
  return result;
}

unint64_t sub_10021E1EC()
{
  unint64_t result = qword_100482F80;
  if (!qword_100482F80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482F80);
  }
  return result;
}

unint64_t sub_10021E244()
{
  unint64_t result = qword_100482F88;
  if (!qword_100482F88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482F88);
  }
  return result;
}

unint64_t sub_10021E29C()
{
  unint64_t result = qword_100482F90;
  if (!qword_100482F90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482F90);
  }
  return result;
}

unint64_t sub_10021E2F4()
{
  unint64_t result = qword_100482F98;
  if (!qword_100482F98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482F98);
  }
  return result;
}

uint64_t sub_10021E348()
{
  return sub_10021A5E0(&qword_100482FA0, (void (*)(uint64_t))type metadata accessor for NANAttribute.CustomDeviceInformation);
}

unint64_t sub_10021E394()
{
  unint64_t result = qword_100482FA8;
  if (!qword_100482FA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100482FA8);
  }
  return result;
}

uint64_t sub_10021E3E8()
{
  return sub_10021A5E0(&qword_100482FB0, (void (*)(uint64_t))type metadata accessor for NANAttribute);
}

char *initializeBufferWithCopyOfBuffer for NANAttribute(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *(void *)a2;
    *(void *)a1  = *(void *)a2;
    a1  = (char *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
      case 0x18u:
      case 0x1Fu:
      case 0x22u:
      case 0x23u:
      case 0x25u:
        *(void *)a1  = *(void *)a2;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 3u:
        uint64_t v9 = *(void *)a2;
        unint64_t v10 = *((void *)a2 + 1);
        sub_100013D44(*(void *)a2, v10);
        *(void *)a1  = v9;
        *((void *)a1 + 1)  = v10;
        a1[16]  = a2[16];
        *(_WORD *)(a1 + 17)  = *(_WORD *)(a2 + 17);
        *((_WORD *)a1 + 10)  = *((_WORD *)a2 + 10);
        a1[22]  = a2[22];
        *((void *)a1 + 3)  = *((void *)a2 + 3);
        unsigned __int8 v11 = a2[50];
        int v12 = *((unsigned __int16 *)a2 + 24);
        swift_bridgeObjectRetain();
        if (v11 == 255)
        {
          *((_OWORD *)a1 + 2)  = *((_OWORD *)a2 + 2);
          *(_DWORD *)(a1 + 47)  = *(_DWORD *)(a2 + 47);
        }
        else
        {
          uint64_t v59 = v12 & 0xFF00FFFF | (v11 << 16);
          uint64_t v60 = *((void *)a2 + 4);
          unint64_t v61 = *((void *)a2 + 5);
          sub_100214CE8(v60, v61, v59, BYTE2(v59) & 1);
          *((void *)a1 + 4)  = v60;
          *((void *)a1 + 5)  = v61;
          *((_WORD *)a1 + 24)  = v59;
          a1[50]  = BYTE2(v59) & 1;
        }
        uint64_t v62 = a2[56];
        if (v62 == 4)
        {
          *(_OWORD *)(a1 + 56)  = *(_OWORD *)(a2 + 56);
          *((void *)a1 + 9)  = *((void *)a2 + 9);
        }
        else
        {
          a1[56]  = v62;
          uint64_t v71 = *((void *)a2 + 8);
          unint64_t v70 = *((void *)a2 + 9);
          sub_100013D44(v71, v70);
          *((void *)a1 + 8)  = v71;
          *((void *)a1 + 9)  = v70;
        }
        goto LABEL_48;
      case 5u:
        *(_DWORD *)a1  = *(_DWORD *)a2;
        *((_WORD *)a1 + 2)  = *((_WORD *)a2 + 2);
        *(_DWORD *)(a1 + 6)  = *(_DWORD *)(a2 + 6);
        *((_WORD *)a1 + 5)  = *((_WORD *)a2 + 5);
        a1[16]  = a2[16];
        *(_WORD *)(a1 + 17)  = *(_WORD *)(a2 + 17);
        uint64_t v13 = *((void *)a2 + 3);
        unint64_t v14 = *((void *)a2 + 4);
        sub_100013D44(v13, v14);
        *((void *)a1 + 3)  = v13;
        *((void *)a1 + 4)  = v14;
        a1[40]  = a2[40];
        swift_storeEnumTagMultiPayload();
        return a1;
      case 6u:
        *a1  = *a2;
        *(_DWORD *)(a1 + 1)  = *(_DWORD *)(a2 + 1);
        *(_WORD *)(a1 + 5)  = *(_WORD *)(a2 + 5);
        a1[8]  = a2[8];
        *(_WORD *)(a1 + 9)  = *(_WORD *)(a2 + 9);
        uint64_t v16 = *((void *)a2 + 2);
        unint64_t v15 = *((void *)a2 + 3);
        sub_100013D44(v16, v15);
        *((void *)a1 + 2)  = v16;
        *((void *)a1 + 3)  = v15;
        swift_storeEnumTagMultiPayload();
        return a1;
      case 7u:
        *(_DWORD *)a1  = *(_DWORD *)a2;
        *((_WORD *)a1 + 2)  = *((_WORD *)a2 + 2);
        *(_DWORD *)(a1 + 6)  = *(_DWORD *)(a2 + 6);
        *((_WORD *)a1 + 5)  = *((_WORD *)a2 + 5);
        a1[16]  = a2[16];
        *(_WORD *)(a1 + 17)  = *(_WORD *)(a2 + 17);
        uint64_t v18 = *((void *)a2 + 3);
        unint64_t v17 = *((void *)a2 + 4);
        sub_100013D44(v18, v17);
        *((void *)a1 + 3)  = v18;
        *((void *)a1 + 4)  = v17;
        swift_storeEnumTagMultiPayload();
        return a1;
      case 8u:
        *(_DWORD *)a1  = *(_DWORD *)a2;
        *((_WORD *)a1 + 2)  = *((_WORD *)a2 + 2);
        a1[8]  = a2[8];
        *(_WORD *)(a1 + 9)  = *(_WORD *)(a2 + 9);
        uint64_t v19 = *((void *)a2 + 2);
        unint64_t v20 = *((void *)a2 + 3);
        sub_100013D44(v19, v20);
        *((void *)a1 + 2)  = v19;
        *((void *)a1 + 3)  = v20;
        uint64_t v22 = *((void *)a2 + 4);
        unint64_t v21 = *((void *)a2 + 5);
        sub_100013D44(v22, v21);
        *((void *)a1 + 4)  = v22;
        *((void *)a1 + 5)  = v21;
        swift_storeEnumTagMultiPayload();
        return a1;
      case 9u:
        *a1  = *a2;
        *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
        uint64_t v24 = *((void *)a2 + 1);
        unint64_t v23 = *((void *)a2 + 2);
        sub_100013D44(v24, v23);
        *((void *)a1 + 1)  = v24;
        *((void *)a1 + 2)  = v23;
        swift_storeEnumTagMultiPayload();
        return a1;
      case 0xAu:
      case 0x1Eu:
        *a1  = *a2;
        *((void *)a1 + 1)  = *((void *)a2 + 1);
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 0xCu:
        *(_DWORD *)a1  = *(_DWORD *)a2;
        *((_WORD *)a1 + 2)  = *((_WORD *)a2 + 2);
        uint64_t v26 = *((void *)a2 + 1);
        unint64_t v25 = *((void *)a2 + 2);
        sub_100013D44(v26, v25);
        *((void *)a1 + 1)  = v26;
        *((void *)a1 + 2)  = v25;
        swift_storeEnumTagMultiPayload();
        return a1;
      case 0xEu:
        *a1  = *a2;
        *((_WORD *)a1 + 1)  = *((_WORD *)a2 + 1);
        *((_DWORD *)a1 + 1)  = *((_DWORD *)a2 + 1);
        a1[8]  = a2[8];
        *(_WORD *)(a1 + 9)  = *(_WORD *)(a2 + 9);
        uint64_t v27 = a2[16];
        if (v27 == 4)
        {
          *((_OWORD *)a1 + 1)  = *((_OWORD *)a2 + 1);
          *((void *)a1 + 4)  = *((void *)a2 + 4);
        }
        else
        {
          a1[16]  = v27;
          uint64_t v64 = *((void *)a2 + 3);
          unint64_t v63 = *((void *)a2 + 4);
          sub_100013D44(v64, v63);
          *((void *)a1 + 3)  = v64;
          *((void *)a1 + 4)  = v63;
        }
        goto LABEL_48;
      case 0x10u:
        *a1  = *a2;
        *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
        *(_DWORD *)(a1 + 3)  = *(_DWORD *)(a2 + 3);
        *(_WORD *)(a1 + 7)  = *(_WORD *)(a2 + 7);
        *(_DWORD *)(a1 + 9)  = *(_DWORD *)(a2 + 9);
        *((_DWORD *)a1 + 4)  = *((_DWORD *)a2 + 4);
        *(_DWORD *)(a1 + 13)  = *(_DWORD *)(a2 + 13);
        uint64_t v28 = a2[24];
        if (v28 == 4)
        {
          *(_OWORD *)(a1 + 24)  = *(_OWORD *)(a2 + 24);
          *((void *)a1 + 5)  = *((void *)a2 + 5);
        }
        else
        {
          a1[24]  = v28;
          uint64_t v66 = *((void *)a2 + 4);
          unint64_t v65 = *((void *)a2 + 5);
          sub_100013D44(v66, v65);
          *((void *)a1 + 4)  = v66;
          *((void *)a1 + 5)  = v65;
        }
        goto LABEL_48;
      case 0x11u:
        *a1  = *a2;
        *((_WORD *)a1 + 1)  = *((_WORD *)a2 + 1);
        *((void *)a1 + 1)  = *((void *)a2 + 1);
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 0x12u:
        *(_DWORD *)a1  = *(_DWORD *)a2;
        *((_WORD *)a1 + 2)  = *((_WORD *)a2 + 2);
        a1[6]  = a2[6];
        *((void *)a1 + 1)  = *((void *)a2 + 1);
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 0x13u:
        *(_DWORD *)a1  = *(_DWORD *)a2;
        *((_WORD *)a1 + 2)  = *((_WORD *)a2 + 2);
        *((void *)a1 + 1)  = *((void *)a2 + 1);
        a1[16]  = a2[16];
        *((void *)a1 + 3)  = *((void *)a2 + 3);
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 0x17u:
        int v29 = *((_DWORD *)a2 + 1);
        *(_DWORD *)a1  = *(_DWORD *)a2;
        *((_DWORD *)a1 + 1)  = v29;
        a1[8]  = a2[8];
        *((void *)a1 + 2)  = *((void *)a2 + 2);
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 0x19u:
        *(_WORD *)a1  = *(_WORD *)a2;
        uint64_t v31 = *((void *)a2 + 1);
        unint64_t v30 = *((void *)a2 + 2);
        sub_100013D44(v31, v30);
        *((void *)a1 + 1)  = v31;
        *((void *)a1 + 2)  = v30;
        swift_storeEnumTagMultiPayload();
        return a1;
      case 0x1Du:
        int v32 = *((_DWORD *)a2 + 1);
        *(_DWORD *)a1  = *(_DWORD *)a2;
        *((_DWORD *)a1 + 1)  = v32;
        a1[8]  = a2[8];
        *(_DWORD *)(a1 + 10)  = *(_DWORD *)(a2 + 10);
        uint64_t v34 = *((void *)a2 + 2);
        unint64_t v33 = *((void *)a2 + 3);
        sub_100013D44(v34, v33);
        *((void *)a1 + 2)  = v34;
        *((void *)a1 + 3)  = v33;
        swift_storeEnumTagMultiPayload();
        return a1;
      case 0x20u:
      case 0x2Au:
        *a1  = *a2;
        uint64_t v36 = *((void *)a2 + 1);
        unint64_t v35 = *((void *)a2 + 2);
        sub_100013D44(v36, v35);
        *((void *)a1 + 1)  = v36;
        *((void *)a1 + 2)  = v35;
        swift_storeEnumTagMultiPayload();
        return a1;
      case 0x21u:
        *(_OWORD *)a1  = *(_OWORD *)a2;
        *((_WORD *)a1 + 8)  = *((_WORD *)a2 + 8);
        a1[18]  = a2[18];
        *((void *)a1 + 3)  = *((void *)a2 + 3);
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 0x24u:
        *a1  = *a2;
        *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
        *(_DWORD *)(a1 + 3)  = *(_DWORD *)(a2 + 3);
        *(_WORD *)(a1 + 7)  = *(_WORD *)(a2 + 7);
        *(_DWORD *)(a1 + 9)  = *(_DWORD *)(a2 + 9);
        *((_DWORD *)a1 + 4)  = *((_DWORD *)a2 + 4);
        unint64_t v37 = (uint64_t *)(a2 + 24);
        *(_DWORD *)(a1 + 13)  = *(_DWORD *)(a2 + 13);
        unint64_t v38 = *((void *)a2 + 4);
        if (v38 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 24)  = *(_OWORD *)v37;
        }
        else
        {
          uint64_t v67 = *v37;
          sub_100013D44(*v37, *((void *)a2 + 4));
          *((void *)a1 + 3)  = v67;
          *((void *)a1 + 4)  = v38;
        }
        uint64_t v68 = a2[40];
        if (v68 == 4)
        {
          *(_OWORD *)(a1 + 40)  = *(_OWORD *)(a2 + 40);
          *((void *)a1 + 7)  = *((void *)a2 + 7);
        }
        else
        {
          a1[40]  = v68;
          uint64_t v73 = *((void *)a2 + 6);
          unint64_t v72 = *((void *)a2 + 7);
          sub_100013D44(v73, v72);
          *((void *)a1 + 6)  = v73;
          *((void *)a1 + 7)  = v72;
        }
LABEL_48:
        swift_storeEnumTagMultiPayload();
        break;
      case 0x26u:
        uint64_t v39 = *(void *)a2;
        unint64_t v40 = *((void *)a2 + 1);
        sub_100013D44(*(void *)a2, v40);
        *(void *)a1  = v39;
        *((void *)a1 + 1)  = v40;
        uint64_t v42 = *((void *)a2 + 2);
        unint64_t v41 = *((void *)a2 + 3);
        sub_100013D44(v42, v41);
        *((void *)a1 + 2)  = v42;
        *((void *)a1 + 3)  = v41;
        swift_storeEnumTagMultiPayload();
        break;
      case 0x27u:
        *a1  = *a2;
        *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
        uint64_t v43 = a1 + 8;
        BOOL v44 = a2 + 8;
        unint64_t v45 = *((void *)a2 + 4);
        if (v45 >> 60 == 15)
        {
          long long v46 = *(_OWORD *)(a2 + 24);
          *uint64_t v43 = *v44;
          *(_OWORD *)(a1 + 24)  = v46;
        }
        else
        {
          *(void *)uint64_t v43 = *(void *)v44;
          a1[16]  = a2[16];
          uint64_t v69 = *((void *)a2 + 3);
          sub_100013D44(v69, v45);
          *((void *)a1 + 3)  = v69;
          *((void *)a1 + 4)  = v45;
        }
        *((_WORD *)a1 + 20)  = *((_WORD *)a2 + 20);
        swift_storeEnumTagMultiPayload();
        break;
      case 0x28u:
        *(_WORD *)a1  = *(_WORD *)a2;
        *((_DWORD *)a1 + 1)  = *((_DWORD *)a2 + 1);
        uint64_t v47 = *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation(0) + 28);
        unsigned int v48 = &a1[v47];
        unint64_t v49 = &a2[v47];
        *unsigned int v48 = a2[v47];
        *(_WORD *)(v48 + 1)  = *(_WORD *)&a2[v47 + 1];
        char v50 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
        uint64_t v51 = v50[6];
        char v52 = &v48[v51];
        uint64_t v53 = &v49[v51];
        uint64_t v54 = type metadata accessor for P256.KeyAgreement.PublicKey();
        uint64_t v55 = *(void *)(v54 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
        {
          uint64_t v56 = sub_100010BCC((uint64_t *)&unk_1004852B0);
          memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v52, v53, v54);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
        }
        uint64_t v74 = v50[7];
        char v75 = &v48[v74];
        uint64_t v76 = (uint64_t *)&v49[v74];
        unint64_t v77 = v76[1];
        if (v77 >> 60 == 15)
        {
          *(_OWORD *)char v75 = *(_OWORD *)v76;
        }
        else
        {
          uint64_t v78 = *v76;
          sub_100013D44(*v76, v76[1]);
          *(void *)char v75 = v78;
          *((void *)v75 + 1)  = v77;
        }
        uint64_t v79 = v50[8];
        char v80 = &v48[v79];
        char v81 = (uint64_t *)&v49[v79];
        unint64_t v82 = v81[1];
        if (v82 >> 60 == 15)
        {
          *(_OWORD *)char v80 = *(_OWORD *)v81;
        }
        else
        {
          uint64_t v83 = *v81;
          sub_100013D44(*v81, v81[1]);
          *(void *)char v80 = v83;
          *((void *)v80 + 1)  = v82;
        }
        uint64_t v84 = v50[9];
        uint64_t v85 = &v48[v84];
        unint64_t v86 = (uint64_t *)&v49[v84];
        unint64_t v87 = v86[1];
        if (v87 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v85 = *(_OWORD *)v86;
        }
        else
        {
          uint64_t v88 = *v86;
          sub_100013D44(*v86, v86[1]);
          *(void *)uint64_t v85 = v88;
          *((void *)v85 + 1)  = v87;
        }
        uint64_t v89 = v50[10];
        uint64_t v90 = &v48[v89];
        uint64_t v91 = &v49[v89];
        uint64_t v92 = type metadata accessor for UUID();
        uint64_t v93 = *(void *)(v92 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48))(v91, 1, v92))
        {
          uint64_t v94 = sub_100010BCC(&qword_1004862B0);
          memcpy(v90, v91, *(void *)(*(void *)(v94 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v93 + 16))(v90, v91, v92);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v93 + 56))(v90, 0, 1, v92);
        }
        *(void *)&v48[v50[11]]  = *(void *)&v49[v50[11]];
        uint64_t v95 = v50[12];
        unint64_t v105 = v50;
        long long __dst = &v48[v95];
        unint64_t v96 = &v49[v95];
        uint64_t v97 = type metadata accessor for NANInternetSharingStatistics.Requester();
        uint64_t v98 = *(void *)(v97 - 8);
        uint64_t v99 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v98 + 48);
        swift_bridgeObjectRetain();
        if (v99(v96, 1, v97))
        {
          uint64_t v100 = sub_100010BCC((uint64_t *)&unk_100485B60);
          memcpy(__dst, v96, *(void *)(*(void *)(v100 - 8) + 64));
        }
        else
        {
          uint64_t v101 = type metadata accessor for DispatchTimeInterval();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v101 - 8) + 16))(__dst, v96, v101);
          __dst[*(int *)(v97 + 20)]  = v96[*(int *)(v97 + 20)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v98 + 56))(__dst, 0, 1, v97);
        }
        uint64_t v102 = v105[13];
        uint64_t v103 = &v48[v102];
        uint64_t v104 = &v49[v102];
        *(_OWORD *)uint64_t v103 = *(_OWORD *)v104;
        *(_OWORD *)(v103 + 9)  = *(_OWORD *)(v104 + 9);
        swift_storeEnumTagMultiPayload();
        break;
      case 0x29u:
        *(_WORD *)a1  = *(_WORD *)a2;
        a1[2]  = a2[2];
        uint64_t v58 = *((void *)a2 + 1);
        unint64_t v57 = *((void *)a2 + 2);
        sub_100013D44(v58, v57);
        *((void *)a1 + 1)  = v58;
        *((void *)a1 + 2)  = v57;
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for NANAttribute(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 2:
    case 10:
    case 17:
    case 18:
    case 19:
    case 23:
    case 24:
    case 30:
    case 31:
    case 33:
    case 34:
    case 35:
    case 37:
      return swift_bridgeObjectRelease();
    case 3:
      sub_10000C970(*(void *)a1, *(void *)(a1 + 8));
      uint64_t result = swift_bridgeObjectRelease();
      if (*(unsigned __int8 *)(a1 + 50) != 255)
      {
        uint64_t v5 = *(unsigned __int16 *)(a1 + 48) | (*(unsigned __int8 *)(a1 + 50) << 16);
        uint64_t result = sub_1001331A0(*(void *)(a1 + 32), *(void *)(a1 + 40), v5, BYTE2(v5) & 1);
      }
      if (*(unsigned char *)(a1 + 56) != 4)
      {
        uint64_t v3 = *(void *)(a1 + 64);
        unint64_t v4 = *(void *)(a1 + 72);
        break;
      }
      return result;
    case 5:
    case 7:
      goto LABEL_9;
    case 6:
    case 29:
      goto LABEL_20;
    case 8:
      sub_10000C970(*(void *)(a1 + 16), *(void *)(a1 + 24));
      goto LABEL_11;
    case 9:
    case 12:
    case 25:
    case 32:
    case 41:
    case 42:
      uint64_t v3 = *(void *)(a1 + 8);
      unint64_t v4 = *(void *)(a1 + 16);
      break;
    case 14:
      if (*(unsigned char *)(a1 + 16) == 4) {
        return result;
      }
LABEL_9:
      uint64_t v3 = *(void *)(a1 + 24);
      unint64_t v4 = *(void *)(a1 + 32);
      break;
    case 16:
      if (*(unsigned char *)(a1 + 24) == 4) {
        return result;
      }
LABEL_11:
      uint64_t v3 = *(void *)(a1 + 32);
      unint64_t v4 = *(void *)(a1 + 40);
      break;
    case 36:
      unint64_t v6 = *(void *)(a1 + 32);
      if (v6 >> 60 != 15) {
        uint64_t result = sub_10000C970(*(void *)(a1 + 24), v6);
      }
      if (*(unsigned char *)(a1 + 40) == 4) {
        return result;
      }
      uint64_t v3 = *(void *)(a1 + 48);
      unint64_t v4 = *(void *)(a1 + 56);
      break;
    case 38:
      sub_10000C970(*(void *)a1, *(void *)(a1 + 8));
LABEL_20:
      uint64_t v3 = *(void *)(a1 + 16);
      unint64_t v4 = *(void *)(a1 + 24);
      break;
    case 39:
      unint64_t v4 = *(void *)(a1 + 32);
      if (v4 >> 60 == 15) {
        return result;
      }
      uint64_t v3 = *(void *)(a1 + 24);
      break;
    case 40:
      uint64_t v7 = a1 + *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation(0) + 28);
      unint64_t v8 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
      uint64_t v9 = v7 + v8[6];
      uint64_t v10 = type metadata accessor for P256.KeyAgreement.PublicKey();
      uint64_t v11 = *(void *)(v10 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
      }
      int v12 = (uint64_t *)(v7 + v8[7]);
      unint64_t v13 = v12[1];
      if (v13 >> 60 != 15) {
        sub_10000C970(*v12, v13);
      }
      unint64_t v14 = (uint64_t *)(v7 + v8[8]);
      unint64_t v15 = v14[1];
      if (v15 >> 60 != 15) {
        sub_10000C970(*v14, v15);
      }
      uint64_t v16 = (uint64_t *)(v7 + v8[9]);
      unint64_t v17 = v16[1];
      if (v17 >> 60 != 15) {
        sub_10000C970(*v16, v17);
      }
      uint64_t v18 = v7 + v8[10];
      uint64_t v19 = type metadata accessor for UUID();
      uint64_t v20 = *(void *)(v19 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19)) {
        (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
      }
      swift_bridgeObjectRelease();
      uint64_t v21 = v7 + v8[12];
      uint64_t v22 = type metadata accessor for NANInternetSharingStatistics.Requester();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48))(v21, 1, v22);
      if (!result)
      {
        uint64_t v23 = type metadata accessor for DispatchTimeInterval();
        uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8);
        return v24(v21, v23);
      }
      return result;
    default:
      return result;
  }

  return sub_10000C970(v3, v4);
}

char *initializeWithCopy for NANAttribute(char *a1, char *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
    case 0x18u:
    case 0x1Fu:
    case 0x22u:
    case 0x23u:
    case 0x25u:
      *(void *)a1  = *(void *)a2;
      swift_bridgeObjectRetain();
      goto LABEL_62;
    case 3u:
      uint64_t v6 = *(void *)a2;
      unint64_t v7 = *((void *)a2 + 1);
      sub_100013D44(*(void *)a2, v7);
      *(void *)a1  = v6;
      *((void *)a1 + 1)  = v7;
      a1[16]  = a2[16];
      *(_WORD *)(a1 + 17)  = *(_WORD *)(a2 + 17);
      *((_WORD *)a1 + 10)  = *((_WORD *)a2 + 10);
      a1[22]  = a2[22];
      *((void *)a1 + 3)  = *((void *)a2 + 3);
      unsigned __int8 v8 = a2[50];
      int v9 = *((unsigned __int16 *)a2 + 24);
      swift_bridgeObjectRetain();
      if (v8 == 255)
      {
        *((_OWORD *)a1 + 2)  = *((_OWORD *)a2 + 2);
        *(_DWORD *)(a1 + 47)  = *(_DWORD *)(a2 + 47);
      }
      else
      {
        uint64_t v56 = v9 & 0xFF00FFFF | (v8 << 16);
        uint64_t v57 = *((void *)a2 + 4);
        unint64_t v58 = *((void *)a2 + 5);
        sub_100214CE8(v57, v58, v56, BYTE2(v56) & 1);
        *((void *)a1 + 4)  = v57;
        *((void *)a1 + 5)  = v58;
        *((_WORD *)a1 + 24)  = v56;
        a1[50]  = BYTE2(v56) & 1;
      }
      uint64_t v59 = a2[56];
      if (v59 == 4)
      {
        *(_OWORD *)(a1 + 56)  = *(_OWORD *)(a2 + 56);
        *((void *)a1 + 9)  = *((void *)a2 + 9);
      }
      else
      {
        a1[56]  = v59;
        uint64_t v68 = *((void *)a2 + 8);
        unint64_t v67 = *((void *)a2 + 9);
        sub_100013D44(v68, v67);
        *((void *)a1 + 8)  = v68;
        *((void *)a1 + 9)  = v67;
      }
      goto LABEL_62;
    case 5u:
      *(_DWORD *)a1  = *(_DWORD *)a2;
      *((_WORD *)a1 + 2)  = *((_WORD *)a2 + 2);
      *(_DWORD *)(a1 + 6)  = *(_DWORD *)(a2 + 6);
      *((_WORD *)a1 + 5)  = *((_WORD *)a2 + 5);
      a1[16]  = a2[16];
      *(_WORD *)(a1 + 17)  = *(_WORD *)(a2 + 17);
      uint64_t v10 = *((void *)a2 + 3);
      unint64_t v11 = *((void *)a2 + 4);
      sub_100013D44(v10, v11);
      *((void *)a1 + 3)  = v10;
      *((void *)a1 + 4)  = v11;
      a1[40]  = a2[40];
      goto LABEL_62;
    case 6u:
      *a1  = *a2;
      *(_DWORD *)(a1 + 1)  = *(_DWORD *)(a2 + 1);
      *(_WORD *)(a1 + 5)  = *(_WORD *)(a2 + 5);
      a1[8]  = a2[8];
      *(_WORD *)(a1 + 9)  = *(_WORD *)(a2 + 9);
      uint64_t v13 = *((void *)a2 + 2);
      unint64_t v12 = *((void *)a2 + 3);
      sub_100013D44(v13, v12);
      *((void *)a1 + 2)  = v13;
      *((void *)a1 + 3)  = v12;
      goto LABEL_62;
    case 7u:
      *(_DWORD *)a1  = *(_DWORD *)a2;
      *((_WORD *)a1 + 2)  = *((_WORD *)a2 + 2);
      *(_DWORD *)(a1 + 6)  = *(_DWORD *)(a2 + 6);
      *((_WORD *)a1 + 5)  = *((_WORD *)a2 + 5);
      a1[16]  = a2[16];
      *(_WORD *)(a1 + 17)  = *(_WORD *)(a2 + 17);
      uint64_t v15 = *((void *)a2 + 3);
      unint64_t v14 = *((void *)a2 + 4);
      sub_100013D44(v15, v14);
      *((void *)a1 + 3)  = v15;
      *((void *)a1 + 4)  = v14;
      goto LABEL_62;
    case 8u:
      *(_DWORD *)a1  = *(_DWORD *)a2;
      *((_WORD *)a1 + 2)  = *((_WORD *)a2 + 2);
      a1[8]  = a2[8];
      *(_WORD *)(a1 + 9)  = *(_WORD *)(a2 + 9);
      uint64_t v16 = *((void *)a2 + 2);
      unint64_t v17 = *((void *)a2 + 3);
      sub_100013D44(v16, v17);
      *((void *)a1 + 2)  = v16;
      *((void *)a1 + 3)  = v17;
      uint64_t v19 = *((void *)a2 + 4);
      unint64_t v18 = *((void *)a2 + 5);
      sub_100013D44(v19, v18);
      *((void *)a1 + 4)  = v19;
      *((void *)a1 + 5)  = v18;
      goto LABEL_62;
    case 9u:
      *a1  = *a2;
      *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
      uint64_t v21 = *((void *)a2 + 1);
      unint64_t v20 = *((void *)a2 + 2);
      sub_100013D44(v21, v20);
      *((void *)a1 + 1)  = v21;
      *((void *)a1 + 2)  = v20;
      goto LABEL_62;
    case 0xAu:
    case 0x1Eu:
      *a1  = *a2;
      *((void *)a1 + 1)  = *((void *)a2 + 1);
      swift_bridgeObjectRetain();
      goto LABEL_62;
    case 0xCu:
      *(_DWORD *)a1  = *(_DWORD *)a2;
      *((_WORD *)a1 + 2)  = *((_WORD *)a2 + 2);
      uint64_t v23 = *((void *)a2 + 1);
      unint64_t v22 = *((void *)a2 + 2);
      sub_100013D44(v23, v22);
      *((void *)a1 + 1)  = v23;
      *((void *)a1 + 2)  = v22;
      goto LABEL_62;
    case 0xEu:
      *a1  = *a2;
      *((_WORD *)a1 + 1)  = *((_WORD *)a2 + 1);
      *((_DWORD *)a1 + 1)  = *((_DWORD *)a2 + 1);
      a1[8]  = a2[8];
      *(_WORD *)(a1 + 9)  = *(_WORD *)(a2 + 9);
      uint64_t v24 = a2[16];
      if (v24 == 4)
      {
        *((_OWORD *)a1 + 1)  = *((_OWORD *)a2 + 1);
        *((void *)a1 + 4)  = *((void *)a2 + 4);
      }
      else
      {
        a1[16]  = v24;
        uint64_t v61 = *((void *)a2 + 3);
        unint64_t v60 = *((void *)a2 + 4);
        sub_100013D44(v61, v60);
        *((void *)a1 + 3)  = v61;
        *((void *)a1 + 4)  = v60;
      }
      goto LABEL_62;
    case 0x10u:
      *a1  = *a2;
      *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
      *(_DWORD *)(a1 + 3)  = *(_DWORD *)(a2 + 3);
      *(_WORD *)(a1 + 7)  = *(_WORD *)(a2 + 7);
      *(_DWORD *)(a1 + 9)  = *(_DWORD *)(a2 + 9);
      *((_DWORD *)a1 + 4)  = *((_DWORD *)a2 + 4);
      *(_DWORD *)(a1 + 13)  = *(_DWORD *)(a2 + 13);
      uint64_t v25 = a2[24];
      if (v25 == 4)
      {
        *(_OWORD *)(a1 + 24)  = *(_OWORD *)(a2 + 24);
        *((void *)a1 + 5)  = *((void *)a2 + 5);
      }
      else
      {
        a1[24]  = v25;
        uint64_t v63 = *((void *)a2 + 4);
        unint64_t v62 = *((void *)a2 + 5);
        sub_100013D44(v63, v62);
        *((void *)a1 + 4)  = v63;
        *((void *)a1 + 5)  = v62;
      }
      goto LABEL_62;
    case 0x11u:
      *a1  = *a2;
      *((_WORD *)a1 + 1)  = *((_WORD *)a2 + 1);
      *((void *)a1 + 1)  = *((void *)a2 + 1);
      swift_bridgeObjectRetain();
      goto LABEL_62;
    case 0x12u:
      *(_DWORD *)a1  = *(_DWORD *)a2;
      *((_WORD *)a1 + 2)  = *((_WORD *)a2 + 2);
      a1[6]  = a2[6];
      *((void *)a1 + 1)  = *((void *)a2 + 1);
      swift_bridgeObjectRetain();
      goto LABEL_62;
    case 0x13u:
      *(_DWORD *)a1  = *(_DWORD *)a2;
      *((_WORD *)a1 + 2)  = *((_WORD *)a2 + 2);
      *((void *)a1 + 1)  = *((void *)a2 + 1);
      a1[16]  = a2[16];
      *((void *)a1 + 3)  = *((void *)a2 + 3);
      swift_bridgeObjectRetain();
      goto LABEL_62;
    case 0x17u:
      int v26 = *((_DWORD *)a2 + 1);
      *(_DWORD *)a1  = *(_DWORD *)a2;
      *((_DWORD *)a1 + 1)  = v26;
      a1[8]  = a2[8];
      *((void *)a1 + 2)  = *((void *)a2 + 2);
      swift_bridgeObjectRetain();
      goto LABEL_62;
    case 0x19u:
      *(_WORD *)a1  = *(_WORD *)a2;
      uint64_t v28 = *((void *)a2 + 1);
      unint64_t v27 = *((void *)a2 + 2);
      sub_100013D44(v28, v27);
      *((void *)a1 + 1)  = v28;
      *((void *)a1 + 2)  = v27;
      goto LABEL_62;
    case 0x1Du:
      int v29 = *((_DWORD *)a2 + 1);
      *(_DWORD *)a1  = *(_DWORD *)a2;
      *((_DWORD *)a1 + 1)  = v29;
      a1[8]  = a2[8];
      *(_DWORD *)(a1 + 10)  = *(_DWORD *)(a2 + 10);
      uint64_t v31 = *((void *)a2 + 2);
      unint64_t v30 = *((void *)a2 + 3);
      sub_100013D44(v31, v30);
      *((void *)a1 + 2)  = v31;
      *((void *)a1 + 3)  = v30;
      goto LABEL_62;
    case 0x20u:
    case 0x2Au:
      *a1  = *a2;
      uint64_t v33 = *((void *)a2 + 1);
      unint64_t v32 = *((void *)a2 + 2);
      sub_100013D44(v33, v32);
      *((void *)a1 + 1)  = v33;
      *((void *)a1 + 2)  = v32;
      goto LABEL_62;
    case 0x21u:
      *(_OWORD *)a1  = *(_OWORD *)a2;
      *((_WORD *)a1 + 8)  = *((_WORD *)a2 + 8);
      a1[18]  = a2[18];
      *((void *)a1 + 3)  = *((void *)a2 + 3);
      swift_bridgeObjectRetain();
      goto LABEL_62;
    case 0x24u:
      *a1  = *a2;
      *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
      *(_DWORD *)(a1 + 3)  = *(_DWORD *)(a2 + 3);
      *(_WORD *)(a1 + 7)  = *(_WORD *)(a2 + 7);
      *(_DWORD *)(a1 + 9)  = *(_DWORD *)(a2 + 9);
      *((_DWORD *)a1 + 4)  = *((_DWORD *)a2 + 4);
      uint64_t v34 = (uint64_t *)(a2 + 24);
      *(_DWORD *)(a1 + 13)  = *(_DWORD *)(a2 + 13);
      unint64_t v35 = *((void *)a2 + 4);
      if (v35 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 24)  = *(_OWORD *)v34;
      }
      else
      {
        uint64_t v64 = *v34;
        sub_100013D44(*v34, *((void *)a2 + 4));
        *((void *)a1 + 3)  = v64;
        *((void *)a1 + 4)  = v35;
      }
      uint64_t v65 = a2[40];
      if (v65 == 4)
      {
        *(_OWORD *)(a1 + 40)  = *(_OWORD *)(a2 + 40);
        *((void *)a1 + 7)  = *((void *)a2 + 7);
      }
      else
      {
        a1[40]  = v65;
        uint64_t v70 = *((void *)a2 + 6);
        unint64_t v69 = *((void *)a2 + 7);
        sub_100013D44(v70, v69);
        *((void *)a1 + 6)  = v70;
        *((void *)a1 + 7)  = v69;
      }
      goto LABEL_62;
    case 0x26u:
      uint64_t v36 = *(void *)a2;
      unint64_t v37 = *((void *)a2 + 1);
      sub_100013D44(*(void *)a2, v37);
      *(void *)a1  = v36;
      *((void *)a1 + 1)  = v37;
      uint64_t v39 = *((void *)a2 + 2);
      unint64_t v38 = *((void *)a2 + 3);
      sub_100013D44(v39, v38);
      *((void *)a1 + 2)  = v39;
      *((void *)a1 + 3)  = v38;
      goto LABEL_62;
    case 0x27u:
      *a1  = *a2;
      *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
      unint64_t v40 = a1 + 8;
      unint64_t v41 = a2 + 8;
      unint64_t v42 = *((void *)a2 + 4);
      if (v42 >> 60 == 15)
      {
        long long v43 = *(_OWORD *)(a2 + 24);
        *unint64_t v40 = *v41;
        *(_OWORD *)(a1 + 24)  = v43;
      }
      else
      {
        *(void *)unint64_t v40 = *(void *)v41;
        a1[16]  = a2[16];
        uint64_t v66 = *((void *)a2 + 3);
        sub_100013D44(v66, v42);
        *((void *)a1 + 3)  = v66;
        *((void *)a1 + 4)  = v42;
      }
      *((_WORD *)a1 + 20)  = *((_WORD *)a2 + 20);
      goto LABEL_62;
    case 0x28u:
      *(_WORD *)a1  = *(_WORD *)a2;
      *((_DWORD *)a1 + 1)  = *((_DWORD *)a2 + 1);
      uint64_t v44 = *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation(0) + 28);
      unint64_t v45 = &a1[v44];
      long long v46 = &a2[v44];
      *unint64_t v45 = a2[v44];
      *(_WORD *)(v45 + 1)  = *(_WORD *)&a2[v44 + 1];
      uint64_t v47 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
      uint64_t v48 = v47[6];
      unint64_t v49 = &v45[v48];
      char v50 = &v46[v48];
      uint64_t v51 = type metadata accessor for P256.KeyAgreement.PublicKey();
      uint64_t v52 = *(void *)(v51 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
      {
        uint64_t v53 = sub_100010BCC((uint64_t *)&unk_1004852B0);
        memcpy(v49, v50, *(void *)(*(void *)(v53 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v49, v50, v51);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
      }
      uint64_t v71 = v47[7];
      unint64_t v72 = &v45[v71];
      uint64_t v73 = (uint64_t *)&v46[v71];
      unint64_t v74 = v73[1];
      if (v74 >> 60 == 15)
      {
        *(_OWORD *)unint64_t v72 = *(_OWORD *)v73;
      }
      else
      {
        uint64_t v75 = *v73;
        sub_100013D44(*v73, v73[1]);
        *(void *)unint64_t v72 = v75;
        *((void *)v72 + 1)  = v74;
      }
      uint64_t v76 = v47[8];
      unint64_t v77 = &v45[v76];
      uint64_t v78 = (uint64_t *)&v46[v76];
      unint64_t v79 = v78[1];
      if (v79 >> 60 == 15)
      {
        *(_OWORD *)unint64_t v77 = *(_OWORD *)v78;
      }
      else
      {
        uint64_t v80 = *v78;
        sub_100013D44(*v78, v78[1]);
        *(void *)unint64_t v77 = v80;
        *((void *)v77 + 1)  = v79;
      }
      uint64_t v81 = v47[9];
      unint64_t v82 = &v45[v81];
      uint64_t v83 = (uint64_t *)&v46[v81];
      unint64_t v84 = v83[1];
      if (v84 >> 60 == 15)
      {
        *(_OWORD *)unint64_t v82 = *(_OWORD *)v83;
      }
      else
      {
        uint64_t v85 = *v83;
        sub_100013D44(*v83, v83[1]);
        *(void *)unint64_t v82 = v85;
        *((void *)v82 + 1)  = v84;
      }
      uint64_t v86 = v47[10];
      unint64_t v87 = &v45[v86];
      uint64_t v88 = &v46[v86];
      uint64_t v89 = type metadata accessor for UUID();
      uint64_t v90 = *(void *)(v89 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v88, 1, v89))
      {
        uint64_t v91 = sub_100010BCC(&qword_1004862B0);
        memcpy(v87, v88, *(void *)(*(void *)(v91 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v87, v88, v89);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v90 + 56))(v87, 0, 1, v89);
      }
      *(void *)&v45[v47[11]]  = *(void *)&v46[v47[11]];
      uint64_t v92 = v47[12];
      long long __dst = &v45[v92];
      uint64_t v104 = v47;
      uint64_t v93 = &v46[v92];
      uint64_t v94 = type metadata accessor for NANInternetSharingStatistics.Requester();
      uint64_t v95 = *(void *)(v94 - 8);
      unint64_t v96 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48);
      swift_bridgeObjectRetain();
      if (v96(v93, 1, v94))
      {
        uint64_t v97 = sub_100010BCC((uint64_t *)&unk_100485B60);
        memcpy(__dst, v93, *(void *)(*(void *)(v97 - 8) + 64));
      }
      else
      {
        uint64_t v98 = type metadata accessor for DispatchTimeInterval();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v98 - 8) + 16))(__dst, v93, v98);
        __dst[*(int *)(v94 + 20)]  = v93[*(int *)(v94 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v95 + 56))(__dst, 0, 1, v94);
      }
      uint64_t v99 = v104[13];
      uint64_t v100 = &v45[v99];
      uint64_t v101 = &v46[v99];
      *(_OWORD *)uint64_t v100 = *(_OWORD *)v101;
      *(_OWORD *)(v100 + 9)  = *(_OWORD *)(v101 + 9);
      goto LABEL_62;
    case 0x29u:
      *(_WORD *)a1  = *(_WORD *)a2;
      a1[2]  = a2[2];
      uint64_t v55 = *((void *)a2 + 1);
      unint64_t v54 = *((void *)a2 + 2);
      sub_100013D44(v55, v54);
      *((void *)a1 + 1)  = v55;
      *((void *)a1 + 2)  = v54;
LABEL_62:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *assignWithCopy for NANAttribute(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10021A4B0((uint64_t)a1, type metadata accessor for NANAttribute);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
      case 0x18u:
      case 0x1Fu:
      case 0x22u:
      case 0x23u:
      case 0x25u:
        *(void *)a1  = *(void *)a2;
        swift_bridgeObjectRetain();
        goto LABEL_63;
      case 3u:
        uint64_t v6 = *(void *)a2;
        unint64_t v7 = *((void *)a2 + 1);
        sub_100013D44(*(void *)a2, v7);
        *(void *)a1  = v6;
        *((void *)a1 + 1)  = v7;
        a1[16]  = a2[16];
        a1[17]  = a2[17];
        a1[18]  = a2[18];
        __int16 v8 = *((_WORD *)a2 + 10);
        a1[22]  = a2[22];
        *((_WORD *)a1 + 10)  = v8;
        *((void *)a1 + 3)  = *((void *)a2 + 3);
        unsigned __int8 v9 = a2[50];
        int v10 = *((unsigned __int16 *)a2 + 24);
        swift_bridgeObjectRetain();
        if (v9 == 255)
        {
          long long v11 = *((_OWORD *)a2 + 2);
          *(_DWORD *)(a1 + 47)  = *(_DWORD *)(a2 + 47);
          *((_OWORD *)a1 + 2)  = v11;
        }
        else
        {
          uint64_t v74 = v10 & 0xFF00FFFF | (v9 << 16);
          uint64_t v75 = *((void *)a2 + 4);
          unint64_t v76 = *((void *)a2 + 5);
          sub_100214CE8(v75, v76, v74, BYTE2(v74) & 1);
          *((void *)a1 + 4)  = v75;
          *((void *)a1 + 5)  = v76;
          *((_WORD *)a1 + 24)  = v74;
          a1[50]  = BYTE2(v74) & 1;
        }
        uint64_t v77 = a2[56];
        if (v77 == 4)
        {
          long long v78 = *(_OWORD *)(a2 + 56);
          *((void *)a1 + 9)  = *((void *)a2 + 9);
          *(_OWORD *)(a1 + 56)  = v78;
        }
        else
        {
          a1[56]  = v77;
          uint64_t v90 = *((void *)a2 + 8);
          unint64_t v89 = *((void *)a2 + 9);
          sub_100013D44(v90, v89);
          *((void *)a1 + 8)  = v90;
          *((void *)a1 + 9)  = v89;
        }
        goto LABEL_63;
      case 5u:
        int v12 = *(_DWORD *)a2;
        *((_WORD *)a1 + 2)  = *((_WORD *)a2 + 2);
        *(_DWORD *)a1  = v12;
        int v13 = *(_DWORD *)(a2 + 6);
        *((_WORD *)a1 + 5)  = *((_WORD *)a2 + 5);
        *(_DWORD *)(a1 + 6)  = v13;
        a1[16]  = a2[16];
        a1[17]  = a2[17];
        a1[18]  = a2[18];
        uint64_t v14 = *((void *)a2 + 3);
        unint64_t v15 = *((void *)a2 + 4);
        sub_100013D44(v14, v15);
        *((void *)a1 + 3)  = v14;
        *((void *)a1 + 4)  = v15;
        a1[40]  = a2[40];
        goto LABEL_63;
      case 6u:
        *a1  = *a2;
        int v16 = *(_DWORD *)(a2 + 1);
        *(_WORD *)(a1 + 5)  = *(_WORD *)(a2 + 5);
        *(_DWORD *)(a1 + 1)  = v16;
        a1[8]  = a2[8];
        a1[9]  = a2[9];
        a1[10]  = a2[10];
        uint64_t v18 = *((void *)a2 + 2);
        unint64_t v17 = *((void *)a2 + 3);
        sub_100013D44(v18, v17);
        *((void *)a1 + 2)  = v18;
        *((void *)a1 + 3)  = v17;
        goto LABEL_63;
      case 7u:
        int v19 = *(_DWORD *)a2;
        *((_WORD *)a1 + 2)  = *((_WORD *)a2 + 2);
        *(_DWORD *)a1  = v19;
        int v20 = *(_DWORD *)(a2 + 6);
        *((_WORD *)a1 + 5)  = *((_WORD *)a2 + 5);
        *(_DWORD *)(a1 + 6)  = v20;
        a1[16]  = a2[16];
        a1[17]  = a2[17];
        a1[18]  = a2[18];
        uint64_t v22 = *((void *)a2 + 3);
        unint64_t v21 = *((void *)a2 + 4);
        sub_100013D44(v22, v21);
        *((void *)a1 + 3)  = v22;
        *((void *)a1 + 4)  = v21;
        goto LABEL_63;
      case 8u:
        int v23 = *(_DWORD *)a2;
        *((_WORD *)a1 + 2)  = *((_WORD *)a2 + 2);
        *(_DWORD *)a1  = v23;
        a1[8]  = a2[8];
        a1[9]  = a2[9];
        a1[10]  = a2[10];
        uint64_t v24 = *((void *)a2 + 2);
        unint64_t v25 = *((void *)a2 + 3);
        sub_100013D44(v24, v25);
        *((void *)a1 + 2)  = v24;
        *((void *)a1 + 3)  = v25;
        uint64_t v27 = *((void *)a2 + 4);
        unint64_t v26 = *((void *)a2 + 5);
        sub_100013D44(v27, v26);
        *((void *)a1 + 4)  = v27;
        *((void *)a1 + 5)  = v26;
        goto LABEL_63;
      case 9u:
        *a1  = *a2;
        a1[1]  = a2[1];
        a1[2]  = a2[2];
        uint64_t v29 = *((void *)a2 + 1);
        unint64_t v28 = *((void *)a2 + 2);
        sub_100013D44(v29, v28);
        *((void *)a1 + 1)  = v29;
        *((void *)a1 + 2)  = v28;
        goto LABEL_63;
      case 0xAu:
      case 0x1Eu:
        *a1  = *a2;
        *((void *)a1 + 1)  = *((void *)a2 + 1);
        swift_bridgeObjectRetain();
        goto LABEL_63;
      case 0xCu:
        int v30 = *(_DWORD *)a2;
        *((_WORD *)a1 + 2)  = *((_WORD *)a2 + 2);
        *(_DWORD *)a1  = v30;
        uint64_t v32 = *((void *)a2 + 1);
        unint64_t v31 = *((void *)a2 + 2);
        sub_100013D44(v32, v31);
        *((void *)a1 + 1)  = v32;
        *((void *)a1 + 2)  = v31;
        goto LABEL_63;
      case 0xEu:
        *a1  = *a2;
        *((_WORD *)a1 + 1)  = *((_WORD *)a2 + 1);
        int v33 = *((_DWORD *)a2 + 1);
        a1[8]  = a2[8];
        *((_DWORD *)a1 + 1)  = v33;
        *(_WORD *)(a1 + 9)  = *(_WORD *)(a2 + 9);
        uint64_t v34 = a2[16];
        if (v34 == 4)
        {
          long long v35 = *((_OWORD *)a2 + 1);
          *((void *)a1 + 4)  = *((void *)a2 + 4);
          *((_OWORD *)a1 + 1)  = v35;
        }
        else
        {
          a1[16]  = v34;
          uint64_t v80 = *((void *)a2 + 3);
          unint64_t v79 = *((void *)a2 + 4);
          sub_100013D44(v80, v79);
          *((void *)a1 + 3)  = v80;
          *((void *)a1 + 4)  = v79;
        }
        goto LABEL_63;
      case 0x10u:
        *a1  = *a2;
        a1[1]  = a2[1];
        a1[2]  = a2[2];
        int v36 = *(_DWORD *)(a2 + 3);
        *(_WORD *)(a1 + 7)  = *(_WORD *)(a2 + 7);
        *(_DWORD *)(a1 + 3)  = v36;
        a1[9]  = a2[9];
        a1[10]  = a2[10];
        *(_WORD *)(a1 + 11)  = *(_WORD *)(a2 + 11);
        int v37 = *(_DWORD *)(a2 + 13);
        *((_DWORD *)a1 + 4)  = *((_DWORD *)a2 + 4);
        *(_DWORD *)(a1 + 13)  = v37;
        uint64_t v38 = a2[24];
        if (v38 == 4)
        {
          long long v39 = *(_OWORD *)(a2 + 24);
          *((void *)a1 + 5)  = *((void *)a2 + 5);
          *(_OWORD *)(a1 + 24)  = v39;
        }
        else
        {
          a1[24]  = v38;
          uint64_t v82 = *((void *)a2 + 4);
          unint64_t v81 = *((void *)a2 + 5);
          sub_100013D44(v82, v81);
          *((void *)a1 + 4)  = v82;
          *((void *)a1 + 5)  = v81;
        }
        goto LABEL_63;
      case 0x11u:
        *a1  = *a2;
        *((_WORD *)a1 + 1)  = *((_WORD *)a2 + 1);
        *((void *)a1 + 1)  = *((void *)a2 + 1);
        swift_bridgeObjectRetain();
        goto LABEL_63;
      case 0x12u:
        int v40 = *(_DWORD *)a2;
        *((_WORD *)a1 + 2)  = *((_WORD *)a2 + 2);
        *(_DWORD *)a1  = v40;
        a1[6]  = a2[6];
        *((void *)a1 + 1)  = *((void *)a2 + 1);
        swift_bridgeObjectRetain();
        goto LABEL_63;
      case 0x13u:
        *a1  = *a2;
        a1[1]  = a2[1];
        a1[2]  = a2[2];
        a1[3]  = a2[3];
        *((_WORD *)a1 + 2)  = *((_WORD *)a2 + 2);
        uint64_t v41 = *((void *)a2 + 1);
        a1[16]  = a2[16];
        *((void *)a1 + 1)  = v41;
        *((void *)a1 + 3)  = *((void *)a2 + 3);
        swift_bridgeObjectRetain();
        goto LABEL_63;
      case 0x17u:
        *a1  = *a2;
        a1[1]  = a2[1];
        a1[2]  = a2[2];
        a1[3]  = a2[3];
        int v42 = *((_DWORD *)a2 + 1);
        a1[8]  = a2[8];
        *((_DWORD *)a1 + 1)  = v42;
        *((void *)a1 + 2)  = *((void *)a2 + 2);
        swift_bridgeObjectRetain();
        goto LABEL_63;
      case 0x19u:
        *(_WORD *)a1  = *(_WORD *)a2;
        uint64_t v44 = *((void *)a2 + 1);
        unint64_t v43 = *((void *)a2 + 2);
        sub_100013D44(v44, v43);
        *((void *)a1 + 1)  = v44;
        *((void *)a1 + 2)  = v43;
        goto LABEL_63;
      case 0x1Du:
        int v45 = *(_DWORD *)a2;
        *((_WORD *)a1 + 2)  = *((_WORD *)a2 + 2);
        *(_DWORD *)a1  = v45;
        LOWORD(v45)  = *((_WORD *)a2 + 3);
        a1[8]  = a2[8];
        *((_WORD *)a1 + 3)  = v45;
        *(_DWORD *)(a1 + 10)  = *(_DWORD *)(a2 + 10);
        uint64_t v47 = *((void *)a2 + 2);
        unint64_t v46 = *((void *)a2 + 3);
        sub_100013D44(v47, v46);
        *((void *)a1 + 2)  = v47;
        *((void *)a1 + 3)  = v46;
        goto LABEL_63;
      case 0x20u:
      case 0x2Au:
        *a1  = *a2;
        uint64_t v49 = *((void *)a2 + 1);
        unint64_t v48 = *((void *)a2 + 2);
        sub_100013D44(v49, v48);
        *((void *)a1 + 1)  = v49;
        *((void *)a1 + 2)  = v48;
        goto LABEL_63;
      case 0x21u:
        *(void *)a1  = *(void *)a2;
        *((void *)a1 + 1)  = *((void *)a2 + 1);
        *((_WORD *)a1 + 8)  = *((_WORD *)a2 + 8);
        a1[18]  = a2[18];
        *((void *)a1 + 3)  = *((void *)a2 + 3);
        swift_bridgeObjectRetain();
        goto LABEL_63;
      case 0x24u:
        *a1  = *a2;
        a1[1]  = a2[1];
        a1[2]  = a2[2];
        int v50 = *(_DWORD *)(a2 + 3);
        *(_WORD *)(a1 + 7)  = *(_WORD *)(a2 + 7);
        *(_DWORD *)(a1 + 3)  = v50;
        a1[9]  = a2[9];
        a1[10]  = a2[10];
        *(_WORD *)(a1 + 11)  = *(_WORD *)(a2 + 11);
        int v51 = *(_DWORD *)(a2 + 13);
        *((_DWORD *)a1 + 4)  = *((_DWORD *)a2 + 4);
        *(_DWORD *)(a1 + 13)  = v51;
        uint64_t v52 = (uint64_t *)(a2 + 24);
        unint64_t v53 = *((void *)a2 + 4);
        if (v53 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 24)  = *(_OWORD *)v52;
        }
        else
        {
          uint64_t v83 = *v52;
          sub_100013D44(*v52, *((void *)a2 + 4));
          *((void *)a1 + 3)  = v83;
          *((void *)a1 + 4)  = v53;
        }
        uint64_t v84 = a2[40];
        if (v84 == 4)
        {
          long long v85 = *(_OWORD *)(a2 + 40);
          *((void *)a1 + 7)  = *((void *)a2 + 7);
          *(_OWORD *)(a1 + 40)  = v85;
        }
        else
        {
          a1[40]  = v84;
          uint64_t v92 = *((void *)a2 + 6);
          unint64_t v91 = *((void *)a2 + 7);
          sub_100013D44(v92, v91);
          *((void *)a1 + 6)  = v92;
          *((void *)a1 + 7)  = v91;
        }
        goto LABEL_63;
      case 0x26u:
        uint64_t v54 = *(void *)a2;
        unint64_t v55 = *((void *)a2 + 1);
        sub_100013D44(*(void *)a2, v55);
        *(void *)a1  = v54;
        *((void *)a1 + 1)  = v55;
        uint64_t v57 = *((void *)a2 + 2);
        unint64_t v56 = *((void *)a2 + 3);
        sub_100013D44(v57, v56);
        *((void *)a1 + 2)  = v57;
        *((void *)a1 + 3)  = v56;
        goto LABEL_63;
      case 0x27u:
        *a1  = *a2;
        a1[1]  = a2[1];
        a1[2]  = a2[2];
        unint64_t v58 = a1 + 8;
        uint64_t v59 = a2 + 8;
        if (*((void *)a2 + 4) >> 60 == 15)
        {
          long long v60 = *(_OWORD *)(a2 + 24);
          *unint64_t v58 = *v59;
          *(_OWORD *)(a1 + 24)  = v60;
        }
        else
        {
          uint64_t v86 = *(void *)v59;
          a1[16]  = a2[16];
          *(void *)unint64_t v58 = v86;
          uint64_t v87 = *((void *)a2 + 3);
          unint64_t v88 = *((void *)a2 + 4);
          sub_100013D44(v87, v88);
          *((void *)a1 + 3)  = v87;
          *((void *)a1 + 4)  = v88;
        }
        *((_WORD *)a1 + 20)  = *((_WORD *)a2 + 20);
        goto LABEL_63;
      case 0x28u:
        *a1  = *a2;
        a1[1]  = a2[1];
        *((_DWORD *)a1 + 1)  = *((_DWORD *)a2 + 1);
        uint64_t v61 = *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation(0) + 28);
        unint64_t v62 = &a1[v61];
        uint64_t v63 = &a2[v61];
        *unint64_t v62 = a2[v61];
        *(_WORD *)(v62 + 1)  = *(_WORD *)&a2[v61 + 1];
        uint64_t v64 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
        uint64_t v65 = v64[6];
        uint64_t v66 = &v62[v65];
        unint64_t v67 = &v63[v65];
        uint64_t v68 = type metadata accessor for P256.KeyAgreement.PublicKey();
        uint64_t v69 = *(void *)(v68 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v67, 1, v68))
        {
          uint64_t v70 = sub_100010BCC((uint64_t *)&unk_1004852B0);
          memcpy(v66, v67, *(void *)(*(void *)(v70 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v66, v67, v68);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v69 + 56))(v66, 0, 1, v68);
        }
        uint64_t v93 = v64[7];
        uint64_t v94 = &v62[v93];
        uint64_t v95 = (uint64_t *)&v63[v93];
        unint64_t v96 = v95[1];
        if (v96 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v94 = *(_OWORD *)v95;
        }
        else
        {
          uint64_t v97 = *v95;
          sub_100013D44(*v95, v95[1]);
          *(void *)uint64_t v94 = v97;
          *((void *)v94 + 1)  = v96;
        }
        uint64_t v98 = v64[8];
        uint64_t v99 = &v62[v98];
        uint64_t v100 = (uint64_t *)&v63[v98];
        unint64_t v101 = v100[1];
        if (v101 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v99 = *(_OWORD *)v100;
        }
        else
        {
          uint64_t v102 = *v100;
          sub_100013D44(*v100, v100[1]);
          *(void *)uint64_t v99 = v102;
          *((void *)v99 + 1)  = v101;
        }
        uint64_t v103 = v64[9];
        uint64_t v104 = &v62[v103];
        unint64_t v105 = (uint64_t *)&v63[v103];
        unint64_t v106 = v105[1];
        if (v106 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v104 = *(_OWORD *)v105;
        }
        else
        {
          uint64_t v107 = *v105;
          sub_100013D44(*v105, v105[1]);
          *(void *)uint64_t v104 = v107;
          *((void *)v104 + 1)  = v106;
        }
        uint64_t v108 = v64[10];
        v109  = &v62[v108];
        v110  = &v63[v108];
        v111  = type metadata accessor for UUID();
        v112  = *(void *)(v111 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v112 + 48))(v110, 1, v111))
        {
          v113  = sub_100010BCC(&qword_1004862B0);
          memcpy(v109, v110, *(void *)(*(void *)(v113 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v112 + 16))(v109, v110, v111);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v112 + 56))(v109, 0, 1, v111);
        }
        *(void *)&v62[v64[11]]  = *(void *)&v63[v64[11]];
        v114  = v64[12];
        long long __dst = &v62[v114];
        v127  = v64;
        v115  = &v63[v114];
        v116  = type metadata accessor for NANInternetSharingStatistics.Requester();
        v117  = *(void *)(v116 - 8);
        v118  = *(unsigned int (**)(char *, uint64_t, uint64_t))(v117 + 48);
        swift_bridgeObjectRetain();
        if (v118(v115, 1, v116))
        {
          v119  = sub_100010BCC((uint64_t *)&unk_100485B60);
          memcpy(__dst, v115, *(void *)(*(void *)(v119 - 8) + 64));
        }
        else
        {
          v120  = type metadata accessor for DispatchTimeInterval();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v120 - 8) + 16))(__dst, v115, v120);
          __dst[*(int *)(v116 + 20)]  = v115[*(int *)(v116 + 20)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v117 + 56))(__dst, 0, 1, v116);
        }
        v121  = v127[13];
        v122  = &v62[v121];
        v123  = (long long *)&v63[v121];
        v124  = *v123;
        *(_OWORD *)(v122 + 9)  = *(long long *)((char *)v123 + 9);
        *(_OWORD *)v122  = v124;
        goto LABEL_63;
      case 0x29u:
        __int16 v71 = *(_WORD *)a2;
        a1[2]  = a2[2];
        *(_WORD *)a1  = v71;
        uint64_t v73 = *((void *)a2 + 1);
        unint64_t v72 = *((void *)a2 + 2);
        sub_100013D44(v73, v72);
        *((void *)a1 + 1)  = v73;
        *((void *)a1 + 2)  = v72;
LABEL_63:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

_DWORD *initializeWithTake for NANAttribute(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 40)
  {
    *(_WORD *)a1  = *(_WORD *)a2;
    a1[1]  = a2[1];
    uint64_t v6 = *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation(0) + 28);
    unint64_t v7 = (char *)a1 + v6;
    __int16 v8 = (char *)a2 + v6;
    *unint64_t v7 = *((unsigned char *)a2 + v6);
    *(_WORD *)(v7 + 1)  = *(_WORD *)((char *)a2 + v6 + 1);
    unsigned __int8 v9 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
    uint64_t v10 = v9[6];
    long long v11 = &v7[v10];
    int v12 = &v8[v10];
    uint64_t v13 = type metadata accessor for P256.KeyAgreement.PublicKey();
    uint64_t v14 = *(void *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      uint64_t v15 = sub_100010BCC((uint64_t *)&unk_1004852B0);
      memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    *(_OWORD *)&v7[v9[7]]  = *(_OWORD *)&v8[v9[7]];
    *(_OWORD *)&v7[v9[8]]  = *(_OWORD *)&v8[v9[8]];
    *(_OWORD *)&v7[v9[9]]  = *(_OWORD *)&v8[v9[9]];
    uint64_t v16 = v9[10];
    unint64_t v17 = &v7[v16];
    uint64_t v18 = &v8[v16];
    uint64_t v19 = type metadata accessor for UUID();
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      uint64_t v21 = sub_100010BCC(&qword_1004862B0);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    *(void *)&v7[v9[11]]  = *(void *)&v8[v9[11]];
    uint64_t v22 = v9[12];
    int v23 = &v7[v22];
    uint64_t v24 = &v8[v22];
    uint64_t v25 = type metadata accessor for NANInternetSharingStatistics.Requester();
    uint64_t v26 = *(void *)(v25 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    {
      uint64_t v27 = sub_100010BCC((uint64_t *)&unk_100485B60);
      memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      uint64_t v28 = type metadata accessor for DispatchTimeInterval();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32))(v23, v24, v28);
      v23[*(int *)(v25 + 20)]  = v24[*(int *)(v25 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
    }
    uint64_t v29 = v9[13];
    int v30 = &v7[v29];
    unint64_t v31 = &v8[v29];
    *(_OWORD *)int v30 = *(_OWORD *)v31;
    *(_OWORD *)(v30 + 9)  = *(_OWORD *)(v31 + 9);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

_DWORD *assignWithTake for NANAttribute(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10021A4B0((uint64_t)a1, type metadata accessor for NANAttribute);
    if (swift_getEnumCaseMultiPayload() == 40)
    {
      *(_WORD *)a1  = *(_WORD *)a2;
      a1[1]  = a2[1];
      uint64_t v6 = *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation(0) + 28);
      unint64_t v7 = (char *)a1 + v6;
      __int16 v8 = (char *)a2 + v6;
      *unint64_t v7 = *((unsigned char *)a2 + v6);
      *(_WORD *)(v7 + 1)  = *(_WORD *)((char *)a2 + v6 + 1);
      unsigned __int8 v9 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
      uint64_t v10 = v9[6];
      long long v11 = &v7[v10];
      int v12 = &v8[v10];
      uint64_t v13 = type metadata accessor for P256.KeyAgreement.PublicKey();
      uint64_t v14 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      {
        uint64_t v15 = sub_100010BCC((uint64_t *)&unk_1004852B0);
        memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      }
      *(_OWORD *)&v7[v9[7]]  = *(_OWORD *)&v8[v9[7]];
      *(_OWORD *)&v7[v9[8]]  = *(_OWORD *)&v8[v9[8]];
      *(_OWORD *)&v7[v9[9]]  = *(_OWORD *)&v8[v9[9]];
      uint64_t v16 = v9[10];
      unint64_t v17 = &v7[v16];
      uint64_t v18 = &v8[v16];
      uint64_t v19 = type metadata accessor for UUID();
      uint64_t v20 = *(void *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        uint64_t v21 = sub_100010BCC(&qword_1004862B0);
        memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      *(void *)&v7[v9[11]]  = *(void *)&v8[v9[11]];
      uint64_t v22 = v9[12];
      int v23 = &v7[v22];
      uint64_t v24 = &v8[v22];
      uint64_t v25 = type metadata accessor for NANInternetSharingStatistics.Requester();
      uint64_t v26 = *(void *)(v25 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      {
        uint64_t v27 = sub_100010BCC((uint64_t *)&unk_100485B60);
        memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
      }
      else
      {
        uint64_t v28 = type metadata accessor for DispatchTimeInterval();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32))(v23, v24, v28);
        v23[*(int *)(v25 + 20)]  = v24[*(int *)(v25 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      }
      uint64_t v29 = v9[13];
      int v30 = &v7[v29];
      unint64_t v31 = &v8[v29];
      *(_OWORD *)int v30 = *(_OWORD *)v31;
      *(_OWORD *)(v30 + 9)  = *(_OWORD *)(v31 + 9);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1002219DC()
{
  uint64_t result = type metadata accessor for NANAttribute.CustomDeviceInformation(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for NANAttribute.MasterIndication(uint64_t result, int a2, int a3)
{
  if ((a3 + 0xFFFF) <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if ((a3 + 0xFFFF) < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    unsigned int v6 = ((a2 - 1) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 1;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2)  = v6;
        return result;
      case 2:
        *(_WORD *)(result + 2)  = v6;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)(result + 2)  = v6;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *(unsigned char *)(result + 2)  = 0;
      break;
    case 2:
      *(_WORD *)(result + 2)  = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100221C5CLL);
    case 4:
      *(_DWORD *)(result + 2)  = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.MasterIndication()
{
  return &type metadata for NANAttribute.MasterIndication;
}

ValueMetadata *type metadata accessor for NANAttribute.Cluster()
{
  return &type metadata for NANAttribute.Cluster;
}

ValueMetadata *type metadata accessor for NANAttribute.ServiceIDList()
{
  return &type metadata for NANAttribute.ServiceIDList;
}

uint64_t destroy for NANAttribute.ServiceDescriptor(uint64_t a1)
{
  sub_10000C970(*(void *)a1, *(void *)(a1 + 8));
  uint64_t result = swift_bridgeObjectRelease();
  if (*(unsigned __int8 *)(a1 + 50) != 255)
  {
    uint64_t v3 = *(unsigned __int16 *)(a1 + 48) | (*(unsigned __int8 *)(a1 + 50) << 16);
    uint64_t result = sub_1001331A0(*(void *)(a1 + 32), *(void *)(a1 + 40), v3, BYTE2(v3) & 1);
  }
  if (*(unsigned char *)(a1 + 56) != 4)
  {
    uint64_t v4 = *(void *)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
    return sub_10000C970(v4, v5);
  }
  return result;
}

uint64_t initializeWithCopy for NANAttribute.ServiceDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_100013D44(*(void *)a2, v5);
  *(void *)a1  = v4;
  *(void *)(a1 + 8)  = v5;
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  *(_WORD *)(a1 + 17)  = *(_WORD *)(a2 + 17);
  *(_WORD *)(a1 + 20)  = *(_WORD *)(a2 + 20);
  *(unsigned char *)(a1 + 22)  = *(unsigned char *)(a2 + 22);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 50);
  int v7 = *(unsigned __int16 *)(a2 + 48);
  swift_bridgeObjectRetain();
  if (v6 == 255)
  {
    *(_OWORD *)(a1 + 32)  = *(_OWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 47)  = *(_DWORD *)(a2 + 47);
  }
  else
  {
    uint64_t v8 = v7 & 0xFF00FFFF | (v6 << 16);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v10 = *(void *)(a2 + 40);
    sub_100214CE8(v9, v10, v8, BYTE2(v8) & 1);
    *(void *)(a1 + 32)  = v9;
    *(void *)(a1 + 40)  = v10;
    *(_WORD *)(a1 + 48)  = v8;
    *(unsigned char *)(a1 + 50)  = BYTE2(v8) & 1;
  }
  uint64_t v11 = *(unsigned __int8 *)(a2 + 56);
  if (v11 == 4)
  {
    *(_OWORD *)(a1 + 56)  = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72)  = *(void *)(a2 + 72);
  }
  else
  {
    *(unsigned char *)(a1 + 56)  = v11;
    uint64_t v13 = *(void *)(a2 + 64);
    unint64_t v12 = *(void *)(a2 + 72);
    sub_100013D44(v13, v12);
    *(void *)(a1 + 64)  = v13;
    *(void *)(a1 + 72)  = v12;
  }
  return a1;
}

uint64_t assignWithCopy for NANAttribute.ServiceDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_100013D44(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1  = v4;
  *(void *)(a1 + 8)  = v5;
  sub_10000C970(v6, v7);
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17)  = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18)  = *(unsigned char *)(a2 + 18);
  __int16 v8 = *(_WORD *)(a2 + 20);
  *(unsigned char *)(a1 + 22)  = *(unsigned char *)(a2 + 22);
  *(_WORD *)(a1 + 20)  = v8;
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = (long long *)(a1 + 32);
  unint64_t v10 = (long long *)(a2 + 32);
  int v11 = *(unsigned __int16 *)(a2 + 48) | (*(unsigned __int8 *)(a2 + 50) << 16);
  if (*(unsigned __int8 *)(a1 + 50) == 255)
  {
    if (BYTE2(v11) == 255)
    {
      long long v12 = *v10;
      *(_DWORD *)(a1 + 47)  = *(_DWORD *)(a2 + 47);
      *uint64_t v9 = v12;
    }
    else
    {
      uint64_t v14 = *(void *)(a2 + 32);
      unint64_t v15 = *(void *)(a2 + 40);
      sub_100214CE8(v14, v15, *(unsigned __int16 *)(a2 + 48) | (*(unsigned __int8 *)(a2 + 50) << 16), BYTE2(v11) & 1);
      *(void *)(a1 + 32)  = v14;
      *(void *)(a1 + 40)  = v15;
      *(_WORD *)(a1 + 48)  = v11;
      *(unsigned char *)(a1 + 50)  = BYTE2(v11) & 1;
    }
  }
  else if (BYTE2(v11) == 255)
  {
    sub_1000380B4(a1 + 32, &qword_100483060);
    int v13 = *(_DWORD *)(a2 + 47);
    *uint64_t v9 = *v10;
    *(_DWORD *)(a1 + 47)  = v13;
  }
  else
  {
    uint64_t v16 = *(void *)(a2 + 32);
    unint64_t v17 = *(void *)(a2 + 40);
    sub_100214CE8(v16, v17, *(unsigned __int16 *)(a2 + 48) | (*(unsigned __int8 *)(a2 + 50) << 16), BYTE2(v11) & 1);
    uint64_t v18 = *(void *)(a1 + 32);
    unint64_t v19 = *(void *)(a1 + 40);
    char v20 = *(unsigned char *)(a1 + 50);
    *(void *)(a1 + 32)  = v16;
    *(void *)(a1 + 40)  = v17;
    uint64_t v21 = *(unsigned __int16 *)(a1 + 48);
    *(_WORD *)(a1 + 48)  = v11;
    *(unsigned char *)(a1 + 50)  = BYTE2(v11) & 1;
    sub_1001331A0(v18, v19, v21, v20);
  }
  uint64_t v22 = (long long *)(a1 + 56);
  uint64_t v24 = (long long *)(a2 + 56);
  uint64_t v23 = *(unsigned __int8 *)(a2 + 56);
  if (*(unsigned char *)(a1 + 56) == 4)
  {
    if (v23 == 4)
    {
      long long v25 = *v24;
      *(void *)(a1 + 72)  = *(void *)(a2 + 72);
      *uint64_t v22 = v25;
    }
    else
    {
      *(unsigned char *)(a1 + 56)  = v23;
      uint64_t v28 = *(void *)(a2 + 64);
      unint64_t v27 = *(void *)(a2 + 72);
      sub_100013D44(v28, v27);
      *(void *)(a1 + 64)  = v28;
      *(void *)(a1 + 72)  = v27;
    }
  }
  else if (v23 == 4)
  {
    sub_1001B9F44(a1 + 56);
    uint64_t v26 = *(void *)(a2 + 72);
    *uint64_t v22 = *v24;
    *(void *)(a1 + 72)  = v26;
  }
  else
  {
    *(unsigned char *)(a1 + 56)  = v23;
    uint64_t v30 = *(void *)(a2 + 64);
    unint64_t v29 = *(void *)(a2 + 72);
    sub_100013D44(v30, v29);
    uint64_t v31 = *(void *)(a1 + 64);
    unint64_t v32 = *(void *)(a1 + 72);
    *(void *)(a1 + 64)  = v30;
    *(void *)(a1 + 72)  = v29;
    sub_10000C970(v31, v32);
  }
  return a1;
}

__n128 initializeWithTake for NANAttribute.ServiceDescriptor(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1  = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48)  = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64)  = v4;
  *(__n128 *)(a1 + 16)  = result;
  *(_OWORD *)(a1 + 32)  = v3;
  return result;
}

uint64_t assignWithTake for NANAttribute.ServiceDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  sub_10000C970(v4, v5);
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  *(_WORD *)(a1 + 17)  = *(_WORD *)(a2 + 17);
  *(_WORD *)(a1 + 20)  = *(_WORD *)(a2 + 20);
  *(unsigned char *)(a1 + 22)  = *(unsigned char *)(a2 + 22);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v6 = (_OWORD *)(a2 + 32);
  if (*(unsigned __int8 *)(a1 + 50) == 255) {
    goto LABEL_4;
  }
  unsigned int v7 = *(unsigned __int16 *)(a2 + 48) | (*(unsigned __int8 *)(a2 + 50) << 16);
  if (HIWORD(v7) > 0xFEu)
  {
    sub_1000380B4(a1 + 32, &qword_100483060);
LABEL_4:
    *(_OWORD *)(a1 + 32)  = *v6;
    *(_DWORD *)(a1 + 47)  = *(_DWORD *)(a2 + 47);
    goto LABEL_6;
  }
  uint64_t v8 = *(unsigned __int16 *)(a1 + 48) | (*(unsigned __int8 *)(a1 + 50) << 16);
  uint64_t v9 = *(void *)(a1 + 32);
  unint64_t v10 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32)  = *v6;
  *(_WORD *)(a1 + 48)  = v7;
  *(unsigned char *)(a1 + 50)  = BYTE2(v7) & 1;
  sub_1001331A0(v9, v10, v8, BYTE2(v8) & 1);
LABEL_6:
  uint64_t v11 = *(unsigned __int8 *)(a2 + 56);
  if (*(unsigned char *)(a1 + 56) != 4)
  {
    if (v11 != 4)
    {
      *(unsigned char *)(a1 + 56)  = v11;
      uint64_t v12 = *(void *)(a1 + 64);
      unint64_t v13 = *(void *)(a1 + 72);
      *(_OWORD *)(a1 + 64)  = *(_OWORD *)(a2 + 64);
      sub_10000C970(v12, v13);
      return a1;
    }
    sub_1001B9F44(a1 + 56);
  }
  *(_OWORD *)(a1 + 56)  = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72)  = *(void *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute.ServiceDescriptor(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 80)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3)  = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.ServiceDescriptor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 72)  = 0;
    *(_OWORD *)(result + 56)  = 0u;
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 80)  = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 80)  = 0;
    }
    if (a2) {
      *(void *)(result + 24)  = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.ServiceDescriptor()
{
  return &type metadata for NANAttribute.ServiceDescriptor;
}

ValueMetadata *type metadata accessor for NANAttribute.ServiceDescriptor.Control()
{
  return &type metadata for NANAttribute.ServiceDescriptor.Control;
}

ValueMetadata *type metadata accessor for NANAttribute.ServiceDescriptor.Control.ControlType()
{
  return &type metadata for NANAttribute.ServiceDescriptor.Control.ControlType;
}

ValueMetadata *type metadata accessor for NANAttribute.ServiceDescriptor.ServiceResponseFilterControl()
{
  return &type metadata for NANAttribute.ServiceDescriptor.ServiceResponseFilterControl;
}

ValueMetadata *type metadata accessor for NANAttribute.ServiceDescriptor.ServiceResponseFilterControl.FilterType()
{
  return &type metadata for NANAttribute.ServiceDescriptor.ServiceResponseFilterControl.FilterType;
}

uint64_t initializeBufferWithCopyOfBuffer for NANAttribute.ServiceDescriptor.ServiceFilterControl(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for NANAttribute.ServiceDescriptor.ServiceFilterControl()
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for NANAttribute.ServiceDescriptor.ServiceFilterControl(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for NANAttribute.ServiceDescriptor.ServiceFilterControl(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for NANAttribute.ServiceDescriptor.ServiceFilterControl()
{
  return &type metadata for NANAttribute.ServiceDescriptor.ServiceFilterControl;
}

uint64_t destroy for NANAttribute.ServiceDescriptorExtension(uint64_t result)
{
  if (*(unsigned char *)(result + 16) != 4) {
    return sub_10000C970(*(void *)(result + 24), *(void *)(result + 32));
  }
  return result;
}

uint64_t initializeWithCopy for NANAttribute.ServiceDescriptorExtension(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(_WORD *)(a1 + 2)  = *(_WORD *)(a2 + 2);
  *(_DWORD *)(a1 + 4)  = *(_DWORD *)(a2 + 4);
  *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
  *(_WORD *)(a1 + 9)  = *(_WORD *)(a2 + 9);
  uint64_t v3 = *(unsigned __int8 *)(a2 + 16);
  if (v3 == 4)
  {
    *(_OWORD *)(a1 + 16)  = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  }
  else
  {
    *(unsigned char *)(a1 + 16)  = v3;
    uint64_t v4 = *(void *)(a2 + 24);
    unint64_t v5 = *(void *)(a2 + 32);
    sub_100013D44(v4, v5);
    *(void *)(a1 + 24)  = v4;
    *(void *)(a1 + 32)  = v5;
  }
  return a1;
}

uint64_t assignWithCopy for NANAttribute.ServiceDescriptorExtension(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(_WORD *)(a1 + 2)  = *(_WORD *)(a2 + 2);
  int v3 = *(_DWORD *)(a2 + 4);
  *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
  *(_DWORD *)(a1 + 4)  = v3;
  *(_WORD *)(a1 + 9)  = *(_WORD *)(a2 + 9);
  uint64_t v4 = a1 + 16;
  uint64_t v6 = (long long *)(a2 + 16);
  uint64_t v5 = *(unsigned __int8 *)(a2 + 16);
  if (*(unsigned char *)(a1 + 16) == 4)
  {
    if (v5 == 4)
    {
      long long v7 = *v6;
      *(void *)(a1 + 32)  = *(void *)(a2 + 32);
      *(_OWORD *)uint64_t v4 = v7;
    }
    else
    {
      *(unsigned char *)(a1 + 16)  = v5;
      uint64_t v9 = *(void *)(a2 + 24);
      unint64_t v10 = *(void *)(a2 + 32);
      sub_100013D44(v9, v10);
      *(void *)(a1 + 24)  = v9;
      *(void *)(a1 + 32)  = v10;
    }
  }
  else if (v5 == 4)
  {
    sub_1001B9F44(a1 + 16);
    uint64_t v8 = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v4 = *v6;
    *(void *)(v4 + 16)  = v8;
  }
  else
  {
    *(unsigned char *)(a1 + 16)  = v5;
    uint64_t v11 = *(void *)(a2 + 24);
    unint64_t v12 = *(void *)(a2 + 32);
    sub_100013D44(v11, v12);
    uint64_t v13 = *(void *)(a1 + 24);
    unint64_t v14 = *(void *)(a1 + 32);
    *(void *)(a1 + 24)  = v11;
    *(void *)(a1 + 32)  = v12;
    sub_10000C970(v13, v14);
  }
  return a1;
}

uint64_t assignWithTake for NANAttribute.ServiceDescriptorExtension(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(_WORD *)(a1 + 2)  = *(_WORD *)(a2 + 2);
  *(_DWORD *)(a1 + 4)  = *(_DWORD *)(a2 + 4);
  *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
  *(_WORD *)(a1 + 9)  = *(_WORD *)(a2 + 9);
  uint64_t v3 = a1 + 16;
  uint64_t v5 = a2 + 16;
  uint64_t v4 = *(unsigned __int8 *)(a2 + 16);
  if (*(unsigned char *)(a1 + 16) != 4)
  {
    if (v4 != 4)
    {
      *(unsigned char *)(a1 + 16)  = v4;
      uint64_t v6 = *(void *)(a1 + 24);
      unint64_t v7 = *(void *)(a1 + 32);
      *(_OWORD *)(a1 + 24)  = *(_OWORD *)(a2 + 24);
      sub_10000C970(v6, v7);
      return a1;
    }
    sub_1001B9F44(a1 + 16);
  }
  *(_OWORD *)uint64_t v3 = *(_OWORD *)v5;
  *(void *)(v3 + 16)  = *(void *)(v5 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute.ServiceDescriptorExtension(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 252);
  }
  if (*(unsigned __int8 *)(a1 + 16) <= 4u) {
    int v3 = 4;
  }
  else {
    int v3 = *(unsigned __int8 *)(a1 + 16);
  }
  int v4 = v3 - 5;
  if (*(unsigned __int8 *)(a1 + 16) < 4u) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.ServiceDescriptorExtension(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_OWORD *)(result + 8)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(void *)__n128 result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 40)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 40)  = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16)  = a2 + 4;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.ServiceDescriptorExtension()
{
  return &type metadata for NANAttribute.ServiceDescriptorExtension;
}

ValueMetadata *type metadata accessor for NANAttribute.ServiceDescriptorExtension.Control()
{
  return &type metadata for NANAttribute.ServiceDescriptorExtension.Control;
}

ValueMetadata *type metadata accessor for NANAttribute.ServiceDescriptorExtension.RangeLimit()
{
  return &type metadata for NANAttribute.ServiceDescriptorExtension.RangeLimit;
}

ValueMetadata *type metadata accessor for NANAttribute.ConnectionCapability()
{
  return &type metadata for NANAttribute.ConnectionCapability;
}

uint64_t destroy for NANAttribute.WLANInfrastructure(uint64_t a1)
{
  return sub_10000C970(*(void *)(a1 + 24), *(void *)(a1 + 32));
}

uint64_t initializeWithCopy for NANAttribute.WLANInfrastructure(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4)  = *(_WORD *)(a2 + 4);
  *(_DWORD *)(a1 + 6)  = *(_DWORD *)(a2 + 6);
  *(_WORD *)(a1 + 10)  = *(_WORD *)(a2 + 10);
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  *(_WORD *)(a1 + 17)  = *(_WORD *)(a2 + 17);
  uint64_t v4 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  sub_100013D44(v4, v5);
  *(void *)(a1 + 24)  = v4;
  *(void *)(a1 + 32)  = v5;
  *(unsigned char *)(a1 + 40)  = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t assignWithCopy for NANAttribute.WLANInfrastructure(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1)  = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2)  = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3)  = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(a1 + 4)  = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a1 + 5)  = *(unsigned char *)(a2 + 5);
  *(unsigned char *)(a1 + 6)  = *(unsigned char *)(a2 + 6);
  *(unsigned char *)(a1 + 7)  = *(unsigned char *)(a2 + 7);
  *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9)  = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(a1 + 10)  = *(unsigned char *)(a2 + 10);
  *(unsigned char *)(a1 + 11)  = *(unsigned char *)(a2 + 11);
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17)  = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18)  = *(unsigned char *)(a2 + 18);
  uint64_t v4 = *(void *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  sub_100013D44(v4, v5);
  uint64_t v6 = *(void *)(a1 + 24);
  unint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 24)  = v4;
  *(void *)(a1 + 32)  = v5;
  sub_10000C970(v6, v7);
  *(unsigned char *)(a1 + 40)  = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for NANAttribute.WLANInfrastructure(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  *(_DWORD *)(a1 + 8)  = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16)  = *(_WORD *)(a2 + 16);
  *(unsigned char *)(a1 + 18)  = *(unsigned char *)(a2 + 18);
  uint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24)  = *(_OWORD *)(a2 + 24);
  sub_10000C970(v4, v5);
  *(unsigned char *)(a1 + 40)  = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute.WLANInfrastructure(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 18);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.WLANInfrastructure(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(unsigned char *)(result + 40)  = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41)  = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 18)  = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.WLANInfrastructure()
{
  return &type metadata for NANAttribute.WLANInfrastructure;
}

ValueMetadata *type metadata accessor for NANAttribute.WLANInfrastructure.DeviceRole()
{
  return &type metadata for NANAttribute.WLANInfrastructure.DeviceRole;
}

uint64_t initializeWithCopy for NANAttribute.P2POperation(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 1)  = *(_DWORD *)(a2 + 1);
  *(_WORD *)(a1 + 5)  = *(_WORD *)(a2 + 5);
  *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
  *(_WORD *)(a1 + 9)  = *(_WORD *)(a2 + 9);
  uint64_t v3 = *(void *)(a2 + 16);
  unint64_t v4 = *(void *)(a2 + 24);
  sub_100013D44(v3, v4);
  *(void *)(a1 + 16)  = v3;
  *(void *)(a1 + 24)  = v4;
  return a1;
}

uint64_t assignWithCopy for NANAttribute.P2POperation(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1)  = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2)  = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3)  = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(a1 + 4)  = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a1 + 5)  = *(unsigned char *)(a2 + 5);
  *(unsigned char *)(a1 + 6)  = *(unsigned char *)(a2 + 6);
  *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9)  = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(a1 + 10)  = *(unsigned char *)(a2 + 10);
  uint64_t v3 = *(void *)(a2 + 16);
  unint64_t v4 = *(void *)(a2 + 24);
  sub_100013D44(v3, v4);
  uint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 16)  = v3;
  *(void *)(a1 + 24)  = v4;
  sub_10000C970(v5, v6);
  return a1;
}

uint64_t assignWithTake for NANAttribute.P2POperation(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4)  = *(unsigned char *)(a2 + 4);
  *(_WORD *)(a1 + 5)  = *(_WORD *)(a2 + 5);
  *(_WORD *)(a1 + 8)  = *(_WORD *)(a2 + 8);
  *(unsigned char *)(a1 + 10)  = *(unsigned char *)(a2 + 10);
  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16)  = *(_OWORD *)(a2 + 16);
  sub_10000C970(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute.P2POperation(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 10);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.P2POperation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16)  = 0;
    *(void *)(result + 24)  = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8)  = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 32)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 32)  = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 10)  = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.P2POperation()
{
  return &type metadata for NANAttribute.P2POperation;
}

ValueMetadata *type metadata accessor for NANAttribute.P2POperation.DeviceRole()
{
  return &type metadata for NANAttribute.P2POperation.DeviceRole;
}

uint64_t initializeWithCopy for NANAttribute.IBSS(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4)  = *(_WORD *)(a2 + 4);
  *(_DWORD *)(a1 + 6)  = *(_DWORD *)(a2 + 6);
  *(_WORD *)(a1 + 10)  = *(_WORD *)(a2 + 10);
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  *(_WORD *)(a1 + 17)  = *(_WORD *)(a2 + 17);
  uint64_t v3 = *(void *)(a2 + 24);
  unint64_t v4 = *(void *)(a2 + 32);
  sub_100013D44(v3, v4);
  *(void *)(a1 + 24)  = v3;
  *(void *)(a1 + 32)  = v4;
  return a1;
}

uint64_t assignWithCopy for NANAttribute.IBSS(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1)  = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2)  = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3)  = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(a1 + 4)  = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a1 + 5)  = *(unsigned char *)(a2 + 5);
  *(unsigned char *)(a1 + 6)  = *(unsigned char *)(a2 + 6);
  *(unsigned char *)(a1 + 7)  = *(unsigned char *)(a2 + 7);
  *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9)  = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(a1 + 10)  = *(unsigned char *)(a2 + 10);
  *(unsigned char *)(a1 + 11)  = *(unsigned char *)(a2 + 11);
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17)  = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18)  = *(unsigned char *)(a2 + 18);
  uint64_t v3 = *(void *)(a2 + 24);
  unint64_t v4 = *(void *)(a2 + 32);
  sub_100013D44(v3, v4);
  uint64_t v5 = *(void *)(a1 + 24);
  unint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 24)  = v3;
  *(void *)(a1 + 32)  = v4;
  sub_10000C970(v5, v6);
  return a1;
}

uint64_t assignWithTake for NANAttribute.IBSS(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  *(_DWORD *)(a1 + 8)  = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16)  = *(_WORD *)(a2 + 16);
  *(unsigned char *)(a1 + 18)  = *(unsigned char *)(a2 + 18);
  uint64_t v3 = *(void *)(a1 + 24);
  unint64_t v4 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24)  = *(_OWORD *)(a2 + 24);
  sub_10000C970(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute.IBSS(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 18);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.IBSS(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 8)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 40)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 40)  = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 18)  = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.IBSS()
{
  return &type metadata for NANAttribute.IBSS;
}

uint64_t destroy for NANAttribute.Mesh(void *a1)
{
  sub_10000C970(a1[2], a1[3]);
  uint64_t v2 = a1[4];
  unint64_t v3 = a1[5];

  return sub_10000C970(v2, v3);
}

uint64_t initializeWithCopy for NANAttribute.Mesh(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4)  = *(_WORD *)(a2 + 4);
  *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
  *(_WORD *)(a1 + 9)  = *(_WORD *)(a2 + 9);
  uint64_t v4 = *(void *)(a2 + 16);
  unint64_t v5 = *(void *)(a2 + 24);
  sub_100013D44(v4, v5);
  *(void *)(a1 + 16)  = v4;
  *(void *)(a1 + 24)  = v5;
  uint64_t v7 = *(void *)(a2 + 32);
  unint64_t v6 = *(void *)(a2 + 40);
  sub_100013D44(v7, v6);
  *(void *)(a1 + 32)  = v7;
  *(void *)(a1 + 40)  = v6;
  return a1;
}

uint64_t assignWithCopy for NANAttribute.Mesh(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1)  = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2)  = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3)  = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(a1 + 4)  = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a1 + 5)  = *(unsigned char *)(a2 + 5);
  *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9)  = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(a1 + 10)  = *(unsigned char *)(a2 + 10);
  uint64_t v4 = *(void *)(a2 + 16);
  unint64_t v5 = *(void *)(a2 + 24);
  sub_100013D44(v4, v5);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 16)  = v4;
  *(void *)(a1 + 24)  = v5;
  sub_10000C970(v6, v7);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  sub_100013D44(v9, v8);
  uint64_t v10 = *(void *)(a1 + 32);
  unint64_t v11 = *(void *)(a1 + 40);
  *(void *)(a1 + 32)  = v9;
  *(void *)(a1 + 40)  = v8;
  sub_10000C970(v10, v11);
  return a1;
}

uint64_t assignWithTake for NANAttribute.Mesh(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4)  = *(_WORD *)(a2 + 4);
  *(_WORD *)(a1 + 8)  = *(_WORD *)(a2 + 8);
  *(unsigned char *)(a1 + 10)  = *(unsigned char *)(a2 + 10);
  uint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16)  = *(_OWORD *)(a2 + 16);
  sub_10000C970(v4, v5);
  uint64_t v6 = *(void *)(a1 + 32);
  unint64_t v7 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32)  = *(_OWORD *)(a2 + 32);
  sub_10000C970(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute.Mesh(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 10);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.Mesh(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 40)  = 0;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 48)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 48)  = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 10)  = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.Mesh()
{
  return &type metadata for NANAttribute.Mesh;
}

ValueMetadata *type metadata accessor for NANAttribute.FurtherServiceDiscovery()
{
  return &type metadata for NANAttribute.FurtherServiceDiscovery;
}

ValueMetadata *type metadata accessor for NANAttribute.FurtherAvailabilityMap()
{
  return &type metadata for NANAttribute.FurtherAvailabilityMap;
}

uint64_t sub_100223044(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4)  = *(_WORD *)(a2 + 4);
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  sub_100013D44(v3, v4);
  *(void *)(a1 + 8)  = v3;
  *(void *)(a1 + 16)  = v4;
  return a1;
}

uint64_t assignWithCopy for NANAttribute.Ranging(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1)  = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2)  = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3)  = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(a1 + 4)  = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a1 + 5)  = *(unsigned char *)(a2 + 5);
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  sub_100013D44(v3, v4);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 8)  = v3;
  *(void *)(a1 + 16)  = v4;
  sub_10000C970(v5, v6);
  return a1;
}

uint64_t assignWithTake for NANAttribute.Ranging(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4)  = *(_WORD *)(a2 + 4);
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  sub_10000C970(v3, v4);
  return a1;
}

ValueMetadata *type metadata accessor for NANAttribute.Ranging()
{
  return &type metadata for NANAttribute.Ranging;
}

ValueMetadata *type metadata accessor for NANAttribute.ClusterDiscovery()
{
  return &type metadata for NANAttribute.ClusterDiscovery;
}

uint64_t initializeBufferWithCopyOfBuffer for NANAttribute.DeviceCapability(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 7)  = *(_DWORD *)((char *)a2 + 7);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for NANAttribute.DeviceCapability(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 11)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for NANAttribute.DeviceCapability(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 10)  = 0;
    *(_WORD *)(result + 8)  = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 11)  = v3;
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceCapability()
{
  return &type metadata for NANAttribute.DeviceCapability;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation()
{
  return &type metadata for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceCapability.OperationMode()
{
  return &type metadata for NANAttribute.DeviceCapability.OperationMode;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceCapability.AnntenaCount()
{
  return &type metadata for NANAttribute.DeviceCapability.AnntenaCount;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceCapability.Capabilities()
{
  return &type metadata for NANAttribute.DeviceCapability.Capabilities;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceCapabilityExtension()
{
  return &type metadata for NANAttribute.DeviceCapabilityExtension;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceCapabilityExtension.RegulatoryInformationForSixGHz()
{
  return &type metadata for NANAttribute.DeviceCapabilityExtension.RegulatoryInformationForSixGHz;
}

uint64_t destroy for NANAttribute.Datapath(uint64_t result)
{
  if (*(unsigned char *)(result + 24) != 4) {
    return sub_10000C970(*(void *)(result + 32), *(void *)(result + 40));
  }
  return result;
}

uint64_t initializeWithCopy for NANAttribute.Datapath(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
  *(_DWORD *)(a1 + 3)  = *(_DWORD *)(a2 + 3);
  *(_WORD *)(a1 + 7)  = *(_WORD *)(a2 + 7);
  *(_DWORD *)(a1 + 9)  = *(_DWORD *)(a2 + 9);
  *(_DWORD *)(a1 + 16)  = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 13)  = *(_DWORD *)(a2 + 13);
  uint64_t v3 = *(unsigned __int8 *)(a2 + 24);
  if (v3 == 4)
  {
    *(_OWORD *)(a1 + 24)  = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  }
  else
  {
    *(unsigned char *)(a1 + 24)  = v3;
    uint64_t v4 = *(void *)(a2 + 32);
    unint64_t v5 = *(void *)(a2 + 40);
    sub_100013D44(v4, v5);
    *(void *)(a1 + 32)  = v4;
    *(void *)(a1 + 40)  = v5;
  }
  return a1;
}

uint64_t assignWithCopy for NANAttribute.Datapath(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1)  = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2)  = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3)  = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(a1 + 4)  = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a1 + 5)  = *(unsigned char *)(a2 + 5);
  *(unsigned char *)(a1 + 6)  = *(unsigned char *)(a2 + 6);
  *(unsigned char *)(a1 + 7)  = *(unsigned char *)(a2 + 7);
  *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9)  = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(a1 + 10)  = *(unsigned char *)(a2 + 10);
  *(_WORD *)(a1 + 11)  = *(_WORD *)(a2 + 11);
  int v3 = *(_DWORD *)(a2 + 13);
  *(_DWORD *)(a1 + 16)  = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 13)  = v3;
  uint64_t v4 = a1 + 24;
  unint64_t v6 = (long long *)(a2 + 24);
  uint64_t v5 = *(unsigned __int8 *)(a2 + 24);
  if (*(unsigned char *)(a1 + 24) == 4)
  {
    if (v5 == 4)
    {
      long long v7 = *v6;
      *(void *)(a1 + 40)  = *(void *)(a2 + 40);
      *(_OWORD *)uint64_t v4 = v7;
    }
    else
    {
      *(unsigned char *)(a1 + 24)  = v5;
      uint64_t v9 = *(void *)(a2 + 32);
      unint64_t v10 = *(void *)(a2 + 40);
      sub_100013D44(v9, v10);
      *(void *)(a1 + 32)  = v9;
      *(void *)(a1 + 40)  = v10;
    }
  }
  else if (v5 == 4)
  {
    sub_1001B9F44(a1 + 24);
    uint64_t v8 = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v4 = *v6;
    *(void *)(v4 + 16)  = v8;
  }
  else
  {
    *(unsigned char *)(a1 + 24)  = v5;
    uint64_t v11 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40);
    sub_100013D44(v11, v12);
    uint64_t v13 = *(void *)(a1 + 32);
    unint64_t v14 = *(void *)(a1 + 40);
    *(void *)(a1 + 32)  = v11;
    *(void *)(a1 + 40)  = v12;
    sub_10000C970(v13, v14);
  }
  return a1;
}

uint64_t assignWithTake for NANAttribute.Datapath(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
  *(_DWORD *)(a1 + 9)  = *(_DWORD *)(a2 + 9);
  *(_DWORD *)(a1 + 13)  = *(_DWORD *)(a2 + 13);
  *(_DWORD *)(a1 + 16)  = *(_DWORD *)(a2 + 16);
  uint64_t v3 = a1 + 24;
  uint64_t v5 = a2 + 24;
  uint64_t v4 = *(unsigned __int8 *)(a2 + 24);
  if (*(unsigned char *)(a1 + 24) != 4)
  {
    if (v4 != 4)
    {
      *(unsigned char *)(a1 + 24)  = v4;
      uint64_t v6 = *(void *)(a1 + 32);
      unint64_t v7 = *(void *)(a1 + 40);
      *(_OWORD *)(a1 + 32)  = *(_OWORD *)(a2 + 32);
      sub_10000C970(v6, v7);
      return a1;
    }
    sub_1001B9F44(a1 + 24);
  }
  *(_OWORD *)uint64_t v3 = *(_OWORD *)v5;
  *(void *)(v3 + 16)  = *(void *)(v5 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute.Datapath(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 252);
  }
  if (*(unsigned __int8 *)(a1 + 24) <= 4u) {
    int v3 = 4;
  }
  else {
    int v3 = *(unsigned __int8 *)(a1 + 24);
  }
  int v4 = v3 - 5;
  if (*(unsigned __int8 *)(a1 + 24) < 4u) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.Datapath(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(void *)(result + 40)  = 0;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)__n128 result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 48)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 48)  = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24)  = a2 + 4;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.Datapath()
{
  return &type metadata for NANAttribute.Datapath;
}

ValueMetadata *type metadata accessor for NANAttribute.Datapath.AttributeType()
{
  return &type metadata for NANAttribute.Datapath.AttributeType;
}

ValueMetadata *type metadata accessor for NANAttribute.Datapath.Status()
{
  return &type metadata for NANAttribute.Datapath.Status;
}

ValueMetadata *type metadata accessor for NANAttribute.Datapath.Control()
{
  return &type metadata for NANAttribute.Datapath.Control;
}

uint64_t destroy for NANAttribute.DatapathExtension(uint64_t result)
{
  uint64_t v1 = result;
  unint64_t v2 = *(void *)(result + 32);
  if (v2 >> 60 != 15) {
    __n128 result = sub_10000C970(*(void *)(result + 24), v2);
  }
  if (*(unsigned char *)(v1 + 40) != 4)
  {
    uint64_t v3 = *(void *)(v1 + 48);
    unint64_t v4 = *(void *)(v1 + 56);
    return sub_10000C970(v3, v4);
  }
  return result;
}

uint64_t initializeWithCopy for NANAttribute.DatapathExtension(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
  *(_DWORD *)(a1 + 3)  = *(_DWORD *)(a2 + 3);
  *(_WORD *)(a1 + 7)  = *(_WORD *)(a2 + 7);
  *(_DWORD *)(a1 + 9)  = *(_DWORD *)(a2 + 9);
  *(_DWORD *)(a1 + 16)  = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 13)  = *(_DWORD *)(a2 + 13);
  unint64_t v4 = (uint64_t *)(a2 + 24);
  unint64_t v5 = *(void *)(a2 + 32);
  if (v5 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 24)  = *(_OWORD *)v4;
  }
  else
  {
    uint64_t v6 = *v4;
    sub_100013D44(*v4, *(void *)(a2 + 32));
    *(void *)(a1 + 24)  = v6;
    *(void *)(a1 + 32)  = v5;
  }
  uint64_t v7 = *(unsigned __int8 *)(a2 + 40);
  if (v7 == 4)
  {
    *(_OWORD *)(a1 + 40)  = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56)  = *(void *)(a2 + 56);
  }
  else
  {
    *(unsigned char *)(a1 + 40)  = v7;
    uint64_t v9 = *(void *)(a2 + 48);
    unint64_t v8 = *(void *)(a2 + 56);
    sub_100013D44(v9, v8);
    *(void *)(a1 + 48)  = v9;
    *(void *)(a1 + 56)  = v8;
  }
  return a1;
}

uint64_t assignWithCopy for NANAttribute.DatapathExtension(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1)  = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2)  = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3)  = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(a1 + 4)  = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a1 + 5)  = *(unsigned char *)(a2 + 5);
  *(unsigned char *)(a1 + 6)  = *(unsigned char *)(a2 + 6);
  *(unsigned char *)(a1 + 7)  = *(unsigned char *)(a2 + 7);
  *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9)  = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(a1 + 10)  = *(unsigned char *)(a2 + 10);
  *(_WORD *)(a1 + 11)  = *(_WORD *)(a2 + 11);
  int v4 = *(_DWORD *)(a2 + 13);
  *(_DWORD *)(a1 + 16)  = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 13)  = v4;
  unint64_t v5 = (_OWORD *)(a1 + 24);
  uint64_t v6 = (uint64_t *)(a2 + 24);
  unint64_t v7 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32) >> 60 == 15)
  {
    if (v7 >> 60 != 15)
    {
      uint64_t v8 = *v6;
      sub_100013D44(*v6, *(void *)(a2 + 32));
      *(void *)(a1 + 24)  = v8;
      *(void *)(a1 + 32)  = v7;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v7 >> 60 == 15)
  {
    sub_1002238CC(a1 + 24);
LABEL_6:
    *unint64_t v5 = *(_OWORD *)v6;
    goto LABEL_8;
  }
  uint64_t v9 = *v6;
  sub_100013D44(*v6, *(void *)(a2 + 32));
  uint64_t v10 = *(void *)(a1 + 24);
  unint64_t v11 = *(void *)(a1 + 32);
  *(void *)(a1 + 24)  = v9;
  *(void *)(a1 + 32)  = v7;
  sub_10000C970(v10, v11);
LABEL_8:
  unint64_t v12 = (long long *)(a1 + 40);
  unint64_t v14 = (long long *)(a2 + 40);
  uint64_t v13 = *(unsigned __int8 *)(a2 + 40);
  if (*(unsigned char *)(a1 + 40) == 4)
  {
    if (v13 == 4)
    {
      long long v15 = *v14;
      *(void *)(a1 + 56)  = *(void *)(a2 + 56);
      *unint64_t v12 = v15;
    }
    else
    {
      *(unsigned char *)(a1 + 40)  = v13;
      uint64_t v18 = *(void *)(a2 + 48);
      unint64_t v17 = *(void *)(a2 + 56);
      sub_100013D44(v18, v17);
      *(void *)(a1 + 48)  = v18;
      *(void *)(a1 + 56)  = v17;
    }
  }
  else if (v13 == 4)
  {
    sub_1001B9F44(a1 + 40);
    uint64_t v16 = *(void *)(a2 + 56);
    *unint64_t v12 = *v14;
    *(void *)(a1 + 56)  = v16;
  }
  else
  {
    *(unsigned char *)(a1 + 40)  = v13;
    uint64_t v20 = *(void *)(a2 + 48);
    unint64_t v19 = *(void *)(a2 + 56);
    sub_100013D44(v20, v19);
    uint64_t v21 = *(void *)(a1 + 48);
    unint64_t v22 = *(void *)(a1 + 56);
    *(void *)(a1 + 48)  = v20;
    *(void *)(a1 + 56)  = v19;
    sub_10000C970(v21, v22);
  }
  return a1;
}

uint64_t sub_1002238CC(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for NANAttribute.DatapathExtension(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
  *(_DWORD *)(a1 + 9)  = *(_DWORD *)(a2 + 9);
  *(_DWORD *)(a1 + 13)  = *(_DWORD *)(a2 + 13);
  *(_DWORD *)(a1 + 16)  = *(_DWORD *)(a2 + 16);
  int v4 = (_OWORD *)(a1 + 24);
  unint64_t v5 = (_OWORD *)(a2 + 24);
  unint64_t v6 = *(void *)(a1 + 32);
  if (v6 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v7 = *(void *)(a2 + 32);
  if (v7 >> 60 == 15)
  {
    sub_1002238CC(a1 + 24);
LABEL_4:
    *int v4 = *v5;
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)(a1 + 24);
  *(void *)(a1 + 24)  = *(void *)v5;
  *(void *)(a1 + 32)  = v7;
  sub_10000C970(v8, v6);
LABEL_6:
  uint64_t v9 = *(unsigned __int8 *)(a2 + 40);
  if (*(unsigned char *)(a1 + 40) != 4)
  {
    if (v9 != 4)
    {
      *(unsigned char *)(a1 + 40)  = v9;
      uint64_t v10 = *(void *)(a1 + 48);
      unint64_t v11 = *(void *)(a1 + 56);
      *(_OWORD *)(a1 + 48)  = *(_OWORD *)(a2 + 48);
      sub_10000C970(v10, v11);
      return a1;
    }
    sub_1001B9F44(a1 + 40);
  }
  *(_OWORD *)(a1 + 40)  = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56)  = *(void *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute.DatapathExtension(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 252);
  }
  if (*(unsigned __int8 *)(a1 + 40) <= 4u) {
    int v3 = 4;
  }
  else {
    int v3 = *(unsigned __int8 *)(a1 + 40);
  }
  int v4 = v3 - 5;
  if (*(unsigned __int8 *)(a1 + 40) < 4u) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.DatapathExtension(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(void *)(result + 56)  = 0;
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)__n128 result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 64)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 64)  = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40)  = a2 + 4;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.DatapathExtension()
{
  return &type metadata for NANAttribute.DatapathExtension;
}

ValueMetadata *type metadata accessor for NANAttribute.DatapathExtension.Control()
{
  return &type metadata for NANAttribute.DatapathExtension.Control;
}

ValueMetadata *type metadata accessor for NANAttribute.DatapathExtension.ServiceInfoType()
{
  return &type metadata for NANAttribute.DatapathExtension.ServiceInfoType;
}

uint64_t sub_100223AF0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(_WORD *)(a1 + 2)  = *(_WORD *)(a2 + 2);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NANAttribute.Availability(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(_WORD *)(a1 + 2)  = *(_WORD *)(a2 + 2);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for NANAttribute.Availability(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(_WORD *)(a1 + 2)  = *(_WORD *)(a2 + 2);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for NANAttribute.Availability()
{
  return &type metadata for NANAttribute.Availability;
}

ValueMetadata *type metadata accessor for NANAttribute.Availability.Control()
{
  return &type metadata for NANAttribute.Availability.Control;
}

uint64_t sub_100223BE4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4)  = *(_WORD *)(a2 + 4);
  *(unsigned char *)(a1 + 6)  = *(unsigned char *)(a2 + 6);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NANAttribute.DataCluster(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1)  = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2)  = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3)  = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(a1 + 4)  = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a1 + 5)  = *(unsigned char *)(a2 + 5);
  *(unsigned char *)(a1 + 6)  = *(unsigned char *)(a2 + 6);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for NANAttribute.DataCluster(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4)  = *(unsigned char *)(a2 + 4);
  *(_WORD *)(a1 + 5)  = *(_WORD *)(a2 + 5);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for NANAttribute.DataCluster()
{
  return &type metadata for NANAttribute.DataCluster;
}

ValueMetadata *type metadata accessor for NANAttribute.DataCluster.Control()
{
  return &type metadata for NANAttribute.DataCluster.Control;
}

uint64_t initializeWithCopy for NANAttribute.DeviceLink(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4)  = *(_WORD *)(a2 + 4);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NANAttribute.DeviceLink(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1)  = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2)  = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3)  = *(unsigned char *)(a2 + 3);
  *(_WORD *)(a1 + 4)  = *(_WORD *)(a2 + 4);
  uint64_t v3 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8)  = v3;
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for NANAttribute.DeviceLink(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4)  = *(_WORD *)(a2 + 4);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceLink()
{
  return &type metadata for NANAttribute.DeviceLink;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceLink.Control()
{
  return &type metadata for NANAttribute.DeviceLink.Control;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceLink.Control.SetupReason()
{
  return &type metadata for NANAttribute.DeviceLink.Control.SetupReason;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceLink.AttributeType()
{
  return &type metadata for NANAttribute.DeviceLink.AttributeType;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceLink.Status()
{
  return &type metadata for NANAttribute.DeviceLink.Status;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceLinkQoS()
{
  return &type metadata for NANAttribute.DeviceLinkQoS;
}

__n128 initializeWithCopy for NANAttribute.UnalignedSchedule(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 14)  = *(_OWORD *)(a2 + 14);
  *(__n128 *)a1  = result;
  return result;
}

uint64_t getEnumTagSinglePayload for NANAttribute.UnalignedSchedule(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 30)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 29);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = (v3 ^ 0xFF) - 1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.UnalignedSchedule(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 8)  = 0;
    *(void *)(result + 16)  = 0;
    *(_WORD *)(result + 28)  = 0;
    *(_DWORD *)(result + 24)  = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 30)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 30)  = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 29)  = ~(_BYTE)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.UnalignedSchedule()
{
  return &type metadata for NANAttribute.UnalignedSchedule;
}

ValueMetadata *type metadata accessor for NANAttribute.UnalignedSchedule.UnalignedWindowOverwrite()
{
  return &type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowOverwrite;
}

ValueMetadata *type metadata accessor for NANAttribute.UnalignedSchedule.UnalignedWindowControl()
{
  return &type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowControl;
}

ValueMetadata *type metadata accessor for NANAttribute.UnalignedSchedule.UnalignedWindowControl.EntryType()
{
  return &type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowControl.EntryType;
}

uint64_t initializeBufferWithCopyOfBuffer for NANAttribute.RangingInformation(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(unsigned char *)(result + 4)  = *((unsigned char *)a2 + 4);
  *(_DWORD *)__n128 result = v2;
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.RangingInformation()
{
  return &type metadata for NANAttribute.RangingInformation;
}

ValueMetadata *type metadata accessor for NANAttribute.RangingInformation.LocationInformation()
{
  return &type metadata for NANAttribute.RangingInformation.LocationInformation;
}

uint64_t sub_100223FB0(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4)  = v3;
  *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NANAttribute.RangingSetup(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1)  = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2)  = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3)  = *(unsigned char *)(a2 + 3);
  int v3 = *(_DWORD *)(a2 + 4);
  *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
  *(_DWORD *)(a1 + 4)  = v3;
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for NANAttribute.RangingSetup(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4)  = v3;
  *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for NANAttribute.RangingSetup()
{
  return &type metadata for NANAttribute.RangingSetup;
}

ValueMetadata *type metadata accessor for NANAttribute.RangingSetup.AttributeType()
{
  return &type metadata for NANAttribute.RangingSetup.AttributeType;
}

ValueMetadata *type metadata accessor for NANAttribute.RangingSetup.Status()
{
  return &type metadata for NANAttribute.RangingSetup.Status;
}

ValueMetadata *type metadata accessor for NANAttribute.RangingSetup.Control()
{
  return &type metadata for NANAttribute.RangingSetup.Control;
}

ValueMetadata *type metadata accessor for NANAttribute.RangingSetup.FineTimingMeasurementParameters()
{
  return &type metadata for NANAttribute.RangingSetup.FineTimingMeasurementParameters;
}

ValueMetadata *type metadata accessor for NANAttribute.ElementContainer()
{
  return &type metadata for NANAttribute.ElementContainer;
}

uint64_t getEnumTagSinglePayload for NANAttribute.ExtendedWLANInfrastructure(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 20)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 12);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.ExtendedWLANInfrastructure(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)(result + 16)  = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8)  = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 20)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 20)  = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 12)  = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.ExtendedWLANInfrastructure()
{
  return &type metadata for NANAttribute.ExtendedWLANInfrastructure;
}

ValueMetadata *type metadata accessor for NANAttribute.ExtendedP2POperation()
{
  return &type metadata for NANAttribute.ExtendedP2POperation;
}

ValueMetadata *type metadata accessor for NANAttribute.ExtendedIBSS()
{
  return &type metadata for NANAttribute.ExtendedIBSS;
}

uint64_t initializeWithCopy for NANAttribute.ExtendedMesh(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4)  = v3;
  *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
  *(_DWORD *)(a1 + 10)  = *(_DWORD *)(a2 + 10);
  uint64_t v4 = *(void *)(a2 + 16);
  unint64_t v5 = *(void *)(a2 + 24);
  sub_100013D44(v4, v5);
  *(void *)(a1 + 16)  = v4;
  *(void *)(a1 + 24)  = v5;
  return a1;
}

uint64_t assignWithCopy for NANAttribute.ExtendedMesh(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1)  = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2)  = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3)  = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(a1 + 4)  = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a1 + 5)  = *(unsigned char *)(a2 + 5);
  *(unsigned char *)(a1 + 6)  = *(unsigned char *)(a2 + 6);
  *(unsigned char *)(a1 + 7)  = *(unsigned char *)(a2 + 7);
  *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
  *(_WORD *)(a1 + 10)  = *(_WORD *)(a2 + 10);
  *(_WORD *)(a1 + 12)  = *(_WORD *)(a2 + 12);
  uint64_t v3 = *(void *)(a2 + 16);
  unint64_t v4 = *(void *)(a2 + 24);
  sub_100013D44(v3, v4);
  uint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 16)  = v3;
  *(void *)(a1 + 24)  = v4;
  sub_10000C970(v5, v6);
  return a1;
}

uint64_t assignWithTake for NANAttribute.ExtendedMesh(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
  *(_DWORD *)(a1 + 10)  = *(_DWORD *)(a2 + 10);
  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16)  = *(_OWORD *)(a2 + 16);
  sub_10000C970(v3, v4);
  return a1;
}

ValueMetadata *type metadata accessor for NANAttribute.ExtendedMesh()
{
  return &type metadata for NANAttribute.ExtendedMesh;
}

ValueMetadata *type metadata accessor for NANAttribute.FineTimingMeasurementRangeReport()
{
  return &type metadata for NANAttribute.FineTimingMeasurementRangeReport;
}

void *initializeBufferWithCopyOfBuffer for NANAttribute.FineTimingMeasurementRangeReport.Entry(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)((char *)result + 6)  = *(uint64_t *)((char *)a2 + 6);
  *__n128 result = v2;
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.FineTimingMeasurementRangeReport.Entry()
{
  return &type metadata for NANAttribute.FineTimingMeasurementRangeReport.Entry;
}

ValueMetadata *type metadata accessor for NANAttribute.CipherSuiteInformation()
{
  return &type metadata for NANAttribute.CipherSuiteInformation;
}

ValueMetadata *type metadata accessor for NANAttribute.CipherSuiteInformation.Capabilities()
{
  return &type metadata for NANAttribute.CipherSuiteInformation.Capabilities;
}

ValueMetadata *type metadata accessor for NANAttribute.CipherSuiteInformation.Capabilities.ReplayCounters()
{
  return &type metadata for NANAttribute.CipherSuiteInformation.Capabilities.ReplayCounters;
}

ValueMetadata *type metadata accessor for NANAttribute.CipherSuiteInformation.Capabilities.GroupKeySupport()
{
  return &type metadata for NANAttribute.CipherSuiteInformation.Capabilities.GroupKeySupport;
}

ValueMetadata *type metadata accessor for NANAttribute.CipherSuiteInformation.Capabilities.BroadcastIntegrityProtocol()
{
  return &type metadata for NANAttribute.CipherSuiteInformation.Capabilities.BroadcastIntegrityProtocol;
}

uint64_t getEnumTagSinglePayload for NANAttribute.CipherSuiteInformation.CipherSuite(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 65287 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65287 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65287;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65287;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65287;
    }
  }
LABEL_17:
  unsigned int v6 = *(unsigned __int8 *)a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.CipherSuiteInformation.CipherSuite(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65287 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65287 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 16) + 1;
    *(_WORD *)__n128 result = a2 - 249;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2)  = v6;
        break;
      case 2:
        *(_WORD *)(result + 2)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100224500);
      case 4:
        *(_DWORD *)(result + 2)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)__n128 result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.CipherSuiteInformation.CipherSuite()
{
  return &type metadata for NANAttribute.CipherSuiteInformation.CipherSuite;
}

ValueMetadata *type metadata accessor for NANAttribute.SecurityContextInformation()
{
  return &type metadata for NANAttribute.SecurityContextInformation;
}

uint64_t assignWithCopy for NANAttribute.SecurityContextInformation.SecurityContextIdentifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1)  = *(unsigned char *)(a2 + 1);
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  sub_100013D44(v3, v4);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 8)  = v3;
  *(void *)(a1 + 16)  = v4;
  sub_10000C970(v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for NANAttribute.SecurityContextInformation.SecurityContextIdentifier()
{
  return &type metadata for NANAttribute.SecurityContextInformation.SecurityContextIdentifier;
}

ValueMetadata *type metadata accessor for NANAttribute.SecurityContextInformation.SecurityContextIdentifier.IdentifierType()
{
  return &type metadata for NANAttribute.SecurityContextInformation.SecurityContextIdentifier.IdentifierType;
}

ValueMetadata *type metadata accessor for NANAttribute.SharedKeyDescriptor()
{
  return &type metadata for NANAttribute.SharedKeyDescriptor;
}

uint64_t initializeWithCopy for NANAttribute.MulticastScheduleChange(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(_WORD *)(a1 + 16)  = *(_WORD *)(a2 + 16);
  *(unsigned char *)(a1 + 18)  = *(unsigned char *)(a2 + 18);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NANAttribute.MulticastScheduleChange(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16)  = *(_WORD *)(a2 + 16);
  *(unsigned char *)(a1 + 18)  = *(unsigned char *)(a2 + 18);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for NANAttribute.MulticastScheduleChange(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(_WORD *)(a1 + 16)  = *(_WORD *)(a2 + 16);
  *(unsigned char *)(a1 + 18)  = *(unsigned char *)(a2 + 18);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for NANAttribute.MulticastScheduleChange()
{
  return &type metadata for NANAttribute.MulticastScheduleChange;
}

ValueMetadata *type metadata accessor for NANAttribute.MulticastScheduleChange.Control()
{
  return &type metadata for NANAttribute.MulticastScheduleChange.Control;
}

ValueMetadata *type metadata accessor for NANAttribute.PublicAvailability()
{
  return &type metadata for NANAttribute.PublicAvailability;
}

ValueMetadata *type metadata accessor for NANAttribute.PairingIdentityResolution()
{
  return &type metadata for NANAttribute.PairingIdentityResolution;
}

ValueMetadata *type metadata accessor for NANAttribute.PairingIdentityResolution.CipherVersion()
{
  return &type metadata for NANAttribute.PairingIdentityResolution.CipherVersion;
}

uint64_t destroy for NANAttribute.PairingBootstrapping(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 32);
  if (v1 >> 60 != 15) {
    return sub_10000C970(*(void *)(result + 24), v1);
  }
  return result;
}

uint64_t initializeWithCopy for NANAttribute.PairingBootstrapping(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
  unint64_t v4 = (_OWORD *)(a1 + 8);
  uint64_t v5 = (_OWORD *)(a2 + 8);
  unint64_t v6 = *(void *)(a2 + 32);
  if (v6 >> 60 == 15)
  {
    long long v7 = *(_OWORD *)(a2 + 24);
    *unint64_t v4 = *v5;
    *(_OWORD *)(a1 + 24)  = v7;
  }
  else
  {
    *(void *)unint64_t v4 = *(void *)v5;
    *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
    uint64_t v8 = *(void *)(a2 + 24);
    sub_100013D44(v8, v6);
    *(void *)(a1 + 24)  = v8;
    *(void *)(a1 + 32)  = v6;
  }
  *(_WORD *)(a1 + 40)  = *(_WORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithCopy for NANAttribute.PairingBootstrapping(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1)  = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2)  = *(unsigned char *)(a2 + 2);
  unint64_t v4 = (_OWORD *)(a1 + 8);
  uint64_t v5 = (_OWORD *)(a2 + 8);
  if (*(void *)(a1 + 32) >> 60 == 15)
  {
    if (*(void *)(a2 + 32) >> 60 == 15)
    {
      long long v6 = *(_OWORD *)(a2 + 24);
      *unint64_t v4 = *v5;
      *(_OWORD *)(a1 + 24)  = v6;
    }
    else
    {
      uint64_t v8 = *(void *)v5;
      *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
      *(void *)unint64_t v4 = v8;
      uint64_t v9 = *(void *)(a2 + 24);
      unint64_t v10 = *(void *)(a2 + 32);
      sub_100013D44(v9, v10);
      *(void *)(a1 + 24)  = v9;
      *(void *)(a1 + 32)  = v10;
    }
  }
  else if (*(void *)(a2 + 32) >> 60 == 15)
  {
    sub_1002248B4(a1 + 8);
    long long v7 = v5[1];
    *unint64_t v4 = *v5;
    v4[1]  = v7;
  }
  else
  {
    uint64_t v11 = *(void *)v5;
    *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
    *(void *)unint64_t v4 = v11;
    uint64_t v12 = *(void *)(a2 + 24);
    unint64_t v13 = *(void *)(a2 + 32);
    sub_100013D44(v12, v13);
    uint64_t v14 = *(void *)(a1 + 24);
    unint64_t v15 = *(void *)(a1 + 32);
    *(void *)(a1 + 24)  = v12;
    *(void *)(a1 + 32)  = v13;
    sub_10000C970(v14, v15);
  }
  *(_WORD *)(a1 + 40)  = *(_WORD *)(a2 + 40);
  return a1;
}

uint64_t sub_1002248B4(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for NANAttribute.PairingBootstrapping(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
  uint64_t v4 = a1 + 8;
  uint64_t v5 = a2 + 8;
  unint64_t v6 = *(void *)(a1 + 32);
  if (v6 >> 60 != 15)
  {
    unint64_t v7 = *(void *)(a2 + 32);
    if (v7 >> 60 != 15)
    {
      *(void *)uint64_t v4 = *(void *)v5;
      *(unsigned char *)(a1 + 16)  = *(unsigned char *)(v5 + 8);
      uint64_t v9 = *(void *)(a1 + 24);
      *(void *)(a1 + 24)  = *(void *)(a2 + 24);
      *(void *)(a1 + 32)  = v7;
      sub_10000C970(v9, v6);
      goto LABEL_6;
    }
    sub_1002248B4(a1 + 8);
  }
  long long v8 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
  *(_OWORD *)(v4 + 16)  = v8;
LABEL_6:
  *(_WORD *)(a1 + 40)  = *(_WORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute.PairingBootstrapping(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF3 && *(unsigned char *)(a1 + 42)) {
    return (*(_DWORD *)a1 + 243);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 2);
  BOOL v4 = v3 >= 0xE;
  int v5 = v3 - 14;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.PairingBootstrapping(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF2)
  {
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(_WORD *)(result + 40)  = 0;
    *(void *)__n128 result = a2 - 243;
    if (a3 >= 0xF3) {
      *(unsigned char *)(result + 42)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xF3) {
      *(unsigned char *)(result + 42)  = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 2)  = a2 + 13;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.PairingBootstrapping()
{
  return &type metadata for NANAttribute.PairingBootstrapping;
}

ValueMetadata *type metadata accessor for NANAttribute.PairingBootstrapping.PairingType()
{
  return &type metadata for NANAttribute.PairingBootstrapping.PairingType;
}

ValueMetadata *type metadata accessor for NANAttribute.PairingBootstrapping.Status()
{
  return &type metadata for NANAttribute.PairingBootstrapping.Status;
}

ValueMetadata *type metadata accessor for NANAttribute.PairingBootstrapping.Method()
{
  return &type metadata for NANAttribute.PairingBootstrapping.Method;
}

uint64_t initializeWithCopy for NANAttribute.PairingBootstrapping.Comeback(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  unint64_t v4 = *(void *)(a2 + 24);
  sub_100013D44(v3, v4);
  *(void *)(a1 + 16)  = v3;
  *(void *)(a1 + 24)  = v4;
  return a1;
}

uint64_t assignWithCopy for NANAttribute.PairingBootstrapping.Comeback(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(unsigned char *)(a1 + 8)  = *((unsigned char *)a2 + 8);
  *(void *)a1  = v3;
  uint64_t v4 = a2[2];
  unint64_t v5 = a2[3];
  sub_100013D44(v4, v5);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 16)  = v4;
  *(void *)(a1 + 24)  = v5;
  sub_10000C970(v6, v7);
  return a1;
}

uint64_t assignWithTake for NANAttribute.PairingBootstrapping.Comeback(uint64_t a1, uint64_t a2)
{
  *(void *)a1  = *(void *)a2;
  *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16)  = *(_OWORD *)(a2 + 16);
  sub_10000C970(v3, v4);
  return a1;
}

ValueMetadata *type metadata accessor for NANAttribute.PairingBootstrapping.Comeback()
{
  return &type metadata for NANAttribute.PairingBootstrapping.Comeback;
}

uint64_t sub_100224B64(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2)  = *(unsigned char *)(a2 + 2);
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  sub_100013D44(v3, v4);
  *(void *)(a1 + 8)  = v3;
  *(void *)(a1 + 16)  = v4;
  return a1;
}

ValueMetadata *type metadata accessor for NANAttribute.VendorSpecific()
{
  return &type metadata for NANAttribute.VendorSpecific;
}

uint64_t initializeBufferWithCopyOfBuffer for NANAttribute.CustomDeviceInformation(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *(void *)a1  = *a2;
    uint64_t v16 = v15 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    *(_WORD *)a1  = *(_WORD *)a2;
    *(_DWORD *)(a1 + 4)  = *((_DWORD *)a2 + 1);
    uint64_t v5 = *(int *)(a3 + 28);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    *(unsigned char *)uint64_t v6 = *((unsigned char *)a2 + v5);
    *(_WORD *)(v6 + 1)  = *(_WORD *)((char *)a2 + v5 + 1);
    long long v8 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
    uint64_t v9 = v8[6];
    unint64_t v10 = (void *)(v6 + v9);
    uint64_t v11 = (const void *)(v7 + v9);
    uint64_t v12 = type metadata accessor for P256.KeyAgreement.PublicKey();
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = sub_100010BCC((uint64_t *)&unk_1004852B0);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    uint64_t v17 = v8[7];
    uint64_t v18 = v6 + v17;
    unint64_t v19 = (uint64_t *)(v7 + v17);
    unint64_t v20 = v19[1];
    if (v20 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
    }
    else
    {
      uint64_t v21 = *v19;
      sub_100013D44(*v19, v19[1]);
      *(void *)uint64_t v18 = v21;
      *(void *)(v18 + 8)  = v20;
    }
    uint64_t v22 = v8[8];
    uint64_t v23 = v6 + v22;
    uint64_t v24 = (uint64_t *)(v7 + v22);
    unint64_t v25 = v24[1];
    if (v25 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
    }
    else
    {
      uint64_t v26 = *v24;
      sub_100013D44(*v24, v24[1]);
      *(void *)uint64_t v23 = v26;
      *(void *)(v23 + 8)  = v25;
    }
    uint64_t v27 = v8[9];
    uint64_t v28 = v6 + v27;
    unint64_t v29 = (uint64_t *)(v7 + v27);
    unint64_t v30 = v29[1];
    if (v30 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
    }
    else
    {
      uint64_t v31 = *v29;
      sub_100013D44(*v29, v29[1]);
      *(void *)uint64_t v28 = v31;
      *(void *)(v28 + 8)  = v30;
    }
    uint64_t v32 = v8[10];
    int v33 = (void *)(v6 + v32);
    uint64_t v34 = (const void *)(v7 + v32);
    uint64_t v35 = type metadata accessor for UUID();
    uint64_t v36 = *(void *)(v35 - 8);
    uint64_t v50 = a1;
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
    {
      uint64_t v37 = sub_100010BCC(&qword_1004862B0);
      memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v36 + 16))(v33, v34, v35);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
    }
    *(void *)(v6 + v8[11])  = *(void *)(v7 + v8[11]);
    uint64_t v38 = v8[12];
    long long v39 = (void *)(v6 + v38);
    int v40 = (const void *)(v7 + v38);
    uint64_t v41 = type metadata accessor for NANInternetSharingStatistics.Requester();
    uint64_t v42 = *(void *)(v41 - 8);
    unint64_t v43 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v42 + 48);
    swift_bridgeObjectRetain();
    if (v43(v40, 1, v41))
    {
      uint64_t v44 = sub_100010BCC((uint64_t *)&unk_100485B60);
      memcpy(v39, v40, *(void *)(*(void *)(v44 - 8) + 64));
    }
    else
    {
      uint64_t v45 = type metadata accessor for DispatchTimeInterval();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v45 - 8) + 16))(v39, v40, v45);
      *((unsigned char *)v39 + *(int *)(v41 + 20))  = *((unsigned char *)v40 + *(int *)(v41 + 20));
      (*(void (**)(void *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
    }
    uint64_t v16 = v50;
    uint64_t v46 = v8[13];
    uint64_t v47 = (_OWORD *)(v6 + v46);
    unint64_t v48 = (_OWORD *)(v7 + v46);
    *uint64_t v47 = *v48;
    *(_OWORD *)((char *)v47 + 9)  = *(_OWORD *)((char *)v48 + 9);
  }
  return v16;
}

uint64_t destroy for NANAttribute.CustomDeviceInformation(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 28);
  uint64_t v3 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  uint64_t v4 = v2 + v3[6];
  uint64_t v5 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v7 = (uint64_t *)(v2 + v3[7]);
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15) {
    sub_10000C970(*v7, v8);
  }
  uint64_t v9 = (uint64_t *)(v2 + v3[8]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_10000C970(*v9, v10);
  }
  uint64_t v11 = (uint64_t *)(v2 + v3[9]);
  unint64_t v12 = v11[1];
  if (v12 >> 60 != 15) {
    sub_10000C970(*v11, v12);
  }
  uint64_t v13 = v2 + v3[10];
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14)) {
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = v2 + v3[12];
  uint64_t v17 = type metadata accessor for NANInternetSharingStatistics.Requester();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v16, 1, v17);
  if (!result)
  {
    uint64_t v19 = type metadata accessor for DispatchTimeInterval();
    unint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8);
    return v20(v16, v19);
  }
  return result;
}

uint64_t initializeWithCopy for NANAttribute.CustomDeviceInformation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  *(_DWORD *)(a1 + 4)  = *(_DWORD *)(a2 + 4);
  uint64_t v3 = *(int *)(a3 + 28);
  uint64_t v4 = a1 + v3;
  uint64_t v5 = a2 + v3;
  *(unsigned char *)uint64_t v4 = *(unsigned char *)(a2 + v3);
  *(_WORD *)(v4 + 1)  = *(_WORD *)(a2 + v3 + 1);
  uint64_t v6 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  uint64_t v7 = v6[6];
  unint64_t v8 = (void *)(v4 + v7);
  uint64_t v9 = (const void *)(v5 + v7);
  uint64_t v10 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = sub_100010BCC((uint64_t *)&unk_1004852B0);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v13 = v6[7];
  uint64_t v14 = v4 + v13;
  uint64_t v15 = (uint64_t *)(v5 + v13);
  unint64_t v16 = v15[1];
  if (v16 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  }
  else
  {
    uint64_t v17 = *v15;
    sub_100013D44(*v15, v15[1]);
    *(void *)uint64_t v14 = v17;
    *(void *)(v14 + 8)  = v16;
  }
  uint64_t v18 = v6[8];
  uint64_t v19 = v4 + v18;
  unint64_t v20 = (uint64_t *)(v5 + v18);
  unint64_t v21 = v20[1];
  if (v21 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  }
  else
  {
    uint64_t v22 = *v20;
    sub_100013D44(*v20, v20[1]);
    *(void *)uint64_t v19 = v22;
    *(void *)(v19 + 8)  = v21;
  }
  uint64_t v23 = v6[9];
  uint64_t v24 = v4 + v23;
  unint64_t v25 = (uint64_t *)(v5 + v23);
  unint64_t v26 = v25[1];
  if (v26 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
  }
  else
  {
    uint64_t v27 = *v25;
    sub_100013D44(*v25, v25[1]);
    *(void *)uint64_t v24 = v27;
    *(void *)(v24 + 8)  = v26;
  }
  uint64_t v28 = v6[10];
  unint64_t v29 = (void *)(v4 + v28);
  unint64_t v30 = (const void *)(v5 + v28);
  uint64_t v31 = type metadata accessor for UUID();
  uint64_t v32 = *(void *)(v31 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
  {
    uint64_t v33 = sub_100010BCC(&qword_1004862B0);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v32 + 16))(v29, v30, v31);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  }
  *(void *)(v4 + v6[11])  = *(void *)(v5 + v6[11]);
  uint64_t v34 = v6[12];
  uint64_t v35 = (void *)(v4 + v34);
  uint64_t v36 = (const void *)(v5 + v34);
  uint64_t v37 = type metadata accessor for NANInternetSharingStatistics.Requester();
  uint64_t v38 = *(void *)(v37 - 8);
  long long v39 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v38 + 48);
  swift_bridgeObjectRetain();
  if (v39(v36, 1, v37))
  {
    uint64_t v40 = sub_100010BCC((uint64_t *)&unk_100485B60);
    memcpy(v35, v36, *(void *)(*(void *)(v40 - 8) + 64));
  }
  else
  {
    uint64_t v41 = type metadata accessor for DispatchTimeInterval();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v41 - 8) + 16))(v35, v36, v41);
    *((unsigned char *)v35 + *(int *)(v37 + 20))  = *((unsigned char *)v36 + *(int *)(v37 + 20));
    (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
  }
  uint64_t v42 = v6[13];
  unint64_t v43 = (_OWORD *)(v4 + v42);
  uint64_t v44 = (_OWORD *)(v5 + v42);
  *unint64_t v43 = *v44;
  *(_OWORD *)((char *)v43 + 9)  = *(_OWORD *)((char *)v44 + 9);
  return a1;
}

uint64_t assignWithCopy for NANAttribute.CustomDeviceInformation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1)  = *(unsigned char *)(a2 + 1);
  *(_DWORD *)(a1 + 4)  = *(_DWORD *)(a2 + 4);
  uint64_t v3 = *(int *)(a3 + 28);
  uint64_t v4 = a1 + v3;
  uint64_t v5 = a2 + v3;
  *(unsigned char *)uint64_t v4 = *(unsigned char *)(a2 + v3);
  *(_WORD *)(v4 + 1)  = *(_WORD *)(a2 + v3 + 1);
  uint64_t v6 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  uint64_t v7 = v6[6];
  unint64_t v8 = (void *)(v4 + v7);
  uint64_t v9 = (void *)(v5 + v7);
  uint64_t v10 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_100010BCC((uint64_t *)&unk_1004852B0);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = v6[7];
  uint64_t v17 = (uint64_t *)(v4 + v16);
  uint64_t v18 = (uint64_t *)(v5 + v16);
  unint64_t v19 = *(void *)(v5 + v16 + 8);
  if (*(void *)(v4 + v16 + 8) >> 60 == 15)
  {
    if (v19 >> 60 != 15)
    {
      uint64_t v20 = *v18;
      sub_100013D44(v20, v19);
      *uint64_t v17 = v20;
      v17[1]  = v19;
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  if (v19 >> 60 == 15)
  {
    sub_1001A21F0((uint64_t)v17);
LABEL_12:
    *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
    goto LABEL_14;
  }
  uint64_t v21 = *v18;
  sub_100013D44(v21, v19);
  uint64_t v22 = *v17;
  unint64_t v23 = v17[1];
  *uint64_t v17 = v21;
  v17[1]  = v19;
  sub_10000C970(v22, v23);
LABEL_14:
  uint64_t v24 = v6[8];
  unint64_t v25 = (uint64_t *)(v4 + v24);
  unint64_t v26 = (uint64_t *)(v5 + v24);
  unint64_t v27 = *(void *)(v5 + v24 + 8);
  if (*(void *)(v4 + v24 + 8) >> 60 == 15)
  {
    if (v27 >> 60 != 15)
    {
      uint64_t v28 = *v26;
      sub_100013D44(v28, v27);
      *unint64_t v25 = v28;
      v25[1]  = v27;
      goto LABEL_21;
    }
    goto LABEL_19;
  }
  if (v27 >> 60 == 15)
  {
    sub_1001A21F0((uint64_t)v25);
LABEL_19:
    *(_OWORD *)unint64_t v25 = *(_OWORD *)v26;
    goto LABEL_21;
  }
  uint64_t v29 = *v26;
  sub_100013D44(v29, v27);
  uint64_t v30 = *v25;
  unint64_t v31 = v25[1];
  *unint64_t v25 = v29;
  v25[1]  = v27;
  sub_10000C970(v30, v31);
LABEL_21:
  uint64_t v32 = v6[9];
  uint64_t v33 = (uint64_t *)(v4 + v32);
  uint64_t v34 = (uint64_t *)(v5 + v32);
  unint64_t v35 = *(void *)(v5 + v32 + 8);
  if (*(void *)(v4 + v32 + 8) >> 60 == 15)
  {
    if (v35 >> 60 != 15)
    {
      uint64_t v36 = *v34;
      sub_100013D44(v36, v35);
      *uint64_t v33 = v36;
      v33[1]  = v35;
      goto LABEL_28;
    }
    goto LABEL_26;
  }
  if (v35 >> 60 == 15)
  {
    sub_1001A21F0((uint64_t)v33);
LABEL_26:
    *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
    goto LABEL_28;
  }
  uint64_t v37 = *v34;
  sub_100013D44(v37, v35);
  uint64_t v38 = *v33;
  unint64_t v39 = v33[1];
  *uint64_t v33 = v37;
  v33[1]  = v35;
  sub_10000C970(v38, v39);
LABEL_28:
  uint64_t v40 = v6[10];
  uint64_t v41 = (void *)(v4 + v40);
  uint64_t v42 = (void *)(v5 + v40);
  uint64_t v43 = type metadata accessor for UUID();
  uint64_t v44 = *(void *)(v43 - 8);
  uint64_t v45 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v44 + 48);
  int v46 = v45(v41, 1, v43);
  int v47 = v45(v42, 1, v43);
  if (v46)
  {
    if (!v47)
    {
      (*(void (**)(void *, void *, uint64_t))(v44 + 16))(v41, v42, v43);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  if (v47)
  {
    (*(void (**)(void *, uint64_t))(v44 + 8))(v41, v43);
LABEL_33:
    uint64_t v48 = sub_100010BCC(&qword_1004862B0);
    memcpy(v41, v42, *(void *)(*(void *)(v48 - 8) + 64));
    goto LABEL_34;
  }
  (*(void (**)(void *, void *, uint64_t))(v44 + 24))(v41, v42, v43);
LABEL_34:
  *(void *)(v4 + v6[11])  = *(void *)(v5 + v6[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v49 = v6[12];
  uint64_t v50 = (unsigned char *)(v4 + v49);
  int v51 = (unsigned char *)(v5 + v49);
  uint64_t v52 = type metadata accessor for NANInternetSharingStatistics.Requester();
  uint64_t v53 = *(void *)(v52 - 8);
  uint64_t v54 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v53 + 48);
  int v55 = v54(v50, 1, v52);
  int v56 = v54(v51, 1, v52);
  if (!v55)
  {
    if (!v56)
    {
      uint64_t v64 = type metadata accessor for DispatchTimeInterval();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v64 - 8) + 24))(v50, v51, v64);
      v50[*(int *)(v52 + 20)]  = v51[*(int *)(v52 + 20)];
      goto LABEL_40;
    }
    sub_10021A4B0((uint64_t)v50, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
    goto LABEL_39;
  }
  if (v56)
  {
LABEL_39:
    uint64_t v58 = sub_100010BCC((uint64_t *)&unk_100485B60);
    memcpy(v50, v51, *(void *)(*(void *)(v58 - 8) + 64));
    goto LABEL_40;
  }
  uint64_t v57 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v57 - 8) + 16))(v50, v51, v57);
  v50[*(int *)(v52 + 20)]  = v51[*(int *)(v52 + 20)];
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
LABEL_40:
  uint64_t v59 = v6[13];
  long long v60 = (_OWORD *)(v4 + v59);
  uint64_t v61 = (long long *)(v5 + v59);
  long long v62 = *v61;
  *(_OWORD *)((char *)v60 + 9)  = *(long long *)((char *)v61 + 9);
  *long long v60 = v62;
  return a1;
}

uint64_t initializeWithTake for NANAttribute.CustomDeviceInformation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  *(_DWORD *)(a1 + 4)  = *(_DWORD *)(a2 + 4);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  *(unsigned char *)uint64_t v5 = *(unsigned char *)(a2 + v4);
  *(_WORD *)(v5 + 1)  = *(_WORD *)(a2 + v4 + 1);
  uint64_t v7 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  uint64_t v8 = v7[6];
  uint64_t v9 = (void *)(v5 + v8);
  uint64_t v10 = (const void *)(v6 + v8);
  uint64_t v11 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = sub_100010BCC((uint64_t *)&unk_1004852B0);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  *(_OWORD *)(v5 + v7[7])  = *(_OWORD *)(v6 + v7[7]);
  *(_OWORD *)(v5 + v7[8])  = *(_OWORD *)(v6 + v7[8]);
  *(_OWORD *)(v5 + v7[9])  = *(_OWORD *)(v6 + v7[9]);
  uint64_t v14 = v7[10];
  uint64_t v15 = (void *)(v5 + v14);
  uint64_t v16 = (const void *)(v6 + v14);
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    uint64_t v19 = sub_100010BCC(&qword_1004862B0);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  *(void *)(v5 + v7[11])  = *(void *)(v6 + v7[11]);
  uint64_t v20 = v7[12];
  uint64_t v21 = (void *)(v5 + v20);
  uint64_t v22 = (const void *)(v6 + v20);
  uint64_t v23 = type metadata accessor for NANInternetSharingStatistics.Requester();
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    uint64_t v25 = sub_100010BCC((uint64_t *)&unk_100485B60);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    uint64_t v26 = type metadata accessor for DispatchTimeInterval();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v26 - 8) + 32))(v21, v22, v26);
    *((unsigned char *)v21 + *(int *)(v23 + 20))  = *((unsigned char *)v22 + *(int *)(v23 + 20));
    (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  uint64_t v27 = v7[13];
  uint64_t v28 = (_OWORD *)(v5 + v27);
  uint64_t v29 = (_OWORD *)(v6 + v27);
  *uint64_t v28 = *v29;
  *(_OWORD *)((char *)v28 + 9)  = *(_OWORD *)((char *)v29 + 9);
  return a1;
}

uint64_t assignWithTake for NANAttribute.CustomDeviceInformation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  *(_DWORD *)(a1 + 4)  = *(_DWORD *)(a2 + 4);
  uint64_t v3 = *(int *)(a3 + 28);
  uint64_t v4 = a1 + v3;
  uint64_t v5 = a2 + v3;
  *(unsigned char *)uint64_t v4 = *(unsigned char *)(a2 + v3);
  *(_WORD *)(v4 + 1)  = *(_WORD *)(a2 + v3 + 1);
  uint64_t v6 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  uint64_t v7 = v6[6];
  uint64_t v8 = (void *)(v4 + v7);
  uint64_t v9 = (void *)(v5 + v7);
  uint64_t v10 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_100010BCC((uint64_t *)&unk_1004852B0);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = v6[7];
  uint64_t v17 = v4 + v16;
  uint64_t v18 = v5 + v16;
  unint64_t v19 = *(void *)(v4 + v16 + 8);
  if (v19 >> 60 == 15)
  {
LABEL_10:
    *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
    goto LABEL_12;
  }
  unint64_t v20 = *(void *)(v18 + 8);
  if (v20 >> 60 == 15)
  {
    sub_1001A21F0(v17);
    goto LABEL_10;
  }
  uint64_t v21 = *(void *)v17;
  *(void *)uint64_t v17 = *(void *)v18;
  *(void *)(v17 + 8)  = v20;
  sub_10000C970(v21, v19);
LABEL_12:
  uint64_t v22 = v6[8];
  uint64_t v23 = v4 + v22;
  uint64_t v24 = v5 + v22;
  unint64_t v25 = *(void *)(v4 + v22 + 8);
  if (v25 >> 60 == 15)
  {
LABEL_15:
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
    goto LABEL_17;
  }
  unint64_t v26 = *(void *)(v24 + 8);
  if (v26 >> 60 == 15)
  {
    sub_1001A21F0(v23);
    goto LABEL_15;
  }
  uint64_t v27 = *(void *)v23;
  *(void *)uint64_t v23 = *(void *)v24;
  *(void *)(v23 + 8)  = v26;
  sub_10000C970(v27, v25);
LABEL_17:
  uint64_t v28 = v6[9];
  uint64_t v29 = v4 + v28;
  uint64_t v30 = v5 + v28;
  unint64_t v31 = *(void *)(v4 + v28 + 8);
  if (v31 >> 60 == 15)
  {
LABEL_20:
    *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
    goto LABEL_22;
  }
  unint64_t v32 = *(void *)(v30 + 8);
  if (v32 >> 60 == 15)
  {
    sub_1001A21F0(v29);
    goto LABEL_20;
  }
  uint64_t v33 = *(void *)v29;
  *(void *)uint64_t v29 = *(void *)v30;
  *(void *)(v29 + 8)  = v32;
  sub_10000C970(v33, v31);
LABEL_22:
  uint64_t v34 = v6[10];
  unint64_t v35 = (void *)(v4 + v34);
  uint64_t v36 = (void *)(v5 + v34);
  uint64_t v37 = type metadata accessor for UUID();
  uint64_t v38 = *(void *)(v37 - 8);
  unint64_t v39 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v38 + 48);
  int v40 = v39(v35, 1, v37);
  int v41 = v39(v36, 1, v37);
  if (v40)
  {
    if (!v41)
    {
      (*(void (**)(void *, void *, uint64_t))(v38 + 32))(v35, v36, v37);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (v41)
  {
    (*(void (**)(void *, uint64_t))(v38 + 8))(v35, v37);
LABEL_27:
    uint64_t v42 = sub_100010BCC(&qword_1004862B0);
    memcpy(v35, v36, *(void *)(*(void *)(v42 - 8) + 64));
    goto LABEL_28;
  }
  (*(void (**)(void *, void *, uint64_t))(v38 + 40))(v35, v36, v37);
LABEL_28:
  *(void *)(v4 + v6[11])  = *(void *)(v5 + v6[11]);
  swift_bridgeObjectRelease();
  uint64_t v43 = v6[12];
  uint64_t v44 = (unsigned char *)(v4 + v43);
  uint64_t v45 = (unsigned char *)(v5 + v43);
  uint64_t v46 = type metadata accessor for NANInternetSharingStatistics.Requester();
  uint64_t v47 = *(void *)(v46 - 8);
  uint64_t v48 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v47 + 48);
  int v49 = v48(v44, 1, v46);
  int v50 = v48(v45, 1, v46);
  if (!v49)
  {
    if (!v50)
    {
      uint64_t v57 = type metadata accessor for DispatchTimeInterval();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v57 - 8) + 40))(v44, v45, v57);
      v44[*(int *)(v46 + 20)]  = v45[*(int *)(v46 + 20)];
      goto LABEL_34;
    }
    sub_10021A4B0((uint64_t)v44, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
    goto LABEL_33;
  }
  if (v50)
  {
LABEL_33:
    uint64_t v52 = sub_100010BCC((uint64_t *)&unk_100485B60);
    memcpy(v44, v45, *(void *)(*(void *)(v52 - 8) + 64));
    goto LABEL_34;
  }
  uint64_t v51 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v51 - 8) + 32))(v44, v45, v51);
  v44[*(int *)(v46 + 20)]  = v45[*(int *)(v46 + 20)];
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
LABEL_34:
  uint64_t v53 = v6[13];
  uint64_t v54 = (_OWORD *)(v4 + v53);
  int v55 = (_OWORD *)(v5 + v53);
  *uint64_t v54 = *v55;
  *(_OWORD *)((char *)v54 + 9)  = *(_OWORD *)((char *)v55 + 9);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute.CustomDeviceInformation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100226644);
}

uint64_t sub_100226644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 250)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 1);
    if (v4 >= 6) {
      return v4 - 5;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for NANAttribute.CustomDeviceInformation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100226700);
}

uint64_t sub_100226700(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 250)
  {
    *(unsigned char *)(result + 1)  = a2 + 5;
  }
  else
  {
    uint64_t v7 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1002267A4()
{
  uint64_t result = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for NANAttribute.CustomDeviceInformation.CustomAttributes(uint64_t a1, uint64_t *a2, int *a3)
{
  unsigned int v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1  = *(unsigned char *)a2;
    *(_WORD *)(a1 + 1)  = *(_WORD *)((char *)a2 + 1);
    uint64_t v7 = a3[6];
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for P256.KeyAgreement.PublicKey();
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      uint64_t v12 = sub_100010BCC((uint64_t *)&unk_1004852B0);
      memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    uint64_t v14 = a3[7];
    uint64_t v15 = (char *)v4 + v14;
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    unint64_t v17 = v16[1];
    if (v17 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
    }
    else
    {
      uint64_t v18 = *v16;
      sub_100013D44(*v16, v16[1]);
      *(void *)uint64_t v15 = v18;
      *((void *)v15 + 1)  = v17;
    }
    uint64_t v19 = a3[8];
    unint64_t v20 = (char *)v4 + v19;
    uint64_t v21 = (uint64_t *)((char *)a2 + v19);
    unint64_t v22 = v21[1];
    if (v22 >> 60 == 15)
    {
      *(_OWORD *)unint64_t v20 = *(_OWORD *)v21;
    }
    else
    {
      uint64_t v23 = *v21;
      sub_100013D44(*v21, v21[1]);
      *(void *)unint64_t v20 = v23;
      *((void *)v20 + 1)  = v22;
    }
    uint64_t v24 = a3[9];
    unint64_t v25 = (char *)v4 + v24;
    unint64_t v26 = (uint64_t *)((char *)a2 + v24);
    unint64_t v27 = v26[1];
    if (v27 >> 60 == 15)
    {
      *(_OWORD *)unint64_t v25 = *(_OWORD *)v26;
    }
    else
    {
      uint64_t v28 = *v26;
      sub_100013D44(*v26, v26[1]);
      *(void *)unint64_t v25 = v28;
      *((void *)v25 + 1)  = v27;
    }
    uint64_t v29 = a3[10];
    uint64_t v30 = (char *)v4 + v29;
    unint64_t v31 = (char *)a2 + v29;
    uint64_t v32 = type metadata accessor for UUID();
    uint64_t v33 = *(void *)(v32 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
    {
      uint64_t v34 = sub_100010BCC(&qword_1004862B0);
      memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v30, v31, v32);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
    }
    uint64_t v35 = a3[12];
    *(void *)((char *)v4 + a3[11])  = *(uint64_t *)((char *)a2 + a3[11]);
    uint64_t v36 = (char *)v4 + v35;
    uint64_t v37 = (char *)a2 + v35;
    uint64_t v38 = type metadata accessor for NANInternetSharingStatistics.Requester();
    uint64_t v39 = *(void *)(v38 - 8);
    int v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
    swift_bridgeObjectRetain();
    if (v40(v37, 1, v38))
    {
      uint64_t v41 = sub_100010BCC((uint64_t *)&unk_100485B60);
      memcpy(v36, v37, *(void *)(*(void *)(v41 - 8) + 64));
    }
    else
    {
      uint64_t v42 = type metadata accessor for DispatchTimeInterval();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 16))(v36, v37, v42);
      v36[*(int *)(v38 + 20)]  = v37[*(int *)(v38 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
    }
    uint64_t v43 = a3[13];
    uint64_t v44 = (_OWORD *)((char *)v4 + v43);
    uint64_t v45 = (_OWORD *)((char *)a2 + v43);
    *uint64_t v44 = *v45;
    *(_OWORD *)((char *)v44 + 9)  = *(_OWORD *)((char *)v45 + 9);
  }
  return v4;
}

uint64_t destroy for NANAttribute.CustomDeviceInformation.CustomAttributes(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v7 = (uint64_t *)(a1 + a2[7]);
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15) {
    sub_10000C970(*v7, v8);
  }
  uint64_t v9 = (uint64_t *)(a1 + a2[8]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_10000C970(*v9, v10);
  }
  uint64_t v11 = (uint64_t *)(a1 + a2[9]);
  unint64_t v12 = v11[1];
  if (v12 >> 60 != 15) {
    sub_10000C970(*v11, v12);
  }
  uint64_t v13 = a1 + a2[10];
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14)) {
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = a1 + a2[12];
  uint64_t v17 = type metadata accessor for NANInternetSharingStatistics.Requester();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v16, 1, v17);
  if (!result)
  {
    uint64_t v19 = type metadata accessor for DispatchTimeInterval();
    unint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8);
    return v20(v16, v19);
  }
  return result;
}

uint64_t initializeWithCopy for NANAttribute.CustomDeviceInformation.CustomAttributes(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  unint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_100010BCC((uint64_t *)&unk_1004852B0);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = (uint64_t *)(a2 + v12);
  unint64_t v15 = v14[1];
  if (v15 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  }
  else
  {
    uint64_t v16 = *v14;
    sub_100013D44(*v14, v14[1]);
    *(void *)uint64_t v13 = v16;
    *(void *)(v13 + 8)  = v15;
  }
  uint64_t v17 = a3[8];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = (uint64_t *)(a2 + v17);
  unint64_t v20 = v19[1];
  if (v20 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  }
  else
  {
    uint64_t v21 = *v19;
    sub_100013D44(*v19, v19[1]);
    *(void *)uint64_t v18 = v21;
    *(void *)(v18 + 8)  = v20;
  }
  uint64_t v22 = a3[9];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = (uint64_t *)(a2 + v22);
  unint64_t v25 = v24[1];
  if (v25 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  }
  else
  {
    uint64_t v26 = *v24;
    sub_100013D44(*v24, v24[1]);
    *(void *)uint64_t v23 = v26;
    *(void *)(v23 + 8)  = v25;
  }
  uint64_t v27 = a3[10];
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (const void *)(a2 + v27);
  uint64_t v30 = type metadata accessor for UUID();
  uint64_t v31 = *(void *)(v30 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
  {
    uint64_t v32 = sub_100010BCC(&qword_1004862B0);
    memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v31 + 16))(v28, v29, v30);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
  }
  uint64_t v33 = a3[12];
  *(void *)(a1 + a3[11])  = *(void *)(a2 + a3[11]);
  uint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (const void *)(a2 + v33);
  uint64_t v36 = type metadata accessor for NANInternetSharingStatistics.Requester();
  uint64_t v37 = *(void *)(v36 - 8);
  uint64_t v38 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v37 + 48);
  swift_bridgeObjectRetain();
  if (v38(v35, 1, v36))
  {
    uint64_t v39 = sub_100010BCC((uint64_t *)&unk_100485B60);
    memcpy(v34, v35, *(void *)(*(void *)(v39 - 8) + 64));
  }
  else
  {
    uint64_t v40 = type metadata accessor for DispatchTimeInterval();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v40 - 8) + 16))(v34, v35, v40);
    *((unsigned char *)v34 + *(int *)(v36 + 20))  = *((unsigned char *)v35 + *(int *)(v36 + 20));
    (*(void (**)(void *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
  }
  uint64_t v41 = a3[13];
  uint64_t v42 = (_OWORD *)(a1 + v41);
  uint64_t v43 = (_OWORD *)(a2 + v41);
  *uint64_t v42 = *v43;
  *(_OWORD *)((char *)v42 + 9)  = *(_OWORD *)((char *)v43 + 9);
  return a1;
}

uint64_t assignWithCopy for NANAttribute.CustomDeviceInformation.CustomAttributes(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  unint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_100010BCC((uint64_t *)&unk_1004852B0);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[7];
  uint64_t v16 = (uint64_t *)(a1 + v15);
  uint64_t v17 = (uint64_t *)(a2 + v15);
  unint64_t v18 = *(void *)(a2 + v15 + 8);
  if (*(void *)(a1 + v15 + 8) >> 60 == 15)
  {
    if (v18 >> 60 != 15)
    {
      uint64_t v19 = *v17;
      sub_100013D44(v19, v18);
      *uint64_t v16 = v19;
      v16[1]  = v18;
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  if (v18 >> 60 == 15)
  {
    sub_1001A21F0((uint64_t)v16);
LABEL_12:
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    goto LABEL_14;
  }
  uint64_t v20 = *v17;
  sub_100013D44(v20, v18);
  uint64_t v21 = *v16;
  unint64_t v22 = v16[1];
  *uint64_t v16 = v20;
  v16[1]  = v18;
  sub_10000C970(v21, v22);
LABEL_14:
  uint64_t v23 = a3[8];
  uint64_t v24 = (uint64_t *)(a1 + v23);
  unint64_t v25 = (uint64_t *)(a2 + v23);
  unint64_t v26 = *(void *)(a2 + v23 + 8);
  if (*(void *)(a1 + v23 + 8) >> 60 == 15)
  {
    if (v26 >> 60 != 15)
    {
      uint64_t v27 = *v25;
      sub_100013D44(v27, v26);
      *uint64_t v24 = v27;
      v24[1]  = v26;
      goto LABEL_21;
    }
    goto LABEL_19;
  }
  if (v26 >> 60 == 15)
  {
    sub_1001A21F0((uint64_t)v24);
LABEL_19:
    *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
    goto LABEL_21;
  }
  uint64_t v28 = *v25;
  sub_100013D44(v28, v26);
  uint64_t v29 = *v24;
  unint64_t v30 = v24[1];
  *uint64_t v24 = v28;
  v24[1]  = v26;
  sub_10000C970(v29, v30);
LABEL_21:
  uint64_t v31 = a3[9];
  uint64_t v32 = (uint64_t *)(a1 + v31);
  uint64_t v33 = (uint64_t *)(a2 + v31);
  unint64_t v34 = *(void *)(a2 + v31 + 8);
  if (*(void *)(a1 + v31 + 8) >> 60 == 15)
  {
    if (v34 >> 60 != 15)
    {
      uint64_t v35 = *v33;
      sub_100013D44(v35, v34);
      *uint64_t v32 = v35;
      v32[1]  = v34;
      goto LABEL_28;
    }
    goto LABEL_26;
  }
  if (v34 >> 60 == 15)
  {
    sub_1001A21F0((uint64_t)v32);
LABEL_26:
    *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
    goto LABEL_28;
  }
  uint64_t v36 = *v33;
  sub_100013D44(v36, v34);
  uint64_t v37 = *v32;
  unint64_t v38 = v32[1];
  *uint64_t v32 = v36;
  v32[1]  = v34;
  sub_10000C970(v37, v38);
LABEL_28:
  uint64_t v39 = a3[10];
  uint64_t v40 = (void *)(a1 + v39);
  uint64_t v41 = (void *)(a2 + v39);
  uint64_t v42 = type metadata accessor for UUID();
  uint64_t v43 = *(void *)(v42 - 8);
  uint64_t v44 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v43 + 48);
  int v45 = v44(v40, 1, v42);
  int v46 = v44(v41, 1, v42);
  if (v45)
  {
    if (!v46)
    {
      (*(void (**)(void *, void *, uint64_t))(v43 + 16))(v40, v41, v42);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  if (v46)
  {
    (*(void (**)(void *, uint64_t))(v43 + 8))(v40, v42);
LABEL_33:
    uint64_t v47 = sub_100010BCC(&qword_1004862B0);
    memcpy(v40, v41, *(void *)(*(void *)(v47 - 8) + 64));
    goto LABEL_34;
  }
  (*(void (**)(void *, void *, uint64_t))(v43 + 24))(v40, v41, v42);
LABEL_34:
  *(void *)(a1 + a3[11])  = *(void *)(a2 + a3[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v48 = a3[12];
  int v49 = (unsigned char *)(a1 + v48);
  int v50 = (unsigned char *)(a2 + v48);
  uint64_t v51 = type metadata accessor for NANInternetSharingStatistics.Requester();
  uint64_t v52 = *(void *)(v51 - 8);
  uint64_t v53 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v52 + 48);
  int v54 = v53(v49, 1, v51);
  int v55 = v53(v50, 1, v51);
  if (!v54)
  {
    if (!v55)
    {
      uint64_t v63 = type metadata accessor for DispatchTimeInterval();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v63 - 8) + 24))(v49, v50, v63);
      v49[*(int *)(v51 + 20)]  = v50[*(int *)(v51 + 20)];
      goto LABEL_40;
    }
    sub_10021A4B0((uint64_t)v49, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
    goto LABEL_39;
  }
  if (v55)
  {
LABEL_39:
    uint64_t v57 = sub_100010BCC((uint64_t *)&unk_100485B60);
    memcpy(v49, v50, *(void *)(*(void *)(v57 - 8) + 64));
    goto LABEL_40;
  }
  uint64_t v56 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v56 - 8) + 16))(v49, v50, v56);
  v49[*(int *)(v51 + 20)]  = v50[*(int *)(v51 + 20)];
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
LABEL_40:
  uint64_t v58 = a3[13];
  uint64_t v59 = (_OWORD *)(a1 + v58);
  long long v60 = (long long *)(a2 + v58);
  long long v61 = *v60;
  *(_OWORD *)((char *)v59 + 9)  = *(long long *)((char *)v60 + 9);
  *uint64_t v59 = v61;
  return a1;
}

uint64_t initializeWithTake for NANAttribute.CustomDeviceInformation.CustomAttributes(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  unint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_100010BCC((uint64_t *)&unk_1004852B0);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[8];
  *(_OWORD *)(a1 + a3[7])  = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v12)  = *(_OWORD *)(a2 + v12);
  uint64_t v13 = a3[10];
  *(_OWORD *)(a1 + a3[9])  = *(_OWORD *)(a2 + a3[9]);
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = sub_100010BCC(&qword_1004862B0);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v14, v15, v16);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  uint64_t v19 = a3[12];
  *(void *)(a1 + a3[11])  = *(void *)(a2 + a3[11]);
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (const void *)(a2 + v19);
  uint64_t v22 = type metadata accessor for NANInternetSharingStatistics.Requester();
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    uint64_t v24 = sub_100010BCC((uint64_t *)&unk_100485B60);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    uint64_t v25 = type metadata accessor for DispatchTimeInterval();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v25 - 8) + 32))(v20, v21, v25);
    *((unsigned char *)v20 + *(int *)(v22 + 20))  = *((unsigned char *)v21 + *(int *)(v22 + 20));
    (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  uint64_t v26 = a3[13];
  uint64_t v27 = (_OWORD *)(a1 + v26);
  uint64_t v28 = (_OWORD *)(a2 + v26);
  *uint64_t v27 = *v28;
  *(_OWORD *)((char *)v27 + 9)  = *(_OWORD *)((char *)v28 + 9);
  return a1;
}

uint64_t assignWithTake for NANAttribute.CustomDeviceInformation.CustomAttributes(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1)  = *(_WORD *)(a2 + 1);
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  unint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_100010BCC((uint64_t *)&unk_1004852B0);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  unint64_t v18 = *(void *)(a1 + v15 + 8);
  if (v18 >> 60 == 15)
  {
LABEL_10:
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    goto LABEL_12;
  }
  unint64_t v19 = *(void *)(v17 + 8);
  if (v19 >> 60 == 15)
  {
    sub_1001A21F0(v16);
    goto LABEL_10;
  }
  uint64_t v20 = *(void *)v16;
  *(void *)uint64_t v16 = *(void *)v17;
  *(void *)(v16 + 8)  = v19;
  sub_10000C970(v20, v18);
LABEL_12:
  uint64_t v21 = a3[8];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  unint64_t v24 = *(void *)(a1 + v21 + 8);
  if (v24 >> 60 == 15)
  {
LABEL_15:
    *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
    goto LABEL_17;
  }
  unint64_t v25 = *(void *)(v23 + 8);
  if (v25 >> 60 == 15)
  {
    sub_1001A21F0(v22);
    goto LABEL_15;
  }
  uint64_t v26 = *(void *)v22;
  *(void *)uint64_t v22 = *(void *)v23;
  *(void *)(v22 + 8)  = v25;
  sub_10000C970(v26, v24);
LABEL_17:
  uint64_t v27 = a3[9];
  uint64_t v28 = a1 + v27;
  uint64_t v29 = a2 + v27;
  unint64_t v30 = *(void *)(a1 + v27 + 8);
  if (v30 >> 60 == 15)
  {
LABEL_20:
    *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
    goto LABEL_22;
  }
  unint64_t v31 = *(void *)(v29 + 8);
  if (v31 >> 60 == 15)
  {
    sub_1001A21F0(v28);
    goto LABEL_20;
  }
  uint64_t v32 = *(void *)v28;
  *(void *)uint64_t v28 = *(void *)v29;
  *(void *)(v28 + 8)  = v31;
  sub_10000C970(v32, v30);
LABEL_22:
  uint64_t v33 = a3[10];
  unint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (void *)(a2 + v33);
  uint64_t v36 = type metadata accessor for UUID();
  uint64_t v37 = *(void *)(v36 - 8);
  unint64_t v38 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v37 + 48);
  int v39 = v38(v34, 1, v36);
  int v40 = v38(v35, 1, v36);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(void *, void *, uint64_t))(v37 + 32))(v34, v35, v36);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (v40)
  {
    (*(void (**)(void *, uint64_t))(v37 + 8))(v34, v36);
LABEL_27:
    uint64_t v41 = sub_100010BCC(&qword_1004862B0);
    memcpy(v34, v35, *(void *)(*(void *)(v41 - 8) + 64));
    goto LABEL_28;
  }
  (*(void (**)(void *, void *, uint64_t))(v37 + 40))(v34, v35, v36);
LABEL_28:
  *(void *)(a1 + a3[11])  = *(void *)(a2 + a3[11]);
  swift_bridgeObjectRelease();
  uint64_t v42 = a3[12];
  uint64_t v43 = (unsigned char *)(a1 + v42);
  uint64_t v44 = (unsigned char *)(a2 + v42);
  uint64_t v45 = type metadata accessor for NANInternetSharingStatistics.Requester();
  uint64_t v46 = *(void *)(v45 - 8);
  uint64_t v47 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v46 + 48);
  int v48 = v47(v43, 1, v45);
  int v49 = v47(v44, 1, v45);
  if (!v48)
  {
    if (!v49)
    {
      uint64_t v56 = type metadata accessor for DispatchTimeInterval();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v56 - 8) + 40))(v43, v44, v56);
      v43[*(int *)(v45 + 20)]  = v44[*(int *)(v45 + 20)];
      goto LABEL_34;
    }
    sub_10021A4B0((uint64_t)v43, (uint64_t (*)(void))type metadata accessor for NANInternetSharingStatistics.Requester);
    goto LABEL_33;
  }
  if (v49)
  {
LABEL_33:
    uint64_t v51 = sub_100010BCC((uint64_t *)&unk_100485B60);
    memcpy(v43, v44, *(void *)(*(void *)(v51 - 8) + 64));
    goto LABEL_34;
  }
  uint64_t v50 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v50 - 8) + 32))(v43, v44, v50);
  v43[*(int *)(v45 + 20)]  = v44[*(int *)(v45 + 20)];
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
LABEL_34:
  uint64_t v52 = a3[13];
  uint64_t v53 = (_OWORD *)(a1 + v52);
  int v54 = (_OWORD *)(a2 + v52);
  *uint64_t v53 = *v54;
  *(_OWORD *)((char *)v53 + 9)  = *(_OWORD *)((char *)v54 + 9);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute.CustomDeviceInformation.CustomAttributes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002281FC);
}

uint64_t sub_1002281FC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_100010BCC((uint64_t *)&unk_1004852B0);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[6];
LABEL_5:
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v11(a1 + v9, a2, v7);
  }
  uint64_t v10 = sub_100010BCC(&qword_1004862B0);
  if (*(_DWORD *)(*(void *)(v10 - 8) + 84) == a2)
  {
    uint64_t v7 = v10;
    uint64_t v8 = *(void *)(v10 - 8);
    uint64_t v9 = a3[10];
    goto LABEL_5;
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v13 = *(void *)(a1 + a3[11]);
    if (v13 >= 0xFFFFFFFF) {
      LODWORD(v13)  = -1;
    }
    return (v13 + 1);
  }
  else
  {
    uint64_t v14 = sub_100010BCC((uint64_t *)&unk_100485B60);
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
    uint64_t v16 = v14;
    uint64_t v17 = a1 + a3[12];
    return v15(v17, a2, v16);
  }
}

uint64_t storeEnumTagSinglePayload for NANAttribute.CustomDeviceInformation.CustomAttributes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100228398);
}

uint64_t sub_100228398(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_100010BCC((uint64_t *)&unk_1004852B0);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[6];
LABEL_5:
    unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(a1 + v11, a2, a2, v9);
  }
  uint64_t result = sub_100010BCC(&qword_1004862B0);
  if (*(_DWORD *)(*(void *)(result - 8) + 84) == a3)
  {
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(result - 8);
    uint64_t v11 = a4[10];
    goto LABEL_5;
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[11])  = (a2 - 1);
  }
  else
  {
    uint64_t v14 = sub_100010BCC((uint64_t *)&unk_100485B60);
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
    uint64_t v16 = v14;
    uint64_t v17 = a1 + a4[12];
    return v15(v17, a2, a2, v16);
  }
  return result;
}

void sub_100228520()
{
  sub_1002286B0(319, &qword_100483168, (void (*)(uint64_t))&type metadata accessor for P256.KeyAgreement.PublicKey);
  if (v0 <= 0x3F)
  {
    sub_1002286B0(319, (unint64_t *)&unk_100483170, (void (*)(uint64_t))&type metadata accessor for UUID);
    if (v1 <= 0x3F)
    {
      sub_1002286B0(319, qword_100485A00, (void (*)(uint64_t))type metadata accessor for NANInternetSharingStatistics.Requester);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void sub_1002286B0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

ValueMetadata *type metadata accessor for NANAttribute.CustomDeviceInformation.PlatformType()
{
  return &type metadata for NANAttribute.CustomDeviceInformation.PlatformType;
}

ValueMetadata *type metadata accessor for NANAttribute.CustomDeviceInformation.Flags()
{
  return &type metadata for NANAttribute.CustomDeviceInformation.Flags;
}

ValueMetadata *type metadata accessor for NANAttribute.CustomDeviceInformation.Version()
{
  return &type metadata for NANAttribute.CustomDeviceInformation.Version;
}

uint64_t getEnumTagSinglePayload for NANAttribute.AttributeType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xD3) {
    goto LABEL_17;
  }
  if (a2 + 45 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 45) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 45;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 45;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 45;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x2E;
  int v8 = v6 - 46;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for NANAttribute.AttributeType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 45 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 45) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xD3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xD2)
  {
    unsigned int v6 = ((a2 - 211) >> 8) + 1;
    *uint64_t result = a2 + 45;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100228898);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 45;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.AttributeType()
{
  return &type metadata for NANAttribute.AttributeType;
}

ValueMetadata *type metadata accessor for NANAttribute.CustomDeviceInformation.CodingKeys()
{
  return &type metadata for NANAttribute.CustomDeviceInformation.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.CustomDeviceInformation.Version.CodingKeys()
{
  return &type metadata for NANAttribute.CustomDeviceInformation.Version.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.VendorSpecific.CodingKeys()
{
  return &type metadata for NANAttribute.VendorSpecific.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.PairingIdentityResolution.CodingKeys()
{
  return &type metadata for NANAttribute.PairingIdentityResolution.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.PublicAvailability.CodingKeys()
{
  return &type metadata for NANAttribute.PublicAvailability.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.MulticastScheduleChange.CodingKeys()
{
  return &type metadata for NANAttribute.MulticastScheduleChange.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.SharedKeyDescriptor.CodingKeys()
{
  return &type metadata for NANAttribute.SharedKeyDescriptor.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.SecurityContextInformation.CodingKeys()
{
  return &type metadata for NANAttribute.SecurityContextInformation.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.CipherSuiteInformation.CodingKeys()
{
  return &type metadata for NANAttribute.CipherSuiteInformation.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.CipherSuiteInformation.CipherSuite.CodingKeys()
{
  return &type metadata for NANAttribute.CipherSuiteInformation.CipherSuite.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.FineTimingMeasurementRangeReport.CodingKeys()
{
  return &type metadata for NANAttribute.FineTimingMeasurementRangeReport.CodingKeys;
}

unsigned char *_s7CoreP2P12NANAttributeO23CustomDeviceInformationV12PlatformTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100228A4CLL);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}