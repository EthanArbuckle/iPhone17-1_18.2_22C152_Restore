uint64_t static NANAvailabilityEntry.committedEntry(on:for:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, unsigned __int16 a3@<W2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v12;
  char v13;
  uint64_t v14;
  uint64_t result;

  v12 = sub_1001E1C7C(1u, 0, 1);
  v13 = sub_1001E1C64(1, 4, 4) | v12;
  sub_100010BCC(&qword_1004870C0);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1003B2450;
  *(unsigned char *)(v14 + 32) = a1;
  *(_WORD *)(v14 + 34) = WORD1(a1);
  *(unsigned char *)(v14 + 36) = BYTE4(a1);
  *(_WORD *)(v14 + 38) = HIWORD(a1);
  *(unsigned char *)(v14 + 40) = a2 & 1;
  result = sub_100013D44(a4, a5);
  *(_WORD *)a6 = 4097;
  *(void *)(a6 + 8) = a3;
  *(void *)(a6 + 16) = a4;
  *(void *)(a6 + 24) = a5;
  *(unsigned char *)(a6 + 32) = v13;
  *(void *)(a6 + 40) = v14;
  *(unsigned char *)(a6 + 48) = 1;
  return result;
}

void NANAvailabilityEntry.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Hasher._combine(_:)(*(_WORD *)v2);
  unint64_t v4 = *(void *)(v2 + 24);
  if (v4 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 8);
    uint64_t v5 = *(void *)(v2 + 16);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6);
    sub_100013D44(v5, v4);
    Data.hash(into:)();
    sub_10006E0D8(v6, v5, v4);
  }
  uint64_t v7 = *(void *)(v2 + 40);
  char v8 = *(unsigned char *)(v2 + 48);
  Hasher._combine(_:)(*(unsigned char *)(v2 + 32));
  if (v8)
  {
    sub_10009EC30(a1, v7);
  }
  else
  {
    Swift::UInt v9 = *(void *)(v7 + 16);
    Hasher._combine(_:)(v9);
    if (v9)
    {
      v10 = (Swift::UInt8 *)(v7 + 32);
      do
      {
        Swift::UInt8 v11 = *v10++;
        Hasher._combine(_:)(v11);
        --v9;
      }
      while (v9);
    }
  }
}

Swift::Int NANAvailabilityEntry.hashValue.getter()
{
  Hasher.init(_seed:)();
  NANAvailabilityEntry.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_100091A48()
{
  Hasher.init(_seed:)();
  NANAvailabilityEntry.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

double NANAvailabilityEntry.init(from:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000A2474(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(unsigned char *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_100091AD4(void *a1)
{
  return NANAvailabilityEntry.encode(to:)(a1);
}

uint64_t NANAvailabilityEntry.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  unint64_t v4 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v5 = type metadata accessor for BinaryEncoder();
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1003B2440;
  *(void *)(v6 + 32) = v4;
  LOWORD(v19) = *(_WORD *)v3;
  uint64_t v21 = v5;
  uint64_t v7 = sub_1000A3110((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
  uint64_t v22 = v7;
  v20[0] = v6;
  sub_1000A3158();
  swift_retain();
  dispatch thunk of Encodable.encode(to:)();
  if (!v2)
  {
    sub_100010754((uint64_t)v20);
    sub_1000A31AC(v3 + 8, (uint64_t)v25);
    uint64_t v21 = v5;
    uint64_t v22 = v7;
    v20[0] = v6;
    sub_1000A31AC((uint64_t)v25, (uint64_t)&v19);
    swift_retain();
    sub_1000A3214((uint64_t)v25);
    sub_100010BCC(&qword_10047E390);
    sub_1000A3244();
    Optional<A>.encode(to:)();
    sub_100010754((uint64_t)v20);
    sub_1000A3298((uint64_t)v25);
    uint64_t v9 = *(void *)(v3 + 40);
    uint64_t v10 = *(unsigned __int8 *)(v3 + 48);
    char v11 = *(unsigned char *)(v3 + 32);
    uint64_t v21 = v5;
    uint64_t v22 = v7;
    v20[0] = v6;
    swift_retain();
    swift_bridgeObjectRetain();
    NANAvailabilityEntry.BandChannelEntries.encode(to:)(v20, v11, v9, v10);
    sub_100010754((uint64_t)v20);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v12 = *(void *)(v6 + 16);
    switch(*(void *)(v6 + 24) >> 62)
    {
      case 1:
        BOOL v13 = __OFSUB__(HIDWORD(v12), v12);
        int v14 = HIDWORD(v12) - v12;
        if (v13)
        {
          __break(1u);
LABEL_12:
          __break(1u);
        }
        else
        {
          unint64_t v15 = v14;
LABEL_8:
          if ((v15 & 0x8000000000000000) == 0 && v15 < 0x10000)
          {
LABEL_10:
            sub_100039448((uint64_t)v23, v24);
            dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
            long long v19 = *(_OWORD *)(v6 + 16);
            sub_100039448((uint64_t)v23, v24);
            sub_1000742DC();
            dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
            goto LABEL_3;
          }
        }
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x100091EB4);
      case 2:
        uint64_t v18 = v12 + 16;
        uint64_t v16 = *(void *)(v12 + 16);
        uint64_t v17 = *(void *)(v18 + 8);
        unint64_t v15 = v17 - v16;
        if (!__OFSUB__(v17, v16)) {
          goto LABEL_8;
        }
        goto LABEL_12;
      default:
        goto LABEL_10;
    }
  }
  sub_100010754((uint64_t)v20);
LABEL_3:
  swift_release();
  return sub_100010754((uint64_t)v23);
}

uint64_t sub_100091EC4(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  char v6 = *(unsigned char *)(a1 + 48);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 48);
  return _s7CoreP2P20NANAvailabilityEntryV23__derived_struct_equalsySbAC_ACtFZ_0((unsigned __int16 *)v5, (unsigned __int16 *)v7) & 1;
}

uint64_t NANAttribute.Availability.description.getter(unsigned int a1, unint64_t a2)
{
  unsigned int v4 = a1 & 0xFFFF00FF;
  swift_bridgeObjectRetain();
  sub_1000A0F28(a2, v4, a2);
  swift_bridgeObjectRelease();
  sub_100010BCC((uint64_t *)&unk_100488360);
  sub_10000F9CC(&qword_100487D40, (uint64_t *)&unk_100488360);
  uint64_t v5 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  int v8 = HIWORD(a1) & 0xF;
  if (v8 == 1)
  {
    unint64_t v9 = 0xE900000000000079;
    uint64_t v10 = 0x7261646E6F636573;
  }
  else if (v8)
  {
    uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v9 = v11;
  }
  else
  {
    unint64_t v9 = 0xE700000000000000;
    uint64_t v10 = 0x7972616D697270;
  }
  unint64_t v12 = v9;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 8250;
  v13._object = (void *)0xE200000000000000;
  String.append(_:)(v13);
  v14._countAndFlagsBits = v5;
  v14._object = v7;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 93;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  return 91;
}

void sub_1000920DC(unsigned __int16 *a1@<X0>, int a2@<W1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  v52 = a4;
  uint64_t v7 = type metadata accessor for Mirror();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  unint64_t v10 = (unint64_t)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v11 = *a1;
  uint64_t v12 = *((void *)a1 + 5);
  if ((v11 & 7) == 2)
  {
    if (*((unsigned char *)a1 + 48))
    {
      uint64_t v57 = 0;
      unint64_t v58 = 0xE000000000000000;
      v24._countAndFlagsBits = 60;
      v24._object = (void *)0xE100000000000000;
      String.append(_:)(v24);
      if (v53)
      {
        swift_unexpectedError();
        __break(1u);
        JUMPOUT(0x100092598);
      }
      LOBYTE(v55) = (v11 >> 3) & 3;
      _print_unlocked<A, B>(_:_:)();
      v25._countAndFlagsBits = 8250;
      v25._object = (void *)0xE200000000000000;
      String.append(_:)(v25);
      int64_t v26 = *(void *)(v12 + 16);
      v27 = _swiftEmptyArrayStorage;
      if (v26)
      {
        v60 = _swiftEmptyArrayStorage;
        sub_10008345C(0, v26, 0);
        v27 = v60;
        uint64_t v28 = v12 + 40;
        do
        {
          unint64_t v10 = v10 & 0xFF000000FF00 | *(unsigned __int8 *)(v28 - 8) | ((unint64_t)*(unsigned __int16 *)(v28 - 6) << 16) | ((unint64_t)*(unsigned __int8 *)(v28 - 4) << 32) | ((unint64_t)*(unsigned __int16 *)(v28 - 2) << 48);
          unint64_t v29 = NANBitmap.Channel.channel.getter(v10);
          if ((v29 & 0xFF00000000) == 0x300000000)
          {
            unint64_t v30 = 0xE100000000000000;
            uint64_t v31 = 48;
          }
          else
          {
            unsigned __int8 v32 = BYTE5(v29);
            int v54 = v29;
            uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
            unint64_t v56 = v33;
            int v34 = v32 - 2;
            uint64_t v35 = 0;
            unint64_t v36 = 0xE000000000000000;
            switch(v34)
            {
              case 0:
              case 1:
                break;
              case 2:
                unint64_t v36 = 0xE200000000000000;
                uint64_t v35 = 11051;
                break;
              case 3:
                unint64_t v36 = 0xE200000000000000;
                uint64_t v35 = 30840;
                break;
              case 4:
                unint64_t v36 = 0xE200000000000000;
                uint64_t v35 = 31097;
                break;
              default:
                uint64_t v35 = 45;
                unint64_t v36 = 0xE100000000000000;
                break;
            }
            unint64_t v37 = v36;
            String.append(_:)(*(Swift::String *)&v35);
            swift_bridgeObjectRelease();
            uint64_t v31 = v55;
            unint64_t v30 = v56;
          }
          v60 = v27;
          unint64_t v39 = v27[2];
          unint64_t v38 = v27[3];
          if (v39 >= v38 >> 1)
          {
            sub_10008345C(v38 > 1, v39 + 1, 1);
            v27 = v60;
          }
          v27[2] = v39 + 1;
          v40 = &v27[2 * v39];
          v40[4] = v31;
          v40[5] = v30;
          v28 += 10;
          --v26;
        }
        while (v26);
      }
      uint64_t v55 = (uint64_t)v27;
      sub_100010BCC((uint64_t *)&unk_100488360);
      sub_10000F9CC(&qword_100487D40, (uint64_t *)&unk_100488360);
      uint64_t v44 = BidirectionalCollection<>.joined(separator:)();
      v46 = v45;
      swift_bridgeObjectRelease();
      v47._countAndFlagsBits = v44;
      v47._object = v46;
      String.append(_:)(v47);
      swift_bridgeObjectRelease();
      v48._countAndFlagsBits = 62;
      v48._object = (void *)0xE100000000000000;
      String.append(_:)(v48);
      goto LABEL_30;
    }
  }
  else
  {
    BOOL v13 = (v11 & 7) != 1 || *((unsigned char *)a1 + 48) == 0;
    if (!v13 && *(void *)(v12 + 16) == 1)
    {
      uint64_t v14 = *((void *)a1 + 2);
      uint64_t v51 = *((void *)a1 + 1);
      unint64_t v15 = *((void *)a1 + 3);
      unint64_t v16 = NANBitmap.Channel.channel.getter(*(unsigned __int8 *)(v12 + 32) | ((unint64_t)*(unsigned __int16 *)(v12 + 34) << 16) | ((unint64_t)*(unsigned __int8 *)(v12 + 36) << 32) | ((unint64_t)*(unsigned __int16 *)(v12 + 38) << 48));
      if ((v16 & 0xFF00000000) != 0x300000000 && v15 >> 60 != 15)
      {
        unint64_t v18 = v16;
        uint64_t v57 = 60;
        unint64_t v58 = 0xE100000000000000;
        uint64_t v19 = v51;
        sub_10006E968(v51, v14, v15);
        v20._countAndFlagsBits = Channel.description.getter(v18 & 0xFFFFFFFFFFFFLL);
        String.append(_:)(v20);
        swift_bridgeObjectRelease();
        v21._countAndFlagsBits = 8250;
        v21._object = (void *)0xE200000000000000;
        String.append(_:)(v21);
        v22._countAndFlagsBits = NANBitmap.Time.description.getter(v19, v14, v15);
        String.append(_:)(v22);
        swift_bridgeObjectRelease();
        v23._countAndFlagsBits = 62;
        v23._object = (void *)0xE100000000000000;
        String.append(_:)(v23);
        sub_10006E0D8(v19, v14, v15);
LABEL_30:
        uint64_t v41 = v57;
        unint64_t v43 = v58;
        goto LABEL_31;
      }
    }
  }
  LOBYTE(v57) = a2;
  WORD1(v57) = HIWORD(a2);
  v59 = &type metadata for NANAttribute.Availability;
  unint64_t v58 = a3;
  swift_bridgeObjectRetain();
  Mirror.init(reflecting:)();
  uint64_t v41 = Mirror.description.getter();
  unint64_t v43 = v42;
  (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v10, v7);
LABEL_31:
  v49 = v52;
  uint64_t *v52 = v41;
  v49[1] = v43;
}

uint64_t sub_1000925AC()
{
  return NANAttribute.Availability.description.getter(*v0 | (*((unsigned __int16 *)v0 + 1) << 16), *((void *)v0 + 1));
}

void *static Array<A>.potentialAvailability(using:supportsSimultaneousDualBand:for:)(char a1, char a2, uint64_t a3)
{
  unsigned __int8 v32 = _swiftEmptyArrayStorage;
  unint64_t v33 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain();
  uint64_t v8 = sub_10009CF34(a3);
  swift_bridgeObjectRelease();
  uint64_t v31 = v8;
  sub_10009D288((uint64_t *)&v31, sub_100114E54, sub_10009D30C);
  uint64_t v9 = v31[2];
  if (v9)
  {
    unint64_t v10 = (unsigned __int8 *)v31 + 38;
    do
    {
      uint64_t v14 = *(v10 - 2);
      unsigned __int8 v15 = *v10;
      unint64_t v16 = sub_1001C74A0(*(unsigned int *)(v10 - 6) | (unint64_t)(v14 << 32) | ((unint64_t)*(v10 - 1) << 40));
      if ((v17 & 0x100) == 0)
      {
        unint64_t v18 = v16 & 0xFFFF00FFFFFF00FFLL;
        if ((a2 & 1) != 0 && v14)
        {
          uint64_t v4 = v18 | v4 & 0xFF000000FF00;
          char v11 = v17 & 1;
          uint64_t v12 = &v32;
          uint64_t v13 = v4;
        }
        else
        {
          uint64_t v3 = v18 | v3 & 0xFF000000FF00;
          char v11 = v17 & 1;
          uint64_t v12 = &v33;
          uint64_t v13 = v3;
        }
        sub_10009287C(v13, v11, v15, (uint64_t)v12);
      }
      v10 += 8;
      --v9;
    }
    while (v9);
    swift_release();
    uint64_t v19 = v33;
    if (v33[2]) {
      goto LABEL_11;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    Swift::String v21 = _swiftEmptyArrayStorage;
    goto LABEL_16;
  }
  swift_release();
  uint64_t v19 = _swiftEmptyArrayStorage;
  if (!_swiftEmptyArrayStorage[2]) {
    goto LABEL_15;
  }
LABEL_11:
  __int16 v20 = sub_1001E1C94(0, 0, 4) | 0x20;
  Swift::String v21 = sub_1000C6914(0, 1, 1, _swiftEmptyArrayStorage);
  unint64_t v23 = v21[2];
  unint64_t v22 = v21[3];
  if (v23 >= v22 >> 1) {
    Swift::String v21 = sub_1000C6914((void *)(v22 > 1), v23 + 1, 1, v21);
  }
  v21[2] = v23 + 1;
  Swift::String v24 = &v21[2 * v23];
  *((unsigned char *)v24 + 32) = a1;
  *((_WORD *)v24 + 17) = v20;
  v24[5] = v19;
LABEL_16:
  Swift::String v25 = v32;
  if (v32[2])
  {
    __int16 v26 = sub_1001E1C94(1u, 0, 4) | 0x20;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      Swift::String v21 = sub_1000C6914(0, v21[2] + 1, 1, v21);
    }
    unint64_t v28 = v21[2];
    unint64_t v27 = v21[3];
    if (v28 >= v27 >> 1) {
      Swift::String v21 = sub_1000C6914((void *)(v27 > 1), v28 + 1, 1, v21);
    }
    v21[2] = v28 + 1;
    unint64_t v29 = &v21[2 * v28];
    *((unsigned char *)v29 + 32) = a1;
    *((_WORD *)v29 + 17) = v26;
    v29[5] = v25;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return v21;
}

uint64_t sub_10009287C(uint64_t result, char a2, unsigned __int8 a3, uint64_t a4)
{
  uint64_t v9 = result;
  unint64_t v10 = *(void **)a4;
  unint64_t v11 = *(void *)(*(void *)a4 + 16);
  if (!v11) {
    goto LABEL_29;
  }
  unint64_t v12 = 0;
  unint64_t v13 = v11 - 1;
  uint64_t v14 = 80;
  char v15 = 1;
  while (2)
  {
    if (v12 <= v11) {
      unint64_t v16 = v11;
    }
    else {
      unint64_t v16 = v12;
    }
    uint64_t v17 = v14 + 56 * v12;
LABEL_9:
    if (v16 == v12)
    {
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    unint64_t v4 = v12;
    if (v12 >= v10[2]) {
      goto LABEL_35;
    }
    ++v12;
    switch(((unint64_t)*(unsigned __int16 *)((char *)v10 + v17 - 48) >> 3) & 3)
    {
      case 1uLL:
        if (a3 != 1) {
          goto LABEL_8;
        }
        goto LABEL_17;
      case 2uLL:
        if (a3 != 2) {
          goto LABEL_8;
        }
        goto LABEL_17;
      case 3uLL:
        if (a3 == 3) {
          goto LABEL_17;
        }
        goto LABEL_8;
      default:
        if (!a3)
        {
LABEL_17:
          uint64_t v28 = v14;
          unint64_t v29 = v13;
          unint64_t v5 = *(void *)((char *)v10 + v17 - 40);
          uint64_t v6 = *(void *)((char *)v10 + v17 - 32);
          unint64_t v18 = *(void *)((char *)v10 + v17 - 24);
          sub_10006E968(v5, v6, v18);
          swift_bridgeObjectRetain();
          sub_10006E0D8(v5, v6, v18);
          swift_bridgeObjectRelease();
          double result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            double result = (uint64_t)sub_1001DFD84(v10);
            unint64_t v10 = (void *)result;
          }
          if (v4 >= v10[2])
          {
            __break(1u);
            swift_errorRelease();
            __break(1u);
            swift_unexpectedError();
            __break(1u);
            JUMPOUT(0x100092C48);
          }
          uint64_t v7 = (char *)v10 + v17;
          if (*((unsigned char *)v10 + v17) == 1)
          {
            uint64_t v19 = (void *)*((void *)v7 - 1);
            swift_bridgeObjectRetain();
            uint64_t v6 = (uint64_t)v19;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v6 = (uint64_t)sub_1000C66CC(0, v19[2] + 1, 1, v19);
            }
            unint64_t v5 = *(void *)(v6 + 16);
            unint64_t v20 = *(void *)(v6 + 24);
            unint64_t v21 = v5 + 1;
            if (v5 >= v20 >> 1)
            {
              unint64_t v23 = sub_1000C66CC((void *)(v20 > 1), v5 + 1, 1, (void *)v6);
              unint64_t v21 = v5 + 1;
              uint64_t v6 = (uint64_t)v23;
            }
            *(void *)(v6 + 16) = v21;
            unint64_t v22 = v6 + 10 * v5;
            *(unsigned char *)(v22 + 32) = v9;
            LOBYTE(v5) = (_BYTE)v7 - 16;
            *(_WORD *)(v22 + 34) = WORD1(v9);
            *(unsigned char *)(v22 + 36) = BYTE4(v9);
            *(_WORD *)(v22 + 38) = HIWORD(v9);
            *(unsigned char *)(v22 + 40) = a2 & 1;
            swift_bridgeObjectRelease();
            *((void *)v7 - 1) = v6;
            *((unsigned char *)v10 + v17) = 1;
            double result = sub_100090C68();
          }
          char v15 = 0;
          unint64_t v12 = v4 + 1;
          *(void *)a4 = v10;
          uint64_t v14 = v28;
          unint64_t v13 = v29;
          if (v29 == v4) {
            return result;
          }
          continue;
        }
LABEL_8:
        v17 += 56;
        if (v11 != v12) {
          goto LABEL_9;
        }
        if ((v15 & 1) == 0) {
          return result;
        }
LABEL_29:
        LOBYTE(v5) = sub_1001E1C7C(1u, 0, 1);
        LOBYTE(v7) = sub_1001E1C64(1, 4, 4);
        LOWORD(v4) = 2;
        sub_100010BCC(&qword_1004870C0);
        uint64_t v6 = swift_allocObject();
        *(_OWORD *)(v6 + 16) = xmmword_1003B2450;
        *(unsigned char *)(v6 + 32) = v9;
        *(_WORD *)(v6 + 34) = WORD1(v9);
        *(unsigned char *)(v6 + 36) = BYTE4(v9);
        *(_WORD *)(v6 + 38) = HIWORD(v9);
        *(unsigned char *)(v6 + 40) = a2 & 1;
        double result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
LABEL_36:
          double result = (uint64_t)sub_1000C67EC(0, v10[2] + 1, 1, v10);
          unint64_t v10 = (void *)result;
        }
        __int16 v24 = v4 & 0xF807 | (8 * a3);
        unint64_t v26 = v10[2];
        unint64_t v25 = v10[3];
        if (v26 >= v25 >> 1)
        {
          double result = (uint64_t)sub_1000C67EC((void *)(v25 > 1), v26 + 1, 1, v10);
          unint64_t v10 = (void *)result;
        }
        v10[2] = v26 + 1;
        unint64_t v27 = &v10[7 * v26];
        *((_WORD *)v27 + 16) = v24;
        v27[5] = 0;
        v27[6] = 0;
        v27[7] = 0xF000000000000000;
        *((unsigned char *)v27 + 64) = v7 | v5;
        v27[9] = v6;
        *((unsigned char *)v27 + 80) = 1;
        *(void *)a4 = v10;
        return result;
    }
  }
}

void *NANMapID.primary.unsafeMutableAddressor()
{
  return &static NANMapID.primary;
}

void *NANMapID.secondary.unsafeMutableAddressor()
{
  return &static NANMapID.secondary;
}

void *static Array<A>.committedAvailability(using:supportsSimultaneousDualBand:for:)(char a1, char a2, uint64_t a3)
{
  swift_bridgeObjectRetain();
  unint64_t v5 = sub_10009D01C(a3);
  swift_bridgeObjectRelease();
  unint64_t v58 = v5;
  sub_10009D288((uint64_t *)&v58, sub_100114E68, sub_10009DA20);
  char v48 = a1;
  uint64_t v6 = v58[2];
  if (v6)
  {
    uint64_t v7 = (unsigned __int8 *)v58 + 63;
    uint64_t v50 = _swiftEmptyArrayStorage;
    uint64_t v51 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v9 = *(v7 - 27);
      unint64_t v55 = *(void *)(v7 - 23);
      uint64_t v57 = v6;
      unint64_t v54 = *(void *)(v7 - 15);
      uint64_t v10 = *(v7 - 7);
      uint64_t v11 = *(v7 - 6);
      uint64_t v12 = *(v7 - 5);
      uint64_t v13 = *(v7 - 4);
      uint64_t v14 = *(v7 - 3);
      uint64_t v15 = *(v7 - 2);
      uint64_t v16 = *(v7 - 1);
      uint64_t v17 = *v7;
      unint64_t v18 = sub_1001C74A0((v9 << 32) | ((unint64_t)*(v7 - 26) << 40) | *(unsigned int *)(v7 - 31));
      if ((v19 & 0x100) != 0)
      {
        uint64_t v8 = v57;
      }
      else
      {
        unint64_t v52 = v18;
        char v53 = v19;
        unsigned __int16 v20 = TimeBitmap.nanBitmap.getter(v55, v54, v10 | (v11 << 8) | (v12 << 16) | (v13 << 24) | (v14 << 32) | (v15 << 40) | (v16 << 48) | (v17 << 56));
        uint64_t v22 = v21;
        uint64_t v24 = v23;
        char v25 = sub_1001E1C7C(1u, 0, 1);
        unsigned __int16 v56 = v20;
        if ((a2 & 1) != 0 && v9)
        {
          char v26 = v25;
          uint64_t v27 = v24;
          char v28 = sub_1001E1C64(1, 4, 4);
          sub_100010BCC(&qword_1004870C0);
          uint64_t v29 = swift_allocObject();
          *(_OWORD *)(v29 + 16) = xmmword_1003B2450;
          *(unsigned char *)(v29 + 32) = v52;
          *(_WORD *)(v29 + 34) = WORD1(v52);
          *(unsigned char *)(v29 + 36) = BYTE4(v52);
          *(_WORD *)(v29 + 38) = HIWORD(v52);
          *(unsigned char *)(v29 + 40) = v53 & 1;
          uint64_t v30 = v22;
          if (swift_isUniquelyReferenced_nonNull_native()) {
            uint64_t v31 = v50;
          }
          else {
            uint64_t v31 = sub_1000C67EC(0, v50[2] + 1, 1, v50);
          }
          uint64_t v8 = v57;
          unint64_t v33 = v31[2];
          unint64_t v32 = v31[3];
          unint64_t v34 = v33 + 1;
          if (v33 >= v32 >> 1) {
            uint64_t v31 = sub_1000C67EC((void *)(v32 > 1), v33 + 1, 1, v31);
          }
          uint64_t v50 = v31;
        }
        else
        {
          char v26 = v25;
          char v28 = sub_1001E1C64(1, 4, 4);
          sub_100010BCC(&qword_1004870C0);
          uint64_t v29 = swift_allocObject();
          *(_OWORD *)(v29 + 16) = xmmword_1003B2450;
          *(unsigned char *)(v29 + 32) = v52;
          *(_WORD *)(v29 + 34) = WORD1(v52);
          *(unsigned char *)(v29 + 36) = BYTE4(v52);
          *(_WORD *)(v29 + 38) = HIWORD(v52);
          *(unsigned char *)(v29 + 40) = v53 & 1;
          uint64_t v30 = v22;
          if (swift_isUniquelyReferenced_nonNull_native()) {
            uint64_t v31 = v51;
          }
          else {
            uint64_t v31 = sub_1000C67EC(0, v51[2] + 1, 1, v51);
          }
          uint64_t v8 = v57;
          uint64_t v27 = v24;
          unint64_t v33 = v31[2];
          unint64_t v35 = v31[3];
          unint64_t v34 = v33 + 1;
          if (v33 >= v35 >> 1) {
            uint64_t v31 = sub_1000C67EC((void *)(v35 > 1), v33 + 1, 1, v31);
          }
          uint64_t v51 = v31;
        }
        v31[2] = v34;
        unint64_t v36 = &v31[7 * v33];
        *((_WORD *)v36 + 16) = 4097;
        v36[5] = v56;
        v36[6] = v30;
        v36[7] = v27;
        *((unsigned char *)v36 + 64) = v28 | v26;
        v36[9] = v29;
        *((unsigned char *)v36 + 80) = 1;
      }
      v7 += 32;
      uint64_t v6 = v8 - 1;
    }
    while (v6);
  }
  else
  {
    uint64_t v50 = _swiftEmptyArrayStorage;
    uint64_t v51 = _swiftEmptyArrayStorage;
  }
  swift_release();
  if (v51[2])
  {
    char v37 = v48;
    __int16 v38 = sub_1001E1C94(0, 0, 4) | 0x10;
    unint64_t v39 = sub_1000C6914(0, 1, 1, _swiftEmptyArrayStorage);
    unint64_t v41 = v39[2];
    unint64_t v40 = v39[3];
    if (v41 >= v40 >> 1) {
      unint64_t v39 = sub_1000C6914((void *)(v40 > 1), v41 + 1, 1, v39);
    }
    v39[2] = v41 + 1;
    unint64_t v42 = &v39[2 * v41];
    *((unsigned char *)v42 + 32) = v48;
    *((_WORD *)v42 + 17) = v38;
    v42[5] = v51;
    if (v50[2]) {
      goto LABEL_26;
    }
LABEL_32:
    swift_bridgeObjectRelease();
    return v39;
  }
  swift_bridgeObjectRelease();
  unint64_t v39 = _swiftEmptyArrayStorage;
  char v37 = v48;
  if (!v50[2]) {
    goto LABEL_32;
  }
LABEL_26:
  __int16 v43 = sub_1001E1C94(1u, 0, 4) | 0x10;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v39 = sub_1000C6914(0, v39[2] + 1, 1, v39);
  }
  unint64_t v45 = v39[2];
  unint64_t v44 = v39[3];
  if (v45 >= v44 >> 1) {
    unint64_t v39 = sub_1000C6914((void *)(v44 > 1), v45 + 1, 1, v39);
  }
  v39[2] = v45 + 1;
  v46 = &v39[2 * v45];
  *((unsigned char *)v46 + 32) = v37;
  *((_WORD *)v46 + 17) = v43;
  v46[5] = v50;
  return v39;
}

uint64_t NANScheduleEntry.timeBitmap.getter(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return a2;
}

uint64_t NANScheduleEntry.timeBitmap.setter(__int16 a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_10000C970(*(void *)(v3 + 16), *(void *)(v3 + 24));
  *(_WORD *)(v3 + 8) = a1;
  *(void *)(v3 + 16) = a2;
  *(void *)(v3 + 24) = a3;
  return result;
}

uint64_t NANScheduleEntry.hash(into:)(int a1, Swift::UInt8 a2, Swift::UInt16 a3, uint64_t a4, unint64_t a5)
{
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(a3);
  sub_100013D44(a4, a5);
  Data.hash(into:)();

  return sub_10000C970(a4, a5);
}

BOOL static NANScheduleEntry.__derived_struct_equals(_:_:)(char a1, __int16 a2, uint64_t a3, unint64_t a4, char a5, __int16 a6, uint64_t a7, unint64_t a8)
{
  return a1 == a5 && a2 == a6 && (_s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a3, a4, a7, a8) & 1) != 0;
}

uint64_t sub_100093318()
{
  if (*v0) {
    return 0x6D746942656D6974;
  }
  else {
    return 0x444970616DLL;
  }
}

uint64_t sub_100093354@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000A604C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10009337C(uint64_t a1)
{
  unint64_t v2 = sub_1000A32C8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000933B8(uint64_t a1)
{
  unint64_t v2 = sub_1000A32C8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANScheduleEntry.encode(to:)(void *a1, char a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v9 = sub_100010BCC(&qword_10047E3A0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_1000A32C8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v17) = a2;
  char v20 = 0;
  sub_1000A331C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v5)
  {
    __int16 v17 = a3;
    uint64_t v18 = v15;
    uint64_t v19 = v16;
    char v20 = 1;
    sub_1000A3244();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

Swift::Int NANScheduleEntry.hashValue.getter(Swift::UInt8 a1, Swift::UInt16 a2, uint64_t a3, unint64_t a4)
{
  return Hasher._finalize()();
}

uint64_t NANScheduleEntry.init(from:)(void *a1)
{
  return sub_1000A10B0(a1);
}

Swift::Int sub_100093654()
{
  uint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  Swift::UInt8 v3 = *(unsigned char *)v0;
  Swift::UInt16 v4 = *(_WORD *)(v0 + 8);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  sub_100013D44(v1, v2);
  Data.hash(into:)();
  sub_10000C970(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1000936E8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  Swift::UInt16 v3 = *(_WORD *)(v0 + 8);
  Hasher._combine(_:)(*(unsigned char *)v0);
  Hasher._combine(_:)(v3);
  sub_100013D44(v1, v2);
  Data.hash(into:)();

  return sub_10000C970(v1, v2);
}

Swift::Int sub_100093768()
{
  uint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  Swift::UInt8 v3 = *(unsigned char *)v0;
  Swift::UInt16 v4 = *(_WORD *)(v0 + 8);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  sub_100013D44(v1, v2);
  Data.hash(into:)();
  sub_10000C970(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1000937F8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1000A10B0(a1);
  if (!v2)
  {
    *(unsigned char *)a2 = result;
    *(_WORD *)(a2 + 8) = v5;
    *(void *)(a2 + 16) = v6;
    *(void *)(a2 + 24) = v7;
  }
  return result;
}

uint64_t sub_10009382C(void *a1)
{
  return NANScheduleEntry.encode(to:)(a1, *(unsigned char *)v1, *(_WORD *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

BOOL sub_100093850(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2
      && *((unsigned __int16 *)a1 + 4) == *((unsigned __int16 *)a2 + 4)
      && (_s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*((void *)a1 + 2), *((void *)a1 + 3), *((void *)a2 + 2), *((void *)a2 + 3)) & 1) != 0;
}

uint64_t NANMapIDs.init(rawValue:)(unsigned int a1)
{
  unsigned __int8 v1 = a1 & 1;
  if (a1) {
    int v2 = 0;
  }
  else {
    int v2 = (a1 >> 1) & 0xF;
  }
  return v2 & 0xFFFF00FF | (v1 << 8);
}

CoreP2P::NANMapID __swiftcall NANMapID.init(rawValue:)(Swift::UInt8 rawValue)
{
  return (CoreP2P::NANMapID)(rawValue & 0xF);
}

void *NANMapIDs.init(decoder:)(void *a1)
{
  Swift::UInt8 v3 = sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v1)
  {
    sub_100010754((uint64_t)a1);
  }
  else
  {
    sub_1000369C4(v8, v8[3]);
    unsigned int v4 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    unsigned __int8 v6 = v4 & 1;
    if (v4) {
      int v7 = 0;
    }
    else {
      int v7 = (v4 >> 1) & 0xF;
    }
    sub_100010754((uint64_t)v8);
    sub_100010754((uint64_t)a1);
    return (void *)(v7 & 0xFFFF00FF | (v6 << 8));
  }
  return v3;
}

uint64_t NANMapIDs.encode(to:)(void *a1)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  sub_100039448((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return sub_100010754((uint64_t)v2);
}

uint64_t NANMapIDs.rawValue.getter(int a1)
{
  if ((a1 & 0x100) != 0) {
    return 1;
  }
  else {
    return (2 * a1);
  }
}

unsigned __int8 *sub_100093A54@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2 = *result;
  int v3 = (v2 >> 1) & 0xF;
  int v4 = v2 & 1;
  if (v4) {
    LOWORD(v3) = 0;
  }
  *(_WORD *)a2 = v3 | ((_WORD)v4 << 8);
  *(unsigned char *)(a2 + 2) = 0;
  return result;
}

void sub_100093A74(char *a1@<X8>)
{
  if (v1[1]) {
    char v2 = 1;
  }
  else {
    char v2 = 2 * *v1;
  }
  *a1 = v2;
}

Swift::Int sub_100093A90()
{
  char v1 = *v0;
  int v2 = v0[1];
  Hasher.init(_seed:)();
  if (v2) {
    Swift::UInt8 v3 = 1;
  }
  else {
    Swift::UInt8 v3 = 2 * v1;
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_100093AE4()
{
  if (v0[1]) {
    Swift::UInt8 v1 = 1;
  }
  else {
    Swift::UInt8 v1 = 2 * *v0;
  }
  Hasher._combine(_:)(v1);
}

Swift::Int sub_100093B20()
{
  char v1 = *v0;
  int v2 = v0[1];
  Hasher.init(_seed:)();
  if (v2) {
    Swift::UInt8 v3 = 1;
  }
  else {
    Swift::UInt8 v3 = 2 * v1;
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t sub_100093B70()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100093BD0(void *a1)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  sub_100039448((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return sub_100010754((uint64_t)v2);
}

uint64_t sub_100093C78(unsigned char *a1, unsigned char *a2)
{
  if (a1[1]) {
    char v2 = a2[1];
  }
  else {
    char v2 = (((*a1 ^ *a2) & 0x7F) == 0) & ~a2[1];
  }
  return v2 & 1;
}

uint64_t NANMapID.init(decoder:)(void *a1)
{
  uint64_t v3 = (uint64_t)sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v1)
  {
    sub_1000369C4(v5, v5[3]);
    uint64_t v3 = dispatch thunk of SingleValueDecodingContainer.decode(_:)() & 0xF;
    sub_100010754((uint64_t)v5);
  }
  sub_100010754((uint64_t)a1);
  return v3;
}

uint64_t NANMapID.description.getter(char a1)
{
  if (!a1) {
    return 0x7972616D697270;
  }
  if (a1 == 1) {
    return 0x7261646E6F636573;
  }
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_100093DF4()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100093E54()
{
  return RawRepresentable<>.encode(to:)();
}

unsigned char *sub_100093EA4@<X0>(unsigned char *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result & 0xF;
  return result;
}

uint64_t sub_100093EB8()
{
  if (*v0 == 1) {
    return 0x7261646E6F636573;
  }
  if (*v0) {
    return dispatch thunk of CustomStringConvertible.description.getter();
  }
  return 0x7972616D697270;
}

uint64_t NonNANOperatingChannelInformation.channelNumber.getter(unsigned int a1)
{
  return a1 >> 8;
}

uint64_t NonNANOperatingChannelInformation.channelCenterFrequency.getter(unsigned int a1)
{
  return HIWORD(a1);
}

uint64_t NonNANOperatingChannelInformation.channelCenterFrequency.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 2) = result;
  return result;
}

unint64_t NonNANOperatingChannelInformation.channel.getter(__int16 a1)
{
  return sub_1001C7008(HIBYTE(a1)) & 0xFFFFFFFFFFFFLL;
}

void NonNANOperatingChannelInformation.hash(into:)(int a1, unsigned int a2)
{
  unsigned int v2 = a2 >> 8;
  unsigned int v3 = HIWORD(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
}

BOOL static NonNANOperatingChannelInformation.__derived_struct_equals(_:_:)(int a1, int a2)
{
  return (a1 & 0xFFFFFF) == (a2 & 0xFFFFFF);
}

unint64_t sub_100093FD0()
{
  unint64_t v1 = 0x4E6C656E6E616863;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000016;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD000000000000014;
  }
}

uint64_t sub_10009403C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000A6144(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100094064(uint64_t a1)
{
  unint64_t v2 = sub_1000A3370();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000940A0(uint64_t a1)
{
  unint64_t v2 = sub_1000A3370();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NonNANOperatingChannelInformation.encode(to:)(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_10047E3B8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  unsigned __int8 v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_1000A3370();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int NonNANOperatingChannelInformation.hashValue.getter(unsigned int a1)
{
  Swift::UInt8 v1 = a1;
  unsigned int v2 = a1 >> 8;
  unsigned int v3 = HIWORD(a1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t NonNANOperatingChannelInformation.init(from:)(void *a1)
{
  return sub_1000A1548(a1) & 0xFFFFFF;
}

Swift::Int sub_1000942F0()
{
  Swift::UInt8 v1 = *v0;
  Swift::UInt8 v2 = v0[1];
  Swift::UInt8 v3 = v0[2];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_100094360()
{
  Swift::UInt8 v1 = v0[1];
  Swift::UInt8 v2 = v0[2];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int sub_1000943AC()
{
  Swift::UInt8 v1 = *v0;
  Swift::UInt8 v2 = v0[1];
  Swift::UInt8 v3 = v0[2];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t sub_100094418@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1000A1548(a1);
  if (!v2)
  {
    *(_WORD *)a2 = result;
    *(unsigned char *)(a2 + 2) = BYTE2(result);
  }
  return result;
}

uint64_t sub_100094454(void *a1)
{
  return NonNANOperatingChannelInformation.encode(to:)(a1);
}

BOOL sub_100094478(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

CoreP2P::NonNANBeaconInformation __swiftcall NonNANBeaconInformation.init(targetBeaconTransmissionTimeOffset:beaconInterval:)(Swift::UInt16 targetBeaconTransmissionTimeOffset, Swift::UInt16 beaconInterval)
{
  return (CoreP2P::NonNANBeaconInformation)(targetBeaconTransmissionTimeOffset | (beaconInterval << 16));
}

void NonNANBeaconInformation.hash(into:)(int a1, unsigned int a2)
{
  unsigned int v2 = HIWORD(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v2);
}

BOOL static NonNANBeaconInformation.__derived_struct_equals(_:_:)(int a1, int a2)
{
  return a1 == a2;
}

unint64_t sub_1000944F8()
{
  if (*v0) {
    return 0xD000000000000011;
  }
  else {
    return 0xD000000000000022;
  }
}

uint64_t sub_100094538@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000A62B8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100094560(uint64_t a1)
{
  unint64_t v2 = sub_1000A33C4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10009459C(uint64_t a1)
{
  unint64_t v2 = sub_1000A33C4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NonNANBeaconInformation.encode(to:)(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_10047E3C8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  unsigned __int8 v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_1000A33C4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int NonNANBeaconInformation.hashValue.getter(unsigned int a1)
{
  Swift::UInt16 v1 = a1;
  unsigned int v2 = HIWORD(a1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t NonNANBeaconInformation.init(from:)(void *a1)
{
  return sub_1000A13A4(a1);
}

Swift::Int sub_1000947B0()
{
  Swift::UInt16 v1 = *v0;
  Swift::UInt16 v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_100094810()
{
  Swift::UInt16 v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int sub_100094850()
{
  Swift::UInt16 v1 = *v0;
  Swift::UInt16 v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_1000948AC@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = sub_1000A13A4(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1000948D8(void *a1)
{
  return NonNANBeaconInformation.encode(to:)(a1);
}

uint64_t sub_1000948F4()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100094954()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t IEEE80211InformationElement.HighThroughputCapability.mcs.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10000C970(*(void *)(v2 + 8), *(void *)(v2 + 16));
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t DeprecatedNANAvailability.init(from:)(void *a1)
{
  return sub_1000A1EF8(a1) & 0x1FFFF;
}

uint64_t DeprecatedNANAvailability.encode(to:)(void *a1, unsigned int a2)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  sub_1001E1C7C(a2, 0, 4);
  if (!v2)
  {
    sub_1001E1C7C(BYTE1(a2), 4uLL, 2);
    sub_1001E1C64(HIWORD(a2) & 1, 6, 1);
    sub_100039448((uint64_t)v5, v6);
    sub_1000A3418();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    sub_100039448((uint64_t)v5, v6);
    sub_1000742DC();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return sub_100010754((uint64_t)v5);
}

uint64_t DeprecatedNANAvailability.hash(into:)(int a1, unsigned int a2, uint64_t a3, unint64_t a4)
{
  char v6 = BYTE2(a2);
  unsigned int v7 = a2 >> 8;
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v6 & 1);
  sub_100013D44(a3, a4);
  Data.hash(into:)();

  return sub_10000C970(a3, a4);
}

uint64_t static DeprecatedNANAvailability.__derived_struct_equals(_:_:)(int a1, uint64_t a2, unint64_t a3, int a4, uint64_t a5, unint64_t a6)
{
  if ((unsigned __int16)a1 != (unsigned __int16)a4 || ((a1 ^ a4) & 0x10000) != 0) {
    return 0;
  }
  else {
    return _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a2, a3, a5, a6);
  }
}

Swift::Int DeprecatedNANAvailability.hashValue.getter(unsigned int a1, uint64_t a2, unint64_t a3)
{
  unsigned int v6 = a1 >> 8;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(BYTE2(a1) & 1);
  sub_100013D44(a2, a3);
  Data.hash(into:)();
  sub_10000C970(a2, a3);
  return Hasher._finalize()();
}

Swift::Int sub_100094CE4()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 2);
  uint64_t v2 = *(void *)(v0 + 8);
  unint64_t v3 = *(void *)(v0 + 16);
  Swift::UInt8 v4 = *(unsigned char *)v0;
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v1);
  sub_100013D44(v2, v3);
  Data.hash(into:)();
  sub_10000C970(v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_100094D88()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 2);
  uint64_t v2 = *(void *)(v0 + 8);
  unint64_t v3 = *(void *)(v0 + 16);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 1);
  Hasher._combine(_:)(*(unsigned char *)v0);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v1);
  sub_100013D44(v2, v3);
  Data.hash(into:)();

  return sub_10000C970(v2, v3);
}

Swift::Int sub_100094E14()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 2);
  uint64_t v2 = *(void *)(v0 + 8);
  unint64_t v3 = *(void *)(v0 + 16);
  Swift::UInt8 v4 = *(unsigned char *)v0;
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v1);
  sub_100013D44(v2, v3);
  Data.hash(into:)();
  sub_10000C970(v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_100094EB4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1000A1EF8(a1);
  if (!v2)
  {
    *(_WORD *)a2 = result;
    *(unsigned char *)(a2 + 2) = BYTE2(result) & 1;
    *(void *)(a2 + 8) = v5;
    *(void *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_100094EF4(void *a1)
{
  if (*((unsigned char *)v1 + 2)) {
    int v2 = 0x10000;
  }
  else {
    int v2 = 0;
  }
  return DeprecatedNANAvailability.encode(to:)(a1, *v1 | v2);
}

uint64_t sub_100094F28(unsigned __int8 *a1, unsigned __int8 *a2)
{
  BOOL v2 = *a1 == *a2 && a1[1] == a2[1];
  if (!v2 || ((a1[2] ^ a2[2]) & 1) != 0) {
    return 0;
  }
  else {
    return _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*((void *)a1 + 1), *((void *)a1 + 2), *((void *)a2 + 1), *((void *)a2 + 2));
  }
}

uint64_t DeprecatedNANAvailabilityEntry.init(from:)(void *a1)
{
  return sub_1000A1C6C(a1) & 0xFFFFFF;
}

uint64_t DeprecatedNANAvailabilityEntry.hash(into:)(int a1, unsigned int a2, uint64_t a3, unint64_t a4)
{
  unsigned int v6 = a2 >> 8;
  unsigned int v7 = HIWORD(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  sub_100013D44(a3, a4);
  Data.hash(into:)();

  return sub_10000C970(a3, a4);
}

uint64_t static DeprecatedNANAvailabilityEntry.__derived_struct_equals(_:_:)(int a1, uint64_t a2, unint64_t a3, int a4, uint64_t a5, unint64_t a6)
{
  if ((a1 & 0xFFFFFF) == (a4 & 0xFFFFFF)) {
    return _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a2, a3, a5, a6);
  }
  else {
    return 0;
  }
}

uint64_t sub_10009504C()
{
  uint64_t result = 0x6C6F72746E6F63;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6E6974617265706FLL;
      break;
    case 2:
      uint64_t result = 0x4E6C656E6E616863;
      break;
    case 3:
      uint64_t result = 0x6962616C69617661;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100095100@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000A63A8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100095128(uint64_t a1)
{
  unint64_t v2 = sub_1000A346C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100095164(uint64_t a1)
{
  unint64_t v2 = sub_1000A346C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t DeprecatedNANAvailabilityEntry.encode(to:)(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = a4;
  uint64_t v8 = sub_100010BCC(&qword_10047E3E0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_1000A346C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v17) = a2;
  char v19 = 0;
  sub_1000A34C0();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v4)
  {
    uint64_t v12 = a3;
    uint64_t v13 = v16;
    LOBYTE(v17) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v17) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v17 = v12;
    uint64_t v18 = v13;
    char v19 = 3;
    sub_1000742DC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

Swift::Int DeprecatedNANAvailabilityEntry.hashValue.getter(unsigned int a1, uint64_t a2, unint64_t a3)
{
  Swift::UInt8 v5 = a1;
  unsigned int v6 = a1 >> 8;
  unsigned int v7 = HIWORD(a1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  sub_100013D44(a2, a3);
  Data.hash(into:)();
  sub_10000C970(a2, a3);
  return Hasher._finalize()();
}

Swift::Int sub_100095438()
{
  uint64_t v1 = *(void *)(v0 + 8);
  unint64_t v2 = *(void *)(v0 + 16);
  Swift::UInt8 v3 = *(unsigned char *)v0;
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 1);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  sub_100013D44(v1, v2);
  Data.hash(into:)();
  sub_10000C970(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1000954DC()
{
  uint64_t v1 = *(void *)(v0 + 8);
  unint64_t v2 = *(void *)(v0 + 16);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 1);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 2);
  Hasher._combine(_:)(*(unsigned char *)v0);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  sub_100013D44(v1, v2);
  Data.hash(into:)();

  return sub_10000C970(v1, v2);
}

Swift::Int sub_100095568()
{
  uint64_t v1 = *(void *)(v0 + 8);
  unint64_t v2 = *(void *)(v0 + 16);
  Swift::UInt8 v3 = *(unsigned char *)v0;
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 1);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  sub_100013D44(v1, v2);
  Data.hash(into:)();
  sub_10000C970(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_100095608@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1000A1C6C(a1);
  if (!v2)
  {
    *(_WORD *)a2 = result;
    *(unsigned char *)(a2 + 2) = BYTE2(result);
    *(void *)(a2 + 8) = v5;
    *(void *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_100095648(void *a1)
{
  return DeprecatedNANAvailabilityEntry.encode(to:)(a1, *(_WORD *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16));
}

uint64_t sub_100095670(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2]) {
    return _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*((void *)a1 + 1), *((void *)a1 + 2), *((void *)a2 + 1), *((void *)a2 + 2));
  }
  else {
    return 0;
  }
}

BOOL sub_1000956B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
    return 0;
  }
  Swift::UInt8 v3 = (int *)(a1 + 36);
  Swift::UInt8 v4 = (int *)(a2 + 36);
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    int v8 = *v3++;
    int v7 = v8;
    int v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

uint64_t _s7CoreP2P12NANAttributeO18PublicAvailabilityV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    Swift::UInt8 v3 = (unint64_t *)(a2 + 56);
    Swift::UInt8 v4 = (unint64_t *)(a1 + 56);
    while (*((unsigned __int8 *)v4 - 24) == *((unsigned __int8 *)v3 - 24)
         && *((unsigned __int16 *)v4 - 8) == *((unsigned __int16 *)v3 - 8))
    {
      uint64_t v6 = *(v4 - 1);
      unint64_t v7 = *v4;
      uint64_t v9 = *(v3 - 1);
      unint64_t v8 = *v3;
      v3 += 4;
      v4 += 4;
      uint64_t v10 = 0;
      switch(v7 >> 62)
      {
        case 1uLL:
          LODWORD(v10) = HIDWORD(v6) - v6;
          if (__OFSUB__(HIDWORD(v6), v6))
          {
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
          }
          uint64_t v10 = (int)v10;
LABEL_17:
          unint64_t v14 = v8 >> 62;
          switch(v8 >> 62)
          {
            case 1uLL:
              LODWORD(v15) = HIDWORD(v9) - v9;
              if (__OFSUB__(HIDWORD(v9), v9)) {
                goto LABEL_126;
              }
              uint64_t v15 = (int)v15;
LABEL_22:
              if (v10 != v15) {
                return 0;
              }
              if (v10 < 1) {
                goto LABEL_6;
              }
              break;
            case 2uLL:
              uint64_t v17 = *(void *)(v9 + 16);
              uint64_t v16 = *(void *)(v9 + 24);
              BOOL v13 = __OFSUB__(v16, v17);
              uint64_t v15 = v16 - v17;
              if (!v13) {
                goto LABEL_22;
              }
              goto LABEL_127;
            case 3uLL:
              if (!v10) {
                goto LABEL_6;
              }
              sub_100013D44(v9, v8);
              return 0;
            default:
              uint64_t v15 = BYTE6(v8);
              goto LABEL_22;
          }
          break;
        case 2uLL:
          uint64_t v12 = *(void *)(v6 + 16);
          uint64_t v11 = *(void *)(v6 + 24);
          BOOL v13 = __OFSUB__(v11, v12);
          uint64_t v10 = v11 - v12;
          if (!v13) {
            goto LABEL_17;
          }
          goto LABEL_125;
        case 3uLL:
          goto LABEL_17;
        default:
          uint64_t v10 = BYTE6(v7);
          goto LABEL_17;
      }
      switch(v7 >> 62)
      {
        case 1uLL:
          if ((int)v6 > v6 >> 32) {
            goto LABEL_128;
          }
          sub_100013D44(v9, v8);
          unint64_t v79 = v7;
          sub_100013D44(v6, v7);
          uint64_t v23 = (char *)__DataStorage._bytes.getter();
          if (!v23) {
            goto LABEL_36;
          }
          uint64_t v24 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v6, v24)) {
            goto LABEL_130;
          }
          v23 += (int)v6 - v24;
LABEL_36:
          __DataStorage._length.getter();
          if (v14)
          {
            __s1 = v23;
            if (v14 == 1)
            {
              if (v9 >> 32 < (int)v9) {
                goto LABEL_139;
              }
              swift_retain();
              char v25 = (char *)__DataStorage._bytes.getter();
              if (v25)
              {
                uint64_t v26 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v9, v26)) {
                  goto LABEL_146;
                }
                v25 += (int)v9 - v26;
              }
              unint64_t v27 = v79;
              uint64_t v28 = __DataStorage._length.getter();
              if (v28 >= (v9 >> 32) - (int)v9) {
                size_t v29 = (v9 >> 32) - (int)v9;
              }
              else {
                size_t v29 = v28;
              }
              if (!__s1) {
                goto LABEL_148;
              }
              if (!v25) {
                goto LABEL_149;
              }
              int v30 = memcmp(__s1, v25, v29);
              sub_10000C970(v9, v8);
              goto LABEL_76;
            }
            uint64_t v68 = *(void *)(v9 + 16);
            uint64_t v67 = *(void *)(v9 + 24);
            swift_retain();
            swift_retain();
            uint64_t v69 = __DataStorage._bytes.getter();
            if (v69)
            {
              uint64_t v70 = __DataStorage._offset.getter();
              if (__OFSUB__(v68, v70)) {
                goto LABEL_145;
              }
              v69 += v68 - v70;
            }
            BOOL v13 = __OFSUB__(v67, v68);
            uint64_t v71 = v67 - v68;
            if (v13) {
              goto LABEL_140;
            }
            uint64_t v72 = __DataStorage._length.getter();
            if (v72 >= v71) {
              size_t v73 = v71;
            }
            else {
              size_t v73 = v72;
            }
            unsigned __int16 v56 = __s1;
            if (!__s1) {
              goto LABEL_159;
            }
            if (!v69) {
              goto LABEL_160;
            }
            size_t v55 = v73;
            uint64_t v57 = (const void *)v69;
LABEL_120:
            int v74 = memcmp(v56, v57, v55);
            swift_release();
            swift_release();
            sub_10000C970(v9, v8);
            sub_10000C970(v6, v79);
            if (v74) {
              return 0;
            }
          }
          else
          {
            v86[0] = v9;
            LOWORD(v86[1]) = v8;
            BYTE2(v86[1]) = BYTE2(v8);
            BYTE3(v86[1]) = BYTE3(v8);
            BYTE4(v86[1]) = BYTE4(v8);
            BYTE5(v86[1]) = BYTE5(v8);
            if (!v23) {
              goto LABEL_158;
            }
            int v66 = memcmp(v23, v86, BYTE6(v8));
            sub_10000C970(v6, v79);
            if (v66) {
              return 0;
            }
          }
          goto LABEL_6;
        case 2uLL:
          unint64_t v31 = v7;
          uint64_t v32 = *(void *)(v6 + 16);
          sub_100013D44(v9, v8);
          sub_100013D44(v6, v31);
          uint64_t v77 = v6;
          swift_retain();
          swift_retain();
          uint64_t v33 = __DataStorage._bytes.getter();
          if (v33)
          {
            uint64_t v34 = v33;
            uint64_t v35 = __DataStorage._offset.getter();
            if (__OFSUB__(v32, v35)) {
              goto LABEL_129;
            }
            unint64_t v36 = (void *)(v34 + v32 - v35);
          }
          else
          {
            unint64_t v36 = 0;
          }
          __DataStorage._length.getter();
          if (v14)
          {
            v76 = v36;
            if (v14 == 1)
            {
              if (v9 >> 32 < (int)v9) {
                goto LABEL_135;
              }
              swift_retain();
              unint64_t v42 = (char *)__DataStorage._bytes.getter();
              if (v42)
              {
                uint64_t v43 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v9, v43)) {
                  goto LABEL_144;
                }
                v42 += (int)v9 - v43;
              }
              unint64_t v27 = v31;
              uint64_t v44 = __DataStorage._length.getter();
              if (v44 >= (v9 >> 32) - (int)v9) {
                size_t v45 = (v9 >> 32) - (int)v9;
              }
              else {
                size_t v45 = v44;
              }
              if (!v36) {
                goto LABEL_151;
              }
              if (!v42) {
                goto LABEL_152;
              }
              int v30 = memcmp(v36, v42, v45);
              sub_10000C970(v9, v8);
              swift_release();
              uint64_t v6 = v77;
              swift_release();
LABEL_76:
              sub_10000C970(v9, v8);
              sub_10000C970(v6, v27);
              if (v30) {
                return 0;
              }
            }
            else
            {
              uint64_t v60 = *(void *)(v9 + 16);
              uint64_t v59 = *(void *)(v9 + 24);
              swift_retain();
              swift_retain();
              v61 = (char *)__DataStorage._bytes.getter();
              if (v61)
              {
                uint64_t v62 = __DataStorage._offset.getter();
                if (__OFSUB__(v60, v62)) {
                  goto LABEL_143;
                }
                v61 += v60 - v62;
              }
              if (__OFSUB__(v59, v60)) {
                goto LABEL_138;
              }
              uint64_t v63 = __DataStorage._length.getter();
              if (v63 >= v59 - v60) {
                size_t v64 = v59 - v60;
              }
              else {
                size_t v64 = v63;
              }
              if (!v76) {
                goto LABEL_156;
              }
              if (!v61) {
                goto LABEL_157;
              }
              int v65 = memcmp(v76, v61, v64);
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              sub_10000C970(v9, v8);
              sub_10000C970(v77, v31);
              if (v65) {
                return 0;
              }
            }
          }
          else
          {
            v86[0] = v9;
            LOWORD(v86[1]) = v8;
            BYTE2(v86[1]) = BYTE2(v8);
            BYTE3(v86[1]) = BYTE3(v8);
            BYTE4(v86[1]) = BYTE4(v8);
            BYTE5(v86[1]) = BYTE5(v8);
            if (!v36) {
              goto LABEL_155;
            }
            int v58 = memcmp(v36, v86, BYTE6(v8));
            swift_release();
            swift_release();
            sub_10000C970(v9, v8);
            sub_10000C970(v77, v31);
            if (v58) {
              return 0;
            }
          }
LABEL_6:
          if (!--v2) {
            return 1;
          }
          break;
        case 3uLL:
          memset(v86, 0, 14);
          if (!v14) {
            goto LABEL_61;
          }
          unint64_t v79 = v7;
          if (v14 == 1)
          {
            uint64_t v18 = (v9 >> 32) - (int)v9;
            if (v9 >> 32 < (int)v9) {
              goto LABEL_132;
            }
            sub_100013D44(v9, v8);
            sub_100013D44(v6, v7);
            uint64_t v37 = __DataStorage._bytes.getter();
            if (!v37) {
              goto LABEL_150;
            }
            uint64_t v20 = v37;
            uint64_t v38 = __DataStorage._offset.getter();
            uint64_t v22 = (int)v9 - v38;
            if (__OFSUB__((int)v9, v38)) {
              goto LABEL_134;
            }
LABEL_56:
            uint64_t v39 = __DataStorage._length.getter();
            if (v39 >= v18) {
              size_t v40 = v18;
            }
            else {
              size_t v40 = v39;
            }
            int v41 = memcmp(v86, (const void *)(v20 + v22), v40);
            sub_10000C970(v9, v8);
            sub_10000C970(v6, v79);
            if (v41) {
              return 0;
            }
            goto LABEL_6;
          }
          uint64_t v52 = *(void *)(v9 + 16);
          uint64_t v53 = *(void *)(v9 + 24);
          sub_100013D44(v9, v8);
          sub_100013D44(v6, v7);
          swift_retain();
          swift_retain();
          uint64_t v48 = __DataStorage._bytes.getter();
          if (v48)
          {
            uint64_t v54 = __DataStorage._offset.getter();
            if (__OFSUB__(v52, v54)) {
              goto LABEL_142;
            }
            v48 += v52 - v54;
          }
          BOOL v13 = __OFSUB__(v53, v52);
          int64_t v50 = v53 - v52;
          if (v13) {
            goto LABEL_137;
          }
          uint64_t v51 = __DataStorage._length.getter();
          if (!v48) {
            goto LABEL_154;
          }
LABEL_89:
          if (v51 >= v50) {
            size_t v55 = v50;
          }
          else {
            size_t v55 = v51;
          }
          unsigned __int16 v56 = v86;
          uint64_t v57 = (const void *)v48;
          goto LABEL_120;
        default:
          v86[0] = v6;
          LOWORD(v86[1]) = v7;
          BYTE2(v86[1]) = BYTE2(v7);
          BYTE3(v86[1]) = BYTE3(v7);
          BYTE4(v86[1]) = BYTE4(v7);
          BYTE5(v86[1]) = BYTE5(v7);
          if (!v14)
          {
LABEL_61:
            uint64_t __s2 = v9;
            __int16 v81 = v8;
            char v82 = BYTE2(v8);
            char v83 = BYTE3(v8);
            char v84 = BYTE4(v8);
            char v85 = BYTE5(v8);
            sub_100013D44(v9, v8);
            if (memcmp(v86, &__s2, BYTE6(v8))) {
              return 0;
            }
            goto LABEL_6;
          }
          unint64_t v79 = v7;
          if (v14 == 1)
          {
            uint64_t v18 = (v9 >> 32) - (int)v9;
            if (v9 >> 32 < (int)v9) {
              goto LABEL_131;
            }
            sub_100013D44(v9, v8);
            sub_100013D44(v6, v7);
            uint64_t v19 = __DataStorage._bytes.getter();
            if (!v19)
            {
              __DataStorage._length.getter();
              __break(1u);
LABEL_148:
              __break(1u);
LABEL_149:
              __break(1u);
LABEL_150:
              __DataStorage._length.getter();
              __break(1u);
LABEL_151:
              __break(1u);
LABEL_152:
              __break(1u);
LABEL_153:
              __break(1u);
LABEL_154:
              __break(1u);
LABEL_155:
              __break(1u);
LABEL_156:
              __break(1u);
LABEL_157:
              __break(1u);
LABEL_158:
              __break(1u);
LABEL_159:
              __break(1u);
LABEL_160:
              __break(1u);
              JUMPOUT(0x1000960D4);
            }
            uint64_t v20 = v19;
            uint64_t v21 = __DataStorage._offset.getter();
            uint64_t v22 = (int)v9 - v21;
            if (__OFSUB__((int)v9, v21)) {
              goto LABEL_133;
            }
            goto LABEL_56;
          }
          uint64_t v46 = *(void *)(v9 + 16);
          uint64_t v47 = *(void *)(v9 + 24);
          sub_100013D44(v9, v8);
          sub_100013D44(v6, v7);
          swift_retain();
          swift_retain();
          uint64_t v48 = __DataStorage._bytes.getter();
          if (v48)
          {
            uint64_t v49 = __DataStorage._offset.getter();
            if (__OFSUB__(v46, v49)) {
              goto LABEL_141;
            }
            v48 += v46 - v49;
          }
          BOOL v13 = __OFSUB__(v47, v46);
          int64_t v50 = v47 - v46;
          if (v13) {
            goto LABEL_136;
          }
          uint64_t v51 = __DataStorage._length.getter();
          if (!v48) {
            goto LABEL_153;
          }
          goto LABEL_89;
      }
    }
    return 0;
  }
  return 1;
}

uint64_t sub_100096104(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32)
      && *(unsigned __int16 *)(a1 + 34) == *(unsigned __int16 *)(a2 + 34)
      && *(unsigned __int8 *)(a1 + 36) == *(unsigned __int8 *)(a2 + 36))
    {
      uint64_t v5 = (unsigned __int8 *)(a2 + 46);
      uint64_t v6 = (unsigned __int8 *)(a1 + 46);
      do
      {
        char v7 = *(v5 - 6);
        if (*(v6 - 6))
        {
          if (!*(v5 - 6)) {
            return 0;
          }
        }
        else
        {
          if (*((unsigned __int16 *)v6 - 4) != *((unsigned __int16 *)v5 - 4)) {
            char v7 = 1;
          }
          if (v7) {
            return 0;
          }
        }
        if (!--v2) {
          return 1;
        }
        int v8 = *(v5 - 4);
        int v9 = *((unsigned __int16 *)v5 - 1);
        int v11 = *v5;
        v5 += 10;
        int v10 = v11;
        int v12 = *v6;
        int v13 = *((unsigned __int16 *)v6 - 1);
        int v14 = *(v6 - 4);
        v6 += 10;
      }
      while (v14 == v8 && v13 == v9 && v12 == v10);
    }
    return 0;
  }
  return 1;
}

BOOL sub_1000961BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32)) {
    return 0;
  }
  Swift::UInt8 v3 = (unsigned __int8 *)(a1 + 33);
  Swift::UInt8 v4 = (unsigned __int8 *)(a2 + 33);
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    int v8 = *v3++;
    int v7 = v8;
    int v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

uint64_t sub_100096228(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    if (*(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)
      && ((0x801004u >> (8 * *(unsigned char *)(a1 + 36))) & 0xFFC) == ((0x801004u >> (8 * *(unsigned char *)(a2 + 36))) & 0xFFC))
    {
      uint64_t v3 = a1 + 37;
      for (i = (unsigned __int8 *)(a2 + 37); ; i += 8)
      {
        int v5 = *i;
        int v6 = i[1];
        int v7 = *(unsigned __int8 *)(v3 + 1);
        switch(*(unsigned char *)v3)
        {
          case 2:
            if (v5 != 2 || v7 != v6) {
              return 0;
            }
            break;
          case 3:
            if (v5 != 3 || v7 != v6) {
              return 0;
            }
            break;
          case 4:
            if (v5 != 4 || v7 != v6) {
              return 0;
            }
            break;
          case 5:
            if (v5 != 5 || v7 != v6) {
              return 0;
            }
            break;
          case 6:
            if (v5 != 6 || v7 != v6) {
              return 0;
            }
            break;
          default:
            if ((v5 - 2) < 5) {
              return 0;
            }
            if (((*(unsigned char *)v3 & 1) == 0) == (v5 & 1) || v7 != v6) {
              return 0;
            }
            break;
        }
        if (!--v2) {
          break;
        }
        if (*(_DWORD *)(v3 + 3) != *(_DWORD *)(i + 3)) {
          return 0;
        }
        uint64_t result = 0;
        char v15 = *(unsigned char *)(v3 + 7);
        v3 += 8;
        unsigned __int8 v16 = i[7];
        if ((0x801004u >> (8 * v15)) != (0x801004u >> (8 * v16))) {
          return result;
        }
      }
      return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t _s7CoreP2P15AWDLActionFrameV28AWDLChannelSequenceParameterV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (unsigned int *)(a1 + 32);
    for (i = (unsigned int *)(a2 + 32); ; i += 2)
    {
      unint64_t v5 = *v3 | ((unint64_t)*((unsigned __int16 *)v3 + 2) << 32);
      unint64_t v6 = *i | ((unint64_t)*((unsigned __int16 *)i + 2) << 32);
      uint64_t v7 = v6 & 0xFF00000000;
      if ((v5 & 0xFF00000000) != 0x300000000) {
        break;
      }
      if (v7 != 0x300000000) {
        return 0;
      }
LABEL_6:
      v3 += 2;
      if (!--v2) {
        return 1;
      }
    }
    if (v7 != 0x300000000
      && *v3 == *i
      && (0x801004u >> ((v5 >> 29) & 0xF8)) == (0x801004u >> ((v6 >> 29) & 0xF8)))
    {
      unint64_t v8 = v6 >> 40;
      switch(v5 >> 40)
      {
        case 2uLL:
          if (v8 != 2) {
            return 0;
          }
          goto LABEL_6;
        case 3uLL:
          if (v8 != 3) {
            return 0;
          }
          goto LABEL_6;
        case 4uLL:
          if (v8 != 4) {
            return 0;
          }
          goto LABEL_6;
        case 5uLL:
          if (v8 != 5) {
            return 0;
          }
          goto LABEL_6;
        case 6uLL:
          if (v8 != 6) {
            return 0;
          }
          goto LABEL_6;
        default:
          if ((v8 - 2) < 5 || ((v5 & 0x10000000000) == 0) == ((v6 >> 40) & 1)) {
            return 0;
          }
          goto LABEL_6;
      }
    }
    return 0;
  }
  return 1;
}

BOOL _s7CoreP2P15AWDLActionFrameV12SyncTreePathV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = v2 - 1;
  uint64_t v4 = a1 + 37;
  uint64_t v5 = a2 + 37;
  do
  {
    int v6 = *(_DWORD *)(v4 - 5) ^ *(_DWORD *)(v5 - 5) | *(unsigned __int16 *)(v4 - 1) ^ *(unsigned __int16 *)(v5 - 1);
    BOOL result = v6 == 0;
    BOOL v9 = v3-- != 0;
    if (v6) {
      break;
    }
    v4 += 6;
    v5 += 6;
  }
  while (v9);
  return result;
}

uint64_t sub_1000965CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (unint64_t *)(a1 + 40);
    uint64_t v4 = (unint64_t *)(a2 + 40);
    while (1)
    {
      uint64_t v6 = *(v3 - 1);
      unint64_t v5 = *v3;
      uint64_t v8 = *(v4 - 1);
      unint64_t v7 = *v4;
      unint64_t v9 = *v3 >> 62;
      v3 += 2;
      v4 += 2;
      uint64_t v10 = 0;
      switch(v9)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v6), v6))
          {
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
          }
          uint64_t v10 = HIDWORD(v6) - (int)v6;
LABEL_13:
          sub_100013D44(v6, v5);
          break;
        case 2uLL:
          uint64_t v12 = *(void *)(v6 + 16);
          uint64_t v11 = *(void *)(v6 + 24);
          uint64_t v10 = v11 - v12;
          if (!__OFSUB__(v11, v12)) {
            goto LABEL_13;
          }
          goto LABEL_124;
        case 3uLL:
          break;
        default:
          uint64_t v10 = BYTE6(v5);
          break;
      }
      unint64_t v13 = v7 >> 62;
      switch(v7 >> 62)
      {
        case 1uLL:
          LODWORD(v14) = HIDWORD(v8) - v8;
          if (__OFSUB__(HIDWORD(v8), v8)) {
            goto LABEL_125;
          }
          uint64_t v14 = (int)v14;
LABEL_19:
          if (v10 != v14) {
            goto LABEL_121;
          }
          if (v10 < 1)
          {
LABEL_6:
            sub_10000C970(v6, v5);
          }
          else
          {
            switch((int)v9)
            {
              case 1:
                v76 = v3;
                if ((int)v6 > v6 >> 32) {
                  goto LABEL_127;
                }
                sub_100013D44(v8, v7);
                uint64_t v23 = (char *)__DataStorage._bytes.getter();
                if (!v23) {
                  goto LABEL_33;
                }
                uint64_t v24 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v6, v24)) {
                  goto LABEL_129;
                }
                v23 += (int)v6 - v24;
LABEL_33:
                __DataStorage._length.getter();
                if (!v13)
                {
                  __s1[0] = v8;
                  LOWORD(__s1[1]) = v7;
                  BYTE2(__s1[1]) = BYTE2(v7);
                  BYTE3(__s1[1]) = BYTE3(v7);
                  BYTE4(__s1[1]) = BYTE4(v7);
                  BYTE5(__s1[1]) = BYTE5(v7);
                  if (!v23) {
                    goto LABEL_157;
                  }
                  size_t v41 = BYTE6(v7);
                  size_t v40 = __s1;
                  uint64_t v39 = v23;
LABEL_103:
                  int v29 = memcmp(v39, v40, v41);
                  goto LABEL_104;
                }
                if (v13 == 1)
                {
                  if (v8 >> 32 < (int)v8) {
                    goto LABEL_138;
                  }
                  swift_retain();
                  char v25 = (char *)__DataStorage._bytes.getter();
                  if (v25)
                  {
                    uint64_t v26 = __DataStorage._offset.getter();
                    if (__OFSUB__((int)v8, v26)) {
                      goto LABEL_145;
                    }
                    v25 += (int)v8 - v26;
                  }
                  uint64_t v27 = __DataStorage._length.getter();
                  if (v27 >= (v8 >> 32) - (int)v8) {
                    size_t v28 = (v8 >> 32) - (int)v8;
                  }
                  else {
                    size_t v28 = v27;
                  }
                  if (!v23) {
                    goto LABEL_147;
                  }
                  if (!v25) {
                    goto LABEL_148;
                  }
                  int v29 = memcmp(v23, v25, v28);
                  sub_10000C970(v8, v7);
                  goto LABEL_72;
                }
                uint64_t v67 = *(void *)(v8 + 16);
                int v74 = *(char **)(v8 + 24);
                swift_retain();
                swift_retain();
                uint64_t v68 = __DataStorage._bytes.getter();
                if (v68)
                {
                  uint64_t v69 = __DataStorage._offset.getter();
                  if (__OFSUB__(v67, v69)) {
                    goto LABEL_144;
                  }
                  v68 += v67 - v69;
                }
                if (__OFSUB__(v74, v67)) {
                  goto LABEL_139;
                }
                uint64_t v70 = __DataStorage._length.getter();
                if (v70 >= (uint64_t)&v74[-v67]) {
                  uint64_t v71 = &v74[-v67];
                }
                else {
                  uint64_t v71 = (char *)v70;
                }
                unsigned __int16 v56 = v23;
                uint64_t v3 = v76;
                if (!v23) {
                  goto LABEL_158;
                }
                if (!v68) {
                  goto LABEL_159;
                }
                size_t v55 = (size_t)v71;
                uint64_t v57 = (const void *)v68;
LABEL_116:
                int v58 = memcmp(v56, v57, v55);
                swift_release();
                goto LABEL_117;
              case 2:
                uint64_t v77 = v3;
                uint64_t v30 = *(void *)(v6 + 16);
                sub_100013D44(v8, v7);
                swift_retain();
                swift_retain();
                uint64_t v31 = __DataStorage._bytes.getter();
                if (v31)
                {
                  uint64_t v32 = v31;
                  uint64_t v33 = __DataStorage._offset.getter();
                  if (__OFSUB__(v30, v33)) {
                    goto LABEL_128;
                  }
                  size_t v73 = (void *)(v32 + v30 - v33);
                }
                else
                {
                  size_t v73 = 0;
                }
                __DataStorage._length.getter();
                uint64_t v3 = v77;
                if (v13)
                {
                  if (v13 == 1)
                  {
                    if (v8 >> 32 < (int)v8) {
                      goto LABEL_134;
                    }
                    swift_retain();
                    unint64_t v42 = (char *)__DataStorage._bytes.getter();
                    if (v42)
                    {
                      uint64_t v43 = __DataStorage._offset.getter();
                      if (__OFSUB__((int)v8, v43)) {
                        goto LABEL_143;
                      }
                      v42 += (int)v8 - v43;
                    }
                    uint64_t v44 = __DataStorage._length.getter();
                    if (v44 >= (v8 >> 32) - (int)v8) {
                      size_t v45 = (v8 >> 32) - (int)v8;
                    }
                    else {
                      size_t v45 = v44;
                    }
                    if (!v73) {
                      goto LABEL_150;
                    }
                    uint64_t v3 = v77;
                    if (!v42) {
                      goto LABEL_151;
                    }
                    int v29 = memcmp(v73, v42, v45);
                    sub_10000C970(v8, v7);
                    swift_release();
                    swift_release();
LABEL_72:
                    sub_10000C970(v8, v7);
LABEL_104:
                    sub_10000C970(v6, v5);
                    if (v29) {
                      return 0;
                    }
                  }
                  else
                  {
                    uint64_t v60 = *(void *)(v8 + 16);
                    uint64_t v59 = *(void *)(v8 + 24);
                    swift_retain();
                    swift_retain();
                    v61 = (char *)__DataStorage._bytes.getter();
                    if (v61)
                    {
                      uint64_t v62 = __DataStorage._offset.getter();
                      if (__OFSUB__(v60, v62)) {
                        goto LABEL_142;
                      }
                      v61 += v60 - v62;
                    }
                    BOOL v17 = __OFSUB__(v59, v60);
                    int64_t v63 = v59 - v60;
                    if (v17) {
                      goto LABEL_137;
                    }
                    uint64_t v64 = __DataStorage._length.getter();
                    if (v64 >= v63) {
                      size_t v65 = v63;
                    }
                    else {
                      size_t v65 = v64;
                    }
                    uint64_t v3 = v77;
                    if (!v73) {
                      goto LABEL_155;
                    }
                    if (!v61) {
                      goto LABEL_156;
                    }
                    int v66 = memcmp(v73, v61, v65);
                    swift_release();
                    swift_release();
                    swift_release();
                    swift_release();
                    sub_10000C970(v8, v7);
                    sub_10000C970(v6, v5);
                    if (v66) {
                      return 0;
                    }
                  }
                }
                else
                {
                  __s1[0] = v8;
                  LOWORD(__s1[1]) = v7;
                  BYTE2(__s1[1]) = BYTE2(v7);
                  BYTE3(__s1[1]) = BYTE3(v7);
                  BYTE4(__s1[1]) = BYTE4(v7);
                  BYTE5(__s1[1]) = BYTE5(v7);
                  if (!v73) {
                    goto LABEL_154;
                  }
                  int v58 = memcmp(v73, __s1, BYTE6(v7));
                  swift_release();
LABEL_117:
                  swift_release();
                  sub_10000C970(v8, v7);
                  sub_10000C970(v6, v5);
                  if (v58) {
                    return 0;
                  }
                }
                break;
              case 3:
                memset(__s1, 0, 14);
                if (!v13) {
                  goto LABEL_58;
                }
                v75 = v3;
                if (v13 == 1)
                {
                  uint64_t v18 = (v8 >> 32) - (int)v8;
                  if (v8 >> 32 < (int)v8) {
                    goto LABEL_131;
                  }
                  sub_100013D44(v8, v7);
                  uint64_t v34 = __DataStorage._bytes.getter();
                  if (!v34) {
                    goto LABEL_149;
                  }
                  uint64_t v20 = v34;
                  uint64_t v35 = __DataStorage._offset.getter();
                  uint64_t v22 = (int)v8 - v35;
                  if (__OFSUB__((int)v8, v35)) {
                    goto LABEL_133;
                  }
LABEL_53:
                  uint64_t v36 = __DataStorage._length.getter();
                  if (v36 >= v18) {
                    size_t v37 = v18;
                  }
                  else {
                    size_t v37 = v36;
                  }
                  int v38 = memcmp(__s1, (const void *)(v20 + v22), v37);
                  sub_10000C970(v8, v7);
                  sub_10000C970(v6, v5);
                  uint64_t v3 = v75;
                  if (v38) {
                    return 0;
                  }
                  break;
                }
                uint64_t v52 = *(void *)(v8 + 16);
                uint64_t v53 = *(void *)(v8 + 24);
                sub_100013D44(v8, v7);
                swift_retain();
                swift_retain();
                uint64_t v48 = __DataStorage._bytes.getter();
                if (v48)
                {
                  uint64_t v54 = __DataStorage._offset.getter();
                  if (__OFSUB__(v52, v54)) {
                    goto LABEL_141;
                  }
                  v48 += v52 - v54;
                }
                BOOL v17 = __OFSUB__(v53, v52);
                int64_t v50 = v53 - v52;
                if (v17) {
                  goto LABEL_136;
                }
                uint64_t v51 = __DataStorage._length.getter();
                uint64_t v3 = v75;
                if (!v48) {
                  goto LABEL_153;
                }
LABEL_84:
                if (v51 >= v50) {
                  size_t v55 = v50;
                }
                else {
                  size_t v55 = v51;
                }
                unsigned __int16 v56 = __s1;
                uint64_t v57 = (const void *)v48;
                goto LABEL_116;
              default:
                __s1[0] = v6;
                LOWORD(__s1[1]) = v5;
                BYTE2(__s1[1]) = BYTE2(v5);
                BYTE3(__s1[1]) = BYTE3(v5);
                BYTE4(__s1[1]) = BYTE4(v5);
                BYTE5(__s1[1]) = BYTE5(v5);
                if (!v13)
                {
LABEL_58:
                  uint64_t v78 = v8;
                  __int16 v79 = v7;
                  char v80 = BYTE2(v7);
                  char v81 = BYTE3(v7);
                  char v82 = BYTE4(v7);
                  char v83 = BYTE5(v7);
                  sub_100013D44(v8, v7);
                  uint64_t v39 = __s1;
                  size_t v40 = &v78;
                  size_t v41 = BYTE6(v7);
                  goto LABEL_103;
                }
                v75 = v3;
                if (v13 == 1)
                {
                  uint64_t v18 = (v8 >> 32) - (int)v8;
                  if (v8 >> 32 < (int)v8) {
                    goto LABEL_130;
                  }
                  sub_100013D44(v8, v7);
                  uint64_t v19 = __DataStorage._bytes.getter();
                  if (!v19)
                  {
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_147:
                    __break(1u);
LABEL_148:
                    __break(1u);
LABEL_149:
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_150:
                    __break(1u);
LABEL_151:
                    __break(1u);
LABEL_152:
                    __break(1u);
LABEL_153:
                    __break(1u);
LABEL_154:
                    __break(1u);
LABEL_155:
                    __break(1u);
LABEL_156:
                    __break(1u);
LABEL_157:
                    __break(1u);
LABEL_158:
                    __break(1u);
LABEL_159:
                    __break(1u);
                    JUMPOUT(0x100096F04);
                  }
                  uint64_t v20 = v19;
                  uint64_t v21 = __DataStorage._offset.getter();
                  uint64_t v22 = (int)v8 - v21;
                  if (__OFSUB__((int)v8, v21)) {
                    goto LABEL_132;
                  }
                  goto LABEL_53;
                }
                uint64_t v46 = *(void *)(v8 + 16);
                uint64_t v47 = *(void *)(v8 + 24);
                sub_100013D44(v8, v7);
                swift_retain();
                swift_retain();
                uint64_t v48 = __DataStorage._bytes.getter();
                if (v48)
                {
                  uint64_t v49 = __DataStorage._offset.getter();
                  if (__OFSUB__(v46, v49)) {
                    goto LABEL_140;
                  }
                  v48 += v46 - v49;
                }
                BOOL v17 = __OFSUB__(v47, v46);
                int64_t v50 = v47 - v46;
                if (v17) {
                  goto LABEL_135;
                }
                uint64_t v51 = __DataStorage._length.getter();
                uint64_t v3 = v75;
                if (!v48) {
                  goto LABEL_152;
                }
                goto LABEL_84;
            }
          }
          if (!--v2) {
            return 1;
          }
          break;
        case 2uLL:
          uint64_t v16 = *(void *)(v8 + 16);
          uint64_t v15 = *(void *)(v8 + 24);
          BOOL v17 = __OFSUB__(v15, v16);
          uint64_t v14 = v15 - v16;
          if (!v17) {
            goto LABEL_19;
          }
          goto LABEL_126;
        case 3uLL:
          if (!v10) {
            goto LABEL_6;
          }
          sub_100013D44(v8, v7);
LABEL_121:
          sub_10000C970(v6, v5);
          return 0;
        default:
          uint64_t v14 = BYTE6(v7);
          goto LABEL_19;
      }
    }
  }
  return 1;
}

uint64_t _s7CoreP2P12NANAttributeO13ServiceIDListV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  return sub_100099864(a1, a2);
}

uint64_t sub_100096F8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (unsigned __int8 *)(a1 + 32);
    uint64_t v4 = (unsigned __int8 *)(a2 + 32);
    while (1)
    {
      BOOL v5 = *v3 == *v4 && v3[1] == v4[1];
      if (!v5 || v3[2] != v4[2]) {
        return 0;
      }
      uint64_t v7 = *((void *)v3 + 1);
      unint64_t v8 = *((void *)v3 + 2);
      uint64_t v10 = *((void *)v4 + 1);
      unint64_t v9 = *((void *)v4 + 2);
      v4 += 24;
      v3 += 24;
      uint64_t v11 = 0;
      switch(v8 >> 62)
      {
        case 1uLL:
          LODWORD(v11) = HIDWORD(v7) - v7;
          if (__OFSUB__(HIDWORD(v7), v7))
          {
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
LABEL_149:
            __break(1u);
          }
          uint64_t v11 = (int)v11;
LABEL_20:
          unint64_t v15 = v9 >> 62;
          switch(v9 >> 62)
          {
            case 1uLL:
              LODWORD(v16) = HIDWORD(v10) - v10;
              if (__OFSUB__(HIDWORD(v10), v10)) {
                goto LABEL_129;
              }
              uint64_t v16 = (int)v16;
LABEL_25:
              if (v11 != v16) {
                return 0;
              }
              if (v11 < 1) {
                goto LABEL_6;
              }
              break;
            case 2uLL:
              uint64_t v18 = *(void *)(v10 + 16);
              uint64_t v17 = *(void *)(v10 + 24);
              BOOL v14 = __OFSUB__(v17, v18);
              uint64_t v16 = v17 - v18;
              if (!v14) {
                goto LABEL_25;
              }
              goto LABEL_130;
            case 3uLL:
              if (!v11) {
                goto LABEL_6;
              }
              sub_100013D44(v10, v9);
              return 0;
            default:
              uint64_t v16 = BYTE6(v9);
              goto LABEL_25;
          }
          break;
        case 2uLL:
          uint64_t v13 = *(void *)(v7 + 16);
          uint64_t v12 = *(void *)(v7 + 24);
          BOOL v14 = __OFSUB__(v12, v13);
          uint64_t v11 = v12 - v13;
          if (!v14) {
            goto LABEL_20;
          }
          goto LABEL_128;
        case 3uLL:
          goto LABEL_20;
        default:
          uint64_t v11 = BYTE6(v8);
          goto LABEL_20;
      }
      switch(v8 >> 62)
      {
        case 1uLL:
          if ((int)v7 > v7 >> 32) {
            goto LABEL_131;
          }
          sub_100013D44(v10, v9);
          unint64_t v80 = v8;
          sub_100013D44(v7, v8);
          uint64_t v24 = (char *)__DataStorage._bytes.getter();
          if (!v24) {
            goto LABEL_39;
          }
          uint64_t v25 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v7, v25)) {
            goto LABEL_133;
          }
          v24 += (int)v7 - v25;
LABEL_39:
          __DataStorage._length.getter();
          if (v15)
          {
            __s1 = v24;
            if (v15 == 1)
            {
              if (v10 >> 32 < (int)v10) {
                goto LABEL_142;
              }
              swift_retain();
              uint64_t v26 = (char *)__DataStorage._bytes.getter();
              if (v26)
              {
                uint64_t v27 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v10, v27)) {
                  goto LABEL_149;
                }
                v26 += (int)v10 - v27;
              }
              unint64_t v28 = v80;
              uint64_t v29 = __DataStorage._length.getter();
              if (v29 >= (v10 >> 32) - (int)v10) {
                size_t v30 = (v10 >> 32) - (int)v10;
              }
              else {
                size_t v30 = v29;
              }
              if (!__s1) {
                goto LABEL_151;
              }
              if (!v26) {
                goto LABEL_152;
              }
              int v31 = memcmp(__s1, v26, v30);
              sub_10000C970(v10, v9);
              goto LABEL_79;
            }
            uint64_t v69 = *(void *)(v10 + 16);
            uint64_t v68 = *(void *)(v10 + 24);
            swift_retain();
            swift_retain();
            uint64_t v70 = __DataStorage._bytes.getter();
            if (v70)
            {
              uint64_t v71 = __DataStorage._offset.getter();
              if (__OFSUB__(v69, v71)) {
                goto LABEL_148;
              }
              v70 += v69 - v71;
            }
            BOOL v14 = __OFSUB__(v68, v69);
            uint64_t v72 = v68 - v69;
            if (v14) {
              goto LABEL_143;
            }
            uint64_t v73 = __DataStorage._length.getter();
            if (v73 >= v72) {
              size_t v74 = v72;
            }
            else {
              size_t v74 = v73;
            }
            uint64_t v57 = __s1;
            if (!__s1) {
              goto LABEL_162;
            }
            if (!v70) {
              goto LABEL_163;
            }
            size_t v56 = v74;
            int v58 = (const void *)v70;
LABEL_123:
            int v75 = memcmp(v57, v58, v56);
            swift_release();
            swift_release();
            sub_10000C970(v10, v9);
            sub_10000C970(v7, v80);
            if (v75) {
              return 0;
            }
          }
          else
          {
            v87[0] = v10;
            LOWORD(v87[1]) = v9;
            BYTE2(v87[1]) = BYTE2(v9);
            BYTE3(v87[1]) = BYTE3(v9);
            BYTE4(v87[1]) = BYTE4(v9);
            BYTE5(v87[1]) = BYTE5(v9);
            if (!v24) {
              goto LABEL_161;
            }
            int v67 = memcmp(v24, v87, BYTE6(v9));
            sub_10000C970(v7, v80);
            if (v67) {
              return 0;
            }
          }
          goto LABEL_6;
        case 2uLL:
          unint64_t v32 = v8;
          uint64_t v33 = *(void *)(v7 + 16);
          sub_100013D44(v10, v9);
          sub_100013D44(v7, v32);
          uint64_t v78 = v7;
          swift_retain();
          swift_retain();
          uint64_t v34 = __DataStorage._bytes.getter();
          if (v34)
          {
            uint64_t v35 = v34;
            uint64_t v36 = __DataStorage._offset.getter();
            if (__OFSUB__(v33, v36)) {
              goto LABEL_132;
            }
            size_t v37 = (void *)(v35 + v33 - v36);
          }
          else
          {
            size_t v37 = 0;
          }
          __DataStorage._length.getter();
          if (v15)
          {
            uint64_t v77 = v37;
            if (v15 == 1)
            {
              if (v10 >> 32 < (int)v10) {
                goto LABEL_138;
              }
              swift_retain();
              uint64_t v43 = (char *)__DataStorage._bytes.getter();
              if (v43)
              {
                uint64_t v44 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v10, v44)) {
                  goto LABEL_147;
                }
                v43 += (int)v10 - v44;
              }
              unint64_t v28 = v32;
              uint64_t v45 = __DataStorage._length.getter();
              if (v45 >= (v10 >> 32) - (int)v10) {
                size_t v46 = (v10 >> 32) - (int)v10;
              }
              else {
                size_t v46 = v45;
              }
              if (!v37) {
                goto LABEL_154;
              }
              if (!v43) {
                goto LABEL_155;
              }
              int v31 = memcmp(v37, v43, v46);
              sub_10000C970(v10, v9);
              swift_release();
              uint64_t v7 = v78;
              swift_release();
LABEL_79:
              sub_10000C970(v10, v9);
              sub_10000C970(v7, v28);
              if (v31) {
                return 0;
              }
            }
            else
            {
              uint64_t v61 = *(void *)(v10 + 16);
              uint64_t v60 = *(void *)(v10 + 24);
              swift_retain();
              swift_retain();
              uint64_t v62 = (char *)__DataStorage._bytes.getter();
              if (v62)
              {
                uint64_t v63 = __DataStorage._offset.getter();
                if (__OFSUB__(v61, v63)) {
                  goto LABEL_146;
                }
                v62 += v61 - v63;
              }
              if (__OFSUB__(v60, v61)) {
                goto LABEL_141;
              }
              uint64_t v64 = __DataStorage._length.getter();
              if (v64 >= v60 - v61) {
                size_t v65 = v60 - v61;
              }
              else {
                size_t v65 = v64;
              }
              if (!v77) {
                goto LABEL_159;
              }
              if (!v62) {
                goto LABEL_160;
              }
              int v66 = memcmp(v77, v62, v65);
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              sub_10000C970(v10, v9);
              sub_10000C970(v78, v32);
              if (v66) {
                return 0;
              }
            }
          }
          else
          {
            v87[0] = v10;
            LOWORD(v87[1]) = v9;
            BYTE2(v87[1]) = BYTE2(v9);
            BYTE3(v87[1]) = BYTE3(v9);
            BYTE4(v87[1]) = BYTE4(v9);
            BYTE5(v87[1]) = BYTE5(v9);
            if (!v37) {
              goto LABEL_158;
            }
            int v59 = memcmp(v37, v87, BYTE6(v9));
            swift_release();
            swift_release();
            sub_10000C970(v10, v9);
            sub_10000C970(v78, v32);
            if (v59) {
              return 0;
            }
          }
LABEL_6:
          if (!--v2) {
            return 1;
          }
          break;
        case 3uLL:
          memset(v87, 0, 14);
          if (!v15) {
            goto LABEL_64;
          }
          unint64_t v80 = v8;
          if (v15 == 1)
          {
            uint64_t v19 = (v10 >> 32) - (int)v10;
            if (v10 >> 32 < (int)v10) {
              goto LABEL_135;
            }
            sub_100013D44(v10, v9);
            sub_100013D44(v7, v8);
            uint64_t v38 = __DataStorage._bytes.getter();
            if (!v38) {
              goto LABEL_153;
            }
            uint64_t v21 = v38;
            uint64_t v39 = __DataStorage._offset.getter();
            uint64_t v23 = (int)v10 - v39;
            if (__OFSUB__((int)v10, v39)) {
              goto LABEL_137;
            }
LABEL_59:
            uint64_t v40 = __DataStorage._length.getter();
            if (v40 >= v19) {
              size_t v41 = v19;
            }
            else {
              size_t v41 = v40;
            }
            int v42 = memcmp(v87, (const void *)(v21 + v23), v41);
            sub_10000C970(v10, v9);
            sub_10000C970(v7, v80);
            if (v42) {
              return 0;
            }
            goto LABEL_6;
          }
          uint64_t v53 = *(void *)(v10 + 16);
          uint64_t v54 = *(void *)(v10 + 24);
          sub_100013D44(v10, v9);
          sub_100013D44(v7, v8);
          swift_retain();
          swift_retain();
          uint64_t v49 = __DataStorage._bytes.getter();
          if (v49)
          {
            uint64_t v55 = __DataStorage._offset.getter();
            if (__OFSUB__(v53, v55)) {
              goto LABEL_145;
            }
            v49 += v53 - v55;
          }
          BOOL v14 = __OFSUB__(v54, v53);
          int64_t v51 = v54 - v53;
          if (v14) {
            goto LABEL_140;
          }
          uint64_t v52 = __DataStorage._length.getter();
          if (!v49) {
            goto LABEL_157;
          }
LABEL_92:
          if (v52 >= v51) {
            size_t v56 = v51;
          }
          else {
            size_t v56 = v52;
          }
          uint64_t v57 = v87;
          int v58 = (const void *)v49;
          goto LABEL_123;
        default:
          v87[0] = v7;
          LOWORD(v87[1]) = v8;
          BYTE2(v87[1]) = BYTE2(v8);
          BYTE3(v87[1]) = BYTE3(v8);
          BYTE4(v87[1]) = BYTE4(v8);
          BYTE5(v87[1]) = BYTE5(v8);
          if (!v15)
          {
LABEL_64:
            uint64_t __s2 = v10;
            __int16 v82 = v9;
            char v83 = BYTE2(v9);
            char v84 = BYTE3(v9);
            char v85 = BYTE4(v9);
            char v86 = BYTE5(v9);
            sub_100013D44(v10, v9);
            if (memcmp(v87, &__s2, BYTE6(v9))) {
              return 0;
            }
            goto LABEL_6;
          }
          unint64_t v80 = v8;
          if (v15 == 1)
          {
            uint64_t v19 = (v10 >> 32) - (int)v10;
            if (v10 >> 32 < (int)v10) {
              goto LABEL_134;
            }
            sub_100013D44(v10, v9);
            sub_100013D44(v7, v8);
            uint64_t v20 = __DataStorage._bytes.getter();
            if (!v20)
            {
              __DataStorage._length.getter();
              __break(1u);
LABEL_151:
              __break(1u);
LABEL_152:
              __break(1u);
LABEL_153:
              __DataStorage._length.getter();
              __break(1u);
LABEL_154:
              __break(1u);
LABEL_155:
              __break(1u);
LABEL_156:
              __break(1u);
LABEL_157:
              __break(1u);
LABEL_158:
              __break(1u);
LABEL_159:
              __break(1u);
LABEL_160:
              __break(1u);
LABEL_161:
              __break(1u);
LABEL_162:
              __break(1u);
LABEL_163:
              __break(1u);
              JUMPOUT(0x100097950);
            }
            uint64_t v21 = v20;
            uint64_t v22 = __DataStorage._offset.getter();
            uint64_t v23 = (int)v10 - v22;
            if (__OFSUB__((int)v10, v22)) {
              goto LABEL_136;
            }
            goto LABEL_59;
          }
          uint64_t v47 = *(void *)(v10 + 16);
          uint64_t v48 = *(void *)(v10 + 24);
          sub_100013D44(v10, v9);
          sub_100013D44(v7, v8);
          swift_retain();
          swift_retain();
          uint64_t v49 = __DataStorage._bytes.getter();
          if (v49)
          {
            uint64_t v50 = __DataStorage._offset.getter();
            if (__OFSUB__(v47, v50)) {
              goto LABEL_144;
            }
            v49 += v47 - v50;
          }
          BOOL v14 = __OFSUB__(v48, v47);
          int64_t v51 = v48 - v47;
          if (v14) {
            goto LABEL_139;
          }
          uint64_t v52 = __DataStorage._length.getter();
          if (!v49) {
            goto LABEL_156;
          }
          goto LABEL_92;
      }
    }
  }
  return 1;
}

uint64_t sub_100097980(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = 0;
  uint64_t v104 = a2 + 32;
  uint64_t v105 = a1 + 32;
  uint64_t v102 = *(void *)(a1 + 16);
  while (2)
  {
    BOOL v5 = (unsigned __int16 *)(v105 + 56 * v3);
    uint64_t v6 = (unsigned __int16 *)(v104 + 56 * v3);
    if (*v5 != *v6) {
      return 0;
    }
    uint64_t v8 = *((void *)v5 + 1);
    uint64_t v7 = *((void *)v5 + 2);
    unint64_t v9 = *((void *)v5 + 3);
    uint64_t v10 = *((void *)v5 + 5);
    uint64_t v11 = *((void *)v6 + 1);
    uint64_t v12 = *((void *)v6 + 2);
    unint64_t v13 = *((void *)v6 + 3);
    uint64_t v14 = *((void *)v6 + 5);
    uint64_t v110 = v11;
    char v106 = *((unsigned char *)v6 + 48);
    char v107 = *((unsigned char *)v5 + 48);
    int v108 = *((unsigned __int8 *)v6 + 32);
    int v109 = *((unsigned __int8 *)v5 + 32);
    if (v9 >> 60 == 15)
    {
      if (v13 >> 60 != 15) {
        goto LABEL_149;
      }
      sub_10006E968(v8, v7, v9);
      swift_bridgeObjectRetain();
      sub_10006E968(v11, v12, v13);
      swift_bridgeObjectRetain();
      goto LABEL_131;
    }
    if (v13 >> 60 == 15)
    {
LABEL_149:
      sub_10006E968(v8, v7, v9);
      sub_10006E968(v11, v12, v13);
      sub_10006E0D8(v8, v7, v9);
      uint64_t v88 = v11;
      uint64_t v89 = v12;
      unint64_t v90 = v13;
      goto LABEL_151;
    }
    if ((unsigned __int16)*((void *)v5 + 1) != (unsigned __int16)v11) {
      return 0;
    }
    uint64_t v15 = 0;
    switch(v9 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v7), v7)) {
          goto LABEL_155;
        }
        uint64_t v15 = HIDWORD(v7) - (int)v7;
LABEL_19:
        sub_100013D44(v7, v9);
        break;
      case 2uLL:
        uint64_t v17 = *(void *)(v7 + 16);
        uint64_t v16 = *(void *)(v7 + 24);
        uint64_t v15 = v16 - v17;
        if (!__OFSUB__(v16, v17)) {
          goto LABEL_19;
        }
        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
        goto LABEL_159;
      case 3uLL:
        break;
      default:
        uint64_t v15 = BYTE6(v9);
        break;
    }
    uint64_t v103 = v8;
    unint64_t v18 = v13 >> 62;
    switch(v13 >> 62)
    {
      case 1uLL:
        LODWORD(v19) = HIDWORD(v12) - v12;
        if (__OFSUB__(HIDWORD(v12), v12)) {
          goto LABEL_156;
        }
        uint64_t v19 = (int)v19;
LABEL_25:
        if (v15 == v19)
        {
          if (v15 < 1)
          {
LABEL_36:
            uint64_t v8 = v103;
            sub_10006E968(v103, v7, v9);
            swift_bridgeObjectRetain();
            sub_10006E968(v11, v12, v13);
            swift_bridgeObjectRetain();
            sub_10006E0D8(v103, v7, v9);
          }
          else
          {
            switch(v9 >> 62)
            {
              case 1uLL:
                if ((int)v7 > v7 >> 32) {
                  goto LABEL_158;
                }
                uint64_t v100 = v7;
                sub_10006E968(v103, v7, v9);
                swift_bridgeObjectRetain();
                sub_10006E968(v11, v12, v13);
                swift_bridgeObjectRetain();
                sub_10006E968(v11, v12, v13);
                uint64_t v27 = __DataStorage._bytes.getter();
                if (v27)
                {
                  uint64_t v28 = v27;
                  uint64_t v29 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)v7, v29)) {
                    goto LABEL_160;
                  }
                  v96 = (void *)(v28 + (int)v7 - v29);
                }
                else
                {
                  v96 = 0;
                }
                __DataStorage._length.getter();
                uint64_t v39 = v11;
                if (!v18)
                {
                  __s1[0] = v12;
                  LOWORD(__s1[1]) = v13;
                  BYTE2(__s1[1]) = BYTE2(v13);
                  BYTE3(__s1[1]) = BYTE3(v13);
                  BYTE4(__s1[1]) = BYTE4(v13);
                  BYTE5(__s1[1]) = BYTE5(v13);
                  if (!v96) {
                    goto LABEL_181;
                  }
                  int v37 = memcmp(v96, __s1, BYTE6(v13));
                  goto LABEL_128;
                }
                if (v18 == 1)
                {
                  if (v12 >> 32 < (int)v12) {
                    goto LABEL_168;
                  }
                  swift_retain();
                  uint64_t v44 = __DataStorage._bytes.getter();
                  if (v44)
                  {
                    uint64_t v45 = v44;
                    uint64_t v46 = __DataStorage._offset.getter();
                    if (__OFSUB__((int)v12, v46)) {
                      goto LABEL_176;
                    }
                    uint64_t v47 = (const void *)(v45 + (int)v12 - v46);
                  }
                  else
                  {
                    uint64_t v47 = 0;
                  }
                  uint64_t v79 = __DataStorage._length.getter();
                  if (v79 >= (v12 >> 32) - (int)v12) {
                    size_t v80 = (v12 >> 32) - (int)v12;
                  }
                  else {
                    size_t v80 = v79;
                  }
                  uint64_t v39 = v11;
                  if (!v96) {
                    goto LABEL_189;
                  }
                  if (!v47) {
                    goto LABEL_190;
                  }
                  int v37 = memcmp(v96, v47, v80);
                  sub_10006E0D8(v110, v12, v13);
                  goto LABEL_128;
                }
                uint64_t v63 = *(void *)(v12 + 16);
                v94 = *(char **)(v12 + 24);
                swift_retain();
                swift_retain();
                uint64_t v64 = __DataStorage._bytes.getter();
                if (v64)
                {
                  uint64_t v65 = v64;
                  uint64_t v66 = __DataStorage._offset.getter();
                  if (__OFSUB__(v63, v66)) {
                    goto LABEL_175;
                  }
                  int v67 = (const void *)(v65 + v63 - v66);
                }
                else
                {
                  int v67 = 0;
                }
                BOOL v22 = __OFSUB__(v94, v63);
                v76 = &v94[-v63];
                if (v22) {
                  goto LABEL_170;
                }
                uint64_t v77 = __DataStorage._length.getter();
                if (v77 >= (uint64_t)v76) {
                  size_t v78 = (size_t)v76;
                }
                else {
                  size_t v78 = v77;
                }
                if (!v96) {
                  goto LABEL_187;
                }
                uint64_t v7 = v100;
                if (!v67) {
                  goto LABEL_188;
                }
                int v69 = memcmp(v96, v67, v78);
                goto LABEL_118;
              case 2uLL:
                v92 = *(char **)(v7 + 16);
                sub_10006E968(v103, v7, v9);
                swift_bridgeObjectRetain();
                sub_10006E968(v11, v12, v13);
                swift_bridgeObjectRetain();
                sub_10006E968(v11, v12, v13);
                swift_retain();
                swift_retain();
                uint64_t v30 = __DataStorage._bytes.getter();
                if (v30)
                {
                  uint64_t v31 = v30;
                  uint64_t v32 = __DataStorage._offset.getter();
                  if (__OFSUB__(v92, v32))
                  {
LABEL_159:
                    __break(1u);
LABEL_160:
                    __break(1u);
LABEL_161:
                    __break(1u);
LABEL_162:
                    __break(1u);
LABEL_163:
                    __break(1u);
LABEL_164:
                    __break(1u);
LABEL_165:
                    __break(1u);
LABEL_166:
                    __break(1u);
LABEL_167:
                    __break(1u);
LABEL_168:
                    __break(1u);
LABEL_169:
                    __break(1u);
LABEL_170:
                    __break(1u);
LABEL_171:
                    __break(1u);
LABEL_172:
                    __break(1u);
LABEL_173:
                    __break(1u);
LABEL_174:
                    __break(1u);
LABEL_175:
                    __break(1u);
LABEL_176:
                    __break(1u);
                  }
                  v93 = &v92[v31 - v32];
                }
                else
                {
                  v93 = 0;
                }
                __DataStorage._length.getter();
                uint64_t v39 = v11;
                if (!v18)
                {
                  __s1[0] = v12;
                  LOWORD(__s1[1]) = v13;
                  BYTE2(__s1[1]) = BYTE2(v13);
                  BYTE3(__s1[1]) = BYTE3(v13);
                  BYTE4(__s1[1]) = BYTE4(v13);
                  BYTE5(__s1[1]) = BYTE5(v13);
                  if (!v93) {
                    goto LABEL_180;
                  }
                  int v37 = memcmp(v93, __s1, BYTE6(v13));
                  goto LABEL_109;
                }
                uint64_t v101 = v7;
                if (v18 == 1)
                {
                  if (v12 >> 32 < (int)v12) {
                    goto LABEL_163;
                  }
                  swift_retain();
                  uint64_t v40 = __DataStorage._bytes.getter();
                  if (v40)
                  {
                    uint64_t v41 = v40;
                    uint64_t v42 = __DataStorage._offset.getter();
                    if (__OFSUB__((int)v12, v42)) {
                      goto LABEL_174;
                    }
                    uint64_t v43 = (const void *)(v41 + (int)v12 - v42);
                  }
                  else
                  {
                    uint64_t v43 = 0;
                  }
                  uint64_t v74 = __DataStorage._length.getter();
                  if (v74 >= (v12 >> 32) - (int)v12) {
                    size_t v75 = (v12 >> 32) - (int)v12;
                  }
                  else {
                    size_t v75 = v74;
                  }
                  uint64_t v39 = v11;
                  if (!v93) {
                    goto LABEL_185;
                  }
                  if (!v43) {
                    goto LABEL_186;
                  }
                  int v37 = memcmp(v93, v43, v75);
                  sub_10006E0D8(v110, v12, v13);
LABEL_109:
                  swift_release();
                  swift_release();
LABEL_128:
                  sub_10006E0D8(v39, v12, v13);
                  uint64_t v8 = v103;
LABEL_129:
                  uint64_t v38 = v8;
LABEL_130:
                  sub_10006E0D8(v38, v7, v9);
                  if (v37) {
                    goto LABEL_147;
                  }
                  break;
                }
                uint64_t v58 = *(void *)(v12 + 16);
                uint64_t v91 = *(void *)(v12 + 24);
                swift_retain();
                swift_retain();
                uint64_t v59 = __DataStorage._bytes.getter();
                if (v59)
                {
                  uint64_t v60 = v59;
                  uint64_t v61 = __DataStorage._offset.getter();
                  if (__OFSUB__(v58, v61)) {
                    goto LABEL_173;
                  }
                  uint64_t v62 = (const void *)(v60 + v58 - v61);
                }
                else
                {
                  uint64_t v62 = 0;
                }
                BOOL v22 = __OFSUB__(v91, v58);
                int64_t v71 = v91 - v58;
                if (v22) {
                  goto LABEL_169;
                }
                uint64_t v72 = __DataStorage._length.getter();
                if (v72 >= v71) {
                  size_t v73 = v71;
                }
                else {
                  size_t v73 = v72;
                }
                if (!v93) {
                  goto LABEL_183;
                }
                uint64_t v7 = v101;
                if (!v62) {
                  goto LABEL_184;
                }
                int v69 = memcmp(v93, v62, v73);
                swift_release();
                swift_release();
LABEL_118:
                swift_release();
                swift_release();
                sub_10006E0D8(v11, v12, v13);
                uint64_t v8 = v103;
                uint64_t v70 = v103;
LABEL_119:
                sub_10006E0D8(v70, v7, v9);
                if (v69) {
                  goto LABEL_147;
                }
                break;
              case 3uLL:
                memset(__s1, 0, 14);
                if (!v18) {
                  goto LABEL_53;
                }
                uint64_t v99 = v7;
                if (v18 == 1)
                {
                  v95 = (void *)((v12 >> 32) - (int)v12);
                  if (v12 >> 32 < (int)v12) {
                    goto LABEL_162;
                  }
                  sub_10006E968(v103, v7, v9);
                  swift_bridgeObjectRetain();
                  sub_10006E968(v11, v12, v13);
                  swift_bridgeObjectRetain();
                  sub_10006E968(v11, v12, v13);
                  uint64_t v33 = __DataStorage._bytes.getter();
                  if (!v33) {
                    goto LABEL_178;
                  }
                  uint64_t v24 = v33;
                  uint64_t v34 = __DataStorage._offset.getter();
                  uint64_t v26 = (int)v12 - v34;
                  if (__OFSUB__((int)v12, v34)) {
                    goto LABEL_167;
                  }
LABEL_49:
                  uint64_t v35 = __DataStorage._length.getter();
                  if (v35 >= (uint64_t)v95) {
                    size_t v36 = (size_t)v95;
                  }
                  else {
                    size_t v36 = v35;
                  }
                  int v37 = memcmp(__s1, (const void *)(v24 + v26), v36);
                  sub_10006E0D8(v110, v12, v13);
                  uint64_t v8 = v103;
                  uint64_t v38 = v103;
                  uint64_t v7 = v99;
                  goto LABEL_130;
                }
                uint64_t v54 = *(void *)(v12 + 16);
                v98 = *(char **)(v12 + 24);
                sub_10006E968(v103, v7, v9);
                swift_bridgeObjectRetain();
                sub_10006E968(v11, v12, v13);
                swift_bridgeObjectRetain();
                sub_10006E968(v11, v12, v13);
                swift_retain();
                swift_retain();
                uint64_t v53 = (char *)__DataStorage._bytes.getter();
                if (v53)
                {
                  uint64_t v55 = __DataStorage._offset.getter();
                  if (__OFSUB__(v54, v55)) {
                    goto LABEL_172;
                  }
                  v53 += v54 - v55;
                }
                size_t v56 = &v98[-v54];
                if (__OFSUB__(v98, v54)) {
                  goto LABEL_164;
                }
                uint64_t v57 = __DataStorage._length.getter();
                if (!v53) {
                  goto LABEL_179;
                }
LABEL_90:
                if (v57 >= (uint64_t)v56) {
                  size_t v68 = (size_t)v56;
                }
                else {
                  size_t v68 = v57;
                }
                int v69 = memcmp(__s1, v53, v68);
                swift_release();
                swift_release();
                sub_10006E0D8(v11, v12, v13);
                uint64_t v8 = v103;
                uint64_t v70 = v103;
                uint64_t v7 = v99;
                goto LABEL_119;
              default:
                __s1[0] = v7;
                LOWORD(__s1[1]) = v9;
                BYTE2(__s1[1]) = BYTE2(v9);
                BYTE3(__s1[1]) = BYTE3(v9);
                BYTE4(__s1[1]) = BYTE4(v9);
                BYTE5(__s1[1]) = BYTE5(v9);
                if (!v18)
                {
LABEL_53:
                  uint64_t __s2 = v12;
                  __int16 v112 = v13;
                  char v113 = BYTE2(v13);
                  char v114 = BYTE3(v13);
                  char v115 = BYTE4(v13);
                  char v116 = BYTE5(v13);
                  uint64_t v8 = v103;
                  sub_10006E968(v103, v7, v9);
                  swift_bridgeObjectRetain();
                  sub_10006E968(v11, v12, v13);
                  swift_bridgeObjectRetain();
                  int v37 = memcmp(__s1, &__s2, BYTE6(v13));
                  goto LABEL_129;
                }
                uint64_t v99 = v7;
                if (v18 == 1)
                {
                  v95 = (void *)((v12 >> 32) - (int)v12);
                  if (v12 >> 32 < (int)v12) {
                    goto LABEL_161;
                  }
                  sub_10006E968(v103, v7, v9);
                  swift_bridgeObjectRetain();
                  sub_10006E968(v11, v12, v13);
                  swift_bridgeObjectRetain();
                  sub_10006E968(v11, v12, v13);
                  uint64_t v23 = __DataStorage._bytes.getter();
                  if (!v23)
                  {
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_178:
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_179:
                    __break(1u);
LABEL_180:
                    __break(1u);
LABEL_181:
                    __break(1u);
LABEL_182:
                    __break(1u);
LABEL_183:
                    __break(1u);
LABEL_184:
                    __break(1u);
LABEL_185:
                    __break(1u);
LABEL_186:
                    __break(1u);
LABEL_187:
                    __break(1u);
LABEL_188:
                    __break(1u);
LABEL_189:
                    __break(1u);
LABEL_190:
                    __break(1u);
                    JUMPOUT(0x10009872CLL);
                  }
                  uint64_t v24 = v23;
                  uint64_t v25 = __DataStorage._offset.getter();
                  uint64_t v26 = (int)v12 - v25;
                  if (__OFSUB__((int)v12, v25)) {
                    goto LABEL_166;
                  }
                  goto LABEL_49;
                }
                uint64_t v48 = *(void *)(v12 + 16);
                v97 = *(char **)(v12 + 24);
                sub_10006E968(v103, v7, v9);
                swift_bridgeObjectRetain();
                sub_10006E968(v11, v12, v13);
                swift_bridgeObjectRetain();
                sub_10006E968(v11, v12, v13);
                swift_retain();
                swift_retain();
                uint64_t v49 = __DataStorage._bytes.getter();
                if (v49)
                {
                  uint64_t v50 = v49;
                  uint64_t v51 = __DataStorage._offset.getter();
                  if (__OFSUB__(v48, v51)) {
                    goto LABEL_171;
                  }
                  uint64_t v52 = v48;
                  uint64_t v53 = (char *)(v50 + v48 - v51);
                }
                else
                {
                  uint64_t v52 = v48;
                  uint64_t v53 = 0;
                }
                size_t v56 = &v97[-v52];
                if (__OFSUB__(v97, v52)) {
                  goto LABEL_165;
                }
                uint64_t v57 = __DataStorage._length.getter();
                if (!v53) {
                  goto LABEL_182;
                }
                goto LABEL_90;
            }
          }
LABEL_131:
          if (v109 != v108)
          {
LABEL_147:
            uint64_t v87 = v110;
            goto LABEL_148;
          }
          if ((v107 & 1) == 0)
          {
            if ((v106 & 1) == 0)
            {
              uint64_t v82 = *(void *)(v10 + 16);
              if (v82 == *(void *)(v14 + 16))
              {
                if (v82 && v10 != v14)
                {
                  if (*(unsigned __int8 *)(v10 + 32) != *(unsigned __int8 *)(v14 + 32)) {
                    goto LABEL_146;
                  }
                  if (v82 != 1)
                  {
                    if (*(unsigned __int8 *)(v10 + 33) != *(unsigned __int8 *)(v14 + 33)) {
                      goto LABEL_146;
                    }
                    uint64_t v83 = 2 - v82;
                    uint64_t v84 = 34;
                    while (v83 + v84 != 34)
                    {
                      int v85 = *(unsigned __int8 *)(v10 + v84);
                      int v86 = *(unsigned __int8 *)(v14 + v84++);
                      if (v85 != v86) {
                        goto LABEL_146;
                      }
                    }
                  }
                }
                sub_10006E0D8(v110, v12, v13);
                swift_bridgeObjectRelease();
                sub_10006E0D8(v8, v7, v9);
                swift_bridgeObjectRelease();
                goto LABEL_7;
              }
            }
LABEL_146:
            uint64_t v87 = v110;
LABEL_148:
            sub_10006E0D8(v87, v12, v13);
            swift_bridgeObjectRelease();
            sub_10006E0D8(v8, v7, v9);
            swift_bridgeObjectRelease();
            return 0;
          }
          if ((v106 & 1) == 0) {
            goto LABEL_146;
          }
          char v81 = sub_100096104(v10, v14);
          sub_10006E0D8(v110, v12, v13);
          swift_bridgeObjectRelease();
          sub_10006E0D8(v8, v7, v9);
          swift_bridgeObjectRelease();
          if ((v81 & 1) == 0) {
            return 0;
          }
LABEL_7:
          ++v3;
          uint64_t result = 1;
          if (v3 == v102) {
            return result;
          }
          continue;
        }
LABEL_150:
        uint64_t v88 = v103;
        uint64_t v89 = v7;
        unint64_t v90 = v9;
LABEL_151:
        sub_10006E0D8(v88, v89, v90);
        return 0;
      case 2uLL:
        uint64_t v21 = *(void *)(v12 + 16);
        uint64_t v20 = *(void *)(v12 + 24);
        BOOL v22 = __OFSUB__(v20, v21);
        uint64_t v19 = v20 - v21;
        if (!v22) {
          goto LABEL_25;
        }
        goto LABEL_157;
      case 3uLL:
        if (!v15) {
          goto LABEL_36;
        }
        goto LABEL_150;
      default:
        uint64_t v19 = BYTE6(v13);
        goto LABEL_25;
    }
  }
}

uint64_t _s7CoreP2P12NANAttributeO32FineTimingMeasurementRangeReportV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2, uint8x8_t a3, uint8x8_t a4)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v4 && a1 != a2)
  {
    for (uint64_t i = 0; ; i += 16)
    {
      uint64_t v6 = a1 + i;
      uint64_t v7 = a2 + i;
      if (*(_DWORD *)(a1 + i + 32) != *(_DWORD *)(a2 + i + 32)) {
        break;
      }
      uint64_t v8 = 0;
      BOOL v10 = *(_DWORD *)(v6 + 36) != *(_DWORD *)(v7 + 36)
         || *(unsigned __int16 *)(v6 + 40) != *(unsigned __int16 *)(v7 + 40);
      a3.i32[0] = *(_DWORD *)(v6 + 42);
      a4.i32[0] = *(_DWORD *)(v7 + 42);
      a4 = (uint8x8_t)vmovl_u8(a4).u64[0];
      a3 = (uint8x8_t)vcltz_s16(vshl_n_s16(vceq_s16((int16x4_t)*(_OWORD *)&vmovl_u8(a3), (int16x4_t)a4), 0xFuLL));
      if ((vminv_u16((uint16x4_t)a3) & 1) == 0 || v10) {
        return v8;
      }
      if (!--v4) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

BOOL sub_10009884C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32)
    || *(unsigned __int8 *)(a1 + 33) != *(unsigned __int8 *)(a2 + 33))
  {
    return 0;
  }
  BOOL v5 = (unsigned __int8 *)(a2 + 35);
  uint64_t v6 = (unsigned __int8 *)(a1 + 35);
  do
  {
    BOOL result = --v2 == 0;
    if (!v2) {
      break;
    }
    int v7 = *(v5 - 1);
    int v9 = *v5;
    v5 += 2;
    int v8 = v9;
    int v10 = *v6;
    int v11 = *(v6 - 1);
    v6 += 2;
  }
  while (v11 == v7 && v10 == v8);
  return result;
}

uint64_t _s7CoreP2P12NANAttributeO26SecurityContextInformationV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (unsigned __int8 *)(a1 + 32);
    uint64_t v4 = (unsigned __int8 *)(a2 + 32);
    while (*v3 == *v4 && v3[1] == v4[1])
    {
      uint64_t v6 = *((void *)v3 + 1);
      unint64_t v7 = *((void *)v3 + 2);
      uint64_t v9 = *((void *)v4 + 1);
      unint64_t v8 = *((void *)v4 + 2);
      v4 += 24;
      v3 += 24;
      uint64_t v10 = 0;
      switch(v7 >> 62)
      {
        case 1uLL:
          LODWORD(v10) = HIDWORD(v6) - v6;
          if (__OFSUB__(HIDWORD(v6), v6))
          {
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
          }
          uint64_t v10 = (int)v10;
LABEL_17:
          unint64_t v14 = v8 >> 62;
          switch(v8 >> 62)
          {
            case 1uLL:
              LODWORD(v15) = HIDWORD(v9) - v9;
              if (__OFSUB__(HIDWORD(v9), v9)) {
                goto LABEL_126;
              }
              uint64_t v15 = (int)v15;
LABEL_22:
              if (v10 != v15) {
                return 0;
              }
              if (v10 < 1) {
                goto LABEL_6;
              }
              break;
            case 2uLL:
              uint64_t v17 = *(void *)(v9 + 16);
              uint64_t v16 = *(void *)(v9 + 24);
              BOOL v13 = __OFSUB__(v16, v17);
              uint64_t v15 = v16 - v17;
              if (!v13) {
                goto LABEL_22;
              }
              goto LABEL_127;
            case 3uLL:
              if (!v10) {
                goto LABEL_6;
              }
              sub_100013D44(v9, v8);
              return 0;
            default:
              uint64_t v15 = BYTE6(v8);
              goto LABEL_22;
          }
          break;
        case 2uLL:
          uint64_t v12 = *(void *)(v6 + 16);
          uint64_t v11 = *(void *)(v6 + 24);
          BOOL v13 = __OFSUB__(v11, v12);
          uint64_t v10 = v11 - v12;
          if (!v13) {
            goto LABEL_17;
          }
          goto LABEL_125;
        case 3uLL:
          goto LABEL_17;
        default:
          uint64_t v10 = BYTE6(v7);
          goto LABEL_17;
      }
      switch(v7 >> 62)
      {
        case 1uLL:
          if ((int)v6 > v6 >> 32) {
            goto LABEL_128;
          }
          sub_100013D44(v9, v8);
          unint64_t v79 = v7;
          sub_100013D44(v6, v7);
          uint64_t v23 = (char *)__DataStorage._bytes.getter();
          if (!v23) {
            goto LABEL_36;
          }
          uint64_t v24 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v6, v24)) {
            goto LABEL_130;
          }
          v23 += (int)v6 - v24;
LABEL_36:
          __DataStorage._length.getter();
          if (v14)
          {
            __s1 = v23;
            if (v14 == 1)
            {
              if (v9 >> 32 < (int)v9) {
                goto LABEL_139;
              }
              swift_retain();
              uint64_t v25 = (char *)__DataStorage._bytes.getter();
              if (v25)
              {
                uint64_t v26 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v9, v26)) {
                  goto LABEL_146;
                }
                v25 += (int)v9 - v26;
              }
              unint64_t v27 = v79;
              uint64_t v28 = __DataStorage._length.getter();
              if (v28 >= (v9 >> 32) - (int)v9) {
                size_t v29 = (v9 >> 32) - (int)v9;
              }
              else {
                size_t v29 = v28;
              }
              if (!__s1) {
                goto LABEL_148;
              }
              if (!v25) {
                goto LABEL_149;
              }
              int v30 = memcmp(__s1, v25, v29);
              sub_10000C970(v9, v8);
              goto LABEL_76;
            }
            uint64_t v68 = *(void *)(v9 + 16);
            uint64_t v67 = *(void *)(v9 + 24);
            swift_retain();
            swift_retain();
            uint64_t v69 = __DataStorage._bytes.getter();
            if (v69)
            {
              uint64_t v70 = __DataStorage._offset.getter();
              if (__OFSUB__(v68, v70)) {
                goto LABEL_145;
              }
              v69 += v68 - v70;
            }
            BOOL v13 = __OFSUB__(v67, v68);
            uint64_t v71 = v67 - v68;
            if (v13) {
              goto LABEL_140;
            }
            uint64_t v72 = __DataStorage._length.getter();
            if (v72 >= v71) {
              size_t v73 = v71;
            }
            else {
              size_t v73 = v72;
            }
            size_t v56 = __s1;
            if (!__s1) {
              goto LABEL_159;
            }
            if (!v69) {
              goto LABEL_160;
            }
            size_t v55 = v73;
            uint64_t v57 = (const void *)v69;
LABEL_120:
            int v74 = memcmp(v56, v57, v55);
            swift_release();
            swift_release();
            sub_10000C970(v9, v8);
            sub_10000C970(v6, v79);
            if (v74) {
              return 0;
            }
          }
          else
          {
            v86[0] = v9;
            LOWORD(v86[1]) = v8;
            BYTE2(v86[1]) = BYTE2(v8);
            BYTE3(v86[1]) = BYTE3(v8);
            BYTE4(v86[1]) = BYTE4(v8);
            BYTE5(v86[1]) = BYTE5(v8);
            if (!v23) {
              goto LABEL_158;
            }
            int v66 = memcmp(v23, v86, BYTE6(v8));
            sub_10000C970(v6, v79);
            if (v66) {
              return 0;
            }
          }
          goto LABEL_6;
        case 2uLL:
          unint64_t v31 = v7;
          uint64_t v32 = *(void *)(v6 + 16);
          sub_100013D44(v9, v8);
          sub_100013D44(v6, v31);
          uint64_t v77 = v6;
          swift_retain();
          swift_retain();
          uint64_t v33 = __DataStorage._bytes.getter();
          if (v33)
          {
            uint64_t v34 = v33;
            uint64_t v35 = __DataStorage._offset.getter();
            if (__OFSUB__(v32, v35)) {
              goto LABEL_129;
            }
            size_t v36 = (void *)(v34 + v32 - v35);
          }
          else
          {
            size_t v36 = 0;
          }
          __DataStorage._length.getter();
          if (v14)
          {
            v76 = v36;
            if (v14 == 1)
            {
              if (v9 >> 32 < (int)v9) {
                goto LABEL_135;
              }
              swift_retain();
              uint64_t v42 = (char *)__DataStorage._bytes.getter();
              if (v42)
              {
                uint64_t v43 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v9, v43)) {
                  goto LABEL_144;
                }
                v42 += (int)v9 - v43;
              }
              unint64_t v27 = v31;
              uint64_t v44 = __DataStorage._length.getter();
              if (v44 >= (v9 >> 32) - (int)v9) {
                size_t v45 = (v9 >> 32) - (int)v9;
              }
              else {
                size_t v45 = v44;
              }
              if (!v36) {
                goto LABEL_151;
              }
              if (!v42) {
                goto LABEL_152;
              }
              int v30 = memcmp(v36, v42, v45);
              sub_10000C970(v9, v8);
              swift_release();
              uint64_t v6 = v77;
              swift_release();
LABEL_76:
              sub_10000C970(v9, v8);
              sub_10000C970(v6, v27);
              if (v30) {
                return 0;
              }
            }
            else
            {
              uint64_t v60 = *(void *)(v9 + 16);
              uint64_t v59 = *(void *)(v9 + 24);
              swift_retain();
              swift_retain();
              uint64_t v61 = (char *)__DataStorage._bytes.getter();
              if (v61)
              {
                uint64_t v62 = __DataStorage._offset.getter();
                if (__OFSUB__(v60, v62)) {
                  goto LABEL_143;
                }
                v61 += v60 - v62;
              }
              if (__OFSUB__(v59, v60)) {
                goto LABEL_138;
              }
              uint64_t v63 = __DataStorage._length.getter();
              if (v63 >= v59 - v60) {
                size_t v64 = v59 - v60;
              }
              else {
                size_t v64 = v63;
              }
              if (!v76) {
                goto LABEL_156;
              }
              if (!v61) {
                goto LABEL_157;
              }
              int v65 = memcmp(v76, v61, v64);
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              sub_10000C970(v9, v8);
              sub_10000C970(v77, v31);
              if (v65) {
                return 0;
              }
            }
          }
          else
          {
            v86[0] = v9;
            LOWORD(v86[1]) = v8;
            BYTE2(v86[1]) = BYTE2(v8);
            BYTE3(v86[1]) = BYTE3(v8);
            BYTE4(v86[1]) = BYTE4(v8);
            BYTE5(v86[1]) = BYTE5(v8);
            if (!v36) {
              goto LABEL_155;
            }
            int v58 = memcmp(v36, v86, BYTE6(v8));
            swift_release();
            swift_release();
            sub_10000C970(v9, v8);
            sub_10000C970(v77, v31);
            if (v58) {
              return 0;
            }
          }
LABEL_6:
          if (!--v2) {
            return 1;
          }
          break;
        case 3uLL:
          memset(v86, 0, 14);
          if (!v14) {
            goto LABEL_61;
          }
          unint64_t v79 = v7;
          if (v14 == 1)
          {
            uint64_t v18 = (v9 >> 32) - (int)v9;
            if (v9 >> 32 < (int)v9) {
              goto LABEL_132;
            }
            sub_100013D44(v9, v8);
            sub_100013D44(v6, v7);
            uint64_t v37 = __DataStorage._bytes.getter();
            if (!v37) {
              goto LABEL_150;
            }
            uint64_t v20 = v37;
            uint64_t v38 = __DataStorage._offset.getter();
            uint64_t v22 = (int)v9 - v38;
            if (__OFSUB__((int)v9, v38)) {
              goto LABEL_134;
            }
LABEL_56:
            uint64_t v39 = __DataStorage._length.getter();
            if (v39 >= v18) {
              size_t v40 = v18;
            }
            else {
              size_t v40 = v39;
            }
            int v41 = memcmp(v86, (const void *)(v20 + v22), v40);
            sub_10000C970(v9, v8);
            sub_10000C970(v6, v79);
            if (v41) {
              return 0;
            }
            goto LABEL_6;
          }
          uint64_t v52 = *(void *)(v9 + 16);
          uint64_t v53 = *(void *)(v9 + 24);
          sub_100013D44(v9, v8);
          sub_100013D44(v6, v7);
          swift_retain();
          swift_retain();
          uint64_t v48 = __DataStorage._bytes.getter();
          if (v48)
          {
            uint64_t v54 = __DataStorage._offset.getter();
            if (__OFSUB__(v52, v54)) {
              goto LABEL_142;
            }
            v48 += v52 - v54;
          }
          BOOL v13 = __OFSUB__(v53, v52);
          int64_t v50 = v53 - v52;
          if (v13) {
            goto LABEL_137;
          }
          uint64_t v51 = __DataStorage._length.getter();
          if (!v48) {
            goto LABEL_154;
          }
LABEL_89:
          if (v51 >= v50) {
            size_t v55 = v50;
          }
          else {
            size_t v55 = v51;
          }
          size_t v56 = v86;
          uint64_t v57 = (const void *)v48;
          goto LABEL_120;
        default:
          v86[0] = v6;
          LOWORD(v86[1]) = v7;
          BYTE2(v86[1]) = BYTE2(v7);
          BYTE3(v86[1]) = BYTE3(v7);
          BYTE4(v86[1]) = BYTE4(v7);
          BYTE5(v86[1]) = BYTE5(v7);
          if (!v14)
          {
LABEL_61:
            uint64_t __s2 = v9;
            __int16 v81 = v8;
            char v82 = BYTE2(v8);
            char v83 = BYTE3(v8);
            char v84 = BYTE4(v8);
            char v85 = BYTE5(v8);
            sub_100013D44(v9, v8);
            if (memcmp(v86, &__s2, BYTE6(v8))) {
              return 0;
            }
            goto LABEL_6;
          }
          unint64_t v79 = v7;
          if (v14 == 1)
          {
            uint64_t v18 = (v9 >> 32) - (int)v9;
            if (v9 >> 32 < (int)v9) {
              goto LABEL_131;
            }
            sub_100013D44(v9, v8);
            sub_100013D44(v6, v7);
            uint64_t v19 = __DataStorage._bytes.getter();
            if (!v19)
            {
              __DataStorage._length.getter();
              __break(1u);
LABEL_148:
              __break(1u);
LABEL_149:
              __break(1u);
LABEL_150:
              __DataStorage._length.getter();
              __break(1u);
LABEL_151:
              __break(1u);
LABEL_152:
              __break(1u);
LABEL_153:
              __break(1u);
LABEL_154:
              __break(1u);
LABEL_155:
              __break(1u);
LABEL_156:
              __break(1u);
LABEL_157:
              __break(1u);
LABEL_158:
              __break(1u);
LABEL_159:
              __break(1u);
LABEL_160:
              __break(1u);
              JUMPOUT(0x100099284);
            }
            uint64_t v20 = v19;
            uint64_t v21 = __DataStorage._offset.getter();
            uint64_t v22 = (int)v9 - v21;
            if (__OFSUB__((int)v9, v21)) {
              goto LABEL_133;
            }
            goto LABEL_56;
          }
          uint64_t v46 = *(void *)(v9 + 16);
          uint64_t v47 = *(void *)(v9 + 24);
          sub_100013D44(v9, v8);
          sub_100013D44(v6, v7);
          swift_retain();
          swift_retain();
          uint64_t v48 = __DataStorage._bytes.getter();
          if (v48)
          {
            uint64_t v49 = __DataStorage._offset.getter();
            if (__OFSUB__(v46, v49)) {
              goto LABEL_141;
            }
            v48 += v46 - v49;
          }
          BOOL v13 = __OFSUB__(v47, v46);
          int64_t v50 = v47 - v46;
          if (v13) {
            goto LABEL_136;
          }
          uint64_t v51 = __DataStorage._length.getter();
          if (!v48) {
            goto LABEL_153;
          }
          goto LABEL_89;
      }
    }
    return 0;
  }
  return 1;
}

uint64_t sub_1000992B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2 || a1 == a2) {
      return 1;
    }
    uint64_t v3 = a2 + 38;
    for (uint64_t i = a1 + 38; *(unsigned __int8 *)(i - 6) == *(unsigned __int8 *)(v3 - 6); i += 7)
    {
      if (*(_DWORD *)(i - 5) != *(_DWORD *)(v3 - 5) || *(unsigned __int16 *)(i - 1) != *(unsigned __int16 *)(v3 - 1)) {
        break;
      }
      v3 += 7;
      if (!--v2) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_100099370(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    for (uint64_t i = 0; ; i += 14)
    {
      __int16 v5 = *(_WORD *)(a1 + i + 38);
      __int16 v6 = *(_WORD *)(a1 + i + 40);
      __int16 v7 = *(_WORD *)(a1 + i + 42);
      __int16 v8 = *(_WORD *)(a1 + i + 44);
      __int16 v9 = *(_WORD *)(a2 + i + 38);
      __int16 v10 = *(_WORD *)(a2 + i + 40);
      __int16 v11 = *(_WORD *)(a2 + i + 42);
      __int16 v12 = *(_WORD *)(a2 + i + 44);
      if (*(_DWORD *)(a1 + i + 32) != *(_DWORD *)(a2 + i + 32)
        || *(unsigned __int16 *)(a1 + i + 36) != *(unsigned __int16 *)(a2 + i + 36))
      {
        break;
      }
      int v14 = v9 & 0xFF00;
      if ((v5 & 0xFF00) == 0x2200)
      {
        if (v14 != 8704) {
          return 0;
        }
      }
      else if (v14 == 8704 {
             || word_1003B727C[(char)v5] != word_1003B727C[(char)v9]
      }
             || *(unsigned __int16 *)((char *)&unk_1003B72E8 + (((uint64_t)v5 >> 7) & 0xFFFFFFFFFFFFFFFELL)) != *(unsigned __int16 *)((char *)&unk_1003B72E8 + (((uint64_t)v9 >> 7) & 0xFFFFFFFFFFFFFFFELL)))
      {
        return 0;
      }
      int v15 = v10 & 0xFF00;
      if ((v6 & 0xFF00) == 0x2200)
      {
        if (v15 != 8704) {
          return 0;
        }
      }
      else if (v15 == 8704 {
             || word_1003B727C[(char)v6] != word_1003B727C[(char)v10]
      }
             || *(unsigned __int16 *)((char *)&unk_1003B72E8 + (((uint64_t)v6 >> 7) & 0xFFFFFFFFFFFFFFFELL)) != *(unsigned __int16 *)((char *)&unk_1003B72E8 + (((uint64_t)v10 >> 7) & 0xFFFFFFFFFFFFFFFELL)))
      {
        return 0;
      }
      int v16 = v11 & 0xFF00;
      if ((v7 & 0xFF00) == 0x2200)
      {
        if (v16 != 8704) {
          return 0;
        }
      }
      else if (v16 == 8704 {
             || word_1003B727C[(char)v7] != word_1003B727C[(char)v11]
      }
             || *(unsigned __int16 *)((char *)&unk_1003B72E8 + (((uint64_t)v7 >> 7) & 0xFFFFFFFFFFFFFFFELL)) != *(unsigned __int16 *)((char *)&unk_1003B72E8 + (((uint64_t)v11 >> 7) & 0xFFFFFFFFFFFFFFFELL)))
      {
        return 0;
      }
      int v17 = v12 & 0xFF00;
      if ((v8 & 0xFF00) == 0x2200)
      {
        if (v17 != 8704) {
          return 0;
        }
      }
      else if (v17 == 8704 {
             || word_1003B727C[(char)v8] != word_1003B727C[(char)v12]
      }
             || *(unsigned __int16 *)((char *)&unk_1003B72E8 + (((uint64_t)v8 >> 7) & 0xFFFFFFFFFFFFFFFELL)) != *(unsigned __int16 *)((char *)&unk_1003B72E8 + (((uint64_t)v12 >> 7) & 0xFFFFFFFFFFFFFFFELL)))
      {
        return 0;
      }
      uint64_t v4 = 1;
      if (!--v2) {
        return v4;
      }
    }
    return 0;
  }
  return 1;
}

uint64_t _s7CoreP2P19InfraScanStartEventV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    if (*(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)
      && ((0x801004u >> (8 * *(unsigned char *)(a1 + 36))) & 0xFFC) == ((0x801004u >> (8 * *(unsigned char *)(a2 + 36))) & 0xFFC))
    {
      uint64_t v3 = a1 + 37;
      for (uint64_t i = (unsigned __int8 *)(a2 + 37); ; i += 8)
      {
        int v5 = *i;
        switch(*(unsigned char *)v3)
        {
          case 2:
            if (v5 != 2) {
              return 0;
            }
            break;
          case 3:
            if (v5 != 3) {
              return 0;
            }
            break;
          case 4:
            if (v5 != 4) {
              return 0;
            }
            break;
          case 5:
            if (v5 != 5) {
              return 0;
            }
            break;
          case 6:
            if (v5 != 6) {
              return 0;
            }
            break;
          default:
            if ((v5 - 2) < 5 || ((((*(unsigned char *)v3 & 1) == 0) ^ v5) & 1) == 0) {
              return 0;
            }
            break;
        }
        if (!--v2) {
          break;
        }
        if (*(_DWORD *)(v3 + 3) != *(_DWORD *)(i + 3)) {
          return 0;
        }
        uint64_t result = 0;
        int v7 = (0x801004u >> (8 * *(unsigned char *)(v3 + 7)));
        unsigned int v8 = 0x801004u >> (8 * i[7]);
        v3 += 8;
        if (v7 != v8) {
          return result;
        }
      }
      return 1;
    }
    return 0;
  }
  return 1;
}

BOOL sub_100099730(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(double *)(a1 + 32) != *(double *)(a2 + 32)) {
    return 0;
  }
  uint64_t v3 = (double *)(a1 + 40);
  uint64_t v4 = (double *)(a2 + 40);
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    double v7 = *v3++;
    double v8 = v7;
    double v9 = *v4++;
    --v5;
  }
  while (v8 == v9);
  return result;
}

uint64_t _s7CoreP2P21NANInformationElementV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  return sub_10009A318(a1, a2, (void (*)(void))type metadata accessor for NANAttribute, type metadata accessor for NANAttribute, (uint64_t (*)(char *, char *))_s7CoreP2P12NANAttributeO21__derived_enum_equalsySbAC_ACtFZ_0, type metadata accessor for NANAttribute);
}

BOOL sub_1000997E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (byte_1003B726E[*(char *)(a1 + 32)] != byte_1003B726E[*(char *)(a2 + 32)]) {
    return 0;
  }
  uint64_t v3 = (char *)(a1 + 33);
  uint64_t v4 = (char *)(a2 + 33);
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    uint64_t v8 = *v3++;
    uint64_t v7 = v8;
    uint64_t v9 = *v4++;
    --v5;
  }
  while (byte_1003B726E[v7] == byte_1003B726E[v9]);
  return result;
}

uint64_t sub_100099864(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (unint64_t *)(a1 + 40);
    uint64_t v4 = (unint64_t *)(a2 + 40);
    while (1)
    {
      uint64_t v6 = *(v3 - 1);
      unint64_t v5 = *v3;
      uint64_t v8 = *(v4 - 1);
      unint64_t v7 = *v4;
      unint64_t v9 = *v3 >> 62;
      v3 += 2;
      v4 += 2;
      uint64_t v10 = 0;
      switch(v9)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v6), v6))
          {
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
          }
          uint64_t v10 = HIDWORD(v6) - (int)v6;
LABEL_13:
          sub_100013D44(v6, v5);
          break;
        case 2uLL:
          uint64_t v12 = *(void *)(v6 + 16);
          uint64_t v11 = *(void *)(v6 + 24);
          uint64_t v10 = v11 - v12;
          if (!__OFSUB__(v11, v12)) {
            goto LABEL_13;
          }
          goto LABEL_124;
        case 3uLL:
          break;
        default:
          uint64_t v10 = BYTE6(v5);
          break;
      }
      unint64_t v13 = v7 >> 62;
      switch(v7 >> 62)
      {
        case 1uLL:
          LODWORD(v14) = HIDWORD(v8) - v8;
          if (__OFSUB__(HIDWORD(v8), v8)) {
            goto LABEL_125;
          }
          uint64_t v14 = (int)v14;
LABEL_19:
          if (v10 != v14) {
            goto LABEL_121;
          }
          if (v10 < 1)
          {
LABEL_6:
            sub_10000C970(v6, v5);
          }
          else
          {
            switch((int)v9)
            {
              case 1:
                v76 = v3;
                if ((int)v6 > v6 >> 32) {
                  goto LABEL_127;
                }
                sub_100013D44(v8, v7);
                uint64_t v23 = (char *)__DataStorage._bytes.getter();
                if (!v23) {
                  goto LABEL_33;
                }
                uint64_t v24 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v6, v24)) {
                  goto LABEL_129;
                }
                v23 += (int)v6 - v24;
LABEL_33:
                __DataStorage._length.getter();
                if (!v13)
                {
                  __s1[0] = v8;
                  LOWORD(__s1[1]) = v7;
                  BYTE2(__s1[1]) = BYTE2(v7);
                  BYTE3(__s1[1]) = BYTE3(v7);
                  BYTE4(__s1[1]) = BYTE4(v7);
                  BYTE5(__s1[1]) = BYTE5(v7);
                  if (!v23) {
                    goto LABEL_157;
                  }
                  size_t v41 = BYTE6(v7);
                  size_t v40 = __s1;
                  uint64_t v39 = v23;
LABEL_103:
                  int v29 = memcmp(v39, v40, v41);
                  goto LABEL_104;
                }
                if (v13 == 1)
                {
                  if (v8 >> 32 < (int)v8) {
                    goto LABEL_138;
                  }
                  swift_retain();
                  uint64_t v25 = (char *)__DataStorage._bytes.getter();
                  if (v25)
                  {
                    uint64_t v26 = __DataStorage._offset.getter();
                    if (__OFSUB__((int)v8, v26)) {
                      goto LABEL_145;
                    }
                    v25 += (int)v8 - v26;
                  }
                  uint64_t v27 = __DataStorage._length.getter();
                  if (v27 >= (v8 >> 32) - (int)v8) {
                    size_t v28 = (v8 >> 32) - (int)v8;
                  }
                  else {
                    size_t v28 = v27;
                  }
                  if (!v23) {
                    goto LABEL_147;
                  }
                  if (!v25) {
                    goto LABEL_148;
                  }
                  int v29 = memcmp(v23, v25, v28);
                  sub_10000C970(v8, v7);
                  goto LABEL_72;
                }
                uint64_t v67 = *(void *)(v8 + 16);
                int v74 = *(char **)(v8 + 24);
                swift_retain();
                swift_retain();
                uint64_t v68 = __DataStorage._bytes.getter();
                if (v68)
                {
                  uint64_t v69 = __DataStorage._offset.getter();
                  if (__OFSUB__(v67, v69)) {
                    goto LABEL_144;
                  }
                  v68 += v67 - v69;
                }
                if (__OFSUB__(v74, v67)) {
                  goto LABEL_139;
                }
                uint64_t v70 = __DataStorage._length.getter();
                if (v70 >= (uint64_t)&v74[-v67]) {
                  uint64_t v71 = &v74[-v67];
                }
                else {
                  uint64_t v71 = (char *)v70;
                }
                size_t v56 = v23;
                uint64_t v3 = v76;
                if (!v23) {
                  goto LABEL_158;
                }
                if (!v68) {
                  goto LABEL_159;
                }
                size_t v55 = (size_t)v71;
                uint64_t v57 = (const void *)v68;
LABEL_116:
                int v58 = memcmp(v56, v57, v55);
                swift_release();
                goto LABEL_117;
              case 2:
                uint64_t v77 = v3;
                uint64_t v30 = *(void *)(v6 + 16);
                sub_100013D44(v8, v7);
                swift_retain();
                swift_retain();
                uint64_t v31 = __DataStorage._bytes.getter();
                if (v31)
                {
                  uint64_t v32 = v31;
                  uint64_t v33 = __DataStorage._offset.getter();
                  if (__OFSUB__(v30, v33)) {
                    goto LABEL_128;
                  }
                  size_t v73 = (void *)(v32 + v30 - v33);
                }
                else
                {
                  size_t v73 = 0;
                }
                __DataStorage._length.getter();
                uint64_t v3 = v77;
                if (v13)
                {
                  if (v13 == 1)
                  {
                    if (v8 >> 32 < (int)v8) {
                      goto LABEL_134;
                    }
                    swift_retain();
                    uint64_t v42 = (char *)__DataStorage._bytes.getter();
                    if (v42)
                    {
                      uint64_t v43 = __DataStorage._offset.getter();
                      if (__OFSUB__((int)v8, v43)) {
                        goto LABEL_143;
                      }
                      v42 += (int)v8 - v43;
                    }
                    uint64_t v44 = __DataStorage._length.getter();
                    if (v44 >= (v8 >> 32) - (int)v8) {
                      size_t v45 = (v8 >> 32) - (int)v8;
                    }
                    else {
                      size_t v45 = v44;
                    }
                    if (!v73) {
                      goto LABEL_150;
                    }
                    uint64_t v3 = v77;
                    if (!v42) {
                      goto LABEL_151;
                    }
                    int v29 = memcmp(v73, v42, v45);
                    sub_10000C970(v8, v7);
                    swift_release();
                    swift_release();
LABEL_72:
                    sub_10000C970(v8, v7);
LABEL_104:
                    sub_10000C970(v6, v5);
                    if (v29) {
                      return 0;
                    }
                  }
                  else
                  {
                    uint64_t v60 = *(void *)(v8 + 16);
                    uint64_t v59 = *(void *)(v8 + 24);
                    swift_retain();
                    swift_retain();
                    uint64_t v61 = (char *)__DataStorage._bytes.getter();
                    if (v61)
                    {
                      uint64_t v62 = __DataStorage._offset.getter();
                      if (__OFSUB__(v60, v62)) {
                        goto LABEL_142;
                      }
                      v61 += v60 - v62;
                    }
                    BOOL v17 = __OFSUB__(v59, v60);
                    int64_t v63 = v59 - v60;
                    if (v17) {
                      goto LABEL_137;
                    }
                    uint64_t v64 = __DataStorage._length.getter();
                    if (v64 >= v63) {
                      size_t v65 = v63;
                    }
                    else {
                      size_t v65 = v64;
                    }
                    uint64_t v3 = v77;
                    if (!v73) {
                      goto LABEL_155;
                    }
                    if (!v61) {
                      goto LABEL_156;
                    }
                    int v66 = memcmp(v73, v61, v65);
                    swift_release();
                    swift_release();
                    swift_release();
                    swift_release();
                    sub_10000C970(v8, v7);
                    sub_10000C970(v6, v5);
                    if (v66) {
                      return 0;
                    }
                  }
                }
                else
                {
                  __s1[0] = v8;
                  LOWORD(__s1[1]) = v7;
                  BYTE2(__s1[1]) = BYTE2(v7);
                  BYTE3(__s1[1]) = BYTE3(v7);
                  BYTE4(__s1[1]) = BYTE4(v7);
                  BYTE5(__s1[1]) = BYTE5(v7);
                  if (!v73) {
                    goto LABEL_154;
                  }
                  int v58 = memcmp(v73, __s1, BYTE6(v7));
                  swift_release();
LABEL_117:
                  swift_release();
                  sub_10000C970(v8, v7);
                  sub_10000C970(v6, v5);
                  if (v58) {
                    return 0;
                  }
                }
                break;
              case 3:
                memset(__s1, 0, 14);
                if (!v13) {
                  goto LABEL_58;
                }
                size_t v75 = v3;
                if (v13 == 1)
                {
                  uint64_t v18 = (v8 >> 32) - (int)v8;
                  if (v8 >> 32 < (int)v8) {
                    goto LABEL_131;
                  }
                  sub_100013D44(v8, v7);
                  uint64_t v34 = __DataStorage._bytes.getter();
                  if (!v34) {
                    goto LABEL_149;
                  }
                  uint64_t v20 = v34;
                  uint64_t v35 = __DataStorage._offset.getter();
                  uint64_t v22 = (int)v8 - v35;
                  if (__OFSUB__((int)v8, v35)) {
                    goto LABEL_133;
                  }
LABEL_53:
                  uint64_t v36 = __DataStorage._length.getter();
                  if (v36 >= v18) {
                    size_t v37 = v18;
                  }
                  else {
                    size_t v37 = v36;
                  }
                  int v38 = memcmp(__s1, (const void *)(v20 + v22), v37);
                  sub_10000C970(v8, v7);
                  sub_10000C970(v6, v5);
                  uint64_t v3 = v75;
                  if (v38) {
                    return 0;
                  }
                  break;
                }
                uint64_t v52 = *(void *)(v8 + 16);
                uint64_t v53 = *(void *)(v8 + 24);
                sub_100013D44(v8, v7);
                swift_retain();
                swift_retain();
                uint64_t v48 = __DataStorage._bytes.getter();
                if (v48)
                {
                  uint64_t v54 = __DataStorage._offset.getter();
                  if (__OFSUB__(v52, v54)) {
                    goto LABEL_141;
                  }
                  v48 += v52 - v54;
                }
                BOOL v17 = __OFSUB__(v53, v52);
                int64_t v50 = v53 - v52;
                if (v17) {
                  goto LABEL_136;
                }
                uint64_t v51 = __DataStorage._length.getter();
                uint64_t v3 = v75;
                if (!v48) {
                  goto LABEL_153;
                }
LABEL_84:
                if (v51 >= v50) {
                  size_t v55 = v50;
                }
                else {
                  size_t v55 = v51;
                }
                size_t v56 = __s1;
                uint64_t v57 = (const void *)v48;
                goto LABEL_116;
              default:
                __s1[0] = v6;
                LOWORD(__s1[1]) = v5;
                BYTE2(__s1[1]) = BYTE2(v5);
                BYTE3(__s1[1]) = BYTE3(v5);
                BYTE4(__s1[1]) = BYTE4(v5);
                BYTE5(__s1[1]) = BYTE5(v5);
                if (!v13)
                {
LABEL_58:
                  uint64_t v78 = v8;
                  __int16 v79 = v7;
                  char v80 = BYTE2(v7);
                  char v81 = BYTE3(v7);
                  char v82 = BYTE4(v7);
                  char v83 = BYTE5(v7);
                  sub_100013D44(v8, v7);
                  uint64_t v39 = __s1;
                  size_t v40 = &v78;
                  size_t v41 = BYTE6(v7);
                  goto LABEL_103;
                }
                size_t v75 = v3;
                if (v13 == 1)
                {
                  uint64_t v18 = (v8 >> 32) - (int)v8;
                  if (v8 >> 32 < (int)v8) {
                    goto LABEL_130;
                  }
                  sub_100013D44(v8, v7);
                  uint64_t v19 = __DataStorage._bytes.getter();
                  if (!v19)
                  {
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_147:
                    __break(1u);
LABEL_148:
                    __break(1u);
LABEL_149:
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_150:
                    __break(1u);
LABEL_151:
                    __break(1u);
LABEL_152:
                    __break(1u);
LABEL_153:
                    __break(1u);
LABEL_154:
                    __break(1u);
LABEL_155:
                    __break(1u);
LABEL_156:
                    __break(1u);
LABEL_157:
                    __break(1u);
LABEL_158:
                    __break(1u);
LABEL_159:
                    __break(1u);
                    JUMPOUT(0x10009A19CLL);
                  }
                  uint64_t v20 = v19;
                  uint64_t v21 = __DataStorage._offset.getter();
                  uint64_t v22 = (int)v8 - v21;
                  if (__OFSUB__((int)v8, v21)) {
                    goto LABEL_132;
                  }
                  goto LABEL_53;
                }
                uint64_t v46 = *(void *)(v8 + 16);
                uint64_t v47 = *(void *)(v8 + 24);
                sub_100013D44(v8, v7);
                swift_retain();
                swift_retain();
                uint64_t v48 = __DataStorage._bytes.getter();
                if (v48)
                {
                  uint64_t v49 = __DataStorage._offset.getter();
                  if (__OFSUB__(v46, v49)) {
                    goto LABEL_140;
                  }
                  v48 += v46 - v49;
                }
                BOOL v17 = __OFSUB__(v47, v46);
                int64_t v50 = v47 - v46;
                if (v17) {
                  goto LABEL_135;
                }
                uint64_t v51 = __DataStorage._length.getter();
                uint64_t v3 = v75;
                if (!v48) {
                  goto LABEL_152;
                }
                goto LABEL_84;
            }
          }
          if (!--v2) {
            return 1;
          }
          break;
        case 2uLL:
          uint64_t v16 = *(void *)(v8 + 16);
          uint64_t v15 = *(void *)(v8 + 24);
          BOOL v17 = __OFSUB__(v15, v16);
          uint64_t v14 = v15 - v16;
          if (!v17) {
            goto LABEL_19;
          }
          goto LABEL_126;
        case 3uLL:
          if (!v10) {
            goto LABEL_6;
          }
          sub_100013D44(v8, v7);
LABEL_121:
          sub_10000C970(v6, v5);
          return 0;
        default:
          uint64_t v14 = BYTE6(v7);
          goto LABEL_19;
      }
    }
  }
  return 1;
}

uint64_t sub_10009A1CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      char v6 = 1;
    }
    else
    {
      uint64_t v3 = a1 + 32;
      uint64_t v4 = a2 + 32;
      uint64_t v5 = v2 - 1;
      do
      {
        sub_1000A66D8(v3, (uint64_t)v10);
        sub_1000A66D8(v4, (uint64_t)v11);
        sub_1000A6734((uint64_t)v10, (void (*)(void, void, void, void, void, void, void))sub_10006E998);
        sub_1000A6734((uint64_t)v11, (void (*)(void, void, void, void, void, void, void))sub_10006E998);
        char v6 = static IEEE80211InformationElement.__derived_enum_equals(_:_:)((uint64_t)v10, (uint64_t)v11);
        sub_1000A6734((uint64_t)v11, (void (*)(void, void, void, void, void, void, void))sub_10006E108);
        sub_1000A6734((uint64_t)v10, (void (*)(void, void, void, void, void, void, void))sub_10006E108);
        BOOL v8 = v5-- != 0;
        if ((v6 & 1) == 0) {
          break;
        }
        v4 += 56;
        v3 += 56;
      }
      while (v8);
    }
  }
  else
  {
    char v6 = 0;
  }
  return v6 & 1;
}

uint64_t sub_10009A2D4(uint64_t a1, uint64_t a2)
{
  return sub_10009A318(a1, a2, (void (*)(void))type metadata accessor for AWDLActionFrame.AWDLAttribute, type metadata accessor for AWDLActionFrame.AWDLAttribute, (uint64_t (*)(char *, char *))_s7CoreP2P15AWDLActionFrameV13AWDLAttributeO21__derived_enum_equalsySbAE_AEtFZ_0, type metadata accessor for AWDLActionFrame.AWDLAttribute);
}

uint64_t sub_10009A318(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t (*a4)(void), uint64_t (*a5)(char *, char *), uint64_t (*a6)(void))
{
  a3(0);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v15 = (char *)&v25 - v14;
  uint64_t v16 = *(void *)(a1 + 16);
  if (v16 == *(void *)(a2 + 16))
  {
    if (!v16 || a1 == a2)
    {
      char v21 = 1;
    }
    else
    {
      uint64_t v26 = a2;
      BOOL v17 = a5;
      unint64_t v18 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
      uint64_t v19 = *(void *)(v13 + 72);
      uint64_t v20 = v16 - 1;
      do
      {
        sub_1000A6778(a1 + v18, (uint64_t)v15, a4);
        sub_1000A6778(v26 + v18, (uint64_t)v12, a4);
        char v21 = v17(v15, v12);
        sub_1000A6678((uint64_t)v12, a6);
        sub_1000A6678((uint64_t)v15, a6);
        BOOL v23 = v20-- != 0;
        if ((v21 & 1) == 0) {
          break;
        }
        v18 += v19;
      }
      while (v23);
    }
  }
  else
  {
    char v21 = 0;
  }
  return v21 & 1;
}

uint64_t sub_10009A4B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = (uint64_t *)(a2 + 80);
  uint64_t v4 = (size_t *)(a1 + 80);
  while (2)
  {
    if (*((unsigned __int8 *)v4 - 48) != *((unsigned __int8 *)v3 - 48)) {
      return 0;
    }
    uint64_t v5 = *(v4 - 5);
    unint64_t v6 = *(v4 - 4);
    uint64_t v7 = *(v4 - 3);
    unint64_t v185 = *(v4 - 2);
    uint64_t v8 = *(v3 - 5);
    unint64_t v9 = *(v3 - 4);
    uint64_t v10 = *(v3 - 3);
    unint64_t v11 = *(v3 - 2);
    uint64_t v12 = *(v3 - 1);
    uint64_t v13 = *v3;
    uint64_t v14 = v3 + 7;
    size_t v15 = *v4;
    uint64_t v179 = *(v4 - 1);
    uint64_t v180 = v12;
    v4 += 7;
    uint64_t v16 = 0;
    switch(v6 >> 62)
    {
      case 1uLL:
        LODWORD(v16) = HIDWORD(v5) - v5;
        if (__OFSUB__(HIDWORD(v5), v5))
        {
          __break(1u);
LABEL_262:
          __break(1u);
LABEL_263:
          __break(1u);
LABEL_264:
          __break(1u);
LABEL_265:
          __break(1u);
LABEL_266:
          __break(1u);
LABEL_267:
          __break(1u);
LABEL_268:
          __break(1u);
LABEL_269:
          __break(1u);
LABEL_270:
          __break(1u);
LABEL_271:
          __break(1u);
LABEL_272:
          __break(1u);
LABEL_273:
          __break(1u);
LABEL_274:
          __break(1u);
LABEL_275:
          __break(1u);
LABEL_276:
          __break(1u);
LABEL_277:
          __break(1u);
LABEL_278:
          __break(1u);
LABEL_279:
          __break(1u);
LABEL_280:
          __break(1u);
LABEL_281:
          __break(1u);
LABEL_282:
          __break(1u);
LABEL_283:
          __break(1u);
LABEL_284:
          __break(1u);
LABEL_285:
          __break(1u);
LABEL_286:
          __break(1u);
LABEL_287:
          __break(1u);
LABEL_288:
          __break(1u);
LABEL_289:
          __break(1u);
LABEL_290:
          __break(1u);
LABEL_291:
          __break(1u);
LABEL_292:
          __break(1u);
LABEL_293:
          __break(1u);
LABEL_294:
          __break(1u);
LABEL_295:
          __break(1u);
LABEL_296:
          __break(1u);
LABEL_297:
          __break(1u);
LABEL_298:
          __break(1u);
LABEL_299:
          __break(1u);
LABEL_300:
          __break(1u);
LABEL_301:
          __break(1u);
LABEL_302:
          __break(1u);
LABEL_303:
          __break(1u);
LABEL_304:
          __break(1u);
LABEL_305:
          __break(1u);
LABEL_306:
          __break(1u);
        }
        uint64_t v16 = (int)v16;
        break;
      case 2uLL:
        uint64_t v18 = *(void *)(v5 + 16);
        uint64_t v17 = *(void *)(v5 + 24);
        BOOL v19 = __OFSUB__(v17, v18);
        uint64_t v16 = v17 - v18;
        if (!v19) {
          break;
        }
        goto LABEL_262;
      case 3uLL:
        break;
      default:
        uint64_t v16 = BYTE6(v6);
        break;
    }
    unint64_t v20 = v9 >> 62;
    uint64_t v186 = v8;
    unint64_t v187 = v11;
    uint64_t v183 = v5;
    unint64_t v184 = v9;
    v181 = v14;
    unint64_t v182 = v6;
    switch(v9 >> 62)
    {
      case 1uLL:
        LODWORD(v21) = HIDWORD(v8) - v8;
        if (__OFSUB__(HIDWORD(v8), v8)) {
          goto LABEL_264;
        }
        uint64_t v21 = (int)v21;
LABEL_23:
        if (v16 != v21) {
          return 0;
        }
        if (v16 < 1)
        {
LABEL_33:
          sub_100013D44(v5, v6);
          sub_100038004(v7, v185);
          swift_bridgeObjectRetain();
          uint64_t v29 = v8;
          unint64_t v30 = v185;
          sub_100013D44(v29, v9);
          sub_100038004(v10, v11);
          swift_bridgeObjectRetain();
        }
        else
        {
          switch(v6 >> 62)
          {
            case 1uLL:
              size_t __nb = v15;
              uint64_t v43 = v7;
              uint64_t v44 = (int)v5;
              if ((int)v5 > v5 >> 32) {
                goto LABEL_269;
              }
              uint64_t v45 = v13;
              uint64_t v46 = v4;
              uint64_t v47 = v10;
              uint64_t v48 = v2;
              uint64_t v49 = v45;
              uint64_t v50 = v5;
              unint64_t v51 = v6;
              sub_100013D44(v5, v6);
              sub_100038004(v43, v185);
              swift_bridgeObjectRetain();
              sub_100013D44(v186, v9);
              sub_100038004(v47, v187);
              swift_bridgeObjectRetain();
              sub_100013D44(v50, v51);
              uint64_t v52 = (char *)__DataStorage._bytes.getter();
              uint64_t v170 = v49;
              if (!v52) {
                goto LABEL_65;
              }
              uint64_t v53 = __DataStorage._offset.getter();
              if (__OFSUB__(v44, v53)) {
                goto LABEL_271;
              }
              v52 += v44 - v53;
LABEL_65:
              uint64_t v7 = v43;
              uint64_t v10 = v47;
              __DataStorage._length.getter();
              uint64_t v2 = v48;
              uint64_t v4 = v46;
              if (!v20)
              {
                __s1[0] = v186;
                unint64_t v30 = v185;
                LODWORD(__s1[1]) = v9;
                WORD2(__s1[1]) = WORD2(v9);
                uint64_t v13 = v170;
                if (!v52) {
                  goto LABEL_318;
                }
                int v58 = memcmp(v52, __s1, BYTE6(v9));
                sub_10000C970(v183, v182);
                size_t v15 = __nb;
LABEL_154:
                unint64_t v11 = v187;
                if (v58) {
                  goto LABEL_254;
                }
                break;
              }
              if (v20 == 1)
              {
                if (v186 >> 32 < (int)v186) {
                  goto LABEL_281;
                }
                swift_retain();
                uint64_t v54 = (char *)__DataStorage._bytes.getter();
                if (v54)
                {
                  uint64_t v55 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)v186, v55)) {
                    goto LABEL_290;
                  }
                  v54 += (int)v186 - v55;
                }
                uint64_t v7 = v43;
                uint64_t v56 = __DataStorage._length.getter();
                if (v56 >= (v186 >> 32) - (int)v186) {
                  size_t v57 = (v186 >> 32) - (int)v186;
                }
                else {
                  size_t v57 = v56;
                }
                size_t v15 = __nb;
                if (!v52) {
                  goto LABEL_308;
                }
                unint64_t v30 = v185;
                uint64_t v13 = v170;
                if (!v54) {
                  goto LABEL_309;
                }
                int v58 = memcmp(v52, v54, v57);
                sub_10000C970(v186, v184);
                sub_10000C970(v183, v182);
                goto LABEL_154;
              }
              uint64_t v111 = *(void *)(v186 + 16);
              uint64_t v112 = *(void *)(v186 + 24);
              swift_retain();
              swift_retain();
              char v113 = (char *)__DataStorage._bytes.getter();
              if (v113)
              {
                uint64_t v114 = __DataStorage._offset.getter();
                if (__OFSUB__(v111, v114)) {
                  goto LABEL_289;
                }
                v113 += v111 - v114;
              }
              BOOL v19 = __OFSUB__(v112, v111);
              int64_t v115 = v112 - v111;
              if (v19) {
                goto LABEL_282;
              }
              uint64_t v116 = __DataStorage._length.getter();
              if (v116 >= v115) {
                size_t v117 = v115;
              }
              else {
                size_t v117 = v116;
              }
              if (!v52) {
                goto LABEL_319;
              }
              uint64_t v7 = v43;
              unint64_t v30 = v185;
              size_t v15 = __nb;
              uint64_t v13 = v170;
              if (!v113) {
                goto LABEL_320;
              }
              int v101 = memcmp(v52, v113, v117);
              swift_release();
              swift_release();
              sub_10000C970(v183, v182);
LABEL_166:
              unint64_t v11 = v187;
              if (v101) {
                goto LABEL_254;
              }
              break;
            case 2uLL:
              v162 = *(char **)(v5 + 16);
              sub_100013D44(v5, v6);
              v165 = (void *)v7;
              sub_100038004(v7, v185);
              swift_bridgeObjectRetain();
              sub_100013D44(v8, v9);
              sub_100038004(v10, v11);
              uint64_t v171 = v13;
              swift_bridgeObjectRetain();
              swift_retain();
              swift_retain();
              uint64_t v59 = __DataStorage._bytes.getter();
              if (v59)
              {
                uint64_t v60 = v59;
                uint64_t v61 = __DataStorage._offset.getter();
                if (__OFSUB__(v162, v61)) {
                  goto LABEL_270;
                }
                v163 = &v162[v60 - v61];
              }
              else
              {
                v163 = 0;
              }
              unint64_t v30 = v185;
              __DataStorage._length.getter();
              uint64_t v7 = (uint64_t)v165;
              if (v20)
              {
                if (v20 == 1)
                {
                  if (v186 >> 32 < (int)v186) {
                    goto LABEL_275;
                  }
                  swift_retain();
                  int v86 = (char *)__DataStorage._bytes.getter();
                  if (v86)
                  {
                    uint64_t v87 = __DataStorage._offset.getter();
                    if (__OFSUB__((int)v186, v87)) {
                      goto LABEL_288;
                    }
                    v86 += (int)v186 - v87;
                  }
                  uint64_t v7 = (uint64_t)v165;
                  uint64_t v88 = __DataStorage._length.getter();
                  if (v88 >= (v186 >> 32) - (int)v186) {
                    size_t v89 = (v186 >> 32) - (int)v186;
                  }
                  else {
                    size_t v89 = v88;
                  }
                  if (!v163) {
                    goto LABEL_311;
                  }
                  unint64_t v30 = v185;
                  if (!v86) {
                    goto LABEL_312;
                  }
                  int v90 = memcmp(v163, v86, v89);
                  sub_10000C970(v186, v184);
                  swift_release();
                  swift_release();
                  if (v90) {
                    goto LABEL_254;
                  }
                }
                else
                {
                  uint64_t v104 = *(void *)(v186 + 16);
                  uint64_t v103 = *(void *)(v186 + 24);
                  swift_retain();
                  swift_retain();
                  uint64_t v105 = (char *)__DataStorage._bytes.getter();
                  if (v105)
                  {
                    uint64_t v106 = __DataStorage._offset.getter();
                    if (__OFSUB__(v104, v106)) {
                      goto LABEL_287;
                    }
                    v105 += v104 - v106;
                  }
                  BOOL v19 = __OFSUB__(v103, v104);
                  int64_t v107 = v103 - v104;
                  if (v19) {
                    goto LABEL_280;
                  }
                  uint64_t v108 = __DataStorage._length.getter();
                  if (v108 >= v107) {
                    size_t v109 = v107;
                  }
                  else {
                    size_t v109 = v108;
                  }
                  uint64_t v7 = (uint64_t)v165;
                  if (!v163) {
                    goto LABEL_316;
                  }
                  unint64_t v30 = v185;
                  uint64_t v13 = v171;
                  if (!v105) {
                    goto LABEL_317;
                  }
                  int v110 = memcmp(v163, v105, v109);
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  if (v110)
                  {
LABEL_254:
                    sub_10000C970(v186, v184);
                    uint64_t v160 = v10;
                    unint64_t v161 = v11;
                    goto LABEL_255;
                  }
                }
              }
              else
              {
                __s1[0] = v186;
                LODWORD(__s1[1]) = v9;
                WORD2(__s1[1]) = WORD2(v9);
                if (!v163) {
                  goto LABEL_315;
                }
                int v102 = memcmp(v163, __s1, BYTE6(v9));
                swift_release();
                swift_release();
                if (v102) {
                  goto LABEL_254;
                }
              }
              break;
            case 3uLL:
              memset(__s1, 0, 14);
              if (!v20) {
                goto LABEL_90;
              }
              size_t __n = v15;
              v164 = (void *)v7;
              if (v20 == 1)
              {
                uint64_t v24 = (v8 >> 32) - (int)v8;
                if (v8 >> 32 < (int)v8) {
                  goto LABEL_274;
                }
                sub_100013D44(v5, v6);
                sub_100038004(v7, v185);
                swift_bridgeObjectRetain();
                sub_100013D44(v8, v9);
                sub_100038004(v10, v187);
                uint64_t v168 = v13;
                swift_bridgeObjectRetain();
                sub_100013D44(v8, v9);
                uint64_t v62 = __DataStorage._bytes.getter();
                if (!v62) {
                  goto LABEL_310;
                }
                uint64_t v26 = v62;
                uint64_t v63 = __DataStorage._offset.getter();
                uint64_t v28 = (int)v8 - v63;
                if (__OFSUB__((int)v8, v63)) {
                  goto LABEL_279;
                }
                goto LABEL_85;
              }
              uint64_t v97 = *(void *)(v8 + 16);
              uint64_t v98 = *(void *)(v8 + 24);
              sub_100013D44(v5, v6);
              sub_100038004((uint64_t)v164, v185);
              swift_bridgeObjectRetain();
              sub_100013D44(v8, v9);
              sub_100038004(v10, v187);
              swift_bridgeObjectRetain();
              swift_retain();
              swift_retain();
              v93 = (char *)__DataStorage._bytes.getter();
              if (v93)
              {
                uint64_t v99 = __DataStorage._offset.getter();
                if (__OFSUB__(v97, v99)) {
                  goto LABEL_286;
                }
                v93 += v97 - v99;
              }
              unint64_t v30 = v185;
              BOOL v19 = __OFSUB__(v98, v97);
              int64_t v95 = v98 - v97;
              if (v19) {
                goto LABEL_277;
              }
              uint64_t v96 = __DataStorage._length.getter();
              uint64_t v7 = (uint64_t)v164;
              if (!v93) {
                goto LABEL_314;
              }
              goto LABEL_134;
            default:
              __s1[0] = v5;
              LOWORD(__s1[1]) = v6;
              BYTE2(__s1[1]) = BYTE2(v6);
              BYTE3(__s1[1]) = BYTE3(v6);
              BYTE4(__s1[1]) = BYTE4(v6);
              BYTE5(__s1[1]) = BYTE5(v6);
              if (!v20)
              {
LABEL_90:
                uint64_t __s2 = v8;
                LOWORD(v189) = v9;
                BYTE2(v189) = BYTE2(v9);
                HIBYTE(v189) = BYTE3(v9);
                LOBYTE(v190) = BYTE4(v9);
                unint64_t v67 = v9;
                size_t __nd = BYTE6(v9);
                HIBYTE(v190) = BYTE5(v9);
                uint64_t v68 = v8;
                sub_100013D44(v5, v6);
                unint64_t v30 = v185;
                sub_100038004(v7, v185);
                swift_bridgeObjectRetain();
                sub_100013D44(v68, v67);
                sub_100038004(v10, v11);
                swift_bridgeObjectRetain();
                if (memcmp(__s1, &__s2, __nd)) {
                  goto LABEL_254;
                }
                break;
              }
              size_t __n = v15;
              v164 = (void *)v7;
              if (v20 != 1)
              {
                uint64_t v91 = *(void *)(v8 + 16);
                uint64_t v92 = *(void *)(v8 + 24);
                sub_100013D44(v5, v6);
                sub_100038004((uint64_t)v164, v185);
                swift_bridgeObjectRetain();
                sub_100013D44(v8, v9);
                sub_100038004(v10, v187);
                swift_bridgeObjectRetain();
                swift_retain();
                swift_retain();
                v93 = (char *)__DataStorage._bytes.getter();
                if (v93)
                {
                  uint64_t v94 = __DataStorage._offset.getter();
                  if (__OFSUB__(v91, v94)) {
                    goto LABEL_285;
                  }
                  v93 += v91 - v94;
                }
                unint64_t v30 = v185;
                BOOL v19 = __OFSUB__(v92, v91);
                int64_t v95 = v92 - v91;
                if (v19) {
                  goto LABEL_276;
                }
                uint64_t v96 = __DataStorage._length.getter();
                uint64_t v7 = (uint64_t)v164;
                if (!v93) {
                  goto LABEL_313;
                }
LABEL_134:
                if (v96 >= v95) {
                  size_t v100 = v95;
                }
                else {
                  size_t v100 = v96;
                }
                int v101 = memcmp(__s1, v93, v100);
                swift_release();
                swift_release();
                size_t v15 = __n;
                goto LABEL_166;
              }
              uint64_t v24 = (v8 >> 32) - (int)v8;
              if (v8 >> 32 < (int)v8) {
                goto LABEL_273;
              }
              sub_100013D44(v5, v6);
              sub_100038004(v7, v185);
              swift_bridgeObjectRetain();
              sub_100013D44(v8, v9);
              sub_100038004(v10, v187);
              uint64_t v168 = v13;
              swift_bridgeObjectRetain();
              sub_100013D44(v8, v9);
              uint64_t v25 = __DataStorage._bytes.getter();
              if (!v25)
              {
                __DataStorage._length.getter();
                __break(1u);
LABEL_308:
                __break(1u);
LABEL_309:
                __break(1u);
LABEL_310:
                __DataStorage._length.getter();
                __break(1u);
LABEL_311:
                __break(1u);
LABEL_312:
                __break(1u);
LABEL_313:
                __break(1u);
LABEL_314:
                __break(1u);
LABEL_315:
                __break(1u);
LABEL_316:
                __break(1u);
LABEL_317:
                __break(1u);
LABEL_318:
                __break(1u);
LABEL_319:
                __break(1u);
LABEL_320:
                __break(1u);
LABEL_321:
                __DataStorage._length.getter();
                __break(1u);
LABEL_322:
                __DataStorage._length.getter();
                __break(1u);
LABEL_323:
                __break(1u);
LABEL_324:
                __break(1u);
LABEL_325:
                __break(1u);
LABEL_326:
                __break(1u);
LABEL_327:
                __break(1u);
LABEL_328:
                __break(1u);
LABEL_329:
                __break(1u);
LABEL_330:
                __break(1u);
LABEL_331:
                __break(1u);
LABEL_332:
                __break(1u);
LABEL_333:
                __break(1u);
LABEL_334:
                __break(1u);
                JUMPOUT(0x10009BC40);
              }
              uint64_t v26 = v25;
              uint64_t v27 = __DataStorage._offset.getter();
              uint64_t v28 = (int)v8 - v27;
              if (__OFSUB__((int)v8, v27)) {
                goto LABEL_278;
              }
LABEL_85:
              uint64_t v64 = __DataStorage._length.getter();
              if (v64 >= v24) {
                size_t v65 = v24;
              }
              else {
                size_t v65 = v64;
              }
              int v66 = memcmp(__s1, (const void *)(v26 + v28), v65);
              sub_10000C970(v8, v184);
              unint64_t v30 = v185;
              uint64_t v7 = (uint64_t)v164;
              uint64_t v13 = v168;
              size_t v15 = __n;
              unint64_t v11 = v187;
              if (v66) {
                goto LABEL_254;
              }
              break;
          }
        }
        if (v30 >> 60 == 15)
        {
          if (v11 >> 60 != 15) {
            goto LABEL_250;
          }
          goto LABEL_241;
        }
        if (v11 >> 60 == 15)
        {
LABEL_250:
          sub_100038004(v7, v30);
          sub_100038004(v10, v187);
          sub_10000C95C(v7, v30);
          sub_10000C95C(v10, v187);
          sub_10000C970(v186, v184);
          sub_10000C95C(v10, v187);
          swift_bridgeObjectRelease();
          sub_10000C970(v183, v182);
          uint64_t v158 = v7;
          unint64_t v159 = v30;
          goto LABEL_257;
        }
        uint64_t v31 = 0;
        switch(v30 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(v7), v7)) {
              goto LABEL_265;
            }
            uint64_t v31 = HIDWORD(v7) - (int)v7;
LABEL_43:
            sub_100013D44(v7, v30);
            break;
          case 2uLL:
            uint64_t v33 = *(void *)(v7 + 16);
            uint64_t v32 = *(void *)(v7 + 24);
            uint64_t v31 = v32 - v33;
            if (!__OFSUB__(v32, v33)) {
              goto LABEL_43;
            }
            goto LABEL_266;
          case 3uLL:
            goto LABEL_44;
          default:
            uint64_t v31 = BYTE6(v30);
            goto LABEL_44;
        }
        break;
      case 2uLL:
        uint64_t v23 = *(void *)(v8 + 16);
        uint64_t v22 = *(void *)(v8 + 24);
        BOOL v19 = __OFSUB__(v22, v23);
        uint64_t v21 = v22 - v23;
        if (!v19) {
          goto LABEL_23;
        }
        goto LABEL_263;
      case 3uLL:
        if (v16) {
          return 0;
        }
        goto LABEL_33;
      default:
        uint64_t v21 = BYTE6(v9);
        goto LABEL_23;
    }
LABEL_44:
    unint64_t v34 = v187 >> 62;
    switch(v187 >> 62)
    {
      case 1uLL:
        LODWORD(v35) = HIDWORD(v10) - v10;
        if (__OFSUB__(HIDWORD(v10), v10)) {
          goto LABEL_267;
        }
        uint64_t v35 = (int)v35;
LABEL_49:
        if (v31 == v35)
        {
          if (v31 < 1)
          {
LABEL_60:
            sub_10000C95C(v7, v30);
          }
          else
          {
            switch(v30 >> 62)
            {
              case 1uLL:
                uint64_t v172 = v13;
                size_t __na = v15;
                uint64_t v69 = v7;
                uint64_t v70 = (int)v7;
                if ((int)v7 > v7 >> 32) {
                  goto LABEL_272;
                }
                unint64_t v71 = v30;
                uint64_t v72 = v69;
                sub_100013D44(v10, v187);
                uint64_t v73 = __DataStorage._bytes.getter();
                if (v73)
                {
                  uint64_t v74 = v73;
                  uint64_t v75 = __DataStorage._offset.getter();
                  if (__OFSUB__(v70, v75)) {
                    goto LABEL_284;
                  }
                  v166 = (void *)(v74 + v70 - v75);
                }
                else
                {
                  v166 = 0;
                }
                uint64_t v13 = v172;
                __DataStorage._length.getter();
                if (!v34)
                {
                  __s1[0] = v10;
                  unint64_t v128 = v187;
                  LODWORD(__s1[1]) = v187;
                  WORD2(__s1[1]) = WORD2(v187);
                  if (!v166) {
                    goto LABEL_330;
                  }
                  int v127 = memcmp(v166, __s1, BYTE6(v187));
LABEL_220:
                  sub_10000C95C(v10, v128);
                  uint64_t v7 = v72;
                  sub_10000C95C(v72, v30);
                  size_t v15 = __na;
                  if (v127) {
                    goto LABEL_253;
                  }
                  break;
                }
                if (v34 == 1)
                {
                  if (v10 >> 32 < (int)v10) {
                    goto LABEL_299;
                  }
                  swift_retain();
                  v123 = (char *)__DataStorage._bytes.getter();
                  if (v123)
                  {
                    uint64_t v124 = __DataStorage._offset.getter();
                    if (__OFSUB__((int)v10, v124)) {
                      goto LABEL_306;
                    }
                    v123 += (int)v10 - v124;
                  }
                  uint64_t v125 = __DataStorage._length.getter();
                  if (v125 >= (v10 >> 32) - (int)v10) {
                    size_t v126 = (v10 >> 32) - (int)v10;
                  }
                  else {
                    size_t v126 = v125;
                  }
                  if (!v166) {
                    goto LABEL_325;
                  }
                  uint64_t v13 = v172;
                  if (!v123) {
                    goto LABEL_326;
                  }
                  int v127 = memcmp(v166, v123, v126);
                  unint64_t v128 = v187;
                  sub_10000C95C(v10, v187);
                  goto LABEL_220;
                }
                uint64_t v146 = *(void *)(v10 + 16);
                uint64_t v145 = *(void *)(v10 + 24);
                swift_retain();
                swift_retain();
                v147 = (char *)__DataStorage._bytes.getter();
                if (v147)
                {
                  uint64_t v148 = __DataStorage._offset.getter();
                  if (__OFSUB__(v146, v148)) {
                    goto LABEL_305;
                  }
                  v147 += v146 - v148;
                }
                BOOL v19 = __OFSUB__(v145, v146);
                int64_t v149 = v145 - v146;
                if (v19) {
                  goto LABEL_300;
                }
                uint64_t v150 = __DataStorage._length.getter();
                if (v150 >= v149) {
                  size_t v151 = v149;
                }
                else {
                  size_t v151 = v150;
                }
                if (!v166) {
                  goto LABEL_331;
                }
                uint64_t v13 = v172;
                if (!v147) {
                  goto LABEL_332;
                }
                unint64_t v30 = v71;
                int v139 = memcmp(v166, v147, v151);
                swift_release();
                swift_release();
                sub_10000C95C(v10, v187);
                uint64_t v7 = v72;
                uint64_t v140 = v72;
LABEL_232:
                sub_10000C95C(v140, v30);
                size_t v15 = __na;
                if (v139) {
                  goto LABEL_253;
                }
                break;
              case 2uLL:
                uint64_t v173 = v13;
                size_t __nc = v15;
                uint64_t v76 = *(void *)(v7 + 16);
                sub_100038004(v10, v187);
                uint64_t v77 = v7;
                swift_retain();
                swift_retain();
                uint64_t v78 = __DataStorage._bytes.getter();
                if (v78)
                {
                  uint64_t v79 = v78;
                  uint64_t v80 = __DataStorage._offset.getter();
                  if (__OFSUB__(v76, v80)) {
                    goto LABEL_283;
                  }
                  v167 = (void *)(v79 + v76 - v80);
                }
                else
                {
                  v167 = 0;
                }
                unint64_t v30 = v185;
                uint64_t v13 = v173;
                __DataStorage._length.getter();
                if (!v34)
                {
                  __s1[0] = v10;
                  LODWORD(__s1[1]) = v187;
                  WORD2(__s1[1]) = WORD2(v187);
                  if (!v167) {
                    goto LABEL_329;
                  }
                  uint64_t v7 = v77;
                  int v118 = memcmp(v167, __s1, BYTE6(v187));
                  swift_release();
                  swift_release();
                  sub_10000C95C(v10, v187);
                  sub_10000C95C(v77, v185);
                  size_t v15 = __nc;
LABEL_213:
                  if (v118) {
                    goto LABEL_253;
                  }
                  break;
                }
                if (v34 == 1)
                {
                  if (v10 >> 32 < (int)v10) {
                    goto LABEL_295;
                  }
                  swift_retain();
                  v119 = (char *)__DataStorage._bytes.getter();
                  if (v119)
                  {
                    uint64_t v120 = __DataStorage._offset.getter();
                    if (__OFSUB__((int)v10, v120)) {
                      goto LABEL_304;
                    }
                    v119 += (int)v10 - v120;
                  }
                  uint64_t v7 = v77;
                  uint64_t v121 = __DataStorage._length.getter();
                  if (v121 >= (v10 >> 32) - (int)v10) {
                    size_t v122 = (v10 >> 32) - (int)v10;
                  }
                  else {
                    size_t v122 = v121;
                  }
                  size_t v15 = __nc;
                  if (!v167) {
                    goto LABEL_323;
                  }
                  unint64_t v30 = v185;
                  uint64_t v13 = v173;
                  if (!v119) {
                    goto LABEL_324;
                  }
                  int v118 = memcmp(v167, v119, v122);
                  sub_10000C95C(v10, v187);
                  swift_release();
                  swift_release();
                  sub_10000C95C(v10, v187);
LABEL_182:
                  sub_10000C95C(v7, v30);
                  goto LABEL_213;
                }
                uint64_t v141 = *(void *)(v10 + 16);
                uint64_t v142 = *(void *)(v10 + 24);
                swift_retain();
                swift_retain();
                v143 = (char *)__DataStorage._bytes.getter();
                if (v143)
                {
                  uint64_t v144 = __DataStorage._offset.getter();
                  if (__OFSUB__(v141, v144)) {
                    goto LABEL_303;
                  }
                  v143 += v141 - v144;
                }
                BOOL v19 = __OFSUB__(v142, v141);
                int64_t v152 = v142 - v141;
                if (v19) {
                  goto LABEL_298;
                }
                uint64_t v153 = __DataStorage._length.getter();
                if (v153 >= v152) {
                  size_t v154 = v152;
                }
                else {
                  size_t v154 = v153;
                }
                if (!v167) {
                  goto LABEL_333;
                }
                uint64_t v7 = v77;
                unint64_t v30 = v185;
                size_t v15 = __nc;
                uint64_t v13 = v173;
                if (!v143) {
                  goto LABEL_334;
                }
                int v155 = memcmp(v167, v143, v154);
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                sub_10000C95C(v10, v187);
                sub_10000C95C(v7, v185);
                if (v155) {
                  goto LABEL_253;
                }
                break;
              case 3uLL:
                memset(__s1, 0, 14);
                if (!v34) {
                  goto LABEL_168;
                }
                uint64_t v169 = v13;
                size_t __na = v15;
                if (v34 == 1)
                {
                  uint64_t v38 = (v10 >> 32) - (int)v10;
                  if (v10 >> 32 < (int)v10) {
                    goto LABEL_292;
                  }
                  sub_100013D44(v10, v187);
                  uint64_t v81 = __DataStorage._bytes.getter();
                  if (!v81) {
                    goto LABEL_322;
                  }
                  uint64_t v40 = v81;
                  uint64_t v82 = __DataStorage._offset.getter();
                  uint64_t v42 = (int)v10 - v82;
                  if (__OFSUB__((int)v10, v82)) {
                    goto LABEL_294;
                  }
LABEL_104:
                  uint64_t v83 = __DataStorage._length.getter();
                  if (v83 >= v38) {
                    size_t v84 = v38;
                  }
                  else {
                    size_t v84 = v83;
                  }
                  int v85 = memcmp(__s1, (const void *)(v40 + v42), v84);
                  sub_10000C95C(v10, v187);
                  sub_10000C95C(v7, v30);
                  size_t v15 = __na;
                  uint64_t v13 = v169;
                  if (v85) {
                    goto LABEL_253;
                  }
                  break;
                }
                uint64_t v135 = *(void *)(v10 + 16);
                uint64_t v136 = *(void *)(v10 + 24);
                sub_100038004(v10, v187);
                swift_retain();
                swift_retain();
                v131 = (char *)__DataStorage._bytes.getter();
                if (v131)
                {
                  uint64_t v137 = __DataStorage._offset.getter();
                  if (__OFSUB__(v135, v137)) {
                    goto LABEL_302;
                  }
                  v131 += v135 - v137;
                }
                BOOL v19 = __OFSUB__(v136, v135);
                int64_t v133 = v136 - v135;
                if (v19) {
                  goto LABEL_297;
                }
                uint64_t v134 = __DataStorage._length.getter();
                uint64_t v13 = v169;
                if (!v131) {
                  goto LABEL_328;
                }
LABEL_207:
                if (v134 >= v133) {
                  size_t v138 = v133;
                }
                else {
                  size_t v138 = v134;
                }
                int v139 = memcmp(__s1, v131, v138);
                swift_release();
                swift_release();
                sub_10000C95C(v10, v187);
                uint64_t v140 = v7;
                goto LABEL_232;
              default:
                __s1[0] = v7;
                LOWORD(__s1[1]) = v30;
                BYTE2(__s1[1]) = BYTE2(v30);
                BYTE3(__s1[1]) = BYTE3(v30);
                BYTE4(__s1[1]) = BYTE4(v30);
                BYTE5(__s1[1]) = BYTE5(v30);
                if (!v34)
                {
LABEL_168:
                  uint64_t __s2 = v10;
                  int v189 = v187;
                  __int16 v190 = WORD2(v187);
                  int v118 = memcmp(__s1, &__s2, BYTE6(v187));
                  goto LABEL_182;
                }
                uint64_t v169 = v13;
                size_t __na = v15;
                if (v34 == 1)
                {
                  uint64_t v38 = (v10 >> 32) - (int)v10;
                  if (v10 >> 32 < (int)v10) {
                    goto LABEL_291;
                  }
                  sub_100013D44(v10, v187);
                  uint64_t v39 = __DataStorage._bytes.getter();
                  if (!v39) {
                    goto LABEL_321;
                  }
                  uint64_t v40 = v39;
                  uint64_t v41 = __DataStorage._offset.getter();
                  uint64_t v42 = (int)v10 - v41;
                  if (__OFSUB__((int)v10, v41)) {
                    goto LABEL_293;
                  }
                  goto LABEL_104;
                }
                uint64_t v129 = *(void *)(v10 + 16);
                uint64_t v130 = *(void *)(v10 + 24);
                sub_100038004(v10, v187);
                swift_retain();
                swift_retain();
                v131 = (char *)__DataStorage._bytes.getter();
                if (v131)
                {
                  uint64_t v132 = __DataStorage._offset.getter();
                  if (__OFSUB__(v129, v132)) {
                    goto LABEL_301;
                  }
                  v131 += v129 - v132;
                }
                BOOL v19 = __OFSUB__(v130, v129);
                int64_t v133 = v130 - v129;
                if (v19) {
                  goto LABEL_296;
                }
                uint64_t v134 = __DataStorage._length.getter();
                uint64_t v13 = v169;
                if (!v131) {
                  goto LABEL_327;
                }
                goto LABEL_207;
            }
          }
LABEL_241:
          if (!v15)
          {
            sub_10000C970(v186, v184);
            sub_10000C95C(v10, v187);
            if (v13)
            {
              swift_bridgeObjectRelease();
              sub_10000C970(v183, v182);
              sub_10000C95C(v7, v30);
              goto LABEL_258;
            }
            swift_bridgeObjectRelease();
            sub_10000C970(v183, v182);
            sub_10000C95C(v7, v30);
            goto LABEL_6;
          }
          if (!v13)
          {
            sub_10000C970(v186, v184);
            sub_10000C95C(v10, v187);
            goto LABEL_256;
          }
          if (v179 == v180 && v15 == v13)
          {
            sub_10000C970(v186, v184);
            sub_10000C95C(v10, v187);
            swift_bridgeObjectRelease();
            sub_10000C970(v183, v182);
            sub_10000C95C(v7, v30);
LABEL_6:
            swift_bridgeObjectRelease();
            goto LABEL_7;
          }
          char v156 = _stringCompareWithSmolCheck(_:_:expecting:)();
          sub_10000C970(v186, v184);
          sub_10000C95C(v10, v187);
          swift_bridgeObjectRelease();
          sub_10000C970(v183, v182);
          sub_10000C95C(v7, v30);
          swift_bridgeObjectRelease();
          if ((v156 & 1) == 0) {
            return 0;
          }
LABEL_7:
          --v2;
          uint64_t v3 = v181;
          if (!v2) {
            return 1;
          }
          continue;
        }
LABEL_252:
        sub_10000C95C(v7, v30);
LABEL_253:
        sub_10000C970(v186, v184);
        uint64_t v160 = v10;
        unint64_t v161 = v187;
LABEL_255:
        sub_10000C95C(v160, v161);
LABEL_256:
        swift_bridgeObjectRelease();
        sub_10000C970(v183, v182);
        uint64_t v158 = v7;
        unint64_t v159 = v30;
LABEL_257:
        sub_10000C95C(v158, v159);
LABEL_258:
        swift_bridgeObjectRelease();
        return 0;
      case 2uLL:
        uint64_t v37 = *(void *)(v10 + 16);
        uint64_t v36 = *(void *)(v10 + 24);
        BOOL v19 = __OFSUB__(v36, v37);
        uint64_t v35 = v36 - v37;
        if (!v19) {
          goto LABEL_49;
        }
        goto LABEL_268;
      case 3uLL:
        if (!v31) {
          goto LABEL_60;
        }
        goto LABEL_252;
      default:
        uint64_t v35 = BYTE6(v187);
        goto LABEL_49;
    }
  }
}

uint64_t sub_10009BCA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2 || a1 == a2) {
      return 1;
    }
    uint64_t v3 = (uint64_t *)(a2 + 56);
    for (uint64_t i = (uint64_t *)(a1 + 56); ; i += 4)
    {
      uint64_t v6 = *(i - 1);
      uint64_t v5 = *i;
      uint64_t v8 = *(v3 - 1);
      uint64_t v7 = *v3;
      uint64_t v14 = *(i - 3);
      uint64_t v15 = *(i - 2);
      uint64_t v12 = *(v3 - 3);
      uint64_t v13 = *(v3 - 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v14 != v12 || v15 != v13) {
        break;
      }
      if (v5)
      {
        if (!v7) {
          goto LABEL_20;
        }
        if (v6 == v8 && v5 == v7)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v10 & 1) == 0) {
            return 0;
          }
        }
      }
      else if (v7)
      {
        goto LABEL_20;
      }
      v3 += 4;
      if (!--v2) {
        return 1;
      }
    }
    swift_bridgeObjectRelease();
LABEL_20:
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t sub_10009BE04@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v7 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      sub_100013D44(a2, a3);
      char v10 = (char *)__DataStorage._bytes.getter();
      if (!v10) {
        goto LABEL_8;
      }
      uint64_t v11 = __DataStorage._offset.getter();
      if (__OFSUB__((int)a2, v11)) {
LABEL_33:
      }
        __break(1u);
      v10 += (int)a2 - v11;
LABEL_8:
      uint64_t v12 = __DataStorage._length.getter();
      if (v12 >= v9) {
        size_t v13 = (a2 >> 32) - (int)a2;
      }
      else {
        size_t v13 = v12;
      }
      if (!v7)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x10009C068);
      }
      if (!v10) {
        goto LABEL_36;
      }
      int v14 = memcmp(v7, v10, v13);
      __s1 = sub_10000C970(a2, a3);
      BOOL v8 = v14 == 0;
LABEL_24:
      char v24 = v8;
LABEL_29:
      *a4 = v24;
      return __s1;
    case 2uLL:
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      uint64_t v17 = (char *)__DataStorage._bytes.getter();
      if (!v17) {
        goto LABEL_17;
      }
      uint64_t v18 = __DataStorage._offset.getter();
      if (__OFSUB__(v15, v18)) {
        goto LABEL_32;
      }
      v17 += v15 - v18;
LABEL_17:
      BOOL v19 = __OFSUB__(v16, v15);
      int64_t v20 = v16 - v15;
      if (v19) {
        goto LABEL_31;
      }
      uint64_t v21 = __DataStorage._length.getter();
      if (v21 >= v20) {
        size_t v22 = v20;
      }
      else {
        size_t v22 = v21;
      }
      if (!v7) {
        goto LABEL_37;
      }
      if (!v17) {
        goto LABEL_38;
      }
      int v23 = memcmp(v7, v17, v22);
      swift_release();
      __s1 = swift_release();
      BOOL v8 = v23 == 0;
      goto LABEL_24;
    case 3uLL:
      if (!__s1) {
        goto LABEL_39;
      }
      char v24 = 1;
      goto LABEL_29;
    default:
      uint64_t __s2 = a2;
      __int16 v26 = a3;
      char v27 = BYTE2(a3);
      char v28 = BYTE3(a3);
      char v29 = BYTE4(a3);
      char v30 = BYTE5(a3);
      if (__s1)
      {
        __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
        BOOL v8 = __s1 == 0;
        goto LABEL_24;
      }
      __break(1u);
      goto LABEL_35;
  }
}

unint64_t sub_10009C078()
{
  unint64_t result = qword_10047E338;
  if (!qword_10047E338)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E338);
  }
  return result;
}

uint64_t sub_10009C0CC(uint64_t result)
{
  uint64_t v1 = 0;
  size_t v2 = 0;
  uint64_t v3 = (char *)_swiftEmptyArrayStorage;
  uint64_t v4 = (char *)&_swiftEmptyArrayStorage[4];
  int v5 = result;
  do
  {
    if (v1 < -8)
    {
LABEL_14:
      if ((unint64_t)v1 >= 9) {
        char v10 = 0;
      }
      else {
        char v10 = 1 << v1;
      }
      BOOL v6 = __OFADD__(v1++, 1);
      if (!v6) {
        goto LABEL_18;
      }
LABEL_34:
      __break(1u);
      break;
    }
    while (v1 < 0)
    {
      int v7 = 0;
      BOOL v9 = __OFADD__(v1, 8);
      if ((unint64_t)v1 <= 0xFFFFFFFFFFFFFFF8)
      {
        char v10 = 0;
        uint64_t v1 = -7;
        if (v9) {
          goto LABEL_34;
        }
        goto LABEL_18;
      }
LABEL_6:
      if ((v7 & ~v5) == 0) {
        goto LABEL_14;
      }
      uint64_t v8 = v1 + 1;
      if (__OFADD__(v1, 1))
      {
        __break(1u);
        goto LABEL_40;
      }
      ++v1;
      if ((unint64_t)(v8 - 9) < 0xFFFFFFFFFFFFFFEFLL)
      {
        uint64_t v1 = v8;
        goto LABEL_14;
      }
    }
    BOOL v6 = __OFSUB__(v1, 8);
    if ((unint64_t)v1 < 8)
    {
      int v7 = 1 << v1;
      goto LABEL_6;
    }
    char v10 = 0;
    uint64_t v1 = 9;
    if (v6) {
      goto LABEL_34;
    }
LABEL_18:
    if (!v2)
    {
      unint64_t v11 = *((void *)v3 + 3);
      if ((uint64_t)((v11 >> 1) + 0x4000000000000000) >= 0)
      {
        int64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
        if (v12 <= 1) {
          uint64_t v13 = 1;
        }
        else {
          uint64_t v13 = v12;
        }
        sub_100010BCC(&qword_10047E2B8);
        int v14 = (char *)swift_allocObject();
        size_t v15 = 2 * j__malloc_size(v14) - 64;
        *((void *)v14 + 2) = v13;
        *((void *)v14 + 3) = v15;
        uint64_t v16 = v14 + 32;
        size_t v17 = *((void *)v3 + 3) >> 1;
        if (*((void *)v3 + 2))
        {
          uint64_t v18 = v3 + 32;
          if (v14 != v3 || v16 >= &v18[v17]) {
            memmove(v14 + 32, v18, v17);
          }
          *((void *)v3 + 2) = 0;
        }
        uint64_t v4 = &v16[v17];
        size_t v2 = (v15 >> 1) - v17;
        unint64_t result = swift_release();
        uint64_t v3 = v14;
        goto LABEL_29;
      }
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
LABEL_29:
    BOOL v6 = __OFSUB__(v2--, 1);
    if (v6)
    {
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    *v4++ = v10;
  }
  while (v1 < 8);
  unint64_t v19 = *((void *)v3 + 3);
  if (v19 >= 2)
  {
    unint64_t v20 = v19 >> 1;
    BOOL v6 = __OFSUB__(v20, v2);
    unint64_t v21 = v20 - v2;
    if (v6) {
      goto LABEL_42;
    }
    *((void *)v3 + 2) = v21;
  }
  return (uint64_t)v3;
}

unint64_t *sub_10009C290(unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  if (!a2)
  {
LABEL_5:
    a3 = 0;
    goto LABEL_6;
  }
  if (!a3)
  {
LABEL_6:
    unint64_t v7 = a4;
LABEL_7:
    *unint64_t result = a4;
    result[1] = a5;
    result[2] = a6;
    result[3] = v7;
    return (unint64_t *)a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (a4 != a5)
    {
      unint64_t v12 = a6;
      unint64_t v8 = a4 + 16;
      if (a4 >= 0xFFFFFFFFFFFFFFF0)
      {
LABEL_14:
        __break(1u);
LABEL_15:
        a3 = v6 + 1;
        unint64_t v7 = a5;
      }
      else
      {
        uint64_t v6 = 0;
        unsigned int v9 = *((unsigned __int8 *)&v12 + (a4 >> 7));
        unint64_t v7 = a4;
        while (1)
        {
          uint64_t v10 = (v7 >> 4) & 7;
          unint64_t v7 = v8;
          *(unsigned char *)(a2 + v6) = (v9 >> v10) & 1;
          if (a3 - 1 == v6) {
            break;
          }
          if (v8 == a5) {
            goto LABEL_15;
          }
          unint64_t v12 = a6;
          ++v6;
          unsigned int v9 = *((unsigned __int8 *)&v12 + (v8 >> 7));
          BOOL v11 = __CFADD__(v8, 16);
          v8 += 16;
          if (v11) {
            goto LABEL_14;
          }
        }
      }
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

unint64_t sub_10009C3B4(unint64_t result, unsigned char *a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  char v6 = a6;
  unint64_t v9 = result;
  unint64_t v10 = HIBYTE(a6);
  unint64_t v11 = HIWORD(a6);
  unint64_t v12 = a6 >> 40;
  unint64_t v13 = HIDWORD(a6);
  unint64_t v14 = a6 >> 24;
  unint64_t v15 = a6 >> 16;
  unint64_t v16 = a6 >> 8;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
LABEL_6:
    unint64_t v17 = a4;
LABEL_7:
    *(void *)unint64_t v9 = a4;
    *(void *)(v9 + 8) = a5;
    *(unsigned char *)(v9 + 16) = v6;
    *(unsigned char *)(v9 + 17) = v16;
    *(unsigned char *)(v9 + 18) = v15;
    *(unsigned char *)(v9 + 19) = v14;
    *(unsigned char *)(v9 + 20) = v13;
    *(unsigned char *)(v9 + 21) = v12;
    *(unsigned char *)(v9 + 22) = v11;
    *(unsigned char *)(v9 + 23) = v10;
    *(void *)(v9 + 24) = v17;
    return a3;
  }
  if (a3 < 0) {
    goto LABEL_21;
  }
  if (a4 == a5)
  {
LABEL_5:
    a3 = 0;
    goto LABEL_6;
  }
  unint64_t v24 = HIBYTE(a6);
  uint64_t v25 = a3;
  unint64_t v26 = a6;
  unint64_t v23 = HIWORD(a6);
  unint64_t result = NANIntervalDuration.timeUnits.getter(0);
  if (!result) {
    goto LABEL_22;
  }
  a3 = v25;
  if (((a4 / result) & 0x8000000000000000) != 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  unint64_t v17 = a4 + 128;
  LOBYTE(v11) = v23;
  LOBYTE(v10) = v24;
  if (a4 < 0xFFFFFFFFFFFFFF80)
  {
    *a2 = *((unsigned char *)&v26 + ((a4 / result) >> 3));
    uint64_t v19 = v25 - 1;
    if (v25 == 1) {
      goto LABEL_7;
    }
    uint64_t v20 = 0;
    unint64_t v21 = (char *)&v26 + (v17 >> 7);
    while (v19 != v20)
    {
      if (a5 == v17)
      {
        a3 = v20 + 1;
        unint64_t v17 = a5;
        goto LABEL_7;
      }
      LOBYTE(v26) = v6;
      BYTE1(v26) = v16;
      BYTE2(v26) = v15;
      BYTE3(v26) = v14;
      BYTE4(v26) = v13;
      BYTE5(v26) = v12;
      BYTE6(v26) = v23;
      HIBYTE(v26) = v24;
      unint64_t v22 = v17 + 128;
      if (v17 >= 0xFFFFFFFFFFFFFF80) {
        goto LABEL_20;
      }
      a2[v20 + 1] = v21[v20];
      ++v20;
      v17 += 128;
      if (v19 == v20)
      {
        unint64_t v17 = v22;
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_10009C560(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(type metadata accessor for LongTermPairingKeys.PublicIdentity(0) - 8);
  __chkstk_darwin();
  unint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin();
  unint64_t v13 = (char *)&v28 - v12;
  uint64_t v33 = a4;
  uint64_t v16 = *(void *)(a4 + 64);
  uint64_t v15 = a4 + 64;
  uint64_t v14 = v16;
  uint64_t v17 = -1 << *(unsigned char *)(v15 - 32);
  if (-v17 < 64) {
    uint64_t v18 = ~(-1 << -(char)v17);
  }
  else {
    uint64_t v18 = -1;
  }
  unint64_t v19 = v18 & v14;
  if (!a2)
  {
    int64_t v20 = 0;
    a3 = 0;
LABEL_38:
    *a1 = v33;
    a1[1] = v15;
    a1[2] = ~v17;
    a1[3] = v20;
    a1[4] = v19;
    return a3;
  }
  if (!a3)
  {
    int64_t v20 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v30 = -1 << *(unsigned char *)(v15 - 32);
  uint64_t v31 = a1;
  int64_t v20 = 0;
  uint64_t v21 = 0;
  int64_t v32 = (unint64_t)(63 - v17) >> 6;
  int64_t v29 = v32 - 1;
  if (!v19) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v22 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  unint64_t v23 = v22 | (v20 << 6);
  while (1)
  {
    ++v21;
    uint64_t v27 = *(void *)(v8 + 72);
    sub_1000A6778(*(void *)(v33 + 56) + v27 * v23, (uint64_t)v10, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    sub_1000A67E0((uint64_t)v10, (uint64_t)v13);
    uint64_t result = sub_1000A67E0((uint64_t)v13, a2);
    if (v21 == a3) {
      goto LABEL_37;
    }
    a2 += v27;
    if (v19) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v24 >= v32) {
      goto LABEL_32;
    }
    unint64_t v25 = *(void *)(v15 + 8 * v24);
    if (!v25) {
      break;
    }
LABEL_18:
    unint64_t v19 = (v25 - 1) & v25;
    unint64_t v23 = __clz(__rbit64(v25)) + (v24 << 6);
    int64_t v20 = v24;
  }
  v20 += 2;
  if (v24 + 1 >= v32)
  {
    unint64_t v19 = 0;
    int64_t v20 = v24;
    goto LABEL_36;
  }
  unint64_t v25 = *(void *)(v15 + 8 * v20);
  if (v25) {
    goto LABEL_14;
  }
  int64_t v26 = v24 + 2;
  if (v24 + 2 >= v32) {
    goto LABEL_32;
  }
  unint64_t v25 = *(void *)(v15 + 8 * v26);
  if (v25) {
    goto LABEL_17;
  }
  int64_t v20 = v24 + 3;
  if (v24 + 3 >= v32)
  {
    unint64_t v19 = 0;
    int64_t v20 = v24 + 2;
    goto LABEL_36;
  }
  unint64_t v25 = *(void *)(v15 + 8 * v20);
  if (v25)
  {
LABEL_14:
    int64_t v24 = v20;
    goto LABEL_18;
  }
  int64_t v26 = v24 + 4;
  if (v24 + 4 >= v32)
  {
LABEL_32:
    unint64_t v19 = 0;
LABEL_36:
    a3 = v21;
LABEL_37:
    uint64_t v17 = v30;
    a1 = v31;
    goto LABEL_38;
  }
  unint64_t v25 = *(void *)(v15 + 8 * v26);
  if (v25)
  {
LABEL_17:
    int64_t v24 = v26;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v24 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v24 >= v32)
    {
      unint64_t v19 = 0;
      int64_t v20 = v29;
      goto LABEL_36;
    }
    unint64_t v25 = *(void *)(v15 + 8 * v24);
    ++v26;
    if (v25) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void *sub_10009C840(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 64;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    uint64_t v13 = *(void *)(a4 + 48) + 8 * v12;
    int v14 = *(_DWORD *)v13;
    char v15 = *(unsigned char *)(*(void *)(a4 + 56) + v12);
    LOWORD(v13) = *(_WORD *)(v13 + 4);
    *(_DWORD *)a2 = v14;
    *(_WORD *)(a2 + 4) = v13;
    *(unsigned char *)(a2 + 6) = v15;
    a2 += 8;
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  int64_t v16 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v16 >= v10) {
    goto LABEL_30;
  }
  unint64_t v17 = *(void *)(v4 + 8 * v16);
  if (v17) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v16 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v16;
    goto LABEL_34;
  }
  unint64_t v17 = *(void *)(v4 + 8 * v8);
  if (v17)
  {
LABEL_15:
    int64_t v16 = v8;
LABEL_19:
    unint64_t v19 = __clz(__rbit64(v17));
    unint64_t v7 = (v17 - 1) & v17;
    unint64_t v12 = v19 + (v16 << 6);
    int64_t v8 = v16;
    goto LABEL_8;
  }
  int64_t v18 = v16 + 2;
  if (v16 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v17 = *(void *)(v4 + 8 * v18);
  if (v17)
  {
LABEL_18:
    int64_t v16 = v18;
    goto LABEL_19;
  }
  int64_t v8 = v16 + 3;
  if (v16 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v16 + 2;
    goto LABEL_34;
  }
  unint64_t v17 = *(void *)(v4 + 8 * v8);
  if (v17) {
    goto LABEL_15;
  }
  int64_t v18 = v16 + 4;
  if (v16 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v4 + 8 * v18);
  if (v17) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v16 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v16 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    unint64_t v17 = *(void *)(v4 + 8 * v16);
    ++v18;
    if (v17) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

void *sub_10009C9EC(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 64;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    uint64_t v13 = *(void *)(a4 + 48) + 8 * v12;
    int v14 = *(_DWORD *)v13;
    LOWORD(v13) = *(_WORD *)(v13 + 4);
    uint64_t v15 = *(void *)(a4 + 56) + 24 * v12;
    long long v16 = *(_OWORD *)v15;
    uint64_t v17 = *(void *)(v15 + 16);
    *(_DWORD *)a2 = v14;
    *(_WORD *)(a2 + 4) = v13;
    *(_OWORD *)(a2 + 8) = v16;
    *(void *)(a2 + 24) = v17;
    a2 += 32;
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  int64_t v18 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v18 >= v10) {
    goto LABEL_30;
  }
  unint64_t v19 = *(void *)(v4 + 8 * v18);
  if (v19) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v18 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v18;
    goto LABEL_34;
  }
  unint64_t v19 = *(void *)(v4 + 8 * v8);
  if (v19)
  {
LABEL_15:
    int64_t v18 = v8;
LABEL_19:
    unint64_t v21 = __clz(__rbit64(v19));
    unint64_t v7 = (v19 - 1) & v19;
    unint64_t v12 = v21 + (v18 << 6);
    int64_t v8 = v18;
    goto LABEL_8;
  }
  int64_t v20 = v18 + 2;
  if (v18 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v19 = *(void *)(v4 + 8 * v20);
  if (v19)
  {
LABEL_18:
    int64_t v18 = v20;
    goto LABEL_19;
  }
  int64_t v8 = v18 + 3;
  if (v18 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v18 + 2;
    goto LABEL_34;
  }
  unint64_t v19 = *(void *)(v4 + 8 * v8);
  if (v19) {
    goto LABEL_15;
  }
  int64_t v20 = v18 + 4;
  if (v18 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  unint64_t v19 = *(void *)(v4 + 8 * v20);
  if (v19) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v18 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v18 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    unint64_t v19 = *(void *)(v4 + 8 * v18);
    ++v20;
    if (v19) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

void *sub_10009CBA8(void *result, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a2 - (void)result;
  if (a2 < (unint64_t)result)
  {
    __break(1u);
  }
  else
  {
    if (v3 <= 0x7F) {
      return _swiftEmptyArrayStorage;
    }
    unint64_t v7 = (unint64_t)result;
    uint64_t v8 = v3 >> 7;
    sub_100010BCC(&qword_10047E6A8);
    uint64_t v4 = swift_allocObject();
    size_t v9 = j__malloc_size((const void *)v4);
    *(void *)(v4 + 16) = v8;
    *(void *)(v4 + 24) = 2 * v9 - 64;
    uint64_t result = (void *)sub_10009C3B4((unint64_t)&v10, (unsigned char *)(v4 + 32), v8, v7, a2, a3);
    if (result == (void *)v8) {
      return (void *)v4;
    }
  }
  __break(1u);
  return result;
}

unint64_t *sub_10009CC64(unint64_t *result, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a2 - (void)result;
  if (a2 < (unint64_t)result)
  {
    __break(1u);
  }
  else
  {
    if (v3 <= 0xF) {
      return _swiftEmptyArrayStorage;
    }
    unint64_t v7 = (unint64_t)result;
    uint64_t v8 = v3 >> 4;
    sub_100010BCC(&qword_10047E6A0);
    uint64_t v4 = (void *)swift_allocObject();
    size_t v9 = j__malloc_size(v4);
    v4[2] = v8;
    v4[3] = 2 * v9 - 64;
    uint64_t result = sub_10009C290(v10, (uint64_t)(v4 + 4), v8, v7, a2, a3);
    if (result == (unint64_t *)v8) {
      return v4;
    }
  }
  __break(1u);
  return result;
}

void *sub_10009CD20(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100010BCC(&qword_10047E1E0);
  unint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 25;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 3);
  uint64_t v6 = sub_1001B3304(&v8, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v6 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

void *sub_10009CDE0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100010BCC(&qword_10047E1B8);
  uint64_t v3 = *(void *)(type metadata accessor for LongTermPairingKeys.PublicIdentity(0) - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (void *)swift_allocObject();
  uint64_t result = (void *)j__malloc_size(v6);
  if (v4)
  {
    if ((void *)((char *)result - v5) != (void *)0x8000000000000000 || v4 != -1)
    {
      _OWORD v6[2] = v1;
      v6[3] = 2 * ((uint64_t)((uint64_t)result - v5) / v4);
      uint64_t v9 = sub_10009C560(&v10, (uint64_t)v6 + v5, v1, a1);
      swift_bridgeObjectRetain();
      sub_10006D44C();
      if (v9 == v1) {
        return v6;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_10009CF34(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100010BCC(&qword_10047E2A0);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 25;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 3);
  uint64_t v6 = sub_10009C840(&v8, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  sub_10006D44C();
  if (v6 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

void *sub_10009D01C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100010BCC(&qword_10047E298);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 1;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 5);
  uint64_t v6 = sub_10009C9EC(&v8, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  sub_10006D44C();
  if (v6 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

char *sub_10009D104(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return (char *)_swiftEmptyArrayStorage;
    }
    if (v5 <= 0)
    {
      uint64_t v8 = (char *)_swiftEmptyArrayStorage;
      if (v4 != a3)
      {
LABEL_5:
        if (v5 < 0) {
          goto LABEL_17;
        }
        uint64_t v10 = v8 + 32;
        unint64_t v11 = (char *)(a2 - a3 + 8 * a3);
        if (v11 < &v8[7 * v5 + 32] && v10 < &v11[7 * v5]) {
          goto LABEL_17;
        }
        memcpy(v10, v11, 7 * v5);
        return v8;
      }
    }
    else
    {
      sub_100010BCC((uint64_t *)&unk_100487070);
      uint64_t v8 = (char *)swift_allocObject();
      size_t v9 = j__malloc_size(v8);
      *((void *)v8 + 2) = v5;
      *((void *)v8 + 3) = 2 * ((uint64_t)(v9 - 32) / 7);
      if (v4 != a3) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_17:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10009D288(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void *))
{
  uint64_t v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = a2(v6);
  }
  uint64_t v7 = *(void *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  uint64_t result = a3(v9);
  *a1 = v6;
  return result;
}

Swift::Int sub_10009D30C(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_141;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v85 = *a1;
      uint64_t v86 = *a1 + 8;
      uint64_t v87 = -1;
      for (uint64_t i = 1; i != v3; ++i)
      {
        uint64_t v89 = v86;
        uint64_t v90 = v87;
        do
        {
          int v91 = *(_DWORD *)v89;
          if (*(_DWORD *)v89 >= *(_DWORD *)(v89 - 8)) {
            break;
          }
          if (!v85) {
            goto LABEL_145;
          }
          __int16 v92 = *(_WORD *)(v89 + 4);
          char v93 = *(unsigned char *)(v89 + 6);
          *(void *)uint64_t v89 = *(void *)(v89 - 8);
          *(_DWORD *)(v89 - 8) = v91;
          *(_WORD *)(v89 - 4) = v92;
          *(unsigned char *)(v89 - 2) = v93;
          v89 -= 8;
        }
        while (!__CFADD__(v90++, 1));
        --v87;
        v86 += 8;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_150;
  }
  Swift::Int v6 = result;
  uint64_t v110 = v1;
  uint64_t v103 = a1;
  if (v3 < 2)
  {
    size_t v9 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v13 = _swiftEmptyArrayStorage[2];
      unint64_t v12 = (char *)_swiftEmptyArrayStorage;
LABEL_107:
      int64_t v95 = v12;
      uint64_t v105 = v9;
      if (v13 >= 2)
      {
        uint64_t v96 = *v103;
        do
        {
          unint64_t v97 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_136;
          }
          if (!v96) {
            goto LABEL_149;
          }
          uint64_t v98 = v95;
          uint64_t v99 = *(void *)&v95[16 * v97 + 32];
          uint64_t v100 = *(void *)&v95[16 * v13 + 24];
          sub_10009E138((char *)(v96 + 8 * v99), (char *)(v96 + 8 * *(void *)&v95[16 * v13 + 16]), v96 + 8 * v100, __dst);
          if (v110) {
            break;
          }
          if (v100 < v99) {
            goto LABEL_137;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v98 = sub_100114E40((uint64_t)v98);
          }
          if (v97 >= *((void *)v98 + 2)) {
            goto LABEL_138;
          }
          int v101 = &v98[16 * v97 + 32];
          *(void *)int v101 = v99;
          *((void *)v101 + 1) = v100;
          unint64_t v102 = *((void *)v98 + 2);
          if (v13 > v102) {
            goto LABEL_139;
          }
          memmove(&v98[16 * v13 + 16], &v98[16 * v13 + 32], 16 * (v102 - v13));
          int64_t v95 = v98;
          *((void *)v98 + 2) = v102 - 1;
          unint64_t v13 = v102 - 1;
        }
        while (v102 > 2);
      }
LABEL_97:
      swift_bridgeObjectRelease();
      v105[2] = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v105 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    sub_100010BCC(&qword_10047E6F0);
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    uint64_t v105 = (void *)v8;
    __dst = (char *)(v8 + 32);
  }
  Swift::Int v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v104 = *a1 + 16;
  unint64_t v12 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v106 = v6;
  Swift::Int v107 = v3;
  uint64_t v108 = v11;
  while (1)
  {
    Swift::Int v14 = v10++;
    if (v10 < v3)
    {
      unsigned int v15 = *(_DWORD *)(v11 + 8 * v10);
      uint64_t v16 = 8 * v14;
      unsigned int v17 = *(_DWORD *)(v11 + 8 * v14);
      Swift::Int v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        int64_t v18 = (_DWORD *)(v104 + 8 * v14);
        while (v15 < v17 != *v18 >= *(v18 - 2))
        {
          v18 += 2;
          if (v3 == ++v10)
          {
            Swift::Int v10 = v3;
            break;
          }
        }
      }
      if (v15 < v17)
      {
        if (v10 < v14) {
          goto LABEL_142;
        }
        if (v14 < v10)
        {
          uint64_t v19 = 8 * v10 - 8;
          Swift::Int v20 = v10;
          Swift::Int v21 = v14;
          do
          {
            if (v21 != --v20)
            {
              if (!v11) {
                goto LABEL_148;
              }
              unint64_t v23 = (void *)(v11 + v16);
              int v24 = *(_DWORD *)(v11 + v16);
              char v25 = *(unsigned char *)(v11 + v16 + 4);
              char v26 = *(unsigned char *)(v11 + v16 + 5);
              char v27 = *(unsigned char *)(v11 + v16 + 6);
              if (v16 != v19 || (unint64_t)v23 >= v11 + v19 + 8) {
                *unint64_t v23 = *(void *)(v11 + v19);
              }
              uint64_t v22 = v11 + v19;
              *(_DWORD *)uint64_t v22 = v24;
              *(unsigned char *)(v22 + 4) = v25;
              *(unsigned char *)(v22 + 5) = v26;
              *(unsigned char *)(v22 + 6) = v27;
            }
            ++v21;
            v19 -= 8;
            v16 += 8;
          }
          while (v21 < v20);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_50;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_140;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_50;
    }
    Swift::Int v28 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_143;
    }
    if (v28 >= v3) {
      Swift::Int v28 = v3;
    }
    if (v28 < v14) {
      break;
    }
    if (v10 != v28)
    {
      int64_t v29 = (int *)(v11 + 8 * v10);
      do
      {
        uint64_t v30 = v29;
        Swift::Int v31 = v14;
        do
        {
          int v32 = *v30;
          if (*v30 >= *(v30 - 2)) {
            break;
          }
          if (!v11) {
            goto LABEL_146;
          }
          __int16 v33 = *((_WORD *)v30 + 2);
          char v34 = *((unsigned char *)v30 + 6);
          *(void *)uint64_t v30 = *((void *)v30 - 1);
          *(v30 - 2) = v32;
          *((_WORD *)v30 - 2) = v33;
          *((unsigned char *)v30 - 2) = v34;
          ++v31;
          v30 -= 2;
        }
        while (v10 != v31);
        ++v10;
        v29 += 2;
      }
      while (v10 != v28);
      Swift::Int v10 = v28;
    }
LABEL_50:
    if (v10 < v14) {
      goto LABEL_135;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v12 = sub_100114B14(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v36 = *((void *)v12 + 2);
    unint64_t v35 = *((void *)v12 + 3);
    unint64_t v13 = v36 + 1;
    uint64_t v11 = v108;
    if (v36 >= v35 >> 1)
    {
      uint64_t v11 = v108;
      unint64_t v12 = sub_100114B14((char *)(v35 > 1), v36 + 1, 1, v12);
    }
    *((void *)v12 + 2) = v13;
    uint64_t v37 = v12 + 32;
    uint64_t v38 = &v12[16 * v36 + 32];
    *(void *)uint64_t v38 = v14;
    *((void *)v38 + 1) = v10;
    if (v36)
    {
      while (1)
      {
        unint64_t v39 = v13 - 1;
        if (v13 >= 4)
        {
          uint64_t v44 = &v37[16 * v13];
          uint64_t v45 = *((void *)v44 - 8);
          uint64_t v46 = *((void *)v44 - 7);
          BOOL v50 = __OFSUB__(v46, v45);
          uint64_t v47 = v46 - v45;
          if (v50) {
            goto LABEL_124;
          }
          uint64_t v49 = *((void *)v44 - 6);
          uint64_t v48 = *((void *)v44 - 5);
          BOOL v50 = __OFSUB__(v48, v49);
          uint64_t v42 = v48 - v49;
          char v43 = v50;
          if (v50) {
            goto LABEL_125;
          }
          unint64_t v51 = v13 - 2;
          uint64_t v52 = &v37[16 * v13 - 32];
          uint64_t v54 = *(void *)v52;
          uint64_t v53 = *((void *)v52 + 1);
          BOOL v50 = __OFSUB__(v53, v54);
          uint64_t v55 = v53 - v54;
          if (v50) {
            goto LABEL_127;
          }
          BOOL v50 = __OFADD__(v42, v55);
          uint64_t v56 = v42 + v55;
          if (v50) {
            goto LABEL_130;
          }
          if (v56 >= v47)
          {
            uint64_t v74 = &v37[16 * v39];
            uint64_t v76 = *(void *)v74;
            uint64_t v75 = *((void *)v74 + 1);
            BOOL v50 = __OFSUB__(v75, v76);
            uint64_t v77 = v75 - v76;
            if (v50) {
              goto LABEL_134;
            }
            BOOL v67 = v42 < v77;
            goto LABEL_87;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v68 = *((void *)v12 + 4);
            uint64_t v69 = *((void *)v12 + 5);
            BOOL v50 = __OFSUB__(v69, v68);
            uint64_t v61 = v69 - v68;
            char v62 = v50;
            goto LABEL_81;
          }
          uint64_t v41 = *((void *)v12 + 4);
          uint64_t v40 = *((void *)v12 + 5);
          BOOL v50 = __OFSUB__(v40, v41);
          uint64_t v42 = v40 - v41;
          char v43 = v50;
        }
        if (v43) {
          goto LABEL_126;
        }
        unint64_t v51 = v13 - 2;
        size_t v57 = &v37[16 * v13 - 32];
        uint64_t v59 = *(void *)v57;
        uint64_t v58 = *((void *)v57 + 1);
        BOOL v60 = __OFSUB__(v58, v59);
        uint64_t v61 = v58 - v59;
        char v62 = v60;
        if (v60) {
          goto LABEL_129;
        }
        uint64_t v63 = &v37[16 * v39];
        uint64_t v65 = *(void *)v63;
        uint64_t v64 = *((void *)v63 + 1);
        BOOL v50 = __OFSUB__(v64, v65);
        uint64_t v66 = v64 - v65;
        if (v50) {
          goto LABEL_132;
        }
        if (__OFADD__(v61, v66)) {
          goto LABEL_133;
        }
        if (v61 + v66 >= v42)
        {
          BOOL v67 = v42 < v66;
LABEL_87:
          if (v67) {
            unint64_t v39 = v51;
          }
          goto LABEL_89;
        }
LABEL_81:
        if (v62) {
          goto LABEL_128;
        }
        uint64_t v70 = &v37[16 * v39];
        uint64_t v72 = *(void *)v70;
        uint64_t v71 = *((void *)v70 + 1);
        BOOL v50 = __OFSUB__(v71, v72);
        uint64_t v73 = v71 - v72;
        if (v50) {
          goto LABEL_131;
        }
        if (v73 < v61) {
          goto LABEL_15;
        }
LABEL_89:
        unint64_t v78 = v39 - 1;
        if (v39 - 1 >= v13)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }
        if (!v11) {
          goto LABEL_147;
        }
        uint64_t v79 = v12;
        uint64_t v80 = &v37[16 * v78];
        uint64_t v81 = *(void *)v80;
        uint64_t v82 = &v37[16 * v39];
        uint64_t v83 = *((void *)v82 + 1);
        sub_10009E138((char *)(v11 + 8 * *(void *)v80), (char *)(v11 + 8 * *(void *)v82), v11 + 8 * v83, __dst);
        if (v110) {
          goto LABEL_97;
        }
        if (v83 < v81) {
          goto LABEL_121;
        }
        if (v39 > *((void *)v79 + 2)) {
          goto LABEL_122;
        }
        *(void *)uint64_t v80 = v81;
        *(void *)&v37[16 * v78 + 8] = v83;
        unint64_t v84 = *((void *)v79 + 2);
        if (v39 >= v84) {
          goto LABEL_123;
        }
        unint64_t v12 = v79;
        unint64_t v13 = v84 - 1;
        memmove(&v37[16 * v39], v82 + 16, 16 * (v84 - 1 - v39));
        *((void *)v79 + 2) = v84 - 1;
        uint64_t v11 = v108;
        if (v84 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_15:
    Swift::Int v6 = v106;
    Swift::Int v3 = v107;
    if (v10 >= v107)
    {
      size_t v9 = v105;
      goto LABEL_107;
    }
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int sub_10009DA20(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_136;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v93 = 0;
      uint64_t v94 = *a1;
      for (uint64_t i = 1; i != v3; ++i)
      {
        unsigned int v96 = *(_DWORD *)(v94 + 32 * i);
        uint64_t v97 = v93;
        do
        {
          uint64_t v98 = (_OWORD *)(v94 + v97);
          if (v96 >= *(_DWORD *)(v94 + v97)) {
            break;
          }
          if (!v94) {
            goto LABEL_140;
          }
          uint64_t v99 = v94 + v97;
          __int16 v100 = *(_WORD *)(v94 + v97 + 36);
          long long v101 = *(_OWORD *)(v94 + v97 + 40);
          uint64_t v102 = *(void *)(v94 + v97 + 56);
          long long v103 = v98[1];
          *(_OWORD *)(v94 + v97 + 32) = *v98;
          *(_OWORD *)(v94 + v97 + 48) = v103;
          *(_DWORD *)uint64_t v99 = v96;
          *(_WORD *)(v99 + 4) = v100;
          *(_OWORD *)(v99 + 8) = v101;
          *(void *)(v99 + 24) = v102;
          v97 -= 32;
        }
        while (v97 != -32);
        v93 += 32;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_145;
  }
  Swift::Int v6 = result;
  char v113 = a1;
  if (v3 < 2)
  {
    size_t v9 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v13 = _swiftEmptyArrayStorage[2];
      unint64_t v12 = (char *)_swiftEmptyArrayStorage;
LABEL_102:
      uint64_t v104 = v12;
      int64_t v115 = v9;
      if (v13 >= 2)
      {
        uint64_t v105 = *v113;
        do
        {
          unint64_t v106 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_131;
          }
          if (!v105) {
            goto LABEL_144;
          }
          Swift::Int v107 = v104;
          uint64_t v108 = *(void *)&v104[16 * v106 + 32];
          uint64_t v109 = *(void *)&v104[16 * v13 + 24];
          sub_10009E3B8((char *)(v105 + 32 * v108), (char *)(v105 + 32 * *(void *)&v104[16 * v13 + 16]), v105 + 32 * v109, __dst);
          if (v1) {
            break;
          }
          if (v109 < v108) {
            goto LABEL_132;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            Swift::Int v107 = sub_100114E40((uint64_t)v107);
          }
          if (v106 >= *((void *)v107 + 2)) {
            goto LABEL_133;
          }
          uint64_t v110 = &v107[16 * v106 + 32];
          *(void *)uint64_t v110 = v108;
          *((void *)v110 + 1) = v109;
          unint64_t v111 = *((void *)v107 + 2);
          if (v13 > v111) {
            goto LABEL_134;
          }
          memmove(&v107[16 * v13 + 16], &v107[16 * v13 + 32], 16 * (v111 - v13));
          uint64_t v104 = v107;
          *((void *)v107 + 2) = v111 - 1;
          unint64_t v13 = v111 - 1;
        }
        while (v111 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      v115[2] = 0;
      return swift_bridgeObjectRelease();
    }
    int64_t v115 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    sub_100010BCC(&qword_10047E6E8);
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    int64_t v115 = (void *)v8;
    __dst = (char *)(v8 + 32);
  }
  Swift::Int v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v114 = *a1 + 64;
  uint64_t v112 = *a1 + 24;
  unint64_t v12 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v116 = v6;
  Swift::Int v117 = v3;
  uint64_t v118 = v11;
  while (1)
  {
    Swift::Int v14 = v10++;
    if (v10 < v3)
    {
      unsigned int v15 = *(_DWORD *)(v11 + 32 * v10);
      uint64_t v16 = 32 * v14;
      unsigned int v17 = *(_DWORD *)(v11 + 32 * v14);
      Swift::Int v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        int64_t v18 = (unsigned int *)(v114 + 32 * v14);
        unsigned int v19 = v15;
        while (1)
        {
          unsigned int v21 = *v18;
          v18 += 8;
          unsigned int v20 = v21;
          if (v15 < v17 == v21 >= v19) {
            break;
          }
          ++v10;
          unsigned int v19 = v20;
          if (v3 == v10)
          {
            Swift::Int v10 = v3;
            break;
          }
        }
      }
      if (v15 < v17)
      {
        if (v10 < v14) {
          goto LABEL_137;
        }
        if (v14 < v10)
        {
          uint64_t v22 = 32 * v10;
          Swift::Int v23 = v10;
          Swift::Int v24 = v14;
          do
          {
            if (v24 != --v23)
            {
              if (!v11) {
                goto LABEL_143;
              }
              char v25 = (_OWORD *)(v11 + v16);
              int v26 = *(_DWORD *)(v11 + v16);
              uint64_t v27 = v11 + v22;
              __int16 v28 = *(_WORD *)(v11 + v16 + 4);
              long long v29 = *(_OWORD *)(v11 + v16 + 8);
              uint64_t v30 = *(void *)(v11 + v16 + 24);
              long long v31 = *(_OWORD *)(v11 + v22 - 16);
              *char v25 = *(_OWORD *)(v11 + v22 - 32);
              v25[1] = v31;
              *(_DWORD *)(v27 - 32) = v26;
              *(_WORD *)(v27 - 28) = v28;
              *(_OWORD *)(v27 - 24) = v29;
              *(void *)(v27 - 8) = v30;
            }
            ++v24;
            v22 -= 32;
            v16 += 32;
          }
          while (v24 < v23);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_135;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_46;
    }
    Swift::Int v32 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_138;
    }
    if (v32 >= v3) {
      Swift::Int v32 = v3;
    }
    if (v32 < v14) {
      break;
    }
    if (v10 != v32)
    {
      uint64_t v33 = v112 + 32 * v10;
      do
      {
        unsigned int v34 = *(_DWORD *)(v11 + 32 * v10);
        Swift::Int v35 = v14;
        uint64_t v36 = v33;
        do
        {
          if (v34 >= *(_DWORD *)(v36 - 56)) {
            break;
          }
          if (!v11) {
            goto LABEL_141;
          }
          uint64_t v37 = (_OWORD *)(v36 - 24);
          long long v39 = *(_OWORD *)(v36 - 56);
          long long v38 = *(_OWORD *)(v36 - 40);
          *(void *)(v36 - 32) = *(void *)v36;
          v36 -= 32;
          __int16 v40 = *(_WORD *)(v36 + 12);
          long long v41 = *(_OWORD *)(v36 + 16);
          *uint64_t v37 = v39;
          v37[1] = v38;
          *(_DWORD *)(v36 - 24) = v34;
          *(_WORD *)(v36 - 20) = v40;
          *(_OWORD *)(v36 - 16) = v41;
          ++v35;
        }
        while (v10 != v35);
        ++v10;
        v33 += 32;
      }
      while (v10 != v32);
      Swift::Int v10 = v32;
    }
LABEL_46:
    if (v10 < v14) {
      goto LABEL_130;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v12 = sub_100114B14(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v43 = *((void *)v12 + 2);
    unint64_t v42 = *((void *)v12 + 3);
    unint64_t v13 = v43 + 1;
    uint64_t v11 = v118;
    if (v43 >= v42 >> 1)
    {
      __int16 v92 = sub_100114B14((char *)(v42 > 1), v43 + 1, 1, v12);
      uint64_t v11 = v118;
      unint64_t v12 = v92;
    }
    *((void *)v12 + 2) = v13;
    uint64_t v44 = v12 + 32;
    uint64_t v45 = &v12[16 * v43 + 32];
    *(void *)uint64_t v45 = v14;
    *((void *)v45 + 1) = v10;
    if (v43)
    {
      while (1)
      {
        unint64_t v46 = v13 - 1;
        if (v13 >= 4)
        {
          unint64_t v51 = &v44[16 * v13];
          uint64_t v52 = *((void *)v51 - 8);
          uint64_t v53 = *((void *)v51 - 7);
          BOOL v57 = __OFSUB__(v53, v52);
          uint64_t v54 = v53 - v52;
          if (v57) {
            goto LABEL_119;
          }
          uint64_t v56 = *((void *)v51 - 6);
          uint64_t v55 = *((void *)v51 - 5);
          BOOL v57 = __OFSUB__(v55, v56);
          uint64_t v49 = v55 - v56;
          char v50 = v57;
          if (v57) {
            goto LABEL_120;
          }
          unint64_t v58 = v13 - 2;
          uint64_t v59 = &v44[16 * v13 - 32];
          uint64_t v61 = *(void *)v59;
          uint64_t v60 = *((void *)v59 + 1);
          BOOL v57 = __OFSUB__(v60, v61);
          uint64_t v62 = v60 - v61;
          if (v57) {
            goto LABEL_122;
          }
          BOOL v57 = __OFADD__(v49, v62);
          uint64_t v63 = v49 + v62;
          if (v57) {
            goto LABEL_125;
          }
          if (v63 >= v54)
          {
            uint64_t v81 = &v44[16 * v46];
            uint64_t v83 = *(void *)v81;
            uint64_t v82 = *((void *)v81 + 1);
            BOOL v57 = __OFSUB__(v82, v83);
            uint64_t v84 = v82 - v83;
            if (v57) {
              goto LABEL_129;
            }
            BOOL v74 = v49 < v84;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v75 = *((void *)v12 + 4);
            uint64_t v76 = *((void *)v12 + 5);
            BOOL v57 = __OFSUB__(v76, v75);
            uint64_t v68 = v76 - v75;
            char v69 = v57;
            goto LABEL_77;
          }
          uint64_t v48 = *((void *)v12 + 4);
          uint64_t v47 = *((void *)v12 + 5);
          BOOL v57 = __OFSUB__(v47, v48);
          uint64_t v49 = v47 - v48;
          char v50 = v57;
        }
        if (v50) {
          goto LABEL_121;
        }
        unint64_t v58 = v13 - 2;
        uint64_t v64 = &v44[16 * v13 - 32];
        uint64_t v66 = *(void *)v64;
        uint64_t v65 = *((void *)v64 + 1);
        BOOL v67 = __OFSUB__(v65, v66);
        uint64_t v68 = v65 - v66;
        char v69 = v67;
        if (v67) {
          goto LABEL_124;
        }
        uint64_t v70 = &v44[16 * v46];
        uint64_t v72 = *(void *)v70;
        uint64_t v71 = *((void *)v70 + 1);
        BOOL v57 = __OFSUB__(v71, v72);
        uint64_t v73 = v71 - v72;
        if (v57) {
          goto LABEL_127;
        }
        if (__OFADD__(v68, v73)) {
          goto LABEL_128;
        }
        if (v68 + v73 >= v49)
        {
          BOOL v74 = v49 < v73;
LABEL_83:
          if (v74) {
            unint64_t v46 = v58;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v69) {
          goto LABEL_123;
        }
        uint64_t v77 = &v44[16 * v46];
        uint64_t v79 = *(void *)v77;
        uint64_t v78 = *((void *)v77 + 1);
        BOOL v57 = __OFSUB__(v78, v79);
        uint64_t v80 = v78 - v79;
        if (v57) {
          goto LABEL_126;
        }
        if (v80 < v68) {
          goto LABEL_15;
        }
LABEL_85:
        unint64_t v85 = v46 - 1;
        if (v46 - 1 >= v13)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v11) {
          goto LABEL_142;
        }
        uint64_t v86 = v12;
        uint64_t v87 = &v44[16 * v85];
        uint64_t v88 = *(void *)v87;
        uint64_t v89 = &v44[16 * v46];
        uint64_t v90 = *((void *)v89 + 1);
        sub_10009E3B8((char *)(v11 + 32 * *(void *)v87), (char *)(v11 + 32 * *(void *)v89), v11 + 32 * v90, __dst);
        if (v1) {
          goto LABEL_93;
        }
        if (v90 < v88) {
          goto LABEL_116;
        }
        if (v46 > *((void *)v86 + 2)) {
          goto LABEL_117;
        }
        *(void *)uint64_t v87 = v88;
        *(void *)&v44[16 * v85 + 8] = v90;
        unint64_t v91 = *((void *)v86 + 2);
        if (v46 >= v91) {
          goto LABEL_118;
        }
        unint64_t v12 = v86;
        unint64_t v13 = v91 - 1;
        memmove(&v44[16 * v46], v89 + 16, 16 * (v91 - 1 - v46));
        *((void *)v86 + 2) = v91 - 1;
        uint64_t v11 = v118;
        if (v91 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_15:
    Swift::Int v6 = v116;
    Swift::Int v3 = v117;
    if (v10 >= v117)
    {
      size_t v9 = v115;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10009E138(char *__src, char *a2, unint64_t a3, char *__dst)
{
  unint64_t v4 = __dst;
  Swift::Int v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 7;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 3;
  char v25 = __dst;
  int v26 = __src;
  if (v10 >= v13)
  {
    if (v11 >= -7)
    {
      uint64_t v17 = 8 * v13;
      if (__dst != a2 || &a2[v17] <= __dst) {
        memmove(__dst, a2, 8 * v13);
      }
      int64_t v18 = &v4[v17];
      Swift::Int v24 = &v4[v17];
      int v26 = v6;
      if (v7 < v6 && (unint64_t)(v11 - 8) <= 0xFFFFFFFFFFFFFFF0)
      {
        unsigned int v19 = (char *)(a3 - 8);
        unsigned int v20 = v6;
        while (1)
        {
          unsigned int v21 = v19 + 8;
          unsigned int v22 = *((_DWORD *)v20 - 2);
          v20 -= 8;
          if (*((_DWORD *)v18 - 2) >= v22)
          {
            Swift::Int v24 = v18 - 8;
            if (v21 < v18 || v19 >= v18 || v21 != v18) {
              *(void *)unsigned int v19 = *((void *)v18 - 1);
            }
            unsigned int v20 = v6;
            v18 -= 8;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }
          else
          {
            if (v21 != v6 || v19 >= v6) {
              *(void *)unsigned int v19 = *(void *)v20;
            }
            int v26 = v20;
            if (v20 <= v7) {
              goto LABEL_42;
            }
          }
          v19 -= 8;
          Swift::Int v6 = v20;
          if (v18 <= v4) {
            goto LABEL_42;
          }
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    size_t v14 = 8 * v10;
    if (__dst != __src || &__src[v14] <= __dst) {
      memmove(__dst, __src, v14);
    }
    unsigned int v15 = &v4[v14];
    Swift::Int v24 = &v4[v14];
    if ((unint64_t)v6 < a3 && (unint64_t)(v8 - 8) <= 0xFFFFFFFFFFFFFFF0)
    {
      do
      {
        if (*(_DWORD *)v6 >= *(_DWORD *)v4)
        {
          if (v7 != v4) {
            *(void *)uint64_t v7 = *(void *)v4;
          }
          v4 += 8;
          char v25 = v4;
          uint64_t v16 = v6;
        }
        else
        {
          uint64_t v16 = v6 + 8;
          if (v7 < v6 || v7 >= v16 || v7 != v6) {
            *(void *)uint64_t v7 = *(void *)v6;
          }
        }
        v7 += 8;
        if (v4 >= v15) {
          break;
        }
        Swift::Int v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      int v26 = v7;
    }
LABEL_42:
    sub_100114C10((void **)&v26, (const void **)&v25, &v24);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10009E3B8(char *__src, char *a2, unint64_t a3, char *__dst)
{
  unint64_t v4 = __dst;
  Swift::Int v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 31;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 5;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 31;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 5;
  __int16 v28 = __src;
  uint64_t v27 = __dst;
  if (v10 >= v12 >> 5)
  {
    if (v11 >= -31)
    {
      if (__dst != a2 || &a2[32 * v13] <= __dst) {
        memmove(__dst, a2, 32 * v13);
      }
      int64_t v18 = &v4[32 * v13];
      int v26 = v18;
      __int16 v28 = v6;
      if (v7 < v6 && v11 >= 32)
      {
        unsigned int v19 = (char *)(a3 - 32);
        unsigned int v20 = v6;
        while (1)
        {
          unsigned int v21 = v19 + 32;
          unsigned int v22 = *((_DWORD *)v20 - 8);
          v20 -= 32;
          if (*((_DWORD *)v18 - 8) >= v22)
          {
            int v26 = v18 - 32;
            if (v21 < v18 || v19 >= v18 || v21 != v18)
            {
              long long v24 = *((_OWORD *)v18 - 1);
              *(_OWORD *)unsigned int v19 = *((_OWORD *)v18 - 2);
              *((_OWORD *)v19 + 1) = v24;
            }
            unsigned int v20 = v6;
            v18 -= 32;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }
          else
          {
            if (v21 != v6 || v19 >= v6)
            {
              long long v23 = *((_OWORD *)v20 + 1);
              *(_OWORD *)unsigned int v19 = *(_OWORD *)v20;
              *((_OWORD *)v19 + 1) = v23;
            }
            __int16 v28 = v20;
            if (v20 <= v7) {
              goto LABEL_42;
            }
          }
          v19 -= 32;
          Swift::Int v6 = v20;
          if (v18 <= v4) {
            goto LABEL_42;
          }
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -31)
  {
    if (__dst != __src || &__src[32 * v10] <= __dst) {
      memmove(__dst, __src, 32 * v10);
    }
    size_t v14 = &v4[32 * v10];
    int v26 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 32)
    {
      do
      {
        if (*(_DWORD *)v6 >= *(_DWORD *)v4)
        {
          if (v7 != v4)
          {
            long long v17 = *((_OWORD *)v4 + 1);
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v4;
            *((_OWORD *)v7 + 1) = v17;
          }
          v4 += 32;
          uint64_t v27 = v4;
          unsigned int v15 = v6;
        }
        else
        {
          unsigned int v15 = v6 + 32;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
          {
            long long v16 = *((_OWORD *)v6 + 1);
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
            *((_OWORD *)v7 + 1) = v16;
          }
        }
        v7 += 32;
        if (v4 >= v14) {
          break;
        }
        Swift::Int v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      __int16 v28 = v7;
    }
LABEL_42:
    sub_100114CC8((void **)&v28, (const void **)&v27, &v26);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10009E634(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  v10[5] = a3;
  char v11 = a4;
  uint64_t v8 = a3;
  char v9 = a4;
  sub_100010BCC(&qword_10047E750);
  sub_100010BCC((uint64_t *)&unk_1004882E0);
  if (swift_dynamicCast())
  {
    sub_10006EF50(v6, (uint64_t)v10);
    sub_1000369C4(v10, v10[3]);
    __chkstk_darwin();
    dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
    return sub_100010754((uint64_t)v10);
  }
  else
  {
    uint64_t v7 = 0;
    memset(v6, 0, sizeof(v6));
    sub_1000380B4((uint64_t)v6, &qword_10047E758);
    __chkstk_darwin();
    return sub_10009E864(a3, (uint64_t (*)(_OWORD *, uint64_t))sub_1000A6BA0);
  }
}

uint64_t sub_10009E7BC(unsigned char *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result = sub_1001B30D0((uint64_t)&v8, a1, a2, a3, a4);
  if (result == a2)
  {
    uint64_t v6 = v9;
    uint64_t v7 = v8;
    if (v9 == v8) {
      return Data._Representation.replaceSubrange(_:with:count:)();
    }
  }
  else
  {
    __break(1u);
  }
  if ((v6 & 0x8000000000000000) == 0 && v6 < v7) {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10009E864(uint64_t a1, uint64_t (*a2)(_OWORD *, uint64_t))
{
  if (a1 <= 0)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    return a2(v6, v7);
  }
  if ((unint64_t)a1 <= 0x20)
  {
    memset(v8, 0, sizeof(v8));
    uint64_t v6 = v8;
    uint64_t v7 = a1;
    return a2(v6, v7);
  }
  uint64_t v4 = swift_slowAlloc();
  a2((_OWORD *)v4, a1);

  return swift_slowDealloc();
}

void sub_10009E960(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = (unint64_t *)(a2 + 56);
    do
    {
      uint64_t v5 = *(v4 - 1);
      unint64_t v6 = *v4;
      Swift::UInt16 v7 = *((_WORD *)v4 - 8);
      Hasher._combine(_:)(*((unsigned char *)v4 - 24));
      Hasher._combine(_:)(v7);
      sub_100013D44(v5, v6);
      Data.hash(into:)();
      sub_10000C970(v5, v6);
      v4 += 4;
      --v3;
    }
    while (v3);
  }
}

void sub_10009E9F4(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = a2 + 32;
    do
    {
      __int16 v5 = *(_WORD *)(v4 + 6);
      __int16 v6 = *(_WORD *)(v4 + 8);
      __int16 v12 = *(_WORD *)(v4 + 10);
      __int16 v13 = *(_WORD *)(v4 + 12);
      Swift::UInt8 v7 = *(unsigned char *)(v4 + 1);
      Swift::UInt8 v8 = *(unsigned char *)(v4 + 2);
      Swift::UInt8 v9 = *(unsigned char *)(v4 + 3);
      Swift::UInt8 v10 = *(unsigned char *)(v4 + 4);
      Swift::UInt8 v11 = *(unsigned char *)(v4 + 5);
      Hasher._combine(_:)(*(unsigned char *)v4);
      Hasher._combine(_:)(v7);
      Hasher._combine(_:)(v8);
      Hasher._combine(_:)(v9);
      Hasher._combine(_:)(v10);
      Hasher._combine(_:)(v11);
      if ((v5 & 0xFF00) == 0x2200)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(word_1003B727C[(char)v5]);
        Hasher._combine(_:)(*(_WORD *)((char *)&unk_1003B72E8 + (((uint64_t)v5 >> 7) & 0xFFFFFFFFFFFFFFFELL)));
      }
      if ((v6 & 0xFF00) == 0x2200)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(word_1003B727C[(char)v6]);
        Hasher._combine(_:)(*(_WORD *)((char *)&unk_1003B72E8 + (((uint64_t)v6 >> 7) & 0xFFFFFFFFFFFFFFFELL)));
      }
      if ((v12 & 0xFF00) == 0x2200)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(word_1003B727C[(char)v12]);
        Hasher._combine(_:)(*(_WORD *)((char *)&unk_1003B72E8 + (((uint64_t)v12 >> 7) & 0xFFFFFFFFFFFFFFFELL)));
      }
      if ((v13 & 0xFF00) == 0x2200)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(word_1003B727C[(char)v13]);
        Hasher._combine(_:)(*(_WORD *)((char *)&unk_1003B72E8 + (((uint64_t)v13 >> 7) & 0xFFFFFFFFFFFFFFFELL)));
      }
      v4 += 14;
      --v3;
    }
    while (v3);
  }
}

void sub_10009EBD8(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = (Swift::UInt64 *)(a2 + 32);
    do
    {
      Swift::UInt64 v6 = *v4++;
      Swift::UInt64 v5 = v6;
      if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v7 = v5;
      }
      else {
        Swift::UInt64 v7 = 0;
      }
      Hasher._combine(_:)(v7);
      --v3;
    }
    while (v3);
  }
}

void sub_10009EC30(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = (unsigned __int8 *)(a2 + 40);
    do
    {
      Swift::UInt16 v5 = *((_WORD *)v4 - 1);
      int v6 = *v4;
      Swift::UInt16 v7 = *((_WORD *)v4 - 3);
      Swift::UInt8 v8 = *(v4 - 4);
      Hasher._combine(_:)(*(v4 - 8));
      Hasher._combine(_:)(v7);
      Hasher._combine(_:)(v8);
      if (v6 == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v5);
      }
      v4 += 10;
      --v3;
    }
    while (v3);
  }
}

void sub_10009ECDC(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = (unsigned __int8 *)(a2 + 37);
    do
    {
      char v6 = *(v4 - 1);
      int v7 = *v4;
      Hasher._combine(_:)(*(_DWORD *)(v4 - 5));
      Hasher._combine(_:)(0x801004u >> (8 * v6));
      switch(v7)
      {
        case 2:
          Swift::UInt v5 = 0;
          goto LABEL_4;
        case 3:
          Swift::UInt v5 = 1;
          goto LABEL_4;
        case 4:
          Swift::UInt v5 = 3;
          goto LABEL_4;
        case 5:
          Swift::UInt v5 = 4;
          goto LABEL_4;
        case 6:
          Swift::UInt v5 = 5;
LABEL_4:
          Hasher._combine(_:)(v5);
          break;
        default:
          Hasher._combine(_:)(2uLL);
          Hasher._combine(_:)(v7 & 1);
          break;
      }
      v4 += 8;
      --v3;
    }
    while (v3);
  }
}

void sub_10009EDD8(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = (unsigned int *)(a2 + 32);
    do
    {
      unint64_t v6 = *v4 | ((unint64_t)*((unsigned __int16 *)v4 + 2) << 32);
      if ((v6 & 0xFF00000000) == 0x300000000)
      {
        Swift::UInt8 v5 = 0;
LABEL_4:
        Hasher._combine(_:)(v5);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v6);
        Hasher._combine(_:)(0x801004u >> ((v6 >> 29) & 0xF8));
        switch(v6 >> 40)
        {
          case 2uLL:
            Hasher._combine(_:)(0);
            break;
          case 3uLL:
            Hasher._combine(_:)(1uLL);
            break;
          case 4uLL:
            Hasher._combine(_:)(3uLL);
            break;
          case 5uLL:
            Hasher._combine(_:)(4uLL);
            break;
          case 6uLL:
            Hasher._combine(_:)(5uLL);
            break;
          default:
            Hasher._combine(_:)(2uLL);
            Swift::UInt8 v5 = BYTE5(v6) & 1;
            goto LABEL_4;
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
}

void sub_10009EF14(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = (Swift::UInt8 *)(a2 + 38);
    do
    {
      char v6 = *(v4 - 2);
      int v7 = *(v4 - 1);
      Swift::UInt8 v8 = *v4;
      Hasher._combine(_:)(*(_DWORD *)(v4 - 6));
      Hasher._combine(_:)(0x801004u >> (8 * v6));
      switch(v7)
      {
        case 2:
          Swift::UInt v5 = 0;
          goto LABEL_4;
        case 3:
          Swift::UInt v5 = 1;
          goto LABEL_4;
        case 4:
          Swift::UInt v5 = 3;
          goto LABEL_4;
        case 5:
          Swift::UInt v5 = 4;
          goto LABEL_4;
        case 6:
          Swift::UInt v5 = 5;
LABEL_4:
          Hasher._combine(_:)(v5);
          break;
        default:
          Hasher._combine(_:)(2uLL);
          Hasher._combine(_:)(v7 & 1);
          break;
      }
      v4 += 8;
      Hasher._combine(_:)(v8);
      --v3;
    }
    while (v3);
  }
}

void sub_10009F024(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = a2 + 32;
    do
    {
      uint64_t v5 = *(void *)(v4 + 8);
      unint64_t v6 = *(void *)(v4 + 16);
      Swift::UInt8 v7 = *(unsigned char *)(v4 + 1);
      Hasher._combine(_:)(*(unsigned char *)v4);
      Hasher._combine(_:)(v7);
      sub_100013D44(v5, v6);
      Data.hash(into:)();
      sub_10000C970(v5, v6);
      v4 += 24;
      --v3;
    }
    while (v3);
  }
}

void NANAttribute.FineTimingMeasurementRangeReport.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = (Swift::UInt8 *)(a2 + 45);
    do
    {
      Swift::UInt32 v5 = *(_DWORD *)(v4 - 13);
      Swift::UInt8 v6 = *(v4 - 9);
      Swift::UInt8 v7 = *(v4 - 8);
      Swift::UInt8 v8 = *(v4 - 7);
      Swift::UInt8 v9 = *(v4 - 6);
      Swift::UInt8 v10 = *(v4 - 5);
      Swift::UInt8 v11 = *(v4 - 4);
      Swift::UInt8 v12 = *(v4 - 3);
      Swift::UInt8 v14 = *(v4 - 2);
      Swift::UInt8 v15 = *(v4 - 1);
      Swift::UInt8 v13 = *v4;
      v4 += 16;
      Hasher._combine(_:)(v5);
      Hasher._combine(_:)(v6);
      Hasher._combine(_:)(v7);
      Hasher._combine(_:)(v8);
      Hasher._combine(_:)(v9);
      Hasher._combine(_:)(v10);
      Hasher._combine(_:)(v11);
      Hasher._combine(_:)(v12);
      Hasher._combine(_:)(v14);
      Hasher._combine(_:)(v15);
      Hasher._combine(_:)(v13);
      --v3;
    }
    while (v3);
  }
}

void sub_10009F1A8(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  Swift::UInt v21 = v3;
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v20 = a2 + 32;
    do
    {
      uint64_t v5 = v20 + 56 * v4;
      uint64_t v6 = *(void *)(v5 + 8);
      uint64_t v7 = *(void *)(v5 + 16);
      unint64_t v8 = *(void *)(v5 + 24);
      Swift::UInt8 v9 = *(unsigned char *)(v5 + 32);
      uint64_t v10 = *(void *)(v5 + 40);
      char v11 = *(unsigned char *)(v5 + 48);
      Hasher._combine(_:)(*(_WORD *)v5);
      uint64_t v23 = v6;
      if (v8 >> 60 == 15)
      {
        Hasher._combine(_:)(0);
        sub_10006E968(v6, v7, v8);
        swift_bridgeObjectRetain();
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v6);
        sub_10006E968(v6, v7, v8);
        swift_bridgeObjectRetain();
        sub_10006E968(v6, v7, v8);
        Data.hash(into:)();
        sub_10006E0D8(v6, v7, v8);
      }
      Hasher._combine(_:)(v9);
      Hasher._combine(_:)(*(void *)(v10 + 16));
      uint64_t v12 = *(void *)(v10 + 16);
      uint64_t v22 = v7;
      if (v11)
      {
        if (v12)
        {
          Swift::UInt8 v13 = (unsigned __int8 *)(v10 + 40);
          do
          {
            Swift::UInt16 v14 = *((_WORD *)v13 - 1);
            int v15 = *v13;
            Swift::UInt16 v16 = *((_WORD *)v13 - 3);
            Swift::UInt8 v17 = *(v13 - 4);
            Hasher._combine(_:)(*(v13 - 8));
            Hasher._combine(_:)(v16);
            Hasher._combine(_:)(v17);
            if (v15 == 1)
            {
              Hasher._combine(_:)(0);
            }
            else
            {
              Hasher._combine(_:)(1u);
              Hasher._combine(_:)(v14);
            }
            v13 += 10;
            --v12;
          }
          while (v12);
        }
      }
      else if (v12)
      {
        int64_t v18 = (Swift::UInt8 *)(v10 + 32);
        do
        {
          Swift::UInt8 v19 = *v18++;
          Hasher._combine(_:)(v19);
          --v12;
        }
        while (v12);
      }
      ++v4;
      sub_10006E0D8(v23, v22, v8);
      swift_bridgeObjectRelease();
    }
    while (v4 != v21);
  }
}

void sub_10009F38C(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = a2 + 32;
    do
    {
      uint64_t v5 = *(void *)(v4 + 8);
      unint64_t v6 = *(void *)(v4 + 16);
      Swift::UInt8 v7 = *(unsigned char *)(v4 + 1);
      Swift::UInt8 v8 = *(unsigned char *)(v4 + 2);
      Hasher._combine(_:)(*(unsigned char *)v4);
      Hasher._combine(_:)(v7);
      Hasher._combine(_:)(v8);
      sub_100013D44(v5, v6);
      Data.hash(into:)();
      sub_10000C970(v5, v6);
      v4 += 24;
      --v3;
    }
    while (v3);
  }
}

void sub_10009F434(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = (Swift::UInt8 *)(a2 + 38);
    do
    {
      Swift::UInt8 v5 = *(v4 - 6);
      Swift::UInt8 v6 = *(v4 - 5);
      Swift::UInt8 v7 = *(v4 - 4);
      Swift::UInt8 v8 = *(v4 - 3);
      Swift::UInt8 v9 = *(v4 - 2);
      Swift::UInt8 v10 = *(v4 - 1);
      Swift::UInt8 v11 = *v4;
      v4 += 7;
      Hasher._combine(_:)(v5);
      Hasher._combine(_:)(v6);
      Hasher._combine(_:)(v7);
      Hasher._combine(_:)(v8);
      Hasher._combine(_:)(v9);
      Hasher._combine(_:)(v10);
      Hasher._combine(_:)(v11);
      --v3;
    }
    while (v3);
  }
}

void sub_10009F4E4(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = (void *)(a2 + 80);
    do
    {
      uint64_t v6 = *(v4 - 5);
      unint64_t v5 = *(v4 - 4);
      uint64_t v7 = *(v4 - 3);
      unint64_t v8 = *(v4 - 2);
      uint64_t v9 = *v4;
      Hasher._combine(_:)(*((unsigned char *)v4 - 48) + 1);
      sub_100013D44(v6, v5);
      sub_100038004(v7, v8);
      swift_bridgeObjectRetain();
      sub_100013D44(v6, v5);
      Data.hash(into:)();
      sub_10000C970(v6, v5);
      if (v8 >> 60 == 15)
      {
        Hasher._combine(_:)(0);
        if (v9) {
          goto LABEL_9;
        }
      }
      else
      {
        Hasher._combine(_:)(1u);
        sub_100013D44(v7, v8);
        Data.hash(into:)();
        sub_10000C95C(v7, v8);
        if (v9)
        {
LABEL_9:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
      }
      Hasher._combine(_:)(0);
LABEL_4:
      sub_10000C970(v6, v5);
      sub_10000C95C(v7, v8);
      swift_bridgeObjectRelease();
      v4 += 7;
      --v3;
    }
    while (v3);
  }
}

uint64_t _s7CoreP2P20NANAvailabilityEntryV23__derived_struct_equalsySbAC_ACtFZ_0(unsigned __int16 *a1, unsigned __int16 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  uint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = *((void *)a1 + 2);
  unint64_t v6 = *((void *)a1 + 3);
  uint64_t v7 = *((void *)a2 + 1);
  uint64_t v8 = *((void *)a2 + 2);
  unint64_t v9 = *((void *)a2 + 3);
  if (v6 >> 60 != 15)
  {
    if (v9 >> 60 != 15)
    {
      if ((unsigned __int16)*((void *)a1 + 1) != (unsigned __int16)v7) {
        return 0;
      }
      sub_10006E968(*((void *)a1 + 1), v5, v6);
      sub_10006E968(v7, v8, v9);
      char v12 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v5, v6, v8, v9);
      sub_10006E0D8(v7, v8, v9);
      sub_10006E0D8(v4, v5, v6);
      if ((v12 & 1) == 0) {
        return 0;
      }
      goto LABEL_4;
    }
LABEL_10:
    sub_10006E968(*((void *)a1 + 1), v5, v6);
    sub_10006E968(v7, v8, v9);
    sub_10006E0D8(v4, v5, v6);
    sub_10006E0D8(v7, v8, v9);
    return 0;
  }
  if (v9 >> 60 != 15) {
    goto LABEL_10;
  }
LABEL_4:
  if (*((unsigned __int8 *)a1 + 32) == *((unsigned __int8 *)a2 + 32))
  {
    uint64_t v10 = *((void *)a1 + 5);
    uint64_t v11 = *((void *)a2 + 5);
    if (a1[24])
    {
      if (a2[24] & 1) != 0 && (sub_100096104(v10, v11)) {
        return 1;
      }
    }
    else if ((a2[24] & 1) == 0 && sub_1000961BC(v10, v11))
    {
      return 1;
    }
  }
  return 0;
}

unint64_t _s7CoreP2P20NANAvailabilityEntryV15UsagePreferenceO8rawValueAESgSi_tcfC_0(unint64_t result)
{
  if (result >= 4) {
    return 4;
  }
  return result;
}

uint64_t sub_10009F7E4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  int64_t v4 = v3;
  uint64_t v8 = type metadata accessor for Data.Iterator();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v123 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3 >> 60 == 15)
  {
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v12 = xmmword_1003B00B0;
    *(unsigned char *)(v12 + 16) = 2;
    return swift_willThrow();
  }
  Swift::UInt16 v14 = (char *)sub_1001922FC(4u);
  uint64_t v146 = 0;
  v147 = v14;
  uint64_t v148 = 0;
  sub_100013D44(a2, a3);
  if (v3)
  {
    swift_errorRelease();
LABEL_5:
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v15 = xmmword_1003B00B0;
    *(unsigned char *)(v15 + 16) = 2;
    swift_willThrow();
    sub_10006E0D8(a1, a2, a3);
    return sub_10006E0D8(a1, a2, a3);
  }
  int v16 = a1 & 7;
  int v17 = _s7CoreP2P19NANIntervalDurationO8rawValueACSgs5UInt8V_tcfC_0(a1 & 7);
  uint64_t v140 = (char *)a3;
  unint64_t v142 = a1;
  int64_t v143 = 0;
  if ((v17 - 1) >= 3)
  {
    if (v17) {
      goto LABEL_5;
    }
    unint64_t v139 = (unint64_t)v14;
    *(void *)&long long v157 = a2;
    *((void *)&v157 + 1) = a3;
    sub_100013D44(a2, a3);
    uint64_t v136 = a2;
    LODWORD(v14) = (a1 >> 6) & 7;
    if (!v14) {
      goto LABEL_97;
    }
  }
  else
  {
    uint64_t v138 = v9;
    long long v156 = xmmword_1003B2440;
    switch(a3 >> 62)
    {
      case 1uLL:
      case 2uLL:
        sub_100013D44(a2, a3);
        sub_100013D44(a2, a3);
        break;
      default:
        break;
    }
    unint64_t v139 = (unint64_t)v14;
    Data.Iterator.init(_:at:)();
    uint64_t v136 = a2;
    sub_10006E0D8(a1, a2, a3);
    a3 = (unint64_t)v11;
    Swift::UInt8_optional v18 = Data.Iterator.next()();
    if ((*(_WORD *)&v18 & 0x100) == 0)
    {
      signed __int8 value = v18.value;
      a2 = (uint64_t)&type metadata for Data;
      uint64_t v141 = (char *)&v151 + 8;
      Swift::UInt16 v14 = (char *)&type metadata for Any + 8;
      long long v145 = xmmword_1003B2450;
      int64_t v144 = 0x80000001003DB470;
      do
      {
        if (v4) {
          goto LABEL_248;
        }
        switch(v16)
        {
          case 1:
            uint64_t v23 = sub_10008F728(value);
            break;
          case 2:
            uint64_t v23 = sub_10008F7F8(value);
            break;
          case 3:
            uint64_t v26 = 2 * (value & 1u);
            if ((value & 2) != 0) {
              v26 |= 0x300uLL;
            }
            if ((value & 4) != 0) {
              v26 |= 0x20200uLL;
            }
            if ((value & 8) != 0) {
              v26 |= 0x2000300uLL;
            }
            if ((value & 0x10) != 0) {
              v26 |= 0x200000400uLL;
            }
            if ((value & 0x20) != 0) {
              v26 |= 0x20000000500uLL;
            }
            if ((value & 0x40) != 0) {
              v26 |= 0x2000000000600uLL;
            }
            if (value >= 0) {
              uint64_t v27 = v26;
            }
            else {
              uint64_t v27 = v26 | 0x200000000000700;
            }
            *(void *)&long long v151 = v27;
            size_t v154 = &type metadata for UnsafeRawBufferPointer;
            int v155 = &protocol witness table for UnsafeRawBufferPointer;
            int64_t v152 = &v151;
            uint64_t v153 = v141;
            __int16 v28 = sub_1000369C4(&v152, (uint64_t)&type metadata for UnsafeRawBufferPointer);
            long long v29 = (unsigned char *)*v28;
            if (*v28 && (uint64_t v30 = (unsigned char *)v28[1], v31 = v30 - v29, v30 != v29))
            {
              if (v31 <= 14)
              {
                uint64_t v32 = sub_100013D9C((unsigned char *)*v28, v30);
                unint64_t v25 = v38 & 0xFFFFFFFFFFFFFFLL;
              }
              else
              {
                type metadata accessor for __DataStorage();
                swift_allocObject();
                uint64_t v36 = __DataStorage.init(bytes:length:)();
                uint64_t v37 = v36;
                if ((unint64_t)v31 >= 0x7FFFFFFF)
                {
                  type metadata accessor for Data.RangeReference();
                  uint64_t v32 = swift_allocObject();
                  *(void *)(v32 + 16) = 0;
                  *(void *)(v32 + 24) = v31;
                  unint64_t v25 = v37 | 0x8000000000000000;
                }
                else
                {
                  uint64_t v32 = v31 << 32;
                  unint64_t v25 = v36 | 0x4000000000000000;
                }
              }
            }
            else
            {
              uint64_t v32 = 0;
              unint64_t v25 = 0xC000000000000000;
            }
            sub_100010754((uint64_t)&v152);
            size_t v154 = &type metadata for Data;
            int64_t v152 = (long long *)v32;
            int64_t v4 = v143;
            goto LABEL_42;
          default:
            goto LABEL_249;
        }
        unint64_t v25 = v24;
        size_t v154 = &type metadata for Data;
        int64_t v152 = (long long *)v23;
LABEL_42:
        uint64_t v153 = (char *)v25;
        sub_1000107A4((uint64_t)&v152, (uint64_t)&v151);
        if (swift_dynamicCast())
        {
          uint64_t v20 = v149;
          unint64_t v21 = v150;
          Data.append(_:)();
          sub_10000C970(v20, v21);
        }
        else
        {
          sub_100010BCC(&qword_10047E748);
          uint64_t v33 = swift_allocObject();
          *(_OWORD *)(v33 + 16) = v145;
          *(void *)&long long v151 = 0;
          *((void *)&v151 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(38);
          swift_bridgeObjectRelease();
          *(void *)&long long v151 = 0xD000000000000024;
          *((void *)&v151 + 1) = v144;
          LOBYTE(v149) = value;
          v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v34);
          swift_bridgeObjectRelease();
          long long v35 = v151;
          *(void *)(v33 + 56) = &type metadata for String;
          *(_OWORD *)(v33 + 32) = v35;
          print(_:separator:terminator:)();
          swift_bridgeObjectRelease();
        }
        sub_100010754((uint64_t)&v152);
        a3 = (unint64_t)v11;
        Swift::UInt8_optional v22 = Data.Iterator.next()();
        signed __int8 value = v22.value;
      }
      while ((*(_WORD *)&v22 & 0x100) == 0);
    }
    (*(void (**)(char *, uint64_t))(v138 + 8))(v11, v8);
    a3 = *((void *)&v156 + 1);
    a2 = v156;
    long long v157 = v156;
    if (v4) {
      goto LABEL_250;
    }
    a1 = v142;
    LODWORD(v14) = (v142 >> 6) & 7;
    if (!v14) {
      goto LABEL_97;
    }
  }
  uint64_t v39 = (a1 >> 6) & 7;
  if (v39 >= 5)
  {
    int v42 = a1 >> 6;
    if (!(a1 >> 6)) {
      int v42 = 4;
    }
    int v41 = v39 - v42;
    unint64_t v43 = &_mh_execute_header;
    int8x8_t v44 = 0;
    int v45 = v41;
    int8x8_t v46 = 0;
    do
    {
      int8x8_t v44 = vorr_s8(v44, (int8x8_t)vshl_u32((uint32x2_t)0x100000001, (uint32x2_t)vand_s8((int8x8_t)v43, (int8x8_t)0xFF000000FFLL)));
      int8x8_t v46 = vorr_s8(v46, (int8x8_t)vshl_u32((uint32x2_t)0x100000001, (uint32x2_t)vand_s8((int8x8_t)vadd_s32((int32x2_t)v43, (int32x2_t)0x200000002), (int8x8_t)0xFF000000FFLL)));
      unint64_t v43 = (const mach_header_64 *)vadd_s32((int32x2_t)v43, (int32x2_t)0x400000004);
      v45 -= 4;
    }
    while (v45);
    int8x8_t v47 = vorr_s8(v46, v44);
    __int32 v40 = v47.i32[0] | v47.i32[1];
  }
  else
  {
    __int32 v40 = 0;
    LOBYTE(v41) = 0;
  }
  LODWORD(v4) = v40 | (1 << v41);
  if (v14 != (v41 + 1))
  {
    if (v14 <= (v41 + 1)) {
      goto LABEL_62;
    }
    goto LABEL_251;
  }
  while (2)
  {
    uint64_t v48 = 0;
    switch(a3 >> 62)
    {
      case 1uLL:
        uint64_t v48 = (int)a2;
        break;
      case 2uLL:
        goto LABEL_63;
      default:
        break;
    }
LABEL_64:
    int v49 = 0;
LABEL_66:
    unint64_t v50 = a3 >> 62;
    switch(a3 >> 62)
    {
      case 1uLL:
        uint64_t v51 = a2 >> 32;
        goto LABEL_70;
      case 2uLL:
        uint64_t v51 = *(void *)(a2 + 24);
        goto LABEL_70;
      case 3uLL:
        goto LABEL_93;
      default:
        uint64_t v51 = BYTE6(a3);
LABEL_70:
        if (v48 == v51) {
          goto LABEL_94;
        }
        if (!v50)
        {
          if (v48 >= BYTE6(a3)) {
            goto LABEL_209;
          }
          int64_t v152 = (long long *)a2;
          LOWORD(v153) = a3;
          BYTE2(v153) = BYTE2(a3);
          BYTE3(v153) = BYTE3(a3);
          BYTE4(v153) = BYTE4(a3);
          BYTE5(v153) = BYTE5(a3);
          int v55 = *((unsigned __int8 *)&v152 + v48);
          int64_t v152 = (long long *)a2;
          LOWORD(v153) = a3;
          BYTE2(v153) = BYTE2(a3);
          BYTE3(v153) = BYTE3(a3);
          BYTE4(v153) = BYTE4(a3);
          BYTE5(v153) = BYTE5(a3);
          goto LABEL_65;
        }
        if (v50 == 1)
        {
          if (v48 >= a2 >> 32 || v48 < (int)a2) {
            goto LABEL_211;
          }
          a3 &= 0x3FFFFFFFFFFFFFFFuLL;
          uint64_t v52 = __DataStorage._bytes.getter();
          if (v52)
          {
            uint64_t v53 = v52;
            uint64_t v54 = __DataStorage._offset.getter();
            if (__OFSUB__(v48, v54)) {
              goto LABEL_213;
            }
            int v55 = *(unsigned __int8 *)(v53 + v48 - v54);
            if (!__DataStorage._bytes.getter()) {
              goto LABEL_240;
            }
            if (__OFSUB__(v48, __DataStorage._offset.getter())) {
              goto LABEL_215;
            }
            goto LABEL_65;
          }
          __break(1u);
LABEL_240:
          __break(1u);
LABEL_241:
          __break(1u);
LABEL_242:
          __break(1u);
LABEL_243:
          __break(1u);
LABEL_244:
          __break(1u);
LABEL_245:
          __break(1u);
LABEL_246:
          __break(1u);
LABEL_247:
          __break(1u);
LABEL_248:
          swift_errorRelease();
LABEL_249:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
LABEL_250:
          swift_unexpectedError();
          __break(1u);
LABEL_251:
          LODWORD(v4) = v4 | (2 << v41);
          if (v14 == (v41 + 2)) {
            continue;
          }
          if (v14 > (v41 + 2))
          {
            LODWORD(v4) = v4 | (4 << v41);
            if (v14 == (v41 + 3)) {
              continue;
            }
            if (v14 > (v41 + 3))
            {
              LODWORD(v4) = v4 | (8 << v41);
              if (v14 == (v41 + 4)) {
                continue;
              }
              if (v14 > (v41 + 4))
              {
                LODWORD(v4) = v4 | (16 << v41);
                if (v14 == (v41 + 5)) {
                  continue;
                }
                if (v14 > (v41 + 5))
                {
                  LODWORD(v4) = v4 | (32 << v41);
                  if (v14 == (v41 + 6)) {
                    continue;
                  }
                  if (v14 > (v41 + 6) && v14 == (v41 + 7))
                  {
                    LODWORD(v4) = v4 | (64 << v41);
                    continue;
                  }
                }
              }
            }
          }
LABEL_62:
          __break(1u);
LABEL_63:
          uint64_t v48 = *(void *)(a2 + 16);
          goto LABEL_64;
        }
        if (v48 < *(void *)(a2 + 16)) {
          goto LABEL_210;
        }
        if (v48 >= *(void *)(a2 + 24)) {
          goto LABEL_212;
        }
        a3 &= 0x3FFFFFFFFFFFFFFFuLL;
        uint64_t v56 = __DataStorage._bytes.getter();
        if (!v56) {
          goto LABEL_241;
        }
        uint64_t v57 = v56;
        uint64_t v58 = __DataStorage._offset.getter();
        if (__OFSUB__(v48, v58)) {
          goto LABEL_214;
        }
        if (v48 < *(void *)(a2 + 16)) {
          goto LABEL_216;
        }
        if (v48 >= *(void *)(a2 + 24))
        {
LABEL_217:
          __break(1u);
LABEL_218:
          __break(1u);
LABEL_219:
          __break(1u);
LABEL_220:
          __break(1u);
LABEL_221:
          __break(1u);
LABEL_222:
          __break(1u);
LABEL_223:
          __break(1u);
LABEL_224:
          __break(1u);
LABEL_225:
          __break(1u);
LABEL_226:
          __break(1u);
LABEL_227:
          __break(1u);
LABEL_228:
          __break(1u);
LABEL_229:
          __break(1u);
LABEL_230:
          __break(1u);
LABEL_231:
          __break(1u);
LABEL_232:
          __break(1u);
LABEL_233:
          __break(1u);
LABEL_234:
          __break(1u);
LABEL_235:
          __break(1u);
LABEL_236:
          __break(1u);
LABEL_237:
          __break(1u);
LABEL_238:
          __break(1u);
        }
        int v55 = *(unsigned __int8 *)(v57 + v48 - v58);
        if (!__DataStorage._bytes.getter()) {
          goto LABEL_242;
        }
        if (!__OFSUB__(v48, __DataStorage._offset.getter()))
        {
LABEL_65:
          Data._Representation.subscript.setter();
          ++v48;
          a3 = *((void *)&v157 + 1);
          a2 = v157;
          int v49 = v55 & v4;
          goto LABEL_66;
        }
        __break(1u);
LABEL_93:
        if (v48) {
          goto LABEL_232;
        }
LABEL_94:
        if ((_BYTE)v49)
        {
          int v59 = v49 << (-(v142 >> 6) & 7);
          int64_t v4 = v143;
          uint64_t v60 = sub_100010BCC(&qword_10047E738);
          size_t v154 = (void *)v60;
          int v155 = (void *)sub_10000F9CC(&qword_10047E740, &qword_10047E738);
          LOBYTE(v152) = v59;
          LOBYTE(v151) = *(unsigned char *)sub_1000369C4(&v152, v60);
          Data._Representation.replaceSubrange(_:with:count:)();
          sub_100010754((uint64_t)&v152);
          a3 = *((void *)&v157 + 1);
          a2 = v157;
          a1 = v142;
        }
        else
        {
          a1 = v142;
          int64_t v4 = v143;
        }
LABEL_97:
        *(void *)&long long v145 = &v148;
        Swift::UInt16 v14 = v140;
        uint64_t v61 = 0;
        switch(a3 >> 62)
        {
          case 1uLL:
            uint64_t v61 = (int)a2;
            break;
          case 2uLL:
            uint64_t v61 = *(void *)(a2 + 16);
            break;
          default:
            break;
        }
        a3 = (unint64_t)&v157;
        sub_10009E634(v61, v61, (a1 >> 9) & 0x3F, 0);
        unint64_t v62 = sub_10008C940(3uLL, 3, v142);
        if (v4)
        {
          swift_errorRelease();
          goto LABEL_103;
        }
        unsigned __int8 v63 = _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO0F9AlgorithmO8rawValueAISgs5UInt8V_tcfC_0(v62);
        if (v63 == 8) {
LABEL_103:
        }
          unsigned __int8 v63 = 0;
        unint64_t v64 = sub_1001922FC(v63);
        a2 = v64 >> 7;
        uint64_t v65 = *((void *)&v157 + 1) >> 62;
        unint64_t v66 = v64;
        switch(*((void *)&v157 + 1) >> 62)
        {
          case 1:
            if (__OFSUB__(DWORD1(v157), v157)) {
              goto LABEL_227;
            }
            if (DWORD1(v157) - (int)v157 < a2) {
              goto LABEL_114;
            }
            goto LABEL_124;
          case 2:
            uint64_t v68 = *(void *)(v157 + 16);
            uint64_t v67 = *(void *)(v157 + 24);
            BOOL v69 = __OFSUB__(v67, v68);
            uint64_t v70 = v67 - v68;
            if (v69) {
              goto LABEL_226;
            }
            if (v70 >= a2) {
              goto LABEL_124;
            }
LABEL_114:
            if (v65)
            {
              if (v65 == 1)
              {
                LODWORD(v71) = DWORD1(v157) - v157;
                if (__OFSUB__(DWORD1(v157), v157)) {
                  goto LABEL_230;
                }
                uint64_t v71 = (int)v71;
              }
              else
              {
                uint64_t v73 = *(void *)(v157 + 16);
                uint64_t v72 = *(void *)(v157 + 24);
                BOOL v69 = __OFSUB__(v72, v73);
                uint64_t v71 = v72 - v73;
                if (v69) {
                  goto LABEL_231;
                }
              }
            }
            else
            {
              uint64_t v71 = BYTE14(v157);
            }
LABEL_120:
            if (__OFSUB__(a2, v71)) {
              goto LABEL_225;
            }
            if (sub_1001DE55C(0, a2 - v71)[2]) {
              Data._Representation.append(contentsOf:)();
            }
            swift_bridgeObjectRelease();
            Swift::UInt16 v14 = v140;
LABEL_124:
            long long v151 = xmmword_1003B2440;
            LODWORD(v4) = 0;
            unint64_t v74 = sub_10008C940(3uLL, 3, v142);
            if ((_s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO0F9AlgorithmO8rawValueAISgs5UInt8V_tcfC_0(v74)
                                 - 1) >= 3u)
            {
LABEL_147:
              a2 = 0;
              unint64_t v137 = 0xC000000000000000;
LABEL_148:
              if (v139 >= 0x80)
              {
LABEL_200:
                sub_10000F000();
                swift_allocError();
                *(void *)uint64_t v117 = 0;
                *(void *)(v117 + 8) = 0;
                *(unsigned char *)(v117 + 16) = 2;
                swift_willThrow();
                uint64_t v118 = v142;
                uint64_t v119 = v136;
                sub_10006E0D8(v142, v136, (unint64_t)v14);
                sub_10006E0D8(v118, v119, (unint64_t)v14);
                sub_10000C970(v151, *((unint64_t *)&v151 + 1));
                return sub_10000C970(v157, *((unint64_t *)&v157 + 1));
              }
              Swift::UInt16 v14 = v147;
              if (v147)
              {
                uint64_t v90 = 0;
                uint64_t v91 = 3;
LABEL_151:
                unint64_t v76 = 0;
                uint64_t v92 = 0;
                int64_t v144 = a2 >> 32;
                uint64_t v75 = BYTE6(v137);
                int64_t v143 = (int)a2;
                a3 = v137 & 0x3FFFFFFFFFFFFFFFLL;
                unint64_t v135 = (unint64_t)a2 >> 8;
                unint64_t v134 = (unint64_t)a2 >> 16;
                int64_t v133 = (char *)&v152 + v90;
                unint64_t v132 = (unint64_t)a2 >> 24;
                unint64_t v131 = HIDWORD(a2);
                unint64_t v130 = (unint64_t)a2 >> 40;
                unint64_t v129 = HIWORD(a2);
                unint64_t v128 = HIBYTE(a2);
                unint64_t v127 = v137 >> 8;
                unint64_t v126 = v137 >> 16;
                unint64_t v125 = v137 >> 24;
                unint64_t v124 = HIDWORD(v137);
                unint64_t v123 = v137 >> 40;
                uint64_t v141 = (char *)a2;
                unint64_t v139 = v91;
                uint64_t v138 = v90;
                while (1)
                {
                  int64_t v93 = v90 + v92;
                  int64_t v94 = v75;
                  switch((int)v91)
                  {
                    case 1:
                      int64_t v94 = v144;
                      goto LABEL_155;
                    case 2:
                      int64_t v94 = *(void *)(a2 + 24);
                      goto LABEL_155;
                    case 3:
                      uint64_t v106 = v142;
                      uint64_t v107 = v136;
                      unint64_t v85 = (unint64_t)v140;
                      uint64_t v108 = v90;
                      sub_10006E0D8(v142, v136, (unint64_t)v140);
                      sub_10006E0D8(v106, v107, v85);
                      if (!v108) {
                        goto LABEL_204;
                      }
                      __break(1u);
                      goto LABEL_176;
                    default:
LABEL_155:
                      if (v93 == v94) {
                        goto LABEL_173;
                      }
                      if (v91)
                      {
                        if (v91 == 1)
                        {
                          if (v93 < v143 || v93 >= v144) {
                            goto LABEL_220;
                          }
                          uint64_t v95 = __DataStorage._bytes.getter();
                          if (!v95) {
                            goto LABEL_245;
                          }
                          uint64_t v96 = v95;
                          uint64_t v97 = __DataStorage._offset.getter();
                          int64_t v98 = v93 - v97;
                          if (__OFSUB__(v93, v97)) {
                            goto LABEL_222;
                          }
                        }
                        else
                        {
                          if (v93 < *(void *)(a2 + 16)) {
                            goto LABEL_219;
                          }
                          if (v93 >= *(void *)(a2 + 24)) {
                            goto LABEL_221;
                          }
                          uint64_t v100 = __DataStorage._bytes.getter();
                          if (!v100) {
                            goto LABEL_246;
                          }
                          uint64_t v96 = v100;
                          uint64_t v101 = __DataStorage._offset.getter();
                          int64_t v98 = v93 - v101;
                          if (__OFSUB__(v93, v101)) {
                            goto LABEL_223;
                          }
                        }
                        char v99 = *(unsigned char *)(v96 + v98);
                        a2 = (uint64_t)v141;
                        LODWORD(v91) = v139;
                        uint64_t v90 = v138;
                      }
                      else
                      {
                        if (v93 >= v75) {
                          goto LABEL_218;
                        }
                        LOBYTE(v152) = v143;
                        BYTE1(v152) = v135;
                        BYTE2(v152) = v134;
                        BYTE3(v152) = v132;
                        BYTE4(v152) = v131;
                        BYTE5(v152) = v130;
                        BYTE6(v152) = v129;
                        HIBYTE(v152) = v128;
                        LOBYTE(v153) = v137;
                        BYTE1(v153) = v127;
                        BYTE2(v153) = v126;
                        BYTE3(v153) = v125;
                        BYTE4(v153) = v124;
                        BYTE5(v153) = v123;
                        char v99 = v133[v92];
                      }
                      *(unsigned char *)(v145 + v92) = v99;
                      uint64_t v102 = (char *)(v76 + 128);
                      if (v76 >= 0xFFFFFFFFFFFFFF80)
                      {
                        __break(1u);
LABEL_209:
                        __break(1u);
LABEL_210:
                        __break(1u);
LABEL_211:
                        __break(1u);
LABEL_212:
                        __break(1u);
LABEL_213:
                        __break(1u);
LABEL_214:
                        __break(1u);
LABEL_215:
                        __break(1u);
LABEL_216:
                        __break(1u);
                        goto LABEL_217;
                      }
                      ++v92;
                      v76 += 128;
                      if (v102 == v14) {
                        goto LABEL_173;
                      }
                      break;
                  }
                }
              }
LABEL_203:
              uint64_t v120 = v142;
              uint64_t v121 = v136;
              unint64_t v122 = (unint64_t)v140;
              sub_10006E0D8(v142, v136, (unint64_t)v140);
              sub_10006E0D8(v120, v121, v122);
              goto LABEL_204;
            }
            unint64_t v76 = *((void *)&v157 + 1);
            uint64_t v75 = v157;
            uint64_t v77 = *((void *)&v157 + 1) >> 62;
            switch(*((void *)&v157 + 1) >> 62)
            {
              case 1:
                LODWORD(v78) = DWORD1(v157) - v157;
                if (__OFSUB__(DWORD1(v157), v157)) {
                  goto LABEL_236;
                }
                uint64_t v78 = (int)v78;
LABEL_134:
                if (v78 == a2) {
                  goto LABEL_135;
                }
                goto LABEL_147;
              case 2:
                uint64_t v80 = *(void *)(v157 + 16);
                uint64_t v79 = *(void *)(v157 + 24);
                BOOL v69 = __OFSUB__(v79, v80);
                uint64_t v78 = v79 - v80;
                if (!v69) {
                  goto LABEL_134;
                }
                __break(1u);
LABEL_130:
                if (v66 >= 0x80) {
                  goto LABEL_147;
                }
LABEL_135:
                unint64_t v81 = sub_10008C940(3uLL, 3, v142);
                unsigned __int8 v82 = _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO0F9AlgorithmO8rawValueAISgs5UInt8V_tcfC_0(v81);
                if (v82 == 8) {
                  unsigned __int8 v82 = 0;
                }
                unint64_t v83 = sub_1001922FC(v82);
                if (!v83) {
                  goto LABEL_235;
                }
                uint64_t v84 = v77;
                unint64_t v85 = v139 / v83;
                switch(v84)
                {
                  case 1:
                    LODWORD(v86) = HIDWORD(v75) - v75;
                    if (__OFSUB__(HIDWORD(v75), v75)) {
                      goto LABEL_237;
                    }
                    uint64_t v86 = (int)v86;
LABEL_143:
                    if (!v86) {
                      goto LABEL_247;
                    }
                    unint64_t v89 = 0x7FFFFFFFFFFFFFFFLL / v86;
                    if ((v89 & 0x8000000000000000) != 0 || v89 < v85) {
                      goto LABEL_200;
                    }
                    if (v83 > v139) {
                      goto LABEL_147;
                    }
LABEL_176:
                    int64_t v144 = v76;
                    break;
                  case 2:
                    uint64_t v88 = *(void *)(v75 + 16);
                    uint64_t v87 = *(void *)(v75 + 24);
                    BOOL v69 = __OFSUB__(v87, v88);
                    uint64_t v86 = v87 - v88;
                    if (!v69) {
                      goto LABEL_143;
                    }
                    goto LABEL_238;
                  case 3:
                    goto LABEL_247;
                  default:
                    uint64_t v86 = BYTE6(v76);
                    goto LABEL_143;
                }
                break;
              case 3:
                goto LABEL_130;
              default:
                uint64_t v78 = BYTE14(v157);
                goto LABEL_134;
            }
            do
            {
              if (!v85) {
                goto LABEL_224;
              }
              size_t v154 = &type metadata for Data;
              int v155 = &protocol witness table for Data;
              int64_t v152 = (long long *)v75;
              uint64_t v153 = (char *)v76;
              uint64_t v109 = sub_1000369C4(&v152, (uint64_t)&type metadata for Data);
              uint64_t v110 = *v109;
              unint64_t v111 = v109[1];
              switch(v111 >> 62)
              {
                case 1uLL:
                  if (v110 >> 32 < (int)v110) {
                    goto LABEL_228;
                  }
                  unint64_t v113 = v144;
                  sub_100013D44(v75, v144);
                  sub_100013D44(v75, v113);
                  sub_100013D44(v110, v111);
                  if (__DataStorage._bytes.getter() && __OFSUB__((int)v110, __DataStorage._offset.getter())) {
                    goto LABEL_234;
                  }
                  unint64_t v76 = v144;
                  __DataStorage._length.getter();
                  a3 = (unint64_t)&v151;
                  Data._Representation.append(contentsOf:)();
                  sub_10000C970(v110, v111);
                  Swift::UInt16 v14 = v140;
                  break;
                case 2uLL:
                  uint64_t v112 = *(void *)(v110 + 16);
                  int64_t v143 = *(void *)(v110 + 24);
                  sub_100013D44(v75, v76);
                  sub_100013D44(v75, v76);
                  swift_retain();
                  swift_retain();
                  if (__DataStorage._bytes.getter() && __OFSUB__(v112, __DataStorage._offset.getter())) {
                    goto LABEL_233;
                  }
                  if (__OFSUB__(v143, v112)) {
                    goto LABEL_229;
                  }
                  __DataStorage._length.getter();
                  a3 = (unint64_t)&v151;
                  Data._Representation.append(contentsOf:)();
                  swift_release();
                  swift_release();
                  Swift::UInt16 v14 = v140;
                  unint64_t v76 = v144;
                  break;
                case 3uLL:
                  *(void *)((char *)&v156 + 6) = 0;
                  *(void *)&long long v156 = 0;
                  sub_100013D44(v75, v76);
                  sub_100013D44(v75, v76);
                  a3 = (unint64_t)&v151;
                  goto LABEL_178;
                default:
                  *(void *)&long long v156 = *v109;
                  WORD4(v156) = v111;
                  BYTE10(v156) = BYTE2(v111);
                  BYTE11(v156) = BYTE3(v111);
                  BYTE12(v156) = BYTE4(v111);
                  BYTE13(v156) = BYTE5(v111);
                  sub_100013D44(v75, v76);
                  sub_100013D44(v75, v76);
                  a3 = (unint64_t)&v151;
LABEL_178:
                  Data._Representation.append(contentsOf:)();
                  Swift::UInt16 v14 = v140;
                  break;
              }
              sub_100010754((uint64_t)&v152);
              sub_10000C970(v75, v76);
              --v85;
            }
            while (v85);
            unint64_t v137 = *((void *)&v151 + 1);
            a2 = v151;
            uint64_t v91 = *((void *)&v151 + 1) >> 62;
            switch(*((void *)&v151 + 1) >> 62)
            {
              case 1:
                LODWORD(v114) = DWORD1(v151) - v151;
                if (__OFSUB__(DWORD1(v151), v151)) {
                  goto LABEL_243;
                }
                uint64_t v114 = (int)v114;
LABEL_196:
                if (v139 >> 7 != v114) {
                  goto LABEL_200;
                }
                if (!v91)
                {
                  Swift::UInt16 v14 = v147;
                  if (v147)
                  {
                    uint64_t v91 = 0;
                    uint64_t v90 = 0;
                    goto LABEL_151;
                  }
                  goto LABEL_203;
                }
                if (v91 == 1) {
                  uint64_t v90 = (int)v151;
                }
                else {
                  uint64_t v90 = *(void *)(v151 + 16);
                }
                Swift::UInt16 v14 = v147;
                if (v147) {
                  goto LABEL_151;
                }
LABEL_173:
                uint64_t v103 = v142;
                uint64_t v104 = v136;
                unint64_t v105 = (unint64_t)v140;
                sub_10006E0D8(v142, v136, (unint64_t)v140);
                sub_10006E0D8(v103, v104, v105);
                sub_10000C970(a2, v137);
LABEL_204:
                sub_10000C970(v157, *((unint64_t *)&v157 + 1));
                return v146;
              case 2:
                uint64_t v116 = *(void *)(v151 + 16);
                uint64_t v115 = *(void *)(v151 + 24);
                BOOL v69 = __OFSUB__(v115, v116);
                uint64_t v114 = v115 - v116;
                if (!v69) {
                  goto LABEL_196;
                }
                goto LABEL_244;
              case 3:
                goto LABEL_148;
              default:
                uint64_t v114 = BYTE6(v137);
                goto LABEL_196;
            }
          case 3:
            if (v64 < 0x80) {
              goto LABEL_124;
            }
            uint64_t v71 = 0;
            goto LABEL_120;
          default:
            if (BYTE14(v157) >= a2) {
              goto LABEL_124;
            }
            goto LABEL_114;
        }
    }
  }
}

void *sub_1000A0F28(uint64_t a1, int a2, unint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    uint64_t v32 = _swiftEmptyArrayStorage;
    sub_10008345C(0, v5, 0);
    unint64_t v6 = _swiftEmptyArrayStorage;
    unsigned int v9 = a2 & 0xFFFF00FF;
    for (uint64_t i = (unsigned char *)(a1 + 80); ; i += 56)
    {
      uint64_t v11 = *((void *)i - 5);
      uint64_t v12 = *((void *)i - 4);
      unint64_t v13 = *((void *)i - 3);
      char v14 = *(i - 16);
      uint64_t v15 = *((void *)i - 1);
      char v16 = *i;
      unsigned __int16 v24 = *((_WORD *)i - 24);
      uint64_t v25 = v11;
      uint64_t v26 = v12;
      unint64_t v27 = v13;
      char v28 = v14;
      uint64_t v29 = v15;
      char v30 = v16;
      sub_10006E968(v11, v12, v13);
      swift_bridgeObjectRetain();
      sub_1000920DC(&v24, v9, a3, v31);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      sub_10006E0D8(v11, v12, v13);
      swift_bridgeObjectRelease();
      uint64_t v17 = v31[0];
      uint64_t v18 = v31[1];
      uint64_t v32 = v6;
      unint64_t v20 = v6[2];
      unint64_t v19 = v6[3];
      if (v20 >= v19 >> 1)
      {
        sub_10008345C(v19 > 1, v20 + 1, 1);
        unint64_t v6 = v32;
      }
      long long v6[2] = v20 + 1;
      unint64_t v21 = &v6[2 * v20];
      v21[4] = v17;
      v21[5] = v18;
      if (!--v5) {
        return v6;
      }
    }
    sub_10006E0D8(v11, v12, v13);
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t sub_1000A10B0(void *a1)
{
  uint64_t v2 = sub_100010BCC(&qword_10047E6D0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  int64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_1000A32C8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  char v9 = 0;
  sub_1000A68EC();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v6 = v8;
  char v9 = 1;
  sub_1000A6940();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_100010754((uint64_t)a1);
  return v6;
}

uint64_t sub_1000A1290(void *a1)
{
  uint64_t v3 = (uint64_t)sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v1)
  {
    sub_1000369C4(v7, v7[3]);
    uint64_t v3 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    sub_100010754((uint64_t)v7);
    BOOL v4 = (v3 & 7) == 7 || (v3 & 7) == 0;
    if (v4 || (~v3 & 5) == 0)
    {
      sub_10000F000();
      swift_allocError();
      *(_OWORD *)uint64_t v5 = xmmword_1003B00B0;
      *(unsigned char *)(v5 + 16) = 2;
      swift_willThrow();
    }
  }
  sub_100010754((uint64_t)a1);
  return v3;
}

uint64_t sub_1000A13A4(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_10047E6C0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[3];
  sub_1000369C4(a1, v7);
  sub_1000A33C4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100010754((uint64_t)a1);
  }
  else
  {
    v11[15] = 0;
    unsigned __int16 v8 = KeyedDecodingContainer.decode(_:forKey:)();
    v11[14] = 1;
    unsigned __int16 v9 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    sub_100010754((uint64_t)a1);
    return v8 | (v9 << 16);
  }
  return v7;
}

uint64_t sub_1000A1548(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_10047E6C8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_1000A3370();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return sub_100010754((uint64_t)a1);
  }
  v11[15] = 0;
  unsigned __int8 v7 = KeyedDecodingContainer.decode(_:forKey:)();
  v11[14] = 1;
  unsigned __int8 v8 = KeyedDecodingContainer.decode(_:forKey:)();
  v11[13] = 2;
  unsigned __int8 v9 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100010754((uint64_t)a1);
  return (unsigned __int16)(v8 << 8) | (v9 << 16) | v7;
}

uint64_t sub_1000A1718(void *a1)
{
  uint64_t v3 = type metadata accessor for CodingUserInfoKey();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v1) {
    return sub_100010754((uint64_t)a1);
  }
  sub_100039448((uint64_t)v20, v21);
  UnkeyedDecodingContainer.inferredDecode<A>()();
  uint64_t v7 = v18;
  sub_100039448((uint64_t)v20, v21);
  UnkeyedDecodingContainer.inferredDecode<A>()();
  uint64_t v8 = (unsigned __int16)v18;
  sub_100039448((uint64_t)v20, v21);
  UnkeyedDecodingContainer.inferredDecode<A>()();
  uint64_t v16 = v18;
  uint64_t v17 = v8;
  sub_1000369C4(a1, a1[3]);
  uint64_t v10 = dispatch thunk of Decoder.userInfo.getter();
  if (qword_10047BFB0 != -1) {
    swift_once();
  }
  uint64_t v11 = sub_1000151B8(v3, (uint64_t)static CodingUserInfoKey.channelInformationHasAuxillaryBitmap);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v11, v3);
  uint64_t v12 = v17;
  if (*(void *)(v10 + 16) && (unint64_t v13 = sub_1000313F0((uint64_t)v6), (v14 & 1) != 0))
  {
    sub_1000107A4(*(void *)(v10 + 56) + 32 * v13, (uint64_t)&v18);
  }
  else
  {
    long long v18 = 0u;
    long long v19 = 0u;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if (!*((void *)&v19 + 1))
  {
    sub_1000380B4((uint64_t)&v18, &qword_10047D0D0);
LABEL_15:
    unint64_t v15 = 0;
    goto LABEL_16;
  }
  if ((swift_dynamicCast() & 1) == 0 || v22 != 1) {
    goto LABEL_15;
  }
  sub_100039448((uint64_t)v20, v21);
  sub_100010BCC(&qword_10047E770);
  sub_1000A6C54();
  UnkeyedDecodingContainer.inferredDecode<A>()();
  unint64_t v15 = (unint64_t)(unsigned __int16)v18 << 48;
LABEL_16:
  sub_100010754((uint64_t)v20);
  sub_100010754((uint64_t)a1);
  return v7 | (v12 << 16) | (v16 << 32) | v15;
}

uint64_t sub_1000A1AB0(void *a1)
{
  uint64_t v3 = a1[3];
  sub_1000369C4(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (!v1)
  {
    sub_100039448((uint64_t)v6, v7);
    sub_1000A6C00();
    UnkeyedDecodingContainer.inferredDecode<A>()();
    uint64_t v3 = v5;
    sub_100010BCC(&qword_10047E210);
    sub_100039448((uint64_t)v6, v7);
    sub_10000F9CC(&qword_10047E768, &qword_10047E210);
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    sub_100010754((uint64_t)v6);
  }
  sub_100010754((uint64_t)a1);
  return v3;
}

unint64_t sub_1000A1C18()
{
  unint64_t result = qword_10047E340;
  if (!qword_10047E340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E340);
  }
  return result;
}

uint64_t sub_1000A1C6C(void *a1)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v1) {
    return sub_100010754((uint64_t)a1);
  }
  sub_100039448((uint64_t)v18, v19);
  sub_1000A6844();
  UnkeyedDecodingContainer.inferredDecode<A>()();
  int v3 = v20;
  sub_100039448((uint64_t)v18, v19);
  UnkeyedDecodingContainer.inferredDecode<A>()();
  int v4 = v20;
  sub_100039448((uint64_t)v18, v19);
  UnkeyedDecodingContainer.inferredDecode<A>()();
  int v5 = v20;
  unint64_t v6 = NANIntervalDuration.deprecatedAvailabilityMapSize.getter(v3);
  uint64_t v7 = v19;
  sub_100039448((uint64_t)v18, v19);
  uint64_t v8 = UnkeyedDecodingContainer.decodeData(with:)(v6, v7);
  unint64_t v11 = v9;
  uint64_t v12 = v8;
  switch(v9 >> 62)
  {
    case 1uLL:
      uint64_t v13 = (int)v8;
      uint64_t v14 = v8 >> 32;
      goto LABEL_7;
    case 2uLL:
      uint64_t v13 = *(void *)(v8 + 16);
      uint64_t v14 = *(void *)(v8 + 24);
LABEL_7:
      sub_100013D44(v8, v9);
      if (v14 < v13)
      {
        __break(1u);
        JUMPOUT(0x1000A1EE8);
      }
      return result;
    default:
      break;
  }
  uint64_t v15 = Data.subdata(in:)();
  unint64_t v17 = v16;
  sub_10000C970(v12, v11);
  sub_100013D44(v15, v17);
  sub_10000C970(v12, v11);
  sub_100010754((uint64_t)v18);
  sub_100010754((uint64_t)a1);
  sub_10000C970(v15, v17);
  return v3 | (v4 << 8) | (v5 << 16);
}

uint64_t sub_1000A1EF8(void *a1)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v1) {
    return sub_100010754((uint64_t)a1);
  }
  sub_100039448((uint64_t)v19, v20);
  sub_1000A6898();
  UnkeyedDecodingContainer.inferredDecode<A>()();
  unsigned __int8 v3 = v21;
  unsigned __int8 v4 = _s7CoreP2P19NANIntervalDurationO8rawValueACSgs5UInt8V_tcfC_0((v21 >> 4) & 3);
  if (v4 == 4)
  {
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v5 = xmmword_1003B00B0;
    *(unsigned char *)(v5 + 16) = 2;
    swift_willThrow();
    sub_100010754((uint64_t)v19);
    return sub_100010754((uint64_t)a1);
  }
  unsigned __int8 v6 = v4;
  unint64_t v7 = NANIntervalDuration.deprecatedAvailabilityMapSize.getter(v4);
  uint64_t v8 = v20;
  sub_100039448((uint64_t)v19, v20);
  uint64_t v9 = UnkeyedDecodingContainer.decodeData(with:)(v7, v8);
  unint64_t v12 = v10;
  uint64_t v13 = v9;
  switch(v10 >> 62)
  {
    case 1uLL:
      uint64_t v14 = (int)v9;
      uint64_t v15 = v9 >> 32;
      goto LABEL_9;
    case 2uLL:
      uint64_t v14 = *(void *)(v9 + 16);
      uint64_t v15 = *(void *)(v9 + 24);
LABEL_9:
      sub_100013D44(v9, v10);
      if (v15 < v14)
      {
        __break(1u);
        JUMPOUT(0x1000A2144);
      }
      return result;
    default:
      break;
  }
  uint64_t v16 = Data.subdata(in:)();
  unint64_t v18 = v17;
  sub_10000C970(v13, v12);
  sub_100013D44(v16, v18);
  sub_10000C970(v13, v12);
  sub_100010754((uint64_t)v19);
  sub_100010754((uint64_t)a1);
  sub_10000C970(v16, v18);
  return ((v3 & 0x40) << 10) | v3 & 0xF | (v6 << 8);
}

uint64_t sub_1000A2154@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v7 = a2 >> 62;
  sub_100013D44(a1, a2);
  unint64_t v8 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for BinaryDecoder();
  uint64_t v9 = (void *)swift_allocObject();
  v9[5] = &_swiftEmptyDictionarySingleton;
  void v9[2] = a1;
  v9[3] = a2;
  uint64_t v10 = 0;
  switch(v7)
  {
    case 1uLL:
      uint64_t v10 = (int)a1;
      break;
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      break;
    default:
      break;
  }
  v9[4] = v10;
  swift_beginAccess();
  v9[5] = v8;
  swift_bridgeObjectRelease();
  char v22 = &type metadata for BinaryDecoder.UnkeyedContainer;
  unint64_t v23 = sub_10008B64C();
  v21[0] = v9;
  sub_100039448((uint64_t)v21, (uint64_t)&type metadata for BinaryDecoder.UnkeyedContainer);
  sub_1000A6994();
  swift_retain();
  UnkeyedDecodingContainer.inferredDecode<A>()();
  if (v3) {
    goto LABEL_10;
  }
  if ((~v18 & 5) == 0)
  {
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v11 = xmmword_1003B00B0;
    *(unsigned char *)(v11 + 16) = 2;
    swift_willThrow();
LABEL_10:
    sub_10000C970(a1, a2);
    swift_release();
    sub_100010754((uint64_t)v21);
    return sub_10006E0D8(0, 0, 0xF000000000000000);
  }
  if ((v18 & 0x1000) != 0)
  {
    sub_100039448((uint64_t)v21, (uint64_t)v22);
    sub_1000A6940();
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    unsigned __int16 v16 = v18;
    uint64_t v17 = a3;
    uint64_t v12 = v18;
    uint64_t v13 = v19;
    unint64_t v14 = v20;
  }
  else
  {
    unsigned __int16 v16 = v18;
    uint64_t v17 = a3;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    unint64_t v14 = 0xF000000000000000;
  }
  unint64_t v24 = v23;
  sub_100039448((uint64_t)v21, (uint64_t)v22);
  sub_1000A69E8();
  UnkeyedDecodingContainer.inferredDecode<A>()();
  sub_10000C970(a1, a2);
  swift_release();
  swift_bridgeObjectRetain();
  sub_100010754((uint64_t)v21);
  sub_10006E968(v12, v13, v14);
  sub_10006E0D8(v12, v13, v14);
  uint64_t result = swift_bridgeObjectRelease();
  *(_WORD *)uint64_t v17 = v16;
  *(void *)(v17 + 8) = v12;
  *(void *)(v17 + 16) = v13;
  *(void *)(v17 + 24) = v14;
  *(unsigned char *)(v17 + 32) = v18;
  *(void *)(v17 + 40) = v19;
  *(unsigned char *)(v17 + 48) = v20;
  return result;
}

uint64_t sub_1000A2474@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v2) {
    return sub_100010754((uint64_t)a1);
  }
  sub_100010BCC(&qword_10047E6F8);
  sub_100039448((uint64_t)v9, v10);
  sub_10000F9CC(&qword_10047E700, &qword_10047E6F8);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  sub_1000A2154(v7, v8, (uint64_t)v11);
  sub_100010754((uint64_t)v9);
  uint64_t result = sub_100010754((uint64_t)a1);
  long long v6 = v11[1];
  *(_OWORD *)a2 = v11[0];
  *(_OWORD *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 32) = v11[2];
  *(unsigned char *)(a2 + 48) = v12;
  return result;
}

uint64_t sub_1000A25C0(void *a1)
{
  uint64_t v3 = type metadata accessor for CodingUserInfoKey();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  long long v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v8 = (char *)&v17 - v7;
  uint64_t v9 = a1[3];
  sub_1000369C4(a1, v9);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v1)
  {
    sub_100010754((uint64_t)a1);
  }
  else
  {
    sub_100039448((uint64_t)v24, v25);
    sub_1000A6A3C();
    UnkeyedDecodingContainer.inferredDecode<A>()();
    uint64_t v9 = v22[0];
    if (v22[0])
    {
      unint64_t v26 = (unint64_t)v22[0] >> 4;
      uint64_t v11 = a1[3];
      uint64_t v20 = a1[4];
      sub_1000369C4(a1, v11);
      uint64_t v12 = dispatch thunk of Decoder.userInfo.getter();
      if (qword_10047BFB0 != -1) {
        swift_once();
      }
      uint64_t v13 = sub_1000151B8(v3, (uint64_t)static CodingUserInfoKey.channelInformationHasAuxillaryBitmap);
      unint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
      uint64_t v19 = v13;
      uint64_t v20 = v4 + 16;
      unsigned __int16 v18 = v14;
      ((void (*)(char *))v14)(v8);
      if (*(void *)(v12 + 16) && (unint64_t v15 = sub_1000313F0((uint64_t)v8), (v16 & 1) != 0)) {
        sub_1000107A4(*(void *)(v12 + 56) + 32 * v15, (uint64_t)v23);
      }
      else {
        memset(v23, 0, sizeof(v23));
      }
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v8, v3);
      sub_100035FD4((uint64_t)a1, (uint64_t)v22);
      sub_100010BCC(&qword_10047E720);
      type metadata accessor for BinaryDecoder();
      if (swift_dynamicCast())
      {
        v18(v6, v19, v3);
        void v21[3] = &type metadata for Bool;
        LOBYTE(v21[0]) = (v9 & 2) != 0;
        swift_beginAccess();
        sub_100027AFC((uint64_t)v21, (uint64_t)v6);
        swift_endAccess();
        swift_release();
      }
      sub_10008B90C(0, v26, (uint64_t)v24);
      sub_100035FD4((uint64_t)a1, (uint64_t)v22);
      if (swift_dynamicCast())
      {
        v18(v6, v19, v3);
        sub_1000A6A90((uint64_t)v23, (uint64_t)v21);
        swift_beginAccess();
        sub_100027AFC((uint64_t)v21, (uint64_t)v6);
        swift_endAccess();
        swift_release();
      }
      sub_1000380B4((uint64_t)v23, &qword_10047D0D0);
    }
    else
    {
      sub_10008B7A8(0, (unint64_t)v22[0] >> 4, (uint64_t)v24);
    }
    sub_100010754((uint64_t)v24);
    sub_100010754((uint64_t)a1);
  }
  return v9;
}

uint64_t sub_1000A2A10(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6974617265706FLL && a2 == 0xEE007373616C4367;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x426C656E6E616863 && a2 == 0xED000070616D7469 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001003DB330 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001003DB350)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

unint64_t sub_1000A2C08(unint64_t a1)
{
  unint64_t result = NANIntervalDuration.timeUnits.getter(0);
  if (!result)
  {
    __break(1u);
    goto LABEL_9;
  }
  unint64_t v4 = a1 / result;
  if (((a1 / result) & 0x8000000000000000) != 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + 16;
  uint64_t v8 = v6;
  unint64_t result = NANIntervalDuration.timeUnits.getter(0);
  if (!result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (((a1 / result) & 0x8000000000000000) != 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  char v7 = *((unsigned char *)&v8 + ((a1 / result) >> 3));
  unint64_t result = NANIntervalDuration.timeUnits.getter(0);
  if (!result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (((a1 / result) & 0x8000000000000000) == 0)
  {
    *(unsigned char *)(v5 + ((a1 / result) >> 3)) = v7 | (1 << (v4 & 7));
    return result;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_1000A2CB8(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3 - a1;
  if (a3 < a1)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (a2 <= 0)
  {
    if (v3 < 0x80)
    {
      if (a2 < 0) {
        return 0;
      }
      goto LABEL_11;
    }
  }
  else
  {
    if (a2 > v3 >> 7) {
      return 0;
    }
    if (!((unint64_t)a2 >> 57)) {
      goto LABEL_11;
    }
    __break(1u);
  }
  if (a2 < 0)
  {
LABEL_15:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_11:
  BOOL v5 = __CFADD__(a1, a2 << 7);
  uint64_t result = a1 + (a2 << 7);
  if (v5)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_1000A2D6C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3 - a1;
  if (a3 < a1)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (a2 <= 0)
  {
    if (v3 < 0x10)
    {
      if (a2 < 0) {
        return 0;
      }
      goto LABEL_11;
    }
  }
  else
  {
    if (a2 > v3 >> 4) {
      return 0;
    }
    if (!((unint64_t)a2 >> 60)) {
      goto LABEL_11;
    }
    __break(1u);
  }
  if (a2 < 0)
  {
LABEL_15:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_11:
  BOOL v5 = __CFADD__(a1, 16 * a2);
  uint64_t result = a1 + 16 * a2;
  if (v5)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  return result;
}

uint64_t _s7CoreP2P10TimeBitmapV14repeatingPerDWyA2C4SlotV_A3FtFZ_0(char a1, char a2, char a3, char a4)
{
  if (qword_10047BF70 != -1) {
    swift_once();
  }
  unint64_t v8 = (unsigned __int16)static NANBitmap.Time.Control.perDiscoveryWindow;
  sub_1000834E4(0, 4, 0);
  unint64_t v10 = _swiftEmptyArrayStorage[2];
  unint64_t v9 = _swiftEmptyArrayStorage[3];
  int64_t v11 = v9 >> 1;
  unint64_t v12 = v10 + 1;
  if (v9 >> 1 <= v10)
  {
    sub_1000834E4(v9 > 1, v10 + 1, 1);
    unint64_t v9 = _swiftEmptyArrayStorage[3];
    int64_t v11 = v9 >> 1;
  }
  _swiftEmptyArrayStorage[2] = v12;
  *((unsigned char *)&_swiftEmptyArrayStorage[4] + v10) = a1;
  unint64_t v13 = v10 + 2;
  if (v11 < (uint64_t)(v10 + 2))
  {
    sub_1000834E4(v9 > 1, v10 + 2, 1);
    unint64_t v9 = _swiftEmptyArrayStorage[3];
    int64_t v11 = v9 >> 1;
  }
  _swiftEmptyArrayStorage[2] = v13;
  *((unsigned char *)&_swiftEmptyArrayStorage[4] + v12) = a2;
  unint64_t v14 = v10 + 3;
  if (v11 < (uint64_t)(v10 + 3)) {
    sub_1000834E4(v9 > 1, v10 + 3, 1);
  }
  _swiftEmptyArrayStorage[2] = v14;
  *((unsigned char *)&_swiftEmptyArrayStorage[4] + v13) = a3;
  unint64_t v15 = _swiftEmptyArrayStorage[3];
  if ((uint64_t)(v10 + 4) > (uint64_t)(v15 >> 1)) {
    sub_1000834E4(v15 > 1, v10 + 4, 1);
  }
  _swiftEmptyArrayStorage[2] = v10 + 4;
  *((unsigned char *)&_swiftEmptyArrayStorage[4] + v14) = a4;
  uint64_t v16 = sub_1001265EC((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v18 = v17;
  swift_release();
  return sub_10009F7E4(v8, v16, v18);
}

unint64_t sub_1000A3014()
{
  unint64_t result = qword_10047E350;
  if (!qword_10047E350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E350);
  }
  return result;
}

unint64_t sub_1000A3068()
{
  unint64_t result = qword_10047E368;
  if (!qword_10047E368)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E368);
  }
  return result;
}

unint64_t sub_1000A30BC()
{
  unint64_t result = qword_10047E380;
  if (!qword_10047E380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E380);
  }
  return result;
}

uint64_t sub_1000A3110(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000A3158()
{
  unint64_t result = qword_10047E388;
  if (!qword_10047E388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E388);
  }
  return result;
}

uint64_t sub_1000A31AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010BCC(&qword_10047E390);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A3214(uint64_t a1)
{
  return a1;
}

unint64_t sub_1000A3244()
{
  unint64_t result = qword_10047E398;
  if (!qword_10047E398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E398);
  }
  return result;
}

uint64_t sub_1000A3298(uint64_t a1)
{
  return a1;
}

unint64_t sub_1000A32C8()
{
  unint64_t result = qword_10047E3A8;
  if (!qword_10047E3A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E3A8);
  }
  return result;
}

unint64_t sub_1000A331C()
{
  unint64_t result = qword_10047E3B0;
  if (!qword_10047E3B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E3B0);
  }
  return result;
}

unint64_t sub_1000A3370()
{
  unint64_t result = qword_10047E3C0;
  if (!qword_10047E3C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E3C0);
  }
  return result;
}

unint64_t sub_1000A33C4()
{
  unint64_t result = qword_10047E3D0;
  if (!qword_10047E3D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E3D0);
  }
  return result;
}

unint64_t sub_1000A3418()
{
  unint64_t result = qword_10047E3D8;
  if (!qword_10047E3D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E3D8);
  }
  return result;
}

unint64_t sub_1000A346C()
{
  unint64_t result = qword_10047E3E8;
  if (!qword_10047E3E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E3E8);
  }
  return result;
}

unint64_t sub_1000A34C0()
{
  unint64_t result = qword_10047E3F0;
  if (!qword_10047E3F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E3F0);
  }
  return result;
}

unint64_t sub_1000A3518()
{
  unint64_t result = qword_10047E3F8;
  if (!qword_10047E3F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E3F8);
  }
  return result;
}

unint64_t sub_1000A3570()
{
  unint64_t result = qword_10047E400;
  if (!qword_10047E400)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E400);
  }
  return result;
}

unint64_t sub_1000A35C8()
{
  unint64_t result = qword_10047E408;
  if (!qword_10047E408)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E408);
  }
  return result;
}

unint64_t sub_1000A3620()
{
  unint64_t result = qword_10047E410;
  if (!qword_10047E410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E410);
  }
  return result;
}

unint64_t sub_1000A3678()
{
  unint64_t result = qword_10047E418;
  if (!qword_10047E418)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E418);
  }
  return result;
}

unint64_t sub_1000A36D0()
{
  unint64_t result = qword_10047E420;
  if (!qword_10047E420)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E420);
  }
  return result;
}

unint64_t sub_1000A3728()
{
  unint64_t result = qword_10047E428;
  if (!qword_10047E428)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E428);
  }
  return result;
}

unint64_t sub_1000A3780()
{
  unint64_t result = qword_10047E430;
  if (!qword_10047E430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E430);
  }
  return result;
}

unint64_t sub_1000A37D8()
{
  unint64_t result = qword_10047E438;
  if (!qword_10047E438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E438);
  }
  return result;
}

unint64_t sub_1000A3830()
{
  unint64_t result = qword_10047E440;
  if (!qword_10047E440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E440);
  }
  return result;
}

unint64_t sub_1000A3888()
{
  unint64_t result = qword_10047E448;
  if (!qword_10047E448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E448);
  }
  return result;
}

unint64_t sub_1000A38E0()
{
  unint64_t result = qword_10047E450;
  if (!qword_10047E450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E450);
  }
  return result;
}

unint64_t sub_1000A3938()
{
  unint64_t result = qword_10047E458;
  if (!qword_10047E458)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E458);
  }
  return result;
}

uint64_t sub_1000A398C()
{
  return sub_1000A3FD0(&qword_10047E460, &qword_10047E468, (void (*)(void))sub_1000A39DC);
}

unint64_t sub_1000A39DC()
{
  unint64_t result = qword_10047E470;
  if (!qword_10047E470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E470);
  }
  return result;
}

uint64_t sub_1000A3A30()
{
  return sub_1000A3FD0(&qword_10047E478, &qword_10047E480, (void (*)(void))sub_1000A39DC);
}

unint64_t sub_1000A3A84()
{
  unint64_t result = qword_10047E488;
  if (!qword_10047E488)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E488);
  }
  return result;
}

unint64_t sub_1000A3ADC()
{
  unint64_t result = qword_10047E490;
  if (!qword_10047E490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E490);
  }
  return result;
}

uint64_t sub_1000A3B30()
{
  return sub_1000A3FD0(&qword_10047E498, &qword_10047E468, (void (*)(void))sub_1000A3938);
}

uint64_t sub_1000A3B80()
{
  return sub_1000A3FD0(&qword_10047E4A0, &qword_10047E480, (void (*)(void))sub_1000A3938);
}

unint64_t sub_1000A3BD4()
{
  unint64_t result = qword_10047E4A8;
  if (!qword_10047E4A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E4A8);
  }
  return result;
}

unint64_t sub_1000A3C2C()
{
  unint64_t result = qword_10047E4B0;
  if (!qword_10047E4B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E4B0);
  }
  return result;
}

uint64_t sub_1000A3C80()
{
  return sub_10000F9CC(&qword_10047E4B8, &qword_10047E468);
}

uint64_t sub_1000A3CBC()
{
  return sub_10000F9CC(&qword_10047E4C0, &qword_10047E480);
}

uint64_t sub_1000A3CF8()
{
  return sub_10000F9CC(&qword_10047E4C8, &qword_10047E4D0);
}

unint64_t sub_1000A3D38()
{
  unint64_t result = qword_10047E4D8;
  if (!qword_10047E4D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E4D8);
  }
  return result;
}

unint64_t sub_1000A3D90()
{
  unint64_t result = qword_10047E4E0;
  if (!qword_10047E4E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E4E0);
  }
  return result;
}

uint64_t sub_1000A3DE4()
{
  return sub_1000A3FD0(&qword_10047E4E8, &qword_10047E4F0, (void (*)(void))sub_1000A3E34);
}

unint64_t sub_1000A3E34()
{
  unint64_t result = qword_10047E4F8;
  if (!qword_10047E4F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E4F8);
  }
  return result;
}

uint64_t sub_1000A3E88()
{
  return sub_1000A3FD0(&qword_10047E500, &qword_10047E508, (void (*)(void))sub_1000A3E34);
}

unint64_t sub_1000A3EDC()
{
  unint64_t result = qword_10047E510;
  if (!qword_10047E510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E510);
  }
  return result;
}

uint64_t sub_1000A3F30()
{
  return sub_1000A3FD0(&qword_10047E518, &qword_10047E4F0, (void (*)(void))sub_1000A3D90);
}

uint64_t sub_1000A3F80()
{
  return sub_1000A3FD0(&qword_10047E520, &qword_10047E508, (void (*)(void))sub_1000A3D90);
}

uint64_t sub_1000A3FD0(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100014434(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000A4040()
{
  unint64_t result = qword_10047E528;
  if (!qword_10047E528)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E528);
  }
  return result;
}

uint64_t sub_1000A4094()
{
  return sub_10000F9CC(&qword_10047E530, &qword_10047E4F0);
}

uint64_t sub_1000A40D0()
{
  return sub_10000F9CC(&qword_10047E538, &qword_10047E508);
}

uint64_t sub_1000A410C()
{
  return sub_10000F9CC(&qword_10047E540, &qword_10047E548);
}

uint64_t sub_1000A4148()
{
  return sub_10000F9CC(&qword_10047E550, &qword_10047E558);
}

unint64_t sub_1000A4188()
{
  unint64_t result = qword_10047E560;
  if (!qword_10047E560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E560);
  }
  return result;
}

unint64_t sub_1000A41E0()
{
  unint64_t result = qword_10047E568;
  if (!qword_10047E568)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E568);
  }
  return result;
}

unint64_t sub_1000A4238()
{
  unint64_t result = qword_10047E570;
  if (!qword_10047E570)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E570);
  }
  return result;
}

unint64_t sub_1000A4290()
{
  unint64_t result = qword_10047E578;
  if (!qword_10047E578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E578);
  }
  return result;
}

unint64_t sub_1000A42E8()
{
  unint64_t result = qword_10047E580;
  if (!qword_10047E580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E580);
  }
  return result;
}

unint64_t sub_1000A4340()
{
  unint64_t result = qword_10047E588;
  if (!qword_10047E588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E588);
  }
  return result;
}

unint64_t sub_1000A4398()
{
  unint64_t result = qword_10047E590;
  if (!qword_10047E590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E590);
  }
  return result;
}

unint64_t sub_1000A43F0()
{
  unint64_t result = qword_10047E598;
  if (!qword_10047E598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E598);
  }
  return result;
}

unint64_t sub_1000A4448()
{
  unint64_t result = qword_10047E5A0;
  if (!qword_10047E5A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E5A0);
  }
  return result;
}

unint64_t sub_1000A44A0()
{
  unint64_t result = qword_10047E5A8;
  if (!qword_10047E5A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E5A8);
  }
  return result;
}

unint64_t sub_1000A44F8()
{
  unint64_t result = qword_10047E5B0;
  if (!qword_10047E5B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E5B0);
  }
  return result;
}

unint64_t sub_1000A4550()
{
  unint64_t result = qword_10047E5B8;
  if (!qword_10047E5B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E5B8);
  }
  return result;
}

unint64_t sub_1000A45A8()
{
  unint64_t result = qword_10047E5C0;
  if (!qword_10047E5C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E5C0);
  }
  return result;
}

unint64_t sub_1000A4600()
{
  unint64_t result = qword_10047E5C8;
  if (!qword_10047E5C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E5C8);
  }
  return result;
}

unint64_t sub_1000A4658()
{
  unint64_t result = qword_10047E5D0;
  if (!qword_10047E5D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E5D0);
  }
  return result;
}

unint64_t sub_1000A46B0()
{
  unint64_t result = qword_10047E5D8;
  if (!qword_10047E5D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E5D8);
  }
  return result;
}

unint64_t sub_1000A4708()
{
  unint64_t result = qword_10047E5E0;
  if (!qword_10047E5E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E5E0);
  }
  return result;
}

unint64_t sub_1000A4760()
{
  unint64_t result = qword_10047E5E8;
  if (!qword_10047E5E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E5E8);
  }
  return result;
}

unint64_t sub_1000A47B8()
{
  unint64_t result = qword_10047E5F0;
  if (!qword_10047E5F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E5F0);
  }
  return result;
}

ValueMetadata *type metadata accessor for NANBitmap()
{
  return &type metadata for NANBitmap;
}

ValueMetadata *type metadata accessor for NANBitmap.Band()
{
  return &type metadata for NANBitmap.Band;
}

ValueMetadata *type metadata accessor for NANBitmap.Band.Iterator()
{
  return &type metadata for NANBitmap.Band.Iterator;
}

uint64_t initializeBufferWithCopyOfBuffer for NANBitmap.Channel(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for NANBitmap.Channel(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for NANBitmap.Channel(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

ValueMetadata *type metadata accessor for NANBitmap.Channel()
{
  return &type metadata for NANBitmap.Channel;
}

uint64_t sub_1000A48B0(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  sub_100013D44(v3, v4);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithCopy for NANBitmap.Time(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  sub_100013D44(v3, v4);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  sub_10000C970(v5, v6);
  return a1;
}

uint64_t assignWithTake for NANBitmap.Time(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_10000C970(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANBitmap.Time(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 16) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 16) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for NANBitmap.Time(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2)
    {
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANBitmap.Time()
{
  return &type metadata for NANBitmap.Time;
}

ValueMetadata *type metadata accessor for NANBitmap.Time.Control()
{
  return &type metadata for NANBitmap.Time.Control;
}

ValueMetadata *type metadata accessor for TimeBitmap()
{
  return &type metadata for TimeBitmap;
}

ValueMetadata *type metadata accessor for TimeBitmap.Slot()
{
  return &type metadata for TimeBitmap.Slot;
}

ValueMetadata *type metadata accessor for TimeBitmap.SlotsView()
{
  return &type metadata for TimeBitmap.SlotsView;
}

uint64_t destroy for NANAvailabilityEntry(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (v1 >> 60 != 15) {
    sub_10000C970(*(void *)(a1 + 16), v1);
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NANAvailabilityEntry(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  unint64_t v4 = *(void *)(a2 + 24);
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
  }
  else
  {
    *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
    uint64_t v5 = *(void *)(a2 + 16);
    sub_100013D44(v5, v4);
    *(void *)(a1 + 16) = v5;
    *(void *)(a1 + 24) = v4;
  }
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  char v6 = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = v6;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NANAvailabilityEntry(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v4 = a1 + 8;
  uint64_t v5 = (long long *)(a2 + 8);
  if (*(void *)(a1 + 24) >> 60 == 15)
  {
    if (*(void *)(a2 + 24) >> 60 == 15)
    {
      long long v6 = *v5;
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(_OWORD *)uint64_t v4 = v6;
    }
    else
    {
      *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
      uint64_t v8 = *(void *)(a2 + 16);
      unint64_t v9 = *(void *)(a2 + 24);
      sub_100013D44(v8, v9);
      *(void *)(a1 + 16) = v8;
      *(void *)(a1 + 24) = v9;
    }
  }
  else if (*(void *)(a2 + 24) >> 60 == 15)
  {
    sub_1000A4C6C(a1 + 8);
    uint64_t v7 = *((void *)v5 + 2);
    *(_OWORD *)uint64_t v4 = *v5;
    *(void *)(v4 + 16) = v7;
  }
  else
  {
    *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
    uint64_t v10 = *(void *)(a2 + 16);
    unint64_t v11 = *(void *)(a2 + 24);
    sub_100013D44(v10, v11);
    uint64_t v12 = *(void *)(a1 + 16);
    unint64_t v13 = *(void *)(a1 + 24);
    *(void *)(a1 + 16) = v10;
    *(void *)(a1 + 24) = v11;
    sub_10000C970(v12, v13);
  }
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  char v14 = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000A4C6C(uint64_t a1)
{
  return a1;
}

__n128 initializeWithTake for NANAvailabilityEntry(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for NANAvailabilityEntry(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v4 = a1 + 8;
  uint64_t v5 = a2 + 8;
  unint64_t v6 = *(void *)(a1 + 24);
  if (v6 >> 60 != 15)
  {
    unint64_t v7 = *(void *)(a2 + 24);
    if (v7 >> 60 != 15)
    {
      *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
      uint64_t v8 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v7;
      sub_10000C970(v8, v6);
      goto LABEL_6;
    }
    sub_1000A4C6C(a1 + 8);
  }
  *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
  *(void *)(v4 + 16) = *(void *)(v5 + 16);
LABEL_6:
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  char v9 = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = v9;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAvailabilityEntry(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAvailabilityEntry(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 48) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANAvailabilityEntry()
{
  return &type metadata for NANAvailabilityEntry;
}

ValueMetadata *type metadata accessor for NANAvailabilityEntry.UsagePreference()
{
  return &type metadata for NANAvailabilityEntry.UsagePreference;
}

ValueMetadata *type metadata accessor for NANAvailabilityEntry.Control()
{
  return &type metadata for NANAvailabilityEntry.Control;
}

uint64_t sub_1000A4E44(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  char v3 = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NANAvailabilityEntry.BandChannelEntries(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  char v3 = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for NANAvailabilityEntry.BandChannelEntries(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  char v3 = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAvailabilityEntry.BandChannelEntries(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAvailabilityEntry.BandChannelEntries(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANAvailabilityEntry.BandChannelEntries()
{
  return &type metadata for NANAvailabilityEntry.BandChannelEntries;
}

ValueMetadata *type metadata accessor for NANAvailabilityEntry.BandChannelEntries.Control()
{
  return &type metadata for NANAvailabilityEntry.BandChannelEntries.Control;
}

ValueMetadata *type metadata accessor for NANAvailabilityEntry.BandChannelEntries.Control.EntriesType()
{
  return &type metadata for NANAvailabilityEntry.BandChannelEntries.Control.EntriesType;
}

uint64_t destroy for NANAttribute.P2POperation(uint64_t a1)
{
  return sub_10000C970(*(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t initializeWithCopy for NANScheduleEntry(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  unint64_t v4 = *(void *)(a2 + 24);
  sub_100013D44(v3, v4);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  return a1;
}

uint64_t assignWithCopy for NANScheduleEntry(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  unint64_t v4 = *(void *)(a2 + 24);
  sub_100013D44(v3, v4);
  uint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  sub_10000C970(v5, v6);
  return a1;
}

uint64_t assignWithTake for NANScheduleEntry(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10000C970(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANScheduleEntry(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 24) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 24) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for NANScheduleEntry(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 13;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2)
    {
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANScheduleEntry()
{
  return &type metadata for NANScheduleEntry;
}

uint64_t getEnumTagSinglePayload for NANMapIDs(unsigned __int16 *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  unsigned int v2 = a2 + 0xFFFF;
  if ((a2 + 0xFFFF) <= 0xFFFEFFFF) {
    unsigned int v3 = 2;
  }
  else {
    unsigned int v3 = 4;
  }
  if (v2 < 0xFF0000) {
    unsigned int v3 = 1;
  }
  if (v2 >= 0x10000) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  switch(v4)
  {
    case 1:
      uint64_t v4 = *((unsigned __int8 *)a1 + 2);
      if (!*((unsigned char *)a1 + 2)) {
        return v4;
      }
      goto LABEL_17;
    case 2:
      uint64_t v4 = a1[1];
      if (!a1[1]) {
        return v4;
      }
      goto LABEL_17;
    case 3:
      __break(1u);
      JUMPOUT(0x1000A5228);
    case 4:
      uint64_t v4 = *(unsigned int *)(a1 + 1);
      if (v4) {
LABEL_17:
      }
        uint64_t v4 = (*a1 | (v4 << 16)) - 0xFFFF;
      break;
    default:
      return v4;
  }
  return v4;
}

uint64_t storeEnumTagSinglePayload for NANMapIDs(uint64_t result, int a2, int a3)
{
  unsigned int v3 = a3 + 0xFFFF;
  if ((a3 + 0xFFFF) <= 0xFFFEFFFF) {
    int v4 = 2;
  }
  else {
    int v4 = 4;
  }
  if (v3 < 0xFF0000) {
    int v4 = 1;
  }
  if (v3 >= 0x10000) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2)
  {
    unsigned int v7 = ((a2 - 1) >> 16) + 1;
    *(_WORD *)__n128 result = a2 - 1;
    switch(v6)
    {
      case 1:
        *(unsigned char *)(result + 2) = v7;
        return result;
      case 2:
        *(_WORD *)(result + 2) = v7;
        return result;
      case 3:
        goto LABEL_21;
      case 4:
        *(_DWORD *)(result + 2) = v7;
        return result;
      default:
        return result;
    }
  }
  switch(v6)
  {
    case 1:
      *(unsigned char *)(result + 2) = 0;
      break;
    case 2:
      *(_WORD *)(result + 2) = 0;
      break;
    case 3:
LABEL_21:
      __break(1u);
      JUMPOUT(0x1000A52F8);
    case 4:
      *(_DWORD *)(result + 2) = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for NANMapIDs()
{
  return &type metadata for NANMapIDs;
}

ValueMetadata *type metadata accessor for NANMapID()
{
  return &type metadata for NANMapID;
}

ValueMetadata *type metadata accessor for NonNANOperatingChannelInformation()
{
  return &type metadata for NonNANOperatingChannelInformation;
}

ValueMetadata *type metadata accessor for NonNANBeaconInformation()
{
  return &type metadata for NonNANBeaconInformation;
}

uint64_t destroy for NANServiceInfo(uint64_t a1)
{
  return sub_10000C970(*(void *)(a1 + 8), *(void *)(a1 + 16));
}

uint64_t assignWithCopy for DeprecatedNANAvailability(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  sub_100013D44(v3, v4);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  sub_10000C970(v5, v6);
  return a1;
}

uint64_t assignWithTake for DeprecatedNANAvailability(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_10000C970(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for DeprecatedNANAvailability(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 2);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for DeprecatedNANAvailability(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 2) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DeprecatedNANAvailability()
{
  return &type metadata for DeprecatedNANAvailability;
}

uint64_t _s7CoreP2P25DeprecatedNANAvailabilityVwCP_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  sub_100013D44(v3, v4);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithTake for DeprecatedNANAvailabilityEntry(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_10000C970(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANServiceInfo(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && a1[24]) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 4;
  int v5 = v3 - 4;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANServiceInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DeprecatedNANAvailabilityEntry()
{
  return &type metadata for DeprecatedNANAvailabilityEntry;
}

ValueMetadata *type metadata accessor for DeprecatedNANAvailabilityEntry.CodingKeys()
{
  return &type metadata for DeprecatedNANAvailabilityEntry.CodingKeys;
}

ValueMetadata *type metadata accessor for DeprecatedNANAvailability.AvailabilityControl()
{
  return &type metadata for DeprecatedNANAvailability.AvailabilityControl;
}

ValueMetadata *type metadata accessor for NonNANBeaconInformation.CodingKeys()
{
  return &type metadata for NonNANBeaconInformation.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for NonNANOperatingChannelInformation.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A56F4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NonNANOperatingChannelInformation.CodingKeys()
{
  return &type metadata for NonNANOperatingChannelInformation.CodingKeys;
}

unsigned char *_s7CoreP2P20NANAvailabilityEntryV18BandChannelEntriesV7ControlV11EntriesTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A57F8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANScheduleEntry.CodingKeys()
{
  return &type metadata for NANScheduleEntry.CodingKeys;
}

uint64_t getEnumTagSinglePayload for NANBloomFilter.Index(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s7CoreP2P20NANAvailabilityEntryV15UsagePreferenceOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A598CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANBitmap.Channel.CodingKeys()
{
  return &type metadata for NANBitmap.Channel.CodingKeys;
}

unint64_t sub_1000A59C8()
{
  unint64_t result = qword_10047E5F8;
  if (!qword_10047E5F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E5F8);
  }
  return result;
}

unint64_t sub_1000A5A20()
{
  unint64_t result = qword_10047E600;
  if (!qword_10047E600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E600);
  }
  return result;
}

unint64_t sub_1000A5A78()
{
  unint64_t result = qword_10047E608;
  if (!qword_10047E608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E608);
  }
  return result;
}

unint64_t sub_1000A5AD0()
{
  unint64_t result = qword_10047E610;
  if (!qword_10047E610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E610);
  }
  return result;
}

unint64_t sub_1000A5B28()
{
  unint64_t result = qword_10047E618;
  if (!qword_10047E618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E618);
  }
  return result;
}

unint64_t sub_1000A5B80()
{
  unint64_t result = qword_10047E620;
  if (!qword_10047E620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E620);
  }
  return result;
}

unint64_t sub_1000A5BD8()
{
  unint64_t result = qword_10047E628;
  if (!qword_10047E628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E628);
  }
  return result;
}

unint64_t sub_1000A5C30()
{
  unint64_t result = qword_10047E630;
  if (!qword_10047E630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E630);
  }
  return result;
}

unint64_t sub_1000A5C88()
{
  unint64_t result = qword_10047E638;
  if (!qword_10047E638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E638);
  }
  return result;
}

unint64_t sub_1000A5CE0()
{
  unint64_t result = qword_10047E640;
  if (!qword_10047E640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E640);
  }
  return result;
}

unint64_t sub_1000A5D38()
{
  unint64_t result = qword_10047E648;
  if (!qword_10047E648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E648);
  }
  return result;
}

unint64_t sub_1000A5D90()
{
  unint64_t result = qword_10047E650;
  if (!qword_10047E650)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E650);
  }
  return result;
}

unint64_t sub_1000A5DE8()
{
  unint64_t result = qword_10047E658;
  if (!qword_10047E658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E658);
  }
  return result;
}

unint64_t sub_1000A5E40()
{
  unint64_t result = qword_10047E660;
  if (!qword_10047E660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E660);
  }
  return result;
}

unint64_t sub_1000A5E98()
{
  unint64_t result = qword_10047E668;
  if (!qword_10047E668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E668);
  }
  return result;
}

unint64_t sub_1000A5EF0()
{
  unint64_t result = qword_10047E670;
  if (!qword_10047E670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E670);
  }
  return result;
}

unint64_t sub_1000A5F48()
{
  unint64_t result = qword_10047E678;
  if (!qword_10047E678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E678);
  }
  return result;
}

unint64_t sub_1000A5FA0()
{
  unint64_t result = qword_10047E680;
  if (!qword_10047E680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E680);
  }
  return result;
}

unint64_t sub_1000A5FF8()
{
  unint64_t result = qword_10047E688;
  if (!qword_10047E688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E688);
  }
  return result;
}

uint64_t sub_1000A604C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x444970616DLL && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D746942656D6974 && a2 == 0xEA00000000007061)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1000A6144(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000014 && a2 == 0x80000001003DB370
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4E6C656E6E616863 && a2 == 0xED00007265626D75 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001003DB390)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1000A62B8(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000022 && a2 == 0x80000001003DB3B0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001003DB3E0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1000A63A8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6C6F72746E6F63 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6974617265706FLL && a2 == 0xEE007373616C4367 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x4E6C656E6E616863 && a2 == 0xED00007265626D75 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6962616C69617661 && a2 == 0xEF70614D7974696CLL)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

unint64_t sub_1000A65D0()
{
  unint64_t result = qword_10047E690;
  if (!qword_10047E690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E690);
  }
  return result;
}

unint64_t sub_1000A6624()
{
  unint64_t result = qword_10047E698;
  if (!qword_10047E698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E698);
  }
  return result;
}

uint64_t sub_1000A6678(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000A66D8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000A6734(uint64_t a1, void (*a2)(void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_1000A6778(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000A67E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000A6844()
{
  unint64_t result = qword_10047E6B0;
  if (!qword_10047E6B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E6B0);
  }
  return result;
}

unint64_t sub_1000A6898()
{
  unint64_t result = qword_10047E6B8;
  if (!qword_10047E6B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E6B8);
  }
  return result;
}

unint64_t sub_1000A68EC()
{
  unint64_t result = qword_10047E6D8;
  if (!qword_10047E6D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E6D8);
  }
  return result;
}

unint64_t sub_1000A6940()
{
  unint64_t result = qword_10047E6E0;
  if (!qword_10047E6E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E6E0);
  }
  return result;
}

unint64_t sub_1000A6994()
{
  unint64_t result = qword_10047E708;
  if (!qword_10047E708)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E708);
  }
  return result;
}

unint64_t sub_1000A69E8()
{
  unint64_t result = qword_10047E710;
  if (!qword_10047E710)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E710);
  }
  return result;
}

unint64_t sub_1000A6A3C()
{
  unint64_t result = qword_10047E718;
  if (!qword_10047E718)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E718);
  }
  return result;
}

uint64_t sub_1000A6A90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010BCC(&qword_10047D0D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000A6AF8()
{
  unint64_t result = qword_10047E728;
  if (!qword_10047E728)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E728);
  }
  return result;
}

unint64_t sub_1000A6B4C()
{
  unint64_t result = qword_10047E730;
  if (!qword_10047E730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E730);
  }
  return result;
}

uint64_t sub_1000A6BA0(unsigned char *a1, uint64_t a2)
{
  return sub_10009E7BC(a1, a2, **(void **)(v2 + 16), *(unsigned char *)(*(void *)(v2 + 16) + 8));
}

uint64_t sub_1000A6BB8()
{
  return Data._Representation.replaceSubrange(_:with:count:)();
}

unint64_t sub_1000A6C00()
{
  unint64_t result = qword_10047E760;
  if (!qword_10047E760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E760);
  }
  return result;
}

unint64_t sub_1000A6C54()
{
  unint64_t result = qword_10047E778;
  if (!qword_10047E778)
  {
    sub_100014434(&qword_10047E770);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E778);
  }
  return result;
}

BOOL sub_1000A6D20(uint64_t a1, uint64_t a2)
{
  return sub_10008F204(a1, a2);
}

BOOL sub_1000A6DD4(unsigned int a1, uint64_t a2)
{
  return ((~*(unsigned __int8 *)(a2 + ((unint64_t)a1 >> 3)) >> (a1 & 7)) & 1) == 0;
}

uint64_t sub_1000A6DF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_10006EC68(a1, (uint64_t)v10, &qword_10047E9F0);
  uint64_t v4 = v10[0];
  uint64_t v5 = v10[1];
  uint64_t v7 = v10[2];
  uint64_t v6 = v10[3];
  uint64_t result = sub_10006EC68(a1, (uint64_t)v11, &qword_10047E9F0);
  if ((v11[32] & 1) == 0)
  {
    if ((v4 & 0x100000000) == 0)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      uint64_t v5 = 0;
      uint64_t v4 = v4;
      char v9 = 0;
      goto LABEL_7;
    }
LABEL_6:
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v5 = 0;
    uint64_t v4 = 0;
    char v9 = -1;
    goto LABEL_7;
  }
  if (v6 == 1) {
    goto LABEL_6;
  }
  char v9 = 1;
  uint64_t result = swift_bridgeObjectRetain();
LABEL_7:
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v7;
  *(void *)(a2 + 24) = v6;
  *(unsigned char *)(a2 + 32) = v9;
  return result;
}

void *static DeviceDriver<>.parse(event:)()
{
  uint64_t v0 = __chkstk_darwin();
  unint64_t v568 = v2;
  unint64_t v569 = v1;
  unint64_t v570 = v4;
  uint64_t v571 = v3;
  unint64_t v5 = v0;
  uint64_t v6 = type metadata accessor for Logger();
  unint64_t v565 = *(void *)(v6 - 8);
  v566.i64[0] = v6;
  __chkstk_darwin();
  unint64_t v567 = (unint64_t)&v520 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DNSRecords.SRV();
  __chkstk_darwin();
  uint64_t v10 = (char *)&v520 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v520 - v11;
  sub_100010BCC(&qword_10047DC58);
  __chkstk_darwin();
  char v14 = (char *)&v520 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v564 = 0;
  uint64_t v15 = type metadata accessor for AWDLStatistics.LowLatencyStatistics(0);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin();
  unint64_t v18 = (char *)&v520 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v563 = v5;
  unint64_t v20 = v5 - 1;
  unsigned __int8 v21 = v973;
  switch(v20)
  {
    case 0uLL:
      sub_100010BCC(&qword_10047DC60);
      uint64_t v22 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
      uint64_t v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16) = xmmword_1003B2450;
      unint64_t v25 = v24 + v23;
      *(_OWORD *)unint64_t v25 = 0u;
      *(_OWORD *)(v25 + 16) = 0u;
      *(_OWORD *)(v25 + 25) = 0u;
      goto LABEL_9;
    case 1uLL:
      sub_100010BCC(&qword_10047DC60);
      uint64_t v26 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v27 = (*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
      uint64_t v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16) = xmmword_1003B2450;
      unint64_t v25 = v24 + v27;
      uint64_t v28 = 2;
      goto LABEL_8;
    case 2uLL:
      sub_100010BCC(&qword_10047DC60);
      uint64_t v29 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v30 = (*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
      uint64_t v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16) = xmmword_1003B2450;
      unint64_t v25 = v24 + v30;
      uint64_t v28 = 3;
      goto LABEL_8;
    case 8uLL:
      type metadata accessor for apple80211_join_status(0);
      uint64_t v32 = v31;
      unint64_t v34 = v570;
      uint64_t v33 = v571;
      sub_100013D44(v571, v570);
      sub_1000C0764(v32, v33, v34, v32, (uint64_t)&v828);
      sub_10006EC68((uint64_t)&v828, (uint64_t)&v845, &qword_10047DC70);
      sub_10006EC68((uint64_t)&v845, (uint64_t)v849, &qword_10047DC70);
      if (sub_10006E3AC((uint64_t)v849) == 1) {
        goto LABEL_241;
      }
      memcpy(v973, v849, 0x1CCuLL);
      sub_100010BCC(&qword_10047DC60);
      uint64_t v35 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v36 = (*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
      uint64_t v37 = swift_allocObject();
      *(_OWORD *)(v37 + 16) = xmmword_1003B2450;
      unint64_t v38 = v37 + v36;
      *(void *)unint64_t v38 = sub_1000C1458() & 0xFFFFFFFFFFFFLL;
      *(void *)(v38 + 8) = v39;
      *(void *)(v38 + 16) = v41;
      *(void *)(v38 + 24) = v40;
      *(void *)(v38 + 32) = 0;
      __int16 v42 = 1024;
      goto LABEL_95;
    case 0xAuLL:
      sub_100010BCC(&qword_10047DC60);
      uint64_t v43 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v44 = (*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
      uint64_t v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16) = xmmword_1003B2450;
      unint64_t v25 = v24 + v44;
      uint64_t v28 = 1;
LABEL_8:
      *(void *)unint64_t v25 = v28;
      *(_OWORD *)(v25 + 24) = 0u;
      *(_OWORD *)(v25 + 8) = 0u;
      *(unsigned char *)(v25 + 40) = 0;
LABEL_9:
      *(unsigned char *)(v25 + 41) = 10;
      goto LABEL_10;
    case 0x2DuLL:
    case 0x40uLL:
    case 0xC2uLL:
    case 0xEAuLL:
      sub_100010BCC(&qword_10047DC60);
      type metadata accessor for DriverEvent(0);
      uint64_t v84 = swift_allocObject();
      *(_OWORD *)(v84 + 16) = xmmword_1003B2450;
      type metadata accessor for DriverEvent.AWDL(0);
      goto LABEL_177;
    case 0x2EuLL:
      type metadata accessor for apple80211_peer_presence_indication(0);
      uint64_t v46 = v45;
      unint64_t v34 = v570;
      uint64_t v33 = v571;
      sub_100013D44(v571, v570);
      sub_1000C0764(v46, v33, v34, v46, (uint64_t)v849);
      if (v849[4].i8[4]) {
        goto LABEL_241;
      }
      if (v849[0].i32[2] != 1) {
        goto LABEL_244;
      }
      __int8 v47 = v849[0].i8[0];
      unint64_t v568 = v849[0].u32[1];
      unint64_t v569 = (unint64_t)v849[0].i64[0] >> 40;
      unint64_t v48 = (unint64_t)v849[0].i64[0] >> 24;
      unint64_t v49 = (unint64_t)v849[0].i64[0] >> 16;
      unint64_t v50 = (unint64_t)v849[0].i64[0] >> 8;
      sub_100010BCC(&qword_10047DC60);
      uint64_t v51 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v52 = v34;
      unint64_t v53 = (*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
      uint64_t v54 = swift_allocObject();
      *(_OWORD *)(v54 + 16) = xmmword_1003B2450;
      int v55 = (__int8 *)(v54 + v53);
      *int v55 = v47;
      v55[1] = v50;
      v55[2] = v49;
      v55[3] = v48;
      v55[4] = v568;
      v55[5] = v569;
      type metadata accessor for DriverEvent.AWDL(0);
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      uint64_t v56 = v571;
      unint64_t v57 = v52;
      goto LABEL_223;
    case 0x2FuLL:
      unint64_t v34 = v570;
      uint64_t v33 = v571;
      unint64_t v58 = v570 >> 62;
      switch(v570 >> 62)
      {
        case 1uLL:
          uint64_t v59 = (int)v571 + 72;
          if (v59 < v571 >> 32) {
            goto LABEL_209;
          }
          goto LABEL_190;
        case 2uLL:
          uint64_t v463 = *(void *)(v571 + 16);
          uint64_t v59 = v463 + 72;
          if (__OFADD__(v463, 72)) {
            __break(1u);
          }
          if (v59 >= *(void *)(v571 + 24)) {
            goto LABEL_190;
          }
          if (v58 == 2) {
            uint64_t v145 = *(void *)(v571 + 16);
          }
          else {
LABEL_209:
          }
            uint64_t v145 = (int)v571;
          if (v59 >= v145) {
            goto LABEL_211;
          }
          __break(1u);
          goto LABEL_251;
        case 3uLL:
          goto LABEL_190;
        default:
          if ((v570 & 0xFF000000000000) < 0x48000000000001)
          {
LABEL_190:
            sub_100013D44(v571, v570);
            goto LABEL_241;
          }
          uint64_t v59 = 72;
LABEL_211:
          sub_100013D44(v571, v570);
          uint64_t v473 = Data._Representation.subscript.getter();
          unint64_t v475 = v474;
          unint64_t v476 = v564;
          sub_100257F94(v473, v474, (uint64_t)&v845);
          if (v476)
          {
            swift_errorRelease();
            sub_10000C970(v473, v475);
            unint64_t v564 = 0;
            goto LABEL_241;
          }
          sub_10000C970(v473, v475);
          v849[2] = v847[0];
          v849[3] = v847[1];
          v849[4].i64[0] = v848;
          v849[0] = (int64x2_t)v845;
          v849[1] = v846;
          unint64_t v564 = 0;
          if (v58)
          {
            if (v58 == 1)
            {
              BOOL v477 = __OFADD__(v59, (int)v33);
              v59 += (int)v33;
              if (!v477)
              {
                uint64_t v478 = v33 >> 32;
                goto LABEL_231;
              }
              __break(1u);
LABEL_254:
              __break(1u);
              JUMPOUT(0x1000ACF60);
            }
            uint64_t v481 = *(void *)(v33 + 16);
            BOOL v477 = __OFADD__(v481, v59);
            v59 += v481;
            if (v477) {
              goto LABEL_254;
            }
            uint64_t v478 = *(void *)(v33 + 24);
          }
          else
          {
            uint64_t v478 = BYTE6(v34);
          }
LABEL_231:
          if (v59 < v478)
          {
            uint64_t v482 = sub_1000C06EC(v59, v33, v34);
            unint64_t v484 = v483;
            unint64_t v485 = v483 >> 62;
            sub_100013D44(v482, v483);
            unint64_t v486 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
            uint64_t v487 = type metadata accessor for BinaryDecoder();
            v488 = (void *)swift_allocObject();
            v488[5] = &_swiftEmptyDictionarySingleton;
            v488[2] = v482;
            v488[3] = v484;
            uint64_t v489 = 0;
            switch(v485)
            {
              case 1uLL:
                uint64_t v489 = (int)v482;
                break;
              case 2uLL:
                uint64_t v489 = *(void *)(v482 + 16);
                break;
              default:
                break;
            }
            v488[4] = v489;
            swift_beginAccess();
            v488[5] = v486;
            swift_bridgeObjectRelease();
            v846.i64[1] = v487;
            v847[0].i64[0] = sub_1000CAF84((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
            v845.i64[0] = (uint64_t)v488;
            unint64_t v490 = v564;
            char v491 = sub_10019F2B0(&v845);
            if (!v490)
            {
              char v502 = v491;
              uint64_t v503 = v492;
              uint64_t v504 = v493;
              uint64_t v505 = v494;
              sub_10000C970(v482, v484);
              sub_100010BCC(&qword_10047DC60);
              uint64_t v506 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
              unint64_t v507 = (*(unsigned __int8 *)(v506 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v506 + 80);
              uint64_t v134 = swift_allocObject();
              *(_OWORD *)(v134 + 16) = xmmword_1003B2450;
              unint64_t v508 = v134 + v507;
              uint64_t v509 = v508 + *(int *)(sub_100010BCC(&qword_10047DC40) + 48);
              *(unsigned char *)unint64_t v508 = v502;
              *(void *)(v508 + 8) = v503;
              *(void *)(v508 + 16) = v504;
              *(void *)(v508 + 24) = v505;
              sub_1000C1128(v509);
              type metadata accessor for DriverEvent.AWDL(0);
              swift_storeEnumTagMultiPayload();
LABEL_114:
              swift_storeEnumTagMultiPayload();
              uint64_t v186 = v571;
LABEL_207:
              unint64_t v187 = v34;
LABEL_208:
              sub_10000C970(v186, v187);
              return (void *)v134;
            }
            swift_errorRelease();
            sub_10000C970(v482, v484);
LABEL_239:
            unint64_t v564 = 0;
LABEL_240:
            uint64_t v33 = v571;
          }
LABEL_241:
          unint64_t v495 = v567;
          Logger.init(subsystem:category:)();
          sub_100013D44(v33, v34);
          sub_100013D44(v33, v34);
          v496 = Logger.logObject.getter();
          os_log_type_t v497 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v496, v497))
          {
            uint64_t v498 = swift_slowAlloc();
            v973[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v498 = 134218242;
            *(void *)&v972[0] = v563;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v498 + 12) = 2080;
            sub_100013D44(v571, v34);
            uint64_t v499 = sub_100036314(0, 0xE000000000000000, v571, v34);
            unint64_t v501 = v500;
            sub_10000C970(v571, v34);
            *(void *)&v972[0] = sub_100010680(v499, v501, v973);
            uint64_t v33 = v571;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_10000C970(v33, v34);
            sub_10000C970(v33, v34);
            _os_log_impl((void *)&_mh_execute_header, v496, v497, "Failed to parse event[%ld]: %s", (uint8_t *)v498, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*(void (**)(unint64_t, uint64_t))(v565 + 8))(v567, v566.i64[0]);
          }
          else
          {
            sub_10000C970(v33, v34);
            sub_10000C970(v33, v34);

            (*(void (**)(unint64_t, uint64_t))(v565 + 8))(v495, v566.i64[0]);
          }
LABEL_244:
          sub_10000C970(v33, v34);
          return _swiftEmptyArrayStorage;
      }
    case 0x30uLL:
      type metadata accessor for apple80211_chip_reset(0);
      uint64_t v61 = v60;
      unint64_t v34 = v570;
      uint64_t v33 = v571;
      sub_100013D44(v571, v570);
      sub_1000C0764(v61, v33, v34, v61, (uint64_t)v849);
      if (v849[0].i8[4]) {
        goto LABEL_241;
      }
      __int32 v62 = v849[0].i32[0];
      sub_100010BCC(&qword_10047DC60);
      uint64_t v63 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v64 = (*(unsigned __int8 *)(v63 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80);
      uint64_t v65 = swift_allocObject();
      *(_OWORD *)(v65 + 16) = xmmword_1003B2450;
      unint64_t v66 = (char *)(v65 + v64);
      char v67 = v62 == 1;
      goto LABEL_22;
    case 0x36uLL:
      type metadata accessor for apple80211_driver_availability(0);
      uint64_t v69 = v68;
      unint64_t v34 = v570;
      uint64_t v33 = v571;
      sub_100013D44(v571, v570);
      sub_1000C0764(v69, v33, v34, v69, (uint64_t)&v828);
      sub_10006EC68((uint64_t)&v828, (uint64_t)&v845, &qword_10047DC78);
      sub_10006EC68((uint64_t)&v845, (uint64_t)v849, &qword_10047DC78);
      if (sub_10006E3C8((uint64_t)v849) == 1 || !v849[0].i32[2]) {
        goto LABEL_241;
      }
      sub_100010BCC(&qword_10047DC60);
      uint64_t v70 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v71 = (*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80);
      uint64_t v65 = swift_allocObject();
      *(_OWORD *)(v65 + 16) = xmmword_1003B2450;
      unint64_t v66 = (char *)(v65 + v71);
      char v67 = 4;
LABEL_22:
      *unint64_t v66 = v67;
      goto LABEL_166;
    case 0x3AuLL:
      sub_100010BCC(&qword_10047DC60);
      type metadata accessor for DriverEvent(0);
      uint64_t v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16) = xmmword_1003B2450;
LABEL_10:
      swift_storeEnumTagMultiPayload();
      return (void *)v24;
    case 0x41uLL:
      type metadata accessor for apple80211_assoc_ready(0);
      uint64_t v73 = v72;
      unint64_t v34 = v570;
      uint64_t v33 = v571;
      sub_100013D44(v571, v570);
      sub_1000C0764(v73, v33, v34, v73, (uint64_t)v849);
      if (v849[1].i8[8]) {
        goto LABEL_241;
      }
      unint64_t v569 = v849[1].u64[0];
      uint64_t v74 = v849[0].i64[1];
      uint64_t v75 = v849[0].i64[0];
      sub_100010BCC(&qword_10047DC60);
      uint64_t v76 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      uint64_t v77 = v33;
      unint64_t v78 = (*(unsigned __int8 *)(v76 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80);
      uint64_t v65 = swift_allocObject();
      *(_OWORD *)(v65 + 16) = xmmword_1003B2450;
      unint64_t v79 = v65 + v78;
      sub_1000C15B8(v75, v74, v569, (uint64_t)v849);
      __int8 v80 = v849[2].i8[8];
      *(void *)unint64_t v79 = v849[0].u16[0];
      *(int64x2_t *)(v79 + 8) = *(int64x2_t *)((char *)v849 + 8);
      *(int64x2_t *)(v79 + 24) = *(int64x2_t *)((char *)&v849[1] + 8);
      *(unsigned char *)(v79 + 40) = v80;
      *(unsigned char *)(v79 + 41) = 5;
      swift_storeEnumTagMultiPayload();
      uint64_t v81 = v77;
      goto LABEL_167;
    case 0x42uLL:
      sub_100010BCC(&qword_10047DC60);
      uint64_t v82 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v83 = (*(unsigned __int8 *)(v82 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80);
      uint64_t v84 = swift_allocObject();
      *(_OWORD *)(v84 + 16) = xmmword_1003B2450;
      *(unsigned char *)(v84 + v83) = 1;
      goto LABEL_28;
    case 0x43uLL:
      sub_100010BCC(&qword_10047DC60);
      uint64_t v85 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v86 = (*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80);
      uint64_t v84 = swift_allocObject();
      *(_OWORD *)(v84 + 16) = xmmword_1003B2450;
      *(unsigned char *)(v84 + v86) = 0;
LABEL_28:
      type metadata accessor for DriverEvent.AWDL(0);
LABEL_177:
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      return (void *)v84;
    case 0x49uLL:
      type metadata accessor for apple80211_message_auth(0);
      uint64_t v88 = v87;
      unint64_t v34 = v570;
      uint64_t v33 = v571;
      sub_100013D44(v571, v570);
      sub_1000C0764(v88, v33, v34, v88, (uint64_t)v849);
      if (v849[6].i8[8]) {
        goto LABEL_241;
      }
      __int16 v89 = v849[0].i16[2];
      __int16 v90 = v849[0].i16[0];
      sub_100010BCC(&qword_10047DC60);
      uint64_t v91 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v92 = (*(unsigned __int8 *)(v91 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80);
      uint64_t v93 = swift_allocObject();
      *(_OWORD *)(v93 + 16) = xmmword_1003B2450;
      unint64_t v94 = v93 + v92;
      unsigned __int8 v95 = _s7CoreP2P15IEEE80211StatusO8rawValueACSgs6UInt16V_tcfC_0(v90 & 0x1FF);
      if (v95 == 54) {
        unsigned __int8 v96 = 1;
      }
      else {
        unsigned __int8 v96 = v95;
      }
      unsigned __int8 v97 = _s7CoreP2P15IEEE80211ReasonO8rawValueACSgs6UInt16V_tcfC_0(v89 & 0x1FF);
      if (v97 == 34) {
        unsigned __int8 v98 = 1;
      }
      else {
        unsigned __int8 v98 = v97;
      }
      *(void *)unint64_t v94 = v96 | ((unint64_t)v98 << 8);
      *(_OWORD *)(v94 + 8) = 0u;
      *(_OWORD *)(v94 + 24) = 0u;
      __int16 v99 = 1792;
      goto LABEL_45;
    case 0x4DuLL:
      type metadata accessor for apple80211_message_assoc(0);
      uint64_t v101 = v100;
      unint64_t v34 = v570;
      uint64_t v33 = v571;
      sub_100013D44(v571, v570);
      sub_1000C0764(v101, v33, v34, v101, (uint64_t)v849);
      if (v849[0].i8[8]) {
        goto LABEL_241;
      }
      __int16 v102 = v849[0].i16[2];
      __int16 v103 = v849[0].i16[0];
      sub_100010BCC(&qword_10047DC60);
      uint64_t v104 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v105 = (*(unsigned __int8 *)(v104 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80);
      uint64_t v93 = swift_allocObject();
      *(_OWORD *)(v93 + 16) = xmmword_1003B2450;
      unint64_t v94 = v93 + v105;
      unsigned __int8 v106 = _s7CoreP2P15IEEE80211StatusO8rawValueACSgs6UInt16V_tcfC_0(v103 & 0x1FF);
      if (v106 == 54) {
        unsigned __int8 v107 = 1;
      }
      else {
        unsigned __int8 v107 = v106;
      }
      unsigned __int8 v108 = _s7CoreP2P15IEEE80211ReasonO8rawValueACSgs6UInt16V_tcfC_0(v102 & 0x1FF);
      if (v108 == 34) {
        unsigned __int8 v109 = 1;
      }
      else {
        unsigned __int8 v109 = v108;
      }
      *(void *)unint64_t v94 = v107 | ((unint64_t)v109 << 8);
      *(_OWORD *)(v94 + 8) = 0u;
      *(_OWORD *)(v94 + 24) = 0u;
      __int16 v99 = 1536;
LABEL_45:
      *(_WORD *)(v94 + 40) = v99;
      goto LABEL_173;
    case 0x51uLL:
      type metadata accessor for apple80211_channel(0);
      uint64_t v111 = v110;
      unint64_t v34 = v570;
      uint64_t v33 = v571;
      sub_100013D44(v571, v570);
      sub_1000C0764(v111, v33, v34, v111, (uint64_t)v849);
      if (v849[0].i8[12]) {
        goto LABEL_241;
      }
      unsigned int v112 = v849[0].u32[2];
      unsigned int v113 = v849[0].u32[1];
      sub_100010BCC(&qword_10047DC60);
      uint64_t v114 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v115 = (*(unsigned __int8 *)(v114 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v114 + 80);
      uint64_t v93 = swift_allocObject();
      *(_OWORD *)(v93 + 16) = xmmword_1003B2450;
      unint64_t v116 = v93 + v115;
      *(void *)unint64_t v116 = sub_1000C7CBC(v113, v112) & 0xFFFFFFFFFFFFLL;
      *(_OWORD *)(v116 + 8) = 0u;
      *(_OWORD *)(v116 + 24) = 0u;
      *(_WORD *)(v116 + 40) = 2048;
      goto LABEL_173;
    case 0x5EuLL:
      type metadata accessor for apple80211_nan_device_role_changed_event_data(0);
      uint64_t v118 = v117;
      unint64_t v34 = v570;
      uint64_t v33 = v571;
      sub_100013D44(v571, v570);
      sub_1000C0764(v118, v33, v34, v118, (uint64_t)v849);
      if (v849[0].i8[12]) {
        goto LABEL_241;
      }
      uint64_t v119 = v849[0].u8[8];
      unint64_t v120 = v849[0].i64[0];
      sub_100010BCC(&qword_10047DC60);
      uint64_t v121 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v122 = (*(unsigned __int8 *)(v121 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v121 + 80);
      uint64_t v123 = swift_allocObject();
      *(_OWORD *)(v123 + 16) = xmmword_1003B2450;
      uint64_t v124 = v123 + v122;
      if (v120 == 3)
      {
        uint64_t v54 = v123;
        __int8 v125 = HIDWORD(v120) == 1;
      }
      else if (v120 == 2)
      {
        uint64_t v54 = v123;
        __int8 v125 = 4;
      }
      else
      {
        uint64_t v54 = v123;
        if (v120 == 1) {
          __int8 v125 = 3;
        }
        else {
          __int8 v125 = 0;
        }
      }
      v849[0].i8[0] = v125;
      v849[0].i64[1] = v119;
      sub_10006ED30((uint64_t)v849);
      sub_10006E544((uint64_t)v849, v124);
      goto LABEL_221;
    case 0x60uLL:
      type metadata accessor for apple80211_nan_cluster_changed_event_data(0);
      uint64_t v127 = v126;
      unint64_t v34 = v570;
      uint64_t v33 = v571;
      sub_100013D44(v571, v570);
      sub_1000C0764(v127, v33, v34, v127, (uint64_t)&v845);
      if (v845.i8[6]) {
        goto LABEL_241;
      }
      __int8 v128 = v845.i8[0];
      unint64_t v129 = v845.u32[0] | ((unint64_t)v845.u16[2] << 32);
      unint64_t v130 = (unint64_t)v845.u16[2] >> 8;
      sub_100010BCC(&qword_10047DC60);
      uint64_t v131 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      uint64_t v132 = v33;
      unint64_t v133 = (*(unsigned __int8 *)(v131 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v131 + 80);
      uint64_t v134 = swift_allocObject();
      *(_OWORD *)(v134 + 16) = xmmword_1003B2450;
      uint64_t v135 = v134 + v133;
      v849[0].i8[0] = v128;
      v136.i64[0] = 0xFFFFFFFFFFFFLL;
      v136.i64[1] = 0xFFFFFFFFFFFFLL;
      uint64x2_t v137 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v129), v136);
      int16x8_t v138 = (int16x8_t)vshlq_u64(v137, (uint64x2_t)xmmword_1003B2EB0);
      *(int32x2_t *)v137.i8 = vmovn_s64((int64x2_t)vshlq_u64(v137, (uint64x2_t)xmmword_1003B2EA0));
      *(int32x2_t *)v138.i8 = vmovn_s64((int64x2_t)v138);
      v138.i16[1] = v138.i16[2];
      v138.i16[2] = v137.i16[0];
      v138.i16[3] = v137.i16[2];
      *(__int32 *)((char *)v849[0].i32 + 1) = vmovn_s16(v138).u32[0];
      v849[0].i8[5] = v130;
      sub_10006ED3C((uint64_t)v849);
      goto LABEL_103;
    case 0x61uLL:
      KeyPath = (uint64_t *)swift_getKeyPath();
      uint64_t v140 = (uint64_t *)swift_getKeyPath();
      unint64_t v34 = v570;
      uint64_t v33 = v571;
      sub_100013D44(v571, v570);
      unint64_t v141 = sub_1000C970C();
      unint64_t v142 = sub_1000C9760();
      sub_1000BFD5C(KeyPath, v140, v33, v34, &type metadata for IEEE80211Frame, v141, (uint64_t)v849, v142);
      swift_release();
      swift_release();
      sub_10006EC68((uint64_t)v849, (uint64_t)&v828, &qword_10047DCC8);
      sub_10006EC68((uint64_t)&v828, (uint64_t)&v845, &qword_10047DCC8);
      if (sub_10006E5F8((uint64_t)&v845) == 1) {
        goto LABEL_241;
      }
      unsigned __int8 v21 = (uint64_t *)v845.i32[0];
      unsigned int v143 = v845.u32[2];
      uint64_t v8 = v846.u8[0];
      unsigned int v144 = v845.u32[3];
      unint64_t v34 = v846.u32[1];
      uint64_t v145 = (uint64_t)v847;
      unint64_t v568 = v846.u32[2];
      sub_100010BCC(&qword_10047DC60);
      uint64_t v146 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v147 = (*(unsigned __int8 *)(v146 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v146 + 80);
      uint64_t v148 = swift_allocObject();
      *(_OWORD *)(v148 + 16) = xmmword_1003B2450;
      unint64_t v569 = v148;
      unint64_t v58 = v148 + v147;
      sub_10006E61C((uint64_t)v847);
      unint64_t v149 = sub_1000C7CBC(v143, v144);
      if ((v149 & 0xFF00000000) == 0x300000000)
      {
        if (qword_10047C1F0 != -1) {
LABEL_251:
        }
          swift_once();
        LODWORD(v149) = static Channel.nanPrimary;
        LOBYTE(v150) = byte_100488664;
        LOBYTE(v151) = byte_100488665;
      }
      else
      {
        unint64_t v150 = HIDWORD(v149);
        unint64_t v151 = v149 >> 40;
      }
      uint64_t v464 = v571;
      int64x2_t v465 = *(int64x2_t *)(v145 + 144);
      v849[8] = *(int64x2_t *)(v145 + 128);
      v849[9] = v465;
      v849[10] = *(int64x2_t *)(v145 + 160);
      *(int64x2_t *)((char *)&v849[10] + 9) = *(int64x2_t *)(v145 + 169);
      int64x2_t v466 = *(int64x2_t *)(v145 + 80);
      v849[4] = *(int64x2_t *)(v145 + 64);
      v849[5] = v466;
      int64x2_t v467 = *(int64x2_t *)(v145 + 112);
      v849[6] = *(int64x2_t *)(v145 + 96);
      v849[7] = v467;
      int64x2_t v468 = *(int64x2_t *)(v145 + 16);
      v849[0] = *(int64x2_t *)v145;
      v849[1] = v468;
      int64x2_t v469 = *(int64x2_t *)(v145 + 48);
      v849[2] = *(int64x2_t *)(v145 + 32);
      v849[3] = v469;
      v849[12].i64[0] = (uint64_t)v21;
      v849[12].i32[2] = v149;
      v849[12].i8[12] = v150;
      v849[12].i8[13] = v151;
      v849[13].i64[0] = v8;
      v849[13].i64[1] = v568 | (v34 << 32);
      sub_10006EAE4((uint64_t)v849);
      sub_10006E544((uint64_t)v849, v58);
      swift_storeEnumTagMultiPayload();
      sub_10006EAF0((uint64_t)&v828);
      uint64_t v459 = v464;
      goto LABEL_193;
    case 0x62uLL:
      type metadata accessor for apple80211_nan_follow_up_tx_complete_event_data(0);
      uint64_t v153 = v152;
      unint64_t v34 = v570;
      uint64_t v33 = v571;
      sub_100013D44(v571, v570);
      sub_1000C0764(v153, v33, v34, v153, (uint64_t)&v845);
      if (v846.i8[4]) {
        goto LABEL_241;
      }
      unsigned int v154 = v846.i32[0];
      unint64_t v155 = v845.u64[1];
      unsigned __int16 v156 = v845.i16[0];
      sub_100010BCC(&qword_10047DC60);
      uint64_t v157 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      uint64_t v132 = v33;
      unint64_t v158 = (*(unsigned __int8 *)(v157 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v157 + 80);
      uint64_t v134 = swift_allocObject();
      *(_OWORD *)(v134 + 16) = xmmword_1003B2450;
      v849[0].i64[0] = sub_1000C0968(v156, v155, v154);
      v849[0].i8[8] = v159;
      sub_10006EC20((uint64_t)v849);
      sub_10006E544((uint64_t)v849, v134 + v158);
      goto LABEL_104;
    case 0x63uLL:
      uint64_t v160 = (uint64_t *)swift_getKeyPath();
      unint64_t v161 = (uint64_t *)swift_getKeyPath();
      unint64_t v34 = v570;
      uint64_t v33 = v571;
      sub_100013D44(v571, v570);
      v162 = (void *)sub_100010BCC(&qword_10047DCD8);
      unint64_t v163 = sub_1000C97B4();
      unint64_t v164 = sub_1000C9760();
      sub_1000BFD5C(v160, v161, v33, v34, v162, v163, (uint64_t)&v845, v164);
      swift_release();
      swift_release();
      uint64_t v165 = v847[0].i64[0];
      if (!v847[0].i64[0]) {
        goto LABEL_241;
      }
      __int8 v166 = v845.i8[0];
      unint64_t v167 = (unint64_t)v845.i64[0] >> 8;
      unint64_t v168 = (unint64_t)v845.i64[0] >> 16;
      unint64_t v169 = (unint64_t)v845.i64[0] >> 24;
      unint64_t v565 = HIDWORD(v845.i64[0]);
      v566.i64[0] = (unint64_t)v845.i64[0] >> 40;
      unint64_t v567 = HIWORD(v845.i64[0]);
      unint64_t v568 = HIBYTE(v845.i64[0]);
      unint64_t v569 = v845.i8[8];
      sub_100010BCC(&qword_10047DC60);
      uint64_t v170 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v171 = (*(unsigned __int8 *)(v170 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v170 + 80);
      uint64_t v172 = swift_allocObject();
      *(_OWORD *)(v172 + 16) = xmmword_1003B2450;
      uint64_t v173 = v172 + v171;
      v849[0].i8[0] = v166;
      v849[0].i8[1] = v167;
      v849[0].i8[2] = v168;
      v849[0].i8[3] = v169;
      v849[0].i8[4] = v565;
      v849[0].i8[5] = v566.i8[0];
      v849[0].i8[6] = v567;
      v849[0].i8[7] = v568;
      v849[0].i64[1] = v569;
      v849[1].i64[0] = v165;
      sub_10006ED24((uint64_t)v849);
      goto LABEL_73;
    case 0x65uLL:
      v174 = (uint64_t *)swift_getKeyPath();
      v175 = (uint64_t *)swift_getKeyPath();
      unint64_t v34 = v570;
      uint64_t v33 = v571;
      sub_100013D44(v571, v570);
      v176 = (void *)sub_100010BCC(&qword_10047DCD8);
      unint64_t v177 = sub_1000C97B4();
      unint64_t v178 = sub_1000C9760();
      sub_1000BFD5C(v174, v175, v33, v34, v176, v177, (uint64_t)&v845, v178);
      swift_release();
      swift_release();
      uint64_t v179 = v847[0].i64[0];
      if (!v847[0].i64[0]) {
        goto LABEL_241;
      }
      __int8 v180 = v845.i8[0];
      unint64_t v181 = (unint64_t)v845.i64[0] >> 8;
      unint64_t v182 = (unint64_t)v845.i64[0] >> 16;
      unint64_t v565 = (unint64_t)v845.i64[0] >> 24;
      v566.i64[0] = HIDWORD(v845.i64[0]);
      unint64_t v567 = (unint64_t)v845.i64[0] >> 40;
      unint64_t v568 = HIWORD(v845.i64[0]);
      unint64_t v569 = v845.i8[8];
      unint64_t v183 = HIBYTE(v845.i64[0]);
      sub_100010BCC(&qword_10047DC60);
      uint64_t v184 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v185 = (*(unsigned __int8 *)(v184 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v184 + 80);
      uint64_t v134 = swift_allocObject();
      *(_OWORD *)(v134 + 16) = xmmword_1003B2450;
      v849[0].i8[0] = v180;
      v849[0].i8[1] = v183;
      v849[0].i8[2] = v181;
      v849[0].i8[3] = v182;
      v849[0].i8[4] = v565;
      v849[0].i8[5] = v566.i8[0];
      v849[0].i8[6] = v567;
      v849[0].i8[7] = v568;
      v849[0].i64[1] = v569;
      v849[1].i64[0] = v179;
      sub_10006ED18((uint64_t)v849);
      sub_10006E544((uint64_t)v849, v134 + v185);
      swift_storeEnumTagMultiPayload();
      unint64_t v187 = v570;
      uint64_t v186 = v571;
      goto LABEL_208;
    case 0x67uLL:
      type metadata accessor for apple80211_nan_publish_terminated_event_data(0);
      uint64_t v189 = v188;
      unint64_t v34 = v570;
      uint64_t v33 = v571;
      sub_100013D44(v571, v570);
      sub_1000C0764(v189, v33, v34, v189, (uint64_t)&v845);
      if (v845.i8[2]) {
        goto LABEL_241;
      }
      __int16 v190 = v845.i16[0];
      sub_100010BCC(&qword_10047DC60);
      uint64_t v191 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v192 = (*(unsigned __int8 *)(v191 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v191 + 80);
      uint64_t v193 = swift_allocObject();
      *(_OWORD *)(v193 + 16) = xmmword_1003B2450;
      uint64_t v194 = v193 + v192;
      uint64_t v37 = v193;
      if ((HIBYTE(v190) - 1) > 5u) {
        uint64_t v195 = 3;
      }
      else {
        uint64_t v195 = qword_1003B7BB0[(char)(HIBYTE(v190) - 1)];
      }
      v849[0].i8[0] = v190;
      v849[0].i64[1] = v195;
      sub_10006EC38((uint64_t)v849);
      goto LABEL_198;
    case 0x68uLL:
      type metadata accessor for apple80211_nan_subscribe_terminated_event_data(0);
      uint64_t v197 = v196;
      unint64_t v34 = v570;
      uint64_t v33 = v571;
      sub_100013D44(v571, v570);
      sub_1000C0764(v197, v33, v34, v197, (uint64_t)&v845);
      if (v845.i8[2]) {
        goto LABEL_241;
      }
      __int16 v198 = v845.i16[0];
      sub_100010BCC(&qword_10047DC60);
      uint64_t v199 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v200 = (*(unsigned __int8 *)(v199 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v199 + 80);
      uint64_t v201 = swift_allocObject();
      *(_OWORD *)(v201 + 16) = xmmword_1003B2450;
      uint64_t v194 = v201 + v200;
      uint64_t v37 = v201;
      if ((HIBYTE(v198) - 1) > 5u) {
        uint64_t v202 = 3;
      }
      else {
        uint64_t v202 = qword_1003B7BB0[(char)(HIBYTE(v198) - 1)];
      }
      v849[0].i8[0] = v198;
      v849[0].i64[1] = v202;
      sub_10006EC44((uint64_t)v849);
LABEL_198:
      sub_10006E544((uint64_t)v849, v194);
      goto LABEL_199;
    case 0x69uLL:
      v203 = (uint64_t *)swift_getKeyPath();
      v204 = (uint64_t *)swift_getKeyPath();
      unint64_t v34 = v570;
      uint64_t v33 = v571;
      sub_100013D44(v571, v570);
      v205 = (void *)sub_100010BCC(&qword_10047DCD8);
      unint64_t v206 = sub_1000C97B4();
      unint64_t v207 = sub_1000C9760();
      sub_1000BFD5C(v203, v204, v33, v34, v205, v206, (uint64_t)&v845, v207);
      swift_release();
      swift_release();
      uint64_t v208 = v847[0].i64[0];
      if (!v847[0].i64[0]) {
        goto LABEL_241;
      }
      __int8 v209 = v845.i8[0];
      unint64_t v210 = (unint64_t)v845.i64[0] >> 8;
      unint64_t v211 = (unint64_t)v845.i64[0] >> 16;
      unint64_t v212 = (unint64_t)v845.i64[0] >> 24;
      unint64_t v565 = HIDWORD(v845.i64[0]);
      v566.i64[0] = (unint64_t)v845.i64[0] >> 40;
      unint64_t v567 = HIWORD(v845.i64[0]);
      unint64_t v568 = HIBYTE(v845.i64[0]);
      unint64_t v569 = v845.i8[8];
      sub_100010BCC(&qword_10047DC60);
      uint64_t v213 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v214 = (*(unsigned __int8 *)(v213 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v213 + 80);
      uint64_t v172 = swift_allocObject();
      *(_OWORD *)(v172 + 16) = xmmword_1003B2450;
      uint64_t v173 = v172 + v214;
      v849[0].i8[0] = v209;
      v849[0].i8[1] = v210;
      v849[0].i8[2] = v211;
      v849[0].i8[3] = v212;
      v849[0].i8[4] = v565;
      v849[0].i8[5] = v566.i8[0];
      v849[0].i8[6] = v567;
      v849[0].i8[7] = v568;
      v849[0].i64[1] = v569;
      v849[1].i64[0] = v208;
      sub_10006EC2C((uint64_t)v849);
LABEL_73:
      sub_10006E544((uint64_t)v849, v173);
      swift_storeEnumTagMultiPayload();
      sub_10000C970(v571, v570);
      return (void *)v172;
    case 0x6FuLL:
      v215 = (uint64_t *)swift_getKeyPath();
      v216 = (uint64_t *)swift_getKeyPath();
      unint64_t v34 = v570;
      uint64_t v33 = v571;
      sub_100013D44(v571, v570);
      v217 = (void *)sub_100010BCC(&qword_10047DCD8);
      unint64_t v218 = sub_1000C97B4();
      unint64_t v219 = sub_1000C9760();
      sub_1000BFD5C(v215, v216, v33, v34, v217, v218, (uint64_t)&v845, v219);
      swift_release();
      swift_release();
      uint64_t v220 = v846.i64[1];
      if (!v846.i64[1]) {
        goto LABEL_241;
      }
      __int8 v221 = v845.i8[8];
      __int8 v222 = v845.i8[0];
      unint64_t v223 = (unint64_t)v845.i64[0] >> 8;
      unint64_t v224 = (unint64_t)v845.i64[0] >> 24;
      unint64_t v560 = HIDWORD(v845.i64[0]);
      unint64_t v561 = (unint64_t)v845.i64[0] >> 40;
      unint64_t v562 = HIWORD(v845.i64[0]);
      unint64_t v563 = HIBYTE(v845.i64[0]);
      unint64_t v564 = (unint64_t)v845.i64[1] >> 8;
      unint64_t v565 = (unint64_t)v845.i64[1] >> 16;
      v566.i64[0] = (unint64_t)v845.i64[1] >> 24;
      unint64_t v567 = HIDWORD(v845.i64[1]);
      unint64_t v568 = (unint64_t)v845.i64[1] >> 40;
      unint64_t v569 = HIWORD(v845.i64[1]);
      sub_100010BCC(&qword_10047DC60);
      uint64_t v225 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v226 = (*(unsigned __int8 *)(v225 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v225 + 80);
      uint64_t v54 = swift_allocObject();
      *(_OWORD *)(v54 + 16) = xmmword_1003B2450;
      v849[0].i8[0] = v222;
      v849[0].i8[1] = v223;
      v849[0].i8[2] = v224;
      v849[0].i8[3] = v560;
      v849[0].i8[4] = v561;
      v849[0].i8[5] = v562;
      v849[0].i8[6] = v563;
      v849[0].i8[7] = v221;
      v849[0].i8[8] = v564;
      v849[0].i8[9] = v565;
      v849[0].i8[10] = v566.i8[0];
      v849[0].i8[11] = v567;
      v849[0].i8[12] = v568;
      v849[0].i8[13] = v569;
      v849[1].i64[0] = v220;
      sub_10006ED0C((uint64_t)v849);
      sub_10006E544((uint64_t)v849, v54 + v226);
      swift_storeEnumTagMultiPayload();
      unint64_t v57 = v570;
      uint64_t v56 = v571;
      goto LABEL_223;
    case 0x70uLL:
      v227 = (uint64_t *)swift_getKeyPath();
      v228 = (uint64_t *)swift_getKeyPath();
      unint64_t v34 = v570;
      uint64_t v33 = v571;
      sub_100013D44(v571, v570);
      v229 = (void *)sub_100010BCC(&qword_10047DCD8);
      unint64_t v230 = sub_1000C97B4();
      unint64_t v231 = sub_1000C9760();
      sub_1000BFD5C(v227, v228, v33, v34, v229, v230, (uint64_t)&v845, v231);
      swift_release();
      swift_release();
      uint64_t v232 = v846.i64[1];
      if (!v846.i64[1]) {
        goto LABEL_241;
      }
      __int8 v233 = v846.i8[0];
      unint64_t v234 = (unint64_t)v846.i64[0] >> 8;
      unint64_t v235 = (unint64_t)v846.i64[0] >> 16;
      unint64_t v569 = (unint64_t)v846.i64[0] >> 24;
      sub_100010BCC(&qword_10047DC60);
      uint64_t v236 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v237 = (*(unsigned __int8 *)(v236 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v236 + 80);
      uint64_t v37 = swift_allocObject();
      *(_OWORD *)(v37 + 16) = xmmword_1003B2450;
      uint64x2_t v238 = (uint64x2_t)vdupq_lane_s64(v845.i64[0], 0);
      v849[0].i8[0] = v845.i8[0];
      *(int8x8_t *)&v849[0].i8[1] = vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v238, (uint64x2_t)xmmword_1003B2EB0), (int32x4_t)vshlq_u64(v238, (uint64x2_t)xmmword_1003B2EA0)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v238, (uint64x2_t)xmmword_1003B2EE0), (int32x4_t)vshlq_u64(v845, (uint64x2_t)xmmword_1003B2ED0))));
      v849[0].i8[9] = v845.i8[15];
      v849[0].i8[10] = v233;
      v849[0].i8[11] = v234;
      v849[0].i8[12] = v235;
      v849[0].i8[13] = v569;
      *(__int32 *)((char *)&v849[0].i32[3] + 2) = v845.i32[2];
      v849[1].i16[1] = v845.i16[6];
      v849[1].i64[1] = v232;
      sub_10006ED00((uint64_t)v849);
      sub_10006E544((uint64_t)v849, v37 + v237);
      swift_storeEnumTagMultiPayload();
      uint64_t v239 = v571;
      goto LABEL_200;
    case 0x71uLL:
      v240 = (uint64_t *)swift_getKeyPath();
      v241 = (uint64_t *)swift_getKeyPath();
      unint64_t v34 = v570;
      uint64_t v33 = v571;
      sub_100013D44(v571, v570);
      v242 = (void *)sub_100010BCC(&qword_10047DCD8);
      unint64_t v243 = sub_1000C97B4();
      unint64_t v244 = sub_1000C9760();
      sub_1000BFD5C(v240, v241, v33, v34, v242, v243, (uint64_t)v849, v244);
      swift_release();
      swift_release();
      uint64_t v245 = v849[1].i64[0];
      if (!v849[1].i64[0]) {
        goto LABEL_241;
      }
      uint64_t v246 = type metadata accessor for DriverEvent(0);
      int8x16_t v566 = (int8x16_t)v849[0];
      uint64x2_t v247 = (uint64x2_t)vdupq_laneq_s64(v849[0], 1);
      unsigned __int32 v248 = v849[0].i32[0];
      __int8 v249 = v849[0].i8[1];
      unint64_t v250 = (unint64_t)v849[0].i64[0] >> 40;
      unint64_t v567 = v849[0].u16[3];
      unint64_t v568 = v849[0].u8[7];
      unint64_t v569 = (unint64_t)v849[0].u64 + 2;
      uint64_t v251 = (uint64_t)vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v247, (uint64x2_t)xmmword_1003B2EB0), (int32x4_t)vshlq_u64(v247, (uint64x2_t)xmmword_1003B2EA0)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64((uint64x2_t)vextq_s8(v566, v566, 8uLL), (uint64x2_t)xmmword_1003B2EC0), (int32x4_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v849[0].i64[0], 0), (uint64x2_t)xmmword_1003B2EA0))));
      sub_100010BCC(&qword_10047DC60);
      unint64_t v252 = (*(unsigned __int8 *)(*(void *)(v246 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v246 - 8) + 80);
      uint64_t v37 = swift_allocObject();
      *(_OWORD *)(v37 + 16) = xmmword_1003B2450;
      uint64_t v253 = v37 + v252;
      v849[0].i8[0] = v248;
      *(unsigned char *)unint64_t v569 = v566.i8[8];
      if (((v248 >> 8) & 0xFE) != 0) {
        __int8 v254 = 2;
      }
      else {
        __int8 v254 = v249;
      }
      v849[0].i8[1] = v254;
      *(uint64_t *)((char *)v849[0].i64 + 3) = v251;
      v849[0].i8[11] = v250;
      v849[0].i8[12] = v567;
      v849[0].i8[13] = v568;
      v849[1].i64[0] = v245;
      sub_10006ECF4((uint64_t)v849);
      sub_10006E544((uint64_t)v849, v253);
      swift_storeEnumTagMultiPayload();
      uint64_t v239 = v33;
      unint64_t v255 = v570;
      goto LABEL_201;
    case 0x74uLL:
      type metadata accessor for apple80211_nan_data_path_established_event_data(0);
      uint64_t v257 = v256;
      unint64_t v34 = v570;
      uint64_t v33 = v571;
      sub_100013D44(v571, v570);
      sub_1000C0764(v257, v33, v34, v257, (uint64_t)&v828);
      sub_10006EC68((uint64_t)&v828, (uint64_t)&v845, &qword_10047DCD0);
      sub_10006EC68((uint64_t)&v845, (uint64_t)v849, &qword_10047DCD0);
      if (sub_10006ECCC((uint64_t)v849) == 1) {
        goto LABEL_241;
      }
      sub_100010BCC(&qword_10047DC60);
      uint64_t v258 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v259 = (*(unsigned __int8 *)(v258 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v258 + 80);
      uint64_t v37 = swift_allocObject();
      *(_OWORD *)(v37 + 16) = xmmword_1003B2450;
      LOBYTE(v828) = v849[0].i8[1];
      *(_DWORD *)((char *)&v828 + 1) = *(__int32 *)((char *)v849[0].i32 + 3);
      *(_WORD *)((char *)&v828 + 5) = *(__int16 *)((char *)&v849[0].i16[3] + 1);
      BYTE7(v828) = v849[0].u8[0] == 1;
      DWORD2(v828) = *(__int32 *)((char *)&v849[0].i32[2] + 1);
      WORD6(v828) = *(__int16 *)((char *)&v849[0].i16[6] + 1);
      sub_10006ECE8((uint64_t)&v828);
      sub_10006E544((uint64_t)&v828, v37 + v259);
      goto LABEL_199;
    case 0x75uLL:
      type metadata accessor for apple80211_nan_data_path_end_event_data(0);
      uint64_t v261 = v260;
      unint64_t v34 = v570;
      uint64_t v33 = v571;
      sub_100013D44(v571, v570);
      sub_1000C0764(v261, v33, v34, v261, (uint64_t)&v845);
      if (v846.i8[12]) {
        goto LABEL_241;
      }
      uint64_t v262 = v845.i64[1];
      uint64_t v263 = v845.i64[0];
      unint64_t v264 = HIDWORD(v845.i64[0]);
      sub_100010BCC(&qword_10047DC60);
      uint64_t v265 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v266 = (*(unsigned __int8 *)(v265 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v265 + 80);
      uint64_t v267 = swift_allocObject();
      *(_OWORD *)(v267 + 16) = xmmword_1003B2450;
      uint64_t v268 = v267 + v266;
      uint64_t v269 = v267;
      if (v264 > 0x14) {
        uint64_t v270 = 3;
      }
      else {
        uint64_t v270 = qword_1003B7BE0[v263 >> 32];
      }
      uint64_t v470 = v571;
      v849[0].i8[0] = v263;
      *(__int16 *)((char *)v849[0].i16 + 1) = v262;
      v849[0].i8[3] = BYTE2(v262);
      v849[0].i8[4] = BYTE3(v262);
      v849[0].i8[5] = BYTE4(v262);
      v849[0].i16[3] = BYTE5(v262);
      v849[0].i64[1] = v270;
      sub_10006EC5C((uint64_t)v849);
      sub_10006E544((uint64_t)v849, v268);
      swift_storeEnumTagMultiPayload();
      uint64_t v471 = v470;
      goto LABEL_204;
    case 0x79uLL:
      type metadata accessor for apple80211_nan_dw_start_event_data(0);
      uint64_t v272 = v271;
      unint64_t v34 = v570;
      uint64_t v33 = v571;
      sub_100013D44(v571, v570);
      sub_1000C0764(v272, v33, v34, v272, (uint64_t)v849);
      if (v849[4].i8[8]) {
        goto LABEL_241;
      }
      __int32 v273 = v849[4].i32[0];
      uint64_t v274 = v849[3].i64[1];
      uint64_t v275 = v849[3].i64[0];
      sub_100010BCC(&qword_10047DC60);
      uint64_t v276 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v277 = (*(unsigned __int8 *)(v276 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v276 + 80);
      uint64_t v278 = swift_allocObject();
      uint64_t v279 = HIWORD(v273);
      *(_OWORD *)(v278 + 16) = xmmword_1003B2450;
      uint64_t v134 = v278;
      uint64_t v280 = v278 + v277;
      uint64_t v281 = __ROR8__(v275, 32);
      uint64_t v282 = __ROR8__(v274, 32);
      unint64_t v283 = sub_1001C7008((unsigned __int16)v273);
      if ((v283 & 0xFF00000000) == 0x300000000)
      {
        if (qword_10047C1F0 != -1) {
          swift_once();
        }
        LODWORD(v283) = static Channel.nanPrimary;
        LOBYTE(v284) = byte_100488664;
        LOBYTE(v285) = byte_100488665;
      }
      else
      {
        unint64_t v284 = HIDWORD(v283);
        unint64_t v285 = v283 >> 40;
      }
      uint64_t v472 = v571;
      v849[0].i64[0] = v279;
      v849[0].i64[1] = v281;
      v849[1].i64[0] = v282;
      v849[1].i32[2] = v283;
      v849[1].i8[12] = v284;
      v849[1].i8[13] = v285;
      sub_10006E5B8((uint64_t)v849);
      sub_10006E544((uint64_t)v849, v280);
      swift_storeEnumTagMultiPayload();
      uint64_t v186 = v472;
      goto LABEL_207;
    case 0x7CuLL:
      type metadata accessor for apple80211_infra_scan_start_event_data(0);
      uint64_t v287 = v286;
      unint64_t v34 = v570;
      uint64_t v33 = v571;
      sub_100013D44(v571, v570);
      sub_1000C0764(v287, v33, v34, v287, (uint64_t)&v828);
      sub_10006EC68((uint64_t)&v828, (uint64_t)&v845, &qword_10047DC68);
      sub_10006EC68((uint64_t)&v845, (uint64_t)v849, &qword_10047DC68);
      if (sub_10006E390((uint64_t)v849) == 1) {
        goto LABEL_241;
      }
      memcpy(v973, v849, 0x193uLL);
      sub_100010BCC(&qword_10047DC60);
      uint64_t v288 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v289 = (*(unsigned __int8 *)(v288 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v288 + 80);
      uint64_t v37 = swift_allocObject();
      *(_OWORD *)(v37 + 16) = xmmword_1003B2450;
      unint64_t v38 = v37 + v289;
      *(void *)unint64_t v38 = sub_1000C17E0();
      *(_OWORD *)(v38 + 8) = 0u;
      *(_OWORD *)(v38 + 24) = 0u;
      __int16 v42 = 256;
LABEL_95:
      *(_WORD *)(v38 + 40) = v42;
      goto LABEL_199;
    case 0x7DuLL:
      type metadata accessor for apple80211_infra_scan_complete_event_data(0);
      uint64_t v291 = v290;
      unint64_t v34 = v570;
      uint64_t v33 = v571;
      sub_100013D44(v571, v570);
      sub_1000C0764(v291, v33, v34, v291, (uint64_t)v849);
      if (v849[0].i8[2]) {
        goto LABEL_241;
      }
      uint64_t v292 = v849[0].u8[0];
      sub_100010BCC(&qword_10047DC60);
      uint64_t v293 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v294 = (*(unsigned __int8 *)(v293 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v293 + 80);
      uint64_t v65 = swift_allocObject();
      *(_OWORD *)(v65 + 16) = xmmword_1003B2450;
      unint64_t v295 = v65 + v294;
      *(void *)unint64_t v295 = v292;
      *(_OWORD *)(v295 + 8) = 0u;
      *(_OWORD *)(v295 + 24) = 0u;
      *(unsigned char *)(v295 + 40) = 0;
      char v296 = 2;
      goto LABEL_165;
    case 0x7EuLL:
      type metadata accessor for apple80211_nan_infra_assoc_start_event_data(0);
      uint64_t v298 = v297;
      unint64_t v34 = v570;
      uint64_t v33 = v571;
      sub_100013D44(v571, v570);
      sub_1000C0764(v298, v33, v34, v298, (uint64_t)v849);
      if (v849[0].i8[12]) {
        goto LABEL_241;
      }
      unint64_t v299 = sub_1000C7CBC(v849[0].u32[1], v849[0].u32[2]);
      if ((v299 & 0xFF00000000) == 0x300000000) {
        goto LABEL_241;
      }
      unint64_t v300 = v299;
      sub_100010BCC(&qword_10047DC60);
      uint64_t v301 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v302 = (*(unsigned __int8 *)(v301 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v301 + 80);
      uint64_t v303 = swift_allocObject();
      *(_OWORD *)(v303 + 16) = xmmword_1003B2450;
      unint64_t v304 = v303 + v302;
      *(void *)unint64_t v304 = v300 & 0xFFFFFFFFFFFFLL;
      *(_OWORD *)(v304 + 24) = 0u;
      *(_OWORD *)(v304 + 8) = 0u;
      *(unsigned char *)(v304 + 40) = 0;
      *(unsigned char *)(v304 + 41) = 3;
      swift_storeEnumTagMultiPayload();
      sub_10000C970(v33, v34);
      return (void *)v303;
    case 0x80uLL:
      type metadata accessor for apple80211_nan_dp_host_assist_event_data(0);
      uint64_t v306 = v305;
      unint64_t v34 = v570;
      uint64_t v33 = v571;
      sub_100013D44(v571, v570);
      sub_1000C0764(v306, v33, v34, v306, (uint64_t)&v845);
      if (v846.i8[4]) {
        goto LABEL_241;
      }
      uint64_t v307 = v845.i64[1];
      unsigned __int16 v308 = v845.i16[0];
      sub_100010BCC(&qword_10047DC60);
      uint64_t v309 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      uint64_t v132 = v33;
      unint64_t v310 = (*(unsigned __int8 *)(v309 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v309 + 80);
      uint64_t v134 = swift_allocObject();
      *(_OWORD *)(v134 + 16) = xmmword_1003B2450;
      uint64_t v135 = v134 + v310;
      v849[0].i64[0] = sub_1000C08AC(v308, v307);
      v849[0].i16[4] = v311;
      v849[0].i8[10] = v312;
      v849[0].i8[11] = v313;
      v849[0].i8[12] = v314;
      v849[0].i8[13] = v315;
      v849[0].i8[14] = v316;
      v849[0].i8[15] = v317;
      sub_10006EC50((uint64_t)v849);
LABEL_103:
      sub_10006E544((uint64_t)v849, v135);
LABEL_104:
      swift_storeEnumTagMultiPayload();
      uint64_t v186 = v132;
      goto LABEL_207;
    case 0x8DuLL:
      type metadata accessor for apple80211_awdl_low_latency_statistics_reduced(0);
      uint64_t v319 = v318;
      unint64_t v320 = v570;
      uint64_t v321 = v571;
      sub_100013D44(v571, v570);
      sub_1000C0764(v319, v321, v320, v319, (uint64_t)v973);
      sub_10006EC68((uint64_t)v973, (uint64_t)&v828, &qword_10047DCB0);
      sub_10006EC68((uint64_t)&v828, (uint64_t)&v845, &qword_10047DCB0);
      if (sub_10006E498((uint64_t)&v845) == 1)
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, 1, 1, v15);
      }
      else
      {
        sub_10006EC68((uint64_t)&v828, (uint64_t)v972, &qword_10047DCB0);
        memcpy(v849, v972, 0x650uLL);
        sub_1000C0D00((uint64_t)v849, (uint64_t)v14);
      }
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
      {
        sub_1000380B4((uint64_t)v14, &qword_10047DC58);
        unint64_t v34 = v570;
        uint64_t v33 = v571;
        goto LABEL_241;
      }
      sub_1000CBBB0((uint64_t)v14, (uint64_t)v18, type metadata accessor for AWDLStatistics.LowLatencyStatistics);
      sub_100010BCC(&qword_10047DC60);
      uint64_t v460 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v461 = (*(unsigned __int8 *)(v460 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v460 + 80);
      uint64_t v462 = swift_allocObject();
      *(_OWORD *)(v462 + 16) = xmmword_1003B2450;
      sub_1000CA330((uint64_t)v18, v462 + v461, type metadata accessor for AWDLStatistics.LowLatencyStatistics);
      type metadata accessor for DriverEvent.AWDL(0);
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      sub_10000C970(v571, v570);
      sub_1000CBC30((uint64_t)v18, type metadata accessor for AWDLStatistics.LowLatencyStatistics);
      return (void *)v462;
    case 0x94uLL:
      type metadata accessor for apple80211_p2p_airplay_statistics(0);
      uint64_t v323 = v322;
      unint64_t v34 = v570;
      uint64_t v33 = v571;
      sub_100013D44(v571, v570);
      sub_1000C0764(v323, v33, v34, v323, (uint64_t)v973);
      sub_10006EC68((uint64_t)v973, (uint64_t)&v828, &qword_10047DCA0);
      sub_10006EC68((uint64_t)&v828, (uint64_t)&v845, &qword_10047DCA0);
      if (sub_10006E47C((uint64_t)&v845) == 1) {
        goto LABEL_241;
      }
      sub_10006EC68((uint64_t)&v828, (uint64_t)v972, &qword_10047DCA0);
      v849[10] = (int64x2_t)v972[10];
      v849[11] = (int64x2_t)v972[11];
      v849[12] = (int64x2_t)v972[12];
      v849[6] = (int64x2_t)v972[6];
      v849[7] = (int64x2_t)v972[7];
      v849[8] = (int64x2_t)v972[8];
      v849[9] = (int64x2_t)v972[9];
      v849[2] = (int64x2_t)v972[2];
      v849[3] = (int64x2_t)v972[3];
      v849[4] = (int64x2_t)v972[4];
      v849[5] = (int64x2_t)v972[5];
      v849[0] = (int64x2_t)v972[0];
      v849[1] = (int64x2_t)v972[1];
      sub_1000C8F78((uint64_t)v849, (uint64_t)v974);
      sub_10006EC68((uint64_t)v974, (uint64_t)&v975, &qword_10047DCA8);
      if (!(void)v979) {
        goto LABEL_241;
      }
      sub_100010BCC(&qword_10047DC60);
      uint64_t v324 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v325 = (*(unsigned __int8 *)(v324 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v324 + 80);
      uint64_t v37 = swift_allocObject();
      *(_OWORD *)(v37 + 16) = xmmword_1003B2450;
      v326 = (_OWORD *)(v37 + v325);
      long long v327 = *(_OWORD *)v976;
      _OWORD *v326 = v975;
      v326[1] = v327;
      long long v328 = v980;
      long long v329 = v978;
      v326[5] = v979;
      v326[6] = v328;
      long long v330 = v977;
      v326[2] = *(_OWORD *)&v976[16];
      v326[3] = v330;
      v326[4] = v329;
      type metadata accessor for DriverEvent.AWDL(0);
      swift_storeEnumTagMultiPayload();
LABEL_199:
      swift_storeEnumTagMultiPayload();
      uint64_t v239 = v33;
LABEL_200:
      unint64_t v255 = v34;
LABEL_201:
      sub_10000C970(v239, v255);
      return (void *)v37;
    case 0x9CuLL:
      type metadata accessor for apple80211_nan_low_latency_peer_statistics(0);
      uint64_t v332 = v331;
      unint64_t v34 = v570;
      uint64_t v33 = v571;
      sub_100013D44(v571, v570);
      sub_1000C0764(v332, v33, v34, v332, (uint64_t)&v828);
      sub_10006EC68((uint64_t)&v828, (uint64_t)&v845, &qword_10047DCB8);
      sub_10006EC68((uint64_t)&v845, (uint64_t)v849, &qword_10047DCB8);
      if (sub_10006E51C((uint64_t)v849) == 1) {
        goto LABEL_241;
      }
      v566.i64[0] = (uint64_t)v962;
      v538 = v944;
      v527 = v908;
      v528 = v926;
      v526 = (long long *)v887;
      v522 = (long long *)v891;
      v523 = v869;
      v520 = v851;
      sub_100010BCC(&qword_10047DC60);
      unint64_t v568 = type metadata accessor for DriverEvent(0);
      unint64_t v333 = (*(unsigned __int8 *)(*(void *)(v568 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v568 - 8) + 80);
      uint64_t v334 = swift_allocObject();
      unint64_t v569 = v334;
      *(_OWORD *)(v334 + 16) = xmmword_1003B2450;
      unint64_t v567 = v334 + v333;
      LODWORD(v557) = v849[0].i32[0];
      LODWORD(v556) = v849[0].u8[4];
      LODWORD(v555) = v849[0].u8[5];
      LODWORD(v554) = v849[0].u8[6];
      LODWORD(v553) = v849[1].u8[0];
      LODWORD(v552) = v849[1].u8[1];
      LODWORD(v551) = v849[1].u8[2];
      int v549 = v849[2].u8[5];
      LODWORD(v550) = v849[2].u8[4];
      __int32 v547 = v849[3].i32[0];
      int v548 = v849[2].u8[6];
      uint64_t v545 = v849[4].i64[0];
      uint64_t v546 = v849[3].i64[1];
      uint64_t v543 = v849[5].i64[0];
      uint64_t v544 = v849[4].i64[1];
      uint64_t v541 = v849[6].i64[0];
      uint64_t v542 = v849[5].i64[1];
      unint64_t v564 = v849[7].u64[0];
      unint64_t v565 = v849[6].u64[1];
      unint64_t v562 = v849[8].u64[0];
      unint64_t v563 = v849[7].u64[1];
      unint64_t v560 = v849[9].u64[0];
      unint64_t v561 = v849[8].u64[1];
      unint64_t v558 = v849[10].u64[0];
      unint64_t v559 = v849[9].u64[1];
      uint64_t v809 = v849[18].i64[0];
      uint64_t v811 = v849[19].i64[1];
      uint64_t v813 = v849[21].i64[0];
      uint64_t v815 = v849[22].i64[1];
      uint64_t v817 = v849[24].i64[0];
      uint64_t v819 = v849[25].i64[1];
      uint64_t v821 = v849[27].i64[0];
      uint64_t v823 = v849[28].i64[1];
      uint64_t v539 = v849[10].i64[1];
      uint64_t v540 = v849[11].i64[0];
      long long v810 = *(long long *)((char *)&v849[18] + 8);
      int64x2_t v812 = v849[20];
      long long v814 = *(long long *)((char *)&v849[21] + 8);
      int64x2_t v816 = v849[23];
      long long v818 = *(long long *)((char *)&v849[24] + 8);
      int64x2_t v820 = v849[26];
      long long v822 = *(long long *)((char *)&v849[27] + 8);
      int64x2_t v824 = v849[29];
      long long v826 = *(long long *)((char *)&v849[30] + 8);
      uint64_t v825 = v849[30].i64[0];
      uint64_t v827 = v849[31].i64[1];
      uint64_t v335 = v849[12].i64[0];
      int64x2_t v808 = v849[17];
      uint64_t v336 = v849[0].i64[1];
      uint64_t v337 = *(uint64_t *)((char *)v849[1].i64 + 4);
      uint64_t v338 = v849[2].i64[1];
      uint64_t v536 = v849[16].i64[1];
      uint64_t v537 = v849[11].i64[1];
      uint64_t v533 = v849[12].i64[1];
      uint64_t v534 = v849[16].i64[0];
      uint64_t v535 = v849[13].i64[1];
      __int32 v530 = v849[2].i32[0];
      __int32 v531 = v849[1].i32[3];
      v532 = sub_1000C44A4((uint64_t)&v808);
      int64x2_t v788 = v849[47];
      long long v790 = *(long long *)((char *)&v849[48] + 8);
      uint64_t v789 = v849[48].i64[0];
      uint64_t v791 = v849[49].i64[1];
      int64x2_t v792 = v849[50];
      long long v794 = *(long long *)((char *)&v849[51] + 8);
      uint64_t v793 = v849[51].i64[0];
      uint64_t v795 = v849[52].i64[1];
      int64x2_t v796 = v849[53];
      long long v798 = *(long long *)((char *)&v849[54] + 8);
      uint64_t v797 = v849[54].i64[0];
      uint64_t v799 = v849[55].i64[1];
      int64x2_t v800 = v849[56];
      long long v802 = *(long long *)((char *)&v849[57] + 8);
      uint64_t v801 = v849[57].i64[0];
      uint64_t v803 = v849[58].i64[1];
      int64x2_t v804 = v849[59];
      long long v806 = *(long long *)((char *)&v849[60] + 8);
      uint64_t v805 = v849[60].i64[0];
      uint64_t v807 = v849[61].i64[1];
      v529 = sub_1000C44A4((uint64_t)&v788);
      int64x2_t v768 = v849[62];
      long long v770 = *(long long *)((char *)&v849[63] + 8);
      uint64_t v769 = v849[63].i64[0];
      uint64_t v771 = v849[64].i64[1];
      int64x2_t v772 = v849[65];
      long long v774 = *(long long *)((char *)&v849[66] + 8);
      uint64_t v773 = v849[66].i64[0];
      uint64_t v775 = v849[67].i64[1];
      int64x2_t v776 = v849[68];
      long long v778 = *(long long *)((char *)&v849[69] + 8);
      uint64_t v777 = v849[69].i64[0];
      uint64_t v779 = v849[70].i64[1];
      int64x2_t v780 = v849[71];
      long long v782 = *(long long *)((char *)&v849[72] + 8);
      uint64_t v781 = v849[72].i64[0];
      uint64_t v783 = v849[73].i64[1];
      int64x2_t v784 = v849[74];
      long long v786 = *(long long *)((char *)&v849[75] + 8);
      uint64_t v785 = v849[75].i64[0];
      uint64_t v787 = v849[76].i64[1];
      v339 = sub_1000C44A4((uint64_t)&v768);
      int64x2_t v748 = v849[77];
      long long v750 = *(long long *)((char *)&v849[78] + 8);
      uint64_t v749 = v849[78].i64[0];
      uint64_t v751 = v849[79].i64[1];
      int64x2_t v752 = v849[80];
      long long v754 = *(long long *)((char *)&v849[81] + 8);
      uint64_t v753 = v849[81].i64[0];
      uint64_t v755 = v849[82].i64[1];
      int64x2_t v756 = v849[83];
      long long v758 = *(long long *)((char *)&v849[84] + 8);
      uint64_t v757 = v849[84].i64[0];
      uint64_t v759 = v849[85].i64[1];
      int64x2_t v760 = v849[86];
      long long v762 = *(long long *)((char *)&v849[87] + 8);
      uint64_t v761 = v849[87].i64[0];
      uint64_t v763 = v849[88].i64[1];
      int64x2_t v764 = v849[89];
      long long v766 = *(long long *)((char *)&v849[90] + 8);
      uint64_t v765 = v849[90].i64[0];
      uint64_t v767 = v849[91].i64[1];
      v525 = sub_1000C44A4((uint64_t)&v748);
      int64x2_t v728 = v849[92];
      long long v730 = *(long long *)((char *)&v849[93] + 8);
      uint64_t v729 = v849[93].i64[0];
      uint64_t v731 = v849[94].i64[1];
      int64x2_t v732 = v849[95];
      long long v734 = *(long long *)((char *)&v849[96] + 8);
      uint64_t v733 = v849[96].i64[0];
      uint64_t v735 = v849[97].i64[1];
      int64x2_t v736 = v849[98];
      long long v738 = *(long long *)((char *)&v849[99] + 8);
      uint64_t v737 = v849[99].i64[0];
      uint64_t v739 = v849[100].i64[1];
      int64x2_t v740 = v849[101];
      v340 = v520;
      long long v742 = *(_OWORD *)v520;
      uint64_t v741 = v850;
      uint64_t v743 = v851[2];
      long long v744 = v852;
      long long v746 = *((_OWORD *)v520 + 3);
      uint64_t v745 = v853;
      uint64_t v747 = v854;
      v524 = sub_1000C44A4((uint64_t)&v728);
      long long v708 = *v522;
      long long v710 = v892;
      uint64_t v709 = v891[2];
      uint64_t v711 = v893;
      long long v712 = v522[3];
      long long v714 = v895;
      uint64_t v713 = v894;
      uint64_t v715 = v896;
      long long v716 = v522[6];
      long long v718 = v898;
      uint64_t v717 = v897;
      uint64_t v719 = v899;
      long long v720 = v522[9];
      long long v722 = v901;
      uint64_t v721 = v900;
      uint64_t v723 = v902;
      long long v724 = v522[12];
      long long v726 = v904;
      uint64_t v725 = v903;
      uint64_t v727 = v905;
      v522 = (long long *)sub_1000C44A4((uint64_t)&v708);
      long long v696 = v855;
      long long v698 = v340[6];
      uint64_t v697 = v856;
      uint64_t v699 = v857;
      long long v700 = v858;
      long long v702 = v340[9];
      uint64_t v701 = v859;
      uint64_t v703 = v860;
      long long v704 = v861;
      long long v706 = v340[12];
      uint64_t v705 = v862;
      uint64_t v707 = v863;
      v521 = sub_1000C462C(&v696);
      long long v678 = v864;
      long long v680 = v340[15];
      uint64_t v679 = v865;
      uint64_t v681 = v866;
      long long v682 = v867;
      long long v684 = *v523;
      uint64_t v683 = v868;
      uint64_t v685 = v869[2];
      long long v686 = v870;
      long long v688 = v523[3];
      uint64_t v687 = v871;
      uint64_t v689 = v872;
      long long v690 = v873;
      v341 = v523;
      long long v692 = v523[6];
      uint64_t v691 = v874;
      uint64_t v693 = v875;
      long long v694 = v876;
      uint64_t v695 = v877;
      v520 = sub_1000C486C((uint64_t)&v678);
      long long v660 = v341[9];
      long long v662 = v879;
      uint64_t v661 = v878;
      uint64_t v663 = v880;
      long long v664 = v341[12];
      long long v666 = v882;
      uint64_t v665 = v881;
      uint64_t v667 = v883;
      long long v668 = v341[15];
      long long v670 = v885;
      uint64_t v669 = v884;
      uint64_t v671 = v886;
      long long v672 = *v526;
      long long v674 = v888;
      uint64_t v673 = v887[2];
      uint64_t v675 = v889;
      long long v676 = v526[3];
      uint64_t v677 = v890;
      v342 = sub_1000C486C((uint64_t)&v660);
      long long v640 = v906;
      long long v642 = *v527;
      uint64_t v641 = v907;
      uint64_t v643 = v908[2];
      long long v644 = v909;
      long long v646 = v527[3];
      uint64_t v645 = v910;
      uint64_t v647 = v911;
      long long v648 = v912;
      long long v650 = v527[6];
      uint64_t v649 = v913;
      uint64_t v651 = v914;
      long long v652 = v915;
      long long v654 = v527[9];
      uint64_t v653 = v916;
      uint64_t v655 = v917;
      long long v656 = v918;
      v343 = v527;
      long long v658 = v527[12];
      uint64_t v657 = v919;
      uint64_t v659 = v920;
      v344 = sub_1000C44A4((uint64_t)&v640);
      long long v620 = v921;
      long long v622 = v343[15];
      uint64_t v621 = v922;
      uint64_t v623 = v923;
      long long v624 = v924;
      long long v626 = *v528;
      uint64_t v625 = v925;
      uint64_t v627 = v926[2];
      long long v628 = v927;
      long long v630 = v528[3];
      uint64_t v629 = v928;
      uint64_t v631 = v929;
      long long v632 = v930;
      long long v634 = v528[6];
      uint64_t v633 = v931;
      uint64_t v635 = v932;
      long long v636 = v933;
      v345 = v528;
      long long v638 = v528[9];
      uint64_t v637 = v934;
      uint64_t v639 = v935;
      v346 = sub_1000C44A4((uint64_t)&v620);
      long long v600 = v936;
      long long v602 = v345[12];
      uint64_t v601 = v937;
      uint64_t v603 = v938;
      long long v604 = v939;
      long long v606 = v345[15];
      uint64_t v605 = v940;
      uint64_t v607 = v941;
      long long v608 = v942;
      long long v610 = *v538;
      uint64_t v609 = v943;
      uint64_t v611 = v944[2];
      long long v612 = v945;
      long long v614 = v538[3];
      uint64_t v613 = v946;
      uint64_t v615 = v947;
      long long v616 = v948;
      v347 = v538;
      long long v618 = v538[6];
      uint64_t v617 = v949;
      uint64_t v619 = v950;
      v348 = sub_1000C44A4((uint64_t)&v600);
      long long v580 = v951;
      long long v582 = v347[9];
      uint64_t v581 = v952;
      uint64_t v583 = v953;
      long long v584 = v954;
      long long v586 = v347[12];
      uint64_t v585 = v955;
      uint64_t v587 = v956;
      long long v588 = v957;
      long long v590 = v347[15];
      uint64_t v589 = v958;
      uint64_t v591 = v959;
      long long v592 = v960;
      long long v594 = *(_OWORD *)v566.i64[0];
      uint64_t v593 = v961;
      uint64_t v595 = v962[2];
      long long v596 = v963;
      uint64_t v349 = v566.i64[0];
      long long v598 = *(_OWORD *)(v566.i64[0] + 48);
      uint64_t v597 = v964;
      uint64_t v599 = v965;
      v350 = sub_1000C44A4((uint64_t)&v580);
      long long v572 = v966;
      uint64_t v573 = v967;
      long long v574 = *(_OWORD *)(v349 + 96);
      uint64_t v575 = v968;
      long long v576 = v969;
      uint64_t v577 = v970;
      long long v578 = *(_OWORD *)(v349 + 144);
      uint64_t v579 = v971;
      v351 = sub_1000C49E4(&v572);
      LODWORD(v973[0]) = v557;
      BYTE4(v973[0]) = v556;
      BYTE5(v973[0]) = v555;
      BYTE6(v973[0]) = v554;
      LOBYTE(v973[2]) = v553;
      BYTE1(v973[2]) = v552;
      WORD1(v973[2]) = v551;
      HIDWORD(v973[3]) = v531;
      LODWORD(v973[4]) = v530;
      BYTE4(v973[4]) = v550;
      BYTE5(v973[4]) = v549;
      BYTE6(v973[4]) = v548;
      LODWORD(v973[6]) = v547;
      v973[7] = v546;
      v973[8] = v545;
      v973[9] = v544;
      v973[10] = v543;
      v973[11] = v542;
      v973[12] = v541;
      *(uint64_t *)((char *)&v973[2] + 4) = v337;
      v973[1] = v336;
      v973[5] = v338;
      v973[13] = v565;
      v973[14] = v564;
      v973[15] = v563;
      v973[16] = v562;
      v973[17] = v561;
      v973[18] = v560;
      v973[19] = v559;
      v973[20] = v558;
      v973[21] = v539;
      v973[22] = v540;
      v973[23] = v537;
      v973[24] = v335;
      v973[25] = v533;
      v973[26] = v534;
      v973[27] = v536;
      v973[28] = v535;
      v973[29] = (uint64_t)v532;
      v973[30] = (uint64_t)v529;
      v973[31] = (uint64_t)v339;
      v973[32] = (uint64_t)v525;
      v973[33] = (uint64_t)v524;
      v973[34] = (uint64_t)v522;
      v973[35] = (uint64_t)v521;
      v973[36] = (uint64_t)v520;
      v973[37] = (uint64_t)v342;
      v973[38] = (uint64_t)v344;
      v973[39] = (uint64_t)v346;
      v973[40] = (uint64_t)v348;
      v973[41] = (uint64_t)v350;
      v973[42] = (uint64_t)v351;
      memset(&v973[43], 0, 17);
      sub_10006E538((uint64_t)v973);
      v352 = (int64x2_t *)v973;
      goto LABEL_182;
    case 0x9DuLL:
      type metadata accessor for apple80211_nan_oob_act_frm_tx_status(0);
      uint64_t v354 = v353;
      unint64_t v34 = v570;
      uint64_t v33 = v571;
      sub_100013D44(v571, v570);
      sub_1000C0764(v354, v33, v34, v354, (uint64_t)&v845);
      if (v845.i8[10]) {
        goto LABEL_241;
      }
      __int16 v355 = v845.i16[0];
      unint64_t v356 = (unint64_t)v845.i64[0] >> 16;
      __int16 v357 = v845.i16[4];
      unsigned int v358 = HIWORD(v845.i64[0]) | (v845.u16[4] << 16);
      sub_100010BCC(&qword_10047DC60);
      uint64_t v359 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v360 = (*(unsigned __int8 *)(v359 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v359 + 80);
      uint64_t v134 = swift_allocObject();
      *(_OWORD *)(v134 + 16) = xmmword_1003B2450;
      v849[0].i16[0] = v355;
      *(uint64_t *)((char *)v849[0].i64 + 2) = __PAIR64__(v358, v356);
      v849[0].i32[0] = sub_1000C0998(v849[0].u64[0], v357);
      sub_10006E5EC((uint64_t)v849);
      sub_10006E544((uint64_t)v849, v134 + v360);
      goto LABEL_114;
    case 0x9EuLL:
      type metadata accessor for apple80211_nan_oob_act_frm_rx_data(0);
      uint64_t v362 = v361;
      unint64_t v34 = v570;
      uint64_t v33 = v571;
      sub_100013D44(v571, v570);
      sub_1000C0764(v362, v33, v34, v362, (uint64_t)&v828);
      sub_10006EC68((uint64_t)&v828, (uint64_t)&v845, &qword_10047DCC0);
      sub_10006EC68((uint64_t)&v845, (uint64_t)v849, &qword_10047DCC0);
      if (sub_10006E5C4((uint64_t)v849) == 1) {
        goto LABEL_241;
      }
      memcpy(v973, v849, 0x3E1uLL);
      sub_100010BCC(&qword_10047DC60);
      uint64_t v363 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v364 = (*(unsigned __int8 *)(v363 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v363 + 80);
      uint64_t v54 = swift_allocObject();
      *(_OWORD *)(v54 + 16) = xmmword_1003B2450;
      sub_1000C09E0((uint64_t)&v975);
      *(void *)&v972[0] = v975;
      DWORD2(v972[0]) = DWORD2(v975);
      LOBYTE(v972[1]) = v976[0];
      *(_OWORD *)((char *)&v972[1] + 8) = *(_OWORD *)&v976[8];
      *((void *)&v972[2] + 1) = *(void *)&v976[24];
      sub_10006E5E0((uint64_t)v972);
      sub_10006E544((uint64_t)v972, v54 + v364);
LABEL_221:
      swift_storeEnumTagMultiPayload();
      uint64_t v56 = v33;
      goto LABEL_222;
    case 0xABuLL:
      type metadata accessor for apple80211_hostap_state(0);
      uint64_t v366 = v365;
      unint64_t v34 = v570;
      uint64_t v33 = v571;
      sub_100013D44(v571, v570);
      sub_1000C0764(v366, v33, v34, v366, (uint64_t)v849);
      if (v849[1].i8[0]) {
        goto LABEL_241;
      }
      unsigned int v367 = v849[0].u16[4];
      uint64_t v368 = v849[0].u32[1];
      sub_100010BCC(&qword_10047DC60);
      uint64_t v369 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v370 = (*(unsigned __int8 *)(v369 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v369 + 80);
      uint64_t v93 = swift_allocObject();
      *(_OWORD *)(v93 + 16) = xmmword_1003B2450;
      unint64_t v371 = v93 + v370;
      unint64_t v372 = sub_1001C7008(v367);
      *(unsigned char *)unint64_t v371 = v368 != 0;
      *(_DWORD *)(v371 + 4) = v372;
      *(_WORD *)(v371 + 8) = WORD2(v372);
      type metadata accessor for DriverEvent.AWDL(0);
      swift_storeEnumTagMultiPayload();
      goto LABEL_173;
    case 0xB2uLL:
      type metadata accessor for apple80211_awdl_service_reg_soft_error_event(0);
      uint64_t v374 = v373;
      unint64_t v34 = v570;
      uint64_t v33 = v571;
      sub_100013D44(v571, v570);
      sub_1000C0764(v374, v33, v34, v374, (uint64_t)&v828);
      sub_10006EC68((uint64_t)&v828, (uint64_t)&v845, &qword_10047DC80);
      sub_10006EC68((uint64_t)&v845, (uint64_t)v849, &qword_10047DC80);
      if (sub_10006E3E4((uint64_t)v849) == 1) {
        goto LABEL_241;
      }
      uint64_t v375 = v849[0].u32[1];
      if (v849[0].i32[1] > 0xFFu) {
        goto LABEL_241;
      }
      long long v840 = *(long long *)((char *)&v849[12] + 8);
      long long v841 = *(long long *)((char *)&v849[13] + 8);
      long long v842 = *(long long *)((char *)&v849[14] + 8);
      long long v843 = *(long long *)((char *)&v849[15] + 8);
      long long v836 = *(long long *)((char *)&v849[8] + 8);
      long long v837 = *(long long *)((char *)&v849[9] + 8);
      long long v838 = *(long long *)((char *)&v849[10] + 8);
      long long v839 = *(long long *)((char *)&v849[11] + 8);
      long long v832 = *(long long *)((char *)&v849[4] + 8);
      long long v833 = *(long long *)((char *)&v849[5] + 8);
      long long v834 = *(long long *)((char *)&v849[6] + 8);
      long long v835 = *(long long *)((char *)&v849[7] + 8);
      long long v828 = *(long long *)((char *)v849 + 8);
      long long v829 = *(long long *)((char *)&v849[1] + 8);
      long long v830 = *(long long *)((char *)&v849[2] + 8);
      long long v831 = *(long long *)((char *)&v849[3] + 8);
      uint64_t v376 = sub_100010BCC(&qword_10047DC88);
      *((void *)&v972[1] + 1) = v376;
      *(void *)&v972[2] = sub_10006E400();
      v377 = (void *)swift_allocObject();
      *(void *)&v972[0] = v377;
      v377[2] = 0;
      v377[3] = v375;
      v377[4] = &v828;
      v377[5] = &v844;
      v378 = (long long *)sub_1000369C4(v972, v376);
      long long v379 = v378[1];
      long long v975 = *v378;
      *(_OWORD *)v976 = v379;
      unint64_t v380 = v564;
      Slice<>.withUnsafeBytes<A>(_:)();
      unint64_t v381 = v974[0];
      unint64_t v382 = v974[1];
      sub_100010754((uint64_t)v972);
      static DNSRecords.createRecord(with:value:)(v381, v382, 0, 0xF000000000000000, v973);
      if (v380)
      {
        sub_10000C970(v381, v382);
        swift_errorRelease();
        goto LABEL_239;
      }
      sub_10000C970(v381, v382);
      sub_100010BCC(&qword_10047CC08);
      if (swift_dynamicCast())
      {
        uint64_t v479 = *((void *)&v828 + 1);
        unint64_t v569 = v828;
        char v480 = v829;
      }
      else if (swift_dynamicCast())
      {
        uint64_t v479 = *((void *)&v829 + 1);
        unint64_t v569 = v829;
        char v480 = v830;
        swift_bridgeObjectRelease();
      }
      else if (swift_dynamicCast())
      {
        sub_1000CBBB0((uint64_t)v12, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for DNSRecords.SRV);
        uint64_t v479 = *((void *)v10 + 3);
        unint64_t v569 = *((void *)v10 + 2);
        char v480 = v10[32];
        swift_bridgeObjectRetain();
        sub_1000CBC30((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for DNSRecords.SRV);
      }
      else
      {
        unint64_t v564 = 0;
        if (!swift_dynamicCast())
        {
          sub_100010754((uint64_t)v973);
          goto LABEL_240;
        }
        uint64_t v479 = *((void *)&v829 + 1);
        unint64_t v569 = v829;
        char v480 = v830;
        uint64_t v510 = *((void *)&v830 + 1);
        unint64_t v511 = v831;
        swift_bridgeObjectRelease();
        sub_10000C970(v510, v511);
      }
      sub_100010754((uint64_t)v973);
      sub_100010BCC(&qword_10047DC60);
      uint64_t v512 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v513 = (*(unsigned __int8 *)(v512 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v512 + 80);
      uint64_t v269 = swift_allocObject();
      *(_OWORD *)(v269 + 16) = xmmword_1003B2450;
      unint64_t v514 = v269 + v513;
      *(void *)&long long v828 = 0;
      *((void *)&v828 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(35);
      swift_bridgeObjectRelease();
      *(void *)&long long v828 = 0xD000000000000015;
      *((void *)&v828 + 1) = 0x80000001003DA620;
      v515._countAndFlagsBits = v569;
      DNSRecords.Identifier.description.getter(v569, v479, v480);
      String.append(_:)(v515);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v516._countAndFlagsBits = 0x2064656B61654C20;
      v516._object = (void *)0xE90000000000005BLL;
      String.append(_:)(v516);
      LODWORD(v973[0]) = v849[0].i32[0];
      v517._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v517);
      swift_bridgeObjectRelease();
      v518._countAndFlagsBits = 93;
      v518._object = (void *)0xE100000000000000;
      String.append(_:)(v518);
      uint64_t v519 = *((void *)&v828 + 1);
      *(void *)unint64_t v514 = v828;
      *(void *)(v514 + 8) = v519;
      *(void *)(v514 + 16) = 0xD000000000000096;
      *(void *)(v514 + 24) = 0x80000001003DA640;
      *(unsigned char *)(v514 + 32) = 1;
      type metadata accessor for DriverEvent.AWDL(0);
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      uint64_t v471 = v571;
LABEL_204:
      sub_10000C970(v471, v34);
      return (void *)v269;
    case 0xB5uLL:
      type metadata accessor for apple80211_p2p_thread_coex_event(0);
      uint64_t v384 = v383;
      unint64_t v34 = v570;
      uint64_t v33 = v571;
      sub_100013D44(v571, v570);
      sub_1000C0764(v384, v33, v34, v384, (uint64_t)v849);
      if (v849[0].i8[2]) {
        goto LABEL_241;
      }
      __int8 v385 = v849[0].i8[0];
      __int8 v386 = v849[0].i8[1];
      sub_100010BCC(&qword_10047DC60);
      uint64_t v387 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v388 = (*(unsigned __int8 *)(v387 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v387 + 80);
      uint64_t v93 = swift_allocObject();
      *(_OWORD *)(v93 + 16) = xmmword_1003B2450;
      v389 = (__int8 *)(v93 + v388);
      __int8 *v389 = v385;
      v389[1] = v386;
      type metadata accessor for DriverEvent.AWDL(0);
      swift_storeEnumTagMultiPayload();
      goto LABEL_173;
    case 0xC4uLL:
      type metadata accessor for apple80211_nan_preferred_channels_changed_event(0);
      uint64_t v391 = v390;
      unint64_t v34 = v570;
      uint64_t v33 = v571;
      sub_100013D44(v571, v570);
      sub_1000C0764(v391, v33, v34, v391, (uint64_t)v849);
      if (v849[1].i8[12]) {
        goto LABEL_241;
      }
      __int8 v392 = v849[0].i8[8];
      __int8 v393 = v849[0].i8[4];
      unint64_t v394 = (unint64_t)v849[0].i64[0] >> 40;
      __int8 v395 = v849[1].i8[8];
      __int8 v396 = v849[0].i8[6];
      __int8 v397 = v849[1].i8[0];
      __int8 v398 = v849[0].i8[7];
      unint64_t v550 = (unint64_t)v849[0].i64[1] >> 8;
      unint64_t v551 = (unint64_t)v849[0].i64[1] >> 16;
      unint64_t v552 = (unint64_t)v849[0].i64[1] >> 24;
      uint64_t v553 = v849[0].u32[3];
      unint64_t v554 = (unint64_t)v849[0].i64[1] >> 40;
      uint64_t v555 = v849[0].u16[7];
      uint64_t v556 = v849[0].u8[15];
      unint64_t v557 = (unint64_t)v849[1].i64[0] >> 8;
      unint64_t v558 = (unint64_t)v849[1].i64[0] >> 16;
      unint64_t v559 = (unint64_t)v849[1].i64[0] >> 24;
      unint64_t v560 = v849[1].u32[1];
      unint64_t v561 = (unint64_t)v849[1].i64[0] >> 40;
      unint64_t v562 = v849[1].u16[3];
      unint64_t v563 = v849[1].u8[7];
      v566.i32[0] = (unsigned __int32)v849[1].i32[2] >> 8;
      LODWORD(v565) = HIWORD(v849[1].i32[2]);
      LODWORD(v564) = HIBYTE(v849[1].i32[2]);
      sub_100010BCC(&qword_10047DC60);
      unint64_t v568 = type metadata accessor for DriverEvent(0);
      unint64_t v399 = (*(unsigned __int8 *)(*(void *)(v568 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v568 - 8) + 80);
      uint64_t v400 = swift_allocObject();
      unint64_t v569 = v400;
      *(_OWORD *)(v400 + 16) = xmmword_1003B2450;
      unint64_t v567 = v400 + v399;
      v845.i8[0] = v393;
      v845.i8[1] = v394;
      v845.i8[2] = v396;
      v845.i8[3] = v398;
      v845.i8[4] = v392;
      v845.i8[5] = v550;
      v845.i8[6] = v551;
      v845.i8[7] = v552;
      v845.i8[8] = v553;
      v845.i8[9] = v554;
      v845.i8[10] = v555;
      v845.i8[11] = v556;
      v845.i8[12] = v397;
      v845.i8[13] = v557;
      v845.i8[14] = v558;
      v845.i8[15] = v559;
      v846.i8[0] = v560;
      v846.i8[1] = v561;
      v846.i8[2] = v562;
      v846.i8[3] = v563;
      v846.i8[4] = v395;
      v846.i8[5] = v566.i8[0];
      v846.i8[6] = v565;
      v846.i8[7] = v564;
      if (qword_10047C1C0 != -1) {
        swift_once();
      }
      uint64_t v401 = 0;
      v402 = _swiftEmptyArrayStorage;
      break;
    case 0xC7uLL:
      type metadata accessor for apple80211_awdl_stats_p2p_failure(0);
      uint64_t v431 = v430;
      unint64_t v34 = v570;
      uint64_t v33 = v571;
      sub_100013D44(v571, v570);
      sub_1000C0764(v431, v33, v34, v431, (uint64_t)v849);
      if (v849[2].i8[8]) {
        goto LABEL_241;
      }
      int64x2_t v846 = v849[1];
      v847[0].i64[0] = v849[2].i64[0];
      uint64x2_t v845 = (uint64x2_t)v849[0];
      NSString v432 = sub_1000C95E0((uint64_t)&v845);
      if (!v432) {
        goto LABEL_241;
      }
      NSString v434 = v432;
      char v435 = v433;
      sub_100010BCC(&qword_10047DC60);
      uint64_t v436 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v437 = (*(unsigned __int8 *)(v436 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v436 + 80);
      uint64_t v93 = swift_allocObject();
      *(_OWORD *)(v93 + 16) = xmmword_1003B2450;
      unint64_t v438 = v93 + v437;
      *(void *)unint64_t v438 = v434;
      *(unsigned char *)(v438 + 8) = v435;
      type metadata accessor for DriverEvent.AWDL(0);
      swift_storeEnumTagMultiPayload();
      goto LABEL_173;
    case 0xD6uLL:
      type metadata accessor for ether_addr(0);
      uint64_t v440 = v439;
      unint64_t v34 = v570;
      uint64_t v33 = v571;
      sub_100013D44(v571, v570);
      sub_1000C0764(v440, v33, v34, v440, (uint64_t)v849);
      if (v849[0].i8[6]) {
        goto LABEL_241;
      }
      unint64_t v441 = v849[0].u32[0] | ((unint64_t)v849[0].u16[2] << 32);
      sub_100010BCC(&qword_10047DC60);
      uint64_t v442 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v443 = (*(unsigned __int8 *)(v442 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v442 + 80);
      uint64_t v65 = swift_allocObject();
      *(_OWORD *)(v65 + 16) = xmmword_1003B2450;
      unint64_t v295 = v65 + v443;
      *(void *)unint64_t v295 = v441;
      *(_OWORD *)(v295 + 24) = 0u;
      *(_OWORD *)(v295 + 8) = 0u;
      *(unsigned char *)(v295 + 40) = 0;
      char v296 = 9;
LABEL_165:
      *(unsigned char *)(v295 + 41) = v296;
LABEL_166:
      swift_storeEnumTagMultiPayload();
      uint64_t v81 = v33;
LABEL_167:
      sub_10000C970(v81, v34);
      return (void *)v65;
    case 0xE0uLL:
      type metadata accessor for apple80211_channel_band(0);
      uint64_t v445 = v444;
      unint64_t v34 = v570;
      uint64_t v33 = v571;
      sub_100013D44(v571, v570);
      sub_1000C0764(v445, v33, v34, v445, (uint64_t)v849);
      if (v849[0].i8[4]) {
        goto LABEL_241;
      }
      if (v849[0].i32[0] >= 4u) {
        __int8 v446 = 1;
      }
      else {
        __int8 v446 = 0x2010001u >> (8 * v849[0].i8[0]);
      }
      sub_100010BCC(&qword_10047DC60);
      uint64_t v447 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v448 = (*(unsigned __int8 *)(v447 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v447 + 80);
      uint64_t v93 = swift_allocObject();
      *(_OWORD *)(v93 + 16) = xmmword_1003B2450;
      v849[0].i8[0] = v446;
      sub_10006E5A0((uint64_t)v849);
      sub_10006E544((uint64_t)v849, v93 + v448);
LABEL_173:
      swift_storeEnumTagMultiPayload();
      sub_10000C970(v33, v34);
      return (void *)v93;
    case 0xE9uLL:
      type metadata accessor for apple80211_idle_detect(0);
      uint64_t v450 = v449;
      unint64_t v34 = v570;
      uint64_t v33 = v571;
      sub_100013D44(v571, v570);
      sub_1000C0764(v450, v33, v34, v450, (uint64_t)v849);
      if (v849[0].i8[8]) {
        goto LABEL_241;
      }
      unsigned __int32 v451 = v849[0].i32[0];
      unint64_t v569 = v849[0].u32[1];
      sub_100010BCC(&qword_10047DC60);
      uint64_t v452 = *(void *)(type metadata accessor for DriverEvent(0) - 8);
      unint64_t v453 = (*(unsigned __int8 *)(v452 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v452 + 80);
      uint64_t v54 = swift_allocObject();
      *(_OWORD *)(v54 + 16) = xmmword_1003B2450;
      unint64_t v454 = v54 + v453;
      *(void *)(v54 + v453) = v451;
      uint64_t v455 = enum case for DispatchTimeInterval.milliseconds(_:);
      uint64_t v456 = type metadata accessor for DispatchTimeInterval();
      uint64_t v457 = v33;
      v458 = *(void (**)(void))(*(void *)(v456 - 8) + 104);
      ((void (*)(unint64_t, uint64_t, uint64_t))v458)(v454, v455, v456);
      *(void *)(v454 + *(int *)(type metadata accessor for AWDLIdleActivity(0) + 20)) = v569;
      v458();
      type metadata accessor for DriverEvent.AWDL(0);
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      uint64_t v56 = v457;
LABEL_222:
      unint64_t v57 = v34;
LABEL_223:
      sub_10000C970(v56, v57);
      return (void *)v54;
    default:
      return result;
  }
  do
  {
    __int32 v404 = v845.i32[v401];
    v405 = off_100481FE0;
    if (*((void *)off_100481FE0 + 2))
    {
      uint64_t v406 = static Hasher._hash(seed:bytes:count:)();
      uint64_t v407 = -1 << v405[32];
      unint64_t v408 = v406 & ~v407;
      if ((*(void *)&v405[((v408 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v408))
      {
        uint64_t v409 = *((void *)v405 + 6);
        if (*(_DWORD *)(v409 + 4 * v408) == v404)
        {
LABEL_137:
          __int8 v411 = 0;
          __int8 v412 = 3;
LABEL_156:
          v849[0].i32[0] = v404;
          v849[0].i8[4] = v411;
          v849[0].i8[5] = v412;
          sub_1001C4000();
          __int32 v425 = v849[0].i32[0];
          __int8 v426 = v849[0].i8[4];
          __int8 v427 = v849[0].i8[5];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v402 = sub_1000C5C4C(0, v402[2] + 1, 1, v402);
          }
          unint64_t v429 = v402[2];
          unint64_t v428 = v402[3];
          if (v429 >= v428 >> 1) {
            v402 = sub_1000C5C4C((void *)(v428 > 1), v429 + 1, 1, v402);
          }
          v402[2] = v429 + 1;
          v403 = &v402[v429];
          *((_DWORD *)v403 + 8) = v425;
          *((unsigned char *)v403 + 36) = v426;
          *((unsigned char *)v403 + 37) = v427;
          goto LABEL_130;
        }
        uint64_t v410 = ~v407;
        while (1)
        {
          unint64_t v408 = (v408 + 1) & v410;
          if (((*(void *)&v405[((v408 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v408) & 1) == 0) {
            break;
          }
          if (*(_DWORD *)(v409 + 4 * v408) == v404) {
            goto LABEL_137;
          }
        }
      }
    }
    if (qword_10047C1C8 != -1) {
      swift_once();
    }
    v413 = off_100481FE8;
    if (!*((void *)off_100481FE8 + 2)) {
      goto LABEL_147;
    }
    uint64_t v414 = static Hasher._hash(seed:bytes:count:)();
    uint64_t v415 = -1 << v413[32];
    unint64_t v416 = v414 & ~v415;
    if (((*(void *)&v413[((v416 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v416) & 1) == 0) {
      goto LABEL_147;
    }
    uint64_t v417 = *((void *)v413 + 6);
    if (*(_DWORD *)(v417 + 4 * v416) == v404)
    {
LABEL_146:
      __int8 v411 = 1;
      __int8 v412 = 4;
      goto LABEL_156;
    }
    uint64_t v418 = ~v415;
    while (1)
    {
      unint64_t v416 = (v416 + 1) & v418;
      if (((*(void *)&v413[((v416 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v416) & 1) == 0) {
        break;
      }
      if (*(_DWORD *)(v417 + 4 * v416) == v404) {
        goto LABEL_146;
      }
    }
LABEL_147:
    if (qword_10047C1D0 != -1) {
      swift_once();
    }
    v419 = off_100481FF0;
    if (*((void *)off_100481FF0 + 2))
    {
      uint64_t v420 = static Hasher._hash(seed:bytes:count:)();
      uint64_t v421 = -1 << v419[32];
      unint64_t v422 = v420 & ~v421;
      if ((*(void *)&v419[((v422 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v422))
      {
        uint64_t v423 = *((void *)v419 + 6);
        if (*(_DWORD *)(v423 + 4 * v422) == v404)
        {
LABEL_155:
          __int8 v411 = 2;
          __int8 v412 = 5;
          goto LABEL_156;
        }
        uint64_t v424 = ~v421;
        while (1)
        {
          unint64_t v422 = (v422 + 1) & v424;
          if (((*(void *)&v419[((v422 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v422) & 1) == 0) {
            break;
          }
          if (*(_DWORD *)(v423 + 4 * v422) == v404) {
            goto LABEL_155;
          }
        }
      }
    }
LABEL_130:
    ++v401;
  }
  while (v401 != 8);
  v849[0].i64[0] = (uint64_t)v402;
  sub_10006E5AC((uint64_t)v849);
  v352 = v849;
LABEL_182:
  sub_10006E544((uint64_t)v352, v567);
  swift_storeEnumTagMultiPayload();
  uint64_t v459 = v571;
LABEL_193:
  sub_10000C970(v459, v570);
  return (void *)v569;
}

uint64_t AppleIO80211Driver.__allocating_init(device:role:name:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  AppleIO80211Driver.init(device:role:name:)(a1, a2, a3, a4);
  return v8;
}

unint64_t Channel.init(apple80211:)(uint64_t a1, unsigned int a2)
{
  return sub_1000C7CBC(HIDWORD(a1), a2) & 0xFFFFFFFFFFFFLL;
}

BOOL sub_1000AD3B4(int a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v4 = static Hasher._hash(seed:bytes:count:)();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(_DWORD *)(v8 + 4 * v6) == a1) {
    return 1;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    int v12 = *(_DWORD *)(v8 + 4 * v11);
    BOOL result = v12 == a1;
    if (v12 == a1) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t sub_1000AD484(int a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    Hasher.init(_seed:)();
    switch((char)a1)
    {
      case 2:
        Swift::UInt v4 = 0;
        goto LABEL_9;
      case 3:
        Swift::UInt v4 = 1;
        goto LABEL_9;
      case 4:
        Swift::UInt v4 = 3;
        goto LABEL_9;
      case 5:
        Swift::UInt v4 = 4;
        goto LABEL_9;
      case 6:
        Swift::UInt v4 = 5;
LABEL_9:
        Hasher._combine(_:)(v4);
        break;
      default:
        Hasher._combine(_:)(2uLL);
        Hasher._combine(_:)(a1 & 1);
        break;
    }
    Swift::Int v5 = Hasher._finalize()();
    uint64_t v6 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v7 = v5 & ~v6;
    if ((*(void *)(a2 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7))
    {
      uint64_t v8 = ~v6;
      while (1)
      {
        switch(*(unsigned char *)(*(void *)(a2 + 48) + v7))
        {
          case 2:
            if (a1 != 2) {
              goto LABEL_13;
            }
            return 1;
          case 3:
            if (a1 == 3) {
              return 1;
            }
            goto LABEL_13;
          case 4:
            if (a1 == 4) {
              return 1;
            }
            goto LABEL_13;
          case 5:
            if (a1 == 5) {
              return 1;
            }
            goto LABEL_13;
          case 6:
            if (a1 != 6) {
              goto LABEL_13;
            }
            return 1;
          default:
            if (a1 - 2) >= 5u && ((a1 ^ ((*(unsigned char *)(*(void *)(a2 + 48) + v7) & 1) == 0))) {
              return 1;
            }
LABEL_13:
            unint64_t v7 = (v7 + 1) & v8;
            if (((*(void *)(a2 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
              return 0;
            }
            break;
        }
      }
    }
  }
  return 0;
}

uint64_t Channel.Band.apple80211Band.getter(unsigned __int8 a1)
{
  return a1 + 1;
}

uint64_t sub_1000AD68C(uint64_t a1)
{
  return sub_1000AD6BC(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1000CBBA8);
}

uint64_t sub_1000AD6A4(uint64_t a1)
{
  return sub_1000AD6BC(a1, sub_1000CAF7C);
}

uint64_t sub_1000AD6BC(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t result = sub_1001DFDD4(0, *(void *)(*(void *)v2 + 16), 0, *(void *)(a1 + 16), a2);
  unint64_t v4 = *(void *)(*(void *)v2 + 16);
  unint64_t v5 = *(void *)(a1 + 16);
  if (v4 < v5)
  {
    unint64_t v6 = (2 * v5) | 1;
    uint64_t v7 = swift_bridgeObjectRetain();
    sub_1001DFEA8(v7, a1 + 32, v4, v6);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t IO80211Device.loadCapabilities(on:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  memset(v6, 0, sizeof(v6));
  uint64_t result = (*(uint64_t (**)(uint64_t, unsigned char *, char *, void, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 32))(12, &v6[4], &v7, 0, a1, a2, a3, a4);
  if (!v4) {
    return *(void *)v6;
  }
  return result;
}

uint64_t AppleBroadcomDriver.interfaceName.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AppleBroadcomDriver.interfaceRole.getter()
{
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t AppleBroadcomDriver.device.getter()
{
  return swift_retain();
}

uint64_t AppleBroadcomDriver.eventSource.getter()
{
  swift_beginAccess();
  uint64_t v1 = v0[6];
  sub_1000C9858(v1, v0[7], v0[8]);
  return v1;
}

uint64_t AppleBroadcomDriver.eventSource.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t v7 = v3[6];
  uint64_t v8 = v3[7];
  uint64_t v9 = v3[8];
  v3[6] = a1;
  v3[7] = a2;
  v3[8] = a3;
  return sub_1000C9898(v7, v8, v9);
}

uint64_t (*AppleBroadcomDriver.eventSource.modify())()
{
  return j__swift_endAccess;
}

void *AppleIO80211Driver.capabilities.getter()
{
  if (*(void *)(v0 + 72))
  {
    uint64_t v1 = *(void **)(v0 + 72);
  }
  else
  {
    uint64_t v1 = sub_1000AD9C8();
    *(void *)(v0 + 72) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

void *sub_1000AD9C8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v3 = AppleDevice.loadCapabilities(on:)(v1, v2);
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  swift_release();
  if (qword_10047BF18 == -1)
  {
    if ((v5 & 0x10000000000) == 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  swift_once();
  if ((v5 & 0x10000000000) != 0)
  {
LABEL_3:
    uint64_t v6 = static WiFiDriverCapabilities.supportsNAN;
    swift_beginAccess();
    sub_1000AD6BC(v6, (uint64_t (*)(uint64_t, uint64_t))sub_1000CBBA8);
    swift_endAccess();
  }
LABEL_4:
  if (qword_10047BF20 == -1)
  {
    if ((v5 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  swift_once();
  if (v5)
  {
LABEL_6:
    uint64_t v7 = static WiFiDriverCapabilities.supportsAWDL;
    swift_beginAccess();
    sub_1000AD6BC(v7, (uint64_t (*)(uint64_t, uint64_t))sub_1000CBBA8);
    swift_endAccess();
  }
LABEL_7:
  if (qword_10047BF28 == -1)
  {
    char v8 = BYTE3(v5);
    if ((v3 & 0x2000000000000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  swift_once();
  char v8 = BYTE3(v5);
  if ((v3 & 0x2000000000000000) != 0)
  {
LABEL_9:
    uint64_t v9 = static WiFiDriverCapabilities.supportsDualBand;
    swift_beginAccess();
    sub_1000AD6BC(v9, (uint64_t (*)(uint64_t, uint64_t))sub_1000CBBA8);
    swift_endAccess();
  }
LABEL_10:
  if (qword_10047BF30 == -1)
  {
    if ((v8 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  swift_once();
  if ((v8 & 2) != 0)
  {
LABEL_12:
    uint64_t v10 = static WiFiDriverCapabilities.supportsSimultaneousDualBand;
    swift_beginAccess();
    sub_1000AD6BC(v10, (uint64_t (*)(uint64_t, uint64_t))sub_1000CBBA8);
    swift_endAccess();
  }
LABEL_13:
  if (qword_10047BF38 == -1)
  {
    if ((v5 & 0x80000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  swift_once();
  if ((v5 & 0x80000) != 0)
  {
LABEL_15:
    uint64_t v11 = static WiFiDriverCapabilities.supportsAWDLSoloMode;
    swift_beginAccess();
    sub_1000AD6BC(v11, (uint64_t (*)(uint64_t, uint64_t))sub_1000CBBA8);
    swift_endAccess();
  }
LABEL_16:
  if (qword_10047BF40 == -1)
  {
    if ((v8 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  swift_once();
  if (v8 < 0)
  {
LABEL_18:
    uint64_t v12 = static WiFiDriverCapabilities.isClmRestricted;
    swift_beginAccess();
    sub_1000AD6BC(v12, (uint64_t (*)(uint64_t, uint64_t))sub_1000CBBA8);
    swift_endAccess();
  }
LABEL_19:
  if (qword_10047BF50 != -1)
  {
    swift_once();
    if ((v5 & 0x800000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if ((v5 & 0x800000000) != 0)
  {
LABEL_21:
    uint64_t v13 = static WiFiDriverCapabilities.supportsDFSProxy;
    swift_beginAccess();
    sub_1000AD6BC(v13, (uint64_t (*)(uint64_t, uint64_t))sub_1000CBBA8);
    swift_endAccess();
  }
LABEL_22:
  swift_beginAccess();
  return _swiftEmptyArrayStorage;
}

void *IO80211Driver<>.loadCapabilities()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v26 - v8;
  unint64_t v27 = _swiftEmptyArrayStorage;
  (*(void (**)(uint64_t, uint64_t))(v5 + 56))(a1, v5);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(a1, a3);
  uint64_t v12 = v11;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(v10, v12, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v16 = v15;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if (qword_10047BF18 == -1)
  {
    if ((v16 & 0x10000000000) == 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  swift_once();
  if ((v16 & 0x10000000000) != 0)
  {
LABEL_3:
    uint64_t v17 = static WiFiDriverCapabilities.supportsNAN;
    swift_beginAccess();
    sub_1000AD6BC(v17, (uint64_t (*)(uint64_t, uint64_t))sub_1000CBBA8);
    swift_endAccess();
  }
LABEL_4:
  if (qword_10047BF20 == -1)
  {
    if ((v16 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  swift_once();
  if (v16)
  {
LABEL_6:
    uint64_t v18 = static WiFiDriverCapabilities.supportsAWDL;
    swift_beginAccess();
    sub_1000AD6BC(v18, (uint64_t (*)(uint64_t, uint64_t))sub_1000CBBA8);
    swift_endAccess();
  }
LABEL_7:
  if (qword_10047BF28 == -1)
  {
    char v19 = BYTE3(v16);
    if ((v14 & 0x2000000000000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  swift_once();
  char v19 = BYTE3(v16);
  if ((v14 & 0x2000000000000000) != 0)
  {
LABEL_9:
    uint64_t v20 = static WiFiDriverCapabilities.supportsDualBand;
    swift_beginAccess();
    sub_1000AD6BC(v20, (uint64_t (*)(uint64_t, uint64_t))sub_1000CBBA8);
    swift_endAccess();
  }
LABEL_10:
  if (qword_10047BF30 == -1)
  {
    if ((v19 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  swift_once();
  if ((v19 & 2) != 0)
  {
LABEL_12:
    uint64_t v21 = static WiFiDriverCapabilities.supportsSimultaneousDualBand;
    swift_beginAccess();
    sub_1000AD6BC(v21, (uint64_t (*)(uint64_t, uint64_t))sub_1000CBBA8);
    swift_endAccess();
  }
LABEL_13:
  if (qword_10047BF38 == -1)
  {
    if ((v16 & 0x80000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  swift_once();
  if ((v16 & 0x80000) != 0)
  {
LABEL_15:
    uint64_t v22 = static WiFiDriverCapabilities.supportsAWDLSoloMode;
    swift_beginAccess();
    sub_1000AD6BC(v22, (uint64_t (*)(uint64_t, uint64_t))sub_1000CBBA8);
    swift_endAccess();
  }
LABEL_16:
  if (qword_10047BF40 == -1)
  {
    if ((v19 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  swift_once();
  if (v19 < 0)
  {
LABEL_18:
    uint64_t v23 = static WiFiDriverCapabilities.isClmRestricted;
    swift_beginAccess();
    sub_1000AD6BC(v23, (uint64_t (*)(uint64_t, uint64_t))sub_1000CBBA8);
    swift_endAccess();
  }
LABEL_19:
  if (qword_10047BF50 != -1)
  {
    swift_once();
    if ((v16 & 0x800000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if ((v16 & 0x800000000) != 0)
  {
LABEL_21:
    uint64_t v24 = static WiFiDriverCapabilities.supportsDFSProxy;
    swift_beginAccess();
    sub_1000AD6BC(v24, (uint64_t (*)(uint64_t, uint64_t))sub_1000CBBA8);
    swift_endAccess();
  }
LABEL_22:
  swift_beginAccess();
  return v27;
}

uint64_t AppleIO80211Driver.logger.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC7CoreP2P18AppleIO80211Driver_logger;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t AppleIO80211Driver.init(device:role:name:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(void *)(v5 + 40) = a1;
  *(unsigned char *)(v5 + 32) = a2;
  *(void *)(v5 + 16) = a3;
  *(void *)(v5 + 24) = a4;
  swift_retain();
  Logger.init(subsystem:category:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v5 + OBJC_IVAR____TtC7CoreP2P18AppleIO80211Driver_logger, v13, v10);
  swift_retain_n();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315138;
    swift_retain();
    uint64_t v17 = AppleIO80211Driver.description.getter();
    unint64_t v19 = v18;
    swift_release();
    uint64_t v21 = sub_100010680(v17, v19, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Created %s", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  swift_release();
  return v5;
}

uint64_t *AppleIO80211Driver.deinit()
{
  uint64_t v1 = (uint64_t *)v0;
  swift_beginAccess();
  if (*(void *)(v0 + 64))
  {
    swift_unownedRetain();
    swift_bridgeObjectRetain();
    swift_unownedRelease();
    swift_bridgeObjectRelease();
    swift_unownedRetainStrong();
    AppleDevice.stopMonitoringEvents(on:)(*(Swift::String *)(v0 + 56));
    swift_release();
  }
  swift_endAccess();
  uint64_t v2 = v0 + OBJC_IVAR____TtC7CoreP2P18AppleIO80211Driver_logger;
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    v11[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_retain();
    uint64_t v6 = AppleIO80211Driver.description.getter();
    unint64_t v8 = v7;
    swift_release();
    sub_100010680(v6, v8, v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Destroyed %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  swift_bridgeObjectRelease();
  swift_release();
  sub_1000C9898(v1[6], v1[7], v1[8]);
  swift_bridgeObjectRelease();
  uint64_t v9 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v2, v9);
  return v1;
}

uint64_t AppleIO80211Driver.__deallocating_deinit()
{
  AppleIO80211Driver.deinit();

  return swift_deallocClassInstance();
}

uint64_t DeviceDriver<>.countryCode.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(a3 + 32))(a1, a3) == 4)
  {
    if (qword_10047BFF8 != -1) {
      swift_once();
    }
    return (unsigned __int16)static CountryCode.unknown;
  }
  else
  {
    uint64_t v9 = sub_100010BCC(&qword_10047E7A0);
    sub_1000BF380(51, v9, a1, v9, a2, a3, a4);
    return v11;
  }
}

uint64_t sub_1000AEAD4(__int16 a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C4C3C(a1, a2, a3, (uint64_t (*)(uint64_t, unint64_t))sub_100063EEC);
}

uint64_t DeviceDriver<>.update(countryCode:)(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v11 = 0;
  __int16 v12 = a1;
  char v13 = 0;
  type metadata accessor for apple80211_country_code_data(0);
  return sub_1000BF4AC(51, (uint64_t)&v11, a2, v9, a3, a4, a5);
}

uint64_t DeviceDriver<>.userspaceP2POptions.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for apple80211_userspace_p2p_options_t(0);
  sub_1000BF380(389, v8, a1, v8, a2, *(void *)(a3 + 16), a4);
  return v10;
}

uint64_t sub_1000AEC10(uint64_t a1)
{
  return sub_100063F38(0x185uLL, 1, a1);
}

uint64_t DeviceDriver<>.update(userspaceP2POptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = a1;
  int v11 = 1;
  type metadata accessor for apple80211_userspace_p2p_options_t(0);
  return sub_1000BF4AC(389, (uint64_t)&v11, a2, v9, a3, *(void *)(a4 + 16), a5);
}

uint64_t sub_1000AECBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000C4CCC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, int *))sub_100063DCC);
}

uint64_t DeviceDriver<>.updateGateway(macAddress:ipAddress:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1000AED4C(a1, a2, a3, a4, a5, a6, 450);
}

uint64_t sub_1000AED04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000C4DD8(a1, a2, a3, a4, (uint64_t (*)(uint64_t, int *))sub_100063DCC);
}

uint64_t DeviceDriver<>.updateInfraPeer(macAddress:ipAddress:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1000AED4C(a1, a2, a3, a4, a5, a6, 451);
}

uint64_t sub_1000AED4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1000BFC1C(a1 & 0xFFFFFFFFFFFFLL, a2, a7, a3, a4, a5, a6);
}

uint64_t sub_1000AED80(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  return sub_1000C4EE4(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))sub_100063F84);
}

uint64_t DeviceDriver<>.updateInterfaceState(for:active:)(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  switch((char)result)
  {
    case 1:
      int v10 = 6;
      if (a2) {
        goto LABEL_5;
      }
      goto LABEL_3;
    case 2:
      int v10 = 9;
      if (a2) {
LABEL_5:
      }
        int v11 = 1;
      else {
LABEL_3:
      }
        int v11 = 0;
      v13[0] = v11;
      v13[1] = v10;
      uint64_t v14 = 1;
      int v15 = 0;
      type metadata accessor for apple80211_virtual_if_state(0);
      uint64_t result = sub_1000BF4AC(503, (uint64_t)v13, a3, v12, a4, *(void *)(a5 + 16), a6);
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_1000AEE90()
{
  sub_1000BE854(0x75uLL);
  return v0 != 0;
}

BOOL IO80211Driver<>.awdlEnabled.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for apple80211_awdl_sync_enabled(0);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(a3 + 8);
  uint64_t v9 = *(void *)(a2 + 8);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_1000BF380(117, v7, a1, v7, v8, v9, AssociatedConformanceWitness);
  return v12 != 0;
}

uint64_t sub_1000AEFC0()
{
  sub_1000BE938(0x94uLL);
  return v0;
}

uint64_t IO80211Driver<>.awdlSubstate.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for apple80211_awdl_strategy(0);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(a3 + 8);
  uint64_t v9 = *(void *)(a2 + 8);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_1000BF380(148, v7, a1, v7, v8, v9, AssociatedConformanceWitness);
  return v12;
}

uint64_t sub_1000AF0E4()
{
  unint64_t v0 = sub_1000BEA24(0xF4uLL);
  unsigned __int16 v1 = WORD2(v0);
  unsigned __int16 v3 = v2;
  unint64_t v4 = sub_1001C7008(HIWORD(v0));
  sub_1001C7008(v1);
  sub_1001C7008(v3);
  return v4 & 0xFFFFFFFFFFFFLL;
}

uint64_t IO80211Driver<>.peerPreferredChannels.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for apple80211_awdl_preferred_channels(0);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(a3 + 8);
  uint64_t v9 = *(void *)(a2 + 8);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_1000BF380(244, v7, a1, v7, v8, v9, AssociatedConformanceWitness);
  unint64_t v11 = sub_1001C7008(v14);
  sub_1001C7008(v13);
  sub_1001C7008(v15);
  return v11 & 0xFFFFFFFFFFFFLL;
}

uint64_t sub_1000AF280()
{
  sub_1000BEB08(0x81uLL, __src);
  memcpy(__dst, __src, sizeof(__dst));
  return sub_1000CA288((uint64_t)__dst);
}

uint64_t IO80211Driver<>.awdlChannelSequence.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for apple80211_awdl_sync_channel_sequence(0);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(a3 + 8);
  uint64_t v9 = *(void *)(a2 + 8);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_1000BF380(129, v7, a1, v7, v8, v9, AssociatedConformanceWitness);
  memcpy(__dst, __src, 0x190uLL);
  return sub_1000CA288((uint64_t)__dst);
}

uint64_t sub_1000AF448()
{
  return sub_1000AF46C();
}

uint64_t sub_1000AF46C()
{
  uint64_t v1 = swift_slowAlloc();
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.getRequest(requestType:data:on:)(0x1D2uLL, v1, v1 + 0x2000, 0, v2, v3);
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  uint64_t v5 = 0;
  uint64_t v6 = _swiftEmptyArrayStorage;
  while (1)
  {
    char v7 = *(unsigned char *)(v1 + v5);
    if (v7) {
      break;
    }
LABEL_2:
    if (++v5 == 0x2000)
    {
      swift_slowDealloc();
      return (uint64_t)v6;
    }
  }
  if ((v5 & 0xE000) != 0) {
    goto LABEL_16;
  }
  uint64_t v8 = 0;
  while (((1 << v8) & ~v7) != 0)
  {
LABEL_7:
    if (++v8 == 8) {
      goto LABEL_2;
    }
  }
  int v9 = (unsigned __int16)(8 * v5) + (unsigned __int16)v8;
  if ((v9 & 0x10000) == 0)
  {
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1000C6A24(0, v6[2] + 1, 1, v6);
      uint64_t v6 = (void *)result;
    }
    unint64_t v11 = v6[2];
    unint64_t v10 = v6[3];
    if (v11 >= v10 >> 1)
    {
      uint64_t result = (uint64_t)sub_1000C6A24((void *)(v10 > 1), v11 + 1, 1, v6);
      uint64_t v6 = (void *)result;
    }
    long long v6[2] = v11 + 1;
    *((_WORD *)v6 + v11 + 16) = v9;
    goto LABEL_7;
  }
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t IO80211Driver<>.activePorts.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_slowAlloc();
  uint64_t v7 = *(void *)(a3 + 8);
  uint64_t v8 = *(void *)(a2 + 8);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t result = sub_1000BE53C(466, v6, v6 + 0x2000, a1, v7, v8, AssociatedConformanceWitness);
  uint64_t v11 = 0;
  unsigned int v12 = _swiftEmptyArrayStorage;
  while (1)
  {
    char v13 = *(unsigned char *)(v6 + v11);
    if (v13) {
      break;
    }
LABEL_2:
    if (++v11 == 0x2000)
    {
      swift_slowDealloc();
      return (uint64_t)v12;
    }
  }
  if ((v11 & 0xE000) != 0) {
    goto LABEL_16;
  }
  uint64_t v14 = 0;
  while (((1 << v14) & ~v13) != 0)
  {
LABEL_7:
    if (++v14 == 8) {
      goto LABEL_2;
    }
  }
  int v15 = (unsigned __int16)(8 * v11) + (unsigned __int16)v14;
  if ((v15 & 0x10000) == 0)
  {
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1000C6A24(0, v12[2] + 1, 1, v12);
      unsigned int v12 = (void *)result;
    }
    unint64_t v17 = v12[2];
    unint64_t v16 = v12[3];
    if (v17 >= v16 >> 1)
    {
      uint64_t result = (uint64_t)sub_1000C6A24((void *)(v16 > 1), v17 + 1, 1, v12);
      unsigned int v12 = (void *)result;
    }
    v12[2] = v17 + 1;
    *((_WORD *)v12 + v17 + 16) = v15;
    goto LABEL_7;
  }
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t IO80211Driver<>.trafficRegistration(for:to:desiredLatency:desiredChannel:desiredSecondaryChannel:options:ssidHash:active:)(uint64_t a1, uint64_t a2, int a3, __int16 a4, unsigned __int16 a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(_WORD *)&v31[8] = 0;
  memset(&v31[12], 0, 156);
  *(void *)uint64_t v31 = 1;
  *(_DWORD *)&v31[168] = a8 & 1;
  *(_DWORD *)&v31[172] = sub_10000E504(a6);
  LOWORD(v32) = a4;
  *(_DWORD *)((char *)&v32 + 2) = a5;
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;
  unint64_t v34 = v31;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v36 = 128;
  uint64_t v19 = (uint64_t)sub_10000E350((uint64_t)sub_10000E464, (uint64_t)v33, v16, v18);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v20 = 127;
  if (v19 < 127) {
    uint64_t v20 = v19;
  }
  if (v20 < 0) {
    __break(1u);
  }
  *(_DWORD *)&v31[12] = v20;
  *(_DWORD *)&v31[144] = a3;
  *(_WORD *)&v31[4] = a2;
  v31[6] = BYTE2(a2);
  v31[7] = BYTE3(a2);
  v31[8] = BYTE4(a2);
  v31[9] = BYTE5(a2);
  if ((a7 & 0x1000000000000) == 0)
  {
    sub_100010BCC(&qword_10047BEF8);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_1003B2F40;
    *(_WORD *)(v21 + 32) = a7;
    *(unsigned char *)(v21 + 34) = BYTE2(a7);
    *(unsigned char *)(v21 + 35) = BYTE3(a7);
    *(unsigned char *)(v21 + 36) = BYTE4(a7);
    *(unsigned char *)(v21 + 37) = BYTE5(a7);
    uint64_t v22 = sub_1001265EC(v21);
    unint64_t v24 = v23;
    swift_bridgeObjectRelease();
    *(void *)&v37[0] = v22;
    *((void *)&v37[0] + 1) = v24;
    sub_100074B70();
    DataProtocol.copyBytes(to:)();
    sub_10000C970(v22, v24);
  }
  v37[8] = *(_OWORD *)&v31[128];
  v37[9] = *(_OWORD *)&v31[144];
  v37[10] = *(_OWORD *)&v31[160];
  uint64_t v38 = v32;
  v37[4] = *(_OWORD *)&v31[64];
  v37[5] = *(_OWORD *)&v31[80];
  v37[6] = *(_OWORD *)&v31[96];
  v37[7] = *(_OWORD *)&v31[112];
  v37[0] = *(_OWORD *)v31;
  v37[1] = *(_OWORD *)&v31[16];
  v37[2] = *(_OWORD *)&v31[32];
  v37[3] = *(_OWORD *)&v31[48];
  type metadata accessor for apple80211_awdl_peer_traffic_registration(0);
  uint64_t v26 = v25;
  uint64_t v27 = *(void *)(a11 + 8);
  uint64_t v28 = *(void *)(a10 + 8);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return sub_1000BF4AC(164, (uint64_t)v37, a9, v26, v27, v28, AssociatedConformanceWitness);
}

uint64_t sub_1000AFB30(char a1, uint64_t a2)
{
  return sub_100063FD0(0x1A1uLL, qword_1003B79A8[a1], a2 & 0xFFFFFFFFFFFFLL);
}

uint64_t IO80211Driver<>.transmit(unicastMasterIndicationOptions:to:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = dword_1003B7B00[a1];
  v15[0] = 1;
  v15[1] = v8;
  __int16 v16 = a2;
  char v17 = BYTE2(a2);
  char v18 = BYTE3(a2);
  char v19 = BYTE4(a2);
  char v20 = BYTE5(a2);
  type metadata accessor for apple80211_awdl_UMI_data(0);
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(a5 + 8);
  uint64_t v12 = *(void *)(a4 + 8);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return sub_1000BF4AC(417, (uint64_t)v15, a3, v10, v11, v12, AssociatedConformanceWitness);
}

unint64_t sub_1000AFC6C()
{
  unint64_t result = sub_1000BEC0C(0xD9uLL);
  if ((result & 0x8000000000000000) != 0) {
    __break(1u);
  }
  else {
    result >>= 32;
  }
  return result;
}

uint64_t IO80211Driver<>.operatingMode.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for apple80211_awdl_oper_mode(0);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(a3 + 8);
  uint64_t v9 = *(void *)(a2 + 8);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_1000BF380(217, v7, a1, v7, v8, v9, AssociatedConformanceWitness);
  uint64_t result = v12;
  if ((v12 & 0x80000000) != 0) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000AFDA0(uint64_t a1)
{
  if ((a1 & 0x80000000) == 0) {
    return sub_1000640C0(0xD9uLL, a1 << 32);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t IO80211Driver<>.updateOperatingMode(_:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v13[0] = 0;
    v13[1] = a1;
    type metadata accessor for apple80211_awdl_oper_mode(0);
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)(a4 + 8);
    uint64_t v10 = *(void *)(a3 + 8);
    swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    return sub_1000BF4AC(217, (uint64_t)v13, a2, v8, v9, v10, AssociatedConformanceWitness);
  }
  return result;
}

uint64_t sub_1000AFF28(char a1)
{
  uint64_t v4 = *v1;
  v3[2] = a1 & 1;
  v3[3] = &v4;
  return sub_10004EF00((uint64_t (*)(void *))sub_1000CB378, (uint64_t)v3, 0x5379616C70726961, 0xEB000000006B6E69);
}

uint64_t IO80211Driver<>.setAirPlaySinkMode(_:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[2] = a2;
  _OWORD v5[3] = a3;
  void v5[4] = a4;
  v5[5] = a1 & 1;
  return sub_10004EF00((uint64_t (*)(void *))sub_1000CBB38, (uint64_t)v5, 0x5379616C70726961, 0xEB000000006B6E69);
}

uint64_t sub_1000B0004(char a1)
{
  if (a1) {
    uint64_t v1 = 0x100000001;
  }
  else {
    uint64_t v1 = 1;
  }
  return sub_100064180(0xA3uLL, v1);
}

uint64_t IO80211Driver<>.setAirPlaySoloMode(_:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v13 = 1;
  char v14 = a1;
  type metadata accessor for apple80211_awdl_social_time_slots(0);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(a4 + 8);
  uint64_t v10 = *(void *)(a3 + 8);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return sub_1000BF4AC(163, (uint64_t)&v13, a2, v8, v9, v10, AssociatedConformanceWitness);
}

uint64_t sub_1000B00FC(uint64_t a1)
{
  return sub_1000B0120(a1);
}

uint64_t sub_1000B0120(uint64_t a1)
{
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = 64;
  if (v2 < 0x40) {
    uint64_t v3 = *(void *)(a1 + 16);
  }
  LODWORD(v20) = 0;
  HIDWORD(v20) = v3;
  if (v3)
  {
    uint64_t v4 = (_WORD *)&v12 + 2;
    uint64_t v5 = (_DWORD *)(a1 + 32);
    while (1)
    {
      if (!v2) {
        __break(1u);
      }
      if (*v5 >= 0x10000u) {
        break;
      }
      *v4++ = *v5;
      --v2;
      v5 += 2;
      if (!--v3) {
        goto LABEL_8;
      }
    }
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_8:
    v9[6] = v18;
    v9[7] = v19;
    uint64_t v10 = v20;
    void v9[2] = v14;
    v9[3] = v15;
    v9[4] = v16;
    v9[5] = v17;
    v9[0] = v12;
    v9[1] = v13;
    uint64_t v6 = *(void *)(v1 + 16);
    uint64_t v7 = *(void *)(v1 + 24);
    swift_retain();
    swift_bridgeObjectRetain();
    AppleDevice.setRequest(requestType:data:on:)(0x1A3uLL, (uint64_t)v9, (uint64_t)&v11, 0, v6, v7);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t IO80211Driver<>.updateLTERestrictedChannels(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  unint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = 64;
  if (v7 < 0x40) {
    uint64_t v8 = *(void *)(a1 + 16);
  }
  LODWORD(v27) = 0;
  HIDWORD(v27) = v8;
  if (v8)
  {
    uint64_t v9 = (_WORD *)&v19 + 2;
    uint64_t v10 = (_DWORD *)(a1 + 32);
    while (v7)
    {
      if (*v10 >= 0x10000u) {
        goto LABEL_10;
      }
      *v9++ = *v10;
      --v7;
      v10 += 2;
      if (!--v8) {
        goto LABEL_8;
      }
    }
    __break(1u);
LABEL_10:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_8:
    v17[6] = v25;
    v17[7] = v26;
    uint64_t v18 = v27;
    v17[2] = v21;
    v17[3] = v22;
    v17[4] = v23;
    v17[5] = v24;
    v17[0] = v19;
    v17[1] = v20;
    type metadata accessor for apple80211_lte_restricted_channels(0);
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)(a4 + 8);
    uint64_t v14 = *(void *)(a3 + 8);
    swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    return sub_1000BF4AC(419, (uint64_t)v17, a2, v12, v13, v14, AssociatedConformanceWitness);
  }
  return result;
}

uint64_t sub_1000B0440(char a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  return sub_1000B0464(a1, a2, a3, a4, a5);
}

uint64_t sub_1000B0464(char a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v6 = v5;
  __int16 v160 = 0;
  char v162 = 0;
  char v163 = 0;
  uint64_t v159 = 1;
  BOOL v10 = (a1 & 1) == 0;
  uint64_t v161 = v10;
  swift_getKeyPath();
  uint64_t v11 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  char v13 = v12;
  swift_release();
  if (v13) {
    goto LABEL_250;
  }
  unint64_t v14 = a3 >> 62;
  switch(a3 >> 62)
  {
    case 1uLL:
      if ((int)a2 == a2 >> 32) {
        goto LABEL_10;
      }
      goto LABEL_4;
    case 2uLL:
      if (*(void *)(a2 + 16) == *(void *)(a2 + 24)) {
        goto LABEL_10;
      }
      goto LABEL_4;
    case 3uLL:
      goto LABEL_10;
    default:
      if ((a3 & 0xFF000000000000) == 0)
      {
LABEL_10:
        HIWORD(v161) = 0;
        uint64_t v16 = *(void *)(v6 + 16);
        uint64_t v17 = *(void *)(v6 + 24);
        swift_retain();
        swift_bridgeObjectRetain();
        AppleDevice.setRequest(requestType:data:on:)(0x78uLL, (uint64_t)&v159, (uint64_t)&v164, 0, v16, v17);
        swift_bridgeObjectRelease();
        return swift_release();
      }
LABEL_4:
      if (a5 >> 60 == 15)
      {
        if (v14)
        {
          if (v14 == 1)
          {
            LODWORD(v15) = HIDWORD(a2) - a2;
            if (__OFSUB__(HIDWORD(a2), a2))
            {
LABEL_199:
              __break(1u);
              goto LABEL_200;
            }
            uint64_t v15 = (int)v15;
          }
          else
          {
            uint64_t v21 = *(void *)(a2 + 16);
            uint64_t v20 = *(void *)(a2 + 24);
            BOOL v22 = __OFSUB__(v20, v21);
            uint64_t v15 = v20 - v21;
            if (v22)
            {
LABEL_201:
              __break(1u);
              goto LABEL_202;
            }
          }
        }
        else
        {
          uint64_t v15 = BYTE6(a3);
        }
        unint64_t v23 = v15 + 4;
        if (!__OFADD__(v15, 4))
        {
          if ((v23 & 0x8000000000000000) != 0 || v23 >= 0x10000) {
            goto LABEL_257;
          }
          uint64_t v24 = v11 + 7;
          if (!__OFADD__(v11, 7))
          {
            if (v14)
            {
              if (v14 == 1)
              {
                LODWORD(v25) = HIDWORD(a2) - a2;
                if (__OFSUB__(HIDWORD(a2), a2))
                {
LABEL_203:
                  __break(1u);
                  goto LABEL_204;
                }
                uint64_t v25 = (int)v25;
              }
              else
              {
                uint64_t v33 = *(void *)(a2 + 16);
                uint64_t v32 = *(void *)(a2 + 24);
                BOOL v22 = __OFSUB__(v32, v33);
                uint64_t v25 = v32 - v33;
                if (v22)
                {
LABEL_204:
                  __break(1u);
                  goto LABEL_205;
                }
              }
            }
            else
            {
              uint64_t v25 = BYTE6(a3);
            }
            uint64_t v155 = v11 + 7;
            uint64_t v34 = v24 + v25;
            if (!__OFADD__(v24, v25))
            {
              uint64_t v35 = swift_slowAlloc();
              uint64_t v36 = v35 + v34;
              uint64_t v37 = v35;
              uint64_t v38 = 0;
              switch((int)v14)
              {
                case 1:
                  LODWORD(v38) = HIDWORD(a2) - a2;
                  if (__OFSUB__(HIDWORD(a2), a2)) {
                    goto LABEL_209;
                  }
                  uint64_t v38 = (int)v38;
LABEL_57:
                  BOOL v22 = __OFADD__(v38, 7);
                  unint64_t v49 = v38 + 7;
                  if (v22) {
                    goto LABEL_190;
                  }
                  if ((v49 & 0x8000000000000000) != 0 || v49 >= 0x10000) {
                    goto LABEL_257;
                  }
                  break;
                case 2:
                  uint64_t v48 = *(void *)(a2 + 16);
                  uint64_t v47 = *(void *)(a2 + 24);
                  BOOL v22 = __OFSUB__(v47, v48);
                  uint64_t v38 = v47 - v48;
                  if (!v22) {
                    goto LABEL_57;
                  }
                  goto LABEL_210;
                case 3:
                  goto LABEL_57;
                default:
                  uint64_t v38 = BYTE6(a3);
                  goto LABEL_57;
              }
              *(void *)uint64_t v35 = 1;
              *(_WORD *)(v35 + 8) = 0;
              *(unsigned char *)(v35 + 10) = v10;
              *(unsigned char *)(v35 + 11) = 0;
              *(_DWORD *)(v35 + 12) = 0;
              *(_WORD *)(v35 + 16) = v49;
              *(_WORD *)(v35 + 18) = 0;
              uint64_t v50 = v35 + v11;
              *(unsigned char *)uint64_t v50 = 1;
              *(_WORD *)(v50 + 1) = v23;
              *(_DWORD *)(v50 + 3) = 0;
              *(unsigned char *)(v50 + 7) = 0;
              switch((int)v14)
              {
                case 1:
                  if (a2 >> 32 < (int)a2) {
                    goto LABEL_213;
                  }
                  sub_100013D44(a2, a3);
                  uint64_t v54 = __DataStorage._bytes.getter();
                  if (v54)
                  {
                    uint64_t v55 = v54;
                    uint64_t v56 = __DataStorage._offset.getter();
                    uint64_t v57 = (int)a2 - v56;
                    if (!__OFSUB__((int)a2, v56))
                    {
                      uint64_t v58 = __DataStorage._length.getter();
                      if (v58 >= (a2 >> 32) - (int)a2) {
                        size_t v59 = (a2 >> 32) - (int)a2;
                      }
                      else {
                        size_t v59 = v58;
                      }
                      memmove((void *)(v37 + v155), (const void *)(v55 + v57), v59);
                      sub_10000C970(a2, a3);
LABEL_86:
                      uint64_t v67 = *(void *)(v6 + 16);
                      uint64_t v68 = *(void *)(v6 + 24);
                      swift_retain();
                      swift_bridgeObjectRetain();
                      AppleDevice.setRequest(requestType:data:on:)(0x78uLL, v37, v36, 0, v67, v68);
                      swift_bridgeObjectRelease();
                      swift_release();
                      return swift_slowDealloc();
                    }
                    goto LABEL_217;
                  }
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_252:
                  __break(1u);
LABEL_253:
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_254:
                  __break(1u);
LABEL_255:
                  __break(1u);
LABEL_256:
                  __break(1u);
                  break;
                case 2:
                  uint64_t v60 = *(void *)(a2 + 16);
                  uint64_t v61 = *(void *)(a2 + 24);
                  swift_retain();
                  swift_retain();
                  __int32 v62 = (char *)__DataStorage._bytes.getter();
                  if (!v62) {
                    goto LABEL_80;
                  }
                  uint64_t v63 = __DataStorage._offset.getter();
                  if (__OFSUB__(v60, v63)) {
                    goto LABEL_238;
                  }
                  v62 += v60 - v63;
LABEL_80:
                  BOOL v22 = __OFSUB__(v61, v60);
                  int64_t v64 = v61 - v60;
                  if (v22) {
                    goto LABEL_216;
                  }
                  uint64_t v65 = __DataStorage._length.getter();
                  if (!v62) {
                    goto LABEL_252;
                  }
                  if (v65 >= v64) {
                    size_t v66 = v64;
                  }
                  else {
                    size_t v66 = v65;
                  }
                  memmove((void *)(v37 + v155), v62, v66);
                  swift_release();
                  swift_release();
                  goto LABEL_86;
                case 3:
                  goto LABEL_86;
                default:
                  uint64_t __src = a2;
                  LOWORD(v157) = a3;
                  BYTE2(v157) = BYTE2(a3);
                  HIBYTE(v157) = BYTE3(a3);
                  LOBYTE(v158) = BYTE4(a3);
                  HIBYTE(v158) = BYTE5(a3);
                  memcpy((void *)(v35 + v155), &__src, BYTE6(a3));
                  goto LABEL_86;
              }
LABEL_257:
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              JUMPOUT(0x1000B13C0);
            }
            goto LABEL_189;
          }
          goto LABEL_186;
        }
        __break(1u);
LABEL_185:
        __break(1u);
LABEL_186:
        __break(1u);
LABEL_187:
        __break(1u);
LABEL_188:
        __break(1u);
LABEL_189:
        __break(1u);
LABEL_190:
        __break(1u);
LABEL_191:
        __break(1u);
LABEL_192:
        __break(1u);
LABEL_193:
        __break(1u);
LABEL_194:
        __break(1u);
LABEL_195:
        __break(1u);
LABEL_196:
        __break(1u);
LABEL_197:
        __break(1u);
LABEL_198:
        __break(1u);
        goto LABEL_199;
      }
      if (v14)
      {
        if (v14 == 1)
        {
          LODWORD(v19) = HIDWORD(a2) - a2;
          if (__OFSUB__(HIDWORD(a2), a2))
          {
LABEL_200:
            __break(1u);
            goto LABEL_201;
          }
          uint64_t v19 = (int)v19;
        }
        else
        {
          uint64_t v27 = *(void *)(a2 + 16);
          uint64_t v26 = *(void *)(a2 + 24);
          BOOL v22 = __OFSUB__(v26, v27);
          uint64_t v19 = v26 - v27;
          if (v22)
          {
LABEL_202:
            __break(1u);
            goto LABEL_203;
          }
        }
      }
      else
      {
        uint64_t v19 = BYTE6(a3);
      }
      BOOL v22 = __OFADD__(v19, 2);
      uint64_t v28 = v19 + 2;
      if (v22) {
        goto LABEL_185;
      }
      uint64_t v29 = v28 + 4;
      if (__OFADD__(v28, 4)) {
        goto LABEL_187;
      }
      unint64_t v30 = a5 >> 62;
      uint64_t v31 = 0;
      switch(a5 >> 62)
      {
        case 1uLL:
          LODWORD(v31) = HIDWORD(a4) - a4;
          if (__OFSUB__(HIDWORD(a4), a4)) {
            goto LABEL_207;
          }
          uint64_t v31 = (int)v31;
LABEL_41:
          unint64_t v41 = v29 + v31;
          if (__OFADD__(v29, v31)) {
            goto LABEL_188;
          }
          if ((v41 & 0x8000000000000000) != 0 || v41 >= 0x10000) {
            goto LABEL_257;
          }
          if (v14)
          {
            if (v14 == 1)
            {
              if (__OFSUB__(HIDWORD(a2), a2))
              {
LABEL_205:
                __break(1u);
LABEL_206:
                __break(1u);
LABEL_207:
                __break(1u);
LABEL_208:
                __break(1u);
LABEL_209:
                __break(1u);
LABEL_210:
                __break(1u);
LABEL_211:
                __break(1u);
LABEL_212:
                __break(1u);
LABEL_213:
                __break(1u);
LABEL_214:
                __break(1u);
LABEL_215:
                __break(1u);
LABEL_216:
                __break(1u);
LABEL_217:
                __break(1u);
LABEL_218:
                __break(1u);
LABEL_219:
                __break(1u);
LABEL_220:
                __break(1u);
LABEL_221:
                __break(1u);
LABEL_222:
                __break(1u);
LABEL_223:
                __break(1u);
LABEL_224:
                __break(1u);
LABEL_225:
                __break(1u);
LABEL_226:
                __break(1u);
LABEL_227:
                __break(1u);
LABEL_228:
                __break(1u);
LABEL_229:
                __break(1u);
LABEL_230:
                __break(1u);
LABEL_231:
                __break(1u);
LABEL_232:
                __break(1u);
LABEL_233:
                __break(1u);
LABEL_234:
                __break(1u);
LABEL_235:
                __break(1u);
LABEL_236:
                __break(1u);
LABEL_237:
                __break(1u);
LABEL_238:
                __break(1u);
LABEL_239:
                __break(1u);
LABEL_240:
                __break(1u);
LABEL_241:
                __break(1u);
LABEL_242:
                __break(1u);
LABEL_243:
                __break(1u);
LABEL_244:
                __break(1u);
LABEL_245:
                __break(1u);
LABEL_246:
                __break(1u);
LABEL_247:
                __break(1u);
LABEL_248:
                __break(1u);
LABEL_249:
                __break(1u);
LABEL_250:
                __break(1u);
              }
              uint64_t v42 = HIDWORD(a2) - (int)a2;
            }
            else
            {
              uint64_t v44 = *(void *)(a2 + 16);
              uint64_t v43 = *(void *)(a2 + 24);
              uint64_t v42 = v43 - v44;
              if (__OFSUB__(v43, v44)) {
                goto LABEL_206;
              }
            }
            if (v42 < 0 || (unint64_t)v42 >= 0x10000) {
              goto LABEL_257;
            }
          }
          else
          {
            uint64_t v42 = BYTE6(a3);
          }
          uint64_t v45 = v30;
          LOWORD(v46) = 0;
          switch((int)v30)
          {
            case 1:
              if (__OFSUB__(HIDWORD(a4), a4)) {
                goto LABEL_211;
              }
              unint64_t v46 = HIDWORD(a4) - (int)a4;
LABEL_65:
              if ((v46 & 0x8000000000000000) != 0 || v46 >= 0x10000) {
                goto LABEL_257;
              }
LABEL_67:
              uint64_t v153 = v11 + 5;
              if (__OFADD__(v11, 5)) {
                goto LABEL_191;
              }
              uint64_t v53 = 0;
              switch((int)v14)
              {
                case 1:
                  LODWORD(v53) = HIDWORD(a2) - a2;
                  if (__OFSUB__(HIDWORD(a2), a2)) {
                    goto LABEL_214;
                  }
                  uint64_t v53 = (int)v53;
LABEL_90:
                  BOOL v22 = __OFADD__(v153, v53);
                  uint64_t v71 = v153 + v53;
                  if (v22) {
                    goto LABEL_192;
                  }
                  BOOL v22 = __OFADD__(v71, 4);
                  uint64_t v72 = v71 + 4;
                  if (v22) {
                    goto LABEL_193;
                  }
                  uint64_t v73 = 0;
                  switch(v45)
                  {
                    case 1:
                      LODWORD(v73) = HIDWORD(a4) - a4;
                      if (__OFSUB__(HIDWORD(a4), a4)) {
                        goto LABEL_218;
                      }
                      uint64_t v73 = (int)v73;
LABEL_97:
                      __int16 v150 = v46;
                      uint64_t v151 = v45;
                      uint64_t v152 = v14;
                      uint64_t v76 = v72 + v73;
                      if (__OFADD__(v72, v73)) {
                        goto LABEL_194;
                      }
                      BOOL v77 = v10;
                      unint64_t v78 = a3;
                      uint64_t v79 = v11;
                      uint64_t v80 = v6;
                      __int16 v81 = v41;
                      sub_100013D44(a4, a5);
                      uint64_t v82 = swift_slowAlloc();
                      uint64_t v83 = v82 + v76;
                      uint64_t v84 = 0;
                      uint64_t v85 = v82;
                      uint64_t v87 = v151;
                      uint64_t v86 = v152;
                      uint64_t v88 = v79;
                      unint64_t v89 = v78;
                      BOOL v90 = v77;
                      uint64_t v91 = v85;
                      switch(v152)
                      {
                        case 1:
                          LODWORD(v84) = HIDWORD(a2) - a2;
                          if (__OFSUB__(HIDWORD(a2), a2)) {
                            goto LABEL_220;
                          }
                          uint64_t v84 = (int)v84;
LABEL_103:
                          BOOL v22 = __OFADD__(v84, 5);
                          uint64_t v94 = v84 + 5;
                          if (v22) {
                            goto LABEL_195;
                          }
                          BOOL v22 = __OFADD__(v94, 4);
                          uint64_t v95 = v94 + 4;
                          if (v22) {
                            goto LABEL_196;
                          }
                          uint64_t v96 = 0;
                          switch(v151)
                          {
                            case 1:
                              LODWORD(v96) = HIDWORD(a4) - a4;
                              if (__OFSUB__(HIDWORD(a4), a4)) {
                                goto LABEL_222;
                              }
                              uint64_t v96 = (int)v96;
LABEL_110:
                              BOOL v22 = __OFADD__(v95, v96);
                              unint64_t v99 = v95 + v96;
                              if (v22) {
                                goto LABEL_197;
                              }
                              if ((v99 & 0x8000000000000000) != 0) {
                                goto LABEL_257;
                              }
                              uint64_t v149 = v83;
                              if (v99 >= 0x10000) {
                                goto LABEL_257;
                              }
                              *(void *)uint64_t v91 = 1;
                              HIWORD(v161) = v99;
                              *(_WORD *)(v91 + 8) = 0;
                              *(unsigned char *)(v91 + 10) = v90;
                              *(unsigned char *)(v91 + 11) = 0;
                              *(_DWORD *)(v91 + 12) = 0;
                              *(_WORD *)(v91 + 16) = v99;
                              *(_WORD *)(v91 + 18) = 0;
                              uint64_t v100 = v91 + v88;
                              *(unsigned char *)uint64_t v100 = 2;
                              *(_WORD *)(v100 + 1) = v81;
                              *(_WORD *)(v100 + 3) = v42;
                              *(unsigned char *)(v100 + 5) = 0;
                              uint64_t v101 = 0;
                              switch(v152)
                              {
                                case 1:
                                  uint64_t v42 = (a2 >> 32) - (int)a2;
                                  if (a2 >> 32 < (int)a2) {
                                    goto LABEL_224;
                                  }
                                  sub_100013D44(a2, v78);
                                  uint64_t v102 = __DataStorage._bytes.getter();
                                  if (!v102) {
                                    goto LABEL_253;
                                  }
                                  uint64_t v103 = v102;
                                  uint64_t v104 = __DataStorage._offset.getter();
                                  uint64_t v105 = (int)a2 - v104;
                                  if (__OFSUB__((int)a2, v104)) {
                                    goto LABEL_226;
                                  }
                                  uint64_t v106 = __DataStorage._length.getter();
                                  if (v106 >= v42) {
                                    size_t v107 = (a2 >> 32) - (int)a2;
                                  }
                                  else {
                                    size_t v107 = v106;
                                  }
                                  memmove((void *)(v91 + v153), (const void *)(v103 + v105), v107);
                                  sub_10000C970(a2, v89);
                                  if (__OFSUB__(HIDWORD(a2), a2)) {
                                    goto LABEL_228;
                                  }
                                  uint64_t v101 = HIDWORD(a2) - (int)a2;
                                  goto LABEL_132;
                                case 2:
                                  uint64_t v108 = *(void *)(a2 + 16);
                                  uint64_t v109 = *(void *)(a2 + 24);
                                  swift_retain();
                                  swift_retain();
                                  uint64_t v110 = (char *)__DataStorage._bytes.getter();
                                  if (!v110) {
                                    goto LABEL_126;
                                  }
                                  uint64_t v111 = __DataStorage._offset.getter();
                                  if (__OFSUB__(v108, v111)) {
                                    goto LABEL_239;
                                  }
                                  v110 += v108 - v111;
LABEL_126:
                                  BOOL v22 = __OFSUB__(v109, v108);
                                  uint64_t v42 = v109 - v108;
                                  if (v22) {
                                    goto LABEL_225;
                                  }
                                  uint64_t v112 = __DataStorage._length.getter();
                                  if (!v110) {
                                    goto LABEL_254;
                                  }
                                  if (v112 >= v42) {
                                    size_t v113 = v42;
                                  }
                                  else {
                                    size_t v113 = v112;
                                  }
                                  memmove((void *)(v91 + v153), v110, v113);
                                  swift_release();
                                  swift_release();
                                  uint64_t v115 = *(void *)(a2 + 16);
                                  uint64_t v114 = *(void *)(a2 + 24);
                                  uint64_t v101 = v114 - v115;
                                  if (__OFSUB__(v114, v115)) {
                                    goto LABEL_227;
                                  }
LABEL_132:
                                  uint64_t v87 = v151;
                                  uint64_t v86 = v152;
LABEL_133:
                                  if (__OFADD__(v153, v101)) {
                                    goto LABEL_198;
                                  }
                                  uint64_t v116 = v91 + v153 + v101;
                                  *(_WORD *)uint64_t v116 = v150;
                                  *(_WORD *)(v116 + 2) = 0;
                                  *(unsigned char *)(v116 + 4) = 0;
                                  switch(v87)
                                  {
                                    case 1:
                                      if (a4 >> 32 < (int)a4) {
                                        goto LABEL_229;
                                      }
                                      sub_100013D44(a4, a5);
                                      uint64_t v42 = __DataStorage._bytes.getter();
                                      if (!v42) {
                                        goto LABEL_141;
                                      }
                                      uint64_t v118 = __DataStorage._offset.getter();
                                      if (!__OFSUB__((int)a4, v118))
                                      {
                                        v42 += (int)a4 - v118;
LABEL_141:
                                        uint64_t v119 = __DataStorage._length.getter();
                                        if (v119 >= (a4 >> 32) - (int)a4) {
                                          uint64_t v120 = (a4 >> 32) - (int)a4;
                                        }
                                        else {
                                          uint64_t v120 = v119;
                                        }
                                        uint64_t v121 = v42 + v120;
                                        uint64_t v122 = 0;
                                        switch(v152)
                                        {
                                          case 1:
                                            goto LABEL_169;
                                          case 2:
                                            uint64_t v140 = *(void *)(a2 + 16);
                                            uint64_t v139 = *(void *)(a2 + 24);
                                            BOOL v22 = __OFSUB__(v139, v140);
                                            uint64_t v122 = v139 - v140;
                                            if (!v22) {
                                              goto LABEL_172;
                                            }
                                            goto LABEL_247;
                                          case 3:
                                            goto LABEL_172;
                                          default:
                                            uint64_t v122 = BYTE6(v89);
                                            goto LABEL_172;
                                        }
                                      }
                                      goto LABEL_241;
                                    case 2:
                                      uint64_t v123 = *(void *)(a4 + 16);
                                      uint64_t v124 = *(void *)(a4 + 24);
                                      swift_retain();
                                      swift_retain();
                                      __int8 v125 = (char *)__DataStorage._bytes.getter();
                                      if (!v125) {
                                        goto LABEL_149;
                                      }
                                      uint64_t v126 = __DataStorage._offset.getter();
                                      if (__OFSUB__(v123, v126)) {
                                        goto LABEL_240;
                                      }
                                      v125 += v123 - v126;
LABEL_149:
                                      BOOL v22 = __OFSUB__(v124, v123);
                                      uint64_t v127 = v124 - v123;
                                      if (v22) {
                                        goto LABEL_232;
                                      }
                                      uint64_t v128 = __DataStorage._length.getter();
                                      if (v128 >= v127) {
                                        uint64_t v129 = v127;
                                      }
                                      else {
                                        uint64_t v129 = v128;
                                      }
                                      unint64_t v130 = &v125[v129];
                                      uint64_t v131 = 0;
                                      switch(v152)
                                      {
                                        case 1:
                                          LODWORD(v131) = HIDWORD(a2) - a2;
                                          if (__OFSUB__(HIDWORD(a2), a2)) {
                                            goto LABEL_248;
                                          }
                                          uint64_t v131 = (int)v131;
LABEL_179:
                                          BOOL v22 = __OFADD__(v153, v131);
                                          uint64_t v145 = v153 + v131;
                                          if (v22) {
                                            goto LABEL_235;
                                          }
                                          BOOL v22 = __OFADD__(v145, 4);
                                          uint64_t v146 = v145 + 4;
                                          if (v22) {
                                            goto LABEL_237;
                                          }
                                          if (!v125) {
                                            goto LABEL_256;
                                          }
                                          memmove((void *)(v91 + v146), v125, v130 - v125);
                                          swift_release();
                                          swift_release();
                                          a2 = a5;
                                          break;
                                        case 2:
                                          uint64_t v144 = *(void *)(a2 + 16);
                                          uint64_t v143 = *(void *)(a2 + 24);
                                          BOOL v22 = __OFSUB__(v143, v144);
                                          uint64_t v131 = v143 - v144;
                                          if (!v22) {
                                            goto LABEL_179;
                                          }
                                          goto LABEL_249;
                                        case 3:
                                          goto LABEL_179;
                                        default:
                                          uint64_t v131 = BYTE6(v89);
                                          goto LABEL_179;
                                      }
LABEL_183:
                                      uint64_t v147 = *(void *)(v80 + 16);
                                      uint64_t v148 = *(void *)(v80 + 24);
                                      swift_retain();
                                      swift_bridgeObjectRetain();
                                      AppleDevice.setRequest(requestType:data:on:)(0x78uLL, v91, v149, 0, v147, v148);
                                      swift_bridgeObjectRelease();
                                      swift_release();
                                      swift_slowDealloc();
                                      uint64_t result = sub_10000C95C(a4, a2);
                                      break;
                                    case 3:
                                      uint64_t v132 = 0;
                                      switch(v86)
                                      {
                                        case 1:
                                          LODWORD(v132) = HIDWORD(a2) - a2;
                                          if (__OFSUB__(HIDWORD(a2), a2)) {
                                            goto LABEL_244;
                                          }
                                          uint64_t v132 = (int)v132;
LABEL_166:
                                          BOOL v22 = __OFADD__(v153, v132);
                                          uint64_t v121 = v153 + v132;
                                          if (v22) {
                                            goto LABEL_231;
                                          }
                                          a2 = a5;
                                          if (v121 <= 0x7FFFFFFFFFFFFFFBLL) {
                                            goto LABEL_183;
                                          }
                                          __break(1u);
LABEL_169:
                                          LODWORD(v122) = HIDWORD(a2) - a2;
                                          if (__OFSUB__(HIDWORD(a2), a2)) {
                                            goto LABEL_246;
                                          }
                                          uint64_t v122 = (int)v122;
LABEL_172:
                                          BOOL v22 = __OFADD__(v153, v122);
                                          uint64_t v141 = v153 + v122;
                                          if (v22) {
                                            goto LABEL_234;
                                          }
                                          BOOL v22 = __OFADD__(v141, 4);
                                          uint64_t v142 = v141 + 4;
                                          if (v22) {
                                            goto LABEL_236;
                                          }
                                          if (!v42) {
                                            goto LABEL_255;
                                          }
                                          memmove((void *)(v91 + v142), (const void *)v42, v121 - v42);
                                          a2 = a5;
                                          sub_10000C95C(a4, a5);
                                          break;
                                        case 2:
                                          uint64_t v138 = *(void *)(a2 + 16);
                                          uint64_t v137 = *(void *)(a2 + 24);
                                          BOOL v22 = __OFSUB__(v137, v138);
                                          uint64_t v132 = v137 - v138;
                                          if (!v22) {
                                            goto LABEL_166;
                                          }
                                          goto LABEL_245;
                                        case 3:
                                          goto LABEL_166;
                                        default:
                                          uint64_t v132 = BYTE6(v89);
                                          goto LABEL_166;
                                      }
                                      goto LABEL_183;
                                    default:
                                      uint64_t __src = a4;
                                      int v157 = a5;
                                      __int16 v158 = WORD2(a5);
                                      uint64_t v117 = 0;
                                      switch(v86)
                                      {
                                        case 1:
                                          LODWORD(v117) = HIDWORD(a2) - a2;
                                          if (__OFSUB__(HIDWORD(a2), a2)) {
                                            goto LABEL_242;
                                          }
                                          uint64_t v117 = (int)v117;
LABEL_160:
                                          BOOL v22 = __OFADD__(v153, v117);
                                          uint64_t v135 = v153 + v117;
                                          if (v22) {
                                            goto LABEL_230;
                                          }
                                          BOOL v22 = __OFADD__(v135, 4);
                                          uint64_t v136 = v135 + 4;
                                          a2 = a5;
                                          if (v22) {
                                            goto LABEL_233;
                                          }
                                          memcpy((void *)(v91 + v136), &__src, BYTE6(a5));
                                          break;
                                        case 2:
                                          uint64_t v134 = *(void *)(a2 + 16);
                                          uint64_t v133 = *(void *)(a2 + 24);
                                          BOOL v22 = __OFSUB__(v133, v134);
                                          uint64_t v117 = v133 - v134;
                                          if (!v22) {
                                            goto LABEL_160;
                                          }
                                          goto LABEL_243;
                                        case 3:
                                          goto LABEL_160;
                                        default:
                                          uint64_t v117 = BYTE6(v89);
                                          goto LABEL_160;
                                      }
                                      goto LABEL_183;
                                  }
                                  break;
                                case 3:
                                  goto LABEL_133;
                                default:
                                  uint64_t __src = a2;
                                  LOWORD(v157) = v78;
                                  BYTE2(v157) = BYTE2(v78);
                                  HIBYTE(v157) = BYTE3(v78);
                                  LOBYTE(v158) = BYTE4(v78);
                                  uint64_t v101 = BYTE6(v78);
                                  HIBYTE(v158) = BYTE5(v78);
                                  memcpy((void *)(v91 + v153), &__src, BYTE6(v78));
                                  goto LABEL_132;
                              }
                              break;
                            case 2:
                              uint64_t v98 = *(void *)(a4 + 16);
                              uint64_t v97 = *(void *)(a4 + 24);
                              BOOL v22 = __OFSUB__(v97, v98);
                              uint64_t v96 = v97 - v98;
                              if (!v22) {
                                goto LABEL_110;
                              }
                              goto LABEL_223;
                            case 3:
                              goto LABEL_110;
                            default:
                              uint64_t v96 = BYTE6(a5);
                              goto LABEL_110;
                          }
                          break;
                        case 2:
                          uint64_t v93 = *(void *)(a2 + 16);
                          uint64_t v92 = *(void *)(a2 + 24);
                          BOOL v22 = __OFSUB__(v92, v93);
                          uint64_t v84 = v92 - v93;
                          if (!v22) {
                            goto LABEL_103;
                          }
                          goto LABEL_221;
                        case 3:
                          goto LABEL_103;
                        default:
                          uint64_t v84 = BYTE6(v78);
                          goto LABEL_103;
                      }
                      break;
                    case 2:
                      uint64_t v75 = *(void *)(a4 + 16);
                      uint64_t v74 = *(void *)(a4 + 24);
                      BOOL v22 = __OFSUB__(v74, v75);
                      uint64_t v73 = v74 - v75;
                      if (!v22) {
                        goto LABEL_97;
                      }
                      goto LABEL_219;
                    case 3:
                      goto LABEL_97;
                    default:
                      uint64_t v73 = BYTE6(a5);
                      goto LABEL_97;
                  }
                  break;
                case 2:
                  uint64_t v70 = *(void *)(a2 + 16);
                  uint64_t v69 = *(void *)(a2 + 24);
                  BOOL v22 = __OFSUB__(v69, v70);
                  uint64_t v53 = v69 - v70;
                  if (!v22) {
                    goto LABEL_90;
                  }
                  goto LABEL_215;
                case 3:
                  goto LABEL_90;
                default:
                  uint64_t v53 = BYTE6(a3);
                  goto LABEL_90;
              }
              break;
            case 2:
              uint64_t v52 = *(void *)(a4 + 16);
              uint64_t v51 = *(void *)(a4 + 24);
              unint64_t v46 = v51 - v52;
              if (!__OFSUB__(v51, v52)) {
                goto LABEL_65;
              }
              goto LABEL_212;
            case 3:
              goto LABEL_67;
            default:
              LOWORD(v46) = BYTE6(a5);
              goto LABEL_67;
          }
          return result;
        case 2uLL:
          uint64_t v40 = *(void *)(a4 + 16);
          uint64_t v39 = *(void *)(a4 + 24);
          BOOL v22 = __OFSUB__(v39, v40);
          uint64_t v31 = v39 - v40;
          if (!v22) {
            goto LABEL_41;
          }
          goto LABEL_208;
        case 3uLL:
          goto LABEL_41;
        default:
          uint64_t v31 = BYTE6(a5);
          goto LABEL_41;
      }
  }
}

uint64_t IO80211Driver<>.registerService(active:keyData:valueData:)(char a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v165 = 0;
  char v167 = 0;
  char v168 = 0;
  uint64_t v164 = 1;
  BOOL v12 = (a1 & 1) == 0;
  uint64_t v166 = v12;
  swift_getKeyPath();
  uint64_t v13 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  char v15 = v14;
  swift_release();
  if (v15) {
    goto LABEL_250;
  }
  unint64_t v16 = a3 >> 62;
  switch(a3 >> 62)
  {
    case 1uLL:
      if ((int)a2 == a2 >> 32) {
        goto LABEL_10;
      }
      goto LABEL_4;
    case 2uLL:
      if (*(void *)(a2 + 16) == *(void *)(a2 + 24)) {
        goto LABEL_10;
      }
      goto LABEL_4;
    case 3uLL:
      goto LABEL_10;
    default:
      if ((a3 & 0xFF000000000000) == 0)
      {
LABEL_10:
        HIWORD(v166) = 0;
        return sub_1000C20D8((uint64_t)&v164, (uint64_t)&v169, v157, a6, a7, a8, &__src);
      }
LABEL_4:
      if (a5 >> 60 == 15)
      {
        if (v16)
        {
          if (v16 == 1)
          {
            LODWORD(v17) = HIDWORD(a2) - a2;
            if (__OFSUB__(HIDWORD(a2), a2))
            {
LABEL_199:
              __break(1u);
              goto LABEL_200;
            }
            uint64_t v17 = (int)v17;
          }
          else
          {
            uint64_t v21 = *(void *)(a2 + 16);
            uint64_t v20 = *(void *)(a2 + 24);
            BOOL v22 = __OFSUB__(v20, v21);
            uint64_t v17 = v20 - v21;
            if (v22)
            {
LABEL_201:
              __break(1u);
              goto LABEL_202;
            }
          }
        }
        else
        {
          uint64_t v17 = BYTE6(a3);
        }
        unint64_t v23 = v17 + 4;
        if (!__OFADD__(v17, 4))
        {
          if ((v23 & 0x8000000000000000) != 0 || v23 >= 0x10000) {
            goto LABEL_257;
          }
          uint64_t v24 = v13 + 7;
          if (!__OFADD__(v13, 7))
          {
            if (v16)
            {
              if (v16 == 1)
              {
                LODWORD(v25) = HIDWORD(a2) - a2;
                if (__OFSUB__(HIDWORD(a2), a2))
                {
LABEL_203:
                  __break(1u);
                  goto LABEL_204;
                }
                uint64_t v25 = (int)v25;
              }
              else
              {
                uint64_t v33 = *(void *)(a2 + 16);
                uint64_t v32 = *(void *)(a2 + 24);
                BOOL v22 = __OFSUB__(v32, v33);
                uint64_t v25 = v32 - v33;
                if (v22)
                {
LABEL_204:
                  __break(1u);
                  goto LABEL_205;
                }
              }
            }
            else
            {
              uint64_t v25 = BYTE6(a3);
            }
            uint64_t v34 = v24 + v25;
            if (!__OFADD__(v24, v25))
            {
              uint64_t v35 = swift_slowAlloc();
              uint64_t v36 = v35 + v34;
              uint64_t v37 = v35;
              uint64_t v38 = 0;
              switch((int)v16)
              {
                case 1:
                  LODWORD(v38) = HIDWORD(a2) - a2;
                  if (__OFSUB__(HIDWORD(a2), a2)) {
                    goto LABEL_209;
                  }
                  uint64_t v38 = (int)v38;
LABEL_57:
                  BOOL v22 = __OFADD__(v38, 7);
                  unint64_t v49 = v38 + 7;
                  if (v22) {
                    goto LABEL_190;
                  }
                  if ((v49 & 0x8000000000000000) != 0 || v49 >= 0x10000) {
                    goto LABEL_257;
                  }
                  break;
                case 2:
                  uint64_t v48 = *(void *)(a2 + 16);
                  uint64_t v47 = *(void *)(a2 + 24);
                  BOOL v22 = __OFSUB__(v47, v48);
                  uint64_t v38 = v47 - v48;
                  if (!v22) {
                    goto LABEL_57;
                  }
                  goto LABEL_210;
                case 3:
                  goto LABEL_57;
                default:
                  uint64_t v38 = BYTE6(a3);
                  goto LABEL_57;
              }
              *(void *)uint64_t v35 = 1;
              *(_WORD *)(v35 + 8) = 0;
              *(unsigned char *)(v35 + 10) = v12;
              *(unsigned char *)(v35 + 11) = 0;
              *(_DWORD *)(v35 + 12) = 0;
              *(_WORD *)(v35 + 16) = v49;
              *(_WORD *)(v35 + 18) = 0;
              uint64_t v50 = v35 + v13;
              *(unsigned char *)uint64_t v50 = 1;
              *(_WORD *)(v50 + 1) = v23;
              *(_DWORD *)(v50 + 3) = 0;
              *(unsigned char *)(v50 + 7) = 0;
              switch((int)v16)
              {
                case 1:
                  if (a2 >> 32 < (int)a2) {
                    goto LABEL_213;
                  }
                  sub_100013D44(a2, a3);
                  uint64_t v54 = __DataStorage._bytes.getter();
                  if (v54)
                  {
                    uint64_t v55 = v54;
                    uint64_t v56 = __DataStorage._offset.getter();
                    uint64_t v57 = (int)a2 - v56;
                    if (!__OFSUB__((int)a2, v56))
                    {
                      uint64_t v58 = __DataStorage._length.getter();
                      if (v58 >= (a2 >> 32) - (int)a2) {
                        size_t v59 = (a2 >> 32) - (int)a2;
                      }
                      else {
                        size_t v59 = v58;
                      }
                      memmove((void *)(v37 + v24), (const void *)(v55 + v57), v59);
                      sub_10000C970(a2, a3);
LABEL_86:
                      uint64_t v67 = *(void *)(a8 + 8);
                      uint64_t v68 = *(void *)(a7 + 8);
                      swift_getAssociatedTypeWitness();
                      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
                      sub_1000BE6C8(120, v37, v36, a6, v67, v68, AssociatedConformanceWitness);
                      return swift_slowDealloc();
                    }
                    goto LABEL_217;
                  }
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_252:
                  __break(1u);
LABEL_253:
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_254:
                  __break(1u);
LABEL_255:
                  __break(1u);
LABEL_256:
                  __break(1u);
                  break;
                case 2:
                  uint64_t v60 = *(void *)(a2 + 16);
                  uint64_t v61 = *(void *)(a2 + 24);
                  swift_retain();
                  swift_retain();
                  __int32 v62 = (char *)__DataStorage._bytes.getter();
                  if (!v62) {
                    goto LABEL_80;
                  }
                  uint64_t v63 = __DataStorage._offset.getter();
                  if (__OFSUB__(v60, v63)) {
                    goto LABEL_238;
                  }
                  v62 += v60 - v63;
LABEL_80:
                  BOOL v22 = __OFSUB__(v61, v60);
                  int64_t v64 = v61 - v60;
                  if (v22) {
                    goto LABEL_216;
                  }
                  uint64_t v65 = __DataStorage._length.getter();
                  if (!v62) {
                    goto LABEL_252;
                  }
                  if (v65 >= v64) {
                    size_t v66 = v64;
                  }
                  else {
                    size_t v66 = v65;
                  }
                  memmove((void *)(v37 + v24), v62, v66);
                  swift_release();
                  swift_release();
                  goto LABEL_86;
                case 3:
                  goto LABEL_86;
                default:
                  uint64_t __src = a2;
                  __int16 v159 = a3;
                  char v160 = BYTE2(a3);
                  char v161 = BYTE3(a3);
                  char v162 = BYTE4(a3);
                  char v163 = BYTE5(a3);
                  memcpy((void *)(v35 + v24), &__src, BYTE6(a3));
                  goto LABEL_86;
              }
LABEL_257:
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              JUMPOUT(0x1000B23E8);
            }
            goto LABEL_189;
          }
          goto LABEL_186;
        }
        __break(1u);
LABEL_185:
        __break(1u);
LABEL_186:
        __break(1u);
LABEL_187:
        __break(1u);
LABEL_188:
        __break(1u);
LABEL_189:
        __break(1u);
LABEL_190:
        __break(1u);
LABEL_191:
        __break(1u);
LABEL_192:
        __break(1u);
LABEL_193:
        __break(1u);
LABEL_194:
        __break(1u);
LABEL_195:
        __break(1u);
LABEL_196:
        __break(1u);
LABEL_197:
        __break(1u);
LABEL_198:
        __break(1u);
        goto LABEL_199;
      }
      if (v16)
      {
        if (v16 == 1)
        {
          LODWORD(v19) = HIDWORD(a2) - a2;
          if (__OFSUB__(HIDWORD(a2), a2))
          {
LABEL_200:
            __break(1u);
            goto LABEL_201;
          }
          uint64_t v19 = (int)v19;
        }
        else
        {
          uint64_t v27 = *(void *)(a2 + 16);
          uint64_t v26 = *(void *)(a2 + 24);
          BOOL v22 = __OFSUB__(v26, v27);
          uint64_t v19 = v26 - v27;
          if (v22)
          {
LABEL_202:
            __break(1u);
            goto LABEL_203;
          }
        }
      }
      else
      {
        uint64_t v19 = BYTE6(a3);
      }
      BOOL v22 = __OFADD__(v19, 2);
      uint64_t v28 = v19 + 2;
      if (v22) {
        goto LABEL_185;
      }
      uint64_t v29 = v28 + 4;
      if (__OFADD__(v28, 4)) {
        goto LABEL_187;
      }
      unint64_t v30 = a5 >> 62;
      uint64_t v31 = 0;
      switch(a5 >> 62)
      {
        case 1uLL:
          LODWORD(v31) = HIDWORD(a4) - a4;
          if (__OFSUB__(HIDWORD(a4), a4)) {
            goto LABEL_207;
          }
          uint64_t v31 = (int)v31;
LABEL_41:
          unint64_t v41 = v29 + v31;
          if (__OFADD__(v29, v31)) {
            goto LABEL_188;
          }
          if ((v41 & 0x8000000000000000) != 0 || v41 >= 0x10000) {
            goto LABEL_257;
          }
          if (v16)
          {
            if (v16 == 1)
            {
              if (__OFSUB__(HIDWORD(a2), a2))
              {
LABEL_205:
                __break(1u);
LABEL_206:
                __break(1u);
LABEL_207:
                __break(1u);
LABEL_208:
                __break(1u);
LABEL_209:
                __break(1u);
LABEL_210:
                __break(1u);
LABEL_211:
                __break(1u);
LABEL_212:
                __break(1u);
LABEL_213:
                __break(1u);
LABEL_214:
                __break(1u);
LABEL_215:
                __break(1u);
LABEL_216:
                __break(1u);
LABEL_217:
                __break(1u);
LABEL_218:
                __break(1u);
LABEL_219:
                __break(1u);
LABEL_220:
                __break(1u);
LABEL_221:
                __break(1u);
LABEL_222:
                __break(1u);
LABEL_223:
                __break(1u);
LABEL_224:
                __break(1u);
LABEL_225:
                __break(1u);
LABEL_226:
                __break(1u);
LABEL_227:
                __break(1u);
LABEL_228:
                __break(1u);
LABEL_229:
                __break(1u);
LABEL_230:
                __break(1u);
LABEL_231:
                __break(1u);
LABEL_232:
                __break(1u);
LABEL_233:
                __break(1u);
LABEL_234:
                __break(1u);
LABEL_235:
                __break(1u);
LABEL_236:
                __break(1u);
LABEL_237:
                __break(1u);
LABEL_238:
                __break(1u);
LABEL_239:
                __break(1u);
LABEL_240:
                __break(1u);
LABEL_241:
                __break(1u);
LABEL_242:
                __break(1u);
LABEL_243:
                __break(1u);
LABEL_244:
                __break(1u);
LABEL_245:
                __break(1u);
LABEL_246:
                __break(1u);
LABEL_247:
                __break(1u);
LABEL_248:
                __break(1u);
LABEL_249:
                __break(1u);
LABEL_250:
                __break(1u);
              }
              unint64_t v42 = HIDWORD(a2) - (int)a2;
            }
            else
            {
              uint64_t v44 = *(void *)(a2 + 16);
              uint64_t v43 = *(void *)(a2 + 24);
              unint64_t v42 = v43 - v44;
              if (__OFSUB__(v43, v44)) {
                goto LABEL_206;
              }
            }
            if ((v42 & 0x8000000000000000) != 0 || v42 >= 0x10000) {
              goto LABEL_257;
            }
          }
          else
          {
            unint64_t v42 = BYTE6(a3);
          }
          uint64_t v45 = v30;
          LOWORD(v46) = 0;
          switch((int)v30)
          {
            case 1:
              if (__OFSUB__(HIDWORD(a4), a4)) {
                goto LABEL_211;
              }
              unint64_t v46 = HIDWORD(a4) - (int)a4;
LABEL_65:
              if ((v46 & 0x8000000000000000) != 0 || v46 >= 0x10000) {
                goto LABEL_257;
              }
LABEL_67:
              uint64_t v153 = v13 + 5;
              if (__OFADD__(v13, 5)) {
                goto LABEL_191;
              }
              uint64_t v53 = 0;
              switch((int)v16)
              {
                case 1:
                  LODWORD(v53) = HIDWORD(a2) - a2;
                  if (__OFSUB__(HIDWORD(a2), a2)) {
                    goto LABEL_214;
                  }
                  uint64_t v53 = (int)v53;
LABEL_90:
                  BOOL v22 = __OFADD__(v153, v53);
                  uint64_t v72 = v153 + v53;
                  if (v22) {
                    goto LABEL_192;
                  }
                  BOOL v22 = __OFADD__(v72, 4);
                  uint64_t v73 = v72 + 4;
                  if (v22) {
                    goto LABEL_193;
                  }
                  uint64_t v74 = 0;
                  switch(v45)
                  {
                    case 1:
                      LODWORD(v74) = HIDWORD(a4) - a4;
                      if (__OFSUB__(HIDWORD(a4), a4)) {
                        goto LABEL_218;
                      }
                      uint64_t v74 = (int)v74;
LABEL_97:
                      __int16 v150 = v46;
                      uint64_t v151 = v45;
                      uint64_t v152 = v16;
                      uint64_t v77 = v73 + v74;
                      if (__OFADD__(v73, v74)) {
                        goto LABEL_194;
                      }
                      BOOL v78 = v12;
                      unint64_t v79 = a3;
                      uint64_t v80 = v13;
                      __int16 v81 = v41;
                      sub_100013D44(a4, a5);
                      uint64_t v82 = swift_slowAlloc();
                      uint64_t v83 = v82 + v77;
                      uint64_t v84 = 0;
                      uint64_t v85 = v82;
                      uint64_t v87 = v151;
                      uint64_t v86 = v152;
                      uint64_t v88 = v80;
                      unsigned __int8 v89 = BYTE6(v79);
                      BOOL v90 = v78;
                      uint64_t v91 = v85;
                      switch(v152)
                      {
                        case 1:
                          LODWORD(v84) = HIDWORD(a2) - a2;
                          if (__OFSUB__(HIDWORD(a2), a2)) {
                            goto LABEL_220;
                          }
                          uint64_t v84 = (int)v84;
LABEL_103:
                          BOOL v22 = __OFADD__(v84, 5);
                          uint64_t v94 = v84 + 5;
                          if (v22) {
                            goto LABEL_195;
                          }
                          BOOL v22 = __OFADD__(v94, 4);
                          uint64_t v95 = v94 + 4;
                          if (v22) {
                            goto LABEL_196;
                          }
                          uint64_t v96 = 0;
                          switch(v151)
                          {
                            case 1:
                              LODWORD(v96) = HIDWORD(a4) - a4;
                              if (__OFSUB__(HIDWORD(a4), a4)) {
                                goto LABEL_222;
                              }
                              uint64_t v96 = (int)v96;
LABEL_110:
                              BOOL v22 = __OFADD__(v95, v96);
                              unint64_t v99 = v95 + v96;
                              if (v22) {
                                goto LABEL_197;
                              }
                              if ((v99 & 0x8000000000000000) != 0) {
                                goto LABEL_257;
                              }
                              uint64_t v149 = v83;
                              if (v99 >= 0x10000) {
                                goto LABEL_257;
                              }
                              *(void *)uint64_t v91 = 1;
                              HIWORD(v166) = v99;
                              *(_WORD *)(v91 + 8) = 0;
                              *(unsigned char *)(v91 + 10) = v90;
                              *(unsigned char *)(v91 + 11) = 0;
                              *(_DWORD *)(v91 + 12) = 0;
                              *(_WORD *)(v91 + 16) = v99;
                              *(_WORD *)(v91 + 18) = 0;
                              uint64_t v100 = v91 + v88;
                              *(unsigned char *)uint64_t v100 = 2;
                              *(_WORD *)(v100 + 1) = v81;
                              *(_WORD *)(v100 + 3) = v42;
                              *(unsigned char *)(v100 + 5) = 0;
                              uint64_t v101 = 0;
                              switch(v152)
                              {
                                case 1:
                                  if (a2 >> 32 < (int)a2) {
                                    goto LABEL_224;
                                  }
                                  sub_100013D44(a2, v79);
                                  uint64_t v102 = __DataStorage._bytes.getter();
                                  if (!v102) {
                                    goto LABEL_253;
                                  }
                                  uint64_t v103 = v102;
                                  uint64_t v104 = __DataStorage._offset.getter();
                                  unint64_t v42 = (int)a2 - v104;
                                  if (__OFSUB__((int)a2, v104)) {
                                    goto LABEL_226;
                                  }
                                  uint64_t v105 = __DataStorage._length.getter();
                                  if (v105 >= (a2 >> 32) - (int)a2) {
                                    size_t v106 = (a2 >> 32) - (int)a2;
                                  }
                                  else {
                                    size_t v106 = v105;
                                  }
                                  memmove((void *)(v91 + v153), (const void *)(v103 + v42), v106);
                                  sub_10000C970(a2, v79);
                                  if (__OFSUB__(HIDWORD(a2), a2)) {
                                    goto LABEL_228;
                                  }
                                  uint64_t v101 = HIDWORD(a2) - (int)a2;
                                  goto LABEL_132;
                                case 2:
                                  uint64_t v107 = *(void *)(a2 + 16);
                                  unint64_t v42 = *(void *)(a2 + 24);
                                  swift_retain();
                                  swift_retain();
                                  uint64_t v108 = (char *)__DataStorage._bytes.getter();
                                  if (!v108) {
                                    goto LABEL_126;
                                  }
                                  uint64_t v109 = __DataStorage._offset.getter();
                                  if (__OFSUB__(v107, v109)) {
                                    goto LABEL_239;
                                  }
                                  v108 += v107 - v109;
LABEL_126:
                                  BOOL v22 = __OFSUB__(v42, v107);
                                  int64_t v110 = v42 - v107;
                                  if (v22) {
                                    goto LABEL_225;
                                  }
                                  uint64_t v111 = __DataStorage._length.getter();
                                  if (!v108) {
                                    goto LABEL_254;
                                  }
                                  if (v111 >= v110) {
                                    size_t v112 = v110;
                                  }
                                  else {
                                    size_t v112 = v111;
                                  }
                                  memmove((void *)(v91 + v153), v108, v112);
                                  swift_release();
                                  swift_release();
                                  uint64_t v114 = *(void *)(a2 + 16);
                                  uint64_t v113 = *(void *)(a2 + 24);
                                  uint64_t v101 = v113 - v114;
                                  if (__OFSUB__(v113, v114)) {
                                    goto LABEL_227;
                                  }
LABEL_132:
                                  uint64_t v87 = v151;
                                  uint64_t v86 = v152;
LABEL_133:
                                  if (__OFADD__(v153, v101)) {
                                    goto LABEL_198;
                                  }
                                  uint64_t v115 = v91 + v153 + v101;
                                  *(_WORD *)uint64_t v115 = v150;
                                  *(_WORD *)(v115 + 2) = 0;
                                  *(unsigned char *)(v115 + 4) = 0;
                                  switch(v87)
                                  {
                                    case 1:
                                      if (a4 >> 32 < (int)a4) {
                                        goto LABEL_229;
                                      }
                                      sub_100013D44(a4, a5);
                                      unint64_t v42 = __DataStorage._bytes.getter();
                                      if (!v42) {
                                        goto LABEL_141;
                                      }
                                      uint64_t v117 = __DataStorage._offset.getter();
                                      if (!__OFSUB__((int)a4, v117))
                                      {
                                        v42 += (int)a4 - v117;
LABEL_141:
                                        uint64_t v118 = __DataStorage._length.getter();
                                        if (v118 >= (a4 >> 32) - (int)a4) {
                                          uint64_t v119 = (a4 >> 32) - (int)a4;
                                        }
                                        else {
                                          uint64_t v119 = v118;
                                        }
                                        uint64_t v120 = v42 + v119;
                                        uint64_t v121 = 0;
                                        switch(v152)
                                        {
                                          case 1:
                                            goto LABEL_169;
                                          case 2:
                                            uint64_t v139 = *(void *)(a2 + 16);
                                            uint64_t v138 = *(void *)(a2 + 24);
                                            BOOL v22 = __OFSUB__(v138, v139);
                                            uint64_t v121 = v138 - v139;
                                            if (!v22) {
                                              goto LABEL_172;
                                            }
                                            goto LABEL_247;
                                          case 3:
                                            goto LABEL_172;
                                          default:
                                            uint64_t v121 = v89;
                                            goto LABEL_172;
                                        }
                                      }
                                      goto LABEL_241;
                                    case 2:
                                      uint64_t v122 = *(void *)(a4 + 16);
                                      uint64_t v123 = *(void *)(a4 + 24);
                                      swift_retain();
                                      swift_retain();
                                      uint64_t v124 = (char *)__DataStorage._bytes.getter();
                                      if (!v124) {
                                        goto LABEL_149;
                                      }
                                      uint64_t v125 = __DataStorage._offset.getter();
                                      if (__OFSUB__(v122, v125)) {
                                        goto LABEL_240;
                                      }
                                      v124 += v122 - v125;
LABEL_149:
                                      BOOL v22 = __OFSUB__(v123, v122);
                                      uint64_t v126 = v123 - v122;
                                      if (v22) {
                                        goto LABEL_232;
                                      }
                                      uint64_t v127 = __DataStorage._length.getter();
                                      if (v127 >= v126) {
                                        uint64_t v128 = v126;
                                      }
                                      else {
                                        uint64_t v128 = v127;
                                      }
                                      uint64_t v129 = &v124[v128];
                                      uint64_t v130 = 0;
                                      switch(v152)
                                      {
                                        case 1:
                                          LODWORD(v130) = HIDWORD(a2) - a2;
                                          if (__OFSUB__(HIDWORD(a2), a2)) {
                                            goto LABEL_248;
                                          }
                                          uint64_t v130 = (int)v130;
LABEL_179:
                                          BOOL v22 = __OFADD__(v153, v130);
                                          uint64_t v144 = v153 + v130;
                                          if (v22) {
                                            goto LABEL_235;
                                          }
                                          BOOL v22 = __OFADD__(v144, 4);
                                          uint64_t v145 = v144 + 4;
                                          if (v22) {
                                            goto LABEL_237;
                                          }
                                          if (!v124) {
                                            goto LABEL_256;
                                          }
                                          memmove((void *)(v91 + v145), v124, v129 - v124);
                                          swift_release();
                                          swift_release();
                                          break;
                                        case 2:
                                          uint64_t v143 = *(void *)(a2 + 16);
                                          uint64_t v142 = *(void *)(a2 + 24);
                                          BOOL v22 = __OFSUB__(v142, v143);
                                          uint64_t v130 = v142 - v143;
                                          if (!v22) {
                                            goto LABEL_179;
                                          }
                                          goto LABEL_249;
                                        case 3:
                                          goto LABEL_179;
                                        default:
                                          uint64_t v130 = v89;
                                          goto LABEL_179;
                                      }
LABEL_183:
                                      uint64_t v146 = *(void *)(a8 + 8);
                                      uint64_t v147 = *(void *)(a7 + 8);
                                      swift_getAssociatedTypeWitness();
                                      uint64_t v148 = swift_getAssociatedConformanceWitness();
                                      sub_1000BE6C8(120, v91, v149, a6, v146, v147, v148);
                                      swift_slowDealloc();
                                      uint64_t result = sub_10000C95C(a4, a5);
                                      break;
                                    case 3:
                                      uint64_t v131 = 0;
                                      switch(v86)
                                      {
                                        case 1:
                                          LODWORD(v131) = HIDWORD(a2) - a2;
                                          if (__OFSUB__(HIDWORD(a2), a2)) {
                                            goto LABEL_244;
                                          }
                                          uint64_t v131 = (int)v131;
LABEL_166:
                                          BOOL v22 = __OFADD__(v153, v131);
                                          uint64_t v120 = v153 + v131;
                                          if (v22) {
                                            goto LABEL_231;
                                          }
                                          if (v120 <= 0x7FFFFFFFFFFFFFFBLL) {
                                            goto LABEL_183;
                                          }
                                          __break(1u);
LABEL_169:
                                          LODWORD(v121) = HIDWORD(a2) - a2;
                                          if (__OFSUB__(HIDWORD(a2), a2)) {
                                            goto LABEL_246;
                                          }
                                          uint64_t v121 = (int)v121;
LABEL_172:
                                          BOOL v22 = __OFADD__(v153, v121);
                                          uint64_t v140 = v153 + v121;
                                          if (v22) {
                                            goto LABEL_234;
                                          }
                                          BOOL v22 = __OFADD__(v140, 4);
                                          uint64_t v141 = v140 + 4;
                                          if (v22) {
                                            goto LABEL_236;
                                          }
                                          if (!v42) {
                                            goto LABEL_255;
                                          }
                                          memmove((void *)(v91 + v141), (const void *)v42, v120 - v42);
                                          sub_10000C95C(a4, a5);
                                          break;
                                        case 2:
                                          uint64_t v137 = *(void *)(a2 + 16);
                                          uint64_t v136 = *(void *)(a2 + 24);
                                          BOOL v22 = __OFSUB__(v136, v137);
                                          uint64_t v131 = v136 - v137;
                                          if (!v22) {
                                            goto LABEL_166;
                                          }
                                          goto LABEL_245;
                                        case 3:
                                          goto LABEL_166;
                                        default:
                                          uint64_t v131 = v89;
                                          goto LABEL_166;
                                      }
                                      goto LABEL_183;
                                    default:
                                      uint64_t __src = a4;
                                      __int16 v159 = a5;
                                      char v160 = BYTE2(a5);
                                      char v161 = BYTE3(a5);
                                      char v162 = BYTE4(a5);
                                      char v163 = BYTE5(a5);
                                      uint64_t v116 = 0;
                                      switch(v86)
                                      {
                                        case 1:
                                          LODWORD(v116) = HIDWORD(a2) - a2;
                                          if (__OFSUB__(HIDWORD(a2), a2)) {
                                            goto LABEL_242;
                                          }
                                          uint64_t v116 = (int)v116;
LABEL_160:
                                          BOOL v22 = __OFADD__(v153, v116);
                                          uint64_t v134 = v153 + v116;
                                          if (v22) {
                                            goto LABEL_230;
                                          }
                                          BOOL v22 = __OFADD__(v134, 4);
                                          uint64_t v135 = v134 + 4;
                                          if (v22) {
                                            goto LABEL_233;
                                          }
                                          memcpy((void *)(v91 + v135), &__src, BYTE6(a5));
                                          break;
                                        case 2:
                                          uint64_t v133 = *(void *)(a2 + 16);
                                          uint64_t v132 = *(void *)(a2 + 24);
                                          BOOL v22 = __OFSUB__(v132, v133);
                                          uint64_t v116 = v132 - v133;
                                          if (!v22) {
                                            goto LABEL_160;
                                          }
                                          goto LABEL_243;
                                        case 3:
                                          goto LABEL_160;
                                        default:
                                          uint64_t v116 = v89;
                                          goto LABEL_160;
                                      }
                                      goto LABEL_183;
                                  }
                                  break;
                                case 3:
                                  goto LABEL_133;
                                default:
                                  uint64_t __src = a2;
                                  __int16 v159 = v79;
                                  char v160 = BYTE2(v79);
                                  char v161 = BYTE3(v79);
                                  char v162 = BYTE4(v79);
                                  uint64_t v101 = BYTE6(v79);
                                  char v163 = BYTE5(v79);
                                  memcpy((void *)(v91 + v153), &__src, BYTE6(v79));
                                  goto LABEL_132;
                              }
                              break;
                            case 2:
                              uint64_t v98 = *(void *)(a4 + 16);
                              uint64_t v97 = *(void *)(a4 + 24);
                              BOOL v22 = __OFSUB__(v97, v98);
                              uint64_t v96 = v97 - v98;
                              if (!v22) {
                                goto LABEL_110;
                              }
                              goto LABEL_223;
                            case 3:
                              goto LABEL_110;
                            default:
                              uint64_t v96 = BYTE6(a5);
                              goto LABEL_110;
                          }
                          break;
                        case 2:
                          uint64_t v93 = *(void *)(a2 + 16);
                          uint64_t v92 = *(void *)(a2 + 24);
                          BOOL v22 = __OFSUB__(v92, v93);
                          uint64_t v84 = v92 - v93;
                          if (!v22) {
                            goto LABEL_103;
                          }
                          goto LABEL_221;
                        case 3:
                          goto LABEL_103;
                        default:
                          uint64_t v84 = BYTE6(v79);
                          goto LABEL_103;
                      }
                      break;
                    case 2:
                      uint64_t v76 = *(void *)(a4 + 16);
                      uint64_t v75 = *(void *)(a4 + 24);
                      BOOL v22 = __OFSUB__(v75, v76);
                      uint64_t v74 = v75 - v76;
                      if (!v22) {
                        goto LABEL_97;
                      }
                      goto LABEL_219;
                    case 3:
                      goto LABEL_97;
                    default:
                      uint64_t v74 = BYTE6(a5);
                      goto LABEL_97;
                  }
                  break;
                case 2:
                  uint64_t v71 = *(void *)(a2 + 16);
                  uint64_t v70 = *(void *)(a2 + 24);
                  BOOL v22 = __OFSUB__(v70, v71);
                  uint64_t v53 = v70 - v71;
                  if (!v22) {
                    goto LABEL_90;
                  }
                  goto LABEL_215;
                case 3:
                  goto LABEL_90;
                default:
                  uint64_t v53 = BYTE6(a3);
                  goto LABEL_90;
              }
              break;
            case 2:
              uint64_t v52 = *(void *)(a4 + 16);
              uint64_t v51 = *(void *)(a4 + 24);
              unint64_t v46 = v51 - v52;
              if (!__OFSUB__(v51, v52)) {
                goto LABEL_65;
              }
              goto LABEL_212;
            case 3:
              goto LABEL_67;
            default:
              LOWORD(v46) = BYTE6(a5);
              goto LABEL_67;
          }
          return result;
        case 2uLL:
          uint64_t v40 = *(void *)(a4 + 16);
          uint64_t v39 = *(void *)(a4 + 24);
          BOOL v22 = __OFSUB__(v39, v40);
          uint64_t v31 = v39 - v40;
          if (!v22) {
            goto LABEL_41;
          }
          goto LABEL_208;
        case 3uLL:
          goto LABEL_41;
        default:
          uint64_t v31 = BYTE6(a5);
          goto LABEL_41;
      }
  }
}

uint64_t sub_1000B24D8(uint64_t a1)
{
  return sub_1000B24FC(a1);
}

uint64_t sub_1000B24FC(uint64_t a1)
{
  uint64_t v3 = (int *)type metadata accessor for AWDLPeer(0);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_1004882F0);
  __chkstk_darwin();
  unint64_t v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000136F4(a1 + v3[14], (uint64_t)v7, (uint64_t *)&unk_1004882F0);
  uint64_t v8 = type metadata accessor for AWDLActionFrame.DataPathState(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8) == 1)
  {
    sub_1000380B4((uint64_t)v7, (uint64_t *)&unk_1004882F0);
LABEL_4:
    unsigned int v57 = 0;
    goto LABEL_6;
  }
  uint64_t v9 = &v7[*(int *)(v8 + 140)];
  unsigned int v10 = *(_DWORD *)v9;
  char v11 = v9[4];
  sub_1000CBC30((uint64_t)v7, type metadata accessor for AWDLActionFrame.DataPathState);
  if (v11) {
    goto LABEL_4;
  }
  unsigned int v57 = v10;
  if (v10 >= 0x10000) {
    goto LABEL_57;
  }
LABEL_6:
  uint64_t v12 = a1 + v3[12];
  unint64_t v14 = *(void *)v12;
  unint64_t v13 = *(void *)(v12 + 8);
  uint64_t v15 = *(void *)(v12 + 40);
  uint64_t v16 = a1 + v3[21];
  if (*(unsigned char *)(v16 + 4))
  {
    unsigned int v56 = 0;
  }
  else
  {
    unsigned int v56 = *(_DWORD *)v16;
    if (v56 >= 0x10000) {
      goto LABEL_57;
    }
  }
  unint64_t v17 = HIWORD(v14);
  unint64_t v18 = HIDWORD(v13);
  unint64_t v19 = HIWORD(v13);
  if (!v15)
  {
    LODWORD(v17) = 0;
    LODWORD(v13) = 0;
  }
  int v54 = v13;
  int v55 = v17;
  if (v15) {
    int v20 = v19;
  }
  else {
    int v20 = 0;
  }
  if (v15) {
    int v21 = v18;
  }
  else {
    int v21 = 0;
  }
  int v52 = v21;
  int v53 = v20;
  uint64_t v22 = a1 + v3[24];
  uint64_t v23 = *(void *)v22;
  char v24 = *(unsigned char *)(v22 + 8);
  sub_1000CA330(a1, (uint64_t)v5, type metadata accessor for AWDLPeer);
  if (v24)
  {
    uint64_t v25 = &v5[v3[23]];
    uint64_t v23 = *(void *)v25;
    char v26 = v25[8];
    sub_1000CBC30((uint64_t)v5, type metadata accessor for AWDLPeer);
    if (v26)
    {
      LOBYTE(v23) = 0;
      goto LABEL_23;
    }
  }
  else
  {
    sub_1000CBC30((uint64_t)v5, type metadata accessor for AWDLPeer);
  }
  if (v23 < -128)
  {
    __break(1u);
LABEL_56:
    __break(1u);
  }
  if (v23 > 127) {
    goto LABEL_56;
  }
LABEL_23:
  uint64_t v27 = *(void *)(v12 + 40);
  if (v27) {
    LOBYTE(v27) = *(unsigned char *)(v12 + 28);
  }
  uint64_t v28 = a1 + v3[9];
  if (*(unsigned char *)(v28 + 48) == 1)
  {
    LOBYTE(v29) = 0;
    LOBYTE(v30) = 0;
    LOBYTE(v31) = 0;
    LOBYTE(v32) = 0;
    LOBYTE(v33) = 0;
    LOBYTE(v34) = 0;
    LOBYTE(v35) = 0;
    int v36 = 0;
    LODWORD(v37) = 0;
    uint64_t v38 = a1 + v3[22];
    int v39 = *(unsigned __int8 *)(v38 + 4);
    int v40 = *(_DWORD *)v38;
    if (v39) {
      int v40 = 0;
    }
    goto LABEL_39;
  }
  unint64_t v29 = *(void *)(v28 + 16);
  if (v29 >= 0x100)
  {
LABEL_57:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x1000B2A74);
  }
  unint64_t v30 = *(void *)v28;
  unint64_t v42 = *(void *)(v28 + 24);
  uint64_t v41 = *(void *)(v28 + 32);
  uint64_t v43 = a1 + v3[22];
  if (*(unsigned char *)(v43 + 4)) {
    int v40 = 0;
  }
  else {
    int v40 = *(_DWORD *)v43;
  }
  if (v41)
  {
    int v36 = 64;
    LODWORD(v44) = 61;
    switch(HIDWORD(v42))
    {
      case 1:
        break;
      case 2:
        LODWORD(v44) = 80;
        goto LABEL_35;
      case 3:
        LODWORD(v44) = 96;
        goto LABEL_35;
      case 4:
        LODWORD(v44) = 505;
        goto LABEL_35;
      case 5:
        LODWORD(v44) = 650;
        goto LABEL_35;
      case 6:
        LODWORD(v44) = 655;
        goto LABEL_35;
      default:
        goto LABEL_35;
    }
  }
  else
  {
    unint64_t v44 = HIDWORD(v42);
LABEL_35:
    int v36 = v44;
  }
  if (v42)
  {
    LODWORD(v37) = 61;
    switch(HIDWORD(v29))
    {
      case 1:
        unint64_t v35 = v30 >> 40;
        unint64_t v33 = v30 >> 24;
        LODWORD(v37) = 64;
        unint64_t v32 = v30 >> 16;
        unint64_t v31 = v30 >> 8;
        unint64_t v34 = HIDWORD(v30);
        break;
      case 2:
        LODWORD(v37) = 80;
        goto LABEL_38;
      case 3:
        LODWORD(v37) = 96;
        goto LABEL_38;
      case 4:
        LODWORD(v37) = 505;
        goto LABEL_38;
      case 5:
        LODWORD(v37) = 650;
        goto LABEL_38;
      case 6:
        LODWORD(v37) = 655;
        goto LABEL_38;
      default:
        goto LABEL_38;
    }
  }
  else
  {
    unint64_t v37 = HIDWORD(v29);
LABEL_38:
    unint64_t v35 = v30 >> 40;
    unint64_t v34 = HIDWORD(v30);
    unint64_t v33 = v30 >> 24;
    unint64_t v32 = v30 >> 16;
    unint64_t v31 = v30 >> 8;
  }
LABEL_39:
  __int16 v45 = WORD1(v14);
  uint64_t v46 = a1 + v3[5];
  __int16 v47 = *(_WORD *)(v46 + 4);
  if (!v15) {
    __int16 v45 = 0;
  }
  v58[0] = v57;
  v58[1] = v45;
  v58[2] = v56;
  v58[3] = v54;
  v58[4] = v53;
  v58[5] = v52;
  v58[6] = v55;
  char v59 = v23;
  char v60 = 0;
  char v61 = v27;
  char v62 = 0;
  char v63 = v29;
  int v64 = v40;
  int v65 = v36;
  int v66 = v37;
  char v67 = v30;
  char v68 = v31;
  char v69 = v32;
  char v70 = v33;
  char v71 = v34;
  char v72 = v35;
  int v73 = *(_DWORD *)v46;
  __int16 v74 = v47;
  uint64_t v48 = *(void *)(v1 + 16);
  uint64_t v49 = *(void *)(v1 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.setRequest(requestType:data:on:)(0xE5uLL, (uint64_t)v58, (uint64_t)&v75, 0, v48, v49);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t IO80211Driver<>.elect(peer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v66 = a4;
  unint64_t v7 = (int *)type metadata accessor for AWDLPeer(0);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_1004882F0);
  __chkstk_darwin();
  char v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000136F4(a1 + v7[14], (uint64_t)v11, (uint64_t *)&unk_1004882F0);
  uint64_t v12 = type metadata accessor for AWDLActionFrame.DataPathState(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12) == 1)
  {
    sub_1000380B4((uint64_t)v11, (uint64_t *)&unk_1004882F0);
    unsigned int v64 = 0;
  }
  else
  {
    unint64_t v13 = &v11[*(int *)(v12 + 140)];
    unsigned int v14 = *(_DWORD *)v13;
    char v15 = v13[4];
    sub_1000CBC30((uint64_t)v11, type metadata accessor for AWDLActionFrame.DataPathState);
    if (v15)
    {
      unsigned int v64 = 0;
    }
    else
    {
      unsigned int v64 = v14;
      if (v14 >= 0x10000) {
        goto LABEL_57;
      }
    }
  }
  uint64_t v16 = a1 + v7[12];
  unint64_t v18 = *(void *)v16;
  unint64_t v17 = *(void *)(v16 + 8);
  uint64_t v19 = *(void *)(v16 + 40);
  uint64_t v20 = a1 + v7[21];
  char v21 = *(unsigned char *)(v20 + 4);
  uint64_t v65 = a3;
  if (v21)
  {
    unsigned int v63 = 0;
  }
  else
  {
    unsigned int v63 = *(_DWORD *)v20;
    if (v63 >= 0x10000) {
      goto LABEL_57;
    }
  }
  unint64_t v22 = HIWORD(v18);
  unint64_t v23 = HIDWORD(v17);
  unint64_t v24 = HIWORD(v17);
  if (!v19)
  {
    LODWORD(v22) = 0;
    LODWORD(v17) = 0;
  }
  int v61 = v17;
  int v62 = v22;
  if (v19) {
    int v25 = v24;
  }
  else {
    int v25 = 0;
  }
  if (v19) {
    int v26 = v23;
  }
  else {
    int v26 = 0;
  }
  int v59 = v26;
  int v60 = v25;
  uint64_t v27 = a1 + v7[24];
  uint64_t v28 = *(void *)v27;
  char v29 = *(unsigned char *)(v27 + 8);
  sub_1000CA330(a1, (uint64_t)v9, type metadata accessor for AWDLPeer);
  if (v29)
  {
    unint64_t v30 = &v9[v7[23]];
    uint64_t v28 = *(void *)v30;
    char v31 = v30[8];
    sub_1000CBC30((uint64_t)v9, type metadata accessor for AWDLPeer);
    if (v31)
    {
      LOBYTE(v28) = 0;
      goto LABEL_23;
    }
  }
  else
  {
    sub_1000CBC30((uint64_t)v9, type metadata accessor for AWDLPeer);
  }
  if (v28 < -128)
  {
    __break(1u);
    goto LABEL_56;
  }
  if (v28 > 127)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
LABEL_23:
  uint64_t v32 = *(void *)(v16 + 40);
  if (v32) {
    LOBYTE(v32) = *(unsigned char *)(v16 + 28);
  }
  uint64_t v33 = a1 + v7[9];
  if (*(unsigned char *)(v33 + 48) == 1)
  {
    LOBYTE(v34) = 0;
    LOBYTE(v35) = 0;
    LOBYTE(v36) = 0;
    LOBYTE(v37) = 0;
    LOBYTE(v38) = 0;
    LOBYTE(v39) = 0;
    LOBYTE(v40) = 0;
    int v41 = 0;
    LODWORD(v42) = 0;
    uint64_t v43 = a1 + v7[22];
    int v44 = *(unsigned __int8 *)(v43 + 4);
    int v45 = *(_DWORD *)v43;
    if (v44) {
      int v45 = 0;
    }
    goto LABEL_39;
  }
  unint64_t v34 = *(void *)(v33 + 16);
  if (v34 >= 0x100)
  {
LABEL_57:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x1000B3030);
  }
  unint64_t v35 = *(void *)v33;
  unint64_t v47 = *(void *)(v33 + 24);
  uint64_t v46 = *(void *)(v33 + 32);
  uint64_t v48 = a1 + v7[22];
  if (*(unsigned char *)(v48 + 4)) {
    int v45 = 0;
  }
  else {
    int v45 = *(_DWORD *)v48;
  }
  if (v46)
  {
    int v41 = 64;
    LODWORD(v49) = 61;
    switch(HIDWORD(v47))
    {
      case 1:
        break;
      case 2:
        LODWORD(v49) = 80;
        goto LABEL_35;
      case 3:
        LODWORD(v49) = 96;
        goto LABEL_35;
      case 4:
        LODWORD(v49) = 505;
        goto LABEL_35;
      case 5:
        LODWORD(v49) = 650;
        goto LABEL_35;
      case 6:
        LODWORD(v49) = 655;
        goto LABEL_35;
      default:
        goto LABEL_35;
    }
  }
  else
  {
    unint64_t v49 = HIDWORD(v47);
LABEL_35:
    int v41 = v49;
  }
  if (v47)
  {
    LODWORD(v42) = 61;
    switch(HIDWORD(v34))
    {
      case 1:
        unint64_t v40 = v35 >> 40;
        unint64_t v38 = v35 >> 24;
        LODWORD(v42) = 64;
        unint64_t v37 = v35 >> 16;
        unint64_t v36 = v35 >> 8;
        unint64_t v39 = HIDWORD(v35);
        break;
      case 2:
        LODWORD(v42) = 80;
        goto LABEL_38;
      case 3:
        LODWORD(v42) = 96;
        goto LABEL_38;
      case 4:
        LODWORD(v42) = 505;
        goto LABEL_38;
      case 5:
        LODWORD(v42) = 650;
        goto LABEL_38;
      case 6:
        LODWORD(v42) = 655;
        goto LABEL_38;
      default:
        goto LABEL_38;
    }
  }
  else
  {
    unint64_t v42 = HIDWORD(v34);
LABEL_38:
    unint64_t v40 = v35 >> 40;
    unint64_t v39 = HIDWORD(v35);
    unint64_t v38 = v35 >> 24;
    unint64_t v37 = v35 >> 16;
    unint64_t v36 = v35 >> 8;
  }
LABEL_39:
  __int16 v50 = WORD1(v18);
  uint64_t v51 = a1 + v7[5];
  __int16 v52 = *(_WORD *)(v51 + 4);
  if (!v19) {
    __int16 v50 = 0;
  }
  v67[0] = v64;
  v67[1] = v50;
  v67[2] = v63;
  v67[3] = v61;
  v67[4] = v60;
  v67[5] = v59;
  v67[6] = v62;
  char v68 = v28;
  char v69 = 0;
  char v70 = v32;
  char v71 = 0;
  char v72 = v34;
  int v73 = v45;
  int v74 = v41;
  int v75 = v42;
  char v76 = v35;
  char v77 = v36;
  char v78 = v37;
  char v79 = v38;
  char v80 = v39;
  char v81 = v40;
  int v82 = *(_DWORD *)v51;
  __int16 v83 = v52;
  type metadata accessor for awdl_peer_advert_add(0);
  uint64_t v54 = v53;
  uint64_t v55 = *(void *)(v66 + 8);
  uint64_t v56 = *(void *)(v65 + 8);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return sub_1000BF4AC(229, (uint64_t)v67, a2, v54, v55, v56, AssociatedConformanceWitness);
}

uint64_t sub_1000B3068()
{
  __chkstk_darwin();
  uint64_t v1 = v0;
  sub_1000BECD0(0xDFuLL, __src);
  memcpy(__dst, __src, 0xE80uLL);
  sub_1000CA3C8((uint64_t)__dst);
  sub_10006EC68((uint64_t)__dst, (uint64_t)v5, &qword_10047E7A8);
  return sub_10006EC68((uint64_t)v5, v1, &qword_10047E7A8);
}

uint64_t IO80211Driver<>.statistics.getter()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = v0;
  uint64_t v7 = v6;
  type metadata accessor for apple80211_awdl_statistics(0);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v2 + 8);
  uint64_t v11 = *(void *)(v4 + 8);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_1000BF380(223, v9, v5, v9, v10, v11, AssociatedConformanceWitness);
  memcpy(__dst, __src, 0xE80uLL);
  sub_1000CA3C8((uint64_t)__dst);
  sub_10006EC68((uint64_t)__dst, (uint64_t)v16, &qword_10047E7A8);
  return sub_10006EC68((uint64_t)v16, v7, &qword_10047E7A8);
}

uint64_t sub_1000B3268()
{
  __chkstk_darwin();
  uint64_t v1 = v0;
  sub_1000BEDA4(0x157uLL, __src);
  memcpy(__dst, __src, 0xFB0uLL);
  NANBitmap.Channel.operatingClass.getter(__dst);
  sub_10006EC68((uint64_t)__dst, (uint64_t)v5, &qword_10047E7B0);
  return sub_10006EC68((uint64_t)v5, v1, &qword_10047E7B0);
}

uint64_t IO80211Driver<>.lowLatencyStatistics.getter()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = v0;
  uint64_t v7 = v6;
  type metadata accessor for apple80211_awdl_low_latency_statistics(0);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v2 + 8);
  uint64_t v11 = *(void *)(v4 + 8);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_1000BF380(343, v9, v5, v9, v10, v11, AssociatedConformanceWitness);
  memcpy(__dst, __src, 0xFB0uLL);
  NANBitmap.Channel.operatingClass.getter(__dst);
  sub_10006EC68((uint64_t)__dst, (uint64_t)v16, &qword_10047E7B0);
  return sub_10006EC68((uint64_t)v16, v7, &qword_10047E7B0);
}

uint64_t sub_1000B3468@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B348C(a1);
}

uint64_t sub_1000B348C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = (unsigned __int8 *)swift_slowAlloc();
  *(void *)uint64_t v4 = 0;
  *(void *)(v4 + 6) = 0;
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.getRequest(requestType:data:on:)(0x143uLL, (uint64_t)v4, (uint64_t)(v4 + 14), 0, v5, v6);
  swift_bridgeObjectRelease();
  swift_release();
  if (v2) {
    return swift_slowDealloc();
  }
  uint64_t v8 = *v4;
  uint64_t v9 = v4[1];
  unsigned __int8 v24 = v4[2];
  uint64_t v10 = *((unsigned __int16 *)v4 + 2);
  int v11 = v4[6];
  uint64_t v12 = v4[7];
  uint64_t v25 = v4[8];
  uint64_t v26 = v4[9];
  uint64_t v27 = v4[10];
  uint64_t v28 = v4[11];
  uint64_t v29 = v4[12];
  uint64_t v13 = v4[3];
  swift_slowDealloc();
  uint64_t v14 = NANBitmap.Band.bands.getter(v13);
  sub_100010BCC(&qword_10047C930);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003B4420;
  *(unsigned char *)(inited + 32) = sub_1001E1C64(v8, 0, 4);
  unsigned __int8 v16 = sub_1001E1C64(v9, 4, 4);
  *(unsigned char *)(inited + 33) = v16;
  char v17 = *(unsigned char *)(inited + 32);
  swift_bridgeObjectRelease();
  if ((v16 & ~v17) != 0) {
    unsigned __int8 v18 = v16;
  }
  else {
    unsigned __int8 v18 = 0;
  }
  char v23 = v18 | v17;
  uint64_t v19 = (int *)type metadata accessor for NANDriverCapabilities();
  uint64_t v20 = (void *)(a1 + v19[8]);
  *uint64_t v20 = v10;
  uint64_t v21 = enum case for DispatchTimeInterval.milliseconds(_:);
  uint64_t v22 = type metadata accessor for DispatchTimeInterval();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 104))(v20, v21, v22);
  *(void *)a1 = v14;
  *(void *)(a1 + 8) = &off_100450080;
  *(unsigned char *)(a1 + 16) = v24;
  *(unsigned char *)(a1 + 17) = v23;
  *(void *)(a1 + v19[9]) = v12;
  *(void *)(a1 + v19[10]) = v25;
  *(void *)(a1 + v19[11]) = v26;
  *(void *)(a1 + v19[12]) = v27;
  *(void *)(a1 + v19[13]) = v28;
  *(void *)(a1 + v19[14]) = v29;
  *(unsigned char *)(a1 + v19[15]) = v11 != 0;
  return result;
}

uint64_t IO80211Driver<>.initializeNAN()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  type metadata accessor for apple80211_nan_device_capability(0);
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(a2 + 8);
  uint64_t v12 = *(void *)(a3 + 16);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t result = sub_1000BF380(323, v10, a1, v10, v11, v12, AssociatedConformanceWitness);
  if (!v4)
  {
    uint64_t v15 = NANBitmap.Band.bands.getter(v28);
    sub_100010BCC(&qword_10047C930);
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 24) = 4;
    *(unsigned char *)(inited + 32) = sub_1001E1C64(v25, 0, 4);
    unsigned __int8 v17 = sub_1001E1C64(v26, 4, 4);
    *(unsigned char *)(inited + 33) = v17;
    char v18 = *(unsigned char *)(inited + 32);
    if ((v17 & ~v18) != 0) {
      unsigned __int8 v19 = v17;
    }
    else {
      unsigned __int8 v19 = 0;
    }
    char v24 = v19 | v18;
    swift_setDeallocating();
    uint64_t v20 = (int *)type metadata accessor for NANDriverCapabilities();
    uint64_t v21 = (void *)(a4 + v20[8]);
    *uint64_t v21 = v29;
    uint64_t v22 = enum case for DispatchTimeInterval.milliseconds(_:);
    uint64_t v23 = type metadata accessor for DispatchTimeInterval();
    uint64_t result = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 104))(v21, v22, v23);
    *(void *)a4 = v15;
    *(void *)(a4 + 8) = &off_1004500A8;
    *(unsigned char *)(a4 + 16) = v27;
    *(unsigned char *)(a4 + 17) = v24;
    *(void *)(a4 + v20[9]) = v31;
    *(void *)(a4 + v20[10]) = v32;
    *(void *)(a4 + v20[11]) = v33;
    *(void *)(a4 + v20[12]) = v34;
    *(void *)(a4 + v20[13]) = v35;
    *(void *)(a4 + v20[14]) = v36;
    *(unsigned char *)(a4 + v20[15]) = v30 != 0;
  }
  return result;
}

BOOL sub_1000B39C8()
{
  return sub_1000BF024(0x10CuLL) != 0;
}

BOOL IO80211Driver<>.nanState.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for apple80211_nan_enable(0);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v9 = *(void *)(a3 + 16);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_1000BF380(268, v7, a1, v7, v8, v9, AssociatedConformanceWitness);
  return v12 != 0;
}

uint64_t sub_1000B3AF8(char a1)
{
  return sub_100064248(0x10CuLL, a1 & 1);
}

uint64_t IO80211Driver<>.update(nanState:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v13 = a1 & 1;
  type metadata accessor for apple80211_nan_enable(0);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(a3 + 8);
  uint64_t v10 = *(void *)(a4 + 16);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return sub_1000BF4AC(268, (uint64_t)&v13, a2, v8, v9, v10, AssociatedConformanceWitness);
}

unint64_t sub_1000B3BE4()
{
  sub_1000BEE78(0x10EuLL, (uint64_t)v1);
  return v2 | ((unint64_t)v3 << 32) | ((unint64_t)v4 << 40);
}

unint64_t IO80211Driver<>.clusterID.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for apple80211_nan_cluster_id(0);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v9 = *(void *)(a3 + 16);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_1000BF380(270, v7, a1, v7, v8, v9, AssociatedConformanceWitness);
  return v12 | ((unint64_t)v13 << 32) | ((unint64_t)v14 << 40);
}

uint64_t sub_1000B3D54(uint64_t a1)
{
  return sub_100064294(0x10EuLL, a1 & 0xFFFFFFFFFF00 | ((unint64_t)a1 << 48) & 0xFFFFFFFFFFFF00 | ((unint64_t)BYTE1(a1) << 56) | a1, WORD1(a1));
}

uint64_t IO80211Driver<>.update(clusterID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int16 v13 = a1;
  char v14 = BYTE2(a1);
  char v15 = BYTE3(a1);
  char v16 = BYTE4(a1);
  char v17 = BYTE5(a1);
  __int16 v18 = a1;
  char v19 = BYTE2(a1);
  char v20 = BYTE3(a1);
  char v21 = BYTE4(a1);
  char v22 = BYTE5(a1);
  type metadata accessor for apple80211_nan_cluster_id(0);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(a3 + 8);
  uint64_t v10 = *(void *)(a4 + 16);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return sub_1000BF4AC(270, (uint64_t)&v13, a2, v8, v9, v10, AssociatedConformanceWitness);
}

uint64_t sub_1000B3E98()
{
  unsigned __int8 v0 = (unsigned __int16)sub_1000BEF4C(0x119uLL) >> 8;
  return sub_1000BEF4C(0x11AuLL) & 0xFF00 | v0;
}

uint64_t IO80211Driver<>.electionMetric.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for apple80211_nan_master_pref(0);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v9 = *(void *)(a3 + 16);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_1000BF380(281, v7, a1, v7, v8, v9, AssociatedConformanceWitness);
  type metadata accessor for apple80211_nan_random_factor(0);
  sub_1000BF380(282, v11, a1, v11, v8, v9, AssociatedConformanceWitness);
  return v14 | (v13 << 8);
}

uint64_t sub_1000B4030(__int16 a1)
{
  uint64_t result = sub_1000643A8(0x119uLL, a1 | (unsigned __int16)(a1 << 8));
  if (!v1) {
    return sub_1000643A8(0x11AuLL, a1 & 0xFF00u | HIBYTE(a1));
  }
  return result;
}

uint64_t IO80211Driver<>.update(electionMetric:)(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v8 = HIBYTE(a1);
  v17[0] = a1;
  v17[1] = a1;
  type metadata accessor for apple80211_nan_master_pref(0);
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(a3 + 8);
  uint64_t v12 = *(void *)(a4 + 16);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t result = sub_1000BF4AC(281, (uint64_t)v17, a2, v10, v11, v12, AssociatedConformanceWitness);
  if (!v4)
  {
    v16[0] = v8;
    v16[1] = v8;
    type metadata accessor for apple80211_nan_random_factor(0);
    return sub_1000BF4AC(282, (uint64_t)v16, a2, v15, v11, v12, AssociatedConformanceWitness);
  }
  return result;
}

uint64_t sub_1000B4188()
{
  return sub_1000B41AC();
}

uint64_t sub_1000B41AC()
{
  sub_1000BEF4C(0x111uLL);
  unsigned __int8 v0 = _s7CoreP2P18NANAwakeDWIntervalO8intervalACSgAA11NANTimeUnitV_tcfC_0();
  if (v0 == 5) {
    unsigned __int8 v1 = 0;
  }
  else {
    unsigned __int8 v1 = v0;
  }
  int v2 = _s7CoreP2P18NANAwakeDWIntervalO8intervalACSgAA11NANTimeUnitV_tcfC_0();
  if (v2 == 5) {
    int v3 = 0;
  }
  else {
    int v3 = v2;
  }
  return v1 | (v3 << 8);
}

uint64_t IO80211Driver<>.dwAwakePeriods.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for apple80211_nan_dw_awake_period(0);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v9 = *(void *)(a3 + 16);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_1000BF380(273, v7, a1, v7, v8, v9, AssociatedConformanceWitness);
  unsigned __int8 v11 = _s7CoreP2P18NANAwakeDWIntervalO8intervalACSgAA11NANTimeUnitV_tcfC_0();
  if (v11 == 5) {
    unsigned __int8 v12 = 0;
  }
  else {
    unsigned __int8 v12 = v11;
  }
  int v13 = _s7CoreP2P18NANAwakeDWIntervalO8intervalACSgAA11NANTimeUnitV_tcfC_0();
  if (v13 == 5) {
    int v14 = 0;
  }
  else {
    int v14 = v13;
  }
  return v12 | (v14 << 8);
}

uint64_t sub_1000B4334(unsigned int a1)
{
  return sub_1000B4358(a1);
}

uint64_t sub_1000B4358(unsigned int a1)
{
  char v2 = 8;
  char v3 = a1;
  switch((char)a1)
  {
    case 1:
      char v3 = 1;
      goto LABEL_4;
    case 2:
      char v3 = 4;
      goto LABEL_4;
    case 3:
      goto LABEL_6;
    case 4:
      char v2 = 16;
      goto LABEL_6;
    default:
LABEL_4:
      char v2 = v3;
LABEL_6:
      v7[0] = v2;
      v7[1] = 0x1008040100uLL >> ((a1 >> 5) & 0xF8);
      uint64_t v4 = *(void *)(v1 + 16);
      uint64_t v5 = *(void *)(v1 + 24);
      swift_retain();
      swift_bridgeObjectRetain();
      AppleDevice.setRequest(requestType:data:on:)(0x111uLL, (uint64_t)v7, (uint64_t)&v8, 0, v4, v5);
      swift_bridgeObjectRelease();
      return swift_release();
  }
}

uint64_t IO80211Driver<>.update(dwAwakePeriods:)(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4 = 8;
  char v8 = a1;
  switch((char)a1)
  {
    case 1:
      char v8 = 1;
      goto LABEL_5;
    case 2:
      char v8 = 4;
      goto LABEL_5;
    case 3:
      goto LABEL_6;
    case 4:
      char v4 = 16;
      goto LABEL_6;
    default:
LABEL_5:
      char v4 = v8;
LABEL_6:
      v15[0] = v4;
      v15[1] = 0x1008040100uLL >> ((a1 >> 5) & 0xF8);
      type metadata accessor for apple80211_nan_dw_awake_period(0);
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)(a3 + 8);
      uint64_t v12 = *(void *)(a4 + 16);
      swift_getAssociatedTypeWitness();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      return sub_1000BF4AC(273, (uint64_t)v15, a2, v10, v11, v12, AssociatedConformanceWitness);
  }
}

unint64_t sub_1000B45B8(uint64_t a1, uint64_t a2)
{
  return sub_1000B4644(a1, a2, 0x11FuLL);
}

unint64_t IO80211Driver<>.primaryChannel.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B46BC(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for apple80211_nan_primary_master_channel, 287);
}

uint64_t sub_1000B45DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B47D4(a1, a2, a3, 287, (uint64_t (*)(uint64_t, uint64_t))sub_100064248);
}

uint64_t IO80211Driver<>.update(primaryChannel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000B48A4(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for apple80211_nan_primary_master_channel, 287);
}

unint64_t sub_1000B463C(uint64_t a1, uint64_t a2)
{
  return sub_1000B4644(a1, a2, 0x120uLL);
}

unint64_t sub_1000B4644(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unsigned __int8 v3 = sub_1000BF024(a3);
  return sub_1001C7008(v3) & 0xFFFFFFFFFFFFLL;
}

unint64_t IO80211Driver<>.secondaryChannel.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B46BC(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for apple80211_nan_secondary_master_channel, 288);
}

unint64_t sub_1000B46BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v9 = a4(0);
  uint64_t v10 = *(void *)(a2 + 8);
  uint64_t v11 = *(void *)(a3 + 16);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_1000BF380(a5, v9, a1, v9, v10, v11, AssociatedConformanceWitness);
  return sub_1001C7008(v14) & 0xFFFFFFFFFFFFLL;
}

uint64_t sub_1000B47A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B47D4(a1, a2, a3, 288, (uint64_t (*)(uint64_t, uint64_t))sub_100064248);
}

uint64_t sub_1000B47D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if ((a1 & 0xFF00000000) == 0x300000000)
  {
    uint64_t v5 = 0;
    return a5(a4, v5);
  }
  uint64_t v5 = a1;
  if (a1 < 0x100) {
    return a5(a4, v5);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t IO80211Driver<>.update(secondaryChannel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000B48A4(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for apple80211_nan_secondary_master_channel, 288);
}

uint64_t sub_1000B48A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t a6)
{
  if ((a1 & 0xFF00000000) == 0x300000000)
  {
    LOBYTE(a1) = 0;
LABEL_4:
    char v15 = a1;
    uint64_t v10 = a5(0);
    uint64_t v11 = *(void *)(a3 + 8);
    uint64_t v12 = *(void *)(a4 + 16);
    swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    return sub_1000BF4AC(a6, (uint64_t)&v15, a2, v10, v11, v12, AssociatedConformanceWitness);
  }
  if (a1 < 0x100) {
    goto LABEL_4;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

BOOL sub_1000B49D8()
{
  return sub_1000BF024(0x113uLL) != 0;
}

BOOL IO80211Driver<>.hostElection.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for apple80211_nan_host_election(0);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v9 = *(void *)(a3 + 16);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_1000BF380(275, v7, a1, v7, v8, v9, AssociatedConformanceWitness);
  return v12 != 0;
}

uint64_t sub_1000B4B08(char a1)
{
  return sub_100064248(0x113uLL, a1 & 1);
}

uint64_t IO80211Driver<>.update(hostElection:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v13 = a1;
  type metadata accessor for apple80211_nan_host_election(0);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(a3 + 8);
  uint64_t v10 = *(void *)(a4 + 16);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return sub_1000BF4AC(275, (uint64_t)&v13, a2, v8, v9, v10, AssociatedConformanceWitness);
}

uint64_t sub_1000B4BF0()
{
  return sub_1000CA4E4();
}

uint64_t IO80211Driver<>.transmitAllFrames(with:)()
{
  __int16 v17 = 0;
  memset(v16, 0, sizeof(v16));
  unint64_t v1 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v2 = type metadata accessor for BinaryEncoder();
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1003B2440;
  *(void *)(v3 + 32) = v1;
  v18[3] = v2;
  v18[4] = sub_1000CAF84((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
  v18[0] = v3;
  type metadata accessor for NANAttribute(0);
  sub_1000CAF84(&qword_10047E7B8, (void (*)(uint64_t))type metadata accessor for NANAttribute);
  swift_bridgeObjectRetain();
  swift_retain();
  Array<A>.encode(to:)();
  sub_100010754((uint64_t)v18);
  if (v0)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v5 = *(void *)(v3 + 16);
  unint64_t v6 = *(void *)(v3 + 24);
  sub_100013D44(v5, v6);
  swift_release();
  switch(v6 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v5), v5))
      {
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      if (HIDWORD(v5) - (int)v5 >= 256) {
        goto LABEL_12;
      }
LABEL_14:
      if (__OFSUB__(HIDWORD(v5), v5))
      {
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      char v11 = 0;
      if (HIDWORD(v5) - (int)v5 < 0xFFFF)
      {
LABEL_16:
        if (v11)
        {
          uint64_t v14 = *(void *)(v5 + 16);
          uint64_t v13 = *(void *)(v5 + 24);
          BOOL v9 = __OFSUB__(v13, v14);
          unint64_t v15 = v13 - v14;
          if (!v9)
          {
LABEL_22:
            if ((v15 & 0x8000000000000000) != 0 || v15 >= 0x10000)
            {
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              JUMPOUT(0x1000B4FC4);
            }
LABEL_4:
            sub_10005A9A4(v5, v6, v16, (uint64_t)&v17);
            return sub_10000C970(v5, v6);
          }
          __break(1u);
        }
        LODWORD(v15) = HIDWORD(v5) - v5;
        if (!__OFSUB__(HIDWORD(v5), v5))
        {
          unint64_t v15 = (int)v15;
          goto LABEL_22;
        }
LABEL_28:
        __break(1u);
      }
LABEL_12:
      sub_10000F000();
      swift_allocError();
      *(_OWORD *)uint64_t v12 = xmmword_1003B2F60;
      *(unsigned char *)(v12 + 16) = 0;
      swift_willThrow();
      return sub_10000C970(v5, v6);
    case 2uLL:
      uint64_t v8 = *(void *)(v5 + 16);
      uint64_t v7 = *(void *)(v5 + 24);
      BOOL v9 = __OFSUB__(v7, v8);
      uint64_t v10 = v7 - v8;
      if (v9) {
        goto LABEL_26;
      }
      if (v10 >= 256) {
        goto LABEL_12;
      }
      if (v6 >> 62 != 2) {
        goto LABEL_14;
      }
      char v11 = 1;
      goto LABEL_16;
    default:
      goto LABEL_4;
  }
}

uint64_t sub_1000B4FD4(unsigned __int8 *a1)
{
  return sub_1000B4FF8(a1);
}

uint64_t sub_1000B4FF8(unsigned __int8 *a1)
{
  unint64_t v2 = *a1;
  uint64_t v3 = *((void *)a1 + 3);
  uint64_t v4 = *((void *)a1 + 4);
  unsigned __int8 v5 = a1[1];
  if (v2 >= 5) {
    char v6 = 3;
  }
  else {
    char v6 = 0x201000303uLL >> (8 * v2);
  }
  unsigned __int8 v7 = a1[16];
  int v8 = *((_DWORD *)a1 + 5);
  __int16 v9 = *((_WORD *)a1 + 3);
  v13[0] = v6;
  v13[4] = v5;
  v13[5] = v7;
  int v14 = 0;
  __int16 v15 = 0;
  int v16 = *(_DWORD *)(a1 + 2);
  __int16 v17 = v9;
  __int16 v18 = 0;
  int v19 = HIDWORD(v3);
  int v20 = v3;
  int v21 = HIDWORD(v4);
  int v22 = v4;
  uint64_t v23 = *((void *)a1 + 1);
  int v24 = v8;
  uint64_t v10 = *(void *)(v1 + 16);
  uint64_t v11 = *(void *)(v1 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.setRequest(requestType:data:on:)(0x14BuLL, (uint64_t)v13, (uint64_t)&v25, 0, v10, v11);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t IO80211Driver<>.update(electionParameters:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = *a1;
  uint64_t v8 = *((void *)a1 + 3);
  uint64_t v9 = *((void *)a1 + 4);
  unsigned __int8 v10 = a1[1];
  unsigned __int8 v11 = a1[16];
  int v12 = *((_DWORD *)a1 + 5);
  if (v7 >= 5) {
    char v13 = 3;
  }
  else {
    char v13 = 0x201000303uLL >> (8 * v7);
  }
  __int16 v14 = *((_WORD *)a1 + 3);
  v21[0] = v13;
  void v21[4] = v10;
  v21[5] = v11;
  int v22 = 0;
  __int16 v23 = 0;
  int v24 = *(_DWORD *)(a1 + 2);
  __int16 v25 = v14;
  __int16 v26 = 0;
  int v27 = HIDWORD(v8);
  int v28 = v8;
  int v29 = HIDWORD(v9);
  int v30 = v9;
  uint64_t v31 = *((void *)a1 + 1);
  int v32 = v12;
  type metadata accessor for apple80211_nan_role_cfg(0);
  uint64_t v16 = v15;
  uint64_t v17 = *(void *)(a3 + 8);
  uint64_t v18 = *(void *)(a4 + 16);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return sub_1000BF4AC(331, (uint64_t)v21, a2, v16, v17, v18, AssociatedConformanceWitness);
}

uint64_t sub_1000B5258()
{
  return sub_1000B527C();
}

uint64_t sub_1000B527C()
{
  int v62 = v1;
  uint64_t v55 = v0;
  uint64_t v2 = __chkstk_darwin();
  uint64_t v3 = type metadata accessor for DispatchTimeInterval();
  uint64_t v57 = *(void *)(v3 - 8);
  uint64_t v58 = v3;
  __chkstk_darwin();
  uint64_t v56 = (uint64_t *)((char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for SHA256Digest();
  uint64_t v60 = *(void *)(v5 - 8);
  int v61 = (void *)v5;
  __chkstk_darwin();
  unint64_t v7 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = type metadata accessor for SHA256();
  uint64_t v8 = *(void *)(v59 - 8);
  __chkstk_darwin();
  unsigned __int8 v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v63 = &v69[6];
  char v81 = 0;
  memset(v69, 0, sizeof(v69));
  bzero(&v70, 0xCA9uLL);
  memset(v82, 0, 69);
  memset(&v82[18], 0, 22);
  HIBYTE(v80) = *(unsigned char *)v2;
  uint64_t v12 = *(void *)(v2 + 8);
  uint64_t v11 = *(void *)(v2 + 16);
  uint64_t v64 = v2;
  swift_bridgeObjectRetain();
  SHA256.init()();
  Swift::String v13 = String.lowercased()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  __int16 v14 = v62;
  sub_1001A5654(v13._countAndFlagsBits, (uint64_t)v13._object);
  swift_bridgeObjectRelease();
  SHA256.finalize()();
  SHA256Digest.withUnsafeBytes<A>(_:)();
  (*(void (**)(char *, void *))(v60 + 8))(v7, v61);
  uint64_t v15 = v84[0];
  unint64_t v16 = v84[1];
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v59);
  v84[0] = v15;
  v84[1] = v16;
  unint64_t v17 = sub_100074B70();
  uint64_t v18 = v63;
  DataProtocol.copyBytes(to:)();
  sub_10000C970(v15, v16);
  uint64_t KeyPath = swift_getKeyPath();
  v83[2] = v18;
  v83[3] = KeyPath;
  v83[4] = 255;
  uint64_t v20 = (uint64_t)sub_10000E350((uint64_t)sub_10000E464, (uint64_t)v83, v12, v11);
  swift_release();
  uint64_t v21 = 254;
  if (v20 < 254) {
    uint64_t v21 = v20;
  }
  if (v21 < 0)
  {
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v59 = v17;
  int v62 = v73;
  __int16 v70 = v21;
  int v22 = (int *)type metadata accessor for NANSubscribe.Configuration();
  int v61 = v14;
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1000C21AC();
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1000C21AC();
  swift_release();
  swift_release();
  uint64_t v23 = NANSubscribe.Configuration.serviceInfo.getter();
  uint64_t v25 = v24;
  unint64_t v27 = v26;
  sub_100013D44(v24, v26);
  unint64_t v28 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v29 = type metadata accessor for BinaryEncoder();
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_1003B2440;
  *(void *)(v30 + 32) = v28;
  v84[3] = v29;
  v84[4] = sub_1000CAF84((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
  v84[0] = v30;
  sub_100013D44(v25, v27);
  swift_retain();
  uint64_t v31 = v61;
  NANServiceInfo.encode(to:)(v84, v23, v25, v27);
  if (v31)
  {
    sub_100010754((uint64_t)v84);
    sub_10000C970(v25, v27);
    sub_10000C970(v25, v27);
    swift_release();
    swift_errorRelease();
    sub_10000C970(v25, v27);
    int v61 = 0;
  }
  else
  {
    int v61 = 0;
    sub_100010754((uint64_t)v84);
    sub_10000C970(v25, v27);
    sub_10000C970(v25, v27);
    swift_beginAccess();
    uint64_t v32 = *(void *)(v30 + 16);
    unint64_t v33 = *(void *)(v30 + 24);
    sub_100013D44(v32, v33);
    swift_release();
    sub_10000C970(v25, v27);
    sub_1000CA8B0(v32, v33, v65);
    memcpy(v62, v65, 0x802uLL);
  }
  uint64_t v35 = v57;
  uint64_t v34 = v58;
  uint64_t v36 = v64;
  if (*(unsigned char *)(v64 + 32)) {
    char v37 = 2;
  }
  else {
    char v37 = 1;
  }
  LOBYTE(v80) = v37;
  HIBYTE(v79) = *(unsigned char *)(v64 + v22[13]);
  char v81 = 0x1008040100uLL >> (8 * *(unsigned char *)(v64 + v22[10]));
  uint64_t v38 = sub_1001ADA80();
  unint64_t v39 = v56;
  *uint64_t v56 = 0x80000;
  (*(void (**)(void *, void, uint64_t))(v35 + 104))(v39, enum case for DispatchTimeInterval.microseconds(_:), v34);
  uint64_t v40 = sub_1001ADA80();
  (*(void (**)(void *, uint64_t))(v35 + 8))(v39, v34);
  if (!v40) {
    goto LABEL_33;
  }
  if (v38 == 0x8000000000000000 && v40 == -1) {
LABEL_34:
  }
    __break(1u);
  if (((v38 / v40) & 0x8000000000000000) == 0 && !((unint64_t)(v38 / v40) >> 32))
  {
    uint64_t v60 = v38 / v40;
    uint64_t v41 = v22[14];
    if (*(unsigned char *)(v36 + 33)) {
      int v42 = 194;
    }
    else {
      int v42 = 192;
    }
    if (*(unsigned char *)(v36 + 33)) {
      int v43 = 2;
    }
    else {
      int v43 = 0;
    }
    if (*(unsigned char *)(v36 + v22[15])) {
      int v44 = v42;
    }
    else {
      int v44 = v43;
    }
    int v45 = (uint64_t *)(v36 + v41);
    __int16 v46 = *(_WORD *)(v36 + v41 + 16);
    if ((v46 & 0xFF00) == 0x200) {
      goto LABEL_31;
    }
    uint64_t v47 = *v45;
    unint64_t v48 = v45[1];
    v84[0] = v47;
    v84[1] = v48;
    sub_100013D44(v47, v48);
    unint64_t v49 = DataProtocol.copyBytes(to:)();
    if ((v49 & 0x8000000000000000) == 0 && !HIDWORD(v49))
    {
      v82[0] = v49;
      sub_1000CA4D0(v47, v48, v46);
      LOBYTE(v82[1]) = v46;
      if ((v46 & 0x100) != 0) {
        int v50 = 8;
      }
      else {
        int v50 = 12;
      }
      v44 |= v50;
LABEL_31:
      LODWORD(v64) = v44;
      memcpy((char *)v84 + 6, v63, 0x102uLL);
      memcpy(v85, v71, sizeof(v85));
      memcpy(v86, v72, sizeof(v86));
      memcpy(v87, v62, sizeof(v87));
      LODWORD(v84[0]) = *(_DWORD *)v69;
      WORD2(v84[0]) = *(_WORD *)&v69[4];
      long long v88 = *(_OWORD *)&v73[2050];
      long long v89 = v74;
      long long v90 = v75;
      long long v91 = v76;
      long long v92 = v77;
      long long v93 = v78;
      int v94 = v79;
      __int16 v95 = v80;
      char v96 = v81;
      __int16 v97 = v67;
      char v98 = v68;
      int v99 = v82[0];
      long long v100 = *(_OWORD *)&v82[1];
      long long v101 = *(_OWORD *)&v82[5];
      long long v102 = *(_OWORD *)&v82[9];
      long long v103 = *(_OWORD *)&v82[13];
      char v104 = v82[17];
      __int16 v105 = v65[1025];
      char v106 = v66;
      int v107 = v82[18];
      int v108 = v60;
      int v109 = -1;
      int v110 = v44;
      int v111 = v82[22];
      __int16 v112 = v82[23];
      uint64_t v51 = *(void *)(v55 + 16);
      uint64_t v52 = *(void *)(v55 + 24);
      swift_retain();
      swift_bridgeObjectRetain();
      AppleDevice.setRequest(requestType:data:on:)(0x12FuLL, (uint64_t)v84, (uint64_t)&v113, 0, v51, v52);
      swift_bridgeObjectRelease();
      return swift_release();
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t IO80211Driver<>.start(configuration:)()
{
  uint64_t v2 = __chkstk_darwin();
  int v73 = v1;
  uint64_t v63 = v3;
  uint64_t v64 = v0;
  uint64_t v61 = v5;
  uint64_t v62 = v4;
  uint64_t v6 = v2;
  uint64_t v7 = type metadata accessor for DispatchTimeInterval();
  uint64_t v67 = *(void *)(v7 - 8);
  uint64_t v68 = v7;
  __chkstk_darwin();
  char v66 = (uint64_t *)((char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for SHA256Digest();
  uint64_t v71 = *(void *)(v9 - 8);
  uint64_t v72 = v9;
  __chkstk_darwin();
  uint64_t v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = type metadata accessor for SHA256();
  uint64_t v12 = *(void *)(v70 - 8);
  __chkstk_darwin();
  __int16 v14 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v74 = &v79[6];
  char v91 = 0;
  memset(v79, 0, sizeof(v79));
  bzero(&v80, 0xCA9uLL);
  memset(v92, 0, 69);
  memset(&v92[18], 0, 22);
  HIBYTE(v90) = *(unsigned char *)v6;
  uint64_t v15 = *(void *)(v6 + 16);
  unint64_t v69 = *(void *)(v6 + 8);
  uint64_t v65 = v6;
  swift_bridgeObjectRetain();
  SHA256.init()();
  Swift::String v16 = String.lowercased()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  unint64_t v17 = v73;
  sub_1001A5654(v16._countAndFlagsBits, (uint64_t)v16._object);
  swift_bridgeObjectRelease();
  SHA256.finalize()();
  SHA256Digest.withUnsafeBytes<A>(_:)();
  (*(void (**)(char *, uint64_t))(v71 + 8))(v11, v72);
  uint64_t v18 = v94[0];
  unint64_t v19 = v94[1];
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v70);
  v94[0] = v18;
  v94[1] = v19;
  unint64_t v20 = sub_100074B70();
  uint64_t v21 = v74;
  DataProtocol.copyBytes(to:)();
  sub_10000C970(v18, v19);
  uint64_t KeyPath = swift_getKeyPath();
  v93[2] = v21;
  v93[3] = KeyPath;
  v93[4] = 255;
  uint64_t v23 = (uint64_t)sub_10000E350((uint64_t)sub_10000E464, (uint64_t)v93, v69, v15);
  swift_release();
  uint64_t v24 = 254;
  if (v23 < 254) {
    uint64_t v24 = v23;
  }
  if (v24 < 0)
  {
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  unint64_t v69 = v20;
  int v73 = v83;
  __int16 v80 = v24;
  uint64_t v25 = type metadata accessor for NANSubscribe.Configuration();
  uint64_t v26 = v65;
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1000C21AC();
  swift_release();
  swift_release();
  uint64_t v72 = v25;
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1000C21AC();
  swift_release();
  swift_release();
  LODWORD(v71) = NANSubscribe.Configuration.serviceInfo.getter();
  uint64_t v28 = v27;
  unint64_t v30 = v29;
  sub_100013D44(v27, v29);
  unint64_t v31 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v32 = type metadata accessor for BinaryEncoder();
  uint64_t v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_1003B2440;
  *(void *)(v33 + 32) = v31;
  v94[3] = v32;
  v94[4] = sub_1000CAF84((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
  v94[0] = v33;
  sub_100013D44(v28, v30);
  swift_retain();
  NANServiceInfo.encode(to:)(v94, v71, v28, v30);
  if (v17)
  {
    sub_100010754((uint64_t)v94);
    sub_10000C970(v28, v30);
    sub_10000C970(v28, v30);
    swift_release();
    swift_errorRelease();
    sub_10000C970(v28, v30);
    uint64_t v71 = 0;
  }
  else
  {
    uint64_t v71 = 0;
    sub_100010754((uint64_t)v94);
    sub_10000C970(v28, v30);
    sub_10000C970(v28, v30);
    swift_beginAccess();
    uint64_t v34 = *(void *)(v33 + 16);
    unint64_t v35 = *(void *)(v33 + 24);
    sub_100013D44(v34, v35);
    swift_release();
    sub_10000C970(v28, v30);
    sub_1000CA8B0(v34, v35, v75);
    memcpy(v73, v75, 0x802uLL);
  }
  if (*(unsigned char *)(v26 + 32)) {
    char v36 = 2;
  }
  else {
    char v36 = 1;
  }
  LOBYTE(v90) = v36;
  uint64_t v37 = v72;
  HIBYTE(v89) = *(unsigned char *)(v26 + *(int *)(v72 + 52));
  char v91 = 0x1008040100uLL >> (8 * *(unsigned char *)(v26 + *(int *)(v72 + 40)));
  uint64_t v38 = sub_1001ADA80();
  uint64_t v40 = v66;
  uint64_t v39 = v67;
  *char v66 = 0x80000;
  uint64_t v41 = v68;
  (*(void (**)(void *, void, uint64_t))(v39 + 104))(v40, enum case for DispatchTimeInterval.microseconds(_:), v68);
  uint64_t v42 = sub_1001ADA80();
  (*(void (**)(void *, uint64_t))(v39 + 8))(v40, v41);
  if (!v42) {
    goto LABEL_33;
  }
  if (v38 == 0x8000000000000000 && v42 == -1) {
LABEL_34:
  }
    __break(1u);
  if (((v38 / v42) & 0x8000000000000000) == 0 && !((unint64_t)(v38 / v42) >> 32))
  {
    uint64_t v70 = v38 / v42;
    uint64_t v43 = *(int *)(v37 + 56);
    if (*(unsigned char *)(v26 + 33)) {
      int v44 = 194;
    }
    else {
      int v44 = 192;
    }
    if (*(unsigned char *)(v26 + 33)) {
      int v45 = 2;
    }
    else {
      int v45 = 0;
    }
    if (*(unsigned char *)(v26 + *(int *)(v37 + 60))) {
      int v46 = v44;
    }
    else {
      int v46 = v45;
    }
    uint64_t v47 = (uint64_t *)(v26 + v43);
    __int16 v48 = *(_WORD *)(v26 + v43 + 16);
    if ((v48 & 0xFF00) == 0x200) {
      goto LABEL_31;
    }
    uint64_t v49 = *v47;
    unint64_t v50 = v47[1];
    v94[0] = v49;
    v94[1] = v50;
    sub_100013D44(v49, v50);
    unint64_t v51 = DataProtocol.copyBytes(to:)();
    if ((v51 & 0x8000000000000000) == 0 && !HIDWORD(v51))
    {
      v92[0] = v51;
      sub_1000CA4D0(v49, v50, v48);
      LOBYTE(v92[1]) = v48;
      if ((v48 & 0x100) != 0) {
        int v52 = 8;
      }
      else {
        int v52 = 12;
      }
      v46 |= v52;
LABEL_31:
      LODWORD(v72) = v46;
      memcpy((char *)v94 + 6, v74, 0x102uLL);
      memcpy(v95, v81, sizeof(v95));
      memcpy(v96, v82, sizeof(v96));
      memcpy(v97, v73, sizeof(v97));
      LODWORD(v94[0]) = *(_DWORD *)v79;
      WORD2(v94[0]) = *(_WORD *)&v79[4];
      long long v98 = *(_OWORD *)&v83[2050];
      long long v99 = v84;
      long long v100 = v85;
      long long v101 = v86;
      long long v102 = v87;
      long long v103 = v88;
      int v104 = v89;
      __int16 v105 = v90;
      char v106 = v91;
      __int16 v107 = v77;
      char v108 = v78;
      int v109 = v92[0];
      long long v110 = *(_OWORD *)&v92[1];
      long long v111 = *(_OWORD *)&v92[5];
      long long v112 = *(_OWORD *)&v92[9];
      long long v113 = *(_OWORD *)&v92[13];
      char v114 = v92[17];
      __int16 v115 = v75[1025];
      char v116 = v76;
      int v117 = v92[18];
      int v118 = v70;
      int v119 = -1;
      int v120 = v46;
      int v121 = v92[22];
      __int16 v122 = v92[23];
      type metadata accessor for apple80211_nan_subscribe_data(0);
      uint64_t v54 = v53;
      uint64_t v55 = *(void *)(v62 + 8);
      uint64_t v56 = *(void *)(v61 + 16);
      uint64_t v57 = v63;
      swift_getAssociatedTypeWitness();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      return sub_1000BF4AC(303, (uint64_t)v94, v57, v54, v55, v56, AssociatedConformanceWitness);
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned char *v34;
  char v35;
  int *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  unsigned char *v44;
  __int16 v45;
  int v46;
  __int16 v47;
  __int16 v48;
  __int16 v49;
  int v50;
  char v51;
  char v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t AssociatedConformanceWitness;
  uint64_t result;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  long long v89;
  uint64_t v90;
  unsigned char *v91;
  _WORD v92[1025];
  _WORD v93[1025];
  void v94[698];
  void v95[12];
  void v96[697];

  uint64_t v2 = __chkstk_darwin();
  char v81 = v3;
  int v82 = v0;
  int v79 = v5;
  __int16 v80 = v4;
  uint64_t v6 = v2;
  uint64_t v7 = type metadata accessor for DispatchTimeInterval();
  long long v84 = *(void *)(v7 - 8);
  long long v85 = v7;
  __chkstk_darwin();
  __int16 v83 = (uint64_t *)((char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for SHA256Digest();
  __int16 v90 = *(void *)(v9 - 8);
  char v91 = (unsigned char *)v9;
  __chkstk_darwin();
  uint64_t v11 = (char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&int v89 = type metadata accessor for SHA256();
  long long v87 = *(void *)(v89 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v88 = (char *)v94 + 6;
  LOBYTE(v94[426]) = 0;
  LOWORD(v94[434]) = 0;
  memset(v94, 0, 261);
  bzero((char *)&v94[32] + 6, 0xC49uLL);
  *(_OWORD *)((char *)&v94[431] + 7) = 0u;
  *(_OWORD *)((char *)&v94[428] + 4) = 0u;
  *(_OWORD *)((char *)&v94[430] + 4) = 0u;
  *(_OWORD *)((char *)&v94[426] + 4) = 0u;
  *(void *)((char *)&v94[434] + 4) = 0;
  BYTE4(v94[435]) = 0;
  *(void *)((char *)&v94[436] + 5) = 0;
  v94[436] = 0;
  char v78 = (char *)&v94[437] + 6;
  bzero((char *)&v94[437] + 6, 0x818uLL);
  HIBYTE(v94[425]) = *(unsigned char *)v6;
  __int16 v14 = *(void *)(v6 + 16);
  long long v86 = *(void *)(v6 + 8);
  swift_bridgeObjectRetain();
  SHA256.init()();
  uint64_t v15 = String.lowercased()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1001A5654(v15._countAndFlagsBits, (uint64_t)v15._object);
  swift_bridgeObjectRelease();
  SHA256.finalize()();
  SHA256Digest.withUnsafeBytes<A>(_:)();
  (*(void (**)(char *, unsigned char *))(v90 + 8))(v11, v91);
  Swift::String v16 = v96[0];
  unint64_t v17 = v96[1];
  (*(void (**)(char *, void))(v87 + 8))(v13, v89);
  v96[0] = v16;
  v96[1] = v17;
  uint64_t v18 = sub_100074B70();
  unint64_t v19 = v88;
  long long v87 = v18;
  DataProtocol.copyBytes(to:)();
  sub_10000C970(v16, v17);
  uint64_t KeyPath = swift_getKeyPath();
  v95[2] = v19;
  v95[3] = KeyPath;
  v95[4] = 255;
  uint64_t v21 = (uint64_t)sub_10000E350((uint64_t)sub_10000E464, (uint64_t)v95, v86, v14);
  swift_release();
  int v22 = 254;
  if (v21 < 254) {
    int v22 = v21;
  }
  if (v22 < 0)
  {
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  HIWORD(v94[32]) = v22;
  swift_getKeyPath();
  __int16 v90 = v1;
  swift_getKeyPath();
  sub_1000C22AC();
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1000C22AC();
  swift_release();
  swift_release();
  char v91 = (unsigned char *)v6;
  uint64_t v23 = NANPublish.Configuration.serviceInfo.getter();
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  sub_100013D44(v24, v26);
  uint64_t v28 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v29 = type metadata accessor for BinaryEncoder();
  unint64_t v30 = swift_allocObject();
  int v89 = xmmword_1003B2440;
  *(_OWORD *)(v30 + 16) = xmmword_1003B2440;
  *(void *)(v30 + 32) = v28;
  v96[3] = v29;
  long long v88 = (char *)sub_1000CAF84((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
  v96[4] = v88;
  v96[0] = v30;
  sub_100013D44(v25, v27);
  swift_retain();
  unint64_t v31 = v90;
  NANServiceInfo.encode(to:)(v96, v23, v25, v27);
  if (v31)
  {
    sub_100010754((uint64_t)v96);
    sub_10000C970(v25, v27);
    sub_10000C970(v25, v27);
    swift_release();
    swift_errorRelease();
    sub_10000C970(v25, v27);
    __int16 v90 = 0;
  }
  else
  {
    __int16 v90 = 0;
    sub_100010754((uint64_t)v96);
    sub_10000C970(v25, v27);
    sub_10000C970(v25, v27);
    swift_beginAccess();
    uint64_t v33 = *(void *)(v30 + 16);
    uint64_t v32 = *(void *)(v30 + 24);
    sub_100013D44(v33, v32);
    swift_release();
    sub_10000C970(v25, v27);
    sub_1000CA8B0(v33, v32, v92);
    memcpy(&v94[169], v92, 0x802uLL);
  }
  uint64_t v34 = v91;
  BYTE4(v94[436]) = v91[32];
  BYTE5(v94[425]) = v91[72] + 1;
  if (v91[73]) {
    unint64_t v35 = 1;
  }
  else {
    unint64_t v35 = 2;
  }
  BYTE6(v94[425]) = v35;
  BYTE4(v94[425]) = v91[75];
  char v36 = (int *)type metadata accessor for NANPublish.Configuration();
  LOBYTE(v94[426]) = 0x1008040100uLL >> (8 * v34[v36[19]]);
  uint64_t v37 = sub_1001ADA80();
  uint64_t v38 = v83;
  uint64_t v39 = v84;
  *__int16 v83 = 0x80000;
  uint64_t v40 = v85;
  (*(void (**)(void *, void, uint64_t))(v39 + 104))(v38, enum case for DispatchTimeInterval.microseconds(_:), v85);
  uint64_t v41 = sub_1001ADA80();
  (*(void (**)(void *, uint64_t))(v39 + 8))(v38, v40);
  if (!v41) {
    goto LABEL_50;
  }
  if (v37 == 0x8000000000000000 && v41 == -1) {
LABEL_51:
  }
    __break(1u);
  uint64_t v42 = v37 / v41;
  if (v37 / v41 < 0 || HIDWORD(v42))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v94[427] = v42 | 0xFFFFFFFF00000000;
  LODWORD(v94[428]) = v34[74];
  if (v34[76])
  {
    HIDWORD(v94[428]) = 2;
    if (v34[v36[20]] != 1) {
      goto LABEL_21;
    }
    uint64_t v43 = 50;
  }
  else
  {
    HIDWORD(v94[428]) = 0;
    if ((v34[v36[20]] & 1) == 0) {
      goto LABEL_21;
    }
    uint64_t v43 = 48;
  }
  HIDWORD(v94[428]) = v43;
LABEL_21:
  int v44 = &v34[v36[21]];
  if (*(void *)(*((void *)v44 + 2) + 16)) {
    int v45 = 580;
  }
  else {
    int v45 = 516;
  }
  int v46 = v34[77];
  if (v46) {
    uint64_t v47 = 3;
  }
  else {
    uint64_t v47 = 1;
  }
  if (v46 == 2) {
    __int16 v48 = 0;
  }
  else {
    __int16 v48 = v47;
  }
  LOWORD(v94[429]) = v48 | v45;
  uint64_t v49 = *((_WORD *)v34 + 44);
  LODWORD(v94[694]) = *((_DWORD *)v34 + 21);
  WORD2(v94[694]) = v49;
  unint64_t v50 = v44[2];
  if (v44[2])
  {
    if (v50 != 1)
    {
      LODWORD(v94[436]) = 5;
      swift_bridgeObjectRelease();
      int v52 = 1;
      goto LABEL_35;
    }
    unint64_t v50 = 5;
  }
  LODWORD(v94[436]) = v50;
  unint64_t v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  int v52 = v51 & 1;
LABEL_35:
  BYTE4(v94[435]) = v52;
  swift_bridgeObjectRetain();
  uint64_t v53 = NANGenericServiceProtocol.packetData(for:)(3);
  uint64_t v55 = v54;
  swift_bridgeObjectRelease();
  if (v55 >> 60 == 15) {
    uint64_t v56 = 0;
  }
  else {
    uint64_t v56 = v53;
  }
  if (v55 >> 60 == 15) {
    uint64_t v55 = 0xC000000000000000;
  }
  sub_100013D44(v56, v55);
  uint64_t v57 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v58 = swift_allocObject();
  *(_OWORD *)(v58 + 16) = v89;
  *(void *)(v58 + 32) = v57;
  v96[3] = v29;
  v96[4] = v88;
  v96[0] = v58;
  sub_100013D44(v56, v55);
  swift_retain();
  uint64_t v59 = v90;
  NANServiceInfo.encode(to:)(v96, 2, v56, v55);
  sub_100010754((uint64_t)v96);
  sub_10000C970(v56, v55);
  sub_10000C970(v56, v55);
  if (v59)
  {
    swift_release();
    swift_errorRelease();
    sub_10000C970(v56, v55);
  }
  else
  {
    swift_beginAccess();
    uint64_t v60 = v44;
    uint64_t v61 = *(void *)(v58 + 16);
    uint64_t v62 = *(void *)(v58 + 24);
    sub_100013D44(v61, v62);
    swift_release();
    sub_10000C970(v56, v55);
    uint64_t v63 = v61;
    int v44 = v60;
    sub_1000CA8B0(v63, v62, v93);
    memcpy(v78, v93, 0x802uLL);
  }
  uint64_t v64 = *((void *)v44 + 2);
  if (*(void *)(v64 + 16))
  {
    char v91 = 0;
    uint64_t v65 = *(void *)(v64 + 40);
    char v66 = *(void *)(v64 + 48);
    uint64_t v67 = *(void *)(v64 + 56);
    uint64_t v68 = *(void *)(v64 + 64);
    unint64_t v69 = *(void *)(v64 + 80);
    BYTE6(v94[429]) = *(unsigned char *)(v64 + 32) + 1;
    v96[0] = v65;
    v96[1] = v66;
    sub_100013D44(v65, v66);
    sub_100038004(v67, v68);
    __int16 v90 = v69;
    swift_bridgeObjectRetain();
    DataProtocol.copyBytes(to:)();
    if (v68 >> 60 == 15)
    {
      sub_10000C970(v65, v66);
      sub_10000C95C(v67, v68);
      swift_bridgeObjectRelease();
    }
    else
    {
      v96[0] = v67;
      v96[1] = v68;
      sub_100013D44(v67, v68);
      DataProtocol.copyBytes(to:)();
      sub_10000C970(v65, v66);
      sub_10000C95C(v67, v68);
      swift_bridgeObjectRelease();
      sub_10000C95C(v67, v68);
    }
  }
  else
  {
    BYTE6(v94[429]) = 0;
  }
  memcpy(v96, v94, sizeof(v96));
  type metadata accessor for apple80211_nan_publish_data(0);
  uint64_t v71 = v70;
  uint64_t v72 = *(void *)(v80 + 8);
  int v73 = *(void *)(v79 + 16);
  long long v74 = v81;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return sub_1000BF4AC(300, (uint64_t)v96, v74, v71, v72, v73, AssociatedConformanceWitness);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int32x2_t v13;
  int32x2_t v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  char v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t AssociatedConformanceWitness;
  uint64_t v46;
  void *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _WORD v58[1025];
  void v59[272];
  void v60[269];

  uint64_t v2 = __chkstk_darwin();
  uint64_t v53 = v1;
  uint64_t v54 = v3;
  uint64_t v56 = v4;
  uint64_t v57 = v0;
  uint64_t v55 = v5;
  uint64_t v6 = v2;
  uint64_t v7 = type metadata accessor for SHA256Digest();
  unint64_t v51 = *(void *)(v7 - 8);
  int v52 = v7;
  __chkstk_darwin();
  uint64_t v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v50 = type metadata accessor for SHA256();
  uint64_t v10 = *(void *)(v50 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  BYTE1(v59[0]) = 0;
  __int16 v48 = (char *)&v59[1] + 2;
  uint64_t v49 = (char *)v59 + 4;
  WORD2(v59[263]) = 0;
  HIDWORD(v59[0]) = 0;
  *(_DWORD *)((char *)v59 + 7) = 0;
  uint64_t v47 = &v59[3];
  bzero(&v59[3], 0x823uLL);
  LOBYTE(v59[265]) = 0;
  v59[264] = 0;
  *(void *)((char *)&v59[266] + 4) = 0;
  *(void *)((char *)&v59[267] + 4) = 0;
  *(void *)((char *)&v59[265] + 4) = 0;
  HIDWORD(v59[268]) = 0;
  LOBYTE(v59[0]) = *(unsigned char *)v6;
  BYTE2(v59[0]) = *(unsigned char *)(v6 + 24);
  uint64_t v13 = *(int32x2_t *)(v6 + 25);
  *(_WORD *)((char *)&v59[2] + 5) = *(_WORD *)(v6 + 29);
  __int16 v14 = *(int32x2_t *)(v6 + 3);
  *(_WORD *)((char *)&v59[1] + 3) = *(_WORD *)(v6 + 1);
  *(int32x2_t *)((char *)&v59[1] + 5) = vzip1_s32(v14, v13);
  BYTE3(v59[0]) = *(unsigned char *)(v6 + 7);
  swift_bridgeObjectRetain();
  SHA256.init()();
  uint64_t v15 = String.lowercased()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  Swift::String v16 = v53;
  sub_1001A5654(v15._countAndFlagsBits, (uint64_t)v15._object);
  swift_bridgeObjectRelease();
  SHA256.finalize()();
  SHA256Digest.withUnsafeBytes<A>(_:)();
  uint64_t v53 = v16;
  (*(void (**)(char *, unint64_t))(v51 + 8))(v9, v52);
  unint64_t v17 = v60[0];
  uint64_t v18 = v60[1];
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v50);
  v60[0] = v17;
  v60[1] = v18;
  int v52 = sub_100074B70();
  DataProtocol.copyBytes(to:)();
  sub_10000C970(v17, v18);
  unint64_t v19 = *(unsigned __int8 *)(v6 + 32);
  if (*(unsigned char *)(v6 + 32))
  {
    if (v19 != 1)
    {
      HIDWORD(v59[265]) = 5;
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    unint64_t v19 = 5;
  }
  HIDWORD(v59[265]) = v19;
  unint64_t v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t v21 = 0;
  if (v20) {
LABEL_7:
  }
    uint64_t v21 = 1;
  LOBYTE(v59[265]) = v21;
  swift_bridgeObjectRetain();
  int v22 = NANGenericServiceProtocol.packetData(for:)(3);
  uint64_t v24 = v23;
  swift_bridgeObjectRelease();
  if (v24 >> 60 == 15) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = v22;
  }
  if (v24 >> 60 == 15) {
    uint64_t v26 = 0xC000000000000000;
  }
  else {
    uint64_t v26 = v24;
  }
  sub_100013D44(v25, v26);
  uint64_t v27 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v28 = type metadata accessor for BinaryEncoder();
  unint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_1003B2440;
  *(void *)(v29 + 32) = v27;
  v60[3] = v28;
  v60[4] = sub_1000CAF84((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
  v60[0] = v29;
  sub_100013D44(v25, v26);
  swift_retain();
  unint64_t v30 = v53;
  NANServiceInfo.encode(to:)(v60, 2, v25, v26);
  sub_100010754((uint64_t)v60);
  sub_10000C970(v25, v26);
  sub_10000C970(v25, v26);
  if (v30)
  {
    swift_release();
    swift_errorRelease();
    sub_10000C970(v25, v26);
  }
  else
  {
    swift_beginAccess();
    unint64_t v31 = *(void *)(v29 + 16);
    uint64_t v32 = *(void *)(v29 + 24);
    sub_100013D44(v31, v32);
    swift_release();
    sub_10000C970(v25, v26);
    sub_1000CA8B0(v31, v32, v58);
    memcpy(v47, v58, 0x802uLL);
  }
  uint64_t v33 = *(void *)(v6 + 96);
  if (v33 == 1)
  {
    BYTE2(v59[259]) = 0;
  }
  else
  {
    uint64_t v53 = 0;
    uint64_t v34 = *(void *)(v6 + 48);
    unint64_t v35 = *(void *)(v6 + 56);
    uint64_t v37 = *(void *)(v6 + 64);
    char v36 = *(void *)(v6 + 72);
    uint64_t v38 = *(void *)(v6 + 80);
    unint64_t v51 = *(void *)(v6 + 88);
    uint64_t v49 = (char *)&v59[259] + 3;
    unint64_t v50 = v34;
    BYTE2(v59[259]) = v34 + 1;
    v60[0] = v35;
    v60[1] = v37;
    sub_100013D44(v35, v37);
    sub_100038004(v36, v38);
    swift_bridgeObjectRetain();
    DataProtocol.copyBytes(to:)();
    if (v38 >> 60 == 15)
    {
      sub_1000CAB20(v50, v35, v37, v36, v38, v51, v33);
    }
    else
    {
      uint64_t v49 = (char *)&v59[267];
      v60[0] = v36;
      v60[1] = v38;
      sub_100013D44(v36, v38);
      DataProtocol.copyBytes(to:)();
      sub_1000CAB20(v50, v35, v37, v36, v38, v51, v33);
      sub_10000C95C(v36, v38);
    }
  }
  memcpy(v60, v59, sizeof(v60));
  type metadata accessor for apple80211_nan_dp_request(0);
  uint64_t v40 = v39;
  uint64_t v41 = *(void *)(v55 + 8);
  uint64_t v42 = *(void *)(v54 + 16);
  uint64_t v43 = v56;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return sub_1000BF4AC(315, (uint64_t)v60, v43, v40, v41, v42, AssociatedConformanceWitness);
}

uint64_t sub_1000B677C()
{
  return sub_1000B67A0();
}

uint64_t sub_1000B67A0()
{
  uint64_t v79 = v1;
  uint64_t v69 = v0;
  uint64_t v2 = __chkstk_darwin();
  uint64_t v3 = type metadata accessor for DispatchTimeInterval();
  uint64_t v71 = *(void *)(v3 - 8);
  uint64_t v72 = v3;
  __chkstk_darwin();
  uint64_t v70 = (void **)((char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for SHA256Digest();
  uint64_t v77 = *(void *)(v5 - 8);
  uint64_t v78 = v5;
  __chkstk_darwin();
  uint64_t v7 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v76 = type metadata accessor for SHA256();
  unint64_t v74 = *(void *)(v76 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v75 = (char *)v82 + 6;
  LOBYTE(v82[426]) = 0;
  LOWORD(v82[434]) = 0;
  memset(v82, 0, 261);
  bzero((char *)&v82[32] + 6, 0xC49uLL);
  *(_OWORD *)((char *)&v82[431] + 7) = 0u;
  *(_OWORD *)((char *)&v82[428] + 4) = 0u;
  *(_OWORD *)((char *)&v82[430] + 4) = 0u;
  *(_OWORD *)((char *)&v82[426] + 4) = 0u;
  *(void *)((char *)&v82[434] + 4) = 0;
  BYTE4(v82[435]) = 0;
  *(void *)((char *)&v82[436] + 5) = 0;
  v82[436] = 0;
  uint64_t v68 = (char *)&v82[437] + 6;
  bzero((char *)&v82[437] + 6, 0x818uLL);
  HIBYTE(v82[425]) = *(unsigned char *)v2;
  uint64_t v10 = *(void *)(v2 + 16);
  uint64_t v73 = *(void *)(v2 + 8);
  swift_bridgeObjectRetain();
  SHA256.init()();
  Swift::String v11 = String.lowercased()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v12 = v79;
  sub_1001A5654(v11._countAndFlagsBits, (uint64_t)v11._object);
  swift_bridgeObjectRelease();
  SHA256.finalize()();
  SHA256Digest.withUnsafeBytes<A>(_:)();
  (*(void (**)(char *, uint64_t))(v77 + 8))(v7, v78);
  uint64_t v13 = v84[0];
  unint64_t v14 = v84[1];
  (*(void (**)(char *, void))(v74 + 8))(v9, v76);
  v84[0] = v13;
  v84[1] = v14;
  unint64_t v15 = sub_100074B70();
  Swift::String v16 = v75;
  unint64_t v74 = v15;
  DataProtocol.copyBytes(to:)();
  sub_10000C970(v13, v14);
  uint64_t KeyPath = swift_getKeyPath();
  v83[2] = v16;
  v83[3] = KeyPath;
  v83[4] = 255;
  uint64_t v18 = (uint64_t)sub_10000E350((uint64_t)sub_10000E464, (uint64_t)v83, v73, v10);
  swift_release();
  uint64_t v19 = 254;
  if (v18 < 254) {
    uint64_t v19 = v18;
  }
  if (v19 < 0)
  {
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  HIWORD(v82[32]) = v19;
  swift_getKeyPath();
  uint64_t v79 = v12;
  swift_getKeyPath();
  sub_1000C22AC();
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1000C22AC();
  swift_release();
  swift_release();
  LODWORD(v78) = NANPublish.Configuration.serviceInfo.getter();
  uint64_t v21 = v20;
  unint64_t v23 = v22;
  sub_100013D44(v20, v22);
  unint64_t v24 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v25 = type metadata accessor for BinaryEncoder();
  uint64_t v26 = swift_allocObject();
  long long v76 = xmmword_1003B2440;
  *(_OWORD *)(v26 + 16) = xmmword_1003B2440;
  *(void *)(v26 + 32) = v24;
  uint64_t v77 = v25;
  v84[3] = v25;
  long long v75 = (char *)sub_1000CAF84((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
  v84[4] = v75;
  v84[0] = v26;
  sub_100013D44(v21, v23);
  swift_retain();
  uint64_t v27 = v79;
  NANServiceInfo.encode(to:)(v84, v78, v21, v23);
  if (v27)
  {
    sub_100010754((uint64_t)v84);
    sub_10000C970(v21, v23);
    sub_10000C970(v21, v23);
    swift_release();
    swift_errorRelease();
    sub_10000C970(v21, v23);
    uint64_t v79 = 0;
  }
  else
  {
    uint64_t v79 = 0;
    sub_100010754((uint64_t)v84);
    sub_10000C970(v21, v23);
    sub_10000C970(v21, v23);
    swift_beginAccess();
    uint64_t v28 = *(void *)(v26 + 16);
    unint64_t v29 = *(void *)(v26 + 24);
    sub_100013D44(v28, v29);
    swift_release();
    sub_10000C970(v21, v23);
    sub_1000CA8B0(v28, v29, v80);
    memcpy(&v82[169], v80, 0x802uLL);
  }
  BYTE4(v82[436]) = *(unsigned char *)(v2 + 32);
  BYTE5(v82[425]) = *(unsigned char *)(v2 + 72) + 1;
  if (*(unsigned char *)(v2 + 73)) {
    char v30 = 1;
  }
  else {
    char v30 = 2;
  }
  BYTE6(v82[425]) = v30;
  BYTE4(v82[425]) = *(unsigned char *)(v2 + 75);
  unint64_t v31 = (int *)type metadata accessor for NANPublish.Configuration();
  LOBYTE(v82[426]) = 0x1008040100uLL >> (8 * *(unsigned char *)(v2 + v31[19]));
  uint64_t v32 = sub_1001ADA80();
  uint64_t v33 = v70;
  uint64_t v34 = v71;
  *uint64_t v70 = 0x80000;
  uint64_t v35 = v72;
  (*(void (**)(void *, void, uint64_t))(v34 + 104))(v33, enum case for DispatchTimeInterval.microseconds(_:), v72);
  uint64_t v36 = sub_1001ADA80();
  (*(void (**)(void *, uint64_t))(v34 + 8))(v33, v35);
  if (!v36) {
    goto LABEL_51;
  }
  if (v32 == 0x8000000000000000 && v36 == -1) {
LABEL_52:
  }
    __break(1u);
  unint64_t v37 = v32 / v36;
  if (v32 / v36 < 0 || HIDWORD(v37))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v82[427] = v37 | 0xFFFFFFFF00000000;
  LODWORD(v82[428]) = *(unsigned __int8 *)(v2 + 74);
  if (*(unsigned char *)(v2 + 76) == 1)
  {
    HIDWORD(v82[428]) = 2;
    if ((*(unsigned char *)(v2 + v31[20]) & 1) == 0) {
      goto LABEL_21;
    }
    int v38 = 50;
  }
  else
  {
    HIDWORD(v82[428]) = 0;
    if (*(unsigned char *)(v2 + v31[20]) != 1) {
      goto LABEL_21;
    }
    int v38 = 48;
  }
  HIDWORD(v82[428]) = v38;
LABEL_21:
  uint64_t v39 = v2 + v31[21];
  if (*(void *)(*(void *)(v39 + 16) + 16)) {
    __int16 v40 = 580;
  }
  else {
    __int16 v40 = 516;
  }
  int v41 = *(unsigned __int8 *)(v2 + 77);
  if (v41) {
    __int16 v42 = 3;
  }
  else {
    __int16 v42 = 1;
  }
  if (v41 == 2) {
    __int16 v43 = 0;
  }
  else {
    __int16 v43 = v42;
  }
  LOWORD(v82[429]) = v43 | v40;
  __int16 v44 = *(_WORD *)(v2 + 88);
  LODWORD(v82[694]) = *(_DWORD *)(v2 + 84);
  WORD2(v82[694]) = v44;
  int v45 = *(unsigned __int8 *)(v39 + 2);
  if (*(unsigned char *)(v39 + 2))
  {
    if (v45 != 1)
    {
      LODWORD(v82[436]) = 5;
      swift_bridgeObjectRelease();
      char v47 = 1;
      goto LABEL_35;
    }
    int v45 = 5;
  }
  LODWORD(v82[436]) = v45;
  char v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  char v47 = v46 & 1;
LABEL_35:
  BYTE4(v82[435]) = v47;
  swift_bridgeObjectRetain();
  uint64_t v48 = NANGenericServiceProtocol.packetData(for:)(3);
  unint64_t v50 = v49;
  swift_bridgeObjectRelease();
  if (v50 >> 60 == 15) {
    uint64_t v51 = 0;
  }
  else {
    uint64_t v51 = v48;
  }
  if (v50 >> 60 == 15) {
    unint64_t v52 = 0xC000000000000000;
  }
  else {
    unint64_t v52 = v50;
  }
  sub_100013D44(v51, v52);
  unint64_t v53 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v54 = v77;
  uint64_t v55 = swift_allocObject();
  *(_OWORD *)(v55 + 16) = v76;
  *(void *)(v55 + 32) = v53;
  v84[3] = v54;
  v84[4] = v75;
  v84[0] = v55;
  sub_100013D44(v51, v52);
  swift_retain();
  uint64_t v56 = v79;
  NANServiceInfo.encode(to:)(v84, 2, v51, v52);
  sub_100010754((uint64_t)v84);
  sub_10000C970(v51, v52);
  sub_10000C970(v51, v52);
  if (v56)
  {
    swift_release();
    swift_errorRelease();
    sub_10000C970(v51, v52);
  }
  else
  {
    swift_beginAccess();
    uint64_t v57 = *(void *)(v55 + 16);
    unint64_t v58 = *(void *)(v55 + 24);
    sub_100013D44(v57, v58);
    swift_release();
    sub_10000C970(v51, v52);
    sub_1000CA8B0(v57, v58, v81);
    memcpy(v68, v81, 0x802uLL);
  }
  uint64_t v59 = *(void *)(v39 + 16);
  if (*(void *)(v59 + 16))
  {
    uint64_t v79 = 0;
    uint64_t v60 = *(void *)(v59 + 40);
    unint64_t v61 = *(void *)(v59 + 48);
    uint64_t v62 = *(void *)(v59 + 56);
    unint64_t v63 = *(void *)(v59 + 64);
    uint64_t v64 = *(void *)(v59 + 80);
    BYTE6(v82[429]) = *(unsigned char *)(v59 + 32) + 1;
    v84[0] = v60;
    v84[1] = v61;
    sub_100013D44(v60, v61);
    sub_100038004(v62, v63);
    uint64_t v78 = v64;
    swift_bridgeObjectRetain();
    DataProtocol.copyBytes(to:)();
    if (v63 >> 60 == 15)
    {
      sub_10000C970(v60, v61);
      sub_10000C95C(v62, v63);
      swift_bridgeObjectRelease();
    }
    else
    {
      v84[0] = v62;
      v84[1] = v63;
      sub_100013D44(v62, v63);
      DataProtocol.copyBytes(to:)();
      sub_10000C970(v60, v61);
      sub_10000C95C(v62, v63);
      swift_bridgeObjectRelease();
      sub_10000C95C(v62, v63);
    }
  }
  else
  {
    BYTE6(v82[429]) = 0;
  }
  memcpy(v84, v82, sizeof(v84));
  uint64_t v65 = *(void *)(v69 + 16);
  uint64_t v66 = *(void *)(v69 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.setRequest(requestType:data:on:)(0x12CuLL, (uint64_t)v84, (uint64_t)v85, 0, v65, v66);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1000B8104()
{
  return sub_1000B8128();
}

uint64_t sub_1000B8128()
{
  uint64_t v44 = v1;
  uint64_t v45 = v0;
  uint64_t v2 = __chkstk_darwin();
  unint64_t v43 = type metadata accessor for SHA256Digest();
  uint64_t v3 = *(void *)(v43 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for SHA256();
  uint64_t v6 = *(void *)(v42 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  BYTE1(v47[0]) = 0;
  __int16 v40 = (char *)&v47[1] + 2;
  uint64_t v41 = (uint64_t)v47 + 4;
  WORD2(v47[263]) = 0;
  HIDWORD(v47[0]) = 0;
  *(_DWORD *)((char *)v47 + 7) = 0;
  uint64_t v39 = &v47[3];
  bzero(&v47[3], 0x823uLL);
  LOBYTE(v47[265]) = 0;
  v47[264] = 0;
  *(void *)((char *)&v47[266] + 4) = 0;
  *(void *)((char *)&v47[267] + 4) = 0;
  *(void *)((char *)&v47[265] + 4) = 0;
  HIDWORD(v47[268]) = 0;
  LOBYTE(v47[0]) = *(unsigned char *)v2;
  BYTE2(v47[0]) = *(unsigned char *)(v2 + 24);
  int32x2_t v9 = *(int32x2_t *)(v2 + 25);
  *(_WORD *)((char *)&v47[2] + 5) = *(_WORD *)(v2 + 29);
  int32x2_t v10 = *(int32x2_t *)(v2 + 3);
  *(_WORD *)((char *)&v47[1] + 3) = *(_WORD *)(v2 + 1);
  *(int32x2_t *)((char *)&v47[1] + 5) = vzip1_s32(v10, v9);
  BYTE3(v47[0]) = *(unsigned char *)(v2 + 7);
  swift_bridgeObjectRetain();
  SHA256.init()();
  Swift::String v11 = String.lowercased()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v12 = v44;
  sub_1001A5654(v11._countAndFlagsBits, (uint64_t)v11._object);
  swift_bridgeObjectRelease();
  SHA256.finalize()();
  SHA256Digest.withUnsafeBytes<A>(_:)();
  uint64_t v44 = v12;
  (*(void (**)(char *, unint64_t))(v3 + 8))(v5, v43);
  uint64_t v13 = v48[0];
  unint64_t v14 = v48[1];
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v42);
  v48[0] = v13;
  v48[1] = v14;
  unint64_t v43 = sub_100074B70();
  DataProtocol.copyBytes(to:)();
  sub_10000C970(v13, v14);
  int v15 = *(unsigned __int8 *)(v2 + 32);
  if (!*(unsigned char *)(v2 + 32)) {
    goto LABEL_4;
  }
  if (v15 == 1)
  {
    int v15 = 5;
LABEL_4:
    HIDWORD(v47[265]) = v15;
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v17 = v16 & 1;
    goto LABEL_6;
  }
  HIDWORD(v47[265]) = 5;
  swift_bridgeObjectRelease();
  char v17 = 1;
LABEL_6:
  LOBYTE(v47[265]) = v17;
  swift_bridgeObjectRetain();
  uint64_t v18 = NANGenericServiceProtocol.packetData(for:)(3);
  unint64_t v20 = v19;
  swift_bridgeObjectRelease();
  if (v20 >> 60 == 15) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = v18;
  }
  if (v20 >> 60 == 15) {
    unint64_t v22 = 0xC000000000000000;
  }
  else {
    unint64_t v22 = v20;
  }
  sub_100013D44(v21, v22);
  unint64_t v23 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v24 = type metadata accessor for BinaryEncoder();
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_1003B2440;
  *(void *)(v25 + 32) = v23;
  v48[3] = v24;
  v48[4] = sub_1000CAF84((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
  v48[0] = v25;
  sub_100013D44(v21, v22);
  swift_retain();
  uint64_t v26 = v44;
  NANServiceInfo.encode(to:)(v48, 2, v21, v22);
  sub_100010754((uint64_t)v48);
  sub_10000C970(v21, v22);
  sub_10000C970(v21, v22);
  if (v26)
  {
    swift_release();
    swift_errorRelease();
    sub_10000C970(v21, v22);
  }
  else
  {
    swift_beginAccess();
    uint64_t v27 = *(void *)(v25 + 16);
    unint64_t v28 = *(void *)(v25 + 24);
    sub_100013D44(v27, v28);
    swift_release();
    sub_10000C970(v21, v22);
    sub_1000CA8B0(v27, v28, v46);
    memcpy(v39, v46, 0x802uLL);
  }
  uint64_t v29 = *(void *)(v2 + 96);
  if (v29 == 1)
  {
    BYTE2(v47[259]) = 0;
  }
  else
  {
    uint64_t v44 = 0;
    uint64_t v30 = *(void *)(v2 + 48);
    uint64_t v31 = *(void *)(v2 + 56);
    unint64_t v33 = *(void *)(v2 + 64);
    uint64_t v32 = *(void *)(v2 + 72);
    unint64_t v34 = *(void *)(v2 + 80);
    uint64_t v42 = *(void *)(v2 + 88);
    __int16 v40 = (char *)&v47[259] + 3;
    uint64_t v41 = v30;
    BYTE2(v47[259]) = v30 + 1;
    v48[0] = v31;
    v48[1] = v33;
    sub_100013D44(v31, v33);
    sub_100038004(v32, v34);
    swift_bridgeObjectRetain();
    DataProtocol.copyBytes(to:)();
    if (v34 >> 60 == 15)
    {
      sub_1000CAB20(v41, v31, v33, v32, v34, v42, v29);
    }
    else
    {
      __int16 v40 = (char *)&v47[267];
      v48[0] = v32;
      v48[1] = v34;
      sub_100013D44(v32, v34);
      DataProtocol.copyBytes(to:)();
      sub_1000CAB20(v41, v31, v33, v32, v34, v42, v29);
      sub_10000C95C(v32, v34);
    }
  }
  memcpy(v48, v47, sizeof(v48));
  uint64_t v35 = *(void *)(v45 + 16);
  uint64_t v36 = *(void *)(v45 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.setRequest(requestType:data:on:)(0x13BuLL, (uint64_t)v48, (uint64_t)&v49, 0, v35, v36);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t BroadcomDriver<>.update(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 184))(a1, a2, a4);
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 192))(a1, a2, a4);
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 200))(a1, a2, a4);
}

uint64_t sub_1000B8FC4(unsigned __int8 a1, uint64_t a2)
{
  return sub_100064574(0x13EuLL, a1, a2 & 0xFFFFFFFFFFFFLL, 0);
}

uint64_t IO80211Driver<>.terminate(datapathID:initiatorAddress:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v14[0] = a1;
  v14[1] = 0;
  int v15 = 0;
  __int16 v16 = a2;
  char v17 = BYTE2(a2);
  char v18 = BYTE3(a2);
  char v19 = BYTE4(a2);
  char v20 = BYTE5(a2);
  type metadata accessor for apple80211_nan_dp_terminate(0);
  uint64_t v9 = v8;
  int v21 = 0;
  __int16 v22 = 0;
  uint64_t v10 = *(void *)(a4 + 8);
  uint64_t v11 = *(void *)(a5 + 16);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return sub_1000BF4AC(318, (uint64_t)v14, a3, v9, v10, v11, AssociatedConformanceWitness);
}

uint64_t sub_1000B90F4(char a1)
{
  return sub_100064248(0x132uLL, a1);
}

uint64_t IO80211Driver<>.terminate(subscribeID:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000B91AC(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for apple80211_nan_cancel_subscribe_data, 306);
}

uint64_t sub_1000B9150(char a1)
{
  return sub_100064248(0x12DuLL, a1);
}

uint64_t IO80211Driver<>.terminate(publishID:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000B91AC(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for apple80211_nan_cancel_publish_data, 301);
}

uint64_t sub_1000B91AC(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t a6)
{
  char v15 = a1;
  uint64_t v10 = a5(0);
  uint64_t v11 = *(void *)(a3 + 8);
  uint64_t v12 = *(void *)(a4 + 16);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return sub_1000BF4AC(a6, (uint64_t)&v15, a2, v10, v11, v12, AssociatedConformanceWitness);
}

uint64_t sub_1000B9270(uint64_t a1, unint64_t a2, char a3, unint64_t a4, char a5)
{
  char v6 = a4;
  unint64_t v10 = a4 >> 8;
  unint64_t v11 = a4 >> 16;
  unint64_t v15 = a4 >> 24;
  unint64_t v12 = HIDWORD(a4);
  unint64_t v13 = a4 >> 40;
  sub_100013D44(a1, a2);
  sub_1000CA8B0(a1, a2, v24);
  v16[0] = a3;
  v16[1] = a5;
  __int16 v17 = 0;
  char v18 = v6;
  char v19 = v10;
  char v20 = v11;
  char v21 = v15;
  char v22 = v12;
  char v23 = v13;
  return sub_10006469C(0x133uLL, v16);
}

uint64_t IO80211Driver<>.transmit(followUp:for:to:with:)(uint64_t a1, unint64_t a2, char a3, unint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10 = a4;
  unint64_t v14 = a4 >> 8;
  unint64_t v15 = a4 >> 16;
  unint64_t v16 = a4 >> 24;
  unint64_t v23 = HIDWORD(a4);
  unint64_t v24 = a4 >> 40;
  sub_100013D44(a1, a2);
  sub_1000CA8B0(a1, a2, v35);
  v27[0] = a3;
  v27[1] = a5;
  __int16 v28 = 0;
  char v29 = v10;
  char v30 = v14;
  char v31 = v15;
  char v32 = v16;
  char v33 = v23;
  char v34 = v24;
  type metadata accessor for apple80211_nan_follow_up_transmit_data(0);
  uint64_t v18 = v17;
  uint64_t v19 = *(void *)(a7 + 8);
  uint64_t v20 = *(void *)(a8 + 16);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return sub_1000BF4AC(307, (uint64_t)v27, a6, v18, v19, v20, AssociatedConformanceWitness);
}

uint64_t sub_1000B947C(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, unint64_t a9, unint64_t a10, unint64_t a11)
{
  return sub_1000B94C4(a1, a2, a3, a4, a5 & 0xFFFFFFFFFFFFLL, a6 & 0xFFFFFFFFFFFFLL, a7 & 0xFFFFFFFFFFFFLL, a8, a9, a10, a11);
}

uint64_t sub_1000B94C4(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, char a8, unint64_t a9, unint64_t a10, unint64_t a11)
{
  char v11 = a7;
  char v12 = a6;
  char v13 = a5;
  unint64_t v58 = a5 >> 8;
  unint64_t v59 = a5 >> 16;
  unint64_t v61 = a5 >> 24;
  unint64_t v63 = HIDWORD(a5);
  unint64_t v69 = a5 >> 40;
  unint64_t v14 = a9;
  unint64_t v15 = a6 >> 8;
  unint64_t v16 = a6 >> 16;
  unint64_t v17 = a6 >> 24;
  unint64_t v18 = HIDWORD(a6);
  unint64_t v19 = a6 >> 40;
  unint64_t v60 = a7 >> 8;
  unint64_t v62 = a7 >> 16;
  unint64_t v71 = HIDWORD(a7);
  unint64_t v65 = a7 >> 40;
  unint64_t v67 = a7 >> 24;
  bzero(v77, 0x3C4uLL);
  LOBYTE(v75) = v12;
  BYTE1(v75) = v15;
  BYTE2(v75) = v16;
  BYTE3(v75) = v17;
  BYTE4(v75) = v18;
  BYTE5(v75) = v19;
  BYTE6(v75) = v13;
  BYTE7(v75) = v58;
  BYTE8(v75) = v59;
  BYTE9(v75) = v61;
  BYTE10(v75) = v63;
  BYTE11(v75) = v69;
  BYTE12(v75) = v11;
  BYTE13(v75) = v60;
  BYTE14(v75) = v62;
  HIBYTE(v75) = v67;
  LOBYTE(v76) = v71;
  HIBYTE(v76) = v65;
  unint64_t v20 = a10 - a9;
  if (a10 < a9) {
    goto LABEL_30;
  }
  char v21 = _swiftEmptyArrayStorage;
  if (v20 >= 0x80)
  {
    unint64_t v30 = v20 >> 7;
    uint64_t v79 = _swiftEmptyArrayStorage;
    sub_1000834E4(0, v20 >> 7, 0);
    unint64_t v31 = a11;
    char v21 = v79;
    unint64_t v32 = a9 >> 7;
    unint64_t v33 = v79[2];
    unint64_t v34 = HIBYTE(a11);
    unint64_t v35 = HIWORD(a11);
    unint64_t v36 = a11 >> 40;
    unint64_t v37 = HIDWORD(a11);
    unint64_t v38 = a11 >> 24;
    while (1)
    {
      char v83 = v31;
      __int16 v84 = *(_WORD *)((char *)&a11 + 1);
      char v85 = v38;
      char v86 = v37;
      char v87 = v36;
      char v88 = v35;
      char v89 = v34;
      char v39 = *(&v83 + v32);
      unint64_t v40 = v21[3];
      uint64_t v79 = v21;
      if (v33 >= v40 >> 1)
      {
        unint64_t v72 = v34;
        unint64_t v73 = v31;
        unint64_t v68 = v36;
        unint64_t v70 = v35;
        unint64_t v64 = v38;
        unint64_t v66 = v37;
        sub_1000834E4(v40 > 1, v33 + 1, 1);
        unint64_t v38 = v64;
        unint64_t v37 = v66;
        unint64_t v36 = v68;
        unint64_t v35 = v70;
        unint64_t v34 = v72;
        unint64_t v31 = v73;
        char v21 = v79;
      }
      v21[2] = v33 + 1;
      *((unsigned char *)v21 + v33 + 32) = v39;
      if (v14 >= 0xFFFFFFFFFFFFFF80) {
        break;
      }
      v14 += 128;
      ++v32;
      ++v33;
      if (!--v30) {
        goto LABEL_3;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
  }
LABEL_3:
  uint64_t v22 = sub_1001265EC((uint64_t)v21);
  unint64_t v24 = v23;
  swift_bridgeObjectRelease();
  uint64_t v25 = sub_1002579A0(v22, v24);
  uint64_t result = sub_10000C970(v22, v24);
  if (!v57)
  {
    unint64_t v74 = (void *)v25;
    unint64_t v27 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v28 = type metadata accessor for BinaryEncoder();
    uint64_t v29 = swift_allocObject();
    *(_OWORD *)(v29 + 16) = xmmword_1003B2440;
    *(void *)(v29 + 32) = v27;
    *(void *)char v81 = v28;
    *(void *)&v81[8] = sub_1000CAF84((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
    uint64_t v79 = (void *)v29;
    sub_10006EAC4(a2);
    swift_retain();
    IEEE80211Frame.Management.ActionFrame.encode(to:)(&v79, a1, a2);
    sub_100010754((uint64_t)&v79);
    sub_10006DE90(a2);
    swift_beginAccess();
    uint64_t v41 = *(void *)(v29 + 16);
    unint64_t v42 = *(void *)(v29 + 24);
    sub_100013D44(v41, v42);
    swift_release();
    switch(v42 >> 62)
    {
      case 1uLL:
        int v46 = HIDWORD(v41) - v41;
        if (__OFSUB__(HIDWORD(v41), v41)) {
          goto LABEL_33;
        }
        if (v46 >= 960) {
          int v46 = 960;
        }
        uint64_t v44 = v46;
        uint64_t v43 = (int)v41;
        if (v41 >> 32 >= (int)v41) {
          goto LABEL_24;
        }
        goto LABEL_31;
      case 2uLL:
        uint64_t v43 = *(void *)(v41 + 16);
        uint64_t v45 = *(void *)(v41 + 24);
        if (__OFSUB__(v45, v43)) {
          goto LABEL_32;
        }
        if (v45 - v43 >= 960) {
          uint64_t v44 = 960;
        }
        else {
          uint64_t v44 = v45 - v43;
        }
LABEL_18:
        if (v45 < v43) {
          goto LABEL_31;
        }
LABEL_24:
        if (v44 < v43) {
          goto LABEL_31;
        }
        uint64_t v47 = Data._Representation.subscript.getter();
        unint64_t v49 = v48;
        uint64_t v79 = (void *)v47;
        *(void *)&long long v80 = v48;
        sub_100074B70();
        unint64_t v50 = DataProtocol.copyBytes(to:)();
        sub_10000C970(v47, v49);
        if ((v50 & 0x8000000000000000) != 0 || v50 >= 0x10000)
        {
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x1000B9B28);
        }
        uint64_t v79 = v74;
        long long v80 = v75;
        *(_WORD *)char v81 = v76;
        v81[2] = a8;
        *(_WORD *)&v81[3] = 3000;
        *(_DWORD *)&v81[5] = a1 == 4;
        *(_WORD *)&v81[9] = v77[0];
        *(_WORD *)&v81[11] = v50;
        memcpy(&v81[13], v78, 0x3C0uLL);
        uint64_t v51 = *(void *)(v53 + 16);
        uint64_t v52 = *(void *)(v53 + 24);
        swift_retain();
        swift_bridgeObjectRetain();
        AppleDevice.setRequest(requestType:data:on:)(0x16EuLL, (uint64_t)&v79, (uint64_t)v82, 0, v51, v52);
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t result = sub_10000C970(v41, v42);
        break;
      case 3uLL:
        uint64_t v44 = 0;
        uint64_t v45 = 0;
        uint64_t v43 = 0;
        goto LABEL_18;
      default:
        uint64_t v43 = 0;
        uint64_t v44 = BYTE6(v42);
        goto LABEL_24;
    }
  }
  return result;
}

uint64_t IO80211Driver<>.transmit(outOfBoundActionFrame:from:to:on:mapID:using:)(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, char a8, unint64_t a9, unint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  char v14 = a7;
  char v15 = a6;
  char v16 = a5;
  unint64_t v63 = a5 >> 8;
  unint64_t v64 = a5 >> 16;
  unint64_t v66 = a5 >> 24;
  unint64_t v68 = HIDWORD(a5);
  unint64_t v74 = a5 >> 40;
  unint64_t v17 = a9;
  unint64_t v18 = a6 >> 8;
  unint64_t v19 = a6 >> 16;
  unint64_t v20 = a6 >> 24;
  unint64_t v21 = HIDWORD(a6);
  unint64_t v22 = a6 >> 40;
  unint64_t v65 = a7 >> 8;
  unint64_t v67 = a7 >> 16;
  unint64_t v76 = HIDWORD(a7);
  unint64_t v70 = a7 >> 40;
  unint64_t v72 = a7 >> 24;
  bzero(v82, 0x3C4uLL);
  LOBYTE(v80) = v15;
  BYTE1(v80) = v18;
  BYTE2(v80) = v19;
  BYTE3(v80) = v20;
  BYTE4(v80) = v21;
  BYTE5(v80) = v22;
  BYTE6(v80) = v16;
  BYTE7(v80) = v63;
  BYTE8(v80) = v64;
  BYTE9(v80) = v66;
  BYTE10(v80) = v68;
  BYTE11(v80) = v74;
  BYTE12(v80) = v14;
  BYTE13(v80) = v65;
  BYTE14(v80) = v67;
  HIBYTE(v80) = v72;
  LOBYTE(v81) = v76;
  HIBYTE(v81) = v70;
  unint64_t v23 = a10 - a9;
  if (a10 < a9) {
    goto LABEL_30;
  }
  unint64_t v24 = _swiftEmptyArrayStorage;
  if (v23 >= 0x80)
  {
    unint64_t v33 = v23 >> 7;
    __int16 v84 = _swiftEmptyArrayStorage;
    sub_1000834E4(0, v23 >> 7, 0);
    unint64_t v34 = a11;
    unint64_t v24 = v84;
    unint64_t v35 = a9 >> 7;
    unint64_t v36 = v84[2];
    unint64_t v37 = HIBYTE(a11);
    unint64_t v38 = HIWORD(a11);
    unint64_t v39 = a11 >> 40;
    unint64_t v40 = HIDWORD(a11);
    unint64_t v41 = a11 >> 24;
    while (1)
    {
      char v87 = v34;
      __int16 v88 = *(_WORD *)((char *)&a11 + 1);
      char v89 = v41;
      char v90 = v40;
      char v91 = v39;
      char v92 = v38;
      char v93 = v37;
      char v42 = *(&v87 + v35);
      unint64_t v43 = v24[3];
      __int16 v84 = v24;
      if (v36 >= v43 >> 1)
      {
        unint64_t v77 = v37;
        unint64_t v78 = v34;
        unint64_t v73 = v39;
        unint64_t v75 = v38;
        unint64_t v69 = v41;
        unint64_t v71 = v40;
        sub_1000834E4(v43 > 1, v36 + 1, 1);
        unint64_t v41 = v69;
        unint64_t v40 = v71;
        unint64_t v39 = v73;
        unint64_t v38 = v75;
        unint64_t v37 = v77;
        unint64_t v34 = v78;
        unint64_t v24 = v84;
      }
      v24[2] = v36 + 1;
      *((unsigned char *)v24 + v36 + 32) = v42;
      if (v17 >= 0xFFFFFFFFFFFFFF80) {
        break;
      }
      v17 += 128;
      ++v35;
      ++v36;
      if (!--v33) {
        goto LABEL_3;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
  }
LABEL_3:
  uint64_t v25 = sub_1001265EC((uint64_t)v24);
  unint64_t v27 = v26;
  swift_bridgeObjectRelease();
  uint64_t v28 = sub_1002579A0(v25, v27);
  uint64_t result = sub_10000C970(v25, v27);
  if (!v62)
  {
    uint64_t v79 = (void *)v28;
    unint64_t v30 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v31 = type metadata accessor for BinaryEncoder();
    uint64_t v32 = swift_allocObject();
    *(_OWORD *)(v32 + 16) = xmmword_1003B2440;
    *(void *)(v32 + 32) = v30;
    v86[0] = v31;
    v86[1] = sub_1000CAF84((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
    __int16 v84 = (void *)v32;
    sub_10006EAC4(a2);
    swift_retain();
    IEEE80211Frame.Management.ActionFrame.encode(to:)(&v84, a1, a2);
    sub_100010754((uint64_t)&v84);
    sub_10006DE90(a2);
    swift_beginAccess();
    uint64_t v44 = *(void *)(v32 + 16);
    unint64_t v45 = *(void *)(v32 + 24);
    sub_100013D44(v44, v45);
    swift_release();
    switch(v45 >> 62)
    {
      case 1uLL:
        int v49 = HIDWORD(v44) - v44;
        if (__OFSUB__(HIDWORD(v44), v44)) {
          goto LABEL_33;
        }
        if (v49 >= 960) {
          int v49 = 960;
        }
        uint64_t v47 = v49;
        uint64_t v46 = (int)v44;
        if (v44 >> 32 >= (int)v44) {
          goto LABEL_24;
        }
        goto LABEL_31;
      case 2uLL:
        uint64_t v46 = *(void *)(v44 + 16);
        uint64_t v48 = *(void *)(v44 + 24);
        if (__OFSUB__(v48, v46)) {
          goto LABEL_32;
        }
        if (v48 - v46 >= 960) {
          uint64_t v47 = 960;
        }
        else {
          uint64_t v47 = v48 - v46;
        }
LABEL_18:
        if (v48 < v46) {
          goto LABEL_31;
        }
LABEL_24:
        if (v47 < v46) {
          goto LABEL_31;
        }
        uint64_t v50 = Data._Representation.subscript.getter();
        unint64_t v52 = v51;
        __int16 v84 = (void *)v50;
        *(void *)&long long v85 = v51;
        sub_100074B70();
        unint64_t v53 = DataProtocol.copyBytes(to:)();
        sub_10000C970(v50, v52);
        if ((v53 & 0x8000000000000000) != 0 || v53 >= 0x10000)
        {
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x1000BA1DCLL);
        }
        __int16 v84 = v79;
        long long v85 = v80;
        LOWORD(v86[0]) = v81;
        BYTE2(v86[0]) = a8;
        *(_WORD *)((char *)v86 + 3) = 3000;
        *(_DWORD *)((char *)v86 + 5) = a1 == 4;
        *(_WORD *)((char *)&v86[1] + 1) = v82[0];
        *(_WORD *)((char *)&v86[1] + 3) = v53;
        memcpy((char *)&v86[1] + 5, v83, 0x3C0uLL);
        type metadata accessor for apple80211_nan_oob_act_frm_data(0);
        uint64_t v55 = v54;
        uint64_t v56 = *(void *)(a13 + 8);
        uint64_t v57 = *(void *)(a14 + 16);
        swift_getAssociatedTypeWitness();
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        sub_1000BF4AC(366, (uint64_t)&v84, a12, v55, v56, v57, AssociatedConformanceWitness);
        uint64_t result = sub_10000C970(v44, v45);
        break;
      case 3uLL:
        uint64_t v47 = 0;
        uint64_t v48 = 0;
        uint64_t v46 = 0;
        goto LABEL_18;
      default:
        uint64_t v46 = 0;
        uint64_t v47 = BYTE6(v45);
        goto LABEL_24;
    }
  }
  return result;
}

uint64_t sub_1000BA1EC()
{
  return sub_1000BA210();
}

uint64_t sub_1000BA210()
{
  uint64_t v29 = v0;
  uint64_t v1 = __chkstk_darwin();
  uint64_t v2 = type metadata accessor for SHA256Digest();
  uint64_t v25 = *(void *)(v2 - 8);
  unint64_t v26 = v2;
  __chkstk_darwin();
  uint64_t v4 = (char *)v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for SHA256();
  uint64_t v5 = *(void *)(v24 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[0] = (char *)v30 + 4;
  v23[1] = (char *)&v30[1] + 2;
  unint64_t v27 = (char *)&v30[3] + 4;
  HIDWORD(v30[262]) = 0;
  LOWORD(v30[263]) = 0;
  bzero((char *)v30 + 4, 0x822uLL);
  LOBYTE(v30[262]) = 0;
  v30[261] = 0;
  *(void *)((char *)&v30[263] + 4) = 0;
  BYTE4(v30[264]) = 0;
  memset(&v30[265], 0, 53);
  LOBYTE(v30[0]) = *(unsigned char *)v1;
  BYTE1(v30[0]) = *(unsigned char *)(v1 + 74);
  WORD1(v30[0]) = *(unsigned __int8 *)(v1 + 1);
  swift_bridgeObjectRetain();
  SHA256.init()();
  Swift::String v8 = String.lowercased()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v9 = v28;
  sub_1001A5654(v8._countAndFlagsBits, (uint64_t)v8._object);
  swift_bridgeObjectRelease();
  SHA256.finalize()();
  SHA256Digest.withUnsafeBytes<A>(_:)();
  uint64_t v28 = v9;
  (*(void (**)(char *, unint64_t))(v25 + 8))(v4, v26);
  uint64_t v10 = v31[0];
  unint64_t v11 = v31[1];
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v24);
  v31[0] = v10;
  v31[1] = v11;
  unint64_t v26 = sub_100074B70();
  DataProtocol.copyBytes(to:)();
  sub_10000C970(v10, v11);
  long long v12 = *(_OWORD *)(v1 + 8);
  WORD2(v12) = *(_OWORD *)(v1 + 12);
  WORD3(v12) = *(_OWORD *)(v1 + 2);
  DWORD2(v12) = *(_DWORD *)(v1 + 4);
  HIDWORD(v12) = *(_DWORD *)(v1 + 46);
  __int16 v13 = *(_WORD *)(v1 + 50);
  *(_OWORD *)((char *)&v30[1] + 2) = v12;
  WORD1(v30[3]) = v13;
  HIDWORD(v30[262]) = 0;
  LOWORD(v30[263]) = 0;
  LODWORD(v30[265]) = 0;
  bzero(v27, 0x80AuLL);
  LOBYTE(v30[262]) = 0;
  v30[261] = 0;
  *(void *)((char *)&v30[263] + 4) = 0;
  BYTE4(v30[264]) = 0;
  uint64_t v14 = *(void *)(v1 + 128);
  if (v14 == 1)
  {
    BYTE4(v30[265]) = 0;
  }
  else
  {
    uint64_t v15 = *(void *)(v1 + 80);
    uint64_t v16 = *(void *)(v1 + 88);
    unint64_t v18 = *(void *)(v1 + 96);
    uint64_t v17 = *(void *)(v1 + 104);
    unint64_t v19 = *(void *)(v1 + 112);
    unint64_t v27 = *(void **)(v1 + 120);
    uint64_t v25 = v15;
    BYTE4(v30[265]) = v15 + 1;
    v31[0] = v16;
    v31[1] = v18;
    sub_100013D44(v16, v18);
    sub_100038004(v17, v19);
    swift_bridgeObjectRetain();
    DataProtocol.copyBytes(to:)();
    if (v19 >> 60 == 15)
    {
      sub_1000CAB20(v25, v16, v18, v17, v19, (uint64_t)v27, v14);
    }
    else
    {
      v31[0] = v17;
      v31[1] = v19;
      sub_100013D44(v17, v19);
      DataProtocol.copyBytes(to:)();
      sub_1000CAB20(v25, v16, v18, v17, v19, (uint64_t)v27, v14);
      sub_10000C95C(v17, v19);
    }
  }
  memcpy(v31, v30, sizeof(v31));
  uint64_t v20 = *(void *)(v29 + 16);
  uint64_t v21 = *(void *)(v29 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.setRequest(requestType:data:on:)(0x13CuLL, (uint64_t)v31, (uint64_t)&v32, 0, v20, v21);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t IO80211Driver<>.send(datapathResponse:)()
{
  uint64_t v1 = __chkstk_darwin();
  uint64_t v37 = v2;
  uint64_t v39 = v3;
  uint64_t v40 = v0;
  uint64_t v38 = v4;
  uint64_t v5 = v1;
  uint64_t v6 = type metadata accessor for SHA256Digest();
  uint64_t v33 = *(void *)(v6 - 8);
  unint64_t v34 = v6;
  __chkstk_darwin();
  Swift::String v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for SHA256();
  uint64_t v9 = *(void *)(v32 - 8);
  __chkstk_darwin();
  unint64_t v11 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31[1] = (char *)v41 + 4;
  uint64_t v31[2] = (char *)&v41[1] + 2;
  unint64_t v35 = (char *)&v41[3] + 4;
  HIDWORD(v41[262]) = 0;
  LOWORD(v41[263]) = 0;
  bzero((char *)v41 + 4, 0x822uLL);
  LOBYTE(v41[262]) = 0;
  v41[261] = 0;
  *(void *)((char *)&v41[263] + 4) = 0;
  BYTE4(v41[264]) = 0;
  memset(&v41[265], 0, 53);
  LOBYTE(v41[0]) = *(unsigned char *)v5;
  BYTE1(v41[0]) = *(unsigned char *)(v5 + 74);
  WORD1(v41[0]) = *(unsigned __int8 *)(v5 + 1);
  swift_bridgeObjectRetain();
  SHA256.init()();
  Swift::String v12 = String.lowercased()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v13 = v36;
  sub_1001A5654(v12._countAndFlagsBits, (uint64_t)v12._object);
  swift_bridgeObjectRelease();
  SHA256.finalize()();
  SHA256Digest.withUnsafeBytes<A>(_:)();
  uint64_t v36 = v13;
  (*(void (**)(char *, unint64_t))(v33 + 8))(v8, v34);
  uint64_t v14 = v42[0];
  unint64_t v15 = v42[1];
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v32);
  v42[0] = v14;
  v42[1] = v15;
  unint64_t v34 = sub_100074B70();
  DataProtocol.copyBytes(to:)();
  sub_10000C970(v14, v15);
  long long v16 = *(_OWORD *)(v5 + 8);
  WORD2(v16) = *(_OWORD *)(v5 + 12);
  WORD3(v16) = *(_OWORD *)(v5 + 2);
  DWORD2(v16) = *(_DWORD *)(v5 + 4);
  HIDWORD(v16) = *(_DWORD *)(v5 + 46);
  __int16 v17 = *(_WORD *)(v5 + 50);
  *(_OWORD *)((char *)&v41[1] + 2) = v16;
  WORD1(v41[3]) = v17;
  HIDWORD(v41[262]) = 0;
  LOWORD(v41[263]) = 0;
  LODWORD(v41[265]) = 0;
  bzero(v35, 0x80AuLL);
  LOBYTE(v41[262]) = 0;
  v41[261] = 0;
  *(void *)((char *)&v41[263] + 4) = 0;
  BYTE4(v41[264]) = 0;
  uint64_t v18 = *(void *)(v5 + 128);
  if (v18 == 1)
  {
    BYTE4(v41[265]) = 0;
  }
  else
  {
    uint64_t v19 = *(void *)(v5 + 80);
    uint64_t v20 = *(void *)(v5 + 88);
    unint64_t v22 = *(void *)(v5 + 96);
    uint64_t v21 = *(void *)(v5 + 104);
    unint64_t v23 = *(void *)(v5 + 112);
    unint64_t v35 = *(void **)(v5 + 120);
    uint64_t v33 = v19;
    BYTE4(v41[265]) = v19 + 1;
    v42[0] = v20;
    v42[1] = v22;
    sub_100013D44(v20, v22);
    sub_100038004(v21, v23);
    swift_bridgeObjectRetain();
    DataProtocol.copyBytes(to:)();
    if (v23 >> 60 == 15)
    {
      sub_1000CAB20(v33, v20, v22, v21, v23, (uint64_t)v35, v18);
    }
    else
    {
      v42[0] = v21;
      v42[1] = v23;
      sub_100013D44(v21, v23);
      DataProtocol.copyBytes(to:)();
      sub_1000CAB20(v33, v20, v22, v21, v23, (uint64_t)v35, v18);
      sub_10000C95C(v21, v23);
    }
  }
  memcpy(v42, v41, sizeof(v42));
  type metadata accessor for apple80211_nan_dp_response(0);
  uint64_t v25 = v24;
  uint64_t v26 = *(void *)(v38 + 8);
  uint64_t v27 = *(void *)(v37 + 16);
  uint64_t v28 = v39;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return sub_1000BF4AC(316, (uint64_t)v42, v28, v25, v26, v27, AssociatedConformanceWitness);
}

uint64_t sub_1000BABD8(unint64_t a1)
{
  return sub_1000640C0(0x13FuLL, HIWORD(a1) & 0xFF00u | a1 | (a1 >> 8 << 16));
}

uint64_t IO80211Driver<>.send(datapathConfirmation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v13[0] = a1;
  v13[1] = HIBYTE(a1);
  _DWORD v13[2] = BYTE1(a1);
  v13[3] = BYTE2(a1);
  v13[4] = BYTE3(a1);
  v13[5] = BYTE4(a1);
  unsigned char v13[6] = BYTE5(a1);
  v13[7] = BYTE6(a1);
  type metadata accessor for apple80211_nan_dp_confirm(0);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(a3 + 8);
  uint64_t v10 = *(void *)(a4 + 16);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return sub_1000BF4AC(319, (uint64_t)v13, a2, v8, v9, v10, AssociatedConformanceWitness);
}

uint64_t sub_1000BAD04(uint64_t a1)
{
  return IO80211Driver<>.update(availability:)(a1);
}

uint64_t IO80211Driver<>.update(availability:)(uint64_t a1)
{
  __int16 v3 = 0;
  long long v36 = 0u;
  memset(v37, 0, sizeof(v37));
  long long v34 = 0u;
  long long v35 = 0u;
  uint64_t v38 = 0;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  memset(v43, 0, sizeof(v43));
  uint64_t v44 = 0;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  memset(v49, 0, sizeof(v49));
  uint64_t v50 = 0;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  memset(v55, 0, sizeof(v55));
  uint64_t v56 = 0;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  memset(v61, 0, sizeof(v61));
  uint64_t v62 = 0;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  memset(v67, 0, sizeof(v67));
  uint64_t v68 = 0;
  long long v72 = 0u;
  memset(v73, 0, sizeof(v73));
  long long v70 = 0u;
  long long v71 = 0u;
  uint64_t v74 = 0;
  long long v78 = 0u;
  memset(v79, 0, sizeof(v79));
  long long v76 = 0u;
  long long v77 = 0u;
  uint64_t v80 = 0;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  memset(v85, 0, sizeof(v85));
  uint64_t v86 = 0;
  long long v90 = 0u;
  memset(v91, 0, sizeof(v91));
  long long v88 = 0u;
  long long v89 = 0u;
  uint64_t v92 = 0;
  long long v96 = 0u;
  memset(v97, 0, sizeof(v97));
  long long v94 = 0u;
  long long v95 = 0u;
  uint64_t v98 = 0;
  long long v102 = 0u;
  memset(v103, 0, sizeof(v103));
  long long v100 = 0u;
  long long v101 = 0u;
  uint64_t v104 = 0;
  long long v108 = 0u;
  memset(v109, 0, sizeof(v109));
  long long v106 = 0u;
  long long v107 = 0u;
  uint64_t v110 = 0;
  long long v114 = 0u;
  memset(v115, 0, sizeof(v115));
  long long v112 = 0u;
  long long v113 = 0u;
  uint64_t v116 = 0;
  long long v120 = 0u;
  memset(v121, 0, sizeof(v121));
  long long v118 = 0u;
  long long v119 = 0u;
  uint64_t v122 = 0;
  long long v126 = 0u;
  memset(v127, 0, sizeof(v127));
  long long v124 = 0u;
  long long v125 = 0u;
  uint64_t v128 = 0;
  long long v134 = 0u;
  memset(v135, 0, sizeof(v135));
  long long v132 = 0u;
  long long v133 = 0u;
  uint64_t v136 = 0;
  long long v140 = 0u;
  memset(v141, 0, sizeof(v141));
  long long v138 = 0u;
  long long v139 = 0u;
  uint64_t v142 = 0;
  long long v146 = 0u;
  memset(v147, 0, sizeof(v147));
  long long v144 = 0u;
  long long v145 = 0u;
  uint64_t v148 = 0;
  long long v152 = 0u;
  memset(v153, 0, sizeof(v153));
  long long v150 = 0u;
  long long v151 = 0u;
  uint64_t v154 = 0;
  long long v158 = 0u;
  memset(v159, 0, sizeof(v159));
  long long v156 = 0u;
  long long v157 = 0u;
  uint64_t v160 = 0;
  long long v164 = 0u;
  memset(v165, 0, sizeof(v165));
  long long v162 = 0u;
  long long v163 = 0u;
  uint64_t v166 = 0;
  long long v170 = 0u;
  memset(v171, 0, sizeof(v171));
  long long v168 = 0u;
  long long v169 = 0u;
  uint64_t v172 = 0;
  long long v176 = 0u;
  memset(v177, 0, sizeof(v177));
  long long v174 = 0u;
  long long v175 = 0u;
  uint64_t v178 = 0;
  long long v182 = 0u;
  memset(v183, 0, sizeof(v183));
  long long v180 = 0u;
  long long v181 = 0u;
  uint64_t v184 = 0;
  long long v188 = 0u;
  memset(v189, 0, sizeof(v189));
  long long v186 = 0u;
  long long v187 = 0u;
  uint64_t v190 = 0;
  long long v194 = 0u;
  memset(v195, 0, sizeof(v195));
  long long v192 = 0u;
  long long v193 = 0u;
  uint64_t v196 = 0;
  long long v200 = 0u;
  memset(v201, 0, sizeof(v201));
  long long v198 = 0u;
  long long v199 = 0u;
  uint64_t v202 = 0;
  long long v206 = 0u;
  memset(v207, 0, sizeof(v207));
  long long v204 = 0u;
  long long v205 = 0u;
  uint64_t v208 = 0;
  long long v212 = 0u;
  memset(v213, 0, sizeof(v213));
  long long v210 = 0u;
  long long v211 = 0u;
  uint64_t v214 = 0;
  long long v218 = 0u;
  memset(v219, 0, sizeof(v219));
  long long v216 = 0u;
  long long v217 = 0u;
  uint64_t v220 = 0;
  long long v224 = 0u;
  memset(v225, 0, sizeof(v225));
  long long v222 = 0u;
  long long v223 = 0u;
  int v226 = 0;
  __int16 v30 = 0;
  char v31 = 0;
  __int16 v32 = 0;
  char v33 = 0;
  __int16 v130 = 0;
  char v131 = 0;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  memset(v29, 0, sizeof(v29));
  uint64_t v4 = 0;
  __int16 v5 = 0;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  char v39 = 0;
  char v45 = 0;
  char v51 = 0;
  char v57 = 0;
  char v63 = 0;
  char v69 = 0;
  char v75 = 0;
  char v81 = 0;
  char v87 = 0;
  char v93 = 0;
  char v99 = 0;
  char v105 = 0;
  char v111 = 0;
  char v117 = 0;
  char v123 = 0;
  char v129 = 0;
  char v137 = 0;
  char v143 = 0;
  char v149 = 0;
  char v155 = 0;
  char v161 = 0;
  char v167 = 0;
  char v173 = 0;
  char v179 = 0;
  char v185 = 0;
  char v191 = 0;
  char v197 = 0;
  char v203 = 0;
  char v209 = 0;
  char v215 = 0;
  char v221 = 0;
  __int16 v227 = 0;
  return sub_1000C23D8((uint64_t)&v30, (uint64_t)&v228, a1, &v2);
}

uint64_t sub_1000BB17C(uint64_t a1)
{
  return sub_1000CAFCC(a1);
}

uint64_t IO80211Driver<>.update(potentialAvailability:)(uint64_t result)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    uint64_t v4 = result + 32;
    uint64_t v18 = result;
    swift_bridgeObjectRetain();
    unint64_t v5 = 0;
    while (1)
    {
      if (v5 < 2)
      {
        unint64_t v6 = v4 + 16 * v5;
        uint64_t v7 = *(void *)(v6 + 8);
        __int16 v8 = *(_WORD *)(v6 + 2);
        swift_bridgeObjectRetain();
        sub_10008CA90(0, 4, v8);
        if (v2)
        {
          uint64_t result = swift_unexpectedError();
          __break(1u);
          return result;
        }
        uint64_t v9 = *(void *)(v7 + 16);
        if (v9)
        {
          swift_bridgeObjectRetain();
          unsigned int v10 = 0;
          uint64_t v11 = 32;
          do
          {
            long long v12 = *(_OWORD *)(v7 + v11);
            long long v13 = *(_OWORD *)(v7 + v11 + 16);
            long long v14 = *(_OWORD *)(v7 + v11 + 32);
            char v17 = *(unsigned char *)(v7 + v11 + 48);
            v16[1] = v13;
            unsigned char v16[2] = v14;
            v16[0] = v12;
            if (v10 <= 0xF)
            {
              sub_1000CAB88((uint64_t)v16);
              sub_1000C2600((unint64_t)&v15);
              sub_1000CABC4((uint64_t)v16);
              ++v10;
            }
            v11 += 56;
            --v9;
          }
          while (v9);
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
      }
      if (++v5 == v3) {
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

uint64_t sub_1000BB314(uint64_t a1, uint64_t a2)
{
  return IO80211Driver<>.update(dataCluster:)(a1 & 0xFFFFFFFFFFFFFFLL, a2);
}

uint64_t IO80211Driver<>.update(dataCluster:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    uint64_t v5 = *(void *)(a2 + 48);
    unint64_t v4 = *(void *)(a2 + 56);
    uint64_t v6 = *(unsigned __int16 *)(a2 + 40);
    swift_bridgeObjectRetain();
    sub_100013D44(v5, v4);
    sub_1000C29E4(v6, v5, v4, (uint64_t)v11);
    sub_10000C970(v5, v4);
    if (v2 != 1)
    {
      uint64_t v8 = *(void *)(a2 + 80);
      unint64_t v7 = *(void *)(a2 + 88);
      uint64_t v9 = *(unsigned __int16 *)(a2 + 72);
      sub_100013D44(v8, v7);
      sub_1000C29E4(v9, v8, v7, (uint64_t)v11);
      sub_10000C970(v8, v7);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000BB424(uint64_t a1, void *a2)
{
  return sub_1000BB448(a1, a2);
}

uint64_t sub_1000BB448(uint64_t a1, void *a2)
{
  unint64_t v3 = a1;
  void v21[4] = 0;
  v21[76] = 0;
  memset(&v21[6], 0, 69);
  memset(&v21[78], 0, 69);
  if (!a2)
  {
    v21[2] = 0;
    sub_1000C2CC0((uint64_t)&v21[4], (uint64_t)&v22, a1, 0);
    LODWORD(v3) = 0;
    char v4 = 0;
    goto LABEL_6;
  }
  if (a2[2] < 0x100uLL)
  {
    v21[2] = a2[2];
    sub_1000C2CC0((uint64_t)&v21[4], (uint64_t)&v22, a1, a2);
    if (!HIDWORD(v3))
    {
      char v4 = 1;
LABEL_6:
      long long v16 = *(_OWORD *)&v21[98];
      long long v17 = *(_OWORD *)&v21[114];
      long long v18 = *(_OWORD *)&v21[130];
      long long v12 = *(_OWORD *)&v21[34];
      long long v13 = *(_OWORD *)&v21[50];
      long long v14 = *(_OWORD *)&v21[66];
      long long v15 = *(_OWORD *)&v21[82];
      long long v10 = *(_OWORD *)&v21[2];
      __int16 v19 = *(_WORD *)&v21[146];
      long long v11 = *(_OWORD *)&v21[18];
      v8[0] = v4;
      int v9 = v3;
      int v20 = 0;
      uint64_t v5 = *(void *)(v2 + 16);
      uint64_t v6 = *(void *)(v2 + 24);
      swift_retain();
      swift_bridgeObjectRetain();
      AppleDevice.setRequest(requestType:data:on:)(0x14DuLL, (uint64_t)v8, (uint64_t)v21, 0, v5, v6);
      swift_bridgeObjectRelease();
      return swift_release();
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t IO80211Driver<>.update(discoveryBeaconTransmissionSchedule:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v8 = a1;
  v29[2] = 0;
  v29[74] = 0;
  memset(&v29[4], 0, 69);
  memset(&v29[76], 0, 69);
  if (!a2)
  {
    v29[0] = 0;
    sub_1000C2CC0((uint64_t)&v29[2], (uint64_t)&v30, a1, 0);
    LODWORD(v8) = 0;
    char v9 = 0;
    goto LABEL_6;
  }
  if (a2[2] < 0x100uLL)
  {
    v29[0] = a2[2];
    sub_1000C2CC0((uint64_t)&v29[2], (uint64_t)&v30, a1, a2);
    if (!HIDWORD(v8))
    {
      char v9 = 1;
LABEL_6:
      long long v24 = *(_OWORD *)&v29[96];
      long long v25 = *(_OWORD *)&v29[112];
      long long v26 = *(_OWORD *)&v29[128];
      long long v20 = *(_OWORD *)&v29[32];
      long long v21 = *(_OWORD *)&v29[48];
      long long v22 = *(_OWORD *)&v29[64];
      long long v23 = *(_OWORD *)&v29[80];
      long long v18 = *(_OWORD *)v29;
      __int16 v27 = *(_WORD *)&v29[144];
      long long v19 = *(_OWORD *)&v29[16];
      v16[0] = v9;
      int v17 = v8;
      int v28 = 0;
      type metadata accessor for apple80211_nan_forced_disc_beacon_transmission(0);
      uint64_t v11 = v10;
      uint64_t v12 = *(void *)(a4 + 8);
      uint64_t v13 = *(void *)(a5 + 16);
      swift_getAssociatedTypeWitness();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      return sub_1000BF4AC(333, (uint64_t)v16, a3, v11, v12, v13, AssociatedConformanceWitness);
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000BB840(uint64_t a1, uint64_t a2)
{
  return sub_100064774(0x181uLL, a2 & 0xFFFFFFFFFFFFFFLL, a1 != 0);
}

uint64_t IO80211Driver<>.update(linkStatus:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int16 v14 = a2;
  char v15 = BYTE2(a2);
  char v16 = BYTE3(a2);
  char v17 = BYTE4(a2);
  char v18 = BYTE5(a2);
  char v19 = BYTE6(a2);
  BOOL v20 = a1 != 0;
  type metadata accessor for apple80211_nan_dp_link_status(0);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(a4 + 8);
  uint64_t v11 = *(void *)(a5 + 16);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return sub_1000BF4AC(385, (uint64_t)&v14, a3, v9, v10, v11, AssociatedConformanceWitness);
}

uint64_t sub_1000BB96C(char a1)
{
  return sub_100064868(0x18EuLL, (unint64_t)&_mh_execute_header & 0xFFFFFFFFFFFFFFFELL | a1 & 1);
}

uint64_t IO80211Driver<>.update(powerSaveRestriction:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v13[0] = a1;
  int v14 = 1;
  type metadata accessor for apple80211_nan_ps_restriction(0);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(a3 + 8);
  uint64_t v10 = *(void *)(a4 + 16);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return sub_1000BF4AC(398, (uint64_t)v13, a2, v8, v9, v10, AssociatedConformanceWitness);
}

uint64_t sub_1000BBA60(unsigned int a1)
{
  if ((a1 & 0x100) != 0) {
    char v1 = 0;
  }
  else {
    char v1 = a1;
  }
  uint64_t v2 = 0x200000000;
  if ((a1 & 0x100) == 0) {
    uint64_t v2 = (uint64_t)&_mh_execute_header;
  }
  return sub_100064930(0x190uLL, v2 | HIWORD(a1) & 1, v1);
}

uint64_t IO80211Driver<>.update(internetSharingActivity:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a1 & 0x100) != 0) {
    char v7 = 0;
  }
  else {
    char v7 = a1;
  }
  v15[0] = BYTE2(a1) & 1;
  if ((a1 & 0x100) != 0) {
    int v8 = 2;
  }
  else {
    int v8 = 1;
  }
  int v16 = v8;
  char v17 = v7;
  type metadata accessor for apple80211_nan_ir_status(0);
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(a3 + 8);
  uint64_t v12 = *(void *)(a4 + 16);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return sub_1000BF4AC(400, (uint64_t)v15, a2, v10, v11, v12, AssociatedConformanceWitness);
}

id sub_1000BBB7C(uint64_t a1)
{
  return sub_1000BBBA4(a1 & 0xFFFFFFFFFFFFLL);
}

id sub_1000BBBA4(unint64_t a1)
{
  unint64_t v3 = a1 >> 8;
  unint64_t v4 = a1 >> 16;
  unint64_t v5 = a1 >> 24;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = a1 >> 40;
  type metadata accessor for String.Encoding();
  __chkstk_darwin();
  char v63 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v90 = 0;
  int v89 = 0;
  int v88 = 0;
  long long v91 = 0u;
  long long v92 = 0u;
  long long v93 = 0u;
  long long v94 = 0u;
  long long v95 = 0u;
  long long v96 = 0u;
  long long v97 = 0u;
  long long v98 = 0u;
  long long v99 = 0u;
  long long v100 = 0u;
  memset(v101, 0, 27);
  bzero(&v102, 0x408uLL);
  v87[0] = a1;
  v87[1] = v3;
  void v87[2] = v4;
  v87[3] = v5;
  v87[4] = v6;
  v87[5] = v7;
  uint64_t v9 = *(void *)(v1 + 16);
  uint64_t v10 = *(void *)(v1 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  Class v11 = isa;
  AppleDevice.getRequest(requestType:data:on:)(0x16CuLL, (uint64_t)v87, (uint64_t)v188, 0, v9, v10);
  swift_bridgeObjectRelease();
  id result = (id)swift_release();
  if (!v11)
  {
    id v58 = [objc_allocWithZone((Class)WiFiMACAddress) initWithAddress:a1 & 0xFFFFFFFFFFFFLL];
    v13.super.super.Class isa = UInt8._bridgeToObjectiveC()().super.super.isa;
    long long v66 = v102;
    uint64_t v67 = v103;
    long long v68 = v104;
    uint64_t v69 = v105;
    long long v70 = v106;
    uint64_t v71 = v107;
    long long v72 = v108;
    uint64_t v73 = v109;
    long long v74 = v110;
    long long v76 = v112;
    uint64_t v75 = v111;
    uint64_t v77 = v113;
    long long v78 = v114;
    long long v80 = v116;
    uint64_t v79 = v115;
    uint64_t v81 = v117;
    long long v82 = v118;
    long long v84 = v120;
    uint64_t v83 = v119;
    uint64_t v85 = v121;
    sub_1000C2F24((uint64_t)&v66, (uint64_t)&v86, &v65);
    uint64_t v14 = v65;
    long long v66 = v122;
    uint64_t v67 = v123;
    long long v68 = v124;
    uint64_t v69 = v125;
    long long v70 = v126;
    uint64_t v71 = v127;
    long long v72 = v128;
    uint64_t v73 = v129;
    sub_1000C2F24((uint64_t)&v66, (uint64_t)&v74, &v65);
    uint64_t v49 = 0;
    uint64_t v15 = v65;
    v16.super.super.Class isa = UInt8._bridgeToObjectiveC()().super.super.isa;
    Class isa = UInt8._bridgeToObjectiveC()().super.super.isa;
    Class v62 = UInt8._bridgeToObjectiveC()().super.super.isa;
    Class v61 = UInt32._bridgeToObjectiveC()().super.super.isa;
    Class v60 = UInt32._bridgeToObjectiveC()().super.super.isa;
    Class v59 = UInt64._bridgeToObjectiveC()().super.super.isa;
    v17.super.super.Class isa = UInt64._bridgeToObjectiveC()().super.super.isa;
    Class v57 = UInt64._bridgeToObjectiveC()().super.super.isa;
    Class v56 = UInt64._bridgeToObjectiveC()().super.super.isa;
    Class v55 = UInt64._bridgeToObjectiveC()().super.super.isa;
    Class v54 = UInt64._bridgeToObjectiveC()().super.super.isa;
    sub_10006F314(0, (unint64_t *)&unk_1004853D0);
    v18.super.super.Class isa = NSNumber.init(integerLiteral:)(0).super.super.isa;
    Class v53 = UInt64._bridgeToObjectiveC()().super.super.isa;
    Class v52 = UInt64._bridgeToObjectiveC()().super.super.isa;
    Class v51 = UInt64._bridgeToObjectiveC()().super.super.isa;
    Class v50 = UInt64._bridgeToObjectiveC()().super.super.isa;
    v19.super.super.Class isa = UInt64._bridgeToObjectiveC()().super.super.isa;
    if (__CFADD__(*((void *)&v94 + 1), (void)v97)) {
      __break(1u);
    }
    Class v47 = v16.super.super.isa;
    uint64_t v48 = v15;
    Class v46 = v19.super.super.isa;
    Class v45 = UInt64._bridgeToObjectiveC()().super.super.isa;
    Class v44 = UInt64._bridgeToObjectiveC()().super.super.isa;
    Class v43 = UInt64._bridgeToObjectiveC()().super.super.isa;
    Class v42 = UInt64._bridgeToObjectiveC()().super.super.isa;
    Class v41 = UInt64._bridgeToObjectiveC()().super.super.isa;
    Class v40 = UInt64._bridgeToObjectiveC()().super.super.isa;
    Class v39 = UInt64._bridgeToObjectiveC()().super.super.isa;
    Class v38 = UInt64._bridgeToObjectiveC()().super.super.isa;
    Class v37 = UInt32._bridgeToObjectiveC()().super.super.isa;
    Class v36 = UInt32._bridgeToObjectiveC()().super.super.isa;
    Class v34 = UInt32._bridgeToObjectiveC()().super.super.isa;
    Class v32 = UInt32._bridgeToObjectiveC()().super.super.isa;
    Class v30 = UInt32._bridgeToObjectiveC()().super.super.isa;
    Class v35 = v18.super.super.isa;
    __int16 v20 = v101[12];
    sub_100010BCC(&qword_10047BEF8);
    uint64_t v21 = swift_allocObject();
    uint64_t v33 = v14;
    *(_OWORD *)(v21 + 16) = xmmword_1003B4420;
    *(_WORD *)(v21 + 32) = v20;
    *(void *)&long long v66 = v21;
    Class v31 = v17.super.super.isa;
    static String.Encoding.utf8.getter();
    sub_100010BCC(&qword_10047E7D0);
    Class v29 = v13.super.super.isa;
    sub_10000F9CC((unint64_t *)&qword_10047E7D8, &qword_10047E7D0);
    uint64_t v22 = String.init<A>(bytes:encoding:)();
    unint64_t v24 = v23;
    swift_bridgeObjectRelease();
    if (v24) {
      long long v25 = (char *)v22;
    }
    else {
      long long v25 = 0;
    }
    char v63 = v25;
    unint64_t v26 = 0xE000000000000000;
    if (v24) {
      unint64_t v26 = v24;
    }
    unint64_t v28 = v26;
    long long v66 = v178;
    uint64_t v67 = v179;
    long long v68 = v180;
    uint64_t v69 = v181;
    long long v70 = v182;
    uint64_t v71 = v183;
    long long v72 = v184;
    uint64_t v73 = v185;
    long long v74 = v186;
    uint64_t v75 = v187;
    sub_1000C2F24((uint64_t)&v66, (uint64_t)&v76, &v65);
    long long v66 = v150;
    uint64_t v67 = v151;
    long long v68 = v152;
    uint64_t v69 = v153;
    long long v70 = v154;
    uint64_t v71 = v155;
    long long v72 = v156;
    uint64_t v73 = v157;
    long long v74 = v158;
    long long v76 = v160;
    uint64_t v75 = v159;
    uint64_t v77 = v161;
    long long v78 = v162;
    long long v80 = v164;
    uint64_t v79 = v163;
    uint64_t v81 = v165;
    long long v82 = v166;
    long long v84 = v168;
    uint64_t v83 = v167;
    uint64_t v85 = v169;
    sub_1000C2F24((uint64_t)&v66, (uint64_t)&v86, &v65);
    long long v66 = v130;
    uint64_t v67 = v131;
    long long v68 = v132;
    uint64_t v69 = v133;
    long long v70 = v134;
    uint64_t v71 = v135;
    long long v72 = v136;
    uint64_t v73 = v137;
    long long v74 = v138;
    long long v76 = v140;
    uint64_t v75 = v139;
    uint64_t v77 = v141;
    long long v78 = v142;
    long long v80 = v144;
    uint64_t v79 = v143;
    uint64_t v81 = v145;
    long long v82 = v146;
    long long v84 = v148;
    uint64_t v83 = v147;
    uint64_t v85 = v149;
    sub_1000C2F24((uint64_t)&v66, (uint64_t)&v86, &v65);
    long long v66 = v170;
    uint64_t v67 = v171;
    long long v68 = v172;
    uint64_t v69 = v173;
    long long v70 = v174;
    uint64_t v71 = v175;
    long long v72 = v176;
    uint64_t v73 = v177;
    sub_1000C2F24((uint64_t)&v66, (uint64_t)&v74, &v65);
    id v27 = objc_allocWithZone((Class)WiFiAwareDataSessionStatisticsReport);
    return sub_1000C5168(v58, v29, v33, v48, v47, isa, v62, v61, v60, v59, v31, v57, v56, v55, v54, 0, v35, v53, v52,
             v51,
             v50,
             v46,
             v45,
             v44,
             v43,
             v42,
             v41,
             v40,
             v39,
             v38,
             v37,
             v36,
             v34,
             v32,
             v30);
  }
  return result;
}

id IO80211Driver<>.generateStatisticsReport(for:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v70 = a2;
  uint64_t v71 = a4;
  uint64_t v67 = a3;
  unint64_t v5 = a1 >> 8;
  unint64_t v6 = a1 >> 16;
  unint64_t v7 = a1 >> 24;
  unint64_t v8 = HIDWORD(a1);
  unint64_t v9 = a1 >> 40;
  type metadata accessor for String.Encoding();
  __chkstk_darwin();
  Class v11 = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v95 = 0;
  int v94 = 0;
  int v93 = 0;
  long long v96 = 0u;
  long long v97 = 0u;
  long long v98 = 0u;
  long long v99 = 0u;
  long long v100 = 0u;
  long long v101 = 0u;
  long long v102 = 0u;
  long long v103 = 0u;
  long long v104 = 0u;
  long long v105 = 0u;
  memset(v106, 0, 27);
  bzero(&v107, 0x408uLL);
  v92[0] = a1;
  v92[1] = v5;
  v92[2] = v6;
  v92[3] = v7;
  v92[4] = v8;
  uint64_t v12 = v70;
  v92[5] = v9;
  Class v13 = isa;
  id result = (id)sub_1000C2DCC((uint64_t)v92, (uint64_t)v193, v68, v70, v67, v71, &v72);
  if (!v13)
  {
    Class v57 = v11;
    id v56 = [objc_allocWithZone((Class)WiFiMACAddress) initWithAddress:a1 & 0xFFFFFFFFFFFFLL];
    Class isa = UInt8._bridgeToObjectiveC()().super.super.isa;
    long long v72 = v107;
    uint64_t v73 = v108;
    long long v74 = v109;
    uint64_t v75 = v110;
    long long v76 = v111;
    uint64_t v77 = v112;
    long long v78 = v113;
    uint64_t v79 = v114;
    long long v80 = v115;
    uint64_t v81 = v116;
    long long v82 = v117;
    uint64_t v83 = v118;
    long long v84 = v119;
    long long v86 = v121;
    uint64_t v85 = v120;
    uint64_t v87 = v122;
    long long v88 = v123;
    long long v90 = v125;
    uint64_t v89 = v124;
    uint64_t v91 = v126;
    uint64_t v61 = sub_100010BCC(&qword_10047E7C0);
    uint64_t v68 = sub_1000C2EA0((uint64_t)&v72, v12, v61);
    long long v72 = v127;
    uint64_t v73 = v128;
    long long v74 = v129;
    uint64_t v75 = v130;
    long long v76 = v131;
    uint64_t v77 = v132;
    long long v78 = v133;
    uint64_t v79 = v134;
    uint64_t v59 = sub_100010BCC(&qword_10047E7C8);
    uint64_t v15 = sub_1000C2EA0((uint64_t)&v72, v12, v59);
    Class v66 = UInt8._bridgeToObjectiveC()().super.super.isa;
    Class v65 = UInt8._bridgeToObjectiveC()().super.super.isa;
    Class v64 = UInt8._bridgeToObjectiveC()().super.super.isa;
    Class v63 = UInt32._bridgeToObjectiveC()().super.super.isa;
    Class v62 = UInt32._bridgeToObjectiveC()().super.super.isa;
    Class v60 = UInt64._bridgeToObjectiveC()().super.super.isa;
    Class v58 = UInt64._bridgeToObjectiveC()().super.super.isa;
    v16.super.super.Class isa = UInt64._bridgeToObjectiveC()().super.super.isa;
    Class v55 = UInt64._bridgeToObjectiveC()().super.super.isa;
    Class v54 = UInt64._bridgeToObjectiveC()().super.super.isa;
    Class v53 = UInt64._bridgeToObjectiveC()().super.super.isa;
    sub_10006F314(0, (unint64_t *)&unk_1004853D0);
    v17.super.super.Class isa = NSNumber.init(integerLiteral:)(0).super.super.isa;
    Class v52 = UInt64._bridgeToObjectiveC()().super.super.isa;
    Class v51 = UInt64._bridgeToObjectiveC()().super.super.isa;
    Class v50 = UInt64._bridgeToObjectiveC()().super.super.isa;
    Class v49 = UInt64._bridgeToObjectiveC()().super.super.isa;
    v18.super.super.Class isa = UInt64._bridgeToObjectiveC()().super.super.isa;
    if (__CFADD__(*((void *)&v99 + 1), (void)v102)) {
      __break(1u);
    }
    Class v46 = v18.super.super.isa;
    uint64_t v47 = v15;
    Class v45 = UInt64._bridgeToObjectiveC()().super.super.isa;
    Class v44 = UInt64._bridgeToObjectiveC()().super.super.isa;
    Class v43 = UInt64._bridgeToObjectiveC()().super.super.isa;
    Class v42 = UInt64._bridgeToObjectiveC()().super.super.isa;
    Class v41 = UInt64._bridgeToObjectiveC()().super.super.isa;
    Class v40 = UInt64._bridgeToObjectiveC()().super.super.isa;
    Class v39 = UInt64._bridgeToObjectiveC()().super.super.isa;
    Class v38 = UInt64._bridgeToObjectiveC()().super.super.isa;
    Class v37 = UInt32._bridgeToObjectiveC()().super.super.isa;
    Class v35 = UInt32._bridgeToObjectiveC()().super.super.isa;
    Class v34 = UInt32._bridgeToObjectiveC()().super.super.isa;
    Class v33 = UInt32._bridgeToObjectiveC()().super.super.isa;
    Class v31 = UInt32._bridgeToObjectiveC()().super.super.isa;
    uint64_t v48 = 0;
    Class v36 = v16.super.super.isa;
    __int16 v19 = v106[12];
    sub_100010BCC(&qword_10047BEF8);
    uint64_t v20 = swift_allocObject();
    Class v32 = v17.super.super.isa;
    *(_OWORD *)(v20 + 16) = xmmword_1003B4420;
    *(_WORD *)(v20 + 32) = v19;
    *(void *)&long long v72 = v20;
    static String.Encoding.utf8.getter();
    sub_100010BCC(&qword_10047E7D0);
    sub_10000F9CC((unint64_t *)&qword_10047E7D8, &qword_10047E7D0);
    uint64_t v21 = String.init<A>(bytes:encoding:)();
    unint64_t v23 = v22;
    swift_bridgeObjectRelease();
    if (v23) {
      uint64_t v24 = v21;
    }
    else {
      uint64_t v24 = 0;
    }
    Class v57 = (char *)v24;
    unint64_t v25 = 0xE000000000000000;
    if (v23) {
      unint64_t v25 = v23;
    }
    v30[2] = v25;
    long long v72 = v183;
    uint64_t v73 = v184;
    long long v74 = v185;
    uint64_t v75 = v186;
    long long v76 = v187;
    uint64_t v77 = v188;
    long long v78 = v189;
    uint64_t v79 = v190;
    long long v80 = v191;
    uint64_t v81 = v192;
    uint64_t v26 = sub_100010BCC(&qword_10047E7E0);
    uint64_t v27 = v70;
    v30[1] = sub_1000C2EA0((uint64_t)&v72, v70, v26);
    long long v72 = v155;
    uint64_t v73 = v156;
    long long v74 = v157;
    uint64_t v75 = v158;
    long long v76 = v159;
    uint64_t v77 = v160;
    long long v78 = v161;
    uint64_t v79 = v162;
    long long v80 = v163;
    uint64_t v81 = v164;
    long long v82 = v165;
    uint64_t v83 = v166;
    long long v84 = v167;
    long long v86 = v169;
    uint64_t v85 = v168;
    uint64_t v87 = v170;
    long long v88 = v171;
    long long v90 = v173;
    uint64_t v89 = v172;
    uint64_t v91 = v174;
    uint64_t v28 = v61;
    v30[0] = sub_1000C2EA0((uint64_t)&v72, v27, v61);
    long long v72 = v135;
    uint64_t v73 = v136;
    long long v74 = v137;
    uint64_t v75 = v138;
    long long v76 = v139;
    uint64_t v77 = v140;
    long long v78 = v141;
    uint64_t v79 = v142;
    long long v80 = v143;
    uint64_t v81 = v144;
    long long v82 = v145;
    uint64_t v83 = v146;
    long long v84 = v147;
    long long v86 = v149;
    uint64_t v85 = v148;
    uint64_t v87 = v150;
    long long v88 = v151;
    long long v90 = v153;
    uint64_t v89 = v152;
    uint64_t v91 = v154;
    sub_1000C2EA0((uint64_t)&v72, v27, v28);
    long long v72 = v175;
    uint64_t v73 = v176;
    long long v74 = v177;
    uint64_t v75 = v178;
    long long v76 = v179;
    uint64_t v77 = v180;
    long long v78 = v181;
    uint64_t v79 = v182;
    sub_1000C2EA0((uint64_t)&v72, v27, v59);
    id v29 = objc_allocWithZone((Class)WiFiAwareDataSessionStatisticsReport);
    return sub_1000C5168(v56, isa, v68, v47, v66, v65, v64, v63, v62, v60, v58, v36, v55, v54, v53, 0, v32, v52, v51,
             v50,
             v49,
             v46,
             v45,
             v44,
             v43,
             v42,
             v41,
             v40,
             v39,
             v38,
             v37,
             v35,
             v34,
             v33,
             v31);
  }
  return result;
}

double static InfraStatistics.none.getter@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_1000BCE0C(uint64_t a1)
{
  return sub_1000BCE30(a1);
}

uint64_t sub_1000BCE30(uint64_t result)
{
  unint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    uint64_t v3 = result;
    unint64_t v27 = v2 - 8;
    unint64_t v28 = *(void *)(result + 16);
    if (v2 >= 8) {
      int64_t v4 = 8;
    }
    else {
      int64_t v4 = *(void *)(result + 16);
    }
    memset(v36, 0, 61);
    BYTE4(v36[0]) = v4;
    uint64_t v26 = result + 32;
    *(void *)Class v31 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_1000836A4(0, v4, 0);
    uint64_t v5 = 0;
    unint64_t v6 = _swiftEmptyArrayStorage;
    unint64_t v7 = _swiftEmptyArrayStorage[2];
    uint64_t v8 = 7 * v7;
    uint64_t v9 = 7 * v4;
    do
    {
      v1.i32[0] = *(_DWORD *)(v3 + v5 + 32);
      char v10 = *(unsigned char *)(v3 + v5 + 36);
      char v11 = *(unsigned char *)(v3 + v5 + 37);
      char v12 = *(unsigned char *)(v3 + v5 + 38);
      *(void *)Class v31 = v6;
      unint64_t v13 = v6[3];
      unint64_t v14 = v7 + 1;
      if (v7 >= v13 >> 1)
      {
        sub_1000836A4(v13 > 1, v7 + 1, 1);
        unint64_t v6 = *(void **)v31;
      }
      long long v6[2] = v14;
      uint64_t v15 = (char *)v6 + v8 + v5;
      *((_DWORD *)v15 + 8) = vmovn_s16((int16x8_t)vmovl_u8(v1)).u32[0];
      v15[36] = v10;
      v15[37] = v11;
      v15[38] = v12;
      v5 += 7;
      unint64_t v7 = v14;
    }
    while (v9 != v5);
    swift_bridgeObjectRelease();
    uint64_t v16 = v6[2];
    if (v16)
    {
      NSNumber v17 = (char *)v6 + 38;
      NSNumber v18 = (unsigned char *)((unint64_t)v36 | 0xB);
      do
      {
        __int16 v19 = *((_WORD *)v17 - 1);
        char v20 = *v17;
        *(_DWORD *)(v18 - 6) = *(_DWORD *)(v17 - 6);
        *((_WORD *)v18 - 1) = v19;
        *NSNumber v18 = v20;
        v18 += 7;
        v17 += 7;
        --v16;
      }
      while (v16);
    }
    swift_bridgeObjectRelease();
    *(_DWORD *)Class v31 = v36[0];
    *(_OWORD *)&v31[4] = *(_OWORD *)((char *)v36 + 4);
    long long v32 = *(_OWORD *)((char *)&v36[1] + 4);
    long long v33 = *(_OWORD *)((char *)&v36[2] + 4);
    uint64_t v34 = *(void *)((char *)&v36[3] + 4);
    char v35 = BYTE12(v36[3]);
    uint64_t v21 = *(void *)(v29 + 16);
    uint64_t v22 = *(void *)(v29 + 24);
    swift_retain();
    swift_bridgeObjectRetain();
    AppleDevice.setRequest(requestType:data:on:)(0x16FuLL, (uint64_t)v31, (uint64_t)v36, 0, v21, v22);
    swift_bridgeObjectRelease();
    double result = swift_release();
    if (!v30 && v28 >= 9)
    {
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain_n();
      unint64_t v23 = (void *)swift_dynamicCastClass();
      if (!v23)
      {
        swift_bridgeObjectRelease();
        unint64_t v23 = _swiftEmptyArrayStorage;
      }
      uint64_t v24 = v23[2];
      swift_release();
      if (v24 == v27)
      {
        unint64_t v25 = (void *)swift_dynamicCastClass();
        if (!v25)
        {
          swift_bridgeObjectRelease();
          unint64_t v25 = _swiftEmptyArrayStorage;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        unint64_t v25 = sub_10009D104(v3, v26, 8, (2 * v28) | 1);
      }
      swift_bridgeObjectRelease();
      sub_1000BCE30(v25);
      return swift_release();
    }
  }
  return result;
}

uint64_t IO80211Driver<>.received(keepAliveDatapathIdentifiers:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = *(void *)(result + 16);
  if (v6)
  {
    uint64_t v7 = result;
    unint64_t v34 = v6 - 8;
    unint64_t v35 = *(void *)(result + 16);
    if (v6 >= 8) {
      int64_t v8 = 8;
    }
    else {
      int64_t v8 = *(void *)(result + 16);
    }
    memset(v44, 0, 61);
    BYTE4(v44[0]) = v8;
    uint64_t v33 = result + 32;
    *(void *)Class v39 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_1000836A4(0, v8, 0);
    uint64_t v9 = 0;
    char v10 = _swiftEmptyArrayStorage;
    unint64_t v11 = _swiftEmptyArrayStorage[2];
    uint64_t v12 = 7 * v11;
    uint64_t v13 = 7 * v8;
    do
    {
      v5.i32[0] = *(_DWORD *)(v7 + v9 + 32);
      char v14 = *(unsigned char *)(v7 + v9 + 36);
      char v15 = *(unsigned char *)(v7 + v9 + 37);
      char v16 = *(unsigned char *)(v7 + v9 + 38);
      *(void *)Class v39 = v10;
      unint64_t v17 = v10[3];
      unint64_t v18 = v11 + 1;
      if (v11 >= v17 >> 1)
      {
        sub_1000836A4(v17 > 1, v11 + 1, 1);
        char v10 = *(void **)v39;
      }
      v10[2] = v18;
      __int16 v19 = (char *)v10 + v12 + v9;
      *((_DWORD *)v19 + 8) = vmovn_s16((int16x8_t)vmovl_u8(v5)).u32[0];
      v19[36] = v14;
      v19[37] = v15;
      v19[38] = v16;
      v9 += 7;
      unint64_t v11 = v18;
    }
    while (v13 != v9);
    swift_bridgeObjectRelease();
    uint64_t v20 = v10[2];
    if (v20)
    {
      uint64_t v21 = (char *)v10 + 38;
      uint64_t v22 = (unsigned char *)((unint64_t)v44 | 0xB);
      do
      {
        __int16 v23 = *((_WORD *)v21 - 1);
        char v24 = *v21;
        *(_DWORD *)(v22 - 6) = *(_DWORD *)(v21 - 6);
        *((_WORD *)v22 - 1) = v23;
        *uint64_t v22 = v24;
        v22 += 7;
        v21 += 7;
        --v20;
      }
      while (v20);
    }
    swift_bridgeObjectRelease();
    *(_DWORD *)Class v39 = v44[0];
    *(_OWORD *)&v39[4] = *(_OWORD *)((char *)v44 + 4);
    long long v40 = *(_OWORD *)((char *)&v44[1] + 4);
    long long v41 = *(_OWORD *)((char *)&v44[2] + 4);
    uint64_t v42 = *(void *)((char *)&v44[3] + 4);
    char v43 = BYTE12(v44[3]);
    type metadata accessor for apple80211_nan_keep_alive_dp_identifer(0);
    uint64_t v26 = v25;
    uint64_t v27 = *(void *)(a3 + 8);
    uint64_t v28 = *(void *)(a4 + 16);
    swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    double result = sub_1000BF4AC(367, (uint64_t)v39, a2, v26, v27, v28, AssociatedConformanceWitness);
    if (!v4 && v35 >= 9)
    {
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain_n();
      uint64_t v30 = (void *)swift_dynamicCastClass();
      if (!v30)
      {
        swift_bridgeObjectRelease();
        uint64_t v30 = _swiftEmptyArrayStorage;
      }
      uint64_t v31 = v30[2];
      swift_release();
      if (v31 == v34)
      {
        long long v32 = (void *)swift_dynamicCastClass();
        if (!v32)
        {
          swift_bridgeObjectRelease();
          long long v32 = _swiftEmptyArrayStorage;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        long long v32 = sub_10009D104(v7, v33, 8, (2 * v35) | 1);
      }
      swift_bridgeObjectRelease();
      (*(void (**)(void *, uint64_t, uint64_t))(a4 + 360))(v32, a2, a4);
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1000BD4B8@<X0>(uint64_t *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9 = *a1;
  uint64_t v10 = swift_allocObject();
  uint64_t result = AppleIO80211Driver.init(device:role:name:)(v9, a2, a3, a4);
  *a5 = v10;
  return result;
}

uint64_t sub_1000BD524@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(*(void *)v1 + 40);
  return swift_retain();
}

uint64_t sub_1000BD534@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = (void *)*v1;
  swift_beginAccess();
  uint64_t v4 = v3[6];
  uint64_t v5 = v3[7];
  uint64_t v6 = v3[8];
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  return sub_1000C9858(v4, v5, v6);
}

uint64_t sub_1000BD588(long long *a1)
{
  long long v8 = *a1;
  uint64_t v2 = *((void *)a1 + 2);
  uint64_t v3 = (void *)*v1;
  swift_beginAccess();
  uint64_t v4 = v3[6];
  uint64_t v5 = v3[7];
  uint64_t v6 = v3[8];
  *((_OWORD *)v3 + 3) = v8;
  v3[8] = v2;
  return sub_1000C9898(v4, v5, v6);
}

uint64_t (*sub_1000BD5E8())()
{
  return j_j__swift_endAccess;
}

void *sub_1000BD640()
{
  return AppleIO80211Driver.capabilities.getter();
}

uint64_t sub_1000BD664(uint64_t *a1)
{
  return sub_1000BD6B4(*a1, (uint64_t)sub_10000E464, (uint64_t)sub_10000E464);
}

uint64_t sub_1000BD6B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 32) == 4)
  {
    memset(v21, 0, sizeof(v21));
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t v8 = *(void *)(a1 + 24);
    swift_getKeyPath();
    unint64_t v17 = v21;
    uint64_t v18 = __chkstk_darwin();
    uint64_t v19 = 16;
    swift_bridgeObjectRetain();
    sub_10000E350(a2, (uint64_t)v16, v7, v8);
    swift_bridgeObjectRelease();
    swift_release();
    v20[0] = v21[0];
    *(_OWORD *)&v20[1] = *(_OWORD *)&v21[1];
    uint64_t v9 = (char *)v21;
    uint64_t v10 = *(void *)(v3 + 16);
    uint64_t v11 = *(void *)(v3 + 24);
    swift_retain();
    swift_bridgeObjectRetain();
    unint64_t v12 = 293;
  }
  else
  {
    if (!*(unsigned char *)(a1 + 32))
    {
      sub_10000F000();
      swift_allocError();
      *(_OWORD *)uint64_t v4 = xmmword_1003B2F30;
      *(unsigned char *)(v4 + 16) = 0;
      return swift_willThrow();
    }
    memset(v21, 0, 20);
    uint64_t v14 = *(void *)(a1 + 16);
    uint64_t v15 = *(void *)(a1 + 24);
    swift_getKeyPath();
    unint64_t v17 = v21;
    uint64_t v18 = __chkstk_darwin();
    uint64_t v19 = 16;
    swift_bridgeObjectRetain();
    sub_10000E350(a3, (uint64_t)v16, v14, v15);
    swift_bridgeObjectRelease();
    swift_release();
    LODWORD(v20[0]) = v21[0];
    *(_OWORD *)((char *)v20 + 4) = *(_OWORD *)((char *)v21 + 4);
    uint64_t v9 = (char *)&v20[2] + 4;
    uint64_t v10 = *(void *)(v3 + 16);
    uint64_t v11 = *(void *)(v3 + 24);
    swift_retain();
    swift_bridgeObjectRetain();
    unint64_t v12 = 95;
  }
  AppleDevice.setRequest(requestType:data:on:)(v12, (uint64_t)v20, (uint64_t)v9, 0, v10, v11);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t DeviceDriver<>.destroyInterface(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  int v11 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(a4 + 32))(a2, a4);
  if (v11 == 4)
  {
    memset(v29, 0, sizeof(v29));
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 40))(a2, a4);
    uint64_t v16 = v15;
    swift_getKeyPath();
    uint64_t v30 = v6;
    uint64_t v25 = v29;
    uint64_t v26 = __chkstk_darwin();
    uint64_t v27 = 16;
    sub_10000E350((uint64_t)sub_10000E464, (uint64_t)v24, v14, v16);
    swift_bridgeObjectRelease();
    swift_release();
    v28[0] = v29[0];
    *(_OWORD *)&v28[1] = *(_OWORD *)&v29[1];
    type metadata accessor for apple80211_companion_skywalk_if_create(0);
    uint64_t v18 = v17;
    uint64_t v19 = 293;
  }
  else
  {
    if (!v11)
    {
      sub_10000F000();
      swift_allocError();
      *(_OWORD *)uint64_t v12 = xmmword_1003B2F30;
      *(unsigned char *)(v12 + 16) = 0;
      return swift_willThrow();
    }
    memset(v29, 0, 20);
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 40))(a2, a4);
    uint64_t v22 = v21;
    swift_getKeyPath();
    uint64_t v30 = v6;
    uint64_t v25 = v29;
    uint64_t v26 = __chkstk_darwin();
    uint64_t v27 = 16;
    sub_10000E350((uint64_t)sub_10000E464, (uint64_t)v24, v20, v22);
    swift_bridgeObjectRelease();
    swift_release();
    LODWORD(v28[0]) = v29[0];
    *(_OWORD *)((char *)v28 + 4) = *(_OWORD *)((char *)v29 + 4);
    type metadata accessor for apple80211_virt_if_delete_data(0);
    uint64_t v18 = v23;
    uint64_t v19 = 95;
  }
  return sub_1000BF4AC(v19, (uint64_t)v28, a2, v18, a3, a4, a5);
}

uint64_t sub_1000BDBC4()
{
  return *(unsigned __int8 *)(*(void *)v0 + 32);
}

uint64_t sub_1000BDBD0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1000BDC04()
{
  return sub_1000C4FE0();
}

uint64_t DeviceDriver<>.supportedChannels.getter()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = v0;
  type metadata accessor for apple80211_channels_info(0);
  sub_1000BF380(207, v8, v7, v8, v6, v4, v2);
  memcpy(v12, __src, sizeof(v12));
  memcpy(__src, v12, sizeof(__src));
  sub_1000BF65C((unint64_t)__src, (uint64_t)v12, &v10);
  return v10;
}

uint64_t sub_1000BDD94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CB14C(a1 & 0xFFFFFFFFFFFFLL, a2, a3);
}

uint64_t IO80211Driver<>.postPeerPresence(macAddress:ipv6Address:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v39 = a4;
  uint64_t v40 = a5;
  uint64_t v37 = a2;
  uint64_t v38 = a3;
  uint64_t v36 = a8;
  uint64_t v13 = *(void *)(a8 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v17 = (char *)&v33 - v16;
  (*(void (**)(uint64_t, uint64_t))(v13 + 56))(a6, v13);
  uint64_t v18 = *(void *)(a7 + 8);
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 40);
  uint64_t v33 = a6;
  uint64_t v34 = v9;
  uint64_t v20 = v19(a6, v18);
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a9 + 24);
  uint64_t v35 = a1;
  uint64_t v22 = v47;
  v21(a1 & 0xFFFFFFFFFFFFLL, v37, v38, v39, v40, v20, v23, 1, AssociatedTypeWitness, a9);
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, AssociatedTypeWitness);
    return swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, AssociatedTypeWitness);
    swift_bridgeObjectRelease();
    uint64_t v25 = v33;
    char v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 32))(v33, v18);
    uint64_t v47 = v13;
    switch(v26)
    {
      case 1:
        swift_bridgeObjectRelease();
        uint64_t v27 = v35;
        uint64_t v28 = v18;
        goto LABEL_6;
      default:
        char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v27 = v35;
        uint64_t v28 = v18;
        if (v29)
        {
LABEL_6:
          int v41 = 1;
          __int16 v42 = v27;
          char v43 = BYTE2(v27);
          char v44 = BYTE3(v27);
          char v45 = BYTE4(v27);
          char v46 = BYTE5(v27);
          type metadata accessor for apple80211_awdl_ppp_done(0);
          uint64_t v31 = v30;
          uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
          uint64_t result = sub_1000BF4AC(415, (uint64_t)&v41, v25, v31, v47, v28, AssociatedConformanceWitness);
        }
        break;
    }
  }
  return result;
}

uint64_t sub_1000BE130(uint64_t a1, uint64_t a2)
{
  return sub_1000BE168(a1, a2, (uint64_t (*)(void *))sub_1000CBCE4);
}

uint64_t sub_1000BE168(uint64_t a1, uint64_t a2, uint64_t (*a3)(void *))
{
  void v5[4] = 0x3D67736D2D2069;
  v5[5] = 0xE700000000000000;
  String.append(_:)(*(Swift::String *)&a1);
  v5[2] = &v6;
  sub_10004EF00(a3, (uint64_t)v5, 0x3D67736D2D2069, 0xE700000000000000);
  return swift_bridgeObjectRelease();
}

uint64_t DeviceDriver<>.triggerCoreCapture(reason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v14 = 0x3D67736D2D2069;
  unint64_t v15 = 0xE700000000000000;
  String.append(_:)(*(Swift::String *)&a1);
  v12[2] = a3;
  v12[3] = a4;
  v12[4] = a5;
  v12[5] = a6;
  uint64_t v13 = v6;
  sub_10004EF00((uint64_t (*)(void *))sub_1000CAC00, (uint64_t)v12, 0x3D67736D2D2069, 0xE700000000000000);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000BE2A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000C5128(a1, a2, a3, a4, (uint64_t (*)(void *))sub_1000CBCCC);
}

uint64_t DeviceDriver<>.triggerWiFiChipReset(reason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned char v7[2] = a3;
  _OWORD v7[3] = a4;
  void v7[4] = a5;
  v7[5] = a6;
  return sub_10004EF00((uint64_t (*)(void *))sub_1000CAC30, (uint64_t)v7, a1, a2);
}

uint64_t sub_1000BE328@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC7CoreP2P18AppleIO80211Driver_logger;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t AppleIO80211Driver.description.getter()
{
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  strcpy((char *)v10, "IO80211Driver[");
  HIBYTE(v10[1]) = -18;
  unint64_t v1 = 0xEE00657275746375;
  uint64_t v2 = 0x7274736172666E49;
  switch(*(unsigned char *)(v0 + 32))
  {
    case 1:
      unint64_t v1 = 0xE400000000000000;
      uint64_t v2 = 1279547201;
      break;
    case 2:
      unint64_t v1 = 0xE300000000000000;
      uint64_t v2 = 5128526;
      break;
    case 3:
      unint64_t v1 = 0xE800000000000000;
      uint64_t v2 = 0x61746144204E414ELL;
      break;
    case 4:
      unint64_t v1 = 0xEB0000000079636ELL;
      uint64_t v2 = 0x6574614C20776F4CLL;
      break;
    default:
      break;
  }
  unint64_t v3 = v1;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 8250;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  uint64_t v6 = *(void *)(v0 + 16);
  uint64_t v5 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = v6;
  v7._object = v5;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 93;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  return v10[0];
}

uint64_t sub_1000BE518()
{
  return AppleIO80211Driver.description.getter();
}

uint64_t sub_1000BE53C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  unint64_t v15 = (char *)&v19 - v14;
  (*(void (**)(uint64_t, uint64_t))(a5 + 56))(a4, a5);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 40))(a4, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 24))(a1, v19, v20, 0, v16, v17, AssociatedTypeWitness, a7);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, AssociatedTypeWitness);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000BE6C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  unint64_t v15 = (char *)&v19 - v14;
  (*(void (**)(uint64_t, uint64_t))(a5 + 56))(a4, a5);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 40))(a4, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 32))(a1, v19, v20, 0, v16, v17, AssociatedTypeWitness, a7);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, AssociatedTypeWitness);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000BE854(unint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = swift_slowAlloc();
  *(void *)uint64_t v5 = 0;
  *(_DWORD *)(v5 + 8) = 0;
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.getRequest(requestType:data:on:)(a1, v5, v5 + 12, 0, v6, v7);
  swift_bridgeObjectRelease();
  swift_release();
  if (!v2) {
    uint64_t v3 = *(void *)v5;
  }
  swift_slowDealloc();
  return v3;
}

uint64_t sub_1000BE938(unint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = (uint64_t *)swift_slowAlloc();
  v5[1] = 0;
  v5[2] = 0;
  *uint64_t v5 = 0;
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.getRequest(requestType:data:on:)(a1, (uint64_t)v5, (uint64_t)(v5 + 3), 0, v6, v7);
  swift_bridgeObjectRelease();
  swift_release();
  if (!v2) {
    uint64_t v3 = *v5;
  }
  swift_slowDealloc();
  return v3;
}

uint64_t sub_1000BEA24(unint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = swift_slowAlloc();
  *(void *)uint64_t v5 = 0;
  *(_DWORD *)(v5 + 8) = 0;
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.getRequest(requestType:data:on:)(a1, v5, v5 + 12, 0, v6, v7);
  swift_bridgeObjectRelease();
  swift_release();
  if (!v2) {
    uint64_t v3 = *(void *)v5;
  }
  swift_slowDealloc();
  return v3;
}

uint64_t sub_1000BEB08@<X0>(unint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v6 = (_OWORD *)swift_slowAlloc();
  *uint64_t v6 = 0u;
  v6[1] = 0u;
  long long v6[2] = 0u;
  v6[3] = 0u;
  v6[4] = 0u;
  v6[5] = 0u;
  v6[6] = 0u;
  v6[7] = 0u;
  v6[8] = 0u;
  v6[9] = 0u;
  v6[10] = 0u;
  v6[11] = 0u;
  v6[12] = 0u;
  v6[13] = 0u;
  v6[14] = 0u;
  v6[15] = 0u;
  v6[16] = 0u;
  v6[17] = 0u;
  v6[18] = 0u;
  v6[19] = 0u;
  v6[20] = 0u;
  v6[21] = 0u;
  v6[22] = 0u;
  unsigned char v6[23] = 0u;
  unsigned char v6[24] = 0u;
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v8 = *(void *)(v2 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.getRequest(requestType:data:on:)(a1, (uint64_t)v6, (uint64_t)(v6 + 25), 0, v7, v8);
  swift_bridgeObjectRelease();
  swift_release();
  if (!v3) {
    memcpy(a2, v6, 0x190uLL);
  }
  return swift_slowDealloc();
}

uint64_t sub_1000BEC0C(unint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = (uint64_t *)swift_slowAlloc();
  *uint64_t v5 = 0;
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.getRequest(requestType:data:on:)(a1, (uint64_t)v5, (uint64_t)(v5 + 1), 0, v6, v7);
  swift_bridgeObjectRelease();
  swift_release();
  if (!v2) {
    uint64_t v3 = *v5;
  }
  swift_slowDealloc();
  return v3;
}

uint64_t sub_1000BECD0@<X0>(unint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v7 = (void *)swift_slowAlloc();
  bzero(v7, 0xE80uLL);
  uint64_t v8 = *(void *)(v2 + 16);
  uint64_t v9 = *(void *)(v2 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.getRequest(requestType:data:on:)(a1, (uint64_t)v7, (uint64_t)v7 + 3712, 0, v8, v9);
  swift_bridgeObjectRelease();
  swift_release();
  if (!v4) {
    memcpy(a2, v7, 0xE80uLL);
  }
  return swift_slowDealloc();
}

uint64_t sub_1000BEDA4@<X0>(unint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v7 = (void *)swift_slowAlloc();
  bzero(v7, 0xFB0uLL);
  uint64_t v8 = *(void *)(v2 + 16);
  uint64_t v9 = *(void *)(v2 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.getRequest(requestType:data:on:)(a1, (uint64_t)v7, (uint64_t)v7 + 4016, 0, v8, v9);
  swift_bridgeObjectRelease();
  swift_release();
  if (!v4) {
    memcpy(a2, v7, 0xFB0uLL);
  }
  return swift_slowDealloc();
}

uint64_t sub_1000BEE78@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = swift_slowAlloc();
  *(void *)uint64_t v6 = 0;
  *(_DWORD *)(v6 + 8) = 0;
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v8 = *(void *)(v2 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.getRequest(requestType:data:on:)(a1, v6, v6 + 12, 0, v7, v8);
  swift_bridgeObjectRelease();
  swift_release();
  if (!v3)
  {
    *(void *)a2 = *(void *)v6;
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(v6 + 8);
  }
  return swift_slowDealloc();
}

uint64_t sub_1000BEF4C(unint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = (_WORD *)swift_slowAlloc();
  *uint64_t v5 = 0;
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.getRequest(requestType:data:on:)(a1, (uint64_t)v5, (uint64_t)(v5 + 1), 0, v6, v7);
  swift_bridgeObjectRelease();
  swift_release();
  if (!v2) {
    uint64_t v3 = (unsigned __int16)*v5;
  }
  swift_slowDealloc();
  return v3;
}

uint64_t sub_1000BF024(unint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = (unsigned char *)swift_slowAlloc();
  *uint64_t v5 = 0;
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.getRequest(requestType:data:on:)(a1, (uint64_t)v5, (uint64_t)(v5 + 1), 0, v6, v7);
  swift_bridgeObjectRelease();
  swift_release();
  if (!v2) {
    uint64_t v3 = *v5;
  }
  swift_slowDealloc();
  return v3;
}

uint64_t sub_1000BF0E8(unint64_t a1)
{
  uint64_t v4 = (unsigned __int16 *)swift_slowAlloc();
  *uint64_t v4 = 0;
  *((unsigned char *)v4 + 2) = 0;
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.getRequest(requestType:data:on:)(a1, (uint64_t)v4, (uint64_t)v4 + 3, 0, v5, v6);
  swift_bridgeObjectRelease();
  swift_release();
  if (v2) {
    return swift_slowDealloc();
  }
  int v8 = *((unsigned __int8 *)v4 + 2);
  int v9 = *v4;
  swift_slowDealloc();
  return v9 | (v8 << 16);
}

uint64_t sub_1000BF1C8(unint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = (void *)swift_slowAlloc();
  *uint64_t v5 = 0;
  v5[1] = 0;
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.getRequest(requestType:data:on:)(a1, (uint64_t)v5, (uint64_t)(v5 + 2), 0, v6, v7);
  swift_bridgeObjectRelease();
  swift_release();
  if (!v2) {
    uint64_t v3 = *(unsigned int *)v5;
  }
  swift_slowDealloc();
  return v3;
}

uint64_t sub_1000BF2A8@<X0>(unint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v7 = (void *)swift_slowAlloc();
  bzero(v7, 0x2720uLL);
  uint64_t v8 = *(void *)(v2 + 16);
  uint64_t v9 = *(void *)(v2 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.getRequest(requestType:data:on:)(a1, (uint64_t)v7, (uint64_t)v7 + 10016, 0, v8, v9);
  swift_bridgeObjectRelease();
  swift_release();
  if (!v4) {
    memcpy(a2, v7, 0x2720uLL);
  }
  return swift_slowDealloc();
}

uint64_t sub_1000BF380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  size_t v12 = *(void *)(*(void *)(a4 - 8) + 64);
  uint64_t v13 = (void *)swift_slowAlloc();
  uint64_t v14 = (uint64_t)v13;
  uint64_t v15 = (uint64_t)v13 + v12;
  if (v12) {
    bzero(v13, v12);
  }
  sub_1000BE53C(a1, v14, v15, a3, a5, a6, a7);
  if (!v17) {
    UnsafeMutableRawBufferPointer.load<A>(fromByteOffset:as:)();
  }
  return swift_slowDealloc();
}

uint64_t sub_1000BF4AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = *(void *)(a4 - 8);
  __chkstk_darwin();
  uint64_t v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v14 + 16))(v16);
  uint64_t v22 = a3;
  uint64_t v23 = a4;
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v26 = a7;
  uint64_t v27 = v7;
  uint64_t v28 = a1;
  uint64_t v17 = sub_100010BCC((uint64_t *)&unk_1004843F0);
  sub_10024DEDC((uint64_t)v16, (uint64_t)sub_1000CBB5C, (uint64_t)v21, a4, v17, (uint64_t)&type metadata for () + 8, (uint64_t)&protocol self-conformance witness table for Error, (uint64_t)&v20);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, a4);
}

unint64_t CountryCode.apple80211Value.getter(__int16 a1)
{
  return ((unint64_t)a1 << 32) | ((unint64_t)HIBYTE(a1) << 40);
}

unint64_t sub_1000BF65C@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  int v3 = *(unsigned __int16 *)(a2 + 12);
  if (*(_WORD *)(a2 + 12))
  {
    uint64_t v4 = result;
    int v5 = 0;
    uint64_t v6 = _swiftEmptyArrayStorage;
    do
    {
      unsigned __int16 v14 = v5;
      uint64_t result = sub_1000BF7B8(&v14, v4, (uint64_t)&v12);
      unint64_t v8 = v12 | ((unint64_t)v13 << 32);
      if ((v8 & 0xFF00000000) != 0x300000000)
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (unint64_t)sub_1000C5C4C(0, v6[2] + 1, 1, v6);
          uint64_t v6 = (void *)result;
        }
        unint64_t v10 = v6[2];
        unint64_t v9 = v6[3];
        if (v10 >= v9 >> 1)
        {
          uint64_t result = (unint64_t)sub_1000C5C4C((void *)(v9 > 1), v10 + 1, 1, v6);
          uint64_t v6 = (void *)result;
        }
        long long v6[2] = v10 + 1;
        uint64_t v7 = &v6[v10];
        *((_DWORD *)v7 + 8) = v8;
        *((unsigned char *)v7 + 36) = BYTE4(v8);
        *((unsigned char *)v7 + 37) = BYTE5(v8);
      }
      ++v5;
    }
    while (v5 != v3);
  }
  else
  {
    uint64_t v6 = _swiftEmptyArrayStorage;
  }
  *a3 = v6;
  return result;
}

unint64_t sub_1000BF7B8@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a1;
  swift_getKeyPath();
  unint64_t result = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if (v7)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v8 = *(&type metadata for UInt8 - 1);
  unint64_t v9 = *(void (**)(unsigned __int8 *, unint64_t))(v8 + 16);
  uint64_t v10 = *(void *)(v8 + 72) * v5;
  v9(&v22, a2 + result + v10);
  swift_release();
  unsigned int v18 = v22;
  swift_getKeyPath();
  unint64_t result = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if (v11)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  ((void (*)(unsigned __int8 *, unint64_t, void *))v9)(&v21, a2 + result + v10, &type metadata for UInt8);
  swift_release();
  int v12 = v21;
  swift_getKeyPath();
  unint64_t result = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if (v13)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  ((void (*)(unsigned __int8 *, unint64_t, void *))v9)(&v20, a2 + result + v10, &type metadata for UInt8);
  swift_release();
  int v14 = v20;
  swift_getKeyPath();
  unint64_t result = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if (v15)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  if (v14) {
    int v16 = ((v12 != 0) << 8) | 4;
  }
  else {
    int v16 = (v12 != 0) << 8;
  }
  ((void (*)(char *, unint64_t, void *))v9)(&v19, a2 + result + v10, &type metadata for UInt8);
  swift_release();
  if (v19) {
    unsigned int v17 = v16 | 0x400;
  }
  else {
    unsigned int v17 = v16;
  }
  unint64_t result = sub_1000C7CBC(v18, v17);
  *(_DWORD *)a3 = result;
  *(_WORD *)(a3 + 4) = WORD2(result);
  return result;
}

void sub_1000BF990(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  int v3 = sub_1003ABD60(a1, &v7);
  uint64_t v4 = (uint64_t)v3 + v7;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.setRequest(requestType:data:on:)(0x9DuLL, (uint64_t)v3, v4, 0, v5, v6);
  swift_bridgeObjectRelease();
  swift_release();
  free(v3);
}

void sub_1000BFA6C(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  int v3 = sub_1003ABE68(a1, &v7);
  uint64_t v4 = (uint64_t)v3 + v7;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.setRequest(requestType:data:on:)(0xEFuLL, (uint64_t)v3, v4, 0, v5, v6);
  swift_bridgeObjectRelease();
  swift_release();
  free(v3);
}

void sub_1000BFB48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t *), uint64_t a8)
{
  uint64_t v14 = 0;
  char v13 = (void *)a7(a1, &v14);
  sub_1000BE6C8(a8, (uint64_t)v13, (uint64_t)v13 + v14, a3, a4, a5, a6);
  free(v13);
}

uint64_t sub_1000BFC1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_10006EC68(a2, (uint64_t)v40, &qword_10047DBA0);
  if (v41)
  {
    int v13 = 0;
    char v14 = 0;
    char v15 = 0;
    uint64_t v17 = v40[0];
    uint64_t v16 = v40[1];
    char v18 = 28;
    char v19 = 30;
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v16 = 0;
    char v19 = 0;
    char v18 = 0;
    char v15 = 16;
    int v13 = v40[0];
    char v14 = 2;
  }
  int v22 = 1;
  __int16 v23 = a1;
  char v24 = BYTE2(a1);
  char v25 = BYTE3(a1);
  char v26 = BYTE4(a1);
  char v27 = BYTE5(a1);
  char v28 = v15;
  char v29 = v14;
  __int16 v30 = 0;
  int v31 = v13;
  uint64_t v32 = 0;
  char v33 = v18;
  char v34 = v19;
  __int16 v35 = 0;
  int v36 = 0;
  uint64_t v37 = v17;
  uint64_t v38 = v16;
  int v39 = 0;
  type metadata accessor for apple80211_infra_peer_address_data(0);
  return sub_1000BF4AC(a3, (uint64_t)&v22, a4, v20, a5, *(void *)(a6 + 16), a7);
}

uint64_t sub_1000BFD5C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, int64_t a3@<X2>, unint64_t a4@<X3>, void *a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8)
{
  uint64_t v80 = a6;
  int64_t v90 = a3;
  uint64_t v87 = a8;
  uint64_t v11 = *a1;
  uint64_t v12 = *a2;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v77 = *(void *)(v13 - 8);
  uint64_t v78 = v13;
  __chkstk_darwin();
  uint64_t v81 = (char *)&v72 - v14;
  uint64_t v79 = *(a5 - 1);
  __chkstk_darwin();
  long long v76 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = *(void *)(class metadata base offset for KeyPath + v12 + 8);
  uint64_t v85 = *(void *)(v86 - 8);
  __chkstk_darwin();
  long long v84 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v83 = (char *)&v72 - v17;
  uint64_t v19 = *(void *)(v11 + v18);
  uint64_t v88 = *(void *)(type metadata accessor for Optional() - 8);
  __chkstk_darwin();
  unsigned __int8 v21 = (char *)&v72 - v20;
  uint64_t v89 = *(void *)(v19 - 8);
  uint64_t v22 = *(void *)(v89 + 64);
  __chkstk_darwin();
  char v24 = (char *)&v72 - v23;
  uint64_t v25 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if ((v26 & 1) == 0)
  {
    long long v82 = a5;
    unint64_t v27 = a4 >> 62;
    uint64_t v28 = 0;
    switch(a4 >> 62)
    {
      case 1uLL:
        uint64_t v28 = (int)v90;
        break;
      case 2uLL:
        uint64_t v28 = *(void *)(v90 + 16);
        break;
      default:
        break;
    }
    uint64_t v29 = v28 + v22;
    if (__OFADD__(v28, v22))
    {
      __break(1u);
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    uint64_t v30 = v27;
    switch((int)v27)
    {
      case 1:
        if (v29 >= v90 >> 32) {
          break;
        }
        goto LABEL_13;
      case 2:
        if (v29 < *(void *)(v90 + 24)) {
          goto LABEL_13;
        }
        break;
      case 3:
        if ((v29 & 0x8000000000000000) == 0) {
          break;
        }
        goto LABEL_54;
      default:
        if (v29 >= BYTE6(a4)) {
          break;
        }
LABEL_13:
        if (v27)
        {
          if (v27 == 1) {
            uint64_t v30 = (int)v90;
          }
          else {
            uint64_t v30 = *(void *)(v90 + 16);
          }
        }
        if (v29 < v30) {
          goto LABEL_54;
        }
        uint64_t v73 = (void (*)(uint64_t, char *, uint64_t))v25;
        long long v74 = v24;
        uint64_t v75 = a7;
        uint64_t v34 = Data._Representation.subscript.getter();
        unint64_t v36 = v35;
        Data.load<A>(as:)(v19, v34, v35, v19);
        sub_10000C970(v34, v36);
        uint64_t v37 = v89;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v89 + 56))(v21, 0, 1, v19);
        uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v37 + 32);
        int v39 = v74;
        v38(v74, v21, v19);
        if (v27)
        {
          unint64_t v40 = a4;
          uint64_t v41 = v90;
          if (v27 == 1)
          {
            uint64_t v42 = (uint64_t)v73 + (int)v90;
            if (__OFADD__(v73, (int)v90))
            {
LABEL_50:
              __break(1u);
LABEL_51:
              __break(1u);
LABEL_52:
              __break(1u);
LABEL_53:
              __break(1u);
LABEL_54:
              __break(1u);
              JUMPOUT(0x1000C06BCLL);
            }
            if (v42 >= v90 >> 32) {
              goto LABEL_33;
            }
            goto LABEL_28;
          }
          uint64_t v45 = *(void *)(v90 + 16);
          uint64_t v42 = (uint64_t)v73 + v45;
          if (__OFADD__(v45, v73)) {
            goto LABEL_51;
          }
          if (v42 >= *(void *)(v90 + 24))
          {
LABEL_33:
            (*(void (**)(char *, uint64_t, uint64_t, unint64_t))(v37 + 8))(v39, v19, v41, v40);
LABEL_45:
            TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8)
                                                                                 + 56))(v75, 1, 1, TupleTypeMetadata2);
          }
        }
        else
        {
          unint64_t v40 = a4;
          uint64_t v41 = v90;
          uint64_t v42 = (uint64_t)v73;
          if ((uint64_t)v73 >= BYTE6(a4)) {
            goto LABEL_33;
          }
        }
LABEL_28:
        if (v27)
        {
          if (v27 == 1)
          {
            uint64_t v43 = (int)v41;
            uint64_t v44 = v41 >> 32;
          }
          else
          {
            uint64_t v43 = *(void *)(v41 + 16);
            uint64_t v44 = *(void *)(v41 + 24);
          }
        }
        else
        {
          uint64_t v43 = 0;
          uint64_t v44 = BYTE6(v40);
        }
        if (v44 >= v42 && v44 >= v43)
        {
          uint64_t v46 = Data._Representation.subscript.getter();
          uint64_t v48 = 0;
          uint64_t v73 = (void (*)(uint64_t, char *, uint64_t))v38;
          uint64_t v88 = v37 + 32;
          switch(v47 >> 62)
          {
            case 1uLL:
              LODWORD(v48) = HIDWORD(v46) - v46;
              if (__OFSUB__(HIDWORD(v46), v46)) {
                goto LABEL_52;
              }
              uint64_t v48 = (int)v48;
LABEL_43:
              uint64_t v52 = v46;
              int64_t v90 = v47;
              uint64_t v91 = v48;
              sub_10003AAFC();
              Class v53 = v83;
              uint64_t v54 = v86;
              dispatch thunk of BinaryInteger.init<A>(_:)();
              Class v55 = v84;
              swift_getAtKeyPath();
              id v56 = v39;
              char v57 = dispatch thunk of static Equatable.== infix(_:_:)();
              Class v58 = *(void (**)(char *, uint64_t))(v85 + 8);
              v58(v55, v54);
              v58(v53, v54);
              if (v57)
              {
                type metadata accessor for BinaryDecoder();
                uint64_t v59 = v81;
                Class v60 = v82;
                uint64_t v61 = v52;
                uint64_t v62 = v52;
                unint64_t v63 = v90;
                static BinaryDecoder.decode<A>(_:data:)((uint64_t)v82, v62, v90, v82);
                sub_10000C970(v61, v63);
                Class v65 = v60;
                uint64_t v66 = v79;
                (*(void (**)(char *, void, uint64_t, void *))(v79 + 56))(v59, 0, 1, v60);
                uint64_t v67 = *(void (**)(char *, char *, void *))(v66 + 32);
                uint64_t v68 = v76;
                v67(v76, v59, v60);
                uint64_t v69 = swift_getTupleTypeMetadata2();
                uint64_t v70 = v75;
                uint64_t v71 = (char *)(v75 + *(int *)(v69 + 48));
                v73(v75, v74, v19);
                v67(v71, v68, v65);
                return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56))(v70, 0, 1, v69);
              }
              (*(void (**)(char *, uint64_t))(v89 + 8))(v56, v19);
              sub_10000C970(v52, v90);
              break;
            case 2uLL:
              uint64_t v50 = *(void *)(v46 + 16);
              uint64_t v49 = *(void *)(v46 + 24);
              BOOL v51 = __OFSUB__(v49, v50);
              uint64_t v48 = v49 - v50;
              if (!v51) {
                goto LABEL_43;
              }
              goto LABEL_53;
            case 3uLL:
              goto LABEL_43;
            default:
              uint64_t v48 = BYTE6(v47);
              goto LABEL_43;
          }
          goto LABEL_45;
        }
        goto LABEL_49;
    }
  }
  uint64_t v31 = swift_getTupleTypeMetadata2();
  uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56);

  return v32(a7, 1, 1, v31);
}

uint64_t sub_1000C06EC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unsigned __int8 v3 = BYTE6(a3);
  unint64_t v4 = a3 >> 62;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  switch(v4)
  {
    case 1uLL:
      uint64_t v7 = (int)a2;
      uint64_t v6 = a2 >> 32;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a2 + 16);
      uint64_t v6 = *(void *)(a2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v7 = 0;
      uint64_t v6 = v3;
      break;
  }
  if (v6 < a1 || v6 < v7)
  {
    __break(1u);
    JUMPOUT(0x1000C0754);
  }
  return Data._Representation.subscript.getter();
}

uint64_t sub_1000C0764@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v6 = *(void *)(a4 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  switch(a3 >> 62)
  {
    case 1uLL:
      LODWORD(v9) = HIDWORD(a2) - a2;
      if (__OFSUB__(HIDWORD(a2), a2))
      {
        __break(1u);
LABEL_14:
        __break(1u);
        JUMPOUT(0x1000C089CLL);
      }
      uint64_t v9 = (int)v9;
LABEL_6:
      if (v7 == v9)
      {
LABEL_7:
        uint64_t v16 = *(void *)(a4 - 8);
        Data.load<A>(as:)(a1, a2, a3, a4);
        uint64_t v13 = 0;
        uint64_t v6 = v16;
      }
      else
      {
LABEL_9:
        uint64_t v13 = 1;
      }
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
      return v14(a5, v13, 1, a4);
    case 2uLL:
      uint64_t v11 = *(void *)(a2 + 16);
      uint64_t v10 = *(void *)(a2 + 24);
      BOOL v12 = __OFSUB__(v10, v11);
      uint64_t v9 = v10 - v11;
      if (!v12) {
        goto LABEL_6;
      }
      goto LABEL_14;
    case 3uLL:
      if (v7) {
        goto LABEL_9;
      }
      goto LABEL_7;
    default:
      uint64_t v9 = BYTE6(a3);
      goto LABEL_6;
  }
}

unint64_t sub_1000C08AC(unsigned __int16 a1, uint64_t a2)
{
  if (BYTE6(a2) == 24) {
    _s7CoreP2P21NANActionFrameSubtypeO8rawValueACSgs5UInt8V_tcfC_0(HIBYTE(a2));
  }
  return a1 | (unint64_t)(a2 << 16);
}

unint64_t sub_1000C0968(unsigned __int16 a1, unint64_t a2, unsigned int a3)
{
  return a1 | (HIDWORD(a2) << 16) | ((unint64_t)a3 << 48) | ((unint64_t)(a3 >> 8) << 56);
}

uint64_t sub_1000C0998(unint64_t a1, __int16 a2)
{
  LOWORD(v6) = HIWORD(a1);
  HIWORD(v6) = a2;
  unsigned int v2 = (a1 >> 16) - 1;
  if (v2 >= 4) {
    int v3 = 0x40000;
  }
  else {
    int v3 = v2 << 16;
  }
  if ((v6 - 1) >= 3) {
    int v4 = 50331648;
  }
  else {
    int v4 = (v6 - 1) << 24;
  }
  return v3 & 0xFFFF0000 | (unsigned __int16)a1 | v4;
}

int32x2_t sub_1000C09E0@<D0>(uint64_t a1@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 49);
  __src[0] = *(_OWORD *)(v1 + 33);
  __src[1] = v3;
  long long v4 = *(_OWORD *)(v1 + 81);
  __src[2] = *(_OWORD *)(v1 + 65);
  __src[3] = v4;
  long long v5 = *(_OWORD *)(v1 + 113);
  __src[4] = *(_OWORD *)(v1 + 97);
  __src[5] = v5;
  long long v6 = *(_OWORD *)(v1 + 145);
  __src[6] = *(_OWORD *)(v1 + 129);
  __src[7] = v6;
  long long v7 = *(_OWORD *)(v1 + 177);
  __src[8] = *(_OWORD *)(v1 + 161);
  __src[9] = v7;
  long long v8 = *(_OWORD *)(v1 + 209);
  __src[10] = *(_OWORD *)(v1 + 193);
  __src[11] = v8;
  long long v9 = *(_OWORD *)(v1 + 241);
  __src[12] = *(_OWORD *)(v1 + 225);
  __src[13] = v9;
  long long v10 = *(_OWORD *)(v1 + 273);
  __src[14] = *(_OWORD *)(v1 + 257);
  __src[15] = v10;
  long long v11 = *(_OWORD *)(v1 + 305);
  __src[16] = *(_OWORD *)(v1 + 289);
  __src[17] = v11;
  long long v12 = *(_OWORD *)(v1 + 337);
  __src[18] = *(_OWORD *)(v1 + 321);
  __src[19] = v12;
  long long v13 = *(_OWORD *)(v1 + 369);
  __src[20] = *(_OWORD *)(v1 + 353);
  __src[21] = v13;
  long long v14 = *(_OWORD *)(v1 + 401);
  __src[22] = *(_OWORD *)(v1 + 385);
  __src[23] = v14;
  long long v15 = *(_OWORD *)(v1 + 433);
  __src[24] = *(_OWORD *)(v1 + 417);
  __src[25] = v15;
  long long v16 = *(_OWORD *)(v1 + 465);
  __src[26] = *(_OWORD *)(v1 + 449);
  __src[27] = v16;
  long long v17 = *(_OWORD *)(v1 + 497);
  __src[28] = *(_OWORD *)(v1 + 481);
  __src[29] = v17;
  long long v18 = *(_OWORD *)(v1 + 529);
  __src[30] = *(_OWORD *)(v1 + 513);
  __src[31] = v18;
  long long v19 = *(_OWORD *)(v1 + 561);
  __src[32] = *(_OWORD *)(v1 + 545);
  __src[33] = v19;
  long long v20 = *(_OWORD *)(v1 + 593);
  __src[34] = *(_OWORD *)(v1 + 577);
  __src[35] = v20;
  long long v21 = *(_OWORD *)(v1 + 625);
  __src[36] = *(_OWORD *)(v1 + 609);
  __src[37] = v21;
  long long v22 = *(_OWORD *)(v1 + 657);
  __src[38] = *(_OWORD *)(v1 + 641);
  __src[39] = v22;
  long long v23 = *(_OWORD *)(v1 + 689);
  __src[40] = *(_OWORD *)(v1 + 673);
  __src[41] = v23;
  long long v24 = *(_OWORD *)(v1 + 721);
  __src[42] = *(_OWORD *)(v1 + 705);
  __src[43] = v24;
  long long v25 = *(_OWORD *)(v1 + 753);
  __src[44] = *(_OWORD *)(v1 + 737);
  __src[45] = v25;
  long long v26 = *(_OWORD *)(v1 + 785);
  __src[46] = *(_OWORD *)(v1 + 769);
  __src[47] = v26;
  long long v27 = *(_OWORD *)(v1 + 817);
  __src[48] = *(_OWORD *)(v1 + 801);
  __src[49] = v27;
  long long v28 = *(_OWORD *)(v1 + 849);
  __src[50] = *(_OWORD *)(v1 + 833);
  __src[51] = v28;
  long long v29 = *(_OWORD *)(v1 + 881);
  __src[52] = *(_OWORD *)(v1 + 865);
  __src[53] = v29;
  long long v30 = *(_OWORD *)(v1 + 913);
  __src[54] = *(_OWORD *)(v1 + 897);
  __src[55] = v30;
  long long v31 = *(_OWORD *)(v1 + 945);
  __src[56] = *(_OWORD *)(v1 + 929);
  __src[57] = v31;
  long long v32 = *(_OWORD *)(v1 + 977);
  __src[58] = *(_OWORD *)(v1 + 961);
  __src[59] = v32;
  uint64_t v33 = sub_100260F60(__src, *(unsigned __int16 *)(v1 + 31));
  unint64_t v35 = v34;
  unint64_t v36 = v34 >> 62;
  sub_100013D44(v33, v34);
  unint64_t v37 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v38 = type metadata accessor for BinaryDecoder();
  int v39 = (void *)swift_allocObject();
  v39[5] = &_swiftEmptyDictionarySingleton;
  v39[2] = v33;
  v39[3] = v35;
  uint64_t v40 = 0;
  switch(v36)
  {
    case 1uLL:
      uint64_t v40 = (int)v33;
      break;
    case 2uLL:
      uint64_t v40 = *(void *)(v33 + 16);
      break;
    default:
      break;
  }
  v39[4] = v40;
  swift_beginAccess();
  v39[5] = v37;
  swift_bridgeObjectRelease();
  v53[3] = v38;
  v53[4] = sub_1000CAF84((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
  v53[0] = v39;
  char v41 = sub_10019F2B0(v53);
  uint64_t v43 = v42;
  uint64_t v45 = v44;
  uint64_t v47 = v46;
  sub_10000C970(v33, v35);
  int32x2_t v49 = *(int32x2_t *)v1;
  int32x2_t v48 = *(int32x2_t *)(v1 + 8);
  __int16 v50 = *(_WORD *)(v1 + 4);
  *(_WORD *)a1 = *(_WORD *)(v1 + 6);
  int32x2_t result = vzip1_s32(v48, v49);
  *(int32x2_t *)(a1 + 2) = result;
  *(_WORD *)(a1 + 10) = v50;
  *(unsigned char *)(a1 + 16) = v41;
  *(void *)(a1 + 24) = v43;
  *(void *)(a1 + 32) = v45;
  *(void *)(a1 + 40) = v47;
  return result;
}

CoreP2P::Channel::Band_optional __swiftcall Channel.Band.init(apple80211:)(__C::apple80211_channel_band apple80211)
{
  if (apple80211.rawValue >= 4) {
    return (CoreP2P::Channel::Band_optional)3;
  }
  else {
    return (CoreP2P::Channel::Band_optional)(0x2010003u >> (8 * LOBYTE(apple80211.rawValue)));
  }
}

uint64_t sub_1000C0D00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_100010BCC(&qword_10047E9D8);
  __chkstk_darwin();
  long long v5 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  long long v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v10 = *(_OWORD *)(a1 + 152);
  v82[8] = *(_OWORD *)(a1 + 136);
  v82[9] = v10;
  long long v11 = *(_OWORD *)(a1 + 184);
  v82[10] = *(_OWORD *)(a1 + 168);
  v82[11] = v11;
  long long v12 = *(_OWORD *)(a1 + 88);
  v82[4] = *(_OWORD *)(a1 + 72);
  v82[5] = v12;
  long long v13 = *(_OWORD *)(a1 + 120);
  v82[6] = *(_OWORD *)(a1 + 104);
  v82[7] = v13;
  long long v14 = *(_OWORD *)(a1 + 24);
  v82[0] = *(_OWORD *)(a1 + 8);
  v82[1] = v14;
  long long v15 = *(_OWORD *)(a1 + 56);
  __int16 v82[2] = *(_OWORD *)(a1 + 40);
  unsigned char v82[3] = v15;
  sub_1000C4128((unsigned __int8 *)v82, (uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_1000380B4((uint64_t)v5, &qword_10047E9D8);
LABEL_5:
    uint64_t v33 = type metadata accessor for AWDLStatistics.LowLatencyStatistics(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(a2, 1, 1, v33);
  }
  sub_1000CBBB0((uint64_t)v5, (uint64_t)v9, type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration);
  uint64_t v16 = *(void *)(a1 + 200);
  uint64_t v68 = *(void *)(a1 + 216);
  uint64_t v69 = v16;
  uint64_t v17 = *(void *)(a1 + 224);
  uint64_t v66 = *(void *)(a1 + 232);
  uint64_t v67 = v17;
  uint64_t v18 = *(void *)(a1 + 240);
  uint64_t v64 = *(void *)(a1 + 248);
  uint64_t v65 = v18;
  uint64_t v19 = *(void *)(a1 + 256);
  uint64_t v20 = *(void *)(a1 + 272);
  uint64_t v62 = *(void *)(a1 + 264);
  uint64_t v63 = v19;
  uint64_t v21 = *(void *)(a1 + 280);
  uint64_t v60 = *(void *)(a1 + 288);
  uint64_t v61 = v21;
  uint64_t v22 = *(void *)(a1 + 296);
  uint64_t v58 = *(void *)(a1 + 304);
  uint64_t v59 = v22;
  uint64_t v23 = *(void *)(a1 + 312);
  uint64_t v56 = *(void *)(a1 + 320);
  uint64_t v57 = v23;
  uint64_t v24 = *(void *)(a1 + 328);
  uint64_t v54 = *(void *)(a1 + 336);
  uint64_t v55 = v24;
  uint64_t v25 = *(void *)(a1 + 344);
  uint64_t v52 = *(void *)(a1 + 352);
  uint64_t v53 = v25;
  uint64_t v26 = *(void *)(a1 + 368);
  uint64_t v51 = *(void *)(a1 + 360);
  uint64_t v28 = *(void *)(a1 + 376);
  uint64_t v27 = *(void *)(a1 + 384);
  uint64_t v29 = *(void *)(a1 + 392);
  uint64_t v30 = *(void *)(a1 + 400);
  long long v31 = (const void *)(a1 + 416);
  uint64_t v32 = *(void *)(a1 + 408);
  memcpy(v81, v31, sizeof(v81));
  sub_1000C7FB8(v81, (uint64_t)v79);
  sub_10006EC68((uint64_t)v79, (uint64_t)v80, &qword_10047E9E0);
  if (sub_1000CBC18((uint64_t *)v80) == 1)
  {
    sub_1000CBC30((uint64_t)v9, type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration);
    goto LABEL_5;
  }
  long long v76 = v80[6];
  long long v77 = v80[7];
  long long v78 = v80[8];
  long long v72 = v80[2];
  long long v73 = v80[3];
  long long v74 = v80[4];
  long long v75 = v80[5];
  long long v70 = v80[0];
  long long v71 = v80[1];
  sub_1000CBBB0((uint64_t)v9, a2, type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration);
  uint64_t v35 = type metadata accessor for AWDLStatistics.LowLatencyStatistics(0);
  uint64_t v36 = a2 + *(int *)(v35 + 20);
  long long v37 = v71;
  *(_OWORD *)(v36 + 216) = v70;
  long long v38 = v78;
  *(_OWORD *)(v36 + 328) = v77;
  *(_OWORD *)(v36 + 344) = v38;
  long long v39 = v76;
  *(_OWORD *)(v36 + 296) = v75;
  *(_OWORD *)(v36 + 312) = v39;
  long long v40 = v74;
  long long v41 = v72;
  *(_OWORD *)(v36 + 264) = v73;
  *(_OWORD *)(v36 + 280) = v40;
  *(_OWORD *)(v36 + 248) = v41;
  *(void *)uint64_t v36 = v69;
  *(void *)(v36 + 8) = v20;
  uint64_t v42 = v67;
  *(void *)(v36 + 16) = v68;
  *(void *)(v36 + 24) = v42;
  uint64_t v43 = v65;
  *(void *)(v36 + 32) = v66;
  *(void *)(v36 + 40) = v43;
  uint64_t v44 = v63;
  *(void *)(v36 + 48) = v64;
  *(void *)(v36 + 56) = v44;
  *(void *)(v36 + 64) = v62;
  *(void *)(v36 + 72) = v20;
  uint64_t v45 = v60;
  *(void *)(v36 + 80) = v61;
  *(void *)(v36 + 88) = v45;
  uint64_t v46 = v58;
  *(void *)(v36 + 96) = v59;
  *(void *)(v36 + 104) = v46;
  uint64_t v47 = v56;
  *(void *)(v36 + 112) = v57;
  *(void *)(v36 + 120) = v47;
  uint64_t v48 = v54;
  *(void *)(v36 + 128) = v55;
  *(void *)(v36 + 136) = v48;
  uint64_t v49 = v52;
  *(void *)(v36 + 144) = v53;
  *(void *)(v36 + 152) = v49;
  *(void *)(v36 + 160) = v51;
  *(void *)(v36 + 168) = v26;
  *(void *)(v36 + 176) = v28;
  *(void *)(v36 + 184) = v27;
  *(void *)(v36 + 192) = v29;
  *(void *)(v36 + 200) = v30;
  *(void *)(v36 + 208) = v32;
  *(_OWORD *)(v36 + 232) = v37;
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(a2, 0, 1, v35);
}

uint64_t sub_1000C1128@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (uint64_t *)((char *)v22.i64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  long long v9 = (uint64_t *)((char *)v22.i64 - v8);
  uint64_t v10 = *v1;
  v2.i32[0] = *((_DWORD *)v1 + 2);
  unint64_t v11 = sub_1000C7CBC(*((_DWORD *)v1 + 4), *((_DWORD *)v1 + 5));
  if ((v11 & 0xFF00000000) == 0x300000000)
  {
    if (qword_10047C1D8 != -1) {
      swift_once();
    }
    int v12 = static Channel.awdlSocial2GHz;
    unint64_t v29 = byte_10048864C;
    unint64_t v13 = byte_10048864D;
  }
  else
  {
    int v12 = v11;
    unint64_t v29 = HIDWORD(v11);
    unint64_t v13 = v11 >> 40;
  }
  unint64_t v28 = v13;
  int v27 = *((_DWORD *)v1 + 6);
  *long long v9 = *((unsigned int *)v1 + 7);
  uint64_t v14 = enum case for DispatchTimeInterval.milliseconds(_:);
  long long v15 = *(void (**)(void *, uint64_t, uint64_t))(v5 + 104);
  v15(v9, enum case for DispatchTimeInterval.milliseconds(_:), v4);
  *uint64_t v7 = *((unsigned int *)v1 + 8);
  v15(v7, v14, v4);
  int v16 = *((_DWORD *)v1 + 16);
  if (v16 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    int16x8_t v22 = (int16x8_t)vmovl_u8(v2);
    int v17 = *((_DWORD *)v1 + 9);
    int v23 = *((_DWORD *)v1 + 10);
    uint64_t v24 = *((int *)v1 + 11);
    int v25 = *((_DWORD *)v1 + 12);
    uint64_t v26 = v1[7];
    sub_100010BCC(&qword_10047E9E8);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_1003B7330;
    *(_DWORD *)(v18 + 32) = *((_DWORD *)v1 + 17);
    *(void *)a1 = v10;
    *(_DWORD *)(a1 + 8) = vmovn_s16(v22).u32[0];
    *(_DWORD *)(a1 + 12) = v12;
    *(unsigned char *)(a1 + 16) = v29;
    *(unsigned char *)(a1 + 17) = v28;
    *(_DWORD *)(a1 + 20) = v27;
    uint64_t v19 = (int *)type metadata accessor for AWDLActionFrame.Header(0);
    uint64_t v20 = *(void (**)(uint64_t, void *, uint64_t))(v5 + 32);
    v20(a1 + v19[8], v9, v4);
    uint64_t result = ((uint64_t (*)(uint64_t, void *, uint64_t))v20)(a1 + v19[9], v7, v4);
    *(_DWORD *)(a1 + v19[10]) = v17;
    *(_DWORD *)(a1 + v19[11]) = v23;
    *(void *)(a1 + v19[12]) = v24;
    *(_DWORD *)(a1 + v19[13]) = v25;
    *(void *)(a1 + v19[14]) = v26;
    *(_DWORD *)(a1 + v19[15]) = v16;
    *(void *)(a1 + v19[16]) = v18;
  }
  return result;
}

unint64_t sub_1000C1458()
{
  uint8x8_t v2 = v0;
  memcpy(__dst, v0 + 4, 0x1B8uLL);
  int v23 = _swiftEmptyArrayStorage;
  sub_100083644(0, 10, 0);
  uint64_t v3 = 0;
  uint64_t v4 = _swiftEmptyArrayStorage;
  do
  {
    __int16 v5 = *(_WORD *)&__dst[v3 + 4];
    int v6 = *(_DWORD *)&__dst[v3 + 40];
    int v14 = *(_DWORD *)&__dst[v3];
    __int16 v15 = v5;
    long long v16 = *(_OWORD *)&__dst[v3 + 8];
    long long v17 = *(_OWORD *)&__dst[v3 + 24];
    int v18 = v6;
    sub_1000C3314((uint64_t)&v14, (uint64_t)&v19);
    v1.i32[0] = v19;
    char v7 = v20;
    char v8 = v21;
    uint64_t v9 = v22;
    int v23 = v4;
    unint64_t v11 = v4[2];
    unint64_t v10 = v4[3];
    if (v11 >= v10 >> 1)
    {
      sub_100083644(v10 > 1, v11 + 1, 1);
      uint64_t v4 = v23;
    }
    v4[2] = v11 + 1;
    int v12 = (char *)v4 + 14 * v11;
    *((_DWORD *)v12 + 8) = vmovn_s16((int16x8_t)vmovl_u8(v1)).u32[0];
    v12[36] = v7;
    v12[37] = v8;
    *(void *)(v12 + 38) = v9;
    v3 += 44;
  }
  while (v3 != 440);
  return *v2 | ((unint64_t)*((unsigned __int8 *)v2 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v2 + 5) << 40);
}

__n128 sub_1000C15B8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int16 v4 = a1;
  uint64_t v6 = a1 & 0xFFFF0000;
  if ((a1 & 0xFFFF0000) != 0)
  {
    uint64_t v26 = a2;
    uint64_t v27 = a3;
    uint64_t v7 = sub_10011A3BC((uint64_t)&v26, (uint64_t)v28);
    unint64_t v9 = v8;
    uint64_t v13 = sub_1002577C8(v7, v8);
    uint64_t v15 = v14;
    sub_10000C970(v7, v9);
  }
  else
  {
    LOBYTE(v26) = BYTE4(a1);
    BYTE1(v26) = BYTE5(a1);
    BYTE2(v26) = BYTE6(a1);
    BYTE3(v26) = HIBYTE(a1);
    uint64_t v10 = sub_10011A3BC((uint64_t)&v26, (uint64_t)&v26 + 4);
    unint64_t v12 = v11;
    LODWORD(v13) = sub_1002579EC(v10, v11);
    sub_10000C970(v10, v12);
    uint64_t v15 = 0;
    uint64_t v13 = v13;
  }
  char v16 = v6 != 0;
  uint64_t v26 = v13;
  uint64_t v27 = v15;
  v28[0] = 0;
  v28[1] = 0;
  BOOL v29 = v6 != 0;
  sub_1000A6DF8((uint64_t)&v26, (uint64_t)&v22);
  __n128 v21 = v22;
  uint64_t v17 = v23;
  uint64_t v18 = v24;
  char v19 = v25;
  sub_1000CBC90(v13, v15, 0, 0, v16);
  *(_WORD *)a4 = v4;
  __n128 result = v21;
  *(__n128 *)(a4 + 8) = v21;
  *(void *)(a4 + 24) = v17;
  *(void *)(a4 + 32) = v18;
  *(unsigned char *)(a4 + 40) = v19;
  return result;
}

void *sub_1000C17E0()
{
  uint64_t v1 = *v0;
  uint64_t v86 = v0[1];
  long long v2 = *(_OWORD *)(v0 + 18);
  long long v3 = *(_OWORD *)(v0 + 34);
  long long v4 = *(_OWORD *)(v0 + 50);
  long long v5 = *(_OWORD *)(v0 + 66);
  long long v6 = *(_OWORD *)(v0 + 82);
  long long v7 = *(_OWORD *)(v0 + 98);
  long long v8 = *(_OWORD *)(v0 + 114);
  long long v9 = *(_OWORD *)(v0 + 130);
  long long v10 = *(_OWORD *)(v0 + 146);
  long long v11 = *(_OWORD *)(v0 + 162);
  long long v12 = *(_OWORD *)(v0 + 178);
  long long v13 = *(_OWORD *)(v0 + 194);
  long long v14 = *(_OWORD *)(v0 + 210);
  long long v15 = *(_OWORD *)(v0 + 226);
  long long v16 = *(_OWORD *)(v0 + 242);
  long long v17 = *(_OWORD *)(v0 + 258);
  long long v18 = *(_OWORD *)(v0 + 274);
  long long v19 = *(_OWORD *)(v0 + 290);
  long long v20 = *(_OWORD *)(v0 + 306);
  v87[0] = *(_OWORD *)(v0 + 2);
  v87[1] = v2;
  void v87[2] = v3;
  v87[3] = v4;
  long long v21 = *(_OWORD *)(v0 + 322);
  long long v22 = *(_OWORD *)(v0 + 338);
  long long v23 = *(_OWORD *)(v0 + 354);
  long long v24 = *(_OWORD *)(v0 + 370);
  long long v25 = *(_OWORD *)(v0 + 386);
  v87[4] = v5;
  v87[5] = v6;
  unsigned char v87[6] = v7;
  v87[7] = v8;
  v87[8] = v9;
  v87[9] = v10;
  v87[10] = v11;
  v87[11] = v12;
  v87[12] = v13;
  v87[13] = v14;
  v87[14] = v15;
  v87[15] = v16;
  v87[16] = v17;
  v87[17] = v18;
  v87[18] = v19;
  v87[19] = v20;
  v87[20] = v21;
  v87[21] = v22;
  uint64_t v26 = (unsigned __int8 *)v87 + v1;
  v87[22] = v23;
  v87[23] = v24;
  v87[24] = v25;
  if (v1)
  {
    if (qword_10047C1C0 != -1) {
      swift_once();
    }
    uint64_t v27 = _swiftEmptyArrayStorage;
    unint64_t v28 = (unsigned __int8 *)v87;
    while (1)
    {
      int v30 = *v28;
      long long v31 = off_100481FE0;
      if (*((void *)off_100481FE0 + 2))
      {
        uint64_t v32 = static Hasher._hash(seed:bytes:count:)();
        uint64_t v33 = -1 << v31[32];
        unint64_t v34 = v32 & ~v33;
        if ((*(void *)&v31[((v34 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v34))
        {
          uint64_t v35 = *((void *)v31 + 6);
          if (*(_DWORD *)(v35 + 4 * v34) == v30)
          {
LABEL_13:
            char v37 = 0;
            char v38 = 3;
            goto LABEL_32;
          }
          uint64_t v36 = ~v33;
          while (1)
          {
            unint64_t v34 = (v34 + 1) & v36;
            if (((*(void *)&v31[((v34 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v34) & 1) == 0) {
              break;
            }
            if (*(_DWORD *)(v35 + 4 * v34) == v30) {
              goto LABEL_13;
            }
          }
        }
      }
      if (qword_10047C1C8 != -1) {
        swift_once();
      }
      long long v39 = off_100481FE8;
      if (*((void *)off_100481FE8 + 2))
      {
        uint64_t v40 = static Hasher._hash(seed:bytes:count:)();
        uint64_t v41 = -1 << v39[32];
        unint64_t v42 = v40 & ~v41;
        if ((*(void *)&v39[((v42 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v42))
        {
          uint64_t v43 = *((void *)v39 + 6);
          if (*(_DWORD *)(v43 + 4 * v42) == v30)
          {
LABEL_22:
            char v37 = 1;
            char v38 = 4;
            goto LABEL_32;
          }
          uint64_t v44 = ~v41;
          while (1)
          {
            unint64_t v42 = (v42 + 1) & v44;
            if (((*(void *)&v39[((v42 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v42) & 1) == 0) {
              break;
            }
            if (*(_DWORD *)(v43 + 4 * v42) == v30) {
              goto LABEL_22;
            }
          }
        }
      }
      if (qword_10047C1D0 != -1) {
        swift_once();
      }
      uint64_t v45 = off_100481FF0;
      if (!*((void *)off_100481FF0 + 2)) {
        goto LABEL_6;
      }
      uint64_t v46 = static Hasher._hash(seed:bytes:count:)();
      uint64_t v47 = -1 << v45[32];
      unint64_t v48 = v46 & ~v47;
      if (((*(void *)&v45[((v48 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v48) & 1) == 0) {
        goto LABEL_6;
      }
      uint64_t v49 = *((void *)v45 + 6);
      if (*(_DWORD *)(v49 + 4 * v48) != v30)
      {
        uint64_t v50 = ~v47;
        do
        {
          unint64_t v48 = (v48 + 1) & v50;
          if (((*(void *)&v45[((v48 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v48) & 1) == 0) {
            goto LABEL_6;
          }
        }
        while (*(_DWORD *)(v49 + 4 * v48) != v30);
      }
      char v37 = 2;
      char v38 = 5;
LABEL_32:
      LODWORD(v88) = v30;
      BYTE4(v88) = v37;
      BYTE5(v88) = v38;
      sub_1001C4000();
      int v51 = (int)v88;
      char v52 = BYTE4(v88);
      char v53 = BYTE5(v88);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v27 = sub_1000C5C4C(0, v27[2] + 1, 1, v27);
      }
      unint64_t v55 = v27[2];
      unint64_t v54 = v27[3];
      if (v55 >= v54 >> 1) {
        uint64_t v27 = sub_1000C5C4C((void *)(v54 > 1), v55 + 1, 1, v27);
      }
      unsigned char v27[2] = v55 + 1;
      BOOL v29 = &v27[v55];
      *((_DWORD *)v29 + 8) = v51;
      *((unsigned char *)v29 + 36) = v52;
      *((unsigned char *)v29 + 37) = v53;
LABEL_6:
      if (++v28 == v26) {
        goto LABEL_37;
      }
    }
  }
  uint64_t v27 = _swiftEmptyArrayStorage;
LABEL_37:
  if (v86)
  {
    if (qword_10047C1C0 != -1) {
      swift_once();
    }
    uint64_t v56 = _swiftEmptyArrayStorage;
    uint64_t v57 = &v26[v86];
    while (1)
    {
      int v59 = *v26;
      uint64_t v60 = off_100481FE0;
      if (*((void *)off_100481FE0 + 2))
      {
        uint64_t v61 = static Hasher._hash(seed:bytes:count:)();
        uint64_t v62 = -1 << v60[32];
        unint64_t v63 = v61 & ~v62;
        if ((*(void *)&v60[((v63 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v63))
        {
          uint64_t v64 = *((void *)v60 + 6);
          if (*(_DWORD *)(v64 + 4 * v63) == v59)
          {
LABEL_49:
            char v66 = 0;
            char v67 = 3;
            goto LABEL_68;
          }
          uint64_t v65 = ~v62;
          while (1)
          {
            unint64_t v63 = (v63 + 1) & v65;
            if (((*(void *)&v60[((v63 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v63) & 1) == 0) {
              break;
            }
            if (*(_DWORD *)(v64 + 4 * v63) == v59) {
              goto LABEL_49;
            }
          }
        }
      }
      if (qword_10047C1C8 != -1) {
        swift_once();
      }
      uint64_t v68 = off_100481FE8;
      if (*((void *)off_100481FE8 + 2))
      {
        uint64_t v69 = static Hasher._hash(seed:bytes:count:)();
        uint64_t v70 = -1 << v68[32];
        unint64_t v71 = v69 & ~v70;
        if ((*(void *)&v68[((v71 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v71))
        {
          uint64_t v72 = *((void *)v68 + 6);
          if (*(_DWORD *)(v72 + 4 * v71) == v59)
          {
LABEL_58:
            char v66 = 1;
            char v67 = 4;
            goto LABEL_68;
          }
          uint64_t v73 = ~v70;
          while (1)
          {
            unint64_t v71 = (v71 + 1) & v73;
            if (((*(void *)&v68[((v71 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v71) & 1) == 0) {
              break;
            }
            if (*(_DWORD *)(v72 + 4 * v71) == v59) {
              goto LABEL_58;
            }
          }
        }
      }
      if (qword_10047C1D0 != -1) {
        swift_once();
      }
      long long v74 = off_100481FF0;
      if (!*((void *)off_100481FF0 + 2)) {
        goto LABEL_42;
      }
      uint64_t v75 = static Hasher._hash(seed:bytes:count:)();
      uint64_t v76 = -1 << v74[32];
      unint64_t v77 = v75 & ~v76;
      if (((*(void *)&v74[((v77 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v77) & 1) == 0) {
        goto LABEL_42;
      }
      uint64_t v78 = *((void *)v74 + 6);
      if (*(_DWORD *)(v78 + 4 * v77) != v59)
      {
        uint64_t v79 = ~v76;
        do
        {
          unint64_t v77 = (v77 + 1) & v79;
          if (((*(void *)&v74[((v77 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v77) & 1) == 0) {
            goto LABEL_42;
          }
        }
        while (*(_DWORD *)(v78 + 4 * v77) != v59);
      }
      char v66 = 2;
      char v67 = 5;
LABEL_68:
      LODWORD(v88) = v59;
      BYTE4(v88) = v66;
      BYTE5(v88) = v67;
      sub_1001C4000();
      int v80 = (int)v88;
      char v81 = BYTE4(v88);
      char v82 = BYTE5(v88);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v56 = sub_1000C5C4C(0, v56[2] + 1, 1, v56);
      }
      unint64_t v84 = v56[2];
      unint64_t v83 = v56[3];
      if (v84 >= v83 >> 1) {
        uint64_t v56 = sub_1000C5C4C((void *)(v83 > 1), v84 + 1, 1, v56);
      }
      v56[2] = v84 + 1;
      uint64_t v58 = &v56[v84];
      *((_DWORD *)v58 + 8) = v80;
      *((unsigned char *)v58 + 36) = v81;
      *((unsigned char *)v58 + 37) = v82;
LABEL_42:
      if (++v26 == v57) {
        goto LABEL_73;
      }
    }
  }
  uint64_t v56 = _swiftEmptyArrayStorage;
LABEL_73:
  uint64_t v88 = v27;
  sub_1001DEA8C((uint64_t)v56);
  return v88;
}

void sub_1000C1EE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = 0;
  long long v4 = sub_1003ABDD8(a1, a2, &v8);
  uint64_t v5 = (uint64_t)v4 + v8;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(a3 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  AppleDevice.setRequest(requestType:data:on:)(0xA2uLL, (uint64_t)v4, v5, 0, v6, v7);
  swift_bridgeObjectRelease();
  swift_release();
  free(v4);
}

void sub_1000C1FC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v14 = 0;
  long long v9 = sub_1003ABDD8(a1, a2, &v14);
  uint64_t v10 = (uint64_t)v9 + v14;
  uint64_t v11 = *(void *)(a6 + 8);
  uint64_t v12 = *(void *)(a5 + 8);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_1000BE6C8(162, (uint64_t)v9, v10, a4, v11, v12, AssociatedConformanceWitness);
  free(v9);
}

uint64_t sub_1000C20D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v12 = *(void *)(a6 + 8);
  uint64_t v13 = *(void *)(a5 + 8);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t result = sub_1000BE6C8(120, a1, a2, a4, v12, v13, AssociatedConformanceWitness);
  if (v7) {
    *a7 = v7;
  }
  return result;
}

uint64_t sub_1000C21AC()
{
  uint64_t v0 = (const void *)__chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  memcpy(__dst, v0, 0xE14uLL);
  swift_getAtKeyPath();
  if (*(void *)(v2 + 16) >= 0x10uLL) {
    unint64_t v5 = 16;
  }
  else {
    unint64_t v5 = *(void *)(v2 + 16);
  }
  uint64_t v6 = (void (*)(unsigned char *, void))swift_modifyAtWritableKeyPath();
  sub_1000C3924(v7, v7 + 544, v4, v2, v5);
  v6(__dst, 0);
  __dst[0] = v5;
  return swift_setAtWritableKeyPath();
}

uint64_t sub_1000C22AC()
{
  uint64_t v0 = (const void *)__chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  memcpy(__dst, v0, sizeof(__dst));
  swift_getAtKeyPath();
  if (*(void *)(v2 + 16) >= 0x10uLL) {
    unint64_t v5 = 16;
  }
  else {
    unint64_t v5 = *(void *)(v2 + 16);
  }
  uint64_t v6 = (void (*)(unsigned char *, void))swift_modifyAtWritableKeyPath();
  sub_1000C3924(v7, v7 + 544, v4, v2, v5);
  v6(__dst, 0);
  __dst[0] = v5;
  return swift_setAtWritableKeyPath();
}

uint64_t sub_1000C23D8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(a3 + 16);
  if (v6)
  {
    uint64_t v7 = result;
    uint64_t v8 = a3 + 32;
    uint64_t v30 = a3;
    swift_bridgeObjectRetain();
    unint64_t v9 = 0;
    uint64_t v10 = (_OWORD *)(v7 + 4);
    uint64_t v24 = v8;
    uint64_t v25 = v7;
    while (1)
    {
      if (v9 < 2)
      {
        uint64_t v11 = *(void *)(v8 + 16 * v9 + 8);
        unint64_t v12 = *(void *)(v11 + 16);
        if (v12 >= 0x100)
        {
          uint64_t result = _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        unint64_t v13 = v7 + 1284 * v9;
        *(unsigned char *)(v13 + 1) = v12;
        *(unsigned char *)(v13 + 2) = v9;
        uint64_t v14 = *(void *)(v11 + 16);
        if (v14) {
          break;
        }
      }
LABEL_3:
      ++v9;
      uint64_t v10 = (_OWORD *)((char *)v10 + 1284);
      if (v9 == v6) {
        return swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRetain_n();
    uint64_t v15 = 32;
    long long v16 = v10;
    while (1)
    {
      long long v18 = *(_OWORD *)(v11 + v15 + 16);
      long long v17 = *(_OWORD *)(v11 + v15 + 32);
      long long v19 = *(_OWORD *)(v11 + v15);
      char v29 = *(unsigned char *)(v11 + v15 + 48);
      v28[1] = v18;
      void v28[2] = v17;
      v28[0] = v19;
      int v20 = v19 & 7;
      sub_1000CAB88((uint64_t)v28);
      if (v20 != 1)
      {
        swift_bridgeObjectRelease();
        sub_10000F000();
        uint64_t v5 = swift_allocError();
        *(_OWORD *)uint64_t v23 = xmmword_1003B2F90;
        *(unsigned char *)(v23 + 16) = 0;
        swift_willThrow();
        goto LABEL_14;
      }
      sub_1000C2600((unint64_t)v27);
      if (v5) {
        break;
      }
      long long v21 = v27[3];
      unsigned char v16[2] = v27[2];
      _OWORD v16[3] = v21;
      char v16[4] = v27[4];
      long long v22 = v27[1];
      *long long v16 = v27[0];
      v16[1] = v22;
      v16 += 5;
      sub_1000CABC4((uint64_t)v28);
      v15 += 56;
      if (!--v14)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v8 = v24;
        uint64_t v7 = v25;
        goto LABEL_3;
      }
    }
    swift_bridgeObjectRelease();
LABEL_14:
    sub_1000CABC4((uint64_t)v28);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *a4 = v5;
  }
  return result;
}

uint64_t sub_1000C2600@<X0>(unint64_t a1@<X8>)
{
  __int16 v4 = *(_WORD *)v1;
  unint64_t v5 = sub_10008CC20(3, 2, *(_WORD *)v1, a1);
  if (v2) {
    goto LABEL_23;
  }
  unsigned __int8 v6 = _s7CoreP2P20NANAvailabilityEntryV15UsagePreferenceO8rawValueAESgSi_tcfC_0(v5);
  if (v6 == 4)
  {
LABEL_22:
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v30 = xmmword_1003B00B0;
    *(unsigned char *)(v30 + 16) = 2;
    swift_willThrow();
LABEL_23:
    swift_unexpectedError();
    __break(1u);
    swift_unexpectedError();
    __break(1u);
LABEL_24:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  unsigned __int8 v7 = v6;
  uint64_t v8 = sub_10008CC20(5, 2, v4, v6);
  double v10 = 0.0;
  if (v8 < 5)
  {
    double v10 = (double)v8 * 0.2 * 5.0;
    if ((~*(void *)&v10 & 0x7FF0000000000000) != 0)
    {
      if (v10 <= -1.0)
      {
        __break(1u);
      }
      else
      {
        unint64_t v9 = 0x4070000000000000;
        if (v10 < 256.0) {
          goto LABEL_7;
        }
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_22;
  }
LABEL_7:
  unint64_t v11 = sub_10008CC20(8, 4, v4, v9);
  char v12 = v11;
  if ((v11 & 0x8000000000000000) != 0 || v11 >= 0x100) {
    goto LABEL_24;
  }
  unsigned __int8 v36 = v7;
  unint64_t v37 = a1;
  uint64_t v13 = *(void *)(v1 + 8);
  uint64_t v14 = *(void *)(v1 + 16);
  unint64_t v15 = *(void *)(v1 + 24);
  if (v15 >> 60 == 15)
  {
    uint64_t v16 = TimeBitmap.nanBitmap.getter(0, 0x400uLL, 0);
    uint64_t v18 = v17;
    unint64_t v20 = v19;
  }
  else
  {
    uint64_t v16 = *(void *)(v1 + 8);
    uint64_t v18 = *(void *)(v1 + 16);
    unint64_t v20 = *(void *)(v1 + 24);
  }
  sub_10006E968(v13, v14, v15);
  sub_1000C29E4(v16, v18, v20, (uint64_t)&v38);
  __int16 v21 = v38;
  long long v34 = v40;
  long long v35 = v39;
  long long v32 = v42;
  long long v33 = v41;
  char v22 = v43;
  char v23 = v44;
  char v31 = v45;
  sub_10000C970(v18, v20);
  long long v46 = *(_OWORD *)(v1 + 32);
  char v47 = *(unsigned char *)(v1 + 48);
  sub_10006EC68((uint64_t)&v46 + 8, (uint64_t)v48, &qword_10047E980);
  uint64_t result = sub_10006EC68((uint64_t)v48, (uint64_t)&v49, &qword_10047E980);
  if (v50 == 1 && *(void *)(v49 + 16))
  {
    char v25 = *(unsigned char *)(v49 + 32);
    __int16 v26 = *(_WORD *)(v49 + 34);
    char v27 = *(unsigned char *)(v49 + 36);
    if (*(unsigned char *)(v49 + 40)) {
      __int16 v28 = 0;
    }
    else {
      __int16 v28 = *(_WORD *)(v49 + 38);
    }
    *(unsigned char *)unint64_t v37 = v36;
    *(unsigned char *)(v37 + 1) = (int)v10;
    *(unsigned char *)(v37 + 2) = v12;
    *(_WORD *)(v37 + 4) = v21;
    *(_OWORD *)(v37 + 6) = v35;
    *(_OWORD *)(v37 + 22) = v34;
    *(_OWORD *)(v37 + 38) = v33;
    *(_OWORD *)(v37 + 54) = v32;
    *(unsigned char *)(v37 + 70) = v22;
    *(unsigned char *)(v37 + 71) = v23;
    *(unsigned char *)(v37 + 72) = v31;
    *(unsigned char *)(v37 + 74) = v25;
    *(unsigned char *)(v37 + 75) = v27;
    *(_WORD *)(v37 + 76) = v26;
    *(_WORD *)(v37 + 78) = v28;
  }
  else
  {
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v29 = xmmword_1003B2F90;
    *(unsigned char *)(v29 + 16) = 0;
    return swift_willThrow();
  }
  return result;
}

__n128 sub_1000C29E4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  memset(v23, 0, sizeof(v23));
  unint64_t v8 = sub_10008C80C(6, 9, a1, __stack_chk_guard);
  if ((v8 & 0x8000000000000000) != 0 || v8 >= 0x10000) {
    goto LABEL_19;
  }
  *(_WORD *)char v23 = v8;
  unint64_t v9 = sub_10008C940(3uLL, 3, a1);
  char v10 = _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO0F9AlgorithmO8rawValueAISgs5UInt8V_tcfC_0(v9);
  if (v10 == 8) {
    void v23[2] = 0;
  }
  else {
    void v23[2] = v10;
  }
  unint64_t v11 = sub_10008C940(0, 3, a1);
  char v12 = _s7CoreP2P19NANIntervalDurationO8rawValueACSgs5UInt8V_tcfC_0(v11);
  if (v12 == 4)
  {
    v23[3] = 0;
    LOBYTE(v13) = 0;
    switch(a3 >> 62)
    {
      case 1uLL:
        goto LABEL_10;
      case 2uLL:
        goto LABEL_12;
      case 3uLL:
        goto LABEL_16;
      default:
        goto LABEL_7;
    }
  }
  v23[3] = v12;
  LOBYTE(v13) = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
LABEL_10:
      LODWORD(v13) = HIDWORD(a2) - a2;
      if (__OFSUB__(HIDWORD(a2), a2))
      {
        __break(1u);
LABEL_18:
        __break(1u);
      }
      uint64_t v13 = (int)v13;
LABEL_13:
      if (v13 <= 64)
      {
        if ((v13 & 0x8000000000000000) == 0) {
          goto LABEL_16;
        }
LABEL_19:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x1000C2CA0);
      }
      LOBYTE(v13) = 64;
LABEL_16:
      v23[4] = v13;
      sub_1000C36A8(&v23[5], (uint64_t)v24, a1, a2, a3, (uint64_t)v23);
      __int16 v17 = *(_WORD *)&v23[66];
      char v18 = v23[68];
      __n128 result = *(__n128 *)&v23[2];
      long long v20 = *(_OWORD *)&v23[18];
      long long v21 = *(_OWORD *)&v23[34];
      long long v22 = *(_OWORD *)&v23[50];
      *(_WORD *)a4 = *(_WORD *)v23;
      *(__n128 *)(a4 + 2) = result;
      *(_OWORD *)(a4 + 18) = v20;
      *(_OWORD *)(a4 + 34) = v21;
      *(_OWORD *)(a4 + 50) = v22;
      *(_WORD *)(a4 + 66) = v17;
      *(unsigned char *)(a4 + 68) = v18;
      return result;
    case 2uLL:
LABEL_12:
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v14 = *(void *)(a2 + 24);
      BOOL v16 = __OFSUB__(v14, v15);
      uint64_t v13 = v14 - v15;
      if (!v16) {
        goto LABEL_13;
      }
      goto LABEL_18;
    case 3uLL:
      goto LABEL_16;
    default:
LABEL_7:
      uint64_t v13 = BYTE6(a3);
      goto LABEL_13;
  }
}

uint64_t sub_1000C2CC0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a4) {
    __int16 v4 = a4;
  }
  else {
    __int16 v4 = _swiftEmptyArrayStorage;
  }
  uint64_t v5 = v4[2];
  if (v5)
  {
    swift_bridgeObjectRetain();
    unsigned __int8 v7 = v4 + 7;
    unint64_t v8 = (unsigned char *)(a1 + 70);
    do
    {
      char v9 = *((unsigned char *)v7 - 24);
      uint64_t v10 = *(v7 - 1);
      unint64_t v11 = *v7;
      uint64_t v12 = *((unsigned __int16 *)v7 - 8);
      sub_100013D44(v10, *v7);
      sub_1000C29E4(v12, v10, v11, (uint64_t)&v21);
      __int16 v13 = v21;
      __int16 v14 = v26;
      char v15 = v27;
      long long v16 = v22;
      long long v17 = v23;
      long long v18 = v24;
      long long v19 = v25;
      *(v8 - 70) = v9;
      *((_WORD *)v8 - 34) = v13;
      *(_OWORD *)(v8 - 66) = v16;
      *(_OWORD *)(v8 - 50) = v17;
      *(_OWORD *)(v8 - 34) = v18;
      *(_OWORD *)(v8 - 18) = v19;
      *((_WORD *)v8 - 1) = v14;
      *unint64_t v8 = v15;
      v8 += 72;
      sub_10000C970(v10, v11);
      v7 += 4;
      --v5;
    }
    while (v5);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000C2DCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v12 = *(void *)(a5 + 8);
  uint64_t v13 = *(void *)(a6 + 16);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t result = sub_1000BE53C(364, a1, a2, a4, v12, v13, AssociatedConformanceWitness);
  if (v7) {
    *a7 = v7;
  }
  return result;
}

uint64_t sub_1000C2EA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_100010BCC(&qword_10047E978);
  sub_100231FAC(a1, (uint64_t)sub_1000C2F24, 0, a3, (uint64_t)&type metadata for Never, v5, (uint64_t)&protocol witness table for Never, v6);
  return v8;
}

uint64_t sub_1000C2F24@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_6;
  }
  uint64_t v4 = result;
  uint64_t v5 = a2 - result;
  if ((unint64_t)(a2 - result + 23) < 0x2F) {
    goto LABEL_6;
  }
  uint64_t v6 = v5 / 24;
  uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
  if (v5 >= -23)
  {
    uint64_t v7 = (double *)(v4 + 16);
    do
    {
      double v8 = *(v7 - 2);
      double v9 = *(v7 - 1);
      double v10 = *v7;
      v7 += 3;
      [objc_allocWithZone((Class)WiFiAwareDataSessionStatisticsHistogramBin) initWithBinStart:v8 binEnd:v9 value:v10];
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized ContiguousArray._endMutation()();
      --v6;
    }
    while (v6);
LABEL_6:
    *a3 = _swiftEmptyArrayStorage;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000C305C(unsigned int a1)
{
  if (a1 > 0x14) {
    return 3;
  }
  else {
    return qword_1003B7BE0[a1];
  }
}

uint64_t sub_1000C307C()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000C310C()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t Channel.apple80211Channel.getter(uint64_t a1)
{
  if (qword_10047C1B8 != -1) {
    swift_once();
  }
  sub_1000AD3B4(a1, qword_100481FD8);
  return (a1 << 32) | 1;
}

uint64_t sub_1000C3254(uint64_t a1)
{
  int v1 = a1;
  if ((BYTE5(a1) - 2) >= 5u)
  {
    if ((a1 & 0x10000000000) != 0) {
      int v2 = 516;
    }
    else {
      int v2 = 4;
    }
  }
  else
  {
    int v2 = dword_1003B7C94[(char)(BYTE5(a1) - 2)];
  }
  int v3 = dword_1003B7C88[a1 << 24 >> 56];
  if (qword_10047C1B8 != -1) {
    swift_once();
  }
  unsigned int v4 = v3 | v2;
  if (sub_1000AD3B4(v1, qword_100481FD8)) {
    return v4 | 0x100;
  }
  else {
    return v4;
  }
}

int8x8_t sub_1000C3314@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v2.i32[0] = *(_DWORD *)a1;
  char v4 = *(unsigned char *)(a1 + 4);
  char v5 = *(unsigned char *)(a1 + 5);
  int v6 = *(_DWORD *)(a1 + 8);
  int v8 = *(_DWORD *)(a1 + 20);
  int v7 = *(_DWORD *)(a1 + 24);
  int v9 = *(_DWORD *)(a1 + 28);
  int v36 = *(_DWORD *)(a1 + 32);
  int v37 = *(_DWORD *)(a1 + 36);
  int v38 = *(_DWORD *)(a1 + 40);
  if (v6)
  {
    int v16 = *(_DWORD *)(a1 + 24);
    int v7 = *(_DWORD *)(a1 + 28);
    char v17 = *(unsigned char *)(a1 + 5);
    char v18 = *(unsigned char *)(a1 + 4);
    __int16 v19 = *(_WORD *)(a1 + 16);
    char v20 = _s7CoreP2P15IEEE80211StatusO8rawValueACSgs6UInt16V_tcfC_0(*(_WORD *)(a1 + 12) & 0x1FF);
    if (v20 == 54) {
      char v21 = 1;
    }
    else {
      char v21 = v20;
    }
    char v4 = v18;
    char v5 = v17;
    LOWORD(v9) = v7;
    LOWORD(v7) = v16;
    unsigned __int8 v22 = v21;
    __int16 v23 = _s7CoreP2P15IEEE80211ReasonO8rawValueACSgs6UInt16V_tcfC_0(v19 & 0x1FF);
    if (v23 == 34) {
      __int16 v24 = 1;
    }
    else {
      __int16 v24 = v23;
    }
    __int16 v10 = v22 | (unsigned __int16)(v24 << 8);
    if ((v6 & 2) != 0) {
      goto LABEL_3;
    }
LABEL_17:
    __int16 v15 = 8704;
    goto LABEL_18;
  }
  __int16 v10 = 8704;
  if ((v6 & 2) == 0) {
    goto LABEL_17;
  }
LABEL_3:
  unsigned __int8 v11 = _s7CoreP2P15IEEE80211StatusO8rawValueACSgs6UInt16V_tcfC_0(v8 & 0x1FF);
  if (v11 == 54) {
    unsigned __int8 v12 = 1;
  }
  else {
    unsigned __int8 v12 = v11;
  }
  __int16 v13 = _s7CoreP2P15IEEE80211ReasonO8rawValueACSgs6UInt16V_tcfC_0(v7 & 0x1FF);
  if (v13 == 34) {
    __int16 v14 = 1;
  }
  else {
    __int16 v14 = v13;
  }
  __int16 v15 = v12 | (unsigned __int16)(v14 << 8);
LABEL_18:
  int16x8_t v39 = (int16x8_t)vmovl_u8(v2);
  if ((v6 & 4) != 0)
  {
    unsigned __int8 v31 = _s7CoreP2P15IEEE80211StatusO8rawValueACSgs6UInt16V_tcfC_0(v9 & 0x1FF);
    if (v31 == 54) {
      unsigned __int8 v32 = 1;
    }
    else {
      unsigned __int8 v32 = v31;
    }
    __int16 v33 = _s7CoreP2P15IEEE80211ReasonO8rawValueACSgs6UInt16V_tcfC_0(v36 & 0x1FF);
    if (v33 == 34) {
      __int16 v34 = 1;
    }
    else {
      __int16 v34 = v33;
    }
    __int16 v25 = v32 | (unsigned __int16)(v34 << 8);
    if ((v6 & 8) != 0) {
      goto LABEL_20;
    }
LABEL_34:
    __int16 v30 = 8704;
    goto LABEL_35;
  }
  __int16 v25 = 8704;
  if ((v6 & 8) == 0) {
    goto LABEL_34;
  }
LABEL_20:
  unsigned __int8 v26 = _s7CoreP2P15IEEE80211StatusO8rawValueACSgs6UInt16V_tcfC_0(v37 & 0x1FF);
  if (v26 == 54) {
    unsigned __int8 v27 = 1;
  }
  else {
    unsigned __int8 v27 = v26;
  }
  __int16 v28 = _s7CoreP2P15IEEE80211ReasonO8rawValueACSgs6UInt16V_tcfC_0(v38 & 0x1FF);
  if (v28 == 34) {
    __int16 v29 = 1;
  }
  else {
    __int16 v29 = v28;
  }
  __int16 v30 = v27 | (unsigned __int16)(v29 << 8);
LABEL_35:
  int8x8_t result = vmovn_s16(v39);
  *(_DWORD *)a2 = result.i32[0];
  *(unsigned char *)(a2 + 4) = v4;
  *(unsigned char *)(a2 + 5) = v5;
  *(_WORD *)(a2 + 6) = v10;
  *(_WORD *)(a2 + 8) = v15;
  *(_WORD *)(a2 + 10) = v25;
  *(_WORD *)(a2 + 12) = v30;
  return result;
}

unint64_t WiFiNetwork.createRecord()(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  char v5 = a3;
  unint64_t v8 = a3 >> 8;
  unint64_t v9 = a3 >> 16;
  unint64_t v10 = a3 >> 24;
  unint64_t v11 = HIDWORD(a3);
  unint64_t v20 = a3 >> 40;
  sub_100010BCC(qword_10047DD00);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003B7340;
  *(void *)(inited + 32) = 0x5254535F44495353;
  *(void *)(inited + 40) = 0xE800000000000000;
  *(void *)(inited + 48) = a1;
  *(void *)(inited + 56) = a2;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 80) = 1145656147;
  *(void *)(inited + 88) = 0xE400000000000000;
  swift_bridgeObjectRetain_n();
  *(void *)(inited + 96) = sub_10011A478(a1, a2);
  *(void *)(inited + 104) = v13;
  *(void *)(inited + 120) = &type metadata for Data;
  *(void *)(inited + 128) = 0x4449535342;
  *(void *)(inited + 136) = 0xE500000000000000;
  sub_100010BCC(&qword_10047BEF8);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1003B2F40;
  *(unsigned char *)(v14 + 32) = v5;
  *(unsigned char *)(v14 + 33) = v8;
  *(unsigned char *)(v14 + 34) = v9;
  *(unsigned char *)(v14 + 35) = v10;
  *(unsigned char *)(v14 + 36) = v11;
  *(unsigned char *)(v14 + 37) = v20;
  uint64_t v15 = sub_1001265EC(v14);
  uint64_t v17 = v16;
  swift_bridgeObjectRelease();
  *(void *)(inited + 144) = v15;
  *(void *)(inited + 152) = v17;
  *(void *)(inited + 168) = &type metadata for Data;
  *(void *)(inited + 176) = 0x4C454E4E414843;
  *(void *)(inited + 184) = 0xE700000000000000;
  *(_DWORD *)(inited + 192) = a4;
  *(void *)(inited + 216) = &type metadata for UInt32;
  strcpy((char *)(inited + 224), "CHANNEL_FLAGS");
  *(_WORD *)(inited + 238) = -4864;
  int v18 = sub_1000C3254(a4 & 0xFFFFFFFFFFFFLL);
  *(void *)(inited + 264) = &type metadata for UInt32;
  *(_DWORD *)(inited + 240) = v18;
  return sub_10001FE34(inited);
}

uint64_t sub_1000C36A8(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v6 = a5 >> 62;
  switch(a5 >> 62)
  {
    case 1uLL:
      uint64_t v14 = (int)a4;
      uint64_t v12 = sub_10011B074((int)a4, *(unsigned __int8 *)(a6 + 4), a4, a5);
LABEL_10:
      if (a4 >> 32 >= v14) {
        goto LABEL_11;
      }
      goto LABEL_13;
    case 2uLL:
      uint64_t v12 = sub_10011B074(*(void *)(a4 + 16), *(unsigned __int8 *)(a6 + 4), a4, a5);
LABEL_6:
      uint64_t v14 = *(void *)(a4 + 16);
      uint64_t v13 = *(void *)(a4 + 24);
LABEL_7:
      if (v13 < v14) {
        goto LABEL_13;
      }
LABEL_11:
      if (v12 < v14)
      {
LABEL_13:
        __break(1u);
        JUMPOUT(0x1000C3800);
      }
      uint64_t v15 = Data._Representation.subscript.getter();
      unint64_t v17 = v16;
      sub_10005A9A4(v15, v16, a1, a2);
      return sub_10000C970(v15, v17);
    default:
      uint64_t v10 = sub_10011B074(0, *(unsigned __int8 *)(a6 + 4), a4, a5);
      uint64_t v11 = v6;
      uint64_t v12 = v10;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      switch(v11)
      {
        case 0:
          uint64_t v14 = 0;
          goto LABEL_11;
        case 1:
          uint64_t v14 = (int)a4;
          goto LABEL_10;
        case 2:
          goto LABEL_6;
        case 3:
          goto LABEL_7;
        default:
          JUMPOUT(0);
      }
  }
}

uint64_t sub_1000C3820@<X0>(uint64_t a1@<X2>, unint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t *a4@<X8>)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v6 = (int)a1;
      uint64_t v5 = a1 >> 32;
      break;
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v6 = 0;
      uint64_t v5 = BYTE6(a2);
      break;
  }
  if (v5 < v6 || v6 > a3)
  {
    __break(1u);
    JUMPOUT(0x1000C3914);
  }
  uint64_t v7 = Data._Representation.subscript.getter();
  unint64_t v9 = v8;
  sub_100074B70();
  uint64_t v10 = DataProtocol.copyBytes(to:)();
  uint64_t result = sub_10000C970(v7, v9);
  *a4 = v10;
  return result;
}

uint64_t sub_1000C3924(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if ((a5 & 0x8000000000000000) != 0)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }
  int64_t v5 = a5;
  if (*(void *)(a4 + 16) < a5) {
    goto LABEL_27;
  }
  if (!a5) {
    goto LABEL_18;
  }
  uint64_t v26 = a1;
  swift_bridgeObjectRetain();
  sub_1000836C4(0, v5, 0);
  uint64_t v7 = (void *)(a4 + 40);
  while (2)
  {
    if (!v5)
    {
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    uint64_t v8 = *(v7 - 1);
    switch(*v7 >> 62)
    {
      case 1:
        LODWORD(v9) = HIDWORD(v8) - v8;
        if (__OFSUB__(HIDWORD(v8), v8)) {
          goto LABEL_24;
        }
        uint64_t v9 = (int)v9;
LABEL_11:
        if (v9 > 32) {
          goto LABEL_23;
        }
LABEL_12:
        sub_100074B70();
        unint64_t v13 = DataProtocol.copyBytes(to:)();
        if ((v13 & 0x8000000000000000) != 0 || (__int16 v14 = v13, v13 >= 0x10000))
        {
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x1000C3BD4);
        }
        long long v15 = 0u;
        long long v16 = 0u;
        unint64_t v18 = _swiftEmptyArrayStorage[2];
        unint64_t v17 = _swiftEmptyArrayStorage[3];
        if (v18 >= v17 >> 1)
        {
          sub_1000836C4(v17 > 1, v18 + 1, 1);
          long long v16 = 0u;
          long long v15 = 0u;
        }
        _swiftEmptyArrayStorage[2] = v18 + 1;
        __int16 v19 = (char *)_swiftEmptyArrayStorage + 34 * v18;
        *((_OWORD *)v19 + 2) = v15;
        *((_OWORD *)v19 + 3) = v16;
        *((_WORD *)v19 + 32) = v14;
        v7 += 2;
        if (--v5) {
          continue;
        }
        swift_bridgeObjectRelease();
        a1 = v26;
        break;
      case 2:
        uint64_t v11 = *(void *)(v8 + 16);
        uint64_t v10 = *(void *)(v8 + 24);
        BOOL v12 = __OFSUB__(v10, v11);
        uint64_t v9 = v10 - v11;
        if (!v12) {
          goto LABEL_11;
        }
        goto LABEL_25;
      case 3:
        goto LABEL_12;
      default:
        uint64_t v9 = BYTE6(*v7);
        goto LABEL_11;
    }
    break;
  }
LABEL_18:
  uint64_t v20 = _swiftEmptyArrayStorage[2];
  if (v20)
  {
    char v21 = (_WORD *)(a1 + 32);
    unsigned __int8 v22 = &_swiftEmptyArrayStorage[8];
    do
    {
      __int16 v23 = *v22;
      long long v24 = *((_OWORD *)v22 - 1);
      *((_OWORD *)v21 - 2) = *((_OWORD *)v22 - 2);
      *((_OWORD *)v21 - 1) = v24;
      *char v21 = v23;
      v21 += 17;
      v22 += 17;
      --v20;
    }
    while (v20);
  }
  return swift_bridgeObjectRelease();
}

uint64_t AWDLActionFrame.Header.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (!v2)
  {
    uint64_t v5 = v14;
    sub_100039448((uint64_t)v13, v14);
    uint64_t v6 = UnkeyedDecodingContainer.decodeData(with:)(72, v5);
    uint64_t v8 = v6;
    unint64_t v9 = v7;
    sub_100257F94(v6, v7, (uint64_t)v11);
    sub_10000C970(v8, v9);
    long long v17 = v11[2];
    long long v18 = v11[3];
    uint64_t v19 = v12;
    long long v15 = v11[0];
    long long v16 = v11[1];
    sub_1000C1128(a2);
    sub_100010754((uint64_t)v13);
  }
  return sub_100010754((uint64_t)a1);
}

uint64_t sub_1000C3CE4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AWDLActionFrame.Header.init(from:)(a1, a2);
}

unint64_t sub_1000C3CFC@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  int64_t v3 = *(unsigned __int8 *)(a2 + 5);
  char v4 = _swiftEmptyArrayStorage;
  if (*(unsigned char *)(a2 + 5))
  {
    unint64_t v5 = result;
    unint64_t v13 = a3;
    long long v18 = _swiftEmptyArrayStorage;
    sub_1000835DC(0, v3, 0);
    char v4 = _swiftEmptyArrayStorage;
    uint64_t v6 = (_DWORD *)(v5 + 8);
    do
    {
      int v7 = *v6;
      uint64_t v14 = *((void *)v6 - 1);
      int v15 = v7;
      uint64_t result = sub_1000C3E14((uint64_t)&v14, (uint64_t)&v16);
      uint64_t v8 = v17;
      uint64_t v9 = v16;
      long long v18 = v4;
      unint64_t v11 = v4[2];
      unint64_t v10 = v4[3];
      if (v11 >= v10 >> 1)
      {
        uint64_t result = sub_1000835DC(v10 > 1, v11 + 1, 1);
        char v4 = v18;
      }
      v4[2] = v11 + 1;
      uint64_t v12 = &v4[v11];
      *((_DWORD *)v12 + 8) = v9;
      *((_WORD *)v12 + 18) = (v9 | (unint64_t)(v8 << 32)) >> 32;
      v6 += 3;
      --v3;
    }
    while (v3);
    a3 = v13;
  }
  *a3 = v4;
  return result;
}

unint64_t sub_1000C3E14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_1001C7008(*(_DWORD *)(a1 + 4));
  *(_DWORD *)a2 = result;
  *(_WORD *)(a2 + 4) = WORD2(result);
  return result;
}

unint64_t sub_1000C3E50@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  int64_t v3 = *(unsigned __int8 *)(a2 + 5);
  char v4 = _swiftEmptyArrayStorage;
  if (*(unsigned char *)(a2 + 5))
  {
    unint64_t v5 = result;
    unint64_t v13 = a3;
    long long v18 = _swiftEmptyArrayStorage;
    sub_1000835DC(0, v3, 0);
    char v4 = _swiftEmptyArrayStorage;
    uint64_t v6 = (_DWORD *)(v5 + 8);
    do
    {
      int v7 = *v6;
      uint64_t v14 = *((void *)v6 - 1);
      int v15 = v7;
      unint64_t result = sub_1000C3F68((uint64_t)&v14, (uint64_t)&v16);
      uint64_t v8 = v17;
      uint64_t v9 = v16;
      long long v18 = v4;
      unint64_t v11 = v4[2];
      unint64_t v10 = v4[3];
      if (v11 >= v10 >> 1)
      {
        unint64_t result = sub_1000835DC(v10 > 1, v11 + 1, 1);
        char v4 = v18;
      }
      v4[2] = v11 + 1;
      uint64_t v12 = &v4[v11];
      *((_DWORD *)v12 + 8) = v9;
      *((_WORD *)v12 + 18) = (v9 | (unint64_t)(v8 << 32)) >> 32;
      v6 += 3;
      --v3;
    }
    while (v3);
    a3 = v13;
  }
  *a3 = v4;
  return result;
}

unint64_t sub_1000C3F68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_1000C7CBC(*(_DWORD *)(a1 + 4), *(_DWORD *)(a1 + 8));
  *(_DWORD *)a2 = result;
  *(_WORD *)(a2 + 4) = WORD2(result);
  return result;
}

BOOL static apple80211_p2p_airplay_statistics.== infix(_:_:)(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[11];
  __s1[10] = a1[10];
  __s1[11] = v2;
  __s1[12] = a1[12];
  long long v3 = a1[7];
  __s1[6] = a1[6];
  __s1[7] = v3;
  long long v4 = a1[9];
  __s1[8] = a1[8];
  __s1[9] = v4;
  long long v5 = a1[3];
  void __s1[2] = a1[2];
  __s1[3] = v5;
  long long v6 = a1[5];
  __s1[4] = a1[4];
  __s1[5] = v6;
  long long v7 = a1[1];
  __s1[0] = *a1;
  __s1[1] = v7;
  long long v8 = a2[11];
  v15[10] = a2[10];
  v15[11] = v8;
  v15[12] = a2[12];
  long long v9 = a2[7];
  v15[6] = a2[6];
  v15[7] = v9;
  long long v10 = a2[9];
  v15[8] = a2[8];
  v15[9] = v10;
  long long v11 = a2[3];
  unsigned char v15[2] = a2[2];
  v15[3] = v11;
  long long v12 = a2[5];
  unsigned char v15[4] = a2[4];
  v15[5] = v12;
  long long v13 = a2[1];
  v15[0] = *a2;
  v15[1] = v13;
  return memcmp(__s1, v15, 0xD0uLL) == 0;
}

BOOL static apple80211_awdl_low_latency_statistics.== infix(_:_:)()
{
  uint64_t v0 = (const void *)__chkstk_darwin();
  long long v2 = v1;
  memcpy(__dst, v0, sizeof(__dst));
  memcpy(__s2, v2, sizeof(__s2));
  return memcmp(__dst, __s2, 0xFB0uLL) == 0;
}

unint64_t sub_1000C4128@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  long long v7 = (uint64_t *)((char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(_WORD *)(a2 + 36) = 3;
  *(_DWORD *)(a2 + 32) = 0;
  *(_WORD *)(a2 + 44) = 3;
  *(_DWORD *)(a2 + 40) = 0;
  *(_WORD *)(a2 + 52) = 3;
  *(_DWORD *)(a2 + 48) = 0;
  *(_WORD *)(a2 + 60) = 3;
  *(_DWORD *)(a2 + 56) = 0;
  int v8 = *a1;
  __int16 v9 = a1[8];
  int v47 = a1[9];
  uint64_t v10 = *((int *)a1 + 3);
  uint64_t v11 = *((int *)a1 + 4);
  uint64_t v12 = *((unsigned int *)a1 + 5);
  unint64_t v46 = sub_1000C7CBC(*((_DWORD *)a1 + 7), *((_DWORD *)a1 + 8));
  unint64_t v45 = sub_1000C7CBC(*((_DWORD *)a1 + 10), *((_DWORD *)a1 + 11));
  unint64_t v44 = sub_1000C7CBC(*((_DWORD *)a1 + 13), *((_DWORD *)a1 + 14));
  unint64_t result = sub_1000C7CBC(*((_DWORD *)a1 + 16), *((_DWORD *)a1 + 17));
  uint64_t v14 = *((void *)a1 + 13);
  if (v14 < 0)
  {
    __break(1u);
  }
  else
  {
    int v43 = a1[96];
    uint64_t v42 = *((unsigned int *)a1 + 23);
    uint64_t v41 = *((unsigned int *)a1 + 22);
    *((void *)&v40 + 1) = *((unsigned int *)a1 + 21);
    *(void *)&long long v40 = *((unsigned int *)a1 + 20);
    *((void *)&v39 + 1) = *((unsigned int *)a1 + 19);
    *(void *)&long long v39 = *((unsigned int *)a1 + 18);
    *long long v7 = v14;
    int v15 = *(void (**)(void *, void, uint64_t))(v5 + 104);
    unint64_t v27 = result;
    v15(v7, enum case for DispatchTimeInterval.seconds(_:), v4);
    uint64_t v34 = *((unsigned int *)a1 + 28);
    uint64_t v33 = *((unsigned int *)a1 + 29);
    uint64_t v32 = *((unsigned int *)a1 + 30);
    uint64_t v31 = *((unsigned int *)a1 + 31);
    uint64_t v30 = *((unsigned int *)a1 + 32);
    uint64_t v29 = *((unsigned int *)a1 + 33);
    uint64_t v28 = *((unsigned int *)a1 + 34);
    uint64_t v26 = *((unsigned int *)a1 + 35);
    HIDWORD(v25) = *((unsigned __int16 *)a1 + 72);
    uint64_t v37 = v11;
    uint64_t v38 = v12;
    char v16 = a1[146];
    char v17 = a1[147];
    char v18 = a1[148];
    int v36 = v8;
    char v19 = a1[149];
    uint64_t v35 = v10;
    char v20 = a1[150];
    char v21 = a1[151];
    uint64_t v22 = WiFiAddress.description.getter(*((unsigned __int16 *)a1 + 76) | ((unint64_t)*(unsigned int *)(a1 + 154) << 16));
    sub_10017CC2C(v36, v9 | ((_WORD)v47 << 8), v35, v37, v38, v46 & 0xFFFFFFFFFFFFLL, v45 & 0xFFFFFFFFFFFFLL, v44 & 0xFFFFFFFFFFFFLL, a2, *((double *)a1 + 23), v27, (v27 & 0xFFFFFFFFFFFFLL) >> 32, v39, v40, v41, v42, v43, (uint64_t)v7, v34,
      v33,
      v32,
      v31,
      v30,
      v29,
      v28,
      v26,
      SWORD2(v25),
      v16,
      v17,
      v18,
      v19,
      v20,
      v21,
      v22,
      v23,
      a1[158],
      *((unsigned int *)a1 + 40),
      *((unsigned int *)a1 + 41),
      *((unsigned int *)a1 + 42),
      *((unsigned int *)a1 + 43),
      *((void *)a1 + 22));
    uint64_t v24 = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(a2, 0, 1, v24);
  }
  return result;
}

void *sub_1000C44A4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 88);
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v5 = *(void *)(a1 + 136);
  uint64_t v6 = *(void *)(a1 + 160);
  uint64_t v7 = *(void *)(a1 + 184);
  uint64_t v8 = *(void *)(a1 + 208);
  uint64_t v9 = *(void *)(a1 + 232);
  uint64_t v17 = *(void *)(a1 + 16);
  long long v18 = *(_OWORD *)(a1 + 24);
  uint64_t v19 = v1;
  long long v20 = *(_OWORD *)(a1 + 48);
  uint64_t v21 = v2;
  long long v22 = *(_OWORD *)(a1 + 72);
  uint64_t v23 = v3;
  long long v24 = *(_OWORD *)(a1 + 96);
  long long v26 = *(_OWORD *)(a1 + 120);
  uint64_t v25 = v4;
  uint64_t v27 = v5;
  long long v28 = *(_OWORD *)(a1 + 144);
  long long v30 = *(_OWORD *)(a1 + 168);
  uint64_t v29 = v6;
  uint64_t v31 = v7;
  long long v32 = *(_OWORD *)(a1 + 192);
  long long v34 = *(_OWORD *)(a1 + 216);
  uint64_t v33 = v8;
  uint64_t v35 = v9;
  sub_100083624(0, 10, 0);
  unint64_t result = _swiftEmptyArrayStorage;
  unint64_t v11 = _swiftEmptyArrayStorage[2];
  for (uint64_t i = 16; i != 256; i += 24)
  {
    uint64_t v13 = *(void *)&v16[i];
    int v15 = result;
    unint64_t v14 = result[3];
    if (v11 >= v14 >> 1)
    {
      sub_100083624(v14 > 1, v11 + 1, 1);
      unint64_t result = v15;
    }
    result[2] = v11 + 1;
    result[v11++ + 4] = v13;
  }
  return result;
}

void *sub_1000C462C(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = a1[5];
  uint64_t v3 = a1[8];
  uint64_t v4 = a1[11];
  uint64_t v5 = a1[14];
  uint64_t v6 = a1[17];
  sub_100083624(0, 6, 0);
  unint64_t result = _swiftEmptyArrayStorage;
  unint64_t v9 = _swiftEmptyArrayStorage[2];
  unint64_t v8 = _swiftEmptyArrayStorage[3];
  unint64_t v10 = v8 >> 1;
  unint64_t v11 = v9 + 1;
  if (v8 >> 1 <= v9)
  {
    sub_100083624(v8 > 1, v9 + 1, 1);
    unint64_t result = _swiftEmptyArrayStorage;
    unint64_t v8 = _swiftEmptyArrayStorage[3];
    unint64_t v10 = v8 >> 1;
  }
  _swiftEmptyArrayStorage[2] = v11;
  _swiftEmptyArrayStorage[v9 + 4] = v1;
  int64_t v12 = v9 + 2;
  if (v10 <= v11)
  {
    sub_100083624(v8 > 1, v12, 1);
    unint64_t result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v12;
  _swiftEmptyArrayStorage[v11 + 4] = v2;
  unint64_t v14 = _swiftEmptyArrayStorage[2];
  unint64_t v13 = _swiftEmptyArrayStorage[3];
  unint64_t v15 = v13 >> 1;
  unint64_t v16 = v14 + 1;
  if (v13 >> 1 <= v14)
  {
    sub_100083624(v13 > 1, v14 + 1, 1);
    unint64_t result = _swiftEmptyArrayStorage;
    unint64_t v13 = _swiftEmptyArrayStorage[3];
    unint64_t v15 = v13 >> 1;
  }
  _swiftEmptyArrayStorage[2] = v16;
  _swiftEmptyArrayStorage[v14 + 4] = v3;
  int64_t v17 = v14 + 2;
  if (v15 <= v16)
  {
    sub_100083624(v13 > 1, v17, 1);
    unint64_t result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v17;
  _swiftEmptyArrayStorage[v16 + 4] = v4;
  unint64_t v19 = _swiftEmptyArrayStorage[2];
  unint64_t v18 = _swiftEmptyArrayStorage[3];
  unint64_t v20 = v18 >> 1;
  unint64_t v21 = v19 + 1;
  if (v18 >> 1 <= v19)
  {
    sub_100083624(v18 > 1, v19 + 1, 1);
    unint64_t result = _swiftEmptyArrayStorage;
    unint64_t v18 = _swiftEmptyArrayStorage[3];
    unint64_t v20 = v18 >> 1;
  }
  _swiftEmptyArrayStorage[2] = v21;
  _swiftEmptyArrayStorage[v19 + 4] = v5;
  int64_t v22 = v19 + 2;
  if (v20 <= v21)
  {
    sub_100083624(v18 > 1, v22, 1);
    unint64_t result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v22;
  _swiftEmptyArrayStorage[v21 + 4] = v6;
  return result;
}

void *sub_1000C486C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 88);
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v5 = *(void *)(a1 + 136);
  uint64_t v6 = *(void *)(a1 + 160);
  uint64_t v7 = *(void *)(a1 + 184);
  uint64_t v8 = *(void *)(a1 + 208);
  uint64_t v16 = *(void *)(a1 + 16);
  long long v17 = *(_OWORD *)(a1 + 24);
  uint64_t v18 = v1;
  long long v19 = *(_OWORD *)(a1 + 48);
  uint64_t v20 = v2;
  long long v21 = *(_OWORD *)(a1 + 72);
  uint64_t v22 = v3;
  long long v23 = *(_OWORD *)(a1 + 96);
  long long v25 = *(_OWORD *)(a1 + 120);
  uint64_t v24 = v4;
  uint64_t v26 = v5;
  long long v27 = *(_OWORD *)(a1 + 144);
  long long v29 = *(_OWORD *)(a1 + 168);
  uint64_t v28 = v6;
  uint64_t v30 = v7;
  long long v31 = *(_OWORD *)(a1 + 192);
  uint64_t v32 = v8;
  sub_100083624(0, 9, 0);
  unint64_t result = _swiftEmptyArrayStorage;
  unint64_t v10 = _swiftEmptyArrayStorage[2];
  for (uint64_t i = 16; i != 232; i += 24)
  {
    uint64_t v12 = *(void *)&v15[i];
    unint64_t v14 = result;
    unint64_t v13 = result[3];
    if (v10 >= v13 >> 1)
    {
      sub_100083624(v13 > 1, v10 + 1, 1);
      unint64_t result = v14;
    }
    result[2] = v10 + 1;
    result[v10++ + 4] = v12;
  }
  return result;
}

void *sub_1000C49E4(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = a1[5];
  uint64_t v3 = a1[8];
  uint64_t v4 = a1[11];
  sub_100083624(0, 4, 0);
  unint64_t result = _swiftEmptyArrayStorage;
  unint64_t v7 = _swiftEmptyArrayStorage[2];
  unint64_t v6 = _swiftEmptyArrayStorage[3];
  unint64_t v8 = v6 >> 1;
  unint64_t v9 = v7 + 1;
  if (v6 >> 1 <= v7)
  {
    sub_100083624(v6 > 1, v7 + 1, 1);
    unint64_t result = _swiftEmptyArrayStorage;
    unint64_t v6 = _swiftEmptyArrayStorage[3];
    unint64_t v8 = v6 >> 1;
  }
  _swiftEmptyArrayStorage[2] = v9;
  _swiftEmptyArrayStorage[v7 + 4] = v1;
  int64_t v10 = v7 + 2;
  if (v8 <= v9)
  {
    sub_100083624(v6 > 1, v10, 1);
    unint64_t result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v10;
  _swiftEmptyArrayStorage[v9 + 4] = v2;
  unint64_t v12 = _swiftEmptyArrayStorage[2];
  unint64_t v11 = _swiftEmptyArrayStorage[3];
  unint64_t v13 = v11 >> 1;
  unint64_t v14 = v12 + 1;
  if (v11 >> 1 <= v12)
  {
    sub_100083624(v11 > 1, v12 + 1, 1);
    unint64_t result = _swiftEmptyArrayStorage;
    unint64_t v11 = _swiftEmptyArrayStorage[3];
    unint64_t v13 = v11 >> 1;
  }
  _swiftEmptyArrayStorage[2] = v14;
  _swiftEmptyArrayStorage[v12 + 4] = v3;
  int64_t v15 = v12 + 2;
  if (v13 <= v14)
  {
    sub_100083624(v11 > 1, v15, 1);
    unint64_t result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v15;
  _swiftEmptyArrayStorage[v14 + 4] = v4;
  return result;
}

uint64_t sub_1000C4B8C()
{
  if (*(unsigned char *)(*(void *)v0 + 32) == 4)
  {
    if (qword_10047BFF8 != -1) {
      swift_once();
    }
    return (unsigned __int16)static CountryCode.unknown;
  }
  else
  {
    return (unsigned __int16)sub_1000BF0E8(0x33uLL);
  }
}

uint64_t sub_1000C4C3C(__int16 a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, unint64_t))
{
  return a4(51, ((unint64_t)a1 << 32) | ((unint64_t)HIBYTE(a1) << 40));
}

uint64_t sub_1000C4C78()
{
  sub_1000BF1C8(0x185uLL);
  return v0;
}

uint64_t sub_1000C4CCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, int *))
{
  sub_10006EC68(a2, (uint64_t)v15, &qword_10047DBA0);
  if (v16)
  {
    int v7 = 0;
    char v8 = 0;
    char v9 = 0;
    uint64_t v11 = v15[0];
    uint64_t v10 = v15[1];
    char v12 = 28;
    char v13 = 30;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v10 = 0;
    char v13 = 0;
    char v12 = 0;
    char v9 = 16;
    int v7 = v15[0];
    char v8 = 2;
  }
  int v17 = 1;
  __int16 v18 = a1;
  char v19 = BYTE2(a1);
  char v20 = BYTE3(a1);
  char v21 = BYTE4(a1);
  char v22 = BYTE5(a1);
  char v23 = v9;
  char v24 = v8;
  __int16 v25 = 0;
  int v26 = v7;
  uint64_t v27 = 0;
  char v28 = v12;
  char v29 = v13;
  __int16 v30 = 0;
  int v31 = 0;
  uint64_t v32 = v11;
  uint64_t v33 = v10;
  int v34 = 0;
  return a5(450, &v17);
}

uint64_t sub_1000C4DD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, int *))
{
  sub_10006EC68(a2, (uint64_t)v15, &qword_10047DBA0);
  if (v16)
  {
    int v7 = 0;
    char v8 = 0;
    char v9 = 0;
    uint64_t v11 = v15[0];
    uint64_t v10 = v15[1];
    char v12 = 28;
    char v13 = 30;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v10 = 0;
    char v13 = 0;
    char v12 = 0;
    char v9 = 16;
    int v7 = v15[0];
    char v8 = 2;
  }
  int v17 = 1;
  __int16 v18 = a1;
  char v19 = BYTE2(a1);
  char v20 = BYTE3(a1);
  char v21 = BYTE4(a1);
  char v22 = BYTE5(a1);
  char v23 = v9;
  char v24 = v8;
  __int16 v25 = 0;
  int v26 = v7;
  uint64_t v27 = 0;
  char v28 = v12;
  char v29 = v13;
  __int16 v30 = 0;
  int v31 = 0;
  uint64_t v32 = v11;
  uint64_t v33 = v10;
  int v34 = 0;
  return a5(451, &v17);
}

uint64_t sub_1000C4EE4(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, void))
{
  switch((char)result)
  {
    case 1:
      uint64_t v5 = 0x600000000;
      if (a2) {
        goto LABEL_5;
      }
      goto LABEL_3;
    case 2:
      uint64_t v5 = 0x900000000;
      if (a2) {
LABEL_5:
      }
        uint64_t v6 = 1;
      else {
LABEL_3:
      }
        uint64_t v6 = 0;
      unint64_t result = a5(503, v5 & 0xF00000000 | v6, 1, 0);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000C4F74()
{
  return sub_1000C4FE0();
}

uint64_t sub_1000C4FE0()
{
  __chkstk_darwin();
  uint64_t v1 = v0;
  sub_1000BF2A8(0xCFuLL, __src);
  memcpy(v5, __src, sizeof(v5));
  memcpy(__src, v5, sizeof(__src));
  return v1(__src, v5, v3);
}

uint64_t sub_1000C50C4(uint64_t a1, uint64_t a2)
{
  return sub_1000BE168(a1, a2, (uint64_t (*)(void *))sub_1000CAF5C);
}

uint64_t sub_1000C50FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000C5128(a1, a2, a3, a4, (uint64_t (*)(void *))sub_1000CAF3C);
}

uint64_t sub_1000C5128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void *))
{
  uint64_t v8 = *v5;
  unsigned char v7[2] = &v8;
  return sub_10004EF00(a5, (uint64_t)v7, a1, a2);
}

id sub_1000C5168(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, char a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,void *a35)
{
  sub_10006F314(0, (unint64_t *)&qword_10047E970);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v43 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  NSString v38 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class v39 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v40 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v41 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v42 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  LOBYTE(v37) = a16;
  id v49 = objc_msgSend(v48, "initWithPeerAddress:infrastructureChannel:txCCAHistogram:rxRSSIHistogram:preferred2GChannelsCount:preferred5GChannelsCount:dfsChannelsCount:csaCount:quietIECount:txErrorCount:packetsOn2GCount:packetsNAVOn2GCount:packetsHOFOn2GCount:packetsOn5GCount:packetsOverridenOn5GCount:infraRelayOperationStatus:infraRelayRequestersCount:txExpiredCount:txNoACKCount:txFailedCount:txNoResourcesCount:txIOErrorCount:txMemoryErrorCount:txChipModeErrorCount:txNoRemotePeerCount:txInternalErrorCount:txDroppedCount:txFirmwareFreePacketCount:txMaxRetriesCount:txForceLifetimeExpiredCount:channelSequenceMismatchOn5GCount:channelSequenceMismatchOn2GCount:infraScanCount:infraAssocCount:infraDisassocCount:countryCode:txConsecutiveErrorsHistogram:rxFWDelayHistogram:rxIPCDelayHistogram:txPacketExpiryHistogram:", a1, a2, isa, v43, a5, a6, a7, a8, a9, a10,
          a11,
          a12,
          a13,
          a14,
          a15,
          v37,
          a17,
          a18,
          a19,
          a20,
          a21,
          a22,
          a23,
          a24,
          a25,
          a26,
          a27,
          a28,
          a29,
          a30,
          a31,
          a32,
          a33,
          a34,
          a35,
          v38,
          v39,
          v40,
          v41,
          v42);

  return v49;
}

void *sub_1000C557C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100010BCC(&qword_10047E9A8);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      char v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      char v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000C79CC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1000C568C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1000C65D4(a1, a2, a3, a4, &qword_10047BEF8);
}

void *sub_1000C5698(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100010BCC((uint64_t *)&unk_100484BA0);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      char v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      char v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000C7AD8(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1000C57A8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100010BCC(&qword_10047E998);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      char v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      char v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000C78C0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000C58B8(char a1, int64_t a2, char a3, unint64_t a4)
{
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    char v13 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100010BCC(&qword_10047E9B8);
  uint64_t v10 = *(void *)(sub_100010BCC(&qword_10047CF70) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  char v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (BOOL v15 = v11 == -1) : (BOOL v15 = 0), v15))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  _DWORD v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(sub_100010BCC(&qword_10047CF70) - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (unint64_t)v13 + v17;
  if (a1)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(void *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000C7D70(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

void *sub_1000C5B28(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100010BCC(&qword_10047E958);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 6);
      unint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= (void *)((char *)a4 + 6 * v8 + 32)) {
          memmove(v12, a4 + 4, 6 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      unint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1000C7BCC(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1000C5C4C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100010BCC(&qword_100487080);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      char v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      char v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000C7ECC(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1000C5D5C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100010BCC(&qword_1004870B0);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      char v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      char v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000C7ECC(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1000C5E6C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100010BCC(&qword_10047E9D0);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[9 * v8 + 4]) {
          memmove(v12, a4 + 4, 72 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1000C98D8(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_1000C5F98(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100010BCC(&qword_10047E9C8);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 29;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 2);
      char v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      char v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32]) {
          memmove(v13, a4 + 32, 4 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1000C9AC4(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1000C60A8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100010BCC((uint64_t *)&unk_1004882C0);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      char v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      char v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000C9BB0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000C61B8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000C6220(a1, a2, a3, a4, &qword_10047E1B8, type metadata accessor for LongTermPairingKeys.PublicIdentity, type metadata accessor for LongTermPairingKeys.PublicIdentity);
}

uint64_t sub_1000C61EC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000C6220(a1, a2, a3, a4, &qword_10047E960, (uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_1000C6220(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    unint64_t v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100010BCC(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v18 = (void *)swift_allocObject();
  size_t v19 = j__malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000CB4A4(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

void *sub_1000C64A0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100010BCC(&qword_10047E9C0);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1000C9DB4(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1000C65C8(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1000C65D4(a1, a2, a3, a4, (uint64_t *)&unk_1004870D0);
}

void *sub_1000C65D4(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  int64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v8 = a2;
    }
LABEL_8:
    int64_t v9 = a4[2];
    if (v8 <= v9) {
      int64_t v10 = a4[2];
    }
    else {
      int64_t v10 = v8;
    }
    if (v10)
    {
      sub_100010BCC(a5);
      size_t v11 = (void *)swift_allocObject();
      size_t v12 = j__malloc_size(v11);
      v11[2] = v9;
      uint64_t v11[3] = 2 * v12 - 64;
      uint64_t v13 = v11 + 4;
      if (v6)
      {
LABEL_13:
        if (v11 != a4 || v13 >= (void *)((char *)a4 + v9 + 32)) {
          memmove(v13, a4 + 4, v9);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      size_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1000C9EC4(0, v9, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

void *sub_1000C66CC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100010BCC(&qword_1004870C0);
      int64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 10);
      size_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= (void *)((char *)a4 + 10 * v8 + 32)) {
          memmove(v12, a4 + 4, 10 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      int64_t v10 = _swiftEmptyArrayStorage;
      size_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1000C9FAC(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1000C67EC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100010BCC(&qword_10047E990);
      int64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      size_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4]) {
          memmove(v12, a4 + 4, 56 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      int64_t v10 = _swiftEmptyArrayStorage;
      size_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1000CA09C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1000C6914(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100010BCC((uint64_t *)&unk_1004870A0);
      int64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000CA194(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1000C6A24(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100010BCC(&qword_10047E258);
      int64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      int64_t v12 = v11 - 32;
      if (v11 < 32) {
        int64_t v12 = v11 - 31;
      }
      void v10[2] = v8;
      v10[3] = v12 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= (void *)((char *)a4 + 2 * v8 + 32)) {
          memmove(v13, a4 + 4, 2 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000CA3E4(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1000C6B30(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100010BCC(&qword_10047E270);
      int64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000C99D0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1000C6C40(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100010BCC(&qword_10047E968);
      int64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000CB398(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1000C6D50(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100010BCC(&qword_10047E240);
      int64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      int64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1000C9CA4(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1000C6E78(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100010BCC(&qword_10047E260);
      int64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000CB710(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1000C6F88(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100010BCC(qword_10047DD00);
      int64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      int64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1000CB81C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000C70B0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1000C6220(a1, a2, a3, a4, &qword_100485620, type metadata accessor for NANAttribute, type metadata accessor for NANAttribute);
}

void *sub_1000C70E4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100010BCC(&qword_10047DF98);
      int64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000CBA20(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1000C71F4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100010BCC(&qword_10047E1E8);
      int64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000CB92C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1000C7304(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100010BCC(&qword_10047E948);
      int64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      int64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1000CB600(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

unint64_t sub_1000C742C(uint64_t a1)
{
  uint64_t v2 = sub_100010BCC(&qword_10047CEF8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  char v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100010BCC((uint64_t *)&unk_10047CF00);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = &v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1000136F4(v12, (uint64_t)v5, &qword_10047CEF8);
    unint64_t result = sub_1000C7628((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for CodingUserInfoKey();
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    unint64_t result = (unint64_t)sub_10003803C(v9, (_OWORD *)(v7[7] + 32 * v16));
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    unsigned char v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000C7628(uint64_t a1)
{
  type metadata accessor for CodingUserInfoKey();
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return sub_1000C768C(a1, v2);
}

unint64_t sub_1000C768C(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = a1;
  uint64_t v4 = type metadata accessor for CodingUserInfoKey();
  __chkstk_darwin();
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v20 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v11 = v5 + 16;
    uint64_t v12 = v13;
    uint64_t v14 = *(void *)(v11 + 56);
    char v15 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      uint64_t v16 = v11;
      v12(v7, *(void *)(v22 + 48) + v14 * v9, v4);
      char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v15)(v7, v4);
      if (v17) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
      uint64_t v11 = v16;
    }
    while (((*(void *)(v20 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

unint64_t sub_1000C7824(unint64_t result)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v1 = result;
    if (result)
    {
      sub_100010BCC(&qword_10047CEF8);
      uint64_t v2 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      v2[2] = v1;
    }
    else
    {
      uint64_t v2 = _swiftEmptyArrayStorage;
    }
    sub_100010BCC(&qword_10047CEF8);
    return (unint64_t)v2;
  }
  return result;
}

uint64_t sub_1000C78C0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      sub_100010BCC(&qword_10047E9A0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000C79CC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      sub_100010BCC(&qword_10047E9B0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000C7AD8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1000C7BCC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 6 * a1 + 32);
    size_t v6 = 6 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_1000C7CBC(unsigned int a1, unsigned int a2)
{
  if ((a2 & 0x800) != 0) {
    char v2 = 5;
  }
  else {
    char v2 = 3;
  }
  if ((a2 & 0x400) != 0) {
    LOBYTE(v3) = 4;
  }
  else {
    LOBYTE(v3) = v2;
  }
  if ((a2 & 4) != 0) {
    int v3 = (a2 >> 9) & 1;
  }
  if ((a2 & 2) != 0) {
    char v4 = 3;
  }
  else {
    char v4 = v3;
  }
  if (a2) {
    char v5 = 2;
  }
  else {
    char v5 = v4;
  }
  if ((a2 & 8) != 0)
  {
    char v7 = 0;
  }
  else if ((a2 & 0x10) != 0)
  {
    char v7 = 1;
  }
  else
  {
    if ((a2 & 0x2000) == 0) {
      return 0x300000000;
    }
    char v7 = 2;
  }
  unsigned __int8 v9 = v7;
  unsigned __int8 v10 = v5;
  sub_1001C4000();
  return a1 | ((unint64_t)v9 << 32) | ((unint64_t)v10 << 40);
}

uint64_t sub_1000C7D70(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(sub_100010BCC(&qword_10047CF70) - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    unint64_t v11 = v9 + v10 * a1;
    unint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v12;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1000C7ECC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    char v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    char v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000C7FB8@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  long long v3 = a1[3];
  long long v187 = a1[2];
  long long v188 = v3;
  long long v189 = a1[4];
  long long v4 = a1[1];
  long long v185 = *a1;
  long long v186 = v4;
  sub_100083624(0, 10, 0);
  uint64_t v5 = 0;
  unint64_t v6 = _swiftEmptyArrayStorage[2];
  do
  {
    uint64_t v7 = *(void *)((char *)&v185 + v5);
    unint64_t v8 = _swiftEmptyArrayStorage[3];
    if (v6 >= v8 >> 1) {
      sub_100083624(v8 > 1, v6 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v6 + 1;
    _swiftEmptyArrayStorage[v6 + 4] = v7;
    v5 += 8;
    ++v6;
  }
  while (v5 != 80);
  long long v9 = a1[8];
  long long v187 = a1[7];
  long long v188 = v9;
  long long v189 = a1[9];
  long long v10 = a1[6];
  long long v185 = a1[5];
  long long v186 = v10;
  sub_100083624(0, 10, 0);
  uint64_t v11 = 0;
  unint64_t v12 = _swiftEmptyArrayStorage;
  unint64_t v13 = _swiftEmptyArrayStorage[2];
  do
  {
    uint64_t v14 = *(void *)((char *)&v185 + v11);
    uint64_t v178 = v12;
    unint64_t v15 = v12[3];
    if (v13 >= v15 >> 1)
    {
      sub_100083624(v15 > 1, v13 + 1, 1);
      unint64_t v12 = v178;
    }
    v12[2] = v13 + 1;
    v12[v13 + 4] = v14;
    v11 += 8;
    ++v13;
  }
  while (v11 != 80);
  long long v177 = v12;
  long long v16 = a1[13];
  long long v187 = a1[12];
  long long v188 = v16;
  long long v189 = a1[14];
  long long v17 = a1[11];
  long long v185 = a1[10];
  long long v186 = v17;
  sub_100083624(0, 10, 0);
  uint64_t v18 = 0;
  uint64_t v19 = _swiftEmptyArrayStorage;
  unint64_t v20 = _swiftEmptyArrayStorage[2];
  do
  {
    uint64_t v21 = *(void *)((char *)&v185 + v18);
    long long v179 = v19;
    unint64_t v22 = v19[3];
    if (v20 >= v22 >> 1)
    {
      sub_100083624(v22 > 1, v20 + 1, 1);
      uint64_t v19 = v179;
    }
    v19[2] = v20 + 1;
    v19[v20 + 4] = v21;
    v18 += 8;
    ++v20;
  }
  while (v18 != 80);
  uint64_t v176 = v19;
  long long v23 = a1[18];
  long long v187 = a1[17];
  long long v188 = v23;
  long long v189 = a1[19];
  long long v24 = a1[16];
  long long v185 = a1[15];
  long long v186 = v24;
  sub_100083624(0, 10, 0);
  uint64_t v25 = 0;
  int v26 = _swiftEmptyArrayStorage;
  unint64_t v27 = _swiftEmptyArrayStorage[2];
  do
  {
    uint64_t v28 = *(void *)((char *)&v185 + v25);
    uint64_t v180 = v26;
    unint64_t v29 = v26[3];
    if (v27 >= v29 >> 1)
    {
      sub_100083624(v29 > 1, v27 + 1, 1);
      int v26 = v180;
    }
    v26[2] = v27 + 1;
    v26[v27 + 4] = v28;
    v25 += 8;
    ++v27;
  }
  while (v25 != 80);
  long long v175 = v26;
  long long v30 = a1[23];
  long long v187 = a1[22];
  long long v188 = v30;
  long long v189 = a1[24];
  long long v31 = a1[21];
  long long v185 = a1[20];
  long long v186 = v31;
  sub_100083624(0, 10, 0);
  uint64_t v32 = 0;
  uint64_t v33 = _swiftEmptyArrayStorage;
  unint64_t v34 = _swiftEmptyArrayStorage[2];
  do
  {
    uint64_t v35 = *(void *)((char *)&v185 + v32);
    long long v181 = v33;
    unint64_t v36 = v33[3];
    if (v34 >= v36 >> 1)
    {
      sub_100083624(v36 > 1, v34 + 1, 1);
      uint64_t v33 = v181;
    }
    v33[2] = v34 + 1;
    v33[v34 + 4] = v35;
    v32 += 8;
    ++v34;
  }
  while (v32 != 80);
  uint64_t v174 = v33;
  long long v37 = a1[28];
  long long v187 = a1[27];
  long long v188 = v37;
  long long v189 = a1[29];
  long long v38 = a1[26];
  long long v185 = a1[25];
  long long v186 = v38;
  sub_100083624(0, 10, 0);
  uint64_t v39 = 0;
  Class v40 = _swiftEmptyArrayStorage;
  unint64_t v41 = _swiftEmptyArrayStorage[2];
  do
  {
    uint64_t v42 = *(void *)((char *)&v185 + v39);
    uint64_t v182 = v40;
    unint64_t v43 = v40[3];
    if (v41 >= v43 >> 1)
    {
      sub_100083624(v43 > 1, v41 + 1, 1);
      Class v40 = v182;
    }
    v40[2] = v41 + 1;
    v40[v41 + 4] = v42;
    v39 += 8;
    ++v41;
  }
  while (v39 != 80);
  long long v173 = v40;
  uint64_t v45 = *((void *)a1 + 60);
  uint64_t v44 = *((void *)a1 + 61);
  uint64_t v47 = *((void *)a1 + 62);
  uint64_t v46 = *((void *)a1 + 63);
  uint64_t v48 = *((void *)a1 + 64);
  uint64_t v49 = *((void *)a1 + 65);
  *(void *)&long long v185 = _swiftEmptyArrayStorage;
  sub_100083624(0, 6, 0);
  uint64_t v50 = v185;
  unint64_t v52 = *(void *)(v185 + 16);
  unint64_t v51 = *(void *)(v185 + 24);
  unint64_t v53 = v51 >> 1;
  unint64_t v54 = v52 + 1;
  if (v51 >> 1 <= v52)
  {
    sub_100083624(v51 > 1, v52 + 1, 1);
    uint64_t v50 = v185;
    unint64_t v51 = *(void *)(v185 + 24);
    unint64_t v53 = v51 >> 1;
  }
  *(void *)(v50 + 16) = v54;
  *(void *)(v50 + 8 * v52 + 32) = v45;
  *(void *)&long long v185 = v50;
  if (v53 <= v54)
  {
    sub_100083624(v51 > 1, v52 + 2, 1);
    uint64_t v50 = v185;
  }
  *(void *)(v50 + 16) = v52 + 2;
  *(void *)(v50 + 8 * v54 + 32) = v44;
  *(void *)&long long v185 = v50;
  unint64_t v56 = *(void *)(v50 + 16);
  unint64_t v55 = *(void *)(v50 + 24);
  unint64_t v57 = v55 >> 1;
  unint64_t v58 = v56 + 1;
  if (v55 >> 1 <= v56)
  {
    sub_100083624(v55 > 1, v56 + 1, 1);
    uint64_t v50 = v185;
    unint64_t v55 = *(void *)(v185 + 24);
    unint64_t v57 = v55 >> 1;
  }
  *(void *)(v50 + 16) = v58;
  *(void *)(v50 + 8 * v56 + 32) = v47;
  *(void *)&long long v185 = v50;
  if (v57 <= v58)
  {
    sub_100083624(v55 > 1, v56 + 2, 1);
    uint64_t v50 = v185;
  }
  *(void *)(v50 + 16) = v56 + 2;
  *(void *)(v50 + 8 * v58 + 32) = v46;
  *(void *)&long long v185 = v50;
  unint64_t v60 = *(void *)(v50 + 16);
  unint64_t v59 = *(void *)(v50 + 24);
  unint64_t v61 = v59 >> 1;
  unint64_t v62 = v60 + 1;
  if (v59 >> 1 <= v60)
  {
    sub_100083624(v59 > 1, v60 + 1, 1);
    uint64_t v50 = v185;
    unint64_t v59 = *(void *)(v185 + 24);
    unint64_t v61 = v59 >> 1;
  }
  *(void *)(v50 + 16) = v62;
  *(void *)(v50 + 8 * v60 + 32) = v48;
  *(void *)&long long v185 = v50;
  if (v61 <= v62)
  {
    sub_100083624(v59 > 1, v60 + 2, 1);
    uint64_t v50 = v185;
  }
  *(void *)(v50 + 16) = v60 + 2;
  uint64_t v172 = v50;
  *(void *)(v50 + 8 * v62 + 32) = v49;
  long long v63 = a1[36];
  long long v187 = a1[35];
  long long v188 = v63;
  *(void *)&long long v189 = *((void *)a1 + 74);
  long long v64 = a1[34];
  long long v185 = a1[33];
  long long v186 = v64;
  sub_100083624(0, 9, 0);
  uint64_t v65 = 0;
  char v66 = _swiftEmptyArrayStorage;
  unint64_t v67 = _swiftEmptyArrayStorage[2];
  do
  {
    uint64_t v68 = *(void *)((char *)&v185 + v65);
    long long v183 = v66;
    unint64_t v69 = v66[3];
    if (v67 >= v69 >> 1)
    {
      sub_100083624(v69 > 1, v67 + 1, 1);
      char v66 = v183;
    }
    v66[2] = v67 + 1;
    v66[v67 + 4] = v68;
    v65 += 8;
    ++v67;
  }
  while (v65 != 72);
  long long v171 = v66;
  long long v70 = *(long long *)((char *)a1 + 648);
  long long v187 = *(long long *)((char *)a1 + 632);
  long long v188 = v70;
  *(void *)&long long v189 = *((void *)a1 + 83);
  long long v71 = *(long long *)((char *)a1 + 616);
  long long v185 = *(long long *)((char *)a1 + 600);
  long long v186 = v71;
  sub_100083624(0, 9, 0);
  uint64_t v72 = 0;
  uint64_t v73 = _swiftEmptyArrayStorage;
  unint64_t v74 = _swiftEmptyArrayStorage[2];
  do
  {
    uint64_t v75 = *(void *)((char *)&v185 + v72);
    uint64_t v184 = v73;
    unint64_t v76 = v73[3];
    if (v74 >= v76 >> 1)
    {
      sub_100083624(v76 > 1, v74 + 1, 1);
      uint64_t v73 = v184;
    }
    v73[2] = v74 + 1;
    v73[v74 + 4] = v75;
    v72 += 8;
    ++v74;
  }
  while (v72 != 72);
  uint64_t v170 = v73;
  uint64_t v77 = *((void *)a1 + 84);
  uint64_t v78 = *((void *)a1 + 85);
  uint64_t v79 = *((void *)a1 + 86);
  uint64_t v80 = *((void *)a1 + 87);
  *(void *)&long long v185 = _swiftEmptyArrayStorage;
  sub_100083624(0, 4, 0);
  uint64_t v81 = v185;
  unint64_t v83 = *(void *)(v185 + 16);
  unint64_t v82 = *(void *)(v185 + 24);
  unint64_t v84 = v82 >> 1;
  unint64_t v85 = v83 + 1;
  if (v82 >> 1 <= v83)
  {
    sub_100083624(v82 > 1, v83 + 1, 1);
    uint64_t v81 = v185;
    unint64_t v82 = *(void *)(v185 + 24);
    unint64_t v84 = v82 >> 1;
  }
  *(void *)(v81 + 16) = v85;
  *(void *)(v81 + 8 * v83 + 32) = v77;
  *(void *)&long long v185 = v81;
  int64_t v86 = v83 + 2;
  if (v84 <= v85)
  {
    sub_100083624(v82 > 1, v86, 1);
    uint64_t v81 = v185;
  }
  *(void *)(v81 + 16) = v86;
  *(void *)(v81 + 8 * v85 + 32) = v78;
  *(void *)&long long v185 = v81;
  unint64_t v88 = *(void *)(v81 + 16);
  unint64_t v87 = *(void *)(v81 + 24);
  unint64_t v89 = v87 >> 1;
  unint64_t v90 = v88 + 1;
  if (v87 >> 1 <= v88)
  {
    sub_100083624(v87 > 1, v88 + 1, 1);
    uint64_t v81 = v185;
    unint64_t v87 = *(void *)(v185 + 24);
    unint64_t v89 = v87 >> 1;
  }
  *(void *)(v81 + 16) = v90;
  *(void *)(v81 + 8 * v88 + 32) = v79;
  *(void *)&long long v185 = v81;
  int64_t v91 = v88 + 2;
  if (v89 <= v90)
  {
    sub_100083624(v87 > 1, v91, 1);
    uint64_t v81 = v185;
  }
  *(void *)(v81 + 16) = v91;
  uint64_t v169 = v81;
  *(void *)(v81 + 8 * v90 + 32) = v80;
  uint64_t v92 = *((void *)a1 + 88);
  uint64_t v93 = *((void *)a1 + 89);
  uint64_t v94 = *((void *)a1 + 90);
  uint64_t v95 = *((void *)a1 + 91);
  uint64_t v96 = *((void *)a1 + 92);
  *(void *)&long long v185 = _swiftEmptyArrayStorage;
  sub_100083624(0, 5, 0);
  uint64_t v97 = v185;
  unint64_t v99 = *(void *)(v185 + 16);
  unint64_t v98 = *(void *)(v185 + 24);
  unint64_t v100 = v98 >> 1;
  unint64_t v101 = v99 + 1;
  if (v98 >> 1 <= v99)
  {
    sub_100083624(v98 > 1, v99 + 1, 1);
    uint64_t v97 = v185;
    unint64_t v98 = *(void *)(v185 + 24);
    unint64_t v100 = v98 >> 1;
  }
  *(void *)(v97 + 16) = v101;
  *(void *)(v97 + 8 * v99 + 32) = v92;
  *(void *)&long long v185 = v97;
  int64_t v102 = v99 + 2;
  if (v100 <= v101)
  {
    sub_100083624(v98 > 1, v102, 1);
    uint64_t v97 = v185;
  }
  *(void *)(v97 + 16) = v102;
  *(void *)(v97 + 8 * v101 + 32) = v93;
  *(void *)&long long v185 = v97;
  unint64_t v104 = *(void *)(v97 + 16);
  unint64_t v103 = *(void *)(v97 + 24);
  unint64_t v105 = v103 >> 1;
  unint64_t v106 = v104 + 1;
  if (v103 >> 1 <= v104)
  {
    sub_100083624(v103 > 1, v104 + 1, 1);
    uint64_t v97 = v185;
    unint64_t v103 = *(void *)(v185 + 24);
    unint64_t v105 = v103 >> 1;
  }
  *(void *)(v97 + 16) = v106;
  *(void *)(v97 + 8 * v104 + 32) = v94;
  *(void *)&long long v185 = v97;
  int64_t v107 = v104 + 2;
  if (v105 <= v106)
  {
    sub_100083624(v103 > 1, v107, 1);
    uint64_t v97 = v185;
  }
  *(void *)(v97 + 16) = v107;
  *(void *)(v97 + 8 * v106 + 32) = v95;
  *(void *)&long long v185 = v97;
  unint64_t v109 = *(void *)(v97 + 16);
  unint64_t v108 = *(void *)(v97 + 24);
  if (v109 >= v108 >> 1)
  {
    sub_100083624(v108 > 1, v109 + 1, 1);
    uint64_t v97 = v185;
  }
  *(void *)(v97 + 16) = v109 + 1;
  uint64_t v168 = v97;
  *(void *)(v97 + 8 * v109 + 32) = v96;
  long long v110 = *(long long *)((char *)a1 + 792);
  long long v187 = *(long long *)((char *)a1 + 776);
  long long v188 = v110;
  long long v189 = *(long long *)((char *)a1 + 808);
  long long v111 = *(long long *)((char *)a1 + 760);
  long long v185 = *(long long *)((char *)a1 + 744);
  long long v186 = v111;
  sub_100083624(0, 10, 0);
  uint64_t v112 = 0;
  unint64_t v113 = _swiftEmptyArrayStorage[2];
  do
  {
    uint64_t v114 = *(void *)((char *)&v185 + v112);
    unint64_t v115 = _swiftEmptyArrayStorage[3];
    if (v113 >= v115 >> 1) {
      sub_100083624(v115 > 1, v113 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v113 + 1;
    _swiftEmptyArrayStorage[v113 + 4] = v114;
    v112 += 8;
    ++v113;
  }
  while (v112 != 80);
  uint64_t v116 = *((void *)a1 + 103);
  uint64_t v117 = *((void *)a1 + 104);
  uint64_t v118 = *((void *)a1 + 105);
  *(void *)&long long v185 = _swiftEmptyArrayStorage;
  sub_100083624(0, 3, 0);
  uint64_t v119 = v185;
  unint64_t v121 = *(void *)(v185 + 16);
  unint64_t v120 = *(void *)(v185 + 24);
  unint64_t v122 = v120 >> 1;
  unint64_t v123 = v121 + 1;
  if (v120 >> 1 <= v121)
  {
    sub_100083624(v120 > 1, v121 + 1, 1);
    uint64_t v119 = v185;
    unint64_t v120 = *(void *)(v185 + 24);
    unint64_t v122 = v120 >> 1;
  }
  *(void *)(v119 + 16) = v123;
  *(void *)(v119 + 8 * v121 + 32) = v116;
  *(void *)&long long v185 = v119;
  int64_t v124 = v121 + 2;
  if (v122 <= v123)
  {
    sub_100083624(v120 > 1, v124, 1);
    uint64_t v119 = v185;
  }
  *(void *)(v119 + 16) = v124;
  *(void *)(v119 + 8 * v123 + 32) = v117;
  *(void *)&long long v185 = v119;
  unint64_t v126 = *(void *)(v119 + 16);
  unint64_t v125 = *(void *)(v119 + 24);
  if (v126 >= v125 >> 1)
  {
    sub_100083624(v125 > 1, v126 + 1, 1);
    uint64_t v119 = v185;
  }
  *(void *)(v119 + 16) = v126 + 1;
  uint64_t v167 = v119;
  *(void *)(v119 + 8 * v126 + 32) = v118;
  long long v127 = a1[56];
  long long v187 = a1[55];
  long long v188 = v127;
  long long v189 = a1[57];
  long long v128 = a1[54];
  long long v185 = a1[53];
  long long v186 = v128;
  sub_100083624(0, 10, 0);
  uint64_t v129 = 0;
  unint64_t v130 = _swiftEmptyArrayStorage[2];
  do
  {
    uint64_t v131 = *(void *)((char *)&v185 + v129);
    unint64_t v132 = _swiftEmptyArrayStorage[3];
    if (v130 >= v132 >> 1) {
      sub_100083624(v132 > 1, v130 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v130 + 1;
    _swiftEmptyArrayStorage[v130 + 4] = v131;
    v129 += 8;
    ++v130;
  }
  while (v129 != 80);
  long long v133 = a1[61];
  long long v187 = a1[60];
  long long v188 = v133;
  long long v189 = a1[62];
  long long v134 = a1[59];
  long long v185 = a1[58];
  long long v186 = v134;
  sub_100083624(0, 10, 0);
  uint64_t v135 = 0;
  unint64_t v136 = _swiftEmptyArrayStorage[2];
  do
  {
    uint64_t v137 = *(void *)((char *)&v185 + v135);
    unint64_t v138 = _swiftEmptyArrayStorage[3];
    if (v136 >= v138 >> 1) {
      sub_100083624(v138 > 1, v136 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v136 + 1;
    _swiftEmptyArrayStorage[v136 + 4] = v137;
    v135 += 8;
    ++v136;
  }
  while (v135 != 80);
  long long v139 = a1[66];
  long long v187 = a1[65];
  long long v188 = v139;
  long long v189 = a1[67];
  long long v140 = a1[64];
  long long v185 = a1[63];
  long long v186 = v140;
  sub_100083624(0, 10, 0);
  uint64_t v141 = 0;
  unint64_t v142 = _swiftEmptyArrayStorage[2];
  do
  {
    uint64_t v143 = *(void *)((char *)&v185 + v141);
    unint64_t v144 = _swiftEmptyArrayStorage[3];
    if (v142 >= v144 >> 1) {
      sub_100083624(v144 > 1, v142 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v142 + 1;
    _swiftEmptyArrayStorage[v142 + 4] = v143;
    v141 += 8;
    ++v142;
  }
  while (v141 != 80);
  long long v145 = a1[69];
  long long v146 = a1[71];
  long long v187 = a1[70];
  long long v188 = v146;
  long long v189 = a1[72];
  long long v185 = a1[68];
  long long v186 = v145;
  sub_100083624(0, 10, 0);
  uint64_t v147 = 0;
  unint64_t v148 = _swiftEmptyArrayStorage[2];
  do
  {
    uint64_t v149 = *(void *)((char *)&v185 + v147);
    unint64_t v150 = _swiftEmptyArrayStorage[3];
    if (v148 >= v150 >> 1) {
      sub_100083624(v150 > 1, v148 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v148 + 1;
    _swiftEmptyArrayStorage[v148 + 4] = v149;
    v147 += 8;
    ++v148;
  }
  while (v147 != 80);
  uint64_t v151 = *((void *)a1 + 146);
  uint64_t v152 = *((void *)a1 + 147);
  uint64_t v153 = *((void *)a1 + 148);
  uint64_t v154 = *((void *)a1 + 149);
  sub_100083624(0, 4, 0);
  unint64_t v156 = _swiftEmptyArrayStorage[2];
  unint64_t v155 = _swiftEmptyArrayStorage[3];
  unint64_t v157 = v155 >> 1;
  unint64_t v158 = v156 + 1;
  if (v155 >> 1 <= v156)
  {
    sub_100083624(v155 > 1, v156 + 1, 1);
    unint64_t v155 = _swiftEmptyArrayStorage[3];
    unint64_t v157 = v155 >> 1;
  }
  _swiftEmptyArrayStorage[2] = v158;
  _swiftEmptyArrayStorage[v156 + 4] = v151;
  int64_t v159 = v156 + 2;
  if (v157 <= v158) {
    sub_100083624(v155 > 1, v159, 1);
  }
  _swiftEmptyArrayStorage[2] = v159;
  _swiftEmptyArrayStorage[v158 + 4] = v152;
  unint64_t v161 = _swiftEmptyArrayStorage[2];
  unint64_t v160 = _swiftEmptyArrayStorage[3];
  unint64_t v162 = v160 >> 1;
  unint64_t v163 = v161 + 1;
  if (v160 >> 1 <= v161)
  {
    sub_100083624(v160 > 1, v161 + 1, 1);
    unint64_t v160 = _swiftEmptyArrayStorage[3];
    unint64_t v162 = v160 >> 1;
  }
  _swiftEmptyArrayStorage[2] = v163;
  _swiftEmptyArrayStorage[v161 + 4] = v153;
  int64_t v164 = v161 + 2;
  if (v162 <= v163) {
    sub_100083624(v160 > 1, v164, 1);
  }
  _swiftEmptyArrayStorage[2] = v164;
  _swiftEmptyArrayStorage[v163 + 4] = v154;
  *(void *)&long long v185 = _swiftEmptyArrayStorage;
  *((void *)&v185 + 1) = v177;
  *(void *)&long long v186 = v176;
  *((void *)&v186 + 1) = v175;
  *(void *)&long long v187 = v174;
  *((void *)&v187 + 1) = v173;
  *(void *)&long long v188 = v172;
  *((void *)&v188 + 1) = v171;
  *(void *)&long long v189 = v170;
  *((void *)&v189 + 1) = v169;
  uint64_t v190 = v168;
  long long v191 = _swiftEmptyArrayStorage;
  uint64_t v192 = v167;
  long long v193 = _swiftEmptyArrayStorage;
  long long v194 = _swiftEmptyArrayStorage;
  uint64_t v195 = _swiftEmptyArrayStorage;
  uint64_t v196 = _swiftEmptyArrayStorage;
  char v197 = _swiftEmptyArrayStorage;
  NANBitmap.Channel.operatingClass.getter(&v185);
  return sub_10006EC68((uint64_t)&v185, a2, &qword_10047E9E0);
}

__n128 sub_1000C8F78@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 80);
  int v5 = *(_DWORD *)(a1 + 88);
  int v6 = *(_DWORD *)(a1 + 96);
  int v7 = *(_DWORD *)(a1 + 104);
  sub_100083684(0, 4, 0);
  unint64_t v9 = _swiftEmptyArrayStorage[2];
  unint64_t v8 = _swiftEmptyArrayStorage[3];
  unint64_t v10 = v8 >> 1;
  unint64_t v11 = v9 + 1;
  if (v8 >> 1 <= v9)
  {
    sub_100083684(v8 > 1, v9 + 1, 1);
    unint64_t v8 = _swiftEmptyArrayStorage[3];
    unint64_t v10 = v8 >> 1;
  }
  _swiftEmptyArrayStorage[2] = v11;
  *((_DWORD *)&_swiftEmptyArrayStorage[4] + v9) = v4;
  if (v10 <= v11) {
    sub_100083684(v8 > 1, v9 + 2, 1);
  }
  _swiftEmptyArrayStorage[2] = v9 + 2;
  *((_DWORD *)&_swiftEmptyArrayStorage[4] + v11) = v5;
  unint64_t v13 = _swiftEmptyArrayStorage[2];
  unint64_t v12 = _swiftEmptyArrayStorage[3];
  unint64_t v14 = v12 >> 1;
  unint64_t v15 = v13 + 1;
  if (v12 >> 1 <= v13)
  {
    sub_100083684(v12 > 1, v13 + 1, 1);
    unint64_t v12 = _swiftEmptyArrayStorage[3];
    unint64_t v14 = v12 >> 1;
  }
  _swiftEmptyArrayStorage[2] = v15;
  *((_DWORD *)&_swiftEmptyArrayStorage[4] + v13) = v6;
  int64_t v16 = v13 + 2;
  if (v14 <= v15) {
    sub_100083684(v12 > 1, v16, 1);
  }
  _swiftEmptyArrayStorage[2] = v16;
  *((_DWORD *)&_swiftEmptyArrayStorage[4] + v15) = v7;
  int v17 = *(_DWORD *)(a1 + 112);
  int v18 = *(_DWORD *)(a1 + 120);
  int v67 = *(_DWORD *)(a1 + 128);
  int v19 = *(_DWORD *)(a1 + 136);
  sub_100083684(0, 4, 0);
  unint64_t v21 = _swiftEmptyArrayStorage[2];
  unint64_t v20 = _swiftEmptyArrayStorage[3];
  unint64_t v22 = v20 >> 1;
  unint64_t v23 = v21 + 1;
  if (v20 >> 1 <= v21)
  {
    sub_100083684(v20 > 1, v21 + 1, 1);
    unint64_t v20 = _swiftEmptyArrayStorage[3];
    unint64_t v22 = v20 >> 1;
  }
  _swiftEmptyArrayStorage[2] = v23;
  *((_DWORD *)&_swiftEmptyArrayStorage[4] + v21) = v17;
  if (v22 <= v23) {
    sub_100083684(v20 > 1, v21 + 2, 1);
  }
  _swiftEmptyArrayStorage[2] = v21 + 2;
  *((_DWORD *)&_swiftEmptyArrayStorage[4] + v23) = v18;
  unint64_t v25 = _swiftEmptyArrayStorage[2];
  unint64_t v24 = _swiftEmptyArrayStorage[3];
  unint64_t v26 = v24 >> 1;
  unint64_t v27 = v25 + 1;
  if (v24 >> 1 <= v25)
  {
    sub_100083684(v24 > 1, v25 + 1, 1);
    unint64_t v24 = _swiftEmptyArrayStorage[3];
    unint64_t v26 = v24 >> 1;
  }
  _swiftEmptyArrayStorage[2] = v27;
  *((_DWORD *)&_swiftEmptyArrayStorage[4] + v25) = v67;
  int64_t v28 = v25 + 2;
  if (v26 <= v27) {
    sub_100083684(v24 > 1, v28, 1);
  }
  _swiftEmptyArrayStorage[2] = v28;
  *((_DWORD *)&_swiftEmptyArrayStorage[4] + v27) = v19;
  int v29 = *(_DWORD *)(a1 + 144);
  int v30 = *(_DWORD *)(a1 + 152);
  int v65 = *(_DWORD *)(a1 + 160);
  int v68 = *(_DWORD *)(a1 + 168);
  sub_100083684(0, 4, 0);
  unint64_t v32 = _swiftEmptyArrayStorage[2];
  unint64_t v31 = _swiftEmptyArrayStorage[3];
  unint64_t v33 = v31 >> 1;
  unint64_t v34 = v32 + 1;
  if (v31 >> 1 <= v32)
  {
    sub_100083684(v31 > 1, v32 + 1, 1);
    unint64_t v31 = _swiftEmptyArrayStorage[3];
    unint64_t v33 = v31 >> 1;
  }
  _swiftEmptyArrayStorage[2] = v34;
  *((_DWORD *)&_swiftEmptyArrayStorage[4] + v32) = v29;
  if (v33 <= v34) {
    sub_100083684(v31 > 1, v32 + 2, 1);
  }
  _swiftEmptyArrayStorage[2] = v32 + 2;
  *((_DWORD *)&_swiftEmptyArrayStorage[4] + v34) = v30;
  unint64_t v36 = _swiftEmptyArrayStorage[2];
  unint64_t v35 = _swiftEmptyArrayStorage[3];
  unint64_t v37 = v35 >> 1;
  unint64_t v38 = v36 + 1;
  if (v35 >> 1 <= v36)
  {
    sub_100083684(v35 > 1, v36 + 1, 1);
    unint64_t v35 = _swiftEmptyArrayStorage[3];
    unint64_t v37 = v35 >> 1;
  }
  _swiftEmptyArrayStorage[2] = v38;
  *((_DWORD *)&_swiftEmptyArrayStorage[4] + v36) = v65;
  int64_t v39 = v36 + 2;
  if (v37 <= v38) {
    sub_100083684(v35 > 1, v39, 1);
  }
  _swiftEmptyArrayStorage[2] = v39;
  *((_DWORD *)&_swiftEmptyArrayStorage[4] + v38) = v68;
  int v40 = *(_DWORD *)(a1 + 176);
  int v41 = *(_DWORD *)(a1 + 184);
  int v66 = *(_DWORD *)(a1 + 192);
  int v69 = *(_DWORD *)(a1 + 200);
  sub_100083684(0, 4, 0);
  unint64_t v43 = _swiftEmptyArrayStorage[2];
  unint64_t v42 = _swiftEmptyArrayStorage[3];
  unint64_t v44 = v42 >> 1;
  unint64_t v45 = v43 + 1;
  if (v42 >> 1 <= v43)
  {
    sub_100083684(v42 > 1, v43 + 1, 1);
    unint64_t v42 = _swiftEmptyArrayStorage[3];
    unint64_t v44 = v42 >> 1;
  }
  _swiftEmptyArrayStorage[2] = v45;
  *((_DWORD *)&_swiftEmptyArrayStorage[4] + v43) = v40;
  if (v44 <= v45) {
    sub_100083684(v42 > 1, v43 + 2, 1);
  }
  _swiftEmptyArrayStorage[2] = v43 + 2;
  *((_DWORD *)&_swiftEmptyArrayStorage[4] + v45) = v41;
  unint64_t v47 = _swiftEmptyArrayStorage[2];
  unint64_t v46 = _swiftEmptyArrayStorage[3];
  unint64_t v48 = v46 >> 1;
  unint64_t v49 = v47 + 1;
  if (v46 >> 1 <= v47)
  {
    sub_100083684(v46 > 1, v47 + 1, 1);
    unint64_t v46 = _swiftEmptyArrayStorage[3];
    unint64_t v48 = v46 >> 1;
  }
  _swiftEmptyArrayStorage[2] = v49;
  *((_DWORD *)&_swiftEmptyArrayStorage[4] + v47) = v66;
  int64_t v50 = v47 + 2;
  if (v48 <= v49) {
    sub_100083684(v46 > 1, v50, 1);
  }
  _swiftEmptyArrayStorage[2] = v50;
  *((_DWORD *)&_swiftEmptyArrayStorage[4] + v49) = v69;
  uint64_t v51 = *(void *)(a1 + 32);
  uint64_t v52 = *(unsigned __int8 *)(a1 + 72);
  unint64_t v53 = *(unsigned int *)(a1 + 40) | ((unint64_t)*(unsigned __int8 *)(a1 + 44) << 32);
  unint64_t v54 = *(unsigned int *)(a1 + 48) | ((unint64_t)*(unsigned __int8 *)(a1 + 52) << 32);
  uint64_t v55 = 0x1000000000000;
  if (!*(unsigned char *)(a1 + 62)) {
    uint64_t v55 = 0;
  }
  uint64_t v56 = 0x100000000000000;
  if (!*(unsigned char *)(a1 + 63)) {
    uint64_t v56 = 0;
  }
  unint64_t v57 = *(unsigned int *)(a1 + 56) | ((unint64_t)*(unsigned __int8 *)(a1 + 60) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 61) << 40) | v55 | v56;
  uint64_t v58 = 256;
  if (!*(unsigned char *)(a1 + 65)) {
    uint64_t v58 = 0;
  }
  uint64_t v59 = v58 | *(unsigned __int8 *)(a1 + 64);
  uint64_t v60 = 0x10000;
  if (!*(unsigned char *)(a1 + 66)) {
    uint64_t v60 = 0;
  }
  uint64_t v61 = 0x1000000;
  if (!*(unsigned char *)(a1 + 67)) {
    uint64_t v61 = 0;
  }
  unint64_t v62 = v59 | v60 | v61 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 69) << 40) | ((unint64_t)*(unsigned __int8 *)(a1 + 70) << 48) | ((unint64_t)*(unsigned __int8 *)(a1 + 71) << 56);
  __n128 result = *(__n128 *)a1;
  long long v64 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v64;
  *(void *)(a2 + 32) = v51;
  *(void *)(a2 + 40) = v53;
  *(void *)(a2 + 48) = v54;
  *(void *)(a2 + 56) = v57;
  *(void *)(a2 + 64) = v62;
  *(void *)(a2 + 72) = v52;
  *(void *)(a2 + 80) = _swiftEmptyArrayStorage;
  *(void *)(a2 + 88) = _swiftEmptyArrayStorage;
  *(void *)(a2 + 96) = _swiftEmptyArrayStorage;
  *(void *)(a2 + 104) = _swiftEmptyArrayStorage;
  return result;
}

NSString sub_1000C95E0(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 36) > 2u) {
    return 0;
  }
  uint64_t v1 = String.init(cString:)();
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = v1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1000C96AC(__int16 a1)
{
  LODWORD(result) = _s7CoreP2P15IEEE80211StatusO8rawValueACSgs6UInt16V_tcfC_0(a1 & 0x1FF);
  if (result == 54) {
    return 1;
  }
  else {
    return result;
  }
}

uint64_t sub_1000C96D4(__int16 a1)
{
  LODWORD(result) = _s7CoreP2P15IEEE80211ReasonO8rawValueACSgs6UInt16V_tcfC_0(a1 & 0x1FF);
  if (result == 34) {
    return 1;
  }
  else {
    return result;
  }
}

uint64_t sub_1000C96FC()
{
  return _swift_deallocObject(v0, 48, 7);
}

unint64_t sub_1000C970C()
{
  unint64_t result = qword_10047E780;
  if (!qword_10047E780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E780);
  }
  return result;
}

unint64_t sub_1000C9760()
{
  unint64_t result = qword_10047E788;
  if (!qword_10047E788)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E788);
  }
  return result;
}

unint64_t sub_1000C97B4()
{
  unint64_t result = qword_10047E790;
  if (!qword_10047E790)
  {
    sub_100014434(&qword_10047DCD8);
    sub_1000CAF84(&qword_10047E798, (void (*)(uint64_t))type metadata accessor for NANAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E790);
  }
  return result;
}

uint64_t sub_1000C9858(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_unownedRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1000C9898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_unownedRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000C98D8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 72 * a1 + 32;
    unint64_t v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000C99D0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1000C9AC4(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 4 * a1 + 32);
    size_t v6 = 4 * v4;
    int v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000C9BB0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000C9CA4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      sub_100010BCC(&qword_10047E248);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000C9DB4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      sub_100010BCC(&qword_10047E2D8);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1000C9EC4(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + a1 + 32);
    unint64_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1000C9FAC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 10 * a1 + 32);
    size_t v6 = 10 * v4;
    int v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000CA09C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 56 * a1 + 32;
    unint64_t v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000CA194(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000CA288(uint64_t a1)
{
  unint64_t v2 = (const void *)(a1 + 12);
  if (*(unsigned char *)(a1 + 6))
  {
    memcpy(__dst, v2, sizeof(__dst));
    sub_1000C3E50((unint64_t)__dst, a1, &v5);
  }
  else
  {
    memcpy(__dst, v2, sizeof(__dst));
    sub_1000C3CFC((unint64_t)__dst, a1, &v5);
  }
  return v5;
}

uint64_t sub_1000CA330(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_1000CA398(unsigned char *a1)
{
  a1[3712] = 1;
}

uint64_t sub_1000CA3C8(uint64_t result)
{
  *(unsigned char *)(result + 3712) = 0;
  return result;
}

void sub_1000CA3D0(_OWORD *a1)
{
  *a1 = xmmword_1003B2FA0;
  bzero(a1 + 1, 0xFA0uLL);
}

char *sub_1000CA3E4(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 2 * a1 + 32);
    size_t v6 = 2 * v4;
    int v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000CA4D0(uint64_t a1, unint64_t a2, __int16 a3)
{
  if ((a3 & 0xFF00) != 0x200) {
    return sub_10000C970(a1, a2);
  }
  return a1;
}

uint64_t sub_1000CA4E4()
{
  __int16 v17 = 0;
  memset(v16, 0, sizeof(v16));
  unint64_t v1 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v2 = type metadata accessor for BinaryEncoder();
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1003B2440;
  *(void *)(v3 + 32) = v1;
  v18[3] = v2;
  v18[4] = sub_1000CAF84((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
  v18[0] = v3;
  type metadata accessor for NANAttribute(0);
  sub_1000CAF84(&qword_10047E7B8, (void (*)(uint64_t))type metadata accessor for NANAttribute);
  swift_bridgeObjectRetain();
  swift_retain();
  Array<A>.encode(to:)();
  sub_100010754((uint64_t)v18);
  if (v0)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v5 = *(void *)(v3 + 16);
  unint64_t v6 = *(void *)(v3 + 24);
  sub_100013D44(v5, v6);
  swift_release();
  switch(v6 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v5), v5))
      {
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      if (HIDWORD(v5) - (int)v5 >= 256) {
        goto LABEL_12;
      }
LABEL_14:
      if (__OFSUB__(HIDWORD(v5), v5))
      {
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      char v11 = 0;
      if (HIDWORD(v5) - (int)v5 < 0xFFFF)
      {
LABEL_16:
        if (v11)
        {
          uint64_t v14 = *(void *)(v5 + 16);
          uint64_t v13 = *(void *)(v5 + 24);
          BOOL v9 = __OFSUB__(v13, v14);
          unint64_t v15 = v13 - v14;
          if (!v9)
          {
LABEL_22:
            if ((v15 & 0x8000000000000000) != 0 || v15 >= 0x10000)
            {
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              JUMPOUT(0x1000CA8A0);
            }
LABEL_4:
            sub_10005A9A4(v5, v6, v16, (uint64_t)&v17);
            return sub_10000C970(v5, v6);
          }
          __break(1u);
        }
        LODWORD(v15) = HIDWORD(v5) - v5;
        if (!__OFSUB__(HIDWORD(v5), v5))
        {
          unint64_t v15 = (int)v15;
          goto LABEL_22;
        }
LABEL_28:
        __break(1u);
      }
LABEL_12:
      sub_10000F000();
      swift_allocError();
      *(_OWORD *)uint64_t v12 = xmmword_1003B2F60;
      *(unsigned char *)(v12 + 16) = 0;
      swift_willThrow();
      return sub_10000C970(v5, v6);
    case 2uLL:
      uint64_t v8 = *(void *)(v5 + 16);
      uint64_t v7 = *(void *)(v5 + 24);
      BOOL v9 = __OFSUB__(v7, v8);
      uint64_t v10 = v7 - v8;
      if (v9) {
        goto LABEL_26;
      }
      if (v10 >= 256) {
        goto LABEL_12;
      }
      if (v6 >> 62 != 2) {
        goto LABEL_14;
      }
      char v11 = 1;
      goto LABEL_16;
    default:
      goto LABEL_4;
  }
}

void *sub_1000CA8B0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _WORD *a3@<X8>)
{
  unint64_t v6 = a2 >> 62;
  bzero(v19, 0x802uLL);
  switch(v6)
  {
    case 1uLL:
      if ((a1 ^ (unint64_t)(a1 << 32)) >> 32) {
        goto LABEL_12;
      }
      goto LABEL_7;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v8 = *(void *)(a1 + 24);
      if (v7 == v8) {
        goto LABEL_7;
      }
      if (v6 != 2) {
        goto LABEL_12;
      }
      if (__OFSUB__(v8, v7))
      {
        __break(1u);
LABEL_12:
        if (__OFSUB__(HIDWORD(a1), a1)) {
          __break(1u);
        }
      }
LABEL_13:
      __chkstk_darwin();
      uint64_t v15 = a1;
      uint64_t v16 = a2;
      uint64_t v17 = v10;
      uint64_t v11 = sub_100010BCC(&qword_10047E988);
      sub_10024DEDC((uint64_t)v19, (uint64_t)sub_1000CBB14, (uint64_t)&v14, v11, (uint64_t)&type metadata for Never, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Never, v12);
      sub_10000C970(a1, a2);
      __int16 v9 = v18;
      if ((v18 & 0x8000000000000000) != 0)
      {
        LODWORD(v17) = 0;
        uint64_t v16 = 3451;
        LOBYTE(v15) = 2;
LABEL_19:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x1000CAB10);
      }
      if (v18 >= 0x10000)
      {
        LODWORD(v17) = 0;
        uint64_t v16 = 3455;
        LOBYTE(v15) = 2;
        goto LABEL_19;
      }
LABEL_15:
      uint64_t result = memcpy(a3, v19, 0x800uLL);
      a3[1024] = v9;
      return result;
    case 3uLL:
      goto LABEL_7;
    default:
      if ((a2 & 0xFF000000000000) != 0) {
        goto LABEL_13;
      }
LABEL_7:
      sub_10000C970(a1, a2);
      __int16 v9 = 0;
      goto LABEL_15;
  }
}

uint64_t sub_1000CAB20(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a7 != 1)
  {
    sub_10000C970(a2, a3);
    sub_10000C95C(a4, a5);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000CAB88(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000CABC4(uint64_t a1)
{
  return a1;
}

void sub_1000CAC00(uint64_t a1)
{
}

void sub_1000CAC30(uint64_t a1)
{
}

void sub_1000CAC60(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t *), uint64_t a3)
{
  sub_1000BFB48(a1, v3[6], v3[2], v3[3], v3[4], v3[5], a2, a3);
}

uint64_t sub_1000CAC8C()
{
  return sub_1000CAF84(&qword_10047D1F8, (void (*)(uint64_t))type metadata accessor for AppleDevice);
}

uint64_t sub_1000CACD4(uint64_t a1)
{
  uint64_t result = sub_1000CAF84((unint64_t *)&unk_10047DCE0, (void (*)(uint64_t))type metadata accessor for AppleIO80211Driver);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for AppleIO80211Driver()
{
  uint64_t result = qword_10047E890;
  if (!qword_10047E890) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000CAD78()
{
  return sub_1000CAF84(&qword_10047D200, (void (*)(uint64_t))type metadata accessor for AppleDevice);
}

uint64_t sub_1000CADC0()
{
  return sub_10000F9CC(&qword_10047E800, &qword_10047E808);
}

void *sub_1000CADFC@<X0>(void *a1@<X8>)
{
  uint64_t result = AppleIO80211Driver.capabilities.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000CAE28(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 72) = *a1;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000CAE6C()
{
  return type metadata accessor for AppleIO80211Driver();
}

uint64_t sub_1000CAE74()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void sub_1000CAF3C(uint64_t a1)
{
  sub_1000BFA6C(a1, **(void **)(v1 + 16));
}

void sub_1000CAF5C(uint64_t a1)
{
  sub_1000BF990(a1, **(void **)(v1 + 16));
}

uint64_t sub_1000CAF7C(uint64_t a1, uint64_t a2)
{
  return sub_10020B5CC(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24));
}

uint64_t sub_1000CAF84(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000CAFCC(uint64_t result)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    uint64_t v4 = result + 32;
    uint64_t v18 = result;
    swift_bridgeObjectRetain();
    unint64_t v5 = 0;
    while (1)
    {
      if (v5 <= 1)
      {
        unint64_t v6 = v4 + 16 * v5;
        uint64_t v7 = *(void *)(v6 + 8);
        __int16 v8 = *(_WORD *)(v6 + 2);
        swift_bridgeObjectRetain();
        sub_10008CA90(0, 4, v8);
        if (v2)
        {
          uint64_t result = swift_unexpectedError();
          __break(1u);
          return result;
        }
        uint64_t v9 = *(void *)(v7 + 16);
        if (v9)
        {
          swift_bridgeObjectRetain();
          unsigned int v10 = 0;
          uint64_t v11 = 32;
          do
          {
            long long v12 = *(_OWORD *)(v7 + v11);
            long long v13 = *(_OWORD *)(v7 + v11 + 16);
            long long v14 = *(_OWORD *)(v7 + v11 + 32);
            char v17 = *(unsigned char *)(v7 + v11 + 48);
            v16[1] = v13;
            unsigned char v16[2] = v14;
            v16[0] = v12;
            if (v10 <= 0xF)
            {
              sub_1000CAB88((uint64_t)v16);
              sub_1000C2600((unint64_t)&v15);
              sub_1000CABC4((uint64_t)v16);
              ++v10;
            }
            v11 += 56;
            --v9;
          }
          while (v9);
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
      }
      if (++v5 == v3) {
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

uint64_t sub_1000CB14C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v8 = *(void *)(v3 + 24);
  uint64_t v10 = a1 & 0xFFFFFFFFFFFFLL;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_100069DEC(v10, a2, a3, v9, v8, 1u);
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  if (!v4)
  {
    switch(*(unsigned char *)(v3 + 32))
    {
      case 1:
        swift_bridgeObjectRelease();
        goto LABEL_5;
      default:
        char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = swift_bridgeObjectRelease();
        if (v12)
        {
LABEL_5:
          int v13 = 1;
          __int16 v14 = a1;
          char v15 = BYTE2(a1);
          char v16 = BYTE3(a1);
          char v17 = BYTE4(a1);
          char v18 = BYTE5(a1);
          swift_retain();
          swift_bridgeObjectRetain();
          AppleDevice.setRequest(requestType:data:on:)(0x19FuLL, (uint64_t)&v13, (uint64_t)&v19, 0, v9, v8);
          swift_bridgeObjectRelease();
          uint64_t result = swift_release();
        }
        break;
    }
  }
  return result;
}

void sub_1000CB378(uint64_t a1)
{
  sub_1000C1EE8(a1, *(void *)(v1 + 16), **(void **)(v1 + 24));
}

uint64_t sub_1000CB398(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      sub_100010BCC(&qword_10047E6F8);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000CB4A4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000CB600(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      sub_100010BCC(&qword_10047E950);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000CB710(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      sub_100010BCC((uint64_t *)&unk_1004853E0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000CB81C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      sub_100010BCC(&qword_10047CF60);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000CB92C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000CBA20(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000CBB14@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000C3820(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

void sub_1000CBB38(uint64_t a1)
{
  sub_1000C1FC4(a1, v1[5], v1[6], v1[2], v1[3], v1[4]);
}

uint64_t sub_1000CBB5C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = sub_1000BE6C8(v3[8], a1, a2, v3[2], v3[4], v3[5], v3[6]);
  if (v4) {
    *a3 = v4;
  }
  return result;
}

uint64_t sub_1000CBBA8(unint64_t a1, unint64_t a2)
{
  return sub_10024C5EC(a1, a2, *(void ***)(v2 + 16), *(uint64_t **)(v2 + 24));
}

uint64_t sub_1000CBBB0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000CBC18(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t sub_1000CBC30(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000CBC90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5) {
    return sub_1000CBC9C(a1, a2, a3, a4);
  }
  return a1;
}

uint64_t sub_1000CBC9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *sub_1000CBCB4()
{
  return variable initialization expression of NANMatchingFilter.matchingFilterList();
}

void sub_1000CBCCC(uint64_t a1)
{
}

void sub_1000CBCE4(uint64_t a1)
{
}

uint64_t *SCPreferencesRef.p2pPreferences.unsafeMutableAddressor()
{
  if (qword_10047BF98 != -1) {
    swift_once();
  }
  return &static SCPreferencesRef.p2pPreferences;
}

uint64_t CachedPreferenceStorage.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  type metadata accessor for InMemoryPreferenceStorage();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = &_swiftEmptyDictionarySingleton;
  *a3 = v6;
  uint64_t v7 = (char *)a3 + *(int *)(type metadata accessor for CachedPreferenceStorage() + 36);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32);

  return v8(v7, a1, a2);
}

uint64_t LockedPreferencesStorage.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  type metadata accessor for Lock();
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = (_DWORD *)swift_slowAlloc();
  *(void *)(v6 + 16) = v7;
  *uint64_t v7 = 0;
  *a3 = v6;
  uint64_t v8 = (char *)a3 + *(int *)(type metadata accessor for LockedPreferencesStorage() + 36);
  uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32);

  return v9(v8, a1, a2);
}

Swift::Void __swiftcall CachedPreferenceStorage.invalidateCache()()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  *(void *)(v1 + 16) = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease();
}

void LockedPreferencesStorage.withBackingStorage(_:)(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(os_unfair_lock_s **)(*(void *)v3 + 16);
  os_unfair_lock_lock(v6);
  a1(v3 + *(int *)(a3 + 36));

  os_unfair_lock_unlock(v6);
}

uint64_t CachedPreferenceStorage.withBackingStorage(_:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(v3 + *(int *)(a3 + 36));
}

void *PreferenceDefaults.EnableUserspaceP2POptions.none.unsafeMutableAddressor()
{
  return &static PreferenceDefaults.EnableUserspaceP2POptions.none;
}

void *PreferenceDefaults.EnableUserspaceP2POptions.localeManager.unsafeMutableAddressor()
{
  return &static PreferenceDefaults.EnableUserspaceP2POptions.localeManager;
}

void *PreferenceDefaults.EnableUserspaceP2POptions.infraManager.unsafeMutableAddressor()
{
  return &static PreferenceDefaults.EnableUserspaceP2POptions.infraManager;
}

void *PreferenceDefaults.EnableUserspaceP2POptions.rawEventPayload.unsafeMutableAddressor()
{
  return &static PreferenceDefaults.EnableUserspaceP2POptions.rawEventPayload;
}

void *PreferenceDefaults.EnableUserspaceP2POptions.awdlToWiFiAwareMigration.unsafeMutableAddressor()
{
  return &static PreferenceDefaults.EnableUserspaceP2POptions.awdlToWiFiAwareMigration;
}

void *PreferenceDefaults.EnableUserspaceP2POptions.keepAliveTermination.unsafeMutableAddressor()
{
  return &static PreferenceDefaults.EnableUserspaceP2POptions.keepAliveTermination;
}

void *PreferenceDefaults.EnableUserspaceP2POptions.infraRealTimePacketThreshold.unsafeMutableAddressor()
{
  return &static PreferenceDefaults.EnableUserspaceP2POptions.infraRealTimePacketThreshold;
}

void *PreferenceDefaults.EnableUserspaceP2POptions.remoteScreenRTGSyncElection.unsafeMutableAddressor()
{
  return &static PreferenceDefaults.EnableUserspaceP2POptions.remoteScreenRTGSyncElection;
}

void *PreferenceDefaults.EnableUserspaceP2POptions.all.unsafeMutableAddressor()
{
  return &static PreferenceDefaults.EnableUserspaceP2POptions.all;
}

uint64_t static PreferenceDefaults.EnableUserspaceP2POptions.all.getter()
{
  return 127;
}

uint64_t PreferenceDefaults.EnableUserspaceP2POptions.description.getter(char a1)
{
  uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
  v2._countAndFlagsBits = 10272;
  v2._object = (void *)0xE200000000000000;
  String.append(_:)(v2);
  if ((a1 & 0x7F) != 0)
  {
    if (a1)
    {
      v8._object = (void *)0x80000001003DB620;
      v8._countAndFlagsBits = 0xD000000000000010;
      String.append(_:)(v8);
      if ((a1 & 2) == 0)
      {
LABEL_4:
        if ((a1 & 4) == 0) {
          goto LABEL_5;
        }
        goto LABEL_15;
      }
    }
    else if ((a1 & 2) == 0)
    {
      goto LABEL_4;
    }
    v9._countAndFlagsBits = 0x614D206172666E49;
    v9._object = (void *)0xEF202C726567616ELL;
    String.append(_:)(v9);
    if ((a1 & 4) == 0)
    {
LABEL_5:
      if ((a1 & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_16;
    }
LABEL_15:
    v10._countAndFlagsBits = 0xD000000000000013;
    v10._object = (void *)0x80000001003DB600;
    String.append(_:)(v10);
    if ((a1 & 8) == 0)
    {
LABEL_6:
      if ((a1 & 0x10) == 0) {
        goto LABEL_7;
      }
      goto LABEL_17;
    }
LABEL_16:
    v11._countAndFlagsBits = 0xD00000000000001ELL;
    v11._object = (void *)0x80000001003DB5E0;
    String.append(_:)(v11);
    if ((a1 & 0x10) == 0)
    {
LABEL_7:
      if ((a1 & 0x20) == 0) {
        goto LABEL_8;
      }
      goto LABEL_18;
    }
LABEL_17:
    v12._countAndFlagsBits = 0xD000000000000018;
    v12._object = (void *)0x80000001003DB5C0;
    String.append(_:)(v12);
    if ((a1 & 0x20) == 0)
    {
LABEL_8:
      if ((a1 & 0x40) == 0)
      {
LABEL_10:
        sub_1000D49D0(2);
        swift_bridgeObjectRelease();
        uint64_t v4 = static String._fromSubstring(_:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v5._countAndFlagsBits = 41;
        v5._object = (void *)0xE100000000000000;
        String.append(_:)(v5);
        swift_bridgeObjectRelease();
        return v4;
      }
LABEL_9:
      v3._countAndFlagsBits = 0xD000000000000021;
      v3._object = (void *)0x80000001003DB560;
      String.append(_:)(v3);
      goto LABEL_10;
    }
LABEL_18:
    v13._countAndFlagsBits = 0xD000000000000022;
    v13._object = (void *)0x80000001003DB590;
    String.append(_:)(v13);
    if ((a1 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  v7._countAndFlagsBits = 0x61736944206C6C41;
  v7._object = (void *)0xED00002964656C62;
  String.append(_:)(v7);
  return v14;
}

uint64_t sub_1000CC248()
{
  return PreferenceDefaults.EnableUserspaceP2POptions.description.getter(*v0);
}

_UNKNOWN **static PreferenceDefaults.InternetSharingOptions.allCases.getter()
{
  return &off_100450130;
}

uint64_t PreferenceDefaults.InternetSharingOptions.rawValue.getter(char a1)
{
  if (!a1) {
    return 6710895;
  }
  if (a1 == 1) {
    return 0x6775626564;
  }
  return 0x61427963696C6F70;
}

uint64_t sub_1000CC2B4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100041C44(*a1, *a2);
}

Swift::Int sub_1000CC2C0()
{
  return Hasher._finalize()();
}

uint64_t sub_1000CC360()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000CC3EC()
{
  return Hasher._finalize()();
}

unint64_t sub_1000CC488@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = _s7CoreP2P18PreferenceDefaultsV22InternetSharingOptionsO8rawValueAESgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_1000CC4B8(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE300000000000000;
  unint64_t v4 = 0xE500000000000000;
  uint64_t v5 = 0x6775626564;
  if (v2 != 1)
  {
    uint64_t v5 = 0x61427963696C6F70;
    unint64_t v4 = 0xEB00000000646573;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 6710895;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

void sub_1000CC514(void *a1@<X8>)
{
  *a1 = &off_100450158;
}

void *PreferenceDefaults.enableUserspaceP2POptions.unsafeMutableAddressor()
{
  return &static PreferenceDefaults.enableUserspaceP2POptions;
}

uint64_t sub_1000CC530()
{
  uint64_t result = os_variant_allows_internal_security_policies();
  static PreferenceDefaults.isAppleInternal = result;
  return result;
}

char *PreferenceDefaults.isAppleInternal.unsafeMutableAddressor()
{
  if (qword_10047BF88 != -1) {
    swift_once();
  }
  return &static PreferenceDefaults.isAppleInternal;
}

uint64_t static PreferenceDefaults.isAppleInternal.getter()
{
  return sub_1000CC6F8(&qword_10047BF88, (unsigned __int8 *)&static PreferenceDefaults.isAppleInternal);
}

id static PreferenceDefaults.deviceName.getter()
{
  id result = (id)MobileGestalt_get_current_device();
  if (result)
  {
    uint64_t v1 = result;
    id v2 = (id)MobileGestalt_copy_userAssignedDeviceName_obj();

    if (!v2) {
      return 0;
    }
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    return (id)v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000CC640()
{
  id v0 = (id)MobileGestalt_get_current_device();
  if (v0)
  {
    uint64_t v1 = v0;
    char iPadCapability = MobileGestalt_get_iPadCapability();

    static PreferenceDefaults.isiPad = iPadCapability;
  }
  else
  {
    __break(1u);
  }
}

char *PreferenceDefaults.isiPad.unsafeMutableAddressor()
{
  if (qword_10047BF90 != -1) {
    swift_once();
  }
  return &static PreferenceDefaults.isiPad;
}

uint64_t static PreferenceDefaults.isiPad.getter()
{
  return sub_1000CC6F8(&qword_10047BF90, (unsigned __int8 *)&static PreferenceDefaults.isiPad);
}

uint64_t sub_1000CC6F8(void *a1, unsigned __int8 *a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  return *a2;
}

unint64_t PreferencesName.rawValue.getter(char a1)
{
  unint64_t result = 0xD00000000000001ALL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000015;
      break;
    case 2:
    case 5:
    case 17:
      unint64_t result = 0xD000000000000016;
      break;
    case 3:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 4:
      unint64_t result = 0xD000000000000019;
      break;
    case 6:
      unint64_t result = 0xD000000000000012;
      break;
    case 7:
      unint64_t result = 1818523489;
      break;
    case 8:
      unint64_t result = 0x4143414D6C647761;
      break;
    case 9:
      unint64_t result = 7233902;
      break;
    case 10:
      unint64_t result = 0x644143414D6E616ELL;
      break;
    case 11:
      unint64_t result = 0xD000000000000011;
      break;
    case 12:
      unint64_t result = 0xD000000000000019;
      break;
    case 13:
      unint64_t result = 0x5374694B65676465;
      break;
    case 14:
      unint64_t result = 0xD000000000000017;
      break;
    case 15:
      unint64_t result = 0xD000000000000017;
      break;
    case 16:
      unint64_t result = 0xD000000000000021;
      break;
    case 18:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 19:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 20:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 21:
      unint64_t result = 0xD00000000000002BLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000CC96C(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = PreferencesName.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == PreferencesName.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_1000CC9F8()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  PreferencesName.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1000CCA5C()
{
  PreferencesName.rawValue.getter(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000CCAB0()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  PreferencesName.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1000CCB10@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = _s7CoreP2P15PreferencesNameO8rawValueACSgSS_tcfC_0();
  *a1 = result;
  return result;
}

unint64_t sub_1000CCB40@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = PreferencesName.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000CCB6C@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a7, a1, a5);
  Swift::String v12 = (int *)type metadata accessor for Preferences.Preference();
  *(unsigned char *)(a7 + v12[11]) = a2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(a7 + v12[12], a3, a6);
  *(unsigned char *)(a7 + v12[13]) = a4;
  return result;
}

uint64_t Preferences.Preference.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = a1 - 8;
  uint64_t v6 = *(void *)(a1 - 8);
  __chkstk_darwin(a1);
  char v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v5 + 32);
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  Swift::String v13 = (char *)&v18 - v12;
  if (*(unsigned char *)(v2 + *(int *)(v5 + 60)) == 1)
  {
    (*(void (**)(void, uint64_t, void))(*(void *)(a1 + 32) + 8))(*(unsigned __int8 *)(v2 + *(int *)(a1 + 44)), v9, *(void *)(a1 + 16));
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v2, a1);
    uint64_t v14 = *(void *)(v9 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, v9) == 1)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v14 + 16))(a2, &v8[*(int *)(a1 + 48)], v9);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a1);
      return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a1);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(a2, v13, v9);
    }
  }
  else
  {
    uint64_t v16 = v2 + *(int *)(a1 + 48);
    char v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    return v17(a2, v16, v9);
  }
}

uint64_t Preferences.Preference.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  return sub_1000CD64C(a1, a2, (void (*)(void))sub_1000D4C74);
}

void (*Preferences.Preference.wrappedValue.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  *uint64_t v5 = a2;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a2 + 24);
  v5[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  _OWORD v5[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  void v5[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v5[5] = v9;
  Preferences.Preference.wrappedValue.getter(a2, (uint64_t)v9);
  return sub_1000CD008;
}

void sub_1000CD008(uint64_t **a1, char a2)
{
}

Swift::Void __swiftcall Preferences.Preference.reset()()
{
  (*(void (**)(void, void))(*(void *)(v0 + 32) + 32))(*(unsigned __int8 *)(v1 + *(int *)(v0 + 44)), *(void *)(v0 + 16));
}

uint64_t Preferences.Preference.description.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin();
  uint64_t v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = 0;
  unint64_t v12 = 0xE000000000000000;
  v10[15] = *(unsigned char *)(v1 + *(int *)(v5 + 44));
  _print_unlocked<A, B>(_:_:)();
  v8._countAndFlagsBits = 2112800;
  v8._object = (void *)0xE300000000000000;
  String.append(_:)(v8);
  Preferences.Preference.wrappedValue.getter(a1, (uint64_t)v7);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v7, v3);
  return v11;
}

uint64_t sub_1000CD180@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v25 = a2;
  int v26 = a4;
  uint64_t v24 = a9;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  __chkstk_darwin();
  char v17 = (char *)&v24 - v16;
  uint64_t v18 = *(void *)(a5 - 8);
  __chkstk_darwin();
  unint64_t v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, a1, a5);
  dispatch thunk of RawRepresentable.rawValue.getter();
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a1, a5);
  uint64_t v27 = a5;
  uint64_t v28 = a6;
  uint64_t v29 = a7;
  uint64_t v30 = a8;
  uint64_t v21 = type metadata accessor for Preferences.EnumPreference();
  uint64_t v22 = v24;
  sub_1000CCB6C((uint64_t)v20, v25, (uint64_t)v17, v26, a5, AssociatedTypeWitness, v24 + *(int *)(v21 + 52));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(v22, a3, a6);
}

uint64_t Preferences.EnumPreference.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = __chkstk_darwin();
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v5 + 24);
  swift_getAssociatedTypeWitness();
  __chkstk_darwin();
  uint64_t v10 = (char *)&v17 - v9;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v18 = *(void *)(v11 - 8);
  uint64_t v19 = v11;
  __chkstk_darwin();
  Swift::String v13 = (char *)&v17 - v12;
  uint64_t v14 = type metadata accessor for Preferences.Preference();
  Preferences.Preference.wrappedValue.getter(v14, (uint64_t)v10);
  dispatch thunk of RawRepresentable.init(rawValue:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v2, a1);
  uint64_t v15 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v8) == 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 16))(v20, v7, v8);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, a1);
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v13, v19);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, a1);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(v20, v13, v8);
  }
}

uint64_t Preferences.EnumPreference.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  return sub_1000CD64C(a1, a2, (void (*)(void))sub_1000D4DB0);
}

uint64_t sub_1000CD64C(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a2 + 24) - 8) + 8);

  return v5(a1);
}

void (*Preferences.EnumPreference.wrappedValue.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  *uint64_t v5 = a2;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a2 + 24);
  v5[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  _OWORD v5[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  void v5[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v5[5] = v9;
  Preferences.EnumPreference.wrappedValue.getter(a2, (uint64_t)v9);
  return sub_1000CD790;
}

void sub_1000CD790(uint64_t **a1, char a2)
{
}

void sub_1000CD7A8(uint64_t **a1, char a2, void (*a3)(void *, uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v5 = (void *)(*a1)[4];
  uint64_t v6 = (void *)(*a1)[5];
  uint64_t v7 = (*a1)[2];
  uint64_t v8 = (*a1)[3];
  uint64_t v9 = **a1;
  if (a2)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v8 + 16))((*a1)[4], v6, v7);
    a3(v5, v9);
    uint64_t v10 = *(void (**)(void *, uint64_t))(v8 + 8);
    v10(v5, v7);
    v10(v6, v7);
  }
  else
  {
    a3((void *)(*a1)[5], v9);
    (*(void (**)(void *, uint64_t))(v8 + 8))(v6, v7);
  }
  free(v6);
  free(v5);

  free(v4);
}

Swift::Void __swiftcall Preferences.EnumPreference.reset()()
{
  uint64_t v2 = v1 + *(int *)(v0 + 52);
  swift_getAssociatedTypeWitness();
  uint64_t v3 = type metadata accessor for Preferences.Preference();
  (*(void (**)(void, void))(*(void *)(v3 + 32) + 32))(*(unsigned __int8 *)(v2 + *(int *)(v3 + 44)), *(void *)(v3 + 16));
}

uint64_t Preferences.EnumPreference.description.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin();
  uint64_t v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = 0;
  unint64_t v13 = 0xE000000000000000;
  uint64_t v8 = v1 + *(int *)(v5 + 52);
  swift_getAssociatedTypeWitness();
  v11[15] = *(unsigned char *)(v8 + *(int *)(type metadata accessor for Preferences.Preference() + 44));
  _print_unlocked<A, B>(_:_:)();
  v9._countAndFlagsBits = 2112800;
  v9._object = (void *)0xE300000000000000;
  String.append(_:)(v9);
  Preferences.EnumPreference.wrappedValue.getter(a1, (uint64_t)v7);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v7, v3);
  return v12;
}

uint64_t _s7CoreP2P22ObservableWiFiPropertyV14projectedValueACyxGvg_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t sub_1000CDADC@<X0>(char a1@<W1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  __chkstk_darwin();
  Swift::String v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v10 + 32))(v9);
  long long v12 = xmmword_1003B2440;
  return sub_1000CCB6C((uint64_t)v9, a1, (uint64_t)&v12, a2, a3, (uint64_t)&type metadata for Data, a4);
}

uint64_t Preferences.WiFiAddressPreference.wrappedValue.getter()
{
  uint64_t v0 = type metadata accessor for Preferences.Preference();
  Preferences.Preference.wrappedValue.getter(v0, (uint64_t)v3);
  unint64_t v1 = sub_10000C6C4(v3[0], v3[1]);
  return v1 & 0xFFFFFFFFFFFFLL | ((HIWORD(v1) & 1) << 48);
}

uint64_t Preferences.WiFiAddressPreference.wrappedValue.setter(unint64_t a1)
{
  if ((a1 & 0x1000000000000) != 0)
  {
    uint64_t v14 = type metadata accessor for Preferences.Preference();
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v14 + 32) + 32);
    uint64_t v16 = *(void *)(v14 + 16);
    uint64_t v17 = *(unsigned __int8 *)(v1 + *(int *)(v14 + 44));
    return v15(v17, v16);
  }
  else
  {
    char v2 = a1;
    unint64_t v3 = a1 >> 8;
    unint64_t v4 = a1 >> 16;
    unint64_t v5 = a1 >> 24;
    unint64_t v6 = HIDWORD(a1);
    unint64_t v7 = a1 >> 40;
    sub_100010BCC(&qword_10047BEF8);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1003B2F40;
    *(unsigned char *)(v8 + 32) = v2;
    *(unsigned char *)(v8 + 33) = v3;
    *(unsigned char *)(v8 + 34) = v4;
    *(unsigned char *)(v8 + 35) = v5;
    *(unsigned char *)(v8 + 36) = v6;
    *(unsigned char *)(v8 + 37) = v7;
    uint64_t v9 = sub_1001265EC(v8);
    unint64_t v11 = v10;
    swift_bridgeObjectRelease();
    v18[0] = v9;
    v18[1] = v11;
    uint64_t v12 = type metadata accessor for Preferences.Preference();
    sub_1000D4C74((uint64_t)v18, v12);
    return sub_10000C970(v9, v11);
  }
}

uint64_t (*Preferences.WiFiAddressPreference.wrappedValue.modify(uint64_t a1, uint64_t a2))(uint64_t a1)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v2;
  uint64_t v4 = Preferences.WiFiAddressPreference.wrappedValue.getter();
  *(_WORD *)(a1 + 20) = WORD2(v4);
  *(_DWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 22) = BYTE6(v4) & 1;
  return sub_1000CDDD4;
}

uint64_t sub_1000CDDD4(uint64_t a1)
{
  return Preferences.WiFiAddressPreference.wrappedValue.setter((*(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int16 *)(a1 + 20) << 32)) & 0xFFFFFFFFFFFFLL | ((unint64_t)*(unsigned __int8 *)(a1 + 22) << 48));
}

Swift::Void __swiftcall Preferences.WiFiAddressPreference.reset()()
{
  uint64_t v1 = type metadata accessor for Preferences.Preference();
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*(void *)(v1 + 32) + 32);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(unsigned __int8 *)(v0 + *(int *)(v1 + 44));

  v2(v4, v3);
}

uint64_t Preferences.WiFiAddressPreference.description.getter()
{
  uint64_t v0 = Preferences.WiFiAddressPreference.wrappedValue.getter();
  if ((v0 & 0x1000000000000) != 0)
  {
    type metadata accessor for Preferences.Preference();
    _print_unlocked<A, B>(_:_:)();
    v4._countAndFlagsBits = 0x6F646E6172203D20;
    v4._object = (void *)0xE90000000000006DLL;
    String.append(_:)(v4);
  }
  else
  {
    uint64_t v1 = v0;
    type metadata accessor for Preferences.Preference();
    _print_unlocked<A, B>(_:_:)();
    v2._countAndFlagsBits = 2112800;
    v2._object = (void *)0xE300000000000000;
    String.append(_:)(v2);
    v3._countAndFlagsBits = WiFiAddress.description.getter(v1 & 0xFFFFFFFFFFFFLL);
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t Preferences.automaticallyUseEncryption.getter()
{
  uint64_t v0 = type metadata accessor for Preferences.Preference();
  Preferences.Preference.wrappedValue.getter(v0, (uint64_t)&v2);
  return v2;
}

uint64_t Preferences.automaticallyUseEncryption.setter(char a1)
{
  char v3 = a1;
  uint64_t v1 = type metadata accessor for Preferences.Preference();
  return sub_1000D4C74((uint64_t)&v3, v1);
}

uint64_t (*Preferences.automaticallyUseEncryption.modify(uint64_t *a1))()
{
  uint64_t v2 = (uint64_t)(a1 + 3);
  uint64_t v3 = type metadata accessor for Preferences.Preference();
  *a1 = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v4;
  a1[1] = v4;
  a1[2] = (uint64_t)malloc(*(void *)(v4 + 64));
  (*(void (**)(void))(v5 + 16))();
  Preferences.Preference.wrappedValue.getter(v3, v2);
  return sub_1000CE10C;
}

uint64_t Preferences.$automaticallyUseEncryption.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Preferences.Preference();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t Preferences.disableAuthentication.getter()
{
  uint64_t v0 = type metadata accessor for Preferences.Preference();
  Preferences.Preference.wrappedValue.getter(v0, (uint64_t)&v2);
  return v2;
}

uint64_t Preferences.disableAuthentication.setter(char a1)
{
  char v3 = a1;
  uint64_t v1 = type metadata accessor for Preferences.Preference();
  return sub_1000D4C74((uint64_t)&v3, v1);
}

uint64_t (*Preferences.disableAuthentication.modify(uint64_t *a1))()
{
  uint64_t v2 = (uint64_t)(a1 + 3);
  uint64_t v3 = type metadata accessor for Preferences.Preference();
  *a1 = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v4;
  a1[1] = v4;
  a1[2] = (uint64_t)malloc(*(void *)(v4 + 64));
  (*(void (**)(void))(v5 + 16))();
  Preferences.Preference.wrappedValue.getter(v3, v2);
  return sub_1000CE10C;
}

uint64_t Preferences.$disableAuthentication.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 36);
  uint64_t v5 = type metadata accessor for Preferences.Preference();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t Preferences.subscribeFilterEnabled.getter()
{
  uint64_t v0 = type metadata accessor for Preferences.Preference();
  Preferences.Preference.wrappedValue.getter(v0, (uint64_t)&v2);
  return v2;
}

uint64_t Preferences.subscribeFilterEnabled.setter(char a1)
{
  char v3 = a1;
  uint64_t v1 = type metadata accessor for Preferences.Preference();
  return sub_1000D4C74((uint64_t)&v3, v1);
}

uint64_t (*Preferences.subscribeFilterEnabled.modify(uint64_t *a1))()
{
  uint64_t v2 = (uint64_t)(a1 + 3);
  uint64_t v3 = type metadata accessor for Preferences.Preference();
  *a1 = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v4;
  a1[1] = v4;
  a1[2] = (uint64_t)malloc(*(void *)(v4 + 64));
  (*(void (**)(void))(v5 + 16))();
  Preferences.Preference.wrappedValue.getter(v3, v2);
  return sub_1000CE10C;
}

uint64_t Preferences.$subscribeFilterEnabled.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 40);
  uint64_t v5 = type metadata accessor for Preferences.Preference();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t Preferences.unsolicitedPublishOnUpdate.getter()
{
  uint64_t v0 = type metadata accessor for Preferences.Preference();
  Preferences.Preference.wrappedValue.getter(v0, (uint64_t)&v2);
  return v2;
}

uint64_t Preferences.unsolicitedPublishOnUpdate.setter(char a1)
{
  char v3 = a1;
  uint64_t v1 = type metadata accessor for Preferences.Preference();
  return sub_1000D4C74((uint64_t)&v3, v1);
}

uint64_t (*Preferences.unsolicitedPublishOnUpdate.modify(uint64_t *a1))()
{
  uint64_t v2 = (uint64_t)(a1 + 3);
  uint64_t v3 = type metadata accessor for Preferences.Preference();
  *a1 = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v4;
  a1[1] = v4;
  a1[2] = (uint64_t)malloc(*(void *)(v4 + 64));
  (*(void (**)(void))(v5 + 16))();
  Preferences.Preference.wrappedValue.getter(v3, v2);
  return sub_1000CE10C;
}

uint64_t Preferences.$unsolicitedPublishOnUpdate.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 44);
  uint64_t v5 = type metadata accessor for Preferences.Preference();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t Preferences.unsolicitedPublishSeconds.getter()
{
  uint64_t v0 = type metadata accessor for Preferences.Preference();
  Preferences.Preference.wrappedValue.getter(v0, (uint64_t)&v2);
  return v2;
}

uint64_t Preferences.unsolicitedPublishSeconds.setter(int a1)
{
  int v3 = a1;
  uint64_t v1 = type metadata accessor for Preferences.Preference();
  return sub_1000D4C74((uint64_t)&v3, v1);
}

uint64_t (*Preferences.unsolicitedPublishSeconds.modify(void *a1))()
{
  unsigned int v2 = malloc(0x28uLL);
  *a1 = v2;
  uint64_t v3 = type metadata accessor for Preferences.Preference();
  *unsigned int v2 = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v4;
  v2[1] = v4;
  v2[2] = malloc(*(void *)(v4 + 64));
  (*(void (**)(void))(v5 + 16))();
  Preferences.Preference.wrappedValue.getter(v3, (uint64_t)(v2 + 3));
  return sub_1000CE974;
}

uint64_t Preferences.$unsolicitedPublishSeconds.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 48);
  uint64_t v5 = type metadata accessor for Preferences.Preference();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t Preferences.internetSharingOptions.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  v4[0] = *(void *)(a1 + 16);
  v4[1] = &type metadata for PreferenceDefaults.InternetSharingOptions;
  v4[2] = v1;
  v4[3] = sub_1000D4EE4();
  uint64_t v2 = type metadata accessor for Preferences.EnumPreference();
  Preferences.EnumPreference.wrappedValue.getter(v2, (uint64_t)v4);
  return LOBYTE(v4[0]);
}

uint64_t Preferences.internetSharingOptions.setter()
{
  return sub_1000D4DB0();
}

void (*Preferences.internetSharingOptions.modify(void *a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t v4 = malloc(0x40uLL);
  *a1 = v4;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v7 = sub_1000D4EE4();
  *uint64_t v4 = v5;
  v4[1] = &type metadata for PreferenceDefaults.InternetSharingOptions;
  v4[2] = v6;
  v4[3] = v7;
  uint64_t v8 = type metadata accessor for Preferences.EnumPreference();
  void v4[4] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v9;
  v4[5] = v9;
  v4[6] = malloc(*(void *)(v9 + 64));
  (*(void (**)(void))(v10 + 16))();
  Preferences.EnumPreference.wrappedValue.getter(v8, (uint64_t)(v4 + 7));
  return sub_1000CEBD8;
}

void sub_1000CEBD8(uint64_t a1, char a2)
{
  uint64_t v2 = *(unsigned char **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 40);
  uint64_t v3 = *(void **)(*(void *)a1 + 48);
  uint64_t v5 = *(void *)(*(void *)a1 + 32);
  uint64_t v6 = 57;
  if ((a2 & 1) == 0) {
    uint64_t v6 = 58;
  }
  v2[v6] = *(unsigned char *)(*(void *)a1 + 56);
  sub_1000D4DB0();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v5);
  free(v3);

  free(v2);
}

uint64_t Preferences.$internetSharingOptions.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 52);
  sub_1000D4EE4();
  uint64_t v5 = type metadata accessor for Preferences.EnumPreference();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t Preferences.createNetworkAgent.getter()
{
  uint64_t v0 = type metadata accessor for Preferences.Preference();
  Preferences.Preference.wrappedValue.getter(v0, (uint64_t)&v2);
  return v2;
}

uint64_t Preferences.createNetworkAgent.setter(char a1)
{
  char v3 = a1;
  uint64_t v1 = type metadata accessor for Preferences.Preference();
  return sub_1000D4C74((uint64_t)&v3, v1);
}

uint64_t (*Preferences.createNetworkAgent.modify(uint64_t *a1))()
{
  uint64_t v2 = (uint64_t)(a1 + 3);
  uint64_t v3 = type metadata accessor for Preferences.Preference();
  *a1 = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v4;
  a1[1] = v4;
  a1[2] = (uint64_t)malloc(*(void *)(v4 + 64));
  (*(void (**)(void))(v5 + 16))();
  Preferences.Preference.wrappedValue.getter(v3, v2);
  return sub_1000CE10C;
}

uint64_t Preferences.$createNetworkAgent.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 56);
  uint64_t v5 = type metadata accessor for Preferences.Preference();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t Preferences.edgeKitSupport.getter()
{
  uint64_t v0 = type metadata accessor for Preferences.Preference();
  Preferences.Preference.wrappedValue.getter(v0, (uint64_t)&v2);
  return v2;
}

uint64_t Preferences.edgeKitSupport.setter(char a1)
{
  char v3 = a1;
  uint64_t v1 = type metadata accessor for Preferences.Preference();
  return sub_1000D4C74((uint64_t)&v3, v1);
}

uint64_t (*Preferences.edgeKitSupport.modify(uint64_t *a1))()
{
  uint64_t v2 = (uint64_t)(a1 + 3);
  uint64_t v3 = type metadata accessor for Preferences.Preference();
  *a1 = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v4;
  a1[1] = v4;
  a1[2] = (uint64_t)malloc(*(void *)(v4 + 64));
  (*(void (**)(void))(v5 + 16))();
  Preferences.Preference.wrappedValue.getter(v3, v2);
  return sub_1000CE10C;
}

uint64_t Preferences.$edgeKitSupport.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 60);
  uint64_t v5 = type metadata accessor for Preferences.Preference();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t Preferences.linkTestIntervalMinutes.getter()
{
  uint64_t v0 = type metadata accessor for Preferences.Preference();
  Preferences.Preference.wrappedValue.getter(v0, (uint64_t)&v2);
  return v2;
}

uint64_t Preferences.linkTestIntervalMinutes.setter(int a1)
{
  int v3 = a1;
  uint64_t v1 = type metadata accessor for Preferences.Preference();
  return sub_1000D4C74((uint64_t)&v3, v1);
}

uint64_t (*Preferences.linkTestIntervalMinutes.modify(void *a1))()
{
  unsigned int v2 = malloc(0x28uLL);
  *a1 = v2;
  uint64_t v3 = type metadata accessor for Preferences.Preference();
  *unsigned int v2 = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v4;
  v2[1] = v4;
  v2[2] = malloc(*(void *)(v4 + 64));
  (*(void (**)(void))(v5 + 16))();
  Preferences.Preference.wrappedValue.getter(v3, (uint64_t)(v2 + 3));
  return sub_1000CE974;
}

void sub_1000CF2CC(uint64_t **a1, char a2)
{
  unsigned int v2 = *a1;
  int v3 = *((_DWORD *)*a1 + 6);
  uint64_t v5 = (*a1)[1];
  uint64_t v4 = (void *)(*a1)[2];
  uint64_t v6 = **a1;
  uint64_t v7 = 32;
  if (a2)
  {
    uint64_t v7 = 28;
    uint64_t v8 = (uint64_t)*a1 + 28;
  }
  else
  {
    uint64_t v8 = (uint64_t)(*a1 + 4);
  }
  *(_DWORD *)((char *)v2 + v7) = v3;
  sub_1000D4C74(v8, v6);
  (*(void (**)(void *, uint64_t))(v5 + 8))(v4, v6);
  free(v4);

  free(v2);
}

uint64_t Preferences.$linkTestIntervalMinutes.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 64);
  uint64_t v5 = type metadata accessor for Preferences.Preference();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t Preferences.disableAWDLLinkWhenInactive.getter()
{
  uint64_t v0 = type metadata accessor for Preferences.Preference();
  Preferences.Preference.wrappedValue.getter(v0, (uint64_t)&v2);
  return v2;
}

uint64_t Preferences.disableAWDLLinkWhenInactive.setter(char a1)
{
  char v3 = a1;
  uint64_t v1 = type metadata accessor for Preferences.Preference();
  return sub_1000D4C74((uint64_t)&v3, v1);
}

uint64_t (*Preferences.disableAWDLLinkWhenInactive.modify(uint64_t *a1))()
{
  uint64_t v2 = (uint64_t)(a1 + 3);
  uint64_t v3 = type metadata accessor for Preferences.Preference();
  *a1 = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v4;
  a1[1] = v4;
  a1[2] = (uint64_t)malloc(*(void *)(v4 + 64));
  (*(void (**)(void))(v5 + 16))();
  Preferences.Preference.wrappedValue.getter(v3, v2);
  return sub_1000CE10C;
}

uint64_t Preferences.$disableAWDLLinkWhenInactive.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 68);
  uint64_t v5 = type metadata accessor for Preferences.Preference();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t Preferences.disableMulticastRateAdapter.getter()
{
  uint64_t v0 = type metadata accessor for Preferences.Preference();
  Preferences.Preference.wrappedValue.getter(v0, (uint64_t)&v2);
  return v2;
}

uint64_t Preferences.disableMulticastRateAdapter.setter(char a1)
{
  char v3 = a1;
  uint64_t v1 = type metadata accessor for Preferences.Preference();
  return sub_1000D4C74((uint64_t)&v3, v1);
}

uint64_t (*Preferences.disableMulticastRateAdapter.modify(uint64_t *a1))()
{
  uint64_t v2 = (uint64_t)(a1 + 3);
  uint64_t v3 = type metadata accessor for Preferences.Preference();
  *a1 = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v4;
  a1[1] = v4;
  a1[2] = (uint64_t)malloc(*(void *)(v4 + 64));
  (*(void (**)(void))(v5 + 16))();
  Preferences.Preference.wrappedValue.getter(v3, v2);
  return sub_1000CE10C;
}

uint64_t Preferences.$disableMulticastRateAdapter.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 72);
  uint64_t v5 = type metadata accessor for Preferences.Preference();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

double Preferences.multicastRateAdapterSettlingPER.getter()
{
  uint64_t v0 = type metadata accessor for Preferences.Preference();
  Preferences.Preference.wrappedValue.getter(v0, (uint64_t)&v2);
  return v2;
}

uint64_t Preferences.multicastRateAdapterSettlingPER.setter(double a1)
{
  double v3 = a1;
  uint64_t v1 = type metadata accessor for Preferences.Preference();
  return sub_1000D4C74((uint64_t)&v3, v1);
}

uint64_t (*Preferences.multicastRateAdapterSettlingPER.modify(void *a1))()
{
  double v2 = malloc(0x30uLL);
  *a1 = v2;
  uint64_t v3 = type metadata accessor for Preferences.Preference();
  v2[3] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v4;
  v2[4] = v4;
  v2[5] = malloc(*(void *)(v4 + 64));
  (*(void (**)(void))(v5 + 16))();
  Preferences.Preference.wrappedValue.getter(v3, (uint64_t)v2);
  return sub_1000CF9A8;
}

uint64_t Preferences.$multicastRateAdapterSettlingPER.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 76);
  uint64_t v5 = type metadata accessor for Preferences.Preference();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

double Preferences.multicastRateAdapterInitialFeedbackInterval.getter()
{
  uint64_t v0 = type metadata accessor for Preferences.Preference();
  Preferences.Preference.wrappedValue.getter(v0, (uint64_t)&v2);
  return v2;
}

uint64_t Preferences.multicastRateAdapterInitialFeedbackInterval.setter(double a1)
{
  double v3 = a1;
  uint64_t v1 = type metadata accessor for Preferences.Preference();
  return sub_1000D4C74((uint64_t)&v3, v1);
}

uint64_t (*Preferences.multicastRateAdapterInitialFeedbackInterval.modify(void *a1))()
{
  double v2 = malloc(0x30uLL);
  *a1 = v2;
  uint64_t v3 = type metadata accessor for Preferences.Preference();
  v2[3] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v4;
  v2[4] = v4;
  v2[5] = malloc(*(void *)(v4 + 64));
  (*(void (**)(void))(v5 + 16))();
  Preferences.Preference.wrappedValue.getter(v3, (uint64_t)v2);
  return sub_1000CF9A8;
}

void sub_1000CFBC8(uint64_t **a1, char a2)
{
  double v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v5 = (*a1)[4];
  uint64_t v4 = (void *)(*a1)[5];
  uint64_t v6 = (*a1)[3];
  uint64_t v7 = 2;
  if (a2)
  {
    uint64_t v7 = 1;
    uint64_t v8 = (uint64_t)(*a1 + 1);
  }
  else
  {
    uint64_t v8 = (uint64_t)(*a1 + 2);
  }
  v2[v7] = v3;
  sub_1000D4C74(v8, v6);
  (*(void (**)(void *, uint64_t))(v5 + 8))(v4, v6);
  free(v4);

  free(v2);
}

uint64_t Preferences.$multicastRateAdapterInitialFeedbackInterval.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 80);
  uint64_t v5 = type metadata accessor for Preferences.Preference();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t Preferences.awdl.getter()
{
  uint64_t v0 = type metadata accessor for Preferences.Preference();
  Preferences.Preference.wrappedValue.getter(v0, (uint64_t)&v2);
  return v2;
}

uint64_t Preferences.awdl.setter(char a1)
{
  char v3 = a1;
  uint64_t v1 = type metadata accessor for Preferences.Preference();
  return sub_1000D4C74((uint64_t)&v3, v1);
}

uint64_t (*Preferences.awdl.modify(uint64_t *a1))()
{
  uint64_t v2 = (uint64_t)(a1 + 3);
  uint64_t v3 = type metadata accessor for Preferences.Preference();
  *a1 = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v4;
  a1[1] = v4;
  a1[2] = (uint64_t)malloc(*(void *)(v4 + 64));
  (*(void (**)(void))(v5 + 16))();
  Preferences.Preference.wrappedValue.getter(v3, v2);
  return sub_1000CE10C;
}

uint64_t Preferences.$awdl.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 84);
  uint64_t v5 = type metadata accessor for Preferences.Preference();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t Preferences.awdlMACAddress.getter()
{
  type metadata accessor for Preferences.WiFiAddressPreference();
  unint64_t v0 = Preferences.WiFiAddressPreference.wrappedValue.getter();
  return v0 & 0xFFFFFFFFFFFFLL | ((HIWORD(v0) & 1) << 48);
}

uint64_t Preferences.awdlMACAddress.setter(unint64_t a1)
{
  return Preferences.WiFiAddressPreference.wrappedValue.setter(a1 & 0xFFFFFFFFFFFFLL | ((HIWORD(a1) & 1) << 48));
}

uint64_t (*Preferences.awdlMACAddress.modify(uint64_t a1))()
{
  uint64_t v2 = type metadata accessor for Preferences.WiFiAddressPreference();
  *(void *)a1 = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = v3;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = malloc(*(void *)(v3 + 64));
  (*(void (**)(void))(v4 + 16))();
  uint64_t v5 = Preferences.WiFiAddressPreference.wrappedValue.getter();
  *(_WORD *)(a1 + 28) = WORD2(v5);
  *(_DWORD *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 30) = BYTE6(v5) & 1;
  return sub_1000D0080;
}

uint64_t Preferences.$awdlMACAddress.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 88);
  uint64_t v5 = type metadata accessor for Preferences.WiFiAddressPreference();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t Preferences.nan.getter()
{
  uint64_t v0 = type metadata accessor for Preferences.Preference();
  Preferences.Preference.wrappedValue.getter(v0, (uint64_t)&v2);
  return v2;
}

uint64_t Preferences.nan.setter(char a1)
{
  char v3 = a1;
  uint64_t v1 = type metadata accessor for Preferences.Preference();
  return sub_1000D4C74((uint64_t)&v3, v1);
}

uint64_t (*Preferences.nan.modify(uint64_t *a1))()
{
  uint64_t v2 = (uint64_t)(a1 + 3);
  uint64_t v3 = type metadata accessor for Preferences.Preference();
  *a1 = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v4;
  a1[1] = v4;
  a1[2] = (uint64_t)malloc(*(void *)(v4 + 64));
  (*(void (**)(void))(v5 + 16))();
  Preferences.Preference.wrappedValue.getter(v3, v2);
  return sub_1000CE10C;
}

uint64_t Preferences.$nan.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 92);
  uint64_t v5 = type metadata accessor for Preferences.Preference();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t Preferences.nanMACAddress.getter()
{
  type metadata accessor for Preferences.WiFiAddressPreference();
  unint64_t v0 = Preferences.WiFiAddressPreference.wrappedValue.getter();
  return v0 & 0xFFFFFFFFFFFFLL | ((HIWORD(v0) & 1) << 48);
}

uint64_t Preferences.nanMACAddress.setter(unint64_t a1)
{
  return Preferences.WiFiAddressPreference.wrappedValue.setter(a1 & 0xFFFFFFFFFFFFLL | ((HIWORD(a1) & 1) << 48));
}

uint64_t (*Preferences.nanMACAddress.modify(uint64_t a1))()
{
  uint64_t v2 = type metadata accessor for Preferences.WiFiAddressPreference();
  *(void *)a1 = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = v3;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = malloc(*(void *)(v3 + 64));
  (*(void (**)(void))(v4 + 16))();
  uint64_t v5 = Preferences.WiFiAddressPreference.wrappedValue.getter();
  *(_WORD *)(a1 + 28) = WORD2(v5);
  *(_DWORD *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 30) = BYTE6(v5) & 1;
  return sub_1000D0080;
}

uint64_t Preferences.$nanMACAddress.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 96);
  uint64_t v5 = type metadata accessor for Preferences.WiFiAddressPreference();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t Preferences.nanDataMACAddress.getter()
{
  type metadata accessor for Preferences.WiFiAddressPreference();
  unint64_t v0 = Preferences.WiFiAddressPreference.wrappedValue.getter();
  return v0 & 0xFFFFFFFFFFFFLL | ((HIWORD(v0) & 1) << 48);
}

uint64_t Preferences.nanDataMACAddress.setter(unint64_t a1)
{
  return Preferences.WiFiAddressPreference.wrappedValue.setter(a1 & 0xFFFFFFFFFFFFLL | ((HIWORD(a1) & 1) << 48));
}

uint64_t (*Preferences.nanDataMACAddress.modify(uint64_t a1))()
{
  uint64_t v2 = type metadata accessor for Preferences.WiFiAddressPreference();
  *(void *)a1 = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = v3;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = malloc(*(void *)(v3 + 64));
  (*(void (**)(void))(v4 + 16))();
  uint64_t v5 = Preferences.WiFiAddressPreference.wrappedValue.getter();
  *(_WORD *)(a1 + 28) = WORD2(v5);
  *(_DWORD *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 30) = BYTE6(v5) & 1;
  return sub_1000D0080;
}

void sub_1000D06AC(uint64_t *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v1 = (void *)a1[2];
  uint64_t v3 = *a1;
  Preferences.WiFiAddressPreference.wrappedValue.setter((*((unsigned int *)a1 + 6) | ((unint64_t)*((unsigned __int16 *)a1 + 14) << 32)) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int8 *)a1 + 30) << 48));
  (*(void (**)(void *, uint64_t))(v2 + 8))(v1, v3);

  free(v1);
}

uint64_t Preferences.$nanDataMACAddress.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 100);
  uint64_t v5 = type metadata accessor for Preferences.WiFiAddressPreference();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t Preferences.enableUserspaceP2POptions.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  v4[0] = *(void *)(a1 + 16);
  v4[1] = &type metadata for PreferenceDefaults.EnableUserspaceP2POptions;
  v4[2] = v1;
  v4[3] = sub_1000D4F68();
  uint64_t v2 = type metadata accessor for Preferences.EnumPreference();
  Preferences.EnumPreference.wrappedValue.getter(v2, (uint64_t)v4);
  return v4[0];
}

uint64_t Preferences.enableUserspaceP2POptions.setter()
{
  return sub_1000D4DB0();
}

void (*Preferences.enableUserspaceP2POptions.modify(void *a1, uint64_t a2))(char **a1, char a2)
{
  uint64_t v4 = malloc(0x50uLL);
  *a1 = v4;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v7 = sub_1000D4F68();
  *uint64_t v4 = v5;
  v4[1] = &type metadata for PreferenceDefaults.EnableUserspaceP2POptions;
  v4[2] = v6;
  v4[3] = v7;
  uint64_t v8 = type metadata accessor for Preferences.EnumPreference();
  v4[7] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v9;
  v4[8] = v9;
  v4[9] = malloc(*(void *)(v9 + 64));
  (*(void (**)(void))(v10 + 16))();
  Preferences.EnumPreference.wrappedValue.getter(v8, (uint64_t)(v4 + 4));
  return sub_1000D0984;
}

void sub_1000D0984(char **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = *((void *)*a1 + 8);
  uint64_t v3 = (void *)*((void *)*a1 + 9);
  uint64_t v5 = *((void *)*a1 + 7);
  uint64_t v6 = 48;
  if (a2) {
    uint64_t v6 = 40;
  }
  *(void *)&v2[v6] = *((void *)*a1 + 4);
  sub_1000D4DB0();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v5);
  free(v3);

  free(v2);
}

uint64_t Preferences.$enableUserspaceP2POptions.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 104);
  sub_1000D4F68();
  uint64_t v5 = type metadata accessor for Preferences.EnumPreference();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t Preferences.reportSoftErrorsWithTTR.getter()
{
  uint64_t v0 = type metadata accessor for Preferences.Preference();
  Preferences.Preference.wrappedValue.getter(v0, (uint64_t)&v2);
  return v2;
}

uint64_t Preferences.reportSoftErrorsWithTTR.setter(char a1)
{
  char v3 = a1;
  uint64_t v1 = type metadata accessor for Preferences.Preference();
  return sub_1000D4C74((uint64_t)&v3, v1);
}

uint64_t (*Preferences.reportSoftErrorsWithTTR.modify(uint64_t *a1))()
{
  uint64_t v2 = (uint64_t)(a1 + 3);
  uint64_t v3 = type metadata accessor for Preferences.Preference();
  *a1 = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v4;
  a1[1] = v4;
  a1[2] = (uint64_t)malloc(*(void *)(v4 + 64));
  (*(void (**)(void))(v5 + 16))();
  Preferences.Preference.wrappedValue.getter(v3, v2);
  return sub_1000CE10C;
}

uint64_t Preferences.$reportSoftErrorsWithTTR.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 108);
  uint64_t v5 = type metadata accessor for Preferences.Preference();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t Preferences.disableWiFiDisconnectRemoteCamera.getter()
{
  uint64_t v0 = type metadata accessor for Preferences.Preference();
  Preferences.Preference.wrappedValue.getter(v0, (uint64_t)&v2);
  return v2;
}

uint64_t Preferences.disableWiFiDisconnectRemoteCamera.setter(char a1)
{
  char v3 = a1;
  uint64_t v1 = type metadata accessor for Preferences.Preference();
  return sub_1000D4C74((uint64_t)&v3, v1);
}

uint64_t (*Preferences.disableWiFiDisconnectRemoteCamera.modify(uint64_t *a1))()
{
  uint64_t v2 = (uint64_t)(a1 + 3);
  uint64_t v3 = type metadata accessor for Preferences.Preference();
  *a1 = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v4;
  a1[1] = v4;
  a1[2] = (uint64_t)malloc(*(void *)(v4 + 64));
  (*(void (**)(void))(v5 + 16))();
  Preferences.Preference.wrappedValue.getter(v3, v2);
  return sub_1000CE10C;
}

uint64_t Preferences.$disableWiFiDisconnectRemoteCamera.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 112);
  uint64_t v5 = type metadata accessor for Preferences.Preference();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t Preferences.allowOnenessWombatCoex.getter()
{
  uint64_t v0 = type metadata accessor for Preferences.Preference();
  Preferences.Preference.wrappedValue.getter(v0, (uint64_t)&v2);
  return v2;
}

uint64_t Preferences.allowOnenessWombatCoex.setter(char a1)
{
  char v3 = a1;
  uint64_t v1 = type metadata accessor for Preferences.Preference();
  return sub_1000D4C74((uint64_t)&v3, v1);
}

uint64_t (*Preferences.allowOnenessWombatCoex.modify(uint64_t *a1))()
{
  uint64_t v2 = (uint64_t)(a1 + 3);
  uint64_t v3 = type metadata accessor for Preferences.Preference();
  *a1 = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v4;
  a1[1] = v4;
  a1[2] = (uint64_t)malloc(*(void *)(v4 + 64));
  (*(void (**)(void))(v5 + 16))();
  Preferences.Preference.wrappedValue.getter(v3, v2);
  return sub_1000CE10C;
}

void sub_1000D1070(uint64_t a1, char a2)
{
  char v2 = *(unsigned char *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 16);
  uint64_t v5 = *(void *)a1;
  if (a2)
  {
    *(unsigned char *)(a1 + 25) = v2;
    uint64_t v6 = a1 + 25;
  }
  else
  {
    *(unsigned char *)(a1 + 26) = v2;
    uint64_t v6 = a1 + 26;
  }
  sub_1000D4C74(v6, v5);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v5);

  free(v3);
}

uint64_t Preferences.$allowOnenessWombatCoex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 116);
  uint64_t v5 = type metadata accessor for Preferences.Preference();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t Preferences.init(storage:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a2 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v11(v10, a1, a2);
  LOBYTE(v20) = 1;
  if (qword_10047BF88 != -1) {
    swift_once();
  }
  char v12 = static PreferenceDefaults.isAppleInternal;
  sub_1000CCB6C((uint64_t)v10, 0, (uint64_t)&v20, static PreferenceDefaults.isAppleInternal, a2, (uint64_t)&type metadata for Bool, a4);
  v11(v10, a1, a2);
  LOBYTE(v20) = 0;
  unint64_t v13 = (int *)type metadata accessor for Preferences();
  sub_1000CCB6C((uint64_t)v10, 1, (uint64_t)&v20, v12, a2, (uint64_t)&type metadata for Bool, a4 + v13[9]);
  v11(v10, a1, a2);
  LOBYTE(v20) = 1;
  sub_1000CCB6C((uint64_t)v10, 2, (uint64_t)&v20, 1, a2, (uint64_t)&type metadata for Bool, a4 + v13[10]);
  v11(v10, a1, a2);
  LOBYTE(v20) = 1;
  sub_1000CCB6C((uint64_t)v10, 3, (uint64_t)&v20, 1, a2, (uint64_t)&type metadata for Bool, a4 + v13[11]);
  v11(v10, a1, a2);
  LODWORD(v20) = 4;
  sub_1000CCB6C((uint64_t)v10, 4, (uint64_t)&v20, 1, a2, (uint64_t)&type metadata for UInt32, a4 + v13[12]);
  v11(v10, a1, a2);
  LOBYTE(v20) = 2;
  uint64_t v14 = a4 + v13[13];
  unint64_t v15 = sub_1000D4EE4();
  sub_1000CD180((uint64_t)v10, 5, (uint64_t)&v20, 1, a2, (uint64_t)&type metadata for PreferenceDefaults.InternetSharingOptions, a3, v15, v14);
  v11(v10, a1, a2);
  LOBYTE(v20) = 0;
  sub_1000CCB6C((uint64_t)v10, 6, (uint64_t)&v20, 1, a2, (uint64_t)&type metadata for Bool, a4 + v13[14]);
  v11(v10, a1, a2);
  LOBYTE(v20) = 0;
  sub_1000CCB6C((uint64_t)v10, 13, (uint64_t)&v20, 1, a2, (uint64_t)&type metadata for Bool, a4 + v13[15]);
  v11(v10, a1, a2);
  LODWORD(v20) = 60;
  sub_1000CCB6C((uint64_t)v10, 14, (uint64_t)&v20, 1, a2, (uint64_t)&type metadata for UInt32, a4 + v13[16]);
  v11(v10, a1, a2);
  LOBYTE(v20) = 1;
  sub_1000CCB6C((uint64_t)v10, 7, (uint64_t)&v20, 1, a2, (uint64_t)&type metadata for Bool, a4 + v13[21]);
  v11(v10, a1, a2);
  sub_1000CDADC(8, 1, a2, a4 + v13[22]);
  v11(v10, a1, a2);
  LOBYTE(v20) = 1;
  sub_1000CCB6C((uint64_t)v10, 9, (uint64_t)&v20, 1, a2, (uint64_t)&type metadata for Bool, a4 + v13[23]);
  v11(v10, a1, a2);
  sub_1000CDADC(10, 1, a2, a4 + v13[24]);
  v11(v10, a1, a2);
  sub_1000CDADC(11, 1, a2, a4 + v13[25]);
  v11(v10, a1, a2);
  uint64_t v20 = 32;
  uint64_t v16 = a4 + v13[26];
  unint64_t v17 = sub_1000D4F68();
  sub_1000CD180((uint64_t)v10, 12, (uint64_t)&v20, 1, a2, (uint64_t)&type metadata for PreferenceDefaults.EnableUserspaceP2POptions, a3, v17, v16);
  v11(v10, a1, a2);
  LOBYTE(v20) = 0;
  sub_1000CCB6C((uint64_t)v10, 15, (uint64_t)&v20, 1, a2, (uint64_t)&type metadata for Bool, a4 + v13[27]);
  v11(v10, a1, a2);
  LOBYTE(v20) = 0;
  sub_1000CCB6C((uint64_t)v10, 16, (uint64_t)&v20, 1, a2, (uint64_t)&type metadata for Bool, a4 + v13[28]);
  v11(v10, a1, a2);
  LOBYTE(v20) = 1;
  sub_1000CCB6C((uint64_t)v10, 17, (uint64_t)&v20, 1, a2, (uint64_t)&type metadata for Bool, a4 + v13[29]);
  v11(v10, a1, a2);
  LOBYTE(v20) = 0;
  sub_1000CCB6C((uint64_t)v10, 18, (uint64_t)&v20, 1, a2, (uint64_t)&type metadata for Bool, a4 + v13[17]);
  v11(v10, a1, a2);
  LOBYTE(v20) = 0;
  sub_1000CCB6C((uint64_t)v10, 19, (uint64_t)&v20, 1, a2, (uint64_t)&type metadata for Bool, a4 + v13[18]);
  v11(v10, a1, a2);
  uint64_t v20 = 0x3FC999999999999ALL;
  sub_1000CCB6C((uint64_t)v10, 20, (uint64_t)&v20, 1, a2, (uint64_t)&type metadata for Double, a4 + v13[19]);
  uint64_t v20 = 0x3FE0000000000000;
  return sub_1000CCB6C(a1, 21, (uint64_t)&v20, 1, a2, (uint64_t)&type metadata for Double, a4 + v13[20]);
}

uint64_t Preferences.description.getter(int *a1)
{
  uint64_t v4 = *((void *)a1 + 2);
  uint64_t v3 = *((void *)a1 + 3);
  uint64_t v5 = type metadata accessor for Preferences.Preference();
  uint64_t v105 = *(void *)(v5 - 8);
  uint64_t v106 = v5;
  __chkstk_darwin();
  unint64_t v104 = (char *)v86 - v6;
  unint64_t v7 = sub_1000D4F68();
  uint64_t v120 = v4;
  unint64_t v121 = &type metadata for PreferenceDefaults.EnableUserspaceP2POptions;
  uint64_t v122 = v3;
  unint64_t v123 = v7;
  uint64_t v102 = type metadata accessor for Preferences.EnumPreference();
  uint64_t v103 = *(void *)(v102 - 8);
  __chkstk_darwin();
  uint64_t v101 = (uint64_t)v86 - v8;
  unint64_t v9 = sub_1000D4EE4();
  uint64_t v120 = v4;
  unint64_t v121 = &type metadata for PreferenceDefaults.InternetSharingOptions;
  uint64_t v122 = v3;
  unint64_t v123 = v9;
  uint64_t v99 = type metadata accessor for Preferences.EnumPreference();
  uint64_t v100 = *(void *)(v99 - 8);
  __chkstk_darwin();
  uint64_t v94 = (uint64_t)v86 - v10;
  uint64_t v112 = type metadata accessor for Preferences.Preference();
  uint64_t v115 = *(void *)(v112 - 8);
  __chkstk_darwin();
  long long v110 = (char *)v86 - v11;
  uint64_t v109 = type metadata accessor for Preferences.WiFiAddressPreference();
  uint64_t v12 = *(void *)(v109 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)v86 - v13;
  uint64_t v15 = type metadata accessor for Preferences.Preference();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin();
  uint64_t v18 = (char *)v86 - v17;
  uint64_t v120 = 0;
  unint64_t v121 = (ValueMetadata *)0xE000000000000000;
  uint64_t v19 = v1 + a1[21];
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  uint64_t v116 = a1;
  uint64_t v117 = v20;
  v20(v18, v19, v15);
  unint64_t v113 = &protocol conformance descriptor for Preferences<A>.Preference<A1>;
  uint64_t WitnessTable = swift_getWitnessTable();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  uint64_t v21 = *(void (**)(char *, uint64_t))(v16 + 8);
  v21(v18, v15);
  v22._countAndFlagsBits = 10;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  uint64_t v23 = v1 + a1[22];
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v92 = v12 + 16;
  uint64_t v93 = v24;
  unint64_t v89 = v14;
  uint64_t v25 = v109;
  v24(v14, v23, v109);
  uint64_t v91 = swift_getWitnessTable();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  unint64_t v90 = *(void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v111 = v12 + 8;
  v90(v14, v25);
  uint64_t v88 = v120;
  unint64_t v87 = v121;
  uint64_t v120 = 0;
  unint64_t v121 = (ValueMetadata *)0xE000000000000000;
  _StringGuts.grow(_:)(62);
  int v26 = v117;
  v117(v18, v1, v15);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v21(v18, v15);
  v27._countAndFlagsBits = 10;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  uint64_t v28 = v116;
  uint64_t v29 = v1 + v116[9];
  uint64_t v107 = v1;
  v26(v18, v29, v15);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v21(v18, v15);
  v30._countAndFlagsBits = 10;
  v30._object = (void *)0xE100000000000000;
  String.append(_:)(v30);
  v26(v18, v1 + v28[10], v15);
  uint64_t v118 = v16 + 16;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v21(v18, v15);
  unint64_t v108 = v21;
  uint64_t v114 = v16 + 8;
  v31._countAndFlagsBits = 10;
  v31._object = (void *)0xE100000000000000;
  String.append(_:)(v31);
  uint64_t v32 = v28[11];
  uint64_t v33 = (uint64_t)v28;
  uint64_t v34 = v107;
  v26(v18, v107 + v32, v15);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v21(v18, v15);
  v35._countAndFlagsBits = 10;
  v35._object = (void *)0xE100000000000000;
  String.append(_:)(v35);
  uint64_t v36 = v34 + *(int *)(v33 + 48);
  uint64_t v37 = v34;
  uint64_t v38 = v115;
  int64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v115 + 16);
  uint64_t v97 = v115 + 16;
  unint64_t v98 = v39;
  int v40 = v110;
  uint64_t v41 = v112;
  v39(v110, v36, v112);
  uint64_t v96 = swift_getWitnessTable();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  unint64_t v42 = *(void (**)(char *, uint64_t))(v38 + 8);
  uint64_t v115 = v38 + 8;
  uint64_t v95 = v42;
  v42(v40, v41);
  v43._countAndFlagsBits = 10;
  v43._object = (void *)0xE100000000000000;
  String.append(_:)(v43);
  uint64_t v44 = v94;
  uint64_t v45 = v37;
  Preferences.$internetSharingOptions.getter(v33, v94);
  v86[1] = &protocol conformance descriptor for Preferences<A>.EnumPreference<A1>;
  uint64_t v46 = v99;
  swift_getWitnessTable();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v44, v46);
  v47._countAndFlagsBits = 10;
  v47._object = (void *)0xE100000000000000;
  String.append(_:)(v47);
  unint64_t v48 = v117;
  v117(v18, v45 + *(int *)(v33 + 56), v15);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  unint64_t v49 = v108;
  v108(v18, v15);
  v50._countAndFlagsBits = 10;
  v50._object = (void *)0xE100000000000000;
  String.append(_:)(v50);
  v51._countAndFlagsBits = v88;
  v51._object = v87;
  String.append(_:)(v51);
  swift_bridgeObjectRelease();
  v52._countAndFlagsBits = 10;
  v52._object = (void *)0xE100000000000000;
  String.append(_:)(v52);
  unint64_t v53 = v116;
  v48(v18, v45 + v116[23], v15);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v49(v18, v15);
  v54._countAndFlagsBits = 10;
  v54._object = (void *)0xE100000000000000;
  String.append(_:)(v54);
  uint64_t v55 = v89;
  uint64_t v56 = v109;
  unint64_t v57 = v93;
  v93(v89, v45 + v53[24], v109);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  uint64_t v58 = v90;
  v90(v55, v56);
  v59._countAndFlagsBits = 10;
  v59._object = (void *)0xE100000000000000;
  String.append(_:)(v59);
  v57(v55, v45 + v116[25], v56);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v58(v55, v56);
  v60._countAndFlagsBits = 10;
  v60._object = (void *)0xE100000000000000;
  String.append(_:)(v60);
  uint64_t v61 = v101;
  unint64_t v62 = v116;
  uint64_t v63 = v107;
  Preferences.$enableUserspaceP2POptions.getter((uint64_t)v116, v101);
  uint64_t v64 = v102;
  swift_getWitnessTable();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v61, v64);
  v65._countAndFlagsBits = 10;
  v65._object = (void *)0xE100000000000000;
  String.append(_:)(v65);
  int v66 = v117;
  v117(v18, v63 + v62[27], v15);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  int v67 = v108;
  v108(v18, v15);
  v68._countAndFlagsBits = 10;
  v68._object = (void *)0xE100000000000000;
  String.append(_:)(v68);
  v66(v18, v63 + v62[28], v15);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v67(v18, v15);
  v69._countAndFlagsBits = 10;
  v69._object = (void *)0xE100000000000000;
  String.append(_:)(v69);
  uint64_t v70 = v63;
  v66(v18, v63 + v62[29], v15);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v67(v18, v15);
  v71._countAndFlagsBits = 10;
  v71._object = (void *)0xE100000000000000;
  String.append(_:)(v71);
  v66(v18, v63 + v62[15], v15);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v67(v18, v15);
  v72._countAndFlagsBits = 10;
  v72._object = (void *)0xE100000000000000;
  String.append(_:)(v72);
  uint64_t v73 = v110;
  uint64_t v74 = v112;
  v98(v110, v63 + v62[16], v112);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v95(v73, v74);
  v75._countAndFlagsBits = 10;
  v75._object = (void *)0xE100000000000000;
  String.append(_:)(v75);
  unint64_t v76 = v117;
  v117(v18, v63 + v62[17], v15);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v67(v18, v15);
  v77._countAndFlagsBits = 10;
  v77._object = (void *)0xE100000000000000;
  String.append(_:)(v77);
  v76(v18, v63 + v62[18], v15);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v67(v18, v15);
  v78._countAndFlagsBits = 10;
  v78._object = (void *)0xE100000000000000;
  String.append(_:)(v78);
  uint64_t v80 = v104;
  uint64_t v79 = v105;
  uint64_t v81 = *(void (**)(char *, uint64_t, uint64_t))(v105 + 16);
  uint64_t v82 = v106;
  v81(v104, v70 + v62[19], v106);
  swift_getWitnessTable();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  unint64_t v83 = *(void (**)(char *, uint64_t))(v79 + 8);
  v83(v80, v82);
  v84._countAndFlagsBits = 10;
  v84._object = (void *)0xE100000000000000;
  String.append(_:)(v84);
  v81(v80, v70 + v62[20], v82);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v83(v80, v82);
  return v120;
}

SCPreferencesRef sub_1000D252C()
{
  SCPreferencesRef result = sub_1000D254C();
  static SCPreferencesRef.p2pPreferences = (uint64_t)result;
  return result;
}

SCPreferencesRef sub_1000D254C()
{
  id v0 = [self defaultManager];
  NSString v1 = String._bridgeToObjectiveC()();
  unsigned int v2 = [v0 fileExistsAtPath:v1];

  if (v2)
  {
    NSString v3 = String._bridgeToObjectiveC()();
    unsigned __int8 v4 = [v0 fileExistsAtPath:v3];

    if ((v4 & 1) == 0)
    {
      NSString v5 = String._bridgeToObjectiveC()();
      NSString v6 = String._bridgeToObjectiveC()();
      id v15 = 0;
      unsigned int v7 = [v0 moveItemAtPath:v5 toPath:v6 error:&v15];

      if (v7)
      {
        id v8 = v15;
      }
      else
      {
        id v9 = v15;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_errorRelease();
      }
    }
  }
  id v10 = [self processInfo];
  uint64_t v11 = (__CFString *)[v10 processName];

  if (!v11)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = (__CFString *)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  uint64_t v12 = (__CFString *)String._bridgeToObjectiveC()();
  SCPreferencesRef v13 = SCPreferencesCreate(kCFAllocatorDefault, v11, v12);

  if (!v13) {
    __break(1u);
  }

  return v13;
}

id static SCPreferencesRef.p2pPreferences.getter()
{
  if (qword_10047BF98 != -1) {
    swift_once();
  }
  id v0 = (void *)static SCPreferencesRef.p2pPreferences;

  return v0;
}

uint64_t SCPreferencesRef.subscript.getter@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  SCPreferencesLock(v3, 1u);
  PreferencesName.rawValue.getter(a1);
  unsigned int v7 = (__CFString *)String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  (id)SCPreferencesGetValue(v3, v7);

  sub_100010BCC(&qword_10047EA08);
  int v8 = swift_dynamicCast();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a3, v8 ^ 1u, 1, a2);
  return SCPreferencesUnlock(v3);
}

uint64_t SCPreferencesRef.subscript.setter(uint64_t a1, char a2, uint64_t a3)
{
  unsigned __int8 v4 = v3;
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v12 = *(void *)(a3 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, a3) == 1)
  {
    id v15 = *(void (**)(char *, uint64_t))(v9 + 8);
    v15(v11, v8);
    SCPreferencesLock(v4, 1u);
    SCPreferencesSynchronize(v4);
    PreferencesName.rawValue.getter(a2);
    uint64_t v16 = (__CFString *)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    SCPreferencesRemoveValue(v4, v16);

    SCPreferencesCommitChanges(v4);
    SCPreferencesApplyChanges(v4);
    SCPreferencesUnlock(v4);
    return ((uint64_t (*)(uint64_t, uint64_t))v15)(a1, v8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v11, a3);
    SCPreferencesLock(v4, 1u);
    SCPreferencesSynchronize(v4);
    sub_1000D2C04(v4, a2);
    SCPreferencesCommitChanges(v4);
    SCPreferencesApplyChanges(v4);
    SCPreferencesUnlock(v4);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, a3);
  }
}

Swift::Void __swiftcall SCPreferencesRef.removeValue(forKey:)(CoreP2P::PreferencesName forKey)
{
  SCPreferencesLock(v1, 1u);
  SCPreferencesSynchronize(v1);
  PreferencesName.rawValue.getter(forKey);
  NSString v3 = (__CFString *)String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  SCPreferencesRemoveValue(v1, v3);

  SCPreferencesCommitChanges(v1);
  SCPreferencesApplyChanges(v1);

  SCPreferencesUnlock(v1);
}

uint64_t sub_1000D2C04(const __SCPreferences *a1, char a2)
{
  PreferencesName.rawValue.getter(a2);
  NSString v3 = (__CFString *)String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned __int8 v4 = (const void *)_bridgeAnythingToObjectiveC<A>(_:)();
  SCPreferencesSetValue(a1, v3, v4);

  return swift_unknownObjectRelease();
}

void (*SCPreferencesRef.subscript.modify(void *a1, char a2, uint64_t a3))(uint64_t *a1, char a2)
{
  unsigned int v7 = malloc(0x38uLL);
  *a1 = v7;
  *unsigned int v7 = a3;
  v7[1] = v3;
  *((unsigned char *)v7 + 48) = a2;
  uint64_t v8 = type metadata accessor for Optional();
  unsigned char v7[2] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  void v7[3] = v9;
  size_t v10 = *(void *)(v9 + 64);
  void v7[4] = malloc(v10);
  uint64_t v11 = malloc(v10);
  v7[5] = v11;
  SCPreferencesRef.subscript.getter(a2, a3, (uint64_t)v11);
  return sub_1000D2D78;
}

void sub_1000D2D78(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void **)(*a1 + 32);
  unsigned __int8 v4 = *(void **)(*a1 + 40);
  if (a2)
  {
    uint64_t v5 = *(void *)(v2 + 16);
    uint64_t v6 = *(void *)(v2 + 24);
    uint64_t v7 = *(void *)v2;
    char v8 = *(unsigned char *)(v2 + 48);
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*a1 + 32), v4, v5);
    SCPreferencesRef.subscript.setter((uint64_t)v3, v8, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    SCPreferencesRef.subscript.setter(*(void *)(*a1 + 40), *(unsigned char *)(v2 + 48), *(void *)v2);
  }
  free(v4);
  free(v3);

  free((void *)v2);
}

uint64_t sub_1000D2E44@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return SCPreferencesRef.subscript.getter(a1, a2, a3);
}

uint64_t sub_1000D2E68(uint64_t a1, char a2, uint64_t a3)
{
  return SCPreferencesRef.subscript.setter(a1, a2, a3);
}

void (*sub_1000D2E8C(void *a1, char a2, uint64_t a3))(uint64_t *a1, char a2)
{
  uint64_t v7 = malloc(0x38uLL);
  *a1 = v7;
  *(void *)uint64_t v7 = a3;
  v7[48] = a2;
  uint64_t v8 = type metadata accessor for Optional();
  *((void *)v7 + 1) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *((void *)v7 + 2) = v9;
  size_t v10 = *(void *)(v9 + 64);
  *((void *)v7 + 3) = malloc(v10);
  uint64_t v11 = malloc(v10);
  uint64_t v12 = *v3;
  *((void *)v7 + 4) = v11;
  *((void *)v7 + 5) = v12;
  SCPreferencesRef.subscript.getter(a2, a3, (uint64_t)v11);
  return sub_1000D2F78;
}

void sub_1000D2F78(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void **)(*a1 + 32);
  unsigned __int8 v4 = *(void **)(*a1 + 24);
  if (a2)
  {
    uint64_t v5 = *(void *)(v2 + 8);
    uint64_t v6 = *(void *)(v2 + 16);
    uint64_t v7 = *(void *)v2;
    char v8 = *(unsigned char *)(v2 + 48);
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*a1 + 24), v3, v5);
    SCPreferencesRef.subscript.setter((uint64_t)v4, v8, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v3, v5);
  }
  else
  {
    SCPreferencesRef.subscript.setter(*(void *)(*a1 + 32), *(unsigned char *)(v2 + 48), *(void *)v2);
  }
  free(v3);
  free(v4);

  free((void *)v2);
}

uint64_t sub_1000D3048(char a1)
{
  uint64_t v3 = *v1;
  SCPreferencesLock(v3, 1u);
  SCPreferencesSynchronize(v3);
  PreferencesName.rawValue.getter(a1);
  unsigned __int8 v4 = (__CFString *)String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  SCPreferencesRemoveValue(v3, v4);

  SCPreferencesCommitChanges(v3);
  SCPreferencesApplyChanges(v3);

  return SCPreferencesUnlock(v3);
}

uint64_t InMemoryPreferenceStorage.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = &_swiftEmptyDictionarySingleton;
  return result;
}

uint64_t type metadata accessor for InMemoryPreferenceStorage()
{
  return self;
}

uint64_t InMemoryPreferenceStorage.init()()
{
  uint64_t result = v0;
  *(void *)(v0 + 16) = &_swiftEmptyDictionarySingleton;
  return result;
}

uint64_t type metadata accessor for CachedPreferenceStorage()
{
  return sub_100038354();
}

uint64_t type metadata accessor for LockedPreferencesStorage()
{
  return sub_100038354();
}

uint64_t InMemoryPreferenceStorage.subscript.getter@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = PreferencesName.rawValue.getter(a1);
  uint64_t v8 = v7;
  swift_beginAccess();
  uint64_t v9 = *(void *)(v3 + 16);
  if (*(void *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_10000DDE0(v6, v8);
    if (v11)
    {
      sub_1000107A4(*(void *)(v9 + 56) + 32 * v10, (uint64_t)&v14);
    }
    else
    {
      long long v14 = 0u;
      long long v15 = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v14 = 0u;
    long long v15 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_100010BCC(&qword_10047D0D0);
  int v12 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a3, v12 ^ 1u, 1, a2);
}

uint64_t InMemoryPreferenceStorage.subscript.setter(uint64_t a1, char a2)
{
  sub_1000D4868(a1, a2);
  uint64_t v3 = type metadata accessor for Optional();
  unsigned __int8 v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(a1, v3);
}

void (*InMemoryPreferenceStorage.subscript.modify(void *a1, char a2, uint64_t a3))(uint64_t a1, char a2)
{
  uint64_t v7 = malloc(0x38uLL);
  *a1 = v7;
  *uint64_t v7 = a3;
  v7[1] = v3;
  *((unsigned char *)v7 + 48) = a2;
  uint64_t v8 = type metadata accessor for Optional();
  unsigned char v7[2] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  void v7[3] = v9;
  size_t v10 = *(void *)(v9 + 64);
  void v7[4] = malloc(v10);
  char v11 = malloc(v10);
  v7[5] = v11;
  InMemoryPreferenceStorage.subscript.getter(a2, a3, (uint64_t)v11);
  return sub_1000D33E8;
}

void sub_1000D33E8(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 32);
  unsigned __int8 v4 = *(void **)(*(void *)a1 + 40);
  uint64_t v5 = *(void *)(*(void *)a1 + 16);
  uint64_t v6 = *(void *)(*(void *)a1 + 24);
  char v7 = *(unsigned char *)(*(void *)a1 + 48);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 32), v4, v5);
    sub_1000D4868((uint64_t)v3, v7);
    uint64_t v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
    v8(v4, v5);
  }
  else
  {
    sub_1000D4868(*(void *)(*(void *)a1 + 40), v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

Swift::Void __swiftcall InMemoryPreferenceStorage.removeValue(forKey:)(CoreP2P::PreferencesName forKey)
{
  unint64_t v1 = PreferencesName.rawValue.getter(forKey);
  uint64_t v3 = v2;
  swift_beginAccess();
  sub_10003395C(v1, v3, v4);
  sub_1000D4FD4((uint64_t)v4);
  swift_endAccess();
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall InMemoryPreferenceStorage.removeAll()()
{
  swift_beginAccess();
  *(void *)(v0 + 16) = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease();
}

uint64_t InMemoryPreferenceStorage.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t InMemoryPreferenceStorage.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1000D35F4@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return InMemoryPreferenceStorage.subscript.getter(a1, a2, a3);
}

uint64_t sub_1000D3618(uint64_t a1, char a2)
{
  sub_1000D4868(a1, a2);
  uint64_t v3 = type metadata accessor for Optional();
  unsigned __int8 v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(a1, v3);
}

void (*sub_1000D3694(void *a1, char a2, uint64_t a3))(uint64_t a1, char a2)
{
  char v7 = malloc(0x38uLL);
  *a1 = v7;
  *(void *)char v7 = a3;
  v7[48] = a2;
  uint64_t v8 = type metadata accessor for Optional();
  *((void *)v7 + 1) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *((void *)v7 + 2) = v9;
  size_t v10 = *(void *)(v9 + 64);
  *((void *)v7 + 3) = malloc(v10);
  char v11 = malloc(v10);
  uint64_t v12 = *v3;
  *((void *)v7 + 4) = v11;
  *((void *)v7 + 5) = v12;
  InMemoryPreferenceStorage.subscript.getter(a2, a3, (uint64_t)v11);
  return sub_1000D3780;
}

void sub_1000D3780(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 32);
  uint64_t v5 = *(void *)(*(void *)a1 + 16);
  unsigned __int8 v4 = *(void **)(*(void *)a1 + 24);
  uint64_t v6 = *(void *)(*(void *)a1 + 8);
  char v7 = *(unsigned char *)(*(void *)a1 + 48);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v5 + 16))(*(void *)(*(void *)a1 + 24), v3, v6);
    sub_1000D4868((uint64_t)v4, v7);
    uint64_t v8 = *(void (**)(void *, uint64_t))(v5 + 8);
    v8(v4, v6);
    v8(v3, v6);
  }
  else
  {
    sub_1000D4868(*(void *)(*(void *)a1 + 32), v7);
    (*(void (**)(void *, uint64_t))(v5 + 8))(v3, v6);
  }
  free(v3);
  free(v4);

  free(v2);
}

uint64_t sub_1000D3878(char a1)
{
  unint64_t v1 = PreferencesName.rawValue.getter(a1);
  uint64_t v3 = v2;
  swift_beginAccess();
  sub_10003395C(v1, v3, v5);
  sub_1000D4FD4((uint64_t)v5);
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

void LockedPreferencesStorage.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v16 - v12;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(*(void *)v4 + 16));
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)(a2 + 24) + 8))(a1, a3, *(void *)(a2 + 16));
  uint64_t v14 = *(void *)(a3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, a3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    uint64_t v15 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(a4, v13, a3);
    uint64_t v15 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(a4, v15, 1, a3);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(*(void *)v5 + 16));
}

uint64_t LockedPreferencesStorage.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000D4250(a1, a2, a3, a4, (void (*)(void))sub_1000D4A6C);
}

void (*LockedPreferencesStorage.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[1] = a4;
  void v9[2] = v4;
  *uint64_t v9 = a3;
  *((unsigned char *)v9 + 56) = a2;
  uint64_t v10 = type metadata accessor for Optional();
  v9[3] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v9[4] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v9[5] = malloc(v12);
  uint64_t v13 = malloc(v12);
  v9[6] = v13;
  LockedPreferencesStorage.subscript.getter(a2, a3, a4, (uint64_t)v13);
  return sub_1000D3BCC;
}

void sub_1000D3BCC(uint64_t **a1, char a2)
{
}

Swift::Void __swiftcall LockedPreferencesStorage.removeValue(forKey:)(CoreP2P::PreferencesName forKey)
{
  uint64_t v3 = v1;
  uint64_t v4 = forKey;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(*(void *)v2 + 16));
  (*(void (**)(uint64_t, void))(*(void *)(v3 + 24) + 32))(v4, *(void *)(v3 + 16));
  uint64_t v5 = *(os_unfair_lock_s **)(*(void *)v2 + 16);

  os_unfair_lock_unlock(v5);
}

void sub_1000D3C5C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

uint64_t sub_1000D3C6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000D45B4(a1, a2, a3, a4, a5, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000D4A6C);
}

void (*sub_1000D3C84(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[1] = v4;
  void v9[2] = a4;
  *uint64_t v9 = a3;
  *((unsigned char *)v9 + 56) = a2;
  uint64_t v10 = type metadata accessor for Optional();
  v9[3] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v9[4] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v9[5] = malloc(v12);
  uint64_t v13 = malloc(v12);
  v9[6] = v13;
  LockedPreferencesStorage.subscript.getter(a2, a4, a3, (uint64_t)v13);
  return sub_1000D3D80;
}

void sub_1000D3D80(uint64_t **a1, char a2)
{
}

uint64_t LockedPreferencesStorage<>.init()()
{
  type metadata accessor for InMemoryPreferenceStorage();
  *(void *)(swift_allocObject() + 16) = &_swiftEmptyDictionarySingleton;
  type metadata accessor for Lock();
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = (_DWORD *)swift_slowAlloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = 0;
  return v0;
}

uint64_t CachedPreferenceStorage.subscript.getter@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v44 = a2;
  uint64_t v46 = a4;
  uint64_t v45 = type metadata accessor for Optional();
  uint64_t v48 = *(void *)(v45 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v38 - v9;
  __chkstk_darwin();
  size_t v12 = (char *)&v38 - v11;
  uint64_t v13 = *(void *)(a3 - 8);
  __chkstk_darwin();
  uint64_t v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v17 = (char *)&v38 - v16;
  uint64_t v18 = v4;
  unsigned int v47 = a1;
  InMemoryPreferenceStorage.subscript.getter(a1, a3, (uint64_t)v12);
  uint64_t v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v19(v12, 1, a3) != 1)
  {
    uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v32(v17, v12, a3);
    uint64_t v33 = v46;
    v32(v46, v17, a3);
    return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v33, 0, 1, a3);
  }
  unint64_t v42 = (uint64_t (*)(char *, uint64_t, uint64_t))v19;
  Swift::String v43 = v10;
  int v40 = v15;
  uint64_t v41 = v8;
  uint64_t v20 = *(void (**)(char *, uint64_t))(v48 + 8);
  v48 += 8;
  v20(v12, v45);
  uint64_t v21 = *v18;
  uint64_t v22 = *(void *)(v44 + 16);
  uint64_t v23 = *(void *)(v44 + 24);
  uint64_t v24 = type metadata accessor for CachedPreferenceStorage.EmptyPreference();
  InMemoryPreferenceStorage.subscript.getter(v47, v24, (uint64_t)&v50);
  if (v50)
  {
    uint64_t v38 = v21;
    int64_t v39 = (void (*)(uint64_t, uint64_t))v20;
    uint64_t v25 = v43;
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(v23 + 8))(v47, a3, v22, v23);
    int v26 = v25;
    int v27 = v42(v25, 1, a3);
    uint64_t v29 = v45;
    uint64_t v28 = v46;
    if (v27 != 1)
    {
      uint64_t v44 = *(void *)(v13 + 32);
      Swift::String v35 = v40;
      ((void (*)(char *, char *, uint64_t))v44)(v40, v26, a3);
      uint64_t v36 = (uint64_t)v41;
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v41, v35, a3);
      uint64_t v37 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56);
      v37(v36, 0, 1, a3);
      sub_1000D4868(v36, v47);
      v39(v36, v29);
      ((void (*)(char *, char *, uint64_t))v44)(v28, v35, a3);
      return ((uint64_t (*)(char *, void, uint64_t, uint64_t))v37)(v28, 0, 1, a3);
    }
    v39((uint64_t)v25, v45);
    char v49 = 0;
    sub_1000D4868((uint64_t)&v49, v47);
    Swift::String v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
    Swift::String v31 = v28;
  }
  else
  {
    Swift::String v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
    Swift::String v31 = v46;
  }
  return v30((uint64_t)v31, 1, 1, a3);
}

uint64_t CachedPreferenceStorage.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000D4250(a1, a2, a3, a4, (void (*)(void))sub_1000D4B4C);
}

uint64_t sub_1000D4250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  a5();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(a1, v6);
}

void (*CachedPreferenceStorage.subscript.modify(void *a1, unsigned int a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[1] = a4;
  void v9[2] = v4;
  *uint64_t v9 = a3;
  *((unsigned char *)v9 + 56) = a2;
  uint64_t v10 = type metadata accessor for Optional();
  v9[3] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v9[4] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v9[5] = malloc(v12);
  uint64_t v13 = (char *)malloc(v12);
  v9[6] = v13;
  CachedPreferenceStorage.subscript.getter(a2, a3, a4, v13);
  return sub_1000D43C8;
}

void sub_1000D43C8(uint64_t **a1, char a2)
{
}

void sub_1000D43E0(uint64_t **a1, char a2, void (*a3)(void *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v5 = (void *)(*a1)[5];
  uint64_t v6 = (void *)(*a1)[6];
  uint64_t v7 = (*a1)[3];
  uint64_t v8 = (*a1)[4];
  uint64_t v9 = (*a1)[1];
  uint64_t v10 = **a1;
  uint64_t v11 = *((unsigned __int8 *)*a1 + 56);
  if (a2)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v8 + 16))((*a1)[5], v6, v7);
    a3(v5, v11, v10, v9);
    size_t v12 = *(void (**)(void *, uint64_t))(v8 + 8);
    v12(v5, v7);
    v12(v6, v7);
  }
  else
  {
    a3((void *)(*a1)[6], v11, v10, v9);
    (*(void (**)(void *, uint64_t))(v8 + 8))(v6, v7);
  }
  free(v6);
  free(v5);

  free(v4);
}

Swift::Void __swiftcall CachedPreferenceStorage.removeValue(forKey:)(CoreP2P::PreferencesName forKey)
{
  uint64_t v2 = forKey;
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  char v5 = 0;
  type metadata accessor for CachedPreferenceStorage.EmptyPreference();
  sub_1000D4868((uint64_t)&v5, v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2, v3, v4);
}

uint64_t sub_1000D458C@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  return CachedPreferenceStorage.subscript.getter(a1, a3, a2, a4);
}

uint64_t sub_1000D459C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000D45B4(a1, a2, a3, a4, a5, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000D4B4C);
}

uint64_t sub_1000D45B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  a6(a1, a2, a4, a3);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);

  return v8(a1, v7);
}

void (*sub_1000D4638(void *a1, unsigned int a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[1] = v4;
  void v9[2] = a4;
  *uint64_t v9 = a3;
  *((unsigned char *)v9 + 56) = a2;
  uint64_t v10 = type metadata accessor for Optional();
  v9[3] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v9[4] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v9[5] = malloc(v12);
  uint64_t v13 = (char *)malloc(v12);
  v9[6] = v13;
  CachedPreferenceStorage.subscript.getter(a2, a4, a3, v13);
  return sub_1000D4734;
}

void sub_1000D4734(uint64_t **a1, char a2)
{
}

void sub_1000D474C(uint64_t **a1, char a2, void (*a3)(void *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = *a1;
  char v5 = (void *)(*a1)[5];
  uint64_t v6 = (void *)(*a1)[6];
  uint64_t v7 = (*a1)[3];
  uint64_t v8 = (*a1)[4];
  uint64_t v9 = (*a1)[2];
  uint64_t v10 = **a1;
  uint64_t v11 = *((unsigned __int8 *)*a1 + 56);
  if (a2)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v8 + 16))((*a1)[5], v6, v7);
    a3(v5, v11, v9, v10);
    size_t v12 = *(void (**)(void *, uint64_t))(v8 + 8);
    v12(v5, v7);
    v12(v6, v7);
  }
  else
  {
    a3((void *)(*a1)[6], v11, v9, v10);
    (*(void (**)(void *, uint64_t))(v8 + 8))(v6, v7);
  }
  free(v6);
  free(v5);

  free(v4);
}

uint64_t sub_1000D4868(uint64_t a1, char a2)
{
  unint64_t v3 = PreferencesName.rawValue.getter(a2);
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for Optional();
  v9[3] = v6;
  uint64_t v7 = sub_1000382F0(v9);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(v7, a1, v6);
  swift_beginAccess();
  sub_100027960((uint64_t)v9, v3, v5);
  return swift_endAccess();
}

uint64_t _s7CoreP2P15PreferencesNameO8rawValueACSgSS_tcfC_0()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x16) {
    return 22;
  }
  else {
    return v0;
  }
}

unint64_t _s7CoreP2P18PreferenceDefaultsV22InternetSharingOptionsO8rawValueAESgSS_tcfC_0(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10044F570, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t sub_1000D49D0(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    String.index(_:offsetBy:limitedBy:)();
    return String.subscript.getter();
  }
  return result;
}

void sub_1000D4A6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_unfair_lock_lock(*(os_unfair_lock_t *)(*(void *)v3 + 16));
  uint64_t v7 = type metadata accessor for Optional();
  v9[3] = v7;
  uint64_t v8 = sub_1000382F0(v9);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v8, a1, v7);
  (*(void (**)(uint64_t *, uint64_t, char *, void))(*(void *)(a3 + 24) + 16))(v9, a2, &type metadata for Any[8], *(void *)(a3 + 16));
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(*(void *)v3 + 16));
}

uint64_t sub_1000D4B4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v13 - v10;
  sub_1000D4868(a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, void))(*(void *)(a3 + 24) + 16))(v11, a2, a4, *(void *)(a3 + 16));
}

uint64_t sub_1000D4C74(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 24);
  type metadata accessor for Optional();
  __chkstk_darwin();
  uint64_t v7 = (char *)&v11 - v6;
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v2 + *(int *)(a2 + 44));
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v11 - v6, a1, v5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v7, 0, 1, v5);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, void))(*(void *)(a2 + 32) + 16))(v7, v9, v5, *(void *)(a2 + 16));
}

uint64_t type metadata accessor for Preferences.Preference()
{
  return sub_100038354();
}

uint64_t sub_1000D4DB0()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v6 - v2;
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v4 = type metadata accessor for Preferences.Preference();
  sub_1000D4C74((uint64_t)v3, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, AssociatedTypeWitness);
}

unint64_t sub_1000D4EE4()
{
  unint64_t result = qword_10047E9F8;
  if (!qword_10047E9F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047E9F8);
  }
  return result;
}

uint64_t type metadata accessor for Preferences.EnumPreference()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for Preferences.WiFiAddressPreference()
{
  return sub_100038354();
}

unint64_t sub_1000D4F68()
{
  unint64_t result = qword_10047EA00;
  if (!qword_10047EA00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047EA00);
  }
  return result;
}

uint64_t type metadata accessor for Preferences()
{
  return sub_100038354();
}

uint64_t sub_1000D4FD4(uint64_t a1)
{
  uint64_t v2 = sub_100010BCC(&qword_10047D0D0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for CachedPreferenceStorage.EmptyPreference()
{
  return sub_100038354();
}

unint64_t sub_1000D5054()
{
  unint64_t result = qword_10047EA10;
  if (!qword_10047EA10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047EA10);
  }
  return result;
}

unint64_t sub_1000D50AC()
{
  unint64_t result = qword_10047EA18;
  if (!qword_10047EA18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047EA18);
  }
  return result;
}

unint64_t sub_1000D5104()
{
  unint64_t result = qword_10047EA20;
  if (!qword_10047EA20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047EA20);
  }
  return result;
}

unint64_t sub_1000D515C()
{
  unint64_t result = qword_10047EA28;
  if (!qword_10047EA28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047EA28);
  }
  return result;
}

unint64_t sub_1000D51B4()
{
  unint64_t result = qword_10047EA30;
  if (!qword_10047EA30)
  {
    sub_100014434(&qword_10047EA38);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047EA30);
  }
  return result;
}

unint64_t sub_1000D5214()
{
  unint64_t result = qword_10047EA40[0];
  if (!qword_10047EA40[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10047EA40);
  }
  return result;
}

ValueMetadata *type metadata accessor for PreferenceDefaults()
{
  return &type metadata for PreferenceDefaults;
}

ValueMetadata *type metadata accessor for PreferenceDefaults.EnableUserspaceP2POptions()
{
  return &type metadata for PreferenceDefaults.EnableUserspaceP2POptions;
}

unsigned char *storeEnumTagSinglePayload for PreferenceDefaults.InternetSharingOptions(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000D5354);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PreferenceDefaults.InternetSharingOptions()
{
  return &type metadata for PreferenceDefaults.InternetSharingOptions;
}

uint64_t getEnumTagSinglePayload for PreferencesName(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEB) {
    goto LABEL_17;
  }
  if (a2 + 21 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 21) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 21;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 21;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 21;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x16;
  int v8 = v6 - 22;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for PreferencesName(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 21 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 21) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEA)
  {
    unsigned int v6 = ((a2 - 235) >> 8) + 1;
    *unint64_t result = a2 + 21;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000D54E8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 21;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PreferencesName()
{
  return &type metadata for PreferencesName;
}

uint64_t sub_1000D5520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 104);
}

uint64_t sub_1000D5528()
{
  uint64_t result = type metadata accessor for Preferences.Preference();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Preferences.Preference();
    if (v2 <= 0x3F)
    {
      sub_1000D4EE4();
      uint64_t result = type metadata accessor for Preferences.EnumPreference();
      if (v3 <= 0x3F)
      {
        uint64_t result = type metadata accessor for Preferences.Preference();
        if (v4 <= 0x3F)
        {
          uint64_t result = type metadata accessor for Preferences.Preference();
          if (v5 <= 0x3F)
          {
            sub_1000D4F68();
            uint64_t result = type metadata accessor for Preferences.EnumPreference();
            if (v6 <= 0x3F)
            {
              swift_initStructMetadata();
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

void *sub_1000D577C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  int v8 = *(_DWORD *)(v6 + 80);
  uint64_t v9 = v8 | 7;
  uint64_t v10 = ~v9;
  if (v8 > 7u) {
    goto LABEL_5;
  }
  if ((v8 & 0x100000) != 0) {
    goto LABEL_5;
  }
  uint64_t v11 = v7 + 3 + v8;
  unint64_t v12 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + 9;
  unint64_t v13 = (v7 & 0xFFFFFFFFFFFFFFF8) + 25;
  unint64_t v14 = v12 + v8;
  unint64_t v15 = (v11
       + ((v14
         + (((v8 | 3)
           + v7
           + 3
           + ((v11
             + ((v13
               + v8
               + ((v9 + 1) & ~v9)
               + ((v9
                 + v12
                 + (((v8 | 3)
                   + v7
                   + 3
                   + ((v11
                     + ((v11 + (v11 & ~(unint64_t)v8)) & ~(unint64_t)v8)) & ~(unint64_t)v8)) & ~(v8 | 3))) & ~v9)) & ~(unint64_t)v8)) & ~(unint64_t)v8)) & ~(v8 | 3))) & ~(unint64_t)v8)) & ~(unint64_t)v8;
  uint64_t v16 = v9 + v7 + 3;
  unint64_t v17 = (v7 & 0xFFFFFFFFFFFFFFF8) + 17;
  unint64_t v18 = (v9 + v17 + ((v16 + v15) & ~v9)) & ~v9;
  unint64_t v19 = v17 + v8;
  if (((v11
       + ((v11
         + ((v19
           + ((v8 + 8) & ~v9)
           + ((v9
             + v13
             + ((v9
               + v13
               + ((v16
                 + ((v13 + v8 + ((v16 + ((v19 + v18) & ~(unint64_t)v8)) & ~v9)) & ~(unint64_t)v8)) & ~v9)) & ~v9)) & ~v9)) & ~(unint64_t)v8)) & ~(unint64_t)v8)) & ~(unint64_t)v8)
     + v7
     + 3 > 0x18)
  {
LABEL_5:
    uint64_t v111 = *a2;
    *a1 = *a2;
    uint64_t v102 = (void *)(v111 + ((v8 + 16) & v10));
    swift_retain();
  }
  else
  {
    unint64_t v20 = ~(unint64_t)v8;
    uint64_t v120 = (v8 | 3) + v7 + 3;
    uint64_t v121 = ~(v8 | 3);
    uint64_t v21 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
    uint64_t v22 = a1;
    uint64_t v23 = v5;
    unint64_t v116 = v13 + v8;
    unint64_t v117 = v19 + ((v8 + 8) & ~v9);
    unint64_t v114 = v14;
    unint64_t v115 = v19;
    unint64_t v113 = v116 + ((v9 + 1) & ~v9);
    ((void (*)(void *, void *))v21)(a1, a2);
    uint64_t v24 = v21;
    uint64_t v118 = v22;
    uint64_t v25 = (char *)v22 + v7;
    *uint64_t v25 = *((unsigned char *)a2 + v7);
    v25[1] = *((unsigned char *)a2 + v7 + 1);
    v25[2] = *((unsigned char *)a2 + v7 + 2);
    unint64_t v26 = ((unint64_t)v22 + v11) & v20;
    unint64_t v27 = ((unint64_t)a2 + v11) & v20;
    uint64_t v28 = v24;
    v24(v26, v27, v23);
    uint64_t v29 = (unsigned char *)(v26 + v7);
    *uint64_t v29 = *(unsigned char *)(v27 + v7);
    v29[1] = *(unsigned char *)(v27 + v7 + 1);
    v29[2] = *(unsigned char *)(v27 + v7 + 2);
    unint64_t v30 = (v11 + v26) & v20;
    unint64_t v31 = (v11 + v27) & v20;
    v28(v30, v31, v23);
    uint64_t v32 = (unsigned char *)(v30 + v7);
    *uint64_t v32 = *(unsigned char *)(v31 + v7);
    v32[1] = *(unsigned char *)(v31 + v7 + 1);
    v32[2] = *(unsigned char *)(v31 + v7 + 2);
    unint64_t v33 = (v11 + v30) & v20;
    unint64_t v34 = (v11 + v31) & v20;
    v28(v33, v34, v23);
    Swift::String v35 = (unsigned char *)(v33 + v7);
    *Swift::String v35 = *(unsigned char *)(v34 + v7);
    v35[1] = *(unsigned char *)(v34 + v7 + 1);
    v35[2] = *(unsigned char *)(v34 + v7 + 2);
    uint64_t v36 = (v120 + v33) & v121;
    uint64_t v37 = (v120 + v34) & v121;
    uint64_t v123 = v23;
    v28(v36, v37, v23);
    *(unsigned char *)(v36 + v7) = *(unsigned char *)(v37 + v7);
    unint64_t v38 = (v36 + v7) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v39 = (v37 + v7) & 0xFFFFFFFFFFFFFFFCLL;
    *(_DWORD *)(v38 + 4) = *(_DWORD *)(v39 + 4);
    *(unsigned char *)(v38 + 8) = *(unsigned char *)(v39 + 8);
    int v40 = (unsigned char *)((v7 + 16 + v37) & v10);
    uint64_t v41 = (unsigned char *)((v7 + 16 + v36) & v10);
    *uint64_t v41 = *v40;
    uint64_t v42 = (unint64_t)(v41 + 8) & v10;
    uint64_t v43 = (unint64_t)(v40 + 8) & v10;
    v28(v42, v43, v23);
    *(unsigned char *)(v42 + v7) = *(unsigned char *)(v43 + v7);
    unint64_t v44 = (v42 + v7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v45 = (v43 + v7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v44 + 8) = *(void *)(v45 + 8);
    *(void *)(v44 + 16) = *(void *)(v45 + 16);
    *(unsigned char *)(v44 + 24) = *(unsigned char *)(v45 + 24);
    unint64_t v46 = (unint64_t)&v41[v113] & v20;
    unint64_t v47 = (unint64_t)&v40[v113] & v20;
    swift_bridgeObjectRetain();
    v28(v46, v47, v23);
    uint64_t v48 = (unsigned char *)(v46 + v7);
    *uint64_t v48 = *(unsigned char *)(v47 + v7);
    v48[1] = *(unsigned char *)(v47 + v7 + 1);
    v48[2] = *(unsigned char *)(v47 + v7 + 2);
    unint64_t v49 = (v11 + v46) & v20;
    unint64_t v50 = (v11 + v47) & v20;
    v28(v49, v50, v23);
    Swift::String v51 = (unsigned char *)(v49 + v7);
    *Swift::String v51 = *(unsigned char *)(v50 + v7);
    v51[1] = *(unsigned char *)(v50 + v7 + 1);
    v51[2] = *(unsigned char *)(v50 + v7 + 2);
    uint64_t v52 = (v120 + v49) & v121;
    uint64_t v53 = (v120 + v50) & v121;
    v28(v52, v53, v23);
    *(unsigned char *)(v52 + v7) = *(unsigned char *)(v53 + v7);
    unint64_t v54 = (v52 + v7) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v55 = (v53 + v7) & 0xFFFFFFFFFFFFFFFCLL;
    *(_DWORD *)(v54 + 4) = *(_DWORD *)(v55 + 4);
    *(unsigned char *)(v54 + 8) = *(unsigned char *)(v55 + 8);
    unint64_t v56 = (v114 + v52) & v20;
    unint64_t v57 = (v114 + v53) & v20;
    v28(v56, v57, v23);
    uint64_t v58 = (unsigned char *)(v56 + v7);
    *uint64_t v58 = *(unsigned char *)(v57 + v7);
    v58[1] = *(unsigned char *)(v57 + v7 + 1);
    v58[2] = *(unsigned char *)(v57 + v7 + 2);
    unint64_t v59 = (v11 + v56) & v20;
    unint64_t v60 = (v11 + v57) & v20;
    v28(v59, v60, v23);
    uint64_t v61 = (unsigned char *)(v59 + v7);
    unsigned char *v61 = *(unsigned char *)(v60 + v7);
    v61[1] = *(unsigned char *)(v60 + v7 + 1);
    v61[2] = *(unsigned char *)(v60 + v7 + 2);
    uint64_t v62 = (v7 + 10 + v59) & v10;
    uint64_t v63 = (v7 + 10 + v60) & v10;
    v28(v62, v63, v23);
    *(unsigned char *)(v62 + v7) = *(unsigned char *)(v63 + v7);
    unint64_t v64 = (v62 + v7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v65 = (v63 + v7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v64 + 8) = *(void *)(v65 + 8);
    *(unsigned char *)(v64 + 16) = *(unsigned char *)(v65 + 16);
    uint64_t v66 = (v7 + 24 + v62) & v10;
    uint64_t v67 = (v7 + 24 + v63) & v10;
    v28(v66, v67, v23);
    *(unsigned char *)(v66 + v7) = *(unsigned char *)(v67 + v7);
    unint64_t v68 = (v66 + v7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v69 = (v67 + v7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v68 + 8) = *(void *)(v69 + 8);
    *(unsigned char *)(v68 + 16) = *(unsigned char *)(v69 + 16);
    unint64_t v70 = (v115 + v66) & v20;
    unint64_t v71 = (v115 + v67) & v20;
    v28(v70, v71, v23);
    uint64_t v119 = v28;
    Swift::String v72 = (unsigned char *)(v70 + v7);
    *Swift::String v72 = *(unsigned char *)(v71 + v7);
    v72[1] = *(unsigned char *)(v71 + v7 + 1);
    v72[2] = *(unsigned char *)(v71 + v7 + 2);
    uint64_t v73 = (v7 + 10 + v70) & v10;
    uint64_t v74 = (v7 + 10 + v71) & v10;
    v28(v73, v74, v23);
    *(unsigned char *)(v73 + v7) = *(unsigned char *)(v74 + v7);
    uint64_t v122 = v11;
    unint64_t v75 = (v73 + v7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v76 = (v74 + v7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v77 = *(void *)(v76 + 8);
    unint64_t v78 = *(void *)(v76 + 16);
    sub_100013D44(v77, v78);
    *(void *)(v75 + 8) = v77;
    *(void *)(v75 + 16) = v78;
    *(unsigned char *)(v75 + 24) = *(unsigned char *)(v76 + 24);
    unint64_t v79 = (v116 + v73) & v20;
    unint64_t v80 = (v116 + v74) & v20;
    v119(v79, v80, v123);
    uint64_t v81 = (unsigned char *)(v79 + v7);
    *uint64_t v81 = *(unsigned char *)(v80 + v7);
    v81[1] = *(unsigned char *)(v80 + v7 + 1);
    v81[2] = *(unsigned char *)(v80 + v7 + 2);
    uint64_t v82 = (v7 + 10 + v79) & v10;
    uint64_t v83 = (v7 + 10 + v80) & v10;
    v119(v82, v83, v123);
    *(unsigned char *)(v82 + v7) = *(unsigned char *)(v83 + v7);
    unint64_t v84 = (v82 + v7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v85 = (v83 + v7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v86 = *(void *)(v85 + 8);
    unint64_t v87 = *(void *)(v85 + 16);
    sub_100013D44(v86, v87);
    *(void *)(v84 + 8) = v86;
    *(void *)(v84 + 16) = v87;
    *(unsigned char *)(v84 + 24) = *(unsigned char *)(v85 + 24);
    uint64_t v88 = (v7 + 32 + v82) & v10;
    uint64_t v89 = (v7 + 32 + v83) & v10;
    v119(v88, v89, v123);
    *(unsigned char *)(v88 + v7) = *(unsigned char *)(v89 + v7);
    unint64_t v90 = (v88 + v7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v91 = (v89 + v7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v92 = *(void *)(v91 + 8);
    unint64_t v93 = *(void *)(v91 + 16);
    sub_100013D44(v92, v93);
    *(void *)(v90 + 8) = v92;
    *(void *)(v90 + 16) = v93;
    *(unsigned char *)(v90 + 24) = *(unsigned char *)(v91 + 24);
    uint64_t v94 = (void *)((v7 + 32 + v89) & v10);
    uint64_t v95 = (void *)((v7 + 32 + v88) & v10);
    void *v95 = *v94;
    uint64_t v96 = ((unint64_t)v95 + 15) & v10;
    uint64_t v97 = ((unint64_t)v94 + 15) & v10;
    v119(v96, v97, v123);
    *(unsigned char *)(v96 + v7) = *(unsigned char *)(v97 + v7);
    unint64_t v98 = (v96 + v7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v99 = (v97 + v7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v98 + 8) = *(void *)(v99 + 8);
    *(unsigned char *)(v98 + 16) = *(unsigned char *)(v99 + 16);
    unint64_t v100 = ((unint64_t)v95 + v117) & v20;
    unint64_t v101 = (unint64_t)v94 + v117;
    uint64_t v102 = v118;
    unint64_t v103 = v101 & v20;
    v119(v100, v101 & v20, v123);
    unint64_t v104 = (unsigned char *)(v100 + v7);
    *unint64_t v104 = *(unsigned char *)(v103 + v7);
    v104[1] = *(unsigned char *)(v103 + v7 + 1);
    v104[2] = *(unsigned char *)(v103 + v7 + 2);
    unint64_t v105 = (v122 + v100) & v20;
    unint64_t v106 = (v122 + v103) & v20;
    v119(v105, v106, v123);
    uint64_t v107 = (unsigned char *)(v105 + v7);
    *uint64_t v107 = *(unsigned char *)(v106 + v7);
    v107[1] = *(unsigned char *)(v106 + v7 + 1);
    v107[2] = *(unsigned char *)(v106 + v7 + 2);
    unint64_t v108 = (v122 + v105) & v20;
    unint64_t v109 = (v122 + v106) & v20;
    v119(v108, v109, v123);
    long long v110 = (unsigned char *)(v108 + v7);
    *long long v110 = *(unsigned char *)(v109 + v7);
    v110[1] = *(unsigned char *)(v109 + v7 + 1);
    v110[2] = *(unsigned char *)(v109 + v7 + 2);
  }
  return v102;
}

uint64_t sub_1000D60E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  Swift::String v35 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v35(a1, v3);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v33 = v5 + 3 + v6;
  uint64_t v7 = (v33 + a1) & ~v6;
  v35(v7, v3);
  uint64_t v8 = (v33 + v7) & ~v6;
  v35(v8, v3);
  uint64_t v9 = (v33 + v8) & ~v6;
  v35(v9, v3);
  uint64_t v10 = (v6 | 3) + v5 + 3;
  uint64_t v11 = (v10 + v9) & ~(v6 | 3);
  v35(v11, v3);
  unint64_t v12 = (v5 & 0xFFFFFFFFFFFFFFFCLL) + 9;
  uint64_t v13 = v6 | 7;
  uint64_t v14 = ((v6 | 7) + v12 + v11) & ~(v6 | 7);
  uint64_t v15 = (v6 | 7) + 1;
  v35((v15 + v14) & ~(v6 | 7), v3);
  swift_bridgeObjectRelease();
  unint64_t v34 = (v5 & 0xFFFFFFFFFFFFFFF8) + 25;
  v35((v34 + v6 + (v15 & ~(v6 | 7)) + v14) & ~v6, v3);
  uint64_t v16 = (v33 + ((v34 + v6 + (v15 & ~(v6 | 7)) + v14) & ~v6)) & ~v6;
  v35(v16, v3);
  uint64_t v17 = (v10 + v16) & ~(v6 | 3);
  v35(v17, v3);
  unint64_t v18 = (v12 + v6 + v17) & ~v6;
  v35(v18, v3);
  unint64_t v19 = (v33 + v18) & ~v6;
  v35(v19, v3);
  uint64_t v20 = (v6 | 7) + v5 + 3;
  uint64_t v21 = (v13 + v5 + 3 + v19) & ~v13;
  v35(v21, v3);
  unint64_t v22 = (v5 & 0xFFFFFFFFFFFFFFF8) + 17;
  unint64_t v23 = (v13 + v22 + v21) & ~v13;
  v35(v23, v3);
  unint64_t v24 = (v22 + v6 + v23) & ~v6;
  v35(v24, v3);
  uint64_t v25 = (v20 + v24) & ~(v6 | 7);
  v35(v25, v3);
  sub_10000C970(*(void *)(((v25 + v5) & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(((v25 + v5) & 0xFFFFFFFFFFFFFFF8) + 16));
  unint64_t v26 = (v34 + v6 + v25) & ~v6;
  v35(v26, v3);
  uint64_t v27 = (v20 + v26) & ~(v6 | 7);
  v35(v27, v3);
  sub_10000C970(*(void *)(((v27 + v5) & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(((v27 + v5) & 0xFFFFFFFFFFFFFFF8) + 16));
  unint64_t v28 = (v13 + v34 + v27) & ~v13;
  v35(v28, v3);
  sub_10000C970(*(void *)(((v28 + v5) & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(((v28 + v5) & 0xFFFFFFFFFFFFFFF8) + 16));
  uint64_t v29 = ((v6 | 7) + v34 + v28) & ~(v6 | 7);
  v35((v6 + 8 + v29) & ~(v6 | 7), v3);
  uint64_t v30 = (v22 + v6 + ((v6 + 8) & ~(v6 | 7)) + v29) & ~v6;
  v35(v30, v3);
  uint64_t v31 = (v33 + v30) & ~v6;
  v35(v31, v3);

  return ((uint64_t (*)(uint64_t, uint64_t))v35)((v33 + v31) & ~v6, v3);
}

uint64_t sub_1000D64E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v6 + 64);
  uint64_t v113 = a1;
  uint64_t v10 = (unsigned char *)(v9 + a1);
  unsigned char *v10 = *(unsigned char *)(v9 + a2);
  v10[1] = *(unsigned char *)(v9 + a2 + 1);
  void v10[2] = *(unsigned char *)(v9 + a2 + 2);
  uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v12 = v9 + 3 + v11;
  uint64_t v13 = (v12 + a1) & ~v11;
  uint64_t v14 = (v12 + a2) & ~v11;
  uint64_t v15 = v8;
  v8(v13, v14, v5);
  uint64_t v16 = (unsigned char *)(v13 + v9);
  *uint64_t v16 = *(unsigned char *)(v14 + v9);
  v16[1] = *(unsigned char *)(v14 + v9 + 1);
  unsigned char v16[2] = *(unsigned char *)(v14 + v9 + 2);
  uint64_t v17 = (v12 + v13) & ~v11;
  uint64_t v18 = (v12 + v14) & ~v11;
  v15(v17, v18, v5);
  unint64_t v19 = (unsigned char *)(v17 + v9);
  *unint64_t v19 = *(unsigned char *)(v18 + v9);
  v19[1] = *(unsigned char *)(v18 + v9 + 1);
  v19[2] = *(unsigned char *)(v18 + v9 + 2);
  uint64_t v114 = v12;
  uint64_t v20 = (v12 + v17) & ~v11;
  uint64_t v21 = (v12 + v18) & ~v11;
  uint64_t v116 = v5;
  v15(v20, v21, v5);
  unint64_t v22 = v15;
  unint64_t v23 = (unsigned char *)(v20 + v9);
  *unint64_t v23 = *(unsigned char *)(v21 + v9);
  v23[1] = *(unsigned char *)(v21 + v9 + 1);
  void v23[2] = *(unsigned char *)(v21 + v9 + 2);
  uint64_t v110 = (v11 | 3) + v9 + 3;
  uint64_t v24 = (v110 + v20) & ~(v11 | 3);
  uint64_t v25 = (v110 + v21) & ~(v11 | 3);
  v15(v24, v25, v5);
  *(unsigned char *)(v24 + v9) = *(unsigned char *)(v25 + v9);
  unint64_t v26 = (v24 + v9) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v27 = (v25 + v9) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v26 + 4) = *(_DWORD *)(v27 + 4);
  *(unsigned char *)(v26 + 8) = *(unsigned char *)(v27 + 8);
  unint64_t v109 = (v9 & 0xFFFFFFFFFFFFFFFCLL) + 9;
  uint64_t v28 = v11 | 7;
  unint64_t v29 = (v11 | 7) + v109;
  uint64_t v30 = (unsigned char *)((v29 + v24) & ~(v11 | 7));
  uint64_t v31 = (unsigned char *)((v29 + v25) & ~(v11 | 7));
  *uint64_t v30 = *v31;
  uint64_t v32 = (v11 | 7) + 1;
  uint64_t v33 = (unint64_t)&v30[v32] & ~(v11 | 7);
  uint64_t v34 = (unint64_t)&v31[v32] & ~(v11 | 7);
  v22(v33, v34, v116);
  *(unsigned char *)(v33 + v9) = *(unsigned char *)(v34 + v9);
  unint64_t v35 = (v33 + v9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v36 = (v34 + v9) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v35 + 8) = *(void *)(v36 + 8);
  *(void *)(v35 + 16) = *(void *)(v36 + 16);
  *(unsigned char *)(v35 + 24) = *(unsigned char *)(v36 + 24);
  unint64_t v112 = (v9 & 0xFFFFFFFFFFFFFFF8) + 25;
  uint64_t v37 = v112 + v11 + (v32 & ~(v11 | 7));
  unint64_t v38 = (unint64_t)&v30[v37] & ~v11;
  unint64_t v39 = (unint64_t)&v31[v37] & ~v11;
  swift_bridgeObjectRetain();
  v22(v38, v39, v116);
  int v40 = (unsigned char *)(v38 + v9);
  unsigned char *v40 = *(unsigned char *)(v39 + v9);
  v40[1] = *(unsigned char *)(v39 + v9 + 1);
  v40[2] = *(unsigned char *)(v39 + v9 + 2);
  unint64_t v41 = (v114 + v38) & ~v11;
  uint64_t v42 = v9 + 3 + v11;
  unint64_t v43 = (v114 + v39) & ~v11;
  v22(v41, v43, v116);
  unint64_t v44 = (unsigned char *)(v41 + v9);
  *unint64_t v44 = *(unsigned char *)(v43 + v9);
  v44[1] = *(unsigned char *)(v43 + v9 + 1);
  v44[2] = *(unsigned char *)(v43 + v9 + 2);
  uint64_t v45 = (v110 + v41) & ~(v11 | 3);
  uint64_t v46 = (v110 + v43) & ~(v11 | 3);
  v22(v45, v46, v116);
  *(unsigned char *)(v45 + v9) = *(unsigned char *)(v46 + v9);
  unint64_t v47 = (v45 + v9) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v48 = (v46 + v9) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v47 + 4) = *(_DWORD *)(v48 + 4);
  *(unsigned char *)(v47 + 8) = *(unsigned char *)(v48 + 8);
  unint64_t v49 = (v109 + v11 + v45) & ~v11;
  unint64_t v50 = (v109 + v11 + v46) & ~v11;
  v22(v49, v50, v116);
  Swift::String v51 = (unsigned char *)(v49 + v9);
  *Swift::String v51 = *(unsigned char *)(v50 + v9);
  v51[1] = *(unsigned char *)(v50 + v9 + 1);
  v51[2] = *(unsigned char *)(v50 + v9 + 2);
  unint64_t v52 = (v42 + v49) & ~v11;
  unint64_t v53 = (v42 + v50) & ~v11;
  v22(v52, v53, v116);
  unint64_t v54 = (unsigned char *)(v52 + v9);
  *unint64_t v54 = *(unsigned char *)(v53 + v9);
  v54[1] = *(unsigned char *)(v53 + v9 + 1);
  v54[2] = *(unsigned char *)(v53 + v9 + 2);
  uint64_t v55 = (v11 | 7) + v9 + 3;
  uint64_t v56 = (v28 + v9 + 3 + v52) & ~v28;
  uint64_t v57 = (v28 + v9 + 3 + v53) & ~v28;
  v22(v56, v57, v116);
  *(unsigned char *)(v56 + v9) = *(unsigned char *)(v57 + v9);
  unint64_t v58 = (v56 + v9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v59 = (v57 + v9) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v58 + 8) = *(void *)(v59 + 8);
  *(unsigned char *)(v58 + 16) = *(unsigned char *)(v59 + 16);
  unint64_t v60 = (v9 & 0xFFFFFFFFFFFFFFF8) + 17;
  unint64_t v61 = (v11 | 7) + v60;
  uint64_t v62 = (v61 + v56) & ~(v11 | 7);
  uint64_t v63 = (v61 + v57) & ~(v11 | 7);
  v22(v62, v63, v116);
  *(unsigned char *)(v62 + v9) = *(unsigned char *)(v63 + v9);
  unint64_t v64 = (v62 + v9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v65 = (v63 + v9) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v64 + 8) = *(void *)(v65 + 8);
  *(unsigned char *)(v64 + 16) = *(unsigned char *)(v65 + 16);
  uint64_t v111 = v60 + v11;
  unint64_t v66 = (v60 + v11 + v62) & ~v11;
  unint64_t v67 = (v60 + v11 + v63) & ~v11;
  unint64_t v115 = (void (*)(unint64_t, unint64_t, uint64_t))v22;
  v22(v66, v67, v116);
  unint64_t v68 = (unsigned char *)(v66 + v9);
  *unint64_t v68 = *(unsigned char *)(v67 + v9);
  v68[1] = *(unsigned char *)(v67 + v9 + 1);
  v68[2] = *(unsigned char *)(v67 + v9 + 2);
  uint64_t v69 = (v55 + v66) & ~(v11 | 7);
  uint64_t v70 = (v55 + v67) & ~(v11 | 7);
  v22(v69, v70, v116);
  *(unsigned char *)(v69 + v9) = *(unsigned char *)(v70 + v9);
  unint64_t v71 = (v69 + v9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v72 = (v70 + v9) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v73 = *(void *)(v72 + 8);
  unint64_t v74 = *(void *)(v72 + 16);
  sub_100013D44(v73, v74);
  *(void *)(v71 + 8) = v73;
  *(void *)(v71 + 16) = v74;
  *(unsigned char *)(v71 + 24) = *(unsigned char *)(v72 + 24);
  unint64_t v75 = (v112 + v11 + v69) & ~v11;
  unint64_t v76 = (v112 + v11 + v70) & ~v11;
  v115(v75, v76, v116);
  uint64_t v77 = (unsigned char *)(v75 + v9);
  *uint64_t v77 = *(unsigned char *)(v76 + v9);
  v77[1] = *(unsigned char *)(v76 + v9 + 1);
  __int16 v77[2] = *(unsigned char *)(v76 + v9 + 2);
  uint64_t v78 = (v55 + v75) & ~(v11 | 7);
  uint64_t v79 = (v55 + v76) & ~(v11 | 7);
  v115(v78, v79, v116);
  *(unsigned char *)(v78 + v9) = *(unsigned char *)(v79 + v9);
  unint64_t v80 = (v78 + v9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v81 = (v79 + v9) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v82 = *(void *)(v81 + 8);
  unint64_t v83 = *(void *)(v81 + 16);
  sub_100013D44(v82, v83);
  *(void *)(v80 + 8) = v82;
  *(void *)(v80 + 16) = v83;
  *(unsigned char *)(v80 + 24) = *(unsigned char *)(v81 + 24);
  unint64_t v84 = (v11 | 7) + v112;
  unint64_t v85 = (v28 + v112 + v78) & ~v28;
  unint64_t v86 = (v28 + v112 + v79) & ~v28;
  v115(v85, v86, v116);
  *(unsigned char *)(v85 + v9) = *(unsigned char *)(v86 + v9);
  unint64_t v87 = (v85 + v9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v88 = (v86 + v9) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v89 = *(void *)(v88 + 8);
  unint64_t v90 = *(void *)(v88 + 16);
  sub_100013D44(v89, v90);
  *(void *)(v87 + 8) = v89;
  *(void *)(v87 + 16) = v90;
  *(unsigned char *)(v87 + 24) = *(unsigned char *)(v88 + 24);
  unint64_t v91 = (void *)((v84 + v85) & ~(v11 | 7));
  uint64_t v92 = (void *)((v84 + v86) & ~(v11 | 7));
  *unint64_t v91 = *v92;
  uint64_t v93 = ((unint64_t)v91 + v11 + 8) & ~(v11 | 7);
  uint64_t v94 = ((unint64_t)v92 + v11 + 8) & ~(v11 | 7);
  v115(((unint64_t)v91 + v11 + 8) & ~v28, ((unint64_t)v92 + v11 + 8) & ~v28, v116);
  *(unsigned char *)(v93 + v9) = *(unsigned char *)(v94 + v9);
  unint64_t v95 = (v93 + v9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v96 = (v94 + v9) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v95 + 8) = *(void *)(v96 + 8);
  *(unsigned char *)(v95 + 16) = *(unsigned char *)(v96 + 16);
  uint64_t v97 = v111 + ((v11 + 8) & ~(v11 | 7));
  unint64_t v98 = ((unint64_t)v91 + v97) & ~v11;
  unint64_t v99 = ((unint64_t)v92 + v97) & ~v11;
  v115(v98, v99, v116);
  unint64_t v100 = (unsigned char *)(v98 + v9);
  *unint64_t v100 = *(unsigned char *)(v99 + v9);
  v100[1] = *(unsigned char *)(v99 + v9 + 1);
  v100[2] = *(unsigned char *)(v99 + v9 + 2);
  unint64_t v101 = (v114 + v98) & ~v11;
  uint64_t v102 = v9 + 3 + v11;
  unint64_t v103 = (v114 + v99) & ~v11;
  v115(v101, v103, v116);
  unint64_t v104 = (unsigned char *)(v101 + v9);
  *unint64_t v104 = *(unsigned char *)(v103 + v9);
  v104[1] = *(unsigned char *)(v103 + v9 + 1);
  v104[2] = *(unsigned char *)(v103 + v9 + 2);
  unint64_t v105 = (v102 + v101) & ~v11;
  unint64_t v106 = (v102 + v103) & ~v11;
  v115(v105, v106, v116);
  uint64_t v107 = (unsigned char *)(v105 + v9);
  *uint64_t v107 = *(unsigned char *)(v106 + v9);
  v107[1] = *(unsigned char *)(v106 + v9 + 1);
  v107[2] = *(unsigned char *)(v106 + v9 + 2);
  return v113;
}

uint64_t sub_1000D6D10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(void))(v6 + 24);
  uint64_t v8 = v6 + 24;
  uint64_t v9 = v5;
  v7();
  uint64_t v10 = *(void *)(v8 + 40);
  uint64_t v119 = a1;
  uint64_t v11 = (unsigned char *)(v10 + a1);
  *uint64_t v11 = *(unsigned char *)(v10 + a2);
  v11[1] = *(unsigned char *)(v10 + a2 + 1);
  v11[2] = *(unsigned char *)(v10 + a2 + 2);
  uint64_t v12 = *(unsigned __int8 *)(v8 + 56);
  uint64_t v13 = v10 + 3 + v12;
  uint64_t v14 = (v13 + a1) & ~v12;
  uint64_t v15 = (v13 + a2) & ~v12;
  ((void (*)(uint64_t, uint64_t, uint64_t))v7)(v14, v15, v9);
  uint64_t v16 = (unsigned char *)(v14 + v10);
  *uint64_t v16 = *(unsigned char *)(v15 + v10);
  v16[1] = *(unsigned char *)(v15 + v10 + 1);
  unsigned char v16[2] = *(unsigned char *)(v15 + v10 + 2);
  uint64_t v17 = (v13 + v14) & ~v12;
  uint64_t v18 = (v13 + v15) & ~v12;
  ((void (*)(uint64_t, uint64_t, uint64_t))v7)(v17, v18, v9);
  unint64_t v19 = (unsigned char *)(v17 + v10);
  *unint64_t v19 = *(unsigned char *)(v18 + v10);
  v19[1] = *(unsigned char *)(v18 + v10 + 1);
  v19[2] = *(unsigned char *)(v18 + v10 + 2);
  uint64_t v120 = v13;
  uint64_t v20 = (v13 + v17) & ~v12;
  uint64_t v21 = (v13 + v18) & ~v12;
  ((void (*)(uint64_t, uint64_t, uint64_t))v7)(v20, v21, v9);
  unint64_t v22 = (unsigned char *)(v20 + v10);
  *unint64_t v22 = *(unsigned char *)(v21 + v10);
  v22[1] = *(unsigned char *)(v21 + v10 + 1);
  void v22[2] = *(unsigned char *)(v21 + v10 + 2);
  uint64_t v116 = (v12 | 3) + v10 + 3;
  uint64_t v23 = (v116 + v20) & ~(v12 | 3);
  uint64_t v24 = (v116 + v21) & ~(v12 | 3);
  uint64_t v25 = v9;
  uint64_t v122 = v9;
  ((void (*)(uint64_t, uint64_t, uint64_t))v7)(v23, v24, v9);
  *(unsigned char *)(v23 + v10) = *(unsigned char *)(v24 + v10);
  unint64_t v26 = (v23 + v10) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v27 = (v24 + v10) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v26 + 4) = *(_DWORD *)(v27 + 4);
  *(unsigned char *)(v26 + 8) = *(unsigned char *)(v27 + 8);
  unint64_t v115 = (v10 & 0xFFFFFFFFFFFFFFFCLL) + 9;
  uint64_t v28 = v12 | 7;
  unint64_t v29 = (v12 | 7) + v115;
  uint64_t v30 = (unsigned char *)((v29 + v23) & ~(v12 | 7));
  uint64_t v31 = (unsigned char *)((v29 + v24) & ~(v12 | 7));
  *uint64_t v30 = *v31;
  uint64_t v32 = (v12 | 7) + 1;
  uint64_t v33 = (unint64_t)&v30[v32] & ~(v12 | 7);
  uint64_t v34 = (unint64_t)&v31[v32] & ~(v12 | 7);
  ((void (*)(uint64_t, uint64_t, uint64_t))v7)(v33, v34, v25);
  uint64_t v35 = v34 + v10;
  *(unsigned char *)(v33 + v10) = *(unsigned char *)(v34 + v10);
  unint64_t v36 = (v33 + v10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v37 = v35 & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v36 + 8) = *(void *)((v35 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(void *)(v36 + 16) = *(void *)((v35 & 0xFFFFFFFFFFFFFFF8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v36 + 24) = *(unsigned char *)(v37 + 24);
  unint64_t v118 = (v10 & 0xFFFFFFFFFFFFFFF8) + 25;
  uint64_t v38 = v118 + v12 + (v32 & ~(v12 | 7));
  unint64_t v39 = (unint64_t)&v30[v38] & ~v12;
  unint64_t v40 = (unint64_t)&v31[v38] & ~v12;
  ((void (*)(unint64_t, unint64_t, uint64_t))v7)(v39, v40, v122);
  unint64_t v41 = (unsigned char *)(v39 + v10);
  *unint64_t v41 = *(unsigned char *)(v40 + v10);
  v41[1] = *(unsigned char *)(v40 + v10 + 1);
  v41[2] = *(unsigned char *)(v40 + v10 + 2);
  unint64_t v42 = (v120 + v39) & ~v12;
  unint64_t v43 = (v120 + v40) & ~v12;
  ((void (*)(unint64_t, unint64_t, uint64_t))v7)(v42, v43, v122);
  unint64_t v44 = (unsigned char *)(v42 + v10);
  *unint64_t v44 = *(unsigned char *)(v43 + v10);
  v44[1] = *(unsigned char *)(v43 + v10 + 1);
  v44[2] = *(unsigned char *)(v43 + v10 + 2);
  uint64_t v45 = (v116 + v42) & ~(v12 | 3);
  uint64_t v46 = (v116 + v43) & ~(v12 | 3);
  ((void (*)(uint64_t, uint64_t, uint64_t))v7)(v45, v46, v122);
  *(unsigned char *)(v45 + v10) = *(unsigned char *)(v46 + v10);
  unint64_t v47 = (v45 + v10) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v48 = (v46 + v10) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v47 + 4) = *(_DWORD *)(v48 + 4);
  *(unsigned char *)(v47 + 8) = *(unsigned char *)(v48 + 8);
  unint64_t v49 = (v115 + v12 + v45) & ~v12;
  unint64_t v50 = (v115 + v12 + v46) & ~v12;
  ((void (*)(unint64_t, unint64_t, uint64_t))v7)(v49, v50, v122);
  Swift::String v51 = (unsigned char *)(v49 + v10);
  *Swift::String v51 = *(unsigned char *)(v50 + v10);
  v51[1] = *(unsigned char *)(v50 + v10 + 1);
  v51[2] = *(unsigned char *)(v50 + v10 + 2);
  unint64_t v52 = (v120 + v49) & ~v12;
  unint64_t v53 = (v120 + v50) & ~v12;
  ((void (*)(unint64_t, unint64_t, uint64_t))v7)(v52, v53, v122);
  unint64_t v54 = (unsigned char *)(v52 + v10);
  *unint64_t v54 = *(unsigned char *)(v53 + v10);
  v54[1] = *(unsigned char *)(v53 + v10 + 1);
  v54[2] = *(unsigned char *)(v53 + v10 + 2);
  uint64_t v55 = (v12 | 7) + v10 + 3;
  uint64_t v56 = (v28 + v10 + 3 + v52) & ~v28;
  uint64_t v57 = (v28 + v10 + 3 + v53) & ~v28;
  ((void (*)(uint64_t, uint64_t, uint64_t))v7)(v56, v57, v122);
  *(unsigned char *)(v56 + v10) = *(unsigned char *)(v57 + v10);
  unint64_t v58 = (v56 + v10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v59 = (v57 + v10) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v58 + 8) = *(void *)(v59 + 8);
  *(unsigned char *)(v58 + 16) = *(unsigned char *)(v59 + 16);
  unint64_t v60 = (v10 & 0xFFFFFFFFFFFFFFF8) + 17;
  unint64_t v61 = (v12 | 7) + v60;
  uint64_t v62 = (v61 + v56) & ~(v12 | 7);
  uint64_t v63 = (v61 + v57) & ~(v12 | 7);
  ((void (*)(uint64_t, uint64_t, uint64_t))v7)(v62, v63, v122);
  *(unsigned char *)(v62 + v10) = *(unsigned char *)(v63 + v10);
  unint64_t v64 = (v62 + v10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v65 = (v63 + v10) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v64 + 8) = *(void *)(v65 + 8);
  *(unsigned char *)(v64 + 16) = *(unsigned char *)(v65 + 16);
  uint64_t v117 = v60 + v12;
  unint64_t v66 = (v60 + v12 + v62) & ~v12;
  unint64_t v67 = (v60 + v12 + v63) & ~v12;
  uint64_t v121 = v7;
  ((void (*)(unint64_t, unint64_t, uint64_t))v7)(v66, v67, v122);
  unint64_t v68 = (unsigned char *)(v66 + v10);
  *unint64_t v68 = *(unsigned char *)(v67 + v10);
  v68[1] = *(unsigned char *)(v67 + v10 + 1);
  v68[2] = *(unsigned char *)(v67 + v10 + 2);
  uint64_t v69 = (v55 + v66) & ~(v12 | 7);
  uint64_t v70 = (v55 + v67) & ~(v12 | 7);
  ((void (*)(uint64_t, uint64_t, uint64_t))v7)(v69, v70, v122);
  *(unsigned char *)(v69 + v10) = *(unsigned char *)(v70 + v10);
  unint64_t v71 = (v69 + v10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v72 = (v70 + v10) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v73 = *(void *)(v72 + 8);
  unint64_t v74 = *(void *)(v72 + 16);
  sub_100013D44(v73, v74);
  uint64_t v75 = *(void *)(v71 + 8);
  unint64_t v76 = *(void *)(v71 + 16);
  *(void *)(v71 + 8) = v73;
  *(void *)(v71 + 16) = v74;
  sub_10000C970(v75, v76);
  *(unsigned char *)(v71 + 24) = *(unsigned char *)(v72 + 24);
  unint64_t v77 = (v118 + v12 + v69) & ~v12;
  unint64_t v78 = (v118 + v12 + v70) & ~v12;
  ((void (*)(unint64_t, unint64_t, uint64_t))v121)(v77, v78, v122);
  uint64_t v79 = (unsigned char *)(v77 + v10);
  *uint64_t v79 = *(unsigned char *)(v78 + v10);
  v79[1] = *(unsigned char *)(v78 + v10 + 1);
  v79[2] = *(unsigned char *)(v78 + v10 + 2);
  uint64_t v80 = (v55 + v77) & ~(v12 | 7);
  uint64_t v81 = (v55 + v78) & ~(v12 | 7);
  ((void (*)(uint64_t, uint64_t, uint64_t))v121)(v80, v81, v122);
  *(unsigned char *)(v80 + v10) = *(unsigned char *)(v81 + v10);
  unint64_t v82 = (v80 + v10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v83 = (v81 + v10) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v84 = *(void *)(v83 + 8);
  unint64_t v85 = *(void *)(v83 + 16);
  sub_100013D44(v84, v85);
  uint64_t v86 = *(void *)(v82 + 8);
  unint64_t v87 = *(void *)(v82 + 16);
  *(void *)(v82 + 8) = v84;
  *(void *)(v82 + 16) = v85;
  sub_10000C970(v86, v87);
  *(unsigned char *)(v82 + 24) = *(unsigned char *)(v83 + 24);
  unint64_t v88 = (v12 | 7) + v118;
  unint64_t v89 = (v28 + v118 + v80) & ~v28;
  unint64_t v90 = (v28 + v118 + v81) & ~v28;
  ((void (*)(unint64_t, unint64_t, uint64_t))v121)(v89, v90, v122);
  *(unsigned char *)(v89 + v10) = *(unsigned char *)(v90 + v10);
  unint64_t v91 = (v89 + v10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v92 = (v90 + v10) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v93 = *(void *)(v92 + 8);
  unint64_t v94 = *(void *)(v92 + 16);
  sub_100013D44(v93, v94);
  uint64_t v95 = *(void *)(v91 + 8);
  unint64_t v96 = *(void *)(v91 + 16);
  *(void *)(v91 + 8) = v93;
  *(void *)(v91 + 16) = v94;
  sub_10000C970(v95, v96);
  *(unsigned char *)(v91 + 24) = *(unsigned char *)(v92 + 24);
  uint64_t v97 = (void *)((v88 + v89) & ~(v12 | 7));
  unint64_t v98 = (void *)((v88 + v90) & ~(v12 | 7));
  void *v97 = *v98;
  uint64_t v99 = ((unint64_t)v97 + v12 + 8) & ~(v12 | 7);
  uint64_t v100 = ((unint64_t)v98 + v12 + 8) & ~(v12 | 7);
  ((void (*)(unint64_t, unint64_t, uint64_t))v121)(((unint64_t)v97 + v12 + 8) & ~v28, ((unint64_t)v98 + v12 + 8) & ~v28, v122);
  *(unsigned char *)(v99 + v10) = *(unsigned char *)(v100 + v10);
  unint64_t v101 = (v99 + v10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v102 = (v100 + v10) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v101 + 8) = *(void *)(v102 + 8);
  *(unsigned char *)(v101 + 16) = *(unsigned char *)(v102 + 16);
  uint64_t v103 = v117 + ((v12 + 8) & ~(v12 | 7));
  unint64_t v104 = ((unint64_t)v97 + v103) & ~v12;
  unint64_t v105 = ((unint64_t)v98 + v103) & ~v12;
  ((void (*)(unint64_t, unint64_t, uint64_t))v121)(v104, v105, v122);
  unint64_t v106 = (unsigned char *)(v104 + v10);
  *unint64_t v106 = *(unsigned char *)(v105 + v10);
  v106[1] = *(unsigned char *)(v105 + v10 + 1);
  v106[2] = *(unsigned char *)(v105 + v10 + 2);
  unint64_t v107 = (v120 + v104) & ~v12;
  uint64_t v108 = v10 + 3 + v12;
  unint64_t v109 = (v120 + v105) & ~v12;
  ((void (*)(unint64_t, unint64_t, uint64_t))v121)(v107, v109, v122);
  uint64_t v110 = (unsigned char *)(v107 + v10);
  *uint64_t v110 = *(unsigned char *)(v109 + v10);
  v110[1] = *(unsigned char *)(v109 + v10 + 1);
  v110[2] = *(unsigned char *)(v109 + v10 + 2);
  unint64_t v111 = (v108 + v107) & ~v12;
  unint64_t v112 = (v108 + v109) & ~v12;
  ((void (*)(unint64_t, unint64_t, uint64_t))v121)(v111, v112, v122);
  uint64_t v113 = (unsigned char *)(v111 + v10);
  *uint64_t v113 = *(unsigned char *)(v112 + v10);
  v113[1] = *(unsigned char *)(v112 + v10 + 1);
  v113[2] = *(unsigned char *)(v112 + v10 + 2);
  return v119;
}

uint64_t sub_1000D7558(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v6 + 64);
  uint64_t v105 = a1;
  uint64_t v10 = (unsigned char *)(v9 + a1);
  unsigned char *v10 = *(unsigned char *)(v9 + a2);
  v10[1] = *(unsigned char *)(v9 + a2 + 1);
  void v10[2] = *(unsigned char *)(v9 + a2 + 2);
  uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v12 = v9 + 3 + v11;
  uint64_t v13 = (v12 + a1) & ~v11;
  uint64_t v14 = (v12 + a2) & ~v11;
  uint64_t v15 = v8;
  v8(v13, v14, v5);
  uint64_t v16 = (unsigned char *)(v13 + v9);
  *uint64_t v16 = *(unsigned char *)(v14 + v9);
  v16[1] = *(unsigned char *)(v14 + v9 + 1);
  unsigned char v16[2] = *(unsigned char *)(v14 + v9 + 2);
  uint64_t v17 = (v12 + v13) & ~v11;
  uint64_t v18 = (v12 + v14) & ~v11;
  v15(v17, v18, v5);
  unint64_t v19 = (unsigned char *)(v17 + v9);
  *unint64_t v19 = *(unsigned char *)(v18 + v9);
  v19[1] = *(unsigned char *)(v18 + v9 + 1);
  v19[2] = *(unsigned char *)(v18 + v9 + 2);
  uint64_t v20 = (v12 + v17) & ~v11;
  uint64_t v21 = (v12 + v18) & ~v11;
  v15(v20, v21, v5);
  unint64_t v106 = v15;
  unint64_t v22 = (unsigned char *)(v20 + v9);
  *unint64_t v22 = *(unsigned char *)(v21 + v9);
  v22[1] = *(unsigned char *)(v21 + v9 + 1);
  void v22[2] = *(unsigned char *)(v21 + v9 + 2);
  uint64_t v102 = (v11 | 3) + v9 + 3;
  uint64_t v23 = (v102 + v20) & ~(v11 | 3);
  uint64_t v24 = (v102 + v21) & ~(v11 | 3);
  uint64_t v25 = v5;
  v15(v23, v24, v5);
  *(unsigned char *)(v23 + v9) = *(unsigned char *)(v24 + v9);
  unint64_t v26 = (v23 + v9) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v27 = (v24 + v9) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v26 + 4) = *(_DWORD *)(v27 + 4);
  *(unsigned char *)(v26 + 8) = *(unsigned char *)(v27 + 8);
  unint64_t v101 = (v9 & 0xFFFFFFFFFFFFFFFCLL) + 9;
  uint64_t v28 = v11 | 7;
  unint64_t v29 = (v11 | 7) + v101;
  uint64_t v30 = (unsigned char *)((v29 + v23) & ~(v11 | 7));
  uint64_t v31 = (unsigned char *)((v29 + v24) & ~(v11 | 7));
  *uint64_t v30 = *v31;
  uint64_t v32 = (v11 | 7) + 1;
  uint64_t v33 = (unint64_t)&v30[v32] & ~(v11 | 7);
  uint64_t v34 = (unint64_t)&v31[v32] & ~(v11 | 7);
  v106(v33, v34, v25);
  *(unsigned char *)(v33 + v9) = *(unsigned char *)(v34 + v9);
  unint64_t v35 = (v33 + v9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v36 = (v34 + v9) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)(v35 + 8) = *(_OWORD *)(v36 + 8);
  *(unsigned char *)(v35 + 24) = *(unsigned char *)(v36 + 24);
  unint64_t v104 = (v9 & 0xFFFFFFFFFFFFFFF8) + 25;
  uint64_t v37 = v104 + v11 + (v32 & ~(v11 | 7));
  unint64_t v38 = (unint64_t)&v30[v37] & ~v11;
  unint64_t v39 = (unint64_t)&v31[v37] & ~v11;
  v106(v38, v39, v25);
  unint64_t v40 = (unsigned char *)(v38 + v9);
  unsigned char *v40 = *(unsigned char *)(v39 + v9);
  v40[1] = *(unsigned char *)(v39 + v9 + 1);
  v40[2] = *(unsigned char *)(v39 + v9 + 2);
  unint64_t v41 = (v12 + v38) & ~v11;
  unint64_t v42 = (v12 + v39) & ~v11;
  v106(v41, v42, v25);
  unint64_t v43 = (unsigned char *)(v41 + v9);
  *unint64_t v43 = *(unsigned char *)(v42 + v9);
  v43[1] = *(unsigned char *)(v42 + v9 + 1);
  v43[2] = *(unsigned char *)(v42 + v9 + 2);
  uint64_t v44 = (v102 + v41) & ~(v11 | 3);
  uint64_t v45 = (v102 + v42) & ~(v11 | 3);
  v106(v44, v45, v25);
  *(unsigned char *)(v44 + v9) = *(unsigned char *)(v45 + v9);
  unint64_t v46 = (v44 + v9) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v47 = (v45 + v9) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v46 + 4) = *(_DWORD *)(v47 + 4);
  *(unsigned char *)(v46 + 8) = *(unsigned char *)(v47 + 8);
  unint64_t v48 = (v101 + v11 + v44) & ~v11;
  unint64_t v49 = (v101 + v11 + v45) & ~v11;
  v106(v48, v49, v25);
  unint64_t v50 = (unsigned char *)(v48 + v9);
  *unint64_t v50 = *(unsigned char *)(v49 + v9);
  v50[1] = *(unsigned char *)(v49 + v9 + 1);
  v50[2] = *(unsigned char *)(v49 + v9 + 2);
  unint64_t v51 = (v12 + v48) & ~v11;
  unint64_t v52 = (v12 + v49) & ~v11;
  v106(v51, v52, v25);
  unint64_t v53 = (unsigned char *)(v51 + v9);
  *unint64_t v53 = *(unsigned char *)(v52 + v9);
  v53[1] = *(unsigned char *)(v52 + v9 + 1);
  v53[2] = *(unsigned char *)(v52 + v9 + 2);
  uint64_t v54 = (v11 | 7) + v9 + 3;
  uint64_t v55 = (v28 + v9 + 3 + v51) & ~v28;
  uint64_t v56 = (v28 + v9 + 3 + v52) & ~v28;
  v106(v55, v56, v25);
  *(unsigned char *)(v55 + v9) = *(unsigned char *)(v56 + v9);
  unint64_t v57 = (v55 + v9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v58 = (v56 + v9) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v57 + 8) = *(void *)(v58 + 8);
  *(unsigned char *)(v57 + 16) = *(unsigned char *)(v58 + 16);
  unint64_t v59 = (v9 & 0xFFFFFFFFFFFFFFF8) + 17;
  unint64_t v60 = (v11 | 7) + v59;
  uint64_t v61 = (v60 + v55) & ~(v11 | 7);
  uint64_t v62 = (v60 + v56) & ~(v11 | 7);
  v106(v61, v62, v25);
  *(unsigned char *)(v61 + v9) = *(unsigned char *)(v62 + v9);
  unint64_t v63 = (v61 + v9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v64 = (v62 + v9) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v63 + 8) = *(void *)(v64 + 8);
  *(unsigned char *)(v63 + 16) = *(unsigned char *)(v64 + 16);
  uint64_t v103 = v59 + v11;
  unint64_t v65 = (v59 + v11 + v61) & ~v11;
  unint64_t v66 = (v59 + v11 + v62) & ~v11;
  v106(v65, v66, v25);
  unint64_t v67 = (unsigned char *)(v65 + v9);
  *unint64_t v67 = *(unsigned char *)(v66 + v9);
  v67[1] = *(unsigned char *)(v66 + v9 + 1);
  v67[2] = *(unsigned char *)(v66 + v9 + 2);
  uint64_t v68 = (v54 + v65) & ~(v11 | 7);
  uint64_t v69 = (v54 + v66) & ~(v11 | 7);
  v106(v68, v69, v25);
  *(unsigned char *)(v68 + v9) = *(unsigned char *)(v69 + v9);
  unint64_t v70 = (v68 + v9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v71 = (v69 + v9) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)(v70 + 8) = *(_OWORD *)(v71 + 8);
  *(unsigned char *)(v70 + 24) = *(unsigned char *)(v71 + 24);
  unint64_t v72 = (v104 + v11 + v68) & ~v11;
  unint64_t v73 = (v104 + v11 + v69) & ~v11;
  v106(v72, v73, v25);
  unint64_t v74 = (unsigned char *)(v72 + v9);
  *unint64_t v74 = *(unsigned char *)(v73 + v9);
  v74[1] = *(unsigned char *)(v73 + v9 + 1);
  v74[2] = *(unsigned char *)(v73 + v9 + 2);
  uint64_t v75 = (v54 + v72) & ~(v11 | 7);
  uint64_t v76 = (v54 + v73) & ~(v11 | 7);
  v106(v75, v76, v25);
  *(unsigned char *)(v75 + v9) = *(unsigned char *)(v76 + v9);
  unint64_t v77 = (v75 + v9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v78 = (v76 + v9) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)(v77 + 8) = *(_OWORD *)(v78 + 8);
  *(unsigned char *)(v77 + 24) = *(unsigned char *)(v78 + 24);
  unint64_t v79 = (v11 | 7) + v104;
  unint64_t v80 = (v28 + v104 + v75) & ~v28;
  unint64_t v81 = (v28 + v104 + v76) & ~v28;
  v106(v80, v81, v25);
  *(unsigned char *)(v80 + v9) = *(unsigned char *)(v81 + v9);
  unint64_t v82 = (v80 + v9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v83 = (v81 + v9) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)(v82 + 8) = *(_OWORD *)(v83 + 8);
  *(unsigned char *)(v82 + 24) = *(unsigned char *)(v83 + 24);
  uint64_t v84 = (void *)((v79 + v80) & ~(v11 | 7));
  unint64_t v85 = (void *)((v79 + v81) & ~(v11 | 7));
  *uint64_t v84 = *v85;
  uint64_t v86 = ((unint64_t)v84 + v11 + 8) & ~(v11 | 7);
  uint64_t v87 = ((unint64_t)v85 + v11 + 8) & ~(v11 | 7);
  v106(((unint64_t)v84 + v11 + 8) & ~v28, ((unint64_t)v85 + v11 + 8) & ~v28, v25);
  *(unsigned char *)(v86 + v9) = *(unsigned char *)(v87 + v9);
  unint64_t v88 = (v86 + v9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v89 = (v87 + v9) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v88 + 8) = *(void *)(v89 + 8);
  *(unsigned char *)(v88 + 16) = *(unsigned char *)(v89 + 16);
  uint64_t v90 = v103 + ((v11 + 8) & ~(v11 | 7));
  unint64_t v91 = ((unint64_t)v84 + v90) & ~v11;
  unint64_t v92 = ((unint64_t)v85 + v90) & ~v11;
  v106(v91, v92, v25);
  uint64_t v93 = (unsigned char *)(v91 + v9);
  unsigned char *v93 = *(unsigned char *)(v92 + v9);
  v93[1] = *(unsigned char *)(v92 + v9 + 1);
  v93[2] = *(unsigned char *)(v92 + v9 + 2);
  unint64_t v94 = (v12 + v91) & ~v11;
  unint64_t v95 = (v12 + v92) & ~v11;
  v106(v94, v95, v25);
  unint64_t v96 = (unsigned char *)(v94 + v9);
  unsigned char *v96 = *(unsigned char *)(v95 + v9);
  v96[1] = *(unsigned char *)(v95 + v9 + 1);
  v96[2] = *(unsigned char *)(v95 + v9 + 2);
  unint64_t v97 = (v12 + v94) & ~v11;
  unint64_t v98 = (v12 + v95) & ~v11;
  v106(v97, v98, v25);
  uint64_t v99 = (unsigned char *)(v97 + v9);
  *uint64_t v99 = *(unsigned char *)(v98 + v9);
  v99[1] = *(unsigned char *)(v98 + v9 + 1);
  v99[2] = *(unsigned char *)(v98 + v9 + 2);
  return v105;
}

uint64_t sub_1000D7D64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v6 + 64);
  uint64_t v111 = a1;
  uint64_t v10 = (unsigned char *)(v9 + a1);
  unsigned char *v10 = *(unsigned char *)(v9 + a2);
  v10[1] = *(unsigned char *)(v9 + a2 + 1);
  void v10[2] = *(unsigned char *)(v9 + a2 + 2);
  uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v12 = v9 + 3 + v11;
  uint64_t v13 = (v12 + a1) & ~v11;
  uint64_t v14 = (v12 + a2) & ~v11;
  uint64_t v15 = v8;
  v8(v13, v14, v5);
  uint64_t v16 = (unsigned char *)(v13 + v9);
  *uint64_t v16 = *(unsigned char *)(v14 + v9);
  v16[1] = *(unsigned char *)(v14 + v9 + 1);
  unsigned char v16[2] = *(unsigned char *)(v14 + v9 + 2);
  uint64_t v17 = (v12 + v13) & ~v11;
  uint64_t v18 = (v12 + v14) & ~v11;
  v15(v17, v18, v5);
  unint64_t v19 = (unsigned char *)(v17 + v9);
  *unint64_t v19 = *(unsigned char *)(v18 + v9);
  v19[1] = *(unsigned char *)(v18 + v9 + 1);
  v19[2] = *(unsigned char *)(v18 + v9 + 2);
  uint64_t v112 = v5;
  uint64_t v20 = (v12 + v17) & ~v11;
  uint64_t v21 = (v12 + v18) & ~v11;
  v15(v20, v21, v5);
  unint64_t v22 = (unsigned char *)(v20 + v9);
  *unint64_t v22 = *(unsigned char *)(v21 + v9);
  v22[1] = *(unsigned char *)(v21 + v9 + 1);
  void v22[2] = *(unsigned char *)(v21 + v9 + 2);
  uint64_t v108 = (v11 | 3) + v9 + 3;
  uint64_t v23 = (v108 + v20) & ~(v11 | 3);
  uint64_t v24 = (v108 + v21) & ~(v11 | 3);
  v15(v23, v24, v5);
  uint64_t v25 = v15;
  *(unsigned char *)(v23 + v9) = *(unsigned char *)(v24 + v9);
  unint64_t v26 = (v23 + v9) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v27 = (v24 + v9) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v26 + 4) = *(_DWORD *)(v27 + 4);
  *(unsigned char *)(v26 + 8) = *(unsigned char *)(v27 + 8);
  unint64_t v107 = (v9 & 0xFFFFFFFFFFFFFFFCLL) + 9;
  uint64_t v28 = v11 | 7;
  unint64_t v29 = (v11 | 7) + v107;
  uint64_t v30 = (unsigned char *)((v29 + v23) & ~(v11 | 7));
  uint64_t v31 = (unsigned char *)((v29 + v24) & ~(v11 | 7));
  *uint64_t v30 = *v31;
  uint64_t v32 = (v11 | 7) + 1;
  uint64_t v33 = (unint64_t)&v30[v32] & ~(v11 | 7);
  uint64_t v34 = (unint64_t)&v31[v32] & ~(v11 | 7);
  v25(v33, v34, v112);
  *(unsigned char *)(v33 + v9) = *(unsigned char *)(v34 + v9);
  unint64_t v35 = (v33 + v9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v36 = (v34 + v9) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v35 + 8) = *(void *)(v36 + 8);
  *(void *)(v35 + 16) = *(void *)(v36 + 16);
  swift_bridgeObjectRelease();
  *(unsigned char *)(v35 + 24) = *(unsigned char *)(v36 + 24);
  unint64_t v110 = (v9 & 0xFFFFFFFFFFFFFFF8) + 25;
  uint64_t v37 = v110 + v11 + (v32 & ~(v11 | 7));
  unint64_t v38 = (unint64_t)&v30[v37] & ~v11;
  unint64_t v39 = (unint64_t)&v31[v37] & ~v11;
  v25(v38, v39, v112);
  unint64_t v40 = (unsigned char *)(v38 + v9);
  unsigned char *v40 = *(unsigned char *)(v39 + v9);
  v40[1] = *(unsigned char *)(v39 + v9 + 1);
  v40[2] = *(unsigned char *)(v39 + v9 + 2);
  unint64_t v41 = (v12 + v38) & ~v11;
  unint64_t v42 = (v12 + v39) & ~v11;
  v25(v41, v42, v112);
  unint64_t v43 = (unsigned char *)(v41 + v9);
  *unint64_t v43 = *(unsigned char *)(v42 + v9);
  v43[1] = *(unsigned char *)(v42 + v9 + 1);
  v43[2] = *(unsigned char *)(v42 + v9 + 2);
  uint64_t v44 = (v108 + v41) & ~(v11 | 3);
  uint64_t v45 = (v108 + v42) & ~(v11 | 3);
  v25(v44, v45, v112);
  *(unsigned char *)(v44 + v9) = *(unsigned char *)(v45 + v9);
  unint64_t v46 = (v44 + v9) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v47 = (v45 + v9) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v46 + 4) = *(_DWORD *)(v47 + 4);
  *(unsigned char *)(v46 + 8) = *(unsigned char *)(v47 + 8);
  unint64_t v48 = (v107 + v11 + v44) & ~v11;
  unint64_t v49 = (v107 + v11 + v45) & ~v11;
  v25(v48, v49, v112);
  unint64_t v50 = (unsigned char *)(v48 + v9);
  *unint64_t v50 = *(unsigned char *)(v49 + v9);
  v50[1] = *(unsigned char *)(v49 + v9 + 1);
  v50[2] = *(unsigned char *)(v49 + v9 + 2);
  unint64_t v51 = (v12 + v48) & ~v11;
  unint64_t v52 = (v12 + v49) & ~v11;
  v25(v51, v52, v112);
  unint64_t v53 = (unsigned char *)(v51 + v9);
  *unint64_t v53 = *(unsigned char *)(v52 + v9);
  v53[1] = *(unsigned char *)(v52 + v9 + 1);
  v53[2] = *(unsigned char *)(v52 + v9 + 2);
  uint64_t v54 = (v11 | 7) + v9 + 3;
  uint64_t v55 = (v28 + v9 + 3 + v51) & ~v28;
  uint64_t v56 = (v28 + v9 + 3 + v52) & ~v28;
  v25(v55, v56, v112);
  *(unsigned char *)(v55 + v9) = *(unsigned char *)(v56 + v9);
  unint64_t v57 = (v55 + v9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v58 = (v56 + v9) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v57 + 8) = *(void *)(v58 + 8);
  *(unsigned char *)(v57 + 16) = *(unsigned char *)(v58 + 16);
  unint64_t v59 = (v9 & 0xFFFFFFFFFFFFFFF8) + 17;
  unint64_t v60 = (v11 | 7) + v59;
  uint64_t v61 = (v60 + v55) & ~(v11 | 7);
  uint64_t v62 = (v60 + v56) & ~(v11 | 7);
  v25(v61, v62, v112);
  *(unsigned char *)(v61 + v9) = *(unsigned char *)(v62 + v9);
  unint64_t v63 = (v61 + v9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v64 = (v62 + v9) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v63 + 8) = *(void *)(v64 + 8);
  *(unsigned char *)(v63 + 16) = *(unsigned char *)(v64 + 16);
  uint64_t v109 = v59 + v11;
  unint64_t v65 = (v59 + v11 + v61) & ~v11;
  unint64_t v66 = (v59 + v11 + v62) & ~v11;
  v25(v65, v66, v112);
  unint64_t v67 = (unsigned char *)(v65 + v9);
  *unint64_t v67 = *(unsigned char *)(v66 + v9);
  v67[1] = *(unsigned char *)(v66 + v9 + 1);
  v67[2] = *(unsigned char *)(v66 + v9 + 2);
  uint64_t v68 = (v54 + v65) & ~(v11 | 7);
  uint64_t v69 = (v54 + v66) & ~(v11 | 7);
  v25(v68, v69, v112);
  *(unsigned char *)(v68 + v9) = *(unsigned char *)(v69 + v9);
  unint64_t v70 = (v68 + v9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v71 = (v69 + v9) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v72 = *(void *)(v70 + 8);
  unint64_t v73 = *(void *)(v70 + 16);
  *(_OWORD *)(v70 + 8) = *(_OWORD *)(v71 + 8);
  sub_10000C970(v72, v73);
  *(unsigned char *)(v70 + 24) = *(unsigned char *)(v71 + 24);
  unint64_t v74 = (v110 + v11 + v68) & ~v11;
  unint64_t v75 = (v110 + v11 + v69) & ~v11;
  v25(v74, v75, v112);
  uint64_t v76 = (unsigned char *)(v74 + v9);
  unsigned char *v76 = *(unsigned char *)(v75 + v9);
  v76[1] = *(unsigned char *)(v75 + v9 + 1);
  v76[2] = *(unsigned char *)(v75 + v9 + 2);
  uint64_t v77 = (v54 + v74) & ~(v11 | 7);
  uint64_t v78 = (v54 + v75) & ~(v11 | 7);
  v25(v77, v78, v112);
  *(unsigned char *)(v77 + v9) = *(unsigned char *)(v78 + v9);
  unint64_t v79 = (v77 + v9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v80 = (v78 + v9) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v81 = *(void *)(v79 + 8);
  unint64_t v82 = *(void *)(v79 + 16);
  *(_OWORD *)(v79 + 8) = *(_OWORD *)(v80 + 8);
  sub_10000C970(v81, v82);
  *(unsigned char *)(v79 + 24) = *(unsigned char *)(v80 + 24);
  unint64_t v83 = (v11 | 7) + v110;
  unint64_t v84 = (v28 + v110 + v77) & ~v28;
  unint64_t v85 = (v28 + v110 + v78) & ~v28;
  v25(v84, v85, v112);
  *(unsigned char *)(v84 + v9) = *(unsigned char *)(v85 + v9);
  unint64_t v86 = (v84 + v9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v87 = (v85 + v9) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v88 = *(void *)(v86 + 8);
  unint64_t v89 = *(void *)(v86 + 16);
  *(_OWORD *)(v86 + 8) = *(_OWORD *)(v87 + 8);
  sub_10000C970(v88, v89);
  *(unsigned char *)(v86 + 24) = *(unsigned char *)(v87 + 24);
  uint64_t v90 = (void *)((v83 + v84) & ~(v11 | 7));
  unint64_t v91 = (void *)((v83 + v85) & ~(v11 | 7));
  *uint64_t v90 = *v91;
  uint64_t v92 = ((unint64_t)v90 + v11 + 8) & ~(v11 | 7);
  uint64_t v93 = ((unint64_t)v91 + v11 + 8) & ~(v11 | 7);
  v25(((unint64_t)v90 + v11 + 8) & ~v28, ((unint64_t)v91 + v11 + 8) & ~v28, v112);
  *(unsigned char *)(v92 + v9) = *(unsigned char *)(v93 + v9);
  unint64_t v94 = (v92 + v9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v95 = (v93 + v9) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v94 + 8) = *(void *)(v95 + 8);
  *(unsigned char *)(v94 + 16) = *(unsigned char *)(v95 + 16);
  uint64_t v96 = v109 + ((v11 + 8) & ~(v11 | 7));
  unint64_t v97 = ((unint64_t)v90 + v96) & ~v11;
  unint64_t v98 = ((unint64_t)v91 + v96) & ~v11;
  v25(v97, v98, v112);
  uint64_t v99 = (unsigned char *)(v97 + v9);
  *uint64_t v99 = *(unsigned char *)(v98 + v9);
  v99[1] = *(unsigned char *)(v98 + v9 + 1);
  v99[2] = *(unsigned char *)(v98 + v9 + 2);
  unint64_t v100 = (v12 + v97) & ~v11;
  unint64_t v101 = (v12 + v98) & ~v11;
  v25(v100, v101, v112);
  uint64_t v102 = (unsigned char *)(v100 + v9);
  *uint64_t v102 = *(unsigned char *)(v101 + v9);
  v102[1] = *(unsigned char *)(v101 + v9 + 1);
  v102[2] = *(unsigned char *)(v101 + v9 + 2);
  unint64_t v103 = (v12 + v100) & ~v11;
  unint64_t v104 = (v12 + v101) & ~v11;
  v25(v103, v104, v112);
  uint64_t v105 = (unsigned char *)(v103 + v9);
  *uint64_t v105 = *(unsigned char *)(v104 + v9);
  v105[1] = *(unsigned char *)(v104 + v9 + 1);
  v105[2] = *(unsigned char *)(v104 + v9 + 2);
  return v111;
}

uint64_t sub_1000D8584(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (v8 <= v7) {
    unsigned int v10 = v7;
  }
  else {
    unsigned int v10 = v8;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v12 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = v9 + 3 + v12;
  uint64_t v14 = v12 | 3;
  uint64_t v15 = (v12 | 3) + v9 + 3;
  unint64_t v16 = (v9 & 0xFFFFFFFFFFFFFFFCLL) + 9;
  uint64_t v17 = v12 | 7;
  unint64_t v18 = (v12 | 7) + v16;
  uint64_t v19 = (v12 | 7) + 1;
  BOOL v20 = a2 >= v10;
  unsigned int v21 = a2 - v10;
  if (v21 != 0 && v20)
  {
    unint64_t v22 = (v9 & 0xFFFFFFFFFFFFFFF8) + 25;
    unint64_t v23 = (v9 & 0xFFFFFFFFFFFFFFF8) + 17;
    uint64_t v11 = v9 + 3;
    uint64_t v24 = ((v13
          + ((v13
            + ((v23
              + v12
              + ((v12 + 8) & ~v17)
              + ((v17
                + v22
                + ((v17
                  + v22
                  + ((v17
                    + v11
                    + ((v22
                      + v12
                      + ((v17
                        + v11
                        + ((v23
                          + v12
                          + ((v17
                            + v23
                            + ((v17
                              + v11
                              + ((v13
                                + ((v16
                                  + v12
                                  + ((v15
                                    + ((v13
                                      + ((v22
                                        + v12
                                        + (v19 & ~v17)
                                        + ((v18 + ((v15 + ((v13 + ((v13 + (v13 & ~v12)) & ~v12)) & ~v12)) & ~v14)) & ~v17)) & ~v12)) & ~v12)) & ~v14)) & ~v12)) & ~v12)) & ~v17)) & ~v17)) & ~v12)) & ~v17)) & ~v12)) & ~v17)) & ~v17)) & ~v17)) & ~v12)) & ~v12)) & ~v12)
        + v11;
    char v25 = 8 * v24;
    if (v24 <= 3)
    {
      unsigned int v27 = ((v21 + ~(-1 << v25)) >> v25) + 1;
      if (HIWORD(v27))
      {
        int v26 = *(_DWORD *)((char *)a1 + v24);
        if (!v26) {
          goto LABEL_31;
        }
        goto LABEL_21;
      }
      if (v27 > 0xFF)
      {
        int v26 = *(unsigned __int16 *)((char *)a1 + v24);
        if (!*(unsigned __int16 *)((char *)a1 + v24)) {
          goto LABEL_31;
        }
        goto LABEL_21;
      }
      if (v27 < 2) {
        goto LABEL_31;
      }
    }
    int v26 = *((unsigned __int8 *)a1 + v24);
    if (!*((unsigned char *)a1 + v24)) {
      goto LABEL_31;
    }
LABEL_21:
    int v28 = (v26 - 1) << v25;
    if (v24 > 3) {
      int v28 = 0;
    }
    if (v24)
    {
      if (v24 <= 3) {
        int v29 = v24;
      }
      else {
        int v29 = 4;
      }
      switch(v29)
      {
        case 2:
          int v30 = *a1;
          break;
        case 3:
          int v30 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
          break;
        case 4:
          int v30 = *(_DWORD *)a1;
          break;
        default:
          int v30 = *(unsigned __int8 *)a1;
          break;
      }
    }
    else
    {
      int v30 = 0;
    }
    int v35 = v10 + (v30 | v28);
    return (v35 + 1);
  }
LABEL_31:
  if (v7 >= v8)
  {
    if (v6 >= 0xFE) {
      goto LABEL_37;
    }
    unsigned int v34 = *((unsigned __int8 *)a1 + v9 + 1);
    if (v34 < 2) {
      return 0;
    }
    int v35 = (v34 + 2147483646) & 0x7FFFFFFF;
    return (v35 + 1);
  }
  a1 = (unsigned __int16 *)((v19
                           + ((v18
                             + ((v15 + ((v13 + ((v13 + (((unint64_t)a1 + v13) & ~v12)) & ~v12)) & ~v12)) & ~v14)) & ~v17)) & ~v17);
  if (v6 < 0x7FFFFFFF)
  {
    unint64_t v31 = *(void *)((((unint64_t)a1 + v9) & 0xFFFFFFFFFFFFFFF8) + 16);
    if (v31 >= 0xFFFFFFFF) {
      LODWORD(v31) = -1;
    }
    return (v31 + 1);
  }
LABEL_37:
  uint64_t v33 = *(uint64_t (**)(unsigned __int16 *))(v5 + 48);
  return v33(a1);
}

void sub_1000D88D4(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v7 = v6;
  unsigned int v8 = *(_DWORD *)(v6 + 84);
  if (v8 <= 0xFE) {
    unsigned int v9 = 254;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  if (v8 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v6 + 84);
  }
  if (v10 <= v9) {
    unsigned int v11 = v9;
  }
  else {
    unsigned int v11 = v10;
  }
  uint64_t v12 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v13 = v12 + 3;
  uint64_t v14 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v15 = v12 + 3 + v14;
  uint64_t v16 = (v14 | 3) + v12 + 3;
  unint64_t v17 = (v12 & 0xFFFFFFFFFFFFFFFCLL) + 9;
  unint64_t v18 = (v14 | 7) + v17;
  uint64_t v19 = (v14 | 7) + 1;
  unint64_t v20 = (v12 & 0xFFFFFFFFFFFFFFF8) + 25;
  size_t v21 = (v19 & ~(v14 | 7)) + v20;
  uint64_t v22 = (v14 | 7) + v12 + 3;
  unint64_t v23 = (v12 & 0xFFFFFFFFFFFFFFF8) + 17;
  size_t v24 = ((v15
        + ((v15
          + ((v23
            + v14
            + ((v14 + 8) & ~(v14 | 7))
            + (((v14 | 7)
              + v20
              + (((v14 | 7)
                + v20
                + ((v22
                  + ((v20
                    + v14
                    + ((v22
                      + ((v23
                        + v14
                        + (((v14 | 7)
                          + v23
                          + ((v22
                            + ((v15
                              + ((v17
                                + v14
                                + ((v16
                                  + ((v15
                                    + ((v21
                                      + v14
                                      + ((v18 + ((v16 + ((v15 + ((v15 + (v15 & ~v14)) & ~v14)) & ~v14)) & ~(v14 | 3))) & ~(v14 | 7))) & ~v14)) & ~v14)) & ~(v14 | 3))) & ~v14)) & ~v14)) & ~(v14 | 7))) & ~(v14 | 7))) & ~v14)) & ~(v14 | 7))) & ~v14)) & ~(v14 | 7))) & ~(v14 | 7))) & ~(v14 | 7))) & ~v14)) & ~v14)) & ~v14)
      + v12
      + 3;
  BOOL v25 = a3 >= v11;
  unsigned int v26 = a3 - v11;
  if (v26 != 0 && v25)
  {
    if (v24 <= 3)
    {
      unsigned int v31 = ((v26 + ~(-1 << (8 * v24))) >> (8 * v24)) + 1;
      if (HIWORD(v31))
      {
        int v27 = 4;
      }
      else if (v31 >= 0x100)
      {
        int v27 = 2;
      }
      else
      {
        int v27 = v31 > 1;
      }
    }
    else
    {
      int v27 = 1;
    }
  }
  else
  {
    int v27 = 0;
  }
  if (v11 < a2)
  {
    unsigned int v28 = ~v11 + a2;
    if (v24 < 4)
    {
      int v29 = (v28 >> (8 * v24)) + 1;
      if (v24)
      {
        int v32 = v28 & ~(-1 << (8 * v24));
        bzero(a1, v24);
        if (v24 == 3)
        {
          *(_WORD *)a1 = v32;
          a1[2] = BYTE2(v32);
        }
        else if (v24 == 2)
        {
          *(_WORD *)a1 = v32;
        }
        else
        {
          *a1 = v32;
        }
      }
    }
    else
    {
      bzero(a1, v24);
      *(_DWORD *)a1 = v28;
      int v29 = 1;
    }
    switch(v27)
    {
      case 1:
        a1[v24] = v29;
        return;
      case 2:
        *(_WORD *)&a1[v24] = v29;
        return;
      case 3:
        goto LABEL_72;
      case 4:
        *(_DWORD *)&a1[v24] = v29;
        return;
      default:
        return;
    }
  }
  uint64_t v30 = ~(v14 | 7);
  switch(v27)
  {
    case 1:
      a1[v24] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 2:
      *(_WORD *)&a1[v24] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 3:
LABEL_72:
      __break(1u);
      JUMPOUT(0x1000D8D98);
    case 4:
      *(_DWORD *)&a1[v24] = 0;
      goto LABEL_29;
    default:
LABEL_29:
      if (!a2) {
        return;
      }
LABEL_30:
      if (v9 < v10)
      {
        uint64_t v33 = (unsigned char *)((v18
                       + ((v16 + ((v15 + ((v15 + ((unint64_t)&a1[v15] & ~v14)) & ~v14)) & ~v14)) & ~(v14 | 3))) & v30);
        if (v10 < a2)
        {
          if (v21 < 4) {
            int v34 = ~(-1 << (8 * v21));
          }
          else {
            int v34 = -1;
          }
          int v35 = v34 & (~v10 + a2);
          bzero(v33, v21);
          if (v21 == 1) {
            *uint64_t v33 = v35;
          }
          else {
            *(_DWORD *)uint64_t v33 = v35;
          }
          return;
        }
        unint64_t v39 = (char *)((unint64_t)&v33[v19] & v30);
        if (v8 < 0x7FFFFFFF)
        {
          unint64_t v41 = (unint64_t)&v39[v12] & 0xFFFFFFFFFFFFFFF8;
          if ((a2 & 0x80000000) != 0)
          {
            *(void *)(v41 + 8) = a2 ^ 0x80000000;
            *(void *)(v41 + 16) = 0;
          }
          else
          {
            *(void *)(v41 + 16) = a2 - 1;
          }
          return;
        }
        unint64_t v40 = *(void (**)(char *))(v7 + 56);
        goto LABEL_54;
      }
      if (v9 >= a2)
      {
        if (v8 < 0xFE)
        {
          a1[v12 + 1] = a2 + 1;
          return;
        }
        unint64_t v40 = *(void (**)(char *))(v7 + 56);
        unint64_t v39 = a1;
LABEL_54:
        v40(v39);
        return;
      }
      if (v13 <= 3) {
        int v36 = ~(-1 << (8 * v13));
      }
      else {
        int v36 = -1;
      }
      if (v12 != -3)
      {
        int v37 = v36 & (~v9 + a2);
        if (v13 <= 3) {
          int v38 = v12 + 3;
        }
        else {
          int v38 = 4;
        }
        bzero(a1, v13);
        switch(v38)
        {
          case 2:
            *(_WORD *)a1 = v37;
            break;
          case 3:
            *(_WORD *)a1 = v37;
            a1[2] = BYTE2(v37);
            break;
          case 4:
            *(_DWORD *)a1 = v37;
            break;
          default:
            *a1 = v37;
            break;
        }
      }
      return;
  }
}

uint64_t sub_1000D8DD0()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void *sub_1000D8EB0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 64);
  uint64_t v11 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v8 + 80));
  if (v11 > 7
    || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0
    || v10 + ((v9 + v6 + 1) & (unint64_t)~v9) + 1 > 0x18)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v14 + ((v11 + 16) & ~v11));
    swift_retain();
  }
  else
  {
    (*(void (**)(void *, void *))(v5 + 16))(a1, a2);
    *((unsigned char *)v4 + v6) = *((unsigned char *)a2 + v6);
    uint64_t v15 = (char *)a2 + v6 + v9;
    uint64_t v16 = ((unint64_t)v4 + v6 + v9 + 1) & ~v9;
    uint64_t v17 = (unint64_t)(v15 + 1) & ~v9;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v16, v17, v7);
    *(unsigned char *)(v16 + v10) = *(unsigned char *)(v17 + v10);
  }
  return v4;
}

uint64_t sub_1000D9044(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v6 = *(uint64_t (**)(unint64_t))(v5 + 8);
  unint64_t v7 = (a1 + *(void *)(v4 + 56) + *(unsigned __int8 *)(v5 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);

  return v6(v7);
}

uint64_t sub_1000D90EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48);
  uint64_t v8 = (unsigned char *)(v7 + a1);
  uint64_t v9 = (unsigned char *)(v7 + a2);
  *uint64_t v8 = *v9;
  uint64_t v10 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v11 = v10 + 16;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (unint64_t)&v8[v12 + 1] & ~v12;
  uint64_t v14 = (unint64_t)&v9[v12 + 1] & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v13, v14);
  *(unsigned char *)(*(void *)(v11 + 48) + v13) = *(unsigned char *)(*(void *)(v11 + 48) + v14);
  return a1;
}

uint64_t sub_1000D91B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40);
  uint64_t v8 = (unsigned char *)(v7 + a1);
  uint64_t v9 = (unsigned char *)(v7 + a2);
  *uint64_t v8 = *v9;
  uint64_t v10 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v11 = v10 + 24;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (unint64_t)&v8[v12 + 1] & ~v12;
  uint64_t v14 = (unint64_t)&v9[v12 + 1] & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 24))(v13, v14);
  *(unsigned char *)(*(void *)(v11 + 40) + v13) = *(unsigned char *)(*(void *)(v11 + 40) + v14);
  return a1;
}

uint64_t sub_1000D9284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = (unsigned char *)(v7 + a1);
  uint64_t v9 = (unsigned char *)(v7 + a2);
  *uint64_t v8 = *v9;
  uint64_t v10 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v11 = v10 + 32;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (unint64_t)&v8[v12 + 1] & ~v12;
  uint64_t v14 = (unint64_t)&v9[v12 + 1] & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 32))(v13, v14);
  *(unsigned char *)(*(void *)(v11 + 32) + v13) = *(unsigned char *)(*(void *)(v11 + 32) + v14);
  return a1;
}

uint64_t sub_1000D9350(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = (unsigned char *)(v7 + a1);
  uint64_t v9 = (unsigned char *)(v7 + a2);
  *uint64_t v8 = *v9;
  uint64_t v10 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v11 = v10 + 40;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (unint64_t)&v8[v12 + 1] & ~v12;
  uint64_t v14 = (unint64_t)&v9[v12 + 1] & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 40))(v13, v14);
  *(unsigned char *)(*(void *)(v11 + 24) + v13) = *(unsigned char *)(*(void *)(v11 + 24) + v14);
  return a1;
}

uint64_t sub_1000D941C(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(v4 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(v6 + 64);
  if (v5 <= v7) {
    unsigned int v11 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v11 = *(_DWORD *)(v4 + 84);
  }
  if (v11 <= 0xFE) {
    unsigned int v11 = 254;
  }
  if (!a2) {
    return 0;
  }
  int v12 = a2 - v11;
  if (a2 <= v11) {
    goto LABEL_26;
  }
  uint64_t v13 = v10 + ((v8 + v9 + 1) & ~v9) + 1;
  char v14 = 8 * v13;
  if (v13 > 3) {
    goto LABEL_9;
  }
  unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
  if (HIWORD(v16))
  {
    int v15 = *(_DWORD *)((char *)a1 + v13);
    if (v15) {
      goto LABEL_16;
    }
  }
  else
  {
    if (v16 <= 0xFF)
    {
      if (v16 < 2) {
        goto LABEL_26;
      }
LABEL_9:
      int v15 = *((unsigned __int8 *)a1 + v13);
      if (!*((unsigned char *)a1 + v13)) {
        goto LABEL_26;
      }
LABEL_16:
      int v17 = (v15 - 1) << v14;
      if (v13 > 3) {
        int v17 = 0;
      }
      if (v10 + ((v8 + v9 + 1) & ~v9) == -1)
      {
        int v19 = 0;
      }
      else
      {
        if (v13 <= 3) {
          int v18 = v10 + ((v8 + v9 + 1) & ~v9) + 1;
        }
        else {
          int v18 = 4;
        }
        switch(v18)
        {
          case 2:
            int v19 = *a1;
            break;
          case 3:
            int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v19 = *(_DWORD *)a1;
            break;
          default:
            int v19 = *(unsigned __int8 *)a1;
            break;
        }
      }
      return v11 + (v19 | v17) + 1;
    }
    int v15 = *(unsigned __int16 *)((char *)a1 + v13);
    if (*(unsigned __int16 *)((char *)a1 + v13)) {
      goto LABEL_16;
    }
  }
LABEL_26:
  if (v5 == v11) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  uint64_t v21 = ((unint64_t)a1 + v8 + v9 + 1) & ~v9;
  if (v7 == v11) {
    return (*(uint64_t (**)(uint64_t))(v6 + 48))(v21);
  }
  unsigned int v22 = *(unsigned __int8 *)(v21 + v10);
  if (v22 < 2) {
    return 0;
  }
  return ((v22 + 2147483646) & 0x7FFFFFFF) + 1;
}

void sub_1000D964C(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(void *)(v6 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = *(void *)(v8 + 64);
  if (v7 <= v9) {
    unsigned int v13 = *(_DWORD *)(v8 + 84);
  }
  else {
    unsigned int v13 = *(_DWORD *)(v6 + 84);
  }
  if (v13 <= 0xFE) {
    unsigned int v13 = 254;
  }
  size_t v14 = v12 + ((v10 + v11 + 1) & ~v11) + 1;
  BOOL v15 = a3 >= v13;
  unsigned int v16 = a3 - v13;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v13 < a2)
  {
    unsigned int v18 = ~v13 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v12 + ((v10 + v11 + 1) & ~v11) != -1)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_45;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 3:
LABEL_45:
      __break(1u);
      JUMPOUT(0x1000D9944);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_25;
    default:
LABEL_25:
      if (a2)
      {
LABEL_26:
        if (v7 == v13)
        {
          unsigned int v22 = *(void (**)(void))(v6 + 56);
          v22();
        }
        else
        {
          unint64_t v23 = (unint64_t)&a1[v10 + 1 + v11] & ~v11;
          if (v9 == v13)
          {
            size_t v24 = *(void (**)(unint64_t))(v8 + 56);
            v24(v23);
          }
          else
          {
            *(unsigned char *)(v23 + v12) = a2 + 1;
          }
        }
      }
      return;
  }
}

uint64_t sub_1000D996C()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    uint64_t v0 = type metadata accessor for Preferences.Preference();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v0;
}

uint64_t *sub_1000D9A74(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = *(void *)(v6 - 8);
  uint64_t v36 = v9;
  int v10 = *(_DWORD *)(v9 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v13 = *(_DWORD *)(v12 + 80);
  int v14 = *(_DWORD *)(v12 + 80) | v10;
  uint64_t v15 = (*(unsigned char *)(v12 + 80) | v10);
  uint64_t v16 = v8 + v15;
  uint64_t v17 = *(void *)(v9 + 64);
  uint64_t v18 = v13 + 1;
  uint64_t v19 = *(void *)(v12 + 64);
  int v20 = *(_DWORD *)(v7 + 80) | v14;
  uint64_t v21 = v20;
  int v22 = v20 & 0x100000;
  if (v21 > 7 || v22 != 0 || v19 + ((v13 + 1 + v17) & ~v13) + (v16 & (unint64_t)~v15) + 1 > 0x18)
  {
    uint64_t v25 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v25 + ((v21 + 16) & ~v21));
    swift_retain();
  }
  else
  {
    uint64_t v33 = v6;
    uint64_t v26 = ~v15;
    uint64_t v34 = ~v13;
    uint64_t v35 = AssociatedTypeWitness;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v5);
    unint64_t v27 = ((unint64_t)a1 + v16) & v26;
    unint64_t v28 = ((unint64_t)a2 + v16) & v26;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v36 + 16))(v27, v28, v33);
    uint64_t v29 = v28 + v17;
    *(unsigned char *)(v27 + v17) = *(unsigned char *)(v28 + v17);
    unint64_t v30 = (v18 + v27 + v17) & v34;
    uint64_t v31 = (v18 + v29) & v34;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v12 + 16))(v30, v31, v35);
    *(unsigned char *)(v30 + v19) = *(unsigned char *)(v31 + v19);
  }
  return a1;
}

uint64_t sub_1000D9CC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 24) - 8) + 8;
  (*(void (**)(uint64_t, void))v4)(a1, *(void *)(a2 + 24));
  uint64_t v5 = *(void *)(v4 + 56);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = v5 + a1;
  uint64_t v8 = *(void *)(v6 - 8);
  unsigned int v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = *(_DWORD *)(v17 + 80);
  uint64_t v12 = *(_DWORD *)(v17 + 80) | v9;
  uint64_t v13 = (v7 + v12) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v13, v6);
  uint64_t v14 = (v11 + *(void *)(v8 + 64) + v13 + 1) & ~v11;
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(v17 + 8);

  return v15(v14, AssociatedTypeWitness);
}

uint64_t sub_1000D9E24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, void))v6)(a1, a2, *(void *)(a3 + 24));
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v6 + 48);
  uint64_t v9 = *(void *)(v7 - 8);
  unsigned int v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v13 = *(_DWORD *)(v12 + 80);
  uint64_t v14 = *(_DWORD *)(v12 + 80) | v10;
  uint64_t v15 = (v8 + v14 + a1) & ~v14;
  uint64_t v16 = (v8 + v14 + a2) & ~v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v15, v16, v7);
  uint64_t v17 = *(void *)(v9 + 64);
  uint64_t v18 = (unsigned char *)(v15 + v17);
  uint64_t v19 = (unsigned char *)(v16 + v17);
  *uint64_t v18 = *v19;
  uint64_t v20 = (unint64_t)&v18[v13 + 1] & ~v13;
  uint64_t v21 = (unint64_t)&v19[v13 + 1] & ~v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v20, v21, AssociatedTypeWitness);
  *(unsigned char *)(*(void *)(v12 + 64) + v20) = *(unsigned char *)(*(void *)(v12 + 64) + v21);
  return a1;
}

uint64_t sub_1000D9FB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, void))v6)(a1, a2, *(void *)(a3 + 24));
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v6 + 40);
  uint64_t v9 = *(void *)(v7 - 8);
  unsigned int v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v13 = *(_DWORD *)(v12 + 80);
  uint64_t v14 = *(_DWORD *)(v12 + 80) | v10;
  uint64_t v15 = (v8 + v14 + a1) & ~v14;
  uint64_t v16 = (v8 + v14 + a2) & ~v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 24))(v15, v16, v7);
  uint64_t v17 = *(void *)(v9 + 64);
  uint64_t v18 = (unsigned char *)(v15 + v17);
  uint64_t v19 = (unsigned char *)(v16 + v17);
  *uint64_t v18 = *v19;
  uint64_t v20 = (unint64_t)&v18[v13 + 1] & ~v13;
  uint64_t v21 = (unint64_t)&v19[v13 + 1] & ~v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 24))(v20, v21, AssociatedTypeWitness);
  *(unsigned char *)(*(void *)(v12 + 64) + v20) = *(unsigned char *)(*(void *)(v12 + 64) + v21);
  return a1;
}

uint64_t sub_1000DA14C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, void))v6)(a1, a2, *(void *)(a3 + 24));
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v6 + 32);
  uint64_t v9 = *(void *)(v7 - 8);
  unsigned int v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v13 = *(_DWORD *)(v12 + 80);
  uint64_t v14 = *(_DWORD *)(v12 + 80) | v10;
  uint64_t v15 = (v8 + v14 + a1) & ~v14;
  uint64_t v16 = (v8 + v14 + a2) & ~v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v15, v16, v7);
  uint64_t v17 = *(void *)(v9 + 64);
  uint64_t v18 = (unsigned char *)(v15 + v17);
  uint64_t v19 = (unsigned char *)(v16 + v17);
  *uint64_t v18 = *v19;
  uint64_t v20 = (unint64_t)&v18[v13 + 1] & ~v13;
  uint64_t v21 = (unint64_t)&v19[v13 + 1] & ~v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v20, v21, AssociatedTypeWitness);
  *(unsigned char *)(*(void *)(v12 + 64) + v20) = *(unsigned char *)(*(void *)(v12 + 64) + v21);
  return a1;
}

uint64_t sub_1000DA2E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, void))v6)(a1, a2, *(void *)(a3 + 24));
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v6 + 24);
  uint64_t v9 = *(void *)(v7 - 8);
  unsigned int v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v13 = *(_DWORD *)(v12 + 80);
  uint64_t v14 = *(_DWORD *)(v12 + 80) | v10;
  uint64_t v15 = (v8 + v14 + a1) & ~v14;
  uint64_t v16 = (v8 + v14 + a2) & ~v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 40))(v15, v16, v7);
  uint64_t v17 = *(void *)(v9 + 64);
  uint64_t v18 = (unsigned char *)(v15 + v17);
  uint64_t v19 = (unsigned char *)(v16 + v17);
  *uint64_t v18 = *v19;
  uint64_t v20 = (unint64_t)&v18[v13 + 1] & ~v13;
  uint64_t v21 = (unint64_t)&v19[v13 + 1] & ~v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 40))(v20, v21, AssociatedTypeWitness);
  *(unsigned char *)(*(void *)(v12 + 64) + v20) = *(unsigned char *)(*(void *)(v12 + 64) + v21);
  return a1;
}

uint64_t sub_1000DA474(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t v9 = *(unsigned int *)(v7 + 84);
  uint64_t v10 = *(unsigned int *)(v8 + 84);
  uint64_t v11 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v12 = v11;
  int v14 = *(_DWORD *)(v11 + 80);
  unsigned int v13 = *(_DWORD *)(v11 + 84);
  if (v10 <= v13) {
    unsigned int v15 = *(_DWORD *)(v11 + 84);
  }
  else {
    unsigned int v15 = v10;
  }
  uint64_t v16 = *(void *)(v11 + 64);
  if (v15 <= 0xFE) {
    unsigned int v15 = 254;
  }
  if (v15 <= v9) {
    unsigned int v17 = v9;
  }
  else {
    unsigned int v17 = v15;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v18 = v14 | *(unsigned __int8 *)(v8 + 80);
  uint64_t v19 = *(void *)(v7 + 64) + v18;
  uint64_t v20 = *(void *)(v8 + 64) + v14 + 1;
  if (a2 > v17)
  {
    unint64_t v21 = v16 + (v20 & ~(unint64_t)v14) + (v19 & ~v18) + 1;
    char v22 = 8 * v21;
    if (v21 > 3) {
      goto LABEL_12;
    }
    unsigned int v24 = ((a2 - v17 + ~(-1 << v22)) >> v22) + 1;
    if (HIWORD(v24))
    {
      int v23 = *(_DWORD *)((char *)a1 + v21);
      if (!v23) {
        goto LABEL_29;
      }
      goto LABEL_19;
    }
    if (v24 > 0xFF)
    {
      int v23 = *(unsigned __int16 *)((char *)a1 + v21);
      if (!*(unsigned __int16 *)((char *)a1 + v21)) {
        goto LABEL_29;
      }
      goto LABEL_19;
    }
    if (v24 >= 2)
    {
LABEL_12:
      int v23 = *((unsigned __int8 *)a1 + v21);
      if (!*((unsigned char *)a1 + v21)) {
        goto LABEL_29;
      }
LABEL_19:
      int v25 = (v23 - 1) << v22;
      if (v21 > 3) {
        int v25 = 0;
      }
      if (v21)
      {
        if (v21 <= 3) {
          int v26 = v21;
        }
        else {
          int v26 = 4;
        }
        switch(v26)
        {
          case 2:
            int v27 = *a1;
            break;
          case 3:
            int v27 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v27 = *(_DWORD *)a1;
            break;
          default:
            int v27 = *(unsigned __int8 *)a1;
            break;
        }
      }
      else
      {
        int v27 = 0;
      }
      int v36 = v17 + (v27 | v25);
      return (v36 + 1);
    }
  }
LABEL_29:
  if (v9 >= v15)
  {
    uint64_t v29 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v7 + 48);
    unint64_t v28 = a1;
    uint64_t v30 = v9;
    uint64_t v31 = v6;
    goto LABEL_33;
  }
  unint64_t v28 = (unsigned __int16 *)(((unint64_t)a1 + v19) & ~v18);
  if (v10 == v15)
  {
    uint64_t v29 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v8 + 48);
    uint64_t v30 = v10;
    uint64_t v31 = v5;
LABEL_33:
    return v29(v28, v30, v31);
  }
  unint64_t v33 = ((unint64_t)v28 + v20) & ~(unint64_t)v14;
  if (v13 != v15)
  {
    unsigned int v35 = *(unsigned __int8 *)(v33 + v16);
    if (v35 < 2) {
      return 0;
    }
    int v36 = (v35 + 2147483646) & 0x7FFFFFFF;
    return (v36 + 1);
  }
  uint64_t v34 = *(uint64_t (**)(unint64_t))(v12 + 48);

  return v34(v33);
}

void sub_1000DA7F0(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v43 = *(void *)(a4 + 16);
  uint64_t v44 = v8;
  uint64_t v9 = *(void *)(v43 - 8);
  uint64_t v10 = *(unsigned int *)(v8 + 84);
  uint64_t v11 = *(unsigned int *)(v9 + 84);
  uint64_t v12 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v13 = v12;
  int v15 = *(_DWORD *)(v12 + 80);
  unsigned int v14 = *(_DWORD *)(v12 + 84);
  if (v11 <= v14) {
    unsigned int v16 = *(_DWORD *)(v12 + 84);
  }
  else {
    unsigned int v16 = v11;
  }
  uint64_t v17 = *(void *)(v12 + 64);
  if (v16 <= 0xFE) {
    unsigned int v18 = 254;
  }
  else {
    unsigned int v18 = v16;
  }
  if (v18 <= v10) {
    unsigned int v19 = v10;
  }
  else {
    unsigned int v19 = v18;
  }
  uint64_t v20 = v15 | *(unsigned __int8 *)(v9 + 80);
  uint64_t v21 = *(void *)(v8 + 64) + v20;
  uint64_t v22 = *(void *)(v9 + 64) + v15 + 1;
  size_t v23 = v17 + (v22 & ~(unint64_t)v15) + 1;
  size_t v24 = (v21 & ~v20) + v23;
  if (a3 <= v19)
  {
    int v25 = 0;
  }
  else if (v24 <= 3)
  {
    unsigned int v30 = ((a3 - v19 + ~(-1 << (8 * v24))) >> (8 * v24)) + 1;
    if (HIWORD(v30))
    {
      int v25 = 4;
    }
    else if (v30 >= 0x100)
    {
      int v25 = 2;
    }
    else
    {
      int v25 = v30 > 1;
    }
  }
  else
  {
    int v25 = 1;
  }
  if (v19 < a2)
  {
    unsigned int v26 = ~v19 + a2;
    if (v24 < 4)
    {
      int v27 = (v26 >> (8 * v24)) + 1;
      if (v24)
      {
        int v31 = v26 & ~(-1 << (8 * v24));
        bzero(a1, (v21 & ~v20) + v23);
        if (v24 == 3)
        {
          *(_WORD *)a1 = v31;
          a1[2] = BYTE2(v31);
        }
        else if (v24 == 2)
        {
          *(_WORD *)a1 = v31;
        }
        else
        {
          *a1 = v31;
        }
      }
    }
    else
    {
      bzero(a1, (v21 & ~v20) + v23);
      *(_DWORD *)a1 = v26;
      int v27 = 1;
    }
    switch(v25)
    {
      case 1:
        a1[v24] = v27;
        return;
      case 2:
        *(_WORD *)&a1[v24] = v27;
        return;
      case 3:
        goto LABEL_65;
      case 4:
        *(_DWORD *)&a1[v24] = v27;
        return;
      default:
        return;
    }
  }
  uint64_t v28 = ~v20;
  unint64_t v29 = ~(unint64_t)v15;
  switch(v25)
  {
    case 1:
      a1[v24] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 2:
      *(_WORD *)&a1[v24] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 3:
LABEL_65:
      __break(1u);
      JUMPOUT(0x1000DAC64);
    case 4:
      *(_DWORD *)&a1[v24] = 0;
      goto LABEL_29;
    default:
LABEL_29:
      if (!a2) {
        return;
      }
LABEL_30:
      if (v10 >= v18)
      {
        int v36 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v44 + 56);
        int v37 = a1;
        uint64_t v38 = a2;
        uint64_t v39 = v10;
        uint64_t v40 = v7;
LABEL_42:
        v36(v37, v38, v39, v40);
        return;
      }
      int v32 = (unsigned char *)((unint64_t)&a1[v21] & v28);
      if (v18 < a2)
      {
        if (v23 <= 3) {
          int v33 = ~(-1 << (8 * v23));
        }
        else {
          int v33 = -1;
        }
        if (v23)
        {
          int v34 = v33 & (~v18 + a2);
          if (v23 <= 3) {
            int v35 = v23;
          }
          else {
            int v35 = 4;
          }
          bzero(v32, v23);
          switch(v35)
          {
            case 2:
              *(_WORD *)int v32 = v34;
              break;
            case 3:
              *(_WORD *)int v32 = v34;
              v32[2] = BYTE2(v34);
              break;
            case 4:
              *(_DWORD *)int v32 = v34;
              break;
            default:
              *int v32 = v34;
              break;
          }
        }
        return;
      }
      if (v11 == v18)
      {
        int v36 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
        int v37 = v32;
        uint64_t v38 = a2;
        uint64_t v39 = v11;
        uint64_t v40 = v43;
        goto LABEL_42;
      }
      unint64_t v41 = (unint64_t)&v32[v22] & v29;
      if (v14 == v18)
      {
        unint64_t v42 = *(void (**)(unint64_t, uint64_t))(v13 + 56);
        v42(v41, a2);
      }
      else
      {
        *(unsigned char *)(v41 + v17) = a2 + 1;
      }
      return;
  }
}

uint64_t sub_1000DAC9C()
{
  uint64_t result = type metadata accessor for Preferences.Preference();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_1000DAD34(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFFFFFFFE7 && (v7 & 0x1000F8) == 0)
  {
    (*(void (**)(void *, void *))(v5 + 16))(a1, a2);
    *((unsigned char *)v4 + v6) = *((unsigned char *)a2 + v6);
    unint64_t v10 = ((unint64_t)v4 + v6) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v12 = *(void *)(v11 + 8);
    unint64_t v13 = *(void *)(v11 + 16);
    sub_100013D44(v12, v13);
    *(void *)(v10 + 8) = v12;
    *(void *)(v10 + 16) = v13;
    *(unsigned char *)(v10 + 24) = *(unsigned char *)(v11 + 24);
  }
  else
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  return v4;
}

uint64_t sub_1000DAE40(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  unint64_t v4 = (*(void *)(v3 + 56) + a1) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(v4 + 8);
  unint64_t v6 = *(void *)(v4 + 16);

  return sub_10000C970(v5, v6);
}

uint64_t sub_1000DAEAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48);
  unint64_t v7 = v6 + a1;
  unint64_t v8 = v6 + a2;
  *(unsigned char *)unint64_t v7 = *(unsigned char *)v8;
  unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = *(void *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
  unint64_t v12 = *(void *)((v8 & 0xFFFFFFFFFFFFFFF8) + 16);
  sub_100013D44(v11, v12);
  *(void *)(v9 + 8) = v11;
  *(void *)(v9 + 16) = v12;
  *(unsigned char *)(v9 + 24) = *(unsigned char *)(v10 + 24);
  return a1;
}

uint64_t sub_1000DAF48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40);
  unint64_t v7 = v6 + a1;
  unint64_t v8 = v6 + a2;
  *(unsigned char *)unint64_t v7 = *(unsigned char *)v8;
  unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = *(void *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
  unint64_t v12 = *(void *)((v8 & 0xFFFFFFFFFFFFFFF8) + 16);
  sub_100013D44(v11, v12);
  uint64_t v13 = *(void *)(v9 + 8);
  unint64_t v14 = *(void *)(v9 + 16);
  *(void *)(v9 + 8) = v11;
  *(void *)(v9 + 16) = v12;
  sub_10000C970(v13, v14);
  *(unsigned char *)(v9 + 24) = *(unsigned char *)(v10 + 24);
  return a1;
}

uint64_t sub_1000DAFEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  *(unsigned char *)uint64_t v7 = *(unsigned char *)v8;
  v7 &= 0xFFFFFFFFFFFFFFF8;
  v8 &= 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)(v7 + 8) = *(_OWORD *)(v8 + 8);
  *(unsigned char *)(v7 + 24) = *(unsigned char *)(v8 + 24);
  return a1;
}

uint64_t sub_1000DB074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24);
  unint64_t v7 = v6 + a1;
  unint64_t v8 = v6 + a2;
  *(unsigned char *)unint64_t v7 = *(unsigned char *)v8;
  unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = *(void *)((v7 & 0xFFFFFFFFFFFFFFF8) + 8);
  unint64_t v12 = *(void *)((v7 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_OWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
  sub_10000C970(v11, v12);
  *(unsigned char *)(v9 + 24) = *(unsigned char *)(v10 + 24);
  return a1;
}

uint64_t sub_1000DB104(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 25;
    unsigned int v9 = (a2 - v7 + 255) >> (8 * v8);
    if (v8 < 4) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = a1[v8];
        if (!a1[v8]) {
          break;
        }
        goto LABEL_21;
      case 2:
        int v13 = *(unsigned __int16 *)&a1[v8];
        if (*(_WORD *)&a1[v8]) {
          goto LABEL_21;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1000DB268);
      case 4:
        int v13 = *(_DWORD *)&a1[v8];
        if (!v13) {
          break;
        }
LABEL_21:
        int v14 = (v13 - 1) << (8 * v8);
        if (v8 >= 4) {
          int v14 = 0;
        }
        if ((v6 & 0xFFFFFFF8) == 0xFFFFFFE8) {
          int v15 = *a1;
        }
        else {
          int v15 = *(_DWORD *)a1;
        }
        return v7 + (v15 | v14) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0xFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unsigned int v17 = *(unsigned __int8 *)(((unint64_t)&a1[v6] & 0xFFFFFFFFFFFFFFF8) + 24);
  if (v17 >= 2) {
    return ((v17 + 2147483646) & 0x7FFFFFFF) + 1;
  }
  else {
    return 0;
  }
}

void sub_1000DB27C(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = (v9 & 0xFFFFFFFFFFFFFFF8) + 25;
  char v11 = 8 * v10;
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            if (v7 < 0xFE)
            {
              *(unsigned char *)(((unint64_t)&a1[v9] & 0xFFFFFFFFFFFFFFF8) + 24) = a2 + 1;
            }
            else
            {
              uint64_t v20 = *(void (**)(void))(v6 + 56);
              v20();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 255) >> v11;
    if (v10 <= 3) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = ~v8 + a2;
  unsigned int v17 = (~(_BYTE)v8 + a2);
  if (v10 < 4) {
    int v18 = (v16 >> v11) + 1;
  }
  else {
    int v18 = 1;
  }
  if (v10 >= 4) {
    unsigned int v19 = v16;
  }
  else {
    unsigned int v19 = v17;
  }
  bzero(a1, v10);
  if (v10 == 1) {
    *a1 = v19;
  }
  else {
    *(_DWORD *)a1 = v19;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v18;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v18;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x1000DB478);
    case 4:
      *(_DWORD *)&a1[v10] = v18;
      break;
    default:
      return;
  }
}

uint64_t sub_1000DB4C4()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1000DB564(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  unint64_t v7 = ((v6 + 8) & ~v6) + *(void *)(v5 + 64);
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v12 = ((unint64_t)a1 + v6 + 8) & ~v6;
    uint64_t v13 = ((unint64_t)a2 + v6 + 8) & ~v6;
    int v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v14(v12, v13, v4);
  }
  return a1;
}

uint64_t sub_1000DB668(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

void *sub_1000DB6DC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  swift_retain();
  v5(v7, v8, v4);
  return a1;
}

void *sub_1000DB76C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

void *sub_1000DB7FC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

void *sub_1000DB86C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t sub_1000DB8F4(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 8) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 8) & ~v6);
      }
      uint64_t v15 = *(void *)a1;
      if (*(void *)a1 >= 0xFFFFFFFFuLL) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void sub_1000DBA94(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 8) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x1000DBCF0);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v19 = (unint64_t)&a1[v9 + 8] & ~v9;
          uint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
          v20(v19);
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v18 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v18 = a2 - 1;
          }
          *(void *)a1 = v18;
        }
      }
      return;
  }
}

uint64_t sub_1000DBD18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

uint64_t InfraAssociationStartEvent.init(channel:)(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL;
}

void __swiftcall InfraAssociationJoinStatus.SubstateInformation.init(bssid:authorizationStatus:associationStatus:setSSIDStatus:supplicantEventStatus:)(CoreP2P::InfraAssociationJoinStatus::SubstateInformation *__return_ptr retstr, CoreP2P::WiFiAddress *bssid, CoreP2P::IEEE80211StatusAndReason_optional authorizationStatus, CoreP2P::IEEE80211StatusAndReason_optional associationStatus, CoreP2P::IEEE80211StatusAndReason_optional setSSIDStatus, CoreP2P::IEEE80211StatusAndReason_optional supplicantEventStatus)
{
}

__n128 InfraAssociationReadyEvent.init(status:ipAddress:)@<Q0>(__int16 a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_1000DBD94(a2, (uint64_t)v8);
  char v5 = v9;
  __n128 result = (__n128)v8[0];
  long long v7 = v8[1];
  *(_WORD *)a3  = a1;
  *(__n128 *)(a3 + 8)  = result;
  *(_OWORD *)(a3 + 24)  = v7;
  *(unsigned char *)(a3 + 40)  = v5;
  return result;
}

uint64_t sub_1000DBD94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010BCC(&qword_10047EEA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void InfraScanStartEvent.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = (unsigned __int8 *)(a2 + 37);
    do
    {
      char v6 = *(v4 - 1);
      int v7 = *v4;
      Hasher._combine(_:)(*(_DWORD *)(v4 - 5));
      Hasher._combine(_:)(0x801004u >> (8 * v6));
      switch(v7)
      {
        case 2:
          Swift::UInt v5 = 0;
          goto LABEL_4;
        case 3:
          Swift::UInt v5 = 1;
          goto LABEL_4;
        case 4:
          Swift::UInt v5 = 3;
          goto LABEL_4;
        case 5:
          Swift::UInt v5 = 4;
          goto LABEL_4;
        case 6:
          Swift::UInt v5 = 5;
LABEL_4:
          Hasher._combine(_:)(v5);
          break;
        default:
          Hasher._combine(_:)(2uLL);
          Hasher._combine(_:)(v7 & 1);
          break;
      }
      v4 += 8;
      --v3;
    }
    while (v3);
  }
}

Swift::Int InfraScanStartEvent.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  sub_10009ECDC((uint64_t)v3, a1);
  return Hasher._finalize()();
}

Swift::Int sub_1000DBF44()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  sub_10009ECDC((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_1000DBF8C(uint64_t a1)
{
  InfraScanStartEvent.hash(into:)(a1, *v1);
}

Swift::Int sub_1000DBF94()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  InfraScanStartEvent.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t sub_1000DBFD8(uint64_t *a1, uint64_t *a2)
{
  return _s7CoreP2P19InfraScanStartEventV23__derived_struct_equalsySbAC_ACtFZ_0(*a1, *a2);
}

uint64_t InfraAssociationStartEvent.channel.setter(uint64_t result)
{
  *(_DWORD *)uint64_t v1 = result;
  *(unsigned char *)(v1 + 4)  = BYTE4(result);
  *(unsigned char *)(v1 + 5)  = BYTE5(result);
  return result;
}

void InfraAssociationStartEvent.hash(into:)(int a1, unint64_t a2)
{
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(0x801004u >> ((a2 >> 29) & 0xF8));
  switch(BYTE5(a2))
  {
    case 2:
      Swift::UInt v3 = 0;
      goto LABEL_8;
    case 3:
      Swift::UInt v3 = 1;
      goto LABEL_8;
    case 4:
      Swift::UInt v3 = 3;
      goto LABEL_8;
    case 5:
      Swift::UInt v3 = 4;
      goto LABEL_8;
    case 6:
      Swift::UInt v3 = 5;
LABEL_8:
      Hasher._combine(_:)(v3);
      break;
    default:
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(BYTE5(a2) & 1);
      break;
  }
}

uint64_t static InfraAssociationStartEvent.__derived_struct_equals(_:_:)(unint64_t a1, unint64_t a2)
{
  if (a1 != a2
    || ((0x801004u >> ((a1 >> 29) & 0xF8)) & 0xFFC) != ((0x801004u >> ((a2 >> 29) & 0xF8)) & 0xFFC))
  {
    return 0;
  }
  switch(BYTE5(a1))
  {
    case 2:
      if (BYTE5(a2) != 2) {
        return 0;
      }
      uint64_t result = 1;
      break;
    case 3:
      if (BYTE5(a2) != 3) {
        return 0;
      }
      uint64_t result = 1;
      break;
    case 4:
      if (BYTE5(a2) != 4) {
        return 0;
      }
      uint64_t result = 1;
      break;
    case 5:
      if (BYTE5(a2) != 5) {
        return 0;
      }
      uint64_t result = 1;
      break;
    case 6:
      if (BYTE5(a2) != 6) {
        return 0;
      }
      uint64_t result = 1;
      break;
    default:
      if (BYTE5(a2) - 2 < 5 || ((a1 & 0x10000000000) == 0) == ((a2 >> 40) & 1)) {
        return 0;
      }
      uint64_t result = 1;
      break;
  }
  return result;
}

Swift::Int InfraAssociationStartEvent.hashValue.getter(unint64_t a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(0x801004u >> ((a1 >> 29) & 0xF8));
  switch(BYTE5(a1))
  {
    case 2:
      Swift::UInt v2 = 0;
      goto LABEL_8;
    case 3:
      Swift::UInt v2 = 1;
      goto LABEL_8;
    case 4:
      Swift::UInt v2 = 3;
      goto LABEL_8;
    case 5:
      Swift::UInt v2 = 4;
      goto LABEL_8;
    case 6:
      Swift::UInt v2 = 5;
LABEL_8:
      Hasher._combine(_:)(v2);
      break;
    default:
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(BYTE5(a1) & 1);
      break;
  }
  return Hasher._finalize()();
}

Swift::Int sub_1000DC2C4()
{
  return InfraAssociationStartEvent.hashValue.getter(*v0 | ((unint64_t)*((unsigned __int8 *)v0 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v0 + 5) << 40));
}

void sub_1000DC2DC(int a1)
{
  InfraAssociationStartEvent.hash(into:)(a1, *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v1 + 5) << 40));
}

Swift::Int sub_1000DC2F4()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  char v2 = *(unsigned char *)(v0 + 4);
  int v3 = *(unsigned __int8 *)(v0 + 5);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(0x801004u >> (8 * v2));
  switch(v3)
  {
    case 2:
      Swift::UInt v4 = 0;
      goto LABEL_8;
    case 3:
      Swift::UInt v4 = 1;
      goto LABEL_8;
    case 4:
      Swift::UInt v4 = 3;
      goto LABEL_8;
    case 5:
      Swift::UInt v4 = 4;
      goto LABEL_8;
    case 6:
      Swift::UInt v4 = 5;
LABEL_8:
      Hasher._combine(_:)(v4);
      break;
    default:
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(v3 & 1);
      break;
  }
  return Hasher._finalize()();
}

uint64_t sub_1000DC3FC(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2
    || ((0x801004u >> (8 * *(unsigned char *)(a1 + 4))) & 0xFFC) != ((0x801004u >> (8 * *(unsigned char *)(a2 + 4))) & 0xFFC))
  {
    return 0;
  }
  int v2 = *(unsigned __int8 *)(a2 + 5);
  switch(*(unsigned char *)(a1 + 5))
  {
    case 2:
      if (v2 != 2) {
        return 0;
      }
      break;
    case 3:
      if (v2 != 3) {
        return 0;
      }
      break;
    case 4:
      if (v2 != 4) {
        return 0;
      }
      break;
    case 5:
      if (v2 != 5) {
        return 0;
      }
      break;
    case 6:
      if (v2 != 6) {
        return 0;
      }
      break;
    default:
      if ((v2 - 2) < 5 || ((((*(unsigned char *)(a1 + 5) & 1) == 0) ^ v2) & 1) == 0) {
        return 0;
      }
      break;
  }
  return 1;
}

uint64_t InfraAssociationJoinStatus.SubstateInformation.bssid.setter(uint64_t result)
{
  *(_WORD *)uint64_t v1 = result;
  *(unsigned char *)(v1 + 2)  = BYTE2(result);
  *(unsigned char *)(v1 + 3)  = BYTE3(result);
  *(unsigned char *)(v1 + 4)  = BYTE4(result);
  *(unsigned char *)(v1 + 5)  = BYTE5(result);
  return result;
}

unint64_t IEEE80211InformationElement.VeryHighThroughputCapability.rxHighLGIRate.getter(unint64_t a1)
{
  return HIWORD(a1);
}

uint64_t IEEE80211InformationElement.VeryHighThroughputCapability.rxHighLGIRate.setter(uint64_t result)
{
  *(_WORD *)(v1 + 6)  = result;
  return result;
}

uint64_t IEEE80211InformationElement.VeryHighThroughputCapability.txMCSMap.setter(uint64_t result)
{
  *(_WORD *)(v1 + 8)  = result;
  return result;
}

unint64_t InfraAssociationJoinStatus.SubstateInformation.setSSIDStatus.getter(uint64_t a1, unint64_t a2)
{
  return a2 >> 16;
}

uint64_t IEEE80211InformationElement.VeryHighThroughputCapability.txHighLGIRate.setter(uint64_t result)
{
  *(_WORD *)(v1 + 10)  = result;
  return result;
}

uint64_t (*IEEE80211InformationElement.VeryHighThroughputCapability.txHighLGIRate.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

unint64_t InfraAssociationJoinStatus.SubstateInformation.supplicantEventStatus.getter(uint64_t a1, unint64_t a2)
{
  return HIDWORD(a2);
}

uint64_t InfraAssociationJoinStatus.SubstateInformation.supplicantEventStatus.setter(uint64_t result)
{
  *(_WORD *)(v1 + 12)  = result;
  return result;
}

uint64_t (*InfraAssociationJoinStatus.SubstateInformation.supplicantEventStatus.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

void InfraAssociationJoinStatus.SubstateInformation.hash(into:)(int a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = a2 >> 8;
  unint64_t v6 = a2 >> 16;
  unint64_t v7 = a2 >> 24;
  unint64_t v8 = HIDWORD(a2);
  unint64_t v9 = a2 >> 40;
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  if (HIBYTE(a2) == 34)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(word_1003B864E[(uint64_t)(a2 << 8) >> 56]);
    Hasher._combine(_:)(word_1003B86BA[(uint64_t)a2 >> 56]);
  }
  if ((a3 & 0xFF00) == 0x2200)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(word_1003B864E[(char)a3]);
    Hasher._combine(_:)(word_1003B86BA[(uint64_t)(__int16)a3 >> 8]);
  }
  if ((a3 & 0xFF000000) == 0x22000000)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(word_1003B864E[a3 << 40 >> 56]);
    Hasher._combine(_:)(word_1003B86BA[(uint64_t)(int)a3 >> 24]);
  }
  if ((a3 & 0xFF0000000000) == 0x220000000000)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(word_1003B864E[a3 << 24 >> 56]);
    Hasher._combine(_:)(word_1003B86BA[a3 << 16 >> 56]);
  }
}

BOOL static InfraAssociationJoinStatus.SubstateInformation.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000DD0D0(a1, a2 & 0xFFFFFFFFFFFFLL, a3, a4 & 0xFFFFFFFFFFFFLL);
}

Swift::Int InfraAssociationJoinStatus.SubstateInformation.hashValue.getter(unint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  InfraAssociationJoinStatus.SubstateInformation.hash(into:)((int)&v5, a1, a2 & 0xFFFFFFFFFFFFLL);
  return Hasher._finalize()();
}

Swift::Int sub_1000DC770()
{
  uint64_t v1 = *(unsigned int *)(v0 + 8);
  uint64_t v2 = *(unsigned __int16 *)(v0 + 12);
  unint64_t v3 = *(void *)v0;
  Hasher.init(_seed:)();
  InfraAssociationJoinStatus.SubstateInformation.hash(into:)((int)&v5, v3, v1 | (v2 << 32));
  return Hasher._finalize()();
}

void sub_1000DC7CC(int a1)
{
  InfraAssociationJoinStatus.SubstateInformation.hash(into:)(a1, *(void *)v1, *(unsigned int *)(v1 + 8) | ((unint64_t)*(unsigned __int16 *)(v1 + 12) << 32));
}

Swift::Int sub_1000DC7E0()
{
  uint64_t v1 = *(unsigned int *)(v0 + 8);
  uint64_t v2 = *(unsigned __int16 *)(v0 + 12);
  unint64_t v3 = *(void *)v0;
  Hasher.init(_seed:)();
  InfraAssociationJoinStatus.SubstateInformation.hash(into:)((int)&v5, v3, v1 | (v2 << 32));
  return Hasher._finalize()();
}

BOOL sub_1000DC838(uint64_t a1, uint64_t a2)
{
  return sub_1000DD0D0(*(void *)a1, *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int16 *)(a1 + 12) << 32), *(void *)a2, *(unsigned int *)(a2 + 8) | ((unint64_t)*(unsigned __int16 *)(a2 + 12) << 32));
}

uint64_t InfraAssociationJoinStatus.returnValue.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 8)  = result;
  return result;
}

uint64_t InfraAssociationJoinStatus.ieeeStatus.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 12)  = result;
  return result;
}

uint64_t NANDataRequestReceivedEvent.attributes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t IEEE80211InformationElement.RSNCapability.authenticationKeyManagementSuites.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16)  = a1;
  return result;
}

uint64_t NANBeacon.Metadata.tsf.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t InfraAssociationJoinStatus.extensionReturnValue.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 24)  = result;
  return result;
}

uint64_t (*NANBeacon.Metadata.tsf.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

void InfraAssociationJoinStatus.hash(into:)(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, Swift::UInt32 a5)
{
  Swift::UInt32 v7 = a3;
  unint64_t v9 = a2 >> 8;
  unint64_t v10 = a2 >> 16;
  unint64_t v11 = a2 >> 24;
  unint64_t v12 = HIDWORD(a2);
  unint64_t v13 = a2 >> 40;
  unint64_t v14 = HIDWORD(a3);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v14);
  sub_10009E9F4(a1, a4);
  Hasher._combine(_:)(a5);
}

uint64_t static InfraAssociationJoinStatus.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return sub_1000DD31C(a1 & 0xFFFFFFFFFFFFLL, a2, a3, a4, a5 & 0xFFFFFFFFFFFFLL, a6, a7, a8);
}

Swift::Int InfraAssociationJoinStatus.hashValue.getter(unint64_t a1, unint64_t a2, uint64_t a3, Swift::UInt32 a4)
{
  Swift::UInt32 v5 = a2;
  Swift::UInt8 v6 = a1;
  unint64_t v7 = a1 >> 8;
  unint64_t v8 = a1 >> 16;
  unint64_t v9 = a1 >> 24;
  unint64_t v10 = HIDWORD(a1);
  unint64_t v11 = a1 >> 40;
  unint64_t v12 = HIDWORD(a2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v12);
  sub_10009E9F4((uint64_t)v15, a3);
  Hasher._combine(_:)(a4);
  return Hasher._finalize()();
}

Swift::Int sub_1000DCA90()
{
  Swift::UInt32 v1 = *(_DWORD *)(v0 + 8);
  Swift::UInt32 v2 = *(_DWORD *)(v0 + 12);
  uint64_t v3 = *(void *)(v0 + 16);
  Swift::UInt32 v11 = *(_DWORD *)(v0 + 24);
  Swift::UInt8 v4 = *(unsigned char *)v0;
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 1);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 2);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 3);
  Swift::UInt8 v8 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v9 = *(unsigned char *)(v0 + 5);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  sub_10009E9F4((uint64_t)v12, v3);
  Hasher._combine(_:)(v11);
  return Hasher._finalize()();
}

void sub_1000DCB88(uint64_t a1)
{
  Swift::UInt32 v3 = *(_DWORD *)(v1 + 8);
  Swift::UInt32 v4 = *(_DWORD *)(v1 + 12);
  uint64_t v5 = *(void *)(v1 + 16);
  Swift::UInt32 v11 = *(_DWORD *)(v1 + 24);
  Swift::UInt8 v6 = *(unsigned char *)(v1 + 1);
  Swift::UInt8 v7 = *(unsigned char *)(v1 + 2);
  Swift::UInt8 v8 = *(unsigned char *)(v1 + 3);
  Swift::UInt8 v9 = *(unsigned char *)(v1 + 4);
  Swift::UInt8 v10 = *(unsigned char *)(v1 + 5);
  Hasher._combine(_:)(*(unsigned char *)v1);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  sub_10009E9F4(a1, v5);
  Hasher._combine(_:)(v11);
}

Swift::Int sub_1000DCC4C()
{
  Swift::UInt32 v1 = *(_DWORD *)(v0 + 8);
  Swift::UInt32 v2 = *(_DWORD *)(v0 + 12);
  uint64_t v3 = *(void *)(v0 + 16);
  Swift::UInt32 v11 = *(_DWORD *)(v0 + 24);
  Swift::UInt8 v4 = *(unsigned char *)v0;
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 1);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 2);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 3);
  Swift::UInt8 v8 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v9 = *(unsigned char *)(v0 + 5);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  sub_10009E9F4((uint64_t)v12, v3);
  Hasher._combine(_:)(v11);
  return Hasher._finalize()();
}

uint64_t sub_1000DCD40(unsigned int *a1, unsigned int *a2)
{
  return sub_1000DD31C(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 5) << 40), *((void *)a1 + 1), *((void *)a1 + 2), a1[6], *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 40), *((void *)a2 + 1), *((void *)a2 + 2), a2[6]);
}

uint64_t InfraAssociationReadyEvent.ipAddress.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000DD3F0(v1 + 8, a1);
}

uint64_t InfraAssociationReadyEvent.ipAddress.setter(uint64_t a1)
{
  return sub_1000DD458(a1, v1 + 8);
}

void InfraAssociationReadyEvent.hash(into:)()
{
  Hasher._combine(_:)(*(_WORD *)v0);
  int v1 = *(unsigned __int8 *)(v0 + 40);
  if (v1 == 255)
  {
    Hasher._combine(_:)(0);
    return;
  }
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = *(void *)(v0 + 32);
  Hasher._combine(_:)(1u);
  if (v1)
  {
    v10[0]  = v2;
    v10[1]  = v3;
    swift_bridgeObjectRetain_n();
    uint64_t v7 = sub_10011A3BC((uint64_t)v10, (uint64_t)&v11);
    unint64_t v9 = v8;
    Data.hash(into:)();
    sub_10000C970(v7, v9);
    if (v5)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      sub_1000DDEF4(v0, (void (*)(void, void, void, void, void))sub_10006CA80);
      sub_1000DDEF4(v0, (void (*)(void, void, void, void, void))sub_10006CA80);
      sub_1000DDEF4(v0, (void (*)(void, void, void, void, void))sub_10006CA80);
      sub_10006CA98(v2, v3, v4, v5, 1);
      return;
    }
    Hasher._combine(_:)(0);
    sub_1000DDEF4(v0, (void (*)(void, void, void, void, void))sub_10006CA80);
    uint64_t v6 = v0;
  }
  else
  {
    Hasher._combine(_:)(v2);
    uint64_t v6 = v0;
  }
  sub_1000DDEF4(v6, (void (*)(void, void, void, void, void))sub_10006CA80);
  sub_1000DDEF4(v0, (void (*)(void, void, void, void, void))sub_10006CA80);
}

Swift::Int InfraAssociationReadyEvent.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000DCFA4()
{
  return Hasher._finalize()();
}

void sub_1000DCFF8()
{
}

Swift::Int sub_1000DD034()
{
  return Hasher._finalize()();
}

uint64_t sub_1000DD084(long long *a1, long long *a2)
{
  long long v2 = a1[1];
  long long v5 = *a1;
  v6[0]  = v2;
  *(_OWORD *)((char *)v6 + 9)  = *(long long *)((char *)a1 + 25);
  long long v3 = a2[1];
  long long v7 = *a2;
  v8[0]  = v3;
  *(_OWORD *)((char *)v8 + 9)  = *(long long *)((char *)a2 + 25);
  return _s7CoreP2P26InfraAssociationReadyEventV23__derived_struct_equalsySbAC_ACtFZ_0((unsigned __int16 *)&v5, (unsigned __int16 *)&v7) & 1;
}

BOOL sub_1000DD0D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  LOBYTE(v11)  = BYTE4(a1);
  HIBYTE(v11)  = BYTE5(a1);
  LOBYTE(v10)  = BYTE4(a3);
  HIBYTE(v10)  = BYTE5(a3);
  if (a1 != a3 || v11 != v10) {
    return 0;
  }
  unint64_t v6 = a3 & 0xFF00000000000000;
  if (HIBYTE(a1) == 34)
  {
    if (v6 != 0x2200000000000000) {
      return 0;
    }
  }
  else if (v6 == 0x2200000000000000 {
         || word_1003B864E[a1 << 8 >> 56] != word_1003B864E[a3 << 8 >> 56]
  }
         || word_1003B86BA[a1 >> 56] != word_1003B86BA[a3 >> 56])
  {
    return 0;
  }
  uint64_t v7 = (unsigned __int16)a4 & 0xFF00;
  if ((a2 & 0xFF00) == 0x2200)
  {
    if (v7 != 8704) {
      return 0;
    }
  }
  else if (v7 == 8704 {
         || word_1003B864E[(char)a2] != word_1003B864E[(char)a4]
  }
         || word_1003B86BA[(uint64_t)(__int16)a2 >> 8] != word_1003B86BA[(uint64_t)(__int16)a4 >> 8])
  {
    return 0;
  }
  uint64_t v8 = a4 & 0xFF000000;
  if ((a2 & 0xFF000000) == 0x22000000)
  {
    if (v8 != 570425344) {
      return 0;
    }
  }
  else if (v8 == 570425344 {
         || word_1003B864E[a2 << 40 >> 56] != word_1003B864E[a4 << 40 >> 56]
  }
         || word_1003B86BA[(uint64_t)(int)a2 >> 24] != word_1003B86BA[(uint64_t)(int)a4 >> 24])
  {
    return 0;
  }
  uint64_t v9 = a4 & 0xFF0000000000;
  if ((a2 & 0xFF0000000000) != 0x220000000000) {
    return v9 != 0x220000000000
  }
        && word_1003B864E[a2 << 24 >> 56] == word_1003B864E[a4 << 24 >> 56]
        && word_1003B86BA[a2 << 16 >> 56] == word_1003B86BA[a4 << 16 >> 56];
  return v9 == 0x220000000000;
}

uint64_t sub_1000DD31C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  LOBYTE(v14)  = BYTE4(a1);
  HIBYTE(v14)  = BYTE5(a1);
  LOBYTE(v13)  = BYTE4(a5);
  HIBYTE(v13)  = BYTE5(a5);
  if (a1 == a5 && v14 == v13 && a2 == a6 && HIDWORD(a2) == HIDWORD(a6)) {
    return sub_100099370(a3, a7) & (a4 == a8);
  }
  else {
    return 0;
  }
}

uint64_t sub_1000DD3F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010BCC(&qword_10047EEA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000DD458(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010BCC(&qword_10047EEA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t _s7CoreP2P26InfraAssociationReadyEventV23__derived_struct_equalsySbAC_ACtFZ_0(unsigned __int16 *a1, unsigned __int16 *a2)
{
  if (*a1 == *a2)
  {
    int v4 = *((unsigned __int8 *)a1 + 40);
    int v5 = *((unsigned __int8 *)a2 + 40);
    if (v4 == 255)
    {
      if (v5 == 255) {
        return 1;
      }
    }
    else if (v5 != 255)
    {
      uint64_t v7 = *((void *)a1 + 1);
      uint64_t v8 = *((void *)a2 + 1);
      if (v4)
      {
        if (v5)
        {
          uint64_t v9 = *((void *)a1 + 3);
          uint64_t v15 = *((void *)a1 + 2);
          uint64_t v10 = *((void *)a1 + 4);
          uint64_t v11 = *((void *)a2 + 2);
          uint64_t v12 = *((void *)a2 + 3);
          uint64_t v13 = *((void *)a2 + 4);
          sub_1000DDEF4((uint64_t)a2, (void (*)(void, void, void, void, void))sub_1000DDF34);
          sub_1000DDEF4((uint64_t)a1, (void (*)(void, void, void, void, void))sub_1000DDF34);
          char v14 = _s7CoreP2P11IPv6AddressV2eeoiySbAC_ACtFZ_0(v7, v15, v9, v10, v8, v11, v12, v13);
          sub_1000DDEF4((uint64_t)a2, (void (*)(void, void, void, void, void))sub_10006CA80);
          sub_1000DDEF4((uint64_t)a1, (void (*)(void, void, void, void, void))sub_10006CA80);
          if (v14) {
            return 1;
          }
        }
      }
      else if ((v5 & 1) == 0 && v7 == v8)
      {
        return 1;
      }
    }
  }
  return 0;
}

unint64_t sub_1000DD604()
{
  unint64_t result = qword_10047EEB0;
  if (!qword_10047EEB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047EEB0);
  }
  return result;
}

unint64_t sub_1000DD65C()
{
  unint64_t result = qword_10047EEB8;
  if (!qword_10047EEB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047EEB8);
  }
  return result;
}

unint64_t sub_1000DD6B4()
{
  unint64_t result = qword_10047EEC0;
  if (!qword_10047EEC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047EEC0);
  }
  return result;
}

unint64_t sub_1000DD70C()
{
  unint64_t result = qword_10047EEC8;
  if (!qword_10047EEC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047EEC8);
  }
  return result;
}

unint64_t sub_1000DD764()
{
  unint64_t result = qword_10047EED0;
  if (!qword_10047EED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047EED0);
  }
  return result;
}

unint64_t sub_1000DD7BC()
{
  unint64_t result = qword_10047EED8;
  if (!qword_10047EED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047EED8);
  }
  return result;
}

ValueMetadata *type metadata accessor for InfraScanStartEvent()
{
  return &type metadata for InfraScanStartEvent;
}

ValueMetadata *type metadata accessor for InfraScanCompleteEvent()
{
  return &type metadata for InfraScanCompleteEvent;
}

uint64_t initializeBufferWithCopyOfBuffer for Channel(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(_WORD *)(result + 4)  = *((_WORD *)a2 + 2);
  *(_DWORD *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for Channel(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 6)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 4);
  BOOL v4 = v3 >= 3;
  int v5 = v3 - 3;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Channel(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_WORD *)(result + 4)  = 0;
    *(_DWORD *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 6)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 6)  = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 4)  = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InfraAssociationStartEvent()
{
  return &type metadata for InfraAssociationStartEvent;
}

uint64_t destroy for NANAttribute.RangingSetup()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for InfraAssociationJoinStatus(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4)  = *(_WORD *)(a2 + 4);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24)  = *(_DWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for InfraAssociationJoinStatus(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1)  = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2)  = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3)  = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(a1 + 4)  = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a1 + 5)  = *(unsigned char *)(a2 + 5);
  *(_DWORD *)(a1 + 8)  = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12)  = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24)  = *(_DWORD *)(a2 + 24);
  return a1;
}

__n128 initializeWithTake for InfraAssociationJoinStatus(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12)  = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1  = result;
  return result;
}

uint64_t assignWithTake for InfraAssociationJoinStatus(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4)  = *(_WORD *)(a2 + 4);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24)  = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for InfraAssociationJoinStatus(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 28)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InfraAssociationJoinStatus(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8)  = 0;
    *(void *)(result + 16)  = 0;
    *(_DWORD *)(result + 24)  = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 28)  = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16)  = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 28)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InfraAssociationJoinStatus()
{
  return &type metadata for InfraAssociationJoinStatus;
}

void *initializeBufferWithCopyOfBuffer for NANDataEstablishedEvent(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)((char *)result + 6)  = *(uint64_t *)((char *)a2 + 6);
  *__n128 result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for InfraAssociationJoinStatus.SubstateInformation(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xDE && *(unsigned char *)(a1 + 14)) {
    return (*(_DWORD *)a1 + 222);
  }
  if (*(unsigned __int8 *)(a1 + 7) <= 0x22u) {
    int v3 = 34;
  }
  else {
    int v3 = *(unsigned __int8 *)(a1 + 7);
  }
  int v4 = v3 - 35;
  if (*(unsigned __int8 *)(a1 + 7) < 0x22u) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for InfraAssociationJoinStatus.SubstateInformation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xDD)
  {
    *(_WORD *)(result + 12)  = 0;
    *(_DWORD *)(result + 8)  = 0;
    *(void *)__n128 result = a2 - 222;
    if (a3 >= 0xDE) {
      *(unsigned char *)(result + 14)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xDE) {
      *(unsigned char *)(result + 14)  = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 7)  = a2 + 34;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InfraAssociationJoinStatus.SubstateInformation()
{
  return &type metadata for InfraAssociationJoinStatus.SubstateInformation;
}

uint64_t destroy for InfraAssociationReadyEvent(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 40);
  if (v1 != 255) {
    return sub_10006CA98(*(void *)(result + 8), *(void *)(result + 16), *(void *)(result + 24), *(void *)(result + 32), v1 & 1);
  }
  return result;
}

uint64_t initializeWithCopy for InfraAssociationReadyEvent(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  int v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 == 255)
  {
    long long v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24)  = v4;
    *(unsigned char *)(a1 + 40)  = *(unsigned char *)(a2 + 40);
  }
  else
  {
    char v5 = v3 & 1;
    uint64_t v6 = *(void *)(a2 + 8);
    uint64_t v7 = *(void *)(a2 + 16);
    uint64_t v8 = *(void *)(a2 + 24);
    uint64_t v9 = *(void *)(a2 + 32);
    sub_10006D100(v6, v7, v8, v9, v3 & 1);
    *(void *)(a1 + 8)  = v6;
    *(void *)(a1 + 16)  = v7;
    *(void *)(a1 + 24)  = v8;
    *(void *)(a1 + 32)  = v9;
    *(unsigned char *)(a1 + 40)  = v5;
  }
  return a1;
}

uint64_t assignWithCopy for InfraAssociationReadyEvent(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  uint64_t v3 = a1 + 8;
  long long v4 = (long long *)(a2 + 8);
  int v5 = *(unsigned __int8 *)(a2 + 40);
  if (*(unsigned __int8 *)(a1 + 40) == 255)
  {
    if (v5 == 255)
    {
      long long v8 = *v4;
      long long v9 = *(_OWORD *)(a2 + 24);
      *(unsigned char *)(a1 + 40)  = *(unsigned char *)(a2 + 40);
      *(_OWORD *)uint64_t v3 = v8;
      *(_OWORD *)(a1 + 24)  = v9;
    }
    else
    {
      char v20 = v5 & 1;
      uint64_t v21 = *(void *)(a2 + 8);
      uint64_t v22 = *(void *)(a2 + 16);
      uint64_t v23 = *(void *)(a2 + 24);
      uint64_t v24 = *(void *)(a2 + 32);
      sub_10006D100(v21, v22, v23, v24, v5 & 1);
      *(void *)(a1 + 8)  = v21;
      *(void *)(a1 + 16)  = v22;
      *(void *)(a1 + 24)  = v23;
      *(void *)(a1 + 32)  = v24;
      *(unsigned char *)(a1 + 40)  = v20;
    }
  }
  else if (v5 == 255)
  {
    sub_1000DDD4C(a1 + 8);
    char v6 = *((unsigned char *)v4 + 32);
    long long v7 = v4[1];
    *(_OWORD *)uint64_t v3 = *v4;
    *(_OWORD *)(v3 + 16)  = v7;
    *(unsigned char *)(v3 + 32)  = v6;
  }
  else
  {
    char v10 = v5 & 1;
    uint64_t v11 = *(void *)(a2 + 8);
    uint64_t v12 = *(void *)(a2 + 16);
    uint64_t v13 = *(void *)(a2 + 24);
    uint64_t v14 = *(void *)(a2 + 32);
    sub_10006D100(v11, v12, v13, v14, v5 & 1);
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v16 = *(void *)(a1 + 16);
    uint64_t v17 = *(void *)(a1 + 24);
    uint64_t v18 = *(void *)(a1 + 32);
    char v19 = *(unsigned char *)(a1 + 40);
    *(void *)(a1 + 8)  = v11;
    *(void *)(a1 + 16)  = v12;
    *(void *)(a1 + 24)  = v13;
    *(void *)(a1 + 32)  = v14;
    *(unsigned char *)(a1 + 40)  = v10;
    sub_10006CA98(v15, v16, v17, v18, v19);
  }
  return a1;
}

uint64_t sub_1000DDD4C(uint64_t a1)
{
  uint64_t v2 = sub_100010BCC(&qword_10047DBA0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t assignWithTake for InfraAssociationReadyEvent(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  uint64_t v3 = a1 + 8;
  uint64_t v4 = a2 + 8;
  int v5 = *(unsigned __int8 *)(a1 + 40);
  if (v5 != 255)
  {
    int v6 = *(unsigned __int8 *)(a2 + 40);
    if (v6 != 255)
    {
      char v8 = v5 & 1;
      uint64_t v9 = *(void *)(a1 + 8);
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v11 = *(void *)(a1 + 24);
      uint64_t v12 = *(void *)(a1 + 32);
      *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a1 + 24)  = *(_OWORD *)(a2 + 24);
      *(unsigned char *)(a1 + 40)  = v6 & 1;
      sub_10006CA98(v9, v10, v11, v12, v8);
      return a1;
    }
    sub_1000DDD4C(a1 + 8);
  }
  long long v7 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)uint64_t v3 = *(_OWORD *)v4;
  *(_OWORD *)(v3 + 16)  = v7;
  *(unsigned char *)(v3 + 32)  = *(unsigned char *)(v4 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for InfraAssociationReadyEvent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = (v3 ^ 0xFF) - 1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for InfraAssociationReadyEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(unsigned char *)(result + 40)  = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 41)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 41)  = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40)  = ~(_BYTE)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InfraAssociationReadyEvent()
{
  return &type metadata for InfraAssociationReadyEvent;
}

uint64_t sub_1000DDEF4(uint64_t a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t sub_1000DDF34(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 != 255) {
    return sub_10006D100(result, a2, a3, a4, a5 & 1);
  }
  return result;
}

BOOL sub_1000DDF4C()
{
  uint64_t v0 = type metadata accessor for DispatchTimeInterval();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  unsigned int v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = enum case for DispatchTimeInterval.never(_:);
  int v5 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 104);
  v5(v3, enum case for DispatchTimeInterval.never(_:), v0);
  char v6 = static DispatchTimeInterval.== infix(_:_:)();
  long long v7 = *(void (**)(char *, uint64_t))(v1 + 8);
  v7(v3, v0);
  if (v6) {
    return 1;
  }
  v5(v3, v4, v0);
  char v9 = static DispatchTimeInterval.== infix(_:_:)();
  v7(v3, v0);
  if (v9) {
    return 0;
  }
  uint64_t v10 = sub_1001ADA80();
  return v10 >= sub_1001ADA80();
}

uint64_t sub_1000DE0CC(char a1, unsigned __int8 a2)
{
  int v4 = a2;
  sub_100010BCC(&qword_10047EEE0);
  if (v4 == 2) {
    return 1;
  }
  if (a1 == 2) {
    return 0;
  }
  if (a2 == 3) {
    return 1;
  }
  if (a1 == 3) {
    return 0;
  }
  if ((a2 - 2) >= 5u && (a2 & 1) == 0) {
    return 1;
  }
  if ((a1 - 2) >= 5u && (a1 & 1) == 0) {
    return 0;
  }
  if (a2 - 2) >= 5u && (a2) {
    return 1;
  }
  if (a1 - 2) >= 5u && (a1) {
    return 0;
  }
  if (a2 == 4) {
    return 1;
  }
  if (a1 == 4) {
    return 0;
  }
  if (a2 == 5) {
    return 1;
  }
  if (a1 == 5) {
    return 0;
  }
  if (a2 == 6) {
    return 1;
  }
  if (a1 == 6) {
    return 0;
  }
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

BOOL sub_1000DE1DC(uint64_t a1, uint64_t a2)
{
  if ((a1 & 0x100000000) != 0) {
    LODWORD(a1)  = dword_1003B8E80[(int)a1];
  }
  if ((a2 & 0x100000000) != 0) {
    LODWORD(a2)  = dword_1003B8E80[(int)a2];
  }
  return a1 >= a2;
}

void sub_1000DE208()
{
  static Bandwidth.allCases  = (uint64_t)&off_100450180;
}

uint64_t *Bandwidth.allCases.unsafeMutableAddressor()
{
  if (qword_10047BFA0 != -1) {
    swift_once();
  }
  return &static Bandwidth.allCases;
}

uint64_t static Bandwidth.allCases.getter()
{
  if (qword_10047BFA0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static Bandwidth.allCases.setter(uint64_t a1)
{
  if (qword_10047BFA0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  static Bandwidth.allCases  = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static Bandwidth.allCases.modify())()
{
  if (qword_10047BFA0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t Bandwidth.suffix.getter(unsigned __int8 a1)
{
  int v2 = a1 - 2;
  uint64_t result = 0;
  switch(v2)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t result = 11051;
      break;
    case 3:
      uint64_t result = 30840;
      break;
    case 4:
      uint64_t result = 31097;
      break;
    default:
      if (a1) {
        uint64_t result = 43;
      }
      else {
        uint64_t result = 45;
      }
      break;
  }
  return result;
}

uint64_t Bandwidth.description.getter(unsigned __int8 a1)
{
  int v2 = a1 - 2;
  uint64_t result = 0x7A484D203031;
  switch(v2)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = 0x7A484D203032;
      break;
    case 2:
      uint64_t result = 0x7A484D203038;
      break;
    case 3:
      uint64_t result = 0x7A484D20303631;
      break;
    case 4:
      uint64_t result = 0x7A484D20303233;
      break;
    default:
      if (a1) {
        uint64_t result = 0x7A484D202B3034;
      }
      else {
        uint64_t result = 0x7A484D202D3034;
      }
      break;
  }
  return result;
}

uint64_t Bandwidth.updateWithFloor(bandwidth:)(unsigned __int8 a1)
{
  int v3 = *v1;
  uint64_t result = sub_100010BCC(&qword_10047EEE0);
  if (v3 == 2) {
    goto LABEL_5;
  }
  if (a1 == 2) {
    goto LABEL_3;
  }
  if (v3 == 3) {
    goto LABEL_5;
  }
  if (a1 == 3) {
    goto LABEL_3;
  }
  if ((v3 - 2) >= 5 && (v3 & 1) == 0) {
    goto LABEL_5;
  }
  if ((a1 - 2) >= 5u && (a1 & 1) == 0) {
    goto LABEL_3;
  }
  if (v3 - 2) >= 5u && (v3) {
    goto LABEL_5;
  }
  if (a1 - 2) >= 5u && (a1) {
    goto LABEL_3;
  }
  if (v3 == 4) {
    goto LABEL_5;
  }
  if (a1 == 4) {
    goto LABEL_3;
  }
  if (v3 == 5) {
    goto LABEL_5;
  }
  if (a1 == 5)
  {
LABEL_3:
    a1  = v3;
LABEL_5:
    *uint64_t v1 = a1;
    return result;
  }
  if (v3 == 6) {
    goto LABEL_5;
  }
  int v5 = a1;
  a1  = v3;
  if (v5 == 6) {
    goto LABEL_5;
  }
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

void Bandwidth.hash(into:)(uint64_t a1, char a2)
{
  switch(a2)
  {
    case 2:
      Swift::UInt v2 = 0;
      goto LABEL_8;
    case 3:
      Swift::UInt v2 = 1;
      goto LABEL_8;
    case 4:
      Swift::UInt v2 = 3;
      goto LABEL_8;
    case 5:
      Swift::UInt v2 = 4;
      goto LABEL_8;
    case 6:
      Swift::UInt v2 = 5;
LABEL_8:
      Hasher._combine(_:)(v2);
      break;
    default:
      Swift::UInt8 v3 = a2 & 1;
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(v3);
      break;
  }
}

uint64_t static Bandwidth.__derived_enum_equals(_:_:)(char a1, unsigned __int8 a2)
{
  switch(a1)
  {
    case 2:
      if (a2 != 2) {
        goto LABEL_13;
      }
      goto LABEL_11;
    case 3:
      if (a2 != 3) {
        goto LABEL_13;
      }
      goto LABEL_11;
    case 4:
      if (a2 != 4) {
        goto LABEL_13;
      }
      goto LABEL_11;
    case 5:
      if (a2 != 5) {
        goto LABEL_13;
      }
      goto LABEL_11;
    case 6:
      if (a2 != 6) {
        goto LABEL_13;
      }
LABEL_11:
      uint64_t result = 1;
      break;
    default:
      if (a2 - 2 >= 5) {
        uint64_t result = (((a1 & 1) == 0) ^ a2) & 1;
      }
      else {
LABEL_13:
      }
        uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t sub_1000DE784()
{
  uint64_t result = 0x7A484D6E6574;
  switch(*v0)
  {
    case 1:
      unsigned int v2 = 1852143476;
      goto LABEL_5;
    case 2:
      uint64_t result = 0x7A484D7974726F66;
      break;
    case 3:
      unsigned int v2 = 1751607653;
LABEL_5:
      uint64_t result = v2 | 0x484D797400000000;
      break;
    case 4:
      uint64_t result = 0x7974786953656E6FLL;
      break;
    case 5:
      uint64_t result = 0x6577546565726874;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000DE854@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000E0E98(a1, a2);
  *a3  = result;
  return result;
}

void sub_1000DE87C(unsigned char *a1@<X8>)
{
  *a1  = 6;
}

uint64_t sub_1000DE888(uint64_t a1)
{
  unint64_t v2 = sub_1000DF860();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000DE8C4(uint64_t a1)
{
  unint64_t v2 = sub_1000DF860();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000DE900(uint64_t a1)
{
  unint64_t v2 = sub_1000DF95C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000DE93C(uint64_t a1)
{
  unint64_t v2 = sub_1000DF95C();

  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_1000DE978()
{
  return 0xD000000000000015;
}

uint64_t sub_1000DE994@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000E1168(a1, a2);
  *a3  = result & 1;
  return result;
}

uint64_t sub_1000DE9C0(uint64_t a1)
{
  unint64_t v2 = sub_1000DF9B0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000DE9FC(uint64_t a1)
{
  unint64_t v2 = sub_1000DF9B0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000DEA38(uint64_t a1)
{
  unint64_t v2 = sub_1000DF908();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000DEA74(uint64_t a1)
{
  unint64_t v2 = sub_1000DF908();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000DEAB0(uint64_t a1)
{
  unint64_t v2 = sub_1000DFA58();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000DEAEC(uint64_t a1)
{
  unint64_t v2 = sub_1000DFA58();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000DEB28(uint64_t a1)
{
  unint64_t v2 = sub_1000DF8B4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000DEB64(uint64_t a1)
{
  unint64_t v2 = sub_1000DF8B4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000DEBA0(uint64_t a1)
{
  unint64_t v2 = sub_1000DFA04();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000DEBDC(uint64_t a1)
{
  unint64_t v2 = sub_1000DFA04();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Bandwidth.encode(to:)(void *a1, unsigned __int8 a2)
{
  int v46 = a2;
  uint64_t v3 = sub_100010BCC(&qword_10047EEE8);
  uint64_t v42 = *(void *)(v3 - 8);
  uint64_t v43 = v3;
  __chkstk_darwin();
  unint64_t v41 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100010BCC(&qword_10047EEF0);
  uint64_t v39 = *(void *)(v5 - 8);
  uint64_t v40 = v5;
  __chkstk_darwin();
  uint64_t v38 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100010BCC(&qword_10047EEF8);
  uint64_t v36 = *(void *)(v7 - 8);
  uint64_t v37 = v7;
  __chkstk_darwin();
  int v35 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100010BCC(&qword_10047EF00);
  uint64_t v33 = *(void *)(v9 - 8);
  uint64_t v34 = v9;
  __chkstk_darwin();
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100010BCC(&qword_10047EF08);
  uint64_t v32 = *(void *)(v12 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100010BCC(&qword_10047EF10);
  uint64_t v31 = *(void *)(v15 - 8);
  __chkstk_darwin();
  uint64_t v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100010BCC(&qword_10047EF18);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v44 = v18;
  uint64_t v45 = v19;
  __chkstk_darwin();
  uint64_t v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_1000DF860();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch(v46)
  {
    case 2:
      char v47 = 0;
      sub_1000DFA58();
      uint64_t v22 = v44;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v17, v15);
      return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v21, v22);
    case 3:
      char v48 = 1;
      sub_1000DFA04();
      uint64_t v26 = v44;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v32 + 8))(v14, v12);
      goto LABEL_9;
    case 4:
      char v50 = 3;
      sub_1000DF95C();
      int v27 = v35;
      uint64_t v26 = v44;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v29 = v36;
      uint64_t v28 = v37;
      goto LABEL_8;
    case 5:
      char v51 = 4;
      sub_1000DF908();
      int v27 = v38;
      uint64_t v26 = v44;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v29 = v39;
      uint64_t v28 = v40;
      goto LABEL_8;
    case 6:
      char v52 = 5;
      sub_1000DF8B4();
      int v27 = v41;
      uint64_t v26 = v44;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v29 = v42;
      uint64_t v28 = v43;
LABEL_8:
      (*(void (**)(char *, uint64_t))(v29 + 8))(v27, v28);
LABEL_9:
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v21, v26);
      break;
    default:
      char v49 = 2;
      sub_1000DF9B0();
      uint64_t v24 = v44;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v25 = v34;
      KeyedEncodingContainer.encode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v25);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v21, v24);
      break;
  }
  return result;
}

Swift::Int Bandwidth.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  switch(a1)
  {
    case 2:
      Swift::UInt v2 = 0;
      goto LABEL_8;
    case 3:
      Swift::UInt v2 = 1;
      goto LABEL_8;
    case 4:
      Swift::UInt v2 = 3;
      goto LABEL_8;
    case 5:
      Swift::UInt v2 = 4;
      goto LABEL_8;
    case 6:
      Swift::UInt v2 = 5;
LABEL_8:
      Hasher._combine(_:)(v2);
      break;
    default:
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(a1 & 1);
      break;
  }
  return Hasher._finalize()();
}

uint64_t Bandwidth.init(from:)(void *a1)
{
  return sub_1000DFAAC(a1);
}

Swift::Int sub_1000DF364()
{
  return Bandwidth.hashValue.getter(*v0);
}

void sub_1000DF36C()
{
  switch(*v0)
  {
    case 2:
      Swift::UInt v1 = 0;
      goto LABEL_8;
    case 3:
      Swift::UInt v1 = 1;
      goto LABEL_8;
    case 4:
      Swift::UInt v1 = 3;
      goto LABEL_8;
    case 5:
      Swift::UInt v1 = 4;
      goto LABEL_8;
    case 6:
      Swift::UInt v1 = 5;
LABEL_8:
      Hasher._combine(_:)(v1);
      break;
    default:
      Swift::UInt8 v2 = *v0 & 1;
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(v2);
      break;
  }
}

Swift::Int sub_1000DF414()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  switch(v1)
  {
    case 2:
      Swift::UInt v2 = 0;
      goto LABEL_8;
    case 3:
      Swift::UInt v2 = 1;
      goto LABEL_8;
    case 4:
      Swift::UInt v2 = 3;
      goto LABEL_8;
    case 5:
      Swift::UInt v2 = 4;
      goto LABEL_8;
    case 6:
      Swift::UInt v2 = 5;
LABEL_8:
      Hasher._combine(_:)(v2);
      break;
    default:
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(v1 & 1);
      break;
  }
  return Hasher._finalize()();
}

uint64_t sub_1000DF4E8@<X0>(void *a1@<X8>)
{
  if (qword_10047BFA0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  *a1  = static Bandwidth.allCases;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000DF568()
{
  uint64_t result = 0x7A484D203031;
  switch(*v0)
  {
    case 2:
      return result;
    case 3:
      uint64_t result = 0x7A484D203032;
      break;
    case 4:
      uint64_t result = 0x7A484D203038;
      break;
    case 5:
      uint64_t result = 0x7A484D20303631;
      break;
    case 6:
      uint64_t result = 0x7A484D20303233;
      break;
    default:
      if (*v0) {
        uint64_t result = 0x7A484D202B3034;
      }
      else {
        uint64_t result = 0x7A484D202D3034;
      }
      break;
  }
  return result;
}

uint64_t sub_1000DF624(char *a1, unsigned __int8 *a2)
{
  return _s7CoreP2P9BandwidthO1loiySbAC_ACtFZ_0(*a1, *a2);
}

uint64_t sub_1000DF630(unsigned __int8 *a1, char *a2)
{
  return sub_1001AD81C(*a1, *a2);
}

uint64_t sub_1000DF63C(char *a1, unsigned __int8 *a2)
{
  return sub_1000DE0CC(*a1, *a2);
}

uint64_t sub_1000DF648(unsigned __int8 *a1, char *a2)
{
  return sub_10017ADB0(*a1, *a2);
}

uint64_t sub_1000DF654@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1000DFAAC(a1);
  if (!v2) {
    *a2  = result;
  }
  return result;
}

uint64_t sub_1000DF680(void *a1)
{
  return Bandwidth.encode(to:)(a1, *v1);
}

uint64_t sub_1000DF69C(unsigned char *a1, unsigned __int8 *a2)
{
  int v2 = *a2;
  switch(*a1)
  {
    case 2:
      if (v2 == 2) {
        goto LABEL_11;
      }
      goto LABEL_13;
    case 3:
      if (v2 != 3) {
        goto LABEL_13;
      }
      goto LABEL_11;
    case 4:
      if (v2 != 4) {
        goto LABEL_13;
      }
      goto LABEL_11;
    case 5:
      if (v2 != 5) {
        goto LABEL_13;
      }
      goto LABEL_11;
    case 6:
      if (v2 != 6) {
        goto LABEL_13;
      }
LABEL_11:
      uint64_t result = 1;
      break;
    default:
      if ((v2 - 2) >= 5) {
        uint64_t result = (((*a1 & 1) == 0) ^ v2) & 1;
      }
      else {
LABEL_13:
      }
        uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t _s7CoreP2P9BandwidthO1loiySbAC_ACtFZ_0(char a1, unsigned __int8 a2)
{
  int v4 = a2;
  sub_100010BCC(&qword_10047EEE0);
  if (v4 == 2) {
    return 0;
  }
  if (a1 == 2) {
    return 1;
  }
  if (a2 == 3) {
    return 0;
  }
  if (a1 == 3) {
    return 1;
  }
  if ((a2 - 2) >= 5u && (a2 & 1) == 0) {
    return 0;
  }
  if ((a1 - 2) >= 5u && (a1 & 1) == 0) {
    return 1;
  }
  if (a2 - 2) >= 5u && (a2) {
    return 0;
  }
  if (a1 - 2) >= 5u && (a1) {
    return 1;
  }
  if (a2 == 4) {
    return 0;
  }
  if (a1 == 4) {
    return 1;
  }
  if (a2 == 5) {
    return 0;
  }
  if (a1 == 5) {
    return 1;
  }
  if (a2 == 6) {
    return 0;
  }
  if (a1 == 6) {
    return 1;
  }
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

unint64_t sub_1000DF860()
{
  unint64_t result = qword_10047EF20;
  if (!qword_10047EF20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047EF20);
  }
  return result;
}

unint64_t sub_1000DF8B4()
{
  unint64_t result = qword_10047EF28;
  if (!qword_10047EF28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047EF28);
  }
  return result;
}

unint64_t sub_1000DF908()
{
  unint64_t result = qword_10047EF30;
  if (!qword_10047EF30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047EF30);
  }
  return result;
}

unint64_t sub_1000DF95C()
{
  unint64_t result = qword_10047EF38;
  if (!qword_10047EF38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047EF38);
  }
  return result;
}

unint64_t sub_1000DF9B0()
{
  unint64_t result = qword_10047EF40;
  if (!qword_10047EF40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047EF40);
  }
  return result;
}

unint64_t sub_1000DFA04()
{
  unint64_t result = qword_10047EF48;
  if (!qword_10047EF48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047EF48);
  }
  return result;
}

unint64_t sub_1000DFA58()
{
  unint64_t result = qword_10047EF50;
  if (!qword_10047EF50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047EF50);
  }
  return result;
}

uint64_t sub_1000DFAAC(void *a1)
{
  uint64_t v47 = sub_100010BCC(&qword_10047EFF0);
  uint64_t v40 = *(void *)(v47 - 8);
  __chkstk_darwin();
  char v52 = (char *)&v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_100010BCC(&qword_10047EFF8);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v45 = v3;
  uint64_t v46 = v4;
  __chkstk_darwin();
  char v51 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100010BCC(&qword_10047F000);
  uint64_t v43 = *(void *)(v6 - 8);
  uint64_t v44 = v6;
  __chkstk_darwin();
  char v48 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100010BCC(&qword_10047F008);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v41 = v8;
  uint64_t v42 = v9;
  __chkstk_darwin();
  char v49 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100010BCC(&qword_10047F010);
  uint64_t v39 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100010BCC(&qword_10047F018);
  uint64_t v38 = *(void *)(v14 - 8);
  __chkstk_darwin();
  uint64_t v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = sub_100010BCC(&qword_10047F020);
  uint64_t v17 = *(void *)(v50 - 8);
  __chkstk_darwin();
  uint64_t v19 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = a1[3];
  unint64_t v53 = a1;
  sub_1000369C4(a1, v20);
  sub_1000DF860();
  uint64_t v21 = v54;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v21) {
    goto LABEL_11;
  }
  uint64_t v54 = v16;
  uint64_t v36 = v14;
  uint64_t v37 = v11;
  uint64_t v22 = v49;
  uint64_t v23 = v50;
  uint64_t v25 = v51;
  uint64_t v24 = v52;
  uint64_t v26 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v26 + 16) != 1)
  {
    uint64_t v20 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v29 = v28;
    sub_100010BCC(&qword_10047E090);
    *uint64_t v29 = &type metadata for Bandwidth;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v20 - 8) + 104))(v29, enum case for DecodingError.typeMismatch(_:), v20);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v23);
LABEL_11:
    sub_100010754((uint64_t)v53);
    return v20;
  }
  switch(*(unsigned char *)(v26 + 32))
  {
    case 1:
      char v56 = 1;
      sub_1000DFA04();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v37);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v23);
      uint64_t v20 = 3;
      goto LABEL_11;
    case 2:
      char v57 = 2;
      sub_1000DF9B0();
      uint64_t v30 = v22;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v33 = v41;
      char v34 = KeyedDecodingContainer.decode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v42 + 8))(v30, v33);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v23);
      uint64_t v20 = v34 & 1;
      sub_100010754((uint64_t)v53);
      break;
    case 3:
      char v58 = 3;
      sub_1000DF95C();
      uint64_t v31 = v48;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v31, v44);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v23);
      uint64_t v20 = 4;
      goto LABEL_11;
    case 4:
      char v59 = 4;
      sub_1000DF908();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v46 + 8))(v25, v45);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v23);
      uint64_t v20 = 5;
      goto LABEL_11;
    case 5:
      char v60 = 5;
      sub_1000DF8B4();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v24, v47);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v23);
      uint64_t v20 = 6;
      goto LABEL_11;
    default:
      char v55 = 0;
      sub_1000DFA58();
      int v27 = v54;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v38 + 8))(v27, v36);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v23);
      uint64_t v20 = 2;
      goto LABEL_11;
  }
  return v20;
}

unint64_t sub_1000E03A8()
{
  unint64_t result = qword_10047EF58;
  if (!qword_10047EF58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047EF58);
  }
  return result;
}

unint64_t sub_1000E0400()
{
  unint64_t result = qword_10047EF60;
  if (!qword_10047EF60)
  {
    sub_100014434(&qword_10047EF68);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047EF60);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Bandwidth(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFA)
  {
    unsigned int v2 = a2 + 6;
    if (a2 + 6 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 6;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 6;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1000E050CLL);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 6;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  if (v7 < 2) {
    return 0;
  }
  unsigned int v8 = (v7 + 2147483646) & 0x7FFFFFFF;
  uint64_t result = v8 - 4;
  if (v8 <= 4) {
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Bandwidth(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 6;
  if (a3 + 6 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFA) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v7 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v6)
    {
      case 1:
        result[1]  = v7;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x1000E05F4);
      case 4:
        *(_DWORD *)(result + 1)  = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

uint64_t sub_1000E061C(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  BOOL v2 = v1 >= 2;
  int v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2) {
    return (v3 + 1);
  }
  else {
    return 0;
  }
}

unsigned char *sub_1000E0638(unsigned char *result, int a2)
{
  if (a2) {
    *uint64_t result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for Bandwidth()
{
  return &type metadata for Bandwidth;
}

uint64_t getEnumTagSinglePayload for WatchdogResetStatus(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Bandwidth.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000E07BCLL);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Bandwidth.CodingKeys()
{
  return &type metadata for Bandwidth.CodingKeys;
}

ValueMetadata *type metadata accessor for Bandwidth.TenMHzCodingKeys()
{
  return &type metadata for Bandwidth.TenMHzCodingKeys;
}

ValueMetadata *type metadata accessor for Bandwidth.TwentyMHzCodingKeys()
{
  return &type metadata for Bandwidth.TwentyMHzCodingKeys;
}

unsigned char *storeEnumTagSinglePayload for Bandwidth.FortyMHzCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000E08B0);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for Bandwidth.FortyMHzCodingKeys()
{
  return &type metadata for Bandwidth.FortyMHzCodingKeys;
}

ValueMetadata *type metadata accessor for Bandwidth.EightyMHzCodingKeys()
{
  return &type metadata for Bandwidth.EightyMHzCodingKeys;
}

ValueMetadata *type metadata accessor for Bandwidth.OneSixtyMHzCodingKeys()
{
  return &type metadata for Bandwidth.OneSixtyMHzCodingKeys;
}

ValueMetadata *type metadata accessor for Bandwidth.ThreeTwentyMHzCodingKeys()
{
  return &type metadata for Bandwidth.ThreeTwentyMHzCodingKeys;
}

unint64_t sub_1000E091C()
{
  unint64_t result = qword_10047EF70;
  if (!qword_10047EF70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047EF70);
  }
  return result;
}

unint64_t sub_1000E0974()
{
  unint64_t result = qword_10047EF78;
  if (!qword_10047EF78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047EF78);
  }
  return result;
}

unint64_t sub_1000E09CC()
{
  unint64_t result = qword_10047EF80;
  if (!qword_10047EF80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047EF80);
  }
  return result;
}

unint64_t sub_1000E0A24()
{
  unint64_t result = qword_10047EF88;
  if (!qword_10047EF88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047EF88);
  }
  return result;
}

unint64_t sub_1000E0A7C()
{
  unint64_t result = qword_10047EF90;
  if (!qword_10047EF90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047EF90);
  }
  return result;
}

unint64_t sub_1000E0AD4()
{
  unint64_t result = qword_10047EF98;
  if (!qword_10047EF98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047EF98);
  }
  return result;
}

unint64_t sub_1000E0B2C()
{
  unint64_t result = qword_10047EFA0;
  if (!qword_10047EFA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047EFA0);
  }
  return result;
}

unint64_t sub_1000E0B84()
{
  unint64_t result = qword_10047EFA8;
  if (!qword_10047EFA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047EFA8);
  }
  return result;
}

unint64_t sub_1000E0BDC()
{
  unint64_t result = qword_10047EFB0;
  if (!qword_10047EFB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047EFB0);
  }
  return result;
}

unint64_t sub_1000E0C34()
{
  unint64_t result = qword_10047EFB8;
  if (!qword_10047EFB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047EFB8);
  }
  return result;
}

unint64_t sub_1000E0C8C()
{
  unint64_t result = qword_10047EFC0;
  if (!qword_10047EFC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047EFC0);
  }
  return result;
}

unint64_t sub_1000E0CE4()
{
  unint64_t result = qword_10047EFC8;
  if (!qword_10047EFC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047EFC8);
  }
  return result;
}

unint64_t sub_1000E0D3C()
{
  unint64_t result = qword_10047EFD0;
  if (!qword_10047EFD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047EFD0);
  }
  return result;
}

unint64_t sub_1000E0D94()
{
  unint64_t result = qword_10047EFD8;
  if (!qword_10047EFD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047EFD8);
  }
  return result;
}

unint64_t sub_1000E0DEC()
{
  unint64_t result = qword_10047EFE0;
  if (!qword_10047EFE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047EFE0);
  }
  return result;
}

unint64_t sub_1000E0E44()
{
  unint64_t result = qword_10047EFE8;
  if (!qword_10047EFE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047EFE8);
  }
  return result;
}

uint64_t sub_1000E0E98(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7A484D6E6574 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x484D79746E657774 && a2 == 0xE90000000000007ALL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7A484D7974726F66 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x484D797468676965 && a2 == 0xE90000000000007ALL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7974786953656E6FLL && a2 == 0xEB000000007A484DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6577546565726874 && a2 == 0xEE007A484D79746ELL)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_1000E1168(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000015 && a2 == 0x80000001003DB730)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t UnkeyedDecodingContainer.inferredDecode<A>()()
{
  return dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
}

uint64_t static BinaryDecoder.decode<A>(_:data:)(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  unint64_t v7 = a3 >> 62;
  sub_100013D44(a2, a3);
  unint64_t v8 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for BinaryDecoder();
  uint64_t v9 = (void *)swift_allocObject();
  v9[5]  = &_swiftEmptyDictionarySingleton;
  void v9[2] = a2;
  v9[3]  = a3;
  uint64_t v10 = 0;
  switch(v7)
  {
    case 1uLL:
      uint64_t v10 = (int)a2;
      break;
    case 2uLL:
      uint64_t v10 = *(void *)(a2 + 16);
      break;
    default:
      break;
  }
  uint64_t v9[4] = v10;
  swift_beginAccess();
  v9[5]  = v8;
  swift_bridgeObjectRelease();
  BinaryDecoder.decode<A>(_:)(a4);
  return swift_release();
}

uint64_t UnkeyedDecodingContainer.decodeData(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(a2 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v2, a2);
  if (swift_dynamicCast())
  {
    swift_retain();
    uint64_t v4 = BinaryDecoder.decodeData(with:)(a1);
    swift_release_n();
  }
  else
  {
    sub_10008B6F4();
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    if (!v3)
    {
      uint64_t v4 = v17;
      unint64_t v10 = v18;
      switch(v18 >> 62)
      {
        case 1uLL:
          LODWORD(v11)  = HIDWORD(v17) - v17;
          if (__OFSUB__(HIDWORD(v17), v17))
          {
            __break(1u);
LABEL_15:
            __break(1u);
            JUMPOUT(0x1000E1594);
          }
          uint64_t v11 = (int)v11;
LABEL_9:
          if (v11 != a1)
          {
LABEL_12:
            sub_10000F000();
            swift_allocError();
            *(void *)uint64_t v15 = 0;
            *(void *)(v15 + 8)  = 0;
            *(unsigned char *)(v15 + 16)  = 2;
            swift_willThrow();
            sub_10000C970(v4, v10);
          }
          break;
        case 2uLL:
          uint64_t v13 = *(void *)(v17 + 16);
          uint64_t v12 = *(void *)(v17 + 24);
          BOOL v14 = __OFSUB__(v12, v13);
          uint64_t v11 = v12 - v13;
          if (!v14) {
            goto LABEL_9;
          }
          goto LABEL_15;
        case 3uLL:
          if (a1) {
            goto LABEL_12;
          }
          break;
        default:
          uint64_t v11 = BYTE6(v18);
          goto LABEL_9;
      }
    }
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a2);
  return v4;
}

void *BinaryDecoder.__allocating_init(data:userInfo:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  char v6 = (void *)swift_allocObject();
  v6[5]  = &_swiftEmptyDictionarySingleton;
  _OWORD v6[2] = a1;
  v6[3]  = a2;
  uint64_t v7 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (int)a1;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      break;
    default:
      break;
  }
  v6[4]  = v7;
  swift_beginAccess();
  v6[5]  = a3;
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t static BinaryDecoder.decode<A>(_:data:)(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = a2 >> 62;
  sub_100013D44(a1, a2);
  unint64_t v7 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for BinaryDecoder();
  uint64_t v8 = (void *)swift_allocObject();
  v8[5]  = &_swiftEmptyDictionarySingleton;
  _OWORD v8[2] = a1;
  v8[3]  = a2;
  uint64_t v9 = 0;
  switch(v6)
  {
    case 1uLL:
      uint64_t v9 = (int)a1;
      break;
    case 2uLL:
      uint64_t v9 = *(void *)(a1 + 16);
      break;
    default:
      break;
  }
  char v8[4] = v9;
  swift_beginAccess();
  v8[5]  = v7;
  swift_bridgeObjectRelease();
  uint64_t v10 = BinaryDecoder.decode<A>(_:)(a3);
  swift_release();
  return v10;
}

uint64_t CodingUserInfoKey.channelInformationHasAuxillaryBitmap.unsafeMutableAddressor()
{
  return sub_1000E17F0(&qword_10047BFB0, (uint64_t)static CodingUserInfoKey.channelInformationHasAuxillaryBitmap);
}

uint64_t sub_1000E17A8(uint64_t a1)
{
  return sub_1000E188C(a1, static CodingUserInfoKey.fourByteAlignedValue);
}

uint64_t CodingUserInfoKey.fourByteAlignedValue.unsafeMutableAddressor()
{
  return sub_1000E17F0(&qword_10047BFA8, (uint64_t)static CodingUserInfoKey.fourByteAlignedValue);
}

uint64_t sub_1000E17F0(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for CodingUserInfoKey();

  return sub_1000151B8(v3, a2);
}

uint64_t static CodingUserInfoKey.fourByteAlignedValue.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E19DC(&qword_10047BFA8, (uint64_t)static CodingUserInfoKey.fourByteAlignedValue, a1);
}

uint64_t sub_1000E1868(uint64_t a1)
{
  return sub_1000E188C(a1, static CodingUserInfoKey.channelInformationHasAuxillaryBitmap);
}

uint64_t sub_1000E188C(uint64_t a1, uint64_t *a2)
{
  sub_100010BCC(&qword_10047F250);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CodingUserInfoKey();
  sub_10001D880(v5, a2);
  uint64_t v6 = sub_1000151B8(v5, (uint64_t)a2);
  CodingUserInfoKey.init(rawValue:)();
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v5);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(v6, v4, v5);
  }
  __break(1u);
  return result;
}

uint64_t static CodingUserInfoKey.channelInformationHasAuxillaryBitmap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E19DC(&qword_10047BFB0, (uint64_t)static CodingUserInfoKey.channelInformationHasAuxillaryBitmap, a1);
}

uint64_t sub_1000E19DC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for CodingUserInfoKey();
  uint64_t v6 = sub_1000151B8(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v7(a3, v6, v5);
}

uint64_t sub_1000E1A74@<X0>(void *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result = BinaryDecoder.decode<A>(_:)(a1);
  if (!v2)
  {
    uint64_t v5 = result;
    uint64_t result = type metadata accessor for Array();
    a2[3]  = result;
    *a2  = v5;
  }
  return result;
}

uint64_t sub_1000E1AD4@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_1000E1A74(*(void **)(a1 + 16), a2);
}

void *BinaryDecoder.init(data:userInfo:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  v3[5]  = &_swiftEmptyDictionarySingleton;
  uint64_t v3[2] = a1;
  v3[3]  = a2;
  uint64_t v5 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v5 = (int)a1;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(a1 + 16);
      break;
    default:
      break;
  }
  void v3[4] = v5;
  swift_beginAccess();
  v3[5]  = a3;
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t BinaryDecoder.userInfo.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t BinaryDecoder.userInfo.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 40)  = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*BinaryDecoder.userInfo.modify())()
{
  return j__swift_endAccess;
}

uint64_t sub_1000E1C70()
{
  return BinaryDecoder.decode<A>(_:)();
}

void *sub_1000E1CA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  return BinaryDecoder.decode<A>(_:)(a5);
}

uint64_t sub_1000E1CD0()
{
  return BinaryDecoder.container<A>(keyedBy:)();
}

uint64_t sub_1000E1CFC@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  a2[3]  = &type metadata for BinaryDecoder.UnkeyedContainer;
  a2[4]  = sub_10008B64C();
  *a2  = a1;
  return swift_retain();
}

uint64_t sub_1000E1D50@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  a2[3]  = type metadata accessor for BinaryDecoder();
  a2[4]  = sub_1000E463C();
  *a2  = a1;
  return swift_retain();
}

uint64_t sub_1000E1DA0@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  a2[3]  = type metadata accessor for BinaryDecoder();
  a2[4]  = sub_1000E463C();
  *a2  = a1;
  return swift_retain();
}

uint64_t sub_1000E1DF0()
{
  return sub_1000E4D18();
}

uint64_t sub_1000E1DFC(uint64_t a1, uint64_t a2)
{
  sub_1000E1CA0((uint64_t)&type metadata for Bool, a1, *v2, *(void *)(a2 + 16), &type metadata for Bool);
  if (!v3) {
    char v4 = v6;
  }
  return v4 & 1;
}

void *sub_1000E1E54(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1000E1CA0((uint64_t)&type metadata for String, a1, *v2, *(void *)(a2 + 16), &type metadata for String);
  if (!v3) {
    return (void *)v5;
  }
  return result;
}

double sub_1000E1EA8(uint64_t a1, uint64_t a2)
{
  sub_1000E1CA0((uint64_t)&type metadata for Double, a1, *v2, *(void *)(a2 + 16), &type metadata for Double);
  if (!v3) {
    return v5;
  }
  return result;
}

float sub_1000E1EFC(uint64_t a1, uint64_t a2)
{
  sub_1000E1CA0((uint64_t)&type metadata for Float, a1, *v2, *(void *)(a2 + 16), &type metadata for Float);
  if (!v3) {
    return v5;
  }
  return result;
}

uint64_t sub_1000E1F50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E2364(a1, a2, a3, (void (*)(void))sub_1000E4CC4);
}

uint64_t sub_1000E1F8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E210C(a1, a2, a3, (void (*)(void))sub_1000E4C70);
}

uint64_t sub_1000E1FC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E21D4(a1, a2, a3, (void (*)(void))sub_1000E4C1C);
}

uint64_t sub_1000E2004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E229C(a1, a2, a3, (void (*)(void))sub_1000E4BC8);
}

uint64_t sub_1000E2040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E2364(a1, a2, a3, (void (*)(void))sub_1000E4B74);
}

uint64_t sub_1000E207C()
{
  return KeyedDecodingContainerProtocol.decode(_:forKey:)();
}

uint64_t sub_1000E2094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E2364(a1, a2, a3, (void (*)(void))sub_1000E4B20);
}

uint64_t sub_1000E20D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E210C(a1, a2, a3, (void (*)(void))sub_1000E4ACC);
}

uint64_t sub_1000E210C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  uint64_t result = sub_1000E1C70();
  if (!v4) {
    return v6;
  }
  return result;
}

uint64_t sub_1000E2198(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E21D4(a1, a2, a3, (void (*)(void))sub_1000E4A78);
}

uint64_t sub_1000E21D4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  uint64_t result = sub_1000E1C70();
  if (!v4) {
    return v6;
  }
  return result;
}

uint64_t sub_1000E2260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E229C(a1, a2, a3, (void (*)(void))sub_1000E4A24);
}

uint64_t sub_1000E229C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  uint64_t result = sub_1000E1C70();
  if (!v4) {
    return v6;
  }
  return result;
}

uint64_t sub_1000E2328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E2364(a1, a2, a3, (void (*)(void))sub_1000E49D0);
}

uint64_t sub_1000E2364(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  uint64_t result = sub_1000E1C70();
  if (!v4) {
    return v6;
  }
  return result;
}

uint64_t sub_1000E23F0()
{
  return KeyedDecodingContainerProtocol.decode(_:forKey:)();
}

void *sub_1000E2408(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  return sub_1000E1CA0(a1, a2, *v5, *(void *)(a5 + 16), a3);
}

uint64_t sub_1000E2434()
{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
}

uint64_t sub_1000E244C()
{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
}

uint64_t sub_1000E2464()
{
  uint64_t result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1000E2488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E26B4(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

uint64_t sub_1000E24B4()
{
  uint64_t result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1000E24D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E25FC(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

uint64_t sub_1000E2504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E2658(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

uint64_t sub_1000E2530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E26B4(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

uint64_t sub_1000E255C()
{
  uint64_t result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1000E2580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E273C(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

uint64_t sub_1000E25AC()
{
  uint64_t result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1000E25D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E25FC(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

uint64_t sub_1000E25FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4() & 0x1FF;
}

uint64_t sub_1000E262C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E2658(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

uint64_t sub_1000E2658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4() & 0x1FFFF;
}

uint64_t sub_1000E2688(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E26B4(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

uint64_t sub_1000E26B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  unint64_t v4 = a4();
  return v4 | ((HIDWORD(v4) & 1) << 32);
}

uint64_t sub_1000E26EC()
{
  uint64_t result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1000E2710(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E273C(a1, a2, a3, (uint64_t (*)(void))&KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

uint64_t sub_1000E273C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result = a4();
  if (v4) {
    return v6;
  }
  return result;
}

uint64_t sub_1000E2768()
{
  return KeyedDecodingContainerProtocol.decodeIfPresent<A>(_:forKey:)();
}

uint64_t sub_1000E2794()
{
  return sub_1000E1CD0();
}

uint64_t sub_1000E27C0@<X0>(void *a1@<X8>)
{
  return sub_1000E1CFC(*v1, a1);
}

uint64_t sub_1000E27E4@<X0>(void *a1@<X8>)
{
  return sub_1000E1D50(*v1, a1);
}

uint64_t sub_1000E2808@<X0>(void *a1@<X8>)
{
  return sub_1000E1DA0(*v1, a1);
}

void *sub_1000E282C(void *a1)
{
  return BinaryDecoder.decode<A>(_:)(a1);
}

uint64_t sub_1000E2858()
{
  return BinaryDecoder.container<A>(keyedBy:)();
}

BOOL sub_1000E2884()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  unint64_t v2 = *(void *)(*(void *)v0 + 24);
  uint64_t v3 = 0;
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v3 = v1 >> 32;
      break;
    case 2uLL:
      uint64_t v3 = *(void *)(v1 + 24);
      break;
    case 3uLL:
      return *(void *)(*(void *)v0 + 32) == v3;
    default:
      uint64_t v3 = BYTE6(v2);
      break;
  }
  return *(void *)(*(void *)v0 + 32) == v3;
}

BOOL sub_1000E28E8()
{
  return sub_1000E370C((uint64_t (*)(void))sub_100257954) != 0;
}

uint64_t sub_1000E2928()
{
  return String.init(from:)();
}

double sub_1000E297C()
{
  return COERCE_DOUBLE(sub_1000E3B50((uint64_t (*)(void))sub_1002579A0));
}

uint64_t sub_1000E29B8()
{
  return Float.init(from:)();
}

uint64_t sub_1000E2A0C()
{
  return sub_1000E3B50((uint64_t (*)(void))sub_1002579A0);
}

uint64_t sub_1000E2A44()
{
  return sub_1000E370C((uint64_t (*)(void))sub_100257954);
}

uint64_t sub_1000E2A7C()
{
  return sub_1000E39E4((uint64_t (*)(void))sub_100257908);
}

uint64_t sub_1000E2AB4()
{
  return sub_1000E3878((uint64_t (*)(void))sub_1002579EC);
}

uint64_t sub_1000E2AEC()
{
  return SingleValueDecodingContainer<>.decode(_:)();
}

uint64_t sub_1000E2B34()
{
  return SingleValueDecodingContainer<>.decode(_:)();
}

void *sub_1000E2B7C(void *a1)
{
  return sub_1000E282C(a1);
}

uint64_t sub_1000E2BA0()
{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)();
}

uint64_t sub_1000E2BB8()
{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)();
}

uint64_t sub_1000E2BD0()
{
  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1000E2BF4(uint64_t a1, uint64_t a2)
{
  return sub_1000E2E20(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

uint64_t sub_1000E2C20()
{
  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1000E2C44(uint64_t a1, uint64_t a2)
{
  return sub_1000E2D68(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

uint64_t sub_1000E2C70(uint64_t a1, uint64_t a2)
{
  return sub_1000E2DC4(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

uint64_t sub_1000E2C9C(uint64_t a1, uint64_t a2)
{
  return sub_1000E2E20(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

uint64_t sub_1000E2CC8()
{
  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1000E2CEC(uint64_t a1, uint64_t a2)
{
  return sub_1000E2EA8(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

uint64_t sub_1000E2D18()
{
  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1000E2D3C(uint64_t a1, uint64_t a2)
{
  return sub_1000E2D68(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

uint64_t sub_1000E2D68(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 0x1FF;
}

uint64_t sub_1000E2D98(uint64_t a1, uint64_t a2)
{
  return sub_1000E2DC4(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

uint64_t sub_1000E2DC4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 0x1FFFF;
}

uint64_t sub_1000E2DF4(uint64_t a1, uint64_t a2)
{
  return sub_1000E2E20(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

uint64_t sub_1000E2E20(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  unint64_t v3 = a3();
  return v3 | ((HIDWORD(v3) & 1) << 32);
}

uint64_t sub_1000E2E58()
{
  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1000E2E7C(uint64_t a1, uint64_t a2)
{
  return sub_1000E2EA8(a1, a2, (uint64_t (*)(void))&UnkeyedDecodingContainer.decodeIfPresent(_:));
}

uint64_t sub_1000E2EA8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t result = a3();
  if (v3) {
    return v5;
  }
  return result;
}

uint64_t sub_1000E2ED4()
{
  return UnkeyedDecodingContainer.decodeIfPresent<A>(_:)();
}

uint64_t sub_1000E2F00()
{
  return sub_1000E2858();
}

uint64_t sub_1000E2F24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *v3;
  a3[3]  = a1;
  a3[4]  = a2;
  *a3  = v4;
  return swift_retain();
}

uint64_t sub_1000E2F4C@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  a1[3]  = type metadata accessor for BinaryDecoder();
  a1[4]  = sub_1000E463C();
  *a1  = v3;
  return swift_retain();
}

uint64_t sub_1000E2F9C()
{
  return SingleValueDecodingContainer<>.decode(_:)();
}

uint64_t sub_1000E2FE4()
{
  return SingleValueDecodingContainer<>.decode(_:)();
}

uint64_t BinaryDecoder.container<A>(keyedBy:)()
{
  return KeyedDecodingContainer.init<A>(_:)();
}

uint64_t BinaryDecoder.unkeyedContainer()@<X0>(void *a1@<X8>)
{
  return sub_1000E310C((uint64_t (*)(void))sub_10008B64C, a1);
}

uint64_t BinaryDecoder.singleValueContainer()@<X0>(void *a1@<X8>)
{
  return sub_1000E310C((uint64_t (*)(void))sub_1000E45E8, a1);
}

uint64_t sub_1000E310C@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X8>)
{
  a2[3]  = &type metadata for BinaryDecoder.UnkeyedContainer;
  a2[4]  = a1();
  *a2  = v2;
  return swift_retain();
}

uint64_t BinaryDecoder.peekBytes(_:)(uint64_t a1)
{
  uint64_t v3 = v1[4];
  uint64_t v4 = v3 + a1;
  if (__OFADD__(v3, a1))
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v5 = v1[2];
  unint64_t v6 = v1[3];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < v4) {
        goto LABEL_11;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v5 + 24) >= v4) {
        goto LABEL_8;
      }
      goto LABEL_11;
    case 3uLL:
      if (v4 > 0) {
        goto LABEL_11;
      }
      goto LABEL_8;
    default:
      if (BYTE6(v6) >= v4)
      {
LABEL_8:
        if (v4 >= v3) {
          return Data._Representation.subscript.getter();
        }
LABEL_13:
        __break(1u);
        JUMPOUT(0x1000E3234);
      }
LABEL_11:
      sub_10000F000();
      swift_allocError();
      *(void *)uint64_t v8 = 0;
      *(void *)(v8 + 8)  = 0;
      *(unsigned char *)(v8 + 16)  = 2;
      return swift_willThrow();
  }
}

void *BinaryDecoder.decode<A>(_:)(void *a1)
{
  if (a1 == &type metadata for Data)
  {
    uint64_t result = (void *)sub_1000E4690();
    if (v2) {
      return result;
    }
    v9[0]  = result;
    v9[1]  = v8;
    return (void *)swift_dynamicCast();
  }
  if (a1 == (void *)&type metadata for Bool)
  {
    uint64_t result = (void *)sub_1000E370C((uint64_t (*)(void))sub_100257954);
    if (v2) {
      return result;
    }
    LOBYTE(v9[0])  = result != 0;
    return (void *)swift_dynamicCast();
  }
  if (a1 == (void *)&type metadata for Double)
  {
    uint64_t result = (void *)sub_1000E3B50((uint64_t (*)(void))sub_1002579A0);
    if (v2) {
      return result;
    }
    v9[0]  = result;
    return (void *)swift_dynamicCast();
  }
  uint64_t v4 = swift_conformsToProtocol2();
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v4) {
    unint64_t v6 = a1;
  }
  else {
    unint64_t v6 = 0;
  }
  if (v6)
  {
    uint64_t result = (*(void *(**)(void *__return_ptr, uint64_t))(v5 + 8))(v9, v1);
    if (v2) {
      return result;
    }
    return (void *)swift_dynamicCast();
  }
  type metadata accessor for BinaryDecoder();
  sub_1000E463C();
  swift_retain();
  return (void *)dispatch thunk of Decodable.init(from:)();
}

uint64_t BinaryDecoder.decode<A>(_:)()
{
  uint64_t v1 = __chkstk_darwin();
  uint64_t result = sub_1000E3CBC(v1, v2);
  if (!v0) {
    return dispatch thunk of FixedWidthInteger.init(littleEndian:)();
  }
  return result;
}

double BinaryDecoder.decode(_:)()
{
  return COERCE_DOUBLE(sub_1000E3B50((uint64_t (*)(void))sub_1002579A0));
}

uint64_t BinaryDecoder.decode(_:)()
{
  return sub_1000E4690();
}

BOOL BinaryDecoder.decode(_:)()
{
  return sub_1000E370C((uint64_t (*)(void))sub_100257954) != 0;
}

uint64_t BinaryDecoder.decode<A>(_:)(void *a1)
{
  uint64_t v3 = v2;
  __chkstk_darwin();
  uint64_t v15 = Array.init()();
  uint64_t v6 = v1[2];
  unint64_t v5 = v1[3];
  uint64_t v7 = BYTE6(v5);
  unint64_t v8 = v5 >> 62;
  while (2)
  {
    uint64_t v9 = v1[4];
    uint64_t v10 = v7;
    switch(v8)
    {
      case 0uLL:
        goto LABEL_5;
      case 1uLL:
        uint64_t v10 = v6 >> 32;
LABEL_5:
        if (v9 >= v10) {
          return v15;
        }
        goto LABEL_10;
      case 2uLL:
        if (v9 >= *(void *)(v6 + 24)) {
          return v15;
        }
        goto LABEL_10;
      case 3uLL:
        if ((v9 & 0x8000000000000000) == 0) {
          return v15;
        }
LABEL_10:
        BinaryDecoder.decode<A>(_:)(a1);
        if (!v3)
        {
          type metadata accessor for Array();
          Array.append(_:)();
          continue;
        }
        swift_errorRetain();
        sub_100010BCC((uint64_t *)&unk_1004843F0);
        if (!swift_dynamicCast()) {
          goto LABEL_17;
        }
        if (v14 == 2)
        {
          if ((v12 & 1) == 0) {
            goto LABEL_17;
          }
          swift_errorRelease();
          swift_errorRelease();
          uint64_t v3 = 0;
          continue;
        }
        sub_100012AA4(v12, v13, v14);
LABEL_17:
        swift_bridgeObjectRelease();
        return swift_errorRelease();
      default:
        JUMPOUT(0);
    }
  }
}

uint64_t sub_1000E370C(uint64_t (*a1)(void))
{
  uint64_t v4 = v1[4];
  uint64_t v5 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v6 = v1[2];
  unint64_t v7 = v1[3];
  unint64_t v8 = v7 >> 62;
  uint64_t v9 = v2;
  switch(v7 >> 62)
  {
    case 1uLL:
      if (v6 >> 32 < v5) {
        goto LABEL_12;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v6 + 24) >= v5) {
        goto LABEL_8;
      }
      goto LABEL_12;
    case 3uLL:
      if (v5 >= 1) {
        goto LABEL_12;
      }
      uint64_t v11 = 0;
      uint64_t v10 = 0;
      goto LABEL_16;
    default:
      if (BYTE6(v7) >= v5)
      {
LABEL_8:
        if (v8)
        {
          if (v8 == 1)
          {
            uint64_t v10 = (int)v6;
            uint64_t v11 = v6 >> 32;
          }
          else
          {
            uint64_t v10 = *(void *)(v6 + 16);
            uint64_t v11 = *(void *)(v6 + 24);
          }
        }
        else
        {
          uint64_t v10 = 0;
          uint64_t v11 = BYTE6(v7);
        }
LABEL_16:
        if (v11 >= v4 && v11 >= v10)
        {
          uint64_t v14 = Data._Representation.subscript.getter();
          unint64_t v16 = v15;
          uint64_t v9 = a1();
          sub_10000C970(v14, v16);
          v1[4]  = v5;
          return v9;
        }
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000E3868);
      }
LABEL_12:
      sub_10000F000();
      swift_allocError();
      *(void *)uint64_t v12 = 0;
      *(void *)(v12 + 8)  = 0;
      *(unsigned char *)(v12 + 16)  = 2;
      swift_willThrow();
      return v9;
  }
}

uint64_t sub_1000E3878(uint64_t (*a1)(void))
{
  uint64_t v4 = v1[4];
  uint64_t v5 = v4 + 4;
  if (__OFADD__(v4, 4))
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v6 = v1[2];
  unint64_t v7 = v1[3];
  unint64_t v8 = v7 >> 62;
  uint64_t v9 = v2;
  switch(v7 >> 62)
  {
    case 1uLL:
      if (v6 >> 32 < v5) {
        goto LABEL_12;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v6 + 24) >= v5) {
        goto LABEL_8;
      }
      goto LABEL_12;
    case 3uLL:
      if (v5 >= 1) {
        goto LABEL_12;
      }
      uint64_t v11 = 0;
      uint64_t v10 = 0;
      goto LABEL_16;
    default:
      if (BYTE6(v7) >= v5)
      {
LABEL_8:
        if (v8)
        {
          if (v8 == 1)
          {
            uint64_t v10 = (int)v6;
            uint64_t v11 = v6 >> 32;
          }
          else
          {
            uint64_t v10 = *(void *)(v6 + 16);
            uint64_t v11 = *(void *)(v6 + 24);
          }
        }
        else
        {
          uint64_t v10 = 0;
          uint64_t v11 = BYTE6(v7);
        }
LABEL_16:
        if (v11 >= v4 && v11 >= v10)
        {
          uint64_t v14 = Data._Representation.subscript.getter();
          unint64_t v16 = v15;
          uint64_t v9 = a1();
          sub_10000C970(v14, v16);
          v1[4]  = v5;
          return v9;
        }
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000E39D4);
      }
LABEL_12:
      sub_10000F000();
      swift_allocError();
      *(void *)uint64_t v12 = 0;
      *(void *)(v12 + 8)  = 0;
      *(unsigned char *)(v12 + 16)  = 2;
      swift_willThrow();
      return v9;
  }
}

uint64_t sub_1000E39E4(uint64_t (*a1)(void))
{
  uint64_t v4 = v1[4];
  uint64_t v5 = v4 + 2;
  if (__OFADD__(v4, 2))
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v6 = v1[2];
  unint64_t v7 = v1[3];
  unint64_t v8 = v7 >> 62;
  uint64_t v9 = v2;
  switch(v7 >> 62)
  {
    case 1uLL:
      if (v6 >> 32 < v5) {
        goto LABEL_12;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v6 + 24) >= v5) {
        goto LABEL_8;
      }
      goto LABEL_12;
    case 3uLL:
      if (v5 >= 1) {
        goto LABEL_12;
      }
      uint64_t v11 = 0;
      uint64_t v10 = 0;
      goto LABEL_16;
    default:
      if (BYTE6(v7) >= v5)
      {
LABEL_8:
        if (v8)
        {
          if (v8 == 1)
          {
            uint64_t v10 = (int)v6;
            uint64_t v11 = v6 >> 32;
          }
          else
          {
            uint64_t v10 = *(void *)(v6 + 16);
            uint64_t v11 = *(void *)(v6 + 24);
          }
        }
        else
        {
          uint64_t v10 = 0;
          uint64_t v11 = BYTE6(v7);
        }
LABEL_16:
        if (v11 >= v4 && v11 >= v10)
        {
          uint64_t v14 = Data._Representation.subscript.getter();
          unint64_t v16 = v15;
          uint64_t v9 = a1();
          sub_10000C970(v14, v16);
          v1[4]  = v5;
          return v9;
        }
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000E3B40);
      }
LABEL_12:
      sub_10000F000();
      swift_allocError();
      *(void *)uint64_t v12 = 0;
      *(void *)(v12 + 8)  = 0;
      *(unsigned char *)(v12 + 16)  = 2;
      swift_willThrow();
      return v9;
  }
}

uint64_t sub_1000E3B50(uint64_t (*a1)(void))
{
  uint64_t v4 = v1[4];
  uint64_t v5 = v4 + 8;
  if (__OFADD__(v4, 8))
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v6 = v1[2];
  unint64_t v7 = v1[3];
  unint64_t v8 = v7 >> 62;
  uint64_t v9 = v2;
  switch(v7 >> 62)
  {
    case 1uLL:
      if (v6 >> 32 < v5) {
        goto LABEL_12;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v6 + 24) >= v5) {
        goto LABEL_8;
      }
      goto LABEL_12;
    case 3uLL:
      if (v5 >= 1) {
        goto LABEL_12;
      }
      uint64_t v11 = 0;
      uint64_t v10 = 0;
      goto LABEL_16;
    default:
      if (BYTE6(v7) >= v5)
      {
LABEL_8:
        if (v8)
        {
          if (v8 == 1)
          {
            uint64_t v10 = (int)v6;
            uint64_t v11 = v6 >> 32;
          }
          else
          {
            uint64_t v10 = *(void *)(v6 + 16);
            uint64_t v11 = *(void *)(v6 + 24);
          }
        }
        else
        {
          uint64_t v10 = 0;
          uint64_t v11 = BYTE6(v7);
        }
LABEL_16:
        if (v11 >= v4 && v11 >= v10)
        {
          uint64_t v14 = Data._Representation.subscript.getter();
          unint64_t v16 = v15;
          uint64_t v9 = a1();
          sub_10000C970(v14, v16);
          v1[4]  = v5;
          return v9;
        }
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000E3CACLL);
      }
LABEL_12:
      sub_10000F000();
      swift_allocError();
      *(void *)uint64_t v12 = 0;
      *(void *)(v12 + 8)  = 0;
      *(unsigned char *)(v12 + 16)  = 2;
      swift_willThrow();
      return v9;
  }
}

uint64_t sub_1000E3CBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 - 8) + 64);
  uint64_t v4 = v2[4];
  uint64_t v5 = v4 + v3;
  if (__OFADD__(v4, v3))
  {
    __break(1u);
LABEL_22:
    __break(1u);
    JUMPOUT(0x1000E3E38);
  }
  uint64_t v6 = v2[2];
  unint64_t v7 = v2[3];
  unint64_t v8 = v7 >> 62;
  switch(v7 >> 62)
  {
    case 1uLL:
      if (v6 >> 32 < v5) {
        goto LABEL_12;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v6 + 24) >= v5) {
        goto LABEL_8;
      }
      goto LABEL_12;
    case 3uLL:
      if (v5 > 0) {
        goto LABEL_12;
      }
      uint64_t v11 = 0;
      uint64_t v10 = 0;
      goto LABEL_16;
    default:
      if (BYTE6(v7) < v5)
      {
LABEL_12:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v12 = 0;
        *(void *)(v12 + 8)  = 0;
        *(unsigned char *)(v12 + 16)  = 2;
        return swift_willThrow();
      }
LABEL_8:
      if (v8)
      {
        if (v8 == 1)
        {
          uint64_t v10 = (int)v6;
          uint64_t v11 = v6 >> 32;
        }
        else
        {
          uint64_t v10 = *(void *)(v6 + 16);
          uint64_t v11 = *(void *)(v6 + 24);
        }
      }
      else
      {
        uint64_t v10 = 0;
        uint64_t v11 = BYTE6(v7);
      }
LABEL_16:
      if (v11 < v4 || v11 < v10) {
        goto LABEL_22;
      }
      uint64_t v15 = Data._Representation.subscript.getter();
      unint64_t v17 = v16;
      Data.load<A>(as:)(a2, v15, v16, a2);
      uint64_t result = sub_10000C970(v15, v17);
      v2[4]  = v5;
      return result;
  }
}

void *BinaryDecoder.inferredDecode<A>()(void *a1)
{
  return BinaryDecoder.decode<A>(_:)(a1);
}

uint64_t BinaryDecoder.decodeData(with:)(uint64_t a1)
{
  uint64_t v3 = v1[4];
  uint64_t v4 = v3 + a1;
  if (__OFADD__(v3, a1))
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v5 = v1[2];
  unint64_t v6 = v1[3];
  switch(v6 >> 62)
  {
    case 1uLL:
      uint64_t v7 = v5 >> 32;
      if (a1 < 0) {
        goto LABEL_14;
      }
      goto LABEL_8;
    case 2uLL:
      uint64_t v7 = *(void *)(v5 + 24);
      if ((a1 & 0x8000000000000000) == 0) {
        goto LABEL_8;
      }
      goto LABEL_14;
    case 3uLL:
      if ((a1 & 0x8000000000000000) == 0 && v4 <= 0) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
      uint64_t v7 = BYTE6(v6);
      if (a1 < 0) {
        goto LABEL_14;
      }
LABEL_8:
      if (v7 >= v4)
      {
LABEL_12:
        if (v4 >= v3)
        {
          uint64_t result = Data._Representation.subscript.getter();
          v1[4]  = v4;
          return result;
        }
LABEL_16:
        __break(1u);
        JUMPOUT(0x1000E3F50);
      }
LABEL_14:
      sub_10000F000();
      swift_allocError();
      *(void *)uint64_t v9 = 0;
      *(void *)(v9 + 8)  = 0;
      *(unsigned char *)(v9 + 16)  = 2;
      return swift_willThrow();
  }
}

uint64_t IEEE80211InformationElement.MessageIntegrityCode.code.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10000C970(*(void *)v2, *(void *)(v2 + 8));
  *(void *)uint64_t v2 = a1;
  *(void *)(v2 + 8)  = a2;
  return result;
}

uint64_t BinaryDecoder.DataCopy.init(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = a1;
  switch(a2 >> 62)
  {
    case 1uLL:
      a1  = (int)a1;
      uint64_t v4 = v3 >> 32;
      goto LABEL_4;
    case 2uLL:
      a1  = *(void *)(a1 + 16);
      uint64_t v4 = *(void *)(v3 + 24);
LABEL_4:
      if (v4 < a1)
      {
        __break(1u);
        JUMPOUT(0x1000E4040);
      }
      return result;
    default:
      break;
  }
  uint64_t v5 = Data.subdata(in:)();
  sub_10000C970(v3, a2);
  return v5;
}

uint64_t BinaryDecoder.DataCopy.init(from:)(void *a1)
{
  return sub_1000E47F4(a1);
}

uint64_t InterfaceIdentifier.encode(to:)(void *a1)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  sub_100039448((uint64_t)v2, v3);
  sub_1000742DC();
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  return sub_100010754((uint64_t)v2);
}

uint64_t sub_1000E4114@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = BinaryDecoder.DataCopy.init(from:)(a1);
  if (!v2)
  {
    *a2  = result;
    a2[1]  = v5;
  }
  return result;
}

uint64_t sub_1000E4140(void *a1)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  sub_100039448((uint64_t)v2, v3);
  sub_1000742DC();
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  return sub_100010754((uint64_t)v2);
}

uint64_t sub_1000E41E8()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  sub_100013D44(v1, v2);
  uint64_t v3 = sub_100036314(0, 0xE000000000000000, v1, v2);
  sub_10000C970(v1, v2);
  return v3;
}

uint64_t BinaryDecoder.deinit()
{
  sub_10000C970(*(void *)(v0 + 16), *(void *)(v0 + 24));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t BinaryDecoder.__deallocating_deinit()
{
  sub_10000C970(*(void *)(v0 + 16), *(void *)(v0 + 24));
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1000E42C0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000E4304()
{
  return BinaryDecoder.container<A>(keyedBy:)();
}

uint64_t sub_1000E4328@<X0>(void *a1@<X8>)
{
  return sub_1000E4380((uint64_t (*)(void))sub_10008B64C, a1);
}

uint64_t sub_1000E4354@<X0>(void *a1@<X8>)
{
  return sub_1000E4380((uint64_t (*)(void))sub_1000E45E8, a1);
}

uint64_t sub_1000E4380@<X0>(uint64_t (*a1)(void)@<X2>, void *a2@<X8>)
{
  uint64_t v4 = *v2;
  a2[3]  = &type metadata for BinaryDecoder.UnkeyedContainer;
  a2[4]  = a1();
  *a2  = v4;
  return swift_retain();
}

uint64_t UnkeyedDecodingContainer.inferredArrayDecode<A>()(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = v5;
  uint64_t v10 = *(void *)(a1 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v4, a1);
  if (swift_dynamicCast())
  {
    swift_retain();
    uint64_t v6 = BinaryDecoder.decode<A>(_:)(a2);
    swift_release_n();
  }
  else
  {
    type metadata accessor for Array();
    v14[0]  = a4;
    swift_getWitnessTable();
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    if (!v5) {
      uint64_t v6 = v14[1];
    }
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, a1);
  return v6;
}

uint64_t type metadata accessor for BinaryDecoder()
{
  return self;
}

uint64_t type metadata accessor for BinaryDecoder.KeyedContainer()
{
  return sub_100038354();
}

unint64_t sub_1000E45E8()
{
  unint64_t result = qword_10047F028;
  if (!qword_10047F028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F028);
  }
  return result;
}

unint64_t sub_1000E463C()
{
  unint64_t result = qword_10047DC48;
  if (!qword_10047DC48)
  {
    type metadata accessor for BinaryDecoder();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047DC48);
  }
  return result;
}

uint64_t sub_1000E4690()
{
  unint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = v0[2];
  unint64_t v4 = v2 >> 62;
  switch(v2 >> 62)
  {
    case 1uLL:
      if (v1 != v3 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_12;
    case 2uLL:
      if (v1 != *(void *)(v3 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_12;
    case 3uLL:
      if (!v1) {
        goto LABEL_12;
      }
      uint64_t v5 = 0;
      goto LABEL_15;
    default:
      if (v1 == BYTE6(v2))
      {
LABEL_12:
        sub_10000F000();
        swift_allocError();
        *(void *)uint64_t v6 = 0;
        *(void *)(v6 + 8)  = 0;
        *(unsigned char *)(v6 + 16)  = 2;
        return swift_willThrow();
      }
      else
      {
LABEL_7:
        if (v4)
        {
          if (v4 == 1) {
            uint64_t v5 = v3 >> 32;
          }
          else {
            uint64_t v5 = *(void *)(v3 + 24);
          }
        }
        else
        {
          uint64_t v5 = BYTE6(v2);
        }
LABEL_15:
        if (v5 < v1)
        {
          __break(1u);
          JUMPOUT(0x1000E47D4);
        }
        uint64_t result = Data._Representation.subscript.getter();
        uint64_t v8 = 0;
        switch((int)v4)
        {
          case 1:
            uint64_t v8 = v3 >> 32;
            break;
          case 2:
            uint64_t v8 = *(void *)(v3 + 24);
            break;
          case 3:
            break;
          default:
            uint64_t v8 = BYTE6(v2);
            break;
        }
        v0[4]  = v8;
      }
      return result;
  }
}

uint64_t sub_1000E47F4(void *a1)
{
  uint64_t v3 = a1[4];
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v1)
  {
    sub_100010754((uint64_t)a1);
  }
  else
  {
    sub_100039448((uint64_t)v9, v10);
    sub_10008B6F4();
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    switch(v8 >> 62)
    {
      case 1uLL:
        uint64_t v5 = (int)v7;
        uint64_t v6 = v7 >> 32;
        goto LABEL_8;
      case 2uLL:
        uint64_t v5 = *(void *)(v7 + 16);
        uint64_t v6 = *(void *)(v7 + 24);
LABEL_8:
        if (v6 < v5)
        {
          __break(1u);
          JUMPOUT(0x1000E4948);
        }
        return result;
      default:
        break;
    }
    uint64_t v3 = Data.subdata(in:)();
    sub_10000C970(v7, v8);
    sub_100010754((uint64_t)v9);
    sub_100010754((uint64_t)a1);
  }
  return v3;
}

unint64_t sub_1000E495C()
{
  unint64_t result = qword_10047F030;
  if (!qword_10047F030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F030);
  }
  return result;
}

ValueMetadata *type metadata accessor for BinaryDecoder.DataCopy()
{
  return &type metadata for BinaryDecoder.DataCopy;
}

ValueMetadata *type metadata accessor for BinaryDecoder.UnkeyedContainer()
{
  return &type metadata for BinaryDecoder.UnkeyedContainer;
}

unint64_t sub_1000E49D0()
{
  unint64_t result = qword_10047F208;
  if (!qword_10047F208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F208);
  }
  return result;
}

unint64_t sub_1000E4A24()
{
  unint64_t result = qword_10047F210;
  if (!qword_10047F210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F210);
  }
  return result;
}

unint64_t sub_1000E4A78()
{
  unint64_t result = qword_10047F218;
  if (!qword_10047F218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F218);
  }
  return result;
}

unint64_t sub_1000E4ACC()
{
  unint64_t result = qword_10047F220;
  if (!qword_10047F220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F220);
  }
  return result;
}

unint64_t sub_1000E4B20()
{
  unint64_t result = qword_10047F228;
  if (!qword_10047F228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F228);
  }
  return result;
}

unint64_t sub_1000E4B74()
{
  unint64_t result = qword_10047F230;
  if (!qword_10047F230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F230);
  }
  return result;
}

unint64_t sub_1000E4BC8()
{
  unint64_t result = qword_10047F238;
  if (!qword_10047F238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F238);
  }
  return result;
}

unint64_t sub_1000E4C1C()
{
  unint64_t result = qword_10047F240;
  if (!qword_10047F240)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F240);
  }
  return result;
}

unint64_t sub_1000E4C70()
{
  unint64_t result = qword_10047F248;
  if (!qword_10047F248)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F248);
  }
  return result;
}

unint64_t sub_1000E4CC4()
{
  unint64_t result = qword_100488290;
  if (!qword_100488290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100488290);
  }
  return result;
}

uint64_t sub_1000E4D18()
{
  return static Array._allocateUninitialized(_:)();
}

unint64_t sub_1000E4D24(__int16 a1, uint64_t a2)
{
  uint64_t v3 = (HIBYTE(a1) - a1);
  unsigned int v19 = HIBYTE(a1);
  unsigned __int8 v20 = a1;
  if (HIBYTE(a1) < a1) {
    uint64_t v4 = -(uint64_t)(a1 - HIBYTE(a1));
  }
  else {
    uint64_t v4 = (HIBYTE(a1) - a1);
  }
  if (!v4) {
    return (unint64_t)_swiftEmptyArrayStorage;
  }
  unint64_t result = sub_1000834BC(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000) == 0)
  {
    LODWORD(v7)  = v19 - v20;
    if (v19 >= v20) {
      uint64_t v7 = v7;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = -v7;
    while (v4)
    {
      sub_100039448(a2, *(void *)(a2 + 24));
      char v9 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
      if (v2) {
        goto LABEL_23;
      }
      char v10 = v9;
      uint64_t v22 = v4;
      sub_100039448(a2, *(void *)(a2 + 24));
      char v11 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
      uint64_t v21 = v3;
      sub_100039448(a2, *(void *)(a2 + 24));
      char v12 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
      unint64_t result = sub_1000F8E44(v10, v11);
      if ((result & 0xFF00000000) == 0x300000000 || BYTE4(result) < 2u)
      {
        sub_10000F000();
        swift_allocError();
        *(_OWORD *)uint64_t v18 = xmmword_1003B00B0;
        *(unsigned char *)(v18 + 16)  = 2;
        swift_willThrow();
LABEL_23:
        swift_release();
        return (unint64_t)_swiftEmptyArrayStorage;
      }
      unint64_t v14 = result;
      unint64_t v16 = _swiftEmptyArrayStorage[2];
      unint64_t v15 = _swiftEmptyArrayStorage[3];
      if (v16 >= v15 >> 1) {
        unint64_t result = sub_1000834BC(v15 > 1, v16 + 1, 1);
      }
      _swiftEmptyArrayStorage[2]  = v16 + 1;
      unint64_t v17 = &_swiftEmptyArrayStorage[v16];
      *((_DWORD *)v17 + 8)  = v14;
      *((unsigned char *)v17 + 36)  = BYTE4(v14);
      *((unsigned char *)v17 + 37)  = BYTE5(v14);
      *((unsigned char *)v17 + 38)  = v12;
      if (v19 < v20) {
        goto LABEL_26;
      }
      if (!v8) {
        goto LABEL_27;
      }
      ++v8;
      uint64_t v4 = v22 - 1;
      uint64_t v3 = v21 - 1;
      if (v21 == 1) {
        return (unint64_t)_swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_1000E4F6C(__int16 a1, uint64_t a2)
{
  unsigned int v39 = HIBYTE(a1);
  uint64_t v38 = (HIBYTE(a1) - a1);
  if (HIBYTE(a1) < a1) {
    uint64_t v3 = -(uint64_t)(a1 - HIBYTE(a1));
  }
  else {
    uint64_t v3 = (HIBYTE(a1) - a1);
  }
  if (!v3) {
    return;
  }
  unsigned __int8 v5 = a1;
  sub_1000835DC(0, v3 & ~(v3 >> 63), 0);
  if (v3 < 0) {
    goto LABEL_52;
  }
  uint64_t v6 = 0;
  LODWORD(v7)  = v39 - v5;
  if (v39 >= v5) {
    uint64_t v7 = v7;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v36 = v3;
  uint64_t v37 = v7;
  while (v6 != v3)
  {
    sub_100039448(a2, *(void *)(a2 + 24));
    unsigned __int8 v8 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    if (v2)
    {
      swift_release();
      return;
    }
    unsigned __int8 v9 = v8;
    if (qword_10047C1C0 != -1) {
      swift_once();
    }
    char v10 = off_100481FE0;
    if (*((void *)off_100481FE0 + 2))
    {
      uint64_t v11 = static Hasher._hash(seed:bytes:count:)();
      uint64_t v12 = -1 << v10[32];
      unint64_t v13 = v11 & ~v12;
      if ((*(void *)&v10[((v13 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v13))
      {
        uint64_t v14 = *((void *)v10 + 6);
        if (*(_DWORD *)(v14 + 4 * v13) == v9)
        {
LABEL_20:
          char v16 = 0;
          char v17 = 3;
          goto LABEL_36;
        }
        uint64_t v15 = ~v12;
        while (1)
        {
          unint64_t v13 = (v13 + 1) & v15;
          if (((*(void *)&v10[((v13 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v13) & 1) == 0) {
            break;
          }
          if (*(_DWORD *)(v14 + 4 * v13) == v9) {
            goto LABEL_20;
          }
        }
      }
    }
    if (qword_10047C1C8 != -1) {
      swift_once();
    }
    uint64_t v18 = off_100481FE8;
    if (*((void *)off_100481FE8 + 2))
    {
      uint64_t v19 = static Hasher._hash(seed:bytes:count:)();
      uint64_t v20 = -1 << v18[32];
      unint64_t v21 = v19 & ~v20;
      if ((*(void *)&v18[((v21 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v21))
      {
        uint64_t v22 = *((void *)v18 + 6);
        if (*(_DWORD *)(v22 + 4 * v21) == v9)
        {
LABEL_29:
          char v16 = 1;
          char v17 = 4;
          goto LABEL_36;
        }
        uint64_t v23 = ~v20;
        while (1)
        {
          unint64_t v21 = (v21 + 1) & v23;
          if (((*(void *)&v18[((v21 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v21) & 1) == 0) {
            break;
          }
          if (*(_DWORD *)(v22 + 4 * v21) == v9) {
            goto LABEL_29;
          }
        }
      }
    }
    if (qword_10047C1D0 != -1) {
      swift_once();
    }
    uint64_t v24 = off_100481FF0;
    if (*((void *)off_100481FF0 + 2))
    {
      uint64_t v25 = static Hasher._hash(seed:bytes:count:)();
      uint64_t v26 = -1 << v24[32];
      unint64_t v27 = v25 & ~v26;
      uint64_t v28 = v24 + 56;
      if ((*(void *)&v24[((v27 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v27))
      {
        uint64_t v29 = *((void *)v24 + 6);
        if (*(_DWORD *)(v29 + 4 * v27) == v9) {
          goto LABEL_35;
        }
        uint64_t v31 = ~v26;
        unint64_t v32 = (v27 + 1) & v31;
        if ((*(void *)&v28[(v32 >> 3) & 0xFFFFFFFFFFFFFF8] >> v32))
        {
          while (*(_DWORD *)(v29 + 4 * v32) != v9)
          {
            unint64_t v32 = (v32 + 1) & v31;
            if (((*(void *)&v28[(v32 >> 3) & 0xFFFFFFFFFFFFFF8] >> v32) & 1) == 0) {
              goto LABEL_40;
            }
          }
LABEL_35:
          char v16 = 2;
          char v17 = 5;
LABEL_36:
          unsigned __int8 v40 = v16;
          unsigned __int8 v41 = v17;
          sub_1001C4000();
          unint64_t v30 = v9 | ((unint64_t)v40 << 32) | ((unint64_t)v41 << 40);
          goto LABEL_41;
        }
      }
    }
LABEL_40:
    unint64_t v30 = 0x300000000;
LABEL_41:
    unint64_t v34 = _swiftEmptyArrayStorage[2];
    unint64_t v33 = _swiftEmptyArrayStorage[3];
    if (v34 >= v33 >> 1) {
      sub_1000835DC(v33 > 1, v34 + 1, 1);
    }
    _swiftEmptyArrayStorage[2]  = v34 + 1;
    uint64_t v35 = &_swiftEmptyArrayStorage[v34];
    *((_DWORD *)v35 + 8)  = v30;
    *((_WORD *)v35 + 18)  = WORD2(v30);
    if (v39 < v5) {
      goto LABEL_50;
    }
    if (v6 == v37) {
      goto LABEL_51;
    }
    ++v6;
    uint64_t v3 = v36;
    if (v6 == v38) {
      return;
    }
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
}

void sub_1000E5384(__int16 a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = (HIBYTE(a1) - a1);
  unsigned int v15 = HIBYTE(a1);
  unsigned __int8 v16 = a1;
  if (HIBYTE(a1) < a1) {
    uint64_t v5 = -(uint64_t)(a1 - HIBYTE(a1));
  }
  else {
    uint64_t v5 = (HIBYTE(a1) - a1);
  }
  if (v5)
  {
    uint64_t v20 = _swiftEmptyArrayStorage;
    sub_1000835DC(0, v5 & ~(v5 >> 63), 0);
    if ((v5 & 0x8000000000000000) == 0)
    {
      uint64_t v6 = v20;
      LODWORD(v7)  = v15 - v16;
      if (v15 >= v16) {
        uint64_t v7 = v7;
      }
      else {
        uint64_t v7 = 0;
      }
      uint64_t v8 = -v7;
      while (v5)
      {
        sub_1000F8C0C(a2, &v17, (uint64_t)&v18);
        if (v3)
        {
          swift_release();
          return;
        }
        uint64_t v3 = 0;
        uint64_t v9 = v19;
        uint64_t v10 = v18;
        uint64_t v20 = v6;
        unint64_t v12 = v6[2];
        unint64_t v11 = v6[3];
        if (v12 >= v11 >> 1)
        {
          sub_1000835DC(v11 > 1, v12 + 1, 1);
          uint64_t v6 = v20;
        }
        _OWORD v6[2] = v12 + 1;
        unint64_t v13 = &v6[v12];
        *((_DWORD *)v13 + 8)  = v10;
        *((_WORD *)v13 + 18)  = (v10 | (unint64_t)(v9 << 32)) >> 32;
        if (v15 < v16) {
          goto LABEL_21;
        }
        if (!v8) {
          goto LABEL_22;
        }
        ++v8;
        --v5;
        if (!--v4) {
          return;
        }
      }
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
    }
    __break(1u);
  }
}

void *sub_1000E54F0(__int16 a1, uint64_t a2)
{
  uint64_t v3 = (HIBYTE(a1) - a1);
  unsigned int v17 = HIBYTE(a1);
  unsigned __int8 v18 = a1;
  if (HIBYTE(a1) < a1) {
    uint64_t v4 = -(uint64_t)(a1 - HIBYTE(a1));
  }
  else {
    uint64_t v4 = (HIBYTE(a1) - a1);
  }
  unint64_t result = _swiftEmptyArrayStorage;
  if (v4)
  {
    unint64_t result = (void *)sub_1000835DC(0, v4 & ~(v4 >> 63), 0);
    if ((v4 & 0x8000000000000000) == 0)
    {
      unint64_t result = _swiftEmptyArrayStorage;
      LODWORD(v7)  = v17 - v18;
      if (v17 >= v18) {
        uint64_t v7 = v7;
      }
      else {
        uint64_t v7 = 0;
      }
      uint64_t v8 = -v7;
      while (v4)
      {
        uint64_t v19 = v3;
        uint64_t v9 = result;
        sub_100039448(a2, *(void *)(a2 + 24));
        char v10 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
        if (v2) {
          return (void *)swift_release();
        }
        char v11 = v10;
        sub_100039448(a2, *(void *)(a2 + 24));
        char v12 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
        unint64_t v13 = sub_1000F8E44(v11, v12);
        unint64_t result = v9;
        unint64_t v15 = v9[2];
        unint64_t v14 = v9[3];
        if (v15 >= v14 >> 1)
        {
          sub_1000835DC(v14 > 1, v15 + 1, 1);
          unint64_t result = v9;
        }
        result[2]  = v15 + 1;
        unsigned __int8 v16 = &result[v15];
        *((_DWORD *)v16 + 8)  = v13;
        *((_WORD *)v16 + 18)  = WORD2(v13);
        if (v17 < v18) {
          goto LABEL_21;
        }
        if (!v8) {
          goto LABEL_22;
        }
        ++v8;
        --v4;
        uint64_t v3 = v19 - 1;
        if (v19 == 1) {
          return result;
        }
      }
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t AWDLActionFrame.DataPathState.UnicastMasterIndicationOptions.rawValue.getter(char a1)
{
  return dword_1003BD778[a1];
}

BOOL AWDLActionFrame.OUIType.init(rawValue:)(char a1)
{
  return a1 != 8;
}

unsigned char *sub_1000E56C8@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  *a2  = *result != 8;
  return result;
}

void sub_1000E56DC(unsigned char *a1@<X8>)
{
  *a1  = 8;
}

uint64_t sub_1000E56E8()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000E5748()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int sub_1000E5798()
{
  return Hasher._finalize()();
}

void sub_1000E57DC()
{
}

Swift::Int sub_1000E5804()
{
  return Hasher._finalize()();
}

CoreP2P::AWDLActionFrame::OUISubtype_optional __swiftcall AWDLActionFrame.OUISubtype.init(rawValue:)(Swift::UInt8 rawValue)
{
  if (rawValue == 3) {
    v1.signed __int8 value = CoreP2P_AWDLActionFrame_OUISubtype_masterIndication;
  }
  else {
    v1.signed __int8 value = CoreP2P_AWDLActionFrame_OUISubtype_unknownDefault;
  }
  if (rawValue) {
    return v1;
  }
  else {
    return 0;
  }
}

uint64_t AWDLActionFrame.OUISubtype.rawValue.getter(int a1)
{
  return (a1 << 31 >> 31) & 3;
}

unsigned char *sub_1000E586C@<X0>(unsigned char *result@<X0>, char *a2@<X8>)
{
  if (*result == 3) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  *a2  = v3;
  return result;
}

void sub_1000E588C(char *a1@<X8>)
{
  if (*v1) {
    char v2 = 3;
  }
  else {
    char v2 = 0;
  }
  *a1  = v2;
}

uint64_t sub_1000E58A4()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000E5904()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int sub_1000E5954()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1) {
    Swift::UInt8 v2 = 3;
  }
  else {
    Swift::UInt8 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_1000E59A4()
{
  if (*v0) {
    Swift::UInt8 v1 = 3;
  }
  else {
    Swift::UInt8 v1 = 0;
  }
  Hasher._combine(_:)(v1);
}

Swift::Int sub_1000E59DC()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1) {
    Swift::UInt8 v2 = 3;
  }
  else {
    Swift::UInt8 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t NANInternetSharingStatistics.Provider.onEthernet.getter(unsigned int a1)
{
  return (a1 >> 8) & 1;
}

uint64_t AWDLActionFrame.AirDrop.state.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 1)  = result & 1;
  return result;
}

uint64_t AWDLActionFrame.ProMode.status.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 4)  = result;
  return result;
}

uint64_t NANDiscoveryBeaconTransmissionSchedule.entries.getter()
{
  return swift_bridgeObjectRetain();
}

void AWDLActionFrame.ServiceRequest.hash(into:)(int a1, unsigned int a2, uint64_t a3)
{
  unsigned int v4 = HIWORD(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v4);
  Swift::UInt v5 = *(void *)(a3 + 16);
  Hasher._combine(_:)(v5);
  if (v5)
  {
    uint64_t v6 = (Swift::UInt8 *)(a3 + 32);
    do
    {
      Swift::UInt8 v7 = *v6++;
      Hasher._combine(_:)(v7);
      --v5;
    }
    while (v5);
  }
}

uint64_t static AWDLActionFrame.ServiceRequest.__derived_struct_equals(_:_:)(int a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a1 == a3) {
    return sub_1000956AC(a2, a4);
  }
  else {
    return 0;
  }
}

uint64_t sub_1000E5ACC()
{
  uint64_t v1 = 7955819;
  if (*v0 == 1) {
    uint64_t v1 = 0x6574736575716572;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6574736575716572;
  }
}

uint64_t sub_1000E5B28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10010C610(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1000E5B50(uint64_t a1)
{
  unint64_t v2 = sub_1000E5DA0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E5B8C(uint64_t a1)
{
  unint64_t v2 = sub_1000E5DA0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AWDLActionFrame.ServiceRequest.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100010BCC(&qword_10047F258);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_1000E5DA0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v3)
  {
    char v13 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[1]  = a3;
    char v12 = 2;
    sub_100010BCC(&qword_10047E7D0);
    sub_10010E990((unint64_t *)&qword_10047F268);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_1000E5DA0()
{
  unint64_t result = qword_10047F260;
  if (!qword_10047F260)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F260);
  }
  return result;
}

Swift::Int AWDLActionFrame.ServiceRequest.hashValue.getter(unsigned int a1, uint64_t a2)
{
  Swift::UInt16 v3 = a1;
  unsigned int v4 = HIWORD(a1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Swift::UInt v5 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v5);
  if (v5)
  {
    uint64_t v6 = (Swift::UInt8 *)(a2 + 32);
    do
    {
      Swift::UInt8 v7 = *v6++;
      Hasher._combine(_:)(v7);
      --v5;
    }
    while (v5);
  }
  return Hasher._finalize()();
}

uint64_t AWDLActionFrame.ServiceRequest.init(from:)(void *a1)
{
  return sub_100100664(a1);
}

uint64_t sub_1000E5E9C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100100664(a1);
  if (!v2)
  {
    *(_DWORD *)a2  = result;
    *(void *)(a2 + 8)  = v5;
  }
  return result;
}

uint64_t sub_1000E5ED4(void *a1)
{
  return AWDLActionFrame.ServiceRequest.encode(to:)(a1, *v1, *((void *)v1 + 1));
}

Swift::Int sub_1000E5EF4()
{
  return AWDLActionFrame.ServiceRequest.hashValue.getter(*(_DWORD *)v0, *(void *)(v0 + 8));
}

void sub_1000E5F00(int a1)
{
  AWDLActionFrame.ServiceRequest.hash(into:)(a1, *(_DWORD *)v1, *(void *)(v1 + 8));
}

Swift::Int sub_1000E5F0C()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Swift::UInt16 v2 = *(_WORD *)v0;
  Swift::UInt16 v3 = *(_WORD *)(v0 + 2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Swift::UInt v4 = *(void *)(v1 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    uint64_t v5 = (Swift::UInt8 *)(v1 + 32);
    do
    {
      Swift::UInt8 v6 = *v5++;
      Hasher._combine(_:)(v6);
      --v4;
    }
    while (v4);
  }
  return Hasher._finalize()();
}

uint64_t sub_1000E5F98(unsigned __int16 *a1, unsigned __int16 *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return sub_1000956AC(*((void *)a1 + 1), *((void *)a2 + 1));
  }
  else {
    return 0;
  }
}

uint64_t AWDLActionFrame.ServiceResponse.hash(into:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DNSRecords.SRV();
  __chkstk_darwin();
  Swift::UInt v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AWDLActionFrame.ServiceResponse(0);
  __chkstk_darwin();
  Swift::UInt8 v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001037C8(v1, (uint64_t)v6, type metadata accessor for AWDLActionFrame.ServiceResponse);
  EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = *((void *)v6 + 5);
      unint64_t v9 = *((void *)v6 + 6);
      Swift::UInt8 v10 = v6[33];
      Hasher._combine(_:)(1uLL);
      String.lowercased()();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      String.lowercased()();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      sub_100013D44(v8, v9);
      Data.hash(into:)();
      sub_10000C970(v8, v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return sub_10000C970(v8, v9);
    }
    else
    {
      sub_10010419C((uint64_t)v6, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for DNSRecords.SRV);
      Hasher._combine(_:)(2uLL);
      Swift::UInt8 v13 = v4[33];
      String.lowercased()();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      String.lowercased()();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(v13);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      type metadata accessor for NWEndpoint.Port();
      sub_100104154(&qword_10047E198, (void (*)(uint64_t))&type metadata accessor for NWEndpoint.Port);
      dispatch thunk of Hashable.hash(into:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(*(_WORD *)&v4[*(int *)(v2 + 28)]);
      Hasher._combine(_:)(*(_WORD *)&v4[*(int *)(v2 + 32)]);
      return sub_100103830((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for DNSRecords.SRV);
    }
  }
  else
  {
    Swift::UInt8 v12 = v6[33];
    Hasher._combine(_:)(0);
    String.lowercased()();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    String.lowercased()();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(v12);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease_n();
  }
}

Swift::Int AWDLActionFrame.ServiceResponse.hashValue.getter()
{
  return sub_1000FA1C0((void (*)(unsigned char *))AWDLActionFrame.ServiceResponse.hash(into:));
}

uint64_t sub_1000E6490@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AWDLActionFrame.ServiceResponse.init(from:)(a1, a2);
}

uint64_t sub_1000E64A8(void *a1)
{
  return AWDLActionFrame.ServiceResponse.encode(to:)(a1);
}

Swift::Int sub_1000E64C0(uint64_t a1, uint64_t a2)
{
  return sub_1000FA220(a1, a2, (void (*)(unsigned char *))AWDLActionFrame.ServiceResponse.hash(into:));
}

Swift::Int sub_1000E64DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FA284(a1, a2, a3, (void (*)(unsigned char *))AWDLActionFrame.ServiceResponse.hash(into:));
}

void AWDLActionFrame.AWDLChannelSequenceParameter.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    Swift::UInt v4 = (unsigned int *)(a2 + 32);
    do
    {
      unint64_t v6 = *v4 | ((unint64_t)*((unsigned __int16 *)v4 + 2) << 32);
      if ((v6 & 0xFF00000000) == 0x300000000)
      {
        Swift::UInt8 v5 = 0;
LABEL_4:
        Hasher._combine(_:)(v5);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v6);
        Hasher._combine(_:)(0x801004u >> ((v6 >> 29) & 0xF8));
        switch(v6 >> 40)
        {
          case 2uLL:
            Hasher._combine(_:)(0);
            break;
          case 3uLL:
            Hasher._combine(_:)(1uLL);
            break;
          case 4uLL:
            Hasher._combine(_:)(3uLL);
            break;
          case 5uLL:
            Hasher._combine(_:)(4uLL);
            break;
          case 6uLL:
            Hasher._combine(_:)(5uLL);
            break;
          default:
            Hasher._combine(_:)(2uLL);
            Swift::UInt8 v5 = BYTE5(v6) & 1;
            goto LABEL_4;
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
}

Swift::Int ChannelSequence.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  sub_10009EDD8((uint64_t)v3, a1);
  return Hasher._finalize()();
}

uint64_t sub_1000E667C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = AWDLActionFrame.AWDLChannelSequenceParameter.init(from:)(a1);
  if (!v2) {
    *a2  = result;
  }
  return result;
}

uint64_t AWDLActionFrame.AWDLChannelSequenceParameter.init(from:)(void *a1)
{
  return sub_100102EF4(a1);
}

uint64_t sub_1000E66C0(void *a1)
{
  uint64_t v3 = *v1;
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  sub_1000F8468((uint64_t)v5, 3u, v3);
  if (!v2)
  {
    sub_100039448((uint64_t)v5, v6);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    sub_100039448((uint64_t)v5, v6);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  }
  return sub_100010754((uint64_t)v5);
}

uint64_t AWDLActionFrame.AWDLChannelSequenceParameter.encode(to:)(void *a1, uint64_t a2)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  sub_1000F8468((uint64_t)v5, 3u, a2);
  if (!v2)
  {
    sub_100039448((uint64_t)v5, v6);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    sub_100039448((uint64_t)v5, v6);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  }
  return sub_100010754((uint64_t)v5);
}

Swift::Int sub_1000E6880()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  sub_10009EDD8((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_1000E68C8(uint64_t a1)
{
  AWDLActionFrame.AWDLChannelSequenceParameter.hash(into:)(a1, *v1);
}

Swift::Int sub_1000E68D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EDE30(a1, a2, a3, (void (*)(unsigned char *, uint64_t))AWDLActionFrame.AWDLChannelSequenceParameter.hash(into:));
}

uint64_t sub_1000E68E8(uint64_t *a1, uint64_t *a2)
{
  return _s7CoreP2P15AWDLActionFrameV28AWDLChannelSequenceParameterV23__derived_struct_equalsySbAE_AEtFZ_0(*a1, *a2);
}

uint64_t AWDLPeer.AdvertisedService.instanceID.getter()
{
  return *v0;
}

uint64_t AWDLActionFrame.SynchronizationParameter.downCounter.getter()
{
  return *(unsigned __int16 *)(v0 + 2);
}

uint64_t AWDLActionFrame.SynchronizationParameter.masterHomeChannel.getter()
{
  return *(unsigned __int8 *)(v0 + 4);
}

uint64_t AWDLActionFrame.SynchronizationParameter.guardTime.getter()
{
  return *(unsigned __int8 *)(v0 + 5);
}

uint64_t Channel.bandwidth.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 5)  = result;
  return result;
}

uint64_t (*Channel.bandwidth.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLActionFrame.SynchronizationParameter.availabilityWindowPeriod.getter()
{
  return *(unsigned __int16 *)(v0 + 6);
}

uint64_t AWDLActionFrame.SynchronizationParameter.actionFramePeriod.getter()
{
  return *(unsigned __int16 *)(v0 + 8);
}

uint64_t AWDLActionFrame.SynchronizationParameter.flags.getter()
{
  return *(unsigned __int16 *)(v0 + 10);
}

uint64_t AWDLActionFrame.SynchronizationParameter.availabilityWindowExtensionLength.getter()
{
  return *(unsigned __int16 *)(v0 + 12);
}

uint64_t AWDLActionFrame.SynchronizationParameter.availabilityWindowLength.getter()
{
  return *(unsigned __int16 *)(v0 + 14);
}

uint64_t AWDLActionFrame.SynchronizationParameter.availabilityWindowLength.setter(uint64_t result)
{
  *(_WORD *)(v1 + 14)  = result;
  return result;
}

uint64_t (*AWDLActionFrame.SynchronizationParameter.availabilityWindowLength.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLActionFrame.SynchronizationParameter.availabilityWindowRemain.getter()
{
  return *(unsigned __int16 *)(v0 + 16);
}

uint64_t AWDLActionFrame.SynchronizationParameter.availabilityWindowRemain.setter(uint64_t result)
{
  *(_WORD *)(v1 + 16)  = result;
  return result;
}

uint64_t AWDLActionFrame.SynchronizationParameter.minimumExtensions.getter()
{
  return *(unsigned __int8 *)(v0 + 18);
}

uint64_t AWDLActionFrame.SynchronizationParameter.minimumExtensions.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 18)  = result;
  return result;
}

uint64_t (*AWDLActionFrame.SynchronizationParameter.minimumExtensions.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANCoreAnalyticsMetrics.singleBandPeers.getter()
{
  return *(unsigned __int8 *)(v0 + 19);
}

uint64_t NANCoreAnalyticsMetrics.singleBandPeers.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 19)  = result;
  return result;
}

uint64_t (*NANCoreAnalyticsMetrics.singleBandPeers.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLActionFrame.SynchronizationParameter.maximumUnicastExtensions.getter()
{
  return *(unsigned __int8 *)(v0 + 20);
}

uint64_t AWDLActionFrame.SynchronizationParameter.maximumUnicastExtensions.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 20)  = result;
  return result;
}

uint64_t (*AWDLActionFrame.Header.flags.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLActionFrame.SynchronizationParameter.maximumActionFrameExtensions.getter()
{
  return *(unsigned __int8 *)(v0 + 21);
}

uint64_t AWDLActionFrame.SynchronizationParameter.maximumActionFrameExtensions.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 21)  = result;
  return result;
}

uint64_t (*AWDLActionFrame.SynchronizationParameter.maximumActionFrameExtensions.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

unint64_t AWDLActionFrame.SynchronizationParameter.master.getter()
{
  return *(unsigned __int16 *)(v0 + 22) | ((unint64_t)*(unsigned int *)(v0 + 24) << 16);
}

uint64_t AWDLActionFrame.SynchronizationParameter.master.setter(uint64_t result)
{
  *(_WORD *)(v1 + 22)  = result;
  *(unsigned char *)(v1 + 24)  = BYTE2(result);
  *(unsigned char *)(v1 + 25)  = BYTE3(result);
  *(unsigned char *)(v1 + 26)  = BYTE4(result);
  *(unsigned char *)(v1 + 27)  = BYTE5(result);
  return result;
}

uint64_t (*AWDLActionFrame.SynchronizationParameter.master.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLActionFrame.SynchronizationParameter.presenceMode.getter()
{
  return *(unsigned __int8 *)(v0 + 28);
}

uint64_t AWDLActionFrame.SynchronizationParameter.presenceMode.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 28)  = result;
  return result;
}

uint64_t (*AWDLActionFrame.SynchronizationParameter.presenceMode.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLActionFrame.SynchronizationParameter.reserved.getter()
{
  return *(unsigned __int8 *)(v0 + 29);
}

uint64_t AWDLActionFrame.SynchronizationParameter.reserved.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 29)  = result;
  return result;
}

uint64_t (*AWDLActionFrame.SynchronizationParameter.reserved.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLActionFrame.SynchronizationParameter.sequence.getter()
{
  return *(unsigned __int16 *)(v0 + 30);
}

uint64_t AWDLActionFrame.SynchronizationParameter.sequence.setter(uint64_t result)
{
  *(_WORD *)(v1 + 30)  = result;
  return result;
}

uint64_t (*AWDLActionFrame.SynchronizationParameter.sequence.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLActionFrame.SynchronizationParameter.accessPointBeaconDeltaAlignment.getter()
{
  return *(unsigned __int16 *)(v0 + 32);
}

uint64_t AWDLActionFrame.SynchronizationParameter.accessPointBeaconDeltaAlignment.setter(uint64_t result)
{
  *(_WORD *)(v1 + 32)  = result;
  return result;
}

uint64_t AWDLActionFrame.SynchronizationParameter.channelSequence.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  sub_1001030D4(v0);
  return v1;
}

void AWDLActionFrame.SynchronizationParameter.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Hasher._combine(_:)(*(unsigned char *)v2);
  Hasher._combine(_:)(*(_WORD *)(v2 + 2));
  Hasher._combine(_:)(*(unsigned char *)(v2 + 4));
  Hasher._combine(_:)(*(unsigned char *)(v2 + 5));
  Hasher._combine(_:)(*(_WORD *)(v2 + 6));
  Hasher._combine(_:)(*(_WORD *)(v2 + 8));
  Hasher._combine(_:)(*(_WORD *)(v2 + 10));
  Hasher._combine(_:)(*(_WORD *)(v2 + 12));
  Hasher._combine(_:)(*(_WORD *)(v2 + 14));
  Hasher._combine(_:)(*(_WORD *)(v2 + 16));
  Hasher._combine(_:)(*(unsigned char *)(v2 + 18));
  Hasher._combine(_:)(*(unsigned char *)(v2 + 19));
  Hasher._combine(_:)(*(unsigned char *)(v2 + 20));
  Hasher._combine(_:)(*(unsigned char *)(v2 + 21));
  Swift::UInt8 v4 = *(unsigned char *)(v2 + 23);
  Swift::UInt8 v5 = *(unsigned char *)(v2 + 24);
  Swift::UInt8 v6 = *(unsigned char *)(v2 + 25);
  Swift::UInt8 v7 = *(unsigned char *)(v2 + 26);
  Swift::UInt8 v8 = *(unsigned char *)(v2 + 27);
  Hasher._combine(_:)(*(unsigned char *)(v2 + 22));
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(*(unsigned char *)(v2 + 28));
  Hasher._combine(_:)(*(unsigned char *)(v2 + 29));
  Hasher._combine(_:)(*(_WORD *)(v2 + 30));
  Hasher._combine(_:)(*(_WORD *)(v2 + 32));
  uint64_t v9 = *(void *)(v2 + 40);

  sub_10009EDD8(a1, v9);
}

uint64_t sub_1000E6CB4(char a1)
{
  uint64_t result = 0x74696D736E617274;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6E756F436E776F64;
      break;
    case 2:
      uint64_t result = 0xD000000000000011;
      break;
    case 3:
      uint64_t result = 0x6D69546472617567;
      break;
    case 4:
    case 8:
    case 9:
    case 12:
    case 19:
      uint64_t result = 0xD000000000000018;
      break;
    case 5:
      uint64_t result = 0xD000000000000011;
      break;
    case 6:
      uint64_t result = 0x7367616C66;
      break;
    case 7:
      uint64_t result = 0xD000000000000021;
      break;
    case 10:
      uint64_t result = 0xD000000000000011;
      break;
    case 11:
      uint64_t result = 0xD00000000000001ALL;
      break;
    case 13:
      uint64_t result = 0xD00000000000001CLL;
      break;
    case 14:
      uint64_t result = 0x72657473616DLL;
      break;
    case 15:
      unsigned int v3 = 1936028272;
      goto LABEL_15;
    case 16:
      uint64_t result = 0x6465767265736572;
      break;
    case 17:
      unsigned int v3 = 1970365811;
LABEL_15:
      uint64_t result = v3 | 0x65636E6500000000;
      break;
    case 18:
      uint64_t result = 0xD00000000000001FLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000E6EF4()
{
  return sub_1000E6CB4(*v0);
}

uint64_t sub_1000E6EFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10010C798(a1, a2);
  *a3  = result;
  return result;
}

void sub_1000E6F24(unsigned char *a1@<X8>)
{
  *a1  = 20;
}

uint64_t sub_1000E6F30(uint64_t a1)
{
  unint64_t v2 = sub_10010EBB4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E6F6C(uint64_t a1)
{
  unint64_t v2 = sub_10010EBB4();

  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int AWDLActionFrame.SynchronizationParameter.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(unsigned char *)v0);
  Hasher._combine(_:)(*(_WORD *)(v0 + 2));
  Hasher._combine(_:)(*(unsigned char *)(v0 + 4));
  Hasher._combine(_:)(*(unsigned char *)(v0 + 5));
  Hasher._combine(_:)(*(_WORD *)(v0 + 6));
  Hasher._combine(_:)(*(_WORD *)(v0 + 8));
  Hasher._combine(_:)(*(_WORD *)(v0 + 10));
  Hasher._combine(_:)(*(_WORD *)(v0 + 12));
  Hasher._combine(_:)(*(_WORD *)(v0 + 14));
  Hasher._combine(_:)(*(_WORD *)(v0 + 16));
  Hasher._combine(_:)(*(unsigned char *)(v0 + 18));
  Hasher._combine(_:)(*(unsigned char *)(v0 + 19));
  Hasher._combine(_:)(*(unsigned char *)(v0 + 20));
  Hasher._combine(_:)(*(unsigned char *)(v0 + 21));
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 23);
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 24);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 25);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 26);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 27);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 22));
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 28));
  Hasher._combine(_:)(*(unsigned char *)(v0 + 29));
  Hasher._combine(_:)(*(_WORD *)(v0 + 30));
  Hasher._combine(_:)(*(_WORD *)(v0 + 32));
  sub_10009EDD8((uint64_t)v7, *(void *)(v0 + 40));
  return Hasher._finalize()();
}

double AWDLActionFrame.SynchronizationParameter.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100100898(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2  = v6[0];
    a2[1]  = v5;
    double result = *(double *)&v7;
    a2[2]  = v7;
  }
  return result;
}

uint64_t sub_1000E7180(void *a1)
{
  return AWDLActionFrame.SynchronizationParameter.encode(to:)(a1);
}

uint64_t AWDLActionFrame.SynchronizationParameter.encode(to:)(void *a1)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  sub_100039448((uint64_t)v4, v5);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  if (!v2)
  {
    sub_100039448((uint64_t)v4, v5);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    sub_100039448((uint64_t)v4, v5);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    sub_100039448((uint64_t)v4, v5);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    sub_100039448((uint64_t)v4, v5);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    sub_100039448((uint64_t)v4, v5);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    sub_100039448((uint64_t)v4, v5);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    sub_100039448((uint64_t)v4, v5);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    sub_100039448((uint64_t)v4, v5);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    sub_100039448((uint64_t)v4, v5);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    sub_100039448((uint64_t)v4, v5);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    sub_100039448((uint64_t)v4, v5);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    sub_100039448((uint64_t)v4, v5);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    sub_100039448((uint64_t)v4, v5);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    int v6 = *(_DWORD *)(v1 + 22);
    __int16 v7 = *(_WORD *)(v1 + 26);
    sub_100039448((uint64_t)v4, v5);
    sub_10003F27C();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    sub_100039448((uint64_t)v4, v5);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    sub_100039448((uint64_t)v4, v5);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    sub_100039448((uint64_t)v4, v5);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    sub_100039448((uint64_t)v4, v5);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    sub_1000F8468((uint64_t)v4, 1u, *(void *)(v1 + 40));
    sub_100039448((uint64_t)v4, v5);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  }
  return sub_100010754((uint64_t)v4);
}

Swift::Int sub_1000E7690()
{
  uint64_t v26 = *(void *)(v0 + 40);
  Swift::UInt8 v1 = *(unsigned char *)v0;
  Swift::UInt16 v2 = *(_WORD *)(v0 + 2);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 5);
  Swift::UInt16 v5 = *(_WORD *)(v0 + 6);
  Swift::UInt16 v6 = *(_WORD *)(v0 + 8);
  Swift::UInt16 v7 = *(_WORD *)(v0 + 10);
  Swift::UInt16 v8 = *(_WORD *)(v0 + 12);
  Swift::UInt16 v9 = *(_WORD *)(v0 + 14);
  Swift::UInt16 v11 = *(_WORD *)(v0 + 16);
  Swift::UInt8 v12 = *(unsigned char *)(v0 + 18);
  Swift::UInt8 v13 = *(unsigned char *)(v0 + 19);
  Swift::UInt8 v14 = *(unsigned char *)(v0 + 20);
  Swift::UInt8 v15 = *(unsigned char *)(v0 + 21);
  Swift::UInt8 v16 = *(unsigned char *)(v0 + 22);
  Swift::UInt8 v17 = *(unsigned char *)(v0 + 23);
  Swift::UInt8 v18 = *(unsigned char *)(v0 + 24);
  Swift::UInt8 v19 = *(unsigned char *)(v0 + 25);
  Swift::UInt8 v20 = *(unsigned char *)(v0 + 26);
  Swift::UInt8 v21 = *(unsigned char *)(v0 + 27);
  Swift::UInt8 v22 = *(unsigned char *)(v0 + 28);
  Swift::UInt8 v23 = *(unsigned char *)(v0 + 29);
  Swift::UInt16 v24 = *(_WORD *)(v0 + 30);
  Swift::UInt16 v25 = *(_WORD *)(v0 + 32);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  Hasher._combine(_:)(v16);
  Hasher._combine(_:)(v17);
  Hasher._combine(_:)(v18);
  Hasher._combine(_:)(v19);
  Hasher._combine(_:)(v20);
  Hasher._combine(_:)(v21);
  Hasher._combine(_:)(v22);
  Hasher._combine(_:)(v23);
  Hasher._combine(_:)(v24);
  Hasher._combine(_:)(v25);
  sub_10009EDD8((uint64_t)v27, v26);
  return Hasher._finalize()();
}

uint64_t sub_1000E7898(_OWORD *a1, long long *a2)
{
  long long v2 = a1[1];
  v7[0]  = *a1;
  v7[1]  = v2;
  long long v3 = *a2;
  long long v4 = a2[1];
  unsigned char v7[2] = a1[2];
  v8[0]  = v3;
  long long v5 = a2[2];
  v8[1]  = v4;
  _OWORD v8[2] = v5;
  return _s7CoreP2P15AWDLActionFrameV24SynchronizationParameterV23__derived_struct_equalsySbAE_AEtFZ_0((unsigned __int8 *)v7, (unsigned __int8 *)v8) & 1;
}

unint64_t Channel.bandwidth.getter(unint64_t a1)
{
  return a1 >> 40;
}

unint64_t AWDLActionFrame.DeprecatedElectionParameter.address.getter(unint64_t a1, unsigned int a2)
{
  return HIWORD(a1) & 0xFFFF00000000FFFFLL | ((unint64_t)a2 << 16);
}

uint64_t AWDLActionFrame.Header.bssid.setter(uint64_t result)
{
  *(_WORD *)(v1 + 6)  = result;
  *(unsigned char *)(v1 + 8)  = BYTE2(result);
  *(unsigned char *)(v1 + 9)  = BYTE3(result);
  *(unsigned char *)(v1 + 10)  = BYTE4(result);
  *(unsigned char *)(v1 + 11)  = BYTE5(result);
  return result;
}

uint64_t AWDLActionFrame.DeprecatedElectionParameter.topMasterMetric.getter(uint64_t a1, uint64_t a2, char a3)
{
  *((void *)&v4 + 1)  = a3 & 1;
  *(void *)&long long v4 = a2;
  return v4 >> 32;
}

uint64_t AWDLActionFrame.DeprecatedElectionParameter.topMasterMetric.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 12)  = result;
  *(unsigned char *)(v1 + 16)  = BYTE4(result) & 1;
  return result;
}

uint64_t AWDLActionFrame.DeprecatedElectionParameter.selfElectionMetric.getter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *((void *)&v5 + 1)  = a4 & 1;
  *(void *)&long long v5 = a3;
  return v5 >> 32;
}

uint64_t AWDLActionFrame.DeprecatedElectionParameter.selfElectionMetric.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 20)  = result;
  *(unsigned char *)(v1 + 24)  = BYTE4(result) & 1;
  return result;
}

void AWDLActionFrame.DeprecatedElectionParameter.hash(into:)(int a1, unint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  unint64_t v18 = HIDWORD(a4);
  unint64_t v7 = a2 >> 16;
  unint64_t v8 = HIDWORD(a2);
  unint64_t v9 = a2 >> 40;
  unint64_t v10 = HIWORD(a2);
  unint64_t v11 = HIBYTE(a2);
  unint64_t v12 = a3 >> 8;
  unint64_t v13 = a3 >> 16;
  *(void *)Swift::UInt8 v16 = a3 >> 24;
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(a3);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v16[0]);
  if (a4) {
    LODWORD(v14)  = dword_1003BD744[(uint64_t)a3 >> 32];
  }
  else {
    unint64_t v14 = HIDWORD(a3);
  }
  Hasher._combine(_:)(v14);
  Swift::UInt32 v15 = v18;
  if (a5) {
    Swift::UInt32 v15 = dword_1003BD744[a4 >> 32];
  }
  Hasher._combine(_:)(v15);
}

BOOL static AWDLActionFrame.DeprecatedElectionParameter.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  return sub_1000FDDE0(a1 & 0xFFFFFFFFFFFF00FFLL, a2, a3 & 0xFFFFFFFF00000001, a4 & 1, a5 & 0xFFFFFFFFFFFF00FFLL, a6, a7 & 0xFFFFFFFF00000001, a8 & 1);
}

unint64_t sub_1000E7ABC(char a1)
{
  unint64_t result = 0x7367616C66;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6E6F697463656C65;
      break;
    case 2:
      unint64_t result = 0x65636E6174736964;
      break;
    case 3:
      unint64_t result = 0x6465767265736572;
      break;
    case 4:
      unint64_t result = 0x73736572646461;
      break;
    case 5:
      unint64_t result = 0x657473614D706F74;
      break;
    case 6:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1000E7BCC()
{
  return sub_1000E7ABC(*v0);
}

uint64_t sub_1000E7BD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10010CF40(a1, a2);
  *a3  = result;
  return result;
}

void sub_1000E7BFC(unsigned char *a1@<X8>)
{
  *a1  = 7;
}

uint64_t sub_1000E7C08(uint64_t a1)
{
  unint64_t v2 = sub_10010EB60();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E7C44(uint64_t a1)
{
  unint64_t v2 = sub_10010EB60();

  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int AWDLActionFrame.DeprecatedElectionParameter.hashValue.getter(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  char v5 = a3;
  unint64_t v8 = a3 & 0xFFFFFFFF00000000;
  Hasher.init(_seed:)();
  AWDLActionFrame.DeprecatedElectionParameter.hash(into:)((int)&v10, a1 & 0xFFFFFFFFFFFF00FFLL, a2, v8 | v5 & 1, a4 & 1);
  return Hasher._finalize()();
}

unint64_t AWDLActionFrame.DeprecatedElectionParameter.init(from:)(void *a1)
{
  unint64_t result = sub_100100E00(a1);
  if (!v1) {
    result &= 0xFFFFFFFFFFFF00FFLL;
  }
  return result;
}

unint64_t sub_1000E7D48@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_100100E00(a1);
  if (!v2)
  {
    *(unsigned char *)a2  = result;
    *(_WORD *)(a2 + 2)  = WORD1(result);
    *(unsigned char *)(a2 + 4)  = BYTE4(result);
    *(unsigned char *)(a2 + 5)  = BYTE5(result);
    *(unsigned char *)(a2 + 6)  = BYTE6(result);
    *(unsigned char *)(a2 + 7)  = HIBYTE(result);
    *(void *)(a2 + 8)  = v5;
    *(unsigned char *)(a2 + 16)  = v6 & 1;
    *(_DWORD *)(a2 + 20)  = v7;
    *(unsigned char *)(a2 + 24)  = v8 & 1;
  }
  return result;
}

uint64_t sub_1000E7DD8(void *a1)
{
  return AWDLActionFrame.DeprecatedElectionParameter.encode(to:)(a1);
}

uint64_t AWDLActionFrame.DeprecatedElectionParameter.encode(to:)(void *a1)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  sub_100039448((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  if (!v1)
  {
    sub_100039448((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    sub_100039448((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    sub_100039448((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    sub_100039448((uint64_t)v3, v4);
    sub_10003F27C();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    sub_100039448((uint64_t)v3, v4);
    sub_100103100();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    sub_100039448((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    sub_100039448((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  }
  return sub_100010754((uint64_t)v3);
}

Swift::Int sub_1000E80D0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *((unsigned __int16 *)v0 + 1);
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v5 = v0[6];
  unsigned __int8 v6 = v0[16];
  char v7 = v0[24];
  uint64_t v8 = v0[7];
  unint64_t v9 = *((void *)v0 + 1);
  uint64_t v10 = *((unsigned int *)v0 + 5);
  Hasher.init(_seed:)();
  AWDLActionFrame.DeprecatedElectionParameter.hash(into:)((int)&v12, v1 | (v2 << 16) | (v3 << 32) | (v4 << 40) | (v5 << 48) | (v8 << 56), v9, v6 | (unint64_t)(v10 << 32), v7);
  return Hasher._finalize()();
}

void sub_1000E8184(int a1)
{
  AWDLActionFrame.DeprecatedElectionParameter.hash(into:)(a1, *v1 | ((unint64_t)*((unsigned __int16 *)v1 + 1) << 16) | ((unint64_t)v1[4] << 32) | ((unint64_t)v1[5] << 40) | ((unint64_t)v1[6] << 48) | ((unint64_t)v1[7] << 56), *((void *)v1 + 1), v1[16] | ((unint64_t)*((unsigned int *)v1 + 5) << 32), v1[24]);
}

Swift::Int sub_1000E81D8()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *((unsigned __int16 *)v0 + 1);
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v5 = v0[6];
  unsigned __int8 v6 = v0[16];
  char v7 = v0[24];
  uint64_t v8 = v0[7];
  unint64_t v9 = *((void *)v0 + 1);
  uint64_t v10 = *((unsigned int *)v0 + 5);
  Hasher.init(_seed:)();
  AWDLActionFrame.DeprecatedElectionParameter.hash(into:)((int)&v12, v1 | (v2 << 16) | (v3 << 32) | (v4 << 40) | (v5 << 48) | (v8 << 56), v9, v6 | (unint64_t)(v10 << 32), v7);
  return Hasher._finalize()();
}

BOOL sub_1000E8288(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v3 = a1[16];
  char v4 = a1[24];
  char v5 = a2[24];
  uint64_t v6 = *((void *)a1 + 1);
  uint64_t v7 = *((unsigned int *)a1 + 5);
  uint64_t v8 = *((void *)a2 + 1);
  unint64_t v9 = *a1 | ((unint64_t)*((unsigned __int16 *)a1 + 1) << 16) | ((unint64_t)a1[4] << 32) | ((unint64_t)a1[5] << 40) | ((unint64_t)a1[6] << 48) | ((unint64_t)a1[7] << 56);
  unint64_t v10 = *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 1) << 16) | ((unint64_t)a2[4] << 32) | ((unint64_t)a2[5] << 40) | ((unint64_t)a2[6] << 48) | ((unint64_t)a2[7] << 56);
  unint64_t v11 = a2[16] | ((unint64_t)*((unsigned int *)a2 + 5) << 32);
  return sub_1000FDDE0(v9, v6, v3 | (unint64_t)(v7 << 32), v4, v10, v8, v11, v5);
}

void *AWDLActionFrame.ServiceParameter.Flags.serviceRequests.unsafeMutableAddressor()
{
  return &static AWDLActionFrame.ServiceParameter.Flags.serviceRequests;
}

void *AWDLActionFrame.ServiceParameter.Flags.missingBits.unsafeMutableAddressor()
{
  return &static AWDLActionFrame.ServiceParameter.Flags.missingBits;
}

void *AWDLActionFrame.ServiceParameter.Flags.duplicates.unsafeMutableAddressor()
{
  return &static AWDLActionFrame.ServiceParameter.Flags.duplicates;
}

void *AWDLActionFrame.ServiceParameter.Flags.autoGenerateAAAA.unsafeMutableAddressor()
{
  return &static AWDLActionFrame.ServiceParameter.Flags.autoGenerateAAAA;
}

void *AWDLActionFrame.ServiceParameter.Flags.allKeys.unsafeMutableAddressor()
{
  return &static AWDLActionFrame.ServiceParameter.Flags.allKeys;
}

void *AWDLActionFrame.ServiceParameter.Flags.serviceResponseOverflow.unsafeMutableAddressor()
{
  return &static AWDLActionFrame.ServiceParameter.Flags.serviceResponseOverflow;
}

void *AWDLActionFrame.ServiceParameter.Flags.supportsWiFiAwareMigration.unsafeMutableAddressor()
{
  return &static AWDLActionFrame.ServiceParameter.Flags.supportsWiFiAwareMigration;
}

uint64_t sub_1000E8398()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000E83F8()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1000E8448()
{
  uint64_t result = Data.subdata(in:)();
  static AWDLActionFrame.ServiceParameter.SSTH.zero  = 0;
  qword_100488500  = result;
  unk_100488508  = v1;
  return result;
}

uint64_t AWDLActionFrame.ServiceParameter.SSTH.init(ssthByteMap:compressedSSTH:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v7 = sub_1001025E4(a1, a2, a3);
  if (!v4) {
    uint64_t v3 = v7;
  }
  sub_10000C970(a2, a3);
  return v3;
}

int *AWDLActionFrame.ServiceParameter.SSTH.zero.unsafeMutableAddressor()
{
  if (qword_10047BFB8 != -1) {
    swift_once();
  }
  return &static AWDLActionFrame.ServiceParameter.SSTH.zero;
}

uint64_t static AWDLActionFrame.ServiceParameter.SSTH.zero.getter()
{
  if (qword_10047BFB8 != -1) {
    swift_once();
  }
  uint64_t v0 = static AWDLActionFrame.ServiceParameter.SSTH.zero;
  sub_100013D44(qword_100488500, qword_100488508);
  return v0;
}

uint64_t AWDLActionFrame.ServiceParameter.SSTH.init(from:)(void *a1)
{
  LODWORD(result)  = sub_100102AA4(a1);
  if (v1) {
    return v3;
  }
  else {
    return result;
  }
}

uint64_t AWDLActionFrame.ServiceParameter.SSTH.hash(into:)(int a1, Swift::UInt32 a2, uint64_t a3, unint64_t a4)
{
  Hasher._combine(_:)(a2);
  sub_100013D44(a3, a4);
  Data.hash(into:)();

  return sub_10000C970(a3, a4);
}

uint64_t static AWDLActionFrame.ServiceParameter.SSTH.__derived_struct_equals(_:_:)(int a1, uint64_t a2, unint64_t a3, int a4, uint64_t a5, unint64_t a6)
{
  if (a1 == a4) {
    return _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a2, a3, a5, a6);
  }
  else {
    return 0;
  }
}

uint64_t sub_1000E8678()
{
  if (*v0) {
    return 0x73736572706D6F63;
  }
  else {
    return 0x6574794268747373;
  }
}

uint64_t sub_1000E86C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10010D294(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1000E86F0(uint64_t a1)
{
  unint64_t v2 = sub_100103154();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E872C(uint64_t a1)
{
  unint64_t v2 = sub_100103154();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AWDLActionFrame.ServiceParameter.SSTH.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = a4;
  uint64_t v7 = sub_100010BCC(&qword_10047F278);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  unint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_100103154();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v14)  = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v4)
  {
    uint64_t v14 = a3;
    uint64_t v15 = v13;
    char v16 = 1;
    sub_1000742DC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int AWDLActionFrame.ServiceParameter.SSTH.hashValue.getter(Swift::UInt32 a1, uint64_t a2, unint64_t a3)
{
  return Hasher._finalize()();
}

Swift::Int sub_1000E8970()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  unint64_t v3 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  sub_100013D44(v2, v3);
  Data.hash(into:)();
  sub_10000C970(v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_1000E89EC()
{
  uint64_t v1 = *(void *)(v0 + 8);
  unint64_t v2 = *(void *)(v0 + 16);
  Hasher._combine(_:)(*(_DWORD *)v0);
  sub_100013D44(v1, v2);
  Data.hash(into:)();

  return sub_10000C970(v1, v2);
}

Swift::Int sub_1000E8A58()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  unint64_t v3 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  sub_100013D44(v2, v3);
  Data.hash(into:)();
  sub_10000C970(v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_1000E8AD0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100102AA4(a1);
  if (!v2)
  {
    *(_DWORD *)a2  = result;
    *(void *)(a2 + 8)  = v5;
    *(void *)(a2 + 16)  = v6;
  }
  return result;
}

uint64_t sub_1000E8B00(void *a1)
{
  return AWDLActionFrame.ServiceParameter.SSTH.encode(to:)(a1, *v1, *((void *)v1 + 1), *((void *)v1 + 2));
}

uint64_t sub_1000E8B20(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == *(_DWORD *)a2) {
    return _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a2 + 8), *(void *)(a2 + 16));
  }
  else {
    return 0;
  }
}

uint64_t IEEE80211InformationElement.VeryHighThroughputCapability.rxMCSMap.setter(uint64_t result)
{
  *(_WORD *)(v1 + 4)  = result;
  return result;
}

uint64_t AWDLActionFrame.ServiceParameter.ssth.setter(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_10000C970(*(void *)(v3 + 16), *(void *)(v3 + 24));
  *(_DWORD *)(v3 + 8)  = a1;
  *(void *)(v3 + 16)  = a2;
  *(void *)(v3 + 24)  = a3;
  return result;
}

uint64_t AWDLActionFrame.ServiceParameter.hash(into:)(int a1, unint64_t a2, Swift::UInt32 a3, uint64_t a4, unint64_t a5)
{
  unint64_t v8 = a2 >> 16;
  unint64_t v9 = HIDWORD(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(a3);
  sub_100013D44(a4, a5);
  Data.hash(into:)();

  return sub_10000C970(a4, a5);
}

BOOL static AWDLActionFrame.ServiceParameter.__derived_struct_equals(_:_:)(unint64_t a1, int a2, uint64_t a3, unint64_t a4, unint64_t a5, int a6, uint64_t a7, unint64_t a8)
{
  BOOL result = 0;
  if (a1 == a5 && (a1 >> 16) == (a5 >> 16)) {
    return a2 == a6 && (_s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a3, a4, a7, a8) & 1) != 0;
  }
  return result;
}

unint64_t sub_1000E8C8C()
{
  unint64_t result = 0x7367616C66;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6D69546C6C657764;
      break;
    case 2:
      unint64_t result = 0xD000000000000016;
      break;
    case 3:
      unint64_t result = 1752462195;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000E8D18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10010D3C4(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1000E8D40(uint64_t a1)
{
  unint64_t v2 = sub_1001031A8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E8D7C(uint64_t a1)
{
  unint64_t v2 = sub_1001031A8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AWDLActionFrame.ServiceParameter.encode(to:)(void *a1, char a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v9 = sub_100010BCC(&qword_10047F288);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_1001031A8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v20)  = a2;
  char v23 = 0;
  sub_1001031FC();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v5)
  {
    int v13 = a3;
    uint64_t v14 = v18;
    uint64_t v15 = v19;
    LOBYTE(v20)  = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v20)  = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    int v20 = v13;
    uint64_t v21 = v14;
    uint64_t v22 = v15;
    char v23 = 3;
    sub_100103250();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

Swift::Int AWDLActionFrame.ServiceParameter.hashValue.getter(unint64_t a1, Swift::UInt32 a2, uint64_t a3, unint64_t a4)
{
  Swift::UInt8 v7 = a1;
  unint64_t v8 = a1 >> 16;
  unint64_t v9 = HIDWORD(a1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(a2);
  sub_100013D44(a3, a4);
  Data.hash(into:)();
  sub_10000C970(a3, a4);
  return Hasher._finalize()();
}

unint64_t sub_1000E906C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = AWDLActionFrame.ServiceParameter.init(from:)(a1);
  if (!v2)
  {
    *(unsigned char *)a2  = result;
    *(_WORD *)(a2 + 2)  = WORD1(result);
    *(_WORD *)(a2 + 4)  = WORD2(result);
    *(_DWORD *)(a2 + 8)  = v5;
    *(void *)(a2 + 16)  = v6;
    *(void *)(a2 + 24)  = v7;
  }
  return result;
}

unint64_t AWDLActionFrame.ServiceParameter.init(from:)(void *a1)
{
  return sub_1001034B4(a1) & 0xFFFFFFFF00FFLL;
}

uint64_t sub_1000E90E4(void *a1)
{
  return AWDLActionFrame.ServiceParameter.encode(to:)(a1, *(unsigned char *)v1, *(_DWORD *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

Swift::Int sub_1000E9118()
{
  Swift::UInt32 v1 = *(_DWORD *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  unint64_t v3 = *(void *)(v0 + 24);
  Swift::UInt8 v4 = *(unsigned char *)v0;
  Swift::UInt16 v5 = *(_WORD *)(v0 + 2);
  Swift::UInt16 v6 = *(_WORD *)(v0 + 4);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v1);
  sub_100013D44(v2, v3);
  Data.hash(into:)();
  sub_10000C970(v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_1000E91D4()
{
  Swift::UInt32 v1 = *(_DWORD *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  unint64_t v3 = *(void *)(v0 + 24);
  Swift::UInt16 v4 = *(_WORD *)(v0 + 2);
  Swift::UInt16 v5 = *(_WORD *)(v0 + 4);
  Hasher._combine(_:)(*(unsigned char *)v0);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v1);
  sub_100013D44(v2, v3);
  Data.hash(into:)();

  return sub_10000C970(v2, v3);
}

Swift::Int sub_1000E9274()
{
  Swift::UInt32 v1 = *(_DWORD *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  unint64_t v3 = *(void *)(v0 + 24);
  Swift::UInt8 v4 = *(unsigned char *)v0;
  Swift::UInt16 v5 = *(_WORD *)(v0 + 2);
  Swift::UInt16 v6 = *(_WORD *)(v0 + 4);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v1);
  sub_100013D44(v2, v3);
  Data.hash(into:)();
  sub_10000C970(v2, v3);
  return Hasher._finalize()();
}

BOOL sub_1000E932C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  BOOL v3 = *a1 == *a2
    && *((unsigned __int16 *)a1 + 1) == *((unsigned __int16 *)a2 + 1)
    && *((unsigned __int16 *)a1 + 2) == *((unsigned __int16 *)a2 + 2);
  return v3
      && *((_DWORD *)a1 + 2) == *((_DWORD *)a2 + 2)
      && (_s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*((void *)a1 + 2), *((void *)a1 + 3), *((void *)a2 + 2), *((void *)a2 + 3)) & 1) != 0;
}

uint64_t sub_1000E93A0()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000E9400()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1000E9450()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000E94B0()
{
  return RawRepresentable<>.encode(to:)();
}

BOOL sub_1000E9504(char *a1, char *a2)
{
  return dword_1003BD778[*a1] == dword_1003BD778[*a2];
}

uint64_t sub_1000E9528@<X0>(int *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = _s7CoreP2P15AWDLActionFrameV13DataPathStateV30UnicastMasterIndicationOptionsO8rawValueAGSgs6UInt32V_tcfC_0(*a1);
  *a2  = result;
  return result;
}

void sub_1000E9554(_DWORD *a1@<X8>)
{
  *a1  = dword_1003BD778[*v1];
}

Swift::Int sub_1000E956C()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(dword_1003BD778[v1]);
  return Hasher._finalize()();
}

void sub_1000E95BC()
{
  Hasher._combine(_:)(dword_1003BD778[*v0]);
}

Swift::Int sub_1000E95F4()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(dword_1003BD778[v1]);
  return Hasher._finalize()();
}

uint64_t sub_1000E9640()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000E96A0()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t AWDLActionFrame.DataPathState.countryCode.getter()
{
  return *v0 | (*((unsigned __int8 *)v0 + 2) << 16);
}

uint64_t AWDLActionFrame.DataPathState.countryCode.setter(uint64_t result)
{
  *(_WORD *)uint64_t v1 = result;
  *(unsigned char *)(v1 + 2)  = BYTE2(result) & 1;
  return result;
}

unint64_t AWDLActionFrame.DataPathState.socialChannelMap.getter()
{
  return *(unsigned int *)(v0 + 4) | ((unint64_t)*(unsigned __int16 *)(v0 + 8) << 32);
}

uint64_t AWDLActionFrame.DataPathState.socialChannelMap.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 4)  = result;
  *(_WORD *)(v1 + 8)  = WORD2(result);
  return result;
}

unint64_t AWDLActionFrame.DataPathState.infraBSSID.getter()
{
  return *(unsigned int *)(v0 + 10) | ((unint64_t)*(unsigned __int16 *)(v0 + 14) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 16) << 48);
}

uint64_t AWDLActionFrame.DataPathState.infraBSSID.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 10)  = result;
  *(_WORD *)(v1 + 14)  = WORD2(result);
  *(unsigned char *)(v1 + 16)  = BYTE6(result) & 1;
  return result;
}

unint64_t AWDLActionFrame.DataPathState.infraChannel.getter()
{
  return *(unsigned int *)(v0 + 20) | ((unint64_t)*(unsigned __int16 *)(v0 + 24) << 32);
}

uint64_t AWDLActionFrame.DataPathState.infraChannel.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 20)  = result;
  *(_WORD *)(v1 + 24)  = WORD2(result);
  return result;
}

unint64_t AWDLActionFrame.DataPathState.infraAddress.getter()
{
  return *(unsigned int *)(v0 + 26) | ((unint64_t)*(unsigned __int16 *)(v0 + 30) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 32) << 48);
}

uint64_t AWDLActionFrame.DataPathState.infraAddress.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 26)  = result;
  *(_WORD *)(v1 + 30)  = WORD2(result);
  *(unsigned char *)(v1 + 32)  = BYTE6(result) & 1;
  return result;
}

uint64_t (*AWDLActionFrame.DataPathState.infraAddress.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLActionFrame.DataPathState.infraSSID.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AWDLActionFrame.DataPathState.infraSSID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 40)  = a1;
  *(void *)(v2 + 48)  = a2;
  return result;
}

uint64_t (*IEEE80211InformationElement.RSNCapability.groupManagementCipherSuite.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

unint64_t AWDLActionFrame.DataPathState.awdlAddress.getter()
{
  return *(unsigned int *)(v0 + 56) | ((unint64_t)*(unsigned __int16 *)(v0 + 60) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 62) << 48);
}

uint64_t AWDLActionFrame.DataPathState.awdlAddress.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 56)  = result;
  *(_WORD *)(v1 + 60)  = WORD2(result);
  *(unsigned char *)(v1 + 62)  = BYTE6(result) & 1;
  return result;
}

uint64_t (*InfraStatistics.viOutputBytes.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLActionFrame.DataPathState.isUnicast.getter()
{
  return *(unsigned __int8 *)(v0 + 63);
}

uint64_t AWDLActionFrame.DataPathState.isUnicast.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 63)  = result;
  return result;
}

uint64_t (*AWDLActionFrame.DataPathState.isUnicast.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLActionFrame.DataPathState.unicastOptions.getter()
{
  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t AWDLActionFrame.DataPathState.unicastOptions.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 64)  = result;
  return result;
}

uint64_t (*InfraStatistics.ctlOutputPackets.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLActionFrame.DataPathState.unicastPeerCachingIndication.getter()
{
  return *(unsigned __int8 *)(v0 + 65);
}

uint64_t AWDLActionFrame.DataPathState.unicastPeerCachingIndication.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 65)  = result;
  return result;
}

uint64_t (*AWDLActionFrame.DataPathState.unicastPeerCachingIndication.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLActionFrame.DataPathState.portUniqueLogID.getter()
{
  return *(unsigned __int16 *)(v0 + 66) | (*(unsigned __int8 *)(v0 + 68) << 16);
}

uint64_t AWDLActionFrame.DataPathState.portUniqueLogID.setter(uint64_t result)
{
  *(_WORD *)(v1 + 66)  = result;
  *(unsigned char *)(v1 + 68)  = BYTE2(result) & 1;
  return result;
}

uint64_t (*AWDLActionFrame.DataPathState.portUniqueLogID.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

unint64_t AWDLActionFrame.DataPathState.rootLoopFreeCounter.getter()
{
  return *(unsigned int *)(v0 + 72) | ((unint64_t)*(unsigned __int8 *)(v0 + 76) << 32);
}

uint64_t AWDLActionFrame.DataPathState.rootLoopFreeCounter.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 72)  = result;
  *(unsigned char *)(v1 + 76)  = BYTE4(result) & 1;
  return result;
}

uint64_t (*InfraStatistics.inputPackets.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLActionFrame.DataPathState.supportsDualBand.getter()
{
  return *(unsigned __int8 *)(v0 + 77);
}

uint64_t AWDLActionFrame.DataPathState.supportsDualBand.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 77)  = result;
  return result;
}

uint64_t (*AWDLActionFrame.DataPathState.supportsDualBand.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLActionFrame.DataPathState.isAirPlaySink.getter()
{
  return *(unsigned __int8 *)(v0 + 78);
}

uint64_t AWDLActionFrame.DataPathState.isAirPlaySink.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 78)  = result;
  return result;
}

uint64_t (*AWDLActionFrame.DataPathState.isAirPlaySink.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLActionFrame.DataPathState.followChannelSequence.getter()
{
  return *(unsigned __int8 *)(v0 + 79);
}

uint64_t AWDLActionFrame.DataPathState.followChannelSequence.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 79)  = result;
  return result;
}

uint64_t (*AWDLActionFrame.DataPathState.followChannelSequence.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLActionFrame.DataPathState.supportsAirPlaySolo.getter()
{
  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t AWDLActionFrame.DataPathState.supportsAirPlaySolo.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 80)  = result;
  return result;
}

uint64_t (*InfraStatistics.inputBytes.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLActionFrame.DataPathState.supportsUnicastMasterIndication.getter()
{
  return *(unsigned __int8 *)(v0 + 81);
}

uint64_t AWDLActionFrame.DataPathState.supportsUnicastMasterIndication.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 81)  = result;
  return result;
}

uint64_t (*AWDLActionFrame.DataPathState.supportsUnicastMasterIndication.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLActionFrame.DataPathState.infraRealTimeActive.getter()
{
  return *(unsigned __int8 *)(v0 + 82);
}

uint64_t AWDLActionFrame.DataPathState.infraRealTimeActive.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 82)  = result;
  return result;
}

uint64_t (*AWDLActionFrame.DataPathState.infraRealTimeActive.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLActionFrame.DataPathState.isRangeable.getter()
{
  return *(unsigned __int8 *)(v0 + 83);
}

uint64_t AWDLActionFrame.DataPathState.isRangeable.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 83)  = result;
  return result;
}

uint64_t (*AWDLActionFrame.DataPathState.isRangeable.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLActionFrame.DataPathState.supportsSimultaneousDualBand.getter()
{
  return *(unsigned __int8 *)(v0 + 84);
}

uint64_t AWDLActionFrame.DataPathState.supportsSimultaneousDualBand.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 84)  = result;
  return result;
}

uint64_t (*AWDLActionFrame.DataPathState.supportsSimultaneousDualBand.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLActionFrame.DataPathState.supportsDFSProxy.getter()
{
  return *(unsigned __int8 *)(v0 + 85);
}

uint64_t AWDLActionFrame.DataPathState.supportsDFSProxy.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 85)  = result;
  return result;
}

uint64_t (*AWDLActionFrame.DataPathState.supportsDFSProxy.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLActionFrame.DataPathState.assistedDiscoveryActive.getter()
{
  return *(unsigned __int8 *)(v0 + 86);
}

uint64_t AWDLActionFrame.DataPathState.assistedDiscoveryActive.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 86)  = result;
  return result;
}

uint64_t (*AWDLActionFrame.DataPathState.assistedDiscoveryActive.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLActionFrame.DataPathState.supportsSocialChannelMap.getter()
{
  return *(unsigned __int8 *)(v0 + 87);
}

uint64_t AWDLActionFrame.DataPathState.supportsSocialChannelMap.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 87)  = result;
  return result;
}

uint64_t (*AWDLActionFrame.DataPathState.supportsSocialChannelMap.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLActionFrame.DataPathState.nanConcurrencyEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + 88);
}

uint64_t AWDLActionFrame.DataPathState.nanConcurrencyEnabled.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 88)  = result;
  return result;
}

uint64_t (*InfraStatistics.linkRate.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLActionFrame.DataPathState.supportsHighEfficiencyRate.getter()
{
  return *(unsigned __int8 *)(v0 + 89);
}

uint64_t AWDLActionFrame.DataPathState.supportsHighEfficiencyRate.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 89)  = result;
  return result;
}

uint64_t (*AWDLActionFrame.DataPathState.supportsHighEfficiencyRate.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLActionFrame.DataPathState.isSidekickHub.getter()
{
  return *(unsigned __int8 *)(v0 + 90);
}

uint64_t AWDLActionFrame.DataPathState.isSidekickHub.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 90)  = result;
  return result;
}

uint64_t (*AWDLActionFrame.DataPathState.isSidekickHub.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLActionFrame.DataPathState.supports6GHz.getter()
{
  return *(unsigned __int8 *)(v0 + 91);
}

uint64_t AWDLActionFrame.DataPathState.supports6GHz.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 91)  = result;
  return result;
}

uint64_t (*AWDLActionFrame.DataPathState.supports6GHz.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLActionFrame.DataPathState.supportsUltraLowLatencyInfra.getter()
{
  return *(unsigned __int8 *)(v0 + 92);
}

uint64_t AWDLActionFrame.DataPathState.supportsUltraLowLatencyInfra.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 92)  = result;
  return result;
}

uint64_t (*AWDLActionFrame.DataPathState.supportsUltraLowLatencyInfra.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLActionFrame.DataPathState.proModeActive.getter()
{
  return *(unsigned __int8 *)(v0 + 93);
}

uint64_t AWDLActionFrame.DataPathState.proModeActive.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 93)  = result;
  return result;
}

uint64_t (*AWDLActionFrame.DataPathState.proModeActive.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLActionFrame.DataPathState.hasChannelSequence.getter()
{
  return *(unsigned __int8 *)(v0 + 94);
}

uint64_t AWDLActionFrame.DataPathState.hasChannelSequence.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 94)  = result;
  return result;
}

uint64_t (*AWDLActionFrame.DataPathState.hasChannelSequence.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLActionFrame.DataPathState.awdlOnSince.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AWDLActionFrame.DataPathState(0) + 136);

  return sub_1001036A4(v3, a1);
}

uint64_t AWDLActionFrame.DataPathState.awdlOnSince.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AWDLActionFrame.DataPathState(0) + 136);

  return sub_10010370C(a1, v3);
}

uint64_t (*AWDLActionFrame.DataPathState.awdlOnSince.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

unint64_t AWDLActionFrame.DataPathState.availabilityWindowSequenceNumber.getter()
{
  uint64_t v1 = (unsigned int *)(v0 + *(int *)(type metadata accessor for AWDLActionFrame.DataPathState(0) + 140));
  return *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32);
}

uint64_t AWDLActionFrame.DataPathState.availabilityWindowSequenceNumber.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for AWDLActionFrame.DataPathState(0);
  uint64_t v4 = v1 + *(int *)(result + 140);
  *(_DWORD *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4)  = BYTE4(a1) & 1;
  return result;
}

uint64_t (*AWDLActionFrame.DataPathState.availabilityWindowSequenceNumber.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

unint64_t AWDLActionFrame.DataPathState.actionFrameUpdateCounter.getter()
{
  uint64_t v1 = (unsigned int *)(v0 + *(int *)(type metadata accessor for AWDLActionFrame.DataPathState(0) + 144));
  return *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32);
}

uint64_t AWDLActionFrame.DataPathState.actionFrameUpdateCounter.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for AWDLActionFrame.DataPathState(0);
  uint64_t v4 = v1 + *(int *)(result + 144);
  *(_DWORD *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4)  = BYTE4(a1) & 1;
  return result;
}

uint64_t (*AWDLActionFrame.DataPathState.actionFrameUpdateCounter.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

void AWDLActionFrame.DataPathState.hash(into:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  char v49 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_10047F2A8);
  __chkstk_darwin();
  Swift::UInt16 v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v5)  = *((unsigned char *)v1 + 2);
  uint64_t v50 = v3;
  if (v5)
  {
    LOBYTE(v7)  = 0;
  }
  else
  {
    unsigned int v8 = *v1;
    unsigned int v7 = v8 >> 8;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v8);
  }
  Hasher._combine(_:)(v7);
  unint64_t v9 = *((unsigned int *)v1 + 1) | ((unint64_t)v1[4] << 32);
  if ((v9 & 0xFF00000000) == 0x300000000)
  {
    Swift::UInt8 v10 = 0;
LABEL_6:
    Hasher._combine(_:)(v10);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v9);
    Hasher._combine(_:)(0x801004u >> ((v9 >> 29) & 0xF8));
    switch(v9 >> 40)
    {
      case 2uLL:
        Swift::UInt v11 = 0;
        break;
      case 3uLL:
        Swift::UInt v11 = 1;
        break;
      case 4uLL:
        Swift::UInt v11 = 3;
        break;
      case 5uLL:
        Swift::UInt v11 = 4;
        break;
      case 6uLL:
        Swift::UInt v11 = 5;
        break;
      default:
        Hasher._combine(_:)(2uLL);
        Swift::UInt8 v10 = BYTE5(v9) & 1;
        goto LABEL_6;
    }
    Hasher._combine(_:)(v11);
  }
  char v12 = *((unsigned char *)v1 + 16);
  uint64_t v51 = v2;
  if (v12)
  {
    LOBYTE(v13)  = 0;
  }
  else
  {
    unsigned int v14 = v1[7];
    unsigned int v15 = *(_DWORD *)(v1 + 5);
    unint64_t v16 = v15 | ((unint64_t)v1[7] << 32);
    unint64_t v17 = v16 >> 8;
    unint64_t v18 = v16 >> 16;
    unint64_t v19 = v16 >> 24;
    unsigned int v13 = v14 >> 8;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15);
    Hasher._combine(_:)(v17);
    Hasher._combine(_:)(v18);
    Hasher._combine(_:)(v19);
    Hasher._combine(_:)(v14);
  }
  Hasher._combine(_:)(v13);
  unint64_t v20 = *((unsigned int *)v1 + 5) | ((unint64_t)v1[12] << 32);
  if ((v20 & 0xFF00000000) == 0x300000000)
  {
    Swift::UInt8 v21 = 0;
LABEL_20:
    Hasher._combine(_:)(v21);
    if (v1[16])
    {
LABEL_21:
      LOBYTE(v22)  = 0;
      goto LABEL_31;
    }
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v20);
    Hasher._combine(_:)(0x801004u >> ((v20 >> 29) & 0xF8));
    switch(v20 >> 40)
    {
      case 2uLL:
        Swift::UInt v23 = 0;
        break;
      case 3uLL:
        Swift::UInt v23 = 1;
        break;
      case 4uLL:
        Swift::UInt v23 = 3;
        break;
      case 5uLL:
        Swift::UInt v23 = 4;
        break;
      case 6uLL:
        Swift::UInt v23 = 5;
        break;
      default:
        Hasher._combine(_:)(2uLL);
        Swift::UInt8 v21 = BYTE5(v20) & 1;
        goto LABEL_20;
    }
    Hasher._combine(_:)(v23);
    if (v1[16]) {
      goto LABEL_21;
    }
  }
  unsigned int v24 = v1[15];
  unsigned int v25 = *(_DWORD *)(v1 + 13);
  unint64_t v26 = v25 | ((unint64_t)v1[15] << 32);
  unint64_t v27 = v26 >> 8;
  unint64_t v28 = v26 >> 16;
  unint64_t v29 = v26 >> 24;
  unsigned int v22 = v24 >> 8;
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v25);
  Hasher._combine(_:)(v27);
  Hasher._combine(_:)(v28);
  Hasher._combine(_:)(v29);
  Hasher._combine(_:)(v24);
LABEL_31:
  Hasher._combine(_:)(v22);
  if (*((void *)v1 + 6))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v1[31])
    {
LABEL_33:
      LOBYTE(v30)  = 0;
      goto LABEL_36;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v1[31]) {
      goto LABEL_33;
    }
  }
  unsigned int v31 = v1[30];
  unsigned int v32 = *((_DWORD *)v1 + 14);
  unint64_t v33 = v32 | ((unint64_t)v1[30] << 32);
  unint64_t v34 = v33 >> 8;
  unint64_t v35 = v33 >> 16;
  unint64_t v36 = v33 >> 24;
  unsigned int v30 = v31 >> 8;
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v32);
  Hasher._combine(_:)(v34);
  Hasher._combine(_:)(v35);
  Hasher._combine(_:)(v36);
  Hasher._combine(_:)(v31);
LABEL_36:
  uint64_t v38 = v50;
  uint64_t v37 = v51;
  Hasher._combine(_:)(v30);
  Hasher._combine(_:)(*((unsigned char *)v1 + 63));
  uint64_t v39 = *((char *)v1 + 64);
  if (v39 == 43)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(dword_1003BD778[v39]);
  }
  Hasher._combine(_:)(*((unsigned char *)v1 + 65));
  if (*((unsigned char *)v1 + 68) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt16 v40 = v1[33];
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v40);
  }
  if (*((unsigned char *)v1 + 76) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt32 v41 = *((_DWORD *)v1 + 18);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v41);
  }
  Hasher._combine(_:)(*((unsigned char *)v1 + 77));
  Hasher._combine(_:)(*((unsigned char *)v1 + 78));
  Hasher._combine(_:)(*((unsigned char *)v1 + 79));
  Hasher._combine(_:)(*((unsigned char *)v1 + 80));
  Hasher._combine(_:)(*((unsigned char *)v1 + 81));
  Hasher._combine(_:)(*((unsigned char *)v1 + 82));
  Hasher._combine(_:)(*((unsigned char *)v1 + 83));
  Hasher._combine(_:)(*((unsigned char *)v1 + 84));
  Hasher._combine(_:)(*((unsigned char *)v1 + 85));
  Hasher._combine(_:)(*((unsigned char *)v1 + 86));
  Hasher._combine(_:)(*((unsigned char *)v1 + 87));
  Hasher._combine(_:)(*((unsigned char *)v1 + 88));
  Hasher._combine(_:)(*((unsigned char *)v1 + 89));
  Hasher._combine(_:)(*((unsigned char *)v1 + 90));
  Hasher._combine(_:)(*((unsigned char *)v1 + 91));
  Hasher._combine(_:)(*((unsigned char *)v1 + 92));
  Hasher._combine(_:)(*((unsigned char *)v1 + 93));
  Hasher._combine(_:)(*((unsigned char *)v1 + 94));
  uint64_t v42 = (int *)type metadata accessor for AWDLActionFrame.DataPathState(0);
  sub_1001036A4((uint64_t)v1 + v42[34], (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v6, 1, v37) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v43 = v49;
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v49, v6, v37);
    Hasher._combine(_:)(1u);
    DispatchTimeInterval.hash(into:)();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v43, v37);
  }
  uint64_t v44 = (char *)v1 + v42[35];
  if (v44[4] == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt32 v45 = *(_DWORD *)v44;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v45);
  }
  uint64_t v46 = (char *)v1 + v42[36];
  if (v46[4] == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt32 v47 = *(_DWORD *)v46;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v47);
  }
}

Swift::Int AWDLActionFrame.DataPathState.hashValue.getter()
{
  return sub_1000FA1C0((void (*)(unsigned char *))AWDLActionFrame.DataPathState.hash(into:));
}

uint64_t sub_1000EA6F0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AWDLActionFrame.DataPathState.init(from:)(a1, a2);
}

uint64_t AWDLActionFrame.DataPathState.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v55 = a2;
  type metadata accessor for String.Encoding();
  __chkstk_darwin();
  uint64_t v54 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = (int *)(type metadata accessor for AWDLActionFrame.DataPathState(0) - 8);
  __chkstk_darwin();
  Swift::UInt16 v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_WORD *)Swift::UInt16 v6 = 0;
  _OWORD v6[2] = 1;
  *((_WORD *)v6 + 4)  = 3;
  *((_DWORD *)v6 + 1)  = 0;
  *((_WORD *)v6 + 7)  = 0;
  *(_DWORD *)(v6 + 10)  = 0;
  v6[16]  = 1;
  *((_WORD *)v6 + 12)  = 3;
  *((_DWORD *)v6 + 5)  = 0;
  *((_WORD *)v6 + 15)  = 0;
  *(_DWORD *)(v6 + 26)  = 0;
  v6[32]  = 1;
  *((void *)v6 + 5)  = 0;
  *((void *)v6 + 6)  = 0;
  *(void *)(v6 + 54)  = 0;
  v6[62]  = 1;
  v6[64]  = 43;
  *((_WORD *)v6 + 33)  = 0;
  v6[68]  = 1;
  *((_DWORD *)v6 + 18)  = 0;
  uint64_t v7 = (uint64_t)&v6[v4[36]];
  v6[76]  = 1;
  uint64_t v8 = type metadata accessor for DispatchTimeInterval();
  uint64_t v53 = *(void *)(v8 - 8);
  uint64_t v10 = v53 + 56;
  unint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 56);
  char v56 = (void *)v7;
  v9(v7, 1, 1, v8);
  Swift::UInt v11 = &v6[v4[37]];
  *(_DWORD *)Swift::UInt v11 = 0;
  _OWORD v11[4] = 1;
  uint64_t v12 = v4[38];
  char v59 = v6;
  unsigned int v13 = &v6[v12];
  *(_DWORD *)unsigned int v13 = 0;
  unsigned char v13[4] = 1;
  uint64_t v14 = a1[3];
  char v57 = a1;
  sub_1000369C4(a1, v14);
  uint64_t v15 = v58;
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v15)
  {
    sub_100010754((uint64_t)v57);
    swift_bridgeObjectRelease();
    return sub_1000380B4((uint64_t)v56, &qword_10047F2A8);
  }
  uint64_t v51 = v11;
  char v52 = v9;
  uint64_t v58 = v10;
  uint64_t v16 = v8;
  uint64_t v50 = v13;
  uint64_t v17 = v55;
  sub_100039448((uint64_t)v60, v61);
  sub_100103774();
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  unsigned int v20 = (__int16)v63;
  uint64_t v21 = (uint64_t)v59;
  v59[77]  = (v63 & 0x20) != 0;
  *(unsigned char *)(v21 + 78)  = (v20 & 0x40) != 0;
  *(unsigned char *)(v21 + 94)  = (v20 & 0x10) != 0;
  *(unsigned char *)(v21 + 79)  = (v20 & 0x80) != 0;
  v18.i64[0]  = *(void *)&vshl_u16((uint16x4_t)vdup_n_s16(v20), (uint16x4_t)0xFFF2FFF3FFF5FFF6) & 0xFFC1FFC1FFC1FFC1;
  *(_DWORD *)(v21 + 80)  = vmovn_s16(v18).u32[0];
  if ((v20 & 0x100) != 0)
  {
    sub_100039448((uint64_t)v60, v61);
    unsigned __int8 v25 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    uint64_t v49 = v62;
    sub_100039448((uint64_t)v60, v61);
    *(_WORD *)uint64_t v21 = v25 | (unsigned __int16)((unsigned __int16)dispatch thunk of UnkeyedDecodingContainer.decode(_:)() << 8);
    *(unsigned char *)(v21 + 2)  = 0;
    sub_100039448((uint64_t)v60, v61);
    dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
  }
  if ((v20 & 0x200) != 0)
  {
    sub_100039448((uint64_t)v60, v61);
    unsigned __int16 v22 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    unint64_t v23 = sub_1001C7008(v22);
    *(_DWORD *)(v21 + 4)  = v23;
    *(_WORD *)(v21 + 8)  = WORD2(v23);
  }
  if ((v20 & 1) == 0)
  {
    if ((v20 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  sub_100039448((uint64_t)v60, v61);
  sub_10003FE54();
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  unint64_t v26 = ((unint64_t)v65 << 40) | ((unint64_t)v64 << 32);
  *(_DWORD *)(v21 + 10)  = v63;
  *(_WORD *)(v21 + 14)  = WORD2(v26);
  *(unsigned char *)(v21 + 16)  = 0;
  sub_100039448((uint64_t)v60, v61);
  unsigned __int16 v27 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
  unint64_t v28 = sub_1001C7008(v27);
  *(_DWORD *)(v21 + 20)  = v28;
  *(_WORD *)(v21 + 24)  = WORD2(v28);
  if ((v20 & 2) != 0)
  {
LABEL_10:
    sub_100039448((uint64_t)v60, v61);
    sub_10003FE54();
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    unint64_t v24 = ((unint64_t)v65 << 40) | ((unint64_t)v64 << 32);
    *(_DWORD *)(v21 + 26)  = v63;
    *(_WORD *)(v21 + 30)  = WORD2(v24);
    *(unsigned char *)(v21 + 32)  = 0;
  }
LABEL_12:
  if ((v20 & 4) != 0)
  {
    sub_100039448((uint64_t)v60, v61);
    sub_10003FE54();
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    unint64_t v29 = ((unint64_t)v65 << 40) | ((unint64_t)v64 << 32);
    *(_DWORD *)(v21 + 56)  = v63;
    *(_WORD *)(v21 + 60)  = WORD2(v29);
    *(unsigned char *)(v21 + 62)  = 0;
  }
  if ((v20 & 8) == 0)
  {
    if ((v20 & 0x1000) == 0) {
      goto LABEL_16;
    }
LABEL_20:
    sub_100039448((uint64_t)v60, v61);
    dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    sub_100039448((uint64_t)v60, v61);
    int v39 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    *(unsigned char *)(v21 + 65)  = v39 & 1;
    *(unsigned char *)(v21 + 64)  = _s7CoreP2P15AWDLActionFrameV13DataPathStateV30UnicastMasterIndicationOptionsO8rawValueAGSgs6UInt32V_tcfC_0(v39 & 0xFFFFFFFE);
    *(unsigned char *)(v21 + 63)  = 1;
    if ((v20 & 0x80000000) == 0) {
      goto LABEL_17;
    }
LABEL_21:
    sub_100039448((uint64_t)v60, v61);
    sub_100103890();
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    unsigned int v42 = (unsigned __int16)v63;
    if (v63)
    {
      sub_100039448((uint64_t)v60, v61);
      *(_WORD *)(v21 + 66)  = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
      *(unsigned char *)(v21 + 68)  = 0;
    }
    if ((v42 & 4) != 0)
    {
      sub_100039448((uint64_t)v60, v61);
      *(_DWORD *)(v21 + 72)  = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
      *(unsigned char *)(v21 + 76)  = 0;
    }
    if ((v42 & 0x20) != 0)
    {
      sub_100039448((uint64_t)v60, v61);
      unsigned int v43 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
      uint64_t v44 = v56;
      sub_1000380B4((uint64_t)v56, &qword_10047F2A8);
      *uint64_t v44 = v43;
      (*(void (**)(void *, void, uint64_t))(v53 + 104))(v44, enum case for DispatchTimeInterval.milliseconds(_:), v16);
      v52((uint64_t)v44, 0, 1, v16);
      sub_100039448((uint64_t)v60, v61);
      int v45 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
      uint64_t v46 = v51;
      *(_DWORD *)uint64_t v51 = v45;
      v46[4]  = 0;
      sub_100039448((uint64_t)v60, v61);
      int v47 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
      uint64_t v48 = v50;
      *(_DWORD *)uint64_t v50 = v47;
      v48[4]  = 0;
      uint64_t v21 = (uint64_t)v59;
    }
    *(int16x4_t *)v40.i8  = vdup_n_s16(v42);
    *(uint16x4_t *)v41.i8  = vshl_u16(*(uint16x4_t *)v40.i8, (uint16x4_t)0xFFF4FFF5FFF7FFF8);
    v40.i64[0]  = *(void *)&vshl_u16((uint16x4_t)(v40.i64[0] & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFDFFFFFFFAFFFCLL) & 0xFF01FF01FF01FF01;
    *(_DWORD *)(v21 + 84)  = vmovn_s16(v40).u32[0];
    *(unsigned char *)(v21 + 88)  = (v42 & 0x80) != 0;
    v41.i64[0] &= 0xFF01FF01FF01FF01;
    *(_DWORD *)(v21 + 89)  = vmovn_s16(v41).u32[0];
    *(unsigned char *)(v21 + 93)  = (v42 & 0x2000) != 0;
    goto LABEL_18;
  }
  sub_100039448((uint64_t)v60, v61);
  uint64_t v31 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
  uint64_t v32 = v61;
  sub_100039448((uint64_t)v60, v61);
  uint64_t v33 = UnkeyedDecodingContainer.decodeData(with:)(v31, v32);
  unint64_t v35 = v34;
  static String.Encoding.utf8.getter();
  uint64_t v36 = String.init(data:encoding:)();
  uint64_t v38 = v37;
  sub_10000C970(v33, v35);
  *(void *)(v21 + 40)  = v36;
  *(void *)(v21 + 48)  = v38;
  if ((v20 & 0x1000) != 0) {
    goto LABEL_20;
  }
LABEL_16:
  *(unsigned char *)(v21 + 63)  = 0;
  *(unsigned char *)(v21 + 65)  = 0;
  if ((v20 & 0x80000000) != 0) {
    goto LABEL_21;
  }
LABEL_17:
  *(_WORD *)(v21 + 92)  = 0;
  *(void *)(v21 + 84)  = 0;
LABEL_18:
  uint64_t v30 = (uint64_t)v57;
  sub_100010754((uint64_t)v60);
  sub_1001037C8(v21, v17, type metadata accessor for AWDLActionFrame.DataPathState);
  sub_100010754(v30);
  return sub_100103830(v21, type metadata accessor for AWDLActionFrame.DataPathState);
}

uint64_t sub_1000EAFFC(void *a1)
{
  return AWDLActionFrame.DataPathState.encode(to:)(a1);
}

uint64_t AWDLActionFrame.DataPathState.encode(to:)(void *a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  sub_100010BCC(&qword_10047F2A8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v109 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = type metadata accessor for DispatchTimeInterval();
  uint64_t v8 = *(void *)(v116 - 8);
  __chkstk_darwin();
  uint64_t v114 = (char *)&v109 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v10 = *((unsigned char *)v4 + 78);
  int v11 = *((unsigned __int8 *)v4 + 94);
  int v12 = *((unsigned __int8 *)v4 + 79);
  int v13 = *((unsigned __int8 *)v4 + 80);
  char v14 = *((unsigned char *)v4 + 81);
  BOOL v15 = *((unsigned char *)v4 + 77) == 1;
  unint64_t v115 = v7;
  if (!v15)
  {
    if (v10)
    {
      if (v11)
      {
        if (v12)
        {
          if (v13)
          {
            if (v14)
            {
              int v16 = 3280;
              goto LABEL_97;
            }
            if (*((unsigned char *)v4 + 82))
            {
              int v16 = 1232;
              goto LABEL_98;
            }
            int v16 = 1232;
            if ((*((unsigned char *)v4 + 83) & 1) == 0) {
              goto LABEL_101;
            }
LABEL_100:
            v16 |= 0x4000u;
            goto LABEL_101;
          }
          if ((v14 & 1) == 0)
          {
            if (*((unsigned char *)v4 + 82))
            {
              int v16 = 208;
              goto LABEL_98;
            }
            int v16 = 208;
            if ((*((unsigned char *)v4 + 83) & 1) == 0) {
              goto LABEL_101;
            }
            goto LABEL_100;
          }
          int v16 = 2256;
        }
        else if (v13)
        {
          if ((v14 & 1) == 0)
          {
            if (*((unsigned char *)v4 + 82))
            {
              int v16 = 1104;
              goto LABEL_98;
            }
            int v16 = 1104;
            if ((*((unsigned char *)v4 + 83) & 1) == 0) {
              goto LABEL_101;
            }
            goto LABEL_100;
          }
          int v16 = 3152;
        }
        else
        {
          if ((v14 & 1) == 0)
          {
            if (*((unsigned char *)v4 + 82))
            {
              int v16 = 80;
              goto LABEL_98;
            }
            int v16 = 80;
            if ((*((unsigned char *)v4 + 83) & 1) == 0) {
              goto LABEL_101;
            }
            goto LABEL_100;
          }
          int v16 = 2128;
        }
      }
      else if (v12)
      {
        if (v13)
        {
          if ((v14 & 1) == 0)
          {
            if (*((unsigned char *)v4 + 82))
            {
              int v16 = 1216;
              goto LABEL_98;
            }
            int v16 = 1216;
            if ((*((unsigned char *)v4 + 83) & 1) == 0) {
              goto LABEL_101;
            }
            goto LABEL_100;
          }
          int v16 = 3264;
        }
        else
        {
          if ((v14 & 1) == 0)
          {
            if (*((unsigned char *)v4 + 82))
            {
              int v16 = 192;
              goto LABEL_98;
            }
            int v16 = 192;
            if ((*((unsigned char *)v4 + 83) & 1) == 0) {
              goto LABEL_101;
            }
            goto LABEL_100;
          }
          int v16 = 2240;
        }
      }
      else if (v13)
      {
        if ((v14 & 1) == 0)
        {
          if (*((unsigned char *)v4 + 82))
          {
            int v16 = 1088;
            goto LABEL_98;
          }
          int v16 = 1088;
          if ((*((unsigned char *)v4 + 83) & 1) == 0) {
            goto LABEL_101;
          }
          goto LABEL_100;
        }
        int v16 = 3136;
      }
      else
      {
        if ((v14 & 1) == 0)
        {
          if (*((unsigned char *)v4 + 82))
          {
            int v16 = 64;
            goto LABEL_98;
          }
          int v16 = 64;
          if ((*((unsigned char *)v4 + 83) & 1) == 0) {
            goto LABEL_101;
          }
          goto LABEL_100;
        }
        int v16 = 2112;
      }
    }
    else if (v11)
    {
      if (v12)
      {
        if (v13)
        {
          if ((v14 & 1) == 0)
          {
            if (*((unsigned char *)v4 + 82))
            {
              int v16 = 1168;
              goto LABEL_98;
            }
            int v16 = 1168;
            if ((*((unsigned char *)v4 + 83) & 1) == 0) {
              goto LABEL_101;
            }
            goto LABEL_100;
          }
          int v16 = 3216;
        }
        else
        {
          if ((v14 & 1) == 0)
          {
            if (*((unsigned char *)v4 + 82))
            {
              int v16 = 144;
              goto LABEL_98;
            }
            int v16 = 144;
            if ((*((unsigned char *)v4 + 83) & 1) == 0) {
              goto LABEL_101;
            }
            goto LABEL_100;
          }
          int v16 = 2192;
        }
      }
      else if (v13)
      {
        if ((v14 & 1) == 0)
        {
          if (*((unsigned char *)v4 + 82))
          {
            int v16 = 1040;
            goto LABEL_98;
          }
          int v16 = 1040;
          if ((*((unsigned char *)v4 + 83) & 1) == 0) {
            goto LABEL_101;
          }
          goto LABEL_100;
        }
        int v16 = 3088;
      }
      else
      {
        if ((v14 & 1) == 0)
        {
          if (*((unsigned char *)v4 + 82))
          {
            int v16 = 16;
            goto LABEL_98;
          }
          int v16 = 16;
          if ((*((unsigned char *)v4 + 83) & 1) == 0) {
            goto LABEL_101;
          }
          goto LABEL_100;
        }
        int v16 = 2064;
      }
    }
    else if (v12)
    {
      if (v13)
      {
        if ((v14 & 1) == 0)
        {
          if (*((unsigned char *)v4 + 82))
          {
            int v16 = 1152;
            goto LABEL_98;
          }
          int v16 = 1152;
          if ((*((unsigned char *)v4 + 83) & 1) == 0) {
            goto LABEL_101;
          }
          goto LABEL_100;
        }
        int v16 = 3200;
      }
      else
      {
        if ((v14 & 1) == 0)
        {
          if (*((unsigned char *)v4 + 82))
          {
            int v16 = 128;
            goto LABEL_98;
          }
          int v16 = 128;
          if ((*((unsigned char *)v4 + 83) & 1) == 0) {
            goto LABEL_101;
          }
          goto LABEL_100;
        }
        int v16 = 2176;
      }
    }
    else if (v13)
    {
      if ((v14 & 1) == 0)
      {
        if (*((unsigned char *)v4 + 82))
        {
          int v16 = 1024;
          goto LABEL_98;
        }
        int v16 = 1024;
        if ((*((unsigned char *)v4 + 83) & 1) == 0) {
          goto LABEL_101;
        }
        goto LABEL_100;
      }
      int v16 = 3072;
    }
    else
    {
      if ((v14 & 1) == 0)
      {
        if (*((unsigned char *)v4 + 82))
        {
          int v16 = 0;
          goto LABEL_98;
        }
        int v16 = 0;
        if ((*((unsigned char *)v4 + 83) & 1) == 0) {
          goto LABEL_101;
        }
        goto LABEL_100;
      }
      int v16 = 2048;
    }
    goto LABEL_97;
  }
  if ((v10 & 1) == 0)
  {
    if (v11)
    {
      if (v12)
      {
        if (v13)
        {
          if ((v14 & 1) == 0)
          {
            if (*((unsigned char *)v4 + 82))
            {
              int v16 = 1200;
              goto LABEL_98;
            }
            int v16 = 1200;
            if ((*((unsigned char *)v4 + 83) & 1) == 0) {
              goto LABEL_101;
            }
            goto LABEL_100;
          }
          int v16 = 3248;
        }
        else
        {
          if ((v14 & 1) == 0)
          {
            if (*((unsigned char *)v4 + 82))
            {
              int v16 = 176;
              goto LABEL_98;
            }
            int v16 = 176;
            if ((*((unsigned char *)v4 + 83) & 1) == 0) {
              goto LABEL_101;
            }
            goto LABEL_100;
          }
          int v16 = 2224;
        }
      }
      else if (v13)
      {
        if ((v14 & 1) == 0)
        {
          if (*((unsigned char *)v4 + 82))
          {
            int v16 = 1072;
            goto LABEL_98;
          }
          int v16 = 1072;
          if ((*((unsigned char *)v4 + 83) & 1) == 0) {
            goto LABEL_101;
          }
          goto LABEL_100;
        }
        int v16 = 3120;
      }
      else
      {
        if ((v14 & 1) == 0)
        {
          if (*((unsigned char *)v4 + 82))
          {
            int v16 = 48;
            goto LABEL_98;
          }
          int v16 = 48;
          if ((*((unsigned char *)v4 + 83) & 1) == 0) {
            goto LABEL_101;
          }
          goto LABEL_100;
        }
        int v16 = 2096;
      }
    }
    else if (v12)
    {
      if (v13)
      {
        if ((v14 & 1) == 0)
        {
          if (*((unsigned char *)v4 + 82))
          {
            int v16 = 1184;
            goto LABEL_98;
          }
          int v16 = 1184;
          if ((*((unsigned char *)v4 + 83) & 1) == 0) {
            goto LABEL_101;
          }
          goto LABEL_100;
        }
        int v16 = 3232;
      }
      else
      {
        if ((v14 & 1) == 0)
        {
          if (*((unsigned char *)v4 + 82))
          {
            int v16 = 160;
            goto LABEL_98;
          }
          int v16 = 160;
          if ((*((unsigned char *)v4 + 83) & 1) == 0) {
            goto LABEL_101;
          }
          goto LABEL_100;
        }
        int v16 = 2208;
      }
    }
    else if (v13)
    {
      if ((v14 & 1) == 0)
      {
        if (*((unsigned char *)v4 + 82))
        {
          int v16 = 1056;
          goto LABEL_98;
        }
        int v16 = 1056;
        if ((*((unsigned char *)v4 + 83) & 1) == 0) {
          goto LABEL_101;
        }
        goto LABEL_100;
      }
      int v16 = 3104;
    }
    else
    {
      if ((v14 & 1) == 0)
      {
        if (*((unsigned char *)v4 + 82))
        {
          int v16 = 32;
          goto LABEL_98;
        }
        int v16 = 32;
        if ((*((unsigned char *)v4 + 83) & 1) == 0) {
          goto LABEL_101;
        }
        goto LABEL_100;
      }
      int v16 = 2080;
    }
LABEL_97:
    if ((*((unsigned char *)v4 + 82) & 1) == 0) {
      goto LABEL_99;
    }
    goto LABEL_98;
  }
  if (!v11)
  {
    if (v12)
    {
      if (v13)
      {
        if ((v14 & 1) == 0)
        {
          if (*((unsigned char *)v4 + 82))
          {
            int v16 = 1248;
            goto LABEL_98;
          }
          int v16 = 1248;
          if ((*((unsigned char *)v4 + 83) & 1) == 0) {
            goto LABEL_101;
          }
          goto LABEL_100;
        }
        int v16 = 3296;
      }
      else
      {
        if ((v14 & 1) == 0)
        {
          if (*((unsigned char *)v4 + 82))
          {
            int v16 = 224;
            goto LABEL_98;
          }
          int v16 = 224;
          if ((*((unsigned char *)v4 + 83) & 1) == 0) {
            goto LABEL_101;
          }
          goto LABEL_100;
        }
        int v16 = 2272;
      }
    }
    else if (v13)
    {
      if ((v14 & 1) == 0)
      {
        if (*((unsigned char *)v4 + 82))
        {
          int v16 = 1120;
          goto LABEL_98;
        }
        int v16 = 1120;
        if ((*((unsigned char *)v4 + 83) & 1) == 0) {
          goto LABEL_101;
        }
        goto LABEL_100;
      }
      int v16 = 3168;
    }
    else
    {
      if ((v14 & 1) == 0)
      {
        if (*((unsigned char *)v4 + 82))
        {
          int v16 = 96;
          goto LABEL_98;
        }
        int v16 = 96;
        if ((*((unsigned char *)v4 + 83) & 1) == 0) {
          goto LABEL_101;
        }
        goto LABEL_100;
      }
      int v16 = 2144;
    }
    goto LABEL_97;
  }
  if (!v12)
  {
    if (v13)
    {
      if ((v14 & 1) == 0)
      {
        if (*((unsigned char *)v4 + 82))
        {
          int v16 = 1136;
          goto LABEL_98;
        }
        int v16 = 1136;
        if ((*((unsigned char *)v4 + 83) & 1) == 0) {
          goto LABEL_101;
        }
        goto LABEL_100;
      }
      int v16 = 3184;
    }
    else
    {
      if ((v14 & 1) == 0)
      {
        if (*((unsigned char *)v4 + 82))
        {
          int v16 = 112;
          goto LABEL_98;
        }
        int v16 = 112;
        if ((*((unsigned char *)v4 + 83) & 1) == 0) {
          goto LABEL_101;
        }
        goto LABEL_100;
      }
      int v16 = 2160;
    }
    goto LABEL_97;
  }
  if (!v13)
  {
    if ((v14 & 1) == 0)
    {
      if (*((unsigned char *)v4 + 82))
      {
        int v16 = 240;
        goto LABEL_98;
      }
      int v16 = 240;
      if ((*((unsigned char *)v4 + 83) & 1) == 0) {
        goto LABEL_101;
      }
      goto LABEL_100;
    }
    int v16 = 2288;
    goto LABEL_97;
  }
  if (v14)
  {
    int v16 = 3312;
    goto LABEL_97;
  }
  if (*((unsigned char *)v4 + 82))
  {
    int v16 = 1264;
LABEL_98:
    v16 |= 0x2000u;
LABEL_99:
    if (*((unsigned char *)v4 + 83) != 1) {
      goto LABEL_101;
    }
    goto LABEL_100;
  }
  int v16 = 1264;
  if (*((unsigned char *)v4 + 83)) {
    goto LABEL_100;
  }
LABEL_101:
  int v119 = v16;
  unint64_t v17 = sub_1000C7824(0);
  unint64_t v18 = sub_1000C742C(v17);
  uint64_t v19 = type metadata accessor for BinaryEncoder();
  uint64_t v20 = swift_allocObject();
  long long v117 = xmmword_1003B2440;
  *(_OWORD *)(v20 + 16)  = xmmword_1003B2440;
  unint64_t v118 = (long long *)(v20 + 16);
  *(void *)(v20 + 32)  = v18;
  unint64_t v130 = &type metadata for BinaryEncoder.UnkeyedContainer;
  unint64_t v21 = sub_100088B84();
  unint64_t v22 = v21;
  unint64_t v131 = v21;
  uint64_t v129 = v20;
  if (*((unsigned char *)v4 + 2))
  {
    swift_retain();
  }
  else
  {
    uint64_t v24 = v20;
    unsigned __int8 v25 = v4;
    uint64_t v26 = v24;
    uint64_t v110 = v19;
    unsigned __int16 v27 = a1;
    uint64_t v28 = v8;
    unint64_t v29 = v21;
    sub_100039448((uint64_t)&v129, (uint64_t)&type metadata for BinaryEncoder.UnkeyedContainer);
    swift_retain();
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    if (v3) {
      goto LABEL_106;
    }
    uint64_t v112 = v25;
    uint64_t v109 = v26;
    sub_100039448((uint64_t)&v129, (uint64_t)v130);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    sub_100039448((uint64_t)&v129, (uint64_t)v130);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    v119 |= 0x100u;
    unint64_t v22 = v29;
    uint64_t v8 = v28;
    a1  = v27;
    uint64_t v20 = v109;
    uint64_t v4 = v112;
  }
  unint64_t v23 = *((unsigned int *)v4 + 1) | ((unint64_t)*((unsigned __int16 *)v4 + 4) << 32);
  if ((v23 & 0xFF00000000) == 0x300000000) {
    goto LABEL_110;
  }
  uint64_t v112 = v4;
  if ((v23 & 0xFFFF0000) != 0) {
    goto LABEL_696;
  }
  sub_100039448((uint64_t)&v129, (uint64_t)v130);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  if (!v3)
  {
    v119 |= 0x200u;
    uint64_t v3 = 0;
    uint64_t v4 = v112;
LABEL_110:
    char v30 = *((unsigned char *)v4 + 16);
    uint64_t v112 = a1;
    uint64_t v111 = v8;
    if ((v30 & 1) != 0
      || (unint64_t v31 = *((unsigned int *)v4 + 5) | ((unint64_t)*((unsigned __int16 *)v4 + 12) << 32),
          (v31 & 0xFF00000000) == 0x300000000))
    {
LABEL_116:
      char v40 = *((unsigned char *)v4 + 32);
      uint64_t v113 = v22;
      if (v40)
      {
        if (*((unsigned char *)v4 + 62)) {
          goto LABEL_118;
        }
      }
      else
      {
        unint64_t v42 = *((unsigned __int16 *)v4 + 15);
        uint64_t v43 = *(unsigned int *)((char *)v4 + 26);
        unint64_t v44 = v43 | (v42 << 32);
        unint64_t v45 = v42 >> 8;
        v119 |= 2u;
        long long v127 = &type metadata for BinaryEncoder.UnkeyedContainer;
        unint64_t v128 = v22;
        v126[0]  = v20;
        sub_100010BCC(&qword_10047BEF8);
        uint64_t v46 = swift_allocObject();
        uint64_t v47 = sub_100260F50(v46, 6);
        *(unsigned char *)uint64_t v48 = v43;
        v49.i64[0]  = 0xFFFFFFFFFFFFLL;
        v49.i64[1]  = 0xFFFFFFFFFFFFLL;
        uint64x2_t v50 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v44), v49);
        int16x8_t v51 = (int16x8_t)vshlq_u64(v50, (uint64x2_t)xmmword_1003B2EB0);
        *(int32x2_t *)v50.i8  = vmovn_s64((int64x2_t)vshlq_u64(v50, (uint64x2_t)xmmword_1003B2EA0));
        *(int32x2_t *)v51.i8  = vmovn_s64((int64x2_t)v51);
        v51.i16[1]  = v51.i16[2];
        v51.i16[2]  = v50.i16[0];
        v51.i16[3]  = v50.i16[2];
        *(_DWORD *)(v48 + 1)  = vmovn_s16(v51).u32[0];
        *(unsigned char *)(v48 + 5)  = v45;
        uint64_t v52 = NANBitmap.Channel.operatingClass.getter(v47);
        swift_retain_n();
        uint64_t v53 = sub_1001265EC(v52);
        unint64_t v55 = v54;
        swift_bridgeObjectRelease();
        sub_100039448((uint64_t)v126, (uint64_t)v127);
        swift_beginAccess();
        sub_100125FAC(v53, v55);
        swift_endAccess();
        sub_10000C970(v53, v55);
        sub_100010754((uint64_t)v126);
        swift_release();
        if (*((unsigned char *)v4 + 62))
        {
LABEL_118:
          unint64_t v41 = v4[6];
          if (!v41) {
            goto LABEL_130;
          }
          goto LABEL_122;
        }
      }
      unint64_t v56 = *((unsigned __int16 *)v4 + 30);
      uint64_t v57 = *((unsigned int *)v4 + 14);
      unint64_t v58 = v57 | (v56 << 32);
      unint64_t v59 = v56 >> 8;
      v119 |= 4u;
      long long v127 = &type metadata for BinaryEncoder.UnkeyedContainer;
      unint64_t v128 = v113;
      v126[0]  = v20;
      sub_100010BCC(&qword_10047BEF8);
      uint64_t v60 = swift_allocObject();
      uint64_t v61 = sub_100260F50(v60, 6);
      *(unsigned char *)uint64_t v62 = v57;
      v63.i64[0]  = 0xFFFFFFFFFFFFLL;
      v63.i64[1]  = 0xFFFFFFFFFFFFLL;
      uint64x2_t v64 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v58), v63);
      int16x8_t v65 = (int16x8_t)vshlq_u64(v64, (uint64x2_t)xmmword_1003B2EB0);
      *(int32x2_t *)v64.i8  = vmovn_s64((int64x2_t)vshlq_u64(v64, (uint64x2_t)xmmword_1003B2EA0));
      *(int32x2_t *)v65.i8  = vmovn_s64((int64x2_t)v65);
      v65.i16[1]  = v65.i16[2];
      v65.i16[2]  = v64.i16[0];
      v65.i16[3]  = v64.i16[2];
      *(_DWORD *)(v62 + 1)  = vmovn_s16(v65).u32[0];
      *(unsigned char *)(v62 + 5)  = v59;
      uint64_t v66 = NANBitmap.Channel.operatingClass.getter(v61);
      swift_retain_n();
      uint64_t v67 = sub_1001265EC(v66);
      unint64_t v69 = v68;
      swift_bridgeObjectRelease();
      sub_100039448((uint64_t)v126, (uint64_t)v127);
      swift_beginAccess();
      sub_100125FAC(v67, v69);
      swift_endAccess();
      sub_10000C970(v67, v69);
      sub_100010754((uint64_t)v126);
      swift_release();
      unint64_t v41 = v4[6];
      if (!v41) {
        goto LABEL_130;
      }
LABEL_122:
      unint64_t v70 = v4[5];
      swift_bridgeObjectRetain();
      uint64_t v71 = sub_10011A478(v70, v41);
      v119 |= 8u;
      uint64_t v73 = v71;
      unint64_t v74 = v72;
      LOBYTE(v75)  = 0;
      switch(v72 >> 62)
      {
        case 1uLL:
          LODWORD(v75)  = HIDWORD(v71) - v71;
          if (__OFSUB__(HIDWORD(v71), v71))
          {
            __break(1u);
LABEL_695:
            __break(1u);
          }
          unint64_t v75 = (int)v75;
LABEL_127:
          if ((v75 & 0x8000000000000000) != 0 || v75 >= 0x100) {
            goto LABEL_696;
          }
LABEL_129:
          LOBYTE(v123)  = v75;
          uint64_t v79 = sub_10011A3BC((uint64_t)&v123, (uint64_t)&v123 + 1);
          unint64_t v81 = v80;
          swift_beginAccess();
          sub_100125FAC(v79, v81);
          swift_endAccess();
          sub_10000C970(v79, v81);
          swift_beginAccess();
          sub_100013D44(v73, v74);
          sub_100125FAC(v73, v74);
          swift_endAccess();
          sub_10000C970(v73, v74);
          sub_10000C970(v73, v74);
          break;
        case 2uLL:
          uint64_t v77 = *(void *)(v71 + 16);
          uint64_t v76 = *(void *)(v71 + 24);
          BOOL v78 = __OFSUB__(v76, v77);
          unint64_t v75 = v76 - v77;
          if (!v78) {
            goto LABEL_127;
          }
          goto LABEL_695;
        case 3uLL:
          goto LABEL_129;
        default:
          LOBYTE(v75)  = BYTE6(v72);
          goto LABEL_129;
      }
LABEL_130:
      if (*((unsigned char *)v4 + 63) == 1)
      {
        v119 |= 0x1000u;
        unsigned int v82 = 2;
        switch(*((unsigned char *)v4 + 64))
        {
          case 1:
            unsigned int v82 = 0x80000;
            goto LABEL_304;
          case 2:
            unsigned int v82 = 0x4000000;
            goto LABEL_304;
          case 3:
            unsigned int v82 = 0x8000000;
            goto LABEL_304;
          case 4:
            unsigned int v82 = 67108866;
            goto LABEL_304;
          case 5:
            unsigned int v82 = 0x10000;
            goto LABEL_304;
          case 6:
            unsigned int v82 = 4;
            goto LABEL_304;
          case 7:
            unsigned int v82 = 8;
            goto LABEL_304;
          case 8:
            unsigned int v82 = 16;
            goto LABEL_304;
          case 9:
            unsigned int v82 = 32;
            goto LABEL_304;
          case 0xA:
            unsigned int v82 = 64;
            goto LABEL_304;
          case 0xB:
            unsigned int v82 = 128;
            goto LABEL_304;
          case 0xC:
            unsigned int v82 = 256;
            goto LABEL_304;
          case 0xD:
            unsigned int v82 = 0x2000;
            goto LABEL_304;
          case 0xE:
            unsigned int v82 = 0x100000;
            goto LABEL_304;
          case 0xF:
            unsigned int v82 = 0x4000;
            goto LABEL_304;
          case 0x10:
            unsigned int v82 = 0x8000;
            goto LABEL_304;
          case 0x11:
            unsigned int v82 = 0x20000;
            goto LABEL_304;
          case 0x12:
            unsigned int v82 = 0x40000;
            goto LABEL_304;
          case 0x13:
            unsigned int v82 = 0x200000;
            goto LABEL_304;
          case 0x14:
            unsigned int v82 = 0x400000;
            goto LABEL_304;
          case 0x15:
            unsigned int v82 = 0x800000;
            goto LABEL_304;
          case 0x16:
            unsigned int v82 = 0x1000000;
            goto LABEL_304;
          case 0x17:
            unsigned int v82 = 0x2000000;
            goto LABEL_304;
          case 0x18:
            unsigned int v82 = 512;
            goto LABEL_304;
          case 0x19:
            unsigned int v82 = 4096;
            goto LABEL_304;
          case 0x1A:
            unsigned int v82 = 0x10000000;
            goto LABEL_304;
          case 0x1B:
            unsigned int v82 = 0x20000000;
            goto LABEL_304;
          case 0x1C:
            unsigned int v82 = 1024;
            goto LABEL_304;
          case 0x1D:
            unsigned int v82 = 2048;
            goto LABEL_304;
          case 0x1E:
            unsigned int v82 = 50331648;
            goto LABEL_304;
          case 0x1F:
            unsigned int v82 = 83886080;
            goto LABEL_304;
          case 0x20:
            unsigned int v82 = 100663296;
            goto LABEL_304;
          case 0x21:
            unsigned int v82 = 0x40000000;
            goto LABEL_304;
          case 0x22:
            unsigned int v82 = 0x80000000;
            goto LABEL_304;
          case 0x23:
            unsigned int v82 = 150994944;
            goto LABEL_304;
          case 0x24:
            unsigned int v82 = 167772160;
            goto LABEL_304;
          case 0x25:
            unsigned int v82 = 184549376;
            goto LABEL_304;
          case 0x26:
            unsigned int v82 = 201326592;
            goto LABEL_304;
          case 0x27:
            unsigned int v82 = 218103808;
            goto LABEL_304;
          case 0x28:
            unsigned int v82 = 234881024;
            goto LABEL_304;
          case 0x29:
            unsigned int v82 = 285212672;
            goto LABEL_304;
          case 0x2A:
            unsigned int v82 = 301989888;
            goto LABEL_304;
          case 0x2B:
            unsigned int v82 = 0;
            if (*((unsigned char *)v4 + 65) != 1) {
              goto LABEL_306;
            }
            goto LABEL_305;
          default:
LABEL_304:
            if (*((unsigned char *)v4 + 65)) {
LABEL_305:
            }
              v82 |= 1u;
LABEL_306:
            LOWORD(v123)  = 4;
            uint64_t v83 = sub_10011A3BC((uint64_t)&v123, (uint64_t)&v123 + 2);
            unint64_t v85 = v84;
            swift_beginAccess();
            sub_100125FAC(v83, v85);
            swift_endAccess();
            sub_10000C970(v83, v85);
            unsigned int v123 = v82;
            uint64_t v86 = sub_10011A3BC((uint64_t)&v123, (uint64_t)&v124);
            unint64_t v88 = v87;
            swift_beginAccess();
            sub_100125FAC(v86, v88);
            swift_endAccess();
            sub_10000C970(v86, v88);
            break;
        }
      }
      uint64_t v89 = v113;
      unint64_t v90 = sub_1000C7824(0);
      unint64_t v91 = sub_1000C742C(v90);
      uint64_t v92 = swift_allocObject();
      *(_OWORD *)(v92 + 16)  = v117;
      *(void *)(v92 + 32)  = v91;
      long long v127 = &type metadata for BinaryEncoder.UnkeyedContainer;
      unint64_t v128 = v89;
      v126[0]  = v92;
      if (*((unsigned char *)v4 + 84) == 1)
      {
        if (*((unsigned char *)v4 + 85))
        {
          if (*((unsigned char *)v4 + 87))
          {
            if (*((unsigned char *)v4 + 89))
            {
              if (*((unsigned char *)v4 + 86))
              {
                if (v4[11])
                {
                  int v93 = 474;
                  goto LABEL_402;
                }
                if (*((unsigned char *)v4 + 90))
                {
                  int v93 = 346;
LABEL_403:
                  v93 |= 0x200u;
LABEL_404:
                  if (*((unsigned char *)v4 + 91) != 1) {
                    goto LABEL_406;
                  }
                  goto LABEL_405;
                }
                if (*((unsigned char *)v4 + 91))
                {
                  int v93 = 346;
LABEL_405:
                  v93 |= 0x800u;
LABEL_406:
                  if (*((unsigned char *)v4 + 92) != 1) {
                    goto LABEL_408;
                  }
                  goto LABEL_407;
                }
                if (*((unsigned char *)v4 + 92))
                {
                  int v93 = 346;
LABEL_407:
                  v93 |= 0x1000u;
LABEL_408:
                  if (*((unsigned char *)v4 + 93) != 1) {
                    goto LABEL_410;
                  }
                  goto LABEL_409;
                }
                int v93 = 346;
                if ((*((unsigned char *)v4 + 93) & 1) == 0) {
                  goto LABEL_410;
                }
                goto LABEL_409;
              }
              if ((v4[11] & 1) == 0)
              {
                if (*((unsigned char *)v4 + 90))
                {
                  int v93 = 344;
                  goto LABEL_403;
                }
                if (*((unsigned char *)v4 + 91))
                {
                  int v93 = 344;
                  goto LABEL_405;
                }
                if (*((unsigned char *)v4 + 92))
                {
                  int v93 = 344;
                  goto LABEL_407;
                }
                int v93 = 344;
                if ((*((unsigned char *)v4 + 93) & 1) == 0) {
                  goto LABEL_410;
                }
                goto LABEL_409;
              }
              int v93 = 472;
            }
            else if (*((unsigned char *)v4 + 86))
            {
              if ((v4[11] & 1) == 0)
              {
                if (*((unsigned char *)v4 + 90))
                {
                  int v93 = 90;
                  goto LABEL_403;
                }
                if (*((unsigned char *)v4 + 91))
                {
                  int v93 = 90;
                  goto LABEL_405;
                }
                if (*((unsigned char *)v4 + 92))
                {
                  int v93 = 90;
                  goto LABEL_407;
                }
                int v93 = 90;
                if ((*((unsigned char *)v4 + 93) & 1) == 0) {
                  goto LABEL_410;
                }
                goto LABEL_409;
              }
              int v93 = 218;
            }
            else
            {
              if ((v4[11] & 1) == 0)
              {
                if (*((unsigned char *)v4 + 90))
                {
                  int v93 = 88;
                  goto LABEL_403;
                }
                if (*((unsigned char *)v4 + 91))
                {
                  int v93 = 88;
                  goto LABEL_405;
                }
                if (*((unsigned char *)v4 + 92))
                {
                  int v93 = 88;
                  goto LABEL_407;
                }
                int v93 = 88;
                if ((*((unsigned char *)v4 + 93) & 1) == 0) {
                  goto LABEL_410;
                }
                goto LABEL_409;
              }
              int v93 = 216;
            }
          }
          else if (*((unsigned char *)v4 + 89))
          {
            if (*((unsigned char *)v4 + 86))
            {
              if ((v4[11] & 1) == 0)
              {
                if (*((unsigned char *)v4 + 90))
                {
                  int v93 = 338;
                  goto LABEL_403;
                }
                if (*((unsigned char *)v4 + 91))
                {
                  int v93 = 338;
                  goto LABEL_405;
                }
                if (*((unsigned char *)v4 + 92))
                {
                  int v93 = 338;
                  goto LABEL_407;
                }
                int v93 = 338;
                if ((*((unsigned char *)v4 + 93) & 1) == 0) {
                  goto LABEL_410;
                }
                goto LABEL_409;
              }
              int v93 = 466;
            }
            else
            {
              if ((v4[11] & 1) == 0)
              {
                if (*((unsigned char *)v4 + 90))
                {
                  int v93 = 336;
                  goto LABEL_403;
                }
                if (*((unsigned char *)v4 + 91))
                {
                  int v93 = 336;
                  goto LABEL_405;
                }
                if (*((unsigned char *)v4 + 92))
                {
                  int v93 = 336;
                  goto LABEL_407;
                }
                int v93 = 336;
                if ((*((unsigned char *)v4 + 93) & 1) == 0) {
                  goto LABEL_410;
                }
                goto LABEL_409;
              }
              int v93 = 464;
            }
          }
          else if (*((unsigned char *)v4 + 86))
          {
            if ((v4[11] & 1) == 0)
            {
              if (*((unsigned char *)v4 + 90))
              {
                int v93 = 82;
                goto LABEL_403;
              }
              if (*((unsigned char *)v4 + 91))
              {
                int v93 = 82;
                goto LABEL_405;
              }
              if (*((unsigned char *)v4 + 92))
              {
                int v93 = 82;
                goto LABEL_407;
              }
              int v93 = 82;
              if ((*((unsigned char *)v4 + 93) & 1) == 0) {
                goto LABEL_410;
              }
              goto LABEL_409;
            }
            int v93 = 210;
          }
          else
          {
            if ((v4[11] & 1) == 0)
            {
              if (*((unsigned char *)v4 + 90))
              {
                int v93 = 80;
                goto LABEL_403;
              }
              if (*((unsigned char *)v4 + 91))
              {
                int v93 = 80;
                goto LABEL_405;
              }
              if (*((unsigned char *)v4 + 92))
              {
                int v93 = 80;
                goto LABEL_407;
              }
              int v93 = 80;
              if ((*((unsigned char *)v4 + 93) & 1) == 0) {
                goto LABEL_410;
              }
              goto LABEL_409;
            }
            int v93 = 208;
          }
        }
        else if (*((unsigned char *)v4 + 87))
        {
          if (*((unsigned char *)v4 + 89))
          {
            if (*((unsigned char *)v4 + 86))
            {
              if ((v4[11] & 1) == 0)
              {
                if (*((unsigned char *)v4 + 90))
                {
                  int v93 = 282;
                  goto LABEL_403;
                }
                if (*((unsigned char *)v4 + 91))
                {
                  int v93 = 282;
                  goto LABEL_405;
                }
                if (*((unsigned char *)v4 + 92))
                {
                  int v93 = 282;
                  goto LABEL_407;
                }
                int v93 = 282;
                if ((*((unsigned char *)v4 + 93) & 1) == 0) {
                  goto LABEL_410;
                }
                goto LABEL_409;
              }
              int v93 = 410;
            }
            else
            {
              if ((v4[11] & 1) == 0)
              {
                if (*((unsigned char *)v4 + 90))
                {
                  int v93 = 280;
                  goto LABEL_403;
                }
                if (*((unsigned char *)v4 + 91))
                {
                  int v93 = 280;
                  goto LABEL_405;
                }
                if (*((unsigned char *)v4 + 92))
                {
                  int v93 = 280;
                  goto LABEL_407;
                }
                int v93 = 280;
                if ((*((unsigned char *)v4 + 93) & 1) == 0) {
                  goto LABEL_410;
                }
                goto LABEL_409;
              }
              int v93 = 408;
            }
          }
          else if (*((unsigned char *)v4 + 86))
          {
            if ((v4[11] & 1) == 0)
            {
              if (*((unsigned char *)v4 + 90))
              {
                int v93 = 26;
                goto LABEL_403;
              }
              if (*((unsigned char *)v4 + 91))
              {
                int v93 = 26;
                goto LABEL_405;
              }
              if (*((unsigned char *)v4 + 92))
              {
                int v93 = 26;
                goto LABEL_407;
              }
              int v93 = 26;
              if ((*((unsigned char *)v4 + 93) & 1) == 0) {
                goto LABEL_410;
              }
              goto LABEL_409;
            }
            int v93 = 154;
          }
          else
          {
            if ((v4[11] & 1) == 0)
            {
              if (*((unsigned char *)v4 + 90))
              {
                int v93 = 24;
                goto LABEL_403;
              }
              if (*((unsigned char *)v4 + 91))
              {
                int v93 = 24;
                goto LABEL_405;
              }
              if (*((unsigned char *)v4 + 92))
              {
                int v93 = 24;
                goto LABEL_407;
              }
              int v93 = 24;
              if ((*((unsigned char *)v4 + 93) & 1) == 0) {
                goto LABEL_410;
              }
              goto LABEL_409;
            }
            int v93 = 152;
          }
        }
        else if (*((unsigned char *)v4 + 89))
        {
          if (*((unsigned char *)v4 + 86))
          {
            if ((v4[11] & 1) == 0)
            {
              if (*((unsigned char *)v4 + 90))
              {
                int v93 = 274;
                goto LABEL_403;
              }
              if (*((unsigned char *)v4 + 91))
              {
                int v93 = 274;
                goto LABEL_405;
              }
              if (*((unsigned char *)v4 + 92))
              {
                int v93 = 274;
                goto LABEL_407;
              }
              int v93 = 274;
              if ((*((unsigned char *)v4 + 93) & 1) == 0) {
                goto LABEL_410;
              }
              goto LABEL_409;
            }
            int v93 = 402;
          }
          else
          {
            if ((v4[11] & 1) == 0)
            {
              if (*((unsigned char *)v4 + 90))
              {
                int v93 = 272;
                goto LABEL_403;
              }
              if (*((unsigned char *)v4 + 91))
              {
                int v93 = 272;
                goto LABEL_405;
              }
              if (*((unsigned char *)v4 + 92))
              {
                int v93 = 272;
                goto LABEL_407;
              }
              int v93 = 272;
              if ((*((unsigned char *)v4 + 93) & 1) == 0) {
                goto LABEL_410;
              }
              goto LABEL_409;
            }
            int v93 = 400;
          }
        }
        else if (*((unsigned char *)v4 + 86))
        {
          if ((v4[11] & 1) == 0)
          {
            if (*((unsigned char *)v4 + 90))
            {
              int v93 = 18;
              goto LABEL_403;
            }
            if (*((unsigned char *)v4 + 91))
            {
              int v93 = 18;
              goto LABEL_405;
            }
            if (*((unsigned char *)v4 + 92))
            {
              int v93 = 18;
              goto LABEL_407;
            }
            int v93 = 18;
            if ((*((unsigned char *)v4 + 93) & 1) == 0) {
              goto LABEL_410;
            }
            goto LABEL_409;
          }
          int v93 = 146;
        }
        else
        {
          if ((v4[11] & 1) == 0)
          {
            if (*((unsigned char *)v4 + 90))
            {
              int v93 = 16;
              goto LABEL_403;
            }
            if (*((unsigned char *)v4 + 91))
            {
              int v93 = 16;
              goto LABEL_405;
            }
            if (*((unsigned char *)v4 + 92))
            {
              int v93 = 16;
              goto LABEL_407;
            }
            int v93 = 16;
            if ((*((unsigned char *)v4 + 93) & 1) == 0) {
              goto LABEL_410;
            }
            goto LABEL_409;
          }
          int v93 = 144;
        }
      }
      else if (*((unsigned char *)v4 + 85))
      {
        if (*((unsigned char *)v4 + 87))
        {
          if (*((unsigned char *)v4 + 89))
          {
            if (*((unsigned char *)v4 + 86))
            {
              if ((v4[11] & 1) == 0)
              {
                if (*((unsigned char *)v4 + 90))
                {
                  int v93 = 330;
                  goto LABEL_403;
                }
                if (*((unsigned char *)v4 + 91))
                {
                  int v93 = 330;
                  goto LABEL_405;
                }
                if (*((unsigned char *)v4 + 92))
                {
                  int v93 = 330;
                  goto LABEL_407;
                }
                int v93 = 330;
                if ((*((unsigned char *)v4 + 93) & 1) == 0)
                {
LABEL_410:
                  if (*((unsigned char *)v4 + 68) == 1)
                  {
                    swift_retain();
                    if (*((unsigned char *)v4 + 76))
                    {
LABEL_412:
                      *(void *)&long long v117 = v3;
                      int v94 = v93;
                      uint64_t v113 = v92 + 16;
LABEL_417:
                      unint64_t v95 = v112;
                      uint64_t v96 = (int *)type metadata accessor for AWDLActionFrame.DataPathState(0);
                      uint64_t v97 = (uint64_t)v115;
                      sub_1001036A4((uint64_t)v4 + v96[34], (uint64_t)v115);
                      uint64_t v98 = v111;
                      uint64_t v99 = v116;
                      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v111 + 48))(v97, 1, v116) == 1)
                      {
                        sub_1000380B4(v97, &qword_10047F2A8);
LABEL_421:
                        int v102 = v94;
LABEL_422:
                        uint64_t v103 = v117;
LABEL_423:
                        if (v102) {
                          __int16 v104 = v119 | 0x8000;
                        }
                        else {
                          __int16 v104 = v119;
                        }
                        sub_1000369C4(v95, v95[3]);
                        dispatch thunk of Encoder.unkeyedContainer()();
                        __int16 v122 = v104;
                        sub_100039448((uint64_t)&v123, v125);
                        sub_1001038E4();
                        dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
                        if (!v103)
                        {
                          uint64_t v105 = v118;
                          swift_beginAccess();
                          long long v121 = *v105;
                          sub_100039448((uint64_t)&v123, v125);
                          sub_1000742DC();
                          dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
                          if (v104 < 0)
                          {
                            LOWORD(v121)  = v102;
                            sub_100039448((uint64_t)&v123, v125);
                            sub_100103938();
                            dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
                            swift_beginAccess();
                            long long v120 = *(_OWORD *)(v92 + 16);
                            sub_100039448((uint64_t)&v123, v125);
                            dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
                          }
                        }
                        swift_release();
                        swift_release();
                        sub_100010754((uint64_t)&v123);
                        goto LABEL_436;
                      }
                      uint64_t v110 = v92;
                      unint64_t v100 = v114;
                      (*(void (**)(char *, uint64_t, uint64_t))(v98 + 32))(v114, v97, v99);
                      uint64_t v101 = (uint64_t)v4 + v96[35];
                      if (*(unsigned char *)(v101 + 4) == 1)
                      {
                        (*(void (**)(char *, uint64_t))(v98 + 8))(v100, v99);
                        uint64_t v92 = v110;
                        goto LABEL_421;
                      }
                      int v102 = v94;
                      if (*((unsigned char *)v4 + v96[36] + 4) == 1)
                      {
                        (*(void (**)(char *, uint64_t))(v111 + 8))(v114, v116);
                        uint64_t v92 = v110;
                        goto LABEL_422;
                      }
                      LODWORD(v115)  = *(_DWORD *)v101;
                      unint64_t v106 = v114;
                      sub_1001ADA80();
                      sub_100039448((uint64_t)v126, (uint64_t)v127);
                      uint64_t v107 = v117;
                      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
                      uint64_t v103 = v107;
                      uint64_t v92 = v110;
                      if (!v107)
                      {
                        sub_100039448((uint64_t)v126, (uint64_t)v127);
                        dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
                        sub_100039448((uint64_t)v126, (uint64_t)v127);
                        dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
                        v102 |= 0x20u;
                        (*(void (**)(char *, uint64_t))(v111 + 8))(v114, v116);
                        unint64_t v95 = v112;
                        goto LABEL_423;
                      }
                      (*(void (**)(char *, uint64_t))(v111 + 8))(v106, v116);
LABEL_435:
                      swift_release();
                      swift_release();
LABEL_436:
                      sub_100010754((uint64_t)v126);
                      return sub_100010754((uint64_t)&v129);
                    }
                  }
                  else
                  {
                    sub_100039448((uint64_t)v126, (uint64_t)&type metadata for BinaryEncoder.UnkeyedContainer);
                    swift_retain();
                    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
                    if (v3) {
                      goto LABEL_435;
                    }
                    v93 |= 1u;
                    if (*((unsigned char *)v4 + 76)) {
                      goto LABEL_412;
                    }
                  }
                  sub_100039448((uint64_t)v126, (uint64_t)v127);
                  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
                  if (v3) {
                    goto LABEL_435;
                  }
                  *(void *)&long long v117 = 0;
                  uint64_t v113 = v92 + 16;
                  int v94 = v93 | 4;
                  goto LABEL_417;
                }
LABEL_409:
                v93 |= 0x2000u;
                goto LABEL_410;
              }
              int v93 = 458;
            }
            else
            {
              if ((v4[11] & 1) == 0)
              {
                if (*((unsigned char *)v4 + 90))
                {
                  int v93 = 328;
                  goto LABEL_403;
                }
                if (*((unsigned char *)v4 + 91))
                {
                  int v93 = 328;
                  goto LABEL_405;
                }
                if (*((unsigned char *)v4 + 92))
                {
                  int v93 = 328;
                  goto LABEL_407;
                }
                int v93 = 328;
                if ((*((unsigned char *)v4 + 93) & 1) == 0) {
                  goto LABEL_410;
                }
                goto LABEL_409;
              }
              int v93 = 456;
            }
          }
          else if (*((unsigned char *)v4 + 86))
          {
            if ((v4[11] & 1) == 0)
            {
              if (*((unsigned char *)v4 + 90))
              {
                int v93 = 74;
                goto LABEL_403;
              }
              if (*((unsigned char *)v4 + 91))
              {
                int v93 = 74;
                goto LABEL_405;
              }
              if (*((unsigned char *)v4 + 92))
              {
                int v93 = 74;
                goto LABEL_407;
              }
              int v93 = 74;
              if ((*((unsigned char *)v4 + 93) & 1) == 0) {
                goto LABEL_410;
              }
              goto LABEL_409;
            }
            int v93 = 202;
          }
          else
          {
            if ((v4[11] & 1) == 0)
            {
              if (*((unsigned char *)v4 + 90))
              {
                int v93 = 72;
                goto LABEL_403;
              }
              if (*((unsigned char *)v4 + 91))
              {
                int v93 = 72;
                goto LABEL_405;
              }
              if (*((unsigned char *)v4 + 92))
              {
                int v93 = 72;
                goto LABEL_407;
              }
              int v93 = 72;
              if ((*((unsigned char *)v4 + 93) & 1) == 0) {
                goto LABEL_410;
              }
              goto LABEL_409;
            }
            int v93 = 200;
          }
        }
        else if (*((unsigned char *)v4 + 89))
        {
          if (*((unsigned char *)v4 + 86))
          {
            if ((v4[11] & 1) == 0)
            {
              if (*((unsigned char *)v4 + 90))
              {
                int v93 = 322;
                goto LABEL_403;
              }
              if (*((unsigned char *)v4 + 91))
              {
                int v93 = 322;
                goto LABEL_405;
              }
              if (*((unsigned char *)v4 + 92))
              {
                int v93 = 322;
                goto LABEL_407;
              }
              int v93 = 322;
              if ((*((unsigned char *)v4 + 93) & 1) == 0) {
                goto LABEL_410;
              }
              goto LABEL_409;
            }
            int v93 = 450;
          }
          else
          {
            if ((v4[11] & 1) == 0)
            {
              if (*((unsigned char *)v4 + 90))
              {
                int v93 = 320;
                goto LABEL_403;
              }
              if (*((unsigned char *)v4 + 91))
              {
                int v93 = 320;
                goto LABEL_405;
              }
              if (*((unsigned char *)v4 + 92))
              {
                int v93 = 320;
                goto LABEL_407;
              }
              int v93 = 320;
              if ((*((unsigned char *)v4 + 93) & 1) == 0) {
                goto LABEL_410;
              }
              goto LABEL_409;
            }
            int v93 = 448;
          }
        }
        else if (*((unsigned char *)v4 + 86))
        {
          if ((v4[11] & 1) == 0)
          {
            if (*((unsigned char *)v4 + 90))
            {
              int v93 = 66;
              goto LABEL_403;
            }
            if (*((unsigned char *)v4 + 91))
            {
              int v93 = 66;
              goto LABEL_405;
            }
            if (*((unsigned char *)v4 + 92))
            {
              int v93 = 66;
              goto LABEL_407;
            }
            int v93 = 66;
            if ((*((unsigned char *)v4 + 93) & 1) == 0) {
              goto LABEL_410;
            }
            goto LABEL_409;
          }
          int v93 = 194;
        }
        else
        {
          if ((v4[11] & 1) == 0)
          {
            if (*((unsigned char *)v4 + 90))
            {
              int v93 = 64;
              goto LABEL_403;
            }
            if (*((unsigned char *)v4 + 91))
            {
              int v93 = 64;
              goto LABEL_405;
            }
            if (*((unsigned char *)v4 + 92))
            {
              int v93 = 64;
              goto LABEL_407;
            }
            int v93 = 64;
            if ((*((unsigned char *)v4 + 93) & 1) == 0) {
              goto LABEL_410;
            }
            goto LABEL_409;
          }
          int v93 = 192;
        }
      }
      else if (*((unsigned char *)v4 + 87))
      {
        if (*((unsigned char *)v4 + 89))
        {
          if (*((unsigned char *)v4 + 86))
          {
            if ((v4[11] & 1) == 0)
            {
              if (*((unsigned char *)v4 + 90))
              {
                int v93 = 266;
                goto LABEL_403;
              }
              if (*((unsigned char *)v4 + 91))
              {
                int v93 = 266;
                goto LABEL_405;
              }
              if (*((unsigned char *)v4 + 92))
              {
                int v93 = 266;
                goto LABEL_407;
              }
              int v93 = 266;
              if ((*((unsigned char *)v4 + 93) & 1) == 0) {
                goto LABEL_410;
              }
              goto LABEL_409;
            }
            int v93 = 394;
          }
          else
          {
            if ((v4[11] & 1) == 0)
            {
              if (*((unsigned char *)v4 + 90))
              {
                int v93 = 264;
                goto LABEL_403;
              }
              if (*((unsigned char *)v4 + 91))
              {
                int v93 = 264;
                goto LABEL_405;
              }
              if (*((unsigned char *)v4 + 92))
              {
                int v93 = 264;
                goto LABEL_407;
              }
              int v93 = 264;
              if ((*((unsigned char *)v4 + 93) & 1) == 0) {
                goto LABEL_410;
              }
              goto LABEL_409;
            }
            int v93 = 392;
          }
        }
        else if (*((unsigned char *)v4 + 86))
        {
          if ((v4[11] & 1) == 0)
          {
            if (*((unsigned char *)v4 + 90))
            {
              int v93 = 10;
              goto LABEL_403;
            }
            if (*((unsigned char *)v4 + 91))
            {
              int v93 = 10;
              goto LABEL_405;
            }
            if (*((unsigned char *)v4 + 92))
            {
              int v93 = 10;
              goto LABEL_407;
            }
            int v93 = 10;
            if ((*((unsigned char *)v4 + 93) & 1) == 0) {
              goto LABEL_410;
            }
            goto LABEL_409;
          }
          int v93 = 138;
        }
        else
        {
          if ((v4[11] & 1) == 0)
          {
            if (*((unsigned char *)v4 + 90))
            {
              int v93 = 8;
              goto LABEL_403;
            }
            if (*((unsigned char *)v4 + 91))
            {
              int v93 = 8;
              goto LABEL_405;
            }
            if (*((unsigned char *)v4 + 92))
            {
              int v93 = 8;
              goto LABEL_407;
            }
            int v93 = 8;
            if ((*((unsigned char *)v4 + 93) & 1) == 0) {
              goto LABEL_410;
            }
            goto LABEL_409;
          }
          int v93 = 136;
        }
      }
      else if (*((unsigned char *)v4 + 89))
      {
        if (*((unsigned char *)v4 + 86))
        {
          if ((v4[11] & 1) == 0)
          {
            if (*((unsigned char *)v4 + 90))
            {
              int v93 = 258;
              goto LABEL_403;
            }
            if (*((unsigned char *)v4 + 91))
            {
              int v93 = 258;
              goto LABEL_405;
            }
            if (*((unsigned char *)v4 + 92))
            {
              int v93 = 258;
              goto LABEL_407;
            }
            int v93 = 258;
            if ((*((unsigned char *)v4 + 93) & 1) == 0) {
              goto LABEL_410;
            }
            goto LABEL_409;
          }
          int v93 = 386;
        }
        else
        {
          if ((v4[11] & 1) == 0)
          {
            if (*((unsigned char *)v4 + 90))
            {
              int v93 = 256;
              goto LABEL_403;
            }
            if (*((unsigned char *)v4 + 91))
            {
              int v93 = 256;
              goto LABEL_405;
            }
            if (*((unsigned char *)v4 + 92))
            {
              int v93 = 256;
              goto LABEL_407;
            }
            int v93 = 256;
            if ((*((unsigned char *)v4 + 93) & 1) == 0) {
              goto LABEL_410;
            }
            goto LABEL_409;
          }
          int v93 = 384;
        }
      }
      else if (*((unsigned char *)v4 + 86))
      {
        if ((v4[11] & 1) == 0)
        {
          if (*((unsigned char *)v4 + 90))
          {
            int v93 = 2;
            goto LABEL_403;
          }
          if (*((unsigned char *)v4 + 91))
          {
            int v93 = 2;
            goto LABEL_405;
          }
          if (*((unsigned char *)v4 + 92))
          {
            int v93 = 2;
            goto LABEL_407;
          }
          int v93 = 2;
          if ((*((unsigned char *)v4 + 93) & 1) == 0) {
            goto LABEL_410;
          }
          goto LABEL_409;
        }
        int v93 = 130;
      }
      else
      {
        if ((v4[11] & 1) == 0)
        {
          if (*((unsigned char *)v4 + 90))
          {
            int v93 = 0;
            goto LABEL_403;
          }
          if (*((unsigned char *)v4 + 91))
          {
            int v93 = 0;
            goto LABEL_405;
          }
          if (*((unsigned char *)v4 + 92))
          {
            int v93 = 0;
            goto LABEL_407;
          }
          int v93 = 0;
          if ((*((unsigned char *)v4 + 93) & 1) == 0) {
            goto LABEL_410;
          }
          goto LABEL_409;
        }
        int v93 = 128;
      }
LABEL_402:
      if ((*((unsigned char *)v4 + 90) & 1) == 0) {
        goto LABEL_404;
      }
      goto LABEL_403;
    }
    uint64_t v32 = *((unsigned __int16 *)v4 + 7);
    unint64_t v33 = *(unsigned int *)((char *)v4 + 10) | (unint64_t)(v32 << 32);
    LOBYTE(v126[0])  = *(_DWORD *)((char *)v4 + 10);
    v34.i64[0]  = 0xFFFFFFFFFFFFLL;
    v34.i64[1]  = 0xFFFFFFFFFFFFLL;
    uint64x2_t v35 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v33), v34);
    int16x8_t v36 = (int16x8_t)vshlq_u64(v35, (uint64x2_t)xmmword_1003B2EB0);
    *(int32x2_t *)v35.i8  = vmovn_s64((int64x2_t)vshlq_u64(v35, (uint64x2_t)xmmword_1003B2EA0));
    *(int32x2_t *)v36.i8  = vmovn_s64((int64x2_t)v36);
    v36.i16[1]  = v36.i16[2];
    v36.i16[2]  = v35.i16[0];
    v36.i16[3]  = v35.i16[2];
    *(_DWORD *)((char *)v126 + 1)  = vmovn_s16(v36).u32[0];
    BYTE5(v126[0])  = BYTE1(v32);
    sub_100039448((uint64_t)&v129, (uint64_t)v130);
    sub_10003F27C();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    if (v3) {
      goto LABEL_106;
    }
    if ((v31 & 0xFFFF0000) == 0)
    {
      v119 |= 1u;
      LOWORD(v123)  = v31;
      uint64_t v37 = sub_10011A3BC((uint64_t)&v123, (uint64_t)&v123 + 2);
      unint64_t v39 = v38;
      swift_beginAccess();
      sub_100125FAC(v37, v39);
      swift_endAccess();
      sub_10000C970(v37, v39);
      goto LABEL_116;
    }
LABEL_696:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x1000ED1D8);
  }
LABEL_106:
  swift_release();
  return sub_100010754((uint64_t)&v129);
}

Swift::Int sub_1000ED298(uint64_t a1, uint64_t a2)
{
  return sub_1000FA220(a1, a2, (void (*)(unsigned char *))AWDLActionFrame.DataPathState.hash(into:));
}

Swift::Int sub_1000ED2B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FA284(a1, a2, a3, (void (*)(unsigned char *))AWDLActionFrame.DataPathState.hash(into:));
}

void *AWDLActionFrame.Arpa.Flags.isLinkLocal.unsafeMutableAddressor()
{
  return &static AWDLActionFrame.Arpa.Flags.isLinkLocal;
}

void *AWDLActionFrame.Arpa.Flags.isIPv6.unsafeMutableAddressor()
{
  return &static AWDLActionFrame.Arpa.Flags.isIPv6;
}

void *AWDLActionFrame.Arpa.Flags.isIPv4.unsafeMutableAddressor()
{
  return &static AWDLActionFrame.Arpa.Flags.isIPv4;
}

uint64_t sub_1000ED2F4()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000ED354()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t AWDLActionFrame.Arpa.hostname.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t AWDLActionFrame.Arpa.hostname.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 8)  = a1;
  *(void *)(v2 + 16)  = a2;
  return result;
}

uint64_t AWDLActionFrame.Arpa.hash(into:)(int a1, Swift::UInt8 a2)
{
  Hasher._combine(_:)(a2);
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t static AWDLActionFrame.Arpa.__derived_struct_equals(_:_:)(char a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  if (a1 != a4) {
    return 0;
  }
  if (a2 == a5 && a3 == a6) {
    return 1;
  }
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

Swift::Int AWDLActionFrame.Arpa.hashValue.getter(Swift::UInt8 a1)
{
  return Hasher._finalize()();
}

uint64_t sub_1000ED530@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = AWDLActionFrame.Arpa.init(from:)(a1);
  if (!v2)
  {
    *(unsigned char *)a2  = result;
    *(void *)(a2 + 8)  = v5;
    *(void *)(a2 + 16)  = v6;
  }
  return result;
}

uint64_t AWDLActionFrame.Arpa.init(from:)(void *a1)
{
  return sub_1001032A4(a1);
}

uint64_t sub_1000ED584(void *a1)
{
  return AWDLActionFrame.Arpa.encode(to:)(a1, *v1, *((void *)v1 + 1), *((void *)v1 + 2));
}

uint64_t AWDLActionFrame.Arpa.encode(to:)(void *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  sub_100039448((uint64_t)v18, v19);
  sub_10010398C();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_10011A478(a3, a4);
    uint64_t v8 = v7;
    unint64_t v10 = v9;
    switch(v9 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v7), v7))
        {
          __break(1u);
LABEL_11:
          __break(1u);
        }
        else
        {
          unint64_t v11 = HIDWORD(v7) - (int)v7;
LABEL_6:
          if ((v11 & 0x8000000000000000) == 0 && v11 < 0x100)
          {
LABEL_8:
            sub_100039448((uint64_t)v18, v19);
            dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
            sub_100039448((uint64_t)v18, v19);
            sub_1000742DC();
            dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
            uint64_t v14 = sub_1001265EC((uint64_t)&off_10044DC08);
            unint64_t v16 = v15;
            sub_100039448((uint64_t)v18, v19);
            dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
            sub_10000C970(v14, v16);
            sub_10000C970(v8, v10);
            return sub_100010754((uint64_t)v18);
          }
        }
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x1000ED850);
      case 2uLL:
        uint64_t v13 = *(void *)(v7 + 16);
        uint64_t v12 = *(void *)(v7 + 24);
        unint64_t v11 = v12 - v13;
        if (!__OFSUB__(v12, v13)) {
          goto LABEL_6;
        }
        goto LABEL_11;
      default:
        goto LABEL_8;
    }
  }
  return sub_100010754((uint64_t)v18);
}

Swift::Int sub_1000ED860()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1000ED8D4()
{
  Hasher._combine(_:)(*v0);
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000ED938()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1000ED9A8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  if (*((void *)a1 + 1) == *((void *)a2 + 1) && *((void *)a1 + 2) == *((void *)a2 + 2)) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

void AWDLActionFrame.SyncTreePath.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = (Swift::UInt8 *)(a2 + 37);
    do
    {
      Swift::UInt8 v5 = *(v4 - 5);
      Swift::UInt8 v6 = *(v4 - 4);
      Swift::UInt8 v7 = *(v4 - 3);
      Swift::UInt8 v8 = *(v4 - 2);
      Swift::UInt8 v9 = *(v4 - 1);
      Swift::UInt8 v10 = *v4;
      v4 += 6;
      Hasher._combine(_:)(v5);
      Hasher._combine(_:)(v6);
      Hasher._combine(_:)(v7);
      Hasher._combine(_:)(v8);
      Hasher._combine(_:)(v9);
      Hasher._combine(_:)(v10);
      --v3;
    }
    while (v3);
  }
}

uint64_t sub_1000EDA90()
{
  return 1752457584;
}

uint64_t sub_1000EDAA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 1752457584 && a2 == 0xE400000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3  = v7 & 1;
  return result;
}

uint64_t sub_1000EDB28(uint64_t a1)
{
  unint64_t v2 = sub_1001039E0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000EDB64(uint64_t a1)
{
  unint64_t v2 = sub_1001039E0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AWDLActionFrame.SyncTreePath.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100010BCC(&qword_10047F2D8);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  char v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_1001039E0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1]  = a2;
  sub_100010BCC(&qword_10047F2E8);
  sub_10010E9F4(&qword_10047F2F0, (void (*)(void))sub_10003F27C);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int AWDLActionFrame.SyncTreePath.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  AWDLActionFrame.SyncTreePath.hash(into:)((uint64_t)v3, a1);
  return Hasher._finalize()();
}

void *AWDLActionFrame.SyncTreePath.init(from:)(void *a1)
{
  return sub_1001004BC(a1);
}

void *sub_1000EDD80@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1001004BC(a1);
  if (!v2) {
    *a2  = result;
  }
  return result;
}

uint64_t sub_1000EDDAC(void *a1)
{
  return AWDLActionFrame.SyncTreePath.encode(to:)(a1, *v1);
}

Swift::Int sub_1000EDDC8()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  AWDLActionFrame.SyncTreePath.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_1000EDE10(uint64_t a1)
{
  AWDLActionFrame.SyncTreePath.hash(into:)(a1, *v1);
}

Swift::Int sub_1000EDE18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EDE30(a1, a2, a3, (void (*)(unsigned char *, uint64_t))AWDLActionFrame.SyncTreePath.hash(into:));
}

Swift::Int sub_1000EDE30(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, uint64_t))
{
  uint64_t v6 = *v4;
  Hasher.init(_seed:)();
  a4(v8, v6);
  return Hasher._finalize()();
}

BOOL sub_1000EDE7C(uint64_t *a1, uint64_t *a2)
{
  return _s7CoreP2P15AWDLActionFrameV12SyncTreePathV23__derived_struct_equalsySbAE_AEtFZ_0(*a1, *a2);
}

CoreP2P::AWDLActionFrame::AWDLVersion __swiftcall AWDLActionFrame.AWDLVersion.init(majorVersion:minorVersion:)(Swift::UInt8 majorVersion, Swift::UInt8 minorVersion)
{
  return (CoreP2P::AWDLActionFrame::AWDLVersion)(minorVersion & 0xF | (16 * majorVersion));
}

void *AWDLActionFrame.AWDLVersion.latest.unsafeMutableAddressor()
{
  return &static AWDLActionFrame.AWDLVersion.latest;
}

uint64_t static AWDLActionFrame.AWDLVersion.latest.getter()
{
  return 146;
}

uint64_t static AWDLActionFrame.AWDLVersion.< infix(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  unsigned int v2 = a1 >> 4;
  unsigned int v3 = a2 >> 4;
  BOOL v4 = (a1 & 0xFu) < (a2 & 0xFu);
  if (v2 != v3) {
    BOOL v4 = 0;
  }
  return v2 < v3 || v4;
}

BOOL AWDLActionFrame.AWDLVersion.supportsLoopFreeAlgorithm.getter(unsigned __int8 a1)
{
  BOOL v1 = (a1 & 0xF0) != 0x30 || (a1 & 0xFu) > 2;
  return a1 >= 0x30u && v1;
}

BOOL AWDLActionFrame.AWDLVersion.supportsDynamicSDB.getter(unsigned __int8 a1)
{
  BOOL v1 = (a1 & 0xF0) != 0x30 || (a1 & 0xC) != 0;
  return a1 >= 0x30u && v1;
}

BOOL AWDLActionFrame.AWDLVersion.supportsServiceDiscoverySize.getter(unsigned __int8 a1)
{
  return a1 > 0x3Fu;
}

BOOL AWDLActionFrame.AWDLVersion.isSDBAware.getter(unsigned __int8 a1)
{
  return a1 > 0x2Fu;
}

uint64_t sub_1000EDF50()
{
  return 0x65756C6156776172;
}

uint64_t sub_1000EDF68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x65756C6156776172 && a2 == 0xE800000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3  = v7 & 1;
  return result;
}

uint64_t sub_1000EE000(uint64_t a1)
{
  unint64_t v2 = sub_100103A34();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000EE03C(uint64_t a1)
{
  unint64_t v2 = sub_100103A34();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AWDLActionFrame.AWDLVersion.encode(to:)(void *a1)
{
  uint64_t v2 = sub_100010BCC(&qword_10047F2F8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_100103A34();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t AWDLActionFrame.AWDLVersion.init(from:)(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_10047F308);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (uint64_t)sub_1000369C4(a1, a1[3]);
  sub_100103A34();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  sub_100010754((uint64_t)a1);
  return v7;
}

uint64_t sub_1000EE2F8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  unsigned int v4 = v2 >> 4;
  BOOL v5 = (v2 & 0xF) < (v3 & 0xF);
  if (v4 != v3 >> 4) {
    BOOL v5 = 0;
  }
  return v4 < v3 >> 4 || v5;
}

uint64_t sub_1000EE32C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  unsigned int v4 = v2 >> 4;
  if (v3 >> 4 < v2 >> 4) {
    return 0;
  }
  BOOL v6 = (v3 & 0xF) >= (v2 & 0xF);
  return v3 >> 4 != v4 || v6;
}

uint64_t sub_1000EE36C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  unsigned int v4 = v2 >> 4;
  if (v2 >> 4 < v3 >> 4) {
    return 0;
  }
  BOOL v6 = (v2 & 0xF) >= (v3 & 0xF);
  return v4 != v3 >> 4 || v6;
}

uint64_t sub_1000EE3AC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  unsigned int v4 = v2 >> 4;
  BOOL v5 = (v3 & 0xF) < (v2 & 0xF);
  if (v3 >> 4 != v4) {
    BOOL v5 = 0;
  }
  return v3 >> 4 < v4 || v5;
}

uint64_t sub_1000EE3E0@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = sub_100010BCC(&qword_10047F308);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  Swift::UInt8 v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_100103A34();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100010754((uint64_t)a1);
  }
  char v9 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = sub_100010754((uint64_t)a1);
  *a2  = v9;
  return result;
}

uint64_t sub_1000EE53C(void *a1)
{
  uint64_t v2 = sub_100010BCC(&qword_10047F2F8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_100103A34();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t AWDLActionFrame.Version.PlatformType.rawValue.getter(char a1)
{
  return 0x1008040201uLL >> (8 * a1);
}

BOOL sub_1000EE690(unsigned char *a1, unsigned char *a2)
{
  return ((0x1008040201uLL >> (8 * *a1)) & 0x1F) == ((0x1008040201uLL >> (8 * *a2)) & 0x1F);
}

uint64_t sub_1000EE6C8@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = _s7CoreP2P15AWDLActionFrameV7VersionV12PlatformTypeO8rawValueAGSgs5UInt8V_tcfC_0(*a1);
  *a2  = result;
  return result;
}

void sub_1000EE6F4(unsigned char *a1@<X8>)
{
  *a1  = 0x1008040201uLL >> (8 * *v1);
}

Swift::Int sub_1000EE714()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0x1008040201uLL >> (8 * v1));
  return Hasher._finalize()();
}

void sub_1000EE76C()
{
  Hasher._combine(_:)(0x1008040201uLL >> (8 * *v0));
}

Swift::Int sub_1000EE7AC()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0x1008040201uLL >> (8 * v1));
  return Hasher._finalize()();
}

uint64_t sub_1000EE800()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t AWDLActionFrame.Version.platformType.getter(__int16 a1)
{
  int v1 = HIBYTE(a1) - 1;
  uint64_t result = 0;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = 1;
      break;
    case 3:
      uint64_t result = 2;
      break;
    case 7:
      uint64_t result = 3;
      break;
    case 15:
      uint64_t result = 4;
      break;
    default:
      uint64_t result = 5;
      break;
  }
  return result;
}

CoreP2P::AWDLActionFrame::Version __swiftcall AWDLActionFrame.Version.init(version:platformType:)(CoreP2P::AWDLActionFrame::AWDLVersion version, CoreP2P::AWDLActionFrame::Version::PlatformType platformType)
{
  return (CoreP2P::AWDLActionFrame::Version)(version.rawValue | ((0x1008040201uLL >> (8 * platformType)) << 8));
}

void AWDLThreadCoexistenceEvent.hash(into:)(int a1, __int16 a2)
{
  Swift::UInt8 v2 = HIBYTE(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v2);
}

BOOL static AWDLThreadCoexistenceEvent.__derived_struct_equals(_:_:)(__int16 a1, __int16 a2)
{
  return a1 == a2;
}

uint64_t sub_1000EE964()
{
  if (*v0) {
    return 0x726F6674616C705FLL;
  }
  else {
    return 0x6E6F6973726576;
  }
}

uint64_t sub_1000EE9AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10010D56C(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1000EE9D4(uint64_t a1)
{
  unint64_t v2 = sub_100103A88();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000EEA10(uint64_t a1)
{
  unint64_t v2 = sub_100103A88();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AWDLActionFrame.Version.encode(to:)(void *a1, char a2)
{
  uint64_t v5 = sub_100010BCC(&qword_10047F310);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  Swift::UInt8 v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_100103A88();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[15]  = a2;
  v10[14]  = 0;
  sub_100103ADC();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v10[13]  = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int AWDLThreadCoexistenceEvent.hashValue.getter(__int16 a1)
{
  Swift::UInt8 v1 = a1;
  Swift::UInt8 v2 = HIBYTE(a1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t AWDLActionFrame.Version.init(from:)(void *a1)
{
  return sub_100101120(a1);
}

uint64_t sub_1000EEC38@<X0>(void *a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t result = sub_100101120(a1);
  if (!v2) {
    *a2  = result;
  }
  return result;
}

uint64_t sub_1000EEC64(void *a1)
{
  return AWDLActionFrame.Version.encode(to:)(a1, *v1);
}

Swift::Int sub_1000EEC80()
{
  Swift::UInt8 v1 = *v0;
  Swift::UInt8 v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_1000EECE0()
{
  Swift::UInt8 v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int sub_1000EED20()
{
  Swift::UInt8 v1 = *v0;
  Swift::UInt8 v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL sub_1000EED7C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

void AWDLActionFrame.PeerMACAddressListBloomFilter.hash(into:)(int a1, __int16 a2, uint64_t a3)
{
  Swift::UInt8 v4 = HIBYTE(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v4);
  Swift::UInt v5 = *(void *)(a3 + 16);
  Hasher._combine(_:)(v5);
  if (v5)
  {
    uint64_t v6 = (Swift::UInt8 *)(a3 + 32);
    do
    {
      Swift::UInt8 v7 = *v6++;
      Hasher._combine(_:)(v7);
      --v5;
    }
    while (v5);
  }
}

uint64_t static AWDLActionFrame.PeerMACAddressListBloomFilter.__derived_struct_equals(_:_:)(__int16 a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  if (a1 == a3) {
    return sub_1000956AC(a2, a4);
  }
  else {
    return 0;
  }
}

unint64_t sub_1000EEE20()
{
  uint64_t v1 = 0x746E756F63;
  if (*v0 != 1) {
    uint64_t v1 = 0x6D6F6F6C62;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD000000000000014;
  }
}

uint64_t sub_1000EEE78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10010D684(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1000EEEA0(uint64_t a1)
{
  unint64_t v2 = sub_100103B30();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000EEEDC(uint64_t a1)
{
  unint64_t v2 = sub_100103B30();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AWDLActionFrame.PeerMACAddressListBloomFilter.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100010BCC(&qword_10047F328);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  char v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_100103B30();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v3)
  {
    char v13 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[1]  = a3;
    char v12 = 2;
    sub_100010BCC(&qword_10047E7D0);
    sub_10010E990((unint64_t *)&qword_10047F268);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

Swift::Int AWDLActionFrame.PeerMACAddressListBloomFilter.hashValue.getter(__int16 a1, uint64_t a2)
{
  Swift::UInt8 v3 = a1;
  Swift::UInt8 v4 = HIBYTE(a1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Swift::UInt v5 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v5);
  if (v5)
  {
    uint64_t v6 = (Swift::UInt8 *)(a2 + 32);
    do
    {
      Swift::UInt8 v7 = *v6++;
      Hasher._combine(_:)(v7);
      --v5;
    }
    while (v5);
  }
  return Hasher._finalize()();
}

uint64_t AWDLActionFrame.PeerMACAddressListBloomFilter.init(from:)(void *a1)
{
  return sub_1001012D8(a1);
}

uint64_t sub_1000EF198@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1001012D8(a1);
  if (!v2)
  {
    *(_WORD *)a2  = result;
    *(void *)(a2 + 8)  = v5;
  }
  return result;
}

uint64_t sub_1000EF1D0(void *a1)
{
  return AWDLActionFrame.PeerMACAddressListBloomFilter.encode(to:)(a1, *v1, *((void *)v1 + 1));
}

Swift::Int sub_1000EF1F0()
{
  return AWDLActionFrame.PeerMACAddressListBloomFilter.hashValue.getter(*(_WORD *)v0, *(void *)(v0 + 8));
}

void sub_1000EF1FC(int a1)
{
  AWDLActionFrame.PeerMACAddressListBloomFilter.hash(into:)(a1, *(_WORD *)v1, *(void *)(v1 + 8));
}

Swift::Int sub_1000EF208()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Swift::UInt8 v2 = *(unsigned char *)v0;
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Swift::UInt v4 = *(void *)(v1 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    uint64_t v5 = (Swift::UInt8 *)(v1 + 32);
    do
    {
      Swift::UInt8 v6 = *v5++;
      Hasher._combine(_:)(v6);
      --v4;
    }
    while (v4);
  }
  return Hasher._finalize()();
}

uint64_t sub_1000EF294(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return sub_1000956AC(*((void *)a1 + 1), *((void *)a2 + 1));
  }
  else {
    return 0;
  }
}

unint64_t NANElectionParameters.clusterID.getter()
{
  return *(unsigned __int16 *)(v0 + 2) | ((unint64_t)*(unsigned int *)(v0 + 4) << 16);
}

uint64_t NANElectionParameters.clusterID.setter(uint64_t result)
{
  *(_WORD *)(v1 + 2)  = result;
  *(unsigned char *)(v1 + 4)  = BYTE2(result);
  *(unsigned char *)(v1 + 5)  = BYTE3(result);
  *(unsigned char *)(v1 + 6)  = BYTE4(result);
  *(unsigned char *)(v1 + 7)  = BYTE5(result);
  return result;
}

unint64_t AWDLActionFrame.NANSynchronization.clusterID.getter()
{
  return *(unsigned __int16 *)(v0 + 8) | ((unint64_t)*(unsigned int *)(v0 + 10) << 16);
}

uint64_t AWDLActionFrame.NANSynchronization.clusterID.setter(uint64_t result)
{
  *(_WORD *)(v1 + 8)  = result;
  *(unsigned char *)(v1 + 10)  = BYTE2(result);
  *(unsigned char *)(v1 + 11)  = BYTE3(result);
  *(unsigned char *)(v1 + 12)  = BYTE4(result);
  *(unsigned char *)(v1 + 13)  = BYTE5(result);
  return result;
}

uint64_t IEEE80211InformationElement.RSNCapability.capabilities.getter()
{
  return *(unsigned __int16 *)(v0 + 24);
}

uint64_t IEEE80211InformationElement.RSNCapability.capabilities.setter(uint64_t result)
{
  *(_WORD *)(v1 + 24)  = result;
  return result;
}

unint64_t AWDLActionFrame.NANSynchronization.anchorMasterRank.getter()
{
  return __rev16(*(unsigned __int16 *)(v0 + 32)) | ((unint64_t)*(unsigned __int8 *)(v0 + 26) << 16) | ((unint64_t)*(unsigned __int8 *)(v0 + 27) << 24) | ((unint64_t)*(unsigned int *)(v0 + 28) << 32);
}

unint64_t AWDLActionFrame.NANSynchronization.anchorMasterCluster.getter()
{
  return __rev16(*(unsigned __int16 *)(v0 + 32)) | ((unint64_t)*(unsigned __int8 *)(v0 + 26) << 16) | ((unint64_t)*(unsigned __int8 *)(v0 + 27) << 24) | ((unint64_t)*(unsigned __int8 *)(v0 + 28) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 29) << 40) | ((unint64_t)*(unsigned __int8 *)(v0 + 30) << 48) | ((unint64_t)*(unsigned __int8 *)(v0 + 31) << 56);
}

void AWDLActionFrame.NANSynchronization.hash(into:)()
{
  Hasher._combine(_:)(*(_WORD *)v0);
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 3);
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 5);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 6);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 7);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 2));
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 9);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 10);
  Swift::UInt8 v8 = *(unsigned char *)(v0 + 11);
  Swift::UInt8 v9 = *(unsigned char *)(v0 + 12);
  Swift::UInt8 v10 = *(unsigned char *)(v0 + 13);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 8));
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(*(void *)(v0 + 16));
  Swift::UInt8 v11 = *(unsigned char *)(v0 + 25);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 24));
  Hasher._combine(_:)(v11);
  Swift::UInt8 v12 = *(unsigned char *)(v0 + 27);
  Swift::UInt8 v13 = *(unsigned char *)(v0 + 28);
  Swift::UInt8 v14 = *(unsigned char *)(v0 + 29);
  Swift::UInt8 v15 = *(unsigned char *)(v0 + 30);
  Swift::UInt8 v16 = *(unsigned char *)(v0 + 31);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 26));
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  Hasher._combine(_:)(v16);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 32));
  Hasher._combine(_:)(*(unsigned char *)(v0 + 33));
  Hasher._combine(_:)(*(_WORD *)(v0 + 34));
  Hasher._combine(_:)(*(_DWORD *)(v0 + 36));
}

unint64_t sub_1000EF510(char a1)
{
  unint64_t result = 0x746E756F43706F68;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6F4E656372756F73;
      break;
    case 2:
      unint64_t result = 0x4972657473756C63;
      break;
    case 3:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 4:
      unint64_t result = 0xD000000000000010;
      break;
    case 5:
      unint64_t result = 0xD000000000000013;
      break;
    case 6:
      unint64_t result = 0xD000000000000018;
      break;
    case 7:
      unint64_t result = 0xD000000000000016;
      break;
    case 8:
      unint64_t result = 0xD000000000000014;
      break;
    case 9:
      unint64_t result = 0xD000000000000022;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1000EF664()
{
  return sub_1000EF510(*v0);
}

uint64_t sub_1000EF66C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10010D7C8(a1, a2);
  *a3  = result;
  return result;
}

void sub_1000EF694(unsigned char *a1@<X8>)
{
  *a1  = 10;
}

uint64_t sub_1000EF6A0(uint64_t a1)
{
  unint64_t v2 = sub_100103B84();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000EF6DC(uint64_t a1)
{
  unint64_t v2 = sub_100103B84();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AWDLActionFrame.NANSynchronization.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100010BCC(&qword_10047F338);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  Swift::UInt8 v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_100103B84();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v10)  = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LODWORD(v10)  = *(_DWORD *)(v3 + 2);
    WORD2(v10)  = *(_WORD *)(v3 + 6);
    char v11 = 1;
    sub_10003F27C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LODWORD(v10)  = *(_DWORD *)(v3 + 8);
    WORD2(v10)  = *(_WORD *)(v3 + 12);
    char v11 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v10 = *(void *)(v3 + 16);
    char v11 = 3;
    sub_100103BD8();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOWORD(v10)  = *(_WORD *)(v3 + 24);
    char v11 = 4;
    sub_100103C2C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LODWORD(v10)  = *(_DWORD *)(v3 + 26);
    WORD2(v10)  = *(_WORD *)(v3 + 30);
    char v11 = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v10)  = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v10)  = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v10)  = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v10)  = 9;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int AWDLActionFrame.NANSynchronization.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(_WORD *)v0);
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 3);
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 5);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 6);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 7);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 2));
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 9);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 10);
  Swift::UInt8 v8 = *(unsigned char *)(v0 + 11);
  Swift::UInt8 v9 = *(unsigned char *)(v0 + 12);
  Swift::UInt8 v10 = *(unsigned char *)(v0 + 13);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 8));
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(*(void *)(v0 + 16));
  Swift::UInt8 v11 = *(unsigned char *)(v0 + 25);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 24));
  Hasher._combine(_:)(v11);
  Swift::UInt8 v12 = *(unsigned char *)(v0 + 27);
  Swift::UInt8 v13 = *(unsigned char *)(v0 + 28);
  Swift::UInt8 v14 = *(unsigned char *)(v0 + 29);
  Swift::UInt8 v15 = *(unsigned char *)(v0 + 30);
  Swift::UInt8 v16 = *(unsigned char *)(v0 + 31);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 26));
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  Hasher._combine(_:)(v16);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 32));
  Hasher._combine(_:)(*(unsigned char *)(v0 + 33));
  Hasher._combine(_:)(*(_WORD *)(v0 + 34));
  Hasher._combine(_:)(*(_DWORD *)(v0 + 36));
  return Hasher._finalize()();
}

double AWDLActionFrame.NANSynchronization.init(from:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1001014EC(a1, (uint64_t)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2  = v6[0];
    *(_OWORD *)(a2 + 16)  = v5;
    *(void *)(a2 + 32)  = v7;
  }
  return result;
}

uint64_t sub_1000EFC58(void *a1)
{
  return AWDLActionFrame.NANSynchronization.encode(to:)(a1);
}

Swift::Int sub_1000EFC78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F186C(a1, a2, a3, (void (*)(unsigned char *))AWDLActionFrame.NANSynchronization.hash(into:));
}

BOOL sub_1000EFC90(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0]  = *(_OWORD *)a1;
  v5[1]  = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0]  = *(_OWORD *)a2;
  v7[1]  = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return _s7CoreP2P15AWDLActionFrameV18NANSynchronizationV23__derived_struct_equalsySbAE_AEtFZ_0((unsigned __int16 *)v5, (unsigned __int16 *)v7);
}

unint64_t NANOOBActionFrameReceivedEvent.peerAddress.getter()
{
  return *v0 | ((unint64_t)*(unsigned int *)(v0 + 1) << 16);
}

unint64_t NANOOBActionFrameReceivedEvent.localAddress.getter()
{
  return *(unsigned __int16 *)(v0 + 6) | ((unint64_t)*(unsigned int *)(v0 + 8) << 16);
}

uint64_t AWDLActionFrame.ElectionParameter.rootLoopFreeCounter.getter()
{
  return *(unsigned int *)(v0 + 12);
}

uint64_t Socket.rawValue.getter()
{
  return *(unsigned int *)(v0 + 16);
}

uint64_t AWDLActionFrame.ElectionParameter.hopCount.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 16)  = result;
  return result;
}

unint64_t AWDLActionFrame.ElectionParameter.rootMetric.getter()
{
  return *(unsigned int *)(v0 + 20) | ((unint64_t)*(unsigned __int8 *)(v0 + 24) << 32);
}

unint64_t AWDLActionFrame.ElectionParameter.selfMetric.getter()
{
  return *(unsigned int *)(v0 + 28) | ((unint64_t)*(unsigned __int8 *)(v0 + 32) << 32);
}

uint64_t AWDLActionFrame.ElectionParameter.selfMetric.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 28)  = result;
  *(unsigned char *)(v1 + 32)  = BYTE4(result) & 1;
  return result;
}

uint64_t AWDLActionFrame.ElectionParameter.electionID.getter()
{
  return *(unsigned int *)(v0 + 36);
}

uint64_t AWDLActionFrame.ElectionParameter.electionID.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 36)  = result;
  return result;
}

uint64_t (*AWDLActionFrame.ElectionParameter.electionID.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLActionFrame.ElectionParameter.electionFlags.getter()
{
  return *(unsigned int *)(v0 + 40);
}

uint64_t AWDLActionFrame.ElectionParameter.electionFlags.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 40)  = result;
  return result;
}

uint64_t AWDLActionFrame.ElectionParameter.selfLoopFreeCounter.getter()
{
  return *(unsigned int *)(v0 + 44);
}

uint64_t AWDLActionFrame.ElectionParameter.selfLoopFreeCounter.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 44)  = result;
  return result;
}

uint64_t (*AWDLActionFrame.ElectionParameter.selfLoopFreeCounter.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLActionFrame.ElectionParameter.init(rootNode:parentNode:rootLoopFreeCounter:hopCount:rootMetric:selfMetric:electionID:electionFlags:selfLoopFreeCounter:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, int a10)
{
  *(_WORD *)a9  = result;
  *(unsigned char *)(a9 + 2)  = BYTE2(result);
  *(unsigned char *)(a9 + 3)  = BYTE3(result);
  *(unsigned char *)(a9 + 4)  = BYTE4(result);
  *(unsigned char *)(a9 + 5)  = BYTE5(result);
  *(_WORD *)(a9 + 6)  = a2;
  *(unsigned char *)(a9 + 8)  = BYTE2(a2);
  *(unsigned char *)(a9 + 9)  = BYTE3(a2);
  *(unsigned char *)(a9 + 10)  = BYTE4(a2);
  *(unsigned char *)(a9 + 11)  = BYTE5(a2);
  *(_DWORD *)(a9 + 12)  = a3;
  *(_DWORD *)(a9 + 16)  = a4;
  *(_DWORD *)(a9 + 20)  = a5;
  *(unsigned char *)(a9 + 24)  = BYTE4(a5) & 1;
  *(_DWORD *)(a9 + 28)  = a6;
  *(unsigned char *)(a9 + 32)  = BYTE4(a6) & 1;
  *(_DWORD *)(a9 + 36)  = a7;
  *(_DWORD *)(a9 + 40)  = a8;
  *(_DWORD *)(a9 + 44)  = a10;
  return result;
}

void AWDLActionFrame.ElectionParameter.hash(into:)()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 1);
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 2);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 3);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 5);
  Hasher._combine(_:)(*(unsigned char *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 7);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 8);
  Swift::UInt8 v8 = *(unsigned char *)(v0 + 9);
  Swift::UInt8 v9 = *(unsigned char *)(v0 + 10);
  Swift::UInt8 v10 = *(unsigned char *)(v0 + 11);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 6));
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(*(_DWORD *)(v0 + 12));
  Hasher._combine(_:)(*(_DWORD *)(v0 + 16));
  sub_100103C80(v0 + 20, (uint64_t)v14);
  sub_100103C80((uint64_t)v14, (uint64_t)&v15);
  Swift::UInt32 v11 = v15;
  if (v16 == 1) {
    Swift::UInt32 v11 = dword_1003BD744[v15];
  }
  Hasher._combine(_:)(v11);
  sub_100103C80(v0 + 28, (uint64_t)&v13);
  sub_100103C80((uint64_t)&v13, (uint64_t)&v17);
  Swift::UInt32 v12 = v17;
  if (v18 == 1) {
    Swift::UInt32 v12 = dword_1003BD744[v17];
  }
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(*(_DWORD *)(v0 + 36));
  Hasher._combine(_:)(*(_DWORD *)(v0 + 40));
  Hasher._combine(_:)(*(_DWORD *)(v0 + 44));
}

uint64_t sub_1000EFFC0(char a1)
{
  uint64_t result = 0x65646F4E746F6F72;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6F4E746E65726170;
      break;
    case 2:
    case 8:
      uint64_t result = 0xD000000000000013;
      break;
    case 3:
      uint64_t result = 0x746E756F43706F68;
      break;
    case 4:
      unsigned int v3 = 1953460082;
      goto LABEL_6;
    case 5:
      unsigned int v3 = 1718379891;
LABEL_6:
      uint64_t result = v3 | 0x7274654D00000000;
      break;
    case 6:
    case 7:
      uint64_t result = 0x6E6F697463656C65;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000F00D4()
{
  return sub_1000EFFC0(*v0);
}

uint64_t sub_1000F00DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10010DBAC(a1, a2);
  *a3  = result;
  return result;
}

void sub_1000F0104(unsigned char *a1@<X8>)
{
  *a1  = 9;
}

uint64_t sub_1000F0110(uint64_t a1)
{
  unint64_t v2 = sub_100103CDC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000F014C(uint64_t a1)
{
  unint64_t v2 = sub_100103CDC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AWDLActionFrame.ElectionParameter.encode(to:)(void *a1)
{
  unsigned int v3 = v1;
  uint64_t v5 = sub_100010BCC(&qword_10047F358);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  Swift::UInt8 v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_100103CDC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  int v11 = *v3;
  __int16 v12 = *((_WORD *)v3 + 2);
  HIBYTE(v10)  = 0;
  sub_10003F27C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    int v11 = *(int *)((char *)v3 + 6);
    __int16 v12 = *((_WORD *)v3 + 5);
    HIBYTE(v10)  = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11)  = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11)  = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    sub_100103C80((uint64_t)(v3 + 5), (uint64_t)v14);
    sub_100103C80((uint64_t)v14, (uint64_t)&v11);
    HIBYTE(v10)  = 4;
    sub_100103100();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_100103C80((uint64_t)(v3 + 7), (uint64_t)v13);
    sub_100103C80((uint64_t)v13, (uint64_t)&v11);
    HIBYTE(v10)  = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11)  = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11)  = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11)  = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int AWDLActionFrame.ElectionParameter.hashValue.getter()
{
  return Hasher._finalize()();
}

double AWDLActionFrame.ElectionParameter.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_10010192C(a1, v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2  = v6[0];
    a2[1]  = v5;
    double result = *(double *)&v7;
    a2[2]  = v7;
  }
  return result;
}

uint64_t sub_1000F0514(void *a1)
{
  return AWDLActionFrame.ElectionParameter.encode(to:)(a1);
}

Swift::Int sub_1000F0550()
{
  return Hasher._finalize()();
}

void sub_1000F05A4()
{
}

Swift::Int sub_1000F05E0()
{
  return Hasher._finalize()();
}

BOOL sub_1000F0630(_OWORD *a1, long long *a2)
{
  long long v2 = a1[1];
  v7[0]  = *a1;
  v7[1]  = v2;
  long long v3 = *a2;
  long long v4 = a2[1];
  _OWORD v7[2] = a1[2];
  v8[0]  = v3;
  long long v5 = a2[2];
  v8[1]  = v4;
  _OWORD v8[2] = v5;
  return _s7CoreP2P15AWDLActionFrameV17ElectionParameterV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)v7, (uint64_t)v8);
}

uint64_t sub_1000F067C@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = _s7CoreP2P15AWDLActionFrameV20MultiPeerBSSSteeringV17SteeringMessageIDO8rawValueAGSgs5UInt8V_tcfC_0(*a1);
  *a2  = result;
  return result;
}

uint64_t sub_1000F06A8()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000F0708()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1000F0758()
{
  return 0x496567617373656DLL;
}

uint64_t sub_1000F0774@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x496567617373656DLL && a2 == 0xE900000000000044)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3  = v7 & 1;
  return result;
}

uint64_t sub_1000F0818(uint64_t a1)
{
  unint64_t v2 = sub_100103D30();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000F0854(uint64_t a1)
{
  unint64_t v2 = sub_100103D30();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AWDLActionFrame.MultiPeerBSSSteering.encode(to:)(void *a1, char a2)
{
  uint64_t v4 = sub_100010BCC(&qword_10047F368);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  char v7 = &v9[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_100103D30();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[15]  = a2;
  sub_100103D84();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
}

void *AWDLActionFrame.MultiPeerBSSSteering.init(from:)(void *a1)
{
  return sub_100101CF0(a1);
}

void *sub_1000F09EC@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100101CF0(a1);
  if (!v2) {
    *a2  = (_BYTE)result;
  }
  return result;
}

uint64_t sub_1000F0A18(void *a1)
{
  return AWDLActionFrame.MultiPeerBSSSteering.encode(to:)(a1, *v1);
}

uint64_t sub_1000F0A34()
{
  if (*v0) {
    return 0x44496E656B6F74;
  }
  else {
    return 0x7367616C66;
  }
}

uint64_t sub_1000F0A6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10010DF7C(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1000F0A94(uint64_t a1)
{
  unint64_t v2 = sub_100103DD8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000F0AD0(uint64_t a1)
{
  unint64_t v2 = sub_100103DD8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AWDLActionFrame.Ranging.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v5 = sub_100010BCC(&qword_10047F380);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  Swift::UInt8 v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_100103DD8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[15]  = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v10[9]  = BYTE1(a2);
    v10[10]  = BYTE2(a2);
    v10[11]  = BYTE3(a2);
    v10[12]  = BYTE4(a2);
    v10[13]  = BYTE5(a2);
    v10[14]  = BYTE6(a2);
    v10[8]  = 1;
    sub_10003F27C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t AWDLActionFrame.Ranging.init(from:)(void *a1)
{
  return sub_100101E5C(a1) & 0xFFFFFFFFFFFFFFLL;
}

uint64_t sub_1000F0CC8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100101E5C(a1);
  if (!v2)
  {
    *(_WORD *)a2  = result;
    *(unsigned char *)(a2 + 2)  = BYTE2(result);
    *(unsigned char *)(a2 + 3)  = BYTE3(result);
    *(unsigned char *)(a2 + 4)  = BYTE4(result);
    *(unsigned char *)(a2 + 5)  = BYTE5(result);
    *(unsigned char *)(a2 + 6)  = BYTE6(result);
  }
  return result;
}

uint64_t sub_1000F0D24(void *a1)
{
  return AWDLActionFrame.Ranging.encode(to:)(a1, *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 2) << 16) | ((unint64_t)*(unsigned int *)((char *)v1 + 3) << 24));
}

void *AWDLActionFrame.RealtimeGroup.Flags.airPlaySender.unsafeMutableAddressor()
{
  return &static AWDLActionFrame.RealtimeGroup.Flags.airPlaySender;
}

void *AWDLActionFrame.RealtimeGroup.Flags.universalControl.unsafeMutableAddressor()
{
  return &static AWDLActionFrame.RealtimeGroup.Flags.universalControl;
}

void *AWDLActionFrame.RealtimeGroup.Flags.sidecar.unsafeMutableAddressor()
{
  return &static AWDLActionFrame.RealtimeGroup.Flags.sidecar;
}

void *AWDLActionFrame.RealtimeGroup.Flags.airPlay.unsafeMutableAddressor()
{
  return &static AWDLActionFrame.RealtimeGroup.Flags.airPlay;
}

void *AWDLActionFrame.RealtimeGroup.Flags.mpRemoteCamera.unsafeMutableAddressor()
{
  return &static AWDLActionFrame.RealtimeGroup.Flags.mpRemoteCamera;
}

void *AWDLActionFrame.RealtimeGroup.Flags.ultraLowLatencyInfrastructure.unsafeMutableAddressor()
{
  return &static AWDLActionFrame.RealtimeGroup.Flags.ultraLowLatencyInfrastructure;
}

void *AWDLActionFrame.RealtimeGroup.Flags.discoveryActive.unsafeMutableAddressor()
{
  return &static AWDLActionFrame.RealtimeGroup.Flags.discoveryActive;
}

void *AWDLActionFrame.RealtimeGroup.Flags.forceRetro.unsafeMutableAddressor()
{
  return &static AWDLActionFrame.RealtimeGroup.Flags.forceRetro;
}

uint64_t sub_1000F0DB0()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000F0E10()
{
  return RawRepresentable<>.encode(to:)();
}

void *AWDLActionFrame.RealtimeGroup.AdditionalFlags.alwaysPrioritizeInfra.unsafeMutableAddressor()
{
  return &static AWDLActionFrame.RealtimeGroup.AdditionalFlags.alwaysPrioritizeInfra;
}

void *AWDLActionFrame.RealtimeGroup.AdditionalFlags.twoGHzRetroModeSupported.unsafeMutableAddressor()
{
  return &static AWDLActionFrame.RealtimeGroup.AdditionalFlags.twoGHzRetroModeSupported;
}

void *AWDLActionFrame.RealtimeGroup.AdditionalFlags.edgeKit.unsafeMutableAddressor()
{
  return &static AWDLActionFrame.RealtimeGroup.AdditionalFlags.edgeKit;
}

void *AWDLActionFrame.RealtimeGroup.AdditionalFlags.disableWiFiDisconnect.unsafeMutableAddressor()
{
  return &static AWDLActionFrame.RealtimeGroup.AdditionalFlags.disableWiFiDisconnect;
}

void *AWDLActionFrame.RealtimeGroup.AdditionalFlags.disableRemoteScreenRTGSync.unsafeMutableAddressor()
{
  return &static AWDLActionFrame.RealtimeGroup.AdditionalFlags.disableRemoteScreenRTGSync;
}

void *AWDLActionFrame.RealtimeGroup.AdditionalFlags.remoteCamera.unsafeMutableAddressor()
{
  return &static AWDLActionFrame.RealtimeGroup.AdditionalFlags.remoteCamera;
}

void *AWDLActionFrame.RealtimeGroup.AdditionalFlags.tvRemoteCamera.unsafeMutableAddressor()
{
  return &static AWDLActionFrame.RealtimeGroup.AdditionalFlags.tvRemoteCamera;
}

void *AWDLActionFrame.RealtimeGroup.AdditionalFlags.remoteScreen.unsafeMutableAddressor()
{
  return &static AWDLActionFrame.RealtimeGroup.AdditionalFlags.remoteScreen;
}

uint64_t sub_1000F0EC0()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000F0F20()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t AWDLActionFrame.RealtimeGroup.groupID.getter()
{
  return *(unsigned __int16 *)(v0 + 1) | ((unint64_t)*(unsigned int *)(v0 + 3) << 16);
}

unint64_t AWDLActionFrame.RealtimeGroup.infrastructureChannel.getter()
{
  return *(unsigned int *)(v0 + 8) | ((unint64_t)*(unsigned __int16 *)(v0 + 12) << 32);
}

uint64_t AWDLActionFrame.RealtimeGroup.infrastructureChannel.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 8)  = result;
  *(_WORD *)(v1 + 12)  = WORD2(result);
  return result;
}

uint64_t InfraStatistics.bkOutputPackets.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t NANBeacon.Metadata.rate.setter(uint64_t result)
{
  *(void *)(v1 + 16)  = result;
  return result;
}

uint64_t IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.finiteCylicGroupID.getter()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t AWDLActionFrame.RealtimeGroup.additionalFlags.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 24)  = result;
  return result;
}

unint64_t AWDLActionFrame.RealtimeGroup.customRealtimeGroupInfraChannel.getter()
{
  return *(unsigned int *)(v0 + 28) | ((unint64_t)*(unsigned __int16 *)(v0 + 32) << 32);
}

uint64_t AWDLActionFrame.RealtimeGroup.customRealtimeGroupInfraChannel.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 28)  = result;
  *(_WORD *)(v1 + 32)  = WORD2(result);
  return result;
}

void *AWDLActionFrame.RealtimeGroup.activeServiceIdentifiers.getter()
{
  uint64_t v5 = &_swiftEmptySetSingleton;
  char v1 = *v0;
  if ((*v0 & 4) != 0)
  {
    sub_1000FA3C4(&v4, AWDLTrafficRegistrationServiceSidecar);
  }
  if ((v1 & 2) != 0)
  {
    sub_1000FA3C4(&v4, AWDLTrafficRegistrationServiceUniversalControl);
  }
  if ((v1 & 9) != 0)
  {
    sub_1000FA3C4(&v4, AWDLTrafficRegistrationServiceAirPlay);
  }
  if ((v1 & 0x10) != 0)
  {
    sub_1000FA3C4(&v4, AWDLTrafficRegistrationServiceMPRemoteCamera);

    char v2 = v0[24];
    if ((v2 & 4) == 0)
    {
LABEL_9:
      if ((v2 & 0x20) == 0) {
        goto LABEL_10;
      }
      goto LABEL_15;
    }
  }
  else
  {
    char v2 = v0[24];
    if ((v2 & 4) == 0) {
      goto LABEL_9;
    }
  }
  sub_1000FA3C4(&v4, AWDLTrafficRegistrationServiceEdgeKit);

  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      goto LABEL_11;
    }
LABEL_16:
    sub_1000FA3C4(&v4, AWDLTrafficRegistrationServiceTVRemoteCamera);

    if ((v2 & 0x80) == 0) {
      return v5;
    }
LABEL_17:
    sub_1000FA3C4(&v4, AWDLTrafficRegistrationServiceRemoteScreen);

    return v5;
  }
LABEL_15:
  sub_1000FA3C4(&v4, AWDLTrafficRegistrationServiceRemoteCamera);

  if ((v2 & 0x40) != 0) {
    goto LABEL_16;
  }
LABEL_11:
  if (v2 < 0) {
    goto LABEL_17;
  }
  return v5;
}

void AWDLActionFrame.RealtimeGroup.hash(into:)()
{
  Hasher._combine(_:)(*(unsigned char *)v0);
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 2);
  Swift::UInt8 v2 = *(unsigned char *)(v0 + 3);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 5);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 6);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 1));
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  unint64_t v6 = *(unsigned int *)(v0 + 8) | ((unint64_t)*(unsigned __int16 *)(v0 + 12) << 32);
  if ((v6 & 0xFF00000000) == 0x300000000)
  {
    Swift::UInt8 v7 = 0;
LABEL_3:
    Hasher._combine(_:)(v7);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6);
    Hasher._combine(_:)(0x801004u >> ((v6 >> 29) & 0xF8));
    switch(v6 >> 40)
    {
      case 2uLL:
        Hasher._combine(_:)(0);
        break;
      case 3uLL:
        Hasher._combine(_:)(1uLL);
        break;
      case 4uLL:
        Hasher._combine(_:)(3uLL);
        break;
      case 5uLL:
        Hasher._combine(_:)(4uLL);
        break;
      case 6uLL:
        Hasher._combine(_:)(5uLL);
        break;
      default:
        Hasher._combine(_:)(2uLL);
        Swift::UInt8 v7 = BYTE5(v6) & 1;
        goto LABEL_3;
    }
  }
  Hasher._combine(_:)(*(void *)(v0 + 16));
  Hasher._combine(_:)(*(unsigned char *)(v0 + 24));
  unint64_t v8 = *(unsigned int *)(v0 + 28) | ((unint64_t)*(unsigned __int16 *)(v0 + 32) << 32);
  if ((v8 & 0xFF00000000) == 0x300000000)
  {
    Swift::UInt8 v9 = 0;
LABEL_6:
    Hasher._combine(_:)(v9);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v8);
    Hasher._combine(_:)(0x801004u >> ((v8 >> 29) & 0xF8));
    switch(v8 >> 40)
    {
      case 2uLL:
        Hasher._combine(_:)(0);
        break;
      case 3uLL:
        Hasher._combine(_:)(1uLL);
        break;
      case 4uLL:
        Hasher._combine(_:)(3uLL);
        break;
      case 5uLL:
        Hasher._combine(_:)(4uLL);
        break;
      case 6uLL:
        Hasher._combine(_:)(5uLL);
        break;
      default:
        Hasher._combine(_:)(2uLL);
        Swift::UInt8 v9 = BYTE5(v8) & 1;
        goto LABEL_6;
    }
  }
  Swift::UInt8 v10 = *(unsigned char *)(v0 + 35);
  Swift::UInt8 v11 = *(unsigned char *)(v0 + 36);
  Swift::UInt8 v12 = *(unsigned char *)(v0 + 37);
  Swift::UInt8 v13 = *(unsigned char *)(v0 + 38);
  Swift::UInt8 v14 = *(unsigned char *)(v0 + 39);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 34));
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
}

Swift::Int AWDLActionFrame.RealtimeGroup.hashValue.getter()
{
  return Hasher._finalize()();
}

double sub_1000F1478@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  double result = AWDLActionFrame.RealtimeGroup.init(from:)(a1, (uint64_t)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2  = v6[0];
    *(_OWORD *)(a2 + 16)  = v5;
    *(void *)(a2 + 32)  = v7;
  }
  return result;
}

double AWDLActionFrame.RealtimeGroup.init(from:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100102C14(a1, (uint64_t)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2  = v6[0];
    *(_OWORD *)(a2 + 16)  = v5;
    *(void *)(a2 + 32)  = v7;
  }
  return result;
}

uint64_t sub_1000F1508(void *a1)
{
  return AWDLActionFrame.RealtimeGroup.encode(to:)(a1);
}

uint64_t AWDLActionFrame.RealtimeGroup.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  sub_100039448((uint64_t)v6, v7);
  sub_100103E2C();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (v2) {
    return sub_100010754((uint64_t)v6);
  }
  sub_100039448((uint64_t)v6, v7);
  sub_10003F27C();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  sub_100103E80(v1 + 8, (uint64_t)v9);
  sub_100103E80((uint64_t)v9, (uint64_t)&v10);
  if (((v10 | ((unint64_t)v11 << 32)) & 0xFF00000000) == 0x300000000 || v10 < 0x100)
  {
    sub_100039448((uint64_t)v6, v7);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    uint64_t v4 = *(void *)(v1 + 16);
    if (v4 < -128)
    {
      __break(1u);
    }
    else if (v4 <= 127)
    {
      sub_100039448((uint64_t)v6, v7);
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
      sub_100039448((uint64_t)v6, v7);
      sub_100103EE8();
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      sub_100103E80(v3 + 28, (uint64_t)v8);
      sub_100103E80((uint64_t)v8, (uint64_t)&v12);
      sub_100039448((uint64_t)v6, v7);
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
      sub_100039448((uint64_t)v6, v7);
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      return sub_100010754((uint64_t)v6);
    }
    __break(1u);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int sub_1000F1854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F186C(a1, a2, a3, (void (*)(unsigned char *))AWDLActionFrame.RealtimeGroup.hash(into:));
}

Swift::Int sub_1000F186C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  Hasher.init(_seed:)();
  a4(v6);
  return Hasher._finalize()();
}

BOOL sub_1000F18B0(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0]  = *(_OWORD *)a1;
  v5[1]  = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0]  = *(_OWORD *)a2;
  v7[1]  = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return _s7CoreP2P15AWDLActionFrameV13RealtimeGroupV23__derived_struct_equalsySbAE_AEtFZ_0((unsigned __int8 *)v5, (unsigned __int8 *)v7);
}

uint64_t sub_1000F18FC(uint64_t a1)
{
  unint64_t v2 = sub_100103F3C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000F1938(uint64_t a1)
{
  unint64_t v2 = sub_100103F3C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AWDLActionFrame.ExtendedChannelSequence.encode(to:)(void *a1)
{
  uint64_t v2 = sub_100010BCC(&qword_10047F3A0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  long long v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_100103F3C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int NANBeacon.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t IEEE80211InformationElement.VeryHighThroughputOperation.init(from:)(uint64_t a1)
{
  return sub_100010754(a1);
}

Swift::Int sub_1000F1AE4()
{
  return Hasher._finalize()();
}

uint64_t AWDLActionFrame.PreferredChannels.PreferredChannel.txPower.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 6)  = result;
  return result;
}

void AWDLActionFrame.PreferredChannels.PreferredChannel.hash(into:)(int a1, unint64_t a2)
{
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(0x801004u >> ((a2 >> 29) & 0xF8));
  switch(BYTE5(a2))
  {
    case 2:
      Swift::UInt v3 = 0;
      goto LABEL_8;
    case 3:
      Swift::UInt v3 = 1;
      goto LABEL_8;
    case 4:
      Swift::UInt v3 = 3;
      goto LABEL_8;
    case 5:
      Swift::UInt v3 = 4;
      goto LABEL_8;
    case 6:
      Swift::UInt v3 = 5;
LABEL_8:
      Hasher._combine(_:)(v3);
      break;
    default:
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(BYTE5(a2) & 1);
      break;
  }
  Hasher._combine(_:)(BYTE6(a2));
}

BOOL static AWDLActionFrame.PreferredChannels.PreferredChannel.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1000FDAB4(a1 & 0xFFFFFFFFFFFFFFLL, a2 & 0xFFFFFFFFFFFFFFLL);
}

Swift::Int AWDLActionFrame.PreferredChannels.PreferredChannel.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  AWDLActionFrame.PreferredChannels.PreferredChannel.hash(into:)((int)&v3, a1 & 0xFFFFFFFFFFFFFFLL);
  return Hasher._finalize()();
}

Swift::Int sub_1000F1C40()
{
  uint64_t v1 = *(unsigned int *)v0;
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  Hasher.init(_seed:)();
  AWDLActionFrame.PreferredChannels.PreferredChannel.hash(into:)((int)&v6, v1 | (v2 << 32) | (v3 << 40) | (v4 << 48));
  return Hasher._finalize()();
}

void sub_1000F1CA4(int a1)
{
  AWDLActionFrame.PreferredChannels.PreferredChannel.hash(into:)(a1, *(unsigned int *)v1 | ((unint64_t)v1[4] << 32) | ((unint64_t)v1[5] << 40) | ((unint64_t)v1[6] << 48));
}

Swift::Int sub_1000F1CC4()
{
  uint64_t v1 = *(unsigned int *)v0;
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  Hasher.init(_seed:)();
  AWDLActionFrame.PreferredChannels.PreferredChannel.hash(into:)((int)&v6, v1 | (v2 << 32) | (v3 << 40) | (v4 << 48));
  return Hasher._finalize()();
}

BOOL sub_1000F1D24(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1000FDAB4(*(unsigned int *)a1 | ((unint64_t)a1[4] << 32) | ((unint64_t)a1[5] << 40) | ((unint64_t)a1[6] << 48), *(unsigned int *)a2 | ((unint64_t)a2[4] << 32) | ((unint64_t)a2[5] << 40) | ((unint64_t)a2[6] << 48));
}

void AWDLActionFrame.PreferredChannels.hash(into:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(0x801004u >> ((a2 >> 29) & 0xF8));
  switch(BYTE5(a2))
  {
    case 2:
      Swift::UInt v6 = 0;
      goto LABEL_8;
    case 3:
      Swift::UInt v6 = 1;
      goto LABEL_8;
    case 4:
      Swift::UInt v6 = 3;
      goto LABEL_8;
    case 5:
      Swift::UInt v6 = 4;
      goto LABEL_8;
    case 6:
      Swift::UInt v6 = 5;
LABEL_8:
      Hasher._combine(_:)(v6);
      break;
    default:
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(BYTE5(a2) & 1);
      break;
  }

  sub_10009EF14(a1, a3);
}

uint64_t static AWDLActionFrame.PreferredChannels.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000FDBB0(a1 & 0xFFFFFFFFFFFFLL, a2, a3 & 0xFFFFFFFFFFFFLL, a4);
}

Swift::Int AWDLActionFrame.PreferredChannels.hashValue.getter(unint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(0x801004u >> ((a1 >> 29) & 0xF8));
  switch(BYTE5(a1))
  {
    case 2:
      Swift::UInt v4 = 0;
      goto LABEL_8;
    case 3:
      Swift::UInt v4 = 1;
      goto LABEL_8;
    case 4:
      Swift::UInt v4 = 3;
      goto LABEL_8;
    case 5:
      Swift::UInt v4 = 4;
      goto LABEL_8;
    case 6:
      Swift::UInt v4 = 5;
LABEL_8:
      Hasher._combine(_:)(v4);
      break;
    default:
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(BYTE5(a1) & 1);
      break;
  }
  sub_10009EF14((uint64_t)v6, a2);
  return Hasher._finalize()();
}

uint64_t sub_1000F1F6C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100102028(a1);
  if (!v2)
  {
    *(_DWORD *)a2  = result;
    *(unsigned char *)(a2 + 4)  = BYTE4(result);
    *(unsigned char *)(a2 + 5)  = BYTE5(result);
    *(void *)(a2 + 8)  = v5;
  }
  return result;
}

uint64_t AWDLActionFrame.PreferredChannels.init(from:)(void *a1)
{
  return sub_100102028(a1) & 0xFFFFFFFFFFFFLL;
}

uint64_t sub_1000F1FD4(void *a1)
{
  return AWDLActionFrame.PreferredChannels.encode(to:)(a1, *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v1 + 5) << 40), *((void *)v1 + 1));
}

uint64_t AWDLActionFrame.PreferredChannels.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  sub_100039448((uint64_t)v12, v13);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  if (!v3)
  {
    if ((a2 & 0xFFFFFF00) != 0) {
      goto LABEL_15;
    }
    sub_100039448((uint64_t)v12, v13);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    Channel.operatingClass.getter(a2 & 0xFFFFFFFFFFFFLL);
    sub_100039448((uint64_t)v12, v13);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    unint64_t v6 = *(void *)(a3 + 16);
    if (v6 >= 0x100) {
      goto LABEL_15;
    }
    sub_100039448((uint64_t)v12, v13);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    if (v6)
    {
      unsigned int v7 = *(_DWORD *)(a3 + 32);
      if (v7 <= 0xFF)
      {
        int v14 = *(unsigned __int8 *)(a3 + 38);
        uint64_t v8 = *(unsigned __int8 *)(a3 + 37);
        uint64_t v9 = *(unsigned __int8 *)(a3 + 36);
        swift_bridgeObjectRetain();
        unsigned int v10 = (unsigned __int8 *)(a3 + 46);
        while (1)
        {
          sub_100039448((uint64_t)v12, v13);
          dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
          Channel.operatingClass.getter((v8 << 40) | (v9 << 32) | v7);
          sub_100039448((uint64_t)v12, v13);
          dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
          sub_100039448((uint64_t)v12, v13);
          dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
          if (!--v6) {
            goto LABEL_16;
          }
          int v14 = *v10;
          uint64_t v8 = *(v10 - 1);
          uint64_t v9 = *(v10 - 2);
          unsigned int v7 = *(_DWORD *)(v10 - 6);
          v10 += 8;
          if (v7 > 0xFF) {
            goto LABEL_15;
          }
        }
      }
      swift_bridgeObjectRetain();
LABEL_15:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_16:
      swift_bridgeObjectRelease();
    }
  }
  return sub_100010754((uint64_t)v12);
}

Swift::Int sub_1000F22C4()
{
  return AWDLActionFrame.PreferredChannels.hashValue.getter(*v0 | ((unint64_t)*((unsigned __int8 *)v0 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v0 + 5) << 40), *((void *)v0 + 1));
}

void sub_1000F22E0(uint64_t a1)
{
  AWDLActionFrame.PreferredChannels.hash(into:)(a1, *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v1 + 5) << 40), *((void *)v1 + 1));
}

Swift::Int sub_1000F22FC()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  char v2 = *(unsigned char *)(v0 + 4);
  int v3 = *(unsigned __int8 *)(v0 + 5);
  uint64_t v4 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(0x801004u >> (8 * v2));
  switch(v3)
  {
    case 2:
      Swift::UInt v5 = 0;
      goto LABEL_8;
    case 3:
      Swift::UInt v5 = 1;
      goto LABEL_8;
    case 4:
      Swift::UInt v5 = 3;
      goto LABEL_8;
    case 5:
      Swift::UInt v5 = 4;
      goto LABEL_8;
    case 6:
      Swift::UInt v5 = 5;
LABEL_8:
      Hasher._combine(_:)(v5);
      break;
    default:
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(v3 & 1);
      break;
  }
  sub_10009EF14((uint64_t)v7, v4);
  return Hasher._finalize()();
}

uint64_t sub_1000F241C(unsigned int *a1, unsigned int *a2)
{
  return sub_1000FDBB0(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 5) << 40), *((void *)a1 + 1), *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 40), *((void *)a2 + 1));
}

CoreP2P::AWDLActionFrame::ProMode::Command_optional __swiftcall AWDLActionFrame.ProMode.Command.init(rawValue:)(Swift::UInt8 rawValue)
{
  if ((rawValue & 0xFC) != 0) {
    return (CoreP2P::AWDLActionFrame::ProMode::Command_optional)3;
  }
  else {
    return (CoreP2P::AWDLActionFrame::ProMode::Command_optional)(0x2010003u >> (8 * rawValue));
  }
}

uint64_t IEEE80211InformationElement.AuthenticationKeyManagementSuite.rawValue.getter(int a1)
{
  return (a1 + 1);
}

unsigned __int8 *sub_1000F2480@<X0>(unsigned __int8 *result@<X0>, char *a2@<X8>)
{
  unsigned int v2 = *result;
  if (v2 <= 3) {
    char v3 = 0x2010003u >> (8 * v2);
  }
  else {
    char v3 = 3;
  }
  *a2  = v3;
  return result;
}

void sub_1000F24A8(unsigned char *a1@<X8>)
{
  *a1  = *v1 + 1;
}

uint64_t sub_1000F24B8()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000F2518()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int sub_1000F2568()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

void sub_1000F25B0()
{
  Hasher._combine(_:)(*v0 + 1);
}

Swift::Int sub_1000F25E0()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

void *AWDLActionFrame.ProMode.Flags.running.unsafeMutableAddressor()
{
  return &static AWDLActionFrame.ProMode.Flags.running;
}

void *AWDLActionFrame.ProMode.Flags.entering.unsafeMutableAddressor()
{
  return &static AWDLActionFrame.ProMode.Flags.entering;
}

void *AWDLActionFrame.ProMode.Flags.exiting.unsafeMutableAddressor()
{
  return &static AWDLActionFrame.ProMode.Flags.exiting;
}

void *AWDLActionFrame.ProMode.Flags.waitingForResponse.unsafeMutableAddressor()
{
  return &static AWDLActionFrame.ProMode.Flags.waitingForResponse;
}

void *AWDLActionFrame.ProMode.Flags.waitingToEnter.unsafeMutableAddressor()
{
  return &static AWDLActionFrame.ProMode.Flags.waitingToEnter;
}

void *AWDLActionFrame.ProMode.Flags.sendingResponse.unsafeMutableAddressor()
{
  return &static AWDLActionFrame.ProMode.Flags.sendingResponse;
}

uint64_t sub_1000F2674()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000F26D4()
{
  return RawRepresentable<>.encode(to:)();
}

void sub_1000F2724(_DWORD *a1@<X8>)
{
  *a1  = 0;
}

uint64_t sub_1000F272C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  int v3 = sub_1001DB614(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2  = v3;
  return result;
}

unint64_t NANFollowUpTransferCompleteEvent.peerInstanceID.getter(unint64_t a1)
{
  return a1 >> 8;
}

void AWDLActionFrame.ProMode.hash(into:)(int a1, unint64_t a2, Swift::UInt32 a3)
{
  unint64_t v4 = a2 >> 8;
  unint64_t v5 = HIDWORD(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v4 + 1);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(a3);
}

BOOL static AWDLActionFrame.ProMode.__derived_struct_equals(_:_:)(uint64_t a1, int a2, uint64_t a3, int a4)
{
  BOOL v6 = BYTE1(a1) == BYTE1(a3) && HIDWORD(a1) == HIDWORD(a3) && a2 == a4;
  return a1 == a3 && v6;
}

uint64_t sub_1000F27F8()
{
  uint64_t result = 0x6E6F6973726576;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x646E616D6D6F63;
      break;
    case 2:
      uint64_t result = 0x737574617473;
      break;
    case 3:
      uint64_t result = 0x7367616C66;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000F287C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10010E068(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1000F28A4(uint64_t a1)
{
  unint64_t v2 = sub_100103F90();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000F28E0(uint64_t a1)
{
  unint64_t v2 = sub_100103F90();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AWDLActionFrame.ProMode.encode(to:)(void *a1, __int16 a2, int a3)
{
  char v5 = HIBYTE(a2);
  uint64_t v7 = sub_100010BCC(&qword_10047F3B0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  unsigned int v10 = &v12[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_100103F90();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v17 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v3)
  {
    char v16 = v5;
    char v15 = 1;
    sub_100103FE4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v14 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    int v13 = a3;
    v12[15]  = 3;
    sub_100104038();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int AWDLActionFrame.ProMode.hashValue.getter(unint64_t a1, Swift::UInt32 a2)
{
  Swift::UInt8 v3 = a1;
  unint64_t v4 = a1 >> 8;
  unint64_t v5 = HIDWORD(a1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4 + 1);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(a2);
  return Hasher._finalize()();
}

unint64_t AWDLActionFrame.ProMode.init(from:)(void *a1)
{
  return sub_1001021F0(a1) & 0xFFFFFFFF0000FFFFLL;
}

uint64_t sub_1000F2BB4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1001021F0(a1);
  if (!v2)
  {
    *(_WORD *)a2  = result;
    *(_DWORD *)(a2 + 4)  = HIDWORD(result);
    *(_DWORD *)(a2 + 8)  = v5;
  }
  return result;
}

uint64_t sub_1000F2BF0(void *a1)
{
  return AWDLActionFrame.ProMode.encode(to:)(a1, *(_WORD *)v1, *(_DWORD *)(v1 + 8));
}

Swift::Int sub_1000F2C14()
{
  char v1 = *(unsigned char *)(v0 + 1);
  Swift::UInt32 v2 = *(_DWORD *)(v0 + 4);
  Swift::UInt32 v3 = *(_DWORD *)(v0 + 8);
  Swift::UInt8 v4 = *(unsigned char *)v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v1 + 1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_1000F2C98()
{
  char v1 = *(unsigned char *)(v0 + 1);
  Swift::UInt32 v2 = *(_DWORD *)(v0 + 4);
  Swift::UInt32 v3 = *(_DWORD *)(v0 + 8);
  Hasher._combine(_:)(*(unsigned char *)v0);
  Hasher._combine(_:)(v1 + 1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
}

Swift::Int sub_1000F2CF4()
{
  char v1 = *(unsigned char *)(v0 + 1);
  Swift::UInt32 v2 = *(_DWORD *)(v0 + 4);
  Swift::UInt32 v3 = *(_DWORD *)(v0 + 8);
  Swift::UInt8 v4 = *(unsigned char *)v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v1 + 1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

BOOL sub_1000F2D74(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  return a1[1] == a2[1] && *((_DWORD *)a1 + 1) == *((_DWORD *)a2 + 1) && *((_DWORD *)a1 + 2) == *((_DWORD *)a2 + 2);
}

uint64_t sub_1000F2DB0()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000F2E10()
{
  return RawRepresentable<>.encode(to:)();
}

void AWDLActionFrame.AirDrop.hash(into:)(int a1, __int16 a2)
{
  char v2 = HIBYTE(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v2 & 1);
}

uint64_t static AWDLActionFrame.AirDrop.__derived_struct_equals(_:_:)(__int16 a1, __int16 a2)
{
  if (a1 == a2) {
    return ((a1 & 0x100) == 0) ^ ((unsigned __int16)(a2 & 0x100) >> 8);
  }
  else {
    return 0;
  }
}

uint64_t sub_1000F2EB4()
{
  if (*v0) {
    return 0x6574617473;
  }
  else {
    return 0x6E6F6973726576;
  }
}

uint64_t sub_1000F2EEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10010E214(a1, a2);
  *a3  = result;
  return result;
}

uint64_t sub_1000F2F14(uint64_t a1)
{
  unint64_t v2 = sub_10010408C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000F2F50(uint64_t a1)
{
  unint64_t v2 = sub_10010408C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AWDLActionFrame.AirDrop.encode(to:)(void *a1, __int16 a2)
{
  char v3 = HIBYTE(a2);
  uint64_t v5 = sub_100010BCC(&qword_10047F3D0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_10010408C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[15]  = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v10[14]  = v3 & 1;
    v10[13]  = 1;
    sub_1001040E0();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int AWDLActionFrame.AirDrop.hashValue.getter(__int16 a1)
{
  return Hasher._finalize()();
}

uint64_t AWDLActionFrame.AirDrop.init(from:)(void *a1)
{
  return sub_100102420(a1) & 0x1FF;
}

uint64_t sub_1000F3174@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100102420(a1);
  if (!v2)
  {
    *a2  = result;
    a2[1]  = BYTE1(result) & 1;
  }
  return result;
}

uint64_t sub_1000F31A8(void *a1)
{
  if (v1[1]) {
    __int16 v2 = 256;
  }
  else {
    __int16 v2 = 0;
  }
  return AWDLActionFrame.AirDrop.encode(to:)(a1, v2 | *v1);
}

Swift::Int sub_1000F31D8()
{
  Swift::UInt8 v1 = v0[1];
  Swift::UInt8 v2 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000F3238()
{
  Swift::UInt8 v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int sub_1000F3278()
{
  Swift::UInt8 v1 = v0[1];
  Swift::UInt8 v2 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_1000F32D4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return (*a1 == *a2) & (a2[1] ^ a1[1] ^ 1u);
}

uint64_t AWDLActionFrame.AWDLAttribute.AttributeType.rawValue.getter(char a1)
{
  return byte_1003BD760[a1];
}

BOOL sub_1000F3314(char *a1, char *a2)
{
  return byte_1003BD760[*a1] == byte_1003BD760[*a2];
}

Swift::Int sub_1000F3338()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(byte_1003BD760[v1]);
  return Hasher._finalize()();
}

void sub_1000F3388()
{
  Hasher._combine(_:)(byte_1003BD760[*v0]);
}

Swift::Int sub_1000F33C0()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(byte_1003BD760[v1]);
  return Hasher._finalize()();
}

uint64_t sub_1000F340C@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = _s7CoreP2P15AWDLActionFrameV13AWDLAttributeO13AttributeTypeO8rawValueAGSgs5UInt8V_tcfC_0(*a1);
  *a2  = result;
  return result;
}

void sub_1000F3438(unsigned char *a1@<X8>)
{
  *a1  = byte_1003BD760[*v1];
}

uint64_t sub_1000F3450()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000F34B0()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t AWDLActionFrame.AWDLAttribute.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v257 = a2;
  uint64_t v256 = type metadata accessor for AWDLActionFrame.AWDLAttribute(0);
  __chkstk_darwin();
  unint64_t v255 = (char *)&v234 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v241  = (char *)&v234 - v4;
  __chkstk_darwin();
  unint64_t v259 = (char *)&v234 - v5;
  __chkstk_darwin();
  uint64_t v258 = (char *)&v234 - v6;
  __chkstk_darwin();
  __int8 v254 = (char *)&v234 - v7;
  __chkstk_darwin();
  uint64_t v260 = (char *)&v234 - v8;
  __chkstk_darwin();
  uint64_t v253 = (char *)&v234 - v9;
  __chkstk_darwin();
  unint64_t v252 = (char *)&v234 - v10;
  __chkstk_darwin();
  uint64_t v251 = (char *)&v234 - v11;
  __chkstk_darwin();
  unint64_t v250 = (char *)&v234 - v12;
  __chkstk_darwin();
  __int8 v249 = (char *)&v234 - v13;
  __chkstk_darwin();
  unsigned __int32 v248 = (char *)&v234 - v14;
  __chkstk_darwin();
  uint64x2_t v247 = (char *)&v234 - v15;
  __chkstk_darwin();
  uint64_t v246 = (char *)&v234 - v16;
  __chkstk_darwin();
  uint64_t v245 = (char *)&v234 - v17;
  __chkstk_darwin();
  v242  = (uint64_t)&v234 - v18;
  __chkstk_darwin();
  unint64_t v244 = (char *)&v234 - v19;
  __chkstk_darwin();
  unint64_t v243 = (char *)&v234 - v20;
  __chkstk_darwin();
  v240  = (char *)&v234 - v21;
  __chkstk_darwin();
  unint64_t v23 = (char *)&v234 - v22;
  __chkstk_darwin();
  unsigned __int8 v25 = (char *)&v234 - v24;
  __chkstk_darwin();
  unsigned __int16 v27 = (char *)&v234 - v26;
  __chkstk_darwin();
  unint64_t v29 = (char *)&v234 - v28;
  sub_1000369C4(a1, a1[3]);
  uint64_t v30 = v276;
  dispatch thunk of Decoder.unkeyedContainer()();
  uint64_t v276 = v30;
  if (v30)
  {
    uint64_t v31 = (uint64_t)a1;
    return sub_100010754(v31);
  }
  unint64_t v235 = v27;
  uint64_t v236 = v25;
  unint64_t v237 = v23;
  uint64x2_t v238 = v29;
  uint64_t v32 = v260;
  uint64_t v239 = a1;
  sub_100010BCC(&qword_10047E2D8);
  sub_100039448((uint64_t)v267, v268);
  sub_10000F9CC(&qword_10047E2D0, &qword_10047E2D8);
  uint64_t v33 = v276;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v276 = v33;
  if (v33)
  {
LABEL_4:
    sub_100010754((uint64_t)v267);
    uint64_t v31 = (uint64_t)v239;
    return sub_100010754(v31);
  }
  uint64_t v34 = v262;
  unint64_t v35 = v263;
  char v36 = _s7CoreP2P15AWDLActionFrameV13AWDLAttributeO13AttributeTypeO8rawValueAGSgs5UInt8V_tcfC_0(v261);
  unint64_t v38 = v258;
  uint64_t v37 = (uint64_t)v259;
  switch(v36)
  {
    case 1:
      sub_100013D44(v34, v35);
      sub_100013D44(v34, v35);
      unint64_t v43 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v44 = type metadata accessor for BinaryDecoder();
      unint64_t v45 = (void *)swift_allocObject();
      v45[5]  = &_swiftEmptyDictionarySingleton;
      v45[2]  = v34;
      v45[3]  = v35;
      uint64_t v46 = 0;
      uint64_t v47 = v235;
      switch(v35 >> 62)
      {
        case 1uLL:
          uint64_t v46 = (int)v34;
          break;
        case 2uLL:
          uint64_t v46 = *(void *)(v34 + 16);
          break;
        default:
          break;
      }
      v45[4]  = v46;
      swift_beginAccess();
      v45[5]  = v43;
      swift_bridgeObjectRelease();
      uint64_t v264 = v44;
      uint64_t v265 = sub_100104154((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
      uint64_t v261 = (uint64_t)v45;
      uint64_t v133 = v276;
      unsigned int v134 = sub_100100664(&v261);
      uint64_t v31 = (uint64_t)v239;
      uint64_t v276 = v133;
      if (v133) {
        goto LABEL_127;
      }
      __int16 v136 = v134;
      uint64_t v137 = v135;
      unsigned int v138 = HIWORD(v134);
      sub_10000C970(v34, v35);
      sub_10000C970(v34, v35);
      *(_WORD *)uint64_t v47 = v136;
      *((_WORD *)v47 + 1)  = v138;
      *((void *)v47 + 1)  = v137;
      goto LABEL_96;
    case 2:
      sub_100013D44(v34, v35);
      sub_100013D44(v34, v35);
      unint64_t v48 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v49 = type metadata accessor for BinaryDecoder();
      uint64x2_t v50 = (void *)swift_allocObject();
      v50[5]  = &_swiftEmptyDictionarySingleton;
      v50[2]  = v34;
      v50[3]  = v35;
      uint64_t v51 = 0;
      switch(v35 >> 62)
      {
        case 1uLL:
          uint64_t v51 = (int)v34;
          break;
        case 2uLL:
          uint64_t v51 = *(void *)(v34 + 16);
          break;
        default:
          break;
      }
      v50[4]  = v51;
      swift_beginAccess();
      v50[5]  = v48;
      swift_bridgeObjectRelease();
      uint64_t v264 = v49;
      uint64_t v265 = sub_100104154((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
      uint64_t v261 = (uint64_t)v50;
      uint64_t v37 = (uint64_t)v236;
      uint64_t v139 = v276;
      AWDLActionFrame.ServiceResponse.init(from:)(&v261, (uint64_t)v236);
      uint64_t v31 = (uint64_t)v239;
      uint64_t v276 = v139;
      if (!v139) {
        goto LABEL_62;
      }
      goto LABEL_127;
    case 3:
      sub_100013D44(v34, v35);
      sub_100013D44(v34, v35);
      unint64_t v52 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v53 = type metadata accessor for BinaryDecoder();
      unint64_t v54 = (void *)swift_allocObject();
      v54[5]  = &_swiftEmptyDictionarySingleton;
      v54[2]  = v34;
      v54[3]  = v35;
      uint64_t v55 = 0;
      uint64_t v42 = v257;
      unint64_t v56 = v237;
      switch(v35 >> 62)
      {
        case 1uLL:
          uint64_t v55 = (int)v34;
          break;
        case 2uLL:
          uint64_t v55 = *(void *)(v34 + 16);
          break;
        default:
          break;
      }
      v54[4]  = v55;
      swift_beginAccess();
      v54[5]  = v52;
      swift_bridgeObjectRelease();
      uint64_t v264 = v53;
      uint64_t v265 = sub_100104154((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
      uint64_t v261 = (uint64_t)v54;
      uint64_t v140 = v276;
      sub_100100898(&v261, (uint64_t)v269);
      uint64_t v276 = v140;
      if (v140) {
        goto LABEL_112;
      }
      sub_10000C970(v34, v35);
      sub_10000C970(v34, v35);
      long long v141 = v269[1];
      *unint64_t v56 = v269[0];
      v56[1]  = v141;
      v56[2]  = v269[2];
      swift_storeEnumTagMultiPayload();
      uint64_t v41 = (uint64_t)v238;
      sub_10010419C((uint64_t)v56, (uint64_t)v238, type metadata accessor for AWDLActionFrame.AWDLAttribute);
      uint64_t v31 = (uint64_t)v239;
      goto LABEL_133;
    case 4:
      sub_100013D44(v34, v35);
      sub_100013D44(v34, v35);
      unint64_t v57 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v58 = type metadata accessor for BinaryDecoder();
      unint64_t v59 = (void *)swift_allocObject();
      v59[5]  = &_swiftEmptyDictionarySingleton;
      v59[2]  = v34;
      v59[3]  = v35;
      uint64_t v60 = 0;
      switch(v35 >> 62)
      {
        case 1uLL:
          uint64_t v60 = (int)v34;
          break;
        case 2uLL:
          uint64_t v60 = *(void *)(v34 + 16);
          break;
        default:
          break;
      }
      v59[4]  = v60;
      swift_beginAccess();
      v59[5]  = v57;
      swift_bridgeObjectRelease();
      uint64_t v264 = v58;
      uint64_t v265 = sub_100104154((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
      uint64_t v261 = (uint64_t)v59;
      uint64_t v142 = v276;
      unint64_t v143 = sub_100100E00(&v261);
      LODWORD(v260)  = v146;
      uint64_t v31 = (uint64_t)v239;
      uint64_t v276 = v142;
      if (v142) {
        goto LABEL_127;
      }
      char v147 = v143;
      char v148 = v144;
      char v149 = v145;
      __int8 v254 = (char *)(v144 >> 16);
      unint64_t v255 = (char *)(v144 >> 24);
      unint64_t v252 = (char *)HIBYTE(v143);
      uint64_t v253 = (char *)(v144 >> 8);
      unint64_t v150 = HIWORD(v143);
      uint64_t v251 = (char *)(v143 >> 40);
      unint64_t v151 = HIDWORD(v143);
      unint64_t v152 = v143 >> 16;
      uint64_t v258 = (char *)HIDWORD(v145);
      unint64_t v259 = (char *)HIDWORD(v144);
      sub_10000C970(v34, v35);
      sub_10000C970(v34, v35);
      uint64_t v153 = v240;
      unsigned char *v240 = v147;
      *((_WORD *)v153 + 1)  = v152;
      v153[4]  = v151;
      v153[5]  = (_BYTE)v251;
      v153[6]  = v150;
      uint64_t v31 = (uint64_t)v239;
      v153[7]  = (_BYTE)v252;
      v153[8]  = v148;
      v153[9]  = (_BYTE)v253;
      v153[10]  = (_BYTE)v254;
      v153[11]  = (_BYTE)v255;
      *((_DWORD *)v153 + 3)  = v259;
      v153[16]  = v149 & 1;
      *((_DWORD *)v153 + 5)  = v258;
      v153[24]  = v260 & 1;
      goto LABEL_124;
    case 5:
      sub_100013D44(v34, v35);
      sub_100013D44(v34, v35);
      unint64_t v61 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v62 = type metadata accessor for BinaryDecoder();
      int8x16_t v63 = (void *)swift_allocObject();
      v63[5]  = &_swiftEmptyDictionarySingleton;
      v63[2]  = v34;
      v63[3]  = v35;
      uint64_t v64 = 0;
      int16x8_t v65 = v243;
      switch(v35 >> 62)
      {
        case 1uLL:
          uint64_t v64 = (int)v34;
          break;
        case 2uLL:
          uint64_t v64 = *(void *)(v34 + 16);
          break;
        default:
          break;
      }
      v63[4]  = v64;
      swift_beginAccess();
      v63[5]  = v61;
      swift_bridgeObjectRelease();
      uint64_t v264 = v62;
      uint64_t v265 = sub_100104154((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
      uint64_t v261 = (uint64_t)v63;
      uint64_t v154 = v276;
      unint64_t v155 = sub_1001034B4(&v261);
      uint64_t v31 = (uint64_t)v239;
      uint64_t v276 = v154;
      if (v154) {
        goto LABEL_127;
      }
      char v159 = v155;
      int v160 = v156;
      uint64_t v161 = v157;
      uint64_t v162 = v158;
      uint64_t v260 = (char *)HIDWORD(v155);
      unint64_t v163 = v155 >> 16;
      sub_10000C970(v34, v35);
      sub_10000C970(v34, v35);
      *int16x8_t v65 = v159;
      *((_WORD *)v65 + 1)  = v163;
      uint64_t v31 = (uint64_t)v239;
      *((_WORD *)v65 + 2)  = (_WORD)v260;
      *((_DWORD *)v65 + 2)  = v160;
      *((void *)v65 + 2)  = v161;
      *((void *)v65 + 3)  = v162;
      goto LABEL_109;
    case 6:
      sub_100013D44(v34, v35);
      sub_100013D44(v34, v35);
      unint64_t v66 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v67 = type metadata accessor for BinaryDecoder();
      unint64_t v68 = (void *)swift_allocObject();
      v68[5]  = &_swiftEmptyDictionarySingleton;
      v68[2]  = v34;
      v68[3]  = v35;
      uint64_t v69 = 0;
      int16x8_t v65 = v244;
      switch(v35 >> 62)
      {
        case 1uLL:
          uint64_t v69 = (int)v34;
          break;
        case 2uLL:
          uint64_t v69 = *(void *)(v34 + 16);
          break;
        default:
          break;
      }
      v68[4]  = v69;
      swift_beginAccess();
      v68[5]  = v66;
      swift_bridgeObjectRelease();
      uint64_t v264 = v67;
      uint64_t v265 = sub_100104154((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
      uint64_t v261 = (uint64_t)v68;
      uint64_t v164 = v276;
      unint64_t v165 = sub_1001D6D74(&v261);
      uint64_t v31 = (uint64_t)v239;
      uint64_t v276 = v164;
      if (v164) {
        goto LABEL_127;
      }
      __int16 v168 = v165;
      uint64_t v169 = v166;
      uint64_t v170 = v167;
      uint64_t v260 = (char *)HIDWORD(v165);
      uint64_t v171 = (uint64_t)v239;
      uint64_t v172 = v34;
      unint64_t v173 = v165 >> 16;
      sub_10000C970(v172, v35);
      uint64_t v174 = v172;
      uint64_t v31 = v171;
      sub_10000C970(v174, v35);
      *(_WORD *)int16x8_t v65 = v168;
      *((_WORD *)v65 + 1)  = v173;
      v65[4]  = (char)v260;
      *((void *)v65 + 1)  = v169;
      *((void *)v65 + 2)  = v170;
      goto LABEL_109;
    case 7:
      sub_100013D44(v34, v35);
      sub_100013D44(v34, v35);
      unint64_t v70 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v71 = type metadata accessor for BinaryDecoder();
      unint64_t v72 = (void *)swift_allocObject();
      v72[5]  = &_swiftEmptyDictionarySingleton;
      v72[2]  = v34;
      v72[3]  = v35;
      uint64_t v73 = 0;
      switch(v35 >> 62)
      {
        case 1uLL:
          uint64_t v73 = (int)v34;
          break;
        case 2uLL:
          uint64_t v73 = *(void *)(v34 + 16);
          break;
        default:
          break;
      }
      v72[4]  = v73;
      swift_beginAccess();
      v72[5]  = v70;
      swift_bridgeObjectRelease();
      uint64_t v264 = v71;
      uint64_t v265 = sub_100104154((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
      uint64_t v261 = (uint64_t)v72;
      uint64_t v37 = v242;
      uint64_t v175 = v276;
      AWDLActionFrame.DataPathState.init(from:)(&v261, v242);
      uint64_t v31 = (uint64_t)v239;
      uint64_t v276 = v175;
      if (v175) {
        goto LABEL_127;
      }
LABEL_62:
      sub_10000C970(v34, v35);
      sub_10000C970(v34, v35);
      goto LABEL_120;
    case 8:
      sub_100013D44(v34, v35);
      sub_100013D44(v34, v35);
      unint64_t v74 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v75 = type metadata accessor for BinaryDecoder();
      uint64_t v76 = (void *)swift_allocObject();
      v76[5]  = &_swiftEmptyDictionarySingleton;
      v76[2]  = v34;
      v76[3]  = v35;
      uint64_t v77 = 0;
      switch(v35 >> 62)
      {
        case 1uLL:
          uint64_t v77 = (int)v34;
          break;
        case 2uLL:
          uint64_t v77 = *(void *)(v34 + 16);
          break;
        default:
          break;
      }
      v76[4]  = v77;
      swift_beginAccess();
      v76[5]  = v74;
      swift_bridgeObjectRelease();
      uint64_t v264 = v75;
      uint64_t v265 = sub_100104154((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
      uint64_t v261 = (uint64_t)v76;
      uint64_t v176 = v276;
      char v177 = sub_1001032A4(&v261);
      uint64_t v31 = (uint64_t)v239;
      uint64_t v276 = v176;
      uint64_t v47 = v245;
      if (v176) {
        goto LABEL_127;
      }
      char v180 = v177;
      uint64_t v181 = v178;
      uint64_t v182 = v179;
      sub_10000C970(v34, v35);
      sub_10000C970(v34, v35);
      *uint64_t v47 = v180;
      *((void *)v47 + 1)  = v181;
      *((void *)v47 + 2)  = v182;
      goto LABEL_96;
    case 9:
      sub_100013D44(v34, v35);
      sub_100013D44(v34, v35);
      unint64_t v78 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v79 = type metadata accessor for BinaryDecoder();
      unint64_t v80 = (void *)swift_allocObject();
      v80[5]  = &_swiftEmptyDictionarySingleton;
      v80[2]  = v34;
      v80[3]  = v35;
      uint64_t v81 = 0;
      switch(v35 >> 62)
      {
        case 1uLL:
          uint64_t v81 = (int)v34;
          break;
        case 2uLL:
          uint64_t v81 = *(void *)(v34 + 16);
          break;
        default:
          break;
      }
      v80[4]  = v81;
      swift_beginAccess();
      v80[5]  = v78;
      swift_bridgeObjectRelease();
      uint64_t v264 = v79;
      uint64_t v265 = sub_100104154((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
      uint64_t v261 = (uint64_t)v80;
      uint64_t v183 = v276;
      sub_1001D85B0(&v261, (uint64_t)v270);
      uint64_t v31 = (uint64_t)v239;
      uint64_t v276 = v183;
      uint64_t v37 = (uint64_t)v246;
      if (v183) {
        goto LABEL_127;
      }
      sub_10000C970(v34, v35);
      sub_10000C970(v34, v35);
      sub_1000A66D8((uint64_t)v270, v37);
      goto LABEL_120;
    case 10:
      sub_100013D44(v34, v35);
      sub_100013D44(v34, v35);
      unint64_t v82 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v83 = type metadata accessor for BinaryDecoder();
      unint64_t v84 = (void *)swift_allocObject();
      v84[5]  = &_swiftEmptyDictionarySingleton;
      v84[2]  = v34;
      v84[3]  = v35;
      uint64_t v85 = 0;
      switch(v35 >> 62)
      {
        case 1uLL:
          uint64_t v85 = (int)v34;
          break;
        case 2uLL:
          uint64_t v85 = *(void *)(v34 + 16);
          break;
        default:
          break;
      }
      v84[4]  = v85;
      swift_beginAccess();
      v84[5]  = v82;
      swift_bridgeObjectRelease();
      uint64_t v264 = v83;
      uint64_t v265 = sub_100104154((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
      uint64_t v261 = (uint64_t)v84;
      uint64_t v184 = v276;
      uint64_t v185 = sub_100102EF4(&v261);
      uint64_t v31 = (uint64_t)v239;
      uint64_t v276 = v184;
      long long v186 = (unsigned __int8 *)v247;
      if (!v184) {
        goto LABEL_86;
      }
      goto LABEL_127;
    case 11:
      sub_100013D44(v34, v35);
      sub_100013D44(v34, v35);
      unint64_t v86 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v87 = type metadata accessor for BinaryDecoder();
      unint64_t v88 = (void *)swift_allocObject();
      v88[5]  = &_swiftEmptyDictionarySingleton;
      v88[2]  = v34;
      v88[3]  = v35;
      uint64_t v89 = 0;
      switch(v35 >> 62)
      {
        case 1uLL:
          uint64_t v89 = (int)v34;
          break;
        case 2uLL:
          uint64_t v89 = *(void *)(v34 + 16);
          break;
        default:
          break;
      }
      v88[4]  = v89;
      swift_beginAccess();
      v88[5]  = v86;
      swift_bridgeObjectRelease();
      uint64_t v264 = v87;
      uint64_t v265 = sub_100104154((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
      uint64_t v261 = (uint64_t)v88;
      uint64_t v188 = v276;
      uint64_t v185 = (uint64_t)sub_1001004BC(&v261);
      uint64_t v31 = (uint64_t)v239;
      uint64_t v276 = v188;
      long long v186 = (unsigned __int8 *)v248;
      if (v188) {
        goto LABEL_127;
      }
LABEL_86:
      uint64_t v187 = v185;
      sub_10000C970(v34, v35);
      sub_10000C970(v34, v35);
      *(void *)long long v186 = v187;
      goto LABEL_130;
    case 12:
      sub_100013D44(v34, v35);
      sub_100013D44(v34, v35);
      unint64_t v90 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v91 = type metadata accessor for BinaryDecoder();
      uint64_t v92 = (void *)swift_allocObject();
      v92[5]  = &_swiftEmptyDictionarySingleton;
      v92[2]  = v34;
      v92[3]  = v35;
      uint64_t v93 = 0;
      switch(v35 >> 62)
      {
        case 1uLL:
          uint64_t v93 = (int)v34;
          break;
        case 2uLL:
          uint64_t v93 = *(void *)(v34 + 16);
          break;
        default:
          break;
      }
      v92[4]  = v93;
      swift_beginAccess();
      v92[5]  = v90;
      swift_bridgeObjectRelease();
      uint64_t v264 = v91;
      uint64_t v265 = sub_100104154((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
      uint64_t v261 = (uint64_t)v92;
      uint64_t v189 = v276;
      __int16 v190 = sub_100101120(&v261);
      uint64_t v31 = (uint64_t)v239;
      uint64_t v276 = v189;
      long long v186 = (unsigned __int8 *)v249;
      if (v189) {
        goto LABEL_127;
      }
      __int16 v191 = v190;
      sub_10000C970(v34, v35);
      sub_10000C970(v34, v35);
      *(_WORD *)long long v186 = v191;
      goto LABEL_130;
    case 13:
      sub_100013D44(v34, v35);
      sub_100013D44(v34, v35);
      unint64_t v94 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v95 = type metadata accessor for BinaryDecoder();
      uint64_t v96 = (void *)swift_allocObject();
      v96[5]  = &_swiftEmptyDictionarySingleton;
      v96[2]  = v34;
      v96[3]  = v35;
      uint64_t v97 = 0;
      switch(v35 >> 62)
      {
        case 1uLL:
          uint64_t v97 = (int)v34;
          break;
        case 2uLL:
          uint64_t v97 = *(void *)(v34 + 16);
          break;
        default:
          break;
      }
      v96[4]  = v97;
      swift_beginAccess();
      v96[5]  = v94;
      swift_bridgeObjectRelease();
      uint64_t v264 = v95;
      uint64_t v265 = sub_100104154((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
      uint64_t v261 = (uint64_t)v96;
      uint64_t v192 = v276;
      unsigned int v193 = sub_1001012D8(&v261);
      uint64_t v31 = (uint64_t)v239;
      uint64_t v276 = v192;
      uint64_t v47 = v250;
      if (v192) {
        goto LABEL_127;
      }
      char v195 = v193;
      uint64_t v196 = v194;
      unsigned int v197 = v193 >> 8;
      sub_10000C970(v34, v35);
      sub_10000C970(v34, v35);
      *uint64_t v47 = v195;
      v47[1]  = v197;
      *((void *)v47 + 1)  = v196;
LABEL_96:
      swift_storeEnumTagMultiPayload();
      uint64_t v198 = (uint64_t)v47;
      goto LABEL_131;
    case 14:
      sub_100013D44(v34, v35);
      sub_100013D44(v34, v35);
      unint64_t v98 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v99 = type metadata accessor for BinaryDecoder();
      unint64_t v100 = (void *)swift_allocObject();
      v100[5]  = &_swiftEmptyDictionarySingleton;
      v100[2]  = v34;
      v100[3]  = v35;
      uint64_t v101 = 0;
      switch(v35 >> 62)
      {
        case 1uLL:
          uint64_t v101 = (int)v34;
          break;
        case 2uLL:
          uint64_t v101 = *(void *)(v34 + 16);
          break;
        default:
          break;
      }
      v100[4]  = v101;
      swift_beginAccess();
      v100[5]  = v98;
      swift_bridgeObjectRelease();
      uint64_t v264 = v99;
      uint64_t v265 = sub_100104154((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
      uint64_t v261 = (uint64_t)v100;
      uint64_t v199 = v276;
      sub_1001014EC(&v261, (uint64_t)v271);
      uint64_t v31 = (uint64_t)v239;
      uint64_t v276 = v199;
      uint64_t v37 = (uint64_t)v251;
      if (v199) {
        goto LABEL_127;
      }
      sub_10000C970(v34, v35);
      sub_10000C970(v34, v35);
      long long v200 = v271[1];
      *(_OWORD *)uint64_t v37 = v271[0];
      *(_OWORD *)(v37 + 16)  = v200;
      *(void *)(v37 + 32)  = v272;
      goto LABEL_120;
    case 15:
      sub_100013D44(v34, v35);
      sub_100013D44(v34, v35);
      unint64_t v102 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v103 = type metadata accessor for BinaryDecoder();
      __int16 v104 = (void *)swift_allocObject();
      v104[5]  = &_swiftEmptyDictionarySingleton;
      v104[2]  = v34;
      v104[3]  = v35;
      uint64_t v105 = 0;
      switch(v35 >> 62)
      {
        case 1uLL:
          uint64_t v105 = (int)v34;
          break;
        case 2uLL:
          uint64_t v105 = *(void *)(v34 + 16);
          break;
        default:
          break;
      }
      v104[4]  = v105;
      swift_beginAccess();
      v104[5]  = v102;
      swift_bridgeObjectRelease();
      uint64_t v264 = v103;
      uint64_t v265 = sub_100104154((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
      uint64_t v261 = (uint64_t)v104;
      uint64_t v201 = v276;
      sub_10010192C(&v261, v273);
      uint64_t v276 = v201;
      uint64_t v202 = v252;
      if (v201) {
        goto LABEL_112;
      }
      sub_10000C970(v34, v35);
      sub_10000C970(v34, v35);
      long long v203 = v273[1];
      *uint64_t v202 = v273[0];
      v202[1]  = v203;
      v202[2]  = v273[2];
      goto LABEL_115;
    case 16:
      sub_100013D44(v34, v35);
      sub_100013D44(v34, v35);
      unint64_t v106 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v107 = type metadata accessor for BinaryDecoder();
      uint64_t v108 = (void *)swift_allocObject();
      v108[5]  = &_swiftEmptyDictionarySingleton;
      v108[2]  = v34;
      v108[3]  = v35;
      uint64_t v109 = 0;
      switch(v35 >> 62)
      {
        case 1uLL:
          uint64_t v109 = (int)v34;
          break;
        case 2uLL:
          uint64_t v109 = *(void *)(v34 + 16);
          break;
        default:
          break;
      }
      v108[4]  = v109;
      swift_beginAccess();
      v108[5]  = v106;
      swift_bridgeObjectRelease();
      uint64_t v264 = v107;
      uint64_t v265 = sub_100104154((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
      uint64_t v261 = (uint64_t)v108;
      uint64_t v204 = v276;
      unsigned __int8 v205 = sub_100101CF0(&v261);
      uint64_t v31 = (uint64_t)v239;
      uint64_t v276 = v204;
      long long v186 = (unsigned __int8 *)v253;
      if (v204) {
        goto LABEL_127;
      }
      unsigned __int8 v206 = v205;
      sub_10000C970(v34, v35);
      sub_10000C970(v34, v35);
      *long long v186 = v206;
      goto LABEL_130;
    case 17:
      sub_100013D44(v34, v35);
      sub_100013D44(v34, v35);
      unint64_t v110 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v111 = type metadata accessor for BinaryDecoder();
      uint64_t v112 = (void *)swift_allocObject();
      v112[5]  = &_swiftEmptyDictionarySingleton;
      v112[2]  = v34;
      v112[3]  = v35;
      uint64_t v113 = 0;
      int16x8_t v65 = v32;
      switch(v35 >> 62)
      {
        case 1uLL:
          uint64_t v113 = (int)v34;
          break;
        case 2uLL:
          uint64_t v113 = *(void *)(v34 + 16);
          break;
        default:
          break;
      }
      v112[4]  = v113;
      swift_beginAccess();
      v112[5]  = v110;
      swift_bridgeObjectRelease();
      uint64_t v264 = v111;
      uint64_t v265 = sub_100104154((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
      uint64_t v261 = (uint64_t)v112;
      uint64_t v207 = v276;
      unint64_t v208 = sub_100101E5C(&v261);
      uint64_t v31 = (uint64_t)v239;
      uint64_t v276 = v207;
      if (v207) {
        goto LABEL_127;
      }
      char v209 = v208;
      uint64_t v258 = (char *)(v208 >> 40);
      unint64_t v259 = (char *)HIWORD(v208);
      unint64_t v210 = HIDWORD(v208);
      unint64_t v211 = v208 >> 24;
      unint64_t v212 = v208 >> 16;
      unint64_t v213 = v208 >> 8;
      sub_10000C970(v34, v35);
      sub_10000C970(v34, v35);
      *int16x8_t v65 = v209;
      v65[1]  = v213;
      v65[2]  = v212;
      uint64_t v31 = (uint64_t)v239;
      v65[3]  = v211;
      v65[4]  = v210;
      v65[5]  = (char)v258;
      v65[6]  = (char)v259;
LABEL_109:
      swift_storeEnumTagMultiPayload();
      uint64_t v198 = (uint64_t)v65;
      goto LABEL_131;
    case 18:
      sub_100013D44(v34, v35);
      sub_100013D44(v34, v35);
      unint64_t v114 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v115 = type metadata accessor for BinaryDecoder();
      uint64_t v116 = (void *)swift_allocObject();
      v116[5]  = &_swiftEmptyDictionarySingleton;
      v116[2]  = v34;
      v116[3]  = v35;
      uint64_t v117 = 0;
      switch(v35 >> 62)
      {
        case 1uLL:
          uint64_t v117 = (int)v34;
          break;
        case 2uLL:
          uint64_t v117 = *(void *)(v34 + 16);
          break;
        default:
          break;
      }
      v116[4]  = v117;
      swift_beginAccess();
      v116[5]  = v114;
      swift_bridgeObjectRelease();
      uint64_t v264 = v115;
      uint64_t v265 = sub_100104154((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
      uint64_t v261 = (uint64_t)v116;
      uint64_t v214 = v276;
      sub_100102C14(&v261, (uint64_t)v274);
      uint64_t v276 = v214;
      uint64_t v202 = v254;
      if (!v214)
      {
        sub_10000C970(v34, v35);
        sub_10000C970(v34, v35);
        long long v215 = v274[1];
        *uint64_t v202 = v274[0];
        v202[1]  = v215;
        *((void *)v202 + 4)  = v275;
LABEL_115:
        swift_storeEnumTagMultiPayload();
        uint64_t v118 = (uint64_t)v202;
LABEL_116:
        uint64_t v41 = (uint64_t)v238;
        sub_10010419C(v118, (uint64_t)v238, type metadata accessor for AWDLActionFrame.AWDLAttribute);
        uint64_t v31 = (uint64_t)v239;
        goto LABEL_132;
      }
LABEL_112:
      sub_10000C970(v34, v35);
LABEL_113:
      sub_10000C970(v34, v35);
      goto LABEL_4;
    case 19:
      sub_100013D44(v34, v35);
      sub_100013D44(v34, v35);
      sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
      type metadata accessor for BinaryDecoder();
      *(void *)(swift_allocObject() + 40)  = &_swiftEmptyDictionarySingleton;
      swift_beginAccess();
      swift_bridgeObjectRelease();
      sub_10000C970(v34, v35);
      swift_bridgeObjectRelease();
      swift_setDeallocating();
      swift_deallocClassInstance();
      sub_10000C970(v34, v35);
      sub_10000C970(v34, v35);
      swift_storeEnumTagMultiPayload();
      uint64_t v118 = (uint64_t)v38;
      goto LABEL_116;
    case 20:
      sub_100013D44(v34, v35);
      sub_100013D44(v34, v35);
      unint64_t v119 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v120 = type metadata accessor for BinaryDecoder();
      long long v121 = (void *)swift_allocObject();
      v121[5]  = &_swiftEmptyDictionarySingleton;
      v121[2]  = v34;
      v121[3]  = v35;
      uint64_t v122 = 0;
      switch(v35 >> 62)
      {
        case 1uLL:
          uint64_t v122 = (int)v34;
          break;
        case 2uLL:
          uint64_t v122 = *(void *)(v34 + 16);
          break;
        default:
          break;
      }
      v121[4]  = v122;
      swift_beginAccess();
      v121[5]  = v119;
      swift_bridgeObjectRelease();
      uint64_t v264 = v120;
      uint64_t v265 = sub_100104154((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
      uint64_t v261 = (uint64_t)v121;
      uint64_t v216 = v276;
      unint64_t v217 = sub_100102028(&v261);
      uint64_t v31 = (uint64_t)v239;
      uint64_t v276 = v216;
      if (v216) {
        goto LABEL_127;
      }
      int v219 = v217;
      uint64_t v220 = v218;
      unint64_t v221 = v217 >> 40;
      unint64_t v222 = HIDWORD(v217);
      sub_10000C970(v34, v35);
      sub_10000C970(v34, v35);
      *(_DWORD *)uint64_t v37 = v219;
      *(unsigned char *)(v37 + 4)  = v222;
      *(unsigned char *)(v37 + 5)  = v221;
      *(void *)(v37 + 8)  = v220;
LABEL_120:
      swift_storeEnumTagMultiPayload();
      uint64_t v198 = v37;
      goto LABEL_131;
    case 21:
      sub_100013D44(v34, v35);
      sub_100013D44(v34, v35);
      unint64_t v123 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v124 = type metadata accessor for BinaryDecoder();
      uint64_t v125 = (void *)swift_allocObject();
      v125[5]  = &_swiftEmptyDictionarySingleton;
      v125[2]  = v34;
      v125[3]  = v35;
      uint64_t v126 = 0;
      switch(v35 >> 62)
      {
        case 1uLL:
          uint64_t v126 = (int)v34;
          break;
        case 2uLL:
          uint64_t v126 = *(void *)(v34 + 16);
          break;
        default:
          break;
      }
      v125[4]  = v126;
      swift_beginAccess();
      v125[5]  = v123;
      swift_bridgeObjectRelease();
      uint64_t v264 = v124;
      uint64_t v265 = sub_100104154((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
      uint64_t v261 = (uint64_t)v125;
      uint64_t v223 = v276;
      unint64_t v224 = sub_1001021F0(&v261);
      uint64_t v31 = (uint64_t)v239;
      uint64_t v276 = v223;
      if (v223) {
        goto LABEL_127;
      }
      char v226 = v224;
      int v227 = v225;
      unint64_t v228 = HIDWORD(v224);
      v229  = v224 >> 8;
      sub_10000C970(v34, v35);
      sub_10000C970(v34, v35);
      uint64_t v153 = v241;
      unsigned char *v241 = v226;
      v153[1]  = v229;
      *((_DWORD *)v153 + 1)  = v228;
      *((_DWORD *)v153 + 2)  = v227;
LABEL_124:
      swift_storeEnumTagMultiPayload();
      uint64_t v198 = (uint64_t)v153;
      goto LABEL_131;
    case 22:
      sub_100013D44(v34, v35);
      sub_100013D44(v34, v35);
      unint64_t v127 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v128 = type metadata accessor for BinaryDecoder();
      uint64_t v129 = (void *)swift_allocObject();
      v129[5]  = &_swiftEmptyDictionarySingleton;
      v129[2]  = v34;
      v129[3]  = v35;
      uint64_t v130 = 0;
      switch(v35 >> 62)
      {
        case 1uLL:
          uint64_t v130 = (int)v34;
          break;
        case 2uLL:
          uint64_t v130 = *(void *)(v34 + 16);
          break;
        default:
          break;
      }
      v129[4]  = v130;
      swift_beginAccess();
      v129[5]  = v127;
      swift_bridgeObjectRelease();
      uint64_t v264 = v128;
      uint64_t v265 = sub_100104154((unint64_t *)&qword_10047DC48, (void (*)(uint64_t))type metadata accessor for BinaryDecoder);
      uint64_t v261 = (uint64_t)v129;
      uint64_t v230 = v276;
      __int16 v231 = sub_100102420(&v261);
      uint64_t v31 = (uint64_t)v239;
      long long v186 = (unsigned __int8 *)v255;
      uint64_t v276 = v230;
      if (v230)
      {
LABEL_127:
        sub_10000C970(v34, v35);
        sub_10000C970(v34, v35);
        goto LABEL_128;
      }
      __int16 v232 = v231;
      sub_10000C970(v34, v35);
      sub_10000C970(v34, v35);
      *long long v186 = v232;
      v186[1]  = HIBYTE(v232) & 1;
LABEL_130:
      swift_storeEnumTagMultiPayload();
      uint64_t v198 = (uint64_t)v186;
LABEL_131:
      uint64_t v41 = (uint64_t)v238;
      sub_10010419C(v198, (uint64_t)v238, type metadata accessor for AWDLActionFrame.AWDLAttribute);
LABEL_132:
      uint64_t v42 = v257;
      goto LABEL_133;
    case 23:
      sub_10000F000();
      uint64_t v131 = swift_allocError();
      *(_OWORD *)uint64_t v132 = xmmword_1003B00B0;
      *(unsigned char *)(v132 + 16)  = 2;
      uint64_t v276 = v131;
      swift_willThrow();
      goto LABEL_113;
    default:
      sub_100039448((uint64_t)v267, v268);
      sub_10008B6F4();
      uint64_t v39 = v276;
      dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
      uint64_t v276 = v39;
      if (v39)
      {
        sub_10000C970(v34, v35);
        uint64_t v266 = v276;
        swift_errorRetain();
        sub_100010BCC((uint64_t *)&unk_1004843F0);
        char v40 = swift_dynamicCast();
        uint64_t v41 = (uint64_t)v238;
        uint64_t v31 = (uint64_t)v239;
        uint64_t v42 = v257;
        if (v40)
        {
          if (v263 == 2)
          {
            if ((v261 & 1) == 0)
            {
              swift_errorRelease();
              swift_errorRelease();
              uint64_t v276 = 0;
              goto LABEL_56;
            }
          }
          else
          {
            sub_100012AA4(v261, v262, v263);
          }
        }
        swift_errorRelease();
LABEL_128:
        sub_100010754((uint64_t)v267);
        return sub_100010754(v31);
      }
      sub_10000C970(v261, v262);
      sub_10000C970(v34, v35);
      uint64_t v41 = (uint64_t)v238;
      uint64_t v31 = (uint64_t)v239;
      uint64_t v42 = v257;
LABEL_56:
      swift_storeEnumTagMultiPayload();
LABEL_133:
      sub_100010754((uint64_t)v267);
      sub_10010419C(v41, v42, type metadata accessor for AWDLActionFrame.AWDLAttribute);
      return sub_100010754(v31);
  }
}

uint64_t AWDLActionFrame.AWDLAttribute.encode(to:)(void *a1)
{
  uint64_t v92 = a1;
  uint64_t v89 = sub_100010BCC(&qword_10047F3A0);
  uint64_t v87 = *(void *)(v89 - 8);
  __chkstk_darwin();
  uint64_t v85 = (char *)&v82 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = sub_100010BCC(&qword_10047F368);
  uint64_t v84 = *(void *)(v90 - 8);
  __chkstk_darwin();
  unint64_t v86 = (char *)&v82 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = sub_100010BCC(&qword_10047F2D8);
  uint64_t v83 = *(void *)(v88 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v82 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AWDLActionFrame.DataPathState(0);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AWDLActionFrame.ServiceResponse(0);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AWDLActionFrame.AWDLAttribute(0);
  __chkstk_darwin();
  uint64_t v11 = (unsigned __int8 *)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = sub_1000C742C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v13 = (ValueMetadata *)type metadata accessor for BinaryEncoder();
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16)  = xmmword_1003B2440;
  uint64_t v91 = v14 + 16;
  *(void *)(v14 + 32)  = v12;
  uint64_t v15 = v14;
  uint64_t v93 = v1;
  sub_1001037C8(v1, (uint64_t)v11, type metadata accessor for AWDLActionFrame.AWDLAttribute);
  EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
  uint64_t v17 = v109;
  switch(EnumCaseMultiPayload)
  {
    case 1:
      sub_10010419C((uint64_t)v11, (uint64_t)v9, type metadata accessor for AWDLActionFrame.ServiceResponse);
      uint64_t v97 = v13;
      unint64_t v98 = sub_100104154((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      v96[0]  = v15;
      swift_retain();
      AWDLActionFrame.ServiceResponse.encode(to:)(v96);
      if (v17)
      {
        sub_100010754((uint64_t)v96);
        uint64_t v34 = type metadata accessor for AWDLActionFrame.ServiceResponse;
        uint64_t v35 = (uint64_t)v9;
LABEL_21:
        sub_100103830(v35, v34);
        return swift_release();
      }
      sub_100010754((uint64_t)v96);
      sub_100103830((uint64_t)v9, type metadata accessor for AWDLActionFrame.ServiceResponse);
      goto LABEL_61;
    case 2:
      long long v41 = *((_OWORD *)v11 + 1);
      v99[0]  = *(_OWORD *)v11;
      v99[1]  = v41;
      v99[2]  = *((_OWORD *)v11 + 2);
      uint64_t v97 = v13;
      unint64_t v98 = sub_100104154((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      v96[0]  = v15;
      swift_retain();
      sub_1001030D4((uint64_t)v99);
      AWDLActionFrame.SynchronizationParameter.encode(to:)(v96);
      if (v17)
      {
        sub_100010754((uint64_t)v96);
        sub_100104258((uint64_t)v99);
        swift_release();
        return sub_100104258((uint64_t)v99);
      }
      sub_100010754((uint64_t)v96);
      sub_100104258((uint64_t)v99);
      sub_100104258((uint64_t)v99);
      goto LABEL_61;
    case 3:
      uint64_t v89 = *v11;
      uint64_t v88 = *((unsigned __int16 *)v11 + 1);
      uint64_t v87 = v11[4];
      unsigned __int8 v28 = v11[16];
      unsigned __int8 v29 = v11[24];
      uint64_t v90 = *((void *)v11 + 1);
      uint64_t v97 = v13;
      unint64_t v98 = sub_100104154((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      v96[0]  = v15;
      swift_retain();
      char v95 = v28;
      LOBYTE(v94)  = v29;
      uint64_t v30 = v109;
      AWDLActionFrame.DeprecatedElectionParameter.encode(to:)(v96);
      goto LABEL_39;
    case 4:
      uint64_t v48 = *(void *)v11;
      uint64_t v97 = &type metadata for BinaryEncoder.UnkeyedContainer;
      unint64_t v98 = sub_100088B84();
      v96[0]  = v15;
      swift_retain();
      swift_bridgeObjectRetain();
      sub_1000F8468((uint64_t)v96, 3u, v48);
      if (v17) {
        goto LABEL_46;
      }
      uint64_t v18 = v15;
      sub_100039448((uint64_t)v96, (uint64_t)v97);
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
      sub_100039448((uint64_t)v96, (uint64_t)v97);
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
      sub_100010754((uint64_t)v96);
      goto LABEL_60;
    case 5:
      uint64_t v90 = *v11;
      int v59 = *((_DWORD *)v11 + 2);
      uint64_t v39 = *((void *)v11 + 2);
      unint64_t v40 = *((void *)v11 + 3);
      uint64_t v97 = v13;
      unint64_t v98 = sub_100104154((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      v96[0]  = v15;
      swift_retain();
      sub_100013D44(v39, v40);
      AWDLActionFrame.ServiceParameter.encode(to:)(v96, v90, v59, v39, v40);
      if (v17) {
        goto LABEL_32;
      }
      sub_100010754((uint64_t)v96);
      sub_10000C970(v39, v40);
      sub_10000C970(v39, v40);
      goto LABEL_61;
    case 6:
      sub_10010419C((uint64_t)v11, (uint64_t)v7, type metadata accessor for AWDLActionFrame.DataPathState);
      uint64_t v97 = v13;
      unint64_t v98 = sub_100104154((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      v96[0]  = v15;
      swift_retain();
      AWDLActionFrame.DataPathState.encode(to:)(v96);
      if (v17)
      {
        sub_100010754((uint64_t)v96);
        uint64_t v34 = type metadata accessor for AWDLActionFrame.DataPathState;
        uint64_t v35 = (uint64_t)v7;
        goto LABEL_21;
      }
      sub_100010754((uint64_t)v96);
      sub_100103830((uint64_t)v7, type metadata accessor for AWDLActionFrame.DataPathState);
      goto LABEL_61;
    case 7:
      uint64_t v18 = v15;
      unint64_t v62 = *((void *)v11 + 1);
      unint64_t v61 = *((void *)v11 + 2);
      uint64_t v63 = *v11;
      uint64_t v97 = v13;
      unint64_t v98 = sub_100104154((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      v96[0]  = v18;
      swift_retain();
      swift_bridgeObjectRetain();
      AWDLActionFrame.Arpa.encode(to:)(v96, v63, v62, v61);
      if (v17)
      {
        sub_100010754((uint64_t)v96);
        goto LABEL_47;
      }
      sub_100010754((uint64_t)v96);
LABEL_60:
      swift_bridgeObjectRelease_n();
      uint64_t v15 = v18;
      goto LABEL_61;
    case 8:
      uint64_t v32 = *(void *)v11;
      v96[0]  = v15;
      swift_retain();
      swift_bridgeObjectRetain();
      sub_100010BCC(&qword_10047F410);
      sub_10000F9CC(&qword_10047F418, &qword_10047F410);
      KeyedEncodingContainer.init<A>(_:)();
      v96[0]  = v32;
      sub_100010BCC(&qword_10047F2E8);
      sub_10010E9F4(&qword_10047F2F0, (void (*)(void))sub_10003F27C);
      uint64_t v33 = v88;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      if (v17)
      {
        (*(void (**)(char *, uint64_t))(v83 + 8))(v5, v33);
LABEL_47:
        swift_release();
        return swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v83 + 8))(v5, v33);
      break;
    case 9:
      __int16 v64 = *(_WORD *)v11;
      uint64_t v97 = v13;
      unint64_t v98 = sub_100104154((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      v96[0]  = v15;
      swift_retain();
      uint64_t v30 = v17;
      AWDLActionFrame.Version.encode(to:)(v96, v64);
      goto LABEL_39;
    case 10:
      uint64_t v25 = *((void *)v11 + 1);
      uint64_t v26 = *(unsigned __int16 *)v11;
      uint64_t v97 = v13;
      unint64_t v98 = sub_100104154((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      v96[0]  = v15;
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v27 = v17;
      AWDLActionFrame.PeerMACAddressListBloomFilter.encode(to:)(v96, v26, v25);
      goto LABEL_45;
    case 11:
      long long v31 = *((_OWORD *)v11 + 1);
      *(_OWORD *)&v100[56]  = *(_OWORD *)v11;
      long long v101 = v31;
      uint64_t v102 = *((void *)v11 + 4);
      uint64_t v97 = v13;
      unint64_t v98 = sub_100104154((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      v96[0]  = v15;
      swift_retain();
      uint64_t v30 = v17;
      AWDLActionFrame.NANSynchronization.encode(to:)(v96);
      goto LABEL_39;
    case 12:
      long long v60 = *((_OWORD *)v11 + 1);
      long long v103 = *(_OWORD *)v11;
      long long v104 = v60;
      long long v105 = *((_OWORD *)v11 + 2);
      uint64_t v97 = v13;
      unint64_t v98 = sub_100104154((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      v96[0]  = v15;
      swift_retain();
      uint64_t v30 = v17;
      AWDLActionFrame.ElectionParameter.encode(to:)(v96);
      goto LABEL_39;
    case 13:
      sub_1000A66D8((uint64_t)v11, (uint64_t)v100);
      uint64_t v97 = v13;
      unint64_t v98 = sub_100104154((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      v96[0]  = v15;
      swift_retain();
      sub_1000A6734((uint64_t)v100, (void (*)(void, void, void, void, void, void, void))sub_10006E998);
      IEEE80211InformationElement.encode(to:)(v96);
      if (v17)
      {
        sub_100010754((uint64_t)v96);
        sub_1000A6734((uint64_t)v100, (void (*)(void, void, void, void, void, void, void))sub_10006E108);
        swift_release();
        return sub_1000A6734((uint64_t)v100, (void (*)(void, void, void, void, void, void, void))sub_10006E108);
      }
      sub_100010754((uint64_t)v96);
      sub_1000A6734((uint64_t)v100, (void (*)(void, void, void, void, void, void, void))sub_10006E108);
      sub_1000A6734((uint64_t)v100, (void (*)(void, void, void, void, void, void, void))sub_10006E108);
      goto LABEL_61;
    case 14:
      uint64_t v36 = v15;
      uint64_t v37 = *(unsigned int *)v11;
      uint64_t v38 = v11[4];
      uint64_t v39 = *((void *)v11 + 1);
      unint64_t v40 = *((void *)v11 + 2);
      uint64_t v97 = v13;
      unint64_t v98 = sub_100104154((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      v96[0]  = v36;
      swift_retain();
      sub_100013D44(v39, v40);
      IEEE80211InformationElement.HighThroughputCapability.encode(to:)(v96, v37 | (v38 << 32), v39, v40);
      if (v17)
      {
LABEL_32:
        sub_100010754((uint64_t)v96);
        sub_10000C970(v39, v40);
        swift_release();
        return sub_10000C970(v39, v40);
      }
      sub_100010754((uint64_t)v96);
      sub_10000C970(v39, v40);
      sub_10000C970(v39, v40);
      uint64_t v15 = v36;
      goto LABEL_61;
    case 15:
      char v21 = *v11;
      v96[0]  = v15;
      swift_retain();
      sub_100010BCC(&qword_10047F400);
      sub_10000F9CC(&qword_10047F408, &qword_10047F400);
      uint64_t v22 = v86;
      KeyedEncodingContainer.init<A>(_:)();
      LOBYTE(v96[0])  = v21;
      sub_100103D84();
      uint64_t v23 = v90;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      if (v17)
      {
        (*(void (**)(char *, uint64_t))(v84 + 8))(v22, v23);
        return swift_release();
      }
      (*(void (**)(char *, uint64_t))(v84 + 8))(v22, v23);
      goto LABEL_61;
    case 16:
      uint64_t v42 = v11[2];
      uint64_t v43 = v15;
      uint64_t v44 = *(unsigned int *)(v11 + 3);
      uint64_t v45 = *(unsigned __int16 *)v11;
      uint64_t v97 = v13;
      unint64_t v98 = sub_100104154((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      v96[0]  = v43;
      uint64_t v46 = v45 | (v42 << 16) | (v44 << 24);
      uint64_t v15 = v43;
      swift_retain();
      uint64_t v47 = v46;
      uint64_t v30 = v17;
      AWDLActionFrame.Ranging.encode(to:)(v96, v47);
      goto LABEL_39;
    case 17:
      long long v65 = *((_OWORD *)v11 + 1);
      long long v106 = *(_OWORD *)v11;
      long long v107 = v65;
      uint64_t v108 = *((void *)v11 + 4);
      uint64_t v97 = v13;
      unint64_t v98 = sub_100104154((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      v96[0]  = v15;
      swift_retain();
      uint64_t v30 = v17;
      AWDLActionFrame.RealtimeGroup.encode(to:)(v96);
      goto LABEL_39;
    case 18:
      uint64_t v67 = v15;
      uint64_t v68 = *(unsigned int *)v11;
      uint64_t v69 = v11[4];
      uint64_t v70 = v11[5];
      uint64_t v71 = *((void *)v11 + 1);
      uint64_t v97 = v13;
      unint64_t v98 = sub_100104154((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      v96[0]  = v67;
      uint64_t v72 = v68 | (v69 << 32);
      uint64_t v15 = v67;
      uint64_t v73 = v72 | (v70 << 40);
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v74 = v73;
      uint64_t v27 = v17;
      AWDLActionFrame.PreferredChannels.encode(to:)(v96, v74, v71);
LABEL_45:
      uint64_t v17 = v27;
      if (v27)
      {
LABEL_46:
        sub_100010754((uint64_t)v96);
        goto LABEL_47;
      }
      sub_100010754((uint64_t)v96);
      break;
    case 19:
      uint64_t v49 = v15;
      __int16 v50 = *(_WORD *)v11;
      int v51 = *((_DWORD *)v11 + 2);
      uint64_t v97 = v13;
      unint64_t v98 = sub_100104154((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      v96[0]  = v49;
      __int16 v52 = v50;
      uint64_t v15 = v49;
      swift_retain();
      __int16 v53 = v52;
      uint64_t v30 = v17;
      AWDLActionFrame.ProMode.encode(to:)(v96, v53, v51);
      goto LABEL_39;
    case 20:
      __int16 v54 = *v11;
      int v55 = v11[1];
      uint64_t v97 = v13;
      unint64_t v98 = sub_100104154((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      v96[0]  = v15;
      if (v55) {
        __int16 v56 = 256;
      }
      else {
        __int16 v56 = 0;
      }
      __int16 v57 = v56 | v54;
      swift_retain();
      __int16 v58 = v57;
      uint64_t v30 = v17;
      AWDLActionFrame.AirDrop.encode(to:)(v96, v58);
LABEL_39:
      uint64_t v17 = v30;
      if (v30)
      {
        sub_100010754((uint64_t)v96);
        return swift_release();
      }
      sub_100010754((uint64_t)v96);
      goto LABEL_61;
    case 21:
      goto LABEL_61;
    case 22:
      v96[0]  = v15;
      swift_retain();
      sub_100010BCC(&qword_10047F3F0);
      sub_10000F9CC(&qword_10047F3F8, &qword_10047F3F0);
      unint64_t v66 = v85;
      KeyedEncodingContainer.init<A>(_:)();
      (*(void (**)(char *, uint64_t))(v87 + 8))(v66, v89);
      goto LABEL_61;
    default:
      uint64_t v18 = v15;
      uint64_t v19 = *(unsigned int *)v11;
      uint64_t v20 = *((void *)v11 + 1);
      uint64_t v97 = v13;
      unint64_t v98 = sub_100104154((unint64_t *)&qword_10047E308, (void (*)(uint64_t))type metadata accessor for BinaryEncoder);
      v96[0]  = v18;
      swift_bridgeObjectRetain();
      swift_retain();
      AWDLActionFrame.ServiceRequest.encode(to:)(v96, v19, v20);
      sub_100010754((uint64_t)v96);
      if (!v17) {
        goto LABEL_60;
      }
      goto LABEL_47;
  }
  swift_bridgeObjectRelease_n();
LABEL_61:
  sub_1000369C4(v92, v92[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  char v95 = AWDLActionFrame.AWDLAttribute.attributeType.getter();
  sub_100039448((uint64_t)v96, (uint64_t)v97);
  sub_100104204();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v17)
  {
    swift_beginAccess();
    uint64_t v75 = *(void *)(v15 + 16);
    switch(*(void *)(v15 + 24) >> 62)
    {
      case 1:
        BOOL v76 = __OFSUB__(HIDWORD(v75), v75);
        int v77 = HIDWORD(v75) - v75;
        if (v76)
        {
          __break(1u);
LABEL_71:
          __break(1u);
        }
        else
        {
          unint64_t v78 = v77;
LABEL_66:
          if ((v78 & 0x8000000000000000) == 0 && v78 < 0x10000)
          {
LABEL_68:
            sub_100039448((uint64_t)v96, (uint64_t)v97);
            dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
            long long v94 = *(_OWORD *)(v15 + 16);
            sub_100039448((uint64_t)v96, (uint64_t)v97);
            sub_1000742DC();
            dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
            break;
          }
        }
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x1000F6E1CLL);
      case 2:
        uint64_t v81 = v75 + 16;
        uint64_t v79 = *(void *)(v75 + 16);
        uint64_t v80 = *(void *)(v81 + 8);
        unint64_t v78 = v80 - v79;
        if (!__OFSUB__(v80, v79)) {
          goto LABEL_66;
        }
        goto LABEL_71;
      default:
        goto LABEL_68;
    }
  }
  swift_release();
  return sub_100010754((uint64_t)v96);
}

uint64_t AWDLActionFrame.AWDLAttribute.attributeType.getter()
{
  type metadata accessor for AWDLActionFrame.AWDLAttribute(0);
  __chkstk_darwin();
  uint64_t v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001037C8(v0, (uint64_t)v2, type metadata accessor for AWDLActionFrame.AWDLAttribute);
  EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
  uint64_t result = 0;
  switch(EnumCaseMultiPayload)
  {
    case 1:
      sub_100103830((uint64_t)v2, type metadata accessor for AWDLActionFrame.AWDLAttribute);
      uint64_t result = 2;
      break;
    case 2:
      sub_100103830((uint64_t)v2, type metadata accessor for AWDLActionFrame.AWDLAttribute);
      uint64_t result = 3;
      break;
    case 3:
      uint64_t result = 4;
      break;
    case 4:
      sub_100103830((uint64_t)v2, type metadata accessor for AWDLActionFrame.AWDLAttribute);
      uint64_t result = 10;
      break;
    case 5:
      sub_100103830((uint64_t)v2, type metadata accessor for AWDLActionFrame.AWDLAttribute);
      uint64_t result = 5;
      break;
    case 6:
      sub_100103830((uint64_t)v2, type metadata accessor for AWDLActionFrame.AWDLAttribute);
      uint64_t result = 7;
      break;
    case 7:
      sub_100103830((uint64_t)v2, type metadata accessor for AWDLActionFrame.AWDLAttribute);
      uint64_t result = 8;
      break;
    case 8:
      sub_100103830((uint64_t)v2, type metadata accessor for AWDLActionFrame.AWDLAttribute);
      uint64_t result = 11;
      break;
    case 9:
      uint64_t result = 12;
      break;
    case 10:
      sub_100103830((uint64_t)v2, type metadata accessor for AWDLActionFrame.AWDLAttribute);
      uint64_t result = 13;
      break;
    case 11:
      uint64_t result = 14;
      break;
    case 12:
      uint64_t result = 15;
      break;
    case 13:
      sub_100103830((uint64_t)v2, type metadata accessor for AWDLActionFrame.AWDLAttribute);
      uint64_t result = 9;
      break;
    case 14:
      sub_100103830((uint64_t)v2, type metadata accessor for AWDLActionFrame.AWDLAttribute);
      uint64_t result = 6;
      break;
    case 15:
      uint64_t result = 16;
      break;
    case 16:
      uint64_t result = 17;
      break;
    case 17:
      uint64_t result = 18;
      break;
    case 18:
      sub_100103830((uint64_t)v2, type metadata accessor for AWDLActionFrame.AWDLAttribute);
      uint64_t result = 20;
      break;
    case 19:
      uint64_t result = 21;
      break;
    case 20:
      uint64_t result = 22;
      break;
    case 21:
      return result;
    case 22:
      uint64_t result = 19;
      break;
    default:
      sub_100103830((uint64_t)v2, type metadata accessor for AWDLActionFrame.AWDLAttribute);
      uint64_t result = 1;
      break;
  }
  return result;
}

void AWDLActionFrame.AWDLAttribute.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  type metadata accessor for AWDLActionFrame.DataPathState(0);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v108 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AWDLActionFrame.ServiceResponse(0);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v108 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AWDLActionFrame.AWDLAttribute(0);
  __chkstk_darwin();
  uint64_t v9 = (unsigned __int8 *)&v108 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001037C8(v2, (uint64_t)v9, type metadata accessor for AWDLActionFrame.AWDLAttribute);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_10010419C((uint64_t)v9, (uint64_t)v7, type metadata accessor for AWDLActionFrame.ServiceResponse);
      Hasher._combine(_:)(2uLL);
      AWDLActionFrame.ServiceResponse.hash(into:)();
      sub_100103830((uint64_t)v7, type metadata accessor for AWDLActionFrame.ServiceResponse);
      return;
    case 2u:
      uint64_t v125 = *((void *)v9 + 5);
      Swift::UInt8 v16 = *v9;
      Swift::UInt16 v17 = *((_WORD *)v9 + 1);
      Swift::UInt8 v18 = v9[4];
      Swift::UInt8 v19 = v9[5];
      Swift::UInt16 v20 = *((_WORD *)v9 + 3);
      Swift::UInt16 v21 = *((_WORD *)v9 + 4);
      Swift::UInt16 v22 = *((_WORD *)v9 + 5);
      Swift::UInt16 v23 = *((_WORD *)v9 + 6);
      unsigned int v24 = *((unsigned __int16 *)v9 + 8);
      unsigned int v109 = *((unsigned __int16 *)v9 + 7);
      unsigned int v110 = v24;
      int v25 = v9[19];
      int v111 = v9[18];
      int v112 = v25;
      int v26 = v9[21];
      int v113 = v9[20];
      int v114 = v26;
      int v27 = v9[23];
      int v115 = v9[22];
      LODWORD(v116)  = v27;
      int v28 = v9[25];
      int v117 = v9[24];
      int v118 = v28;
      int v29 = v9[27];
      int v119 = v9[26];
      int v120 = v29;
      int v30 = v9[29];
      int v121 = v9[28];
      int v122 = v30;
      int v31 = *((unsigned __int16 *)v9 + 16);
      unsigned int v123 = *((unsigned __int16 *)v9 + 15);
      LODWORD(v124)  = v31;
      Hasher._combine(_:)(3uLL);
      Hasher._combine(_:)(v16);
      Hasher._combine(_:)(v17);
      Hasher._combine(_:)(v18);
      Hasher._combine(_:)(v19);
      Hasher._combine(_:)(v20);
      Hasher._combine(_:)(v21);
      Hasher._combine(_:)(v22);
      Hasher._combine(_:)(v23);
      Hasher._combine(_:)(v109);
      Hasher._combine(_:)(v110);
      Hasher._combine(_:)(v111);
      Hasher._combine(_:)(v112);
      Hasher._combine(_:)(v113);
      Hasher._combine(_:)(v114);
      Hasher._combine(_:)(v115);
      Hasher._combine(_:)(v116);
      Hasher._combine(_:)(v117);
      Hasher._combine(_:)(v118);
      Hasher._combine(_:)(v119);
      Hasher._combine(_:)(v120);
      Hasher._combine(_:)(v121);
      Hasher._combine(_:)(v122);
      Hasher._combine(_:)(v123);
      Hasher._combine(_:)(v124);
      sub_10009EDD8(a1, v125);
      goto LABEL_45;
    case 3u:
      uint64_t v125 = *v9;
      uint64_t v32 = *((unsigned __int16 *)v9 + 1);
      uint64_t v33 = v9[4];
      uint64_t v34 = v9[5];
      uint64_t v35 = v9[6];
      unsigned __int8 v36 = v9[16];
      char v37 = v9[24];
      uint64_t v38 = v9[7];
      unint64_t v124 = *((void *)v9 + 1);
      uint64_t v39 = *((unsigned int *)v9 + 5);
      Hasher._combine(_:)(4uLL);
      LOBYTE(v127)  = v36;
      char v126 = v37;
      AWDLActionFrame.DeprecatedElectionParameter.hash(into:)(a1, v125 | (v32 << 16) | (v33 << 32) | (v34 << 40) | (v35 << 48) | (v38 << 56), v124, v36 | (unint64_t)(v39 << 32), v37);
      return;
    case 4u:
      uint64_t v40 = *(void *)v9;
      Hasher._combine(_:)(5uLL);
      sub_10009EDD8(a1, v40);
      goto LABEL_45;
    case 5u:
      Swift::UInt32 v41 = *((_DWORD *)v9 + 2);
      uint64_t v42 = *((void *)v9 + 2);
      unint64_t v43 = *((void *)v9 + 3);
      Swift::UInt8 v44 = *v9;
      Swift::UInt16 v45 = *((_WORD *)v9 + 1);
      Swift::UInt16 v46 = *((_WORD *)v9 + 2);
      Hasher._combine(_:)(6uLL);
      Hasher._combine(_:)(v44);
      Hasher._combine(_:)(v45);
      Hasher._combine(_:)(v46);
      Hasher._combine(_:)(v41);
      sub_100013D44(v42, v43);
      Data.hash(into:)();
      sub_10000C970(v42, v43);
      sub_10000C970(v42, v43);
      return;
    case 6u:
      sub_10010419C((uint64_t)v9, (uint64_t)v5, type metadata accessor for AWDLActionFrame.DataPathState);
      Hasher._combine(_:)(7uLL);
      AWDLActionFrame.DataPathState.hash(into:)();
      sub_100103830((uint64_t)v5, type metadata accessor for AWDLActionFrame.DataPathState);
      return;
    case 7u:
      Swift::UInt8 v47 = *v9;
      Hasher._combine(_:)(8uLL);
      Hasher._combine(_:)(v47);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease_n();
      return;
    case 8u:
      uint64_t v48 = *(void *)v9;
      Hasher._combine(_:)(9uLL);
      Hasher._combine(_:)(*(void *)(v48 + 16));
      uint64_t v49 = *(void *)(v48 + 16);
      if (v49)
      {
        __int16 v50 = (Swift::UInt8 *)(v48 + 37);
        do
        {
          Swift::UInt8 v51 = *(v50 - 5);
          Swift::UInt8 v52 = *(v50 - 4);
          Swift::UInt8 v53 = *(v50 - 3);
          Swift::UInt8 v54 = *(v50 - 2);
          Swift::UInt8 v55 = *(v50 - 1);
          Swift::UInt8 v56 = *v50;
          v50 += 6;
          Hasher._combine(_:)(v51);
          Hasher._combine(_:)(v52);
          Hasher._combine(_:)(v53);
          Hasher._combine(_:)(v54);
          Hasher._combine(_:)(v55);
          Hasher._combine(_:)(v56);
          --v49;
        }
        while (v49);
      }
      goto LABEL_45;
    case 9u:
      Swift::UInt8 v57 = *v9;
      Swift::UInt8 v58 = v9[1];
      Hasher._combine(_:)(0xAuLL);
      Hasher._combine(_:)(v57);
      Swift::UInt8 v59 = v58;
      goto LABEL_33;
    case 0xAu:
      uint64_t v60 = *((void *)v9 + 1);
      Swift::UInt8 v61 = *v9;
      Swift::UInt8 v62 = v9[1];
      Hasher._combine(_:)(0xBuLL);
      Hasher._combine(_:)(v61);
      Hasher._combine(_:)(v62);
      Hasher._combine(_:)(*(void *)(v60 + 16));
      uint64_t v63 = *(void *)(v60 + 16);
      if (v63)
      {
        for (uint64_t i = 0; i != v63; ++i)
        {
          uint64_t v65 = v60 + i;
          Hasher._combine(_:)(*(unsigned char *)(v65 + 32));
        }
      }
      goto LABEL_45;
    case 0xBu:
      Swift::UInt64 v116 = *((void *)v9 + 2);
      LODWORD(v125)  = *((_DWORD *)v9 + 9);
      Swift::UInt16 v66 = *(_WORD *)v9;
      Swift::UInt8 v67 = v9[2];
      Swift::UInt8 v68 = v9[3];
      Swift::UInt8 v69 = v9[4];
      Swift::UInt8 v70 = v9[5];
      Swift::UInt8 v71 = v9[6];
      Swift::UInt8 v72 = v9[7];
      Swift::UInt8 v73 = v9[8];
      unsigned int v74 = v9[10];
      int v108 = v9[9];
      unsigned int v109 = v74;
      int v75 = v9[12];
      unsigned int v110 = v9[11];
      int v111 = v75;
      int v76 = v9[24];
      int v112 = v9[13];
      int v113 = v76;
      int v77 = v9[26];
      int v114 = v9[25];
      int v115 = v77;
      int v78 = v9[28];
      int v117 = v9[27];
      int v118 = v78;
      int v79 = v9[30];
      int v119 = v9[29];
      int v120 = v79;
      int v80 = v9[32];
      int v121 = v9[31];
      int v122 = v80;
      int v81 = *((unsigned __int16 *)v9 + 17);
      unsigned int v123 = v9[33];
      LODWORD(v124)  = v81;
      Hasher._combine(_:)(0xCuLL);
      Hasher._combine(_:)(v66);
      Hasher._combine(_:)(v67);
      Hasher._combine(_:)(v68);
      Hasher._combine(_:)(v69);
      Hasher._combine(_:)(v70);
      Hasher._combine(_:)(v71);
      Hasher._combine(_:)(v72);
      Hasher._combine(_:)(v73);
      Hasher._combine(_:)(v108);
      Hasher._combine(_:)(v109);
      Hasher._combine(_:)(v110);
      Hasher._combine(_:)(v111);
      Hasher._combine(_:)(v112);
      Hasher._combine(_:)(v116);
      Hasher._combine(_:)(v113);
      Hasher._combine(_:)(v114);
      Hasher._combine(_:)(v115);
      Hasher._combine(_:)(v117);
      Hasher._combine(_:)(v118);
      Hasher._combine(_:)(v119);
      Hasher._combine(_:)(v120);
      Hasher._combine(_:)(v121);
      Hasher._combine(_:)(v122);
      Hasher._combine(_:)(v123);
      Hasher._combine(_:)(v124);
      Hasher._combine(_:)(v125);
      return;
    case 0xCu:
      long long v82 = *((_OWORD *)v9 + 1);
      long long v127 = *(_OWORD *)v9;
      long long v128 = v82;
      long long v129 = *((_OWORD *)v9 + 2);
      Hasher._combine(_:)(0xDuLL);
      AWDLActionFrame.ElectionParameter.hash(into:)();
      return;
    case 0xDu:
      sub_1000A66D8((uint64_t)v9, (uint64_t)&v127);
      Hasher._combine(_:)(0xEuLL);
      IEEE80211InformationElement.hash(into:)(a1);
      sub_1000A6734((uint64_t)&v127, (void (*)(void, void, void, void, void, void, void))sub_10006E108);
      return;
    case 0xEu:
      uint64_t v83 = *((void *)v9 + 1);
      unint64_t v84 = *((void *)v9 + 2);
      Swift::UInt16 v85 = *(_WORD *)v9;
      Swift::UInt16 v86 = *((_WORD *)v9 + 1);
      Swift::UInt8 v87 = v9[4];
      Hasher._combine(_:)(0xFuLL);
      Hasher._combine(_:)(v85);
      Hasher._combine(_:)(v86);
      Hasher._combine(_:)(v87);
      sub_100013D44(v83, v84);
      Data.hash(into:)();
      sub_10000C970(v83, v84);
      sub_10000C970(v83, v84);
      return;
    case 0xFu:
      Swift::UInt8 v88 = *v9;
      Hasher._combine(_:)(0x10uLL);
      goto LABEL_32;
    case 0x10u:
      Swift::UInt8 v89 = *v9;
      Swift::UInt8 v90 = v9[1];
      Swift::UInt8 v91 = v9[2];
      Swift::UInt8 v92 = v9[3];
      Swift::UInt8 v93 = v9[4];
      Swift::UInt8 v94 = v9[5];
      Swift::UInt8 v95 = v9[6];
      Hasher._combine(_:)(0x11uLL);
      Hasher._combine(_:)(v89);
      Hasher._combine(_:)(v90);
      Hasher._combine(_:)(v91);
      Hasher._combine(_:)(v92);
      Hasher._combine(_:)(v93);
      Hasher._combine(_:)(v94);
      Swift::UInt8 v59 = v95;
      goto LABEL_33;
    case 0x11u:
      long long v96 = *((_OWORD *)v9 + 1);
      long long v127 = *(_OWORD *)v9;
      long long v128 = v96;
      *(void *)&long long v129 = *((void *)v9 + 4);
      Hasher._combine(_:)(0x12uLL);
      AWDLActionFrame.RealtimeGroup.hash(into:)();
      return;
    case 0x12u:
      Swift::UInt32 v97 = *(_DWORD *)v9;
      unsigned __int8 v98 = v9[4];
      int v99 = v9[5];
      uint64_t v100 = *((void *)v9 + 1);
      Hasher._combine(_:)(0x14uLL);
      Hasher._combine(_:)(v97);
      Hasher._combine(_:)(0x801004u >> (8 * v98));
      switch(v99)
      {
        case 2:
          Swift::UInt v101 = 0;
          goto LABEL_43;
        case 3:
          Swift::UInt v101 = 1;
          goto LABEL_43;
        case 4:
          Swift::UInt v101 = 3;
          goto LABEL_43;
        case 5:
          Swift::UInt v101 = 4;
          goto LABEL_43;
        case 6:
          Swift::UInt v101 = 5;
LABEL_43:
          Hasher._combine(_:)(v101);
          break;
        default:
          Hasher._combine(_:)(2uLL);
          Hasher._combine(_:)(v99 & 1);
          break;
      }
      sub_10009EF14(a1, v100);
      goto LABEL_45;
    case 0x13u:
      unsigned __int8 v104 = v9[1];
      Swift::UInt32 v105 = *((_DWORD *)v9 + 1);
      Swift::UInt32 v106 = *((_DWORD *)v9 + 2);
      Swift::UInt8 v107 = *v9;
      Hasher._combine(_:)(0x15uLL);
      Hasher._combine(_:)(v107);
      Hasher._combine(_:)(v104 + 1);
      Hasher._combine(_:)(v105);
      Hasher._combine(_:)(v106);
      return;
    case 0x14u:
      Swift::UInt8 v88 = v9[1];
      Swift::UInt8 v102 = *v9;
      Hasher._combine(_:)(0x16uLL);
      Hasher._combine(_:)(v102);
LABEL_32:
      Swift::UInt8 v59 = v88;
LABEL_33:
      Hasher._combine(_:)(v59);
      return;
    case 0x15u:
      Swift::UInt v103 = 0;
      goto LABEL_37;
    case 0x16u:
      Swift::UInt v103 = 19;
LABEL_37:
      Hasher._combine(_:)(v103);
      break;
    default:
      uint64_t v10 = *((void *)v9 + 1);
      Swift::UInt16 v11 = *(_WORD *)v9;
      Swift::UInt16 v12 = *((_WORD *)v9 + 1);
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(v11);
      Hasher._combine(_:)(v12);
      Hasher._combine(_:)(*(void *)(v10 + 16));
      uint64_t v13 = *(void *)(v10 + 16);
      if (v13)
      {
        for (j  = 0; j != v13; ++j)
        {
          uint64_t v15 = v10 + j;
          Hasher._combine(_:)(*(unsigned char *)(v15 + 32));
        }
      }
LABEL_45:
      swift_bridgeObjectRelease();
      break;
  }
}

Swift::Int AWDLActionFrame.AWDLAttribute.hashValue.getter()
{
  return sub_1000FA1C0((void (*)(unsigned char *))AWDLActionFrame.AWDLAttribute.hash(into:));
}

uint64_t sub_1000F7C90@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AWDLActionFrame.AWDLAttribute.init(from:)(a1, a2);
}

uint64_t sub_1000F7CA8(void *a1)
{
  return AWDLActionFrame.AWDLAttribute.encode(to:)(a1);
}

Swift::Int sub_1000F7CC0(uint64_t a1, uint64_t a2)
{
  return sub_1000FA220(a1, a2, (void (*)(unsigned char *))AWDLActionFrame.AWDLAttribute.hash(into:));
}

Swift::Int sub_1000F7CDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FA284(a1, a2, a3, (void (*)(unsigned char *))AWDLActionFrame.AWDLAttribute.hash(into:));
}

void AWDLActionFrame.hash(into:)(uint64_t a1, unint64_t a2, Swift::UInt32 a3, uint64_t a4)
{
  __int16 v6 = a2;
  unint64_t v8 = a2 >> 16;
  unint64_t v9 = HIDWORD(a2);
  Hasher._combine(_:)(8u);
  Hasher._combine(_:)(v6);
  if ((v6 & 0x100) != 0) {
    Swift::UInt8 v10 = 3;
  }
  else {
    Swift::UInt8 v10 = 0;
  }
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(a3);
  Swift::UInt v11 = *(void *)(a4 + 16);
  Hasher._combine(_:)(v11);
  if (v11)
  {
    uint64_t v12 = *(void *)(type metadata accessor for AWDLActionFrame.AWDLAttribute(0) - 8);
    uint64_t v13 = a4 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    uint64_t v14 = *(void *)(v12 + 72);
    swift_bridgeObjectRetain();
    do
    {
      AWDLActionFrame.AWDLAttribute.hash(into:)(a1);
      v13 += v14;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
  }
}

uint64_t static AWDLActionFrame.__derived_struct_equals(_:_:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  return sub_1000FDF7C(a1 & 0xFFFFFFFF00FF01FFLL, a2, a3, a4 & 0xFFFFFFFF00FF01FFLL, a5, a6);
}

Swift::Int AWDLActionFrame.hashValue.getter(unint64_t a1, Swift::UInt32 a2, uint64_t a3)
{
  __int16 v5 = a1;
  unint64_t v6 = a1 >> 16;
  unint64_t v7 = HIDWORD(a1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(8u);
  Hasher._combine(_:)(v5);
  if ((v5 & 0x100) != 0) {
    Swift::UInt8 v8 = 3;
  }
  else {
    Swift::UInt8 v8 = 0;
  }
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(a2);
  Swift::UInt v9 = *(void *)(a3 + 16);
  Hasher._combine(_:)(v9);
  if (v9)
  {
    uint64_t v10 = *(void *)(type metadata accessor for AWDLActionFrame.AWDLAttribute(0) - 8);
    uint64_t v11 = a3 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v12 = *(void *)(v10 + 72);
    swift_bridgeObjectRetain();
    do
    {
      AWDLActionFrame.AWDLAttribute.hash(into:)((uint64_t)v14);
      v11 += v12;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

uint64_t sub_1000F7F80@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1001027B8(a1);
  if (!v2)
  {
    *(unsigned char *)a2  = result;
    *(unsigned char *)(a2 + 1)  = BYTE1(result) & 1;
    *(unsigned char *)(a2 + 2)  = BYTE2(result);
    *(_DWORD *)(a2 + 4)  = HIDWORD(result);
    *(_DWORD *)(a2 + 8)  = v5;
    *(void *)(a2 + 16)  = v6;
  }
  return result;
}

unint64_t AWDLActionFrame.init(from:)(void *a1)
{
  return sub_1001027B8(a1) & 0xFFFFFFFF00FF01FFLL;
}

uint64_t sub_1000F7FFC(void *a1)
{
  __int16 v2 = 256;
  if (!v1[1]) {
    __int16 v2 = 0;
  }
  return AWDLActionFrame.encode(to:)(a1, v2 | *v1, *((unsigned int *)v1 + 2), *((void *)v1 + 2));
}

uint64_t AWDLActionFrame.encode(to:)(void *a1, __int16 a2, uint64_t a3, uint64_t a4)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  sub_100039448((uint64_t)v8, v9);
  sub_100104284();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v4)
  {
    LOBYTE(v10)  = a2;
    sub_100039448((uint64_t)v8, v9);
    sub_100103ADC();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    LOBYTE(v10)  = HIBYTE(a2) & 1;
    sub_100039448((uint64_t)v8, v9);
    sub_1001042D8();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    sub_100039448((uint64_t)v8, v9);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    sub_100039448((uint64_t)v8, v9);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    sub_100039448((uint64_t)v8, v9);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    uint64_t v10 = a4;
    sub_100039448((uint64_t)v8, v9);
    sub_100010BCC(&qword_10047F430);
    sub_10010432C();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return sub_100010754((uint64_t)v8);
}

Swift::Int sub_1000F826C()
{
  uint64_t v1 = 256;
  if (!v0[1]) {
    uint64_t v1 = 0;
  }
  return AWDLActionFrame.hashValue.getter(v1 | *v0 | ((unint64_t)v0[2] << 16) | ((unint64_t)*((unsigned int *)v0 + 1) << 32), *((_DWORD *)v0 + 2), *((void *)v0 + 2));
}

void sub_1000F829C(uint64_t a1)
{
  uint64_t v2 = 256;
  if (!v1[1]) {
    uint64_t v2 = 0;
  }
  AWDLActionFrame.hash(into:)(a1, v2 | *v1 | ((unint64_t)v1[2] << 16) | ((unint64_t)*((unsigned int *)v1 + 1) << 32), *((_DWORD *)v1 + 2), *((void *)v1 + 2));
}

Swift::Int sub_1000F82CC()
{
  int v1 = *(unsigned __int8 *)(v0 + 1);
  Swift::UInt32 v2 = *(_DWORD *)(v0 + 4);
  Swift::UInt32 v3 = *(_DWORD *)(v0 + 8);
  uint64_t v4 = *(void *)(v0 + 16);
  Swift::UInt8 v5 = *(unsigned char *)v0;
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(8u);
  Hasher._combine(_:)(v5);
  if (v1) {
    Swift::UInt8 v7 = 3;
  }
  else {
    Swift::UInt8 v7 = 0;
  }
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Swift::UInt v8 = *(void *)(v4 + 16);
  Hasher._combine(_:)(v8);
  if (v8)
  {
    uint64_t v9 = *(void *)(type metadata accessor for AWDLActionFrame.AWDLAttribute(0) - 8);
    uint64_t v10 = v4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    swift_bridgeObjectRetain();
    do
    {
      AWDLActionFrame.AWDLAttribute.hash(into:)((uint64_t)v13);
      v10 += v11;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

uint64_t sub_1000F840C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *((void *)a1 + 2);
  uint64_t v3 = 256;
  if (a1[1]) {
    uint64_t v4 = 256;
  }
  else {
    uint64_t v4 = 0;
  }
  int v5 = *((_DWORD *)a1 + 2);
  unint64_t v6 = v4 | *a1 | ((unint64_t)a1[2] << 16) | ((unint64_t)*((unsigned int *)a1 + 1) << 32);
  if (!a2[1]) {
    uint64_t v3 = 0;
  }
  return static AWDLActionFrame.__derived_struct_equals(_:_:)(v6, v5, v2, v3 | *a2 | ((unint64_t)a2[2] << 16) | ((unint64_t)*((unsigned int *)a2 + 1) << 32), *((_DWORD *)a2 + 2), *((void *)a2 + 2));
}

uint64_t sub_1000F8468(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  if (!v4 || (unint64_t)(v4 - 1) >= 0x100)
  {
LABEL_35:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  sub_100039448(a1, *(void *)(a1 + 24));
  uint64_t result = dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  if (!v3)
  {
    sub_100039448(a1, *(void *)(a1 + 24));
    sub_10010EC5C();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    sub_100039448(a1, *(void *)(a1 + 24));
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    sub_100039448(a1, *(void *)(a1 + 24));
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    sub_100039448(a1, *(void *)(a1 + 24));
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    if (a2 - 2 < 2)
    {
      swift_bridgeObjectRetain();
      for (uint64_t i = 32; ; i += 8)
      {
        unint64_t v10 = *(unsigned int *)(a3 + i) | ((unint64_t)*(unsigned __int16 *)(a3 + i + 4) << 32);
        if ((v10 & 0xFF00000000) == 0x300000000)
        {
          sub_100039448(a1, *(void *)(a1 + 24));
          dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
          sub_100039448(a1, *(void *)(a1 + 24));
          dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
        }
        else
        {
          if ((*(_DWORD *)(a3 + i) & 0xFFFFFF00) != 0) {
            goto LABEL_35;
          }
          sub_100039448(a1, *(void *)(a1 + 24));
          dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
          Channel.operatingClass.getter(v10);
          sub_100039448(a1, *(void *)(a1 + 24));
          dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
        }
        if (!--v4) {
          return swift_bridgeObjectRelease();
        }
      }
    }
    if (!a2)
    {
      swift_bridgeObjectRetain();
      for (j  = 32;
            ((*(unsigned int *)(a3 + j) | ((unint64_t)*(unsigned __int16 *)(a3 + j + 4) << 32)) & 0xFF00000000) == 0x300000000
         || *(_DWORD *)(a3 + j) < 0x100u;
            j += 8)
      {
        sub_100039448(a1, *(void *)(a1 + 24));
        dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
        if (!--v4) {
          return swift_bridgeObjectRelease();
        }
      }
      goto LABEL_35;
    }
    swift_bridgeObjectRetain();
    uint64_t v12 = 32;
    do
    {
      unint64_t v13 = *(unsigned int *)(a3 + v12) | ((unint64_t)*(unsigned __int16 *)(a3 + v12 + 4) << 32);
      if ((v13 & 0xFF00000000) == 0x300000000)
      {
        sub_100039448(a1, *(void *)(a1 + 24));
        dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
      }
      else
      {
        char v14 = sub_1000FFE38(SBYTE4(v13), BYTE5(v13));
        sub_100039448(a1, *(void *)(a1 + 24));
        sub_10010ECB0();
        dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
        if (sub_10008CAA8(0, 2, v14) == 2 && v13 > 2)
        {
          LODWORD(v13)  = v13 - 2;
        }
        else
        {
          int v16 = sub_10008CAA8(0, 2, v14);
          if (v13 < 0xDE && v16 == 1) {
            LODWORD(v13)  = v13 + 2;
          }
        }
        if (v13 >= 0x100) {
          goto LABEL_35;
        }
      }
      sub_100039448(a1, *(void *)(a1 + 24));
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
      v12 += 8;
      --v4;
    }
    while (v4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000F89D4@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = _s7CoreP2P19NANIntervalDurationO8rawValueACSgs5UInt8V_tcfC_0(*a1);
  *a2  = result;
  return result;
}

uint64_t sub_1000F8A00()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000F8A60()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1000F8AB0(char a1)
{
  char v2 = sub_10008CAA8(2uLL, 2, a1);
  if (v2 == 1) {
    return 2;
  }
  if (v2 == 3) {
    return sub_10008CAA8(0, 2, a1) == 2;
  }
  return 3;
}

uint64_t sub_1000F8B5C()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000F8BBC()
{
  return RawRepresentable<>.encode(to:)();
}

void sub_1000F8C0C(uint64_t a1@<X1>, void *a2@<X2>, uint64_t a3@<X8>)
{
  sub_100039448(a1, *(void *)(a1 + 24));
  sub_10010ED58();
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  if (v3)
  {
    *a2  = v3;
  }
  else
  {
    sub_100039448(a1, *(void *)(a1 + 24));
    unsigned __int8 v7 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    unsigned __int8 v8 = v7;
    if (!v7) {
      goto LABEL_18;
    }
    char v9 = sub_10008CAA8(0, 2, v17);
    if (v8 <= 0xDDu && v9 == 2)
    {
      v8 += 2;
    }
    else if (sub_10008CAA8(0, 2, v17) == 1 && v8 > 2u)
    {
      v8 -= 2;
    }
    char v12 = sub_10008CAA8(4uLL, 4, v17) == 1;
    int v13 = sub_1000F8AB0(v17);
    if (_s7CoreP2P7ChannelV7isValid7channel2on4withSbs6UInt32V_AC4BandOAA9BandwidthOtFZ_0(v8, v12, v13))
    {
      BOOL v14 = sub_10008CAA8(4uLL, 4, v17) == 1;
      unsigned __int8 v16 = sub_1000F8AB0(v17);
      sub_1001C4000();
      *(_DWORD *)a3  = v8;
      unint64_t v15 = (v8 | ((unint64_t)v14 << 32) | ((unint64_t)v16 << 40)) >> 32;
    }
    else
    {
LABEL_18:
      *(_DWORD *)a3  = 0;
      LOWORD(v15)  = 3;
    }
    *(_WORD *)(a3 + 4)  = v15;
  }
}

unint64_t sub_1000F8E44(char a1, char a2)
{
  LOBYTE(v2)  = a2;
  LOBYTE(v3)  = a1;
  if (qword_10047C208 != -1) {
    goto LABEL_65;
  }
  while (1)
  {
    uint64_t v4 = off_100481FF8;
    uint64_t v5 = *((void *)off_100481FF8 + 2);
    if (!v5) {
      return 0x300000000;
    }
    unsigned int v6 = v3;
    int v7 = v2;
    unsigned __int8 v8 = (char *)off_100481FF8 + 32;
    swift_bridgeObjectRetain();
    unint64_t v2 = 0;
    char v9 = &qword_10047C000;
    unint64_t v10 = &off_100482000;
    while (1)
    {
      if (v2 >= v4[2]) {
        goto LABEL_63;
      }
      uint64_t v11 = &v8[16 * v2];
      if (*v11 != v7) {
        goto LABEL_5;
      }
      LOBYTE(v3)  = v11[1];
      int v12 = v11[2];
      uint64_t v13 = *((void *)v11 + 1);
      if ((v12 - 4) < 3) {
        break;
      }
      uint64_t v18 = *(void *)(v13 + 16);
      if (v18)
      {
        if (*(_DWORD *)(v13 + 32) == v6) {
          goto LABEL_60;
        }
        if (v18 != 1)
        {
          if (*(_DWORD *)(v13 + 36) == v6) {
            goto LABEL_60;
          }
          if (v18 != 2)
          {
            if (*(_DWORD *)(v13 + 40) == v6) {
              goto LABEL_60;
            }
            if (v18 != 3)
            {
              uint64_t v19 = 11;
              while (1)
              {
                uint64_t v20 = v19 - 7;
                if (__OFADD__(v19 - 8, 1)) {
                  goto LABEL_64;
                }
                if (*(_DWORD *)(v13 + 4 * v19) == v6) {
                  break;
                }
                ++v19;
                if (v20 == v18) {
                  goto LABEL_5;
                }
              }
LABEL_60:
              swift_bridgeObjectRetain();
LABEL_57:
              swift_bridgeObjectRelease();
              sub_1001C4000();
              swift_bridgeObjectRelease();
              return v6 | ((unint64_t)v3 << 32) | ((unint64_t)v12 << 40);
            }
          }
        }
      }
LABEL_5:
      if (++v2 == v5)
      {
        swift_bridgeObjectRelease();
        return 0x300000000;
      }
    }
    unsigned __int8 v36 = v11[1];
    uint64_t v3 = v9[66];
    swift_bridgeObjectRetain();
    if (v3 != -1) {
      swift_once();
    }
    BOOL v14 = *v10;
    uint64_t v15 = *((void *)*v10 + 2);
    if (!v15)
    {
LABEL_4:
      swift_bridgeObjectRelease();
      char v9 = &qword_10047C000;
      unint64_t v10 = &off_100482000;
      goto LABEL_5;
    }
    int v32 = v7;
    uint64_t v33 = v5;
    unsigned __int8 v16 = v14 + 4;
    char v34 = (char)v14;
    swift_bridgeObjectRetain_n();
    uint64_t v17 = 0;
    int v35 = v12;
    while (1)
    {
      uint64_t v21 = v17 + 1;
      if (__OFADD__(v17, 1)) {
        break;
      }
      if ((0x801004u >> (8 * LOBYTE(v16[2 * v17]))) == (0x801004u >> (8 * v36)))
      {
        Swift::UInt16 v22 = &v16[2 * v17];
        int v23 = *((unsigned __int8 *)v22 + 1);
        uint64_t v24 = v22[1];
        if (v23 == 6)
        {
          if (v12 != 6) {
            goto LABEL_26;
          }
        }
        else if (v23 == 5)
        {
          if (v12 != 5) {
            goto LABEL_26;
          }
        }
        else if (v23 != 4 || v12 != 4)
        {
          goto LABEL_26;
        }
        uint64_t v3 = *(void *)(v24 + 16);
        if (v3)
        {
          swift_bridgeObjectRetain_n();
          uint64_t v26 = 0;
          while (1)
          {
            uint64_t v27 = *(void *)(v24 + 32 + 16 * v26 + 8);
            uint64_t v28 = *(void *)(v27 + 16);
            if (v28)
            {
              if (*(_DWORD *)(v27 + 32) == v6) {
                goto LABEL_56;
              }
              if (v28 != 1)
              {
                if (*(_DWORD *)(v27 + 36) == v6) {
                  goto LABEL_56;
                }
                if (v28 != 2)
                {
                  if (*(_DWORD *)(v27 + 40) == v6)
                  {
LABEL_56:
                    swift_bridgeObjectRelease();
                    LOBYTE(v12)  = v35;
                    LOBYTE(v3)  = v36;
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease_n();
                    goto LABEL_57;
                  }
                  if (v28 != 3) {
                    break;
                  }
                }
              }
            }
LABEL_42:
            if (++v26 == v3)
            {
              swift_bridgeObjectRelease_n();
              int v12 = v35;
              goto LABEL_26;
            }
          }
          uint64_t v29 = 11;
          while (1)
          {
            uint64_t v30 = v29 - 7;
            if (__OFADD__(v29 - 8, 1)) {
              break;
            }
            if (*(_DWORD *)(v27 + 4 * v29) == v6) {
              goto LABEL_56;
            }
            ++v29;
            if (v30 == v28) {
              goto LABEL_42;
            }
          }
          __break(1u);
          break;
        }
      }
LABEL_26:
      uint64_t v17 = v21;
      if (v21 == v15)
      {
        swift_bridgeObjectRelease();
        LOBYTE(v3)  = v34;
        swift_bridgeObjectRelease();
        uint64_t v5 = v33;
        int v7 = v32;
        goto LABEL_4;
      }
    }
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    swift_once();
  }
}

unint64_t AWDLActionFrame.Header.channel.getter()
{
  return *(unsigned int *)(v0 + 12) | ((unint64_t)*(unsigned __int8 *)(v0 + 16) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 17) << 40);
}

uint64_t AWDLActionFrame.Header.channel.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 12)  = result;
  *(unsigned char *)(v1 + 16)  = BYTE4(result);
  *(unsigned char *)(v1 + 17)  = BYTE5(result);
  return result;
}

uint64_t Channel.channel.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

void *AWDLActionFrame.Header.Flags.updateHardwareTSF.unsafeMutableAddressor()
{
  return &static AWDLActionFrame.Header.Flags.updateHardwareTSF;
}

void *AWDLActionFrame.Header.Flags.updateSynchronizationParameters.unsafeMutableAddressor()
{
  return &static AWDLActionFrame.Header.Flags.updateSynchronizationParameters;
}

void *AWDLActionFrame.Header.Flags.updateElectionParameters.unsafeMutableAddressor()
{
  return &static AWDLActionFrame.Header.Flags.updateElectionParameters;
}

void *AWDLActionFrame.Header.Flags.isProbeResponse.unsafeMutableAddressor()
{
  return &static AWDLActionFrame.Header.Flags.isProbeResponse;
}

_DWORD *sub_1000F9280@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2  = *result;
  return result;
}

Swift::Int sub_1000F928C()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000F92D4()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000F9300()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

_DWORD *sub_1000F9344@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2  = *v2 | *result;
  return result;
}

_DWORD *sub_1000F9358@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2  = *v2 & *result;
  return result;
}

_DWORD *sub_1000F936C@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2  = *v2 ^ *result;
  return result;
}

BOOL sub_1000F9380(_DWORD *a1, int *a2)
{
  int v3 = *a2;
  int v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1  = v3;
  return v4 != v3;
}

_DWORD *sub_1000F93B0@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(_DWORD *)a2  = v3;
  *(unsigned char *)(a2 + 4)  = v3 == 0;
  return result;
}

int *sub_1000F93DC@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  *v2 |= *result;
  int v5 = v4 & v3;
  *(_DWORD *)a2  = v5;
  *(unsigned char *)(a2 + 4)  = v5 == 0;
  return result;
}

_DWORD *sub_1000F9400(_DWORD *result)
{
  *v1 |= *result;
  return result;
}

_DWORD *sub_1000F9414(_DWORD *result)
{
  *v1 &= *result;
  return result;
}

_DWORD *sub_1000F9428(_DWORD *result)
{
  *v1 ^= *result;
  return result;
}

_DWORD *sub_1000F943C@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2  = *v2 & ~*result;
  return result;
}

BOOL sub_1000F9450(_DWORD *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_1000F9464(_DWORD *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_1000F9478(_DWORD *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_1000F948C()
{
  return *v0 == 0;
}

_DWORD *sub_1000F949C(_DWORD *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t AWDLActionFrame.Header.flags.getter()
{
  return *(unsigned int *)(v0 + 20);
}

uint64_t AWDLActionFrame.Header.flags.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 20)  = result;
  return result;
}

uint64_t AWDLActionFrame.Header.dwellTime.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AWDLActionFrame.Header(0) + 32);
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t AWDLActionFrame.Header.dwellTime.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AWDLActionFrame.Header(0) + 32);
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*AWDLActionFrame.Header.dwellTime.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLActionFrame.Header.lifetime.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AWDLActionFrame.Header(0) + 36);
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t AWDLActionFrame.Header.lifetime.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AWDLActionFrame.Header(0) + 36);
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*AWDLActionFrame.Header.lifetime.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLActionFrame.Header.token.getter()
{
  return *(unsigned int *)(v0 + *(int *)(type metadata accessor for AWDLActionFrame.Header(0) + 40));
}

uint64_t AWDLActionFrame.Header.token.setter(int a1)
{
  uint64_t result = type metadata accessor for AWDLActionFrame.Header(0);
  *(_DWORD *)(v1 + *(int *)(result + 40))  = a1;
  return result;
}

uint64_t (*AWDLActionFrame.Header.token.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLActionFrame.Header.rate.getter()
{
  return *(unsigned int *)(v0 + *(int *)(type metadata accessor for AWDLActionFrame.Header(0) + 44));
}

uint64_t AWDLActionFrame.Header.rate.setter(int a1)
{
  uint64_t result = type metadata accessor for AWDLActionFrame.Header(0);
  *(_DWORD *)(v1 + *(int *)(result + 44))  = a1;
  return result;
}

uint64_t (*AWDLActionFrame.Header.rate.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLActionFrame.Header.rssi.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for AWDLActionFrame.Header(0) + 48));
}

uint64_t AWDLActionFrame.Header.rssi.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for AWDLActionFrame.Header(0);
  *(void *)(v1 + *(int *)(result + 48))  = a1;
  return result;
}

uint64_t (*AWDLActionFrame.Header.rssi.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLActionFrame.Header.mactime.getter()
{
  return *(unsigned int *)(v0 + *(int *)(type metadata accessor for AWDLActionFrame.Header(0) + 52));
}

uint64_t AWDLActionFrame.Header.mactime.setter(int a1)
{
  uint64_t result = type metadata accessor for AWDLActionFrame.Header(0);
  *(_DWORD *)(v1 + *(int *)(result + 52))  = a1;
  return result;
}

uint64_t (*AWDLActionFrame.Header.mactime.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLActionFrame.Header.tsf.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for AWDLActionFrame.Header(0) + 56));
}

uint64_t AWDLActionFrame.Header.tsf.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for AWDLActionFrame.Header(0);
  *(void *)(v1 + *(int *)(result + 56))  = a1;
  return result;
}

uint64_t (*AWDLActionFrame.Header.tsf.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLActionFrame.Header.chainRSSIPresent.getter()
{
  return *(unsigned int *)(v0 + *(int *)(type metadata accessor for AWDLActionFrame.Header(0) + 60));
}

uint64_t AWDLActionFrame.Header.chainRSSIPresent.setter(int a1)
{
  uint64_t result = type metadata accessor for AWDLActionFrame.Header(0);
  *(_DWORD *)(v1 + *(int *)(result + 60))  = a1;
  return result;
}

uint64_t (*AWDLActionFrame.Header.chainRSSIPresent.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t AWDLActionFrame.Header.chainRSSI.getter()
{
  type metadata accessor for AWDLActionFrame.Header(0);

  return swift_bridgeObjectRetain();
}

uint64_t AWDLActionFrame.Header.chainRSSI.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for AWDLActionFrame.Header(0) + 64);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3)  = a1;
  return result;
}

uint64_t (*AWDLActionFrame.Header.chainRSSI.modify())(void)
{
  return NANBitmap.Channel.operatingClass.getter;
}

void AWDLActionFrame.Header.hash(into:)()
{
  uint64_t v1 = type metadata accessor for DispatchTimeInterval();
  uint64_t v45 = *(void *)(v1 - 8);
  __chkstk_darwin();
  Swift::UInt8 v44 = (uint64_t *)((char *)&v42 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  uint64_t v4 = (uint64_t *)((char *)&v42 - v3);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 1);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 2);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 3);
  Swift::UInt8 v8 = *(unsigned char *)(v0 + 4);
  Swift::UInt8 v9 = *(unsigned char *)(v0 + 5);
  Hasher._combine(_:)(*(unsigned char *)v0);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Swift::UInt8 v10 = *(unsigned char *)(v0 + 7);
  Swift::UInt8 v11 = *(unsigned char *)(v0 + 8);
  Swift::UInt8 v12 = *(unsigned char *)(v0 + 9);
  Swift::UInt8 v13 = *(unsigned char *)(v0 + 10);
  Swift::UInt8 v14 = *(unsigned char *)(v0 + 11);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 6));
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  char v15 = *(unsigned char *)(v0 + 16);
  int v16 = *(unsigned __int8 *)(v0 + 17);
  Hasher._combine(_:)(*(_DWORD *)(v0 + 12));
  Hasher._combine(_:)(0x801004u >> (8 * v15));
  switch(v16)
  {
    case 2:
      Swift::UInt v17 = 0;
      goto LABEL_8;
    case 3:
      Swift::UInt v17 = 1;
      goto LABEL_8;
    case 4:
      Swift::UInt v17 = 3;
      goto LABEL_8;
    case 5:
      Swift::UInt v17 = 4;
      goto LABEL_8;
    case 6:
      Swift::UInt v17 = 5;
LABEL_8:
      Hasher._combine(_:)(v17);
      break;
    default:
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(v16 & 1);
      break;
  }
  uint64_t v18 = v45;
  Hasher._combine(_:)(*(_DWORD *)(v0 + 20));
  uint64_t v19 = (int *)type metadata accessor for AWDLActionFrame.Header(0);
  uint64_t v20 = v0 + v19[8];
  unint64_t v43 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v18 + 16);
  v43(v4, v20, v1);
  uint64_t v21 = *(uint64_t (**)(uint64_t *, uint64_t))(v18 + 88);
  int v22 = v21(v4, v1);
  int v23 = enum case for DispatchTimeInterval.seconds(_:);
  if (v22 == enum case for DispatchTimeInterval.seconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v18 + 96))(v4, v1);
    unint64_t v24 = 0x7FFFFFFFFFFFFFFFLL;
    if (*v4 <= 0) {
      unint64_t v24 = 0x8000000000000000;
    }
    if ((unsigned __int128)(*v4 * (__int128)1000000000) >> 64 == (1000000000 * *v4) >> 63) {
      Swift::UInt64 v25 = 1000000000 * *v4;
    }
    else {
      Swift::UInt64 v25 = v24;
    }
  }
  else if (v22 == enum case for DispatchTimeInterval.milliseconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v45 + 96))(v4, v1);
    unint64_t v26 = 0x7FFFFFFFFFFFFFFFLL;
    if (*v4 <= 0) {
      unint64_t v26 = 0x8000000000000000;
    }
    if ((unsigned __int128)(*v4 * (__int128)1000000) >> 64 == (1000000 * *v4) >> 63) {
      Swift::UInt64 v25 = 1000000 * *v4;
    }
    else {
      Swift::UInt64 v25 = v26;
    }
  }
  else if (v22 == enum case for DispatchTimeInterval.microseconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v45 + 96))(v4, v1);
    unint64_t v33 = 0x7FFFFFFFFFFFFFFFLL;
    if (*v4 <= 0) {
      unint64_t v33 = 0x8000000000000000;
    }
    if ((unsigned __int128)(*v4 * (__int128)1000) >> 64 == (1000 * *v4) >> 63) {
      Swift::UInt64 v25 = 1000 * *v4;
    }
    else {
      Swift::UInt64 v25 = v33;
    }
  }
  else if (v22 == enum case for DispatchTimeInterval.nanoseconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v45 + 96))(v4, v1);
    Swift::UInt64 v25 = *v4;
  }
  else
  {
    if (v22 != enum case for DispatchTimeInterval.never(_:)) {
      (*(void (**)(uint64_t *, uint64_t))(v45 + 8))(v4, v1);
    }
    Swift::UInt64 v25 = 0x7FFFFFFFFFFFFFFFLL;
  }
  Hasher._combine(_:)(v25);
  uint64_t v27 = v44;
  v43(v44, v0 + v19[9], v1);
  int v28 = v21(v27, v1);
  if (v28 == v23)
  {
    (*(void (**)(uint64_t *, uint64_t))(v45 + 96))(v27, v1);
    unint64_t v29 = 0x7FFFFFFFFFFFFFFFLL;
    if (*v27 <= 0) {
      unint64_t v29 = 0x8000000000000000;
    }
    if ((unsigned __int128)(*v27 * (__int128)1000000000) >> 64 == (1000000000 * *v27) >> 63) {
      Swift::UInt64 v30 = 1000000000 * *v27;
    }
    else {
      Swift::UInt64 v30 = v29;
    }
    goto LABEL_42;
  }
  if (v28 == enum case for DispatchTimeInterval.milliseconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v45 + 96))(v27, v1);
    uint64_t v31 = *v27;
    uint64_t v32 = 1000000;
LABEL_37:
    Swift::UInt64 v34 = v31 * v32;
    BOOL v35 = (unsigned __int128)(v31 * (__int128)v32) >> 64 != (v31 * v32) >> 63;
    BOOL v36 = v31 <= 0;
    unint64_t v37 = 0x7FFFFFFFFFFFFFFFLL;
    if (v36) {
      unint64_t v37 = 0x8000000000000000;
    }
    if (v35) {
      Swift::UInt64 v30 = v37;
    }
    else {
      Swift::UInt64 v30 = v34;
    }
    goto LABEL_42;
  }
  if (v28 == enum case for DispatchTimeInterval.microseconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v45 + 96))(v27, v1);
    uint64_t v31 = *v27;
    uint64_t v32 = 1000;
    goto LABEL_37;
  }
  if (v28 == enum case for DispatchTimeInterval.nanoseconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v45 + 96))(v27, v1);
    Swift::UInt64 v30 = *v27;
  }
  else
  {
    if (v28 != enum case for DispatchTimeInterval.never(_:)) {
      (*(void (**)(uint64_t *, uint64_t))(v45 + 8))(v27, v1);
    }
    Swift::UInt64 v30 = 0x7FFFFFFFFFFFFFFFLL;
  }
LABEL_42:
  Hasher._combine(_:)(v30);
  Hasher._combine(_:)(*(_DWORD *)(v0 + v19[10]));
  Hasher._combine(_:)(*(_DWORD *)(v0 + v19[11]));
  Hasher._combine(_:)(*(void *)(v0 + v19[12]));
  Hasher._combine(_:)(*(_DWORD *)(v0 + v19[13]));
  Hasher._combine(_:)(*(void *)(v0 + v19[14]));
  Hasher._combine(_:)(*(_DWORD *)(v0 + v19[15]));
  uint64_t v38 = *(void *)(v0 + v19[16]);
  Hasher._combine(_:)(*(void *)(v38 + 16));
  uint64_t v39 = *(void *)(v38 + 16);
  if (v39)
  {
    uint64_t v40 = (Swift::UInt8 *)(v38 + 32);
    do
    {
      Swift::UInt8 v41 = *v40++;
      Hasher._combine(_:)(v41);
      --v39;
    }
    while (v39);
  }
}

Swift::Int AWDLActionFrame.Header.hashValue.getter()
{
  return sub_1000FA1C0((void (*)(unsigned char *))AWDLActionFrame.Header.hash(into:));
}

Swift::Int sub_1000FA1C0(void (*a1)(unsigned char *))
{
  Hasher.init(_seed:)();
  a1(v3);
  return Hasher._finalize()();
}

Swift::Int sub_1000FA208(uint64_t a1, uint64_t a2)
{
  return sub_1000FA220(a1, a2, (void (*)(unsigned char *))AWDLActionFrame.Header.hash(into:));
}

Swift::Int sub_1000FA220(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *))
{
  Hasher.init(_seed:)();
  a3(v5);
  return Hasher._finalize()();
}

Swift::Int sub_1000FA26C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FA284(a1, a2, a3, (void (*)(unsigned char *))AWDLActionFrame.Header.hash(into:));
}

Swift::Int sub_1000FA284(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  Hasher.init(_seed:)();
  a4(v6);
  return Hasher._finalize()();
}

uint64_t sub_1000FA2C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_1000FB76C(a2, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(void *)(v10 + 8 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v10 + 8 * v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1  = a2;
  return result;
}

uint64_t sub_1000FA3C4(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v7 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v28 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    id v24 = a2;
    sub_1000FB890((uint64_t)v24, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v28;
    swift_bridgeObjectRelease();
    *a1  = v24;
    return 1;
  }
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;
  if (v10 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v12 == v13)
  {
LABEL_16:
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
    {
      uint64_t v16 = ~v8;
      do
      {
        unint64_t v9 = (v9 + 1) & v16;
        if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
          goto LABEL_15;
        }
        uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v19 = v18;
        if (v17 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v19 == v20) {
          goto LABEL_16;
        }
        char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      while ((v22 & 1) == 0);
    }
  }

  swift_bridgeObjectRelease();
  unint64_t v26 = *(void **)(*(void *)(*v3 + 48) + 8 * v9);
  *a1  = v26;
  id v27 = v26;
  return 0;
}

uint64_t sub_1000FA5F0(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = a1;
  uint64_t v4 = *(void *)(type metadata accessor for AWDLPeer.AdvertisedService(0) - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v30 - v7;
  uint64_t v31 = v2;
  uint64_t v9 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  AWDLPeer.AdvertisedService.hash(into:)();
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  uint64_t v37 = v9 + 56;
  if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  Swift::UInt64 v30 = v8;
  uint64_t v34 = ~v11;
  uint64_t v35 = v9;
  uint64_t v36 = *(void *)(v4 + 72);
  do
  {
    uint64_t v13 = *(void *)(v9 + 48);
    unint64_t v33 = v36 * v12;
    sub_1001037C8(v13 + v36 * v12, (uint64_t)v6, type metadata accessor for AWDLPeer.AdvertisedService);
    uint64_t v14 = *((void *)v6 + 1);
    uint64_t v15 = *((void *)v6 + 2);
    uint64_t v16 = *((void *)v6 + 3);
    uint64_t v17 = *((void *)v6 + 4);
    int v18 = v6[40];
    int v39 = v6[41];
    int v40 = v18;
    uint64_t v19 = *(void *)(a2 + 8);
    uint64_t v20 = *(void *)(a2 + 16);
    uint64_t v22 = *(void *)(a2 + 24);
    uint64_t v21 = *(void *)(a2 + 32);
    int v23 = *(unsigned __int8 *)(a2 + 40);
    int v38 = *(unsigned __int8 *)(a2 + 41);
    uint64_t v43 = v14;
    uint64_t v44 = v15;
    uint64_t v41 = v19;
    uint64_t v42 = v20;
    sub_10001D82C();
    if (StringProtocol.caseInsensitiveCompare<A>(_:)()
      || (v43 = v16, v44 = v17, uint64_t v41 = v22, v42 = v21, StringProtocol.caseInsensitiveCompare<A>(_:)()))
    {
LABEL_3:
      sub_100103830((uint64_t)v6, type metadata accessor for AWDLPeer.AdvertisedService);
      uint64_t v9 = v35;
      goto LABEL_4;
    }
    if (v40) {
      uint64_t v24 = 7365749;
    }
    else {
      uint64_t v24 = 7365492;
    }
    if (v23) {
      uint64_t v25 = 7365749;
    }
    else {
      uint64_t v25 = 7365492;
    }
    if (v24 == v25)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease_n();
      if ((v26 & 1) == 0) {
        goto LABEL_3;
      }
    }
    sub_100103830((uint64_t)v6, type metadata accessor for AWDLPeer.AdvertisedService);
    uint64_t v9 = v35;
    if (v39 == v38)
    {
      swift_bridgeObjectRelease();
      sub_100103830(a2, type metadata accessor for AWDLPeer.AdvertisedService);
      sub_1001037C8(*(void *)(*v31 + 48) + v33, v32, type metadata accessor for AWDLPeer.AdvertisedService);
      return 0;
    }
LABEL_4:
    unint64_t v12 = (v12 + 1) & v34;
  }
  while (((*(void *)(v37 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) != 0);
  swift_bridgeObjectRelease();
  uint64_t v8 = v30;
LABEL_20:
  uint64_t v28 = v31;
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
  sub_1001037C8(a2, (uint64_t)v8, type metadata accessor for AWDLPeer.AdvertisedService);
  uint64_t v43 = *v28;
  *uint64_t v28 = 0x8000000000000000;
  sub_1000FBAC0((uint64_t)v8, v12, isUniquelyReferenced_nonNull_native);
  *uint64_t v28 = v43;
  swift_bridgeObjectRelease();
  sub_10010419C(a2, v32, type metadata accessor for AWDLPeer.AdvertisedService);
  return 1;
}

uint64_t sub_1000FA9B8(unsigned char *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:bytes:count:)();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_1000FBE10(a2, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(unsigned __int8 *)(v10 + v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(unsigned __int8 *)(v10 + v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1  = a2;
  return result;
}

uint64_t sub_1000FAABC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100010BCC(&qword_10047FB08);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v26 = -1 << v7;
    id v27 = v1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64) {
                  bzero((void *)(v2 + 56), 8 * v10);
                }
                else {
                  *uint64_t v6 = v26;
                }
                uint64_t v1 = v27;
                *(void *)(v2 + 16)  = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12)  = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_1000FAD40()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100010BCC(&qword_10047FB70);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    id v27 = v0;
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    unint64_t v29 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v28 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v12 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v13 = v12 | (v10 << 6);
      }
      else
      {
        int64_t v14 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v14 >= v28) {
          goto LABEL_33;
        }
        unint64_t v15 = v29[v14];
        ++v10;
        if (!v15)
        {
          int64_t v10 = v14 + 1;
          if (v14 + 1 >= v28) {
            goto LABEL_33;
          }
          unint64_t v15 = v29[v10];
          if (!v15)
          {
            int64_t v10 = v14 + 2;
            if (v14 + 2 >= v28) {
              goto LABEL_33;
            }
            unint64_t v15 = v29[v10];
            if (!v15)
            {
              int64_t v16 = v14 + 3;
              if (v16 >= v28)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v27;
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero(v29, ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v29 = -1 << v26;
                }
                *(void *)(v2 + 16)  = 0;
                break;
              }
              unint64_t v15 = v29[v16];
              if (!v15)
              {
                while (1)
                {
                  int64_t v10 = v16 + 1;
                  if (__OFADD__(v16, 1)) {
                    goto LABEL_39;
                  }
                  if (v10 >= v28) {
                    goto LABEL_33;
                  }
                  unint64_t v15 = v29[v10];
                  ++v16;
                  if (v15) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v10 = v16;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v15 - 1) & v15;
        unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
      }
      uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Hasher.init(_seed:)();
      String.hash(into:)();
      Swift::Int v18 = Hasher._finalize()();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = v18 & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v8 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v20) & ~*(void *)(v8 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v8 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v11 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      *(void *)(*(void *)(v4 + 48) + 8 * v11)  = v17;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_1000FB054()
{
  uint64_t v1 = v0;
  uint64_t v35 = *(void *)(type metadata accessor for AWDLPeer.AdvertisedService(0) - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_100010BCC((uint64_t *)&unk_100486B40);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v31 = v0;
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    unint64_t v33 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    int64_t v32 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v34 = v4;
    while (1)
    {
      if (v10)
      {
        int64_t v37 = v13;
        uint64_t v38 = (v10 - 1) & v10;
        unint64_t v15 = __clz(__rbit64(v10)) | (v13 << 6);
      }
      else
      {
        int64_t v16 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v32) {
          goto LABEL_33;
        }
        unint64_t v17 = v33[v16];
        int64_t v18 = v13 + 1;
        if (!v17)
        {
          int64_t v18 = v13 + 2;
          if (v13 + 2 >= v32) {
            goto LABEL_33;
          }
          unint64_t v17 = v33[v18];
          if (!v17)
          {
            int64_t v18 = v13 + 3;
            if (v13 + 3 >= v32) {
              goto LABEL_33;
            }
            unint64_t v17 = v33[v18];
            if (!v17)
            {
              uint64_t v19 = v13 + 4;
              if (v13 + 4 >= v32)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v31;
                uint64_t v29 = 1 << *(unsigned char *)(v4 + 32);
                if (v29 > 63) {
                  bzero(v33, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v33 = -1 << v29;
                }
                *(void *)(v4 + 16)  = 0;
                break;
              }
              unint64_t v17 = v33[v19];
              if (!v17)
              {
                while (1)
                {
                  int64_t v18 = v19 + 1;
                  if (__OFADD__(v19, 1)) {
                    goto LABEL_39;
                  }
                  if (v18 >= v32) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v33[v18];
                  ++v19;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v18 = v13 + 4;
            }
          }
        }
LABEL_23:
        int64_t v37 = v18;
        uint64_t v38 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v18 << 6);
      }
      uint64_t v20 = *(void *)(v4 + 48);
      uint64_t v36 = *(void *)(v35 + 72);
      sub_10010419C(v20 + v36 * v15, (uint64_t)v3, type metadata accessor for AWDLPeer.AdvertisedService);
      Hasher.init(_seed:)();
      Swift::UInt8 v21 = v3[41];
      String.lowercased()();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      String.lowercased()();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(v21);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v11 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v23) & ~*(void *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
        unint64_t v10 = v38;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        unint64_t v10 = v38;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v11 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      uint64_t result = sub_10010419C((uint64_t)v3, *(void *)(v6 + 48) + v14 * v36, type metadata accessor for AWDLPeer.AdvertisedService);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v34;
      int64_t v13 = v37;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t sub_1000FB4D4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100010BCC((uint64_t *)&unk_10047C900);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    BOOL v27 = v1;
    int64_t v5 = 0;
    uint64_t v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v26;
                }
                uint64_t v1 = v27;
                *(void *)(v2 + 16)  = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      char v18 = *(unsigned char *)(*(void *)(v2 + 48) + v14);
      uint64_t result = static Hasher._hash(seed:bytes:count:)();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(unsigned char *)(*(void *)(v4 + 48) + v12)  = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_1000FB76C(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_1000FAABC();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_1001736D8();
      goto LABEL_14;
    }
    sub_1000FBF38();
  }
  uint64_t v8 = *v3;
  uint64_t result = static Hasher._hash(seed:_:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2  = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2  = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2)  = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16)  = v15;
  }
  return result;
}

uint64_t sub_1000FB890(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_22;
  }
  if (a3)
  {
    sub_1000FAD40();
  }
  else
  {
    if (v8 > v7)
    {
      uint64_t result = (uint64_t)sub_100173870();
LABEL_22:
      uint64_t v25 = *v4;
      *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
      *(void *)(*(void *)(v25 + 48) + 8 * a2)  = v6;
      uint64_t v26 = *(void *)(v25 + 16);
      BOOL v27 = __OFADD__(v26, 1);
      uint64_t v28 = v26 + 1;
      if (!v27)
      {
        *(void *)(v25 + 16)  = v28;
        return result;
      }
      __break(1u);
      goto LABEL_25;
    }
    sub_1000FC19C();
  }
  uint64_t v9 = *v3;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v10 = Hasher._finalize()();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  a2  = v10 & ~v11;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
    goto LABEL_22;
  }
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;
  if (v12 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v14 == v15)
  {
LABEL_25:
    swift_bridgeObjectRelease_n();
    goto LABEL_26;
  }
  char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v17 & 1) == 0)
  {
    uint64_t v18 = ~v11;
    do
    {
      a2  = (a2 + 1) & v18;
      if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
        goto LABEL_22;
      }
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v20;
      if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v21 == v22) {
        goto LABEL_25;
      }
      char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
    }
    while ((v24 & 1) == 0);
  }
LABEL_26:
  type metadata accessor for AWDLTrafficRegistrationService(0);
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1000FBAC0(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v7 = type metadata accessor for AWDLPeer.AdvertisedService(0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  Swift::Int v10 = (char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  uint64_t v35 = v8;
  uint64_t v36 = v3;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_25;
  }
  if (a3)
  {
    sub_1000FB054();
  }
  else
  {
    if (v12 > v11)
    {
      sub_100173A1C();
      goto LABEL_25;
    }
    sub_1000FC47C();
  }
  uint64_t v13 = *v3;
  Hasher.init(_seed:)();
  AWDLPeer.AdvertisedService.hash(into:)();
  Swift::Int v14 = Hasher._finalize()();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2  = v14 & ~v15;
  uint64_t v39 = v13 + 56;
  uint64_t v40 = v13;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    v34[1]  = v7;
    uint64_t v38 = ~v15;
    uint64_t v37 = *(void *)(v8 + 72);
    while (1)
    {
      sub_1001037C8(*(void *)(v40 + 48) + v37 * a2, (uint64_t)v10, type metadata accessor for AWDLPeer.AdvertisedService);
      uint64_t v16 = *((void *)v10 + 1);
      uint64_t v17 = *((void *)v10 + 2);
      uint64_t v18 = *((void *)v10 + 3);
      uint64_t v19 = *((void *)v10 + 4);
      int v20 = v10[40];
      int v42 = v10[41];
      int v43 = v20;
      uint64_t v21 = *(void *)(a1 + 8);
      uint64_t v22 = *(void *)(a1 + 16);
      uint64_t v23 = *(void *)(a1 + 24);
      uint64_t v24 = *(void *)(a1 + 32);
      int v25 = *(unsigned __int8 *)(a1 + 40);
      int v41 = *(unsigned __int8 *)(a1 + 41);
      uint64_t v46 = v16;
      uint64_t v47 = v17;
      uint64_t v44 = v21;
      uint64_t v45 = v22;
      sub_10001D82C();
      if (StringProtocol.caseInsensitiveCompare<A>(_:)()) {
        break;
      }
      uint64_t v46 = v18;
      uint64_t v47 = v19;
      uint64_t v44 = v23;
      uint64_t v45 = v24;
      if (StringProtocol.caseInsensitiveCompare<A>(_:)()) {
        break;
      }
      if (v43) {
        uint64_t v26 = 7365749;
      }
      else {
        uint64_t v26 = 7365492;
      }
      if (v25) {
        uint64_t v27 = 7365749;
      }
      else {
        uint64_t v27 = 7365492;
      }
      if (v26 == v27)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease_n();
        if ((v28 & 1) == 0) {
          break;
        }
      }
      sub_100103830((uint64_t)v10, type metadata accessor for AWDLPeer.AdvertisedService);
      if (v42 == v41)
      {
        ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        goto LABEL_25;
      }
LABEL_11:
      a2  = (a2 + 1) & v38;
      if (((*(void *)(v39 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
        goto LABEL_25;
      }
    }
    sub_100103830((uint64_t)v10, type metadata accessor for AWDLPeer.AdvertisedService);
    goto LABEL_11;
  }
LABEL_25:
  uint64_t v29 = *v36;
  *(void *)(*v36 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = sub_10010419C(a1, *(void *)(v29 + 48) + *(void *)(v35 + 72) * a2, type metadata accessor for AWDLPeer.AdvertisedService);
  uint64_t v31 = *(void *)(v29 + 16);
  BOOL v32 = __OFADD__(v31, 1);
  uint64_t v33 = v31 + 1;
  if (v32) {
    __break(1u);
  }
  else {
    *(void *)(v29 + 16)  = v33;
  }
  return result;
}

uint64_t sub_1000FBE10(uint64_t result, unint64_t a2, char a3)
{
  int v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_1000FB4D4();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_100173C80();
      goto LABEL_14;
    }
    sub_1000FC8CC();
  }
  uint64_t v8 = *v3;
  uint64_t result = static Hasher._hash(seed:bytes:count:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2  = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(unsigned __int8 *)(v10 + a2) == v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2  = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(unsigned __int8 *)(v10 + a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(unsigned char *)(*(void *)(v12 + 48) + a2)  = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16)  = v15;
  }
  return result;
}

uint64_t sub_1000FBF38()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100010BCC(&qword_10047FB08);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v26 = v1;
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12)  = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000FC19C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100010BCC(&qword_10047FB70);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v27 = v0;
  uint64_t v28 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    int64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v29) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v28 + 8 * v14);
    ++v10;
    if (!v15)
    {
      int64_t v10 = v14 + 1;
      if (v14 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v28 + 8 * v10);
      if (!v15)
      {
        int64_t v10 = v14 + 2;
        if (v14 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v15 = *(void *)(v28 + 8 * v10);
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    int64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v13);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    id v18 = v17;
    String.hash(into:)();
    Swift::Int v19 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = v19 & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v8 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v21) & ~*(void *)(v8 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v8 + 8 * v22);
      }
      while (v26 == -1);
      unint64_t v11 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(void *)(*(void *)(v4 + 48) + 8 * v11)  = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v27;
    goto LABEL_35;
  }
  unint64_t v15 = *(void *)(v28 + 8 * v16);
  if (v15)
  {
    int64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v29) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v28 + 8 * v10);
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000FC47C()
{
  uint64_t v1 = v0;
  uint64_t v34 = *(void *)(type metadata accessor for AWDLPeer.AdvertisedService(0) - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_100010BCC((uint64_t *)&unk_100486B40);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v6;
    return result;
  }
  uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v8 = *(void *)(v4 + 56);
  uint64_t v30 = v1;
  uint64_t v31 = v4 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1 << v7);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & v8;
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = v5 + 56;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  uint64_t v33 = v4;
  while (1)
  {
    if (v10)
    {
      int64_t v36 = v13;
      uint64_t v37 = (v10 - 1) & v10;
      unint64_t v15 = __clz(__rbit64(v10)) | (v13 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v32) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v31 + 8 * v16);
    int64_t v18 = v13 + 1;
    if (!v17)
    {
      int64_t v18 = v13 + 2;
      if (v13 + 2 >= v32) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v31 + 8 * v18);
      if (!v17)
      {
        int64_t v18 = v13 + 3;
        if (v13 + 3 >= v32) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v31 + 8 * v18);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    int64_t v36 = v18;
    uint64_t v37 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v18 << 6);
LABEL_24:
    uint64_t v20 = *(void *)(v4 + 48);
    uint64_t v35 = *(void *)(v34 + 72);
    sub_1001037C8(v20 + v35 * v15, (uint64_t)v3, type metadata accessor for AWDLPeer.AdvertisedService);
    Hasher.init(_seed:)();
    Swift::UInt8 v21 = v3[41];
    String.lowercased()();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    String.lowercased()();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v11 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v23) & ~*(void *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v4 = v33;
      unint64_t v10 = v37;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      uint64_t v4 = v33;
      unint64_t v10 = v37;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v14 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    uint64_t result = sub_10010419C((uint64_t)v3, *(void *)(v6 + 48) + v14 * v35, type metadata accessor for AWDLPeer.AdvertisedService);
    ++*(void *)(v6 + 16);
    int64_t v13 = v36;
  }
  uint64_t v19 = v13 + 4;
  if (v13 + 4 >= v32)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v30;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v31 + 8 * v19);
  if (v17)
  {
    int64_t v18 = v13 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v18 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v18 >= v32) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v31 + 8 * v18);
    ++v19;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000FC8CC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100010BCC((uint64_t *)&unk_10047C900);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t v26 = v1;
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    char v18 = *(unsigned char *)(*(void *)(v2 + 48) + v14);
    uint64_t result = static Hasher._hash(seed:bytes:count:)();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(unsigned char *)(*(void *)(v4 + 48) + v12)  = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t _s7CoreP2P15AWDLActionFrameV15ServiceResponseO21__derived_enum_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  Swift::UInt16 v66 = (int *)type metadata accessor for DNSRecords.SRV();
  __chkstk_darwin();
  int64_t v5 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AWDLActionFrame.ServiceResponse(0);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v9 = (char *)&v60 - v8;
  __chkstk_darwin();
  uint64_t v11 = (char *)&v60 - v10;
  sub_100010BCC(&qword_10047FC40);
  uint64_t v12 = __chkstk_darwin();
  unint64_t v14 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (uint64_t)&v14[*(int *)(v12 + 56)];
  sub_1001037C8(a1, (uint64_t)v14, type metadata accessor for AWDLActionFrame.ServiceResponse);
  sub_1001037C8(a2, v15, type metadata accessor for AWDLActionFrame.ServiceResponse);
  EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_1001037C8((uint64_t)v14, (uint64_t)v9, type metadata accessor for AWDLActionFrame.ServiceResponse);
      uint64_t v17 = *((void *)v9 + 1);
      Swift::UInt16 v66 = (int *)*((void *)v9 + 2);
      uint64_t v18 = *((void *)v9 + 3);
      __int16 v19 = v9[32];
      __int16 v20 = v9[33];
      uint64_t v22 = *((void *)v9 + 5);
      unint64_t v21 = *((void *)v9 + 6);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v64 = v22;
        unint64_t v65 = v21;
        uint64_t v23 = *(void *)v9;
        uint64_t v24 = *(void *)v15;
        uint64_t v25 = *(void *)(v15 + 8);
        uint64_t v26 = *(void *)(v15 + 24);
        uint64_t v63 = *(void *)(v15 + 16);
        int v27 = *(unsigned __int8 *)(v15 + 32);
        int v61 = *(unsigned __int8 *)(v15 + 33);
        int v62 = v27;
        uint64_t v29 = *(void *)(v15 + 40);
        unint64_t v28 = *(void *)(v15 + 48);
        uint64_t v69 = v23;
        uint64_t v70 = v17;
        uint64_t v67 = v24;
        uint64_t v68 = v25;
        sub_10001D82C();
        if (!StringProtocol.caseInsensitiveCompare<A>(_:)()
          && sub_10012625C((uint64_t)v66, v18, v19 | (v20 << 8), v63, v26, v62 | ((_WORD)v61 << 8)))
        {
          uint64_t v31 = v64;
          unint64_t v30 = v65;
          char v32 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v64, v65, v29, v28);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_10000C970(v29, v28);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_10000C970(v31, v30);
          if ((v32 & 1) == 0) {
            goto LABEL_29;
          }
LABEL_28:
          sub_100103830((uint64_t)v14, type metadata accessor for AWDLActionFrame.ServiceResponse);
          return 1;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10000C970(v29, v28);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10000C970(v64, v65);
        goto LABEL_29;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10000C970(v22, v21);
    }
    else
    {
      sub_1001037C8((uint64_t)v14, (uint64_t)v7, type metadata accessor for AWDLActionFrame.ServiceResponse);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        sub_10010419C(v15, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for DNSRecords.SRV);
        uint64_t v38 = *(void *)v7;
        uint64_t v39 = *((void *)v7 + 1);
        unint64_t v40 = *((void *)v7 + 2);
        uint64_t v64 = *((void *)v7 + 3);
        unint64_t v65 = v40;
        __int16 v41 = v7[32];
        __int16 v42 = v7[33];
        uint64_t v43 = *(void *)v5;
        uint64_t v44 = *((void *)v5 + 1);
        uint64_t v45 = *((void *)v5 + 2);
        uint64_t v46 = *((void *)v5 + 3);
        __int16 v47 = v5[32];
        __int16 v48 = v5[33];
        uint64_t v69 = v38;
        uint64_t v70 = v39;
        uint64_t v67 = v43;
        uint64_t v68 = v44;
        sub_10001D82C();
        if (!StringProtocol.caseInsensitiveCompare<A>(_:)()
          && sub_10012625C(v65, v64, v41 | (v42 << 8), v45, v46, v47 | (v48 << 8)))
        {
          type metadata accessor for NWEndpoint.Port();
          sub_100104154(&qword_10047E1B0, (void (*)(uint64_t))&type metadata accessor for NWEndpoint.Port);
          dispatch thunk of RawRepresentable.rawValue.getter();
          dispatch thunk of RawRepresentable.rawValue.getter();
          if ((unsigned __int16)v69 == (unsigned __int16)v67)
          {
            if ((uint64_t v49 = v66[6],
                  uint64_t v50 = *(void *)&v7[v49],
                  uint64_t v51 = *(void *)&v7[v49 + 8],
                  Swift::UInt8 v52 = &v5[v49],
                  v50 == *(void *)v52)
              && v51 == *((void *)v52 + 1)
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              if (*(unsigned __int16 *)&v7[v66[7]] == *(unsigned __int16 *)&v5[v66[7]]
                && *(unsigned __int16 *)&v7[v66[8]] == *(unsigned __int16 *)&v5[v66[8]])
              {
                sub_100103830((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for DNSRecords.SRV);
                sub_100103830((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for DNSRecords.SRV);
                goto LABEL_28;
              }
            }
          }
        }
        sub_100103830((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for DNSRecords.SRV);
        sub_100103830((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for DNSRecords.SRV);
LABEL_29:
        sub_100103830((uint64_t)v14, type metadata accessor for AWDLActionFrame.ServiceResponse);
        return 0;
      }
      sub_100103830((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for DNSRecords.SRV);
    }
  }
  else
  {
    sub_1001037C8((uint64_t)v14, (uint64_t)v11, type metadata accessor for AWDLActionFrame.ServiceResponse);
    uint64_t v33 = *((void *)v11 + 1);
    uint64_t v34 = *((void *)v11 + 2);
    uint64_t v35 = *((void *)v11 + 3);
    __int16 v36 = v11[32];
    __int16 v37 = v11[33];
    if (!swift_getEnumCaseMultiPayload())
    {
      uint64_t v53 = *(void *)v11;
      uint64_t v54 = *(void *)v15;
      uint64_t v55 = *(void *)(v15 + 8);
      uint64_t v56 = *(void *)(v15 + 24);
      Swift::UInt16 v66 = *(int **)(v15 + 16);
      uint64_t v67 = v54;
      LODWORD(v65)  = *(unsigned __int8 *)(v15 + 32);
      __int16 v57 = *(unsigned __int8 *)(v15 + 33);
      uint64_t v69 = v53;
      uint64_t v70 = v33;
      uint64_t v68 = v55;
      sub_10001D82C();
      if (StringProtocol.caseInsensitiveCompare<A>(_:)())
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        BOOL v58 = sub_10012625C(v34, v35, v36 | (v37 << 8), (uint64_t)v66, v56, v65 | (v57 << 8));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v58) {
          goto LABEL_28;
        }
      }
      goto LABEL_29;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_1000380B4((uint64_t)v14, &qword_10047FC40);
  return 0;
}

uint64_t _s7CoreP2P15AWDLActionFrameV24SynchronizationParameterV23__derived_struct_equalsySbAE_AEtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2
    || *((unsigned __int16 *)a1 + 1) != *((unsigned __int16 *)a2 + 1)
    || a1[4] != a2[4]
    || a1[5] != a2[5]
    || *((unsigned __int16 *)a1 + 3) != *((unsigned __int16 *)a2 + 3)
    || *((unsigned __int16 *)a1 + 4) != *((unsigned __int16 *)a2 + 4)
    || *((unsigned __int16 *)a1 + 5) != *((unsigned __int16 *)a2 + 5)
    || *((unsigned __int16 *)a1 + 6) != *((unsigned __int16 *)a2 + 6)
    || *((unsigned __int16 *)a1 + 7) != *((unsigned __int16 *)a2 + 7)
    || *((unsigned __int16 *)a1 + 8) != *((unsigned __int16 *)a2 + 8)
    || a1[18] != a2[18]
    || a1[19] != a2[19]
    || a1[20] != a2[20]
    || a1[21] != a2[21])
  {
    return 0;
  }
  BOOL v2 = *(_DWORD *)(a1 + 22) == *(_DWORD *)(a2 + 22) && *((unsigned __int16 *)a1 + 13) == *((unsigned __int16 *)a2 + 13);
  if (!v2
    || a1[28] != a2[28]
    || a1[29] != a2[29]
    || *((unsigned __int16 *)a1 + 15) != *((unsigned __int16 *)a2 + 15)
    || *((unsigned __int16 *)a1 + 16) != *((unsigned __int16 *)a2 + 16))
  {
    return 0;
  }
  uint64_t v3 = *((void *)a1 + 5);
  uint64_t v4 = *((void *)a2 + 5);

  return _s7CoreP2P15AWDLActionFrameV28AWDLChannelSequenceParameterV23__derived_struct_equalsySbAE_AEtFZ_0(v3, v4);
}

uint64_t _s7CoreP2P15AWDLActionFrameV6HeaderV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2 || *(unsigned __int16 *)(a1 + 4) != *(unsigned __int16 *)(a2 + 4)) {
    return 0;
  }
  BOOL v5 = *(_DWORD *)(a1 + 6) == *(_DWORD *)(a2 + 6) && *(unsigned __int16 *)(a1 + 10) == *(unsigned __int16 *)(a2 + 10);
  if (!v5
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || ((0x801004u >> (8 * *(unsigned char *)(a1 + 16))) & 0xFFC) != ((0x801004u >> (8 * *(unsigned char *)(a2 + 16))) & 0xFFC))
  {
    return 0;
  }
  int v6 = *(unsigned __int8 *)(a2 + 17);
  switch(*(unsigned char *)(a1 + 17))
  {
    case 2:
      if (v6 != 2) {
        return 0;
      }
      break;
    case 3:
      if (v6 != 3) {
        return 0;
      }
      break;
    case 4:
      if (v6 != 4) {
        return 0;
      }
      break;
    case 5:
      if (v6 != 5) {
        return 0;
      }
      break;
    case 6:
      if (v6 != 6) {
        return 0;
      }
      break;
    default:
      if ((v6 - 2) < 5 || ((((*(unsigned char *)(a1 + 17) & 1) == 0) ^ v6) & 1) == 0) {
        return 0;
      }
      break;
  }
  if (*(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  uint64_t v7 = (int *)type metadata accessor for AWDLActionFrame.Header(0);
  if ((static DispatchTimeInterval.== infix(_:_:)() & 1) == 0
    || (static DispatchTimeInterval.== infix(_:_:)() & 1) == 0
    || *(_DWORD *)(a1 + v7[10]) != *(_DWORD *)(a2 + v7[10])
    || *(_DWORD *)(a1 + v7[11]) != *(_DWORD *)(a2 + v7[11])
    || *(void *)(a1 + v7[12]) != *(void *)(a2 + v7[12])
    || *(_DWORD *)(a1 + v7[13]) != *(_DWORD *)(a2 + v7[13])
    || *(void *)(a1 + v7[14]) != *(void *)(a2 + v7[14])
    || *(_DWORD *)(a1 + v7[15]) != *(_DWORD *)(a2 + v7[15]))
  {
    return 0;
  }
  uint64_t v8 = v7[16];
  uint64_t v9 = *(void *)(a1 + v8);
  uint64_t v10 = *(void *)(a2 + v8);

  return sub_1000956AC(v9, v10);
}

BOOL _s7CoreP2P15AWDLActionFrameV13RealtimeGroupV23__derived_struct_equalsySbAE_AEtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 1) != *(_DWORD *)(a2 + 1) || *(unsigned __int16 *)(a1 + 5) != *(unsigned __int16 *)(a2 + 5)) {
    return 0;
  }
  unint64_t v4 = *((unsigned int *)a1 + 2) | ((unint64_t)*((unsigned __int16 *)a1 + 6) << 32);
  unint64_t v5 = *((unsigned int *)a2 + 2) | ((unint64_t)*((unsigned __int16 *)a2 + 6) << 32);
  uint64_t v6 = v5 & 0xFF00000000;
  if ((v4 & 0xFF00000000) != 0x300000000)
  {
    if (v6 != 0x300000000
      && *((_DWORD *)a1 + 2) == *((_DWORD *)a2 + 2)
      && ((0x801004u >> ((v4 >> 29) & 0xF8)) & 0xFFC) == ((0x801004u >> ((v5 >> 29) & 0xF8)) & 0xFFC))
    {
      unint64_t v11 = v5 >> 40;
      switch(v4 >> 40)
      {
        case 2uLL:
          if (v11 == 2) {
            goto LABEL_9;
          }
          return 0;
        case 3uLL:
          if (v11 == 3) {
            goto LABEL_9;
          }
          return 0;
        case 4uLL:
          if (v11 == 4) {
            goto LABEL_9;
          }
          return 0;
        case 5uLL:
          if (v11 == 5) {
            goto LABEL_9;
          }
          return 0;
        case 6uLL:
          if (v11 == 6) {
            goto LABEL_9;
          }
          return 0;
        default:
          if ((v11 - 2) >= 5 && ((v4 & 0x10000000000) == 0) != ((v5 >> 40) & 1)) {
            goto LABEL_9;
          }
          return 0;
      }
    }
    return 0;
  }
  if (v6 != 0x300000000) {
    return 0;
  }
LABEL_9:
  if (*((void *)a1 + 2) != *((void *)a2 + 2) || a1[24] != a2[24]) {
    return 0;
  }
  unint64_t v7 = *((unsigned int *)a1 + 7) | ((unint64_t)*((unsigned __int16 *)a1 + 16) << 32);
  unint64_t v8 = *((unsigned int *)a2 + 7) | ((unint64_t)*((unsigned __int16 *)a2 + 16) << 32);
  uint64_t v9 = v8 & 0xFF00000000;
  if ((v7 & 0xFF00000000) != 0x300000000)
  {
    if (v9 != 0x300000000
      && *((_DWORD *)a1 + 7) == *((_DWORD *)a2 + 7)
      && ((0x801004u >> ((v7 >> 29) & 0xF8)) & 0xFFC) == ((0x801004u >> ((v8 >> 29) & 0xF8)) & 0xFFC))
    {
      unint64_t v12 = v8 >> 40;
      switch(v7 >> 40)
      {
        case 2uLL:
          if (v12 == 2) {
            return *(_DWORD *)(a1 + 34) == *(_DWORD *)(a2 + 34)
          }
                && *((unsigned __int16 *)a1 + 19) == *((unsigned __int16 *)a2 + 19);
          return 0;
        case 3uLL:
          if (v12 == 3) {
            return *(_DWORD *)(a1 + 34) == *(_DWORD *)(a2 + 34)
          }
                && *((unsigned __int16 *)a1 + 19) == *((unsigned __int16 *)a2 + 19);
          return 0;
        case 4uLL:
          if (v12 == 4) {
            return *(_DWORD *)(a1 + 34) == *(_DWORD *)(a2 + 34)
          }
                && *((unsigned __int16 *)a1 + 19) == *((unsigned __int16 *)a2 + 19);
          return 0;
        case 5uLL:
          if (v12 == 5) {
            return *(_DWORD *)(a1 + 34) == *(_DWORD *)(a2 + 34)
          }
                && *((unsigned __int16 *)a1 + 19) == *((unsigned __int16 *)a2 + 19);
          return 0;
        case 6uLL:
          if (v12 == 6) {
            return *(_DWORD *)(a1 + 34) == *(_DWORD *)(a2 + 34)
          }
                && *((unsigned __int16 *)a1 + 19) == *((unsigned __int16 *)a2 + 19);
          return 0;
        default:
          if ((v12 - 2) >= 5 && ((v7 & 0x10000000000) == 0) != ((v8 >> 40) & 1)) {
            return *(_DWORD *)(a1 + 34) == *(_DWORD *)(a2 + 34)
          }
                && *((unsigned __int16 *)a1 + 19) == *((unsigned __int16 *)a2 + 19);
          return 0;
      }
    }
    return 0;
  }
  if (v9 != 0x300000000) {
    return 0;
  }
  return *(_DWORD *)(a1 + 34) == *(_DWORD *)(a2 + 34)
      && *((unsigned __int16 *)a1 + 19) == *((unsigned __int16 *)a2 + 19);
}

BOOL _s7CoreP2P15AWDLActionFrameV17ElectionParameterV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = *(_DWORD *)a1 == *(_DWORD *)a2 && *(unsigned __int16 *)(a1 + 4) == *(unsigned __int16 *)(a2 + 4);
  if (v2
    && (*(_DWORD *)(a1 + 6) == *(_DWORD *)(a2 + 6)
      ? (BOOL v5 = *(unsigned __int16 *)(a1 + 10) == *(unsigned __int16 *)(a2 + 10))
      : (BOOL v5 = 0),
        v5
     && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
     && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
     && sub_10017B488(*(unsigned int *)(a1 + 20) | ((unint64_t)*(unsigned __int8 *)(a1 + 24) << 32), *(unsigned int *)(a2 + 20) | ((unint64_t)*(unsigned __int8 *)(a2 + 24) << 32))&& sub_10017B488(*(unsigned int *)(a1 + 28) | ((unint64_t)*(unsigned __int8 *)(a1 + 32) << 32), *(unsigned int *)(a2 + 28) | ((unint64_t)*(unsigned __int8 *)(a2 + 32) << 32))&& *(_DWORD *)(a1 + 36) == *(_DWORD *)(a2 + 36)&& *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40)))
  {
    return *(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44);
  }
  else
  {
    return 0;
  }
}

BOOL sub_1000FDAB4(unint64_t a1, unint64_t a2)
{
  if (a1 != a2
    || ((0x801004u >> ((a1 >> 29) & 0xF8)) & 0xFFC) != ((0x801004u >> ((a2 >> 29) & 0xF8)) & 0xFFC))
  {
    return 0;
  }
  switch(BYTE5(a1))
  {
    case 2:
      if (BYTE5(a2) != 2) {
        return 0;
      }
      break;
    case 3:
      if (BYTE5(a2) != 3) {
        return 0;
      }
      break;
    case 4:
      if (BYTE5(a2) != 4) {
        return 0;
      }
      break;
    case 5:
      if (BYTE5(a2) != 5) {
        return 0;
      }
      break;
    case 6:
      if (BYTE5(a2) != 6) {
        return 0;
      }
      break;
    default:
      if (BYTE5(a2) - 2 < 5 || ((a1 & 0x10000000000) == 0) == ((a2 >> 40) & 1)) {
        return 0;
      }
      break;
  }
  return BYTE6(a1) == BYTE6(a2);
}

uint64_t sub_1000FDBB0(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a1 != a3
    || ((0x801004u >> ((a1 >> 29) & 0xF8)) & 0xFFC) != ((0x801004u >> ((a3 >> 29) & 0xF8)) & 0xFFC))
  {
    return 0;
  }
  switch(BYTE5(a1))
  {
    case 2:
      if (BYTE5(a3) != 2) {
        return 0;
      }
      break;
    case 3:
      if (BYTE5(a3) != 3) {
        return 0;
      }
      break;
    case 4:
      if (BYTE5(a3) != 4) {
        return 0;
      }
      break;
    case 5:
      if (BYTE5(a3) != 5) {
        return 0;
      }
      break;
    case 6:
      if (BYTE5(a3) != 6) {
        return 0;
      }
      break;
    default:
      if (BYTE5(a3) - 2 < 5 || ((a1 & 0x10000000000) == 0) == ((a3 >> 40) & 1)) {
        return 0;
      }
      break;
  }
  return sub_100096228(a2, a4);
}

BOOL _s7CoreP2P15AWDLActionFrameV18NANSynchronizationV23__derived_struct_equalsySbAE_AEtFZ_0(unsigned __int16 *a1, unsigned __int16 *a2)
{
  if (*a1 == *a2
    && (*(_DWORD *)(a1 + 1) == *(_DWORD *)(a2 + 1) ? (BOOL v2 = a1[3] == a2[3]) : (BOOL v2 = 0),
        v2
     && (*((_DWORD *)a1 + 2) == *((_DWORD *)a2 + 2) ? (BOOL v3 = a1[6] == a2[6]) : (BOOL v3 = 0),
         v3
      && *((void *)a1 + 2) == *((void *)a2 + 2)
      && *((unsigned __int8 *)a1 + 24) == *((unsigned __int8 *)a2 + 24)
      && *((unsigned __int8 *)a1 + 25) == *((unsigned __int8 *)a2 + 25)
      && (*(_DWORD *)(a1 + 13) == *(_DWORD *)(a2 + 13) ? (BOOL v4 = a1[15] == a2[15]) : (BOOL v4 = 0),
          v4
       && *((unsigned __int8 *)a1 + 32) == *((unsigned __int8 *)a2 + 32)
       && *((unsigned __int8 *)a1 + 33) == *((unsigned __int8 *)a2 + 33)
       && a1[17] == a2[17]))))
  {
    return *((_DWORD *)a1 + 9) == *((_DWORD *)a2 + 9);
  }
  else
  {
    return 0;
  }
}

BOOL sub_1000FDDE0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if (a1 != a5
    || WORD1(a1) != WORD1(a5)
    || BYTE4(a1) != BYTE4(a5)
    || BYTE5(a1) != BYTE5(a5))
  {
    return 0;
  }
  LOBYTE(v21)  = BYTE6(a1);
  BYTE1(v21)  = HIBYTE(a1);
  HIWORD(v21)  = a2;
  LOBYTE(v22)  = BYTE2(a2);
  HIBYTE(v22)  = BYTE3(a2);
  LOBYTE(v19)  = BYTE6(a5);
  BYTE1(v19)  = HIBYTE(a5);
  HIWORD(v19)  = a6;
  LOBYTE(v20)  = BYTE2(a6);
  HIBYTE(v20)  = BYTE3(a6);
  if (v21 != v19 || v22 != v20) {
    return 0;
  }
  *((void *)&v14 + 1)  = a3 & 1;
  *(void *)&long long v14 = a2;
  uint64_t v13 = v14 >> 32;
  *((void *)&v14 + 1)  = a7 & 1;
  *(void *)&long long v14 = a6;
  if (!sub_10017B488(v13, v14 >> 32)) {
    return 0;
  }
  *((void *)&v16 + 1)  = a4 & 1;
  *(void *)&long long v16 = a3;
  uint64_t v15 = v16 >> 32;
  *((void *)&v16 + 1)  = a8 & 1;
  *(void *)&long long v16 = a7;
  uint64_t v17 = v16 >> 32;

  return sub_10017B488(v15, v17);
}

uint64_t sub_1000FDF7C(uint64_t a1, int a2, uint64_t a3, unint64_t a4, int a5, uint64_t a6)
{
  if (a1 == a4
    && HIDWORD(a1) == HIDWORD(a4)
    && BYTE2(a1) == BYTE2(a4)
    && ((a1 & 0x100) == 0) != ((a4 >> 8) & 1)
    && a2 == a5)
  {
    return sub_10009A2D4(a3, a6);
  }
  else
  {
    return 0;
  }
}

uint64_t _s7CoreP2P15AWDLActionFrameV13DataPathStateV23__derived_struct_equalsySbAE_AEtFZ_0(unsigned __int16 *a1, unsigned __int16 *a2)
{
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  unint64_t v7 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100010BCC((uint64_t *)&unk_100486290);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC(&qword_10047F2A8);
  __chkstk_darwin();
  unint64_t v12 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  long long v14 = (char *)&v73 - v13;
  __chkstk_darwin();
  long long v16 = (char *)&v73 - v15;
  char v17 = *((unsigned char *)a2 + 2);
  if (a1[1])
  {
    if (!*((unsigned char *)a2 + 2)) {
      return 0;
    }
  }
  else
  {
    if (*a1 != *a2) {
      char v17 = 1;
    }
    if (v17) {
      return 0;
    }
  }
  unint64_t v18 = *((unsigned int *)a1 + 1) | ((unint64_t)a1[4] << 32);
  unint64_t v19 = *((unsigned int *)a2 + 1) | ((unint64_t)a2[4] << 32);
  uint64_t v20 = v19 & 0xFF00000000;
  if ((v18 & 0xFF00000000) != 0x300000000)
  {
    if (v20 != 0x300000000
      && *((_DWORD *)a1 + 1) == *((_DWORD *)a2 + 1)
      && ((0x801004u >> ((v18 >> 29) & 0xF8)) & 0xFFC) == ((0x801004u >> ((v19 >> 29) & 0xF8)) & 0xFFC))
    {
      unint64_t v21 = v19 >> 40;
      switch(v18 >> 40)
      {
        case 2uLL:
          if (v21 != 2) {
            return 0;
          }
          goto LABEL_9;
        case 3uLL:
          if (v21 != 3) {
            return 0;
          }
          goto LABEL_9;
        case 4uLL:
          if (v21 != 4) {
            return 0;
          }
          goto LABEL_9;
        case 5uLL:
          if (v21 != 5) {
            return 0;
          }
          goto LABEL_9;
        case 6uLL:
          if (v21 != 6) {
            return 0;
          }
          goto LABEL_9;
        default:
          if ((v21 - 2) < 5 || ((v18 & 0x10000000000) == 0) == ((v19 >> 40) & 1)) {
            return 0;
          }
          goto LABEL_9;
      }
    }
    return 0;
  }
  if (v20 != 0x300000000) {
    return 0;
  }
LABEL_9:
  if (a1[8])
  {
    if (!*((unsigned char *)a2 + 16)) {
      return 0;
    }
  }
  else
  {
    if (a2[8]) {
      return 0;
    }
    unint64_t v22 = *(unsigned int *)(a1 + 5) | ((unint64_t)a1[7] << 32);
    unint64_t v23 = *(unsigned int *)(a2 + 5) | ((unint64_t)a2[7] << 32);
    v24.i64[0]  = 0xFFFFFFFFFFFFLL;
    v24.i64[1]  = 0xFFFFFFFFFFFFLL;
    uint64x2_t v25 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v22), v24);
    int16x8_t v26 = (int16x8_t)vshlq_u64(v25, (uint64x2_t)xmmword_1003B2EB0);
    uint64x2_t v27 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v23), v24);
    int64x2_t v28 = (int64x2_t)vshlq_u64(v27, (uint64x2_t)xmmword_1003B2EB0);
    int16x8_t v29 = (int16x8_t)vshlq_u64(v27, (uint64x2_t)xmmword_1003B2EA0);
    v77[0]  = *(_DWORD *)(a1 + 5);
    *(int32x2_t *)v25.i8  = vmovn_s64((int64x2_t)vshlq_u64(v25, (uint64x2_t)xmmword_1003B2EA0));
    *(int32x2_t *)v26.i8  = vmovn_s64((int64x2_t)v26);
    v26.i16[1]  = v26.i16[2];
    v26.i16[2]  = v25.i16[0];
    v26.i16[3]  = v25.i16[2];
    *(_DWORD *)&v77[1]  = vmovn_s16(v26).u32[0];
    v77[5]  = BYTE5(v22);
    v76[0]  = v23;
    *(int32x2_t *)v25.i8  = vmovn_s64((int64x2_t)v29);
    *(int32x2_t *)v29.i8  = vmovn_s64(v28);
    v29.i16[1]  = v29.i16[2];
    v29.i16[2]  = v25.i16[0];
    v29.i16[3]  = v25.i16[2];
    *(_DWORD *)&v76[1]  = vmovn_s16(v29).u32[0];
    v76[5]  = BYTE5(v23);
    if (*(_DWORD *)v77 != *(_DWORD *)v76 || *(unsigned __int16 *)&v77[4] != *(unsigned __int16 *)&v76[4]) {
      return 0;
    }
  }
  unint64_t v31 = *((unsigned int *)a1 + 5) | ((unint64_t)a1[12] << 32);
  unint64_t v32 = *((unsigned int *)a2 + 5) | ((unint64_t)a2[12] << 32);
  uint64_t v33 = v32 & 0xFF00000000;
  if ((v31 & 0xFF00000000) != 0x300000000)
  {
    if (v33 != 0x300000000
      && *((_DWORD *)a1 + 5) == *((_DWORD *)a2 + 5)
      && ((0x801004u >> ((v31 >> 29) & 0xF8)) & 0xFFC) == ((0x801004u >> ((v32 >> 29) & 0xF8)) & 0xFFC))
    {
      unint64_t v34 = v32 >> 40;
      switch(v31 >> 40)
      {
        case 2uLL:
          if (v34 != 2) {
            return 0;
          }
          goto LABEL_26;
        case 3uLL:
          if (v34 != 3) {
            return 0;
          }
          goto LABEL_26;
        case 4uLL:
          if (v34 != 4) {
            return 0;
          }
          goto LABEL_26;
        case 5uLL:
          if (v34 != 5) {
            return 0;
          }
          goto LABEL_26;
        case 6uLL:
          if (v34 != 6) {
            return 0;
          }
          goto LABEL_26;
        default:
          if ((v34 - 2) < 5 || ((v31 & 0x10000000000) == 0) == ((v32 >> 40) & 1)) {
            return 0;
          }
          goto LABEL_26;
      }
    }
    return 0;
  }
  if (v33 != 0x300000000) {
    return 0;
  }
LABEL_26:
  if (a1[16])
  {
    if (!*((unsigned char *)a2 + 32)) {
      return 0;
    }
  }
  else
  {
    if (a2[16]) {
      return 0;
    }
    unint64_t v35 = *(unsigned int *)(a1 + 13) | ((unint64_t)a1[15] << 32);
    unint64_t v36 = *(unsigned int *)(a2 + 13) | ((unint64_t)a2[15] << 32);
    v37.i64[0]  = 0xFFFFFFFFFFFFLL;
    v37.i64[1]  = 0xFFFFFFFFFFFFLL;
    uint64x2_t v38 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v35), v37);
    int16x8_t v39 = (int16x8_t)vshlq_u64(v38, (uint64x2_t)xmmword_1003B2EB0);
    uint64x2_t v40 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v36), v37);
    int64x2_t v41 = (int64x2_t)vshlq_u64(v40, (uint64x2_t)xmmword_1003B2EB0);
    int16x8_t v42 = (int16x8_t)vshlq_u64(v40, (uint64x2_t)xmmword_1003B2EA0);
    v77[0]  = *(_DWORD *)(a1 + 13);
    *(int32x2_t *)v38.i8  = vmovn_s64((int64x2_t)vshlq_u64(v38, (uint64x2_t)xmmword_1003B2EA0));
    *(int32x2_t *)v39.i8  = vmovn_s64((int64x2_t)v39);
    v39.i16[1]  = v39.i16[2];
    v39.i16[2]  = v38.i16[0];
    v39.i16[3]  = v38.i16[2];
    *(_DWORD *)&v77[1]  = vmovn_s16(v39).u32[0];
    v77[5]  = BYTE5(v35);
    v76[0]  = v36;
    *(int32x2_t *)v38.i8  = vmovn_s64((int64x2_t)v42);
    *(int32x2_t *)v42.i8  = vmovn_s64(v41);
    v42.i16[1]  = v42.i16[2];
    v42.i16[2]  = v38.i16[0];
    v42.i16[3]  = v38.i16[2];
    *(_DWORD *)&v76[1]  = vmovn_s16(v42).u32[0];
    v76[5]  = BYTE5(v36);
    if (*(_DWORD *)v77 != *(_DWORD *)v76 || *(unsigned __int16 *)&v77[4] != *(unsigned __int16 *)&v76[4]) {
      return 0;
    }
  }
  uint64_t v44 = *((void *)a1 + 6);
  uint64_t v45 = *((void *)a2 + 6);
  if (!v44)
  {
    if (v45) {
      return 0;
    }
    goto LABEL_59;
  }
  if (!v45) {
    return 0;
  }
  if (*((void *)a1 + 5) == *((void *)a2 + 5) && v44 == v45
    || (v46 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v46 & 1) != 0))
  {
LABEL_59:
    if (a1[31])
    {
      if (!*((unsigned char *)a2 + 62)) {
        return 0;
      }
    }
    else
    {
      if (a2[31]) {
        return 0;
      }
      unint64_t v48 = *((unsigned int *)a1 + 14) | ((unint64_t)a1[30] << 32);
      unint64_t v49 = *((unsigned int *)a2 + 14) | ((unint64_t)a2[30] << 32);
      v50.i64[0]  = 0xFFFFFFFFFFFFLL;
      v50.i64[1]  = 0xFFFFFFFFFFFFLL;
      uint64x2_t v51 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v48), v50);
      int16x8_t v52 = (int16x8_t)vshlq_u64(v51, (uint64x2_t)xmmword_1003B2EB0);
      uint64x2_t v53 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v49), v50);
      int64x2_t v54 = (int64x2_t)vshlq_u64(v53, (uint64x2_t)xmmword_1003B2EB0);
      int16x8_t v55 = (int16x8_t)vshlq_u64(v53, (uint64x2_t)xmmword_1003B2EA0);
      v77[0]  = *((_DWORD *)a1 + 14);
      *(int32x2_t *)v51.i8  = vmovn_s64((int64x2_t)vshlq_u64(v51, (uint64x2_t)xmmword_1003B2EA0));
      *(int32x2_t *)v52.i8  = vmovn_s64((int64x2_t)v52);
      v52.i16[1]  = v52.i16[2];
      v52.i16[2]  = v51.i16[0];
      v52.i16[3]  = v51.i16[2];
      *(_DWORD *)&v77[1]  = vmovn_s16(v52).u32[0];
      v77[5]  = BYTE5(v48);
      v76[0]  = v49;
      *(int32x2_t *)v51.i8  = vmovn_s64((int64x2_t)v55);
      *(int32x2_t *)v55.i8  = vmovn_s64(v54);
      v55.i16[1]  = v55.i16[2];
      v55.i16[2]  = v51.i16[0];
      v55.i16[3]  = v51.i16[2];
      *(_DWORD *)&v76[1]  = vmovn_s16(v55).u32[0];
      v76[5]  = BYTE5(v49);
      if (*(_DWORD *)v77 != *(_DWORD *)v76 || *(unsigned __int16 *)&v77[4] != *(unsigned __int16 *)&v76[4]) {
        return 0;
      }
    }
    if (*((unsigned __int8 *)a1 + 63) != *((unsigned __int8 *)a2 + 63)) {
      return 0;
    }
    uint64_t v57 = *((char *)a1 + 64);
    uint64_t v58 = *((char *)a2 + 64);
    if (v57 == 43)
    {
      if (v58 != 43) {
        return 0;
      }
    }
    else if (v58 == 43 || dword_1003BD778[v57] != dword_1003BD778[v58])
    {
      return 0;
    }
    if (*((unsigned __int8 *)a1 + 65) != *((unsigned __int8 *)a2 + 65)) {
      return 0;
    }
    char v59 = *((unsigned char *)a2 + 68);
    if (a1[34])
    {
      if (!*((unsigned char *)a2 + 68)) {
        return 0;
      }
    }
    else
    {
      if (a1[33] != a2[33]) {
        char v59 = 1;
      }
      if (v59) {
        return 0;
      }
    }
    char v60 = *((unsigned char *)a2 + 76);
    if (a1[38])
    {
      if (!*((unsigned char *)a2 + 76)) {
        return 0;
      }
    }
    else
    {
      if (*((_DWORD *)a1 + 18) != *((_DWORD *)a2 + 18)) {
        char v60 = 1;
      }
      if (v60) {
        return 0;
      }
    }
    if (*((unsigned __int8 *)a1 + 77) != *((unsigned __int8 *)a2 + 77)
      || *((unsigned __int8 *)a1 + 78) != *((unsigned __int8 *)a2 + 78)
      || *((unsigned __int8 *)a1 + 79) != *((unsigned __int8 *)a2 + 79)
      || *((unsigned __int8 *)a1 + 80) != *((unsigned __int8 *)a2 + 80)
      || *((unsigned __int8 *)a1 + 81) != *((unsigned __int8 *)a2 + 81)
      || *((unsigned __int8 *)a1 + 82) != *((unsigned __int8 *)a2 + 82)
      || *((unsigned __int8 *)a1 + 83) != *((unsigned __int8 *)a2 + 83)
      || *((unsigned __int8 *)a1 + 84) != *((unsigned __int8 *)a2 + 84)
      || *((unsigned __int8 *)a1 + 85) != *((unsigned __int8 *)a2 + 85)
      || *((unsigned __int8 *)a1 + 86) != *((unsigned __int8 *)a2 + 86)
      || *((unsigned __int8 *)a1 + 87) != *((unsigned __int8 *)a2 + 87)
      || *((unsigned __int8 *)a1 + 88) != *((unsigned __int8 *)a2 + 88)
      || *((unsigned __int8 *)a1 + 89) != *((unsigned __int8 *)a2 + 89)
      || *((unsigned __int8 *)a1 + 90) != *((unsigned __int8 *)a2 + 90)
      || *((unsigned __int8 *)a1 + 91) != *((unsigned __int8 *)a2 + 91)
      || *((unsigned __int8 *)a1 + 92) != *((unsigned __int8 *)a2 + 92)
      || *((unsigned __int8 *)a1 + 93) != *((unsigned __int8 *)a2 + 93)
      || *((unsigned __int8 *)a1 + 94) != *((unsigned __int8 *)a2 + 94))
    {
      return 0;
    }
    int v75 = (int *)type metadata accessor for AWDLActionFrame.DataPathState(0);
    sub_1001036A4((uint64_t)a1 + v75[34], (uint64_t)v16);
    sub_1001036A4((uint64_t)a2 + v75[34], (uint64_t)v14);
    uint64_t v61 = (uint64_t)&v10[*(int *)(v8 + 48)];
    sub_1001036A4((uint64_t)v16, (uint64_t)v10);
    uint64_t v74 = v61;
    sub_1001036A4((uint64_t)v14, v61);
    Swift::UInt8 v73 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v73((uint64_t)v10, 1, v4) == 1)
    {
      sub_1000380B4((uint64_t)v14, &qword_10047F2A8);
      sub_1000380B4((uint64_t)v16, &qword_10047F2A8);
      if (v73(v74, 1, v4) == 1)
      {
        sub_1000380B4((uint64_t)v10, &qword_10047F2A8);
        goto LABEL_124;
      }
    }
    else
    {
      sub_1001036A4((uint64_t)v10, (uint64_t)v12);
      if (v73(v74, 1, v4) != 1)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v74, v4);
        sub_100104154(&qword_1004862A0, (void (*)(uint64_t))&type metadata accessor for DispatchTimeInterval);
        LODWORD(v74)  = dispatch thunk of static Equatable.== infix(_:_:)();
        int v62 = *(void (**)(char *, uint64_t))(v5 + 8);
        v62(v7, v4);
        sub_1000380B4((uint64_t)v14, &qword_10047F2A8);
        sub_1000380B4((uint64_t)v16, &qword_10047F2A8);
        v62(v12, v4);
        sub_1000380B4((uint64_t)v10, &qword_10047F2A8);
        if ((v74 & 1) == 0) {
          return 0;
        }
LABEL_124:
        uint64_t v63 = v75[35];
        uint64_t v64 = (_DWORD *)((char *)a1 + v63);
        char v65 = *((unsigned char *)a1 + v63 + 4);
        Swift::UInt16 v66 = (_DWORD *)((char *)a2 + v63);
        int v67 = *((unsigned __int8 *)a2 + v63 + 4);
        if (v65)
        {
          if (!v67) {
            return 0;
          }
        }
        else
        {
          if (*v64 != *v66) {
            LOBYTE(v67)  = 1;
          }
          if (v67) {
            return 0;
          }
        }
        uint64_t v68 = v75[36];
        uint64_t v69 = (_DWORD *)((char *)a1 + v68);
        char v70 = *((unsigned char *)a1 + v68 + 4);
        Swift::UInt8 v71 = (_DWORD *)((char *)a2 + v68);
        char v72 = *((unsigned char *)a2 + v68 + 4);
        if (v70)
        {
          if ((v72 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          if (*v69 != *v71) {
            char v72 = 1;
          }
          if (v72) {
            return 0;
          }
        }
        return 1;
      }
      sub_1000380B4((uint64_t)v14, &qword_10047F2A8);
      sub_1000380B4((uint64_t)v16, &qword_10047F2A8);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
    }
    sub_1000380B4((uint64_t)v10, (uint64_t *)&unk_100486290);
    return 0;
  }
  return result;
}

uint64_t _s7CoreP2P15AWDLActionFrameV13AWDLAttributeO21__derived_enum_equalsySbAE_AEtFZ_0(uint64_t a1, unsigned __int8 *a2)
{
  int v160 = a2;
  uint64_t v159 = a1;
  type metadata accessor for AWDLActionFrame.DataPathState(0);
  __chkstk_darwin();
  unint64_t v143 = (unsigned __int16 *)((char *)&v141 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for AWDLActionFrame.ServiceResponse(0);
  __chkstk_darwin();
  uint64_t v142 = (uint64_t)&v141 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v158 = type metadata accessor for AWDLActionFrame.AWDLAttribute(0);
  __chkstk_darwin();
  uint64_t v157 = (unsigned __int8 *)&v141 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  int v156 = (unsigned __int8 *)&v141 - v6;
  __chkstk_darwin();
  uint64_t v155 = (uint64_t)&v141 - v7;
  __chkstk_darwin();
  uint64_t v153 = (uint64_t)&v141 - v8;
  __chkstk_darwin();
  uint64_t v154 = (unsigned __int8 *)&v141 - v9;
  __chkstk_darwin();
  unint64_t v152 = (unsigned __int8 *)&v141 - v10;
  __chkstk_darwin();
  unint64_t v151 = (unsigned __int16 *)((char *)&v141 - v11);
  __chkstk_darwin();
  uint64_t v150 = (uint64_t)&v141 - v12;
  __chkstk_darwin();
  char v149 = (long long *)((char *)&v141 - v13);
  __chkstk_darwin();
  uint64_t v147 = (uint64_t)&v141 - v14;
  __chkstk_darwin();
  char v148 = (unsigned __int8 *)&v141 - v15;
  __chkstk_darwin();
  unint64_t v145 = (unsigned __int8 *)&v141 - v16;
  __chkstk_darwin();
  unint64_t v18 = (uint64_t *)((char *)&v141 - v17);
  __chkstk_darwin();
  unint64_t v144 = (unsigned __int8 *)&v141 - v19;
  __chkstk_darwin();
  int v146 = (unsigned __int16 *)((char *)&v141 - v20);
  __chkstk_darwin();
  unint64_t v22 = (unsigned __int8 *)&v141 - v21;
  __chkstk_darwin();
  int8x16_t v24 = (uint64_t *)((char *)&v141 - v23);
  __chkstk_darwin();
  int16x8_t v26 = (unsigned __int8 *)&v141 - v25;
  __chkstk_darwin();
  int64x2_t v28 = (long long *)((char *)&v141 - v27);
  __chkstk_darwin();
  unint64_t v30 = (char *)&v141 - v29;
  __chkstk_darwin();
  unint64_t v32 = (unsigned __int16 *)((char *)&v141 - v31);
  sub_100010BCC(&qword_10047FB30);
  uint64_t v33 = __chkstk_darwin();
  unint64_t v35 = (char *)&v141 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = (uint64_t)&v35[*(int *)(v33 + 56)];
  sub_1001037C8(v159, (uint64_t)v35, type metadata accessor for AWDLActionFrame.AWDLAttribute);
  uint64_t v37 = (uint64_t)v160;
  int v160 = (unsigned __int8 *)v36;
  sub_1001037C8(v37, v36, type metadata accessor for AWDLActionFrame.AWDLAttribute);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_1001037C8((uint64_t)v35, (uint64_t)v30, type metadata accessor for AWDLActionFrame.AWDLAttribute);
      uint64_t v43 = (uint64_t)v160;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v44 = v142;
        sub_10010419C(v43, v142, type metadata accessor for AWDLActionFrame.ServiceResponse);
        char v45 = _s7CoreP2P15AWDLActionFrameV15ServiceResponseO21__derived_enum_equalsySbAE_AEtFZ_0((uint64_t)v30, v44);
        char v46 = type metadata accessor for AWDLActionFrame.ServiceResponse;
        sub_100103830(v44, type metadata accessor for AWDLActionFrame.ServiceResponse);
        uint64_t v47 = (uint64_t)v30;
        goto LABEL_32;
      }
      __int16 v136 = type metadata accessor for AWDLActionFrame.ServiceResponse;
      uint64_t v137 = (uint64_t)v30;
      goto LABEL_103;
    case 2u:
      sub_1001037C8((uint64_t)v35, (uint64_t)v28, type metadata accessor for AWDLActionFrame.AWDLAttribute);
      long long v48 = v28[1];
      long long v161 = *v28;
      long long v162 = v48;
      long long v163 = v28[2];
      unint64_t v49 = (long long *)v160;
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        long long v50 = v49[1];
        long long v164 = *v49;
        long long v165 = v50;
        long long v166 = v49[2];
        char v45 = _s7CoreP2P15AWDLActionFrameV24SynchronizationParameterV23__derived_struct_equalsySbAE_AEtFZ_0((unsigned __int8 *)&v161, (unsigned __int8 *)&v164);
        sub_100104258((uint64_t)&v161);
        sub_100104258((uint64_t)&v164);
        goto LABEL_78;
      }
      sub_100104258((uint64_t)&v161);
      goto LABEL_105;
    case 3u:
      sub_1001037C8((uint64_t)v35, (uint64_t)v26, type metadata accessor for AWDLActionFrame.AWDLAttribute);
      v2.i32[0]  = *(_DWORD *)(v26 + 6);
      unsigned __int8 v51 = v26[10];
      unsigned __int8 v52 = v26[11];
      uint64_t v53 = *((unsigned int *)v26 + 3);
      unsigned __int8 v54 = v26[16];
      uint64_t v55 = *((unsigned int *)v26 + 5);
      unsigned __int8 v56 = v26[24];
      uint64_t v57 = v160;
      if (swift_getEnumCaseMultiPayload() != 3) {
        goto LABEL_105;
      }
      if (*v26 == *v57
        && *((unsigned __int16 *)v26 + 1) == *((unsigned __int16 *)v57 + 1)
        && v26[4] == v57[4]
        && v26[5] == v57[5])
      {
        uint64_t v58 = *((unsigned int *)v57 + 3);
        unsigned __int8 v59 = v57[16];
        uint64_t v60 = *((unsigned int *)v57 + 5);
        unsigned __int8 v61 = v57[24];
        int v62 = *((unsigned __int16 *)v57 + 5);
        LODWORD(v164)  = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
        BYTE4(v164)  = v51;
        BYTE5(v164)  = v52;
        if (v164 == *(_DWORD *)(v57 + 6) && WORD2(v164) == v62)
        {
          LOBYTE(v164)  = v59;
          if (sub_10017B488(v53 | ((unint64_t)v54 << 32), v58 | ((unint64_t)v59 << 32)))
          {
            LOBYTE(v164)  = v61;
            if (sub_10017B488(v55 | ((unint64_t)v56 << 32), v60 | ((unint64_t)v61 << 32))) {
              goto LABEL_124;
            }
          }
        }
      }
      goto LABEL_118;
    case 4u:
      sub_1001037C8((uint64_t)v35, (uint64_t)v24, type metadata accessor for AWDLActionFrame.AWDLAttribute);
      uint64_t v64 = *v24;
      char v65 = (uint64_t *)v160;
      if (swift_getEnumCaseMultiPayload() != 4) {
        goto LABEL_85;
      }
      char v66 = _s7CoreP2P15AWDLActionFrameV28AWDLChannelSequenceParameterV23__derived_struct_equalsySbAE_AEtFZ_0(v64, *v65);
      goto LABEL_40;
    case 5u:
      sub_1001037C8((uint64_t)v35, (uint64_t)v22, type metadata accessor for AWDLActionFrame.AWDLAttribute);
      int v67 = *((unsigned __int16 *)v22 + 1);
      int v68 = *((unsigned __int16 *)v22 + 2);
      int v69 = *((_DWORD *)v22 + 2);
      uint64_t v71 = *((void *)v22 + 2);
      unint64_t v70 = *((void *)v22 + 3);
      char v72 = v160;
      if (swift_getEnumCaseMultiPayload() != 5) {
        goto LABEL_98;
      }
      uint64_t v73 = *((void *)v72 + 2);
      unint64_t v74 = *((void *)v72 + 3);
      if (*v22 != *v72
        || v67 != *((unsigned __int16 *)v72 + 1)
        || v68 != *((unsigned __int16 *)v72 + 2)
        || v69 != *((_DWORD *)v72 + 2))
      {
        goto LABEL_99;
      }
      goto LABEL_63;
    case 6u:
      int v75 = v146;
      sub_1001037C8((uint64_t)v35, (uint64_t)v146, type metadata accessor for AWDLActionFrame.AWDLAttribute);
      uint64_t v76 = (uint64_t)v160;
      if (swift_getEnumCaseMultiPayload() == 6)
      {
        int v77 = v143;
        sub_10010419C(v76, (uint64_t)v143, type metadata accessor for AWDLActionFrame.DataPathState);
        char v45 = _s7CoreP2P15AWDLActionFrameV13DataPathStateV23__derived_struct_equalsySbAE_AEtFZ_0(v75, v77);
        char v46 = type metadata accessor for AWDLActionFrame.DataPathState;
        sub_100103830((uint64_t)v77, type metadata accessor for AWDLActionFrame.DataPathState);
        uint64_t v47 = (uint64_t)v75;
LABEL_32:
        sub_100103830(v47, v46);
        goto LABEL_78;
      }
      __int16 v136 = type metadata accessor for AWDLActionFrame.DataPathState;
      uint64_t v137 = (uint64_t)v75;
LABEL_103:
      sub_100103830(v137, v136);
      goto LABEL_105;
    case 7u:
      int v78 = v144;
      sub_1001037C8((uint64_t)v35, (uint64_t)v144, type metadata accessor for AWDLActionFrame.AWDLAttribute);
      uint64_t v80 = *((void *)v78 + 1);
      uint64_t v79 = *((void *)v78 + 2);
      int v81 = v160;
      if (swift_getEnumCaseMultiPayload() != 7) {
        goto LABEL_85;
      }
      if (*v78 != *v81) {
        goto LABEL_117;
      }
      if (v80 == *((void *)v81 + 1) && v79 == *((void *)v81 + 2))
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_124;
      }
      char v138 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v138) {
        goto LABEL_124;
      }
      goto LABEL_118;
    case 8u:
      sub_1001037C8((uint64_t)v35, (uint64_t)v18, type metadata accessor for AWDLActionFrame.AWDLAttribute);
      uint64_t v82 = *v18;
      uint64_t v83 = (uint64_t *)v160;
      if (swift_getEnumCaseMultiPayload() != 8) {
        goto LABEL_85;
      }
      char v66 = _s7CoreP2P15AWDLActionFrameV12SyncTreePathV23__derived_struct_equalsySbAE_AEtFZ_0(v82, *v83);
LABEL_40:
      char v45 = v66;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_78;
    case 9u:
      unint64_t v84 = v145;
      sub_1001037C8((uint64_t)v35, (uint64_t)v145, type metadata accessor for AWDLActionFrame.AWDLAttribute);
      Swift::UInt16 v85 = v160;
      if (swift_getEnumCaseMultiPayload() != 9) {
        goto LABEL_105;
      }
      char v45 = *v84 == *v85 && v84[1] == v85[1];
      goto LABEL_78;
    case 0xAu:
      Swift::UInt8 v87 = v148;
      sub_1001037C8((uint64_t)v35, (uint64_t)v148, type metadata accessor for AWDLActionFrame.AWDLAttribute);
      int v38 = v87[1];
      uint64_t v39 = *((void *)v87 + 1);
      Swift::UInt8 v88 = v160;
      if (swift_getEnumCaseMultiPayload() != 10) {
        goto LABEL_85;
      }
      int v89 = *v87;
      uint64_t v41 = *((void *)v88 + 1);
      if (v89 != *v88) {
        goto LABEL_117;
      }
      int v42 = v88[1];
      goto LABEL_51;
    case 0xBu:
      uint64_t v91 = v147;
      sub_1001037C8((uint64_t)v35, v147, type metadata accessor for AWDLActionFrame.AWDLAttribute);
      long long v92 = *(_OWORD *)(v91 + 16);
      long long v161 = *(_OWORD *)v91;
      long long v162 = v92;
      *(void *)&long long v163 = *(void *)(v91 + 32);
      Swift::UInt8 v93 = v160;
      if (swift_getEnumCaseMultiPayload() != 11) {
        goto LABEL_105;
      }
      long long v94 = *((_OWORD *)v93 + 1);
      long long v164 = *(_OWORD *)v93;
      long long v165 = v94;
      *(void *)&long long v166 = *((void *)v93 + 4);
      BOOL v95 = _s7CoreP2P15AWDLActionFrameV18NANSynchronizationV23__derived_struct_equalsySbAE_AEtFZ_0((unsigned __int16 *)&v161, (unsigned __int16 *)&v164);
      goto LABEL_77;
    case 0xCu:
      long long v96 = v149;
      sub_1001037C8((uint64_t)v35, (uint64_t)v149, type metadata accessor for AWDLActionFrame.AWDLAttribute);
      long long v97 = v96[1];
      long long v161 = *v96;
      long long v162 = v97;
      long long v163 = v96[2];
      unsigned __int8 v98 = (long long *)v160;
      if (swift_getEnumCaseMultiPayload() != 12) {
        goto LABEL_105;
      }
      long long v99 = v98[1];
      long long v164 = *v98;
      long long v165 = v99;
      long long v166 = v98[2];
      BOOL v95 = _s7CoreP2P15AWDLActionFrameV17ElectionParameterV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)&v161, (uint64_t)&v164);
      goto LABEL_77;
    case 0xDu:
      uint64_t v100 = v150;
      sub_1001037C8((uint64_t)v35, v150, type metadata accessor for AWDLActionFrame.AWDLAttribute);
      sub_1000A66D8(v100, (uint64_t)&v161);
      uint64_t v101 = (uint64_t)v160;
      if (swift_getEnumCaseMultiPayload() != 13)
      {
        sub_1000A6734((uint64_t)&v161, (void (*)(void, void, void, void, void, void, void))sub_10006E108);
        goto LABEL_105;
      }
      sub_1000A66D8(v101, (uint64_t)&v164);
      char v45 = _s7CoreP2P27IEEE80211InformationElementO21__derived_enum_equalsySbAC_ACtFZ_0((uint64_t)&v161, (uint64_t)&v164);
      sub_1000A6734((uint64_t)&v164, (void (*)(void, void, void, void, void, void, void))sub_10006E108);
      sub_1000A6734((uint64_t)&v161, (void (*)(void, void, void, void, void, void, void))sub_10006E108);
LABEL_78:
      sub_100103830((uint64_t)v35, type metadata accessor for AWDLActionFrame.AWDLAttribute);
      return v45 & 1;
    case 0xEu:
      Swift::UInt8 v102 = v151;
      sub_1001037C8((uint64_t)v35, (uint64_t)v151, type metadata accessor for AWDLActionFrame.AWDLAttribute);
      int v103 = v102[1];
      int v104 = *((unsigned __int8 *)v102 + 4);
      uint64_t v71 = *((void *)v102 + 1);
      unint64_t v70 = *((void *)v102 + 2);
      Swift::UInt32 v105 = (unsigned __int16 *)v160;
      if (swift_getEnumCaseMultiPayload() != 14)
      {
LABEL_98:
        sub_10000C970(v71, v70);
        goto LABEL_105;
      }
      int v106 = *v102;
      uint64_t v73 = *((void *)v105 + 1);
      unint64_t v74 = *((void *)v105 + 2);
      if (v106 != *v105 || v103 != v105[1] || v104 != *((unsigned __int8 *)v105 + 4))
      {
LABEL_99:
        sub_10000C970(v73, v74);
        sub_10000C970(v71, v70);
        goto LABEL_118;
      }
LABEL_63:
      char v107 = _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v71, v70, v73, v74);
      sub_10000C970(v73, v74);
      sub_10000C970(v71, v70);
      if ((v107 & 1) == 0) {
        goto LABEL_118;
      }
      goto LABEL_124;
    case 0xFu:
      int v108 = v152;
      sub_1001037C8((uint64_t)v35, (uint64_t)v152, type metadata accessor for AWDLActionFrame.AWDLAttribute);
      unsigned int v109 = v160;
      if (swift_getEnumCaseMultiPayload() != 15) {
        goto LABEL_105;
      }
      char v45 = *v108 == *v109;
      goto LABEL_78;
    case 0x10u:
      unsigned int v110 = v154;
      sub_1001037C8((uint64_t)v35, (uint64_t)v154, type metadata accessor for AWDLActionFrame.AWDLAttribute);
      v2.i32[0]  = *(_DWORD *)(v110 + 1);
      unsigned __int8 v111 = v110[5];
      unsigned __int8 v112 = v110[6];
      int v113 = v160;
      if (swift_getEnumCaseMultiPayload() != 16) {
        goto LABEL_105;
      }
      if (*v110 != *v113) {
        goto LABEL_118;
      }
      int v114 = *(unsigned __int16 *)(v113 + 5);
      LODWORD(v164)  = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
      BYTE4(v164)  = v111;
      BYTE5(v164)  = v112;
      if (v164 != *(_DWORD *)(v113 + 1) || WORD2(v164) != v114) {
        goto LABEL_118;
      }
      goto LABEL_124;
    case 0x11u:
      uint64_t v116 = v153;
      sub_1001037C8((uint64_t)v35, v153, type metadata accessor for AWDLActionFrame.AWDLAttribute);
      long long v117 = *(_OWORD *)(v116 + 16);
      long long v161 = *(_OWORD *)v116;
      long long v162 = v117;
      *(void *)&long long v163 = *(void *)(v116 + 32);
      int v118 = v160;
      if (swift_getEnumCaseMultiPayload() != 17) {
        goto LABEL_105;
      }
      long long v119 = *((_OWORD *)v118 + 1);
      long long v164 = *(_OWORD *)v118;
      long long v165 = v119;
      *(void *)&long long v166 = *((void *)v118 + 4);
      BOOL v95 = _s7CoreP2P15AWDLActionFrameV13RealtimeGroupV23__derived_struct_equalsySbAE_AEtFZ_0((unsigned __int8 *)&v161, (unsigned __int8 *)&v164);
LABEL_77:
      char v45 = v95;
      goto LABEL_78;
    case 0x12u:
      uint64_t v120 = v155;
      sub_1001037C8((uint64_t)v35, v155, type metadata accessor for AWDLActionFrame.AWDLAttribute);
      char v121 = *(unsigned char *)(v120 + 4);
      int v122 = *(unsigned __int8 *)(v120 + 5);
      uint64_t v123 = *(void *)(v120 + 8);
      unint64_t v124 = v160;
      if (swift_getEnumCaseMultiPayload() != 18) {
        goto LABEL_85;
      }
      if (*(_DWORD *)v120 != *(_DWORD *)v124
        || ((0x801004u >> (8 * v121)) & 0xFFC) != ((0x801004u >> (8 * v124[4])) & 0xFFC))
      {
        goto LABEL_117;
      }
      int v125 = v124[5];
      switch(v122)
      {
        case 2:
          if (v125 != 2) {
            goto LABEL_117;
          }
          break;
        case 3:
          if (v125 != 3) {
            goto LABEL_117;
          }
          break;
        case 4:
          if (v125 != 4) {
            goto LABEL_117;
          }
          break;
        case 5:
          if (v125 != 5) {
            goto LABEL_117;
          }
          break;
        case 6:
          if (v125 != 6) {
            goto LABEL_117;
          }
          break;
        default:
          if ((v125 - 2) < 5 || ((((v122 & 1) == 0) ^ v125) & 1) == 0) {
            goto LABEL_117;
          }
          break;
      }
      char v90 = sub_100096228(v123, *((void *)v124 + 1));
      goto LABEL_123;
    case 0x13u:
      char v126 = v156;
      sub_1001037C8((uint64_t)v35, (uint64_t)v156, type metadata accessor for AWDLActionFrame.AWDLAttribute);
      int v127 = v126[1];
      int v129 = *((_DWORD *)v126 + 1);
      int v128 = *((_DWORD *)v126 + 2);
      uint64_t v130 = v160;
      if (swift_getEnumCaseMultiPayload() != 19) {
        goto LABEL_105;
      }
      if (*v126 != *v130 || v127 != v130[1] || v129 != *((_DWORD *)v130 + 1) || v128 != *((_DWORD *)v130 + 2)) {
        goto LABEL_118;
      }
      goto LABEL_124;
    case 0x14u:
      uint64_t v131 = v157;
      sub_1001037C8((uint64_t)v35, (uint64_t)v157, type metadata accessor for AWDLActionFrame.AWDLAttribute);
      uint64_t v132 = v160;
      if (swift_getEnumCaseMultiPayload() != 20) {
        goto LABEL_105;
      }
      unsigned __int8 v133 = v132[1];
      BOOL v134 = *v131 == *v132;
      char v135 = v131[1] ^ v133 ^ 1;
      sub_100103830((uint64_t)v35, type metadata accessor for AWDLActionFrame.AWDLAttribute);
      char v45 = v134 & v135;
      return v45 & 1;
    case 0x15u:
      if (swift_getEnumCaseMultiPayload() == 21) {
        goto LABEL_124;
      }
      goto LABEL_105;
    case 0x16u:
      if (swift_getEnumCaseMultiPayload() == 22) {
        goto LABEL_124;
      }
      goto LABEL_105;
    default:
      sub_1001037C8((uint64_t)v35, (uint64_t)v32, type metadata accessor for AWDLActionFrame.AWDLAttribute);
      int v38 = v32[1];
      uint64_t v39 = *((void *)v32 + 1);
      uint64x2_t v40 = (unsigned __int16 *)v160;
      if (swift_getEnumCaseMultiPayload())
      {
LABEL_85:
        swift_bridgeObjectRelease();
LABEL_105:
        sub_1000380B4((uint64_t)v35, &qword_10047FB30);
        goto LABEL_119;
      }
      uint64_t v41 = *((void *)v40 + 1);
      if (*v32 != *v40) {
        goto LABEL_117;
      }
      int v42 = v40[1];
LABEL_51:
      if (v38 != v42)
      {
LABEL_117:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_118:
        sub_100103830((uint64_t)v35, type metadata accessor for AWDLActionFrame.AWDLAttribute);
LABEL_119:
        char v45 = 0;
        return v45 & 1;
      }
      char v90 = sub_1000956AC(v39, v41);
LABEL_123:
      char v140 = v90;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v140 & 1) == 0) {
        goto LABEL_118;
      }
LABEL_124:
      sub_100103830((uint64_t)v35, type metadata accessor for AWDLActionFrame.AWDLAttribute);
      char v45 = 1;
      return v45 & 1;
  }
}

unint64_t sub_1000FFE38(char a1, unsigned __int8 a2)
{
  if (a1)
  {
    if (a1 != 1)
    {
LABEL_7:
      sub_10000F000();
      swift_allocError();
      *(_OWORD *)uint64_t v7 = xmmword_1003B00B0;
      *(unsigned char *)(v7 + 16)  = 2;
      return swift_willThrow();
    }
    unsigned __int8 v4 = 1;
  }
  else
  {
    unsigned __int8 v4 = 2;
  }
  unint64_t result = sub_1001E1C7C(v4, 4uLL, 4);
  if (v2) {
    return result;
  }
  int v6 = result;
  if (a2 - 4 < 3) {
    goto LABEL_7;
  }
  if (a2 == 2)
  {
    unsigned __int8 v8 = 1;
    goto LABEL_13;
  }
  if (a2 == 3)
  {
    unsigned __int8 v8 = 2;
LABEL_13:
    int v9 = sub_1001E1C7C(v8, 2uLL, 2);
    int v10 = sub_1001E1C7C(3u, 0, 2);
    if ((v9 & ~(_BYTE)v6) != 0) {
      int v11 = v9;
    }
    else {
      int v11 = 0;
    }
    int v12 = v11 | v6;
    if ((v10 & ~(_BYTE)v12) != 0) {
      int v13 = v10;
    }
    else {
      int v13 = 0;
    }
    return v13 | v12;
  }
  int v14 = sub_1001E1C7C(3u, 2uLL, 2);
  if ((v14 & ~(_BYTE)v6) != 0) {
    int v15 = v14;
  }
  else {
    int v15 = 0;
  }
  int v16 = v15 | v6;
  if (a2) {
    unsigned __int8 v17 = 2;
  }
  else {
    unsigned __int8 v17 = 1;
  }
  int v18 = sub_1001E1C7C(v17, 0, 2);
  if ((v18 & ~(_BYTE)v16) != 0) {
    int v19 = v18;
  }
  else {
    int v19 = 0;
  }
  return v19 | v16;
}

uint64_t _s7CoreP2P15AWDLActionFrameV13AWDLAttributeO13AttributeTypeO8rawValueAGSgs5UInt8V_tcfC_0(unsigned __int8 a1)
{
  if (a1 > 0x23u) {
    return 23;
  }
  else {
    return byte_1003BD824[(char)a1];
  }
}

uint64_t _s7CoreP2P15AWDLActionFrameV13DataPathStateV30UnicastMasterIndicationOptionsO8rawValueAGSgs6UInt32V_tcfC_0(int a1)
{
  if (a1 >= 0x200000)
  {
    if (a1 > 150994943)
    {
      if (a1 <= 234881023)
      {
        if (a1 <= 184549375)
        {
          if (a1 == 150994944) {
            return 35;
          }
          if (a1 == 167772160) {
            return 36;
          }
        }
        else
        {
          switch(a1)
          {
            case 184549376:
              return 37;
            case 201326592:
              return 38;
            case 218103808:
              return 39;
          }
        }
      }
      else if (a1 > 301989887)
      {
        switch(a1)
        {
          case 0x12000000:
            return 42;
          case 0x20000000:
            return 27;
          case 0x40000000:
            return 33;
        }
      }
      else
      {
        switch(a1)
        {
          case 234881024:
            return 40;
          case 268435456:
            return 26;
          case 285212672:
            return 41;
        }
      }
    }
    else if (a1 <= 50331647)
    {
      if (a1 < 0x800000)
      {
        if (a1 == 0x200000) {
          return 19;
        }
        if (a1 == 0x400000) {
          return 20;
        }
      }
      else
      {
        switch(a1)
        {
          case 0x800000:
            return 21;
          case 0x1000000:
            return 22;
          case 0x2000000:
            return 23;
        }
      }
    }
    else if (a1 > 83886079)
    {
      switch(a1)
      {
        case 0x5000000:
          return 31;
        case 0x6000000:
          return 32;
        case 0x8000000:
          return 3;
      }
    }
    else
    {
      switch(a1)
      {
        case 50331648:
          return 30;
        case 67108864:
          return 2;
        case 67108866:
          return 4;
      }
    }
    return 43;
  }
  if (a1 > 1023)
  {
    if (a1 < 0x8000)
    {
      if (a1 <= 4095)
      {
        if (a1 == 1024) {
          return 28;
        }
        if (a1 == 2048) {
          return 29;
        }
      }
      else
      {
        switch(a1)
        {
          case 0x1000:
            return 25;
          case 0x2000:
            return 13;
          case 0x4000:
            return 15;
        }
      }
    }
    else if (a1 >= 0x40000)
    {
      switch(a1)
      {
        case 0x40000:
          return 18;
        case 0x80000:
          return 1;
        case 0x100000:
          return 14;
      }
    }
    else
    {
      switch(a1)
      {
        case 0x8000:
          return 16;
        case 0x10000:
          return 5;
        case 0x20000:
          return 17;
      }
    }
    return 43;
  }
  if (a1 > 63)
  {
    if (a1 > 255)
    {
      if (a1 == 256) {
        return 12;
      }
      if (a1 == 512) {
        return 24;
      }
    }
    else
    {
      if (a1 == 64) {
        return 10;
      }
      if (a1 == 128) {
        return 11;
      }
    }
    return 43;
  }
  switch(a1)
  {
    case 2:
      uint64_t result = 0;
      break;
    case 3:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
      return 43;
    case 4:
      uint64_t result = 6;
      break;
    case 8:
      uint64_t result = 7;
      break;
    case 16:
      uint64_t result = 8;
      break;
    case 32:
      uint64_t result = 9;
      break;
    default:
      if (a1 != 0x80000000) {
        return 43;
      }
      uint64_t result = 34;
      break;
  }
  return result;
}

uint64_t _s7CoreP2P15AWDLActionFrameV20MultiPeerBSSSteeringV17SteeringMessageIDO8rawValueAGSgs5UInt8V_tcfC_0(uint64_t result)
{
  if (result >= 7u) {
    return 7;
  }
  else {
    return result;
  }
}

uint64_t _s7CoreP2P19NANIntervalDurationO8rawValueACSgs5UInt8V_tcfC_0(uint64_t result)
{
  if ((result & 0xFC) != 0) {
    return 4;
  }
  else {
    return result;
  }
}

uint64_t _s7CoreP2P15AWDLActionFrameV7VersionV12PlatformTypeO8rawValueAGSgs5UInt8V_tcfC_0(unsigned __int8 a1)
{
  int v1 = a1 - 1;
  uint64_t result = 1;
  switch(v1)
  {
    case 0:
      uint64_t result = 0;
      break;
    case 1:
      return result;
    case 3:
      uint64_t result = 2;
      break;
    case 7:
      uint64_t result = 3;
      break;
    case 15:
      uint64_t result = 4;
      break;
    default:
      uint64_t result = 5;
      break;
  }
  return result;
}

void *sub_1001004BC(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_10047FBD0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  int v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000369C4(a1, a1[3]);
  sub_1001039E0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100010754((uint64_t)a1);
  }
  else
  {
    sub_100010BCC(&qword_10047F2E8);
    sub_10010E9F4(&qword_10047FBD8, (void (*)(void))sub_10003FE54);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = (void *)v9[1];
    sub_100010754((uint64_t)a1);
  }
  return v7;
}

uint64_t sub_100100664(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_10047FC48);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  int v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[3];
  sub_1000369C4(a1, v7);
  sub_1000E5DA0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100010754((uint64_t)a1);
  }
  else
  {
    v11[31]  = 0;
    unsigned __int16 v8 = KeyedDecodingContainer.decode(_:forKey:)();
    v11[30]  = 1;
    unsigned __int16 v10 = KeyedDecodingContainer.decode(_:forKey:)();
    sub_100010BCC(&qword_10047E7D0);
    v11[15]  = 2;
    sub_10010E990(&qword_10047FBC0);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    sub_100010754((uint64_t)a1);
    return v8 | (v10 << 16);
  }
  return v7;
}

uint64_t type metadata accessor for AWDLActionFrame.ServiceResponse(uint64_t a1)
{
  return sub_10000A7D0(a1, qword_10047F688);
}

uint64_t sub_100100898@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = sub_100010BCC(&qword_10047FC08);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  int v9 = &v14.i8[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_10010EBB4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100010754((uint64_t)a1);
  }
  LOBYTE(v33)  = 0;
  char v10 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v33)  = 1;
  __int16 v11 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v33)  = 2;
  int v32 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v33)  = 3;
  int v31 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v33)  = 4;
  int v30 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v33)  = 5;
  int v29 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v33)  = 6;
  int v28 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v33)  = 7;
  int v27 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v33)  = 8;
  int v26 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v33)  = 9;
  int v25 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v33)  = 10;
  int v24 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v33)  = 11;
  int v23 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v33)  = 12;
  int v22 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v33)  = 13;
  int v21 = KeyedDecodingContainer.decode(_:forKey:)();
  char v34 = 14;
  sub_10003FE54();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v3.i32[0]  = v33;
  int v19 = BYTE5(v33);
  int v20 = BYTE4(v33);
  LOBYTE(v33)  = 15;
  int v18 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v33)  = 16;
  int v17 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v33)  = 17;
  int v16 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v33)  = 18;
  int v15 = KeyedDecodingContainer.decode(_:forKey:)();
  char v34 = 19;
  sub_10010EC08();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(__int8 *, uint64_t))(v7 + 8))(v9, v6);
  int16x8_t v14 = (int16x8_t)vmovl_u8(v3);
  uint64_t v12 = v33;
  uint64_t result = sub_100010754((uint64_t)a1);
  *(unsigned char *)a2  = v10;
  *(_WORD *)(a2 + 2)  = v11;
  *(unsigned char *)(a2 + 4)  = v32;
  *(unsigned char *)(a2 + 5)  = v31;
  *(_WORD *)(a2 + 6)  = v30;
  *(_WORD *)(a2 + 8)  = v29;
  *(_WORD *)(a2 + 10)  = v28;
  *(_WORD *)(a2 + 12)  = v27;
  *(_WORD *)(a2 + 14)  = v26;
  *(_WORD *)(a2 + 16)  = v25;
  *(unsigned char *)(a2 + 18)  = v24;
  *(unsigned char *)(a2 + 19)  = v23;
  *(unsigned char *)(a2 + 20)  = v22;
  *(unsigned char *)(a2 + 21)  = v21;
  *(_DWORD *)(a2 + 22)  = vmovn_s16(v14).u32[0];
  *(unsigned char *)(a2 + 26)  = v20;
  *(unsigned char *)(a2 + 27)  = v19;
  *(unsigned char *)(a2 + 28)  = v18;
  *(unsigned char *)(a2 + 29)  = v17;
  *(_WORD *)(a2 + 30)  = v16;
  *(_WORD *)(a2 + 32)  = v15;
  *(void *)(a2 + 40)  = v12;
  return result;
}

unint64_t sub_100100E00(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_10047FBF8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000369C4(a1, a1[3]);
  sub_10010EB60();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return sub_100010754((uint64_t)a1);
  }
  v19[0]  = 0;
  unsigned __int8 v7 = KeyedDecodingContainer.decode(_:forKey:)();
  v19[0]  = 1;
  unsigned __int16 v8 = KeyedDecodingContainer.decode(_:forKey:)();
  v19[0]  = 2;
  unsigned __int8 v9 = KeyedDecodingContainer.decode(_:forKey:)();
  v19[0]  = 3;
  int v17 = KeyedDecodingContainer.decode(_:forKey:)();
  char v18 = 4;
  sub_10003FE54();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v15 = v19[0];
  uint64_t v14 = v19[1];
  uint64_t v13 = *(unsigned int *)&v19[2];
  char v18 = 5;
  unint64_t v16 = sub_10010E894();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v12 = *(unsigned int *)v19;
  v11[1]  = v19[4];
  char v18 = 6;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100010754((uint64_t)a1);
  return v7 | ((unint64_t)v8 << 16) | ((unint64_t)v9 << 32) | ((unint64_t)v17 << 40) | (v15 << 48) | (v14 << 56);
}

uint64_t sub_100101120(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_10047FBC8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_100103A88();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return sub_100010754((uint64_t)a1);
  }
  v10[14]  = 0;
  sub_10010E5F4();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v7 = v10[15];
  v10[13]  = 1;
  int v8 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100010754((uint64_t)a1);
  return v7 | (v8 << 8);
}

uint64_t sub_1001012D8(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_10047FBB8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[3];
  sub_1000369C4(a1, v7);
  sub_100103B30();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100010754((uint64_t)a1);
  }
  else
  {
    v11[31]  = 0;
    unsigned __int8 v8 = KeyedDecodingContainer.decode(_:forKey:)();
    v11[30]  = 1;
    int v10 = KeyedDecodingContainer.decode(_:forKey:)();
    sub_100010BCC(&qword_10047E7D0);
    v11[15]  = 2;
    sub_10010E990(&qword_10047FBC0);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    sub_100010754((uint64_t)a1);
    return v8 | (v10 << 8);
  }
  return v7;
}

uint64_t sub_1001014EC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v8 = sub_100010BCC(&qword_10047FBA0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  __int16 v11 = &v19.i8[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_100103B84();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100010754((uint64_t)a1);
  }
  LOBYTE(v34)  = 0;
  int v12 = KeyedDecodingContainer.decode(_:forKey:)();
  char v35 = 1;
  sub_10003FE54();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v3.i32[0]  = v34;
  int v32 = v12;
  int v33 = BYTE4(v34);
  int v13 = BYTE5(v34);
  char v35 = 2;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v4.i32[0]  = v34;
  int v30 = BYTE4(v34);
  int v31 = v13;
  int v14 = BYTE5(v34);
  char v35 = 3;
  sub_10010E8E8();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v29 = v14;
  uint64_t v15 = v34;
  char v35 = 4;
  sub_10010E93C();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v27 = v15;
  int v28 = v34;
  LODWORD(v15)  = BYTE1(v34);
  char v35 = 5;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v26 = v15;
  v5.i32[0]  = v34;
  int v16 = BYTE4(v34);
  LODWORD(v15)  = BYTE5(v34);
  LOBYTE(v34)  = 6;
  int v23 = KeyedDecodingContainer.decode(_:forKey:)();
  int v24 = v16;
  int v25 = v15;
  LOBYTE(v34)  = 7;
  int v22 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v34)  = 8;
  LOWORD(v15)  = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v34)  = 9;
  int v17 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(__int8 *, uint64_t))(v9 + 8))(v11, v8);
  int16x8_t v19 = (int16x8_t)vmovl_u8(v3);
  int16x8_t v20 = (int16x8_t)vmovl_u8(v4);
  int16x8_t v21 = (int16x8_t)vmovl_u8(v5);
  uint64_t result = sub_100010754((uint64_t)a1);
  *(_WORD *)a2  = v32;
  *(_DWORD *)(a2 + 2)  = vmovn_s16(v19).u32[0];
  *(unsigned char *)(a2 + 6)  = v33;
  *(unsigned char *)(a2 + 7)  = v31;
  *(_DWORD *)(a2 + 8)  = vmovn_s16(v20).u32[0];
  *(unsigned char *)(a2 + 12)  = v30;
  *(unsigned char *)(a2 + 13)  = v29;
  *(void *)(a2 + 16)  = v27;
  *(unsigned char *)(a2 + 24)  = v28;
  *(unsigned char *)(a2 + 25)  = v26;
  *(_DWORD *)(a2 + 26)  = vmovn_s16(v21).u32[0];
  *(unsigned char *)(a2 + 30)  = v24;
  *(unsigned char *)(a2 + 31)  = v25;
  *(unsigned char *)(a2 + 32)  = v23;
  *(unsigned char *)(a2 + 33)  = v22;
  *(_WORD *)(a2 + 34)  = v15;
  *(_DWORD *)(a2 + 36)  = v17;
  return result;
}

uint64_t sub_10010192C@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v7 = sub_100010BCC(&qword_10047FB90);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = &v20.i8[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_100103CDC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100010754((uint64_t)a1);
  }
  char v35 = 0;
  sub_10003FE54();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v31 = a2;
  v3.i32[0]  = v32;
  int v11 = v33;
  int v12 = v34;
  char v35 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v29 = v11;
  int v30 = v12;
  v4.i32[0]  = v32;
  LOBYTE(v11)  = v33;
  LOBYTE(v12)  = v34;
  LOBYTE(v32)  = 2;
  int v13 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v32)  = 3;
  int v27 = KeyedDecodingContainer.decode(_:forKey:)();
  int v28 = v13;
  char v35 = 4;
  sub_10010E894();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  __int32 v25 = v32;
  int v26 = v33;
  char v35 = 5;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  __int32 v24 = v32;
  int v14 = v33;
  LOBYTE(v32)  = 6;
  int v22 = KeyedDecodingContainer.decode(_:forKey:)();
  int v23 = v14;
  LOBYTE(v32)  = 7;
  int v15 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v32)  = 8;
  int v16 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(__int8 *, uint64_t))(v8 + 8))(v10, v7);
  int16x8_t v20 = (int16x8_t)vmovl_u8(v3);
  int16x8_t v21 = (int16x8_t)vmovl_u8(v4);
  uint64_t result = sub_100010754((uint64_t)a1);
  char v18 = v31;
  *int v31 = vmovn_s16(v20).u32[0];
  *((unsigned char *)v18 + 4)  = v29;
  *((unsigned char *)v18 + 5)  = v30;
  *(_DWORD *)((char *)v18 + 6)  = vmovn_s16(v21).u32[0];
  *((unsigned char *)v18 + 10)  = v11;
  *((unsigned char *)v18 + 11)  = v12;
  int v19 = v27;
  v18[3]  = v28;
  v18[4]  = v19;
  void v18[5] = v25;
  *((unsigned char *)v18 + 24)  = v26;
  v18[7]  = v24;
  *((unsigned char *)v18 + 32)  = v23;
  v18[9]  = v22;
  v18[10]  = v15;
  v18[11]  = v16;
  return result;
}

void *sub_100101CF0(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_10047FB80);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = sub_1000369C4(a1, a1[3]);
  sub_100103D30();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100010754((uint64_t)a1);
  }
  else
  {
    sub_10010E840();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = (void *)v9[15];
    sub_100010754((uint64_t)a1);
  }
  return v7;
}

uint64_t sub_100101E5C(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_10047FB78);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_100103DD8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return sub_100010754((uint64_t)a1);
  }
  char v14 = 0;
  unsigned __int8 v7 = KeyedDecodingContainer.decode(_:forKey:)();
  v12[8]  = 1;
  sub_10003FE54();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v8 = v12[9];
  uint64_t v9 = v12[10];
  uint64_t v10 = v13;
  sub_100010754((uint64_t)a1);
  return v7 | (unint64_t)(v8 << 8) | (v9 << 16) | (v10 << 24);
}

uint64_t sub_100102028(void *a1)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (!v1)
  {
    sub_100039448((uint64_t)v10, v11);
    dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    sub_100039448((uint64_t)v10, v11);
    char v3 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    sub_100039448((uint64_t)v10, v11);
    char v4 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    unint64_t v5 = sub_1000F8E44(v3, v4);
    if ((v5 & 0xFF00000000) != 0x300000000)
    {
      unint64_t v7 = v5;
      sub_100039448((uint64_t)v10, v11);
      __int16 v8 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
      sub_1000E4D24(v8 << 8, (uint64_t)v10);
      sub_100010754((uint64_t)v10);
      sub_100010754((uint64_t)a1);
      return v7 & 0xFFFFFFFFFFFFLL;
    }
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v6 = xmmword_1003B00B0;
    *(unsigned char *)(v6 + 16)  = 2;
    swift_willThrow();
    sub_100010754((uint64_t)v10);
  }
  return sub_100010754((uint64_t)a1);
}

uint64_t sub_1001021F0(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_10047FB48);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_100103F90();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return sub_100010754((uint64_t)a1);
  }
  v11[31]  = 0;
  unsigned __int8 v7 = KeyedDecodingContainer.decode(_:forKey:)();
  v11[29]  = 1;
  sub_10010E6F0();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v8 = v11[30];
  v11[28]  = 2;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  v11[15]  = 3;
  sub_10010E744();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100010754((uint64_t)a1);
  return v7 | (unint64_t)(v8 << 8) | (v9 << 32);
}

uint64_t sub_100102420(void *a1)
{
  uint64_t v3 = sub_100010BCC(&qword_10047FB38);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000369C4(a1, a1[3]);
  sub_10010408C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return sub_100010754((uint64_t)a1);
  }
  v11[15]  = 0;
  unsigned __int8 v7 = KeyedDecodingContainer.decode(_:forKey:)();
  v11[13]  = 1;
  sub_10010E69C();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  int v9 = v11[14];
  sub_100010754((uint64_t)a1);
  if (v9) {
    int v10 = 256;
  }
  else {
    int v10 = 0;
  }
  return v10 & 0xFFFFFF00 | v7;
}

uint64_t sub_1001025E4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3 >> 62;
  uint64_t v5 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v5 = (int)a2;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(a2 + 16);
      break;
    default:
      break;
  }
  uint64_t v6 = 0;
  uint64_t v7 = a2 >> 32;
  do
  {
    if ((a1 >> v6))
    {
      uint64_t v8 = BYTE6(a3);
      switch((int)v3)
      {
        case 0:
          goto LABEL_6;
        case 1:
          uint64_t v8 = a2 >> 32;
          goto LABEL_6;
        case 2:
          uint64_t v8 = *(void *)(a2 + 24);
LABEL_6:
          if (v5 != v8) {
            goto LABEL_7;
          }
          goto LABEL_23;
        case 3:
          if (!v5)
          {
LABEL_23:
            sub_10000F000();
            swift_allocError();
            *(void *)uint64_t v12 = 0;
            *(void *)(v12 + 8)  = 0;
            *(unsigned char *)(v12 + 16)  = 2;
            swift_willThrow();
            return a1;
          }
LABEL_7:
          if (__OFADD__(v5++, 1))
          {
            __break(1u);
            JUMPOUT(0x100102788);
          }
          return result;
        default:
          JUMPOUT(0);
      }
    }
    ++v6;
  }
  while (v6 != 32);
  uint64_t v10 = BYTE6(a3);
  switch((int)v3)
  {
    case 1:
      uint64_t v10 = a2 >> 32;
      goto LABEL_16;
    case 2:
      if (v5 != *(void *)(a2 + 24)) {
        goto LABEL_23;
      }
      goto LABEL_19;
    case 3:
      if (v5) {
        goto LABEL_23;
      }
      goto LABEL_27;
    default:
LABEL_16:
      if (v5 != v10) {
        goto LABEL_23;
      }
LABEL_19:
      if (v3)
      {
        if (v3 == 1)
        {
          uint64_t v11 = (int)a2;
        }
        else
        {
          uint64_t v11 = *(void *)(a2 + 16);
          uint64_t v7 = *(void *)(a2 + 24);
        }
        if (v7 < v11) {
          __break(1u);
        }
      }
LABEL_27:
      Data.subdata(in:)();
      break;
  }
  return a1;
}

uint64_t sub_1001027B8(void *a1)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v1) {
    return sub_100010754((uint64_t)a1);
  }
  sub_100039448((uint64_t)v13, v14);
  sub_10010E5A0();
  UnkeyedDecodingContainer.inferredDecode<A>()();
  sub_100039448((uint64_t)v13, v14);
  sub_10010E5F4();
  UnkeyedDecodingContainer.inferredDecode<A>()();
  uint64_t v3 = v16;
  sub_100039448((uint64_t)v13, v14);
  sub_10010E648();
  UnkeyedDecodingContainer.inferredDecode<A>()();
  int v4 = v16;
  sub_100039448((uint64_t)v13, v14);
  UnkeyedDecodingContainer.inferredDecode<A>()();
  uint64_t v5 = v16;
  sub_100039448((uint64_t)v13, v14);
  UnkeyedDecodingContainer.inferredDecode<A>()();
  uint64_t v6 = v16;
  sub_100039448((uint64_t)v13, v14);
  UnkeyedDecodingContainer.inferredDecode<A>()();
  uint64_t v8 = v14;
  uint64_t v12 = v15;
  sub_100039448((uint64_t)v13, v14);
  int v9 = (void *)type metadata accessor for AWDLActionFrame.AWDLAttribute(0);
  uint64_t v10 = sub_100104154(&qword_10047FB28, (void (*)(uint64_t))type metadata accessor for AWDLActionFrame.AWDLAttribute);
  UnkeyedDecodingContainer.inferredArrayDecode<A>()(v8, v9, v12, v10);
  sub_100010754((uint64_t)v13);
  sub_100010754((uint64_t)a1);
  uint64_t v11 = 256;
  if (!v4) {
    uint64_t v11 = 0;
  }
  return v11 | v3 | (v5 << 16) | (v6 << 32);
}

uint64_t sub_100102AA4(void *a1)
{
  uint64_t v3 = (uint64_t)sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v1)
  {
    sub_100010754((uint64_t)a1);
  }
  else
  {
    sub_100039448((uint64_t)v11, v12);
    uint64_t v4 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    uint64_t v6 = v4;
    if (v4)
    {
      sub_100039448((uint64_t)v11, v12);
      sub_10008B6F4();
      dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
      uint64_t v7 = v9;
      unint64_t v8 = v10;
    }
    else
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0xC000000000000000;
    }
    uint64_t v3 = sub_1001025E4(v6, v7, v8);
    sub_10000C970(v7, v8);
    sub_100010754((uint64_t)v11);
    sub_100010754((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_100102C14@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v2) {
    return sub_100010754((uint64_t)a1);
  }
  sub_100039448((uint64_t)v14, v15);
  sub_10010E798();
  UnkeyedDecodingContainer.inferredDecode<A>()();
  sub_100039448((uint64_t)v14, v15);
  sub_10003FE54();
  UnkeyedDecodingContainer.inferredDecode<A>()();
  v3.i32[0]  = v12;
  sub_100039448((uint64_t)v14, v15);
  unsigned __int8 v6 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
  unint64_t v7 = sub_1001C7008(v6);
  sub_100039448((uint64_t)v14, v15);
  char v8 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
  sub_100039448((uint64_t)v14, v15);
  sub_10010E7EC();
  UnkeyedDecodingContainer.inferredDecode<A>()();
  sub_100039448((uint64_t)v14, v15);
  unsigned __int8 v9 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
  unint64_t v10 = sub_1001C7008(v9);
  sub_100039448((uint64_t)v14, v15);
  UnkeyedDecodingContainer.inferredDecode<A>()();
  sub_100010754((uint64_t)v14);
  uint64_t result = sub_100010754((uint64_t)a1);
  *(unsigned char *)a2  = v12;
  *(_DWORD *)(a2 + 1)  = vmovn_s16((int16x8_t)vmovl_u8(v3)).u32[0];
  *(_WORD *)(a2 + 5)  = v13;
  *(_WORD *)(a2 + 12)  = WORD2(v7);
  *(_DWORD *)(a2 + 8)  = v7;
  *(void *)(a2 + 16)  = v8;
  *(unsigned char *)(a2 + 24)  = v12;
  *(_WORD *)(a2 + 32)  = WORD2(v10);
  *(_DWORD *)(a2 + 28)  = v10;
  *(_DWORD *)(a2 + 34)  = v12;
  *(_WORD *)(a2 + 38)  = v13;
  return result;
}

uint64_t sub_100102EF4(void *a1)
{
  uint8x8_t v3 = sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v1)
  {
    sub_100010754((uint64_t)a1);
    return (uint64_t)v3;
  }
  sub_100039448((uint64_t)v9, v10);
  uint64_t result = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
  __int16 v5 = result + 1;
  if ((v5 & 0x100) == 0)
  {
    sub_100039448((uint64_t)v9, v10);
    sub_10010ED04();
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    int v6 = v11;
    sub_100039448((uint64_t)v9, v10);
    dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    sub_100039448((uint64_t)v9, v10);
    dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    sub_100039448((uint64_t)v9, v10);
    dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    __int16 v7 = v5 << 8;
    if ((v6 - 2) >= 2)
    {
      if (v6) {
        sub_1000E5384(v7, (uint64_t)v9);
      }
      else {
        sub_1000E4F6C(v7, (uint64_t)v9);
      }
    }
    else
    {
      char v8 = sub_1000E54F0(v7, (uint64_t)v9);
    }
    uint8x8_t v3 = v8;
    sub_100010754((uint64_t)v9);
    sub_100010754((uint64_t)a1);
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001030D4(uint64_t a1)
{
  return a1;
}

unint64_t sub_100103100()
{
  unint64_t result = qword_10047F270;
  if (!qword_10047F270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F270);
  }
  return result;
}

unint64_t sub_100103154()
{
  unint64_t result = qword_10047F280;
  if (!qword_10047F280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F280);
  }
  return result;
}

unint64_t sub_1001031A8()
{
  unint64_t result = qword_10047F290;
  if (!qword_10047F290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F290);
  }
  return result;
}

unint64_t sub_1001031FC()
{
  unint64_t result = qword_10047F298;
  if (!qword_10047F298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F298);
  }
  return result;
}

unint64_t sub_100103250()
{
  unint64_t result = qword_10047F2A0;
  if (!qword_10047F2A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F2A0);
  }
  return result;
}

uint64_t sub_1001032A4(void *a1)
{
  type metadata accessor for String.Encoding();
  __chkstk_darwin();
  uint64_t v3 = a1[3];
  sub_1000369C4(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (!v1)
  {
    sub_100039448((uint64_t)v14, v15);
    sub_10010EA64();
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
    uint64_t v3 = v16;
    sub_100039448((uint64_t)v14, v15);
    unsigned __int8 v4 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    uint64_t v5 = v4;
    uint64_t v6 = v15;
    sub_100039448((uint64_t)v14, v15);
    uint64_t v8 = UnkeyedDecodingContainer.decodeData(with:)(v5, v6);
    unint64_t v10 = v9;
    static String.Encoding.utf8.getter();
    String.init(data:encoding:)();
    uint64_t v12 = v11;
    sub_10000C970(v8, v10);
    if (v12)
    {
      sub_100010754((uint64_t)v14);
      sub_100010754((uint64_t)a1);
      return v3;
    }
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v13 = xmmword_1003B00B0;
    *(unsigned char *)(v13 + 16)  = 2;
    swift_willThrow();
    sub_100010754((uint64_t)v14);
  }
  sub_100010754((uint64_t)a1);
  return v3;
}

unint64_t sub_1001034B4(void *a1)
{
  sub_1000369C4(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v1) {
    return sub_100010754((uint64_t)a1);
  }
  sub_100039448((uint64_t)v5, v6);
  sub_10010EAB8();
  UnkeyedDecodingContainer.inferredDecode<A>()();
  sub_100039448((uint64_t)v5, v6);
  UnkeyedDecodingContainer.inferredDecode<A>()();
  sub_100039448((uint64_t)v5, v6);
  UnkeyedDecodingContainer.inferredDecode<A>()();
  sub_100039448((uint64_t)v5, v6);
  sub_10010EB0C();
  UnkeyedDecodingContainer.inferredDecode<A>()();
  sub_100010754((uint64_t)v5);
  sub_100010754((uint64_t)a1);
  return v4 | ((unint64_t)v4 << 16) | ((unint64_t)v4 << 32);
}

uint64_t type metadata accessor for AWDLActionFrame.DataPathState(uint64_t a1)
{
  return sub_10000A7D0(a1, (uint64_t *)&unk_10047F718);
}

uint64_t sub_1001036A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010BCC(&qword_10047F2A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10010370C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010BCC(&qword_10047F2A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_100103774()
{
  unint64_t result = qword_10047F2B0;
  if (!qword_10047F2B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F2B0);
  }
  return result;
}

uint64_t sub_1001037C8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100103830(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_100103890()
{
  unint64_t result = qword_10047F2B8;
  if (!qword_10047F2B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F2B8);
  }
  return result;
}

unint64_t sub_1001038E4()
{
  unint64_t result = qword_10047F2C0;
  if (!qword_10047F2C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F2C0);
  }
  return result;
}

unint64_t sub_100103938()
{
  unint64_t result = qword_10047F2C8;
  if (!qword_10047F2C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F2C8);
  }
  return result;
}

unint64_t sub_10010398C()
{
  unint64_t result = qword_10047F2D0;
  if (!qword_10047F2D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F2D0);
  }
  return result;
}

unint64_t sub_1001039E0()
{
  unint64_t result = qword_10047F2E0;
  if (!qword_10047F2E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F2E0);
  }
  return result;
}

unint64_t sub_100103A34()
{
  unint64_t result = qword_10047F300;
  if (!qword_10047F300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F300);
  }
  return result;
}

unint64_t sub_100103A88()
{
  unint64_t result = qword_10047F318;
  if (!qword_10047F318)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F318);
  }
  return result;
}

unint64_t sub_100103ADC()
{
  unint64_t result = qword_10047F320;
  if (!qword_10047F320)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F320);
  }
  return result;
}

unint64_t sub_100103B30()
{
  unint64_t result = qword_10047F330;
  if (!qword_10047F330)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F330);
  }
  return result;
}

unint64_t sub_100103B84()
{
  unint64_t result = qword_10047F340;
  if (!qword_10047F340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F340);
  }
  return result;
}

unint64_t sub_100103BD8()
{
  unint64_t result = qword_10047F348;
  if (!qword_10047F348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F348);
  }
  return result;
}

unint64_t sub_100103C2C()
{
  unint64_t result = qword_10047F350;
  if (!qword_10047F350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F350);
  }
  return result;
}

uint64_t sub_100103C80(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_100103CDC()
{
  unint64_t result = qword_10047F360;
  if (!qword_10047F360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F360);
  }
  return result;
}

unint64_t sub_100103D30()
{
  unint64_t result = qword_10047F370;
  if (!qword_10047F370)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F370);
  }
  return result;
}

unint64_t sub_100103D84()
{
  unint64_t result = qword_10047F378;
  if (!qword_10047F378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F378);
  }
  return result;
}

unint64_t sub_100103DD8()
{
  unint64_t result = qword_10047F388;
  if (!qword_10047F388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F388);
  }
  return result;
}

unint64_t sub_100103E2C()
{
  unint64_t result = qword_10047F390;
  if (!qword_10047F390)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F390);
  }
  return result;
}

uint64_t sub_100103E80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100010BCC((uint64_t *)&unk_100487B90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100103EE8()
{
  unint64_t result = qword_10047F398;
  if (!qword_10047F398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F398);
  }
  return result;
}

unint64_t sub_100103F3C()
{
  unint64_t result = qword_10047F3A8;
  if (!qword_10047F3A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F3A8);
  }
  return result;
}

unint64_t sub_100103F90()
{
  unint64_t result = qword_10047F3B8;
  if (!qword_10047F3B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F3B8);
  }
  return result;
}

unint64_t sub_100103FE4()
{
  unint64_t result = qword_10047F3C0;
  if (!qword_10047F3C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F3C0);
  }
  return result;
}

unint64_t sub_100104038()
{
  unint64_t result = qword_10047F3C8;
  if (!qword_10047F3C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F3C8);
  }
  return result;
}

unint64_t sub_10010408C()
{
  unint64_t result = qword_10047F3D8;
  if (!qword_10047F3D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F3D8);
  }
  return result;
}

unint64_t sub_1001040E0()
{
  unint64_t result = qword_10047F3E0;
  if (!qword_10047F3E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F3E0);
  }
  return result;
}

uint64_t type metadata accessor for AWDLActionFrame.AWDLAttribute(uint64_t a1)
{
  return sub_10000A7D0(a1, qword_10047F848);
}

uint64_t sub_100104154(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10010419C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_100104204()
{
  unint64_t result = qword_10047F3E8;
  if (!qword_10047F3E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F3E8);
  }
  return result;
}

uint64_t sub_100104258(uint64_t a1)
{
  return a1;
}

unint64_t sub_100104284()
{
  unint64_t result = qword_10047F420;
  if (!qword_10047F420)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F420);
  }
  return result;
}

unint64_t sub_1001042D8()
{
  unint64_t result = qword_10047F428;
  if (!qword_10047F428)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F428);
  }
  return result;
}

unint64_t sub_10010432C()
{
  unint64_t result = qword_10047F438;
  if (!qword_10047F438)
  {
    sub_100014434(&qword_10047F430);
    sub_100104154(&qword_10047F440, (void (*)(uint64_t))type metadata accessor for AWDLActionFrame.AWDLAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F438);
  }
  return result;
}

uint64_t type metadata accessor for AWDLActionFrame.Header(uint64_t a1)
{
  return sub_10000A7D0(a1, qword_10047F8D8);
}

unint64_t sub_1001043F4()
{
  unint64_t result = qword_10047F448;
  if (!qword_10047F448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F448);
  }
  return result;
}

unint64_t sub_10010444C()
{
  unint64_t result = qword_10047F450;
  if (!qword_10047F450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F450);
  }
  return result;
}

unint64_t sub_1001044A4()
{
  unint64_t result = qword_10047F458;
  if (!qword_10047F458)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F458);
  }
  return result;
}

uint64_t sub_1001044F8()
{
  return sub_100104154(&qword_10047F460, (void (*)(uint64_t))type metadata accessor for AWDLActionFrame.ServiceResponse);
}

unint64_t sub_100104544()
{
  unint64_t result = qword_10047F468;
  if (!qword_10047F468)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F468);
  }
  return result;
}

unint64_t sub_10010459C()
{
  unint64_t result = qword_10047F470;
  if (!qword_10047F470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F470);
  }
  return result;
}

unint64_t sub_1001045F4()
{
  unint64_t result = qword_10047F478;
  if (!qword_10047F478)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F478);
  }
  return result;
}

unint64_t sub_10010464C()
{
  unint64_t result = qword_10047F480;
  if (!qword_10047F480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F480);
  }
  return result;
}

unint64_t sub_1001046A4()
{
  unint64_t result = qword_10047F488;
  if (!qword_10047F488)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F488);
  }
  return result;
}

unint64_t sub_1001046FC()
{
  unint64_t result = qword_10047F490;
  if (!qword_10047F490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F490);
  }
  return result;
}

unint64_t sub_100104754()
{
  unint64_t result = qword_10047F498;
  if (!qword_10047F498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F498);
  }
  return result;
}

unint64_t sub_1001047AC()
{
  unint64_t result = qword_10047F4A0;
  if (!qword_10047F4A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F4A0);
  }
  return result;
}

unint64_t sub_100104804()
{
  unint64_t result = qword_10047F4A8;
  if (!qword_10047F4A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F4A8);
  }
  return result;
}

unint64_t sub_10010485C()
{
  unint64_t result = qword_10047F4B0;
  if (!qword_10047F4B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F4B0);
  }
  return result;
}

uint64_t sub_1001048B0()
{
  return sub_100104154(&qword_10047F4B8, (void (*)(uint64_t))type metadata accessor for AWDLActionFrame.DataPathState);
}

unint64_t sub_1001048FC()
{
  unint64_t result = qword_10047F4C0;
  if (!qword_10047F4C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F4C0);
  }
  return result;
}

unint64_t sub_100104954()
{
  unint64_t result = qword_10047F4C8;
  if (!qword_10047F4C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F4C8);
  }
  return result;
}

unint64_t sub_1001049AC()
{
  unint64_t result = qword_10047F4D0;
  if (!qword_10047F4D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F4D0);
  }
  return result;
}

unint64_t sub_100104A04()
{
  unint64_t result = qword_10047F4D8;
  if (!qword_10047F4D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F4D8);
  }
  return result;
}

unint64_t sub_100104A5C()
{
  unint64_t result = qword_10047F4E0;
  if (!qword_10047F4E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F4E0);
  }
  return result;
}

unint64_t sub_100104AB4()
{
  unint64_t result = qword_10047F4E8;
  if (!qword_10047F4E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F4E8);
  }
  return result;
}

unint64_t sub_100104B0C()
{
  unint64_t result = qword_10047F4F0;
  if (!qword_10047F4F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F4F0);
  }
  return result;
}

unint64_t sub_100104B64()
{
  unint64_t result = qword_10047F4F8;
  if (!qword_10047F4F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F4F8);
  }
  return result;
}

unint64_t sub_100104BBC()
{
  unint64_t result = qword_10047F500;
  if (!qword_10047F500)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F500);
  }
  return result;
}

unint64_t sub_100104C14()
{
  unint64_t result = qword_10047F508;
  if (!qword_10047F508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F508);
  }
  return result;
}

unint64_t sub_100104C6C()
{
  unint64_t result = qword_10047F510;
  if (!qword_10047F510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F510);
  }
  return result;
}

unint64_t sub_100104CC4()
{
  unint64_t result = qword_10047F518;
  if (!qword_10047F518)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F518);
  }
  return result;
}

unint64_t sub_100104D1C()
{
  unint64_t result = qword_10047F520;
  if (!qword_10047F520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F520);
  }
  return result;
}

unint64_t sub_100104D74()
{
  unint64_t result = qword_10047F528;
  if (!qword_10047F528)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F528);
  }
  return result;
}

unint64_t sub_100104DCC()
{
  unint64_t result = qword_10047F530;
  if (!qword_10047F530)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F530);
  }
  return result;
}

unint64_t sub_100104E24()
{
  unint64_t result = qword_10047F538;
  if (!qword_10047F538)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F538);
  }
  return result;
}

unint64_t sub_100104E7C()
{
  unint64_t result = qword_10047F540;
  if (!qword_10047F540)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F540);
  }
  return result;
}

unint64_t sub_100104ED4()
{
  unint64_t result = qword_10047F548;
  if (!qword_10047F548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F548);
  }
  return result;
}

unint64_t sub_100104F2C()
{
  unint64_t result = qword_10047F550;
  if (!qword_10047F550)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F550);
  }
  return result;
}

unint64_t sub_100104F84()
{
  unint64_t result = qword_10047F558;
  if (!qword_10047F558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F558);
  }
  return result;
}

unint64_t sub_100104FDC()
{
  unint64_t result = qword_10047F560;
  if (!qword_10047F560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F560);
  }
  return result;
}

unint64_t sub_100105034()
{
  unint64_t result = qword_10047F568;
  if (!qword_10047F568)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F568);
  }
  return result;
}

unint64_t sub_10010508C()
{
  unint64_t result = qword_10047F570;
  if (!qword_10047F570)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F570);
  }
  return result;
}

unint64_t sub_1001050E4()
{
  unint64_t result = qword_10047F578;
  if (!qword_10047F578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F578);
  }
  return result;
}

unint64_t sub_10010513C()
{
  unint64_t result = qword_10047F580;
  if (!qword_10047F580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F580);
  }
  return result;
}

unint64_t sub_100105194()
{
  unint64_t result = qword_10047F588;
  if (!qword_10047F588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F588);
  }
  return result;
}

unint64_t sub_1001051EC()
{
  unint64_t result = qword_10047F590;
  if (!qword_10047F590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F590);
  }
  return result;
}

unint64_t sub_100105244()
{
  unint64_t result = qword_10047F598;
  if (!qword_10047F598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F598);
  }
  return result;
}

unint64_t sub_10010529C()
{
  unint64_t result = qword_10047F5A0;
  if (!qword_10047F5A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F5A0);
  }
  return result;
}

unint64_t sub_1001052F4()
{
  unint64_t result = qword_10047F5A8;
  if (!qword_10047F5A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F5A8);
  }
  return result;
}

unint64_t sub_10010534C()
{
  unint64_t result = qword_10047F5B0;
  if (!qword_10047F5B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F5B0);
  }
  return result;
}

unint64_t sub_1001053A4()
{
  unint64_t result = qword_10047F5B8;
  if (!qword_10047F5B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F5B8);
  }
  return result;
}

unint64_t sub_1001053FC()
{
  unint64_t result = qword_10047F5C0;
  if (!qword_10047F5C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F5C0);
  }
  return result;
}

unint64_t sub_100105454()
{
  unint64_t result = qword_10047F5C8;
  if (!qword_10047F5C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F5C8);
  }
  return result;
}

unint64_t sub_1001054AC()
{
  unint64_t result = qword_10047F5D0;
  if (!qword_10047F5D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F5D0);
  }
  return result;
}

unint64_t sub_100105504()
{
  unint64_t result = qword_10047F5D8;
  if (!qword_10047F5D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F5D8);
  }
  return result;
}

uint64_t sub_100105558()
{
  return sub_100104154(&qword_10047F5E0, (void (*)(uint64_t))type metadata accessor for AWDLActionFrame.AWDLAttribute);
}

unint64_t sub_1001055A4()
{
  unint64_t result = qword_10047F5E8;
  if (!qword_10047F5E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F5E8);
  }
  return result;
}

unint64_t sub_1001055FC()
{
  unint64_t result = qword_10047F5F0;
  if (!qword_10047F5F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F5F0);
  }
  return result;
}

unint64_t sub_100105654()
{
  unint64_t result = qword_10047F5F8;
  if (!qword_10047F5F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F5F8);
  }
  return result;
}

unint64_t sub_1001056AC()
{
  unint64_t result = qword_10047F600;
  if (!qword_10047F600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F600);
  }
  return result;
}

unint64_t sub_100105704()
{
  unint64_t result = qword_10047F608;
  if (!qword_10047F608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F608);
  }
  return result;
}

uint64_t sub_100105758()
{
  return sub_100104154(&qword_10047F610, (void (*)(uint64_t))type metadata accessor for AWDLActionFrame.Header);
}

uint64_t sub_1001057A4(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1)  = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2)  = *(unsigned char *)(a2 + 2);
  *(void *)(a1 + 4)  = *(void *)(a2 + 4);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AWDLActionFrame(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1)  = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2)  = *(unsigned char *)(a2 + 2);
  *(_DWORD *)(a1 + 4)  = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8)  = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AWDLActionFrame(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1)  = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2)  = *(unsigned char *)(a2 + 2);
  *(void *)(a1 + 4)  = *(void *)(a2 + 4);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AWDLActionFrame()
{
  return &type metadata for AWDLActionFrame;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.OUIType()
{
  return &type metadata for AWDLActionFrame.OUIType;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.OUISubtype()
{
  return &type metadata for AWDLActionFrame.OUISubtype;
}

uint64_t initializeBufferWithCopyOfBuffer for Channel.ChannelBitmap(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AWDLActionFrame.ServiceRequest(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  *(_WORD *)(a1 + 2)  = *(_WORD *)(a2 + 2);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AWDLActionFrame.ServiceRequest(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.ServiceRequest()
{
  return &type metadata for AWDLActionFrame.ServiceRequest;
}

uint64_t initializeBufferWithCopyOfBuffer for AWDLActionFrame.ServiceResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *(void *)a1  = *a2;
    a1  = v11 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v12 = a2[1];
      *(void *)a1  = *a2;
      *(void *)(a1 + 8)  = v12;
      uint64_t v13 = a2[3];
      *(void *)(a1 + 16)  = a2[2];
      *(void *)(a1 + 24)  = v13;
      *(unsigned char *)(a1 + 32)  = *((unsigned char *)a2 + 32);
      *(unsigned char *)(a1 + 33)  = *((unsigned char *)a2 + 33);
      uint64_t v14 = (int *)type metadata accessor for DNSRecords.SRV();
      uint64_t v15 = v14[5];
      uint64_t v26 = a1 + v15;
      uint64_t v16 = (uint64_t)a2 + v15;
      uint64_t v17 = type metadata accessor for NWEndpoint.Port();
      char v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v18(v26, v16, v17);
      uint64_t v19 = v14[6];
      int16x8_t v20 = (void *)(a1 + v19);
      int16x8_t v21 = (uint64_t *)((char *)a2 + v19);
      uint64_t v22 = v21[1];
      *int16x8_t v20 = *v21;
      v20[1]  = v22;
      *(_WORD *)(a1 + v14[7])  = *(_WORD *)((char *)a2 + v14[7]);
      *(_WORD *)(a1 + v14[8])  = *(_WORD *)((char *)a2 + v14[8]);
      swift_bridgeObjectRetain();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = a2[1];
      *(void *)a1  = *a2;
      *(void *)(a1 + 8)  = v7;
      uint64_t v8 = a2[3];
      *(void *)(a1 + 16)  = a2[2];
      *(void *)(a1 + 24)  = v8;
      *(unsigned char *)(a1 + 32)  = *((unsigned char *)a2 + 32);
      *(unsigned char *)(a1 + 33)  = *((unsigned char *)a2 + 33);
      uint64_t v10 = a2[5];
      unint64_t v9 = a2[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100013D44(v10, v9);
      *(void *)(a1 + 40)  = v10;
      *(void *)(a1 + 48)  = v9;
    }
    else
    {
      uint64_t v23 = a2[1];
      *(void *)a1  = *a2;
      *(void *)(a1 + 8)  = v23;
      uint64_t v24 = a2[3];
      *(void *)(a1 + 16)  = a2[2];
      *(void *)(a1 + 24)  = v24;
      *(unsigned char *)(a1 + 32)  = *((unsigned char *)a2 + 32);
      *(unsigned char *)(a1 + 33)  = *((unsigned char *)a2 + 33);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AWDLActionFrame.ServiceResponse(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = a1 + *(int *)(type metadata accessor for DNSRecords.SRV() + 20);
    uint64_t v4 = type metadata accessor for NWEndpoint.Port();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
LABEL_6:
    return swift_bridgeObjectRelease();
  }
  if (result != 1)
  {
    if (result) {
      return result;
    }
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a1 + 40);
  unint64_t v6 = *(void *)(a1 + 48);

  return sub_10000C970(v5, v6);
}

uint64_t initializeWithCopy for AWDLActionFrame.ServiceResponse(uint64_t a1, uint64_t a2)
{
  EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v9 = *(void *)(a2 + 8);
    *(void *)a1  = *(void *)a2;
    *(void *)(a1 + 8)  = v9;
    uint64_t v10 = *(void *)(a2 + 24);
    *(void *)(a1 + 16)  = *(void *)(a2 + 16);
    *(void *)(a1 + 24)  = v10;
    *(unsigned char *)(a1 + 32)  = *(unsigned char *)(a2 + 32);
    *(unsigned char *)(a1 + 33)  = *(unsigned char *)(a2 + 33);
    uint64_t v11 = (int *)type metadata accessor for DNSRecords.SRV();
    uint64_t v12 = v11[5];
    uint64_t v22 = a2 + v12;
    uint64_t v23 = a1 + v12;
    uint64_t v13 = type metadata accessor for NWEndpoint.Port();
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(v23, v22, v13);
    uint64_t v15 = v11[6];
    uint64_t v16 = (void *)(a1 + v15);
    uint64_t v17 = (void *)(a2 + v15);
    uint64_t v18 = v17[1];
    *uint64_t v16 = *v17;
    v16[1]  = v18;
    *(_WORD *)(a1 + v11[7])  = *(_WORD *)(a2 + v11[7]);
    *(_WORD *)(a1 + v11[8])  = *(_WORD *)(a2 + v11[8]);
LABEL_6:
    swift_bridgeObjectRetain();
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v19 = *(void *)(a2 + 8);
    *(void *)a1  = *(void *)a2;
    *(void *)(a1 + 8)  = v19;
    uint64_t v20 = *(void *)(a2 + 24);
    *(void *)(a1 + 16)  = *(void *)(a2 + 16);
    *(void *)(a1 + 24)  = v20;
    *(unsigned char *)(a1 + 32)  = *(unsigned char *)(a2 + 32);
    *(unsigned char *)(a1 + 33)  = *(unsigned char *)(a2 + 33);
    swift_bridgeObjectRetain();
    goto LABEL_6;
  }
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1  = *(void *)a2;
  *(void *)(a1 + 8)  = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  *(void *)(a1 + 24)  = v6;
  *(unsigned char *)(a1 + 32)  = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33)  = *(unsigned char *)(a2 + 33);
  uint64_t v8 = *(void *)(a2 + 40);
  unint64_t v7 = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100013D44(v8, v7);
  *(void *)(a1 + 40)  = v8;
  *(void *)(a1 + 48)  = v7;
LABEL_7:
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for AWDLActionFrame.ServiceResponse(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_100103830(a1, type metadata accessor for AWDLActionFrame.ServiceResponse);
    EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(void *)a1  = *(void *)a2;
      *(void *)(a1 + 8)  = *(void *)(a2 + 8);
      *(void *)(a1 + 16)  = *(void *)(a2 + 16);
      *(void *)(a1 + 24)  = *(void *)(a2 + 24);
      *(unsigned char *)(a1 + 32)  = *(unsigned char *)(a2 + 32);
      *(unsigned char *)(a1 + 33)  = *(unsigned char *)(a2 + 33);
      unint64_t v7 = (int *)type metadata accessor for DNSRecords.SRV();
      uint64_t v8 = v7[5];
      uint64_t v15 = a2 + v8;
      uint64_t v16 = a1 + v8;
      uint64_t v9 = type metadata accessor for NWEndpoint.Port();
      uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v10(v16, v15, v9);
      uint64_t v11 = v7[6];
      uint64_t v12 = (void *)(a1 + v11);
      uint64_t v13 = (void *)(a2 + v11);
      *uint64_t v12 = *v13;
      v12[1]  = v13[1];
      *(_WORD *)(a1 + v7[7])  = *(_WORD *)(a2 + v7[7]);
      *(_WORD *)(a1 + v7[8])  = *(_WORD *)(a2 + v7[8]);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(void *)a1  = *(void *)a2;
        *(void *)(a1 + 8)  = *(void *)(a2 + 8);
        *(void *)(a1 + 16)  = *(void *)(a2 + 16);
        *(void *)(a1 + 24)  = *(void *)(a2 + 24);
        *(unsigned char *)(a1 + 32)  = *(unsigned char *)(a2 + 32);
        *(unsigned char *)(a1 + 33)  = *(unsigned char *)(a2 + 33);
        uint64_t v6 = *(void *)(a2 + 40);
        unint64_t v5 = *(void *)(a2 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_100013D44(v6, v5);
        *(void *)(a1 + 40)  = v6;
        *(void *)(a1 + 48)  = v5;
LABEL_8:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      *(void *)a1  = *(void *)a2;
      *(void *)(a1 + 8)  = *(void *)(a2 + 8);
      *(void *)(a1 + 16)  = *(void *)(a2 + 16);
      *(void *)(a1 + 24)  = *(void *)(a2 + 24);
      *(unsigned char *)(a1 + 32)  = *(unsigned char *)(a2 + 32);
      *(unsigned char *)(a1 + 33)  = *(unsigned char *)(a2 + 33);
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain();
    goto LABEL_8;
  }
  return a1;
}

_OWORD *initializeWithTake for AWDLActionFrame.ServiceResponse(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    long long v6 = a2[1];
    *a1  = *a2;
    a1[1]  = v6;
    *((_WORD *)a1 + 16)  = *((_WORD *)a2 + 16);
    unint64_t v7 = (int *)type metadata accessor for DNSRecords.SRV();
    uint64_t v8 = v7[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for NWEndpoint.Port();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
    *(_OWORD *)((char *)a1 + v7[6])  = *(_OWORD *)((char *)a2 + v7[6]);
    *(_WORD *)((char *)a1 + v7[7])  = *(_WORD *)((char *)a2 + v7[7]);
    *(_WORD *)((char *)a1 + v7[8])  = *(_WORD *)((char *)a2 + v7[8]);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *assignWithTake for AWDLActionFrame.ServiceResponse(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100103830((uint64_t)a1, type metadata accessor for AWDLActionFrame.ServiceResponse);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      long long v6 = a2[1];
      *a1  = *a2;
      a1[1]  = v6;
      *((_WORD *)a1 + 16)  = *((_WORD *)a2 + 16);
      unint64_t v7 = (int *)type metadata accessor for DNSRecords.SRV();
      uint64_t v8 = v7[5];
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for NWEndpoint.Port();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
      *(_OWORD *)((char *)a1 + v7[6])  = *(_OWORD *)((char *)a2 + v7[6]);
      *(_WORD *)((char *)a1 + v7[7])  = *(_WORD *)((char *)a2 + v7[7]);
      *(_WORD *)((char *)a1 + v7[8])  = *(_WORD *)((char *)a2 + v7[8]);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1001062E4()
{
  uint64_t result = type metadata accessor for DNSRecords.SRV();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.AWDLChannelSequenceParameter()
{
  return &type metadata for AWDLActionFrame.AWDLChannelSequenceParameter;
}

uint64_t destroy for AWDLActionFrame.SynchronizationParameter()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AWDLActionFrame.SynchronizationParameter(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 2)  = *(_DWORD *)(a2 + 2);
  *(void *)(a1 + 6)  = *(void *)(a2 + 6);
  *(_DWORD *)(a1 + 14)  = *(_DWORD *)(a2 + 14);
  *(_DWORD *)(a1 + 18)  = *(_DWORD *)(a2 + 18);
  *(void *)(a1 + 22)  = *(void *)(a2 + 22);
  *(_DWORD *)(a1 + 30)  = *(_DWORD *)(a2 + 30);
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AWDLActionFrame.SynchronizationParameter(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(_WORD *)(a1 + 2)  = *(_WORD *)(a2 + 2);
  *(unsigned char *)(a1 + 4)  = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a1 + 5)  = *(unsigned char *)(a2 + 5);
  *(_WORD *)(a1 + 6)  = *(_WORD *)(a2 + 6);
  *(_WORD *)(a1 + 8)  = *(_WORD *)(a2 + 8);
  *(_WORD *)(a1 + 10)  = *(_WORD *)(a2 + 10);
  *(_WORD *)(a1 + 12)  = *(_WORD *)(a2 + 12);
  *(_WORD *)(a1 + 14)  = *(_WORD *)(a2 + 14);
  *(_WORD *)(a1 + 16)  = *(_WORD *)(a2 + 16);
  *(unsigned char *)(a1 + 18)  = *(unsigned char *)(a2 + 18);
  *(unsigned char *)(a1 + 19)  = *(unsigned char *)(a2 + 19);
  *(unsigned char *)(a1 + 20)  = *(unsigned char *)(a2 + 20);
  *(unsigned char *)(a1 + 21)  = *(unsigned char *)(a2 + 21);
  *(unsigned char *)(a1 + 22)  = *(unsigned char *)(a2 + 22);
  *(unsigned char *)(a1 + 23)  = *(unsigned char *)(a2 + 23);
  *(unsigned char *)(a1 + 24)  = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25)  = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26)  = *(unsigned char *)(a2 + 26);
  *(unsigned char *)(a1 + 27)  = *(unsigned char *)(a2 + 27);
  *(unsigned char *)(a1 + 28)  = *(unsigned char *)(a2 + 28);
  *(unsigned char *)(a1 + 29)  = *(unsigned char *)(a2 + 29);
  *(_WORD *)(a1 + 30)  = *(_WORD *)(a2 + 30);
  *(_WORD *)(a1 + 32)  = *(_WORD *)(a2 + 32);
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AWDLActionFrame.SynchronizationParameter(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 2)  = *(_DWORD *)(a2 + 2);
  *(void *)(a1 + 6)  = *(void *)(a2 + 6);
  *(_DWORD *)(a1 + 14)  = *(_DWORD *)(a2 + 14);
  *(void *)(a1 + 18)  = *(void *)(a2 + 18);
  *(_DWORD *)(a1 + 26)  = *(_DWORD *)(a2 + 26);
  *(_DWORD *)(a1 + 30)  = *(_DWORD *)(a2 + 30);
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AWDLActionFrame.SynchronizationParameter(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AWDLActionFrame.SynchronizationParameter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40)  = 0;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + 8)  = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48)  = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40)  = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.SynchronizationParameter()
{
  return &type metadata for AWDLActionFrame.SynchronizationParameter;
}

__n128 initializeWithCopy for AWDLActionFrame.DeprecatedElectionParameter(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9)  = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1  = result;
  return result;
}

uint64_t getEnumTagSinglePayload for AWDLActionFrame.DeprecatedElectionParameter(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AWDLActionFrame.DeprecatedElectionParameter(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8)  = 0;
    *(void *)(result + 16)  = 0;
    *(unsigned char *)(result + 24)  = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 25)  = v3;
  return result;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.DeprecatedElectionParameter()
{
  return &type metadata for AWDLActionFrame.DeprecatedElectionParameter;
}

uint64_t initializeWithCopy for AWDLActionFrame.ServiceParameter(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 2)  = *(_DWORD *)(a2 + 2);
  *(_DWORD *)(a1 + 8)  = *(_DWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  unint64_t v4 = *(void *)(a2 + 24);
  sub_100013D44(v3, v4);
  *(void *)(a1 + 16)  = v3;
  *(void *)(a1 + 24)  = v4;
  return a1;
}

uint64_t assignWithCopy for AWDLActionFrame.ServiceParameter(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(_WORD *)(a1 + 2)  = *(_WORD *)(a2 + 2);
  *(_WORD *)(a1 + 4)  = *(_WORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8)  = *(_DWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  unint64_t v4 = *(void *)(a2 + 24);
  sub_100013D44(v3, v4);
  uint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 16)  = v3;
  *(void *)(a1 + 24)  = v4;
  sub_10000C970(v5, v6);
  return a1;
}

uint64_t assignWithTake for AWDLActionFrame.ServiceParameter(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 2)  = *(_DWORD *)(a2 + 2);
  *(_DWORD *)(a1 + 8)  = *(_DWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16)  = *(_OWORD *)(a2 + 16);
  sub_10000C970(v3, v4);
  return a1;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.ServiceParameter()
{
  return &type metadata for AWDLActionFrame.ServiceParameter;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.ServiceParameter.Flags()
{
  return &type metadata for AWDLActionFrame.ServiceParameter.Flags;
}

uint64_t sub_1001067B8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  sub_100013D44(v3, v4);
  *(void *)(a1 + 8)  = v3;
  *(void *)(a1 + 16)  = v4;
  return a1;
}

uint64_t assignWithCopy for AWDLActionFrame.ServiceParameter.SSTH(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  sub_100013D44(v3, v4);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 8)  = v3;
  *(void *)(a1 + 16)  = v4;
  sub_10000C970(v5, v6);
  return a1;
}

uint64_t assignWithTake for AWDLActionFrame.ServiceParameter.SSTH(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8)  = *(_OWORD *)(a2 + 8);
  sub_10000C970(v3, v4);
  return a1;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.ServiceParameter.SSTH()
{
  return &type metadata for AWDLActionFrame.ServiceParameter.SSTH;
}

void *initializeBufferWithCopyOfBuffer for AWDLActionFrame.DataPathState(uint64_t a1, uint64_t *a2, int *a3)
{
  unint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (void *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1  = *(_WORD *)a2;
    *(unsigned char *)(a1 + 2)  = *((unsigned char *)a2 + 2);
    *(_DWORD *)(a1 + 4)  = *((_DWORD *)a2 + 1);
    *(_WORD *)(a1 + 8)  = *((_WORD *)a2 + 4);
    *(_DWORD *)(a1 + 10)  = *(_DWORD *)((char *)a2 + 10);
    *(_DWORD *)(a1 + 13)  = *(_DWORD *)((char *)a2 + 13);
    *(_WORD *)(a1 + 24)  = *((_WORD *)a2 + 12);
    *(_DWORD *)(a1 + 20)  = *((_DWORD *)a2 + 5);
    int v7 = *(_DWORD *)((char *)a2 + 26);
    *(_DWORD *)(a1 + 29)  = *(_DWORD *)((char *)a2 + 29);
    *(_DWORD *)(a1 + 26)  = v7;
    uint64_t v8 = a2[6];
    *(void *)(a1 + 40)  = a2[5];
    *(void *)(a1 + 48)  = v8;
    *(_DWORD *)(a1 + 56)  = *((_DWORD *)a2 + 14);
    *(_DWORD *)(a1 + 59)  = *(_DWORD *)((char *)a2 + 59);
    *(unsigned char *)(a1 + 63)  = *((unsigned char *)a2 + 63);
    *(_DWORD *)(a1 + 64)  = *((_DWORD *)a2 + 16);
    *(unsigned char *)(a1 + 68)  = *((unsigned char *)a2 + 68);
    int v9 = *((_DWORD *)a2 + 18);
    *(unsigned char *)(a1 + 76)  = *((unsigned char *)a2 + 76);
    *(_DWORD *)(a1 + 72)  = v9;
    long long v10 = *(_OWORD *)((char *)a2 + 77);
    *(_WORD *)(a1 + 93)  = *(_WORD *)((char *)a2 + 93);
    uint64_t v11 = a3[34];
    uint64_t v12 = (void *)(a1 + v11);
    uint64_t v13 = (char *)a2 + v11;
    *(_OWORD *)(a1 + 77)  = v10;
    uint64_t v14 = type metadata accessor for DispatchTimeInterval();
    uint64_t v15 = *(void *)(v14 - 8);
    uint64_t v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
    swift_bridgeObjectRetain();
    if (v16(v13, 1, v14))
    {
      uint64_t v17 = sub_100010BCC(&qword_10047F2A8);
      memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    uint64_t v19 = a3[35];
    uint64_t v20 = a3[36];
    int16x8_t v21 = (char *)v4 + v19;
    uint64_t v22 = (uint64_t)a2 + v19;
    *(_DWORD *)int16x8_t v21 = *(_DWORD *)v22;
    void v21[4] = *(unsigned char *)(v22 + 4);
    uint64_t v23 = (char *)v4 + v20;
    uint64_t v24 = (uint64_t)a2 + v20;
    *(_DWORD *)uint64_t v23 = *(_DWORD *)v24;
    v23[4]  = *(unsigned char *)(v24 + 4);
  }
  return v4;
}

uint64_t destroy for AWDLActionFrame.DataPathState(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 136);
  uint64_t v5 = type metadata accessor for DispatchTimeInterval();
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
  if (!result)
  {
    int v7 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
    return v7(v4, v5);
  }
  return result;
}

uint64_t initializeWithCopy for AWDLActionFrame.DataPathState(uint64_t a1, uint64_t a2, int *a3)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2)  = *(unsigned char *)(a2 + 2);
  *(_DWORD *)(a1 + 4)  = *(_DWORD *)(a2 + 4);
  *(_WORD *)(a1 + 8)  = *(_WORD *)(a2 + 8);
  *(_DWORD *)(a1 + 10)  = *(_DWORD *)(a2 + 10);
  *(_DWORD *)(a1 + 13)  = *(_DWORD *)(a2 + 13);
  *(_WORD *)(a1 + 24)  = *(_WORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20)  = *(_DWORD *)(a2 + 20);
  int v6 = *(_DWORD *)(a2 + 26);
  *(_DWORD *)(a1 + 29)  = *(_DWORD *)(a2 + 29);
  *(_DWORD *)(a1 + 26)  = v6;
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  *(void *)(a1 + 48)  = v7;
  *(_DWORD *)(a1 + 56)  = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 59)  = *(_DWORD *)(a2 + 59);
  *(unsigned char *)(a1 + 63)  = *(unsigned char *)(a2 + 63);
  *(_DWORD *)(a1 + 64)  = *(_DWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 68)  = *(unsigned char *)(a2 + 68);
  int v8 = *(_DWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 76)  = *(unsigned char *)(a2 + 76);
  *(_DWORD *)(a1 + 72)  = v8;
  long long v9 = *(_OWORD *)(a2 + 77);
  *(_WORD *)(a1 + 93)  = *(_WORD *)(a2 + 93);
  uint64_t v10 = a3[34];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (const void *)(a2 + v10);
  *(_OWORD *)(a1 + 77)  = v9;
  uint64_t v13 = type metadata accessor for DispatchTimeInterval();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48);
  swift_bridgeObjectRetain();
  if (v15(v12, 1, v13))
  {
    uint64_t v16 = sub_100010BCC(&qword_10047F2A8);
    memcpy(v11, v12, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  uint64_t v17 = a3[35];
  uint64_t v18 = a3[36];
  uint64_t v19 = a1 + v17;
  uint64_t v20 = a2 + v17;
  *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
  *(unsigned char *)(v19 + 4)  = *(unsigned char *)(v20 + 4);
  uint64_t v21 = a1 + v18;
  uint64_t v22 = a2 + v18;
  *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
  *(unsigned char *)(v21 + 4)  = *(unsigned char *)(v22 + 4);
  return a1;
}

uint64_t assignWithCopy for AWDLActionFrame.DataPathState(uint64_t a1, __int16 *a2, int *a3)
{
  __int16 v6 = *a2;
  *(unsigned char *)(a1 + 2)  = *((unsigned char *)a2 + 2);
  *(_WORD *)a1  = v6;
  int v7 = *((_DWORD *)a2 + 1);
  *(_WORD *)(a1 + 8)  = a2[4];
  *(_DWORD *)(a1 + 4)  = v7;
  int v8 = *(_DWORD *)(a2 + 5);
  *(_DWORD *)(a1 + 13)  = *(_DWORD *)((char *)a2 + 13);
  *(_DWORD *)(a1 + 10)  = v8;
  int v9 = *((_DWORD *)a2 + 5);
  *(_WORD *)(a1 + 24)  = a2[12];
  *(_DWORD *)(a1 + 20)  = v9;
  int v10 = *(_DWORD *)(a2 + 13);
  *(_DWORD *)(a1 + 29)  = *(_DWORD *)((char *)a2 + 29);
  *(_DWORD *)(a1 + 26)  = v10;
  *(void *)(a1 + 40)  = *((void *)a2 + 5);
  *(void *)(a1 + 48)  = *((void *)a2 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v11 = *((_DWORD *)a2 + 14);
  *(_DWORD *)(a1 + 59)  = *(_DWORD *)((char *)a2 + 59);
  *(_DWORD *)(a1 + 56)  = v11;
  *(unsigned char *)(a1 + 63)  = *((unsigned char *)a2 + 63);
  *(unsigned char *)(a1 + 64)  = *((unsigned char *)a2 + 64);
  *(unsigned char *)(a1 + 65)  = *((unsigned char *)a2 + 65);
  LOWORD(v11)  = a2[33];
  *(unsigned char *)(a1 + 68)  = *((unsigned char *)a2 + 68);
  *(_WORD *)(a1 + 66)  = v11;
  int v12 = *((_DWORD *)a2 + 18);
  *(unsigned char *)(a1 + 76)  = *((unsigned char *)a2 + 76);
  *(_DWORD *)(a1 + 72)  = v12;
  *(unsigned char *)(a1 + 77)  = *((unsigned char *)a2 + 77);
  *(unsigned char *)(a1 + 78)  = *((unsigned char *)a2 + 78);
  *(unsigned char *)(a1 + 79)  = *((unsigned char *)a2 + 79);
  *(unsigned char *)(a1 + 80)  = *((unsigned char *)a2 + 80);
  *(unsigned char *)(a1 + 81)  = *((unsigned char *)a2 + 81);
  *(unsigned char *)(a1 + 82)  = *((unsigned char *)a2 + 82);
  *(unsigned char *)(a1 + 83)  = *((unsigned char *)a2 + 83);
  *(unsigned char *)(a1 + 84)  = *((unsigned char *)a2 + 84);
  *(unsigned char *)(a1 + 85)  = *((unsigned char *)a2 + 85);
  *(unsigned char *)(a1 + 86)  = *((unsigned char *)a2 + 86);
  *(unsigned char *)(a1 + 87)  = *((unsigned char *)a2 + 87);
  *(unsigned char *)(a1 + 88)  = *((unsigned char *)a2 + 88);
  *(unsigned char *)(a1 + 89)  = *((unsigned char *)a2 + 89);
  *(unsigned char *)(a1 + 90)  = *((unsigned char *)a2 + 90);
  *(unsigned char *)(a1 + 91)  = *((unsigned char *)a2 + 91);
  *(unsigned char *)(a1 + 92)  = *((unsigned char *)a2 + 92);
  *(unsigned char *)(a1 + 93)  = *((unsigned char *)a2 + 93);
  *(unsigned char *)(a1 + 94)  = *((unsigned char *)a2 + 94);
  uint64_t v13 = a3[34];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for DispatchTimeInterval();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
  int v19 = v18(v14, 1, v16);
  int v20 = v18(v15, 1, v16);
  if (!v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, char *, uint64_t))(v17 + 24))(v14, v15, v16);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v17 + 8))(v14, v16);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    uint64_t v21 = sub_100010BCC(&qword_10047F2A8);
    memcpy(v14, v15, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
LABEL_7:
  uint64_t v22 = a3[35];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = (int *)((char *)a2 + v22);
  int v25 = *v24;
  *(unsigned char *)(v23 + 4)  = *((unsigned char *)v24 + 4);
  *(_DWORD *)uint64_t v23 = v25;
  uint64_t v26 = a3[36];
  uint64_t v27 = a1 + v26;
  int v28 = (int *)((char *)a2 + v26);
  int v29 = *v28;
  *(unsigned char *)(v27 + 4)  = *((unsigned char *)v28 + 4);
  *(_DWORD *)uint64_t v27 = v29;
  return a1;
}

uint64_t initializeWithTake for AWDLActionFrame.DataPathState(uint64_t a1, uint64_t a2, int *a3)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2)  = *(unsigned char *)(a2 + 2);
  *(_DWORD *)(a1 + 4)  = *(_DWORD *)(a2 + 4);
  *(_WORD *)(a1 + 8)  = *(_WORD *)(a2 + 8);
  *(_DWORD *)(a1 + 10)  = *(_DWORD *)(a2 + 10);
  *(_DWORD *)(a1 + 13)  = *(_DWORD *)(a2 + 13);
  *(_WORD *)(a1 + 24)  = *(_WORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20)  = *(_DWORD *)(a2 + 20);
  int v6 = *(_DWORD *)(a2 + 26);
  *(_DWORD *)(a1 + 29)  = *(_DWORD *)(a2 + 29);
  *(_DWORD *)(a1 + 26)  = v6;
  *(_OWORD *)(a1 + 40)  = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56)  = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 59)  = *(_DWORD *)(a2 + 59);
  *(unsigned char *)(a1 + 63)  = *(unsigned char *)(a2 + 63);
  *(_DWORD *)(a1 + 64)  = *(_DWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 68)  = *(unsigned char *)(a2 + 68);
  *(_DWORD *)(a1 + 72)  = *(_DWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 76)  = *(unsigned char *)(a2 + 76);
  long long v7 = *(_OWORD *)(a2 + 77);
  *(_WORD *)(a1 + 93)  = *(_WORD *)(a2 + 93);
  uint64_t v8 = a3[34];
  int v9 = (void *)(a1 + v8);
  int v10 = (const void *)(a2 + v8);
  *(_OWORD *)(a1 + 77)  = v7;
  uint64_t v11 = type metadata accessor for DispatchTimeInterval();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = sub_100010BCC(&qword_10047F2A8);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v14 = a3[35];
  uint64_t v15 = a3[36];
  uint64_t v16 = a1 + v14;
  uint64_t v17 = a2 + v14;
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  *(unsigned char *)(v16 + 4)  = *(unsigned char *)(v17 + 4);
  uint64_t v18 = a1 + v15;
  uint64_t v19 = a2 + v15;
  *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
  *(unsigned char *)(v18 + 4)  = *(unsigned char *)(v19 + 4);
  return a1;
}

uint64_t assignWithTake for AWDLActionFrame.DataPathState(uint64_t a1, uint64_t a2, int *a3)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2)  = *(unsigned char *)(a2 + 2);
  *(_DWORD *)(a1 + 4)  = *(_DWORD *)(a2 + 4);
  *(_WORD *)(a1 + 8)  = *(_WORD *)(a2 + 8);
  *(_DWORD *)(a1 + 10)  = *(_DWORD *)(a2 + 10);
  *(_DWORD *)(a1 + 13)  = *(_DWORD *)(a2 + 13);
  *(_WORD *)(a1 + 24)  = *(_WORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20)  = *(_DWORD *)(a2 + 20);
  int v6 = *(_DWORD *)(a2 + 26);
  *(_DWORD *)(a1 + 29)  = *(_DWORD *)(a2 + 29);
  *(_DWORD *)(a1 + 26)  = v6;
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  *(void *)(a1 + 48)  = v7;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56)  = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 59)  = *(_DWORD *)(a2 + 59);
  *(unsigned char *)(a1 + 63)  = *(unsigned char *)(a2 + 63);
  *(unsigned char *)(a1 + 64)  = *(unsigned char *)(a2 + 64);
  *(unsigned char *)(a1 + 65)  = *(unsigned char *)(a2 + 65);
  *(_WORD *)(a1 + 66)  = *(_WORD *)(a2 + 66);
  *(unsigned char *)(a1 + 68)  = *(unsigned char *)(a2 + 68);
  *(unsigned char *)(a1 + 76)  = *(unsigned char *)(a2 + 76);
  *(_DWORD *)(a1 + 72)  = *(_DWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 77)  = *(unsigned char *)(a2 + 77);
  *(unsigned char *)(a1 + 78)  = *(unsigned char *)(a2 + 78);
  *(unsigned char *)(a1 + 79)  = *(unsigned char *)(a2 + 79);
  *(unsigned char *)(a1 + 80)  = *(unsigned char *)(a2 + 80);
  *(unsigned char *)(a1 + 81)  = *(unsigned char *)(a2 + 81);
  *(unsigned char *)(a1 + 82)  = *(unsigned char *)(a2 + 82);
  *(unsigned char *)(a1 + 83)  = *(unsigned char *)(a2 + 83);
  *(unsigned char *)(a1 + 84)  = *(unsigned char *)(a2 + 84);
  *(unsigned char *)(a1 + 85)  = *(unsigned char *)(a2 + 85);
  *(unsigned char *)(a1 + 86)  = *(unsigned char *)(a2 + 86);
  *(unsigned char *)(a1 + 87)  = *(unsigned char *)(a2 + 87);
  *(unsigned char *)(a1 + 88)  = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 89)  = *(unsigned char *)(a2 + 89);
  *(unsigned char *)(a1 + 90)  = *(unsigned char *)(a2 + 90);
  *(unsigned char *)(a1 + 91)  = *(unsigned char *)(a2 + 91);
  *(unsigned char *)(a1 + 92)  = *(unsigned char *)(a2 + 92);
  *(unsigned char *)(a1 + 93)  = *(unsigned char *)(a2 + 93);
  *(unsigned char *)(a1 + 94)  = *(unsigned char *)(a2 + 94);
  uint64_t v8 = a3[34];
  int v9 = (void *)(a1 + v8);
  int v10 = (void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for DispatchTimeInterval();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v16 = sub_100010BCC(&qword_10047F2A8);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  uint64_t v17 = a3[35];
  uint64_t v18 = a3[36];
  uint64_t v19 = a1 + v17;
  uint64_t v20 = a2 + v17;
  *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
  *(unsigned char *)(v19 + 4)  = *(unsigned char *)(v20 + 4);
  uint64_t v21 = a1 + v18;
  uint64_t v22 = a2 + v18;
  *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
  *(unsigned char *)(v21 + 4)  = *(unsigned char *)(v22 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AWDLActionFrame.DataPathState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001075B4);
}

uint64_t sub_1001075B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 48);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4)  = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = sub_100010BCC(&qword_10047F2A8);
    int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 136);
    return v10(v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for AWDLActionFrame.DataPathState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100107688);
}

uint64_t sub_100107688(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 48)  = a2;
  }
  else
  {
    uint64_t v7 = sub_100010BCC(&qword_10047F2A8);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 136);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_100107734()
{
  sub_100107848();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_100107848()
{
  if (!qword_10047F728)
  {
    type metadata accessor for DispatchTimeInterval();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10047F728);
    }
  }
}

uint64_t getEnumTagSinglePayload for AWDLActionFrame.DataPathState.UnicastMasterIndicationOptions(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xD6) {
    goto LABEL_17;
  }
  if (a2 + 42 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 42) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 42;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 42;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 42;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x2B;
  int v8 = v6 - 43;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AWDLActionFrame.DataPathState.UnicastMasterIndicationOptions(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 42 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 42) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xD6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xD5)
  {
    unsigned int v6 = ((a2 - 214) >> 8) + 1;
    *uint64_t result = a2 + 42;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001079FCLL);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 42;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.DataPathState.UnicastMasterIndicationOptions()
{
  return &type metadata for AWDLActionFrame.DataPathState.UnicastMasterIndicationOptions;
}

uint64_t sub_100107A38(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AWDLActionFrame.Arpa(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AWDLActionFrame.Arpa(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  *(void *)(a1 + 16)  = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.Arpa()
{
  return &type metadata for AWDLActionFrame.Arpa;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.Arpa.Flags()
{
  return &type metadata for AWDLActionFrame.Arpa.Flags;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.SyncTreePath()
{
  return &type metadata for AWDLActionFrame.SyncTreePath;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.AWDLVersion()
{
  return &type metadata for AWDLActionFrame.AWDLVersion;
}

uint64_t storeEnumTagSinglePayload for AWDLActionFrame.Version(uint64_t result, int a2, int a3)
{
  if ((a3 + 0xFFFF) <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if ((a3 + 0xFFFF) < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    unsigned int v6 = ((a2 - 1) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 1;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2)  = v6;
        return result;
      case 2:
        *(_WORD *)(result + 2)  = v6;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)(result + 2)  = v6;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *(unsigned char *)(result + 2)  = 0;
      break;
    case 2:
      *(_WORD *)(result + 2)  = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100107BECLL);
    case 4:
      *(_DWORD *)(result + 2)  = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.Version()
{
  return &type metadata for AWDLActionFrame.Version;
}

uint64_t getEnumTagSinglePayload for NANInternetSharingStatistics.Requester.InternetSharingPolicyChannelState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AWDLActionFrame.Version.PlatformType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100107D80);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.Version.PlatformType()
{
  return &type metadata for AWDLActionFrame.Version.PlatformType;
}

uint64_t sub_100107DBC(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AWDLActionFrame.PeerMACAddressListBloomFilter(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1)  = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AWDLActionFrame.PeerMACAddressListBloomFilter(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.PeerMACAddressListBloomFilter()
{
  return &type metadata for AWDLActionFrame.PeerMACAddressListBloomFilter;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.NANSynchronization()
{
  return &type metadata for AWDLActionFrame.NANSynchronization;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.ElectionParameter()
{
  return &type metadata for AWDLActionFrame.ElectionParameter;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.MultiPeerBSSSteering()
{
  return &type metadata for AWDLActionFrame.MultiPeerBSSSteering;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.MultiPeerBSSSteering.SteeringMessageID()
{
  return &type metadata for AWDLActionFrame.MultiPeerBSSSteering.SteeringMessageID;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.Ranging()
{
  return &type metadata for AWDLActionFrame.Ranging;
}

uint64_t getEnumTagSinglePayload for AWDLActionFrame.RealtimeGroup(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 253);
  }
  if (*(unsigned __int8 *)(a1 + 12) <= 3u) {
    int v3 = 3;
  }
  else {
    int v3 = *(unsigned __int8 *)(a1 + 12);
  }
  int v4 = v3 - 4;
  if (*(unsigned __int8 *)(a1 + 12) < 3u) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AWDLActionFrame.RealtimeGroup(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 8)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(void *)uint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 40)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 40)  = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 12)  = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.RealtimeGroup()
{
  return &type metadata for AWDLActionFrame.RealtimeGroup;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.RealtimeGroup.Flags()
{
  return &type metadata for AWDLActionFrame.RealtimeGroup.Flags;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.RealtimeGroup.AdditionalFlags()
{
  return &type metadata for AWDLActionFrame.RealtimeGroup.AdditionalFlags;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.ExtendedChannelSequence()
{
  return &type metadata for AWDLActionFrame.ExtendedChannelSequence;
}

uint64_t initializeBufferWithCopyOfBuffer for AWDLActionFrame.PreferredChannels(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4)  = *(_WORD *)(a2 + 4);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AWDLActionFrame.PreferredChannels(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4)  = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a1 + 5)  = *(unsigned char *)(a2 + 5);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AWDLActionFrame.PreferredChannels(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4)  = *(_WORD *)(a2 + 4);
  *(void *)(a1 + 8)  = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.PreferredChannels()
{
  return &type metadata for AWDLActionFrame.PreferredChannels;
}

_DWORD *initializeBufferWithCopyOfBuffer for AWDLActionFrame.PreferredChannels.PreferredChannel(_DWORD *result, int *a2)
{
  int v2 = *a2;
  *(_DWORD *)((char *)result + 3)  = *(int *)((char *)a2 + 3);
  *uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for AWDLActionFrame.PreferredChannels.PreferredChannel(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 7)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 4);
  BOOL v4 = v3 >= 3;
  int v5 = v3 - 3;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AWDLActionFrame.PreferredChannels.PreferredChannel(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 6)  = 0;
    *(_WORD *)(result + 4)  = 0;
    *(_DWORD *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 7)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 7)  = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 4)  = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.PreferredChannels.PreferredChannel()
{
  return &type metadata for AWDLActionFrame.PreferredChannels.PreferredChannel;
}

uint64_t getEnumTagSinglePayload for AWDLActionFrame.ProMode(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 12)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 1);
  BOOL v4 = v3 >= 3;
  int v5 = v3 - 3;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AWDLActionFrame.ProMode(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_DWORD *)(result + 8)  = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 12)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 12)  = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 1)  = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.ProMode()
{
  return &type metadata for AWDLActionFrame.ProMode;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.ProMode.Command()
{
  return &type metadata for AWDLActionFrame.ProMode.Command;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.ProMode.Flags()
{
  return &type metadata for AWDLActionFrame.ProMode.Flags;
}

uint64_t getEnumTagSinglePayload for AWDLActionFrame.AirDrop(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 65281 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65281 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65281;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
LABEL_17:
  unsigned int v6 = *((unsigned __int8 *)a1 + 1);
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AWDLActionFrame.AirDrop(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2)  = v6;
        break;
      case 2:
        *(_WORD *)(result + 2)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100108378);
      case 4:
        *(_DWORD *)(result + 2)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)(result + 1)  = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.AirDrop()
{
  return &type metadata for AWDLActionFrame.AirDrop;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.AirDrop.State()
{
  return &type metadata for AWDLActionFrame.AirDrop.State;
}

char *initializeBufferWithCopyOfBuffer for AWDLActionFrame.AWDLAttribute(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *(_DWORD *)a1  = *(_DWORD *)a2;
        *((void *)a1 + 1)  = *((void *)a2 + 1);
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 1u:
        type metadata accessor for AWDLActionFrame.ServiceResponse(0);
        EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 2)
        {
          uint64_t v42 = *((void *)a2 + 1);
          *(void *)a1  = *(void *)a2;
          *((void *)a1 + 1)  = v42;
          uint64_t v43 = *((void *)a2 + 3);
          *((void *)a1 + 2)  = *((void *)a2 + 2);
          *((void *)a1 + 3)  = v43;
          a1[32]  = a2[32];
          a1[33]  = a2[33];
          uint64_t v44 = (int *)type metadata accessor for DNSRecords.SRV();
          uint64_t v45 = v44[5];
          unsigned __int8 v54 = &a2[v45];
          __dsta  = &a1[v45];
          uint64_t v46 = type metadata accessor for NWEndpoint.Port();
          uint64_t v53 = *(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v53(__dsta, v54, v46);
          uint64_t v47 = v44[6];
          long long v48 = &a1[v47];
          unint64_t v49 = &a2[v47];
          uint64_t v50 = *((void *)v49 + 1);
          *(void *)long long v48 = *(void *)v49;
          *((void *)v48 + 1)  = v50;
          *(_WORD *)&a1[v44[7]]  = *(_WORD *)&a2[v44[7]];
          *(_WORD *)&a1[v44[8]]  = *(_WORD *)&a2[v44[8]];
        }
        else
        {
          if (EnumCaseMultiPayload == 1)
          {
            uint64_t v10 = *((void *)a2 + 1);
            *(void *)a1  = *(void *)a2;
            *((void *)a1 + 1)  = v10;
            uint64_t v11 = *((void *)a2 + 3);
            *((void *)a1 + 2)  = *((void *)a2 + 2);
            *((void *)a1 + 3)  = v11;
            a1[32]  = a2[32];
            a1[33]  = a2[33];
            uint64_t v13 = *((void *)a2 + 5);
            unint64_t v12 = *((void *)a2 + 6);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            sub_100013D44(v13, v12);
            *((void *)a1 + 5)  = v13;
            *((void *)a1 + 6)  = v12;
LABEL_25:
            swift_storeEnumTagMultiPayload();
            swift_storeEnumTagMultiPayload();
            return a1;
          }
          uint64_t v51 = *((void *)a2 + 1);
          *(void *)a1  = *(void *)a2;
          *((void *)a1 + 1)  = v51;
          uint64_t v52 = *((void *)a2 + 3);
          *((void *)a1 + 2)  = *((void *)a2 + 2);
          *((void *)a1 + 3)  = v52;
          a1[32]  = a2[32];
          a1[33]  = a2[33];
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRetain();
        goto LABEL_25;
      case 2u:
        *a1  = *a2;
        *(_DWORD *)(a1 + 2)  = *(_DWORD *)(a2 + 2);
        *(void *)(a1 + 6)  = *(void *)(a2 + 6);
        *(_DWORD *)(a1 + 14)  = *(_DWORD *)(a2 + 14);
        *(_DWORD *)(a1 + 18)  = *(_DWORD *)(a2 + 18);
        *(void *)(a1 + 22)  = *(void *)(a2 + 22);
        *(_DWORD *)(a1 + 30)  = *(_DWORD *)(a2 + 30);
        *((void *)a1 + 5)  = *((void *)a2 + 5);
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 4u:
      case 8u:
        *(void *)a1  = *(void *)a2;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 5u:
        *a1  = *a2;
        *(_DWORD *)(a1 + 2)  = *(_DWORD *)(a2 + 2);
        *((_DWORD *)a1 + 2)  = *((_DWORD *)a2 + 2);
        uint64_t v15 = *((void *)a2 + 2);
        unint64_t v14 = *((void *)a2 + 3);
        sub_100013D44(v15, v14);
        *((void *)a1 + 2)  = v15;
        *((void *)a1 + 3)  = v14;
        swift_storeEnumTagMultiPayload();
        return a1;
      case 6u:
        *(_WORD *)a1  = *(_WORD *)a2;
        a1[2]  = a2[2];
        *((_DWORD *)a1 + 1)  = *((_DWORD *)a2 + 1);
        *((_WORD *)a1 + 4)  = *((_WORD *)a2 + 4);
        *(_DWORD *)(a1 + 10)  = *(_DWORD *)(a2 + 10);
        *(_DWORD *)(a1 + 13)  = *(_DWORD *)(a2 + 13);
        *((_WORD *)a1 + 12)  = *((_WORD *)a2 + 12);
        *((_DWORD *)a1 + 5)  = *((_DWORD *)a2 + 5);
        int v16 = *(_DWORD *)(a2 + 26);
        *(_DWORD *)(a1 + 29)  = *(_DWORD *)(a2 + 29);
        *(_DWORD *)(a1 + 26)  = v16;
        uint64_t v17 = *((void *)a2 + 6);
        *((void *)a1 + 5)  = *((void *)a2 + 5);
        *((void *)a1 + 6)  = v17;
        *((_DWORD *)a1 + 14)  = *((_DWORD *)a2 + 14);
        *(_DWORD *)(a1 + 59)  = *(_DWORD *)(a2 + 59);
        a1[63]  = a2[63];
        *((_DWORD *)a1 + 16)  = *((_DWORD *)a2 + 16);
        a1[68]  = a2[68];
        int v18 = *((_DWORD *)a2 + 18);
        a1[76]  = a2[76];
        *((_DWORD *)a1 + 18)  = v18;
        *(_OWORD *)(a1 + 77)  = *(_OWORD *)(a2 + 77);
        *(_WORD *)(a1 + 93)  = *(_WORD *)(a2 + 93);
        uint64_t v19 = (int *)type metadata accessor for AWDLActionFrame.DataPathState(0);
        uint64_t v20 = v19[34];
        __dst  = &a1[v20];
        uint64_t v21 = &a2[v20];
        uint64_t v22 = type metadata accessor for DispatchTimeInterval();
        uint64_t v23 = *(void *)(v22 - 8);
        uint64_t v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
        swift_bridgeObjectRetain();
        if (v24(v21, 1, v22))
        {
          uint64_t v25 = sub_100010BCC(&qword_10047F2A8);
          memcpy(__dst, v21, *(void *)(*(void *)(v25 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v23 + 16))(__dst, v21, v22);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(__dst, 0, 1, v22);
        }
        uint64_t v36 = v19[35];
        uint64_t v37 = &a1[v36];
        int v38 = &a2[v36];
        *(_DWORD *)uint64_t v37 = *(_DWORD *)v38;
        v37[4]  = v38[4];
        uint64_t v39 = v19[36];
        uint64x2_t v40 = &a1[v39];
        uint64_t v41 = &a2[v39];
        void v40[4] = v41[4];
        *(_DWORD *)uint64x2_t v40 = *(_DWORD *)v41;
        swift_storeEnumTagMultiPayload();
        return a1;
      case 7u:
        *a1  = *a2;
        uint64_t v26 = *((void *)a2 + 2);
        *((void *)a1 + 1)  = *((void *)a2 + 1);
        *((void *)a1 + 2)  = v26;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 0xAu:
        *(_WORD *)a1  = *(_WORD *)a2;
        *((void *)a1 + 1)  = *((void *)a2 + 1);
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 0xDu:
        uint64_t v27 = *(void *)a2;
        unint64_t v28 = *((void *)a2 + 1);
        unint64_t v29 = *((void *)a2 + 2);
        uint64_t v30 = *((void *)a2 + 3);
        uint64_t v31 = *((void *)a2 + 4);
        unint64_t v32 = *((void *)a2 + 5);
        char v33 = a2[48];
        sub_10006E998(v27, v28, v29, v30, v31, v32, v33);
        *(void *)a1  = v27;
        *((void *)a1 + 1)  = v28;
        *((void *)a1 + 2)  = v29;
        *((void *)a1 + 3)  = v30;
        *((void *)a1 + 4)  = v31;
        *((void *)a1 + 5)  = v32;
        a1[48]  = v33;
        swift_storeEnumTagMultiPayload();
        return a1;
      case 0xEu:
        *(_DWORD *)a1  = *(_DWORD *)a2;
        a1[4]  = a2[4];
        uint64_t v35 = *((void *)a2 + 1);
        unint64_t v34 = *((void *)a2 + 2);
        sub_100013D44(v35, v34);
        *((void *)a1 + 1)  = v35;
        *((void *)a1 + 2)  = v34;
        swift_storeEnumTagMultiPayload();
        return a1;
      case 0x12u:
        *(_DWORD *)a1  = *(_DWORD *)a2;
        *((_WORD *)a1 + 2)  = *((_WORD *)a2 + 2);
        *((void *)a1 + 1)  = *((void *)a2 + 1);
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        return a1;
    }
  }
  uint64_t v7 = *(void *)a2;
  *(void *)a1  = *(void *)a2;
  a1  = (char *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return a1;
}

uint64_t destroy for AWDLActionFrame.AWDLAttribute(uint64_t *a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 2:
    case 4:
    case 7:
    case 8:
    case 10:
    case 18:
      goto LABEL_17;
    case 1:
      type metadata accessor for AWDLActionFrame.ServiceResponse(0);
      uint64_t result = swift_getEnumCaseMultiPayload();
      if (result == 2)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v15 = (char *)a1 + *(int *)(type metadata accessor for DNSRecords.SRV() + 20);
        uint64_t v16 = type metadata accessor for NWEndpoint.Port();
        (*(void (**)(char *, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
LABEL_17:
        return swift_bridgeObjectRelease();
      }
      if (result != 1)
      {
        if (result) {
          return result;
        }
        swift_bridgeObjectRelease();
        goto LABEL_17;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = a1[5];
      unint64_t v4 = a1[6];
LABEL_21:
      return sub_10000C970(v3, v4);
    case 5:
      uint64_t v3 = a1[2];
      unint64_t v4 = a1[3];
      goto LABEL_21;
    case 6:
      swift_bridgeObjectRelease();
      unint64_t v12 = (char *)a1 + *(int *)(type metadata accessor for AWDLActionFrame.DataPathState(0) + 136);
      uint64_t v13 = type metadata accessor for DispatchTimeInterval();
      uint64_t v17 = *(void *)(v13 - 8);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v12, 1, v13);
      if (!result)
      {
        unint64_t v14 = *(uint64_t (**)(char *, uint64_t))(v17 + 8);
        return v14(v12, v13);
      }
      return result;
    case 13:
      uint64_t v5 = *a1;
      unint64_t v6 = a1[1];
      unint64_t v7 = a1[2];
      uint64_t v8 = a1[3];
      uint64_t v9 = a1[4];
      unint64_t v10 = a1[5];
      char v11 = *((unsigned char *)a1 + 48);
      return sub_10006E108(v5, v6, v7, v8, v9, v10, v11);
    case 14:
      uint64_t v3 = a1[1];
      unint64_t v4 = a1[2];
      goto LABEL_21;
    default:
      return result;
  }
}

char *initializeWithCopy for AWDLActionFrame.AWDLAttribute(char *a1, char *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      *(_DWORD *)a1  = *(_DWORD *)a2;
      *((void *)a1 + 1)  = *((void *)a2 + 1);
      swift_bridgeObjectRetain();
      goto LABEL_23;
    case 1u:
      type metadata accessor for AWDLActionFrame.ServiceResponse(0);
      EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        uint64_t v39 = *((void *)a2 + 1);
        *(void *)a1  = *(void *)a2;
        *((void *)a1 + 1)  = v39;
        uint64_t v40 = *((void *)a2 + 3);
        *((void *)a1 + 2)  = *((void *)a2 + 2);
        *((void *)a1 + 3)  = v40;
        a1[32]  = a2[32];
        a1[33]  = a2[33];
        uint64_t v41 = (int *)type metadata accessor for DNSRecords.SRV();
        uint64_t v42 = v41[5];
        uint64_t v52 = &a2[v42];
        __dsta  = &a1[v42];
        uint64_t v43 = type metadata accessor for NWEndpoint.Port();
        uint64_t v51 = *(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v51(__dsta, v52, v43);
        uint64_t v44 = v41[6];
        uint64_t v45 = &a1[v44];
        uint64_t v46 = &a2[v44];
        uint64_t v47 = *((void *)v46 + 1);
        *(void *)uint64_t v45 = *(void *)v46;
        *((void *)v45 + 1)  = v47;
        *(_WORD *)&a1[v41[7]]  = *(_WORD *)&a2[v41[7]];
        *(_WORD *)&a1[v41[8]]  = *(_WORD *)&a2[v41[8]];
      }
      else
      {
        if (EnumCaseMultiPayload == 1)
        {
          uint64_t v7 = *((void *)a2 + 1);
          *(void *)a1  = *(void *)a2;
          *((void *)a1 + 1)  = v7;
          uint64_t v8 = *((void *)a2 + 3);
          *((void *)a1 + 2)  = *((void *)a2 + 2);
          *((void *)a1 + 3)  = v8;
          a1[32]  = a2[32];
          a1[33]  = a2[33];
          uint64_t v10 = *((void *)a2 + 5);
          unint64_t v9 = *((void *)a2 + 6);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_100013D44(v10, v9);
          *((void *)a1 + 5)  = v10;
          *((void *)a1 + 6)  = v9;
          goto LABEL_22;
        }
        uint64_t v48 = *((void *)a2 + 1);
        *(void *)a1  = *(void *)a2;
        *((void *)a1 + 1)  = v48;
        uint64_t v49 = *((void *)a2 + 3);
        *((void *)a1 + 2)  = *((void *)a2 + 2);
        *((void *)a1 + 3)  = v49;
        a1[32]  = a2[32];
        a1[33]  = a2[33];
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRetain();
LABEL_22:
      swift_storeEnumTagMultiPayload();
LABEL_23:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 2u:
      *a1  = *a2;
      *(_DWORD *)(a1 + 2)  = *(_DWORD *)(a2 + 2);
      *(void *)(a1 + 6)  = *(void *)(a2 + 6);
      *(_DWORD *)(a1 + 14)  = *(_DWORD *)(a2 + 14);
      *(_DWORD *)(a1 + 18)  = *(_DWORD *)(a2 + 18);
      *(void *)(a1 + 22)  = *(void *)(a2 + 22);
      *(_DWORD *)(a1 + 30)  = *(_DWORD *)(a2 + 30);
      *((void *)a1 + 5)  = *((void *)a2 + 5);
      swift_bridgeObjectRetain();
      goto LABEL_23;
    case 4u:
    case 8u:
      *(void *)a1  = *(void *)a2;
      swift_bridgeObjectRetain();
      goto LABEL_23;
    case 5u:
      *a1  = *a2;
      *(_DWORD *)(a1 + 2)  = *(_DWORD *)(a2 + 2);
      *((_DWORD *)a1 + 2)  = *((_DWORD *)a2 + 2);
      uint64_t v12 = *((void *)a2 + 2);
      unint64_t v11 = *((void *)a2 + 3);
      sub_100013D44(v12, v11);
      *((void *)a1 + 2)  = v12;
      *((void *)a1 + 3)  = v11;
      goto LABEL_23;
    case 6u:
      *(_WORD *)a1  = *(_WORD *)a2;
      a1[2]  = a2[2];
      *((_DWORD *)a1 + 1)  = *((_DWORD *)a2 + 1);
      *((_WORD *)a1 + 4)  = *((_WORD *)a2 + 4);
      *(_DWORD *)(a1 + 10)  = *(_DWORD *)(a2 + 10);
      *(_DWORD *)(a1 + 13)  = *(_DWORD *)(a2 + 13);
      *((_WORD *)a1 + 12)  = *((_WORD *)a2 + 12);
      *((_DWORD *)a1 + 5)  = *((_DWORD *)a2 + 5);
      int v13 = *(_DWORD *)(a2 + 26);
      *(_DWORD *)(a1 + 29)  = *(_DWORD *)(a2 + 29);
      *(_DWORD *)(a1 + 26)  = v13;
      uint64_t v14 = *((void *)a2 + 6);
      *((void *)a1 + 5)  = *((void *)a2 + 5);
      *((void *)a1 + 6)  = v14;
      *((_DWORD *)a1 + 14)  = *((_DWORD *)a2 + 14);
      *(_DWORD *)(a1 + 59)  = *(_DWORD *)(a2 + 59);
      a1[63]  = a2[63];
      *((_DWORD *)a1 + 16)  = *((_DWORD *)a2 + 16);
      a1[68]  = a2[68];
      int v15 = *((_DWORD *)a2 + 18);
      a1[76]  = a2[76];
      *((_DWORD *)a1 + 18)  = v15;
      *(_OWORD *)(a1 + 77)  = *(_OWORD *)(a2 + 77);
      *(_WORD *)(a1 + 93)  = *(_WORD *)(a2 + 93);
      uint64_t v16 = (int *)type metadata accessor for AWDLActionFrame.DataPathState(0);
      uint64_t v17 = v16[34];
      __dst  = &a1[v17];
      int v18 = &a2[v17];
      uint64_t v19 = type metadata accessor for DispatchTimeInterval();
      uint64_t v20 = *(void *)(v19 - 8);
      uint64_t v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
      swift_bridgeObjectRetain();
      if (v21(v18, 1, v19))
      {
        uint64_t v22 = sub_100010BCC(&qword_10047F2A8);
        memcpy(__dst, v18, *(void *)(*(void *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 16))(__dst, v18, v19);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
      }
      uint64_t v33 = v16[35];
      unint64_t v34 = &a1[v33];
      uint64_t v35 = &a2[v33];
      *(_DWORD *)unint64_t v34 = *(_DWORD *)v35;
      v34[4]  = v35[4];
      uint64_t v36 = v16[36];
      uint64_t v37 = &a1[v36];
      int v38 = &a2[v36];
      v37[4]  = v38[4];
      *(_DWORD *)uint64_t v37 = *(_DWORD *)v38;
      goto LABEL_23;
    case 7u:
      *a1  = *a2;
      uint64_t v23 = *((void *)a2 + 2);
      *((void *)a1 + 1)  = *((void *)a2 + 1);
      *((void *)a1 + 2)  = v23;
      swift_bridgeObjectRetain();
      goto LABEL_23;
    case 0xAu:
      *(_WORD *)a1  = *(_WORD *)a2;
      *((void *)a1 + 1)  = *((void *)a2 + 1);
      swift_bridgeObjectRetain();
      goto LABEL_23;
    case 0xDu:
      uint64_t v24 = *(void *)a2;
      unint64_t v25 = *((void *)a2 + 1);
      unint64_t v26 = *((void *)a2 + 2);
      uint64_t v27 = *((void *)a2 + 3);
      uint64_t v28 = *((void *)a2 + 4);
      unint64_t v29 = *((void *)a2 + 5);
      char v30 = a2[48];
      sub_10006E998(v24, v25, v26, v27, v28, v29, v30);
      *(void *)a1  = v24;
      *((void *)a1 + 1)  = v25;
      *((void *)a1 + 2)  = v26;
      *((void *)a1 + 3)  = v27;
      *((void *)a1 + 4)  = v28;
      *((void *)a1 + 5)  = v29;
      a1[48]  = v30;
      goto LABEL_23;
    case 0xEu:
      *(_DWORD *)a1  = *(_DWORD *)a2;
      a1[4]  = a2[4];
      uint64_t v32 = *((void *)a2 + 1);
      unint64_t v31 = *((void *)a2 + 2);
      sub_100013D44(v32, v31);
      *((void *)a1 + 1)  = v32;
      *((void *)a1 + 2)  = v31;
      goto LABEL_23;
    case 0x12u:
      *(_DWORD *)a1  = *(_DWORD *)a2;
      *((_WORD *)a1 + 2)  = *((_WORD *)a2 + 2);
      *((void *)a1 + 1)  = *((void *)a2 + 1);
      swift_bridgeObjectRetain();
      goto LABEL_23;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      return a1;
  }
}

char *assignWithCopy for AWDLActionFrame.AWDLAttribute(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100103830((uint64_t)a1, type metadata accessor for AWDLActionFrame.AWDLAttribute);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *(_WORD *)a1  = *(_WORD *)a2;
        *((_WORD *)a1 + 1)  = *((_WORD *)a2 + 1);
        *((void *)a1 + 1)  = *((void *)a2 + 1);
        swift_bridgeObjectRetain();
        goto LABEL_24;
      case 1u:
        type metadata accessor for AWDLActionFrame.ServiceResponse(0);
        EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 2)
        {
          *(void *)a1  = *(void *)a2;
          *((void *)a1 + 1)  = *((void *)a2 + 1);
          *((void *)a1 + 2)  = *((void *)a2 + 2);
          *((void *)a1 + 3)  = *((void *)a2 + 3);
          a1[32]  = a2[32];
          a1[33]  = a2[33];
          uint64_t v45 = (int *)type metadata accessor for DNSRecords.SRV();
          uint64_t v46 = v45[5];
          uint64_t v53 = &a2[v46];
          unsigned __int8 v54 = &a1[v46];
          uint64_t v47 = type metadata accessor for NWEndpoint.Port();
          uint64_t v52 = *(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v52(v54, v53, v47);
          uint64_t v48 = v45[6];
          uint64_t v49 = &a1[v48];
          uint64_t v50 = &a2[v48];
          *(void *)uint64_t v49 = *(void *)v50;
          *((void *)v49 + 1)  = *((void *)v50 + 1);
          *(_WORD *)&a1[v45[7]]  = *(_WORD *)&a2[v45[7]];
          *(_WORD *)&a1[v45[8]]  = *(_WORD *)&a2[v45[8]];
        }
        else
        {
          if (EnumCaseMultiPayload == 1)
          {
            *(void *)a1  = *(void *)a2;
            *((void *)a1 + 1)  = *((void *)a2 + 1);
            *((void *)a1 + 2)  = *((void *)a2 + 2);
            *((void *)a1 + 3)  = *((void *)a2 + 3);
            a1[32]  = a2[32];
            a1[33]  = a2[33];
            uint64_t v8 = *((void *)a2 + 5);
            unint64_t v7 = *((void *)a2 + 6);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            sub_100013D44(v8, v7);
            *((void *)a1 + 5)  = v8;
            *((void *)a1 + 6)  = v7;
            goto LABEL_23;
          }
          *(void *)a1  = *(void *)a2;
          *((void *)a1 + 1)  = *((void *)a2 + 1);
          *((void *)a1 + 2)  = *((void *)a2 + 2);
          *((void *)a1 + 3)  = *((void *)a2 + 3);
          a1[32]  = a2[32];
          a1[33]  = a2[33];
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRetain();
LABEL_23:
        swift_storeEnumTagMultiPayload();
LABEL_24:
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        *a1  = *a2;
        *((_WORD *)a1 + 1)  = *((_WORD *)a2 + 1);
        a1[4]  = a2[4];
        a1[5]  = a2[5];
        *((_WORD *)a1 + 3)  = *((_WORD *)a2 + 3);
        *((_WORD *)a1 + 4)  = *((_WORD *)a2 + 4);
        *((_WORD *)a1 + 5)  = *((_WORD *)a2 + 5);
        *((_WORD *)a1 + 6)  = *((_WORD *)a2 + 6);
        *((_WORD *)a1 + 7)  = *((_WORD *)a2 + 7);
        *((_WORD *)a1 + 8)  = *((_WORD *)a2 + 8);
        a1[18]  = a2[18];
        a1[19]  = a2[19];
        a1[20]  = a2[20];
        a1[21]  = a2[21];
        int v9 = *(_DWORD *)(a2 + 22);
        *((_WORD *)a1 + 13)  = *((_WORD *)a2 + 13);
        *(_DWORD *)(a1 + 22)  = v9;
        a1[28]  = a2[28];
        a1[29]  = a2[29];
        *((_WORD *)a1 + 15)  = *((_WORD *)a2 + 15);
        *((_WORD *)a1 + 16)  = *((_WORD *)a2 + 16);
        *((void *)a1 + 5)  = *((void *)a2 + 5);
        swift_bridgeObjectRetain();
        goto LABEL_24;
      case 4u:
      case 8u:
        *(void *)a1  = *(void *)a2;
        swift_bridgeObjectRetain();
        goto LABEL_24;
      case 5u:
        *a1  = *a2;
        *((_WORD *)a1 + 1)  = *((_WORD *)a2 + 1);
        *((_WORD *)a1 + 2)  = *((_WORD *)a2 + 2);
        *((_DWORD *)a1 + 2)  = *((_DWORD *)a2 + 2);
        uint64_t v11 = *((void *)a2 + 2);
        unint64_t v10 = *((void *)a2 + 3);
        sub_100013D44(v11, v10);
        *((void *)a1 + 2)  = v11;
        *((void *)a1 + 3)  = v10;
        goto LABEL_24;
      case 6u:
        __int16 v12 = *(_WORD *)a2;
        a1[2]  = a2[2];
        *(_WORD *)a1  = v12;
        int v13 = *((_DWORD *)a2 + 1);
        *((_WORD *)a1 + 4)  = *((_WORD *)a2 + 4);
        *((_DWORD *)a1 + 1)  = v13;
        int v14 = *(_DWORD *)(a2 + 10);
        *(_DWORD *)(a1 + 13)  = *(_DWORD *)(a2 + 13);
        *(_DWORD *)(a1 + 10)  = v14;
        int v15 = *((_DWORD *)a2 + 5);
        *((_WORD *)a1 + 12)  = *((_WORD *)a2 + 12);
        *((_DWORD *)a1 + 5)  = v15;
        int v16 = *(_DWORD *)(a2 + 26);
        *(_DWORD *)(a1 + 29)  = *(_DWORD *)(a2 + 29);
        *(_DWORD *)(a1 + 26)  = v16;
        *((void *)a1 + 5)  = *((void *)a2 + 5);
        *((void *)a1 + 6)  = *((void *)a2 + 6);
        int v17 = *((_DWORD *)a2 + 14);
        *(_DWORD *)(a1 + 59)  = *(_DWORD *)(a2 + 59);
        *((_DWORD *)a1 + 14)  = v17;
        a1[63]  = a2[63];
        a1[64]  = a2[64];
        a1[65]  = a2[65];
        LOWORD(v17)  = *((_WORD *)a2 + 33);
        a1[68]  = a2[68];
        *((_WORD *)a1 + 33)  = v17;
        int v18 = *((_DWORD *)a2 + 18);
        a1[76]  = a2[76];
        *((_DWORD *)a1 + 18)  = v18;
        a1[77]  = a2[77];
        a1[78]  = a2[78];
        a1[79]  = a2[79];
        a1[80]  = a2[80];
        a1[81]  = a2[81];
        a1[82]  = a2[82];
        a1[83]  = a2[83];
        a1[84]  = a2[84];
        a1[85]  = a2[85];
        a1[86]  = a2[86];
        a1[87]  = a2[87];
        a1[88]  = a2[88];
        a1[89]  = a2[89];
        a1[90]  = a2[90];
        a1[91]  = a2[91];
        a1[92]  = a2[92];
        a1[93]  = a2[93];
        a1[94]  = a2[94];
        uint64_t v19 = (int *)type metadata accessor for AWDLActionFrame.DataPathState(0);
        uint64_t v20 = v19[34];
        uint64_t v21 = &a1[v20];
        uint64_t v22 = &a2[v20];
        uint64_t v23 = type metadata accessor for DispatchTimeInterval();
        uint64_t v24 = *(void *)(v23 - 8);
        unint64_t v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
        swift_bridgeObjectRetain();
        if (v25(v22, 1, v23))
        {
          uint64_t v26 = sub_100010BCC(&qword_10047F2A8);
          memcpy(v21, v22, *(void *)(*(void *)(v26 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
        }
        uint64_t v37 = v19[35];
        int v38 = &a1[v37];
        uint64_t v39 = &a2[v37];
        int v40 = *(_DWORD *)v39;
        v38[4]  = v39[4];
        *(_DWORD *)int v38 = v40;
        uint64_t v41 = v19[36];
        uint64_t v42 = &a1[v41];
        uint64_t v43 = &a2[v41];
        int v44 = *(_DWORD *)v43;
        v42[4]  = v43[4];
        *(_DWORD *)uint64_t v42 = v44;
        goto LABEL_24;
      case 7u:
        *a1  = *a2;
        *((void *)a1 + 1)  = *((void *)a2 + 1);
        *((void *)a1 + 2)  = *((void *)a2 + 2);
        swift_bridgeObjectRetain();
        goto LABEL_24;
      case 0xAu:
        *a1  = *a2;
        a1[1]  = a2[1];
        *((void *)a1 + 1)  = *((void *)a2 + 1);
        swift_bridgeObjectRetain();
        goto LABEL_24;
      case 0xDu:
        uint64_t v27 = *(void *)a2;
        unint64_t v28 = *((void *)a2 + 1);
        unint64_t v29 = *((void *)a2 + 2);
        uint64_t v30 = *((void *)a2 + 3);
        uint64_t v31 = *((void *)a2 + 4);
        unint64_t v32 = *((void *)a2 + 5);
        char v33 = a2[48];
        sub_10006E998(v27, v28, v29, v30, v31, v32, v33);
        *(void *)a1  = v27;
        *((void *)a1 + 1)  = v28;
        *((void *)a1 + 2)  = v29;
        *((void *)a1 + 3)  = v30;
        *((void *)a1 + 4)  = v31;
        *((void *)a1 + 5)  = v32;
        a1[48]  = v33;
        goto LABEL_24;
      case 0xEu:
        *(_WORD *)a1  = *(_WORD *)a2;
        *((_WORD *)a1 + 1)  = *((_WORD *)a2 + 1);
        a1[4]  = a2[4];
        uint64_t v35 = *((void *)a2 + 1);
        unint64_t v34 = *((void *)a2 + 2);
        sub_100013D44(v35, v34);
        *((void *)a1 + 1)  = v35;
        *((void *)a1 + 2)  = v34;
        goto LABEL_24;
      case 0x12u:
        int v36 = *(_DWORD *)a2;
        *((_WORD *)a1 + 2)  = *((_WORD *)a2 + 2);
        *(_DWORD *)a1  = v36;
        *((void *)a1 + 1)  = *((void *)a2 + 1);
        swift_bridgeObjectRetain();
        goto LABEL_24;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        return a1;
    }
  }
  return a1;
}

char *initializeWithTake for AWDLActionFrame.AWDLAttribute(char *a1, char *a2, uint64_t a3)
{
  EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 6)
  {
    *(_WORD *)a1  = *(_WORD *)a2;
    a1[2]  = a2[2];
    *((_DWORD *)a1 + 1)  = *((_DWORD *)a2 + 1);
    *((_WORD *)a1 + 4)  = *((_WORD *)a2 + 4);
    *(_DWORD *)(a1 + 10)  = *(_DWORD *)(a2 + 10);
    *(_DWORD *)(a1 + 13)  = *(_DWORD *)(a2 + 13);
    *((_WORD *)a1 + 12)  = *((_WORD *)a2 + 12);
    *((_DWORD *)a1 + 5)  = *((_DWORD *)a2 + 5);
    int v14 = *(_DWORD *)(a2 + 26);
    *(_DWORD *)(a1 + 29)  = *(_DWORD *)(a2 + 29);
    *(_DWORD *)(a1 + 26)  = v14;
    *(_OWORD *)(a1 + 40)  = *(_OWORD *)(a2 + 40);
    *((_DWORD *)a1 + 14)  = *((_DWORD *)a2 + 14);
    *(_DWORD *)(a1 + 59)  = *(_DWORD *)(a2 + 59);
    a1[63]  = a2[63];
    *((_DWORD *)a1 + 16)  = *((_DWORD *)a2 + 16);
    a1[68]  = a2[68];
    *((_DWORD *)a1 + 18)  = *((_DWORD *)a2 + 18);
    a1[76]  = a2[76];
    *(_OWORD *)(a1 + 77)  = *(_OWORD *)(a2 + 77);
    *(_WORD *)(a1 + 93)  = *(_WORD *)(a2 + 93);
    int v15 = (int *)type metadata accessor for AWDLActionFrame.DataPathState(0);
    uint64_t v16 = v15[34];
    int v17 = &a1[v16];
    int v18 = &a2[v16];
    uint64_t v19 = type metadata accessor for DispatchTimeInterval();
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      uint64_t v21 = sub_100010BCC(&qword_10047F2A8);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    uint64_t v22 = v15[35];
    uint64_t v23 = &a1[v22];
    uint64_t v24 = &a2[v22];
    *(_DWORD *)uint64_t v23 = *(_DWORD *)v24;
    v23[4]  = v24[4];
    uint64_t v25 = v15[36];
    uint64_t v26 = &a1[v25];
    uint64_t v27 = &a2[v25];
    v26[4]  = v27[4];
    *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
    goto LABEL_12;
  }
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v7 = type metadata accessor for AWDLActionFrame.ServiceResponse(0);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      long long v8 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1  = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1)  = v8;
      *((_WORD *)a1 + 16)  = *((_WORD *)a2 + 16);
      int v9 = (int *)type metadata accessor for DNSRecords.SRV();
      uint64_t v10 = v9[5];
      uint64_t v11 = &a1[v10];
      __int16 v12 = &a2[v10];
      uint64_t v13 = type metadata accessor for NWEndpoint.Port();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
      *(_OWORD *)&a1[v9[6]]  = *(_OWORD *)&a2[v9[6]];
      *(_WORD *)&a1[v9[7]]  = *(_WORD *)&a2[v9[7]];
      *(_WORD *)&a1[v9[8]]  = *(_WORD *)&a2[v9[8]];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
LABEL_12:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

char *assignWithTake for AWDLActionFrame.AWDLAttribute(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100103830((uint64_t)a1, type metadata accessor for AWDLActionFrame.AWDLAttribute);
    EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 6)
    {
      *(_WORD *)a1  = *(_WORD *)a2;
      a1[2]  = a2[2];
      *((_DWORD *)a1 + 1)  = *((_DWORD *)a2 + 1);
      *((_WORD *)a1 + 4)  = *((_WORD *)a2 + 4);
      *(_DWORD *)(a1 + 10)  = *(_DWORD *)(a2 + 10);
      *(_DWORD *)(a1 + 13)  = *(_DWORD *)(a2 + 13);
      *((_WORD *)a1 + 12)  = *((_WORD *)a2 + 12);
      *((_DWORD *)a1 + 5)  = *((_DWORD *)a2 + 5);
      int v14 = *(_DWORD *)(a2 + 26);
      *(_DWORD *)(a1 + 29)  = *(_DWORD *)(a2 + 29);
      *(_DWORD *)(a1 + 26)  = v14;
      *(_OWORD *)(a1 + 40)  = *(_OWORD *)(a2 + 40);
      *((_DWORD *)a1 + 14)  = *((_DWORD *)a2 + 14);
      *(_DWORD *)(a1 + 59)  = *(_DWORD *)(a2 + 59);
      a1[63]  = a2[63];
      *((_DWORD *)a1 + 16)  = *((_DWORD *)a2 + 16);
      a1[68]  = a2[68];
      *((_DWORD *)a1 + 18)  = *((_DWORD *)a2 + 18);
      a1[76]  = a2[76];
      *(_OWORD *)(a1 + 77)  = *(_OWORD *)(a2 + 77);
      *(_WORD *)(a1 + 93)  = *(_WORD *)(a2 + 93);
      int v15 = (int *)type metadata accessor for AWDLActionFrame.DataPathState(0);
      uint64_t v16 = v15[34];
      int v17 = &a1[v16];
      int v18 = &a2[v16];
      uint64_t v19 = type metadata accessor for DispatchTimeInterval();
      uint64_t v20 = *(void *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        uint64_t v21 = sub_100010BCC(&qword_10047F2A8);
        memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      uint64_t v22 = v15[35];
      uint64_t v23 = &a1[v22];
      uint64_t v24 = &a2[v22];
      *(_DWORD *)uint64_t v23 = *(_DWORD *)v24;
      v23[4]  = v24[4];
      uint64_t v25 = v15[36];
      uint64_t v26 = &a1[v25];
      uint64_t v27 = &a2[v25];
      v26[4]  = v27[4];
      *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
      goto LABEL_13;
    }
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = type metadata accessor for AWDLActionFrame.ServiceResponse(0);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        long long v8 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1  = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1)  = v8;
        *((_WORD *)a1 + 16)  = *((_WORD *)a2 + 16);
        int v9 = (int *)type metadata accessor for DNSRecords.SRV();
        uint64_t v10 = v9[5];
        uint64_t v11 = &a1[v10];
        __int16 v12 = &a2[v10];
        uint64_t v13 = type metadata accessor for NWEndpoint.Port();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
        *(_OWORD *)&a1[v9[6]]  = *(_OWORD *)&a2[v9[6]];
        *(_WORD *)&a1[v9[7]]  = *(_WORD *)&a2[v9[7]];
        *(_WORD *)&a1[v9[8]]  = *(_WORD *)&a2[v9[8]];
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
      }
LABEL_13:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t sub_10010A1B0()
{
  uint64_t result = type metadata accessor for AWDLActionFrame.ServiceResponse(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for AWDLActionFrame.DataPathState(319);
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AWDLActionFrame.AWDLAttribute.AttributeType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEA) {
    goto LABEL_17;
  }
  if (a2 + 22 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 22) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 22;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 22;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 22;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x17;
  int v8 = v6 - 23;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AWDLActionFrame.AWDLAttribute.AttributeType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 22 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 22) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE9)
  {
    unsigned int v6 = ((a2 - 234) >> 8) + 1;
    *uint64_t result = a2 + 22;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10010A484);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 22;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.AWDLAttribute.AttributeType()
{
  return &type metadata for AWDLActionFrame.AWDLAttribute.AttributeType;
}

void *initializeBufferWithCopyOfBuffer for AWDLActionFrame.Header(uint64_t a1, uint64_t *a2, int *a3)
{
  unsigned int v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1  = *(_DWORD *)a2;
    *(_WORD *)(a1 + 4)  = *((_WORD *)a2 + 2);
    *(_DWORD *)(a1 + 6)  = *(_DWORD *)((char *)a2 + 6);
    *(_WORD *)(a1 + 10)  = *((_WORD *)a2 + 5);
    *(_DWORD *)(a1 + 12)  = *((_DWORD *)a2 + 3);
    *(_WORD *)(a1 + 16)  = *((_WORD *)a2 + 8);
    *(_DWORD *)(a1 + 20)  = *((_DWORD *)a2 + 5);
    uint64_t v7 = a3[8];
    uint64_t v8 = a1 + v7;
    uint64_t v9 = (uint64_t)a2 + v7;
    uint64_t v10 = type metadata accessor for DispatchTimeInterval();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    v11((uint64_t)v4 + a3[9], (uint64_t)a2 + a3[9], v10);
    uint64_t v12 = a3[11];
    *(_DWORD *)((char *)v4 + a3[10])  = *(_DWORD *)((char *)a2 + a3[10]);
    *(_DWORD *)((char *)v4 + v12)  = *(_DWORD *)((char *)a2 + v12);
    uint64_t v13 = a3[13];
    *(void *)((char *)v4 + a3[12])  = *(uint64_t *)((char *)a2 + a3[12]);
    *(_DWORD *)((char *)v4 + v13)  = *(_DWORD *)((char *)a2 + v13);
    uint64_t v14 = a3[15];
    *(void *)((char *)v4 + a3[14])  = *(uint64_t *)((char *)a2 + a3[14]);
    *(_DWORD *)((char *)v4 + v14)  = *(_DWORD *)((char *)a2 + v14);
    *(void *)((char *)v4 + a3[16])  = *(uint64_t *)((char *)a2 + a3[16]);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for AWDLActionFrame.Header(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for DispatchTimeInterval();
  unsigned int v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(a1 + *(int *)(a2 + 36), v5);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AWDLActionFrame.Header(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4)  = *(_WORD *)(a2 + 4);
  *(_DWORD *)(a1 + 6)  = *(_DWORD *)(a2 + 6);
  *(_WORD *)(a1 + 10)  = *(_WORD *)(a2 + 10);
  *(_DWORD *)(a1 + 12)  = *(_DWORD *)(a2 + 12);
  *(_WORD *)(a1 + 16)  = *(_WORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20)  = *(_DWORD *)(a2 + 20);
  uint64_t v6 = a3[8];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for DispatchTimeInterval();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  v10(a1 + a3[9], a2 + a3[9], v9);
  uint64_t v11 = a3[11];
  *(_DWORD *)(a1 + a3[10])  = *(_DWORD *)(a2 + a3[10]);
  *(_DWORD *)(a1 + v11)  = *(_DWORD *)(a2 + v11);
  uint64_t v12 = a3[13];
  *(void *)(a1 + a3[12])  = *(void *)(a2 + a3[12]);
  *(_DWORD *)(a1 + v12)  = *(_DWORD *)(a2 + v12);
  uint64_t v13 = a3[15];
  *(void *)(a1 + a3[14])  = *(void *)(a2 + a3[14]);
  *(_DWORD *)(a1 + v13)  = *(_DWORD *)(a2 + v13);
  *(void *)(a1 + a3[16])  = *(void *)(a2 + a3[16]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AWDLActionFrame.Header(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1)  = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2)  = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3)  = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(a1 + 4)  = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a1 + 5)  = *(unsigned char *)(a2 + 5);
  *(unsigned char *)(a1 + 6)  = *(unsigned char *)(a2 + 6);
  *(unsigned char *)(a1 + 7)  = *(unsigned char *)(a2 + 7);
  *(unsigned char *)(a1 + 8)  = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9)  = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(a1 + 10)  = *(unsigned char *)(a2 + 10);
  *(unsigned char *)(a1 + 11)  = *(unsigned char *)(a2 + 11);
  *(_DWORD *)(a1 + 12)  = *(_DWORD *)(a2 + 12);
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17)  = *(unsigned char *)(a2 + 17);
  *(_DWORD *)(a1 + 20)  = *(_DWORD *)(a2 + 20);
  uint64_t v6 = a3[8];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for DispatchTimeInterval();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  v10(a1 + a3[9], a2 + a3[9], v9);
  *(_DWORD *)(a1 + a3[10])  = *(_DWORD *)(a2 + a3[10]);
  *(_DWORD *)(a1 + a3[11])  = *(_DWORD *)(a2 + a3[11]);
  *(void *)(a1 + a3[12])  = *(void *)(a2 + a3[12]);
  *(_DWORD *)(a1 + a3[13])  = *(_DWORD *)(a2 + a3[13]);
  *(void *)(a1 + a3[14])  = *(void *)(a2 + a3[14]);
  *(_DWORD *)(a1 + a3[15])  = *(_DWORD *)(a2 + a3[15]);
  *(void *)(a1 + a3[16])  = *(void *)(a2 + a3[16]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for AWDLActionFrame.Header(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1  = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4)  = *(_WORD *)(a2 + 4);
  *(_DWORD *)(a1 + 6)  = *(_DWORD *)(a2 + 6);
  *(_WORD *)(a1 + 10)  = *(_WORD *)(a2 + 10);
  *(_DWORD *)(a1 + 12)  = *(_DWORD *)(a2 + 12);
  *(_WORD *)(a1 + 16)  = *(_WORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20)  = *(_DWORD *)(a2 + 20);
  uint64_t v6 = a3[8];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for DispatchTimeInterval();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v10(a1 + a3[9], a2 + a3[9], v9);
  uint64_t v11 = a3[11];
  *(_DWORD *)(a1 + a3[10])  = *(_DWORD *)(a2 + a3[10]);
  *(_DWORD *)(a1 + v11)  = *(_DWORD *)(a2 + v11);
  uint64_t v12 = a3[13];
  *(void *)(a1 + a3[12])  = *(void *)(a2 + a3[12]);
  *(_DWORD *)(a1 + v12)  = *(_DWORD *)(a2 + v12);
  uint64_t v13 = a3[15];
  *(void *)(a1 + a3[14])  = *(void *)(a2 + a3[14]);
  *(_DWORD *)(a1 + v13)  = *(_DWORD *)(a2 + v13);
  *(void *)(a1 + a3[16])  = *(void *)(a2 + a3[16]);
  return a1;
}

uint64_t assignWithTake for AWDLActionFrame.Header(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1  = *(void *)a2;
  int v6 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8)  = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12)  = v6;
  *(_WORD *)(a1 + 16)  = *(_WORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20)  = *(_DWORD *)(a2 + 20);
  uint64_t v7 = a3[8];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for DispatchTimeInterval();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40);
  v11(v8, v9, v10);
  v11(a1 + a3[9], a2 + a3[9], v10);
  uint64_t v12 = a3[11];
  *(_DWORD *)(a1 + a3[10])  = *(_DWORD *)(a2 + a3[10]);
  *(_DWORD *)(a1 + v12)  = *(_DWORD *)(a2 + v12);
  uint64_t v13 = a3[13];
  *(void *)(a1 + a3[12])  = *(void *)(a2 + a3[12]);
  *(_DWORD *)(a1 + v13)  = *(_DWORD *)(a2 + v13);
  uint64_t v14 = a3[15];
  *(void *)(a1 + a3[14])  = *(void *)(a2 + a3[14]);
  *(_DWORD *)(a1 + v14)  = *(_DWORD *)(a2 + v14);
  *(void *)(a1 + a3[16])  = *(void *)(a2 + a3[16]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AWDLActionFrame.Header(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10010AC00);
}

uint64_t sub_10010AC00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTimeInterval();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 32);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 64));
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12)  = -1;
    }
    return (v12 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for AWDLActionFrame.Header(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10010ACD8);
}

uint64_t sub_10010ACD8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for DispatchTimeInterval();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 32);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 64))  = (a2 - 1);
  }
  return result;
}

uint64_t sub_10010AD98()
{
  uint64_t result = type metadata accessor for DispatchTimeInterval();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.Header.Flags()
{
  return &type metadata for AWDLActionFrame.Header.Flags;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.AirDrop.CodingKeys()
{
  return &type metadata for AWDLActionFrame.AirDrop.CodingKeys;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.ProMode.CodingKeys()
{
  return &type metadata for AWDLActionFrame.ProMode.CodingKeys;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.ExtendedChannelSequence.CodingKeys()
{
  return &type metadata for AWDLActionFrame.ExtendedChannelSequence.CodingKeys;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.Ranging.CodingKeys()
{
  return &type metadata for AWDLActionFrame.Ranging.CodingKeys;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.MultiPeerBSSSteering.CodingKeys()
{
  return &type metadata for AWDLActionFrame.MultiPeerBSSSteering.CodingKeys;
}

uint64_t getEnumTagSinglePayload for AWDLActionFrame.ElectionParameter.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AWDLActionFrame.ElectionParameter.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10010B030);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.ElectionParameter.CodingKeys()
{
  return &type metadata for AWDLActionFrame.ElectionParameter.CodingKeys;
}

uint64_t getEnumTagSinglePayload for NANDataHostAssistRequest.Reason(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AWDLActionFrame.NANSynchronization.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *uint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10010B1C4);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.NANSynchronization.CodingKeys()
{
  return &type metadata for AWDLActionFrame.NANSynchronization.CodingKeys;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.PeerMACAddressListBloomFilter.CodingKeys()
{
  return &type metadata for AWDLActionFrame.PeerMACAddressListBloomFilter.CodingKeys;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.Version.CodingKeys()
{
  return &type metadata for AWDLActionFrame.Version.CodingKeys;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.AWDLVersion.CodingKeys()
{
  return &type metadata for AWDLActionFrame.AWDLVersion.CodingKeys;
}

unsigned char *_s7CoreP2P15AWDLActionFrameV7OUITypeOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10010B2C8);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.SyncTreePath.CodingKeys()
{
  return &type metadata for AWDLActionFrame.SyncTreePath.CodingKeys;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.DataPathState.ExtensionFlags()
{
  return &type metadata for AWDLActionFrame.DataPathState.ExtensionFlags;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.DataPathState.Flags()
{
  return &type metadata for AWDLActionFrame.DataPathState.Flags;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.ServiceParameter.CodingKeys()
{
  return &type metadata for AWDLActionFrame.ServiceParameter.CodingKeys;
}

unsigned char *_s7CoreP2P15AWDLActionFrameV10OUISubtypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10010B3FCLL);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.ServiceParameter.SSTH.CodingKeys()
{
  return &type metadata for AWDLActionFrame.ServiceParameter.SSTH.CodingKeys;
}

unsigned char *_s7CoreP2P15AWDLActionFrameV7ProModeV7CommandOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10010B500);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.ServiceRequest.CodingKeys()
{
  return &type metadata for AWDLActionFrame.ServiceRequest.CodingKeys;
}

unint64_t sub_10010B53C()
{
  unint64_t result = qword_10047F940;
  if (!qword_10047F940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F940);
  }
  return result;
}

unint64_t sub_10010B594()
{
  unint64_t result = qword_10047F948;
  if (!qword_10047F948)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F948);
  }
  return result;
}

unint64_t sub_10010B5EC()
{
  unint64_t result = qword_10047F950;
  if (!qword_10047F950)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F950);
  }
  return result;
}

unint64_t sub_10010B644()
{
  unint64_t result = qword_10047F958;
  if (!qword_10047F958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F958);
  }
  return result;
}

unint64_t sub_10010B69C()
{
  unint64_t result = qword_10047F960;
  if (!qword_10047F960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F960);
  }
  return result;
}

unint64_t sub_10010B6F4()
{
  unint64_t result = qword_10047F968;
  if (!qword_10047F968)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F968);
  }
  return result;
}

unint64_t sub_10010B74C()
{
  unint64_t result = qword_10047F970;
  if (!qword_10047F970)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F970);
  }
  return result;
}

unint64_t sub_10010B7A4()
{
  unint64_t result = qword_10047F978;
  if (!qword_10047F978)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F978);
  }
  return result;
}

unint64_t sub_10010B7FC()
{
  unint64_t result = qword_10047F980;
  if (!qword_10047F980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F980);
  }
  return result;
}

unint64_t sub_10010B854()
{
  unint64_t result = qword_10047F988;
  if (!qword_10047F988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F988);
  }
  return result;
}

unint64_t sub_10010B8AC()
{
  unint64_t result = qword_10047F990;
  if (!qword_10047F990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F990);
  }
  return result;
}

unint64_t sub_10010B904()
{
  unint64_t result = qword_10047F998;
  if (!qword_10047F998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F998);
  }
  return result;
}

unint64_t sub_10010B95C()
{
  unint64_t result = qword_10047F9A0;
  if (!qword_10047F9A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F9A0);
  }
  return result;
}

unint64_t sub_10010B9B4()
{
  unint64_t result = qword_10047F9A8;
  if (!qword_10047F9A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F9A8);
  }
  return result;
}

unint64_t sub_10010BA0C()
{
  unint64_t result = qword_10047F9B0;
  if (!qword_10047F9B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F9B0);
  }
  return result;
}

unint64_t sub_10010BA64()
{
  unint64_t result = qword_10047F9B8;
  if (!qword_10047F9B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F9B8);
  }
  return result;
}

unint64_t sub_10010BABC()
{
  unint64_t result = qword_10047F9C0;
  if (!qword_10047F9C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F9C0);
  }
  return result;
}

unint64_t sub_10010BB14()
{
  unint64_t result = qword_10047F9C8;
  if (!qword_10047F9C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F9C8);
  }
  return result;
}

unint64_t sub_10010BB6C()
{
  unint64_t result = qword_10047F9D0;
  if (!qword_10047F9D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F9D0);
  }
  return result;
}

unint64_t sub_10010BBC4()
{
  unint64_t result = qword_10047F9D8;
  if (!qword_10047F9D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F9D8);
  }
  return result;
}

unint64_t sub_10010BC1C()
{
  unint64_t result = qword_10047F9E0;
  if (!qword_10047F9E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F9E0);
  }
  return result;
}

unint64_t sub_10010BC74()
{
  unint64_t result = qword_10047F9E8;
  if (!qword_10047F9E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F9E8);
  }
  return result;
}

unint64_t sub_10010BCCC()
{
  unint64_t result = qword_10047F9F0;
  if (!qword_10047F9F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F9F0);
  }
  return result;
}

unint64_t sub_10010BD24()
{
  unint64_t result = qword_10047F9F8;
  if (!qword_10047F9F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047F9F8);
  }
  return result;
}

unint64_t sub_10010BD7C()
{
  unint64_t result = qword_10047FA00;
  if (!qword_10047FA00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FA00);
  }
  return result;
}

unint64_t sub_10010BDD4()
{
  unint64_t result = qword_10047FA08;
  if (!qword_10047FA08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FA08);
  }
  return result;
}

unint64_t sub_10010BE2C()
{
  unint64_t result = qword_10047FA10;
  if (!qword_10047FA10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FA10);
  }
  return result;
}

unint64_t sub_10010BE84()
{
  unint64_t result = qword_10047FA18;
  if (!qword_10047FA18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FA18);
  }
  return result;
}

unint64_t sub_10010BEDC()
{
  unint64_t result = qword_10047FA20;
  if (!qword_10047FA20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FA20);
  }
  return result;
}

unint64_t sub_10010BF34()
{
  unint64_t result = qword_10047FA28;
  if (!qword_10047FA28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FA28);
  }
  return result;
}

unint64_t sub_10010BF8C()
{
  unint64_t result = qword_10047FA30;
  if (!qword_10047FA30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FA30);
  }
  return result;
}

unint64_t sub_10010BFE4()
{
  unint64_t result = qword_10047FA38;
  if (!qword_10047FA38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FA38);
  }
  return result;
}

unint64_t sub_10010C03C()
{
  unint64_t result = qword_10047FA40;
  if (!qword_10047FA40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FA40);
  }
  return result;
}

unint64_t sub_10010C094()
{
  unint64_t result = qword_10047FA48;
  if (!qword_10047FA48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FA48);
  }
  return result;
}

unint64_t sub_10010C0EC()
{
  unint64_t result = qword_10047FA50;
  if (!qword_10047FA50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FA50);
  }
  return result;
}

unint64_t sub_10010C144()
{
  unint64_t result = qword_10047FA58;
  if (!qword_10047FA58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FA58);
  }
  return result;
}

unint64_t sub_10010C19C()
{
  unint64_t result = qword_10047FA60;
  if (!qword_10047FA60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FA60);
  }
  return result;
}

unint64_t sub_10010C1F4()
{
  unint64_t result = qword_10047FA68;
  if (!qword_10047FA68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FA68);
  }
  return result;
}

unint64_t sub_10010C24C()
{
  unint64_t result = qword_10047FA70;
  if (!qword_10047FA70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FA70);
  }
  return result;
}

unint64_t sub_10010C2A4()
{
  unint64_t result = qword_10047FA78;
  if (!qword_10047FA78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FA78);
  }
  return result;
}

unint64_t sub_10010C2FC()
{
  unint64_t result = qword_10047FA80;
  if (!qword_10047FA80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FA80);
  }
  return result;
}

unint64_t sub_10010C354()
{
  unint64_t result = qword_10047FA88;
  if (!qword_10047FA88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FA88);
  }
  return result;
}

unint64_t sub_10010C3AC()
{
  unint64_t result = qword_10047FA90;
  if (!qword_10047FA90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FA90);
  }
  return result;
}

unint64_t sub_10010C404()
{
  unint64_t result = qword_10047FA98;
  if (!qword_10047FA98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FA98);
  }
  return result;
}

unint64_t sub_10010C45C()
{
  unint64_t result = qword_10047FAA0;
  if (!qword_10047FAA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FAA0);
  }
  return result;
}

unint64_t sub_10010C4B4()
{
  unint64_t result = qword_10047FAA8;
  if (!qword_10047FAA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FAA8);
  }
  return result;
}

unint64_t sub_10010C50C()
{
  unint64_t result = qword_10047FAB0;
  if (!qword_10047FAB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FAB0);
  }
  return result;
}

unint64_t sub_10010C564()
{
  unint64_t result = qword_10047FAB8;
  if (!qword_10047FAB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FAB8);
  }
  return result;
}

unint64_t sub_10010C5BC()
{
  unint64_t result = qword_10047FAC0;
  if (!qword_10047FAC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FAC0);
  }
  return result;
}

uint64_t sub_10010C610(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6574736575716572 && a2 == 0xEF74657366664F64;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6574736575716572 && a2 == 0xEF6874676E654C64 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 7955819 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_10010C798(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x74696D736E617274 && a2 == 0xEF6C656E6E616843;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E756F436E776F64 && a2 == 0xEB00000000726574 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001003DB960 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6D69546472617567 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001003DB980 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001003DB9A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7367616C66 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000021 && a2 == 0x80000001003DB9C0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001003DB9F0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001003DBA10 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001003DBA30 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x80000001003DBA50 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001003DBA70 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x80000001003DBA90 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x72657473616DLL && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x65636E6573657270 && a2 == 0xEC00000065646F4DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x6465767265736572 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0x65636E6575716573 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0xD00000000000001FLL && a2 == 0x80000001003DBAB0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001003DBAD0)
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 19;
    }
    else {
      return 20;
    }
  }
}

uint64_t sub_10010CF40(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7367616C66 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697463656C65 && a2 == 0xEA00000000004449 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65636E6174736964 && a2 == 0xEF706F546D6F7246 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6465767265736572 && a2 == 0xED0000646C656946 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x73736572646461 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x657473614D706F74 && a2 == 0xEF63697274654D72 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001003DB940)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

uint64_t sub_10010D294(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6574794268747373 && a2 == 0xEB0000000070614DLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x73736572706D6F63 && a2 == 0xEE00485453536465)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10010D3C4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7367616C66 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D69546C6C657764 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001003DB7D0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1752462195 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_10010D56C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726F6674616C705FLL && a2 == 0xED0000657079546DLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10010D684(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000014 && a2 == 0x80000001003DB7F0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E756F63 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D6F6F6C62 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_10010D7C8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746E756F43706F68 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F4E656372756F73 && a2 == 0xEA00000000006564 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x4972657473756C63 && a2 == 0xE900000000000044 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x80000001003DB810 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001003DB830 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001003DB850 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001003DB870 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001003DB890 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001003DB8B0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000022 && a2 == 0x80000001003DB8D0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 9;
    }
    else {
      return 10;
    }
  }
}

uint64_t sub_10010DBAC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65646F4E746F6F72 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F4E746E65726170 && a2 == 0xEA00000000006564 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001003DB900 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x746E756F43706F68 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7274654D746F6F72 && a2 == 0xEA00000000006369 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x7274654D666C6573 && a2 == 0xEA00000000006369 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6E6F697463656C65 && a2 == 0xEA00000000004449 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6E6F697463656C65 && a2 == 0xED00007367616C46 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001003DB920)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 8;
    }
    else {
      return 9;
    }
  }
}

uint64_t sub_10010DF7C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7367616C66 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x44496E656B6F74 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10010E068(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x646E616D6D6F63 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x737574617473 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7367616C66 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_10010E214(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6574617473 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unint64_t sub_10010E300()
{
  unint64_t result = qword_10047FAC8;
  if (!qword_10047FAC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FAC8);
  }
  return result;
}

unint64_t sub_10010E354()
{
  unint64_t result = qword_10047FAD0;
  if (!qword_10047FAD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FAD0);
  }
  return result;
}

unint64_t sub_10010E3A8()
{
  unint64_t result = qword_10047FAD8;
  if (!qword_10047FAD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FAD8);
  }
  return result;
}

unint64_t sub_10010E3FC()
{
  unint64_t result = qword_10047FAE0;
  if (!qword_10047FAE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FAE0);
  }
  return result;
}

unint64_t sub_10010E450()
{
  unint64_t result = qword_10047FAE8;
  if (!qword_10047FAE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FAE8);
  }
  return result;
}

unint64_t sub_10010E4A4()
{
  unint64_t result = qword_10047FAF0;
  if (!qword_10047FAF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FAF0);
  }
  return result;
}

unint64_t sub_10010E4F8()
{
  unint64_t result = qword_10047FAF8;
  if (!qword_10047FAF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FAF8);
  }
  return result;
}

unint64_t sub_10010E54C()
{
  unint64_t result = qword_10047FB00;
  if (!qword_10047FB00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FB00);
  }
  return result;
}

unint64_t sub_10010E5A0()
{
  unint64_t result = qword_10047FB10;
  if (!qword_10047FB10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FB10);
  }
  return result;
}

unint64_t sub_10010E5F4()
{
  unint64_t result = qword_10047FB18;
  if (!qword_10047FB18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FB18);
  }
  return result;
}

unint64_t sub_10010E648()
{
  unint64_t result = qword_10047FB20;
  if (!qword_10047FB20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FB20);
  }
  return result;
}

unint64_t sub_10010E69C()
{
  unint64_t result = qword_10047FB40;
  if (!qword_10047FB40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FB40);
  }
  return result;
}

unint64_t sub_10010E6F0()
{
  unint64_t result = qword_10047FB50;
  if (!qword_10047FB50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FB50);
  }
  return result;
}

unint64_t sub_10010E744()
{
  unint64_t result = qword_10047FB58;
  if (!qword_10047FB58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FB58);
  }
  return result;
}

unint64_t sub_10010E798()
{
  unint64_t result = qword_10047FB60;
  if (!qword_10047FB60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FB60);
  }
  return result;
}

unint64_t sub_10010E7EC()
{
  unint64_t result = qword_10047FB68;
  if (!qword_10047FB68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FB68);
  }
  return result;
}

unint64_t sub_10010E840()
{
  unint64_t result = qword_10047FB88;
  if (!qword_10047FB88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FB88);
  }
  return result;
}

unint64_t sub_10010E894()
{
  unint64_t result = qword_10047FB98;
  if (!qword_10047FB98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FB98);
  }
  return result;
}

unint64_t sub_10010E8E8()
{
  unint64_t result = qword_10047FBA8;
  if (!qword_10047FBA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FBA8);
  }
  return result;
}

unint64_t sub_10010E93C()
{
  unint64_t result = qword_10047FBB0;
  if (!qword_10047FBB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FBB0);
  }
  return result;
}

uint64_t sub_10010E990(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100014434(&qword_10047E7D0);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10010E9F4(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100014434(&qword_10047F2E8);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10010EA64()
{
  unint64_t result = qword_10047FBE0;
  if (!qword_10047FBE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FBE0);
  }
  return result;
}

unint64_t sub_10010EAB8()
{
  unint64_t result = qword_10047FBE8;
  if (!qword_10047FBE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FBE8);
  }
  return result;
}

unint64_t sub_10010EB0C()
{
  unint64_t result = qword_10047FBF0;
  if (!qword_10047FBF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FBF0);
  }
  return result;
}

unint64_t sub_10010EB60()
{
  unint64_t result = qword_10047FC00;
  if (!qword_10047FC00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FC00);
  }
  return result;
}

unint64_t sub_10010EBB4()
{
  unint64_t result = qword_10047FC10;
  if (!qword_10047FC10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FC10);
  }
  return result;
}

unint64_t sub_10010EC08()
{
  unint64_t result = qword_10047FC18;
  if (!qword_10047FC18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FC18);
  }
  return result;
}

unint64_t sub_10010EC5C()
{
  unint64_t result = qword_10047FC20;
  if (!qword_10047FC20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FC20);
  }
  return result;
}

unint64_t sub_10010ECB0()
{
  unint64_t result = qword_10047FC28;
  if (!qword_10047FC28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FC28);
  }
  return result;
}

unint64_t sub_10010ED04()
{
  unint64_t result = qword_10047FC30;
  if (!qword_10047FC30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FC30);
  }
  return result;
}

unint64_t sub_10010ED58()
{
  unint64_t result = qword_10047FC38;
  if (!qword_10047FC38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FC38);
  }
  return result;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.AWDLChannelSequenceParameter.NChannelOperatingClass()
{
  return &type metadata for AWDLActionFrame.AWDLChannelSequenceParameter.NChannelOperatingClass;
}

unsigned char *_s7CoreP2P15AWDLActionFrameV7ProModeV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10010EE88);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.AWDLChannelSequenceParameter.Encoding()
{
  return &type metadata for AWDLActionFrame.AWDLChannelSequenceParameter.Encoding;
}

uint64_t getEnumTagSinglePayload for AWDLActionFrame.SynchronizationParameter.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xED) {
    goto LABEL_17;
  }
  if (a2 + 19 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 19) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 19;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 19;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 19;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x14;
  int v8 = v6 - 20;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AWDLActionFrame.SynchronizationParameter.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 19 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 19) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xED) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEC)
  {
    unsigned int v6 = ((a2 - 237) >> 8) + 1;
    *unint64_t result = a2 + 19;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10010F01CLL);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 19;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.SynchronizationParameter.CodingKeys()
{
  return &type metadata for AWDLActionFrame.SynchronizationParameter.CodingKeys;
}

uint64_t getEnumTagSinglePayload for IEEE80211Frame.Management.ActionFrame.Category(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s7CoreP2P15AWDLActionFrameV20MultiPeerBSSSteeringV17SteeringMessageIDOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10010F1B0);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AWDLActionFrame.DeprecatedElectionParameter.CodingKeys()
{
  return &type metadata for AWDLActionFrame.DeprecatedElectionParameter.CodingKeys;
}

unint64_t sub_10010F1EC()
{
  unint64_t result = qword_10047FC50;
  if (!qword_10047FC50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FC50);
  }
  return result;
}

unint64_t sub_10010F244()
{
  unint64_t result = qword_10047FC58;
  if (!qword_10047FC58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FC58);
  }
  return result;
}

unint64_t sub_10010F29C()
{
  unint64_t result = qword_10047FC60;
  if (!qword_10047FC60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FC60);
  }
  return result;
}

unint64_t sub_10010F2F4()
{
  unint64_t result = qword_10047FC68;
  if (!qword_10047FC68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FC68);
  }
  return result;
}

unint64_t sub_10010F34C()
{
  unint64_t result = qword_10047FC70;
  if (!qword_10047FC70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FC70);
  }
  return result;
}

unint64_t sub_10010F3A4()
{
  unint64_t result = qword_10047FC78;
  if (!qword_10047FC78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FC78);
  }
  return result;
}

unint64_t sub_10010F3FC()
{
  unint64_t result = qword_10047FC80;
  if (!qword_10047FC80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FC80);
  }
  return result;
}

unint64_t sub_10010F454()
{
  unint64_t result = qword_10047FC88;
  if (!qword_10047FC88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FC88);
  }
  return result;
}

unint64_t sub_10010F4AC()
{
  unint64_t result = qword_10047FC90;
  if (!qword_10047FC90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FC90);
  }
  return result;
}

unint64_t sub_10010F504()
{
  unint64_t result = qword_10047FC98;
  if (!qword_10047FC98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FC98);
  }
  return result;
}

unint64_t sub_10010F55C()
{
  unint64_t result = qword_10047FCA0;
  if (!qword_10047FCA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FCA0);
  }
  return result;
}

unint64_t sub_10010F5B0()
{
  unint64_t result = qword_10047FCA8;
  if (!qword_10047FCA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FCA8);
  }
  return result;
}

uint64_t NANAwakeDWInterval.interval.getter(char a1)
{
  return qword_1003BDA38[a1];
}

CoreP2P::NANAwakeDWInterval_optional __swiftcall NANAwakeDWInterval.init(numberString:)(Swift::String numberString)
{
  object  = numberString._object;
  countAndFlagsBits  = numberString._countAndFlagsBits;
  if (numberString._countAndFlagsBits == 48 && numberString._object == (void *)0xE100000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (countAndFlagsBits == 49 && object == (void *)0xE100000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return (CoreP2P::NANAwakeDWInterval_optional)1;
  }
  else if (countAndFlagsBits == 52 && object == (void *)0xE100000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return (CoreP2P::NANAwakeDWInterval_optional)2;
  }
  else if (countAndFlagsBits == 56 && object == (void *)0xE100000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return (CoreP2P::NANAwakeDWInterval_optional)3;
  }
  else if (countAndFlagsBits == 13873 && object == (void *)0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return (CoreP2P::NANAwakeDWInterval_optional)4;
  }
  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v4) {
      return (CoreP2P::NANAwakeDWInterval_optional)4;
    }
    else {
      return (CoreP2P::NANAwakeDWInterval_optional)5;
    }
  }
}

void *NANAwakeDWInterval.defaultValue.unsafeMutableAddressor()
{
  return &static NANAwakeDWInterval.defaultValue;
}

uint64_t NANAwakeDWInterval.rawValue.getter(char a1)
{
  uint64_t result = 1869768058;
  switch(a1)
  {
    case 1:
      uint64_t result = 6647407;
      break;
    case 2:
      uint64_t result = 1920298854;
      break;
    case 3:
      uint64_t result = 0x7468676965;
      break;
    case 4:
      uint64_t result = 0x6E656574786973;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10010F8C0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100041D58(*a1, *a2);
}

unint64_t sub_10010F8CC@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = _s7CoreP2P18NANAwakeDWIntervalO8rawValueACSgSS_tcfC_0(*a1);
  *a2  = result;
  return result;
}

void sub_10010F8FC(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE400000000000000;
  uint64_t v3 = 1869768058;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE300000000000000;
      uint64_t v3 = 6647407;
      goto LABEL_3;
    case 2:
      *a1  = 1920298854;
      a1[1]  = 0xE400000000000000;
      break;
    case 3:
      *a1  = 0x7468676965;
      a1[1]  = 0xE500000000000000;
      break;
    case 4:
      *a1  = 0x6E656574786973;
      a1[1]  = 0xE700000000000000;
      break;
    default:
LABEL_3:
      *a1  = v3;
      a1[1]  = v2;
      break;
  }
}

Swift::Int sub_10010F998()
{
  return Hasher._finalize()();
}

uint64_t sub_10010FA70()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10010FB30()
{
  return Hasher._finalize()();
}

uint64_t sub_10010FC04()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10010FC64()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t NANAwakeDWInterval.description.getter(char a1)
{
  uint64_t result = 1869768058;
  switch(a1)
  {
    case 1:
      uint64_t result = 6647407;
      break;
    case 2:
      uint64_t result = 1920298854;
      break;
    case 3:
      uint64_t result = 0x7468676965;
      break;
    case 4:
      uint64_t result = 0x6E656574786973;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t NANAwakeDWInterval.customMirror.getter(char a1)
{
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100010BCC((uint64_t *)&unk_100480650);
  __chkstk_darwin();
  BOOL v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12[15]  = a1;
  sub_100010BCC(qword_10047DD00);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16)  = xmmword_1003B2450;
  *(void *)(v8 + 32)  = 0x6C61767265746E69;
  *(void *)(v8 + 40)  = 0xE800000000000000;
  uint64_t v9 = qword_1003BDA38[a1];
  *(void *)(v8 + 72)  = &type metadata for NANTimeUnit;
  *(void *)(v8 + 48)  = v9;
  uint64_t v10 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v7, 1, 1, v10);
  (*(void (**)(unsigned char *, void, uint64_t))(v3 + 104))(v5, enum case for Mirror.AncestorRepresentation.generated(_:), v2);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t sub_10010FF30()
{
  uint64_t result = 1869768058;
  switch(*v0)
  {
    case 1:
      uint64_t result = 6647407;
      break;
    case 2:
      uint64_t result = 1920298854;
      break;
    case 3:
      uint64_t result = 0x7468676965;
      break;
    case 4:
      uint64_t result = 0x6E656574786973;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10010FFBC()
{
  return NANAwakeDWInterval.customMirror.getter(*v0);
}

uint64_t NANAwakeDWPeriods.hash(into:)()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t static NANAwakeDWPeriods.__derived_struct_equals(_:_:)(__int16 a1, __int16 a2)
{
  unsigned __int8 v2 = HIBYTE(a1);
  uint64_t v3 = 1869768058;
  unint64_t v4 = 0xE400000000000000;
  uint64_t v5 = a1;
  unsigned __int8 v6 = HIBYTE(a2);
  uint64_t v7 = 1869768058;
  switch(v5)
  {
    case 1:
      unint64_t v4 = 0xE300000000000000;
      uint64_t v7 = 6647407;
      break;
    case 2:
      uint64_t v7 = 1920298854;
      break;
    case 3:
      unint64_t v4 = 0xE500000000000000;
      uint64_t v7 = 0x7468676965;
      break;
    case 4:
      unint64_t v4 = 0xE700000000000000;
      uint64_t v7 = 0x6E656574786973;
      break;
    default:
      break;
  }
  unint64_t v8 = 0xE400000000000000;
  switch((char)a2)
  {
    case 1:
      unint64_t v8 = 0xE300000000000000;
      if (v7 == 6647407) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      if (v7 != 1920298854) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      unint64_t v8 = 0xE500000000000000;
      uint64_t v3 = 0x7468676965;
      goto LABEL_12;
    case 4:
      unint64_t v8 = 0xE700000000000000;
      if (v7 != 0x6E656574786973) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v7 != v3) {
        goto LABEL_16;
      }
LABEL_13:
      if (v4 == v8)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
LABEL_16:
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v9 & 1) == 0) {
          return 0;
        }
      }
      return sub_100041D58(v2, v6);
  }
}

Swift::Int NANAwakeDWPeriods.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_100110354()
{
  return Hasher._finalize()();
}

uint64_t sub_10011039C()
{
  return NANAwakeDWPeriods.hash(into:)();
}

Swift::Int sub_1001103A4()
{
  return Hasher._finalize()();
}

uint64_t sub_1001103E8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  if ((sub_100041D58(*a1, *a2) & 1) == 0) {
    return 0;
  }

  return sub_100041D58(v2, v3);
}

unint64_t _s7CoreP2P18NANAwakeDWIntervalO8rawValueACSgSS_tcfC_0(Swift::String string)
{
  object  = string._object;
  v2._countAndFlagsBits  = string._countAndFlagsBits;
  v2._object  = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10044F4D8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

uint64_t _s7CoreP2P18NANAwakeDWIntervalO8intervalACSgAA11NANTimeUnitV_tcfC_0()
{
  return 0;
}

unint64_t sub_100110530()
{
  unint64_t result = qword_10047FCB0;
  if (!qword_10047FCB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FCB0);
  }
  return result;
}

unint64_t sub_100110588()
{
  unint64_t result = qword_10047FCB8;
  if (!qword_10047FCB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FCB8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for NANAwakeDWInterval(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001106A8);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANAwakeDWInterval()
{
  return &type metadata for NANAwakeDWInterval;
}

uint64_t getEnumTagSinglePayload for NANAwakeDWPeriods(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 65284 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65284 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65284;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65284;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65284;
    }
  }
LABEL_17:
  unsigned int v6 = *(unsigned __int8 *)a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAwakeDWPeriods(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65284 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65284 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 252;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2)  = v6;
        break;
      case 2:
        *(_WORD *)(result + 2)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100110840);
      case 4:
        *(_DWORD *)(result + 2)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANAwakeDWPeriods()
{
  return &type metadata for NANAwakeDWPeriods;
}

unint64_t sub_100110878()
{
  unint64_t result = qword_10047FCC0;
  if (!qword_10047FCC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FCC0);
  }
  return result;
}

uint64_t sub_1001108D0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a1[5];
  swift_unownedRetain();
  uint64_t v9 = a1[2];
  uint64_t v8 = a1[3];
  swift_unownedRetainStrong();
  swift_bridgeObjectRetain_n();
  AppleDevice.startMonitoringEvents(on:eventHandler:)(v9, v8, a2, a3);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (v3)
  {
    swift_unownedRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t _s7CoreP2P6DevicePAAE12customMirrors0E0Vvg_0(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  unsigned int v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100010BCC((uint64_t *)&unk_100480650);
  __chkstk_darwin();
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v1, a1);
  v13[1]  = _swiftEmptyArrayStorage;
  uint64_t v11 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v8, 1, 1, v11);
  sub_100010BCC(&qword_10047DC10);
  sub_100074578();
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for Mirror.AncestorRepresentation.generated(_:), v3);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t sub_100110BD8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for Mirror.AncestorRepresentation.generated(_:);
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

uint64_t sub_100110C4C(uint64_t a1, uint64_t a2)
{
  return sub_100110C94(a1, a2, &OBJC_IVAR____TtC7CoreP2P18AppleIO80211Driver_logger, (uint64_t)&unk_10045B660, (uint64_t)sub_1000134BC);
}

uint64_t sub_100110C94(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v25 = a5;
  v24[0]  = a1;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin();
  uint64_t v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  if (*((void *)v5 + 8))
  {
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v12 = xmmword_1003BDA60;
    *(unsigned char *)(v12 + 16)  = 1;
    return swift_willThrow();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))((char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), &v5[*a3], v8);
    unint64_t v14 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    unint64_t v15 = (v10 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v16 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v16 + v14, v11, v8);
    int v17 = (void *)(v16 + v15);
    *int v17 = v24[0];
    v17[1]  = a2;
    swift_retain();
    swift_retain();
    uint64_t v18 = v24[1];
    uint64_t result = sub_1001108D0(v5, v25, v16);
    if (!v18)
    {
      uint64_t v21 = *((void *)v5 + 6);
      uint64_t v22 = *((void *)v5 + 7);
      uint64_t v23 = *((void *)v5 + 8);
      *((void *)v5 + 6)  = result;
      *((void *)v5 + 7)  = v19;
      *((void *)v5 + 8)  = v20;
      return sub_1000C9898(v21, v22, v23);
    }
  }
  return result;
}

uint64_t DeviceDriver.startMonitoringEvents(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v38 = a2;
  uint64_t v37 = a1;
  uint64_t v40 = type metadata accessor for Logger();
  uint64_t v43 = *(void *)(v40 - 8);
  uint64_t v7 = *(void *)(v43 + 64);
  __chkstk_darwin();
  uint64_t v35 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v42 = (char *)&v33 - v8;
  uint64_t v34 = *(void *)(a3 - 8);
  __chkstk_darwin();
  uint64_t v41 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  int v36 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v15 = (char *)&v33 - v14;
  uint64_t v16 = v4;
  (*(void (**)(uint64_t, uint64_t))(a4 + 64))(a3, a4);
  uint64_t v33 = *(void *)(AssociatedTypeWitness - 8);
  int v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48))(v15, 1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  if (v17 == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v41, v16, a3);
    uint64_t v18 = *(void (**)(uint64_t))(*(void *)(a4 + 8) + 8);
    uint64_t v19 = v42;
    uint64_t v34 = v16;
    v18(a3);
    uint64_t v20 = v43;
    uint64_t v21 = v35;
    uint64_t v22 = v40;
    (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v35, v19, v40);
    unint64_t v23 = (*(unsigned __int8 *)(v20 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
    uint64_t v24 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v20 + 32))(v24 + v23, v21, v22);
    uint64_t v25 = (void *)(v24 + ((v7 + v23 + 7) & 0xFFFFFFFFFFFFFFF8));
    uint64_t v26 = v38;
    *uint64_t v25 = v37;
    v25[1]  = v26;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    unint64_t v28 = *(void (**)(char *, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 32);
    swift_retain();
    unint64_t v29 = v36;
    uint64_t v30 = v39;
    v28(v41, sub_1000134BC, v24, AssociatedTypeWitness, AssociatedConformanceWitness);
    if (v30)
    {
      return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v42, v22);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v43 + 8))(v42, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v29, 0, 1, AssociatedTypeWitness);
      return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 72))(v29, a3, a4);
    }
  }
  else
  {
    sub_10000F000();
    swift_allocError();
    *(_OWORD *)uint64_t v32 = xmmword_1003BDA60;
    *(unsigned char *)(v32 + 16)  = 1;
    return swift_willThrow();
  }
}

uint64_t DeviceDriver.init(device:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v27 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v25 - v9;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v26 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v25 - v12;
  uint64_t v14 = sub_1002623B8();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v16 = (*(uint64_t (**)(void, void, unint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness
                                                                                               + 72))(0, 0, 0xE000000000000000, v14 & 0xFFFFFFFFFFFCLL | 2, AssociatedTypeWitness, AssociatedConformanceWitness);
  if (v17)
  {
    uint64_t v18 = v16;
    uint64_t v19 = v17;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, AssociatedTypeWitness);
    (*(void (**)(char *, void, uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 48))(v10, 0, v18, v19, a2, a3);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, AssociatedTypeWitness);
    uint64_t v20 = *(void *)(a2 - 8);
    uint64_t v21 = v20;
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v13, 1, a2))
    {
      uint64_t v22 = v27;
      (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v27, v13, a2);
      uint64_t v23 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56))(v22, v23, 1, a2);
    }
    (*(void (**)(char *, uint64_t))(v26 + 8))(v13, v11);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, AssociatedTypeWitness);
    uint64_t v20 = *(void *)(a2 - 8);
  }
  uint64_t v22 = v27;
  uint64_t v21 = v20;
  uint64_t v23 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56))(v22, v23, 1, a2);
}

uint64_t sub_10011167C(uint64_t a1, uint64_t a2)
{
  return sub_100110C94(a1, a2, &OBJC_IVAR____TtC7CoreP2P19AppleBroadcomDriver_logger, (uint64_t)&unk_10045B638, (uint64_t)sub_1000134BC);
}

uint64_t sub_1001116CC()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100111774(uint64_t a1, uint64_t a2)
{
  return sub_100110C4C(a1, a2);
}

uint64_t sub_10011178C(uint64_t a1, uint64_t a2)
{
  return sub_10011167C(a1, a2);
}

void *NANCipherSuite.defaultValue.unsafeMutableAddressor()
{
  return &static NANCipherSuite.defaultValue;
}

uint64_t NANCipherSuite.description.getter(char a1)
{
  uint64_t result = 0x312D4D43432D4B53;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x322D4D43472D4B53;
      break;
    case 2:
    case 3:
      uint64_t result = 0x2D484457322D4B50;
      break;
    case 4:
      uint64_t result = 0x504D43432D4B5447;
      break;
    case 5:
      uint64_t result = 0x504D43472D4B5447;
      break;
    case 6:
    case 7:
      uint64_t result = 0x2D4E5341502D4B50;
      break;
    default:
      return result;
  }
  return result;
}

_UNKNOWN **static NANCipherSuite.allCases.getter()
{
  return &off_1004501A8;
}

uint64_t sub_1001118E4@<X0>(char *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = _s7CoreP2P14NANCipherSuiteO8rawValueACSgs5UInt8V_tcfC_0(*a1);
  *a2  = result;
  return result;
}

void sub_100111910(void *a1@<X8>)
{
  *a1  = &off_1004501A8;
}

uint64_t sub_100111920()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100111980()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1001119D0()
{
  uint64_t result = 0x312D4D43432D4B53;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x322D4D43472D4B53;
      break;
    case 2:
    case 3:
      uint64_t result = 0x2D484457322D4B50;
      break;
    case 4:
      uint64_t result = 0x504D43432D4B5447;
      break;
    case 5:
      uint64_t result = 0x504D43472D4B5447;
      break;
    case 6:
    case 7:
      uint64_t result = 0x2D4E5341502D4B50;
      break;
    default:
      return result;
  }
  return result;
}

BOOL static NANCipherSuite.< infix(_:_:)(char a1, char a2)
{
  return !a1 && a2 == 1;
}

BOOL static NANCipherSuite.> infix(_:_:)(char a1, char a2)
{
  return !a2 && a1 == 1;
}

BOOL sub_100111B18(unsigned char *a1, unsigned char *a2)
{
  return *a2 == 1 && *a1 == 0;
}

BOOL sub_100111B30(unsigned char *a1, unsigned char *a2)
{
  return *a1 != 1 || *a2 != 0;
}

BOOL sub_100111B48(unsigned char *a1, unsigned char *a2)
{
  return *a2 != 1 || *a1 != 0;
}

BOOL sub_100111B60(unsigned char *a1, unsigned char *a2)
{
  return *a1 == 1 && *a2 == 0;
}

uint64_t Collection<>.strongestSupportedSharedKeySuite.getter(uint64_t a1)
{
  return sub_100111BB8(a1);
}

BOOL sub_100111B90(unsigned __int8 *a1)
{
  return *a1 < 2u;
}

uint64_t Collection<>.strongestSupportedPublicKeySuite.getter(uint64_t a1)
{
  return sub_100111BB8(a1);
}

uint64_t sub_100111BB8(uint64_t a1)
{
  __chkstk_darwin();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v1, a1);
  uint64_t v5 = Sequence.filter(_:)();
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    uint64_t v7 = *(unsigned __int8 *)(v5 + 32);
    uint64_t v8 = v6 - 1;
    if (v8)
    {
      uint64_t v9 = (unsigned __int8 *)(v5 + 33);
      do
      {
        int v11 = *v9++;
        int v10 = v11;
        unsigned int v12 = v7;
        if ((v7 & 0xFE) == 0) {
          unsigned int v12 = 1;
        }
        if (v10 == 1) {
          uint64_t v7 = v12;
        }
        else {
          uint64_t v7 = v7;
        }
        --v8;
      }
      while (v8);
    }
  }
  else
  {
    uint64_t v7 = 8;
  }
  swift_bridgeObjectRelease();
  return v7;
}

BOOL sub_100111CE4(unsigned char *a1)
{
  return (*a1 & 0xFE) == 2;
}

uint64_t NANCipherSuite.init(apiCipherSuite:)(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 8) {
    return 8;
  }
  else {
    return a1 - 1;
  }
}

uint64_t InfrastructureQualityOfService.rawValue.getter(unsigned __int8 a1)
{
  return a1 + 1;
}

uint64_t _s7CoreP2P14NANCipherSuiteO8rawValueACSgs5UInt8V_tcfC_0(char a1)
{
  if (((a1 - 1) & 0xF8) != 0) {
    return 8;
  }
  else {
    return (a1 - 1);
  }
}

unint64_t sub_100111D34()
{
  unint64_t result = qword_100486310;
  if (!qword_100486310)
  {
    sub_100014434((uint64_t *)&unk_1004852A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100486310);
  }
  return result;
}

unint64_t sub_100111D94()
{
  unint64_t result = qword_10047FCC8;
  if (!qword_10047FCC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FCC8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for NANCipherSuite(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100111EB4);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANCipherSuite()
{
  return &type metadata for NANCipherSuite;
}

unint64_t sub_100111EEC()
{
  unint64_t result = qword_10047FCD0;
  if (!qword_10047FCD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FCD0);
  }
  return result;
}

void *sub_100111F40(uint64_t a1, uint64_t a2)
{
  int64_t v3 = *(void *)(a1 + 16);
  unint64_t result = &_swiftEmptyArrayStorage;
  if (v3)
  {
    sub_1000836E4(0, v3, 0);
    uint64_t v5 = a2;
    unint64_t result = &_swiftEmptyArrayStorage;
    unsigned int v6 = (char *)(a1 + 38);
    do
    {
      int v7 = *(_DWORD *)(v6 - 6);
      int v8 = *(v6 - 2);
      int v9 = *(v6 - 1);
      char v10 = *v6;
      if (*(v6 - 2))
      {
        if (v8 != 1) {
          goto LABEL_19;
        }
        unint64_t v11 = *(unsigned int *)(v5 + 8) | ((unint64_t)*(unsigned __int16 *)(v5 + 12) << 32);
        if ((v11 & 0xFF00000000) == 0x300000000) {
          goto LABEL_19;
        }
        char v12 = *(_WORD *)(v5 + 12);
        int v13 = BYTE5(v11);
        if (*(_DWORD *)(v5 + 8) != v7) {
          goto LABEL_19;
        }
      }
      else
      {
        int v13 = *(unsigned __int8 *)(v5 + 5);
        char v12 = *(unsigned char *)(v5 + 4);
        if (*(_DWORD *)v5 != v7) {
          goto LABEL_19;
        }
      }
      if (v12)
      {
        if (v12 != 1) {
          goto LABEL_19;
        }
        int v14 = 16;
      }
      else
      {
        int v14 = 4;
      }
      if (*(v6 - 2)) {
        int v15 = 16;
      }
      else {
        int v15 = 4;
      }
      if (v14 == v15)
      {
        switch(v13)
        {
          case 2:
            BOOL v16 = v9 == 2;
            goto LABEL_31;
          case 3:
            BOOL v16 = v9 == 3;
            goto LABEL_31;
          case 4:
            BOOL v16 = v9 == 4;
            goto LABEL_31;
          case 5:
            BOOL v16 = v9 == 5;
            goto LABEL_31;
          case 6:
            BOOL v16 = v9 == 6;
LABEL_31:
            char v17 = v16;
            break;
          default:
            char v21 = v9 ^ ((v13 & 1) == 0);
            if ((v9 - 2) >= 5) {
              char v17 = v21;
            }
            else {
              char v17 = 0;
            }
            break;
        }
        goto LABEL_20;
      }
LABEL_19:
      char v17 = 0;
LABEL_20:
      uint64_t v24 = result;
      unint64_t v19 = result[2];
      unint64_t v18 = result[3];
      if (v19 >= v18 >> 1)
      {
        char v22 = *v6;
        sub_1000836E4(v18 > 1, v19 + 1, 1);
        char v10 = v22;
        uint64_t v5 = a2;
        unint64_t result = v24;
      }
      result[2]  = v19 + 1;
      uint64_t v20 = (char *)&result[v19];
      *((_DWORD *)v20 + 8)  = v7;
      v6 += 8;
      v20[36]  = v8;
      v20[37]  = v9;
      v20[38]  = v10;
      v20[39]  = v17 & 1;
      --v3;
    }
    while (v3);
  }
  return result;
}

void *sub_100112160(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v41 = *(void *)(a1 + 16);
    sub_1000836E4(0, v2, 0);
    uint64_t v4 = sub_100085FFC(a1);
    uint64_t v6 = v41;
    uint64_t v5 = a1;
    uint64_t v7 = 0;
    uint64_t v8 = a1 + 64;
    char v9 = *(unsigned char *)(a1 + 32);
    uint64_t v10 = a1 + 88;
    uint64_t v11 = a2;
    do
    {
      if (v4 < 0 || v4 >= 1 << v9)
      {
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
        JUMPOUT(0x1001124B8);
      }
      unint64_t v13 = (unint64_t)v4 >> 6;
      if ((*(void *)(v8 + 8 * ((unint64_t)v4 >> 6)) & (1 << v4)) == 0) {
        goto LABEL_51;
      }
      if (*(_DWORD *)(v5 + 36) != v3) {
        goto LABEL_52;
      }
      uint64_t v14 = *(void *)(v5 + 48) + 8 * v4;
      int v15 = *(_DWORD *)v14;
      int v16 = *(unsigned __int8 *)(v14 + 4);
      int v17 = *(unsigned __int8 *)(v14 + 5);
      char v18 = *(unsigned char *)(*(void *)(v5 + 56) + v4);
      if (*(unsigned char *)(v14 + 4))
      {
        if (v16 != 1) {
          goto LABEL_26;
        }
        unint64_t v19 = *(unsigned int *)(v11 + 8) | ((unint64_t)*(unsigned __int16 *)(v11 + 12) << 32);
        if ((v19 & 0xFF00000000) == 0x300000000) {
          goto LABEL_26;
        }
        char v20 = *(_WORD *)(v11 + 12);
        int v21 = BYTE5(v19);
        if (*(_DWORD *)(v11 + 8) != v15) {
          goto LABEL_26;
        }
      }
      else
      {
        int v21 = *(unsigned __int8 *)(v11 + 5);
        char v20 = *(unsigned char *)(v11 + 4);
        if (*(_DWORD *)v11 != v15) {
          goto LABEL_26;
        }
      }
      if (v20)
      {
        if (v20 != 1) {
          goto LABEL_26;
        }
        int v22 = 16;
      }
      else
      {
        int v22 = 4;
      }
      if (v16) {
        int v23 = 16;
      }
      else {
        int v23 = 4;
      }
      if (v22 != v23)
      {
LABEL_26:
        char v25 = 0;
        goto LABEL_27;
      }
      switch(v21)
      {
        case 2:
          BOOL v24 = v17 == 2;
          goto LABEL_45;
        case 3:
          BOOL v24 = v17 == 3;
          goto LABEL_45;
        case 4:
          BOOL v24 = v17 == 4;
          goto LABEL_45;
        case 5:
          BOOL v24 = v17 == 5;
          goto LABEL_45;
        case 6:
          BOOL v24 = v17 == 6;
LABEL_45:
          char v25 = v24;
          break;
        default:
          if ((v17 - 2) < 5) {
            goto LABEL_26;
          }
          char v25 = v17 ^ ((v21 & 1) == 0);
          break;
      }
LABEL_27:
      unint64_t v27 = *((void *)&_swiftEmptyArrayStorage + 2);
      unint64_t v26 = *((void *)&_swiftEmptyArrayStorage + 3);
      if (v27 >= v26 >> 1)
      {
        uint64_t v38 = v10;
        uint64_t v39 = v3;
        char v36 = v17;
        char v37 = *(unsigned char *)(*(void *)(v5 + 56) + v4);
        int v35 = v15;
        sub_1000836E4(v26 > 1, v27 + 1, 1);
        int v15 = v35;
        LOBYTE(v17)  = v36;
        char v18 = v37;
        uint64_t v10 = v38;
        uint64_t v3 = v39;
        uint64_t v6 = v41;
        uint64_t v5 = a1;
        uint64_t v11 = a2;
      }
      *((void *)&_swiftEmptyArrayStorage + 2)  = v27 + 1;
      unint64_t v28 = (char *)&_swiftEmptyArrayStorage + 8 * v27;
      *((_DWORD *)v28 + 8)  = v15;
      v28[36]  = v16;
      v28[37]  = v17;
      v28[38]  = v18;
      v28[39]  = v25 & 1;
      char v9 = *(unsigned char *)(v5 + 32);
      unint64_t v12 = 1 << v9;
      if (v4 >= 1 << v9) {
        goto LABEL_53;
      }
      uint64_t v29 = *(void *)(v8 + 8 * v13);
      if ((v29 & (1 << v4)) == 0) {
        goto LABEL_54;
      }
      if (*(_DWORD *)(v5 + 36) != v3) {
        goto LABEL_55;
      }
      unint64_t v30 = v29 & (-2 << (v4 & 0x3F));
      if (v30)
      {
        unint64_t v12 = __clz(__rbit64(v30)) | v4 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v31 = v13 + 1;
        unint64_t v32 = (v12 + 63) >> 6;
        if (v13 + 1 < v32)
        {
          unint64_t v33 = *(void *)(v8 + 8 * v31);
          if (!v33)
          {
            unint64_t v31 = v13 + 2;
            if (v13 + 2 >= v32) {
              goto LABEL_4;
            }
            unint64_t v33 = *(void *)(v8 + 8 * v31);
            if (!v33)
            {
              while (v32 - 3 != v13)
              {
                unint64_t v33 = *(void *)(v10 + 8 * v13++);
                if (v33)
                {
                  unint64_t v31 = v13 + 2;
                  goto LABEL_35;
                }
              }
              goto LABEL_4;
            }
          }
LABEL_35:
          unint64_t v12 = __clz(__rbit64(v33)) + (v31 << 6);
        }
      }
LABEL_4:
      ++v7;
      uint64_t v4 = v12;
    }
    while (v7 != v6);
  }
  return &_swiftEmptyArrayStorage;
}

uint64_t BaseP2PControls.terminate(with:)(uint64_t (*a1)(void))
{
  return a1();
}

void *RadioResources.Priority.min.unsafeMutableAddressor()
{
  return &static RadioResources.Priority.min;
}

void *RadioResources.Priority.max.unsafeMutableAddressor()
{
  return &static RadioResources.Priority.max;
}

uint64_t static RadioResources.Priority.max.getter()
{
  return 12;
}

_UNKNOWN **static RadioResources.Priority.allCases.getter()
{
  return &off_1004501D0;
}

unint64_t sub_100112524@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = _s7CoreP2P14RadioResourcesO8PriorityO8rawValueAESgSi_tcfC_0(*a1);
  *a2  = result;
  return result;
}

void sub_100112550(void *a1@<X8>)
{
  *a1  = &off_1004501D0;
}

uint64_t RadioResources.SymbolicChannel.Resolver.socialChannel(for:)(char a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    return a2 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v3 = 0x300000000;
  if (a1 == 1) {
    uint64_t v3 = a3;
  }
  return v3 & 0xFFFFFFFFFFFFLL;
}

unint64_t RadioResources.PreferredChannel.init(channel:usagePreference:isEqualToSocial:)(uint64_t a1, unsigned __int8 a2, char a3)
{
  uint64_t v3 = 0x100000000000000;
  if ((a3 & 1) == 0) {
    uint64_t v3 = 0;
  }
  return v3 & 0xFFFF000000000000 | ((unint64_t)a2 << 48) | a1 & 0xFFFFFFFFFFFFLL;
}

uint64_t RadioResources.SymbolicChannel.Resolver.primaryChannel.setter(uint64_t a1)
{
  *(_DWORD *)uint64_t v1 = a1;
  *(unsigned char *)(v1 + 4)  = BYTE4(a1);
  *(unsigned char *)(v1 + 5)  = BYTE5(a1);
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = sub_100111F40(v2, v1);
  uint64_t result = swift_bridgeObjectRelease_n();
  *(void *)(v1 + 24)  = v3;
  return result;
}

uint64_t (*RadioResources.SymbolicChannel.Resolver.primaryChannel.modify(uint64_t a1))()
{
  *(void *)(a1 + 8)  = v1;
  return sub_10011263C;
}

uint64_t NANBeacon.Metadata.channel.getter(uint64_t a1, uint64_t a2)
{
  return a2 & 0xFFFFFFFFFFFFLL;
}

uint64_t RadioResources.SymbolicChannel.Resolver.secondaryChannel.setter(uint64_t a1)
{
  *(_DWORD *)(v1 + 8)  = a1;
  *(_WORD *)(v1 + 12)  = WORD2(a1);
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = sub_100111F40(v2, v1);
  uint64_t result = swift_bridgeObjectRelease_n();
  *(void *)(v1 + 24)  = v3;
  return result;
}

uint64_t (*RadioResources.SymbolicChannel.Resolver.secondaryChannel.modify(uint64_t a1))()
{
  *(void *)(a1 + 8)  = v1;
  return sub_10011263C;
}

uint64_t sub_1001126D4(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v2 = *(void *)(result + 8);
    uint64_t v3 = swift_bridgeObjectRetain();
    uint64_t v4 = sub_100111F40(v3, v2);
    uint64_t result = swift_bridgeObjectRelease_n();
    *(void *)(v2 + 24)  = v4;
  }
  return result;
}

uint64_t RadioResources.SymbolicChannel.Resolver.infraChannel.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 16)  = result;
  *(_WORD *)(v1 + 20)  = WORD2(result);
  return result;
}

uint64_t NANDataResponseReceivedEvent.attributes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t RadioResources.SymbolicChannel.Resolver.preferredChannels.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24)  = a1;
  return result;
}

uint64_t RadioResources.SymbolicChannel.Resolver.init(primaryChannel:secondaryChannel:infraChannel:preferredChannels:)(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL;
}

Swift::Void __swiftcall RadioResources.SymbolicChannel.Resolver.update(preferredChannels:)(Swift::OpaquePointer preferredChannels)
{
  uint64_t v3 = sub_100112160((uint64_t)preferredChannels._rawValue, v1);
  swift_bridgeObjectRetain();
  sub_1001139A8((uint64_t *)&v3);
  swift_bridgeObjectRelease();
  uint64_t v2 = v3;
  swift_bridgeObjectRelease();
  *(void *)(v1 + 24)  = v2;
}

uint64_t RadioResources.SymbolicChannel.Resolver.channel(for:supportsSimulatenousDualBand:on:)(uint64_t a1, char a2, char a3, unsigned __int8 a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v8 = a1;
  if (!a2)
  {
    char v9 = a8;
    if ((a3 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      goto LABEL_29;
    }
    if (a4 <= 1u)
    {
      uint64_t v10 = a8[2];
      if (v10)
      {
        if (a4) {
          int v11 = 16;
        }
        else {
          int v11 = 4;
        }
        swift_bridgeObjectRetain();
        unint64_t v12 = (char *)v9 + 39;
        int v27 = v11;
        while (1)
        {
          int v16 = *(_DWORD *)(v12 - 7);
          int v17 = *(v12 - 3);
          char v18 = *(v12 - 2);
          char v19 = *(v12 - 1);
          char v20 = *v12;
          if (*(v12 - 3))
          {
            if (v17 == 1 && v11 == 16)
            {
LABEL_20:
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                sub_1000836E4(0, _swiftEmptyArrayStorage[2] + 1, 1);
              }
              unint64_t v14 = _swiftEmptyArrayStorage[2];
              unint64_t v13 = _swiftEmptyArrayStorage[3];
              if (v14 >= v13 >> 1) {
                sub_1000836E4(v13 > 1, v14 + 1, 1);
              }
              _swiftEmptyArrayStorage[2]  = v14 + 1;
              int v15 = &_swiftEmptyArrayStorage[v14];
              *((_DWORD *)v15 + 8)  = v16;
              *((unsigned char *)v15 + 36)  = v17;
              *((unsigned char *)v15 + 37)  = v18;
              *((unsigned char *)v15 + 38)  = v19;
              *((unsigned char *)v15 + 39)  = v20;
              int v11 = v27;
            }
          }
          else if (v11 == 4)
          {
            goto LABEL_20;
          }
          v12 += 8;
          if (!--v10)
          {
            swift_bridgeObjectRelease();
            uint64_t v8 = a1;
            char v9 = _swiftEmptyArrayStorage;
            goto LABEL_29;
          }
        }
      }
      char v9 = _swiftEmptyArrayStorage;
LABEL_29:
      if (v9[2] <= v8)
      {
        __break(1u);
      }
      else if ((v8 & 0x8000000000000000) == 0)
      {
        int v21 = &v9[v8];
        uint64_t v22 = *((unsigned int *)v21 + 8);
        uint64_t v23 = *((unsigned __int8 *)v21 + 36);
        uint64_t v24 = *((unsigned __int8 *)v21 + 37);
        swift_bridgeObjectRelease();
        a6  = v22 | (v23 << 32) | (v24 << 40);
        return a6 & 0xFFFFFFFFFFFFLL;
      }
      __break(1u);
    }
    __break(1u);
    JUMPOUT(0x100112A28);
  }
  if (a2 == 1)
  {
    a6  = a1 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    switch(a1)
    {
      case 1:
        return a6 & 0xFFFFFFFFFFFFLL;
      case 2:
        a6  = a7;
        break;
      case 3:
        a6  = 0x300000000;
        break;
      default:
        a6  = a5 & 0xFFFFFFFFFFFFLL;
        break;
    }
  }
  return a6 & 0xFFFFFFFFFFFFLL;
}

void RadioResources.SymbolicChannel.hash(into:)(uint64_t a1, Swift::UInt a2, char a3)
{
  if (!a3)
  {
    Hasher._combine(_:)(3uLL);
    Swift::UInt v4 = a2;
LABEL_13:
    Hasher._combine(_:)(v4);
    return;
  }
  if (a3 != 1)
  {
    switch(a2)
    {
      case 1uLL:
LABEL_9:
        Swift::UInt v4 = 1;
        break;
      case 2uLL:
        Swift::UInt v4 = 2;
        break;
      case 3uLL:
LABEL_8:
        Swift::UInt v4 = 5;
        break;
      default:
LABEL_7:
        Swift::UInt v4 = 0;
        break;
    }
    goto LABEL_13;
  }
  Hasher._combine(_:)(4uLL);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(0x801004u >> ((a2 >> 29) & 0xF8));
  switch(BYTE5(a2))
  {
    case 2:
      goto LABEL_7;
    case 3:
      goto LABEL_9;
    case 4:
      Swift::UInt v4 = 3;
      goto LABEL_13;
    case 5:
      Swift::UInt v4 = 4;
      goto LABEL_13;
    case 6:
      goto LABEL_8;
    default:
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(BYTE5(a2) & 1);
      break;
  }
}

Swift::Int RadioResources.SymbolicChannel.hashValue.getter(Swift::UInt a1, char a2)
{
  Hasher.init(_seed:)();
  RadioResources.SymbolicChannel.hash(into:)((uint64_t)v5, a1, a2);
  return Hasher._finalize()();
}

Swift::Int sub_100112BB4()
{
  Swift::UInt v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  Hasher.init(_seed:)();
  RadioResources.SymbolicChannel.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

void sub_100112C04(uint64_t a1)
{
  RadioResources.SymbolicChannel.hash(into:)(a1, *(void *)v1, *(unsigned char *)(v1 + 8));
}

Swift::Int sub_100112C10()
{
  Swift::UInt v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  Hasher.init(_seed:)();
  RadioResources.SymbolicChannel.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

BOOL sub_100112C5C(uint64_t a1, uint64_t a2)
{
  return _s7CoreP2P14RadioResourcesO15SymbolicChannelO21__derived_enum_equalsySbAE_AEtFZ_0(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

BOOL RadioResources.PreferredChannel.requiresExtraBandwidth.getter(uint64_t a1)
{
  return (a1 & 0xFF000000000000) == 0x1000000000000;
}

uint64_t NANDataEstablishedEvent.type.getter(unint64_t a1)
{
  return HIBYTE(a1) & 1;
}

uint64_t RadioResources.PreferredChannel.isEqualToSocial.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 7)  = result;
  return result;
}

uint64_t (*RadioResources.PreferredChannel.isEqualToSocial.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

void RadioResources.PreferredChannel.hash(into:)(int a1, unint64_t a2)
{
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(0x801004u >> ((a2 >> 29) & 0xF8));
  switch(BYTE5(a2))
  {
    case 2:
      Swift::UInt v3 = 0;
      goto LABEL_8;
    case 3:
      Swift::UInt v3 = 1;
      goto LABEL_8;
    case 4:
      Swift::UInt v3 = 3;
      goto LABEL_8;
    case 5:
      Swift::UInt v3 = 4;
      goto LABEL_8;
    case 6:
      Swift::UInt v3 = 5;
LABEL_8:
      Hasher._combine(_:)(v3);
      break;
    default:
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(BYTE5(a2) & 1);
      break;
  }
  Hasher._combine(_:)(BYTE6(a2));
  Hasher._combine(_:)(HIBYTE(a2) & 1);
}

uint64_t static RadioResources.PreferredChannel.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_100115064(a1 & 0x1FFFFFFFFFFFFFFLL, a2 & 0x1FFFFFFFFFFFFFFLL);
}

Swift::Int RadioResources.PreferredChannel.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  RadioResources.PreferredChannel.hash(into:)((int)&v3, a1 & 0x1FFFFFFFFFFFFFFLL);
  return Hasher._finalize()();
}

Swift::Int sub_100112DE0()
{
  uint64_t v1 = *(unsigned int *)v0;
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  int v5 = v0[7];
  Hasher.init(_seed:)();
  uint64_t v6 = 0x100000000000000;
  if (!v5) {
    uint64_t v6 = 0;
  }
  RadioResources.PreferredChannel.hash(into:)((int)&v8, v6 | (v4 << 48) | (v3 << 40) | (v2 << 32) | v1);
  return Hasher._finalize()();
}

void sub_100112E60(int a1)
{
  uint64_t v2 = 0x100000000000000;
  if (!v1[7]) {
    uint64_t v2 = 0;
  }
  RadioResources.PreferredChannel.hash(into:)(a1, v2 | ((unint64_t)v1[6] << 48) | ((unint64_t)v1[5] << 40) | ((unint64_t)v1[4] << 32) | *(unsigned int *)v1);
}

Swift::Int sub_100112E94()
{
  uint64_t v1 = *(unsigned int *)v0;
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  int v5 = v0[7];
  Hasher.init(_seed:)();
  uint64_t v6 = 0x100000000000000;
  if (!v5) {
    uint64_t v6 = 0;
  }
  RadioResources.PreferredChannel.hash(into:)((int)&v8, v6 | (v4 << 48) | (v3 << 40) | (v2 << 32) | v1);
  return Hasher._finalize()();
}

uint64_t sub_100112F10(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *(unsigned int *)a1;
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[6];
  if (a1[7]) {
    uint64_t v6 = 0x100000000000000;
  }
  else {
    uint64_t v6 = 0;
  }
  unint64_t v7 = v6 | (v5 << 48) | (v4 << 40) | (v3 << 32) | v2;
  if (a2[7]) {
    uint64_t v8 = 0x100000000000000;
  }
  else {
    uint64_t v8 = 0;
  }
  return sub_100115064(v7, v8 | ((unint64_t)a2[6] << 48) | ((unint64_t)a2[5] << 40) | ((unint64_t)a2[4] << 32) | *(unsigned int *)a2);
}

uint64_t RadioSchedule.set(_:to:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  void v9[2] = a7;
  v9[3]  = a8;
  uint64_t v9[4] = a1;
  v9[5]  = a2;
  v9[6]  = a3;
  v9[7]  = a4;
  char v10 = a5;
  char v11 = a6;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t), void *, uint64_t, uint64_t))(a8 + 24))(a4, a5, sub_1001151A0, v9, a7, a8);
}

uint64_t sub_10011301C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(AssociatedConformanceWitness + 32);
  uint64_t v14 = swift_checkMetadataState();
  return v13(a2, a3, a4, a5, a6, a7, v14, AssociatedConformanceWitness);
}

uint64_t RadioSchedule.reserve(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  _OWORD v7[2] = a5;
  _OWORD v7[3] = a6;
  void v7[4] = a1;
  v7[5]  = a2;
  void v7[6] = a3;
  char v8 = a4;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t), void *))(a6 + 24))(3, 2, sub_1001151D8, v7);
}

uint64_t sub_1001131A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  char v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness
                                                                                       + 24);
  uint64_t v11 = swift_checkMetadataState();
  return v10(a2, a3, a4, a5, v11, AssociatedConformanceWitness);
}

CoreP2P::RadioResources::Priority __swiftcall RadioSchedule.inflexibleUpgrade(priority:)(CoreP2P::RadioResources::Priority priority)
{
  if ((*(uint64_t (**)())(v1 + 56))()) {
    return priority;
  }
  else {
    return 11;
  }
}

uint64_t RadioResourceControls.update<A>(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v51 = a5;
  uint64_t v52 = a8;
  uint64_t v53 = a1;
  uint64_t v44 = a7;
  uint64_t v49 = a6;
  uint64_t v50 = a3;
  uint64_t v54 = a2;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v45 = *(void *)(v9 - 8);
  uint64_t v46 = v9;
  __chkstk_darwin();
  uint64_t v48 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v47 = (char *)&v44 - v11;
  uint64_t v12 = *(void *)(a4 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  int v16 = (char *)&v44 - v15;
  __chkstk_darwin();
  char v18 = (char *)&v44 - v17;
  uint64_t v19 = type metadata accessor for Optional();
  swift_getTupleTypeMetadata2();
  uint64_t v20 = __chkstk_darwin();
  uint64_t v22 = (char *)&v44 - v21;
  uint64_t v23 = (char *)&v44 + *(int *)(v20 + 56) - v21;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16);
  v24((char *)&v44 - v21, v53, v19);
  uint64_t v25 = v19;
  uint64_t v26 = v12;
  v24(v23, v54, v25);
  int v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  LODWORD(v12)  = v27(v22, 1, a4);
  uint64_t result = v27(v23, 1, a4);
  if (v12 == 1)
  {
    if (result == 1) {
      return result;
    }
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v18, v23, a4);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v51 + 8))(v18, a4, v49, v52, v50);
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v18, a4);
  }
  unint64_t v30 = v47;
  uint64_t v29 = v48;
  unint64_t v31 = v16;
  unint64_t v32 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
  if (result == 1)
  {
    v32(v18, v22, a4);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v51 + 16))(v18, a4, v49, v52, v50);
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v18, a4);
  }
  uint64_t v54 = v26;
  unint64_t v33 = v31;
  v32(v31, v22, a4);
  uint64_t v34 = v14;
  v32(v14, v23, a4);
  int v35 = v30;
  uint64_t v36 = v52;
  dispatch thunk of Identifiable.id.getter();
  dispatch thunk of Identifiable.id.getter();
  char v37 = static UUID.== infix(_:_:)();
  uint64_t v38 = *(void (**)(char *, uint64_t))(v45 + 8);
  uint64_t v39 = v46;
  v38(v29, v46);
  v38(v35, v39);
  if (v37)
  {
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v51 + 8))(v34, a4, v49, v36, v50);
    }
  }
  else
  {
    uint64_t v40 = v51;
    uint64_t v42 = v49;
    uint64_t v41 = v50;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v51 + 16))(v33, a4, v49, v36, v50, v51);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 8))(v34, a4, v42, v36, v41);
  }
  uint64_t v43 = *(void (**)(char *, uint64_t))(v54 + 8);
  v43(v34, a4);
  return ((uint64_t (*)(char *, uint64_t))v43)(v33, a4);
}

uint64_t Optional<A>.update<A>(schedule:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(a1);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v16 + 16))(v15, v17);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9);
  if (result != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v15, v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 8))(a1, a3, a5, v9, a4);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  return result;
}

uint64_t sub_10011398C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return Optional<A>.update<A>(schedule:)(a1, a4, a2, *(void *)(a5 - 8), a3);
}

Swift::Int sub_1001139A8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100114E7C(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0]  = v2 + 32;
  v5[1]  = v3;
  Swift::Int result = sub_100113A14(v5);
  *a1  = v2;
  return result;
}

Swift::Int sub_100113A14(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = a1;
  Swift::Int v4 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v4);
  if (result < v4)
  {
    if (v4 >= 0) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = v4 + 1;
    }
    if (v4 < -1) {
      goto LABEL_238;
    }
    Swift::Int v125 = result;
    if (v4 < 2)
    {
      uint64_t v9 = _swiftEmptyArrayStorage;
      __dst  = (char *)&_swiftEmptyArrayStorage[4];
      if (v4 != 1)
      {
        unint64_t v13 = _swiftEmptyArrayStorage[2];
        uint64_t v12 = (char *)_swiftEmptyArrayStorage;
        if (v13 < 2) {
          goto LABEL_205;
        }
        goto LABEL_193;
      }
      unint64_t v124 = _swiftEmptyArrayStorage;
      uint64_t v134 = v1;
    }
    else
    {
      uint64_t v134 = v1;
      uint64_t v7 = v6 >> 1;
      uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v8 + 16)  = v7;
      unint64_t v124 = (void *)v8;
      __dst  = (char *)(v8 + 32);
    }
    Swift::Int v10 = 0;
    uint64_t v11 = *v3;
    int v122 = v3;
    uint64_t v123 = *v3 - 1;
    uint64_t v12 = (char *)_swiftEmptyArrayStorage;
    uint64_t v135 = *v3;
    Swift::Int v128 = v4;
LABEL_16:
    Swift::Int v14 = v10;
    Swift::Int v15 = v10 + 1;
    if (v10 + 1 >= v4) {
      goto LABEL_99;
    }
    uint64_t v16 = v11 + 8 * v15;
    unsigned int v17 = *(_DWORD *)v16;
    char v18 = *(unsigned char *)(v16 + 4);
    int v19 = *(unsigned __int8 *)(v16 + 5);
    int v20 = *(unsigned __int8 *)(v16 + 7);
    uint64_t v21 = v11 + 8 * v10;
    int v22 = *(unsigned __int8 *)(v21 + 5);
    unsigned int v23 = (0x801004u >> (8 * v18));
    unsigned int v24 = (0x801004u >> (8 * *(unsigned char *)(v21 + 4)));
    if (v23 == v24)
    {
      int v25 = *(unsigned __int8 *)(v16 + 7);
      if ((v20 | *(unsigned __int8 *)(v21 + 7)))
      {
LABEL_29:
        Swift::Int v15 = v14 + 2;
        if (v14 + 2 < v128) {
          goto LABEL_30;
        }
LABEL_79:
        if (v25)
        {
LABEL_80:
          if (v15 < v14) {
            goto LABEL_231;
          }
          if (v14 < v15)
          {
LABEL_82:
            uint64_t v36 = 8 * v15;
            uint64_t v37 = 8 * v14;
            Swift::Int v38 = v15;
            Swift::Int v39 = v14;
            while (1)
            {
              if (v39 != --v38)
              {
                if (!v11) {
                  goto LABEL_234;
                }
                uint64_t v40 = v11 + v36;
                int v41 = *(_DWORD *)(v11 + v37);
                __int16 v42 = *(_WORD *)(v11 + v37 + 4);
                char v43 = *(unsigned char *)(v11 + v37 + 6);
                char v44 = *(unsigned char *)(v11 + v37 + 7);
                *(void *)(v11 + v37)  = *(void *)(v11 + v36 - 8);
                *(_DWORD *)(v40 - 8)  = v41;
                *(_WORD *)(v40 - 4)  = v42;
                *(unsigned char *)(v40 - 2)  = v43;
                *(unsigned char *)(v40 - 1)  = v44;
              }
              ++v39;
              v36 -= 8;
              v37 += 8;
              if (v39 >= v38) {
                goto LABEL_99;
              }
            }
          }
        }
        goto LABEL_99;
      }
    }
    if (v23 < v24 || v17 < *(_DWORD *)v21) {
      goto LABEL_23;
    }
    sub_100010BCC(&qword_10047EEE0);
    if (v22 == 2)
    {
      int v25 = 0;
      uint64_t v11 = v135;
      goto LABEL_29;
    }
    uint64_t v11 = v135;
    if (v19 == 2) {
      goto LABEL_23;
    }
    if (v22 == 3)
    {
LABEL_28:
      int v25 = 0;
      goto LABEL_29;
    }
    if (v19 == 3) {
      goto LABEL_23;
    }
    if ((v22 - 2) >= 5 && (v22 & 1) == 0) {
      goto LABEL_28;
    }
    if ((v19 - 2) >= 5 && (v19 & 1) == 0) {
      goto LABEL_23;
    }
    if (v22 - 2) >= 5u && (v22) {
      goto LABEL_28;
    }
    if (v19 - 2) >= 5u && (v19) {
      goto LABEL_23;
    }
    if (v22 == 4) {
      goto LABEL_28;
    }
    if (v19 == 4)
    {
LABEL_23:
      int v25 = 1;
      goto LABEL_29;
    }
    if (v22 == 5)
    {
      Swift::Int v15 = v14 + 2;
      if (v14 + 2 < v128)
      {
        int v25 = 0;
LABEL_30:
        char v27 = v18;
        while (1)
        {
          while (1)
          {
            unsigned int v28 = v17;
            char v29 = v19;
            char v30 = v20;
            uint64_t v31 = v11 + 8 * v15;
            unsigned int v17 = *(_DWORD *)v31;
            char v32 = 8 * v27;
            char v27 = *(unsigned char *)(v31 + 4);
            int v19 = *(unsigned __int8 *)(v31 + 5);
            LOBYTE(v20)  = *(unsigned char *)(v31 + 7);
            unsigned int v33 = (0x801004u >> (8 * v27));
            unsigned int v34 = (0x801004u >> v32);
            if (v33 != v34) {
              break;
            }
            if (v20) {
              goto LABEL_46;
            }
            if ((v30 & 1) == 0) {
              break;
            }
            if (v25) {
              goto LABEL_80;
            }
            if (++v15 >= v128) {
              goto LABEL_99;
            }
          }
          if (v33 < v34 || v17 < v28) {
            goto LABEL_46;
          }
          if (v29 != 2)
          {
            if (v19 == 2) {
              goto LABEL_46;
            }
            if (v29 != 3)
            {
              if (v19 == 3) {
                goto LABEL_46;
              }
              if (v29 - 2) < 5u || (v29)
              {
                if ((v19 - 2) >= 5 && (v19 & 1) == 0) {
                  goto LABEL_46;
                }
                if ((v29 - 2) < 5u || (v29 & 1) == 0)
                {
                  if (v19 - 2) >= 5u && (v19) {
                    goto LABEL_46;
                  }
                  if (v29 != 4)
                  {
                    if (v19 == 4) {
                      goto LABEL_46;
                    }
                    if (v29 != 5)
                    {
                      if (v19 == 5) {
                        goto LABEL_46;
                      }
                      if (v29 != 6) {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
          if (v25) {
            goto LABEL_80;
          }
LABEL_47:
          if (++v15 >= v128) {
            goto LABEL_79;
          }
        }
        if (v19 != 6) {
          goto LABEL_236;
        }
LABEL_46:
        if ((v25 & 1) == 0) {
          goto LABEL_99;
        }
        goto LABEL_47;
      }
LABEL_99:
      Swift::Int v45 = v128;
      if (v15 >= v128) {
        goto LABEL_143;
      }
      if (__OFSUB__(v15, v14)) {
        goto LABEL_227;
      }
      if (v15 - v14 >= v125) {
        goto LABEL_143;
      }
      if (__OFADD__(v14, v125)) {
        goto LABEL_229;
      }
      if (v14 + v125 < v128) {
        Swift::Int v45 = v14 + v125;
      }
      if (v45 >= v14)
      {
        if (v15 == v45) {
          goto LABEL_143;
        }
        char v121 = v12;
        uint64_t v46 = v123 + 8 * v15;
        Swift::Int v126 = v45;
        Swift::Int v127 = v14;
LABEL_110:
        uint64_t v47 = v11 + 8 * v15;
        unsigned int v48 = *(_DWORD *)v47;
        char v49 = *(unsigned char *)(v47 + 4);
        int v50 = *(unsigned __int8 *)(v47 + 5);
        char v51 = *(unsigned char *)(v47 + 7);
        BOOL v52 = (v50 - 2) > 4;
        BOOL v53 = (v50 - 2) < 5;
        if (v50) {
          BOOL v52 = 0;
        }
        BOOL v132 = v52;
        if ((v50 & 1) == 0) {
          BOOL v53 = 1;
        }
        BOOL v129 = v53;
        unsigned int v54 = (0x801004u >> (8 * v49));
        uint64_t v130 = v46;
        while (1)
        {
          int v55 = *(unsigned __int8 *)(v46 - 2);
          unsigned int v56 = (0x801004u >> (8 * *(unsigned char *)(v46 - 3)));
          if (v54 == v56)
          {
            if (v51) {
              goto LABEL_139;
            }
            if (*(unsigned char *)v46) {
              goto LABEL_109;
            }
          }
          if (v54 >= v56 && v48 >= *(_DWORD *)(v46 - 7))
          {
            Swift::Int v58 = v15;
            sub_100010BCC(&qword_10047EEE0);
            if (v55 == 2)
            {
              uint64_t v11 = v135;
              Swift::Int v15 = v58;
LABEL_109:
              ++v15;
              uint64_t v46 = v130 + 8;
              Swift::Int v14 = v127;
              if (v15 != v126) {
                goto LABEL_110;
              }
              Swift::Int v15 = v126;
              uint64_t v12 = v121;
LABEL_143:
              if (v15 < v14) {
                goto LABEL_222;
              }
              Swift::Int v133 = v15;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v12 = sub_100114B14(0, *((void *)v12 + 2) + 1, 1, v12);
              }
              unint64_t v61 = *((void *)v12 + 2);
              unint64_t v60 = *((void *)v12 + 3);
              unint64_t v13 = v61 + 1;
              uint64_t v11 = v135;
              Swift::Int v10 = v133;
              if (v61 >= v60 >> 1)
              {
                unsigned int v110 = sub_100114B14((char *)(v60 > 1), v61 + 1, 1, v12);
                Swift::Int v10 = v133;
                uint64_t v11 = v135;
                uint64_t v12 = v110;
              }
              *((void *)v12 + 2)  = v13;
              int v62 = v12 + 32;
              uint64_t v63 = &v12[16 * v61 + 32];
              *(void *)uint64_t v63 = v14;
              *((void *)v63 + 1)  = v10;
              if (v61)
              {
LABEL_149:
                unint64_t v64 = v13 - 1;
                if (v13 >= 4)
                {
                  int v69 = &v62[16 * v13];
                  uint64_t v70 = *((void *)v69 - 8);
                  uint64_t v71 = *((void *)v69 - 7);
                  BOOL v75 = __OFSUB__(v71, v70);
                  uint64_t v72 = v71 - v70;
                  if (v75) {
                    goto LABEL_211;
                  }
                  uint64_t v74 = *((void *)v69 - 6);
                  uint64_t v73 = *((void *)v69 - 5);
                  BOOL v75 = __OFSUB__(v73, v74);
                  uint64_t v67 = v73 - v74;
                  char v68 = v75;
                  if (v75) {
                    goto LABEL_212;
                  }
                  unint64_t v76 = v13 - 2;
                  int v77 = &v62[16 * v13 - 32];
                  uint64_t v79 = *(void *)v77;
                  uint64_t v78 = *((void *)v77 + 1);
                  BOOL v75 = __OFSUB__(v78, v79);
                  uint64_t v80 = v78 - v79;
                  if (v75) {
                    goto LABEL_214;
                  }
                  BOOL v75 = __OFADD__(v67, v80);
                  uint64_t v81 = v67 + v80;
                  if (v75) {
                    goto LABEL_217;
                  }
                  if (v81 >= v72)
                  {
                    long long v99 = &v62[16 * v64];
                    uint64_t v101 = *(void *)v99;
                    uint64_t v100 = *((void *)v99 + 1);
                    BOOL v75 = __OFSUB__(v100, v101);
                    uint64_t v102 = v100 - v101;
                    if (v75) {
                      goto LABEL_221;
                    }
                    BOOL v92 = v67 < v102;
                  }
                  else
                  {
LABEL_162:
                    if (v68) {
                      goto LABEL_213;
                    }
                    unint64_t v76 = v13 - 2;
                    uint64_t v82 = &v62[16 * v13 - 32];
                    uint64_t v84 = *(void *)v82;
                    uint64_t v83 = *((void *)v82 + 1);
                    BOOL v85 = __OFSUB__(v83, v84);
                    uint64_t v86 = v83 - v84;
                    char v87 = v85;
                    if (v85) {
                      goto LABEL_216;
                    }
                    Swift::UInt8 v88 = &v62[16 * v64];
                    uint64_t v90 = *(void *)v88;
                    uint64_t v89 = *((void *)v88 + 1);
                    BOOL v75 = __OFSUB__(v89, v90);
                    uint64_t v91 = v89 - v90;
                    if (v75) {
                      goto LABEL_219;
                    }
                    if (__OFADD__(v86, v91)) {
                      goto LABEL_220;
                    }
                    if (v86 + v91 < v67) {
                      goto LABEL_174;
                    }
                    BOOL v92 = v67 < v91;
                  }
                  if (v92) {
                    unint64_t v64 = v76;
                  }
                }
                else
                {
                  if (v13 == 3)
                  {
                    uint64_t v66 = *((void *)v12 + 4);
                    uint64_t v65 = *((void *)v12 + 5);
                    BOOL v75 = __OFSUB__(v65, v66);
                    uint64_t v67 = v65 - v66;
                    char v68 = v75;
                    goto LABEL_162;
                  }
                  uint64_t v93 = *((void *)v12 + 4);
                  uint64_t v94 = *((void *)v12 + 5);
                  BOOL v75 = __OFSUB__(v94, v93);
                  uint64_t v86 = v94 - v93;
                  char v87 = v75;
LABEL_174:
                  if (v87) {
                    goto LABEL_215;
                  }
                  BOOL v95 = &v62[16 * v64];
                  uint64_t v97 = *(void *)v95;
                  uint64_t v96 = *((void *)v95 + 1);
                  BOOL v75 = __OFSUB__(v96, v97);
                  uint64_t v98 = v96 - v97;
                  if (v75) {
                    goto LABEL_218;
                  }
                  if (v98 < v86) {
                    goto LABEL_15;
                  }
                }
                unint64_t v103 = v64 - 1;
                if (v64 - 1 >= v13)
                {
                  __break(1u);
LABEL_208:
                  __break(1u);
LABEL_209:
                  __break(1u);
LABEL_210:
                  __break(1u);
LABEL_211:
                  __break(1u);
LABEL_212:
                  __break(1u);
LABEL_213:
                  __break(1u);
LABEL_214:
                  __break(1u);
LABEL_215:
                  __break(1u);
LABEL_216:
                  __break(1u);
LABEL_217:
                  __break(1u);
LABEL_218:
                  __break(1u);
LABEL_219:
                  __break(1u);
LABEL_220:
                  __break(1u);
LABEL_221:
                  __break(1u);
LABEL_222:
                  __break(1u);
LABEL_223:
                  __break(1u);
LABEL_224:
                  __break(1u);
LABEL_225:
                  __break(1u);
LABEL_226:
                  __break(1u);
LABEL_227:
                  __break(1u);
LABEL_228:
                  __break(1u);
LABEL_229:
                  __break(1u);
                  break;
                }
                if (!v11) {
                  goto LABEL_233;
                }
                int v104 = v12;
                Swift::UInt32 v105 = &v62[16 * v103];
                uint64_t v106 = *(void *)v105;
                char v107 = &v62[16 * v64];
                uint64_t v108 = *((void *)v107 + 1);
                sub_100114690((char *)(v11 + 8 * *(void *)v105), (char *)(v11 + 8 * *(void *)v107), v11 + 8 * v108, __dst);
                if (v134)
                {
                  uint64_t v9 = v124;
                  goto LABEL_205;
                }
                if (v108 < v106) {
                  goto LABEL_208;
                }
                if (v64 > *((void *)v104 + 2)) {
                  goto LABEL_209;
                }
                *(void *)Swift::UInt32 v105 = v106;
                *(void *)&v62[16 * v103 + 8]  = v108;
                unint64_t v109 = *((void *)v104 + 2);
                if (v64 >= v109) {
                  goto LABEL_210;
                }
                uint64_t v12 = v104;
                unint64_t v13 = v109 - 1;
                memmove(&v62[16 * v64], v107 + 16, 16 * (v109 - 1 - v64));
                *((void *)v104 + 2)  = v109 - 1;
                uint64_t v11 = v135;
                Swift::Int v10 = v133;
                if (v109 <= 2) {
                  goto LABEL_15;
                }
                goto LABEL_149;
              }
              unint64_t v13 = 1;
LABEL_15:
              Swift::Int v4 = v128;
              if (v10 >= v128)
              {
                uint64_t v2 = v134;
                uint64_t v9 = v124;
                uint64_t v3 = v122;
                if (v13 < 2)
                {
LABEL_205:
                  swift_bridgeObjectRelease();
                  void v9[2] = 0;
                  return swift_bridgeObjectRelease();
                }
LABEL_193:
                uint64_t v111 = *v3;
                while (1)
                {
                  unint64_t v112 = v13 - 2;
                  if (v13 < 2) {
                    goto LABEL_223;
                  }
                  if (!v111) {
                    goto LABEL_235;
                  }
                  int v113 = v12;
                  int v114 = v12 + 32;
                  uint64_t v115 = *(void *)&v12[16 * v112 + 32];
                  uint64_t v116 = *(void *)&v12[16 * v13 + 24];
                  sub_100114690((char *)(v111 + 8 * v115), (char *)(v111 + 8 * *(void *)&v114[16 * v13 - 16]), v111 + 8 * v116, __dst);
                  if (v2) {
                    goto LABEL_205;
                  }
                  if (v116 < v115) {
                    goto LABEL_224;
                  }
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    int v113 = sub_100114E40((uint64_t)v113);
                  }
                  if (v112 >= *((void *)v113 + 2)) {
                    goto LABEL_225;
                  }
                  long long v117 = v113;
                  int v118 = v113 + 32;
                  long long v119 = &v113[16 * v112 + 32];
                  *(void *)long long v119 = v115;
                  *((void *)v119 + 1)  = v116;
                  unint64_t v120 = *((void *)v113 + 2);
                  if (v13 > v120) {
                    goto LABEL_226;
                  }
                  uint64_t v12 = v117;
                  memmove(&v118[16 * v13 - 16], &v118[16 * v13], 16 * (v120 - v13));
                  *((void *)v12 + 2)  = v120 - 1;
                  unint64_t v13 = v120 - 1;
                  if (v120 <= 2) {
                    goto LABEL_205;
                  }
                }
              }
              goto LABEL_16;
            }
            uint64_t v11 = v135;
            Swift::Int v15 = v58;
            if (v50 != 2)
            {
              if (v55 == 3) {
                goto LABEL_109;
              }
              if (v50 != 3)
              {
                if ((v55 - 2) >= 5 && (v55 & 1) == 0) {
                  goto LABEL_109;
                }
                if (!v132)
                {
                  if (v55 - 2) >= 5u && (v55) {
                    goto LABEL_109;
                  }
                  if (v129)
                  {
                    if (v55 == 4) {
                      goto LABEL_109;
                    }
                    if (v50 != 4)
                    {
                      if (v55 == 5) {
                        goto LABEL_109;
                      }
                      if (v50 != 5)
                      {
                        if (v55 == 6) {
                          goto LABEL_109;
                        }
                        if (v50 != 6) {
                          goto LABEL_237;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_139:
          if (!v11) {
            goto LABEL_232;
          }
          char v59 = *(unsigned char *)(v46 + 7);
          *(void *)(v46 + 1)  = *(void *)(v46 - 7);
          *(_DWORD *)(v46 - 7)  = v48;
          *(unsigned char *)(v46 - 3)  = v49;
          *(unsigned char *)(v46 - 2)  = v50;
          *(unsigned char *)(v46 - 1)  = v59;
          *(unsigned char *)uint64_t v46 = v51;
          v46 -= 8;
          if (v15 == ++v14) {
            goto LABEL_109;
          }
        }
      }
      __break(1u);
LABEL_231:
      __break(1u);
LABEL_232:
      __break(1u);
LABEL_233:
      __break(1u);
LABEL_234:
      __break(1u);
LABEL_235:
      __break(1u);
LABEL_236:
      sub_100010BCC(&qword_10047EEE0);
LABEL_237:
      _diagnoseUnexpectedEnumCase<A>(type:)();
      __break(1u);
LABEL_238:
      Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    if (v19 != 5)
    {
      if (v22 == 6)
      {
        Swift::Int v15 = v14 + 2;
        if (v14 + 2 >= v128)
        {
          uint64_t v11 = v135;
          goto LABEL_99;
        }
        int v25 = 0;
LABEL_95:
        uint64_t v11 = v135;
        goto LABEL_30;
      }
      if (v19 != 6) {
        goto LABEL_237;
      }
    }
    Swift::Int v15 = v14 + 2;
    if (v14 + 2 >= v128)
    {
      uint64_t v11 = v135;
      if (v14 < v15) {
        goto LABEL_82;
      }
      goto LABEL_99;
    }
    int v25 = 1;
    goto LABEL_95;
  }
  if (v4 < 0) {
    goto LABEL_228;
  }
  if (v4) {
    return sub_1001144A0(0, v4, 1, v3);
  }
  return result;
}

uint64_t sub_1001144A0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v21 = result;
  if (a3 == a2) {
    return result;
  }
  uint64_t v4 = a3;
  uint64_t v5 = *a4;
  uint64_t v6 = *a4 + 8 * a3 - 1;
LABEL_5:
  uint64_t v7 = (unsigned int *)(v5 + 8 * v4);
  unsigned int v8 = *v7;
  char v9 = *((unsigned char *)v7 + 4);
  int v10 = *((unsigned __int8 *)v7 + 5);
  char v11 = *((unsigned char *)v7 + 7);
  BOOL v12 = (v10 - 2) > 4;
  BOOL v13 = (v10 - 2) < 5;
  if (v10) {
    BOOL v12 = 0;
  }
  BOOL v24 = v12;
  if ((v10 & 1) == 0) {
    BOOL v13 = 1;
  }
  BOOL v22 = v13;
  unsigned int v14 = (0x801004u >> (8 * v9));
  uint64_t v15 = v21;
  uint64_t v23 = v6;
  while (1)
  {
    int v16 = *(unsigned __int8 *)(v6 - 2);
    unsigned int v17 = (0x801004u >> (8 * *(unsigned char *)(v6 - 3)));
    if (v14 == v17)
    {
      if (v11) {
        goto LABEL_34;
      }
      if (*(unsigned char *)v6) {
        goto LABEL_4;
      }
    }
    if (v14 >= v17 && v8 >= *(_DWORD *)(v6 - 7))
    {
      Swift::Int result = sub_100010BCC(&qword_10047EEE0);
      if (v16 == 2) {
        goto LABEL_4;
      }
      if (v10 != 2)
      {
        if (v16 == 3) {
          goto LABEL_4;
        }
        if (v10 != 3)
        {
          if ((v16 - 2) >= 5 && (v16 & 1) == 0)
          {
LABEL_4:
            ++v4;
            uint64_t v6 = v23 + 8;
            if (v4 == a2) {
              return result;
            }
            goto LABEL_5;
          }
          if (!v24)
          {
            if (v16 - 2) >= 5u && (v16) {
              goto LABEL_4;
            }
            if (v22)
            {
              if (v16 == 4) {
                goto LABEL_4;
              }
              if (v10 != 4)
              {
                if (v16 == 5) {
                  goto LABEL_4;
                }
                if (v10 != 5)
                {
                  if (v16 == 6) {
                    goto LABEL_4;
                  }
                  if (v10 != 6) {
                    goto LABEL_38;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_34:
    if (!v5) {
      break;
    }
    char v19 = *(unsigned char *)(v6 + 7);
    *(void *)(v6 + 1)  = *(void *)(v6 - 7);
    *(_DWORD *)(v6 - 7)  = v8;
    *(unsigned char *)(v6 - 3)  = v9;
    *(unsigned char *)(v6 - 2)  = v10;
    *(unsigned char *)(v6 - 1)  = v19;
    *(unsigned char *)uint64_t v6 = v11;
    v6 -= 8;
    if (v4 == ++v15) {
      goto LABEL_4;
    }
  }
  __break(1u);
LABEL_38:
  Swift::Int result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

uint64_t sub_100114690(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 7;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 3;
  int v41 = __src;
  uint64_t v40 = __dst;
  if (v10 < v12 >> 3)
  {
    if (v8 >= -7)
    {
      if (__dst != __src || &__src[8 * v10] <= __dst) {
        memmove(__dst, __src, 8 * v10);
      }
      unsigned int v14 = &v4[8 * v10];
      Swift::Int v39 = v14;
      if ((unint64_t)v6 >= a3 || v8 < 8) {
        goto LABEL_94;
      }
      while (1)
      {
        int v15 = v6[5];
        int v16 = v4[5];
        unsigned int v17 = (0x801004u >> (8 * v6[4]));
        unsigned int v18 = (0x801004u >> (8 * v4[4]));
        if (v17 == v18)
        {
          if (v6[7]) {
            goto LABEL_19;
          }
          if (v4[7]) {
            goto LABEL_24;
          }
        }
        if (v17 >= v18 && *(_DWORD *)v6 >= *(_DWORD *)v4)
        {
          sub_100010BCC(&qword_10047EEE0);
          if (v16 == 2) {
            goto LABEL_24;
          }
          if (v15 != 2)
          {
            if (v16 == 3) {
              goto LABEL_24;
            }
            if (v15 != 3)
            {
              if ((v16 - 2) >= 5 && (v16 & 1) == 0)
              {
LABEL_24:
                if (v7 != v4) {
                  *(void *)uint64_t v7 = *(void *)v4;
                }
                v4 += 8;
                uint64_t v40 = v4;
                int v20 = v6;
                goto LABEL_27;
              }
              if (v15 - 2) < 5 || (v15)
              {
                if (v16 - 2) >= 5u && (v16) {
                  goto LABEL_24;
                }
                if ((v15 - 2) < 5u || (v15 & 1) == 0)
                {
                  if (v16 == 4) {
                    goto LABEL_24;
                  }
                  if (v15 != 4)
                  {
                    if (v16 == 5) {
                      goto LABEL_24;
                    }
                    if (v15 != 5)
                    {
                      if (v16 == 6) {
                        goto LABEL_24;
                      }
                      if (v15 != 6) {
                        goto LABEL_92;
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_19:
        int v20 = v6 + 8;
        if (v7 < v6 || v7 >= v20 || v7 != v6) {
          *(void *)uint64_t v7 = *(void *)v6;
        }
LABEL_27:
        v7 += 8;
        if (v4 < v14)
        {
          uint64_t v6 = v20;
          if ((unint64_t)v20 < a3) {
            continue;
          }
        }
        goto LABEL_93;
      }
    }
LABEL_95:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v11 < -7) {
    goto LABEL_95;
  }
  if (__dst != a2 || &a2[8 * v13] <= __dst) {
    memmove(__dst, a2, 8 * v13);
  }
  uint64_t v21 = &v4[8 * v13];
  Swift::Int v39 = v21;
  int v41 = v6;
  if (v7 >= v6 || v11 < 8) {
    goto LABEL_94;
  }
  BOOL v22 = (char *)(a3 - 8);
  uint64_t v23 = v6;
  Swift::Int v38 = v7;
  while (1)
  {
    BOOL v24 = v22 + 8;
    int v25 = v21 - 8;
    unsigned int v27 = *((_DWORD *)v23 - 2);
    v23 -= 8;
    unsigned int v26 = v27;
    unsigned int v28 = (0x801004u >> (8 * *(v21 - 4)));
    unsigned int v29 = (0x801004u >> (8 * v23[4]));
    if (v28 != v29) {
      goto LABEL_90;
    }
    if (*(v21 - 1)) {
      goto LABEL_62;
    }
    if ((v23[7] & 1) == 0)
    {
LABEL_90:
      if (v28 < v29 || *((_DWORD *)v21 - 2) < v26) {
        goto LABEL_62;
      }
      uint64_t v31 = v4;
      int v32 = *(v21 - 3);
      int v33 = v23[5];
      unsigned int v34 = v21;
      sub_100010BCC(&qword_10047EEE0);
      uint64_t v21 = v34;
      int v35 = v33;
      uint64_t v7 = v38;
      int v36 = v32;
      uint64_t v4 = v31;
      if (v35 != 2)
      {
        if (v36 == 2) {
          goto LABEL_62;
        }
        if (v35 != 3)
        {
          if (v36 == 3) {
            goto LABEL_62;
          }
          if (v35 - 2) < 5 || (v35)
          {
            if ((v36 - 2) >= 5 && (v36 & 1) == 0) {
              goto LABEL_62;
            }
            if ((v35 - 2) < 5u || (v35 & 1) == 0)
            {
              if (v36 - 2) >= 5u && (v36) {
                goto LABEL_62;
              }
              if (v35 != 4)
              {
                if (v36 == 4) {
                  goto LABEL_62;
                }
                if (v35 != 5)
                {
                  if (v36 == 5) {
                    goto LABEL_62;
                  }
                  if (v35 != 6) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
    Swift::Int v39 = v25;
    if (v24 < v21 || v22 >= v21 || v24 != v21) {
      *(void *)BOOL v22 = *(void *)v25;
    }
    uint64_t v23 = v6;
    uint64_t v21 = v25;
    if (v6 <= v7) {
      goto LABEL_94;
    }
LABEL_73:
    v22 -= 8;
    uint64_t v6 = v23;
    if (v21 <= v4) {
      goto LABEL_94;
    }
  }
  if (v36 == 6)
  {
LABEL_62:
    if (v24 != v6 || v22 >= v6) {
      *(void *)BOOL v22 = *(void *)v23;
    }
    int v41 = v23;
    if (v23 <= v7) {
      goto LABEL_94;
    }
    goto LABEL_73;
  }
LABEL_92:
  _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
LABEL_93:
  int v41 = v7;
LABEL_94:
  sub_100114D84((void **)&v41, &v40, &v39);
  return 1;
}

char *sub_100114B14(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100010BCC(&qword_10047FD00);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2)  = v8;
    *((void *)v10 + 3)  = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  unsigned int v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2)  = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}